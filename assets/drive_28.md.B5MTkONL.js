import{_ as c,o as n,c as r,a as t,m as f,t as h,C as p,M as b,U as _,f as l,F as v,p as y,e as w,q}from"./chunks/framework.B1z0IdBH.js";const x={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},C={class:"review-title"},R={class:"review-content"};function I(i,e,u,d,s,a){return n(),r("div",k,[t("div",T,[t("div",C,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),f(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",R,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),f(h(u.poem.solution),1)])])])}const F=c(x,[["render",I],["__scopeId","data-v-2969f8e3"]]),A=JSON.parse(`[{"question":"Create a function that checks if all elements in a list are numbers.","solution":"def all_elements_are_numbers(lst): Checks if all elements in the given list are numbers. Args: lst (list): A list of elements. Returns: bool: True if all elements are numbers, False otherwise. return all(isinstance(x, (int, float)) for x in lst)"},{"question":"Create a function that accepts a list of integers as input and returns the sum of all the integers in the list considering they are in descending order. For example, given the list [5, 3, 8, 1], the function should return 17 because when the numbers are sorted in descending order, it becomes [8, 5, 3, 1], and the sum is 8 + 5 + 3 + 1 = 17.","solution":"def sum_descending_order(nums): Returns the sum of all integers in the list sorted in descending order. nums_sorted = sorted(nums, reverse=True) return sum(nums_sorted)"},{"question":"Create a function that accepts two arguments, x and y, and returns the product of x and y, but only if x is greater than y. If x is not greater than y, the function should return None.","solution":"def product_if_greater(x, y): Returns the product of x and y if x is greater than y. Otherwise, returns None. if x > y: return x * y return None"},{"question":"Create a function that removes duplicate characters from a string and returns the result. The function should be efficient and work for any input string.","solution":"def remove_duplicates(s): Removes duplicate characters from a string and returns the result. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that generates a list of numbers that are multiples of either 3 or 5 up to a given number n.","solution":"def multiples_of_3_or_5(n): Returns a list of numbers that are multiples of either 3 or 5 up to a given number n. return [i for i in range(1, n + 1) if i % 3 == 0 or i % 5 == 0]"},{"question":"Create a function that takes in a string of spaces-separated numbers and returns the minimum and maximum values among the numbers. The function should handle the input conversion and error checking to ensure the input is valid (i.e., contains only spaces-separated integers).","solution":"def find_min_max(numbers_string): Returns the minimum and maximum values from a space-separated string of numbers. :param numbers_string: A string of space-separated numbers :return: A tuple containing the minimum and maximum values :raises: ValueError if the input string is not valid try: numbers = list(map(int, numbers_string.split())) if not numbers: raise ValueError(\\"The input string must contain at least one integer.\\") return min(numbers), max(numbers) except ValueError as e: raise ValueError(\\"Input string contains non-integer values or is empty\\") from e"},{"question":"Create a function that generates a sequence of prime numbers up to a specified maximum value \`n\`. The function should return a list of all prime numbers found within the range from 2 up to and including \`n\`.","solution":"def generate_primes(n): Returns a list of prime numbers up to and including n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that calculates the sum of all numbers in a given list that are divisible by a specific divisor.","solution":"def sum_divisible_by(numbers, divisor): Returns the sum of all numbers in the list that are divisible by the given divisor. :param numbers: List of integers. :param divisor: Integer divisor. :return: Sum of integers in the list that are divisible by the divisor. return sum(num for num in numbers if num % divisor == 0)"},{"question":"Create a function that takes in two strings str1 and str2. The function should return a string that contains all characters from both strings maintaining their original order while removing any duplicates (similar to set union, but preserving the order of characters as they appear first in the strings).","solution":"def combine_and_remove_duplicates(str1, str2): Returns a string that contains all characters from both strings str1 and str2 maintaining their original order while removing any duplicates. combined = str1 + str2 seen = set() result = [] for char in combined: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that takes two arrays of numbers and returns the intersection of the two arrays. The intersection of two arrays is defined as the array of elements that are common to both arrays.","solution":"def array_intersection(arr1, arr2): Returns the intersection of two arrays. The intersection of two arrays is defined as the array of elements that are common to both arrays. return list(set(arr1) & set(arr2))"},{"question":"Create a function that takes a string and returns a new string representation that has all repeated characters removed, but the order of characters should be maintained.","solution":"def remove_repeated_characters(s): Returns a new string with all repeated characters removed, while maintaining the order of characters. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that will take a list of numbers and return a new list where each element is the sum of the elements in the original list up to that point. For example, if the input list is \`[1, 2, 3, 4]\`, the output should be \`[1, 3, 6, 10]\`.","solution":"def cumulative_sum(lst): Returns a list where each element is the sum of the elements in the original list up to that point. Parameters: lst (list): A list of numbers Returns: list: A new list with the cumulative sum of the elements cumulative_list = [] cumulative_total = 0 for num in lst: cumulative_total += num cumulative_list.append(cumulative_total) return cumulative_list"},{"question":"Create a function that takes a list of integers and returns a new list with the elements in reverse order. Additionally, the function should remove any duplicates from the list while preserving the order of the unique elements.","solution":"def reverse_and_remove_duplicates(lst): Takes a list of integers and returns a new list with the elements in reverse order, removing any duplicates and preserving the order of the unique elements. Args: lst (list of int): The input list of integers. Returns: list of int: The reversed list with duplicates removed. seen = set() result = [] # iterate over the list in reverse order for num in reversed(lst): if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Create a function that returns the sum of all the numbers in a given list. In Python, how can this be done?","solution":"def sum_of_list(numbers): Returns the sum of all the numbers in the given list. Parameters: numbers (list): A list of numbers Returns: int/float: The sum of all the numbers in the list return sum(numbers)"},{"question":"Create a function that takes a string of text and returns a new string with all the vowels removed from it. Additionally, the function should return the count of removed vowels. The function should be case-insensitive and consider 'aeiou' as vowels.","solution":"def remove_vowels(text): Removes all vowels from the input text and returns the new text along with the count of removed vowels. Parameters: text (str): The input string of text. Returns: tuple: A tuple containing the text without vowels and the count of removed vowels. vowels = \\"aeiouAEIOU\\" count = 0 new_text = [] for char in text: if char in vowels: count += 1 else: new_text.append(char) return \\"\\".join(new_text), count"},{"question":"Create a function that increments a given number by 1 and returns the result. The function should only accept numbers starting from 0. If the input number is negative, the function should return an error message.","solution":"def increment(number): Increments the given number by 1 if it is non-negative. Returns an error message if the input number is negative. if number < 0: return \\"Error: The input number must be non-negative.\\" return number + 1"},{"question":"Create a function that calculates the sum of the first \`n\` integers, where \`n\` is a non-negative integer input by the user. Use recursion to solve this problem. Do not use any loops!","solution":"def sum_of_integers(n): Returns the sum of the first n integers using recursion. n: non-negative integer if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 0 else: return n + sum_of_integers(n - 1)"},{"question":"Create a function that accepts an array and returns the sum of all the elements in the array using TypeScript. If the array is empty, return 0. Additionally, handle the case when the array contains non-numeric values and ignore them while calculating the sum.","solution":"def sum_array(arr): Returns the sum of all numeric elements in the array. Non-numeric elements are ignored. return sum(x for x in arr if isinstance(x, (int, float)))"},{"question":"Create a function that formats a phone number in the following format: (XXX) XXX-XXXX.","solution":"def format_phone_number(numbers): Takes a list of numbers and returns a string formatted as (XXX) XXX-XXXX. Assumes the input list length is exactly 10. if len(numbers) != 10 or not all(isinstance(x, int) for x in numbers): raise ValueError(\\"Input must be a list of 10 integers.\\") str_numbers = [str(num) for num in numbers] formatted_number = f\\"({''.join(str_numbers[:3])}) {''.join(str_numbers[3:6])}-{''.join(str_numbers[6:])}\\" return formatted_number"},{"question":"Create a function that takes a string s as input and returns the longest palindromic substring in s. A palindromic substring must consist of only letters and not digits or special characters. Only consider letters from 'a' to 'z' when determining if a substring is a palindrome.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring from s consisting only of letters, ignoring digits and special characters. def is_palindrome(sub): return sub == sub[::-1] n = len(s) max_len = 0 longest_palindrome = \\"\\" filtered_s = ''.join([char for char in s if char.isalpha()]) for i in range(len(filtered_s)): for j in range(i, len(filtered_s)): substring = filtered_s[i:j+1] if is_palindrome(substring) and len(substring) > max_len: max_len = len(substring) longest_palindrome = substring return longest_palindrome"},{"question":"Create a function that implements a binary search algorithm in Python to find a specific element in a sorted list of numbers. If the element is not found, return -1.","solution":"def binary_search(arr, target): Implements the binary search algorithm to find target in sorted list arr. :param arr: List of sorted numbers :param target: Number to search for :return: Index of target if found, else -1 left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that takes two arguments: a list and a value. The function returns the number of occurrences of the value in the list.","solution":"def count_occurrences(lst, value): Returns the number of occurrences of value in lst. Parameters: lst (list): The list to search in. value: The value to count occurrences of. Returns: int: The number of occurrences of value in lst. return lst.count(value)"},{"question":"Create a function that takes a number and returns its factorial. Implement the function using recursion in Python.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Create a function that takes in a list of integers and outputs a list of the same integers but with the absolute value applied to each.","solution":"def apply_absolute(lst): Returns a list with the absolute value applied to each integer in the input list. return [abs(x) for x in lst]"},{"question":"Create a function that checks if two strings are anagrams of each other, ignoring case sensitivity.","solution":"def are_anagrams(str1, str2): Checks if two strings are anagrams of each other, ignoring case sensitivity. Anagrams are words or phrases that contain the same characters in the same frequency, but the order of characters can be different. Args: str1 (str): First string. str2 (str): Second string. Returns: bool: True if the strings are anagrams, False otherwise. # Normalize the strings by converting to lowercase and sorting the characters normalized_str1 = sorted(str1.lower()) normalized_str2 = sorted(str2.lower()) # Compare the normalized strings return normalized_str1 == normalized_str2"},{"question":"Create a function that takes a list of integers and returns a new list with each number being multiplied by 3. Use list comprehension for this task.","solution":"def multiply_by_three(numbers): Returns a new list with each number in the input list being multiplied by 3. return [num * 3 for num in numbers]"},{"question":"Create a function that takes a list of integers and returns a new list with all the duplicates removed. The function should maintain the original order of the first occurrences of each unique integer.","solution":"def remove_duplicates(lst): Returns a new list with duplicates removed. The order of the first occurrences of each unique integer is maintained. seen = set() unique_lst = [] for num in lst: if num not in seen: seen.add(num) unique_lst.append(num) return unique_lst"},{"question":"Create a function that determines the frequency of a given character in a string. The function should return the count of occurrences of the character in the string. It's important to consider case sensitivity, meaning 'A' and 'a' are considered different characters. You cannot use any built-in string methods for counting.","solution":"def char_frequency(string, character): Returns the frequency of 'character' in the 'string'. Case sensitive: 'A' and 'a' are considered different characters. count = 0 for char in string: if char == character: count += 1 return count"},{"question":"Create a function that takes an array of integers as input and return the sum of the maximum subarray using Kadane's algorithm.","solution":"def max_subarray_sum(nums): Returns the sum of the maximum subarray using Kadane's algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that accepts two parameters: a string and a number. The function should return a new string where every character in the string is repeated 'n' times where 'n' is the number passed as the second parameter.","solution":"def repeat_characters(s, n): Returns a new string where every character in the input string \`s\` is repeated \`n\` times. Parameters: s (str): The input string. n (int): The number of times each character should be repeated. Returns: str: A new string with characters repeated. return ''.join([char * n for char in s])"},{"question":"Create a function that takes an integer array as an input and finds the maximum and minimum values in the array. The function should return these values in a tuple.","solution":"def find_max_min(arr): Returns a tuple containing the maximum and minimum values in the array. :param arr: List of integers. :return: Tuple containing (max_value, min_value). if not arr: raise ValueError(\\"Array cannot be empty\\") max_val = max(arr) min_val = min(arr) return (max_val, min_val)"},{"question":"Create a function that receives a numeric array and returns the cumulative sum of all its elements. The function should handle both positive and negative integers. Ensure that the function is capable of handling any dimensions of the input array.","solution":"import numpy as np def cumulative_sum(array): Returns the cumulative sum of all elements in the given numeric array. The function handles both positive and negative integers and can handle arrays of any dimensions. Parameters: array (numpy.ndarray): Input numeric array Returns: numpy.ndarray: Cumulative sum of all elements in the input array return np.cumsum(array)"},{"question":"Create a function that takes a string as an input and returns the ASCII values of all characters in the string.","solution":"def string_to_ascii_values(s): Returns a list of ASCII values of all characters in the input string. :param s: Input string :return: List of ASCII values of characters return [ord(char) for char in s]"},{"question":"Create a function that takes an input of an array of integers and returns the length of the array.","solution":"def array_length(arr): Returns the length of the input array. Parameters: arr (list): A list of integers. Returns: int: The length of the array. return len(arr)"},{"question":"Create a function that takes a list of tuples as an argument and returns a new list that is sorted by the second item of each tuple in ascending order.","solution":"def sort_tuples_by_second_item(tuples_list): Sorts a list of tuples by the second item of each tuple in ascending order. Args: tuples_list (list of tuples): The list of tuples to be sorted. Returns: list of tuples: A new list sorted by the second item of each tuple. return sorted(tuples_list, key=lambda x: x[1])"},{"question":"Create a function that finds and returns the contiguous subarray of an array that has the largest sum of integers. This is known as the Maximum Subarray problem. The function should be as efficient as possible.","solution":"def max_sub_array(nums): Returns the largest sum of contiguous subarray from the given list of integers. :param nums: List[int] :return: int if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that calculates the prefix sum of a given list of integers. The prefix sum of a list is a new list where the i-th element is the sum of the first i elements of the input list. For example, the prefix sum of \`[1, 2, 3, 4]\` should be \`[1, 3, 6, 10]\`.","solution":"def prefix_sum(nums): Returns the prefix sum of the input list. :param nums: List of integers. :return: List of integers representing the prefix sums. if not nums: return [] prefix_sums = [nums[0]] for i in range(1, len(nums)): prefix_sums.append(prefix_sums[-1] + nums[i]) return prefix_sums"},{"question":"Create a function that takes in two arguments. The first is a list of numbers, the second is a target number. The function should return True if two elements in the list add up to the target number, and False otherwise.","solution":"def has_pair_with_sum(nums, target): Returns True if there are two distinct elements in nums that add up to target, otherwise False. num_set = set() for num in nums: if target - num in num_set: return True num_set.add(num) return False"},{"question":"Create a function that takes an integer \`N\` as a parameter. The function should return the result of adding \`N\` to its reverse.","solution":"def add_reverse(N): Returns the result of adding N to its reverse. # Reverse the number by converting it to string, then reversing and converting back to int reverse_N = int(str(abs(N))[::-1]) if N < 0: reverse_N = -reverse_N # ensure to handle negative numbers correctly return N + reverse_N"},{"question":"Create a function that generates a Fibonacci sequence up to a given number n. The function should return the sequence as a list. Additionally, the function should handle cases where the input n is less than 2 and ensure that the sequence is correctly formatted.","solution":"def generate_fibonacci(n): Generates Fibonacci sequence up to n elements. Parameters: n (int): The number of elements in the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence up to n elements. if n <= 0: return [] elif n == 1: return [0] fibonacci_sequence = [0, 1] while len(fibonacci_sequence) < n: next_value = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_value) return fibonacci_sequence"},{"question":"Create a function that takes in a list of integers and returns the number of times the function encounters the tuple (1, 2). The function should also print the count every time it encounters the tuple.","solution":"def count_tuple_occurrences(lst): Counts the number of times the tuple (1, 2) appears in the list of integers. Prints the count every time the tuple is encountered. Args: lst (list): A list of integers Returns: int: The count of tuple (1, 2) occurrences count = 0 for i in range(len(lst) - 1): if lst[i] == 1 and lst[i + 1] == 2: count += 1 print(f\\"Count of (1, 2): {count}\\") return count"},{"question":"Create a function that takes a 2D list (array) as input and returns the longest length of sublists within the array. The function should handle arrays of arbitrary depth, not just 2D lists.","solution":"def find_longest_length(arr): Takes a 2D list (array) of arbitrary depth as input and returns the longest length of sublists within the array. if not isinstance(arr, list): return -1 # invalid input max_length = 0 def traverse(lst): nonlocal max_length if isinstance(lst, list): max_length = max(max_length, len(lst)) for item in lst: traverse(item) traverse(arr) return max_length"},{"question":"Create a function that takes a filename and returns the number of lines in that file.","solution":"def count_lines(filename): Returns the number of lines in the given file. with open(filename, 'r') as file: return sum(1 for _ in file)"},{"question":"Create a function that takes an integer as input and determine if it's an Armstrong number. An Armstrong number of three digits is an integer such that the sum of the cubes of its digits is equal to the number itself. For example, 371 is an Armstrong number since 3**3 + 7**3 + 1**3 = 371. Integers with more than three digits can also be Armstrong numbers, but for simplicity, we'll focus on three-digit numbers here.","solution":"def is_armstrong_number(n): Determine if a three-digit number is an Armstrong number. An Armstrong number for a three-digit integer is such that the sum of the cubes of its digits is equal to the number itself. Args: n (int): The integer number to check. Returns: bool: True if the number is an Armstrong number, False otherwise. if not (100 <= n <= 999): raise ValueError(\\"The number must be a three-digit integer\\") digits = [int(d) for d in str(n)] return sum([digit**3 for digit in digits]) == n"},{"question":"Create a function that can be used to detect the presence of a string in a given text. How can it be used?","solution":"def detect_string_presence(text, substring): Detects the presence of a substring in a given text. Parameters: text (str): The string to search within. substring (str): The string to search for. Returns: bool: True if the substring is found in the text, otherwise False. return substring in text"},{"question":"Create a function that takes two parameters \`num_of_cycles\` and \`cycle_duration\`. This function should return the total amount of time in seconds spent in one cycle of an event. For each cycle, there are \`num_of_cycles\` iterations of the event, and each iteration takes \`cycle_duration\` seconds. However, there is a pause of 1 second after each iteration except for the last one.","solution":"def total_time(num_of_cycles, cycle_duration): Returns the total time spent for all cycles given the number of cycles and duration of each cycle. Parameters: num_of_cycles (int): Number of iterations per cycle cycle_duration (int): Duration of each iteration in seconds Returns: int: Total time in seconds spent for all cycles including pauses if num_of_cycles <= 0 or cycle_duration < 0: raise ValueError(\\"Number of cycles must be greater than 0 and cycle duration must be non-negative\\") # Duration of all cycles without pauses total_duration = num_of_cycles * cycle_duration # Number of pauses is one less than the number of cycles pauses_duration = (num_of_cycles - 1) # Total time is the sum of the duration and pauses total_time_spent = total_duration + pauses_duration return total_time_spent"},{"question":"Create a function that takes two arguments: a list of strings and a character. The function should return a new list containing only the strings from the original list that start with the given character.","solution":"def filter_strings_starting_with(strings, char): Filters a list of strings to include only those starting with the specified character. Parameters: strings (list of str): The list of strings to filter. char (str): The character to filter the strings by. Returns: list of str: A list of strings that start with the specified character. return [s for s in strings if s.startswith(char)]"},{"question":"Create a function that prints the numbers from 1 to 5 using a for loop.","solution":"def print_numbers_1_to_5(): Prints the numbers from 1 to 5 using a for loop. for number in range(1, 6): print(number)"},{"question":"Create a function that generates a random integer between 1 and 10 using Python pseudocode","solution":"import random def generate_random_integer_1_to_10(): Returns a random integer between 1 and 10 inclusive. return random.randint(1, 10)"},{"question":"Create a function that accepts two arrays of integers and returns the common elements in both arrays. The function should not only return the common elements but also count the occurrences of these common elements in both arrays and return an array of tuples, where each tuple contains the common element and its occurrence count in both arrays. For example, if the input arrays are [1, 2, 2, 3] and [2, 2, 4], the output should be [(2, 2, 2)]. This means that 2 is common in both arrays and it appears 2 times in the first array and 2 times in the second array.","solution":"from collections import Counter def common_elements_with_counts(arr1, arr2): Accepts two arrays of integers and returns an array of tuples where each tuple contains a common element and its occurrence count in both arrays. count1 = Counter(arr1) count2 = Counter(arr2) common = count1.keys() & count2.keys() return [(element, count1[element], count2[element]) for element in common]"},{"question":"Create a function that takes an integer as an input and returns a string of that number in binary format, but with a specific format applied. The binary string should be prefixed with \\"bin_\\" and suffixed with \\"_end\\". For example, if the input is 5, the function should return \\"bin_101_end\\". If the input is 10, the function should return \\"bin_1010_end\\". Ensure the function handles both positive and negative integers by treating negative integers as their absolute values.","solution":"def format_binary_string(number): Converts the given integer to a binary string with specified prefixes and suffixes. The binary string should be prefixed with \\"bin_\\" and suffixed with \\"_end\\". Negative integers are treated as their absolute values. Args: number (int): The input integer. Returns: str: The formatted binary string. if number < 0: number = abs(number) binary_string = bin(number)[2:] return f\\"bin_{binary_string}_end\\""},{"question":"Create a function that accepts a list of numbers as a parameter and returns the sum of only the even numbers in the list. You are not allowed to use built-in functions like \`sum()\`, \`len()\`, or any loop constructs. How can you achieve this using recursion?","solution":"def sum_even_numbers(numbers): Returns the sum of only the even numbers in the list using recursion. if not numbers: return 0 rest_sum = sum_even_numbers(numbers[1:]) if numbers[0] % 2 == 0: return numbers[0] + rest_sum else: return rest_sum"},{"question":"Create a function that converts a single digit number to its corresponding English word. For example, 0 maps to \\"zero\\", 1 maps to \\"one\\", and so on. If the input is not a single digit number or is out of the range of 0 to 9, return \\"unknown\\". Use only basic Python to achieve this.","solution":"def digit_to_word(digit): Converts a single digit number to its corresponding English word. If the input is not in the range 0-9, returns \\"unknown\\". digit_words = [\\"zero\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\"] if isinstance(digit, int) and 0 <= digit <= 9: return digit_words[digit] return \\"unknown\\""},{"question":"Create a function that takes an array of integers and a target value, and returns the count of numbers in the array that are exactly equal to the target value. If the target value is not found in the array, return 0.","solution":"def count_target(arr, target): Returns the count of numbers in the array that are exactly equal to the target value. :param arr: List of integers :param target: Integer target value to count in the array :return: Integer count of target value occurrences in the array return arr.count(target)"},{"question":"Create a function that always returns the string \\"Hello World!\\"","solution":"def say_hello_world(): Returns the string 'Hello World!' return \\"Hello World!\\""},{"question":"Create a function that takes two strings as input and returns the number of overlapping substrings of length 3 within both strings.","solution":"def count_overlapping_substrings(str1, str2): Returns the number of overlapping substrings of length 3 within both strings. substrings1 = {str1[i:i+3] for i in range(len(str1) - 2)} substrings2 = {str2[i:i+3] for i in range(len(str2) - 2)} overlap = substrings1.intersection(substrings2) return len(overlap)"},{"question":"Create a function that reverses a given string without reversing the individual words. For example, if the input is \\"hello world\\", the output should be \\"world hello\\".","solution":"def reverse_words_in_string(s): Reverses the words in the given string without reversing the individual words. Parameters: s (str): The input string to be reversed. Returns: str: The string with words in reverse order. words = s.split() reversed_words = words[::-1] return \\" \\".join(reversed_words)"},{"question":"Create a function that takes two arguments: a list of integers and a target integer. The function should return True if the target integer can be found in the list, and False otherwise. Implement this function using a for-loop.","solution":"def contains(lst, target): Returns True if the target integer is found in the list, otherwise False. for item in lst: if item == target: return True return False"},{"question":"Create a function that takes a list of integers and returns the sum and product of all the integers in the list. If the list is empty, the function should return the sum of 0 and the product of 1. This problem seems simple, but I want to make sure I cover all edge cases. Can you provide a complete solution with the necessary comments for clarity?","solution":"def sum_and_product(numbers): Returns the sum and product of all the integers in the list. If the list is empty, returns a tuple (0, 1). if not numbers: return (0, 1) total_sum = sum(numbers) total_product = 1 for num in numbers: total_product *= num return (total_sum, total_product)"},{"question":"Create a function that accepts a string and a list of words as parameters. The function should return a count of how many times each word in the list appears in the string.","solution":"def word_count(text, words): Returns a dictionary where the keys are words from the provided list and the values are the count of how many times each word appears in the string. :param text: str, the input string to search within. :param words: list of str, the list of words to count in the text. :return: dict, where the keys are words and values are their counts. word_dict = {word: 0 for word in words} text_words = text.split() for word in text_words: if word in word_dict: word_dict[word] += 1 return word_dict"},{"question":"Create a function that takes a list of integers and a target sum. The function should return the number of unique pairs in the list that add up to the target sum. Pairs are considered unique if they have different indices in the list, and the order of elements in the pair doesn't matter (i.e., (a, b) is considered the same as (b, a)).","solution":"def count_unique_pairs(nums, target): Returns the number of unique pairs in the list nums that add up to the target sum. if not nums: return 0 seen = set() pairs = set() count = 0 for num in nums: complement = target - num if complement in seen: pair = tuple(sorted((num, complement))) if pair not in pairs: pairs.add(pair) count += 1 seen.add(num) return count"},{"question":"Create a function that takes a string as input and prints the ASCII value of each character in the string.","solution":"def print_ascii_values(input_string): Takes a string as input and prints the ASCII value of each character in the string. for char in input_string: print(f\\"{char}: {ord(char)}\\")"},{"question":"Create a function that takes two lists of numbers as input and returns the median of the merged list.","solution":"def find_median_sorted_arrays(nums1, nums2): Returns the median of the merged sorted list from nums1 and nums2. nums1.extend(nums2) nums1.sort() n = len(nums1) if n % 2 == 1: return nums1[n // 2] else: return (nums1[n // 2 - 1] + nums1[n // 2]) / 2"},{"question":"Create a function that takes two parameters, a number and a power, and returns the result of the number raised to the power.","solution":"def power(number, exponent): Returns the result of number raised to the power of exponent. return number ** exponent"},{"question":"Create a function that takes an array of integers and returns an array of their binary representations. Each integer in the output array should be a string that represents the binary equivalent of the input integer.","solution":"def int_to_binary_list(int_array): Converts an array of integers to an array of their binary string representations. Parameters: int_array (list of int): A list of integers. Returns: list of str: A list of strings, where each string is the binary representation of the corresponding integer. return [bin(num)[2:] for num in int_array]"},{"question":"Create a function that generates a stream of Fibonacci numbers using an infinite loop in Python.","solution":"def fibonacci(): Generates an infinite stream of Fibonacci numbers. a, b = 0, 1 while True: yield a a, b = b, a + b"},{"question":"Create a function that accepts three parameters: \`a\`, \`b\`, and \`c\`, which represent the coefficients of a quadratic equation ( ax^2 + bx + c = 0 ). The function should return the roots of the equation.","solution":"import cmath def find_roots(a, b, c): Returns the roots of the quadratic equation ax^2 + bx + c = 0. # Calculating the discriminant discriminant = b**2 - 4*a*c # Finding two roots using quadratic formula root1 = (-b + cmath.sqrt(discriminant)) / (2*a) root2 = (-b - cmath.sqrt(discriminant)) / (2*a) return root1, root2"},{"question":"Create a function that takes a string containing only the characters '(' and ')'. Your function should return True if the string of parentheses is correctly balanced, and False otherwise.","solution":"def is_balanced_parentheses(s): Returns True if the string of parentheses is correctly balanced, and False otherwise. balance = 0 for char in s: if char == '(': balance += 1 elif char == ')': balance -= 1 if balance < 0: return False return balance == 0"},{"question":"Create a function that takes in a nested dictionary and returns its maximum depth of nesting. The depth of a dictionary is defined as the maximum number of nested levels before reaching a dictionary value that does not contain any further nested dictionaries.","solution":"def max_nesting_depth(nested_dict): Returns the maximum depth of nesting in a given dictionary. if not isinstance(nested_dict, dict) or not nested_dict: return 0 else: return 1 + max(max_nesting_depth(v) for v in nested_dict.values())"},{"question":"Create a function that takes a string and returns the number of times the string 'abc' appears in it, considering the overlap instances as well. For example, the string 'abcabc' should return 2.","solution":"def count_abc_overlaps(s): Returns the number of times the string 'abc' appears in the input string \`s\`, counting overlapping instances. count = 0 for i in range(len(s) - 2): if s[i:i+3] == 'abc': count += 1 return count"},{"question":"Create a function that takes in an array of integers and return an array of integers that is sorted in ascending order using the Selection Sort algorithm.","solution":"def selection_sort(arr): Sorts an array of integers in ascending order using the Selection Sort algorithm. Args: arr (list of int): The array to be sorted. Returns: list of int: Sorted array in ascending order. n = len(arr) for i in range(n): # Find the index of the smallest element in the remaining unsorted array min_index = i for j in range(i+1, n): if arr[j] < arr[min_index]: min_index = j # Swap the found minimum element with the first element of the unsorted part arr[i], arr[min_index] = arr[min_index], arr[i] return arr"},{"question":"Create a function that returns the middle character(s) of a string.","solution":"def middle_character(s): Returns the middle character(s) of a string. If the string length is odd, one middle character is returned. If the string length is even, two middle characters are returned. length = len(s) middle = length // 2 if length % 2 == 0: # even length, return two middle characters return s[middle-1:middle+1] else: # odd length, return one middle character return s[middle]"},{"question":"Create a function that takes two parameters, compare the values of the parameters, and returns the higher of the two.","solution":"def get_higher_value(a, b): Returns the higher value between a and b. return a if a > b else b"},{"question":"Create a function that takes an integer and returns the factorial of that number. The function should handle both positive and negative input numbers. For negative input numbers, the function should return None. For positive input numbers, it should return the factorial of the number.","solution":"def factorial(num): if num < 0: return None elif num == 0 or num == 1: return 1 else: result = 1 for i in range(2, num + 1): result *= i return result"},{"question":"Create a function that takes an integer n as input and returns a list of Fibonacci sequence numbers up to the nth number.","solution":"def fibonacci_sequence(n): Returns a list containing the Fibonacci sequence up to the nth number. if n < 1: return [] fib_sequence = [0, 1] while len(fib_sequence) < n: next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence[:n]"},{"question":"Create a function that takes a string as a parameter and returns the number of words in the string split by spaces. For example, the function should return 1 for the string \\"hello\\", 2 for \\"hello world\\", and 0 for an empty string.","solution":"def count_words(input_string): Returns the number of words in the input string, where words are delimited by spaces. if not input_string.strip(): return 0 return len(input_string.split())"},{"question":"Create a function that takes a list of integers and returns the index of the first occurrence of a given integer in the list. If the integer is not found, return -1.","solution":"def find_index(lst, target): Returns the index of the first occurrence of target in lst. If target is not found, returns -1. try: return lst.index(target) except ValueError: return -1"},{"question":"Create a function that takes two integers as input and returns the sum of their squares. The function should be named \`sum_of_squares\`. The function should be efficient and work correctly for all integer inputs.","solution":"def sum_of_squares(a, b): Returns the sum of the squares of two integers a and b. return a**2 + b**2"},{"question":"Create a function that accepts a list of integers and returns the sum of all even numbers in the list. Assume the list can contain both positive and negative integers. How can you implement this function in Python?","solution":"def sum_of_even_numbers(lst): Returns the sum of all even numbers in the list. return sum(num for num in lst if num % 2 == 0)"},{"question":"Create a function that takes an integer input and returns the sum of all positive divisors of the number (excluding the number itself). A positive divisor of a number n is an integer that divides n without leaving a remainder. For example, the divisors of 6 are 1, 2, and 3, and their sum is 6.","solution":"def sum_of_divisors(n): Returns the sum of all positive divisors of the number n, excluding n itself. if n <= 1: return 0 sum_divisors = 0 for i in range(1, n): if n % i == 0: sum_divisors += i return sum_divisors"},{"question":"Create a function that takes an array of integers and returns the maximum and minimum values in the array without using built-in functions like \`max()\` and \`min()\`.","solution":"def find_max_and_min(arr): Returns the maximum and minimum values in the array. Parameters: arr (list of int): A list of integers. Returns: tuple: A tuple containing the maximum and minimum values in the array. if not arr: raise ValueError(\\"The array should not be empty\\") max_value = arr[0] min_value = arr[0] for num in arr[1:]: if num > max_value: max_value = num if num < min_value: min_value = num return max_value, min_value"},{"question":"Create a function that finds the greatest common divisor (GCD) of two positive integers. Your function should use the iterative version of the Euclidean algorithm and return the GCD. The function should iterate through the steps of the Euclidean algorithm until the remainder is zero. At that point, it should return the last non-zero remainder as the GCD. For example, gcd(12, 15) should return 3.","solution":"def gcd(a, b): Returns the greatest common divisor of a and b using the iterative Euclidean algorithm. while b != 0: a, b = b, a % b return a"},{"question":"Create a function that takes as input a number and returns a list of all distinct prime factors. A prime factor is a factor that is a prime number. For example, the number 36 has prime factors 2 and 3 (since 36 = 2^2 * 3^2). The function should return these factors in ascending order.","solution":"def prime_factors(n): Returns a list of distinct prime factors of the given number n. i = 2 factors = set() while i * i <= n: if n % i: i += 1 else: n //= i factors.add(i) if n > 1: factors.add(n) return sorted(factors)"},{"question":"Create a function that accepts an integer, and returns a list of its factors. Factors are numbers that divide into the integer without leaving a remainder. For instance, the factors of 12 are 1, 2, 3, 4, 6 and 12.","solution":"def get_factors(n): Returns a list of factors of the given integer n. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") factors = [i for i in range(1, n + 1) if n % i == 0] return factors"},{"question":"Create a function that converts an integer to its Roman numeral representation. Can you provide a Python function for this task?","solution":"def int_to_roman(num): Converts an integer to its Roman numeral representation. :param num: Integer to be converted to Roman numeral :return: A string representing the Roman numeral of the integer val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Create a function that checks if a word starts or ends with a consonant.","solution":"def is_consonant(char): Check if a given character is a consonant. Consonants are all alphabetic characters that are not vowels (a, e, i, o, u). return char.lower() in \\"bcdfghjklmnpqrstvwxyz\\" def starts_or_ends_with_consonant(word): Check if a word starts or ends with a consonant. Args: word (str): The word to check. Returns: bool: True if the word starts or ends with a consonant, False otherwise. if not word: return False first_char = word[0] last_char = word[-1] return is_consonant(first_char) or is_consonant(last_char)"},{"question":"Create a function that generates a Fibonacci sequence of numbers up to a given limit. The function should take one parameter, \`limit\`, which specifies the upper bound (inclusive) of the sequence. The Fibonacci sequence should start with 0 and 1, and each subsequent number in the sequence should be the sum of the two preceding ones.","solution":"def fibonacci_sequence(limit): Generates a list of Fibonacci numbers up to the given limit. Parameters: limit (int): The upper bound (inclusive) of the Fibonacci sequence. Returns: list: A list of Fibonacci numbers up to the given limit. if limit < 0: return [] sequence = [0, 1] while True: next_number = sequence[-1] + sequence[-2] if next_number > limit: break sequence.append(next_number) return sequence if limit > 0 else [0]"},{"question":"Create a function that takes a list of integers as input and returns the length of the longest increasing subsequence (LIS) within that list. You can assume that the input list is not empty.","solution":"def length_of_lis(nums): Takes a list of integers as input and returns the length of the longest increasing subsequence. if not nums: return 0 n = len(nums) lis = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Create a function that takes a string as input and replaces all the vowels with '@' symbol.","solution":"def replace_vowels(input_string): Replaces all vowels in the input string with '@' Parameters: input_string (str): The string to process Returns: str: The processed string with vowels replaced vowels = \\"aeiouAEIOU\\" return ''.join(['@' if char in vowels else char for char in input_string])"},{"question":"Create a function that takes a list of integers and returns a new list with the integers sorted in descending order based on the number of ones in their binary representation.","solution":"def sort_by_ones(arr): Sorts a list of integers in descending order based on the number of ones in their binary representation. :param arr: List of integers :return: List of integers sorted by the number of ones in their binary representation return sorted(arr, key=lambda x: bin(x).count('1'), reverse=True)"},{"question":"Create a function that takes a list of integers as input and returns the list with the elements in reverse order. For example, if the input list is \`[1, 2, 3, 4]\`, the function should return \`[4, 3, 2, 1]\`.","solution":"def reverse_list(lst): Returns the list with the elements in reverse order. Parameters: lst (list): A list of integers. Returns: list: A list of integers in reverse order. return lst[::-1]"},{"question":"Create a function that generates a random/sample data to simulate a dataset with a specified number of records. Each record should consist of a device id, a timestamp in the format 'YYYY-MM-DD', and a random value between 0 and 100.","solution":"import random from datetime import datetime, timedelta def generate_sample_data(num_records): Generates a list of dictionaries, each containing a device id, timestamp, and random value. :param num_records: Number of records to generate :return: List of dictionaries with keys 'device_id', 'timestamp', and 'value' data = [] for i in range(num_records): record = { 'device_id': f'device_{i}', 'timestamp': (datetime.today() - timedelta(days=random.randint(0, 30))).strftime('%Y-%m-%d'), 'value': random.randint(0, 100) } data.append(record) return data"},{"question":"Create a function that takes in two numbers, an integer \`a\` and a floating point number \`b\`. The function should return the result of \`a\` multiplied by \`b\` and then adding 5 to the result.","solution":"def multiply_and_add(a, b): Multiplies the integer a by the floating point number b, then adds 5 to the result. return a * b + 5"},{"question":"Create a function that generates a random integer between a given range.","solution":"import random def generate_random_integer(start, end): Returns a random integer between 'start' and 'end', inclusive. Parameters: start (int): The lower bound of the range. end (int): The upper bound of the range. Returns: int: A random integer between start and end. return random.randint(start, end)"},{"question":"Create a function that calculates the nth Fibonacci number using recursion. The Fibonacci sequence is defined by the recurrence relation F(n) = F(n-1) + F(n-2), with seed conditions F(0) = 0 and F(1) = 1. How can one implement this in Python?","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. Parameters: n (int): The position in the Fibonacci sequence. Returns: int: The nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function that replaces all occurrences of a specified word with a new word in a given string, but only if the specified word is a complete word (i.e., it is not a substring of another word). For example, in the string \\"apple is an apple pie\\", replacing \\"apple\\" should only replace the complete word instances and leave \\"pie\\" untouched.","solution":"import re def replace_word(text, old_word, new_word): Replaces all occurrences of old_word with new_word in text, only if old_word is a complete word. pattern = r'b{}b'.format(re.escape(old_word)) return re.sub(pattern, new_word, text)"},{"question":"Create a function that takes an integer input and calculates the sum of all even numbers from 0 up to and including the input number if it's even. If the input number is odd, the function should calculate the sum of all odd numbers from 0 up to and including the input number. The function should return the sum as an integer.","solution":"def sum_even_or_odd(n): Returns the sum of all even numbers from 0 to n if n is even, or the sum of all odd numbers from 0 to n if n is odd. if n % 2 == 0: return sum(i for i in range(0, n+1, 2)) else: return sum(i for i in range(1, n+1, 2))"},{"question":"Create a function that takes an integer as input and returns a string representation of the number with commas as thousand separators.","solution":"def format_number_with_commas(number): Returns the string representation of the number with commas as thousand separators. return f\\"{number:,}\\""},{"question":"Create a function that converts a binary string to its corresponding ASCII characters. The function should be able to handle the conversion for strings of different lengths and handle any potential errors gracefully.","solution":"def binary_to_ascii(binary_str): Converts a binary string to its corresponding ASCII characters. Args: binary_str (str): A string of binary characters (0s and 1s). Returns: str: The ASCII representation of the binary string. try: # Ensure the input is valid binary string format. if not all(c in '01' for c in binary_str): raise ValueError(\\"The input string should only contain characters '0' and '1'\\") # Break the string into 8-bit chunks. bytes_list = [binary_str[i:i+8] for i in range(0, len(binary_str), 8)] # Ensure all chunks are exactly 8 bits long. if not all(len(byte) == 8 for byte in bytes_list): raise ValueError(\\"The input binary string length should be a multiple of 8\\") # Convert each chunk to its ASCII character. ascii_chars = [chr(int(byte, 2)) for byte in bytes_list] return ''.join(ascii_chars) except Exception as e: return str(e)"},{"question":"Create a function that calculates the sum of all even numbers between two given positive integers, \`start\` and \`end\` (inclusive). If \`start\` is greater than \`end\`, the function should return -1. The function should be named \`sumEvenNumbers\`.","solution":"def sumEvenNumbers(start, end): Returns the sum of all even numbers between start and end (inclusive). If start is greater than end, returns -1. if start > end: return -1 # Ensure start is even if start % 2 != 0: start += 1 # Ensure end is even if end % 2 != 0: end -= 1 # Sum of all even numbers in the range return sum(range(start, end+1, 2))"},{"question":"Create a function that takes in a string. Your function should return \\"yes\\" if the string starts with the letter 'a', and \\"no\\" otherwise.","solution":"def starts_with_a(s): Returns 'yes' if the string starts with the letter 'a', otherwise returns 'no'. if s and s[0].lower() == 'a': return 'yes' else: return 'no'"},{"question":"Create a function that takes in a slice of strings and returns the longest string within the slice. If there are multiple strings with the same maximum length, return the first one encountered.","solution":"def longest_string(strings): Returns the longest string in the slice of strings. If there are multiple strings with the same maximum length, returns the first one encountered. :param strings: list of str :return: str if not strings: return \\"\\" max_length = -1 longest_str = \\"\\" for string in strings: if len(string) > max_length: max_length = len(string) longest_str = string return longest_str"},{"question":"Create a function that accepts two numbers and returns their sum. Implement this function in Python.","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Create a function that takes three numbers as input and returns the sum of the squares of the two larger numbers.","solution":"def sum_of_squares_of_two_larger_numbers(a, b, c): Takes three numbers and returns the sum of the squares of the two larger numbers. numbers = [a, b, c] numbers.sort() return numbers[1]**2 + numbers[2]**2"},{"question":"Create a function that takes an array of three integers as input and returns the integer that occurs most frequently in the array. If there is a tie, return the smallest integer among the tied integers. If the array is empty, return -1.","solution":"def most_frequent_integer(arr): Returns the most frequent integer in the list. If there is a tie, return the smallest integer among the tied integers. If the list is empty, return -1. if not arr: return -1 from collections import Counter counter = Counter(arr) most_frequent = counter.most_common() # Find the maximum frequency max_frequency = most_frequent[0][1] # Extract all elements with the maximum frequency candidates = [num for num, freq in most_frequent if freq == max_frequency] return min(candidates)"},{"question":"Create a function that finds and returns the maximum sum of a contiguous subsequence in a one-dimensional array of positive integers. How can you implement this logic with Kadane's Algorithm?","solution":"def max_subarray_sum(arr): Finds and returns the maximum sum of a contiguous subsequence in an array using Kadane's Algorithm. Parameters: arr (list of int): A list of positive integers. Returns: int: The maximum sum of a contiguous subsequence. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Create a function that takes a list of integers and returns the sum of the absolute values of the integers. If the list is empty, return 0. If the list contains only one element, return that element. If the list contains two or more elements, return the sum of the absolute values of all elements. The function should also handle the case when the list contains negative numbers by treating them as positive. For example, the absolute value of -5 is 5.","solution":"def sum_of_absolute_values(numbers): Returns the sum of the absolute values of the integers in the list. If the list is empty, returns 0. If the list contains only one element, returns that element. If the list contains two or more elements, returns the sum of the absolute values of all elements. if not numbers: return 0 if len(numbers) == 1: return abs(numbers[0]) return sum(abs(num) for num in numbers)"},{"question":"Create a function that takes in a list of integers and returns the sum of all the numbers that have exactly two digits.","solution":"def sum_of_two_digit_numbers(numbers): Returns the sum of all numbers in the list that have exactly two digits. Args: numbers (list of int): The list of integers to be checked. Returns: int: The sum of two-digit numbers. return sum(num for num in numbers if 10 <= abs(num) <= 99)"},{"question":"Create a function that generates a Fibonacci sequence of a specified length and returns it. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. Ensure the function handles sequences of any length, including 0.","solution":"def fibonacci_sequence(length): Generates a Fibonacci sequence of the specified length and returns it. Args: length (int): The length of the Fibonacci sequence to generate. Returns: list: The Fibonacci sequence of the specified length. if length <= 0: return [] sequence = [0, 1] while len(sequence) < length: sequence.append(sequence[-1] + sequence[-2]) return sequence[:length]"},{"question":"Create a function that takes an array of integers and returns the minimum element in the array. If the array is empty, return \`Integer::MAX_VALUE\`.","solution":"import sys def minimum_element(arr): Returns the minimum element in the array. If the array is empty, returns sys.maxsize (similar to Integer::MAX_VALUE in other languages). if not arr: return sys.maxsize return min(arr)"},{"question":"Create a function that takes two strings as input. The function will check if the second string is formed by rotating the first string. If the second string is formed by rotating the first string, the function returns True, otherwise, it returns False.","solution":"def is_rotated_string(s1, s2): Returns True if s2 is formed by rotating s1, otherwise returns False. if len(s1) != len(s2): return False return s2 in s1 + s1"},{"question":"Create a function that takes an integer as an argument and returns the sum of all divisors of that number except the number itself.","solution":"def sum_of_divisors(n): Returns the sum of all divisors of n except n itself. if n <= 0: return 0 sum_divisors = 0 for i in range(1, n): if n % i == 0: sum_divisors += i return sum_divisors"},{"question":"Create a function that takes in a list of tuples, each containing a file path and a file extension. The function should return a dictionary where the keys are the file extensions and the values are lists of file paths that end with that extension.","solution":"def organize_files_by_extension(files): Organizes a list of tuples containing file paths and file extensions into a dictionary. Parameters: files (list of tuples): A list where each tuple contains a file path (str) and a file extension (str). Returns: dict: A dictionary where the keys are file extensions and the values are lists of file paths ending with that extension. extension_dict = {} for file_path, file_extension in files: if file_extension in extension_dict: extension_dict[file_extension].append(file_path) else: extension_dict[file_extension] = [file_path] return extension_dict"},{"question":"Create a function that prints the odd numbers from 1 to 20.","solution":"def print_odd_numbers(): Prints the odd numbers from 1 to 20. for number in range(1, 21): if number % 2 != 0: print(number)"},{"question":"Create a function that takes a list of strings and returns a new list with the strings in reverse order. The function should also include error handling to manage potential issues such as null or empty input lists.","solution":"def reverse_strings(strings): Reverses the order of strings in the input list. Parameters: strings (list of str): A list of strings to be reversed. Returns: list of str: A new list with the strings in reverse order. # Check for invalid input if strings is None: raise ValueError(\\"Input list cannot be None\\") if not isinstance(strings, list): raise TypeError(\\"Input should be a list of strings\\") return strings[::-1]"},{"question":"Create a function that takes two arguments in Python. The function should return these arguments in reverse order.","solution":"def reverse_arguments(arg1, arg2): Returns the two arguments in reverse order. return arg2, arg1"},{"question":"Create a function that takes a string as an input and returns the most frequent letter in the string. If there are multiple letters with the same highest frequency, the function should return the one that appears first in the string.","solution":"def most_frequent_letter(s): Returns the most frequent letter in the string. If there are multiple letters with the same highest frequency, returns the one that appears first in the string. frequency = {} max_freq = 0 most_freq_letter = '' for char in s: if char.isalpha(): if char not in frequency: frequency[char] = 0 frequency[char] += 1 if frequency[char] > max_freq or (frequency[char] == max_freq and most_freq_letter == ''): max_freq = frequency[char] most_freq_letter = char return most_freq_letter"},{"question":"Create a function that takes two integers, n and m, and returns a list of lists representing the Cartesian product of the two sets.","solution":"def cartesian_product(n, m): Returns the Cartesian product of two sets {0, 1, ..., n-1} and {0, 1, ..., m-1}. result = [] for i in range(n): for j in range(m): result.append([i, j]) return result"},{"question":"Create a function that takes two vectors of numbers as input and returns a vector that contains the sum of corresponding elements.","solution":"def add_vectors(vec1, vec2): Returns a new vector that contains the sum of corresponding elements from vec1 and vec2. Assumes vec1 and vec2 are of the same length. return [a + b for a, b in zip(vec1, vec2)]"},{"question":"Create a function that provides a Python-based solution to compute the sum of all even numbers between 1 and a given number n (inclusive).","solution":"def sum_of_even_numbers(n): Returns the sum of all even numbers between 1 and n (inclusive). return sum(i for i in range(1, n+1) if i % 2 == 0)"},{"question":"Create a function that takes a list of elements and returns the most frequently occurring element. If there are multiple elements with the same highest frequency, return all of them in the order they first appeared.","solution":"def most_frequent_elements(lst): Returns the most frequently occurring element(s) in a list. If there are multiple elements with the same highest frequency, the elements are returned in the order they first appeared. from collections import Counter if not lst: return [] counts = Counter(lst) max_freq = max(counts.values()) most_frequent = [el for el, freq in counts.items() if freq == max_freq] reordered_most_frequent = [] seen = set() for el in lst: if el in most_frequent and el not in seen: reordered_most_frequent.append(el) seen.add(el) return reordered_most_frequent"},{"question":"Create a function that generates a random number between two values.","solution":"import random def generate_random_number(min_value, max_value): Generates a random number between min_value and max_value. Args: min_value (int): The minimum value that can be generated. max_value (int): The maximum value that can be generated. Returns: int: A random number between min_value and max_value. if min_value > max_value: raise ValueError(\\"min_value should be less than or equal to max_value\\") return random.randint(min_value, max_value)"},{"question":"Create a function that takes an array of integers and an integer index as parameters. The function should check if the given index is valid for the array and return the value at that index if it is valid. If the index is not valid, the function should raise an appropriate exception.","solution":"def get_value_at_index(arr, index): Returns the value at the given index if valid, otherwise raises an IndexError. :param arr: List of integers :param index: Integer index :return: Value at the given index if valid :raises: IndexError if the index is not valid if index < 0 or index >= len(arr): raise IndexError(\\"Index out of range\\") return arr[index]"},{"question":"Create a function that takes a single integer \`x\` and returns the bitwise AND of all numbers from 1 to \`x\`. For instance, if \`x = 5\`, the function should compute \`1 & 2 & 3 & 4 & 5\`. This operation will result in \`0\`. If \`x = 1\`, the function should simply return \`1\`.","solution":"def bitwise_and_to_x(x): Returns the bitwise AND of all numbers from 1 to x. if x == 0: return 0 result = x for num in range(1, x): result &= num if result == 0: break return result"},{"question":"Create a function that takes a list of integers. Your function should move all the zero values to the end of the list. The order of the non-zero elements should not be changed.","solution":"def move_zeros_to_end(lst): Moves all zeros in the list to the end while maintaining the order of non-zero elements. Args: lst: List of integers Returns: A new list with all zeros moved to the end. non_zeros = [x for x in lst if x != 0] zeros = [x for x in lst if x == 0] return non_zeros + zeros"},{"question":"Create a function that takes three parameters: a list of integers, the length of the list, and an integer representing a target number. The function should return a boolean value indicating whether or not the target number exists in the list using the binary search approach. If the list is not sorted, you must sort it first. Then perform the binary search.","solution":"def binary_search(arr, length, target): Returns True if target exists in arr, otherwise returns False. The list arr is first sorted before applying binary search. arr.sort() # Ensure the list is sorted left, right = 0, length - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return True elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return False"},{"question":"Create a function that calculates the sum of all even numbers in a given list of integers. Make sure your function handles different cases, including lists with negative numbers and empty lists.","solution":"def sum_of_even_numbers(nums): Returns the sum of all even numbers in the given list of integers. return sum(num for num in nums if num % 2 == 0)"},{"question":"Create a function that accepts an array of integers and returns the second smallest element in the array. For example, given the array \`[5, 3, 9, 1, 4]\`, the function should return \`3\`. If the array has less than two unique elements, the function should return \`None\`. Here's the method signature: \`def second_smallest(numbers: List[int]) -> Optional[int]:\`","solution":"from typing import List, Optional def second_smallest(numbers: List[int]) -> Optional[int]: Returns the second smallest element in the given array of integers. If the array has less than two unique elements, returns None. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Create a function that takes in two lists and returns a new list that contains the intersection of the two input lists. The elements in the new list should be sorted in ascending order.","solution":"def intersection_sorted(list1, list2): Returns a new sorted list containing the intersection of the two input lists. # Convert lists to sets to find the intersection set1 = set(list1) set2 = set(list2) # Compute the intersection of the two sets intersection = set1.intersection(set2) # Convert the intersection to a list and sort it return sorted(list(intersection))"},{"question":"Create a function that generates a list of all divisors of a given number, excluding the number itself. The function should be written in Python and should be efficient. How can you approach this problem?","solution":"def divisors(n): Returns a list of all divisors of the given number n, excluding n itself. if n <= 1: return [] divs = [] for i in range(1, int(n/2)+1): if n % i == 0: divs.append(i) return divs"},{"question":"Create a function that filters and counts the number of unique words in a given string, ignoring case sensitivity and punctuation.","solution":"import re from collections import Counter def count_unique_words(text): Count the number of unique words in a given string, ignoring case sensitivity and punctuation. Parameters: text (str): Input string to process. Returns: int: Number of unique words. # Remove punctuation using regex and convert to lower case cleaned_text = re.sub(r'[^ws]', '', text.lower()) words = cleaned_text.split() # Use a counter to count occurrences of each word word_counter = Counter(words) # The number of unique words is the size of the counter return len(word_counter)"},{"question":"Create a function that returns the length of a list using recursion.","solution":"def recursive_length(lst): Returns the length of a list using recursion. if not lst: return 0 else: return 1 + recursive_length(lst[1:])"},{"question":"Create a function that takes an integer as input and returns the reverse of the integer. If the reversed integer is out of the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0. Pertaining to the input, 0 is treated as a normal digit. In other words, given an input of 100, you would return 0 because leading zeros are not allowed in the reversed integer.","solution":"def reverse_integer(x): Reverse digits of an integer. If the reversed integer is outside the 32-bit signed integer range [-2^31, 2^31 - 1], return 0. # Determine the sign of the number negative = x < 0 x = abs(x) # Reverse digits reversed_x = int(str(x)[::-1]) # Apply the sign if negative: reversed_x = -reversed_x # 32-bit integer range check if reversed_x < -2**31 or reversed_x > 2**31 - 1: return 0 return reversed_x"},{"question":"Create a function that takes a string and returns a new string containing only the vowels from the original string. How can we implement this in Python?","solution":"def extract_vowels(s): Returns a new string containing only the vowels from the original string. :param s: Original string :return: A string containing only the vowels from the original string vowels = \\"aeiouAEIOU\\" return ''.join(char for char in s if char in vowels)"},{"question":"Create a function that takes an integer as input and prints its factors.","solution":"def print_factors(n): Prints all factors of the given integer n. factors = [] for i in range(1, n + 1): if n % i == 0: factors.append(i) return factors"},{"question":"Create a function that accepts an array of integers as a parameter, removes all non-integer elements (including strings, floats, etc.), and returns a new array containing only the integers from the original array.","solution":"def filter_integers(lst): Filters out non-integer elements from a list. :param lst: List of elements to be filtered. :return: List containing only integer elements. return [x for x in lst if isinstance(x, int)]"},{"question":"Create a function that accepts a string and returns a dictionary with counts of each character in the string. The function should ignore case and consider only letters and digits.","solution":"def count_chars(s): Returns a dictionary with counts of each character in the string, ignoring case and considering only letters and digits. from collections import defaultdict s = s.lower() char_count = defaultdict(int) for char in s: if char.isalnum(): char_count[char] += 1 return dict(char_count)"},{"question":"Create a function that takes a string of text and returns the frequency of each word in the string. The function should handle punctuation and be case-insensitive.","solution":"import re from collections import Counter def word_frequency(text): Returns a dictionary of word frequency in the given text. Treats words in a case-insensitive manner and ignores punctuation. # Remove punctuation using regex and convert text to lower case text = re.sub(r'[^ws]', '', text).lower() # Split the text into words words = text.split() # Count the frequency of each word return dict(Counter(words))"},{"question":"Create a function that identifies the maximum sum of a subarray within a given array. The function should return this maximum sum. For example, given the array \`[-2, 1, -3, 4, -1, 2, 1, -5, 4]\`, the subarray with the largest sum is \`[4, -1, 2, 1]\`, which sums to \`6\`.","solution":"def max_subarray_sum(nums): Identifies the maximum sum of a subarray within a given array. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that performs arithmetic operations.","solution":"def perform_operation(a, b, operator): Perform arithmetic operations on two numbers based on the provided operator. Parameters: a (int/float): The first number. b (int/float): The second number. operator (str): The operator, one of '+', '-', '*', '/'. Returns: int/float: The result of the arithmetic operation. Raises: ValueError: If an invalid operator is provided or if division by zero is attempted. if operator == '+': return a + b elif operator == '-': return a - b elif operator == '*': return a * b elif operator == '/': if b == 0: raise ValueError(\\"Cannot divide by zero\\") return a / b else: raise ValueError(\\"Invalid operator\\")"},{"question":"Create a function that generates a random UUID (Universally Unique Identifier) and returns it as a string.","solution":"import uuid def generate_uuid(): Generates a random UUID and returns it as a string. return str(uuid.uuid4())"},{"question":"Create a function that reads integers from a file and calculates and returns the sum of even numbers in the file.","solution":"def sum_of_even_numbers(file_path): Reads integers from a file and returns the sum of even numbers. file_path: str : path of the file to be read return: int : sum of even numbers try: with open(file_path, 'r') as file: numbers = map(int, file.readlines()) even_sum = sum(num for num in numbers if num % 2 == 0) except Exception as e: print(f\\"An error occurred: {e}\\") return 0 return even_sum"},{"question":"Create a function that takes two numbers as input and returns the sum of the first n natural numbers.","solution":"def sum_natural_numbers(n): Returns the sum of the first n natural numbers. if n < 1: return 0 return (n * (n + 1)) // 2"},{"question":"Create a function that calculates the Euclidean distance between two points in a 3-dimensional space. The function should take three tuples as input, representing the coordinates of the two points respectively. The function should return the Euclidean distance as a float.","solution":"import math def euclidean_distance_3d(point1, point2): Calculates the Euclidean distance between two points in a 3-dimensional space. Parameters: point1 (tuple): Coordinates of the first point (x1, y1, z1). point2 (tuple): Coordinates of the second point (x2, y2, z2). Returns: float: Euclidean distance between the two points. x1, y1, z1 = point1 x2, y2, z2 = point2 distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2) return distance"},{"question":"Create a function that takes a list of integers as input. It should return a dictionary where the keys are the original numbers and the values are their reverse order. The dictionary should only include numbers with an even number of digits. If a number has an odd number of digits, it should not be included in the dictionary.","solution":"def reverse_even_digit_numbers(lst): Takes a list of integers as input and returns a dictionary where the keys are the original numbers and the values are their reverse order for only those numbers with an even number of digits. result = {} for num in lst: str_num = str(num) if len(str_num) % 2 == 0: reversed_num = int(str_num[::-1]) result[num] = reversed_num return result"},{"question":"Create a function that takes an array of integers and returns the sum of all elements in the array that are both even and greater than 10.","solution":"def sum_even_greater_than_10(arr): Returns the sum of all even integers in the array that are greater than 10. return sum(x for x in arr if x > 10 and x % 2 == 0)"},{"question":"Create a function that takes two parameters: an array of non-negative integers (with at least one number) and target sum. The function should return a subarray from the array that adds up to the target sum. If no such subarray exists, then return an empty array.","solution":"def find_subarray_with_sum(arr, target): Returns a subarray from the array that adds up to the target sum. If no such subarray exists, returns an empty array. current_sum = 0 start = 0 subarray = [] for end in range(len(arr)): current_sum += arr[end] subarray.append(arr[end]) while current_sum > target and start <= end: current_sum -= arr[start] subarray.pop(0) start += 1 if current_sum == target: return subarray return []"},{"question":"Create a function that takes a single string as a parameter and returns the string in reverse. However, the function should be designed to handle both ASCII and Unicode characters properly.","solution":"def reverse_string(s): Returns the given string reversed, handling both ASCII and Unicode characters. return s[::-1]"},{"question":"Create a function that takes a list of integers as input, and returns a new list containing the cumulative sum of the input list elements from the beginning to the end. The sum should include the excluded number in the computation. For example, if the input list is [1, 2, 3, 4], the output should be [1, 3, 6, 10].","solution":"def cumulative_sum(lst): Returns a new list containing the cumulative sum of the input list elements. cum_sum = [] total = 0 for num in lst: total += num cum_sum.append(total) return cum_sum"},{"question":"Create a function that takes a string and a character, and then checks if the character is present in the string or not. If it is, return the index of its first occurrence, otherwise, return \`-1\`.","solution":"def find_char(string, char): Checks if the character is present in the string. If it is, returns the index of its first occurrence. Otherwise, returns -1. return string.find(char)"},{"question":"Create a function that generates a unique ID string composed of the username, timestamp, and a sequence number based on the total number of IDs generated.","solution":"import time class UniqueIDGenerator: def __init__(self): self.counter = 0 def generate_unique_id(self, username): Generates a unique ID composed of the username, current timestamp, and a sequence number. Args: username (str): The username for which to generate the unique ID. Returns: str: The unique ID string. timestamp = int(time.time()) self.counter += 1 unique_id = f\\"{username}_{timestamp}_{self.counter}\\" return unique_id # Example usage: # generator = UniqueIDGenerator() # user_id = generator.generate_unique_id(\\"john_doe\\") # print(user_id) # Outputs something like: \\"john_doe_1633072996_1\\""},{"question":"Create a function that prints \\"Hello, World!\\" and returns \\"Hello, World!\\" as a string.","solution":"def hello_world(): Prints and returns 'Hello, World!'. message = \\"Hello, World!\\" print(message) return message"},{"question":"Create a function that takes a list of integers as input and returns the product of all the elements in the list. Additionally, the function should handle any exceptions that may occur if the list is empty or contains non-integer values.","solution":"def product_of_elements(lst): Returns the product of all elements in the list. Handles exceptions for empty list and non-integer values. if not lst: return \\"Empty List\\" product = 1 for elem in lst: if not isinstance(elem, int): return \\"List contains non-integer values\\" product *= elem return product"},{"question":"Create a function that takes a list of integers and reverses the list in place. The input list should affect the original list, and the function should return nothing.","solution":"def reverse_list_in_place(lst): Reverses the list in place. Args: lst: List of integers to be reversed. Returns: None left, right = 0, len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left, right = left + 1, right - 1"},{"question":"Create a function that calculates the factorial of a given number n. The function should handle both positive and negative integers, returning a meaningful error for invalid inputs. For positive integers, the factorial is the product of all positive integers up to n. For negative integers, the factorial is not defined, and for non-integer inputs, the function should return an error indicating that the input must be an integer.","solution":"def factorial(n): Returns the factorial of a given positive integer n. If n is negative or non-integer, raises a ValueError. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Factorial is not defined for negative integers.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes a string as input and returns the number of occurrences of each character in the string.","solution":"def character_count(input_string): Returns a dictionary with the number of occurrences of each character in the input string. Args: input_string (str): The string to count characters in. Returns: dict: A dictionary where keys are characters and values are their count in input_string. count_dict = {} for char in input_string: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Create a function that takes a string as input and returns a sorted list of the string's characters. The characters should be sorted in descending order based on their frequency. If two characters have the same frequency, they should be sorted based on their lexicographical order (from 'a' to 'z').","solution":"from collections import Counter def sort_characters_by_frequency(s): Takes a string and returns a sorted list of the string's characters. Characters are sorted in descending order based on their frequency. If two characters have the same frequency, they are sorted in lexicographical order. Args: s (str): Input string Returns: list: List of characters sorted by frequency and lexicographical order # Count the frequency of each character freq = Counter(s) # Sort characters first by frequency (descending) then lexicographically sorted_characters = sorted(freq.keys(), key=lambda char: (-freq[char], char)) return sorted_characters"},{"question":"Create a function that takes the radius of a circle and returns its area. The function should not print the area but return it. Additionally, the function should handle exceptions if a non-numeric value is passed as the radius.","solution":"import math def circle_area(radius): Returns the area of a circle given its radius. If the radius is non-numeric, raises a ValueError. if not isinstance(radius, (int, float)): raise ValueError(\\"The radius must be a numeric value.\\") if radius < 0: raise ValueError(\\"The radius cannot be negative.\\") return math.pi * (radius ** 2)"},{"question":"Create a function that will calculate the total cost of buying a certain number of items, where each item costs a specific amount. The function will also apply a discount to the total cost if the customer buys more than 10 items. The discount is 10% for every item bought over 10 items.","solution":"def total_cost(item_cost, num_items): Calculate the total cost of buying a specific number of items, with a discount applied for each item over 10. Parameters: item_cost (float): The cost of one item. num_items (int): The number of items being bought. Returns: float: The total cost after applying the discount if applicable. if num_items <= 10: return item_cost * num_items discount_rate = 0.10 items_with_discount = num_items - 10 discount = items_with_discount * item_cost * discount_rate total = (item_cost * num_items) - discount return total"},{"question":"Create a function that calculates and returns the sum of the first 100 prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(n): Checks if the number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_first_100_primes(): Calculates and returns the sum of the first 100 prime numbers. count = 0 prime_sum = 0 number = 2 while count < 100: if is_prime(number): prime_sum += number count += 1 number += 1 return prime_sum"},{"question":"Create a function that takes a list of numbers and converts it into a string representation that follows the format \\"number1-number2-number3...-numberN\\". For example, if the input is \`[1, 2, 3, 4]\`, the output should be \`\\"1-2-3-4\\"\`. How can I achieve this in Python?","solution":"def convert_list_to_string(num_list): Converts a list of numbers into a string representation where numbers are separated by '-'. Args: num_list (list): A list of numbers Returns: str: String representation of the list with numbers separated by '-' return '-'.join(map(str, num_list))"},{"question":"Create a function that generates a random string of a given length, containing uppercase letters, lowercase letters, and digits.","solution":"import random import string def generate_random_string(length): Generates a random string of a given length containing uppercase letters, lowercase letters, and digits. Args: - length (int): The length of the generated string. Returns: - str: A randomly generated string containing uppercase, lowercase, and digits. if length <= 0: return \\"\\" characters = string.ascii_letters + string.digits random_string = ''.join(random.choice(characters) for _ in range(length)) return random_string"},{"question":"Create a function that takes a string as input and returns the reversed version of that string. The function should ignore any non-alphabetic characters and maintain the case sensitivity when reversing the alphabetic characters only.","solution":"def reverse_alphabetic_only(s): Reverses the input string, ignoring any non-alphabetic characters. The case sensitivity of alphabetic characters is maintained. # Extract only the alphabetic characters and reverse them. reversed_alpha_chars = [char for char in s if char.isalpha()][::-1] # Rebuild the string preserving non-alphabetic characters in their original positions. result = [] alpha_idx = 0 for char in s: if char.isalpha(): result.append(reversed_alpha_chars[alpha_idx]) alpha_idx += 1 else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes a string as input and returns the string with all vowels removed. How can you efficiently implement this in Python using list comprehension and string methods?","solution":"def remove_vowels(s): Returns the input string with all vowels removed. vowels = 'aeiouAEIOU' return ''.join([char for char in s if char not in vowels])"},{"question":"Create a function that takes a list of integers as input and returns a new list containing the unique elements from the original list while maintaining their order. The function should preserve the order of elements as they appeared in the input list, but remove any duplicates.","solution":"def unique_elements(lst): Returns a list containing the unique elements from the original list while maintaining their order. Parameters: lst (list of int): The list of integers to process. Returns: list of int: A new list containing the unique elements. seen = set() unique_lst = [] for item in lst: if item not in seen: seen.add(item) unique_lst.append(item) return unique_lst"},{"question":"Create a function that takes two integers, \`a\` and \`b\`, as input and returns their sum. If either of the integers is outside the range of -1000 to 1000, inclusive, the function should return an error message instead. Additionally, the function should verify if the integers are even or odd and return that information along with the sum if they are within the specified range.","solution":"def sum_and_check_even_odd(a, b): Takes two integers, a and b, and returns their sum along with information about whether each integer is even or odd. If either of the integers is outside the range of -1000 to 1000, returns an error message instead. Args: a (int): The first integer. b (int): The second integer. Returns: tuple/str: A tuple containing the sum, and the even/odd status of a and b if they are within the range, else an error message. if not (-1000 <= a <= 1000) or not (-1000 <= b <= 1000): return \\"Error: Inputs should be within the range of -1000 to 1000.\\" sum_ab = a + b a_status = \\"even\\" if a % 2 == 0 else \\"odd\\" b_status = \\"even\\" if b % 2 == 0 else \\"odd\\" return (sum_ab, a_status, b_status)"},{"question":"Create a function that takes a list of numbers and returns the most repeatable number in the list. If there are multiple numbers with the same highest frequency, the function should return a list of those numbers.","solution":"def most_repeatable_number(numbers): Returns the most repeatable number(s) in the list. If there are multiple numbers with the same highest frequency, returns a list of those numbers. from collections import Counter if not numbers: return [] counter = Counter(numbers) max_count = max(counter.values()) most_common_numbers = [num for num, count in counter.items() if count == max_count] return most_common_numbers if len(most_common_numbers) > 1 else most_common_numbers[0]"},{"question":"Create a function that takes an integer as input and returns a list of all the factors of the number. A factor is a divisor that can divide the number evenly, leaving no remainder.","solution":"def factors(n): Returns a list of all factors of the given integer n. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") result = [] for i in range(1, n + 1): if n % i == 0: result.append(i) return result"},{"question":"Create a function that checks if a given string is a palindrome when ignoring case, spaces, and punctuation. A palindrome is a string that reads the same backward as forward if you ignore spaces, punctuation, and case sensitivity.","solution":"import string def is_palindrome(s): Check if a given string is a palindrome ignoring case, spaces, and punctuation. :param s: Input string to check :return: True if the string is a palindrome, False otherwise # Removing spaces and punctuation, and converting to lower case s = ''.join(char.lower() for char in s if char.isalnum()) # Checking if the string is equal to its reverse return s == s[::-1]"},{"question":"Create a function that takes two arguments, a list of integers and a single integer, and returns a new list of integers where each element is the result of multiplying the original integer by the single integer. The function should handle both positive and negative numbers without any errors.","solution":"def multiply_elements(lst, multiplier): Multiply each element in lst by multiplier. Parameters: lst (list of int): The list of integers to be multiplied. multiplier (int): The integer to multiply each list element by. Returns: list of int: The resulting list after multiplication. return [x * multiplier for x in lst]"},{"question":"Create a function that takes a deeply nested dictionary as input and returns the maximum value found among all the nested dictionaries. The function should handle dictionary values of various types, converting non-integer values to zero before comparison.","solution":"def max_value_in_nested_dict(nested_dict): This function takes a deeply nested dictionary as input and returns the maximum value found among all the nested dictionaries. Non-integer values are considered as zero. def get_max_value(d): max_val = float('-inf') for k, v in d.items(): if isinstance(v, dict): max_val = max(max_val, get_max_value(v)) else: try: max_val = max(max_val, int(v)) except (ValueError, TypeError): max_val = max(max_val, 0) return max_val return get_max_value(nested_dict)"},{"question":"Create a function that takes a list of integers and returns the minimum value found in the list. If the list is empty, return \`None\`.","solution":"def find_minimum(lst): Returns the minimum value found in the list. If the list is empty, return None. if not lst: return None return min(lst)"},{"question":"Create a function that takes a dictionary as an input and returns a new dictionary with a key-value pair where 'key' is the input key and 'value' is the frequency of that key in the input dictionary. If the key does not exist, return the key-value pair with 'value' as 0.","solution":"def key_frequency(input_dict, key): Returns a dictionary with the key-value pair where 'key' is the input key and 'value' is the frequency of that key in the input dictionary. frequency = input_dict.get(key, 0) if frequency == 0: return {key: 0} else: return {key: frequency}"},{"question":"Create a function that takes two strings as input and returns a list of common substrings of both strings, considering only substrings of length 4 or more.","solution":"def common_substrings(str1, str2, min_length=4): Takes two strings as input and returns a list of common substrings of both strings, considering only substrings of length min_length or more. :param str1: First input string :param str2: Second input string :param min_length: Minimum length of the substrings to consider (default is 4) :return: List of common substrings with length >= min_length def get_substrings(s, min_length): Generates all unique substrings of a given minimum length from the input string. :param s: Input string :param min_length: Minimum length of the substrings to generate :return: Set of substrings with length >= min_length substrings = set() length = len(s) for i in range(length): for j in range(i + min_length, length + 1): substrings.add(s[i:j]) return substrings substrings1 = get_substrings(str1, min_length) substrings2 = get_substrings(str2, min_length) common = list(substrings1.intersection(substrings2)) return common"},{"question":"Create a function that takes a string as input and returns the length of the string after removing all spaces. For example, if the input string is \\"Hello World\\", the function should return 10.","solution":"def length_without_spaces(s): Returns the length of the string after removing all spaces. Parameters: s (str): Input string from which spaces will be removed. Returns: int: Length of the string without spaces. return len(s.replace(\\" \\", \\"\\"))"},{"question":"Create a function that accepts a user's name and favorite food as input parameters. It should print a greeting message along with the favorite food. For example, if the user inputs \\"Alice\\" and \\"pizza,\\" how should the function output the greeting and food preference?","solution":"def greet_user(name, favorite_food): Returns a greeting message including the user's name and favorite food. return f\\"Hello, {name}! Your favorite food is {favorite_food}.\\""},{"question":"Create a function that takes a number and returns the number of digits in that number.","solution":"def count_digits(number): Returns the number of digits in the given number. # Convert the number to its absolute value and then to a string # to count the digits. return len(str(abs(number)))"},{"question":"Create a function that will take a list of integers and find the ones which are divisible by both 5 and 3, and return a new list containing these numbers. For example, if the input list is [10, 15, 7, 20, 30, 45], the function should return [10, 15, 30, 45].","solution":"def find_divisible_by_5_and_3(numbers): Returns a list of numbers from the input list that are divisible by both 5 and 3. :param numbers: List of integers :return: List of integers divisible by both 5 and 3 return [num for num in numbers if num % 5 == 0 and num % 3 == 0]"},{"question":"Create a function that implements a simple Caesar cipher. The function should take a string and a shift value and return a new string where the characters in the original string have been shifted by the given shift value in the alphabet.","solution":"def caesar_cipher(text, shift): Implements a Caesar cipher. Shifts each letter in 'text' by 'shift' positions. :param text: The original string to be encrypted. :param shift: The number of positions to shift each character. :return: The encrypted string. result = [] for char in text: if char.isalpha(): ascii_offset = 65 if char.isupper() else 97 shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset) result.append(shifted_char) else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes a dictionary and returns a list of keys that have a truthy value.","solution":"def truthy_keys(d): Returns a list of keys that have a truthy value in the given dictionary. Parameters: d (dict): The input dictionary. Returns: list: A list of keys with truthy values. return [key for key, value in d.items() if value]"},{"question":"Create a function that converts a binary tree to a linked list.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def flatten_to_linked_list(root): Converts a binary tree to a singly linked list in-place by traversing the tree and linking the nodes in the order of a pre-order traversal. def preorder_traversal(node): if node: yield node yield from preorder_traversal(node.left) yield from preorder_traversal(node.right) current = dummy = ListNode() for node in preorder_traversal(root): current.next = ListNode(node.val) current = current.next return dummy.next"},{"question":"Create a function that takes a list of positive integers and returns a list of their binary representations as strings. The binary representation should be prefixed with '0b'. For example, given the list [5, 1, 10], the function should return ['0b101', '0b1', '0b1010'].","solution":"def to_binary_list(int_list): Takes a list of positive integers and returns a list of their binary representations as strings, prefixed with '0b'. return [bin(i) for i in int_list]"},{"question":"Create a function that checks if two arrays are equal in terms of both the values and their order.","solution":"def arrays_equal(arr1, arr2): Checks if two arrays are equal in both values and their order. Parameters: arr1 (list): First array to be compared. arr2 (list): Second array to be compared. Returns: bool: True if arrays are equal, False otherwise. if len(arr1) != len(arr2): return False for i in range(len(arr1)): if arr1[i] != arr2[i]: return False return True"},{"question":"Create a function that takes a list of numbers as input. For each number in the list, if it is divisible by 3, print \\"Fizz\\", if it is divisible by 5, print \\"Buzz\\", if it is divisible by both 3 and 5, print \\"FizzBuzz\\". If the number is not divisible by either 3 or 5, just print the number itself.","solution":"def fizz_buzz(nums): This function processes a list of numbers. For each number: - Print \\"Fizz\\" if the number is divisible by 3 and not 5 - Print \\"Buzz\\" if the number is divisible by 5 and not 3 - Print \\"FizzBuzz\\" if the number is divisible by both 3 and 5 - Print the number itself if it is divisible by neither 3 nor 5 result = [] for num in nums: if num % 3 == 0 and num % 5 == 0: result.append(\\"FizzBuzz\\") elif num % 3 == 0: result.append(\\"Fizz\\") elif num % 5 == 0: result.append(\\"Buzz\\") else: result.append(num) return result"},{"question":"Create a function that takes a list of integers and returns the sum of all positive numbers in the list. The list can contain both positive and negative integers. Positive numbers are defined as numbers greater than 0.","solution":"def sum_of_positive_numbers(lst): Returns the sum of all positive integers in the list. Parameters: lst (list of int): A list of integers, which can include both positive and negative numbers. Returns: int: The sum of all positive integers in the list. return sum(num for num in lst if num > 0)"},{"question":"Create a function that takes a dictionary as an input argument that contains names and their corresponding scores. The function should return the highest score in the dictionary.","solution":"def highest_score(scores_dict): Returns the highest score from the given dictionary of scores. Args: scores_dict (dict): A dictionary where the keys are names and the values are scores. Returns: int: The highest score. if not scores_dict: return None return max(scores_dict.values())"},{"question":"Create a function that takes an integer as an input and returns the square root of that integer. If the input is not a perfect square, the function should return the square root of the input rounded to 2 decimal places. If the input is negative, the function should return an error message.","solution":"import math def square_root(num): Returns the square root of the integer num. If the number is not a perfect square, returns the square root rounded to 2 decimal places. If the number is negative, returns an error message. if num < 0: return \\"Error: Input must be a non-negative integer.\\" sqrt_num = math.sqrt(num) if sqrt_num.is_integer(): return int(sqrt_num) else: return round(sqrt_num, 2)"},{"question":"Create a function that limits a string to a certain length, making sure to truncate the string and append an ellipsis (...). The function should handle both upper and lower case letters, spaces, punctuation, and numbers.","solution":"def truncate_string(s, length): Truncates the input string to a specified length and appends an ellipsis (...) if the string is longer than the specified length. If the input string is shorter than or equal to the specified length, the string is returned unchanged. Parameters: s (str): The input string to truncate. length (int): The desired length of the truncated string (excluding ellipsis). Returns: str: The truncated string with an appended ellipsis if truncation occurred. if len(s) <= length: return s else: return s[:length] + '...'"},{"question":"Create a function that takes an array of integers and returns the length of the longest consecutive elements sequence in the array. In the array, integers can appear in any order.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence in the array. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Create a function that can search a given list of integers for a specific integer. The function should compare each integer in the list to the specific integer, and return a list of indices where the specific integer is found. If the specific integer is not found in any positions in the list, the function should return an empty list.","solution":"def search_list(nums, target): Searches the list of integers for a specific integer and returns a list of indices where it is found. If the integer is not found, returns an empty list. Args: nums: List of integers. target: Specific integer to search for. Returns: List of indices where the target integer is found. return [i for i, num in enumerate(nums) if num == target]"},{"question":"Create a function that takes a list of \`Vehicle\` objects and returns a list of reports for each vehicle, formatted as a string. Each report should include the vehicle's make, model, year, and whether or not it is electric. The electric status should be replaced with \\"Green Energy\\" if it is an electric vehicle.","solution":"class Vehicle: def __init__(self, make, model, year, is_electric): self.make = make self.model = model self.year = year self.is_electric = is_electric def generate_vehicle_reports(vehicles): Takes a list of Vehicle objects and returns a list of formatted reports for each vehicle. reports = [] for vehicle in vehicles: status = \\"Green Energy\\" if vehicle.is_electric else \\"Not Electric\\" report = f\\"Make: {vehicle.make}, Model: {vehicle.model}, Year: {vehicle.year}, Status: {status}\\" reports.append(report) return reports"},{"question":"Create a function that takes a 2D list (list of lists) as input, and returns the sum of all the integers in the 2D list.","solution":"def sum_2d_list(lst): Returns the sum of all the integers in the 2D list. Parameters: lst (list of lists of int): The input 2D list Returns: int: Sum of all integers total_sum = 0 for sublist in lst: for num in sublist: total_sum += num return total_sum"},{"question":"Create a function that takes a single integer, x, as input and returns a new string where every other character is replaced by the word \\"removed\\". The function should alternate the replacement starting with the first character (index 0).","solution":"def replace_every_other(x): Takes a single integer, x, as input and returns a new string where every other character is replaced by the word 'removed', starting with the first character (index 0). x_str = str(x) result = [] for i in range(len(x_str)): if i % 2 == 0: result.append('removed') else: result.append(x_str[i]) return ''.join(result)"},{"question":"Create a function that implements a Caesar cipher for a \`String\` input. The Caesar cipher is a type of substitution code that replaces a letter \`x\` in the plaintext with \`x+n\` where \`n\` is the shift amount. If \`n\` is 3, then x would be replaced by \`x+3\`. This might shift \`x\` past the end of the alphabet, and if so, it wraps around to the beginning of the alphabet.","solution":"def caesar_cipher(s, n): Encodes a string \`s\` using a Caesar cipher with a shift amount \`n\`. result = [] for char in s: if char.isalpha(): shift = n % 26 if char.islower(): new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a')) elif char.isupper(): new_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A')) result.append(new_char) else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes an array of strings and returns a new array containing the length of each string in the original array.","solution":"def string_lengths(array): Returns a new array containing the length of each string in the original array. Parameters: array (list of str): A list of strings. Returns: list of int: A list of integers representing the lengths of the corresponding strings. return [len(s) for s in array]"},{"question":"Create a function that takes a list of strings and returns a new list containing the strings that have a length greater than the specified length.","solution":"def filter_strings_by_length(strings, length): Returns a list of strings that have length greater than the specified length. :param strings: List of strings :param length: Length to filter strings :return: Filtered list of strings return [s for s in strings if len(s) > length]"},{"question":"Create a function that takes an integer as an input and returns a list of its divisors. For example, if the input is 12, the function should return [1, 2, 3, 4, 6, 12]. Make sure to include a check function that tests the correctness of your solution with provided data points.","solution":"def get_divisors(n): Returns a list of divisors of the integer n. if n < 1: return [] divisors = [i for i in range(1, n + 1) if n % i == 0] return divisors"},{"question":"Create a function that takes a dictionary and a key as an input, and prints out the value associated with that key. If the key does not exist, print \\"Key not found.\\"","solution":"def print_value(d, key): This function takes a dictionary \`d\` and a key \`key\`. It prints the value associated with that key. If the key does not exist, it prints \\"Key not found.\\" if key in d: print(d[key]) else: print(\\"Key not found.\\")"},{"question":"Create a function that takes two arrays of numbers and checks if there is at least one common element between them. If so, return true; otherwise, return false.","solution":"def has_common_element(arr1, arr2): Returns True if there is at least one common element between arr1 and arr2, otherwise False. return any(element in arr2 for element in arr1)"},{"question":"Create a function that takes a list of integers and returns a new list with the integers sorted in ascending order. If the input list is empty, the function should return an empty list.","solution":"def sort_integers(int_list): Returns a new list with the integers sorted in ascending order. If the input list is empty, returns an empty list. return sorted(int_list)"},{"question":"Create a function that accepts a list of integers, squares each integer, and returns the sum of all the squared integers.","solution":"def sum_of_squares(numbers): Returns the sum of the squares of each integer in the list. Parameters: numbers (list of int): A list of integers. Returns: int: The sum of the squares of the integers in the list. return sum(x ** 2 for x in numbers)"},{"question":"Create a function that takes two integers as input and returns the sum of those integers. If the sum is even, return the sum; otherwise, return the product of the two integers.","solution":"def sum_or_product(a, b): Returns the sum of a and b if the sum is even; otherwise, returns the product of a and b. sum_ab = a + b if sum_ab % 2 == 0: return sum_ab else: return a * b"},{"question":"Create a function that takes an integer as input and returns the sum of its digits divides by 10.","solution":"def sum_of_digits_divided_by_10(n): Returns the sum of the digits of n divided by 10. total_sum = sum(int(digit) for digit in str(abs(n))) return total_sum / 10"},{"question":"Create a function that takes an array of integers and returns a new array containing the sum of all elements in the array.","solution":"def sum_array(arr): Returns the sum of all elements in the input array. Parameters: arr (list of int): The list of integers to be summed. Returns: int: The sum of all elements in the array. return sum(arr)"},{"question":"Create a function that takes a list of integers and returns a new list with the integers sorted in a specific order. The order is defined as follows: first, sort all odd numbers in ascending order, then sort all even numbers in descending order. The function should return the result in a single list where all odd numbers precede all even numbers.","solution":"def custom_sort(lst): Takes a list of integers and returns a new list sorted such that all odd numbers come first in ascending order, followed by all even numbers in descending order. odds = sorted([x for x in lst if x % 2 != 0]) evens = sorted([x for x in lst if x % 2 == 0], reverse=True) return odds + evens"},{"question":"Create a function that takes an integer as an argument and returns that integer multiplied by two.","solution":"def multiply_by_two(n): Returns the given integer multiplied by two. return n * 2"},{"question":"Create a function that takes three integers as input and returns the largest of the three. If there is a tie (i.e., two of the numbers are the same and larger than the third), the function should return \\"Tie\\".","solution":"def find_largest(a, b, c): Returns the largest of the three integers or \\"Tie\\" if there is a tie. if a > b and a > c: return a elif b > a and b > c: return b elif c > a and c > b: return c elif a == b and a > c: return \\"Tie\\" elif a == c and a > b: return \\"Tie\\" elif b == c and b > a: return \\"Tie\\" else: return \\"Tie\\""},{"question":"Create a function that takes a list of integers and returns a list of strings, where each string is the binary representation of the corresponding integer in the input list.","solution":"def int_list_to_binary_list(int_list): Converts a list of integers to a list of binary representations as strings. return [bin(x)[2:] for x in int_list]"},{"question":"Create a function that takes a string as input and returns the string in reverse order. Additionally, remove all non-alphabetic characters from the string and convert the string to uppercase.","solution":"def process_string(s): Takes a string as input and returns the string in reverse order, removes all non-alphabetic characters, and converts the string to uppercase. filtered_chars = [char for char in s if char.isalpha()] filtered_string = ''.join(filtered_chars).upper() return filtered_string[::-1]"},{"question":"Create a function that takes a list of integers and returns an array where each element is the sum of the integers at the same index in two given lists of integers. If the lists are of unequal length, append \`None\` to the result list for the missing elements.","solution":"def sum_of_elements(list1, list2): Takes two lists of integers and returns a list where each element is the sum of the integers at the same index in the given lists. If the lists are of unequal length, \`None\` is appended to the result list for the missing elements. :param list1: List of integers :param list2: List of integers :return: List of summed elements or \`None\` for missing elements max_length = max(len(list1), len(list2)) result = [] for i in range(max_length): if i < len(list1) and i < len(list2): result.append(list1[i] + list2[i]) else: result.append(None) return result"},{"question":"Create a function that takes a list of integers and returns a string representation of the binary equivalent of each integer in the list. Each binary representation should be wrapped in a pair of angle brackets ('<>'). The function should handle both positive and negative integers, converting negative integers to their two's complement binary representation.","solution":"def int_to_binary_string(lst): Takes a list of integers and returns a string representation of the binary equivalent of each integer in the list. Each binary representation should be wrapped in a pair of angle brackets ('<>'). Parameters: lst (list): List of integers. Returns: str: String representation of binary equivalents wrapped in angle brackets. def to_two_complement_binary(n): Converts integer to its two's complement binary string. if n >= 0: return format(n, '08b') else: return format((1 << 8) + n, '08b') return ' '.join(f'<{to_two_complement_binary(n)}>' for n in lst)"},{"question":"Create a function that accepts two parameters, an integer array and a target integer. The function should return a list of indices where the target integer is found in the array. If the target is not found, return an empty list.","solution":"def find_target_indices(arr, target): Returns a list of indices where the target integer is found in the array. Parameters: arr (list of ints): The array to search. target (int): The integer to find in the array. Returns: list of ints: Indices where the target integer is found, or an empty list if not found. return [index for index, value in enumerate(arr) if value == target]"},{"question":"Create a function that takes two string parameters, a pattern and a text. The pattern consists of characters 'C', 'T', 'A', and 'G' and the text is a DNA sequence. The function should return the count of how many times the pattern appears in the text. The pattern may overlap with itself in the text.","solution":"def count_pattern_in_dna(pattern, text): Returns the count of how many times the pattern appears in the text. The pattern may overlap with itself in the text. Parameters: - pattern (str): The pattern that consists of characters 'C', 'T', 'A', and 'G'. - text (str): The DNA sequence. Returns: - int: The count of occurrences of the pattern in the text. count = 0 pattern_length = len(pattern) for i in range(len(text) - pattern_length + 1): if text[i:i + pattern_length] == pattern: count += 1 return count"},{"question":"Create a function that adds up a collection of numbers, and if the sum exceeds 100, return 'Overflow occurred'. Otherwise, return the sum.","solution":"def sum_numbers(nums): Sum a collection of numbers. If sum exceeds 100, return 'Overflow occurred'. Otherwise, return the sum. Parameters: nums (list): A list of numbers to be summed. Returns: int/str: The sum of the numbers or 'Overflow occurred' if the sum exceeds 100. total = sum(nums) if total > 100: return 'Overflow occurred' return total"},{"question":"Create a function that multiplies two matrices.","solution":"def multiply_matrices(A, B): Multiplies two matrices A and B. :param A: list of lists, where each list represents a row in matrix A :param B: list of lists, where each list represents a row in matrix B :return: result matrix which is the product of matrices A and B # Validation if not A or not B or not A[0] or not B[0]: return [] # Number of columns of A must equal number of rows of B rows_A, cols_A = len(A), len(A[0]) rows_B, cols_B = len(B), len(B[0]) if cols_A != rows_B: raise ValueError(\\"Number of columns in A must be equal to number of rows in B.\\") # Initializing the resulting matrix with zeros result = [[0] * cols_B for _ in range(rows_A)] # Matrix multiplication logic for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Create a function that takes two lists as input and returns a list that is the union of both input lists. The union of two lists is a list containing all unique elements from both lists.","solution":"def union(lst1, lst2): Returns the union of two lists as a list containing all unique elements from both. return list(set(lst1) | set(lst2))"},{"question":"Create a function that takes a 2D list or array of integers, and returns the maximum and minimum values found in the array.","solution":"def find_max_min(matrix): Returns the maximum and minimum values found in a 2D list or array of integers. :param matrix: 2D list of integers :return: Tuple containing maximum and minimum values (max_val, min_val) if not matrix or not matrix[0]: raise ValueError(\\"The input matrix must be a non-empty 2D list\\") max_val = float('-inf') min_val = float('inf') for row in matrix: for val in row: if val > max_val: max_val = val if val < min_val: min_val = val return max_val, min_val"},{"question":"Create a function that takes a list of integers and returns a new list containing the square of each integer in the original list, but only for those integers that are positive.","solution":"def positive_squares(int_list): Returns a new list containing the square of each positive integer in the original list. return [x ** 2 for x in int_list if x > 0]"},{"question":"Create a function that can generate a list of prime numbers up to a given number n. Provide the solution in Python.","solution":"def generate_primes(n): Generate a list of prime numbers up to a given number n (inclusive). Parameters: n (int): The upper limit for generating prime numbers. Returns: list: A list of prime numbers up to n (inclusive). if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that finds the number of occurrences of a given character in a string. The function should return the count of the occurrences.","solution":"def count_occurrences(char, string): Returns the number of occurrences of \`char\` in \`string\`. return string.count(char)"},{"question":"Create a function that calculates and returns the average of a given list of numbers. The function should take a list of numbers as an argument and return the average of those numbers.","solution":"def calculate_average(numbers): Returns the average of a list of numbers. Parameters: numbers (list): A list of numerical values. Returns: float: The average of the numbers in the list. if not numbers: return 0.0 return sum(numbers) / len(numbers)"},{"question":"Create a function that takes an array of integers and returns a new array with all the even numbers doubled, and all the odd numbers subtracted by 1. The function should also return the count of positive numbers in the original array.","solution":"def process_array(arr): Transforms the array by doubling even numbers and subtracting 1 from odd numbers. Also returns the count of positive numbers in the original array. Parameters: arr (list of int): The input array of integers. Returns: transformed_array (list of int): The transformed array. positive_count (int): The count of positive numbers in the original array. transformed_array = [] positive_count = 0 for num in arr: if num > 0: positive_count += 1 if num % 2 == 0: transformed_array.append(num * 2) else: transformed_array.append(num - 1) return transformed_array, positive_count"},{"question":"Create a function that takes a sorted array of integers as input and returns the length of the longest strictly increasing subsequence. A strictly increasing subsequence is a sequence where each element is greater than the previous element.","solution":"def length_of_LIS(nums): Returns the length of the longest strictly increasing subsequence in a sorted list of integers. if not nums: return 0 # dp array, initially filled with 1 as a single element is an increasing subsequence of length 1. dp = [1] * len(nums) for i in range(len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) # the length of the longest increasing subsequence return max(dp)"},{"question":"Create a function that calculates the sum of the squares of the first n natural numbers. The function should be efficient and use a mathematical formula to achieve this without the need for loops.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. The formula used is n(n + 1)(2n + 1) / 6. return n * (n + 1) * (2 * n + 1) // 6"},{"question":"Create a function that takes a string as input and returns the number of words in the string. A word is defined as a sequence of characters that are not separated by whitespace. Words are assumed to be separated by one or more spaces. Additionally, the function should ignore leading and trailing whitespace and treat sequences of whitespace as a single delimiter.","solution":"def count_words(s): Returns the number of words in the input string. A word is defined as a sequence of characters that are not separated by whitespace. # Split the string by spaces and filter out empty strings words = s.strip().split() # Return the length of the list of words return len(words)"},{"question":"Create a function that finds the distance between two points on a Cartesian plane. The function should take four parameters: the x and y coordinates of the first point and the x and y coordinates of the second point. The function should return the Euclidean distance between these points.","solution":"import math def find_distance(x1, y1, x2, y2): Returns the Euclidean distance between two points (x1, y1) and (x2, y2) on a Cartesian plane. return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)"},{"question":"Create a function that checks if a given number is a perfect square. A perfect square is an integer that is the square of an integer. Provide a detailed explanation and a solution in Python.","solution":"import math def is_perfect_square(n): Checks if the given number n is a perfect square. A perfect square is an integer that is the square of an integer. Parameters: n (int): The number to check. Returns: bool: True if n is a perfect square, False otherwise. if n < 0: return False sqrt_n = int(math.sqrt(n)) return sqrt_n * sqrt_n == n"},{"question":"Create a function that takes a list of integers as input and returns a new list where all the integers are sorted in ascending order. If the input list is empty or contains only one element, return the list as is.","solution":"def sort_integers(input_list): Returns a new list where all the integers are sorted in ascending order. If the input list is empty or contains only one element, return the list as is. if len(input_list) <= 1: return input_list else: return sorted(input_list)"},{"question":"Create a function that takes two numbers as input and returns their sum. Additionally, the function should also return the difference, product, and quotient if the second number is not zero.","solution":"def calculate(a, b): Returns the sum, difference, product, and quotient of a and b. If the second number is zero, it returns 'None' for the quotient. result = { \\"sum\\": a + b, \\"difference\\": a - b, \\"product\\": a * b, \\"quotient\\": a / b if b != 0 else None } return result"},{"question":"Create a function that converts a given binary string to its decimal equivalent in Python. The function should handle both 8-bit and 16-bit binary strings. The function should also handle errors for invalid binary strings.","solution":"def binary_to_decimal(binary_str): Converts a given binary string to its decimal equivalent. It handles both 8-bit and 16-bit binary strings. It also handles errors for invalid binary strings. # Check if binary_str is valid (contains only '0' or '1') if not set(binary_str).issubset({'0', '1'}): raise ValueError(\\"Invalid binary string. Only '0' and '1' are allowed.\\") # Check for 8-bit or 16-bit length if len(binary_str) not in [8, 16]: raise ValueError(\\"Invalid binary string length. Only 8-bit and 16-bit lengths are allowed.\\") return int(binary_str, 2)"},{"question":"Create a function that takes two strings as input and returns a list of characters that are common in both strings, in the order they appear in the first string. Ensure that each character appears only once in the resulting list.","solution":"def common_characters(first_string, second_string): Returns a list of characters that are common in both strings, in the order they appear in the first string. Each character appears only once in the list. # Set to track characters already added to result seen = set() result = [] # Iterate over characters in the first string for char in first_string: # Check if character is in the second string and not already in result if char in second_string and char not in seen: result.append(char) seen.add(char) return result"},{"question":"Create a function that reads a file, parses JSON data from it, and then outputs the parsed data. Use Python as the programming language. Remember to handle exceptions that may occur during file operations or JSON parsing. To ensure that the function could be reused for files with different JSON structures, utilize Python's dictionary and list data types to organize the parsed data and extract specific information as needed.","solution":"import json def read_and_parse_json(file_path): Reads a file, parses JSON data from it, and returns the parsed data. Parameters: - file_path: str, path to the JSON file. Returns: - parsed_data: dict, the parsed JSON data. try: with open(file_path, 'r') as file: data = file.read() parsed_data = json.loads(data) return parsed_data except FileNotFoundError: raise FileNotFoundError(\\"The specified file was not found.\\") except json.JSONDecodeError: raise ValueError(\\"The file does not contain valid JSON.\\") except Exception as e: raise Exception(f\\"An error occurred: {e}\\")"},{"question":"Create a function that returns a list of the first n Fibonacci numbers. The function should be efficient and consider the space complexity.","solution":"def fibonacci(n): Returns a list of the first n Fibonacci numbers. if n <= 0: return [] if n == 1: return [0] fib_list = [0, 1] for i in range(2, n): fib_list.append(fib_list[-1] + fib_list[-2]) return fib_list"},{"question":"Create a function that checks if the input string is a valid polynomial expression with integer coefficients. The function should return \`True\` if the expression is categorized as a univariate quadratic polynomial and \`False\` otherwise. A univariate quadratic polynomial is one that includes terms with x^2, x, and constant terms.","solution":"import re def is_valid_quadratic_polynomial(poly_str): Checks if the input string is a valid univariate quadratic polynomial with integer coefficients. Args: poly_str (str): The polynomial expression to check. Returns: bool: True if the expression is a valid univariate quadratic polynomial, False otherwise. # Remove whitespace for easier processing poly_str = poly_str.replace(' ', '') # Regular expression to match a univariate quadratic polynomial pattern = re.compile(r'^-?d*x^2([+-]d*x)?([+-]d+)?') return bool(pattern.fullmatch(poly_str))"},{"question":"Create a function that takes two lists as parameters and returns the list that has the maximum length. If both lists have the same length, return the first list. Here is the function signature: \`def max_length_list(list1, list2)\`. This function should be able to handle any type of list, but for simplicity, assume the lists contain elements of the same type. The function should return the list itself, not its length.","solution":"def max_length_list(list1, list2): Returns the list with the maximum length. If both lists have the same length, returns the first list. if len(list1) >= len(list2): return list1 else: return list2"},{"question":"Create a function that takes a number as an input and returns the sum of the factorial of all numbers from 1 to that given number (inclusive).","solution":"import math def sum_of_factorials(n): Returns the sum of the factorial of all numbers from 1 to n (inclusive). :param n: The upper limit number :type n: int :return: The sum of the factorials of all numbers from 1 to n :rtype: int return sum(math.factorial(i) for i in range(1, n+1))"},{"question":"Create a function that takes a string as an argument and returns a new string with the first and last characters removed from that string. However, if the length of the string is less than or equal to 2 characters, the function should simply return an empty string.","solution":"def remove_first_and_last(s): Remove the first and last characters from the input string. If the length of the string is less than or equal to 2, return an empty string. if len(s) <= 2: return \\"\\" return s[1:-1]"},{"question":"Create a function that takes a string and checks if it's a palindrome. A palindrome reads the same backward as forward, excluding spaces and special characters. For example, \\"A man, a plan, a canal: Panama\\" is a palindrome.","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome, ignoring spaces and special characters. # Remove non-alphanumeric characters and convert to lower case cleaned_s = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that returns the last element of an array.","solution":"def last_element(arr): Returns the last element of an array. Parameters: arr (list): A list from which the last element is to be returned Returns: any: The last element of the list or None if the list is empty if arr: return arr[-1] else: return None"},{"question":"Create a function that calculates the sum of the cubes of numbers in a given list.","solution":"def sum_of_cubes(numbers): Returns the sum of the cubes of the numbers in the given list. return sum(x**3 for x in numbers)"},{"question":"Create a function that takes in a variable number of arguments and returns the sum of all the arguments. The function should be able to handle arguments of any data type, but only numerical types (int, float, and complex) should be considered in the sum.","solution":"def sum_numeric_args(*args): Returns the sum of all numerical arguments (int, float, and complex). Non-numerical arguments are ignored. total = 0 for arg in args: if isinstance(arg, (int, float, complex)): total += arg return total"},{"question":"Create a function that generates a string of 255 repeating characters 'X' in Python and then calculates the sum of their ASCII values.","solution":"def generate_string_and_sum_ascii(): Generates a string of 255 repeating characters 'X' and calculates the sum of their ASCII values. generated_string = 'X' * 255 ascii_sum = sum(ord(char) for char in generated_string) return ascii_sum"},{"question":"Create a function that generates a random number between 1 and 100 and prints it.","solution":"import random def generate_random_number(): Generates a random number between 1 and 100 and prints it. number = random.randint(1, 100) print(number) return number"},{"question":"Create a function that takes two numbers as parameters and returns their sum. Implement this in Python and write a test function to check if the implementation is correct.","solution":"def sum_two_numbers(a, b): Returns the sum of two numbers a and b. return a + b"},{"question":"Create a function that takes a list of integers and returns a new list with the elements in reverse order. If the input list is empty, return an empty list.","solution":"def reverse_list(input_list): Returns a new list with elements in reverse order of the input list. If the input list is empty, returns an empty list. Parameters: input_list (list): The list of integers to be reversed. Returns: list: A new list with the elements in reverse order. return input_list[::-1]"},{"question":"Create a function that will display each character of a given string separated by a space. For example, if the input string is \\"Python\\", the output should be \\"P y t h o n\\".","solution":"def display_characters_separated_by_space(input_string): Returns a string with each character of the input string separated by a space. return ' '.join(input_string)"},{"question":"Create a function that checks if a given string is a palindrome, meaning the string reads the same backward as forward. Your function should ignore cases and non-alphanumeric characters while considering only alphabets and numbers.","solution":"import re def is_palindrome(s): Checks if a given string is a palindrome. Args: s (str): The input string to check. Returns: bool: True if the input string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lower case cleaned_s = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that takes an integer minute value and returns the corresponding hour in a 12-hour format. The function should handle cases where the minute value is out of the standard range of 0 to 59.","solution":"def minutes_to_12_hour_format(minutes): Convert a given integer minute value into the corresponding hour in a 12-hour format. Parameters: minutes (int): The minute value to convert. Returns: int: The hour in a 12-hour format. if minutes < 0: raise ValueError(\\"Minutes cannot be negative\\") hours = (minutes // 60) % 12 return 12 if hours == 0 else hours"},{"question":"Create a function that takes an integer N as input and outputs a tuple of the first N Fibonacci numbers. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci_sequence(n): Returns a tuple of the first n Fibonacci numbers. if n <= 0: return () fibonacci_numbers = [0, 1] for i in range(2, n): next_number = fibonacci_numbers[-1] + fibonacci_numbers[-2] fibonacci_numbers.append(next_number) return tuple(fibonacci_numbers[:n])"},{"question":"Create a function that can determine the minimum and maximum values from a given list of numbers. The function should return these values as a tuple with the minimum value first and the maximum value second. If the list is empty, the function should return None.","solution":"def min_max(nums): Returns a tuple containing the minimum and maximum values from the list nums. If the list is empty, returns None. :param nums: List of numbers :return: Tuple (min, max) or None if the list is empty if not nums: return None return (min(nums), max(nums))"},{"question":"Create a function that calculates the maximum sum of a subarray within a one-dimensional array of integers. This function should consider all subarrays of the array.","solution":"def max_subarray_sum(arr): Calculate the maximum sum of a subarray within a one-dimensional array of integers. :param arr: List of integers :return: Maximum sum of a subarray if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that reverses the order of an array of any length. Can you provide an example implementation in Python?","solution":"def reverse_array(arr): Reverses the order of the array and returns it. :param arr: List of elements to be reversed :return: List with elements in the reversed order return arr[::-1]"},{"question":"Create a function that calculates the cumulative sum of elements in an array, but only if the elements are divisible by 3. If an element is not divisible by 3, its value is ignored in the summation. The function should take an array of integers as input and return the sum of the elements that are divisible by 3.","solution":"def sum_of_elements_divisible_by_3(array): Returns the sum of elements in the array that are divisible by 3. Parameters: array (list): List of integers to be checked. Returns: int: Sum of elements that are divisible by 3. return sum([x for x in array if x % 3 == 0])"},{"question":"Create a function that generates and returns a two-dimensional list filled with the results of a mathematical operation, such as a sum or product, between x and y. The function should also take three parameters: a, b, and c. Parameters a and b specify the dimensions of the two-dimensional list, and parameter c defines the mathematical operation (1 for sum, 2 for product).","solution":"def generate_2d_list(a, b, c): Generates a 2D list where each element is the result of a mathematical operation between x and y. Parameters: - a (int): Number of rows in the 2D list. - b (int): Number of columns in the 2D list. - c (int): The mathematical operation (1 for sum, 2 for product). Returns: - list of list: A 2D list filled with the results of the specified operation. result = [] for i in range(a): row = [] for j in range(b): if c == 1: row.append(i + j) elif c == 2: row.append(i * j) else: raise ValueError(\\"Invalid operation. Use 1 for sum or 2 for product.\\") result.append(row) return result"},{"question":"Create a function that takes a Python list of integers and returns the list with all duplicates removed, preserving the order of the elements that appear first in the original list. For example, if the input list is \`[1, 2, 3, 2, 1]\`, the function should return \`[1, 2, 3]\`.","solution":"def remove_duplicates(lst): Returns a list with duplicates removed, preserving order of first occurrence. seen = set() result = [] for elem in lst: if elem not in seen: seen.add(elem) result.append(elem) return result"},{"question":"Create a function that takes a string as input and returns the string with the first and last character removed. If the string has less than or equal to 1 character, return an empty string.","solution":"def remove_first_last_char(s): Returns the string with the first and last character removed. If the string has 1 or fewer characters, returns an empty string. if len(s) <= 1: return \\"\\" return s[1:-1]"},{"question":"Create a function that takes in a string and returns the length of the string minus the number of vowels in the string. For example, if the input string is \\"Hello\\", the function should return 4, since there are 2 vowels (e, o).","solution":"def length_minus_vowels(input_string): Returns the length of the input string minus the number of vowels in the string. vowels = 'aeiouAEIOU' return len(input_string) - sum(1 for char in input_string if char in vowels)"},{"question":"Create a function that takes in a 2D array or matrix of integers and returns the determinant of the matrix. If the matrix is not square, the function should return an appropriate error message.","solution":"def determinant(matrix): Returns the determinant of a given square matrix. If the matrix is not square, returns an error message. def minor(matrix, i, j): return [row[:j] + row[j+1:] for row in (matrix[:i] + matrix[i+1:])] if len(matrix) != len(matrix[0]): return \\"Error: Matrix is not square.\\" if len(matrix) == 1: return matrix[0][0] if len(matrix) == 2: return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0] determinant_value = 0 for c in range(len(matrix)): determinant_value += ((-1) ** c) * matrix[0][c] * determinant(minor(matrix, 0, c)) return determinant_value"},{"question":"Create a function that generates a string of a specified length filled with a specific character. The function should take two arguments: the number of repetitions and the character to fill the string. If the character is not provided, the default character should be a space. If the number of repetitions is not provided, the default value should be 10. The function should return the generated string.","solution":"def generate_string(length=10, char=' '): Generates a string of a specified length filled with a specific character. Parameters: length (int): The length of the string to be generated. Default is 10. char (str): The character to fill the string with. Default is space (' '). Returns: str: The generated string. if not isinstance(length, int) or length < 0: raise ValueError(\\"Length must be a non-negative integer.\\") if not isinstance(char, str) or len(char) != 1: raise ValueError(\\"Character must be a single character string.\\") return char * length"},{"question":"Create a function that initiates an asynchronous process to download large files using Python's \`aiohttp\` library. The function should take two parameters: \`url\` (the URL of the file to download) and \`save_path\` (the local path where the file should be saved). The function should return a tuple containing the HTTP status code and the file size in bytes.","solution":"import aiohttp import asyncio import os async def download_file(url, save_path): Downloads a file asynchronously from the given URL and saves it to the specified path. Returns a tuple containing the HTTP status code and the file size in bytes. :param url: str, URL of the file to download :param save_path: str, Path to save the downloaded file :return: tuple, (HTTP status code, file size in bytes) async with aiohttp.ClientSession() as session: async with session.get(url) as response: status_code = response.status with open(save_path, 'wb') as f: while True: chunk = await response.content.read(1024) if not chunk: break f.write(chunk) file_size = os.path.getsize(save_path) return (status_code, file_size) # To call this function, you would typically wrap it within an asyncio event loop # Example usage: # asyncio.run(download_file('http://example.com/largefile.zip', '/path/to/save/largefile.zip'))"},{"question":"Create a function that takes a 2D array representing a grid of numbers and returns the sum of all numbers in the grid. Additionally, the function should be able to handle negative numbers and floating point numbers.","solution":"def sum_grid(grid): Returns the sum of all numbers in the grid. :param grid: 2D list of numbers (int and/or float) :return: sum of all numbers in the grid (float) total = 0 for row in grid: for num in row: total += num return total"},{"question":"Create a function that will convert a given decimal number into its binary representation as a string. The function should handle both positive and negative integers. For positive numbers, the binary string should be prefixed with '0b' to indicate that it is a binary number. For negative numbers, the binary string should be prefixed with '-0b'. The function should also manage zero as a special case, returning '0b0' for positive zero and '-0b0' for negative zero.","solution":"def decimal_to_binary(num): Converts a given decimal number into its binary representation as a string. Handles both positive and negative integers, as well as zero. if num > 0: return '0b' + bin(num)[2:] elif num < 0: return '-0b' + bin(num)[3:] else: return '0b0'"},{"question":"Create a function that generates a list of prime numbers between two given numbers. The function should take two parameters, \`lower_limit\` and \`upper_limit\`, and return a list of all prime numbers within this range, inclusive.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_numbers(lower_limit, upper_limit): Returns a list of prime numbers between lower_limit and upper_limit, inclusive. return [num for num in range(lower_limit, upper_limit + 1) if is_prime(num)]"},{"question":"Create a function that converts a string into title case. Title case means that every first letter of a word is capitalized, and other letters are in lowercase. Words are considered to be separated by spaces.","solution":"def title_case(s): Converts a string into title case, where every first letter of a word is capitalized, and other letters are in lowercase. return ' '.join(word.capitalize() for word in s.split())"},{"question":"Create a function that prints the numbers from 1 to n. For every multiple of 3, print \\"Three\\" instead of the number. For every multiple of 5, print \\"Five\\" instead of the number. For every multiple of both 3 and 5, print \\"ThreeFive\\" instead of the number.","solution":"def print_numbers(n): Prints the numbers from 1 to n. For multiples of 3, prints \\"Three\\", for multiples of 5, prints \\"Five\\". For multiples of both, prints \\"ThreeFive\\". for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: print(\\"ThreeFive\\") elif i % 3 == 0: print(\\"Three\\") elif i % 5 == 0: print(\\"Five\\") else: print(i)"},{"question":"Create a function that finds the unique elements in a list and returns them in a sorted list. The function should also ignore case sensitivity when comparing elements. For example, \\"Hello\\" should be considered the same as \\"hello\\".","solution":"def find_unique_sorted(elements): Returns a sorted list of unique elements (case insensitive) from the input list. # Normalize case by converting all items to lowercase normalized_elements = [element.lower() for element in elements] # Use a set to remove duplicates, then convert back to a list unique_elements = list(set(normalized_elements)) # Sort the unique elements unique_elements.sort() return unique_elements"},{"question":"Create a function that takes a string and returns a string with all duplicate characters removed, preserving the order of appearance.","solution":"def remove_duplicates(input_string): Returns a string with all duplicate characters removed, preserving the order of appearance. Parameters: input_string (str): The input string from which duplicates are to be removed. Returns: str: A string with duplicates removed. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that determines whether a number is a perfect cube and returns the cube root if it is, and an error message if it is not. The function should be named \`cube_root_or_error\` and take a single integer argument. The function should return a tuple where the first element is a boolean indicating whether the number is a perfect cube, and the second element is either the cube root of the number or an error message as a string.","solution":"def cube_root_or_error(n): Determines whether a number is a perfect cube. Returns (True, cube root) if n is a perfect cube, otherwise (False, \\"Not a perfect cube\\"). if n < 0: n = abs(n) is_negative = True else: is_negative = False guess = int(round(n ** (1/3.0))) if guess ** 3 == n: return (True, -guess if is_negative else guess) else: return (False, \\"Not a perfect cube\\")"},{"question":"Create a function that takes a list of integers as input and returns a new list containing only the elements that appear more than once in the input list. The function should ensure that the order of the elements in the output list is the same as their first occurrence in the input list.","solution":"def find_duplicates(input_list): Takes a list of integers and returns a new list containing only the elements that appear more than once, preserving the order of their first occurrence. seen = set() duplicates = set() result = [] for num in input_list: if num in seen: duplicates.add(num) else: seen.add(num) for num in input_list: if num in duplicates and num not in result: result.append(num) return result"},{"question":"Create a function that takes a two-dimensional array (matrix) of integers as input and returns a new one-dimensional array containing the sum of each row in the input matrix.","solution":"def sum_of_rows(matrix): Given a two-dimensional array (matrix) of integers, returns a one-dimensional array containing the sum of each row. return [sum(row) for row in matrix]"},{"question":"Create a function that returns the number of occurrences of a given element \`x\` in a sorted array \`arr\`. If the element \`x\` is not found in the array, the function should return -1.","solution":"def count_occurrences(arr, x): Returns the number of occurrences of element x in a sorted array arr. If the element x is not found in the array, returns -1. count = arr.count(x) return count if count > 0 else -1"},{"question":"Create a function that returns a string representation of the given integer. If the integer is negative, the function should return a string with the absolute value of the integer, suffixed with \\" negative\\". If the integer is positive, it should simply return the string representation of the integer. If the integer is zero, return \\"Zero\\".","solution":"def int_to_string_representation(n): Returns a string representation of the given integer as specified: - If the integer is negative, return its absolute value followed by \\" negative\\". - If the integer is positive, return its string representation. - If the integer is zero, return \\"Zero\\". if n < 0: return f\\"{abs(n)} negative\\" elif n > 0: return str(n) else: return \\"Zero\\""},{"question":"Create a function that takes an array of integers and returns the sum of the squares of the elements. If the array is empty, return 0. Additionally, test your function with an array of [1, 2, 3].","solution":"def sum_of_squares(arr): Returns the sum of the squares of the elements in the array. If the array is empty, returns 0. return sum(x**2 for x in arr)"},{"question":"Create a function that takes an array of integers as input. The function should return the longest continuous sequence of numbers within the array that forms a continuous increasing sequence (i.e., the difference between consecutive numbers is exactly 1). If there are multiple sequences with the same maximum length, return the one that starts with the smallest number.","solution":"def longest_increasing_sequence(arr): Returns the longest continuous sequence of numbers within the array that forms a continuous increasing sequence. If there are multiple sequences with the same maximum length, returns the one that starts with the smallest number. if not arr: return [] max_length = 1 current_length = 1 start_index = 0 result = arr[0:1] for i in range(1, len(arr)): if arr[i] == arr[i - 1] + 1: current_length += 1 if current_length > max_length: max_length = current_length start_index = i - current_length + 1 result = arr[start_index:i+1] elif current_length == max_length: new_candidate = arr[i - current_length + 1:i + 1] if new_candidate[0] < result[0]: result = new_candidate else: current_length = 1 return result"},{"question":"Create a function that takes in a string as an argument and returns the string in reverse order. However, the function should ignore any non-alphabetic characters and only reverse the sequence of alphabetic characters, leaving the non-alphabetic characters in their original position. For example, given the input \\"a1b2c3!\\", the function should return \\"!3c2b1a\\".","solution":"def reverse_alpha_only(s): Reverse the sequence of alphabetic characters in the string, ignoring non-alphabetic characters. Parameters: s (str): Input string. Returns: str: The input string with alphabetic characters reversed. # Extract alphabetic characters alpha_chars = [char for char in s if char.isalpha()] # Reverse the alphabetic characters alpha_chars.reverse() # Create a list to store the result result = [] # Iterate through the original string for char in s: if char.isalpha(): # Replace alphabetic characters with reversed ones result.append(alpha_chars.pop(0)) else: # Non-alphabetic characters remain unchanged result.append(char) return ''.join(result)"},{"question":"Create a function that takes two inputs: a string and an integer. The function should return the string with the integer repeated a specified number of times. If the integer is 0, the function should return an empty string.","solution":"def repeat_string(s: str, n: int) -> str: Returns the string \`s\` repeated \`n\` times. If \`n\` is 0, returns an empty string. :param s: The input string to be repeated. :param n: The number of times to repeat the string. :return: A string that has been repeated \`n\` times. if n <= 0: return \\"\\" return s * n"},{"question":"Create a function that takes in a string and prints the first character of each word.","solution":"def first_characters(sentence): Returns a string consisting of the first character of each word in the input sentence. words = sentence.split() first_chars = [word[0] for word in words] return \\"\\".join(first_chars)"},{"question":"Create a function that takes a single string \\"input_str\\" and returns a string where every character is repeated twice next to each other in the order they appear in \\"input_str\\". For example, if the input is \\"hello\\", the output should be \\"hheelllloo\\".","solution":"def double_characters(input_str): Returns a string where every character in input_str is repeated twice. return ''.join([char * 2 for char in input_str])"},{"question":"Create a function that will search for a specific substring within a given string. The function should return the starting index of the first occurrence of the substring or -1 if the substring is not found.","solution":"def find_substring(haystack, needle): Returns the starting index of the first occurrence of the substring (needle) in the string (haystack) or -1 if the substring is not found. return haystack.find(needle)"},{"question":"Create a function that calculates the factorial of a given number using recursion. The function should handle large numbers efficiently. For large numbers, the result can be a very large number, so ensure the function can handle it without causing overflow or performance issues.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that takes two single-digit numbers as input and returns the sum of their squares. For instance, if the input numbers are 3 and 4, the function should return 3^2 + 4^2 = 9 + 16 = 25.","solution":"def sum_of_squares(a, b): Returns the sum of the squares of two single-digit numbers a and b return a**2 + b**2"},{"question":"Create a function that takes a list of dictionaries and calculates the sum of all the values in all the dictionaries. Assume that all the dictionaries only contain numerical values.","solution":"def sum_of_values(dicts): Returns the sum of all values in a list of dictionaries. Parameters: dicts (list): A list of dictionaries with numerical values. Returns: int/float: The sum of all values in the dictionaries. total_sum = 0 for dictionary in dicts: total_sum += sum(dictionary.values()) return total_sum"},{"question":"Create a function that takes a string and returns the longest palindrome prefix. A palindrome is a sequence that reads the same backward as forward. A prefix of a string is a substring that starts at the beginning of the string and ends at any position.","solution":"def longest_palindromic_prefix(s): Returns the longest palindromic prefix of the string s. for i in range(len(s), 0, -1): prefix = s[:i] if prefix == prefix[::-1]: return prefix return ''"},{"question":"Create a function that takes a list of integers as input, and returns a new list where each element is decremented by 1. For example, if the input list is [5, 3, 9, 1], the function should return [4, 2, 8, 0].","solution":"def decrement_list(input_list): Takes a list of integers and returns a new list where each element is decremented by 1. Parameters: input_list (list): List of integers to be decremented. Returns: list: New list with each element decremented by 1. return [x - 1 for x in input_list]"},{"question":"Create a function that takes a positive integer as input and returns the sum of its digits. If the number is negative, return -1. If the number is 0, return 0.","solution":"def sum_of_digits(n): Returns the sum of the digits of a positive integer n. If n is negative, return -1. If n is 0, return 0. if n < 0: return -1 return sum(int(digit) for digit in str(n))"},{"question":"Create a function that calculates the area of a circle given the radius. The function should be named \`calculateCircleArea\` and should accept a single parameter \`radius\`.","solution":"import math def calculateCircleArea(radius): Returns the area of a circle given the radius. Parameters: radius (float): The radius of the circle Returns: float: The area of the circle if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * (radius ** 2)"},{"question":"Create a function that can generate a CSV file from a list of dictionaries. Each dictionary in the list represents a row in the CSV file, and the keys of the dictionary represent the column headers.","solution":"import csv def generate_csv_from_dicts(data, file_path): Generates a CSV file from a list of dictionaries. Parameters: data (list of dict): A list of dictionaries, where each dictionary represents a row. file_path (str): The path to the file where the CSV will be saved. if not data: raise ValueError(\\"Data should not be empty\\") # Get the headers from the keys of the first dictionary headers = data[0].keys() try: with open(file_path, 'w', newline='', encoding='utf-8') as file: writer = csv.DictWriter(file, fieldnames=headers) writer.writeheader() writer.writerows(data) except IOError as e: raise IOError(f\\"Could not write to file: {e}\\")"},{"question":"Create a function that takes an integer as input and checks if any of its digits are repeated. If there are repeated digits, the function should return True; otherwise, it should return False.","solution":"def has_repeated_digits(n): Checks if an integer has any repeated digits. Parameters: n (int): The input integer. Returns: bool: True if there are repeated digits, False otherwise. digits = str(abs(n)) return len(set(digits)) != len(digits)"},{"question":"Create a function that takes an array and a target value as input and returns the second highest number in the array if it exists, otherwise return the highest number. If the array has less than two unique elements, return -1.","solution":"def second_highest_or_highest(arr, target): Returns the second highest number in the array if it exists and the array has the target value, otherwise returns the highest number. If the array has less than two unique elements, return -1. unique_elements = list(set(arr)) unique_elements.sort(reverse=True) if len(unique_elements) < 2: return -1 if target in arr: return unique_elements[1] else: return unique_elements[0]"},{"question":"Create a function that takes a list of lists as an input and returns a single list containing all the elements from the sublists. In Python, implement a solution using list comprehension.","solution":"def flatten_list_of_lists(list_of_lists): Returns a single list containing all the elements from the sublists. Parameters: list_of_lists (list): A list of lists to be flattened. Returns: list: A flattened list containing all elements from the sublists. return [item for sublist in list_of_lists for item in sublist]"},{"question":"Create a function that takes a list of strings as an argument and prints each string in the list on a new line. If the string contains the letter \\"e\\", print only the letter \\"e\\" on a new line.","solution":"def print_strings_with_e(string_list): Takes a list of strings and prints each string on a new line. If the string contains the letter \\"e\\", only prints \\"e\\". for s in string_list: if 'e' in s: print(\\"e\\") else: print(s)"},{"question":"Create a function that accepts an array of integers and returns the frequency of the second most frequent element in the array. If there is no second most frequent element, the function should return 0.","solution":"def second_most_frequent(arr): Returns the frequency of the second most frequent element in the array. If there is no second most frequent element, the function returns 0. if not arr: return 0 from collections import Counter # Count the frequency of each element in the array frequency = Counter(arr) # Get a list of frequencies, sorted in descending order freq_values = sorted(frequency.values(), reverse=True) # Check if there is a second most frequent element if len(freq_values) < 2: return 0 else: return freq_values[1]"},{"question":"Create a function that takes two parameters: hours and minutes, and returns the total number of seconds represented by that time.","solution":"def convert_to_seconds(hours, minutes): Returns the total number of seconds represented by the given number of hours and minutes. return (hours * 3600) + (minutes * 60)"},{"question":"Create a function that generates unique random passwords. A password should consist of 8 to 16 characters in length, and should include at least one uppercase letter, one lowercase letter, one digit, and one special character.","solution":"import random import string def generate_password(): Generates a random password with a length between 8 to 16 characters, including at least one uppercase letter, one lowercase letter, one digit, and one special character. length = random.randint(8, 16) # Ensure to have at least one of each required type password_chars = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits), random.choice(string.punctuation), ] # Fill the rest of the password length with random choices of all possible characters all_characters = string.ascii_letters + string.digits + string.punctuation password_chars.extend(random.choice(all_characters) for _ in range(length - 4)) # Shuffle the password list to ensure randomness random.shuffle(password_chars) return ''.join(password_chars)"},{"question":"Create a function that takes an array of numbers and returns the largest number in the array. The function should work for arrays of any size.","solution":"def find_largest_number(arr): Function to return the largest number in the array. if not arr: # Handle empty array raise ValueError(\\"Array must not be empty\\") return max(arr)"},{"question":"Create a function that takes two integers and returns the sum of numbers from the first integer to the second integer, inclusive. For example, \`sumFromTo(3, 5)\` should return \`12\`.","solution":"def sum_from_to(a, b): Returns the sum of numbers from a to b, inclusive. If a is greater than b, it will sum the numbers from b to a. if a > b: a, b = b, a return sum(range(a, b + 1))"},{"question":"Create a function that takes a list of strings and returns the longest string in the list and its index.","solution":"def longest_string(strings): Returns the longest string in the list and its index. Args: strings (list of str): List of strings. Returns: tuple: The longest string and its index in the list. if not strings: return ('', -1) max_length = -1 longest = '' index = -1 for i, s in enumerate(strings): if len(s) > max_length: longest = s max_length = len(s) index = i return (longest, index)"},{"question":"Create a function that takes a string as input and returns the string with all characters converted to uppercase. How would you do this in Python?","solution":"def to_uppercase(s): Converts all characters in the input string to uppercase. Parameters: s (str): The input string to be converted. Returns: str: The input string with all characters in uppercase. return s.upper()"},{"question":"Create a function that takes a list of integers as input and returns the integer that appears most frequently in the list. If there are multiple integers appearing the same most times, the function should return all of them.","solution":"from collections import Counter def most_frequent(nums): Returns the integer(s) that appear(s) most frequently in the list. If there are multiple integers with the same highest frequency, returns all of them in a list. if not nums: return [] count = Counter(nums) max_freq = max(count.values()) return [num for num, freq in count.items() if freq == max_freq]"},{"question":"Create a function that checks if a given number is a prime number. A prime number is only divisible by 1 and itself, with a maximum of Four Divisors.","solution":"def is_prime(n): Checks if a given number n is a prime number. A prime number is only divisible by 1 and itself. :param n: int :return: bool if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that takes a string as an input and returns the longest string without repeating characters.","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. if not s: return \\"\\" start = 0 max_len = 0 max_substr = \\"\\" used_chars = {} for i, char in enumerate(s): if char in used_chars and used_chars[char] >= start: start = used_chars[char] + 1 used_chars[char] = i if i - start + 1 > max_len: max_len = i - start + 1 max_substr = s[start:i+1] return max_substr"},{"question":"Create a function that takes a list of integers as input and returns a list of the same integers, but sorted in descending order. You need to implement this without using the built-in \`sort()\` or \`sorted()\` function.","solution":"def sort_descending(lst): Takes a list of integers as input and returns a list of the same integers, but sorted in descending order. Does not use the built-in sort() or sorted() functions. for i in range(len(lst)): for j in range(i + 1, len(lst)): if lst[i] < lst[j]: lst[i], lst[j] = lst[j], lst[i] return lst"},{"question":"Create a function that takes in a string, and returns the length of the longest common substring between two substrings of the given string.","solution":"def longest_common_substring_length(s): Returns the length of the longest common substring between two substrings of the given string s. n = len(s) # Create a DP table to store lengths of longest common suffixes of substrings. # dp[i][j] will contain the length of longest common substring of s[0...i-1] & s[0...j-1] dp = [[0] * (n+1) for _ in range(n+1)] max_length = 0 # To store the length of the longest common substring # Building the dp array in bottom-up manner for i in range(1, n+1): for j in range(i+1, n+1): if s[i-1] == s[j-1] and i != j: dp[i][j] = dp[i-1][j-1] + 1 max_length = max(max_length, dp[i][j]) return max_length"},{"question":"Create a function that takes in an array of integers and returns the most frequent value (mode). If there is a tie for the most frequent value, return the smallest one.","solution":"def mode(arr): Returns the most frequent value in the array. If there is a tie, returns the smallest one. from collections import Counter if not arr: return None count = Counter(arr) max_freq = max(count.values()) # Get all values with the max frequency and then return the smallest one. mode_candidates = [num for num, freq in count.items() if freq == max_freq] return min(mode_candidates)"},{"question":"Create a function that takes a list of integers as input and returns the sum of the integers in the list. However, the sum should only include those integers that are greater than 10.","solution":"def sum_greater_than_ten(numbers): Returns the sum of integers in the list that are greater than 10. return sum(number for number in numbers if number > 10)"},{"question":"Create a function that takes two lists, \`list1\` and \`list2\`, as parameters and returns a new list containing only the elements that are present in both \`list1\` and \`list2\`.","solution":"def intersection(list1, list2): Returns a list containing only the elements that are present in both list1 and list2. return [item for item in list1 if item in list2]"},{"question":"Create a function that takes a string and returns a Boolean indicating whether the string has duplicate characters.","solution":"def has_duplicate_characters(s): Returns True if the string s has duplicate characters, otherwise False. return len(s) != len(set(s))"},{"question":"Create a function that takes a string and a set of delimiters, and returns a new string where each word in the original string is replaced with its corresponding word from a given dictionary, provided the word is a key in the dictionary and is surrounded by delimiters in the original string. Delimiters may include spaces, commas, or periods.","solution":"def replace_with_dict(s, delimiters, word_dict): Replaces words in the given string s that are keys in word_dict, and are surrounded by delimiters or at the beginning/end of the string. Parameters: s (str): The input string. delimiters (set): A set containing delimiter characters. word_dict (dict): Dictionary with words to be replaced as keys and their replacements as values. Returns: str: The transformed string with words replaced according to the dictionary. def is_delimiter(c): return c in delimiters words = [] word = [] i = 0 while i < len(s): if is_delimiter(s[i]): if word: words.append(''.join(word)) word = [] words.append(s[i]) else: word.append(s[i]) i += 1 if word: words.append(''.join(word)) for index, word in enumerate(words): if word in word_dict and (index == 0 or is_delimiter(words[index - 1])) and (index == len(words) - 1 or is_delimiter(words[index + 1])): words[index] = word_dict[word] return ''.join(words)"},{"question":"Create a function that takes two lists of integers and returns a list containing the union of both lists without duplicates. The function should also return the result sorted in ascending order.","solution":"def union_sorted(list1, list2): Returns the sorted union of two lists of integers without duplicates. return sorted(set(list1) | set(list2))"},{"question":"Create a function that generates a sequence of numbers based on a seed. The sequence should follow the Fibonacci sequence starting from the seed value. The function should return the next number in the sequence.","solution":"def fibonacci_next(seed1, seed2): Generates the next Fibonacci number from the provided seed values. :param seed1: First seed value (analogous to F(n-2)) :param seed2: Second seed value (analogous to F(n-1)) :return: The next number in the Fibonacci sequence return seed1 + seed2"},{"question":"Create a function that takes a list of numbers and returns the list with all negative numbers removed.","solution":"def remove_negatives(numbers): Returns a list with all negative numbers removed. return [num for num in numbers if num >= 0]"},{"question":"Create a function that takes a string as a parameter, converts all characters in the string to lowercase, and returns the new string. Also, remove all non-alphabetic characters from the string. Only alphabetic characters (both uppercase and lowercase) should be included in the returned string.","solution":"def simplify_string(s): Convert all characters in the string to lowercase and remove all non-alphabetic characters. return ''.join(char.lower() for char in s if char.isalpha())"},{"question":"Create a function that takes a list of lists (list of rows), and returns a new list of lists where each element is the sum of corresponding elements from each row in the original list of lists.","solution":"def sum_of_columns(list_of_rows): Returns a new list of lists where each element is the sum of corresponding elements from each row in the original list of lists. if not list_of_rows: return [] num_columns = len(list_of_rows[0]) result = [0] * num_columns for row in list_of_rows: for i in range(num_columns): result[i] += row[i] return result"},{"question":"Create a function that can solve any quadratic equation in the form ax^2 + bx + c = 0 and return the roots of the equation. If the equation has real roots, return them as a tuple. If the equation has no real roots, return None.","solution":"import cmath def solve_quadratic(a, b, c): Solves the quadratic equation ax^2 + bx + c = 0 and returns the roots. If there are real roots, returns a tuple of roots. If no real roots, returns None. if a == 0: raise ValueError(\\"Coefficient 'a' must be non-zero for a quadratic equation.\\") discriminant = b**2 - 4*a*c if discriminant > 0: root1 = (-b + cmath.sqrt(discriminant)) / (2 * a) root2 = (-b - cmath.sqrt(discriminant)) / (2 * a) return (root1.real, root2.real) elif discriminant == 0: root = -b / (2 * a) return (root,) else: return None"},{"question":"Create a function that calculates the sum of all numbers in a given array using_tail recursion in Python.","solution":"def tail_recursive_sum(arr, accumulator=0): Calculates the sum of all numbers in a given array using tail recursion. :param arr: List of numbers :param accumulator: Running total of sum :return: Sum of all numbers in the array if not arr: return accumulator return tail_recursive_sum(arr[1:], accumulator + arr[0])"},{"question":"Create a function that takes an integer n as input and returns a list of n odd numbers, starting from the","solution":"def odd_numbers(n): Returns a list of the first n odd numbers, starting from 1. return [2 * i + 1 for i in range(n)]"},{"question":"Create a function that takes in two arrays/lists and returns the common elements between them. How can I achieve this in Python?","solution":"def common_elements(list1, list2): Returns a list with the common elements between list1 and list2. # Convert lists to sets to find the intersection set1, set2 = set(list1), set(list2) # Find common elements common = set1 & set2 # Convert the result back to a list return list(common)"},{"question":"Create a function that takes a string \`name\` as input and returns a personalized greeting message. If \`name\` is \\"Alice\\", return \\"Hi Alice! Welcome back.\\" Otherwise, return \\"Hi there! Welcome!\\".","solution":"def personalized_greeting(name): Returns a personalized greeting message. Parameters: name (str): The name of the person Returns: str: The greeting message if name == \\"Alice\\": return \\"Hi Alice! Welcome back.\\" else: return \\"Hi there! Welcome!\\""},{"question":"Create a function that can remove all the white spaces in a given string.","solution":"def remove_whitespace(input_string): Removes all white spaces from the input string. return ''.join(input_string.split())"},{"question":"Create a function that converts a string to a tuple containing all the unique characters of the string, preserving the order in which they were first encountered. The function should handle empty strings as well.","solution":"def unique_characters(s): Converts a string to a tuple containing all unique characters of the string, preserving the order in which they were first encountered. seen = set() unique_chars = [] for char in s: if char not in seen: seen.add(char) unique_chars.append(char) return tuple(unique_chars)"},{"question":"Create a function that takes a list of strings as input and returns a list of all unique anagrams of each string. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.","solution":"def unique_anagrams(strings): Takes a list of strings and returns a list of unique anagrams of each string. :param strings: List of strings :return: List of lists, where each list contains unique anagrams of the corresponding input string from itertools import permutations unique_anagram_lists = [] for word in strings: # Generate all anagram permutations of the word anagram_set = set(''.join(p) for p in permutations(word)) unique_anagram_lists.append(list(anagram_set)) return unique_anagram_lists"},{"question":"Create a function that checks if the input number is a palindrome. A palindrome number reads the same backward as forward. For example, 121 is a palindrome number, but 123 is not. The function should return True if the number is a palindrome and False otherwise. The function should also handle edge cases such as negative numbers, floating-point numbers, and very large numbers.","solution":"def is_palindrome_number(n): Check if the input number is a palindrome. A palindrome number reads the same backward as forward. Parameters: n (int, float, str): The number to check if it's a palindrome. Returns: bool: True if the number is a palindrome, False otherwise. # Convert the number to string n_str = str(n) # Ignore special cases by considering the raw digit sequence if '.' in n_str or '-' in n_str: n_str = n_str.replace('.', '').replace('-', '') # Check if the string reads the same forwards and backwards return n_str == n_str[::-1]"},{"question":"Create a function that takes a string and a target character as input and returns the number of occurrences of the target character in the string.","solution":"def count_char_occurrences(s, target): Returns the number of occurrences of the target character in the string s. return s.count(target)"},{"question":"Create a function that calculates the maximum profit from a given array of stock prices where you can only complete at most one transaction. The function should also handle cases where the price array is empty.","solution":"def max_profit(prices): Calculates the maximum profit from a given array of stock prices where you can only complete at most one transaction (i.e., buy one and sell one share of the stock). If the price array is empty or no transaction is possible, the function returns 0. :param prices: List[int] - List of stock prices :return: int - Maximum possible profit if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Create a function that can handle a JSON object and sort data based on one of the properties. I will provide the key name, and the function should return a sorted JSON object.","solution":"import json def sort_json(json_data, key): Sorts a JSON object based on a given key. Parameters: json_data (str): A JSON string containing a list of dictionaries. key (str): The property name to sort the JSON object by. Returns: str: A JSON string with the sorted list of dictionaries. # Parse the JSON string to a Python list of dictionaries data = json.loads(json_data) # Sort the list of dictionaries based on the specified key sorted_data = sorted(data, key=lambda x: x[key]) # Convert the sorted list back to a JSON string sorted_json_data = json.dumps(sorted_data) return sorted_json_data"},{"question":"Create a function that returns \\"Fizz\\" if an integer is divisible by 3, \\"Buzz\\" if it's divisible by 5, and \\"FizzBuzz\\" if it's divisible by both 3 and 5. Otherwise, it should return the number itself if it does not meet any of the above conditions. Here's an example of what the function should look like: solution(45) should output \\"FizzBuzz\\"","solution":"def solution(n): Returns \\"Fizz\\" if n is divisible by 3, \\"Buzz\\" if n is divisible by 5, \\"FizzBuzz\\" if n is divisible by both 3 and 5. Otherwise, returns the number n itself. if n % 3 == 0 and n % 5 == 0: return \\"FizzBuzz\\" elif n % 3 == 0: return \\"Fizz\\" elif n % 5 == 0: return \\"Buzz\\" else: return n"},{"question":"Create a function that takes a single parameter and determines whether the parameter is a prime number. If the parameter is a prime number, return True; otherwise, return False. A prime number is a number that has exactly two distinct positive divisors: 1 and itself.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise returns False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that takes two integers, a and b, and returns \\"LONGER\\" if a is longer than b, \\"SAME\\" if they are equal length, and \\"SHORTER\\" if a is shorter than b. An integer's length is defined as the number of digits it contains.","solution":"def compare_length(a, b): Returns \\"LONGER\\" if the number of digits in a is greater than in b, \\"SAME\\" if they have the same number of digits, \\"SHORTER\\" if the number of digits in a is fewer than in b. len_a = len(str(abs(a))) len_b = len(str(abs(b))) if len_a > len_b: return \\"LONGER\\" elif len_a < len_b: return \\"SHORTER\\" else: return \\"SAME\\""},{"question":"Create a function that takes two parameters (a positive integer n and a list of integers lst) and returns the largest number that is less than or equal to n and is a multiple of every number in lst. The function should return this number or a string indicating that no such number exists.","solution":"def largest_multiple(n, lst): Returns the largest number less than or equal to n that is a multiple of every number in lst. If no such number exists, return a string indicating that no such number exists. if not lst or n < 1: return \\"No such number exists\\" # Start from n and decrease until a multiple is found or reach 1 for num in range(n, 0, -1): if all(num % i == 0 for i in lst): return num return \\"No such number exists\\""},{"question":"Create a function that takes an array and a number as parameters and returns the index of the first occurrence of the number in the array. If the number is not found, return -1. Assume all elements in the array are unique and the array is not empty.","solution":"def find_first_occurrence(arr, num): Returns the index of the first occurrence of num in arr. If the number is not found, returns -1. Parameters: arr (list): The array to search through. num: The number to find in the array. Returns: int: The index of the first occurrence of num, or -1 if not found. try: return arr.index(num) except ValueError: return -1"},{"question":"Create a function that takes an integer as an argument and returns the binary representation of the integer, but with the least significant bit (LSB) set to 0. For example, if the input integer is 13 (binary 1101), the function should return a string representing the binary number with the LSB set to 0 (binary 1100). If the input integer is 2 (binary 10), the function should return '0' as there's no other bit to set to 0. If the input is 0, the function should also return '0'.","solution":"def binary_with_lsb_zero(n): Returns the binary representation of the integer n, but with the least significant bit (LSB) set to 0. if n == 0: return '0' # Perform a bitwise AND operation with n and n-1 to set LSB to 0 result = n & (n - 1) return bin(result)[2:]"},{"question":"Create a function that generates a multiplication table for a given integer and prints it in a formatted table. What should the function do if the provided number is negative or not an integer?","solution":"def generate_multiplication_table(n): Generates and prints a multiplication table for a given integer n. If the input is negative or not an integer, returns an error message. if not isinstance(n, int): return \\"Error: Input is not an integer\\" if n < 0: return \\"Error: Input is a negative number\\" table = [] for i in range(1, n + 1): row = [i * j for j in range(1, n + 1)] table.append(row) # Print the table in a formatted way table_str = \\"n\\".join([\\"t\\".join(map(str, row)) for row in table]) return table_str"},{"question":"Create a function that accepts an integer array and returns a new array which contains only the positive numbers.","solution":"def filter_positive_numbers(arr): Returns a new array containing only the positive numbers from the input array. Parameters: arr (list of int): The input array of integers. Returns: list of int: A new array containing only the positive numbers. return [num for num in arr if num > 0]"},{"question":"Create a function that calculates the sum of all integers in an array that are divisible by a given number n.","solution":"def sum_divisible_by(arr, n): Calculates the sum of all integers in an array that are divisible by a given number n. Parameters: arr (list): List of integers. n (int): The number to divide by. Returns: int: The sum of all integers in the array divisible by n. return sum(x for x in arr if x % n == 0)"},{"question":"Create a function that takes a list of integers and returns a new list with each element duplicated.","solution":"def duplicate_elements(input_list): Returns a new list with each element in the input_list duplicated. :param input_list: List of integers to be duplicated :return: New list with each element duplicated return [element for element in input_list for _ in range(2)]"},{"question":"Create a function that takes in a string \`s\` and a positive integer \`n\`. The string \`s\` represents a binary number, and \`n\` represents the number of digits to pad the binary number with on the left. If the binary number is 8 digits long or more, no padding is needed.","solution":"def pad_binary(s, n): Pads a binary string \`s\` with \`n\` additional '0's on the left, unless the string is already 8 digits long or more (in this case, no padding is needed). :param s: Binary string :param n: Positive integer indicating the number of digits to pad with :return: Padded binary string if len(s) >= 8: return s return '0' * n + s"},{"question":"Create a function that takes an integer as input and returns a list containing the factors of the integer. Additionally, the function should filter out any even numbers and return the list of only odd factors (excluding 1). If the integer is less than 1, return an empty list.","solution":"def odd_factors(n): Returns a list of odd factors of the integer n, excluding 1 and even numbers. If n is less than 1, returns an empty list. if n < 1: return [] factors = [i for i in range(2, n+1) if n % i == 0 and i % 2 != 0] return factors"},{"question":"Create a function that takes an array as an argument. The function should return the minimum value in the array.","solution":"def find_minimum(array): Returns the minimum value in the array. if not array: raise ValueError(\\"The array is empty.\\") minimum = array[0] for num in array[1:]: if num < minimum: minimum = num return minimum"},{"question":"Create a function that takes a string as input and returns a dictionary where the keys are the characters in the string and the values are the counts of each character. This function should be case-sensitive, meaning that it should consider 'a' and 'A' as different characters.","solution":"def count_characters(s): Returns a dictionary containing the counts of each character in the input string. Args: s (str): The input string. Returns: dict: A dictionary with characters as keys and their counts as values. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Create a function that finds the largest number in a list and returns it. If the list is empty, the function should return None.","solution":"def find_largest(lst): Returns the largest number in a list. If the list is empty, returns None. Parameters: lst (list): A list of numbers. Returns: number: The largest number in the list or None if the list is empty. if not lst: # Check if list is empty return None return max(lst) # Use built-in max function to find the largest number"},{"question":"Create a function that takes a list of integers as input and returns the sum of all numbers in the list that are greater than 10. If there are no numbers greater than 10, the function should return 0.","solution":"def sum_greater_than_ten(numbers): Returns the sum of all numbers in the list that are greater than 10. Args: numbers (list): A list of integers. Returns: int: The sum of all numbers greater than 10. If no such numbers exist, returns 0. return sum(num for num in numbers if num > 10)"},{"question":"Create a function that takes in a list of integers and returns the integer that appears at the 2/3 ratio mark of the list. The 2/3 ratio mark is defined as the third element from the end of the list (similar to the middle element, but at the two-thirds point). If the list has fewer than three elements, return \`None\`.","solution":"def two_thirds_mark(nums): Returns the integer that appears at the 2/3 ratio mark of the list. The 2/3 ratio mark is defined as the third element from the end of the list. If the list has fewer than three elements, it returns None. if len(nums) < 3: return None return nums[-3]"},{"question":"Create a function that generates an array of integers from 10 to 0 in reverse order, with a specified step size between each element.","solution":"def generate_reversed_array(step): Generates an array of integers from 10 to 0 in reverse order with the specified step size. :param step: The step size between each element. :return: A list of integers from 10 to 0 in reverse order with the specified step size. return list(range(10, -1, -step))"},{"question":"Create a function that takes in a sentence and returns a new string with the words in reverse order.","solution":"def reverse_sentence(sentence): Reverses the order of words in a given sentence. Args: sentence (str): The sentence to reverse. Returns: str: A new string with the words in reverse order. words = sentence.split() reversed_words = words[::-1] reversed_sentence = ' '.join(reversed_words) return reversed_sentence"},{"question":"Create a function that returns the substring of the given string that starts at the beginning of the string and ends at the given index.","solution":"def substring_until_index(s, index): Returns the substring of \`s\` that starts at the beginning of the string and ends at the given \`index\`. If \`index\` is out of bounds, it will return up to the last valid index. :param s: The original string :param index: The ending index of the substring :return: The substring from the start to the given index (inclusive) if index < 0: return \\"\\" return s[:index+1]"},{"question":"Create a function that takes a list of words and returns a new list with the words ordered by their length in ascending order.","solution":"def sort_by_length(words): Returns a new list with the words ordered by their length in ascending order. :param words: List of words to be sorted :type words: list :return: Sorted list of words by length :rtype: list return sorted(words, key=len)"},{"question":"Create a function that takes in a string and removes all duplicates from the string while maintaining the original order of the characters.","solution":"def remove_duplicates(s): Removes all duplicate characters from the string while maintaining the original order. :param s: The input string :return: A string with all duplicates removed seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that checks if a number is an exact power of 2. An exact power of 2 is defined as a number that can be expressed as (2^n) where (n) is a non-negative integer. The function should return \`true\` if the number is an exact power of 2, and \`false\` otherwise.","solution":"def is_power_of_two(n): Returns True if the number n is an exact power of 2, otherwise returns False. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Create a function that converts a string into repeated chunks of a specified length. For example, given a string \\"hello\\" and a chunk size of 3, the output should be \`['hel', 'lo']\`. If the last chunk is smaller than the specified size, it should also be included.","solution":"def split_into_chunks(s, chunk_size): Splits the string s into repeated chunks of the specified length chunk_size. Arguments: s : str : The input string to be split. chunk_size : int : The size of each chunk. Returns: list : A list of chunks of the specified size. return [s[i:i + chunk_size] for i in range(0, len(s), chunk_size)]"},{"question":"Create a function that takes an integer n and if n is even, return the factorial of n. If n is odd, return the sum of the first n odd numbers. Assume n > 0.","solution":"import math def factorial_or_sum_of_odds(n): If n is even, returns the factorial of n. If n is odd, returns the sum of the first n odd numbers. if n % 2 == 0: return math.factorial(n) else: return sum(range(1, 2*n, 2))"},{"question":"Create a function that , given a list of integers, returns the sum of the absolute values of the integers, but only for those integers that are divisible by 3.","solution":"def sum_of_abs_divisible_by_three(numbers): Returns the sum of the absolute values of the integers in the list that are divisible by 3. return sum(abs(num) for num in numbers if num % 3 == 0)"},{"question":"Create a function that takes a list of integers and returns the maximum sum of a subarray within the list. This is known as the maximum subarray problem.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray within the list. Uses Kadane's algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that checks if all elements in a list are distinct or not.","solution":"def all_elements_distinct(lst): Returns True if all elements in the list are distinct, False otherwise. return len(lst) == len(set(lst))"},{"question":"Create a function that generates all possible combinations of a given list of elements. The function should take a list of elements as input and return a list of lists, where each inner list is a possible combination of elements from the input list.","solution":"from itertools import combinations def generate_combinations(elements): Generates all possible combinations of a given list of elements. Args: elements (list): A list of elements. Returns: list of list: A list containing all possible combinations of the given elements. all_combinations = [] for r in range(1, len(elements) + 1): all_combinations.extend(combinations(elements, r)) return [list(combo) for combo in all_combinations]"},{"question":"Create a function that takes two strings as input and returns a new string that contains only the characters that are common to both of the input strings, preserving the order of characters as they appear in the first string.","solution":"def common_characters(str1, str2): Returns a new string that contains only the characters that are common to both of the input strings, preserving the order of characters as they appear in the first string. set_str2 = set(str2) return ''.join([char for char in str1 if char in set_str2])"},{"question":"Create a function that calculates the factorial of a non-negative integer. The function should return the factorial of the given number. If the input is negative, the function should return an error message.","solution":"def factorial(n): Calculate the factorial of a non-negative integer. If the input is negative, return an error message. Args: n (int): Non-negative integer whose factorial is to be calculated Returns: int or str: Factorial of the input number or an error message if input is negative. if n < 0: return \\"Error: Input must be a non-negative integer.\\" result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that accepts a string and a number as input. The function should return a substring from the given string, starting from the beginning of the string and up to the nth character. If n is greater than the length of the string, return the entire string.","solution":"def get_substring(s, n): Returns a substring from the beginning of the string 's' up to the nth character. If n is greater than the length of the string, returns the entire string. :param s: The input string :param n: The number of characters to include in the resulting substring :return: The resulting substring return s[:n]"},{"question":"Create a function that takes a string containing numeric digits and returns a new string with each digit replaced by its ASCII value representation. For example, the string \\"123\\" should be converted to \\"495051\\".","solution":"def digits_to_ascii(s): Takes a string containing numeric digits and returns a new string with each digit replaced by its ASCII value representation. return ''.join(str(ord(char)) for char in s if char.isdigit())"},{"question":"Create a function that takes a list of integers and returns the sum of the two lowest numbers.","solution":"def sum_of_two_lowest_numbers(numbers): Returns the sum of the two lowest numbers in the list. if len(numbers) < 2: raise ValueError(\\"The list must contain at least two numbers.\\") sorted_numbers = sorted(numbers) return sorted_numbers[0] + sorted_numbers[1]"},{"question":"Create a function that takes in two strings, one for the product name and another for the price. The function should return a formatted string that includes the product name with an asterisk (*) before and after it, and the price in parentheses, for example: \\"*Product Name* (Price)\\".","solution":"def format_product(product_name, price): Returns a formatted string with the product name surrounded with asterisks and the price in parentheses. Arguments: product_name -- the name of the product price -- the price of the product Returns: A string in the format \\"*Product Name* (Price)\\" return f\\"*{product_name}* ({price})\\""},{"question":"Create a function that receives three integers as input and returns the largest among them. If one of the integers is negative, return an error message.","solution":"def largest_of_three(a, b, c): Returns the largest number among the three integers a, b, and c. If any of the integers is negative, returns an error message. if a < 0 or b < 0 or c < 0: return \\"Error: Negative numbers are not allowed\\" return max(a, b, c)"},{"question":"Create a function that takes a string as input and returns the string in reverse order without using any built-in string reversal functions.","solution":"def reverse_string(s): Returns the input string reversed without using built-in string reversal functions. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Create a function that takes an integer n as an argument and returns a list of tuples. Each tuple contains two elements, the factorial of the index (i) and the square of the index (i). The function should stop generating tuples when i reach the given integer n.","solution":"import math def generate_factorial_square_tuples(n): Generates a list of tuples where each tuple contains the factorial and the square of the index (i). Parameters: n (int): The integer limit for generating tuples. Returns: list of tuples: [(i!, i^2), ...] up to i = n result = [] for i in range(n+1): factorial = math.factorial(i) square = i * i result.append((factorial, square)) return result"},{"question":"Create a function that takes in a string that represents a mathematical expression. The function should evaluate the expression and return the result. The function should handle basic arithmetic operations (addition, subtraction, multiplication, division, parentheses, and functions like sin, cos, tan, log, and pow). The function should evaluate the expression with respect to the order of operations (PEMDAS).","solution":"import math def evaluate_expression(expression): Evaluates a mathematical expression. Args: expression (str): The mathematical expression to evaluate. Returns: float: The result of the evaluated expression. allowed_names = { k: v for k, v in math.__dict__.items() if not k.startswith(\\"__\\") } allowed_names.update({ 'pi': math.pi, 'e': math.e }) return eval(expression, {\\"__builtins__\\": {}}, allowed_names)"},{"question":"Create a function that calculates the temperature in degrees Celsius given the temperature in degrees Fahrenheit. Remember that the formula to convert from Fahrenheit to Celsius is \`(degree_fahrenheit - 32) * 5 / 9\`.","solution":"def fahrenheit_to_celsius(degree_fahrenheit): Converts a temperature from degrees Fahrenheit to degrees Celsius. Parameters: degree_fahrenheit (float): Temperature in degrees Fahrenheit. Returns: float: Temperature in degrees Celsius. return (degree_fahrenheit - 32) * 5 / 9"},{"question":"Create a function that takes two numbers as input and returns their sum. Additionally, if the sum is an even number, return it as a string prefixed with \\"Even: \\", and if the sum is an odd number, return it as a string prefixed with \\"Odd: \\".","solution":"def sum_with_prefix(a, b): Takes two numbers and returns their sum with a prefix indicating if the sum is even or odd. total = a + b if total % 2 == 0: return f\\"Even: {total}\\" else: return f\\"Odd: {total}\\""},{"question":"Create a function that generates a list containing the numbers from 1 to 100, but instead of the multiples of 3 and 5, replace them with \\"Fizz\\" and \\"Buzz\\" respectively. For multiples of both 3 and 5, replace them with \\"FizzBuzz\\".","solution":"def fizz_buzz(): Generates a list with numbers from 1 to 100, but with multiples of 3 replaced by \\"Fizz\\", multiples of 5 by \\"Buzz\\", and multiples of both 3 and 5 by \\"FizzBuzz\\". result = [] for i in range(1, 101): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(i) return result"},{"question":"Create a function that takes an array of integers and returns the two numbers such that they add up to a specific target number. If there are no two numbers such that they add up to the target, return an empty array.","solution":"def two_sum(nums, target): Finds two numbers in \`nums\` such that they add up to \`target\`. Args: nums (list of int): List of integers. target (int): The target sum. Returns: list: A list containing the two numbers that add up to the target, or an empty list if no such numbers exist. num_dict = {} for num in nums: complement = target - num if complement in num_dict: return [complement, num] num_dict[num] = True return []"},{"question":"Create a function that calculates the sum of all numbers in an array that exceed a minimum value.","solution":"def sum_above_minimum(arr, min_value): Calculate the sum of all numbers in an array that exceed a minimum value. :param arr: List of numbers. :param min_value: The minimum value that elements must exceed to be included in the sum. :return: The sum of all elements in the array that are greater than min_value. return sum(x for x in arr if x > min_value)"},{"question":"Create a function that takes a list of strings as a parameter, and returns the first word of each string that is at even indices in the list. If the string at an even index does not contain any words, the function should return an empty string for that position.","solution":"def first_word_even_indices(lst): Returns the first word of each string that is at even indices in the list. If the string at an even index does not contain any words, return an empty string for that position. Parameters: lst (List[str]): A list of strings. Returns: List[str]: A list of first words of strings at even indices. result = [] for i in range(len(lst)): if i % 2 == 0: words = lst[i].split() if words: result.append(words[0]) else: result.append(\\"\\") return result"},{"question":"Create a function that calculates the area of a rectangle. The function should take the length and width of the rectangle as arguments and return the area.","solution":"def calculate_rectangle_area(length, width): Returns the area of a rectangle given its length and width. return length * width"},{"question":"Create a function that takes in two lists and returns a new list containing only the elements that are present in the first list but not in the second list. This should be done using a set difference operation.","solution":"def list_difference(list1, list2): Returns a new list containing only the elements that are present in the first list but not in the second list. The comparison is done using a set difference operation. set1 = set(list1) set2 = set(list2) difference = set1 - set2 return list(difference)"},{"question":"Create a function that will take an integer as an input and will print all the numbers from 1 to that integer (inclusive).","solution":"def print_numbers(n): Prints all the numbers from 1 to n (inclusive). for i in range(1, n + 1): print(i)"},{"question":"Create a function that takes an integer as input and returns the sum of odd numbers from 1 to that integer (inclusive).","solution":"def sum_of_odds(n): Returns the sum of all odd numbers from 1 to n (inclusive). Parameters: n (int): The upper limit integer. Returns: int: Sum of all odd numbers from 1 to n. return sum(i for i in range(1, n + 1) if i % 2 != 0)"},{"question":"Create a function that takes a string as input, and returns a new string that is the reverse of the input string without using any built-in functions or reversing methods like reverse(), slicing [::-1], or any other in-built library functions. Implement the logic from scratch.","solution":"def reverse_string(input_string): Returns a new string that is the reverse of the input string without using built-in functions or reversing methods like reverse(), slicing [::-1], or any other library functions. reversed_string = '' length = len(input_string) for i in range(length): reversed_string = input_string[i] + reversed_string return reversed_string"},{"question":"Create a function that calculates the sum of a given list of integers and returns the sum.","solution":"def sum_of_list(numbers): Returns the sum of a given list of integers. return sum(numbers)"},{"question":"Create a function that takes a filename as a parameter and returns the last modified time of the file in Unix timestamp format. You should use the Python standard library without any external modules.","solution":"import os import time def get_last_modified_time(filename): Returns the last modified time of the file in Unix timestamp format. :param filename: The path to the file :return: The last modified time of the file in Unix timestamp format try: timestamp = os.path.getmtime(filename) return timestamp except FileNotFoundError: return None"},{"question":"Create a function that converts seconds to minutes and seconds. The function should accept the number of seconds as an argument and return a tuple containing the number of minutes and the remainder seconds.","solution":"def convert_seconds(seconds): Converts the given seconds to minutes and seconds. Parameters: seconds (int): The total number of seconds. Returns: tuple: A tuple containing the number of minutes and the remaining seconds. minutes = seconds // 60 remaining_seconds = seconds % 60 return (minutes, remaining_seconds)"},{"question":"Create a function that takes in a list of integers and returns the even numbers in that list. How can this be done efficiently? What are some considerations for optimizing the function's performance?","solution":"def get_even_numbers(lst): This function takes in a list of integers and returns a list of the even numbers in that list. return [num for num in lst if num % 2 == 0]"},{"question":"Create a function that encrypts a message using a rotational cipher (Ceasar cipher). The function should take a string and an integer as input parameters. The string represents the message to be encrypted, and the integer represents the number of positions to shift each character in the string. The function should return the encrypted message. If the input string is empty, the function should return an empty string. Function Signature: \`def caesar_cipher(text: str, shift: int) -> str:\`","solution":"def caesar_cipher(text: str, shift: int) -> str: Encrypts the input text using a rotational cipher with the specified shift. Parameters: text (str): The input message to encrypt. shift (int): The number of positions to shift each character. Returns: str: The encrypted message. if not text: return \\"\\" encrypted_text = [] for char in text: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') encrypted_char = chr((ord(char) - shift_base + shift) % 26 + shift_base) encrypted_text.append(encrypted_char) else: encrypted_text.append(char) return ''.join(encrypted_text)"},{"question":"Create a function that takes in two numbers and returns \`true\` if either of the numbers is divisible by 7 or 11, but not both.","solution":"def is_divisible_by_7_or_11_but_not_both(a, b): Returns True if either of the numbers is divisible by 7 or 11, but not both. def check_number(n): divisible_by_7 = (n % 7 == 0) divisible_by_11 = (n % 11 == 0) return (divisible_by_7 or divisible_by_11) and not (divisible_by_7 and divisible_by_11) return check_number(a) or check_number(b)"},{"question":"Create a function that takes two numbers as parameters and returns the sum of their squares.","solution":"def sum_of_squares(a, b): Returns the sum of the squares of a and b. return a ** 2 + b ** 2"},{"question":"Create a function that takes a binary number as a string and converts it to a decimal number. Your task is not to use any built-in libraries or methods for conversion, and you should implement it from scratch.","solution":"def binary_to_decimal(binary_str): Converts a binary number (given as a string) to its decimal representation. decimal_value = 0 length = len(binary_str) for i, digit in enumerate(binary_str): # Calculate the power for the corresponding bit power = length - i - 1 # Convert bit to integer and add its value to the decimal representation decimal_value += int(digit) * (2 ** power) return decimal_value"},{"question":"Create a function that can return frequency of the element x in an array. I have to make it work with any data type, e.g., int, string, boolean.","solution":"def frequency(arr, x): Returns the frequency of element x in the array arr. return arr.count(x)"},{"question":"Create a function that converts Roman numerals to integers. The function should handle both uppercase and lowercase Roman numerals.","solution":"def roman_to_integer(roman): Convert a Roman numeral to an integer. The function handles both uppercase and lowercase Roman numerals. roman = roman.upper() roman_values = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } total = 0 prev_value = 0 for char in roman: current_value = roman_values[char] if current_value > prev_value: total += current_value - 2 * prev_value else: total += current_value prev_value = current_value return total"},{"question":"Create a function that will take in an array of integers and return the sum of all the even numbers in the array. How can I solve this problem using Python?","solution":"def sum_of_even_numbers(arr): Returns the sum of all even numbers in the array. :param arr: List of integers :return: Sum of even integers return sum(x for x in arr if x % 2 == 0)"},{"question":"Create a function that finds and prints the youngest child and their age from a list of ages. The ages are stored in a list. Please ensure the solution handles cases where the list is empty.","solution":"def find_youngest_child(ages): Finds and returns the youngest child's age from the list of ages. If the list is empty, returns None. if not ages: return None youngest_age = min(ages) return youngest_age"},{"question":"Create a function that can check whether a given integer is a prime number or not in Python. Adjust the function to be more efficient by eliminating some unnecessary checks.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Create a function that takes a string as an input and returns the string in reverse order along with its length. For example, if the input string is \\"Hello World\\", the function should return (\\"dlroW olleH\\", 11). How can we do this in Python?","solution":"def reverse_string_and_length(s): Returns a tuple containing the input string reversed and its length. :param s: Input string :return: A tuple (reversed_string, length_of_string) reversed_string = s[::-1] length_of_string = len(s) return reversed_string, length_of_string"},{"question":"Create a function that converts a list of integers into a string where each integer is separated by a comma and a space.","solution":"def list_to_string(int_list): Converts a list of integers into a string where each integer is separated by a comma and a space. Parameters: int_list (list of int): A list of integers Returns: str: A string representation of the list with integers separated by a comma and a space return ', '.join(map(str, int_list))"},{"question":"Create a function that calculates the factorial of a given number using recursion. The function should handle the base case where the factorial of 0 is 1. Additionally, ensure the function is recursive and correctly calculates higher factorials.","solution":"def factorial(n): Returns the factorial of the given number n using recursion. The factorial of 0 is defined as 1. if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that takes two numbers as input and returns whether they are divisible by 3 and 5. If both conditions are met, return \\"Divisible by both 3 and 5\\". If only 3 is met, return \\"Divisible by 3\\". If only 5 is met, return \\"Divisible by 5\\". If neither condition is met, return \\"Not divisible by 3 or 5\\".","solution":"def check_divisibility(a, b): Check if the numbers are divisible by 3 and 5 and return the appropriate message. If both conditions are met, return \\"Divisible by both 3 and 5\\". If only 3 is met, return \\"Divisible by 3\\". If only 5 is met, return \\"Divisible by 5\\". If neither condition is met, return \\"Not divisible by 3 or 5\\". a_divisible_by_3 = (a % 3 == 0) a_divisible_by_5 = (a % 5 == 0) b_divisible_by_3 = (b % 3 == 0) b_divisible_by_5 = (b % 5 == 0) if a_divisible_by_3 and a_divisible_by_5 and b_divisible_by_3 and b_divisible_by_5: return \\"Divisible by both 3 and 5\\" elif a_divisible_by_3 and b_divisible_by_3: return \\"Divisible by 3\\" elif a_divisible_by_5 and b_divisible_by_5: return \\"Divisible by 5\\" else: return \\"Not divisible by 3 or 5\\""},{"question":"Create a function that returns the deepest level of nesting in a given list, including both lists and tuples.","solution":"def deepest_level(obj): Returns the deepest level of nesting in a given list or tuple. if not isinstance(obj, (list, tuple)): return 0 if not obj: return 1 return 1 + max(deepest_level(item) for item in obj)"},{"question":"Create a function that takes in a list of strings and returns a new list with all strings that are palindromes present in the original list. A palindrome is a string that reads the same backwards as forwards.","solution":"def find_palindromes(strings): Returns a list of palindromes from the given list of strings. A palindrome is a string that reads the same backwards as forwards. Parameters: strings (list): List of strings to be checked for palindromes Returns: list: List of palindromes return [s for s in strings if s == s[::-1]]"},{"question":"Create a function that takes a string of binary digits and returns the number of 1's and 0's as a dictionary.","solution":"def count_binary_digits(s): Takes a string of binary digits and returns the number of 1's and 0's as a dictionary. Parameters: s (str): A string containing only binary digits ('0' and '1'). Returns: dict: A dictionary with keys '1' and '0' providing the count of each digit in the input string. return {'1': s.count('1'), '0': s.count('0')}"},{"question":"Create a function that takes three integer arguments: \`hour\`, \`minute\`, and \`second\`, representing a time in 24-hour format. The function should return a string formatted as \\"HH:MM:SS\\".","solution":"def format_time(hour, minute, second): Formats the given time in HH:MM:SS format. Parameters: - hour: integer, represents the hour in 24-hour format (0-23) - minute: integer, represents the minute (0-59) - second: integer, represents the second (0-59) Returns: - A string representing the time in \\"HH:MM:SS\\" format. return f\\"{hour:02}:{minute:02}:{second:02}\\""},{"question":"Create a function that can handle an arbitrary list of integers and return a sorted list. The function should also be able to handle an empty list and return an empty list. Additionally, the function should be able to handle a list with a single element and return the list as is.","solution":"def sort_integers(int_list): Sorts an arbitrary list of integers in ascending order. :param int_list: list of integers :return: sorted list of integers return sorted(int_list)"},{"question":"Create a function that will return the value of y times the value x given x and y.","solution":"def multiply(x, y): Returns the product of x and y. return x * y"},{"question":"Create a function that returns the number of words in a given sentence. Assume words are separated by one or more whitespace characters.","solution":"def count_words(sentence): Returns the number of words in a given sentence. if not sentence: return 0 words = sentence.split() return len(words)"},{"question":"Create a function that takes two integers as input and returns their greatest common divisor (GCD). You must use recursion to solve this problem.","solution":"def gcd(a, b): Returns the greatest common divisor of a and b using recursion. if b == 0: return a return gcd(b, a % b)"},{"question":"Create a function that takes as input a string and returns the frequency of each word in the string. The function should ignore case and punctuation. For example, \\"Hello, hello!!\\" should return {'hello': 2}.","solution":"import re from collections import defaultdict def word_frequency(input_string): Returns the frequency of each word in the string, ignoring case and punctuation. :param input_string: str - The input string :return: dict - A dictionary with words as keys and their frequencies as values # Remove punctuation using regex and convert to lower case words = re.findall(r'bw+b', input_string.lower()) frequency_dict = defaultdict(int) for word in words: frequency_dict[word] += 1 return dict(frequency_dict)"},{"question":"Create a function that converts any non-empty string into a valid Python expression. The function should take a string as input and return a valid Python expression as output. The function should handle both basic and complex expressions, including arithmetic operations, string concatenation, and function calls.","solution":"def convert_to_expression(input_str): This function takes a non-empty string containing a Python expression and evaluates it to return the result. try: result = eval(input_str) except Exception as e: raise ValueError(f\\"Invalid expression: {input_str}, Error: {e}\\") return result"},{"question":"Create a function that takes two integers as an argument. The function should return the sum and difference of the two given integers. It has to return the results using tuple.","solution":"def sum_and_diff(a, b): Returns a tuple containing the sum and difference of a and b. return (a + b, a - b)"},{"question":"Create a function that receives a vector of integers and returns a new vector containing the squares of the original elements, but only if the elements are greater than zero.","solution":"def square_positive_elements(vector): Returns a new list containing the squares of the elements in 'vector' that are greater than zero. :param vector: List of integers :return: List of squares of positive integers return [x**2 if x > 0 else 0 for x in vector]"},{"question":"Create a function that takes an integer as input and returns a string representing the number spelled out in words. The function should handle numbers from 0 to 99.","solution":"def number_to_words(n): Converts an integer (from 0 to 99) to its English words equivalent. if n < 0 or n > 99: raise ValueError(\\"Number out of range. Please input a number between 0 and 99.\\") units = [ \\"zero\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\", \\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\" ] tens = [ \\"\\", \\"\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\" ] if n < 20: return units[n] else: ten_unit = n // 10 unit = n % 10 return tens[ten_unit] + ('' if unit == 0 else '-' + units[unit])"},{"question":"Create a function that returns the minimum value in an array of integers, but without using the built-in \`min()\` function or any other built-in function to directly find the minimum. You must use a custom comparison method within your function. The function should be named \`find_min_value\` and take one parameter: \`numbers\` (an array of integers).","solution":"def find_min_value(numbers): Returns the minimum value in an array of integers without using the built-in min() function. Parameters: - numbers: list of integers Returns: - The minimum integer in the list if not numbers: raise ValueError(\\"The array should not be empty.\\") min_value = numbers[0] for num in numbers[1:]: if num < min_value: min_value = num return min_value"},{"question":"Create a function that takes a user's name as input and returns a personalized greeting.","solution":"def greet_user(name): Returns a personalized greeting for the user. return f\\"Hello, {name}!\\""},{"question":"Create a function that converts a given number into a string with leading zeros based on a specified width.","solution":"def add_leading_zeros(number, width): Convert a given number into a string with leading zeros based on a specified width. :param number: The number to be converted (int). :param width: The total width of the resulting string, including leading zeros (int). :return: The formatted string with leading zeros. return str(number).zfill(width)"},{"question":"Create a function that takes a list of integers and returns the largest product of three numbers in the list. For example, given the list [1, 2, 3, 4], the function should return 24 (3*2*4).","solution":"import itertools def largest_product_of_three(numbers): Returns the largest product of three numbers in the list. if len(numbers) < 3: raise ValueError(\\"List must contain at least three numbers.\\") sorted_numbers = sorted(numbers) # The maximum product of three numbers can be: # 1. The product of the three largest numbers. # 2. The product of the two smallest numbers (which could be negative) and the largest number. max_product_1 = sorted_numbers[-1] * sorted_numbers[-2] * sorted_numbers[-3] max_product_2 = sorted_numbers[0] * sorted_numbers[1] * sorted_numbers[-1] return max(max_product_1, max_product_2)"},{"question":"Create a function that converts a number to its factorial using recursion.","solution":"def factorial(n): Returns the factorial of a number n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that converts from an integer to a string. You need to be able to handle both positive and negative numbers. For example, when an input is 123, the output should be \\"123\\", and for input -456, the output should be \\"-456\\". You can assume that all input integers are within the range of a standard integer.","solution":"def int_to_str(num): Converts an integer to its string representation. Parameters: num (int): The integer to convert. Returns: str: The string representation of the integer. return str(num)"},{"question":"Create a function that takes a number as an argument and returns a string in the format \\"odds and evens\\" where \\"odds\\" is the sum of all odd numbers from 1 to n, and \\"evens\\" is the sum of all even numbers from 1 to n. The function should use a generator for both odd and even sums.","solution":"def sum_odds_and_evens(n): def odd_gen(limit): for i in range(1, limit + 1, 2): yield i def even_gen(limit): for i in range(2, limit + 1, 2): yield i odd_sum = sum(odd_gen(n)) even_sum = sum(even_gen(n)) return f\\"{odd_sum} and {even_sum}\\""},{"question":"Create a function that validates whether a given string represents a float number in Python.","solution":"def is_float(s): Validates whether the input string s represents a float number. Parameters: s (str): The string to be checked. Returns: bool: True if the string is a valid float number, False otherwise. try: float(s) return True except ValueError: return False"},{"question":"Create a function that takes a string \`s\` as input and returns its reverse. If the string is empty, return an empty string.","solution":"def reverse_string(s): Returns the reverse of the input string s. If the string is empty, returns an empty string. return s[::-1]"},{"question":"Create a function that generates a right-angled triangle pyramid made of stars. The function should take an integer as an input, representing the height of the pyramid. The pyramid should be constructed such that each level of the pyramid has one more star than the previous level. The function should print the pyramid to the console.","solution":"def generate_pyramid(height): Prints a right-angled triangle pyramid made of stars. Parameters: height (int): The height of the pyramid. for i in range(1, height + 1): print('*' * i)"},{"question":"Create a function that takes no arguments and returns a value that is the result of evaluating a mathematical expression. The expression I'm looking for is \`2 * x + 3\` where \`x\` is the result of another expression \`x = 5 / 3\`. The problem requires the use of lambda functions.","solution":"def evaluate_expression(): Evaluates the expression 2 * x + 3 where x = 5 / 3 using lambda functions. x = (lambda: 5 / 3)() result = (lambda x: 2 * x + 3)(x) return result"},{"question":"Create a function that calculates the number of binary strings of length n, where no two '1's are adjacent.","solution":"def count_non_adjacent_binary_strings(n): Calculates the number of binary strings of length n, where no two '1's are adjacent. # Base cases if n == 0: return 1 if n == 1: return 2 # Memoization to store results of subproblems dp = [0] * (n + 1) dp[0] = 1 # Only one string of length 0 (the empty string) dp[1] = 2 # \\"0\\" and \\"1\\" for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"Create a function that extracts all the words in a given list of strings that contain a specific given substring.","solution":"def extract_words_with_substring(strings, substring): Extracts all the words in the given list of strings that contain the specified substring. Parameters: strings (list of str): List of strings to search within. substring (str): The substring to search for within the words. Returns: list of str: List of words containing the substring. result = [] for string in strings: words = string.split() for word in words: if substring in word: result.append(word) return result"},{"question":"Create a function that takes a list of tuples as input and returns a list of the second elements in each tuple. For example, given the list of tuples \`data = [(1, 2), (3, 4), (5, 6)]\`, the function should return \`[2, 4, 6]\`.","solution":"def get_second_elements(data): Returns a list of the second elements in each tuple from the input list of tuples. Args: data (list): A list containing tuples of format (x, y). Returns: list: A list containing the second elements of each tuple. return [element[1] for element in data]"},{"question":"Create a function that takes in a list of values, and returns a new list with each value multiplied by 2.","solution":"def multiply_by_2(values): Takes in a list of values and returns a new list with each value multiplied by 2. Args: values (list): A list of numbers to be multiplied by 2. Returns: list: A new list with each input value multiplied by 2. return [x * 2 for x in values]"},{"question":"Create a function that takes a list of integers and returns the second maximum number in the list. If the list does not contain at least two unique numbers, return None. Example input: \`find_second_max([7, 1, 3, 5, 1])\` should return \`5\`.","solution":"def find_second_max(numbers): Returns the second maximum number in the list. If the list does not have at least two unique numbers, return None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Create a function that detects the character that appears most frequently in a given string.","solution":"def most_frequent_char(s): Returns the character that appears most frequently in the string s. from collections import Counter if not s: return None count = Counter(s) most_frequent = count.most_common(1)[0][0] return most_frequent"},{"question":"Create a function that takes an integer \`n\` as input and returns all the prime numbers greater than \`n\` up to and including \`m\`. Here \`m\` is the next nearest single digit integer greater than \`n\` that is divisible by 5.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def next_nearest_divisible_by_five(n): Helper function to find the next nearest single digit integer greater than n that is divisible by 5. m = n + 1 while m < 10: if m % 5 == 0: return m m += 1 return -1 # In case no single digit number is found def prime_numbers_greater_than_n(n): Returns all the prime numbers greater than n up to and including m. m = next_nearest_divisible_by_five(n) primes = [i for i in range(n + 1, m + 1) if is_prime(i)] return primes"},{"question":"Create a function that takes a string as an input and returns true if all characters in the string are unique, and false otherwise.","solution":"def all_unique_characters(s): Returns True if all characters in the string s are unique, else returns False. return len(s) == len(set(s))"},{"question":"Create a function that removes duplicate values from a list or array while maintaining the original order of the first occurrences of each element. How's this implemented in Python?","solution":"def remove_duplicates(data): Removes duplicate values from a list or array while maintaining the original order of the first occurrences of each element. :param data: List containing elements with possible duplicates. :return: A list with duplicates removed, maintaining the original order. seen = set() result = [] for item in data: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Create a function that can dynamically resize a list to a specified length, filling new elements with a given value. If the desired length is greater than the current length, the list should be right-padded with the specified value. If the desired length is less than the current length, the list should be left-truncated.","solution":"def resize_list(lst, desired_length, fill_value=None): Resizes the input list to the desired length. If the desired length is greater than the current length, the list is right-padded with the given fill_value. If the desired length is less than the current length, the list is left-truncated. Parameters: lst (list): The input list to be resized. desired_length (int): The desired length of the list. fill_value: The value to use for padding if the list is extended. Defaults to None. Returns: list: The resized list. current_length = len(lst) if desired_length > current_length: # Right-pad the list with fill_value return lst + [fill_value] * (desired_length - current_length) else: # Left-truncate the list return lst[-desired_length:]"},{"question":"Create a function that searches for a specific item in a list. If the item is found, return its index. If the item is not found, return -1.","solution":"def search_item(lst, item): Searches for a specific item in a list. Returns the index if the item is found, else returns -1. try: return lst.index(item) except ValueError: return -1"},{"question":"Create a function that takes as input a list of integers. This function should return the largest number that can be formed by concatenating the numbers in any order. Note that the result may be very large, so return the result as a string.","solution":"from functools import cmp_to_key def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 def largest_number(nums): Returns the largest number that can be formed by concatenating the input integers. # Convert integer list to string list str_nums = list(map(str, nums)) # Sort numbers based on custom comparator sorted_nums = sorted(str_nums, key=cmp_to_key(compare)) # Edge case: all zeros if sorted_nums[0] == '0': return '0' # Concatenate sorted numbers and return return ''.join(sorted_nums)"},{"question":"Create a function that generates a list of prime numbers up to a given number N. Ensure your solution is efficient and uses Python as the programming language.","solution":"def generate_primes(N): Generates a list of prime numbers up to and including N. Args: N (int): The upper bound of prime numbers to generate. Returns: list: A list of prime numbers up to and including N. if N < 2: return [] # Sieve of Eratosthenes algorithm sieve = [True] * (N + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(N**0.5) + 1): if sieve[start]: for multiple in range(start*start, N + 1, start): sieve[multiple] = False return [num for num in range(2, N + 1) if sieve[num]]"},{"question":"Create a function that returns the sum of the numeric values of the uppercase letters in a given string.","solution":"def sum_uppercase_letters(s): Returns the sum of the numeric values of the uppercase letters in a given string. return sum(ord(char) for char in s if char.isupper())"},{"question":"Create a function that takes a string \`s\` as an input. The function should return the index of the first occurrence of a character that is repeated. If no such character exists, the function should return -1. For example, if \`s = \\"hello\\"\`, the function should return \`1\` because 'l' is the first character that appears more than once and its first occurrence is at index 1.","solution":"def first_repeated_char_index(s): Returns the index of the first occurrence of a character that is repeated in the string \`s\`. If no such character exists, returns -1. :param s: Input string :type s: str :return: Index of the first repeated character or -1 if no repeats :rtype: int seen = {} for i, char in enumerate(s): if char in seen: return seen[char] else: seen[char] = i return -1"},{"question":"Create a function that takes an unordered sequence of integers and returns a new list with all even elements in ascending order while maintaining the original order of the odd elements. For example, consider the following list of integers: \`[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\`. The output for this list should be \`[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\` since all the elements are already in order. However, if the input list is \`[1, 3, 5, 8, 4, 10]\`, the output should be \`[1, 3, 5, 4, 8, 10]\`. Can you help me solve this?","solution":"def sort_evens_with_odd_order(lst): Returns a list where all even numbers are sorted in ascending order and the odd numbers maintain their original positions. :param lst: List of integers :return: List of integers with sorted even numbers and original order of odd numbers evens_sorted = sorted([x for x in lst if x % 2 == 0]) result = [] even_index = 0 for num in lst: if num % 2 == 0: result.append(evens_sorted[even_index]) even_index += 1 else: result.append(num) return result"},{"question":"Create a function that takes an array of numbers and returns a new array containing the squares of those numbers. The function should be efficient and work with both positive and negative integers.","solution":"def square_numbers(numbers): Returns a new array containing the squares of the given numbers. Parameters: numbers (list of int or float): The array of numbers to be squared. Returns: list of int or float: A new array with each element being the square of the corresponding input number. return [num ** 2 for num in numbers]"},{"question":"Create a function that takes a list of tuples as an input and returns another list where each element is the sum of each tuple's elements.","solution":"def sum_tuples(tuple_list): Takes a list of tuples and returns a list where each element is the sum of each tuple's elements. return [sum(t) for t in tuple_list]"},{"question":"Create a function that takes a list of numbers and returns a list containing only the numbers that are greater than a specified threshold.","solution":"def filter_greater_than(numbers, threshold): Returns a list of numbers that are greater than the specified threshold. Parameters: - numbers: A list of numbers. - threshold: The threshold value. Returns: - A list of numbers from the input list that are greater than the threshold. return [num for num in numbers if num > threshold]"},{"question":"Create a function that generates prime numbers up to a given limit (maxLimit). The function should be written using Python and should include comments explaining each section of the code.","solution":"def generate_primes(maxLimit): Generates a list of prime numbers up to the given limit (maxLimit). Arguments: maxLimit -- the upper limit (inclusive) up to which to generate prime numbers. Returns: A list of prime numbers up to maxLimit. if maxLimit < 2: return [] sieve = [True] * (maxLimit + 1) sieve[0] = sieve[1] = False for start in range(2, int(maxLimit**0.5) + 1): if sieve[start]: for multiple in range(start*start, maxLimit + 1, start): sieve[multiple] = False return [num for num in range(maxLimit + 1) if sieve[num]]"},{"question":"Create a function that takes two number lists, performs a simple mathematical operation on each list, and returns the result.","solution":"def list_operations(list1, list2): Performs element-wise addition, subtraction, multiplication, and division on two number lists. Returns a dictionary containing the results of these operations. if len(list1) != len(list2): raise ValueError(\\"Both lists should be of the same length\\") addition = [a + b for a, b in zip(list1, list2)] subtraction = [a - b for a, b in zip(list1, list2)] multiplication = [a * b for a, b in zip(list1, list2)] division = [a / b if b != 0 else None for a, b in zip(list1, list2)] return { \\"addition\\": addition, \\"subtraction\\": subtraction, \\"multiplication\\": multiplication, \\"division\\": division }"},{"question":"Create a function that slices a string and returns the reversed string of the slice.","solution":"def slice_and_reverse(string, start, end): Returns the reversed string of the slice from 'start' to 'end' indices. sliced_string = string[start:end] reversed_sliced_string = sliced_string[::-1] return reversed_sliced_string"},{"question":"Create a function that returns whether two strings are one edit away from each other. By one edit away, we mean that the characters in either string can be removed, added, or modified to make the strings identical.","solution":"def one_edit_away(s1, s2): Returns True if the two strings are one edit away from each other (either insertion, deletion, or substitution of a single character). Otherwise, returns False. len1, len2 = len(s1), len(s2) if abs(len1 - len2) > 1: return False if len1 < len2: return one_edit_away(s2, s1) i, j, edits = 0, 0, 0 while i < len1 and j < len2: if s1[i] != s2[j]: if edits == 1: return False edits += 1 if len1 == len2: j += 1 else: j += 1 i += 1 return True"},{"question":"Create a function that takes a number as an input and returns the factorial of that number. Examples: factorial(5) should return 120.","solution":"def factorial(n): Returns the factorial of a given number n. if n < 0: raise ValueError(\\"Cannot compute factorial of a negative number\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes an integer as an input and returns its factorial. However, if the input number is negative, the function should return an error message indicating that the input must be a non-negative integer.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, returns an error message. if n < 0: return \\"Error: Input must be a non-negative integer.\\" elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that can decrypt an encrypted file. The function should take two parameters: the encrypted file and a key. The function should return the decrypted content of the file as a string. Assume the encryption method used is simple XOR encryption with the key.","solution":"def xor_decrypt(file_path, key): Decrypts an encrypted file using XOR encryption with the provided key. Parameters: - file_path (str): Path to the encrypted file - key (int): The key used for XOR encryption Returns: - str: The decrypted content of the file decrypted_content = [] with open(file_path, 'rb') as f: encrypted_data = f.read() for byte in encrypted_data: decrypted_content.append(chr(byte ^ key)) return ''.join(decrypted_content)"},{"question":"Create a function that calculates the factorial of a given number using recursion. Also, include error handling for invalid inputs.","solution":"def factorial(n): Returns the factorial of a given number using recursion. Raises ValueError for invalid inputs (non-integer or negative integers). if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that takes a number as an input and returns the factorial of that number. However, the factorial of a negative number is undefined. Hence, if the input is negative, the function should return an error message stating, \\"Factorial is undefined for negative numbers.\\" If the input is a floating-point number, the function should also return an error message stating, \\"Factorial is only defined for integers.\\" The function should handle integer values in an efficient manner. You can assume that the input will always be a number.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, returns an error message. If n is a floating-point number, returns an error message. if isinstance(n, float): return \\"Factorial is only defined for integers.\\" if n < 0: return \\"Factorial is undefined for negative numbers.\\" if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that reverses the words in a string but keeps the spaces in their original positions and uses extra characters when necessary to fill in. The extra characters should be spaces so that the reversed words are separated by spaces as well. If the reversed word cannot completely fill in the space, then the extra spaces should be placed at the left side of the original word's position.","solution":"def reverse_words_with_spaces(s): Reverses the words in the string but keeps the spaces in their original positions. Extra spaces are placed on the left side if the reversed word cannot completely fill the original space. words = s.split() reversed_words = [word[::-1] for word in words] result = list(s) # Starting with a list of original string reversed_word_index = 0 for i, char in enumerate(s): if char != ' ': result[i] = reversed_words[reversed_word_index][0] reversed_words[reversed_word_index] = reversed_words[reversed_word_index][1:] if len(reversed_words[reversed_word_index]) == 0: reversed_word_index += 1 return ''.join(result)"},{"question":"Create a function that takes in a list of numbers and returns the sum of all numbers in the list that are even. Include comments in your code to explain your steps.","solution":"def sum_even_numbers(numbers): Returns the sum of all even numbers in the list. Args: numbers (list of int): A list of integers. Returns: int: The sum of all even integers in the list. # Initialize the sum as 0 total = 0 # Iterate over each number in the list for number in numbers: # Check if the number is even if number % 2 == 0: # Add the even number to the total total += number # Return the computed total return total"},{"question":"Create a function that takes two strings, \`str1\` and \`str2\`, and returns a string that consists of the characters in the odd indices of both strings, concatenated together.","solution":"def concat_odd_indices(str1, str2): Concatenates characters from odd indices of both input strings. Parameters: str1 (str): The first input string. str2 (str): The second input string. Returns: str: A new string consisting of characters at odd indices from both input strings concatenated together. result = '' # Extracting characters from odd indices from str1 for i in range(1, len(str1), 2): result += str1[i] # Extracting characters from odd indices from str2 for i in range(1, len(str2), 2): result += str2[i] return result"},{"question":"Create a function that takes a positive integer n and returns the sum of all positive integers less than or equal to n. The function should use a loop to calculate the sum. You should not use recursion or built-in sum functions.","solution":"def sum_up_to_n(n): Returns the sum of all positive integers less than or equal to n. Parameters: n (int): A positive integer Returns: int: The sum of all positive integers up to and including n total = 0 for i in range(1, n + 1): total += i return total"},{"question":"Create a function that receives a list of integers and determines if the list can be sorted in ascending or descending order by removing at most one element. The function should return \`True\` if it is possible, otherwise \`False\`.","solution":"def can_be_sorted_by_removing_one(nums): Determines if a list of integers can be sorted in ascending or descending order by removing at most one element. Args: nums: List[int] - List of integers. Returns: bool - True if it can be sorted by removing one element, False otherwise. def is_sorted(lst): return lst == sorted(lst) or lst == sorted(lst, reverse=True) if is_sorted(nums): return True for i in range(len(nums)): if is_sorted(nums[:i] + nums[i+1:]): return True return False"},{"question":"Create a function that takes a list as an input, reverses it, and then appends the original list to the reversed list.","solution":"def reverse_and_append(original_list): Takes a list, reverses it, and appends the original list to the reversed list. Args: original_list (list): The list to be reversed and appended. Returns: list: The reversed list followed by the original list. reversed_list = original_list[::-1] return reversed_list + original_list"},{"question":"Create a function that takes an input string and returns a new string where all vowels are replaced with the corresponding number of occurrences in the original input. For example, 'a' or 'A' should be replaced with the number 1, 'e' or 'E' should be replaced with the number 2 and so on up to 'u' or 'U' being replaced with the number 5.","solution":"def replace_vowels_with_numbers(input_string): Replace each vowel in the input_string with the corresponding number of occurrences: 'a' or 'A' -> '1', 'e' or 'E' -> '2', 'i' or 'I' -> '3', 'o' or 'O' -> '4', 'u' or 'U' -> '5' vowels_map = {'a': '1', 'e': '2', 'i': '3', 'o': '4', 'u': '5'} result = '' for char in input_string: lower_char = char.lower() if lower_char in vowels_map: result += vowels_map[lower_char] else: result += char return result"},{"question":"Create a function that calculates the highest and lowest temperatures in a list of daily temperature readings in Celsius.","solution":"def highest_and_lowest_temperatures(temperatures): Returns the highest and lowest temperatures from a list of daily temperature readings. :param temperatures: list of daily temperature readings in Celsius :return: tuple with (highest_temperature, lowest_temperature) if not temperatures: return None, None highest = max(temperatures) lowest = min(temperatures) return highest, lowest"},{"question":"Create a function that generates a random angle in degrees within the range of 0 to 360.","solution":"import random def generate_random_angle(): Generates a random angle in degrees within the range of 0 to 360. return random.uniform(0, 360)"},{"question":"Create a function that takes a list of dictionaries as an argument and returns a new list containing dictionaries with the same keys, but sorted by the values of a specific key.","solution":"def sort_dicts_by_key(dicts_list, sort_key): Sort a list of dictionaries by a specific key. Parameters: dicts_list (list): A list of dictionaries to sort. sort_key (str): The key in the dictionaries to sort by. Returns: list: A new list of dictionaries sorted by the specified key. if not all(sort_key in d for d in dicts_list): raise ValueError(\\"All dictionaries must contain the sort key\\") return sorted(dicts_list, key=lambda x: x[sort_key])"},{"question":"Create a function that returns an integer from a given string. If the string does not contain an integer, the function should return -1.","solution":"import re def extract_integer_from_string(s): Extracts the first integer found in the given string. If no integer is found, returns -1. match = re.search(r'd+', s) return int(match.group()) if match else -1"},{"question":"Create a function that takes a list of significant others and returns a comma-separated string of their names.","solution":"def list_to_string(significant_others): Takes a list of significant others and returns a comma-separated string of their names. Parameters: significant_others (list): A list of significant others' names. Returns: str: A comma-separated string of names. return ', '.join(significant_others)"},{"question":"Create a function that finds the prime factors of a given integer. Return the prime factors in a list sorted from smallest to largest. If the input number is a prime number itself, return a list containing only that number.","solution":"def prime_factors(n): Returns the prime factors of the given integer n as a list sorted from smallest to largest. :param n: Integer to find the prime factors of. :return: List of prime factors. i = 2 factors = [] while i * i <= n: while (n % i) == 0: factors.append(i) n //= i i += 1 if n > 1: factors.append(n) return factors"},{"question":"Create a function that takes an input list and prints out all the elements of the list.","solution":"def print_list_elements(input_list): Prints out all elements of the input list. for element in input_list: print(element)"},{"question":"Create a function that takes an input list and returns the reversed list.","solution":"def reverse_list(input_list): Returns the reversed list. return input_list[::-1]"},{"question":"Create a function that takes a list of integers and returns the sum of all the elements in the list. However, if the list contains any integers less than 0, the function should return a message saying \\"Negative number found\\". If all the integers are non-negative, then it should return the sum.","solution":"def sum_list(lst): Returns the sum of all elements in the list if all elements are non-negative. If there is any negative number in the list, returns \\"Negative number found\\". for num in lst: if num < 0: return \\"Negative number found\\" return sum(lst)"},{"question":"Create a function that formats a large number into a string with commas for thousands separators.","solution":"def format_number_with_commas(number): Formats a large number into a string with commas for thousands separators. return f\\"{number:,}\\""},{"question":"Create a function that takes a list of integers as input and returns a list containing the length of the longest consecutive subsequence. For example, given the list [1, 9, 4, 5, 4, 8, 6], the function should return [5] because the longest consecutive subsequence is [4, 5, 6, 7, 8].","solution":"def longest_consecutive_subsequence(nums): Returns the length of the longest consecutive subsequence in the list of integers. if not nums: return [0] nums = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums: current_num = num current_streak = 1 while current_num + 1 in nums: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return [longest_streak]"},{"question":"Create a function that takes an integer as input and returns the factorial of that number. You should use only recursion without any looping constructs or libraries. The input integer should be non-negative.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that calculates the factorial of a given number using an iterative approach. The function should take a single integer input and return the factorial result.","solution":"def factorial_iterative(n): Returns the factorial of a given non-negative integer n. If n is less than 0, returns None. if n < 0: return None result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that checks whether each number in an array is even or odd and returns a new array with a description of each number. For example, if the input array is \`[2, 5, 8, 9]\`, the output should be \`['Even', 'Odd', 'Even', 'Odd']\`.","solution":"def even_or_odd(arr): Returns a list with 'Even' or 'Odd' description for each element in the input list 'arr'. Parameters: arr (list): List of integers. Returns: list: List of strings 'Even' or 'Odd'. return ['Even' if x % 2 == 0 else 'Odd' for x in arr]"},{"question":"Create a function that takes a list of strings and returns a new list with the first letter of each string capitalized. The function should also handle cases where the input list may contain non-string elements and ignore them.","solution":"def capitalize_first_letters(input_list): Takes a list of strings and returns a new list with the first letter of each string capitalized. Non-string elements in the list are ignored. :param input_list: List of elements :return: List with capitalized first letters of strings return [s.capitalize() for s in input_list if isinstance(s, str)]"},{"question":"Create a function that checks if the elements of a given list are in ascending order. If the list is empty or contains only one element, it should return True. The function should handle both numerical and string elements.","solution":"def is_ascending(lst): Checks if the elements of the list are in ascending order. Returns True if the list is empty or contains only one element. if len(lst) <= 1: return True for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: return False return True"},{"question":"Create a function that takes a list of integers and returns the sum of the squares of the even numbers in the list using Python.","solution":"def sum_of_squares_of_even_numbers(lst): Returns the sum of the squares of the even numbers in the list. :param lst: List of integers :return: Sum of squares of even integers return sum(x**2 for x in lst if x % 2 == 0)"},{"question":"Create a function that takes in a price list from an e-commerce website and returns the cheapest item in the list. If there is more than one item with the same cheapest price, return all of them in a list.","solution":"def find_cheapest_items(price_list): Takes in a price list and returns the cheapest item(s). If there are multiple items with the same cheapest price, return them in a list. Parameters: price_list (list of tuples): A list where each tuple contains the name of an item and its price in the format (item_name, item_price). Returns: list: The name(s) of the cheapest item(s). If there is only one cheapest item, it is returned as a list containing one string. if not price_list: return [] min_price = min(price_list, key=lambda x: x[1])[1] cheapest_items = [item for item, price in price_list if price == min_price] return cheapest_items"},{"question":"Create a function that generates a list of Fibonacci numbers up to a specified limit (n). The function should be able to start generating Fibo numbers from a given initial value, and limit itself by a specified limit.","solution":"def generate_fibonacci(limit, start=0): Generates a list of Fibonacci numbers starting from \`start\` and up to a specified \`limit\`. :param limit: The upper limit for the value of Fibonacci numbers :param start: The initial value to start generating Fibonacci numbers :return: List of Fibonacci numbers if limit < 0: raise ValueError(\\"Limit must be a non-negative integer.\\") if start < 0: raise ValueError(\\"Start value must be a non-negative integer.\\") fibonacci_sequence = [] a, b = 0, 1 while a <= limit: if a >= start: fibonacci_sequence.append(a) a, b = b, a + b return fibonacci_sequence"},{"question":"Create a function that takes a string and returns the character that appears the most number of times consecutively (\\"consecutive character\\"). If there are multiple characters that appear consecutively the same number of times, return the one that comes first in alphabetical order.","solution":"def most_consecutive_char(s): Returns the character that appears the most number of times consecutively. In case of a tie, returns the character that comes first in alphabetical order. if not s: return '' max_char = s[0] max_count = 1 current_char = s[0] current_count = 1 for i in range(1, len(s)): if s[i] == current_char: current_count += 1 else: if current_count > max_count or (current_count == max_count and current_char < max_char): max_count = current_count max_char = current_char current_char = s[i] current_count = 1 if current_count > max_count or (current_count == max_count and current_char < max_char): max_char = current_char return max_char"},{"question":"Create a function that encrypts a string using Caesar cipher. The function should take a string and an integer n as an input, and return the encrypted string. The Caesar cipher encryption involves shifting each letter in the string 'n' positions down the alphabet.","solution":"def caesar_cipher(text, shift): Encrypts the input text using a Caesar cipher with a given shift. :param text: string to be encrypted :param shift: integer representing the shift for the cipher :return: encrypted string result = [] # Loop through each character in the text for char in text: if char.isalpha(): shift_amount = shift % 26 # There are 26 letters in the alphabet # Calculate the new position for lowercase or uppercase letters if char.islower(): new_char = chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a')) else: new_char = chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A')) result.append(new_char) else: result.append(char) # non-alphabetic characters are not shifted return ''.join(result)"},{"question":"Create a function that , given a positive integer \`n\`, returns the sum of all positive integers up to \`n\` (inclusive). This function should use recursion to calculate the sum.","solution":"def sum_upto_n(n): Returns the sum of all positive integers up to n using recursion. Parameters: n (int): A positive integer. Returns: int: The sum of all positive integers up to n. if n <= 1: return n else: return n + sum_upto_n(n - 1)"},{"question":"Create a function that takes a list of integers and returns a new list containing only the elements that are greater than 10.","solution":"def filter_greater_than_ten(lst): Returns a new list containing only the elements that are greater than 10. Parameters: - lst (list): A list of integers. Returns: - list: A list of integers greater than 10. return [x for x in lst if x > 10]"},{"question":"Create a function that checks if a given string is a palindrome. A palindrome reads the same backward as forward, e.g., \\"madam\\". Your function should be case-insensitive and ignore any spaces in the string.","solution":"def is_palindrome(s): Checks if the given string is a palindrome. The check is case-insensitive and ignores spaces. # Normalize the string: lower case, remove spaces normalized = ''.join(c.lower() for c in s if c.isalnum()) # Check if the normalized string reads the same backward as forward return normalized == normalized[::-1]"},{"question":"Create a function that takes a string as an input and removes all the vowels (a, e, i, o, u) from it. The function should return the modified string.","solution":"def remove_vowels(input_string): Removes all the vowels (a, e, i, o, u) from the input string. Args: input_string: str : The original string from which vowels need to be removed. Returns: str : The input string without vowels. vowels = \\"aeiouAEIOU\\" return \\"\\".join(char for char in input_string if char not in vowels)"},{"question":"Create a function that checks if a number is squared and returns the square root if it is.","solution":"import math def check_square_number(n): Returns the square root of n if it is a perfect square, otherwise returns None. if n < 0: return None sqrt_n = math.isqrt(n) if sqrt_n * sqrt_n == n: return sqrt_n else: return None"},{"question":"Create a function that implements the classic \\"Hello, World!\\" program in Python. Ensure the function prints \\"Hello, World!\\" to the console.","solution":"def hello_world(): Prints 'Hello, World!' to the console. print(\\"Hello, World!\\")"},{"question":"Create a function that takes a list of numbers and returns the list with all duplicates removed and elements sorted in ascending order.","solution":"def remove_duplicates_and_sort(numbers): Returns a list with all duplicates removed and elements sorted in ascending order. return sorted(list(set(numbers)))"},{"question":"Create a function that takes in a list and returns a new list which contains the elements of the input list in reverse order. Additionally, the function should remove any duplicate elements that appear more than once in the list.","solution":"def reverse_and_remove_duplicates(lst): Returns a new list with the elements of lst in reverse order and with duplicates removed. seen = set() result = [] for item in reversed(lst): if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Create a function that takes a list of integers and returns a new list with each element incremented by 1 if the element is even, or decremented by 1 if the element is odd.","solution":"def modify_list(numbers): Takes a list of integers and returns a new list with each element incremented by 1 if even, or decremented by 1 if odd. return [x + 1 if x % 2 == 0 else x - 1 for x in numbers]"},{"question":"Create a function that takes a URL as input and returns the content of the webpage at that URL. Use Python's requests library to fetch the webpage content and BeautifulSoup to parse the HTML.","solution":"import requests from bs4 import BeautifulSoup def fetch_webpage_content(url): Fetches and returns the content of the webpage at the given URL. Parameters: url (str): The URL of the webpage to fetch. Returns: str: The text content of the webpage. try: response = requests.get(url) response.raise_for_status() # Raises HTTPError, if one occurred. soup = BeautifulSoup(response.content, 'html.parser') return soup.get_text() except requests.RequestException as e: return str(e)"},{"question":"Create a function that takes a nested list and a target value as input. The function should return True if the target value is found within the nested list, and False otherwise. The function should work for arbitrary levels of nesting.","solution":"def is_value_in_nested_list(nested_list, target): Checks if the target value is found in the nested list. Parameters: nested_list (list): A list that may contain other lists. target: The value to search for in the nested list. Returns: bool: True if the target value is found, else False. for element in nested_list: if isinstance(element, list): if is_value_in_nested_list(element, target): return True elif element == target: return True return False"},{"question":"Create a function that returns the smallest element in a given array using recursion.","solution":"def find_smallest(arr): Returns the smallest element in a given array using recursion. # If the array has only one element, return that element if len(arr) == 1: return arr[0] # Recursively find the smallest element in the remaining array smaller_number = find_smallest(arr[1:]) # Compare the first element with the smallest of the remaining array if arr[0] < smaller_number: return arr[0] else: return smaller_number"},{"question":"Create a function that counts the number of words in a given string. Words are considered to be sequences of characters separated by spaces. Also, handle edge cases where there might be leading, trailing, or multiple consecutive spaces between words.","solution":"def count_words(s): Counts the number of words in a given string. Words are sequences of characters separated by spaces. Handles leading, trailing, and multiple consecutive spaces. :param s: Input string :return: Number of words words = s.split() return len(words)"},{"question":"Create a function that checks if a given string \`s\` is a palindrome by ignoring case and spaces.","solution":"def is_palindrome(s): Checks if the given string s is a palindrome by ignoring case and spaces. clean_s = ''.join(c for c in s if c.isalnum()).lower() return clean_s == clean_s[::-1]"},{"question":"Create a function that takes a string as input and returns a list of all possible substrings of the input string. You need to consider both the order and the presence of substrings.","solution":"def get_all_substrings(s): Returns a list of all possible substrings of the input string \`s\`. substrings = [] n = len(s) for i in range(n): for j in range(i + 1, n + 1): substrings.append(s[i:j]) return substrings"},{"question":"Create a function that will take a string as an input, and return the number of characters in the string that are uppercase and lowercase letters respectively.","solution":"def count_upper_lower(s): Returns a tuple (number of uppercase letters, number of lowercase letters) in the string s. upper_count = sum(1 for c in s if c.isupper()) lower_count = sum(1 for c in s if c.islower()) return upper_count, lower_count"},{"question":"Create a function that takes three parameters representing a point in three-dimensional space (x, y, z) and returns the Euclidean distance from the origin (0, 0, 0). You should use the Pythagorean theorem in three dimensions.","solution":"import math def euclidean_distance_from_origin(x, y, z): Returns the Euclidean distance from the origin (0, 0, 0) to the point (x, y, z). return math.sqrt(x**2 + y**2 + z**2)"},{"question":"Create a function that calculates the factorial of a given number. The function should be able to handle both integer and floating-point inputs. Additionally, the function should handle edge cases, such as negative numbers and zero.","solution":"def factorial(n): Returns the factorial of a given number. Handles both integer and floating-point inputs. Raises ValueError for negative numbers and non-integer inputs. if not isinstance(n, (int, float)): raise ValueError(\\"Input must be an integer or a floating-point number.\\") if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if int(n) != n: raise ValueError(\\"Factorial is not defined for non-integer numbers.\\") if n == 0: return 1 result = 1 for i in range(1, int(n)+1): result *= i return result"},{"question":"Create a function that accepts a single character and returns its ASCII value. The function should be called \`getAsciiValue\` and should take a character as an argument. The ASCII value should be returned as an integer.","solution":"def getAsciiValue(char): Returns the ASCII value of the given character. Parameters: char (str): A single character. Returns: int: The ASCII value of the character. return ord(char)"},{"question":"Create a function that takes a number as input and returns the number with all digits reversed (e.g., reverseDigits(123) should return 321).","solution":"def reverse_digits(number): Returns the number with all digits reversed. :param number: int :return: int reversed_num_str = str(abs(number))[::-1] reversed_num = int(reversed_num_str) # If the original number was negative, convert the result back to negative if number < 0: reversed_num = -reversed_num return reversed_num"},{"question":"Create a function that takes in a list of integers and determines if there is a pair of integers that add up to a given target sum. If such a pair exists, the function should return a list consisting of those two integers; otherwise, it should return an empty list.","solution":"def find_pair_with_sum(nums, target): Returns a list of two integers from 'nums' that add up to 'target', or an empty list if no such pair exists. seen = set() for num in nums: complement = target - num if complement in seen: return [complement, num] seen.add(num) return []"},{"question":"Create a function that takes an integer as an argument and returns the sum of that integer and its reverse.","solution":"def sum_with_reverse(n): Returns the sum of the integer n and its reverse. # Getting the reverse of the integer by converting to string, reversing, and converting back to int reverse_n = int(str(n)[::-1]) # Returning the sum of n and its reverse return n + reverse_n"},{"question":"Create a function that calculates the area of a triangle given its base and height. The function should take two parameters, base and height, and return the area of the triangle. The area of a triangle can be calculated using the formula: \`(base * height) / 2\`. Here is a basic approach to solving this problem in Python.","solution":"def triangle_area(base, height): Returns the area of a triangle given its base and height. return (base * height) / 2"},{"question":"Create a function that reverses the characters of the string. However, you should not use any built-in string reversal functions. You should manipulate the string using pointers in a character array.","solution":"def reverse_string(s): Reverses the characters in the string s using pointers. chars = list(s) left, right = 0, len(chars) - 1 while left < right: chars[left], chars[right] = chars[right], chars[left] left += 1 right -= 1 return ''.join(chars)"},{"question":"Create a function that generates a list of all the Prime Numbers up to a given number \`n\`. The function should return an array of these prime numbers.","solution":"def generate_primes(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(n + 1) if sieve[num]]"},{"question":"Create a function that takes three integer parameters and returns the sum of the squares of the three integers.","solution":"def sum_of_squares(a, b, c): Returns the sum of the squares of three integers a, b, and c. return a**2 + b**2 + c**2"},{"question":"Create a function that returns the maximum product of two distinct elements in an array of non-negative integers.","solution":"def max_product_of_two(elements): Returns the maximum product of two distinct elements in an array of non-negative integers. if len(elements) < 2: return 0 # Not enough elements to form a product first_max = second_max = float('-inf') for num in elements: if num > first_max: first_max, second_max = num, first_max elif num > second_max: second_max = num return first_max * second_max"},{"question":"Create a function that takes a string of numbers as input and returns the sum of all the numbers in the string. For example, the input \\"12345\\" should return 15 (since 1 + 2 + 3 + 4 + 5 = 15).","solution":"def sum_of_numbers_in_string(s): Returns the sum of all the numbers in the string. Parameters: s (str): A string of numbers. Returns: int: The sum of the numbers in the string. return sum(int(char) for char in s if char.isdigit())"},{"question":"Create a function that takes two parameters: a list of integers and a target number. The function should return the total count of pairs of elements in the list whose sum is equal to the target number.","solution":"def count_pairs_with_sum(nums, target): Returns the total count of pairs of elements in the list whose sum is equal to the target number. count = 0 nums_dict = {} for num in nums: complement = target - num if complement in nums_dict: count += nums_dict[complement] if num in nums_dict: nums_dict[num] += 1 else: nums_dict[num] = 1 return count"},{"question":"Create a function that takes a two-dimensional array as argument and returns the transpose of the array.","solution":"def transpose(matrix): Returns the transpose of a given two-dimensional array (matrix). Parameters: matrix (list of lists): A two-dimensional array to be transposed. Returns: list of lists: The transposed matrix. return [list(row) for row in zip(*matrix)]"},{"question":"Create a function that takes an integer as input and returns a new integer where all the digits of the input integer are reversed.**","solution":"def reverse_integer(n): Returns an integer where all digits of the input integer n are reversed. Handles both negative and positive integers. str_n = str(n) if n < 0: return int('-' + str_n[:0:-1]) else: return int(str_n[::-1])"},{"question":"Create a function that converts a decimal number to its binary representation, but with a twist: the resulting binary string should be reversed. How would you approach this problem?","solution":"def decimal_to_reversed_binary(n): Converts a decimal number n to its binary representation and returns the reversed string. if n == 0: return '0' # Convert decimal to binary and remove the '0b' prefix binary_str = bin(n)[2:] # Reverse the binary string reversed_binary_str = binary_str[::-1] return reversed_binary_str"},{"question":"Create a function that , given a string, returns a dictionary where each character in the string is a key and the number of occurrences of that character is the value.","solution":"def character_frequency(s): Returns a dictionary with the count of each character in the input string s. freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Create a function that takes a list as an input and returns the most frequently occurring element in the list. If there is a tie, return all the elements that are tied for the highest frequency.","solution":"from collections import Counter def most_frequent_elements(lst): Returns the most frequently occurring element(s) in the list. If there is a tie, returns a list of all elements that are tied for the highest frequency. if not lst: return [] count = Counter(lst) max_freq = max(count.values()) return [key for key, value in count.items() if value == max_freq]"},{"question":"Create a function that takes an array of numbers and returns the highest number in the array. Additionally, make sure to handle the case when the array is empty.","solution":"def find_highest_number(arr): Returns the highest number in the array. If the array is empty, return None. if not arr: return None return max(arr)"},{"question":"Create a function that takes a list of integers and prints each integer in reverse order. How would you accomplish this in Python?","solution":"def print_reversed_integers(nums): Takes a list of integers and prints each integer in reverse order. for num in nums: reversed_num = int(str(num)[::-1]) if num >= 0 else -int(str(-num)[::-1]) print(reversed_num)"},{"question":"Create a function that takes two strings, str1 and str2. The function should checks if str1 can be transformed into str2 by deleting zero or more characters from str1. In other words, it should check if str1 is a subsequence of str2. If yes, return True. Otherwise, return False.","solution":"def is_subsequence(str1, str2): Determines if str1 can be transformed into str2 by deleting zero or more characters from str1. In other words, checks if str1 is a subsequence of str2. Parameters: str1 (str): The string to be transformed. str2 (str): The target string that str1 should be a subsequence of. Returns: bool: True if str1 is a subsequence of str2, False otherwise. it = iter(str2) return all(char in it for char in str1)"},{"question":"Create a function that takes a string as input and returns a new string where every second character is removed.","solution":"def remove_every_second_char(input_string): Returns a new string where every second character of the input string is removed. return input_string[::2]"},{"question":"Create a function that checks if a word or phrase is a palindrome (reads the same backward as forward), ignoring spaces and punctuation. For example, \\"A man, a plan, a canal, Panama\\" is a palindrome ignoring spaces and punctuation.","solution":"import string def is_palindrome(phrase): Check if the given word or phrase is a palindrome, ignoring spaces and punctuation. # Normalize the phrase by removing punctuation and spaces, and converting to lowercase normalized = ''.join(char.lower() for char in phrase if char.isalnum()) # Check if the normalized phrase is the same forwards and backwards return normalized == normalized[::-1]"},{"question":"Create a function that checks if a number is prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Here is the initial code, but it has issues that need to be fixed.","solution":"def is_prime(n): Checks if a number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that takes an array of integers as input and returns the product of all positive numbers in the array. If the array does not contain any positive numbers, the function should return 0.","solution":"def product_of_positives(arr): Returns the product of all positive numbers in the array. If there are no positive numbers, return 0. product = 1 has_positive = False for num in arr: if num > 0: product *= num has_positive = True return product if has_positive else 0"},{"question":"Create a function that takes two arrays of numbers \`arr1\` and \`arr2\` and returns a new array containing the intersection of both arrays. The intersection should only include numbers that appear exactly once in each array. The function should be efficient and handle large arrays.","solution":"def intersection_single_occurrence(arr1, arr2): Returns an array containing the intersection of arr1 and arr2, including only numbers that appear exactly once in each array. from collections import Counter count1 = Counter(arr1) count2 = Counter(arr2) result = [] for num in count1: if count1[num] == 1 and count2[num] == 1: result.append(num) return result"},{"question":"Create a function that takes a list of integers as input and returns a new list where all zero values are replaced with a space character.","solution":"def replace_zeros_with_space(lst): Takes a list of integers and returns a new list where all zero values are replaced with a space character. return [' ' if x == 0 else x for x in lst]"},{"question":"Create a function that takes in an integer, n, and returns a binary string representation of that number. The binary string should be the shortest possible, not padded with extra zeros.","solution":"def int_to_binary_string(n): Converts an integer to its binary string representation without extra padding. Parameters: n (int): The integer to convert. Returns: str: The binary string representation of the integer. if n == 0: return \\"0\\" return bin(n)[2:]"},{"question":"Create a function that calculates the factorial of a given number using recursion. Then, implement it in a program that takes an integer as input and prints the factorial of that number. If the input is negative, the program should print an error message.","solution":"def factorial(n): Calculate the factorial of a given number using recursion. if n < 0: return \\"Error: Negative numbers do not have factorials.\\" elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that solves the quadratic equation ax^2 + bx + c = 0, considering complex solutions as well. Your function should return the roots of the equation in a tuple.","solution":"import cmath def solve_quadratic(a, b, c): Solves the quadratic equation ax^2 + bx + c = 0, considering complex solutions. Returns the roots as a tuple. # Calculate the discriminant discriminant = cmath.sqrt(b**2 - 4*a*c) # Calculate two solutions root1 = (-b + discriminant) / (2*a) root2 = (-b - discriminant) / (2*a) return (root1, root2)"},{"question":"Create a function that takes a string as input and returns the string in reverse order. For example, if the input string is \\"Hello, world!\\", the output should be \\"!dlrow ,olleH\\".","solution":"def reverse_string(s): Returns the input string s in reverse order. return s[::-1]"},{"question":"Create a function that checks if a given string is a permutation of a palindrome. A palindrome is a word or phrase that reads the same backward as forward. A permutation is a rearrangement of the letters in a word or phrase. For example, \\"civic\\" is a permutation of palindrome. Note that spaces and characters are considered. The function should return True if the string is a permutation of a palindrome, and False otherwise.","solution":"def is_permutation_of_palindrome(s): Check if the given string is a permutation of a palindrome. from collections import Counter s = s.replace(\\" \\", \\"\\").lower() counts = Counter(s) odd_count = 0 for count in counts.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: return False return True"},{"question":"Create a function that takes an array of integers and returns an array of integers where every element at a certain index in the original array is replaced by the minimum value of all numbers before that index (not including the current index itself). For example, given the array [4, 2, 5, 1, 3], the function should return [0, 0, 2, 1, 1].","solution":"def replace_with_min(arr): Replaces each element in the array with the minimum value of all numbers before that index. Parameters: arr (list of int): The input array of integers. Returns: list of int: The resulting array after replacing each element. if not arr: return arr result = [0] * len(arr) current_min = float('inf') for i in range(1, len(arr)): current_min = min(current_min, arr[i-1]) result[i] = current_min return result"},{"question":"Create a function that takes an integer as input and returns the binary representation of that integer. The function should handle both positive and negative integers, converting them to their respective binary representations. If the input is 0, the function should return \\"0\\". Additionally, the function should handle large integers efficiently.","solution":"def int_to_binary(n): Returns the binary representation of an integer. Handles both positive and negative integers. if n == 0: return \\"0\\" elif n > 0: return bin(n)[2:] else: return bin(n)[3:]"},{"question":"Create a function that checks whether the sum of all digits in a given string is divisible by 3.","solution":"def is_sum_of_digits_divisible_by_3(s): Checks whether the sum of all digits in the given string s is divisible by 3. total_sum = sum(int(char) for char in s if char.isdigit()) return total_sum % 3 == 0"},{"question":"Create a function that takes two lists as input and returns True if the two lists are permutations of each other and False otherwise. A permutation is a rearrangement of elements.","solution":"def are_permutations(list1, list2): Returns True if list1 and list2 are permutations of each other, False otherwise. if len(list1) != len(list2): return False return sorted(list1) == sorted(list2)"},{"question":"Create a function that takes a string \`s\` as input and returns the count of unique characters in \`s\`. The function should ignore case sensitivity and whitespace.","solution":"def count_unique_characters(s): Returns the count of unique characters in the string \`s\`. The function ignores case sensitivity and whitespace. # Normalize the string to lowercase and remove whitespace normalized_string = s.replace(\\" \\", \\"\\").lower() # Create a set to track unique characters unique_characters = set(normalized_string) # Return the count of unique characters in the set return len(unique_characters)"},{"question":"Create a function that calculates the n-th Fibonacci number in a list. Given the list \`[0, 1]\`, calculate the n-th Fibonacci number using the iterative approach.","solution":"def fibonacci(n): Calculate the n-th Fibonacci number iteratively and return it. :param n: int, the position of the Fibonacci number to calculate. :return: int, the n-th Fibonacci number. if n == 0: return 0 elif n == 1: return 1 fib_list = [0, 1] for i in range(2, n + 1): next_fib = fib_list[-1] + fib_list[-2] fib_list.append(next_fib) return fib_list[n]"},{"question":"Create a function that can convert a binary string to an integer using bitwise operations.","solution":"def binary_to_int(binary_str): Convert a binary string to an integer using bitwise operations. Parameters: binary_str (str): A string containing binary digits. Returns: int: The integer representation of the binary string. result = 0 for char in binary_str: result = (result << 1) | int(char) return result"},{"question":"Create a function that prints out a binary representation of an integer \`n\` that's less than 256. For example, if \`n=5\`, the output should be \\"00101\\". If \`n=255\`, the output should be \\"11111111\\". If \`n\` is negative, your function should return \\"Invalid\\".","solution":"def binary_representation(n): Returns the binary representation of an integer n that is less than 256. If n is negative, returns \\"Invalid\\". if n < 0: return \\"Invalid\\" binary_str = bin(n)[2:] # Convert to binary and remove the \\"0b\\" prefix return binary_str.zfill(8)"},{"question":"Create a function that takes an integer list of numbers and returns a list of stored numbers where zero has been replaced with the next non-zero number from the list. If there is no non-zero number after a zero, then the zero should remain zero.","solution":"def replace_zero_with_next_nonzero(lst): Replaces zeros in the list with the next non-zero number. If there is no non-zero number after the zero, it remains zero. Args: lst (list of int): The list of integers. Returns: list of int: The list with zeros replaced by the next non-zero number. result = lst[:] for i in range(len(result)): if result[i] == 0: for j in range(i + 1, len(result)): if result[j] != 0: result[i] = result[j] break return result"},{"question":"Create a function that accepts a list of integers and returns the total number of even and odd numbers in the list, along with the sum of even and odd numbers separately.","solution":"def count_and_sum_even_odd(numbers): Returns a tuple containing the count of even numbers, the count of odd numbers, the sum of even numbers, and the sum of odd numbers in the provided list of integers. :param numbers: List of integers :return: Tuple (count_even, count_odd, sum_even, sum_odd) count_even, count_odd = 0, 0 sum_even, sum_odd = 0, 0 for number in numbers: if number % 2 == 0: count_even += 1 sum_even += number else: count_odd += 1 sum_odd += number return count_even, count_odd, sum_even, sum_odd"},{"question":"Create a function that checks if a given string is a palindrome. A palindrome is a string that reads the same backward as forward.例如，\\"madam\\" or \\"racecar\\". Your function should return \`true\` if the string is a palindrome, otherwise \`false\`. Test your function with a few examples.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, otherwise False. # Strip non-alphanumeric characters and convert to lowercase for a case insensitive check filtered_s = ''.join(char.lower() for char in s if char.isalnum()) return filtered_s == filtered_s[::-1]"},{"question":"Create a function that takes a string and returns the string with all lowercase letters converted to uppercase and vice versa. I am using Python language. To clarify, the function should swap the case of each character in the string.","solution":"def swap_case(s): Returns the string with all lowercase letters converted to uppercase and vice versa. return s.swapcase()"},{"question":"Create a function that accepts an integer \`num\` as a parameter and, for every value of \`i\` from 1 to \`num\`, print a line that contains \`i\` asterisks.","solution":"def print_asterisks(num): Given an integer num, print lines containing i asterisks for every i from 1 to num. :param num: An integer representing the number of lines to print for i in range(1, num + 1): print('*' * i)"},{"question":"Create a function that calculates the total amount of paid taxes based on the income and applicable tax rates.","solution":"def calculate_taxes(income, tax_rates): Calculate the total amount of paid taxes based on the income and applicable tax rates. :param income: The total income. :param tax_rates: A list of tuples where each tuple contains the upper limit of income for that rate and the tax rate in percentage. E.g., [(10_000, 10), (20_000, 15), (None, 20)] means: - 10% for income up to 10,000 - 15% for income between 10,001 and 20,000 - 20% for income above 20,000 Note: The list should be sorted by income limits in ascending order. :return: The total amount of paid taxes. taxes = 0 previous_limit = 0 for limit, rate in tax_rates: if limit is None or income <= limit: taxes += (income - previous_limit) * (rate / 100) break else: taxes += (limit - previous_limit) * (rate / 100) previous_limit = limit return taxes"},{"question":"Create a function that takes an integer as an input and returns the sum of all even numbers between 1 and the given integer, including the integer if it is even. The function should also handle negative numbers by returning an error message.","solution":"def sum_of_evens(n): Returns the sum of all even numbers between 1 and n, inclusive. If n is negative, returns an error message. if n < 1: return \\"Error: Input should be a positive integer.\\" return sum(i for i in range(1, n+1) if i % 2 == 0)"},{"question":"Create a function that converts a binary string to an integer. For example, \\"1111\\" should be converted to 15 in decimal.","solution":"def binary_to_int(binary_str): Converts a binary string to an integer. Parameters: binary_str (str): A string containing a binary number (e.g. \\"1111\\"). Returns: int: The decimal representation of the binary number. return int(binary_str, 2)"},{"question":"Create a function that takes in a list of strings and a target string and returns whether the target string is present in the list of strings.","solution":"def is_target_in_list(string_list, target): Returns True if target is in string_list, otherwise False. Args: string_list (list of str): List of strings to search through. target (str): Target string to find in the list. Returns: bool: True if target is found in string_list, False otherwise. return target in string_list"},{"question":"Create a function that accepts a string and returns a dictionary where each key is a unique character from the string (ignoring case and spaces), and the value is the frequency of that character in the string. The function should handle both uppercase and lowercase letters as the same key. For example, 'A' and 'a' should both be lowercased and counted together as 'a'.","solution":"def character_frequency(s: str) -> dict: Returns a dictionary where each key is a unique character (ignoring case and spaces) from the string, and the value is the frequency of that character in the string. :param s: Input string :return: Dictionary with character frequencies frequency = {} for char in s.lower(): if char != ' ': if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function that will not return anything (void) that returns the square root of a number by using the bisection method for a given interval [a, b] and a precision of e.","solution":"def bisection_sqrt(a, b, e, n): Uses the bisection method to find the square root of n within the interval [a, b] with precision e. :param a: The lower bound of the interval :param b: The upper bound of the interval :param e: The desired precision :param n: The number for which the square root is being calculated while (b - a) >= e: mid = (a + b) / 2 if mid**2 > n: b = mid else: a = mid return (a + b) / 2"},{"question":"Create a function that takes an array of integers, sorts it in descending order, and then computes the sum of all elements.","solution":"def sort_and_sum(arr): Takes an array of integers, sorts it in descending order, and then computes the sum of all elements. Parameters: arr (list of int): The array of integers to be processed. Returns: int: The sum of the elements in the sorted array. sorted_arr = sorted(arr, reverse=True) return sum(sorted_arr)"},{"question":"Create a function that generates a list of Fibonacci numbers up to and including a given number n. The list should not contain the number 0, and the sequence should start with 1.","solution":"def generate_fibonacci_up_to(n): Generates a list of Fibonacci numbers up to and including n. The sequence starts with 1 and should not contain the number 0. if n < 1: return [] fibonacci_sequence = [1, 1] while True: next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2] if next_number > n: break fibonacci_sequence.append(next_number) return fibonacci_sequence"},{"question":"Create a function that takes a list of integers and returns a new list with each element incremented by 1. For example, if the input list is [1, 2, 3], the function should return [2, 3, 4].","solution":"def increment_elements(lst): Takes a list of integers and returns a new list with each element incremented by 1. :param lst: List of integers :return: New list of integers with each element incremented by 1 return [x + 1 for x in lst]"},{"question":"Create a function that takes two numbers as input. The function’s job is to find the sum of odd numbers between them both, but in reverse order (i.e., starting from the larger number and moving down to the smaller one). If the first number is greater than the second number, swap them. If one of the numbers is even, skip it, and only consider odd numbers in your sum.","solution":"def sum_of_odd_numbers_in_reverse(num1, num2): Returns the sum of odd numbers between num1 and num2 in reverse order. If num1 is greater than num2, they are swapped. Only considers odd numbers. if num1 > num2: num1, num2 = num2, num1 sum_odd_numbers = 0 for number in range(num2, num1 - 1, -1): if number % 2 != 0: sum_odd_numbers += number return sum_odd_numbers"},{"question":"Create a function that will find the maximum element in a list of numbers in Python. You can use built-in functions, but your solution should not use the \`max()\` function.","solution":"def find_maximum(nums): Returns the maximum element in a list of numbers. if not nums: raise ValueError(\\"The input list cannot be empty\\") maximum = nums[0] for num in nums[1:]: if num > maximum: maximum = num return maximum"},{"question":"Create a function that accepts an array of integers as an argument in Python. The function will then return the largest sum of any contiguous subarray within the given array.","solution":"def max_subarray_sum(nums): Returns the largest sum of any contiguous subarray within the given array. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that takes an array of integers as input and returns the frequency of each integer in the array.","solution":"def frequency_counter(arr): Returns a dictionary with the frequency of each integer in the array. Parameters: arr (list): A list of integers. Returns: dict: A dictionary where keys are integers from the array and values are their frequencies. freq_dict = {} for number in arr: if number in freq_dict: freq_dict[number] += 1 else: freq_dict[number] = 1 return freq_dict"},{"question":"Create a function that generates a random debería question in Spanish for learning purposes. The function should take three parameters: the subject area (e.g., \\"food\\", \\"animals\\"), the level of difficulty (e.g., \\"easy\\", \\"medium\\", \\"hard\\"), and an optional parameter to output the translation (e.g., in English). The function should return both the Spanish question and the translation if the parameter is provided.","solution":"import random def generate_deberia_question(subject_area, difficulty, translate_to_english=True): Generates a random 'debería' question in Spanish based on the specified subject area and difficulty. Parameters: - subject_area (str): The subject area to base the question on (e.g., \\"food\\", \\"animals\\"). - difficulty (str): The level of difficulty of the question (e.g., \\"easy\\", \\"medium\\", \\"hard\\"). - translate_to_english (bool): If True, the function will return the question's translation in English. Returns: - tuple: A tuple containing the Spanish question and optionally the English translation. questions = { \\"food\\": { \\"easy\\": [ (\\"¿Cuál debería ser tu comida favorita?\\", \\"What should be your favorite food?\\"), (\\"¿Qué deberías comer para el desayuno?\\", \\"What should you eat for breakfast?\\") ], \\"medium\\": [ (\\"¿Qué deberías cocinar para la cena?\\", \\"What should you cook for dinner?\\"), (\\"¿Qué fruta deberías comer más a menudo?\\", \\"What fruit should you eat more often?\\") ], \\"hard\\": [ (\\"¿Deberías aprender a preparar comidas internacionales?\\", \\"Should you learn to prepare international meals?\\"), (\\"¿Qué dieta deberías seguir para mejorar tu salud?\\", \\"What diet should you follow to improve your health?\\") ] }, \\"animals\\": { \\"easy\\": [ (\\"¿Qué animal deberías tener como mascota?\\", \\"What animal should you have as a pet?\\"), (\\"¿Qué animal deberías visitar en el zoológico?\\", \\"What animal should you visit at the zoo?\\") ], \\"medium\\": [ (\\"¿Qué animales deberías proteger?\\", \\"What animals should you protect?\\"), (\\"¿Deberías adoptar un gato o un perro?\\", \\"Should you adopt a cat or a dog?\\") ], \\"hard\\": [ (\\"¿Cómo deberías ayudar a los animales en peligro de extinción?\\", \\"How should you help endangered animals?\\"), (\\"¿Qué deberías hacer para apoyar la vida silvestre?\\", \\"What should you do to support wildlife?\\") ] } } if subject_area not in questions or difficulty not in questions[subject_area]: raise ValueError(\\"Unsupported subject area or difficulty level.\\") question_set = questions[subject_area][difficulty] chosen_question, translation = random.choice(question_set) if translate_to_english: return chosen_question, translation else: return chosen_question, None"},{"question":"Create a function that detects if a given string consists solely of characters from a single Unicode block. A Unicode block is a group of related characters used in writing systems like scripts, punctuation, and symbols.","solution":"import unicodedata def is_single_unicode_block(string): Detects if the given string consists solely of characters from a single Unicode block. Parameters: string (str): The input string to check. Returns: bool: True if all characters in the string belong to the same Unicode block, False otherwise. blocks = set() for char in string: block_name = unicodedata.name(char).split()[0] blocks.add(block_name) if len(blocks) > 1: return False return True"},{"question":"Create a function that takes an array of strings and returns the string that appears most frequently in the array. If there is more than one string that appears most frequently, return the first one encountered in the array. If the array is empty, return an empty string.","solution":"def most_frequent_string(arr): Returns the string that appears most frequently in the array. If more than one string appears most frequently, returns the first one encountered in the array. If the array is empty, returns an empty string. if not arr: return \\"\\" from collections import Counter counter = Counter(arr) max_count = max(counter.values()) for string in arr: if counter[string] == max_count: return string"},{"question":"Create a function that takes a list of tuples, each containing two integers. The function should return a list of tuples, where each tuple contains the sum of the integers in the corresponding input tuple.","solution":"def sum_tuples(tuple_list): Given a list of tuples, each containing exactly two integers, return a list of tuples where each tuple contains the sum of the integers from the corresponding input tuple. Parameters: tuple_list (list): A list of tuples, each containing two integers. Returns: list: A list of tuples containing the sums. return [(a + b,) for a, b in tuple_list]"},{"question":"Create a function that takes a list of integers as an argument and returns the smallest integer in the list. The function should handle an empty list gracefully by returning \`None\`.","solution":"def find_smallest_integer(nums): Returns the smallest integer in the list \`nums\`. If the list is empty, returns None. if not nums: return None return min(nums)"},{"question":"Create a function that counts the occurrences of a substring within a given string.","solution":"def count_substring_occurrences(main_string, substring): Returns the number of occurrences of a substring in the main string. Parameters: main_string (str) : The string in which to search for the substring. substring (str) : The substring to search for. Returns: int: The number of occurrences of the substring in the main string. return main_string.count(substring)"},{"question":"Create a function that converts a given number into its Roman numeral equivalent.","solution":"def int_to_roman(num): Converts a given number into its Roman numeral equivalent. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Create a function that takes an array of integers and returns an array of the indices of the elements that appear more than once in the input array. If there are no duplicates, the function should return an empty array. Ensure your function is case-sensitive and preserves the order of the first occurrence of the duplicates.","solution":"def find_duplicate_indices(arr): Returns an array of the indices of the elements that appear more than once in the input array. If there are no duplicates, the function returns an empty array. element_count = {} duplicate_indices = [] for index, element in enumerate(arr): if element in element_count: element_count[element] += 1 if element_count[element] == 2: # Only record the index the first time a duplicate is detected duplicate_indices.append(index) else: element_count[element] = 1 return duplicate_indices"},{"question":"Create a function that takes an integer n. If n is even or less than or equal to zero, the function should return n/2. If n is odd and greater than zero, the function should return 3n + 1. Implement this in Python.","solution":"def process_number(n): Takes an integer n. If n is even or less than or equal to zero, returns n/2. If n is odd and greater than zero, returns 3n + 1. if n <= 0 or n % 2 == 0: return n / 2 else: return 3 * n + 1"},{"question":"Create a function that takes a list of numbers and a target number. The function should return the indices of all occurrences of the target number in the list.","solution":"def find_indices(lst, target): Returns a list of indices where the target number is found in the input list. return [index for index, value in enumerate(lst) if value == target]"},{"question":"Create a function that transforms an array into a dictionary in Python. The function should take an array where each element is a list or tuple, and each list or tuple has exactly two elements. The function should return a dictionary where the first element of each list or tuple becomes the key and the second element becomes the value.","solution":"def array_to_dict(array): Transforms an array of lists or tuples into a dictionary. Args: array : list Each element is a list or tuple with exactly two elements. Returns: dict A dictionary where the first element of each list/tuple becomes the key and the second element becomes the value. return {key: value for key, value in array}"},{"question":"Create a function that takes a list of strings and returns the shortest substring that contains all the strings in the list. The function should consider overlapping substrings. If there are no strings in the list, consider the substring as an empty string.","solution":"def shortest_common_superstring(words): from itertools import permutations def overlap(a, b): max_overlap = 0 # Find the maximum overlap between suffix of \`a\` and prefix of \`b\` for i in range(1, min(len(a), len(b)) + 1): if a[-i:] == b[:i]: max_overlap = i return max_overlap def merge(a, b, overlap_length): return a + b[overlap_length:] if not words: return \\"\\" best_superstring = None for perm in permutations(words): current_superstring = perm[0] for i in range(1, len(perm)): ov = overlap(current_superstring, perm[i]) current_superstring = merge(current_superstring, perm[i], ov) if best_superstring is None or len(current_superstring) < len(best_superstring): best_superstring = current_superstring return best_superstring"},{"question":"Create a function that finds the closest number to a given target number in an array of numbers. If there are multiple closest numbers, return all of them. The array may contain both positive and negative numbers, and may be unsorted.","solution":"def find_closest_numbers(arr, target): Finds the closest number(s) to a given target number in an array of numbers. If there are multiple closest numbers, returns all of them. Parameters: arr (list): List of numbers (unsorted, could be positive or negative) target (int): The target number Returns: list: List of closest number(s) to the target if not arr: return [] min_diff = float('inf') closest_numbers = [] for number in arr: diff = abs(number - target) if diff < min_diff: min_diff = diff closest_numbers = [number] elif diff == min_diff: closest_numbers.append(number) return closest_numbers"},{"question":"Create a function that converts a given integer to its hexadecimal representation as a string in Python.","solution":"def int_to_hex(n): Converts a given integer to its hexadecimal representation as a string. if n < 0: return '-' + hex(n)[3:] # hex(n) includes '0x' prefix, skip the negative sign for correct format return hex(n)[2:] # hex(n) includes '0x' prefix which we skip # Example Usage print(int_to_hex(255)) # 'ff' print(int_to_hex(-255)) # '-ff'"},{"question":"Create a function that generates 50 random integers between 1 and 2000. Sort these integers in ascending order and then find the median of the sorted list.","solution":"import random def generate_and_find_median(): Generates 50 random integers between 1 and 2000, sorts them in ascending order, and returns the median. random_numbers = [random.randint(1, 2000) for _ in range(50)] sorted_numbers = sorted(random_numbers) mid_index = len(sorted_numbers) // 2 median = (sorted_numbers[mid_index - 1] + sorted_numbers[mid_index]) / 2 return median"},{"question":"Create a function that takes two integers as input, compute their sum, and return the sum as an output.","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Create a function that takes two integer strings as input and returns the string after concatenating them in a specific order based on their values. If the first string represents a number less than the second string, append the first string to the end of the second string. If the second string is less than the first, append the second string to the end of the first string. If the strings have the same value, return an empty string.","solution":"def concatenate_based_on_value(str1, str2): Concatenates two integer strings based on their integer values. If str1 < str2, append str1 to the end of str2. If str2 < str1, append str2 to the end of str1. If str1 == str2, return an empty string. if int(str1) < int(str2): return str2 + str1 elif int(str2) < int(str1): return str1 + str2 else: return \\"\\""},{"question":"Create a function that checks if a given string starts with a vowel or not. The function should return true if the string starts with a vowel, and false otherwise.","solution":"def starts_with_vowel(s): Checks if the given string starts with a vowel (a, e, i, o, u). Parameters: s (str): The string to check. Returns: bool: True if the string starts with a vowel, False otherwise. if not s: return False return s[0].lower() in 'aeiou'"},{"question":"Create a function that identifies whether a given integer is a prime number. A prime number is a number that has exactly two distinct positive divisors: 1 and itself. Write a function \`is_prime\` that takes an integer as input and returns \`True\` if the number is prime, and \`False\` otherwise.","solution":"def is_prime(n): Check if an integer n is a prime number. Parameters: n (int): The integer to be checked. Returns: bool: True if n is prime, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that returns the longest list from the input list of lists. If there are multiple lists of the same maximum length, return all of them. For example, given the input \`[[1, 2, 3], [4, 5], [6, 7, 8], [1]]\`, the function should return \`[[6, 7, 8]]\`.","solution":"def longest_lists(lists): Returns the longest list(s) from the input list of lists. If there are multiple lists of the same maximum length, return all of them in a list. :param lists: List of lists to be processed :return: List of the longest list(s) if not lists: return [] max_length = max(len(lst) for lst in lists) return [lst for lst in lists if len(lst) == max_length]"},{"question":"Create a function that checks the number of vowels in a given string. A vowel is either 'a', 'e', 'i', 'o', or 'u'. For simplicity, let's consider both lowercase and uppercase vowels.","solution":"def count_vowels(s): Returns the number of vowels in the given string. Vowels considered are 'a', 'e', 'i', 'o', 'u' and their uppercase counterparts. vowels = set('aeiouAEIOU') return sum(1 for char in s if char in vowels)"},{"question":"Create a function that converts a given string in snake_case to PascalCase using C#. Speed up the conversion process using multithreading in C#.","solution":"import re from multiprocessing import Pool def convert_snake_to_pascal(snake_str): Converts a given snake_case string to PascalCase. # Splitting by underscores and capitalizing each word. components = snake_str.split('_') pascal_str = ''.join(x.capitalize() for x in components) return pascal_str def multithread_convert_snake_to_pascal(snake_strings): Uses multithreading to convert a list of snake_case strings to PascalCase. with Pool() as pool: result = pool.map(convert_snake_to_pascal, snake_strings) return result"},{"question":"Create a function that takes in two parameters: a list of numbers and a target number. The function should return a tuple containing the index of the first occurrence of the target number in the list and the count of occurrences of the target number in the list.","solution":"def find_target_info(numbers, target): Returns a tuple containing the index of the first occurrence of the target number in the list and the count of occurrences of the target number in the list. :param numbers: List of numbers :param target: Target number to find in the list :return: Tuple (index of first occurrence, count of occurrences) first_index = -1 count = 0 for index, num in enumerate(numbers): if num == target: count += 1 if first_index == -1: first_index = index return first_index, count"},{"question":"Create a function that takes a vector of integers and returns a new vector of integers that contains only the even elements from the original vector.","solution":"def filter_even_elements(vector): Returns a new list of integers containing only the even elements from the original vector. return [x for x in vector if x % 2 == 0]"},{"question":"Create a function that takes two arguments: \`value\`, \`bits\`, and returns the least common multiple (LCM) of these as an integer. You can ignore the sign of the number for this computation. The function should handle both positive and negative integers.","solution":"def gcd(a, b): Helper function to return the greatest common divisor (GCD) of a and b using the Euclidean algorithm. while b: a, b = b, a % b return a def lcm(value, bits): Returns the least common multiple (LCM) of value and bits. value = abs(value) bits = abs(bits) return (value * bits) // gcd(value, bits)"},{"question":"Create a function that takes in a list of integers and returns the maximum sum of a contiguous subsequence. This is also known as Kadane's Algorithm.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subsequence in the list of integers. Implements Kadane's Algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that can parse a given string argument and return the first word of that string.","solution":"def first_word(s): Returns the first word in the given string s. if not s: return \\"\\" return s.split()[0] if s.split() else \\"\\""},{"question":"Create a function that takes a string, swaps the cases of all the letters, and reverses the order of the words in the string.","solution":"def swap_and_reverse(input_string): Swaps the cases of all the letters and reverses the order of the words in the input string. Args: input_string (str): The input string. Returns: str: The string with cases swapped and words order reversed. swapped_string = input_string.swapcase() reversed_words = ' '.join(swapped_string.split()[::-1]) return reversed_words"},{"question":"Create a function that takes a string s and returns the number of unique substrings of s. A substring is a contiguous sequence of characters within a string. For example, the string \\"abc\\" has the substrings \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\".","solution":"def unique_substrings(s): Returns the number of unique substrings of the input string s. substrings_set = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): substrings_set.add(s[i:j]) return len(substrings_set)"},{"question":"Create a function that takes a list of integers as input and returns a new list containing the squares of the original numbers. The function should also handle negative numbers and return their squares.","solution":"def square_list(numbers): Returns a new list containing the squares of the original numbers. Args: numbers (list of int): The list of integers to square. Returns: list of int: A list containing the squares of the original numbers. return [num ** 2 for num in numbers]"},{"question":"Create a function that returns the middle element of a list. If the list length is even, return the average of the two middle elements. If the list length is odd, return the middle element directly.","solution":"def middle_element(lst): Returns the middle element of a list. If the list length is even, return the average of the two middle elements. If the list length is odd, return the middle element directly. n = len(lst) if n == 0: raise ValueError(\\"List is empty\\") mid_index = n // 2 if n % 2 == 1: # If odd return lst[mid_index] else: # If even return (lst[mid_index - 1] + lst[mid_index]) / 2"},{"question":"Create a function that takes a variable number of arguments and returns the sum of all odd numbers.","solution":"def sum_of_odds(*args): Returns the sum of all odd numbers from the given arguments. return sum(num for num in args if num % 2 != 0)"},{"question":"Create a function that takes a string and returns the string with all spaces removed and all letters converted to lowercase. Here's an example of output for a given string \\"Hello, World!\\": it should return \\"helloworld\\".","solution":"def remove_spaces_and_lowercase(text): Removes all spaces from the given string and converts all letters to lowercase. Args: text (str): The input string. Returns: str: The resulting string with no spaces and all letters in lowercase. return ''.join(text.split()).lower()"},{"question":"Create a function that identifies if a given string has all unique characters. How can you implement this using a Python data structure?","solution":"def has_unique_characters(s): Determines if the given string has all unique characters. :param s: str: The input string to check for uniqueness. :return: bool: Returns True if all characters in the string are unique, otherwise False. return len(set(s)) == len(s)"},{"question":"Create a function that takes a list of numbers as an argument and returns the median of those numbers. The function should be able to sort the numbers, find the middle point, and return the middle number if the total number of numbers is odd. If the total number of numbers is even, the function should return the average of the two middle numbers.","solution":"def median(numbers): Returns the median of the given list of numbers. :param numbers: List of numbers :type numbers: list :return: Median of the list of numbers :rtype: float if not numbers: raise ValueError(\\"The list of numbers is empty\\") numbers = sorted(numbers) n = len(numbers) mid = n // 2 if n % 2 == 1: return numbers[mid] else: return (numbers[mid - 1] + numbers[mid]) / 2"},{"question":"Create a function that processes a sequence of numbers using Python","solution":"def process_numbers(numbers): Takes a list of numbers and returns a dictionary with the count of positive, negative, and zero numbers. Params: numbers (list): list of numbers Returns: dict: dictionary with keys 'positive', 'negative', and 'zero' with respective counts counts = { 'positive': 0, 'negative': 0, 'zero': 0 } for number in numbers: if number > 0: counts['positive'] += 1 elif number < 0: counts['negative'] += 1 else: counts['zero'] += 1 return counts"},{"question":"Create a function that returns the most frequent letter in a string. If there are if multiple letters with the same highest frequency, return any one of them. You can assume that the input string will only contain lowercase English letters. If the string is empty, return an empty string.","solution":"def most_frequent_letter(s): Returns the most frequent letter in the string s. If there are multiple letters with the same highest frequency, returns any one of them. If the string is empty, returns an empty string. if not s: return \\"\\" from collections import Counter letter_counts = Counter(s) most_common_letter = max(letter_counts, key=letter_counts.get) return most_common_letter"},{"question":"Create a function that takes an integer \`n\` and returns an array containing the first \`n\` Fibonacci numbers. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones (i.e., 0, 1, 1, 2, 3, 5, 8, ...).","solution":"def fibonacci_sequence(n): Returns a list containing the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_seq = [0, 1] for i in range(2, n): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Create a function that takes two parameters, \`base\` and \`exponent\`, and returns the result of \`base\` raised to the power of \`exponent\`.","solution":"def power(base, exponent): Returns the base raised to the power of the exponent. return base ** exponent"},{"question":"Create a function that calculates the sum of the squares of the differences between paired elements from two arrays, ignoring any outliers where the difference between the paired elements is greater than 10.","solution":"def sum_of_squares_of_differences(arr1, arr2): Calculates the sum of the squares of the differences between paired elements from two arrays, ignoring any outliers where the difference between the paired elements is greater than 10. Parameters: arr1 (list): First array of numbers arr2 (list): Second array of numbers Returns: int: Sum of the squares of the differences if len(arr1) != len(arr2): raise ValueError(\\"The arrays must have the same length\\") sum_squares = 0 for a, b in zip(arr1, arr2): diff = abs(a - b) if diff <= 10: sum_squares += diff ** 2 return sum_squares"},{"question":"Create a function that takes a list of strings as an input and returns a list of the longest common prefixes at all levels. For example, if the input is \`[\\"flower\\",\\"flow\\",\\"flight\\"]\`, the output should be \`[\\"fl\\", \\"fl\\", \\"fl\\"]\`. If the input is \`[\\"dog\\",\\"racecar\\",\\"car\\"]\`, the output should be \`[\\"d\\"]\`, since there is no common prefix across all levels.","solution":"def longest_common_prefix_at_all_levels(strs): Returns the longest common prefixes at all levels of each string in the input list. if not strs: return [] def common_prefix(strs, length): prefix = strs[0][:length] for s in strs: if not s.startswith(prefix): return False return True min_length = min(len(s) for s in strs) prefix = \\"\\" result = [] for i in range(min_length): if common_prefix(strs, i + 1): prefix += strs[0][i] result.append(prefix) else: break return result"},{"question":"Create a function that takes a string as a parameter and returns the number of words in the string. Words are considered to be separated by whitespace.","solution":"def count_words(input_string): Returns the number of words in the input string. Words are considered to be separated by whitespace. if not input_string.strip(): return 0 return len(input_string.split())"},{"question":"Create a function that takes in a 2D list (matrix) of integers and returns the sum of all the integers in the matrix.","solution":"def matrix_sum(matrix): Returns the sum of all integers in a 2D list (matrix). :param matrix: List of lists of integers :return: Integer sum of all elements in the matrix total = 0 for row in matrix: total += sum(row) return total"},{"question":"Create a function that checks if a given number is a perfect square. If it is a perfect square, return \`True\`, otherwise return \`False\`.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, otherwise returns False. if n < 0: return False root = int(math.sqrt(n)) return n == root * root"},{"question":"Create a function that takes a list of strings as an argument and returns a list of those strings sorted in alphabetical order.","solution":"def sort_strings(strings): Returns a list of strings sorted in alphabetical order. return sorted(strings)"},{"question":"Create a function that takes a string as input and returns a string where the first and last characters have been swapped.","solution":"def swap_first_last_char(s): Swaps the first and last characters of the input string. Args: s (str): The input string. Returns: str: The string with its first and last characters swapped. if len(s) < 2: return s return s[-1] + s[1:-1] + s[0]"},{"question":"Create a function that will sort a list of strings alphabetically, but only if all strings in the list are alphabets. If any string contains a non-alphabet character, the function should return the error message: \\"Error: The list contains non-alphabet characters.\\"","solution":"def sort_strings(strings): Sorts a list of strings alphabetically if all strings are alphabets. Returns an error message if any string contains non-alphabet characters. for s in strings: if not s.isalpha(): return \\"Error: The list contains non-alphabet characters.\\" return sorted(strings)"},{"question":"Create a function that takes in a dictionary, where the keys are strings representing book titles and the values are integers representing their respective prices. The function should return a new dictionary containing only the books with prices that are greater than or equal to the average price of all books in the original dictionary.","solution":"def filter_books_by_average_price(books): Returns a dictionary of books whose prices are greater than or equal to the average price. :param books: Dictionary with book titles as keys and their respective prices as values. :return: Filtered dictionary with books priced above or equal to the average price. if not books: return {} average_price = sum(books.values()) / len(books) return {title: price for title, price in books.items() if price >= average_price}"},{"question":"Create a function that takes an array of integers and returns the doubled values in a new array.","solution":"def double_array(arr): Returns a new array where each integer in the input array is doubled. Parameters: arr (list): A list of integers. Returns: list: A new list with each integer doubled. return [x * 2 for x in arr]"},{"question":"Create a function that retrieves the last element from a given list in Python.","solution":"def get_last_element(lst): Returns the last element from a given list. If the list is empty, returns None. if not lst: return None return lst[-1]"},{"question":"Create a function that will return the value of a specific key in a given dictionary. The function will take two parameters: the dictionary and the key to be searched. If the key is present in the dictionary, the function should return its corresponding value. Otherwise, it should return \`None\`.","solution":"def get_value(d, key): Returns the value associated with the key in the dictionary if it exists, otherwise returns None. Parameters: d (dict): The dictionary to search. key : The key to search for in the dictionary. Returns: The value corresponding to the key, or None if the key is not found. return d.get(key)"},{"question":"Create a function that will print the first N Fibonacci numbers. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. For example, the first five Fibonacci numbers are 0, 1, 1, 2, and 3.","solution":"def fibonacci(n): Returns a list containing the first n Fibonacci numbers. if n <= 0: return [] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-2] + fib_sequence[-1]) return fib_sequence[:n]"},{"question":"Create a function that takes a string and returns its mirror reverse. The mirror reverse means you should reverse the string twice, essentially putting it back in its original order. However, for the second reverse, change all characters to lowercase that were originally uppercase, and all lowercase to uppercase. The function should return the modified string.","solution":"def mirror_reverse(s): Returns the mirror reverse of a string where characters are reversed twice, and the case of each character is changed in the second reversal. reversed_once = s[::-1] reversed_twice_with_case_change = ''.join( char.lower() if char.isupper() else char.upper() for char in reversed_once[::-1] ) return reversed_twice_with_case_change"},{"question":"Create a function that takes a list of integers and returns the product of all the prime numbers in the list.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5)+1, 2): if n % i == 0: return False return True def prime_product(lst): Returns the product of all prime numbers in the list. product = 1 has_prime = False for num in lst: if is_prime(num): product *= num has_prime = True return product if has_prime else None"},{"question":"Create a function that takes a list of dictionaries as an argument, where each dictionary represents a person's details. Each dictionary contains keys \\"name\\" and \\"weight\\". The function should return the name of the person with the highest weight among those listed.","solution":"def person_with_highest_weight(people): Returns the name of the person with the highest weight from a list of dictionaries. :param people: list of dictionaries, each containing 'name' and 'weight' :return: name of the person with the highest weight if not people: return None max_weight_person = max(people, key=lambda person: person['weight']) return max_weight_person['name']"},{"question":"Create a function that takes three integers as input and returns the sum of the squares of the first two integers, and then subtracts the square of the third integer from the result. The function should be named \`calculateSumOfSquaresDifference\`.","solution":"def calculateSumOfSquaresDifference(a, b, c): Returns the sum of the squares of the first two integers, then subtracts the square of the third integer. Parameters: a (int): The first integer. b (int): The second integer. c (int): The third integer. Returns: int: The result of the sum of the squares of the first two integers minus the square of the third integer. return a**2 + b**2 - c**2"},{"question":"Create a function that returns the sum of the first 'n' terms of a geometric series given the first term 'a' and the common ratio 'r'. The function should handle the case where 'r' is zero and 'r' is not equal to 1.","solution":"def geometric_series_sum(a, r, n): Returns the sum of the first 'n' terms of a geometric series given the first term 'a' and the common ratio 'r'. if n <= 0: return 0 if r == 0: return a if r == 1: return a * n return a * (1 - r**n) / (1 - r)"},{"question":"Create a function that takes an integer \`n\` and returns a list of lists, where each sublist represents a row of Pascal's Triangle up to the nth row. Pascal's Triangle is a triangular array of the binomial coefficients. Each number is the sum of the two numbers directly above it. The first and last number of each row in Pascal's Triangle are always 1.","solution":"def generate_pascals_triangle(n): Generates Pascal's Triangle up to the nth row. Parameters: n (int): The number of rows in the Pascal's Triangle to generate. Returns: List[List[int]]: A list of lists representing the Pascal's Triangle. if n < 1: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"Create a function that generates a list of all even numbers from 1 to 20 in Python.","solution":"def generate_even_numbers(): Returns a list of all even numbers from 1 to 20. return [x for x in range(1, 21) if x % 2 == 0]"},{"question":"Create a function that takes a string as an argument and returns the string with all non-alphanumeric characters removed. Non-alphanumeric characters include all punctuation, spaces, and special symbols.","solution":"import re def remove_non_alphanumeric(s): Removes all non-alphanumeric characters from the input string. Args: s (str): The input string. Returns: str: The string with all non-alphanumeric characters removed. return re.sub(r'[^a-zA-Z0-9]', '', s)"},{"question":"Create a function that takes a number and returns a list containing that number repeated three times.","solution":"def repeat_three_times(number): Returns a list containing the input number repeated three times. return [number] * 3"},{"question":"Create a function that accepts two lists of integers as input and outputs a list of integers that are present in both lists.","solution":"def intersection(list1, list2): Returns a list of integers that are present in both input lists. set1 = set(list1) set2 = set(list2) common_elements = list(set1 & set2) return common_elements"},{"question":"Create a function that returns the number of non-overlapping sub-strings of length 3 that can be formed from a given string.","solution":"def count_non_overlapping_substrings(s): Returns the number of non-overlapping sub-strings of length 3 that can be formed from the given string. if len(s) < 3: return 0 return len(s) // 3"},{"question":"Create a function that generates all possible combinations of a given list. This function should also handle duplicates in the input list, ensuring that each unique combination is generated only once.","solution":"from itertools import combinations def unique_combinations(input_list): Generates all unique combinations of the given list, handling duplicates. unique_combinations_set = set() for r in range(1, len(input_list) + 1): for combo in combinations(sorted(input_list), r): unique_combinations_set.add(combo) return sorted(unique_combinations_set)"},{"question":"Create a function that calculates the sum of the first \`n\` natural numbers. The function should be named \`sum_natural_numbers\` and take a single parameter \`n\`. The function should return the sum of the first \`n\` natural numbers using a loop.","solution":"def sum_natural_numbers(n): Returns the sum of the first n natural numbers. Parameters: n (int): The number of first natural numbers to sum. Returns: int: The sum of the first n natural numbers. if n < 1: return 0 total = 0 for i in range(1, n + 1): total += i return total"},{"question":"Create a function that takes two arguments - the list of integers, and a number k, and returns k elements from the list with the smallest absolute values. If there are multiple such elements, the function should return the ones that appear first in the list. If the list does not contain at least k elements, return the entire list.","solution":"def k_smallest_abs_values(arr, k): Returns k elements from the list with the smallest absolute values. If there are multiple such elements, returns the ones that appear first in the list. If the list does not contain at least k elements, returns the entire list. if len(arr) <= k: return arr # Sort the list by absolute values but maintain the original order for ties sorted_arr = sorted(arr, key=lambda x: (abs(x), arr.index(x))) return sorted_arr[:k]"},{"question":"Create a function that takes in a list of integers and returns the sum of the elements. Additionally, if any element in the list is negative, the function should return -1 indicating an error in the input. how can i achieve this in python?","solution":"def sum_of_elements(lst): Returns the sum of the elements in the list. If any element in the list is negative, returns -1. :param lst: List of integers :return: Sum of elements or -1 if any element is negative for num in lst: if num < 0: return -1 return sum(lst)"},{"question":"Create a function that checks the validity of a given IP address. An IP address is considered valid if it consists of four numbers, each separated by a dot, and each number is between 0 and 255. The function should return \`True\` for a valid IP address and \`False\` otherwise.","solution":"def is_valid_ip(ip): Checks if the given IP address is valid. A valid IP address consists of four numbers separated by dots, and each number is between 0 and 255. :param ip: str : The IP address to be validated. :return: bool : True if the IP address is valid, False otherwise. parts = ip.split('.') # Valid IP address should have exactly four parts if len(parts) != 4: return False for part in parts: # Each part should be a number between 0 and 255 if not part.isdigit() or not 0 <= int(part) <= 255: return False return True"},{"question":"Create a function that adds the numbers in an input list.","solution":"def sum_list(numbers): Returns the sum of all the numbers in the given list. Parameters: numbers (list): A list of numbers. Returns: int or float: The sum of all numbers in the list. return sum(numbers)"},{"question":"Create a function that takes two numbers, x and y, as parameters and returns the result of the multiplication of x and y.","solution":"def multiply(x, y): Returns the product of x and y. return x * y"},{"question":"Create a function that takes in an integer as an argument and returns a string which contains all positive integers up to and including that integer in ascending order, without any duplicates. If the input number is negative, the function should return an empty string.","solution":"def ascending_integers(n): Returns a string with all positive integers up to and including n in ascending order, without any duplicates. If the input number is negative, the function returns an empty string. if n < 0: return \\"\\" return \\" \\".join(map(str, range(1, n + 1)))"},{"question":"Create a function that takes a list of strings as input and returns a new list containing the lengths of the original strings. E.x. if the input list is ['apple', 'banana', 'cherry'], the output should be [5, 6, 5].","solution":"def string_lengths(input_list): Returns a list of lengths of the strings in the input_list. return [len(s) for s in input_list]"},{"question":"Create a function that returns the value from a binary search tree (BST) that has the smallest absolute difference with a given target value. If multiple nodes have the same smallest absolute difference, return the smallest of those values. Assume the BST is non-empty.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def closest_value(root: TreeNode, target: float) -> int: closest = root.value while root: # Update the closest value if the current node is closer if abs(root.value - target) < abs(closest - target): closest = root.value elif abs(root.value - target) == abs(closest - target) and root.value < closest: closest = root.value # Move left or right depending on the target value if target < root.value: root = root.left else: root = root.right return closest"},{"question":"Create a function that calculates and returns the number of times each unique letter (ignoring case) appears in a given string. The function should return a dictionary where the keys are unique letters and the values are the counts of those letters. For instance, if the input is \\"Hello World\\", the output should be {'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1}.","solution":"def letter_count(s): Returns a dictionary with the count of each unique letter (ignoring case) in the given string. s = s.lower() counts = {} for char in s: if char.isalpha(): if char in counts: counts[char] += 1 else: counts[char] = 1 return counts"},{"question":"Create a function that takes in an array of integers as a parameter and returns the median value of the array. Please note that the array can contain any number of integers, including an even number. If the array contains an odd number of integers, the function should return the middle value. If the array contains an even number of integers, the function should return the average of the two middle values.","solution":"def median(arr): Returns the median value of the array. If the array length is odd, it returns the middle value. If the array length is even, it returns the average of the two middle values. arr_sorted = sorted(arr) n = len(arr) middle = n // 2 if n % 2 == 0: # even length return (arr_sorted[middle - 1] + arr_sorted[middle]) / 2 else: # odd length return arr_sorted[middle]"},{"question":"Create a function that adds a digit to a given number without converting it to a string. For example, if the number is 123 and the digit is 4, the function should return 1234 without changing the type of the number to a string.","solution":"def add_digit(number, digit): Given a number and a digit, adds the digit to the end of the number without converting the number to a string. if not (0 <= digit <= 9): raise ValueError(\\"Digit must be a single number between 0 and 9\\") return number * 10 + digit"},{"question":"Create a function that receives an integer and prints out the number of divisors this number has. The function should handle both positive and negative numbers, and should also handle zero. However, for the purpose of this exercise, you do not need to check for non-integer inputs.","solution":"def count_divisors(n): Returns the number of divisors of the given integer n. if n == 0: return float('inf') # Zero has infinitely many divisors n = abs(n) # Handle negative numbers divisors_count = 0 for i in range(1, n + 1): if n % i == 0: divisors_count += 1 return divisors_count"},{"question":"Create a function that takes an array of integers as input and returns the maximum subarray sum. The function should use a well-known algorithm to solve this problem efficiently.","solution":"def max_subarray_sum(nums): Returns the maximum subarray sum using Kadane's Algorithm. if not nums: return 0 max_current = max_global = nums[0] for i in range(1, len(nums)): max_current = max(nums[i], max_current + nums[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes in a list of integers \`nums\` and an integer \`k\`. The function should return \`True\` if the average value of any subarray of length \`k\` in \`nums\` is greater than \`k\` and \`False\` otherwise.","solution":"def average_subarray_greater_than_k(nums, k): Returns True if the average value of any subarray of length k in nums is greater than k, otherwise returns False. if len(nums) < k: return False for i in range(len(nums) - k + 1): subarray = nums[i:i+k] if sum(subarray) / k > k: return True return False"},{"question":"Create a function that takes a list of integers and returns the sum of all the even numbers in the list. The function should ignore any odd numbers.","solution":"def sum_even_numbers(numbers): Returns the sum of all even numbers in the given list. :param numbers: List of integers :return: Sum of all even integers in the list return sum(number for number in numbers if number % 2 == 0)"},{"question":"Create a function that accepts a list of integers as an argument and returns a list where each element at an odd index is replaced with a string \\"ODD\\" and each element at an even index is replaced with a string \\"EVEN\\". The function should have a time complexity of O(n).","solution":"def replace_with_labels(lst): Replaces each element at an odd index with the string \\"ODD\\" and each element at an even index with the string \\"EVEN\\". Parameters: lst (list): The list of integers. Returns: list: The list with replaced elements. result = [] for i in range(len(lst)): if i % 2 == 0: result.append(\\"EVEN\\") else: result.append(\\"ODD\\") return result"},{"question":"Create a function that takes a positive integer \`n\` as an argument and returns the sum of its digits. The function should handle large numbers efficiently.","solution":"def sum_of_digits(n): Returns the sum of the digits of n. return sum(int(digit) for digit in str(n))"},{"question":"Create a function that takes a positive integer (N) and return its factorial. However, this function should be implemented using a recursive approach. Write the solution in Python.","solution":"def factorial(N): Returns the factorial of a positive integer N using a recursive approach. if N == 1: return 1 else: return N * factorial(N - 1)"},{"question":"Create a function that takes a string of parentheses as input and returns \`True\` if the parentheses are balanced and \`False\` otherwise. The function should handle nested parentheses and assume that the input string consists solely of parentheses.","solution":"def is_balanced_parentheses(s): Checks if the parentheses in the input string are balanced. Args: s (str): A string of parentheses. Returns: bool: True if the parentheses are balanced, False otherwise. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Create a function that calculates the factorial of a given non-negative integer. The function should be recursive and should handle cases where the input is 0 (which should return 1) since 0! = 1.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. The function is recursive. if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that normalizes a given array into a unit sphere. A unit sphere is a sphere in which the radius is 1, meaning that all distances from the center of the sphere to its surface are equal to 1. Normalize means to scale the values of an array to make the sum of the squared values equal to 1 (this is also known as L2 normalization or Frobenius normalization).","solution":"import numpy as np def normalize_to_unit_sphere(array): Normalizes a given array into a unit sphere. This means scaling the values of the array so that the sum of the squared values equals 1 (L2 normalization). Parameters: array (list or np.array): The array to be normalized. Returns: np.array: The normalized array. array = np.array(array, dtype=np.float64) norm = np.linalg.norm(array) if norm == 0: return array return array / norm"},{"question":"Create a function that takes two integers as input and returns the greatest common divisor (GCD) of the two numbers. Use the Euclidean algorithm to find the GCD. The function should be named \`find_gcd\` and it should be self-contained.","solution":"def find_gcd(a, b): Returns the greatest common divisor (GCD) of two integers a and b using the Euclidean Algorithm. while b != 0: a, b = b, a % b return abs(a)"},{"question":"Create a function that takes a list of strings as input and returns a new list containing the first character of each string.","solution":"def first_characters(strings): Returns a list containing the first character of each string in the input list. return [s[0] for s in strings if s]"},{"question":"Create a function that takes a string as input and returns a list containing the ASCII values of all characters in the string.","solution":"def string_to_ascii_values(s): Returns a list containing the ASCII values of all characters in the input string. :param s: input string :return: list of ASCII values return [ord(char) for char in s]"},{"question":"Create a function that inverts the bits of a 32-bit unsigned integer. Invert means to replace all the 0's with 1's and all 1's with 0's.","solution":"def invert_bits(n): Return the bitwise inversion of a 32-bit unsigned integer. # Ensure n is treated as a 32-bit unsigned integer return n ^ 0xFFFFFFFF"},{"question":"Create a function that reverses the order of items in a list in Python. You should ensure that the function works for lists of any data type.","solution":"def reverse_list(lst): Reverses the order of items in a list. Parameters: lst (list): The list to reverse. Returns: list: The reversed list. return lst[::-1]"},{"question":"Create a function that takes two integers as input and returns the sum of all integers between them, inclusive. For example, if the input numbers are 1 and 5, the function should return 15 because the sum of all integers from 1 to 5 is 15 (1+2+3+4+5=15).","solution":"def sum_between(a, b): Returns the sum of all integers between a and b, inclusive. if a > b: a, b = b, a return sum(range(a, b+1))"},{"question":"Create a function that takes an array as input and returns a new array with the elements in the same order, but all the falsy values removed.","solution":"def remove_falsy_values(arr): Returns a new array with the elements in the same order, but all the falsy values removed. return [element for element in arr if element]"},{"question":"Create a function that takes an integer as input and returns the factorial of that integer using recursion. Ensure that the function handles both positive and negative integers, and throws an exception if the input is not an integer.","solution":"def factorial(n): Returns the factorial of a given integer n using recursion. Throws ValueError if the input is not an integer or if the integer is negative. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that takes no parameters and returns the sum of all even numbers between 1 and 100, inclusive.","solution":"def sum_even_numbers(): Returns the sum of all even numbers between 1 and 100, inclusive. return sum(number for number in range(2, 101, 2))"},{"question":"Create a function that will output a list of all multiples of 3 or 5 up to the given number (N) that are less than N. For instance, if the function is called with 15 as the input, it should return the list [0, 3, 5, 6, 9, 10, 12] because these numbers are multiples of either 3 or 5 and are less than 15.","solution":"def multiples_of_3_or_5(N): Returns a list of all multiples of 3 or 5 less than N. Args: N (int): Upper limit to find multiples of 3 or 5. Returns: list: List of multiples of 3 or 5 less than N. return [i for i in range(N) if i % 3 == 0 or i % 5 == 0]"},{"question":"Create a function that takes in two arguments: an integer \`n\` and a list of integers \`lst\`. The function should return a list of length \`n\` where each element at index \`i\` (0 <= i < n) is the sum of all elements in \`lst\` except the element at index \`i\`.","solution":"def sum_except_index(n, lst): Returns a list of length n where each element at index i (0 <= i < n) is the sum of all elements in lst except the element at index i. if n != len(lst): raise ValueError(\\"The length of the list must be equal to n\\") total_sum = sum(lst) result = [total_sum - lst[i] for i in range(n)] return result"},{"question":"Create a function that counts the number of 1s in a binary number. The function should take an integer as input and return the count of 1s in its binary representation.","solution":"def count_ones_in_binary(n): Returns the count of 1s in the binary representation of the given integer n. return bin(n).count('1')"},{"question":"Create a function that takes an integer array and returns its reverse. The function should handle arrays of varying sizes, including empty arrays.","solution":"def reverse_array(arr): Returns the reversed array of the input array. return arr[::-1]"},{"question":"Create a function that takes a number as an argument and returns the sum of all odd numbers from 1 to that number using a loop.","solution":"def sum_of_odds(n): Returns the sum of all odd numbers from 1 to n (inclusive). sum_odds = 0 for i in range(1, n + 1): if i % 2 != 0: sum_odds += i return sum_odds"},{"question":"Create a function that computes the sum of the series (2^0 + 2^1 + 2^2 + ldots + 2^n). The function should be implemented in Python and should take one argument, (n). It should return the sum of the series up to (2^n). The function should handle large values of (n) efficiently.","solution":"def sum_of_series(n): Computes the sum of the series 2^0 + 2^1 + 2^2 + ... + 2^n. Parameters: n (int): The highest exponent in the series. Returns: int: The sum of the series up to 2^n. # The sum of the series 2^0 + 2^1 + 2^2 + ... + 2^n is equal to 2^(n+1) - 1 return (1 << (n + 1)) - 1"},{"question":"Create a function that takes in four parameters: three integers \`a\`, \`b\`, and \`c\`, and a character \`op\`. The function should perform the operation specified by \`op\` on \`a\` and \`b\`, and then add \`c\` to the result. If \`op\` is 'plus', the operation should be addition; if \`op\` is 'minus', the operation should be subtraction. The function should return the final result.","solution":"def calculate_and_add(a, b, c, op): Performs an operation (addition or subtraction) on 'a' and 'b' based on 'op', and then adds 'c' to the result. Parameters: a (int): the first operand b (int): the second operand c (int): the value to be added to the result of the operation op (str): the operation to perform ('plus' for addition, 'minus' for subtraction) Returns: int: the final result after performing the operation and adding 'c' if op == 'plus': result = a + b elif op == 'minus': result = a - b else: raise ValueError(\\"Invalid operation. Use 'plus' or 'minus'.\\") return result + c"},{"question":"Create a function that takes an integer as a parameter and counts the number of 1s in the binary representation of the number. For example, the number 5 has a binary representation of 101, which contains two 1s. So the function should return 2 in this case. Write a function in Python.","solution":"def count_ones_in_binary(n): Returns the number of 1s in the binary representation of the integer n. return bin(n).count('1')"},{"question":"Create a function that takes an array or list of integers and returns the product of all the even numbers in the array. If there are no even numbers, return 1 (since 1 is the multiplicative identity).","solution":"def product_of_evens(numbers): Returns the product of all the even numbers in the array. If there are no even numbers, returns 1. product = 1 found_even = False for num in numbers: if num % 2 == 0: product *= num found_even = True return product if found_even else 1"},{"question":"Create a function that takes an integer list and returns the list after sorting it in ascending order using the insertion sort algorithm.","solution":"def insertion_sort(arr): Sorts a list of integers using the insertion sort algorithm. Args: arr (list): A list of integers to be sorted. Returns: list: A sorted list of integers. for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0..i-1], that are greater than key, # to one position ahead of their current position while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Create a function that takes a string as input and returns the number of vowels in the string. However, the function should also count 'y' as a vowel when it is located between two consonants.","solution":"def count_vowels(text): Returns the number of vowels (including 'y' under certain conditions) in the input string. vowels = \\"aeiou\\" text = text.lower() count = 0 for i in range(len(text)): if text[i] in vowels: count += 1 elif text[i] == 'y' and i > 0 and i < len(text) - 1: if text[i-1] not in vowels + 'y' and text[i+1] not in vowels + 'y': count += 1 return count"},{"question":"Create a function that generates a list of all prime numbers up to a given limit. The function should be efficient and optimized for large inputs.","solution":"def generate_primes(limit): Generates a list of all prime numbers up to a given limit. Parameters: limit (int): The upper limit for generating prime numbers. Returns: List[int]: A list of prime numbers up to the given limit. if limit < 2: return [] sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start * start, limit + 1, start): sieve[multiple] = False return [num for num in range(2, limit + 1) if sieve[num]]"},{"question":"Create a function that takes a string and returns the sum of all ASCII values of the characters in the string.","solution":"def sum_ascii_values(s): Returns the sum of all ASCII values of the characters in the string s. return sum(ord(char) for char in s)"},{"question":"Create a function that takes an array of integers and returns a new array containing the products of the integers at each index position.","solution":"def product_array(arr): Takes an array of integers and returns a new array containing the products of the integers at each index position except the integer at that index position. n = len(arr) if n == 0: return [] # Initialize the result array with 1s result = [1] * n # Calculate products of elements before each index left_product = 1 for i in range(n): result[i] = left_product left_product *= arr[i] # Calculate products of elements after each index right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= arr[i] return result"},{"question":"Create a function that takes in a string and returns a new string where the first letter and the last letter of the original string are swapped.","solution":"def swap_first_last(s): Returns a new string where the first letter and the last letter of the input string are swapped. If the string has only one character or is empty, it returns the original string. if len(s) <= 1: return s return s[-1] + s[1:-1] + s[0]"},{"question":"Create a function that returns the largest positive integer that cannot be formed by any combination of given positive integers \`a\` and \`b\`.","solution":"def largest_unreachable_integer(a, b): Returns the largest positive integer that cannot be formed by any combination of given positive integers a and b. if a <= 0 or b <= 0: return 0 if a == 1 or b == 1: return None # Since a and b being 1 means we can form any integer gcd_ab = gcd(a, b) if gcd_ab != 1: return None # If a and b are not coprime, there's no largest unreachable integer. # Using the Chicken McNugget Theorem return a * b - a - b def gcd(x, y): Helper function to find the greatest common divisor of x and y. while y != 0: x, y = y, x % y return x"},{"question":"Create a function that takes a string and appends an exclamation mark to the end if it does not already end with one. If the string ends with one or more exclamation marks, your function should add another one. The function should then return the updated string.","solution":"def append_exclamation(s): Appends an exclamation mark to the end of the string if it does not already end with one. If the string ends with one or more exclamation marks, adds another one. :param s: Input string :return: Modified string with an additional exclamation mark if s.endswith(\\"!\\"): return s + \\"!\\" return s + \\"!\\""},{"question":"Create a function that filters out all numbers in a list except those that are divisible by both 3 and 5.","solution":"def filter_divisible_by_3_and_5(numbers): Filters out all numbers in a list except those that are divisible by both 3 and 5. Args: numbers (list): A list of integers. Returns: list: A list of integers that are divisible by both 3 and 5. return [number for number in numbers if number % 3 == 0 and number % 5 == 0]"},{"question":"Create a function that takes a string and a character, and checks whether the character appears in the string. If the character is found, return \\"Found\\". Otherwise, return \\"Not Found\\".","solution":"def character_in_string(string, char): Checks whether the character appears in the string. Parameters: - string: The string in which to search for the character. - char: The character to search for in the string. Returns: - 'Found' if the character is found in the string, 'Not Found' otherwise. if char in string: return \\"Found\\" return \\"Not Found\\""},{"question":"Create a function that takes a list of integers. The function should return a list containing only the integers that appear more than once in the input list. Each integer should appear in the output list exactly once, regardless of how many times it appears in the input list.","solution":"def find_duplicates(lst): Returns a list of integers that appear more than once in the input list. Each integer will appear in the output list exactly once. from collections import Counter count = Counter(lst) return [num for num in count if count[num] > 1]"},{"question":"Create a function that takes two integer parameters and returns the values of both parameters such that all the bits of the first parameter are shifted by the number of positions specified by the second parameter. The function should handle both positive and negative integers. Additionally, the function should consider the size of the integer in bits (32 bits for simplicity) and the sign bit.","solution":"def bit_shift(value, shift_amount): Shifts the bits of the first parameter (value) by the number of positions specified by the second parameter (shift_amount). Considers the value to be a 32-bit signed integer. if not isinstance(value, int) or not isinstance(shift_amount, int): raise ValueError(\\"Both parameters must be integers\\") if shift_amount <= 0: return value # Treating the value as a 32-bit signed integer bit_size = 32 max_int = (1 << (bit_size - 1)) - 1 min_int = -(1 << (bit_size - 1)) # Perform the shift shifted_value = value << shift_amount # Simulating 32-bit overflow behavior shifted_value &= (1 << bit_size) - 1 # Correcting for signed value range if shifted_value > max_int: shifted_value -= (1 << bit_size) return shifted_value"},{"question":"Create a function that takes an array of integers as input and returns the length of the longest run of consecutive numbers in the array.","solution":"def longest_consecutive_run(nums): Returns the length of the longest run of consecutive numbers in the array. if not nums: return 0 nums = set(nums) longest_run = 0 for num in nums: if num - 1 not in nums: current_num = num current_run = 1 while current_num + 1 in nums: current_num += 1 current_run += 1 longest_run = max(longest_run, current_run) return longest_run"},{"question":"Create a function that takes in two strings, where the first string is the main text and the second string is the search pattern. The function should return a list of all the starting indices where the search pattern occurs in the main text, in the order they appear. If the search pattern is not found, the function should return an empty list.","solution":"def find_pattern_occurrences(main_text, pattern): Returns a list of all starting indices where the pattern occurs in the main text. Parameters: main_text (str): The main text to search within. pattern (str): The search pattern to look for in the main text. Returns: list: A list of starting indices where the pattern is found in the main text. if not main_text or not pattern or len(pattern) > len(main_text): return [] indices = [] pattern_length = len(pattern) for i in range(len(main_text) - pattern_length + 1): if main_text[i:i+pattern_length] == pattern: indices.append(i) return indices"},{"question":"Create a function that takes the first and last name and returns them in a reversed order, with the last name first and the first name last.","solution":"def reverse_name(first_name, last_name): Returns the name in reversed order: \\"last name, first name\\". return f\\"{last_name}, {first_name}\\""},{"question":"Create a function that takes an array of integers and returns the maximum possible sum of a sub-array. The array can contain both positive and negative integers.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a sub-array in the given array of integers. The sub-array can contain both positive and negative integers. if not nums: return 0 max_so_far = nums[0] max_ending_here = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Create a function that takes a string as an input and returns a dictionary where the keys are the unique characters in the string and the values are their corresponding frequencies. Can you also write a function to test the correctness of the above function?","solution":"def char_frequency(s: str) -> dict: Returns the frequency of each unique character in the string s. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function that accepts an array of integers and prints the first three numbers that are divisible by 3.","solution":"def first_three_divisible_by_3(arr): Prints the first three numbers in the array that are divisible by 3. divisible_by_3 = [x for x in arr if x % 3 == 0] for num in divisible_by_3[:3]: print(num)"},{"question":"Create a function that takes a string as input and converts all the uppercase letters to lowercase and vice versa. For example, if the input string \\"Hello World!\\" is given, the function should return the string \\"hELLO wORLD!\\".","solution":"def swap_case(s): Returns a new string with all uppercase letters converted to lowercase and all lowercase letters converted to uppercase. return s.swapcase()"},{"question":"Create a function that takes in two lists of integers and returns a list that contains the intersection of the two lists, but only if the intersection contains at least one common prime factor. If there are no common prime factors, return an empty list.","solution":"def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def prime_factors(num): factors = [] for i in range(2, num + 1): if num % i == 0 and is_prime(i): factors.append(i) return factors def has_common_prime_factors(a, b): factors_a = prime_factors(a) factors_b = prime_factors(b) return any(factor in factors_b for factor in factors_a) def intersection_with_prime_factors(list1, list2): intersection = [value for value in list1 if value in list2] if any(has_common_prime_factors(value, list1[0]) for value in intersection): return intersection return []"},{"question":"Create a function that takes two integers, a and b, as input and returns the sum of a and b. Write a test function to validate your function.","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Create a function that takes an array of integers, arr, and a value, val. If the value is found within the array, the function should return the first index where the value is found. If the value is not found, the function should return -1. This function should be case-insensitive in terms of integer values.","solution":"def find_value_index(arr, val): Returns the first index of val in the list arr. If val is not found, returns -1. Parameters: arr (list of int): The list in which to search for val. val (int): The value to search for in arr. Returns: int: The index of the first occurrence of val, or -1 if val is not found. try: return arr.index(val) except ValueError: return -1"},{"question":"Create a function that calculates the sum of the squares of the first 'n' natural numbers. The function should have a clear docstring explaining its purpose and parameters. Include a check function with provided data points to verify the correctness of the solution.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first 'n' natural numbers. Parameters: n (int): The number of natural numbers to compute the sum of squares for. Returns: int: The sum of the squares of the first 'n' natural numbers. Example: sum_of_squares(3) -> 1^2 + 2^2 + 3^2 = 14 return sum(i ** 2 for i in range(1, n + 1))"},{"question":"Create a function that takes a list as an input and returns the sum of its elements. The list contains integers. The sum of elements can be calculated using a loop or any other method. Please provide a Python code solution.","solution":"def sum_of_elements(lst): Returns the sum of all elements in the list. Parameters: lst (list of int): A list of integers. Returns: int: The sum of all integers in the list. return sum(lst)"},{"question":"Create a function that takes in a list of integers and returns the sum of the list. However, skip over any integers that are even.","solution":"def sum_of_odd_integers(int_list): Returns the sum of the list, skipping over any integers that are even. return sum(i for i in int_list if i % 2 != 0)"},{"question":"Create a function that computes the length of the shortest sub-array with a sum at least to a given target value. If no such sub-array exists, return -1.","solution":"def minSubArrayLen(target, nums): Returns the length of the shortest sub-array with a sum at least to the target value. If no such sub-array exists, returns -1. n = len(nums) min_length = float('inf') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= target: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return min_length if min_length != float('inf') else -1"},{"question":"Create a function that takes an integer as input and returns the number of zero bits in the binary representation of the integer. For example, the binary representation of 5 is '101', so the function should return 1, as there is one zero bit. If the input is 0, the function should return 1, as the binary representation of 0 is '0'.","solution":"def count_zero_bits(n): Returns the number of zero bits in the binary representation of the integer n. if n == 0: return 1 binary_representation = bin(n)[2:] # Get the binary representation of the number without the '0b' prefix return binary_representation.count('0')"},{"question":"Create a function that accepts an array of integers and returns an array containing only the integers that are multiples of 3.","solution":"def filter_multiples_of_three(numbers): Returns a list of numbers that are multiples of 3 from the given list. Parameters: numbers (list): List of integers. Returns: list: List of integers that are multiples of 3. return [num for num in numbers if num % 3 == 0]"},{"question":"Create a function that receives a list of integers and returns the list in reverse order. The function must not use the built-in reverse() function or any other method that directly reverses the list. You must implement the logic manually.","solution":"def reverse_list(lst): Returns the given list in reverse order without using the built-in reverse() function. reversed_lst = [] for i in range(len(lst) - 1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst"},{"question":"Create a function that calculates the factorial of a number. The function should handle both positive and negative integers, but should always return a real number result. For positive integers, it should return the factorial as expected. For negative integers, it should return the factorial of the absolute value of the number.","solution":"def factorial(n): Returns the factorial of n. If n is negative, it returns the factorial of the absolute value of n. def factorial_pos(m): if m == 0: return 1 result = 1 for i in range(1, m + 1): result *= i return result if n < 0: n = abs(n) return factorial_pos(n)"},{"question":"Create a function that plays a hangman game. The game will choose a random word from a predefined list, and the player will have to guess the letters of the word. The game will limit the number of incorrect guesses the player can make.","solution":"import random def hangman(word_list, max_attempts=6): Plays a game of hangman. Parameters: word_list (list of str): List of words to choose from. max_attempts (int): Maximum number of incorrect guesses allowed. Returns: tuple: (bool, str) A tuple where the first element is True if the player won, False otherwise, and the second element is the word to guess. word_to_guess = random.choice(word_list) guessed_letters = set() incorrect_guesses = 0 word_display = ['_'] * len(word_to_guess) def display_word(): return ' '.join(word_display) while incorrect_guesses < max_attempts and '_' in word_display: guess = input(f\\"Current word: {display_word()}nGuessed letters: {', '.join(guessed_letters)}nGuess a letter: \\") if guess in guessed_letters: print(\\"You have already guessed that letter.\\") continue guessed_letters.add(guess) if guess in word_to_guess: for i, letter in enumerate(word_to_guess): if letter == guess: word_display[i] = guess else: incorrect_guesses += 1 print(f\\"Incorrect guess. You have {max_attempts - incorrect_guesses} attempts left.\\") player_won = '_' not in word_display if player_won: print(f\\"Congratulations! You've won. The word was '{word_to_guess}'\\") else: print(f\\"Game over. The word was '{word_to_guess}'\\") return player_won, word_to_guess"},{"question":"Create a function that converts a string containing multiple numbers separated by commas into a list of integers. Here is a basic example: the input string would be \\"1,2,3,4\\" and the output should be [1, 2, 3, 4].","solution":"def convert_string_to_list(number_string): Converts a string of numbers separated by commas into a list of integers. Parameters: number_string (str): The input string containing numbers separated by commas. Returns: list: A list of integers. if not number_string: return [] return [int(num.strip()) for num in number_string.split(\\",\\")]"},{"question":"Create a function that takes a list of integers as input and returns the maximum sum of any two adjacent numbers in the list.","solution":"def max_adjacent_sum(lst): Returns the maximum sum of any two adjacent numbers in the list. Parameters: lst (list of int): The list of integers Returns: int: The maximum sum of any two adjacent numbers if len(lst) < 2: return None # or raise an error, as there are no pairs of adjacent numbers max_sum = lst[0] + lst[1] for i in range(1, len(lst) - 1): current_sum = lst[i] + lst[i + 1] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Create a function that takes an array of temperatures and returns a new array with the temperatures converted to Celsius from Fahrenheit.","solution":"def fahrenheit_to_celsius(temperatures): Converts an array of temperatures from Fahrenheit to Celsius. Args: temperatures (List[float]): List of temperatures in Fahrenheit. Returns: List[float]: List of temperatures converted to Celsius. return [(temp - 32) * 5.0 / 9.0 for temp in temperatures]"},{"question":"Create a function that verifies if a given list of numbers is sorted in ascending order using a recursive approach.","solution":"def is_sorted_recursive(lst): Returns True if the list is sorted in ascending order, False otherwise. This function uses a recursive approach. if len(lst) <= 1: return True return lst[0] <= lst[1] and is_sorted_recursive(lst[1:])"},{"question":"Create a function that searches an array of integers for the first instance of a given number and returns its index. If the number is not found, return -1. Additionally, handle the case where the input is an empty array.","solution":"def search_number(arr, target): Returns the index of the first instance of the target number in the array. If the number is not found, returns -1. Handles the case where the input array is empty. Parameters: arr (list of int): The array of integers to search. target (int): The number to search for. Returns: int: The index of the first instance of the target number, or -1 if not found. if not arr: return -1 for index, num in enumerate(arr): if num == target: return index return -1"},{"question":"Create a function that takes a string as input and returns the number of occurrences of each letter in the string. The function should ignore case sensitivity and consider only alphabet characters.","solution":"def count_letter_occurrences(s): Returns a dictionary with the number of occurrences of each letter in the string. Considers only alphabet characters and is case insensitive. from collections import Counter # Normalize the string to lower case and filter only alphabet characters s = s.lower() s = ''.join(filter(str.isalpha, s)) return dict(Counter(s))"},{"question":"Create a function that takes a list of integers and returns the maximum product of a subarray within that list. The function should handle both positive and negative integers.","solution":"def max_product_subarray(nums): Returns the maximum product of a subarray within the list of integers. if not nums: return 0 max_prod = min_prod = result = nums[0] for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result"},{"question":"Create a function that reverses a string. Rewrite your function to be able to take two arguments: the string and the number of characters to reverse. If the number of characters to reverse is not provided, the function should reverse the entire string.","solution":"def reverse_string(s, n=None): Reverses the entire string s if n is None. Otherwise, reverses the first n characters of the string. Parameters: s (str): The string to be reversed. n (int, optional): The number of characters to reverse. Defaults to None. Returns: str: The reversed string or the string with the first n characters reversed. if n is None: return s[::-1] else: return s[:n][::-1] + s[n:]"},{"question":"Create a function that takes in a string, checks if it is a palindrome, and returns True if it is, False otherwise. Note a palindrome is a string that reads the same backward as forward. For example, \\"racecar\\" is a palindrome because spelled backwards it still reads \\"racecar\\". Make sure to ignore spaces and punctuation when checking for palindromes.","solution":"import re def is_palindrome(s): Checks if the input string s is a palindrome, ignoring spaces and punctuation. Args: s (str): The input string to check. Returns: bool: True if s is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lower case. cleaned_str = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Compare cleaned string with its reverse. return cleaned_str == cleaned_str[::-1]"},{"question":"Create a function that returns \`true\` if a given integer \`n\` is a perfect square. A perfect square is an integer that is the square of an integer.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, otherwise False. if n < 0: return False sqrt_n = int(math.sqrt(n)) return sqrt_n * sqrt_n == n"},{"question":"Create a function that checks if a given integer is a perfect cube or not. If the number is a perfect cube, return \\"Yes\\", otherwise return \\"No\\". Assume the input number is an integer.","solution":"def is_perfect_cube(n): Checks if a given integer is a perfect cube or not. Parameters: n (int): The integer to be checked. Returns: str: \\"Yes\\" if the number is a perfect cube, otherwise \\"No\\". if n < 0: n = -n cube_root = round(n ** (1.0 / 3)) return \\"Yes\\" if cube_root ** 3 == n else \\"No\\""},{"question":"Create a function that accepts an array, rotates it counter-clockwise by a specified number of positions, and returns the rotated array.","solution":"def rotate_array(arr, positions): Rotates the array counter-clockwise by a specified number of positions. :param arr: List of elements to be rotated :param positions: Number of positions to rotate the array :return: Rotated array if not arr: return arr n = len(arr) positions = positions % n # Handle positions greater than array length return arr[positions:] + arr[:positions]"},{"question":"Create a function that implements the quicksort algorithm, but instead of sorting an entire list, it performs a partial sort on the list. The function should take three arguments: a list of numbers, a start index, an end index, and a desired k-th position. The function should return a list that is partially sorted such that the k-th element is in its correct位置 within a sorted list, and the elements before and after the k-th element are not necessarily sorted.","solution":"def partition(arr, low, high): i = low - 1 pivot = arr[high] for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quickselect(arr, low, high, k): if low <= high: pi = partition(arr, low, high) if pi == k: return arr[pi] elif pi < k: return quickselect(arr, pi + 1, high, k) else: return quickselect(arr, low, pi - 1, k) def find_kth_element(arr, start, end, k): if start < 0 or end >= len(arr) or k < start or k > end: raise ValueError(\\"Invalid arguments\\") quickselect(arr, start, end, k) return arr # Example usage: # arr = [10, 4, 5, 8, 6, 11, 26] # k = 3 # find_kth_element(arr, 0, len(arr)-1, k) # This will return the modified arr such that the element at index 3 is in its final sorted position."},{"question":"Create a function that takes a list of integers as input, finds the sequence of consecutive integers that form the largest consecutive sum (subarray). Return the start and end indices of this subarray.","solution":"def find_largest_consecutive_sum_subarray(nums): Finds the sequence of consecutive integers that form the largest consecutive sum (subarray). Returns the start and end indices of this subarray. if not nums: return None, None max_sum = current_sum = nums[0] start = end = s = 0 for i in range(1, len(nums)): if current_sum + nums[i] < nums[i]: current_sum = nums[i] s = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = s end = i return start, end"},{"question":"Create a function that takes an integer as input and returns the number of digits in the integer. For example, if the input is 123, the output should be 3.","solution":"def count_digits(n): Returns the number of digits in the integer n. return len(str(abs(n)))"},{"question":"Create a function that takes two integers as input and returns their greatest common divisor. I'd like to see the function written in Python and follow your thought process.","solution":"def greatest_common_divisor(a, b): Returns the greatest common divisor (GCD) of two integers a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return abs(a)"},{"question":"Create a function that converts a string to reverse case, i.e., all lowercase becomes uppercase and vice versa.","solution":"def reverse_case(s): Converts all lowercase characters in the string to uppercase and vice versa. Args: s (str): The input string. Returns: str: The string with reversed case characters. return s.swapcase()"},{"question":"Create a function that takes an array of integers as input and returns the smallest positive integer that is missing from the array. The function should work efficiently, ideally in linear time complexity.","solution":"def first_missing_positive(nums): Returns the smallest positive integer that is missing from the array. n = len(nums) # Place each number in its corresponding index position if possible for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Find the first location where the index does not match the expected value for i in range(n): if nums[i] != i + 1: return i + 1 # If all the numbers are in place, return the next number which would be n + 1 return n + 1"},{"question":"Create a function that generates a pyramid of numbers in a string format.","solution":"def generate_number_pyramid(n): Generates a pyramid of numbers up to the given number n. Parameters: n (int): The height of the pyramid. Returns: str: A string representing the number pyramid. if n < 1: return \\"\\" pyramid = [] for i in range(1, n + 1): line = \\" \\".join(str(x) for x in range(1, i + 1)) pyramid.append(line) return \\"n\\".join(pyramid)"},{"question":"Create a function that takes a URL as a parameter and returns the URL without the query string if it exists.","solution":"def remove_query_string(url): Returns the URL without the query string if it exists. return url.split('?')[0]"},{"question":"Create a function that recursively appends elements to a list until it reaches a specified length, then stop appending. The function should return the final list.","solution":"def recursive_append(lst, element, target_length): Recursively append the given element to the list until its length reaches the target length. Args: lst (list): The list to which elements will be appended. element: The element to append to the list. target_length (int): The target length of the list. Returns: list: The list after appending elements until its length reaches the target length. if len(lst) >= target_length: return lst lst.append(element) return recursive_append(lst, element, target_length)"},{"question":"Create a function that takes two integers as input and returns their sum. If the sum is even, return the sum doubled. If the sum is odd, return the sum plus 5.","solution":"def custom_sum(a, b): Returns an adjusted sum according to specified rules. If the sum is even, it returns the sum doubled. If the sum is odd, it returns the sum plus 5. total = a + b if total % 2 == 0: return total * 2 else: return total + 5"},{"question":"Create a function that merges two dictionaries in Python, similar to the \`merge\` function in R. The function should handle both shallow and deep merging, and should have options to update the first dictionary with the second or vice versa. Additionally, it should return the merged dictionary.","solution":"def merge_dicts(dict1, dict2, deep=False, update_first=True): Merges two dictionaries. Supports shallow and deep merge. Parameters: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary. deep (bool): If True, perform a deep merge. update_first (bool): If True, dict1 will be updated with dict2's values. Otherwise, dict2 will be updated with dict1's values. Returns: dict: The merged dictionary. def deep_merge(d1, d2): Helper function to perform deep merge. result = dict(d1) # Make a shallow copy of d1 for k, v in d2.items(): if k in d1 and isinstance(d1[k], dict) and isinstance(v, dict): result[k] = deep_merge(d1[k], v) else: result[k] = v return result if deep: if update_first: return deep_merge(dict1, dict2) else: return deep_merge(dict2, dict1) else: if update_first: result = dict1.copy() result.update(dict2) return result else: result = dict2.copy() result.update(dict1) return result"},{"question":"Create a function that takes three integers as parameters and return the count of numbers between them. The boundaries are included in the count.","solution":"def count_between_inclusive(a, b, c): Returns the count of numbers between the three integers, inclusive. The smallest and largest of the three numbers define the range. start = min(a, b, c) end = max(a, b, c) return end - start + 1"},{"question":"Create a function that takes a string of space-separated numbers and returns the sum of those numbers.","solution":"def sum_of_numbers(s): Takes a string s of space-separated numbers and returns the sum of those numbers. :param s: str - A string of space-separated numbers :return: int - The sum of the numbers return sum(map(int, s.split()))"},{"question":"Create a function that takes in a list of integers and returns a list with the elements rearranged so that all negative numbers come before positive numbers. The relative order among negative and positive numbers should remain the same as in the given list.","solution":"def rearrange_numbers(nums): Rearranges the list so that all negative numbers come before positive numbers, keeping their relative order. Args: nums (list): The list of integers to rearrange. Returns: list: The rearranged list with negatives first. negatives = [num for num in nums if num < 0] non_negatives = [num for num in nums if num >= 0] return negatives + non_negatives"},{"question":"Create a function that receives two integers n and k, and calculates the sum of all numbers from n down to k (inclusive), where k is less than or equal to n. If n is equal to k, return n.","solution":"def sum_from_n_to_k(n, k): Calculate the sum of all numbers from n down to k (inclusive), where k is less than or equal to n. if k > n: raise ValueError(\\"k should be less than or equal to n\\") return sum(range(k, n + 1))"},{"question":"Create a function that takes an array and returns the frequency count of each integer in the array using Python.","solution":"def frequency_count(arr): Returns a dictionary representing the frequency count of each integer in the array. count_dict = {} for num in arr: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 return count_dict"},{"question":"Create a function that computes the factorial of a given number using recursion. Explain the logic behind this method and the steps involved in implementing it.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0 or n == 1: # base case return 1 else: return n * factorial(n - 1) # recursive case"},{"question":"Create a function that takes two lists as input and returns their length. If the lists are of different lengths, raise a \`ValueError\` with a message stating \\"Lists are of different lengths.\\" If the lists are of the same length, return a tuple containing the lengths of both lists.","solution":"def lists_length(lst1, lst2): Returns the length of two lists if they are of the same length. Raises a ValueError if the lists have different lengths. Args: lst1 (list): First list lst2 (list): Second list Returns: tuple: A tuple containing lengths of both lists if they are of the same length Raises: ValueError: If the lengths of the two lists are different if len(lst1) != len(lst2): raise ValueError(\\"Lists are of different lengths.\\") return (len(lst1), len(lst2))"},{"question":"Create a function that converts a given 2D list (matrix) into a 2D numpy array and then perform element-wise multiplication of two such matrices efficiently. Ensure your code handles different shapes of matrices and modifies the code accordingly.","solution":"import numpy as np def multiply_matrices(matrix1, matrix2): Takes two 2D lists (matrices), converts them to numpy arrays, and returns their element-wise multiplication as a numpy array. # Convert lists to numpy arrays np_matrix1 = np.array(matrix1) np_matrix2 = np.array(matrix2) # Check if they have the same shape if np_matrix1.shape != np_matrix2.shape: raise ValueError(\\"Matrices must have the same shape for element-wise multiplication.\\") # Perform element-wise multiplication result_matrix = np.multiply(np_matrix1, np_matrix2) return result_matrix"},{"question":"Create a function that identifies the first_n_max_elements in a list. The function should return a list containing the n elements that are the largest in the given list. If the list is shorter than n, return the entire list.","solution":"def first_n_max_elements(lst, n): Returns the n largest elements from the list \`lst\`. If the list is shorter than n, returns the entire list. if len(lst) < n: return lst return sorted(lst, reverse=True)[:n]"},{"question":"Create a function that takes two lists as input and returns a dictionary containing the common elements and their counts from both lists.","solution":"from collections import Counter def common_elements_count(list1, list2): Returns a dictionary containing the common elements and their counts from both list1 and list2. counter1 = Counter(list1) counter2 = Counter(list2) common_elements = counter1 & counter2 # Get the minimum counts of common elements return dict(common_elements)"},{"question":"Create a function that takes two arguments: an array of strings and a string.","solution":"def concatenate_strings_with_suffix(array, suffix): Takes an array of strings and a suffix string, returns a new list with each string in the array concatenated with the suffix. :param array: List of strings :param suffix: String to be concatenated to each string in the array :return: List of concatenated strings with suffix return [s + suffix for s in array]"},{"question":"Create a function that takes a string and returns the most repeated character in the string. If there is a tie, return the character that comes first in lexicographical order. If there are no repeated characters, return an empty string.","solution":"def most_repeated_character(s): Returns the most repeated character in the string. If there is a tie, returns the character that comes first in lexicographical order. If there are no repeated characters, returns an empty string. from collections import Counter if not s: return \\"\\" count = Counter(s) # Look for characters with at least one repetition repeated_chars = {char: freq for char, freq in count.items() if freq > 1} if not repeated_chars: return \\"\\" # Get the character with highest frequency most_repeated = max(repeated_chars.items(), key=lambda x: (x[1], -ord(x[0]))) return most_repeated[0]"},{"question":"Create a function that takes an integer \`n\` as an input and returns a list of binary representations of numbers from 1 to \`n\`, with each binary string prefixed by 'b'. The function should handle cases where \`n\` is less than 1 by returning an empty list.","solution":"def binary_representations(n): Returns a list of binary representations of numbers from 1 to n, each prefixed by 'b'. If n is less than 1, returns an empty list. if n < 1: return [] return [f'b{bin(i)[2:]}' for i in range(1, n+1)]"},{"question":"Create a function that generates all possible subsets of a given set of characters and returns them as a list. The function should take a list of characters as input and return a list of lists, where each inner list represents a possible subset of the input list.","solution":"def generate_subsets(characters): Generates all possible subsets of a given list of characters. :param characters: List of characters. :return: List of lists, where each inner list is a subset of the input list. from itertools import chain, combinations # helper function to generate combinations def all_combinations(iterable): xs = list(iterable) return chain.from_iterable(combinations(xs, n) for n in range(len(xs) + 1)) return [list(subset) for subset in all_combinations(characters)]"},{"question":"Create a function that takes an array of integers, and returns the maximum sum of a contiguous subarray of length 3.","solution":"def max_sum_subarray_length_3(arr): Returns the maximum sum of a contiguous subarray of length 3. Parameters: arr (list): A list of integers. Returns: integer: The maximum sum of a contiguous subarray of length 3. if len(arr) < 3: return None # If the array has fewer than 3 elements, return None max_sum = float('-inf') for i in range(len(arr) - 2): current_sum = arr[i] + arr[i+1] + arr[i+2] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that checks if a given integer is a perfect square. If it is, return the square root of that number in integer form. If not, return a message indicating that the number is not a perfect square. The function should handle positive and negative integers, as well as zero.","solution":"import math def check_perfect_square(n): Checks if the given integer n is a perfect square. Returns the square root in integer form if it is a perfect square. Returns a message indicating that the number is not a perfect square if it is not. if n < 0: return f\\"{n} is not a perfect square\\" sqrt = int(math.isqrt(n)) if sqrt * sqrt == n: return sqrt else: return f\\"{n} is not a perfect square\\""},{"question":"Create a function that takes a list of numbers and returns the sum of all even numbers in that list. The function should handle large numbers efficiently and avoid unnecessary computations.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the list. Parameters: numbers (list): A list of integers. Returns: int: The sum of all even numbers in the list. return sum(num for num in numbers if num % 2 == 0)"},{"question":"Create a function that takes a list of integers and returns a list of strings, where each string is the binary representation of each integer in the list. The function should also handle the case where an empty list is passed to the function.","solution":"def convert_to_binary(lst): Takes a list of integers and returns a list of strings representing the binary representation of each integer. Parameters: lst (list): A list of integers Returns: list: A list of strings representing the binary representation of each integer return [bin(x)[2:] for x in lst]"},{"question":"Create a function that generates a progression based on the given parameters. The function should take three parameters: the initial term 'a', the common difference 'd', and the number of terms 'n' as input and return a list of terms in the progression. An arithmetic progression is a sequence of numbers in which the difference between consecutive terms is constant, known as the common difference.","solution":"def arithmetic_progression(a, d, n): Generates an arithmetic progression based on the given parameters. :param a: initial term :param d: common difference :param n: number of terms :return: list of terms in the progression return [a + d * i for i in range(n)]"},{"question":"Create a function that generates and returns a list of all prime numbers less than a given number n. Additionally, the function should include a feature to return only the even prime numbers (which, interestingly, is just the number 2) if the even_prime argument is set to True. If the given number n is less than or equal to 2, the function should return an empty list.","solution":"def prime_numbers(n, even_prime=False): Returns a list of prime numbers less than n. If even_prime is True, returns a list including only the even prime number (i.e., 2) if it's within the range. if n <= 2: return [] if even_prime: return [2] if n > 2 else [] primes = [] for num in range(2, n): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that takes in two lists of integers as input and returns True if any of the numbers in the first list are the square of any of the numbers in the second list and False otherwise. The function should be efficient and run in a reasonable time complexity.","solution":"def contains_square(lst1, lst2): Returns True if any number in lst1 is the square of any number in lst2, otherwise returns False. squares = set(x ** 2 for x in lst2) return any(y in squares for y in lst1)"},{"question":"Create a function that checks if a given list contains any duplicate elements. It should return \`True\` if any duplicates are found and \`False\` otherwise.","solution":"def contains_duplicates(elements): Checks if the given list contains any duplicate elements. :param elements: List of elements to check for duplicates :return: True if duplicates are found, otherwise False seen = set() for element in elements: if element in seen: return True seen.add(element) return False"},{"question":"Create a function that converts a given string to categorized groups of substrings. Each substring should contain characters that are identical. For instance, given the string \\"AABBCC\\", the function should return [\\"AA\\", \\"BB\\", \\"CC\\"].","solution":"def group_identical_chars(s): Converts a given string to categorized groups of substrings with identical characters. Parameters: s (str): The input string. Returns: List[str]: A list of substrings each containing identical characters. if not s: return [] result = [] current_char = s[0] current_group = current_char for char in s[1:]: if char == current_char: current_group += char else: result.append(current_group) current_char = char current_group = current_char result.append(current_group) return result"},{"question":"Create a function that takes a string of comma-separated numbers as input and returns the largest number in the string.","solution":"def largest_number_in_string(number_string): Returns the largest number in a string of comma-separated numbers. Parameters: number_string (str): A string of comma-separated numbers. Returns: int/float: The largest number in the string. numbers = [float(num) for num in number_string.split(',')] return max(numbers)"},{"question":"Create a function that takes a language code and a dictionary where each key is a word in the English language and each value is a translation of that word into the specified language. The function should return a translation of the word provided as an argument. If the word is not found, it should return \\"Word not found\\".","solution":"def translate_word(word, lang_code, translations): Translates an English word to the specified language using the provided dictionary. :param word: The word in English to be translated. :param lang_code: The language code for the target language. :param translations: A dictionary where keys are English words and values are their translations. :return: The translation of the word or \\"Word not found\\" if the word is not in the dictionary. return translations.get(word, \\"Word not found\\")"},{"question":"Create a function that takes an integer as input and returns a string representation of the integer. However, the string representation should be in reverse order of its digits. For example, if the input is 1234, the function should return \\"4321\\".","solution":"def reverse_integer_string(n): Takes an integer n and returns a string representation of it in reverse order of its digits. # Convert the integer to a string, then reverse the string and return it return str(n)[::-1]"},{"question":"Create a function that takes a dictionary with keys as fruit names and values as suppliers. The function should return a new dictionary where each key is a fruit name and the corresponding value is the supplier who supplies the most fruits of that type among all suppliers. If there are multiple suppliers who supply the same maximum number of fruits of a particular type, return any one of them.","solution":"def max_supplier_per_fruit(fruit_dict): Given a dictionary with keys as fruit names and values as suppliers, this function returns a new dictionary where each key is a fruit name and the value is the supplier who supplies the most fruits of that type. Parameters: fruit_dict (dict): A dictionary where keys are fruit names and values are dictionaries of suppliers with the number of fruits they supply. Returns: dict: A dictionary where keys are fruit names and values are the supplier who supplies the most fruits of that type. result = {} for fruit, suppliers in fruit_dict.items(): max_supplier = max(suppliers, key=suppliers.get) result[fruit] = max_supplier return result"},{"question":"Create a function that prints out a message.","solution":"def print_message(message): Prints the provided message. print(message)"},{"question":"Create a function that generates a unique, self-contained, and executable Python script from a given string. The function should ensure that the output does not have any actually executable code outside of what is within the script. To emphasize uniqueness, the function should include a random element in the generated script dedicated to changing the name of the main function at every execution.","solution":"import random import string def generate_script_from_string(input_string): Generates a unique, self-contained, and executable Python script from the given string. random_suffix = ''.join(random.choices(string.ascii_lowercase, k=5)) function_name = f'main_function_{random_suffix}' script = f def {function_name}(): print(\\"\\"\\"{input_string}\\"\\"\\") if __name__ == \\"__main__\\": {function_name}() return script"},{"question":"Create a function that can be invoked by \`f1.f2()\` and \`f2()\` (named method chaining).","solution":"class MethodChain: def f1(self): print(\\"Function f1 called\\") return self def f2(self): print(\\"Function f2 called\\") return self # Example usage: # obj = MethodChain() # obj.f1().f2()"},{"question":"Create a function that calculates the factorial of a given non-negative integer \`n\`. The factorial of a non-negative integer \`n\` is the product of all positive integers less than or equal to \`n\`. For example, the factorial of 5 (denoted as 5!) is 5 * 4 * 3 * 2 * 1 = 120. Your function should handle edge cases such as the factorial of 0, which is defined as 1.","solution":"def factorial(n): Returns the factorial of the given non-negative integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that returns the nth Fibonacci number. The function should be able to handle large inputs efficiently. Please optimize your solution to avoid unnecessary computation.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Uses an iterative approach with memoization to handle large inputs efficiently. if n <= 0: return 0 if n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that takes two parameters, an array of integers and a target sum. The function should return the indices of the two numbers in the array that add up to the target sum.","solution":"def two_sum(nums, target): Returns indices of the two numbers in the array that add up to the target. Uses a hash map to store the complements. :param nums: List[int], a list of integers :param target: int, the target sum :return: List[int], indices of the two numbers that add up to the target num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Create a function that accepts two integers, \`a\` and \`b\`. The function must return the absolute difference between \`a\` and \`b\`, without using any in-built arithmetic operations or conditional statements (like if, else, abs() etc.).","solution":"def absolute_difference(a, b): Returns the absolute difference between a and b without using any in-built arithmetic operations or conditional statements. return (a - b) * ((a - b) >> 31 | 1)"},{"question":"Create a function that takes an integer array as input. The function should return the number of pairs in the array where the first element is smaller than the second element.","solution":"def count_increasing_pairs(arr): Returns the number of pairs (i, j) where i < j and arr[i] < arr[j] Parameters: arr (list): List of integers Returns: int: Number of pairs count = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): if arr[i] < arr[j]: count += 1 return count"},{"question":"Create a function that takes a list of strings and returns a new list containing only the strings that have a length greater than a specified threshold.","solution":"def filter_strings_by_length(strings, threshold): Returns a new list containing only the strings that have a length greater than the specified threshold. Parameters: strings (list of str): The list of strings to filter. threshold (int): The length threshold for filtering strings. Returns: list of str: The list of strings that have a length greater than the specified threshold. return [string for string in strings if len(string) > threshold]"},{"question":"Create a function that takes a list of integers as input and returns the average of all the elements in the list.","solution":"def average(lst): Returns the average of a list of integers. if not lst: return 0 return sum(lst) / len(lst)"},{"question":"Create a function that takes an integer \`n\` as input and returns the sum of the squares of all integers from 1 to \`n\` and the sum of the cubes of all integers from 1 to \`n\`. The function should return both sums as a tuple \`(square_sum, cube_sum)\`.","solution":"def sum_of_squares_and_cubes(n): Returns the sum of the squares of all integers from 1 to n and the sum of the cubes of all integers from 1 to n as a tuple (square_sum, cube_sum). square_sum = sum(i ** 2 for i in range(1, n + 1)) cube_sum = sum(i ** 3 for i in range(1, n + 1)) return (square_sum, cube_sum)"},{"question":"Create a function that takes an array as a parameter and returns a new array containing the sorted elements of the original array.","solution":"def sort_array(arr): Returns a new array containing the sorted elements of the original array. return sorted(arr)"},{"question":"Create a function that takes in a string and returns the string with all vowels removed. For example, removeVowels(\\"Hello World\\") should return \\"Hll Wrld\\".","solution":"def remove_vowels(input_string): Removes all vowels from the input string. Parameters: input_string (str): The string from which to remove vowels. Returns: str: The string with all vowels removed. vowels = \\"aeiouAEIOU\\" return ''.join(char for char in input_string if char not in vowels)"},{"question":"Create a function that takes an array of integers as input and returns a boolean indicating whether the array contains consecutive integers. Consecutive integers are those where the difference between the maximum and minimum values in the array is equal to the length of the array minus one.","solution":"def contains_consecutive_integers(arr): Check if the array contains consecutive integers. :param arr: List of integers :return: Boolean indicating whether the array contains consecutive integers if not arr: return False min_val = min(arr) max_val = max(arr) return max_val - min_val == len(arr) - 1"},{"question":"Create a function that generates a list of all possible permutations of a given list of elements. A permutation is an arrangement of all or part of a set of objects, with regard to the order of the arrangement. For example, the permutations of the list \`[1, 2, 3]\` are \`[1, 2, 3]\`, \`[1, 3, 2]\`, \`[2, 1, 3]\`, \`[2, 3, 1]\`, \`[3, 1, 2]\`, and \`[3, 2, 1]\`.","solution":"import itertools def generate_permutations(elements): Generates a list of all possible permutations of a given list of elements. Parameters: elements (list): The list of elements to permute. Returns: list: A list of all possible permutations. return list(itertools.permutations(elements))"},{"question":"Create a function that takes two integers, a and b, as input and returns their sum. However, if either of the integers is a multiple of 3, subtract 1 from the sum before returning it.","solution":"def custom_add(a, b): Returns the sum of a and b. If either a or b is a multiple of 3, subtract 1 from the sum. result = a + b if a % 3 == 0 or b % 3 == 0: result -= 1 return result"},{"question":"Create a function that can calculate the product of two numbers. I am expecting my function to return the multiplication result of two inputs.","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Create a function that converts a 2D list into a 1D list by flattening the 2D list. How should the function handle cases where the 2D list contains nested lists of varying depths?","solution":"def flatten_list(nested_list): Flattens a 2D list into a 1D list. Handles nested lists of varying depths. Args: nested_list (list): A list which may contain nested lists. Returns: list: A flattened 1D list. flat_list = [] def _flatten(sublist): for item in sublist: if isinstance(item, list): _flatten(item) else: flat_list.append(item) _flatten(nested_list) return flat_list"},{"question":"Create a function that takes a string as input. This string consists of single or multiple words separated by spaces. The function should return a new string where each word's characters are sorted in ascending order based on their ASCII values. The function should also handle cases where the string contains punctuation.","solution":"def sort_characters_in_words(input_string): Takes a string as input and returns a new string where each word's characters are sorted in ascending order based on their ASCII values. Punctuation is considered part of the word. words = input_string.split() sorted_words = [''.join(sorted(word)) for word in words] return ' '.join(sorted_words)"},{"question":"Create a function that takes an array as input and returns the array's length.","solution":"def array_length(arr): Returns the length of the given array. Parameters: arr (list): The input array. Returns: int: The length of the array. return len(arr)"},{"question":"Create a function that converts a list of integers into a list of strings","solution":"def convert_to_string_list(int_list): Converts a list of integers into a list of strings. Parameters: int_list (list of int): A list of integer values. Returns: list of str: A list of string representations of the integers. return [str(i) for i in int_list]"},{"question":"Create a function that takes a list of integers and returns the minimum sum of any non-empty subsequence of the list.","solution":"def min_subsequence_sum(arr): Returns the minimum sum of any non-empty subsequence of the list. Args: arr (List[int]): A list of integers. Returns: int: The minimum sum of any non-empty subsequence. if not arr: raise ValueError('Input list cannot be empty.') return min(arr)"},{"question":"Create a function that takes in a string as input and returns a new string that is a palindrome.","solution":"def make_palindrome(s): Returns a new string that is a palindrome by appending the reverse of the string (excluding the last character) to itself. return s + s[-2::-1]"},{"question":"Create a function that takes in an array of integers and returns the maximum sum of any two elements in the array. If the array has less than two elements, return the maximum element in the array.","solution":"def max_sum_of_two_elements(arr): Returns the maximum sum of any two elements in the array. If the array has less than two elements, return the maximum element in the array. if len(arr) < 2: return max(arr) if arr else None sorted_arr = sorted(arr, reverse=True) return sorted_arr[0] + sorted_arr[1]"},{"question":"Create a function that takes a list of numbers and returns a new list with each number incremented by 1 and then multiplied by 2.","solution":"def increment_and_multiply(numbers): Takes a list of numbers and returns a new list where each number is incremented by 1 and then multiplied by 2. return [(num + 1) * 2 for num in numbers]"},{"question":"Create a function that formats a number to have commas as thousands separators and returns the formatted number as a string. This function should take a single argument, a number that may be an integer or a float, and return a string.","solution":"def format_number(number): Formats a number to have commas as thousands separators. Args: number (int or float): The input number to format. Returns: str: The formatted number as a string with commas as thousands separators. return \\"{:,}\\".format(number)"},{"question":"Create a function that calculates the total cost of an online shopping cart based on item prices. The function should accept a dictionary where the keys are item names and the values are their respective prices. The function should return the total cost of the cart.","solution":"def calculate_total(cart): Calculate the total cost of an online shopping cart. Parameters: cart (dict): A dictionary where keys are item names and values are their respective prices. Returns: float: The total cost of the cart. return sum(cart.values())"},{"question":"Create a function that takes two arrays of integers as input and calculates the sum of the products of corresponding elements in each array. The function should handle cases where the arrays are of different lengths by only considering elements up to the length of the shorter array.","solution":"def sum_of_products(arr1, arr2): Returns the sum of the products of corresponding elements from two arrays. Only considers elements up to the length of the shorter array. Parameters: arr1 (list[int]): First array of integers. arr2 (list[int]): Second array of integers. Returns: int: The sum of the products. return sum(a * b for a, b in zip(arr1, arr2))"},{"question":"Create a function that calculates the binomial coefficient for given integers n and k. The function should handle large values of n and k efficiently. The binomial coefficient, often denoted as \\"n choose k\\" or C(n, k), is defined as the number of ways to choose k elements from a set of n distinct elements.","solution":"from math import factorial def binomial_coefficient(n, k): Calculates the binomial coefficient C(n, k) which represents the number of ways to choose k elements from a set of n distinct elements. Args: n (int): Total number of distinct elements k (int): Number of elements to choose Returns: int: The binomial coefficient C(n, k) if k > n: return 0 if k == 0 or k == n: return 1 # Utilizes the formula C(n, k) = n! / (k! * (n - k)!) k = min(k, n - k) # Efficiency improvement numerator = factorial(n) denominator = factorial(k) * factorial(n - k) return numerator // denominator"},{"question":"Create a function that will return the nth smallest value in a given array of integers, but your function must not use built-in sorting methods like sort() or sorted(). Instead, implement a selection algorithm to find the nth smallest value. You need to handle edge cases, such as when n is less than or equal to 0 or when n is greater than the length of the array.","solution":"def nth_smallest(arr, n): Returns the nth smallest value in the given array of integers using a selection algorithm. Parameters: arr (list of int): List of integers n (int): The nth smallest value to find Returns: int or None: The nth smallest value or None if n is out of bounds if n <= 0 or n > len(arr): return None def partition(arr, left, right): pivot = arr[right] i = left for j in range(left, right): if arr[j] < pivot: arr[i], arr[j] = arr[j], arr[i] i += 1 arr[i], arr[right] = arr[right], arr[i] return i def quickselect(arr, left, right, n): if left == right: return arr[left] pivot_index = partition(arr, left, right) if n == pivot_index: return arr[pivot_index] elif n < pivot_index: return quickselect(arr, left, pivot_index - 1, n) else: return quickselect(arr, pivot_index + 1, right, n) return quickselect(arr, 0, len(arr) - 1, n - 1) # n-1 for zero-based index"},{"question":"Create a function that takes in an array of integers and returns the maximum sum of any non-empty subarray. A subarray is a contiguous part of an array.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any non-empty subarray. if not arr: return 0 current_sum = best_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) best_sum = max(best_sum, current_sum) return best_sum"},{"question":"Create a function that takes a string as input and returns the length of the longest common prefix between the input string and a predefined string stored as a constant.","solution":"PREDEFINED_STRING = \\"developer\\" def longest_common_prefix_length(input_string): Returns the length of the longest common prefix between input_string and the predefined string. i = 0 while i < len(input_string) and i < len(PREDEFINED_STRING) and input_string[i] == PREDEFINED_STRING[i]: i += 1 return i"},{"question":"Create a function that takes two parameters an array and a number, and returns true if the number is present in the array. Otherwise, return false.","solution":"def contains_number(arr, num): Returns True if num is present in arr, otherwise returns False. return num in arr"},{"question":"Create a function that returns 'Hello, <name>!' where <name> is a parameter passed into the function.","solution":"def greet(name): Returns a greeting string that includes the given name. return f'Hello, {name}!'"},{"question":"Create a function that takes an integer as input and returns a string representation of the integer.","solution":"def int_to_string(n): Converts an integer to its string representation. Parameters: n (int): The integer to be converted. Returns: str: The string representation of the input integer. return str(n)"},{"question":"Create a function that generates a list of all possible combinations of a given length k, from a set of n distinct elements. This function should return a list of lists containing these combinations.","solution":"from itertools import combinations def generate_combinations(n, k): Generate all possible combinations of a given length k, from a set of n distinct elements. Args: n (list): List of n distinct elements. k (int): The length of combinations to be generated. Returns: list: A list of lists containing all possible combinations. return [list(combo) for combo in combinations(n, k)]"},{"question":"Create a function that , given a number n, returns the sum of the digits of n. If n is negative, the function should return the sum of the digits of the absolute value of n. Make sure your code includes comments explaining each step.","solution":"def sum_of_digits(n): Returns the sum of the digits of n. If n is negative, returns the sum of the digits of the absolute value of n. # Convert to absolute value to handle negative numbers n = abs(n) # Convert number to string to iterate over each digit n_str = str(n) # Initialize the sum total = 0 # Loop through each character in the string representation of the number for digit in n_str: # Convert character to integer and add to the total sum total += int(digit) return total"},{"question":"Create a function that takes an integer as input and returns a sorted list of its unique factors (excluding the number itself) in ascending order.","solution":"def unique_factors(n): Returns a sorted list of unique factors of n (excluding n itself). if n <= 0: return [] factors = set() for i in range(1, int(n ** 0.5) + 1): if n % i == 0: factors.add(i) factors.add(n // i) factors.discard(n) return sorted(factors)"},{"question":"Create a function that takes a sorted array and a target value, and returns the index of the target value in the array. If the target is not found, return -1. The function should perform this search using the Binary Search algorithm.","solution":"def binary_search(arr, target): Perform a binary search to find the target value in the sorted array. Parameters: arr (list of int): The sorted array where the target is to be searched. target (int): The target value to search for. Returns: int: The index of the target value if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that takes in a string parameter and returns a new string with all non-alphanumeric characters removed. You should also ensure that the returned string is in lowercase.","solution":"import re def clean_string(s): Takes in a string parameter and returns a new string with all non-alphanumeric characters removed. The returned string is also in lowercase. return re.sub(r'[^a-zA-Z0-9]', '', s).lower()"},{"question":"Create a function that accepts an array of integers and outputs the sum of all numbers that are multiples of 3 and 5.","solution":"def sum_of_multiples(arr): Returns the sum of all numbers in the array that are multiples of both 3 and 5. Arguments: arr -- list of integers Returns: int -- sum of multiples of both 3 and 5 return sum(x for x in arr if x % 3 == 0 and x % 5 == 0)"},{"question":"Create a function that takes an integer n as input and prints all prime numbers up to n.","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def print_primes_up_to(n): Returns a list of all prime numbers up to n. return [i for i in range(2, n + 1) if is_prime(i)]"},{"question":"Create a function that takes a string as an argument and returns the number of vowels minus the number of consonants in the string.","solution":"def vowels_minus_consonants(s): Returns the number of vowels minus the number of consonants in the string. vowels = 'aeiouAEIOU' num_vowels = 0 num_consonants = 0 for char in s: if char.isalpha(): if char in vowels: num_vowels += 1 else: num_consonants += 1 return num_vowels - num_consonants"},{"question":"Create a function that takes a list of integers as input and returns their sum using recursion.","solution":"def recursive_sum(arr): Returns the sum of elements in the list using recursion. Parameters: arr (list): List of integers Returns: int: Sum of the elements in the list if len(arr) == 0: return 0 return arr[0] + recursive_sum(arr[1:])"},{"question":"Create a function that generates a list containing the first n Fibonacci numbers. The function should be named \`fibonacci_list\` and should take one parameter, \`n\`, which is the number of Fibonacci numbers to generate. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci_list(n): Generates and returns a list containing the first n Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] for _ in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Create a function that takes as input a dictionary, and returns a new dictionary that only contains the key-value pairs where the key is an even number. If the input dictionary contains a non-integer key, such a key-value pair should be omitted in the output dictionary.","solution":"def filter_even_keys(input_dict): This function takes a dictionary as input and returns a new dictionary containing only the key-value pairs where the key is an even integer. Parameters: input_dict (dict): The input dictionary Returns: dict: A dictionary with only even integer keys return {k: v for k, v in input_dict.items() if isinstance(k, int) and k % 2 == 0}"},{"question":"Create a function that checks if a string is a valid URL.","solution":"import re def is_valid_url(url): Returns True if the input string is a valid URL, otherwise returns False. regex = re.compile( r'^(https?|ftp)://' r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?.)+(?:[A-Z]{2,6}.?|[A-Z0-9-]{2,}.?)|' r'localhost|' r'd{1,3}.d{1,3}.d{1,3}.d{1,3}|' r'[?[A-F0-9]*:[A-F0-9:]+]?)' r'(?::d+)?' r'(?:/?|[/?]S+)', re.IGNORECASE) return re.match(regex, url) is not None"},{"question":"Create a function that takes a string and removes all occurrences of the character 'x'. Make sure the function is efficient and handles edge cases such as empty strings.","solution":"def remove_x(s: str) -> str: Returns a new string with all occurrences of the character 'x' removed. Parameters: s (str): The input string from which 'x' should be removed Returns: str: A new string without the character 'x' return s.replace('x', '')"},{"question":"Create a function that accepts two numbers as input and returns their sum. Additionally, the function should be able to handle a third optional parameter which, if provided, will be added to the sum. Otherwise, the function should return only the sum of the first two numbers.","solution":"def add(a, b, c=None): Return the sum of two numbers. If a third number is provided, add it to the sum of the first two numbers. :param a: The first number. :param b: The second number. :param c: The optional third number. :return: The sum of a, b, and optionally c. if c is not None: return a + b + c return a + b"},{"question":"Create a function that accepts two parameters: an integer n and a string s. The function should return a new string where each character in s is repeated n times. For example, if n=3 and s=\\"abc\\", the function should return \\"aaabbbccc\\".","solution":"def repeat_chars(n, s): Accepts an integer n and a string s, and returns a new string where each character in s is repeated n times. :param n: an integer that specifies the number of times each character should be repeated :param s: the input string :return: a new string with each character repeated n times return ''.join([char * n for char in s])"},{"question":"Create a function that takes a list of integers and returns the sum of the maximum and minimum elements in the list.","solution":"def sum_of_max_min(lst): Returns the sum of the maximum and minimum elements in the list. Parameters: lst (list): A list of integers Returns: int: The sum of the maximum and minimum elements in the list if not lst: raise ValueError(\\"The list should not be empty\\") max_val = max(lst) min_val = min(lst) return max_val + min_val"},{"question":"Create a function that generates a random alphanumeric string of a specified length using Python.","solution":"import random import string def generate_random_string(length): Generates a random alphanumeric string of a specified length. :param length: Length of the generated string. :type length: int :return: Random alphanumeric string of the specified length. :rtype: str if length < 1: raise ValueError(\\"Length must be a positive integer.\\") characters = string.ascii_letters + string.digits random_string = ''.join(random.choice(characters) for _ in range(length)) return random_string"},{"question":"Create a function that takes two parameters: a dictionary and a list of keys. The function should return the value associated with the first key that exists in the dictionary, and if none exist, return a default message.","solution":"def get_first_existing_key_value(dictionary, keys, default_message=\\"Key not found\\"): Returns the value associated with the first key that exists in the dictionary. If none of the keys exist, return a default message. :param dictionary: dict :param keys: list of keys to check :param default_message: message to return if no keys exist in the dictionary :return: value associated with the first existing key, or the default message for key in keys: if key in dictionary: return dictionary[key] return default_message"},{"question":"Create a function that determines if a given year is a leap year or not. A leap year is defined as a year that is evenly divisible by 4 but not every 100 years unless it is also divisible by 400. For example, the years 2000 and 2400 are leap years, but 1800 and 1900 are not.","solution":"def is_leap_year(year): Determines if a given year is a leap year or not. A leap year is defined as a year that is evenly divisible by 4, except every 100 years unless it is also divisible by 400. Parameters: year (int): The year to be checked. Returns: bool: True if the year is a leap year, False otherwise. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True return False"},{"question":"Create a function that takes two lists of integers and returns a list with their intersection, and another list with their union.","solution":"def intersection_and_union(list1, list2): Returns two lists: - Intersection of the input lists - Union of the input lists set1 = set(list1) set2 = set(list2) intersection = list(set1 & set2) union = list(set1 | set2) return intersection, union"},{"question":"Create a function that checks if an integer has a repeating digit. If a digit is repeated more than once, the function should return True, otherwise, it should return False.","solution":"def has_repeating_digit(n): Checks if an integer has a repeating digit. Parameters: n (int): The integer to check for repeating digits. Returns: bool: True if there are repeating digits, False otherwise. n_str = str(abs(n)) # Convert to string and take the absolute value to handle negative numbers digit_set = set() for char in n_str: if char in digit_set: return True digit_set.add(char) return False"},{"question":"Create a function that takes a string as input and returns the string with all the consonants removed.","solution":"def remove_consonants(input_string): Returns the input string with all consonants removed. vowels = 'aeiouAEIOU' return ''.join([char for char in input_string if char in vowels or not char.isalpha()])"},{"question":"Create a function that calculates the factorial of a given number. Then, extend it to calculate the factorial of a list of numbers. For example, if the input is [1, 2, 3, 4], the output should be [1, 2, 6, 24].","solution":"def factorial(n): Returns the factorial of n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result def factorial_list(numbers): Returns the list of factorials for the given list of numbers. return [factorial(n) for n in numbers]"},{"question":"Create a function that takes an array of integers and returns the sum of all positive integers exactly divisible by 3. The function should handle edge cases, such as an empty array or an array with no positive integers divisible by 3.","solution":"def sum_of_positives_divisible_by_3(arr): Returns the sum of all positive integers in the array that are exactly divisible by 3. Parameters: arr (list of int): The input array of integers. Returns: int: The sum of all positive integers divisible by 3. return sum(x for x in arr if x > 0 and x % 3 == 0)"},{"question":"Create a function that takes an array of integers with at least three elements. The function should return the second largest number in the array.","solution":"def second_largest(numbers): Returns the second largest number in the array. Parameters: numbers (list): A list of integers with at least three elements. Returns: int: The second largest number in the list. if len(numbers) < 3: raise ValueError(\\"Array must have at least three elements\\") # Convert to a set to remove duplicates and then sort the numbers unique_numbers = sorted(set(numbers), reverse=True) if len(unique_numbers) < 2: raise ValueError(\\"Array must have at least two unique elements\\") # Return the second largest number return unique_numbers[1]"},{"question":"Create a function that returns the sum of the first \`n\` even numbers. How would you write a function in Python to achieve this? Also, explain the solution with the code comments.","solution":"def sum_of_first_n_even_numbers(n): Returns the sum of the first n even numbers. Example: If n = 3, the sum of first 3 even numbers (0, 2, 4) will be 0 + 2 + 4 = 6. The nth even number is given by the formula: 2 * (n-1) Therefore, the first n even numbers are: 0, 2, 4, ..., 2*(n-1) Summing these numbers gives: sum = 0 + 2 + 4 + ... + 2*(n-1) = 2 * (0 + 1 + 2 + ... + (n-1)) Using the formula for the sum of the first k natural numbers (k * (k + 1)) / 2: sum = 2 * (sum of first (n-1) natural numbers) = 2 * (n * (n-1) / 2) = n * (n-1) return n * (n - 1)"},{"question":"Create a function that generates a list of all possible combinations of a given list of elements where the length of each combination is a specified number.","solution":"from itertools import combinations def generate_combinations(elements, combination_length): Generates a list of all possible combinations of a given list of elements where the length of each combination is a specified number. Parameters: elements (list): The list of elements to combine. combination_length (int): The length of each combination. Returns: list: A list of tuples, each containing a combination of elements. return list(combinations(elements, combination_length))"},{"question":"Create a function that takes a list of integers as an argument and returns a new list containing the squares of these integers, but only for integers greater than 10. If the list is empty or contains no integers greater than 10, return an empty list.","solution":"def squares_of_integers_greater_than_10(numbers): Returns a list of the squares of integers greater than 10 from the input list. Parameters: numbers (list): A list of integers. Returns: list: A new list containing the squares of integers greater than 10. return [x ** 2 for x in numbers if x > 10]"},{"question":"Create a function that takes a string as an argument and returns the number of characters in the string. If the string is empty, return 0. Additionally, if the string contains only spaces, return 'String is empty!'.","solution":"def count_chars(s: str) -> int: Returns the number of characters in the string s. If the string is empty, returns 0. If the string contains only spaces, returns 'String is empty!'. if len(s) == 0: return 0 elif s.strip() == \\"\\": return 'String is empty!' else: return len(s)"},{"question":"Create a function that takes an array of integers as input and returns a new array with the elements sorted in reverse order.","solution":"def reverse_sort_array(arr): Takes an array of integers and returns a new array with the elements sorted in reverse order. return sorted(arr, reverse=True)"},{"question":"Create a function that takes a number and a divisor as input and returns the quotient and remainder when the number is divided by the divisor.","solution":"def divide(number, divisor): Returns the quotient and remainder when number is divided by divisor. Parameters: number (int): the number to be divided divisor (int): the number by which to divide Returns: tuple: (quotient, remainder) quotient = number // divisor remainder = number % divisor return (quotient, remainder)"},{"question":"Create a function that takes a list of integers as an input and returns their factorial. However, ensure that this function raises an appropriate error if the input list does not either contain only integers and is not empty.","solution":"import math def factorial_list(int_list): Returns a list containing the factorial of each integer in the input list. Args: int_list: List of integers Returns: List of integers where each element is the factorial of the corresponding input list element. Raises: ValueError: if the input list is empty or contains non-integer elements. if not int_list or not all(isinstance(x, int) for x in int_list): raise ValueError(\\"Input list must contain only integers and must not be empty.\\") return [math.factorial(x) for x in int_list]"},{"question":"Create a function that rotates an array to the right by a given number of positions. The array is represented as a list in Python. The function should take two arguments: the list and the number of positions to rotate the array. If the number of positions exceeds the length of the array, the function should rotate it as many times as the remainder of the division of the number of positions by the length of the array. The function should return the rotated array.","solution":"def rotate_array(arr, positions): Rotates an array to the right by a given number of positions. Parameters: arr (list): The array to be rotated. positions (int): The number of positions to rotate the array. Returns: list: The rotated array. if not arr: return arr n = len(arr) positions = positions % n # reduce the number of rotations if greater than the array length return arr[-positions:] + arr[:-positions]"},{"question":"Create a function that calculates the total time taken to traverse all the nodes of a Binary Search Tree (BST) using Depth-First Search (DFS). Each node in the BST has a time cost associated with it. The function should take an integer array \`nodeTimes\` representing the time cost of each node in the order of in-order traversal, and an integer \`n\` representing the number of nodes. The time cost of each node is in the range of [1, 1000].","solution":"def total_time_dfs(nodeTimes, n): Returns the total time taken to traverse all nodes of a BST using DFS. :param nodeTimes: List of integers representing the time cost of each node in in-order traversal. :param n: Integer representing the number of nodes in the BST. :return: Integer representing the total traversal time. if len(nodeTimes) != n: raise ValueError(\\"Length of nodeTimes array must match the number of nodes n.\\") total_time = sum(nodeTimes) return total_time"},{"question":"Create a function that takes a string as input and returns an integer representing the number of alphabetic characters in the string, ignoring spaces and non-alphabetic characters.","solution":"def count_alphabetic_characters(s): Returns the number of alphabetic characters in the input string s, ignoring spaces and non-alphabetic characters. return sum(1 for c in s if c.isalpha())"},{"question":"Create a function that takes two integers, \`i\` and \`n\`, and returns the number of times \`i\` can be divided by \`n\` until it becomes less than \`n\`. For example, if \`i\` is 24 and \`n\` is 3, the function should return 2 because \`24\` can be divided by \`3\` twice (becoming \`8\` and then \`2\` in the first iteration, and \`8\` in the second iteration) before it becomes less than \`n\`.","solution":"def division_count(i, n): Returns the number of times \`i\` can be divided by \`n\` until it becomes less than \`n\`. count = 0 while i >= n: i //= n count += 1 return count"},{"question":"Create a function that accepts an integer \`n\` and outputs a list of all prime numbers up to \`n\`.","solution":"def is_prime(n): Helper function that returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def primes_up_to(n): Returns a list of all prime numbers up to and including n. return [x for x in range(n + 1) if is_prime(x)]"},{"question":"Create a function that takes a list of elements and returns a tuple containing the maximum, minimum, and average of the elements in the list. If the list is empty, the function should return \`(None, None, None)\`.","solution":"def max_min_avg(lst): Returns a tuple containing the maximum, minimum, and average of elements in lst. If the list is empty, return (None, None, None). if not lst: return (None, None, None) max_val = max(lst) min_val = min(lst) avg_val = sum(lst) / len(lst) return (max_val, min_val, avg_val)"},{"question":"Create a function that takes two strings as input and returns a string that is the result of concatenating the two input strings using the addition operator. Make sure to test your function with various input values to ensure it behaves as expected.","solution":"def concatenate_strings(str1, str2): Concatenates two input strings using the addition operator. return str1 + str2"},{"question":"Create a function that takes a string and returns the number of characters in it.","solution":"def count_characters(s): Returns the number of characters in the string s. return len(s)"},{"question":"Create a function that takes an integer as input, reverses the digits of the number, and checks if the reversed number is a palindrome. Return the result as a boolean value. A palindrome is a number that reads the same backward as forward.","solution":"def is_reversed_number_palindrome(n): Reverses the digits of the number n and checks if the reversed number is a palindrome. Args: n: int: The input integer to reverse and check. Returns: bool: True if the reversed number is a palindrome, False otherwise. # Convert number to string to easily reverse it str_n = str(n) reversed_str_n = str_n[::-1] # Check if the reversed string is a palindrome return reversed_str_n == reversed_str_n[::-1]"},{"question":"Create a function that takes two arguments, \`a\` and \`b\`, and returns a list of squares of all numbers in the range from \`a\` to \`b\` (inclusive). The function should be efficient and handle non-integer and out-of-range values gracefully.","solution":"def range_squares(a, b): Returns a list of squares of all numbers in the range from a to b (inclusive). If a or b are not integers or if a is greater than b, returns an empty list. if not isinstance(a, int) or not isinstance(b, int) or a > b: return [] return [i**2 for i in range(a, b+1)]"},{"question":"Create a function that takes two lists, list1 and list2 as parameters. The function should return a new list that contains only the elements that are common to both list1 and list2. However, the returned list should not contain any duplicates.","solution":"def common_elements(list1, list2): Returns a list that contains only the elements that are common to both list1 and list2, without any duplicates. return list(set(list1) & set(list2))"},{"question":"Create a function that generates a Fibonacci sequence within a given range. The function should take three parameters: the start, end, and step values of the range. The Fibonacci sequence should be generated within the range of start to end, and then step through the sequence incrementally by the step value.","solution":"def fibonacci_range(start, end, step): Generate a Fibonacci sequence within a given range. :param start: The lower bound of the range (inclusive). :param end: The upper bound of the range (inclusive). :param step: The step value for slicing the sequence. :return: A list containing the sliced Fibonacci sequence within the specified range. # Generate the Fibonacci sequence until the upper bound 'end' fibonacci_sequence = [0, 1] while True: next_value = fibonacci_sequence[-1] + fibonacci_sequence[-2] if next_value > end: break fibonacci_sequence.append(next_value) # Filter Fibonacci numbers within the range [start, end] fibonacci_range = [num for num in fibonacci_sequence if start <= num <= end] # Step through the sequence incrementally by the 'step' value return fibonacci_range[::step]"},{"question":"Create a function that takes an array of integers as input and returns the maximum sum of a contiguous subarray within the array. This function should handle both positive and negative integers.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray within the input array. :param nums: List of integers :return: Integer, maximum sum of a contiguous subarray if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that takes two arrays as inputs. The function should return the common elements between the two arrays. Make sure the function is efficient and works well with large datasets.","solution":"def find_common_elements(arr1, arr2): Returns a list of common elements between two arrays. set1 = set(arr1) set2 = set(arr2) return list(set1.intersection(set2))"},{"question":"Create a function that takes a string as an input and returns a boolean value that indicates whether that string is a palindrome or not (a palindrome is a word that reads equally backwards as forwards, ignoring cases).","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, ignoring case, otherwise returns False. # Normalize the string by converting to lower case s = s.lower() # Check if the string reads the same forwards and backwards return s == s[::-1]"},{"question":"Create a function that returns the result of an expression involving addition, subtraction, multiplication, and division using operator precedence and associativity rules.","solution":"def evaluate_expression(expression): Evaluates an arithmetic expression containing addition, subtraction, multiplication, and division, respecting operator precedence and associativity rules. Parameters: - expression: a string containing the arithmetic expression to evaluate. Returns: - The result of the evaluated expression. try: result = eval(expression) return result except Exception as e: return str(e)"},{"question":"Create a function that takes a variable 'a' as an input and returns the product of 'a' and the sum of its digits. The sum of digits is calculated by adding up all the single digits that make up the number.","solution":"def product_of_sum_of_digits(a): Takes a variable 'a' and returns the product of 'a' and the sum of its digits. sum_of_digits = sum(int(digit) for digit in str(abs(a))) return a * sum_of_digits"},{"question":"Create a function that reverses the words in a string and also reverses each word in the string. The function should ignore punctuation and spaces at the beginning and end of the string.","solution":"def reverse_words_and_letters(s): Reverse the words in a string and also reverse each word in the string. Ignore punctuation and spaces at the beginning and end of the string. # Strip leading and trailing spaces stripped_s = s.strip() # Split the string into words words = stripped_s.split() # Reverse each word and the order of words reversed_words = [word[::-1] for word in words][::-1] # Join the reversed words into a single string result = ' '.join(reversed_words) return result"},{"question":"Create a function that takes in a sentence as an argument and returns a new sentence where every word is reversed but the order of the words remains the same. For example, the input \\"hello world\\" should return \\"olleh dlrow\\".","solution":"def reverse_words_in_sentence(sentence): Returns a sentence where each word is reversed but the order remains the same. Parameters: sentence (str): The input sentence. Returns: str: The sentence with each word reversed. words = sentence.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Create a function that takes a dictionary as an input and returns a new dictionary with each key still being the original key, but the value being the list of all keys that map to it in the original dictionary.","solution":"def invert_dict(orig_dict): Inverts the input dictionary. Parameters: orig_dict (dict): The original dictionary to be inverted. Returns: dict: A dictionary where each key is still the original key, but the value is the list of all keys that map to it in the original dictionary. inverted_dict = {} for key, value in orig_dict.items(): if value not in inverted_dict: inverted_dict[value] = [] inverted_dict[value].append(key) return inverted_dict"},{"question":"Create a function that takes a list of strings and returns a list of integers representing the length of each string in the input list.","solution":"def lengths_of_strings(string_list): Takes a list of strings and returns a list of integers representing the length of each string in the list. return [len(s) for s in string_list]"},{"question":"Create a function that converts an integer to its binary representation as a string, but with a twist. Instead of simply converting the integer to binary, we want to format it as \\"binary_XXX\\", where XXX represents the binary representation of the integer without the \\"0b\\" prefix.","solution":"def int_to_binary_with_prefix(n): Converts an integer n to a string with format \\"binary_XXX\\", where XXX is the binary representation of n without the '0b' prefix. return f\\"binary_{bin(n)[2:]}\\""},{"question":"Create a function that can perform basic arithmetic operations such as addition, subtraction, multiplication, and division on two numbers.","solution":"def basic_arithmetic(a, b, operation): Perform basic arithmetic operations on two numbers. Parameters: a (float): The first number. b (float): The second number. operation (str): The operation to perform ('+', '-', '*', '/'). Returns: float: The result of the operation. Raises: ValueError: If an unsupported operation is specified. ZeroDivisionError: If division by zero is attempted. if operation == '+': return a + b elif operation == '-': return a - b elif operation == '*': return a * b elif operation == '/': if b == 0: raise ZeroDivisionError(\\"Division by zero is not allowed.\\") return a / b else: raise ValueError(f\\"Unsupported operation '{operation}'.\\")"},{"question":"Create a function that takes in a string and returns a dictionary where the keys represent the unique words and the values represent the frequencies of those words in the string. For example, if the input is \\"apple banana apple\\", the output should be {'apple': 2, 'banana': 1}.","solution":"def word_frequency(input_string): Returns a dictionary where the keys are the unique words and the values are the frequencies of those words in the input string. Args: input_string (str): The input string containing words. Returns: dict: A dictionary with words as keys and their frequencies as values. words = input_string.split() frequency_dict = {} for word in words: if word in frequency_dict: frequency_dict[word] += 1 else: frequency_dict[word] = 1 return frequency_dict"},{"question":"Create a function that takes a list of integers as input and returns a new list where every element is doubled. Use list comprehension for this task.","solution":"def double_elements(nums): Returns a new list with every element in the nums list doubled. return [x * 2 for x in nums]"},{"question":"Create a function that takes a list of integers and returns the maximum sum possible from any contiguous subarray within the list. This is known as the \\"Maximum Subarray Problem\\". The function should have a time complexity of O(n).","solution":"def max_subarray_sum(arr): Returns the maximum sum possible from any contiguous subarray within the list. Implements Kadane's Algorithm which has a time complexity of O(n). if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that accepts two strings as parameters. The function should return the concatenation of the two strings.","solution":"def concatenate_strings(str1, str2): Concatenates two input strings and returns the result. Parameters: - str1 (str): The first string. - str2 (str): The second string. Returns: str: The concatenation of str1 and str2. return str1 + str2"},{"question":"Create a function that returns the nth element of a Fibonacci sequence using recursion. Remember, the Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci(n): Returns the nth element of the Fibonacci sequence using recursion. if n <= 0: raise ValueError(\\"n should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function that identifies the second smallest number in an array of integers. If the array is empty or does not contain distinct elements, the function should return \`None\`.","solution":"def second_smallest(numbers): Returns the second smallest number in an array of integers. If the array is empty or does not contain distinct elements, returns None. if len(numbers) < 2: return None # Use set to remove duplicates and sort the numbers unique_numbers = sorted(set(numbers)) if len(unique_numbers) < 2: return None return unique_numbers[1]"},{"question":"Create a function that calculates the factorial of a number. The function should handle edge cases where the input is negative or zero.","solution":"def factorial(n): Returns the factorial of n. Handles edge cases for negative inputs. if n < 0: return \\"Undefined for negative numbers\\" elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that returns the maximum depth of a binary tree. The depth of a binary tree is the number of nodes along the longest path from the root node down to the farthest leaf node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root: TreeNode) -> int: Returns the maximum depth of a binary tree. if root is None: return 0 left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Create a function that takes a list of integers as a parameter and returns a new list where each element is increased by 2.","solution":"def increase_by_two(lst): Takes a list of integers and returns a new list where each element is increased by 2. Parameters: lst (list of int): The input list of integers Returns: list of int: A new list with each integer increased by 2 return [x + 2 for x in lst]"},{"question":"Create a function that searches for a specific value in a 2D array in Python. The function should return the element if it's found, otherwise, return a message saying that the element is not found. Write a Python function to achieve this.","solution":"def search_2d_array(arr, value): Searches for a specific value in a 2D array and returns the value if found. Otherwise, returns a message saying that the element is not found. Parameters: arr (list of list of any): The 2D array to search in. value (any): The value to search for. Returns: any: The value if it is found or a string message if not found. for row in arr: if value in row: return value return \\"Element not found\\""},{"question":"Create a function that takes two arguments: a list of integers and a target integer. The function should return a list of indices where the target integer is found in the list. If the target is not found, return an empty list.","solution":"def find_indices(lst, target): Returns a list of indices where the target integer is found in the list. If the target is not found, returns an empty list. return [index for index, value in enumerate(lst) if value == target]"},{"question":"Create a function that takes an integer as input and returns the number of digits in that integer. If the integer is negative, ignore the sign and count the digits of the absolute value.","solution":"def count_digits(n): Returns the number of digits in the given integer. If the integer is negative, the sign is ignored. return len(str(abs(n)))"},{"question":"Create a function that takes two string parameters and returns the concatenated string after checking if they are both non-empty and contain only alphabetic characters. If they meet these conditions, concatenate them; otherwise, return an error message.","solution":"def concatenate_strings(str1, str2): Concatenates two strings if they are both non-empty and contain only alphabetic characters. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: str: The concatenated string or an appropriate error message. if not str1 or not str2: return \\"Error: One or both strings are empty.\\" if not str1.isalpha() or not str2.isalpha(): return \\"Error: One or both strings contain non-alphabetic characters.\\" return str1 + str2"},{"question":"Create a function that takes in two parameters: an array of characters and a specific character as an argument and returns the number of times the specific character appears in the array.","solution":"def count_specific_char(arr, char): Returns the number of times the specific character appears in the array. Parameters: arr (list): List of characters. char (str): The specific character to count in the array. Returns: int: The count of the specific character in the array. return arr.count(char)"},{"question":"Create a function that receives a string as an input and returns the string that is the reverse of the input string, but with all characters converted to lowercase. For example, if the input string is \\"Hello World!!!\\", the function should return \\"!!!dlrow olleh\\".","solution":"def reverse_lowercase_string(s): Returns the reverse of the input string with all characters converted to lowercase. return s[::-1].lower()"},{"question":"Create a function that takes two string parameters and returns a single string that is a concatenation of both input strings and the string \\"Hello\\". The function should also handle cases where one or both of the input strings are empty.","solution":"def concatenate_with_hello(str1, str2): Concatenates two strings with the string \\"Hello\\" in between. return f\\"{str1}Hello{str2}\\""},{"question":"Create a function that finds prime numbers within a given range [a, b] where a and b are the start and end of the range respectively. The function should return a list of all prime numbers found in that range, including both a and b if they are prime.","solution":"def find_primes_in_range(a, b): Returns a list of prime numbers in the range [a, b]. if a > b: return [] primes = [] for num in range(a, b + 1): if num > 1: is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that accepts an array as a parameter, sorts it in ascending order, and returns the sorted array.","solution":"def sort_array(arr): Accepts an array and returns the array sorted in ascending order. return sorted(arr)"},{"question":"Create a function that takes in an integer and returns a Boolean value indiciating whether the integer is greater than 100, with a list of the numbers between the input and 100 (exclusive) as an argument. For example, if the input is 150, the boolean should return True and the list should be [101, 102, 103,..., 149].","solution":"def greater_than_100(n): Returns a tuple containing a boolean indicating if n is greater than 100 and a list of numbers between 100 and n (exclusive). if n <= 100: return False, [] else: return True, list(range(101, n))"},{"question":"Create a function that checks if a string of parentheses is balanced. For example, \\"()\\" should return true, but \\")(\\" should return false.","solution":"def is_balanced_parentheses(s): Checks if a string of parentheses is balanced. Args: s: A string containing only parentheses characters '(' and ')'. Returns: True if the string is balanced, False otherwise. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return not stack"},{"question":"Create a function that generates a list of Fibonacci numbers up to a specified number of terms. The user should be able to specify how many Fibonacci numbers they want in the list. The function should handle edge cases, such as when the user requests 0 or 1 terms in the Fibonacci sequence.","solution":"def generate_fibonacci(n): Generates a list of Fibonacci numbers up to a specified number of terms. Parameters: n (int): The number of terms in the Fibonacci sequence to generate. Returns: list: A list containing the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fibonacci_sequence = [0, 1] for _ in range(2, n): next_term = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_term) return fibonacci_sequence"},{"question":"Create a function that finds the nth Fibonacci number. The nth Fibonacci number is the sum of the two preceding ones, usually starting with 0 and 1, i.e., 0, 1, 1, 2, 3, 5, 8, 13, ... The function should take an integer n as an argument and return the nth Fibonacci number.","solution":"def fibonacci(n): Returns the nth Fibonacci number. The sequence starts with 0 and 1, and the next number is the sum of the two preceding ones. if n <= 0: raise ValueError(\\"The input should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Create a function that calculates the sum of all numbers between two integers (inclusive) that are divisible by a given divisor.","solution":"def sum_divisible_by(a, b, divisor): Returns the sum of all numbers between a and b (inclusive) that are divisible by divisor. return sum(i for i in range(a, b + 1) if i % divisor == 0)"},{"question":"Create a function that takes two arguments, an array and an element, and inserts the element at the beginning of the array. The function should then return the modified array.","solution":"def insert_at_beginning(array, element): Inserts the element at the beginning of the array. :param array: List of elements :param element: Element to be inserted at the beginning :return: Modified array with the element at the beginning return [element] + array"},{"question":"Create a function that generates a list of Fibonacci numbers up to a given number \`n\`. The function should also include an optional parameter \`max_length\` to limit the number of Fibonacci numbers generated.","solution":"def generate_fibonacci(n, max_length=None): Generates a list of Fibonacci numbers up to a given number \`n\`. If \`max_length\` is provided, it limits the number of Fibonacci numbers generated. :param n: The upper limit for the largest Fibonacci number. :param max_length: The maximum number of Fibonacci numbers to generate. :return: A list of Fibonacci numbers. if n < 0: return [] fibonacci = [0, 1] while True: next_fib = fibonacci[-1] + fibonacci[-2] if next_fib > n: break fibonacci.append(next_fib) # Check if we have reached the maximum length. if max_length is not None and len(fibonacci) >= max_length: break # If max_length is specified and the length of fibonacci is greater, trim the list. if max_length is not None and len(fibonacci) > max_length: return fibonacci[:max_length] return fibonacci"},{"question":"Create a function that takes a string representing a binary number and returns the count of the number of 0s and 1s in the string. Your function should ignore spaces and treat all other characters as invalid. The function should return a dictionary with keys '0s' and '1s' representing the count of each.","solution":"def count_binary_digits(binary_str): Counts the number of 0s and 1s in a binary string, ignoring spaces and treating all other characters as invalid. Parameters: binary_str (str): The binary string to count digits in. Returns: dict: A dictionary with keys '0s' and '1s' representing the count of each. counts = {'0s': 0, '1s': 0} for char in binary_str: if char == '0': counts['0s'] += 1 elif char == '1': counts['1s'] += 1 return counts"},{"question":"Create a function that checks if a given list contains a specific integer. If the integer exists, return the index of its first occurrence. If it does not exist, return -1.","solution":"def find_integer(lst, target): Returns the index of the first occurrence of target in lst. If target is not in lst, returns -1. try: return lst.index(target) except ValueError: return -1"},{"question":"Create a function that finds the longest common suffix from a list of strings.","solution":"def longest_common_suffix(strings): Returns the longest common suffix from a list of strings. :param strings: List[str] - a list of strings :return: str - the longest common suffix if not strings: return '' # Reverse all strings in the list reversed_strings = [s[::-1] for s in strings] # Find the longest common prefix in the reversed strings suffix = [] for i in range(min(len(s) for s in reversed_strings)): current_char = reversed_strings[0][i] if all(s[i] == current_char for s in reversed_strings): suffix.append(current_char) else: break # Return the longest common suffix by reversing the result return ''.join(suffix)[::-1]"},{"question":"Create a function that takes an integer array and determines if the array is strictly increasing, strictly decreasing, or neither. A function should return 1 if the array is strictly increasing, -1 if the array is strictly decreasing, and 0 if the array is neither.","solution":"def determine_array_trend(arr): Determines if the integer array is strictly increasing, strictly decreasing, or neither. Returns: 1 if the array is strictly increasing, -1 if the array is strictly decreasing, 0 if the array is neither. if all(earlier < later for earlier, later in zip(arr, arr[1:])): return 1 elif all(earlier > later for earlier, later in zip(arr, arr[1:])): return -1 else: return 0"},{"question":"Create a function that extracts unique words from a given string, ignoring punctuation and case sensitivity, and returns a sorted list of these unique words.","solution":"import re def extract_unique_words(text): Extracts unique words from the given text, ignoring punctuation and case sensitivity. Parameters: text (str): The input string from which to extract unique words. Returns: list: A sorted list of unique words. # Remove punctuation using regex and convert to lowercase words = re.findall(r'bw+b', text.lower()) # Extract unique words unique_words = set(words) # Return sorted list of unique words return sorted(unique_words)"},{"question":"Create a function that sorts a list of dictionaries by a specific key. The dictionary key and the sorting order should be passed as parameters to the function. The function should work for any dictionary key and should be able to sort the dictionaries by either ascending or descending order.","solution":"def sort_dicts_by_key(dicts, key, reverse=False): Sorts a list of dictionaries by a specified key. Parameters: dicts (list): A list of dictionaries to sort. key (str): The dictionary key to sort by. reverse (bool): If True, sort in descending order, otherwise ascending. Default is False. Returns: list: A sorted list of dictionaries. return sorted(dicts, key=lambda d: d[key], reverse=reverse)"},{"question":"Create a function that checks if all elements in an array are equal. If so, return True; otherwise, return False.","solution":"def all_elements_equal(arr): Check if all elements in the array are equal. Args: arr (list): List of elements to check. Returns: bool: True if all elements are equal, False otherwise. return all(x == arr[0] for x in arr) if arr else True"},{"question":"Create a function that takes an array of integers and returns a new array where the elements from the original array have been mapped to strings. The function should be named \`intsToStrings\`, and it should use the \`map()\` method to achieve this transformation.","solution":"def intsToStrings(int_array): Takes an array of integers and returns a new array where the elements from the original array have been mapped to strings. Parameters: int_array (list of int): The array of integers to be transformed. Returns: list of str: The new array where the elements are strings. return list(map(str, int_array))"},{"question":"Create a function that converts all strings in an array to numbers. If a string cannot be converted, leave it unchanged.","solution":"def convert_to_numbers(arr): Convert all strings in an array to numbers. If a string cannot be converted, leave it unchanged. Params: arr (list): List of items to be processed. Returns: list: List with strings converted to numbers where possible. result = [] for item in arr: try: # Attempt to convert the item to an integer number = int(item) except ValueError: try: # If the conversion to integer fails, attempt to convert to a float number = float(item) except ValueError: # If both conversions fail, leave the item unchanged number = item result.append(number) return result"},{"question":"Create a function that accepts a string as input and outputs the string with the first character capitalized, and the rest of the string in lowercase.","solution":"def capitalize_first_char(s): Returns the input string with the first character capitalized and the rest of the string in lowercase. if not s: return s return s[0].upper() + s[1:].lower()"},{"question":"Create a function that takes a string as an argument and returns the longest word in the string. If there are multiple words of the maximum length, return all of them. If the input string is empty, return an empty list. Words are defined as sequences of characters separated by spaces.","solution":"def find_longest_words(s): Returns a list of the longest words in the input string s. if not s: return [] words = s.split() max_len = 0 longest_words = [] for word in words: word_len = len(word) if word_len > max_len: max_len = word_len longest_words = [word] elif word_len == max_len: longest_words.append(word) return longest_words"},{"question":"Create a function that implements the LRU (Least Recently Used) Cache mechanism. The function should support \`get\` and \`put\` operations. The \`get\` operation retrieves a key's value with a time complexity of \`O(1)\`, and the \`put\` operation updates the value of a given key or inserts a new key-value pair into the cache. If the cache reaches its capacity, the function should remove the least recently used item before inserting a new item. The \`get\` operation updates the usage of the key, ensuring it is not the least recently used.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 # Move the accessed element to the end to mark it as recently used. self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: # Update the value of the existing key and move it to the end. self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: # Pop the first item (least recently used item) if we're over capacity. self.cache.popitem(last=False)"},{"question":"Create a function that takes two strings as a parameter and checks to see if one string is a substring of the other. If the string is not a substring, return \\"Not a Substring\\".","solution":"def check_substring(str1, str2): Returns 'Is a Substring' if one string is a substring of the other, otherwise returns 'Not a Substring'. if str1 in str2 or str2 in str1: return \\"Is a Substring\\" else: return \\"Not a Substring\\""},{"question":"Create a function that takes an array \`arr\` and finds the minimum and maximum values in the array and returns them as an array. For example, if the input array is [1,2,3,4,5], it should return [1, 5].","solution":"def find_min_max(arr): Returns the minimum and maximum values in the array arr. Parameters: arr (list): A list of numbers Returns: list: A list containing the minimum and maximum values if not arr: return [None, None] min_val = min(arr) max_val = max(arr) return [min_val, max_val]"},{"question":"Create a function that takes two parameters: a list of integers and an integer representing the sum. The function should return the first two integers in the list whose sum equals the given integer. If no such integers exist, return an empty list.","solution":"def find_pair_with_sum(lst, target_sum): Returns the first two integers in the list whose sum equals the target_sum. If no such integers exist, returns an empty list. Parameters: lst (list): A list of integers. target_sum (int): The target sum to find in the list. Returns: list: A list containing the first two integers whose sum equals the target_sum. seen = {} for num in lst: complement = target_sum - num if complement in seen: return [complement, num] seen[num] = True return []"},{"question":"Create a function that receives a string as an input and returns a list of all non-overlapping substrings of the input string. The function should also remove any duplicate substrings from the resulting list.","solution":"def get_non_overlapping_unique_substrings(s): Returns a list of all non-overlapping unique substrings of the input string s. substrings = set() length = len(s) # Collect all substrings for start in range(length): for end in range(start + 1, length + 1): substrings.add(s[start:end]) return list(substrings)"},{"question":"Create a function that takes a list of numbers and returns the sum of the squares of each number. For example, given the list \`[2, 3, 4]\`, the function should return \`29\` (since \`2^2 + 3^2 + 4^2 = 4 + 9 + 16 = 29\`).","solution":"def sum_of_squares(numbers): Returns the sum of the squares of each number in the list. return sum(x ** 2 for x in numbers)"},{"question":"Create a function that finds the maximum value in a given two-dimensional list (matrix).","solution":"def find_max_in_matrix(matrix): Finds the maximum value in a given two-dimensional list (matrix). if not matrix or not all(isinstance(row, list) for row in matrix): raise ValueError(\\"Input must be a two-dimensional list.\\") max_value = float('-inf') for row in matrix: for value in row: if value > max_value: max_value = value return max_value"},{"question":"Create a function that processes a list of integers and returns a new list with each element incremented by 2. Use Python as the programming language for this task.","solution":"def increment_by_2(lst): Returns a new list with each element incremented by 2. Parameters: lst (list): A list of integers. Returns: list: A new list where each element is incremented by 2. return [x + 2 for x in lst]"},{"question":"Create a function that generates a list of all prime numbers up to a given integer \`n\`. A prime number is only divisible by 1 and itself. The function should be named \`generate_primes\` and take a single integer \`n\` as an argument and return a list of prime numbers less than \`n\`.","solution":"def generate_primes(n): Generates a list of all prime numbers less than n. Parameters: n (int): The upper limit (non-inclusive) for generating prime numbers. Returns: List[int]: A list of prime numbers less than n. if n <= 2: return [] primes = [] for num in range(2, n): is_prime = True for divisor in range(2, int(num ** 0.5) + 1): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that takes in two lists of equal length and returns the element-wise sum of the lists. If the lists are not of equal length, the function should return an error message.","solution":"def elementwise_sum(lst1, lst2): Returns the element-wise sum of two lists of equal length. If the lists are not of equal length, returns an error message. if len(lst1) != len(lst2): return \\"Error: Lists are not of equal length\\" return [a + b for a, b in zip(lst1, lst2)]"},{"question":"Create a function that takes in two lists of numbers and returns the list of differences between corresponding elements. If the lists differ in length, the function should return the difference list only up to the length of the shorter list.","solution":"def list_differences(list1, list2): Takes in two lists of numbers and returns the list of differences between corresponding elements. If the lists differ in length, the function returns the difference list only up to the length of the shorter list. return [a - b for a, b in zip(list1, list2)]"},{"question":"Create a function that takes an integer n as a parameter and returns a lambda function that calculates and returns the nth Fibonacci number.","solution":"def fibonacci(n): Returns a lambda function that calculates the nth Fibonacci number. def nth_fibonacci(k): if k == 0: return 0 elif k == 1: return 1 a, b = 0, 1 for _ in range(2, k + 1): a, b = b, a + b return b return lambda: nth_fibonacci(n)"},{"question":"Create a function that generates a Fibonacci sequence up to a specified number of terms. Additionally, implement a mechanism to handle exceptions if the input is not an integer or if the number of terms requested is less than 1. If the number of terms requested is 0, return an empty list.","solution":"def generate_fibonacci(n): Generates a Fibonacci sequence up to n terms. Parameters: n (int): The number of terms in the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence up to n terms. Raises: ValueError: If n is not an integer or if n is less than 1. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Number of terms must be a non-negative integer.\\") if n == 0: return [] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Create a function that takes an array of strings and returns a new array where every string is reversed. If the input array is empty, the function should return an empty array. Additionally, if the input array contains non-string elements, the function should filter them out before reversing the strings.","solution":"def reverse_strings(arr): Takes an array of strings and returns a new array where every string is reversed. Filters out non-string elements before processing. Parameters: arr (list): The input array of strings. Returns: list: A new array with reversed strings. if not arr: return [] return [s[::-1] for s in arr if isinstance(s, str)]"},{"question":"Create a function that takes a list of integers and returns a new list with all the even numbers from the original list removed. You should not use any inbuilt functions, and the solution should be efficient.","solution":"def remove_even_numbers(numbers): Removes all even numbers from the list 'numbers' and returns a new list. Parameters: numbers (list): A list of integers. Returns: list: A new list with all even integers removed. result = [] for number in numbers: if number % 2 != 0: result.append(number) return result"},{"question":"Create a function that converts a given signed 32-bit integer to its binary representation as a string. The function should handle both positive and negative integers. The binary representation should not include a leading '0b' prefix.","solution":"def int_to_binary_string(n): Converts a given signed 32-bit integer to its binary representation as a string. The function handles both positive and negative integers. if n >= 0: return bin(n)[2:] else: return bin(n & 0xffffffff)[2:]"},{"question":"Create a function that returns the count of unique elements in the list.","solution":"def count_unique_elements(lst): Returns the count of unique elements in the list. return len(set(lst))"},{"question":"Create a function that takes two arguments: a list of integers and a target sum. The function should return the index positions of the two numbers in the list that add up to the target sum. If no such pair exists, return an empty list.","solution":"def find_two_sum_indices(numbers, target): Returns the index positions of the two numbers in the list that add up to the target sum. If no such pair exists, returns an empty list. num_to_index = {} for index, num in enumerate(numbers): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Create a function that takes in a string and returns a list of words that can be formed by moving the first character of each word to the end of its word. For example, if the input string is \\"hello world\\", the output should be ['elloh', 'orldw'].","solution":"def move_first_to_end(sentence): Returns a list of words formed by moving the first character of each word to the end of the word. Parameters: sentence (str): The input string containing words separated by spaces. Returns: list: A list of rearranged words. words = sentence.split() rearranged_words = [(word[1:] + word[0]) for word in words if word] return rearranged_words"},{"question":"Create a function that accepts two arguments: a list of integers and a target integer. The function should return the index of the target if it is found in the list. If the target is not found, the function should return \\"Target not found\\".","solution":"def find_target_index(lst, target): Returns the index of the target if found in the list. If not found, returns 'Target not found'. try: return lst.index(target) except ValueError: return \\"Target not found\\""},{"question":"Create a function that calculates the maximum difference between any two numbers in an array. The function should take an array of integers as input and return the maximum difference. The function should handle the case where the array might have less than two elements and return an appropriate error message in such cases.","solution":"def max_difference(arr): Returns the maximum difference between any two numbers in an array. If the array has less than two elements, returns an appropriate error message. if len(arr) < 2: return \\"Array must have at least two elements to calculate a difference.\\" min_val = min(arr) max_val = max(arr) return max_val - min_val"},{"question":"Create a function that can count and return the frequency of times a specific element appears in a list.","solution":"def count_frequency(lst, element): Returns the frequency of times a specific element appears in a list. Parameters: lst (list): The list to search through. element (any type): The element to count within the list. Returns: int: The frequency of the element in the list. return lst.count(element)"},{"question":"Create a function that identifies all prime numbers up to a specified non-negative integer inclusively. The function should be optimized using a list comprehension and consider only odd numbers to reduce unnecessary computations.","solution":"def primes_up_to(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(2, n + 1) if sieve[num]]"},{"question":"Create a function that generates a list of random integers within a specified range, inclusive of the boundaries. The function should also allow the user to specify the number of random integers they want in the list.","solution":"import random def generate_random_integers(start, end, count): Generates a list of random integers within the given range [start, end] and returns a list of length 'count'. :param start: The start of the range (inclusive). :param end: The end of the range (inclusive). :param count: The number of random integers to generate. :return: A list of random integers. if start > end: raise ValueError(\\"Start must be less than or equal to end.\\") if count < 0: raise ValueError(\\"Count must be non-negative.\\") return [random.randint(start, end) for _ in range(count)]"},{"question":"Create a function that finds the maximum sum of a contiguous subarray.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray in the given array. Uses Kadane's algorithm to achieve this. :param nums: List of integers :return: Maximum sum of a contiguous subarray if not nums: return 0 current_max = global_max = nums[0] for num in nums[1:]: current_max = max(num, current_max + num) if current_max > global_max: global_max = current_max return global_max"},{"question":"Create a function that returns the length of the longest consecutive sequence of 1s in a binary string.","solution":"def longest_consecutive_ones(binary_string): Returns the length of the longest consecutive sequence of 1s in a binary string. Parameters: binary_string (str): The binary string to be evaluated. Returns: int: The length of the longest consecutive sequence of 1s. max_length = 0 current_length = 0 for char in binary_string: if char == '1': current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"Create a function that takes two arrays of integers and returns an array that contains the common elements between both arrays. The function should work for unsorted arrays and handle any case where the arrays contain duplicate elements.","solution":"def common_elements(arr1, arr2): Returns a list that contains the common elements between both arrays. The function handles unsorted arrays and duplicates. # Convert lists to sets to remove duplicates and perform intersection set1 = set(arr1) set2 = set(arr2) common_set = set1.intersection(set2) return list(common_set)"},{"question":"Create a function that takes in two strings as parameters and returns the longest common subsequence (LCS) between them. The LCS is the longest sequence that appears in both strings in the same order, but not necessarily contiguously.","solution":"def lcs(str1, str2): Returns the longest common subsequence (LCS) between two strings. # Create a 2D array to store lengths of longest common subsequence. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from bottom up. for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Recover the longest common subsequence from the dp table. lcs_str = [] i, j = m, n while i > 0 and j > 0: if str1[i - 1] == str2[j - 1]: lcs_str.append(str1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 # Reverse the lcs_str since we added characters in reverse order. lcs_str.reverse() return ''.join(lcs_str)"},{"question":"Create a function that converts a decimal number to binary using the division by 2 method. The function should take an integer as input and return the binary number as a string. In addition, the function should also return the number of 1s and 0s in the binary representation.","solution":"def decimal_to_binary(n): Convert a decimal number to binary and count the number of 1s and 0s in the binary representation. Parameters: n (int): The decimal number to be converted. Returns: tuple: A tuple containing the binary representation as a string, the count of 1s, and the count of 0s. if n == 0: return (\\"0\\", 0, 1) binary_str = \\"\\" count_1s = 0 count_0s = 0 while n > 0: remainder = n % 2 n = n // 2 binary_str = str(remainder) + binary_str count_1s = binary_str.count('1') count_0s = binary_str.count('0') return (binary_str, count_1s, count_0s)"},{"question":"Create a function that accepts a string and returns the number of unique consonants in that string. A consonant is any letter that is not a vowel and not a whitespace. For example, if the input string is \\"Hello World\\", the function should return 5, as there are 5 unique consonants (h, l, w, r, d).","solution":"def count_unique_consonants(s): Returns the number of unique consonants in the given string s. vowels = set('aeiouAEIOU') consonants = set() for char in s: if char.isalpha() and char not in vowels: consonants.add(char.lower()) return len(consonants)"},{"question":"Create a function that solves the tower of hanoi problem. The function should take three arguments - the number of disks \`n\`, the source \`src\`, the auxiliary \`aux\`, and the destination \`dest\`.","solution":"def tower_of_hanoi(n, src, aux, dest, moves=None): Solves the Tower of Hanoi problem and returns the list of moves. Parameters: - n: number of disks - src: source rod - aux: auxiliary rod - dest: destination rod - moves: internal parameter to collect moves (default is None, to initialize a new list) Returns: A list of tuple moves where each tuple is (source, destination) if moves is None: moves = [] if n == 1: moves.append((src, dest)) else: tower_of_hanoi(n-1, src, dest, aux, moves) moves.append((src, dest)) tower_of_hanoi(n-1, aux, src, dest, moves) return moves"},{"question":"Create a function that takes an array of integers as an argument and counts the number of duplicates in the array.","solution":"def count_duplicates(arr): Returns the number of duplicate elements in the array. A duplicate element is defined as an element which appears more than once in the array. from collections import Counter element_count = Counter(arr) return sum(1 for count in element_count.values() if count > 1)"},{"question":"Create a function that takes a list of temperatures and returns the average temperature.","solution":"def average_temperature(temperatures): Returns the average of the provided list of temperatures. Parameters: temperatures (list): List of temperature readings. Returns: float: The average temperature. if not temperatures: return 0 return sum(temperatures) / len(temperatures)"},{"question":"Create a function that takes a dictionary \`dic\` as input which contains keys as string descriptions of events and values as lists of strings that contain a list of strings that describe actions within the events. Return a new dictionary where each key of the original dictionary is a description of the event and the value is a list of unique strings representing all the different actions within the events, sorted alphabetically.","solution":"def unique_sorted_actions(dic): Given a dictionary where keys are event descriptions and values are lists of strings representing actions within events, return a dictionary with the event descriptions as keys and lists of unique actions sorted alphabetically as values. result = {} for event, actions in dic.items(): unique_actions = sorted(set(actions)) result[event] = unique_actions return result"},{"question":"Create a function that returns the sum of all numbers in a given list, but only for those numbers that are greater than 10 and less than 100.","solution":"def sum_selected_numbers(numbers): Returns the sum of all numbers in the given list that are greater than 10 and less than 100. :param numbers: List of numbers :return: Sum of numbers greater than 10 and less than 100 return sum(num for num in numbers if 10 < num < 100)"},{"question":"Create a function that checks if the number given in the argument is an even number or odd number. Given an integer \\"n\\", write a function that returns \\" odd \\" for odd numbers and \\" even \\" for even numbers.","solution":"def check_even_or_odd(n): Returns 'even' if the number is even, 'odd' if the number is odd. if n % 2 == 0: return 'even' else: return 'odd'"},{"question":"Create a function that takes an integer and returns the integer with its digits reversed. If the reversed integer overflows (i.e., exceeds the range of a 32-bit integer), return 0.","solution":"def reverse_integer(n): Reverses the digits of the given integer and handles overflow. If the reversed integer overflows (i.e., exceeds the range of a 32-bit integer), returns 0. sign = -1 if n < 0 else 1 n *= sign reversed_n = int(str(n)[::-1]) * sign if reversed_n > 2**31 - 1 or reversed_n < -2**31: return 0 return reversed_n"},{"question":"Create a function that takes two integers as input and returns the sum of the two numbers. Write a Python function that accomplishes this task.","solution":"def add(a, b): Returns the sum of two integers a and b. return a + b"},{"question":"Create a function that checks if a given number is even or odd and returns an appropriate message.","solution":"def check_even_or_odd(number): Checks if a given number is even or odd and returns an appropriate message. if number % 2 == 0: return f\\"{number} is even.\\" else: return f\\"{number} is odd.\\""},{"question":"Create a function that accepts an integer and returns its reverse. For example, if the input is 123, the function should return 321.","solution":"def reverse_integer(n): Returns the reverse of the given integer n. sign = -1 if n < 0 else 1 n = abs(n) reversed_int = int(str(n)[::-1]) return sign * reversed_int"},{"question":"Create a function that takes a list of lists as an input and returns the sum of all elements in a nested list. I.e. if the input is [[1, 2], [3, 4], [5]], the function should return 15.","solution":"def sum_nested_list(nested_list): Returns the sum of all elements in a nested list. Parameters: nested_list (list of lists): The input list of lists containing numbers. Returns: int: The sum of all the elements in the nested list. return sum(sum(inner_list) for inner_list in nested_list)"},{"question":"Create a function that finds the minimum and maximum values in a given array of integers without sorting the array.","solution":"def find_min_max(arr): Returns a tuple (min_value, max_value) representing the minimum and maximum values in the given array of integers. :param arr: List of integers :return: Tuple of integers (min_value, max_value) if not arr: raise ValueError(\\"Array must not be empty\\") min_value = max_value = arr[0] for num in arr[1:]: if num < min_value: min_value = num if num > max_value: max_value = num return (min_value, max_value)"},{"question":"Create a function that calculates the nth Fibonacci number using an iterative approach. The function should be efficient and avoid recursion to prevent stack overflow errors for large values of n.","solution":"def fibonacci(n): Calculates the nth Fibonacci number using an iterative approach. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Create a function that will create a new directory and write two files to it with given contents.","solution":"import os def create_directory_and_write_files(directory, file1_name, file1_content, file2_name, file2_content): Creates a new directory and writes two files with given contents. :param directory: The name of the directory to be created. :param file1_name: The name of the first file. :param file1_content: The content to be written in the first file. :param file2_name: The name of the second file. :param file2_content: The content to be written in the second file. os.makedirs(directory, exist_ok=True) file1_path = os.path.join(directory, file1_name) file2_path = os.path.join(directory, file2_name) with open(file1_path, 'w') as file1: file1.write(file1_content) with open(file2_path, 'w') as file2: file2.write(file2_content)"},{"question":"Create a function that checks if a given list is empty or not. The function should return True if the list is empty, and False otherwise.","solution":"def is_list_empty(lst): Checks if a given list is empty or not. Parameters: lst (list): The list to check. Returns: bool: True if the list is empty, False otherwise. return len(lst) == 0"},{"question":"Create a function that takes in two strings, s and p, where s is the main string and p is the pattern. The function should return the number of times p appears in s as a subsequence.","solution":"def count_subsequence_occurrences(s, p): Returns the number of times p appears in s as a subsequence. len_s, len_p = len(s), len(p) # Create a table to store results of subproblems dp = [[0] * (len_p + 1) for _ in range(len_s + 1)] # If p is an empty string, there is exactly one subsequence of s that is an empty string for i in range(len_s + 1): dp[i][0] = 1 # Fill dp array for i in range(1, len_s + 1): for j in range(1, len_p + 1): if s[i - 1] == p[j - 1]: dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] # Answer is in dp[len_s][len_p] return dp[len_s][len_p]"},{"question":"Create a function that takes a positive integer as input and returns the sum of all the digits in the integer. For instance, if the function gets 123, it should return 1 + 2 + 3 = 6.","solution":"def sum_of_digits(n): Returns the sum of all digits in the integer n. Args: n (int): A positive integer. Returns: int: The sum of all digits in n. return sum(int(digit) for digit in str(n))"},{"question":"Create a function that takes a list and reverses the order of elements in the list. You should not use any in-built reverse list function or syntax. For example, if the input list is \`[1, 2, 3, 4]\`, the function should return \`[4, 3, 2, 1]\`.","solution":"def reverse_list(lst): Reverses the order of elements in the given list without using in-built reverse methods. reversed_lst = [] for i in range(len(lst) - 1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst"},{"question":"Create a function that takes an integer as input, and returns the product of all its even divisors.","solution":"def product_of_even_divisors(n): Returns the product of all even divisors of n. If there are no even divisors, returns 1. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") product = 1 found_even_divisor = False for i in range(1, n + 1): if n % i == 0 and i % 2 == 0: product *= i found_even_divisor = True return product if found_even_divisor else 1"},{"question":"Create a function that checks if a string is symmetric (palindrome).","solution":"def is_palindrome(s): Check if the given string is a palindrome. Args: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. s = s.lower().replace(\\" \\", \\"\\") # Normalize the string: lowercase and remove spaces # Compare the string to its reverse return s == s[::-1]"},{"question":"Create a function that takes a list of integers and returns the list sorted in ascending order. The function should handle duplicates and sort them correctly.","solution":"def sort_list(lst): Sorts a list of integers in ascending order. Parameters: lst (list): A list of integers to be sorted. Returns: list: A list of integers sorted in ascending order. return sorted(lst)"},{"question":"Create a function that accepts an integer, and returns a list of all its divisors.","solution":"def find_divisors(n): Returns a list of all divisors of the integer n. if n == 0: return [] divisors = [] for i in range(1, abs(n) + 1): if n % i == 0: divisors.append(i) return divisors"},{"question":"Create a function that rolls a 6-sided die until it lands on the number \`4\`. The function should return the number of rolls it took for the die to land on \`4\`. If the die never lands on \`4\`, the function should return \`-1\`.","solution":"import random def roll_until_four(): Rolls a 6-sided die until it lands on the number 4. Returns the number of rolls it took for the die to land on 4. If the die never lands on 4, returns -1. for i in range(1, 1001): # we'll limit to 1000 rolls as an upper bound roll = random.randint(1, 6) if roll == 4: return i return -1 # safeguard in case it never lands on 4 within 1000 rolls"},{"question":"Create a function that converts the temperature from Celsius to Fahrenheit. The function should handle both integer and floating-point inputs and return the result as a floating-point number.","solution":"def celsius_to_fahrenheit(celsius): Converts the temperature from Celsius to Fahrenheit. Parameters: celsius (int, float): The temperature in Celsius. Returns: float: The temperature in Fahrenheit. return celsius * 9/5 + 32"},{"question":"Create a function that takes a string as input and returns a boolean indicating whether the string is a one-time pad. A one-time pad is a encryption method that generates one-time key which is at least as long as the plaintext and is used for encryption而又 never reused. It is a perfect encryption scheme, but given the key, the encoded message can be decrypted back to the original message. The main idea is to generate a random key of the same length as the plaintext and use it for encryption. The key should then be discarded after use. If the string contains characters that are not printable ASCII, the string is not considered a one-time pad.","solution":"def is_one_time_pad(text): Returns True if the given string is a valid one-time pad, i.e., it contains only printable ASCII characters; otherwise False. return all(32 <= ord(char) <= 126 for char in text)"},{"question":"Create a function that converts a binary number to its decimal equivalent in Python. The function should handle both integers and floating-point numbers represented as strings.","solution":"def binary_to_decimal(binary_str): Converts a binary number (as a string) to its decimal equivalent. Can handle both integer and floating-point binary numbers. :param binary_str: string representing the binary number :return: decimal equivalent of the binary number if '.' in binary_str: integer_part, fractional_part = binary_str.split('.') integer_part_dec = int(integer_part, 2) if integer_part else 0 fractional_part_dec = sum(int(bit) * (2 ** -(index + 1)) for index, bit in enumerate(fractional_part)) return integer_part_dec + fractional_part_dec else: return int(binary_str, 2)"},{"question":"Create a function that takes a string and returns a new string where all the vowels (a,e,i,o,u) are removed. Please implement this method using recursion in Python.","solution":"def remove_vowels(s): Returns a new string where all the vowels (a, e, i, o, u) are removed using recursion. if s == \\"\\": return s elif s[0].lower() in \\"aeiou\\": return remove_vowels(s[1:]) else: return s[0] + remove_vowels(s[1:])"},{"question":"Create a function that takes a list of integers and returns a new list where all the even numbers are at the beginning of the list and all the odd numbers are at the end, maintaining their original order within their respective groups.","solution":"def segregate_even_odd(nums): Takes a list of integers and returns a new list where all even numbers are at the beginning and all odd numbers are at the end, while maintaining their original order within their respective groups. evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] return evens + odds"},{"question":"Create a function that takes a list of integers and returns a new list containing only the even numbers from the original list. Additionally, the function should return \`None\` if the list does not contain any even numbers or if the list is empty.","solution":"def filter_evens(numbers): Returns a new list containing only the even numbers from the original list. Returns None if no even numbers are found or if the list is empty. Parameters: numbers (list): A list of integers. Returns: list: A list with even numbers or None. if not numbers: return None evens = [num for num in numbers if num % 2 == 0] return evens if evens else None"},{"question":"Create a function that takes a list of integers and returns the sum of all the even numbers in the list. You should also return the count of even numbers in the list. If there are no even numbers, the function should return a tuple \`(0, 0)\`.","solution":"def sum_and_count_even_numbers(numbers): Returns the sum of all the even numbers in the list and the count of even numbers. Parameters: numbers (list of int): The list of integers. Returns: tuple: A tuple containing the sum of even numbers and the count of even numbers. even_sum = sum(num for num in numbers if num % 2 == 0) even_count = sum(1 for num in numbers if num % 2 == 0) return (even_sum, even_count)"},{"question":"Create a function that takes in a filename as an argument and returns a dictionary where the keys are the words in the file and the values are the number of times those words appear. Then, find the most common word.","solution":"def word_count(filename): Returns a dictionary with the count of each word in the file and the most common word. from collections import Counter with open(filename, 'r') as file: text = file.read() # Remove punctuation and split into words words = text.lower().translate(str.maketrans('', '', '.,;:!?')).split() word_counts = Counter(words) most_common_word = word_counts.most_common(1)[0] return dict(word_counts), most_common_word"},{"question":"Create a function that takes as input a list of integers called \`numList\`. The function should return a new list where each element is the product of all the integers in \`numList\` except the element at the same index. Specifically, if \`numList\` is \`[1, 2, 3, 4]\`, the function should return the list \`[24, 12, 8, 6]\`.","solution":"def product_except_self(numList): Returns a list of products of all elements in numList except the element at the respective index. if not numList: return [] length = len(numList) left_products = [1] * length right_products = [1] * length result = [1] * length for i in range(1, length): left_products[i] = left_products[i-1] * numList[i-1] for j in range(length-2, -1, -1): right_products[j] = right_products[j+1] * numList[j+1] for k in range(length): result[k] = left_products[k] * right_products[k] return result"},{"question":"Create a function that takes in two strings and determines if one is a rotation of the other. For example, \\"waterbottle\\" is a rotation of \\"erbottlewat\\". How can you solve this problem?","solution":"def is_rotation(s1, s2): Determines if s1 is a rotation of s2. Args: s1 (str): The first string. s2 (str): The second string. Returns: bool: True if s1 is a rotation of s2, False otherwise. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"Create a function that takes a single argument, an integer, and returns a list of its digits in descending order.","solution":"def digits_in_descending_order(n): Returns the digits of the integer n in descending order. digits = [int(x) for x in str(abs(n))] digits.sort(reverse=True) return digits"},{"question":"Create a function that takes a list of integers as input and returns a new list where each element is the sum of the adjacent elements in the input list. If the input list has less than two elements, return an empty list. For example, given the list [1, 2, 3, 4], the function should return [3, 5, 7] because 1+2=3, 2+3=5, and 3+4=7. The input list will not contain any floating-point numbers, and all elements are integers.","solution":"def sum_of_adjacent_elements(lst): Returns a new list where each element is the sum of the adjacent elements in the input list. If the input list has less than two elements, return an empty list. Args: lst (list): A list of integers. Returns: list: A list of summed adjacent elements. if len(lst) < 2: return [] result = [] for i in range(len(lst) - 1): result.append(lst[i] + lst[i + 1]) return result"},{"question":"Create a function that checks if all numbers in a given list are less than a specified threshold.","solution":"def all_numbers_less_than(lst, threshold): Returns True if all numbers in lst are less than threshold. :param lst: List of numbers. :param threshold: A number to compare against the elements of the list. :return: Boolean indicating if all numbers are less than the threshold. return all(x < threshold for x in lst)"},{"question":"Create a function that will take in a list of integers, and return True if there is at least one pair of adjacent integers that sum up to 0. For example, the function should return True for the input of \`[1, -1, 3, 4]\` because the pair \`1\` and \`-1\` sum up to \`0\`.","solution":"def has_adjacent_pair_sum_zero(lst): Returns True if there is at least one pair of adjacent integers that sum up to 0. for i in range(len(lst) - 1): if lst[i] + lst[i + 1] == 0: return True return False"},{"question":"Create a function that calculates the moving average of a list of numbers, where the window size is also provided. The function should use the numpy library for efficient computation. The moving average is calculated by taking the mean of the elements in the window as it slides across the list. If the window size is larger than the list, the function should handle it gracefully without crashing or producing incorrect results.","solution":"import numpy as np def moving_average(data, window_size): Calculate the moving average of a list of numbers using a sliding window. Parameters: data (list of float): The list of numbers to calculate the moving average of. window_size (int): The size of the moving window. Returns: numpy.ndarray: The array of moving averages. if window_size <= 0: raise ValueError(\\"Window size must be a positive integer\\") if window_size > len(data): return np.array([np.mean(data)] * len(data)) return np.convolve(data, np.ones(window_size), 'valid') / window_size"},{"question":"Create a function that takes three parameters \`a\`, \`b\`, and \`c\`. The function should return a string that concatenates the string representation of \`a\`, \`b\`, and \`c\` with a space between each one.","solution":"def concatenate_with_spaces(a, b, c): Concatenates the string representation of a, b, and c with a space between each. Parameters: a (any): First parameter to concatenate. b (any): Second parameter to concatenate. c (any): Third parameter to concatenate. Returns: str: The concatenated string with spaces separating the parameters. return f\\"{a} {b} {c}\\""},{"question":"Create a function that implements the insertion sort algorithm. The function should take a list of integers as an argument and return a new list that is sorted in ascending order. Make sure to handle cases when the input list is empty or has only a single element.","solution":"def insertion_sort(arr): Implements the insertion sort algorithm to sort a list of integers in ascending order. Parameters: arr (list): List of integers to be sorted. Returns: list: New list with integers sorted in ascending order. sorted_arr = arr.copy() for i in range(1, len(sorted_arr)): key = sorted_arr[i] j = i - 1 while j >= 0 and key < sorted_arr[j]: sorted_arr[j + 1] = sorted_arr[j] j -= 1 sorted_arr[j + 1] = key return sorted_arr"},{"question":"Create a function that takes an integer as an argument and returns the smallest integer that is greater than or equal to that number and is divisible by 10.","solution":"def next_multiple_of_10(n): Returns the smallest integer that is greater than or equal to \`n\` and is divisible by 10. if n % 10 == 0: return n else: return (n // 10 + 1) * 10"},{"question":"Create a function that takes in the number of dice and the number of sides on a die. The function returns the probability of rolling a specific number of successes. A success is defined as rolling a number greater than or equal to a given threshold.","solution":"from math import comb def probability_of_successes(num_dice, num_sides, threshold, num_successes): Returns the probability of rolling a specific number of successes. A success is defined as rolling a number greater than or equal to the given threshold. Parameters: num_dice (int): The number of dice being rolled. num_sides (int): The number of sides on each die. threshold (int): The threshold value for a success. num_successes (int): The number of successes to calculate the probability for. Returns: float: The probability of rolling the specific number of successes. # Calculate the probability of a single success p_success = (num_sides - threshold + 1) / num_sides # Calculate probability using binomial distribution probability = comb(num_dice, num_successes) * (p_success ** num_successes) * ((1 - p_success) ** (num_dice - num_successes)) return probability"},{"question":"Create a function that takes a string of numbers and counts the occurrences of each digit.","solution":"def count_digit_occurrences(s): Returns a dictionary with the counts of each digit in the string s. Arguments: s -- a string of digits Returns: A dictionary where keys are digits (as strings) and values are their counts in s. counts = {} for char in s: if char.isdigit(): counts[char] = counts.get(char, 0) + 1 return counts"},{"question":"Create a function that takes in two lists of integers and returns a list of the integers that are present in both lists.","solution":"def intersect_lists(list1, list2): Returns a list of integers that are present in both input lists. return list(set(list1) & set(list2))"},{"question":"Create a function that takes an integer as input and returns the reverse of the number. If the reversed number has leading zeros, remove them. For example, if the input is 1200, the function should return 21.","solution":"def reverse_number(n): Takes an integer n as input and returns the reverse of the number without leading zeros. reverse_str = str(abs(n))[::-1] reversed_int = int(reverse_str) return reversed_int if n >= 0 else -reversed_int"},{"question":"Create a function that adds three numbers together and returns the result in Python. Here is a piece of code that tries to achieve this, but it's incorrect. Identify the issue and correct it.","solution":"def add_three_numbers(a, b, c): Returns the sum of a, b, and c. return a + b + c"},{"question":"Create a function that takes a list of integers and returns the sum of all the integers in the list. Additionally, the function should handle the case where the list is empty by returning 0.","solution":"def sum_of_list(int_list): Returns the sum of all integers in the list. If the list is empty, returns 0. return sum(int_list)"},{"question":"Create a function that generates a Fibonacci sequence up to a given limit. The function should take an integer as input and return a list of Fibonacci numbers that are less than or equal to that integer.","solution":"def fibonacci_up_to_limit(limit): Generates a list of Fibonacci numbers up to a given limit. Parameters: limit (int): The maximum value for the Fibonacci sequence. Returns: list: A list of Fibonacci numbers less than or equal to the limit. if limit < 0: return [] fib_sequence = [] a, b = 0, 1 while a <= limit: fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Create a function that converts a string into its ASCII values and sorts them in ascending order. How would you implement this in Python?","solution":"def convert_and_sort_ascii(s): Converts a string into its ASCII values and sorts them in ascending order. Args: s (str): the input string Returns: List[int]: a list of ASCII values sorted in ascending order ascii_values = [ord(char) for char in s] ascii_values.sort() return ascii_values"},{"question":"Create a function that takes an array of integers as input and returns true if the array is a palindrome (reads the same backward as forward) and false otherwise. A palindrome is a sequence that reads the same backward as forward, e.g., \\"madam\\" or \\"racecar\\" among words. Applying this definition to numbers, a palindrome could be \\"121\\" or \\"1221\\" written digit by digit.","solution":"def is_palindrome_array(arr): Checks if the given array of integers is a palindrome. Parameters: arr (list): A list of integers. Returns: bool: True if the array is a palindrome, False otherwise. return arr == arr[::-1]"},{"question":"Create a function that returns the string 'Hello World' using functional programming principles.","solution":"def hello_world(): Returns the string 'Hello, World' using functional programming principles. return 'Hello, World'"},{"question":"Create a function that generates a list of prime numbers up to a given number n. The function should be efficient and use a well-known algorithm for prime number generation.","solution":"def generate_primes(n): Generates a list of prime numbers up to n (inclusive). Uses the Sieve of Eratosthenes algorithm for efficient prime number generation. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = False sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Create a function that returns the sum of all the elements in a list. If the list is empty, the function should return 0.","solution":"def sum_of_elements(lst): Returns the sum of all the elements in a list. If the list is empty, the function returns 0. return sum(lst)"},{"question":"Create a function that takes in a list of strings and returns the count of strings that start with the letter 'D' or 'd'.","solution":"def count_strings_starting_with_d(strings): Returns the count of strings that start with the letter 'D' or 'd'. Parameters: strings (list): A list of strings. Returns: int: The count of strings that start with 'D' or 'd'. return sum(1 for string in strings if string.startswith('D') or string.startswith('d'))"},{"question":"Create a function that solves a Sudoku puzzle. The function should take a 2D list representing a Sudoku grid, where '0' represents an empty cell. The function should return True if the puzzle is solvable and False otherwise. The solution should also provide a completed grid if the puzzle is solveable.","solution":"def is_valid(board, row, col, num): for x in range(9): if board[row][x] == num or board[x][col] == num: return False if board[row // 3 * 3 + x // 3][col // 3 * 3 + x % 3] == num: return False return True def solve_sudoku(board): for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve_sudoku(board): return True else: board[row][col] = 0 return False return True def sudoku_solver(puzzle): if solve_sudoku(puzzle): return True, puzzle else: return False, []"},{"question":"Create a function that takes an integer and returns its hexadecimal representation as a string, without using any built-in functions or libraries to convert the integer to hexadecimal.","solution":"def int_to_hex(num): Returns the hexadecimal representation of an integer num as a string. if num == 0: return \\"0\\" hex_chars = \\"0123456789abcdef\\" result = \\"\\" # Handling negative numbers if num < 0: num = (1 << 32) + num # Convert the negative number to 2's complement form while num > 0: result = hex_chars[num % 16] + result num //= 16 return result"},{"question":"Create a function that takes a string as an input and returns True if the string is an anagram of a palindrome, and False otherwise. A string is considered an anagram of a palindrome if it is possible to rearrange some letters in such a way that it forms a palindrome.","solution":"def is_anagram_of_palindrome(s): Returns True if the input string is an anagram of a palindrome, and False otherwise. from collections import Counter # Count characters in the string counts = Counter(s) # Count how many characters have an odd count odd_count = sum(1 for count in counts.values() if count % 2 != 0) # In a palindrome, there can be at most one character with an odd count return odd_count <= 1"},{"question":"Create a function that takes the number of items and return the Fibonacci sequence up to that many terms. The function should be efficient and optimized for large numbers of items.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to the n-th term. Parameters: n (int): The number of terms in the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence up to the n-th term. if n <= 0: return [] sequence = [0] * n if n >= 1: sequence[0] = 0 if n >= 2: sequence[1] = 1 for i in range(2, n): sequence[i] = sequence[i - 1] + sequence[i - 2] return sequence"},{"question":"Create a function that takes two arguments and returns the larger of the two. You should also implement error handling for non-numeric inputs.","solution":"def larger(a, b): Returns the larger of two numbers a and b. Raises a ValueError if inputs are not numeric. try: a = float(a) b = float(b) except ValueError: raise ValueError(\\"Both arguments must be numeric values\\") return a if a > b else b"},{"question":"Create a function that takes as input an integer n (between 0 and 1000, inclusive) and calculates the sum of the squares of all positive integers between 1 and n (inclusive).","solution":"def sum_of_squares(n): Returns the sum of the squares of all positive integers between 1 and n (inclusive). :param n: int, a positive integer between 0 and 1000 (inclusive) :return: int, sum of the squares of all positive integers between 1 and n if n < 0 or n > 1000: raise ValueError(\\"Input must be between 0 and 1000 inclusive\\") return sum(i * i for i in range(1, n + 1))"},{"question":"Create a function that determines the number of words in a given sentence. The function should ignore case sensitivity and consider any sequence of characters separated by spaces as words. How can I write this function in Python?","solution":"def count_words(sentence): Returns the number of words in a given sentence. A word is any sequence of characters separated by spaces. # Strip leading and trailing spaces sentence = sentence.strip() # Split the sentence into words based on spaces words = sentence.split() return len(words)"},{"question":"Create a function that generates all permutations of a given list of elements.","solution":"import itertools def generate_permutations(elements): Generates all permutations of a given list of elements. :param elements: list of elements :return: list of tuples, where each tuple is a permutation of the input list return list(itertools.permutations(elements))"},{"question":"Create a function that calculates the sum of numbers in a list, but only if they are within a specified range. The function should return the sum of all numbers that fall within this range. If no numbers fall within the range, the function should return 0.","solution":"def sum_in_range(numbers, start, end): Returns the sum of numbers in the list 'numbers' that are within the range [start, end], inclusive. If no numbers are within the range, returns 0. return sum(num for num in numbers if start <= num <= end)"},{"question":"Create a function that finds the maximum value in a list of integers and returns it. If the list is empty, the function should return \`None\`. The function should also handle negative numbers effectively.","solution":"def find_max_value(nums): Finds the maximum value in a list of integers. If the list is empty, returns None. if not nums: return None return max(nums)"},{"question":"Create a function that identifies a single character that is not repeated in a given string. The function should return this character. If there are no non-repeating characters, the function should return an empty string.","solution":"def first_non_repeating_char(s): Identify the first non-repeating character in a given string. :param s: The input string. :return: The first non-repeating character or an empty string if none exist. char_count = {} # First pass: count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass: find the first character with a count of 1 for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"Create a function that validates a user's input restricting it to only alphanumeric characters and spaces. The function should return \`true\` if the input is valid and \`false\` otherwise.","solution":"import re def validate_input(user_input): Validates if the user's input contains only alphanumeric characters and spaces. Args: user_input (str): The input string to validate. Returns: bool: True if input is valid, False otherwise. pattern = r'^[a-zA-Z0-9 ]*' return bool(re.match(pattern, user_input))"},{"question":"Create a function that rotates an array 'K' number of times using the Kth element as the pivot. The rotation should be in such a way that the elements after the pivot are placed before the pivot in the array, maintaining their original order. If 'K' is greater than or equal to the length of the array, simply return the array as is.","solution":"def rotate_array(arr, k): Rotates an array 'k' number of times using the k-th element as the pivot. Parameters: arr (list): The array to be rotated. k (int): The pivot index for rotation. Returns: list: The rotated array. n = len(arr) if k >= n: return arr return arr[k:] + arr[:k]"},{"question":"Create a function that takes a list of integers and returns a new list containing only the numbers that are even and greater than 10.","solution":"def filter_even_and_greater_than_ten(numbers): Returns a list of even numbers from the list that are greater than 10. return [num for num in numbers if num % 2 == 0 and num > 10]"},{"question":"Create a function that takes a string and returns the length of the string without counting spaces. For example, the string 'Hello world' should return 10.","solution":"def length_without_spaces(s): Returns the length of the string without counting spaces. return len(s.replace(\\" \\", \\"\\"))"},{"question":"Create a function that takes a string input and converts all the uppercase letters in the string to lowercase. You can assume that the input string consists only of alphabetic characters.","solution":"def to_lowercase(s): Converts all uppercase letters in the string to lowercase. return s.lower()"},{"question":"Create a function that calculates the sum of all numbers in an array, but only considers numbers that are greater than a specified threshold.","solution":"def sum_above_threshold(numbers, threshold): Returns the sum of all numbers in the array that are greater than the specified threshold. Parameters: numbers (list of int/float): The array of numbers. threshold (int/float): The threshold value. Returns: int/float: Sum of numbers greater than the threshold. return sum(num for num in numbers if num > threshold)"},{"question":"Create a function that finds the nth Fibonacci number using recursion in Python. Can you provide an example of how to use this function?","solution":"def fib(n): Returns the nth Fibonacci number using recursion. if n <= 0: raise ValueError(\\"n should be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: return fib(n - 1) + fib(n - 2) # Example usage # The 6th Fibonacci number is 5 print(fib(6))"},{"question":"Create a function that takes two arrays as input and returns their union.","solution":"def union_arrays(arr1, arr2): Returns the union of two arrays, removing duplicates. return list(set(arr1).union(set(arr2)))"},{"question":"Create a function that takes a single string argument and returns the string with all characters converted to lowercase. Use Python as the programming language.","solution":"def to_lowercase(s): Returns the string with all characters converted to lowercase. return s.lower()"},{"question":"Create a function that takes a string as an argument and returns the string reversed along with the character count of the reversed string.","solution":"def reverse_string_count(input_string): Returns the reversed string and the character count of the reversed string. Parameters: input_string (str): The string to be reversed. Returns: tuple: A tuple containing the reversed string and the integer count of characters. reversed_string = input_string[::-1] char_count = len(reversed_string) return reversed_string, char_count"},{"question":"Create a function that generates a Fibonacci series up to a given number 'n'. The series should be output in an array before returning it. If 'n' is not a positive integer, the function should return an empty array.","solution":"def fibonacci_series(n): Generates a Fibonacci series up to the given number 'n' and returns it in an array. If 'n' is not a positive integer, returns an empty array. if not isinstance(n, int) or n < 1: return [] series = [0, 1] while series[-1] + series[-2] < n: series.append(series[-1] + series[-2]) return series"},{"question":"Create a function that takes a list of integers and returns the frequency of each integer present in the list. Use Python.","solution":"def frequency_count(numbers): Returns a dictionary with the frequency of each integer present in the list. freq_dict = {} for num in numbers: if num in freq_dict: freq_dict[num] += 1 else: freq_dict[num] = 1 return freq_dict"},{"question":"Create a function that takes a list of numbers as an argument and returns the sum of the first 5 even numbers and the last 5 even numbers from the list.","solution":"def sum_first_last_5_even_numbers(nums): Returns the sum of the first 5 even numbers and the last 5 even numbers from the list. If there are fewer than 5 even numbers, sum whatever even numbers are present. even_numbers = [num for num in nums if num % 2 == 0] if len(even_numbers) < 5: first_5 = even_numbers last_5 = [] else: first_5 = even_numbers[:5] last_5 = even_numbers[-5:] return sum(first_5) + sum(last_5)"},{"question":"Create a function that takes in two strings and returns the longest common substring. If there are multiple substrings of the same maximum length, return all of them in a list.","solution":"def longest_common_substring(s1, s2): Finds the longest common substring between two strings s1 and s2. If there are multiple substrings of the same maximum length, returns all of them in a list. if not s1 or not s2: return [] len_s1, len_s2 = len(s1), len(s2) max_length = 0 lcs_set = set() lcs_suffix = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)] for i in range(len_s1 + 1): for j in range(len_s2 + 1): if i == 0 or j == 0: lcs_suffix[i][j] = 0 elif s1[i - 1] == s2[j - 1]: lcs_suffix[i][j] = lcs_suffix[i - 1][j - 1] + 1 if lcs_suffix[i][j] > max_length: max_length = lcs_suffix[i][j] lcs_set = {s1[i - max_length:i]} elif lcs_suffix[i][j] == max_length: lcs_set.add(s1[i - max_length:i]) else: lcs_suffix[i][j] = 0 return list(lcs_set)"},{"question":"Create a function that takes a list of integers and returns the largest integer in the list. If the list is empty, the function should return \`None\`. Use the function to find the largest number in the list \`[3, 5, 1, 8, 7]\`.","solution":"def find_largest(numbers): Returns the largest integer in the list. If the list is empty, returns None. if not numbers: return None return max(numbers) # Using the function to find the largest number in the list [3, 5, 1, 8, 7] largest_number = find_largest([3, 5, 1, 8, 7]) largest_number # This will output 8"},{"question":"Create a function that takes in a list of integers and returns the most frequent number in the list. If there are multiple numbers with the same highest frequency, return all of them in a list sorted in ascending order.","solution":"def most_frequent_numbers(nums): Takes in a list of integers and returns the most frequent number(s) in the list. If there are multiple numbers with the same highest frequency, return all of them in a list sorted in ascending order. from collections import Counter if not nums: return [] frequency = Counter(nums) max_freq = max(frequency.values()) most_frequent = [num for num, freq in frequency.items() if freq == max_freq] return sorted(most_frequent)"},{"question":"Create a function that takes in two lists of integers and returns a new list containing the union of the two lists. The union of two lists means all the unique elements that appear in either of the lists or both.","solution":"def union_of_lists(list1, list2): Returns the union of two lists, containing unique elements that appear in either of the lists or both. return list(set(list1) | set(list2))"},{"question":"Create a function that takes in a list of integers and returns True if all the numbers are even, and False otherwise.","solution":"def all_even(numbers): Returns True if all numbers in the list are even, False otherwise. return all(num % 2 == 0 for num in numbers)"},{"question":"Create a function that takes two sorted arrays and finds the median of the combined sorted array in O(n) time complexity.","solution":"def find_median_sorted_arrays(arr1, arr2): Finds the median of two sorted arrays. merged = [] i, j = 0, 0 total_len = len(arr1) + len(arr2) # Merge the two arrays while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # If elements are left in arr1 while i < len(arr1): merged.append(arr1[i]) i += 1 # If elements are left in arr2 while j < len(arr2): merged.append(arr2[j]) j += 1 # Calculate the median if total_len % 2 == 0: median = (merged[total_len // 2 - 1] + merged[total_len // 2]) / 2 else: median = merged[total_len // 2] return median"},{"question":"Create a function that takes in a list of words and returns the length of the longest word. If the list is empty, return 0.","solution":"def longest_word_length(words): Takes in a list of words and returns the length of the longest word. If the list is empty, returns 0. if not words: return 0 return max(len(word) for word in words)"},{"question":"Create a function that takes 2 input parameters and checks if they are equal. If they are equal it returns True. If they are not equal it returns False.","solution":"def check_equality(a, b): Returns True if a and b are equal, otherwise returns False. return a == b"},{"question":"Create a function that finds the shortest word in a given list of words. If there are multiple words with the same shortest length, return the first one encountered in the list. If the list is empty, return None.","solution":"def find_shortest_word(words): Returns the shortest word in a given list of words. If multiple words have the same shortest length, returns the first one encountered. If the list is empty, returns None. if not words: return None shortest_word = words[0] for word in words[1:]: if len(word) < len(shortest_word): shortest_word = word return shortest_word"},{"question":"Create a function that takes two strings and returns the longest common subsequence (LCS) between them. For example, the LCS of \\"ABCBDAB\\" and \\"BDCABC\\" is \\"BCAB.\\"","solution":"def longest_common_subsequence(str1, str2): Function to find the longest common subsequence between two strings. m = len(str1) n = len(str2) # Create a 2D array to store lengths of longest common subsequence dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from bottom up for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Recover the longest common subsequence from the dp array lcs = [] i, j = m, n while i > 0 and j > 0: if str1[i - 1] == str2[j - 1]: lcs.append(str1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] >= dp[i][j - 1]: i -= 1 else: j -= 1 return ''.join(reversed(lcs))"},{"question":"Create a function that takes three arguments: a string and two integers. The function should return the number of times a given range of characters (specified by the two integers) from the string appears as a substring in the string repeated N times where N is the second integer argument. For example, given the string \\"abc\\", the range [0, 1], and the integer 3, the function should check \\"abcabcabc\\" and return the number of occurrences of \\"ab\\" within it.","solution":"def substring_count(s, start, end, n): Returns the number of times a substring from index start to end appears in the string repeated n times. Parameters: s (str): The input string. start (int): The starting index of the substring (inclusive). end (int): The ending index of the substring (inclusive). n (int): The number of times to repeat the string. Returns: int: The number of occurrences of the specified substring. if start < 0 or end >= len(s) or start > end: raise ValueError(\\"Invalid start or end indices.\\") repeated_str = s * n sub_str = s[start:end + 1] return repeated_str.count(sub_str)"},{"question":"Create a function that takes in a string and a number x and returns a string where each character in the original string is repeated x times.","solution":"def repeat_characters(s, x): Returns a string where each character in the original string is repeated x times. Parameters: s (str): The original string. x (int): The number of times to repeat each character. Returns: str: The resulting string with repeated characters. return ''.join([char * x for char in s])"},{"question":"Create a function that takes a string parameter and returns another string where all uppercase letters are converted to lowercase and all lowercase letters are converted to uppercase. Swap case is a common operation in text processing, sometimes referred to as \\"inverting case\\" or \\"toggling case\\".","solution":"def swap_case(s): Returns a string where all uppercase letters are converted to lowercase and all lowercase letters are converted to uppercase. return s.swapcase()"},{"question":"Create a function that calculates the sum of the squares of the first 'n' natural numbers, but only if the square of the number is even.","solution":"def sum_of_even_squares(n): Calculate the sum of the squares of the first 'n' natural numbers, but only if the square of the number is even. Parameters: n (int): The number up to which squares are considered. Returns: int: The sum of the even squares. sum_even_squares = 0 for i in range(1, n + 1): square = i ** 2 if square % 2 == 0: sum_even_squares += square return sum_even_squares"},{"question":"Create a function that takes a number as an input, checks if the number is present in a list, and if it is, returns \\"Number found,\\" otherwise returns \\"Number not found.\\"","solution":"def check_number_in_list(number, lst): Checks if the number is present in the list. Returns \\"Number found\\" if it is, otherwise returns \\"Number not found\\". if number in lst: return \\"Number found\\" else: return \\"Number not found\\""},{"question":"Create a function that takes an integer as input and returns the sum of all positive divisors of that number, excluding the number itself.","solution":"def sum_of_positive_divisors(n): Returns the sum of all positive divisors of n, excluding n itself. if n < 1: return 0 divisors_sum = 0 for i in range(1, n): if n % i == 0: divisors_sum += i return divisors_sum"},{"question":"Create a function that finds the second largest number in a list. If the list has less than two elements, the function should return None. How can this be achieved in Python?","solution":"def second_largest(numbers): Returns the second largest number in the list. If the list has less than two elements, return None. if len(numbers) < 2: return None first_largest = second_largest = float('-inf') for num in numbers: if num > first_largest: second_largest = first_largest first_largest = num elif num > second_largest and num != first_largest: second_largest = num return second_largest if second_largest != float('-inf') else None"},{"question":"Create a function that generates the Fibonacci sequence up to a given number n, where n is the maximum value the sequence can have. The function should return the sequence as a list. For example, if n is 5, the function should return [0, 1, 1, 2, 3, 5].","solution":"def fibonacci_up_to_n(n): Generates the Fibonacci sequence up to a given number n. Parameters: n (int): The maximum value in the Fibonacci sequence. Returns: List[int]: A list containing the Fibonacci sequence up to n. if n < 0: return [] fibonacci_sequence = [0, 1] while True: next_value = fibonacci_sequence[-1] + fibonacci_sequence[-2] if next_value > n: break fibonacci_sequence.append(next_value) return fibonacci_sequence"},{"question":"Create a function that takes a string of text and returns a new string where each word is reversed, while maintaining the original word order.","solution":"def reverse_words_in_string(s): Takes a string of text and returns a new string where each word is reversed, while maintaining the original word order. :param s: A string of text :return: A new string with each word reversed, maintaining the word order words = s.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Create a function that calculates the area of a triangle given its base and height. The function should take two parameters: \`base\` and \`height\`, both of type \`float\`. The function should return the area of the triangle as a \`float\`.","solution":"def calculate_triangle_area(base, height): Returns the area of a triangle given its base and height. Parameters: base (float): The base of the triangle height (float): The height of the triangle Returns: float: The area of the triangle return 0.5 * base * height"},{"question":"Create a function that takes two strings as input and returns the first matching character from the two strings. If no matching character is found, the function should return an empty string.","solution":"def first_matching_character(str1, str2): Returns the first matching character from two strings. If no matching character is found, returns an empty string. set1 = set(str1) for char in str2: if char in set1: return char return \\"\\""},{"question":"Create a function that identifies the longest palindromic substring within a given string. A palindromic substring is a substring that reads the same backward as forward, like \\"madam\\" or \\"racecar\\". The function should return the longest palindromic substring found. If there are multiple substrings with the same maximum length, return the first one encountered within the string.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. n = len(s) if n == 0: return \\"\\" # Initialize a table to keep track of palindromes dp = [[False] * n for _ in range(n)] start = 0 max_length = 1 # Each character is a palindrome of length 1 for i in range(n): dp[i][i] = True # Check for palindromes of length 2 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 # Check for palindromes of length greater than 2 for length in range(3, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = True start = i max_length = length return s[start:start + max_length]"},{"question":"Create a function that takes a list of numbers as an input and returns their sum. If the list is empty, return 0. Make sure your function is efficient and handles all types of numerical inputs, including integers, floats, and even complex numbers.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the list. If the list is empty, it returns 0. The function can handle integers, floats, and complex numbers. if not numbers: return 0 return sum(numbers)"},{"question":"Create a function that takes a list of integers as input and returns a new list containing only the even numbers from the original list. You should solve this problem using both slicing and list comprehension. Provide detailed comments explaining each step of the solution.","solution":"def extract_even_numbers(numbers): Returns a new list containing only the even numbers from the original list. Args: numbers (list of int): The input list of integers. Returns: list of int: List containing only the even numbers. # Using list comprehension to filter out even numbers even_numbers = [num for num in numbers if num % 2 == 0] return even_numbers"},{"question":"Create a function that can take a list of numbers in any order and return the maximum sum of any two numbers.","solution":"def max_sum_of_two(numbers): Returns the maximum sum of any two numbers from the list. Args: numbers (list): A list of numbers. Returns: int or float: The maximum sum of any two numbers. if len(numbers) < 2: raise ValueError(\\"The list must contain at least two numbers\\") # Find the two largest numbers max1 = float('-inf') max2 = float('-inf') for number in numbers: if number > max1: max2 = max1 max1 = number elif number > max2: max2 = number return max1 + max2"},{"question":"Create a function that partitions the given list into K non-empty sublists such that the maximum sum of elements in any sublist is minimized.","solution":"def can_partition(nums, k, max_sum): current_sum = 0 partitions = 1 for num in nums: if current_sum + num > max_sum: partitions += 1 current_sum = num if partitions > k: return False else: current_sum += num return True def min_max_partition_sum(nums, k): left = max(nums) right = sum(nums) while left < right: mid = (left + right) // 2 if can_partition(nums, k, mid): right = mid else: left = mid + 1 return left"},{"question":"Create a function that takes two parameters, a string and an integer, and returns a new string which is the repeated version of the input string 'n' times.","solution":"def repeat_string(s, n): Returns the string 's' repeated 'n' times. Parameters: s (str): The input string. n (int): The number of times to repeat the string. Returns: str: The repeated string. return s * n"},{"question":"Create a function that takes an integer as input and returns its binary representation as a string. The function should be able to handle both positive and negative integers, as well as zero.make sure the bin function not to be used.","solution":"def int_to_binary(n): Converts an integer to its binary representation without using the bin() function. if n == 0: return \\"0\\" is_negative = n < 0 n = abs(n) binary_digits = [] while n > 0: binary_digits.append(str(n % 2)) n = n // 2 binary_str = ''.join(reversed(binary_digits)) if is_negative: binary_str = '-' + binary_str return binary_str"},{"question":"Create a function that takes a string as an input and returns the length of the longest substring that contains at most 2 distinct characters.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most 2 distinct characters. if not s: return 0 left = 0 max_length = 0 char_map = {} for right, char in enumerate(s): if char in char_map: char_map[char] += 1 else: char_map[char] = 1 while len(char_map) > 2: left_char = s[left] char_map[left_char] -= 1 if char_map[left_char] == 0: del char_map[left_char] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Create a function that returns a list containing the first 100 elements of a Fibonacci sequence.","solution":"def fibonacci_sequence(n=100): Returns a list containing the first n elements of a Fibonacci sequence. By default, n is 100. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that takes three arguments: an array of integers (arr), a target integer (target), and a step size (step). The function should calculate the shortest distance between the target and any element in the array that satisfies a certain condition related to the step size. The condition is that the element must be within the ±step distance from the target and be a multiple of 3. Your function should return the shortest such distance, or a message indicating that no such element exists.","solution":"def shortest_distance(arr, target, step): Returns the shortest distance between the target and any element in the array that is within ±step distance from the target and is a multiple of 3. If no such element exists, returns a message indicating that. valid_elements = [x for x in arr if target - step <= x <= target + step and x % 3 == 0] if not valid_elements: return \\"No such element exists\\" shortest_dist = min(abs(target - x) for x in valid_elements) return shortest_dist"},{"question":"Create a function that takes an integer \`n\` and a list \`numbers\` and a target sum \`T\`. The function should return the number of non-empty subarrays of \`numbers\` whose sum is equal to \`T\`.","solution":"def count_subarrays_with_sum(n, numbers, T): Returns count of non-empty subarrays whose sum is equal to T. Parameters: n (int): Number of elements in the list. numbers (list): List of integers. T (int): Target sum. Returns: int: Number of non-empty subarrays whose sum is equal to T. count = 0 current_sum = 0 prefix_sums = {0: 1} for num in numbers: current_sum += num if current_sum - T in prefix_sums: count += prefix_sums[current_sum - T] if current_sum in prefix_sums: prefix_sums[current_sum] += 1 else: prefix_sums[current_sum] = 1 return count"},{"question":"Create a function that contains an if-else statement. If the variable \`x\` is equal to 10, return 'x is equal to 10'. If \`x\` is not equal to 10, return 'x is not equal to 10'.","solution":"def check_value(x): Checks if the variable x is equal to 10 and returns a corresponding message. if x == 10: return 'x is equal to 10' else: return 'x is not equal to 10'"},{"question":"Create a function that takes a string as an argument, reverses the string, and returns the reversed string. If the string is empty or only contains whitespace, return an empty string.","solution":"def reverse_string(s): Reverses the input string. If the string is empty or only contains whitespace, returns an empty string. Args: s (str): The string to reverse. Returns: str: The reversed string, or an empty string if the input is empty or contains only whitespace. if s.strip() == \\"\\": return \\"\\" return s[::-1]"},{"question":"Create a function that takes an integer as input and returns the sum of its digits. Make sure to only consider digits from 0 to 9. If the input number is negative, consider its absolute value.","solution":"def sum_of_digits(n): Returns the sum of the digits of the input number n. For negative numbers, considers the absolute value. n = abs(n) return sum(int(digit) for digit in str(n))"},{"question":"Create a function that takes a single integer as input and returns a string that represents that integer with each digit reversed. For example, if the input is 1234, the output should be \\"4321\\".","solution":"def reverse_digits(num): Returns a string representing the input integer with its digits reversed. Parameters: num (int): The input integer to be reversed. Returns: str: The string representation of the reversed integer digits. return str(num)[::-1]"},{"question":"Create a function that identifies and removes duplicate characters from a given string \`s\`. The function should return the modified string with all duplicate characters removed. Assume the input string consists only of lowercase English letters.","solution":"def remove_duplicates(s): Removes duplicate characters from the given string. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: The string with all duplicate characters removed. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that takes in a list of integers and returns a new list containing only the even numbers from the original list. The function should also print the position of each even number in the original list.","solution":"def filter_even_numbers(lst): Takes a list of integers and returns a new list containing only the even numbers from the original list. Also prints the position of each even number in the original list. even_numbers = [] for i, num in enumerate(lst): if num % 2 == 0: even_numbers.append(num) print(f\\"Even number {num} found at position {i}\\") return even_numbers"},{"question":"Create a function that takes a string and removes all the white spaces from it. The function should also return the string in reverse order.","solution":"def remove_spaces_and_reverse(s): Removes all the white spaces from the string s and returns the string in reverse order. no_spaces = s.replace(\\" \\", \\"\\") reversed_string = no_spaces[::-1] return reversed_string"},{"question":"Create a function that takes in a list of integers and returns the maximum product that can be obtained by multiplying any two numbers from the list. The list is guaranteed to have at least two integers.","solution":"def max_product(nums): Returns the maximum product that can be obtained by multiplying any two numbers from the list. if len(nums) < 2: raise ValueError(\\"The list must have at least two integers\\") # Sort the list to easily get the top two maximum and minimum values nums.sort() # Maximum product can be obtained by: # 1. Multiplying the two largest positive numbers # 2. Multiplying the two smallest (most negative) numbers return max(nums[-1] * nums[-2], nums[0] * nums[1])"},{"question":"Create a function that accepts two numeric arguments and returns the smaller value (\`a\` or \`b\`). This function should also handle string comparisons lexicographically (alphabetical order) and return the string that appears first in lexicographical order.","solution":"def min_value(a, b): Returns the smaller value if both are numbers, or the one that appears first in lexicographical order if both are strings. if isinstance(a, (int, float)) and isinstance(b, (int, float)): return min(a, b) elif isinstance(a, str) and isinstance(b, str): return min(a, b) else: raise ValueError(\\"Both arguments must be of the same type - either both numbers or both strings.\\")"},{"question":"Create a function that takes a string as input and returns a boolean value. The function should return True if the string is a palindrome, False otherwise. A palindrome is a string that reads the same forwards and backwards.","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, False otherwise. # Normalize the string by converting to lowercase and removing non-alphanumeric characters normalized_s = ''.join(char.lower() for char in s if char.isalnum()) return normalized_s == normalized_s[::-1]"},{"question":"Create a function that takes two integers, \`a\` and \`b\`, as arguments and returns the largest pair sum in the array.","solution":"def largest_pair_sum(arr): Returns the largest pair sum in the provided array. Parameters: arr (list of int): A list of integers. Returns: int: The largest sum of any two distinct elements. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements.\\") arr.sort() return arr[-1] + arr[-2]"},{"question":"Create a function that takes an array of integers as input and returns the maximum sum of a subarray. The function should use Kadane's algorithm for this calculation.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray using Kadane's algorithm. if not arr: return 0 max_ending_here = arr[0] max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Create a function that takes an integer \`n\` and returns \`n\` raised to the power of \`n\`.","solution":"def power_of_self(n): Returns n raised to the power of n. return n ** n"},{"question":"Create a function that takes a string as input and returns a boolean indicating whether the string is a palindrome. A string is a palindrome if it can be read the same backward as forward.","solution":"def is_palindrome(s): Returns True if the input string is a palindrome, False otherwise. cleaned_string = ''.join(char.lower() for char in s if char.isalnum()) return cleaned_string == cleaned_string[::-1]"},{"question":"Create a function that takes a number as input and returns the absolute value of that number. The function should work for both integers and floating point numbers.","solution":"def absolute_value(number): Returns the absolute value of the given number. return abs(number)"},{"question":"Create a function that solves a given Sudoku puzzle. The function should take a 2D list called \`sudoku_grid\` as input, where each cell contains a number or is \`0\` if the cell is empty. The function should return the solved Sudoku puzzle as a 2D list.","solution":"def is_valid(board, row, col, num): Checks if placing the number 'num' in the position (row, col) is valid according to Sudoku rules. # Check if 'num' is not in the given row for x in range(9): if board[row][x] == num: return False # Check if 'num' is not in the given column for x in range(9): if board[x][col] == num: return False # Check if 'num' is not in the 3x3 subgrid start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[i + start_row][j + start_col] == num: return False return True def solve_sudoku(board): Solves the Sudoku puzzle by filling the board. empty_cell = find_empty(board) if not empty_cell: return True # Puzzle solved row, col = empty_cell for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve_sudoku(board): return True # Undo the current cell for backtracking board[row][col] = 0 return False def find_empty(board): Finds an empty cell in the Sudoku grid. Return (row, col) tuple of the found cell. If there is no empty cell, return None. for i in range(9): for j in range(9): if board[i][j] == 0: return (i, j) return None def solve_sudoku_puzzle(sudoku_grid): Main function to solve the Sudoku puzzle. solve_sudoku(sudoku_grid) return sudoku_grid"},{"question":"Create a function that takes an array of integers and returns a new array with the elements sorted in descending order. The function should be efficient and handle edge cases like an empty array or an array with one element.","solution":"def sort_descending(arr): Returns a new array with the elements sorted in descending order. Parameters: arr (list): A list of integers. Returns: list: A new list with elements sorted in descending order. return sorted(arr, reverse=True)"},{"question":"Create a function that takes in a list of integers and returns the product of all the integers in the list. If the list is empty, the function should return 1, as the product of an empty list is considered to be 1 (neutral element for multiplication).","solution":"def product_of_list(int_list): Returns the product of all the integers in the list. If the list is empty, returns 1. product = 1 for number in int_list: product *= number return product"},{"question":"Create a function that takes an integer as a parameter and returns the string 'Fizz' for multiples of 3, 'Buzz' for multiples of 5, 'FizzBuzz' for multiples of both 3 and 5, and the number itself as a string if it is not a multiple of 3 or 5.","solution":"def fizz_buzz(n): Returns 'Fizz' for multiples of 3, 'Buzz' for multiples of 5, 'FizzBuzz' for multiples of both 3 and 5, and the number itself as a string otherwise. if n % 3 == 0 and n % 5 == 0: return 'FizzBuzz' elif n % 3 == 0: return 'Fizz' elif n % 5 == 0: return 'Buzz' else: return str(n)"},{"question":"Create a function that takes an array of integers as input and returns a new array with the squares of these integers in reverse order.","solution":"def reverse_squares(arr): Returns a new array with the squares of the integers in the input array, in reverse order. :param arr: List of integers :return: List of squared integers in reverse order return [x**2 for x in arr][::-1]"},{"question":"Create a function that takes two lists as input and returns a new list that contains only the elements that are present in both lists. The function should also remove any duplicates from the resulting list.","solution":"def common_elements(list1, list2): Returns a list containing only the elements that are present in both input lists, with duplicates removed. return list(set(list1) & set(list2))"},{"question":"Create a function that takes a string and an integer n as inputs. The function should return the nth character in the string, if n is within the bounds of the string's index. If n is out of bounds, the function should return None. For example, if the input string is \\"hello\\" and n is 2, the function should return \\"l\\". However, if n is 10, it should return None.","solution":"def get_nth_character(s, n): Returns the nth character of the string s. If n is out of bounds, returns None. Parameters: s (str): The input string. n (int): The index of the character to be returned. Returns: char or None: The nth character of the string or None if n is out of bounds. if 0 <= n < len(s): return s[n] else: return None"},{"question":"Create a function that receives an array 'arr' of integers as input and returns a new array where the elements are in reverse order.","solution":"def reverse_array(arr): Returns a new array where the elements are in reverse order. Parameters: arr (list): A list of integers. Returns: list: A list of integers in reverse order. return arr[::-1]"},{"question":"Create a function that returns the sum of all the numbers in a given list. The function should be named \`calculate_sum\` and take one parameter, \`num_list\`, which is a list of numbers. The function should return the sum of all the numbers in the list.","solution":"def calculate_sum(num_list): Returns the sum of all the numbers in the given list. Parameters: num_list (list): A list of numbers Returns: int/float: The sum of all numbers in the list return sum(num_list)"},{"question":"Create a function that takes a list of integers and returns a dictionary where the keys are the integers and the values are their corresponding counts in the list.","solution":"def count_integers(lst): Returns a dictionary with the counts of each integer in the input list. Args: lst (list of int): A list of integers. Returns: dict: A dictionary where keys are integers from the list and values are their counts. count_dict = {} for num in lst: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 return count_dict"},{"question":"Create a function that takes a list of integers and returns a list containing only the even numbers from the original list. How can this be done using Python?","solution":"def filter_even_numbers(numbers): Returns a list of even numbers from the provided list of integers. return [num for num in numbers if num % 2 == 0]"},{"question":"Create a function that takes in a function and a list of arguments, and returns the result of applying the function to each item in the list. If the function is not callable, raise a TypeError. If the list is empty, return an empty list.","solution":"def apply_function_to_list(func, args): Applies the provided function to each element in the args list. Parameters: func (callable): The function to apply. args (list): The list of arguments to apply the function to. Returns: list: The results of applying the function to each element in args. Raises: TypeError: If func is not callable. if not callable(func): raise TypeError(\\"Provided func is not callable.\\") return [func(arg) for arg in args]"},{"question":"Create a function that returns the number of times a substring appears in a string, with an optional parameter to perform a case-insensitive search. Parameters - string, substring, case_sensitive=True. The function should also handle over explicit bounds, such as an empty string or substring, returning 0 in such cases.","solution":"def count_substring(string, substring, case_sensitive=True): Returns the number of times a substring appears in a string, with an optional parameter to perform a case-insensitive search. Returns 0 for empty string or substring. Parameters: - string (str): The string to search within. - substring (str): The substring to find. - case_sensitive (bool): Perform case-sensitive search if True, case-insensitive if False. Returns: - int: The number of times the substring appears in the string. if not string or not substring: return 0 if not case_sensitive: string = string.lower() substring = substring.lower() return string.count(substring)"},{"question":"Create a function that takes two numbers and returns the sum of all numbers between them, including the start and end numbers themselves. If the start number is greater than the end number, the function should return None.","solution":"def sum_between(start, end): Returns the sum of all numbers between start and end, inclusive. If the start number is greater than the end number, return None. if start > end: return None return sum(range(start, end + 1))"},{"question":"Create a function that takes a list of integers and returns the sum of the absolute values of all integers in the list, ignoring any integer that is negative. Implement this function in Python.","solution":"def sum_of_absolute_non_negative_integers(lst): Returns the sum of the absolute values of all non-negative integers in the list. return sum(abs(x) for x in lst if x >= 0)"},{"question":"Create a function that generates all combinations of a list of elements. The function should take a list as input and return all possible combinations of its elements, including the empty set and the set itself. The function should consider the order of elements in the input list when generating combinations.","solution":"import itertools def generate_combinations(elements): Returns all possible combinations of a list of elements, including the empty set and the set itself. all_combinations = [] for r in range(len(elements) + 1): all_combinations.extend(itertools.combinations(elements, r)) return all_combinations"},{"question":"Create a function that finds the minimum number of coins needed to make the amount from the given array of coin denominations. The function should take an array of integers representing coin denominations and the target amount and return the minimum number of coins. Let's assume all coin denominations are powers of 2 (1, 2, 4, 8, 16) and the target amount is an integer.","solution":"def min_coins(coin_denominations, target_amount): Calculates the minimum number of coins needed to achieve the target amount using coin denominations. Parameters: coin_denominations (list): List of integers representing coin denominations. target_amount (int): The target amount to be achieved. Returns: int: Minimum number of coins needed to make the target amount. # Sort the coin denominations in descending order coin_denominations.sort(reverse=True) count = 0 remaining_amount = target_amount for coin in coin_denominations: if coin <= remaining_amount: count += remaining_amount // coin remaining_amount %= coin return count"},{"question":"Create a function that returns the most frequent element in an array using a dictionary in Python.","solution":"def most_frequent_element(arr): Returns the most frequent element in the array using a dictionary. Parameters: arr (list): List of elements Returns: The most frequent element in the array. If there are multiple elements with the same highest frequency, the first one encountered will be returned. frequency_dict = {} for elem in arr: frequency_dict[elem] = frequency_dict.get(elem, 0) + 1 most_frequent = max(frequency_dict, key=frequency_dict.get) return most_frequent"},{"question":"Create a function that calculates the sum of all numbers in an array of integers. The function should handle an empty array by returning 0.","solution":"def sum_array(numbers): Returns the sum of all numbers in the array. If the array is empty, returns 0. return sum(numbers)"},{"question":"Create a function that counts the number of unique elements in an array. The function should take an array of integers as input and return the count of distinct elements.","solution":"def count_unique_elements(arr): Returns the count of unique elements in the array. Parameters: arr (list): A list of integers. Returns: int: The count of distinct elements. return len(set(arr))"},{"question":"Create a function that calculates the sum of squares of the first \`n\` natural numbers. The function should be efficient and handle large values of \`n\` without causing overflow. To ensure the function is efficient, avoid using loops where possible and leverage mathematical properties to find the sum directly.","solution":"def sum_of_squares(n): Returns the sum of squares of the first n natural numbers. The formula used is: n(n + 1)(2n + 1) / 6 return (n * (n + 1) * (2 * n + 1)) // 6"},{"question":"Create a function that takes in a number of seconds and converts it into a string representation of the time in terms of days, hours, minutes, and seconds. For example, converting 93600 seconds should return \\"1 day(s) 0 hour(s) 0 minute(s) 0 second(s)\\".","solution":"def convert_seconds(seconds): Converts a number of seconds into a string representation of the time in terms of days, hours, minutes, and seconds. days = seconds // 86400 seconds %= 86400 hours = seconds // 3600 seconds %= 3600 minutes = seconds // 60 seconds %= 60 return f\\"{days} day(s) {hours} hour(s) {minutes} minute(s) {seconds} second(s)\\""},{"question":"Create a function that takes an array of integers as input and returns the array with all even numbers at the beginning of the array and all odd numbers at the end, preserving the relative order of the numbers.","solution":"def segregate_even_odd(arr): Returns a new array with all even numbers at the beginning and all odd numbers at the end, preserving the relative order of the numbers. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"Create a function that takes a list of numbers and returns the sum of the squares of the odd numbers that are greater than 10.","solution":"def sum_of_squares_of_odds(nums): Returns the sum of the squares of the odd numbers that are greater than 10. :param nums: List of numbers :return: Sum of the squares of the odd numbers greater than 10 return sum(x ** 2 for x in nums if x > 10 and x % 2 != 0)"},{"question":"Create a function that takes in three parameters: an array of strings, a target string, and a replacement string. The function should return a new array where all instances of the target string within the input array have been replaced with the replacement string.","solution":"def replace_elements(arr, target, replacement): Returns a new array where all instances of the target string within the input array have been replaced with the replacement string. Parameters: arr (list of str): The input array of strings. target (str): The target string to be replaced. replacement (str): The replacement string. Returns: list of str: The modified array with the target string replaced. return [replacement if element == target else element for element in arr]"},{"question":"Create a function that implements the bubble sort algorithm to sort an array of numbers. Provide a step-by-step breakdown of the algorithm process.","solution":"def bubble_sort(arr): Sorts an array of numbers using the bubble sort algorithm. Bubble sort works by repeatedly stepping through the list, comparing adjacent elements and swapping them if they are in the wrong order. This process is repeated until the list is sorted. Args: arr (list): A list of numbers to be sorted. Returns: list: The sorted list. n = len(arr) for i in range(n): # Track whether any swaps were made in this pass swapped = False for j in range(0, n-i-1): # Compare adjacent elements if arr[j] > arr[j+1]: # Swap if they are in the wrong order arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no two elements were swapped by inner loop, then break if not swapped: break return arr"},{"question":"Create a function that takes two integers as input and returns their sum. If the sum is an even number, return the sum multiplied by 3. If the sum is an odd number, return the sum multiplied by 2.","solution":"def custom_sum(a, b): Returns the sum of a and b. If the sum is even, multiplies it by 3. If the sum is odd, multiplies it by 2. sum_result = a + b if sum_result % 2 == 0: return sum_result * 3 else: return sum_result * 2"},{"question":"Create a function that takes a string and reverses it while ignoring case sensitivity. The function should ignore non-alphabetic characters.","solution":"def reverse_string_ignoring_case_non_alpha(s): Returns a string that is the reversed version of the input string, ignoring case sensitivity and non-alphabetic characters. # Extract alphabetic characters in lowercase alphabetic_chars = [char.lower() for char in s if char.isalpha()] # Reverse the list of alphabetic characters reversed_chars = alphabetic_chars[::-1] # Create a list to collect the final result result = [] # Reconstruct the string, matching non-alphabetic chars with reversed alphabetic chars alphabetic_index = 0 for char in s: if char.isalpha(): result.append(reversed_chars[alphabetic_index]) alphabetic_index += 1 else: result.append(char) return ''.join(result)"},{"question":"Create a function that reverses the elements of a given list. The function should work for a list containing elements of any data type.","solution":"def reverse_list(lst): Reverses the elements of a given list. Args: lst (list): The list to be reversed. Returns: list: A new list with the elements in reversed order. return lst[::-1]"},{"question":"Create a function that takes an integer as input and returns the factorial of that number. Ensure to handle edge cases where the input might be negative or outside the typical range of input for a factorial function.","solution":"def factorial(n): Returns the factorial of a given number n. If n is negative, returns None since factorial is not defined for negative numbers. If n is outside the typical range, i.e., non-integer, raises a ValueError. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: return None if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that removes all the characters from a string except for those that are common to both input strings. The function should take two string parameters, \`str1\` and \`str2\`, and return a string that contains only the characters present in both \`str1\` and \`str2\`.","solution":"def common_characters(str1, str2): Returns a string that contains only the characters present in both str1 and str2. set1 = set(str1) set2 = set(str2) common_chars = set1.intersection(set2) result = ''.join([ch for ch in str1 if ch in common_chars]) return result"},{"question":"Create a function that takes a list of integers and returns a new list where each element is the square of the original element. Additionally, filter out any negative numbers from the original list and only consider non-negative numbers for squaring.","solution":"def square_non_negative_numbers(numbers): Returns a new list where each element is the square of the original element, but only for non-negative numbers. Parameters: numbers (list of int): The list of integers to be processed. Returns: list of int: A list of squares of the non-negative integers from the input list. return [x**2 for x in numbers if x >= 0]"},{"question":"Create a function that finds the shortest path in a weighted graph using Dijkstra's algorithm. The graph should be represented as an adjacency list. The function should take three parameters: \`graph\`, \`source_node\`, and \`destination_node\`. The graph is represented as a dictionary where the keys are the nodes and the values are lists of tuples representing the adjacent nodes and their edge weights.","solution":"import heapq def dijkstra(graph, source_node, destination_node): Finds the shortest path in a weighted graph using Dijkstra's algorithm. Parameters: - graph: Dict, an adjacency list where the keys are nodes and values are lists of tuples representing adjacent nodes and their edge weights. - source_node: the starting node - destination_node: the target node Returns: - The shortest distance from source_node to destination_node. pq = [] heapq.heappush(pq, (0, source_node)) distances = {node: float('inf') for node in graph} distances[source_node] = 0 visited = set() while pq: current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue if current_node == destination_node: return current_distance visited.add(current_node) for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return float('inf') if distances[destination_node] == float('inf') else distances[destination_node]"},{"question":"Create a function that accepts a string value and returns the number of vowels in it, but it should only consider lowercase English alphabets.","solution":"def count_vowels(s): Returns the number of vowels in the string s, considering only lowercase English alphabets. vowels = 'aeiou' return sum(1 for char in s if char in vowels)"},{"question":"Create a function that takes two string inputs, one representing an infix expression and the other representing an operator precedence. Your goal is to convert this infix expression to a postfix expression using the provided operator precedence dictionary. Additionally, your function should be able to prioritize different operators based on the given precedence in the operator precedence dictionary.","solution":"def infix_to_postfix(infix_expr, precedence): Convert an infix expression to a postfix expression using the provided operator precedence. Args: infix_expr (str): The infix expression to convert. precedence (dict): A dictionary containing operators as keys and their precedence as values. Returns: str: The corresponding postfix expression. def get_precedence(op): return precedence[op] if op in precedence else -1 def is_operator(c): return c in precedence output = [] stack = [] for char in infix_expr: if char.isalnum(): output.append(char) elif is_operator(char): while stack and get_precedence(stack[-1]) >= get_precedence(char): output.append(stack.pop()) stack.append(char) elif char == '(': stack.append(char) elif char == ')': while stack and stack[-1] != '(': output.append(stack.pop()) stack.pop() while stack: output.append(stack.pop()) return ''.join(output)"},{"question":"Create a function that interpolates a given set of points using the linear interpolation method. The function should take in a list of tuples, where each tuple represents a point in the format (x, y). The function should return a list of y-values corresponding to a range of x-values specified by the user. The number of x-values should be specified by the user as well.","solution":"def linear_interpolation(points, num_points, x_start, x_end): Interpolates the given points using the linear interpolation method. Parameters: points (list of tuples): List of given points in the format (x, y). num_points (int): The number of x-values to generate. x_start (float): The starting value of the x-range. x_end (float): The ending value of the x-range. Returns: list: List of y-values corresponding to the interpolated x-values. if not points or num_points <= 0 or x_start > x_end: return [] points = sorted(points) # Ensure points are sorted by x-values x_values = [x_start + i * (x_end - x_start) / (num_points - 1) for i in range(num_points)] y_values = [] for x in x_values: # Find the interval [x_i, x_{i+1}] such that x_i <= x <= x_{i+1} for i in range(len(points) - 1): if points[i][0] <= x <= points[i + 1][0]: x0, y0 = points[i] x1, y1 = points[i + 1] # Linear interpolation formula y = y0 + (y1 - y0) * (x - x0) / (x1 - x0) y_values.append(y) break else: # Handle the case where x is outside the range of given points if x <= points[0][0]: y_values.append(points[0][1]) elif x >= points[-1][0]: y_values.append(points[-1][1]) return y_values"},{"question":"Create a function that takes an integer \`n\` and returns a list of the first \`n\` even Fibonacci numbers.","solution":"def even_fibonacci_numbers(n): Returns a list of the first n even Fibonacci numbers. if n <= 0: return [] even_fibs = [] a, b = 0, 1 while len(even_fibs) < n: a, b = b, a + b if a % 2 == 0: even_fibs.append(a) return even_fibs"},{"question":"Create a function that calculates the sum of all integers from 1 to \`n\` inclusively. The function should be named \`calculateSum\` and should have one parameter \`n\`, which is an integer representing the upper limit of the range (inclusive).","solution":"def calculateSum(n): Returns the sum of all integers from 1 to n inclusively. return n * (n + 1) // 2"},{"question":"Create a function that can determine if any given number is a perfect cube. Your code should include proper documentation and testing examples.","solution":"def is_perfect_cube(n): Determines if the given number n is a perfect cube. A number n is a perfect cube if there exists an integer m such that m**3 = n. Parameters: n (int): The number to check. Returns: bool: True if n is a perfect cube, False otherwise. if n < 0: n = abs(n) cube_root = round(n ** (1/3)) return cube_root ** 3 == n cube_root = round(n ** (1/3)) return cube_root ** 3 == n"},{"question":"Create a function that takes a list and an integer as input and returns a new list where the elements of the original list are repeated 'n' times. If 'n' is 0, return an empty list.","solution":"def repeat_elements(lst, n): Takes a list and an integer n and returns a new list where the elements of the original list are repeated n times. If n is 0, return an empty list. if n == 0: return [] return lst * n"},{"question":"Create a function that accepts a positive integer and returns a list of its factors, excluding 1 and the number itself. For example, if the function is called with the argument 12, it should return \`[2, 3, 4, 6]\`.","solution":"def factors(n): Returns a list of factors of n, excluding 1 and n itself. if n <= 1: return [] factor_list = [i for i in range(2, n) if n % i == 0] return factor_list"},{"question":"Create a function that takes a list of dictionaries as input, where each dictionary represents a product with keys 'name', 'price', and 'quantity'. The function should calculate the total price of all products in the list by multiplying the 'price' by the 'quantity' for each product and then summing up all these values. Return the total price.","solution":"def calculate_total_price(products): Calculates the total price of all products in the list by multiplying the 'price' by the 'quantity' for each product and then summing up all these values. :param products: List of dictionaries, each representing a product with keys 'name', 'price', and 'quantity'. :return: The total price of all products. total_price = 0 for product in products: product_total = product['price'] * product['quantity'] total_price += product_total return total_price"},{"question":"Create a function that generates a random color in hexadecimal format.","solution":"import random def generate_random_hex_color(): Generates a random color in hexadecimal format. return '#{:06x}'.format(random.randint(0, 0xFFFFFF))"},{"question":"Create a function that generates a password of a given length. The password should include at least one uppercase letter, one lowercase letter, one digit, and one special character.","solution":"import random import string def generate_password(length): Generates a password of the given length. The password includes at least one uppercase letter, one lowercase letter, one digit, and one special character. if length < 4: raise ValueError(\\"Password length should be at least 4 to include all character types\\") # At least one of each required type uppercase = random.choice(string.ascii_uppercase) lowercase = random.choice(string.ascii_lowercase) digit = random.choice(string.digits) special = random.choice(string.punctuation) # Remaining characters can be anything remaining_length = length - 4 remaining_characters = random.choices(string.ascii_letters + string.digits + string.punctuation, k=remaining_length) # Combine and shuffle password_list = list(uppercase + lowercase + digit + special + ''.join(remaining_characters)) random.shuffle(password_list) return ''.join(password_list)"},{"question":"Create a function that removes all occurrences of the digits from the string.","solution":"def remove_digits(input_string): Removes all occurrences of digits from the string. :param input_string: The string from which digits need to be removed. :return: The string after removing all digits. return ''.join(filter(lambda x: not x.isdigit(), input_string))"},{"question":"Create a function that takes in a list of integers, and determines the maximum sum possible by adding up any two distinct elements in the list.","solution":"def max_sum_of_two(nums): Returns the maximum sum possible by adding up any two distinct elements in the list. :param nums: List of integers :return: Maximum sum of any two distinct elements if len(nums) < 2: raise ValueError(\\"List must contain at least two elements.\\") max1, max2 = float('-inf'), float('-inf') for num in nums: if num > max1: max1, max2 = num, max1 elif num > max2: max2 = num return max1 + max2"},{"question":"Create a function that takes two lists of integers as input and returns a new list containing the maximum values from each index of the input lists. If the input lists are of different lengths, the function should handle the situation gracefully by ignoring the extra elements in the longer list. This is a classic problem often referred to as \\"zipping\\" and then finding the maximum of each pair.","solution":"def max_of_each_index(list1, list2): Returns a list containing the maximum values from each index of the input lists. If the input lists are of different lengths, the extra elements in the longer list are ignored. return [max(v1, v2) for v1, v2 in zip(list1, list2)]"},{"question":"Create a function that takes two numbers as input and returns their greatest common divisor (GCD). The function should be named \`findGCD\` and should work for both positive and negative integers. To ensure the solution is effective, include a series of test cases to verify its correctness.","solution":"def findGCD(a, b): Returns the greatest common divisor (GCD) of two integers a and b. The GCD is the largest positive integer that divides both a and b without leaving a remainder. a, b = abs(a), abs(b) while b: a, b = b, a % b return a"},{"question":"Create a function that accepts two integers \`a\` and \`b\` and returns the sum of their squares. Also, implement error handling to check if the inputs are integers and if not, return a suitable error message.","solution":"def sum_of_squares(a, b): Returns the sum of the squares of a and b, and checks if inputs are integers. if not isinstance(a, int) or not isinstance(b, int): return \\"Both inputs must be integers.\\" return a**2 + b**2"},{"question":"Create a function that takes a string and returns a dictionary where the keys are the unique characters in the string and the values are their corresponding ASCII values.","solution":"def string_to_ascii_dict(s): Returns a dictionary where the keys are unique characters in the string and the values are their corresponding ASCII values. return {char: ord(char) for char in set(s)}"},{"question":"Create a function that takes two numbers as input arguments. Using the digits of these two numbers, create the largest possible number that contains exactly those digits, with each digit appearing only once.","solution":"def largest_possible_number(num1, num2): Combine the digits of num1 and num2 to create the largest possible number. Each digit should appear only once. # Convert numbers to strings and get unique digits as a set digits_set = set(str(num1) + str(num2)) # Create a sorted list of these digits in descending order sorted_digits = sorted(digits_set, reverse=True) # Join the sorted list to form the largest possible number largest_number = int(''.join(sorted_digits)) return largest_number"},{"question":"Create a function that not only counts the number of occurrences of a specified element in a list, but also returns the indices of those occurrences. For example, if you're dealing with the list \`[1, 2, 3, 2, 4, 2]\` and the specified element is \`2\`, your function should return a tuple \`(3, [1, 3, 5])\`, where \`3\` is the count and \`[1, 3, 5]\` are the indices of \`2\` in the list.","solution":"def count_and_get_indices(lst, element): Counts the number of occurrences of the specified element in the list and also returns the indices of those occurrences. Parameters: lst (list): The list to search. element (any): The element to count and find indices for. Returns: tuple: A tuple containing the count of occurrences and a list of indices. count = lst.count(element) indices = [i for i, x in enumerate(lst) if x == element] return (count, indices)"},{"question":"Create a function that calculates the total price of items in a shopping cart.","solution":"def total_price(cart_items): Calculates the total price of items in a shopping cart. Parameters: cart_items (list of tuples): A list where each tuple contains the price of the item and the quantity in this order (price, quantity). Returns: float: The total price of all items in the cart. total = 0.0 for price, quantity in cart_items: total += price * quantity return total"},{"question":"Create a function that takes an integer as input and returns the reverse of the integer. If the integer is negative, ignore the negative sign and only reverse the digits. For example, given the input \`-4567\`, the function should return \`7654\`. If the integer is \`0\`, the function should return \`0\`.","solution":"def reverse_integer(n): Returns the reverse of the integer n. If the integer is negative, the negative sign is ignored and only digits are reversed. str_n = str(abs(n)) reversed_str_n = str_n[::-1] return int(reversed_str_n)"},{"question":"Create a function that takes in a list of integers and a number \`n\`. The function should return a new list containing the first \`n\` elements from the input list. If \`n\` is greater than the length of the list, the function should return the entire list.","solution":"def get_first_n_elements(lst, n): Returns the first n elements from the input list. If n is greater than the length of the list, returns the entire list. :param lst: List of integers :param n: Number of elements to return :return: New list containing the first n elements from lst return lst[:n]"},{"question":"Create a function that takes a string \`s\` as input and checks if every character in \`s\` is either lower case or upper case. If the string contains both lower case and upper case characters, the function should return \`false\`. If all characters are lower case or upper case, it should return \`true\`. The function should ignore non-alphabetical characters. For example, a string containing digits or special characters should not affect the result.","solution":"def is_uniform_case(s): Checks if every character in the string s is either lower case or upper case. Non-alphabetical characters are ignored. has_lower = has_upper = False for char in s: if char.islower(): has_lower = True elif char.isupper(): has_upper = True if has_lower and has_upper: return False return True"},{"question":"Create a function that calculates the factorial of a number using recursion. The function should accept an integer as input and return the factorial of that number. Additionally, write a check function that tests the factorial function with various inputs, including edge cases and large numbers if possible within the language's capabilities.","solution":"def factorial(n): Returns the factorial of n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that can detect cyclic dependencies in a graph given its adjacency list. A cyclic dependency occurs when you can start from one node and return to the starting node using the edges present in the graph.","solution":"def has_cycle(graph): Detects if there is a cycle in the graph. :param graph: A dictionary where keys represent nodes and values represent lists of adjacent nodes. :return: True if there is a cycle, False otherwise. visited = set() stack = set() def visit(node): if node in stack: return True if node in visited: return False visited.add(node) stack.add(node) for neighbor in graph.get(node, []): if visit(neighbor): return True stack.remove(node) return False for node in graph: if visit(node): return True return False"},{"question":"Create a function that takes two integers \`m\` and \`n\` as inputs and returns the sum of all integers in the range from \`m\` to \`n\` (inclusive). python","solution":"def sum_of_range(m, n): Returns the sum of all integers in the range from m to n (inclusive). if m > n: return 0 return sum(range(m, n + 1))"},{"question":"Create a function that takes an integer and returns whether it is divisible by 3 or not. If it is, return \\"Divisible\\", otherwise return \\"Not Divisible\\".","solution":"def is_divisible_by_3(n): Returns \\"Divisible\\" if the integer n is divisible by 3, otherwise returns \\"Not Divisible\\". return \\"Divisible\\" if n % 3 == 0 else \\"Not Divisible\\""},{"question":"Create a function that takes in an integer and a list of integers and returns true if the integer is in the list, otherwise returns false.","solution":"def contains(target, lst): Returns True if target is in the list lst, otherwise returns False. Parameters: target (int): The integer to search for. lst (list): The list of integers to search within. Returns: bool: True if target is in lst, False otherwise. return target in lst"},{"question":"Create a function that replaces all vowels in a given string with the corresponding digit in the sequence 'aeiou' and returns the modified string. 'a' becomes '1', 'e' becomes '2', 'i' becomes '3', 'o' becomes '4', and 'u' becomes '5'. Assume the input string consists only of lowercase letters.","solution":"def replace_vowels_with_digits(s): Replaces all vowels in a given string with the corresponding digit in the sequence 'aeiou'. 'a' becomes '1', 'e' becomes '2', 'i' becomes '3', 'o' becomes '4', and 'u' becomes '5'. vowel_to_digit = {'a': '1', 'e': '2', 'i': '3', 'o': '4', 'u': '5'} result = [] for char in s: if char in vowel_to_digit: result.append(vowel_to_digit[char]) else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes in two lists of numbers, \`list1\` and \`list2\`, and returns a new list that contains the unique numbers from both \`list1\` and \`list2\`. If a number appears in both lists, it should only appear once in the resulting list.","solution":"def unique_numbers(list1, list2): Returns a list of unique numbers from both list1 and list2. If a number appears in both lists, it appears only once in the result. return list(set(list1) | set(list2))"},{"question":"Create a function that finds the first uppercase letter in a string and converts it to lowercase. If there are no uppercase letters, return the string as is. Also, include a check function to test your function with various strings.","solution":"def first_upper_to_lower(s): Finds the first uppercase letter in a string and converts it to lowercase. If there are no uppercase letters, returns the string as is. for i, char in enumerate(s): if char.isupper(): return s[:i] + char.lower() + s[i+1:] return s"},{"question":"Create a function that prints a given array, prints the middle element of the array, and prints the sum of the array's elements.","solution":"def array_operations(arr): Given an array, this function prints the entire array, prints the middle element of the array, and prints the sum of the array's elements. if not arr: print(\\"The array is empty\\") return # Print the array print(f\\"Array: {arr}\\") # Calculate and print the middle element middle_index = len(arr) // 2 if len(arr) % 2 == 0: middle_element = arr[middle_index - 1:middle_index + 1] else: middle_element = arr[middle_index] print(f\\"Middle element(s): {middle_element}\\") # Calculate and print the sum of the elements array_sum = sum(arr) print(f\\"Sum of array elements: {array_sum}\\") return arr, middle_element, array_sum"},{"question":"Create a function that determines if a given number is a perfect square. Provide a piece of code that demonstrates how to use this function.","solution":"import math def is_perfect_square(n): Determines if a given number n is a perfect square. Parameters: n (int): The number to check. Returns: bool: True if n is a perfect square, False otherwise. if n < 0: return False root = math.isqrt(n) return root * root == n # Example usage: # print(is_perfect_square(16)) # Output: True # print(is_perfect_square(14)) # Output: False"},{"question":"Create a function that takes a string of text and returns the text with the vowels reversed. For example, given the string \\"Hello world\\", the function should return \\"Hello wlord\\". Note that the original string's case of letters should be preserved.","solution":"def reverse_vowels(text): Reverses the vowels in a given string while preserving the case of letters. Parameters: text (str): The input text to process. Returns: str: The text with vowels reversed. vowels = \\"aeiouAEIOU\\" vowel_positions = [i for i, char in enumerate(text) if char in vowels] reversed_text = list(text) left, right = 0, len(vowel_positions) - 1 while left < right: reversed_text[vowel_positions[left]], reversed_text[vowel_positions[right]] = ( reversed_text[vowel_positions[right]], reversed_text[vowel_positions[left]], ) left += 1 right -= 1 return \\"\\".join(reversed_text)"},{"question":"Create a function that takes a list of dictionaries, each representing a person's personal information. The function should return a new list of dictionaries, where each dictionary represents a person's personal information but with certain keys excluded. The function should accept an optional parameter to specify which keys to exclude. If no parameter is provided, all keys should be included.","solution":"def filter_personal_info(data, keys_to_exclude=[]): Returns a list of dictionaries with specified keys excluded from each dictionary. Parameters: data (list): List of dictionaries, where each dictionary contains personal information. keys_to_exclude (list): List of keys to exclude from each dictionary. Returns: list: New list of dictionaries with specified keys excluded from each dictionary. result = [] for entry in data: filtered_entry = {key: value for key, value in entry.items() if key not in keys_to_exclude} result.append(filtered_entry) return result"},{"question":"Create a function that generates a random number between two numbers. The function should accept two parameters, \`min\` and \`max\`, and should return a random number between \`min\` and \`max\` inclusive.","solution":"import random def generate_random_number(min, max): Returns a random number between min and max inclusive. :param min: The minimum value in the range. :param max: The maximum value in the range. :return: A random number between min and max. return random.randint(min, max)"},{"question":"Create a function that takes an array and returns the sum of all the elements that are in a specific index range. The index range is provided as two arguments to the function. If the start or end index is out of bounds of the array, the function should handle it gracefully by ignoring these elements.","solution":"def sum_in_range(arr, start_idx, end_idx): Returns the sum of elements in the array \`arr\` between \`start_idx\` and \`end_idx\` (both inclusive). If indices are out of bounds, they are adjusted to be within the proper range. if not arr: return 0 # Adjust indices if they are out of bounds start_idx = max(0, start_idx) end_idx = min(len(arr) - 1, end_idx) return sum(arr[start_idx:end_idx + 1])"},{"question":"Create a function that checks if a user is authenticated based on their username and password. The function should return \`true\` if the username is \\"admin\\" and the password is \\"password\\", otherwise it should return \`false\`. Additionally, the user should be given two attempts to enter the correct credentials before the function returns \`false\`.","solution":"def authenticate_user(username, password, max_attempts=2): Check if a user is authenticated based on their username and password. Returns True if the username is \\"admin\\" and the password is \\"password\\". Allows up to max_attempts attempts. attempts = 0 while attempts < max_attempts: if username == \\"admin\\" and password == \\"password\\": return True attempts += 1 return False"},{"question":"Create a function that takes a list of integers and prints \\"Even\\" or \\"Odd\\" for each number in the list. If the number is zero, print \\"Zero\\". Use recursion to solve this problem.","solution":"def print_even_odd(numbers): Recursively print \\"Even\\" or \\"Odd\\" for each number in the list, \\"Zero\\" if the number is zero. def helper(index): if index == len(numbers): return if numbers[index] == 0: print(\\"Zero\\") elif numbers[index] % 2 == 0: print(\\"Even\\") else: print(\\"Odd\\") helper(index + 1) helper(0)"},{"question":"Create a function that takes an array of integers and returns the sum of all the elements in the array. If the array is empty, the function should return 0. If the array contains any negative numbers, the function should subtract those numbers from the sum. If the array contains any non-integer values, the function should raise a ValueError.","solution":"def sum_array(arr): Returns the sum of all elements in the array. Subtracts negative numbers, returns 0 if the array is empty, and raises a ValueError if the array contains non-integer values. :param arr: list of integers :return: integer sum of all elements if not arr: return 0 total = 0 for item in arr: if not isinstance(item, int): raise ValueError(\\"All elements must be integers\\") total += item return total"},{"question":"Create a function that will list all possible combinations of items from a given list of items. You should be able to specify the number of items to select from the list. For example, if the list of items is \`['apple', 'banana', 'cherry']\` and you want to select \`2\` items, the function should return \`[('apple', 'banana'), ('apple', 'cherry'), ('banana', 'cherry')]\`. If the list is empty or \`n\` is greater than the length of the list, the function should return an empty list. The order of items in the combinations does not matter, and the function should ignore duplicates.","solution":"from itertools import combinations def list_combinations(items, n): Returns all possible combinations of 'items' selecting 'n' at a time. If 'items' is empty or 'n' is greater than the length of the list, returns an empty list. Args: items (list): List of items to combine. n (int): Number of items to select. Returns: list: A list of tuples, each containing a combination of 'n' items. if not items or n > len(items): return [] return list(combinations(items, n))"},{"question":"Create a function that takes an array of integers and returns a new array with the integers sorted in ascending order. You should not modify the original array in this function.","solution":"def sort_array(arr): Returns a new array with the integers sorted in ascending order. return sorted(arr)"},{"question":"Create a function that takes an input \`x\` and returns \`x\` to the power of \`n\`. Implement this function both iteratively and recursively.","solution":"def iterative_power(x, n): Returns x to the power of n using an iterative approach. result = 1 for _ in range(abs(n)): result *= x return result if n >= 0 else 1 / result def recursive_power(x, n): Returns x to the power of n using a recursive approach. if n == 0: return 1 elif n < 0: return 1 / recursive_power(x, -n) else: return x * recursive_power(x, n - 1)"},{"question":"Create a function that sorts an array using the merge sort algorithm. Merge sort should be implemented using recursion.","solution":"def merge_sort(arr): Sorts an array using the merge sort algorithm. Merge sort is implemented using recursion. :param arr: List of elements to be sorted :return: Sorted list if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merges two sorted arrays into one sorted array. :param left: Sorted left half :param right: Sorted right half :return: Merged and sorted array merged = [] left_index, right_index = 0, 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: merged.append(left[left_index]) left_index += 1 else: merged.append(right[right_index]) right_index += 1 # If there are leftovers in either left or right, add them to the end merged.extend(left[left_index:]) merged.extend(right[right_index:]) return merged"},{"question":"Create a function that takes in a list of integers and returns a list of the next greater elements for each element in the input list. The next greater element for an element x in the input list is the first greater element on the right side. If no such element exists, output -1 for that position.","solution":"def next_greater_elements(nums): Returns a list of the next greater elements for each element in the input list. The next greater element for an element x in the input list is the first greater element on the right side. If no such element exists, output -1 for that position. n = len(nums) result = [-1] * n stack = [] for i in range(n): while stack and nums[stack[-1]] < nums[i]: index = stack.pop() result[index] = nums[i] stack.append(i) return result"},{"question":"Create a function that takes an array of integers and an integer \`target\`. The function should return the index of the first occurrence of the \`target\` in the array. If the \`target\` is not found, the function should return -1.","solution":"def find_target_index(arr, target): Returns the index of the first occurrence of the target in the array. If the target is not found, returns -1. for index, value in enumerate(arr): if value == target: return index return -1"},{"question":"Create a function that determines the number of days between two given dates.","solution":"from datetime import datetime def days_between_dates(date1, date2): Returns the number of days between two dates. Parameters: date1 (str): The first date in format 'YYYY-MM-DD'. date2 (str): The second date in format 'YYYY-MM-DD'. Returns: int: The number of days between date1 and date2. The result is always positive. d1 = datetime.strptime(date1, '%Y-%m-%d') d2 = datetime.strptime(date2, '%Y-%m-%d') return abs((d2 - d1).days)"},{"question":"Create a function that takes an array of integers and an integer k, and returns True if k is present in the array and False otherwise.","solution":"def contains(arr, k): Checks if array arr contains the integer k. Parameters: arr (list of int): The array to search in. k (int): The integer to search for. Returns: bool: True if k is present in arr, False otherwise. return k in arr"},{"question":"Create a function that generates a dictionary containing the frequency of each character in a given string. The key should be the character itself, and the value should be the number of times it appears in the string.","solution":"def char_frequency(s): Generates a dictionary containing the frequency of each character in a given string. Args: s (str): The input string. Returns: dict: A dictionary where the key is the character and the value is the frequency of that character in the string. frequency_dict = {} for char in s: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Create a function that returns a new list containing the squares of all numbers in the given list","solution":"def square_list(nums): Returns a list of squares of the given list of numbers. Args: nums: A list of integers or floats. Returns: A list containing the squares of all the numbers. return [num ** 2 for num in nums]"},{"question":"Create a function that takes two numbers as input and returns their difference. The first number is a numeric value, and the second number is a percentage. You should return the difference after subtracting the percentage of the second number from the first number.","solution":"def difference(numeric_value, percentage): Returns the difference after subtracting the percentage of the second number from the first number. Parameters: numeric_value (float): The numeric value percentage (float): The percentage to subtract from the numeric value Returns: float: The result after subtracting the percentage return numeric_value - (numeric_value * (percentage / 100))"},{"question":"Create a function that takes a list of integers and returns a new list where each element is the difference between the maximum and minimum values in the original list.","solution":"def max_min_differences(lst): Returns a new list where each element is the difference between the maximum and minimum values in the original list. Parameters: lst (list): List of integers Returns: list: List where each element is the difference between the maximum and minimum values in the original list. if not lst: return [] max_val = max(lst) min_val = min(lst) difference = max_val - min_val return [difference] * len(lst)"},{"question":"Create a function that calculates the difference between the sum of digits of a given number and the product of digits of a given number.","solution":"def sum_and_product_difference(n): Returns the difference between the sum of digits and the product of digits of the given number n. if n == 0: return 0 digits = [int(digit) for digit in str(abs(n))] sum_of_digits = sum(digits) product_of_digits = 1 for digit in digits: product_of_digits *= digit return sum_of_digits - product_of_digits"},{"question":"Create a function that calculates the number of ways to partition a given positive integer into a sum of positive integers, with the order of summands considered important. The function should not consider 0 in the summands and the maximum size of the summands is also limited by the given integer. For example, partition(5, 3) should return the number of ways to write 5 as a sum of 1, 2, and 3 (considering order).","solution":"def partition(n, max_summand): Returns the number of ways to partition the integer n into a sum of positive integers, where the order of the summands is considered and the maximum summand is limited by max_summand. # Create a table to store results of subproblems dp = [0] * (n + 1) dp[0] = 1 # Base case: one way to partition 0 # Update the dp table for each summand from 1 to max_summand for summand in range(1, max_summand + 1): for i in range(summand, n + 1): dp[i] += dp[i - summand] return dp[n]"},{"question":"Create a function that returns a list of random numbers and then create another function that rolls a dice (returns 1-6).","solution":"import random def generate_random_numbers(n, start=1, end=100): Returns a list of n random numbers between start and end (inclusive). Parameters: n (int): Number of random numbers to generate. start (int): Lower bound of random numbers (inclusive). Default is 1. end (int): Upper bound of random numbers (inclusive). Default is 100. Returns: list: List of n random numbers between start and end. return [random.randint(start, end) for _ in range(n)] def roll_dice(): Simulates rolling a dice and returns a random integer between 1 and 6. Returns: int: Random integer between 1 and 6. return random.randint(1, 6)"},{"question":"Create a function that reads an integer value representing a month and converts it to a string representation. If the integer is not a valid month (i.e., not in the range 1 to 12), the function should return \\"Invalid month\\".","solution":"def month_to_string(month): Converts an integer representing a month to its string equivalent. Returns 'Invalid month' if the integer is not a valid month. months = [ \\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\" ] if 1 <= month <= 12: return months[month - 1] else: return \\"Invalid month\\""},{"question":"Create a function that calculates the sum of all numbers in a given list using recursion and the lambda function. The function should be able to handle nested lists of integers.","solution":"def recursive_sum(lst): Returns the sum of all numbers in a given list, handling nested lists recursively. # Flattening the list using recursion flat_list = lambda x: sum([flat_list(sublist) if isinstance(sublist, list) else sublist for sublist in x], 0) return flat_list(lst)"},{"question":"Create a function that finds the longest palindromic substring in a given string. A palindromic substring is a sequence of characters that reads the same backward as forward. Your function should return the longest palindromic substring found in the input string. If there are multiple substrings of the same length, you should return the first one encountered. If no palindromic substring is found, your function should return an empty string.","solution":"def longest_palindromic_substring(s): Find the longest palindromic substring in a given string \`s\`. if not s: return \\"\\" start, end = 0, 0 def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(len(s)): l1, r1 = expand_around_center(i, i) l2, r2 = expand_around_center(i, i + 1) if r1 - l1 > end - start: start, end = l1, r1 if r2 - l2 > end - start: start, end = l2, r2 return s[start:end + 1]"},{"question":"Create a function that accepts an integer as an argument and returns whether it is a Happy Number. Here is the definition of a Happy Number: A happy number is a number which eventually reaches 1 when replaced by the sum of the square of each digit, and eventually reaches 2 if it does not. In the implementation, both theReachSlow and reachFast functions","solution":"def reachSlow(n): Returns the sum of squares of the digits of n. return sum(int(digit) ** 2 for digit in str(n)) def reachFast(n): Returns the next number by applying the sum of squares of the digits twice. return reachSlow(reachSlow(n)) def is_happy_number(n): Determines whether the given number n is a Happy Number. slow = n fast = n while True: slow = reachSlow(slow) fast = reachFast(fast) if slow == 1 or fast == 1: return True if slow == fast: return False"},{"question":"Create a function that takes a string as input, and returns the string with the first and last letter swapped.","solution":"def swap_first_last(s): Returns the string s with the first and last letter swapped. If the string has length 1 or 0, it is returned as is. if len(s) <= 1: return s return s[-1] + s[1:-1] + s[0]"},{"question":"Create a function that determines whether a given number is divisible by each of its digits. The function should return a boolean value. If the number is divisible by each of its digits, the function should return True; otherwise, it should return False.","solution":"def is_divisible_by_all_digits(number): Determines whether a given number is divisible by each of its digits. Args: - number (int): The number to check. Returns: - bool: True if the number is divisible by each of its digits, False otherwise. str_number = str(number) for digit in str_number: if digit == '0' or number % int(digit) != 0: return False return True"},{"question":"Create a function that takes a string \`s\` as a parameter and returns the longest substring without repeating characters. For example, if the input is \\"abcabcbb\\", the function should return \\"abc\\", as \\"abc\\" is the longest substring with all unique characters.","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. n = len(s) if n == 0: return \\"\\" longest_substr = \\"\\" start_idx = 0 char_index_map = {} for end_idx, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start_idx: start_idx = char_index_map[char] + 1 char_index_map[char] = end_idx if len(longest_substr) < end_idx - start_idx + 1: longest_substr = s[start_idx:end_idx + 1] return longest_substr"},{"question":"Create a function that takes two numbers as input and returns the largest of them. You should avoid using any built-in max() function. How can I achieve this?","solution":"def largest_of_two(a, b): Returns the largest of the two input numbers, a and b, without using the built-in max() function. if a > b: return a else: return b"},{"question":"Create a function that can convert an integer to a string, ensuring the returned string is in reverse order compared to the original integer's digit sequence.","solution":"def reverse_integer_to_string(n): Converts an integer to a string with its digits in reverse order. Parameters: n (int): The integer to convert and reverse. Returns: str: The reversed string of digits. return str(n)[::-1]"},{"question":"Create a function that takes in an array of numbers and returns the smallest number in the array. If the array is empty, return \`None\`.","solution":"def find_smallest_number(arr): Returns the smallest number in the array. If the array is empty, returns None. if not arr: return None return min(arr)"},{"question":"Create a function that takes in three parameters: a list of integers \`nums\`, a target integer \`target\`, and an Interger \`k\`. Your function should return a list of the \`k\` closest numbers to the \`target\` in the list \`nums\`. The numbers in the returned list should be sorted in ascending order.","solution":"def k_closest_numbers(nums, target, k): Returns a list of the k closest numbers to the target in the list nums. The numbers in the returned list are sorted in ascending order. :param nums: List of integers :param target: Target integer :param k: Number of closest integers to find :returns: List of k closest integers sorted in ascending order closest_nums = sorted(nums, key=lambda x: abs(x - target)) return sorted(closest_nums[:k])"},{"question":"Create a function that takes two integers as parameters and prints the larger of the two using the ternary operator in Python.","solution":"def print_larger(a, b): Prints the larger of two integers a and b using the ternary operator. print(a if a > b else b)"},{"question":"Create a function that takes a single positive integer as input and returns the sum of its digits. For example, if the input is 123, the function should return 6 (since 1 + 2 + 3 = 6). If the input is 456, the function should return 15 (since 4 + 5 + 6 = 15). If the input number is greater than 2*10^9, it should return \\"Input number is too large!\\".","solution":"def sum_of_digits(n): Returns the sum of the digits of a positive integer n. If the input number is greater than 2*10^9, it returns \\"Input number is too large!\\". if n > 2 * 10**9: return \\"Input number is too large!\\" return sum(int(digit) for digit in str(n))"},{"question":"Create a function that takes in a string and returns the string with each space replaced with a comma.","solution":"def replace_spaces_with_commas(s): Takes a string and returns the string with each space replaced with a comma. return s.replace(' ', ',')"},{"question":"Create a function that calculates the sum of an array of integers. Provide a Python solution.","solution":"def sum_of_array(arr): Returns the sum of an array of integers. return sum(arr)"},{"question":"Create a function that swaps the values of two numbers. The function should return the swapped values without using a temporary variable.","solution":"def swap_numbers(a, b): Swaps the values of a and b without using a temporary variable. a, b = b, a return a, b"},{"question":"Create a function that generates Fibonacci sequence up to the nth number where n is a parameter of the function. Then, write a main function that calls the Fibonacci function and prints the sequence.","solution":"def fibonacci(n): Generates Fibonacci sequence up to the nth number (inclusive). if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence def main(n): sequence = fibonacci(n) print(sequence)"},{"question":"Create a function that instead of searching from the beginning, starts from the end of a given string. The function should take two parameters: the string and the character to search for. It should return the index of the first occurrence of the character from the end of the string. If the character is not found, then return -1.","solution":"def reverse_find(s, char): Returns the index of the first occurrence of the character from the end of the string. If the character is not found, returns -1. index = s.rfind(char) return index"},{"question":"Create a function that takes two lists of integers, \`list1\` and \`list2\`, and returns a new list containing the elements that are common to both lists but are in a different order. The order of the elements in the result should be such that elements that are present in the same position in both lists are placed at the beginning of the result list. If there are elements present at the same position but have different values, they are not considered as a match. Only the position matters.","solution":"def common_elements_diff_order(list1, list2): Returns a new list containing the elements that are common to both list2 but are in a different order. The order of the elements in the result should be such that elements that are present in the same position in both lists are placed at the beginning of the result list. # Find the elements that are the same in both lists and in the same position same_position_elements = [list1[i] for i in range(min(len(list1), len(list2))) if list1[i] == list2[i]] # Find the remaining elements that are common in both lists common_elements = set(list1) & set(list2) result = same_position_elements + list(common_elements - set(same_position_elements)) return result"},{"question":"Create a function that takes a list of integers and returns a new list of integers where each element is the product of all the integers in the original list except for the element at that position. For example, if the input list is [1, 2, 3, 4], the output list should be [24, 12, 8, 6] because 2*3*4=24, 1*3*4=12, 1*2*4=8, and 1*2*3=6.","solution":"def product_except_self(nums): Returns a list of products of all integers in the input list except for the element at that position. length = len(nums) result = [1] * length left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Create a function that constructs the needed path if it does not exist. The function can take in a path such as \\"/folder/subfolder/file\\". The function should create all intermediate subfolders if they don't exist. If a subfolder exists, the function should not show an error.","solution":"import os def ensure_path_exists(path): Ensures that the entire directory path exists. If some subdirectories do not exist, they will be created. os.makedirs(path, exist_ok=True)"},{"question":"Create a function that takes a list of integers and returns the sum of the squares of each item in the list. You should apply this function to a list of random integers generated between 0 and 10.","solution":"import random def sum_of_squares(numbers): Returns the sum of the squares of each item in the list. return sum(x ** 2 for x in numbers) def generate_random_list(length, lower_bound, upper_bound): Generates a list of random integers between the lower_bound and upper_bound. return [random.randint(lower_bound, upper_bound) for _ in range(length)] # Example usage: random_list = generate_random_list(10, 0, 10) result = sum_of_squares(random_list)"},{"question":"Create a function that receives a word and returns its length. If the word is empty, return 0. If the word is a palindrome, also return the string in reverse order.","solution":"def word_length(word): Returns the length of the word. If the word is empty, return 0. If the word is a palindrome, return the string in reverse order. if not word: return 0 if word == word[::-1]: return word[::-1] return len(word)"},{"question":"Create a function that takes a positive integer \`n\` as an argument and returns the sum of the squares of all numbers from 1 to \`n\`. The function should use recursion to calculate the sum.","solution":"def sum_of_squares_recursive(n): Returns the sum of the squares of all numbers from 1 to n using recursion. Args: n (int): A positive integer Returns: int: The sum of the squares of all numbers from 1 to n if n <= 0: return 0 else: return n * n + sum_of_squares_recursive(n - 1)"},{"question":"Create a function that takes a list of URLs and a directory path, and then downloads all the URLs to the specified directory. The function should handle exceptions and errors such as missing URLs, invalid URLs, or network issues. Additionally, the function should log any errors encountered during the download process and continue with the remaining URLs.","solution":"import os import requests from urllib.parse import urlparse def download_urls(urls, directory): Downloads the contents of the URLs to the specified directory. Parameters: urls (list): A list of URLs to download. directory (str): The directory path where files will be saved. if not os.path.exists(directory): os.makedirs(directory) for url in urls: try: response = requests.get(url) response.raise_for_status() parsed_url = urlparse(url) file_name = os.path.join(directory, os.path.basename(parsed_url.path)) with open(file_name, 'wb') as file: file.write(response.content) except requests.RequestException as e: # Log the error print(f\\"Failed to download {url}: {e}\\")"},{"question":"Create a function that takes a variable number of arguments and returns the sum of those arguments. The function should support both positional and keyword arguments.","solution":"def sum_arguments(*args, **kwargs): Returns the sum of all positional and keyword arguments. return sum(args) + sum(kwargs.values())"},{"question":"Create a function that identifies the third smallest unique element in an array. If the array does not have a third unique element, the function should return -1.","solution":"def third_smallest_unique(arr): Returns the third smallest unique element in arr. If it does not exist, returns -1. # Remove duplicates by converting to a set, then sort the set unique_elements = sorted(set(arr)) # Check if there are at least three unique elements if len(unique_elements) < 3: return -1 else: return unique_elements[2]"},{"question":"Create a function that multiplies all elements in an array of integers by a given number. The function should return a new array containing the results.","solution":"def multiply_elements(arr, multiplier): Multiplies all elements in an array of integers by a given number. Parameters: arr (list of int): The array of integers. multiplier (int): The number to multiply each element by. Returns: list of int: A new array containing the results. return [x * multiplier for x in arr]"},{"question":"Create a function that takes an integer as its input and returns the factorial of that number. The function should be able to handle inputs in the range 0 to 10. Additionally, implement error handling to manage inputs outside of this range.","solution":"def factorial(n): Returns the factorial of a given number n. The function handles inputs in the range 0 to 10. It raises a ValueError if the input is outside this range. if not (0 <= n <= 10): raise ValueError(\\"Input must be between 0 and 10 inclusive.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n+1): result *= i return result"},{"question":"Create a function that takes a dictionary with movie titles as keys and ratings as values, and returns the movie with the highest rating from the dictionary.","solution":"def highest_rated_movie(movies): Returns the movie title with the highest rating. :param movies: Dictionary with movie titles as keys and ratings as values. :return: Movie title with the highest rating. if not movies: return None # Handle the case when the dictionary is empty or None highest_rated = max(movies, key=movies.get) return highest_rated"},{"question":"Create a function that accepts a two-dimensional array of integers and returns the maximum and minimum elements found in that two-dimensional array. The function should ensure to handle both positive and negative numbers.","solution":"def find_max_min(matrix): Finds the maximum and minimum elements in a two-dimensional array of integers. :param matrix: List[List[int]], the two-dimensional array of integers. :return: Tuple[int, int], the maximum and minimum elements found in the array. if not matrix or not any(matrix): raise ValueError(\\"Matrix must not be empty\\") max_value = float('-inf') min_value = float('inf') for row in matrix: for elem in row: if elem > max_value: max_value = elem if elem < min_value: min_value = elem return max_value, min_value"},{"question":"Create a function that takes two lists of integers and returns the median value of the combined list of integers.","solution":"def find_median_combined_lists(list1, list2): Returns the median value of the combined list formed by merging list1 and list2. Parameters: list1 (list): First list of integers. list2 (list): Second list of integers. Returns: float: The median value. combined_list = sorted(list1 + list2) n = len(combined_list) if n % 2 == 1: return combined_list[n // 2] else: return (combined_list[n // 2 - 1] + combined_list[n // 2]) / 2"},{"question":"Create a function that will take an integer array of any length and return the maximum subarray sum of that array using Kadane's Algorithm.","solution":"def max_subarray_sum(nums): Returns the maximum subarray sum for the given integer array using Kadane's Algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes an integer as an input and returns a string that represents the integer in binary. The binary string should include the prefix '0b' to indicate a binary number.","solution":"def int_to_binary_string(n): Converts an integer to its binary representation as a string with '0b' prefix. Args: n (int): The integer to convert. Returns: str: The binary representation of the integer with '0b' prefix. return bin(n)"},{"question":"Create a function that takes an integer as input and returns the count of bits that are set to 1 in its binary representation. The function should efficiently handle large numbers and return this count as an integer. Additionally, provide an explanation of your approach and any potential pitfalls to consider when dealing with large numbers.","solution":"def count_bits_set_to_one(n): Returns the count of bits that are set to 1 in the binary representation of integer n. Args: n (int): The input integer. Returns: int: The count of bits set to 1 in the binary representation of n. # Use the built-in bin function to convert the integer to its binary representation # bin(n) returns a string in the format '0b...' # count the number of '1's in the binary string representation of n return bin(n).count('1')"},{"question":"Create a function that generates a random number in a given range using Python's random module. The function should take two parameters: \`start\` and \`end\`, inclusive. The function should return a random integer in the range [start, end].","solution":"import random def generate_random_number(start, end): Generates a random integer between start and end, inclusive. :param start: The lower bound of the range. :param end: The upper bound of the range. :return: A random integer within the specified range. return random.randint(start, end)"},{"question":"Create a function that takes two arguments - a list and a number. The function should return a new list with the number inserted at the beginning of the list.","solution":"def insert_at_beginning(lst, number): Inserts the given number at the beginning of the list and returns the new list. return [number] + lst"},{"question":"Create a function that generates and returns a list of all prime numbers within a given range, inclusive of the start and end of the range. The prime numbers should be in ascending order.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_primes_in_range(start, end): Generate a list of all prime numbers within a given range, inclusive. primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Create a function that takes in two numbers and returns the product of their sum and difference.","solution":"def product_of_sum_and_difference(a, b): Returns the product of the sum and the difference of two numbers a and b. sum_ab = a + b difference_ab = a - b return sum_ab * difference_ab"},{"question":"Create a function that takes two arguments and prints the maximum of the two.","solution":"def print_max(a, b): Prints the maximum of a and b. max_val = max(a, b) print(max_val)"},{"question":"Create a function that determines if two matrices are equal. Two matrices are equal if they have the same number of rows and columns and all corresponding elements are equal. The function should take two 2D lists (matrices) as input parameters and return a boolean value indicating whether they are equal or not. If their dimensions or any corresponding elements differ, the function should return false.","solution":"def are_matrices_equal(matrix1, matrix2): Determine if two matrices are equal. Two matrices are equal if they have the same dimensions and all corresponding elements are equal. Parameters: matrix1 (list of list of int): First matrix matrix2 (list of list of int): Second matrix Returns: bool: True if matrices are equal, False otherwise # Check if both matrices have the same number of rows if len(matrix1) != len(matrix2): return False # Check if each row in both matrices has the same number of columns for row1, row2 in zip(matrix1, matrix2): if len(row1) != len(row2): return False # Check if each element in corresponding rows is the same for elem1, elem2 in zip(row1, row2): if elem1 != elem2: return False # If all checks pass, the matrices are equal return True"},{"question":"Create a function that accepts a variable number of arguments. The function should return their sum.","solution":"def sum_of_args(*args): Returns the sum of all the arguments passed to the function. Parameters: *args (int, float): A variable number of numeric arguments. Returns: int, float: The sum of all given arguments. return sum(args)"},{"question":"Create a function that calculates the sum of the squares of the first n natural numbers. Implement this function in Python and ensure it is efficient.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. if n <= 0: return 0 return n * (n + 1) * (2 * n + 1) // 6"},{"question":"Create a function that takes a string and calculates its SHA-256 hash. The function should return the hash as a hexadecimal string. You need to ensure that if the input string is empty, the function returns \`None\`.","solution":"import hashlib def calculate_sha256(s): Returns the SHA-256 hash of the input string \`s\` as a hexadecimal string. If the input string is empty, the function returns None. if not s: return None return hashlib.sha256(s.encode('utf-8')).hexdigest()"},{"question":"Create a function that generates the given Fibonacci sequence of length n using Python. The sequence should start with 1 and 2. The function should return the sequence as a list.","solution":"def fibonacci_sequence(n): Generates the Fibonacci sequence of length n starting with 1 and 2. if n <= 0: return [] elif n == 1: return [1] sequence = [1, 2] while len(sequence) < n: next_value = sequence[-1] + sequence[-2] sequence.append(next_value) return sequence"},{"question":"Create a function that takes in a list of integers and returns a new list with all the even numbers doubled. For example, if the input list is [1, 2, 3, 4], the function should return [2, 4, 3, 8].","solution":"def double_even_numbers(numbers): Takes a list of integers and returns a new list with all the even numbers doubled. return [n * 2 if n % 2 == 0 else n for n in numbers]"},{"question":"Create a function that takes two arguments, a number n and a list. Then check if n is present in the list. If it is, return a small smiley face. If it's not, return a frowny face. The function should also handle empty lists and lists with no matching numbers.","solution":"def check_number_in_list(n, lst): Checks if the number n is present in the list lst. Returns ':)' if n is found, otherwise returns ':('. if n in lst: return ':)' else: return ':('"},{"question":"Create a function that calculates the area of a triangle when given its height and base. Additionally, make the function output whether the calculated area is even or odd. The function should print the area and its parity (even or odd) in a readable format.","solution":"def triangle_area_and_parity(base, height): Calculates the area of a triangle given its base and height, and outputs whether the area is even or odd. Arguments: base -- the base of the triangle height -- the height of the triangle Returns: A tuple (area, parity) area = (base * height) / 2 parity = 'even' if area % 2 == 0 else 'odd' return area, parity"},{"question":"Create a function that takes a list of integers and returns a new list where each element is the product of the corresponding elements in the input list, but only if they are multiples of 3. If an element is not a multiple of 3, it should not be included in the output list.","solution":"def multiples_of_three_product(lst): Takes a list of integers and returns a new list with elements that are products of integers which are multiples of 3. return [x * x for x in lst if x % 3 == 0]"},{"question":"Create a function that calculates the perimeter of a rectangle given its length and width. The feet value for the rectangle should be calculated using the formula: \`feet = length / 0.3048 + width / 0.3048\`.","solution":"def rectangle_perimeter(length, width): Calculates the perimeter of a rectangle given its length and width in meters. The perimeter is returned in feet, using the conversion factor 1 meter = 3.28084 feet. feet_per_meter = 3.28084 perimeter_meters = 2 * (length + width) perimeter_feet = perimeter_meters * feet_per_meter return perimeter_feet"},{"question":"Create a function that takes a list of numbers as input and returns a new list with each element multiplied by two. Use **list comprehension** to achieve this.","solution":"def multiply_by_two(numbers): Returns a new list with each element of the input list multiplied by two. return [number * 2 for number in numbers]"},{"question":"Create a function that escapes HTML special characters in a given string and returns the escaped string. The function should handle strings with various combinations of special characters including less than (<), greater than (>), ampersand (&), single quote ('), and double quote (\\"). The function should also handle cases where these characters are part of HTML comments or attributes, where they are not considered special.","solution":"def escape_html(s): Escapes HTML special characters in a given string. html_escape_table = { \\"&\\": \\"&amp;\\", \\"<\\": \\"&lt;\\", \\">\\": \\"&gt;\\", '\\"': \\"&quot;\\", \\"'\\": \\"&#39;\\" } return \\"\\".join(html_escape_table.get(c, c) for c in s)"},{"question":"Create a function that finds the maximum sum of non-adjacent numbers in a given list of integers.","solution":"def max_sum_non_adjacent(nums): Finds the maximum sum of non-adjacent numbers in the given list. if not nums: return 0 incl = 0 excl = 0 for num in nums: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"Create a function that returns a list of integers from 1 to n, replacing all even numbers with 0.","solution":"def replace_evens_with_zero(n): Returns a list of integers from 1 to n, replacing all even numbers with 0. return [0 if i % 2 == 0 else i for i in range(1, n + 1)]"},{"question":"Create a function that takes an integer as input and calculates the factorial of that number. The function should handle both negative and non-negative integers. For negative integers, it should return -1 as an error indicator. For non-negative integers, it should return the factorial of the number.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. For negative integers, returns -1 as an error indicator. if n < 0: return -1 elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that will return the highest number in an array.","solution":"def highest_number(array): Returns the highest number in the given array. If the array is empty, returns None. if not array: return None return max(array)"},{"question":"Create a function that takes two lists, \`list1\` and \`list2\`, and returns a new list that is the concatenation of the two lists. If the lists are empty, it should return an empty list. Ensure that the function works efficiently even with large lists.","solution":"def concatenate_lists(list1, list2): Concatenates two lists and returns the result. Parameters: list1 (list): The first list. list2 (list): The second list. Returns: list: The concatenated list. return list1 + list2"},{"question":"Create a function that takes in a list of numbers and returns the product of all the even numbers in the list. If there are no even numbers, the function should return 1 as the neutral element of multiplication.","solution":"def product_of_evens(lst): Returns the product of all even numbers in the list. If there are no even numbers, returns 1. product = 1 has_even = False for num in lst: if num % 2 == 0: product *= num has_even = True return product if has_even else 1"},{"question":"Create a function that takes a string as input and returns a dictionary where the keys are the characters in the string and the values are their respective frequency counts. For example, if the input string is 'hello', the output should be {'h': 1, 'e': 1, 'l': 2, 'o': 1}.","solution":"def char_frequency(s): Returns a dictionary with character frequency counts. :param s: Input string :type s: str :return: Dictionary with character frequency counts :rtype: dict frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function that takes a list of integers and returns the count of unique elements in the list. The list input is not guaranteed to be sorted or to contain only non-negative integers.","solution":"def count_unique_elements(lst): Returns the count of unique elements in the list. return len(set(lst))"},{"question":"Create a function that can format and print a list of phone numbers. The function should accept a list of strings, where each string is a phone number in the format of 'start-digit end-digit'. The function should print each phone number in a neatly formatted way.","solution":"def format_and_print_phone_numbers(phone_numbers): Prints each phone number from the input list in neatly formatted way. Args: phone_numbers (list of str): List of phone numbers in 'start-digit end-digit' format. for phone in phone_numbers: formatted_phone = phone.replace(\\" \\", \\"-\\") print(formatted_phone)"},{"question":"Create a function that returns the maximum number in a list using Python. If the list is empty, return None.","solution":"def find_maximum(lst): Returns the maximum number in a list. If the list is empty, returns None. if not lst: # Check if the list is empty return None return max(lst)"},{"question":"Create a function that generates all unique permutations of a list of numbers. Each permutation should be a list. You need to consider two numbers as 'different' if they appear in different orders in the list.","solution":"import itertools def unique_permutations(numbers): Generate all unique permutations of a list of numbers. Args: numbers (list): List of numbers for which permutations are to be generated. Returns: list: A list of lists, each containing a unique permutation of the input list. return list(set(itertools.permutations(numbers)))"},{"question":"Create a function that takes a string as input and returns the first word in the string. If the string is empty or not a valid sentence, the function should return an empty string.","solution":"def first_word(sentence): Returns the first word in the sentence. If the sentence is empty or not valid, returns an empty string. if not isinstance(sentence, str) or not sentence.strip(): return \\"\\" words = sentence.strip().split() return words[0] if words else \\"\\""},{"question":"Create a function that takes any string as input and returns the string with the first and last characters swapped. If the input string is less than or equal to one character, return the string as is.","solution":"def swap_first_last_characters(s): Returns the string s with its first and last characters swapped. If the string has length 0 or 1, return the string as is. if len(s) <= 1: return s return s[-1] + s[1:-1] + s[0]"},{"question":"Create a function that takes a list of integers as an input and returns a list of lists, where each sublist contains only the even numbers for each original list. How can you achieve this in Python?","solution":"def filter_even_numbers(lst): Returns a list of lists, where each sublist contains only the even numbers from the original list. Args: lst (list): A list of integers. Returns: list: A list of sublists with even numbers. return [num for num in lst if num % 2 == 0]"},{"question":"Create a function that checks if a given array contains only even numbers or only odd numbers. The function should return \`True\` if all numbers in the array are either even or odd, and \`False\` otherwise. The function should handle arrays of integers.","solution":"def all_even_or_all_odd(arr): Checks if all integers in the array are either even or odd. Parameters: arr (list): List of integers. Returns: bool: True if all integers are even or all are odd, False otherwise. if not arr: # If the array is empty, we consider the condition to be True. return True all_even = all(x % 2 == 0 for x in arr) all_odd = all(x % 2 != 0 for x in arr) return all_even or all_odd"},{"question":"Create a function that takes a string as input and returns a new string with all the vowels replaced by asterisks (*). Given a string \\"Hello World\\", the function should return \\"H*ll* W*rld\\".","solution":"def replace_vowels(input_string): Replaces all vowels in the input string with asterisks (*). Args: input_string (str): The string to process. Returns: str: The processed string with vowels replaced by asterisks. vowels = \\"aeiouAEIOU\\" result = ''.join(['*' if char in vowels else char for char in input_string]) return result"},{"question":"Create a function that takes a pathname and returns the hostname of the server specified in the pathname. The pathname will be in the format \\"http://hostname/path\\". The function should return only the hostname part of the path.","solution":"def get_hostname(pathname): Extracts and returns the hostname from a given pathname. Parameter: pathname (str): The pathname in the format \\"http://hostname/path\\". Returns: str: The hostname part of the given pathname. start = pathname.find(\\"//\\") + 2 end = pathname.find(\\"/\\", start) if end == -1: return pathname[start:] return pathname[start:end]"},{"question":"Create a function that receives a list of words as its parameter and returns a dictionary where the keys are the words from the list and the values are the counts of how many times each word appears in the list. You can assume that the input list will contain at least one word.","solution":"def count_words(words): Takes a list of words and returns a dictionary with the count of each word. word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"Create a function that converts a string into a list of integers. Handle any exceptions if the string contains non-integer characters or is empty.","solution":"def string_to_int_list(s): Converts a string into a list of integers. If the string contains non-integer characters or is empty, it handles the exception and returns an empty list. try: return list(map(int, s.split())) except ValueError: return []"},{"question":"Create a function that takes a dictionary of student grades and returns a sorted list of students and their grades. The dictionary keys are student names and the values are their grades. The list should be sorted by grades in descending order.","solution":"def sort_students_by_grades(grades_dict): Takes a dictionary of student grades and returns a sorted list of tuples. Each tuple contains a student's name and their grade. The list is sorted by grades in descending order. :param grades_dict: Dictionary with student names as keys and grades as values. :return: List of tuples (student, grade), sorted by grades in descending order. return sorted(grades_dict.items(), key=lambda item: item[1], reverse=True)"},{"question":"Create a function that takes two strings as input and returns a list of their unique characters. The order of the characters in the resulting list should be determined by their first appearance in the first string, followed by their first appearance in the second string, without any duplicates.","solution":"def unique_characters(str1, str2): Returns a list of unique characters from two strings. The order is determined by their first appearance in str1 followed by their first appearance in str2, without duplicates. unique_chars = [] seen_chars = set() combined = str1 + str2 # concatenate both strings for char in combined: if char not in seen_chars: unique_chars.append(char) seen_chars.add(char) return unique_chars"},{"question":"Create a function that takes an integer n, where n is greater than 0 and less than 100. The function should return the largest integer that is less than n.","solution":"def largest_integer_less_than(n): Returns the largest integer less than n. Parameters: n (int): A positive integer greater than 0 and less than 100. Returns: int: The largest integer less than n. if n <= 1 or n >= 100: raise ValueError(\\"n must be greater than 0 and less than 100\\") return n - 1"},{"question":"Create a function that takes an integer value as a parameter and uses a for loop to find and print the first 10 positive multiples of that integer. If the input number is negative, return an error message \\"Invalid input: Number must be positive.\\"","solution":"def first_10_multiples(n): Prints the first 10 positive multiples of the given integer n. If n is negative, returns an error message. if n <= 0: return \\"Invalid input: Number must be positive.\\" multiples = [] for i in range(1, 11): multiples.append(n * i) return multiples"},{"question":"Create a function that calculates the factorial of a given number in Python. The function should be named \`calculate_factorial\` and take one parameter \`n\`, which is the number to calculate the factorial for. The factorial of a non-negative integer \`n\` is the product of all positive integers less than or equal to \`n\`. The factorial of 0 is defined to be 1.","solution":"def calculate_factorial(n): Returns the factorial of the given non-negative integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0 or n == 1: return 1 factorial = 1 for i in range(2, n + 1): factorial *= i return factorial"},{"question":"Create a function that validates if all elements in a list are integers. If not, the function should return False. If all elements are integers, it should return True.","solution":"def all_integers(lst): Returns True if all elements in the list are integers, otherwise returns False. for item in lst: if not isinstance(item, int): return False return True"},{"question":"Create a function that takes a list of integers and returns a new list containing only the unique elements from the input list. The order of the elements in the output list should be the same as their first occurrence in the input list.","solution":"def unique_elements(input_list): Returns a list containing only the unique elements from the input list, preserving the order of their first occurrence. unique_list = [] seen = set() for element in input_list: if element not in seen: unique_list.append(element) seen.add(element) return unique_list"},{"question":"Create a function that takes two binary strings as input and checks if they are rotations of each other. If they are, return true; otherwise, return false.","solution":"def are_rotations(bin_str1, bin_str2): Returns True if bin_str1 and bin_str2 are rotations of each other, False otherwise. if len(bin_str1) != len(bin_str2): return False return bin_str2 in (bin_str1 + bin_str1)"},{"question":"Create a function that calculates the Nth Fibonacci number in Python. This function should take an integer N as its input and return the Nth Fibonacci number. For example, if N is 5, the function should return 5 because the Fibonacci sequence up to the 5th number is 0, 1, 1, 2, 3, 5.","solution":"def fibonacci(n): Returns the Nth Fibonacci number. :param n: The position in the Fibonacci sequence to retrieve :type n: int :return: The Nth Fibonacci number :rtype: int if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Create a function that generates and returns a list of the first \`n\` even numbers. For example, if \`n\` is 5, the function should return \`[2, 4, 6, 8, 10]\`.","solution":"def generate_even_numbers(n): Returns a list of the first n even numbers. return [2 * i for i in range(1, n + 1)]"},{"question":"Create a function that takes a list of integers as an input and returns the sum of all positive integers in the list. Make sure to handle cases where the list may contain non-integer values or negative integers.","solution":"def sum_of_positives(int_list): Returns the sum of all positive integers in the given list. Non-integer values or negative integers are ignored. return sum(x for x in int_list if isinstance(x, int) and x > 0)"},{"question":"Create a function that takes three integers as input and prints the contents of each integer in each of the three memory locations in hexadecimal, binary, and decimal.","solution":"def print_memory_contents(a, b, c): Prints the contents of three integers in hexadecimal, binary, and decimal. contents = { 'a': {\\"decimal\\": a, \\"hexadecimal\\": hex(a), \\"binary\\": bin(a)}, 'b': {\\"decimal\\": b, \\"hexadecimal\\": hex(b), \\"binary\\": bin(b)}, 'c': {\\"decimal\\": c, \\"hexadecimal\\": hex(c), \\"binary\\": bin(c)} } for var, reps in contents.items(): print(f\\"{var} (decimal): {reps['decimal']}\\") print(f\\"{var} (hexadecimal): {reps['hexadecimal']}\\") print(f\\"{var} (binary): {reps['binary']}\\")"},{"question":"Create a function that takes in two lists of integers and modifies the first list in place by replacing all negative numbers with 0.","solution":"def replace_negatives(lst1, lst2): Modifies lst1 in place by replacing all negative numbers with 0. Args: lst1 : list of int : The list to be modified lst2 : list of int : A list which is not used in this function for i in range(len(lst1)): if lst1[i] < 0: lst1[i] = 0"},{"question":"Create a function that processes a string array, removing duplicates, and return the sorted array of unique elements. Here is an example input: \`arr = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"grape\\"]\`.","solution":"def process_string_array(arr): Processes a string array, removes duplicates, and returns a sorted array of unique elements. unique_elements = list(set(arr)) # Remove duplicates by converting to set and back to list unique_elements.sort() # Sort the list return unique_elements"},{"question":"Create a function that takes two arrays as an argument and compares both to see if they are equal. However, not only compare but also give the positions at which they do not match. If the arrays are not of the same length, return an error message.","solution":"def compare_arrays(arr1, arr2): Compares two arrays and returns the positions where they do not match. If the arrays are not of the same length, returns an error message. if len(arr1) != len(arr2): return \\"Error: Arrays are of different lengths.\\" mismatches = [] for i in range(len(arr1)): if arr1[i] != arr2[i]: mismatches.append(i) return mismatches"},{"question":"Create a function that generates a new string that is the reverse of a given string.","solution":"def reverse_string(s): Returns the reverse of the given string s. return s[::-1]"},{"question":"Create a function that determines if an integer is even or odd. If the number is even, the function should return \`True\`; otherwise, it should return \`False\`. Ensure the function handles both positive and negative integers.","solution":"def is_even(number): Determines if a number is even or odd. Returns True if the number is even, False otherwise. return number % 2 == 0"},{"question":"Create a function that takes two integers as input: the count of cats and the count of dogs. The function should return True if the total count of cats and dogs is even, and False otherwise.","solution":"def are_cats_and_dogs_even(cats, dogs): Returns True if the total number of cats and dogs is even, otherwise False. total = cats + dogs return total % 2 == 0"},{"question":"Create a function that takes a list of integers as a parameter, squares each integer in the list, and then returns the sum of these squared integers. In Python, the function should return a list of tuples, where each tuple contains the original integer and its square.","solution":"def sum_of_squares(lst): Takes a list of integers, squares each integer, and returns a list of tuples. Each tuple contains the original integer and its square. result = [] for x in lst: result.append((x, x**2)) return result"},{"question":"Create a function that generates and returns the next even number after a given number.","solution":"def next_even_number(n): Returns the next even number after the given number n. if n % 2 == 0: return n + 2 else: return n + 1"},{"question":"Create a function that takes a string representing a date in \\"YYYY-MM-DD\\" format and returns a tuple containing the day, month, and year of the date. The year should be returned as an integer, and the month and day should be returned as strings.","solution":"def date_to_tuple(date_str): Takes a date string in 'YYYY-MM-DD' format and returns a tuple (day, month, year) where year is an integer, and month and day are strings. year, month, day = date_str.split('-') return (day, month, int(year))"},{"question":"Create a function that takes an array and a rotation amount, then returns the array rotated by that amount to the right.","solution":"def rotate_array(arr, rotation_amount): Rotates the array to the right by the given rotation amount. if not arr: return arr rotation_amount = rotation_amount % len(arr) return arr[-rotation_amount:] + arr[:-rotation_amount]"},{"question":"Create a function that takes two lists of numbers and returns the product of corresponding elements. If the lists are of unequal length, the function should return None.","solution":"def multiply_corresponding_elements(list1, list2): Returns a list containing the product of corresponding elements in list1 and list2. If the lists are of unequal length, returns None. if len(list1) != len(list2): return None return [a * b for a, b in zip(list1, list2)]"},{"question":"Create a function that takes two strings as input and returns whether they are anagrams or not.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, False otherwise. # Clean the strings: remove spaces and convert to lower case clean_str1 = ''.join(str1.split()).lower() clean_str2 = ''.join(str2.split()).lower() # Anagrams must have the same characters with the same frequency return sorted(clean_str1) == sorted(clean_str2)"},{"question":"Create a function that takes a string and a list of characters. The function should return a new string that is a repeat of the input string, but only if the count of the specified characters is greater than the count of the other characters in the string.","solution":"def repeat_string_if_char_count(input_str, char_list): Returns the input string repeated if the count of the specified characters (in char_list) is greater than the count of other characters in the string. Parameters: - input_str (str): The input string. - char_list (list): The list of characters to be considered. Returns: - str: The input string repeated if conditions are met, else an empty string. total_chars = len(input_str) count_specified_chars = sum(input_str.count(char) for char in char_list) if count_specified_chars > total_chars - count_specified_chars: return input_str * 2 else: return \\"\\""},{"question":"Create a function that takes in a string and returns True if it contains only numeric characters and False otherwise.","solution":"def is_numeric(string): Returns True if the string contains only numeric characters, otherwise False. return string.isdigit()"},{"question":"Create a function that takes a vector of integers and returns the distance between the smallest and largest values in the vector. If the vector is empty, the function should return an optional value representing the absence of a valid result.","solution":"from typing import List, Optional def distance_between_min_max(vector: List[int]) -> Optional[int]: Returns the distance between the smallest and largest values in the vector. If the vector is empty, return None. if not vector: return None min_val = min(vector) max_val = max(vector) return max_val - min_val"},{"question":"Create a function that takes in a string representing a Python code snippet and returns the number of indented lines. Consider that lines are indented if they are preceded by at least one space or tab.","solution":"def count_indented_lines(code_snippet): Returns the number of indented lines in the given Python code snippet. Parameters: code_snippet (str): A string representing a Python code snippet. Returns: int: The number of lines that are indented. lines = code_snippet.split(\\"n\\") indented_lines = [line for line in lines if line.startswith((\\" \\", \\"t\\"))] return len(indented_lines)"},{"question":"Create a function that takes an integer \`n\` as input and returns a list of integers from 1 to \`n\` (inclusive), but with all even numbers replaced by their square values. For example, if the input is 5, the function should return \`[1, 4, 3, 16, 5]\`.","solution":"def transform_list(n): Returns a list of integers from 1 to n (inclusive), with all even numbers replaced by their square values. result = [] for i in range(1, n + 1): if i % 2 == 0: result.append(i ** 2) else: result.append(i) return result"},{"question":"Create a function that recursively searches for a string within a nested dictionary structure. The string can appear in either the keys or values. If the string is found, return a list of full paths (as strings) to where the string appears. A path is represented as a sequence of keys leading to the target value. If the string is not found, return an empty list. The function should be case-sensitive.","solution":"def search_string_in_dict(nested_dict, target): results = [] def search(current_dict, current_path): for key, value in current_dict.items(): new_path = current_path + [key] if target in str(key): results.append(\\".\\".join(map(str, new_path))) if isinstance(value, dict): search(value, new_path) elif target in str(value): results.append(\\".\\".join(map(str, new_path))) search(nested_dict, []) return results"},{"question":"Create a function that takes an integer as an input and returns a list of unique elements from the input list that have a frequency greater than 3.","solution":"def elements_with_frequency_greater_than_three(lst): Returns a list of unique elements from the input list that have a frequency greater than 3. from collections import Counter frequency = Counter(lst) result = [element for element, count in frequency.items() if count > 3] return result"},{"question":"Create a function that determines the count of unique characters in a string, ignoring case sensitivity and spaces. For instance, the string \\"Hello World\\" should return 7 since 'H' and 'h' are considered the same.","solution":"def count_unique_characters(s): Returns the count of unique characters in the string s, ignoring case sensitivity and spaces. s = s.replace(\\" \\", \\"\\").lower() return len(set(s))"},{"question":"Create a function that returns the two smallest numbers from a given list.","solution":"def two_smallest_numbers(lst): Returns a list containing the two smallest numbers from the given list in ascending order. # Guard against invalid input if len(lst) < 2: raise ValueError(\\"List must contain at least two elements\\") # Find two smallest numbers first, second = float('inf'), float('inf') for number in lst: if number < first: first, second = number, first elif number < second: second = number return [first, second]"},{"question":"Create a function that generates the first \`n\` Fibonacci numbers using a generator function in Python. Then, write a loop to sum these numbers.","solution":"def fibonacci_generator(n): A generator function that yields the first n Fibonacci numbers. a, b = 0, 1 count = 0 while count < n: yield a a, b = b, a + b count += 1 def sum_fibonacci(n): Sums the first n Fibonacci numbers. return sum(fibonacci_generator(n)) # Example usage: # sum_fibonacci(10) would return 88 i.e., sum of first 10 Fibonacci numbers."},{"question":"Create a function that takes a list of integers and returns the second smallest number in the list. If the list contains duplicates or a single element, the function should return \`None\`.","solution":"def second_smallest(numbers): Returns the second smallest number in the given list of integers. If the list contains duplicates or a single element, returns None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1] if len(unique_numbers) >= 2 else None"},{"question":"Create a function that accepts two arrays and merges them into a single array, while ensuring no duplicates are present in the final array. The function should be designed to handle arrays of any data type. Additionally, the function should not use any built-in methods for merging arrays or removing duplicates, such as \`concat()\` or \`Set\` directly.","solution":"def merge_arrays(arr1, arr2): Merges two arrays into a single array without duplicates. merged_array = [] unique_elements = {} for item in arr1: if item not in unique_elements: unique_elements[item] = True merged_array.append(item) for item in arr2: if item not in unique_elements: unique_elements[item] = True merged_array.append(item) return merged_array"},{"question":"Create a function that uses the break statement to exit a loop based on a specific condition.","solution":"def find_first_even(numbers): Returns the first even number from the list. If there are no even numbers, it returns None. for number in numbers: if number % 2 == 0: return number # If we find an even number, break out of the loop return None"},{"question":"Create a function that takes an integer as input and returns the count of the number of 1-bits in its binary representation. This function should be able to handle both positive and negative integers, considering their binary representation.","solution":"def count_ones_in_binary(n): Returns the count of the number of 1-bits in the binary representation of the integer n. This function works for both positive and negative integers. # Use bin() to get the binary representation and count('1') to count the number of 1-bits return bin(n & 0xffffffff).count('1')"},{"question":"Create a function that takes a string as an argument and returns the string reversed. If the string length is even, return the string with the first half reversed while the second half remains unchanged. If the string length is odd, return the string with the second half reversed while the first half remains unchanged.","solution":"def reverse_string(s): Reverses the string based on its length. If length is even, reverse the first half. If length is odd, reverse the second half. length = len(s) if length % 2 == 0: # even length midpoint = length // 2 first_half = s[:midpoint][::-1] second_half = s[midpoint:] return first_half + second_half else: # odd length midpoint = length // 2 first_half = s[:midpoint + 1] second_half = s[midpoint + 1:][::-1] return first_half + second_half"},{"question":"Create a function that prints the labels and values of all nodes in a binary tree using breadth-first search (BFS). The binary tree is represented using a nested dictionary structure where each node is a dictionary with a key 'value' representing the node's value and keys 'left' and 'right' representing the node's left and right children.","solution":"from collections import deque def bfs_print(tree): Perform breadth-first search (BFS) on a binary tree and print the value of each node. Args: tree (dict): The binary tree represented as a nested dictionary with 'value', 'left', and 'right' keys. if not tree: return queue = deque([tree]) while queue: node = queue.popleft() print(node['value']) if node.get('left'): queue.append(node['left']) if node.get('right'): queue.append(node['right'])"},{"question":"Create a function that can parse a given string of HTML content and extract all the text within <a> tags. The function should return a list of all the text found within these tags.","solution":"from bs4 import BeautifulSoup def extract_a_tag_texts(html_content): This function parses a given string of HTML content and extracts all the text within <a> tags. Parameters: html_content (str): A string representation of HTML content. Returns: list: A list of text found within <a> tags. soup = BeautifulSoup(html_content, 'html.parser') a_tags = soup.find_all('a') return [tag.get_text() for tag in a_tags]"},{"question":"Create a function that takes two inputs: a list of integers and a boolean. If the boolean is True, return a new list containing only the odd numbers from the original list. If the boolean is False, return a new list containing only the even numbers from the original list.","solution":"def filter_numbers(numbers, filter_odd): Filters the list of numbers based on the boolean flag filter_odd. Args: numbers (list): List of integers. filter_odd (bool): Flag to filter odd numbers if True, even numbers if False. Returns: list: A new list containing only odd or even numbers based on the flag. if filter_odd: return [num for num in numbers if num % 2 != 0] else: return [num for num in numbers if num % 2 == 0]"},{"question":"Create a function that generates a list of all possible permutations of a given string. The function should take a single string as input and return a list of all permutations.","solution":"from itertools import permutations def generate_permutations(s): Returns a list of all possible permutations of a given string s. return [''.join(p) for p in permutations(s)]"},{"question":"Create a function that implements the bubble sort algorithm to sort an integer array in ascending order.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swap if the element found is greater than the next element arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a function that returns true if the input number is a prime number.","solution":"def is_prime(num): Returns True if the input number is a prime number, otherwise False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True"},{"question":"Create a function that takes two strings as parameters and returns the longest common subsequence (LCS) between them. If there are multiple LCSs of the same maximum length, return any one of them. If there is no common subsequence, return an empty string.","solution":"def longest_common_subsequence(str1, str2): Returns the longest common subsequence between two strings. n = len(str1) m = len(str2) # Create a 2D array to store the length of LCS dp = [[0] * (m + 1) for _ in range(n + 1)] # Build the dp array for i in range(n): for j in range(m): if str1[i] == str2[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) # Reconstruct the LCS from the dp array lcs = [] i, j = n, m while i > 0 and j > 0: if dp[i][j] == dp[i - 1][j]: i -= 1 elif dp[i][j] == dp[i][j - 1]: j -= 1 else: lcs.append(str1[i - 1]) i -= 1 j -= 1 return ''.join(reversed(lcs))"},{"question":"Create a function that takes a dictionary as an argument and returns a list of tuples. Each tuple in the list should contain the key and value from the dictionary.","solution":"def dict_to_tuples(d): Converts a dictionary to a list of tuples, where each tuple contains a key-value pair from the dictionary. Parameters: d (dict): The input dictionary. Returns: list: A list of tuples with each tuple containing a key-value pair from the dictionary. return list(d.items())"},{"question":"Create a function that takes a list of integers and returns the sum of all elements in the list, multiplied by the length of the list.","solution":"def sum_and_multiply_length(numbers): Returns the sum of all elements in the list 'numbers', multiplied by the length of the list. total_sum = sum(numbers) length = len(numbers) return total_sum * length"},{"question":"Create a function that takes an integer as a parameter and returns the sum of all even numbers from 1 to the given integer. For even numbers from 1 to the integer, write a function that prints each one. Then, write the function that calculates the sum of all these even numbers (sumEven) and call it from your main program. Do not use any loops or recursion in your functions.","solution":"def print_even_numbers(n): Prints all even numbers from 1 to n (inclusive) in ascending order. def even_numbers(k): if k > 0: even_numbers(k-1) if k % 2 == 0: print(k) even_numbers(n) def sum_even(n): Returns the sum of all even numbers from 1 to n (inclusive). return (n // 2) * ((n // 2) + 1)"},{"question":"Create a function that takes three parameters: an array, a value, and a start index. The function should return the index of the last occurrence of the value in the array starting from the given start index.","solution":"def last_index_of(arr, value, start_index): Return the index of the last occurrence of 'value' in 'arr' starting from 'start_index'. :param arr: List of elements :param value: Element to find in the list :param start_index: Index from which to start searching backwards :return: Index of the last occurrence of value or -1 if not found for i in range(start_index, -1, -1): if arr[i] == value: return i return -1"},{"question":"Create a function that checks if a given positive integer is a power of two. In other words, the function should determine if the integer can be represented as 2 raised to the power of some non-negative integer. The function should return \`True\` if the number is a power of two, and \`False\` otherwise.","solution":"def is_power_of_two(n): Returns True if n is a power of two, otherwise returns False. Parameters: n (int): The positive integer to check. Returns: bool: True if n is a power of two, False otherwise. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Create a function that takes two parameters: a string \`s\` and an integer \`n\`. The function should return the string \`s\` repeated \`n\` times, with a space between each repetition. If \`n\` is less than 1, the function should return an empty string.","solution":"def repeat_string(s, n): Returns the string \`s\` repeated \`n\` times, with a space between each repetition. If \`n\` is less than 1, returns an empty string. if n < 1: return \\"\\" return \\" \\".join([s] * n)"},{"question":"Create a function that solves a 2D grid maze represented as a list of lists of integers, where each cell contains either a 0 (indicating a path) or a 1 (indicating a wall). The maze has a unique start cell (0,0) and a unique end cell (n-1, m-1). The function should return the minimum number of steps required to reach the end cell from the start cell, stepping only through path cells (0s). If no path exists from the start to the end cell, the function should return -1.","solution":"from collections import deque def min_steps_maze(maze): Returns the minimum number of steps required to reach the end cell from the start cell in a 2D grid maze. If no path exists, returns -1. Parameters: maze (list of list of int): The 2D grid maze. Returns: int: The minimum number of steps, or -1 if no path exists. if not maze or not maze[0]: return -1 rows, cols = len(maze), len(maze[0]) if maze[0][0] == 1 or maze[rows - 1][cols - 1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, step = queue.popleft() if x == rows - 1 and y == cols - 1: return step for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, step + 1)) return -1"},{"question":"Create a function that takes a universally unique identifier (UUID) as a string and checks if it is valid. A UUID is a 36-character string that looks something like this: \\"550e8400-e29b-41d4-a716-446655440000\\". The function should check that the string contains the correct number of characters (36), includes 5 groups separated by dashes, and each group contains the correct number of hexadecimal characters (8, 4, 4, 4, and 12 respectively).","solution":"import re def is_valid_uuid(uuid: str) -> bool: Checks if the given string is a valid UUID. A valid UUID is 36 characters long and contains 5 groups separated by dashes. The groups contain 8, 4, 4, 4, and 12 hexadecimal characters respectively. Args: uuid (str): The UUID to check. Returns: bool: True if the UUID is valid, False otherwise. # Define the regex pattern for a valid UUID. pattern = re.compile( r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}' ) # Use fullmatch to ensure the entire string matches the pattern return bool(pattern.fullmatch(uuid))"},{"question":"Create a function that generates a random password. The password should be a combination of uppercase letters, lowercase letters, numbers, and special characters. The function should allow the user to specify the length of the password.","solution":"import random import string def generate_password(length): Generates a random password with a combination of uppercase letters, lowercase letters, numbers, and special characters. :param length: Length of the password to be generated. :return: A random password string. if length < 4: raise ValueError(\\"Password length should be at least 4 characters to include a mix of character types.\\") characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation password = [] # Ensuring at least one character of each type is included password.append(random.choice(string.ascii_uppercase)) password.append(random.choice(string.ascii_lowercase)) password.append(random.choice(string.digits)) password.append(random.choice(string.punctuation)) # Filling the rest of the password length with random characters from the allowed set for _ in range(length - 4): password.append(random.choice(characters)) random.shuffle(password) return ''.join(password)"},{"question":"Create a function that will sort the elements in an array in non-decreasing order.","solution":"def sort_array(arr): Returns the array sorted in non-decreasing order. return sorted(arr)"},{"question":"Create a function that accepts an integer value and returns whether it is a perfect square (including zero), and a boolean value indicating whether the integer is prime or not. The function should return these values as a tuple \`(is_perfect_square, is_prime)\`.","solution":"import math def is_perfect_square_and_prime(n): Returns a tuple with two boolean values: - First value indicates whether n is a perfect square (including zero). - Second value indicates whether n is a prime number. # Check if n is a perfect square if n < 0: is_perfect_square = False else: sqrt_n = int(math.isqrt(n)) is_perfect_square = (sqrt_n * sqrt_n == n) # Check if n is a prime number if n < 2: is_prime = False else: is_prime = all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1)) return (is_perfect_square, is_prime)"},{"question":"Create a function that takes a string message as an argument and returns the message repeated three times.","solution":"def repeat_message(message): Returns the input message repeated three times. return message * 3"},{"question":"Create a function that , given an integer \`n\`, returns the \`n\`th number in the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with \`0\` and \`1\`: \`0, 1, 1, 2, 3, 5, 8, 13, ...\`.","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence. Parameters: n (int): The position in the Fibonacci sequence. Returns: int: The nth Fibonacci number. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Create a function that takes an array as an argument and returns an array with each element squared.","solution":"def square_elements(arr): Returns a list with each element of the input list squared. :param arr: A list of numbers :return: A list of numbers where each element is the square of the corresponding element in arr return [x ** 2 for x in arr]"},{"question":"Create a function that takes a string and returns the number of unique words in it. For simplicity, assume that words are separated by spaces and that punctuation does not matter. You should ignore case sensitivity. Here is a custom string: \\"Hello, world! Welcome world.\\"","solution":"import re def unique_words_count(s): Returns the number of unique words in the string s. Punctuation is ignored and the comparison is case insensitive. # Use regex to remove punctuation s_clean = re.sub(r'[^ws]', '', s) # Convert to lowercase s_clean = s_clean.lower() # Split the string into words words = s_clean.split() # Use a set to find the unique words unique_words = set(words) return len(unique_words)"},{"question":"Create a function that takes an array of strings, and returns a new array where each string is converted to a number, and then sorted in ascending order. If a string cannot be converted to a number, the function should return null.","solution":"def convert_and_sort_strings(arr): Converts an array of strings to numbers and sorts them in ascending order. If a string cannot be converted to a number, return None. try: num_arr = [float(s) for s in arr] return sorted(num_arr) except ValueError: return None"},{"question":"Create a function that takes a square matrix as a parameter and returns the matrix after removing all rows and columns with all zero values.","solution":"def remove_zero_rows_and_columns(matrix): Removes any rows and columns in a square matrix that contain all zero values. Args: matrix (list of list of int): A square matrix. Returns: list of list of int: The matrix with all-zero rows and columns removed. # Get the size of the matrix n = len(matrix) # Determine which rows and columns are all zeros zero_rows = {i for i in range(n) if all(matrix[i][j] == 0 for j in range(n))} zero_cols = {j for j in range(n) if all(matrix[i][j] == 0 for i in range(n))} # Create new matrix excluding zero rows and columns new_matrix = [ [matrix[i][j] for j in range(n) if j not in zero_cols] for i in range(n) if i not in zero_rows ] return new_matrix"},{"question":"Create a function that generates a Fibonacci sequence up to a given number. For example, if the input number is 10, the output should be [0, 1, 1, 2, 3, 5, 8].","solution":"def fibonacci_sequence_up_to_n(n): Generates a list representing the Fibonacci sequence up to a given number n. if n < 0: return [] sequence = [] a, b = 0, 1 while a <= n: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Create a function that finds all the words in a sentence which are longer than a given length.","solution":"def find_long_words(sentence, length): Returns a list of words from the sentence that are longer than the given length. :param sentence: str, the input sentence :param length: int, the specified length threshold :return: list of str, words longer than the specified length words = sentence.split() long_words = [word for word in words if len(word) > length] return long_words"},{"question":"Create a function that takes a string and a character as input and returns the number of times the character appears in the string. Perform the operation ignoring case sensitivity.","solution":"def count_char_ignore_case(s, c): Returns the number of times the character c appears in the string s, ignoring case sensitivity. s_lower = s.lower() c_lower = c.lower() return s_lower.count(c_lower)"},{"question":"Create a function that returns the number of days in a given month for a specified year. Consider leap years.","solution":"def days_in_month(year, month): Returns the number of days in a given month for a specified year. :param year: int, the year :param month: int, the month (1-12) :return: int, number of days in the month # Check for leap year if month == 2: if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return 29 else: return 28 # April, June, September, November have 30 days elif month in [4, 6, 9, 11]: return 30 # All other months have 31 days else: return 31"},{"question":"Create a function that takes two arguments, both of which are integers. The function should return the result of adding the two integers together. If either argument is not an integer, the function should raise a ValueError. The function should be named \`add_integers\`.","solution":"def add_integers(a, b): Returns the sum of a and b if both are integers; otherwise, raises a ValueError. if not isinstance(a, int) or not isinstance(b, int): raise ValueError(\\"Both arguments must be integers.\\") return a + b"},{"question":"Create a function that takes in two integers, \`x\` and \`y\`. Return the greater value of the two.","solution":"def greater_value(x, y): Returns the greater value between x and y. return max(x, y)"},{"question":"Create a function that takes a list of integers and returns the sum of the squares of the integers that are divisible by 3.","solution":"def sum_of_squares_divisible_by_three(nums): Takes a list of integers and returns the sum of the squares of the integers that are divisible by 3. return sum(x**2 for x in nums if x % 3 == 0)"},{"question":"Create a function that takes a number as input and returns the factorial of that number using a loop. The function should handle errors for negative inputs and non-integer inputs.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Raises a ValueError for negative inputs or non-integer inputs. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes two strings t and u. The function should return the sum of the ASCII values of characters in t that are not in u.","solution":"def ascii_sum_diff(t, u): Returns the sum of the ASCII values of characters in t that are not in u. return sum(ord(char) for char in t if char not in u)"},{"question":"Create a function that takes a list as an argument and returns a new list with all the list items containing vowels in them.","solution":"def contains_vowel(word): Helper function to check if a word contains a vowel vowels = 'aeiouAEIOU' return any(char in vowels for char in word) def filter_words_with_vowels(words_list): Function to filter out words containing vowels from a list. return [word for word in words_list if contains_vowel(word)]"},{"question":"Create a function that accepts an array of integers and returns an array where each integer is added to the next integer in the array, and if there is no next integer, the last element is duplicated.","solution":"def add_to_next(arr): Accepts an array of integers and returns an array where each integer is added to the next integer in the array. If there is no next integer, the last element is duplicated. Parameters: arr (list): A list of integers. Returns: list: A new list with the specified additions. if not arr: return [] result = [] for i in range(len(arr) - 1): result.append(arr[i] + arr[i + 1]) result.append(arr[-1] * 2) # Duplicate the last element if no next element return result"},{"question":"Create a function that takes in two arguments: a dictionary \`data\` and a string \`mode\`. The \`mode\` can be either \\"ascending\\" or \\"descending\\". The function should sort the dictionary based on the values if the \`mode\` is \\"ascending\\", or based on the keys if the \`mode\` is \\"descending\\". The function should return the sorted sequence as a list of tuples, where each tuple consists of a key-value pair from the dictionary. If the mode is not recognized, the function should return an empty list.","solution":"def sort_dict(data, mode): Sorts a dictionary either by its values in ascending order or by its keys in descending order. Args: data (dict): The dictionary to be sorted. mode (str): The mode of sorting: \\"ascending\\" for values and \\"descending\\" for keys. Returns: list: A list of tuples representing the sorted dictionary. An empty list if the mode is not recognized. if mode == \\"ascending\\": return sorted(data.items(), key=lambda item: item[1]) elif mode == \\"descending\\": return sorted(data.items(), key=lambda item: item[0], reverse=True) else: return []"},{"question":"Create a function that calculates the average of a list of numbers without using the built-in \`sum()\` function in Python. The function should also handle potential exceptions, such as encountering a non-numeric value in the list.","solution":"def average(numbers): Calculate the average of a list of numbers. Handles exceptions if non-numeric values are found. Parameters: numbers (list): List of numbers to calculate the average from. Returns: float: Average of the numbers in the list. None: If the list contains non-numeric values. try: if not numbers: return 0 total = 0 count = 0 for number in numbers: if not isinstance(number, (int, float)): raise ValueError('List contains non-numeric values') total += number count += 1 return total / count if count != 0 else 0 except ValueError: return None"},{"question":"Create a function that takes a list of integers representing the height of buildings in a skyline. How can I write a Python function to find the maximum height among these buildings?","solution":"def find_max_height(buildings): Returns the maximum height among a list of integers representing building heights. if not buildings: return None return max(buildings)"},{"question":"Create a function that calculates the factorial of a number using recursion. The function should handle large numbers efficiently and manage potential stack overflow errors by setting a reasonable recursion limit (using a loop to call the function until the limit is reached). Additionally, the function should be able to handle negative inputs by raising a ValueError with an appropriate error message.","solution":"import sys def factorial(n): Returns the factorial of n using recursion. Handles large numbers efficiently by adjusting the recursion limit and raises a ValueError for negative inputs. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0 or n == 1: return 1 original_limit = sys.getrecursionlimit() try: sys.setrecursionlimit(5000) # setting a higher limit return _factorial_recursive(n) finally: sys.setrecursionlimit(original_limit) def _factorial_recursive(n): if n == 1: return 1 else: return n * _factorial_recursive(n-1)"},{"question":"Create a function that generate a list of numbers from a to b (inclusive) and add them up.","solution":"def generate_and_sum(a, b): Generates a list of numbers from a to b (inclusive) and returns their sum. Parameters: a (int): start number b (int): end number Returns: int: the sum of the list of numbers from a to b (inclusive) num_list = list(range(a, b + 1)) total_sum = sum(num_list) return total_sum"},{"question":"Create a function that takes three input parameters: a string, a start index, and an end index. The function returns a substring of the input string, but only if the start index is less than or equal to the end index and both indices are within the bounds of the string. If the indices are out of bounds, the function should return an empty string.","solution":"def safe_substring(s, start, end): Returns a substring of the input string 's' from the 'start' index to the 'end' index (inclusive). If the start index is greater than the end index or any index is out of bounds, returns an empty string. if start > end or start < 0 or end >= len(s): return \\"\\" return s[start:end+1]"},{"question":"Create a function that accepts a single integer as input and returns the sum of its digits. Ensure that the function works correctly for both positive and negative integers.","solution":"def sum_of_digits(n): Returns the sum of the digits of the given integer. n = abs(n) # Make n positive to correctly sum digits for negative numbers return sum(int(digit) for digit in str(n))"},{"question":"Create a function that takes an integer as a parameter and returns the sum of its divisors, excluding the number itself.","solution":"def sum_of_divisors(n): Returns the sum of divisors of n, excluding n itself. divisors_sum = 0 for i in range(1, n): if n % i == 0: divisors_sum += i return divisors_sum"},{"question":"Create a function that takes an integer array and returns its maximum subarray sum. The maximum subarray sum is the contiguous subarray within a one-dimensional array of numbers which has the largest sum.","solution":"def max_subarray_sum(nums): Returns the maximum subarray sum for the input list of integers. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes two integers as input: \`firstNumber\` and \`secondNumber\`. The function should return the sum of the squares of the first \`n\` natural numbers that are both divisible by \`firstNumber\` and also follow a specific pattern where the next number is one more than three times the previous number in the sequence. The sequence should start with \`firstNumber\`.","solution":"def sum_of_squares(firstNumber, n): Returns the sum of the squares of the first \`n\` natural numbers that are divisible by \`firstNumber\` and follow the pattern: next number is one more than three times the previous number. sum_sq = 0 current_number = firstNumber for _ in range(n): sum_sq += current_number ** 2 current_number = 3 * current_number + 1 return sum_sq"},{"question":"Create a function that takes in 3 arguments: an integer \`limit\`, a list of integers \`numbers\`, and a target integer \`target\`. The function should return the sum of all the numbers in \`numbers\` that are less than or equal to \`limit\` and also have a remainder of \`target\` when divided by 3. If no such numbers exist, the function should return \`None\`.","solution":"def sum_numbers_by_condition(limit, numbers, target): Returns the sum of numbers that are less than or equal to limit and have a remainder of target when divided by 3. If no such numbers exist, return None. valid_numbers = [num for num in numbers if num <= limit and num % 3 == target] return sum(valid_numbers) if valid_numbers else None"},{"question":"Create a function that takes an array of integers as an argument and returns an array of the same length where each element is the product of all elements in the original array except the one at the current index.","solution":"def product_except_self(nums): Given an array nums of n integers, returns an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. length = len(nums) # The array to store the product of elements before the current index left_products = [1] * length # The array to store the product of elements after the current index right_products = [1] * length # Populating the left_products array for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Populating the right_products array for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Calculating the result by multiplying the left and right products result = [1] * length for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"Create a function that takes in a list of numbers and returns the sum of the squares of the numbers. If the list is empty or None, the function should return 0. Additionally, the function should be optimized for large lists and should avoid unnecessary computations.","solution":"def sum_of_squares(numbers): Returns the sum of the squares of the numbers in the list. If the list is empty or None, returns 0. if not numbers: return 0 return sum(x ** 2 for x in numbers)"},{"question":"Create a function that takes a number {n} as an input and returns the first {n} odd natural numbers as a list.","solution":"def first_n_odd_numbers(n): Returns the first n odd natural numbers. Parameters: n (int): The count of odd natural numbers to return. Returns: list: A list of the first n odd natural numbers. return [i for i in range(1, 2 * n, 2)]"},{"question":"Create a function that can find and replace words in a string. Your function should take a string, the word to replace, and the new word as parameters, and return the modified string.","solution":"def find_and_replace(original_str, target_word, new_word): Replaces all occurrences of the target_word with the new_word in the original_str. Parameters: original_str (str): The original string. target_word (str): The word to replace. new_word (str): The word to replace with. Returns: str: The modified string with replacements. return original_str.replace(target_word, new_word)"},{"question":"Create a function that takes a string as an input and returns the reverse of that string using a stack data structure. How would you implement this function in Python?","solution":"def reverse_string_using_stack(s): Returns the reverse of the input string using a stack data structure. stack = [] # Push all characters of string into the stack for char in s: stack.append(char) reversed_string = '' # Pop all characters from stack and form the reversed string while stack: reversed_string += stack.pop() return reversed_string"},{"question":"Create a function that takes a string of space-separated integers and returns a list of the integers in reverse order. For example, the function should return [3, 2, 1] when provided with '3 2 1'.","solution":"def reverse_integers(s): Takes a string of space-separated integers and returns a list of those integers in reverse order. :param s: A string of space-separated integers :return: A list of integers in reverse order # Split the string into a list of strings and convert each element into an integer integers = list(map(int, s.split())) # Reverse the list and return return integers[::-1]"},{"question":"Create a function that calculates the factorial of a number using recursion. Provide a brief explanation of how recursion works and how this function is implemented to calculate the factorial.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. It is denoted by n! and is defined as: - 0! = 1 (by definition) - n! = n * (n-1)! for n > 0 Args: n (int): A non-negative integer whose factorial is to be found Returns: int: Factorial of the integer n if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0: return 1 else: return n * factorial(n - 1) # Explanation: # Recursion is a technique in which a function calls itself in order to solve a problem. Each recursive call # should bring us closer to a base case that can be solved directly without recursion. # In the provided factorial function, the base case is when n is 0, where we return 1. # Otherwise, the function calls itself with n-1, gradually reducing the problem size, until it reaches the base case."},{"question":"Create a function that generates all possible permutations of a given string. Please provide a Python implementation.","solution":"from itertools import permutations def generate_permutations(s): Returns all possible permutations of a given string. return [''.join(p) for p in permutations(s)]"},{"question":"Create a function that takes as input a list of integers and returns a list of all possible subsets of the input list. The subsets should be generated in ascending order of their sizes and then lexicographically for subsets of the same size.","solution":"from itertools import combinations def subsets(nums): Returns all possible subsets of a list of integers in ascending order of their sizes and then lexicographically for subsets of the same size. nums.sort() # To ensure lexicographical order within subsets of the same size result = [] for r in range(len(nums) + 1): for comb in combinations(nums, r): result.append(list(comb)) return result"},{"question":"Create a function that takes two parameters, a 2D array and a number, and returns all rows of the 2D array that contain the number.","solution":"def get_rows_containing_number(matrix, number): Returns all rows from the 2D array (matrix) that contain the specified number. Parameters: matrix (list of lists): The 2D array. number: The number to be searched within the rows. Returns: list of lists: Rows that contain the specified number. return [row for row in matrix if number in row]"},{"question":"Create a function that takes in an integer array and returns a new array with the elements sorted in descending order. The function should handle edge cases such as empty arrays and arrays with duplicate elements.","solution":"def sort_descending(arr): Returns a new array with the elements sorted in descending order. Parameters: arr (list of int): The input array of integers. Returns: list of int: A new array sorted in descending order. return sorted(arr, reverse=True)"},{"question":"Create a function that takes a string as input and returns the string with all characters transformed to lower case.","solution":"def to_lower_case(input_string): Returns the input string with all characters transformed to lower case. return input_string.lower()"},{"question":"Create a function that checks if a string is a valid email. A valid email should have the format of \\"username@domain.extension\\".","solution":"import re def is_valid_email(email): Checks if a given string is a valid email. A valid email should have the format \\"username@domain.extension\\". pattern = re.compile(r'^[w.-]+@[w.-]+.w+') return bool(pattern.match(email))"},{"question":"Create a function that takes an array of integers as input and returns the maximum and minimum values in the array. The function should be optimized for large arrays and should use a single pass algorithm.","solution":"def find_max_min(arr): Returns the maximum and minimum values in the array in a single pass. Parameters: arr (list): A list of integers. Returns: tuple: A tuple containing the maximum and minimum values in the array. if not arr: raise ValueError(\\"Array cannot be empty\\") max_val = min_val = arr[0] for num in arr[1:]: if num > max_val: max_val = num if num < min_val: min_val = num return max_val, min_val"},{"question":"Create a function that calculates the Euclidean distance between two points in a 2D space. The function should take four parameters: the x and y coordinates of the first point, and the x and y coordinates of the second point. The function should return the Euclidean distance as a floating-point number.","solution":"import math def euclidean_distance(x1, y1, x2, y2): Calculates the Euclidean distance between two points in a 2D space. Parameters: x1, y1: Coordinates of the first point. x2, y2: Coordinates of the second point. Returns: The Euclidean distance as a floating-point number. return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)"},{"question":"Create a function that takes a string as input and returns a new string with all vowels replaced by the vowel that follows it in the alphabet. For instance, 'a' should be replaced by 'e', 'e' by 'i', and so on. The function should handle both lower-case and upper-case vowels, and it should be case-sensitive. Non-alphabet characters should remain unchanged.","solution":"def replace_vowels(string): Replaces each vowel in the string with the next vowel in the alphabet. 'a' -> 'e', 'e' -> 'i', 'i' -> 'o', 'o' -> 'u', 'u' -> 'a' The function is case-sensitive. Non-alphabet characters are not changed. Args: - string (str): Input string Returns: - str: Modified string with vowels replaced vowel_pairs = { 'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a', 'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A' } return ''.join(vowel_pairs.get(char, char) for char in string)"},{"question":"Create a function that takes an array of strings and returns a new array containing only the strings with an even number of characters. Among those, sort them alphabetically in ascending order.","solution":"def even_length_strings(strings): Takes an array of strings and returns a new array containing only the strings with an even number of characters, sorted alphabetically. even_length = [string for string in strings if len(string) % 2 == 0] return sorted(even_length)"},{"question":"Create a function that identifies if a string is a palindrome, reads the string from left to right and right to left and it should return true if they are the same. Otherwise, it should return false.","solution":"def is_palindrome(s): Checks if the input string s is a palindrome. A palindrome is a string that reads the same forward and backward. # Normalize the string by converting it to lowercase and removing non-alphanumeric characters normalized_s = ''.join(char.lower() for char in s if char.isalnum()) return normalized_s == normalized_s[::-1]"},{"question":"Create a function that calculates the Fibonacci sequence up to a given number n. The function should also return the nth Fibonacci number.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to the n-th Fibonacci number and the n-th Fibonacci number itself. if n == 0: return [], 0 elif n == 1: return [0], 0 elif n == 2: return [0, 1], 1 sequence = [0, 1] for i in range(2, n): next_fib = sequence[-1] + sequence[-2] sequence.append(next_fib) return sequence, sequence[-1]"},{"question":"Create a function that calculates the total cost of a pizza order. The function should take the number of pizzas, the cost per pizza, and the cost of delivering a single pizza as parameters and return the total cost of the order. Let's assume a flat delivery cost regardless of the number of pizzas ordered.","solution":"def total_pizza_order_cost(number_of_pizzas, cost_per_pizza, delivery_cost): Calculates the total cost of a pizza order. Args: number_of_pizzas (int): The number of pizzas ordered. cost_per_pizza (float): The cost of each pizza. delivery_cost (float): The flat delivery cost. Returns: float: The total cost of the order. return (number_of_pizzas * cost_per_pizza) + delivery_cost"},{"question":"Create a function that takes an integer array as input and returns the highest value in the array.","solution":"def find_highest_value(arr): Takes an integer array and returns the highest value in the array. if not arr: raise ValueError(\\"Array cannot be empty\\") return max(arr)"},{"question":"Create a function that takes two lists containing integers and returns True if the two lists are equal (contain the same elements in the same order) and False otherwise.","solution":"def lists_are_equal(list1, list2): Returns True if the two lists contain the same elements in the same order, False otherwise. return list1 == list2"},{"question":"Create a function that accepts an array of numbers and returns the sum of the numbers at the even indices.","solution":"def sum_even_indices(nums): Returns the sum of the numbers at the even indices in the given list. :param nums: List of integers. :return: Sum of numbers present at even indices. return sum(nums[i] for i in range(0, len(nums), 2))"},{"question":"Create a function that calculates the sum of all numbers in a list excluding duplicates. In Python, I want a function that takes a list of integers, and returns the sum of unique numbers only.","solution":"def sum_of_unique_numbers(numbers): Returns the sum of the unique numbers in the list. Parameters: numbers (list): A list of integers. Returns: int: The sum of the unique numbers. from collections import Counter count = Counter(numbers) unique_sum = sum(num for num, cnt in count.items() if cnt == 1) return unique_sum"},{"question":"Create a function that takes two integers as input and returns the sum of all the numbers between and including them. For example, if the input is (3, 5), the output should be 12 because 3 + 4 + 5 = 12. If the input is (1, 1), it should return 1. If the second number is smaller than the first, return -1.","solution":"def sum_between(a, b): Returns the sum of all the numbers between and including a and b. If b < a, returns -1. if b < a: return -1 return sum(range(a, b + 1))"},{"question":"Create a function that takes a Pandas DataFrame as input and returns the column names with missing values. If there are no missing values, return an empty list.","solution":"import pandas as pd def columns_with_missing_values(df): Returns a list of column names that have missing values in the given DataFrame. Parameters: df (pd.DataFrame): The input DataFrame. Returns: list: A list of column names with missing values. An empty list if there are no missing values. return [col for col in df.columns if df[col].isnull().any()]"},{"question":"Create a function that takes a string and returns the most repeated character. If there are multiple characters that repeat the same maximum number of times, return the first one encountered.","solution":"def most_repeated_char(s): Returns the most repeated character in the string s. If multiple characters have the same maximum number of repetitions, the first one encountered is returned. from collections import Counter if not s: return None char_count = Counter(s) most_common_char, _ = char_count.most_common(1)[0] return most_common_char"},{"question":"Create a function that reverses a string. But instead of reversing the entire string, you only need to reverse every sequence of characters that are enclosed in quotation marks (\\" \\"). For example, if the input string is \`\\"hello world\\"\`, the output should be \`\\"hello dlrow\\"\`. If the input string is \`\\"hello \\"world\\"!\\"\`, the output should be \`\\"hello !dlrow\\"\`.","solution":"def reverse_quoted_string(s): Reverses every sequence of characters enclosed in quotation marks in the string s. result = [] in_quotes = False quoted_string = [] for char in s: if char == '\\"': if in_quotes: # End of quoted string; reverse and append to result result.append(''.join(reversed(quoted_string))) quoted_string = [] in_quotes = not in_quotes if in_quotes and char != '\\"': quoted_string.append(char) else: result.append(char) return ''.join(result)"},{"question":"Create a function that returns the total count of all words in a given string, separated by spaces.","solution":"def word_count(s): Returns the total count of all words in the given string, separated by spaces. # Split the string by spaces words = s.split() # Return the length of the list of words return len(words)"},{"question":"Create a function that takes a list of integers as input and returns a new list with the even numbers doubled and the odd numbers unchanged.","solution":"def double_evens(nums): Takes a list of integers and returns a new list with the even numbers doubled and the odd numbers unchanged. return [num * 2 if num % 2 == 0 else num for num in nums]"},{"question":"Create a function that takes an integer as input and returns the sum of all the divisors of the number (excluding the number itself). For example, the sum of divisors of 6 (excluding 6) would be 1+2+3=6, so the function should return 6. If there are no divisors (which can only happen if the number is 1), return 0.","solution":"def sum_of_divisors(n): Returns the sum of all divisors of the input number n (excluding n itself). if n == 1: return 0 divisors_sum = 0 for i in range(1, n//2 + 1): if n % i == 0: divisors_sum += i return divisors_sum"},{"question":"Create a function that identifies whether a given number is a power of two. This function should return \`True\` if the number is a power of two, and \`False\` otherwise. A number is considered a power of two if it can be expressed as (2^k) for some integer (k).","solution":"def is_power_of_two(n): Returns True if n is a power of two, else returns False. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Create a function that takes an array of integers as input and returns the length of the longest subarray that contains only unique elements.","solution":"def longest_unique_subarray(arr): Returns the length of the longest subarray that contains only unique elements. n = len(arr) max_len = 0 start = 0 seen = {} for end in range(n): if arr[end] in seen: start = max(start, seen[arr[end]] + 1) seen[arr[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Create a function that takes an integer array as input and returns the maximum sum of a contiguous subarray. This is similar to Kadane's algorithm problem, but with a slight twist: the algorithm should return the maximum sum of the subarray which includes at least one positive number. If no such subarray exists, return 0.","solution":"def max_subarray_with_positive(nums): Finds the maximum sum of a contiguous subarray that includes at least one positive number. If no such subarray exists, returns 0. if all(x <= 0 for x in nums): return 0 max_ending_here = max_so_far = float('-inf') for num in nums: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Create a function that takes an integer \`n\` and returns a list of all numbers less than \`n\` that are multiples of 3 or 5.","solution":"def multiples_of_3_or_5(n): Returns a list of all numbers less than n that are multiples of 3 or 5. return [i for i in range(n) if i % 3 == 0 or i % 5 == 0]"},{"question":"Create a function that reverses characters in a given string without altering the order of words. The function should handle leading, trailing, and multiple spaces between words. The function should also not use Python's built-in reverse functions or slicing.","solution":"def reverse_characters_in_string(s): Reverses characters in a given string without altering the order of words. :param s: input string :return: string with characters of each word reversed, but words remain in the original order def reverse(word): # Helper function to reverse a given word reversed_word = \\"\\" for char in word: reversed_word = char + reversed_word return reversed_word words = s.split(' ') reversed_words = [reverse(word) for word in words] return ' '.join(reversed_words)"},{"question":"Create a function that returns the area of a rectangle with a given width and height. The function should also handle the case where the input values are not valid by returning an appropriate error message.","solution":"def rectangle_area(width, height): Returns the area of the rectangle if width and height are valid numbers. Otherwise, returns an error message. if not isinstance(width, (int, float)) or not isinstance(height, (int, float)): return \\"Error: Width and height must be numbers.\\" if width < 0 or height < 0: return \\"Error: Width and height must be non-negative.\\" return width * height"},{"question":"Create a function that takes in an array of n reals, and returns an array of n+1 reals where added value satisfies the condition that each element of the new array is the result of the average of its adjacent elements from the original array.","solution":"def add_averaged_value(arr): Adds an average value to the array such that each element of the new array is the result of the average of its adjacent elements from the original array. :param arr: List of n real numbers :return: List of n+1 real numbers if len(arr) < 2: raise ValueError(\\"Array should contain at least two elements.\\") new_arr = [] for i in range(len(arr) - 1): new_arr.append((arr[i] + arr[i + 1]) / 2) new_arr.append(arr[-1]) return [arr[0]] + new_arr"},{"question":"Create a function that takes a list of integers and returns a list of strings corresponding to the integer values with binary representation. The binary strings should be prefixed with '0b' and should maintain the order of the original integers in the input list.","solution":"def int_to_binary_string(nums): Converts a list of integers to a list of binary strings prefixed with '0b'. Parameters: nums (list): List of integers Returns: list: List of binary strings corresponding to the integer values return [bin(num) for num in nums]"},{"question":"Create a function that rotates a list \`n\` positions to the right. The rotation should handle both positive and negative values of \`n\`. Positive \`n\` should rotate the list to the right, and negative \`n\` should rotate it to the left. The function should be efficient and handle large lists with \`n\` values close to the list length. How can we implement this in Python?","solution":"def rotate_list(lst, n): Rotates the list lst by n positions. Positive n rotates to the right, and negative n rotates to the left. if not lst: return lst n = n % len(lst) # Handle n larger than the list size return lst[-n:] + lst[:-n]"},{"question":"Create a function that can take in any number of arguments, sort them, and return the sorted list. The function should also handle the case where the arguments are not numbers and should raise a ValueError if they are not convertible to numbers.","solution":"def sort_numbers(*args): Takes any number of arguments, sorts them, and returns the sorted list. Raises a ValueError if the arguments are not convertible to numbers. try: numbers = [float(arg) for arg in args] except ValueError: raise ValueError(\\"All arguments must be convertible to numbers\\") return sorted(numbers)"},{"question":"Create a function that checks if two strings \`s\` and \`t\` are anagrams of each other. Anagrams are words or phrases made by rearranging the letters of another, using all the original letters exactly once.","solution":"def are_anagrams(s, t): Check if two strings are anagrams of each other. :param s: First string :param t: Second string :return: True if s and t are anagrams, False otherwise return sorted(s) == sorted(t)"},{"question":"Create a function that takes an integer and returns the largest integer smaller than that integer which has the same number of digits. For example, if the input is 5432, the function will return 5431.","solution":"def largest_smaller_with_same_digits(x): Returns the largest integer smaller than x which has the same number of digits. if x <= 10: raise ValueError(\\"Input number should be greater than 10\\") return x - 1"},{"question":"Create a function that takes an integer number as input and returns the number of digits in that integer using recursion. How can you implement this function in Python?","solution":"def count_digits(n): Returns the number of digits in the integer n using recursion. if n < 0: n = -n # Make n positive if it's negative if n == 0: return 1 # Single digit zero case if n < 10: return 1 # Base case: single digit return 1 + count_digits(n // 10)"},{"question":"Create a function that implements a Caesar cipher with a given key. The function should encrypt strings by shifting each letter in the string by the number of positions equal to the key. Non-alphabetical characters should remain unchanged. The function should handle both uppercase and lowercase letters in a cyclic manner.","solution":"def caesar_cipher(text, key): Encrypts a string using a Caesar cipher with the given key. Parameters: text (str): The string to encrypt. key (int): The key for the cipher, representing the number of positions to shift. Returns: str: The encrypted string. result = [] for char in text: if char.isalpha(): shift = key % 26 if char.islower(): new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a')) else: new_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A')) result.append(new_char) else: result.append(char) return ''.join(result)"},{"question":"Create a function that inverts the characters of each word in a given string, but keeps the words in their original order.","solution":"def invert_words(sentence): Inverts the characters of each word in a given string but keeps the words in their original order. return ' '.join(word[::-1] for word in sentence.split())"},{"question":"Create a function that takes an integer as input and checks if it is a perfect square. If it is, return the square root of the number as an integer. If it is not, return -1.","solution":"import math def is_perfect_square(n): Returns the square root of n if n is a perfect square; otherwise returns -1. if n < 0: return -1 sqrt_n = int(math.sqrt(n)) if sqrt_n * sqrt_n == n: return sqrt_n return -1"},{"question":"Create a function that takes an integer as an input and returns the hexadecimal equivalent of that number as a string prefixed with '0x'.","solution":"def int_to_hex(n): Returns the hexadecimal string of an integer n, prefixed with '0x'. return hex(n)"},{"question":"Create a function that generates a list of Fibonacci numbers up to the \`n\`th number. The function should be implemented in Python and should be efficient.","solution":"def generate_fibonacci(n): Generates a list of Fibonacci numbers up to the \`n\`th number. Parameters: n (int): The length of the Fibonacci sequence to generate. Returns: list: The list containing the first \`n\` Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fibonacci_sequence = [0, 1] for i in range(2, n): next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_number) return fibonacci_sequence"},{"question":"Create a function that takes a list of integers and returns the maximum value found in the list. If the list is empty, the function should return None.","solution":"def find_maximum(values): Returns the maximum value from a list of integers. If the list is empty, returns None. if not values: return None return max(values)"},{"question":"Create a function that checks if a triangle is right-angled or not.","solution":"def is_right_triangle(a, b, c): Checks if a triangle with sides a, b, and c is right-angled. The function returns True if the triangle is right-angled, otherwise False. sides = sorted([a, b, c]) return sides[0]**2 + sides[1]**2 == sides[2]**2"},{"question":"Create a function that takes two arguments, an array of integers, and a target value. The function should return the indices of the two numbers such that they add up to the target, with a twist: find the indices such that the sum of the numbers at those indices is greater than or equal to the target but as close to the target as possible. If no such pair exists, return an empty array.","solution":"def closest_pair_sum(nums, target): Returns the indices of the two numbers such that their sum is greater than or equal to the target but as close to the target as possible. If no such pair exists, return an empty array. :param nums: List of integers :param target: Target value :return: List of two indices n = len(nums) if n < 2: return [] closest_sum = float('inf') closest_pair = [] # Generate all pairs of indices for i in range(n): for j in range(i + 1, n): current_sum = nums[i] + nums[j] if current_sum >= target and current_sum < closest_sum: closest_sum = current_sum closest_pair = [i, j] return closest_pair if closest_pair else []"},{"question":"Create a function that takes a list of strings as input and returns a new list of strings with the elements in reverse order without using in-built reverse functions or slicing. Implement the function using both iterative and recursive methods.","solution":"def reverse_list_iterative(lst): Returns a new list with the elements in reverse order using iterative method. reversed_list = [] for i in range(len(lst)-1, -1, -1): reversed_list.append(lst[i]) return reversed_list def reverse_list_recursive(lst): Returns a new list with the elements in reverse order using recursive method. if len(lst) == 0: return [] return [lst[-1]] + reverse_list_recursive(lst[:-1])"},{"question":"Create a function that takes two lists of integers and returns a new list containing the odd numbers from both lists.","solution":"def merge_odd_numbers(list1, list2): Returns a new list containing the odd numbers from both list1 and list2. return [num for num in list1 + list2 if num % 2 != 0]"},{"question":"Create a function that accepts three integers as input. It should return the sum of the squares of these integers. Make sure your function is well-documented and includes type annotations for better clarity.","solution":"def sum_of_squares(a: int, b: int, c: int) -> int: Returns the sum of the squares of three integers a, b, and c. Parameters: a (int): The first integer. b (int): The second integer. c (int): The third integer. Returns: int: The sum of the squares of a, b, and c. return a**2 + b**2 + c**2"},{"question":"Create a function that takes a string input and returns the longest palindromic substring within that string. A palindromic substring is defined as a substring that remains the same even when its characters are reversed.","solution":"def longest_palindromic_substring(s: str) -> str: Returns the longest palindromic substring in the given string. if not s: return \\"\\" def expand_around_center(left: int, right: int) -> str: while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left+1:right] longest = \\"\\" for i in range(len(s)): # Odd length palindromes palindrome1 = expand_around_center(i, i) # Even length palindromes palindrome2 = expand_around_center(i, i + 1) # Update the longest palindrome found so far if len(palindrome1) > len(longest): longest = palindrome1 if len(palindrome2) > len(longest): longest = palindrome2 return longest"},{"question":"Create a function that takes an integer array of length N. For elements at even indices, keep the values the same. For elements at odd indices, increment the value by 1.","solution":"def modify_array(arr): Takes an integer array of length N and modifies it such that elements at even indices remain the same and elements at odd indices are incremented by 1. Parameters: arr (list of int): The input integer array of length N. Returns: list of int: The modified array. for i in range(len(arr)): if i % 2 != 0: arr[i] += 1 return arr"},{"question":"Create a function that takes a string and returns the reverse of that string using recursion.","solution":"def reverse_string_recursive(s): Recursively reverses a given string. Args: s (str): Input string to be reversed. Returns: str: Reversed string. if len(s) == 0: return s else: return s[-1] + reverse_string_recursive(s[:-1])"},{"question":"Create a function that finds the longest word in a sentence. The function should return the longest word along with its length. If there are multiple words with the same maximum length, return the first one encountered.","solution":"def longest_word(sentence): Returns the longest word in a sentence along with its length. If there are multiple words with the same maximum length, the first one encountered is returned. :param sentence: A string representing the sentence :return: A tuple containing the longest word and its length words = sentence.split() max_length = 0 longest_word = \\"\\" for word in words: if len(word) > max_length: max_length = len(word) longest_word = word return longest_word, max_length"},{"question":"Create a function that reverses the order of characters in a string. For example, if the input is \\"hello\\", the output should be \\"olleh\\".","solution":"def reverse_string(s): Reverses the order of characters in a string. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Create a function that finds all the prime numbers within a given range of integers. The function should take two parameters, \`start\` and \`end\`, and return a list of all prime numbers between \`start\` and \`end\` (inclusive).","solution":"def is_prime_number(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False p = 3 while p * p <= num: if num % p == 0: return False p += 2 return True def find_primes_in_range(start, end): Returns a list of all prime numbers between start and end (inclusive). primes = [] for number in range(start, end + 1): if is_prime_number(number): primes.append(number) return primes"},{"question":"Create a function that takes in a list of integers and returns the maximum and minimum values in the list. The function should handle the case where the list may contain duplicate values.","solution":"def find_max_and_min(values): Returns a tuple containing the maximum and minimum values in the list. if not values: raise ValueError(\\"List is empty.\\") return (max(values), min(values))"},{"question":"Create a function that takes a list of integers and returns the sum of all the even numbers in the list. Let's call this function \`sum_even_numbers()\`.","solution":"def sum_even_numbers(lst): Returns the sum of all even numbers in the given list. return sum(num for num in lst if num % 2 == 0)"},{"question":"Create a function that swaps the cases of each character in a string. Lowercase letters should become uppercase, and uppercase letters should become lowercase.","solution":"def swap_case(s): Swaps the cases of each character in the string s. Converts lowercase letters to uppercase and vice versa. return s.swapcase()"},{"question":"Create a function that takes two lists as input and returns a new list containing the union of both lists while maintaining the order of elements as they appear in the original lists. If an element appears in both lists, it should only appear once in the result.","solution":"def union_lists(list1, list2): Takes two lists and returns a new list containing the union of both lists while maintaining the order of elements as they appear in the original lists. If an element appears in both lists, it should only appear once in the result. seen = set() result = [] for elem in list1: if elem not in seen: seen.add(elem) result.append(elem) for elem in list2: if elem not in seen: seen.add(elem) result.append(elem) return result"},{"question":"Create a function that takes a string as input and checks if it contains only numeric characters. If it does, it should return True; otherwise, it should return False.","solution":"def is_numeric(s): Checks if the input string s contains only numeric characters. :param s: Input string :type s: str :return: True if s contains only numeric characters, False otherwise :rtype: bool return s.isdigit()"},{"question":"Create a function that takes an integer array nums, and returns a new array result with the same length as nums, where result[i] is the product of all the numbers in nums except nums[i].","solution":"def product_except_self(nums): Given an integer array nums, returns an array result where result[i] is the product of all the numbers in nums except nums[i]. length = len(nums) result = [1] * length left = 1 right = 1 for i in range(length): result[i] *= left result[length - 1 - i] *= right left *= nums[i] right *= nums[length - 1 - i] return result"},{"question":"Create a function that calculates and returns the factorial of a given number. The function should handle both positive and negative integers. If the number is negative, the function should raise a ValueError. If the number is zero, the function should return 1, as 0! is defined to be 1.","solution":"def factorial(n): Returns the factorial of a given number. If the number is negative, raises ValueError. If the number is zero, returns 1. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") result = 1 for i in range(1, n+1): result *= i return result"},{"question":"Create a function that generates the cumulative sum of a sequence of Fibonacci numbers up to a given number \`n\`. The function should take an integer \`n\` as an input and return the cumulative sum of Fibonacci numbers that are less than or equal to \`n\`.","solution":"def fibonacci_cumulative_sum(n): Returns the cumulative sum of Fibonacci numbers up to and including n. if n < 0: return 0 a, b = 0, 1 cumulative_sum = 0 while a <= n: cumulative_sum += a a, b = b, a + b return cumulative_sum"},{"question":"Create a function that calculates the number of substrings in a given string that are palindromes. A palindromic substring is a substring that reads the same backward as forward. Your function should be efficient and consider all possible substrings of the input string.","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string s. n = len(s) count = 0 # Function to expand around the center and count palindromes def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return count"},{"question":"Create a function that receives two lists, adds them together element-wise, and returns the result as a list.","solution":"def add_lists(list1, list2): Adds two lists element-wise. Parameters: list1, list2 (list): The lists to be added together. Returns: list: A new list containing the element-wise sum of list1 and list2. return [a + b for a, b in zip(list1, list2)]"},{"question":"Create a function that takes an integer as input and returns its binary representation as a string, but with a twist: the string should follow a specific format where 'x' is included at the beginning and the end of the binary string. For example, if the input is 5, which is '101' in binary, the function should return 'x101x'. If the input is 2, which is '10' in binary, the function should return 'x10x'. Note that the binary should not have any leading zeros.","solution":"def to_custom_binary(n): Converts an integer to a custom binary string format with 'x' at the beginning and end. Parameters: n (int): The integer to convert to binary. Returns: str: The custom binary string. binary_representation = bin(n)[2:] # Convert integer to binary, omitting '0b' prefix return f'x{binary_representation}x'"},{"question":"Create a function that receives a list of integers, and returns True if the list is \\"shallowly sorted\\" and False otherwise. A list is considered \\"shallowly sorted\\" if it is either entirely increasing or entirely decreasing.","solution":"def is_shallowly_sorted(lst): Check if the list is shallowly sorted. A list is considered shallowly sorted if it is either entirely increasing or entirely decreasing. if not lst: # An empty list is considered shallowly sorted. return True increasing = decreasing = True for i in range(len(lst) - 1): if lst[i] < lst[i + 1]: decreasing = False if lst[i] > lst[i + 1]: increasing = False return increasing or decreasing"},{"question":"Create a function that takes a single integer argument (a positive integer, n) and returns a string containing the two's complement binary representation of the integer. The function should handle both even and odd numbers, and returning a string with two's complement format. Two's complement is a binary number system where numbers are represented using two symbols: 0 and 1. It has several applications in digital circuits.","solution":"def twos_complement_binary(n): Returns the two's complement binary representation of a positive integer n. if n == 0: return \\"0\\" return bin(n & (2**(n.bit_length()+1) - 1))[2:]"},{"question":"Create a function that calculates the factorial of a given number using recursion. The function should be written in Python and be able to handle large integers efficiently. To ensure it works, write a check function that tests it with various inputs, including edge cases.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. # Base case: factorial of 0 or 1 is 1 if n == 0 or n == 1: return 1 # Recursive case: n! = n * (n-1)! else: return n * factorial(n - 1)"},{"question":"Create a function that generates a list of all primes up to a given number N using the Sieve of Eratosthenes algorithm. The function should be named \`generate_primes_sieve\` and should take one argument, \`N\` (an integer). The function should return a list of all prime numbers less than or equal to \`N\`.","solution":"def generate_primes_sieve(N): Returns a list of all prime numbers up to and including N using the Sieve of Eratosthenes algorithm. if N < 2: return [] sieve = [True] * (N + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for i in range(2, int(N ** 0.5) + 1): if sieve[i]: for j in range(i * i, N + 1, i): sieve[j] = False return [i for i in range(N + 1) if sieve[i]]"},{"question":"Create a function that detects and removes duplicates from a list of numbers, returning a new list without duplicates preserving the original order of the non-duplicate elements.","solution":"def remove_duplicates(numbers): Removes duplicates from a list of numbers while preserving the original order of elements. Parameters: numbers (list): A list of numbers. Returns: list: A new list with duplicates removed. seen = set() result = [] for num in numbers: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Create a function that returns the sum of all numbers up to n recursively. How can this function be optimized to stop recursive calls once it reaches the base case?","solution":"def sum_up_to_n(n): Returns the sum of all numbers up to n recursively. # Base case if n <= 1: return n # Recursive case return n + sum_up_to_n(n - 1)"},{"question":"Create a function that takes an array of integers as input and returns the sum of all elements whose indices are even. For example, given the array [3, 1, 4, 1, 5, 9], the function should return 3 + 4 + 5 = 12, since the elements at indices 0, 2, and 4 are included in the sum.","solution":"def sum_even_index_elements(arr): Returns the sum of all elements whose indices are even. return sum(arr[i] for i in range(0, len(arr), 2))"},{"question":"Create a function that finds the second largest number in an array. If the array does not have a second largest number (there is a tie for the largest number), the function should return None. The array will contain integers and will not be empty.","solution":"def second_largest(arr): Finds the second largest number in an array. If the array does not have a second largest number (there is a tie for the largest number), the function returns None. # Convert array to a set to remove duplicates unique_arr = set(arr) # If there are less than 2 unique numbers, return None if len(unique_arr) < 2: return None # Convert back to a sorted list and return the second last element sorted_arr = sorted(unique_arr) return sorted_arr[-2]"},{"question":"Create a function that generates a prime number greater than a given input number \`n\`. If the number is prime, return it; otherwise, find the next prime number and return it.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def next_prime(n): Returns the next prime number greater than n. If n is prime, return n. if is_prime(n): return n prime_candidate = n + 1 while not is_prime(prime_candidate): prime_candidate += 1 return prime_candidate"},{"question":"Create a function that receives a string parameter and returns the string with all the vowels replaced by the letter 'g'. For example, if the function receives \\"hello\\", it should return \\"hggng\\".","solution":"def replace_vowels_with_g(s): Replaces all vowels in the given string with the letter 'g'. Parameters: s (str): The input string. Returns: str: The modified string with all vowels replaced by 'g'. vowels = 'aeiouAEIOU' return ''.join('g' if char in vowels else char for char in s)"},{"question":"Create a function that checks if a given string is a palindrome. If it is, the function should also count and return the number of unique characters in the string. If the string is not a palindrome, it should return whether it is a palindrome or not. For instance, \\"racecar\\" should return \`(\\"racecar\\", 4)\` because it is a palindrome and has 4 unique characters. The input string will only contain lowercase English letters.","solution":"def check_palindrome_and_count_unique(s): Checks if the given string s is a palindrome. If it is, returns a tuple with the string and the count of unique characters. If not, returns a tuple with the string and a boolean indicating it is not a palindrome. :param s: Input string. :return: Tuple containing the input string and count of unique characters or boolean. # Check if string is a palindrome is_palindrome = s == s[::-1] if is_palindrome: unique_characters = set(s) return (s, len(unique_characters)) else: return (s, is_palindrome)"},{"question":"Create a function that takes an integer as input and returns the sum of all numbers from 1 to that integer (inclusive).","solution":"def sum_to_n(n): Returns the sum of all numbers from 1 to n (inclusive). return sum(range(1, n + 1))"},{"question":"Create a function that takes three arguments: two input strings and a third string. The function should return a string that is the concatenation of the first two input strings with the third string inserted between them. If the third string is \\"none\\", it should act as a neutral element, meaning it does not alter the concatenation of the first two strings. Otherwise, it should insert the third string between the two. If the third string or either of the input strings is None, the function should return None.","solution":"def concatenate_strings(str1, str2, str3): Concatenates two strings with a third string in between them. Parameters: str1 (str): The first input string. str2 (str): The second input string. str3 (str): The string to insert between the first and second strings. Returns: str: The concatenated result, or None if any input string is None. if str1 is None or str2 is None or str3 is None: return None if str3.lower() == \\"none\\": str3 = \\"\\" return str1 + str3 + str2"},{"question":"Create a function that takes a list of integers and returns a new list with all the even numbers in the original list removed. Therefore, only the odd numbers should remain in the new list.","solution":"def remove_even_numbers(numbers): Returns a new list with all the even numbers removed from the original list. :param numbers: List of integers :return: List of integers containing only odd numbers return [num for num in numbers if num % 2 != 0]"},{"question":"Create a function that takes a string text as input and returns the text in all uppercase letters. Additionally, the function should ignore any non-alphabetic characters during the conversion process.","solution":"def uppercase_text_ignore_non_alphabetic(text): Converts the given text to uppercase, ignoring non-alphabetic characters. return ''.join(char.upper() for char in text if char.isalpha())"},{"question":"Create a function that finds the maximum length of a substring that is present in all possible substrings of a given string. For instance, given the string \\"abcabcbb\\", the function should return 3 since the substring \\"abc\\" has the maximum length and is present in all possible substrings.","solution":"def max_unique_substring_length(s): Returns the length of the longest substring of a given string s without repeating characters. # Dictionary that stores the last positions of each characters. last_seen = {} start = 0 # Starting index of the current substring without repeat max_len = 0 # Max length of unique substring for end in range(len(s)): if s[end] in last_seen: # Move the start pointer to right of the last position of the current character start = max(start, last_seen[s[end]] + 1) # Update the last seen index of the current character last_seen[s[end]] = end # Update the maximum length of substring found so far max_len = max(max_len, end - start + 1) return max_len"},{"question":"Create a function that takes in a string \`s\` and an integer \`k\`. The function should return the longest substring of \`s\` that contains at most \`k\` distinct characters. For example, if \`s\` is \\"eceba\\" and \`k\` is 2, the function should return \\"ece\\" because it contains at most 2 distinct characters ('e' and 'c') and is the longest possible substring with this property.","solution":"def longest_substring_with_k_distinct_characters(s, k): Returns the longest substring of \`s\` that contains at most \`k\` distinct characters. if k == 0: return \\"\\" char_count = {} left = 0 max_len = 0 longest_substr = \\"\\" for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if right - left + 1 > max_len: max_len = right - left + 1 longest_substr = s[left:right + 1] return longest_substr"},{"question":"Create a function that takes in three parameters: \`start\`, \`end\`, and \`increment\`. The function should return a list of numbers starting from the \`start\` value and ending at the \`end\` value, incrementing by the specified \`increment\` value. If \`increment\` is not provided, it should default to 1. The function should handle cases where the \`start\` value is greater than the \`end\` value, in which case it should return an empty list.","solution":"def generate_range(start, end, increment=1): Returns a list of numbers starting from 'start' to 'end' (inclusive) incrementing by 'increment'. If 'start' is greater than 'end', an empty list is returned. Parameters: - start (int): The beginning value of the range. - end (int): The ending value of the range. - increment (int, optional): The step value for generating the range. Defaults to 1. Returns: - list: List of numbers in the specified range. if start > end or increment <= 0: return [] return list(range(start, end + 1, increment))"},{"question":"Create a function that takes two arrays and returns a new array containing the common elements between them.","solution":"def common_elements(arr1, arr2): Returns a new array containing the common elements between arr1 and arr2. return list(set(arr1) & set(arr2))"},{"question":"Create a function that takes a string as input and returns the most frequently occurring character (case-insensitive) in the string. If there are multiple characters with the same maximum frequency, return the one that appears first in alphabetical order.","solution":"def most_frequent_char(s): Returns the most frequently occurring character in the string (case-insensitive). If multiple characters have the same frequency, the first in alphabetical order is returned. if not s: return '' s = s.lower() char_count = {} for char in s: if char.isalpha(): if char in char_count: char_count[char] += 1 else: char_count[char] = 1 max_count = max(char_count.values()) max_chars = [char for char in char_count if char_count[char] == max_count] return min(max_chars)"},{"question":"Create a function that takes the height of a cone and the radius of the base as input and returns the volume of the cone. The formula for the volume of a cone is V = (1/3) * π * r^2 * h, where r is the radius and h is the height of the cone.","solution":"import math def cone_volume(radius, height): Returns the volume of a cone given the radius of the base and the height. Parameters: radius (float): The radius of the base of the cone. height (float): The height of the cone. Returns: float: The volume of the cone. return (1/3) * math.pi * radius**2 * height"},{"question":"Create a function that takes an array of integers as input and returns a new array with each element multiplied by 3.","solution":"def multiply_by_three(arr): Takes an array of integers and returns a new array with each element multiplied by 3. return [x * 3 for x in arr]"},{"question":"Create a function that finds the longest common prefix between two strings.","solution":"def longest_common_prefix(str1, str2): Finds the longest common prefix between two strings. min_length = min(len(str1), len(str2)) prefix = \\"\\" for i in range(min_length): if str1[i] == str2[i]: prefix += str1[i] else: break return prefix"},{"question":"Create a function that takes a list of strings and a target string. The function should return true if the target string is present in the list, and false otherwise.","solution":"def contains_string(string_list, target): Returns True if the target string is present in the string_list, otherwise False. return target in string_list"},{"question":"Create a function that takes a positive integer as input and prints the Fibonacci sequence up to that number. The Fibonacci sequence is defined as a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1.","solution":"def fibonacci_sequence(n): Prints the Fibonacci sequence up to the given number n. Parameters: n (int): The positive integer up to which the Fibonacci sequence will be printed. Returns: list: The Fibonacci sequence up to n. if n <= 0: return [] sequence = [0] next_number = 1 while next_number <= n: sequence.append(next_number) next_number = sequence[-1] + sequence[-2] return sequence"},{"question":"Create a function that takes two vectors of unequal lengths, \`cc\` and \`dd\`, and returns a vector \`result\` such that each element in \`result\` is the product of the corresponding elements in \`cc\` and \`dd\`. If there are extra elements in either vector, ignore them.","solution":"def vector_product(cc, dd): Returns a vector (list) such that each element in the resulting vector is the product of the corresponding elements in cc and dd. If cc and dd are of different lengths, only the elements up to the length of the shorter vector are considered. :param cc: List of numbers (first vector) :param dd: List of numbers (second vector) :return: List of products of corresponding elements in cc and dd return [c * d for c, d in zip(cc, dd)]"},{"question":"Create a function that generates random strings of letters from 'A' to 'Z'. In Python, you can utilize the 'random' and 'string' modules to achieve this. For instance, calling the function with a length of 5 should return a string like 'GPTUX'. How can we implement this?","solution":"import random import string def generate_random_string(length): Generates a random string of uppercase letters with given length. Args: length (int): The length of the random string to generate. Returns: str: A random string of uppercase letters. letters = string.ascii_uppercase return ''.join(random.choice(letters) for _ in range(length))"},{"question":"Create a function that prints the absolute value of an integer. The function should handle both positive and negative inputs. It should also handle the case when the input is zero.","solution":"def print_absolute_value(n): Prints the absolute value of an integer n. print(abs(n))"},{"question":"Create a function that takes two parameters, a list of integers and an integer, then returns the list of integers multiplied by the integer. For example, multiply_list([1, 2, 3], 2) should return [2, 4, 6].","solution":"def multiply_list(int_list, multiplier): Multiplies each element in int_list by multiplier. Parameters: int_list (list): A list of integers. multiplier (int): An integer to multiply each element by. Returns: list: A list where each element is the product of the corresponding element in int_list and multiplier. return [x * multiplier for x in int_list]"},{"question":"Create a function that takes two arrays of integers as input and returns a boolean value indicating whether the two arrays are equal, considering all elements and their order.","solution":"def arrays_equal(arr1, arr2): Returns True if arr1 and arr2 are equal, i.e., contain the same elements in the same order. Returns False otherwise. return arr1 == arr2"},{"question":"Create a function that generates a polynomial regression model and plots the results. The function should take arrays \`x\` and \`y\` for training, and \`x_new\` for making predictions. The function should also accept parameters \`degree\` for the polynomial degree and \`plot_title\` for the plot title. The function should use the \`numpy\` and \`matplotlib\` libraries, and the \`numpy.polyfit\` function for fitting the polynomial model.","solution":"import numpy as np import matplotlib.pyplot as plt def polynomial_regression(x, y, x_new, degree, plot_title): Generates a polynomial regression model, fits it to the provided data, and plots the results. Parameters: x (array-like): Training data inputs. y (array-like): Training data outputs. x_new (array-like): Data points for making predictions. degree (int): Degree of the polynomial to fit. plot_title (str): Title of the plot. Returns: y_new (array): Predicted values for \`x_new\` based on the fitted polynomial model. # Fit the polynomial model coeffs = np.polyfit(x, y, degree) poly = np.poly1d(coeffs) # Generate predictions y_new = poly(x_new) # Plot the results plt.scatter(x, y, color='red', label='Data Points') plt.plot(x_new, y_new, color='blue', label='Polynomial Fit') plt.title(plot_title) plt.xlabel('x') plt.ylabel('y') plt.legend() plt.show() return y_new"},{"question":"Create a function that takes two parameters: the name of an employee, and their department. The function should return a string that provides a greeting message to the employee, integrating both their name and department. For instance, if the parameters are 'John Doe' and 'Engineering', it should return 'Hello John Doe, welcome to the Engineering department.'.","solution":"def greet_employee(name, department): Returns a greeting message for the employee with their name and department. return f\\"Hello {name}, welcome to the {department} department.\\""},{"question":"Create a function that generates a 3D array of shape (n,n,n) and populates it with random float numbers within a specified range [min_val, max_val]. How would you implement this in Python?","solution":"import numpy as np def generate_random_3d_array(n, min_val, max_val): Generates a 3D array of shape (n,n,n) with random float numbers in the range [min_val, max_val]. Parameters: n (int): The dimension of the 3D array. min_val (float): The minimum value for the random float numbers. max_val (float): The maximum value for the random float numbers. Returns: np.ndarray: A 3D array of shape (n,n,n) populated with random floats in the specified range. return np.random.uniform(min_val, max_val, (n, n, n))"},{"question":"Create a function that takes two parameters: an integer \`N\` and an array \`arr\` of integers, and returns the sum of the odd-indexed elements in the array.","solution":"def sum_odd_indexed_elements(N, arr): Returns the sum of the elements at odd indices in the array. Parameters: N (int): The number of elements in the array. arr (list): A list of integers. Returns: int: The sum of the elements at odd indices. return sum(arr[i] for i in range(1, N, 2))"},{"question":"Create a function that takes a dictionary as an input and returns a new dictionary with the values of the original dictionary as keys and the keys as values. In case of duplicate values, append their corresponding keys to a list as the value for that key in the new dictionary.","solution":"def invert_dict(input_dict): Inverts a dictionary, making values into keys and keys into values. If there are duplicate values in the input dictionary, their corresponding keys are added to a list. Args: input_dict (dict): The dictionary to invert. Returns: dict: A dictionary where values are keys and keys are values. inverted_dict = {} for key, value in input_dict.items(): if value in inverted_dict: if isinstance(inverted_dict[value], list): inverted_dict[value].append(key) else: inverted_dict[value] = [inverted_dict[value], key] else: inverted_dict[value] = key return inverted_dict"},{"question":"Create a function that takes an integer as an input and returns a string that displays the integer in words. For example, if the input is 4, the output should be \\"forty\\". If the input is 123, the output should be \\"one hundred twenty-three\\".","solution":"def number_to_words(num): # Helper function to handle numbers less than 1000 def helper(n): if n < 20: return below_20[n] elif n < 100: return tens[n // 10] + ('' if n % 10 == 0 else '-' + below_20[n % 10]) else: return below_20[n // 100] + ' hundred' + ('' if n % 100 == 0 else ' ' + helper(n % 100)) if num == 0: return 'zero' below_20 = [ '', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen' ] tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'] thousands = ['', ' thousand', ' million', ' billion'] words = '' for i, chunk in enumerate(chunk_number(num)): if chunk: words = helper(chunk) + thousands[i] + ('' if words == '' else ' ' + words) return words.strip() def chunk_number(num): while num > 0: yield num % 1000 num //= 1000"},{"question":"Create a function that takes two strings as arguments and returns the number of common characters between the two strings. The function should also return the common characters as a string. If there are no common characters, the function should return an empty string.","solution":"def common_characters(str1, str2): Returns the number of common characters and a string of common characters between str1 and str2. common_chars = set(str1) & set(str2) common_chars_string = ''.join(sorted(common_chars)) return len(common_chars), common_chars_string"},{"question":"Create a function that takes a user's name, hereafter referred to as \\"uname\\", and returns \\"hello\\" + uname.","solution":"def greet_user(uname): Returns a greeting with the username. :param uname: The user's name :return: A greeting string return \\"hello \\" + uname"},{"question":"Create a function that checks if a given string contains any repeating characters within a certain distance \`k\`. The function should return \`True\` if there are repeating characters within \`k\` distance, otherwise it should return \`False\`. It is required that the function should have a time complexity of O(n).","solution":"def has_repeating_chars_within_k(s, k): Checks if a given string contains any repeating characters within a certain distance k. Parameters: s (string): The string to be checked. k (int): The distance within which to check for repeating characters. Returns: bool: True if there are repeating characters within k distance, otherwise False. char_positions = {} for i, char in enumerate(s): if char in char_positions and i - char_positions[char] <= k: return True char_positions[char] = i return False"},{"question":"Create a function that finds the maximum depth of a binary tree. The function should take a binary tree as input and return the maximum depth. The binary tree is represented using a class \`TreeNode\` where each node has a value and pointers to the left and right children.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root): Returns the maximum depth of the binary tree. if root is None: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Create a function that takes no arguments and returns the sum of all prime numbers less than 1000. You should define a helper function to determine whether a number is prime. Use the Sieve of Eratosthenes algorithm to generate the list of prime numbers. The function should be optimized to work efficiently.","solution":"def sum_of_primes_below_1000(): Returns the sum of all prime numbers less than 1000. limit = 1000 sieve = [True] * limit sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(limit ** 0.5) + 1): if sieve[start]: for multiple in range(start * start, limit, start): sieve[multiple] = False prime_sum = sum(index for index, is_prime in enumerate(sieve) if is_prime) return prime_sum"},{"question":"Create a function that generates the Fibonacci sequence up to a given number of terms using recursion.","solution":"def fibonacci_sequence(n): Generates the Fibonacci sequence up to n terms using recursion. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: fib_seq = fibonacci_sequence(n - 1) fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Create a function that takes in a string and returns the first non-repeated character in it. If all characters are repeated, return a message indicating so.","solution":"def first_non_repeated_character(string): Returns the first non-repeated character in the string. If all characters are repeated, returns a message indicating so. char_count = {} for char in string: char_count[char] = char_count.get(char, 0) + 1 for char in string: if char_count[char] == 1: return char return \\"All characters are repeated.\\""},{"question":"Create a function that generates the Fibonacci sequence up to the nth number. The function should also include an optional parameter to determine the order of the sequence (ascending, descending, or neither). If the order is not specified, the function should return the sequence in ascending order. The function should also have an optional parameter to specify the starting point of the sequence. If the starting point is not specified, the sequence should start from the first two numbers (0 and 1).","solution":"def fibonacci_sequence(n, order='ascending', start=(0, 1)): Generates the Fibonacci sequence up to the nth number. Parameters: n (int): The number of elements in the sequence. order (str): The order of the sequence ('ascending', 'descending' or 'neither'). Defaults to 'ascending'. start (tuple): The starting point of the sequence. Defaults to (0, 1). Returns: list: The Fibonacci sequence as a list. if n <= 0: return [] a, b = start sequence = [a, b] for _ in range(2, n): a, b = b, a + b sequence.append(b) if order == 'ascending': return sequence elif order == 'descending': return sequence[::-1] elif order == 'neither': return sequence else: raise ValueError(\\"Order must be 'ascending', 'descending' or 'neither'\\")"},{"question":"Create a function that checks if a number is a **Perfect Square**. A Perfect Square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are Perfect Squares (1x1, 2x2, 3x3, 4x4), but 2, 3, and 14 are not.","solution":"import math def is_perfect_square(n): Checks if n is a perfect square. if n < 0: return False root = math.isqrt(n) return root * root == n"},{"question":"Create a function that checks if a given number is a perfect square. A perfect square is an integer that is the square of an integer. For example, 1, 4, 9, and 16 are perfect squares, while 2, 3, and 14 are not. The function should be efficient and handle large numbers gracefully.","solution":"import math def is_perfect_square(n): Checks if the given number n is a perfect square. if n < 0: return False sqrt_n = int(math.sqrt(n)) return sqrt_n * sqrt_n == n"},{"question":"Create a function that accepts a string and returns a string with the same characters, but with the first and last characters removed. If the string has less than 2 characters, return an empty string.","solution":"def remove_first_last(s): Removes the first and last characters of the string s. If the string has fewer than 2 characters, return an empty string. if len(s) < 2: return \\"\\" return s[1:-1]"},{"question":"Create a function that returns the length of the longest increasing subsequence (LIS) in a given sequence of numbers. For example, given the sequence [10, 22, 9, 33, 21, 50, 41, 60], the function should return 5, because the LIS is [10, 22, 33, 50, 60].","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in a sequence of numbers. if not nums: return 0 # DP array to store the length of LIS ending at each index lis = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Create a function that takes an integer and another number as parameters. The function should return the integer after multiplying it by the number. If no second parameter is provided, the function should return the integer multiplied by 10.","solution":"def multiply_or_default(integer, multiplier=10): Returns the integer after multiplying it by the multiplier. If no multiplier is provided, it multiplies the integer by 10. :param integer: int, the number to be multiplied :param multiplier: int, the multiplier (default is 10) :return: int, the result of multiplication return integer * multiplier"},{"question":"Create a function that takes a string \`s\` as input and returns a string \`result\` such that for every character in \`s\`, the result string has that character repeated \`n\` times, where \`n\` is the index of the character in the string \`s\` (0-based). For example, if \`s = \\"abc\\"\`, then the output should be \\"aabbcc\\".","solution":"def repeat_characters_by_index(s): Returns a new string where each character in the input string s is repeated n times, where n is the index of the character plus one (0-based index + 1). Parameters: s (str): The input string. Returns: str: The transformed string with each character repeated according to its index. result = '' for i, ch in enumerate(s): result += ch * (i + 1) return result"},{"question":"Create a function that takes an array of integers as input and returns the maximum product of any triplet in the array.","solution":"def max_product_of_triplet(arr): Returns the maximum product of any triplet in the array. :param arr: List[int] - list of integers :return: int - maximum product of any triplet if len(arr) < 3: raise ValueError('Array must have at least three elements') arr.sort() # The maximum product of three numbers can be found by considering: # 1. The product of the three largest numbers # 2. The product of the two smallest numbers (which can be negative) and the largest number return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])"},{"question":"Create a function that takes a list of integers as input and returns the maximum sum of any contiguous subarray within the list. The function should be efficient and utilize Kadane's algorithm.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray within the list using Kadane's Algorithm. if not nums: return 0 current_max = global_max = nums[0] for num in nums[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"Create a function that identifies the first non-repeated character in a given string. For example, in the string \\"programming\\", the function should return 'p'. If there are no non-repeated characters, the function should return null.","solution":"def first_non_repeated_character(s): Returns the first non-repeated character in the given string or None if there are no non-repeated characters. char_count = {} # Count occurrences of each character for char in s: char_count[char] = char_count.get(char, 0) + 1 # Find the first character with a single occurrence for char in s: if char_count[char] == 1: return char return None"},{"question":"Create a function that takes a list of integers and returns a new list with all the even numbers removed. The function should also ensure that the returned list does not contain any duplicate elements.","solution":"def remove_evens_and_duplicates(lst): Takes a list of integers and returns a new list with all the even numbers removed. Also ensures that the returned list does not contain any duplicate elements. unique_odd_numbers = {x for x in lst if x % 2 != 0} return list(unique_odd_numbers)"},{"question":"Create a function that calculates the factorial of a number using recursion. Recursion is a method where the solution to a problem depends on solutions to smaller instances of the same problem.","solution":"def factorial(n): Returns the factorial of a number n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that generates the nth Fibonacci number. Implement this function with using recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: raise ValueError(\\"Input should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function that returns the sum of the numbers in a list and the count of the numbers in the list, as a tuple. Use Python to write this function.","solution":"def sum_and_count(numbers): Returns a tuple containing the sum of the numbers in the list and the count of the numbers. Parameters: numbers (list): List of numbers Returns: tuple: Sum of the numbers in the list and the count of the numbers total_sum = sum(numbers) count = len(numbers) return total_sum, count"},{"question":"Create a function that identifies the most frequently occurring character in a given string, ignoring case sensitivity. Write a Python solution.","solution":"def most_frequent_char(s): Returns the most frequently occurring character in the string s, ignoring case. If there are multiple characters with the same highest frequency, return the lexicographically smallest one. s = s.lower() char_count = {} # Count the frequency of each character for char in s: if char.isalpha(): # consider only alphabet characters if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Determine the character with the highest frequency most_frequent = None max_count = 0 for char, count in char_count.items(): if count > max_count or (count == max_count and char < most_frequent): most_frequent = char max_count = count return most_frequent"},{"question":"Create a function that takes a string representing a binary number and returns its corresponding integer value.","solution":"def binary_to_integer(binary_str): Converts a string representing a binary number to its corresponding integer value. Parameters: binary_str (str): A string representing a binary number. Returns: int: The integer value of the binary string. return int(binary_str, 2)"},{"question":"Create a function that , given the array of numbers and a target number, returns the indices of the two numbers such that they add up to the target.","solution":"def two_sum(nums, target): Given an array of numbers and a target number, return the indices of the two numbers such that they add up to the target. Args: nums (list of int): The list of numbers. target (int): The target number. Returns: tuple: A tuple containing the indices of the two numbers. num_dict = {} for i, num in enumerate(nums): difference = target - num if difference in num_dict: return (num_dict[difference], i) num_dict[num] = i return None"},{"question":"Create a function that searches for a list item by key in a list of dictionaries. The function should return the value associated with the specified key if it exists, or \`None\` if the key is not found in any dictionary within the list.","solution":"def search_list_of_dicts(list_of_dicts, target_key): Searches for a list item by key in a list of dictionaries. Args: list_of_dicts (list): A list of dictionaries to search. target_key (str): The key to search for in the dictionaries. Returns: The value associated with the specified key if it exists, or None if the key is not found in any dictionary within the list. for dictionary in list_of_dicts: if target_key in dictionary: return dictionary[target_key] return None"},{"question":"Create a function that determines whether three given integers form a triangle. For the purpose of this task, a triangle is defined as a set of three integers where the sum of any two numbers must be greater than the third number.","solution":"def is_triangle(a, b, c): Determines if three integers form a triangle. For three integers to form a triangle, the sum of any two must be greater than the third. return (a + b > c) and (a + c > b) and (b + c > a)"},{"question":"Create a function that takes a number and returns all factors of that number. Factors are numbers that can divide the number evenly. For example, the factors of 12 are 1, 2, 3, 4, 6, and 12.","solution":"def get_factors(n): Returns a list of all factors of the given number n. Parameters: n (int): The number to find factors for. Returns: list: A list of factors of n. if n < 1: raise ValueError(\\"n should be a positive integer greater than zero.\\") factors = [] for i in range(1, n + 1): if n % i == 0: factors.append(i) return factors"},{"question":"Create a function that takes an integer as an argument and prints whether the number is positive, negative, or zero.","solution":"def check_number_sign(number): Prints whether the number is positive, negative, or zero. Args: number (int): The number to check. Returns: str: \\"positive\\", \\"negative\\", or \\"zero\\". if number > 0: return \\"positive\\" elif number < 0: return \\"negative\\" else: return \\"zero\\""},{"question":"Create a function that returns the smallest positive integer that has exactly \`n\` divisors. You should use the prime number theorem and optimize your solution to work efficiently with large values of \`n\`.","solution":"from math import sqrt, isqrt from sympy import primerange def number_of_divisors(n): Returns the smallest positive integer that has exactly \`n\` divisors. if n == 1: return 1 primes = list(primerange(1, 100)) # Precompute a list of primes def compute_product(combination): product = 1 for base, exp in combination: product *= base ** exp return product def find_combinations(n, current_div_count, start=0, current_combination=[]): if current_div_count == n: yield current_combination elif current_div_count > n or start >= len(primes): return else: for i in range(start, len(primes)): for exp in range(1, n // current_div_count + 1): next_combination = current_combination + [(primes[i], exp)] yield from find_combinations(n, current_div_count * (exp + 1), i + 1, next_combination) best_number = float('inf') for combination in find_combinations(n, 1): current_number = compute_product(combination) if current_number < best_number: best_number = current_number return best_number"},{"question":"Create a function that takes in a pair of nested dictionaries as arguments and return a single, merged dictionary. The keys in the returned dictionary should be unique and the values from the nested dictionaries should be combined. If a key exists in both nested dictionaries and the value is another dictionary, the function should MergeNestedDicts recursively. If the values are not dictionaries, they should be combined using the '+' operator if they are compatible (i.e., numbers, strings), or an error should be raised otherwise.","solution":"def merge_nested_dicts(d1, d2): Merges two nested dictionaries. If a key exists in both dictionaries and the value is another dictionary, the function merges the nested dictionaries recursively. If the values are not dictionaries, they are combined using the '+' operator if they are compatible. Args: d1 (dict): First nested dictionary. d2 (dict): Second nested dictionary. Returns: dict: A single, merged dictionary. merged = {} for key in (d1.keys() | d2.keys()): if key in d1 and key in d2: if isinstance(d1[key], dict) and isinstance(d2[key], dict): merged[key] = merge_nested_dicts(d1[key], d2[key]) else: try: merged[key] = d1[key] + d2[key] except TypeError: raise TypeError(f\\"Values for key '{key}' are not compatible for + operation.\\") elif key in d1: merged[key] = d1[key] else: merged[key] = d2[key] return merged"},{"question":"Create a function that takes as input a string \`s\`, and returns the string \`s\` with all the English characters converted to uppercase, and all other characters (including letters in other languages) left unchanged.","solution":"def to_uppercase(s): Converts all English characters in the string to uppercase, while leaving all other characters unchanged. :param s: Input string :return: String with all English characters converted to uppercase return ''.join([char.upper() if 'a' <= char <= 'z' else char for char in s])"},{"question":"Create a function that calculates the maximum depth of a binary search tree (BST) using a recursive approach in Python.","solution":"class TreeNode: Represents a node in the binary search tree. def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_depth(root): Returns the maximum depth of the binary search tree. if root is None: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Create a function that formats a list of strings to be JSON-compliant.","solution":"import json def format_list_to_json(lst): Formats a list of strings to be JSON-compliant. Parameters: lst (list): List of strings to be formatted. Returns: str: JSON-compliant string representation of the list. return json.dumps(lst)"},{"question":"Create a function that returns the string \\"That's great!\\" if the value is greater than the second argument, and \\"That's bad!\\" if not. If the second argument is not a number, result in a \\"That's bad!\\" string.","solution":"def evaluate_value(value, threshold): Returns \\"That's great!\\" if value is greater than the threshold, \\"That's bad!\\" otherwise. If the threshold is not a number, returns \\"That's bad!\\". if not isinstance(threshold, (int, float)): return \\"That's bad!\\" return \\"That's great!\\" if value > threshold else \\"That's bad!\\""},{"question":"Create a function that takes in a list of dictionaries, where each dictionary contains information about a country, including its name and the year it gained independence. Sort the list of dictionaries by the year of independence in ascending order.","solution":"def sort_countries_by_independence(countries): Sorts a list of dictionaries, each containing the name of the country and the year it gained independence, by the year of independence. return sorted(countries, key=lambda country: country['year'])"},{"question":"Create a function that takes a string, and returns a new string where every character in the original string is duplicated.","solution":"def duplicate_characters(s): Returns a new string where each character in the original string is duplicated. return ''.join([char * 2 for char in s])"},{"question":"Create a function that calculates the sum of the first N natural numbers. What is the maximum value of N that can be handled before hitting the limit of the number type in Python?","solution":"def sum_natural_numbers(N): Returns the sum of the first N natural numbers. return N * (N + 1) // 2 def maximum_value_of_N(): Returns the maximum value of N before hitting the limit of the number type in Python. import sys max_integer = sys.maxsize max_N = (-1 + (1 + 8 * max_integer)**0.5) // 2 return int(max_N)"},{"question":"Create a function that takes a string as input and returns the number of unique words in the string. WORDS ARE DEFINED AS SEQUENCES OF CHARACTERS SEPARATED BY SPACES.","solution":"def count_unique_words(s): Returns the number of unique words in the given string. Words are defined as sequences of characters separated by spaces. if not s: return 0 words = s.split() unique_words = set(words) return len(unique_words)"},{"question":"Create a function that takes in an array of numbers and returns the difference between the maximum and minimum values in the array. This function should ignore any non-numeric values in the array.","solution":"def max_min_difference(arr): Returns the difference between the maximum and minimum numeric values in the array. Non-numeric values are ignored. Args: arr (list): A list containing numeric and non-numeric values. Returns: int or float: The difference between the maximum and minimum numeric values. numeric_values = [x for x in arr if isinstance(x, (int, float))] if not numeric_values: raise ValueError(\\"Array contains no numeric values\\") return max(numeric_values) - min(numeric_values)"},{"question":"Create a function that takes a list of integers and returns the largest product of two unique numbers in the list.","solution":"def largest_product(nums): Returns the largest product of two unique numbers in the list. Parameters: nums (list): A list of integers Returns: int: The largest product of two unique numbers if len(nums) < 2: raise ValueError(\\"At least two numbers are required to find the largest product.\\") # Sort the list in ascending order nums.sort() # The largest product will be the maximum of the product of the two largest numbers # or the product of the two smallest (most negative) numbers. return max(nums[-1] * nums[-2], nums[0] * nums[1])"},{"question":"Create a function that takes as input an integer \`n\`, and determine if \`n\` is a perfect square. A perfect square is an integer that is the square of an integer. For example, 1, 4, 9, and 16 are perfect squares because 1=1^2, 4=2^2, 9=3^2, and 16=4^2.","solution":"import math def is_perfect_square(n): Determine if the integer n is a perfect square. Parameters: n (int): The integer to check. Returns: bool: True if n is a perfect square, False otherwise. if n < 0: return False root = int(math.sqrt(n)) return root * root == n"},{"question":"Create a function that calculates the sum of all numbers from 1 to n. The function should take an integer n as input and return the sum of all numbers from 1 to n.","solution":"def sum_to_n(n): Returns the sum of all numbers from 1 to n. :param n: Integer up to which the sum is calculated :return: Sum of all numbers from 1 to n return n * (n + 1) // 2"},{"question":"Create a function that takes a list of strings and prints all the strings that contain both the letter 'a' and the letter 'b'. The case of the letters should not matter when checking for 'a' and 'b'.","solution":"def print_strings_with_a_and_b(strings): Prints all strings from the input list that contain both the letter 'a' and the letter 'b'. The check is case insensitive. for string in strings: if 'a' in string.lower() and 'b' in string.lower(): print(string)"},{"question":"Create a function that takes as input a list of strings, concatenates all the strings, and returns the result. The function should handle cases where the list could be empty, and should return an empty string in such cases.","solution":"def concatenate_strings(strings): Concatenates all strings in the input list and returns the result. If the list is empty, returns an empty string. :param strings: List of strings to concatenate :return: Concatenated string return ''.join(strings)"},{"question":"Create a function that checks whether a given list can be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): This function checks whether the given string s can be rearranged to form a palindrome. from collections import Counter # Count frequency of each character in the string char_count = Counter(s) # Check how many characters have odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be rearranged into a palindrome, # there must be at most one character with an odd count. return odd_count <= 1"},{"question":"Create a function that will take two parameters \`a\` and \`b\`, and return the greater of the two.","solution":"def greater(a, b): Returns the greater of a and b. return a if a > b else b"},{"question":"Create a function that captures user input, validates it, and returns it.","solution":"def get_user_input(prompt): Captures user input, validates it to ensure it is not empty, and returns it. :param prompt: The input prompt to display to the user. :return: The validated user input. user_input = input(prompt) # Capture user input while not user_input.strip(): # Validate that the input is not empty or only white spaces print(\\"Input cannot be empty or just white spaces. Please try again.\\") user_input = input(prompt) # Recapture input return user_input"},{"question":"Create a function that takes in two arrays A and B. If the number of elements in A is greater than or equal to the number of elements in B, then return the sum of all elements in A. If the number of elements in A is less than the number of elements in B, then return the difference between the product of the elements of A and the product of the elements of B.","solution":"def array_compare(A, B): Returns the sum of elements in A if len(A) >= len(B), otherwise returns the difference between the product of the elements of A and the product of the elements of B. if len(A) >= len(B): return sum(A) else: product_A = 1 for a in A: product_A *= a product_B = 1 for b in B: product_B *= b return product_A - product_B"},{"question":"Create a function that accepts a sorted list of integers and returns the list with missing numbers filled in. The function should handle negative numbers and zeros as well. If the sorted list is continuous, the function should return it as is. For example, if the input list is [1, 2, 4, 5, 7], the function should return [1, 2, 3, 4, 5, 6, 7].","solution":"def fill_missing_numbers(sorted_list): Fills in the missing numbers from a sorted list of integers. Handles negative numbers and zeros as well. Params: sorted_list (list): A sorted list of integers. Returns: list: A list with missing numbers filled in. if not sorted_list: return [] result = [] for num in range(sorted_list[0], sorted_list[-1] + 1): result.append(num) return result"},{"question":"Create a function that returns all the elements in a list that are greater than a specified value.","solution":"def filter_greater_than(lst, value): Returns a new list with elements from lst that are greater than value. Args: lst (list): List of elements to filter value (int or float): The value to compare elements to Returns: list: A list of elements greater than value return [elem for elem in lst if elem > value]"},{"question":"Create a function that will return the length of the longest subsequence in a given string that is both a palindrome and a subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. A palindrome reads the same forwards and backwards.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest subsequence in a given string that is both a palindrome and a subsequence. :param s: Input string :return: Length of the longest palindromic subsequence n = len(s) dp = [[0 for x in range(n)] for y in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1]"},{"question":"Create a function that takes a list \`lst\` and an integer \`k\`. The function should return a list containing the first \`k\` elements of the input list \`lst\`. If \`k\` is greater than the length of the list, return the entire list. If \`k\` is negative, return an empty list.","solution":"def first_k_elements(lst, k): Returns the first k elements of the list lst. If k is greater than the length of the list, returns the entire list. If k is negative, returns an empty list. if k < 0: return [] return lst[:k]"},{"question":"Create a function that takes in a string and returns the most common character in the string. If there is more than one character with the same highest frequency, the function should return a list of all such characters.","solution":"from collections import Counter def most_common_char(s): Returns the most common character(s) in the string s. If there is more than one character with the highest frequency, the function returns a list of those characters. if not s: return [] count = Counter(s) max_freq = max(count.values()) most_common = [char for char, freq in count.items() if freq == max_freq] return most_common[0] if len(most_common) == 1 else most_common"},{"question":"Create a function that checks whether a list of pairs of numbers is sorted based on the sum of each pair. If the list is sorted, return true; otherwise, return false.","solution":"def is_sorted_by_sum(pairs): Check if the list of pairs is sorted based on the sum of each pair. Args: pairs (List[Tuple[int, int]]): List of pairs of integers. Returns: bool: True if the list is sorted based on the sum of each pair, False otherwise. sums = [sum(pair) for pair in pairs] return all(sums[i] <= sums[i + 1] for i in range(len(sums) - 1))"},{"question":"Create a function that takes a list of integers as an input and returns a new list of integers that contains only the even numbers from the input list. Filter out the odd numbers.","solution":"def filter_even_numbers(numbers): Filters out the odd numbers from the list and returns a list of only even numbers. :param numbers: List of integers :return: A new list containing only even integers from the input list return [num for num in numbers if num % 2 == 0]"},{"question":"Create a function that will output a list of even numbers in a given list of integers. You will need to provide the code, and it should be in Python. Additionally, return the sum of all the even numbers in the list. The function should return a tuple with the list of even numbers and their sum.","solution":"def even_numbers_and_sum(integers): Given a list of integers, this function returns a tuple containing a list of even numbers and the sum of these even numbers. Args: integers (list): A list of integers. Returns: tuple: A tuple containing a list of even numbers and the sum of these even numbers. evens = [num for num in integers if num % 2 == 0] total = sum(evens) return (evens, total)"},{"question":"Create a function that takes multiline string as input and returns the lines in reverse order. The function should skip any empty or whitespace-only lines.","solution":"def reverse_lines(text): Returns the lines in reverse order, skipping any empty or whitespace-only lines. lines = text.split('n') filtered_lines = [line for line in lines if line.strip()] return \\"n\\".join(filtered_lines[::-1])"},{"question":"Create a function that takes a dictionary as input and returns a new dictionary with the keys and values reversed. If the value is a dictionary, the function should recursively reverse the keys and values of the nested dictionary as well.","solution":"def reverse_dict(input_dict): Reverses the keys and values of a dictionary. If the value is a dictionary, the function recursively reverses the nested dictionary. reversed_dict = {} for key, value in input_dict.items(): if isinstance(value, dict): reversed_dict[key] = reverse_dict(value) else: reversed_dict[value] = key return reversed_dict"},{"question":"Create a function that takes an integer \`N\` and a list of integers as arguments. The function should return a new list containing the elements of the original list sorted in descending order, but only for the elements that are greater than or equal to \`N\`. The elements that are less than \`N\` should remain in their original order.","solution":"def sort_greater_or_equal(N, lst): Takes an integer N and a list of integers lst, and returns a new list where elements greater than or equal to N are sorted in descending order. Elements less than N remain in their original order. :param N: Integer threshold :param lst: List of integers :return: New list as per the described condition # Extract elements greater than or equal to N and sort them in descending order greater_than_or_equal = sorted([x for x in lst if x >= N], reverse=True) # To store the result result = [] # Pointer for elements greater than or equal to N index = 0 for x in lst: if x >= N: # Use sorted element if greater than or equal to N result.append(greater_than_or_equal[index]) index += 1 else: # Use original element if less than N result.append(x) return result"},{"question":"Create a function that takes an integer n and an integer k, and returns the smallest integer greater than n such that its binary representation has exactly k '1's.","solution":"def next_number_with_k_ones(n, k): Returns the smallest integer greater than n such that its binary representation has exactly k '1's. def count_ones(x): return bin(x).count('1') n += 1 while count_ones(n) != k: n += 1 return n"},{"question":"Create a function that takes two arguments, an integer n and a list of integers lst, and returns a new list containing the top n elements from the list lst, sorted in descending order. If n is greater than the length of lst, return the entire list sorted in descending order.","solution":"def top_n_elements(n, lst): Returns the top n elements from the list lst, sorted in descending order. If n is greater than the length of lst, returns the entire list sorted in descending order. Parameters: n (int): The number of top elements to return lst (list of int): The list of integers to find top elements from Returns: list of int: The top n elements sorted in descending order return sorted(lst, reverse=True)[:n]"},{"question":"Create a function that takes a string as an input and returns the first recurring character in the string. If no character is recurring, return -1.","solution":"def first_recurring_character(s): Returns the first recurring character in the string s. If no character is recurring, returns -1. seen_chars = set() for character in s: if character in seen_chars: return character seen_chars.add(character) return -1"},{"question":"Create a function that takes an integer as an argument and returns a new integer that is the reverse of the input integer without removing any digits. For example, if the input integer is 12345, the function should return 54321.","solution":"def reverse_integer(n): Takes an integer n and returns its reverse. Parameters: n (int): The integer to be reversed. Returns: int: The reversed integer. # Check if the number is negative is_negative = n < 0 # Convert the number to string, reverse it, and convert it back to integer reversed_n = int(str(abs(n))[::-1]) # If the original number was negative, return the negative of the reversed number return -reversed_n if is_negative else reversed_n"},{"question":"Create a function that takes two dates as input and returns the number of days between them. Use Python's datetime module to achieve this.","solution":"from datetime import datetime def days_between_dates(date1, date2): Returns the number of days between two dates. Both dates should be in the format 'YYYY-MM-DD'. date_format = \\"%Y-%m-%d\\" d1 = datetime.strptime(date1, date_format) d2 = datetime.strptime(date2, date_format) delta = d2 - d1 return abs(delta.days)"},{"question":"Create a function that takes an integer \`n\` and returns \`n * n\`.","solution":"def square(n): Returns the square of n. return n * n"},{"question":"Create a function that takes in two parameters, a list and a target value, and returns the index of the target in the list. If the target is not found, return -1.","solution":"def find_index(lst, target): Returns the index of the target in the list. If the target is not found, returns -1. try: return lst.index(target) except ValueError: return -1"},{"question":"Create a function that takes in an integer \`n\` as an argument and returns a list of Fibonacci sequence numbers from 0 to \`n\` (inclusive) that are even. The function should be efficient and work well for large \`n\` values.","solution":"def even_fibonacci_numbers(n): Returns a list of even Fibonacci sequence numbers from 0 to n (inclusive). fib_seq = [] a, b = 0, 1 while a <= n: if a % 2 == 0: fib_seq.append(a) a, b = b, a + b return fib_seq"},{"question":"Create a function that takes a positive integer n and returns the sum of all its even digits. If there are no even digits, return 0.","solution":"def sum_of_even_digits(n): Returns the sum of all even digits in the positive integer n. If there are no even digits, return 0. sum_even = 0 while n > 0: digit = n % 10 if digit % 2 == 0: sum_even += digit n //= 10 return sum_even"},{"question":"Create a function that determines all prime factors of a given number \`n\` and returns them as a list. The function should be efficient and handle large numbers well.","solution":"def prime_factors(n): Returns all prime factors of a given number n as a list. factors = [] # Start with the smallest prime number divisor = 2 while n > 1: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"Create a function that takes two integer arrays as input and produces an output array. The output array will contain the smaller integer between each corresponding pair of elements from the input arrays. If the input arrays have different lengths, the function should handle this gracefully by only comparing up to the length of the shorter array. If the arrays are empty, it should return an empty array.","solution":"def min_elements(array1, array2): Takes two integer arrays and returns an array consisting of the smaller integer from each corresponding pair of elements from the input arrays. If the arrays differ in length, only up to the shortest length is considered. If the arrays are empty, returns an empty array. return [min(a, b) for a, b in zip(array1, array2)]"},{"question":"Create a function that takes a string and an integer as arguments and returns a string that repeats the given string the specified number of times.","solution":"def repeat_string(s, n): Returns a string that repeats the given string s, n times. return s * n"},{"question":"Create a function that accepts two parameters, a message string and a key string. The function outputs the message string encrypted using a simple Caesar cipher, with each letter in the message shifted by the number of positions determined by the length of the key. If the key is shorter than the message, repeat the key to match the length of the message. For example, if the message is \\"hello\\" and the key is \\"abc\\", the output should be \\"hfnos\\". Note that the Caesar cipher only shifts alphabetical characters and maintains the case of the letters (i.e., lower and upper case letters remain as lower and upper case, respectively). Non-alphabetical characters are not shifted and should not be changed.","solution":"def encrypt_message(message, key): Encrypts a message using a simple Caesar cipher where each letter in the message is shifted by the number of positions determined by the length of the key. Parameters: message (str): The message to be encrypted key (str): The key string used to determine the shift Returns: str: The encrypted message key_length = len(key) encrypted_message = [] for i, char in enumerate(message): if char.isalpha(): shift = key_length if char.islower(): new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a')) else: new_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A')) encrypted_message.append(new_char) else: encrypted_message.append(char) return ''.join(encrypted_message)"},{"question":"Create a function that takes a string word as an argument and returns a list containing the middle letter(s) of the word. If the word has an odd length, return the single middle letter. If the word has an even length, return the two middle letters as a list.","solution":"def middle_letters(word): Returns the middle letter(s) of the word. If the word has an odd length, returns a list with the single middle letter. If the word has an even length, returns a list with the two middle letters. mid_index = len(word) // 2 if len(word) % 2 == 0: return [word[mid_index - 1], word[mid_index]] else: return [word[mid_index]]"},{"question":"Create a function that returns the maximum integer in a list.","solution":"def max_in_list(lst): Returns the maximum integer in a list. if not lst: raise ValueError(\\"The list is empty\\") return max(lst)"},{"question":"Create a function that takes a string as input and returns the string with all vowels replaced by the character 'a'. Answer the question in Python.","solution":"def replace_vowels_with_a(s): Replaces all vowels in the string s with the character 'a'. Parameters: s (str): The input string. Returns: str: The modified string with all vowels replaced by 'a'. vowels = \\"aeiouAEIOU\\" return ''.join('a' if char in vowels else char for char in s)"},{"question":"Create a function that takes in three integer arguments (a, b, c) representing the three sides of a triangle. The function should return a string indicating whether the triangle is \\"equilateral\\", \\"isosceles\\", \\"scalene\\", or \\"invalid\\". An equilateral triangle has all three sides of the same length, an isosceles triangle has exactly two sides the same length, and a scalene triangle has all sides of different lengths. If the sides do not form a valid triangle, the function should return \\"invalid\\". A valid triangle has the sum of the lengths of any two sides greater than the length of the third side.","solution":"def classify_triangle(a, b, c): Classifies a triangle based on the lengths of its sides. Parameters: a (int): The length of the first side. b (int): The length of the second side. c (int): The length of the third side. Returns: str: A string indicating the type of triangle (\\"equilateral\\", \\"isosceles\\", \\"scalene\\", or \\"invalid\\"). # Check for a valid triangle if a <= 0 or b <= 0 or c <= 0: return \\"invalid\\" if a + b <= c or a + c <= b or b + c <= a: return \\"invalid\\" # Determine the type of triangle if a == b == c: return \\"equilateral\\" elif a == b or b == c or a == c: return \\"isosceles\\" else: return \\"scalene\\""},{"question":"Create a function that takes two arguments, a string \`s\` and an integer \`k\`, and returns the \`k\`th character in the string \`s\` if it exists, otherwise returns \`None\`.","solution":"def kth_character(s, k): Returns the k-th character in the string s if it exists, else returns None. Parameters: s (str): The input string. k (int): The one-based index of the character to return. Returns: str or None: The k-th character if it exists, otherwise None. if k <= 0 or k > len(s): return None return s[k-1]"},{"question":"Create a function that accepts three integers as arguments and returns the maximum and minimum of the three integers.","solution":"def find_max_min(a, b, c): Returns the maximum and minimum of the three integers a, b, and c. maximum = max(a, b, c) minimum = min(a, b, c) return maximum, minimum"},{"question":"Create a function that takes in a sentence as a parameter and returns a dictionary with each word as a key and the number of times it appears in the sentence as the value.","solution":"def word_count(sentence): Takes a sentence and returns a dictionary with each word as a key and the number of times it appears as the value. words = sentence.split() word_dict = {} for word in words: word = word.lower() # To make it case insensitive if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 return word_dict"},{"question":"Create a function that takes a list of integers, and returns the sum of all the positive integers in the list. If there are no positive integers, the function should return 0.","solution":"def sum_of_positives(numbers): Returns the sum of all positive integers in the list. If there are no positive integers, returns 0. return sum(n for n in numbers if n > 0)"},{"question":"Create a function that concatenates two arrays and returns the result.","solution":"def concatenate_arrays(arr1, arr2): Concatenates two arrays and returns the result. Parameters: arr1 (list): The first array. arr2 (list): The second array. Returns: list: The concatenated result of arr1 and arr2. return arr1 + arr2"},{"question":"Create a function that takes a number \`n\` as input and returns the sum of all odd numbers from 1 to \`n\` (inclusive). Ensure the function handles both positive and negative inputs correctly.","solution":"def sum_of_odds(n): Returns the sum of all odd numbers from 1 to n (inclusive). Parameters: n (int): The upper limit for the range of numbers to sum. Returns: int: The sum of all odd numbers from 1 to n. if n < 1: return 0 return sum(i for i in range(1, n + 1) if i % 2 != 0)"},{"question":"Create a function that calculates the factorial of a given number. The function should be able to handle very large numbers by using a data type that can store large values. In Python, you can use the \`BigInt\` or \`Decimal\` libraries for large numbers.","solution":"def factorial(n): Returns the factorial of a given number \`n\`. The function handles very large numbers by using Python's built-in arbitrary precision integer type. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that needs to handle an array of integers and returns a new array where each element is the square of the original array's elements. Additionally, the function should filter out any numbers that are not within the range of 1 to 100 (inclusive) or有任何数字不在1到100的范围内。","solution":"def square_and_filter(arr): Return a new array where each element is the square of the original array's elements, and only includes elements within the range [1, 100] inclusive. return [x**2 for x in arr if 1 <= x <= 100]"},{"question":"Create a function that converts a Roman numeral to an integer. The function should handle the entries of basic Roman numerals and handle the subtraction cases (like IV, IX, XL, etc.) as well.","solution":"def roman_to_integer(roman): Convert a Roman numeral to an integer. Args: roman (str): Roman numeral as a string. Returns: int: The integer representation of the Roman numeral. roman_mapping = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } total = 0 prev_value = 0 for char in reversed(roman): value = roman_mapping[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Create a function that , for a given input array of numbers, returns the highest product possible from any three numbers in the array.","solution":"def highest_product_of_three(arr): Returns the highest product possible from any three numbers in the array. if len(arr) < 3: raise ValueError(\\"Array must contain at least three numbers\\") arr_sorted = sorted(arr) # The highest product can be obtained in one of the two ways: # 1. Product of the three largest numbers # 2. Product of the two smallest (possibly negative) numbers and the largest number highest_product = max( arr_sorted[0] * arr_sorted[1] * arr_sorted[-1], arr_sorted[-1] * arr_sorted[-2] * arr_sorted[-3] ) return highest_product"},{"question":"Create a function that sums up all the numbers in a list and returns the total sum. The function should handle empty lists and lists with negative numbers as well.","solution":"def sum_list(numbers): Returns the sum of all the numbers in the list. :param numbers: List of numbers to sum up. :return: Total sum of numbers in the list. total_sum = 0 for number in numbers: total_sum += number return total_sum"},{"question":"Create a function that takes in a string and returns the most frequently occurring character in that string. If there are multiple characters that occur most frequently, return any one of them. If the input string is empty, the function should return null. Assume that the input string contains only lowercase alphabetic characters.","solution":"def most_frequent_char(s): Returns the most frequently occurring character in the given string. If there are multiple characters that occur most frequently, returns any one of them. If the input string is empty, returns None. if not s: return None frequency = {} # Count the frequency of each character for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 # Find the character with the maximum frequency max_freq = -1 most_frequent = None for char, freq in frequency.items(): if freq > max_freq: max_freq = freq most_frequent = char return most_frequent"},{"question":"Create a function that takes two lists of integers, \`list1\` and \`list2\`, and returns a new list containing only the elements that are common to both lists.","solution":"def common_elements(list1, list2): Returns a new list containing only the elements that are common to both input lists. return [element for element in list1 if element in list2]"},{"question":"Create a function that takes two integers, a start number and an end number, and returns a list of all numbers between start and end (inclusive) that are divisible by 7. If no numbers divisible by 7 exist in that range, the function should return an empty list.","solution":"def numbers_divisible_by_7(start, end): Returns a list of numbers between start and end (inclusive) that are divisible by 7. return [num for num in range(start, end + 1) if num % 7 == 0]"},{"question":"Create a function that will add a pixel from \`img1\` to \`img2\` based on a given position in a coordinate system. The function will take two numpy arrays as input: \`img1\` and \`img2\`. Each array represents an image with dimensions \`(h, w, 3)\`, corresponding to the height, width, and 3 color channels (red, green, blue) respectively. The function will also accept a tuple \`(x, y)\` as input, representing the position to which a pixel from \`img1\` will be added to \`img2\`. The function should add the pixel from \`img1\` at the same \`(x, y)\` position to \`img2\` at the same \`(x, y)\` position. If the \`(x, y)\` position is out of bounds for either image, the function will not perform the addition. The function should return the modified \`img2\`.","solution":"import numpy as np def add_pixel(img1, img2, coord): Adds the pixel value from img1 to img2 at the given coordinate (x, y). Parameters: img1 (ndarray): The first image array (h, w, 3). img2 (ndarray): The second image array (h, w, 3). coord (tuple): The (x, y) position where the pixel will be added. Returns: ndarray: The modified img2 with the pixel added. x, y = coord if 0 <= x < img1.shape[1] and 0 <= y < img1.shape[0] and 0 <= x < img2.shape[1] and 0 <= y < img2.shape[0]: img2[y, x] = img2[y, x] + img1[y, x] img2[y, x] = np.clip(img2[y, x], 0, 255) return img2"},{"question":"Create a function that generates a list of all prime numbers between the given range [start, end]. The function should efficiently check for primality.","solution":"def is_prime(n): Helper function to determine if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def primes_in_range(start, end): Returns a list of all prime numbers in the range [start, end]. primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Create a function that takes a string as an input and then reverses the string by swapping the case of each character. For example, \\"AbCdEf\\" should become \\"aBcDeF\\". How should the function be designed to ensure it works for any input string?","solution":"def reverse_and_swap_case(s): Takes a string s and returns a new string where each character's case has been swapped. return s.swapcase()"},{"question":"Create a function that takes an array of integers and returns the maximum sum of non-adjacent elements. For example, [2, 4, 6, 2, 5] should return 13 (4 + 6 + 3).","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of non-adjacent elements in the array. if not nums: return 0 if len(nums) == 1: return nums[0] prev_biggest_sum = 0 current_biggest_sum = 0 for num in nums: new_sum = max(current_biggest_sum, prev_biggest_sum + num) prev_biggest_sum = current_biggest_sum current_biggest_sum = new_sum return current_biggest_sum"},{"question":"Create a function that prints the first n Fibonacci numbers using an iterative approach in Python. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two.","solution":"def fibonacci(n): Prints the first n Fibonacci numbers using an iterative approach. if n <= 0: return [] fibonacci_numbers = [0, 1] for i in range(2, n): fibonacci_numbers.append(fibonacci_numbers[-1] + fibonacci_numbers[-2]) return fibonacci_numbers[:n]"},{"question":"Create a function that finds the first non-repeating character in a string. The function should return the character if it exists, otherwise, it should return -1. The input string will consist of lowercase English letters.","solution":"def first_non_repeating_character(s): Finds the first non-repeating character in a string. Returns the character if it exists, otherwise returns -1. frequency = {} # First pass: count the frequency of each character for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 # Second pass: find the first character with frequency 1 for char in s: if frequency[char] == 1: return char return -1"},{"question":"Create a function that generates a random string of alphabet characters and numbers. The function should take an integer \`n\` as its argument and return a string of length \`n\`. The string should be a combination of uppercase letters (A-Z), lowercase letters (a-z), and digits (0-9).","solution":"import random import string def generate_random_string(n): Generates a random string of alphabet characters and numbers of length n. Args: n (int): The length of the generated string. Returns: str: A randomly generated string of length n. if n <= 0: return \\"\\" characters = string.ascii_letters + string.digits return ''.join(random.choice(characters) for _ in range(n))"},{"question":"Create a function that can handle both integer and float inputs and return the square of the input.","solution":"def square(number): Returns the square of the input number which can be integer or float. return number ** 2"},{"question":"Create a function that takes in two lists and determines if the first list contains all the elements of the second list.","solution":"def contains_all_elements(list1, list2): Returns True if all elements of list2 are in list1, otherwise False. return all(elem in list1 for elem in list2)"},{"question":"Create a function that takes an array of integers as input and returns a new array containing only the elements that are even and appear at even indices in the original array. An element is considered even if it is divisible by 2 without a remainder.","solution":"def even_elements_at_even_indices(arr): This function takes an array of integers and returns a new array containing only the elements that are even and appear at even indices in the original array. return [arr[i] for i in range(len(arr)) if i % 2 == 0 and arr[i] % 2 == 0]"},{"question":"Create a function that takes a list of integers as input and returns the two largest numbers in the list.","solution":"def two_largest_numbers(lst): Returns the two largest numbers in the list. if len(lst) < 2: raise ValueError(\\"The list must contain at least two numbers.\\") largest = second_largest = float('-inf') for num in lst: if num > largest: second_largest = largest largest = num elif num > second_largest and num != largest: second_largest = num return (largest, second_largest)"},{"question":"Create a function that takes two parameters: a list of integers and a target integer. The function should return the indices of the two numbers such that the sum of those two numbers equals the target. You should return the indices in an array format. If no such two numbers exist, return an empty array.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to target. Args: nums: List[int] - list of integers target: int - target integer sum Returns: List[int] - list of indices of the two numbers that add up to target num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: return [num_dict[complement], i] num_dict[num] = i return []"},{"question":"Create a function that takes an array of integers and returns an array where all the even numbers are moved to the front, maintaining their relative order, followed by all the odd numbers, also maintaining their relative order.","solution":"def separate_even_odd(arr): Takes an array of integers and returns an array where all the even numbers are moved to the front, maintaining their relative order, followed by all the odd numbers, also maintaining their relative order. :param arr: List of integers :return: List of integers with even numbers at the front followed by odd numbers evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"Create a function that takes an integer array as an argument and returns the smallest element in the array. The function should be named \`find_smallest_element\`.","solution":"def find_smallest_element(arr): Returns the smallest element in the array. if not arr: raise ValueError(\\"Array is empty.\\") smallest = arr[0] for num in arr: if num < smallest: smallest = num return smallest"},{"question":"Create a function that takes in a number and returns a list of all its positive divisors (excluding the number itself).","solution":"def positive_divisors(n): Returns a list of all positive divisors of n excluding the number itself. Parameters: n (int): The number to find divisors for. Returns: list: A list of positive divisors of n. if n <= 0: return [] divisors = [] for i in range(1, n): if n % i == 0: divisors.append(i) return divisors"},{"question":"Create a function that counts the number of vowels in a given string. The function should be named \`count_vowels\` and it should accept a single parameter \`s\` which is a string. The function should return the count of vowels in the string. A vowel is defined as one of the following characters: 'a', 'e', 'i', 'o', 'u', both in uppercase and lowercase.","solution":"def count_vowels(s): Returns the number of vowels in the given string s. vowels = 'aeiouAEIOU' count = 0 for char in s: if char in vowels: count += 1 return count"},{"question":"Create a function that takes in two lists and returns a new list containing the intersection of the two lists. The intersection should include only unique elements that are present in both lists.","solution":"def intersection(list1, list2): Returns a new list containing the unique intersection of two lists. return list(set(list1) & set(list2))"},{"question":"Create a function that checks if a given ASCII code is a vowel character. Use Python.","solution":"def is_vowel_ascii(ascii_code): Checks if the given ASCII code corresponds to a vowel character (a, e, i, o, u). Both uppercase and lowercase vowels are considered. Args: ascii_code (int): The ASCII code to check. Returns: bool: True if the ASCII code corresponds to a vowel, False otherwise. vowels_ascii = [65, 69, 73, 79, 85, 97, 101, 105, 111, 117] # ASCII codes for A, E, I, O, U, a, e, i, o, u return ascii_code in vowels_ascii"},{"question":"Create a function that determines the number of times each character appears in a given string. Return the result as a dictionary where the keys are the characters and the values are the counts.","solution":"def count_characters(s): Returns a dictionary with the number of occurrences of each character in the string s. character_count = {} for char in s: if char in character_count: character_count[char] += 1 else: character_count[char] = 1 return character_count"},{"question":"Create a function that takes a string, and returns a JSON object with the frequency of each character in the string. The keys of the JSON object should be the characters themselves, and the values should be their respective frequencies.","solution":"import json def char_frequency(s): Returns a JSON object with the frequency of each character in the input string s. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return json.dumps(frequency)"},{"question":"Create a function that takes an array of integers and returns an array of the same length where each element is the sum of the elements in the original array except for the element at the same index.","solution":"def array_excluding_sum(arr): Takes an array of integers and returns an array where each element is the sum of the elements in the original array except for the element at the same index. :param arr: List of integers :return: List of integers total_sum = sum(arr) return [total_sum - x for x in arr]"},{"question":"Create a function that calculates the factorial of a given number \`n\`. The factorial of a number is the product of all positive integers less than or equal to that number. For example, the factorial of 5 is \`5 * 4 * 3 * 2 * 1 = 120\`. Your function should handle special cases, such as when \`n\` is 0 or 1, where the factorial is defined as 1.","solution":"def factorial(n): Returns the factorial of a given number n. If n is 0 or 1, the factorial is 1 by definition. For any other positive integer, the factorial is the product of all positive integers less than or equal to n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n in (0, 1): return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that performs an exclusive or (XOR) operation between two integers and returns the result. The function should be named \`exclusiveOr\`.","solution":"def exclusiveOr(a, b): Returns the result of the bitwise XOR operation between integers a and b. return a ^ b"},{"question":"Create a function that identifies the first and last non-whitespace character in a string and returns the result as a tuple containing both characters. If the string is empty or consists only of whitespace, return a tuple of two None values.","solution":"def first_and_last_non_whitespace(s: str): Returns the first and last non-whitespace characters in a string as a tuple. If the string is empty or consists only of whitespace, returns (None, None). stripped_str = s.strip() if not stripped_str: return (None, None) return (stripped_str[0], stripped_str[-1])"},{"question":"Create a function that takes an integer as input and returns True if the number is a power of 4, and False otherwise.","solution":"def is_power_of_four(n): Returns True if n is a power of 4, False otherwise. if n <= 0: return False while n % 4 == 0: n = n // 4 return n == 1"},{"question":"Create a function that takes two integers as input and swaps their values. The function should return the swapped values as a tuple. However, you should not use a temporary variable to perform the swap. Instead, you should use arithmetic operations to swap the values.","solution":"def swap_without_temp(a, b): Swaps the values of a and b without using a temporary variable. Uses arithmetic operations to swap values. Parameters: a (int): The first integer. b (int): The second integer. Returns: tuple: The integers a and b, but swapped. a = a + b b = a - b a = a - b return (a, b)"},{"question":"Create a function that takes a string representing a binary number and returns the number of 1s in the binary string. The function should be named \`countOnes\` and should handle strings of varying lengths.","solution":"def countOnes(binary_string): Returns the number of 1s in the given binary string. Parameters: binary_string (str): A string representation of a binary number. Returns: int: The count of '1's in the binary string. return binary_string.count('1')"},{"question":"Create a function that takes two arguments, an integer and a string. The function should check if each character in the string is a digit. If it is, convert that character to an integer and add it to the integer argument. If not, ignore it. Finally, return the sum.","solution":"def sum_with_digits(integer, string): Takes an integer and a string. For each character in the string that is a digit, converts it to an integer and adds it to the input integer. Ignores non-digit characters. Finally, returns the sum. total = integer for char in string: if char.isdigit(): total += int(char) return total"},{"question":"Create a function that sorts characters in the characters of a string such that all uppercase letters come first, followed by all the lowercase letters, while preserving the relative order of both cases.","solution":"def sort_characters_by_case(s): Sorts characters in the string such that all uppercase letters come first, followed by all lowercase letters, while preserving the relative order of both cases. uppercase = [char for char in s if char.isupper()] lowercase = [char for char in s if char.islower()] return ''.join(uppercase + lowercase)"},{"question":"Create a function that takes two parameters: a list of numbers and a number 'x'. The function should return a new list that contains only the elements from the original list that are less than 'x'.","solution":"def filter_less_than(lst, x): Returns a list containing only the elements from the original list that are less than 'x'. Parameters: lst (list of numbers): The list of numbers to filter. x (number): The threshold number. Returns: list: A new list with elements less than 'x'. return [item for item in lst if item < x]"},{"question":"Create a function that takes an array as input and returns the frequency count of elements that are greater than 10 and have at least one even number digit in their decimal representation. For example, if the function is called with the array \`[15, 22, 13, 77, 8, 112]\`, the function should return 2, since 15 and 112 meet the criteria.","solution":"def count_elements(arr): Returns the count of elements that are greater than 10 and have at least one even number digit in their decimal representation. count = 0 for num in arr: if num > 10 and any(digit in '02468' for digit in str(num)): count += 1 return count"},{"question":"Create a function that takes an integer n and returns the sum of all the Fibonacci numbers less than or equal to n.","solution":"def sum_fibonacci(n): Returns the sum of all Fibonacci numbers less than or equal to n. if n < 0: return 0 fib1, fib2 = 0, 1 total_sum = 0 while fib1 <= n: total_sum += fib1 fib1, fib2 = fib2, fib1 + fib2 return total_sum"},{"question":"Create a function that takes a string and returns the first character that appears in the string only once. If every character appears more than once, return an underscore ('_').","solution":"def first_non_repeating_char(s): Returns the first character that appears in the string only once. If all characters appear more than once, returns '_'. char_count = {} # Count each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character that appears only once for char in s: if char_count[char] == 1: return char return '_'"},{"question":"Create a function that takes an object as a parameter and returns true if the object has all properties with values that are exactly 0 or an empty string. If it has any property with a value other than 0 or empty string, the function should return false.","solution":"def check_all_properties(obj): Returns True if all properties in the object have values that are exactly 0 or an empty string. If any property has a value other than 0 or an empty string, the function returns False. for value in obj.values(): if value != 0 and value != \\"\\": return False return True"},{"question":"Create a function that accepts an integer array and returns the product of all the elements in the array. If the array is empty, the function should return 1. If the product of all elements is greater than 1000, the function should return the last element of the array.","solution":"def product_of_array(arr): Returns the product of all the elements in the array. If the array is empty, returns 1. If the product of all elements is greater than 1000, returns the last element of the array. if not arr: return 1 product = 1 for num in arr: product *= num if product > 1000: return arr[-1] return product"},{"question":"Create a function that accepts an integer and returns a list of its factors. The factors should be in ascending order. For example, if the input integer is 12, the function should return [1, 2, 3, 4, 6, 12].","solution":"def find_factors(n): Returns a list of factors of n in ascending order. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") factors = [] for i in range(1, n + 1): if n % i == 0: factors.append(i) return factors"},{"question":"Create a function that takes an integer 'n' and returns the sum of the first 'n' natural numbers using a mathematical formula, rather than looping through all the numbers.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first 'n' natural numbers using the mathematical formula. The formula used is: n * (n + 1) // 2 if n < 1: return 0 return n * (n + 1) // 2"},{"question":"Create a function that takes a list of integers and returns a new list with the integers sorted in ascending order. The function should also handle cases where the list is empty or contains only one element. Additionally, the function should be able to handle lists with duplicate elements.","solution":"def sort_integers(input_list): Returns a new list with the integers sorted in ascending order. Handles lists that are empty or contain only one element, and can handle duplicates. Parameters: input_list (list): A list of integers. Returns: list: A new list with integers sorted in ascending order. return sorted(input_list)"},{"question":"Create a function that takes no arguments and prints \\"Hello, World!\\" to the console. Define the function as \`greet\`.","solution":"def greet(): Prints 'Hello, World!' to the console. print(\\"Hello, World!\\")"},{"question":"Create a function that takes an array of numbers as input and returns the count of even numbers in the array. If the array is null or empty, the function should return -1.","solution":"def count_even_numbers(arr): Counts the number of even numbers in the array. If the array is null or empty, returns -1. if arr is None or len(arr) == 0: return -1 count = 0 for num in arr: if num % 2 == 0: count += 1 return count"},{"question":"Create a function that takes a 2D matrix of integers and calculates the sum of the elements in the main diagonal and the secondary diagonal. The function should return the sums as a list. The main diagonal consists of elements where the row and column index are the same, while the secondary diagonal consists of elements where the sum of the row and column index is equal to the number of rows (or columns) minus one.","solution":"def diagonal_sums(matrix): Returns the sums of the main diagonal and secondary diagonal. Parameters: matrix (list of list of int): A 2D matrix of integers Returns: list: [main_diagonal_sum, secondary_diagonal_sum] n = len(matrix) main_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): main_diagonal_sum += matrix[i][i] secondary_diagonal_sum += matrix[i][n - 1 - i] return [main_diagonal_sum, secondary_diagonal_sum]"},{"question":"Create a function that takes in a string \`s\` and an integer \`n\`. The function should iterate over each character in the string, append it to a new string until it has been appended \`n\` times. The function should then return the new string that is formed.","solution":"def repeat_characters(s, n): Returns a new string formed by appending each character in the original string \`s\` to a new string \`n\` times. Parameters: s (str): The original string. n (int): The number of times each character should be appended. Returns: str: A new string with each character in \`s\` repeated \`n\` times. result = \\"\\" for char in s: result += char * n return result"},{"question":"Create a function that returns the array that results from merging two arrays of integers. Furthermore, the output array should be sorted. For example, if the input arrays are [3, 5, 2, 6] and [4, 1, 8], the output should be [1, 2, 3, 4, 5, 6, 8].","solution":"def merge_and_sort_arrays(array1, array2): Merges two arrays and returns the sorted result. :param array1: List of integers :param array2: List of integers :return: Merged and sorted list of integers merged_array = array1 + array2 sorted_array = sorted(merged_array) return sorted_array"},{"question":"Create a function that multiplies two integers, \`a\` and \`b\`, but performs the multiplication using only addition and subtraction, and no other arithmetic operations. You can use bit manipulation to achieve this. Explain your approach and provide a Python implementation.","solution":"def multiply(a, b): Multiplies two integers using only addition and subtraction. if a == 0 or b == 0: return 0 # Determine sign of the result is_negative = (a < 0) ^ (b < 0) # Work with positive equivalents a = abs(a) b = abs(b) result = 0 while b > 0: if b & 1: result += a a <<= 1 b >>= 1 return -result if is_negative else result"},{"question":"Create a function that takes a string as input and outputs the longest consecutive repeating character in the string along with its count.","solution":"def longest_repeating_char(s): Returns the longest consecutive repeating character and its count in the string s. if not s: return (\\"\\", 0) max_count = 1 current_count = 1 max_char = s[0] for i in range(1, len(s)): if s[i] == s[i - 1]: current_count += 1 else: if current_count > max_count: max_count = current_count max_char = s[i - 1] current_count = 1 if current_count > max_count: max_count = current_count max_char = s[-1] return (max_char, max_count)"},{"question":"Create a function that takes a string and returns its reverse. If the input string is empty, the function should return an empty string. The function should also handle reversing strings with punctuation and spaces. For example, reverseString(\\"Hello, World!\\") should return \\"!dlroW ,olleH\\".","solution":"def reverse_string(s): Returns the reverse of the input string s. If the input string is empty, returns an empty string. return s[::-1]"},{"question":"Create a function that processes a list of text documents and returns a dictionary where the keys are the unique words from all the documents and their values are the frequency counts of each word across all documents. Additionally, the function should ignore case sensitivity and consider only alphabetic characters as valid words. To consider \\"hello,\\" \\"Hello,\\" and \\"HELLO\\" as the same word, the function should normalize all words to lowercase.","solution":"import re from collections import defaultdict def word_frequency(documents): Processes a list of text documents and returns a dictionary where the keys are the unique words (in lowercase) from all the documents and their values are the frequency counts of each word across all documents. Only alphabetic characters are considered valid words and word comparison is case insensitive. Args: documents (list): A list of string documents. Returns: dict: A dictionary with words as keys and their frequency counts as values. word_count = defaultdict(int) for document in documents: words = re.findall(r'b[a-zA-Z]+b', document.lower()) for word in words: word_count[word] += 1 return word_count"},{"question":"Create a function that receives an array of integers and returns the average of these integers.","solution":"def average(numbers): Returns the average of a list of integers. :param numbers: List of integers :return: float - average of the integers if not numbers: return 0.0 return sum(numbers) / len(numbers)"},{"question":"Create a function that takes a list of integers and a divisor. It should return a list of lists containing elements from the original list that are divisible by the divisor. Additionally, the elements within each sublist should be in the order they appear in the original list.","solution":"def group_by_divisibility(numbers, divisor): Returns a list of lists, where each sublist contains elements from the original list that are divisible by the divisor, maintaining order of appearance. Arguments: numbers -- list of integers divisor -- integer divisor Returns: list of lists containing elements divisible by the divisor result = [] group = [] for number in numbers: if number % divisor == 0: group.append(number) else: if group: result.append(group) group = [] if group: result.append(group) return result"},{"question":"Create a function that takes in a list of integers as an argument and returns the sum of all unique integers in the list. A unique integer is an integer that appears only once in the list. If there are no unique integers, the function should return 0.","solution":"def sum_of_unique_numbers(numbers): Takes in a list of integers and returns the sum of all unique integers in the list. A unique integer is an integer that appears only once in the list. If there are no unique integers, the function returns 0. :param numbers: List of integers :return: Sum of unique integers from collections import Counter number_counts = Counter(numbers) sum_unique = sum(num for num, count in number_counts.items() if count == 1) return sum_unique if sum_unique != 0 else 0"},{"question":"Create a function that takes an array of integers and returns the missing number in the sequence from 1 to n+1, where n is the length of the array.","solution":"def find_missing_number(array): Finds the missing number in the sequence from 1 to n+1, where n is the length of the array. :param array: List of integers :return: The missing integer n = len(array) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(array) return total_sum - actual_sum"},{"question":"Create a function that calculates the frequency of all characters in a given string, ignoring all empty spaces and case sensitivity. The function should return a dictionary where the keys are the characters and the values are the frequencies of those characters.","solution":"def character_frequency(s): Calculates the frequency of all characters in a given string, ignoring all empty spaces and case sensitivity. Parameters: s (str): The input string. Returns: dict: A dictionary where the keys are the characters and the values are the frequencies of those characters. frequency = {} s = s.replace(\\" \\", \\"\\").lower() for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function that takes an integer as an input and checks if it is divisible by 2 and by 3. If it is, return \\"The number is divisible by both 2 and 3.\\" If not, return \\"The number is not divisible by both 2 and 3.\\"","solution":"def check_divisibility(number): Checks if the number is divisible by both 2 and 3. Returns a corresponding message. if number % 2 == 0 and number % 3 == 0: return \\"The number is divisible by both 2 and 3.\\" else: return \\"The number is not divisible by both 2 and 3.\\""},{"question":"Create a function that takes two arrays as input, each containing a sequence of numbers. The function should return a new array that is the result of multiplying corresponding elements from the two input arrays.","solution":"def multiply_arrays(arr1, arr2): Multiplies corresponding elements from two input arrays and returns a new array with the results. Parameters: arr1 (list): The first input array containing numbers. arr2 (list): The second input array containing numbers. Returns: list: A new array containing the products of corresponding elements from arr1 and arr2. if len(arr1) != len(arr2): raise ValueError(\\"Input arrays must have the same length.\\") return [a * b for a, b in zip(arr1, arr2)]"},{"question":"Create a function that calculates the sum of all the multiples of 3 or 5 below a given number \`n\`. This function should be efficient and should consider both positive and negative values for \`n\`. If \`n\` is less than or equal to 0, the function should return 0.","solution":"def sum_of_multiples(n): Returns the sum of all multiples of 3 or 5 below the given number n. if n <= 0: return 0 multiples_sum = 0 for i in range(1, n): if i % 3 == 0 or i % 5 == 0: multiples_sum += i return multiples_sum"},{"question":"Create a function that takes an integer as input and returns the sum of all even numbers between 0 and the input integer, including the integer itself if it's even. The function should be efficient and avoid unnecessary computations.","solution":"def sum_even_numbers_up_to(n): Returns the sum of all even numbers between 0 and n, including n if it's even. if n < 0: return 0 return sum(i for i in range(0, n+1, 2))"},{"question":"Create a function that takes in two strings as input, returns if and only if the two strings are \\"anagrams\\". An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.","solution":"def are_anagrams(s1, s2): Returns True if s1 and s2 are anagrams, False otherwise. return sorted(s1) == sorted(s2)"},{"question":"Create a function that generates a list of all prime numbers up to a given number N. If N is less than 2, the function should return an empty list.","solution":"def generate_primes(N): Generate a list of all prime numbers up to a given number N. :param N: Integer, the upper limit up to which to generate prime numbers. :return: List of prime numbers up to N. if N < 2: return [] sieve = [True] * (N + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(N**0.5) + 1): if sieve[start]: for multiple in range(start*start, N + 1, start): sieve[multiple] = False return [num for num in range(2, N + 1) if sieve[num]]"},{"question":"Create a function that takes a list of numbers and returns a list of tuples, where each tuple contains a number from the list and its square.","solution":"def list_with_squares(numbers): Takes a list of numbers and returns a list of tuples, where each tuple contains a number from the list and its square. Args: numbers: List of numbers. Returns: List of tuples. return [(num, num ** 2) for num in numbers]"},{"question":"Create a function that will count how many characters are in a string (excluding spaces).","solution":"def count_characters(s): Returns the number of characters in a string excluding spaces. return len(s.replace(\\" \\", \\"\\"))"},{"question":"Create a function that takes an integer \`n\` as input and returns the floor value of the sum of the squares of the first \`n\` natural numbers.","solution":"import math def sum_of_squares_floor(n): Returns the floor value of the sum of the squares of the first n natural numbers. if n < 1: return 0 sum_squares = sum(i**2 for i in range(1, n + 1)) return math.floor(sum_squares)"},{"question":"Create a function that takes a single parameter \`n\` which represents the number of odd numbers to generate. The function should return a list of the first \`n\` odd numbers. For example, if \`n\` is 3, the function should return \`[1, 3, 5]\`.","solution":"def generate_odd_numbers(n): Returns a list of the first n odd numbers. Parameters: n (int): The number of odd numbers to generate. Returns: list: A list of the first n odd numbers. return [2*i + 1 for i in range(n)]"},{"question":"Create a function that takes in a list of integers and returns a list of strings, where each string represents the binary equivalent of the integer preceded by \\"0b\\". For example, if the input list is [1, 2, 3], the output should be ['0b1', '0b10', '0b11'].","solution":"def int_list_to_binary_list(int_list): Takes in a list of integers and returns a list of strings, where each string represents the binary equivalent of the integer preceded by \\"0b\\". :param int_list: List of integers :return: List of binary strings return [bin(num) for num in int_list]"},{"question":"Create a function that takes in two strings consisting only of '(' and ')'. The function should return true if every open bracket '(' has a corresponding close bracket ')' in some order, and false otherwise. The odds of '(' and ')' are equal.","solution":"def check_brackets(str1, str2): This function takes two strings consisting of '(' and ')'. It returns True if every open bracket '(' has a corresponding close bracket ')' in some order, and False otherwise. combined = str1 + str2 return combined.count('(') == combined.count(')')"},{"question":"Create a function that determines whether any given integer n is a power of 2. If the integer is a power of 2, it should return True. Otherwise, it should return False.","solution":"def is_power_of_two(n): Determines whether the given integer n is a power of 2. Returns True if n is a power of 2, False otherwise. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Create a function that automatically classifies a list of email addresses based on their domain. For example, classify emails as '@gmail.com', '@yahoo.com', '@outlook.com' etc.","solution":"def classify_emails(email_list): Classifies a list of email addresses based on their domain. Args: email_list (list): List of email addresses. Returns: dict: Dictionary with email domains as keys and lists of corresponding email addresses as values. email_dict = {} for email in email_list: domain = email.split('@')[-1] if domain not in email_dict: email_dict[domain] = [] email_dict[domain].append(email) return email_dict"},{"question":"Create a function that takes a list of integers as input and returns a new list containing the largest and smallest numbers in the original list. The function should handle any list of integers, including empty lists and lists with duplicate numbers.","solution":"def find_largest_and_smallest(nums): Returns a list containing the largest and smallest numbers in the input list. If the input list is empty, returns an empty list. if not nums: return [] largest = max(nums) smallest = min(nums) return [largest, smallest]"},{"question":"Create a function that takes in the radius of a circle and returns the area of the circle. Use the formula: area = π * radius^2.","solution":"import math def area_of_circle(radius): Returns the area of a circle given its radius. return math.pi * (radius ** 2)"},{"question":"Create a function that takes an integer as an argument and returns the integer with its digits reversed. If the integer is negative, reverse the digits without the '-' sign at the beginning, and then add the '-' sign back at the end.","solution":"def reverse_integer(n): Returns the integer with its digits reversed. If the integer is negative, reverses the digits without the '-' sign and then adds it back. str_n = str(n) if n < 0: reversed_str = '-' + str_n[:0:-1] else: reversed_str = str_n[::-1] return int(reversed_str)"},{"question":"Create a function that computes the sum of all numbers in a list, excluding any numbers that are greater than 50.","solution":"def sum_excluding_above_50(numbers): Computes the sum of all numbers in a list, excluding any numbers that are greater than 50. Parameters: numbers (list of int/float): List of numbers to sum. Returns: int/float: The sum of the included numbers. return sum(num for num in numbers if num <= 50)"},{"question":"Create a function that takes a string of space-separated integers and returns the sum of the even numbers in the list.","solution":"def sum_even_numbers(numbers): Takes a string of space-separated integers and returns the sum of the even numbers. :param numbers: str, string of space-separated integers :return: int, sum of the even integers numbers_list = map(int, numbers.split()) even_sum = sum(num for num in numbers_list if num % 2 == 0) return even_sum"},{"question":"Create a function that takes a positive integer n and returns the sum of all divisors of n excluding n itself. This is essentially finding a way to calculate the proper divisors of n and sum them up.","solution":"def sum_of_divisors_excluding_n(n): Returns the sum of all divisors of n excluding n itself. if n <= 0: return 0 divisors_sum = 0 for i in range(1, n): if n % i == 0: divisors_sum += i return divisors_sum"},{"question":"Create a function that can determine the most frequently occurring letter in a string.","solution":"from collections import Counter def most_frequent_letter(s): Determines the most frequently occurring letter in a string. If there are multiple letters with the same maximum frequency, returns the first one. # Filter only alphabetic characters and convert to lowercase filtered_s = [char.lower() for char in s if char.isalpha()] if not filtered_s: return None # Count frequency of each letter letter_count = Counter(filtered_s) # Find the letter with the maximum frequency most_common_letter = max(letter_count, key=letter_count.get) return most_common_letter"},{"question":"Create a function that takes two strings as input and returns a sorted string containing the unique common characters between the two strings. The function should ignore case sensitivity, handle spaces, and ensure the output string contains each character only once.","solution":"def sorted_unique_common_chars(str1, str2): Takes two strings and returns a sorted string containing unique common characters, ignoring case and spaces. # Convert both strings to lower case and strip spaces str1 = ''.join(str1.lower().split()) str2 = ''.join(str2.lower().split()) # Find common characters common_chars = set(str1).intersection(set(str2)) # Return sorted string of unique common characters return ''.join(sorted(common_chars))"},{"question":"Create a function that outputs the Fibonacci sequence up to the nth term. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first six terms of the Fibonacci sequence are 0, 1, 1, 2, 3, 5. What is the function's purpose?","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to the nth term. Parameters: n (int): The number of terms in the Fibonacci sequence to return. Returns: list: A list containing the Fibonacci sequence up to the nth term. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that takes in two list of integers as input and returns the intersection of these two lists as a list of integers. The intersection should contain only unique elements. For example, if list1 = [1, 2, 2, 3] and list2 = [2, 2, 3, 4], the function should return [2, 3].","solution":"def intersection(list1, list2): Returns the intersection of list1 and list2, containing only unique elements. # Convert lists to sets to get unique elements and find the intersection return list(set(list1) & set(list2))"},{"question":"Create a function that takes in a string and returns a new string with each character doubled. For example, the string \\"hello\\" should become \\"hheelllloo\\".","solution":"def double_characters(s): Takes a string s and returns a new string with each character doubled. return ''.join([char * 2 for char in s])"},{"question":"Create a function that prints the elements of a list in reverse order without modifying the original list.","solution":"def print_reverse(lst): Prints the elements of the list in reverse order without modifying the original list. for item in lst[::-1]: print(item)"},{"question":"Create a function that takes an array of numbers and returns a new array where all occurrences of the number \`n\` are replaced with \`m\`.","solution":"def replace_occurrences(arr, n, m): Returns a new array where all occurrences of the number \`n\` are replaced with \`m\`. :param arr: List of integers. :param n: The integer to be replaced. :param m: The integer to replace with. :return: A new list with replacements done. return [m if x == n else x for x in arr]"},{"question":"Create a function that takes a dictionary and returns a new dictionary with all key-value pairs where the value is a sublist that only contains elements that are greater than a given threshold.","solution":"def filter_dict_by_value_sublist(input_dict, threshold): Returns a new dictionary with all key-value pairs where the value is a sublist that only contains elements greater than the given threshold. :param input_dict: Dict[str, List[int]] - Input dictionary with list values :param threshold: int - Threshold value to filter sublist elements :return: Dict[str, List[int]] - New dictionary with filtered sublists return {k: [num for num in v if num > threshold] for k, v in input_dict.items()}"},{"question":"Create a function that generates a list of all possible binary strings of a given length, where each string contains the same number of 1s and 0s.","solution":"def generate_balanced_binary_strings(n): Generates all possible binary strings of length \`n\` with an equal number of 1s and 0s. Assumes n is even. Parameters: - n (int): Length of the binary strings. Returns: - List[str]: A list containing all such binary strings. from itertools import permutations if n % 2 != 0: return [] half_ones = n // 2 template = '1' * half_ones + '0' * half_ones unique_permutations = set(permutations(template, n)) return [''.join(p) for p in unique_permutations]"},{"question":"Create a function that checks if a given string represents a valid datetime. The datetime string's format should comply with a specified format, such as 'YYYY-MM-DD' or 'MM-DD-YYYY', and the day of the week matches the date. For example, '2023-04-01' is a valid datetime string in 'YYYY-MM-DD' format if April 1st, 2023, falls on a Monday.","solution":"from datetime import datetime def check_valid_datetime(date_string, date_format, expected_day): Checks if a given date string matches the specified format and the day of the week. Args: date_string (str): The date string to be checked. date_format (str): The format of the date string. expected_day (str): The expected day of the week (e.g., 'Monday', 'Tuesday'). Returns: bool: True if the date string matches the format and the day of the week matches the date, otherwise False. try: date_obj = datetime.strptime(date_string, date_format) actual_day = date_obj.strftime('%A') return actual_day == expected_day except ValueError: return False"},{"question":"Create a function that takes an array of integers and returns an array of the sum of adjacent elements.","solution":"def sum_adjacent_elements(arr): Takes an array of integers and returns an array of the sum of adjacent elements. Args: arr (list): A list of integers. Returns: list: A list where each element is the sum of adjacent elements from the input list. if len(arr) < 2: return [] result = [] for i in range(len(arr) - 1): result.append(arr[i] + arr[i+1]) return result"},{"question":"Create a function that sorts a list of numbers in ascending order using the insertion sort algorithm. Explain each step of the sorting process.","solution":"def insertion_sort(arr): Sorts a list of numbers in ascending order using the insertion sort algorithm. Parameters: arr (list): A list of numbers to be sorted. Returns: list: The sorted list in ascending order. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Create a function that takes in a string and returns the string with all punctuation marks removed, leaving only alphanumeric characters and spaces.","solution":"import string def remove_punctuation(input_string): Removes all punctuation marks from the input string, leaving only alphanumeric characters and spaces. return ''.join(char for char in input_string if char.isalnum() or char.isspace())"},{"question":"Create a function that accepts the input number, input2, and then generates a message that says \\"The number is even\\" or \\"The number is odd\\", depending on the value of input2. If input2 is 2, then the input number will be checked to see if it is even. If input2 is any other value, regardless of the input number, a message should be returned that says \\"The number is odd\\".","solution":"def check_number_parity(number, input2): Checks the parity of the input number based on input2 value. If input2 is 2, returns \\"The number is even\\" if number is even, otherwise returns \\"The number is odd\\". For any other value of input2, always returns \\"The number is odd\\". if input2 == 2: if number % 2 == 0: return \\"The number is even\\" else: return \\"The number is odd\\" else: return \\"The number is odd\\""},{"question":"Create a function that takes a string and converts it to an integer. If the string does not contain any digits, the function should return \`/errors\`. If the string contains multiple digits, the function should return the sum of the digits. For example, if the input string is \\"a1b2c3\\", the function should return \`6\`.","solution":"def sum_of_digits(s): Converts a string to sum of its digits. If the string doesn't contain any digits, returns '/errors'. digits = [int(char) for char in s if char.isdigit()] if not digits: return '/errors' return sum(digits)"},{"question":"Create a function that rotates the elements of an array to the right by k positions. If k is greater than the length of the array, it should perform a circular rotation and continue from the start of the array.","solution":"def rotate_array(arr, k): Rotates the elements of arr to the right by k positions. Parameters: arr (list): The list of elements to rotate. k (int): The number of positions to rotate the list by. Returns: list: The rotated list. if not arr: return arr k = k % len(arr) return arr[-k:] + arr[:-k]"},{"question":"Create a function that takes a string as input and returns the number of times a specific substring occurs within the string. You should also handle case sensitivity and include an option to ignore white spaces.","solution":"def substring_count(s, substring, case_sensitive=True, ignore_whitespace=False): Returns the number of times a specific substring occurs within the string. Parameters: s (str): The string to search within. substring (str): The substring to search for. case_sensitive (bool): Whether the search is case sensitive. Default is True. ignore_whitespace (bool): Whether to ignore white spaces. Default is False. Returns: int: The count of occurrences of the substring. if not case_sensitive: s = s.lower() substring = substring.lower() if ignore_whitespace: s = ''.join(s.split()) substring = ''.join(substring.split()) return s.count(substring)"},{"question":"Create a function that takes in a string of digits (e.g., \\"123\\") and returns the formatted string with every three digits separated by commas. For example, the input \\"1234567\\" should return \\"1,234,567\\". If the string has fewer than three digits, it should return the original string.","solution":"def format_number_with_commas(number_string): Formats a string of digits by adding commas every three digits. Parameters: - number_string (str): The string of digits to format. Returns: - str: The formatted string with commas separating every three digits. if len(number_string) <= 3: return number_string # Reversing the string to facilitate insertion of commas reversed_number = number_string[::-1] chunks = [reversed_number[i:i+3] for i in range(0, len(reversed_number), 3)] formatted_number = ','.join(chunks)[::-1] return formatted_number"},{"question":"Create a function that can evaluate a postfix expression.","solution":"def evaluate_postfix(expression): Evaluates a given postfix expression and returns the result. :param expression: a string containing the postfix expression, where tokens are separated by spaces. :return: the evaluation result as a number. stack = [] for token in expression.split(): if token.isdigit(): # if operand, push to stack stack.append(int(token)) else: # if operator, pop values, apply operator and push result val2 = stack.pop() val1 = stack.pop() if token == '+': stack.append(val1 + val2) elif token == '-': stack.append(val1 - val2) elif token == '*': stack.append(val1 * val2) elif token == '/': stack.append(int(val1 / val2)) # ensure integer division return stack.pop()"},{"question":"Create a function that calculates the area of a circle given its radius. The function should take the radius as an input and return the area. The area of a circle can be calculated using the formula ( A = pi r^2 ).","solution":"import math def area_of_circle(radius): Calculates and returns the area of a circle given its radius. :param radius: The radius of the circle :return: The area of the circle if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * radius ** 2"},{"question":"Create a function that determines whether a given number is a perfect square. If the number is a perfect square, return the string \\"yes\\". Otherwise, return the string \\"no\\". A perfect square is an integer that is the square of an integer.","solution":"import math def is_perfect_square(n): Determines whether a given number is a perfect square. Returns 'yes' if the number is a perfect square, and 'no' otherwise. if n < 0: return \\"no\\" sqrt_n = math.isqrt(n) if sqrt_n * sqrt_n == n: return \\"yes\\" return \\"no\\""},{"question":"Create a function that takes an integer n and returns the factorial of n using a recursive approach. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. For example, factorial(5) should return 120 because 5! = 5 * 4 * 3 * 2 * 1 = 120.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that calculates the factorial of a number. The function should use recursion to compute the factorial for any non-negative integer.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that returns the Mth smallest number in an array A for a zero-based index array. The function should also handle duplicate values and ensure the array is not empty. If the array contains less than M elements, the function should return an error message.","solution":"def mth_smallest_number(arr, m): Returns the Mth smallest number in the array. Parameters: arr (list): List of integers that can contain duplicates. m (int): Zero-based index to find the Mth smallest number. Returns: int/str: The Mth smallest number or an error message if array is smaller than M + 1. if len(arr) <= m: return \\"Error: M is out of bounds\\" sorted_arr = sorted(arr) return sorted_arr[m]"},{"question":"Create a function that takes two arguments, a list of integers and another single integer, and returns a list of all integers from the list that are greater than the single integer. How can this function be implemented in python?","solution":"def filter_greater_than(nums, threshold): Returns a list of all integers from the list \`nums\` that are greater than \`threshold\`. Parameters: nums (list): A list of integers. threshold (int): The threshold integer. Returns: list: A list of integers from \`nums\` that are greater than \`threshold\`. return [num for num in nums if num > threshold]"},{"question":"Create a function that takes an array of integers and returns the indices of the two numbers such that they add up to a specific target. For instance, if you have an array and a target sum of 9, the function should return \`[2, 7]\` because the numbers at indices 2 and 7 are 5 and 4 respectively, and they add up to 9.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target. Parameters: nums (list of int): The array of integers. target (int): The target sum. Returns: list of int: The indices of the two numbers. num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: return [num_dict[complement], i] num_dict[num] = i return []"},{"question":"Create a function that prints the length of a list provided as an argument. If the list is empty, the function should print a message saying \\"The list is empty.\\"","solution":"def print_list_length(lst): Prints the length of the list. If the list is empty, prints \\"The list is empty\\" if len(lst) == 0: print(\\"The list is empty.\\") else: print(f\\"The length of the list is {len(lst)}\\")"},{"question":"Create a function that takes a list of integers and returns the sum of all the integers in the list. Ensure your function includes error handling for non-integer types in the list.","solution":"def sum_of_integers(int_list): Returns the sum of all integers in the list. Raises a ValueError if a non-integer is found in the list. total_sum = 0 for item in int_list: if not isinstance(item, int): raise ValueError(\\"List must contain only integers\\") total_sum += item return total_sum"},{"question":"Create a function that takes a positive integer n as input and returns a string result stating whether the number is \\"Evenly divisible by 3, 5, and 7,\\" \\"Evenly divisible by 3 and 5 only,\\" \\"Evenly divisible by 3 and 7 only,\\" \\"Evenly divisible by 5 and 7 only,\\" \\"Evenly divisible by 3 only,\\" \\"Evenly divisible by 5 only,\\" \\"Evenly divisible by 7 only,\\" or \\"Not divisible by 3, 5, or 7.\\"","solution":"def check_divisibility(n): Returns a string result stating whether a positive integer n is evenly divisible by 3, 5, and/or 7. divisible_by_3 = (n % 3 == 0) divisible_by_5 = (n % 5 == 0) divisible_by_7 = (n % 7 == 0) if divisible_by_3 and divisible_by_5 and divisible_by_7: return \\"Evenly divisible by 3, 5, and 7\\" elif divisible_by_3 and divisible_by_5: return \\"Evenly divisible by 3 and 5 only\\" elif divisible_by_3 and divisible_by_7: return \\"Evenly divisible by 3 and 7 only\\" elif divisible_by_5 and divisible_by_7: return \\"Evenly divisible by 5 and 7 only\\" elif divisible_by_3: return \\"Evenly divisible by 3 only\\" elif divisible_by_5: return \\"Evenly divisible by 5 only\\" elif divisible_by_7: return \\"Evenly divisible by 7 only\\" else: return \\"Not divisible by 3, 5, or 7\\""},{"question":"Create a function that receives \`n\` natural numbers and returns the sum of their last digits.","solution":"def sum_of_last_digits(*numbers): Returns the sum of the last digits of the given natural numbers. return sum(int(str(num)[-1]) for num in numbers)"},{"question":"Create a function that takes in an array of integers and a positive integer \`m\`. The function should return the maximum sum of any \`m\` consecutive numbers in the array. If the array length is less than \`m\`, the function should return -1.","solution":"def max_sum_consecutive(arr, m): Returns the maximum sum of any \`m\` consecutive numbers in the array. If the array length is less than \`m\`, returns -1. if len(arr) < m: return -1 max_sum = sum(arr[:m]) current_sum = max_sum for i in range(m, len(arr)): current_sum += arr[i] - arr[i-m] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that reverse the direction of characters in a string using Python. The function should reverse only the characters in each word of the input string, not the order of the words themselves.","solution":"def reverse_characters_in_words(input_string): Reverses the characters in each word of the input string. Parameters: input_string (str): The input string Returns: str: The string with characters in each word reversed return ' '.join(word[::-1] for word in input_string.split())"},{"question":"Create a function that takes two lists and a target value and returns all the pairs of elements from the two lists whose sum equals the target value. The function should handle both integers and floating-point numbers.","solution":"def find_pairs(lst1, lst2, target): Returns all pairs of elements from lst1 and lst2 whose sum equals target. pairs = [] for num1 in lst1: for num2 in lst2: if num1 + num2 == target: pairs.append((num1, num2)) return pairs"},{"question":"Create a function that takes a single integer as input and returns the largest possible number by permuting its digits. For example, if the input is 123, the output should be 321.","solution":"def largest_permutation(n): Returns the largest possible number by permuting the digits of the input number n. # Convert the number to a string to easily manipulate the digits digits = str(n) # Sort the digits in descending order sorted_digits = sorted(digits, reverse=True) # Join the sorted digits to form the largest possible number largest_number = ''.join(sorted_digits) # Convert the result back into an integer return int(largest_number)"},{"question":"Create a function that takes a list of strings and returns a list of integers where each integer is the length of the corresponding string.","solution":"def string_lengths(strings): Returns a list of integers where each integer is the length of the corresponding string in the input list. return [len(s) for s in strings]"},{"question":"Create a function that takes the area of a circle and returns the radius of the circle.","solution":"import math def radius_from_area(area): Returns the radius of a circle given its area. Parameters: area (float): The area of the circle. Returns: float: The radius of the circle. return math.sqrt(area / math.pi)"},{"question":"Create a function that squares a number and returns the result.","solution":"def square(number): Returns the square of the given number. return number ** 2"},{"question":"Create a function that returns the largest common divisor (GCD) of two numbers. Use the Euclidean algorithm to calculate the GCD. The function should take two integers as input and return their GCD as an integer. Additionally, write a simple test to verify the function using two known GCD values.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return abs(a)"},{"question":"Create a function that generates a string of a given length, filled with a specific character. For example, if the length is 5 and the character is 'x', the function should return 'xxxxx'. If the character is '*' or '#', the function should return a string of '*' or '#' repeated that many times. The function should handle any given character and length, but should limit the length of the output to at most 100 characters to prevent the output from being too large. If the length is 100 but the character is long, it should only return as many characters as would fill the string to exactly 100 characters.","solution":"def generate_string(length, char): Generate a string of a given length filled with a specific character. Parameters: length (int): The length of the generated string. char (str): The character to fill the string with. Returns: str: A string of the given length filled with the specified character, limited to 100 characters. if char == \\"\\": return \\"\\" limit_length = min(length, 100) return char * limit_length"},{"question":"Create a function that takes two arrays as input and returns a tuple containing the element-wise sum of the arrays, the element-wise product of the arrays, and the element-wise difference between the arrays. Ensure the function handles arrays of unequal lengths by extending the shorter array with zeros.","solution":"def array_operations(a, b): Takes two arrays of integers and returns a tuple containing: 1. Element-wise sum of the arrays 2. Element-wise product of the arrays 3. Element-wise difference (a - b) of the arrays If arrays are of unequal lengths, extend the smaller array with zeros. max_len = max(len(a), len(b)) a_extended = a + [0] * (max_len - len(a)) b_extended = b + [0] * (max_len - len(b)) elementwise_sum = [a_extended[i] + b_extended[i] for i in range(max_len)] elementwise_product = [a_extended[i] * b_extended[i] for i in range(max_len)] elementwise_difference = [a_extended[i] - b_extended[i] for i in range(max_len)] return (elementwise_sum, elementwise_product, elementwise_difference)"},{"question":"Create a function that will generate all prime numbers up to a given integer, n. If the number entered by the user is less than 2, the function should display a message indicating that there are no prime numbers less than 2.","solution":"def generate_primes(n): Returns a list of all prime numbers up to n (inclusive). If n is less than 2, returns an empty list and a message indicating there are no prime numbers less than 2. if n < 2: return [], \\"There are no prime numbers less than 2.\\" primes = [] for possible_prime in range(2, n + 1): is_prime = True for num in range(2, int(possible_prime ** 0.5) + 1): if possible_prime % num == 0: is_prime = False break if is_prime: primes.append(possible_prime) return primes, None"},{"question":"Create a function that takes in an array \`arr\` and returns the most frequent element in the array. If there are multiple elements with the same highest frequency, return the smallest one. If the array is empty, return \`None\`.","solution":"def most_frequent_element(arr): Returns the most frequent element in the array. If there are multiple elements with the same highest frequency, returns the smallest one. If the array is empty, returns None. if not arr: return None frequency = {} for elem in arr: if elem in frequency: frequency[elem] += 1 else: frequency[elem] = 1 max_freq = max(frequency.values()) most_frequent_items = [k for k, v in frequency.items() if v == max_freq] return min(most_frequent_items)"},{"question":"Create a function that takes a list of integers as input and returns the largest number that can be formed by concatenating the integers in the list. The function should work with Python.","solution":"from functools import cmp_to_key def largest_number(nums): if not all(map(lambda x: isinstance(x, int), nums)): raise ValueError(\\"All elements of the input list must be integers.\\") str_nums = list(map(str, nums)) def compare(x, y): if x+y > y+x: return -1 elif x+y < y+x: return 1 else: return 0 str_nums.sort(key=cmp_to_key(compare)) largest_num = ''.join(str_nums) return '0' if largest_num[0] == '0' else largest_num"},{"question":"Create a function that takes two integers as input and returns their sum and their difference.","solution":"def sum_and_diff(a, b): Returns the sum and difference of a and b as a tuple. return (a + b, a - b)"},{"question":"Create a function that takes as input a string of text and returns the number of vowels (a, e, i, o, u) and consonants in the text. Output the result as a tuple \`(number_of_vowels, number_of_consonants)\`. Consider both uppercase and lowercase vowels.","solution":"def count_vowels_and_consonants(text): Returns the number of vowels and consonants in the input text. vowels = 'aeiouAEIOU' number_of_vowels = 0 number_of_consonants = 0 for char in text: if char.isalpha(): if char in vowels: number_of_vowels += 1 else: number_of_consonants += 1 return (number_of_vowels, number_of_consonants)"},{"question":"Create a function that takes an array and returns a new array with all the elements sorted.","solution":"def sort_array(arr): Returns a new array with all the elements of the input array sorted. return sorted(arr)"},{"question":"Create a function that arranges a sequence of integers into the smallest possible number by rearranging their digits. For example, given the array [3, 30, 34, 5, 9], the function should return \\"3033459\\".","solution":"from functools import cmp_to_key def to_smallest_number(nums): Arrange a sequence of integers into the smallest possible number by rearranging their digits. def compare(x, y): if x + y < y + x: return -1 elif x + y > y + x: return 1 else: return 0 nums_str = list(map(str, nums)) nums_sorted = sorted(nums_str, key=cmp_to_key(compare)) return ''.join(nums_sorted)"},{"question":"Create a function that simulates a timed task. The function should take two arguments: a function \`task\` and a timeout period \`timeout_seconds\`. The function \`task\` is the function that needs to be executed after the timeout, and \`timeout_seconds\` is the time in seconds the function should wait before executing \`task\`. The function should return a handle for the timed task, and you should provide a method to cancel the task using this handle.","solution":"import threading class TimedTaskHandle: def __init__(self, timer): self._timer = timer def cancel(self): Cancel the timed task self._timer.cancel() def timed_task(task, timeout_seconds): Simulates a timed task that executes after a specified timeout period. Args: task (callable): The function to be executed after the timeout. timeout_seconds (int or float): The time in seconds the function should wait before executing task. Returns: TimedTaskHandle: A handle to the timed task. timer = threading.Timer(timeout_seconds, task) timer.start() return TimedTaskHandle(timer)"},{"question":"Create a function that takes two arguments, \`start\` and \`end\`, and returns a list of all even numbers between \`start\` and \`end\` (inclusive). If \`start\` is greater than \`end\`, the function should still return the even numbers in ascending order. For example, \`even_numbers(2, 8)\` should return \`[2, 4, 6, 8]\`, and \`even_numbers(8, 2)\` should also return \`[2, 4, 6, 8]\`.","solution":"def even_numbers(start, end): Returns a list of all even numbers between start and end (inclusive), sorted in ascending order. if start > end: start, end = end, start return [num for num in range(start, end + 1) if num % 2 == 0]"},{"question":"Create a function that generates a random hex color in Python. The function should return the color as a string that starts with a '#' and includes 6 hexadecimal characters.","solution":"import random def generate_random_hex_color(): Generate a random hex color. Returns: str: The random hex color as a string starting with '#' and followed by 6 hexadecimal characters. return \\"#{:06x}\\".format(random.randint(0, 0xFFFFFF))"},{"question":"Create a function that takes in two strings and returns a tuple containing the two strings in alphabetical order.","solution":"def alphabetical_order(s1, s2): Returns a tuple containing the two strings in alphabetical order. return (s1, s2) if s1 <= s2 else (s2, s1)"},{"question":"Create a function that takes in a list of numbers as an argument. It should return a list of the square root of each number. If the square root of a number is not an integer, round it to the nearest integer. If a number in the list is negative, ignore it and move to the next number.","solution":"import math def sqrt_list(numbers): Returns a list of the square root of each number in the input list. Neglects negative numbers. Rounds the square root to the nearest integer if it's not already integer. Parameters: numbers (list): A list of numbers Returns: list: A list of the square roots (rounded if necessary) result = [] for number in numbers: if number >= 0: sqrt_val = math.sqrt(number) rounded_sqrt = round(sqrt_val) result.append(rounded_sqrt) return result"},{"question":"Create a function that takes a string as input and outputs the number of times each character appears in the string. The function should be case-sensitive and should ignore spaces.","solution":"def character_count(s): Returns a dictionary with the count of each character in the string s. The function is case-sensitive and ignores spaces. count = {} for char in s: if char != ' ': count[char] = count.get(char, 0) + 1 return count"},{"question":"Create a function that takes in a list of integers and returns a new list with each element multiplied by 2. For example, if the input list is [1, 2, 3], the output should be [2, 4, 6].","solution":"def double_elements(input_list): Takes a list of integers and returns a new list with each element multiplied by 2. :param input_list: List of integers :return: List of integers with each element multiplied by 2 return [x * 2 for x in input_list]"},{"question":"Create a function that , given an integer, returns the maximum number of 1 bits that can be obtained by swapping any two bits in the binary representation of the number. The function should accept an integer as input and return an integer as output. The function should be efficient, ideally with a time complexity better than O(n^2).","solution":"def max_1_bits_after_swap(n): Given an integer, returns the maximum number of 1 bits that can be obtained by swapping any two bits in the binary representation of the number. # Convert integer to binary string and remove the '0b' prefix binary_rep = bin(n)[2:] # Count the number of 1s in the binary representation count_1s = binary_rep.count('1') # If the number of 1s is zero or the length of the binary string is 1, # no swap will change the number of 1s. if count_1s == 0 or len(binary_rep) == 1: return count_1s # The maximum number of 1 bits we can get by swapping is equal to the # already existing number of 1 bits, because no swap operation can # increase the number of 1 bits. return count_1s"},{"question":"Create a function that takes an integer as an argument and returns the sum of the first N natural numbers using a loop. For example, if the input is 5, the function should return 15 (1 + 2 + 3 + 4 + 5).","solution":"def sum_of_natural_numbers(n): Returns the sum of the first N natural numbers using a loop. sum = 0 for i in range(1, n + 1): sum += i return sum"},{"question":"Create a function that takes an array of integers as an argument and returns the maximum value among those integers. If the array is empty, the function should return \`None\`.","solution":"def find_maximum(arr): Returns the maximum value in the array. If the array is empty, returns None. if not arr: return None return max(arr)"},{"question":"Create a function that takes an array of integers and returns a new array where each element is the sum of itself and its corresponding element in the original array (Haskell).","solution":"def sum_elements_with_self(arr): Takes an array of integers and returns a new array where each element is the sum of itself and its corresponding element in the original array. Essentially doubling each element. return [x * 2 for x in arr]"},{"question":"Create a function that takes a string as input and returns the number of unique characters in the string. The function should ignore case sensitivity and count only alphanumeric characters (i.e., ignore punctuation and spaces).","solution":"def count_unique_characters(input_string): Returns the number of unique alphanumeric characters in the string, ignoring case sensitivity and punctuation/spaces. clean_string = ''.join(char.lower() for char in input_string if char.isalnum()) unique_characters = set(clean_string) return len(unique_characters)"},{"question":"Create a function that takes a string as input and returns the last character of the string.","solution":"def get_last_character(s): Returns the last character of the string s. if s: # Check if the string is not empty return s[-1] return None # Return None if the string is empty"},{"question":"Create a function that takes a date range and calculates the number of days between two dates, not including the start and end dates.","solution":"from datetime import datetime def days_between_dates(start_date, end_date): Calculate the number of days between two dates, not including the start and end dates. Parameters: start_date (str): Start date in the format 'YYYY-MM-DD' end_date (str): End date in the format 'YYYY-MM-DD' Returns: int: Number of days between the two dates, not including the start and end dates. start = datetime.strptime(start_date, '%Y-%m-%d') end = datetime.strptime(end_date, '%Y-%m-%d') # Calculate the delta between the two dates delta = end - start # Subtract 2 to exclude the start and end dates days_between = max(delta.days - 2, 0) return days_between"},{"question":"Create a function that takes a string as an argument and returns the number of unique characters in the string, ignoring case sensitivity. For example, the string 'HelloWorld' would have 7 unique characters ('H', 'e', 'l', 'o', 'W', 'r', 'd'). Make sure the function handles empty strings and strings with special characters as well.","solution":"def unique_characters(s): Returns the number of unique characters in the given string, ignoring case sensitivity. Parameters: s (str): The input string Returns: int: The number of unique characters return len(set(s.lower()))"},{"question":"Create a function that generates a random string of a given length using \\"a\\" to \\"z\\".","solution":"import random import string def generate_random_string(length): Returns a random string of the given length using 'a' to 'z'. Parameters: length (int): The length of the random string to generate. Returns: str: A random string of the specified length. if length < 0: raise ValueError(\\"Length cannot be negative\\") return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))"},{"question":"Create a function that takes in a string and returns the number of times a character appears consecutively. For example, given the string \\"WWWWWWWWWWWWBWWWWWWWWWR\\", the function should return 11 because the 'W' character appears 11 times consecutively at the beginning.","solution":"def count_consecutive_chars(s): Returns the number of times the first character appears consecutively in the string s. if not s: return 0 first_char = s[0] count = 0 for char in s: if char == first_char: count += 1 else: break return count"},{"question":"Create a function that reverses the order of elements in a list of numbers.","solution":"def reverse_list(numbers): Reverses the order of elements in a list. Args: numbers (list): List of numbers to be reversed. Returns: list: A new list with the elements in reversed order. return numbers[::-1]"},{"question":"Create a function that takes an integer n and returns the nth Fibonacci number using dynamic programming.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n <= 0: raise ValueError(\\"Input should be a positive integer.\\") if n == 1: return 0 if n == 2: return 1 fib_nums = [0, 1] for i in range(2, n): fib_nums.append(fib_nums[-1] + fib_nums[-2]) return fib_nums[-1]"},{"question":"Create a function that takes a string as input and returns a new string where each character is doubled in the string.","solution":"def double_characters(s): Returns a new string where each character in the input string is doubled. return ''.join([char * 2 for char in s])"},{"question":"Create a function that generates a list of Fibonacci numbers up to a specified limit. The function should handle errors gracefully by checking if the limit is non-negative and if the limit is not too small (at least 1). If the limit is invalid, the function should raise an \`InvalidArgumentException\`.","solution":"class InvalidArgumentException(Exception): Custom exception for invalid arguments. pass def generate_fibonacci(limit): Generate a list of Fibonacci numbers up to a specified limit. Args: - limit (int): The upper limit (inclusive) for the Fibonacci sequence generation. Returns: - list: A list containing the Fibonacci sequence up to the given limit. Raises: - InvalidArgumentException: If the limit is non-positive or less than 1. if not isinstance(limit, int) or limit < 1: raise InvalidArgumentException(\\"Limit must be a positive integer greater than or equal to 1\\") fib_sequence = [0, 1] while True: next_fib = fib_sequence[-1] + fib_sequence[-2] if next_fib > limit: break fib_sequence.append(next_fib) return fib_sequence if limit > 0 else []"},{"question":"Create a function that takes an integer n and returns a list of all possible integer sequences of length n where each element is either 0 or 1. These sequences should represent binary numbers in decimal format.","solution":"def generate_binary_sequences(n): Returns a list of all possible binary sequences of length n. Each element in the sequences is either 0 or 1. if n == 0: return [] sequences = [] def backtrack(current_sequence): if len(current_sequence) == n: sequences.append(current_sequence.copy()) return for i in range(2): current_sequence.append(i) backtrack(current_sequence) current_sequence.pop() backtrack([]) return sequences"},{"question":"Create a function that takes a list of numbers and return a list of numbers multiplied by 2.","solution":"def multiply_by_two(numbers): Returns a list of numbers where each number is multiplied by 2. return [number * 2 for number in numbers]"},{"question":"Create a function that takes an integerlist, an integer target, and an integer \`k\`. The function should return the \`k\`th largest element in the list after filtering the list to only include elements that are greater than or equal to \`target\`. If there are fewer than \`k\` elements that are greater than or equal to \`target\`, return \`None\`.","solution":"def kth_largest_element(nums, target, k): Returns the kth largest element in the list after filtering the list to only include elements that are greater than or equal to target. If there are fewer than k elements that are greater than or equal to target, return None. :param nums: List of integers. :param target: Integer target. :param k: The position (kth) largest element to find. :return: kth largest element or None. filtered_nums = [num for num in nums if num >= target] if len(filtered_nums) < k: return None filtered_nums.sort(reverse=True) return filtered_nums[k-1]"},{"question":"Create a function that takes in two parameters - a string and a character. The function should return \`True\` if the string starts with the given character, otherwise \`False\`.","solution":"def starts_with(string, char): Returns True if the string starts with the given character, otherwise False. if not string or not char: # Handles empty string or char cases return False return string[0] == char"},{"question":"Create a function that reshapes a matrix (list of lists) by converting it into a single-level list.","solution":"def flatten_matrix(matrix): Flattens a 2D matrix (list of lists) into a single-level list. Parameters: matrix (list of lists): A 2D list representing the matrix. Returns: list: A single-level list containing all the elements of the matrix. return [element for row in matrix for element in row]"},{"question":"Create a function that accepts an array of tuples and returns a tuple where the first item in the tuple is the index of the item in the array that occurs the most times, and the second item in the tuple is the item itself.","solution":"def most_frequent_item_with_index(arr): Accepts an array of tuples and returns a tuple where the first item in the tuple is the index of the item in the array that occurs the most times, and the second item in the tuple is the item itself. from collections import Counter if not arr: return None # Create a counter to count occurrences of each item item_counts = Counter(arr) # Find the item with the maximum count most_common_item = item_counts.most_common(1)[0][0] # Find the index of the first occurrence of the most common item index_of_most_common = arr.index(most_common_item) return (index_of_most_common, most_common_item)"},{"question":"Create a function that returns the length of the longest continuous substring within a given string that contains all unique characters. What is a concise way to solve this problem using Python?","solution":"def longest_unique_substring_length(s): Returns the length of the longest continuous substring within a given string that contains all unique characters. char_index_map = {} max_length = start = 0 for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Create a function that takes an integer as input and returns the sum of all prime numbers up to and including that integer.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_primes_up_to(n): Returns the sum of all prime numbers up to and including n. return sum(number for number in range(2, n + 1) if is_prime(number))"},{"question":"Create a function that takes in a list of numbers, calculates the factorial of each number, and returns the sum of the factorials.","solution":"import math def sum_of_factorials(numbers): Calculates the sum of factorials of the given list of numbers. Parameters: numbers (list of int): List of integers Returns: int: Sum of the factorials of the list of numbers return sum(math.factorial(num) for num in numbers)"},{"question":"Create a function that checks if all the elements in a given list are multiples of a specific number.","solution":"def all_multiples_of(lst, num): Checks if all elements in the given list are multiples of the given number. Parameters: lst (list of int): List of integers to check. num (int): The number to check multiples of. Returns: bool: True if all elements in the list are multiples of 'num', False otherwise. if num == 0: return False # Avoid division by zero return all(x % num == 0 for x in lst)"},{"question":"Create a function that can accept any number of arguments and print a greeting message for each argument. How can I use \`*\` to achieve this in Python?","solution":"def greet_all(*names): Accepts any number of arguments and prints a greeting message for each. for name in names: print(f\\"Hello, {name}!\\")"},{"question":"Create a function that takes a list of dictionaries in Python and returns a new list with the dictionaries sorted by a specific key in each dictionary. For example, if the given list is \`[{'name': 'John', 'age': 25}, {'name': 'Jane', 'age': 22}]\` and you sort by the 'age' key, the result should be \`[{'name': 'Jane', 'age': 22}, {'name': 'John', 'age': 25}]\`.","solution":"def sort_dicts_by_key(dict_list, sort_key): Sorts a list of dictionaries by a specified key. Parameters: dict_list (list): List of dictionaries to sort. sort_key (str): Key to sort by. Returns: list: Sorted list of dictionaries. return sorted(dict_list, key=lambda x: x[sort_key])"},{"question":"Create a function that takes as input a list of integers and returns another list where each element is the sum of all elements in the original list except the current element. The function should be implemented in Python.","solution":"def sum_except_current(nums): Returns a list where each element is the sum of all elements in the input list except the current element. Parameters: nums (list): List of integers Returns: list: List of integers where each element is the sum of all elements in the input list except the current element total_sum = sum(nums) return [total_sum - num for num in nums]"},{"question":"Create a function that finds the longest common substring in two input strings, \`str1\` and \`str2\`. The common substring does not need to be contiguous. A solution should return the longest common substring. If there are multiple substrings of the same length, return the one that appears first in \`str1\`.","solution":"def longest_common_substring(str1, str2): Finds the longest common substring between str1 and str2. m = len(str1) n = len(str2) # Create a 2D list to store lengths of longest common substring. lcsuff = [[0 for _ in range(n+1)] for _ in range(m+1)] length = 0 # stores the length of the longest common substring end_idx_str1 = 0 # stores the end index of the longest common substring in str1 # Build the lcsuff array for i in range(1, m+1): for j in range(1, n+1): if str1[i-1] == str2[j-1]: lcsuff[i][j] = lcsuff[i-1][j-1] + 1 if lcsuff[i][j] > length: length = lcsuff[i][j] end_idx_str1 = i - 1 else: lcsuff[i][j] = 0 # The longest common substring if length > 0: start_idx_str1 = end_idx_str1 - length + 1 return str1[start_idx_str1:end_idx_str1 + 1] else: return \\"\\""},{"question":"Create a function that takes in a string as input and returns the character that appears most frequently. If there is more than one character with the same highest frequency, return any one of these characters.","solution":"def most_frequent_character(s): Returns the character that appears most frequently in the input string. If there is more than one character with the same highest frequency, returns any one of these characters. from collections import Counter if not s: return None counter = Counter(s) max_count = max(counter.values()) for char, count in counter.items(): if count == max_count: return char"},{"question":"Create a function that reads a CSV file and parses the data into a dictionary where each key is the value of the first column and the corresponding value is another dictionary with the columns as keys and their respective values as values. The first row of the CSV should be the column headers.","solution":"import csv def parse_csv_to_dict(file_path): Reads a CSV file and parses the data into a dictionary. Parameters: file_path (str): The path to the CSV file. Returns: dict: A dictionary where each key is the value of the first column, and the value is another dictionary with columns as keys and their respective values as values. result = {} with open(file_path, mode='r', newline='', encoding='utf-8') as csvfile: reader = csv.DictReader(csvfile) for row in reader: key = row[reader.fieldnames[0]] result[key] = {field: row[field] for field in reader.fieldnames[1:]} return result"},{"question":"Create a function that takes a string as input and returns the longest word in the string. If there are multiple words with the same maximum length, the function should return the last one among them. If the string is empty, the function should return an empty string. Additionally, create a \\"main\\" function that takes no arguments and tests the longest word function with various strings to ensure its correctness.","solution":"def longest_word(s): Returns the longest word in the string s. If there are multiple words with the same maximum length, return the last one among them. If the string is empty, return an empty string. if not s: return \\"\\" words = s.split() longest = \\"\\" for word in words: if len(word) >= len(longest): longest = word return longest def main(): Tests the longest_word function with various strings to ensure its correctness. test_cases = [ (\\"The quick brown fox jumps over the lazy dog\\", \\"jumps\\"), (\\"To be or not to be, that is the question\\", \\"question\\"), (\\"Empty string test\\", \\"string\\"), (\\"Another test case with multiple words\\", \\"multiple\\"), (\\"\\", \\"\\"), ] for s, expected in test_cases: assert longest_word(s) == expected, f\\"Failed for input: {s}\\" print(\\"All tests passed.\\")"},{"question":"Create a function that takes two parameters, a string and an integer, and returns the string repeated the number of times specified by the integer. If the integer is less than or equal to zero, the function should return an empty string. The function should also handle cases where the string or the integer are not valid inputs (e.g., non-string for string parameter, non-integer for integer parameter).","solution":"def repeat_string(s, n): Returns the string s repeated n times. If n is less than or equal to zero, returns an empty string. If s is not a string or n is not an integer, returns an empty string. if not isinstance(s, str) or not isinstance(n, int): return \\"\\" if n <= 0: return \\"\\" return s * n"},{"question":"Create a function that takes a list of tuples as a parameter and returns a dictionary where each key is the first element of the tuple and each value is a list of tuples that share the same key.","solution":"def group_tuples(tuples_list): Groups a list of tuples into a dictionary where each key is the first element of the tuple and each value is a list of tuples that share the same key. :param tuples_list: List[Tuple] :return: Dict[Any, List[Tuple]] grouped_dict = {} for tup in tuples_list: key = tup[0] if key not in grouped_dict: grouped_dict[key] = [] grouped_dict[key].append(tup) return grouped_dict"},{"question":"Create a function that accepts two parameters: a list of integers and an integer value. The function should return the maximum value from the list that is less than or equal to the given integer value. If no such value exists, the function should return -1.","solution":"def max_value_less_or_equal(lst, value): Return the maximum value from the list that is less than or equal to the given integer value. If no such value exists, return -1. valid_values = [x for x in lst if x <= value] return max(valid_values) if valid_values else -1"},{"question":"Create a function that takes a string as input, and returns a substring that is surrounded by the string \\"[]\\". If the input string is empty, the function should return an empty string.","solution":"def extract_substring(input_string): Extracts and returns the substring that is surrounded by '[]' in the input string. If the input string is empty or no such substring exists, returns an empty string. if not input_string: return \\"\\" start_index = input_string.find('[') end_index = input_string.find(']', start_index) if start_index == -1 or end_index == -1: return \\"\\" return input_string[start_index + 1:end_index]"},{"question":"Create a function that takes a Python list as an input and returns a list of lists. This list of lists should contain all possible subsets of the original input list.","solution":"from itertools import chain, combinations def all_subsets(arr): Returns all possible subsets of the input list. def subsets(arr): Generate all subsets of a list. return list(chain(*[combinations(arr, i) for i in range(len(arr)+1)])) return [list(subset) for subset in subsets(arr)]"},{"question":"Create a function that generates a list of n tuples, where each tuple contains a unique pair of integers from 0 to n-1, and the sum of the integers in each tuple is a given input sum. The function should also check if the given sum is achievable with the numbers in the range.","solution":"def generate_tuples_with_sum(n, desired_sum): Generates a list of tuples (a, b) such that 0 <= a, b < n and a + b == desired_sum. Parameters: n (int): The range of numbers (0 to n-1). desired_sum (int): The desired sum of the pairs. Returns: list: A list of tuples with the required properties. if desired_sum < 0 or desired_sum >= 2 * (n - 1): return [] result = [] for a in range(n): b = desired_sum - a if 0 <= b < n: result.append((a, b)) return result"},{"question":"Create a function that takes two parameters: a vector of integers and a single integer value. The function should return a new vector of integers where the single integer value is appended to the end of the provided vector.","solution":"def append_to_vector(vector, value): Appends a single integer value to the end of the provided vector of integers. :param vector: List of integers. :param value: An integer value to be appended. :return: A new list with the value appended at the end. return vector + [value]"},{"question":"Create a function that generates a random string of a given length using a specified character set.","solution":"import random def generate_random_string(length, charset): Generate a random string of a given length using a specified character set. Parameters: length (int): The length of the random string to generate. charset (str): The character set to use for generating the random string. Returns: str: A random string of the specified length using the given character set. return ''.join(random.choice(charset) for _ in range(length))"},{"question":"Create a function that takes an integer as input and returns the sum of its digits if the number is positive, and the sum of its absolute values of the digits if the number is negative.","solution":"def sum_of_digits(number): Takes an integer as input and returns the sum of its digits if the number is positive, and the sum of the absolute values of the digits if the number is negative. return sum(int(digit) for digit in str(abs(number)))"},{"question":"Create a function that takes an array of integers and returns the length of the longest contiguous subarray that has an equal number of 0s and 1s. If no such subarray exists, return 0.","solution":"def findMaxLength(nums): Returns the length of the longest contiguous subarray that has an equal number of 0s and 1s. # Initialize the dictionary to store the first occurrence of cumulative sums cumulative_sum_index = {} # Handle the base case of empty subarray cumulative_sum_index[0] = -1 # Initialize variables cumulative_sum = 0 max_length = 0 # Iterate through the list for i, num in enumerate(nums): # Update the cumulative sum, considering 0 as -1 and 1 as +1 cumulative_sum += -1 if num == 0 else 1 # Check if this cumulative sum has been seen before if cumulative_sum in cumulative_sum_index: # Update the maximum length max_length = max(max_length, i - cumulative_sum_index[cumulative_sum]) else: # Store the first occurrence of this cumulative sum cumulative_sum_index[cumulative_sum] = i return max_length"},{"question":"Create a function that takes in two lists and returns a new list with elements that are common to both lists. If there are no common elements, the function should return an empty list.","solution":"def common_elements(list1, list2): Returns a list containing elements that are common to both list1 and list2. If there are no common elements, returns an empty list. return [element for element in list1 if element in list2]"},{"question":"Create a function that takes an array of integers and returns the only prime number found in the array. If no prime number is found, return 0.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def find_prime_in_array(arr): Returns the only prime number in the array. If no prime number is found, return 0. primes = [x for x in arr if is_prime(x)] return primes[0] if len(primes) == 1 else 0"},{"question":"Create a function that takes an integer as an argument and returns a list of its divisors. divisors function should return the divisors in ascending order.","solution":"def divisors(n): Returns a list of divisors of the integer n in ascending order. result = [] for i in range(1, n + 1): if n % i == 0: result.append(i) return result"},{"question":"Create a function that determines whether a list of integers is sorted in ascending order.","solution":"def is_sorted_ascending(lst): Returns True if the list of integers is sorted in ascending order, False otherwise. return lst == sorted(lst)"},{"question":"Create a function that checks if a given string is a palindrome. A string is considered a palindrome if it reads the same backward as forward. For example, \\"madam\\" or \\"racecar\\" are palindromes, while \\"python\\" is not. Your function should take a single string as input and return a boolean value indicating whether the string is a palindrome or not.","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, False otherwise. A palindrome is a string that reads the same backward as forward. # Remove any unwanted characters and convert to lowercase s = ''.join(c for c in s if c.isalnum()).lower() return s == s[::-1]"},{"question":"Create a function that calculates the factorial of a number. The function should throw an error if the input is negative, and it should return the factorial of the input if the input is non-negative.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Throws a ValueError if n is negative. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes a list of dictionaries as an input where each dictionary represents a book with keys for 'title', 'author', and 'published_year'. The function should return a list of titles of books that were published before or in the year 1990.","solution":"def get_books_published_before_1991(books): Returns a list of titles of books published before or in the year 1990. Parameters: books (list): A list of dictionaries where each dictionary represents a book with keys 'title', 'author', and 'published_year'. Returns: list: A list of titles of books published before or in the year 1990. return [book['title'] for book in books if book['published_year'] <= 1990]"},{"question":"Create a function that will determine if a number is even or odd, return \\"Even\\" if number is even, and \\"Odd\\" if number is odd.","solution":"def even_or_odd(number): Determines if the number is even or odd. Parameters: number (int): The number to be checked. Returns: str: \\"Even\\" if the number is even, \\"Odd\\" if the number is odd. if number % 2 == 0: return \\"Even\\" else: return \\"Odd\\""},{"question":"Create a function that takes an array as input and returns the first repeated element in the array. If no element is repeated, the function should return -1.","solution":"def first_repeated_element(arr): Returns the first repeated element in the array. If no element is repeated, returns -1. seen = set() for element in arr: if element in seen: return element seen.add(element) return -1"},{"question":"Create a function that takes two strings as input and returns the number of characters that are present in both strings, without considering the order of characters or their frequency.","solution":"def common_characters_count(str1, str2): Returns the number of unique characters that are present in both strings. set1 = set(str1) set2 = set(str2) common_characters = set1.intersection(set2) return len(common_characters)"},{"question":"Create a function that returns the largest number in an array of integers without using any built-in functions like max(), min(), or sort(). You can only use basic arithmetic operations, logic gates, and conditionals.","solution":"def find_largest(nums): Returns the largest number in an array of integers. if not nums: raise ValueError(\\"The list is empty\\") largest = nums[0] for num in nums: if num > largest: largest = num return largest"},{"question":"Create a function that returns the minimum and maximum values in a list.","solution":"def find_min_max(numbers): Returns a tuple containing the minimum and maximum values in the list of numbers. If the list is empty, return (None, None). if not numbers: return (None, None) return (min(numbers), max(numbers))"},{"question":"Create a function that accepts a number and returns a list of its positive divisors.","solution":"def positive_divisors(n): Returns a list of positive divisors of n. if n <= 0: raise ValueError(\\"Input must be a positive number\\") divisors = [i for i in range(1, n+1) if n % i == 0] return divisors"},{"question":"Create a function that takes in two lists of numbers. The first list represents the coefficients of a polynomial, and the second list represents the coefficients of another polynomial. The function should return the coefficients of their sum. The coefficients are given in increasing order of power, so the first element is the constant term, the second element is the coefficient of x, and so forth.","solution":"def add_polynomials(poly1, poly2): Returns the coefficients of the sum of two polynomials. The coefficients are in increasing order of power. max_len = max(len(poly1), len(poly2)) sum_poly = [0] * max_len for i in range(max_len): if i < len(poly1): sum_poly[i] += poly1[i] if i < len(poly2): sum_poly[i] += poly2[i] return sum_poly"},{"question":"Create a function that takes two integers as input and returns a list of integers that are the common elements between the two input lists.","solution":"def find_common_elements(list1, list2): Returns a list of common elements between two input lists. # Convert both lists to sets to find intersection set1 = set(list1) set2 = set(list2) # Find common elements common_elements = list(set1.intersection(set2)) return common_elements"},{"question":"Create a function that generates a Caesar cipher for a given string. The cipher should shift each character in the string forward by a specified number of positions in the alphabet. Characters should wrap around to the beginning of the alphabet if necessary. For example, shifting 'z' by 1 should result in 'a'.","solution":"def caesar_cipher(s, shift): Generates a Caesar cipher for the input string s using the specified shift. Parameters: s (str): The input string to be encrypted. shift (int): The number of positions to shift each character. Returns: str: The encrypted string after the shift. result = [] for char in s: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') result.append(chr((ord(char) - shift_base + shift) % 26 + shift_base)) else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes two integers \`a\` and \`b\` as input and returns the sum of \`a\` and \`b\`. Validate the input to ensure both are integers and raise a ValueError if they are not. If the sum is an even number, return the sum multiplied by 3; otherwise, return the sum as is.","solution":"def validate_integer(value): Validates if the provided value is an integer. if not isinstance(value, int): raise ValueError(f\\"Value {value} is not an integer.\\") def custom_sum(a, b): Returns the sum of a and b with post-processing: - If the sum is even, returns the sum multiplied by 3. - If the sum is odd, returns the sum as is. Raises ValueError if inputs are not integers. validate_integer(a) validate_integer(b) result = a + b if result % 2 == 0: return result * 3 else: return result"},{"question":"Create a function that increases the value of each element in a list by one.","solution":"def increment_elements(input_list): Increases the value of each element in the list by one. Parameters: input_list (list): List of integers Returns: list: List of integers, each element incremented by one return [x + 1 for x in input_list]"},{"question":"Create a function that takes a string and returns the first non-repeating character in the string, if one exists. If there are no non-repeating characters, return None.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string \`s\`. If there is no such character, returns None. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 for char in s: if frequency[char] == 1: return char return None"},{"question":"Create a function that checks if a specified page in a book is divisible by 2 for printing. In a book print layout, the pages are often represented as a number sequence. However, for simplicity, consider the book's page numbering as a continuous sequence starting from 1.","solution":"def is_page_even(page_number): Checks if the specified page number is divisible by 2. Parameters: page_number (int): The page number to check. Returns: bool: True if the page number is even, False otherwise. if page_number < 1: raise ValueError(\\"Page number should be a positive integer greater than 0.\\") return page_number % 2 == 0"},{"question":"Create a function that generates the nth Fibonacci number using an iterative approach. The function should be efficient and avoid the exponential time complexity of a recursive solution.","solution":"def fibonacci(n): Generates the nth Fibonacci number using an iterative approach. Args: n (int): The position in the Fibonacci sequence to generate. Returns: int: The nth Fibonacci number. if n <= 0: raise ValueError(\\"n should be a positive integer\\") if n == 1: return 0 if n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Create a function that takes two lists as input and returns a single list that is the result of extending the first list with the second list, and then reversing the merged list.","solution":"def merge_and_reverse(list1, list2): Takes two lists as input, merges the second list to the first list, and then returns the reversed result. Parameters: list1 (list): The first list to be extended. list2 (list): The second list to extend the first list with. Returns: list: The merged and reversed list. merged_list = list1 + list2 reversed_list = merged_list[::-1] return reversed_list"},{"question":"Create a function that calculates the square root of a given number \`x\`. However, you are not allowed to use any built-in square root functions or libraries. Implement the function using the Newton-Raphson method.","solution":"def sqrt_newton(x, tolerance=1e-10): Calculate the square root of x using the Newton-Raphson method. Parameters: x (float): The number to find the square root of. tolerance (float): The tolerance for the accuracy of the result. Default is 1e-10. Returns: float: The square root of x. if x < 0: raise ValueError(\\"Cannot calculate square root of a negative number\\") if x == 0: return 0 guess = x / 2.0 while True: next_guess = (guess + x / guess) / 2 if abs(guess - next_guess) < tolerance: return next_guess guess = next_guess"},{"question":"Create a function that takes two lists of integers as input and returns a list with elements that are common in both lists. Avoid using built-in functions or additional libraries. You should also ensure the function runs in linear time, i.e., O(n+m), where n and m are the lengths of the input lists.","solution":"def find_common_elements(list1, list2): Returns a list with elements that are common in both input lists. The function ensures the solution runs in linear time. # Convert list1 to a set for O(1) average time complexity lookups set1 = set(list1) result = [] # Iterate over list2 and collect common elements for element in list2: if element in set1: result.append(element) # Remove the element from the set to prevent duplicates set1.remove(element) return result"},{"question":"Create a function that converts hexadecimal to binary in Python. The function should handle conversion of both uppercase and lowercase letters in hexadecimal strings. Additionally, it should correctly handle leading zeros in the binary output and return it as a string.","solution":"def hex_to_binary(hex_str): Converts a hexadecimal string to a binary string. Handles both uppercase and lowercase letters in hexadecimal strings. # Convert to binary and remove '0b' prefix binary = bin(int(hex_str, 16))[2:] # Pad binary string with leading zeros if necessary binary = binary.zfill(4 * len(hex_str)) return binary"},{"question":"Create a function that takes an array of integers \`arr\` and returns a new array where each element at index \`i\` is the product of all elements in \`arr\` except the element at \`i\`. The solution should not use division and must operate in O(n) time complexity with O(1) extra space (excluding the output array).","solution":"def product_except_self(arr): Returns an array where each element at index i is the product of all elements in arr except the element at i. n = len(arr) if n == 0: return [] result = [1] * n # Calculate left products left_product = 1 for i in range(n): result[i] = left_product left_product *= arr[i] # Calculate right products and multiply with result right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= arr[i] return result"},{"question":"Create a function that generates a sequence of prime numbers up to a given limit. The function should take an integer as input and return a list of prime numbers that are less than or equal to that integer. For example, if the input is 5, the function should return [2, 3, 5].","solution":"def generate_primes(limit): Generate a list of prime numbers up to the given limit. Parameters: limit (int): The upper boundary for prime numbers generation. Returns: List[int]: A list of prime numbers less than or equal to the given limit. if limit < 2: return [] primes = [] for num in range(2, limit + 1): is_prime = True for div in range(2, int(num ** 0.5) + 1): if num % div == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that takes two lists of integers as input and returns a list of their intersection (common elements).","solution":"def intersection(list1, list2): Returns a list containing the intersection of list1 and list2. return list(set(list1) & set(list2))"},{"question":"Create a function that takes an input value, \`'X'\`, and outputs a dictionary with the keys \`'a'\`, \`'b'\`, \`'c'\`, and \`'d'\`. The value for each key should be the sum of the input value and the ASCII value of the corresponding key. For example, \`'a'\` should have a value of \`'X' + 97\`, \`'b'\` should be \`'X' + 98\`, and so on.","solution":"def generate_ascii_sum_dict(X): Returns a dictionary with keys 'a', 'b', 'c', and 'd' where each value is the sum of the given input X and the ASCII value of the key. return {chr(char): X + ord(chr(char)) for char in range(ord('a'), ord('d') + 1)}"},{"question":"Create a function that takes a string with no spaces and returns a new string where every character has its ASCII value incremented by 1. For example, the function should return \\"d\\" for \\"c\\", \\"e\\" for \\"d\\", etc. The function should work for any alphabet letter from 'a' to 'z', encoding the string accordingly. However, it should not change any non-alphabet characters.","solution":"def increment_ascii(s): Returns a new string where every alphabet character has its ASCII value incremented by 1. Non-alphabet characters remain unchanged. new_string = \\"\\" for char in s: if 'a' <= char <= 'z': new_char = chr(((ord(char) - ord('a') + 1) % 26) + ord('a')) elif 'A' <= char <= 'Z': new_char = chr(((ord(char) - ord('A') + 1) % 26) + ord('A')) else: new_char = char new_string += new_char return new_string"},{"question":"Create a function that takes in a string of HTML code and returns a list of all the text nodes that are enclosed in \`<p>\` tags. The function should ignore any text outside of \`<p>\` tags.","solution":"from bs4 import BeautifulSoup def extract_text_from_p_tags(html): Extract text from <p> tags in the given HTML string. Args: html (str): The HTML code as a string. Returns: list: A list of text contained within <p> tags. soup = BeautifulSoup(html, 'html.parser') p_tags = soup.find_all('p') return [tag.get_text() for tag in p_tags]"},{"question":"Create a function that returns the sum of all numbers in a given list, but only if those numbers are positive and even. How would you write this function in Python?","solution":"def sum_positive_even(numbers): Returns the sum of all positive even numbers in a given list. Args: numbers (list): List of integers Returns: int: Sum of all positive even numbers return sum(num for num in numbers if num > 0 and num % 2 == 0)"},{"question":"Create a function that takes an array of integers \`arr\` and an integer \`k\`. The function should return a list of integers containing the elements of \`arr\` that are less than \`k\`.","solution":"def elements_less_than_k(arr, k): Returns a list of elements from the array \`arr\` that are less than \`k\`. Parameters: arr (list of int): The input array of integers. k (int): The integer to compare the elements against. Returns: list of int: A list of elements from \`arr\` that are less than \`k\`. result = [i for i in arr if i < k] return result"},{"question":"Create a function that takes an integer array and an integer as input and returns a boolean indicating whether the array contains the input integer.","solution":"def contains_number(array, number): Returns True if the array contains the input number, False otherwise. :param array: list of integers :param number: integer to check :return: boolean return number in array"},{"question":"Create a function that takes a list of words and returns a new list with words that are longer than a specified length.","solution":"def filter_long_words(words, min_length): Returns a list of words that are longer than the specified minimum length. Parameters: words (list): A list of words. min_length (int): The minimum length of the words to be included in the returned list. Returns: list: A list of words that are longer than min_length. return [word for word in words if len(word) > min_length]"},{"question":"Create a function that sorts a given list of integers in ascending order. Ensure the function can handle a list of length up to 1000 and includes a docstring explaining its purpose.","solution":"def sort_integers(lst): Sorts a given list of integers in ascending order. Parameters: lst (list of int): The list of integers to sort. Returns: list of int: The sorted list of integers in ascending order. return sorted(lst)"},{"question":"Create a function that takes a list of integers and a target sum. Find and return the pair of elements in the list that equal the target sum. If no such pair exists, return None. Use Python and provide an example of how to call this function.","solution":"def find_pair_with_sum(numbers, target): Returns a tuple of two numbers from the list that sum up to the target. If no such pair exists, return None. seen = {} for number in numbers: complement = target - number if complement in seen: return (complement, number) seen[number] = True return None"},{"question":"Create a function that takes in a string and converts it to a binary string. The function should handle empty strings and ensure that characters which do not have a direct binary equivalent (like punctuation and special characters) are ignored. Only alphabetic characters should be converted to binary.","solution":"def string_to_binary(input_string): Converts a given string to a binary string representing the ASCII values of each alphabetic character. Ignores non-alphabetic characters. :param input_string: The string to be converted to binary. :return: Binary string. binary_result = \\"\\" for char in input_string: if char.isalpha(): binary_result += format(ord(char), '08b') return binary_result"},{"question":"Create a function that takes a list of dictionaries and returns a list containing the values associated with a specified key in each dictionary.","solution":"def extract_values(dicts, key): Takes a list of dictionaries and returns a list containing the values associated with a specified key in each dictionary. :param dicts: List of dictionaries :param key: Key whose corresponding values need to be extracted :return: List of values associated with the specified key return [d[key] for d in dicts if key in d]"},{"question":"Create a function that takes in a list of integers. The function should return True if the list is sorted in ascending order, False otherwise.","solution":"def is_list_sorted(lst): Returns True if the list is sorted in ascending order, False otherwise. return lst == sorted(lst)"},{"question":"Create a function that checks if a given 2D list (matrix) is symmetric or not. A symmetric matrix is one where the element at the ith row and jth column is the same as the element at the jth row and ith column for all values of i and j.","solution":"def is_symmetric(matrix): Checks if a given 2D list (matrix) is symmetric or not. if not matrix: return True # An empty matrix is symmetric n = len(matrix) for i in range(n): for j in range(n): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"Create a function that takes in the names or labels of two columns in a pandas DataFrame and returns the correlation coefficient between them. The function should be flexible enough to handle both numerical and categorical data types, and should use the appropriate method for calculating correlation for each data type. For numerical columns, use the Pearson correlation coefficient. For categorical columns, use the Cramer's V coefficient.","solution":"import pandas as pd import numpy as np from scipy.stats import pearsonr, chi2_contingency def calculate_correlation(df, col1, col2): Returns the correlation coefficient between two columns in the DataFrame. Uses Pearson correlation for numerical columns and Cramer's V for categorical columns. Parameters: df (pd.DataFrame): The DataFrame containing the data. col1 (str): The name of the first column. col2 (str): The name of the second column. Returns: float: The correlation coefficient. if df[col1].dtype in ['int64', 'float64'] and df[col2].dtype in ['int64', 'float64']: # Numerical columns, use Pearson correlation corr, _ = pearsonr(df[col1], df[col2]) else: # Categorical columns, use Cramer's V confusion_matrix = pd.crosstab(df[col1], df[col2]) chi2, _, _, _ = chi2_contingency(confusion_matrix) n = len(df) min_dim = min(confusion_matrix.shape) - 1 corr = np.sqrt(chi2 / (n * min_dim)) return corr"},{"question":"Create a function that calculates the sum of the digits of a given number. For example, if the number is 123, the function should return 6. How would you do this in Python?","solution":"def sum_of_digits(n): Returns the sum of the digits of the given number n. return sum(int(digit) for digit in str(abs(n)))"},{"question":"Create a function that takes an array of integers as input and returns the two largest numbers in the array.","solution":"def two_largest_numbers(arr): Returns the two largest numbers in the array. Parameters: arr (list): List of integers. Returns: tuple: Two largest numbers in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements.\\") first, second = float('-inf'), float('-inf') for number in arr: if number > first: second = first first = number elif number > second: second = number return (first, second)"},{"question":"Create a function that takes three arguments (first name, last name and preferred nickname), and returns a dictionary with all the arguments inputted as values.","solution":"def create_user_profile(first_name, last_name, nickname): Returns a dictionary with first_name, last_name, and nickname as keys and their respective arguments as values. return { 'first_name': first_name, 'last_name': last_name, 'nickname': nickname }"},{"question":"Create a function that takes in a string and returns true if the string contains any special characters and false otherwise.","solution":"import re def contains_special_characters(s): Returns True if the input string contains any special characters, else False. # Define the regular expression for special characters. pattern = re.compile(r'[!@#%^&*(),.?\\":{}|<>]') # Search for any special character in the string. return bool(pattern.search(s))"},{"question":"Create a function that generates a secret code for a given string, where each character is replaced by the character \`3\` positions ahead in the ASCII table. For example, 'a' becomes 'd', 'b' becomes 'e', etc. The function should take a single string as input and return the encoded secret code string. If the input character is not a letter, it should remain unchanged.","solution":"def generate_secret_code(s): Generates a secret code for a given string where each letter character is replaced by the character 3 positions ahead in the ASCII table. Non-letter characters remain unchanged. Args: s (str): The input string to encode. Returns: str: The encoded secret code string. secret_code = [] for char in s: if 'a' <= char <= 'z': # Check for lowercase letters secret_code.append(chr((ord(char) - ord('a') + 3) % 26 + ord('a'))) elif 'A' <= char <= 'Z': # Check for uppercase letters secret_code.append(chr((ord(char) - ord('A') + 3) % 26 + ord('A'))) else: secret_code.append(char) # Non-letter characters remain unchanged return ''.join(secret_code)"},{"question":"Create a function that takes a list as an argument and returns the second smallest number in the list.","solution":"def second_smallest(numbers): Returns the second smallest number in the list. If the list has less than 2 unique numbers, return None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Create a function that accepts two parameters, both of which are lists of strings. The function should compare the strings in each list and return a new list of strings that contains only the strings that are present in both input lists.","solution":"def common_elements(list1, list2): Returns a list of strings that are present in both input lists. return [element for element in list1 if element in list2]"},{"question":"Create a function that takes two arguments \`n\` and \`m\`. \`n\` represents the number of rows, and \`m\` represents the number of columns. The function should generate a 2D array where each element is the sum of its row and column indices. Write a Python function to achieve this.","solution":"def generate_2d_array(n, m): Generates a 2D array where each element is the sum of its row and column indices. :param n: Number of rows :param m: Number of columns :return: 2D array return [[row + col for col in range(m)] for row in range(n)]"},{"question":"Write a python function to find the most common word in a list of words. If there are multiple words with the same highest frequency, return all of them in a list.","solution":"from collections import Counter def most_common_words(words): Returns the list of the most common word(s) in the input list. If there are multiple words with the highest frequency, return all of them. if not words: return [] word_count = Counter(words) max_count = max(word_count.values()) most_common = [word for word, count in word_count.items() if count == max_count] return most_common"},{"question":"Write a python function to check if the brackets in a string are balanced.","solution":"def is_balanced(s): Returns True if the brackets in the string s are balanced, otherwise False. Args: s (str): The input string containing brackets. Returns: bool: True if the brackets are balanced, False otherwise. stack = [] bracket_map = {')': '(', ']': '[', '}': '{'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: # Ignore other characters continue return stack == []"},{"question":"Write a python function to find the maximum sum of a subarray given an array with n integers (\`A[0], A[1], ..., A[n-1]\`). The subarray can be of any length, but it must be continuous.","solution":"def max_subarray_sum(arr): Find the maximum sum of a subarray in a given array of integers. Parameters: arr (list of int): The list of integers. Returns: int: The maximum sum of a subarray. if not arr: return 0 max_so_far = arr[0] max_ending_here = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a python function to find the union and intersection of two sets. Implement the function \`find_set_operations(set1, set2)\` which takes two sets as input and returns a tuple containing the union and intersection of the two sets, respectively.","solution":"def find_set_operations(set1, set2): Returns a tuple containing the union and intersection of two sets. Parameters: set1 (set): First input set. set2 (set): Second input set. Returns: tuple: A tuple containing the union and intersection of the two sets, respectively. union = set1.union(set2) intersection = set1.intersection(set2) return (union, intersection)"},{"question":"Write a python function to remove duplicates from an array while maintaining the original order of elements. You should only keep the first occurrence of each element, and remove any subsequent duplicates.","solution":"def remove_duplicates(arr): Removes duplicates from the input list while maintaining the order of first occurrences. Arguments: arr: A list of elements from which duplicates need to be removed. Returns: A list with duplicates removed. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to check if a given sentence is a palindrome, considering only alphabets and ignoring cases. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward, disregarding spaces, punctuation, and capitalization.","solution":"def is_palindrome(sentence): Checks if a given sentence is a palindrome, considering only alphabets and ignoring cases. # Filter out non-alphabet characters and convert to lower case. filtered_chars = [ch.lower() for ch in sentence if ch.isalpha()] # Check if the filtered characters form a palindrome. return filtered_chars == filtered_chars[::-1]"},{"question":"Write a python function to find the length of the longest substring without repeating characters in a given string. You need to return the length, not the substring itself.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. :param s: Input string :return: Length of the longest substring without repeating characters char_map = {} left_pointer = 0 max_length = 0 for right_pointer in range(len(s)): current_char = s[right_pointer] if current_char in char_map and char_map[current_char] >= left_pointer: left_pointer = char_map[current_char] + 1 char_map[current_char] = right_pointer max_length = max(max_length, right_pointer - left_pointer + 1) return max_length"},{"question":"Write a python function to add one to a number represented by a linked list. The digits are stored in reverse order, and the head of the linked list is given. The function should return the head of the resulting linked list with the incremented number.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_one(head: ListNode) -> ListNode: Add one to a number represented by a linked list. The digits are stored in reverse order. :param head: ListNode - The head of the linked list. :return: ListNode - The head of the resulting linked list with the incremented number. # Initialize the carry to 1 (since we want to add one) carry = 1 current = head # Traverse the linked list while current is not None: # Add carry to the current node's value current.val += carry # If the current value is 10, we need to carry over to the next digit if current.val == 10: current.val = 0 carry = 1 else: carry = 0 # If there's no carry left, we can stop if carry == 0: break # Move to the next node prev = current current = current.next # If we finished the loop with a carry, it means we need an extra node if carry == 1: prev.next = ListNode(1) return head"},{"question":"Write a python function to count the number of uppercase and lowercase letters in a string. Implement the function \`count_upper_lower\` that takes a single string parameter and returns a tuple containing the count of uppercase and lowercase letters, in that order.","solution":"def count_upper_lower(s): Returns the count of uppercase and lowercase letters in the string 's'. Parameters: s (str): The input string to count uppercase and lowercase letters. Returns: tuple: A tuple containing the counts of uppercase and lowercase letters (uppercase_count, lowercase_count). uppercase_count = sum(1 for char in s if char.isupper()) lowercase_count = sum(1 for char in s if char.islower()) return (uppercase_count, lowercase_count)"},{"question":"Write a python function to rotate a array of n elements to the right by k steps. The function should modify the array in-place and use only O(1) extra space.","solution":"def rotate(nums, k): Rotates an array of n elements to the right by k steps. Modification is done in-place, using only O(1) extra space. n = len(nums) k %= n # In case k is larger than n, we only need to rotate k % n times # Helper function to reverse elements in the array from start to end index def reverse(start, end): while start < end: nums[start], nums[end] = nums[end], nums[start] start, end = start + 1, end - 1 # Reverse the whole array reverse(0, n - 1) # Reverse the first k elements reverse(0, k - 1) # Reverse the rest of the array reverse(k, n - 1)"},{"question":"Write a python function to determine if a string contains all unique characters. You should return \`True\` if all characters are unique and \`False\` if there is any character that appears more than once. If the string is empty or null, return \`True\`.","solution":"def has_all_unique_characters(s): Determines if a string contains all unique characters. Returns True if all characters are unique, False otherwise. If the string is empty or null, returns True. if s is None or s == \\"\\": return True char_set = set() for char in s: if char in char_set: return False char_set.add(char) return True"},{"question":"Write a python function to find the second largest number in a list using recursion. The function should not use any loops and must be a pure recursive approach.","solution":"def find_max(nums): Recursive helper function to find the maximum number in a list. if len(nums) == 1: return nums[0] else: return max(nums[0], find_max(nums[1:])) def find_second_largest(nums): Recursive function to find the second largest number in a list. if len(nums) < 2: raise ValueError(\\"List must contain at least two elements\\") max_val = find_max(nums) nums_without_max = [num for num in nums if num != max_val] return find_max(nums_without_max)"},{"question":"Write a python function to print the elements of a list in reverse order. The function should take a list as an argument and print the elements from the last one to the first.","solution":"def print_list_in_reverse(lst): Prints the elements of the given list in reverse order. Args: lst (list): The list of elements to print in reverse. for elem in reversed(lst): print(elem)"},{"question":"Write a python function to generate a list of all prime numbers less than or equal to a given number \`n\`.","solution":"def generate_primes(n): Returns a list of all prime numbers less than or equal to n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(n + 1) if sieve[num]]"},{"question":"Write a python function to convert Tuesdays into Wednesdays in a string.","solution":"def convert_tuesday_to_wednesday(input_str): Converts all occurrences of 'Tuesday' in the input string to 'Wednesday'. return input_str.replace('Tuesday', 'Wednesday')"},{"question":"Write a python function to generate a random dashed line.","solution":"import random def generate_dashed_line(length): Generates a random dashed line of a given length. :param length: Length of the dashed line. :type length: int :return: A string representing the dashed line. :rtype: str if length <= 0: return \\"\\" line = [] for _ in range(length): line.append(random.choice(['-', ' '])) return ''.join(line)"},{"question":"Write a python function to simulate flipping a coin. The function should return \\"Heads\\" 50% of the time and \\"Tails\\" 50% of the time.","solution":"import random def flip_coin(): Simulates flipping a coin, returning \\"Heads\\" 50% of the time and \\"Tails\\" 50% of the time. return \\"Heads\\" if random.random() < 0.5 else \\"Tails\\""},{"question":"Write a python function to calculate the Fibonacci sequence up to the nth term. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci(n): Calculate the Fibonacci sequence up to the nth term. Parameters: n (int): The nth term of the Fibonacci sequence to calculate. Returns: list: A list containing the Fibonacci sequence up to the nth term. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): next_term = sequence[-1] + sequence[-2] sequence.append(next_term) return sequence"},{"question":"Write a python function to find the number of distinct multiples of 3 between two given numbers in a list.","solution":"def count_distinct_multiples_of_three(nums): Returns the number of distinct multiples of 3 in the given list of numbers. multiples_of_three = set() for num in nums: if num % 3 == 0: multiples_of_three.add(num) return len(multiples_of_three)"},{"question":"Write a python function to check if a word is a palindrome (reads the same forwards and backwards).","solution":"def is_palindrome(word): Checks if the given word is a palindrome. A palindrome reads the same forward and backward. Parameters: word (str): The word to check. Returns: bool: True if the word is a palindrome, False otherwise. # Convert the word to lower case to ensure case-insensitive comparison word = word.lower() return word == word[::-1]"},{"question":"Write a python function to find the maximum value in a 2D list (list of lists). The function should handle cases where the 2D list may contain empty sublists.","solution":"def find_max_2d_list(lst): Returns the maximum value in a 2D list (list of lists), handling cases where the 2D list may contain empty sublists. max_val = float('-inf') for sublist in lst: for item in sublist: if item > max_val: max_val = item return max_val if max_val != float('-inf') else None"},{"question":"Write a python function to remove duplicate numbers from a given list and return the length of the list after removing duplicates.","solution":"def remove_duplicates(nums): Removes duplicate numbers from a given list and returns the length of the list after removing duplicates. :param nums: List of integers :return: Integer length of the list after removing duplicates nums = list(set(nums)) return len(nums)"},{"question":"Write a python function to find the sum of all even numbers up to a given number","solution":"def sum_of_evens(n): Returns the sum of all even numbers up to and including n. Parameters: n (int): The upper limit number. Returns: int: Sum of all even numbers up to and including n. return sum(i for i in range(2, n+1, 2))"},{"question":"Write a python function to find the length of the longest increasing subsequence in a given array of integers. An increasing subsequence is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements, and where each element is greater than the preceding one.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in a given array of integers. if not nums: return 0 dp = [1] * len(nums) for i in range(len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a python function to print prime numbers between two given numbers. For example, given the range 10 to 20, the function should print 11, 13, 17, and 19.","solution":"def print_primes_in_range(start, end): Prints prime numbers in the range from start to end (inclusive). def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True for num in range(start, end + 1): if is_prime(num): print(num)"},{"question":"Write a python function to find the longest string in a list that starts with the letter 'a'.","solution":"def longest_string_starting_with_a(strings): Returns the longest string in the list that starts with the letter 'a'. result = \\"\\" for string in strings: if string.startswith('a') and len(string) > len(result): result = string return result"},{"question":"Write a python function to find the longest substring with exactly k distinct characters in a given string. For example, if the input string is \\"aabacbebebe\\" and k=3, the longest substring with exactly 3 distinct characters is \\"cbebebe\\" with a length of 7. If no such substring exists, return -1.","solution":"def longest_substring_with_k_distinct(s, k): Finds the longest substring with exactly k distinct characters. Parameters: s (str): Input string k (int): Number of distinct characters Returns: str: The longest substring with exactly k distinct characters or -1 if no such substring exists if k == 0: return -1 n = len(s) if n == 0 or n < k: return -1 char_count = {} left = 0 max_length = 0 max_substr = -1 for right in range(n): char = s[right] char_count[char] = char_count.get(char, 0) + 1 while len(char_count) > k: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 if len(char_count) == k: current_length = right - left + 1 if current_length > max_length: max_length = current_length max_substr = s[left:right+1] return max_substr"},{"question":"Write a python function to generate all prime numbers up to a given limit using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(limit): Generate all prime numbers up to the given limit using the Sieve of Eratosthenes algorithm. Parameters: limit (int): The upper boundary of the range to find prime numbers in (inclusive). Returns: list: A list of prime numbers up to the given limit. if limit < 2: return [] sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit + 1, start): sieve[multiple] = False return [number for number in range(2, limit + 1) if sieve[number]]"},{"question":"Write a python function to solve a quadratic equation in the form ax^2 + bx + c = 0. The function should return a tuple containing the solutions. If there are two real solutions, both should be included. If there is one real solution (a repeated root), the tuple should contain that solution only once. If there are no real solutions, the function should return a tuple with np.nan as the only element.","solution":"import math import numpy as np def solve_quadratic(a, b, c): Solves a quadratic equation of the form ax^2 + bx + c = 0. Parameters: - a: coefficient of x^2 (non-zero value) - b: coefficient of x - c: constant term Returns: - tuple containing the solutions: - if two distinct real solutions, both are included - if one real solution (repeated root), it is included only once - if no real solutions, returns a tuple with np.nan discriminant = b**2 - 4*a*c if discriminant > 0: root1 = (-b + math.sqrt(discriminant)) / (2*a) root2 = (-b - math.sqrt(discriminant)) / (2*a) return (root1, root2) elif discriminant == 0: root = -b / (2*a) return (root, ) else: return (np.nan, )"},{"question":"Write a python function to find the reverse of a string using recursion. The function should not use any built-in string methods for reversing.","solution":"def reverse_string_recursively(s): Returns the reverse of the input string using recursion. if len(s) == 0: return \\"\\" else: return s[-1] + reverse_string_recursively(s[:-1])"},{"question":"Write a python function to remove duplicates from a list. One line solution.","solution":"def remove_duplicates(lst): Removes duplicates from a list. return list(set(lst))"},{"question":"Write a python function to find the first recurring element in a list. If no element recurs, return -1. The list is not necessarily sorted.","solution":"def first_recurring_element(arr): Returns the first recurring element in arr. If no element recurs, returns -1. seen = set() for element in arr: if element in seen: return element seen.add(element) return -1"},{"question":"Write a python function to extract characters from a string based on their ASCII values. If the ASCII value of a character is even, include it in the output string. If the ASCII value of a character is odd, exclude it from the output string.","solution":"def extract_even_ascii_characters(s): Extracts characters from a string based on their ASCII values. If the ASCII value of a character is even, includes it in the output string. If the ASCII value of a character is odd, excludes it from the output string. return ''.join([char for char in s if ord(char) % 2 == 0])"},{"question":"Write a python function to display numbers from 1 to 5 using a while loop.","solution":"def display_numbers(): Displays numbers from 1 to 5 using a while loop. number = 1 numbers_list = [] while number <= 5: numbers_list.append(number) number += 1 return numbers_list"},{"question":"Write a python function to calculate the sum of the first n natural numbers. How would you approach this problem using recursion?","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers using recursion. :param n: The first n natural numbers. :type n: int :return: Sum of the first n natural numbers. :rtype: int if n <= 0: return 0 else: return n + sum_of_natural_numbers(n - 1)"},{"question":"Write a python function to find the shortest subarray with the given sum in a list of integers. The subarray should have the minimum length. If there is no such subarray, return -1.","solution":"def min_length_subarray_with_sum(nums, target): Finds the length of the shortest subarray with the given sum in a list of integers. n = len(nums) min_len = float('inf') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= target: min_len = min(min_len, end - start + 1) current_sum -= nums[start] start += 1 return min_len if min_len != float('inf') else -1"},{"question":"Write a python function to read the contents of a file and print each line in reverse order.","solution":"def print_reversed_file(file_path): Reads the contents of a file and prints each line in reverse order. with open(file_path, 'r') as file: lines = file.readlines() reversed_lines = [line[::-1] for line in lines] for reversed_line in reversed_lines: print(reversed_line.strip())"},{"question":"Write a python function to reverse a string without using built-in functions, and without using a temporary variable to swap characters. Python has slicing ability, but to challenge yourself, avoid using string slicing.","solution":"def reverse_string(s): Returns the reversed string of the input string s without using built-in functions or temporary variables for swapping. # Convert the string to a list because strings are immutable in Python s = list(s) start, end = 0, len(s) - 1 while start < end: # Swap characters s[start], s[end] = s[end], s[start] start += 1 end -= 1 # Convert the list back to a string return ''.join(s)"},{"question":"Write a python function to determine if a given list contains all elements from another list in the same order.","solution":"def contains_subsequence(list1, list2): Determines if list1 contains all elements from list2 in the same order. it = iter(list1) return all(elem in it for elem in list2)"},{"question":"Write a python function to calculate the factorial of a number. The function should handle both positive integers and floats. However, for floats, the function should return a string that indicates the number is not an integer.","solution":"def factorial(n): Returns the factorial of a non-negative integer \`n\`. If \`n\` is not an integer or if it is negative, a descriptive message is returned. if not isinstance(n, int): return \\"The number is not an integer.\\" if n < 0: return \\"Factorial is not defined for negative numbers.\\" if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to find all the anagrams of a given string. Your function should find all the permutations of the string that are anagrams of each other and return them as a list of lists. For example, if the input is 'abc', the output should be [['abc', 'acb', 'bac', 'bca', 'cab', 'cba']].","solution":"from itertools import permutations def find_anagrams(s): Find all the anagrams of a given string. :param s: The input string :return: A list of lists containing all anagrams perm = set(permutations(s)) return [list(map(''.join, perm))]"},{"question":"Write a python function to return the sum of all the digits in a given string.","solution":"def sum_of_digits_in_string(s): Returns the sum of all the digits in the given string. Parameters: s (str): Input string Returns: int: Sum of all the digits in the string return sum(int(char) for char in s if char.isdigit())"},{"question":"Write a python function to find the number of unique substrings of length 3 in a given string.","solution":"def unique_substrings_of_length_3(s): Returns the number of unique substrings of length 3 in the given string s. unique_substrings = set() for i in range(len(s) - 2): substring = s[i:i+3] unique_substrings.add(substring) return len(unique_substrings)"},{"question":"Write a python function to get the Fibonacci sequence up to a given number n. The function should return a list containing the Fibonacci sequence from 0 up to but not including the number n.","solution":"def fibonacci_sequence(n): Returns a list containing the Fibonacci sequence up to but not including n. Parameters: n (int): The upper limit number for the Fibonacci sequence. Returns: list: A list containing the Fibonacci sequence up to but not including n. if n <= 0: return [] sequence = [0] if n == 1: return sequence a, b = 0, 1 while b < n: sequence.append(b) a, b = b, a + b return sequence"},{"question":"Write a python function to calculate the average of a list of numbers. Also, include error handling for invalid inputs.","solution":"def calculate_average(numbers): Returns the average of a list of numbers. If the input is not a list or contains non-numeric values, raises a ValueError. if not isinstance(numbers, list): raise ValueError(\\"Input must be a list.\\") if not all(isinstance(num, (int, float)) for num in numbers): raise ValueError(\\"All elements in the list must be numbers.\\") if not numbers: return 0 return sum(numbers) / len(numbers)"},{"question":"Write a python function to reverse the order of strings in a given sentence. The function should ignore any leading or trailing spaces and reverse the words only. For example, for the input \\" The world is full of rain \\", the function should return \\"rain of full is world The\\".","solution":"def reverse_words(sentence): Reverses the order of words in the given sentence. Args: sentence (str): The input sentence with possible leading/trailing spaces. Returns: str: A sentence with words in reverse order without leading/trailing spaces. # Strip leading/trailing whitespaces and split the sentence into words words = sentence.strip().split() # Reverse the list of words reversed_words = words[::-1] # Join them back into a single string with a space separating the words return ' '.join(reversed_words)"},{"question":"Write a python function to remove duplicates from a list of lists, where duplicates are defined as sublists that are identical. your function should return a new list of lists with no duplicates.","solution":"def remove_duplicates(list_of_lists): Remove duplicate sublists from a list of lists, where duplicates are identical sublists. Parameters: list_of_lists (list of lists): A list containing sublists. Returns: list of lists: A new list with duplicate sublists removed. seen = [] for sublist in list_of_lists: if sublist not in seen: seen.append(sublist) return seen"},{"question":"Write a python function to search for a given number in a list using the Binary Search algorithm. The list is sorted in ascending order. The function should return the index of the number if found, otherwise return -1.","solution":"def binary_search(arr, target): Performs binary search on a sorted list to find the index of the target. If the target is not found, returns -1. Parameters: arr (list): A list of elements sorted in ascending order. target (int/float): The element to search for in the list. Returns: int: The index of the target if found, otherwise -1. low = 0 high = len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return -1"},{"question":"Write a python function to calculate the sum and product of a list of numbers.","solution":"def sum_and_product(numbers): Returns the sum and product of a list of numbers. :param numbers: List of numbers. :return: Tuple containing the sum and the product of the numbers. total_sum = sum(numbers) total_product = 1 for number in numbers: total_product *= number return total_sum, total_product"},{"question":"Write a python function to check if a given integer x is divisible by all numbers in a given list 'nums'.","solution":"def is_divisible_by_all(x, nums): Returns True if x is divisible by all numbers in the list nums, otherwise returns False. :param x: int :param nums: list of int :return: bool for num in nums: if num == 0 or x % num != 0: return False return True"},{"question":"Write a python function to find the maximum number in a given list of numbers. The function should handle both positive and negative numbers.","solution":"def find_maximum(numbers): Returns the maximum number in the given list of numbers. if not numbers: raise ValueError(\\"The list is empty\\") max_number = numbers[0] for num in numbers[1:]: if num > max_number: max_number = num return max_number"},{"question":"Write a python function to find the smallest common multiple of two numbers given as parameters. The function should return the smallest positive integer that is evenly divisible by both numbers (the least common multiple, LCM). The input numbers will be positive integers.","solution":"import math def smallest_common_multiple(a, b): Returns the smallest common multiple (LCM) of two positive integers a and b. return abs(a * b) // math.gcd(a, b)"},{"question":"Write a python function to initialize an N-dimensional array with random numbers. Here's an example: Initialize a 3-dimentional array of size 2x2x2 with random floats from 0 to 1.","solution":"import numpy as np def initialize_nd_array(shape, low=0.0, high=1.0): Initializes an N-dimensional array with random numbers within the specified range. Parameters: shape (tuple): Shape of the desired N-dimensional array. low (float): Lower bound of random numbers (inclusive). Default is 0.0. high (float): Upper bound of random numbers (exclusive). Default is 1.0. Returns: np.ndarray: N-dimensional array with random numbers. return np.random.uniform(low, high, size=shape)"},{"question":"Write a python function to check whether a given string is a valid palindrome considering the condition that non-alphanumeric characters should be ignored, spaces should be ignored, and the case of the string should be ignored.","solution":"import re def is_palindrome(s): Returns True if the given string is a palindrome, ignoring non-alphanumeric characters, spaces, and case. Args: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Check if cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"Write a python function to find the smallest even number in a given list of integers. If no even number is found, the function should return -1.","solution":"def smallest_even(numbers): Returns the smallest even number in the given list of integers. If no even number is found, returns -1. even_numbers = [num for num in numbers if num % 2 == 0] if not even_numbers: return -1 return min(even_numbers)"},{"question":"Write a python function to convert a given hex string to its decimal equivalent.","solution":"def hex_to_decimal(hex_string): Converts a given hex string to its decimal equivalent. Parameters: hex_string (str): The hex string to convert Returns: int: The decimal equivalent of the hex string return int(hex_string, 16)"},{"question":"Write a python function to check if a string contains only unique characters. For example, the string \\"abcdef\\" has all unique characters, but the string \\"aabbcc\\" has duplicate characters. The function should return True if all characters in the string are unique, and False otherwise.","solution":"def has_unique_characters(s): Returns True if the string s contains only unique characters, otherwise False. return len(set(s)) == len(s)"},{"question":"Write a python function to compress a file to a zip file using Python's built-in \`zipfile\` library.","solution":"import zipfile import os def compress_file(input_filepath, output_zipfile): Compresses the specified file into a zip file. Parameters: input_filepath (str): The path of the file to compress. output_zipfile (str): The path where the zip file will be saved. with zipfile.ZipFile(output_zipfile, 'w', zipfile.ZIP_DEFLATED) as zipf: zipf.write(input_filepath, os.path.basename(input_filepath))"},{"question":"Write a python function to delete a node from a binary search tree. The function should take the root of the tree, the key (the value of the node to be deleted), and return the root of the modified tree.","solution":"class TreeNode: def __init__(self, key=0, left=None, right=None): self.key = key self.left = left self.right = right def delete_node(root, key): Deletes a node with the given key from the binary search tree rooted at the given root. Returns the root of the modified tree. if root is None: return root if key < root.key: root.left = delete_node(root.left, key) elif key > root.key: root.right = delete_node(root.right, key) else: if root.left is None: return root.right elif root.right is None: return root.left min_larger_node = get_min(root.right) root.key = min_larger_node.key root.right = delete_node(root.right, min_larger_node.key) return root def get_min(node): Finds the node with the minimum key in a binary search tree. current = node while current.left is not None: current = current.left return current"},{"question":"Write a python function to count and print the frequency of each element in a list. Use the collections.Counter class from the collections module to achieve this. Also, ensure that the function is designed to handle empty lists and outputs a informative message if no elements are present.","solution":"from collections import Counter def count_frequency(lst): Counts and prints the frequency of each element in the list. If the list is empty, prints an informative message. if not lst: return \\"The list is empty.\\" frequency = Counter(lst) return frequency"},{"question":"Write a python function to validate if a string is a valid identifier in Python. A valid identifier in Python must start with a letter (a-z, A-Z) or an underscore (_), followed by any number of letters, digits (0-9), or underscores. Your function should return \`True\` if the string is a valid identifier and \`False\` otherwise.","solution":"def is_valid_identifier(identifier): Returns True if identifier is a valid Python identifier, otherwise False. if not identifier: return False if not (identifier[0].isalpha() or identifier[0] == '_'): return False for char in identifier[1:]: if not (char.isalnum() or char == '_'): return False return True"},{"question":"Write a python function to find the duplicate number in an array of integers, where each element is between 1 and n (inclusive), and there is exactly one duplicate number.","solution":"def find_duplicate(nums): Given an array of integers where each element is between 1 and n (inclusive) and there is exactly one duplicate number, find the duplicate number. :param nums: List[int] - The input list of integers. :return: int - The duplicate number. # Initialize two pointers slow, fast = nums[0], nums[0] # Move slow pointer by 1 step and fast pointer by 2 steps to find the cycle while True: slow = nums[slow] fast = nums[nums[fast]] if slow == fast: break # Find the entrance to the cycle slow = nums[0] while slow != fast: slow = nums[slow] fast = nums[fast] return slow"},{"question":"Write a python function to print all numbers from 1 to 100, but only numbers that are divisible by 3 or 5.","solution":"def divisible_by_3_or_5(): Prints all numbers from 1 to 100 that are divisible by 3 or 5. result = [] for number in range(1, 101): if number % 3 == 0 or number % 5 == 0: result.append(number) return result"},{"question":"Write a python function to find the frequency of all distinct characters in a string. Use Python's collections \`Counter\` to achieve this. Additionally, the function should handle cases when the input string is empty.","solution":"from collections import Counter def char_frequency(s): Returns a dictionary with the frequency of all distinct characters in the input string. Parameters: s (str): The input string Returns: dict: A dictionary where keys are characters and values are their frequencies. return dict(Counter(s))"},{"question":"Write a python function to calculate the nth Fibonacci number. You are expected to provide a clear explanation in your answer.","solution":"def fibonacci(n): Returns the nth Fibonacci number. The Fibonacci sequence is a series of numbers in which each number (Fibonacci number) is the sum of the two preceding ones, usually starting with 0 and 1. That is, F(0) = 0, F(1) = 1 and F(n) = F(n-1) + F(n-2) for n > 1. Parameters: n (int): the position in the Fibonacci sequence to retrieve. Returns: int: the nth Fibonacci number. if n < 0: raise ValueError(\\"n should be a non-negative integer\\") elif n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to find the sum of all even numbers and the sum of all odd numbers in an array.","solution":"def sum_even_odd(numbers): Returns the sum of all even numbers and the sum of all odd numbers in the array. :param numbers: List[int] - The list of numbers. :return: Tuple[int, int] - A tuple containing the sum of even numbers and the sum of odd numbers. sum_even = sum(num for num in numbers if num % 2 == 0) sum_odd = sum(num for num in numbers if num % 2 != 0) return sum_even, sum_odd"},{"question":"Write a python function to implement a circular queue, which includes the operations: Enqueue (add an element to the rear of the queue), Dequeue (remove an element from the front of the queue), and IsEmpty (check if the queue is empty).","solution":"class CircularQueue: def __init__(self, size): Initialize the circular queue with a given size. self.size = size self.queue = [None] * size self.front = self.rear = -1 def enqueue(self, data): Add an element to the rear of the queue. if (self.rear + 1) % self.size == self.front: raise OverflowError(\\"Queue is full\\") if self.front == -1: # If the queue is initially empty self.front = 0 self.rear = (self.rear + 1) % self.size self.queue[self.rear] = data def dequeue(self): Remove an element from the front of the queue. if self.front == -1: # If the queue is empty raise IndexError(\\"Queue is empty\\") data = self.queue[self.front] self.queue[self.front] = None if self.front == self.rear: # Queue has only one element self.front = self.rear = -1 else: self.front = (self.front + 1) % self.size return data def is_empty(self): Check if the queue is empty. return self.front == -1"},{"question":"Write a python function to find the frequency of each word in a text file. The function should read the file, split the text into words, and then count the frequency of each word. The function should return a dictionary where the keys are the words and the values are the frequencies. Additionally, the function should handle any potential errors that may occur during file operations or word processing.","solution":"def word_frequency(file_path): Returns a dictionary where keys are words and values are their frequencies in the given text file. from collections import defaultdict word_count = defaultdict(int) try: with open(file_path, 'r') as file: text = file.read() # Normalize text to lower case and split into words words = text.lower().split() # Count frequencies for word in words: # Remove punctuation around the word cleaned_word = ''.join(char for char in word if char.isalnum()) if cleaned_word: word_count[cleaned_word] += 1 except Exception as e: print(f\\"Error occurred: {e}\\") return None return dict(word_count)"},{"question":"Write a python function to find the sum of squares of the first n natural numbers. You should ensure that the function is efficient and handles edge cases, such as when n is non-positive.","solution":"def sum_of_squares(n): Returns the sum of squares of the first n natural numbers. If n is non-positive, returns 0. if n <= 0: return 0 return n * (n + 1) * (2 * n + 1) // 6"},{"question":"Write a python function to calculate the nth Fibonacci number in a list. The function should return the nth Fibonacci number and its corresponding index in the list.","solution":"def nth_fibonacci_with_index(n): Returns the nth Fibonacci number and its index in the form of a tuple (Fibonacci number, index). :param n: The index (0-based) of the Fibonacci number to retrieve. :return: A tuple containing the nth Fibonacci number and its index. if n < 0: raise ValueError(\\"Index cannot be negative\\") if n == 0: return (0, 0) elif n == 1: return (1, 1) a, b = 0, 1 for i in range(2, n + 1): a, b = b, a + b return (b, n)"},{"question":"Write a python function to calculate the nth Fibonacci number using recursion. The function should have a memoization technique to optimize the computation.","solution":"def fibonacci(n, memo={}): Calculate the nth Fibonacci number using recursion with memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a python function to generate the Fibonacci sequence up to a given limit.","solution":"def fibonacci_sequence(limit): Generates the Fibonacci sequence up to a given limit. Args: limit (int): The upper limit for the Fibonacci sequence values. Returns: list: List containing the Fibonacci sequence up to the given limit. if limit < 0: raise ValueError(\\"Limit should be a non-negative integer.\\") sequence = [] a, b = 0, 1 while a <= limit: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a python function to implement the Insertion Sort algorithm on a list of integers, and return the sorted list.","solution":"def insertion_sort(lst): Sorts a list of integers using the Insertion Sort algorithm. for i in range(1, len(lst)): key = lst[i] j = i - 1 while j >= 0 and key < lst[j]: lst[j + 1] = lst[j] j -= 1 lst[j + 1] = key return lst"},{"question":"Write a python function to return the minimum window in s which will contain all the characters in t. If there is no such window in s, return the empty string \\"\\". If there is such a window, you should return the minimum length window in s. Examples: s = \\"ADOBECODEBANC\\", t = \\"ABC\\" Output: \\"BANC\\" Note : The minimum window is \\"BANC\\" because it contains all the characters in \\"t\\".","solution":"from collections import Counter def min_window(s, t): Returns the minimum window in s which contains all characters from t. if not t or not s: return \\"\\" t_counter = Counter(t) current_counter = Counter() start = 0 min_len = float(\\"inf\\") min_start = 0 required = len(t_counter) formed = 0 l = 0 for r in range(len(s)): char = s[r] current_counter[char] += 1 if char in t_counter and current_counter[char] == t_counter[char]: formed += 1 while l <= r and formed == required: char = s[l] if r - l + 1 < min_len: min_len = r - l + 1 min_start = l current_counter[char] -= 1 if char in t_counter and current_counter[char] < t_counter[char]: formed -= 1 l += 1 return \\"\\" if min_len == float(\\"inf\\") else s[min_start:min_start + min_len]"},{"question":"Write a python function to determine if a triangle is valid or not. A triangle is valid if the sum of any two sides is greater than the third side. The function should take three integers as input and输出True if the triangle is valid, False otherwise.","solution":"def is_valid_triangle(a, b, c): Determines if a triangle is valid based on the lengths of its sides. A triangle is valid if the sum of any two sides is greater than the third side. Args: a (int): The length of the first side. b (int): The length of the second side. c (int): The length of the third side. Returns: bool: True if the triangle is valid, False otherwise. return a + b > c and a + c > b and b + c > a"},{"question":"Write a python function to find the maximum sum of a subarray within a one-dimensional array of numbers which has been circularly wrapped around. In a circularly wrapped array, the end of the array connects back to the beginning.","solution":"def max_subarray_sum_circular(nums): Returns the maximum sum of a subarray within a one-dimensional array of numbers which has been circularly wrapped around. if not nums: return 0 total_sum = 0 max_sum = curr_max = float('-inf') min_sum = curr_min = float('inf') for num in nums: curr_max = max(curr_max + num, num) max_sum = max(max_sum, curr_max) curr_min = min(curr_min + num, num) min_sum = min(min_sum, curr_min) total_sum += num if max_sum > 0: return max(max_sum, total_sum - min_sum) else: return max_sum"},{"question":"Write a python function to solve the problem of finding the sum of all numbers from 1 to n that are divisible by both 3 and 5.","solution":"def sum_of_divisibles_by_3_and_5(n): Returns the sum of all numbers from 1 to n that are divisible by both 3 and 5. return sum(i for i in range(1, n+1) if i % 3 == 0 and i % 5 == 0)"},{"question":"Write a python function to calculate the factorial of a given number and provide a detailed explanation of the code that you write.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. For example, the factorial of 5 (denoted as 5!) is 5 * 4 * 3 * 2 * 1 = 120. Parameters: n (int): The non-negative integer whose factorial is to be calculated Returns: int: The factorial of the given number Raises: ValueError: If n is a negative integer if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to find all numbers in a given list that is divisible by a given number \`divisor\`.","solution":"def find_divisible_numbers(numbers, divisor): Returns a list of numbers from the input list that are divisible by the given divisor. Parameters: numbers (list): List of integers to check. divisor (int): The divisor to check divisibility against. Returns: list: A list of numbers from the input list that are divisible by the divisor. if divisor == 0: raise ValueError(\\"Divisor cannot be zero.\\") return [number for number in numbers if number % divisor == 0]"},{"question":"Write a python function to count the number of occurrences of the substring \\"cat\\" within a given string. The function should be case-insensitive.","solution":"def count_cat_occurrences(s): Returns the number of case-insensitive occurrences of 'cat' in the given string s. return s.lower().count('cat')"},{"question":"Write a python function to filter out emails from a list that contain invalid characters. In this function, invalid characters are defined as any characters other than letters, digits, “@”, “.”, and “_”.","solution":"import re def filter_invalid_emails(email_list): Filters out emails that contain invalid characters. Invalid characters are defined as any characters other than letters, digits, “@”, “.”, and “_”. pattern = re.compile(r'^[a-zA-Z0-9._@]+') valid_emails = [email for email in email_list if pattern.match(email)] return valid_emails"},{"question":"Write a python function to find the duplicate numbers in a list.","solution":"def find_duplicates(nums): Returns a list of duplicates in the given list nums. counts = {} duplicates = [] for num in nums: if num in counts: counts[num] += 1 else: counts[num] = 1 for num, count in counts.items(): if count > 1: duplicates.append(num) return duplicates"},{"question":"Write a python function to get the dates from a user-provided date range and format them as 'YYYY-MM-DD'.","solution":"from datetime import datetime, timedelta def get_dates_in_range(start_date, end_date): Returns a list of dates in the format 'YYYY-MM-DD' within the given date range. Args: start_date (str): The start date in 'YYYY-MM-DD' format. end_date (str): The end date in 'YYYY-MM-DD' format. Returns: List[str]: List of dates within the range, each formatted as 'YYYY-MM-DD'. start = datetime.strptime(start_date, '%Y-%m-%d') end = datetime.strptime(end_date, '%Y-%m-%d') date_list = [] current_date = start while current_date <= end: date_list.append(current_date.strftime('%Y-%m-%d')) current_date += timedelta(days=1) return date_list"},{"question":"Write a python function to compute the shortest distance from a given point to a list of points using the Euclidean distance formula.","solution":"from math import sqrt def euclidean_distance(point1, point2): Computes the Euclidean distance between two points. Each point is represented as a tuple of coordinates (x, y). return sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2) def shortest_distance(from_point, points_list): Computes the shortest Euclidean distance from \`from_point\` to a list of \`points_list\`. Each point is represented as a tuple of coordinates (x, y). Returns a tuple (shortest_distance, closest_point). if not points_list: return None, None closest_point = min(points_list, key=lambda point: euclidean_distance(from_point, point)) shortest_dist = euclidean_distance(from_point, closest_point) return shortest_dist, closest_point"},{"question":"Write a python function to reverse a string where the order of characters is reversed but the order of words is not changed.","solution":"def reverse_string(input_str): Reverses the characters in each word of the input_str while maintaining the order of the words. words = input_str.split(' ') reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a python function to calculate the sum of numbers in a given list using a recursive approach. I'm looking for a detailed explanation of how the function works and a step-by-step breakdown of the recursive process.","solution":"def recursive_sum(numbers): Returns the sum of numbers in a list using a recursive approach. Parameters: numbers (list): List of numbers to sum up. Returns: int/float: Sum of the numbers in the list. # Base case: if the list is empty, the sum is 0 if not numbers: return 0 # Recursive case: sum the first element and the sum of the rest of the list return numbers[0] + recursive_sum(numbers[1:])"},{"question":"Write a python function to find all the negative numbers in a given list and return their indices.","solution":"def find_negative_indices(lst): Returns a list of indices for all the negative numbers in the given list. Parameters: lst (list of int): the input list Returns: list of int: list containing indices of negative numbers return [index for index, value in enumerate(lst) if value < 0]"},{"question":"Write a python function to find the maximum and minimum values in a list of integers and return them as a tuple. If the list is empty, return None.","solution":"def find_max_min(lst): Returns a tuple containing the maximum and minimum values in the list. If the list is empty, returns None. if not lst: return None return (max(lst), min(lst))"},{"question":"Write a python function to implement DFS (Depth-First Search) traversal of a graph.","solution":"def dfs(graph, start): Perform Depth-First Search (DFS) traversal on a graph. :param graph: Dictionary representing the graph adjacency list :param start: Starting node for the DFS traversal :return: List of nodes in the order they were visited visited = set() result = [] def dfs_helper(node): if node not in visited: visited.add(node) result.append(node) for neighbor in graph.get(node, []): dfs_helper(neighbor) dfs_helper(start) return result"},{"question":"Write a python function to find the largest continuous sum in a list of integers.","solution":"def largest_continuous_sum(arr): This function finds the largest continuous sum in a list of integers. :param arr: List of integers :return: Largest continuous sum if len(arr) == 0: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to reverse a string. However, if the string contains any non-alphabet characters, ignore them and only reverse the alphabetical characters in the string.","solution":"def reverse_string_ignore_non_alpha(s): Reverses only the alphabetical characters in the string, ignoring non-alphabetical characters. Args: s (str): The input string. Returns: str: The string with only the alphabetical characters reversed, with non-alphabetical characters in place. # Extracting alphabetical characters and reversing them alphabetical_chars = [char for char in s if char.isalpha()] reversed_alphabetical_chars = alphabetical_chars[::-1] # Reconstructing the string with non-alphabetical characters in place result = [] alpha_index = 0 for char in s: if char.isalpha(): result.append(reversed_alphabetical_chars[alpha_index]) alpha_index += 1 else: result.append(char) return ''.join(result)"},{"question":"Write a python function to find the minimum number of moves required to convert one string to another by inserting, deleting, or replacing characters. The function should be named \`min_moves_to_convert\` and take two string arguments. The function should return an integer representing the minimum number of moves required.","solution":"def min_moves_to_convert(str1, str2): Returns the minimum number of moves required to convert str1 to str2 by inserting, deleting, or replacing characters. m = len(str1) r = len(str2) # Create a DP table to store results of subproblems dp = [[0 for x in range(r + 1)] for x in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(r + 1): if i == 0: dp[i][j] = j # Min. operations = j elif j == 0: dp[i][j] = i # Min. operations = i elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][r]"},{"question":"Write a python function to sort an array of integers in ascending order.","solution":"def sort_array(arr): Sorts an array of integers in ascending order. Parameters: arr (list of int): A list of integers to be sorted. Returns: list of int: The sorted list of integers. return sorted(arr)"},{"question":"Write a python function to find the first k minimum elements in a list of numbers using heap data structure. The function should return a list of these k minimum elements.","solution":"import heapq def find_k_min_elements(nums, k): Returns the first k minimum elements in the list nums. Parameters: nums (list): List of numbers k (int): Number of minimum elements to find Returns: list: List of k minimum elements if k <= 0: return [] return heapq.nsmallest(k, nums)"},{"question":"Write a python function to parse a JSON string and extract the value of a specific key. The function should take the JSON string and the key as input parameters. If the key is not found, the function should return None.","solution":"import json def extract_value(json_string, key): Parses a JSON string and extracts the value of a specific key. :param json_string: The JSON string to parse. :param key: The key whose value needs to be extracted. :return: The value of the key if found, otherwise None. try: parsed = json.loads(json_string) except json.JSONDecodeError: return None return parsed.get(key, None)"},{"question":"Write a python function to sort an array of non-negative integer numbers in ascending order using the QuickSort algorithm.","solution":"def quick_sort(arr): Sorts an array of non-negative integer numbers in ascending order using the QuickSort algorithm. if len(arr) <= 1: return arr else: pivot = arr[0] less_than_pivot = [x for x in arr[1:] if x <= pivot] greater_than_pivot = [x for x in arr[1:] if x > pivot] return quick_sort(less_than_pivot) + [pivot] + quick_sort(greater_than_pivot)"},{"question":"Write a python function to sort numbers presented as strings in a list. However, the sorting should not be based on the string representation but on their integer value.","solution":"def sort_numbers_as_strings(lst): Sorts numbers represented as strings based on their integer values. Arguments: lst -- a list of numbers as strings Returns: A sorted list of numbers as strings return sorted(lst, key=int)"},{"question":"Write a python function to sort an array of integers in descending order. You should include a docstring with the function explaining its purpose, input, and output. Additionally, the function should accept an optional parameter to determine if the sorting should be stable (i.e., maintain the relative order of equal elements).","solution":"def sort_descending(arr, stable=False): Sorts an array of integers in descending order. Parameters: arr (list): A list of integers to be sorted. stable (bool): Optional; if True, the sorting will be stable. Defaults to False. Returns: list: A new list of integers sorted in descending order. if stable: return sorted(arr, key=lambda x: -x, reverse=False) else: return sorted(arr, reverse=True)"},{"question":"Write a python function to compare two lists and return a list of elements that are common to both lists.","solution":"def common_elements(list1, list2): Returns a list of elements that are common to both list1 and list2. return list(set(list1).intersection(set(list2)))"},{"question":"Write a python function to test a number to see if it is prime or not. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Also, provide a test function with some example inputs to validate your prime-checking function.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True"},{"question":"Write a python function to find the next greater element of each element in the given list. The next greater element of a number x in the list is the first greater number to its right. If no such element exists, the answer is -1 for that position.","solution":"def next_greater_elements(lst): Finds the next greater element for each element in the list. The next greater element of a number x in the list is the first greater number to its right. If no such element exists, return -1 for that position. Parameters: lst (list): List of integers Returns: list: A list of integers where each element is the next greater element for the corresponding input list element result = [-1] * len(lst) stack = [] for i, num in enumerate(lst): while stack and lst[stack[-1]] < num: result[stack.pop()] = num stack.append(i) return result"},{"question":"Write a python function to calculate the factorial of a given number, but only if the number is odd.","solution":"def factorial_of_odd(n): Returns the factorial of the given number n if it is odd. Otherwise, returns None. if n % 2 == 0: return None if n == 0 or n == 1: return 1 factorial = 1 for i in range(1, n + 1): factorial *= i return factorial"},{"question":"Write a python function to remove duplicate characters in a given string while preserving the order of characters. You should use a single loop to achieve this.","solution":"def remove_duplicates(s): Removes duplicate characters from the given string while preserving the order of characters. :param s: The input string. :return: A new string with duplicate characters removed. seen = set() output = [] for char in s: if char not in seen: seen.add(char) output.append(char) return \\"\\".join(output)"},{"question":"Write a python function to find the sum of the digits of a given number. If the number is negative, the function should return None.","solution":"def sum_of_digits(number): Returns the sum of the digits of the given number. If the number is negative, return None. if number < 0: return None return sum(int(digit) for digit in str(number))"},{"question":"Write a python function to calculate the circumference of a circle given the radius.","solution":"import math def circumference(radius): Returns the circumference of a circle given the radius. return 2 * math.pi * radius"},{"question":"Write a python function to traverse a binary tree and find the depth of all nodes at a given level.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def nodes_at_level(root, level): Given the root of a binary tree and a level, return the values of all nodes at that level. :param root: TreeNode, the root of the binary tree :param level: int, the level to find nodes :return: list, values of the nodes at the given level if not root: return [] current_level = 0 queue = [(root, current_level)] result = [] while queue: current, depth = queue.pop(0) if depth == level: result.append(current.value) if current.left: queue.append((current.left, depth + 1)) if current.right: queue.append((current.right, depth + 1)) return result"},{"question":"Write a python function to print the numbers from 1 to n in ascending order.","solution":"def print_numbers(n): Prints the numbers from 1 to n in ascending order. for i in range(1, n + 1): print(i)"},{"question":"Write a python function to extract the complement of a binary string. To clarify, if the given binary string is \\"010\\", the complement of that string should be \\"101\\" (where every 1 is replaced by 0 and every 0 is replaced by 1).","solution":"def complement_binary_string(binary_string): Takes a binary string and returns its complement, where every 1 is replaced by 0 and every 0 is replaced by 1. return ''.join('1' if bit == '0' else '0' for bit in binary_string)"},{"question":"Write a python function to detect the mode value of an array and return it.","solution":"from collections import Counter def find_mode(arr): Returns the mode value of the array. If there are multiple mode values, return the smallest one. if not arr: return None count = Counter(arr) max_count = max(count.values()) modes = [key for key, value in count.items() if value == max_count] return min(modes)"},{"question":"Write a python function to calculate the smallest positive integer n such that the decimal number formed by concatenating n-1 copies of n equals a number whose decimal representation ends in all n's (also known as a repdigit).","solution":"def smallest_repdigit(): Calculate the smallest positive integer n such that the decimal number formed by concatenating n-1 copies of n equals a number whose decimal representation ends in all n's. def is_repdigit(s): return all(c == s[0] for c in s) n = 1 while True: concatenated = str(n) * (n - 1) if is_repdigit(concatenated + str(n)): return n n += 1"},{"question":"Write a python function to remove all the duplicate integers from a given list while maintaining the order of the elements.","solution":"def remove_duplicates(input_list): Removes duplicate integers from the input list while maintaining the order. Parameters: input_list (list): A list of integers Returns: list: A list with duplicates removed seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to sort a list of integers and return the sorted list. The list may contain both positive and negative integers. The function should use the provided sorting algorithm (like mergesort, quicksort, heapsort, etc.), but you do not need to implement the sorting algorithm from scratch. Instead, the function should use Python's built-in sorted() function.","solution":"def sort_integers(lst): Sorts a list of integers in ascending order and returns the sorted list. Parameters: lst (list): A list of integers Returns: list: The sorted list of integers return sorted(lst)"},{"question":"Write a python function to add two matrices using nested loops. You need to handle matrices of different sizes and return an appropriate message if the addition is not possible.","solution":"def add_matrices(matrix1, matrix2): Adds two matrices using nested loops. Handles matrices of different sizes and returns an appropriate message if addition is not possible. # Check if the dimensions match if len(matrix1) != len(matrix2) or any(len(row1) != len(row2) for row1, row2 in zip(matrix1, matrix2)): return \\"Addition not possible due to different matrix sizes.\\" # Initialize the result matrix with zeroes result_matrix = [[0 for _ in range(len(matrix1[0]))] for _ in range(len(matrix1))] # Add corresponding elements of matrix1 and matrix2 for i in range(len(matrix1)): for j in range(len(matrix1[0])): result_matrix[i][j] = matrix1[i][j] + matrix2[i][j] return result_matrix"},{"question":"Write a python function to reverse a string. You can't use the[::-1] slicing method. How can I achieve this?","solution":"def reverse_string(s): Returns the reversed string of s. reversed_str = '' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a python function to check if N is divisible by its sum of digits.","solution":"def is_divisible_by_sum_of_digits(N): Returns True if N is divisible by the sum of its digits, otherwise False. sum_of_digits = sum(int(digit) for digit in str(N)) return N % sum_of_digits == 0"},{"question":"Write a python function to remove duplicates from a sorted linked list. You can only use constant extra space.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_duplicates_from_sorted_list(head): Removes duplicates from a sorted linked list. :param ListNode head: The head of the sorted linked list. :return: The head of the list with duplicates removed. :rtype: ListNode current = head while current and current.next: if current.val == current.next.val: current.next = current.next.next else: current = current.next return head"},{"question":"Write a python function to check if a given number is a perfect square. Your function should return True if the number is a perfect square, otherwise False. Additionally, provide a brief explanation of the logic used in your function.","solution":"import math def is_perfect_square(n): Checks if a given number n is a perfect square. A number is a perfect square if the square root of the number is an integer. We can check this by calculating the square root of the number and then verifying if flooring the result and then squaring it gives back the original number. Parameters: - n (int): The number to check. Returns: - bool: True if n is a perfect square, False otherwise. if n < 0: return False # Negative numbers can't be perfect squares sqrt_n = math.isqrt(n) # Using math.isqrt to get integer square root directly return sqrt_n * sqrt_n == n"},{"question":"Write a python function to rotate a list to the right by a specified number of positions. If the number of positions is greater than the length of the list, the positions should wrap around. For example, rotating a list \`[1, 2, 3, 4, 5]\` by 2 positions should result in \`[4, 5, 1, 2, 3]\`.","solution":"def rotate_list(lst, positions): Rotates the list to the right by the specified number of positions. If positions is greater than the length of the list, it wraps around. if not lst: return lst positions %= len(lst) # Wrap around positions if greater than list length return lst[-positions:] + lst[:-positions]"},{"question":"Write a python function to validate a phone number. The phone number should match the format of a North American phone number, which is typically in the format of (XXX) XXX-XXXX or XXX-XXX-XXXX. The function should return True if the phone number is valid and False otherwise.","solution":"import re def validate_phone_number(phone_number): Validates if the given phone number matches the North American phone number format. Acceptable formats: (XXX) XXX-XXXX or XXX-XXX-XXXX. :param phone_number: The phone number string to be validated. :return: True if valid, False otherwise. pattern = re.compile(r'^((d{3}) d{3}-d{4}|d{3}-d{3}-d{4})') return bool(pattern.match(phone_number))"},{"question":"Write a python function to convert a list of integers to a string, where each integer is separated by a comma and a space.","solution":"def list_to_string(lst): Converts a list of integers to a string, where each integer is separated by a comma and a space. Parameters: lst (list): A list of integers. Returns: str: A string representation of the list with integers separated by a comma and a space. return ', '.join(map(str, lst))"},{"question":"Write a python function to create an HTML page from scratch with a header and a footer. The header should include a title and a subtitle, both of which are parameters of the function. The footer can have a copyright year as a parameter, and it should default to the current year if not provided. The function should return the HTML as a string.","solution":"from datetime import datetime def create_html_page(title, subtitle, copyright_year=None): Creates an HTML page with a header and a footer. Parameters: - title: The title for the header. - subtitle: The subtitle for the header. - copyright_year: The year to be displayed in the footer. Defaults to the current year if not provided. Returns: - A string containing the HTML content. if copyright_year is None: copyright_year = datetime.now().year html_content = f <!DOCTYPE html> <html lang=\\"en\\"> <head> <meta charset=\\"UTF-8\\"> <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\"> <title>{title}</title> </head> <body> <header> <h1>{title}</h1> <h2>{subtitle}</h2> </header> <footer> <p>&copy; {copyright_year}</p> </footer> </body> </html> return html_content.strip()"},{"question":"Write a python function to find all the indexes of an element in a given list. The function should take two parameters: a list and an element to search for. The function should return a list of indexes where the element is found. If the element is not found, the function should return an empty list.","solution":"def find_all_indexes(lst, element): Returns a list of indexes where the element is found in the input list. :param lst: List in which to search for the element. :param element: Element to search for in the list. :return: List of indexes where the element is found. return [i for i, x in enumerate(lst) if x == element]"},{"question":"Write a python function to find the longest increasing subsequence (LIS) in a list of numbers.","solution":"def longest_increasing_subsequence(arr): Returns the longest increasing subsequence (LIS) in a list of numbers. if not arr: return [] n = len(arr) lis = [1] * n # lis[i] means the length of the LIS ending at index i prev_index = [-1] * n # To reconstruct the actual LIS # Compute optimized LIS values in a bottom up manner for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 prev_index[i] = j # Find the maximum value in lis and its index max_value = max(lis) max_index = lis.index(max_value) # Reconstruct the LIS sequence longest_subseq = [] curr_index = max_index while curr_index != -1: longest_subseq.append(arr[curr_index]) curr_index = prev_index[curr_index] return longest_subseq[::-1]"},{"question":"Write a python function to reverse a list. Implement this function using list slicing.","solution":"def reverse_list(lst): Reverses a list using list slicing. Args: lst (list): The list to reverse. Returns: list: The reversed list. return lst[::-1]"},{"question":"Write a python function to find the n-th Fibonacci number using recursion. Your function should take an integer \`n\` as input and return the \`n-th\` Fibonacci number. Remember, the Fibonacci sequence starts with 0 (F(0) = 0) and 1 (F(1) = 1), and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci(n): Returns the n-th Fibonacci number using recursion. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a python function to print all odd numbers between two given numbers (inclusive).","solution":"def odd_numbers_between(start, end): Prints all odd numbers between two given numbers (inclusive). :param start: The starting number :param end: The ending number if start > end: start, end = end, start odd_numbers = [] for num in range(start, end + 1): if num % 2 != 0: odd_numbers.append(num) return odd_numbers"},{"question":"Write a python function to find the degree of a tree.","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] def degree_of_tree(root): if not root: return 0 max_degree = len(root.children) for child in root.children: child_degree = degree_of_tree(child) max_degree = max(max_degree, child_degree) return max_degree"},{"question":"Write a python function to return the last n items from a list.","solution":"def get_last_n_items(lst, n): Returns the last n items from the list lst. If n is greater than the length of the list, return the entire list. if n <= 0: return [] return lst[-n:]"},{"question":"Write a python function to find the length of the longest contiguous substring with exactly k distinct characters.","solution":"def longest_substring_with_k_distinct(s, k): Returns the length of the longest contiguous substring with exactly k distinct characters. Parameters: s (str): The input string. k (int): The exact number of distinct characters. Returns: int: The length of the longest substring with exactly k distinct characters. if k == 0: return 0 start = 0 max_length = 0 char_count = {} for end in range(len(s)): char_count[s[end]] = char_count.get(s[end], 0) + 1 # If more than k distinct characters, shrink the window while len(char_count) > k: char_count[s[start]] -= 1 if char_count[s[start]] == 0: del char_count[s[start]] start += 1 if len(char_count) == k: max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a python function to find the next node to be played based on the current player's move. In a Tic Tac Toe game, the function should determine the next available cell that has not been taken by either player on a 3x3 board. If all cells are taken, return -1 indicating no available move.","solution":"def find_next_move(board): Finds the next available cell in a 3x3 Tic Tac Toe board. Parameters: board (list of lists): A 3x3 list representing the Tic Tac Toe board. Each cell can be 'X', 'O', or '' (empty). Returns: tuple: A tuple (row, col) representing the position of the next available cell, or -1 if there are no available cells. for i in range(3): for j in range(3): if board[i][j] == '': return (i, j) return -1"},{"question":"Write a python function to convert a list of lists into a single flattened list.","solution":"def flatten_list(nested_list): Converts a list of lists into a single flattened list. return [element for sublist in nested_list for element in sublist] # Example Usage: # nested_list = [[1, 2], [3, 4], [5]] # print(flatten_list(nested_list)) # Output: [1, 2, 3, 4, 5]"},{"question":"Write a python function to convert a decimal number to binary using a stack data structure. The stack should be implemented using a list. The function should handle both positive and negative integers.","solution":"def decimal_to_binary(num): Converts a decimal number to binary using a stack data structure. if num == 0: return \\"0\\" is_negative = num < 0 num = abs(num) stack = [] while num > 0: stack.append(num % 2) num = num // 2 binary_str = ''.join(str(bit) for bit in reversed(stack)) return '-' + binary_str if is_negative else binary_str"},{"question":"Write a python function to implement a simple linear regression model that predicts the value of 'y' based on a single predictor 'x'. The function should take a list of tuples, where each tuple represents a pair of 'x' and 'y' values. The function should return the slope and intercept of the best-fit line, calculated using the least squares method.","solution":"def simple_linear_regression(data): Performs simple linear regression to find the best-fit line for the given data. Args: - data (list of tuples): A list of (x, y) pairs. Returns: - slope (float): Slope of the best-fit line. - intercept (float): Intercept of the best-fit line. n = len(data) if n == 0: raise ValueError(\\"Data cannot be empty\\") sum_x = sum_y = sum_xy = sum_x_squared = 0 for x, y in data: sum_x += x sum_y += y sum_xy += x * y sum_x_squared += x * x x_mean = sum_x / n y_mean = sum_y / n numerator = sum_xy - (sum_x * sum_y / n) denominator = sum_x_squared - (sum_x * sum_x / n) if denominator == 0: raise ValueError(\\"The denominator is zero, can't compute the slope\\") slope = numerator / denominator intercept = y_mean - slope * x_mean return slope, intercept"},{"question":"Write a python function to return the number of words in a given string. Words are defined as sequences of characters separated by whitespace. You should count punctuation as part of a word.","solution":"def count_words(s): Returns the number of words in the given string. Words are sequences of characters separated by whitespace. if not isinstance(s, str): raise ValueError(\\"Input must be a string.\\") return len(s.split())"},{"question":"Write a python function to solve the Sudoku puzzle.","solution":"def is_valid(board, row, col, num): for x in range(9): if board[row][x] == num or board[x][col] == num: return False start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[i + start_row][j + start_col] == num: return False return True def solve_sudoku(board): empty = find_empty_location(board) if not empty: return True row, col = empty for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve_sudoku(board): return True board[row][col] = 0 return False def find_empty_location(board): for i in range(9): for j in range(9): if board[i][j] == 0: return (i, j) return None"},{"question":"Write a python function to receive user input as a string and return a new string. The new string should contain only the characters that are common to all three input strings.","solution":"def common_characters(str1, str2, str3): Returns a string containing only the characters that are common to all three input strings. common_set = set(str1) & set(str2) & set(str3) return ''.join(sorted(common_set))"},{"question":"Write a python function to calculate the total commission on a given amount of sales. The commission rate is 5% and the sales tax is 3%. Also, add a hotel tax of 10% to the total. Finally, calculate and return the net amount including the commission, sales tax, and hotel tax.","solution":"def calculate_total_amount(sales_amount): Calculates the total amount including commission, sales tax, and hotel tax. Parameters: sales_amount (float): The initial sales amount. Returns: float: The total amount including all taxes and commission. commission_rate = 0.05 sales_tax_rate = 0.03 hotel_tax_rate = 0.10 commission = sales_amount * commission_rate sales_tax = sales_amount * sales_tax_rate hotel_tax = sales_amount * hotel_tax_rate total_amount = sales_amount + commission + sales_tax + hotel_tax return total_amount"},{"question":"Write a python function to reverse the elements of a list. The function should be named \`reverse_list\` and take a list \`lst\` as an argument. It should return a new list that is the reverse of the input list.","solution":"def reverse_list(lst): Returns a new list that is the reverse of the input list \`lst\`. return lst[::-1]"},{"question":"Write a python function to reverse the elements of a list in place without using any extra space, and with a time complexity of O(n).","solution":"def reverse_list_in_place(lst): Reverses the elements of the list in place. left = 0 right = len(lst) - 1 while left < right: # Swap the elements lst[left], lst[right] = lst[right], lst[left] # Move pointers towards the center left += 1 right -= 1 return lst # Return statement is not necessary for in place, but added for clarity"},{"question":"Write a python function to remove the nth element from the linked list and return the head of the linked list. Assume that the list is not empty and n is always a valid index.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_nth_from_end(head, n): Removes the nth node from the end of the list and returns the head. # Initialize a dummy node which simplifies edge cases dummy = ListNode(0) dummy.next = head first = dummy second = dummy # Move first n+1 steps so the gap between first and second is n nodes for _ in range(n + 1): first = first.next # Move first to the end, maintaining the gap while first is not None: first = first.next second = second.next # Skip the desired node second.next = second.next.next return dummy.next"},{"question":"Write a python function to count the total number of vowels in a user-input string. The function should return the count. For example, if the input is \\"Hello World\\", the function should return 3.","solution":"def count_vowels(input_string): Returns the total number of vowels in the input_string. :param input_string: str :return: int vowels = 'aeiouAEIOU' count = 0 for char in input_string: if char in vowels: count += 1 return count"},{"question":"Write a python function to count the number of words in a sentence. The function should ignore leading and trailing spaces and consider words as occurrences of sequence characters separated by spaces.","solution":"def count_words(sentence): Returns the number of words in a sentence. Words are sequences of characters separated by spaces. Leading and trailing spaces are ignored. return len(sentence.strip().split())"},{"question":"Write a python function to remove the sixth character from a given string. The function should return the modified string.","solution":"def remove_sixth_character(s): Removes the sixth character from the given string. :param s: The input string :return: The modified string with the sixth character removed # Check if the string is at least 6 characters long if len(s) >= 6: return s[:5] + s[6:] return s # If string is less than 6 characters long, return it as is."},{"question":"Write a python function to create a dictionary that contains the counts of characters in a given string.","solution":"def character_count(s): Returns a dictionary with counts of each character in the string s. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Write a python function to calculate the sum of the squares of the first n natural numbers and the sum of the cubes of the first n natural numbers. Additionally, write a portion of the code that initializes these sums to zero before starting the calculations.","solution":"def sums_of_squares_and_cubes(n): Calculate the sum of the squares and the sum of the cubes of the first n natural numbers. Parameters: n (int): The upper limit of the natural numbers to calculate the sums. Returns: (int, int): A tuple containing the sum of the squares and the sum of the cubes respectively. sum_of_squares = 0 sum_of_cubes = 0 for i in range(1, n + 1): sum_of_squares += i * i sum_of_cubes += i * i * i return sum_of_squares, sum_of_cubes"},{"question":"Write a python function to find the nearest greater node in a Binary Search Tree (BST) for each node's value. You need to return the results in a list where the index represents the index of the original node's value and the value at that index represents the nearest greater node value. If a node in the BST does not have a nearest greater node, then the value at that index should be -1.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_nearest_greater_node_in_bst(root): Given the root of a Binary Search Tree (BST), this function finds the nearest greater node in the BST for each node's value. It returns a dictionary where each key is the node's value and each value is the nearest greater node's value. If there is no greater node, the value should be -1. :param root: TreeNode, the root of the BST :return: dict, dictionary with node value as key and nearest greater node value as value def inorder_traversal(node): if not node: return [] return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) def find_next_larger_value(inorder, value): for val in inorder: if val > value: return val return -1 inorder = inorder_traversal(root) nearest_greater = {val: find_next_larger_value(inorder, val) for val in inorder} return nearest_greater def nearest_greater_node_list(bst_values, root): Given a list of node values and the root of a Binary Search Tree (BST), this function returns a list where the index represents the index of the original node's value and the value at that index represents the nearest greater node value in the BST. If a node in the BST does not have a nearest greater node, then the value at that index should be -1. :param bst_values: List[int], list of node values in the BST :param root: TreeNode, the root of the BST :return: List[int], list of nearest greater node values nearest_greater = find_nearest_greater_node_in_bst(root) return [nearest_greater[val] for val in bst_values]"},{"question":"Write a python function to print the nodes of binary tree at a given level (level). Assume tree root node is at level 0. If the tree is empty, it should print nothing. If the level is not found, it should print an empty line.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def print_nodes_at_level(root, level): Prints the nodes of a binary tree at a given level. If the tree is empty or the level is not found, it prints nothing. if root is None: return if level == 0: print(root.value, end=' ') return if root.left is not None: print_nodes_at_level(root.left, level - 1) if root.right is not None: print_nodes_at_level(root.right, level - 1)"},{"question":"Write a python function to return the number of 1 bits (also known as the Hamming weight) in the integer's binary representation.","solution":"def hamming_weight(n): Returns the number of 1 bits (Hamming weight) in the binary representation of the given integer n. return bin(n).count('1')"},{"question":"Write a python function to calculate the number of停车位 in a parking lot.","solution":"def calculate_parking_spots(total_spots, used_spots): Calculate the number of available parking spots in a parking lot. Parameters: total_spots (int): Total number of parking spots in the parking lot. used_spots (int): Number of parking spots currently being used. Returns: int: Number of available parking spots. if total_spots < 0 or used_spots < 0 or used_spots > total_spots: raise ValueError(\\"Invalid input: total_spots and used_spots must be non-negative, and used_spots must not exceed total_spots.\\") return total_spots - used_spots"},{"question":"Write a python function to calculate the sum of squares of the three largest numbers in a given list. If the list is empty or contains less than three numbers, return 0.","solution":"def sum_of_squares_of_largest_three(numbers): Returns the sum of squares of the three largest numbers in the given list. If the list contains less than three numbers, returns 0. if len(numbers) < 3: return 0 largest_three = sorted(numbers, reverse=True)[:3] return sum(x**2 for x in largest_three)"},{"question":"Write a python function to find the maximum number between two given numbers using recursion.","solution":"def max_recursive(a, b): Returns the maximum of two numbers a and b using recursion. if a == b: return a elif a > b: return a else: return max_recursive(b, a)"},{"question":"Write a python function to find the kth largest element in an array. The function should return the kth largest element after sorting the array in descending order.","solution":"def kth_largest_element(arr, k): Find the kth largest element in an array. Parameters: arr (list): The list of elements. k (int): The kth position in descending order to find the element. Returns: int/float: The kth largest element in the array. if not arr or k < 1 or k > len(arr): raise ValueError(\\"Invalid input: array must be non-empty and k must be within the range of the array length\\") sorted_arr = sorted(arr, reverse=True) return sorted_arr[k-1]"},{"question":"Write a python function to print a diamond pattern using asterisks (\`*\`). The function should take an integer \`n\` as input, where \`n\` is the number of layers of the diamond pattern. The function should print a diamond pattern with \`n\` layers, centered on the console.","solution":"def print_diamond(n): Prints a diamond pattern with \`n\` layers, where \`n\` is the number of layers. Parameters: n (int): Number of layers of the diamond pattern. if n <= 0: return # Top part of the diamond for i in range(n): print(' ' * (n - i - 1) + '*' * (2 * i + 1)) # Bottom part of the diamond for i in range(n - 2, -1, -1): print(' ' * (n - i - 1) + '*' * (2 * i + 1))"},{"question":"Write a python function to print numbers from 0 to 9, but stop the loop when the number is greater than 3.","solution":"def print_numbers(): Prints numbers from 0 to 9, but stops the loop when the number is greater than 3. for number in range(10): if number > 3: break print(number)"},{"question":"Write a python function to find the number of ways to make some change for a given amount \`n\`. You have an unlimited collection of each kind of coin.","solution":"def count_ways_to_make_change(coins, n): Returns the number of ways to make change for a given amount \`n\` using an unlimited collection of specified coins. :param coins: List of coin denominations :param n: The target amount :return: Number of ways to make change # Initialize a list to store the ways to make change for each value from 0 to n dp = [0] * (n + 1) # There is one way to make change for 0 amount - no coin dp[0] = 1 # Iterate through every coin for coin in coins: # Update the dp list for values from coin to n for amount in range(coin, n + 1): dp[amount] += dp[amount - coin] return dp[n]"},{"question":"Write a python function to identify all unique the anagrams of a given word. An anagram is a word formed by rearranging the letters of another word, such as \\"cinema\\", formed from \\"iceman\\".","solution":"from itertools import permutations def find_unique_anagrams(word): Returns a list of unique anagrams formed by rearranging the letters of the given word. # Obtain all possible permutations of the word perm = permutations(word) # Use a set to eliminate duplicate anagrams unique_anagrams = set(''.join(p) for p in perm) # Convert the set back to a list for the final result return list(unique_anagrams)"},{"question":"Write a python function to check if a given number is a perfect square. If it is, return the square root of the number; if not, return the nearest smaller perfect square root. For example, if the function is given the number 17, it should return 4 since 4^2 = 16 is the nearest smaller perfect square root.","solution":"import math def perfect_square_root(n): Check if the given number n is a perfect square. If it is, return its square root. If not, return the nearest smaller perfect square root. root = int(math.sqrt(n)) if root * root == n: return root else: return root"},{"question":"Write a python function to find the two smallest distinct numbers in a list.","solution":"def two_smallest_distinct_numbers(numbers): Returns a tuple of the two smallest distinct numbers in the list. :param numbers: List of integers :return: Tuple of two smallest distinct integers if len(numbers) < 2: raise ValueError(\\"List must contain at least two distinct numbers\\") distinct_numbers = list(set(numbers)) if len(distinct_numbers) < 2: raise ValueError(\\"List must contain at least two distinct numbers\\") smallest = float('inf') second_smallest = float('inf') for number in distinct_numbers: if number < smallest: second_smallest = smallest smallest = number elif number < second_smallest: second_smallest = number return (smallest, second_smallest)"},{"question":"Write a python function to find the number of two-digit numbers that can be formed where the number is divisible by 7.","solution":"def count_two_digit_multiples_of_seven(): Returns the count of two-digit numbers that are divisible by 7. count = 0 for number in range(10, 100): if number % 7 == 0: count += 1 return count"},{"question":"Write a python function to find the nth Fibonacci number. The function should take an integer n as input and return the nth Fibonacci number.","solution":"def fibonacci(n): Returns the nth Fibonacci number. :param n: Position in the Fibonacci sequence :return: The nth Fibonacci number if n <= 0: return \\"Invalid input\\" elif n == 1: return 0 elif n == 2: return 1 else: a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a python function to merge two sorted lists without using any additional space. Assume that both lists are sorted in non-decreasing order.","solution":"def merge_sorted_lists(arr1, arr2): Merges two sorted lists into one sorted list without using extra space. Assume both lists are sorted in non-decreasing order. i, j = 0, 0 merged_list = [] while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_list.append(arr1[i]) i += 1 else: merged_list.append(arr2[j]) j += 1 # Append remaining elements while i < len(arr1): merged_list.append(arr1[i]) i += 1 while j < len(arr2): merged_list.append(arr2[j]) j += 1 return merged_list"},{"question":"Write a python function to generate binary bitstring representations of all integers from 1 to n inclusive in sorted order.","solution":"def generate_bitstrings(n): Returns a list of binary bitstring representations of all integers from 1 to n inclusive in sorted order. return [bin(i)[2:] for i in range(1, n+1)]"},{"question":"Write a python function to sort an array \`arr[]\` of size \`n\` in ascending order using a lambda function.","solution":"def sort_array(arr): Sorts an array in ascending order using a lambda function. return sorted(arr, key=lambda x: x)"},{"question":"Write a python function to reverse the order of the characters of a string N times. For example, if the string is 'abcde' and N is 2, the output should be 'edcba'.","solution":"def reverse_string_n_times(s, n): Reverses the order of characters of the string \`s\` N times. If N is even, the string will be the same as input. If N is odd, the string will be reversed. if n % 2 == 0: return s else: return s[::-1]"},{"question":"Write a python function to find the number of pairs (x, y) in an array such that their XOR is zero and both x and y are distinct.","solution":"def count_zero_xor_pairs(arr): Returns the count of pairs (x, y) such that their XOR is zero and both x and y are distinct. from collections import defaultdict # Dictionary to maintain count of occurrences count_dict = defaultdict(int) # Count the occurrences of each element for num in arr: count_dict[num] += 1 # Calculate the pairs pairs_count = 0 for key in count_dict: if count_dict[key] > 1: # If an element occurs n times we can pick any 2 out of n (nC2 = n * (n - 1) / 2) pairs_count += (count_dict[key] * (count_dict[key] - 1)) // 2 return pairs_count"},{"question":"Write a python function to find the number of ways to arrange \`n\` distinct objects into a circular permutation.","solution":"def circular_permutations(n): Returns the number of ways to arrange n distinct objects into a circular permutation. According to combinatorial mathematics, this is given by (n-1)!. if n <= 0: raise ValueError(\\"Number of objects must be a positive integer.\\") # Special case for single object arrangement which is 1 way if n == 1: return 1 factorial = 1 for i in range(2, n): factorial *= i return factorial"},{"question":"Write a python function to reverse a linked list in-place. The function should take a singly linked list as input and reverse it without using any extra space.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses the singly linked list in place. Parameters: head (ListNode): The head of the singly linked list to be reversed. Returns: ListNode: The new head of the reversed linked list. prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a python function to find the maximum profit from trading stocks on the stock market.","solution":"def max_profit(prices): Returns the maximum profit from trading stocks given an array of prices. :param prices: List of prices where prices[i] is the price of a given stock on day i. :return: Maximum profit possible. if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a python function to find the sum of all the positive integers less than a given number \`n\` that are divisible by both 3 and 5.","solution":"def sum_of_divisibles(n): Returns the sum of all the positive integers less than \`n\` that are divisible by both 3 and 5. return sum(x for x in range(1, n) if x % 3 == 0 and x % 5 == 0)"},{"question":"Write a python function to determine if two linked lists intersect.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def get_intersection_node(headA, headB): Returns the node at which the intersection of two singly linked lists begins, or None if there is no intersection. if not headA or not headB: return None # Calculate lengths of both linked lists lenA = lenB = 0 currentA, currentB = headA, headB while currentA: lenA += 1 currentA = currentA.next while currentB: lenB += 1 currentB = currentB.next # Move the starting point of the longer list to make lengths equal currentA, currentB = headA, headB if lenA > lenB: for _ in range(lenA - lenB): currentA = currentA.next elif lenB > lenA: for _ in range(lenB - lenA): currentB = currentB.next # Traverse both lists in tandem until a common node is found while currentA and currentB: if currentA == currentB: return currentA currentA = currentA.next currentB = currentB.next return None"},{"question":"Write a python function to count the frequency of each letter in a given string. The function should return a dictionary where the keys are the letters and the values are the frequencies.","solution":"def count_letter_frequency(s): Returns a dictionary with the frequency of each letter in the given string s. frequency = {} for letter in s: if letter.isalpha(): # Only counting letters, ignoring other characters letter = letter.lower() # Convert to lower case to ensure case insensitivity if letter in frequency: frequency[letter] += 1 else: frequency[letter] = 1 return frequency"},{"question":"Write a python function to compute the sqrt of a number using the Newton-Raphson method. The function should take a single positive integer as input and return the square root of the number accurate up to 3 decimal places.","solution":"def newton_sqrt(n): Computes the square root of the given number using the Newton-Raphson method. Parameters: n (int): The number to compute the square root of. Must be positive. Returns: float: The square root of the number accurate up to 3 decimal places. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") tolerance = 0.0001 guess = n / 2.0 while True: next_guess = (guess + n / guess) / 2 if abs(guess - next_guess) < tolerance: return round(next_guess, 3) guess = next_guess"},{"question":"Write a python function to swap two numbers using tuple packing and unpacking. Explain the code step-by-step.","solution":"def swap_numbers(a, b): Swap the values of a and b using tuple packing and unpacking. Parameters: a: first number b: second number Returns: swapped values of a and b # Swapping using tuple packing and unpacking a, b = b, a return a, b"},{"question":"Write a python function to ignore empty strings from a list of strings and print the length of the new list.","solution":"def count_non_empty_strings(strings): Returns the count of non-empty strings in the list. :param strings: List of strings :return: Count of non-empty strings return len([s for s in strings if s])"},{"question":"Write a python function to check if a given string contains any numeric digits.","solution":"def contains_digit(s): Checks if the given string contains any numeric digits. Parameters: s (str): The input string to be checked. Returns: bool: True if the string contains any numeric digits, otherwise False. return any(char.isdigit() for char in s)"},{"question":"Write a python function to generate a list of unique prime numbers up to a given number n using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Generate a list of unique prime numbers up to a given number n using the Sieve of Eratosthenes algorithm. if n < 2: return [] primes = [] is_prime = [True] * (n + 1) is_prime[0], is_prime[1] = False, False # 0 and 1 are not prime numbers for num in range(2, n + 1): if is_prime[num]: primes.append(num) for multiple in range(num * num, n + 1, num): is_prime[multiple] = False return primes"},{"question":"Write a python function to check whether a string is a palindrome using a stack. A palindrome is a sequence that reads the same backward as forward, e.g., \\"madam\\" or \\"racecar\\".","solution":"def is_palindrome(s): Checks if the given string s is a palindrome using a stack. stack = [] # Push all characters of the string onto the stack for char in s: stack.append(char) # Pop characters from the stack and build a reversed string reversed_s = ''.join(stack[::-1]) # Check if the original string is equal to the reversed string return s == reversed_s"},{"question":"Write a python function to remove all duplicates from a list. The function should return a new list with only unique elements.","solution":"def remove_duplicates(lst): Removes all duplicates from the list and returns a new list of unique elements. Parameters: lst (list): The list from which to remove duplicates. Returns: list: A new list with only unique elements. return list(dict.fromkeys(lst))"},{"question":"Write a python function to sort a list of tuples by the second item. The function should handle both lowercase and uppercase strings in the tuples and should be case-insensitive.","solution":"def sort_tuples_by_second_item(tuples_list): Sorts a list of tuples by the second item in each tuple. Sorting is case-insensitive. Args: tuples_list (list): A list of tuples Returns: list: Sorted list of tuples by the second item in case-insensitive manner return sorted(tuples_list, key=lambda x: x[1].lower())"},{"question":"Write a python function to sort a list in descending order.","solution":"def sort_descending(lst): Sorts a list in descending order. Parameters: lst (list): The list to sort. Returns: list: The sorted list in descending order. return sorted(lst, reverse=True)"},{"question":"Write a python function to test the equality of two lists.","solution":"def lists_are_equal(list1, list2): Returns True if two lists are equal, False otherwise. return list1 == list2"},{"question":"Write a python function to remove duplicates from a list and return a new list without duplicates. The solution should have a time complexity of O(n).","solution":"def remove_duplicates(input_list): Removes duplicates from a list and returns a new list without duplicates. Ensures the original order of elements is preserved. Args: input_list (list): The list from which to remove duplicates. Returns: list: A new list without duplicates. seen = set() output_list = [] for item in input_list: if item not in seen: seen.add(item) output_list.append(item) return output_list"},{"question":"Write a python function to evaluate the value of an arithmetic expression in Reverse Polish Notation (RPN). Reverse Polish Notation, also known as postfix notation, is a way of writing arithmetic expressions in which the operator follows its operands. Each operand or answer is a token.","solution":"def eval_rpn(tokens): Evaluate the value of an arithmetic expression in Reverse Polish Notation (RPN). :param tokens: List[str], a list of tokens in RPN format :return: int, the result of the expression stack = [] for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == '+': stack.append(a + b) elif token == '-': stack.append(a - b) elif token == '*': stack.append(a * b) elif token == '/': # Perform integer division that truncates towards zero stack.append(int(a / b)) else: stack.append(int(token)) return stack[0]"},{"question":"Write a python function to check if two strings are rotations of each other or not.","solution":"def are_rotations(str1, str2): Check if two strings are rotations of each other. :param str1: The first string. :param str2: The second string. :return: True if str1 and str2 are rotations of each other, False otherwise. if len(str1) != len(str2): return False combined = str1 + str1 return str2 in combined"},{"question":"Write a python function to create a new list containing the squares of even numbers and the cubes of odd numbers from a given list.","solution":"def transform_numbers(numbers): Returns a new list containing the squares of even numbers and the cubes of odd numbers from the given list. :param numbers: List of integers :return: List of integers return [x**2 if x % 2 == 0 else x**3 for x in numbers]"},{"question":"Write a python function to compute the sum of an array of integers. How can I test this function with a series of arrays?","solution":"def sum_array(arr): Returns the sum of an array of integers. return sum(arr)"},{"question":"Write a python function to find the sum of the first 100 prime numbers and return that sum.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def sum_of_first_100_primes(): Returns the sum of the first 100 prime numbers. prime_count = 0 num = 2 prime_sum = 0 while prime_count < 100: if is_prime(num): prime_sum += num prime_count += 1 num += 1 return prime_sum"},{"question":"Write a python function to find the maximum area of a rectangle that can be inscribed in a circle with a given radius. The function should take two parameter, radius (float/int) and return the maximum area of the rectangle.","solution":"import math def max_rectangle_area_in_circle(radius): Calculate the maximum area of a rectangle that can be inscribed in a circle with a given radius. Parameters: radius (float/int): The radius of the circle Returns: float: The maximum area of the inscribed rectangle # The diagonal of the rectangle is equal to the diameter of the circle diagonal = 2 * radius # In a rectangle inscribed in a circle, diagonal is equal to the hypotenuse # of the right triangle formed by half of the rectangle sides. # If a and b are the sides of the rectangle, # then a^2 + b^2 = diagonal^2 # For maximum area, a = b, # hence, a^2 + a^2 = diagonal^2 # 2a^2 = diagonal^2 # a^2 = diagonal^2 / 2 # a = sqrt(diagonal^2 / 2) side = math.sqrt((diagonal ** 2) / 2) # The maximum area max_area = side * side return max_area"},{"question":"Write a python function to convert a string to a list of integers. Each character in the string represents a digit, and the function should convert each digit to an integer and store it in a list.","solution":"def string_to_list_of_integers(s): Converts a string of digits into a list of integers. :param s: string containing digits :return: list of integers return [int(char) for char in s if char.isdigit()]"},{"question":"Write a python function to reorder a list of items based on a given list of operations. Each operation is a tuple consisting of two integers representing the indices of the two elements to be swapped. The function should handle an arbitrary number of operations.","solution":"def reorder_list(items, operations): Reorders a list of items based on a given list of operations. Each operation is a tuple consisting of two integers representing the indices of the two elements to be swapped. :param items: List of items to be reordered :param operations: List of tuple operations (swaps) :return: Reordered list for op in operations: idx1, idx2 = op items[idx1], items[idx2] = items[idx2], items[idx1] return items"},{"question":"Write a python function to find and print all common divisors of two numbers. The function should take two integers as input and print all the common divisors of these two numbers.","solution":"def common_divisors(a, b): Finds and prints all common divisors of two numbers a and b. def gcd(x, y): while y: x, y = y, x % y return x gcd_ab = gcd(a, b) common_divs = [i for i in range(1, gcd_ab + 1) if gcd_ab % i == 0] return common_divs"},{"question":"Write a python function to find the most frequent element in a list. If there are multiple elements with the maximum frequency, return the one that appears first in the list. Here is a sample list: \`[1, 2, 3, 2, 1, 3, 3, 2, 1]\`. The output should be \`1\` as it is the most frequent element and it appears first in the list.","solution":"def most_frequent_element(lst): Returns the most frequent element in the list. If there are multiple elements with the same highest frequency, returns the one that appears first in the list. from collections import Counter if not lst: return None freq_counter = Counter(lst) max_frequency = max(freq_counter.values()) for element in lst: if freq_counter[element] == max_frequency: return element"},{"question":"Write a python function to identify whether a given list of integers is non-decreasing. Your function should return True if every element is less than or equal to the next.","solution":"def is_non_decreasing(lst): Returns True if the list of integers is non-decreasing, False otherwise. for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: return False return True"},{"question":"Write a python function to check if all elements in a given iterable are non-negative.","solution":"def all_non_negative(iterable): Returns True if all elements in the iterable are non-negative, False otherwise. return all(x >= 0 for x in iterable)"},{"question":"Write a python function to determine the number of duplicates in a list.","solution":"def count_duplicates(lst): Returns the number of duplicate elements in the list. from collections import Counter count = Counter(lst) duplicates = sum(1 for item in count.values() if item > 1) return duplicates"},{"question":"Write a python function to find the closest value key in a dictionary to a given value. If there are multiple keys with the same closest value, return all of them in a list.","solution":"def find_closest_keys(dictionary, target_value): Finds the key(s) in the dictionary whose value is closest to the target_value. Parameters: dictionary (dict): A dictionary with keys and numerical values. target_value (float or int): The target value to compare against the dictionary's values. Returns: list: List of key(s) with the closest value(s) to the target_value. if not dictionary: return [] closest_diff = float('inf') closest_keys = [] for key, value in dictionary.items(): diff = abs(value - target_value) if diff < closest_diff: closest_diff = diff closest_keys = [key] elif diff == closest_diff: closest_keys.append(key) return closest_keys"},{"question":"Write a python function to find the smallest number in a list using recursion.","solution":"def find_smallest_recursive(lst): Returns the smallest number in a list using recursion. if len(lst) == 1: return lst[0] else: smallest_of_rest = find_smallest_recursive(lst[1:]) return lst[0] if lst[0] < smallest_of_rest else smallest_of_rest"},{"question":"Write a python function to generate a random number between 1 and 100 and print it.","solution":"import random def generate_random_number(): Generates a random integer between 1 and 100 inclusive. return random.randint(1, 100)"},{"question":"Write a python function to reverse a list of integers. You can only use list slicing instructments or the list.reverse() method.","solution":"def reverse_list(lst): Reverses a list of integers. :param lst: List of integers :return: Reversed list of integers return lst[::-1]"},{"question":"Write a python function to return \\"Fizz\\" if the number is divisible by 3, \\"Buzz\\" if it is divisible by 5, and \\"FizzBuzz\\" if it is divisible by both 3 and 5. If the number is not divisible by either, return the number itself.","solution":"def fizzbuzz(n): Returns \\"Fizz\\" if n is divisible by 3, \\"Buzz\\" if n is divisible by 5, \\"FizzBuzz\\" if n is divisible by both 3 and 5. Otherwise, returns the number itself. if n % 3 == 0 and n % 5 == 0: return \\"FizzBuzz\\" elif n % 3 == 0: return \\"Fizz\\" elif n % 5 == 0: return \\"Buzz\\" else: return n"},{"question":"Write a python function to calculate the area of a rectangle given its length and width. The function should also validate that the inputs are positive numbers. If either the length or width is not a positive number, the function should return an error message.","solution":"def calculate_rectangle_area(length, width): Calculate the area of a rectangle given its length and width. Validates that inputs are positive numbers. Parameters: length (float): The length of the rectangle. width (float): The width of the rectangle. Returns: float: The area of the rectangle, or an error message if inputs are invalid. if not isinstance(length, (int, float)) or not isinstance(width, (int, float)): return \\"Error: Length and width must be numbers.\\" if length <= 0 or width <= 0: return \\"Error: Length and width must be positive numbers.\\" return length * width"},{"question":"Write a python function to create a binary search tree and check if it is a binary search tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def insert_into_bst(root, val): if not root: return TreeNode(val) if val < root.val: root.left = insert_into_bst(root.left, val) else: root.right = insert_into_bst(root.right, val) return root def is_bst_helper(node, lower=float('-inf'), upper=float('inf')): if not node: return True val = node.val if val <= lower or val >= upper: return False if not is_bst_helper(node.right, val, upper): return False if not is_bst_helper(node.left, lower, val): return False return True def is_bst(root): return is_bst_helper(root)"},{"question":"Write a python function to create an empty dictionary and then add key-value pairs.","solution":"def create_and_add_key_value_pairs(pairs): Creates an empty dictionary and adds key-value pairs provided in the list of tuples 'pairs'. :param pairs: List of tuples where each tuple represents a key-value pair (key, value) :return: Dictionary with the added key-value pairs dictionary = {} for key, value in pairs: dictionary[key] = value return dictionary"},{"question":"Write a python function to find the maximum sum of a subarray in an array that may contain both positive and negative integers. The function should use Kadane's algorithm and should return the maximum sum.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray in the given array using Kadane's Algorithm. if not arr: # if the array is empty, return 0 return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to print all the numbers in a given list that are not perfect squares.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, else False. if n < 0: return False sqrt_n = int(math.sqrt(n)) return sqrt_n * sqrt_n == n def filter_non_perfect_squares(numbers): Returns a list of numbers from the input list that are not perfect squares. return [x for x in numbers if not is_perfect_square(x)]"},{"question":"Write a python function to reverse the word in a sentence. The sentence won't include any punctuation.","solution":"def reverse_words(sentence): Reverse the words in a sentence. Parameters: sentence (str): A sentence without any punctuation. Returns: str: A sentence with the words reversed. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a python function to calculate the probabilities of each element in a list. The list contains integer values and the probabilities should be calculated as the ratio of each number's occurrences to the total number of elements in the list.","solution":"def calculate_probabilities(arr): Calculate the probabilities of each element in the list 'arr'. Parameters: arr (list of int): A list of integer values. Returns: dict: A dictionary where the keys are the unique integers from 'arr' and the values are their respective probabilities. from collections import Counter total_elements = len(arr) if total_elements == 0: return {} element_counts = Counter(arr) probabilities = {element: count / total_elements for element, count in element_counts.items()} return probabilities"},{"question":"Write a python function to find the most frequent element in a list. If there are multiple elements with the highest frequency, return any one of them. If the list is empty, return None. The function should be optimized to handle large lists efficiently.","solution":"from collections import Counter def most_frequent_element(elements): Returns the most frequent element in the list. If there are multiple elements with the highest frequency, it returns any one of them. If the list is empty, returns None. if not elements: return None element_counts = Counter(elements) most_common_element, _ = element_counts.most_common(1)[0] return most_common_element"},{"question":"Write a python function to determine the frequency of a digit within a number. The function should accept a number and a digit, and return the count of how many times the digit appears within the number.","solution":"def digit_frequency(number, digit): Returns the frequency of a digit within a number. Args: number: int - The number in which to find the digit. digit: int - The digit whose frequency is to be counted. Returns: int - The count of the digit within the number. number_str = str(abs(number)) digit_str = str(digit) return number_str.count(digit_str)"},{"question":"Write a python function to find the maximum sum of subarray using Kadane's Algorithm. Also, write a piece of code to test this function with sample data.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray using Kadane's Algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to sort list elements using bubble sort algorithm, and then return the sorted list.","solution":"def bubble_sort(arr): Sorts a list using the bubble sort algorithm. Parameters: arr (list): A list of comparable elements. Returns: list: The sorted list. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python function to convert a binary number to a decimal number. The function should handle both positive and negative binary numbers.","solution":"def binary_to_decimal(binary): Convert a binary number (in string format) to a decimal number. The binary number can be positive or negative (indicated by a leading '-' sign). Parameters: binary (str): The binary number as a string. Returns: int: The decimal representation of the binary number. if binary[0] == '-': return -int(binary[1:], 2) else: return int(binary, 2)"},{"question":"Write a python function to return the first n elements of the Fibonacci sequence.","solution":"def fibonacci(n): Returns the first n elements of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a python function to reverse a given string using a loop.","solution":"def reverse_string(s): Returns the reverse of the given string using a loop. reversed_str = '' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a python function to find the sum of all the multiples of 3 or 5 below a given number, N. Ensure that your function is pure (no side effects), does not modify any global state, and uses no loops or global variables.","solution":"def sum_of_multiples(N): Returns the sum of all the multiples of 3 or 5 below the given number N. def sum_divisible_by(k): p = (N - 1) // k return k * p * (p + 1) // 2 return sum_divisible_by(3) + sum_divisible_by(5) - sum_divisible_by(15)"},{"question":"Write a python function to print a mirrored pyramid of a given height using asterisks in console. The height of the pyramid should be input by the user. Also, write a brief explanation on how the function works.","solution":"def print_mirrored_pyramid(height): Prints a mirrored pyramid of given height using asterisks. Args: height (int): The height of the pyramid. for i in range(1, height + 1): # Print leading spaces print(\\" \\" * (height - i), end=\\"\\") # Print asterisks print(\\"*\\" * (2 * i - 1))"},{"question":"Write a python function to reverse a string without using any additional space. The function should handle both lowercase and uppercase letters, and special characters should also be reversed. You can assume that the input string does not contain any white spaces or numbers.","solution":"def reverse_string(s): Reverses the input string without using any additional space. return s[::-1]"},{"question":"Write a python function to calculate the sum of all even numbers between two given numbers (inclusive). If either of the given numbers is not even, the function should return an error message.","solution":"def sum_of_evens(start, end): Returns the sum of all even numbers between two given numbers (inclusive). If either of the given numbers is not even, returns an error message. if start % 2 != 0 or end % 2 != 0: return \\"Error: Both numbers must be even.\\" if start > end: start, end = end, start return sum(num for num in range(start, end + 1) if num % 2 == 0)"},{"question":"Write a python function to generate a list of the first n Fibonacci numbers. The function should be recursive.","solution":"def fibonacci(n, a=0, b=1, sequence=None): Returns a list of the first n Fibonacci numbers. :param n: The number of Fibonacci numbers to generate :param a: The first Fibonacci number (default: 0) :param b: The second Fibonacci number (default: 1) :param sequence: The current sequence of Fibonacci numbers (default: None) :return: A list of the first n Fibonacci numbers if sequence is None: sequence = [] if n == 0: return sequence sequence.append(a) return fibonacci(n-1, b, a+b, sequence)"},{"question":"Write a python function to find the maximum sum of a sub array of a given size using the sliding window technique.","solution":"def max_subarray_sum(arr, k): Returns the maximum sum of any subarray of length k using the sliding window technique. :param arr: List of integers. :param k: Length of the subarray. :return: Maximum sum of any subarray of length k. if not arr or k <= 0 or k > len(arr): return 0 max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum = current_sum + arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Write a python function to reverse the order of elements in a list without modifying the original list.","solution":"def reverse_list(lst): Returns a new list with the elements of lst reversed. return lst[::-1]"},{"question":"Write a python function to create a dictionary with keys as numbers from 1 to N and values as their cubes. For example, if N=3, the output should be \`{1: 1, 2: 8, 3: 27}\`.","solution":"def cubes_dict(N): Returns a dictionary with keys as numbers from 1 to N and values as their cubes. :param N: An integer :return: A dictionary return {i: i ** 3 for i in range(1, N + 1)}"},{"question":"Write a python function to check whether a given list of numbers is a palindrome or not.","solution":"def is_palindrome(lst): Returns True if the given list of numbers is a palindrome, False otherwise. A list is a palindrome if it reads the same forwards and backwards. Parameters: lst (List[int]): A list of integers. Returns: bool: True if the list is a palindrome, False otherwise. return lst == lst[::-1]"},{"question":"Write a python function to update a list of scores based on some rules. The rules are stored in a dictionary, where each key is a student's ID, and each value is the points to be added to the student's current score.","solution":"def update_scores(scores, updates): Updates the list of scores based on the rules provided in the updates dictionary. :param scores: List of tuples, where each tuple contains (student_id, current_score). :param updates: Dictionary where each key is a student's ID and each value is the points to be added. :return: A new list of tuples with updated scores. scores_dict = dict(scores) for student_id, points in updates.items(): if student_id in scores_dict: scores_dict[student_id] += points else: scores_dict[student_id] = points return list(scores_dict.items())"},{"question":"Write a python function to find the longest common subsequence (LCS) between two strings. The LCS is the longest sequence of characters that appear left-to-right (but not necessarily in a contiguous block) in both strings.","solution":"def longest_common_subsequence(s1, s2): Returns the longest common subsequence between two strings. m, n = len(s1), len(s2) # Create a 2D array to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from the bottom up for i in range(m): for j in range(n): if s1[i] == s2[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) # Reconstruct the longest common subsequence lcs = [] while m > 0 and n > 0: if s1[m - 1] == s2[n - 1]: lcs.append(s1[m - 1]) m -= 1 n -= 1 elif dp[m - 1][n] >= dp[m][n - 1]: m -= 1 else: n -= 1 return ''.join(reversed(lcs))"},{"question":"Write a python function to find the frequency of each element in a list. The function should take a list of elements as input and return a dictionary where the keys are the elements from the list and the values are their corresponding frequencies.","solution":"def frequency_of_elements(elements): Returns a dictionary with the frequency of each element in the input list. :param elements: List of elements :return: Dictionary with elements as keys and their frequencies as values frequency = {} for element in elements: if element in frequency: frequency[element] += 1 else: frequency[element] = 1 return frequency"},{"question":"Write a python function to find the maximum difference between two numbers in a list. The solution should be efficient, with a time complexity better than O(n^2).","solution":"def max_difference(arr): Finds the maximum difference between two numbers in a list. The maximum difference is defined as the maximum value of arr[j] - arr[i] where j > i. :param arr: List of integers :return: Maximum difference (integer). If the list is empty or has less than 2 elements, return 0. if len(arr) < 2: return 0 min_element = arr[0] max_diff = arr[1] - arr[0] for i in range(1, len(arr)): if arr[i] - min_element > max_diff: max_diff = arr[i] - min_element if arr[i] < min_element: min_element = arr[i] return max_diff"},{"question":"Write a python function to convert a list of strings to uppercase.","solution":"def to_uppercase(strings): Given a list of strings, returns a new list where each string is converted to uppercase. :param strings: List of strings to be converted :type strings: List[str] :return: List of strings in uppercase :rtype: List[str] return [string.upper() for string in strings]"},{"question":"Write a python function to count the occurrences of a substring in a given string. The function should be case-insensitive and should also handle overlapping occurrences.","solution":"def count_occurrences(main_str, sub_str): Returns the number of occurrences of sub_str in main_str, case-insensitive and overlapping. main_str = main_str.lower() sub_str = sub_str.lower() count = start = 0 while True: start = main_str.find(sub_str, start) if start == -1: break count += 1 start += 1 # Move just one character forward to handle overlapping return count"},{"question":"Write a python function to find the maximum subarray sum. I heard about Kadane's algorithm, so let's use it.","solution":"def max_subarray_sum(nums): Function to find the maximum subarray sum using Kadane's algorithm. :param nums: List of integers :return: An integer representing the maximum subarray sum if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to remove all invalid parentheses from a string so that the result string is valid. Return all possible results. Your solution should be able to handle multiple test cases efficiently.","solution":"from collections import deque def removeInvalidParentheses(s): Removes all invalid parentheses from a string so that the result string is valid. Returns all possible results. if not s: return [\\"\\"] results = set() queue = deque([s]) visited = set([s]) found = False while queue: current = queue.popleft() if isValid(current): results.add(current) found = True if found: continue for i in range(len(current)): if current[i] not in ('(', ')'): continue next_str = current[:i] + current[i+1:] if next_str not in visited: visited.add(next_str) queue.append(next_str) return list(results) def isValid(s): Checks if a given string s contains valid parentheses. count = 0 for char in s: if char == '(': count += 1 elif char == ')': count -= 1 if count < 0: return False return count == 0"},{"question":"Write a python function to convert a given integer to its corresponding binary representation as a string. You should not use the built-in bin() method.","solution":"def int_to_bin(n): Converts a given integer to its corresponding binary representation as a string. Parameters: n (int): The integer to convert. Returns: str: The binary representation as a string. if n == 0: return \\"0\\" is_negative = n < 0 n = abs(n) bin_str = \\"\\" while n > 0: bin_str = str(n % 2) + bin_str n = n // 2 if is_negative: return \\"-\\" + bin_str return bin_str"},{"question":"Write a python function to check if two strings contain the same set of characters, regardless of the order or frequency of characters.","solution":"def same_character_set(str1, str2): Returns True if both strings contain the same set of characters, regardless of the order or frequency of characters. Otherwise, returns False. return set(str1) == set(str2)"},{"question":"Write a python function to find the maximum sum of a subarray of given length \`k\` in an array that may contain both positive and negative numbers.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of a subarray of length k in the array. :param arr: List of integers (array that may contain both positive and negative numbers) :param k: Integer (length of the subarray) :return: Integer (maximum sum of the subarray of length k) if not arr or k <= 0 or k > len(arr): return 0 # Compute the sum of the first 'k' elements max_sum = current_sum = sum(arr[:k]) # Iterate through the array starting from the (k)th element to the end for i in range(k, len(arr)): # Slide the window to right by subtracting the element which left the window and adding the new element current_sum += arr[i] - arr[i - k] # Update max_sum if we find a new maximum if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Write a python function to print the first 100 Fibonacci numbers. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence goes: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ... Your function should return a list containing the first 100 Fibonacci numbers.","solution":"def first_100_fibonacci_numbers(): Returns a list of the first 100 Fibonacci numbers. fibonacci_sequence = [0, 1] while len(fibonacci_sequence) < 100: fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2]) return fibonacci_sequence"},{"question":"Write a python function to generate the multiplication table of a given number.","solution":"def multiplication_table(n, up_to=10): Returns the multiplication table of a given number n up to 'up_to' times. Args: n (int): the base number of the multiplication table. up_to (int): the number up to which the multiplication table should be generated. Default is 10. Returns: list: list of strings representing the multiplication table. return [f\\"{n} x {i} = {n*i}\\" for i in range(1, up_to + 1)]"},{"question":"Write a python function to find the maximum number in a list of numbers. Your function should handle any list of integers or floats and return the maximum value found. Additionally, the function should handle empty lists by returning \`None\`.","solution":"def find_maximum(numbers): Returns the maximum number in a list of numbers. If the list is empty, returns None. if not numbers: return None return max(numbers)"},{"question":"Write a python function to check if a singular value can divide evenly into a NumPy array.","solution":"import numpy as np def can_divide_evenly(array, value): Checks if a singular value can divide evenly into a NumPy array. Parameters: array (np.ndarray): The NumPy array to check. value (int): The singular value to check divisibility. Returns: bool: True if value can divide evenly into all elements of the array, False otherwise. if value == 0: raise ValueError(\\"Division by zero is not allowed.\\") return np.all(array % value == 0)"},{"question":"Write a python function to find the count of an element in a sorted array using binary search. The function signature is \`def find_count(arr, x)\`, where 'arr' is the sorted array and 'x' is the element whose count needs to be found. If the element is not found, the function should return -1.","solution":"def binary_search(arr, x, search_first): low = 0 high = len(arr) - 1 result = -1 while low <= high: mid = (low + high) // 2 if arr[mid] == x: result = mid if search_first: high = mid - 1 else: low = mid + 1 elif arr[mid] < x: low = mid + 1 else: high = mid - 1 return result def find_count(arr, x): Returns the count of 'x' in the sorted array 'arr'. If 'x' is not present, returns -1. first_index = binary_search(arr, x, True) if first_index == -1: return -1 last_index = binary_search(arr, x, False) return last_index - first_index + 1"},{"question":"Write a python function to create a minimum heap using the heapq module. The function should take a list of integers as input and return a list that is a heapified version of the input list. After creating a minimum heap, write a function to extract the smallest element from the heap using the heapify function again to maintain the heap property. The function should return both the smallest element and the updated heap.","solution":"import heapq def create_min_heap(nums): Takes a list of integers and converts it into a minimum heap. heapq.heapify(nums) return nums def extract_min(nums): Extracts the smallest element from the heap and returns both the smallest element and the updated heap. smallest = heapq.heappop(nums) return smallest, nums"},{"question":"Write a python function to check if a number is prime. The number you are going to check should be passed as a parameter. If it’s a prime number, the function will return \`True\`, otherwise it will return \`False\`.","solution":"def is_prime(n): Checks if the given number n is a prime number. Parameters: n (int): The number to check. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a python function to count the number of zeros in a given binary number.","solution":"def count_zeros(binary_number): Returns the number of zeros in the given binary number string. return binary_number.count('0')"},{"question":"Write a python function to check if a number is power of three. If the number is a power of three, return True; otherwise, return False. Let’s assume the input number is a non-negative integer and belongs to the range of a 32-bit signed integer.","solution":"def is_power_of_three(n): Check if n is a power of three. Parameters: n (int): The number to be checked. Returns: bool: True if n is a power of three, False otherwise. if n < 1: return False while n % 3 == 0: n //= 3 return n == 1"},{"question":"Write a python function to find the count of distinct words in a given sentence. A word is considered as a sequence of characters separated by spaces. Punctuation and digits should be considered as part of the word.","solution":"def count_distinct_words(sentence): Returns the count of distinct words in the given sentence. A word is considered as a sequence of characters separated by spaces. Punctuation and digits are considered part of the word. words = sentence.split() distinct_words = set(words) return len(distinct_words)"},{"question":"Write a python function to find the largest prime number less than a given number n using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] is_prime = [True] * n is_prime[0] = is_prime[1] = False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i*i, n, i): is_prime[j] = False return [i for i, prime in enumerate(is_prime) if prime] def largest_prime_less_than(n): Returns the largest prime number less than the given number n. primes = sieve_of_eratosthenes(n) return primes[-1] if primes else None"},{"question":"Write a python function to check if a binary tree is a sub-tree of another binary tree. A binary tree is a sub-tree of another binary tree if there exists a node in the larger binary tree such that the smaller binary tree rooted at this node is identical to the smaller binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_subtree(s, t): if not s: return False if is_same_tree(s, t): return True return is_subtree(s.left, t) or is_subtree(s.right, t) def is_same_tree(s, t): if not s and not t: return True if not s or not t: return False if s.val != t.val: return False return is_same_tree(s.left, t.left) and is_same_tree(s.right, t.right)"},{"question":"Write a python function to get all the elements under the tree with a given specific tag. You can assume the tree is a list of lists where each sub-list represents a leaf node. Each sub-list has the format \`[tag, value]\`. For example: \`tree = [['root', 'value1'], ['child1', 'value2'], ['child2', 'value3'], ['parent', 'value4'], ['child1', 'value5']]\`.","solution":"def get_elements_by_tag(tree, tag): Returns a list of values of nodes that have the specified tag. :param tree: List of lists representing the tree structure. Each sub-list is in the format [tag, value]. :param tag: The specific tag to filter the nodes by. :return: List of values that have the specified tag. return [value for t, value in tree if t == tag]"},{"question":"Write a python function to merge two non-negative integer arrays, maintaining the sorted order. The function should take two arrays as input and return a new sorted array containing all elements from both input arrays without duplicates.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two non-negative integer arrays, maintaining the sorted order. The result will not contain duplicates. # Start with the union of both arrays to get unique values and then sort them. return sorted(set(arr1) | set(arr2))"},{"question":"Write a python function to find the closest value in a list of numbers to a given number. If there are multiple numbers in the list that are equally close to the given number, return the smallest one.","solution":"def find_closest(nums, target): Returns the closest value to the target from the list nums. If there are multiple numbers equally close, returns the smallest one. if not nums: raise ValueError(\\"The list is empty\\") closest = nums[0] for num in nums: # Check if this number is closer or equally close but smaller if abs(num - target) < abs(closest - target) or (abs(num - target) == abs(closest - target) and num < closest): closest = num return closest"},{"question":"Write a python function to find the nth index of the term in a Fibonacci sequence given a list of Fibonacci numbers.","solution":"def find_fibonacci_index(fib_list, n): Returns the index of the nth term in the fibonacci sequence given a list of fibonacci numbers. If the nth term does not exist in the given list, returns -1. Args: fib_list (list): List of Fibonacci numbers. n (int): The term in the Fibonacci sequence to find the index of. Returns: int: The index of the nth term, or -1 if it does not exist. try: return fib_list.index(n) except ValueError: return -1"},{"question":"Write a python function to find the maximum value of the sum of the absolute differences between consecutive elements for all the elements in the array. The array may contain duplicates, and the array is not necessarily sorted.","solution":"def max_absolute_difference_sum(arr): Returns the maximum value of the sum of the absolute differences between consecutive elements for all the elements in the array. if not arr: return 0 # Sort the array to maximize the absolute differences arr.sort() n = len(arr) max_sum = 0 for i in range(1, n): max_sum += arr[i] - arr[i - 1] return max_sum"},{"question":"Write a python function to take an integer as input and return a string with the integer represented in Binary, Hexadecimal and Octal.","solution":"def convert_integer(num): Converts the given integer into its binary, hexadecimal, and octal representation. Parameters: num (int): The integer to be converted. Returns: dict: A dictionary containing the binary, hex, and octal representation of the integer. return { 'binary': bin(num), 'hexadecimal': hex(num), 'octal': oct(num) }"},{"question":"Write a python function to remove all the words of length 'n' in a list of words, where 'n' is a user input parameter.","solution":"def remove_words_of_length(words, n): Removes all words of length 'n' from the list 'words'. Parameters: words (list): A list of words (strings). n (int): The length of words to be removed. Returns: list: A new list with the words of length 'n' removed. return [word for word in words if len(word) != n]"},{"question":"Write a python function to convert meters to yards. There are approximately 3.28084 feet in a meter and 0.333333 yards in a foot. The function should take one argument, the number of meters, and return the number of yards.","solution":"def meters_to_yards(meters): Converts meters to yards. Parameters: meters (float): The length in meters to be converted. Returns: float: The length in yards. yards_per_meter = 3.28084 * 0.333333 return meters * yards_per_meter"},{"question":"Write a python function to generate the first n rows of Pascal's Triangle. Each number in Pascal's Triangle is the sum of the two numbers directly above it in the previous row.","solution":"def generate_pascals_triangle(n): Generate the first n rows of Pascal's Triangle. Parameters: n (int): The number of rows of Pascal's Triangle to generate. Returns: list of list of int: The first n rows of Pascal's Triangle. if n <= 0: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"Write a python function to multiply two numbers given as inputs.","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Write a python function to count the number of occurrences of each element in a list and store the results in a dictionary.","solution":"def count_occurrences(lst): Returns a dictionary with the count of each element in the list. occurrence_dict = {} for item in lst: if item in occurrence_dict: occurrence_dict[item] += 1 else: occurrence_dict[item] = 1 return occurrence_dict"},{"question":"Write a python function to find the intersection of two lists without using any built-in functions for set operations like \`set()\`, \`intersection()\`, \`&\`, etc.","solution":"def list_intersection(lst1, lst2): Returns the intersection of two lists without using any built-in set operations. intersection = [] for item in lst1: if item in lst2 and item not in intersection: intersection.append(item) return intersection"},{"question":"Write a python function to validate the input data. The function should check if the input is an integer and if it falls within the range of 1 to 100. If the input meets these criteria, the function should return True; otherwise, it should return False.","solution":"def validate_input(data): Validates if the input data is an integer within the range of 1 to 100. Parameters: data (any): The input data to validate. Returns: bool: True if data is an integer within the range of 1 to 100, otherwise False. return isinstance(data, int) and 1 <= data <= 100"},{"question":"Write a python function to sort an array in ascending order.","solution":"def sort_array(arr): Sorts an array in ascending order. return sorted(arr)"},{"question":"Write a python function to find the longest common subsequence between two strings. The function should take two string parameters and return the longest common subsequence as a string.","solution":"def longest_common_subsequence(str1, str2): Returns the longest common subsequence between two strings. m = len(str1) n = len(str2) # Create a 2D array to store the lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct the longest common subsequence i, j = m, n lcs = [] while i > 0 and j > 0: if str1[i - 1] == str2[j - 1]: lcs.append(str1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return ''.join(reversed(lcs))"},{"question":"Write a python function to reverse the words in a string without using any built-in methods or libraries. You should also ensure that the reversed words maintain their original case and punctuation. For example, if the input is \\"Hello, World!\\", the output should be \\"!dlroW ,olleH\\".","solution":"def reverse_words(text): Reverses each word in a given string, maintaining the original case and punctuation. Parameters: text (str): The input string containing words to be reversed. Returns: str: The string with each word reversed. reversed_text = [] for ch in text: reversed_text.insert(0, ch) return ''.join(reversed_text)"},{"question":"Write a python function to sort a list of dictionaries based on a specific key's value in descending order. For example, if the list of dictionaries is [{'name': 'John', 'age': 30}, {'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 35}], and the sorting key is 'age', the function should return [{'name': 'Bob', 'age': 35}, {'name': 'John', 'age': 30}, {'name': 'Alice', 'age': 25}].","solution":"def sort_dicts_by_key(dicts, key): Sort a list of dictionaries based on the value of a given key in descending order. :param dicts: List of dictionaries to be sorted :param key: The key whose value will be used for sorting :return: List of dictionaries sorted by the specified key in descending order return sorted(dicts, key=lambda x: x[key], reverse=True)"},{"question":"Write a python function to find the nth ugly number.","solution":"def nth_ugly_number(n): Returns the nth ugly number. Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. ugly_numbers = [1] i2 = i3 = i5 = 0 while len(ugly_numbers) < n: next_ugly = min(ugly_numbers[i2] * 2, ugly_numbers[i3] * 3, ugly_numbers[i5] * 5) ugly_numbers.append(next_ugly) if next_ugly == ugly_numbers[i2] * 2: i2 += 1 if next_ugly == ugly_numbers[i3] * 3: i3 += 1 if next_ugly == ugly_numbers[i5] * 5: i5 += 1 return ugly_numbers[n-1]"},{"question":"Write a python function to double a number and then square the result.","solution":"def double_and_square(x): Takes a number, doubles it, and then squares the result. doubled = x * 2 squared = doubled ** 2 return squared"},{"question":"Write a python function to check if a given number is divisible by 3 and 5 simultaneously. If the number is divisible, return a message stating \\"Number is divisible by both 3 and 5\\", otherwise return a message stating \\"Number is not divisible by both 3 and 5\\". Use the function with an input number.","solution":"def check_divisibility(num): Checks if the given number is divisible by both 3 and 5. Args: num (int): The number to check. Returns: str: A message stating if the number is divisible by both 3 and 5 or not. if num % 3 == 0 and num % 5 == 0: return \\"Number is divisible by both 3 and 5\\" else: return \\"Number is not divisible by both 3 and 5\\""},{"question":"Write a python function to compute n-th Fibonacci number using matrix exponentiation.","solution":"def matrix_mult(A, B): Multiplies two 2x2 matrices A and B. return [ [A[0][0]*B[0][0] + A[0][1]*B[1][0], A[0][0]*B[0][1] + A[0][1]*B[1][1]], [A[1][0]*B[0][0] + A[1][1]*B[1][0], A[1][0]*B[0][1] + A[1][1]*B[1][1]] ] def matrix_power(matrix, n): Raises the matrix to the power of n using binary exponentiation. result = [[1, 0], [0, 1]] base = matrix while n > 0: if n % 2 == 1: result = matrix_mult(result, base) base = matrix_mult(base, base) n //= 2 return result def fibonacci(n): Computes the n-th Fibonacci number using matrix exponentiation. if n == 0: return 0 if n == 1: return 1 F = [[1, 1], [1, 0]] result = matrix_power(F, n-1) return result[0][0]"},{"question":"Write a python function to find all words in a sentence that contain both vowels and consonants. The function should return these words in a list.","solution":"def words_with_both_vowels_and_consonants(sentence): Returns a list of words in a sentence that contain both vowels and consonants. Parameters: sentence (str): A sentence from which to extract the words. Returns: list: A list of words containing both vowels and consonants. vowels = set(\\"aeiouAEIOU\\") words = sentence.split() result = [] for word in words: has_vowel = any(char in vowels for char in word) has_consonant = any(char.isalpha() and char.lower() not in vowels for char in word) if has_vowel and has_consonant: result.append(word) return result"},{"question":"Write a python function to find the last repeating character in a given string. If there are no repeating characters, the function should return -1.","solution":"def last_repeating_character(s): Returns the last repeating character in the given string s. If no repeating character is found, returns -1. seen = set() last_repeating = -1 for char in s: if char in seen: last_repeating = char else: seen.add(char) return last_repeating"},{"question":"Write a python function to remove duplicates from a list. What are the different ways to achieve this and what are their trade-offs?","solution":"def remove_duplicates(lst): Removes duplicates from a list while preserving the original order. Args: lst (list): The input list from which duplicates need to be removed. Returns: list: A new list with duplicates removed and original order preserved. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result def remove_duplicates_with_set(lst): Removes duplicates from a list but does not preserve the original order. Args: lst (list): The input list from which duplicates need to be removed. Returns: list: A new list with duplicates removed. return list(set(lst)) def remove_duplicates_with_dict(lst): Removes duplicates from a list using dictionary keys to preserve order. Args: lst (list): The input list from which duplicates need to be removed. Returns: list: A new list with duplicates removed and original order preserved. return list(dict.fromkeys(lst))"},{"question":"Write a python function to calculate the factorial of a number n recursively without using any additional space, i.e., without using any extra data structures or returning the result from the main function (i.e., factorial calculation should happen in the recursive function itself).","solution":"def recursive_factorial(n): Returns the factorial of a given number n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") return 1 if n == 0 else n * recursive_factorial(n - 1)"},{"question":"Write a python function to check if a given string \`s\` is a valid palindrome, considering only alphanumeric characters and ignoring cases.","solution":"def is_palindrome(s): Checks if the given string s is a valid palindrome, considering only alphanumeric characters and ignoring case. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = ''.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Write a python function to rotate a list to the right by k positions. The list can contain any type of data, and k can be larger than the length of the list.","solution":"def rotate_right(lst, k): Rotate the list to the right by k positions. Parameters: lst (list): The list to be rotated. k (int): The number of positions to rotate. Returns: list: The rotated list. if not lst: return [] k = k % len(lst) # Handle cases where k is greater than the length of the list return lst[-k:] + lst[:-k]"},{"question":"Write a python function to remove duplicates from a list and return the list with unique elements maintaining the original order. Without using built-in functions like set().","solution":"def remove_duplicates(input_list): Remove duplicates from a list and return the list with unique elements maintaining the original order. unique_list = [] seen = set() for item in input_list: if item not in seen: unique_list.append(item) seen.add(item) return unique_list"},{"question":"Write a python function to compute the sum of all the numbers in a nested list using recursion. The function should handle lists that contain both integers and other lists.","solution":"def sum_nested_list(nested_list): Recursively computes the sum of all numbers in a nested list. total = 0 for element in nested_list: if isinstance(element, list): total += sum_nested_list(element) else: total += element return total"},{"question":"Write a python function to find the first character that is not repeated in a given string. If no such character exists, return an underscore (_). The input string will contain only ASCII characters.","solution":"def first_non_repeated_character(s): Returns the first character that is not repeated in the given string. If no such character exists, returns an underscore (_). Parameters: s (str): The input string containing only ASCII characters. Returns: str: The first non-repeated character or an underscore (_). char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return '_'"},{"question":"Write a python function to extract email addresses from a given string. The emails are in the format of \\"name@domain.com\\". Assume that the emails are not separated by any symbols other than spaces and that the string may contain multiple email addresses separated by spaces. Here's a sample string: \\"Please contact us at support@example.com or sales@example.net for further information.\\"","solution":"import re def extract_emails(text): Extracts all email addresses from the given text. Args: text (str): The text containing email addresses. Returns: list: A list of email addresses found in the text. email_pattern = r'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,7}b' return re.findall(email_pattern, text)"},{"question":"Write a python function to solve the following problem: Calculate the sum of elements in a list where each element is the product of its original value and its index in the list. For example, if the input list is [1, 2, 3], the output should be 8, since (1*0) + (2*1) + (3*2) = 0 + 2 + 6 = 8.","solution":"def sum_of_elements_with_indices(lst): Returns the sum of elements in a list where each element is the product of its original value and its index in the list. Parameters: lst (list): The input list of numbers. Returns: int: The calculated sum. return sum(value * index for index, value in enumerate(lst))"},{"question":"Write a python function to implement Dijkstra's algorithm for finding the shortest path in a graph. The graph will be represented as an adjacency dictionary and the function should return the shortest path distance from the start node to all other nodes. Dijkstra's algorithm is used to find the shortest paths between nodes in a graph. It works for both directed and undirected graphs with non-negative edge weights. Could you please provide an example graph and demonstrate the implementation?","solution":"import heapq def dijkstra(graph, start): Implements Dijkstra's algorithm to find the shortest path from the start node to all other nodes in the given graph. Parameters: graph (dict): A dictionary representing the graph where keys are nodes and values are dictionaries of neighboring nodes and their respective edge weights. start: The starting node. Returns: dict: A dictionary where keys are nodes and values are the shortest path distances from the start node. # Initialize distances from start to all other nodes as infinity distances = {node: float('inf') for node in graph} distances[start] = 0 # Priority queue to hold nodes to explore priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue # Explore neighbors for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"Write a python function to replace all occurrences of a given string with another string in a text file.","solution":"def replace_string_in_file(file_path, old_string, new_string): Replace all occurrences of old_string with new_string in the specified file. :param file_path: Path to the file :param old_string: String to be replaced :param new_string: String to replace with # Read the content of the file with open(file_path, 'r', encoding='utf-8') as file: file_content = file.read() # Replace the old string with the new string new_content = file_content.replace(old_string, new_string) # Write the modified content back to the file with open(file_path, 'w', encoding='utf-8') as file: file.write(new_content)"},{"question":"Write a python function to sort a list of integers in ascending order using the heap data structure.","solution":"import heapq def heap_sort(lst): Sorts a list of integers in ascending order using heap sort. Parameters: lst (list): A list of integers. Returns: list: A sorted list of integers. heapq.heapify(lst) # Transform list into a heap, in-place sorted_list = [heapq.heappop(lst) for _ in range(len(lst))] return sorted_list"},{"question":"Write a python function to find the factorial of a number. Can you also provide a brief explanation of how the factorial function works?","solution":"def factorial(n): Returns the factorial of a given number n. Parameters: n (int): A non-negative integer whose factorial is to be computed. Returns: int: Factorial of the given number. Raises: ValueError: If n is a negative integer. if n < 0: raise ValueError(\\"Negative numbers do not have a factorial.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to generate all possible unique combinations of a given list's elements where the order of elements in a combination does not matter.","solution":"from itertools import combinations def unique_combinations(elements): Generate all possible unique combinations of a given list's elements where the order of elements in a combination does not matter. :param elements: A list of elements :return: A list of tuples, each representing a unique combination of elements all_combinations = [] for r in range(1, len(elements) + 1): all_combinations.extend(combinations(elements, r)) return all_combinations"},{"question":"Write a python function to find the maximum sum of a contiguous subsequence in an array.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subsequence in the array \`arr\`. Uses Kadane's algorithm to find the maximum sum. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find the first duplicate number in a list of integers.","solution":"def first_duplicate(arr): Returns the first duplicate number in a list of integers. If no duplicate exists, return None. seen = set() for num in arr: if num in seen: return num seen.add(num) return None"},{"question":"Write a python function to find the natural number with the maximum number of divisors between a given range [L, R].","solution":"def max_divisors_in_range(L, R): Finds the natural number with the maximum number of divisors between L and R (inclusive). Parameters: L (int): Lower bound of the range. R (int): Upper bound of the range. Returns: int: The number with the most divisors in the range. int: The count of divisors of the number. def count_divisors(n): count = 0 for i in range(1, int(n**0.5) + 1): if n % i == 0: count += 1 if i != n // i: count += 1 return count max_divisors = 0 number_with_max_divisors = 0 for num in range(L, R + 1): divisors = count_divisors(num) if divisors > max_divisors: max_divisors = divisors number_with_max_divisors = num return number_with_max_divisors, max_divisors"},{"question":"Write a python function to display the sum of the first n natural numbers.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers. Parameters: n (int): The number up to which the sum is to be calculated. Returns: int: The sum of the first n natural numbers. if n < 1: raise ValueError(\\"Input should be a positive integer.\\") return n * (n + 1) // 2"},{"question":"Write a python function to calculate the sum of squares of all odd numbers in a given list.","solution":"def sum_of_squares_of_odds(numbers): Returns the sum of squares of all odd numbers in the given list. :param numbers: List[int] - List of integers :return: int - Sum of squares of all odd numbers return sum(x * x for x in numbers if x % 2 != 0)"},{"question":"Write a python function to generate a list of random numbers within a specified range. The function should allow the user to specify the count of random numbers and the range.","solution":"import random def generate_random_numbers(count, start, end): Generates a list of 'count' random numbers within the specified 'start' and 'end' range (inclusive). Args: - count: The number of random numbers to generate. - start: The lower bound of the range (inclusive). - end: The upper bound of the range (inclusive). Returns: - A list of random numbers. if count <= 0: return [] return [random.randint(start, end) for _ in range(count)]"},{"question":"Write a python function to count the number of even numbers in a given list using a list comprehension and a ternary operator.","solution":"def count_even_numbers(lst): Returns the count of even numbers in the given list. return len([1 for num in lst if num % 2 == 0])"},{"question":"Write a python function to remove duplicates from a given list. The function should return the list with unique elements, preserving the original order of elements. Also, implement error handling for the case when the input is not a list.","solution":"def remove_duplicates(input_list): Removes duplicates from the given list while preserving the original order of elements. Returns the list with unique elements. if not isinstance(input_list, list): raise TypeError(\\"Input should be a list\\") seen = set() unique_list = [] for item in input_list: if item not in seen: seen.add(item) unique_list.append(item) return unique_list"},{"question":"Write a python function to remove extra white spaces from a given string.","solution":"def remove_extra_whitespaces(s): Removes extra white spaces from the given string s. Args: s (str): The input string from which extra whitespaces need to be removed. Returns: str: The processed string with extra whitespaces removed. return ' '.join(s.split())"},{"question":"Write a python function to convert a string to an integer manually, without using the built-in \`int()\` function. The function should handle both positive and negative integers.","solution":"def manual_str_to_int(s): Converts a string to an integer manually. Args: s (str): The string to be converted. Returns: int: The converted integer. if not s: raise ValueError(\\"Input string is empty\\") # Determine if the number is negative is_negative = s[0] == '-' # Start index for digit extraction start_idx = 1 if is_negative or s[0] == '+' else 0 num = 0 for char in s[start_idx:]: if '0' <= char <= '9': num = num * 10 + (ord(char) - ord('0')) else: raise ValueError(f\\"Invalid character '{char}' in input string\\") return -num if is_negative else num"},{"question":"Write a python function to calculate the sum of all numbers in a given list. The function should be named \`calculate_sum\` and take a list of integers as an argument. The function should handle any list of integers, including both positive and negative numbers.","solution":"def calculate_sum(numbers): Returns the sum of all numbers in the given list. :param numbers: List of integers :return: Integer sum of the list elements return sum(numbers)"},{"question":"Write a python function to remove the nth node from the end of a linked list and return its head. The list is at least one node long. Note that the position is 1-indexed, not 0-indexed.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_nth_from_end(head, n): Removes the nth node from the end of a linked list and returns its head. :param head: ListNode, the head of the linked list :param n: int, the position from the end to remove :return: ListNode, the head of the modified linked list # Create a dummy node at the start to handle edge cases like removing the first node dummy = ListNode(0) dummy.next = head first = second = dummy # Move first n+1 steps ahead, so the gap between first and second is n nodes for _ in range(n + 1): first = first.next # Move both first and second pointers to the end of the list while first: first = first.next second = second.next # Remove the nth node from the end second.next = second.next.next return dummy.next"},{"question":"Write a python function to parse the given text and extract information about the function call, including the function name and the arguments passed to it. The text will follow the format \\"<function_name>(<arg1>, <arg2>, ...)\\".","solution":"def parse_function_call(text): Parses the given text to extract the function name and the arguments passed to it. Args: text (str): A string in the format \\"<function_name>(<arg1>, <arg2>, ...)\\" Returns: tuple: A tuple containing the function name and a list of arguments. # Remove whitespaces from the text to manage cases like \\"func( 1, 2 , 3 )\\" text = text.replace(\\" \\", \\"\\") # Locate the position of the first parenthesis start = text.find('(') # Extract the function name function_name = text[:start] # Extract the arguments part and remove the closing parenthesis args_text = text[start+1:len(text)-1] # Split the arguments by comma if not empty if args_text: args = args_text.split(',') else: args = [] return function_name, args"},{"question":"Write a python function to extract data from a JSON file using the \`json\` module. The function should take a file path as an argument and return a dictionary object containing the data structure.","solution":"import json def extract_json_data(file_path): Extracts data from a JSON file and returns a dictionary object containing the data structure. :param file_path: str, the path to the JSON file :return: dict, the data structure from the JSON file with open(file_path, 'r') as file: data = json.load(file) return data"},{"question":"Write a python function to find the kth largest element in an array of integers. You are required to implement the function using the selection sort algorithm.","solution":"def selection_sort(arr, k): Finds the kth largest element in an array using selection sort. Parameters: arr (list): List of integers. k (int): The position (1-based index) of the largest element to find. Returns: int: The kth largest element in the array. n = len(arr) # Perform k rounds of selection sort to bring the k largest elements to the end. for i in range(n - 1, n - k - 1, -1): # Find the maximum element in the unsorted part of the array. max_idx = 0 for j in range(1, i + 1): if arr[j] > arr[max_idx]: max_idx = j # Swap the found maximum element with the element at index i. arr[i], arr[max_idx] = arr[max_idx], arr[i] # The kth largest element is at index n - k. return arr[n - k]"},{"question":"Write a python function to find the K most frequent elements in an array. The function should return the elements in the order of their frequency from highest to lowest. If two elements have the same frequency, return them in the order of their appearance in the input array.","solution":"from collections import Counter def k_most_frequent_elements(arr, k): Returns the K most frequent elements in the array in the order of their frequency from highest to lowest. If two elements have the same frequency, returns them in the order of their appearance in the array. Args: arr (list): List of elements. k (int): Number of frequent elements to return. Returns: list: List of K most frequent elements. if k <= 0: return [] frequency = Counter(arr) # Sort elements first by frequency (descending) then by their first appearance in the array sorted_elements = sorted(frequency.keys(), key=lambda x: (-frequency[x], arr.index(x))) return sorted_elements[:k]"},{"question":"Write a python function to display the first 'n' Fibonacci numbers using recursion. What precautions should be taken to avoid excessive recursion depth?","solution":"def fibonacci(n): Returns the first 'n' Fibonacci numbers using recursion. def fib_rec(k): if k <= 0: return [] elif k == 1: return [0] elif k == 2: return [0, 1] else: seq = fib_rec(k - 1) seq.append(seq[-1] + seq[-2]) return seq return fib_rec(n) # Precautions to avoid excessive recursion depth: # 1. Use memoization or an iterative approach for very large 'n'. # 2. Set a maximum recursion depth limit with \`sys.setrecursionlimit()\`, # but be cautious as it may crash the program if the limit is too high."},{"question":"Write a python function to reverse bits of an integer number and return it as an unsigned integer.","solution":"def reverse_bits(n): Reverse the bits of an integer number and return it as an unsigned integer. reversed_bits = 0 for i in range(32): reversed_bits = (reversed_bits << 1) | (n & 1) n >>= 1 return reversed_bits"},{"question":"Write a python function to find the minimum depth of a binary tree where each node is labeled with a positive integer. The minimum depth is the shortest distance from the root node down to the nearest leaf node. A leaf node is a node with no children.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def minDepth(root): Find the minimum depth of a binary tree. if not root: return 0 # If left subtree is None, recur for right subtree if not root.left: return minDepth(root.right) + 1 # If right subtree is None, recur for left subtree if not root.right: return minDepth(root.left) + 1 # If both left and right subtrees are not None, find the minimum depth in both subtrees and add 1 return min(minDepth(root.left), minDepth(root.right)) + 1"},{"question":"Write a python function to find the length of the longest increasing subsequence in a given sequence of numbers.","solution":"def longest_increasing_subsequence(sequence): Returns the length of the longest increasing subsequence in the given sequence. if not sequence: return 0 dp = [1] * len(sequence) for i in range(1, len(sequence)): for j in range(i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a python function to return the missing values in a sequence of numbers from 1 to n.","solution":"def find_missing_numbers(sequence, n): Returns the missing values in a sequence of numbers from 1 to n. :param sequence: List[int], the list of numbers in the sequence. :param n: int, the upper bound of the sequence. :return: List[int], the missing numbers in the sequence. full_set = set(range(1, n+1)) sequence_set = set(sequence) missing_numbers = full_set - sequence_set return sorted(list(missing_numbers))"},{"question":"Write a python function to print all possible combinations of k numbers out of 1 to n.","solution":"from itertools import combinations def print_combinations(n, k): Prints all possible combinations of k numbers out of 1 to n. result = list(combinations(range(1, n+1), k)) for comb in result: print(comb) return result # returning result for unit testing purposes"},{"question":"Write a python function to count the number of lowercase letters in a string.","solution":"def count_lowercase_letters(s): Counts the number of lowercase letters in the given string. return sum(1 for char in s if char.islower())"},{"question":"Write a python function to find the sum of all numbers in a list that are divisible by 3 but not divisible by 5.","solution":"def sum_divisible_by_3_not_5(numbers): Returns the sum of all numbers in the list that are divisible by 3 but not divisible by 5. return sum(num for num in numbers if num % 3 == 0 and num % 5 != 0)"},{"question":"Write a python function to find the number of islands in a given 2D grid (matrix). An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. Assume all four edges of the grid are surrounded by water.","solution":"def num_islands(grid): Returns the number of islands in the given 2D grid. if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == '0' or visited[r][c]: return visited[r][c] = True dfs(r - 1, c) # Up dfs(r + 1, c) # Down dfs(r, c - 1) # Left dfs(r, c + 1) # Right count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == '1' and not visited[r][c]: count += 1 dfs(r, c) return count"},{"question":"Write a python function to sort an array. The given array is using the stack data structure.","solution":"def sort_stack(stack): Sorts a stack in ascending order using an auxiliary stack. auxiliary_stack = [] while stack: temp = stack.pop() while auxiliary_stack and auxiliary_stack[-1] > temp: stack.append(auxiliary_stack.pop()) auxiliary_stack.append(temp) return auxiliary_stack"},{"question":"Write a python function to check if the two provided numbers are anagrams of each other. An anagram is a word or phrase made by rearranging the letters of another, such as \\"cinema\\" formed from \\"iceman\\".","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams of each other, False otherwise. return sorted(str1) == sorted(str2)"},{"question":"Write a python function to replace all occurrences of a given word in a string with another word. The function should return the number of replacements made.","solution":"def replace_word(s, old_word, new_word): Replaces all occurrences of \`old_word\` in \`s\` with \`new_word\`. Returns the number of replacements made. count = s.count(old_word) s = s.replace(old_word, new_word) return s, count"},{"question":"Write a python function to check if a number is a prime number using a loop and boolean variable.","solution":"def is_prime(n): Return True if n is a prime number, else False. if n <= 1: return False is_prime = True for i in range(2, int(n ** 0.5) + 1): if n % i == 0: is_prime = False break return is_prime"},{"question":"Write a python function to implement a decision tree algorithm using decision tree learning on a training dataset. The function should take in the dataset as input, fit the model on the training data, and return the trained decision tree model.","solution":"from sklearn.tree import DecisionTreeClassifier def train_decision_tree(X, y, **kwargs): Trains a decision tree classifier on the provided dataset. :param X: Features of the training dataset. :param y: Labels of the training dataset. :param kwargs: Additional keyword arguments for DecisionTreeClassifier. :return: Trained decision tree model. model = DecisionTreeClassifier(**kwargs) model.fit(X, y) return model"},{"question":"Write a python function to reverse the characters of each word in a given string. The string can contain multiple words separated by spaces.","solution":"def reverse_words_in_string(s): Reverses the characters of each word in the given string. Parameters: s (str): The input string containing multiple words separated by spaces. Returns: str: The string with each word's characters reversed. words = s.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a python function to calculate the total number of unique pairs in a list where the sum of each pair is divisible by a given divisor \`d\`. The function should take two parameters: a list of integers \`nums\` and the divisor \`d\`.","solution":"def count_divisible_pairs(nums, d): Returns the total number of unique pairs where the sum of each pair is divisible by d. :param nums: List of integers. :param d: The divisor. :return: The number of unique pairs. count = 0 n = len(nums) for i in range(n): for j in range(i + 1, n): if (nums[i] + nums[j]) % d == 0: count += 1 return count"},{"question":"Write a python function to count the number of unique characters in a string and return a dictionary with the character as the key and the count as the value.","solution":"def count_unique_characters(s): Returns a dictionary with characters as keys and their counts as values. Parameters: s (str): The input string to count characters from Returns: dict: A dictionary with characters as keys and their counts as values char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Write a python function to merge two integer arrays. The function should return the merged array sorted in ascending order. You can assume that the input arrays are already sorted in ascending order.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted integer arrays into one sorted array. Parameters: arr1 (list of int): First sorted array. arr2 (list of int): Second sorted array. Returns: list of int: Merged sorted array. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a python function to check given string is reverse palindrome. A reverse palindrome is defined as a string which, when all non-alphanumeric characters are removed and all upper cases are converted into lower cases, reads the same both forwards and backwards.","solution":"def is_reverse_palindrome(s): Check if the given string is a reverse palindrome. A reverse palindrome is defined as a string which, when all non-alphanumeric characters are removed and all upper cases are converted into lower cases, reads the same both forwards and backwards. :param s: Input string to check :return: True if the string is a reverse palindrome, False otherwise import re cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower() return cleaned_s == cleaned_s[::-1]"},{"question":"Write a python function to build a model that performs TF-IDF vectorization on text data and trains a Naive Bayes classifier for sentiment analysis.","solution":"from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.pipeline import make_pipeline def build_sentiment_analysis_model(): Builds a sentiment analysis model using TF-IDF vectorization and a Naive Bayes classifier. Returns: model: A scikit-learn pipeline object that can be used for training and prediction. # Create the TF-IDF vectorizer tfidf_vectorizer = TfidfVectorizer() # Create the Naive Bayes classifier nb_classifier = MultinomialNB() # Build the pipeline model = make_pipeline(tfidf_vectorizer, nb_classifier) return model"},{"question":"Write a python function to find the maximum sum of a sub-array of non-contiguous elements.","solution":"def max_non_contiguous_subarray_sum(nums): Returns the maximum sum of non-contiguous sub-arrays. # If the list is empty, the max sum is 0 if not nums: return 0 # Initialize the maximum sum as 0 max_sum = 0 for num in nums: if num > 0: max_sum += num # If all numbers were non-positive, then max_sum will be 0 and # we need to return the maximum number from nums (the least negative number) if max_sum == 0: max_sum = max(nums) return max_sum"},{"question":"Write a python function to get the subsequence with the maximum XOR value from a list of integers.","solution":"def max_xor_subsequence(nums): Returns the subsequence with the maximum XOR value from a list of integers. if not nums: return 0 # Initialize max XOR value and a base subsequence max_xor = 0 n = len(nums) for i in range(1 << n): current_xor = 0 for j in range(n): if i & (1 << j): current_xor ^= nums[j] max_xor = max(max_xor, current_xor) return max_xor"},{"question":"Write a python function to find the position of the first occurrence of the digit '5' in a given string. If the digit '5' is not found, the function should return -1.","solution":"def find_first_five(s): Returns the position of the first occurrence of the digit '5' in a given string s. If the digit '5' is not found, returns -1. return s.find('5')"},{"question":"Write a python function to extract data from a given XML file and convert it into a dictionary. Consider only the immediate child elements of the root element.","solution":"import xml.etree.ElementTree as ET def xml_to_dict(xml_file): Extracts data from a given XML file and converts it into a dictionary. Considers only the immediate child elements of the root element. tree = ET.parse(xml_file) root = tree.getroot() data_dict = {child.tag: child.text for child in root} return data_dict"},{"question":"Write a python function to convert the first letter of each word in a given string to uppercase.","solution":"def capitalize_words(sentence): Converts the first letter of each word in the given sentence to uppercase. Parameters: sentence (str): The sentence to be converted. Returns: str: The converted sentence with each word's first letter in uppercase. return ' '.join(word.capitalize() for word in sentence.split())"},{"question":"Write a python function to fill the missing values in a dataframe.","solution":"import pandas as pd def fill_missing_values(df, method='mean'): Fills the missing values in a DataFrame using the specified method. Parameters: df (pandas.DataFrame): The input DataFrame. method (str): The method to fill missing values. It can be one of 'mean', 'median', or 'mode'. Returns: pandas.DataFrame: DataFrame with missing values filled. if method == 'mean': return df.fillna(df.mean()) elif method == 'median': return df.fillna(df.median()) elif method == 'mode': return df.fillna(df.mode().iloc[0]) else: raise ValueError(\\"Method not recognized, use 'mean', 'median' or 'mode'\\")"},{"question":"Write a python function to find the sum of the first n even natural numbers.","solution":"def sum_of_even_numbers(n): Returns the sum of the first n even natural numbers. Parameters: n (int): The number of first even natural numbers to sum. Returns: int: The sum of the first n even natural numbers. # The first n even natural numbers are: 2, 4, 6, ..., 2n # Their sum can be calculated as: 2 + 4 + 6 + ... + 2n # This can be simplified using the formula for the sum of an arithmetic series: # Sum = n/2 * (first_term + last_term) # Here, first_term = 2 and last_term = 2n return n * (n + 1)"},{"question":"Write a python function to generate all possible full binary trees with n nodes. A full binary tree is a binary tree where each node has either 0 or 2 children. If n is odd, return the list of the root nodes. If n is even, return an empty list.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def generate_all_full_binary_trees(n): if n % 2 == 0: return [] def generate_trees(num_nodes): if num_nodes == 1: return [TreeNode(0)] trees = [] for left_nodes in range(1, num_nodes, 2): right_nodes = num_nodes - 1 - left_nodes for left_tree in generate_trees(left_nodes): for right_tree in generate_trees(right_nodes): root = TreeNode(0) root.left = left_tree root.right = right_tree trees.append(root) return trees return generate_trees(n)"},{"question":"Write a python function to generate all valid combinations of n-pairs of parentheses.","solution":"def generate_parentheses(n): Returns a list of all valid combinations of n pairs of parentheses. result = [] def backtrack(s='', left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + '(', left + 1, right) if right < left: backtrack(s + ')', left, right + 1) backtrack() return result"},{"question":"Write a python function to reverse a string without using slicing or additional memory.","solution":"def reverse_string(s): Reverses a string without using slicing or additional memory. # Convert the string to a list of characters so we can modify it in place char_list = list(s) # Initialize pointers for the start and end of the list left = 0 right = len(char_list) - 1 # Swap characters from both ends of the list until the pointers meet in the middle while left < right: # Swap the characters char_list[left], char_list[right] = char_list[right], char_list[left] # Move the pointers left += 1 right -= 1 # Convert the list of characters back to a string return ''.join(char_list)"},{"question":"Write a python function to convert a prefix expression to a postfix expression. Prefix expression is an expression where operator precedes the operands. Please provide a detailed explanation along with the function.","solution":"def prefix_to_postfix(prefix_expr): Convert a prefix expression to a postfix expression. Args: prefix_expr (str): The prefix expression string. Returns: str: The postfix expression string. stack = [] # Read expression from right to left for symbol in reversed(prefix_expr.split()): if symbol.isalnum(): # Operand stack.append(symbol) else: # Operator operand1 = stack.pop() operand2 = stack.pop() new_expr = operand1 + \\" \\" + operand2 + \\" \\" + symbol stack.append(new_expr) return stack.pop()"},{"question":"Write a python function to calculate the area of a circle using the radius. The function should take the radius as an argument and return the area. Ensure the function uses the math module for accurate calculation.","solution":"import math def calculate_circle_area(radius): Returns the area of a circle given its radius. if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * (radius ** 2)"},{"question":"Write a python function to find the maximum number in a list using Python's built-in \`max()\` function. Provide a simple explanation of your solution, and ensure the function handles empty lists gracefully.","solution":"def find_max_in_list(lst): Returns the maximum number in a list using Python's built-in max() function. If the list is empty, returns None. if not lst: return None return max(lst)"},{"question":"Write a python function to generate the Fibonacci sequence up to n terms using iteration.","solution":"def fibonacci_sequence(n): Returns a list containing the Fibonacci sequence up to n terms. if n <= 0: return [] sequence = [0, 1] for i in range(2, n): next_term = sequence[-1] + sequence[-2] sequence.append(next_term) return sequence[:n]"},{"question":"Write a python function to find and print the first and last character of a string. The function should accept a string as an input parameter and should handle empty strings.","solution":"def first_and_last_char(s): Returns a tuple with the first and last character of the input string. If the string is empty, returns an empty tuple. if not s: return () return (s[0], s[-1])"},{"question":"Write a python function to prompt the user for their name and then prints their name in an attention-grabbing way using ASCII art.","solution":"def print_name_ascii(name): Prints the given name in an attention-grabbing way using ASCII art. art = f .___. .__ .__ | | ____ | |__ ___ | | ____ | |/ __ | | / _ | |/ | ___/| Y ( __/ | | | | |___|___ >___| /___ >__|___| / / / / / Welcome, {name}! print(art)"},{"question":"Write a python function to generate all combinations of a given string, including the empty string.","solution":"from itertools import combinations def generate_combinations(s): Generates all combinations of the given string, including the empty string. Parameters: s (str): The input string Returns: list: A list of all combinations of the input string result = [\\"\\"] # Start with the empty string for i in range(1, len(s) + 1): for combo in combinations(s, i): result.append(''.join(combo)) return result"},{"question":"Write a python function to find the number of ways a given integer can be represented as the sum of one or more non-negative integers. For example, 2 can be represented as 2 + 0, 1 + 1, or 1 + 0 + 1, giving us 3 different representations.","solution":"def count_partitions(n): Counts the number of ways a given integer can be represented as the sum of one or more non-negative integers. # Using dp array to store the results of subproblems dp = [0] * (n + 1) dp[0] = 1 for i in range(1, n + 1): for j in range(i, n + 1): dp[j] += dp[j - i] return dp[n]"},{"question":"Write a python function to find the maximum product of a contiguous subarray within a one-dimensional array of numbers. This is particularly useful for analyzing data in financial markets where trends over time need to be analyzed. You might encounter negative numbers that might cause the maximum product to change. For example, a negative number could turn into a positive number when multiplied by another negative number. Therefore, the code should consider both positive and negative numbers to determine the maximum product accurately.","solution":"def max_product_subarray(nums): Returns the maximum product of a contiguous subarray within the array nums. if not nums: return 0 max_prod = min_prod = result = nums[0] for n in nums[1:]: if n < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(n, max_prod * n) min_prod = min(n, min_prod * n) result = max(result, max_prod) return result"},{"question":"Write a python function to print out a list of prime numbers up to a given number n. The function should be named \`print_primes\` and it should take an integer \`n\` as input. The function should print each prime number up to \`n\` on a new line.","solution":"def print_primes(n): Prints all prime numbers up to and including n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) for prime in primes: print(prime) return primes"},{"question":"Write a python function to calculate the total number of subarrays which have exactly k distinct integers in a given array of integers.","solution":"def count_subarrays_with_k_distinct(arr, k): from collections import defaultdict def at_most_k_distinct(k): count = defaultdict(int) start = 0 total = 0 for end in range(len(arr)): if count[arr[end]] == 0: k -= 1 count[arr[end]] += 1 while k < 0: count[arr[start]] -= 1 if count[arr[start]] == 0: k += 1 start += 1 total += end - start + 1 return total return at_most_k_distinct(k) - at_most_k_distinct(k - 1)"},{"question":"Write a python function to find the highest Fibonacci number less than or equal to a given number n.","solution":"def highest_fibonacci_less_or_equal(n): Finds the highest Fibonacci number less than or equal to n. Parameters: n (int): The number to compare the Fibonacci numbers to. Returns: int: The highest Fibonacci number less than or equal to n. if n < 0: return None # Start with the first two Fibonacci numbers fib_1, fib_2 = 0, 1 while fib_2 <= n: fib_1, fib_2 = fib_2, fib_1 + fib_2 return fib_1"},{"question":"Write a python function to convert a list of strings into a single string using the join() method.","solution":"def join_strings(strings_list, delimiter=' '): Joins a list of strings into a single string with a given delimiter. :param strings_list: List of strings to be joined :param delimiter: Delimiter to be used for joining strings, default is space :return: A single string with all list elements joined by the delimiter return delimiter.join(strings_list)"},{"question":"Write a python function to calculate the sum of all even numbers in a given list using a list comprehension. The function should take a single list of integers as an argument and return the sum of all even numbers in that list.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the given list. :param numbers: List of integers :return: Sum of all even numbers return sum([num for num in numbers if num % 2 == 0])"},{"question":"Write a python function to get the value of a specific key in a dictionary.","solution":"def get_value(dictionary, key): Returns the value for the given key in the dictionary. If the key is not found, returns None. return dictionary.get(key, None)"},{"question":"Write a python function to convert a string to its hexadecimal representation.","solution":"def string_to_hex(s): Convert a string to its hexadecimal representation. Parameters: s (str): The string to be converted. Returns: str: The hexadecimal representation of the input string. return ''.join(format(ord(char), '02x') for char in s)"},{"question":"Write a python function to find the largest number in a list of integers. I'm looking for a function that takes a list of integers as an argument and returns the largest number using Python's built-in max function.","solution":"def find_largest_number(numbers): Returns the largest number in a list of integers. return max(numbers)"},{"question":"Write a python function to check if a string is a valid palindrome. A valid palindrome reads the same backward as forward, ignoring spaces, punctuation, and case sensitivity.","solution":"import string def is_valid_palindrome(s): Checks if a string is a valid palindrome, ignoring spaces, punctuation, and case sensitivity. Args: s (str): Input string to check for palindrome. Returns: bool: True if the input string is a palindrome, False otherwise. # Normalize the string: remove non-alphanumeric characters and convert to lower case normalized_str = ''.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string reads the same forward and backward return normalized_str == normalized_str[::-1]"},{"question":"Write a python function to check if a number is all zeros.","solution":"def is_all_zeros(number): Checks if the given number is all zeros (i.e., consists only of the digit '0'). Args: number (int): The number to check. Returns: bool: True if the number is all zeros, False otherwise. return str(number).strip() == '0' * len(str(number).strip())"},{"question":"Write a python function to calculate the sum of all divisors of a given number.","solution":"def sum_of_divisors(n): Returns the sum of all divisors of n. if n <= 0: return 0 total = 0 for i in range(1, n + 1): if n % i == 0: total += i return total"},{"question":"Write a python function to find the maximum profit that can be made by buying and selling a stock on different days. You are allowed to complete at most two transactions. You must sell the stock before you buy it again. For example, if the input is [3,3,5,0,0,3,1,4], the maximum profit should be 6 (buy on day 4 (price = 0) and sell on day 6 (price = 3), buy on day 7 (price = 1) and sell on day 8 (price = 4)).","solution":"def max_profit(prices): Function to calculate the maximum profit with at most two transactions. :param prices: List of prices, where prices[i] is the price of a given stock on day i. :return: Maximum profit achievable with at most two transactions. if not prices: return 0 n = len(prices) max_profit1 = [0] * n max_profit2 = [0] * n # Forward pass - maximum profit if we sell up to day i min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) max_profit1[i] = max(max_profit1[i-1], prices[i] - min_price) # Backward pass - maximum profit if we buy from day i max_price = prices[-1] for i in range(n-2, -1, -1): max_price = max(max_price, prices[i]) max_profit2[i] = max(max_profit2[i+1], max_price - prices[i]) # Combine the results of the two passes max_profit_final = 0 for i in range(n): max_profit_final = max(max_profit_final, max_profit1[i] + max_profit2[i]) return max_profit_final"},{"question":"Write a python function to a given number is prime or not. If it's a prime number, return True; if it's not, return False.","solution":"def is_prime(n): Returns True if n is a prime number; otherwise returns False. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # All other even numbers are not primes sqrt_n = int(n**0.5) + 1 for i in range(3, sqrt_n, 2): if n % i == 0: return False return True"},{"question":"Write a python function to find the maximum sum of a subarray within a given array of integers. The function should be able to handle cases where the array contains negative numbers. What is the time complexity of this function?","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray within the given array of integers. Handles cases where the array contains negative numbers. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum # Time Complexity: O(n), where n is the number of elements in the array."},{"question":"Write a python function to convert a given string to a list of integers. The string contains numbers separated by spaces.","solution":"def string_to_int_list(input_string): Converts a string of space-separated numbers into a list of integers. return list(map(int, input_string.split()))"},{"question":"Write a python function to reverse a string without using any built-in functions or methods. Here is the string: \\"hello world\\".","solution":"def reverse_string(s): Returns the reversed version of the input string s. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a python function to remove all occurrences of a given character from a string and return the modified string. You need to solve this without using any built-in string or list methods like \`replace()\`, \`remove()\`, \`delete()\`, etc. Additionally, you should not use loops (for, while) and recursion.","solution":"def remove_char(s, char): Remove all occurrences of 'char' from 's' without using built-in string methods, loops, or recursion. return ''.join([c for c in s if c != char])"},{"question":"Write a python function to calculate the total cost of purchasing a certain number of items. Each item costs a fixed price, and there is an additional shipping cost that applies regardless of the quantity of items purchased. The function should take the number of items, the price per item, and the shipping cost as inputs and return the total cost.","solution":"def total_cost(num_items, price_per_item, shipping_cost): Computes the total cost of purchasing a certain number of items including a fixed shipping cost. Parameters: num_items (int): The number of items to be purchased. price_per_item (float): The price of each individual item. shipping_cost (float): The fixed cost for shipping. Returns: float: The total cost of the purchase. items_cost = num_items * price_per_item total = items_cost + shipping_cost return total"},{"question":"Write a python function to find the length of the longest common subsequence (LCS) between two lists. The function should return the length of the LCS. The longest common subsequence is the longest sequence that appears in both lists, but not necessarily in sequential order.","solution":"def longest_common_subsequence_length(list1, list2): Returns the length of the longest common subsequence of two lists. :param list1: List of elements :param list2: List of elements :return: Length of the longest common subsequence # Initialize DP table m, n = len(list1), len(list2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the table in bottom-up fashion for i in range(1, m + 1): for j in range(1, n + 1): if list1[i - 1] == list2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Write a python function to count the number of occurrences of words in a given string.","solution":"def count_word_occurrences(text): Counts the number of occurrences of each word in the given string. Parameters: text (str): The string in which to count word occurrences. Returns: dict: A dictionary with words as keys and their respective counts as values. words = text.lower().split() word_count = {} for word in words: word = word.strip('.,!?:\\"'') if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"Write a python function to sort an array of integers in ascending order using the bucket sort algorithm. I should be able to input the array and the number of buckets.","solution":"def bucket_sort(array, num_buckets): Sorts an array using bucket sort algorithm. Args: array (list): The list of integers to be sorted. num_buckets (int): The number of buckets to be used in sorting. Returns: list: The sorted array. if len(array) == 0: return array if num_buckets <= 0: raise ValueError(\\"Number of buckets must be greater than zero.\\") min_value, max_value = min(array), max(array) bucket_range = (max_value - min_value) / num_buckets + 1 # Create empty buckets buckets = [[] for _ in range(num_buckets)] # Distribute array elements into buckets for value in array: index = int((value - min_value) // bucket_range) buckets[index].append(value) # Sort individual buckets and concatenate results sorted_array = [] for bucket in buckets: sorted_array.extend(sorted(bucket)) return sorted_array"},{"question":"Write a python function to find and return the first repeated element in a list of integers. If no such element exists, return -1. The function should also be efficient, ideally with a time complexity of O(n).","solution":"def first_repeated_element(arr): Return the first repeated element in the list. If no such element exists, return -1. seen = set() for element in arr: if element in seen: return element seen.add(element) return -1"},{"question":"Write a python function to find the maximum number of blocks after performing certain operations on a list of integers.","solution":"def max_blocks_after_operations(arr): Returns the maximum number of blocks after performing certain operations on a list of integers. n = len(arr) if n == 0: return 0 max_blocks = 1 for i in range(1, n): if arr[i] != arr[i - 1]: max_blocks += 1 return max_blocks"},{"question":"Write a python function to find the kth smallest element in a Binary Search Tree (BST). Assume that the tree is not empty.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def kth_smallest(root, k): Find the kth smallest element in a BST. def in_order_traversal(node): if node is None: return [] # Traverse the left subtree left = in_order_traversal(node.left) # Traverse the root node root = [node.val] # Traverse the right subtree right = in_order_traversal(node.right) # Combine the results return left + root + right # Get the in-order traversal inorder_values = in_order_traversal(root) # Return the k-1 index as indices are 0-based return inorder_values[k-1]"},{"question":"Write a python function to take in a list of integers and return the sum of the cubes of the even numbers that are located at odd indices in the list.","solution":"def sum_of_cubes_of_even_numbers_at_odd_indices(lst): Returns the sum of the cubes of the even numbers that are located at odd indices in the list. Args: lst (list): A list of integers. Returns: int: The sum of the cubes of the even numbers at odd indices. return sum(x**3 for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0)"},{"question":"Write a python function to solve the problem of finding the minimum number of coins required to reach a given target amount. The function should take the target amount and a list of coin denominations as input. For example, if the target amount is 11 and the coin denominations are [1, 2, 5], the function should return 3 since 5 + 5 + 1 = 11 and three coins are used.","solution":"def min_coins(target, coins): Returns the minimum number of coins required to reach the target amount using the given coin denominations. # Initialize the array for storing the minimum coins needed for each amount dp = [float('inf')] * (target + 1) dp[0] = 0 # Compute the minimum coins required for each amount up to the target for coin in coins: for x in range(coin, target + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[target] if dp[target] != float('inf') else -1"},{"question":"Write a python function to fetch top 5 regions from the given list of sales data, where each item in the list is a tuple containing a region and sales amount. The regions should be sorted by sales amount in descending order, and the function should return only the top 5 regions.","solution":"def top_5_regions(sales_data): Fetches the top 5 regions based on sales amount. Parameters: sales_data (list): A list of tuples, each containing a region (str) and sales amount (int). Returns: list: A list of top 5 regions sorted by sales amount in descending order. # Sorting the sales data based on sales amount in descending order sorted_sales_data = sorted(sales_data, key=lambda x: x[1], reverse=True) # Extracting the top 5 regions top_regions = [region for region, sales in sorted_sales_data[:5]] return top_regions"},{"question":"Write a python function to find if a given text is a palindrome.","solution":"def is_palindrome(text): Checks if the given text is a palindrome. Args: text (str): The string to check. Returns: bool: True if the text is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_text = ''.join(char.lower() for char in text if char.isalnum()) # Check if the cleaned text is the same forwards and backwards return cleaned_text == cleaned_text[::-1]"},{"question":"Write a python function to check if a given year is a leap year or not. A leap year is exactly divisible by 4 except for end-of-century years, which must be divisible by 400. This means that the year 2000 was a leap year, although 1900 was not. Information regarding this was not available leading to the belief that all four-digit numbers evenly divisible by four are leap years. It means that in the Gregorian calendar, only three instances of four-century years are leap years: years evenly divisible by 400. What is the Python function to check if a year is a leap year or not?","solution":"def is_leap_year(year): Determine whether a given year is a leap year. A leap year is exactly divisible by 4 except for end-of-century years, which must be divisible by 400. Args: year (int): The year to check. Returns: bool: True if the year is a leap year, False otherwise. if (year % 4 == 0) and (year % 100 != 0) or (year % 400 == 0): return True else: return False"},{"question":"Write a python function to print all the numbers between 1 to 100 which are divisible by 3 and 5","solution":"def divisible_by_3_and_5(): Returns a list of numbers between 1 to 100 that are divisible by both 3 and 5. return [num for num in range(1, 101) if num % 3 == 0 and num % 5 == 0]"},{"question":"Write a python function to check if a given string contains all the characters of a another string in the same order, but not necessarily contiguous.","solution":"def contains_in_order(str1, str2): Checks if str2 contains all characters of str1 in the same order, but not necessarily contiguous. iter_str2 = iter(str2) return all(char in iter_str2 for char in str1)"},{"question":"Write a python function to find the number of occurrences of a given substring within a string, including overlapping occurrences. For example, the string \\"ababa\\" contains three occurrences of the substring \\"aba\\", including \\"aba\\" at the start and end of the string.","solution":"def count_occurrences(s, substr): Returns the number of occurrences of a given substring within a string, including overlapping occurrences. Parameters: s (str): The string in which to search for occurrences. substr (str): The substring for which to count occurrences. Returns: int: The number of occurrences of the substring within the string. count = start = 0 while True: start = s.find(substr, start) if start == -1: break # Move to the next position after the current match, allowing for overlapping occurrences start += 1 count += 1 return count"},{"question":"Write a python function to find the minimum cost of flight tickets between two given cities that only operates on non-stop flights. The cost of a ticket from a city 'A' to a city 'B' is given by the list \`costs\` where \`costs[i] = [fromCity, toCity, price]\`. There may be multiple ticket prices between the same pair of cities. You must find the minimum cost to get from 'X' to 'Y' using non-stop flights.","solution":"def find_min_cost_flight(costs, from_city, to_city): Finds the minimum cost of a non-stop flight from \`from_city\` to \`to_city\`. Args: costs (list): A list of lists where each inner list contains [fromCity, toCity, price]. from_city (str): The starting city. to_city (str): The destination city. Returns: int: The minimum cost of the flight or -1 if such a flight does not exist. min_cost = float('inf') flight_exists = False for cost in costs: if cost[0] == from_city and cost[1] == to_city: min_cost = min(min_cost, cost[2]) flight_exists = True return min_cost if flight_exists else -1"},{"question":"Write a python function to find the maximum repeating number in an array of size n and a maximum number \`m\` such that the array contains integers in the range from 0 to \`m\`. To solve this problem, you cannot use extra space and you must implement this in O(n) time complexity.","solution":"def max_repeating_number(arr, n, m): Returns the maximum repeating number in the given array. Parameters: arr (list): A list of integers where the integers are in the range 0 to m. n (int): Size of the array. m (int): Maximum value in the array. Returns: int: The maximum repeating number in the array. # Increment elements in the array based on the value they hold for i in range(n): arr[arr[i] % (m + 1)] += (m + 1) # Find the index of the maximum value max_value = max(arr) max_index = arr.index(max_value) # Restore the original array values for i in range(n): arr[i] = arr[i] % (m + 1) return max_index"},{"question":"Write a python function to insert into a sorted array depending on its sorted order.","solution":"def insert_into_sorted_array(arr, value): Inserts a value into the sorted array maintaining the sorted order. Parameters: arr (list): A list of sorted integers. value (int): The integer value to insert into the sorted array. Returns: list: A new sorted list with the value inserted. index = next((i for i, x in enumerate(arr) if x > value), len(arr)) return arr[:index] + [value] + arr[index:]"},{"question":"Write a python function to find the length of the last word in a given string. The length of a word is defined as the number of characters in it, ignoring any leading or trailing whitespace. If the string is empty or contains only whitespace, return 0.","solution":"def length_of_last_word(s): Returns the length of the last word in the given string s. If the string is empty or contains only whitespace, returns 0. # Strip the string to remove leading and trailing whitespace s = s.strip() # Split the string by any whitespace words = s.split() # If there are no words, return 0 if not words: return 0 # Return the length of the last word in the list return len(words[-1])"},{"question":"Write a python function to find the sum of all elements in a list that are greater than a given threshold. The function should take two input parameters: the list of numbers and the threshold. If the list is empty, the function should return 0.","solution":"def sum_above_threshold(numbers, threshold): Returns the sum of all elements in the list that are greater than the given threshold. :param numbers: list of numbers :param threshold: the threshold value :return: sum of all elements greater than the threshold return sum(num for num in numbers if num > threshold)"},{"question":"Write a python function to replace a given word in a sentence with another word. For example, if the sentence is \\"Hello world, welcome to the world of programming\\". And the word to be replaced is \\"world\\" and the new word is \\"earth\\". After replacement, the function should return \\"Hello earth, welcome to the earth of programming\\".","solution":"def replace_word(sentence, old_word, new_word): Replaces all occurrences of old_word with new_word in the given sentence. Parameters: sentence (str): The original sentence. old_word (str): The word to be replaced. new_word (str): The word to replace with. Returns: str: The modified sentence with old_word replaced by new_word. return sentence.replace(old_word, new_word)"},{"question":"Write a python function to find the second smallest number in a list, but your function must also check if the list contains duplicates. If the list contains duplicates, return -1 as the second smallest number should not include duplicates.","solution":"def second_smallest(numbers): Returns the second smallest number in a list. If the list contains duplicates, returns -1. if len(numbers) < 2 or len(numbers) != len(set(numbers)): return -1 # Find the first and second smallest numbers first, second = float('inf'), float('inf') for num in numbers: if num < first: first, second = num, first elif first < num < second: second = num return second if second != float('inf') else -1"},{"question":"Write a python function to find the sum of all numbers in a list that are divisible by 3 or 5. If the list is empty, the function should return 0. Also, ensure that your function can handle any mixed list of integers and other data types, ignoring any non-integer values.","solution":"def sum_divisible_by_3_or_5(numbers): Returns the sum of all integers in the given list that are divisible by 3 or 5. If the list is empty, returns 0. Ignores non-integer values in the list. :param numbers: List of mixed data types including integers. :return: Sum of integers divisible by 3 or 5. return sum(x for x in numbers if isinstance(x, int) and (x % 3 == 0 or x % 5 == 0))"},{"question":"Write a python function to find the maximum element in an array using divide and conquer approach. The function should return the maximum element from the array.","solution":"def find_maximum(arr): Returns the maximum element in the array using divide and conquer approach. # Base case: if the array has only one element, return that element if len(arr) == 1: return arr[0] # Find the middle index mid = len(arr) // 2 # Recursively find the maximum in the left and right halves left_max = find_maximum(arr[:mid]) right_max = find_maximum(arr[mid:]) # Return the maximum of the two halves return max(left_max, right_max)"},{"question":"Write a python function to calculate the factor of a number. The function should take an integer as an input and return a list of integers that are the factors of the input number. For example, the factors of 12 are 1, 2, 3, 4, 6, and 12.","solution":"def factor(number): Returns a list of factors of the given number. Parameters: number (int): The number to find factors for. Returns: list: A list of integers that are factors of the number. if number < 1: raise ValueError(\\"Number must be greater than 0\\") return [i for i in range(1, number + 1) if number % i == 0]"},{"question":"Write a python function to count the number of prime numbers less than a given non-negative integer, n. Prime numbers are numbers greater than 1 that have no divisors other than 1 and themselves. The function should use an optimized algorithm to achieve this, such as the Sieve of Eratosthenes, which is efficient for counting primes in a range up to n.","solution":"def count_primes(n): Returns the number of prime numbers less than a given non-negative integer, n, using the Sieve of Eratosthenes algorithm. if n <= 2: return 0 sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return sum(sieve)"},{"question":"Write a python function to check if a given array is a permutation of a palindrome or not. A string is a palindrome if it reads the same backward as forward, and a permutation of a palindrome is a rearrangement of letters that can form a palindrome. For example, \\"civic\\" is a permutation of a palindrome because it can be rearranged to form \\"civic\\".","solution":"def is_permutation_of_palindrome(s): Check if a given string is a permutation of a palindrome. A string is a permutation of a palindrome if at most one character has an odd count. Args: s (str): The input string. Returns: bool: True if the string is a permutation of a palindrome, False otherwise. from collections import Counter count = Counter(s.replace(\\" \\", \\"\\").lower()) # Ignore spaces and case odd_count = sum(1 for char, cnt in count.items() if cnt % 2 == 1) return odd_count <= 1"},{"question":"Write a python function to calculate the sum of the squares of the first n natural numbers. The function should have a time complexity of O(n) and should use a loop to iterate over the numbers.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. Parameters: n (int): The number of first natural numbers to square and sum. Returns: int: The sum of the squares of the first n natural numbers. if n < 1: return 0 sum_squares = 0 for i in range(1, n + 1): sum_squares += i ** 2 return sum_squares"},{"question":"Write a python function to find the range of a given list of integers. The range is defined as the difference between the maximum and minimum values in the list. If the list is empty, the function should return None.","solution":"def find_range(nums): This function returns the range of a given list of integers. The range is defined as the difference between the maximum and minimum values in the list. If the list is empty, the function returns None. if not nums: return None return max(nums) - min(nums)"},{"question":"Write a python function to create a dictionary with all possible substrings from a given string as keys and their frequencies as values.","solution":"def substring_frequencies(s): Returns a dictionary with all possible substrings of the input string 's' as keys and their frequencies as values. freq_dict = {} length = len(s) for i in range(length): for j in range(i + 1, length + 1): substr = s[i:j] if substr in freq_dict: freq_dict[substr] += 1 else: freq_dict[substr] = 1 return freq_dict"},{"question":"Write a python function to remove a given element from a list. The function should also return the updated list.","solution":"def remove_element(lst, element): Removes the first occurrence of the specified element from the list. Args: lst (list): The list from which to remove the element. element: The element to be removed. Returns: list: The updated list with the element removed. if element in lst: lst.remove(element) return lst"},{"question":"Write a python function to reverse the order of words in a given sentence without using slicing.","solution":"def reverse_words(sentence): Reverses the order of words in the given sentence. Parameters: sentence (str): The sentence to reverse the words of Returns: str: The sentence with the words in reversed order words = sentence.split() reversed_words = [] for word in words: reversed_words.insert(0, word) return ' '.join(reversed_words)"},{"question":"Write a python function to flatten a nested list of integers using a flattened iterator.","solution":"from collections.abc import Iterable def flatten(nested_list): Generator to flatten a nested list of integers. Args: nested_list (list): A nested list of integers. Yields: int: Each integer from the flattened list. for item in nested_list: if isinstance(item, Iterable) and not isinstance(item, (str, bytes)): yield from flatten(item) else: yield item"},{"question":"Write a python function to check if a given array has a single element that is max. If so, return twice that element. If there are no such elements, return -1. An empty array should also return -1.","solution":"def max_twice_if_single(arr): Returns twice the single maximum element if it exists, otherwise -1. if not arr: return -1 max_count = 0 current_max = arr[0] for num in arr: if num > current_max: current_max = num max_count = 1 elif num == current_max: max_count += 1 if max_count == 1: return current_max * 2 else: return -1"},{"question":"Write a python function to calculate the total cost of an order based on its items and prices. The function should take a dictionary where keys are item names and values are their prices, and return the total cost of all the items in the dictionary. If the dictionary is empty, the function should return 0.","solution":"def calculate_total_cost(order): Calculate the total cost of an order. Parameters: order (dict): A dictionary with item names as keys and item prices as values. Returns: float: Total cost of all the items in the order. Returns 0 if the order is empty. return sum(order.values())"},{"question":"Write a python function to find the minimum number of coins needed to make change for a given amount. The function should take two arguments: a list of coin denominations and the target amount. The function should return the minimum number of coins required, or -1 if it's not possible to make change with the given denominations.","solution":"def min_coins(coins, amount): Returns the minimum number of coins needed to make the given amount, or -1 if it's not possible. :param coins: List of coin denominations. :param amount: The target amount. :return: The minimum number of coins needed or -1 if not possible. # Initialize DP array with infinity # dp[i] represents the fewest number of coins needed to make amount i dp = [float('inf')] * (amount + 1) dp[0] = 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a python function to sort a list of elements using the quick sort algorithm.","solution":"def quicksort(arr): This function implements the Quick Sort algorithm to sort a list of elements. if len(arr) <= 1: return arr else: pivot = arr[0] less_than_pivot = [x for x in arr[1:] if x <= pivot] greater_than_pivot = [x for x in arr[1:] if x > pivot] return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)"},{"question":"Write a python function to recursively calculate and return the sum of all the elements in a triangular matrix. The triangular matrix is represented as a list of lists where each sublist length is less than or equal to the list preceding it.","solution":"def sum_triangular_matrix(matrix, row=0, col=0): Recursively calculates and returns the sum of all elements in a triangular matrix. Parameters: matrix (list of lists): The triangular matrix. row (int): Current row index. col (int): Current column index. Returns: int: The sum of all elements in the triangular matrix. if row >= len(matrix): return 0 if col >= len(matrix[row]): return sum_triangular_matrix(matrix, row+1, 0) return matrix[row][col] + sum_triangular_matrix(matrix, row, col+1)"},{"question":"Write a python function to implement the game \\"rock-paper-scissors\\" where two players can play against each other. The function should prompt the two players to input their choices, validate the choices, and then determine the winner based on the classic rules: rock crushes scissors, scissors cut paper, and paper covers rock. The function should handle all possible inputs (e.g., rock, paper, scissors, Rock, Paper, Scissors) and ignore case sensitivity. Finally, the function should print the result of the game.","solution":"def rock_paper_scissors(player1_choice, player2_choice): Determines the winner of a rock-paper-scissors game between two players. Parameters: player1_choice (str): The choice of player 1 (rock, paper, or scissors). player2_choice (str): The choice of player 2 (rock, paper, or scissors). Returns: str: The result of the game (\\"Player 1 wins\\", \\"Player 2 wins\\", or \\"It's a tie\\"). choices = ['rock', 'paper', 'scissors'] player1_choice = player1_choice.lower() player2_choice = player2_choice.lower() # Validate choices if player1_choice not in choices or player2_choice not in choices: return \\"Invalid choice(s). Valid choices are: rock, paper, scissors.\\" # Determine the winner if player1_choice == player2_choice: return \\"It's a tie\\" elif (player1_choice == 'rock' and player2_choice == 'scissors') or (player1_choice == 'scissors' and player2_choice == 'paper') or (player1_choice == 'paper' and player2_choice == 'rock'): return \\"Player 1 wins\\" else: return \\"Player 2 wins\\""},{"question":"Write a python function to find all permutations of a string. Here's the string \`str\` = \\"abc\\".","solution":"from itertools import permutations def find_permutations(s): Returns all permutations of a string. Args: s (str): The input string. Returns: list: A list of all permutations. return [''.join(p) for p in permutations(s)]"},{"question":"Write a python function to validate an email.","solution":"import re def is_valid_email(email): Validates if the provided email is in a proper format. Returns True if the email is valid, otherwise False. # Regular expression for validating an email address email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' # Use re.match to check if the email matches the pattern return re.match(email_regex, email) is not None"},{"question":"Write a python function to calculate the sum of squares of all integers from 1 to n.","solution":"def sum_of_squares(n): Returns the sum of squares of all integers from 1 to n. Parameters: n (int): The upper limit integer. Returns: int: The sum of squares from 1 to n. return sum(i**2 for i in range(1, n+1))"},{"question":"Write a python function to calculate the factorial of a number using recursion. Also, handle a possible error if the input is negative.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, raises a ValueError. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to implement a stack using a list. The function should support push, pop, peek, and is_empty operations. Ensure that the stack operations are performed in O(1) time complexity.","solution":"class Stack: def __init__(self): self.stack = [] def push(self, item): Pushes an item onto the stack. self.stack.append(item) def pop(self): Pops the top item off the stack and returns it. If the stack is empty, returns None. if self.is_empty(): return None return self.stack.pop() def peek(self): Returns the top item of the stack without removing it. If the stack is empty, returns None. if self.is_empty(): return None return self.stack[-1] def is_empty(self): Checks if the stack is empty. Returns True if it is empty, otherwise False. return len(self.stack) == 0"},{"question":"Write a python function to remove all spaces from a given string.","solution":"def remove_spaces(s): Returns the string with all spaces removed. return s.replace(\\" \\", \\"\\")"},{"question":"Write a python function to rearrange all the 'a' characters in the string so that no two 'a' characters are adjacent to each other. If it is not possible to rearrange the string as per the condition, return 'Not possible'.","solution":"from heapq import heappush, heappop from collections import Counter def rearrange_a_characters(s): Rearrange the string such that no two 'a' characters are adjacent. Parameters: s (str): Input string Returns: str: Rearranged string or 'Not possible' # Count the frequency of each character count = Counter(s) # If the most frequent character is 'a' and it occurs more than half the length of the string (rounded up), it's not possible if count['a'] > (len(s) + 1) // 2: return 'Not possible' # Create a max heap to arrange characters based on frequency max_heap = [] for char, freq in count.items(): heappush(max_heap, (-freq, char)) result = [] prev_freq, prev_char = 0, '' # Arrange characters while max_heap: freq, char = heappop(max_heap) result.append(char) # If there is a previous character to be reinserted if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char # Decrement frequency of the current character return ''.join(result)"},{"question":"Write a python function to create a frequency dictionary for a given string. The keys in the dictionary should be the characters and the values should be the counts of each character in the string.","solution":"def frequency_dict(s): Returns a dictionary with the frequency of each character in the given string. freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 return freq"},{"question":"Write a python function to reverse the order of the characters in a string where every two consecutive characters are swapped.","solution":"def swap_and_reverse(s): Reverse the order of the characters in a string where every two consecutive characters are swapped. swapped = [] length = len(s) for i in range(0, length - 1, 2): swapped.append(s[i+1]) swapped.append(s[i]) if length % 2 != 0: swapped.append(s[-1]) return ''.join(swapped)"},{"question":"Write a python function to compare two strings and return the string that has a higher unicode sum. If the unicode sums are equal, return the string that comes first in lexicographical order.","solution":"def compare_strings(str1, str2): Compares two strings and returns the string with a higher unicode sum. If the unicode sums are equal, returns the string that comes first in lexicographical order. unicode_sum_str1 = sum(ord(char) for char in str1) unicode_sum_str2 = sum(ord(char) for char in str2) if unicode_sum_str1 > unicode_sum_str2: return str1 elif unicode_sum_str1 < unicode_sum_str2: return str2 else: return min(str1, str2)"},{"question":"Write a python function to check if the elements in an input array are unique.","solution":"def has_unique_elements(arr): Checks if all elements in the input array are unique. Parameters: arr (list): The input array to check. Returns: bool: True if all elements are unique, False otherwise. return len(arr) == len(set(arr))"},{"question":"Write a python function to generate a symmetrically encrypted string. The function should take a string and a key as inputs and return the encrypted string. The encryption algorithm should be simple yet effective.","solution":"from cryptography.fernet import Fernet def generate_symmetric_key(): Generate a symmetric encryption key. return Fernet.generate_key() def encrypt_string(input_string, key): Encrypts the input_string using the provided symmetric key. Parameters: input_string (str): The string to be encrypted. key (bytes): The encryption key. Returns: bytes: Encrypted string. cipher = Fernet(key) encrypted_string = cipher.encrypt(input_string.encode('utf-8')) return encrypted_string"},{"question":"Write a python function to find the capital of a given country.","solution":"def find_capital(country): Returns the capital of the given country. Parameters: country (str): The name of the country Returns: str: The capital of the country, or 'Unknown' if the country is not in the list. capitals = { 'Afghanistan': 'Kabul', 'Australia': 'Canberra', 'Brazil': 'Brasília', 'Canada': 'Ottawa', 'China': 'Beijing', 'France': 'Paris', 'Germany': 'Berlin', 'India': 'New Delhi', 'Italy': 'Rome', 'Japan': 'Tokyo', 'Mexico': 'Mexico City', 'Russia': 'Moscow', 'South Africa': 'Pretoria', 'United Kingdom': 'London', 'United States': 'Washington, D.C.' } return capitals.get(country, 'Unknown')"},{"question":"Write a python function to find the maximum of three numbers. The function should be called \`find_max\` and take three arguments, \`a\`, \`b\`, and \`c\`. You should use an if-else statement to compare the numbers and determine the maximum. Then, return the maximum number.","solution":"def find_max(a, b, c): Returns the maximum of three numbers. if a >= b and a >= c: return a elif b >= a and b >= c: return b else: return c"},{"question":"Write a python function to validate email addresses using regular expressions. The function should take an email address as input and return True if the email address is valid, otherwise False.","solution":"import re def validate_email(email): Validates an email address using regular expressions. Args: email (str): The email address to validate. Returns: bool: True if the email address is valid, False otherwise. pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' return bool(re.match(pattern, email))"},{"question":"Write a python function to reverse a given string without using any additional memory (i.e., in-place reversal).","solution":"def reverse_string_in_place(s): Reverses the given string in place. Parameters: s (list): List of characters in the string to reverse. Returns: None: The string is reversed in place. left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1"},{"question":"Write a python function to find the length of the longestSubstring with at most K distinct characters in a given string.","solution":"def longest_substring_with_k_distinct_characters(s, k): Returns the length of the longest substring with at most k distinct characters. :param s: Input string :param k: Maximum number of distinct characters :return: Length of the longest substring with at most k distinct characters if k == 0: return 0 char_count = {} left = 0 max_length = 0 for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a python function to imitate how python handles function arguments passing, i.e., creating a function that can accept any number of positional arguments and keyword arguments.","solution":"def handle_args_kwargs(*args, **kwargs): Imitates handling of positional and keyword arguments. Returns a tuple containing the args and kwargs. return args, kwargs"},{"question":"Write a python function to simulate the game of Rock, Paper, Scissors, Lizard, Spock.","solution":"import random def rpsls_game(player_choice): Simulates a Rock, Paper, Scissors, Lizard, Spock game. Arguments: player_choice -- string, one of the following: \\"Rock\\", \\"Paper\\", \\"Scissors\\", \\"Lizard\\", \\"Spock\\" Returns: A tuple (outcome, player_choice, computer_choice) where outcome is one of \\"Win\\", \\"Lose\\", or \\"Draw\\". choices = [\\"Rock\\", \\"Paper\\", \\"Scissors\\", \\"Lizard\\", \\"Spock\\"] # Check if the player choice is valid if player_choice not in choices: raise ValueError(\\"Invalid choice. Choose one of the following: Rock, Paper, Scissors, Lizard, Spock\\") # Generate a random choice for the computer computer_choice = random.choice(choices) # Define the win conditions win_conditions = { \\"Rock\\": [\\"Scissors\\", \\"Lizard\\"], \\"Paper\\": [\\"Rock\\", \\"Spock\\"], \\"Scissors\\": [\\"Paper\\", \\"Lizard\\"], \\"Lizard\\": [\\"Spock\\", \\"Paper\\"], \\"Spock\\": [\\"Scissors\\", \\"Rock\\"] } # Determine the outcome if player_choice == computer_choice: outcome = \\"Draw\\" elif computer_choice in win_conditions[player_choice]: outcome = \\"Win\\" else: outcome = \\"Lose\\" return (outcome, player_choice, computer_choice)"},{"question":"Write a python function to sort a list in descending order, without using the built-in sort() function. You should use the bubble sort algorithm for this task.","solution":"def bubble_sort_descending(arr): Sorts a list in descending order using the bubble sort algorithm. Parameters: arr (list): The list to be sorted. Returns: list: A new list sorted in descending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python function to find the minimum value in a given list of integers. If the list is empty, the function should return \`None\`. How will you design your function to handle different scenarios, including the case where the list contains multiple occurrences of the minimum value?","solution":"def find_minimum(lst): Returns the minimum value in a given list of integers. If the list is empty, returns None. if not lst: return None return min(lst)"},{"question":"Write a python function to convert a binary number (given as a string) into its decimal equivalent. The function should handle invalid binary numbers and return an appropriate error message.","solution":"def binary_to_decimal(binary_str): Converts a binary number (given as a string) into its decimal equivalent. If the input is not a valid binary number, returns an error message. Args: binary_str (str): The binary number as a string. Returns: int or str: The decimal equivalent if input is valid, otherwise an error message. try: # Convert binary string to decimal integer decimal_number = int(binary_str, 2) return decimal_number except ValueError: return \\"Invalid binary number\\""},{"question":"Write a python function to detect the \\"Longest Palindromic Subsequence\\" in a string. The function should return the longest palindromic subsequence.","solution":"def longest_palindromic_subsequence(s): Returns the longest palindromic subsequence in a string. n = len(s) if n == 0: return \\"\\" dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return reconstruct_palindrome(s, dp, n) def reconstruct_palindrome(s, dp, n): res = [\\"\\"] * dp[0][n-1] i, j = 0, n - 1 start, end = 0, len(res) - 1 while i <= j: if s[i] == s[j]: res[start], res[end] = s[i], s[j] start += 1 end -= 1 i += 1 j -= 1 elif dp[i][j - 1] > dp[i + 1][j]: j -= 1 else: i += 1 return \\"\\".join(res)"},{"question":"Write a python function to count the number of times each word appears in a given string. The function should return a dictionary where the keys are the words and the values are the counts.","solution":"def word_count(s): Counts the number of times each word appears in the given string. Args: s (str): The input string. Returns: dict: A dictionary with words as keys and their counts as values. words = s.split() counts = {} for word in words: word = word.lower() # to make the count case-insensitive if word in counts: counts[word] += 1 else: counts[word] = 1 return counts"},{"question":"Write a python function to return the smallest number of coins that can be used to make a given amount \`n\` using coins of denominations \`denoms\` which are 1, 5, 10, and 25.","solution":"def min_coins(n): Returns the smallest number of coins that can be used to make the given amount n. Coins denominations are: 1, 5, 10, 25. denominations = [25, 10, 5, 1] count = 0 for denom in denominations: count += n // denom n %= denom return count"},{"question":"Write a python function to get the current date and time in the format: \\"YYYY-MM-DD HH:MM:SS\\".","solution":"from datetime import datetime def get_current_datetime(): Returns the current date and time in the format YYYY-MM-DD HH:MM:SS. return datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\")"},{"question":"Write a python function to solve the knapsack problem where you are given a list of items (with weights and values), and a maximum weight capacity of the knapsack. The function should return the maximum value that can be achieved without exceeding the weight capacity.","solution":"def knapsack(items, max_weight): Solves the knapsack problem using dynamic programming. Parameters: items (list of tuples): A list where each tuple contains two integers (value, weight). max_weight (int): The maximum weight capacity of the knapsack. Returns: int: The maximum value that can be achieved without exceeding the weight capacity. n = len(items) dp = [[0] * (max_weight + 1) for _ in range(n + 1)] for i in range(1, n + 1): value, weight = items[i - 1] for w in range(max_weight + 1): if weight <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight] + value) else: dp[i][w] = dp[i - 1][w] return dp[n][max_weight]"},{"question":"Write a python function to shuffle a list of integers. The function should take a list of integers as input and return a new list with the integers in a random order.","solution":"import random def shuffle_list(input_list): Shuffles a list of integers and returns a new list with the integers in a random order. Parameters: input_list (list): The list of integers to shuffle. Returns: list: A new list with the integers in random order. shuffled_list = input_list[:] random.shuffle(shuffled_list) return shuffled_list"},{"question":"Write a python function to validate an IP address. Here are the validations rules - IP address should be in the form x.y.z.t where x, y, z, t are in the range of 0 to 255. Additionally, each segment can not be an empty string.","solution":"def validate_ip(ip): Validates an IP address. Parameters: ip (str): The IP address to validate. Returns: bool: True if IP address is valid, else False. parts = ip.split('.') # An IP address should have exactly 4 segments if len(parts) != 4: return False for part in parts: # Each segment should not be empty and should be a number if not part.isdigit(): return False # Each segment should be in the range of 0 to 255 number = int(part) if number < 0 or number > 255: return False return True"},{"question":"Write a python function to sort an array of strings using a priority queue (heap), where the strings are sorted based on their length. The priority queue should be a min-heap.","solution":"import heapq def sort_strings_by_length(strings): Sorts an array of strings using a min-heap based on their lengths. :param strings: List of strings to be sorted :return: List of strings sorted by length # Create a heap heap = [] # Push all strings into the heap with their lengths as the keys for string in strings: heapq.heappush(heap, (len(string), string)) # Extract the strings from the heap and build the result sorted_strings = [] while heap: length, string = heapq.heappop(heap) sorted_strings.append(string) return sorted_strings"},{"question":"Write a python function to find the length of the longest contiguous subarray with an equal number of 0's and 1's.","solution":"def findMaxLength(nums): Find the maximum length of a contiguous subarray with equal number of 0's and 1's. Arguments: nums -- list of integers (only contains 0's and 1's) Returns: max_length -- integer, length of the longest contiguous subarray with equal number of 0's and 1's count_map = {0: -1} max_length = 0 count = 0 for i, num in enumerate(nums): count += 1 if num == 1 else -1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"Write a python function to implement the following requirement. The function will take the following as input: 2 2D matrices and a number 'k'. The function should return the product of 'k' with the determinant of a given row in each matrix. The user needs to input the matrices and the number 'k'.Matrix1=[[1,2],[3,4]] Matrix2=[[5,6],[7,8]] k=3","solution":"import numpy as np def product_with_determinant(matrix1, matrix2, row1, row2, k): This function takes two 2D matrices (matrix1 and matrix2), two row indices (row1 and row2), and a number 'k'. It returns the product of 'k' with the determinant of the selected rows from both matrices. det_row1 = np.linalg.det([matrix1[row1], matrix2[row2]]) result = k * det_row1 return result matrix1 = [[1, 2], [3, 4]] matrix2 = [[5, 6], [7, 8]] k = 3 # For example, we want to calculate the determinant using the first row of matrix1 and first row of matrix2 row1 = 0 row2 = 0 result = product_with_determinant(matrix1, matrix2, row1, row2, k) print(result) # This will print the result of k times the determinant of the combination of the specified rows."},{"question":"Write a python function to find if a tree is complete binary tree or not. A complete binary tree in which every level is completely filled except possibly the last one, and if the last level is not completely filled, the nodes of the level must be filled from the left to right.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_complete_binary_tree(root): if not root: return True queue = [] queue.append(root) end = False # This will be True once we encounter a missing child while queue: current = queue.pop(0) if current.left: if end: return False queue.append(current.left) else: end = True if current.right: if end: return False queue.append(current.right) else: end = True return True"},{"question":"Write a python function to find the most frequent substring of size x in a given string. If there are multiple substrings with the same frequency, return the lexicographically smallest one.","solution":"from collections import defaultdict def most_frequent_substring(s, x): Finds the most frequent substring of size x in the given string \`s\`. If there are multiple substrings with the same frequency, return the lexicographically smallest one. if x <= 0 or x > len(s): return '' # If x is out of valid range substring_count = defaultdict(int) # Count the occurrences of each substring of size x for i in range(len(s) - x + 1): substring = s[i:i + x] substring_count[substring] += 1 # Find the maximum frequency max_frequency = max(substring_count.values(), default=0) # Find all substrings with the maximum frequency most_frequent_substrings = [k for k, v in substring_count.items() if v == max_frequency] # Return the lexicographically smallest one return min(most_frequent_substrings) if most_frequent_substrings else ''"},{"question":"Write a python function to calculate the minimum cost to buy total_amount tickets from two websites. The first website sells tickets at 10 each, and the second website sells tickets at 5 each. The function should return the total minimum cost.","solution":"def min_cost_to_buy_tickets(total_amount): Calculates the minimum cost to buy a given total amount of tickets from two websites. The first website sells tickets at 10 each, and the second website sells tickets at 5 each. Parameters: total_amount (int): The total number of tickets needed. Returns: int: The minimum total cost to buy the tickets. # If we buy all tickets from the second website at 5 each: return total_amount * 5"},{"question":"Write a python function to find the second largest number in a list. If the list has duplicates of the largest number, the function should still return the second largest unique number. If the list does not have a second largest unique number, the function should return None.","solution":"def second_largest_number(lst): Returns the second largest unique number in the list. If there is no such number, returns None. if len(lst) < 2: return None unique_numbers = list(set(lst)) # Remove duplicates if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Write a python function to convert a string to a list of words, using spaces and punctuation as the delimiters. For example, if the input string is \\"Hello, world! This is a test.\\", the function should return ['Hello,', 'world!', 'This', 'is', 'a', 'test.'].","solution":"import re def string_to_word_list(text): Converts a string to a list of words using spaces and punctuation as delimiters. # Using regular expression to find words and punctuations words = re.findall(r'bw+b|[^ws]', text) return words"},{"question":"Write a python function to generate the longest palindromic substring in a given string \`s\`. A palindrome is a string that reads the same backward as forward. If there is more than one longest palindromic substring, return the one with the lowest lexicographical order.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring of s. If there is more than one with the same length, return the one with the lowest lexicographical order. n = len(s) if n == 0: return \\"\\" dp = [[False] * n for _ in range(n)] start, max_length = 0, 1 # Every single character is a palindrome for i in range(n): dp[i][i] = True # Check for a window of size 2 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n+1): for i in range(n-length+1): j = i+length-1 if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = True start = i max_length = length palindromic_substrings = [] for i in range(n-max_length+1): j = i+max_length-1 if dp[i][j]: palindromic_substrings.append(s[i:j+1]) if len(palindromic_substrings) == 0: return \\"\\" # Return the lexicographically smallest one return min(palindromic_substrings)"},{"question":"Write a python function to find the number of unique permutations of a string. Input will be a single string and the output should be the number of unique permutations. For example, 'aab' should return 3 because the unique permutations are 'aab', 'aba', and 'baa'.","solution":"from math import factorial from collections import Counter def unique_permutations_count(s): Returns the number of unique permutations of the given string s. # Get the frequency of each character in the string freq = Counter(s) # Calculate the factorial of the length of the string perm_count = factorial(len(s)) # Divide by the factorial of the frequencies of each character for count in freq.values(): perm_count //= factorial(count) return perm_count"},{"question":"Write a python function to convert a list of strings to a list of integers using list comprehension.","solution":"def convert_to_integers(string_list): Converts a list of strings to a list of integers using list comprehension. Parameters: string_list (list): List of strings to be converted. Returns: list: List of integers. return [int(s) for s in string_list]"},{"question":"Write a python function to find the nth smallest element in a list. The function should handle various edge cases such as the list being empty, the nth element being out of the valid range, and the list containing duplicates. The function should also maintain the original order of the elements in the list. Additionally, the function should be optimized for performance and use a space-efficient algorithm.","solution":"def nth_smallest_element(arr, n): Returns the nth smallest element in the list arr. Handles edge cases such as empty list, out of range n, and duplicate elements. Args: arr (list): Input list of elements. n (int): The position of the smallest element to find (1-indexed). Returns: The nth smallest element if it exists, otherwise raises an appropriate error. if not arr: raise ValueError(\\"List is empty\\") if n <= 0 or n > len(arr): raise ValueError(\\"n is out of valid range\\") return sorted(arr)[n-1]"},{"question":"Write a python function to find the longest common prefix among a list of strings. The longest common prefix is the longest string that is a prefix of all strings in the list.","solution":"def longest_common_prefix(strs): Returns the longest common prefix among a list of strings. if not strs: return \\"\\" # Start by assuming the whole of the first string is a common prefix prefix = strs[0] for string in strs[1:]: # Reduce the prefix until it's a prefix of the current string while not string.startswith(prefix): prefix = prefix[:-1] if not prefix: return \\"\\" return prefix"},{"question":"Write a python function to convert a string to title case. In title case, the first character of each word is converted to uppercase, and all other characters are converted to lowercase. However, certain words like \\"and\\", \\"or\\", \\"the\\" should not be converted to uppercase.","solution":"def to_title_case(s): Converts a string to title case. The first character of each word is converted to uppercase, and all other characters are converted to lowercase. However, certain words like \\"and\\", \\"or\\", \\"the\\" are not converted to uppercase. exclusions = {\\"and\\", \\"or\\", \\"the\\"} words = s.split() def capitalize_if_needed(word, index): if word.lower() in exclusions and index != 0: return word.lower() return word.capitalize() return ' '.join(capitalize_if_needed(word, i) for i, word in enumerate(words))"},{"question":"Write a python function to find the maximum sum of a contiguous subarray and the indices of the subarray elements that contribute to this sum.","solution":"def max_subarray(arr): Finds the maximum sum of a contiguous subarray and the indices of the subarray elements that contribute to this sum. :param arr: List of integers :return: Tuple containing the maximum sum, starting index, and ending index of the subarray max_sum = float('-inf') current_sum = 0 start_index = 0 temp_start_index = 0 end_index = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start_index = temp_start_index end_index = i if current_sum < 0: current_sum = 0 temp_start_index = i + 1 return max_sum, start_index, end_index"},{"question":"Write a python function to remove duplicate words from a string, but maintain the order of the words.","solution":"def remove_duplicate_words(text): Remove duplicate words from a string while maintaining the order of the words. :param str text: A string containing words separated by spaces. :return: A string with duplicate words removed, maintaining the original order. :rtype: str seen = set() result = [] for word in text.split(): if word not in seen: seen.add(word) result.append(word) return ' '.join(result)"},{"question":"Write a python function to find the largest and smallest elements in a list using a for loop.","solution":"def find_largest_and_smallest(lst): Returns the largest and smallest elements in a list. Args: lst (list): List of numeric elements. Returns: tuple: A tuple containing the largest and smallest elements. if not lst: return None, None smallest = largest = lst[0] for num in lst: if num > largest: largest = num if num < smallest: smallest = num return largest, smallest"},{"question":"Write a python function to generate an HTML report for the execution time of a piece of code. The function should take in the name of the function, start time, end time, and a dictionary of any arguments passed to the function. It should return an HTML string containing the execution time and the function arguments.","solution":"from datetime import datetime def generate_html_report(func_name, start_time, end_time, args_dict): Generates an HTML report for the execution time of a function. Parameters: func_name (str): The name of the function. start_time (datetime): The start time of the function execution. end_time (datetime): The end time of the function execution. args_dict (dict): A dictionary of the arguments passed to the function. Returns: str: An HTML string containing the execution time and the function arguments. execution_time = (end_time - start_time).total_seconds() html_report = f <html> <head><title>Execution Time Report</title></head> <body> <h1>Execution Time Report for {func_name}</h1> <p>Start Time: {start_time}</p> <p>End Time: {end_time}</p> <p>Execution Time: {execution_time} seconds</p> <h2>Arguments</h2> <ul> for key, value in args_dict.items(): html_report += f\\"<li>{key}: {value}</li>\\" html_report += </ul> </body> </html> return html_report"},{"question":"Write a python function to check if a given string (input) contains only alphabets.","solution":"def is_alpha(input_str): Checks if the given string contains only alphabetic characters. return input_str.isalpha()"},{"question":"Write a python function to find the largest square that can be formed with a given number of 1x1 squares.","solution":"import math def largest_square(squares): Given a number of 1x1 squares, returns the side length of the largest square that can be formed. return int(math.sqrt(squares))"},{"question":"Write a python function to find all unique quadruplets in the array which gives the sum of zero","solution":"def four_sum(nums): Finds all unique quadruplets in the array which give the sum of zero. :param nums: List[int] :return: List[List[int]] nums.sort() quadruplets = [] n = len(nums) for i in range(n-3): if i > 0 and nums[i] == nums[i-1]: continue # avoid duplicates for the first element for j in range(i+1, n-2): if j > i+1 and nums[j] == nums[j-1]: continue # avoid duplicates for the second element left, right = j + 1, n - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total < 0: left += 1 elif total > 0: right -= 1 else: quadruplets.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 # avoid duplicates for the third element while left < right and nums[right] == nums[right - 1]: right -= 1 # avoid duplicates for the fourth element left += 1 right -= 1 return quadruplets"},{"question":"Write a python function to find the sum of digits in a string. For example, the sum of digits in \\"abc123\\" should be 6.","solution":"def sum_of_digits_in_string(input_string): Returns the sum of digits in the given input string. :param input_string: str :return: int return sum(int(char) for char in input_string if char.isdigit())"},{"question":"Write a python function to return the smallest palindrome greater than the given number. The function should have at least 3 inputs: the given number, the length of the given number, and the number of possible digits.","solution":"def is_palindrome(n): # Helper function to check if a number is a palindrome s = str(n) return s == s[::-1] def next_palindrome(num, length, digits): Returns the smallest palindrome greater than the given number. :param num: The given number :param length: The length of the given number :param digits: The number of possible digits (not used directly in this implementation) num = int(num) while True: num += 1 if is_palindrome(num): return num"},{"question":"Write a python function to convert the case of each alphabetic character in a string. Convert all uppercase to lowercase and vice versa. For example, given the input string \\"Python3.8\\", the output should be \\"pYTHON3.8\\".","solution":"def convert_case(s): Converts the case of each alphabetic character in a string. Uppercase characters are converted to lowercase and vice versa. Parameters: s (str): The input string. Returns: str: The string with converted case for each alphabetical character. return s.swapcase()"},{"question":"Write a python function to filter out non-numeric characters from a string and return the remaining numeric digits as an integer.","solution":"def filter_numeric_chars(s): Filters out non-numeric characters from the string s and returns the remaining numeric digits as an integer. numeric_chars = ''.join(filter(str.isdigit, s)) return int(numeric_chars) if numeric_chars else 0"},{"question":"Write a python function to find the factorial of a number. Explain your approach in the docstring and include a check function with provided data points to verify the correctness of the solution.","solution":"def factorial(n): Returns the factorial of n using a recursive approach. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. It is denoted by n!. For n = 0, factorial(0) is 1 by definition. Parameters: n (int): A non-negative integer whose factorial is to be computed. Returns: int: Factorial of the input number n. if n < 0: raise ValueError(\\"Factorial is only defined for non-negative integers.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to return the most common element in a list and its frequency. If there are multiple elements with the same highest frequency, return a list of tuples with all such elements and their frequencies.","solution":"from collections import Counter def most_common_element(lst): Returns the most common element(s) in the list and their frequency. If multiple elements have the same frequency, returns a list of tuples with all such elements and their frequencies. if not lst: return [] count = Counter(lst) max_freq = max(count.values()) most_common = [(elem, freq) for elem, freq in count.items() if freq == max_freq] # If there's only one element with max frequency, return just that element and its frequency return most_common if len(most_common) > 1 else most_common[0]"},{"question":"Write a python function to generate a list of Fibonacci numbers up to a given number of terms. The function should accept two parameters: the number of terms and an optional boolean parameter indicating whether the function should include 0 (default is False).","solution":"def fibonacci(n_terms, include_zero=False): Generate a list of Fibonacci numbers up to a given number of terms. Parameters: n_terms (int): The number of terms in the sequence. include_zero (bool): Whether to include 0 in the sequence (default is False). Returns: list: A list of Fibonacci numbers. if n_terms <= 0: return [] if include_zero: sequence = [0, 1] else: sequence = [1, 1] while len(sequence) < n_terms: next_value = sequence[-1] + sequence[-2] sequence.append(next_value) return sequence[:n_terms]"},{"question":"Write a python function to reverse a string. The function should work for both strings of even and odd lengths.","solution":"def reverse_string(s): Returns the reverse of the given string s. return s[::-1]"},{"question":"Write a python function to implement a fibonacci sequence generator.","solution":"def fibonacci(n): Generates a list containing the first n numbers of the Fibonacci sequence. Parameters: n (int): The number of terms in the Fibonacci sequence to generate. Returns: list: A list of the first n numbers in the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_value = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_value) return fib_sequence"},{"question":"Write a python function to create and display a list with elements in Fibonacci series up to a given number. The Fibonacci series starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci_series_up_to_n(n): Returns a list containing the Fibonacci series up to the given number n. The series starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. if n < 0: return \\"Input should be a non-negative integer.\\" series = [] a, b = 0, 1 while a <= n: series.append(a) a, b = b, a + b return series"},{"question":"Write a python function to print the Fibonacci sequence up to the n-th term. The function should take an integer n as an argument. If n is not provided, the function should default to printing the first 10 terms of the Fibonacci sequence.","solution":"def fibonacci_sequence(n=10): Prints the Fibonacci sequence up to the n-th term. Parameters: n (int): the number of terms of the Fibonacci sequence to print. Defaults to 10. sequence = [] a, b = 0, 1 for i in range(n): sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a python function to convert temperatures from Celsius to Fahrenheit using the formula: F = C * 9/5 + 32.","solution":"def celsius_to_fahrenheit(celsius): Converts a temperature from Celsius to Fahrenheit. Args: celsius (float): The temperature in Celsius. Returns: float: The temperature in Fahrenheit. return celsius * 9/5 + 32"},{"question":"Write a python function to return the minimum number of coins needed to make up a given amount with a given set of coin denominations. You should consider all possible combinations of coin denominations.","solution":"def min_coins(amount, coins): Returns the minimum number of coins needed to make up the given amount with the provided coin denominations. :param amount: int, The total amount of money :param coins: List[int], The denominations of the coins available :return: int, The minimum number of coins needed to make up the given amount # Initialize DP array with a value greater than any possible coin count dp = [float('inf')] * (amount + 1) dp[0] = 0 # Base case: 0 coins needed to make amount 0 # Build the DP array for coin in coins: for i in range(coin, amount + 1): dp[i] = min(dp[i], dp[i - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a python function to solve a quadratic equation. The quadratic equation is in the form of ax^2 + bx + c = 0. The function should return the roots of the equation. If the discriminant is negative, the function should return a statement indicating that there are no real roots.","solution":"import math def solve_quadratic(a, b, c): Solves the quadratic equation ax^2 + bx + c = 0. Returns the roots of the equation as a tuple. If the discriminant is negative, returns a statement indicating no real roots. discriminant = b**2 - 4*a*c if discriminant < 0: return \\"No real roots\\" elif discriminant == 0: root = -b / (2*a) return (root,) else: root1 = (-b + math.sqrt(discriminant)) / (2*a) root2 = (-b - math.sqrt(discriminant)) / (2*a) return (root1, root2)"},{"question":"Write a python function to evaluate postfix expressions. A postfix expression, also known as Reverse Polish Notation, uses operators after their operands. For example, the expression 3 4 + would be written as \\"3 4 +\\" which means 3 + 4.","solution":"def evaluate_postfix(expression): Evaluates a postfix expression (Reverse Polish Notation). Parameters: expression (str): A string representing the postfix expression, with operands and operators separated by spaces. Returns: int: The result of the postfix expression evaluation. stack = [] for token in expression.split(): if token.isdigit(): # token is an operand stack.append(int(token)) else: # token is an operator b = stack.pop() a = stack.pop() if token == '+': stack.append(a + b) elif token == '-': stack.append(a - b) elif token == '*': stack.append(a * b) elif token == '/': stack.append(int(a / b)) # Use int() for integer division return stack[0]"},{"question":"Write a python function to calculate the sum of an array, but with a twist. This function should ignore the first and last element of the array when calculating the sum.","solution":"def sum_array(arr): Returns the sum of the array excluding the first and last element. If the array length is less than 3, returns 0. if len(arr) < 3: return 0 return sum(arr[1:-1])"},{"question":"Write a python function to generate the Fibonacci sequence up to a given number N (node number).","solution":"def fibonacci_sequence(n): Generates the Fibonacci sequence up to node number N (inclusive). :param n: The number of nodes to include in the sequence. :return: A list containing the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a python function to check if a given list of integers is sorted in non-decreasing order (i.e., each element is less than or equal to the next element in the list). If the list is not already sorted, return the indices where the list is not sorted (i.e., indices where the current element is greater than the next element).","solution":"def is_sorted(lst): Checks if the given list of integers is sorted in non-decreasing order. Returns True if sorted, or a list of indices where the list is not sorted. unsorted_indices = [] for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: unsorted_indices.append(i) if len(unsorted_indices) == 0: return True else: return unsorted_indices"},{"question":"Write a python function to find all prime numbers between 1 and an upper limit.","solution":"def find_primes(upper_limit): Find all prime numbers between 1 and the given upper limit. Parameters: upper_limit (int): The upper limit to find primes up to (inclusive). Returns: List[int]: A list of prime numbers up to the upper limit. if upper_limit < 2: return [] primes = [] for num in range(2, upper_limit + 1): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to identify and print the largest and the smallest number in a given list.","solution":"def find_largest_and_smallest(numbers): Returns the largest and smallest number in the given list. :param numbers: List of numbers :type numbers: list :return: Tuple containing the smallest and largest number :rtype: tuple if not numbers: return None, None # Return None for both if the list is empty smallest = min(numbers) largest = max(numbers) return smallest, largest"},{"question":"Write a python function to return the n-th Fibonacci number using dynamic programming.","solution":"def fibonacci(n): Returns the n-th Fibonacci number using dynamic programming. if n <= 0: return 0 elif n == 1: return 1 fib = [0, 1] + [0] * (n - 1) for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a python function to check if an alphabetical character is a vowel or not. The function should take a single argument that is an alphabetical character, and should return \`True\` if the character is a vowel, and \`False\` otherwise.","solution":"def is_vowel(char): Returns True if the character is a vowel, False otherwise. vowels = 'aeiouAEIOU' return char in vowels"},{"question":"Write a python function to convert a given string into a binary representation. The function should take the string, iterate through each character, convert it into its ASCII value, and then convert that ASCII value into a binary string. The output should be a concatenated string of binary representations of all characters in the input string. For example, if the input string is \\"hello\\", the function should return \\"11010001100101110110110011011001101111\\".","solution":"def string_to_binary(input_string): Convert a given string into a concatenated binary representation of its ASCII values. Parameters: input_string (str): The string to be converted to binary. Returns: str: A concatenated binary string representation of the input string. return ''.join(format(ord(char), '08b') for char in input_string)"},{"question":"Write a python function to find the longest common prefix among a list of words.","solution":"def longest_common_prefix(words): Returns the longest common prefix among a list of words. If no common prefix exists, returns an empty string. if not words: return \\"\\" # Find the minimum length string min_length = min(len(word) for word in words) prefix = \\"\\" for i in range(min_length): # Take the character from the first word as reference current_char = words[0][i] # Check if this character is present at the same index in all words if all(word[i] == current_char for word in words): prefix += current_char else: break return prefix"},{"question":"Write a python function to remove whitespace characters from a list of strings and return a new list with the trimmed strings.","solution":"def remove_whitespace(strings): Removes leading and trailing whitespace characters from a list of strings. :param strings: List of strings to be trimmed. :return: New list with trimmed strings. return [s.strip() for s in strings]"},{"question":"Write a python function to find the maximum sum of elements in an array using Kadane's algorithm.","solution":"def max_subarray_sum(arr): Function to find the maximum sum of elements in an array using Kadane's algorithm. Args: arr (list of int): List of integers. Returns: int: The maximum sum of the contiguous subarray. if not arr: return 0 # Edge case: if the array is empty max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to calculate the sum of all numbers in a list. The function should take a list of numbers as an input parameter. If the list is empty, the function should return 0. If the list contains any non-numeric values, the function should ignore those values and continue with the sum calculation for the remaining numbers.","solution":"def sum_of_numbers(numbers): Returns the sum of all numeric values in the list. Non-numeric values are ignored, and an empty list returns 0. :param numbers: List of elements to sum up. :return: Sum of numeric values in the list. total = 0 for item in numbers: if isinstance(item, (int, float)): total += item return total"},{"question":"Write a python function to determine if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. A palindrome reads the same backward as forward, ignoring spaces, punctuation, and case.","solution":"def is_palindrome(s): Determine if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. Parameters: s (str): The input string to check. Returns: bool: True if the string is a palindrome, False otherwise. cleaned_str = ''.join(char.lower() for char in s if char.isalnum()) return cleaned_str == cleaned_str[::-1]"},{"question":"Write a python function to generate all the prime numbers from 10 to 50.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def primes_in_range(start, end): Generate all prime numbers in the given range [start, end]. return [num for num in range(start, end + 1) if is_prime(num)] # Generate prime numbers from 10 to 50 prime_numbers = primes_in_range(10, 50) print(prime_numbers) # Output the prime numbers from 10 to 50"},{"question":"Write a python function to create a pyramid of strings.","solution":"def generate_pyramid(height): Generates a pyramid of the specified height. Parameters: height (int): The height of the pyramid Returns: list of str: List of strings representing the pyramid pyramid = [] for i in range(height): # Generate each row with proper formatting num_stars = 2 * i + 1 num_spaces = height - i - 1 row = ' ' * num_spaces + '*' * num_stars + ' ' * num_spaces pyramid.append(row) return pyramid"},{"question":"Write a python function to generate all possible subsets of a given set of integers.","solution":"def generate_subsets(nums): Generates all possible subsets of a given set of integers. :param nums: List[int] - a list of integers :return: List[List[int]] - a list of lists representing all subsets subsets = [[]] for num in nums: subsets += [curr + [num] for curr in subsets] return subsets"},{"question":"Write a python function to return the maximum number of distinct integers that are common to all elements of a list of lists.","solution":"def common_elements(lists): Returns the maximum number of distinct integers that are common to all lists. if not lists: return 0 common = set(lists[0]) for lst in lists[1:]: common &= set(lst) return len(common)"},{"question":"Write a python function to detect a cycle in a singly linked list. If a cycle is detected, return a pointer to the node where the cycle begins. If no cycle is detected, return None.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def detectCycle(head): Detects a cycle in a singly linked list. If a cycle is detected, returns a pointer to the node where the cycle begins. If no cycle is detected, returns None. if not head or not head.next: return None slow = head fast = head # Detect if there's a cycle while fast and fast.next: slow = slow.next fast = fast.next.next # Cycle detected if slow == fast: break # No cycle found if not fast or not fast.next: return None # Find the start of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Write a python function to print numbers from 1 to 100, but for multiples of three print \\"Fizz\\" instead of the number, for multiples of five print \\"Buzz\\", and for multiples of both three and five print \\"FizzBuzz\\". How can I solve this problem?","solution":"def fizz_buzz(): Prints numbers from 1 to 100, but for multiples of three prints \\"Fizz\\", for multiples of five prints \\"Buzz\\", and for multiples of both three and five prints \\"FizzBuzz\\". results = [] for i in range(1, 101): if i % 3 == 0 and i % 5 == 0: results.append(\\"FizzBuzz\\") elif i % 3 == 0: results.append(\\"Fizz\\") elif i % 5 == 0: results.append(\\"Buzz\\") else: results.append(str(i)) return results"},{"question":"Write a python function to find the most common element in a list. If there are multiple elements with the same highest frequency, return all of them.","solution":"from collections import Counter def most_common_elements(lst): Returns the most common element(s) in the list. If there are multiple elements with the same highest frequency, returns all of them. if not lst: return [] counter = Counter(lst) max_frequency = max(counter.values()) most_common = [key for key, value in counter.items() if value == max_frequency] return most_common"},{"question":"Write a python function to find the maximum element in a given array using the divide and conquer approach.","solution":"def find_maximum(arr): Returns the maximum element in the given array using the divide and conquer approach. def max_recursive(arr, low, high): # Base Case: Only one element if low == high: return arr[low] # Find the middle point mid = (low + high) // 2 # Recurse for the left half and right half left_max = max_recursive(arr, low, mid) right_max = max_recursive(arr, mid + 1, high) # Return the maximum of the two halves return max(left_max, right_max) # Call the recursive function with the entire array return max_recursive(arr, 0, len(arr) - 1)"},{"question":"Write a python function to create a tree from a given list of tuples, where each tuple represents an edge in the tree. Each tuple contains two integers indicating the parent and child nodes. The tree should be represented using a dictionary where the key is the parent and the value is a list of child nodes.","solution":"def create_tree(edges): Creates a tree from a list of edges represented as tuples. Args: edges (list of tuple): List of (parent, child) tuples where each tuple represents an edge in the tree. Returns: dict: A tree represented as a dictionary where keys are parent nodes and values are lists of child nodes. tree = {} for parent, child in edges: if parent in tree: tree[parent].append(child) else: tree[parent] = [child] return tree"},{"question":"Write a python function to take an int as input, and return the number of digits in the number.","solution":"def count_digits(n): Returns the number of digits in the given integer n. return len(str(abs(n)))"},{"question":"Write a python function to perform selection sort on a list of integers.","solution":"def selection_sort(arr): Sorts a list of integers using the selection sort algorithm. n = len(arr) for i in range(n): min_idx = i for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"Write a python function to check if a linked list is a palindrome in O(n) time complexity and O(1) space complexity.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head: ListNode) -> bool: Check if a linked list is a palindrome. if not head or not head.next: return True # Find the end of the first half and the start of the second half. fast = slow = head while fast and fast.next: fast = fast.next.next slow = slow.next # Reverse the second half of the list. prev = None second_half = slow while second_half: next_node = second_half.next second_half.next = prev prev = second_half second_half = next_node # Check whether the first half and the reversed second half are the same. first_half = head second_half = prev while second_half: if first_half.val != second_half.val: return False first_half = first_half.next second_half = second_half.next return True"},{"question":"Write a python function to calculate the power of a number without using the built-in power function or operator. The function should take two arguments, the base and the exponent, and return the result of raising the base to the power of the exponent.","solution":"def power(base, exponent): Returns the power of base raised to exponent. result = 1 for _ in range(abs(exponent)): result *= base if exponent < 0: return 1 / result return result"},{"question":"Write a python function to check if all the numbers in a given list are even. If they are, then return true; otherwise, return false.","solution":"def all_even(numbers): Returns True if all numbers in the list are even, else returns False. return all(num % 2 == 0 for num in numbers)"},{"question":"Write a python function to sort an array of unique integers in increasing order using the Bubble Sort algorithm. The function should return the sorted array. Bubble Sort is a simple comparison-based sorting algorithm. It repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.","solution":"def bubble_sort(arr): Sorts an array of unique integers in increasing order using the Bubble Sort algorithm. Args: arr (list of int): The array of unique integers to be sorted. Returns: list of int: The sorted array. n = len(arr) for i in range(n): # Flag to detect if any swap happens swapped = False for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1 # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no two elements were swapped by the inner loop, then the list is sorted if not swapped: break return arr"},{"question":"Write a python function to find the maximum profit that can be achieved from the given two lists, prices and fees. You can complete at most one buy and one sell action with the given fee for each transaction. Transactions involve buying and then selling a stock.","solution":"def max_profit(prices, fees): Calculate the maximum profit that can be achieved from the given two lists, prices and fees. Args: prices (list of int): List of stock prices. fees (list of int): List of transaction fees. Returns: int: The maximum profit. if not prices or not fees or len(prices) != len(fees): return 0 max_profit = 0 for i in range(len(prices)): for j in range(i + 1, len(prices)): profit = prices[j] - prices[i] - fees[i] if profit > max_profit: max_profit = profit return max_profit"},{"question":"Write a python function to remove all occurrences of a given string from another string and then reverse the resulting string.","solution":"def remove_and_reverse(input_string, remove_string): Removes all occurrences of 'remove_string' from 'input_string' and returns the reversed resulting string. :param input_string: Original string. :param remove_string: Substring that needs to be removed. :return: Resulting string after removal and reversal. # Remove all occurrences of remove_string modified_string = input_string.replace(remove_string, \\"\\") # Reverse the resulting string reversed_string = modified_string[::-1] return reversed_string"},{"question":"Write a python function to calculate the number of strings that consist of exactly 5 letters and are palindromes. A palindrome is a string that reads the same backward as forward. For example, \\"abcba\\" is a palindrome, but \\"abcde\\" is not.","solution":"import string def count_5_letter_palindromes(): Calculates the number of 5-letter palindromic strings. A 5-letter palindrome takes the form of ABBAA: - The first letter (A) can be any of the 26 English letters. - The second letter (B) can be any of the 26 English letters. - The third letter (C) can be any of the 26 English letters. Therefore, the total number of 5-letter palindromes is 26 * 26 * 26. Returns: int: The number of 5-letter palindromic strings. return 26 * 26 * 26"},{"question":"Write a python function to check if a given list of strings is a list of tautologies. A tautology in logic is a statement that is always true under all interpretations. In this problem, we will consider a tautology as a string where 'A' is always followed by 'B'.","solution":"def is_tautology_list(strings): Returns True if all strings in the provided list are tautologies. A tautology is defined as a string where 'A' is always followed by 'B'. for string in strings: # Check if 'A' is not followed by 'B' in any part of the string for i in range(len(string) - 1): if string[i] == 'A' and string[i + 1] != 'B': return False return True"},{"question":"Write a python function to check if a number is divisible by 3 or 5","solution":"def is_divisible_by_3_or_5(number): Returns True if the number is divisible by 3 or 5, otherwise returns False. return number % 3 == 0 or number % 5 == 0"},{"question":"Write a python function to sort a list in place that contains both positive and negative integers. The function should maintain the relative order of negative integers and positive integers. Moreover, you should avoid using additional data structures or swapping integers unless absolutely necessary.","solution":"def sort_with_sign(arr): Sort the list in place such that the relative order of negative integers and positive integers is maintained. n = len(arr) # Separate positive and negative sections of the list neg_index = 0 for i in range(n): if arr[i] < 0: # Move negative integers to the current negative section index and increment the index arr.insert(neg_index, arr.pop(i)) neg_index += 1 return arr"},{"question":"Write a python function to find the second largest number in a list. The function should raise a ValueError if the list contains fewer than two elements.","solution":"def second_largest(numbers): Returns the second largest number in the list. Raises ValueError if the list contains fewer than two elements. if len(numbers) < 2: raise ValueError(\\"List must contain at least two elements\\") first = second = float('-inf') for number in numbers: if number > first: second = first first = number elif first > number > second: second = number if second == float('-inf'): raise ValueError(\\"No second largest element\\") return second"},{"question":"Write a python function to print all numbers from 1 to n (inclusive).","solution":"def print_numbers_up_to_n(n): Print all numbers from 1 to n (inclusive). if n < 1: raise ValueError(\\"n should be at least 1\\") for i in range(1, n + 1): print(i)"},{"question":"Write a python function to find the number of distinct pairs in a list with a sum that equals a target value. The function should return the count of these distinct pairs.","solution":"def count_distinct_pairs(lst, target): Returns the number of distinct pairs in lst where the sum equals target. seen = set() used = set() count = 0 for number in lst: complement = target - number if complement in seen and (min(number, complement), max(number, complement)) not in used: count += 1 used.add((min(number, complement), max(number, complement))) seen.add(number) return count"},{"question":"Write a python function to identify whether all the elements of a list are unique. If not, return the first duplicate element found. If all elements are unique, return None.","solution":"def find_first_duplicate(lst): Returns the first duplicate element in the list if found, otherwise returns None if all elements are unique. seen = set() for item in lst: if item in seen: return item seen.add(item) return None"},{"question":"Write a python function to count the occurrences of a substring in a string. The function should be named \`count_substring_occurrences\` and should take three parameters: \`main_string\`, \`substring\`, and \`case_sensitive\`. If \`case_sensitive\` is set to \`True\`, the function should count occurrences case-sensitively; otherwise, it should count occurrences case-insensitively. The function should return the total count of the substring in the main string.","solution":"def count_substring_occurrences(main_string, substring, case_sensitive=True): Counts the occurrences of a substring in a main string. Parameters: - main_string (str): The main string. - substring (str): The substring to count occurrences of. - case_sensitive (bool): If True, the count is case-sensitive, otherwise it's case-insensitive. Returns: - int: The total count of the substring in the main string. if not case_sensitive: main_string = main_string.lower() substring = substring.lower() return main_string.count(substring)"},{"question":"Write a python function to check if all elements in a list are equal. If not, raise an exception with an appropriate message.","solution":"def check_all_elements_equal(lst): Check if all elements in a list are equal. Parameters: lst (list): The list to check Raises: ValueError: If not all elements in the list are equal Returns: bool: True if all elements are equal, False otherwise if not lst: raise ValueError(\\"List is empty.\\") first_element = lst[0] for element in lst: if element != first_element: raise ValueError(\\"Not all elements are equal.\\") return True"},{"question":"Write a python function to convert a given decimal number to an equivalent Roman numeral.","solution":"def decimal_to_roman(num): Converts a given decimal number to an equivalent Roman numeral. Parameters: num (int): The decimal number to convert. Returns: str: The Roman numeral representation of the number. if not (0 < num < 4000): raise ValueError(\\"Number out of range (must be 1..3999)\\") val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_numeral += syb[i] num -= val[i] i += 1 return roman_numeral"},{"question":"Write a python function to merge two dictionaries based on a key comparison. Specifically, I want to merge two dictionary objects based on their keys. If the keys are the same, then sum their values.","solution":"def merge_dicts(dict1, dict2): Merges two dictionaries based on their keys. If a key is present in both dictionaries, their values are summed. Otherwise, the key-value pairs are just combined. merged_dict = dict1.copy() # start with dict1 contents for key, value in dict2.items(): if key in merged_dict: merged_dict[key] += value else: merged_dict[key] = value return merged_dict"},{"question":"Write a python function to count the number of even numbers in a given list of integers. The function should return a count of even numbers within the list.","solution":"def count_even_numbers(nums): Returns the count of even numbers in the given list of integers. count = 0 for num in nums: if num % 2 == 0: count += 1 return count"},{"question":"Write a python function to check if a string contains a palindrome substring of length at least 2. A palindrome substring reads the same backward as forward. functions should return True if such a substring exists, and False otherwise.","solution":"def contains_palindrome_substring(s): Checks if the string contains a palindrome substring of length at least 2. n = len(s) # Check all possible substrings for i in range(n): for j in range(i + 1, n): substr = s[i:j+1] if substr == substr[::-1]: return True return False"},{"question":"Write a python function to solve the following problem: Given a matrix \`A\`, determine if the matrix is symmetric. A matrix is symmetric if it is equal to its transpose, that is, \`A == A.T\`.","solution":"def is_symmetric(matrix): Returns True if the given matrix is symmetric, False otherwise. rows = len(matrix) cols = len(matrix[0]) if rows != cols: return False for i in range(rows): for j in range(cols): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"Write a python function to reverse the elements of the matrix.","solution":"def reverse_matrix(matrix): Reverses the elements of the given matrix such that the rows and columns maintain their positions, but each row's elements are reversed. Parameters: matrix (list of lists): A 2D list representing the matrix to be reversed. Returns: list of lists: The matrix with each row's elements reversed. return [row[::-1] for row in matrix]"},{"question":"Write a python function to convert a given linked list into a circular linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def convert_to_circular_linked_list(head): Converts a given singly linked list into a circular linked list. Parameters: head (ListNode): The head of the singly linked list. Returns: ListNode: The head of the circular linked list. if head is None: return None # Traverse till the last node last = head while last.next: last = last.next # Point the last node to the head to make it circular last.next = head return head"},{"question":"Write a python function to check if any number in a list is divisible by 7.","solution":"def is_any_number_divisible_by_7(numbers): Returns True if any number in the list is divisible by 7, otherwise False. for number in numbers: if number % 7 == 0: return True return False"},{"question":"Write a python function to return the number of elements that are divisible by both 3 and 5.","solution":"def count_divisible_by_3_and_5(lst): Returns the number of elements in the input list that are divisible by both 3 and 5. Parameters: lst (list): A list of integers. Returns: int: Count of elements divisible by both 3 and 5. return sum(1 for x in lst if x % 15 == 0)"},{"question":"Write a python function to generate a list of prime numbers up to a given limit (N).","solution":"def generate_primes(N): Returns a list of prime numbers up to a given limit N. if N < 2: return [] primes = [] sieve = [True] * (N + 1) sieve[0], sieve[1] = False, False for num in range(2, N + 1): if sieve[num]: primes.append(num) for multiple in range(num*num, N + 1, num): sieve[multiple] = False return primes"},{"question":"Write a python function to find the maximum sum of a subarray in a given array. This is a classic problem in computer science known as the Kadane's algorithm.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a subarray in a given array using Kadane's algorithm. Parameters: arr (list of int): List of integers. Returns: int: Maximum sum of a subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to reverse the words in a string without reversing the characters within each word.","solution":"def reverse_words_in_string(s): Reverses the words in a string without reversing the characters within each word. Parameters: s (str): The input string. Returns: str: The string with words reversed. words = s.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a python function to return a list of prime numbers from 2 to a given limit.","solution":"def primes_upto(limit): Returns a list of prime numbers from 2 up to the given limit (inclusive). if limit < 2: return [] primes = [] is_prime = [True] * (limit + 1) for num in range(2, limit + 1): if is_prime[num]: primes.append(num) for multiple in range(num * num, limit + 1, num): is_prime[multiple] = False return primes"},{"question":"Write a python function to convert seconds to hours, minutes, and seconds.","solution":"def convert_seconds(total_seconds): Converts a given number of seconds into hours, minutes, and seconds. Parameters: total_seconds (int): The total number of seconds to convert. Returns: tuple: A tuple containing hours, minutes, and seconds. if total_seconds < 0: raise ValueError(\\"Total seconds cannot be negative\\") hours = total_seconds // 3600 remaining_seconds = total_seconds % 3600 minutes = remaining_seconds // 60 seconds = remaining_seconds % 60 return hours, minutes, seconds"},{"question":"Write a python function to generate a list of Fibonacci numbers up to a given number n. A Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def generate_fibonacci(n): Generate a list of Fibonacci numbers up to a given number n. if n < 0: return [] fib_sequence = [0, 1] while True: next_value = fib_sequence[-1] + fib_sequence[-2] if next_value > n: break fib_sequence.append(next_value) return fib_sequence if n > 0 else [0]"},{"question":"Write a python function to print \\"Hello, World!\\" in a loop, n times. The function should also handle the case when n is less than or equal to 0, by printing an error message and returning None.","solution":"def print_hello_world_n_times(n): Prints \\"Hello, World!\\" n times. If n is less than or equal to 0, print an error message and return None. if n <= 0: print(\\"Error: n should be greater than 0\\") return None for _ in range(n): print(\\"Hello, World!\\")"},{"question":"Write a python function to calculate the average salary of employees in a game engine company. The function should accept a list of employee salaries and return the average salary.","solution":"def average_salary(salaries): Returns the average salary of the given list of employee salaries. Parameters: salaries (list): A list of salaries (numbers). Returns: float: The average salary. if not salaries: return 0.0 total_salary = sum(salaries) number_of_employees = len(salaries) return total_salary / number_of_employees"},{"question":"Write a python function to flatten a nested list.","solution":"def flatten(nested_list): Flattens a nested list. Parameters: nested_list (list): A list that can contain other lists as elements. Returns: list: A single flattened list with all the elements. flattened_list = [] def flatten_helper(lst): for item in lst: if isinstance(item, list): flatten_helper(item) else: flattened_list.append(item) flatten_helper(nested_list) return flattened_list"},{"question":"Write a python function to extract the first non-repeating character from a given string. If no non-repeating character is found, return an underscore ('_').","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the given string. If no such character exists, returns an underscore ('_'). char_count = {} # Count the occurrences of each character in the string. for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1. for char in s: if char_count[char] == 1: return char return '_'"},{"question":"Write a python function to generate a list of all prime numbers less than a given number n. The function should use the Sieve of Eratosthenes algorithm. The Sieve of Eratosthenes is an ancient algorithm used to find all prime numbers up to any given limit.","solution":"def sieve_of_eratosthenes(n): Generate a list of all prime numbers less than a given number n using the Sieve of Eratosthenes algorithm. Parameters: n (int): The upper limit to find primes below. Returns: list: A list of prime numbers less than n. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a python function to find the largest number less than or equal to n that is divisible by m.","solution":"def largest_divisible(n, m): Returns the largest number less than or equal to n that is divisible by m. return n - (n % m)"},{"question":"Write a python function to find the number of times a word appears in a given string. The function should be case-insensitive and should consider a word as a sequence of alphanumeric characters surrounded by spaces.","solution":"import re def count_word_occurrences(text, word): Returns the number of times a word appears in a given string. :param text: The input string in which to search for the word. :param word: The word to count occurrences of. :return: The number of occurrences of the word in the given string. pattern = rf'b{re.escape(word)}b' matches = re.findall(pattern, text, re.IGNORECASE) return len(matches)"},{"question":"Write a python function to retrieve the Kth largest element from an array of integers. The array may contain duplicate elements and the solution should be efficient.","solution":"import heapq def kth_largest(nums, k): Returns the kth largest element in a list of integers. Args: nums: List of integers. k: The k-th position (1-based) to determine the k-th largest element. Returns: The k-th largest element in nums. # Using a min heap with size k min_heap = [] for num in nums: heapq.heappush(min_heap, num) if len(min_heap) > k: heapq.heappop(min_heap) return heapq.heappop(min_heap)"},{"question":"Write a python function to calculate the sum of all positive integers up to and including a given number \`n\`. The function should also validate that \`n\` is a non-negative integer.","solution":"def sum_up_to_n(n): Calculates the sum of all positive integers up to and including n. Parameters: - n (int): The number up to which the sum needs to be calculated. Must be a non-negative integer. Returns: - int: The sum of all positive integers up to and including n. Raises: - ValueError: If n is not a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") return n * (n + 1) // 2"},{"question":"Write a python function to parse a string that contains brace groups. Declare a brace group as a sequence of braces that is not nested within any other group. For example, given the string \\"{a{b{c}}d}e{f}g{h{i}j}k\\", your function should return a list of strings [\\"{a{b{c}}d}e\\", \\"{f}\\", \\"{h{i}j}k\\"].","solution":"def parse_brace_groups(s): Parses a string containing brace groups and returns a list of brace groups. Args: s (str): Input string containing brace groups. Returns: list: List of brace groups as strings. result = [] current_group = [] brace_level = 0 for char in s: if char == '{': brace_level += 1 if brace_level > 0: current_group.append(char) if char == '}': brace_level -= 1 if brace_level == 0: result.append(''.join(current_group)) current_group = [] if current_group: result.append(''.join(current_group)) return result"},{"question":"Write a python function to get the nth Fibonacci number in O(n) time complexity.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") if n == 1: return 0 elif n == 2: return 1 else: a, b = 0, 1 for _ in range(3, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to find the sum of all numbers in a given list. Here, an example list is [1, 2, 3, 4, 5].","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the given list. return sum(numbers)"},{"question":"Write a python function to find the maximum value of an array, but only if the length of the array is greater than 0. If the length of the array is 0, return None. How can I achieve this?","solution":"def max_value(arr): Returns the maximum value of the array if its length is greater than 0. If the array is empty, returns None. if len(arr) > 0: return max(arr) else: return None"},{"question":"Write a python function to parse a JSON string into a Python dictionary.","solution":"import json def parse_json(json_string): Parses a JSON string into a Python dictionary. :param json_string: A string in JSON format. :return: A Python dictionary corresponding to the JSON string. return json.loads(json_string)"},{"question":"Write a python function to generate all possible unique combinations of a string without repeating characters.","solution":"from itertools import permutations def unique_combinations(s): Generates all unique combinations of the string s without repeating characters. return sorted(set(''.join(p) for p in permutations(s, len(s))))"},{"question":"Write a python function to calculate the sum of numbers in each sublist of a list of lists.","solution":"def sum_of_sublists(lists): Returns a list of sums of numbers in each sublist. :param lists: List of lists with numbers :return: List of sums for each sublist return [sum(sublist) for sublist in lists]"},{"question":"Write a python function to return the factorial of a number. The function should handle inputs that are negative and non-integer.","solution":"def factorial(n): Computes the factorial of a non-negative integer. For non-integer or negative values, an appropriate error message is returned. Args: n (int or float): The number to compute the factorial for. Returns: int: Factorial of the number if valid input. str: Error message for invalid inputs. if not isinstance(n, int): return \\"Error: Input must be an integer.\\" if n < 0: return \\"Error: Input must be a non-negative integer.\\" if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to sort an array of integers in ascending order without using any built-in sorting functions.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the bubble sort algorithm. Args: arr (list): List of integers to sort. Returns: list: Sorted list of integers. n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"Write a python function to return the first non-repeated character in a given string. If no such character exists, return -1.","solution":"def first_non_repeated_char(s): Returns the first non-repeated character in a given string. If no such character exists, returns -1. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return -1"},{"question":"Write a python function to read a string input from the user and convert it into a list of words. The function should return the list of words. Ensure that you handle the case where the user inputs an empty string or a string with only spaces.","solution":"def convert_to_word_list(s): Converts a string input into a list of words. Parameters: s (str): The input string. Returns: list: A list of words. # Split the string using whitespace and filter out any empty strings. return [word for word in s.split() if word]"},{"question":"Write a python function to return the sum of the products of all pairs of integers in an array of integers. For example, if the array is [1, 2, 3], the function should return the sum of 1*2 + 2*3 + 1*3.","solution":"def sum_of_products_of_pairs(arr): Returns the sum of the products of all pairs of integers in an array. n = len(arr) total_sum = 0 for i in range(n): for j in range(i + 1, n): total_sum += arr[i] * arr[j] return total_sum"},{"question":"Write a python function to create a list of all prime numbers up to a given limit \`n\`. The function should be efficient and avoid unnecessary computations.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def list_primes(limit): Returns a list of all prime numbers up to the given limit. return [x for x in range(2, limit + 1) if is_prime(x)]"},{"question":"Write a python function to calculate the number of ways to make a total of \`n\` using given coins of different denominations. Assume you have an infinite supply of each coin.","solution":"def count_ways(coins, n): Returns the number of ways to make change for n using given coins of different denominations. Parameters: coins (list): List of coin denominations. n (int): The total amount to make. Returns: int: The number of ways to make the total n. # Create a list to store the number of ways to make change for each amount up to n ways = [0] * (n + 1) # There is one way to make a total of 0: use no coins ways[0] = 1 # For each coin, update the ways list for all amounts from the coin's value to n for coin in coins: for amount in range(coin, n + 1): ways[amount] += ways[amount - coin] return ways[n]"},{"question":"Write a python function to check if a number is prime. A number is prime if it has only two distinct divisors: 1 and itself. Assume the input number is always a non-negative integer.","solution":"def is_prime(n): Returns True if n is a prime number, else returns False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a python function to filter out and return a list of words that start with the uppercase letter \\"A\\" from a list of words, including handling any exceptions that may occur during the process.","solution":"def filter_words_starting_with_a(words): Returns a list of words that start with the uppercase letter 'A'. try: if not isinstance(words, list): raise TypeError(\\"The input must be a list of words\\") for word in words: if not isinstance(word, str): raise ValueError(\\"All elements in the list must be strings\\") return [word for word in words if word.startswith('A')] except (TypeError, ValueError) as e: print(f\\"Error: {e}\\") return []"},{"question":"Write a python function to sort a given list in ascending order and return the sorted list. You should also write your function such that it supports sorting of the list in descending order if a second parameter \`sort_descending\` is True, else the list should be sorted in ascending order.","solution":"def sort_list(input_list, sort_descending=False): Sort a given list in ascending order by default. If sort_descending is True, sort in descending order. :param input_list: List of numbers to be sorted :param sort_descending: Boolean indicating if the list should be sorted in descending order :return: Sorted list return sorted(input_list, reverse=sort_descending)"},{"question":"Write a python function to reverse a list of strings, the function should be named \\"reverse_list\\" and take one parameter - a list of strings.","solution":"def reverse_list(strings): Returns a list of strings in reversed order. return strings[::-1]"},{"question":"Write a python function to calculate the sum of squares of n natural numbers. The function should take an integer n as input and return the sum of squares.","solution":"def sum_of_squares(n): Returns the sum of squares of the first n natural numbers. Parameters: n (int): The number of natural numbers to sum the squares of. Returns: int: The sum of squares of the first n natural numbers. if n < 1: return 0 return sum(i * i for i in range(1, n + 1))"},{"question":"Write a python function to check whether the given string is an anagram or not. Please provide the code and an explanation of the logic behind it.","solution":"def is_anagram(str1, str2): Check if two strings are anagrams. Arguments: str1 -- first string. str2 -- second string. Returns: True if str1 and str2 are anagrams, False otherwise. # Strip spaces and convert both strings to lower case for uniform comparison str1 = str1.replace(' ', '').lower() str2 = str2.replace(' ', '').lower() # Return True if sorted strings are identical, otherwise return False return sorted(str1) == sorted(str2)"},{"question":"Write a python function to find the largest of three numbers. Write it using the \`if-elif-else\` statement.","solution":"def largest_of_three(a, b, c): Returns the largest of three numbers a, b, and c. if a >= b and a >= c: return a elif b >= a and b >= c: return b else: return c"},{"question":"Write a python function to find the number of distinct solutions for a given target sum.","solution":"from itertools import combinations def find_distinct_solutions(arr, target): Returns the number of distinct pairs from the array which sum up to the target. Parameters: arr (list of int): The list of integers to find pairs from. target (int): The target sum to find pairs for. Returns: int: The number of distinct pairs that sum to the target. unique_pairs = set() for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] + arr[j] == target: unique_pairs.add(tuple(sorted((arr[i], arr[j])))) return len(unique_pairs)"},{"question":"Write a python function to find the first missing positive integer in an array of integers.","solution":"def first_missing_positive(nums): Finds the first missing positive integer in the given array of integers. Args: nums (list): A list of integers. Returns: int: The first missing positive integer. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a python function to count the number of sentences in a given string where each sentence has a length of at least 5 characters.","solution":"def count_long_sentences(text): Counts the number of sentences in the given text that have a length of at least 5 characters. Parameters: text (str): The input text to be analyzed. Returns: int: The count of sentences with at least 5 characters. # Split the text into sentences based on common sentence-ending punctuation marks sentences = text.split('.') # Initialize a counter for sentences with at least 5 characters count = 0 # Iterate over the sentences for sentence in sentences: # Get the length of the sentence after stripping leading/trailing whitespace sentence_length = len(sentence.strip()) # Check if the sentence has at least 5 characters if sentence_length >= 5: count += 1 return count"},{"question":"Write a python function to calculate the nth power of a given number.","solution":"def power(base, exponent): Returns the result of base raised to the power of exponent. return base ** exponent"},{"question":"Write a python function to count the occurrences of a substring in a string, but only count unique occurrences. For example, for the string \\"banana\\" and the substring \\"ana\\", it should return 2 since \\"ana\\" occurs twice but as a unique sequence.","solution":"def count_unique_occurrences(string, substring): Counts the unique occurrences of a substring in a string. count = 0 index = 0 while index < len(string): index = string.find(substring, index) if index == -1: break count += 1 index += len(substring) # Move index to the end of the current occurrence return count"},{"question":"Write a python function to remove duplicates from the given list and return the list of unique elements in the same order as their first occurrence.","solution":"def remove_duplicates(lst): Removes duplicates from the given list and returns the list of unique elements in the same order as their first occurrence. seen = set() unique_lst = [] for item in lst: if item not in seen: seen.add(item) unique_lst.append(item) return unique_lst"},{"question":"Write a python function to read a large text file and print only the unique lines.","solution":"def print_unique_lines(file_path): Reads a large text file and prints only the unique lines. unique_lines = set() with open(file_path, 'r') as file: for line in file: stripped_line = line.strip() if stripped_line not in unique_lines: unique_lines.add(stripped_line) print(stripped_line)"},{"question":"Write a python function to find the most frequent element in a list. If there is a tie, return all elements with the highest frequency.","solution":"from collections import Counter from typing import List, Union def most_frequent_elements(lst: List[int]) -> Union[int, List[int]]: Returns the most frequent element(s) in the list. If there is a tie, return all elements with the highest frequency. :param lst: List of integers :return: Single integer if one element has the highest frequency, else list of integers with the highest frequency if not lst: return [] count = Counter(lst) max_freq = max(count.values()) most_frequent = [el for el, freq in count.items() if freq == max_freq] if len(most_frequent) == 1: return most_frequent[0] else: return most_frequent"},{"question":"Write a python function to find the sum and the average of the numbers divisible by both 7 and 11 from a given list of numbers. If there are no such numbers in the list, return 0 for both sum and average.","solution":"def sum_and_average_of_divisibles(numbers): Finds the sum and the average of the numbers divisible by both 7 and 11 from a given list. If no such numbers exist, returns (0, 0). :param numbers: List of integers :return: A tuple containing the sum and the average divisibles = [number for number in numbers if number % 7 == 0 and number % 11 == 0] if not divisibles: return 0, 0 total_sum = sum(divisibles) average = total_sum / len(divisibles) return total_sum, average"},{"question":"Write a python function to sort an array in descending order and return the sorted array. The function should not use any built-in sorting functions like \`sort()\` or \`sorted()\`.","solution":"def sort_descending(arr): Sorts an array in descending order without using built-in sorting functions. n = len(arr) # Using bubble sort for demonstration for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python function to find all prime numbers up to a given number. The function should be named \`find_primes_up_to_n\` and it should take a single parameter, \`n\`, which is an integer representing the upper limit of the range to find prime numbers within.","solution":"def find_primes_up_to_n(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] primes = [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers for i in range(2, n + 1): if is_prime[i]: primes.append(i) for j in range(i * i, n + 1, i): is_prime[j] = False return primes"},{"question":"Write a python function to return all prime numbers up to N that are congruent to 1 mod 4 or 3 mod 4. The function should also handle edge cases where N is less than 2 and return an empty list. The function should be optimized for large inputs.","solution":"def primes_mod_func(N): Returns all prime numbers up to N that are congruent to 1 mod 4 or 3 mod 4. Parameters: N (int): The upper bound of the range to look for primes. Returns: List[int]: A list of primes <= N that are congruent to 1 mod 4 or 3 mod 4. if N < 2: return [] sieve = [True] * (N + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(N**0.5) + 1): if sieve[start]: for multiple in range(start*start, N + 1, start): sieve[multiple] = False primes = [num for num in range(N + 1) if sieve[num] and (num % 4 == 1 or num % 4 == 3)] return primes"},{"question":"Write a python function to replace the value of a specified key in a dictionary with a new value. If the key does not exist, add it to the dictionary with the new value. The function should handle nested dictionaries as well.","solution":"def replace_or_add_key(d, key, new_value): Replace the value of a specified key in a dictionary with a new value. If the key does not exist, add it to the dictionary with the new value. The function handles nested dictionaries as well. Parameters: d (dict): The dictionary in which the key-value pair needs to be replaced or added. key (str): The key whose value needs to be replaced or added. new_value: The new value to associate with the key. Returns: dict: The updated dictionary. if '.' in key: keys = key.split('.') current = d for k in keys[:-1]: if k not in current: current[k] = {} current = current[k] current[keys[-1]] = new_value else: d[key] = new_value return d"},{"question":"Write a python function to sort the characters in each string in the list in alphabetical order.","solution":"def sort_characters_in_strings(string_list): Sorts the characters in each string in the input list in alphabetical order. Parameters: string_list (list of str): List of strings to be sorted. Returns: list of str: List of strings with sorted characters. return [''.join(sorted(s)) for s in string_list]"},{"question":"Write a python function to get a list of all files in a given directory and its sub-directories if any.","solution":"import os def list_files(directory): Returns a list of all files in the given directory and its sub-directories. Parameters: directory (str): The path of the directory to list files from. Returns: list: A list containing the paths of all files. file_list = [] for root, _, files in os.walk(directory): for file in files: file_list.append(os.path.join(root, file)) return file_list"},{"question":"Write a python function to find the square root of a number using the Newton-Raphson method. You should also handle potential errors, such as taking the square root of a negative number.","solution":"def newton_raphson_sqrt(number, tolerance=1e-7, max_iterations=1000): Finds the square root of a number using the Newton-Raphson method. Parameters: number (float or int): The number to find the square root of. Must be non-negative. tolerance (float): The tolerance for the answer accuracy. max_iterations (int): The maximum number of iterations to perform. Returns: float: The approximate square root of the number. Raises: ValueError: If the number is negative. if number < 0: raise ValueError(\\"Cannot compute square root of a negative number.\\") if number == 0: return 0.0 guess = number / 2.0 iteration = 0 while abs(guess * guess - number) > tolerance and iteration < max_iterations: guess = (guess + number / guess) / 2.0 iteration += 1 return guess"},{"question":"Write a python function to check if a given binary tree is a BST (Binary Search Tree). A binary tree is said to be a BST if for every node, all elements in its left subtree are less than the node and all elements in its right subtree are greater than the node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_bst(node, left=float('-inf'), right=float('inf')): Returns true if the binary tree rooted at \`node\` is a Binary Search Tree (BST). if not node: return True if not (left < node.val < right): return False return (is_bst(node.left, left, node.val) and is_bst(node.right, node.val, right))"},{"question":"Write a python function to find the length of the longest valid parentheses substring. A valid parentheses string is one where every opening parenthesis '(' has a matching closing parenthesis ')' and the pairs of parentheses are properly nested.","solution":"def longest_valid_parentheses(s): Returns the length of the longest valid parentheses substring. max_len = 0 stack = [-1] # Stack to keep track of the indices for i, char in enumerate(s): if char == '(': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_len = max(max_len, i - stack[-1]) return max_len"},{"question":"Write a python function to search for a target element in a rotated and sorted array with duplicates.","solution":"def search_rotated_array(arr, target): Search for the target element in a rotated and sorted array with duplicates. :param arr: List of integers, rotated and sorted with possible duplicates. :param target: Integer, the target element to search for. :return: Boolean, True if target is found, False otherwise. if not arr: return False left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return True if arr[left] == arr[mid] == arr[right]: left += 1 right -= 1 elif arr[left] <= arr[mid]: if arr[left] <= target < arr[mid]: right = mid - 1 else: left = mid + 1 else: if arr[mid] < target <= arr[right]: left = mid + 1 else: right = mid - 1 return False"},{"question":"Write a python function to solve a Sudoku puzzle. The function should take a 2D list representing the Sudoku board where '0' represents empty cells. The function should fill the board in-place using backtracking. If there's no solution, the function should return False.","solution":"def solve_sudoku(board): Solves the Sudoku puzzle in-place using backtracking. The board is a 2D list representing the Sudoku board. Empty cells are represented by 0. Returns True if the puzzle is solved, False otherwise. def is_valid(board, row, col, num): # Check if the num is not in the current row and column for i in range(9): if board[row][i] == num or board[i][col] == num: return False # Check if the num is not in the current 3x3 box start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[start_row + i][start_col + j] == num: return False return True def solve(board): for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): # numbers from 1 to 9 if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = 0 # backtrack return False return True return solve(board)"},{"question":"Write a python function to identify overlapping nodes between two linked lists.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def get_intersection_node(headA, headB): Returns the node at which the two linked lists intersect. If the two linked lists have no intersection, return None. if not headA or not headB: return None pointerA = headA pointerB = headB while pointerA is not pointerB: pointerA = pointerA.next if pointerA else headB pointerB = pointerB.next if pointerB else headA return pointerA"},{"question":"Write a python function to find the minimum value in a list without using the built-in min() function.","solution":"def find_minimum(lst): Finds and returns the minimum value in a list without using the built-in min() function. if not lst: # If the list is empty, return None return None min_value = lst[0] for num in lst[1:]: if num < min_value: min_value = num return min_value"},{"question":"Write a python function to remove duplicates from a list of numbers. The function should take a list as an input and return the list after removing any duplicate values. Your function should not modify the original list.","solution":"def remove_duplicates(numbers): Returns a new list with duplicates removed from the input list of numbers. The original list is not modified. Parameters: numbers (list): A list of numbers Returns: list: A new list with duplicates removed return list(dict.fromkeys(numbers))"},{"question":"Write a python function to convert a given Integer to a Binary String.","solution":"def int_to_binary_string(n): Converts an integer to a binary string. if n == 0: return \\"0b0\\" is_negative = n < 0 n = abs(n) binary_str = \\"\\" while n > 0: binary_str = str(n % 2) + binary_str n = n // 2 if is_negative: return '-0b' + binary_str return '0b' + binary_str"},{"question":"Write a python function to calculate the sum of all numbers in a given list. Can you provide step-by-step guidance on how to approach this problem?","solution":"def sum_of_numbers(numbers): Returns the sum of all numbers in the given list. total = 0 for number in numbers: total += number return total"},{"question":"Write a python function to generate the first n (n>0) numbers in the sequence where each number is the sum of the previous number and its reverse.","solution":"def reverse_number(n): Returns the reverse of a given integer n. reversed_n = int(str(n)[::-1]) return reversed_n def generate_sequence(n): Generates the first n numbers in the sequence where each number is the sum of the previous number and its reverse. if n <= 0: raise ValueError(\\"n must be greater than 0\\") sequence = [1] # Starting with 1 as the first element while len(sequence) < n: last_number = sequence[-1] next_number = last_number + reverse_number(last_number) sequence.append(next_number) return sequence"},{"question":"Write a python function to print a list of numbers from 1 to 10 using an infinite loop. However, the loop should break when the number 10 is reached. How can this be achieved in Python?","solution":"def print_numbers(): Prints numbers from 1 to 10 using an infinite loop. The loop breaks when the number 10 is reached. num = 1 while True: print(num) if num == 10: break num += 1"},{"question":"Write a python function to find the count of each unique character in a given string. The function should ignore case sensitivity and should return a dictionary where the keys are the unique characters and the values are their respective counts.","solution":"def unique_char_count(s): Returns a dictionary with the count of each unique character in the string s. The function is case insensitive. count_dict = {} s = s.lower() for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Write a python function to find the minimum number of swaps required to sort an array in ascending order using bubble sort algorithm. Bubble sort has a time complexity of O(n^2), and it repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.","solution":"def minimum_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array using bubble sort algorithm. n = len(arr) count = 0 for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] count += 1 return count"},{"question":"Write a python function to calculate and return the median of a set of values. The function should take a list of integers as input. If the list is empty, the function should return None.","solution":"def find_median(numbers): Returns the median of a list of numbers. Parameters: - numbers: list of integers Returns: - Median value as an integer or float, or None if the list is empty if not numbers: return None numbers.sort() n = len(numbers) middle = n // 2 if n % 2 == 0: return (numbers[middle - 1] + numbers[middle]) / 2 else: return numbers[middle]"},{"question":"Write a python function to reverse the order of words in a given sentence using a stack data structure. The function should also handle multiple spaces between words and leading/trailing spaces.","solution":"def reverse_sentence(sentence): Reverses the order of words in a given sentence using a stack data structure. Handles multiple spaces between words and leading/trailing spaces. words = sentence.strip().split() stack = [] for word in words: stack.append(word) reversed_sentence = [] while stack: reversed_sentence.append(stack.pop()) return ' '.join(reversed_sentence)"},{"question":"Write a python function to reverse a string using slicing and concatenation.","solution":"def reverse_string(s): Returns the reverse of the input string s using slicing and concatenation. return s[::-1]"},{"question":"Write a python function to binary search an array. The array is sorted in ascending order.","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the index of the target element. Parameters: arr (list): Sorted list of elements. target (int/float): The element to search for. Returns: int: The index of the target element if found, else -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to find the intersection of two sets. Also, the function should handle cases where the input sets might be empty or contain duplicate elements.","solution":"def intersection(set1, set2): Returns the intersection of two sets. Args: set1 (set): First set. set2 (set): Second set. Returns: set: Intersection of set1 and set2. return set1 & set2"},{"question":"Write a python function to find the maximum sum of a contiguous subarray (i.e., a subarray with the largest sum).","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray in the given list of integers. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find all factors of a number. The factors should be returned as a list in ascending order.","solution":"def factors(n): Returns a list of all factors of the number n in ascending order. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") result = [] for i in range(1, n + 1): if n % i == 0: result.append(i) return result"},{"question":"Write a python function to find the maximum number in a list. I need a function that not only finds the maximum but also keep track of its index in the list.","solution":"def find_max_with_index(lst): Returns the maximum number in the list and its index. :param lst: List of numbers :return: Tuple containing the maximum number and its index if not lst: raise ValueError(\\"The list is empty\\") max_num = lst[0] max_index = 0 for i in range(1, len(lst)): if lst[i] > max_num: max_num = lst[i] max_index = i return max_num, max_index"},{"question":"Write a python function to remove all occurrences of a given value from a list. If the value is not found, return the original list. Otherwise, return the modified list with the value removed.","solution":"def remove_all_occurrences(lst, value): Removes all occurrences of the specified value from the list. If the value is not found, returns the original list. :param lst: The list from which to remove the value. :param value: The value to be removed from the list. :return: The list with the value removed. return [x for x in lst if x != value]"},{"question":"Write a python function to find the number of connected components in a graph given its adjacency list. The graph is represented as a dictionary where keys are nodes and values are lists of their neighbors.","solution":"def count_connected_components(graph): Returns the number of connected components in an undirected graph. :param graph: dict, an adjacency list representation of the graph :return: int, number of connected components def dfs(node, visited): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) visited = set() count = 0 for node in graph: if node not in visited: visited.add(node) dfs(node, visited) count += 1 return count"},{"question":"Write a python function to recursively check if a number is a perfect square.","solution":"import math def is_perfect_square(n, start=1): Recursively checks if a number n is a perfect square. Parameters: n (int): Number to check. start (int): Current number to test from, defaults to 1. Returns: bool: True if n is a perfect square, False otherwise. # Base case for invalid input if n < 0: return False # Base case for 0 or 1 if n == 0 or n == 1: return True # Compute the current square of 'start' current_square = start * start # Base case where the current square exceeds n if current_square > n: return False # Base case where the current square matches n if current_square == n: return True # Recur by incrementing start return is_perfect_square(n, start + 1)"},{"question":"Write a python function to reverse a string. You should manually reverse the string without using built-in functions like reversed() or slicing methods. How can this be done?","solution":"def reverse_string(s): Returns the reversed string of s. reversed_str = '' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a python function to print the digits of a given integer in reverse order. For example, if the input is 432, the output should be '234'. Assume the input will always be a positive integer.","solution":"def reverse_digits(n): Returns the digits of the given integer in reverse order as a string. Parameters: n (int): A positive integer Returns: str: Digits of the integer in reverse order return str(n)[::-1]"},{"question":"Write a python function to find the sum of all the numbers in a given list. You are not allowed to use the built-in sum function.","solution":"def sum_of_list(numbers): Returns the sum of all the numbers in the given list. total = 0 for number in numbers: total += number return total"},{"question":"Write a python function to reverse the characters in a string, but only for the characters that are alphanumeric. Additionally, keep all non-alphanumeric characters in their original positions.","solution":"def reverse_alphanumeric(s): Reverse only the alphanumeric characters in the string \`s\`, keeping all non-alphanumeric characters in their original positions. :param s: Input string :return: String with alphanumeric characters reversed # Create a list of the alphanumeric characters in reverse order alnum_chars = [c for c in s if c.isalnum()][::-1] # Result list to store the final characters result = [] # Index to keep track of the position in the alnum_chars list alnum_index = 0 for char in s: if char.isalnum(): # Replace alphanumeric characters with the reversed one result.append(alnum_chars[alnum_index]) alnum_index += 1 else: # Keep the non-alphanumeric characters in their original position result.append(char) # Join the list into a string and return it return ''.join(result)"},{"question":"Write a python function to find the number of 1's in the binary representation of a given decimal number.","solution":"def count_ones_in_binary(n): Returns the number of 1's in the binary representation of a given decimal number n. # Ensure the number is non-negative if n < 0: raise ValueError(\\"The number should be non-negative\\") # Convert the number to its binary representation and count '1's return bin(n).count('1')"},{"question":"Write a python function to calculate the number of set bits (1-bits) in the binary representation of a given non-negative integer. This function should be efficient and handle large integers well.","solution":"def count_set_bits(n): Calculate the number of set bits (1-bits) in the binary representation of a given non-negative integer. Parameters: n (int): A non-negative integer. Returns: int: The number of set bits in the binary representation of the integer. count = 0 while n: n &= n - 1 count += 1 return count"},{"question":"Write a python function to convert a number from decimal to binary and display the binary representation along with the count of '1's in it.","solution":"def decimal_to_binary(num): Converts a decimal number to binary and returns a tuple containing the binary representation as a string and the count of '1's in it. binary_representation = bin(num)[2:] # binary representation as string (excluding '0b') count_of_ones = binary_representation.count('1') return binary_representation, count_of_ones"},{"question":"Write a python function to find the factorial of a number using recursion. How can I write a function using Python's built-in function \`reduce\` to calculate the factorial of a number?","solution":"from functools import reduce def factorial_recursive(n): Returns the factorial of a number n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial_recursive(n - 1) def factorial_reduce(n): Returns the factorial of a number n using Python's built-in function \`reduce\`. return reduce(lambda x, y: x * y, range(1, n + 1), 1)"},{"question":"Write a python function to determine if a given graph is bipartite. A bipartite graph is one where vertex set can be partitioned into two disjoint sets U and V such that every edge connects a vertex in U to one in V. Your function should take an adjacency list representation of the graph as input and return True if the graph is bipartite, and False otherwise.","solution":"def is_bipartite(graph): Determines if the given graph is bipartite. :param graph: dict, adjacency list representation of the graph :return: bool, True if the graph is bipartite, False otherwise color = {} for node in graph: if node not in color: stack = [node] color[node] = 0 while stack: node = stack.pop() for neighbor in graph[node]: if neighbor not in color: color[neighbor] = color[node] ^ 1 stack.append(neighbor) elif color[neighbor] == color[node]: return False return True"},{"question":"Write a python function to find all the prime numbers below a certain number \`n\`. The function should be efficient and well-documented.","solution":"def find_primes_below(n): Returns a list of all prime numbers below a given number \`n\`. :param n: An integer number to find primes below. :return: A list of prime numbers below \`n\`. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num in range(n) if sieve[num]]"},{"question":"Write a python function to check if all characters in a string are unique. Can you explain the function's logic?","solution":"def are_all_characters_unique(string): Check if all characters in the string are unique. This function uses a set to track characters that have been seen as it iterates through the string. If a character is found that is already in the set, it means the character is not unique and the function returns False. If no duplicates are found, the function returns True. :param string: The string to check. :type string: str :return: True if all characters are unique, False otherwise. :rtype: bool seen = set() for char in string: if char in seen: return False seen.add(char) return True"},{"question":"Write a python function to check if all elements in a list are even and greater than 10.","solution":"def all_even_and_greater_than_ten(lst): Checks if all elements in the list are even and greater than 10. Parameters: lst (list): A list of integers. Returns: bool: True if all elements are even and greater than 10, False otherwise. for num in lst: if num % 2 != 0 or num <= 10: return False return True"},{"question":"Write a python function to check if a string is a palindrome (reads the same forwards and backwards), ignoring spaces, punctuation, and case.","solution":"import re def is_palindrome(s: str) -> bool: Check if a string is a palindrome by ignoring spaces, punctuation, and case. Parameters: s (str): The input string to be checked. Returns: bool: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase. cleaned = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the cleaned string is equal to its reverse. return cleaned == cleaned[::-1]"},{"question":"Write a python function to compute the natural logarithm of a given number. The function should be able to handle exceptions like negative numbers and zero.","solution":"import math def compute_natural_logarithm(x): Computes the natural logarithm of the given number x. Parameters: x (float): The number to compute the natural logarithm for. Must be greater than zero. Returns: float: The natural logarithm of x. Raises: ValueError: If x is less than or equal to zero. if x <= 0: raise ValueError(\\"Math domain error: natural logarithm undefined for zero or negative values.\\") return math.log(x)"},{"question":"Write a python function to return the cumulative sum of a list. The function takes a list of integers as a parameter and returns a list where each element is the sum of all previous elements in the input list, including itself. For example, given the input list \`[1, 2, 3, 4]\`, the output should be \`[1, 3, 6, 10]\`.","solution":"def cumulative_sum(nums): Returns the cumulative sum of a list of integers. Args: nums (list of int): A list of integers. Returns: list of int: A list where each element is the cumulative sum up to that point. cum_sum = [] current_sum = 0 for num in nums: current_sum += num cum_sum.append(current_sum) return cum_sum"},{"question":"Write a python function to reverse every k characters in a string. If the last segment is less than k characters, reverse it as well.","solution":"def reverse_every_k_characters(s, k): Reverses every k characters in a string. If the last segment is less than k characters, reverse it as well. :param s: Input string :param k: Interval of characters to be reversed :return: Modified string with every k characters reversed result = [] for i in range(0, len(s), k): result.append(s[i:i + k][::-1]) return ''.join(result)"},{"question":"Write a python function to find the sum of the first n elements of a list with error handling.","solution":"def sum_first_n_elements(lst, n): Returns the sum of the first n elements of the list. Parameters: lst (list): The list from which elements will be summed. n (int): The number of elements to sum from the start of the list. Returns: int/float: The sum of the first n elements of the list. Errors: - If lst is not a list, raise TypeError. - If n is not an integer, raise TypeError. - If n is bigger than len(lst), raise ValueError. if not isinstance(lst, list): raise TypeError(\\"lst must be a list\\") if not isinstance(n, int): raise TypeError(\\"n must be an integer\\") if n > len(lst): raise ValueError(\\"n cannot be larger than the length of the list\\") return sum(lst[:n])"},{"question":"Write a python function to calculate the area of a triangle, given its base and height. Then, call this function with base = 10, height = 5 and print the area.","solution":"def triangle_area(base, height): Returns the area of a triangle given its base and height. return 0.5 * base * height # Calculate and print the area for base=10 and height=5 base = 10 height = 5 area = triangle_area(base, height) print(f\\"The area of the triangle is: {area}\\")"},{"question":"Write a python function to perform morse code encoding. The function should accept a string of text as input and return the string encoded in morse code. Assume that the input string will only contain letters (A-Z and a-z) and spaces. The output should be in all uppercase.","solution":"MORSE_CODE_DICT = { 'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ' ': ' ' } def text_to_morse(text): Converts a given text string to Morse code. :param text: string to be converted :return: string encoded in Morse code text = text.upper() morse_code = ' '.join(MORSE_CODE_DICT[char] for char in text if char in MORSE_CODE_DICT) return morse_code"},{"question":"Write a python function to return the largest number that can be formed from an array of non-negative integers. The solution should return the largest number in the string format.","solution":"from functools import cmp_to_key def largest_number(nums): Returns the largest number that can be formed from an array of non-negative integers. The number is returned as a string. # Define a custom comparator to sort the numbers correctly def custom_compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert all numbers to strings for easy comparison nums = list(map(str, nums)) # Sort numbers using the custom comparator nums.sort(key=cmp_to_key(custom_compare)) # Combine the sorted numbers into a single string largest_num = ''.join(nums) # Return the resulting string, making sure to strip any leading zeros return '0' if largest_num[0] == '0' else largest_num"},{"question":"Write a python function to check if a given list of integers has a subset that sums up to a specific target.","solution":"def subset_sum(nums, target): Checks if there is a subset of the list \`nums\` that sums up to \`target\`. Args: nums (list of int): The list of integers. target (int): The target sum. Returns: bool: True if there is a subset that sums up to \`target\`, False otherwise. n = len(nums) dp = [[False] * (target + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, target + 1): if j < nums[i - 1]: dp[i][j] = dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]] return dp[n][target]"},{"question":"Write a python function to check if a string contains a valid ip address.","solution":"import re def is_valid_ip_address(ip_address): Returns True if ip_address is a valid IPv4 address, False otherwise. # Define a regular expression to match a valid IPv4 address pattern = re.compile(r'^(d{1,3}.){3}d{1,3}') # Check if the input string matches the pattern match = pattern.match(ip_address) if not match: return False # Validate each part of the IP address parts = ip_address.split('.') for part in parts: if not (0 <= int(part) <= 255): return False return True"},{"question":"Write a python function to check if a given number is within a specified range.","solution":"def is_within_range(number, start, end): Checks if the given number is within the specified range [start, end]. return start <= number <= end"},{"question":"Write a python function to find the maximum sum of a subarray in a given array. The subarray should not contain any duplicate elements and the elements should be in increasing order. I accomplishes this using a sliding window approach with a set data structure to track unique elements. The function should be efficient and handle large input sizes.","solution":"def max_sum_increasing_subarray(arr): Returns the maximum sum of a subarray in which the elements are unique and in strictly increasing order. Uses a sliding window approach with a set data structure to track unique elements. n = len(arr) if n == 0: return 0 current_sum = 0 max_sum = 0 start = 0 seen = set() for end in range(n): while arr[end] in seen or (end > start and arr[end] <= arr[end - 1]): seen.remove(arr[start]) current_sum -= arr[start] start += 1 seen.add(arr[end]) current_sum += arr[end] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to find the maximum product of three numbers in a given list of integers. The function should handle edge cases such as empty lists, lists with only one or two numbers, and negative numbers. Here is the function signature: \`def max_product_of_three(nums: List[int]) -> int:\`","solution":"from typing import List def max_product_of_three(nums: List[int]) -> int: Returns the maximum product of three numbers in a given list of integers. if len(nums) < 3: raise ValueError(\\"List must contain at least three numbers.\\") nums.sort() # The maximum product of three numbers can be either: # 1. The product of the three largest numbers. # 2. The product of the two smallest numbers (which may be negative) and the largest number. return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a python function to check if a given string is a palindrome ignoring spaces and case sensitivity. I.e., \\"A man a plan a canal Panama\\" should return True.","solution":"def is_palindrome(s): Checks if a given string is a palindrome ignoring spaces and case sensitivity. filtered_chars = ''.join(char.lower() for char in s if char.isalnum()) return filtered_chars == filtered_chars[::-1]"},{"question":"Write a python function to print all the prime factors of a given number. Prime factors are the prime numbers which divide the given number exactly one time. Here is the code that one has developed but it seems to have some errors.","solution":"def prime_factors(n): Prints the prime factors of a given number n. i = 2 factors = [] while i * i <= n: if n % i: i += 1 else: n //= i factors.append(i) if n > 1: factors.append(n) return factors"},{"question":"Write a python function to create an in-memory database to manage student information. The function should support adding a student, retrieving a student by name, and removing a student by name.","solution":"class InMemoryStudentDB: def __init__(self): self.students = {} def add_student(self, name, data): Adds a student to the database. Parameters: name (str): The name of the student. data (dict): The data of the student. self.students[name] = data def get_student(self, name): Retrieves a student from the database by name. Parameters: name (str): The name of the student. Returns: dict: The data of the student if found, otherwise None. return self.students.get(name, None) def remove_student(self, name): Removes a student from the database by name. Parameters: name (str): The name of the student. Returns: bool: True if the student was removed, False if the student was not found. if name in self.students: del self.students[name] return True return False"},{"question":"Write a python function to sort an array of integers in ascending order. You can use any sorting algorithm you like. For this problem, let's use the bubble sort algorithm.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the bubble sort algorithm. Parameters: arr (list of int): The array of integers to be sorted. Returns: list of int: The sorted array. n = len(arr) # Traverse through all array elements for i in range(n): # Flag to check if any swapping happened in the inner loop swapped = False # Last i elements are already in place for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1 # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no swapping happened in the inner loop, array is already sorted if not swapped: break return arr"},{"question":"Write a python function to check if a string contains any sequence of consecutive repeating characters or not. If found, return \`True\` else return \`False\`.","solution":"def has_consecutive_repeating_characters(s): Returns True if the string contains any sequence of consecutive repeating characters. Otherwise, returns False. for i in range(1, len(s)): if s[i] == s[i - 1]: return True return False"},{"question":"Write a python function to compress a string using the Run Length Encoding (RLE) algorithm. Can you explain the concept of Run Length Encoding?","solution":"def run_length_encoding(s): Compress a string using the Run Length Encoding (RLE) algorithm. Parameters: s (str): The string to be compressed. Returns: str: The compressed string using RLE. if not s: return \\"\\" encoded_str = [] count = 1 prev_char = s[0] for char in s[1:]: if char == prev_char: count += 1 else: encoded_str.append(f\\"{prev_char}{count}\\") prev_char = char count = 1 encoded_str.append(f\\"{prev_char}{count}\\") return ''.join(encoded_str)"},{"question":"Write a python function to count the number of occurrences of each character in a string. the function should return a dictionary where the keys are the characters and the values are their respective counts.","solution":"def count_characters(s): Returns a dictionary with the number of occurrences of each character in the string s. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Write a python function to generate a palindrome string using the given string. If the input string is already a palindrome, return the string as is.","solution":"def generate_palindrome(s): Generates a palindrome string using the given string. If the input string is already a palindrome, returns the string as is. # Check if the input string is already a palindrome if s == s[::-1]: return s # Generate palindrome by appending the reverse of the input string to the input string return s + s[::-1][1:]"},{"question":"Write a python function to find the missing number in an array containing integers from 1 to n. The array may contain duplicates. You should implement a method with O(n) time complexity and O(1) space complexity.","solution":"def find_missing_number(arr): Finds the missing number in an array containing integers from 1 to n, possibly with duplicates. The function utilizes the arithmetic series sum formula. Parameters: arr (list): A list of integers from 1 to n with one missing number Returns: int: The missing number in the array n = len(arr) + 1 # As one number is missing in the list from 1 to n expected_sum = n * (n + 1) // 2 actual_sum = sum(arr) return expected_sum - actual_sum"},{"question":"Write a python function to check the occurrence of each character in the string and return a dictionary where the key is the character and the value is the number of times it occurs.","solution":"def character_occurrence(s): Returns a dictionary with the number of occurrences of each character in the string s. occurrence_dict = {} for char in s: if char in occurrence_dict: occurrence_dict[char] += 1 else: occurrence_dict[char] = 1 return occurrence_dict"},{"question":"Write a python function to calculate the area of a circle given its radius. You know that the formula is πr² and π is approximately 3.14.","solution":"import math def area_of_circle(radius): Calculate the area of a circle given its radius. :param radius: The radius of the circle :type radius: float or int :return: The area of the circle :rtype: float if radius < 0: raise ValueError(\\"The radius cannot be negative\\") return math.pi * (radius ** 2)"},{"question":"Write a python function to find the maximum and minimum element in a given list. You should not use any built-in methods like max() and min(). Also, handle the case where the list might be empty.","solution":"def find_max_min(lst): Returns a tuple containing the maximum and minimum elements in the list. If the list is empty, returns (None, None). if not lst: return (None, None) max_elem = lst[0] min_elem = lst[0] for elem in lst[1:]: if elem > max_elem: max_elem = elem if elem < min_elem: min_elem = elem return (max_elem, min_elem)"},{"question":"Write a python function to search for a given number in a sorted list and if present return its position, otherwise return -1. Use a binary search algorithm.","solution":"def binary_search(sorted_list, target): Perform binary search to find the target in the sorted list. Return the position of target if found, otherwise return -1. left, right = 0, len(sorted_list) - 1 while left <= right: mid = (left + right) // 2 if sorted_list[mid] == target: return mid elif sorted_list[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to find all the prime numbers up to a given limit. Please use a function named \`find_primes(limit)\`.","solution":"def find_primes(limit): Returns a list of all prime numbers up to a given limit (inclusive). if limit < 2: return [] primes = [] is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False for num in range(2, limit + 1): if is_prime[num]: primes.append(num) for multiple in range(num * num, limit + 1, num): is_prime[multiple] = False return primes"},{"question":"Write a python function to return the length of the longest subsequence of a list that is in non-decreasing order.","solution":"def length_of_longest_non_decreasing_subsequence(lst): Returns the length of the longest subsequence of a list that is in non-decreasing order. if not lst: return 0 n = len(lst) lengths = [1] * n # Initialize lengths array with 1 for i in range(1, n): for j in range(i): if lst[i] >= lst[j]: lengths[i] = max(lengths[i], lengths[j] + 1) return max(lengths)"},{"question":"Write a python function to convert a given integer to a binary string using bitwise operations.","solution":"def int_to_binary(num): Converts a given integer to its binary string equivalent using bitwise operations. Parameters: num (int): The integer to convert to a binary string. Returns: str: The binary string representation of the given integer. if num == 0: return \\"0\\" binary_str = \\"\\" is_negative = num < 0 num = abs(num) while num > 0: binary_str = str(num & 1) + binary_str num >>= 1 if is_negative: binary_str = \\"-\\" + binary_str return binary_str"},{"question":"Write a python function to decode a given string using Caesar cipher with a shift of 5. The function should decode the string by reversing the shift of letters by 5 in the alphabet.","solution":"def decode_caesar_cipher(s, shift=5): Decodes a given string using Caesar cipher with a shift of 5. decoded_string = \\"\\" for char in s: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') decoded_char = chr((ord(char) - shift_base - shift) % 26 + shift_base) decoded_string += decoded_char else: decoded_string += char return decoded_string"},{"question":"Write a python function to calculate the minimum cost to connect all nodes in a graph using the Kruskal's algorithm. The graph is represented as an adjacency list. Nodes are represented by integers from 0 to n-1 where n is the number of nodes in the graph. The graph is directed and weighted.","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [0] * size def find(self, node): if self.parent[node] != node: self.parent[node] = self.find(self.parent[node]) return self.parent[node] def union(self, node1, node2): root1 = self.find(node1) root2 = self.find(node2) if root1 != root2: if self.rank[root1] > self.rank[root2]: self.parent[root2] = root1 elif self.rank[root1] < self.rank[root2]: self.parent[root1] = root2 else: self.parent[root2] = root1 self.rank[root1] += 1 def kruskal(n, edges): Calculate the minimum cost to connect all nodes in the graph using Kruskal's algorithm. Parameters: n (int): The number of nodes in the graph. edges (list of tuples): Each tuple contains (u, v, weight) representing an edge from node u to node v with a given weight. Returns: int: The minimum cost to connect all nodes. # Sort edges based on weight edges.sort(key=lambda x: x[2]) # Initialize union-find data structure uf = UnionFind(n) total_cost = 0 for u, v, weight in edges: # Check if u and v are in different sets if uf.find(u) != uf.find(v): # Union the sets and add the weight to the total cost uf.union(u, v) total_cost += weight # Check if all nodes are connected root = uf.find(0) for i in range(1, n): if uf.find(i) != root: return float('inf') # Not all nodes are connected return total_cost"},{"question":"Write a python function to calculate the sum of elements in two lists. The function should return a new list containing the sum of corresponding elements. If the lists are of unequal lengths, the function should handle it gracefully by ignoring the extra elements in the longer list. For example, \`sumLists([1, 2, 3], [4, 5])\` should return \`[5, 7]\`.","solution":"def sumLists(list1, list2): Returns a new list containing the sum of corresponding elements from list1 and list2. If the lists are of unequal lengths, extra elements in the longer list are ignored. return [a + b for a, b in zip(list1, list2)]"},{"question":"Write a python function to read a text file and count the frequency of each word. How can this be done efficiently?","solution":"from collections import Counter def word_frequency(file_path): Reads a text file and counts the frequency of each word. Parameters: file_path (str): The path to the text file. Returns: dict: A dictionary where the keys are words and the values are their frequencies. with open(file_path, 'r', encoding='utf-8') as file: text = file.read() words = text.lower().split() return dict(Counter(words))"},{"question":"Write a python function to find the middle node of a singly linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_middle_node(head): Finds the middle node of a singly linked list. If there are two middle nodes, return the second one. if not head: return None slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow"},{"question":"Write a python function to take an integer and return its hexadecimal representation as a string. If the input is not a valid integer, the function should raise a ValueError with an appropriate message.","solution":"def int_to_hex(value): Converts an integer to its hexadecimal representation as a string. Parameters: value (int): The integer to be converted Returns: str: The hexadecimal representation of the integer Raises: ValueError: If the input is not a valid integer if not isinstance(value, int): raise ValueError(\\"Input value must be an integer.\\") return hex(value)"},{"question":"Write a python function to convert a given decimal number to binary. You must use recursion to achieve this.","solution":"def decimal_to_binary(n): Converts a given decimal number to its binary representation using recursion. if n == 0: return \\"0\\" elif n == 1: return \\"1\\" else: return decimal_to_binary(n // 2) + str(n % 2)"},{"question":"Write a python function to remove duplicate characters from a given string \`s\` and return the string with the duplicate characters removed, maintaining the original order of characters.","solution":"def remove_duplicates(s): Removes duplicate characters from a given string s, keeping the first occurrence of each character. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to find the minimum number of steps to move from the top-left corner to the bottom-right corner of an MxN matrix using DFS that outputs both least steps to reach the bottom-right corner and the path taken to reach it. The function should also handle cases where the matrix has obstacles.","solution":"def get_neighbors(position, matrix): Get the valid neighbors of a given position in the matrix. x, y = position M, N = len(matrix), len(matrix[0]) neighbors = [] for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and matrix[nx][ny] == 0: neighbors.append((nx, ny)) return neighbors def min_steps_and_path_DFS(matrix): Find the minimum number of steps to move from the top-left corner to the bottom-right corner of an MxN matrix using DFS that outputs both the least steps and the path taken to reach it. M = len(matrix) N = len(matrix[0]) start = (0, 0) goal = (M-1, N-1) stack = [(start, [start])] min_steps = float('inf') result_path = [] while stack: (node, path) = stack.pop() if node == goal: if len(path) < min_steps: min_steps = len(path) result_path = path else: for neighbor in get_neighbors(node, matrix): if neighbor not in path: stack.append((neighbor, path + [neighbor])) if min_steps == float('inf'): return -1, [] return min_steps - 1, result_path"},{"question":"Write a python function to return two numbers which sum up to zero from a given array. If there are multiple pairs, return one of them. If no such pair exists, return \`None\`.","solution":"def find_pair_with_sum_zero(arr): Returns a pair of numbers from the array that sum up to zero, if such a pair exists. If multiple pairs exist, returns one of them. If no such pair exists, returns None. seen = set() for num in arr: if -num in seen: return (-num, num) seen.add(num) return None"},{"question":"Write a python function to check if a given integer n is a Fibonacci number.","solution":"import math def is_fibonacci(n): Determines if a given integer n is a Fibonacci number. A number is a Fibonacci number if and only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square. if n < 0: return False # Check if x is a perfect square def is_perfect_square(x): s = int(math.sqrt(x)) return s * s == x return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)"},{"question":"Write a python function to generate the first n Fibonacci numbers and return them in a list. The function should handle both positive and negative inputs by returning an empty list for negative inputs.","solution":"def fibonacci(n): Generate the first n Fibonacci numbers and return them in a list. Return an empty list for negative inputs. if n <= 0: return [] fib_seq = [0, 1] for i in range(2, n): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq[:n]"},{"question":"Write a python function to find the common elements between two lists. You should also return the frequency of each common element. **Input:** list1 = [1, 2, 2, 3, 4], list2 = [2, 3, 4, 4, 5] **Output:** {2: 2, 3: 1, 4: 2}","solution":"from collections import Counter def find_common_elements_with_frequency(list1, list2): Returns a dictionary with common elements between list1 and list2 as keys and their frequency counts as values. freq1 = Counter(list1) freq2 = Counter(list2) common_elements = freq1 & freq2 common_freq = {element: common_elements[element] for element in common_elements} return common_freq"},{"question":"Write a python function to reverse a string. Can you list the time complexity and space complexity of this function?","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1] # Time complexity: O(n), where n is the length of the string. # Space complexity: O(n), due to the space required to store the reversed string."},{"question":"Write a python function to remove duplicate items from a list and maintain their original order using a list comprehension or a while loop. Is it more pythonic to use a list comprehension or a while loop in this scenario?","solution":"def remove_duplicates(arr): Removes duplicate items from a list and maintains their original order. Args: arr (list): The input list from which duplicates should be removed. Returns: list: A list with duplicates removed, maintaining the original order. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result # It is more Pythonic to use a list comprehension or for loop instead of a while loop in this scenario."},{"question":"Write a python function to detect cycles if any in a given graph represented as an adjacency list.","solution":"def has_cycle(graph): Detects if there's a cycle in the given graph represented as an adjacency list. Args: graph (dict): A dictionary where keys are nodes and values are lists of neighboring nodes. Returns: bool: True if there's a cycle in the graph, False otherwise. def dfs(node, visited, recursion_stack): visited[node] = True recursion_stack[node] = True for neighbor in graph.get(node, []): if not visited[neighbor]: if dfs(neighbor, visited, recursion_stack): return True elif recursion_stack[neighbor]: return True recursion_stack[node] = False return False visited = {node: False for node in graph} recursion_stack = {node: False for node in graph} for node in graph: if not visited[node]: if dfs(node, visited, recursion_stack): return True return False"},{"question":"Write a python function to determine if a given string can be formed by repeating a substring. A substring is a contiguous sequence of characters within a string.","solution":"def can_form_by_repeating_substring(s): Determines if a given string can be formed by repeating a substring. :param s: The input string :return: True if the string can be formed by repeating a substring, False otherwise if not s: return False doubled_s = (s + s)[1:-1] return s in doubled_s"},{"question":"Write a python function to check if a string contains only numeric characters. Let's create a function called is_numeric that takes one parameter: string. The function should return True if the string contains only numeric characters and False otherwise.","solution":"def is_numeric(string): Returns True if the string contains only numeric characters, False otherwise. return string.isdigit()"},{"question":"Write a python function to return the length of the longest common substring between two given strings string1 and string2.","solution":"def longest_common_substring(string1, string2): Returns the length of the longest common substring between two given strings. n = len(string1) m = len(string2) result = 0 # Initialize result # Create a 2D array to store lengths of longest common suffixes of substrings. # Note that LCSuff[i][j] contains the length of longest common suffix of # string1[0...i-1] and string2[0...j-1]. lcsuff = [[0 for k in range(m+1)] for l in range(n+1)] # Building the lcsuff in bottom-up fashion for i in range(n+1): for j in range(m+1): if i == 0 or j == 0: lcsuff[i][j] = 0 elif string1[i-1] == string2[j-1]: lcsuff[i][j] = lcsuff[i-1][j-1] + 1 result = max(result, lcsuff[i][j]) else: lcsuff[i][j] = 0 return result"},{"question":"Write a python function to insert a string into a list. The string should be placed at the index specified by the user.","solution":"def insert_string_into_list(lst, s, idx): Inserts string s into list lst at index idx. :param lst: List in which to insert the string :param s: String to insert :param idx: Index at which to insert the string :return: The modified list with string inserted at specified index lst.insert(idx, s) return lst"},{"question":"Write a python function to determine if a given number n is an Armstrong number of order m. An Armstrong number of order m is an m-digit number such that the sum of its digits each raised to the power of m is equal to the number itself. For example, 371 is an Armstrong number as 3**3 + 7**3 + 1**3 = 371.","solution":"def is_armstrong_number(n): Determines if a given number n is an Armstrong number of order m. # Convert the number to a string to easily iterate over digits digits = str(n) # Calculate the order of the number (number of digits) order = len(digits) # Calculate the sum of the digits each raised to the power of the order sum_of_powers = sum(int(digit) ** order for digit in digits) # Determine if the sum of powers is equal to the original number return sum_of_powers == n"},{"question":"Write a python function to calculate the sum of the squares of the first 'n' natural numbers. The function should improve upon the euler-proj-1 problem solution by using a mathematical formula instead of an iterative process to calculate the sum.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. Uses the formula: n * (n + 1) * (2n + 1) / 6. return n * (n + 1) * (2 * n + 1) // 6"},{"question":"Write a python function to find the index of the first occurrence of a specific value in a list. If the value is not found, return -1.","solution":"def find_first_occurrence(lst, value): Returns the index of the first occurrence of value in the list. If the value is not found, returns -1. try: return lst.index(value) except ValueError: return -1"},{"question":"Write a python function to sort an array of numbers using the bubble sort algorithm. How does the bubble sort algorithm work?","solution":"def bubble_sort(arr): Sorts an array of numbers using the bubble sort algorithm. Parameters: arr (list of int/float): The list of numbers to be sorted. Returns: list of int/float: The sorted list of numbers. n = len(arr) for i in range(n): # Traverse through all elements up to the sorted boundary for j in range(0, n-i-1): # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python function to find the maximum sum subset of a given array where the sum is less than or equal to a given target value.","solution":"def max_sum_subset(arr, target): Finds the maximum sum subset of the input array where the sum is less than or equal to the target value. Parameters: arr (list): List of integers. target (int): Target value. Returns: int: Maximum sum of subset less than or equal to target. n = len(arr) dp = [0] * (target + 1) for num in arr: for j in range(target, num - 1, -1): dp[j] = max(dp[j], dp[j - num] + num) return dp[target]"},{"question":"Write a python function to reverse the string and print it. The function should take one parameter, a string, and return the reversed string.","solution":"def reverse_string(s): Returns the reversed string of the input string s. return s[::-1]"},{"question":"Write a python function to find the maximum number of unique characters in any substring of length k in a given string.","solution":"def max_unique_chars_in_substring(s, k): Finds the maximum number of unique characters in any substring of length k in a given string s. Args: s (str): The input string. k (int): The length of the substring. Returns: int: The maximum number of unique characters in any substring of length k. if k <= 0 or len(s) == 0 or k > len(s): return 0 max_unique = 0 for i in range(len(s) - k + 1): current_substr = s[i:i+k] unique_chars = set(current_substr) max_unique = max(max_unique, len(unique_chars)) return max_unique"},{"question":"Write a python function to solve for the maximum number of spheres that can be inscribed in a rectangular prism of dimensions l, b, and h, where a sphere has a diameter that is at most a given maximum diameter. The function should return the number of spheres that can fit within the prism if all possible spheres are packed in the most efficient way.","solution":"def max_spheres_in_prism(l, b, h, max_d): Returns the maximum number of spheres that can be inscribed in a rectangular prism of dimensions l, b, and h, where the diameter of a sphere is at most max_d. radius = max_d / 2 num_in_l = l // max_d num_in_b = b // max_d num_in_h = h // max_d return int(num_in_l * num_in_b * num_in_h)"},{"question":"Write a python function to find the maximum number in a list without using the built-in max() function.","solution":"def find_max(numbers): Returns the maximum number in a list without using the built-in max() function. if not numbers: raise ValueError(\\"The list is empty\\") max_number = numbers[0] for number in numbers[1:]: if number > max_number: max_number = number return max_number"},{"question":"Write a python function to swap the first and last elements of a list without using a temporary variable or additional libraries.","solution":"def swap_first_last(lst): Swaps the first and last elements of a list. Args: lst (list): A list of elements Returns: list: The modified list with first and last elements swapped. if len(lst) > 1: lst[0], lst[-1] = lst[-1], lst[0] return lst"},{"question":"Write a python function to count the number of occurrences of a specific substring in a given string. You should use recursion for this task.","solution":"def count_occurrences(s, sub): Returns the number of occurrences of the substring 'sub' in the string 's' using recursion. if not sub: return 0 if len(s) < len(sub): return 0 if s[:len(sub)] == sub: return 1 + count_occurrences(s[len(sub):], sub) else: return count_occurrences(s[1:], sub)"},{"question":"Write a python function to determine the maximum number in a given list. If the list is empty, return None. Also, include a piece of code to test this function with a list of numbers.","solution":"def find_maximum(numbers): Returns the maximum number in a given list. If the list is empty, returns None. Parameters: numbers (list of int/float): List of numbers Returns: int/float: The maximum number in the list or None if the list is empty if not numbers: return None return max(numbers)"}]`),P={name:"App",components:{PoemCard:F},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},N={class:"search-container"},j={class:"card-container"},W={key:0,class:"empty-state"},z=["disabled"],E={key:0},L={key:1};function S(i,e,u,d,s,a){const m=p("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",N,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[_,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",j,[(n(!0),r(v,null,y(a.displayedPoems,(o,g)=>(n(),w(m,{key:g,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",W,' No results found for "'+h(s.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),r("span",L,"Loading...")):(n(),r("span",E,"See more"))],8,z)):l("",!0)])}const D=c(P,[["render",S],["__scopeId","data-v-85f5fdb4"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"drive/28.md","filePath":"drive/28.md"}'),V={name:"drive/28.md"},M=Object.assign(V,{setup(i){return(e,u)=>(n(),r("div",null,[q(D)]))}});export{B as __pageData,M as default};
