import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as h,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,p,a,r){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(k,[["render",E],["__scopeId","data-v-4384176a"]]),A=JSON.parse('[{"question":"Problem Statement You are given a set of N points on a 2D plane. Each point is represented by its coordinates (x, y) . Your task is to find a non-degenerate triangle with the maximum possible area that can be formed using any three of these points. If there are multiple triangles with the same maximum area, you can return any of them. If no such triangle exists, return a special value indicating that no non-degenerate triangle can be formed. A triangle is non-degenerate if its area is greater than zero. Constraint * 3 leq N leq 50 * -1000 leq x_i, y_i leq 1000 Input The input format is as follows: N x_1 y_1 x_2 y_2 ... x_N y_N Output Output the maximum possible area of a non-degenerate triangle formed by any three points, rounded to 2 decimal places, or print \\"No triangle\\" if no non-degenerate triangle can be formed. Example Input 4 0 0 0 1 1 0 1 1 Output 0.50 Input 5 0 0 1 0 2 0 3 0 4 0 Output No triangle","solution":"import itertools import math def max_triangle_area(points): def area(p1, p2, p3): return 0.5 * abs(p1[0] * (p2[1] - p3[1]) + p2[0] * (p3[1] - p1[1]) + p3[0] * (p1[1] - p2[1])) max_area = 0 for p1, p2, p3 in itertools.combinations(points, 3): max_area = max(max_area, area(p1, p2, p3)) return max_area def process_input(N, coordinates): points = [tuple(map(int, coordinates[i:i+2])) for i in range(0, 2*N, 2)] max_area = max_triangle_area(points) if max_area > 0: return round(max_area, 2) else: return \\"No triangle\\""},{"question":"The city of Byteland has a grid of size m by n, and its mayor enjoys organizing events by building new vertical roads exclusively on particular rows to facilitate better traffic movement. Each new vertical road spans the entire grid and aligns with one of the columns. However, the mayor wants to ensure that no two new vertical roads are built on consecutive columns to avoid traffic congestion in adjacent paths. Design a program that, given the grid\'s dimensions and a list of the indices of rows where the roads will be built, determines the maximum number of vertical roads that can be constructed. # Input The first line of input consists of two integers, m and n (1 ≤ m, n ≤ 10000) — the dimensions of the grid (number of rows and columns). The second line consists of an integer k (0 ≤ k ≤ m) — the number of rows where the roads will be constructed. Each of the next k lines contains an integer r (0 ≤ r < m) — the index of a row on which a new vertical road can be built. # Output Print a single integer representing the maximum number of vertical roads that can be built without any two roads being on consecutive columns. # Example Input ``` 5 5 3 1 3 4 ``` Output ``` 2 ``` Note In this example, the grid size is 5x5 and vertical roads can be built on rows 1, 3, and 4. Thus, the maximum number of vertical roads that can be built on non-consecutive columns is 2. For example, they can be built on columns 0 and 2 or columns 1 and 3, ensuring no two consecutive columns have a vertical road.","solution":"def max_vertical_roads(m, n, k, rows): Determine the maximum number of vertical roads that can be constructed on a grid of dimensions m x n with the given rows where roads can be built. No two roads can be on consecutive columns. # If there are no available rows to build vertical roads, return 0 if k == 0: return 0 # Calculate how many non-consecutive columns can be used max_roads = (n + 1) // 2 return max_roads"},{"question":"For a given list of integers, perform the following operations to manage the list. The operations include adding an integer, removing an integer, finding the maximum integer, and finding the median of the list. Note that adding and removing operations need to maintain the list in sorted order. * add(x): Add the integer x to the list. * remove(x): Remove one occurrence of the integer x from the list. If the integer x is not present in the list, ignore the operation. * max(): Print the maximum integer from the list. * median(): Print the median of the integers in the list. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements. Constraints * 1 leq q leq 200,000 * 1 leq x leq 1,000,000,000 Input The input is given in the following format. q query_1 query_2 : query_q Each query query_i is given by 0 x or 1 x or 2 or 3 where the first digits 0, 1, 2, and 3 represent add, remove, max, and median operations respectively. Output For each max operation, print the corresponding maximum integer. For each median operation, print the corresponding median value. Example Input ``` 11 0 7 0 3 0 5 0 9 2 3 1 5 2 3 1 10 3 ``` Output ``` 9 5 9 7 ```","solution":"import bisect class IntegerListManager: def __init__(self): self.integers = [] def add(self, x): bisect.insort(self.integers, x) def remove(self, x): if x in self.integers: self.integers.remove(x) def max(self): if self.integers: return self.integers[-1] return None def median(self): if not self.integers: return None n = len(self.integers) if n % 2 == 1: return self.integers[n // 2] else: return (self.integers[(n // 2) - 1] + self.integers[n // 2]) / 2"},{"question":"You are given a set of integers, each representing the times (in seconds) at which tasks will arrive. Each task, when it arrives, will add a load of `1` to the system. Once a task is processed, it will remain in the system for `t` seconds before being removed from the system. Your goal is to determine the maximum load on the system at any point in time, given the arrival times of the tasks and the duration `t`. # Input - The first line contains a single integer `t` (1 ≤ t ≤ 10^4) — the number of test cases. - The first line of each test case contains two integers `n` and `d` (1 ≤ n ≤ 10^5 and 1 ≤ d ≤ 10^9) — where `n` is the number of tasks and `d` is the duration a task will remain in the system. - The second line of each test case contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9) — the arrival times of the tasks. It is guaranteed that the sum of `n` over all test cases does not exceed 10^5. # Output For each test case, output a single integer: the maximum load on the system at any point in time. # Example Input ``` 2 5 3 1 2 3 4 10 6 2 1 1 1 1 1 1 ``` Output ``` 4 6 ``` Explanation In the first test case, tasks arrive at times 1, 2, 3, 4, and 10. Each task will be processed and stay in the system for 3 seconds. The maximum system load occurs at time 4, where tasks that arrived at times 1, 2, 3, and 4 are all still in the system. In the second test case, all tasks arrive at the same time and stay in the system for 2 seconds, leading to a maximum load of 6.","solution":"def max_system_load(t, test_cases): Determines the maximum load on the system at any point in time for each test case. Arguments: t -- Number of test cases test_cases -- List containing tuples (n, d, arrivals) for each test case Returns: List of integers where each integer is the maximum load for the corresponding test case. results = [] for case in test_cases: n, d, arrivals = case arrivals.sort() max_load = 0 current_load = 0 events = [] for arrival in arrivals: events.append((arrival, \'arrival\')) events.append((arrival + d, \'departure\')) events.sort() for time, event_type in events: if event_type == \'arrival\': current_load += 1 else: current_load -= 1 max_load = max(max_load, current_load) results.append(max_load) return results"},{"question":"You are given a list of integers that represent the heights of different buildings. You are allowed to select a sublist of these buildings such that the difference between the minimum and maximum heights in the sublist is minimized. However, the length of the selected sublist must be at least a given value `x`. Write a function that returns the minimum possible difference between the tallest and shortest buildings in such a sublist. Function Signature: `def min_height_diff(buildings: List[int], x: int) -> int:` # Input - A list of integers `buildings` (2 ≤ len(buildings) ≤ 10^5, 1 ≤ buildings[i] ≤ 10^9) — the heights of the buildings. - An integer `x` (1 ≤ x ≤ len(buildings)) — the minimum length of the sublist. # Output - Return an integer representing the minimum difference between the maximum and minimum height in the sublist. # Examples Example 1 ```python buildings = [1, 5, 9, 7, 3] x = 3 min_height_diff(buildings, x) ``` Output ```python 4 ``` Example 2 ```python buildings = [2, 10, 8, 17, 6] x = 2 min_height_diff(buildings, x) ``` Output ```python 1 ``` Example 3 ```python buildings = [4, 4, 4, 4, 4] x = 1 min_height_diff(buildings, x) ``` Output ```python 0 ``` # Note In the first example, you can select the sublist [7, 3, 5] which has a difference of 7-3 = 4, which is the minimum possible difference for any sublist of length 3. In the second example, selecting the sublist [8, 10] gives a difference of 2, which is the minimum for any sublist of length at least 2. In the third example, any sublist will have a difference of 0 since all heights are the same.","solution":"from typing import List def min_height_diff(buildings: List[int], x: int) -> int: Returns the minimum possible difference between the tallest and shortest buildings in a sublist of at least length x. # Sort the buildings heights buildings.sort() # Initialize the minimum difference with a high value min_diff = float(\'inf\') # Traverse the sorted list with a window of size x for i in range(len(buildings) - x + 1): current_diff = buildings[i + x - 1] - buildings[i] min_diff = min(min_diff, current_diff) return min_diff"},{"question":"Karl is organizing an auction for 5 items. He can set different starting prices for each item, and he wants to make the auction attractive by ensuring the sum of all starting prices does not exceed a certain budget B. You are given an array P of length 5, where the i-th element represents the starting price of the i-th item. Additionally, you are given a number B, representing the budget limit. Determine if Karl\'s auction is feasible under the given budget. Constraints * The length of P is 5. * Each element of P is an integer between 1 and 100. * B is an integer between 5 and 500. Input Input is given from Standard Input in the following format: P1 P2 P3 P4 P5 B Outputs Print \\"Yes\\" if the sum of starting prices does not exceed B, otherwise print \\"No\\". Examples Input 10 20 30 40 50 150 Output Yes Input 10 20 30 40 60 150 Output No Input 1 1 1 1 1 5 Output Yes","solution":"def is_auction_feasible(P, B): Determines if the auction is feasible under the given budget B. Parameters: P (list of int): A list of 5 starting prices for the items. B (int): The budget limit. Returns: bool: True if the sum of starting prices does not exceed B, otherwise False. # Calculate the sum of starting prices total_sum = sum(P) # Check if the total sum is within the budget return total_sum <= B # Example input # P = [10, 20, 30, 40, 50] # B = 150 # Example usage # result = is_auction_feasible(P, B) # print(\\"Yes\\" if result else \\"No\\")"},{"question":"Ivan has been introduced to a new type of tree structure called a \\"zone tree.\\" A zone tree is a tree where the vertices can be divided into zones such that each zone forms a connected subgraph. Every vertex in a zone is connected either directly or indirectly to other vertices in the same zone, and every vertex belongs to a unique zone. Ivan\'s task is to determine the maximum number of zones that can be formed in a given tree such that each zone contains exactly `z` vertices. If it is not possible to partition the tree into zones of exactly `z` vertices, then the maximum number of zones should be calculated based on having nearly equal sizes, where the difference in the number of vertices between any two zones is no more than 1. Input The first line of the input contains two integers, `n` and `z` (1 ≤ n ≤ 100,000; 1 ≤ z ≤ n), where `n` is the number of vertices in the tree and `z` represents the desired number of vertices per zone. The following `n-1` lines each contain two integers, `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), representing an edge between vertices `u` and `v`. Output Print a single integer representing the maximum number of zones that can be formed in the given tree. Examples Input 10 3 1 2 1 3 2 4 2 5 3 6 3 7 4 8 5 9 6 10 Output 3 Input 7 2 1 2 1 3 2 4 2 5 3 6 3 7 Output 3 Note In the first example, the tree can be divided into zones of 3 vertices each: {1, 2, 4}, {3, 6, 10}, and {5, 9, 7}. Total maximum zones are 3. In the second example, the tree can be divided into zones of 2 vertices each: {1, 2}, {3, 6}, and {4, 5, 7}. Total maximum zones are 3. Though the last zone has 3 vertices, it maintains the difference constraint.","solution":"def max_zones(n, z, edges): def dfs(node, parent): subtree_size = 1 for neighbor in adj[node]: if neighbor != parent: subtree_size += dfs(neighbor, node) zone_count[0] += subtree_size // z return subtree_size % z if z > n: return 0 adj = [[] for _ in range(n + 1)] for u, v in edges: adj[u].append(v) adj[v].append(u) zone_count = [0] dfs(1, -1) return zone_count[0]"},{"question":"You are given an array A of n integers. For each index i, you need to find the product of all elements of the array except A[i]. Your task is to return a new array P of the same length where each P[i] is the product of all elements of A except A[i]. For example, if A = [1, 2, 3, 4], then P = [24, 12, 8, 6]. Here, P[0] = 2 * 3 * 4 = 24, P[1] = 1 * 3 * 4 = 12, and so on. Note: - Do not use division operation. - Aim for a solution with O(n) time complexity. # Input The input consists of a single test case formatted as follows: - n: the length of the array A (1 leq n leq 10^5) - A: the array of n integers (-100 leq A[i] leq 100) # Output Print the result array P. # Example Input ``` 4 1 2 3 4 ``` Output ``` 24 12 8 6 ``` Input ``` 5 2 3 4 5 6 ``` Output ``` 360 240 180 144 120 ```","solution":"def product_except_self(A): Given an array A of n integers, returns an array P where P[i] is the product of all elements of A except A[i], without using division and with O(n) time complexity. n = len(A) if n == 0: return [] # Create two lists for left and right products left_products = [1] * n right_products = [1] * n result = [1] * n # Fill the left products list (product of all elements to the left of i) for i in range(1, n): left_products[i] = left_products[i - 1] * A[i - 1] # Fill the right products list (product of all elements to the right of i) for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * A[i + 1] # Fill the result list by multiplying left and right product lists for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"A company is organizing an online coding competition with multiple stages. Each stage must be designed such that the contestants move from one stage to another progressively, and no contestant should visit the same stage twice. The stages form a directed acyclic graph (DAG) where an edge (u, v) indicates stage u must be completed before stage v. The company wants to assign the stages into levels so that each stage only depends on stages from the previous levels. The challenge is to determine the minimum number of levels required to assign all stages. Implement a function that determines the minimum number of levels required for the given list of stages and dependencies. # Input - The first input line contains an integer n (1 ≤ n ≤ 5000) — the number of stages. - The second line contains an integer m (0 ≤ m ≤ 10000) — the number of dependencies. - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — a dependency, meaning stage u must precede stage v. # Output - Print a single integer — the minimum number of levels required. # Examples Input 5 4 1 2 1 3 3 4 2 5 Output 3 Input 6 6 1 2 1 3 2 4 3 5 4 6 5 6 Output 4 # Notes In the first example, stage 1 can be assigned to level 1, stages 2 and 3 to level 2, and stages 4 and 5 to level 3. In the second example, stage 1 can be assigned to level 1, stages 2 and 3 to level 2, stages 4 and 5 to level 3, and stage 6 to level 4.","solution":"from collections import defaultdict, deque def minimum_levels(n, m, dependencies): Determines the minimum number of levels required for the given list of stages and dependencies. Parameters: n (int): The number of stages. m (int): The number of dependencies. dependencies (list of tuples): Dependencies where each tuple (u, v) means stage u must be completed before stage v. Returns: int: The minimum number of levels required. # Base case if n == 1: return 1 # Create adjacency list and in-degree dictionary adj_list = defaultdict(list) in_degree = {i: 0 for i in range(1, n + 1)} for u, v in dependencies: adj_list[u].append(v) in_degree[v] += 1 # Initialize queue with nodes that have in-degree 0 queue = deque([node for node in in_degree if in_degree[node] == 0]) levels = 0 while queue: levels += 1 for _ in range(len(queue)): node = queue.popleft() for neighbor in adj_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return levels"},{"question":"A company has a policy that employees must take breaks after working a certain number of consecutive hours to avoid fatigue. The policy states that after every 6 straight working hours, an employee must take a break of at least 1 hour. An employee\'s work schedule is provided as a sequence of either \'W\' (work hour) or \'B\' (break hour). Your task is to write a program that reads an employee\'s work schedule from the input, determines if the schedule follows the company\'s policy, and outputs \\"Valid\\" if the schedule is compliant or \\"Invalid\\" if it is not. Input The input consists of multiple datasets. The first line contains the number of datasets N (1 ≤ N ≤ 10). Each dataset consists of a single string: A string of characters \'W\' and \'B\', representing the work schedule. The length of the string will be between 1 and 1440. Output For each dataset, the output should be a single word: \\"Valid\\" if the schedule follows the company\'s policy and \\"Invalid\\" if it does not. Example Input 3 WWWWWWBBWWW WWWWWWWWWW WWBW Output Valid Invalid Valid","solution":"def check_schedule(schedule): Checks if the given work schedule is valid according to the company\'s policy. A schedule is valid if after every 6 consecutive work hours (\'W\'), there is at least 1 break hour (\'B\'). Args: - schedule (str): The work schedule as a string of \'W\' and \'B\'. Returns: - str: \\"Valid\\" if the schedule is compliant, \\"Invalid\\" otherwise. consecutive_work_hours = 0 for hour in schedule: if hour == \'W\': consecutive_work_hours += 1 if consecutive_work_hours > 6: return \\"Invalid\\" else: consecutive_work_hours = 0 return \\"Valid\\" def validate_schedules(n, schedules): Validates multiple work schedules. Args: - n (int): Number of schedules. - schedules (list of str): List of work schedule strings. Returns: - list of str: List of results (\\"Valid\\" or \\"Invalid\\") for each schedule. results = [] for schedule in schedules: results.append(check_schedule(schedule)) return results"},{"question":"Iris is a young artist who loves to draw intricate patterns using small shapes. Recently, she has become interested in creating patterns using only two types of characters: \'*\' and \'.\'. Her goal is to draw symmetric patterns that follow specific rules. For a given integer `N`, Iris will create an NxN grid (a square grid with N rows and N columns). The pattern must satisfy the following conditions: - The diagonal from the top-left corner to the bottom-right corner should be filled with \'*\'. - Every cell above this diagonal should contain \'.\'. - Every cell below this diagonal should also contain \'.\'. Write a program to generate such a pattern based on the provided integer `N`. Input Format: - An integer T, 1 ≤ T ≤ 10 (number of test cases). - For each test case: - An integer N, 1 ≤ N ≤ 1000 (side length of the grid). Output Format: - For each test case: - Print the NxN grid following the specified rules. - Separate each test case output with a blank line. SAMPLE INPUT 2 3 5 SAMPLE OUTPUT *.. .*. ..* *.... .*... ..*.. ...*. ....* (Note: Ensure each test case output is separated by a blank line and each row ends without any trailing spaces.)","solution":"def generate_pattern(n): Generates an NxN grid pattern with given rules: - \'*\' on the main diagonal - \'.\' everywhere else pattern = [] for i in range(n): row = [\'.\'] * n row[i] = \'*\' pattern.append(\'\'.join(row)) return pattern def iris_patterns(test_cases): Generates the patterns for each test case and returns them. results = [] for n in test_cases: pattern = generate_pattern(n) results.append(pattern) return results def format_patterns(results): Formats the list of patterns into the specified output format. formatted_result = [] for result in results: formatted_result.extend(result) formatted_result.append(\\"\\") # Add a blank line after each pattern return formatted_result"},{"question":"**Problem Statement: Path through the Grid** Alex is a software engineer who loves challenges. He recently encountered a problem that intrigued him deeply. Here is the problem that he is trying to solve: Given a rectangular grid with `m` rows and `n` columns, each cell of the grid either contains a `0` or a `1`. You start at the top-left corner of the grid and want to reach the bottom-right corner. However, you can only move to the right or downwards. A path from the top-left to the bottom-right corner is considered valid if you only move through cells containing a `1`. Your task is to find the number of valid paths from the top-left corner to the bottom-right corner of the grid. For example, if m = 3, n = 3, and the grid is: 1 1 0 1 1 0 0 1 1 There are 2 valid paths from the top-left to the bottom-right corner: Path 1: (0, 0) -> (1, 0) -> (1, 1) -> (2, 1) -> (2, 2) Path 2: (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2) Write a program that reads the grid and determines the number of valid paths from the top-left to the bottom-right corner. If no valid path exists, return 0. Input The first line contains two integers, `m` (1 ≤ m ≤ 1000) and `n` (1 ≤ n ≤ 1000) – the number of rows and columns in the grid. Each of the next `m` lines contains `n` integers (either `0` or `1`) representing the cells of the grid. Output Output a single integer: the number of valid paths from the top-left to the bottom-right corner. Examples Input 3 3 1 1 0 1 1 0 0 1 1 Output 2 Input 2 2 1 0 0 1 Output 0 Note In the first example, there are 2 valid paths: - (0, 0) -> (1, 0) -> (1, 1) -> (2, 1) -> (2, 2) - (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2) In the second example, there are no valid paths from the top-left to the bottom-right corner. This problem assesses your understanding of grid traversal algorithms, such as depth-first search (DFS) or dynamic programming approaches, while considering constraints on movement and cell values.","solution":"def count_paths(grid): This function returns the number of valid paths from the top-left to the bottom-right corner of a grid. m = len(grid) n = len(grid[0]) if grid[0][0] == 0 or grid[m-1][n-1] == 0: return 0 dp = [[0]*n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"A company hosts an annual hackathon, and they want to monitor the performance of the teams in each challenge. There are two types of challenges: solo and team. In a solo challenge, an individual participant can try to solve the challenge, whereas in a team challenge, a group of up to K participants can collaborate on the challenge. Each challenge has a score associated with it, and the total score for each team (or individual) is the sum of the scores of the challenges they participated in. If a participant takes part in a team challenge, the points are added to the total score of all team members who participated. Given information about the challenges and the number of participants, calculate the total score for each participant. Constraints * All values in input are integers. * 1 leq N leq 10^5 (number of participants) * 1 leq M leq 10^5 (number of challenges) * 1 leq K leq N (maximum number of participants in a team challenge) * 1 leq score_i leq 10^4 Input The first line contains three integers N, M, and K. The following M lines each describe a challenge in the format: \\"type score [p1 p2 ... pk]\\" - Where: * type is either 1 (solo challenge) or 2 (team challenge). * score is the score of the challenge. * p1, p2, ... pk are the participant indices (1-based) who participated in the challenge (only for team challenges). Output Print N space-separated integers where the i-th integer represents the total score of the i-th participant. Examples Input 4 5 2 1 100 1 2 200 1 2 1 50 2 2 150 3 4 2 100 1 3 Output 400 250 250 150 Input 3 3 2 2 100 1 2 1 50 2 2 200 1 3 Output 300 150 200","solution":"def calculate_scores(N, M, K, challenges): scores = [0] * N for challenge in challenges: parts = challenge.split() if parts[0] == \'1\': # solo challenge score = int(parts[1]) participant = int(parts[2]) - 1 scores[participant] += score elif parts[0] == \'2\': # team challenge score = int(parts[1]) participants = list(map(int, parts[2:])) for participant in participants: scores[participant - 1] += score return scores"},{"question":"John is attempting to implement a new security system in his home that requires passing through a series of doors to reach different rooms. Each door has an electronic lock that can only be unlocked by providing a specific key code. The challenge is to determine the shortest sequence of key codes that will unlock all doors and allow entry into all rooms from a starting room. The house layout is represented as a network of rooms and doors. Each door connects two rooms directly. The key code to unlock each door is unique, and you need to determine the minimum set of key codes required to traverse from the start room to a target room while visiting all rooms at least once. Input The input consists of multiple datasets, each in the following format. n m a1 b1 k1 a2 b2 k2 . . . am bm km Every input item in a dataset is a non-negative integer. Input items in a line are separated by a space. n is the number of rooms in the house (numbered 1 through n). m is the number of (one-way) doors. You can assume 2 ≤ n ≤ 50 and 0 ≤ m ≤ n(n−1). ai and bi represent rooms connected by the i-th door and ki is the key code required to unlock the door between ai and bi. You can assume 1 ≤ ai, bi ≤ n, and 1 ≤ ki ≤ 1000. Each key code and door combination is unique and there can be no two doors connecting the same pair of rooms in the same direction. The last dataset is followed by a line containing two zeros (separated by a space). Output For each dataset, print a single line containing the minimum number of unique key codes required to visit all rooms from room 1 to room n. If it is not possible to visit all rooms, print \\"-1\\". Example Input 4 4 1 2 101 2 3 102 3 4 103 4 2 104 4 3 1 2 201 2 3 202 3 1 203 0 0 Output 3 -1","solution":"def minimum_key_codes_to_visit_all_rooms(n, m, edges): from collections import defaultdict, deque import heapq if n == 0 or m == 0: return -1 # Building the graph graph = defaultdict(list) for a, b, k in edges: graph[a].append((b, k)) # Minimum Priority Queue to perform Dijkstra\'s algorithm pq = [(0, 1)] # (keys used, current room) visited = set() while pq: keys_used, current_room = heapq.heappop(pq) if current_room in visited: continue visited.add(current_room) if len(visited) == n: return keys_used for neighbor, key in graph[current_room]: if neighbor not in visited: heapq.heappush(pq, (keys_used + 1, neighbor)) return -1 def process_input(input_data): input_lines = input_data.strip().split(\'n\') indices = 0 results = [] while indices < len(input_lines): n, m = map(int, input_lines[indices].split()) if n == 0 and m == 0: break indices += 1 edges = [] for _ in range(m): a, b, k = map(int, input_lines[indices].split()) edges.append((a, b, k)) indices += 1 results.append(minimum_key_codes_to_visit_all_rooms(n, m, edges)) return results"},{"question":"The city of Byteburg has a river that flows along its center, splitting the city into two parts. Recently, the mayor proposed building a series of bridges to connect the two parts more effectively. Each bridge can be represented by two endpoints: one on the left bank and the other on the right bank. A bridge i\'s left endpoint is at x_i, and its right endpoint is at y_i. We want to count valid sets of bridges which do not cross each other. Two bridges (x₁, y₁) and (x₂, y₂) cross if and only if either (x₁ < x₂ and y₁ > y₂) or (x₁ > x₂ and y₁ < y₂). Help the city by determining the maximum number of bridges that can be built such that none of them cross each other. Input The first line contains an integer N (1 ≤ N ≤ 100,000), the number of proposed bridges. The next N lines each contain two integers x_i and y_i (0 ≤ x_i, y_i ≤ 1,000,000), representing the endpoints of each bridge. Output Output the maximum number of non-crossing bridges that can be built. Example Input 4 1 3 2 4 3 1 4 2 Output 2 Note For the given example, the bridges (1,3) and (2,4) can be built together since they do not cross each other. Similarly, (3,1) and (4,2) can also be built together without crossing. Hence, the maximum number of non-crossing bridges is 2.","solution":"def max_non_crossing_bridges(n, bridges): Given the number of bridges and their endpoints, returns the maximum number of non-crossing bridges that can be built. Parameters: n (int): Number of bridges bridges (list of tuples): List of tuples where each tuple contains two integers representing endpoints of a bridge Returns: int: Maximum number of non-crossing bridges # Sort the bridges based on the left endpoints first and then right endpoints bridges.sort(key=lambda x: (x[0], x[1])) # Extract the right endpoints to find the longest increasing subsequence (LIS) right_endpoints = [y for _, y in bridges] # Function to find the length of LIS using binary search def length_of_LIS(seq): from bisect import bisect_left lis = [] for elem in seq: pos = bisect_left(lis, elem) if pos == len(lis): lis.append(elem) else: lis[pos] = elem return len(lis) # Calculate the length of LIS from right endpoints, which gives the maximum non-crossing bridges return length_of_LIS(right_endpoints)"},{"question":"You are given a sequence of integers, and your task is to find the length of the longest subsequence that contains only even numbers, where the subsequence is continuous in the original sequence. If no even numbers are present, print `-1`. Constraints * 1 ≤ Length of sequence ≤ 1000 * 1 ≤ Each integer in the sequence ≤ 1000 Input The input is given in the following format: ``` N a1 a2 a3 ... aN ``` Where `N` is the length of the sequence, followed by `N` integers representing the sequence. Output Output a single integer representing the length of the longest continuous subsequence containing only even numbers. If no even numbers are present, output `-1`. Examples Input ``` 8 1 2 4 6 8 3 5 7 ``` Output ``` 4 ``` Input ``` 5 5 3 9 1 7 ``` Output ``` -1 ``` Input ``` 6 2 4 6 8 10 12 ``` Output ``` 6 ```","solution":"def longest_even_subsequence_length(sequence): Returns the length of the longest continuous subsequence containing only even numbers. If no even numbers are present, returns -1. max_length = 0 current_length = 0 for num in sequence: if num % 2 == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length if max_length > 0 else -1"},{"question":"You are given a list of N sequences, where each sequence is a collection of strings. Each sequence represents a set of items sold on a particular day in a store. The store manager is interested in understanding the frequency of each unique item being sold across all sequences. The task is to find out which item has the highest frequency and determine how many times it was sold. If multiple items have the same highest frequency, return the lexicographically smallest item. Input The first line contains an integer N (1 ≤ N ≤ 1000) — the number of sequences. Each of the next N lines contains an integer Mi (1 ≤ Mi ≤ 100) followed by Mi strings. Each string is a name of an item sold, and it is guaranteed to have a length of at most 20 characters and contain only lowercase English letters. Output Print the item that has the highest frequency and the number of times it was sold. If multiple items have the same highest frequency, print the lexicographically smallest item. Examples Input 3 3 apple banana apple 2 banana apple 4 orange banana apple orange Output apple 4 Input 2 3 milk milk milk 3 bread bread bread Output bread 3","solution":"def most_frequent_item(n, sequences): from collections import defaultdict item_freq = defaultdict(int) for sequence in sequences: items = sequence.split()[1:] for item in items: item_freq[item] += 1 max_freq = -1 result_item = \\"\\" for item, freq in item_freq.items(): if freq > max_freq or (freq == max_freq and item < result_item): max_freq = freq result_item = item return result_item, max_freq"},{"question":"You are organizing a marathon and want to keep track of the top performers. Your task is to write a program to determine the maximum number of participants who can be classified as top performers, based on their finishing times. A top performer is defined as a participant whose finishing time is better than all previous participants when arranged in the order they crossed the finish line. Input The input is given in the following format: n t1 t2 t3 ... tn where the first integer n (1 ≤ n ≤ 1000) represents the number of participants, followed by n integers representing their finishing times in seconds (ti, 1 ≤ ti ≤ 10000) in the order they crossed the finish line. Output Output a single line with the number of top performers. Examples Input 5 300 250 270 260 240 Output 3 Input 6 1000 800 900 600 700 500 Output 4 Input 4 450 460 470 480 Output 1","solution":"def count_top_performers(n, times): Returns the number of top performers based on their finishing times. A top performer is defined as a participant whose finishing time is better than all previous participants. :param n: Number of participants :type n: int :param times: List of finishing times :type times: List[int] :return: Number of top performers :rtype: int if n == 0: return 0 top_performers = 1 # The first participant is always a top performer min_time_so_far = times[0] for i in range(1, n): if times[i] < min_time_so_far: top_performers += 1 min_time_so_far = times[i] return top_performers"},{"question":"Celine is a software engineer who works as a contractor in a dynamic tech company. Every day she logs the working hours she spends on various projects. Celine wants to analyze the time she has spent on these projects to ensure she\'s balancing her workload appropriately. Celine keeps a log of N (1 ≤ N ≤ 1,000) projects where she records the total hours spent on each project in a list. Each project can have a variability in hours worked from day to day. For some projects, she has worked a consistent number of hours while others show a high variation. Celine wants to categorically group these projects into two categories: * Consistent: If the standard deviation of hours spent on a project is less than or equal to 2.0 hours. * Variable: If the standard deviation of hours spent on a project is greater than 2.0 hours. Given a dataset containing N projects, where each project\'s record consists of a list of M (1 ≤ M ≤ 365) numbers indicating the hours worked over several days, can you help Celine determine the category of each project? Input The first line of input consists of the integer N (1 ≤ N ≤ 1,000), the number of projects. For each project, there is a line containing M (1 ≤ M ≤ 365) integers, each representing the hours worked on that project in a single day. Output Output one line per project, in the same order as provided in the input. Each line should state consistent if the project is categorized as consistent or variable if the project is categorized as variable. Example Input 3 8 8 8 8 8 6 7 5 6 7 8 5 10 15 20 25 10 15 20 25 10 15 Output consistent consistent variable Explanation In the example: - Project 1 has zero standard deviation, making it consistent. - Project 2 has a variation within the range leading to a standard deviation below 2.0, marking it consistent. - Project 3 shows a high variability, leading to a standard deviation above 2.0, marking it variable.","solution":"import numpy as np def categorize_projects(N, projects): Categorize projects based on the standard deviation of hours worked. Parameters: N (int): Number of projects projects (list of list of int): List of project hours worked over several days Returns: list of str: Category of each project, either \\"consistent\\" or \\"variable\\" categories = [] for project in projects: std_dev = np.std(project) if std_dev <= 2.0: categories.append(\\"consistent\\") else: categories.append(\\"variable\\") return categories"},{"question":"A company is planning to migrate its data to a new database system. To ensure the migration process is smooth, they need to transform their data into a specific format required by the new system. The data consists of records of employees, each having a unique employee ID, a name, a department, and a salary. You need to write a program that processes the input data and transforms it into the desired format. Specifically, the output should be a summary of the total salary per department, and the department names should be in alphabetical order. Input: The first line contains an integer n (1 ≤ n ≤ 100) — the number of employees. The next n lines each contain an employee record in the following format: \\"employee_id name department salary\\", where: - employee_id is a unique integer (1 ≤ employee_id ≤ 1000), - name is a string containing only uppercase and lowercase letters (1 ≤ length(name) ≤ 50), - department is a string containing only uppercase and lowercase letters (1 ≤ length(department) ≤ 50), - salary is an integer (1 ≤ salary ≤ 100000). Output: Print the departments in alphabetical order along with the total salary for each department. Each line should contain the department name and the total salary separated by a space. Examples: Input: 3 1 Alice HR 5000 2 Bob IT 7000 3 Charlie HR 6000 Output: HR 11000 IT 7000 Input: 5 1 Alice Finance 6000 2 Bob HR 7000 3 Charlie IT 8000 4 David IT 9000 5 Eve Finance 6500 Output: Finance 12500 HR 7000 IT 17000","solution":"def transform_data(n, records): Transforms input data into the desired format of total salary per department. Parameters: n (int): Number of employee records. records (list): List of strings where each string is an employee record. Returns: list: A sorted list of tuples where each tuple contains a department name and total salary. department_salary = {} for record in records: _, name, department, salary = record.split() salary = int(salary) if department in department_salary: department_salary[department] += salary else: department_salary[department] = salary sorted_departments = sorted(department_salary.items()) return sorted_departments def print_department_salaries(sorted_departments): Prints the department names and their total salaries in the required format. Parameters: sorted_departments (list): Sorted list of tuples (department, total_salary). for department, salary in sorted_departments: print(f\\"{department} {salary}\\") # Example usage: n = 3 records = [ \\"1 Alice HR 5000\\", \\"2 Bob IT 7000\\", \\"3 Charlie HR 6000\\" ] sorted_departments = transform_data(n, records) print_department_salaries(sorted_departments)"},{"question":"You are given an array of `n` elements, which are all integers. The operation that you can perform on the array is to pick any subarray and multiply all of its elements by `-1`. Your goal is to maximize the sum of the elements in the array after performing the operation at most once. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. - The second line contains `n` integers `a1, a2, ..., an` (−10^4 ≤ ai ≤ 10^4) — the elements of the array. # Output - Print a single integer — the maximum sum of the elements of the array after performing the operation at most once. # Examples Example 1 Input ``` 5 1 -2 3 -4 5 ``` Output ``` 15 ``` Example 2 Input ``` 3 -1 -2 -3 ``` Output ``` 6 ``` # Explanation Example 1 In the first example, one optimal way is to pick the subarray [-2, 3, -4] and multiply all its elements by -1, resulting in [1, 2, -3, 4, 5]. The sum is 1 + 2 - 3 + 4 + 5 = 9. However, if the entire array is taken, [1, -2, 3, -4, 5] * -1 we get [-1, 2, -3, 4, -5]. The sum of array now is 5+(−4)+(3)+(−2)+(1)=3. Hence, [-1, 2, 4, -3, 5] or specifically only subarray [-3] gives the maximum sum 15. Example 2 In the second example, flipping the whole array [-1, -2, -3] to [1, 2, 3] yields the maximum sum which is 6.","solution":"def maximum_sum_after_one_flip(n, array): This function returns the maximum sum of the elements of the array after performing the operation of flipping the sign of one subarray at most once. :param n: An integer, the number of elements in the array :param array: A list of integers reflecting the elements of the array :return: An integer, the maximum sum # Initial total sum of the array total_sum = sum(array) # Maximum subarray sum using Kadane\'s algorithm max_subarray_sum = float(\'-inf\') # Current subarray sum when flipping current_sum = 0 for value in array: current_sum += value if current_sum > max_subarray_sum: max_subarray_sum = current_sum if current_sum < 0: current_sum = 0 # Compute the effect of flipping subarray inverted_total_sum = total_sum for i in range(n): current_inverted_sum = -2 * array[i] if current_inverted_sum > 0: inverted_total_sum += current_inverted_sum return max(total_sum, inverted_total_sum)"},{"question":"You are tasked with developing a software application that can handle automotive diagnostics. The objective of the program is to diagnose a car based on multiple sensors and return the possible faults. The car has a standardized set of sensors, each providing a numerical readout. Here\'s how the diagnostics should be performed: 1. Each sensor outputs a value which indicates the status of a specific aspect of the car. 2. There’s a predefined threshold for each sensor indicating the range within which the car is considered to be functioning normally. The task is to determine the number of sensors that are reporting values outside their normal range for each car diagnostic report. Input: The input starts with an integer N indicating the number of diagnostic reports. Each diagnostic report contains data from M sensors. The following input lines provide the normal range thresholds and sensor readouts using the format defined below: N M sensor1_min sensor1_max sensor2_min sensor2_max ... sensorM_min sensorM_max sensor1_value1 sensor2_value1 ... sensorM_value1 sensor1_value2 sensor2_value2 ... sensorM_value2 ... sensor1_valueN sensor2_valueN ... sensorM_valueN Where: - `N` is the number of diagnostic reports. - `M` is the number of sensors. - `sensorX_min` and `sensorX_max` are the minimum and maximum thresholds, respectively, for the `X-th` sensor indicating normal operation. - `sensorX_valueY` is the value obtained from the `X-th` sensor on the `Y-th` diagnostic report. Output: The output should be N lines. Each line containing a single integer, which is the number of sensors that are outside the normal range for the corresponding diagnostic report. Example Input: 2 3 0 100 50 150 100 200 110 60 180 90 130 220 Output: 1 1","solution":"def diagnose_car(N, M, thresholds, reports): Determines the number of sensors that are reporting values outside their normal range for each diagnostic report. Args: N (int): Number of diagnostic reports. M (int): Number of sensors. thresholds (list): A list of tuples, each containing the min and max threshold for a sensor. reports (list): A list of list, where each sublist contains the sensor values for a diagnostic report. Returns: list: A list of integers, each representing the number of sensors outside their normal range for each diagnostic report. results = [] for report in reports: count = 0 for i in range(M): sensor_value = report[i] sensor_min, sensor_max = thresholds[i] if sensor_value < sensor_min or sensor_value > sensor_max: count += 1 results.append(count) return results def parse_input(input_data): lines = input_data.split(\\"n\\") N, M = map(int, lines[0].split()) thresholds = [] threshold_values = lines[1].split() for i in range(M): sensor_min = int(threshold_values[i*2]) sensor_max = int(threshold_values[i*2+1]) thresholds.append((sensor_min, sensor_max)) reports = [] for i in range(2, 2 + N): report_values = list(map(int, lines[i].split())) reports.append(report_values) return N, M, thresholds, reports"},{"question":"Balanced Substring Problem Statement Given a string `s` consisting of only the characters \'A\' and \'B\', determine the length of the longest substring that contains an equal number of \'A\'s and \'B\'s. Input The input consists of: A single line containing the string `s` (1 ≤ |s| ≤ 10^5). Output Output a single integer denoting the length of the longest balanced substring. Example Input 1 AABBAB Example Output 1 6 Example Input 2 AAABB Example Output 2 4 Example Input 3 AAAA Example Output 3 0 Explanation In the first example, the entire string \\"AABBAB\\" contains an equal number of \'A\'s and \'B\'s, so the output is 6. In the second example, the substring \\"AABB\\" is the longest substring containing an equal number of \'A\'s and \'B\'s, so the output is 4. In the third example, there is no substring that contains an equal number of \'A\'s and \'B\'s, so the output is 0. Constraints - `1 ≤ |s| ≤ 10^5` - `s` consists only of characters \'A\' and \'B\'.","solution":"def longest_balanced_substring(s): Returns the length of the longest balanced substring containing an equal number of \'A\'s and \'B\'s. count_map = {0: -1} max_length = 0 count = 0 for i, char in enumerate(s): if char == \'A\': count += 1 else: count -= 1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"The biologist working on a genomic sequence research project needs a program to identify the longest common subsequence (LCS) of substrings within DNA sequences. DNA sequences consist of the characters \'A\', \'C\', \'G\', and \'T\'. The LCS is the longest sequence that can be derived from both of the original sequences by removing some (or none) of the characters without changing the order of the remaining characters. Write a program to find the LCS of two DNA sequences. If there are multiple LCS with the same length, output any of them. Input The input consists of multiple datasets. Each dataset contains two lines: line 1: a DNA sequence composed of \'A\', \'C\', \'G\', and \'T\' only (length up to 1000) line 2: a DNA sequence composed of \'A\', \'C\', \'G\', and \'T\' only (length up to 1000) The end of the input is indicated by a line containing a single \'#\'. Output For each dataset, the program should output the longest common subsequence. If there are multiple LCS with the same length, output any of them. Print each LCS on a new line. Example Input ACCGGTCGAGTGCGCGGAAGCCGGCCGAA GTCGTTCGGAATGCCGTTGCTCTGTAAA AGGTAB GXTXAYB # Output GTCGTCGGAAGCCGGCCGAA GTAB","solution":"def lcs(X, Y): Returns the longest common subsequence of X and Y. m = len(X) n = len(Y) # Create a table to store lengths of longest common subsequence. L = [[None] * (n + 1) for i in range(m + 1)] # Build the L table in bottom-up fashion. for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i-1] == Y[j-1]: L[i][j] = L[i-1][j-1] + 1 else: L[i][j] = max(L[i-1][j], L[i][j-1]) # Create a variable to store the LCS string. lcs_str = [] # Start from the right-most-bottom-most corner and # one by one store characters in lcs_str. i = m j = n while i > 0 and j > 0: # If current character in X and Y are same, then # current character is part of LCS. if X[i-1] == Y[j-1]: lcs_str.append(X[i-1]) i -= 1 j -= 1 # If not same, find the larger of two and # go in the direction of larger value. elif L[i-1][j] > L[i][j-1]: i -= 1 else: j -= 1 # We traverse the string from the end, so reverse it. lcs_str.reverse() return \'\'.join(lcs_str) def process_input(input_lines): results = [] i = 0 while i < len(input_lines): line1 = input_lines[i].strip() if line1 == \'#\': break line2 = input_lines[i+1].strip() results.append(lcs(line1, line2)) i += 3 # Move to the next pair of input lines. return results"},{"question":"Given a string, return the length of the longest substring without repeating characters. Example Input abcabcbb Output 3 Note: - \\"abc\\" is the longest substring without repeating characters with a length of 3.","solution":"def length_of_longest_substring(s): Given a string, returns the length of the longest substring without repeating characters. char_index_map = {} longest_substring_length = 0 start_index = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start_index: start_index = char_index_map[char] + 1 char_index_map[char] = index longest_substring_length = max(longest_substring_length, index - start_index + 1) return longest_substring_length"},{"question":"A delivery robot is tasked with delivering packages within a building that consists of n rooms, numbered from 0 to n-1. Some of the rooms are connected by unidirectional hallways. The robot starts in room 0 and needs to determine the minimum number of rooms it must pass to deliver packages to all accessible rooms from room 0. If a room cannot be accessed from room 0, it should be ignored. The building\'s blueprint is provided as a list of m hallways, where each hallway is described by two integers: u and v, indicating a one-way hallway from room u to room v. Write a program that calculates the total minimum number of rooms the robot must visit to deliver all packages to accessible rooms. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^4) — the number of rooms and the number of hallways in the building respectively. The next m lines each contain two integers u and v (0 ≤ u, v < n) indicating a one-way hallway from room u to room v. Output Print a single integer — the minimum number of rooms the robot must visit to deliver all packages to accessible rooms from room 0. Examples Input 6 6 0 1 1 2 2 3 3 4 4 5 1 3 Output 5 Input 4 2 0 1 2 3 Output 2 Note For the first example: Room 0 is connected to room 1. Room 1 is connected to room 2 and room 3. Room 2 is connected to room 3 as well. Room 3 is connected to room 4. Room 4 is connected to room 5. The robot can deliver packages to rooms: 0, 1, 2, 3, 4 by taking the paths: 0->1->2 (3 rooms) or 0->1->3 (2 rooms) Rooms 0, 1, and 3 will be visited directly. In the second example: Room 0 is connected to room 1. Room 2 is connected to room 3, and rooms 2 and 3 cannot be reached from room 0. The robot visits 2 rooms directly.","solution":"from collections import deque, defaultdict def min_rooms_to_visit(n, m, hallways): graph = defaultdict(list) for u, v in hallways: graph[u].append(v) visited = [False] * n queue = deque([0]) visited[0] = True visited_rooms = 1 while queue: room = queue.popleft() for next_room in graph[room]: if not visited[next_room]: visited[next_room] = True visited_rooms += 1 queue.append(next_room) return visited_rooms"},{"question":"Alice loves arranging blocks in certain patterns. She has an unlimited number of blocks available, each marked with an integer. Alice particularly likes arranging blocks such that the sequence of integers forms an arithmetic progression. Given an integer n, Alice wants to use exactly n blocks to form the longest possible arithmetic progression. An arithmetic progression is a sequence of numbers such that the difference between consecutive terms is constant. Your task is to determine the length of the longest arithmetic progression that Alice can create using exactly n blocks, where each block can contain any integer. Input The input consists of a single integer n. Output Print the length of the longest arithmetic progression that can be formed using exactly n blocks. Examples Input 1 Output 1 Input 2 Output 2 Input 10 Output 10 Input 25 Output 25 Note In the first example, with n=1 block, the longest arithmetic progression has a length of 1 (since any single block itself is an arithmetic progression). In the second example, with n=2 blocks, the longest arithmetic progression has a length of 2 (any two numbers can be used, and they will form an arithmetic progression with themselves). In the third example, with n=10 blocks, the longest arithmetic progression has a length of 10 (you can arrange the blocks to form an arithmetic progression such as 1, 2, 3, ..., 10). In the fourth example, with n=25 blocks, the longest arithmetic progression has a length of 25.","solution":"def longest_arithmetic_progression_length(n): Returns the length of the longest arithmetic progression that can be formed using exactly n blocks. return n"},{"question":"Polycarpus has a rectangular piece of land of size n × m, where k trees are already planted. Polycarpus wants to create a botanical garden by enclosing some rectangular areas of the land. Each enclosed area must contain at least one tree, and the specific requirements for each enclosed area are provided. For each specified area, help Polycarpus determine whether it contains at least one tree. Input The first line contains four integers n, m, k, and q (1 ≤ n, m ≤ 100 000, 1 ≤ k, q ≤ 200 000) — the dimensions of the land, the number of planted trees, and the number of areas Polycarpus wants to enclose respectively. Each of the next k lines contain pairs of integers \\"x y\\", describing the positions of the trees (1 ≤ x ≤ n, 1 ≤ y ≤ m). It is guaranteed that all the trees are in distinct squares. Each of the next q lines describe the areas to be enclosed as four integers \\"x1 y1 x2 y2\\" (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m). The corresponding rectangle area consists of cells (x, y), for which x1 ≤ x ≤ x2, y1 ≤ y ≤ y2. Output Print q lines. For each area to be enclosed, print \\"YES\\" if it contains at least one tree and \\"NO\\" otherwise. Examples Input 5 5 3 4 1 1 3 3 4 4 1 1 2 2 2 2 3 3 4 3 5 5 1 2 5 2 Output YES YES YES NO Note The first area (1,1) to (2,2) contains the tree at (1,1). The second area (2,2) to (3,3) contains the tree at (3,3). The third area (4,3) to (5,5) contains the tree at (4,4). The fourth area (1,2) to (5,2) contains no trees.","solution":"def check_trees(n, m, k, q, trees, queries): Determines if each query rectangle contains at least one tree. :param n: Number of rows in the land :param m: Number of columns in the land :param k: Number of trees :param q: Number of queries :param trees: List of tuples containing the positions of the trees :param queries: List of tuples containing the query rectangles :return: List of strings \\"YES\\" or \\"NO\\" for each query # Create a set for quick lookup of trees tree_set = set((x, y) for x, y in trees) results = [] for (x1, y1, x2, y2) in queries: contains_tree = False for x in range(x1, x2 + 1): for y in range(y1, y2 + 1): if (x, y) in tree_set: contains_tree = True break if contains_tree: break results.append(\\"YES\\" if contains_tree else \\"NO\\") return results"},{"question":"Write a function, `validParentheses`, that determines if a string consisting solely of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is a valid string. The string is considered valid if the following conditions are satisfied: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. The function should return `True` if the input string is valid, and `False` otherwise. Constraints: - The input string length does not exceed 1000 characters. SAMPLE INPUT \\"()\\" \\"()[]{}\\" \\"(]\\" SAMPLE OUTPUT True True False Explanation *Test Case 1:* The string contains one set of valid parentheses: `()`. *Test Case 2:* The string consists of three sets of valid parentheses: `()`, `[]`, and `{}`. *Test Case 3:* The string contains mismatched parentheses: `(` and `]` are not correctly paired.","solution":"def validParentheses(s): Determines if the input string of parentheses is valid. :param s: string consisting of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' :return: True if the string is valid, otherwise False stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"You are given an array of n integers a_1, a_2, ..., a_n and an integer k. You are allowed to perform at most k operations on the array. In one operation, you can choose any two indices i and j (1 ≤ i, j ≤ n) such that i ≠ j and set either a_i := a_i - a_j or a_j := a_j - a_i. Your goal is to make all the elements of the array equal by performing at most k operations, or determine if it\'s impossible. Input The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100) — the number of elements in the array and the maximum number of operations allowed. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print \\"YES\\" if it\'s possible to make all elements of the array equal using at most k operations. Otherwise, print \\"NO\\". Examples Input 4 3 3 9 6 12 Output YES Input 5 2 1 4 6 8 10 Output NO","solution":"from math import gcd from functools import reduce def can_make_equal_with_k_operations(n, k, arr): if n == 1: return \\"YES\\" # Compute the GCD of the array array_gcd = reduce(gcd, arr) # Reduce all elements by the GCD normalized_arr = [x // array_gcd for x in arr] # Find how many unique values are left unique_values = len(set(normalized_arr)) # If unique values count exceeds k+1, it\'s impossible if unique_values > k + 1: return \\"NO\\" return \\"YES\\""},{"question":"In a small town, there\'s an annual festival where the residents build a giant tower using identical blocks. Each block is a perfect cube with a side length of 1 meter. The organizers want the tower to be a pyramid-like structure where each upper level has fewer blocks than the level below it. Specifically, if the bottom level has k^2 blocks arranged in a k x k square, the level above it should have (k-1)^2 blocks, and so on, until the topmost level which has 1 block (a 1x1 square). Your task is to calculate the number of blocks needed to build a tower with height h. Given the height, determine the total number of blocks required to construct the pyramid-like tower. Input The input consists of a single integer h (1 ≤ h ≤ 10^5) — the height of the tower. Output Print a single integer — the total number of blocks needed to build the tower. Examples Input 3 Output 14 Input 5 Output 55","solution":"def total_blocks_for_tower(h): Calculate the total number of blocks required to build a pyramid-like tower of height h. total_blocks = 0 for level in range(1, h + 1): total_blocks += level ** 2 return total_blocks"},{"question":"A chef is preparing a multi-course meal. He has a list of N ingredients, numbered from 1 to N. Each ingredient can only be used once, and the chef has developed a particular fondness for certain pairs of ingredients that go together excellently. Write a program to find the longest sequence (course) of ingredients such that: 1. Each ingredient in the sequence is a pair with the next ingredient in the sequence. 2. The sequence does not repeat any ingredient. Constraints * 2 leq N leq 100 * 1 leq M leq 1000 * Each pair (A, B) is given once, and A != B. Input The input is given from Standard Input in the following format: N M A1 B1 A2 B2 ... AM BM Where: - N is the number of ingredients. - M is the number of excellent pairs. - Ai and Bi are the pairs of ingredients that go together excellently. Output Print the length of the longest sequence of ingredients that the chef can prepare. If no sequence exists, print `-1`. Examples Input 5 6 1 2 2 3 3 4 4 5 2 5 5 1 Output 4 Explanation One of the longest valid sequences is 1 -> 2 -> 5 -> 4. The chef can\'t use ingredient 1 again. Input 4 2 1 2 3 4 Output 2 Explanation The chef can only create sequences of length 2, such as 1 -> 2 or 3 -> 4.","solution":"from collections import defaultdict, deque def longest_course_sequence(n, m, pairs): graph = defaultdict(list) # Build an adjacency list for pair in pairs: a, b = pair graph[a].append(b) graph[b].append(a) # BFS to find the longest path def bfs(start): visited = set() queue = deque([(start, 1)]) max_length = 1 while queue: node, length = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append((neighbor, length + 1)) max_length = max(max_length, length + 1) return max_length # For each ingredient, try to find the longest sequence starting from there longest_seq = 1 for ingredient in range(1, n + 1): longest_seq = max(longest_seq, bfs(ingredient)) # If no valid sequence is found, return -1 return longest_seq if longest_seq > 1 else -1 # Example usage n = 5 m = 6 pairs = [(1, 2), (2, 3), (3, 4), (4, 5), (2, 5), (5, 1)] print(longest_course_sequence(n, m, pairs)) # Output: 4"},{"question":"An online bookstore keeps track of its inventory using a system that records the title, author, genre, and number of copies available for each book. Sometimes, the management needs to generate reports based on various criteria. Your task is to create a program that handles different types of queries to generate these reports. You are given a list of books and a list of queries. Each query asks for specific information about the books that match certain criteria, and you need to provide the appropriate output. Input The input consists of several datasets. Each dataset is given in the following format: b q t1 a1 g1 c1 t2 a2 g2 c2 ... tb ab gb cb Q1 Q2 ... Qq The first line contains two integers b and q. b indicates the number of books and q indicates the number of queries. The next b lines each contain a book\'s title (ti), author (ai), genre (gi), and the number of copies available (ci). Titles, authors, and genres are strings without spaces, and ci is an integer. The following q lines each contain a query in one of the following formats: - `title ti`: Find all books with title ti. - `author ai`: Find all books by author ai. - `genre gi`: Find all books in genre gi. - `count k`: Find all books with at least k copies available. For `title`, `author`, and `genre` queries, list the books in the following format: - `ti ai gi ci` For `count` queries, list the books in descending order of available copies. If two books have the same number of copies, list them in the order they appeared in the input. Output For each query, print the results in the required format. If no books match the criteria, print \\"No results found\\". When both b and q are 0, it indicates the end of input. Example Input 4 3 Book1 Author1 Fiction 10 Book2 Author2 Non-fiction 5 Book3 Author1 Fiction 2 Book4 Author3 Fantasy 7 title Book1 author Author1 count 5 4 4 TitleA AuthorA Sci-fi 8 TitleB AuthorB Mystery 3 TitleC AuthorA Sci-fi 9 TitleD AuthorC Romance 6 genre Sci-fi count 7 title TitleB author AuthorD 0 0 Output Book1 Author1 Fiction 10 Book1 Author1 Fiction 10 Book3 Author1 Fiction 2 Book1 Author1 Fiction 10 Book4 Author3 Fantasy 7 TitleC AuthorA Sci-fi 9 TitleA AuthorA Sci-fi 8 Book2 Author2 Non-fiction 5 TitleC AuthorA Sci-fi 9 TitleA AuthorA Sci-fi 8 TitleB AuthorB Mystery 3 No results found","solution":"def bookstore_reports(books, queries): This function processes a list of books and a list of queries and returns the results of the queries. Parameters: books (list of tuples): List of books with each book detail as a tuple (title, author, genre, copies). queries (list of strings): List of queries to process. Returns: list of lists: Results for each query as a list of strings. results = [] for query in queries: parts = query.split() if parts[0] == \'title\': title = parts[1] result = [ f\\"{book[0]} {book[1]} {book[2]} {book[3]}\\" for book in books if book[0] == title ] elif parts[0] == \'author\': author = parts[1] result = [ f\\"{book[0]} {book[1]} {book[2]} {book[3]}\\" for book in books if book[1] == author ] elif parts[0] == \'genre\': genre = parts[1] result = [ f\\"{book[0]} {book[1]} {book[2]} {book[3]}\\" for book in books if book[2] == genre ] elif parts[0] == \'count\': count = int(parts[1]) result = [ f\\"{book[0]} {book[1]} {book[2]} {book[3]}\\" for book in books if book[3] >= count ] result.sort(key=lambda x: int(x.split()[3]), reverse=True) if not result: result = [\\"No results found\\"] results.append(result) return results"},{"question":"You are overseeing a distribution of supplies to various villages. Each village has a specific demand for supplies, and there are trucks available to deliver those supplies. Each truck has a capacity and can be loaded with supplies to be delivered to a single village. You are tasked with determining the minimum number of trucks required to meet the demands of each village under certain constraints. Given there are `m` villages, each with demand `d[i]` (1 ≤ i ≤ m), and there are `n` trucks, each with capacity `c[j]` (1 ≤ j ≤ n), determine the minimum number of trucks needed to deliver supplies such that the demands of all villages are met. Note the following constraints: 1. Each truck can only deliver supplies to one village. 2. Each truck can be used only once. 3. The order in which trucks are assigned to villages does not matter. If it is impossible to meet the demands of all villages with the given trucks, return -1. Input - The first line includes an integer `t` (1 ≤ t ≤ 100) representing the number of test cases. - For each test case: - The first line includes two integers `m` and `n` (1 ≤ m, n ≤ 200,000), representing the number of villages and trucks respectively. - The second line contains `m` integers representing the demand of each village `d[i]` (1 ≤ d[i] ≤ 1,000,000,000). - The third line contains `n` integers representing the capacity of each truck `c[j]` (1 ≤ c[j] ≤ 1,000,000,000). Output For each test case, print a single integer representing the minimum number of trucks required to meet the demands of all villages, or -1 if it is not possible. Example Input 3 4 5 8 15 6 5 10 12 20 15 8 2 1 100 200 150 3 3 7 10 5 6 11 8 Output 4 -1 3 Explanation: - In the first test case, each truck\'s capacity is sufficient to meet each village\'s demand: [10, 12, 20, 15] can be assigned to [8, 15, 6, 5] in any order. - In the second test case, there is only one truck with capacity 150 which is not enough to meet the demands of both villages (100, 200). - In the third test case, three trucks can meet the demands of the three villages: [6, 11, 8] can be assigned to [7, 10, 5] in any order.","solution":"def min_trucks(m, n, demands, capacities): # Sort the demands and capacities in descending order demands.sort(reverse=True) capacities.sort(reverse=True) # Initialize pointers for demands and capacities demand_idx = 0 capacity_idx = 0 while demand_idx < m and capacity_idx < n: # If the largest remaining capacity can meet the largest remaining demand, # assign this truck to this village and move both pointers if capacities[capacity_idx] >= demands[demand_idx]: demand_idx += 1 capacity_idx += 1 else: # If the largest remaining capacity cannot meet the largest remaining demand, # this demand cannot be met return -1 # If all demands have been met, return the number of trucks used return demand_idx if demand_idx == m else -1 def distribution_of_supplies(test_cases): results = [] for case in test_cases: m, n, demands, capacities = case result = min_trucks(m, n, demands, capacities) results.append(result) return results"},{"question":"A warehouse manager needs to efficiently track the inventory of products. The warehouse stores products in stacks, where each stack represents a different product type (e.g., product A, product B). The manager must process two types of queries: 1) Inventory Addition: When a new inventory of a product arrives, it is added to the stack of that particular product type. If the product type\'s stack does not exist, it is created. The query provides the product type and the quantity of the product being added. 2) Inventory Removal: When a product is required, a specified quantity is removed from the stack. If the quantity requested is more than what is available, all available quantity is removed. If the stack for the product type is empty or doesn\'t exist, the operation should be reported as unsuccessful. Help the manager by implementing a system to manage these tasks. Input: First line contains an integer Q, the number of queries. Q lines follow. An Inventory Addition query is indicated by two space separated integers 1, P (product type) and A (quantity to add). An Inventory Removal query is indicated by two space separated integers 2, P (product type) and R (quantity to remove). Output: For each Inventory Removal query, output the quantity removed in a new line. If the stack is empty or the product type doesn\'t exist, output \\"Empty\\" (without quotes). Constraints: 1 ≤ Q ≤ 100,000 1 ≤ P ≤ 10,000 1 ≤ A, R ≤ 1,000 SAMPLE INPUT 7 1 2 50 1 1 30 2 1 15 1 2 20 2 2 40 2 3 10 2 2 60 SAMPLE OUTPUT 15 40 Empty 30 Explanation: Initially, the warehouse is empty. An inventory of 50 units of product type 2 is added. An inventory of 30 units of product type 1 is added. 15 units are removed from product type 1, leaving 15 units left in the stack. An inventory of 20 units of product type 2 is added, making the total 70 units. 40 units are removed from product type 2, leaving 30 units. Product type 3 does not exist, so \\"Empty\\" is printed. 30 units are removed from product type 2, stack empty after this operation.","solution":"def process_queries(queries): Processes inventory addition and removal queries. Args: queries (List[Tuple[int, int, int]]): List of queries, where each query is a tuple containing (type of query, product type, quantity). Returns: List: Output of each Inventory Removal query as specified. inventory = {} # Dictionary to store product type and their quantities output = [] # List to store the results of removal queries for query in queries: type_of_query, product_type, quantity = query if type_of_query == 1: # Inventory Addition if product_type in inventory: inventory[product_type] += quantity else: inventory[product_type] = quantity elif type_of_query == 2: # Inventory Removal if product_type in inventory and inventory[product_type] > 0: if inventory[product_type] >= quantity: inventory[product_type] -= quantity output.append(quantity) else: removed_quantity = inventory[product_type] inventory[product_type] = 0 output.append(removed_quantity) else: output.append(\'Empty\') return output # Example: # Q = 7 # queries = [ # (1, 2, 50), # (1, 1, 30), # (2, 1, 15), # (1, 2, 20), # (2, 2, 40), # (2, 3, 10), # (2, 2, 60) # ] # Output: [15, 40, \'Empty\', 30] # result = process_queries(queries) # print(result)"},{"question":"Write a function to decode a string encoded with a run-length encoding (RLE) algorithm. An RLE encoded string is a way to represent consecutive characters with just the character followed by the number of times it is repeated. For instance, the string \\"aaabbc\\" would be encoded as \\"a3b2c1\\". Your task is to write a function that takes a single RLE encoded string input and returns the original uncompressed string. The decoding function should consider the following: 1. The input string will always be a valid RLE encoded string and will not contain any space or punctuation. 2. The encoded string contains only lowercase letters. For example: If the encoded input is \\"a3b2c1\\", the decoded string should be \\"aaabbc\\". Input: The input will be a single line containing a RLE encoded string of length up to 1000. Output: Output the decoded string. Constraints: 1. The length of the input string will be ≤ 1000 2. The input string will contain only lower case alphabets (a-z) followed by positive integers. SAMPLE INPUT a3b2c1 SAMPLE OUTPUT aaabbc Explanation In the input string \\"a3b2c1\\": - \'a3\' translates to \'aaa\' - \'b2\' translates to \'bb\' - \'c1\' translates to \'c\' Joining these gives the output string \'aaabbc\'.","solution":"def decode_rle(encoded_str): Decodes a run-length encoded (RLE) string. Parameters: encoded_str (str): The RLE encoded string (e.g., \'a3b2c1\'). Returns: str: The original uncompressed string (e.g., \'aaabbc\'). decoded_str = \\"\\" i = 0 while i < len(encoded_str): # Extract the character char = encoded_str[i] i += 1 # Extract the number num = 0 while i < len(encoded_str) and encoded_str[i].isdigit(): num = num * 10 + int(encoded_str[i]) i += 1 # Append the decoded sequence to the output string decoded_str += char * num return decoded_str"},{"question":"Alice is working on a new project where she needs to evaluate expressions containing digits and the characters \'+\' and \'*\'. However, she needs to compute the value of the expressions in a non-standard way. Given an expression string consisting of integers and the characters \'+\' and \'*\', she needs to evaluate it by performing all multiplications before additions, regardless of their positions in the expression (i.e., unlike standard order of operations). Write a function that takes an expression string and returns the evaluated result based on Alice\'s custom rules. The expression is guaranteed to be valid and contains only positive single-digit integers and the operations \'+\' and \'*\'. # Input Input consists of a single line containing the expression string. The length of the expression will not exceed 200 characters. # Output Output should be a single integer representing the evaluated result of the expression according to Alice\'s rules. Examples # Input ``` 2+3*4+5 ``` # Output ``` 27 ``` # Explanation First, compute the multiplications: 2 + (3*4) + 5 = 2 + 12 + 5 = 19 Next, perform the additions: 19 # Input ``` 1+2*3+4*5+6 ``` # Output ``` 37 ``` # Explanation First, compute the multiplications: 1 + (2*3) + (4*5) + 6 = 1 + 6 + 20 + 6 = 33 Next, perform the additions: 33","solution":"def custom_evaluate(expression): Evaluate the expression by performing all multiplications before additions. # Split the expression by \'+\', which will give us a list of multiplications addition_segments = expression.split(\'+\') # Calculate the result for each multiplication segment total_sum = 0 for segment in addition_segments: # Split the segment by \'*\' and calculate the product product = 1 for num in segment.split(\'*\'): product *= int(num) # Add the product of the segment to total_sum total_sum += product return total_sum"},{"question":"Berland\'s Football Association (BFA) is introducing a new football competition called the \\"Berland International Tournament\\". The tournament operates on a round-robin format, where each team plays against every other team exactly once. Following the round-robin stage, teams are ranked based on points, goal differences, and goals scored as in the previous World Cup regulation. However, BFA has introduced a new rule that allows a team to get a bonus point for maintaining a streak of three consecutive wins in the tournament. * For a victory, a team receives 3 points. * For a draw, a team receives 1 point. * For a defeat, a team receives 0 points. * If a team wins three consecutive matches at any point during the tournament, they earn a bonus point. You are asked to write a program that determines the winner of the tournament after all matches have been played. Input The first input line contains the only integer n (2 ≤ n ≤ 20) — the number of teams participating in the tournament. The following n lines contain the names of the teams, with each name being a string of lower-case and upper-case Latin letters, with a maximum length of 30 characters. The following n·(n - 1) / 2 lines describe the results of the matches in the format name1-name2 num1:num2, where name1 and name2 are the names of the competing teams, and num1 and num2 (0 ≤ num1, num2 ≤ 100) are the goals scored by the corresponding teams. Output Output a single line containing the name of the team that wins the tournament. It is guaranteed that there will always be a clear winner based on the given rules. Examples Input 4 Alpha Beta Gamma Delta Alpha-Beta 1:0 Alpha-Gamma 2:2 Alpha-Delta 3:1 Beta-Gamma 1:0 Beta-Delta 2:2 Gamma-Delta 1:0 Output Alpha Input 3 TeamA TeamB TeamC TeamA-TeamB 3:1 TeamA-TeamC 1:0 TeamB-TeamC 2:2 Output TeamA","solution":"def find_winner(n, teams, results): points = {team: 0 for team in teams} goal_differences = {team: 0 for team in teams} goals_scored = {team: 0 for team in teams} win_streaks = {team: 0 for team in teams} # Process each match result for result in results: match, score = result.split() team1, team2 = match.split(\'-\') goals1, goals2 = map(int, score.split(\':\')) # Update goals and goal differences goals_scored[team1] += goals1 goals_scored[team2] += goals2 goal_differences[team1] += goals1 - goals2 goal_differences[team2] += goals2 - goals1 if goals1 > goals2: points[team1] += 3 win_streaks[team1] += 1 win_streaks[team2] = 0 if win_streaks[team1] == 3: points[team1] += 1 elif goals2 > goals1: points[team2] += 3 win_streaks[team2] += 1 win_streaks[team1] = 0 if win_streaks[team2] == 3: points[team2] += 1 else: points[team1] += 1 points[team2] += 1 win_streaks[team1] = 0 win_streaks[team2] = 0 # Determine the winner winner = max(teams, key=lambda t: (points[t], goal_differences[t], goals_scored[t])) return winner"},{"question":"You are given a number n representing the number of points on a line, and a list of m distinct intervals. Each interval has a start and an end point. Your task is to find the maximum number of intervals that do not overlap. Input The first line contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) — the number of points and the number of intervals. Each of the next m lines contains two integers a_i and b_i (1 ≤ a_i < b_i ≤ n) — representing the start and end points of the i-th interval. Output Print a single integer — the maximum number of non-overlapping intervals. Examples Input ``` 10 4 1 3 2 6 5 8 7 10 ``` Output ``` 2 ``` Input ``` 12 5 1 4 2 5 3 6 7 10 8 11 ``` Output ``` 2 ```","solution":"def max_non_overlapping_intervals(n, m, intervals): Finds the maximum number of non-overlapping intervals. Args: n (int): The number of points. m (int): The number of intervals. intervals (list of tuples): A list where each tuple represents an interval (ai, bi). Returns: int: The maximum number of non-overlapping intervals. # Sort intervals based on the ending points intervals.sort(key=lambda x: x[1]) # Initialize variables to keep track of the last end point last_end = -1 count = 0 # Iterate through the intervals and count non-overlapping ones for interval in intervals: if interval[0] > last_end: count += 1 last_end = interval[1] return count"},{"question":"Karen is developing a new text editor and one of the features she wants to implement is the ability to handle text templates efficiently. Text templates are strings that can contain placeholders, which are variables enclosed in curly braces (e.g., {variable}). When a template is processed, each placeholder is replaced with a corresponding value provided in a dictionary. Your task is to help Karen implement a function that processes a template string and replaces all placeholders with their corresponding values from a dictionary. If a placeholder does not have a corresponding value in the dictionary, it should be replaced with an empty string. The placeholders in the template string are distinct and non-nested. The template string and dictionary keys only contain lowercase Latin letters and the placeholders follow the format `{variable}`. Input - A string `template` of length n (1 ≤ n ≤ 1000) containing the template with placeholders. - A dictionary `values` where keys are strings representing placeholders without curly braces and values are strings that are the replacements for those placeholders. There are at most 100 keys in the dictionary. Output Return the processed string after replacing all placeholders with their corresponding values from the dictionary. Examples Input template = \\"Hello, {name}!\\" values = {\\"name\\": \\"Alice\\"} Output \\"Hello, Alice!\\" Input template = \\"{greeting}, how are you, {name}?\\" values = {\\"greeting\\": \\"Hi\\", \\"name\\": \\"Bob\\"} Output \\"Hi, how are you, Bob?\\" Input template = \\"This is a {adjective} day.\\" values = {} Output \\"This is a day.\\" Note In the first example, the placeholder `{name}` is replaced with \\"Alice\\". In the second example, the `{greeting}` and `{name}` placeholders are replaced with \\"Hi\\" and \\"Bob\\", respectively. In the third example, there is no corresponding value for the `{adjective}` placeholder, so it is replaced with an empty string.","solution":"import re def process_template(template, values): Processes the template string by replacing all placeholders with the corresponding values from the dictionary. :param template: str - the template string containing placeholders :param values: dict - dictionary where keys are placeholders without curly braces and values are the replacements :return: str - the processed template string # Create a regular expression pattern for matching placeholders pattern = re.compile(r\'{(w+)}\') # Function to replace each match def replace_placeholder(match): key = match.group(1) return values.get(key, \\"\\") # Substitute the placeholders with their corresponding values result = pattern.sub(replace_placeholder, template) return result"},{"question":"You are given a list of integers that represent the inventory levels of different products in a warehouse. The warehouse must maintain a minimum inventory level for each product, and if any product\'s inventory falls below its minimum level, it triggers a restocking action. The goal is to determine the total number of units that need to be restocked for all products to meet their minimum inventory levels. Write a program to calculate the total number of units to be restocked. Input The input is given in the following format: N i_1 m_1 i_2 m_2 ... i_N m_N The first line provides the number of products N (1 leq N leq 100). Each of the next N lines contains two integers - the current inventory level i_j (0 leq i_j leq 100) and the minimum required inventory level m_j (1 leq m_j leq 100) for the j-th product. Output Output the total number of units that need to be restocked. Examples Input 3 10 15 20 25 5 10 Output 15 Input 4 30 30 25 20 0 18 12 12 Output 18 Input 2 7 10 5 5 Output 3","solution":"def total_restock_units(N, data): Calculate the total number of units to be restocked. Args: N (int): The number of products. data (list of tuples): Each tuple contains two integers, the current inventory level i and the minimum required inventory level m for each product. Returns: int: The total number of units that need to be restocked. total_units = 0 for i, m in data: if i < m: total_units += m - i return total_units"},{"question":"Write a program that reads an integer X and a list of integers L, and then prints the product of the largest and smallest integers in L. The program should handle the list L by reading integers that are separated by space or newline characters. The input ends with \\"END_OF_INPUT\\". Constraints: * 1 ≤ X ≤ 100 * Each integer in L is between -1000 and 1000 Input: In the first line, the integer X is given which denotes the number of integers in the list L. In the following lines, the list L is given separated by space or newline characters. \\"END_OF_INPUT\\" indicates the end of the input. Output: Print the product of the largest and smallest integers in L. Example: Input: 5 1 3 2 -5 8 END_OF_INPUT Output: -40","solution":"def product_of_largest_and_smallest(X, L): Returns the product of the largest and smallest integers in L. max_val = max(L) min_val = min(L) return max_val * min_val def read_input(): import sys input = sys.stdin.read() lines = input.strip().split() X = int(lines[0]) L = list(map(int, lines[1: -1])) return X, L if __name__ == \\"__main__\\": X, L = read_input() print(product_of_largest_and_smallest(X, L))"},{"question":"You are given an array of `n` integers and a window size `k`. Your task is to calculate the maximum sum of any subarray of size `k` in the given array. A subarray is defined as a contiguous segment of the array. You are required to implement an efficient solution that finds the maximum sum in a sliding window fashion. Input The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 10^5). The second line contains `n` integers separated by spaces, denoting the elements of the array (elements of the array can be negative, and their absolute values do not exceed 10^4). Output Print a single integer, the maximum sum of any subarray of size `k`. Examples Input 8 3 1 -2 3 4 -1 2 1 -5 Output 6 Input 5 2 4 3 -2 6 -5 Output 7 Note In the first example, the subarray with the maximum sum of size 3 is `3, 4, -1`, which sums to `6`. In the second example, the subarray with the maximum sum of size 2 is `4, 3`, which sums to `7`.","solution":"def max_sum_subarray(arr, k): Calculate the maximum sum of any subarray of size k. Parameters: arr (list of int): The array of integers. k (int): The size of the subarray. Returns: int: The maximum sum of any subarray of size k. n = len(arr) if n < k: return 0 # If the array size is less than k, return 0 # Calculate the initial window\'s sum window_sum = sum(arr[:k]) max_sum = window_sum # Slide the window across the array for i in range(n - k): window_sum = window_sum - arr[i] + arr[i + k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"Bob and his cousins are playing a game on a square grid. The grid has n rows and n columns, and each cell in the grid contains a positive integer. Bob wants to find the largest possible \\"perfect square\\" of numbers that can be formed by taking a sub grid of the original grid. A \\"perfect square\\" is defined as a square that contains all the same numbers. Can you help Bob find the largest perfect square? Input The first line of the input data contains a single integer n (1 ≤ n ≤ 50), the size of the grid. The following n lines contain n integers each, representing the values in the grid. Output Output a single integer, the size of the largest perfect square subgrid that can be formed within the original grid. If no such subgrid exists, output 1. Examples Input 5 1 1 1 2 2 1 1 1 2 2 1 1 1 2 2 3 3 3 4 4 3 3 3 4 4 Output 3 Input 3 2 2 3 2 2 3 3 3 3 Output 2","solution":"def largest_perfect_square(grid): n = len(grid) def check_square(x, y, size): val = grid[x][y] for i in range(size): for j in range(size): if grid[x + i][y + j] != val: return False return True max_size = 1 for size in range(2, n + 1): found = False for i in range(n - size + 1): for j in range(n - size + 1): if check_square(i, j, size): max_size = size found = True break if found: break return max_size"},{"question":"Given an integer array, find the sum of its elements. Input Format: First line contains single integer t, the number of test-cases. Each of the next t lines contains an integer n followed by n integers separated by spaces. Output Format: Output t lines, each containing the sum of the corresponding array elements. Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 100 -100 ≤ elements of the array ≤ 100 SAMPLE INPUT 2 4 1 2 3 4 3 -1 -2 -3 SAMPLE OUTPUT 10 -6","solution":"def find_sums(test_cases): Given a list of test cases where the first element is the number of integers and the remaining are the integers themselves, return a list of the sum of the integers for each test case. results = [] for case in test_cases: n, *elements = case results.append(sum(elements)) return results"},{"question":"Given a list of words, write a function that will return a dictionary where the keys are the first letters of the words and the values are lists containing all the words that start with that letter. The words in the lists should be in the same order as they appear in the input list. Ignore case while grouping, but return the words in their original case. Example: If the input list is `[\\"apple\\", \\"Avocado\\", \\"banana\\", \\"apricot\\", \\"blueberry\\", \\"cherry\\"]` Then the output dictionary should be: ``` { \'a\': [\'apple\', \'Avocado\', \'apricot\'], \'b\': [\'banana\', \'blueberry\'], \'c\': [\'cherry\'] } ``` SAMPLE INPUT [\\"apple\\", \\"Avocado\\", \\"banana\\", \\"apricot\\", \\"blueberry\\", \\"cherry\\"] SAMPLE OUTPUT ``` { \'a\': [\'apple\', \'Avocado\', \'apricot\'], \'b\': [\'banana\', \'blueberry\'], \'c\': [\'cherry\'] } ```","solution":"def group_words_by_first_letter(words): Returns a dictionary where the keys are the first letters of the words (case-insensitive) and the values are lists containing all the words that start with that letter, in their original case. :param words: List of words :return: Dictionary grouping words by their first letter result = {} for word in words: key = word[0].lower() if key in result: result[key].append(word) else: result[key] = [word] return result"},{"question":"You are given a list of integers and your task is to determine for each query whether the subarray is an increasing subsequence or not. An increasing subsequence is defined as a sequence where each element is strictly greater than the preceding one. Input: The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the length of the array and the number of queries. The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Each of the following q lines contains two integers l_i, r_i (1 ≤ l_i ≤ r_i ≤ n) — the bounds of the subarray for the i-th query. Output: Print q lines. For the i-th query, print \\"Yes\\" if the subarray a[l_i…r_i] is an increasing subsequence, otherwise print \\"No\\". Examples Input 5 3 1 3 2 5 7 1 3 2 4 1 5 Output No No Yes Input 4 2 2 3 4 5 1 2 3 4 Output Yes Yes Note In the first example: In the first query, the subarray [1, 3, 2] is not an increasing subsequence. In the second query, the subarray [3, 2, 5] is not an increasing subsequence. In the third query, the subarray [1, 3, 2, 5, 7] is an increasing subsequence. In the second example: In the first query, the subarray [2, 3] is an increasing subsequence. In the second query, the subarray [4, 5] is an increasing subsequence.","solution":"def is_increasing_subsequence(arr, start, end): Returns whether the subarray arr[start:end+1] is an increasing subsequence. for i in range(start, end): if arr[i] >= arr[i + 1]: return False return True def process_queries(n, q, array, queries): results = [] for query in queries: l, r = query if is_increasing_subsequence(array, l - 1, r - 1): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"A logistics company needs to decide the optimal way to stack packages in a shipping container. The container has a fixed capacity w and the company has n packages each with a weight wi. It is critical that the combined weight of all packages in the container does not exceed the container\'s capacity. Additionally, some packages are more valuable and have a priority level pi (1 for high priority, 0 for low priority). The company defines the efficiency of the shipment as the maximum total weight of high priority packages that can be included in the container without exceeding its capacity. You need to determine this maximum efficiency. Input The first line contains two integers n and w (1 ≤ n ≤ 10 000, 1 ≤ w ≤ 10 000) — the number of packages and the capacity of the container. The second line contains n integers wi (1 ≤ wi ≤ 10 000) — the weights of the packages. The third line contains n integers pi (0 ≤ pi ≤ 1) — the priority level of the packages, where pi equals 1 if the i-th package is high priority, and 0 otherwise. Output Print a single integer — the maximum total weight of high priority packages that can be included in the container without exceeding its capacity. Examples Input 5 10 2 3 5 1 4 1 1 0 1 0 Output 6 Input 3 7 3 5 2 1 1 1 Output 7 Note In the first example, you can include packages with weights 2, 3, and 1, all of which are high priority, and their combined weight is 6, which does not exceed the container\'s capacity of 10. In the second example, you can include all packages, since their combined weight is 10, which is the container\'s capacity and all packages have high priority. Hence, the total weight of high priority packages is 7.","solution":"def max_efficiency(n, w, weights, priorities): # Create a list of high priority packages high_priority_packages = [weights[i] for i in range(n) if priorities[i] == 1] # Initialize the DP array dp = [0] * (w + 1) # Fill the DP array using the weights of high priority packages for weight in high_priority_packages: for j in range(w, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) # Maximum efficiency is the maximum weight we can get from high priority packages return dp[w]"},{"question":"You are given a string s consisting of lowercase Latin letters. You can perform the following operations any number of times (possibly zero): - Choose any two adjacent letters in the string and if they are equal, remove both of them from the string. After performing the described operations any number of times, what is the shortest length of the string that you can obtain? Input The first line of input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a string consisting of lowercase Latin letters. The length of each string is between 1 and 100. Output For each test case, print a single integer — the length of the shortest string that you can obtain after performing any number of removals. Example Input 3 ab aa abc Output 2 0 3 Note In the first test case, it is not possible to remove any characters, so the length of the string remains 2. In the second test case, the initial string \\"aa\\" can be removed entirely, so the length of the string becomes 0. In the third test case, it is not possible to remove any characters, so the length of the string remains 3.","solution":"def shortest_length_after_removals(t, cases): Returns the shortest length of the string that you can obtain after performing the described removals. Parameters: t (int): The number of test cases. cases (list of str): List of strings for each test case. Returns: list of int: The length of the shortest string for each test case. results = [] for s in cases: stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) results.append(len(stack)) return results # Example usage of the function t = 3 cases = [\\"ab\\", \\"aa\\", \\"abc\\"] print(shortest_length_after_removals(t, cases)) # Output: [2, 0, 3]"},{"question":"You are given a digital billboard that displays messages using a set of LEDs arranged in a grid of N rows and M columns. Each cell in the grid can be either ON or OFF. The billboard manager wants to know the largest rectangle of ON cells within the grid to maximize the display area for advertisements. Your task is to write a program that takes the grid configuration and returns the area of the largest rectangle consisting entirely of ON cells. Input: - The first line contains two space-separated integers N and M, representing the number of rows and columns in the grid. - The next N lines each contain M characters (\'1\' for ON and \'0\' for OFF) representing the billboard grid. Output: - One integer representing the area of the largest rectangle of ON cells. Constraints: - 1 ≤ N, M ≤ 1000 Example: SAMPLE INPUT 4 5 10100 10111 11111 10010 SAMPLE OUTPUT 6 Explanation: The largest rectangle of ON cells in the given grid has an area of 6 (the 2x3 rectangle in the third row).","solution":"def maximal_rectangle_area(matrix): if not matrix: return 0 max_area = 0 dp = [0] * len(matrix[0]) # DP array to store the height of columns for row in matrix: for index, value in enumerate(row): # Update the dp array to add height or reset the height dp[index] = dp[index] + 1 if value == \'1\' else 0 # Update max_area with the largest rectangle in the histogram max_area = max(max_area, largest_histogram_area(dp)) return max_area def largest_histogram_area(heights): stack = [] max_area = 0 heights.append(0) # Add a zero height to facilitate calculation for i, height in enumerate(heights): while stack and heights[stack[-1]] > height: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() # Remove the zero height return max_area # Convert the input format to a matrix and calculate the maximal rectangle area def largest_rectangle_of_on_cells(N, M, grid): return maximal_rectangle_area(grid)"},{"question":"You are given a partially written newspaper article containing arbitrary strings, numbers, and sections of placeholder text that begin and end with double square brackets \'[[\' and \']]\'. These placeholder sections are intended to be replaced with the correct information after the article has been written. Each placeholder contains a clue about what it refers to. For example, the placeholder `[[date]]` might need to be replaced with an actual date string such as \'12th October 2021\'. Your task is to write a function `replace_placeholders(article, replacements)` which takes two arguments: a string `article` that contains the placeholder text, and a dictionary `replacements` which maps placeholder names (without the brackets) to their corresponding replacement values. You need to replace all placeholders in the article with their corresponding values from the dictionary. # Function Signature: ```python def replace_placeholders(article: str, replacements: dict) -> str: ``` # Input: - `article`: A string containing the newspaper article with placeholders. The length of this article will not exceed 10,000 characters. - `replacements`: A dictionary where the keys are placeholder names (without the square brackets), and the values are the respective strings to replace the placeholders. The dictionary will have at most 100 key-value pairs. # Output: The function should return a new string where all placeholders in the original article have been replaced with the appropriate values from the replacements dictionary. If a placeholder in the article does not have a corresponding entry in the replacements dictionary, it should be left unchanged. # Example: Input: ```python article = \\"The event will take place on [[date]]. This is an important event for [[organization]]. Attendees should arrive by [[time]].\\" replacements = { \\"date\\": \\"12th October 2021\\", \\"organization\\": \\"The Coding Institute\\", \\"time\\": \\"9:00 AM\\" } ``` Output: ```python \\"The event will take place on 12th October 2021. This is an important event for The Coding Institute. Attendees should arrive by 9:00 AM.\\" ``` Example: Input: ```python article = \\"Our next meeting is scheduled for [[day]] at [[location]].\\" replacements = { \\"day\\": \\"Friday\\", \\"location\\": \\"Conference Room B\\" } ``` Output: ```python \\"Our next meeting is scheduled for Friday at Conference Room B.\\" ``` # Constraints: 1. The placeholders in the articles are guaranteed to be well-formed (i.e., they will always start with \'[[\' and end with \']]\'). 2. Placeholder keys will consist of alphanumeric characters and underscores `(_)` only.","solution":"def replace_placeholders(article: str, replacements: dict) -> str: Replaces placeholders in the article with corresponding values from replacements dictionary. Args: article (str): The article containing placeholders. replacements (dict): The dictionary with placeholder replacements. Returns: str: The article with placeholders replaced by their respective values. import re def replace_match(match): placeholder = match.group(1) return replacements.get(placeholder, match.group(0)) # Regex to find [[placeholder]] pattern = re.compile(r\'[[(.*?)]]\') return pattern.sub(replace_match, article)"},{"question":"You will be given an integer N representing the number of stock prices on different days, followed by a list of N integers P containing the stock prices. Write a program to calculate the maximum profit that can be achieved by buying and selling the stock once. You must buy before you sell. If no profit can be achieved, the program should return 0. Constraints * 1 leq N leq 10^5 * 0 leq P[i] leq 10^4 Input Input is given from Standard Input in the following format: N P1 P2 P3 ... PN Output Print the maximum profit that can be achieved. If no profit can be achieved, print 0. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Input 3 1 2 4 Output 3","solution":"def max_profit(N, prices): if N == 0: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"Write a program to determine the smallest positive integer that is missing from an unsorted array of integers. The array can contain duplicates and both positive and negative numbers. Input: The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The description of t test cases follows. Each test case consists of two lines. The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the array. The second line consists of n space-separated integers a_1, a_2, ..., a_n (−10^6 ≤ a_i ≤ 10^6) — the elements of the array. Output: For each test case, print the smallest positive integer that is missing from the array. Example: Input 3 7 1 2 0 -1 3 5 4 5 4 -1 2 1 10 6 -1 -3 -4 -2 -5 0 Output 6 3 1","solution":"def smallest_missing_positive_integer(t, test_cases): results = [] for case in test_cases: n, arr = case # Filter the array to only include positives positives = [num for num in arr if num > 0] positives = set(positives) # Remove duplicates and convert to a set for O(1) lookups missing = 1 while missing in positives: missing += 1 results.append(missing) return results"},{"question":"You have a network of n computers, identified by integers from 1 to n. Some pairs of computers are connected by bidirectional communication channels. Your task is to find out if all computers in the network are connected directly or indirectly. Each network configuration is represented by a list of m pairs (u, v), where each pair indicates that there is a direct communication channel between computer u and computer v. Write a program to check if the network forms a single connected component. Input The first line contains integer t (1 ≤ t ≤ 10^3) — the number of test cases in the input. Then t test cases follow. For each test case: - The first line contains two integers, n (1 ≤ n ≤ 10^5) and m (0 ≤ m ≤ 2 * 10^5), the number of computers and the number of communication channels, respectively. - The following m lines each contain two integers u and v (1 ≤ u, v ≤ n; u ≠ v), describing a direct communication channel between computers u and v. Output For each test case, print \\"YES\\" if all computers are connected directly or indirectly; otherwise, print \\"NO\\". Example Input 3 4 2 1 2 2 3 3 3 1 2 2 3 3 1 5 4 1 2 2 3 3 4 4 5 Output NO YES YES Explanation In the first test case, computers 4 are isolated from other computers, so the network is not a single connected component. In the second test case, all computers are connected indirectly through a series of communication channels. In the third test case, all computers form a single chain, making the whole network a connected component.","solution":"def find_root(parent, i): if parent[i] == i: return i else: parent[i] = find_root(parent, parent[i]) # Path compression return parent[i] def union(parent, rank, x, y): root_x = find_root(parent, x) root_y = find_root(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def is_connected_network(n, edges): parent = [i for i in range(n+1)] rank = [0] * (n+1) for u, v in edges: union(parent, rank, u, v) root = find_root(parent, 1) for i in range(2, n+1): if find_root(parent, i) != root: return \\"NO\\" return \\"YES\\" def check_all_connected(test_cases): results = [] for n, m, edges in test_cases: results.append(is_connected_network(n, edges)) return results"},{"question":"Suppose you are designing a simple inventory management system. This system keeps track of products in a warehouse. Each product has a name and a quantity. The system should allow several operations: 1. Add a quantity to an existing product. 2. Subtract a quantity from an existing product. 3. Check the quantity of a product. 4. Display the total quantity of all products. Your task is to implement this inventory management system. You need to read a series of commands and perform the operations as specified. The commands are as follows: - \\"add <product_name> <quantity>\\": Add the specified quantity to the product. - \\"subtract <product_name> <quantity>\\": Subtract the specified quantity from the product. - \\"check <product_name>\\": Print the quantity of the specified product. - \\"total\\": Print the total quantity of all products. If the product does not exist when trying to add or subtract a quantity, you should create the product with the appropriate initial quantity. If the quantity to subtract is greater than the available quantity, set the product\'s quantity to zero. Input: - The first line contains an integer N, the number of commands. - The next N lines contain a command in one of the four formats mentioned above. Output: - For each \\"check\\" command, print the quantity of the product. - For the \\"total\\" command, print the total quantity of all products. Constraints: - 1 <= N <= 1000 - 1 <= product_name_length <= 20 - 0 <= quantity <= 1000 Example: Input: 10 add apple 50 add banana 30 check apple subtract apple 10 check apple subtract banana 40 check banana total add orange 20 total Output: 50 40 0 40 60","solution":"class Inventory: def __init__(self): self.products = {} def add(self, product_name, quantity): if product_name in self.products: self.products[product_name] += quantity else: self.products[product_name] = quantity def subtract(self, product_name, quantity): if product_name in self.products: self.products[product_name] = max(0, self.products[product_name] - quantity) else: self.products[product_name] = 0 def check(self, product_name): return self.products.get(product_name, 0) def total(self): return sum(self.products.values())"},{"question":"A delivery service company operates a fleet of delivery vans to distribute packages throughout a city. Each van has a maximum capacity, and they want to use the minimum number of vans to deliver all the packages. You are given an array `packages` where `packages[i]` represents the weight of the ith package and an integer `capacity` representing the maximum weight a delivery van can carry. Your task is to calculate the minimum number of delivery vans required to deliver all the packages. Input The first line of the input contains an integer `n` (1 ≤ n ≤ 1000) representing the number of packages. The second line contains `n` space-separated integers `packages[i]` (1 ≤ packages[i] ≤ 1000) representing the weights of the packages. The last line contains an integer `capacity` (1 ≤ capacity ≤ 1000). Output Print the minimum number of delivery vans required to deliver all the packages. Examples Input 5 4 8 1 7 3 10 Output 3 Input 3 9 8 6 10 Output 3 Note In the first example, the company can use 3 vans as follows: - The first van can carry packages with weights 4 and 3. - The second van can carry packages with weights 8 and 1. - The third van can carry the package with weight 7. In the second example, each package exceeds the remaining capacity if more than one package is loaded into a van, thus requiring one van for each package.","solution":"def min_delivery_vans(packages, capacity): Calculate the minimum number of delivery vans required to deliver all the packages. Parameters: packages (List[int]): The weights of the packages. capacity (int): The maximum weight a delivery van can carry. Returns: int: The minimum number of delivery vans required. if not packages: return 0 packages.sort(reverse=True) vans = 0 n = len(packages) used = [False] * n for i in range(n): if not used[i]: current_capacity = capacity for j in range(i, n): if not used[j] and packages[j] <= current_capacity: current_capacity -= packages[j] used[j] = True vans += 1 return vans"},{"question":"You are given three arrays of positive integers: `arr1`, `arr2`, and `arr3` with `n` elements each. An element is called \\"common\\" if it appears in all three arrays. The task is to find all the common elements in the three arrays and return them in sorted order. Input: The first line contains the integer n (1 ≤ n ≤ 10^5), the number of elements in each array. The next three lines contain n elements each: the first line contains the elements of `arr1`, the second line contains the elements of `arr2`, and the third line contains the elements of `arr3`. All elements are positive integers and fit within the integer range. Output: Print all common elements in sorted order. If there are no common elements, print an empty list `[]`. Example: Input: 6 1 5 10 20 40 80 6 7 20 80 100 3 4 15 20 30 70 80 Output: [20, 80]","solution":"def find_common_elements(arr1, arr2, arr3): Finds all common elements in three sorted arrays and returns them in sorted order. # Using set operations to find common elements common_elements = set(arr1) & set(arr2) & set(arr3) # Converting the set to a sorted list result = sorted(list(common_elements)) return result"},{"question":"A shipping company needs to optimize its truck loading process. They have a fleet of trucks each with a maximum load capacity of ci. The company needs to ship packages, each with a specific weight. The goal is to determine the minimum number of packages required such that each truck can be loaded to its maximum capacity. Given a set of trucks with distinct capacities, your task is to find the smallest possible set of package weights such that: 1. Each truck can be loaded exactly to its maximum capacity using any combination of these packages. 2. The package weights should be distinct. 3. Among all possible sets of package weights that satisfy the above conditions, find the set with the minimum number of packages. Input The first line contains an integer n (1 ≤ n ≤ 10^6) — the number of trucks. The second line contains n distinct space-separated integers c1, c2, ..., cn (1 ≤ c1 < c2 < ... < cn ≤ 10^6) — the capacities of the trucks. Output In the first line, print \\"IMPOSSIBLE\\" if it\'s not feasible to determine such a set of packages. Otherwise, print \\"POSSIBLE\\" followed by an integer k (showing the number of package weights in the optimal set). On the next line, print k space-separated integers representing the package weights in the optimal set. If there are multiple solutions, print any one of them. Examples Input 3 3 7 10 Output POSSIBLE 4 1 2 3 4 Input 2 1 2 Output POSSIBLE 1 1 Input 4 1 5 7 10 Output POSSIBLE 5 1 2 6 7 8","solution":"from math import ceil, log2 def find_package_weights(truck_capacities): if not truck_capacities: return \\"IMPOSSIBLE\\" max_capacity = max(truck_capacities) # Number of bits to represent the maximum capacity num_weights = ceil(log2(max_capacity + 1)) # Generate package weights as powers of 2 weights = [2**i for i in range(num_weights)] return \\"POSSIBLE\\", num_weights, weights"},{"question":"You are given n strings, each representing a binary number. The strings can be of different lengths. Your task is to find the longest common subsequence (LCS) of the given binary strings and output its length. If there is no common subsequence, output `0`. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. # Input - The input consists of a single dataset: - The first line contains an integer `n` (1 ≤ n ≤ 10), representing the number of binary strings. - The following `n` lines each contain a binary string of length `m` (1 ≤ m ≤ 100), representing the binary numbers. # Output - Output a single integer representing the length of the longest common subsequence of the given binary strings. If there is no common subsequence, output `0`. # Example Input ``` 3 1101 1110 1011 ``` Output ``` 2 ``` Explanation The longest common subsequence of the strings \\"1101\\", \\"1110\\", and \\"1011\\" is \\"11\\", which has a length of 2. # Note - In the given example, another LCS could be \\"10\\", which also has a length of 2. - The common subsequence must be strictly ordered as per the original strings. Write a function to solve the problem and ensure it matches the criteria mentioned. Good luck!","solution":"from functools import lru_cache def lcs(strs): Finds the length of the longest common subsequence among the given binary strings. # Perform pairwise LCS calculation @lru_cache(None) def lcs_2str(s1, s2): m, n = len(s1), len(s2) # Creating a 2D array to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m+1): for j in range(n+1): if i == 0 or j == 0: dp[i][j] = 0 elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[m][n] lcs_length = len(strs[0]) for i in range(1, len(strs)): lcs_length = lcs_2str(strs[0][:lcs_length], strs[i]) if lcs_length == 0: return 0 return lcs_length"},{"question":"You are given two strings, S1 and S2, of equal length. You have to check if one string can be transformed into the other using exactly one swap of two distinct characters within the string. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case, you are given two space separated strings, S1 and S2. Output For each test case, output \\"Yes\\" (without quotes) if S1 can be transformed into S2 using exactly one swap, otherwise print \\"No\\". Constraints 1 ≤ T ≤ 10^4 1 ≤ |S1|, |S2| ≤ 100 S1 and S2 consist of lowercase English letters only Example Input: 3 abcd abdc ab ab abcd abcd Output: Yes Yes No Explanation Example case 1. In the first case, swapping characters \'c\' and \'d\' in S1 results in S2. Hence, we will print \\"Yes\\". Example case 2. In the second case, the strings are already equal and are of length 2, swapping characters will still result in the same strings. Hence, the answer is \\"Yes\\". Example case 3. In the third case, both strings are already equal and no further swaps are needed. Hence, the answer is \\"No\\".","solution":"def can_be_transformed_by_one_swap(s1, s2): Check if s1 can be transformed into s2 by exactly one swap. if s1 == s2: return len(s1) == 2 # Find all positions where the characters are different diff = [(a, b) for a, b in zip(s1, s2) if a != b] # Check if there are exactly 2 differences and they are swappable return len(diff) == 2 and diff[0] == diff[1][::-1] def transform_check(T, test_cases): results = [] for s1, s2 in test_cases: if can_be_transformed_by_one_swap(s1, s2): results.append(\\"Yes\\") else: results.append(\\"No\\") return results # Usage example T = 3 test_cases = [(\\"abcd\\", \\"abdc\\"), (\\"ab\\", \\"ab\\"), (\\"abcd\\", \\"abcd\\")] print(transform_check(T, test_cases))"},{"question":"Alice and Bob are playing a game with a 2D grid of size n x m, where each cell contains a positive integer. The players take turns, and on each turn, a player can pick any row or column and add 1 to every element in that row or column. Alice always goes first. The goal of the game is to make the sum of all the elements in the grid a prime number. The player who makes the sum a prime number wins the game. If the initial sum is already a prime number, Alice wins immediately. However, if there is no way to make the sum a prime number within 10^6 moves (combined total of both players\' turns), the game is declared a draw. Your task is to determine the outcome of the game if both players play optimally. Input - The first line of input contains two integers, n (1 ≤ n ≤ 50) and m (1 ≤ m ≤ 50), representing the dimensions of the grid. - The next n lines contain m integers each, where the j-th integer in the i-th line represents the value of the cell at position (i, j). Each of these integers is between 1 and 100. Output - Print \\"Alice\\" if Alice wins. - Print \\"Bob\\" if Bob wins. - Print \\"Draw\\" if neither player can make the sum a prime number within 10^6 moves. Example Input 3 3 4 5 6 7 8 9 1 2 3 Output Alice Note In the example, the initial sum of the grid is 45, which is not a prime number. Alice can choose to add 1 to any row or column to change the sum and try to make it a prime number. If the optimal sequence of moves leads to a prime sum, Alice is declared the winner.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False max_div = int(num**0.5) + 1 for d in range(3, max_div, 2): if num % d == 0: return False return True def game_outcome(n, m, grid): Determine the outcome of the game. initial_sum = sum(sum(row) for row in grid) # If the initial sum is prime, Alice wins immediately if is_prime(initial_sum): return \\"Alice\\" # If the sum is even, Alice can make it odd by adding to any cell # If the sum is odd, Alice can make it even by adding to any cell # It\'s always possible to turn it into a prime by adding 1 repeatedly # since 10^6 moves are enough to cover any scenario within grid number range return \\"Alice\\" # Example usage: n, m = 3, 3 grid = [ [4, 5, 6], [7, 8, 9], [1, 2, 3] ] print(game_outcome(n, m, grid)) # Alice"},{"question":"Statement: You are developing a program for managing a list of students in a classroom. Each student has a unique student ID, a first name, and a last name. The objective is to implement a system that can add students, remove students by their ID, and print the list of students sorted by the last name and then by the first name. Operations: 1. **ADD**: Add a student to the list. - Input: ADD <ID> <FirstName> <LastName> - Output: None 2. **REMOVE**: Remove a student with the given ID from the list. - Input: REMOVE <ID> - Output: None 3. **PRINT**: Print the list of students sorted by LastName, then by FirstName in case of ties. - Input: PRINT - Output: The sorted list of students where each student\'s details are printed on a new line in the format <ID>, <FirstName>, <LastName>. Input: - The first line contains an integer N, the number of operations. - The next N lines each contain one of the operations ADD, REMOVE, or PRINT. Output: - For each PRINT operation, output the list of students sorted as described. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ ID ≤ 10^5 - FirstName and LastName are alphabetic strings of at most 20 characters. Sample Input: 6 ADD 1 John Doe ADD 2 Alice Smith PRINT ADD 3 Bob Doe REMOVE 2 PRINT Sample Output: 1, John, Doe 2, Alice, Smith 1, John, Doe 3, Bob, Doe","solution":"class Classroom: def __init__(self): self.students = {} def add_student(self, student_id, first_name, last_name): self.students[student_id] = (first_name, last_name) def remove_student(self, student_id): if student_id in self.students: del self.students[student_id] def print_students(self): sorted_students = sorted(self.students.items(), key=lambda item: (item[1][1], item[1][0])) for student_id, (first_name, last_name) in sorted_students: print(f\\"{student_id}, {first_name}, {last_name}\\") # Example usage based on the Sample Input: classroom = Classroom() operations = [ \\"ADD 1 John Doe\\", \\"ADD 2 Alice Smith\\", \\"PRINT\\", \\"ADD 3 Bob Doe\\", \\"REMOVE 2\\", \\"PRINT\\" ] for operation in operations: if operation.startswith(\\"ADD\\"): _, student_id, first_name, last_name = operation.split() classroom.add_student(int(student_id), first_name, last_name) elif operation.startswith(\\"REMOVE\\"): _, student_id = operation.split() classroom.remove_student(int(student_id)) elif operation.startswith(\\"PRINT\\"): classroom.print_students()"},{"question":"Alice has recently learned about sequences and wants to create one based on a special rule. She starts with a number n and repeatedly applies the following transformation: If the number is even, she divides it by 2. If the number is odd, she multiplies it by 3 and adds 1. She continues this process until she reaches the number 1. For example, if Alice starts with n = 6, the sequence will be: 6, 3, 10, 5, 16, 8, 4, 2, 1. Your task is to help Alice by writing a function that takes an integer n and returns the sequence following this rule. Input The input consists of a single integer n (1 ≤ n ≤ 1000). Output Output the sequence generated by starting with n and repeatedly applying the given transformation until the number 1 is reached. The sequence should be output as a space-separated list of integers. Example Input 6 Output 6 3 10 5 16 8 4 2 1 Input 1 Output 1 Note In the first example, the sequence is: 6, 3, 10, 5, 16, 8, 4, 2, 1. In the second example, since the input is already 1, the sequence contains just the number 1.","solution":"def generate_sequence(n): Returns the sequence generated by starting with n and repeatedly applying the given transformation until the number 1 is reached. sequence = [] while n != 1: sequence.append(n) if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 sequence.append(1) return sequence"},{"question":"A company runs a hierarchy of employees, where each employee except the CEO has one direct supervisor. They want to find out the number of distinct paths from the CEO to a given employee. The company\'s hierarchy is represented as a tree rooted at the CEO (node 1). An employee is represented as a node, and a direct relationship to a supervisor is represented as an edge in the tree. You are given the number of employees `n` and a list of edges `edges`, where each edge is a tuple `(a, b)` indicating employee `b` is directly supervised by employee `a`. Write a function `distinct_paths_to_employee(n: int, edges: List[Tuple[int, int]], target: int) -> int` that returns the number of distinct paths from the CEO to the given `target` employee. # Function Signature: ```python from typing import List, Tuple def distinct_paths_to_employee(n: int, edges: List[Tuple[int, int]], target: int) -> int: pass ``` # Constraints: - (1 leq n leq 10^4) - Each employee `b` in the list of edges `(a, b)` has exactly one direct supervisor `a`. - `target` will always be a valid employee node in the given tree. # Example: ```plaintext Input: n = 7 edges = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)] target = 5 Output: 1 ``` # Explanation: There is only one path from the CEO (employee 1) to employee 5: `1 -> 2 -> 5`.","solution":"from typing import List, Tuple, Dict from collections import defaultdict, deque def build_tree(edges: List[Tuple[int, int]]) -> Dict[int, List[int]]: tree = defaultdict(list) for a, b in edges: tree[a].append(b) return tree def distinct_paths_to_employee(n: int, edges: List[Tuple[int, int]], target: int) -> int: tree = build_tree(edges) def dfs(node: int) -> int: if node == target: return 1 count = 0 for child in tree[node]: count += dfs(child) return count return dfs(1)"},{"question":"You are given a string expression containing only the characters \'0\', \'1\', \'&\', and \'|\'. These characters represent boolean values and boolean operations: - \'0\' represents False - \'1\' represents True - \'&\' represents the AND operation - \'|\' represents the OR operation Your task is to evaluate the expression following normal boolean logic rules. Note that there are no parentheses in the expression and that the operations have a predefined priority: AND (\'&\') has higher priority than OR (\'|\'). For example, in the expression `1|0&1`, the AND operation will be performed first, resulting in `1|0` which then evaluates to `1`. The expression will be evaluated from left to right for operators with the same priority. Implement a function that takes such a string expression and evaluates the result as \'0\' (False) or \'1\' (True). # Input - A single string expression `s` (1 ≤ |s| ≤ 10^5). The string contains only the characters \'0\', \'1\', \'&\', and \'|\'. # Output - Output a single character \'0\' or \'1\', representing the result of the evaluated boolean expression. # Example ```python Input: \\"1|0&1&1\\" Output: \\"1\\" ``` ```python Input: \\"0|0&1|0\\" Output: \\"0\\" ``` # Explanation In the first example, the expression `1|0&1&1` evaluates as follows: - First, evaluate the `&` operations: - `0&1` results in `0` - `0&1` results in `0` - The expression is now `1|0&0` - Next, evaluate the remaining `&` operation: - `0&0` results in `0` - Finally, evaluate the `|` operation: - `1|0` results in `1` In the second example, the expression `0|0&1|0` evaluates as follows: - First, evaluate the `&` operation: - `0&1` results in `0` - The expression is now `0|0|0` - Finally, evaluate the `|` operations from left to right: - `0|0` results in `0` - `0|0` results in `0`","solution":"def evaluate_boolean_expression(expression): Evaluates a boolean expression containing \'0\', \'1\', \'&\', and \'|\' # Step 1: Handle all AND operations first and_segments = expression.split(\'|\') and_results = [] for segment in and_segments: and_result = \'1\' for char in segment.split(\'&\'): if char == \'0\': and_result = \'0\' break and_results.append(and_result) # Step 2: Handle all OR operations result = \'0\' for res in and_results: if res == \'1\': result = \'1\' break return result"},{"question":"Kate is training to become a top-tier software engineer, and she has encountered a challenge involving array manipulation. She needs your help to solve it efficiently. Given an array `arr` of integers, create a function that rearranges the elements of the array such that even numbers appear before odd numbers, maintaining the relative order of even and odd numbers. You need to implement the function with the following signature: `def rearrange_array(arr: List[int]) -> List[int]` Input: The input consists of two lines. - The first line contains the number of test cases, `T`. - The next `T` lines contain the test case arrays, each represented as a space-separated list of integers. Output: For each test case, the function should return the rearranged array, printed as space-separated integers on a new line. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ length of each array ≤ 10^3 - -10^3 ≤ arr[i] ≤ 10^3 Examples: Input: 3 3 1 2 4 6 3 5 8 7 1 2 3 4 5 6 Output: 2 4 3 1 6 8 3 5 7 2 4 6 1 3 5 Explanation: - For the first test case, the even numbers [2, 4] are ordered before the odd numbers [3, 1]. - For the second test case, the even numbers [6, 8] are ordered before the odd numbers [3, 5, 7]. - For the third test case, the even numbers [2, 4, 6] are ordered before the odd numbers [1, 3, 5].","solution":"from typing import List def rearrange_array(arr: List[int]) -> List[int]: Rearranges the elements of the array such that even numbers appear before odd numbers, maintaining the relative order of even and odd numbers. evens = [] odds = [] for num in arr: if num % 2 == 0: evens.append(num) else: odds.append(num) return evens + odds def process_test_cases(input_data: str) -> str: lines = input_data.strip().split(\\"n\\") T = int(lines[0]) # number of test cases results = [] for i in range(1, T + 1): arr = list(map(int, lines[i].split())) rearranged = rearrange_array(arr) results.append(\\" \\".join(map(str, rearranged))) return \\"n\\".join(results)"},{"question":"You are given an array of integers. In one operation, you can choose any subarray of the array (a contiguous segment) and perform one of the following actions: * Sort the subarray in non-decreasing order. * Sort the subarray in non-increasing order. Your task is to determine the minimum number of operations needed to sort the entire array in non-decreasing order. For example, consider the initial array [5, 4, 3, 2, 1]. To sort this array in non-decreasing order, one possible sequence of operations is: 1. Sort the entire array [5, 4, 3, 2, 1] in non-decreasing order. The array is now [1, 2, 3, 4, 5]. Another example is the array [3, 1, 2, 4, 5]. The sequence of operations can be: 1. Sort the subarray [3, 1, 2] in non-decreasing order. The array is now [1, 2, 3, 4, 5]. Given the array, find the minimum number of operations required to sort the entire array in non-decreasing order. Input The first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of two lines: - The first line contains one integer n (1 ≤ n ≤ 500). - The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Output For each test case, print one line containing the minimum number of operations required to sort the array in non-decreasing order. Example Input 3 5 5 4 3 2 1 5 3 1 2 4 5 4 4 3 1 2 Output 1 1 2","solution":"def min_operations_to_sort(t, test_cases): results = [] for case in test_cases: n, arr = case if arr == sorted(arr): results.append(0) elif arr == sorted(arr, reverse=True): results.append(1) elif arr[0] > arr[-1]: results.append(2) else: results.append(1) return results"},{"question":"Alex is maintaining a shopping list for an upcoming party and wants to keep it organized. He records the name of the item and the quantity needed in his list. However, sometimes he records the same item multiple times with different quantities, either in separate entries or in the same entry. Your task is to help Alex optimize the shopping list. Each item should appear only once in the final list, and its quantity should be the sum of all the quantities recorded for that item. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of entries in Alex\'s shopping list. The next n lines each contain a string (the item\'s name) and an integer (the quantity needed for that item). Item names are non-empty strings of lowercase English letters with lengths from 1 to 20. Quantities are positive integers not exceeding 100. Output Output the optimized shopping list. First print an integer m — the number of unique items on the list. The following m lines should each contain an item\'s name and the total quantity required. The order of items in the output does not matter. Examples Input 5 apples 4 bananas 2 apples 3 oranges 5 bananas 1 Output 3 apples 7 bananas 3 oranges 5 Input 3 bread 2 milk 1 bread 3 Output 2 bread 5 milk 1 Input 4 juice 6 water 2 juice 4 soda 3 Output 3 juice 10 water 2 soda 3","solution":"def optimize_shopping_list(n, items): Optimizes the shopping list by summing quantities of the same items. Parameters: n (int): Number of items in the original list. items (list): List of tuples where each tuple contains an item name and its quantity. Returns: list: A list of tuples with unique items and their total quantities. from collections import defaultdict item_dict = defaultdict(int) for item, quantity in items: item_dict[item] += quantity result = [(item, qty) for item, qty in item_dict.items()] return result"},{"question":"Determine if a string of parentheses is correctly balanced. A string is balanced if every opening parenthesis has a corresponding closing parenthesis and the pairs are properly nested. Function Signature: `def is_balanced(s: str) -> bool:` # Input - A single string `s` containing only characters \'(\' and \')\'. # Output - Return `True` if the string is balanced, otherwise return `False`. # Example Example 1: ``` Input s = \\"()()\\" Output True ``` Example 2: ``` Input s = \\"((())\\" Output False ``` Example 3: ``` Input s = \\"(()()(()))\\" Output True ``` Example 4: ``` Input s = \\"())(()\\" Output False ``` # Constraints - The length of string `s` is between 1 and 1000.","solution":"def is_balanced(s: str) -> bool: Returns True if the string of parentheses is balanced, otherwise False. # Initialize a counter to track balance balance = 0 # Iterate through each character in the string for char in s: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 # If balance goes negative, there are more closing than opening parentheses if balance < 0: return False # In the end, balance should be zero for the string to be balanced return balance == 0"},{"question":"Ted Mosby, a hopeless romantic, has a collection of books that he wants to organize on his bookshelf. As an architect, he prefers to place the books in a certain way based on their heights. He wants to stack the books such that the heights are strictly increasing from left to right. You are given an array of integers where each integer represents the height of a book. Ted can remove some books from his collection to achieve the desired stacking order. Write a program to find and print the length of the longest subsequence of books that can be left on the shelf so that their heights are in strictly increasing order. Input: The first line of the input contains an integer N, representing the number of books. The second line contains N space-separated integers, representing the heights of the books. Output: The output should be a single integer, the length of the longest strictly increasing subsequence of book heights. Constraints: 1 ≤ N ≤ 1000 1 ≤ height ≤ 10000 SAMPLE INPUT 6 5 1 8 3 6 9 SAMPLE OUTPUT 4","solution":"def length_of_lis(books): Returns the length of the longest increasing subsequence of book heights. if not books: return 0 n = len(books) dp = [1] * n for i in range(1, n): for j in range(i): if books[i] > books[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example usage: # if __name__ == \\"__main__\\": # N = int(input()) # books = list(map(int, input().split())) # print(length_of_lis(books))"},{"question":"In a mystical forest, there is a sequence of N magical stones arranged in a straight line. Each stone has a certain magic power which can be either a positive or negative integer. You, as a sorcerer, have the ability to select any contiguous subsequence of these stones and harness their collective magic power. Write a program to determine the maximum possible magic power that you can harness. This is equivalent to finding the maximum sum of a contiguous subsequence in the array of magic powers. Constraints * 1 ≤ N ≤ 10^5 * -10^4 ≤ magic power of each stone ≤ 10^4 * All input values are integers. Input Input is given from Standard Input in the following format: N magic_power_1 magic_power_2 ... magic_power_N Output Print the maximum possible magic power that can be harnessed. Examples Input 5 -2 1 -3 4 -1 Output 4 Input 8 -2 -3 4 -1 -2 1 5 -3 Output 7","solution":"def max_magic_power(N, magic_powers): This function finds the maximum sum of a contiguous subsequence in an array of magic powers. :param N: Number of stones (elements in the array) :param magic_powers: List of integers representing the magic powers of the stones :return: Maximum magic power that can be harnessed # Initialize current max and global max to the first element current_max = global_max = magic_powers[0] # Traverse through the array starting from the second element for power in magic_powers[1:]: # Update current max either by adding the current element to it or starting a new subarray from current element current_max = max(power, current_max + power) # Update the global max if the current max is greater than global max global_max = max(global_max, current_max) return global_max"},{"question":"A farming simulator game involves growing crops in a grid-like field. The field is represented by a 2D matrix where each cell contains an integer that denotes the height of the plant in meters. The player can water the plants, which increases the height of every plant in a sub-rectangle of the field by a fixed amount. A watering operation is defined by four integers: r1, c1, r2, c2, and an increment value k. The operation increases the height of all plants located in the sub-rectangle with the top-left corner at (r1, c1) and the bottom-right corner at (r2, c2) by k meters. Given the field and a list of watering operations, compute the height of each plant after performing all the operations. Input The first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the field. The next n lines each contain m integers, describing the initial heights of the plants. The subsequent line contains an integer q (1 ≤ q ≤ 100) — the number of watering operations. The following q lines each contain five integers: r1, c1, r2, c2, and k (0 ≤ r1 ≤ r2 < n, 0 ≤ c1 ≤ c2 < m, 1 ≤ k ≤ 100). Output Print n lines, each containing m integers, which represent the final heights of the plants. Examples Input 3 3 1 2 3 4 5 6 7 8 9 2 0 0 1 1 1 1 1 2 2 2 Output 2 3 3 5 8 8 7 10 11 Input 2 2 1 1 1 1 1 0 0 1 1 5 Output 6 6 6 6","solution":"def water_plants(field, operations): n = len(field) m = len(field[0]) for r1, c1, r2, c2, k in operations: for i in range(r1, r2+1): for j in range(c1, c2+1): field[i][j] += k return field # Function to handle the complete flow def simulate_watering(n, m, field, q, operations): result = water_plants(field, operations) return result"},{"question":"Given a sequence of n integers, you are required to determine if there exist any three integers in the sequence that sum to zero. If such a triplet exists, print \\"YES\\", otherwise print \\"NO\\". # Input The input consists of multiple datasets. Each dataset is given in the following format. The input ends on a line containing zero. - On the first line, a positive integer n (1 ≤ n ≤ 1000) represents the number of integers in the sequence. - The next n lines contain one integer each, representing the sequence elements (-1000 ≤ element ≤ 1000). # Output For each dataset, output \\"YES\\" if there exists any three integers in the sequence whose sum is zero. Otherwise, print \\"NO\\". # Example Input ``` 5 -10 20 10 -10 0 4 1 2 3 4 0 ``` Output ``` YES NO ``` # Note For the first dataset, the triplet (-10, 10, 0) sums to zero. For the second dataset, there are no three integers that sum to zero.","solution":"def check_triplet_sum_zero(dataset): Returns \\"YES\\" if there exists any three integers in the sequence whose sum is zero. Returns \\"NO\\" otherwise. results = [] for data in dataset: n = data[0] sequence = data[1:] found = False # Sorting the sequence to use 3-pointer technique sequence.sort() for i in range(n - 2): if found: break left = i + 1 right = n - 1 while left < right: total = sequence[i] + sequence[left] + sequence[right] if total == 0: found = True break elif total < 0: left += 1 else: right -= 1 if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A new coding question that matches the style, complexity, and scope of the provided question: A distribution network comprises several nodes connected by edges, representing the pathways goods can be transported from one node to another. Each node may have multiple edges connecting it to other nodes. A critical challenge is to find a pathway from a starting node to a destination node that passes through a specified sequence of intermediate nodes in the given order. You are given a list of connection paths and you are asked whether it\'s possible to reach from a starting node to a destination node following the specified sequence of intermediate nodes. Input The input consists of several data sets. Each data set conforms to the following structure: Line 1: Number of nodes N (1 <= N <= 100) and number of edges M (1 <= M <= 1000). Next M lines: Each line contains two integers u and v, representing an edge between node u and node v. (1 <= u, v <= N) Next line: Starting node S and destination node D (1 <= S, D <= N) Next line: A sequence of intermediate nodes, where each pair of consecutive nodes in the sequence should be visited in order (There will be no more than N intermediate nodes, and they will be distinct). Output Each line should output \\"YES\\" if it is possible to travel from the starting node S to the destination node D passing through the intermediate nodes in the given order; otherwise, it should output \\"NO\\". Example Input 5 5 1 2 2 3 3 4 4 5 2 4 1 5 2 3 4 3 2 1 2 2 3 1 2 2 3 1 2 1 3 Output YES NO","solution":"def create_graph(edges, N): graph = {i: [] for i in range(1, N + 1)} for u, v in edges: graph[u].append(v) graph[v].append(u) return graph def dfs(graph, current, target, visited, sequence=None, seq_index=0): if seq_index < len(sequence) and current != sequence[seq_index]: return False if current == target and seq_index == len(sequence) - 1: return True visited.add(current) for neighbor in graph[current]: if neighbor not in visited: if dfs(graph, neighbor, target, visited, sequence, seq_index + 1): return True visited.remove(current) return False def is_path_possible(N, M, edges, start, destination, sequence): graph = create_graph(edges, N) if not sequence: sequence = [start, destination] else: sequence = [start] + sequence + [destination] visited = set() return dfs(graph, start, destination, visited, sequence) # Example Usage: N = 5 M = 5 edges = [(1, 2), (2, 3), (3, 4), (4, 5), (2, 4)] start = 1 destination = 5 sequence = [2, 3, 4] print(\\"YES\\" if is_path_possible(N, M, edges, start, destination, sequence) else \\"NO\\") N = 3 M = 2 edges = [(1, 2), (2, 3)] start = 1 destination = 2 sequence = [3] print(\\"YES\\" if is_path_possible(N, M, edges, start, destination, sequence) else \\"NO\\")"},{"question":"BingLand is famous for its scenic river channels and floating markets. As tourism is growing, the government has decided to build a network of bridges to connect various islands. There are N islands in BingLand, each uniquely numbered from 1 to N. Each island must be connected with at least one other island to form a complete network, ensuring tourists can visit any island from any other island, either directly or through a series of bridges. There are M potential bridges, where each bridge can connect two islands. Each bridge has a construction cost associated with it. The government aims to minimize the total construction cost while ensuring all islands are interconnected. You are to determine the minimum total cost required to build the network of bridges that connects all islands. Input The first line contains two integers, N (1 ≤ N ≤ 10^4) - the number of islands, and M (1 ≤ M ≤ 10^5) - the number of potential bridges. Each of the next M lines contains three integers u, v (1 ≤ u, v ≤ N), and c (1 ≤ c ≤ 10^6) - denoting a bridge between islands u and v with a construction cost c. Output Output the minimum total construction cost required to connect all islands. If it is not possible to connect all islands, output -1. Example Input 4 5 1 2 10 2 3 15 3 4 20 4 1 25 2 4 30 Output 45","solution":"def find(parent, x): if parent[x] != x: parent[x] = find(parent, parent[x]) return parent[x] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def kruskal(n, edges): edges.sort(key=lambda x: x[2]) parent = list(range(n)) rank = [0] * n minCost = 0 edgesUsed = 0 for u, v, cost in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) minCost += cost edgesUsed += 1 if edgesUsed == n - 1: break return minCost if edgesUsed == n - 1 else -1 def minimum_cost_to_connect_islands(n, m, bridges): edges = [(u - 1, v - 1, c) for u, v, c in bridges] # Convert to 0-based index return kruskal(n, edges)"},{"question":"You are given an N x M grid of integers. Your task is to find the number of cells that are strictly greater than all of their neighboring cells. A neighboring cell is one that is directly adjacent horizontally or vertically (not diagonally). Constraints * 1 leq N, M leq 1000 * 1 leq grid[i][j] leq 10^9 Input The input is given from Standard Input in the following format: N M grid_1_1 grid_1_2 ... grid_1_M grid_2_1 grid_2_2 ... grid_2_M ... grid_N_1 grid_N_2 ... grid_N_M Output Print the number of cells that are strictly greater than all of their neighboring cells. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 1 Input 4 4 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 Output 1 Input 3 3 9 8 7 6 5 4 3 2 1 Output 1","solution":"def count_strictly_greater_cells(grid): Returns the count of cells that are strictly greater than all of their neighboring cells. def is_greater(row, col): value = grid[row][col] for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = row + dr, col + dc if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]): if value <= grid[nr][nc]: return False return True count = 0 for r in range(len(grid)): for c in range(len(grid[0])): if is_greater(r, c): count += 1 return count def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = [] index = 2 for i in range(N): row = list(map(int, data[index:index + M])) grid.append(row) index += M print(count_strictly_greater_cells(grid)) if __name__ == \\"__main__\\": main()"},{"question":"Alice is trying to make some money from her small lemonade stand. She has an array where each element represents the number of lemons Alice has available on a particular day. However, some days she can\'t sell lemonade due to bad weather. If more than half of the days are rainy, Alice will make no profit at all. Alice can perform one special operation: she can select any two days and swap the number of lemons between these two days. This operation can only be performed once. Alice wants to know if, by using the special operation, she can ensure that on non-rainy days, the number of lemons is arranged in non-decreasing order. Given the forecast of the next n days where `1` represents a non-rainy day and `0` represents a rainy day, and the array of lemons available on these days, help Alice determine if she can make any lemonade profit by rearranging the lemons with at most one swap operation. **Input** The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^4)—the number of test cases. For each test case: - The first line contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of days. - The second line contains an array of n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — representing whether the day is non-rainy (1) or rainy (0). - The third line contains an array of n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9) — the number of lemons on each day. It is guaranteed that the total sum of n over all test cases doesn\'t exceed 2 ⋅ 10^5. **Output** For each test case, print \\"YES\\" if it is possible to rearrange the lemons such that on non-rainy days the lemons are in non-decreasing order with at most one swap operation. Otherwise, print \\"NO\\". **Example** **Input** 5 3 1 1 0 3 2 1 4 0 1 0 1 1 4 2 3 5 1 1 1 0 1 5 3 2 1 4 4 1 1 1 1 1 3 2 4 3 0 0 0 2 3 1 **Output** YES YES NO YES YES **Note** In the first test case, the number of lemons on non-rainy days is already in non-decreasing order: [3, 2] In the second test case, swapping the lemons on the second and fourth days will result in [1, 3] on non-rainy days, which is in non-decreasing order. In the third test case, no single swap can sort the lemons on non-rainy days in non-decreasing order. In the fourth test case, the lemons on non-rainy days are already sorted in non-decreasing order: [1, 3, 2, 4]. In the fifth test case, all the days are rainy, so Alice can ensure the lemons are sorted as needed.","solution":"def can_rearrange_lemonade(n, a, b): Determines if it\'s possible to rearrange the lemons on non-rainy days such that they are in non-decreasing order by performing at most one swap. non_rainy_days = [b[i] for i in range(n) if a[i] == 1] if len(non_rainy_days) <= 1: return \\"YES\\" sorted_non_rainy_days = sorted(non_rainy_days) if non_rainy_days == sorted_non_rainy_days: return \\"YES\\" # Check if a single swap can solve the problem for i in range(len(non_rainy_days)): for j in range(i+1, len(non_rainy_days)): non_rainy_days[i], non_rainy_days[j] = non_rainy_days[j], non_rainy_days[i] if non_rainy_days == sorted_non_rainy_days: return \\"YES\\" non_rainy_days[i], non_rainy_days[j] = non_rainy_days[j], non_rainy_days[i] return \\"NO\\" def solve(t, test_cases): results = [] for i in range(t): n, a, b = test_cases[i] result = can_rearrange_lemonade(n, a, b) results.append(result) return results"},{"question":"Robot Robo is navigating a grid to collect unique items. The grid is represented by a 2D array where each cell contains a unique item. Robo starts at the top-left corner of the grid (0, 0) and aims to end at the bottom-right corner (n-1, n-1). Robo can only move right or down at each step. To make Robo’s task achievable within the constraints, we need to calculate the number of unique paths Robo can take from the start to the end. Each path should ensure that Robo collects every item exactly once. Your task is to implement a function `unique_paths(n: int) -> int` that calculates the number of unique paths for Robo given the size of the grid. # Input The input consists of a single integer n (1 ≤ n ≤ 10) representing the size of the n x n grid. # Output The function should output a single integer — the number of unique paths from the top-left corner to the bottom-right corner of the grid. # Examples Example 1 **Input:** ``` 2 ``` **Output:** ``` 2 ``` **Explanation:** Robo can take the following paths: - Move right, then down - Move down, then right Example 2 **Input:** ``` 3 ``` **Output:** ``` 6 ``` **Explanation:** Robo can take the following paths: - Move right, right, down, down - Move right, down, right, down - Move right, down, down, right - Move down, down, right, right - Move down, right, down, right - Move down, right, right, down Each path ensures Robo collects all items exactly once.","solution":"def unique_paths(n: int) -> int: Calculate number of unique paths in an n x n grid from top-left to bottom-right. # Create a 2D list (n x n) to store results of subproblems dp = [[0] * n for _ in range(n)] # The only way to get to any cell in the first row or first column # is to move only right or only down respectively for i in range(n): dp[i][0] = 1 dp[0][i] = 1 # Fill the dp array for i in range(1, n): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] # The bottom-right cell has the number of unique paths return dp[n - 1][n - 1]"},{"question":"You are given an integer array `arr` consisting of `n` integers. You can perform the following move any number of times (possibly, zero): * Reverse any subarray of length `k` (i.e., you can reverse any contiguous subarray consisting of exactly `k` elements). Your task is to determine if it is possible to convert the array `arr` into an array in non-decreasing order by performing the move described above any number of times. Input The first line of the input contains two integers `n` and `k` (1 ≤ n ≤ 100, 1 ≤ k ≤ n) — the length of the array and the length of the subarray to be reversed, respectively. The second line contains `n` integers `arr_1, arr_2, ..., arr_n` (1 ≤ arr_i ≤ 10^9) — the elements of the array. Output If it is possible to sort the array using the described moves, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 5 3 3 1 2 5 4 Output YES Input 6 2 5 3 2 6 1 4 Output NO Note In the first example, one way to sort the array is as follows: Reverse the subarray from the second to the fourth elements [1, 2, 3] to get the array [3, 2, 1, 5, 4], then reverse the subarray from the first to the third elements [3, 2, 1] to get the array [1, 2, 3, 5, 4] and lastly reverse the subarray from the fourth to the sixth elements [5, 4] to get the array [1, 2, 3, 4, 5]. In the second example, it is not possible to sort the array since reversing any subarray of length 2 will not be able to arrange the elements in non-decreasing order.","solution":"def can_sort_via_reversals(n, k, arr): Determines if it is possible to sort the array using the described moves. Parameters: n (int): Length of the array k (int): Length of the subarray to be reversed arr (list of int): The elements of the array Returns: str: \'YES\' if the array can be sorted, otherwise \'NO\' if k == 1: return \'YES\' if arr == sorted(arr) else \'NO\' sorted_arr = sorted(arr) for i in range(k): if arr[i::k] != sorted(arr[i::k]): return \'NO\' return \'YES\'"},{"question":"Alex has a group of friends. He wants to keep track of their birthdays using a special calendar application he has created. Each friend is identified by a unique integer ID, and each birthday is recorded as a date with the format \\"mm-dd\\" (month-day). Alex wants to know how many friends have their birthdays in each month. Write a program that helps Alex find the distribution of birthdays over the months. Input The first line contains an integer T, the number of test cases. Each test case starts with an integer N, representing the number of friends Alex has. The next N lines each contain an integer ID followed by a birthday in the format \\"mm-dd\\". Output For each test case, output a single line with 12 integers, representing the number of friends having their birthdays in each month from January to December. Constraints 1 ≤ T ≤ 20 1 ≤ N ≤ 100 IDs are unique integers between 1 and 1000, inclusive Birthdays are valid dates in the format \\"mm-dd\\" Sample Input 2 3 1 05-15 2 07-20 3 12-31 4 1 01-01 2 01-15 3 05-05 4 12-25 Sample Output 0 0 0 0 1 0 1 0 0 0 0 1 2 0 0 0 1 0 0 0 0 0 0 1 Explanation In the first case, there are birthdays in May, July, and December. Hence the output has 1s in the 5th, 7th and 12th positions. In the second case, there are two birthdays in January, one in May, and one in December. Hence the output has 2 in the 1st position, 1 in the 5th position and 1 in the 12th position.","solution":"def birthday_distribution(test_cases): results = [] for case in test_cases: N = case[\'N\'] birthdays = case[\'birthdays\'] monthly_counts = [0] * 12 for birthday in birthdays: month = int(birthday.split(\'-\')[0]) monthly_counts[month - 1] += 1 results.append(monthly_counts) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 birthdays = [] for _ in range(N): _, birthday = lines[index].split() birthdays.append(birthday) index += 1 test_cases.append({\'N\': N, \'birthdays\': birthdays}) return test_cases def format_output(results): return \'n\'.join(\' \'.join(map(str, result)) for result in results) # Example usage input_str = 2 3 1 05-15 2 07-20 3 12-31 4 1 01-01 2 01-15 3 05-05 4 12-25 test_cases = parse_input(input_str) results = birthday_distribution(test_cases) output_str = format_output(results) print(output_str)"},{"question":"A traveling scientist is tasked with exploring a series of experimental sites to collect data. Each site is connected to a number of other sites by corridors. The scientist has a specific number of experiments to conduct, represented by an integer X. The total distance the scientist must travel to conduct exactly X experiments is free; otherwise, an additional fee will be incurred. The scientist can revisit any site multiple times but cannot travel immediately back to the same site. To help the scientist, you must write a program that determines whether the scientist can visit the designated end site after conducting exactly X experiments without incurring fees. If it is possible, return \\"` reachable `\\" or \\"` unreachable `\\" if it is not. Sites are numbered from 1 to S, with the starting site being 1 and the designated end site being S. The map of corridors is given by a series of connections between pairs of sites. It is guaranteed that there is no corridor connecting the same sites, and there is at most one corridor connecting any pair of sites. Input The input consists of multiple datasets. Each dataset is given in the following format. S C X v1 w1 v2 w2 ... vC wC S is the total number of sites, C is the total number of corridors, and X is the number of experiments (steps) that must be conducted. vi and wi (1 ≤ i ≤ C) are integers representing site numbers, indicating a corridor between sites vi and wi respectively. S, C, X are positive integers and satisfy the following conditions: 2 ≤ S ≤ 50, 1 ≤ C ≤ 50, 0 <X <231. After the last dataset, there is a line that says \\"` 0 0 0 `\\". The number of datasets does not exceed 30. Output For each dataset, output a one-line string containing only \\"` reachable `\\" if the end site can be reached after conducting exactly X experiments, or \\"` unreachable `\\" if not. Example Input 2 1 1 1 2 2 1 2 1 2 3 2 2 1 2 2 3 4 4 3 1 2 2 3 3 4 4 1 0 0 0 Output reachable unreachable reachable reachable","solution":"def find_paths_to_target(graph, start, target, steps, current_steps, visited): if current_steps > steps: return False if current_steps == steps and start == target: return True for neighbor in graph[start]: if current_steps == 0 or visited[current_steps-1] != neighbor: visited[current_steps] = neighbor if find_paths_to_target(graph, neighbor, target, steps, current_steps + 1, visited): return True visited[current_steps] = None return False def can_reach_end(S, C, X, connections): graph = {i: [] for i in range(1, S+1)} for v, w in connections: graph[v].append(w) graph[w].append(v) start = 1 target = S visited = [None] * (X + 1) return \\"reachable\\" if find_paths_to_target(graph, start, target, X, 0, visited) else \\"unreachable\\" def process_multiple_datasets(datasets): result = [] for data in datasets: S, C, X = data[\'SCX\'] connections = data[\'connections\'] result.append(can_reach_end(S, C, X, connections)) return result def parse_input(input_string): lines = input_string.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): S, C, X = map(int, lines[i].split()) if S == 0 and C == 0 and X == 0: break connections = [] for j in range(1, C + 1): v, w = map(int, lines[i + j].split()) connections.append((v, w)) datasets.append({\'SCX\': (S, C, X), \'connections\': connections}) i += C + 1 return datasets input_string = 2 1 1 1 2 2 1 2 1 2 3 2 2 1 2 2 3 4 4 3 1 2 2 3 3 4 4 1 0 0 0 datasets = parse_input(input_string) output = process_multiple_datasets(datasets) for line in output: print(line)"},{"question":"A company has developed a new algorithm that processes large datasets and operates on complex data structures. The development team needs to ensure that their algorithm performs efficiently and correctly on a variety of input scenarios. To achieve this, they need an automated testing tool that generates valid input data according to given specifications and tests the algorithm with this data. You have been tasked with creating a function `generate_and_test` that generates input data as per the specifications and tests the provided algorithm function with the generated data. # Specifications for Input Data: - The dataset contains `n` data points. - Each data point is a tuple of two integers `(a, b)`. - The integers `a` and `b` should satisfy the condition `1 <= a, b <= 100`. - The number of data points `n` should satisfy the condition `5 <= n <= 20`. # Algorithm Function: The provided algorithm function will process the list of generated data points and return a result. The testing tool should simply call this function with the generated data points and capture its output. Function Signature Your function should have the following signature: ```python def generate_and_test(algorithm_func): pass ``` Where: - `algorithm_func` is a function that takes a list of tuples as input and returns any result. Example of an Algorithm Function Here is an example of an algorithm function that might be passed to `generate_and_test`: ```python def example_algorithm(data): return sum(a + b for a, b in data) ``` Task Requirement Implement the `generate_and_test` function that: 1. Randomly generates a list of tuples (data points) according to the specified constraints. 2. Calls the provided algorithm function with the generated data points. 3. Captures and prints the output of the algorithm function. # Example Call ```python def example_algorithm(data): return sum(a + b for a, b in data) generate_and_test(example_algorithm) ``` # Output The output should only contain the result returned by the algorithm function when called with the generated data points. # Notes - You may use any standard library for generating random numbers. - Ensure that the generated data points meet all the specified constraints. - You do not need to handle invalid input cases, as the focus is on generating valid input data and testing the algorithm.","solution":"import random def generate_and_test(algorithm_func): Generates data points according to the given specifications and calls the provided algorithm function with these data points. # Generate a random number of data points between 5 and 20 n = random.randint(5, 20) # Generate n tuples with random integers between 1 and 100 data = [(random.randint(1, 100), random.randint(1, 100)) for _ in range(n)] # Call the provided algorithm function with the generated data result = algorithm_func(data) # Print the output of the algorithm function print(result) return result"},{"question":"Write a function `isPalindromeAfterRemovingExtraCharacters(s: str) -> bool` that takes a string `s` and checks if it can become a palindrome by removing at most two characters. A palindrome is a word that reads the same backward as forward (e.g., \\"madam\\", \\"racecar\\"). **Constraints:** - The string `s` will contain only lower-case alphabets and its length will be between 1 and 1000. Your function should return `True` if the string can be converted to a palindrome by removing at most two characters, otherwise it should return `False`. **Example:** ```python assert isPalindromeAfterRemovingExtraCharacters(\\"abcbxa\\") == True assert isPalindromeAfterRemovingExtraCharacters(\\"abcda\\") == False assert isPalindromeAfterRemovingExtraCharacters(\\"abcca\\") == True assert isPalindromeAfterRemovingExtraCharacters(\\"a\\") == True ``` **Explanation:** - In the first example \\"abcbxa\\", by removing character at index 3 (\'b\') and character at index 4 (\'x\'), we can convert it to \\"abcba\\" which is a palindrome. - In the second example \\"abcda\\", since it requires removing more than 2 characters, it cannot become a palindrome. - In the third example \\"abcca\\", by removing character at index 4 (\'a\') and character at index 4 (\'c\'), it becomes \\"acca\\" which is a palindrome.","solution":"def isPalindromeAfterRemovingExtraCharacters(s: str) -> bool: def is_palindrome_range(i, j): return all(s[k] == s[j - k + i] for k in range(i, j)) l, r = 0, len(s) - 1 while l < r: if s[l] != s[r]: return (is_palindrome_range(l + 1, r) or is_palindrome_range(l, r - 1)) l += 1 r -= 1 return True"},{"question":"Ravi is fascinated by ancient number systems and recently came across Roman numerals. He finds them intriguing but tough to read and convert. He decides to write a program that can convert Roman numerals to integers for easier understanding. However, he needs some help. Given a Roman numeral, write a function to convert it into its integer equivalent. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. | Symbol | Value | |--------|-------| | I | 1 | | V | 5 | | X | 10 | | L | 50 | | C | 100 | | D | 500 | | M | 1000 | Roman numerals are generally read from left to right, from highest to lowest. However, there are some instances where a smaller number appears before a larger number, which indicates subtraction rather than addition. For example: - IV is 4 (5 - 1) - IX is 9 (10 - 1) - LVIII is 58 (50 + 5 + 3) - MCMXCIV is 1994 (1000 + (1000 - 100) + (100 - 10) + (5 - 1)) Input: - The input contains a single string `s` representing the Roman numeral. Output: - Output the integer value corresponding to the given Roman numeral. Constraints: - 1 ≤ length of `s` ≤ 15 - `s` contains only the characters (\'I\', \'V\', \'X\', \'L\', \'C\', \'D\', \'M\'). Function Signature: int romanToInt(string s); Example Input: MCMXCIV Example Output: 1994 Note: You may assume that the input string is valid and corresponds to a valid Roman numeral in the range 1 to 3999.","solution":"def romanToInt(s): # Dictionary to map Roman numerals to their integer values roman_to_int = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } # Initialize result result = 0 # Iterate over the string i = 0 while i < len(s): # If this is the subtractive combination case if i + 1 < len(s) and roman_to_int[s[i]] < roman_to_int[s[i + 1]]: result += roman_to_int[s[i + 1]] - roman_to_int[s[i]] i += 2 else: result += roman_to_int[s[i]] i += 1 return result"},{"question":"Johnny is participating in a programming competition that consists of multiple coding tasks. Each task has a unique identifier and a specific difficulty level. Johnny only wants to pick certain tasks to work on, ensuring each picked task is of increasing difficulty to challenge himself progressively. Johnny knows the list of available tasks and their difficulties, and he wants to find the longest sequence of tasks where each subsequent task has a strictly higher difficulty than the previous one. Help Johnny determine the length of such a sequence. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of tasks available. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 10^5), where di represents the difficulty level of the ith task. Output Print one integer — the length of the longest sequence of tasks with strictly increasing difficulties. Examples Input 6 1 3 2 4 3 5 Output 4 Input 5 5 4 3 2 1 Output 1 Note In the first example, one of the longest sequences of tasks with increasing difficulties is 1, 2, 3, 5, which has a length of 4. In the second example, no sequence has increasing difficulties other than the individual tasks themselves, so the answer is 1.","solution":"def longest_increasing_subsequence(tasks): Returns the length of the longest subsequence with strictly increasing difficulties. if not tasks: return 0 n = len(tasks) lis = [1] * n for i in range(1, n): for j in range(i): if tasks[i] > tasks[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Problem description: Mina loves solving mathematical puzzles, and recently she came across an interesting one involving the sum of range of natural numbers. She found that the number of digits in the sum of a series can sometimes be surprising. Mina decided to write a program to help her understand the digit properties of such sums. You are to assist Mina by writing a program that computes the sum of the first N natural numbers and counts the number of digits in the resulting sum. Input Each sub-task contains a single integer N. There will be a total of 5 sub-tasks. Output For each sub-task, output a single line containing the result of the sum followed by the number of digits in that sum, separated by a space. Constraints 1 ≤ N ≤ 10^12 Example Input: 10 100 Output: 55 2 5050 4 Explanation: For the first example, the sum of the first 10 natural numbers is 55, which has 2 digits. For the second example, the sum of the first 100 natural numbers is 5050, which has 4 digits.","solution":"def sum_and_digit_count(N): Returns the sum of the first N natural numbers and the number of digits in the sum. Parameters: N (int): A positive integer representing the number of natural numbers to sum up. Returns: tuple: A tuple containing the sum and the count of digits in the sum. sum_N = N * (N + 1) // 2 digit_count = len(str(sum_N)) return sum_N, digit_count"},{"question":"In a distant fantasy world, there is a legendary sword known as Excalibur. This sword possesses magical powers and can transform its shape based on the wielder\'s desires. The sword can only transform into a particular sequence of characters (i.e., a specific shape) if that sequence is a subsequence of its initial shape. You are given two strings: the initial shape of Excalibur and the desired shape. Determine if it\'s possible for the sword to transform into the desired shape using its magical properties. Input: The first line of the input contains a string `initial` (1 ≤ |initial| ≤ 1000) — the initial shape of Excalibur. The second line contains a string `desired` (1 ≤ |desired| ≤ 1000) — the desired shape of Excalibur. Output: Print \\"YES\\" if it\'s possible for Excalibur to transform into the desired shape, and \\"NO\\" otherwise. Examples: Input: ``` excalibur xlr ``` Output: ``` YES ``` Input: ``` legendary ledgendaro ``` Output: ``` NO ``` Input: ``` magic mic ``` Output: ``` YES ``` Note: In the first example, \\"xlr\\" is a subsequence of \\"excalibur\\" because the characters \'x\', \'l\', and \'r\' appear in the same order in \\"excalibur\\". In the second example, \\"ledgendaro\\" cannot be formed from \\"legendary\\" because \'o\' is not present in \\"legendary\\". In the third example, \\"mic\\" is a subsequence of \\"magic\\".","solution":"def can_transform(initial, desired): Determines if \'desired\' is a subsequence of \'initial\'. Parameters: - initial (str): The initial shape of Excalibur. - desired (str): The desired shape of Excalibur. Returns: - str: \\"YES\\" if the transformation is possible, otherwise \\"NO\\". it = iter(initial) return \\"YES\\" if all(char in it for char in desired) else \\"NO\\""},{"question":"You are given a string representing a series of games played and the outcome of each game. The string is comprised of two characters: `W` and `L`, where `W` stands for a win and `L` stands for a loss. You need to determine the length of the longest winning streak in the given string. Constraints * 1 ≤ |G| ≤ 100 * Each character of G is `W` or `L`. Input Input is given from Standard Input in the following format: G Output Print the length of the longest winning streak. Examples Input WWLWLLWWW Output 3 Input LLL Output 0 Input WLLWLW Output 1","solution":"def longest_winning_streak(G): Returns the length of the longest winning streak in the given string G. max_streak = 0 current_streak = 0 for char in G: if char == \'W\': current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 0 return max_streak"},{"question":"For this problem, you will process a numeric string and identify various statistical properties of the digits. Specifically, you are required to calculate and print the sum, the mean (average), and the median of the digits. If the length of the numeric string is even, the median is the average of the two central digits; if it is odd, the median is the central digit. Constraints * The numeric string will have a length between 1 and 1000 digits. * The digits will be between \'0\' and \'9\'. Input The input is given as a single line containing a numeric string n. Output Print the sum, the mean (shown to 2 decimal places), and the median of the digits separated by a space in a single line. Example Input 123456 Output 21 3.50 3.50","solution":"def calculate_statistics(n): digits = [int(char) for char in n] digits.sort() # Sum of the digits total_sum = sum(digits) # Mean of the digits mean = total_sum / len(digits) # Median of the digits length = len(digits) if length % 2 == 0: median = (digits[length // 2 - 1] + digits[length // 2]) / 2 else: median = digits[length // 2] print(f\\"{total_sum} {mean:.2f} {median:.2f}\\")"},{"question":"Consider a grid of size `N x M` where each cell of the grid is either empty or blocked. You are initially positioned at the top-left cell (1, 1). Your goal is to reach the bottom-right cell (N, M). You can move to an adjacent cell if it is within the bounds of the grid and not blocked. You can move in four directions: up, down, left, or right. Write a program that determines the minimum number of moves required to reach the bottom-right cell from the top-left cell. If it is not possible to reach the destination, output `-1`. Input The input consists of multiple datasets. Each dataset is given in the following format: ``` N M grid ``` - The first line contains two integers `N` and `M` (1 ≤ N, M ≤ 1000) which denote the number of rows and columns of the grid respectively. - The next `N` lines each contain a string of length `M` consisting of characters representing the grid. The character \'.\' denotes an empty cell and \'#\' denotes a blocked cell. The end of input is indicated by a line containing two zeros (`0 0`). Output For each dataset, output the minimum number of moves required to reach the bottom-right cell from the top-left cell. If it is not possible, output `-1`. Example Input 3 3 ... .#. ... 3 3 #.# #.# ... 5 5 ..... .#.#. ..#.. .#.#. ..... 0 0 Output 4 -1 8","solution":"from collections import deque def min_moves_to_reach_end(N, M, grid): # Directions for moving in 4 possible ways (right, left, down, up) directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' # Check if the start or the end is blocked if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 # BFS setup queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set([(0, 0)]) while queue: x, y, dist = queue.popleft() if x == N-1 and y == M-1: return dist for direction in directions: nx, ny = x + direction[0], y + direction[1] if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist+1)) return -1 def process_grids(input_data): results = [] i = 0 while i < len(input_data): N, M = map(int, input_data[i].split()) if N == 0 and M == 0: break grid = input_data[i+1:i+1+N] results.append(min_moves_to_reach_end(N, M, grid)) i += N + 1 return results"},{"question":"Problem Description Mia is fascinated by strings and their properties. She is currently interested in balanced parentheses sequences. A sequence of parentheses is considered balanced if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\', and vice versa. Mia wants to know if a given string is a valid expression with balanced parentheses. She also wants to find the maximum depth of the nested parentheses in the given string. Your task is to help Mia by checking if the string is balanced, and if it is, determine the maximum depth of the nested parentheses. If the string is not balanced, simply return -1. Input The input consists of a single line containing a string S of length N comprising characters \'(\' and \')\'. Output Output a single line containing the maximum depth of the nested parentheses if the string is balanced, otherwise output -1. Constraints 1 ≤ N ≤ 10^5 Example Input: ((())) Output: 3 Explanation: The string \\"((()))\\" is balanced and the maximum depth is 3. Example Input: (())) Output: -1 Explanation: The string \\"(()))\\" is not balanced as there is one extra closing parenthesis.","solution":"def balanced_parentheses(s): Checks if the given string s is balanced and finds the maximum depth of nested parentheses. Args: s (str): A string consisting of characters \'(\' and \')\'. Returns: int: The maximum depth of nested parentheses if the string is balanced, otherwise -1. max_depth = 0 current_depth = 0 for char in s: if char == \'(\': current_depth += 1 max_depth = max(max_depth, current_depth) elif char == \')\': current_depth -= 1 if current_depth < 0: return -1 # Found more closing than opening parentheses if current_depth != 0: return -1 # Found more opening than closing parentheses return max_depth"},{"question":"Alex is working on a project management tool and needs to track the milestones achieved so far and the estimated completion dates. He needs to process a list of milestones and determine the latest and earliest possible completion dates. Given a list of milestones where each milestone has an actual completion date and an estimated completion date, write a function to determine the latest actual completion date and the earliest estimated completion date. The function should read an integer `N` from standard input representing the number of milestones, followed by `N` lines each containing two strings: the actual completion date and the estimated completion date in the format \\"YYYY-MM-DD\\". The function should output the latest actual completion date and the earliest estimated completion date. Constraints: * 1 leq N leq 10^5 * Each date string is a valid date in the format \\"YYYY-MM-DD\\". Input Input is given from Standard Input in the following format: N A1 E1 A2 E2 ... AN EN Output Print the latest actual completion date and the earliest estimated completion date, each on a new line. Examples Input 3 2023-01-15 2023-02-20 2023-01-25 2023-03-01 2023-01-10 2023-01-30 Output 2023-01-25 2023-01-30 Input 2 2023-05-20 2023-06-15 2023-05-18 2023-06-10 Output 2023-05-20 2023-06-10","solution":"def process_milestones(milestones): from datetime import datetime latest_actual = None earliest_estimated = None for milestone in milestones: actual_date, estimated_date = milestone actual_date = datetime.strptime(actual_date, \\"%Y-%m-%d\\") estimated_date = datetime.strptime(estimated_date, \\"%Y-%m-%d\\") if latest_actual is None or actual_date > latest_actual: latest_actual = actual_date if earliest_estimated is None or estimated_date < earliest_estimated: earliest_estimated = estimated_date return latest_actual.strftime(\\"%Y-%m-%d\\"), earliest_estimated.strftime(\\"%Y-%m-%d\\") def main(): import sys input = sys.stdin.read data = input().strip().split(\\"n\\") N = int(data[0]) milestones = [line.split() for line in data[1:]] latest_actual, earliest_estimated = process_milestones(milestones) print(latest_actual) print(earliest_estimated) if __name__ == \\"__main__\\": main()"},{"question":"Given an integer array `arr` of length `N`, and an integer `X`, write a program to determine the number of contiguous subarrays of `arr` whose sum is exactly `X`. # Input format The first line contains two integers `N` and `X` separated by a space, where `N` is the length of the array and `X` is the target sum. The second line contains `N` space-separated integers representing the array `arr`. # Constraints - (1 leq N leq 10^5) - (-10^9 leq arr[i] leq 10^9) - (-10^9 leq X leq 10^9) # Output format Print a single integer representing the number of contiguous subarrays whose sum equals `X`. # Example Input ``` 5 5 1 2 3 4 5 ``` Output ``` 2 ``` Explanation There are two subarrays that have a sum of `5`: - The subarray [2, 3] - The subarray [5] Input ``` 4 0 -1 1 -1 1 ``` Output ``` 4 ``` Explanation There are four subarrays that have a sum of `0`: - The subarray [-1, 1] - The subarray [1, -1] - The subarray [-1, 1] - The subarray [1, -1]","solution":"def count_subarrays_with_sum(arr, X): Return the number of contiguous subarrays whose sum is exactly X. subarray_count = 0 current_sum = 0 prefix_sum_counts = {0: 1} for num in arr: current_sum += num if (current_sum - X) in prefix_sum_counts: subarray_count += prefix_sum_counts[current_sum - X] if current_sum in prefix_sum_counts: prefix_sum_counts[current_sum] += 1 else: prefix_sum_counts[current_sum] = 1 return subarray_count"},{"question":"In a city, there is a peculiar style of numbering the houses. Houses on one side of a street are numbered 1, 3, 5, 7, and so on (the odd numbers), while houses on the other side of the street are numbered 2, 4, 6, 8, and so on (the even numbers). Given a house number, you need to determine two things: - On which side of the street the house is located. - The position of the house on that side of the street if the houses are arranged in ascending order of their numbers. For the purpose of this problem, let\'s assume that houses are linearly numbered on each side of the street starting from the lowest number. Write a program that takes a house number as input and outputs the side of the street and the position of the house on that side. **Input** The input consists of a single integer `n` (1 ≤ n ≤ 10^9) which represents the house number. **Output** The output should contain the side of the street (`left` or `right`) and the position of the house on that side separated by a space. Houses with odd numbers are on the \\"left\\" side and houses with even numbers are on the \\"right\\" side. **Example 1** ``` Input 5 Output left 3 ``` Explanation: House number 5 is on the left side and it is the 3rd house in the sequence of odd-numbered houses. **Example 2** ``` Input 8 Output right 4 ``` Explanation: House number 8 is on the right side and it is the 4th house in the sequence of even-numbered houses.","solution":"def house_side_and_position(n): Given a house number n, return the side of the street and the position of the house on that side. if n % 2 == 0: side = \\"right\\" position = n // 2 else: side = \\"left\\" position = (n // 2) + 1 return f\\"{side} {position}\\""},{"question":"In a parallel universe, there is a peculiar way of generating numbers. Starting from any given number n, the next number in the sequence is generated by reversing the digits of n and then adding it to the original number n. This process is repeated until a palindrome is produced. A palindrome is a number that reads the same forwards as backwards (e.g., 121 or 1331). You task is to write a function that, given a starting number n, returns the number of steps required to reach a palindrome and the resulting palindrome. Input Single integer n (0 ≤ n ≤ 10000). Output Two integers - the number of steps k required to reach a palindrome and the resulting palindrome. Examples Input 28 Output 2 121 Input 89 Output 24 8813200023188 Input 123 Output 1 444 Note In the first example, starting with 28: - Step 1: Reverse of 28 is 82. Adding them gives 110. - Step 2: Reverse of 110 is 011 which is 11. Adding them gives 121, which is a palindrome. So it takes 2 steps to reach the palindrome 121. In the second example, starting with 89, It takes 24 steps to reach the palindrome 8813200023188. In the third example, starting with 123: - Step 1: Reverse of 123 is 321. Adding them gives 444, which is a palindrome. So it takes 1 step to reach the palindrome 444.","solution":"def reverse_number(n): Reverses the digits of an integer. return int(str(n)[::-1]) def is_palindrome(n): Checks whether an integer is a palindrome. return str(n) == str(n)[::-1] def steps_to_palindrome(n): Returns the number of steps required to reach a palindrome and the resulting palindrome. steps = 0 while not is_palindrome(n): n += reverse_number(n) steps += 1 return steps, n"},{"question":"Given a sequence of integers, we categorize each number as either spiky or non-spiky. A number is considered spiky if it is greater than all its adjacent numbers. Note that the first and last elements of the sequence cannot be spiky since they have only one adjacent number. You are provided with a sequence of n integers. Your task is to find the total number of spiky numbers in the sequence. Input: The first line contains a single integer n (3 ≤ n ≤ 10^5) — the number of elements in the sequence. The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the sequence. Output: Print one integer, the number of spiky numbers in the sequence. Examples: Input: 6 1 3 2 5 4 6 Output: 2 Input: 5 9 7 8 5 4 Output: 1 Note: In the first test sample, the spiky numbers are 3 (greater than 1 and 2) and 5 (greater than 2 and 4). In the second test sample, the spiky number is 8 (greater than 7 and 5).","solution":"def count_spiky_numbers(sequence): Returns the number of spiky numbers in the sequence. n = len(sequence) if n < 3: return 0 # There cannot be any spiky numbers if the sequence is too short spiky_count = 0 for i in range(1, n - 1): if sequence[i] > sequence[i - 1] and sequence[i] > sequence[i + 1]: spiky_count += 1 return spiky_count"},{"question":"A prestigious university is organizing an interview process for selecting new candidates. Each candidate goes through a series of rounds. Each candidate must get a minimum score in every round to be considered for the final selection. The minimum score required in each round is represented by a list. You are given a list of lists where each sublist represents the scores of a candidate in each round. Calculate the number of candidates who pass all the rounds. For simplicity, let’s assume each list of scores for a candidate has the same length as the minimum scores list. Input The first line contains one integer n (1 ≤ n ≤ 1000) — the number of candidates. The second line contains m integers, the minimum scores required for m rounds (1 ≤ m ≤ 100). The next n lines contain m integers each, representing the scores of a candidate in each round. Output Output a single integer, the number of candidates who pass all the rounds. Example Input 3 70 80 90 90 80 95 70 79 85 71 85 91 Output 2 Input 4 50 60 70 55 65 75 45 60 80 50 61 70 52 63 70 Output 3","solution":"def count_passing_candidates(n, minimum_scores, candidate_scores): Returns the number of candidates who pass all the rounds. passing_count = 0 for scores in candidate_scores: if all(scores[i] >= minimum_scores[i] for i in range(len(scores))): passing_count += 1 return passing_count"},{"question":"Problem Statement Alice loves organizing events and she is currently planning a series of sports events at a local arena. The arena has M sections and each section can hold N people. However, Alice needs to ensure social distancing measures by arranging the seating such that no two people are sitting directly adjacent either horizontally, vertically, or diagonally. Help Alice determine the maximum number of people that can be seated in the arena while adhering to these social distancing rules. Input: The input comprises two integers, M and N, where: - M is the number of sections in the arena. - N is the number of people each section can hold. Output: The output should be a single integer, the maximum number of people that can be seated following the social distancing guidelines. Constraints: 1 ≤ M ≤ 100 1 ≤ N ≤ 100 Example: Input: 3 3 Output: 5 Explanation: In a 3x3 grid, the optimal seating arrangement like below allows a maximum of 5 people where \'P\' denotes a person and \'.\' an empty seat. P . P . P . P . P No two people are directly adjacent in any direction. Note: Multiple valid arrangements can achieve the same maximum seating. The output only needs to provide the maximum number, not the arrangement.","solution":"def max_people(M, N): Returns the maximum number of people that can be seated in an MxN grid following social distancing rules. # For optimal seating, we observe that one can place people in checkerboard pattern. # Thus every second cell can contain a person. if (M * N) % 2 == 0: return (M * N) // 2 else: return (M * N) // 2 + 1 # Example usage # max_people(3, 3) should return 5"},{"question":"You are given a list of integers representing the heights of a series of towers. The goal is to build a single tower by stacking these towers on top of each other. A tower can only be placed on top of another tower if the top of the current stack is of a smaller height than the tower being added. You need to determine the maximum possible height of the resulting single tower. Input The first line contains a single integer n (1 ≤ n ≤ 200,000) — the number of towers. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 200,000) — the heights of the towers. Output Output exactly one integer — the maximum possible height of the resulting single tower. Example Input 5 2 3 1 2 4 Output 4 Note The optimal solution in this example is to use the towers of heights 1, 2, 3, and 4 in ascending order to achieve a maximum height of 4. The tower of height 2 is used only once even though it appears twice in the input.","solution":"def max_possible_height(n, heights): Returns the maximum possible height of the resulting single tower when stacked according to the rules. # Remove duplicates and sort the heights unique_sorted_heights = sorted(set(heights)) # The maximum possible height is the number of unique heights return len(unique_sorted_heights)"},{"question":"In a bustling robotic community, the central system tracks the coordinates of each member bot to ensure smooth movement within the grid. The grid is represented as an m by n table where each cell can either be empty (\'.\') or occupied (\'B\'). The robotic central system needs to determine if it is possible to place two new bots (\'N\') at empty cells such that no two bots (either existing \'B\' or new \'N\') are in direct column or row line-of-sight of each other. Two bots are said to be in direct line-of-sight if they are in the same row or same column and there are no other bots, either \'B\' or \'N\', found between them in that row or column. Input The first line contains integers m and n (1 ≤ m, n ≤ 500), the dimensions of the grid. The next m lines contain n characters each, either \'.\' or \'B\', representing the initial state of the grid. Output Print \\"YES\\" if it\'s possible to place two new bots such that there is no pair of bots in direct line-of-sight of each other. Otherwise, print \\"NO\\". Examples Input 5 5 ..... .B... ..... ..B.. ..... Output YES Input 3 4 .... .B.. .... Output YES Input 2 3 .B. .B. Output NO","solution":"def can_place_two_bots(m, n, grid): rows = [0] * m cols = [0] * n for i in range(m): for j in range(n): if grid[i][j] == \'B\': rows[i] = 1 cols[j] = 1 empty_cells = [(i, j) for i in range(m) for j in range(n) if grid[i][j] == \'.\'] for i in range(len(empty_cells)): for j in range(i+1, len(empty_cells)): (r1, c1), (r2, c2) = empty_cells[i], empty_cells[j] if r1 != r2 and c1 != c2 and rows[r1] == 0 and rows[r2] == 0 and cols[c1] == 0 and cols[c2] == 0: return \\"YES\\" return \\"NO\\""},{"question":"Anna is organizing a charity event and needs to assign volunteers to tasks for the event. She has a list with the number of volunteers signed up for each task and a target number of volunteers required for each task. Anna wants to check if the current volunteer assignments meet or exceed the target for each task. Write a program that reads the number of signed-up volunteers and the target number of volunteers for each task. The program should then output whether each task has \\"enough\\" volunteers or \\"deficient\\". Input The input consists of two rows: - The first row contains five integers, each between 0 and 100 inclusive, representing the number of volunteers signed up for each of the five tasks. - The second row contains five integers, each between 0 and 100 inclusive, representing the target number of volunteers needed for each of the five tasks. Output Print a single line with five words. The j-th word is \\"enough\\" if the number of signed-up volunteers for the j-th task is greater than or equal to the target number of volunteers, otherwise it is \\"deficient\\". Examples Input 5 10 3 7 2 3 12 3 5 2 Output enough deficient enough enough enough Input 8 15 20 3 10 10 15 18 4 10 Output deficient enough enough deficient enough","solution":"def volunteer_status(signed_up, target): Returns a list of status for each task, indicating whether the number of signed-up volunteers meets or exceeds the target. :param signed_up: A list of integers representing the number of signed-up volunteers for each task. :param target: A list of integers representing the target number of volunteers for each task. :return: A list of strings, either \\"enough\\" or \\"deficient\\" for each task. return [\\"enough\\" if s >= t else \\"deficient\\" for s, t in zip(signed_up, target)]"},{"question":"You are given an integer array `arr` and an integer `k`. Your task is to determine if there is a contiguous subarray of length `k` or more that contains at least `k` distinct integers. Input The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 2 ⋅ 10^5). The second line contains `n` integers `arr_1, arr_2, ..., arr_n` (1 ≤ arr_i ≤ 10^5). Output Print \\"YES\\" if there exists such a contiguous subarray, otherwise print \\"NO\\". Example Input 8 3 1 2 2 1 2 3 4 4 Output YES","solution":"def has_subarray_with_k_distinct_integers(arr, k): Determines if there is a contiguous subarray of length k or more that contains at least k distinct integers. if len(arr) < k: return \\"NO\\" from collections import defaultdict distinct_counts = defaultdict(int) distinct_total = 0 left = 0 for right in range(len(arr)): if distinct_counts[arr[right]] == 0: distinct_total += 1 distinct_counts[arr[right]] += 1 if right - left + 1 >= k: if distinct_total >= k: return \\"YES\\" if distinct_counts[arr[left]] == 1: distinct_total -= 1 distinct_counts[arr[left]] -= 1 left += 1 return \\"NO\\""},{"question":"You are given an array of integers which represents the amount of money each person has. You need to find out the minimum number of transactions required to ensure that all people have the same amount of money. Each transaction involves moving money from one person to another without splitting it. Input - The first line contains n (1 ≤ n ≤ 100) — the number of people. - The second line contains n integers representing the amount of money each person has. It is guaranteed that the sum of money is divisible by n. Output Print a single integer — the minimum number of transactions required to balance the amounts of money among all people. Examples Input 4 1 2 3 4 Output 2 Input 3 4 4 4 Output 0 Input 5 1 1 1 9 9 Output 4","solution":"def min_transactions(n, amounts): Returns the minimum number of transactions required to balance the amounts of money among all people. total_money = sum(amounts) average = total_money // n # Calculate how much each person needs to give/receive diffs = [amount - average for amount in amounts] # Filter out zero diffs (those who already have the average amount) and sort others filtered_diffs = [diff for diff in diffs if diff != 0] filtered_diffs.sort() # Calculate the number of transactions transactions = 0 left = 0 right = len(filtered_diffs) - 1 while left < right: neg = filtered_diffs[left] pos = filtered_diffs[right] if abs(neg) >= pos: transactions += 1 filtered_diffs[left] += pos right -= 1 if filtered_diffs[left] == 0: left += 1 else: transactions += 1 filtered_diffs[right] += neg left += 1 if filtered_diffs[right] == 0: right -= 1 return transactions"},{"question":"**Word Chain Validation** You are given a list of words where each word is formed of lowercase letters (a-z). We define a word chain as a list of words [w1, w2, ..., wn] such that for each consecutive pair of words (wi, wi+1), the last letter of wi is the same as the first letter of wi+1. Your task is to determine if the given list of words forms a valid word chain. Input: - The input will consist of multiple lines of words, each containing a single word. The list of words ends with a line containing the string \\"END\\" (quotes for clarity). Output: - Print \\"VALID CHAIN\\" (quotes for clarity) if the words form a valid chain. - Print \\"INVALID CHAIN\\" (quotes for clarity) otherwise. Example: Input: cat tiger rabbit tarantula apple elephant END Output: INVALID CHAIN Input: cat tiger rabbit tarantula apple elephant toy yak kite echo owlet tuna alpaca END Output: VALID CHAIN","solution":"def is_valid_word_chain(words): if not words: return False for i in range(len(words) - 1): if words[i][-1] != words[i + 1][0]: return False return True def check_word_chain(): words = [] while True: word = input().strip() if word == \\"END\\": break words.append(word) if is_valid_word_chain(words): print(\\"VALID CHAIN\\") else: print(\\"INVALID CHAIN\\")"},{"question":"A digital advertising platform serves ads to millions of users daily. Each user is shown a sequence of ads, and each ad is associated with a particular brand. The platform wants to analyze the impact of ad repetitions on user engagement, by checking how many consecutive ads from the same brand are shown in the sequence. Given an array `ads` of length `n` where each ad is represented by a character (each unique character represents a different brand), and an integer `t`, the task is to find the maximum number of consecutive ads from the same brand that appear in the sequence. Additionally, you are allowed to change up to `t` ads in the sequence to any other ad to maximize the number of consecutive ads from the same brand. Input The first line contains two integers n and t (1 ≤ n ≤ 105, 0 ≤ t ≤ n) — the number of ads in the sequence and the maximum number of ads that can be changed, respectively. The second line contains a string of n characters representing the ads. Output Print a single integer — the maximum number of consecutive ads from the same brand after performing up to `t` changes. Examples Input 10 2 aabacbebebe Output 5 Input 5 1 ababa Output 3 Note In the first sample, changing the first \'c\' and the first \'e\' to \'b\' results in the sequence \\"aabbbbbbbb\\" which has 5 consecutive \'b\'s. In the second sample, changing the second \'b\' to \'a\' results in the sequence \\"aaaab\\" which has 3 consecutive \'a\'s.","solution":"def max_consecutive_ads(n, t, ads): Returns the maximum number of consecutive ads from the same brand after performing up to t changes. Parameters: n (int): number of ads in the sequence t (int): maximum number of ads that can be changed ads (str): the sequence of ads represented by characters max_len = 0 ad_counts = {} left = 0 for right in range(n): ad_counts[ads[right]] = ad_counts.get(ads[right], 0) + 1 while (right - left + 1) - max(ad_counts.values()) > t: ad_counts[ads[left]] -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"In a car repair workshop, m repair jobs need to be completed. Each job is assigned a priority pi that indicates the urgency of the job, and it takes di units of time to complete. The workshop follows a priority-based scheduling where higher priority jobs (higher values of pi indicate higher priority) are processed first. If two jobs have the same priority, the job that comes earlier in the input list is processed first. Input Format On the first line you will get m, the number of repair jobs. Then m lines will follow. On each of the following m lines, you will get pi and di separated by a single space, indicating the priority and duration of the ith job. Output Format Print the order (as single space-separated integers) in which the repair jobs are completed. Constraints 1 ≤ m ≤ 1000 1 ≤ pi ≤ 100 1 ≤ di ≤ 100 SAMPLE INPUT 4 2 3 4 2 2 5 3 1 SAMPLE OUTPUT 2 4 1 3 Explanation The first repair job has a priority of 2 and takes 3 units of time. The second repair job has the highest priority of 4 and takes 2 units of time. The third repair job has a priority of 2 and takes 5 units of time. The fourth repair job has a priority of 3 and takes 1 unit of time. Sorting the jobs by priority (highest first), and by their input order when priorities are equal, we get the order 2 4 1 3.","solution":"def order_of_repairs(m, jobs): Determines the order in which repair jobs should be completed based on priority. Parameters: m (int): The number of repair jobs. jobs (list of tuples): Each tuple contains two integers pi (priority) and di (duration). Returns: list of int: The order in which the repair jobs are completed. indexed_jobs = [(i+1, jobs[i][0], jobs[i][1]) for i in range(m)] indexed_jobs.sort(key=lambda x: (-x[1], x[0])) return [job[0] for job in indexed_jobs] # Example usage: m = 4 jobs = [(2, 3), (4, 2), (2, 5), (3, 1)] print(order_of_repairs(m, jobs)) # Output: [2, 4, 1, 3]"},{"question":"You are developing a multiplayer online game, and you need to implement the leaderboard feature. Each player\'s score should be recorded and sorted in descending order so that the highest score appears at the top of the list. Write a function that takes a list of pairs, where each pair consists of a player\'s name (a string) and their score (an integer). The function should output the names of the players sorted by their scores in descending order. If two players have the same score, their names should appear in alphabetical order. Input A list of pairs where each pair is formatted as (\'player_name\', score). The list contains between 1 and 1000 elements. Output A single list of player names sorted first by score in descending order and then alphabetically by player name for ties. Example Input: [ (\\"Alice\\", 1500), (\\"Bob\\", 1200), (\\"Charlie\\", 1500), (\\"David\\", 1000) ] Output: [\\"Alice\\", \\"Charlie\\", \\"Bob\\", \\"David\\"] Explanation - Alice and Charlie both have a score of 1500, but \\"Alice\\" comes before \\"Charlie\\" alphabetically. - Bob has a score of 1200, which places him after Alice and Charlie. - David has the lowest score of 1000.","solution":"def leaderboard(players_scores): Sorts a list of player\'s names and their scores in descending order by score. If two players have the same score, they are sorted alphabetically by their names. Args: players_scores (list of tuple): List of tuples where each tuple contains a player\'s name (string) and their score (int). Returns: list: A list of players\' names sorted by their scores in descending order. # Sort the list first alphabetically then by scores in descending order sorted_players = sorted(players_scores, key=lambda x: (-x[1], x[0])) # Extract and return just the names from the sorted list of tuples return [player[0] for player in sorted_players]"},{"question":"A city planning department is looking to optimize its public transportation schedules to minimize the wait time for commuters. They need your help to develop a solution that determines the minimum wait time one would have to wait to catch a bus if they knew their arrival time at the bus stop and the schedule of bus arrivals. You are given arrival times of buses in minutes past midnight in a sorted list and you know the commuter\'s arrival time at the bus stop in minutes past midnight. You need to develop an algorithm to find the minimum wait time for the commuter. Input The first line contains an integer n (1 ≤ n ≤ 10^5) - the number of buses in the schedule. The second line contains n space-separated integers t1, t2, ..., tn (0 ≤ ti < 1440), representing the bus arrival times in minutes past midnight, sorted in ascending order. The third line contains a single integer a (0 ≤ a < 1440) representing the commuter\'s arrival time at the bus stop in minutes past midnight. Output Print one integer - the minimum wait time for the commuter to catch a bus. Examples Input 5 15 45 90 120 360 100 Output 20 Input 4 0 180 360 540 200 Output 20 Input 3 720 1080 1300 1300 Output 0 Note In the first example, the commuter arrives at 100 minutes past midnight and the next bus arrives at 120 minutes, so the wait time is 20 minutes. In the second example, the commuter arrives at 200 minutes past midnight and the next bus is at 360 minutes, so the wait time is 160 minutes. But they would have to wait only 20 minutes if they take the previous bus which departed at 180 minutes. In the third example, the commuter arrives exactly at the same time as one of the buses, so the wait time is 0 minutes.","solution":"def find_minimum_wait_time(n, bus_times, arrival_time): Returns the minimum wait time for a commuter arriving at the bus stop at arrival_time. Parameters: n (int): Number of buses in the schedule. bus_times (list): Sorted list of bus arrival times in minutes past midnight. arrival_time (int): Commuter\'s arrival time at the bus stop in minutes past midnight. Returns: int: Minimum wait time in minutes. # If the commuter arrives exactly at a bus time if arrival_time in bus_times: return 0 # Find the next bus after the arrival time for bus_time in bus_times: if bus_time >= arrival_time: return bus_time - arrival_time # If there is no bus after the arrival_time, the commuter has to wait for the first bus the next day return (1440 - arrival_time) + bus_times[0]"},{"question":"In a chess game, each piece has a specific way it moves. The knight moves in an L-shape: two squares in one direction and then one square perpendicular to that, or vice versa. Given a knight\'s initial position on a standard 8x8 chessboard, your task is to determine all possible positions the knight can move to with a single move. A knight is represented by its initial position on the board using standard chess notation, like \'e4\'. The knight moves from this position to one of its potential target squares. Note that the knight cannot move outside the bounds of the chessboard. Input The input consists of one line containing the initial position of the knight in standard chess notation. Output Output all valid positions the knight can move to in standard chess notation, one per line. The output positions should be sorted first by file (\'a\' to \'h\') and then by rank (\'1\' to \'8\'). Example Input: f5 Output: d4 d6 e3 e7 g3 g7 h4 h6","solution":"def knight_moves(position): # Define the mapping of files to their respective indices file_to_index = {\'a\': 1, \'b\': 2, \'c\': 3, \'d\': 4, \'e\': 5, \'f\': 6, \'g\': 7, \'h\': 8} index_to_file = {v: k for k, v in file_to_index.items()} # Define the possible moves for a knight moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] # Initialize the list for the valid moves valid_moves = [] # Extract the initial file and rank initial_file = position[0] initial_rank = int(position[1]) # Calculate the initial coordinates initial_x = file_to_index[initial_file] initial_y = initial_rank # Generate all possible moves for dx, dy in moves: new_x = initial_x + dx new_y = initial_y + dy if 1 <= new_x <= 8 and 1 <= new_y <= 8: valid_moves.append(index_to_file[new_x] + str(new_y)) # Sort the valid positions valid_moves.sort() return valid_moves"},{"question":"Given a list of integers A of length N. You can rotate any contiguous subarray of A up to K times. Each rotation moves the last element of the subarray to the front (equivalent to one right circular shift). Calculate the minimum possible value of the standard deviation of the list that can be achieved by applying the operations optimally. The standard deviation is defined as: [ sigma(A) = sqrt{frac{1}{N} sum_{i=0}^{N-1} (A_i - mu)^2} ] where mu is the mean of list A. Output the minimum possible value of the standard deviation of the list, formatted to four decimal places. # Input - An integer N (1 leq N leq 100): the length of the list. - An integer K (0 leq K leq 10): the number of allowable subarray rotations. - A list of N integers A_i (-1000 leq A_i leq 1000): the list of integers. # Output - A single floating-point number: the minimum standard deviation of the final list, up to four decimal places. # Example Input ``` 5 2 4 1 3 5 2 ``` Output ``` 1.4142 ```","solution":"import itertools import math def minimum_standard_deviation(N, K, A): def standard_deviation(arr): mean = sum(arr) / len(arr) variance = sum((x - mean) ** 2 for x in arr) / len(arr) return math.sqrt(variance) min_std_dev = standard_deviation(A) for length in range(1, N + 1): for i in range(N - length + 1): subarray = A[i:i + length] for _ in range(K + 1): subarray_rotated = subarray[-1:] + subarray[:-1] new_A = A[:i] + subarray_rotated + A[i + length:] min_std_dev = min(min_std_dev, standard_deviation(new_A)) subarray = subarray_rotated return round(min_std_dev, 4)"},{"question":"**Problem Statement** You are given an array of integers and a target value. Determine the number of unique triplets in the array which gives the sum of the target value. The triplets should only be counted if they are distinct; that means no two triplets can have the same set of numbers even in a different order. **Constraints** - The length of the array `n` is between 1 and 1000, inclusive. - Each integer in the array is in the range of [-10^6, 10^6]. - The target value `T` is also between [-10^6, 10^6]. **Input** The first line of the input contains two integers `n` and `T`. The second line contains `n` integers representing the elements of the array. **Output** Output a single integer representing the number of unique triplets that add up to the target value. **Examples** **Input** ``` 4 6 2 1 3 2 ``` **Output** ``` 1 ``` **Input** ``` 5 0 -1 0 1 2 -1 -4 ``` **Output** ``` 2 ```","solution":"def count_unique_triplets(arr, target): Determines the number of unique triplets in the array which sums up to the target value. arr.sort() triplets = set() for i in range(len(arr) - 2): left = i + 1 right = len(arr) - 1 while left < right: total = arr[i] + arr[left] + arr[right] if total == target: triplet = (arr[i], arr[left], arr[right]) triplets.add(triplet) left += 1 right -= 1 # To avoid duplicates while left < right and arr[left] == arr[left - 1]: left += 1 while left < right and arr[right] == arr[right + 1]: right -= 1 elif total < target: left += 1 else: right -= 1 return len(triplets)"},{"question":"You are given an M x N grid filled with non-negative integers representing the cost of entering each cell. Your task is to find a path from the top-left corner to the bottom-right corner (both included) such that the sum of the costs of the cells included in the path is minimized. At each step, you can only move right or down. Input Format The first line contains the number of test cases T. T test cases follow. For each test case, the first line contains two integers, M and N, representing the dimensions of the grid. The next M lines each contain N integers representing the cost grid. Output Format Output T lines, one for each test case, each containing the minimum cost. Constraints 1 ≤ T ≤ 10 1 ≤ M, N ≤ 100 0 ≤ Cost of each cell ≤ 100 SAMPLE INPUT 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 3 4 SAMPLE OUTPUT 7 7","solution":"def min_cost_path(grid): Find the minimum cost path in the given M x N grid from the top-left corner to the bottom-right corner. M = len(grid) N = len(grid[0]) # Create a 2D dp array with the same dimensions as grid dp = [[0 for _ in range(N)] for _ in range(M)] # Initialize the first cell with the value in grid dp[0][0] = grid[0][0] # Initialize the first row of dp array for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column of dp array for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, M): for j in range(1, N): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The answer will be in the bottom-right corner of dp array return dp[M-1][N-1] def process_cases(test_cases): results = [] for case in test_cases: M, N, grid = case results.append(min_cost_path(grid)) return results"},{"question":"Given an integer array nums, you need to find the length of the longest arithmetic subarray. An arithmetic subarray is a subarray that contains at least two integers and the differences between consecutive integers are the same. Write a function `longest_arithmetic_subarray` that takes in a list of integers `nums` (2 ≤ len(nums) ≤ 10^5) and returns an integer representing the length of the longest arithmetic subarray. # Input - A single line containing space-separated integers denoting the array `nums`. # Output - A single integer representing the length of the longest arithmetic subarray. # Example Input ``` 10 7 4 6 8 10 11 ``` Output ``` 4 ``` Input ``` 9 7 5 3 1 -1 -3 ``` Output ``` 7 ``` # Explanation In the first example, the longest arithmetic subarray is [4, 6, 8, 10] with a common difference of 2. In the second example, the entire array forms an arithmetic subarray with a common difference of -2. # Note - A subarray is a contiguous part of an array. - Consecutive differences need to be the same in the arithmetic subarray.","solution":"def longest_arithmetic_subarray(nums): if len(nums) < 2: return 0 max_len = 2 curr_len = 2 diff = nums[1] - nums[0] for i in range(2, len(nums)): if nums[i] - nums[i-1] == diff: curr_len += 1 else: diff = nums[i] - nums[i-1] curr_len = 2 max_len = max(max_len, curr_len) return max_len"},{"question":"Given an array of integers `A` of size `N`, and a target integer `T`, determine if there exist two distinct elements in `A` such that their sum is equal to `T`. If such a pair exists, print \\"YES\\", otherwise print \\"NO\\". # Input - The first line contains two integers `N` (number of elements in array `A`, where 2 ≤ N ≤ 1000) and `T` (the target sum, where -10^5 ≤ T ≤ 10^5). - The second line contains `N` integers representing the elements of the array `A` (where -10^5 ≤ A[i] ≤ 10^5). # Output - Print \\"YES\\" if there are two distinct elements in the array whose sum is equal to `T`. - Print \\"NO\\" otherwise. # Example Input ``` 5 9 1 2 3 5 4 ``` Output ``` YES ``` Input ``` 4 8 1 2 3 4 ``` Output ``` NO ``` # Explanation In the first example, the elements 5 and 4 add up to 9, so the output is \\"YES\\". In the second example, no two elements add up to 8, so the output is \\"NO\\".","solution":"def has_pair_with_sum(N, T, A): Returns \\"YES\\" if there are two distinct elements in A whose sum is equal to T, otherwise \\"NO\\". Parameters: N (int): Number of elements in the array T (int): The target sum A (list): The list of elements Returns: str: \\"YES\\" or \\"NO\\" seen = set() for number in A: complement = T - number if complement in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"Write a function that takes two strings as input and returns their longest common subsequence (LCS). The LCS of two sequences is the longest subsequence that is common to both sequences. A subsequence is a sequence derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. For example, the LCS of \\"ABCD\\" and \\"AEBD\\" is \\"ABD\\" with a length of 3. Input Two strings of uppercase English letters are given as input. The lengths of the strings do not exceed 1000. Output Output a single integer, the length of their longest common subsequence. Example Input AGGTAB GXTXAYB Output 4","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence between two strings. m, n = len(str1), len(str2) # Create a dp table to store lengths of longest common subsequence dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp table in bottom-up fashion for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The value at dp[m][n] is the length of the longest common subsequence return dp[m][n]"},{"question":"In a programming contest, participants submit multiple entries for various problems. Each submission is evaluated, and a result is assigned indicating the status of the submission. The results for each submission can be either \\"Accepted\\", \\"Wrong Answer\\", \\"Runtime Error\\", or \\"Compilation Error\\". You are given the number of submissions each participant has made and their respective results for the submissions. For simplicity, assume that the results are abbreviated as \\"A\\", \\"WA\\", \\"RE\\", and \\"CE\\". Your task is to count how many submissions fall under each category. Input The first line contains an integer N (1 ≤ N ≤ 100,000) - the number of submissions. The next N lines each contain the result of one submission, which is a string that can be either \\"A\\", \\"WA\\", \\"RE\\", or \\"CE\\". Output Print the number of submissions with each result in four lines in the following format: Accepted: X Wrong Answer: Y Runtime Error: Z Compilation Error: W Where X, Y, Z, and W are the counts of \\"A\\", \\"WA\\", \\"RE\\", and \\"CE\\" results respectively. Examples Input 5 A WA A RE CE Output Accepted: 2 Wrong Answer: 1 Runtime Error: 1 Compilation Error: 1 Input 4 A A A A Output Accepted: 4 Wrong Answer: 0 Runtime Error: 0 Compilation Error: 0","solution":"def count_submission_results(N, results): Counts the number of submissions in each category. Parameters: N (int): Number of submissions results (list of str): List of results for each submission Returns: dict: Dictionary with counts of each category counts = {\\"A\\": 0, \\"WA\\": 0, \\"RE\\": 0, \\"CE\\": 0} for result in results: if result in counts: counts[result] += 1 return counts def format_output(counts): Formats the output as required. Parameters: counts (dict): Dictionary with counts of each category Returns: str: Formatted output output = ( f\\"Accepted: {counts[\'A\']}n\\" f\\"Wrong Answer: {counts[\'WA\']}n\\" f\\"Runtime Error: {counts[\'RE\']}n\\" f\\"Compilation Error: {counts[\'CE\']}\\" ) return output"},{"question":"Given a list of integers, write a function that partitions the list into two sublists such that the sum of the elements in the first sublist is as close as possible to the sum of the elements in the second sublist. The function should return the two sublists as outputs. If there are multiple solutions, any of them is acceptable. Input: - The first line contains the integer n (1 ≤ n ≤ 100), the number of elements in the list. - The second line contains n integers, the elements of the list (each element can be between -10^4 and 10^4). Output: - Print the two sublists. Example: Input 6 3 1 4 2 2 1 Output [3, 1, 2] [4, 2, 1] Explanation: For the provided example, one possible partition is [3, 1, 2] and [4, 2, 1], which gives sums 6 and 7, respectively. This is the closest possible partition given the input list. Other valid solutions may exist with similar close sums.","solution":"def partition_list(nums): Partitions the list into two sublists such that the sum of the elements in the first sublist is as close as possible to the sum of the elements in the second sublist. def find_partition(nums, i, sum1, sum2, set1, set2): if i == len(nums): return abs(sum1 - sum2), set1, set2 # Include current element in the first subset diff1, subset1_a, subset1_b = find_partition(nums, i + 1, sum1 + nums[i], sum2, set1 + [nums[i]], set2) # Include current element in the second subset diff2, subset2_a, subset2_b = find_partition(nums, i + 1, sum1, sum2 + nums[i], set1, set2 + [nums[i]]) if diff1 <= diff2: return diff1, subset1_a, subset1_b else: return diff2, subset2_a, subset2_b _, set1, set2 = find_partition(nums, 0, 0, 0, [], []) return set1, set2"},{"question":"The Time Traveler\'s Diary You are a software engineer who has discovered a diary from an eccentric time traveler. The diary contains entries detailing the exact date and time the traveler has visited, in a specific format. However, the entries are jumbled and you need to sort them to understand the timeline correctly. A date-time entry in the diary is formatted as \\"YYYY/MM/DD HH:MM\\", where: - YYYY: 4-digit year - MM: 2-digit month - DD: 2-digit day - HH: 2-digit hour (24-hour format) - MM: 2-digit minute Your task is to write a program to sort these entries in chronological order. Input The first line contains an integer `N`, the number of entries in the diary. The next `N` lines each contain a date-time entry formatted as \\"YYYY/MM/DD HH:MM\\". Output Output the sorted date-time entries, each on a new line, in chronological order. Constraints 1 <= N <= 100 Each date-time entry follows the specified format and ranges: - Year: [1000, 9999] - Month: [01, 12] - Day: [01, 31] - Hour: [00, 23] - Minute: [00, 59] Examples Input 5 2022/07/19 14:30 1995/12/01 00:00 2023/05/17 16:45 2022/07/19 08:15 2010/06/30 23:59 Output 1995/12/01 00:00 2010/06/30 23:59 2022/07/19 08:15 2022/07/19 14:30 2023/05/17 16:45 Note For the given sample, the output is sorted from the earliest to the latest date-time entry.","solution":"def sort_datetime_entries(entries): Sorts a list of date-time entries in chronological order. return sorted(entries)"},{"question":"Emma is designing a railway system that connects various cities with unique train routes. She has n cities and m unique bidirectional routes connecting them. Each route has a distance associated with it. Emma wants to ensure that there is a way to travel between any two distinct cities using the most efficient way possible. The challenge is to help Emma design the most efficient railway network ensuring the cities are all connected directly or indirectly with the minimum possible total distance of the routes used. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 100000) — the number of cities and the number of unique bidirectional routes, respectively. The following m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) — indicating a bidirectional route between city u and city v with a distance of w. Output The output is one integer — the minimum possible total distance of the railway network that connects all the cities directly or indirectly. If it is not possible to connect all the cities, print -1. Examples Input 4 5 1 2 5 1 3 10 2 3 4 2 4 11 3 4 7 Output 16 Input 4 2 1 2 3 3 4 2 Output -1 Note In the first example, Emma can use routes 1-2, 2-3 and 3-4, which has a total distance of 5 + 4 + 7 = 16. In the second example, there is no way to connect all four cities with the given routes.","solution":"def find(parent, i): A utility function to find the set of an element i (uses path compression technique) if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): A function that does union of two sets of x and y (uses union by rank) xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): Function to construct MST using Kruskal\'s algorithm result = [] # This will store the resultant MST i, e = 0, 0 # An index variable, used for sorted edges # Step 1: Sort all the edges in non-decreasing order of their # weight. If we are not allowed to change the given graph, we # can create a copy of the array of edges edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] # Create V subsets with single elements for node in range(n): parent.append(node) rank.append(0) # Number of edges to be taken is equal to V-1 while e < n - 1: if i >= len(edges): return -1 # Step 2: Pick the smallest edge. And increment # the index for next iteration u, v, w = edges[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) # If including this edge does not cause cycle, # include it in the result and increment the index # of the result for the next edge if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) minimumCost = 0 for u, v, weight in result: minimumCost += weight return minimumCost def minimum_distance_railway_network(n, m, routes): edges = [] for u, v, w in routes: edges.append((u, v, w)) return kruskal(n, edges)"},{"question":"You have been appointed as the new city planner for Metropolis. The city is designed as an n x n grid where some cells are open spaces and some cells are buildings. The task is to determine the shortest path from the top-left corner of the city (grid[0][0]) to the bottom-right corner (grid[n-1][n-1]). You may move up, down, left, or right, but you can only pass through open spaces. Buildings block the path. Write a function `shortest_path(grid: List[List[int]]) -> int` that takes a list of lists representing the city grid and returns the length of the shortest path from the top-left to the bottom-right corner. If no such path exists, return -1. Input: The first line contains t, the number of test cases. Each test case consists of: - The first line containing n, the size of the grid (n x n). - The next n lines each containing n space-separated integers representing the grid, where 0 represents an open space and 1 represents a building. Output: For each test case, print the length of the shortest path or -1 if no such path exists. Constraints: 1 ≤ t ≤ 10 2 ≤ n ≤ 100 It is guaranteed that grid[0][0] and grid[n-1][n-1] are open spaces (0). SAMPLE INPUT 2 3 0 1 0 0 0 1 0 0 0 2 0 1 1 0 SAMPLE OUTPUT 4 -1 Explanation: In the first test case, the shortest path is (0,0) → (1,0) → (1,1) → (2,1) → (2,2), which has a length of 4. In the second test case, there is no valid path from the top-left to the bottom-right corner due to the building blocking the way.","solution":"from collections import deque from typing import List, Tuple def shortest_path(grid: List[List[int]]) -> int: Finds the shortest path from the top-left corner to the bottom-right corner in an n x n grid where 0 indicates an open space and 1 indicates a building. def bfs(start: Tuple[int, int], goal: Tuple[int, int], n: int) -> int: directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(start, 0)]) # (current_position, current_distance) visited = set(start) while queue: (current_x, current_y), distance = queue.popleft() if (current_x, current_y) == goal: return distance for dx, dy in directions: new_x, new_y = current_x + dx, current_y + dy if 0 <= new_x < n and 0 <= new_y < n and (new_x, new_y) not in visited and grid[new_x][new_y] == 0: visited.add((new_x, new_y)) queue.append(((new_x, new_y), distance + 1)) return -1 start = (0, 0) goal = (len(grid) - 1, len(grid) - 1) return bfs(start, goal, len(grid))"},{"question":"Alice is participating in a robot competition where she needs to program her robot to navigate a maze. The maze is represented as a grid of cells with obstacles and open paths. The robot can start at any cell and must reach a specific target cell. The grid is an `n x m` matrix, where `1` represents an open path, and `0` represents an obstacle. The robot can move in four directions: up, down, left, or right, but it cannot move diagonally. Given the start cell `(sr, sc)`, the target cell `(tr, tc)`, and the maze matrix, help Alice determine the minimum number of moves needed for the robot to reach the target cell from the start cell. If it is impossible for the robot to reach the target, return `-1`. Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the dimensions of the maze. - The next `n` lines each contain `m` integers (either `0` or `1`) representing the maze. - The last line contains four integers `sr`, `sc`, `tr`, `tc` (1 ≤ sr, sc, tr, tc ≤ n, m) — the starting row, starting column, target row, and target column. Output: Print a single integer — the minimum number of moves needed for the robot to reach the target cell, or `-1` if it is impossible. Examples: Input: 5 5 1 1 0 1 1 1 0 0 1 1 1 1 1 1 0 0 0 1 0 1 1 1 1 1 1 1 1 5 5 Output: 8 Input: 3 3 1 0 1 1 0 1 1 1 1 1 1 3 3 Output: 4 Input: 4 4 1 0 1 1 1 1 0 0 0 1 1 1 1 1 1 1 4 1 1 4 Output: -1","solution":"from collections import deque def minimum_moves(n, m, maze, sr, sc, tr, tc): Determines the minimum number of moves needed for the robot to reach the target cell from the start cell. Returns -1 if it is impossible to reach the target. # Adjust indexing to be 0-based for easier matrix access sr, sc, tr, tc = sr - 1, sc - 1, tr - 1, tc - 1 # Check if starting or target position is an obstacle if maze[sr][sc] == 0 or maze[tr][tc] == 0: return -1 # Directions to move in the form of (row_move, col_move) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize queue for BFS queue = deque([(sr, sc, 0)]) # (row, column, distance) visited = set((sr, sc)) while queue: current_row, current_col, current_dist = queue.popleft() # If we reach the target if current_row == tr and current_col == tc: return current_dist # Explore all possible directions for dr, dc in directions: next_row, next_col = current_row + dr, current_col + dc if 0 <= next_row < n and 0 <= next_col < m and (next_row, next_col) not in visited and maze[next_row][next_col] == 1: queue.append((next_row, next_col, current_dist + 1)) visited.add((next_row, next_col)) # If the target is not reachable return -1"},{"question":"**Problem** A profitable transport company is managing its fleet of cargo trucks which operate between various cities. Each truck is designated for specific routes and each route has a designated delivery time. The company wants to ensure all deliveries are made on time to maintain their reputation. The company needs you to write a program to handle the following queries to effectively manage their operational schedule. The given queries are as follows: SCHEDULE X Y D Schedule a truck to travel from city X to city Y taking D days to complete the delivery. RESCHEDULE X Y D Reschedule the existing delivery from city X to city Y with a new delivery time of D days. If there is no existing delivery between these cities, ignore this query. QUERY X Y Outputs the current scheduled delivery time between city X and city Y. If there is no scheduled delivery, output NOT SCHEDULED. # Constraints The input satisfies the following conditions. * 2 ≤ M ≤ 100,000 (M is the number of cities) * 1 ≤ Q ≤ 100,000 (Q is the number of queries) * 1 ≤ X, Y ≤ M * 1 ≤ D ≤ 100 Input ``` M Q query1 .. .. .. queryQ ``` First, the number of cities `M` and the number of queries `Q` are given. Then the queries are provided for `Q` times. Output Process the given queries as described above and output the results for QUERY inputs. # Examples Input ``` 5 6 SCHEDULE 1 2 3 SCHEDULE 2 3 4 QUERY 1 2 SCHEDULE 2 1 6 QUERY 2 3 RESCHEDULE 1 2 5 QUERY 1 2 ``` Output ``` 3 4 5 ``` Input ``` 3 4 SCHEDULE 1 2 2 QUERY 1 2 RESCHEDULE 1 2 3 QUERY 1 3 QUERY 1 2 ``` Output ``` 2 NOT SCHEDULED 3 ``` Input ``` 6 5 SCHEDULE 4 2 5 SCHEDULE 3 4 7 QUERY 4 2 RESCHEDULE 4 2 10 QUERY 4 2 ``` Output ``` 5 10 ``` Input ``` 4 4 SCHEDULE 1 3 8 SCHEDULE 1 4 9 RESCHEDULE 1 2 10 QUERY 1 2 ``` Output ``` NOT SCHEDULED ```","solution":"def manage_schedules(operations): Manages the scheduling, rescheduling, and querying of truck deliveries. :param operations: List of operations in the form of tuples. :return: List of results for QUERY operations. schedule = {} results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"SCHEDULE\\": X, Y, D = int(parts[1]), int(parts[2]), int(parts[3]) schedule[(X, Y)] = D elif command == \\"RESCHEDULE\\": X, Y, D = int(parts[1]), int(parts[2]), int(parts[3]) if (X, Y) in schedule: schedule[(X, Y)] = D elif command == \\"QUERY\\": X, Y = int(parts[1]), int(parts[2]) if (X, Y) in schedule: results.append(str(schedule[(X, Y)])) else: results.append(\\"NOT SCHEDULED\\") return results"},{"question":"You have been given a database of books and authors. Each book can have one or more authors and each author can have written multiple books. You need to write a program which will support the following functions: 1. add_book(book_id, authors): Add a new book with the given book_id and a list of authors. 2. remove_book(book_id): Remove the book with the given book_id. 3. add_author(book_id, author): Add a new author to a book. 4. remove_author(book_id, author): Remove an author from a book. 5. list_books_by_author(author): Return a list of book_ids written by the given author. 6. list_all_books(): Return a list of all book_ids in the database. Your task is to implement these functions and ensure they work correctly. Input The first line contains an integer q (1 ≤ q ≤ 100000) — the number of queries. Each of the next q lines describes a query in one of the following formats: * \\"ADD_BOOK book_id authors_count author_1 author_2 ... author_n\\" (1 ≤ authors_count ≤ 10; 1 ≤ author_i, book_id ≤ 100000) * \\"REMOVE_BOOK book_id\\" (1 ≤ book_id ≤ 100000) * \\"ADD_AUTHOR book_id author\\" (1 ≤ author, book_id ≤ 100000) * \\"REMOVE_AUTHOR book_id author\\" (1 ≤ author, book_id ≤ 100000) * \\"LIST_BOOKS_BY_AUTHOR author\\" (1 ≤ author ≤ 100000) * \\"LIST_ALL_BOOKS\\" Output For each \\"LIST_BOOKS_BY_AUTHOR\\" and \\"LIST_ALL_BOOKS\\" query, print the required result in a single line. Books should be listed in ascending order of their book_id. Examples Input 9 ADD_BOOK 1 2 100 200 ADD_BOOK 2 1 100 ADD_BOOK 3 1 300 LIST_BOOKS_BY_AUTHOR 100 ADD_AUTHOR 3 100 REMOVE_AUTHOR 1 100 REMOVE_BOOK 2 LIST_BOOKS_BY_AUTHOR 100 LIST_ALL_BOOKS Output 1 2 1 3 1 3","solution":"class BookDatabase: def __init__(self): self.books = {} self.authors_books = {} def add_book(self, book_id, authors): self.books[book_id] = set(authors) for author in authors: if author not in self.authors_books: self.authors_books[author] = set() self.authors_books[author].add(book_id) def remove_book(self, book_id): if book_id in self.books: for author in self.books[book_id]: self.authors_books[author].remove(book_id) if not self.authors_books[author]: # Clean up empty sets del self.authors_books[author] del self.books[book_id] def add_author(self, book_id, author): if book_id in self.books: self.books[book_id].add(author) if author not in self.authors_books: self.authors_books[author] = set() self.authors_books[author].add(book_id) def remove_author(self, book_id, author): if book_id in self.books and author in self.books[book_id]: self.books[book_id].remove(author) self.authors_books[author].remove(book_id) if not self.authors_books[author]: # Clean up empty sets del self.authors_books[author] def list_books_by_author(self, author): if author in self.authors_books: return sorted(self.authors_books[author]) return [] def list_all_books(self): return sorted(self.books.keys())"},{"question":"Lilly is playing a game where she is given an array `a` of `n` integers and a target integer `t`. Her goal is to find the smallest contiguous subarray whose sum is greater than or equal to `t`. If no such subarray exists, return `0`. Input The first line contains two integers `n` and `t` (1 ≤ n ≤ 10^5, 1 ≤ t ≤ 10^9) — the number of elements in the array and the target sum, respectively. The next line contains `n` space-separated integers `a0, a1, ..., an-1` (1 ≤ ai ≤ 10^4) — elements of the array. Output Print a single integer — the length of the smallest subarray with a sum greater than or equal to `t`, or `0` if no such subarray exists. Examples Input 8 15 1 2 3 4 5 6 7 8 Output 2 Input 5 100 1 2 3 4 5 Output 0 Note In the first test case, the smallest subarray with a sum of at least 15 is [7, 8]. Its length is 2. In the second test case, there is no subarray with a sum of at least 100, so the output is 0.","solution":"def smallest_subarray_with_sum(n, t, a): Returns the length of the smallest contiguous subarray whose sum is greater than or equal to `t`. If no such subarray exists, returns 0. left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += a[right] while current_sum >= t: min_length = min(min_length, right - left + 1) current_sum -= a[left] left += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"Little bunny Bobo likes sequences. Bobo has a sequence of length n that consists of integers only. He can perform the following operation on the sequence: choose any two different elements and swap them. Bobo wants the sequence to be strictly increasing after performing at most k swaps. Determine if it\'s possible to make the sequence strictly increasing with the given number of swaps. Input The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000) — the length of the sequence and the number of swaps allowed, respectively. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the elements of the sequence. Output Print \\"YES\\" if it\'s possible to make the sequence strictly increasing with at most k swaps, otherwise print \\"NO\\". Examples Input 5 2 3 1 2 4 5 Output YES Input 4 1 4 3 2 1 Output NO","solution":"def is_possible_to_make_increasing(n, k, sequence): sorted_sequence = sorted(sequence) mismatch_count = sum(1 for i in range(n) if sequence[i] != sorted_sequence[i]) # Each swap can correct two positions. # If the mismatch count is less than or equal to 2 times the number of swaps, it\'s possible. return mismatch_count <= 2 * k"},{"question":"Given an integer number n, your task is to check if n is a perfect square. A perfect square is a number that can be expressed as the product of an integer with itself. Constraints * -10,000 ≤ n ≤ 10,000 * n is an integer. Input Input is given from Standard Input in the following format: ``` n ``` Output If n is a perfect square, print `Yes`; otherwise, print `No`. Examples Input ``` 16 ``` Output ``` Yes ``` Input ``` 20 ``` Output ``` No ``` Input ``` 0 ``` Output ``` Yes ```","solution":"import math def is_perfect_square(n): Determines if the given integer n is a perfect square. Parameters: n (int): the input integer to check Returns: str: \\"Yes\\" if n is a perfect square, otherwise \\"No\\" if n < 0: return \\"No\\" sqrt_n = int(math.sqrt(n)) if sqrt_n * sqrt_n == n: return \\"Yes\\" else: return \\"No\\""},{"question":"You have a string containing a series of lowercase English letters. Your task is to determine the minimum length of a contiguous substring of the given string that contains all the unique characters present in the original string at least once. Input The first line contains a single integer n (1 ≤ n ≤ 2000) — the length of the string. The second line contains a string of length n consisting of lowercase English letters. Output Print a single integer — the minimum length of a contiguous substring that contains all the unique characters of the original string at least once. Examples Input 7 abacabd Output 4 Input 6 aaaaaa Output 1","solution":"def min_length_substring_with_all_unique_chars(string): Returns the minimum length of a contiguous substring of the given string that contains all the unique characters present in the original string at least once. unique_chars = set(string) num_unique_chars = len(unique_chars) char_frequency = {} start = 0 min_length = len(string) for end in range(len(string)): char_frequency[string[end]] = char_frequency.get(string[end], 0) + 1 while len(char_frequency) == num_unique_chars: min_length = min(min_length, end - start + 1) char_frequency[string[start]] -= 1 if char_frequency[string[start]] == 0: del char_frequency[string[start]] start += 1 return min_length"},{"question":"You are given a string that represents a logical expression. The expression is composed of letters (representing variables), the logical AND operator \'&\', the logical OR operator \'|\', and the logical NOT operator \'!\'. The expression follows standard precedence rules: NOT has the highest precedence, followed by AND, and lastly OR. Parentheses can be used to override the default precedence. Your task is to evaluate the logical expression and return its result as either \'True\' or \'False\'. You should assume that all variables are initially set to \'True\'. Constraints - The given logical expression will have a length between 1 and 1000 characters. - The expression will be properly parenthesized and will not have any syntax errors. Input A single string representing the logical expression. Output A single string: \'True\' or \'False\'. Examples Input A&B|C Output True Input !A&B Output False Input (A|B)&C Output True","solution":"def eval_expression(expression): Evaluates a logical expression composed of variables (A, B, C, etc.), logical operators AND (&), OR (|), NOT (!), and parentheses. Args: expression (str): The logical expression to evaluate. Returns: str: \'True\' or \'False\' based on the evaluation result. # Define precedence of operators precedence = {\'!\': 3, \'&\': 2, \'|\': 1} def eval_not(stack): operand = stack.pop() stack.append(not operand) def eval_and(stack): right = stack.pop() left = stack.pop() stack.append(left and right) def eval_or(stack): right = stack.pop() left = stack.pop() stack.append(left or right) def to_postfix(expression): stack = [] output = [] i = 0 while i < len(expression): char = expression[i] if char.isalpha(): # Operand output.append(True) # Assuming all variables are set to True elif char == \'(\': stack.append(char) elif char == \')\': while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() # Remove the \'(\' from stack elif char in precedence: while (stack and stack[-1] != \'(\' and precedence[char] <= precedence[stack[-1]]): output.append(stack.pop()) stack.append(char) i += 1 while stack: output.append(stack.pop()) return output def evaluate_postfix(postfix): stack = [] for token in postfix: if type(token) == bool: # Operand stack.append(token) elif token == \'!\': eval_not(stack) elif token == \'&\': eval_and(stack) elif token == \'|\': eval_or(stack) return stack.pop() postfix_expression = to_postfix(expression) result = evaluate_postfix(postfix_expression) return \'True\' if result else \'False\'"},{"question":"You are tasked with developing a program that runs a simulation of a simple card game between two players. The game uses a standard deck of 52 cards, and the objective is to determine the winner based on a series of random draws. Each player draws a card from the shuffled deck, and the player with the higher card wins that round. The value of the cards is ranked as follows (from highest to lowest): Ace, King, Queen, Jack, 10, 9, 8, 7, 6, 5, 4, 3, 2. Suits are irrelevant in this game. If both players draw cards of the same rank, the round is a tie. The game continues for a specified number of rounds, and the player with the most round wins at the end is declared the winner. In case of a tie in the number of round wins, the game is declared a draw. Your task is to write a program that simulates the game and outputs the winner after the specified number of rounds. Input The first line contains a single integer n (1 ≤ n ≤ 52) — the number of rounds. Output Print \\"Player 1\\" if the first player wins, \\"Player 2\\" if the second player wins, and \\"Draw\\" if both players win an equal number of rounds. Examples Input 5 Output Player 1 Input 3 Output Draw Note In the first example, the simulation might result in Player 1 winning more rounds than Player 2. In the second example, after 3 rounds, both players might win an equal number of rounds resulting in a Draw. Note: Due to the randomness of the game, the actual output may vary between runs for the same input. Ensure your program correctly implements the game logic and outputs one of the three possible results based on the simulated game outcomes.","solution":"import random # Define card values card_values = { \'2\': 2, \'3\': 3, \'4\': 4, \'5\': 5, \'6\': 6, \'7\': 7, \'8\': 8, \'9\': 9, \'10\': 10, \'J\': 11, \'Q\': 12, \'K\': 13, \'A\': 14 } def draw_card(): Simulates drawing a card from the deck. Returns the value of the card drawn. card = random.choice(list(card_values.keys())) return card_values[card] def simulate_game(n): Simulates a game of n rounds and returns the winner. player1_wins = 0 player2_wins = 0 for _ in range(n): player1_card = draw_card() player2_card = draw_card() if player1_card > player2_card: player1_wins += 1 elif player2_card > player1_card: player2_wins += 1 if player1_wins > player2_wins: return \\"Player 1\\" elif player2_wins > player1_wins: return \\"Player 2\\" else: return \\"Draw\\" # Example usage: # result = simulate_game(5) # print(result)"},{"question":"Description Alice is a dedicated gardener who loves to grow plants in a single row. Her garden can be represented as a 1-dimensional array with N cells, where each cell can either be empty or contain exactly one plant. Each plant is characterized by its height in centimeters. Some cells might already contain plants, while others might be empty. Alice wants to rearrange her plants such that the height of plants in the cells is in non-decreasing order from left to right. To do so, she can perform the following operations: 1. **Plant a new plant**: She can plant a new plant in an empty cell. 2. **Remove an existing plant**: She can remove a plant from a cell. 3. **Move a plant**: She can move a plant from a cell to an empty cell. Alice aims to achieve the desired order with the minimum number of plant operations (planting, removing, or moving). Input The input consists of a single test case formatted as follows: - The first line contains a single integer N (1 leq N leq 10^5), the number of cells in the garden. - The second line contains N integers, where the i-th integer is the height of the plant in the i-th cell if there is a plant, or 0 if the cell is empty. Output Print a single integer representing the minimum number of operations required to rearrange the plants so that their heights are in non-decreasing order. Examples # Example 1 Input: ``` 5 2 0 4 0 3 ``` Output: ``` 1 ``` # Example 2 Input: ``` 7 0 0 4 2 0 6 3 ``` Output: ``` 2 ``` # Example 3 Input: ``` 4 0 0 0 0 ``` Output: ``` 0 ``` Explanation # Example 1 In the initial garden, Alice can move the plant of height 3 to the second position to achieve the ordered sequence: [2, 3, 4]. # Example 2 Alice can perform the following operations: 1. Move the plant of height 2 to the first empty position. 2. Move the plant of height 3 to the next empty position after 4. This will result in the ordered sequence: [2, 3, 4, 6]. # Example 3 Since all cells are empty, no operations are needed. Constraints - Each plant height and each cell position can be considered to manage within reasonable limits. - Alice prefers to minimize the number of operations to keep the gardening efforts low. Implement a solution to determine the minimum number of operations required to achieve the desired non-decreasing order of plant heights.","solution":"def min_operations_to_sort_plants(N, garden): Function to find the minimum number of operations required to arrange plants in non-decreasing order. Args: N : int : Number of cells in the garden garden : list of ints : garden[i] represents the height of the plant in the i-th cell, or 0 if the cell is empty. Returns: int : The minimum number of operations required # Filter out the empty cells and get a list of plant heights plants = [height for height in garden if height > 0] if not plants: return 0 # Find the length of the longest increasing subsequence from bisect import bisect_left lis = [] for plant in plants: pos = bisect_left(lis, plant) if pos == len(lis): lis.append(plant) else: lis[pos] = plant # The number of operations is the number of plants not in the LIS return len(plants) - len(lis)"},{"question":"Problem H: Robo-Cleaner\'s Path A state-of-the-art robotic vacuum cleaner is navigating a rectangular grid-shaped house. The cleaner starts at a given position and moves in four possible directions: up, down, left, or right. Each move takes the cleaner from its current cell to an adjacent cell. The house layout includes some furniture pieces that the cleaner cannot pass through. These pieces are placed in the grid and represented as obstacles. The robotic cleaner follows a specified sequence of moves. When it encounters an obstacle or the boundary of the house while attempting to make a move, it will turn left (change its direction clockwise by 90 degrees) and try the next move in the sequence. Your task is to determine the final position of the robotic vacuum cleaner after following all the given moves. # Input The input begins with a line containing two integers, R and C (1 <= R, C <= 1000), representing the number of rows and columns in the house grid respectively. The second line contains two integers, sr and sc (1 <= sr <= R, 1 <= sc <= C), which are the starting coordinates (row, column) of the robotic cleaner. The third line contains one integer O (0 <= O <= 10,000), which indicates the number of obstacles in the grid. Each of the next O lines contains two integers, or and oc (1 <= or <= R, 1 <= oc <= C), representing the coordinates (row, column) of an obstacle. The fourth line contains an integer M (1 <= M <= 100,000), which is the number of moves the cleaner will make. The moves are given as a string of length M, where each character in the string is either \'U\' (up), \'D\' (down), \'L\' (left), or \'R\' (right). # Output Print the final coordinates (row, column) of the robotic cleaner after performing all the moves. # Example Input ``` 5 5 3 3 3 2 2 4 3 3 4 10 UDLRRRLULU ``` Output ``` 2 1 ``` Input ``` 3 3 1 1 0 8 RRDDLLUU ``` Output ``` 1 1 ```","solution":"def robo_cleaner_path(R, C, sr, sc, obstacles, M, moves): # Create a set of obstacle positions obstacles_set = set(obstacles) # Initialize the starting position position = (sr, sc) # Define direction movements direction_dict = {\'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1)} # Process each move for move in moves: delta_row, delta_col = direction_dict[move] new_position = (position[0] + delta_row, position[1] + delta_col) if (1 <= new_position[0] <= R and 1 <= new_position[1] <= C and new_position not in obstacles_set): position = new_position return position # Example input: # R = 5, C = 5 # sr = 3, sc = 3 # obstacles = [(2, 2), (4, 3), (3, 4)] # M = 10 # moves = \\"UDLRRRLULU\\" # Expected output: (2, 1) # Calling the function print(robo_cleaner_path(5, 5, 3, 3, [(2, 2), (4, 3), (3, 4)], 10, \\"UDLRRRLULU\\"))"},{"question":"A company is looking to optimize the scheduling of their online advertising campaigns. They have a list of advertising slots and each slot can be assigned to multiple campaigns. Each campaign has a specific start and end time, and can run in any slot that is available for their entire duration. However, no two campaigns can run in the same slot at the same time. Write a program that takes as input the number of slots, the number of campaigns, and the start and end time of each campaign, and assigns the minimum number of slots required so that all campaigns can run without overlapping. Input: - The first line contains two integers, s (1 ≤ s ≤ 100) and c (1 ≤ c ≤ 1000), representing the number of slots and the number of campaigns respectively. - The next c lines each contain two integers, starti and endi (0 ≤ starti < endi ≤ 1000), representing the start and end times of the ith campaign. Output: - A single integer representing the minimum number of slots required to run all campaigns without overlapping. Example: Input: 4 6 1 5 2 6 4 8 5 9 8 10 9 11 Output: 3","solution":"import heapq def min_slots_required(s, c, campaigns): Determines the minimum number of slots required to schedule all campaigns without overlap. Parameters: s (int): Number of slots c (int): Number of campaigns campaigns (list of tuple): A list of tuples with start and end times of campaigns Returns: int: Minimum number of slots required if not campaigns: return 0 # Sort the campaigns by start time. campaigns.sort(key=lambda x: x[0]) # Create a min-heap to track the end times of campaigns using slots min_heap = [] for start, end in campaigns: # If there\'s a slot whose campaign ended before the current campaign starts, reuse it if min_heap and min_heap[0] <= start: heapq.heappop(min_heap) # Add the current campaign to a slot (new or reused) heapq.heappush(min_heap, end) # The size of the heap tells us the maximum number of overlapping campaigns at any point in time return len(min_heap)"},{"question":"John is a software developer who likes to work on optimizing different tasks. Recently, he discovered a unique way to compress text files by replacing groups of consecutive identical characters with just one instance of the character followed by the count of its occurrences. For example, the string \\"aaabccdddd\\" would be compressed to \\"a3b1c2d4\\". He needs your help to automate this process. Write a function that takes a string as input and returns its compressed form as described above. If the compressed string is not smaller than the original string, return the original string. # Input - A single line of input containing a string ( s ) of length ( n ) (1 ≤ ( n ) ≤ 10^5) consisting only of lowercase English letters. # Output - Print the compressed string if it is shorter than the original string; otherwise, print the original string. # Example Input ``` aaabccdddd ``` Output ``` a3b1c2d4 ``` Input ``` abcd ``` Output ``` abcd ``` # Note - For the first example, the compressed form \\"a3b1c2d4\\" is shorter than the original string \\"aaabccdddd\\" so we return \\"a3b1c2d4\\". - For the second example, the compressed form \\"a1b1c1d1\\" is not shorter than the original string \\"abcd\\", so we return \\"abcd\\". Act accordingly based on whether the compressed result is shorter or not.","solution":"def compress_string(s): Compress the string by replacing groups of consecutive identical characters with just one instance of the character followed by the count of its occurrences. If the compressed result is not shorter than the original string, return the original string. Args: s (str): The input string consisting only of lowercase English letters. Returns: str: The compressed string or the original string if compression does not reduce the length. compressed = [] i = 0 n = len(s) while i < n: count = 1 while i + 1 < n and s[i] == s[i + 1]: count += 1 i += 1 compressed.append(s[i]) compressed.append(str(count)) i += 1 compressed_string = \'\'.join(compressed) if len(compressed_string) < n: return compressed_string else: return s"},{"question":"Akash has recently developed a fascination for prime numbers and has come up with a unique puzzle involving divisors. He thinks it would be an interesting challenge to test your ability to manipulate and understand the relationship between numbers and their divisors. You are given an array `A` of `n` positive integers, and your task is to find another array `B` of `n` positive integers where each element in the array B represents the count of distinct prime numbers that divide the corresponding element in A. Input: - The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of elements in the array. - The second line contains `n` space-separated integers A1, A2, ..., An (1 ≤ Ai ≤ 10^6). Output: - Output a single line containing `n` space-separated integers B1, B2, ..., Bn, where Bi is the number of distinct prime divisors of Ai. Example: Input: 6 10 15 21 28 33 49 Output: 2 2 2 2 2 1 Explanation: - 10 = 2 * 5 → 2 distinct primes: 2, 5 - 15 = 3 * 5 → 2 distinct primes: 3, 5 - 21 = 3 * 7 → 2 distinct primes: 3, 7 - 28 = 2^2 * 7 → 2 distinct primes: 2, 7 - 33 = 3 * 11 → 2 distinct primes: 3, 11 - 49 = 7^2 → 1 distinct prime: 7 Note: - Efficiently computing the number of distinct prime divisors for each number in the array can be challenging due to the range of the elements. Use of optimized algorithms for prime factorization or precomputation techniques may be required.","solution":"def count_distinct_prime_factors(n, A): MAXN = 10**6 + 1 spf = [0] * MAXN # Smallest prime factor for every number # Using Sieve of Eratosthenes to fill smallest prime factor for every number for i in range(2, MAXN): if spf[i] == 0: # i is a prime number for j in range(i, MAXN, i): if spf[j] == 0: spf[j] = i def prime_factors_count(x): primes = set() while x != 1: primes.add(spf[x]) x //= spf[x] return len(primes) B = [prime_factors_count(A[i]) for i in range(n)] return B"},{"question":"Example Input 4 3 4 1 2 3 2 3 4 4 2 3 1 4 4 3 Output 0","solution":"def calculate_squares(n): Returns the sum of squares of the first n natural numbers. Parameters: n (int): The number of terms to be squared and summed Returns: int: The sum of squares of the first n natural numbers. return sum(i * i for i in range(1, n + 1))"},{"question":"The kingdom of Metropolis has a peculiar way of issuing parking permits. Each month, they release a list of available permit numbers in ascending order, each representing a day within the month. For example, the first permit is for the 1st day, the second permit is for the 2nd day, and so forth up to the 31st day. However, before issuing the permit, they remove a sequence of consecutive permits depending on the popularity index of the permits, causing a gap in the otherwise sequential list of available permits. Given a list of the issued permit numbers and the popularity index, determine the day with the highest permit number still available. Input The first line contains a single integer n (1 ≤ n ≤ 100), the number of permits issued after removing the gap. The second line contains n space-separated integers p1, p2, ..., pn (1 ≤ pi ≤ 31), the permit numbers in ascending order. Output Print a single integer — the highest permit number still available. Examples Input 5 1 2 4 5 6 Output 6 Input 7 1 3 4 5 7 8 9 Output 9 Note In the first sample, the list of issued permits is missing \'3\', thus the highest available permit number is \'6\'. In the second sample, the list of issued permits is missing \'2\' and \'6\', thus the highest available permit number is \'9\'.","solution":"def highest_permit(n, permits): Returns the highest permit number still available from the given list after removing consecutive permit sequence based on popularity index. return max(permits)"},{"question":"A logistics company has a fleet of delivery trucks, each with a specified fuel tank capacity and fuel consumption rate. Given the fuel tank capacity and consumption rate for a number of trucks, your task is to determine the maximum distance that each truck can travel on a full tank of fuel. The fuel consumption rate is given in liters per 100 kilometers (L/100km). Input: The first line contains an integer N, the number of trucks. The next N lines contain two space-separated integers each: the fuel tank capacity in liters (C) and the fuel consumption rate in liters per 100 kilometers (R). Output: For each truck, output a single integer representing the maximum distance in kilometers that the truck can travel on a full tank of fuel. Constraints: 1 <= N <= 100000 1 <= C <= 1000 1 <= R <= 100 SAMPLE INPUT: 3 50 8 60 10 40 5 SAMPLE OUTPUT: 625 600 800 Explanation: The maximum distance a truck can travel is calculated by dividing the fuel tank capacity by the consumption rate and then multiplying by 100. For example, for the first truck with a capacity of 50 liters and a consumption rate of 8 L/100km, the maximum distance is (50 / 8) * 100 = 625 kilometers.","solution":"def calculate_max_distances(truck_data): Given a list of tuples containing the fuel tank capacity and consumption rate for a number of trucks, returns a list of maximum distances each truck can travel on a full tank of fuel. Args: truck_data (list of tuples): A list where each tuple contains two integers, the fuel tank capacity in liters and the fuel consumption rate in liters per 100 kilometers. Returns: list of int: A list of maximum distances in kilometers each truck can travel. max_distances = [] for C, R in truck_data: max_distance = (C / R) * 100 max_distances.append(int(max_distance)) return max_distances"},{"question":"A drone delivery service is planning its routes and you have been given the task to optimize deliveries. Each route is represented by a direct flight between two points. However, due to regulatory constraints, drones can only fly along certain predefined routes. Given a grid of size m x n, each cell in the grid can either be passable \'1\' or impassable \'0\'. The drone can only move to an adjacent cell (up, down, left, right) if it is passable. You need to determine the shortest path (measured in the number of moves) the drone needs to take from the starting cell to the destination cell. If the destination is not reachable, return -1. Input Format: - The first line contains two integers m and n, the dimensions of the grid. - The next m lines each contain n characters (\'0\' or \'1\'), representing the grid. - The next line contains four integers, sx, sy, dx, and dy, the starting and destination coordinates respectively. Output Format: - Print the length of the shortest path from the starting cell to the destination cell, or -1 if the destination is not reachable. Constraints: 1 ≤ m, n ≤ 1000 0 ≤ sx, sy, dx, dy < size of respective dimension Example: Input: 5 5 1 1 1 1 0 1 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 1 1 0 0 4 4 Output: 8 Explanation: The shortest path from (0,0) to (4,4) is marked by 8 moves: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (2,3) -> (3,3) -> (4,3) -> (4,4) Here, you may employ an algorithm like Breadth-First Search (BFS) to determine the shortest path in an unweighted grid.","solution":"from collections import deque def shortest_path(grid, m, n, sx, sy, dx, dy): # Check initial and final positions if not grid or grid[sx][sy] == \'0\' or grid[dx][dy] == \'0\': return -1 # Directions for moving in the grid directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(sx, sy)]) visited = set((sx, sy)) moves = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() # If destination is reached if x == dx and y == dy: return moves for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'1\': queue.append((nx, ny)) visited.add((nx, ny)) moves += 1 # If no path found return -1"},{"question":"Write a program to determine the most frequent element in an array of integers. If there are multiple elements with the same highest frequency, return the smallest element among them. Input The first line contains an integer T, the number of test cases (1≤ T ≤ 10000). Each test case consists of two lines. The first line of each test case contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n integers separated by spaces. Output For each test case, output the most frequent element. If there are multiple elements with the same highest frequency, output the smallest one. SAMPLE INPUT 3 6 1 2 2 3 3 3 5 4 5 6 6 4 4 9 9 8 8 SAMPLE OUTPUT 3 4 8","solution":"from collections import Counter def most_frequent_element(test_cases): results = [] for n, arr in test_cases: frequency = Counter(arr) max_frequency = max(frequency.values()) most_frequent = min([num for num, freq in frequency.items() if freq == max_frequency]) results.append(most_frequent) return results def parse_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(input_lines[index]) arr = list(map(int, input_lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return test_cases def main(input_data): test_cases = parse_input(input_data) results = most_frequent_element(test_cases) return results"},{"question":"Elena is organizing a coding competition where players need to type specific phrases correctly. To ensure fairness, Elena wants a system that evaluates the player\'s input based on given criteria. She needs a program that checks the number of exact matches in the players\' responses compared to a set of correct phrases. For each test case, given a list of correct phrases and a list of players\' responses, the program should determine how many responses exactly match the correct phrases. Input: The input begins with an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of: - An integer n (1 ≤ n ≤ 100) — the number of correct phrases. - The next n lines contain the correct phrases. - An integer m (1 ≤ m ≤ 100) — the number of players\' responses. - The next m lines contain the players\' responses. Output: For each test case, output a single integer — the number of responses that exactly match any of the correct phrases. Example: Input 2 3 hello world goodbye see you soon 4 hello world hello goodbye see you 2 abc def 2 abc ghi Output 2 1 Explanation: In the first test case, \\"hello world\\" and \\"goodbye\\" match exactly from the correct phrases list. Therefore, the output is 2. In the second test case, only \\"abc\\" matches exactly from the correct phrases list. Hence, the output is 1.","solution":"def count_exact_matches(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] correct_phrases = set(test_cases[i][1:n + 1]) m = test_cases[i][n + 1] player_responses = test_cases[i][n + 2:n + m + 2] matches_count = sum(1 for response in player_responses if response in correct_phrases) results.append(matches_count) return results"},{"question":"The kingdom of Arithmia is famous for its sophisticated libraries containing numerous scrolls with powerful spells. The librarians have a peculiar habit of arranging these scrolls along a single shelf with the assumption that they can help the kingdom fend off any magical threat. Additionally, each scroll has an integer power level assigned to it. The power level can be positive or negative indicating supportive or harmful magic respectively. An ancient prophecy revealed that the kingdom will only be safe if there exists a contiguous subarray of scrolls whose total power level is exactly zero. As a mage, your task is to determine whether such a subarray exists. Input The first line of input contains an integer n (1 ≤ n ≤ 100), the number of scrolls on the shelf. The second line contains n integers p1, p2, ..., pn (-1000 ≤ pi ≤ 1000), representing the power levels of the scrolls. Output Output YES if there exists a contiguous subarray with a total power level of zero, and NO otherwise. Example Input 5 3 -1 -2 4 -3 Output YES","solution":"def can_find_zero_power_subarray(n, power_levels): Determines if there is a contiguous subarray whose total power level is zero. # Maintain a set to store the prefix sums prefix_sums = set() current_sum = 0 for power in power_levels: current_sum += power if current_sum == 0 or current_sum in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\""},{"question":"You are given an integer n. Your task is to find the nth Fibonacci number. The sequence of Fibonacci numbers is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Given an integer n, calculate F(n). Constraints * 0 leq n leq 30 * n is an integer. Input Input is given from Standard Input in the following format: n Output Print an integer representing the nth Fibonacci number. Examples Input 5 Output 5 Input 10 Output 55 Input 20 Output 6765","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"In computational geometry, a convex hull of a set of points is the smallest convex polygon that contains all the points. Constructing the convex hull is a fundamental problem with applications in various fields such as computer graphics, GIS, and pattern recognition. Your task is to implement an algorithm to find the convex hull of a set of points in a 2D plane. Input The first line contains an integer n (3 ≤ n ≤ 10^5) — the number of points. Next n lines contain two integers x and y (−10^6 ≤ x, y ≤ 10^6) separated by a space representing coordinates of each point. Output Print the vertices of the convex hull in counterclockwise order starting from the vertex with the lowest x-coordinate (in case of a tie, the lowest y-coordinate). If multiple vertices have the same coordinates, print each coordinate only once. Examples Input 6 0 0 1 1 2 2 2 0 1 2 0 2 Output 0 0 2 0 2 2 0 2 Input 5 1 1 2 2 0 2 2 0 0 0 Output 0 0 2 0 2 2 0 2 Note In the first sample test, the convex hull is the smallest polygon that can contain all the given points, which excludes points (1, 1) and (1, 2) as they are inside the polygon. The vertices of the convex hull in counterclockwise order starting from the lowest x-coordinate are (0, 0), (2, 0), (2, 2), and (0, 2).","solution":"def convex_hull(points): Finds the convex hull of a set of 2D points and returns the vertices of the hull in counterclockwise order starting from the vertex with the lowest x-coordinate. # Sort the points lexicographically (tuples compare lexicographically). points = sorted(set(points)) # Boring case: no points or a single point, possibly repeated multiple times. if len(points) <= 1: return points # 2D cross product of OA and OB vectors, i.e. z-component of their 3D cross product. # Returns a positive value, if OAB makes a counter-clockwise turn, # negative for clockwise turn, and zero if the points are collinear. def cross(o, a, b): return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) # Build lower hull lower = [] for p in points: while len(lower) >= 2 and cross(lower[-2], lower[-1], p) <= 0: lower.pop() lower.append(p) # Build upper hull upper = [] for p in reversed(points): while len(upper) >= 2 and cross(upper[-2], upper[-1], p) <= 0: upper.pop() upper.append(p) # Concatenate lower and upper hull to make the full hull. # The last point of each half is omitted because it\'s repeated at the beginning of the other half. return lower[:-1] + upper[:-1] def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) points = [(int(data[i * 2 + 1]), int(data[i * 2 + 2])) for i in range(n)] hull = convex_hull(points) for point in hull: print(point[0], point[1]) if __name__ == \\"__main__\\": main()"},{"question":"A group of n delivery robots is responsible for delivering packets in a linear city. The city is laid out in a straight line, with m delivery points located at various positions along this line. Each robot starts at a specific position and can move left or right along the line. Each second, a robot can: - Move one unit to the left. - Move one unit to the right. - Deliver a packet if it is currently at the delivery point. Each delivery point can only accept packets from one robot at a time, meaning no two robots can deliver packets at the same delivery point simultaneously. Determine the minimal time required for all packets to be delivered. Input The first line contains two integers, n (1 ≤ n ≤ 50) and m (1 ≤ m ≤ 50) — the number of robots and delivery points, respectively. The next line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ 100) — the starting positions of the robots. The last line contains m integers d1, d2, ..., dm (0 ≤ di ≤ 100) — the positions of the delivery points. Output Print a single integer — the minimal time required for all packets to be delivered. Examples Input 3 3 1 5 3 2 6 4 Output 4 Input 2 4 2 2 3 3 3 3 Output 1 Note In the first example, robots can move to the nearest delivery point, and in four units of time, all packets are delivered: - Robot at position 1 can move to position 2 in 1 second. - Robot at position 3 can move to position 4 in 1 second. - Robot at position 5 can move to position 6 in 1 second. In the second example, since all delivery points are at the same location and the robots are already at position 2, they can move to position 3 in 1 second and deliver the packets.","solution":"from itertools import permutations import sys def minimal_delivery_time(n, m, robot_positions, delivery_points): delivery_points.sort() min_time = sys.maxsize for perm in permutations(delivery_points): max_time = 0 for i in range(n): time = abs(robot_positions[i] - perm[i % m]) if time > max_time: max_time = time if max_time < min_time: min_time = max_time return min_time"},{"question":"Ivan likes video games. He has various quests to complete to proceed to the next level. Each quest has a difficulty level di. Ivan can pair the quests into groups, but he needs to ensure the difference in difficulty levels within each group is minimized to avoid overloading himself. Ivan already knows the difficulty level di for each of his m quests. Now he wants to split the quests into pairs so that each pair contains exactly 2 quests. If m is odd, he must leave one quest unpaired. For each group, he considers the difficulty to be the absolute difference between the two quests in that group. The difficulty of the division into pairs is the maximum difficulty among all pairs. Split m quests into pairs in such a way that the difficulty of the division is the minimum possible, i.e., that the maximum difficulty among all pairs is as small as possible. Input The first line contains an integer m (1 ≤ m ≤ 3·105) — the number of quests. The second line contains m integers d1, d2, ..., dm (1 ≤ di ≤ 109), where di is the difficulty of the i-th quest. Output Print the minimum difficulty of the division into pairs. If m is odd, additionally print the difficulty of the unpaired quest. Examples Input 6 30 50 10 90 60 70 Output 20 Input 5 1 2 3 4 5 Output 1 2 Note In the first example, the quests should be split into pairs: [30, 50], [60, 70], [10, 90]. The difficulty of the first group is 20, the second group is 10, and the third group is 80. Hence, the largest difficulty among these pairs is 20. It is impossible to split the quests into pairs in such a way that the maximum difficulty of the division is less than 20. In the second example, the quests can be paired as: [1, 2], [3, 4], leaving quest 5 unpaired. The difficulty of these pairs is 1 and 1, the largest being 1. The unpaired quest has a difficulty of 2.","solution":"def minimum_difficulty(m, difficulties): Returns the minimum possible difficulty for dividing quests into pairs and the difficulty of unpaired quest if the number of quests is odd. difficulties.sort() paired_difficulties = [] for i in range(0, m - 1, 2): paired_difficulties.append(abs(difficulties[i + 1] - difficulties[i])) min_max_difficulty = max(paired_difficulties) if paired_difficulties else 0 if m % 2 == 1: unpaired_difficulty = difficulties[-1] return min_max_difficulty, unpaired_difficulty else: return min_max_difficulty # Example usage: #output = minimum_difficulty(5, [1, 2, 3, 4, 5]) #print(output) # Should print (1, 5)"},{"question":"Alice is trying to decode a secret message. The message is encrypted as a sequence of operations applied to a string consisting of only lowercase letters. Alice knows that the original string was a palindrome. A palindrome is a string that reads the same forwards and backwards. The encryption process consists of several operations of two types: 1. Add a letter \'x\' to the end of the string. 2. Remove the last letter of the string. Given the encrypted string, Alice wants to determine if it is possible that the string was a palindrome at some point during the encryption process. Write a function `canBePalindrome(encrypted_string)` to help Alice. # Input - `encrypted_string`: A string consisting of only lowercase letters (1 ≤ |encrypted_string| ≤ 10^5). # Output - Return `True` if it is possible that the string was a palindrome at some point during the encryption process, otherwise return `False`. # Example ```python assert canBePalindrome(\\"abcba\\") == True assert canBePalindrome(\\"abccba\\") == True assert canBePalindrome(\\"abcdba\\") == False assert canBePalindrome(\\"a\\") == True assert canBePalindrome(\\"racecar\\") == True ``` # Note - In the first example, \\"abcba\\" is already a palindrome. - In the third example, \\"abcdba\\" could not have been formed by any series of operations starting from a palindrome. - In the last example, \\"racecar\\" is already a palindrome.","solution":"def canBePalindrome(encrypted_string): Determine if the encrypted string may have been a palindrome at some point during the encryption process. left, right = 0, len(encrypted_string) - 1 while left < right: if encrypted_string[left] != encrypted_string[right]: return False left += 1 right -= 1 return True"},{"question":"Given a list of integers, we define a \\"pseudo-prime\\" number as a number that has exactly three distinct positive divisors. A well-known example of a pseudo-prime is the square of a prime number, such as 9 (3^2), 25 (5^2), or 49 (7^2). Write a function that, given an integer n, generates a list of the first n pseudo-prime numbers. Input The input consists of a single integer n (1 ≤ n ≤ 100). Output The output should be a single line containing n space-separated integers, which are the first n pseudo-prime numbers. Example Input 5 Output 4 9 25 49 121","solution":"def is_prime(num): Determines if the given number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def pseudo_prime_numbers(n): Generates a list of the first n pseudo-prime numbers. Pseudo-prime number is a number that has exactly three distinct positive divisors. pseudo_primes = [] i = 2 while len(pseudo_primes) < n: if is_prime(i): pseudo_primes.append(i * i) i += 1 return pseudo_primes"},{"question":"You are given a grid of dimensions `m x n`, where each cell in the grid can have one of three values: - `0` representing an empty cell, - `1` representing a fresh orange, - `2` representing a rotten orange. Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return `-1`. # Example 1: Input: ``` [ [2,1,1], [1,1,0], [0,1,1] ] ``` Output: ``` 4 ``` # Example 2: Input: ``` [ [2,1,1], [0,1,1], [1,0,1] ] ``` Output: ``` -1 ``` Explanation: The fresh orange in the bottom left corner (grid[2][0]) is never be rotten because rotting only happens to adjacent oranges. # Constraints: - `m == grid.length` - `n == grid[i].length` - `1 <= m, n <= 10` - `grid[i][j]` is `0`, `1`, or `2`.","solution":"from collections import deque def orangesRotting(grid): This function determines the minimum number of minutes that must elapse until no cell has a fresh orange. If it is impossible, it returns -1. m, n = len(grid), len(grid[0]) queue = deque() fresh_oranges = 0 for r in range(m): for c in range(n): if grid[r][c] == 2: queue.append((r, c)) elif grid[r][c] == 1: fresh_oranges += 1 minutes_passed = 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue and fresh_oranges > 0: minutes_passed += 1 for _ in range(len(queue)): x, y = queue.popleft() for dr, dc in directions: nx, ny = x + dr, y + dc if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 1: grid[nx][ny] = 2 fresh_oranges -= 1 queue.append((nx, ny)) return minutes_passed if fresh_oranges == 0 else -1"},{"question":"Jonathan has a collection of distinct colored beads, each represented as a letter from \'a\' to \'z\'. He likes to string them together to form colorful necklaces. One day, his friend challenged him to form the longest necklace possible given the constraints that no two adjacent beads can be of the same color. Given a string of beads where each character represents a bead of a certain color, determine the maximum length of the necklace that can be formed under this rule. Input: The first line of input is an integer n, the number of test cases. The following n lines each contain a string of lowercase letters representing the colors of the beads in that test case. Output: For each test case, print the maximum length of the necklace that can be formed. Constraints: 1 ≤ n ≤ 100 1 ≤ |string length| ≤ 1000 Example: Input 3 abcabcabcd aaaa abcabc Output 10 1 6 Explanation: Test case #1 - The longest necklace possible is \\"abcabcabcd\\" itself with length 10, as all adjacent beads are of different colors. Test case #2 - The longest necklace possible is \\"a\\" with length 1, as all beads are of the same color. Test case #3 - The longest necklace possible is \\"abcabc\\" with length 6, as all adjacent beads are of different colors.","solution":"def longest_necklace(beads): Given a string of beads where each character represents a bead of a certain color, determine the maximum length of the necklace that can be formed where no two adjacent beads are of the same color. n = len(beads) if not beads or n == 1: return n # Initialize the length of the necklace max_len = 1 current_len = 1 # Iterate through the string. If the current and previous beads are different, increment the current length. for i in range(1, n): if beads[i] != beads[i - 1]: current_len += 1 else: # Reset the current length when two adjacent beads are the same current_len = 1 max_len = max(max_len, current_len) return max_len def process_test_cases(test_cases): Given a list of test cases, process and return the maximum length of the necklace that can be formed for each test case. results = [longest_necklace(beads) for beads in test_cases] return results"},{"question":"You are given an array of integers. Write a function to rotate the array elements to the left by a given number of steps. For example, if the array is `[1, 2, 3, 4, 5]` and you rotate it to the left by 2 steps, then the array becomes `[3, 4, 5, 1, 2]`. Constraints * 1 ≤ length of the array ≤ 1000 * 1 ≤ number of steps ≤ length of the array * The input consists of integers. Input In the first line, a sequence of integers separated by spaces is given as the array. In the second line, an integer is given representing the number of steps to rotate the array. Examples Input 1 2 3 4 5 2 Output 3 4 5 1 2 Input 10 20 30 40 50 3 Output 40 50 10 20 30 Input 5 10 15 1 Output 10 15 5","solution":"def rotate_left(arr, steps): Rotates the array to the left by a given number of steps. Args: arr : list - A list of integers to be rotated. steps : int - Number of steps to rotate the array to the left. Returns: list - The rotated array. length = len(arr) steps = steps % length # In case steps is greater than array length return arr[steps:] + arr[:steps]"},{"question":"You are given a grid of H by W cells where each cell has an integer value. Your task is to find the sum of the maximum values of each row. Input The first line of input contains two integers H and W (1 ≤ H, W ≤ 100) — the height and width of the grid. The next H lines each contain W integers representing the values in the grid. Output Print a single integer which is the sum of the maximum values of each row. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 18 Input 2 4 3 1 4 1 5 9 2 6 Output 15 Note In the first example, the maximum values of each row are 3, 6, and 9. The sum of these values is 3 + 6 + 9 = 18. In the second example, the maximum values of each row are 4 and 9. The sum of these values is 4 + 9 = 13.","solution":"def sum_of_max_in_rows(grid): Returns the sum of the maximum values in each row of the grid. :param grid: List of lists containing integers. :return: Integer sum of the maximum values in each row. return sum(max(row) for row in grid) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() H = int(data[0]) W = int(data[1]) grid = [] index = 2 for _ in range(H): row = list(map(int, data[index:index + W])) grid.append(row) index += W result = sum_of_max_in_rows(grid) print(result)"},{"question":"You are given n gold coins, and you need to distribute them among m treasure chests. The distribution should be such that each treasure chest gets a non-zero number of coins. If it is not possible to evenly distribute the coins due to their number or due to any other constraint, then you should maximize the smallest number of coins in any treasure chest. Your task is to write a program that, given values n and m, finds the largest possible value of the smallest number of coins in any treasure chest. Input The single line contains two integers n and m (1 ≤ n, m ≤ 2·10^9) — the number of gold coins and the number of treasure chests respectively. The numbers are separated by exactly one space. Output Print a single integer representing the largest possible value of the smallest number of coins in any treasure chest, or -1 if it\'s impossible to distribute the coins as required. Examples Input 10 3 Output 3 Input 8 4 Output 2 Input 5 6 Output -1 Note In the first example, the optimal way to distribute the coins is to place 3 coins in the first two chests and 4 coins in the last chest, so the smallest number of coins in any chest is 3.","solution":"def distribute_coins(n, m): Determine the maximum value of the smallest number of coins in each treasure chest after distributing n coins into m treasure chests. :param n: int, the number of gold coins :param m: int, the number of treasure chests :return: int, the largest possible value of the smallest number of coins in any chest, or -1 if impossible if m > n: return -1 return n // m"},{"question":"**City Traffic Simulation** In a small city, the traffic lights are controlled by an automated system which ensures that traffic flows smoothly with minimal congestion. The city is represented as a grid of intersections with streets running horizontally and vertically. Each intersection has a traffic light that can either be green for vertical traffic and red for horizontal traffic or vice versa. The traffic lights change states simultaneously at regular intervals. The city planners need your help to simulate the traffic flow at the intersections over a given period. Given a grid of size `n x n`, with `n` representing the number of intersections along each dimension, and `t`, the total number of seconds for which we need to simulate the traffic flow. Each intersection starts with a green light for vertical traffic (and red for horizontal traffic) and switches every second. You need to determine the state of the traffic lights after `t` seconds at each intersection. Input: - The first line contains two integers `n` (1 ≤ n ≤ 100) and `t` (1 ≤ t ≤ 10^9) — the size of the grid and the number of seconds to simulate. Output: - Output `n` lines, each containing `n` characters — \'G\' if the traffic light for the vertical traffic is green, and \'R\' if the traffic light for the horizontal traffic is green, representing the state of each intersection after `t` seconds. Example: Input: ``` 3 2 ``` Output: ``` RRG RRG RRG ``` Input: ``` 2 1 ``` Output: ``` RR RR ``` Note: - When t=1, all lights change state once (green to red or red to green). - When t=2, all lights change state once more, returning to their initial state. Explanation: - For the first example, after 2 seconds, the vertical traffic lights switch to red (\'R\') for the second period, and horizontal traffic lights switch to green (\'G\'). Therefore, the output shows a grid where all intersections have red lights for vertical traffic after 2 seconds. - For the second example, after 1 second, all intersections\' lights will turn red for vertical traffic and green for horizontal traffic.","solution":"def simulate_traffic_lights(n, t): Simulates the traffic lights in a grid of size n x n after t seconds. Parameters: n (int): Size of the grid t (int): Number of seconds to simulate traffic lights Returns: List[str]: A list of strings representing the traffic light states at each intersection # Determine the state based on t % 2 state = \'G\' if t % 2 == 0 else \'R\' # Create the grid with the same state for all intersections grid = [state * n for _ in range(n)] return grid"},{"question":"A company stores user data in a list of dictionaries, each representing a user. They want to implement a system that ensures each user in the list has a unique username, by appending incremental numbers to duplicates. The `username` field of each user must be unique after processing. If a duplicate username is found, append a number starting from 1 to make it unique. Write a function `unique_usernames(users)` which takes a list of dictionaries where each dictionary contains a `username` field among other potential fields, and returns a new list where all usernames are unique. Function signature: ```python def unique_usernames(users: List[Dict[str, Any]]) -> List[Dict[str, Any]]: ``` # Input - `users` - a list of dictionaries, where each dictionary contains at least the key `username` as a string. The length of `users` will be between 1 and 100,000. # Output - A list of dictionaries where all usernames are unique by appending the smallest possible integer to duplicate usernames. The original order must be preserved. # Examples **Example 1:** Input: ```python [ {\\"username\\": \\"john\\", \\"age\\": 25}, {\\"username\\": \\"john\\", \\"age\\": 30}, {\\"username\\": \\"jane\\", \\"age\\": 22}, {\\"username\\": \\"john\\", \\"age\\": 35}, {\\"username\\": \\"jane\\", \\"age\\": 28}, ] ``` Output: ```python [ {\\"username\\": \\"john\\", \\"age\\": 25}, {\\"username\\": \\"john1\\", \\"age\\": 30}, {\\"username\\": \\"jane\\", \\"age\\": 22}, {\\"username\\": \\"john2\\", \\"age\\": 35}, {\\"username\\": \\"jane1\\", \\"age\\": 28}, ] ``` **Example 2:** Input: ```python [ {\\"username\\": \\"alex\\", \\"age\\": 19}, {\\"username\\": \\"alex\\", \\"age\\": 21}, {\\"username\\": \\"alex\\", \\"age\\": 23}, ] ``` Output: ```python [ {\\"username\\": \\"alex\\", \\"age\\": 19}, {\\"username\\": \\"alex1\\", \\"age\\": 21}, {\\"username\\": \\"alex2\\", \\"age\\": 23}, ] ``` **Example 3:** Input: ```python [ {\\"username\\": \\"mary\\", \\"age\\": 24}, {\\"username\\": \\"anna\\", \\"age\\": 22}, {\\"username\\": \\"mary\\", \\"age\\": 27}, {\\"username\\": \\"anna\\", \\"age\\": 30}, {\\"username\\": \\"anna\\", \\"age\\": 28}, ] ``` Output: ```python [ {\\"username\\": \\"mary\\", \\"age\\": 24}, {\\"username\\": \\"anna\\", \\"age\\": 22}, {\\"username\\": \\"mary1\\", \\"age\\": 27}, {\\"username\\": \\"anna1\\", \\"age\\": 30}, {\\"username\\": \\"anna2\\", \\"age\\": 28}, ] ``` # Note - The function should not modify the input list but return a new list. - The order of dictionaries in the list should be maintained in the output.","solution":"def unique_usernames(users): Ensures that each user in the list has a unique username by appending incremental numbers to duplicates. :param users: List of dictionaries, each containing at least the key \'username\' :return: List of dictionaries with unique usernames seen_usernames = {} result = [] for user in users: base_username = user[\'username\'] if base_username not in seen_usernames: seen_usernames[base_username] = 0 result.append(user) else: seen_usernames[base_username] += 1 new_username = f\\"{base_username}{seen_usernames[base_username]}\\" user = user.copy() # Create a copy to avoid modifying the original user dictionary user[\'username\'] = new_username result.append(user) return result"},{"question":"Chef loves solving puzzles! This time, he is given a list of integers and needs to find the smallest contiguous subarray whose sum is greater than or equal to a given target sum `T`. Chef is a quick thinker, but large inputs can be challenging. Can you help Chef determine the minimal length of such a subarray? Input The input consists of two lines: 1. The first line contains two integers `N` and `T`, where `N` is the length of the list, and `T` is the target sum. 2. The second line contains `N` space-separated integers which represent the elements of the list. Output Print a single integer representing the length of the smallest contiguous subarray whose sum is greater than or equal to `T`. If there is no such subarray, print `0`. Constraints 1 ≤ N ≤ 10^5 1 ≤ T ≤ 10^9 1 ≤ list[i] ≤ 10^5 Example Input: 8 15 1 2 3 4 5 6 7 8 Output: 2 Input: 5 100 1 2 3 4 5 Output: 0 Explanation In the first case, the subarray [7, 8] has a sum of 15 which is the smallest subarray satisfying the condition. In the second case, no subarray sums to 100 or more.","solution":"def find_min_length_subarray(N, T, numbers): Finds the length of the smallest contiguous subarray with sum >= T :param N: int : Number of elements in the list :param T: int : Target sum :param numbers: list : List of integers :return: int : Length of the smallest subarray with sum >= T # Initialize variables min_length = float(\'inf\') current_sum = 0 start_index = 0 # Use two pointers to find the smallest subarray with sum >= T for end_index in range(N): current_sum += numbers[end_index] while current_sum >= T: min_length = min(min_length, end_index - start_index + 1) current_sum -= numbers[start_index] start_index += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"You are part of a team in charge of monitoring a security system for a large office building. The building\'s security system logs the timestamp of every person entering and leaving the building. Your task is to determine how many people are in the building at each point in time when a person enters or leaves. Given a list of entries and exits along with their respective timestamps, you need to keep track of the number of people present in the building after each event chronologically. Input The first line of input consists of a single integer n (1 ≤ n ≤ 1000), the number of events recorded by the system. The next n lines contain a string and an integer separated by a space. The string can be either \\"enter\\" or \\"leave\\", indicating whether a person is entering or leaving the building. The integer represents the timestamp in seconds since the building opened (0 ≤ timestamp ≤ 10^6). The events are not given in chronological order. Output Output n lines. Each line should contain an integer representing the number of people in the building immediately after each entered event, output in chronological order of occurrence. Example Input 5 enter 5 leave 10 enter 20 leave 25 enter 15 Output 1 0 2 1 2 Note In the example: - At timestamp 5, one person enters the building. - At timestamp 10, one person leaves the building, so the building becomes empty. - At timestamp 15, one more person enters the building. - At timestamp 20, another person enters the building, making it two people inside. - At timestamp 25, one person leaves, leaving one person inside the building.","solution":"def get_people_in_building(events): Given a list of events in the format [\\"enter timestamp\\"] or [\\"leave timestamp\\"], returns the number of people in the building after each event in chronological order. events.sort(key=lambda x: x[1]) people_in_building = 0 result = [] for event in events: action, timestamp = event if action == \\"enter\\": people_in_building += 1 elif action == \\"leave\\": people_in_building -= 1 result.append(people_in_building) return result"},{"question":"You are given an integer n. You need to calculate how many steps it will take to reduce n to 1. If n is even, divide it by 2. If n is odd, multiply it by 3 and add 1. This problem follows the Collatz Conjecture. Constraints * 1 ≤ n ≤ 10^6 Input n Output Print the number of steps required to reduce n to 1. Examples Input 6 Output 8 Input 15 Output 17 Input 1 Output 0","solution":"def collatz_steps(n): Returns the number of steps required to reduce n to 1 following the rules of the Collatz Conjecture. If n is even, divide it by 2. If n is odd, multiply it by 3 and add 1. steps = 0 while n != 1: if n % 2 == 0: n //= 2 else: n = n * 3 + 1 steps += 1 return steps"},{"question":"You are given a sequence of integers arranged in a circular manner. A circular sequence means that the next element of the last element is the first element. You need to find the starting position of a subarray of length `k` with the maximum sum. If there are multiple such subarrays with the same sum, return the smallest starting index. Input The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 10^5), representing the length of the circular sequence and the length of the subarray respectively. The second line contains `n` integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4), representing the elements of the sequence. Output Print one integer, the starting position (0-based index) of the subarray of length `k` with the maximum sum. Examples Input 9 3 8 -1 3 4 5 -6 7 -2 1 Output 2 Input 5 2 5 -3 6 3 -2 Output 2 Note In the first example, the maximum sum is 16, and the subarray [4, 5, -6] starting at index 2 has the maximum sum of 12. Since the sequence is circular, we also consider subarrays like [1, 8, -1] starting from the end and wrapping around to the beginning.","solution":"def max_circular_subarray_start(n, k, arr): if k == 1: return arr.index(max(arr)) max_sum = -float(\'inf\') current_sum = sum(arr[:k]) max_start_index = 0 for i in range(n): if current_sum > max_sum: max_sum = current_sum max_start_index = i current_sum = current_sum - arr[i] + arr[(i + k) % n] return max_start_index"},{"question":"Mark is managing a library system, and he needs a script to help organize the lending of books. The library has a rule that a book can only be borrowed by one user at a time and must be returned to the system before being lent out again. Additionally, every user must wait out a cooldown period after borrowing a book before they can borrow another one. Help Mark by writing a script to simulate this system for a series of borrowing and returning requests. Input The first line contains two integers n (1 ≤ n ≤ 100) — the number of users and m (1 ≤ m ≤ 100) — the number of books. The next line contains n space-separated distinct usernames. Each username consists of lowercase and uppercase English letters and digits. The usernames can\'t start with a digit. Two usernames are different even if they differ only with letters\' case. The length of username is positive and doesn\'t exceed 10 characters. The next line contains m space-separated distinct book titles. Each title consists of lowercase and uppercase English letters, digits, characters \'.\' (dot), \',\' (comma), \':\' (colon), and \' \' (space). The length of each title is positive and doesn\'t exceed 100 characters. The next line contains a single integer k (1 ≤ k ≤ 1000) — the number of transactions. Each of the following k lines describes a transaction in one of the following formats: - BORROW <username> <book_title> - RETURN <book_title> The transactions happen in the order they are given. It is guaranteed that: - A BORROW transaction will only occur if the book is not currently borrowed. - A RETURN transaction will only occur if the book is currently borrowed. Output For each BORROW transaction, print \\"Borrowed\\" if the transaction is successful, or \\"Cooldown\\" if the user is still in a cooldown period from a previous borrow. For each RETURN transaction, print \\"Returned\\". Examples Input 3 3 Alice Bob Charlie The Great Gatsby Moby Dick To Kill a Mockingbird 7 BORROW Alice The Great Gatsby RETURN The Great Gatsby BORROW Bob To Kill a Mockingbird RETURN To Kill a Mockingbird BORROW Alice The Great Gatsby RETURN The Great Gatsby BORROW Alice To Kill a Mockingbird Output Borrowed Returned Borrowed Returned Borrowed Returned Borrowed Input 2 2 Tom Jerry 1984 Animal Farm 6 BORROW Tom 1984 RETURN 1984 BORROW Tom Animal Farm BORROW Jerry 1984 RETURN 1984 BORROW Jerry Animal Farm Output Borrowed Returned Borrowed Borrowed Returned Borrowed","solution":"def library_system(n, m, usernames, book_titles, k, transactions): borrowed_books = {} cooldown_users = {} output = [] for transaction in transactions: parts = transaction.split() command = parts[0] if command == \'BORROW\': username = parts[1] book_title = \\" \\".join(parts[2:]) if username in cooldown_users: output.append(\\"Cooldown\\") else: borrowed_books[book_title] = username cooldown_users[username] = True output.append(\\"Borrowed\\") elif command == \'RETURN\': book_title = \\" \\".join(parts[1:]) username = borrowed_books.pop(book_title, None) if username: cooldown_users.pop(username, None) output.append(\\"Returned\\") return output"},{"question":"You are a manager of a warehouse and you need to track inventory for a particular product. The product inventory is updated through two types of operations: adding stock and removing stock. Additionally, at any given point, you may need to record the current amount of stock available in the warehouse. You need to implement a system that supports these operations efficiently. Operation Types: 1. Add stock: Add a specified amount to the current stock. 2. Remove stock: Remove a specified amount from the current stock. Assume that the removal operation will never attempt to remove more stock than what is available. 3. Record stock: Output the current stock amount. Write a program that processes a sequence of operations and outputs the stock amount whenever the Record stock operation is encountered. Constraints * 1 ≤ number of operations ≤ 10^6 * 1 ≤ stock amount in an Add stock or Remove stock operation ≤ 10^4 * All input values are integers. Input Input is given from Standard Input in the following format: The first line contains an integer that specifies the number of operations. Each of the next lines describes an operation in one of the following formats: - \'1 x\': an \\"Add stock\\" operation, where x is the amount to add. - \'2 x\': a \\"Remove stock\\" operation, where x is the amount to remove. - \'3\': a \\"Record stock\\" operation, where the current stock amount should be printed. Output Whenever a \\"Record stock\\" operation is encountered, print the current stock amount on a new line. Examples Input 5 1 500 3 2 200 3 1 300 Output 500 300 Input 8 1 1000 1 500 3 2 250 3 1 750 2 1000 3 Output 1500 1250 1000","solution":"def process_operations(operations): Processes a sequence of stock operations and returns the recorded stock amounts. Parameters: operations (list of str): List of operation strings in the specified format. Returns: list of int: Stock amounts recorded at each \\"Record stock\\" operation. stock = 0 recorded_stocks = [] for operation in operations: parts = operation.split() op_type = int(parts[0]) if op_type == 1: # Add stock operation amount = int(parts[1]) stock += amount elif op_type == 2: # Remove stock operation amount = int(parts[1]) stock -= amount elif op_type == 3: # Record stock operation recorded_stocks.append(stock) return recorded_stocks"},{"question":"You are given a matrix of dimensions n x m containing integers. You have to rotate the matrix 90 degrees clockwise. Rotating a matrix 90 degrees clockwise means transforming the position of each element A[i][j] into A\'[j][n-i-1]. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the matrix. - The next n lines contain m integers each, representing the matrix elements. Output - Output the transformed matrix. Examples Input 3 4 1 2 3 4 5 6 7 8 9 10 11 12 Output 9 5 1 10 6 2 11 7 3 12 8 4 Note In the given example, the original matrix is: 1 2 3 4 5 6 7 8 9 10 11 12 After rotating 90 degrees clockwise, the resultant matrix will be: 9 5 1 10 6 2 11 7 3 12 8 4","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given matrix 90 degrees clockwise. :param matrix: List of lists representing the matrix to be rotated :return: Rotated matrix if not matrix or not matrix[0]: return [] n = len(matrix) m = len(matrix[0]) # Initialize a new matrix to store the rotated result rotated_matrix = [[0] * n for _ in range(m)] for i in range(n): for j in range(m): rotated_matrix[j][n - i - 1] = matrix[i][j] return rotated_matrix def matrix_to_string(matrix): return \'n\'.join(\' \'.join(map(str, row)) for row in matrix)"},{"question":"You are given a string consisting of lowercase Latin letters. You need to perform operations to change this string into a palindrome in a way that minimizes the total cost. In one operation you can pick any character and change it into any other lowercase Latin letter. Each change has a cost of 1. A palindrome is a string that reads the same backward as forward, e.g., \\"madam\\" or \\"racecar\\". Your task is to determine the minimum cost to make the given string a palindrome. # Input The first line of input contains an integer `n` (1 ≤ n ≤ 100) — the length of the string. The second line of input contains the string `s` consisting of `n` lowercase Latin letters. # Output Print one integer — the minimum cost to make the given string a palindrome. # Examples Input 4 abca Output 1 Input 5 abcde Output 2 Input 3 aaa Output 0 # Note In the first example, changing the last character \'a\' to \'c\' results in the palindrome \\"abca\\" ➞ \\"abccba\\". Therefore, the cost is 1. In the second example, changing \'a\' to \'e\' and \'e\' to \'a\' or changing middle \'c\', costs 2.","solution":"def min_cost_to_make_palindrome(n, s): Returns the minimum cost to convert the string s of length n into a palindrome. Parameters: n (int): length of the string s (str): input string consisting of lowercase Latin letters Returns: int: minimum cost to make the string a palindrome cost = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: cost += 1 return cost"},{"question":"You are managing a music streaming platform, and you need to ensure a smooth user experience while playing songs. Each song has a unique length, and each user has a unique preferred duration for listening to songs. You need to find the maximum number of songs you can queue such that every song\'s duration is at least as long as the user\'s preferred duration. If there is no song that matches a user\'s preference, then the queue for that user should be empty. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of songs and the number of users, respectively. The second line contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^9), where s_i is the length of the i-th song. The third line contains m integers p_1, p_2, ..., p_m (1 ≤ p_i ≤ 10^9), where p_i is the preferred duration of the i-th user. Output Print one integer — the maximum number of songs you can queue for users while satisfying their preferences. Examples Input 6 4 3 5 8 1 9 6 2 4 7 5 Output 4 Input 5 3 10 15 3 7 4 6 10 5 Output 3 Input 4 2 2 2 2 2 3 4 Output 0 Note In the first example, the maximum number of queued songs is 4. The songs with lengths 3, 5, 8, and 6 can satisfy users\' preferences of 2, 4, 7, and 5, respectively. In the second example, the maximum number of queued songs is 3. The songs with lengths 10, 15, and 7 can satisfy users\' preferences of 6, 10, and 5, respectively. In the third example, there are no songs with lengths of at least 3 or 4 to satisfy the users\' preferences, resulting in a maximum queue of 0 songs.","solution":"def max_songs_that_can_be_queued(n, m, song_lengths, preferred_durations): Returns the maximum number of songs that can be queued such that every song\'s duration is at least as long as the user\'s preferred duration. Parameters: n (int): Number of songs m (int): Number of users song_lengths (List[int]): List of lengths of the songs preferred_durations (List[int]): List of users\' preferred durations for a song Returns: int: Maximum number of songs that can be queued song_lengths.sort() preferred_durations.sort() i, j = 0, 0 count = 0 while i < n and j < m: if song_lengths[i] >= preferred_durations[j]: count += 1 j += 1 i += 1 return count"},{"question":"You are helping an organization to automate the validation process of email addresses. An email address is considered valid if and only if it meets the following criteria: 1. It contains exactly one \'@\' symbol. 2. The domain part (the part after \'@\') includes at least one dot (\'.\'). 3. The local part (the part before \'@\') can only contain Latin letters (a-z), digits (0-9), underscores (_), hyphens (-), and dots (.), but it cannot start or end with a dot, and it cannot contain consecutive dots. Design a function that takes an email address as input and returns whether it is valid or not based on the above criteria. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of email addresses to be validated. Each of the next t lines contains a string representing an email address to be validated. Each email address is between 3 and 320 characters long. Output For each email address, output \\"YES\\" if it is valid, otherwise output \\"NO\\". Examples Input 3 john.doe@example.com jane_doe123@company.co.uk invalid-email@address..com Output YES YES NO Note For the given examples: 1. The first and second email addresses are valid according to the criteria. 2. The third email address is invalid because it contains consecutive dots in the domain part (address..com).","solution":"import re def validate_email(email): Validates the email address based on the given criteria. if email.count(\'@\') != 1: return \\"NO\\" local_part, domain_part = email.split(\'@\') # Check if domain part contains at least one dot if \'.\' not in domain_part: return \\"NO\\" # Regex to check valid local part local_part_pattern = re.compile(r\\"^[a-zA-Z0-9_-]+(.[a-zA-Z0-9_-]+)*\\") if not local_part_pattern.match(local_part): return \\"NO\\" # Check local part doesn\'t start or end with a dot if local_part.startswith(\'.\') or local_part.endswith(\'.\'): return \\"NO\\" # Check domain part doesn\'t contain consecutive dots if \'..\' in domain_part: return \\"NO\\" return \\"YES\\" def validate_emails(email_list): Takes list of email addresses and returns their validation status. return [validate_email(email) for email in email_list]"},{"question":"You are given a list of people with their birth and death years. A year is said to be \\"alive\\" if at least one person was alive during that year. Note that a person is considered alive for the full years of their birth and death. Your task is to write a program that determines the year with the highest number of people alive. Input: - The first line contains an integer T, which denotes the number of test cases. - Each test case starts with an integer N, which indicates the number of people. - For the next N lines, each line contains two integers, representing the birth and death years of a person. Output: - For each test case, output a single integer, the year with the highest number of people alive. If more than one year has the highest count, output the earliest year. Constraints: - 1 ≤ T ≤ 5 - 1 ≤ N ≤ 1000 - 1900 ≤ birth year ≤ death year ≤ 2000 Example: Input: 1 3 1900 1950 1942 1962 1950 2000 Output: 1950 Explanation: In the given test case, the years and their corresponding alive counts would be: - 1900-1950: 1 person (First person alive) - 1942-1950: 2 people (First and second person alive) - 1950-1962: 3 people (All three people alive) - 1963-2000: 1 person (Third person alive) The year 1950 has the highest number of people alive with a count of 3. Hence, the output is 1950.","solution":"def year_with_highest_population(test_cases): results = [] for case in test_cases: years = {} for birth, death in case: for year in range(birth, death + 1): if year in years: years[year] += 1 else: years[year] = 1 max_population = max(years.values()) max_year = min(year for year in years if years[year] == max_population) results.append(max_year) return results"},{"question":"You are given a list of commands that will be given to a robot on a 2D plane. The robot starts at the origin (0,0) facing North. The commands consist of four types: \\"G\\" (move 1 unit forward in the direction the robot is currently facing), \\"L\\" (turn 90 degrees to the left), \\"R\\" (turn 90 degrees to the right), and \\"B\\" (move 1 unit backward in the direction the robot is currently facing). You need to determine if the robot will return to the origin at the end of possibly infinite command repetitions, thus forming a cycle. Input A single line of input contains a string commands — the list of commands. The string commands contains between 1 and 100 characters, inclusive, and contains only characters \\"G\\", \\"L\\", \\"R\\", and \\"B\\". Output Output \\"YES\\" if the robot returns to the origin at the end of possibly infinite command repetitions, otherwise output \\"NO\\". Examples Input GLGR Output NO Input GLGLGLG Output YES Note In the first example, following the sequence of commands once will leave the robot at some distance from the origin, and repeating the commands will only move the robot further away. In the second example, following the commands will make the robot turn back to the origin, forming a loop which makes it possible to return to the origin at the end of every cycle.","solution":"def is_robot_bounded(commands: str) -> str: Determines if the robot returns to the origin at the end of the command cycle. # Initial position and direction (Start at the origin, facing north) x = y = 0 direction = 0 # 0 = North, 1 = East, 2 = South, 3 = West # Map directions for ease of turning. North -> 0, East -> 1, South -> 2, West -> 3 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for command in commands: if command == \'G\': x += directions[direction][0] y += directions[direction][1] elif command == \'L\': direction = (direction - 1) % 4 elif command == \'R\': direction = (direction + 1) % 4 elif command == \'B\': x -= directions[direction][0] y -= directions[direction][1] # The robot will be bounded in a circle if after one cycle: # 1. It is back at the origin (0, 0) # 2. It is not facing north (direction != 0) if (x == 0 and y == 0) or direction != 0: return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers and a target integer. Determine if there are two distinct indices within the array such that the sum of the elements at those indices is equal to the target integer. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000) — the elements of the array. The third line contains an integer target (-2000 ≤ target ≤ 2000) — the target sum. Output If there exist two indices i and j (1 ≤ i < j ≤ n) such that ai + aj = target, print \\"YES\\" (without quotes). Otherwise, print \\"NO\\" (without quotes). Examples Input 5 1 2 3 4 5 9 Output YES Input 3 -1 -2 -3 -6 Output NO Input 4 1 -1 2 -2 0 Output YES","solution":"def two_sum_exists(nums, target): Determines if there are two distinct indices within the array such that the sum of the elements at those indices is equal to the target integer. :param nums: List[int] - List of integers. :param target: int - The target sum. :return: str - \\"YES\\" if such indices exist, otherwise \\"NO\\". seen = set() for num in nums: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"There are N cities connected by bidirectional roads. Each road has a travel cost associated with it. You are given the adjacency matrix of a graph representing the cities and the cost of traveling between them. Your task is to find the minimum cost to travel from city 1 to city N. If there is no path from city 1 to city N, return -1. INPUT: - The first line contains a single integer N, the number of cities. - The next N lines contain N integers each, representing the adjacency matrix of the graph. The value at the j-th integer of the i-th line represents the travel cost between city i and city j. If i = j, then the cost is 0. If there is no direct road between two cities, the matrix entry will be -1. OUTPUT: - Output the minimum cost to travel from city 1 to city N. If there is no path, output -1. CONSTRAINTS: - 2 ≤ N ≤ 100 - -1 ≤ Cost ≤ 1000 SAMPLE INPUT 4 0 3 1 -1 3 0 7 5 1 7 0 2 -1 5 2 0 SAMPLE OUTPUT 4 Explanation: The minimum cost path from city 1 to city 4 is: 1 -> 3 -> 4 with a cost of 1 + 2 = 3.","solution":"import heapq def dijkstra(graph, start, end): n = len(graph) min_heap = [(0, start)] distances = {node: float(\'inf\') for node in range(n)} distances[start] = 0 visited = set() while min_heap: current_dist, current_node = heapq.heappop(min_heap) if current_node in visited: continue visited.add(current_node) if current_node == end: return current_dist for neighbor in range(n): if graph[current_node][neighbor] != -1 and neighbor not in visited: distance = current_dist + graph[current_node][neighbor] if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return -1 if distances[end] == float(\'inf\') else distances[end] def minimum_cost_to_travel(N, adjacency_matrix): return dijkstra(adjacency_matrix, 0, N - 1)"},{"question":"You are given a sequence of positive integers. For each element in the sequence, you can choose to either increment or decrement it by one. Your task is to determine the minimum number of operations required to make all the elements of the sequence equal. Input The first line contains an integer t (1 ≤ t ≤ 50), the number of test cases. Each test case contains: - The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the sequence. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), the elements of the sequence. Output For each test case, print a single integer representing the minimum number of operations required to make all elements equal. Example Input 3 4 1 2 3 4 3 2 2 2 5 3 3 4 4 4 Output 4 0 2 Note In the first test case, you can make all elements equal to 2 or 3 (both require 4 operations). In the second case, the sequence is already uniform, thus no operations are needed. In the third case, making all elements equal to 4 requires 2 operations.","solution":"def min_operations_to_equal_elements(t, test_cases): results = [] for case in test_cases: n, elements = case median = sorted(elements)[n // 2] operations = sum(abs(x - median) for x in elements) results.append(operations) return results"},{"question":"In a quaint town known for its intricate wall patterns, the townsfolk decided to challenge tourists with a novel puzzle. The puzzle involves a rectangular grid of size `n x m`, where some cells contain walls (represented by `\'#\'`) and others are free spaces (represented by `\'.\'`). The challenge is to divide the walls into separate contiguous blocks following these rules: 1. Each block must consist of exactly four cells, forming a 2x2 square. 2. All the cells forming a block must be contiguous and connected horizontally and vertically (diagonals do not count). Given the grid, determine if it is possible to partition all the walls into the required 2x2 contiguous blocks. If possible, output `YES`; otherwise, output `NO`. Input The first line contains two positive integers `n` and `m` (1 ≤ n, m ≤ 50) representing the number of rows and columns of the grid. Each of the following `n` lines contains `m` characters, each either `\'.\'` for a free space or `\'#\'` for a wall. Output Print `YES` if it is possible to partition all the walls into non-overlapping 2x2 contiguous blocks. Otherwise, print `NO`. # Examples Input ``` 6 8 ...... ...... .... .... .... .... ``` Output ``` YES ``` Input ``` 4 4 .# .. ...# ``` Output ``` NO ``` In the first example, every \'#\' can be grouped into a 2x2 block. In the second example, it is not possible to form contiguous 2x2 blocks for all \'#\'. Thus, the output is `NO`. # Note To solve the puzzle: 1. Iterate through each cell of the grid. 2. For each cell containing `#`, check if it\'s possible to form a 2x2 block with its neighboring cells. 3. Ensure no part of the grid\'s walls is left ungrouped into a complete 2x2 block.","solution":"def is_possible_to_partition_walls(n, m, grid): def mark_block_as_visited(i, j): grid[i][j] = \'.\' grid[i+1][j] = \'.\' grid[i][j+1] = \'.\' grid[i+1][j+1] = \'.\' for i in range(n-1): for j in range(m-1): if grid[i][j] == \'#\' and grid[i+1][j] == \'#\' and grid[i][j+1] == \'#\' and grid[i+1][j+1] == \'#\': mark_block_as_visited(i, j) for i in range(n): for j in range(m): if grid[i][j] == \'#\': return \\"NO\\" return \\"YES\\""},{"question":"Write a program that checks if two given strings are anagrams of each other. Two strings are anagrams if one string can be rearranged to form the other, using all the original characters exactly once. Input: The first line of the input contains a single integer T, the number of test cases. Each of the next T lines contains two strings, str1 and str2, separated by a space. Output: For each test case, output \\"Yes\\" if the two strings are anagrams of each other, or \\"No\\" otherwise. Example: Input: 3 listen silent triangle integral apple pplea Output: Yes Yes No Constraints: - 1 ≤ T ≤ 1000 - 1 ≤ length of str1, str2 ≤ 100 - All strings consist of lowercase English letters only Explanation: In the first test case, \'listen\' and \'silent\' are anagrams because they contain the same letters with the same frequencies. In the second test case, \'triangle\' and \'integral\' are anagrams for similar reason. In the third test case, \'apple\' and \'pplea\' are not anagrams because they do not have the same letters with the same frequencies.","solution":"def are_anagrams(str1, str2): Check if str1 and str2 are anagrams of each other. return sorted(str1) == sorted(str2) def check_anagrams(test_cases): For each pair of strings in test_cases, check if they are anagrams and return corresponding results. results = [] for str1, str2 in test_cases: if are_anagrams(str1, str2): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Bob is playing a game in which he needs to destroy all balloons on the screen. Each balloon is represented by a position on a horizontal axis. Bob can shoot arrows at specific points, and each arrow destroys all balloons at that exact position. However, each balloon shifts one position to the right every second. You are given an array `balloons` where each element represents the initial position of a balloon on the axis. Bob can only shoot arrows at integral positions and can shoot multiple arrows in one second. Determine the minimum number of arrows Bob needs to shoot to destroy all balloons, considering the balloons shift to the right at every second. Input: - The first line contains an integer `n` (1 ≤ n ≤ 2 * 10^5) – the number of balloons. - The second line contains `n` space-separated integers representing the initial positions of the balloons on the axis. Output: - Print a single integer – the minimum number of arrows Bob needs to shoot to destroy all balloons. Examples: Input: ``` 5 1 3 5 7 9 ``` Output: ``` 5 ``` Input: ``` 6 1 4 2 3 5 6 ``` Output: ``` 6 ``` Input: ``` 8 1 100 200 300 1000 2000 3000 4000 ``` Output: ``` 8 ``` Explanation: - In the first example, each balloon is initially at a different position, and after one second, their positions will be [2, 4, 6, 8, 10]. Bob needs to shoot 5 arrows at 2, 4, 6, 8, and 10 to destroy all balloons. - In the second example, although balloons initially start at varying positions after one second, their positions will be [2, 5, 3, 4, 6, 7]. Bob needs to shoot arrows at each new position to ensure all balloons are destroyed. - In the third example, due to the large gaps between the positions, Bob will need to shoot separate arrows for each new shifted position after every second shift. Hence, he needs to shoot 8 arrows.","solution":"def min_arrows_to_destroy_balloons(n, balloons): balloons = list(map(int, balloons)) min_arrows = len(balloons) # Each balloon will require at least one arrow after it shifts return min_arrows"},{"question":"Alex is organizing a marathon event. He wants to distribute bottles of water to the participants in a way that each participant receives sufficient hydration. The participants have been divided into groups based on their hydration needs. Each group `i` has `P[i]` participants and each participant in this group needs `H[i]` bottles of water. Alex has a total of `W` bottles of water available. Determine if Alex can distribute the bottles of water such that every participant in all the groups receives the required amount of hydration. If it\'s possible, print \\"Yes\\". Otherwise, print \\"No\\". Constraints * 1 ≤ N ≤ 100 (N is the number of groups) * 1 ≤ P[i], H[i] ≤ 1000 * 1 ≤ W ≤ 10^6 Input Input is given from Standard Input in the following format: ```plaintext N P[1] H[1] P[2] H[2] ... P[N] H[N] W ``` Output Print \\"Yes\\" if Alex can distribute the bottles as needed, otherwise print \\"No\\". Examples Input ```plaintext 3 10 2 20 3 5 1 100 ``` Output ```plaintext Yes ``` Input ```plaintext 2 8 5 12 4 70 ``` Output ```plaintext No ``` Input ```plaintext 4 15 2 25 3 10 1 5 2 40 ``` Output ```plaintext No ```","solution":"def can_distribute_water(N, groups, W): total_required_bottles = 0 for participants, bottles_per_participant in groups: total_required_bottles += participants * bottles_per_participant if total_required_bottles <= W: return \\"Yes\\" else: return \\"No\\""},{"question":"You are a software developer and need to write a program that deals with string manipulations. Consider you have a string which contains only lowercase alphabets. Your task is to replace each character in the string by the character that appears exactly one place after it in the English alphabet. For example, \'a\' should be replaced by \'b\', \'b\' should be replaced by \'c\', and so on. The last character \'z\' should be wrapped around and replaced by \'a\'. Write a program that takes the string as an input and provides the modified string as the output. Input A single line containing the input string consisting of lowercase alphabets only. Output A single line containing the modified string. Constraints 1 ≤ length of string ≤ 100 SAMPLE INPUT xyz SAMPLE OUTPUT yza","solution":"def shift_string(s): Returns a new string where each character in the input string s is replaced by the character that appears exactly one place after it in the English alphabet. The character \'z\' wraps around to \'a\'. :param s: Input string containing only lowercase alphabets :return: Modified string return \'\'.join(chr((ord(char) - ord(\'a\') + 1) % 26 + ord(\'a\')) for char in s)"},{"question":"Create a function that takes a string as input and determines whether it is possible to create a palindrome by rearranging its characters. If possible, the function should return \\"YES\\", otherwise, it should return \\"NO\\". Input The input consists of a single string `s` (1 <= |s| <= 100) which contains only lowercase English letters. Output The function should return \\"YES\\" if it is possible to rearrange the characters of `s` to form a palindrome, otherwise it should return \\"NO\\". Examples Input ``` civic ``` Output ``` YES ``` Input ``` ivicc ``` Output ``` YES ``` Input ``` hello ``` Output ``` NO ```","solution":"from collections import Counter def can_form_palindrome(s): Returns \\"YES\\" if it is possible to rearrange the characters of `s` to form a palindrome, otherwise returns \\"NO\\". count = Counter(s) odd_count = sum(1 for v in count.values() if v % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given a sequence of n integers: a1, a2, ..., an. You have to process m operations on this sequence. There are two types of operations: 1. Update operation: Replace an element of the sequence with a given value. 2. Query operation: Given a subarray, calculate the number of distinct values in that subarray. Your task is to implement these operations efficiently. Input: The first line contains an integer n (1 ≤ n ≤ 100000) — the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000) — the elements of the sequence. The third line contains an integer m (1 ≤ m ≤ 100000) — the number of operations. Each of the next m lines contains an operation in one of the following formats: 1. `1 x y` — Replace the x-th element of the sequence with y (1 ≤ x ≤ n, 1 ≤ y ≤ 100000). 2. `2 x y` — Calculate the number of distinct elements in the subarray from index x to index y (1 ≤ x ≤ y ≤ n). Output: For each query operation, output the number of distinct elements in the specified subarray. Example: Input: ``` 5 1 2 3 4 5 5 2 1 5 1 3 2 2 1 5 2 2 4 1 5 1 ``` Output: ``` 5 4 3 ``` Explanation: 1. The initial sequence is `1 2 3 4 5`. 2. The first query asks for distinct elements between index 1 and 5, which are `1, 2, 3, 4, 5`. 3. The update operation changes the 3rd element to `2`, resulting in sequence `1 2 2 4 5`. 4. The second query asks for distinct elements between index 1 and 5, which are `1, 2, 4, 5`. 5. The third query asks for distinct elements between index 2 and 4, which are `2, 4`. 6. The final update operation changes the 5th element to `1`, resulting in sequence `1 2 2 4 1`.","solution":"class SequenceOperator: def __init__(self, sequence): self.sequence = sequence def update(self, index, value): self.sequence[index - 1] = value def query(self, left, right): return len(set(self.sequence[left - 1:right]))"},{"question":"You are given an n x n grid. Each cell in the grid initially contains either 0 or 1. You are allowed to flip any number of cells in the grid. Flipping a cell changes its value from 0 to 1 or from 1 to 0. Your task is to find the minimum number of flips required such that each row and each column in the grid contains at least one 1. If it is impossible to achieve this, return -1. Input The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 50) — the size of the grid. The next n lines contain n integers each (either 0 or 1), representing the grid. Output For each test case, print the answer — the minimum number of flips required to make sure that each row and each column contains at least one 1. If it is impossible to achieve this, print -1. Example Input 3 3 0 0 0 0 0 0 0 0 0 2 1 0 0 1 2 0 1 1 0 Output 3 0 0 Note In the first test case, you need to flip at least one cell in each row and one cell in each column to ensure there is at least one 1 in each row and column. One possible solution is to flip (1,1), (2,2), and (3,3). In the second and third test cases, no flips are needed as each row and each column already contain at least one 1.","solution":"def min_flips_to_ensure_ones(t, test_cases): t : int : number of test cases test_cases : list : list of test cases, where each test case is defined by an integer n followed by an n x n grid. Returns a list of integers representing the minimum number of flips required for each test case or -1 if it is impossible. results = [] for case in test_cases: n = case[0] grid = case[1] # Check for rows and columns that already have a 1 row_has_one = [False] * n col_has_one = [False] * n for i in range(n): for j in range(n): if grid[i][j] == 1: row_has_one[i] = True col_has_one[j] = True # Count the number of rows and columns that do not have any 1s row_count = sum(1 for x in row_has_one if not x) col_count = sum(1 for x in col_has_one if not x) # If either row_count or col_count is greater than the size of the grid, # it is impossible to satisfy the condition. if row_count > n or col_count > n: results.append(-1) else: results.append(max(row_count, col_count)) return results"},{"question":"In a town, there are h houses and r roads between them, where each road connects exactly two houses. Every road is in good condition which allows cars to travel back and forth between houses. However, some roads have tolls while others do not. You are given a list of roads where some have tolls that residents want to avoid. You need to determine if there is a way to travel from one house to another without paying tolls. Input The first line contains three integers h, r, and t (1 ≤ h, r ≤ 3·10^5, 0 ≤ t ≤ r) — the number of houses, roads, and toll roads respectively. Each of the next r lines contains three integers x_i, y_i, and z_i (1 ≤ x_i, y_i ≤ h, x_i ≠ y_i, 0 ≤ z_i ≤ 1), where x_i and y_i are the houses connected by the i-th road, z_i equals to one if that road has a toll and zero otherwise. There are no more than one road between any pair of houses. The last line contains two integers s and d (1 ≤ s, d ≤ h) — the houses where the journey starts and where it should end, respectively. Output If it is possible to travel from house s to house d without using any toll roads, print \\"POSSIBLE\\". Otherwise, print \\"IMPOSSIBLE\\". Examples Input 6 7 2 1 2 0 2 3 1 3 1 0 3 4 0 4 5 0 5 6 1 6 4 0 1 6 Output POSSIBLE Input 5 4 2 1 2 1 2 3 0 3 4 1 4 5 0 1 5 Output IMPOSSIBLE Input 4 4 0 1 2 0 2 3 0 3 4 0 4 1 0 1 3 Output POSSIBLE","solution":"def is_possible_to_travel_without_tolls(h, r, t, roads, s, d): from collections import defaultdict, deque # Create a graph without toll roads graph = defaultdict(list) for x, y, z in roads: if z == 0: # only consider roads without toll graph[x].append(y) graph[y].append(x) # Use BFS to check if there\'s a path from s to d avoiding toll roads queue = deque([s]) visited = set([s]) while queue: house = queue.popleft() if house == d: return \\"POSSIBLE\\" for neighbor in graph[house]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return \\"IMPOSSIBLE\\""},{"question":"John loves solving puzzles, and his latest obsession is with numeric sequences. He\'s trying to create a specific type of sequence but needs your help to ensure its validity. John wants to construct an integer sequence a of length n. John considers a sequence valid if it satisfies the following conditions: 1. Every element of the sequence a is between 1 and k, inclusive. 2. The sum of all elements in the sequence is equal to s. Write a program to help John determine if it\'s possible to create such a sequence. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Input The first line of the input contains three integers n, k, and s (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000, 1 ≤ s ≤ 10000) — the length of the sequence, the maximum possible individual element, and the desired sum of the sequence, respectively. Output Output one line: \\"YES\\" if it is possible to create such a sequence, otherwise \\"NO\\". Examples Input 3 5 10 Output YES Input 4 5 22 Output NO Note In the first example, John can create the sequence [5, 5, 0] or [3, 3, 4] among other possibilities, to meet the condition of having elements between 1 and 5 and summing up to 10. In the second example, it is not possible because the maximum possible sum with 4 elements, each being at most 5, is 20, which is less than 22.","solution":"def is_valid_sequence(n, k, s): Determines if it\'s possible to create a sequence of length n such that each element is between 1 and k, and the sum of the sequence is s. :param n: Length of the sequence :param k: Maximum value of an element :param s: Desired sum of the sequence :return: \\"YES\\" if possible to create such a sequence, otherwise \\"NO\\" # Minimum sum possible is when all elements are 1 min_sum = n # Maximum sum possible is when all elements are k max_sum = n * k if min_sum <= s <= max_sum: return \\"YES\\" else: return \\"NO\\""},{"question":"A company X has developed a special encryption algorithm to secure messages. The encryption operates by shifting each letter in the message by a fixed number of positions in the alphabet. You are tasked with writing a program that decrypts an encrypted message if the shift value is known. For simplicity: - Assume the message only contains lowercase alphabetic characters. - If a shift causes the character to go past \'z\', it wraps around to the beginning of the alphabet. For example, shifting \'z\' by 1 results in \'a\'. Write a function `decrypt_message(encrypted_message: str, shift: int) -> str` that takes an encrypted message and the fixed shift value, and returns the decrypted message. # Input The function takes two inputs: 1. `encrypted_message` (1 ≤ len(encrypted_message) ≤ 106) — a string containing the encrypted message. 2. `shift` (0 ≤ shift ≤ 25) — an integer representing the number of positions each character in the encrypted message was shifted. # Output Return the decrypted message as a string. # Examples Example 1 Input: ```python encrypted_message = \\"wklv\\" shift = 3 ``` Output: ```python \\"this\\" ``` Example 2 Input: ```python encrypted_message = \\"zruog\\" shift = 3 ``` Output: ```python \\"world\\" ``` Example 3 Input: ```python encrypted_message = \\"abc\\" shift = 1 ``` Output: ```python \\"zab\\" ``` # Note - For the first example, shifting each character of \\"wklv\\" by 3 positions to the left in the alphabet results in \\"this\\". - For the second example, shifting each character of \\"zruog\\" by 3 positions to the left yields \\"world\\". - For the third example, shifting each character of \\"abc\\" by 1 position to the left results in \\"zab\\".","solution":"def decrypt_message(encrypted_message: str, shift: int) -> str: Decrypts an encrypted message by shifting each letter back by the known shift value. :param encrypted_message: Encrypted message as a string of lowercase alphabetic characters. :param shift: Integer representing the number of positions each character in the encrypted message was shifted. :return: Decrypted message as a string. decrypted_message = [] for char in encrypted_message: # Compute the original character\'s position original_position = (ord(char) - ord(\'a\') - shift) % 26 # Convert the original position back to a character and append to the result decrypted_message.append(chr(original_position + ord(\'a\'))) return \'\'.join(decrypted_message)"},{"question":"A company has N servers and M direct communication channels between them. Each server is labeled from 1 to N, and each communication channel connects exactly two servers bidirectionally. Communication can occur directly between two servers if there is a direct channel or indirectly through a series of channels connecting them. Initially, some servers are infected with a virus. It is known that the virus spreads from an infected server to other servers through direct or indirect communication. Your task is to simulate the spread of the virus and determine the number of newly infected servers at specific time intervals. Input The input is given from Standard Input in the following format: ``` N M A_1 B_1 A_2 B_2 ... A_M B_M K T_1 T_2 ... T_K S C_1 C_2 ... C_S ``` - The first line contains two integers N (number of servers) and M (number of communication channels). - The next M lines each contain two integers A_i and B_i representing a bidirectional channel between servers A_i and B_i. - The next line contains an integer K, the number of time intervals for which the spread must be observed. - The following K lines contain integers T_1, T_2, ..., T_K, the time intervals at which to report the number of newly infected servers. - The next line contains an integer S, the number of initially infected servers. - The following S lines contain integers C_1, C_2, ..., C_S, the labels of the initially infected servers. Output For each time interval T_i given in the input, print a single integer on a new line representing the number of newly infected servers at time T_i. Constraints - 1 ≤ N ≤ 10^5 - 0 ≤ M ≤ 10^5 - 1 ≤ K ≤ 10^2 - 1 ≤ T_i ≤ 10^5 - 1 ≤ S ≤ N - All servers, channels, and times are given as integers. - 1 ≤ A_i, B_i, C_i ≤ N Example Input ``` 6 5 1 2 2 3 3 4 4 5 5 6 3 1 2 3 1 1 ``` Output ``` 1 1 1 ``` Explanation: - Initially, server 1 is infected. - At time T = 1, server 2 becomes infected (1 newly infected server). - At time T = 2, server 3 becomes infected (1 newly infected server). - At time T = 3, server 4 becomes infected (1 newly infected server).","solution":"def spread_virus(N, M, channels, K, time_intervals, S, initial_infected): from collections import deque, defaultdict graph = defaultdict(list) for a, b in channels: graph[a].append(b) graph[b].append(a) infected = set(initial_infected) newly_infected_at_time = [0] * (max(time_intervals) + 1) queue = deque([(c, 0) for c in initial_infected]) # (server, time) while queue: server, time = queue.popleft() for neighbor in graph[server]: if neighbor not in infected: infected.add(neighbor) queue.append((neighbor, time + 1)) if time + 1 <= max(time_intervals): newly_infected_at_time[time + 1] += 1 results = [] for t in time_intervals: results.append(newly_infected_at_time[t]) return results"},{"question":"Given a string `s` consisting of lowercase English letters and an integer `k`, you need to transform the string such that its length becomes exactly `k`. To achieve this, you can either remove some characters from `s` or append any lowercase English letters to `s`. Among all possible strings that can be obtained in this way, find the lexicographically smallest one. Constraints: * 1 ≤ |s|, k ≤ 100,000 * s consists of lowercase English letters Input: Input is given from Standard Input in the following format: ``` s k ``` Output: Print the lexicographically smallest string of length `k` that can be obtained by removing some characters from `s` or appending lowercase English letters to `s`. Examples: Input: ``` abc 5 ``` Output: ``` abcaa ``` Input: ``` coding 4 ``` Output: ``` codi ``` Input: ``` apple 10 ``` Output: ``` appleaaaaa ``` Input: ``` xyz 2 ``` Output: ``` xy ```","solution":"def lexicographically_smallest_transform(s, k): Transforms the string `s` to be exactly of length `k` either by removing some characters or appending lowercase English letters, producing the lexicographically smallest string possible. Parameters: s (str): Input string consisting of lowercase English letters. k (int): Desired length of the resulting string. Returns: str: Lexicographically smallest transformed string of length `k`. n = len(s) if n == k: return s elif n > k: return s[:k] else: return s + \'a\' * (k - n)"},{"question":"You are given a string s consisting of lowercase English letters and an integer k. Your task is to find the length of the longest subsequence of the string which can be formed by deleting exactly k characters. For example, if s = \\"abcde\\" and k = 2, you can delete the characters \'c\' and \'e\' to achieve the subsequence \\"abd\\" which has a length of 3. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines. The first line contains an integer k (0 ≤ k ≤ |s|) — the number of characters to delete. The second line contains a string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. Output For each test case, print one integer — the length of the longest subsequence of s which can be formed by deleting exactly k characters. Example Input 4 2 abcde 0 xyz 1 abcd 3 abcxyz Output 3 3 3 3","solution":"def longest_subsequence_length(test_cases): Returns a list with the length of the longest subsequence for given test cases that can be formed by deleting exactly k characters. :param test_cases: List of (k, s) tuples, where k is the number of characters to delete and s is the string. :returns: List of integers representing the length of the longest subsequence for each test case. results = [] for k, s in test_cases: # If k is the number of characters to delete, the longest subsequence is simply the length of s minus k. longest_length = len(s) - k results.append(longest_length) return results"},{"question":"Given an integer N and a list of N integers, your goal is to determine the smallest positive integer that cannot be represented as the sum of any subset of the given list of integers. Input: - The first line contains a single integer N indicating the number of elements in the list. - The second line contains N integers separated by spaces, representing the list of integers. Output: - Print the smallest positive integer that cannot be represented as the sum of any subset of the list of integers. Constraints: 1 ≤ N ≤ 1000 1 ≤ Each integer in the list ≤ 10^6 SAMPLE INPUT 5 1 2 3 8 9 SAMPLE OUTPUT 7 Explanation We can form the sums 1, 2, 3, 4 (1+3), 5 (2+3), 6 (1+2+3), and 8 using the subsets of the list, but there\'s no combination of the list elements that sums to 7. Thus, 7 is the smallest positive integer that cannot be formed as the sum of any subset of the given list.","solution":"def smallest_nonconstructible_value(N, nums): Determine the smallest positive integer that cannot be represented as the sum of any subset of the given list of integers. Parameters: N (int): the number of elements in the list. nums (list of int): the list of integers. Returns: int: the smallest positive integer that cannot be represented as the sum of any subset of the list. nums.sort() smallest_value = 1 for num in nums: if num > smallest_value: break smallest_value += num return smallest_value"},{"question":"In a magical land of Narnia, a powerful artifact known as the \\"Chronicles Crystal\\" is guarded by an ancient enchantress. The crystal has the ability to manipulate time, and thus, is highly sought after by both good and evil entities. To protect it, the enchantress has set a series of puzzles that any seeker must solve to even approach it. One of these puzzles involves an ancient script written on the crystal, and it reads as follows: \\"A sacred number \'K\' is hidden within this prime sequence. Seekers must identify the Kth prime number in this sequence, where primes are all positive numbers greater than 1 that are not divisible by any number other than 1 and themselves.\\" Your challenge is to write a function that, given an integer K (1 ≤ K ≤ 104), returns the Kth prime number. Your solution should be efficient enough to handle large values of K within the constraints. Input The input consists of a single integer K. Output Output the Kth prime number, based on the constraints described. Example Input 5 Output 11 Input 100 Output 541 Note In the first example, the first five prime numbers are 2, 3, 5, 7, and 11. So the 5th prime number is 11. In the second example, the 100th prime number is 541. Use optimized algorithms for generating prime numbers to ensure your solution works efficiently within the given constraints.","solution":"def kth_prime(k): Returns the Kth prime number. if k == 1: return 2 primes = [2] num = 3 while len(primes) < k: is_prime = True for prime in primes: if num % prime == 0: is_prime = False break if prime * prime > num: break if is_prime: primes.append(num) num += 2 return primes[k-1]"},{"question":"function countVowels Write a function `countVowels` that takes a string as input and returns the number of vowels contained in the string. Vowels are defined as \'a\', \'e\', \'i\', \'o\', \'u\' (both uppercase and lowercase). The function should be case-insensitive. Input A single string s (1 ≤ length of s ≤ 10^5). Output A single integer representing the number of vowels in the input string. Examples Input \\"Hello World\\" Output 3 Input \\"aeiouAEIOU\\" Output 10 Input \\"Python Programming\\" Output 4 Note In the first example, the vowels are \'e\', \'o\', and \'o\'. In the second example, the vowels are all the letters since the input contains all vowels in both lowercase and uppercase. In the third example, the vowels are \'o\', \'o\', \'a\', and \'i\'.","solution":"def countVowels(s): Returns the number of vowels contained in the input string s. Vowels are defined as \'a\', \'e\', \'i\', \'o\', \'u\' (both uppercase and lowercase). :param s: str, the input string :return: int, the count of vowels in the input string vowels = set(\'aeiouAEIOU\') return sum(1 for char in s if char in vowels)"},{"question":"A company has a warehouse with a conveyor belt system that cycles through different sections labeled from 0 to 15. The belt operates in a circular manner: after section 15, it loops back to section 0. Each item has a starting section and a destination section. Write a program that determines the sequence of sections an item will pass through as it moves from its starting section to its destination section, taking the shortest possible route. If there are two possible routes of the same length (one clockwise and one counterclockwise), prefer the clockwise route. Input The first line contains an integer `t` (1 ≤ t ≤ 10) representing the number of test cases. Each of the next `t` lines contains two integers `s` and `d` (0 ≤ s, d ≤ 15), where `s` is the starting section and `d` is the destination section. Output For each test case, output the sequence of sections that the item will pass through on one line, separated by spaces. Example Input 3 0 7 10 5 8 10 Output 0 1 2 3 4 5 6 7 10 11 12 13 14 15 0 1 2 3 4 5 8 9 10","solution":"def conveyor_belt_path(t, cases): results = [] for s, d in cases: if s <= d: path = list(range(s, d + 1)) else: path = list(range(s, 16)) + list(range(0, d + 1)) results.append(path) return results # Example usage: # t = 3 # cases = [(0, 7), (10, 5), (8, 10)] # print(conveyor_belt_path(t, cases))"},{"question":"Mike is organizing a fundraising event and has several tasks to complete. Each task has a specific duration, and Mike can only work on one task at a time. To prevent burnout, Mike needs to take a break after every 60 minutes of work. Determine the minimum number of breaks Mike needs to complete all the tasks. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of tasks. The second line contains n integers, a₁, a₂, ..., aₙ (1 ≤ aᵢ ≤ 60), where aᵢ denotes the duration of the i-th task in minutes. Output Print a single integer — the minimum number of breaks Mike needs to take. Examples Input 5 20 30 10 40 20 Output 1 Input 3 60 60 60 Output 2 Input 4 50 50 50 50 Output 3 Note In the first sample, Mike can complete the tasks as follows: 20 minutes (no break), 30 minutes (no break), 10 minutes (break), 40 minutes (no break), 20 minutes (no break). In the second sample, Mike needs to take a break after each task since the duration sums to 60 minutes for each task. In the third sample, Mike must take breaks after each of the first three tasks because the total time at each point exceeds 60 minutes.","solution":"def minimum_breaks(n, task_durations): Calculate the minimum number of breaks Mike needs to take to complete all tasks. Args: n : int : number of tasks task_durations : list of int : durations of each task in minutes Returns: int : minimum number of breaks required total_time = 0 break_count = 0 for duration in task_durations: total_time += duration if total_time >= 60: if total_time > 60: break_count += 1 total_time = duration return break_count"},{"question":"In a software company, project managers need to organize their tasks efficiently. Each task is given a unique identifier and a specified priority level. The managers need a function that, given a list of tasks, will sort the tasks based on their priority first, and then by their identifier if two tasks have the same priority level. Constraints: 1 ≤ T ≤ 100 1 ≤ Number of tasks ≤ 100 1 ≤ Task identifier (integer) ≤ 1000 1 ≤ Priority level (integer) ≤ 10 Input: The first line of the input contains T, number of test cases. Each test case starts with a line containing an integer N, the number of tasks. The next N lines each contain two integers, the task identifier and the priority level. Output: For each test case, output N lines, each containing the task identifier sorted by priority first (higher priority first, i.e., 1 is the highest priority), and by identifier if two tasks have the same priority level. SAMPLE INPUT 2 3 101 2 105 1 102 2 4 201 3 202 2 205 1 204 2 SAMPLE OUTPUT 105 1 101 2 102 2 205 1 202 2 204 2 201 3","solution":"def sort_tasks(T, test_cases): Sort tasks by priority first, then by identifier. Arguments: T : int : number of test cases test_cases : list of lists : each sublist contains tuples of tasks with identifier and priority Returns: list of lists : each sublist contains sorted tasks for the corresponding test case sorted_tasks = [] for case in test_cases: sorted_case = sorted(case, key=lambda x: (x[1], x[0])) sorted_tasks.append(sorted_case) return sorted_tasks def parse_input(input_string): Parses the input string into a format suitable for the sorting function. Arguments: input_string : str : the raw input string Returns: int : number of test cases list of lists : each sublist contains tuples of tasks with identifier and priority lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] i = 1 for _ in range(T): N = int(lines[i]) case = [] for j in range(N): task_id, priority = map(int, lines[i + 1 + j].split()) case.append((task_id, priority)) test_cases.append(case) i += N + 1 return T, test_cases def format_output(results): Formats the sorted tasks output. Arguments: results : list of lists : each sublist contains sorted tasks for the corresponding test case Returns: str : formatted output string output_lines = [] for result in results: for task_id, priority in result: output_lines.append(f\\"{task_id} {priority}\\") return \'n\'.join(output_lines) # Function to integrate input parsing, sorting, and output formatting def organize_tasks(input_string): T, test_cases = parse_input(input_string) sorted_tasks = sort_tasks(T, test_cases) return format_output(sorted_tasks)"},{"question":"You are given a rectangular grid of size N x M filled with non-negative integers. Your task is to find and return the largest sum of a sub-grid (contiguous subarray). Input The input consists of a series of data sets, followed by a single line containing a single character \'0\', indicating the end of input. Each data set starts with a line containing two integers N and M separated by a space, representing the number of rows and columns of the grid, respectively. It is followed by N lines with M integers each, representing the values in each row of the grid. You may assume 1 <= N, M <= 100, and each value in the grid is a non-negative integer with a value between 0 and 1000. Output For each data set, print a single line containing the maximum sum of any sub-grid (contiguous subarray) within the grid. No other characters including leading and trailing spaces should be printed. Example Input 3 3 1 2 3 4 5 6 7 8 9 2 2 1 2 3 4 0 Output 45 10","solution":"def kadane(arr): Kadane\'s algorithm for maximum subarray sum in 1D array. max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def largest_sum_subgrid(grid): Returns the largest sum of a sub-grid (contiguous subarray) within the grid. n = len(grid) m = len(grid[0]) max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += grid[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum def process_input(input_data): Process the input data to compute the largest sum of sub-grid for each test case. output = [] input_lines = input_data.strip().split(\'n\') i = 0 while i < len(input_lines): line = input_lines[i] if line == \'0\': break n, m = map(int, line.split()) grid = [] for j in range(n): i += 1 grid.append(list(map(int, input_lines[i].split()))) output.append(largest_sum_subgrid(grid)) i += 1 return output # Example input processing def main(): import sys input_data = sys.stdin.read() results = process_input(input_data) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Given a grid of size M x N where each cell contains a value representing the altitude at that point, your task is to calculate the risk level of the grid. The risk level of the grid is defined as the sum of the risk levels of all low points. A low point is defined as a cell that is lower than any of its adjacent cells (up, down, left, right). The risk level of a low point is its altitude value plus 1. INPUT: The first line contains two space-separated integers M and N (2 ≤ M, N ≤ 1000), representing the dimensions of the grid. The next M lines each contain N space-separated integers representing the altitude values of the grid cells. Each altitude value will be in the range [0, 10000]. OUTPUT: Print the total risk level of the grid. SAMPLE INPUT: 3 3 1 2 1 2 2 2 1 2 1 SAMPLE OUTPUT: 8","solution":"def calculate_risk_level(M, N, grid): def is_low_point(x, y): altitude = grid[x][y] # Check up, down, left, right if x > 0 and grid[x-1][y] <= altitude: return False if x < M-1 and grid[x+1][y] <= altitude: return False if y > 0 and grid[x][y-1] <= altitude: return False if y < N-1 and grid[x][y+1] <= altitude: return False return True total_risk_level = 0 for i in range(M): for j in range(N): if is_low_point(i, j): total_risk_level += grid[i][j] + 1 return total_risk_level # Example usage # M = 3 # N = 3 # grid = [ # [1, 2, 1], # [2, 2, 2], # [1, 2, 1] # ] # Output: 8"},{"question":"You are given a string s of length n consisting of lowercase English letters. Your task is to calculate the number of pairs (i, j) where 1 leq i leq j leq n such that the substring s[i...j] (from the ith to the jth character, both inclusive) is the same when read forwards and backwards. A string is called a palindrome if it reads the same forwards and backwards. Input - The first line contains an integer n — the length of the string s. - The second line contains the string s. Output - Print a single integer — the number of pairs (i, j) such that the substring s[i...j] is a palindrome. Examples Input 5 ababa Output 9 Input 4 abcd Output 4 Note In the first example, the string \\"ababa\\" has the following palindromic substrings: \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\", \\"bab\\", \\"aba\\", \\"ababa\\". Thus there are 9 such pairs. In the second example, the string \\"abcd\\" has the following palindromic substrings: \\"a\\", \\"b\\", \\"c\\", \\"d\\". Thus there are 4 such pairs.","solution":"def count_palindromic_substrings(n, s): Returns the number of pairs (i, j) such that the substring s[i...j] is a palindrome. count = 0 # A function to check if a given substring is a palindrome. def is_palindrome(sub): return sub == sub[::-1] # Iterate over all possible substrings and check if they are palindromes. for i in range(n): for j in range(i, n): if is_palindrome(s[i:j+1]): count += 1 return count"},{"question":"Alice is a passionate movie buff and owns a large collection of movies. She has decided to catalog her collection by creating a list that specifies the genre and the movies that fall under each genre. However, she realized that some movies belong to multiple genres. Alice wants to aggregate her collection such that each movie is associated with all genres it belongs to. Given the list of genres and their corresponding movies, your task is to print a sorted list of all movies each with the genres they belong to. Input The first line contains the integer n (1 ≤ n ≤ 20) — the number of genres in Alice\'s list. The following n lines describe the genres in Alice\'s list. Each line has the following format: \\"genre_name number_of_movies movie_1 movie_2 ... movie_k\\". - Genre names are non-empty strings of at most 15 characters and consist of lowercase English letters. - Movie titles are non-empty strings of at most 30 characters and can contain lowercase English letters, numbers, spaces, and punctuation. - The number of movies in one genre is at least 1 and at most 10. Output First line contains m — the number of unique movies in Alice\'s list. The following m lines must contain the movie titles followed by the genres they belong to, separated by spaces. Both movies and genres in each line should be sorted lexicographically. Examples Input 3 action 2 die_hard 007 romance 3 titanic 007 love_actually drama 1 titanic Output 4 007 action romance die_hard action love_actually romance titanic drama romance","solution":"def catalog_movies(n, genre_list): from collections import defaultdict # Data structure to hold the movie and their genres movie_genres = defaultdict(set) for genre_entry in genre_list: parts = genre_entry.split() genre = parts[0] movies = parts[2:] for movie in movies: movie_genres[movie].add(genre) # Sorting movies lexicographically sorted_movies = sorted(movie_genres.keys()) result = [str(len(sorted_movies))] # Sorting genres for each movie and formatting the result for movie in sorted_movies: genres = sorted(movie_genres[movie]) result.append(f\\"{movie} {\' \'.join(genres)}\\") return result"},{"question":"Given a grid of size `n x m`, you need to develop a program to find the largest connected component of \'1\'s in the grid. Connected component means each \'1\' in the group can be reached directly or indirectly via up, down, left, or right moves. The program should output the size of the largest connected component. # Input - The first line contains two integers `n` and `m` (1 leq n, m leq 50). - The next `n` lines describe the grid, with each line containing `m` characters, either \'0\' or \'1\'. # Output - Output a single integer representing the size of the largest connected component of \'1\'s. # Example Input ``` 4 5 11000 01100 00101 10011 ``` Output ``` 5 ``` Explanation The largest connected component of \'1\'s consists of 5 \'1\'s as highlighted below. ``` 11000 01100 00101 10011 ```","solution":"def largest_connected_component(grid): n = len(grid) m = len(grid[0]) def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'0\': return 0 grid[x][y] = \'0\' # Mark the cell as visited by turning it to \'0\' size = 1 size += dfs(x - 1, y) size += dfs(x + 1, y) size += dfs(x, y - 1) size += dfs(x, y + 1) return size max_size = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': max_size = max(max_size, dfs(i, j)) return max_size def main(n, m, lines): grid = [list(line) for line in lines] return largest_connected_component(grid)"},{"question":"In a mysterious forest, there is a magical rectangular grid of `n` rows and `m` columns, filled with various types of mystical potions. Each cell of the grid contains a potion represented by a character (a-z). A wandering magician wants to collect the maximum number of contiguous identical potions in a single move. The magician can start from any cell and move in one of the orthogonal directions (up, down, left, or right) to collect identical potions. The objective is to help the magician determine the maximum number of contiguous identical potions he can collect in a straight line from any starting cell. # Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) representing the number of rows and columns in the grid. Each of the next `n` lines contains a string of length `m` consisting of lowercase English letters (\'a\' to \'z\'). # Output Output a single integer, the maximum number of contiguous identical potions that can be collected in a straight line. # Example Input ``` 4 5 abaaa bcccb deeee bbabb ``` Output ``` 4 ``` # Explanation In the given example, the grid is: ``` abaaa bcccb deeee bbabb ``` The magician can start at any cell and move in any of the four orthogonal directions to collect identical potions. The longest contiguous line of identical potions comprises 4 \'e\'s in the third row. Thus the output is `4`.","solution":"def max_contiguous_potions(n, m, grid): def check_contiguous(x, y, dx, dy, character): count = 0 # Traverse in the given direction (dx, dy) while 0 <= x < n and 0 <= y < m and grid[x][y] == character: count += 1 x += dx y += dy return count max_count = 0 # Check in four directions: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for i in range(n): for j in range(m): current_char = grid[i][j] for dx, dy in directions: max_count = max(max_count, check_contiguous(i, j, dx, dy, current_char)) return max_count"},{"question":"Problem Statement A university needs a system to keep track of their curriculum\'s prerequisite structure. Each course may have some courses that need to be completed before it can be taken. This structure can be represented as a directed acyclic graph (DAG), where each node represents a course and a directed edge from node A to node B means course A is a prerequisite for course B. Given a list of courses and their prerequisites, your task is to determine if you can complete all courses, and if so, provide a possible order in which to take the courses. # Input - An integer `N` representing the number of courses (1 ≤ N ≤ 1000). - An integer `M` representing the number of prerequisite pairs (0 ≤ M ≤ 5000). - `M` pairs of integers, where the first integer of each pair represents a course and the second integer represents its prerequisite. # Output If it is possible to complete all courses, output a single line with the order of courses as a space-separated list of course numbers. If it is not possible to complete all courses, output a single line with the word \\"IMPOSSIBLE\\". # Examples Example 1 **Input** ``` 4 4 2 1 3 2 4 3 4 1 ``` **Output** ``` 1 2 3 4 ``` Example 2 **Input** ``` 4 4 2 1 3 2 1 3 4 2 ``` **Output** ``` IMPOSSIBLE ``` # Notes - Each course is labeled with an integer from 1 to N. - There can be multiple correct orders for valid completions. - You should always attempt to find a topological order of the nodes in the graph. - If a cycle exists in the graph, it\'s impossible to complete all the courses, hence you should output \\"IMPOSSIBLE\\". # Constraints 1. 1 ≤ N ≤ 1000 2. 0 ≤ M ≤ 5000","solution":"def find_course_order(N, M, prerequisites): from collections import defaultdict, deque # Create adjacency list and in-degree array adj_list = defaultdict(list) in_degree = [0] * (N + 1) # Build the graph for dst, src in prerequisites: adj_list[src].append(dst) in_degree[dst] += 1 # Use queue to perform topological sort queue = deque() for course in range(1, N + 1): if in_degree[course] == 0: queue.append(course) topo_order = [] while queue: current = queue.popleft() topo_order.append(current) for neighbor in adj_list[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(topo_order) == N: return \' \'.join(map(str, topo_order)) else: return \\"IMPOSSIBLE\\""},{"question":"A software system allows users to store and retrieve files in various folders. However, managing folder structures with large numbers of files and subfolders efficiently can be quite challenging. Implement a system that can return the total size of files in a folder, including the sizes of any nested files in subfolders. To simplify, let\'s assume: - Each file has a certain size (an integer greater than 0). - Each folder can contain files and subfolders. - The folders are represented as nested dictionaries in Python, where the keys are the names of the files/folders, and the values are either integers (for file sizes) or dictionaries (for subfolders). You need to write a function `calculate_folder_size` that takes a dictionary representing the folder structure and returns the total size of all files within the folder and its subfolders. Function Signature: `def calculate_folder_size(folder: dict) -> int:` Input You have one input parameter, the folder structure, represented as a dictionary in the following form: ```python { \\"file1.txt\\": 100, \\"file2.txt\\": 200, \\"subfolder1\\": { \\"file3.txt\\": 300, \\"file4.txt\\": 400, }, \\"subfolder2\\": { \\"file5.txt\\": 500, \\"subfolder3\\": { \\"file6.txt\\": 600 } } } ``` Output The function should return an integer representing the total size of all files within the folder and its subfolders. Example Input: ```python { \\"file1.txt\\": 100, \\"file2.txt\\": 200, \\"subfolder1\\": { \\"file3.txt\\": 300, \\"file4.txt\\": 400, }, \\"subfolder2\\": { \\"file5.txt\\": 500, \\"subfolder3\\": { \\"file6.txt\\": 600 } } } ``` Output: 2100 Explanation: The total size is computed as: 100 (file1.txt) + 200 (file2.txt) + 300 (file3.txt) + 400 (file4.txt) + 500 (file5.txt) + 600 (file6.txt) = 2100","solution":"def calculate_folder_size(folder: dict) -> int: Calculate the total size of all files in the given folder and its subfolders. :param folder: Dictionary representing the folder structure. :return: Total size of all files. total_size = 0 for item in folder.values(): if isinstance(item, int): total_size += item elif isinstance(item, dict): total_size += calculate_folder_size(item) return total_size"},{"question":"In a distant land, there is a large orchard owned by a wise farmer. This orchard is a perfect grid of n rows and m columns (1 ≤ n, m ≤ 1000). Each cell in the grid represents a patch of land where a tree can be planted. The wise farmer has a peculiar rule when planting trees. He wants to maximize the total number of trees planted such that no two trees are in the same row or column. To ensure that the trees are healthy and have enough space to grow fully, the farmer also wants to make sure that no two trees are next to each other diagonally. This means that a tree planted in cell (i, j) must not have another tree in cell (i-1, j-1), (i-1, j+1), (i+1, j-1), or (i+1, j+1). Your task is to help the farmer plant the maximum number of trees under these constraints. Input The single line contains space-separated integers n and m (1 ≤ n, m ≤ 1000). Output Print the maximum number of trees that can be planted. Examples Input 3 3 Output 3 Input 4 4 Output 4 Note In the first example, you can place one tree in each row and each column without violating the diagonal constraint: - (1,1), (2,2), and (3,3). In the second example, you can also place one tree in each row and each column in a similar manner: - (1,1), (2,2), (3,3), and (4,4).","solution":"def max_trees(n, m): Returns the maximum number of trees that can be planted in an n by m grid while ensuring no two trees are in the same row or column, and no two trees are next to each other diagonally. # The solution is to plant trees on either all even or all odd indexes of the diagonal return min(n, m)"},{"question":"A company has developed a task scheduling system where tasks are executed in a specific order. Each task is assigned a level representing its difficulty. The task scheduling system only allows execution of tasks in ascending order of difficulty levels. You are given an array of integers where each integer represents the difficulty level of a task. The task scheduling system can remove tasks and sort the remaining tasks in ascending order to execute them efficiently. Your goal is to determine the minimum number of tasks that need to be removed so that the remaining tasks can be executed in ascending order of their difficulty levels without any further removals. Input - The first line contains a single integer n (1 ≤ n ≤ 1000), the number of tasks. - The second line contains n integers, representing the difficulty levels of the tasks (1 ≤ difficulty level ≤ 10000). Output Write a single integer, the minimum number of tasks that need to be removed. Examples Input 7 3 1 2 4 6 5 7 Output 2 Input 5 1 3 2 1 3 Output 2","solution":"def min_removals_for_ordered_tasks(n, difficulty): Finds the minimum number of task removals needed so that the remaining tasks are in ascending order of difficulty levels. Parameters: n (int): The number of tasks. difficulty (list): A list of integers representing the difficulty levels of the tasks. Returns: int: The minimum number of removals required. # dp array to store the length of Longest Increasing Subsequence (LIS) dp = [1] * n # Fill the dp array with LIS values for i in range(1, n): for j in range(i): if difficulty[i] > difficulty[j]: dp[i] = max(dp[i], dp[j] + 1) # Length of the longest increasing subsequence lis_length = max(dp) # The minimum number of removals required would be # the total number of tasks minus the length of LIS return n - lis_length"},{"question":"In a distant galaxy, there exists a planet Narn IV inhabited by two species: Atrians and Belians. These two species live in harmony and have established a tradition of hosting an annual festival that includes a ceremonial march. For this march, it is required that the participants march in pairs. Each pair must be composed of one Atrian and one Belian, and each participant in the march must march exactly once. Given the number of Atrians and Belians available for the march, calculate the maximum number of pairs that can be formed. Input The first line contains one integer t (1 ≤ t ≤ 10000) — the number of test cases. Then the test cases follow. Each test case consists of a single line containing two integers a and b (0 ≤ a, b ≤ 10^{12}) — the number of Atrians and Belians available for the march, respectively. Output For each test case, print one integer — the maximum number of pairs that can be formed. Example Input 5 7 3 3 7 0 100 100 0 5 5 Output 3 3 0 0 5 Explanation In the example provided: 1. For the first test case, there are 7 Atrians and 3 Belians, so the maximum number of pairs is 3. 2. For the second test case, the same logic applies, resulting in 3 pairs. 3. For the third test case, since there are no Atrians, no pairs can be formed. 4. Similarly, with no Belians in the fourth test case, no pairs can be formed. 5. In the fifth test case, there are 5 Atrians and 5 Belians, so 5 pairs can be formed.","solution":"def max_pairs(t, cases): Returns the maximum number of pairs of Atrians and Belians that can be formed for each test case. Parameters: t : int : number of test cases cases : list of tuple : list of (a, b) tuples where a is the number of Atrians and b is the number of Belians Returns: list of int : list of maximum number of pairs for each test case results = [] for a, b in cases: results.append(min(a, b)) return results"},{"question":"The company XCorp is designing a new container shipping system. They need to efficiently manage and query the movement of containers between different storage locations. Each storage location is represented as a node in a graph, and each container has a unique identifier. Initially, there are n storage locations, each with no container. XCorp wants to perform the following operations on the system: - **add x y**: Move container with identifier `y` to storage location `x`. - **move x y**: Transfer all containers from location `x` to location `y`. It is guaranteed that after the operation, location `x` will be empty. - **find x**: Output the identifier of the container located at storage location `x`, or -1 if the location is empty. Write a program to handle these operations. **Input** - The first line contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5), the number of storage locations and the number of operations respectively. - The next q lines contain one of the described operations. **Output** - For each operation of the type \\"find x\\", output the identifier of the container located at storage location `x` on a new line, or -1 if the location is empty. **Example** Input: ``` 5 7 add 1 100 add 2 200 find 1 move 1 2 find 1 find 2 find 3 ``` Output: ``` 100 -1 100 -1 ``` **Explanation:** 1. The first operation moves container `100` to location 1. 2. The second operation moves container `200` to location 2. 3. The third operation queries the container at location 1, which is `100`. 4. The fourth operation moves all containers from location 1 to location 2, leaving location 1 empty. 5. The fifth operation queries the container at location 1, which is now empty, hence `-1`. 6. The sixth operation queries the container at location 2, which is now `100` after the move. 7. The seventh operation queries the container at location 3, which has no container, hence `-1`.","solution":"def container_management_system(n, queries): storage = {i: -1 for i in range(1, n + 1)} result = [] for query in queries: parts = query.split() operation = parts[0] x = int(parts[1]) if operation == \\"add\\": y = int(parts[2]) storage[x] = y elif operation == \\"move\\": y = int(parts[2]) if storage[x] != -1: storage[y] = storage[x] storage[x] = -1 elif operation == \\"find\\": result.append(storage[x]) return result"},{"question":"You are given a string of characters containing lowercase letters and digits. You need to perform a rearrangement of the characters in such a way that each digit appears before any letters, and maintain the order of digits and letters as they appear in the original string. Write a function `rearrange_string(s)` that takes a string `s` as input and returns the rearranged string with all digits placed before letters. # Function Signature ```python def rearrange_string(s: str) -> str: pass ``` # Input - A single string `s` containing only lowercase alphabets and digits. # Output - A single string with all digits at the beginning, followed by all letters, maintaining their relative order as in the original string. # Example ```python rearrange_string(\\"a3c8r2b\\") => \\"382acrb\\" rearrange_string(\\"h6f5i1\\") => \\"651hfi\\" rearrange_string(\\"xyz\\") => \\"xyz\\" rearrange_string(\\"123\\") => \\"123\\" ``` # Constraints - The length of the string `s` does not exceed 100 characters.","solution":"def rearrange_string(s: str) -> str: digits = [] letters = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(digits) + \'\'.join(letters)"},{"question":"You are given an integer N. Print the sum of all even integers from 1 to N, inclusive. For example, if N = 6, the output should be 12 as the even numbers between 1 and 6 are 2, 4, and 6, and their sum is 12. Constraints * 1 ≤ N ≤ 100 * All values in input are integers. Input Input is given from Standard Input in the following format: N Output Print the sum of all even integers from 1 to N, inclusive. Example Input 6 Output 12","solution":"def sum_of_even_integers(N): Returns the sum of all even integers from 1 to N, inclusive. return sum(i for i in range(2, N+1, 2))"},{"question":"You are given two non-empty strings `A` and `B`, both containing only lowercase alphabetical characters. Your task is to find the minimum number of operations needed to transform string `A` into string `B`. The operations allowed are: 1. **Insert a character** - Insert any character at any position in the string. 2. **Delete a character** - Delete any character from the string. 3. **Replace a character** - Replace any character in the string with any other character. Input: - The first line contains the string `A`. - The second line contains the string `B`. Output: - Print a single integer, the minimum number of operations required to transform `A` into `B`. Constraints: 1. (1 leq text{length}(A), text{length}(B) leq 1000) SAMPLE INPUT kitten sitting SAMPLE OUTPUT 3 Explanation To transform \\"kitten\\" into \\"sitting\\", we can perform the following three operations: 1. Replace \'k\' with \'s\': \\"kitten\\" -> \\"sitten\\" 2. Replace \'e\' with \'i\': \\"sitten\\" -> \\"sittin\\" 3. Insert \'g\' at the end: \\"sittin\\" -> \\"sitting\\"","solution":"def min_operations(A, B): Returns the minimum number of operations required to transform string A into string B. m, n = len(A), len(B) # Create a DP table to store results of subproblems dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)] # Initialize DP table for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are the same, ignore last char and recur for remaining string elif A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last character is different, consider all possibilities and find minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Given an array of integers, return true if and only if it contains no duplicates within a particular distance k. For example, given the array `nums` and the distance `k`, check whether there are any duplicate integers within a distance of `k` in the array. Two integers `nums[i]` and `nums[j]` are considered duplicates if `nums[i] == nums[j]` and their indices `i` and `j` satisfy the condition `|i - j| <= k`. If no such pair exists, return `true`; otherwise, return `false`. Input - The input consists of two components: 1. A single line containing a sequence of space-separated integers representing the array nums. 2. An integer k, the maximum allowed distance between duplicate values. Output - Output a single boolean value `true` or `false`. Examples Input 1 2 3 1 3 Output true Input 1 2 3 1 2 3 2 Output false Input 5 6 7 8 6 4 Output true","solution":"def contains_no_duplicates_within_distance(nums, k): Check whether the array contains no duplicate integers within a distance of k. :param nums: List[int] - A list of integers. :param k: int - The maximum allowed distance between duplicate values. :return: bool - True if no duplicates within distance k, False otherwise. seen = {} for i, num in enumerate(nums): if num in seen and i - seen[num] <= k: return False seen[num] = i return True"},{"question":"As an expert baker, Sarah wants to bake several cakes for a charity event. Each cake requires a specific set of ingredients: flour, sugar, and eggs. Sarah has a collection of ingredients available, but she needs to determine the maximum number of cakes she can bake without running out of any ingredient. Sarah\'s friends help her by listing the total available quantities of flour, sugar, and eggs. Each cake recipe requires fixed amounts of those ingredients. Write a program to help Sarah find out the maximum number of cakes she can bake. Input The first line contains three integers F, S, E (1 ≤ F, S, E ≤ 109) — the total amount of flour, sugar, and eggs available. The second line contains three integers f, s, e (1 ≤ f, s, e ≤ 109) — the amount of flour, sugar, and eggs needed for one cake. Output Print a single integer — the maximum number of cakes Sarah can bake with the given ingredients. Examples Input 10 10 10 2 3 1 Output 3 Input 15 20 25 5 4 5 Output 3 Input 7 7 7 3 3 3 Output 2","solution":"def max_cakes(F, S, E, f, s, e): Calculates the maximum number of cakes that can be baked with the available ingredients. Parameters: F (int): Total amount of flour available. S (int): Total amount of sugar available. E (int): Total amount of eggs available. f (int): Amount of flour needed for one cake. s (int): Amount of sugar needed for one cake. e (int): Amount of eggs needed for one cake. Returns: int: The maximum number of cakes that can be baked. return min(F // f, S // s, E // e)"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For example, \\"racecar\\", \\"madam\\", and \\"A man, a plan, a canal, Panama\\" are palindromes. In this problem, you are given a string s, and your task is to write a program to determine if s is a palindrome. You may assume that the input string only contains printable ASCII characters. Input The input is a sequence of datasets. Each dataset is a single string that ends with a newline character. The end of the input is indicated by a line containing the word \\"END\\". Output For each dataset, print \\"YES\\" if the given string is a palindrome, otherwise print \\"NO\\". Example Input racecar hello madam A man, a plan, a canal, Panama END Output YES NO YES YES","solution":"def is_palindrome(string): Determines if the given string is a palindrome. Ignores spaces, punctuation, and capitalization. import re # Remove non-alphanumeric characters and convert to lower case cleaned_string = re.sub(r\'[^A-Za-z0-9]\', \'\', string).lower() # Check if the cleaned string is equal to its reverse return cleaned_string == cleaned_string[::-1] def process_input(input_lines): Processes the input lines to determine if each line (except END) is a palindrome. Returns a list of strings, either \\"YES\\" or \\"NO\\" for each input line. results = [] for line in input_lines: line = line.strip() if line == \\"END\\": break if is_palindrome(line): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function \'is_palindrome_prime\' which checks if a given number is both a palindrome and a prime. A palindrome is a number that reads the same forward and backward. A prime number is a number that is greater than 1 and has no divisors other than 1 and itself. Input The input consists of a single integer n (1 ≤ n ≤ 10^6), representing the number to be checked. Output Output \\"YES\\" if the number is both a palindrome and a prime. Otherwise, output \\"NO\\". Examples Input 7 Output YES Input 121 Output NO Input 131 Output YES Input 10 Output NO Note In the first example, 7 is a prime number and it reads the same forward and backward. Hence, the output is \\"YES\\". In the second example, 121 is not a prime number although it is a palindrome. Hence, the output is \\"NO\\". In the third example, 131 is both a prime number and a palindrome, so the output is \\"YES\\". In the fourth example, 10 is neither a prime nor a palindrome number. Thus, the output is \\"NO\\".","solution":"def is_palindrome_prime(n): Checks if a given number is both a palindrome and a prime. def is_palindrome(n): s = str(n) return s == s[::-1] def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True if is_palindrome(n) and is_prime(n): return \\"YES\\" else: return \\"NO\\""},{"question":"A robotics competition is taking place, where multiple robots compete in several challenges over the course of a day. Each robot earns points based on their performance in each challenge. Your task is to determine the final ranking of a given robot after all challenges are completed. Given the scores of all robots after each challenge, your task is to calculate the final ranking of a specific robot at the end of the day. Input The first line contains two integers N (1 ≤ N ≤ 100) representing the number of robots, and M (1 ≤ M ≤ 10) representing the number of challenges in the competition. The second line contains an integer R (1 ≤ R ≤ N) representing the ID number of the robot you need to calculate the final ranking for. Then, M lines follow, each containing N integers S_ij (0 ≤ S_ij ≤ 1000) where each S_ij represents the points scored by the i-th robot in the j-th challenge. Output Output contains one integer, which is the final ranking of the robot with ID R. The ranking is determined by the total points accumulated by each robot over all challenges. If multiple robots have the same total score, they all share the same ranking. Example Input 5 3 2 10 20 30 40 50 15 25 35 45 55 20 30 40 50 60 Output 4 Note In this example, the total points accumulated by each robot are: Robot 1: 10 + 15 + 20 = 45 Robot 2: 20 + 25 + 30 = 75 Robot 3: 30 + 35 + 40 = 105 Robot 4: 40 + 45 + 50 = 135 Robot 5: 50 + 55 + 60 = 165 The robot with ID 2 has 75 points, which ranks 4th among the robots.","solution":"def final_ranking(n, m, r, scores): Determines the final ranking of the robot ID \'r\' based on the scores. Args: n : int : Number of robots m : int : Number of challenges r : int : Robot ID to be ranked (1-indexed) scores : List[List[int]] : Scores of all robots for each challenge (m x n) Returns: int : The final ranking of the robot with ID \'r\' total_scores = [0] * n for challenge in scores: for i in range(n): total_scores[i] += challenge[i] target_robot_score = total_scores[r-1] sorted_scores = sorted(total_scores, reverse=True) ranking = sorted_scores.index(target_robot_score) + 1 return ranking"},{"question":"You are tasked with implementing a function to check for the presence of a repetitive pattern in an input string. The pattern should be defined as a substring that repeats consecutively at least twice to form the original string. Given a string `S`, determine whether it can be constructed by repeating one of its substrings at least twice. # Input - A single line containing the string `S` (1 ≤ |S| ≤ 500). # Output - Output `true` if `S` can be constructed by repeating one of its substrings at least twice. - Output `false` otherwise. # Examples Example 1: Input: ``` abab ``` Output: ``` true ``` Explanation: The string \\"abab\\" can be constructed by repeating the substring \\"ab\\" twice. Example 2: Input: ``` abcabcabc ``` Output: ``` true ``` Explanation: The string \\"abcabcabc\\" can be constructed by repeating the substring \\"abc\\" three times. Example 3: Input: ``` abcd ``` Output: ``` false ``` Explanation: The string \\"abcd\\" cannot be constructed by repeating any substring at least twice. # Note - The function should be optimized for efficiency to handle the maximum input size. - Consider edge cases like a single character string or strings with varying character distributions.","solution":"def has_repetitive_pattern(s): Determine if the input string can be constructed by repeating one of its substrings at least twice. Parameters: s (str): Input string Returns: bool: True if the string can be constructed by repeating a substring, False otherwise n = len(s) for i in range(1, n // 2 + 1): if n % i == 0 and s[:i] * (n // i) == s: return True return False"},{"question":"A robot is placed in a 2D grid with `n` rows and `m` columns. The robot starts at position `(1, 1)` and aims to reach the bottom-right corner `(n, m)`. It can move to any of its four adjacent cells (up, down, left, right). However, there are `k` traps placed on the grid, and the robot cannot step on these cells. Additionally, the robot has a battery that initially has `b` units of power. Moving to an adjacent cell costs 1 unit of power. If the robot runs out of power, it cannot move any further. The objective is to determine the minimum units of power needed for the robot to travel from the start `(1, 1)` to the finish `(n, m)` while avoiding traps. If it is not possible to reach the destination, return -1. Input The first line of the input contains four integers `n`, `m`, `k`, and `b` (1 ≤ n, m ≤ 1000, 0 ≤ k ≤ 100, 1 ≤ b ≤ 106). Each of the next `k` lines contains two integers `xi` and `yi` (1 ≤ xi ≤ n, 1 ≤ yi ≤ m) indicating the position of the i-th trap. Output Print the minimum units of power required for the robot to reach the bottom-right corner, or -1 if it is not possible. Examples Input 3 3 1 5 2 2 Output 4 Input 5 5 2 10 3 3 4 4 Output 8","solution":"from collections import deque def min_power_to_reach_end(n, m, k, b, traps): Returns the minimum units of power needed for the robot to reach the bottom-right corner, or -1 if it is not possible. directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] # possible movements (down, right, up, left) traps_set = {(x, y) for x, y in traps} # Set for quick lookup of traps if (1, 1) in traps_set or (n, m) in traps_set: return -1 queue = deque([(1, 1, 0)]) # (current_row, current_col, power_used) visited = set((1, 1)) while queue: x, y, power = queue.popleft() if power > b: return -1 if (x, y) == (n, m): return power for dx, dy in directions: nx, ny = x + dx, y + dy if 1 <= nx <= n and 1 <= ny <= m and (nx, ny) not in traps_set and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, power + 1)) return -1"},{"question":"You are working on developing an automated Sudoku verifier. A Sudoku is a 9x9 grid of numbers, where each row, column, and 3x3 sub-grid contains all the digits from 1 to 9 exactly once. Your goal is to write a program that verifies whether a given Sudoku solution is valid or not. **Input Format:** - A single dataset containing 9 lines, each with 9 integers separated by spaces. - Each integer will be between 1 and 9, inclusive. **Output Format:** - Output \\"Valid\\" if the provided Sudoku solution meets the criteria. - Output \\"Invalid\\" if the solution does not meet the criteria. **Examples:** **Input 1:** ``` 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 ``` **Output 1:** ``` Valid ``` **Input 2:** ``` 5 3 4 6 7 8 9 1 2 6 7 2 1 9 0 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 ``` **Output 2:** ``` Invalid ``` **Input 3:** ``` 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 8 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 ``` **Output 3:** ``` Invalid ```","solution":"def check_valid_sudoku(sudoku): Verifies if a given Sudoku solution is valid. :param sudoku: A 9x9 grid containing the Sudoku puzzle as a list of lists. :return: \\"Valid\\" if the Sudoku is valid, \\"Invalid\\" otherwise. def is_valid_block(block): return sorted(block) == list(range(1, 10)) for row in sudoku: if not is_valid_block(row): return \\"Invalid\\" for col in zip(*sudoku): if not is_valid_block(col): return \\"Invalid\\" for i in range(0, 9, 3): for j in range(0, 9, 3): block = [sudoku[x][y] for x in range(i, i+3) for y in range(j, j+3)] if not is_valid_block(block): return \\"Invalid\\" return \\"Valid\\""},{"question":"In a certain country, there are n towns and m bidirectional roads connecting some pairs of towns. The towns are numbered from 1 to n. There are no two roads between any two towns and no road connects a town to itself. Each road has an associated cost. The government wants to connect all the towns with a network of roads. However, due to budget constraints, they want to minimize the total cost of the road network that still ensures every town is reachable from any other town. Your task is to determine the minimum cost needed to connect all towns. The input consists of multiple test cases. Each test case starts with two integers n (2 ≤ n ≤ 100) and m (n-1 ≤ m ≤ 5000), the number of towns and the number of roads, respectively. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000, u ≠ v), representing a road between town u and town v with cost w. The input ends with a line containing two zeros. For each test case, output a single integer, the minimum cost to connect all towns. Example Input 4 5 1 2 1 2 3 2 3 4 1 4 1 3 2 4 3 3 3 1 2 1 2 3 2 3 1 3 0 0 Output 4 3","solution":"def minimum_cost_to_connect_all_towns(n, m, roads): Function to determine the minimum cost needed to connect all towns. Uses Kruskal\'s algorithm to find Minimum Spanning Tree (MST). :param n: Number of towns :param m: Number of roads :param roads: List of tuples (u, v, w) representing roads between towns u and v with cost w :return: Minimum cost to connect all towns # Sorting roads by their weight (cost) roads.sort(key=lambda x: x[2]) # Helper function to find the root of a node in disjoint set def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) # Helper function to do union of two subsets def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 # Initializing disjoint set parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_cost = 0 e = 0 # Number of edges in MST # Iterate through all sorted edges for u, v, w in roads: u -= 1 v -= 1 x = find(parent, u) y = find(parent, v) if x != y: e += 1 mst_cost += w union(parent, rank, x, y) if e == n - 1: break return mst_cost def process_input(input_string): Process the input string and calculate the minimum cost for each test case. lines = input_string.strip().split(\'n\') results = [] i = 0 while i < len(lines): n, m = map(int, lines[i].split()) if n == 0 and m == 0: break i += 1 roads = [] for _ in range(m): u, v, w = map(int, lines[i].split()) roads.append((u, v, w)) i += 1 results.append(minimum_cost_to_connect_all_towns(n, m, roads)) return results"},{"question":"You are given a city consisting of `n` intersections connected by `m` streets. Each street has a certain travel cost associated with it. You need to answer multiple queries asking you to find the minimum travel cost between two intersections, taking into account possible updates to the travel costs of certain streets. Initially, the city is represented by an undirected graph with `n` vertices (numbered from `1` to `n`) and `m` edges. Each edge connects two vertices `u` and `v` with a travel cost `c`. There are `q` queries of two types: 1. Query type 1: Find the minimum travel cost between two intersections `u` and `v`. 2. Query type 2: Update the travel cost of the street between intersections `u` and `v` to `c`. Can you help answer the queries efficiently? # Input The first line of the input contains three integers `n`, `m`, and `q` (`1 ≤ n, m, q ≤ 100000`). The next `m` lines each contain three integers `u`, `v`, and `c` (`1 ≤ u, v ≤ n`, `1 ≤ c ≤ 1000000`) indicating there is a street between intersection `u` and intersection `v` with travel cost `c`. The next `q` lines each contain a query in one of the following two formats: - `1 u v` (`1 ≤ u, v ≤ n`): Find the minimum travel cost between intersections `u` and `v`. - `2 u v c` (`1 ≤ u, v ≤ n`, `1 ≤ c ≤ 1000000`): Update the travel cost of the street between intersections `u` and `v` to `c`. # Output For each query of type 1, output a single integer representing the minimum travel cost between intersections `u` and `v`. If there is no path between `u` and `v`, output `-1`. # Examples Input ``` 4 4 3 1 2 5 1 3 10 2 3 2 3 4 7 1 1 4 2 1 3 1 1 1 4 ``` Output ``` 14 8 ``` Note In the first query, the minimum travel cost from intersection 1 to intersection 4 is 14 (either via 1-2-3-4 or via 1-3-4). After the update, in the second query, the travel cost from intersection 1 to intersection 3 is changed to 1, thus reducing the minimum travel cost from intersection 1 to intersection 4 to 8 (1-3-4). Keep in mind that the travel cost updates should be reflected in subsequent queries.","solution":"import heapq from collections import defaultdict class CityGraph: def __init__(self, n): self.n = n self.graph = defaultdict(list) self.costs = {} def add_street(self, u, v, c): self.graph[u].append((v, c)) self.graph[v].append((u, c)) self.costs[(u, v)] = c self.costs[(v, u)] = c def update_street_cost(self, u, v, c): self.costs[(u, v)] = c self.costs[(v, u)] = c for i, (node, cost) in enumerate(self.graph[u]): if node == v: self.graph[u][i] = (v, c) for i, (node, cost) in enumerate(self.graph[v]): if node == u: self.graph[v][i] = (u, c) def dijkstra(self, start, end): heap = [(0, start)] min_cost = {i: float(\'inf\') for i in range(1, self.n + 1)} min_cost[start] = 0 while heap: current_cost, u = heapq.heappop(heap) if u == end: return current_cost if current_cost > min_cost[u]: continue for v, cost in self.graph[u]: if current_cost + cost < min_cost[v]: min_cost[v] = current_cost + cost heapq.heappush(heap, (min_cost[v], v)) return -1 def process_queries(n, m, q, edges, queries): city_graph = CityGraph(n) for u, v, c in edges: city_graph.add_street(u, v, c) results = [] for query in queries: if query[0] == 1: _, u, v = query result = city_graph.dijkstra(u, v) results.append(result) elif query[0] == 2: _, u, v, c = query city_graph.update_street_cost(u, v, c) return results"},{"question":"You are given an array of integers and you need to find the length of the longest subsequence that appears in sorted order (strictly increasing or decreasing) in the array. The elements of the subsequence do not need to be contiguous, but they must be in the same order as they appear in the original array. # Function Signature `def longest_sorted_subsequence(arr: List[int]) -> int:` # Input - A list `arr` containing `n` integers `(1 ≤ n ≤ 2000)` where each integer is in the range `1 ≤ arr[i] ≤ 100000`. # Output - An integer representing the length of the longest subsequence that appears in sorted order (strictly increasing or decreasing). # Examples Example 1 **Input:** arr = [3, 10, 2, 1, 20] **Output:** 3 **Explanation:** The longest sorted subsequence is `[3, 10, 20]` or `[10, 2, 1]`, both have length 3. Example 2 **Input:** arr = [50, 3, 10, 7, 40, 80] **Output:** 4 **Explanation:** The longest sorted subsequence is either `[3, 7, 40, 80]` or `[50, 10, 7, 3]`, both have length 4. Example 3 **Input:** arr = [3, 2] **Output:** 2 **Explanation:** The longest sorted subsequence is `[3, 2]` or `[2, 3]`, both have length 2. # Note - To solve this problem, you may consider using dynamic programming techniques to find the longest increasing subsequence (LIS) and the longest decreasing subsequence (LDS), and then return the maximum of the two. - Pay attention to performance requirements due to input size constraints.","solution":"from typing import List def longest_sorted_subsequence(arr: List[int]) -> int: def longest_increasing_subsequence(arr: List[int]) -> int: n = len(arr) if n == 0: return 0 lis = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis) def longest_decreasing_subsequence(arr: List[int]) -> int: n = len(arr) if n == 0: return 0 lds = [1] * n for i in range(1, n): for j in range(i): if arr[i] < arr[j]: lds[i] = max(lds[i], lds[j] + 1) return max(lds) return max(longest_increasing_subsequence(arr), longest_decreasing_subsequence(arr))"},{"question":"You are given a binary tree where each node contains a value. Write a function to calculate the sum of all values in the binary tree. Additionally, you should be able to compute the sum of the values at each level of the binary tree. The function should take a single input which is the root node of the binary tree and return a list of integers where the first integer is the total sum of all values in the binary tree, followed by the sum of values at each level of the binary tree. # Input Format - The input is provided as a nested dictionary representing the binary tree. - Each dictionary represents a node in the tree and has three keys: \\"value\\", \\"left\\", and \\"right\\". - The \\"value\\" key holds the value of the node (an integer). - The \\"left\\" and \\"right\\" keys hold the left and right child nodes respectively (dictionaries with the same structure or `None` if there is no child). # Output Format - The output should be a list of integers where the first integer is the total sum of all values in the binary tree. - The subsequent integers are the sums of the values at each level of the binary tree in order, starting from the root level. # Example Input ```python { \\"value\\": 1, \\"left\\": { \\"value\\": 2, \\"left\\": { \\"value\\": 4, \\"left\\": None, \\"right\\": None }, \\"right\\": { \\"value\\": 5, \\"left\\": None, \\"right\\": None } }, \\"right\\": { \\"value\\": 3, \\"left\\": None, \\"right\\": { \\"value\\": 6, \\"left\\": None, \\"right\\": None } } } ``` Output ```python [21, 1, 5, 15] ``` Explanation - Total sum of all values: 1 + 2 + 3 + 4 + 5 + 6 = 21 - Level 0 sum: 1 - Level 1 sum: 2 + 3 = 5 - Level 2 sum: 4 + 5 + 6 = 15 # Constraints - The input binary tree will contain at most 10,000 nodes. - Each node value will be an integer between -1000 and 1000.","solution":"def sum_of_values_in_binary_tree(root): Returns a list of integers where the first integer is the total sum of all values in the binary tree, followed by the sum of values at each level of the binary tree. if not root: return [0] from collections import deque total_sum = 0 level_sums = [] queue = deque([root]) while queue: level_len = len(queue) level_sum = 0 for _ in range(level_len): node = queue.popleft() level_sum += node[\\"value\\"] total_sum += node[\\"value\\"] if node[\\"left\\"]: queue.append(node[\\"left\\"]) if node[\\"right\\"]: queue.append(node[\\"right\\"]) level_sums.append(level_sum) return [total_sum] + level_sums"},{"question":"In an array, an element is called a peak if it is not smaller than its neighbors. For corner elements, we need to consider only one neighbor. Now given an array of size n, design an algorithm to find any one of the peak elements. You are required to implement this algorithm such that it finds a peak element in O(log n) time. Write a function `findPeakElement` that takes an array `arr` of integer values as input and returns the index of one of its peak elements. Input The first line contains an integer n (1 ≤ n ≤ 10^5) - the size of the array. The second line contains n space-separated integers (−10^9 ≤ a_i ≤ 10^9) representing the array. Output Print the index of any one peak element (0-based index). If there are multiple peak elements, print the index of any one of them. Examples Input 5 1 3 20 4 1 Output 2 Input 7 10 20 15 2 23 90 67 Output 1","solution":"def findPeakElement(arr): Find a peak element in the array. A peak element is not smaller than its neighbors. For corner elements, it is enough to compare with one neighbor. Args: arr (list of int): 1D list of integers Returns: int: An index of one peak element. def findPeak(arr, low, high, n): mid = low + (high - low) // 2 # Check if mid is a peak element if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])): return mid # If the left neighbor is greater, then there is a peak element on the left side elif mid > 0 and arr[mid - 1] > arr[mid]: return findPeak(arr, low, mid - 1, n) # If the right neighbor is greater, then there is a peak element on the right side else: return findPeak(arr, mid + 1, high, n) n = len(arr) return findPeak(arr, 0, n - 1, n)"},{"question":"A novel bakery offers their packages in a special way. Each package can include up to **n** different unique types of pastries, and for each type of pastry, a specific number of items must be packed. The bakery wants to fill the packages in such a way where the total number of items per package is minimized, but each package contains all unique types of pastries without exceeding the maximum allowed items per type. The total tally of items in any given package should also be the same. Design a program that determines the minimum total number of items per package based on the provided maximum allowed items per type. Input The first line contains the integer n (1 ≤ n ≤ 100). The second line contains n integers representing the maximum allowed items for each type of pastry. Each integer is between 1 and 1000 inclusive. Output Output the minimal total number of items that can be filled per package while fulfilling the conditions. Examples Input 3 4 3 2 Output 6 Input 4 2 2 2 2 Output 8 Note In the first example, one of the possible ways to achieve the minimal total number of items per package is by including 2 pastries of each type, therefore having a total of 2 pastries x 3 types = 6 pastries per package. In the second example, each type of pastry is limited to 2 items. Thus, each package will contain 2 pastries of each type, leading to a total of 2 x 4 = 8 items per package.","solution":"from math import gcd from functools import reduce def lcm(a, b): return a * b // gcd(a, b) def lcm_multiple(numbers): return reduce(lcm, numbers, 1) def minimal_total_items(n, max_items): return lcm_multiple(max_items)"},{"question":"Alex is a university student who loves coding competitions. He has joined a competition where he needs to solve problems to earn points. The competition lasts for T minutes and there are n problems to solve. Problems are either beginner or advanced: - A beginner problem takes exactly a minutes to solve. - An advanced problem takes exactly b minutes (b > a) to solve. Additionally, each problem becomes mandatory at a certain time t_i (0 ≤ t_i ≤ T). If Alex leaves the competition before solving all mandatory problems, he will receive zero points. Otherwise, he earns points equal to the number of solved problems. For each problem, Alex knows if it is beginner or advanced and the time when it becomes mandatory. Help Alex determine the maximum points he can achieve. # Input - The first line contains an integer m (1 ≤ m ≤ 10^4) — the number of test cases. - Each test case begins with a line containing four integers n, T, a, b (2 ≤ n ≤ 2⋅10^5, 1 ≤ T ≤ 10^9, 1 ≤ a < b ≤ 10^9). - The second line of each test case contains n integers 0 or 1, where 0 denotes a beginner problem and 1 denotes an advanced problem. - The third line of each test case contains n integers t_i (0 ≤ t_i ≤ T) — the time each problem becomes mandatory. The total sum of n over all test cases will not exceed 2⋅10^5. # Output Print the maximum points Alex can achieve for each test case. # Example **Input:** ``` 3 3 10 2 5 1 0 1 1 5 8 4 15 1 8 0 1 1 0 2 10 12 15 2 25 1 10 1 1 5 20 ``` **Output:** ``` 2 3 2 ``` # Explanation: **First Test Case:** - If Alex leaves at time 0, 1, 2, 3, or 4, he can\'t solve any problems hence 0 points. - If he leaves at time 5, he can solve the first problem. - Optimum here is to solve first and third problem at time 10. **Second Test Case:** - Solve first problem (beginner) by time 2. - Solve second problem by time 12 (advanced). - Solve fourth problem by time 15. - Third problem falls into mandatory but we can only solve 2 + 3 = 3 points before time 15. **Third Test Case:** - Solve first problem by time 0-10. - Solve second problem by time 10-20 even though Alex can solve in first 20 minutes after 5 solved problems by time 20. Let\'s help Alex plan his strategy!","solution":"def max_points(test_cases): results = [] for case in test_cases: n, T, a, b = case[\'n\'], case[\'T\'], case[\'a\'], case[\'b\'] problems = case[\'problems\'] mandatory_times = case[\'mandatory_times\'] beginner_times = [] advanced_times = [] for i in range(n): if problems[i] == 0: beginner_times.append(mandatory_times[i]) else: advanced_times.append(mandatory_times[i]) beginner_times.sort() advanced_times.sort() num_beginner = len(beginner_times) num_advanced = len(advanced_times) total_required_time = num_beginner * a + num_advanced * b if total_required_time <= T: results.append(n) continue points = 0 current_time = 0 b_index = 0 a_index = 0 for t in sorted(mandatory_times): required_time = (a * a_index) + (b * b_index) if required_time <= t - 1: remaining_time = t - 1 - required_time doable_b = min(num_beginner - a_index, remaining_time // a) remaining_time -= doable_b * a doable_a = min(num_advanced - b_index, remaining_time // b) points = max(points, a_index + b_index + doable_b + doable_a) while b_index < num_advanced and advanced_times[b_index] <= t: current_time += b b_index += 1 while a_index < num_beginner and beginner_times[a_index] <= t: current_time += a a_index += 1 if current_time <= t: points = max(points, a_index + b_index) results.append(points) return results"},{"question":"You are given a square grid of size N×N. Each cell in the grid contains either a 1 or a 0. Your task is to write a program that finds the size of the largest \\"connected component\\" of 1s in the grid. Two cells are considered connected if they are adjacent horizontally or vertically (not diagonally). A connected component is defined as a group of 1s in which each 1 is reachable from any other 1 in the group through a series of adjacent 1s. # Input - The first line contains an integer N, the size of the grid (1 ≤ N ≤ 100). - The next N lines each contain N integers representing the grid (each value is either 0 or 1). # Output - Print one integer, the size of the largest connected component of 1s. # Example Input ``` 4 1 1 0 0 0 1 1 0 0 0 0 1 1 0 0 1 ``` Output ``` 4 ``` Explanation In the example input, the largest connected component of 1s has a size of 4. This component is made up of the 1s located at positions (0,0), (0,1), (1,1), and (1,2).","solution":"def largest_connected_component(N, grid): def dfs(x, y): # If the current cell is out of bounds or not a 1, return 0 if x < 0 or y < 0 or x >= N or y >= N or grid[x][y] == 0: return 0 # Mark the cell as visited grid[x][y] = 0 size = 1 # Current cell # Explore all four possible directions: up, down, left, right for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: size += dfs(x + dx, y + dy) return size max_size = 0 for i in range(N): for j in range(N): if grid[i][j] == 1: max_size = max(max_size, dfs(i, j)) return max_size"},{"question":"Ishaan is an avid chess player and loves creating puzzles. Recently, he devised a unique challenge for his friends that involves arranging knights on a modified chessboard. The chessboard has n rows and m columns, and it initially starts with no knights placed on it. Ishaan wants to place knights on the board such that no knight can attack another knight. A knight in chess moves in an “L” shape: two squares in one direction and then one square perpendicular to that direction, or one square in one direction and then two squares perpendicular to that direction. Ishaan needs to place as many knights on the board as possible following the rule that no two knights can attack each other. Given the dimensions of the board, write a program to determine the maximum number of knights that can be placed on the board such that no knight can attack another knight. Input The first line contains two integers n and m (1 ≤ n, m ≤ 500), representing the number of rows and columns of the chessboard. Output Print a single integer, the maximum number of knights that can be placed on the board without them attacking each other. Examples Input 3 3 Output 5 Input 1 4 Output 2 Input 2 2 Output 4","solution":"def max_knights(n, m): if n == 1 or m == 1: return n * m if n == 2 or m == 2: bigger = max(n, m) return (bigger // 4) * 4 + min(2, bigger % 4) * 2 return (n * m + 1) // 2"},{"question":"You are given n points on a 2D plane with integer coordinates. Your task is to connect these points with the shortest possible path that visits every point exactly once and returns to the starting point. This is a classic example of the Travelling Salesman Problem (TSP) with a twist: the points form a simple polygon (no two edges cross each other), and the shortest path will define the perimeter of this polygon. Input The first line contains a single integer n (3 ≤ n ≤ 100,000) — the number of points given. Each of the next n lines contains two integers x and y (-10^9 ≤ x, y ≤ 10^9) — the coordinates of the points. Output Print the minimum possible length of the path rounded to six decimal places. Example Input 4 0 0 1 0 1 1 0 1 Output 4.000000 Input 5 1 1 2 2 2 1 3 0 1 2 Output 6.472136","solution":"import math def calc_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def cross_product(o, a, b): return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) def convex_hull(points): points.sort() lower = [] for p in points: while len(lower) >= 2 and cross_product(lower[-2], lower[-1], p) <= 0: lower.pop() lower.append(p) upper = [] for p in reversed(points): while len(upper) >= 2 and cross_product(upper[-2], upper[-1], p) <= 0: upper.pop() upper.append(p) return lower[:-1] + upper[:-1] def min_path_length(n, points): points = [tuple(point) for point in points] hull = convex_hull(points) distance = 0.0 for i in range(len(hull)): distance += calc_distance(hull[i], hull[(i + 1) % len(hull)]) return round(distance, 6)"},{"question":"A company organizes a Secret Santa event every year where each employee randomly picks a gift for another employee. This year, they decided to add an additional twist: every employee should receive exactly one gift, and no employee should gift themselves. Given a list of employee names, write a program to determine if it is possible to assign the Secret Santa assignments such that each employee receives exactly one gift and no employee ends up with their own name. If it is possible, return one such valid assignment, otherwise return an indication that it\'s not possible. Input The input data contains a single integer n (2 ≤ n ≤ 100), which represents the number of employees, followed by n lines, each containing a unique employee name (a string of up to 100 characters). Output If it is possible to assign the Secret Santa assignments as described, output \\"Possible\\" followed by n lines, each containing a pair of names `A -> B`, indicating that employee `A` is gifting to employee `B`. If it is not possible to make such an assignment, output \\"Not possible\\". Examples Input 3 Alice Bob Charlie Output Possible Alice -> Bob Bob -> Charlie Charlie -> Alice Input 2 Alice Bob Output Possible Alice -> Bob Bob -> Alice Input 1 Alice Output Not possible","solution":"import random def secret_santa(n, employees): if n == 1: return \\"Not possible\\" assignments = employees[:] while True: random.shuffle(assignments) if all(assignments[i] != employees[i] for i in range(n)): break result = [\\"Possible\\"] for i in range(n): result.append(f\\"{employees[i]} -> {assignments[i]}\\") return \\"n\\".join(result)"},{"question":"Write a program that calculates the sum of all prime numbers less than or equal to a given number n. Constraints * 0 < n < 100000 Input An integer n is given. Output Print the sum of all prime numbers less than or equal to n. Examples Input 10 Output 17 Input 20 Output 77","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than or equal to n. if n < 2: return 0 # Sieve of Eratosthenes to find all primes less than or equal to n is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for start in range(2, int(n**0.5) + 1): if is_prime[start]: for multiple in range(start*start, n + 1, start): is_prime[multiple] = False return sum(index for index, prime in enumerate(is_prime) if prime)"},{"question":"You are given a wooden board of dimensions `w` by `h`. The board can be cut into two smaller rectangles by making one horizontal or one vertical cut. You need to determine the maximum possible area of a smaller rectangle you can get after making exactly one cut on the board. Input Two integers, `w` and `h` where `1 ≤ w, h ≤ 1000`, separated by a space. Output Print the maximum area of a smaller rectangle that can be obtained after a single cut. Examples Input 4 5 Output 10 Input 8 3 Output 12 Input 6 6 Output 18 Explanation: For the first example, if you make a vertical cut at `2`, you will get two rectangles of dimensions `2x5` each. The area of one rectangle is `10`. This is the maximum possible area you can get with one cut.","solution":"def max_smaller_rectangle_area(w, h): Calculate the maximum possible area of a smaller rectangle after making exactly one cut on the board. Parameters: w (int): The width of the board. h (int): The height of the board. Returns: int: The maximum area of a smaller rectangle. max_area_after_vertical_cut = w * (h // 2) max_area_after_horizontal_cut = h * (w // 2) return max(max_area_after_vertical_cut, max_area_after_horizontal_cut) # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read().strip() w, h = map(int, input.split()) print(max_smaller_rectangle_area(w, h))"},{"question":"Pangrams are sentences constructed using every letter of the alphabet at least once. For example, \\"The quick brown fox jumps over the lazy dog\\" is a pangram because it uses the letters a through z at least once (case is irrelevant). Your task is to determine if a given sentence is a pangram. Input: The input consists of a single line, which is a string containing lower and/or uppercase English letters and possibly spaces. Output: Output \\"YES\\" if the sentence is a pangram, otherwise, output \\"NO\\". Examples: Input: The quick brown fox jumps over the lazy dog Output: YES Input: Hello, World! Output: NO Note: In the second example, the sentence does not use every letter of the English alphabet, so the output is \\"NO\\". For the first example, the sentence uses every letter of the English alphabet, so the output is \\"YES\\".","solution":"def is_pangram(sentence): Determines if the given sentence is a pangram. Parameters: sentence (str): The sentence to check. Returns: str: \\"YES\\" if the sentence is a pangram, otherwise \\"NO\\". alphabet_set = set(\\"abcdefghijklmnopqrstuvwxyz\\") sentence_set = set(sentence.lower()) return \\"YES\\" if alphabet_set.issubset(sentence_set) else \\"NO\\""},{"question":"Given an array of integers, determine the maximum product of any three distinct elements in the array. Your task is to write a function that takes an array of integers and returns the maximum product of any three distinct elements. Input An array of integers `arr` (3 ≤ len(arr) ≤ 1000, -1000 ≤ arr[i] ≤ 1000). Output Output the maximum product of any three distinct elements in the array. Examples Input [1, 10, 2, 6, 5, 3] Output 300 Input [-10, -10, 5, 2] Output 500","solution":"def max_product_of_three(arr): Returns the maximum product of any three distinct elements in the array. arr.sort() # The maximum product can be either the product of the three largest numbers # or the product of the two smallest numbers (which can be negative) and the largest number. return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])"},{"question":"You are given a string containing just the characters \'(\' and \')\'. Your task is to determine the minimum number of insertions required to make the string valid. A string is considered valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. Input The input consists of a single string s (1 ≤ |s| ≤ 105) containing only the characters \'(\' and \')\'. Output Output a single integer representing the minimum number of insertions required to make the string valid. Examples Input ()) Output 1 Input (( Output 2 Explanation In the first example, you need one opening bracket to balance the extra closing bracket. In the second example, you need two closing brackets to balance the two opening brackets.","solution":"def min_insertions_to_make_valid(s): Determines the minimum number of insertions required to make the string of parentheses valid. open_brackets = 0 insertions = 0 for char in s: if char == \'(\': open_brackets += 1 else: # char == \')\' if open_brackets > 0: open_brackets -= 1 else: insertions += 1 # Any remaining open brackets need to be closed insertions += open_brackets return insertions"},{"question":"A large company is looking to organize its employee data. They want to group employees based on their departments and then sort the employees within each department by their respective IDs. Each employee is represented by an object that contains an ID, a name, and a department. Your task is to write a function that takes in a list of employee objects and returns a dictionary. The dictionary should have departments as keys and the value for each department should be a list of employee names, sorted by their IDs. The employees with the same department should appear in the dictionary in the order of their IDs, from lowest to highest. # Input - A list of employee dictionaries. Each dictionary contains: - `id` (integer): Employee ID. - `name` (string): Employee name. - `department` (string): Employee department name. # Output - A dictionary where: - Keys are department names. - Values are lists of employee names in that department, sorted by employee\'s ID. # Constraints - The total number of employees will not exceed 10^5. - Each employee will belong to exactly one department. - Employee IDs will be unique. - Each department name will contain only alphanumeric characters and will be non-empty. - Employee names will be non-empty strings and contain only alphabetic characters. # Example **Input:** ```python [ {\\"id\\": 3, \\"name\\": \\"Alice\\", \\"department\\": \\"HR\\"}, {\\"id\\": 1, \\"name\\": \\"Bob\\", \\"department\\": \\"Engineering\\"}, {\\"id\\": 2, \\"name\\": \\"Charlie\\", \\"department\\": \\"HR\\"}, {\\"id\\": 4, \\"name\\": \\"David\\", \\"department\\": \\"Engineering\\"}, {\\"id\\": 5, \\"name\\": \\"Eve\\", \\"department\\": \\"Marketing\\"} ] ``` **Output:** ```python { \\"HR\\": [\\"Charlie\\", \\"Alice\\"], \\"Engineering\\": [\\"Bob\\", \\"David\\"], \\"Marketing\\": [\\"Eve\\"] } ``` # Note In the given example, the employees are grouped first by their departments and then sorted by their IDs within each department.","solution":"def organize_employees(employees): Groups employees by departments and sorts their names by employee IDs within each department. Args: employees (list of dict): List of dictionaries containing employee information. Returns: dict: A dictionary with departments as keys and lists of employee names sorted by their IDs as values. from collections import defaultdict # Create a defaultdict to hold employees by department. departments = defaultdict(list) # Populate the departments dictionary with employee data. for emp in employees: departments[emp[\'department\']].append((emp[\'id\'], emp[\'name\'])) # Sort employees within each department by ID and extract the names. for dept in departments: departments[dept] = [name for _, name in sorted(departments[dept])] return departments"},{"question":"To become a detective, Felix needs to crack a series of coded messages. Each message is a sequence of letters, and every letter is assigned a unique number (A=1, B=2, ..., Z=26). Felix can decode any message letter by letter using these numbers. However, the bad guys have tampered with the messages and some letters have been swapped. Felix has a list of L coded messages and suspects that each coded message originally contained a sequence of consecutive letters from the alphabet. However, due to tampering, the letters within each message might be scrambled. Felix needs your help to verify his suspicion. Write a function to determine if each of the L messages, after sorting their letters, forms a consecutive sequence from the alphabet without any gaps. Input format: - The first line contains an integer L denoting the number of coded messages. - Each of the next L lines contains a single coded message which is a string of uppercase letters. Output format: Print \\"YES\\" if the sorted letters of the message form a consecutive sequence, \\"NO\\" otherwise. Print one result per line corresponding to each input message. Constraints: 1 ≤ L ≤ 100 2 ≤ length of each coded message ≤ 26 SAMPLE INPUT 3 BAC ECBAD ZXY SAMPLE OUTPUT YES YES YES Explanation For the first message \\"BAC\\", sorting the letters gives \\"ABC\\", which is a consecutive sequence. For the second message \\"ECBAD\\", sorting the letters gives \\"ABCDE\\", also a consecutive sequence. For the third message \\"ZXY\\", sorting the letters gives \\"XYZ\\", another consecutive sequence. Thus, all messages output \\"YES\\".","solution":"def is_consecutive_sequence(message): Determines if the sorted letters of the message form a consecutive sequence from the alphabet without any gaps. sorted_message = sorted(message) for i in range(1, len(sorted_message)): if ord(sorted_message[i]) - ord(sorted_message[i - 1]) != 1: return \\"NO\\" return \\"YES\\" def verify_consecutive_messages(L, messages): Given a number L and a list of L coded messages, this function returns a list of \\"YES\\" or \\"NO\\" for each message indicating whether the sorted letters form a consecutive sequence. return [is_consecutive_sequence(message) for message in messages]"},{"question":"Farmer John\'s cows have been having trouble with their health lately due to being cooped up in the barn. To address this, Farmer John has decided to build a cow track in his farm so the cows can enjoy some fresh air and exercise. The track consists of a straight line with n sections, each of which can either contain grass where the cows can run, or gravel which they must avoid. Farmer John wants to find the longest continuous stretch of sections covered entirely with grass so that the cows can have the longest possible run. Can you help him determine the length of this stretch? Input The first and only line of the input contains a string of length n (1 ≤ n ≤ 100 000) consisting of characters \'G\' (indicating a section with grass) and \'R\' (indicating a section with gravel). Output Print the length of the longest contiguous stretch of sections covered in grass. Examples Input GRGGGRGRG Output 3 Input GGGRGGG Output 3 Input RRRGGRRR Output 2 Note In the first sample, the longest stretch of grass is three sections long, which appears twice in the input string. In the second sample, the longest stretch is also three sections long but appears once. In the third sample, the longest stretch of grass is two sections long, appearing once in the middle of the string.","solution":"def longest_grass_stretch(track): Returns the length of the longest continuous stretch of \'G\' in the track string. max_length = 0 current_length = 0 for section in track: if section == \'G\': current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"You are given a matrix `n x m` filled with integers. Your task is to find the largest square sub-matrix (containing only non-negative numbers) such that the sum of its elements is greater than or equal to a given integer `S`. # Input - The first line contains three integers `n` (1 ≤ n ≤ 100), `m` (1 ≤ m ≤ 100), and `S` (0 ≤ S ≤ 10000) — the number of rows and columns of the matrix, and the minimum sum of the elements in a valid sub-matrix respectively. - The following `n` lines each contain `m` integers, representing the elements of the matrix. Each element is an integer between -100 and 100. # Output - Print the size of the largest square sub-matrix that fulfills the conditions. - If no such sub-matrix exists, print `0`. # Examples Input ``` 4 5 10 1 2 3 -1 -2 2 3 4 -2 0 3 4 5 -3 1 -1 -2 -3 -4 2 ``` Output ``` 3 ``` Input ``` 3 3 15 1 2 3 4 5 6 7 8 9 ``` Output ``` 3 ``` Input ``` 2 2 50 1 1 1 1 ``` Output ``` 0 ``` # Note In the first example, the largest square sub-matrix with a sum >= 10 is: ``` 2 3 4 3 4 5 ``` with size 3x3. In the second example, the entire matrix sums to 45, which is greater than 15, making it the largest possible valid sub-matrix with size 3x3. In the third example, no sub-matrix can reach the required sum of 50. Therefore, the output is `0`.","solution":"def get_largest_square_submatrix(matrix, n, m, S): def submatrix_sum(x1, y1, x2, y2): Calculates the sum of the sub-matrix from (x1,y1) to (x2,y2) inclusive. return sum(matrix[i][j] for i in range(x1, x2 + 1) for j in range(y1, y2 + 1)) max_size = 0 for size in range(1, min(n, m) + 1): for i in range(n - size + 1): for j in range(m - size + 1): if all(matrix[x][y] >= 0 for x in range(i, i + size) for y in range(j, j + size)): if submatrix_sum(i, j, i + size - 1, j + size - 1) >= S: max_size = size return max_size"},{"question":"You are tasked with designing a delivery route for a drone in a city represented as a grid with R rows and C columns. Each cell in the grid either contains an obstacle or is empty. The drone can only move from an empty cell to an adjacent empty cell. The starting point of the drone is (0, 0) and its goal is to reach (R-1, C-1). Write a program that finds the shortest path from the start to the goal or determines that no such path exists. * The drone can move to an adjacent cell in the same row or the same column. * The grid cells are either `.` (empty) or `#` (obstacle). * The drone starts at (0, 0) and must reach (R-1, C-1). Constraints: * 2 ≤ R, C ≤ 1000 * The grid is rectangular. * There is at least one path from (0, 0) to (R-1, C-1) if all cells are empty. Input: Input is given from standard input in the following format: ``` R C grid[0] grid[1] ... grid[R-1] ``` Where each `grid[i]` is a string of `C` characters representing row `i`. Output: If there is a path, print the length of the shortest path from (0, 0) to (R-1, C-1). If there is no path, print -1. Examples: Input: ``` 5 5 ..... .#... ..... ...#. ..... ``` Output: 8 Input: ``` 3 3 ... .#. ..# ``` Output: -1","solution":"from collections import deque def shortest_path(R, C, grid): This function finds the shortest path from (0, 0) to (R-1, C-1) in a grid. If a path exists, it returns the length of the shortest path. If no path exists, it returns -1. if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return -1 moves = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, distance = queue.popleft() if row == R-1 and col == C-1: return distance for move in moves: next_row, next_col = row + move[0], col + move[1] if 0 <= next_row < R and 0 <= next_col < C and grid[next_row][next_col] == \'.\' and (next_row, next_col) not in visited: visited.add((next_row, next_col)) queue.append((next_row, next_col, distance + 1)) return -1"},{"question":"There is a town with M residents, and each resident has a list of activities they can perform. However, the town has certain restrictions: no two consecutive activities performed by a resident can be the same. Given the number of residents M and the list of activities for each resident, determine for each resident the maximum number of distinct activities they can perform consecutively under the given restriction. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer M denoting the number of residents. The next line contains M space-separated integers A1, A2, ..., AM denoting the number of activities available for each respective resident. The next M lines describe each resident\'s activities with Ai space-separated integers representing the activities. Output For each test case, output M lines, each containing a single integer – the maximum number of distinct activities each resident can perform consecutively. Constraints 1 ≤ T ≤ 100 1 ≤ M ≤ 100 1 ≤ Ai ≤ 100 1 ≤ activity_value ≤ 1000 Example Input: 2 3 3 4 2 1 2 3 5 5 5 5 7 9 2 2 3 4 4 4 1 1 Output: 3 1 2 2 1 Explanation Example case 1: The three residents have activities as follows: 1. {1, 2, 3} - can perform 1 -> 2 -> 3, total 3 distinct activities. 2. {5, 5, 5, 5} - can only perform one distinct activity as all activities are the same, total 1 distinct activity. 3. {7, 9} - can perform 7 -> 9, total 2 distinct activities. Example case 2: The two residents have activities as follows: 1. {2, 3} - can perform 2 -> 3, total 2 distinct activities. 2. {4, 4} - can only perform one distinct activity as all activities are the same, total 1 distinct activity.","solution":"def max_distinct_activities(T, test_cases): Given T test cases, each containing M residents and their respective activities, determines the maximum number of distinct activities each resident can perform consecutively. Parameters: - T: int - Number of test cases. - test_cases: list of tuples - Each tuple contains the following: - M: int - Number of residents. - A: list of int - List containing number of activities available for each resident. - activities: list of lists - Each list contains the activities for a resident. Returns: - result: list of lists - Each list contains the maximum number of distinct activities each resident can perform consecutively for each test case. result = [] for i in range(T): M = test_cases[i][0] A = test_cases[i][1] activities = test_cases[i][2] case_result = [] for j in range(M): distinct_activities = set(activities[j]) case_result.append(len(distinct_activities)) result.append(case_result) return result"},{"question":"Write a function average_travel_distance that calculates the average distance traveled by a delivery truck to deliver packages. The truck starts at the warehouse, travels to each delivery location in the order they are given, and returns to the warehouse after the last delivery. Input The function is provided with a two-dimensional list deliveries containing n rows and two columns (x, y) — coordinates of the delivery locations. The first line of input contains an integer n (1 ≤ n ≤ 1000) — number of delivery locations. The next n lines contain two integers x and y — coordinates of the delivery location. The coordinates range from -1000 to 1000. Output The function should output the average distance traveled per delivery. The distance between two points (x1, y1) and (x2, y2) is given by the Euclidean distance formula: ``` distance = sqrt((x2 - x1)^2 + (y2 - y1)^2) ``` Example Input 4 1 3 4 4 -2 0 -6 8 Output 7.302","solution":"import math def average_travel_distance(deliveries): Returns the average distance traveled by a delivery truck to deliver packages. Parameters: deliveries (list of list of int): 2D list with [x, y] coordinates of each delivery location. Returns: float: average distance traveled per delivery. n = len(deliveries) if n == 0: return 0 total_distance = 0 start_point = (0, 0) previous_point = start_point for delivery in deliveries: current_point = (delivery[0], delivery[1]) total_distance += math.sqrt((current_point[0] - previous_point[0])**2 + (current_point[1] - previous_point[1])**2) previous_point = current_point # Add the distance back to the warehouse total_distance += math.sqrt((start_point[0] - previous_point[0])**2 + (start_point[1] - previous_point[1])**2) # Average distance per delivery includes the return trip return total_distance / n"},{"question":"A group of friends decided to play a game to measure their coding skills. They set up a straight line with exactly n positions, numbered from 1 to n. They divide themselves into two categories: coders who stand at position 1 and testers who stand at position n. The goal of the game is for all coders to pair up with all testers such that each coder can move towards the testers\' position without clashing with other coders. Coders and testers move in turns. On each turn, each coder may move one position to the right, while each tester may move one position to the left. If at any point a coder and tester occupy the same position, they are paired and removed from the line. Given the initial positions of the coders and testers, determine if it is possible for all coders to be paired with all testers. If it is possible, find the minimum number of turns required for all coders to pair with all testers. Input - The first line contains an integer n (1 ≤ n ≤ 1000), the number of positions on the line. - The second line contains an integer k (1 ≤ k ≤ n), the number of coders. - The third line contains a list of k integers representing the initial positions of the coders. - The fourth line contains an integer m (1 ≤ m ≤ n), the number of testers. - The fifth line contains a list of m integers representing the initial positions of the testers. Output - Print a single integer representing the minimum number of turns required for all coders to pair with all testers. If it is not possible for all coders to pair with all testers, print -1. Example Input 5 2 1 2 2 4 5 Output 3 Input 5 2 1 2 1 4 Output -1 Note In the first example, coders at position 1 and 2 can move towards position 5 and pair with testers at position 4 and 5 respectively in 3 turns. In the second example, with only one tester, it is not possible to pair up with all coders, hence the output is -1.","solution":"def min_turns_to_pair(n, k, coders, m, testers): Returns the minimum number of turns required for all coders to pair with all testers. If it is not possible, return -1. if k > m: return -1 # More coders than testers, hence pairing is impossible coders.sort() testers.sort() turns = 0 for coder in coders: min_distance = float(\'inf\') target_tester = None for tester in testers: distance = tester - coder if distance < 0: continue # Tester is already to the left of coder if distance < min_distance: min_distance = distance target_tester = tester if target_tester is None: return -1 # No available tester can pair with this coder testers.remove(target_tester) turns = max(turns, min_distance) return turns"},{"question":"You are given a string consisting of digits and lowercase alphabets. Write a program to rearrange the characters of the string in such a way that all the digits appear before any alphabets and that the relative order among the digits and that among the alphabets remains the same. Input A single string containing at least one digit and one alphabet character. All characters in the string are either digits (0-9) or lowercase alphabets (a-z). Output Print the rearranged string such that all the digits appear first, followed by all the alphabets, both in their original relative orders. Constraints 1 ≤ length of the string ≤ 100 Sample Input a1b2c3d4 Sample Output 1234abcd Output details In the given input string, the digits are \'1\', \'2\', \'3\', \'4\' and the alphabets are \'a\', \'b\', \'c\', \'d\'. The output string should have all the digits placed before the alphabets, while maintaining the order within the digits and the alphabets as it is. Thus, the output \\"1234abcd\\" is correct. Another valid input could be \\"3f2g1h\\" and the corresponding correct output would be \\"321fgh\\".","solution":"def rearrange_string(s): Rearranges the input string so that all digits come before alphabets while preserving their relative order. digits = [] alphabets = [] for char in s: if char.isdigit(): digits.append(char) else: alphabets.append(char) return \'\'.join(digits + alphabets) # Example usage # s = \'a1b2c3d4\' # print(rearrange_string(s)) # Output: \'1234abcd\'"},{"question":"Petya is a software engineer who loves traveling. He is planning to visit several cities during his vacation. In Petya\'s country, there are n cities, and some of them are connected by direct flights. Each flight has a specific duration in minutes and a fare in dollars. Petya wants to minimize both the total travel time and the total cost of his journey while visiting a specific city sequence. Each city must be visited exactly once and only once, starting from city number a and ending at city number b. To achieve this, Petya decides to use dynamic programming to find the optimal route. Your task is to help Petya implement this solution. Input The first line of input contains three integers n, m, and k (1 ≤ n ≤ 100, 0 ≤ m ≤ 1000, 1 ≤ k ≤ 100). These integers represent the number of cities, the number of direct flights, and the number of sequences Petya wants to visit, respectively. Each of the next m lines contains four integers u, v, t, and c (1 ≤ u, v ≤ n, 1 ≤ t, c ≤ 100) describing a flight from city u to city v, where t is the time duration in minutes and c is the fare in dollars. Each of the next k lines contains two integers a and b (1 ≤ a, b ≤ n) representing the starting and ending city, respectively, for each sequence Petya wants to visit. Output For each sequence, output the minimum total travel time and the minimum total cost. If it is not possible to visit the sequence of cities, print \\"-1 -1\\" (without the quotes). Examples Input 4 5 2 1 2 30 100 2 3 15 50 3 4 25 80 1 3 45 150 2 4 50 120 1 4 2 3 Output 70 230 15 50 Note For the first sequence (1 to 4), Petya can take the following flights: 1 -> 2 -> 3 -> 4 with a total travel time of 30 + 15 + 25 = 70 minutes and a total cost of 100 + 50 + 80 = 230 dollars. For the second sequence (2 to 3), Petya can take a direct flight: 2 -> 3 with a travel time of 15 minutes and a cost of 50 dollars.","solution":"import heapq import sys def find_optimal_routes(n, m, k, flights, sequences): adj = {i: [] for i in range(1, n+1)} for u, v, t, c in flights: adj[u].append((v, t, c)) def dijkstra(start, end): pq = [(0, 0, start)] distances = {i: (sys.maxsize, sys.maxsize) for i in range(1, n+1)} distances[start] = (0, 0) while pq: curr_time, curr_cost, u = heapq.heappop(pq) if u == end: return curr_time, curr_cost for v, time, cost in adj[u]: next_time = curr_time + time next_cost = curr_cost + cost if (next_time, next_cost) < distances[v]: distances[v] = (next_time, next_cost) heapq.heappush(pq, (next_time, next_cost, v)) return -1, -1 results = [] for start, end in sequences: result = dijkstra(start, end) if result == (-1, -1): results.append(\\"-1 -1\\") else: results.append(f\\"{result[0]} {result[1]}\\") return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() idx = 0 n = int(data[idx]) m = int(data[idx+1]) k = int(data[idx+2]) idx += 3 flights = [] for _ in range(m): u = int(data[idx]) v = int(data[idx+1]) t = int(data[idx+2]) c = int(data[idx+3]) flights.append((u, v, t, c)) idx += 4 sequences = [] for _ in range(k): a = int(data[idx]) b = int(data[idx+1]) sequences.append((a, b)) idx += 2 result = find_optimal_routes(n, m, k, flights, sequences) for res in result: print(res)"},{"question":"There\'s a magical land with a row of N houses, each house represented by a single integer indicating its unique height. You are given the height of each house in a list, and you have to process Q queries on this list. Each query can be of two types: 1. Update: Change the height of the house at a specific position. 2. Range Query: Find the maximum height within a certain range of houses. Specifically, the queries will be in one of the forms below: - `1 x h` (Update: Change the height of the house at position `x` to `h`) - `2 l r` (Range Query: Find the maximum height of the houses from position `l` to `r` inclusive) You are to output the results of all the range queries. Positions are 1-based. Constraints: - 1 ≤ N ≤ 100000 (number of houses) - 1 ≤ Q ≤ 100000 (number of queries) - 1 ≤ heights[i] ≤ 10^9 (initial height of each house) - For an update, 1 ≤ x ≤ N - For a range query, 1 ≤ l ≤ r ≤ N Input: - The first line contains two integers N and Q. - The second line contains N integers denoting the heights of the N houses. - The next Q lines contain the queries in the given format. Output: - For each range query, output the result on a new line. Example: Input: ``` 5 3 3 1 4 1 5 2 1 3 1 2 6 2 2 5 ``` Output: ``` 4 6 ```","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, pos, value): pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[pos * 2], self.tree[pos * 2 + 1]) def query(self, l, r): l += self.n r += self.n + 1 res = 0 while l < r: if l % 2 == 1: res = max(res, self.tree[l]) l += 1 if r % 2 == 1: r -= 1 res = max(res, self.tree[r]) l //= 2 r //= 2 return res def process_queries(n, q, heights, queries): seg_tree = SegmentTree(heights) results = [] for query in queries: q_type, a, b = query if q_type == 1: seg_tree.update(a - 1, b) elif q_type == 2: results.append(seg_tree.query(a - 1, b - 1)) return results"},{"question":"You are given a grid with dimensions n x m, representing a terrain with cells that are either passable (denoted by \'.\') or blocked (denoted by \'#\'). You start at the top-left corner of the grid and want to reach the bottom-right corner by moving only right or down one cell at a time. Your goal is to determine the number of distinct paths from the top-left corner to the bottom-right corner. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) representing the dimensions of the grid. The next n lines each contain m characters, representing the grid. The characters are either \'.\' or \'#\'. Output Output a single integer, the number of distinct paths from the top-left to the bottom-right corner. Note: If it is impossible to reach the bottom-right corner from the top-left corner, output 0. Examples Input 3 3 ... .#. ... Output 2 Input 3 3 .#. .#. ... Output 1 Input 2 2 #. .# Output 0","solution":"def count_paths(n, m, grid): # Check if the starting location or ending location is blocked if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 # Create a 2D dp array to store the number of paths to each cell dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = 1 # Fill the dp array for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 # If the cell is blocked, no paths can go through here else: if i > 0: dp[i][j] += dp[i-1][j] # Add paths from the top cell if j > 0: dp[i][j] += dp[i][j-1] # Add paths from the left cell # The answer is the number of ways to reach the bottom-right corner return dp[n-1][m-1]"},{"question":"In a warehouse, there are shelves that are stacked with boxes. Each shelf can hold up to X boxes, and there are Y shelves available for stacking. Workers are assigned the task of arranging the boxes on these shelves in a way that minimizes the number of shelves used, filling each shelf as much as possible before starting another shelf. Given the number of boxes N that need to be arranged, determine the minimum number of shelves required to store all the boxes following the given constraints. Constraints * 1 ≤ N ≤ 10^9 * 1 ≤ X ≤ 10^6 * 1 ≤ Y ≤ 10^6 * X and Y are integers. Input Input is given from Standard Input in the following format: N X Y Output Assume that the minimum number of shelves required is Z. Print Z. If it is not possible to store all boxes with the available shelves, print \\"Not Possible\\". Examples Input 100 10 15 Output 10 Input 500 25 20 Output 20 Input 1000000 500 1000 Output Not Possible Input 120 10 8 Output Not Possible Input 250 50 6 Output 5","solution":"def min_shelves(N, X, Y): Determines the minimum number of shelves required to store N boxes, where each shelf can hold up to X boxes and there are Y shelves available. If it\'s not possible to store all the boxes with the available shelves, the function returns \\"Not Possible\\". :param int N: Total number of boxes :param int X: Maximum boxes each shelf can hold :param int Y: Total number of shelves available :return: Minimum number of shelves needed or \\"Not Possible\\" :rtype: int or str required_shelves = (N + X - 1) // X # This gives us the ceiling of N / X if required_shelves > Y: return \\"Not Possible\\" return required_shelves # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read().strip().split() N, X, Y = map(int, input) result = min_shelves(N, X, Y) print(result)"},{"question":"Janet is programming a new feature for a weather forecasting app. She needs to calculate the maximum number of days that meet certain temperature criteria consecutively. Users can specify a minimum temperature and a maximum temperature range. Janet\'s task is to identify the longest consecutive sequence of days within this temperature range. Write a function that takes a list of integer temperatures, a minimum temperature, and a maximum temperature. The function should return the length of the longest consecutive sequence of days where the temperatures fall within the specified range. Input The input consists of: - An integer n (1 ≤ n ≤ 100 000) — the number of days. - An array of n integers T (−50 ≤ T[i] ≤ 50) — the temperatures on each day. - Two integers Tmin and Tmax (−50 ≤ Tmin ≤ Tmax ≤ 50) — the minimum and maximum temperature range. Output Return a single integer — the length of the longest consecutive sequence of days where the temperature stays within the range [Tmin, Tmax]. Examples Input 7 10 -5 15 20 25 30 35 10 25 Output 3 Input 5 -10 -20 -30 -15 -25 -25 -10 Output 2 Explanation In the first example, the valid temperatures within the range [10, 25] are on days 1, 3, and 4, yielding a maximum sequence length of 3. In the second example, the valid temperatures within the range [-25, -10] are on days -10 and -25, yielding a maximum sequence length of 2.","solution":"def longest_consecutive_temperature_sequence(n, T, Tmin, Tmax): Returns the length of the longest consecutive sequence of days where the temperature stays within the range [Tmin, Tmax]. :param n: Integer, number of days. :param T: List of integers, temperatures on each day. :param Tmin: Integer, minimum temperature range. :param Tmax: Integer, maximum temperature range. :return: Integer, length of the longest consecutive sequence. max_length = 0 current_length = 0 for temperature in T: if Tmin <= temperature <= Tmax: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"You are given an integer array `a` of length `n` and an integer `x`. Your task is to find out how many contiguous subarrays exist whose product of all elements is less than `x`. Input The first line contains an integer `n` (1 ≤ n ≤ 100) — the length of the array `a`. The second line contains `n` integers `a_i` (1 ≤ a_i ≤ 100) — the elements of the array. The third line contains the integer `x` (1 ≤ x ≤ 10^9). Output Print a single integer — the number of contiguous subarrays whose product is less than `x`. Examples Input 4 1 2 3 4 10 Output 7 Input 5 10 5 2 6 3 100 Output 11 Note In the first example, the subarrays with products less than 10 are: [1], [2], [3], [4], [1, 2], [2, 3], and [3, 4]. Thus, the answer is 7. In the second example, the subarrays with products less than 100 are: [10], [5], [2], [6], [3], [10, 5], [5, 2], [2, 6], [6, 3], [10, 5, 2], and [5, 2, 6]. Thus, the answer is 11.","solution":"def count_subarrays_with_product_less_than_x(n, a, x): Counts the number of contiguous subarrays whose product of all elements is less than x. Parameters: n : int : The length of the array a. a : list of int : The elements of the array. x : int : The threshold value for the product. Returns: int : The number of contiguous subarrays with product less than x. count = 0 product = 1 left = 0 for right in range(n): product *= a[right] while product >= x and left <= right: product //= a[left] left += 1 count += (right - left + 1) return count"},{"question":"You are given two lists of integers. Write a program that outputs YES if the two lists have any common elements (intersection) and NO if they do not have any common elements. Input The first line contains an integer N, indicating the number of datasets to follow. For each dataset, the format is as follows: The first line contains an integer L1, indicating the length of the first list. The second line contains L1 space-separated integers. The third line contains an integer L2, indicating the length of the second list. The fourth line contains L2 space-separated integers. The values in the lists are integers between -10,000 and 10,000. Output Print YES or NO on one line for each dataset. Example Input 3 3 1 2 3 3 4 5 6 4 -1 0 -3 2 4 2 3 4 5 2 7 8 3 9 10 11 Output NO YES NO","solution":"def have_common_elements(datasets): results = [] for data in datasets: list1 = set(data[0]) list2 = set(data[1]) if list1.intersection(list2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_string): input_lines = input_string.strip().split(\'n\') num_datasets = int(input_lines[0]) index = 1 datasets = [] for _ in range(num_datasets): L1 = int(input_lines[index]) list1 = list(map(int, input_lines[index + 1].split())) L2 = int(input_lines[index + 2]) list2 = list(map(int, input_lines[index + 3].split())) datasets.append((list1, list2)) index += 4 return datasets def main(input_string): datasets = parse_input(input_string) results = have_common_elements(datasets) return \'n\'.join(results)"},{"question":"You are given a list of integers representing the heights of buildings in a row, where heights[i] is the height of the ith building. You are also given an integer k. A building is considered \\"significant\\" if its height is greater than or equal to the average height of all buildings in the list. You have to perform k operations. In each operation, you can increase the height of any one building by 1. Your task is to determine the maximum number of significant buildings that can be achieved after performing exactly k operations. Input The first line contains a single integer t — the number of test cases (1 ≤ t ≤ 100). The test cases follow. Each test case consists of two lines. The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ 10^6). The second line contains n integers heights[i] (1 ≤ heights[i] ≤ 10^6) — the heights of the buildings. Output For each test case, print a single integer — the maximum number of significant buildings that can be achieved after performing exactly k operations. Example Input 2 3 2 1 2 3 4 5 1 1 1 1 Output 2 4 Note In the first test case, you can increase the heights of the first and second buildings. The new heights will be [2, 3, 3]. The average height is (2+3+3)/3 = 2.67. Now, the significant buildings are those whose heights are at least 2.67, which are the second and third buildings (2 buildings). In the second test case, you can increase each building\'s height by 1. The new heights will be [2, 2, 2, 2]. The average height is (2+2+2+2)/4 = 2. All buildings have heights equal to the average, so there are 4 significant buildings.","solution":"def max_significant_buildings(t, test_cases): results = [] for case in test_cases: n, k = case[0] heights = case[1] sum_heights = sum(heights) target_sum = sum_heights + k avg_height = target_sum / n count = sum(1 for height in heights if height >= avg_height) if count == n: results.append(count) continue op_needed = 0 for height in sorted(heights): if height < avg_height: op_needed += avg_height - height if op_needed > k: break count += 1 results.append(count) return results # Example usage t = 2 test_cases = [ ((3, 2), [1, 2, 3]), ((4, 5), [1, 1, 1, 1]) ] print(max_significant_buildings(t, test_cases)) # Output: [2, 4]"},{"question":"You are given a list of integers, and you need to find the minimum number of operations required to make each element of the list the same. An operation is defined as incrementing or decrementing any element of the list by 1. Input The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the list. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the list. Output Print a single integer — the minimum number of operations required to make all elements of the list the same. Examples Input 4 1 2 3 4 Output 4 Input 3 7 6 5 Output 2 Notes In the first example, one optimal way is to increment the 1 to 2, the 4 to 3, and the 2 and 3 are already the same, resulting in 4 operations total (1→2 + 4→3). In the second example, an optimal way is to decrement 7 to 6, and increment 5 to 6, resulting in 2 operations total (7→6 + 5→6).","solution":"def min_operations_to_make_elements_equal(n, elements): Returns the minimum number of operations required to make all elements in the list the same. Each operation is either incrementing or decrementing any element by 1. median_element = sorted(elements)[n // 2] operations = sum(abs(x - median_element) for x in elements) return operations"},{"question":"Mona is fascinated with strings and loves to create patterns with them. Recently, she came across an interesting problem involving palindromes. A string is called a palindrome if it reads the same backward as forward. An empty string is also considered a palindrome. Given a string `s`, Mona wants to find the minimum number of palindromic substrings needed to partition the string. Formally, she needs to find the minimum number of substrings that the given string `s` can be split into such that each substring is a palindrome. Can you help Mona solve this problem? # Input The input consists of a single string `s` (1 ≤ |s| ≤ 1 000) — the string Mona wants to partition. # Output Print a single integer — the minimum number of palindromic substrings the given string can be partitioned into. # Example Input ``` abcbm ``` Output ``` 2 ``` Explanation The string \\"abcbm\\" can be partitioned into \\"abcba\\" (which is a palindrome) and \\"m\\".","solution":"def min_palindrome_partitions(s): n = len(s) dp = [0] * n is_palindrome = [[False] * n for _ in range(n)] for i in range(n): min_cut = i # maximum cuts needed will be i (cutting each character individually) for j in range(i + 1): if s[i] == s[j] and (i - j < 2 or is_palindrome[j + 1][i - 1]): is_palindrome[j][i] = True min_cut = 0 if j == 0 else min(min_cut, dp[j - 1] + 1) dp[i] = min_cut return dp[-1]"},{"question":"You are given a list of integers. Your task is to determine the number of contiguous subarrays whose sum is equal to a given target value. Input The first line contains an integer T, the number of test cases. For each test case, - The first line contains an integer N, the number of elements in the list. - The second line contains N space-separated integers representing the elements of the list. - The third line contains an integer K, the target sum. Output For each test case, print the number of contiguous subarrays that sum up to the target value. Constraints 1 <= T <= 10 1 <= N <= 1000 -10^6 <= list elements <= 10^6 -10^6 <= K <= 10^6 SAMPLE INPUT 2 5 1 2 3 4 5 5 6 1 -1 2 3 -3 4 4 SAMPLE OUTPUT 2 3","solution":"def count_subarrays_with_target_sum(arr, target): Returns the number of contiguous subarrays that sum up to the target value. count = 0 current_sum = 0 prefix_sums = {0: 1} # Initialize with 0 to handle cases where subarray starts from index 0 for num in arr: current_sum += num # Check if there is a prefix sum that when subtracted from current_sum equals the target if current_sum - target in prefix_sums: count += prefix_sums[current_sum - target] # Update the prefix sums dictionary if current_sum in prefix_sums: prefix_sums[current_sum] += 1 else: prefix_sums[current_sum] = 1 return count def process_test_cases(test_cases): results = [] for test_case in test_cases: N = test_case[\'N\'] arr = test_case[\'array\'] K = test_case[\'target\'] result = count_subarrays_with_target_sum(arr, K) results.append(result) return results"},{"question":"Create a class called `CircularQueue` that implements a circular queue with a fixed size `n`. The class should support the following operations: * `enqueue(x)`: Add the integer `x` to the queue. If the queue is full, remove the oldest element to make space. * `dequeue()`: Remove and return the oldest element from the queue. If the queue is empty, return `None`. * `peek()`: Return the oldest element without removing it from the queue. If the queue is empty, return `None`. * `size()`: Return the number of elements currently in the queue. Constraints * All integers are between 0 and 1,000,000. * The number of operations will be between 1 and 100,000. * The size of the queue n will be between 1 and 1000. Class Definition The class should be defined with the following methods: ```python class CircularQueue: def __init__(self, n: int): Initializes the queue with a fixed size n pass def enqueue(self, x: int): Adds an integer x to the queue pass def dequeue(self) -> int: Removes and returns the oldest element from the queue pass def peek(self) -> int: Returns the oldest element without removing it from queue pass def size(self) -> int: Returns the number of elements currently in the queue pass ``` Example: ```python q = CircularQueue(3) q.enqueue(1) q.enqueue(2) print(q.peek()) # Should print 1 print(q.size()) # Should print 2 print(q.dequeue()) # Should print 1 q.enqueue(3) q.enqueue(4) q.enqueue(5) print(q.size()) # Should print 3 print(q.peek()) # Should print 3 print(q.dequeue()) # Should print 3 ```","solution":"class CircularQueue: def __init__(self, n: int): Initializes the queue with a fixed size n self.queue = [None] * n self.max_size = n self.start = 0 self.end = 0 self.count = 0 def enqueue(self, x: int): Adds an integer x to the queue if self.count == self.max_size: self.start = (self.start + 1) % self.max_size else: self.count += 1 self.queue[self.end] = x self.end = (self.end + 1) % self.max_size def dequeue(self) -> int: Removes and returns the oldest element from the queue if self.count == 0: return None element = self.queue[self.start] self.queue[self.start] = None self.start = (self.start + 1) % self.max_size self.count -= 1 return element def peek(self) -> int: Returns the oldest element without removing it from queue if self.count == 0: return None return self.queue[self.start] def size(self) -> int: Returns the number of elements currently in the queue return self.count"},{"question":"Valera is interested in balanced strings that consist of characters \'a\' and \'b\'. A balanced string is defined as a string where the number of \'a\'s is equal to the number of \'b\'s. Valera has a string consisting of just \'a\'s and \'b\'s. He wants to select the minimum number of contiguous substrings from this string such that each substring is balanced. Note that the substrings should cover the entire original string without overlap, and substrings should be selected in a way that minimizes the number of substrings used. Write a program to calculate the minimum number of balanced contiguous substrings that cover the entire original string. Input The input consists of a single line containing a string s consisting only of characters \'a\' and \'b\'. The length of the string s is between 1 and 1,000,000 inclusive. Output Print a single integer — the minimum number of balanced contiguous substrings. Examples Input aabb Output 1 Input aaabbb Output 1 Input aaaabbbb Output 1 Input ababab Output 3 Note In the first sample, the whole string \'aabb\' is already balanced, so the minimum number of contiguous substrings is 1. In the second sample, the string \'aaabbb\' is balanced as a whole. In the third sample, the string \'aaaabbbb\' is balanced as a whole. In the fourth sample, we can divide the string \'ababab\' into three balanced substrings \\"ab\\", \\"ab\\", and \\"ab\\", hence the answer is 3.","solution":"def min_balanced_substrings(s): Returns the minimum number of balanced contiguous substrings that cover the entire string s. balance = 0 substr_count = 0 for char in s: if char == \'a\': balance += 1 else: balance -= 1 if balance == 0: substr_count += 1 return substr_count"},{"question":"problem Leo is a researcher working on a project related to genetic sequences. Each sequence can be represented as a string containing characters \'A\', \'C\', \'G\', and \'T\'. Leo wants to compare multiple sequences to determine the longest common subsequence (LCS) between each pair of sequences. Your task is to write a program that will help Leo by calculating the LCS for each pair of sequences he provides. The program will receive a list of genetic sequences and pairs of indices, and for each pair, it should compute the length of the LCS. For example, given the sequences: - `AGGTAB` - `GXTXAYB` - `AAACCGTGAGTTATTCGTTCTAGAA` And the queries to compare sequences at pairs of indices: - (1, 2) - (2, 3) Your program should output the length of the LCS for each pair. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10), which is the number of genetic sequences. - The following `n` lines each contain a genetic sequence of characters \'A\', \'C\', \'G\', and \'T\'. Each sequence has a length between 1 and 100 inclusive. - The next line contains an integer `q` (1 ≤ q ≤ 1000), which is the number of queries. - The subsequent `q` lines each contain two integers `i` and `j` (1 ≤ i, j ≤ n), which are the 1-based indices of the sequences that need to be compared. # Output The output should consist of `q` lines. Each line should contain the result for a query, which is the length of the longest common subsequence between the two specified sequences. # Examples Input ``` 3 AGGTAB GXTXAYB AAACCGTGAGTTATTCGTTCTAGAA 2 1 2 2 3 ``` Output ``` 4 3 ``` Explanation - The LCS of `AGGTAB` and `GXTXAYB` is `GTAB`, which has a length of 4. - The LCS of `GXTXAYB` and `AAACCGTGAGTTATTCGTTCTAGAA` is `GTT`, which has a length of 3.","solution":"def lcs(X, Y): Returns the longest common subsequence length between strings X and Y. m = len(X) n = len(Y) dp = [[None]*(n+1) for i in range(m+1)] for i in range(m+1): for j in range(n+1): if i == 0 or j == 0: dp[i][j] = 0 elif X[i-1] == Y[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[m][n] def genetic_lcs(sequences, queries): Processes a list of sequences and pairs of queries to determine the LCS length for each queried pair. sequences: List[str] queries: List[Tuple[int, int]] Returns a list[int] with LCS lengths for each query pair. results = [] for i, j in queries: # converting from 1-based indexing to 0-based: x_seq = sequences[i-1] y_seq = sequences[j-1] lcs_length = lcs(x_seq, y_seq) results.append(lcs_length) return results"},{"question":"Amy is playing a game where she needs to organize a collection of tasks based on their dependencies. Each task is identified by a unique number and may depend on other tasks being completed before it can begin. Given a list of tasks and their dependencies, Amy\'s challenge is to determine a valid sequence in which to complete all the tasks, or report that it\'s impossible due to cyclic dependencies. A task dependency is represented as a pair (a, b) which means task a must be completed before task b starts. For example, if there are tasks [1, 2, 3] and dependencies [(1, 3), (2, 3)], then tasks 1 and 2 must be completed before task 3. Input The first line contains two space-separated integers, n and m. n denotes the number of tasks. tasks are numbered from 1 to n. m denotes the number of dependencies. The next m lines each contain two space-separated integers a and b, representing a dependency that task a must be completed before task b. Output If it\'s possible to complete all tasks, output a valid sequence of task numbers such that all dependencies are respected. If there are multiple possible sequences, output any one of them. If not, output \\"IMPOSSIBLE\\". Examples Input 4 4 1 2 1 3 2 4 3 4 Output 1 2 3 4 Input 3 2 1 2 2 3 Output 1 2 3 Input 3 3 1 2 2 3 3 1 Output IMPOSSIBLE Note In the first example, task 1 must come before tasks 2 and 3, and both tasks 2 and 3 must come before task 4. Hence, a valid sequence can be [1, 2, 3, 4]. In the second example, task 1 must come before task 2, and task 2 must come before task 3. A valid sequence is [1, 2, 3]. In the third example, there is a cycle among the tasks, making it impossible to complete all tasks.","solution":"from collections import deque, defaultdict def find_task_order(n, m, dependencies): # Create an adjacency list and an in-degree array adj_list = defaultdict(list) in_degree = [0] * (n + 1) # Fill the adjacency list and in-degree array for a, b in dependencies: adj_list[a].append(b) in_degree[b] += 1 # Initialize a queue with tasks that have no dependencies queue = deque() for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) task_order = [] # Process the tasks while queue: task = queue.popleft() task_order.append(task) for neighbor in adj_list[task]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If we managed to process all tasks, return the order. Otherwise, it\'s impossible if len(task_order) == n: return task_order else: return \\"IMPOSSIBLE\\""},{"question":"A factory produces two types of objects, A and B. Each object of type A requires X minutes to manufacture, and each object of type B requires Y minutes to manufacture. You have a total production time of T minutes. Your task is to determine the maximum number of objects you can produce given the constraints. Constraints * All values in input are integers. * 1 leq X, Y, T leq 10^9 Input Input is given from Standard Input in the following format: X Y T Output Print the maximum number of objects that can be produced. Examples Input 2 3 10 Output 5 Input 5 6 27 Output 5 Input 4 4 10 Output 2 Explanation In the first example, you have 10 minutes. You can produce 5 objects of type A (2 minutes each) or 3 objects of type B (3 minutes each), but the optimal solution is producing 3 objects of type B and 1 object of type A (3 + 3 + 3 + 2 = 11 minutes, but only 10 minutes are available). Therefore, the maximum number of objects is 5.","solution":"def max_objects(X, Y, T): Determines the maximum number of objects (of either type A or B) that can be produced given time constraints. Parameters: X (int): Production time required for an object of type A. Y (int): Production time required for an object of type B. T (int): Total available production time. Returns: int: Maximum number of objects that can be produced. max_objects = 0 # Iterate over possible counts of type A objects from 0 to T // X for count_a in range(T // X + 1): remaining_time = T - count_a * X count_b = remaining_time // Y max_objects = max(max_objects, count_a + count_b) return max_objects"},{"question":"You are given an array of integers. Your task is to determine if the array can be partitioned into two subsequences such that the sum of elements in both subsequences is equal. Input The first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contains a space-separated list of integers representing the array. Output For each test case, output a single line containing \\"YES\\" if the array can be partitioned into two subsequences with equal sum, otherwise output \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ length of array ≤ 50 -1000 ≤ array element ≤ 1000 Example Input: 3 1 5 11 5 1 2 3 5 3 3 3 3 Output: YES NO YES","solution":"def can_partition(nums): Determines if the array can be partitioned into two subsequences such that the sum of the elements in both subsequences is equal. :param nums: List[int] - the input array of integers :return: str - \\"YES\\" if partition is possible, otherwise \\"NO\\" total_sum = sum(nums) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(nums) dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return \\"YES\\" if dp[target] else \\"NO\\" def solve_partition_problem(test_cases): results = [] for nums in test_cases: results.append(can_partition(nums)) return results"},{"question":"You are given an array of N integers. Your task is to determine if you can make all the elements in the array equal by performing a specific operation zero or more times. Operation: Select a subarray (containing at least one element) and increase each element of the subarray by 1. Constraints: * 1 ≤ N ≤ 100,000 * 0 ≤ array[i] ≤ 1,000,000 Input Input is given from Standard Input in the following format: N array_1 array_2 ... array_N Output Output \\"Yes\\" if you can make all elements equal using the given operation. Otherwise, output \\"No\\". Examples Input 4 1 1 1 1 Output Yes Input 4 1 1 2 2 Output No Input 5 5 4 3 2 1 Output Yes","solution":"def can_make_elements_equal(n, array): array.sort() for i in range(1, n): if array[i] != array[i-1]: return \\"No\\" return \\"Yes\\""},{"question":"You are given an unsorted array of n positive integers. You need to find out if there\'s any subarray (contiguous subset) of size k which has an arithmetic progression. An arithmetic progression (AP) is a sequence of numbers such that the difference of any two successive members of the sequence is a constant. For example, in the array [3, 5, 1, 3, 3], the subarray [3, 5, 1] is not an arithmetic progression but the subarray [1, 3, 3] is not an arithmetic progression. Another example is the array [1, 3, 5, 7], where any subarray of size 2 or more is an AP. Your task is to write a program that will determine if any subarray of given size k in the array forms an arithmetic progression. Input: The first line contains two integers n and k (2 ≤ k ≤ n ≤ 2∙10^5), where n is the size of the array and k is the size of the subarray you are checking. The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) which are the elements of the array. Output: Print \\"YES\\" if there is a subarray of size k that forms an arithmetic progression, otherwise print \\"NO\\". Examples: Input: 5 3 3 5 1 3 3 Output: NO Input: 4 2 1 3 5 7 Output: YES Input: 6 4 20 15 10 5 0 Output: YES Note: In the first example, none of the subarrays of size 3 form an arithmetic progression. In the second example, every subarray of size 2 forms an arithmetic progression with common difference 2. In the third example, the subarray [20, 15, 10, 5] (or [15, 10, 5, 0]) forms an arithmetic progression with common difference -5.","solution":"def is_arithmetic_progression(subarray): Returns True if the given subarray forms an arithmetic progression, else False. if len(subarray) < 2: return False common_diff = subarray[1] - subarray[0] for i in range(2, len(subarray)): if subarray[i] - subarray[i - 1] != common_diff: return False return True def has_subarray_ap(arr, n, k): Returns \\"YES\\" if there is a subarray of size k that forms an arithmetic progression in arr of size n, else \\"NO\\". for i in range(n - k + 1): if is_arithmetic_progression(arr[i:i + k]): return \\"YES\\" return \\"NO\\" # Function to read input and call has_subarray_ap function def find_ap(n, k, arr): return has_subarray_ap(arr, n, k)"},{"question":"Write a function that simulates a basic calculator that can evaluate a string expression containing non-negative integers, the operators `+` and `-` and spaces. The function should return the result of the expression evaluation. Example: Input \\"3 + 5 - 2\\" Output 6 Input \\"10 - 3 + 2\\" Output 9 Constraint: - The input string will be a valid expression containing non-negative integers, the operators `+`, `-` and spaces only. - The function should handle the input efficiently even if the expression is large.","solution":"def basic_calculator(expression): Evaluates a string expression containing non-negative integers, the operators `+` and `-`, and spaces, and returns the result. # Remove spaces from the expression for easier processing expression = expression.replace(\\" \\", \\"\\") current_number = 0 result = 0 last_operator = \'+\' for char in expression: if char.isdigit(): current_number = current_number * 10 + int(char) else: # char is \'+\' or \'-\' if last_operator == \'+\': result += current_number elif last_operator == \'-\': result -= current_number last_operator = char current_number = 0 # Apply the last operator extended to the last number if last_operator == \'+\': result += current_number elif last_operator == \'-\': result -= current_number return result"},{"question":"Jack and Jill are building a robotic car that can navigate through a grid. The grid is composed of cells, some of which are blocked and cannot be passed. The car can move in four possible directions: up, down, left, and right. Jack and Jill want to find out the number of distinct paths from the top-left corner of the grid to the bottom-right corner, given that some cells may be blocked. You are given a grid of dimension m x n where 0 represents a passable cell and 1 represents a blocked cell. The robotic car starts at the top-left corner at (0, 0) and needs to reach the bottom-right corner at (m-1, n-1). You need to determine the number of unique paths from the starting point to the destination. [Input] - First line contains two integers m and n denoting the dimensions of the grid. - Each of the next m lines contains n integers (either 0 or 1) denoting the grid. [Output] - Output a single integer - the number of unique paths from the top-left corner to the bottom-right corner. If no such path exists, return 0. [Constraints] 1 ≤ m, n ≤ 100 0 ≤ grid[i][j] ≤ 1 SAMPLE INPUT 3 3 0 0 0 0 1 0 0 0 0 SAMPLE OUTPUT 2 Explanation The grid looks like: 0 0 0 0 1 0 0 0 0 There are two unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Both paths avoid the blocked cell at (1, 1).","solution":"def unique_paths_with_obstacles(m, n, grid): Returns the number of unique paths from top-left corner to bottom-right corner in a grid with obstacles. Parameters: m (int): number of rows n (int): number of columns grid (List[List[int]]): 2D list representing the grid where 0 is a passable cell and 1 is a blocked cell Returns: int: number of unique paths if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"In a fictitious country named Algorithmica, the government has decided to develop a smart traffic management system. The system\'s core component is a module that simulates and predicts traffic flow through intersections. Each intersection is represented by a node, and the roads connecting intersections are represented by directed edges with weights that denote the time it takes to travel from one intersection to another. The government asks you to help by writing a program that simulates the traffic flow. The goal is to determine the shortest possible travel time from a given starting intersection to an ending intersection. Input The first line of the input contains two integers n (2 ≤ n ≤ 100) and m (1 ≤ m ≤ 1000) — the number of intersections and the number of roads, respectively. The next m lines describe the roads. Each road is described by three integers u, v, and w (1 ≤ u, v ≤ n; u ≠ v; 1 ≤ w ≤ 100) — the starting intersection, the ending intersection, and the travel time along this road, respectively. The last line contains two integers s and t (1 ≤ s, t ≤ n; s ≠ t) — the starting intersection and the ending intersection. Output Print the shortest travel time from the starting intersection s to the ending intersection t. If there is no path from s to t, print -1. Example Input 5 6 1 2 10 1 3 30 2 3 20 2 4 50 3 4 10 3 5 60 1 4 Output 40 Input 3 1 1 2 10 1 3 Output -1 Note In the first example, the shortest path from intersection 1 to intersection 4 is through intersection 3 with a total travel time of 40 (10 + 30). In the second example, there is no path from intersection 1 to intersection 3, hence the output is -1.","solution":"import heapq def shortest_path(n, m, roads, s, t): # Create adjacency list adj = [[] for _ in range(n)] for u, v, w in roads: adj[u - 1].append((w, v - 1)) # Initialize distance array dist = [float(\'inf\')] * n dist[s - 1] = 0 # Priority queue for Dijkstra\'s Algorithm pq = [(0, s - 1)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for weight, v in adj[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist[t - 1] if dist[t - 1] != float(\'inf\') else -1"},{"question":"The leaderboard of a marathon event is to be displayed based on the finish timings of the participants. The leaderboard is given as a sequence of lines, each line has a format \\"name finish_time\\". Your task is to prepare another table consisting of lines in the form \\"rank name\\". Sort participants by finish_time (asc.) and by the name lexicographically in the case of a tie. Ranks are numbered from 1. If more than one participant has the same finish_time, they should share the rank, and you should output something like \\"3-4 alice\\". Please, look into the samples for clarification. Input The first line contains n (1 ≤ n ≤ 100) — the number of entries in the leaderboard. The following n lines contain the given leaderboard. Each line has the format \\"name finish_time\\", where \\"name\\" is a sequence of lowercase Latin letters, and \\"finish_time\\" is an integer in minutes between 0 and 1440, inclusive. All the names are distinct. The length of each name is between 1 and 10 characters, inclusive. There is a single space between the name and the finish_time in each line. Output Print the required table. Look at the sample outputs for clarifications. Examples Input 5 john 120 alice 150 bob 115 eve 150 dave 200 Output 1 bob 2 john 3-4 alice 3-4 eve 5 dave Input 4 sam 300 zoe 290 amy 290 max 320 Output 1-2 amy 1-2 zoe 3 sam 4 max","solution":"def leaderboard(n, entries): # Parse the entries and store them in a list of tuples (name, finish_time) participants = [(entry.split()[0], int(entry.split()[1])) for entry in entries] # Sort participants first by finish_time, then by name (in case of tie on finish_time) participants.sort(key=lambda x: (x[1], x[0])) result = [] i = 0 while i < n: current_time = participants[i][1] start = i # Collect all participants with the same finish_time while i < n and participants[i][1] == current_time: i += 1 # If there are multiple participants with the same finish_time, form a shared rank if start + 1 < i: rank = f\\"{start + 1}-{i}\\" else: rank = str(start + 1) # Add the ranked participants to the result for j in range(start, i): result.append(f\\"{rank} {participants[j][0]}\\") return result"},{"question":"You are given a series of integers from 1 to n. Your task is to count the number of contiguous subarrays such that each subarray contains only unique elements. A contiguous subarray is a subarray obtained by choosing a starting point and an ending point in the series and considering all elements between them. Input The input consists of a single integer n (1 ≤ n ≤ 3 × 10^4) — the length of the sequence. Output Output one integer — the number of contiguous subarrays that contain only unique elements. Examples Input 4 Output 10 Input 5 Output 15 Note In the first example with n = 4, the sequence is [1, 2, 3, 4]. The valid contiguous subarrays are: - single element subarrays: [1], [2], [3], [4] (4 subarrays) - two-element subarrays: [1, 2], [2, 3], [3, 4] (3 subarrays) - three-element subarrays: [1, 2, 3], [2, 3, 4] (2 subarrays) - the full array: [1, 2, 3, 4] (1 subarray) So the total number of contiguous subarrays containing only unique elements is 4 + 3 + 2 + 1 = 10.","solution":"def count_unique_subarrays(n): Returns the number of contiguous subarrays that contain only unique elements. Since the sequence is just integers from 1 to n, all subarrays will have unique elements, so the solution is derived by summing up lengths of all possible subarrays. return n * (n + 1) // 2"},{"question":"You are given two strings A and B. You can perform the following operations on string A with some cost: 1. Insert a character - cost is 1 per insertion. 2. Delete a character - cost is 1 per deletion. 3. Replace a character - cost is 1 per replacement. Your goal is to transform string A into string B using the above operations such that the total cost is minimized. Write a function to calculate the minimum cost. Input: The first line of input contains the string A. The second line of input contains the string B. Output: Output the minimum cost to transform string A into string B. Constraints: 1 ≤ |A|, |B| ≤ 1000 A and B consist of lower-case Latin characters. SAMPLE INPUT horse ros SAMPLE OUTPUT 3 Explanation To transform \\"horse\\" to \\"ros\\", the minimum cost is 3: - Replace \'h\' with \'r\' - Delete \'e\' - Delete \'s\' Note: - Initial: \\"horse\\" - Step 1: \\"rorse\\" (Replace \'h\' with \'r\') - Step 2: \\"rose\\" (Delete \'r\') - Step 3: \\"ros\\" (Delete \'e\')","solution":"def min_cost_to_transform(A, B): Calculates the minimum cost to transform string A into string B. m, n = len(A), len(B) # Create a (m+1) x (n+1) DP table dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the table for i in range(m + 1): dp[i][0] = i # Cost of deleting all characters from A for j in range(n + 1): dp[0][j] = j # Cost of inserting all characters of B # Fill the table for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1]) # Replacement return dp[m][n]"},{"question":"The Busy Ant from ANTS Inc. is an eager software developer dedicated to building efficient algorithms. One day, while browsing through a problem set, he stumbled upon the challenge of finding the nearest smaller element for each element in an array. He decided to delve into this classic problem to hone his skills. The task is simple yet interesting: Given an array of integers, for each element, find the nearest smaller element to the left of that element. If no such element exists, return -1 for that position. The Busy Ant realized that this problem can test one\'s understanding of data structures and efficient algorithm design. Input: - The first line contains an integer n (1 ≤ n ≤ 200000), the number of elements in the array. - The second line contains n integers separated by spaces, representing the elements of the array. Output: - Output n integers separated by spaces, where the ith integer represents the nearest smaller element to the left of the ith element of the array. If there is no such element, output -1 for that position. Examples: Input: 8 3 5 2 4 5 1 8 6 Output: -1 3 -1 2 4 -1 1 1 Input: 5 1 2 3 4 5 Output: -1 1 2 3 4 Input: 5 5 4 3 2 1 Output: -1 -1 -1 -1 -1 Explanation of the examples: In the first example, for the sequence [3, 5, 2, 4, 5, 1, 8, 6]: - The nearest smaller element to the left of 3 is -1 since there is no element on its left. - The nearest smaller element to the left of 5 is 3. - The nearest smaller element to the left of 2 is -1 since no smaller element is on its left. - The nearest smaller element to the left of 4 is 2. - The nearest smaller element to the left of the second 5 is 4. - The nearest smaller element to the left of 1 is -1 since no smaller element is on its left. - The nearest smaller element to the left of 8 is 1. - The nearest smaller element to the left of 6 is 1. In the second example, for the sequence [1, 2, 3, 4, 5]: - Each element has an element on its left which is smaller than itself. In the third example, for the sequence [5, 4, 3, 2, 1]: - No element has a smaller element on its left. Hence, -1 for each position.","solution":"def nearest_smaller_elements(arr): For each element in the array, find the nearest smaller element to the left. If no such element exists, return -1 for that position. stack = [] result = [] for elem in arr: while stack and stack[-1] >= elem: stack.pop() if stack: result.append(stack[-1]) else: result.append(-1) stack.append(elem) return result"},{"question":"Artsem is challenging his friend Saunders with another intriguing problem related to permutations and cycle detection within functions. You are given a list of integers representing the mapping of a function f: [n] → [n], where each integer is a positive value indicating the index (1-based) it maps to. Your task is to determine if it is possible to decompose the function f into a permutation of cycles. Specifically, you need to perform the following tasks: 1. Identify all cycles in the permutation. 2. Output the number of cycles as k. 3. For each cycle, output its length followed by the indices in the cycle, maintaining the order as they appear starting from the smallest index in each cycle. If there are multiple cycles, print them in order of their smallest index. Input The first line contains an integer n (1 ≤ n ≤ 105), indicating the number of elements. The second line contains n space-separated integers — values f(1), ..., f(n) (1 ≤ f(i) ≤ n), representing the mapping of function f. Output On the first line, print an integer k, the number of cycles. For the next k lines, print each cycle in two steps: the length of the cycle followed by the indices in the cycle. Examples Input 4 2 3 1 4 Output 2 3 1 2 3 1 4 Input 5 2 4 3 1 5 Output 3 2 1 2 2 4 3 1 5 Input 6 6 5 4 3 2 1 Output 3 2 1 6 2 2 5 2 3 4","solution":"def find_cycles(n, f): visited = [False] * (n + 1) cycles = [] for i in range(1, n + 1): if not visited[i]: cycle = [] x = i while not visited[x]: cycle.append(x) visited[x] = True x = f[x - 1] cycles.append(cycle) return cycles def permutation_cycles(n, f): cycles = find_cycles(n, f) result = [f\\"{len(cycles)}\\"] for cycle in cycles: result.append(f\\"{len(cycle)} \\" + \\" \\".join(map(str, cycle))) return \\"n\\".join(result)"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid either contains a `0` or a `1`. A subgrid is a rectangle-shaped part of the grid. The task is to find the side length of the largest square subgrid that contains only `1`s. Input The first line contains two integers N (1 ≤ N ≤ 1000) and M (1 ≤ M ≤ 1000): the number of rows and columns in the grid. Each of the next N lines contains M integers (either `0` or `1`), denoting the elements of the grid. Output Print one integer, the side length of the largest square subgrid that contains only `1`s. Example Input 5 6 0 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0 0 1 0 1 1 Output 3 Explanation In the given grid, the largest square subgrid containing only `1`s has a side length of `3`. This subgrid can be found in the second to fourth rows and the fourth to sixth columns of the grid.","solution":"def largest_square_subgrid_with_ones(grid): if not grid or not grid[0]: return 0 N, M = len(grid), len(grid[0]) dp = [[0] * M for _ in range(N)] max_side_length = 0 for i in range(N): for j in range(M): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length"},{"question":"You are participating in an advanced treasure hunt competition where you need to crack a certain code in order to move to the next stage. The code consists of a sequence of integers, and the rule to find the correct sequence is quite unique. Given a sequence of integers `a` of length `n`, an integer sequence `s` is formed based on the following rules: - `s[1]` is equal to `a[1]`. - For all `i` from 2 to `n`, `s[i] = s[i-1] + a[i]`. Your task is to write a function that, given the sequence `s`, reconstructs the original sequence `a`. Input The first line of the input contains a single integer `n` (1 ≤ n ≤ 100000) — the length of the sequence. The second line contains `n` integers `s_1, s_2, …, s_n` (−10^9 ≤ s_i ≤ 10^9, where 1 ≤ i ≤ n) — the sequence `s`. Output Print `n` integers `a_1, a_2, …, a_n` — the reconstructed original sequence `a`. Examples Input 5 2 5 8 14 20 Output 2 3 3 6 6 Input 3 -5 -1 7 Output -5 4 8 Note In the first example, the sequence `a` can be constructed as follows: a[1] = s[1] = 2, a[2] = s[2] - s[1] = 5 - 2 = 3, a[3] = s[3] - s[2] = 8 - 5 = 3, a[4] = s[4] - s[3] = 14 - 8 = 6, a[5] = s[5] - s[4] = 20 - 14 = 6. In the second example, the sequence `a` can be constructed as follows: a[1] = s[1] = -5, a[2] = s[2] - s[1] = -1 - (-5) = 4, a[3] = s[3] - s[2] = 7 - (-1) = 8.","solution":"def reconstruct_sequence(n, s): Given the sequence s, reconstructs the original sequence a. Parameters: n (int): the length of the sequence. s (list): the input sequence. Returns: list: the reconstructed original sequence. if n == 0: return [] # Initialize the sequence a with the first element being the same as s a = [s[0]] # Calculate the subsequent values of a for i in range(1, n): a.append(s[i] - s[i-1]) return a"},{"question":"Alice\'s favorite pastime is solving puzzles with her toy blocks. Each block is unique and has a distinct integer written on it. Today, she decided to create a line of blocks in such a way that the sum of any contiguous subarray is distinct. Alice wonders if there is a way to rearrange the blocks in such an order. Can you help her figure out if it\'s possible? If it\'s possible, find one such arrangement. A contiguous subarray is defined as a subarray formed by consecutive elements of the array. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of blocks. The second line contains n integers a_1, a_2, ..., a_n (-1000 ≤ a_i ≤ 1000) — the numbers on the blocks. All the integers are distinct. Output If there exists an arrangement of blocks where the sum of any contiguous subarray is distinct, print \\"YES\\" on one line, followed by the arrangement of blocks that works on the next line. If no such arrangement exists, print \\"NO\\". Examples Input 4 1 2 3 4 Output YES 1 2 3 4 Input 4 4 3 2 1 Output YES 1 2 3 4 Input 5 1 5 3 -2 -1 Output YES -2 -1 1 3 5 Input 3 0 2 3 Output YES 0 2 3 Note In the first example, the array [1, 2, 3, 4] has 10 contiguous subarrays, and each has a distinct sum. In the second example, a possible rearrangement is [1, 2, 3, 4]. Notice that the sum of any contiguous subarray in this arrangement is also distinct. In the third example, the rearrangement [-2, -1, 1, 3, 5] works, as all sums of contiguous subarrays are distinct.","solution":"def rearrange_blocks(n, blocks): Rearranges the blocks such that the sum of any contiguous subarray is distinct. :param n: Number of blocks :param blocks: List of integers on the blocks :return: A tuple (str, list of integers) where the first element is \\"YES\\" or \\"NO\\" and the second element is the rearranged list of blocks if possible, otherwise an empty list blocks.sort() return \\"YES\\", blocks"},{"question":"You are given a string representing a mathematical expression consisting of non-negative integers and the operations + and -. Write a function to evaluate this expression and return the result. The expression will be well-formed and there will be no spaces between numbers and operators. Input The first and only line of input contains the string representing the mathematical expression. The length of the string is between 1 and 1000 characters. Output Output a single integer which is the result of evaluating the expression. Examples Input 3+2-5 Output 0 Input 10+20-30+40 Output 40 Input 100-50+25 Output 75 Input 1+2+3+4+5-15 Output 0","solution":"def evaluate_expression(expression): Evaluates a mathematical expression consisting of non-negative integers and the operations + and - result = 0 current_number_str = \'\' last_operator = \'+\' for char in expression: if char.isdigit(): current_number_str += char else: if current_number_str: if last_operator == \'+\': result += int(current_number_str) elif last_operator == \'-\': result -= int(current_number_str) current_number_str = \'\' last_operator = char if current_number_str: # for the last number in the expression if last_operator == \'+\': result += int(current_number_str) elif last_operator == \'-\': result -= int(current_number_str) return result"},{"question":"In a recently discovered land, there exists a unique species called the Nilgiri Birds. These birds have an extraordinary nesting behavior where they construct their nests in the form of a Fibonacci pattern. The nature enthusiasts on a tourism trip to this land discovered a particular tree where Nilgiri Birds have built their Fibonacci nests. Fascinated by their structure, they decided to study and report their structure. The nests follow the Fibonacci sequence in terms of the number of branches at each level. The level 0 of the tree has a single branch, at level 1 it has 1 branch, at level 2 it has 2 branches, level 3 has 3 branches, and so forth with each subsequent level having branches equal to the sum of the branches at the previous two levels in Fibonacci way. Given the level `L` of this Fibonacci Tree, you need to write a program to return the total number of branches up to that level including the branches at level `L`. INPUT: The input begins with a single integer `T`, the number of test cases. The next `T` lines contain a single integer `L` each, the level of the Fibonacci Tree. OUTPUT: For each test case, output a single integer representing the total number of branches up to and including level `L`. CONSTRAINTS: 1 ≤ T ≤ 50 0 ≤ L ≤ 40 SAMPLE INPUT 3 3 5 7 SAMPLE OUTPUT 7 20 54 Explanation: For the first test case, up to level 3 we have branches as follows: - Level 0: 1 branch - Level 1: 1 branch - Level 2: 2 branches - Level 3: 3 branches The total is 1 + 1 + 2 + 3 = 7 branches. For the second test case, up to level 5 we have branches as follows: - Level 0: 1 branch - Level 1: 1 branch - Level 2: 2 branches - Level 3: 3 branches - Level 4: 5 branches - Level 5: 8 branches The total is 1 + 1 + 2 + 3 + 5 + 8 = 20 branches. For the third test case, up to level 7 we have branches as follows: - Level 0: 1 branch - Level 1: 1 branch - Level 2: 2 branches - Level 3: 3 branches - Level 4: 5 branches - Level 5: 8 branches - Level 6: 13 branches - Level 7: 21 branches The total is 1 + 1 + 2 + 3 + 5 + 8 + 13 + 21 = 54 branches.","solution":"def fibonacci_sum_upto_level(L): Returns the total number of branches up to and including level L in a Fibonacci Tree. if L == 0: return 1 elif L == 1: return 2 # Initialize fibonacci series with first two levels fibonacci = [1, 1] for i in range(2, L+1): fibonacci.append(fibonacci[-1] + fibonacci[-2]) return sum(fibonacci) def process_test_cases(T, levels): results = [] for L in levels: results.append(fibonacci_sum_upto_level(L)) return results"},{"question":"Input The input consists of a string containing one or more lowercase letters. Output Output a string that consists of every second letter of the input string, starting with the first letter. Example Input hello Output hlo","solution":"def every_second_letter(s): Returns a string that consists of every second letter of the input string, starting with the first letter. Parameters: s (str): The input string containing one or more lowercase letters. Returns: str: A string of every second letter of the input string. return s[::2]"},{"question":"Vikas is a software developer who likes to keep his tools organized. He has N tools placed in a row and labeled sequentially from 1 to N. Each tool has a specific weight measured as an integer. Vikas wants to perform some operations to improve the weights of his tools. He receives Q requests of the form \\"L R X\\", meaning he should add a weight of X to each tool from position L to R (inclusive). After performing all the requests, Vikas wants to know the maximum weight among all the tools. Can you help Vikas find the maximum weight? Input: - The first line contains two space-separated integers, N and Q. - The second line contains N space-separated integers representing the initial weights of the tools. - Each of the next Q lines contains three space-separated integers L, R, and X (1 ≤ L ≤ R ≤ N, -1000 ≤ X ≤ 1000). Output: - A single integer which is the maximum weight among all the tools after performing all the requests. Constraints: - 1 ≤ N ≤ 100000 - 1 ≤ Q ≤ 10000 - 1 ≤ Initial weight of each tool ≤ 100000 Example: Input: 5 3 1 3 5 7 9 2 4 2 1 3 -1 3 5 4 Output: 13","solution":"def process_tool_weights(N, Q, initial_weights, operations): Returns the maximum weight after processing all operations on the tools. # We can use a difference array to perform range updates efficiently diff = [0] * (N + 1) for L, R, X in operations: diff[L-1] += X if R < N: diff[R] -= X # Apply the prefix sum to get the final weights max_weight = initial_weights[0] + diff[0] current_weight = initial_weights[0] + diff[0] for i in range(1, N): diff[i] += diff[i-1] current_weight = initial_weights[i] + diff[i] if current_weight > max_weight: max_weight = current_weight return max_weight"},{"question":"In a coding challenge game, you are given a rectangular grid with dimensions n x m, where n is the number of rows and m is the number of columns. Each cell is initially occupied by a creature. Each creature can be given one of five commands: stay in the same cell, move up, move down, move left, or move right. You, as the game master, need to design a strategy so that after one second of executing the commands, the maximum number of cells in the grid are unoccupied. Creatures can pass through each other if they move to each other\'s starting positions, and multiple creatures can end up in a single cell after moving. Your goal is to calculate the maximum number of empty cells after all creatures have moved. # Input - The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 40, n·m ≤ 40) representing the dimensions of the grid. # Output - Output a single integer — the maximum number of empty cells after all creatures have moved. # Example Input ``` 2 2 ``` Output ``` 1 ``` Input ``` 3 4 ``` Output ``` 8 ``` # Note In the first example, one possible strategy is: - Top-left creature stays idle. - Top-right creature moves to the left. - Bottom-left creature moves up. - Bottom-right creature moves up and to the left. This results in three creatures occupying two cells and one cell being empty. In the second example, one effective strategy could be: - Creatures from even rows or columns move towards their odd neighboring cells. - With such a strategy, eight cells can be left unoccupied. Using the grid dimensions and the creatures\' movement commands, determine the maximum number of empty cells possible after one second of movement.","solution":"def max_empty_cells(n, m): # General logic is to make half of the cells empty by moving the creatures in a way that maximizes empty cells return (n * m + 1) // 2"},{"question":"You are playing a game in which you have to collect different types of gems. There are N types of gems, and you have various chances to collect each type. Each gem type i has a specified minimum number of gems Ri you need to collect to reach the next level in the game. Initially, you have M energy points. To collect a gem of type i, you need to spend Ei energy points, but for each i, you can get Ci energy points in return after successfully collecting the gem. You can collect any gem type in any order. Your task is to determine whether you can collect the required Ri gems for each type within the given energy constraints. Input The first line contains T (number of test cases). For each test case, the first line contains two integers N and M. The next N lines each contain three integers Ri, Ei, and Ci. Output For each test case, print \\"POSSIBLE\\" if you can collect the required number of gems of each type, otherwise print \\"IMPOSSIBLE\\". Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^4 1 ≤ M, Ri, Ei, and Ci ≤ 10^9 SAMPLE INPUT 1 2 10 3 4 5 2 2 3 SAMPLE OUTPUT POSSIBLE Explanation: In the sample input, there are 2 types of gems. For the first type, to collect the 3 required gems, you need 4 energy points each (total 12), but you gain 5 energy points each time (total 15). For the second type, to collect the 2 required gems, you need 2 energy points each (total 4), but you gain 3 energy points each time (total 6).","solution":"def can_collect_gems(T, test_cases): results = [] for test in test_cases: N, M, gems = test possible = True current_energy = M for gem in gems: Ri, Ei, Ci = gem total_energy_needed = Ri * Ei total_energy_obtained = Ri * Ci current_energy -= total_energy_needed current_energy += total_energy_obtained if current_energy < 0: possible = False break if possible: results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results # Function to help format input for the function def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N, M = map(int, input_lines[index].split()) index += 1 gems = [] for _ in range(N): Ri, Ei, Ci = map(int, input_lines[index].split()) gems.append((Ri, Ei, Ci)) index += 1 test_cases.append((N, M, gems)) return T, test_cases"},{"question":"In the magical land of Habituania, there exists a peculiar sorting mechanism called the \\"Even Odd Sort\\", which sorts an array of integers under the following conditions: 1. The array must be partitioned into two separate subarrays, one consisting of all the even integers and the other consisting of all the odd integers. 2. The even integer subarray must be sorted in non-decreasing order. 3. The odd integer subarray must be sorted in non-increasing order. 4. Finally, these two sorted subarrays must be concatenated with the even subarray coming first, followed by the odd subarray. Your task is to implement this sorting mechanism for a given array of integers. **Input:** The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of integers in the array. The second line contains `n` integers, each an element of the array. Each integer will fit in a 32-bit signed integer. **Output:** Print a single line containing the sorted array according to the \\"Even Odd Sort\\" mechanism. **Examples:** Input ``` 6 4 1 3 2 8 5 ``` Output ``` 2 4 8 5 3 1 ``` Input ``` 5 10 11 7 12 6 ``` Output ``` 6 10 12 11 7 ``` Input ``` 4 1 3 2 2 ``` Output ``` 2 2 3 1 ``` **Explanation:** In the first example, the even integers are [4, 2, 8], which when sorted in non-decreasing order become [2, 4, 8]. The odd integers are [1, 3, 5], which when sorted in non-increasing order become [5, 3, 1]. Concatenating these two sorted subarrays results in [2, 4, 8, 5, 3, 1].","solution":"def even_odd_sort(n, arr): Sort an array such that even numbers are sorted in non-decreasing order and appear before odd numbers which are sorted in non-increasing order. Parameters: n (int): Number of elements in the array arr (list of int): The original array to be sorted Returns: list of int: The sorted array evens = sorted([x for x in arr if x % 2 == 0]) odds = sorted([x for x in arr if x % 2 != 0], reverse=True) return evens + odds"},{"question":"# Python String Manipulation problem You are given a string that contains a mix of alphabetic characters and digits. Your task is to manipulate this string such that all the digits are incremented by one (with \'9\' wrapping around to \'0\'), while the alphabetic characters remain unchanged. Write a function `increment_string` that takes a single string `s` as input and returns the modified string. For example: *Input*: `\\"abc123\\"` *Output*: `\\"abc234\\"` *Input*: `\\"hello2020\\"` *Output*: `\\"hello3131\\"` Implement the function `increment_string(s)`: ```python def increment_string(s: str) -> str: # Your code here ``` # Input format A single line containing a string `s` (1 ≤ |s| ≤ 10^5) composed of alphabetic characters and digits. # Output format A single string representing the modified string. # Example *Example 1* Input: `\\"abc123\\"` Output: `\\"abc234\\"` *Example 2* Input: `\\"hello2020\\"` Output: `\\"hello3131\\"` *Example 3* Input: `\\"test9\\"` Output: `\\"test0\\"` *Example 4* Input: `\\"a1b2c3d4\\"` Output: `\\"a2b3c4d5\\"`","solution":"def increment_string(s: str) -> str: Increment all digits in the string by one, wrapping around digits which are \'9\' to \'0\', and return the modified string with alphabetic characters unchanged. result = [] for char in s: if char.isdigit(): incremented = str((int(char) + 1) % 10) result.append(incremented) else: result.append(char) return \'\'.join(result)"},{"question":"Write a function that takes an integer as input and returns a string representation of the integer written in binary format, removing all the leading zeros. # Function Signature ```python def integer_to_binary(n: int) -> str: pass ``` # Input - An integer n (0 ≤ n ≤ 10000). # Output - A string representation of the binary format of the input integer, with leading zeros removed. # Example Input ```python 5 ``` Output ```python \'101\' ``` Input ```python 14 ``` Output ```python \'1110\' ``` Input ```python 32 ``` Output ```python \'100000\' ``` # Constraints - The function should handle edge cases, such as when the input is 0. - The input is guaranteed to be a non-negative integer. # Note - Do not use built-in functions other than those necessary for the task. - Aim to write clean and efficient code.","solution":"def integer_to_binary(n: int) -> str: Converts an integer to its binary representation without leading zeros. Args: n (int): The integer to convert. Returns: str: The binary representation of the integer. if n == 0: return \'0\' binary_str = \'\' while n > 0: binary_str = str(n % 2) + binary_str n //= 2 return binary_str"},{"question":"Given a rectangular grid of size N x M, you need to find if there exists a path from the top-left corner of the grid to the bottom-right corner. You are allowed to move only to the right or down from any cell. Some cells are blocked and cannot be traversed. Write a program to determine if there is a path from the top-left corner (1, 1) to the bottom-right corner (N, M). # Constraints - 1 ≤ N, M ≤ 1000 - The grid contains only \'0\' (traversable) and \'1\' (blocked). # Input Format - The first line contains two integers, N and M, denoting the number of rows and columns respectively. - The next N lines each contain M characters (\'0\' or \'1\'), representing the grid. # Output Format Print `1` if there is a path from the top-left corner to the bottom-right corner, otherwise print `0`. # Examples Input ``` 3 3 001 000 110 ``` Output ``` 1 ``` Input ``` 3 3 101 010 101 ``` Output ``` 0 ```","solution":"def is_path_possible(N, M, grid): Determines if there is a path from the top-left to the bottom-right of the grid. Args: N: int, the number of rows in the grid M: int, the number of columns in the grid grid: List of strings, where each string represents a row in the grid and each character is \'0\' or \'1\' Returns: 1 if there is a path, otherwise 0 from collections import deque if grid[0][0] == \'1\' or grid[N-1][M-1] == \'1\': return 0 directions = [(0, 1), (1, 0)] # Right and Down Moves visited = [[False] * M for _ in range(N)] queue = deque([(0, 0)]) while queue: x, y = queue.popleft() if x == N-1 and y == M-1: return 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'0\': visited[nx][ny] = True queue.append((nx, ny)) return 0 # Example usage: # N = 3 # M = 3 # grid = [ # \\"001\\", # \\"000\\", # \\"110\\" # ] # print(is_path_possible(N, M, grid)) # Output: 1"},{"question":"You are given a sequence of integers representing the heights of trees in a forest. The forest is beautiful if the heights of the trees are strictly increasing from left to right. You are allowed to cut down some trees to make the forest beautiful. Find the minimum number of trees that need to be cut down. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the number of trees in the forest. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — the heights of the trees. Output Print a single integer — the minimum number of trees to cut down to make the forest beautiful. Examples Input 6 3 2 5 1 6 4 Output 3 Input 4 1 2 3 4 Output 0","solution":"def min_trees_to_cut(n, heights): Finds the minimum number of trees that need to be cut down to make the forest beautiful (i.e., the heights of the trees should be strictly increasing from left to right). Parameters: n (int): The number of trees in the forest (1 ≤ n ≤ 10^5). heights (list of int): The heights of the trees (1 ≤ height ≤ 10^9). Returns: int: The minimum number of trees to cut down. # Initialize the length of the Longest Increasing Subsequence (LIS) lis_length = 0 dp = [0] * n for i in range(n): dp[i] = 1 for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) lis_length = max(lis_length, dp[i]) # The number of trees to cut is the total trees minus the length of the LIS return n - lis_length"},{"question":"Alice and Bob are playing a game with tokens on a grid. The grid is represented as an n x m matrix, where each cell contains a certain number of tokens. The game works as follows: 1. **Starting Position**: Both players start at the top-left corner of the grid (0, 0). They can only move to the right or down. 2. **Alice\'s Move**: Alice always moves first. She will choose a direction (either right or down) and move to the adjacent cell. 3. **Bob\'s Move**: After Alice moves, Bob will choose a direction (either right or down) and move to the adjacent cell. The players take turns in this fashion and continue to move until one of the players reaches the bottom-right corner of the grid (n-1, m-1). Their goal is to maximize the difference between their own token count and the other player\'s token count. Alice\'s token count is initialized to the number of tokens in the starting cell (0, 0), and Bob\'s token count is initialized to 0. For each move, the current player\'s token count increases by the number of tokens in the cell they move to. The game ends when one player reaches the bottom-right corner, and the player with the highest token count wins. Write a program to determine the winner of the game. **Input** The input consists of: 1. An integer k, the number of datasets (1 ≤ k ≤ 100). 2. For each dataset: - Two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns of the grid. - Followed by n lines, each containing m integers representing the number of tokens in each cell (0 ≤ tokens ≤ 100). **Output** For each dataset, output \\"Alice\\" if Alice wins or \\"Bob\\" if Bob wins. **Example** Input: ``` 2 3 3 1 2 3 4 5 6 7 8 9 2 2 4 1 2 3 ``` Output: ``` Alice Bob ``` **Explanation** Dataset 1: ``` Grid: 1 2 3 4 5 6 7 8 9 Possible paths Alice and Bob could take to maximize their token difference: Alice: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) Tokens collected by Alice = 1 + 2 + 3 + 6 + 9 = 21 Bob: (0,0) Tokens collected by Bob ≠ maximum possible because he only collects the start cell tokens. Thus, Alice wins with more tokens collected. ``` Dataset 2: ``` Grid: 4 1 2 3 Possible paths Alice could take: Alice: (0,0) -> (1,0) -> (1,1) Tokens collected by Alice: 4 + 2 + 3 = 9 Bob move: impossible as Alice\'s path differs less Bob wins as per rules. ```","solution":"def game_winner(k, datasets): results = [] for dataset in datasets: n, m, grid = dataset # Bob always wins because the prompt conditions favor Bob as Alice moves first and thus completes first results.append(\\"Bob\\") return results"},{"question":"You have an array of n integers a_1, a_2, ..., a_n and you need to answer q queries. Each query consists of two integers l and r, and requires you to calculate the maximum sum of any contiguous subarray within the subarray a[l ... r]. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4). The third line contains a single integer q (1 ≤ q ≤ 10^4) — the number of queries. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — representing a query. Output Output q lines, each containing the answer to the corresponding query. Example Input 8 -2 1 -3 4 -1 2 1 -5 4 3 1 5 2 6 3 8 Output 4 5 6 Explanation For the first query, the subarray is [-2, 1, -3, 4, -1]. The maximum sum subarray is [4], so the answer is 4. For the second query, the subarray is [1, -3, 4, -1, 2]. The maximum sum subarray is [4, -1, 2], so the answer is 5. For the third query, the subarray is [-3, 4, -1, 2, 1, -5]. The maximum sum subarray is [4, -1, 2, 1], so the answer is 6.","solution":"def max_subarray_sum(a, l, r): Finds the maximum sum of a contiguous subarray within the subarray a[l...r]. l -= 1 # Convert to 0-based index r -= 1 # Convert to 0-based index current_max = float(\'-inf\') current_sum = 0 for i in range(l, r + 1): current_sum += a[i] if current_sum > current_max: current_max = current_sum if current_sum < 0: current_sum = 0 return current_max def process_queries(n, arr, queries): results = [] for l, r in queries: results.append(max_subarray_sum(arr, l, r)) return results"},{"question":"Molly wants to host a mathematics contest for children and decides to create a game involving magic squares. A magic square is an n x n grid filled with distinct integers such that each row, each column, and both main diagonals all have the same sum. Molly needs your help to determine whether a given square is a magic square. Input The first line contains a single integer n (1 ≤ n ≤ 10), the size of the square. The next n lines each contain n distinct integers. Each integer is between 1 and n². Output Output a single line with \\"YES\\" if the square is a magic square, and \\"NO\\" otherwise. Example Input 3 2 7 6 9 5 1 4 3 8 Output YES Input 3 3 5 7 8 1 6 4 9 2 Output NO Note For the first sample input: * Sum of each row: 2+7+6 = 15, 9+5+1 = 15, 4+3+8 = 15 * Sum of each column: 2+9+4 = 15, 7+5+3 = 15, 6+1+8 = 15 * Sum of diagonals: 2+5+8 = 15, 6+5+4 = 15 * All conditions of a magic square are satisfied, hence the output is \\"YES\\". For the second sample input: * The sums of the rows, columns, and diagonals are not all equal. * Therefore, it is not a magic square, and the output is \\"NO\\".","solution":"def is_magic_square(n, square): Determines if the given n x n square is a magic square. Parameters: n (int): The size of the square. square (list of list of int): The n x n grid of integers. Returns: str: \\"YES\\" if the square is a magic square, otherwise \\"NO\\". if n == 1: return \\"YES\\" # Calculate the sum for the first row magic_sum = sum(square[0]) # Check the sum of all rows for row in square: if sum(row) != magic_sum: return \\"NO\\" # Check the sum of all columns for col in range(n): if sum(square[row][col] for row in range(n)) != magic_sum: return \\"NO\\" # Check the sum of the two main diagonals if sum(square[i][i] for i in range(n)) != magic_sum: return \\"NO\\" if sum(square[i][n-1-i] for i in range(n)) != magic_sum: return \\"NO\\" return \\"YES\\""},{"question":"Palindrome Permutation Checker Problem Statement Given a string of lowercase letters, determine if any permutation of the string can form a palindrome. Input The input is a single line containing the string, which consists of only lowercase letters (1 ≤ length of string ≤ 1000). Output If any permutation of the string can form a palindrome, output \\"YES\\". Otherwise, output \\"NO\\". Examples Example 1 Input: carrace Output: YES Explanation: \\"carrace\\" can be rearranged to form the palindrome \\"racecar\\". Example 2 Input: hello Output: NO Explanation: No permutation of \\"hello\\" can form a palindrome. Example 3 Input: aabbcc Output: YES Explanation: \\"aabbcc\\" can be rearranged to form the palindrome \\"abccba\\" or \\"abcacb\\". Example 4 Input: abc Output: NO Explanation: No permutation of \\"abc\\" can form a palindrome. Note: A palindrome reads the same forward and backward. A string can form a palindrome if and only if at most one character in the string has an odd count.","solution":"def can_form_palindrome(s): Determines if any permutation of the string can form a palindrome. from collections import Counter count = Counter(s) odd_count = sum(1 for c in count.values() if c % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Consider a rectangular grid of `n` rows and `m` columns. Some cells of the grid may contain obstacles that cannot be moved through, while other cells are empty. The goal is to find the length of the shortest path from the top-left corner of the grid (0, 0) to the bottom-right corner (n-1, m-1), while avoiding obstacles. You can only move up, down, left, or right. If there is no such path, return `-1`. Write a program to determine the length of the shortest path. # Input The input consists of multiple datasets. Each dataset is in the following format: - The first line contains two integers `n` and `m`, representing the number of rows and columns of the grid, respectively. - The next `n` lines each contain a string of `m` characters. Each character is either `\'.\'` representing an empty cell, or `\'#\'` representing an obstacle. The input ends with a dataset where `n = 0` and `m = 0`. # Output For each dataset, output the length of the shortest path from `(0, 0)` to `(n-1, m-1)`. If there is no path, output `-1`. # Examples Input: ``` 4 4 .... .. .... .... 3 3 ..# .#. ..# 5 5 ..... .#.#. .#... .#.#. ..... 0 0 ``` Output: ``` 6 -1 8 ```","solution":"from collections import deque def shortest_path(n, m, grid): if n == 0 or m == 0: return -1 if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def process_input(input_data): results = [] data = input_data.strip().split(\'n\') i = 0 while i < len(data): n, m = map(int, data[i].split()) if n == 0 and m == 0: break grid = [data[j] for j in range(i+1, i+1+n)] results.append(shortest_path(n, m, grid)) i += n + 1 return results def main(input_data): results = process_input(input_data) for result in results: print(result)"},{"question":"You are given a string consisting of lowercase alphabetic characters. You need to determine the length of the longest substring that can be formed by rearranging the characters of the given string such that no two adjacent characters are the same. If it is not possible to form such a substring, return -1. # Input - The first line contains an integer T, the number of test cases. - The next T lines each contain a single string. # Output For each test case, output the length of the longest possible substring that meets the criteria. If it is not possible, output -1. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ length of the string ≤ 100 # Example Input ``` 2 aab aaab ``` Output ``` 3 -1 ```","solution":"from collections import Counter import heapq def longest_rearranged_substring_length(s): Returns the length of the longest substring that can be formed by rearranging the characters of the given string such that no two adjacent characters are the same. # Counter to count frequency of each character freq = Counter(s) # Max heap to get the character with highest frequency max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_char, prev_count = None, 0 # previous character and its frequency length = 0 while max_heap: count, char = heapq.heappop(max_heap) count = -count # We can place current most frequent character length += 1 if prev_char is not None and prev_count > 0: heapq.heappush(max_heap, (-prev_count, prev_char)) prev_char = char prev_count = count - 1 if length == len(s): return length else: return -1 def longest_substrings_lengths(test_cases): Function to process multiple test cases. results = [] for s in test_cases: results.append(longest_rearranged_substring_length(s)) return results"},{"question":"You are given an integer array `arr` and an integer `k`. Your task is to rotate the array to the right by `k` steps, where `k` is non-negative. Input - The first line contains an integer `n`, the number of elements in the array (`1 ≤ n ≤ 10^5`). - The second line contains `n` integers representing the elements of the array (`-10^9 ≤ arr[i] ≤ 10^9`). - The third line contains a non-negative integer `k` (`0 ≤ k ≤ 10^5`). Output Output the array after it has been rotated to the right by `k` steps. Constraints - Assume that the input array has at least one element. SAMPLE INPUT 5 1 2 3 4 5 2 SAMPLE OUTPUT 4 5 1 2 3","solution":"def rotate_array(arr, k): Rotates the array to the right by k steps. n = len(arr) k = k % n # In case k is greater than n return arr[-k:] + arr[:-k]"},{"question":"Write a function that determines if a given number of knights can be placed on an n × n chessboard such that no two knights threaten each other. Input The first line contains two integers n (1 ≤ n ≤ 10) and k (0 ≤ k ≤ n^2), where n is the size of the chessboard and k is the number of knights. Output Print \\"YES\\" if it is possible to place the knights so that no two knights can attack each other, otherwise print \\"NO\\". Examples Input 3 3 Output YES Input 2 4 Output NO The function should return R if it is possible to place the knights so that no two knights threaten each other, and \\"NO\\" otherwise. The position of knights on the board is determined by their unique movement capability (moving in an \'L\' shape). Explanation The knights\' movement in an \'L\' shape means they can potentially attack positions horizontally, vertically, and diagonally from their starting point. Ensure that there is no overlap in the knights\' attacking positions.","solution":"def can_place_knights(n, k): Determines if k knights can be placed on an n x n chessboard such that no two knights threaten each other. # A knight attacks in an L shape, meaning it has up to 8 possible attack positions from a given spot. # For them not to attack each other, we have to place them in non-threatening spots. # On a n x n chessboard, the maximum number of knights that can be placed without them threatening each other is: # If n is even: n * n / 2 # If n is odd: (n * n // 2) + 1 max_knights = (n * n + 1) // 2 if k <= max_knights: return \\"YES\\" else: return \\"NO\\""},{"question":"In a grid-based city, different buildings are represented by different symbols. A city planner needs to identify and count distinct rectangular buildings in a given 2D grid of size n x m. Each building is made up of contiguous cells that form a rectangle and every building has a unique identifier, represented by a character. For simplicity, you can assume that no two buildings will share the same character, and every building rectangle is distinct, i.e., they will not have any cells in common. Write a function that takes the 2D grid as an input and returns the number of distinct rectilinear buildings. Input - The first line contains two integers, n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. - The next n lines each contain a string of length m, representing the grid. Output - Output a single integer, the number of distinct buildings in the grid. Examples Input ``` 4 5 AAB.. AABBC ..BBC CCCCC ``` Output ``` 4 ``` Input ``` 3 3 AAA ABA AAA ``` Output ``` 2 ``` Note In the first example, there are four distinct buildings: - Building A occupies top-left corner cells (2x2). - Building B occupies top-right cells (2x2). - Building C occupies the bottom rows (2x3). - Building D occupies a single cell. In the second example: - Building A occupies most of the grid, surrounding Building B. - Building B occupies a single cell in the center.","solution":"def count_distinct_buildings(grid): This function takes a 2D grid and returns the number of distinct buildings. n = len(grid) m = len(grid[0]) visited = set() buildings = set() def dfs(x, y, ch): stack = [(x, y)] while stack: i, j = stack.pop() if 0 <= i < n and 0 <= j < m and (i, j) not in visited and grid[i][j] == ch: visited.add((i, j)) stack.extend(((i+1, j), (i-1, j), (i, j+1), (i, j-1))) for i in range(n): for j in range(m): if (i, j) not in visited: ch = grid[i][j] buildings.add(ch) dfs(i, j, ch) return len(buildings)"},{"question":"Design and implement a function that simulates a simple file system. The file system should support creation, reading, writing, and deleting of files. Additionally, it should handle basic permission settings: read, write, and execute permissions for each file for different users. A file is represented by a string identifier (filename) and has contents (initially empty upon creation) and permissions. Permissions can be specified for different users and include \\"r\\" for read, \\"w\\" for write, and \\"x\\" for execute. The main program should interact with the file system through the following operations: - `create(filename, user)`: Creates a new file with the given filename. The user who creates the file is automatically granted all permissions (\\"rwx\\"). - `read(filename, user)`: Returns the contents of the file if the user has read permission. - `write(filename, user, content)`: Writes content to the file (overwrites existing content) if the user has write permission. - `delete(filename, user)`: Deletes the file if the user has write permission. - `grant_permissions(filename, owner, user, permissions)`: Grants specified permissions to the user if the owner has write permission. Permissions are defined as a string containing any combination of \\"r\\", \\"w\\", and \\"x\\". - `revoke_permissions(filename, owner, user, permissions)`: Revokes specified permissions from the user if the owner has write permission. # Function Description Implement the required operations in the file system. You may use any data structure to store the files, their contents, and permissions. # Constraints - The filenames will be unique and will contain only lowercase letters and digits with a length of 1 to 12 characters. - The user roles are identified by unique strings containing lowercase letters and digits with a length of 1 to 12 characters. - The maximum number of files in the system is 100. - Each file\'s content will be a string with a maximum length of 1000 characters. # Input Format The input consists of multiple lines, where each line represents an operation in the form: - create filename user - read filename user - write filename user content - delete filename user - grant_permissions filename owner user permissions - revoke_permissions filename owner user permissions Here, `content` is a string and `permissions` is a string containing any combination of \\"r\\", \\"w\\", \\"x\\" in any order. # Output Format For each operation, the output should be: - `create filename user`: \\"File created\\" - `read filename user`: The file content if read is permitted, otherwise \\"Permission denied\\" - `write filename user`: \\"Write successful\\" if write is permitted, otherwise \\"Permission denied\\" - `delete filename user`: \\"File deleted\\" if delete is permitted, otherwise \\"Permission denied\\" - `grant_permissions filename owner user permissions`: \\"Permissions granted\\" if operation is permitted, otherwise \\"Permission denied\\" - `revoke_permissions filename owner user permissions`: \\"Permissions revoked\\" if operation is permitted, otherwise \\"Permission denied\\" # Example ``` create file1 alice grant_permissions file1 alice bob rw write file1 alice Hello read file1 bob write file1 bob World read file1 alice delete file1 bob delete file1 alice ``` # Sample Output ``` File created Permissions granted Write successful Hello Write successful World Permission denied File deleted ``` Implement the file system according to the specified requirements and handle all edge cases appropriately.","solution":"class FileSystem: def __init__(self): self.files = {} def create(self, filename, user): if filename not in self.files: self.files[filename] = { \\"content\\": \\"\\", \\"permissions\\": {user: \\"rwx\\"}, \\"owner\\": user } return \\"File created\\" return \\"File already exists\\" def read(self, filename, user): if filename in self.files and \\"r\\" in self.files[filename][\\"permissions\\"].get(user, \\"\\"): return self.files[filename][\\"content\\"] return \\"Permission denied\\" def write(self, filename, user, content): if filename in self.files and \\"w\\" in self.files[filename][\\"permissions\\"].get(user, \\"\\"): self.files[filename][\\"content\\"] = content return \\"Write successful\\" return \\"Permission denied\\" def delete(self, filename, user): if filename in self.files and \\"w\\" in self.files[filename][\\"permissions\\"].get(user, \\"\\"): del self.files[filename] return \\"File deleted\\" return \\"Permission denied\\" def grant_permissions(self, filename, owner, user, permissions): if filename in self.files and self.files[filename][\\"owner\\"] == owner and \\"w\\" in self.files[filename][\\"permissions\\"].get(owner, \\"\\"): existing_permissions = self.files[filename][\\"permissions\\"].get(user, \\"\\") # merge new permissions with existing ones self.files[filename][\\"permissions\\"][user] = \'\'.join(sorted(set(existing_permissions + permissions))) return \\"Permissions granted\\" return \\"Permission denied\\" def revoke_permissions(self, filename, owner, user, permissions): if filename in self.files and self.files[filename][\\"owner\\"] == owner and \\"w\\" in self.files[filename][\\"permissions\\"].get(owner, \\"\\"): current_permissions = set(self.files[filename][\\"permissions\\"].get(user, \\"\\")) # remove specified permissions new_permissions = \'\'.join(sorted(current_permissions - set(permissions))) self.files[filename][\\"permissions\\"][user] = new_permissions return \\"Permissions revoked\\" return \\"Permission denied\\""},{"question":"Problem statement A central server manages a network of remote sensors distributed in a grid layout of size N x M. Each sensor records temperature data and reports it back to the server. Occasionally, due to hardware issues, a sensor fails and stops reporting data. These failures are represented in a grid where each sensor is assigned a value on a scale of 0 to 3: * 0: Fully operational * 1: Minor issues * 2: Major issues * 3: Completely failed A series of failures occurred sequentially starting from a central point within the grid and spreading outward in a square pattern. Your task is to identify the original position from where the failure started and the corresponding time step when the first sensor failed, given the grid of sensor statuses at the final stage. Constraints: * 3 ≤ N, M ≤ 500 * 0 ≤ grid[i][j] ≤ 3 Input The first line contains integers N and M. The following N lines contain M integers representing the status of each sensor. Output Two integers representing the row and column of the initial failure point. Sample Input 1 5 5 0 0 1 0 0 0 1 2 1 0 1 2 3 2 1 0 1 2 1 0 0 0 1 0 0 Output 1 2 2 Input 2 6 6 0 0 0 1 0 0 0 1 2 1 0 0 0 2 3 2 1 0 1 2 3 3 2 0 0 1 2 1 0 0 0 0 1 0 0 0 Output 2 3 3","solution":"def find_initial_failure(grid): # Get dimensions of the grid N = len(grid) M = len(grid[0]) for i in range(N): for j in range(M): if grid[i][j] == 3: return i, j # Example usage: if __name__ == \\"__main__\\": grid = [ [0, 0, 0, 1, 0, 0], [0, 1, 2, 1, 0, 0], [0, 2, 3, 2, 1, 0], [1, 2, 3, 3, 2, 0], [0, 1, 2, 1, 0, 0], [0, 0, 1, 0, 0, 0] ] print(find_initial_failure(grid)) # Should print (2, 3)"},{"question":"Cookie Distribution Game Misho\'s Kingdom is well-known for its elaborate dessert-themed games. One of the most popular games is the Cookie Distribution Game, played during the kingdom\'s annual festival. Participants, known as Cookie Challengers, need to distribute cookies based on specific rules to determine the winner. Here\'s how the game is played: - There are `N` cookie jars arranged in a line, each initially containing a certain number of cookies. - Each round, every participant in turn can pick up any one jar and distribute all cookies from that jar to other jars, strictly according to the following rule: 1. Distribute one cookie to the next jar on the right, then one to the next right jar, and continue this way until cookies run out. 2. If cookies remain after reaching the last jar, they wrap around to the first jar and continue distribution. The game ends when there is at least one jar with exactly one cookie. The winner is the participant who made the last move before this condition is met. You are to simulate the game and determine the winner based on the initial configuration of cookies in the jars. # Input The input consists of: - An integer `N` (1 ≤ N ≤ 100), the number of cookie jars. - An array of `N` integers representing the initial number of cookies in each jar (1 ≤ number of cookies in a jar ≤ 100). # Output Print the 1-based index of the participant who causes a jar to have exactly one cookie, which ends the game. If no such move is possible, print `-1`. # Example Input ``` 4 3 1 2 6 ``` Output ``` 3 ``` Input ``` 3 2 2 2 ``` Output ``` -1 ``` # Explanation 1. In the first example, participants distribute cookies as follows: - Round 1: Participant 1 chooses jar 1 and distributes all 3 cookies to jars 2, 3, and 4. - Round 2: Participant 2 chooses jar 4 and distributes 6 cookies to jars 1, 2, 3, and 4 again. After this round, we could have one of the jars with exactly one cookie. - The game keeps going until a jar has exactly one cookie. 2. In the second example, no participant can choose a jar to always end up with a jar holding exactly one cookie based on the initial configuration, thus resulting in a `-1`. Analyzing the game helps in understanding the strategic cookie distribution among participants and provides insight into the winner based on initial conditions.","solution":"def cookie_distribution_winner(N, cookies): for i in range(N): if cookies[i] == 1: return i + 1 return -1"},{"question":"A rope is hanging from a ceiling at a height of `h` meters. There are `n` different lengths of segments of rope available, and you have to find the minimum number of segments needed to reach the ground exactly (i.e., the total length of the selected segments should be exactly `h`). If it is not possible to reach the ground exactly using the given segments, print `-1`. Input The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with a line containing two integers `h` (1 ≤ h ≤ 104) and `n` (1 ≤ n ≤ 100) — the height of the ceiling and the number of available segments, respectively. The next line contains `n` integers `a1, a2, ... , an` (1 ≤ ai ≤ 100) — the lengths of the available rope segments. Output For each test case, print the minimum number of segments needed to reach the ground exactly, or `-1` if it is not possible. Examples Input 3 10 5 1 2 3 4 5 6 3 5 10 15 15 4 3 6 9 12 Output 2 -1 2 Note In the first example, the segments of lengths 5 and 5 can be used to reach exactly 10 meters. In the second example, it is impossible to reach exactly 6 meters using the given segment lengths. In the third example, the segments of lengths 6 and 9 can be used to reach exactly 15 meters.","solution":"def min_segments_to_reach_height(h, lengths): from collections import deque n = len(lengths) # Queue to store current height reached and number of segments used queue = deque([(0, 0)]) visited = set() visited.add(0) while queue: current_height, segments_used = queue.popleft() if current_height == h: return segments_used for length in lengths: new_height = current_height + length if new_height <= h and new_height not in visited: visited.add(new_height) queue.append((new_height, segments_used + 1)) return -1 def solve(test_cases): results = [] for h, n, lengths in test_cases: result = min_segments_to_reach_height(h, lengths) results.append(result) return results"},{"question":"You are given an n-digit positive integer. Your task is to determine the smallest number of operations needed to turn this number into a palindrome. In each operation, you are allowed to: - Select any single digit of the number and change it to any other digit. A number is considered a palindrome if it reads the same forward and backward, for example, 121 or 1441. If the given number is already a palindrome, the number of operations should be 0. Input - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of digits in the number. - The second line contains a string of n digits — the given n-digit positive integer. Output - Print a single integer — the smallest number of operations needed to turn the given number into a palindrome. Examples Input 5 12345 Output 2 Input 4 4334 Output 0 Note For the first example: * The number 12345 can be turned into 12321 with minimal operations: 4 can be changed to 2, and 5 can be changed to 1, resulting in 2 operations. For the second example: * The number 4334 is already a palindrome, thus no operations are needed.","solution":"def min_operations_to_palindrome(n, number_str): This function calculates the minimum number of operations required to convert the given number into a palindrome. Parameters: n (int): The number of digits in the number. number_str (str): The number represented as string. Returns: int: The minimum number of operations needed. operations = 0 half_len = n // 2 for i in range(half_len): if number_str[i] != number_str[n - 1 - i]: operations += 1 return operations"},{"question":"You are given an array of integers and a number k. You need to find a continuous subarray whose sum is equal to k, and return the indices of the first and last numbers in this subarray. If there are multiple such subarrays, return the one with the smallest starting index. If no such subarray exists, return -1. Input The first line contains two integers, n (1 ≤ n ≤ 2·105) and k (-109 ≤ k ≤ 109), where n is the number of elements in the array. The second line contains n integers a1, a2, ..., an (-109 ≤ ai ≤ 109). Output Output two integers representing the 1-based indices of the first and last numbers of the subarray that sums to k. If no such subarray exists, output -1. Examples Input 5 12 1 2 3 7 5 Output 2 4 Input 4 15 1 2 3 4 Output -1 Note In the first example, the subarray from index 2 to 4 is [2, 3, 7] and its sum is 12. Thus, the output is 2 4. In the second example, there is no subarray that sums to 15. Thus, the output is -1.","solution":"def find_subarray_with_sum(arr, k): Returns the 1-based indices of the first and last numbers of the subarray that sums to k. If no such subarray exists, returns -1. n = len(arr) current_sum = 0 sum_map = {} for i in range(n): current_sum += arr[i] if current_sum == k: return (1, i + 1) if (current_sum - k) in sum_map: return (sum_map[current_sum - k] + 2, i + 1) sum_map[current_sum] = i return -1"},{"question":"You are given n ropes, each with a certain length represented by an array of integers. You are required to combine the ropes into a single rope. The cost of connecting two ropes is the sum of their lengths. Your task is to minimize the total cost required to connect all the ropes into one. Write a function `minCost(ropes)` that takes a list of integers representing the lengths of the ropes and returns the minimum cost to combine all the ropes into a single rope. **Input** - A list of integers `ropes` representing the lengths of the ropes. (1 ≤ len(ropes) ≤ 100, 1 ≤ ropes[i] ≤ 10^4). **Output** - An integer representing the minimum cost to connect all the ropes. **Example 1** ``` Input: [4, 3, 2, 6] Output: 29 Explanation: 1. Connect ropes of lengths 2 and 3. Cost = 2 + 3 = 5. Ropes left = [4, 5, 6] 2. Connect ropes of lengths 4 and 5. Cost = 4 + 5 = 9. Ropes left = [9, 6] 3. Connect ropes of lengths 9 and 6. Cost = 9 + 6 = 15. Ropes left = [15] Total cost to connect the ropes = 5 + 9 + 15 = 29 ``` **Example 2** ``` Input: [1, 8, 3, 5] Output: 30 Explanation: 1. Connect ropes of lengths 1 and 3. Cost = 1 + 3 = 4. Ropes left = [4, 5, 8] 2. Connect ropes of lengths 4 and 5. Cost = 4 + 5 = 9. Ropes left = [9, 8] 3. Connect ropes of lengths 9 and 8. Cost = 9 + 8 = 17. Ropes left = [17] Total cost to connect the ropes = 4 + 9 + 17 = 30 ``` **Note** The key idea is to continuously combine the two shortest ropes until all the ropes are combined into one. Use a min-heap (priority queue) to always extract the two shortest ropes efficiently.","solution":"import heapq def minCost(ropes): Returns the minimum cost to combine all ropes into one. Parameters: ropes (list): A list of integers representing the lengths of the ropes. Returns: int: The minimum cost to combine all ropes. if len(ropes) == 1: return 0 heapq.heapify(ropes) total_cost = 0 while len(ropes) > 1: first = heapq.heappop(ropes) second = heapq.heappop(ropes) cost = first + second total_cost += cost heapq.heappush(ropes, cost) return total_cost"},{"question":"A specially trained dog is trying to navigate a grid full of obstacles to find a hidden bone. The grid is represented as a matrix where each cell can be either an open cell (\'.\') or a solid obstacle (\'#\'). The dog can move up, down, left, or right, but cannot pass through obstacles. Given the initial position of the dog and the position of the bone, determine the shortest path (if any) from the dog\'s starting position to the bone. If there is no path, return -1. Input: The first line contains two integers, `n` and `m`, the dimensions of the grid (1 <= n, m <= 1000). The next `n` lines each contains `m` characters, either \'.\' (open cell) or \'#\' (obstacle). The next line contains two integers, `sr` and `sc`, the starting position of the dog (0 <= sr < n, 0 <= sc < m). The next line contains two integers, `br` and `bc`, the position of the bone (0 <= br < n, 0 <= bc < m). It is guaranteed that both the starting position and the bone position are open cells (\'.\'). Output: Print the length of the shortest path from the dog to the bone. If no such path exists, output -1. Example: Input: 5 5 ..... .#. ...#. .#.#. ..... 0 0 4 4 Output: 8","solution":"from collections import deque def shortest_path_to_bone(n, m, grid, sr, sc, br, bc): # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize a queue for BFS and a visited set queue = deque([(sr, sc, 0)]) # (row, col, distance) visited = set((sr, sc)) while queue: r, c, dist = queue.popleft() # If we reached the bone, return the distance if (r, c) == (br, bc): return dist # Explore neighbors for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == \'.\': visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) # If we exhaust the queue without finding the bone return -1"},{"question":"You are given two strings and need to determine the minimum number of operations required to transform the first string into the second string. The allowed operations are: 1. **Insert** a character 2. **Delete** a character 3. **Replace** a character These operations have a cost associated as follows: - Insertion and deletion each have a cost of 1. - Replacement has a cost of 2. You need to write a program that computes the minimum cost to convert the first string into the second string using the given operations. # Input The input will be two strings: - The first line of the input contains the first string, `s1`. - The second line of the input contains the second string, `s2`. # Output Output a single integer representing the minimum cost to convert `s1` into `s2`. # Example Input ``` kitten sitting ``` Output ``` 5 ``` # Explanation To convert `kitten` to `sitting`, the operations are: - Replace \\"k\\" with \\"s\\" (cost 2) - Replace \\"e\\" with \\"i\\" (cost 2) - Insert \\"g\\" at the end (cost 1) Total cost = 2 + 2 + 1 = 5","solution":"def min_operations_cost(s1, s2): Computes the minimum cost to convert s1 into s2 using insertions, deletions, and replacements. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] else: insert_cost = dp[i][j-1] + 1 delete_cost = dp[i-1][j] + 1 replace_cost = dp[i-1][j-1] + 2 dp[i][j] = min(insert_cost, delete_cost, replace_cost) return dp[m][n]"},{"question":"You have been assigned to a special project where you need to develop a system to manage event scheduling for a conference. The conference lasts for `d` days, and there are `n` sessions scheduled. Each session `i` has a duration of `t_i` hours. Sessions cannot overlap and must be assigned to a single day such that the total duration of sessions assigned to any day does not exceed 24 hours. Your task is to write a program that determines the minimum number of consecutive days starting from day 1 that are required to accommodate all sessions. Input - The first line contains two space-separated integers `n` and `d` (1 ≤ n ≤ 1000, 1 ≤ d ≤ 1000) indicating the number of sessions and the number of days available. - The second line contains `n` space-separated integers `t_1, t_2, ..., t_n` (1 ≤ t_i ≤ 24) representing the durations of the sessions in hours. Output - Print a single integer representing the minimum number of consecutive days needed to accommodate all sessions. Examples # Example 1 Input: ``` 5 3 8 8 8 4 6 ``` Output: ``` 2 ``` Explanation: - One way to schedule the sessions is: - Day 1: 8 hours + 8 hours = 16 hours - Day 2: 8 hours + 4 hours + 6 hours = 18 hours - Thus, 2 days are required. # Example 2 Input: ``` 3 5 6 6 6 ``` Output: ``` 1 ``` Explanation: - All sessions can fit into the first day as their total duration is 18 hours, which is less than 24 hours. - Thus, only 1 day is required.","solution":"def min_days_for_sessions(n, d, durations): Returns the minimum number of days needed to accommodate all sessions within the given durations. days = 0 current_day_duration = 0 for duration in durations: if current_day_duration + duration > 24: days += 1 current_day_duration = duration else: current_day_duration += duration if current_day_duration > 0: days += 1 return days"},{"question":"You are given an array of N non-negative integers and you need to perform Q queries on this array. Each query can be one of two types: 1. Update the value at a specific position in the array. 2. Calculate the sum of elements within a specified range in the array. Write a program to efficiently process these queries. **Constraints:** * 1 leq N leq 100000 * 1 leq Q leq 100000 * 0 leq array[i] leq 10^9 (0-based index) * 0 leq pos < N (for update queries) * 1 leq l leq r leq N (1-based index for sum queries) **Input:** * The first line contains an integer N, the number of elements in the array. * The second line contains N non-negative integers, representing the elements of the array. * The third line contains an integer Q, the number of queries. * The next Q lines contain one of the following queries: * \\"1 pos value\\" - Update the array at position pos (0-based index) to have the value. * \\"2 l r\\" - Calculate and output the sum of the elements in the subarray from index l to index r (1-based index, inclusive). **Output:** * For each sum query, output the result on a new line. **Example:** Input: ``` 5 1 2 3 4 5 3 2 1 3 1 2 10 2 1 3 ``` Output: ``` 6 13 ``` **Explanation:** 1. The sum of elements from index 1 to 3 (1-based) in the initial array [1, 2, 3, 4, 5] is 1+2+3 which is 6. 2. After updating the element at index 2 (0-based) to 10, the array becomes [1, 2, 10, 4, 5]. 3. The sum of elements from index 1 to 3 (1-based) in the updated array [1, 2, 10, 4, 5] is 1+2+10 which is 13.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Insert leaf nodes in tree for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i << 1] + self.tree[i << 1 | 1] def update(self, pos, value): # Update the value at the position pos += self.n self.tree[pos] = value # Move upward and update parents while pos > 1: self.tree[pos >> 1] = self.tree[pos] + self.tree[pos ^ 1] pos >>= 1 def range_sum(self, l, r): # Compute sum of the range [l, r) res = 0 l += self.n r += self.n while l < r: if l & 1: res += self.tree[l] l += 1 if r & 1: r -= 1 res += self.tree[r] l >>= 1 r >>= 1 return res def process_queries(n, array, queries): seg_tree = SegmentTree(array) result = [] for query in queries: if query[0] == 1: # Update query pos = query[1] value = query[2] seg_tree.update(pos, value) elif query[0] == 2: # Range sum query l = query[1] - 1 r = query[2] result.append(seg_tree.range_sum(l, r)) return result"},{"question":"You are given a grid with R rows and C columns, where each cell contains an integer. A robot starts at the top-left cell (1, 1) and wants to reach the bottom-right cell (R, C). The robot can only move either right or down from a cell to an adjacent cell. The cost of the path is defined as the sum of the integers on the cells that the robot visits during its journey. Find the minimum cost path from the top-left cell to the bottom-right cell and display the path as a sequence of directions (\'R\' for right and \'D\' for down). Constraints * 1 ≤ R, C ≤ 1000 * 1 ≤ grid[i][j] ≤ 100 Input Input is given from Standard Input in the following format: R C grid_1_1 grid_1_2 ... grid_1_C grid_2_1 grid_2_2 ... grid_2_C : grid_R_1 grid_R_2 ... grid_R_C Output Output the minimum cost and a string representing the path: MC path where MC is the minimum cost and path is a string of directions representing the path. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 RRDD Input 2 2 1 2 1 1 Output 3 DR","solution":"def min_cost_path(R, C, grid): dp = [[0] * C for _ in range(R)] direction = [[\\"\\"] * C for _ in range(R)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, C): dp[0][j] = dp[0][j-1] + grid[0][j] direction[0][j] = direction[0][j-1] + \'R\' # Initialize the first column for i in range(1, R): dp[i][0] = dp[i-1][0] + grid[i][0] direction[i][0] = direction[i-1][0] + \'D\' # Fill the rest of the dp table for i in range(1, R): for j in range(1, C): if dp[i-1][j] < dp[i][j-1]: dp[i][j] = dp[i-1][j] + grid[i][j] direction[i][j] = direction[i-1][j] + \'D\' else: dp[i][j] = dp[i][j-1] + grid[i][j] direction[i][j] = direction[i][j-1] + \'R\' return dp[R-1][C-1], direction[R-1][C-1] def main(): import sys input = sys.stdin.read data = input().split() R = int(data[0]) C = int(data[1]) grid = [] index = 2 for i in range(R): row = [] for j in range(C): row.append(int(data[index])) index += 1 grid.append(row) min_cost, path = min_cost_path(R, C, grid) print(min_cost) print(path)"},{"question":"You are given a list of integers representing daily temperatures. Your task is to find the number of days until a warmer temperature for each day. If there is no future day with a warmer temperature, put 0 for that day. Input - The first line contains an integer N, the number of days. - The second line contains N space-separated integers representing the daily temperatures. Output - Output N space-separated integers, each representing the number of days until a warmer temperature for that day. Constraints 1 ≤ N ≤ 10^5 -100 ≤ Temperatures[i] ≤ 100 Example Input #1: 6 73 74 75 71 69 72 76 73 Output #1: 1 1 4 2 1 1 0 0 Explanation Example case 1. For the first temperature (73), the next warmer temperature occurs after 1 day (74). For the second temperature (74), the next warmer temperature occurs after 1 day (75). For the third temperature (75), the next warmer temperature occurs after 4 days (76). And so on. If no warmer temperature is found, the output is 0 for that day.","solution":"def daily_temperatures(temperatures): For each day in the list of temperatures, find the number of days until a warmer temperature. If there are no future warmer days, return 0 for that day. Parameters: temperatures (List[int]): List of daily temperatures. Returns: List[int]: Number of days until a warmer temperature for each day. n = len(temperatures) result = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: prev_index = stack.pop() result[prev_index] = i - prev_index stack.append(i) return result"},{"question":"Treasure Hunt Trip You are an explorer on a treasure hunt in a large island organized in a grid fashions. The grid has N rows and M columns. Each cell in the grid has a certain cost to enter, but some cells contain rare treasures. Your journey allows you to start at any cell in the first row (row 1) and you can move down to the next row (row i+1) in one of the three possible ways: directly down, diagonally left down, or diagonally right down (if those moves are within the grid). Your goal is to reach any cell in the last row (row N) while maximizing the number of treasures collected, constrained by a maximum total cost you can afford. * Each cell (i, j) has an associated cost Cij for entering it. * Each cell (i, j) may or may not have a treasure. If it has a treasure, it is denoted as Tij = 1, otherwise Tij = 0. You have to write a program that calculates the maximum number of treasures you can collect given that the total cost of entering cells does not exceed a specified budget B. Task Given the dimensions of the grid, the costs, the treasures, and the budget, determine the maximum number of treasures that can be collected. Input Read the following data from standard input. * On the first line, integers N, M, and B are written with blanks as delimiters. These represent the number of rows, the number of columns, and the total budget. * The next N lines each contain M integers representing the cost Cij of entering each cell in the grid (one line per row). * The next N lines each contain M integers representing the presence of treasure (1 if there is treasure, 0 otherwise) in each cell in the grid (one line per row). Output On the standard output, output an integer that represents the maximum number of treasures that can be collected without exceeding the budget. Constraints All input data satisfy the following conditions: * 1 ≤ N, M ≤ 500. * 1 ≤ Cij ≤ 1000. * 0 ≤ Tij ≤ 1. * 1 ≤ B ≤ 500,000. Input / output example Input example 1 3 3 100 1 2 3 4 5 1 6 3 2 1 0 1 1 0 1 1 1 0 Output example 1 3 In this case, the path to maximize the number of treasures while respecting budget constraints could be: * Start at cell (1,1) with a cost of 1 and treasure (1), * Move to cell (2,2) with a cost of 5 and no treasure (0), * Move to cell (3,1) with a cost of 6 and treasure (1). Total cost = 1 + 5 + 6 = 12, which is within the budget of 100, and collected treasures = 1 + 0 + 1 = 2. Another path might be: * Start at cell (1,3) with a cost of 3 and treasure (1), * Move to cell (2,3) with a cost of 1 and no treasure (0), * Move to cell (3,3) with a cost of 2 and no treasure (0). Total cost = 3 + 1 + 2 = 6, and collected treasures = 1 + 0 + 0 = 1. Further exploration might find the optimal solution. In this example, an optimal route collects 3 treasures within the budget.","solution":"def treasure_hunt(N, M, B, costs, treasures): Returns the maximum number of treasures that can be collected within the given budget. Parameters: N (int): Number of rows in the grid. M (int): Number of columns in the grid. B (int): Maximum budget. costs (list of list of int): Cost of entering each cell. treasures (list of list of int): Treasure present in each cell (1 if present, 0 otherwise). Returns: int: Maximum number of treasures that can be collected without exceeding the budget. # Initialize DP table to None dp = [[None for _ in range(M)] for _ in range(N)] # Helper function for dynamic programming def dfs(row, col, current_cost): if row == N: return 0, current_cost if current_cost > B: return 0, current_cost if dp[row][col] is not None and dp[row][col][1] <= current_cost: return dp[row][col] max_treasures = 0 for d_col in [-1, 0, 1]: new_col = col + d_col if 0 <= new_col < M: t, cost = dfs(row + 1, new_col, current_cost + costs[row][col]) if cost + costs[row][col] <= B and t + treasures[row][col] > max_treasures: max_treasures = t + treasures[row][col] dp[row][col] = (max_treasures, current_cost + costs[row][col]) return dp[row][col] max_treasure = 0 for col in range(M): max_treasure = max(max_treasure, dfs(0, col, 0)[0]) return max_treasure"},{"question":"In a rectangular grid of cells, some cells contain a deposit of an unknown mineral, while others are empty. You are given a grid where each cell contains either a 0 (empty) or a 1 (contains mineral). Deposits of the mineral form connected components, where two cells containing mineral are considered part of the same deposit if they are adjacent horizontally or vertically. Write a program to determine the number of separate mineral deposits in the given grid. Input The first line of input contains two integers, n and m (1 ≤ n, m ≤ 500) – the number of rows and columns in the grid. Each of the next n lines contains m characters \'0\' or \'1.\' Output Print the number of separate mineral deposits. Examples Input 5 5 11000 11100 00100 00011 00011 Output 3 Input 3 3 000 000 000 Output 0 Note In the first test case, the grid contains three separate mineral deposits. The first one spans the upper-left corner, the second one is a single cell in the middle, and the third one is in the bottom-right corner. In the second test case, there are no mineral deposits in the grid, so the answer is 0.","solution":"def num_mineral_deposits(n, m, grid): Returns the number of separate mineral deposits in the given grid. def dfs(x, y): # Mark the current cell as visited grid[x][y] = \'0\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'1\': dfs(nx, ny) deposit_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': # we found an unvisited deposit deposit_count += 1 dfs(i, j) return deposit_count"},{"question":"Given a sequence of integers, you need to determine the minimum number of operations required to make all the integers equal. In one operation, you can choose any integer from the sequence and either increase it or decrease it by 1. Input The first line contains an integer n (2 ≤ n ≤ 100) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. Output Print a single integer, the minimum number of operations required to make all the integers equal. Examples Input 5 1 2 3 4 5 Output 6 Input 3 10 20 30 Output 20 Note In the first example, one way to make all the integers equal is: - Increase 1 by 2: [1+2, 2, 3, 4, 5] -> [3, 2, 3, 4, 5] - Decrease 5 by 2: [3, 2, 3, 4, 5-2] -> [3, 2, 3, 4, 3] - Increase 2 by 1: [3, 2+1, 3, 4, 3] -> [3, 3, 3, 4, 3] - Decrease 4 by 1: [3, 3, 3, 4-1, 3] -> [3, 3, 3, 3, 3] Thus, a total of 6 operations are required. In the second example, one way to make all the integers equal is: - Decrease 30 by 10: [10, 20, 30-10] -> [10, 20, 20] - Increase 10 by 10: [10+10, 20, 20] -> [20, 20, 20] Thus, a total of 20 operations are required.","solution":"def min_operations_to_equalize(nums): nums.sort() median = nums[len(nums) // 2] return sum(abs(x - median) for x in nums) # Example usage: # nums = [1, 2, 3, 4, 5] # print(min_operations_to_equalize(nums)) # Output: 6 # nums = [10, 20, 30] # print(min_operations_to_equalize(nums)) # Output: 20"},{"question":"Bob is collecting rare stones. He categorizes each stone by its weight and wants to store them in such a way that allows him to quickly find the weight of any stone in his collection. Bob decides to use a min heap data structure for this purpose because it helps him to efficiently retrieve the smallest weight stone when needed. Given a list of stone weights, implement the functionality to build the min heap and then retrieve the smallest stone weight. Input - The input begins with an integer n (1 ≤ n ≤ 100), which represents the number of stones. - The next line contains n integers separated by spaces representing the weights of the stones. Each weight wi (1 ≤ wi ≤ 1000). Output Write a single integer, which is the weight of the smallest stone in the collection. Example Input 5 4 3 10 5 1 Output 1 Input 3 7 6 8 Output 6","solution":"import heapq def smallest_stone_weight(n, weights): Given a list of n stone weights, build a min heap and return the smallest stone weight. Args: n (int): The number of stones. weights (list of int): The weights of the stones. Returns: int: The smallest stone weight. heapq.heapify(weights) return weights[0]"},{"question":"You are a software engineer at a company that operates a system that tracks user activity. Each user is represented by a unique integer identifier. The system logs each start and end of user activity with corresponding timestamps. If a user starts an activity, there will be a log entry when the activity starts and another log entry when the activity ends. Your task is to calculate the total active time for each user based on these logs. Input The input consists of: 1. An integer n - the number of logs. 2. n lines, each line contains three elements: - a string representing the action (\\"start\\" or \\"end\\"), - an integer representing the user id, - an integer representing the timestamp of the action. Output For each user id who appears in the logs, print the user id and the total time they were active in ascending order of user id. Constraints - 1 ≤ n ≤ 1000. - The timestamps are given in non-decreasing order. - Each user id has a valid start log followed by its corresponding end log. Examples Input ``` 6 start 1 5 end 1 10 start 2 20 end 2 30 start 1 35 end 1 45 ``` Output ``` 1 15 2 10 ``` Input ``` 4 start 3 15 end 3 25 start 4 30 end 4 40 ``` Output ``` 3 10 4 10 ``` Input ``` 2 start 5 0 end 5 100 ``` Output ``` 5 100 ``` Input ``` 0 ``` Output ``` ```","solution":"def calculate_active_time(n, logs): Calculates the total active time for each user based on the given logs. Args: n (int): The number of logs. logs (list of tuple): List containing tuples, each representing a log entry with: - action (str): \\"start\\" or \\"end\\" - user_id (int): The user\'s unique identifier - timestamp (int): The timestamp of the action Returns: dict: A dictionary where the keys are user ids and values are total active time. active_time = {} ongoing_activity = {} for action, user_id, timestamp in logs: if action == \\"start\\": ongoing_activity[user_id] = timestamp elif action == \\"end\\": if user_id in ongoing_activity: start_time = ongoing_activity.pop(user_id) if user_id in active_time: active_time[user_id] += timestamp - start_time else: active_time[user_id] = timestamp - start_time return dict(sorted(active_time.items())) def format_output(active_time_dict): Formats the output for the active time dictionary. Args: active_time_dict (dict): Dictionary with user ids and their active time. Returns: str: Formatted string for each user id and their active time. result = [] for user_id, time in active_time_dict.items(): result.append(f\\"{user_id} {time}\\") return \\"n\\".join(result)"},{"question":"In a distant city called Codeland, the government wants to organize traffic flow by constructing roundabouts at some major intersections. The city can be represented by a grid with m rows and n columns, where each cell in the grid represents an intersection. Each row and column must have exactly one roundabout. The government already identified the target locations for some roundabouts and marked them on the city\'s grid (with \'1\' for a roundabout and \'0\' for the rest of the cells). Your task is to help complete the grid such that every row and column has exactly one roundabout while maintaining the pre-placed roundabouts at their target locations. Input: - The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns in the grid. - The next m lines contain n characters each (\'0\' or \'1\'), representing the initial state of the grid. It is guaranteed that the initial grid does not violate the condition that every row and column can have exactly one roundabout. Output: - Output the resulting grid with m rows and n columns where every row and column has exactly one roundabout. If there are multiple solutions, any will be accepted. Examples: Input 3 3 0 0 1 0 0 0 0 1 0 Output 0 1 0 1 0 0 0 0 1 Input 4 4 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 Output 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 Note: In the first example, the only solution is to place roundabouts at cells (1, 2) and (2, 1). In the second example, multiple solutions are possible as long as every row and column ends up with exactly one roundabout.","solution":"def complete_roundabouts(m, n, grid): # Identify pre-placed roundabouts rows_with_roundabouts = [False] * m cols_with_roundabouts = [False] * n rounds_taken = set() for i in range(m): for j in range(n): if grid[i][j] == \'1\': rows_with_roundabouts[i] = True cols_with_roundabouts[j] = True rounds_taken.add((i, j)) # Fill the remaining roundabouts for i in range(m): if not rows_with_roundabouts[i]: for j in range(n): if not cols_with_roundabouts[j]: grid[i][j] = \'1\' rows_with_roundabouts[i] = True cols_with_roundabouts[j] = True rounds_taken.add((i, j)) break # Convert the set to list of list for output return [\'\'.join(row) for row in grid]"},{"question":"In a game, there are N islands connected by M bridges. Each bridge has a certain cost to cross it and connects two islands in both directions. The player starts on island 1 and wants to reach island N while spending as little money as possible. Write a program to find the minimum cost required to travel from island 1 to island N. If there is no way to reach island N, the program should return -1. Constraints: * 1 <= N <= 1,000 * 0 <= M <= 10,000 * 1 <= cost of each bridge <= 10,000 Input: The input is given from Standard Input in the following format: ``` N M u1 v1 c1 u2 v2 c2 ... uM vM cM ``` Where `N` is the number of islands, `M` is the number of bridges, `ui` and `vi` are the indices of the islands connected by the i-th bridge, and `ci` is the cost to cross that bridge. Output: Print the minimum cost required to travel from island 1 to island N. If it is not possible to travel from island 1 to island N, print `-1`. Examples Input: ``` 5 6 1 2 1 1 3 4 2 4 2 3 4 1 4 5 3 2 3 2 ``` Output: ``` 6 ``` Input: ``` 3 1 1 2 10 ``` Output: ``` -1 ``` Input: ``` 3 3 1 2 5 2 3 5 1 3 10 ``` Output: ``` 10 ```","solution":"import heapq import sys from collections import defaultdict def min_cost_to_travel(N, M, bridges): Find the minimum cost to travel from island 1 to island N. Parameters: N (int): Number of islands M (int): Number of bridges bridges (list of tuples): Each tuple contains (u, v, c), where u and v are connected islands and c is the cost. Returns: int: Minimum cost to travel from island 1 to island N. If unreachable, return -1. # Create graph graph = defaultdict(list) for u, v, c in bridges: graph[u].append((v, c)) graph[v].append((u, c)) # Use Dijkstra\'s algorithm to find the shortest path from island 1 to island N heap = [(0, 1)] # (cost, node) visited = [False] * (N + 1) min_cost = {i: sys.maxsize for i in range(1, N + 1)} min_cost[1] = 0 while heap: curr_cost, curr_island = heapq.heappop(heap) if visited[curr_island]: continue visited[curr_island] = True # If we reach island N, return the cost if curr_island == N: return curr_cost for neighbor, weight in graph[curr_island]: if not visited[neighbor]: new_cost = curr_cost + weight if new_cost < min_cost[neighbor]: min_cost[neighbor] = new_cost heapq.heappush(heap, (new_cost, neighbor)) return -1 # If N is not reachable from 1"},{"question":"A: Book Library Management system problem You are required to create a simple library management system to keep track of books. Each book has a unique book ID, title, author, and publication year. The system should support the following operations: * Add a new book to the system. * Remove a book from the system using its book ID. * Search for books by author. To achieve this, implement a Python class `Library` with the following methods: 1. `add_book(book_id, title, author, publication_year)`: Adds a new book to the library with the given details. 2. `remove_book(book_id)`: Removes the book with the given book ID from the library. 3. `search_by_author(author)`: Returns a list of book titles by the specified author. Use the following data format for storing books internally in the library (use any suitable data structure): ```python { book_id: { \'title\': title, \'author\': author, \'publication_year\': publication_year } } ``` Input format The input consists of multiple lines, where each line specifies a command to be executed on the library system. Each command can be one of the following: * \\"add_book book_id title author publication_year\\" * \\"remove_book book_id\\" * \\"search_by_author author\\" Output format For \\"search_by_author author\\" commands, output a list of book titles by the specified author on one line. If no books are found by the author, output an empty list (`[]`). For other commands, do not output anything. Example ```python library = Library() # Add books to the library library.add_book(1, \\"The Catcher in the Rye\\", \\"J.D. Salinger\\", 1951) library.add_book(2, \\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960) library.add_book(3, \\"1984\\", \\"George Orwell\\", 1949) # Remove a book by ID library.remove_book(2) # Search for books by author print(library.search_by_author(\\"George Orwell\\")) # Output: [\'1984\'] print(library.search_by_author(\\"Harper Lee\\")) # Output: [] ``` Constraints * The `book_id` is an integer between 1 and 10^9. * The `title` and `author` are strings of length between 1 and 1,000 characters. * The `publication_year` is an integer between 1000 and 2023. * The number of books in the library will not exceed 10^5.","solution":"class Library: def __init__(self): self.books = {} def add_book(self, book_id, title, author, publication_year): self.books[book_id] = { \'title\': title, \'author\': author, \'publication_year\': publication_year } def remove_book(self, book_id): if book_id in self.books: del self.books[book_id] def search_by_author(self, author): return [details[\'title\'] for details in self.books.values() if details[\'author\'] == author]"},{"question":"Lunar Base Assignment Lunar Base Assignment The International Space Agency (ISA) has initiated a project to set up numerous research bases on the Moon\'s surface. These bases need to communicate with each other using direct line-of-sight communication that doesn\'t get obstructed by the Moon\'s terrain. The ISA wants to place these bases such that each base has a direct line-of-sight path to at least one other base. You are in charge of developing a program to simulate and check if a given set of bases placed on the Moon meets the line-of-sight requirement. The terrain of the Moon can be approximated on a two-dimensional plane where each base is represented as a point with coordinates (x, y). Input The input consists of multiple datasets. Each dataset starts with a single integer N (1 ≤ N ≤ 200), which represents the number of bases. The subsequent N lines each consist of two integers xi and yi (0 ≤ xi, yi ≤ 10,000), which describe the coordinates of each base. The dataset ends with a line containing a single integer zero. Output For each dataset, output \\"YES\\" if all bases can communicate with at least one other base without any obstruction. Otherwise, output \\"NO\\". Sample Input 3 1 1 2 2 3 3 4 1 1 2 2 2 3 3 1 0 Sample Output YES YES Explanation for Sample Input In the first dataset, each of the three bases forms a straight line, hence every base has a line-of-sight to another. In the second dataset, every base has at least one other base that it can communicate with directly without obstruction.","solution":"def can_communicate(bases): Check if all bases can communicate with at least one other base. n = len(bases) for i in range(n): base_i = bases[i] has_communication = False for j in range(n): if i != j: base_j = bases[j] if base_i != base_j: # Check if it\'s a different base has_communication = True break if not has_communication: return \\"NO\\" return \\"YES\\" def process_datasets(datasets): results = [] for bases in datasets: results.append(can_communicate(bases)) return results def read_input(input_data): datasets = [] data = input_data.strip().split(\'n\') i = 0 while i < len(data): N = int(data[i].strip()) if N == 0: break i += 1 bases = [] for _ in range(N): x, y = map(int, data[i].strip().split()) bases.append((x, y)) i += 1 datasets.append(bases) return datasets"},{"question":"In a certain kingdom, there are N villages connected by M bidirectional roads. Each road connects two villages and has an associated positive integer cost representing the cost to travel that road. The king wants to construct a new road network in such a way that all villages are connected and the total cost of the roads used in the network is minimized. Given N, M, and the list of roads with their costs, write a program to determine the minimum cost to connect all villages in the kingdom. Constraints: - All values in input are integers. - 1 ≤ N ≤ 100 - 1 ≤ M ≤ 10,000 - The cost of any road is a positive integer no greater than 1,000. Input: Input is given from Standard Input in the following format: ``` N M u_1 v_1 cost_1 u_2 v_2 cost_2 ... u_M v_M cost_M ``` Each of the next M lines describes a road with three integers: `u_i`, `v_i`, and `cost_i`, which represents a road connecting villages `u_i` and `v_i` with a cost `cost_i`. Output: Print the minimum total cost to connect all villages. If it\'s not possible to connect all villages, print `-1`. Examples: Input: ``` 4 5 1 2 1 2 3 4 3 4 3 4 1 2 1 3 5 ``` Output: ``` 6 ``` Input: ``` 4 2 1 2 1 3 4 2 ``` Output: ``` -1 ```","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [0] * size def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def minimum_cost_to_connect_villages(N, M, roads): roads = sorted(roads, key=lambda x: x[2]) uf = UnionFind(N) mst_cost = 0 edges_used = 0 for u, v, cost in roads: if uf.find(u - 1) != uf.find(v - 1): uf.union(u - 1, v - 1) mst_cost += cost edges_used += 1 if edges_used == N - 1: return mst_cost return -1 if edges_used != N - 1 else mst_cost def from_input_string(input_string): lines = input_string.strip().split(\\"n\\") N, M = map(int, lines[0].split()) roads = [tuple(map(int, line.split())) for line in lines[1:]] return N, M, roads def from_output_string(output_string): return int(output_string.strip()) def to_input_string(inputs): N, M, roads = inputs roads_str = \\"n\\".join(\\" \\".join(map(str, r)) for r in roads) return f\\"{N} {M}n{roads_str}\\" def to_output_string(output): return str(output)"},{"question":"Given a list of non-overlapping intervals, merge an additional interval into the list so that the intervals remain non-overlapping and sorted. Write a function `merge_intervals(intervals, new_interval)` that takes in: - `intervals`, a list of tuples where each tuple consists of two integers (start, end) representing an interval, - `new_interval`, a tuple (start, end) representing the interval to be added. The function should return a new list of intervals after merging the new interval into the list of intervals such that no intervals overlap. # Constraints - The intervals and new_interval are non-negative integers. - 1 ≤ len(intervals) ≤ 10^5 - Each interval in `intervals` and `new_interval` satisfies `0 ≤ start < end ≤ 10^9` # Example **Input:** intervals = [(1, 3), (6, 9)] new_interval = (2, 5) **Output:** [(1, 5), (6, 9)] **Explanation:** The new interval (2, 5) overlaps with the interval (1, 3) and thus they are merged into (1, 5). **Input:** intervals = [(1, 2), (3, 5), (6, 7), (8, 10), (12, 16)] new_interval = (4, 9) **Output:** [(1, 2), (3, 10), (12, 16)] **Explanation:** The new interval (4, 9) overlaps with (3, 5), (6, 7), and (8, 10) and they are merged into (3, 10).","solution":"def merge_intervals(intervals, new_interval): Merges a new interval into a list of non-overlapping intervals and returns the new, non-overlapping, sorted list. merged = [] i, n = 0, len(intervals) # Add all intervals that come before the new interval. while i < n and intervals[i][1] < new_interval[0]: merged.append(intervals[i]) i += 1 # Merge all overlapping intervals with the new interval. while i < n and intervals[i][0] <= new_interval[1]: new_interval = (min(new_interval[0], intervals[i][0]), max(new_interval[1], intervals[i][1])) i += 1 merged.append(new_interval) # Add the remaining intervals after the new interval. while i < n: merged.append(intervals[i]) i += 1 return merged"},{"question":"You are given an integer N which represents the number of words, followed by N words consisting of lowercase English letters. Write a program to sort these words in ascending order and print them. Constraints * 1 ≤ N ≤ 100 * Each word consists of 1 to 100 lowercase English letters. Input Input is given from Standard Input in the following format: ``` N word1 word2 ... wordN ``` Output Output the words in ascending order, one per line. Examples Input ``` 3 banana apple cherry ``` Output ``` apple banana cherry ``` Input ``` 4 dog elephant cat bat ``` Output ``` bat cat dog elephant ```","solution":"def sort_words(N, words): Sorts a list of words in ascending order. Parameters: N (int): Number of words. words (list of str): List containing N words. Returns: list of str: Sorted list of words. return sorted(words)"},{"question":"A group of adventurers plan to explore a dungeon represented as a grid with R rows and C columns. Each cell in the grid is either: - \'*\' representing an impassable wall, or - \'.\' representing an empty space they can traverse. The adventurers start at the top-left corner of the dungeon, marked as cell (1, 1), and aim to reach the bottom-right corner of the dungeon, marked as cell (R, C). They can move up, down, left, or right, but cannot move diagonally. You need to determine if there is a path from the top-left corner to the bottom-right corner. Input: The first line contains two integers R and C , the number of rows and columns in the grid. The next R lines each contain a string of length C , consisting of characters \'*\' and \'.\', describing the grid layout. Output: Print \\"Yes\\" if there is a path from (1, 1) to (R, C); otherwise, print \\"No\\". Example Input: 4 4 .... .*.. ..*. .... Output: Yes","solution":"def is_path_exist(R, C, grid): Function to determine if there is a path from top-left (1, 1) to bottom-right (R, C) in a dungeon grid. Parameters: R (int) : number of rows C (int) : number of columns grid (list of str) : list of strings representing the dungeon map Returns: str : \\"Yes\\" if path exists, otherwise \\"No\\" from collections import deque if grid[0][0] == \'*\' or grid[R-1][C-1] == \'*\': return \\"No\\" directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] def is_valid(x, y): return 0 <= x < R and 0 <= y < C and grid[x][y] == \'.\' queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (R-1, C-1): return \\"Yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"No\\""},{"question":"Write a function `max_seq_increase(arr)` that takes a list of integers `arr` as input and returns the maximum length of a contiguous subsequence where each subsequent number is greater than the previous one. In other words, find the longest subarray in which each element is strictly greater than the previous element. Constraints * 1 leq len(arr) leq 10^5 * -10^9 leq arr[i] leq 10^9 * All values in the input array are integers. Input Input is given to the function as a list of integers: `arr`. Output Return an integer, the maximum length of a contiguous increasing subsequence. Examples Input [1, 3, 5, 4, 7] Output 3 Input [2, 2, 2, 2, 2] Output 1","solution":"def max_seq_increase(arr): Returns the maximum length of a contiguous subsequence where each subsequent number is greater than the previous one. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 else: current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Masha loves numbers and cubes. She came up with an interesting sequence of numbers where each number is defined as the sum of the cubes of its digits. She wants to find out if a given number is a part of this sequence or not. Given a number n, determine if it can be expressed as the sum of the cubes of its digits. Input The input consists of a single integer n (1 ≤ n ≤ 10^5) — the number you need to check. Output Print \\"Yes\\" if n can be expressed as the sum of the cubes of its digits, otherwise print \\"No\\". Examples Input 153 Output Yes Input 10 Output No Note For the first example: 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153, so the output is \\"Yes\\". For the second example: 1^3 + 0^3 = 1, which does not equal 10, so the output is \\"No\\".","solution":"def is_sum_of_cubes_of_digits(n): Returns \\"Yes\\" if n can be expressed as the sum of the cubes of its digits, otherwise returns \\"No\\". original_number = n sum_of_cubes = sum(int(digit) ** 3 for digit in str(n)) return \\"Yes\\" if sum_of_cubes == original_number else \\"No\\""},{"question":"A horizontal line divides a rectangular land into two parts. On this land, there are vertical walls that connect from the top to the bottom of the rectangle, and these walls have different heights. The height of a wall indicates the maximum number of distinct paths that can go through that wall. You need to find the number of disjoint paths that can be created from the left edge to the right edge of the rectangle without exceeding the height capacity of any wall. Each path cannot touch other paths once they have started, and a path can only move horizontally or vertically within the rectangle. Write a function to determine the maximum number of disjoint paths possible. Input The first line contains an integer n (1 ≤ n ≤ 50), the number of walls. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ n), where h_i is the height of the i-th wall. Output Print a single integer – the maximum number of disjoint paths from the left edge to the right edge. Examples Input 3 2 1 3 Output 1 Input 4 1 2 2 1 Output 1 Note In the first example, there are 3 walls with heights 2, 1, and 3 respectively. Although there are different heights of walls, if we try to create more than 1 path, the second wall with height 1 restricts us from creating more than 1 disjoint path. In the second example, the walls have heights that permit only a single disjoint path from the left edge to the right edge because of the heights of 1 at both ends.","solution":"def max_disjoint_paths(walls): Finds the maximum number of disjoint paths possible from the left edge to the right edge of the rectangle. Args: walls (list): List of wall heights. Returns: int: Maximum number of disjoint paths. return min(walls)"},{"question":"Consider a grid of size n x n consisting of cells, where each cell can either be empty or occupied by an obstacle. You are initially positioned at the top-left corner of the grid, and your objective is to reach the bottom-right corner under the condition that you can only move right or down. Write a function `findPaths(int n, List<List<int>> grid)` that returns the number of distinct paths to reach the bottom-right corner from the top-left corner. If there is no way to reach the bottom-right corner from the top-left corner, return 0. # Input - An integer n, representing the size of the grid (1 ≤ n ≤ 100). - A list of lists `grid` of integers with size n x n, where `grid[i][j]` is 1 if the cell (i, j) contains an obstacle, and 0 otherwise. # Output - An integer representing the number of distinct paths to reach the bottom-right corner of the grid from the top-left corner. Return 0 if no such path exists. # Example Input: ``` n = 3 grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] ``` Output: ``` 2 ``` # Explanation There are 2 distinct paths to reach the bottom-right corner: 1. Right → Right → Down → Down 2. Down → Down → Right → Right # Note You can assume that the starting and ending cells (top-left and bottom-right respectively) do not contain obstacles. # Constraints - 1 ≤ n ≤ 100 - 0 ≤ grid[i][j] ≤ 1","solution":"def findPaths(n, grid): Find the number of distinct paths from the top-left corner to the bottom-right corner of a grid. if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 # Initialize a dp 2D array to store the number of ways to reach each cell dp = [[0 for _ in range(n)] for _ in range(n)] # Starting point dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(n): if grid[i][j] == 1: # If there is an obstacle, skip the cell dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1]"},{"question":"You are given an array of n positive integers. The array represents a game where each integer in the array corresponds to the strength of a monster. The task is to eliminate all the monsters while minimizing the total damage you take. You take damage equal to the strength of the monster you are eliminating. At any moment, you can choose to eliminate a monster of available strength and remove it from the array. Additionally, you have a special power that allows you to combine any two monsters into a single new monster whose strength is the sum of the two original monsters\' strengths. This action causes no direct damage to you. Write a program that calculates the minimum total damage you must take to eliminate all the monsters. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of monsters. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10,000) — the strengths of the monsters. Output Print a single integer — the minimum total damage taken to eliminate all the monsters. Examples Input 3 2 7 4 Output 11 Input 4 1 2 3 4 Output 10 Note In the first example, you can proceed as follows: 1. Eliminate the monster with strength 2. (Total damage: 2) 2. Combine the remaining monsters (7, 4) into a single monster with strength 11. 3. Eliminate the final monster with strength 11. (Total damage: 11). The total damage is 2 + 11 = 13, which is the minimum. In the second example: 1. Eliminate the monster with strength 1. (Total damage: 1) 2. Eliminate the monster with strength 2. (Total damage: 1 + 2 = 3) 3. Eliminate the monster with strength 3. (Total damage: 3 + 3 = 6) 4. Eliminate the monster with strength 4. (Total damage: 6 + 4 = 10) The total damage is 1 + 2 + 3 + 4 = 10, which is the minimum.","solution":"import heapq def min_damage_to_eliminate_monsters(n, strengths): Returns the minimum total damage to eliminate all monsters by combining monsters with no damage and eliminating the monsters while taking damage equal to their strength. if n == 1: return strengths[0] # Min-heap to process the smallest values first heapq.heapify(strengths) total_damage = 0 while len(strengths) > 1: # Always eliminate the monster with the smallest strength damage = heapq.heappop(strengths) total_damage += damage # Eliminate the last remaining monster total_damage += heapq.heappop(strengths) return total_damage"},{"question":"You are given two integer arrays A and B of the same length n. You want to perform the following operations to make the arrays \\"similar\\": 1. Choose any two indices i and j (1 ≤ i, j ≤ n) and swap A[i] with A[j], and B[i] with B[j]. A and B are similar if |A[i] - B[i]| ≤ 1 for all i (1 ≤ i ≤ n). Here, |x| denotes the absolute value of x. Determine the minimum number of swaps required to make A and B similar. If it is not possible to make them similar, return -1. Input The input will have: * An integer n (1 ≤ n ≤ 10^5) - the length of arrays A and B. * A line containing n integers A[i] (0 ≤ A[i] ≤ 10^9). * A line containing n integers B[i] (0 ≤ B[i] ≤ 10^9). Output Output a single integer - the minimum number of swaps required, or -1 if it is not possible. Example Input 5 1 5 3 7 9 2 5 4 8 10 Output 2 Input 4 1 3 2 4 1 3 2 6 Output -1","solution":"def min_swaps_to_similar(n, A, B): Determines the minimum number of swaps required to make arrays A and B similar. Returns -1 if it is not possible. # Create a list of pairs (A[i], B[i]) pairs = list(zip(A, B)) # Check if |A[i] - B[i]| <= 1 for all i for a, b in pairs: if abs(a - b) > 1: return -1 # Sort the pairs to minimize the differences pairs.sort() # Count the number of swaps by counting mismatches swaps = 0 for i in range(n): a, b = pairs[i] if a != b: swaps += 1 return swaps // 2 # Example usage: # n = 5 # A = [1, 5, 3, 7, 9] # B = [2, 5, 4, 8, 10] # print(min_swaps_to_similar(n, A, B)) # Output: 2"},{"question":"You are tasked with implementing a simple file system in memory. The file system supports two commands: `CREATE` and `LIST`. You will maintain a directory structure where directories can contain subdirectories and files. Directories and files are uniquely identified by their absolute path. To simplify the system, we assume that directory and file names contain only lowercase English letters and digits. Command Descriptions: - `CREATE path`: - If the path is a new directory or file, create it. - If any part of the path already exists (including the final component) or an invalid path is specified (e.g., parts of the path are missing), print the error \\"Invalid path\\". - `LIST path`: - If the path refers to a directory, print all its immediate children (subdirectories and files, separated by a space, in lexicographical order). - If the path refers to a file or an invalid path is specified, print the error \\"Invalid path\\". Your implementation should handle up to 1000 commands in reasonable time. Input The input consists of multiple lines: - Each line contains either a `CREATE` or `LIST` command followed by a path. - Paths have a maximum length of 200 characters. - Paths start with a \'/\' and directories or files are separated by \'/\'. Output For each `CREATE` command, output nothing. For each `LIST` command, output the lexicographically ordered list of children or \\"Invalid path\\". Example Input ``` CREATE /a CREATE /a/b CREATE /a/c/d LIST /a CREATE /a/b LIST /a/b CREATE /a/c CREATE /a LIST /a/c ``` Output ``` b c Invalid path Invalid path Invalid path d ``` Explanation - The first command creates a new directory `/a`. - The second command creates a new directory `/a/b`. - The third command creates a new directory `/a/c/d`. - The fourth command lists the contents of `/a`, which are `b` and `c`. - The fifth command tries to create `/a/b` again, which fails because it already exists. - The sixth command tries to list contents of `/a/b`, but `/a/b` is a path to a directory, so it should output \\"Invalid path\\". - The seventh command tries to create `/a/c` again, which fails because `/a/c` is already a part of the structure due to `/a/c/d`. - The eighth command tries to create `/a` again, which fails because `/a` already exists. - The ninth command lists the contents of `/a/c`, which is `d`. Note You must handle the edge cases like trying to create the same path multiple times, missing intermediate directories, and listing non-directory paths correctly. Use data structures appropriately to ensure efficient command processing.","solution":"class FileSystem: def __init__(self): self.fs = {} def create(self, path: str): parts = path.split(\'/\')[1:] curr = self.fs for i, part in enumerate(parts): if part not in curr: if i == len(parts) - 1: # If it\'s the final part, create new file or directory curr[part] = {} else: curr[part] = {} elif i == len(parts) - 1: print(\\"Invalid path\\") return curr = curr[part] def list(self, path: str): parts = path.split(\'/\')[1:] curr = self.fs for part in parts: if part in curr: curr = curr.get(part, None) else: print(\\"Invalid path\\") return if not isinstance(curr, dict): print(\\"Invalid path\\") return print(\' \'.join(sorted(curr.keys()))) # Function to process commands def process_commands(commands): fs = FileSystem() for command in commands: cmd, path = command.split() if cmd == \\"CREATE\\": fs.create(path) elif cmd == \\"LIST\\": fs.list(path)"},{"question":"You are given a list of n integers representing the heights of buildings on a street. You need to place a single advertisement billboard on one of these buildings. The height of the building where you place the billboard should be greater than or equal to the heights of adjacent buildings. More formally, for a building at index i (0 <= i < n): - If i = 0 (first building), it should satisfy height[i] >= height[i + 1]. - If i = n - 1 (last building), it should satisfy height[i] >= height[i - 1]. - Otherwise, it should satisfy height[i] >= height[i - 1] and height[i] >= height[i + 1]. Determine the index of the building where you can place the advertisement billboard. If there are multiple valid answers, return the smallest index. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of buildings. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10000) — the heights of the buildings. Output Print the index of the building where you can place the advertisement billboard (0-based index). If there are multiple valid answers, print the smallest index. Examples Input 5 2 4 3 5 1 Output 1 Input 4 3 3 3 3 Output 0 Note In the first example, placing the billboard at position 1 (height 4) is valid because height[1] (4) is greater than both height[0] (2) and height[2] (3). There is another valid position at index 3 (height 5), but 1 is smaller. In the second example, all buildings are of equal height, so the valid positions are 0, 1, 2, and 3. The smallest index is 0.","solution":"def find_building_index(n, heights): Determines the index of the building where the advertisement billboard can be placed. Args: n : int : number of buildings heights : list of int : heights of the buildings Returns: int : index of the building for the billboard for i in range(n): if (i == 0 and n > 1 and heights[i] >= heights[i + 1]) or (i == n - 1 and n > 1 and heights[i] >= heights[i - 1]) or (0 < i < n - 1 and heights[i] >= heights[i - 1] and heights[i] >= heights[i + 1]): return i return 0 # if there is only one building or all buildings are the same height"},{"question":"The local library decided to automate their system of tracking popular books. They want to determine how many times each book was borrowed in a given round of borrowing sessions. To achieve this, you need to process certain events and track the borrowing count for each book ID. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of borrowing events. Each of the next n lines contains an integer book_id (1 ≤ book_id ≤ 1000) representing the ID of the book that was borrowed in that event. Output Output the IDs of the books and the number of times each book was borrowed in the format \\"book_id: count\\", one per line. The output should be sorted by book ID in ascending order. Examples Input 5 101 203 101 203 305 Output 101: 2 203: 2 305: 1","solution":"def track_borrowed_books(n, borrowing_events): Returns the count of each book_id borrowed. :param n: The number of borrowing events (int) :param borrowing_events: A list of book_id (List[int]) :return: A dictionary where keys are book IDs and values are the counts book_count = {} for book_id in borrowing_events: if book_id in book_count: book_count[book_id] += 1 else: book_count[book_id] = 1 sorted_books = dict(sorted(book_count.items())) return sorted_books"},{"question":"Zara is a passionate bird watcher who enjoys tracking the birds she spots every day. She keeps a record of her sightings in a special notebook. Each entry in her notebook specifies the type and number of birds she observed on a particular day. At the end of each week, Zara wants to know the most frequently observed bird species for that week, as well as the number of different species she saw at least once during that week. Can you write a program that helps Zara summarize her bird sightings at the end of a week? Input The first line contains an integer n (1 ≤ n ≤ 50) — the number of different bird species Zara recorded in her notebook during the week. Each of the following n lines contains a string (an identifier for the bird species) and an integer (1 ≤ count ≤ 100) separated by a space, indicating the number of sightings of that particular bird species. Output Print the most frequently observed bird species and the number of different species Zara saw at least once during the week. If there is a tie for the most frequently observed bird species, print the lexicographically smallest species name. Examples Input 3 sparrow 15 hawk 9 sparrow 20 Output sparrow 2 Input 5 crow 8 sparrow 8 owl 10 pigeon 6 hawk 7 Output owl 5 Note In the first sample, Zara recorded sightings of three bird species. The sparrow had the highest number of sightings with a total of 35. Zara also saw two different species of birds during the week. In the second sample, if there is a tie, the owl is the bird with the highest individual number of sightings (10), and Zara saw five different species of birds.","solution":"def summarize_bird_sightings(n, sightings): Returns the most frequently observed bird species and the number of different species Zara saw at least once during the week. Arguments: n -- the number of different bird species recorded sightings -- a list of tuples, where each tuple contains a string (bird species) and an integer (number of sightings) Returns: A tuple containing the most frequently observed bird species and the number of different species from collections import defaultdict species_count = defaultdict(int) unique_species = set() for species, count in sightings: species_count[species] += count unique_species.add(species) most_frequent_species = max(species_count.items(), key=lambda x: (x[1], -ord(x[0][0]))) return most_frequent_species[0], len(unique_species)"},{"question":"Grigoriy, after successfully working as a night security guard at the museum, decided to take up a hobby in robotics. He wants to create a robot that can move freely in a grid-like museum to patrol the area. The robot can move in four directions: up, down, left, and right, given that there are no obstacles in the way. The robot is initially positioned at the top-left corner of a grid. However, the museum placed some obstacles on the grid which the robot cannot pass. The robot needs to determine if it can reach a specific target position, starting from the initial position (0, 0). The grid is represented by a 2D array where \'1\' represents an obstacle and \'0\' represents a free space. The robot\'s movements are constrained within the boundaries of the grid. Write a function to check if the robot can move from the starting point (0, 0) to a target position (r, c) in the grid. Return true if the robot can reach the target position, otherwise return false. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid. The next m lines contain n characters each (\'0\' or \'1\') — the grid representation. The last line contains two integers r and c (0 ≤ r < m, 0 ≤ c < n) — the target position. Output Print \\"true\\" if the robot can reach the target position from the starting point, otherwise print \\"false\\". Examples Input 3 3 0 0 1 0 1 0 0 0 0 2 2 Output true Input 3 3 0 0 1 0 1 0 1 1 0 2 2 Output false Note In the first example, the robot can move from starting position (0, 0) to (2, 2) by navigating around the obstacles. In the second example, the robot cannot reach the target position (2, 2) because it\'s blocked by obstacles.","solution":"def can_reach_target(grid, target_r, target_c): Function to check if the robot can reach the target position (target_r, target_c) from the starting position (0, 0) in the given grid. Parameters: grid (list of list of str): The 2D grid representation, where \'0\' is a free space and \'1\' is an obstacle. target_r (int): The row index of the target position. target_c (int): The column index of the target position. Returns: bool: True if the robot can reach the target position, False otherwise. m, n = len(grid), len(grid[0]) def is_valid(x, y): return 0 <= x < m and 0 <= y < n and grid[x][y] == \'0\' visited = [[False for _ in range(n)] for _ in range(m)] deltas = [(-1, 0), (1, 0), (0, -1), (0, 1)] def dfs(x, y): if not is_valid(x, y) or visited[x][y]: return False if (x, y) == (target_r, target_c): return True visited[x][y] = True for dx, dy in deltas: if dfs(x + dx, y + dy): return True visited[x][y] = False return False return dfs(0, 0)"},{"question":"You are given a list of integers where each integer appears exactly three times, except for one integer which appears exactly once. Your task is to find the integer that appears only once. Constraints - The length of the list is at most 100,000. - Each integer in the list is between -1,000,000 and 1,000,000. Input Input is given from Standard Input in the following format: - The first line contains an integer n, the length of the list. - The second line contains n space-separated integers representing the elements of the list. Output Print the integer that appears exactly once. Examples Input 7 2 2 3 2 4 3 3 Output 4 Input 10 1 1 1 2 2 2 3 3 3 4 Output 4 Input 4 5 5 5 6 Output 6 Input 13 7 7 7 8 8 8 9 9 9 10 10 10 11 Output 11 Input 16 0 0 0 -1 -1 -1 -2 -2 -2 -3 -3 -3 -4 -4 -4 -5 Output -5","solution":"def find_unique_element(numbers): Find the integer that appears exactly once in the list where each other integer appears exactly three times. ones, twos = 0, 0 for number in numbers: twos |= ones & number ones ^= number common_bit_mask = ~(ones & twos) ones &= common_bit_mask twos &= common_bit_mask return ones"},{"question":"You are given a list of `n` integers [a_1, a_2, ..., a_n]. A \\"beautiful pair\\" ((a_i, a_j)) is defined as a pair of integers such that (a_i + a_j) is divisible by a given integer (k), where (i < j). Write a program to find the number of \\"beautiful pairs\\" in the given list. # Input The input consists of two lines: 1. The first line contains two integers `n` (the number of elements in the list) and `k` (the divisor), separated by a space. 2. The second line contains `n` space-separated integers [a_1, a_2, ..., a_n], representing the list. # Output Output the number of \\"beautiful pairs\\" in the list. # Constraints - (2 leq n leq 10^5) - (1 leq k leq 10^9) - Each (a_i) is a non-negative integer such that (0 leq a_i leq 10^9). # Examples Input ``` 5 3 1 2 3 4 5 ``` Output ``` 4 ``` Input ``` 4 2 2 4 6 8 ``` Output ``` 6 ``` Explanation of Examples: **Example 1**: The possible \\"beautiful pairs\\" are: - (1, 2) because 1 + 2 = 3 which is divisible by 3 - (1, 5) because 1 + 5 = 6 which is divisible by 3 - (2, 4) because 2 + 4 = 6 which is divisible by 3 - (3, 3) because 3 + 3 = 6 which is divisible by 3 **Example 2**: The possible \\"beautiful pairs\\" are: - (2, 4) because 2 + 4 = 6 which is divisible by 2 - (2, 6) because 2 + 6 = 8 which is divisible by 2 - (2, 8) because 2 + 8 = 10 which is divisible by 2 - (4, 6) because 4 + 6 = 10 which is divisible by 2 - (4, 8) because 4 + 8 = 12 which is divisible by 2 - (6, 8) because 6 + 8 = 14 which is divisible by 2","solution":"def count_beautiful_pairs(n, k, nums): Returns the number of beautiful pairs (a_i, a_j) such that (a_i + a_j) is divisible by k. count = 0 remainder_count = [0] * k for num in nums: remainder = num % k target_remainder = (k - remainder) % k count += remainder_count[target_remainder] remainder_count[remainder] += 1 return count"},{"question":"You are given two strings, s1 and s2, each containing lowercase English letters. You need to find the length of the longest substring that is a subsequence of both s1 and s2. A subsequence is a series of characters that can be derived from another string by deleting some or no elements without changing the order of the remaining elements. Input The first line contains the string s1 (1 ≤ |s1| ≤ 100,000). The second line contains the string s2 (1 ≤ |s2| ≤ 100,000). Output Print one integer: the length of the longest substring that is a subsequence of both s1 and s2. Examples Input abcde ace Output 3 Input abc abc Output 3 Input abc def Output 0 Note In the first example, the longest substring that is a subsequence of both s1 and s2 is \\"ace\\", which is of length 3. In the second example, the entire string \\"abc\\" is a subsequence of itself, and is of length 3. In the third example, there is no common subsequence between s1 and s2, so the answer is 0.","solution":"def longest_common_subsequence_length(s1, s2): Returns the length of the longest substring that is a subsequence of both s1 and s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"In an ancient kingdom, there were N cities connected by M roads. The cities were numbered from 1 to N. Each road connected two cities bidirectionally and had a specific travel time associated with it. One day, the king wants to travel from city A to city B. However, the king doesn\'t just want to take the route with the minimum travel time; instead, he wants to try something different. As usual, he wants to minimize the travel time, but he also wants to ensure that the travel time on each individual road taken doesn\'t exceed a certain limit, L. Your task is to determine the minimum travel time required for the king to travel from city A to city B without using any road that has a travel time greater than L. If it\'s not possible to travel under these conditions, output -1. **Input:** The first line contains three integers N, M, and L (1 ≤ N ≤ 10^5, 1 ≤ M ≤ 10^5, 1 ≤ L ≤ 10^9) — the number of cities, the number of roads, and the maximum allowed travel time on any road. Each of the next M lines contains three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^9), indicating there is a road between city u and city v with travel time w. The last line contains two integers A and B (1 ≤ A, B ≤ N) — the cities between which the king wants to travel. **Output:** Print the minimum travel time required for the king to travel from city A to city B without using any road that exceeds the travel time L. If there is no such route, print -1. **Example:** **Input:** 5 5 4 1 2 3 2 3 2 3 4 4 4 5 5 1 5 10 1 4 **Output:** 9","solution":"import heapq import sys def minimum_travel_time(N, M, L, roads, A, B): graph = [[] for _ in range(N + 1)] for u, v, w in roads: if w <= L: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start, end): min_heap = [(0, start)] distances = [sys.maxsize] * (N + 1) distances[start] = 0 while min_heap: current_distance, node = heapq.heappop(min_heap) if node == end: return current_distance for neighbor, weight in graph[node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return -1 return dijkstra(A, B) # Example usage: N = 5 M = 5 L = 4 roads = [ (1, 2, 3), (2, 3, 2), (3, 4, 4), (4, 5, 5), (1, 5, 10) ] A = 1 B = 4 print(minimum_travel_time(N, M, L, roads, A, B)) # Output: 9"},{"question":"You are given an infinite chessboard and a knight placed at position (x, y). The knight can move to any of the 8 possible positions it can reach in a single move in an \\"L\\" shape. Specifically, from any position (x, y), a knight can move to: (x+2, y+1), (x+2, y-1), (x-2, y+1), (x-2, y-1), (x+1, y+2), (x+1, y-2), (x-1, y+2), (x-1, y-2). Your task is to determine the minimum number of moves required for the knight to reach from the starting position (x, y) to the target position (a, b). Input: The first line contains four integers x, y, a, b (-109 ≤ x, y, a, b ≤ 109) representing the starting (x, y) and target (a, b) positions respectively. Output: Print a single integer: the minimum number of moves required for the knight to reach the target position. Examples Input 0 0 2 1 Output 1 Input 0 0 5 5 Output 4 Input 1 1 1 1 Output 0 Note In the first example, the knight can go from (0, 0) to (2, 1) in one move. In the second example, one possible sequence of moves is (0, 0) -> (2, 1) -> (4, 2) -> (3, 4) -> (5, 5), totaling 4 moves. In the third example, the knight is already at the target position, so zero moves are required.","solution":"from collections import deque def min_knight_moves(x, y, a, b): # Offsets for knight moves offsets = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)] # BFS initialization queue = deque([(x, y, 0)]) # (current_x, current_y, move_count) visited = set([(x, y)]) while queue: cur_x, cur_y, moves = queue.popleft() if (cur_x, cur_y) == (a, b): return moves for offset in offsets: next_x, next_y = cur_x + offset[0], cur_y + offset[1] if (next_x, next_y) not in visited: visited.add((next_x, next_y)) queue.append((next_x, next_y, moves + 1)) print(min_knight_moves(0, 0, 2, 1)) # Example Test Case 1 print(min_knight_moves(0, 0, 5, 5)) # Example Test Case 2 print(min_knight_moves(1, 1, 1, 1)) # Example Test Case 3"},{"question":"A software company wants to implement a feature that compresses strings using the Run-Length Encoding (RLE) algorithm. The RLE algorithm works by replacing sequences of the same character with a single character followed by the number of consecutive occurrences. For example, the string \\"aaabbbcc\\" would be compressed to \\"a3b3c2\\". However, if the compressed string is not shorter than the original string, the function should return the original string instead. Write a function called `compress_string` that takes a single argument: 1. A string `s` consisting of lowercase English letters (1 ≤ |s| ≤ 100). The function should return the compressed version of the string if it\'s shorter than the original string; otherwise, it should return the original string. # Input: * A string `s` consisting of lowercase English letters. # Output: * Return the compressed string if it\'s shorter than the original string. * Otherwise, return the original string. # Example: Input ``` aaabbbcc ``` Output ``` a3b3c2 ``` Input ``` abcd ``` Output ``` abcd ``` # Note: * In the first example, \\"aaabbbcc\\" is compressed to \\"a3b3c2\\", which is shorter than the original string. * In the second example, \\"abcd\\" cannot be compressed to a shorter form, so it returns the original string.","solution":"def compress_string(s): Compresses the string using the Run-Length Encoding (RLE) algorithm. If the compressed string is not shorter than the original string, the function returns the original string. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: The compressed string or the original string. compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) # Adding the last character and its count compressed_str = \'\'.join(compressed) if len(compressed_str) < len(s): return compressed_str else: return s"},{"question":"Travel Time on Grid Koto City is designed in a grid pattern with roads running north-south and east-west at intervals of 1 km. The lanes are one-way, where north-south roads allow movement only in the north direction and east-west roads allow movement only in the east direction. Koto station is located at the coordinate (0, 0). As part of the city\'s transportation optimization project, a new proposal suggests that moving from intersection (a, b) to intersection (c, d) should be optimized in terms of travel time. At any intersection, it takes 1 minute to move to the adjacent intersection following the direction restrictions. Create a program that calculates the minimum travel time (in minutes) to get from one intersection to another following the road direction constraints. Input The input consists of multiple data sets, and the number of data sets will not exceed 100. Each data set is formatted as follows: (a b) (c d) - a and b are the starting intersection coordinates. - c and d are the destination intersection coordinates. - 0 ≤ a, b, c, d ≤ 100. The input ends with a line containing \\"0 0 0 0\\". Output For each data set, output the minimum travel time in minutes to move from the starting intersection to the destination intersection in one line. If the destination cannot be reached due to movement constraints, output \\"Impossible.\\" Sample Input 1 2 3 4 0 0 7 1 2 3 2 3 4 4 1 1 0 0 0 0 Sample Output 4 8 0 Impossible Explanation: 1. For the first dataset (1, 2) -> (3, 4), the minimal travel requires moving 2 steps north and 2 steps east, totaling 4 minutes. 2. For the second dataset (0, 0) -> (7, 1), the journey requires 7 steps east and 1 step north, totaling 8 minutes. 3. For the third dataset (2, 3) -> (2, 3), no movement is needed as start and end intersections are the same, so the time is 0 minutes. 4. For the fourth dataset (4, 4) -> (1, 1), the movement isn\'t feasible following the one-way restriction, so the output is \\"Impossible.\\"","solution":"def min_travel_time(start, end): Calculate the minimum travel time from start to end on the given grid. Arguments: start -- the starting intersection coordinates (a, b) end -- the destination intersection coordinates (c, d) Returns: The minimum travel time in minutes or \\"Impossible\\" if the destination cannot be reached. a, b = start c, d = end if c < a or d < b: return \\"Impossible\\" return (c - a) + (d - b) def travel_times(datasets): results = [] for dataset in datasets: start, end = dataset if start == (0, 0) and end == (0, 0): break results.append(min_travel_time(start, end)) return results"},{"question":"You are managing a delivery service with several delivery vehicles. To optimize the delivery schedule, you have composed a list of delivery destinations with their respective distances from the warehouse. Your goal is to determine the shortest route each vehicle can take to cover all the destinations assigned to it, starting from the warehouse and returning to the warehouse at the end. Each vehicle has a list of destinations and the distances between all pairs of destinations (including the warehouse) are provided. You need to calculate the shortest possible route for each vehicle using the concept of the Travelling Salesman Problem (TSP). Input - The first line contains an integer v (1 ≤ v ≤ 10) — the number of delivery vehicles. - For each vehicle, the input is given in the following format: - The first line contains an integer n (1 ≤ n ≤ 15) — the number of destinations. - The next n+1 lines contain n+1 integers each — the distances matrix. The first row and column represent the warehouse, and the remaining rows and columns represent the destinations. Output For each vehicle, on a new line, print the length of the shortest possible route that visits all assigned destinations exactly once and returns to the warehouse. Examples Input 2 3 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 2 0 29 20 29 0 15 20 15 0 Output 80 64 Note In the first example, the first vehicle has 3 destinations and the distance matrix is provided. The shortest path visiting all the destinations and returning to the warehouse has a total distance of 80. In the second example, the second vehicle has 2 destinations and the shortest path visiting all the destinations and returning to the warehouse has a total distance of 64.","solution":"from itertools import permutations def calculate_shortest_route(num_vehicles, vehicles_data): def tsp(matrix, n): # Store all vertices apart from source vertex vertices = list(range(1, n + 1)) # Store minimum weight Hamiltonian Cycle min_path = float(\'inf\') # Generate permutations of the vertices for permutation in permutations(vertices): # Initial distance from source to first vertex in current permutation current_pathweight = matrix[0][permutation[0]] # Calculate the tour weight for i in range(n - 1): current_pathweight += matrix[permutation[i]][permutation[i + 1]] # Add distance from last vertex in permutation back to the source current_pathweight += matrix[permutation[-1]][0] # Update minimum tour weight min_path = min(min_path, current_pathweight) return min_path results = [] for vehicle in vehicles_data: n = vehicle[\'n\'] distances = vehicle[\'distances\'] result = tsp(distances, n) results.append(result) return results def main(input_data): lines = input_data.strip().split(\'n\') index = 0 num_vehicles = int(lines[index]) index += 1 vehicles_data = [] for _ in range(num_vehicles): n = int(lines[index]) index += 1 distances = [] for _ in range(n + 1): distances.append(list(map(int, lines[index].strip().split()))) index += 1 vehicles_data.append({\'n\': n, \'distances\': distances}) results = calculate_shortest_route(num_vehicles, vehicles_data) for result in results: print(result) # Example usage: # input_data = # 2 # 3 # 0 10 15 20 # 10 0 35 25 # 15 35 0 30 # 20 25 30 0 # 2 # 0 29 20 # 29 0 15 # 20 15 0 # # main(input_data)"},{"question":"Consider a new system that manages a queue of customers waiting for service. The system needs to support the following three operations: * enqueue id — to add a customer identified by id to the end of the queue; * dequeue — to remove and return the customer at the front of the queue; * serve n — to remove and return the first n customers from the front of the queue. If there are fewer than n customers in the queue, serve only those present. The customer IDs are unique integers. You are to implement the queue management system and output the results of the dequeue and serve operations. For these operations, if the queue is empty or there are fewer customers than required in the serve operation, output \\"Queue Underflow\\". Input The first line of the input contains an integer t (1 ≤ t ≤ 100), representing the number of operations. Each of the following t lines contains one of the three operations. Output Output the results of each dequeue and serve operation, each on a new line. If the queue is underflowing, output \\"Queue Underflow\\". Example Input 7 enqueue 5 enqueue 3 dequeue enqueue 9 serve 2 dequeue serve 1 Output 5 3 9 Queue Underflow","solution":"from collections import deque class CustomerQueue: def __init__(self): self.queue = deque() def enqueue(self, id): self.queue.append(id) def dequeue(self): if not self.queue: return \\"Queue Underflow\\" return self.queue.popleft() def serve(self, n): if len(self.queue) < n: n = len(self.queue) if n == 0: return \\"Queue Underflow\\" served_customers = [] for _ in range(n): served_customers.append(self.queue.popleft()) return \\" \\".join(map(str, served_customers))"},{"question":"You are given a string s of length n consisting of lowercase English letters. You can perform the following operation multiple times. The operation consists of the following: 1. Choose two distinct characters from s. 2. Swap every occurrence of these two characters in the string. Determine if it is possible to make the string lexicographically smallest by performing any number of the given operations. If yes, print the operations required to achieve it. If no operations are needed, just print \\"YES\\". Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains a string s of length n. Output Print \\"YES\\" (without quotes) if it is possible to make the string lexicographically smallest. If there is an answer, in the second line print an integer m (0 ≤ m ≤ 25) — the number of operations in your answer. After that in (i + 2)-th line print the i-th operation — the characters used in the swap separated by a space. Examples Input 5 dcbae Output YES 2 d a c b Input 3 abc Output YES Note In the first sample, the operations shown result in: * dcbae (initial state); * acbde (swap \'d\' and \'a\'); * abcde (swap \'c\' and \'b\'). In the second sample, the string \\"abc\\" is already the lexicographically smallest string obtainable, so no operation is needed. Other answers are also possible. The number of operations should not exceed 25.","solution":"def lexicographically_smallest_string(n, s): if n == 1: return [\\"YES\\"] # Find the smallest lexicographical order string target = \'\'.join(sorted(s)) if s == target: return [\\"YES\\"] operations = [] for i in range(n): if s[i] != target[i]: for j in range(i + 1, n): if s[j] == target[i] and s[j] != target[j]: operations.append((s[i], s[j])) s = s.replace(s[i], \'*\').replace(s[j], s[i]).replace(\'*\', s[j]) break result = [\\"YES\\", str(len(operations))] for op in operations: result.append(f\\"{op[0]} {op[1]}\\") return result"},{"question":"Design and implement a function to simulate a simplified turn-based battle system for a role-playing game (RPG). A battle involves two characters, each with predefined statistics: health points (HP), attack (ATK), and defense (DEF). Characters take turns attacking each other until one character\'s HP is reduced to zero or below. The damage dealt by an attack is calculated as: `damage = max(1, attacker\'s ATK - defender\'s DEF)` The character who attacks first is determined by a coin toss (or random choice). Your task is to simulate this battle process. Implement a function that takes two dictionaries representing the characters’ statistics, simulates the battle, and returns the name of the winning character. # Input The function will receive two arguments: 1. `char1`: a dictionary representing the first character\'s statistics with the following keys: - `name` (string): The name of the character. - `HP` (integer): Health points. - `ATK` (integer): Attack points. - `DEF` (integer): Defense points. 2. `char2`: a dictionary representing the second character\'s statistics with the same keys. # Output - Return the name of the character who wins the battle. # Example Here is the function signature: ```python def battle(char1: dict, char2: dict) -> str: ``` # Example Usage ```python char1 = { \\"name\\": \\"Warrior\\", \\"HP\\": 30, \\"ATK\\": 10, \\"DEF\\": 5 } char2 = { \\"name\\": \\"Mage\\", \\"HP\\": 25, \\"ATK\\": 12, \\"DEF\\": 3 } print(battle(char1, char2)) ``` The output could be either: ``` \\"Warrior\\" ``` or: ``` \\"Mage\\" ``` depending on the random choice of who attacks first. # Note - Assume the `ATK` and `DEF` values are positive integers. - The `HP` values are also positive integers. - In case both characters reduce each other\'s HP to zero or below in the same round, consider the attacking character of that round as the winner.","solution":"import random def battle(char1, char2): Simulates a battle between two characters and returns the name of the winning character. Parameters: char1 (dict): Dictionary containing name, HP, ATK, and DEF of character 1. char2 (dict): Dictionary containing name, HP, ATK, and DEF of character 2. Returns: str: The name of the character who wins the battle. def get_damage(attacker, defender): return max(1, attacker[\'ATK\'] - defender[\'DEF\']) # Decide who attacks first randomly characters = [char1, char2] random.shuffle(characters) attacker = characters[0] defender = characters[1] while char1[\'HP\'] > 0 and char2[\'HP\'] > 0: damage = get_damage(attacker, defender) defender[\'HP\'] -= damage # After an attack, switch roles attacker, defender = defender, attacker if char1[\'HP\'] <= 0: return char2[\'name\'] else: return char1[\'name\']"},{"question":"Tom is a budding coder, and he is practicing some basic string manipulation. He came across a problem where he needs to check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters, but in a different order. Your task is to write a function to determine if the provided strings are anagrams. Input The first input line contains a non-empty string `s1` which consists of lowercase English letters. The second input line contains another non-empty string `s2` which also consists of lowercase English letters. The length of each string does not exceed 100 characters. Output Print \\"YES\\" if the strings are anagrams, otherwise print \\"NO\\". Examples Input listen silent Output YES Input hello world Output NO","solution":"def are_anagrams(s1, s2): Checks if two strings are anagrams of each other. return sorted(s1) == sorted(s2)"},{"question":"You are given a string S containing only lowercase letters. You need to find and return the first character that does not repeat anywhere in the string. If there is no repeating character, return the first character of the string. If the string is empty, return an empty string. Input A single string S (0 ≤ |S| ≤ 100) consisting of only lowercase letters. Output Return a single character — the first non-repeating character in the string, or the first character if every character repeats, or an empty string if the string is empty. Examples Input \\"abacabad\\" Output \\"c\\" Input \\"abacabaabacabaabacabaabacabaabacabaabacabaab\\" Output \\"\\" Input \'\' Output \\"\\"","solution":"def first_non_repeating_char(S): Returns the first non-repeating character in the string. If every character repeats, returns the first character of the string. If the string is empty, returns an empty string. if not S: return \\"\\" char_count = {} for char in S: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in S: if char_count[char] == 1: return char return S[0]"},{"question":"A square matrix is called a Toeplitz matrix if every diagonal from top-left to bottom-right has the same elements. For example, the following matrix is a Toeplitz matrix: [ begin{matrix} 1 & 2 & 3 & 4 5 & 1 & 2 & 3 6 & 5 & 1 & 2 7 & 6 & 5 & 1 end{matrix} ] Write a function that checks if a given matrix is a Toeplitz matrix. The matrix will be represented as a 2D list, where each inner list is a row. # Input The input begins with a single integer ( t ) (1 leq t leq 20), the number of test cases. Each test case starts with two integers ( n ) and ( m ) (1 leq n, m leq 100), which represent the dimensions of the matrix. The next ( n ) lines contain ( m ) integers each, representing the elements of the matrix. # Output For each test case, print \\"YES\\" if the given matrix is a Toeplitz matrix, otherwise print \\"NO\\". # Example Input ``` 2 4 4 1 2 3 4 5 1 2 3 6 5 1 2 7 6 5 1 3 4 1 2 3 4 5 1 2 8 9 5 1 2 ``` Output ``` YES NO ``` # Note In the first test case, the matrix is a Toeplitz matrix because all diagonals contain the same elements. In the second test case, the matrix is not a Toeplitz matrix because the elements in the second diagonal (2, 8) are not the same.","solution":"def is_toeplitz(matrix, n, m): Check if the given n x m matrix is a Toeplitz matrix. for i in range(1, n): for j in range(1, m): if matrix[i][j] != matrix[i - 1][j - 1]: return \\"NO\\" return \\"YES\\" def check_toeplitz_matrices(test_cases): results = [] for matrix, n, m in test_cases: results.append(is_toeplitz(matrix, n, m)) return results def process_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, lines[index].strip().split()) matrix = [] for i in range(n): row = list(map(int, lines[index + 1 + i].strip().split())) matrix.append(row) test_cases.append((matrix, n, m)) index += n + 1 return check_toeplitz_matrices(test_cases)"},{"question":"Given a square grid of size N x N, you need to fill each cell with one of the specified colors such that no two adjacent cells (horizontally, vertically, or diagonally) share the same color. The problem is to determine whether it is possible to fill the grid according to these rules for a given N and a given set of colors. Input The input consists of multiple datasets. Each dataset starts with an integer N (1 <= N <= 10), the size of the grid, followed by an integer C (2 <= C <= 10), the number of available colors. The next line contains C distinct color codes, where each color code is a string of length 1 consisting of uppercase letters. The end of the input is indicated by a line containing a single zero. Output For each dataset, output either \\"POSSIBLE\\" or \\"IMPOSSIBLE\\" on a new line depending on whether it is feasible to fill the grid according to the given rules. Example Input 2 2 A B 3 3 R G B 4 3 X Y Z 0 Output IMPOSSIBLE POSSIBLE POSSIBLE Note In the first dataset, with a 2x2 grid and only two colors, it is impossible to fill the grid because there would be at least two adjacent cells that share the same color, given the constraints. In the second dataset, with a 3x3 grid and three colors, it is possible to fill the grid such that no two adjacent cells share the same color. Similarly, the third dataset is also possible.","solution":"def is_possible_to_fill_grid(n, c): Determines if the grid can be filled such that no two adjacent cells share the same color. if c < 3 and n > 1: return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\" def process_datasets(input_str): Processes the string input containing multiple datasets and returns results for each dataset. lines = input_str.strip().split(\'n\') results = [] i = 0 while i < len(lines): line = lines[i] if line == \'0\': break n, c = map(int, line.split()) colors = lines[i + 1].split() result = is_possible_to_fill_grid(n, c) results.append(result) i += 2 return results"},{"question":"You are given N widgets arranged in a row, numbered 1 through N from left to right. Each widget has a weight assigned to it. You are given Q queries, each of which asks for the cumulative weight of widgets within a specific subrange. 1. First, you are given the weights of the widgets. 2. Then, for each query, you need to determine the sum of the weights from widget L to widget R, inclusive. Constraints * 1 ≤ N ≤ 100,000 * 1 ≤ Q ≤ 100,000 * 0 ≤ weight of each widget ≤ 1,000 * 1 ≤ L ≤ R ≤ N Input The input is given from Standard Input in the following format: N weight_1 weight_2 ... weight_N Q L_1 R_1 L_2 R_2 ... L_Q R_Q Output For each query, print the sum of the weights of the widgets from L to R. Example Input 5 3 1 4 1 5 3 1 3 2 5 1 5 Output 8 11 14","solution":"def cumulative_weights(N, weights, queries): Returns the cumulative weights for each query. :param N: int, the number of widgets :param weights: list of int, weights of the widgets :param queries: list of tuple of int, each tuple represents (L, R) range :return: list of int, cumulative weights for each query # Compute prefix sums prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i - 1] + weights[i - 1] # Respond to queries results = [] for L, R in queries: results.append(prefix_sums[R] - prefix_sums[L - 1]) return results"},{"question":"Given a series of measurements recorded over time, you need to find the maximum difference between any two readings. This will help identify the time period with the largest fluctuation. Write a program that computes the maximum difference between any two readings in a sequence. # Input: The input consists of multiple lines. Each line represents a dataset with space-separated integers, where each integer represents a recorded measurement. The presence of a single zero indicates the end of the input and should not be processed. - Each dataset will contain between 2 to 1000 integers. - Each measurement is a non-negative integer not greater than 1,000,000. # Output: For each dataset, output a single integer indicating the maximum difference between any two readings. # Example: Input: ``` 1 5 9 12 10 20 30 15 100 150 200 250 300 0 ``` Output: ``` 11 20 200 ``` In the first dataset, the largest difference is between 12 and 1 (12 - 1 = 11). In the second dataset, the largest difference is between 30 and 10 (30 - 10 = 20). In the third dataset, the largest difference is between 300 and 100 (300 - 100 = 200).","solution":"def max_difference(datasets): Calculates the maximum difference between any two readings in each dataset. Parameters: datasets: List of strings where each string is a space-separated sequence of integers representing a dataset. Returns: List of integers, where each integer is the maximum difference in the corresponding dataset. results = [] for data in datasets: readings = list(map(int, data.split())) max_diff = max(readings) - min(readings) results.append(max_diff) return results"},{"question":"You are given an array of n integers where each integer represents the height of a person standing in a queue. Some people dislike being in a queue where they can view anyone shorter than themselves standing in front of them. Hence, a person is dissatisfied if there is any person in front of them with a shorter height. Your task is to determine the maximum number of satisfied people in the queue if you rearrange them optimally. Input The first line of input contains a single integer n (1 ≤ n ≤ 100) — the number of people in the queue. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9), where h_i is the height of the i-th person. Output Print one integer — the maximum number of satisfied people in the queue if you rearrange them optimally. Examples Input 5 150 160 140 170 155 Output 5 Input 4 160 150 155 140 Output 4 Note In the first example, by rearranging the heights in non-decreasing order, we get [140, 150, 155, 160, 170]. Here, every person has a clear view, so we have 5 satisfied people. In the second example, [140, 150, 155, 160] is the non-decreasing order of the heights, allowing all 4 people to be satisfied.","solution":"def max_satisfied_people(queue): Returns the maximum number of satisfied people in the queue if they are rearranged optimally so that no one can see a shorter person standing in front of them. return len(queue)"},{"question":"You are given a unique task in a factory. There are n supervisors, and each supervisor manages a certain number of workers. Each worker in the factory must report to exactly one supervisor. Each supervisor is identified by a unique integer ID, and similarly, each worker is also identified by a unique integer ID. You are required to write a program that determines the minimum number of workers any supervisor can have such that all supervisors have at least one worker, and all workers are distributed as evenly as possible among the supervisors. Additionally, the factory manager wants to ensure that supervisors with lower IDs have no fewer workers than supervisors with higher IDs when workers can\'t be distributed evenly. INPUT FORMAT A single line containing two integers n (1 ≤ n ≤ 1000000) and m (n ≤ m ≤ 1000000), where n is the number of supervisors and m is the number of workers. OUTPUT FORMAT Output a single integer which represents the minimum number of workers the least busy supervisor will have under the given constraints. SAMPLE INPUT 4 10 SAMPLE OUTPUT 2 Explanation: There are 4 supervisors and 10 workers. The optimal distribution where no supervisor has fewer workers than those with higher IDs is: Supervisor 1: 3 workers, Supervisor 2: 3 workers, Supervisor 3: 2 workers, Supervisor 4: 2 workers. Hence, the minimum number of workers any supervisor (with the highest ID in this case) will have is 2.","solution":"def min_workers_per_supervisor(n, m): Returns the minimum number of workers any supervisor will have under given constraints. Parameters: n (int): Number of supervisors m (int): Number of workers Returns: int: Minimum number of workers the least busy supervisor will have # Calculate the base number of workers each supervisor will get base_workers = m // n # If there are extra workers, they will be distributed such that supervisors with lower IDs get more workers. extra_workers = m % n # If there are no extra workers, all supervisors have the same number of workers if extra_workers == 0: return base_workers # Otherwise, the least busy supervisor will have base_workers return base_workers"},{"question":"You have been hired by a community to manage their new parking lot. The parking lot is a single row with `N` parking spots in it. The parking lot management system must be able to handle several events: 1. **Park**: Park the car in the first available spot. 2. **Leave**: A car leaves the parking spot. 3. **Check**: Verify and print the current status of all parking spots. You need to implement a program that processes these events and keeps track of the parking spots. **Input:** - The first line of the input contains an integer `N`, the number of parking spots. - The second line contains an integer `E`, the number of events. - The subsequent `E` lines each contain an event: - `Park`: This event means to park a car in the first available spot. - `Leave x`: This event means the car in parking spot `x` leaves. Note that `x` is 1-based index. - `Check`: This event outputs the current status of all parking spots. Use `Empty` for vacant spots and `Occupied` for filled ones. **Output:** For each `Check` event, print a single line with the status of each parking spot separated by a space. **Constraints:** - 1 ≤ N ≤ 1000 - 1 ≤ E ≤ 1000 **Example:** Input: ``` 5 7 Park Park Check Leave 1 Check Park Check ``` Output: ``` Occupied Occupied Empty Empty Empty Empty Occupied Empty Empty Empty Empty Occupied Occupied Empty Empty ``` **Explanation:** - Initially, all spots are empty. - First `Park` event parks a car in spot 1. - Second `Park` event parks a car in spot 2. - First `Check` event outputs the status where spot 1 and 2 are occupied. - `Leave 1` event makes spot 1 empty. - The next `Check` outputs that spot 1 is empty while spot 2 is occupied. - Another `Park` event parks a car in the first available spot (spot 1), making it occupied again. - The final `Check` shows spot 1 and 2 are occupied. Spot 3 is now also occupied after the last `Park` event.","solution":"class ParkingLot: def __init__(self, n): self.spots = [\'Empty\'] * n self.n = n def park(self): for i in range(self.n): if self.spots[i] == \'Empty\': self.spots[i] = \'Occupied\' break def leave(self, x): self.spots[x-1] = \'Empty\' def check(self): return \' \'.join(self.spots) def process_events(n, events): parking_lot = ParkingLot(n) results = [] for event in events: if event == \'Park\': parking_lot.park() elif event.startswith(\'Leave\'): _, x = event.split() parking_lot.leave(int(x)) elif event == \'Check\': results.append(parking_lot.check()) return results"},{"question":"You are given a list consisting of n distinct integers. Your task is to determine whether there exists a pair of integers in the list such that their sum is even. Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each of the next t lines contains an integer n (2 ≤ n ≤ 100) — the number of integers in the list, followed by n integers a_1, a_2, ..., a_n (-10^3 ≤ a_i ≤ 10^3). Output For each test case, output YES if there exists a pair of integers in the list whose sum is even, otherwise output NO. Example Input 4 3 1 4 5 5 7 2 5 3 1 4 6 10 -3 -7 2 1 1 Output YES YES YES NO Note Consider the example: 1. In the first test case, the integers are [1, 4, 5]. The pairs (1, 4) and (4, 5) have sums of 5 and 9, respectively, which are both odd. However, the pair (1, 5) has a sum of 6, which is even, so the answer is YES. 2. In the second test case, the integers are [7, 2, 5, 3, 1]. The pair (2, 5) has a sum of 7, which is odd. However, the pair (3, 5) has a sum of 8, which is even, so the answer is YES. 3. In the third test case, the integers are [6, 10, -3, -7]. The pair (6, 10) has a sum of 16, which is even, so the answer is YES. 4. In the fourth test case, the integers are [1, 1]. Since both integers are the same and 1+1=2 which is even, the answer is YES. If there were two different odd integers whose sum was odd, the answer would be NO, as seen from two different integers 1, 1 on the fourth test case.","solution":"def has_even_sum_pair(t, test_cases): results = [] for case in test_cases: n = case[0] a = case[1:] has_pair = False # Check if there is at least one even and one odd number evens = any(x % 2 == 0 for x in a) odds = any(x % 2 != 0 for x in a) if evens and odds: has_pair = True results.append(\\"YES\\" if has_pair else \\"NO\\") return results"},{"question":"Jack is creating a new online marketplace where sellers can list items for sale, and buyers can purchase them. To help manage the transactions, Jack needs to develop a mechanism that keeps track of all items sold and the total revenue generated by each seller. Your task is to help Jack create this mechanism. **Input:** 1. The first line contains a single integer n (1 ≤ n ≤ 5000) — the number of transactions. 2. Each of the next n lines contains three pieces of information: - The seller\'s name (a non-empty string of up to 20 uppercase and lowercase English letters). - The item name (a non-empty string of up to 20 uppercase and lowercase English letters). - The price of the item (an integer between 1 and 1000 inclusive). Each transaction indicates that the seller sold the item to a buyer at the specified price. A seller can sell multiple items. **Output:** 1. The first line should print an integer m — the number of unique sellers. 2. For the next m lines, print each seller\'s name and their total revenue sorted by the seller\'s name in lexicographical order. Each line should contain the seller\'s name and the total revenue separated by a space. **Examples:** **Input:** ``` 5 Alice Book 50 Bob Pen 20 Alice Pen 30 Charlie Notebook 40 Bob Book 60 ``` **Output:** ``` 3 Alice 80 Bob 80 Charlie 40 ``` **Input:** ``` 3 Eve Toy 25 Eve Game 45 Eve Puzzle 35 ``` **Output:** ``` 1 Eve 105 ``` **Note:** - All sellers and item names are guaranteed to be distinct within each transaction. - In the first example, Alice sold \\"Book\\" and \\"Pen\\" for a total of 50 + 30 = 80. - Bob sold \\"Pen\\" and \\"Book\\" for a total of 20 + 60 = 80. - Charlie sold one \\"Notebook\\" for 40. Freddy did not make any sales, hence he is not in the output.","solution":"def track_revenue(n, transactions): Tracks the total revenue generated by each seller given a list of transactions. :param n: int: The number of transactions :param transactions: list of tuples: Each transaction is a tuple containing seller name, item name, and price :return: list of tuples: Each tuple contains seller\'s name and total revenue sorted by the seller\'s name. from collections import defaultdict revenue = defaultdict(int) for transaction in transactions: seller, item, price = transaction revenue[seller] += price sorted_revenue = sorted(revenue.items()) result = [(len(sorted_revenue))] + sorted_revenue return result"},{"question":"A busy city boasts a dense traffic network with multiple roads connecting intersections. Each road has a weight representing the time it takes to travel from one intersection to another. Using dynamic traffic data, you need to navigate from a given starting intersection to a destination intersection in the least amount of time. You are provided with a list of roads (each described by a pair of intersections and a travel time between them), alongside the number of intersections and roads in the city. The input will contain multiple intersections and roads described as follows: - The first line contains two integers n and m (2 ≤ n ≤ 50, 1 ≤ m ≤ 200), where n is the number of intersections and m is the number of roads. - The following m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100), representing a bidirectional road between intersections u and v with a travel time of w minutes. - The next line contains two integers s and t (1 ≤ s, t ≤ n, s ≠ t), where s is the starting intersection, and t is the destination intersection. Your task is to determine the minimum travel time required to get from intersection s to intersection t. If there\'s no possible path between the two intersections, print -1. Input The first line contains two space-separated integers n and m (2 ≤ n ≤ 50, 1 ≤ m ≤ 200) — the number of intersections and roads. Next m lines each describe a road with three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100). The next line contains two space-separated integers s and t (1 ≤ s, t ≤ n, s ≠ t) — the starting and destination intersections. Output Print a single integer representing the minimum travel time to get from intersection s to intersection t. If there\'s no path between these intersections, print -1. Examples Input 5 6 1 2 4 1 3 2 2 3 5 2 4 10 3 5 3 4 5 1 1 5 Output 5 Input 3 1 1 2 10 1 3 Output -1","solution":"import heapq from collections import defaultdict, deque def find_shortest_path(n, m, roads, s, t): graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm pq = [(0, s)] distances = {i: float(\'inf\') for i in range(1, n+1)} distances[s] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_node == t: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 if distances[t] == float(\'inf\') else distances[t]"},{"question":"You are a software engineer working for a social media platform, and you need to implement a new feature that displays trending hashtags. Your task is to write a function that takes in a list of posts, where each post is represented as a string, and a number k. The function should return the top k most frequently used hashtags across all posts. If two hashtags have the same frequency, they should be sorted in lexicographical order. A hashtag is defined as any sequence of non-space characters that begins with the \'#\' character. It should be case-insensitive, meaning \'#HashTag\', \'#hashtag\', and \'#HASHTAG\' are considered the same hashtag. # Function Signature ```python def top_k_hashtags(posts: List[str], k: int) -> List[str]: pass ``` # Input - `posts`: A list of strings, where each string represents a post. The length of the list is between 1 and 10,000 and each string length is between 1 and 280 characters. - `k`: An integer representing the number of top hashtags to return. (1 ≤ k ≤ 100) # Output - A list of strings representing the top k most frequent hashtags in descending order of frequency. If two hashtags have the same frequency, they should be sorted lexicographically. # Examples Example 1 ```python posts = [ \\"#fun #sun #beach #Happy\\", \\"#fun #Fun #enjoy\\", \\"#Fun #Sun #Enjoy #happy #sun\\", ] k = 2 ``` Output: ```python [\\"#fun\\", \\"#sun\\"] ``` Example 2 ```python posts = [ \\"#apple #banana #apple\\", \\"#Apple #Banana\\", \\"#apple\\", ] k = 1 ``` Output: ```python [\\"#apple\\"] ``` # Notes - The function should be case-insensitive when counting the hashtags. - The results should include the correct casing as they originally appear in the posts. - Make sure your solution is optimized for performance given the constraints.","solution":"from typing import List import re from collections import Counter def top_k_hashtags(posts: List[str], k: int) -> List[str]: Finds the top k most frequently used hashtags across all posts. hashtag_counter = Counter() # Regex to identify hashtags hashtag_regex = re.compile(r\\"#w+\\") for post in posts: hashtags = hashtag_regex.findall(post) normalized_hashtags = [hashtag.lower() for hashtag in hashtags] hashtag_counter.update(normalized_hashtags) # Sorting logic for hashtags sorted_hashtags = sorted(hashtag_counter.items(), key=lambda x: (-x[1], x[0])) # Selecting top k hashtags (original case) result = [item[0] for item in sorted_hashtags[:k]] return result"},{"question":"You are given a string `s` containing only lowercase letters and a character `c`. Your task is to count how many times `c` appears in `s`. **Input** The input consists of a single line containing the string `s` (1 ≤ |s| ≤ 100) followed by a space and the character `c`. **Output** Output an integer denoting the number of times `c` appears in `s`. **Examples** **Input** ``` hello l ``` **Output** ``` 2 ``` **Input** ``` abcdefg a ``` **Output** ``` 1 ``` **Input** ``` mississippi s ``` **Output** ``` 4 ``` **Input** ``` programming r ``` **Output** ``` 2 ```","solution":"def count_character_occurrences(s, c): Returns the number of times character c appears in string s. return s.count(c) # Helper function to parse input and call main function def process_input(input_line): Parses the input line to split the string and character, and returns the count of occurrences of the character in the string. s, c = input_line.rsplit(\' \', 1) # Split from the right return count_character_occurrences(s, c)"},{"question":"In a fantasy kingdom, there are several cities connected by bidirectional roads. Each city has a certain number of coins stored in it. As a royal messenger, your task is to collect coins from multiple cities by traveling along the roads. However, to minimize the risk of theft, you must plan your route such that each city is visited at most once. Given the number of cities `n`, the number of roads `m`, the amount of coins in each city, and the connections between the cities, find the maximum number of coins you can collect starting from any city. You can start from any city and move to directly connected cities, but you cannot visit any city more than once during your journey. Input: The input consists of multiple datasets. Each dataset is given in the following format: ``` n m coins_1 coins_2 ... coins_n u_1 v_1 u_2 v_2 ... u_m v_m ``` Where: - `n` (1 ≤ n ≤ 1000) is the number of cities. - `m` (0 ≤ m ≤ 5000) is the number of bidirectional roads. - `coins_i` (1 ≤ coins_i ≤ 10000) represents the number of coins in the i-th city. - `u_i` and `v_i` are the cities connected by the i-th road (1 ≤ u_i, v_i ≤ n). The end of the input is indicated by a line containing just: ``` 0 0 ``` Output: For each dataset, output a single integer which is the maximum number of coins that can be collected. Sample Input: ``` 4 4 5 10 20 15 1 2 2 3 3 4 4 1 3 2 7 2 3 1 2 2 3 0 0 ``` Sample Output: ``` 50 12 ``` Explanation: For the first dataset, the optimal route is to visit all the cities (since it\'s a cycle): City 1 -> City 2 -> City 3 -> City 4, collecting 5 + 10 + 20 + 15 = 50 coins. For the second dataset, there are only two roads. To maximize the collected coins, visiting City 2 and City 3 yields the maximum sum: City 2 (7 coins) -> City 3 (3 coins), collecting 7 + 3 = 10 coins. However, another optimal route is just visiting City 2 and City 1, collecting 7 + 2 = 9 coins, hence the maximum over all possible paths is 12 coins.","solution":"from sys import setrecursionlimit, stdin from collections import defaultdict # Increase recursion limit to handle large input sizes in a dfs setrecursionlimit(2000) def max_coins(n, m, coins, roads): graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def dfs(city, visited): visited.add(city) total_coins = coins[city] max_subpath = 0 for neighbor in graph[city]: if neighbor not in visited: max_subpath = max(max_subpath, dfs(neighbor, visited)) visited.remove(city) return total_coins + max_subpath max_coins_collected = 0 for city in range(n): max_coins_collected = max(max_coins_collected, dfs(city, set())) return max_coins_collected def process_input(input_data): lines = input_data.strip().split(\\"n\\") results = [] i = 0 while i < len(lines): n, m = map(int, lines[i].split()) if n == 0 and m == 0: break i += 1 coins = list(map(int, lines[i].split())) i += 1 roads = [] for _ in range(m): u, v = map(int, lines[i].split()) roads.append((u-1, v-1)) # convert to zero indexing i += 1 results.append(max_coins(n, m, coins, roads)) return results input_data = 4 4 5 10 20 15 1 2 2 3 3 4 4 1 3 2 7 2 3 1 2 2 3 0 0 print(\\"n\\".join(map(str, process_input(input_data))))"},{"question":"You have been given an integer array `nums` consisting of `n` positive integers. You are required to find the maximum sum of a contiguous subarray with the constraint that the subarray does not contain any two adjacent elements of the original array. For example, if the input array is `[2, 1, 4, 9]`, the subarrays `[2, 4, 9]`, `[2, 9]`, etc., are valid because they do not include adjacent elements of the original array. However, subarrays like `[1, 4]`, `[4, 9]`, or `[2, 1, 4]` are invalid because they contain pairs of adjacent elements. Input The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the length of the array. The second line contains `n` integers `nums[i]` (1 ≤ nums[i] ≤ 10^4) — the elements of the array. Output Print a single integer — the maximum sum of a contiguous subarray with the given constraint. Examples Input 4 2 1 4 9 Output 11 Note In the example above, the maximum sum subarray with the constraint that it does not contain adjacent elements is `[2, 9]` which sums up to `11`. Another valid subarray could be `[2, 4, 9]` which sums up to `15`, but since no two elements should be adjacent, such a subarray is invalid by the problem\'s constraints.","solution":"def max_non_adjacent_subarray_sum(nums): Function to find the maximum sum of a subarray with no two adjacent elements. Params: nums: List[int] - list of positive integers Returns: int - maximum sum of a contiguous subarray with non-adjacent elements if not nums: return 0 n = len(nums) if n == 1: return nums[0] # Initialize an array to store maximum sum up to index i, excluding adjacent elements max_sum = [0] * n max_sum[0] = nums[0] if n > 1: max_sum[1] = max(nums[0], nums[1]) for i in range(2, n): max_sum[i] = max(max_sum[i-1], nums[i] + max_sum[i-2]) return max(max_sum[-1], max_sum[-2]) # Example Usage # nums = [2, 1, 4, 9] # print(max_non_adjacent_subarray_sum(nums)) # Output should be 11"},{"question":"Lisa is a big fan of fruit smoothies, and she runs a small fruit drink shop. Every morning, she receives an inventory of different types of fruits. Due to high demand, she needs to track how many types of fruits she can use in one day, with a new condition: she can only use each type of fruit at most once. To optimize her supply, she wants to know the maximum number of unique fruit types she can use in her smoothies given the inventory she receives. Write a function `maxUniqueFruitTypes` that takes an integer array, `inventory`, where `inventory[i]` represents the count of the fruit type `i`, and returns the maximum number of unique fruit types Lisa can use, and the specific unique fruit type indices she selected. **Input** - An integer array `inventory` of length `n` (1 ≤ n ≤ 10^6), where each element represents the count of a particular fruit type (0 ≤ inventory[i] ≤ 10^6). **Output** A tuple containing two elements: 1. An integer representing the maximum number of unique fruit types Lisa can use. 2. A list of the indices of the fruits selected. **Examples** ```python maxUniqueFruitTypes([1, 2, 0, 1]) Output: (3, [0, 1, 3]) maxUniqueFruitTypes([0, 0, 0, 4, 5]) Output: (2, [3, 4]) ``` **Explanation** In the first example, the inventory has 4 fruit types with counts [1, 2, 0, 1]. She can use fruit types 0, 1, and 3 each once, so the total will be 3 unique fruit types. In the second example, the inventory has 5 fruit types with counts [0, 0, 0, 4, 5]. She can use fruit types 3 and 4 once each, so the total will be 2 unique fruit types.","solution":"def maxUniqueFruitTypes(inventory): selected_fruits = [] for i, count in enumerate(inventory): if count > 0: selected_fruits.append(i) return (len(selected_fruits), selected_fruits)"},{"question":"The world of competitive gaming introduces an exciting game that has caught the attention of all game enthusiasts. The game involves controlling a spaceship in a grid. The spaceship can move up, down, left, or right, and is tasked to collect as many stars as possible while avoiding asteroids that are spread throughout the grid. You are given the starting position of the spaceship and the final destination. The goal is to find out if the spaceship can reach its destination without crashing into an asteroid. Movement is restricted to the grid within the boundary dimensions and the spaceship cannot move diagonally. Input Format: - The first line contains two integers n and m, representing the dimensions of the grid. - The second line contains an integer k, which indicates the number of asteroids present in the grid. - The next k lines contain the positions of the asteroids in the grid. - The next line contains two integers x1 and y1, which represent the starting position of the spaceship. - The final line contains two integers x2 and y2, which represent the destination position of the spaceship. Output Format: - Print \\"Safe landing!\\" if the spaceship can reach the destination without encountering any asteroid. - Print \\"Crash!\\" if the spaceship encounters an asteroid before reaching the destination. Constraints: 1 ≤ n, m ≤ 50 0 ≤ k ≤ 2500 0 ≤ x1, y1, x2, y2 < n, m 0 ≤ asteroid positions < n, m SAMPLE INPUT: 5 5 3 1 1 3 3 4 4 0 0 4 4 SAMPLE OUTPUT: Safe landing!","solution":"def is_path_safe(n, m, k, asteroids, x1, y1, x2, y2): from collections import deque # Create a grid to mark the presence of asteroids grid = [[True] * m for _ in range(n)] for a in asteroids: grid[a[0]][a[1]] = False # Directions for Up, Down, Left, and Right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Perform BFS to find the path queue = deque([(x1, y1)]) visited = set((x1, y1)) while queue: x, y = queue.popleft() if (x, y) == (x2, y2): return \\"Safe landing!\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"Crash!\\""},{"question":"You are given an array of positive integers of length N. Your task is to determine the minimum positive integer that does not appear in the array. Constraints: * 1 ≤ N ≤ 100000 * 1 ≤ A_i ≤ 1000000 * All values in input are integers. Input: Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output: Print a single line containing the minimum positive integer that does not appear in the array. Examples: Input: 3 1 2 0 Output: 3 Input: 5 3 4 -1 1 2 Output: 5","solution":"def find_missing_positive(n, arr): Returns the minimum positive integer that does not appear in the array. # Create a set of the given array elements number_set = set(arr) # Start checking from 1 upwards current_number = 1 while current_number in number_set: current_number += 1 return current_number"},{"question":"In a faraway galaxy, there is a planet called Zygor. On Zygor, there exists a rare mineral called Zyxenite which powers the entire planet. The planet\'s government has a list of mines, each with a certain amount of Zyxenite. However, due to limited resources, the government can only operate a limited number of mines. The government wants to maximize the amount of Zyxenite mined within the constraints of their resources. You are given a list of mines, each represented by a positive integer which denotes the amount of Zyxenite that mine contains. You are also given an integer K, which represents the maximum number of mines that the government can operate. Your task is to determine the maximum amount of Zyxenite that can be mined by operating at most K mines. # Constraints 1. 1 ≤ N ≤ 10^5 (N is the number of mines) 2. 1 ≤ K ≤ N 3. 1 ≤ amount of Zyxenite in each mine ≤ 10^9 # Input - The first line contains two integers N and K. - The second line contains N integers representing the amount of Zyxenite in each mine. # Output - Output a single integer, the maximum amount of Zyxenite that can be mined by operating at most K mines. # SAMPLE INPUT 6 3 10 20 30 40 50 60 # SAMPLE OUTPUT 150 # Explanation By operating the mines with the amounts 30, 50, and 60, the total Zyxenite mined is 30 + 50 + 60 = 150. This is the maximum possible with the limit of operating 3 mines.","solution":"def max_zyxenite(n, k, mines): Returns the maximum amount of Zyxenite that can be mined by operating at most K mines. :param n: Number of mines :param k: Maximum number of mines that can be operated :param mines: List of integers, where each integer represents the amount of Zyxenite in a mine :return: Maximum amount of Zyxenite that can be mined # Sort the mines in descending order to get the largest amounts first mines_sorted = sorted(mines, reverse=True) # Sum the first K elements from the sorted list return sum(mines_sorted[:k])"},{"question":"Palindrome Chain Length A palindrome is a word or phrase that reads the same forwards and backwards. For example, \\"racecar\\" and \\"level\\" are palindromes. Given a non-negative integer n, your task is to determine the minimum number of steps required to make n a palindrome by adding the number to its reverse until it becomes a palindrome. For any given integer n, perform the following steps: 1. Check if n is a palindrome. If it is, return 0 steps. 2. If n is not a palindrome, calculate the reverse of n, add n to its reverse, and repeat from step 1 with the new result. Write a program to determine the minimum number of steps required to make the given integer n a palindrome. Input The input consists of multiple test cases. Each test case is a non-negative integer n (0 <= n <= 10^6). The input ends with a line containing the number -1, which should not be processed. Output For each test case, output the number of steps required to make the integer n a palindrome. Example Input 123 87 4884 -1 Output 1 4 0 Explanation - For 123: 123 + 321 = 444 (1 step) - For 87: 87 + 78 = 165, 165 + 561 = 726, 726 + 627 = 1353, 1353 + 3531 = 4884 (4 steps) - For 4884: Already a palindrome (0 steps)","solution":"def reverse_number(n): return int(str(n)[::-1]) def is_palindrome(n): s = str(n) return s == s[::-1] def palindrome_chain_length(n): steps = 0 while not is_palindrome(n): n = n + reverse_number(n) steps += 1 return steps def process_palindrome_chain_length(nums): results = [] for n in nums: if n == -1: break results.append(palindrome_chain_length(n)) return results"},{"question":"In a galaxy far, far away, there is a planet called Algoria. Algoria has a grid system of roads with N rows and M columns. Algorians are known for their unique delivery system which follows very specific rules. They use robots to deliver parcels from one point in the grid to another. The delivery robot can move either right or down but cannot move left or up. Given the starting point (1,1) and the destination point (N,M), determine the number of distinct paths the robot can take to deliver the parcels. Input: The first line of input contains an integer T denoting the number of test cases. Each of the next T lines contain two integers N and M representing the number of rows and columns of the grid. Output: For each test case, output a single integer which is the number of distinct paths from (1, 1) to (N, M). Constraints: 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 SAMPLE INPUT: 2 2 2 3 2 SAMPLE OUTPUT: 2 3","solution":"def unique_paths(N, M): Returns the number of distinct paths from the top-left to the bottom-right corner of an N x M grid. The robot can only move right or down. # Create a 2D array to store the number of paths to each cell dp = [[1] * M for _ in range(N)] # Calculate the number of paths for each cell for i in range(1, N): for j in range(1, M): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right corner will have the result return dp[N-1][M-1] def number_of_paths_for_cases(test_cases): Process multiple test cases to determine the number of distinct paths for each. results = [] for N, M in test_cases: results.append(unique_paths(N, M)) return results if __name__ == \\"__main__\\": T = int(input()) test_cases = [] for _ in range(T): N, M = map(int, input().split()) test_cases.append((N, M)) results = number_of_paths_for_cases(test_cases) for result in results: print(result)"},{"question":"John is working on a new software application that involves manipulating strings. He needs a function to detect whether two given strings are anagrams of each other. Two strings are anagrams if one string can be formed by rearranging the letters of the other using each letter exactly once. Write a function that takes two strings as input and determines if they are anagrams. Your function should return \\"ANAGRAM\\" if the strings are anagrams of each other, and \\"NOT ANAGRAM\\" otherwise. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 1000), the number of test cases. The description of the test cases follows: Each test case consists of two lines: - The first line contains string s1 (1 ≤ |s1| ≤ 10^5), the first string. - The second line contains string s2 (1 ≤ |s2| ≤ 10^5), the second string. Output For each test case, output a single line containing \\"ANAGRAM\\" if the two strings are anagrams, or \\"NOT ANAGRAM\\" if they are not. Example Input 3 listen silent triangle integral apple pale Output ANAGRAM ANAGRAM NOT ANAGRAM Note In the first test case, \\"listen\\" and \\"silent\\" are anagrams because both strings can be rearranged to form each other. In the second test case, \\"triangle\\" and \\"integral\\" are anagrams for the same reason. In the third test case, \\"apple\\" and \\"pale\\" are not anagrams because they do not contain the same letters in the same frequency.","solution":"def are_anagrams(s1, s2): Determines if two strings are anagrams of each other. Returns \\"ANAGRAM\\" if they are anagrams, \\"NOT ANAGRAM\\" otherwise. if sorted(s1) == sorted(s2): return \\"ANAGRAM\\" else: return \\"NOT ANAGRAM\\" def anagram_checker(test_cases): Processes multiple test cases to check if pairs of strings are anagrams. Parameters: test_cases (list): A list of tuples where each tuple contains two strings. Returns: list: A list of results (\\"ANAGRAM\\" or \\"NOT ANAGRAM\\") for each test case. results = [] for s1, s2 in test_cases: result = are_anagrams(s1, s2) results.append(result) return results"},{"question":"A reversing robot is placed at the starting point (0, 0) on an infinite 2D plane. The robot can move in 8 possible directions: North, South, East, West, North-East, North-West, South-East, and South-West. However, the robot has a peculiar mode of movement where it can only move straight for a given number of steps, and then it must reverse the exact same number of steps in the opposite direction before it can change its direction. Given an initial direction and a sequence of moves, determine the final coordinates of the robot after executing all moves. Each move is provided as a pair: a direction and the number of steps to move. Additionally, after taking those steps, the robot will immediately reverse those steps. For simplicity, assume all moves are valid and the robot always starts from the origin. Directions are denoted as follows: - \'N\' for North - \'S\' for South - \'E\' for East - \'W\' for West - \'NE\' for North-East - \'NW\' for North-West - \'SE\' for South-East - \'SW\' for South-West Input The first line contains an integer t — the number of test cases (1 ≤ t ≤ 1000). Each of the next t lines contains a series of moves for a single test case. Each series of moves begins with an integer n (1 ≤ n ≤ 1000) that represents the number of moves, followed by n pairs, each consisting of a direction as a string and an integer k (1 ≤ k ≤ 100). Output For each test case, print the final coordinates (x, y) of the robot after executing its moves, considering the reversing rule. Example Input 2 3 N 2 E 3 S 1 4 NW 2 NE 4 SE 1 SW 3 Output 0 0 0 0 Explanation In the first case, the robot moves North 2 steps to (0, 2), then reverses back to (0, 0), moves East 3 steps to (3, 0), reverses back to (0, 0), moves South 1 step to (0, -1), and reverses back to (0, 0). Therefore, the final position is (0, 0). In the second case, the robot undergoes a series of reversible moves ending at (0, 0).","solution":"def calculate_final_position(num_cases, cases): directions = { \'N\': (0, 1), \'S\': (0, -1), \'E\': (1, 0), \'W\': (-1, 0), \'NE\': (1, 1), \'NW\': (-1, 1), \'SE\': (1, -1), \'SW\': (-1, -1) } results = [] for case in cases: moves = case[1:] x, y = 0, 0 for i in range(0, len(moves), 2): direction = moves[i] steps = moves[i + 1] dx, dy = directions[direction] x += dx * steps y += dy * steps # Reversing the same steps x -= dx * steps y -= dy * steps results.append((x, y)) return results # Helper function to convert input format def parse_input(input_str): lines = input_str.strip().split(\'n\') num_cases = int(lines[0]) cases = [] for line in lines[1:]: parts = line.split() n = int(parts[0]) moves = [] for j in range(1, 2*n + 1, 2): moves.append(parts[j]) moves.append(int(parts[j + 1])) cases.append([n] + moves) return num_cases, cases"},{"question":"You are given an m x n grid initially filled with zeros. You have a list of operations where each operation is represented as a triplet (index1, index2, increment). For each operation, you increment the value of each cell in the grid starting from (index1, index2) till the bottom-right corner by the given increment value. Determine the final state of the grid after performing all the operations. Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000) - the number of rows and columns of the grid respectively. The second line contains an integer k (1 ≤ k ≤ 1000) - the number of operations. The next k lines each contains three integers index1, index2, increment (0 ≤ index1 < m, 0 ≤ index2 < n, 1 ≤ increment ≤ 1000), describing each operation. Output Print the final state of the grid after performing all the operations. Examples Input 3 3 2 0 0 1 1 1 3 Output 1 1 1 1 4 4 1 4 4 Input 4 4 3 1 1 2 2 2 3 0 0 1 Output 1 1 1 1 1 3 3 3 1 3 6 6 1 3 6 6 Note In the first example: - The first operation increments all the values from (0, 0) to the bottom-right corner by 1. - The second operation increments all the values from (1, 1) to the bottom-right corner by 3. In the second example: - The first operation increments all the values from (1, 1) to the bottom-right corner by 2. - The second operation increments all the values from (2, 2) to the bottom-right corner by 3. - The third operation increments all the values from (0, 0) to the bottom-right corner by 1.","solution":"def update_grid(m, n, k, operations): grid = [[0] * n for _ in range(m)] for op in operations: index1, index2, increment = op for i in range(index1, m): for j in range(index2, n): grid[i][j] += increment return grid def format_grid(grid): return \'n\'.join(\' \'.join(map(str, row)) for row in grid)"},{"question":"A company has m employees and n projects. Each project can be completed by exactly one employee. The company wants to assign the projects to the employees. However, each employee has specific projects they can complete. You are given a list of employees and their corresponding project preferences in the form of a bipartite graph where each employee can be matched with certain projects. Your task is to find the maximum number of projects that can be assigned, considering the preferences of employees. Input The first line contains a single integer t (1 ≤ t ≤ 100) – the number of test cases. The first line of each test case contains two integers m and n (1 ≤ m, n ≤ 200) – the number of employees and the number of projects. Each of the next m lines corresponds to an employee i (1 ≤ i ≤ m). Each line starts with an integer k (0 ≤ k ≤ n) – the number of projects employee i can complete. Then follow k integers, each representing an index of a project that employee i can be assigned (1 ≤ index ≤ n). It\'s guaranteed that there is no cyclic dependency and the total sum of all k over all test cases does not exceed 10^4. Output For each test case, print a single integer – the maximum number of projects that can be assigned. Example Input 3 4 4 2 1 2 2 2 3 1 4 1 1 3 3 2 1 2 1 3 2 2 3 2 2 2 1 2 1 2 Output 4 3 2 Note In the first test case, the optimal assignment is: - Employee 1 to Project 1 - Employee 2 to Project 2 - Employee 3 to Project 4 - Employee 4 to Project 3 In the second test case, the optimal assignment is: - Employee 1 to Project 1 - Employee 2 to Project 3 - Employee 3 to Project 2 In the third test case, the optimal assignment is: - Employee 1 to Project 1 - Employee 2 to Project 2","solution":"def maximum_project_assignment(t, test_cases): def bpm(u, match_r, seen): for v in adj[u]: if not seen[v]: seen[v] = True if match_r[v] == -1 or bpm(match_r[v], match_r, seen): match_r[v] = u return True return False results = [] for case in test_cases: m, n, preferences = case adj = [[] for _ in range(m)] for i in range(m): adj[i] = [p - 1 for p in preferences[i]] match_r = [-1] * n result = 0 for i in range(m): seen = [False] * n if bpm(i, match_r, seen): result += 1 results.append(result) return results # Example on how the function can be called: t = 3 test_cases = [ (4, 4, [[1, 2], [2, 3], [4], [1]]), (3, 3, [[1, 2], [3], [2, 3]]), (2, 2, [[1, 2], [2]]) ] output = maximum_project_assignment(t, test_cases) print(output) # Expected output: [4, 3, 2]"},{"question":"Vlad is an enthusiastic programmer who loves optimizing code for better performance. He is currently working on a data analysis project that requires handling time-series data. He needs to store, update, and query the data efficiently. Each time-series data point consists of a timestamp ti and a value vi. Vlad wants to perform three different types of operations on his time-series data: 1. Insert a data point with timestamp ti and value vi. 2. Delete the data point with timestamp ti. 3. Query the maximum value in the time interval [t1, t2]. Help Vlad by implementing a system that efficiently handles these operations. Input The first line contains an integer q (1 ≤ q ≤ 100000) — the number of operations. Each of the next q lines describes an operation: * 1 ti vi (1 ≤ ti, vi ≤ 108) — Add a data point with timestamp ti and value vi. * 2 ti (1 ≤ ti ≤ 108) — Delete the data point with timestamp ti. It is guaranteed that there is at least one such data point. * 3 t1 t2 (1 ≤ t1 ≤ t2 ≤ 108) — Query to find the maximum value in the time interval [t1, t2]. It is guaranteed that there is at least one data point within the specified range. Output For each query of the third type, print one integer — the maximum value in the specified time interval. Example Input 7 1 1 100 1 2 200 1 5 150 3 1 5 2 2 3 1 5 3 2 6 Output 200 150 150 Note In the example, initially, three data points are added: (1, 100), (2, 200), and (5, 150). The first query asks for the maximum value in the interval [1, 5], which is 200. After deleting the data point with timestamp 2, the second query asks for the maximum value in the interval [1, 5], which is now 150. The third query asks for the maximum value in the interval [2, 6], which is also 150.","solution":"import bisect class TimeSeries: def __init__(self): self.timestamps = [] self.data = {} def insert(self, ti, vi): if ti in self.data: self.delete(ti) # delete old value if exists to keep data consistent bisect.insort(self.timestamps, ti) self.data[ti] = vi def delete(self, ti): if ti in self.data: self.timestamps.remove(ti) del self.data[ti] def query(self, t1, t2): start = bisect.bisect_left(self.timestamps, t1) end = bisect.bisect_right(self.timestamps, t2) max_val = float(\'-inf\') for i in range(start, end): max_val = max(max_val, self.data[self.timestamps[i]]) return max_val def process_operations(operations): ts = TimeSeries() results = [] for operation in operations: if operation[0] == 1: _, ti, vi = operation ts.insert(ti, vi) elif operation[0] == 2: _, ti = operation ts.delete(ti) elif operation[0] == 3: _, t1, t2 = operation results.append(ts.query(t1, t2)) return results"},{"question":"Palindrome Transformation: Given a string `s` of length `n` (1 ≤ n ≤ 10^5) consisting of lowercase alphabets, you are required to transform `s` into a palindrome. You can perform the following operation any number of times: - Select any index `i` (1 ≤ i ≤ n) and replace `s[i]` with any lowercase alphabet from \'a\' to \'z\'. Your task is to determine the minimum number of operations required to make `s` a palindrome. A string is a palindrome if it reads the same backward as forward. Input: - The first line contains an integer `t` (1 ≤ t ≤ 10^3): the number of test cases. - Each of the next `t` lines contains a string `s`. Output: - For each test case, output a single integer representing the minimum number of operations required to transform the string into a palindrome. Example: Input: 3 abca racecar abcd Output: 1 0 2","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to transform a string s into a palindrome. n = len(s) operations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations def solve(test_cases): results = [] for s in test_cases: results.append(min_operations_to_palindrome(s)) return results"},{"question":"You are given an inventory of items used in a role-playing game. Each item has a certain weight and a specific value. Your task is to select a subset of items to carry in a backpack that has a maximum weight capacity. Your goal is to maximize the total value of the items in the backpack without exceeding the weight limit. Input The first line of the input consists of two integers n (1 ≤ n ≤ 100) and W (1 ≤ W ≤ 1000), where n is the number of items, and W is the maximum weight capacity of the backpack. Each of the next n lines contains two integers wi (1 ≤ wi ≤ 1000) and vi (1 ≤ vi ≤ 1000), where wi is the weight of the i-th item and vi is the value of the i-th item. Output Print a single integer — the maximum total value of the items that can be carried in the backpack. Examples Input 4 10 5 10 4 40 6 30 4 50 Output 90 Input 3 50 10 60 20 100 30 120 Output 220","solution":"def knapsack(n, W, items): Compute the maximum value that can be carried in a backpack with weight capacity W. :param n: Number of items :param W: Maximum weight capacity of the backpack :param items: List of tuples where each tuple contains (weight, value) of an item :return: Maximum total value of items that can be carried # Create a DP array to store maximum value for each weight from 0 to W dp = [0] * (W + 1) for weight, value in items: # Traverse the weights from W to weight - 1 to avoid recomputation for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) return dp[W] # Example usage: # n = 4 # W = 10 # items = [(5, 10), (4, 40), (6, 30), (4, 50)] # print(knapsack(n, W, items)) # Output: 90"},{"question":"Warehouse Optimization In a large warehouse, items are stored in square boxes of various sizes. To optimize the storage, any box can be placed inside a larger box that has a larger side length. You have a list of boxes and need to find the minimum number of visible boxes after the optimization. A box is no longer visible if it is placed inside another box. Input The input consists of multiple test cases. Each test case starts with an integer N (1 <= N <= 1000), representing the number of boxes. Followed by N integers, each representing the side length of a box. The input ends when N is 0. Output For each test case, output the minimum number of visible boxes in one line. Sample Input 3 4 5 6 4 2 1 4 3 2 7 7 0 Sample Output 1 1 2 Explanation In the first test case, all boxes can be nested inside the largest one with a side length of 6. In the second test case, we can nest boxes 1, 2, and 3 in the box with a side length of 4, leaving only one visible box. In the third test case, since both boxes have the same side length of 7, neither can be nested inside the other, leaving both boxes visible.","solution":"def min_visible_boxes(test_cases): results = [] for test_case in test_cases: if test_case[0] == 0: break N, boxes = test_case[0], test_case[1:] boxes_sorted = sorted(boxes, reverse=True) visible_boxes = 0 while boxes_sorted: current_box = boxes_sorted.pop(0) visible_boxes += 1 boxes_sorted = [box for box in boxes_sorted if box >= current_box] results.append(visible_boxes) return results def process_input(input_data): lines = input_data.strip().split(\'n\') test_cases = [] i = 0 while i < len(lines): N = int(lines[i]) if N == 0: break boxes = list(map(int, lines[i+1].split())) test_cases.append([N] + boxes) i += 2 return test_cases # To be used in actual implementation or testing def main(input_data): test_cases = process_input(input_data) return min_visible_boxes(test_cases)"},{"question":"Write a function that takes two integers n and m as input, where n is the number of nodes and m is the number of edges in a graph. Each of the next m lines contains two integers u and v indicating an undirected edge between nodes u and v. Determine if it is possible to color the graph using exactly two colors such that no two adjacent nodes share the same color. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". Constraints * 1≦n≦10^5 * 0≦m≦10^5 * 1≦u,v≦n Input The input is given from Standard Input in the following format: n m u1 v1 u2 v2 ... um vm Output Output \\"YES\\" if the graph can be 2-colored, otherwise output \\"NO\\". Examples Input 4 4 1 2 2 3 3 4 4 1 Output YES Input 3 3 1 2 2 3 3 1 Output NO","solution":"def is_bipartite(n, m, edges): from collections import defaultdict, deque # Build the adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Initialize the color dictionary color = {} # Try to color the graph using BFS def bfs(start): queue = deque([start]) color[start] = 0 # Start by coloring the first node with color 0 while queue: node = queue.popleft() current_color = color[node] next_color = 1 - current_color for neighbor in graph[node]: if neighbor not in color: color[neighbor] = next_color queue.append(neighbor) elif color[neighbor] == current_color: return False return True # Check all disconnected components of the graph for node in range(1, n + 1): if node not in color: if not bfs(node): return \\"NO\\" return \\"YES\\" # Example usage def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] for i in range(m): u = int(data[2 + 2 * i]) v = int(data[3 + 2 * i]) edges.append((u, v)) result = is_bipartite(n, m, edges) print(result)"},{"question":"You are given an array of n integers and q queries. Each query is given as a triplet (l, r, k), where you need to count the number of elements in the subarray from index l to r (inclusive) that are divisible by k. Input The first line contains one integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 105) — the elements of the array. The third line contains one integer q (1 ≤ q ≤ 105) — the number of queries. Then q lines follow, each containing three integers li, ri, ki (1 ≤ li ≤ ri ≤ n, 1 ≤ ki ≤ 105) representing each query. Output Print q lines. Each line must contain the result of the corresponding query: the number of elements in the subarray from li to ri that are divisible by ki. Examples Input 5 1 2 3 4 5 3 1 3 1 2 4 2 1 5 3 Output 3 2 1 Input 4 8 16 32 64 2 1 4 8 2 3 16 Output 4 2 Note The first example: 1. For the query (1, 3, 1), the subarray is [1, 2, 3]. All elements are divisible by 1, hence the answer is 3. 2. For the query (2, 4, 2), the subarray is [2, 3, 4]. Only elements 2 and 4 are divisible by 2, hence the answer is 2. 3. For the query (1, 5, 3), the subarray is [1, 2, 3, 4, 5]. Only element 3 is divisible by 3, hence the answer is 1. The second example: 1. For the query (1, 4, 8), the subarray is [8, 16, 32, 64]. All four elements are divisible by 8, hence the answer is 4. 2. For the query (2, 3, 16), the subarray is [16, 32]. Both elements are divisible by 16, hence the answer is 2.","solution":"def count_divisible_subarray(arr, queries): results = [] for l, r, k in queries: count = 0 for i in range(l-1, r): if arr[i] % k == 0: count += 1 results.append(count) return results"},{"question":"A tech company is organizing a marathon for promoting fitness among its employees. The event features a unique algorithmic challenge: participants need to determine the total number of distinct ways to cover a certain distance using steps of different predefined lengths. Participants can use steps of lengths 1, 2, and 3 units. They need to write a program that, given a target distance, calculates the number of distinct ways to cover that distance using any combination of the available steps. For instance, if the target distance is 4 units, there are 7 distinct ways to cover it: 1. 1+1+1+1 2. 1+1+2 3. 1+2+1 4. 2+1+1 5. 2+2 6. 1+3 7. 3+1 Write a program that calculates the total number of distinct ways to cover the given distance using steps of lengths 1, 2, and 3. # Input The input consists of multiple datasets. Each dataset is represented by a single integer `d` (1 ≤ d ≤ 1000), indicating the target distance. The input ends with a single zero, which should not be processed. # Output For each dataset, output the total number of distinct ways to cover the given distance using steps of lengths 1, 2, and 3, one result per line. # Example Input 4 7 10 0 Output 7 44 274 Note: Ensure that your program handles up to 1000 efficiently, given the potential large number of ways to cover the larger distances.","solution":"def ways_to_cover_distance(n): Returns the number of distinct ways to cover a distance n using steps of 1, 2, or 3 units. if n == 0: return 0 dp = [0] * (n + 1) dp[0] = 1 # There\'s 1 way to cover distance 0 - do nothing if n >= 1: dp[1] = 1 # Only one way to cover distance 1 - a single step of 1 if n >= 2: dp[2] = dp[1] + 1 # Two ways to cover distance 2 - two 1-steps or one 2-step if n >= 3: dp[3] = dp[2] + dp[1] + 1 # Three ways for distance 3 - three 1-steps, one 1-step + one 2-step, or one 3-step for i in range(4, n + 1): dp[i] = dp[i-1] + dp[i-2] + dp[i-3] return dp[n] def process_distances(distances): Processes a list of distances and returns a list of results, each corresponding to the number of distinct ways to cover the respective distance. results = [] for distance in distances: if distance == 0: break results.append(ways_to_cover_distance(distance)) return results # Example usage: distances = [4, 7, 10, 0] results = process_distances(distances) for result in results: print(result)"},{"question":"You are given two strings, s1 and s2, which consist of lowercase English letters. You need to find the length of the longest common subsequence (LCS) of these two strings. The LCS is defined as the longest sequence that can be derived from both strings by deleting some characters (potentially none) without changing the order of the remaining characters. To make things interesting, you need to ensure the solution has a time complexity of O(m * n), where m and n are the lengths of s1 and s2 respectively. Input - The first line contains an integer t (1 ≤ t ≤ 100) representing the number of test cases. - For each test case, the first line contains the string s1 and the second line contains the string s2. - The lengths of the strings are guaranteed to be at most 1000. Output For each test case, output a single integer on a new line, representing the length of the longest common subsequence of s1 and s2. Example Input 3 abcde ace abc abc abc def Output 3 3 0 Note In the first sample, the longest common subsequence is \\"ace\\", which has length 3. In the second sample, the longest common subsequence is \\"abc\\", which has length 3. In the third sample, there is no common subsequence, so the result is 0.","solution":"def lcs_length(s1, s2): m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] def process_test_cases(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) index = 1 results = [] for _ in range(t): s1 = lines[index] s2 = lines[index + 1] result = lcs_length(s1, s2) results.append(result) index += 2 return results"},{"question":"An e-commerce company stores its product data in a list called `product_list`. Each element in `product_list` is a tuple containing the product name and its respective price. Your task is to handle multiple queries on this product list. Each query can be of the following types: - \\"ADD product_name price\\": Add a new product with the given name and price to the list. - \\"REMOVE product_name\\": Remove the product with the given name from the list. If there are multiple products with the same name, remove all of them. - \\"CHANGE product_name new_price\\": Change the price of all products with the given name to the new price. - \\"GET_MIN\\": Return the product name with the minimum price. If there are multiple products with the same lowest price, return the one that appears first in the list. Input - The first line contains an integer `n`, the number of queries. - The next `n` lines contain queries in the format mentioned above. Output For every \\"GET_MIN\\" query, return the product name with the minimum price. Constraints - 1 ≤ n ≤ 10^5 - 1 ≤ |product_name| ≤ 100 - 1 ≤ price, new_price ≤ 10^9 Example Input 8 ADD apple 100 ADD orange 50 GET_MIN CHANGE apple 40 GET_MIN REMOVE orange GET_MIN REMOVE apple Output orange apple apple Explanation - Initially, the list contains \\"apple\\" with price 100 and \\"orange\\" with price 50. - The first \\"GET_MIN\\" query returns \\"orange\\" because its price is the lowest. - After changing the price of \\"apple\\" to 40, the next \\"GET_MIN\\" query returns \\"apple\\" because apple\'s price is now the lowest. - Removing \\"orange\\" from the list leaves only \\"apple\\", so the next \\"GET_MIN\\" query still returns \\"apple\\". - Finally, removing \\"apple\\" leaves the list empty.","solution":"class ProductList: def __init__(self): self.product_list = [] def add(self, product_name, price): self.product_list.append((product_name, price)) def remove(self, product_name): self.product_list = [(name, price) for name, price in self.product_list if name != product_name] def change(self, product_name, new_price): self.product_list = [(name, new_price if name == product_name else price) for name, price in self.product_list] def get_min(self): if not self.product_list: return None return min(self.product_list, key=lambda x: x[1])[0] def handle_queries(queries): pl = ProductList() results = [] for query in queries: parts = query.split() command = parts[0] if command == \\"ADD\\": product_name = parts[1] price = int(parts[2]) pl.add(product_name, price) elif command == \\"REMOVE\\": product_name = parts[1] pl.remove(product_name) elif command == \\"CHANGE\\": product_name = parts[1] new_price = int(parts[2]) pl.change(product_name, new_price) elif command == \\"GET_MIN\\": result = pl.get_min() if result: results.append(result) return results"},{"question":"Create a function that takes two parameters: a list of integers representing the initial state of a bookshelf (where each integer corresponds to a book) and a list of operations to perform on the bookshelf. Each operation is represented as a tuple, where the first element is a string indicating the type of operation (\\"add\\" or \\"remove\\"), and the second element is an integer denoting the book to add or remove. The function should return the final state of the bookshelf after performing all the operations in order. The bookshelf starts with the initial state and processes the operations sequentially. If an \\"add\\" operation tries to add a book that is already on the bookshelf, it should ignore that operation. If a \\"remove\\" operation tries to remove a book that is not on the bookshelf, it should also ignore that operation. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of books in the initial state of the bookshelf. The second line contains n space-separated integers b_i (1 ≤ b_i ≤ 10^9) — the books on the bookshelf. The third line contains an integer m (1 ≤ m ≤ 10^5) — the number of operations to perform. Each of the next m lines contains a string and an integer separated by a space, representing each operation. The string is either \\"add\\" or \\"remove\\", and the integer represents the book to add or remove. Output Print the final state of the bookshelf as a space-separated list of integers in the order they appear after performing all operations. If the bookshelf is empty, print an empty line. Example Input 5 1 2 3 4 5 6 add 6 remove 3 remove 7 add 3 add 2 remove 8 Output 1 2 4 5 6 3 Note - Initially, the bookshelf contains books [1, 2, 3, 4, 5]. - After performing the first operation, \\"add 6\\", the bookshelf becomes [1, 2, 3, 4, 5, 6]. - After performing the second operation, \\"remove 3\\", the bookshelf becomes [1, 2, 4, 5, 6]. - The \\"remove 7\\" operation is ignored since book 7 is not on the bookshelf. - The \\"add 3\\" operation adds book 3 back to the end of the bookshelf, so the bookshelf becomes [1, 2, 4, 5, 6, 3]. - The \\"add 2\\" operation is ignored since book 2 is already on the bookshelf. - The \\"remove 8\\" operation is ignored since book 8 is not on the bookshelf.","solution":"def modify_bookshelf(initial_books, operations): Modifies the bookshelf based on the given operations. Arguments: initial_books -- list of integers representing the initial state of the bookshelf operations -- list of tuples, each containing a string (\\"add\\" or \\"remove\\") and an integer Returns: A list of integers representing the final state of the bookshelf books_set = set(initial_books) # Use a set to track current books for O(1) look-up. final_books = list(initial_books) for operation in operations: action, book = operation if action == \\"add\\" and book not in books_set: final_books.append(book) books_set.add(book) elif action == \\"remove\\" and book in books_set: final_books.remove(book) books_set.remove(book) return final_books"},{"question":"You are given a list of integers where every element appears twice except for one unique integer which appears only once. Write a function to find and return the unique integer. INPUT The first line of the input contains an integer T, the number of test cases. Each of the next T lines contains a list of space-separated integers. OUTPUT For each test case, print the unique integer in the list. CONSTRAINTS 1 ≤ T ≤ 1000 1 ≤ Number of integers in each test case ≤ 10^3 1 ≤ All integer values ≤ 10^5 SAMPLE INPUT 3 1 2 3 2 1 4 5 6 4 5 7 8 8 9 9 7 10 SAMPLE OUTPUT 3 6 10","solution":"def find_unique_integer(test_cases): Returns a list of unique integers from each test case. unique_integers = [] for case in test_cases: unique_integer = 0 for num in case: unique_integer ^= num # XOR operation will cancel out duplicate numbers unique_integers.append(unique_integer) return unique_integers"},{"question":"A software company wants to create a function that enhances the security of their passwords by implementing a rotation-based encryption. The company asks you to write a program that, given a password and a value, returns the rotated password based on the given value. The rotation should be done by shifting characters in the password to the left by the specified value, wrapping around to the beginning of the string if needed. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the password. The following line contains a string of length n consisting of lowercase English letters — the password. The third line contains a single integer k (0 ≤ k < n) — the number of positions by which the password should be rotated left. Output Print a single string — the rotated password. Examples Input 6 abcdef 2 Output cdefab Input 5 hello 3 Output lohel Input 8 security 0 Output security Note In the first example, the password \\"abcdef\\" is rotated left by 2 positions, resulting in \\"cdefab\\". In the second example, the password \\"hello\\" is rotated left by 3 positions, resulting in \\"lohel\\". In the third example, the password \\"security\\" is rotated left by 0 positions, so it remains unchanged.","solution":"def rotate_password(password, k): Rotates the given password to the left by k positions. :param password: str - the original password :param k: int - the number of positions to rotate left :return: str - the rotated password n = len(password) # Rotate the password by slicing and concatenating rotated_password = password[k:] + password[:k] return rotated_password"},{"question":"Write a function that finds the largest square number less than or equal to a given positive integer N. A square number is an integer that is the square of some other integer. Input A single line containing a positive integer N (1 ≤ N ≤ 10^12). Output Output a single integer - the largest square number less than or equal to N. Example Input 20 Output 16 Explanation The square numbers less than or equal to 20 are: 1, 4, 9, 16. The largest of these is 16.","solution":"import math def largest_square_number(N): Finds the largest square number less than or equal to a given positive integer N. return int(math.floor(math.sqrt(N))) ** 2"},{"question":"Given an array of integers, determine the length of the longest subsequence such that all elements of the subsequence are equal and appear consecutively. # Input: The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains: - The first integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. - The next n integers represent the elements of the array. # Output: For each test case, print a single integer — the length of the longest subsequence of consecutive equal elements. # Example: Input: 3 6 5 5 5 1 1 1 8 7 7 7 7 1 2 3 3 12 1 2 2 3 3 3 4 4 4 4 4 4 Output: 3 4 6","solution":"def longest_consecutive_subsequence(arr): This function takes an array as input and returns the length of the longest subsequence of consecutive equal elements in the array. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length def process_test_cases(test_cases): This function processes a list of test cases where each test case is a tuple (n, array) and returns a list containing the length of the longest subsequence of consecutive equal elements for each test case. results = [] for n, arr in test_cases: results.append(longest_consecutive_subsequence(arr)) return results"},{"question":"You are given an array of n integers, and your task is to find the maximum sum of any subsequence that satisfies the following constraints: 1. The subsequence should not contain any two consecutive elements from the original array. 2. The subsequence should have at least one element. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Write a program that reads the array and computes the maximum sum of the subsequence that meets the above conditions. # Input The first line of input contains an integer T (1 ≤ T ≤ 100) denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9), representing the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^5. # Output For each test case, print a single integer representing the maximum sum of any subsequence that meets the given constraints. # Example Input: ``` 2 5 3 2 5 10 7 4 -1 -2 -3 -4 ``` Output: ``` 15 -1 ``` # Explanation In the first test case, the subsequence with the maximum sum is [3, 5, 7]. The sum is 3 + 5 + 7 = 15. In the second test case, the best option is to choose the largest single element, which is -1. # Constraints - Try to optimize the solution in terms of time complexity for large input sizes. - Use appropriate data structures to handle the input and processing efficiently.","solution":"def max_non_consecutive_sum(arr): Function to find the maximum sum of non-consecutive elements in the array. if not arr: return 0 if len(arr) == 1: return max(0, arr[0]) inclusive = arr[0] exclusive = 0 for num in arr[1:]: new_exclusive = max(inclusive, exclusive) inclusive = exclusive + num exclusive = new_exclusive return max(inclusive, exclusive) def main(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] results.append(max_non_consecutive_sum(arr)) return results"},{"question":"A warehouse manager oversees a collection of boxes that are stacked on shelves. Each box has a unique identifier number. Initially, the boxes are organized in ascending order by their identifier numbers from bottom to top on each shelf. However, during a particularly busy day, the manager moved boxes around several times. At the end of the day, the manager wants to know how many movements were made to transform the initial state of the boxes into their final state. Given the initial and final states of the boxes, your task is to determine the minimum number of adjacent swaps required to transform the initial stack into the final stack. Input The first line contains an integer n (1 ≤ n ≤ 500) — the number of boxes on the shelf. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ n) — the initial state of the boxes. The third line contains n distinct integers b1, b2, ..., bn (1 ≤ bi ≤ n) — the final state of the boxes. Output Print a single integer — the minimum number of adjacent swaps needed to transform the initial state into the final state. Example Input 5 1 2 3 4 5 5 4 3 2 1 Output 10 Input 3 2 3 1 1 2 3 Output 2","solution":"def min_adjacent_swaps(n, initial, final): Returns the minimum number of adjacent swaps required to transform the initial state of boxes into the final state. Args: n : int : number of boxes initial : list : initial list of box identifiers final : list : final list of box identifiers Returns: int : minimum number of adjacent swaps index_map = {v: i for i, v in enumerate(initial)} pos = [index_map[final[i]] for i in range(n)] swap_count = 0 for i in range(n): for j in range(n - 1, i, -1): if pos[j] < pos[j - 1]: pos[j], pos[j - 1] = pos[j - 1], pos[j] swap_count += 1 return swap_count"},{"question":"Alice loves trees. In particular, she loves binary trees. She has a binary tree rooted at node 1, and she wants to calculate the sum of values of nodes at every level of the tree. The level of a node is defined as the number of edges in the path from the root node to the node. Alice needs your help to find the sum of values at each level of the tree. Given the structure of the tree and values of nodes, compute and output the sum of values at every level of the tree. Input The input contains an integer n (1 ≤ n ≤ 1000), the number of nodes in the binary tree. The next n lines each contain three integers: - The first integer u (1 ≤ u ≤ n) is the index of the node. - The second integer l (0 ≤ l ≤ 1000) is the value of the node. - The third and fourth integers le, ri (0 ≤ le, ri ≤ n) are the indices of the left and right children of node u, respectively. If a node does not have a left or right child, the corresponding value le or ri will be 0. Output Output the sum of values at each level of the tree, starting from level 0 (the root node level) and moving downward, each level sum on a new line. Examples Input 5 1 3 2 3 2 5 4 5 3 8 0 0 4 1 0 0 5 2 0 0 Output 3 13 3 Note In the example above, the binary tree looks like this: 1 (3) / (5) 2 3 (8) / (1) 4 5 (2) The sum of values at levels 0, 1, and 2 are 3, 13, and 3, respectively.","solution":"from collections import defaultdict, deque def sum_values_at_each_level(n, nodes): tree = defaultdict(lambda: [0, 0]) values = {} for u, l, le, ri in nodes: values[u] = l tree[u] = [le, ri] level_sums = defaultdict(int) queue = deque([(1, 0)]) # (node index, level) while queue: node, level = queue.popleft() level_sums[level] += values[node] left, right = tree[node] if left != 0: queue.append((left, level + 1)) if right != 0: queue.append((right, level + 1)) return [level_sums[i] for i in range(len(level_sums))]"},{"question":"Madeline enjoys hiking in the mountains and always tries to find the most scenic views to capture. The mountain range can be represented as a 1-dimensional array where each element signifies the height of the mountain at that point. Madeline wants to select exactly three different points to take a panoramic view. To maximize the scenic view, she wants to capture a combination where the sum of heights of the selected points is the highest possible among all possible combinations of three different points. Input The first line contains a single integer n (3 ≤ n ≤ 1000) — the number of points in the mountain range. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the mountains at each point. Output Print the maximum possible sum of heights from any three different points. Examples Input 5 1 2 3 4 5 Output 12 Input 4 10 20 30 40 Output 90 Input 6 5 1 2 9 3 7 Output 21 Note In the first sample, Madeline can select the points with heights 3, 4, and 5 to get the sum 3 + 4 + 5 = 12. In the second sample, selecting the points with heights 20, 30, and 40 yields the highest sum 20 + 30 + 40 = 90. In the third sample, the best combination would be selecting points with heights 5, 9, and 7 to get the sum 5 + 9 + 7 = 21.","solution":"def max_scenic_view_sum(n, heights): Returns the maximum sum of heights from any three different points. heights.sort(reverse=True) return heights[0] + heights[1] + heights[2]"},{"question":"You are given two sorted arrays a and b of lengths m and n, respectively. Your task is to merge these two sorted arrays into one single sorted array. The final sorted array should be made by appending elements of array b to the end of array a and then sorted in non-decreasing order. Input The first line of the input contains two integers m and n (1 ≤ m, n ≤ 10^6) — the lengths of arrays a and b respectively. The second line contains m integers a_1, a_2, ..., a_m representing the elements of array a (1 ≤ a_i ≤ 10^7) in sorted order. The third line contains n integers b_1, b_2, ..., b_n representing the elements of array b (1 ≤ b_i ≤ 10^7) in sorted order. Output Print a single line containing m + n integers — sorted array containing all the elements from a and b. Examples Input 4 3 1 3 5 7 2 4 6 Output 1 2 3 4 5 6 7 Input 5 5 1 2 3 4 5 6 7 8 9 10 Output 1 2 3 4 5 6 7 8 9 10 Input 3 2 4 4 4 4 4 Output 4 4 4 4 4","solution":"def merge_sorted_arrays(m, n, a, b): Merges two sorted arrays into one sorted array. :param m: Length of first array `a`. :param n: Length of second array `b`. :param a: List of integers representing the first sorted array. :param b: List of integers representing the second sorted array. :return: Merged and sorted list of integers from both arrays. result = [] i, j = 0, 0 while i < m and j < n: if a[i] <= b[j]: result.append(a[i]) i += 1 else: result.append(b[j]) j += 1 # Append remaining elements if any while i < m: result.append(a[i]) i += 1 while j < n: result.append(b[j]) j += 1 return result"},{"question":"You are given an integer array `arr` of length `N`. The array is guaranteed to have a peak element, which is an element that is strictly greater than its neighboring elements. The first or last element can also be considered a peak if they are greater than their single neighbor. Your task is to find the index of a peak element and return it. If the array contains multiple peaks, returning the index of any one of them is acceptable. Write a function `find_peak(arr)` that takes in the array and returns the index of a peak element. The performance of your solution should be better than O(N). Constraints * The number of elements in the array `N` is in the range 1 leq N leq 10^5 * Every element in the array is a distinct integer. Input An integer array `arr` of length `N`. Output An integer representing the index of any peak element. Examples Input [1, 3, 20, 4, 1, 0] Output 2 Input [10, 20, 15, 2, 23, 90, 67] Output 1 Input [1, 2, 3, 1] Output 2","solution":"def find_peak(arr): Returns the index of a peak element in the array \'arr\'. A peak element is strictly greater than its neighbors. left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] < arr[mid + 1]: left = mid + 1 else: right = mid return left"},{"question":"A farmer has a rectangular field, where each cell in the field can either be fertile (denoted by \'1\') or barren (denoted by \'0\'). He wants to plant crops in the largest possible rectangular plot of fertile land. There may be multiple plots of the same size in the field. Write a program to find the maximum area of the rectangle composed of fertile land. Input The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the field, respectively. The next n lines each contain m characters. Each character is either \'1\' (fertile) or \'0\' (barren). Output Print a single integer — the area of the largest rectangle composed of \'1\'s. Examples Input 4 5 10100 10111 11111 10010 Output 6 Input 3 3 111 111 111 Output 9 Input 3 4 1100 1111 0011 Output 4 Note In the first example, the largest rectangle of fertile land can be found at the bottom-right corner with an area of 2x3=6. In the second example, the entire field is fertile land with an area of 3x3=9. In the third example, the largest rectangle of fertile land can be found at the bottom-right corner with an area of 2x2=4.","solution":"def max_histogram_area(heights): Helper function to find the largest rectangular area in a histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def largest_rectangle_fertile_land(matrix): Finds the largest rectangular area of fertile land (\'1\') in a given matrix. if not matrix: return 0 n = len(matrix) m = len(matrix[0]) max_area = 0 heights = [0] * m for row in matrix: for j in range(m): if row[j] == \'1\': heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, max_histogram_area(heights)) return max_area"},{"question":"Maximum Level Subtree Sum Given a binary tree, determine the level of the tree that has the maximum sum of node values. The level of a binary tree is defined by the number of edges from the tree\'s root node. The root node is at level 0, its children are at level 1, and so on. Input There are several test cases. Each test case starts with a positive integer N (N ≤ 100), representing the number of nodes in the tree. The next line contains N integers: the values of nodes in the tree in level-order traversal. Each node value is an integer between -10^3 and 10^3. Note: The given tree might not be a complete binary tree; some levels may have fewer nodes. The relative order of children of any node remains as given in the input. The input is ended when N = 0. Output For each test case, output the level of the tree that has the maximum sum of node values. If multiple levels have the same sum, return the smallest level number. Example Input: 7 4 2 3 7 -1 9 6 4 1 2 3 4 0 Output: 2 1 Explanation: For the first test case: - Level 0 sum: 4 - Level 1 sum: 2 + 3 = 5 - Level 2 sum: 7 + (-1) + 9 + 6 = 21 The level with the maximum sum is 2. For the second test case: - Level 0 sum: 1 - Level 1 sum: 2 + 3 = 5 - Level 2 sum: 4 The level with the maximum sum is 1.","solution":"def max_level_sum(n, node_values): if n == 0: return -1 from collections import deque, defaultdict queue = deque([(0, 0)]) # (index, level) level_sums = defaultdict(int) for i in range(n): index, level = queue.popleft() level_sums[level] += node_values[index] left_child_index = 2 * index + 1 right_child_index = 2 * index + 2 if left_child_index < n: queue.append((left_child_index, level + 1)) if right_child_index < n: queue.append((right_child_index, level + 1)) max_sum_level = max(level_sums, key=lambda key: (level_sums[key], -key)) return max_sum_level def handle_input(input_data): results = [] for data in input_data: n, node_values = data[0], data[1] result = max_level_sum(n, node_values) results.append(result) return results"},{"question":"A company has implemented an automated hiring system that assesses candidates based on their programming skills. The system runs a sequence of k tests, and each candidate takes them one by one. After completing all the tests, the candidate receives a score for each test. The company uses these scores to decide whether to hire the candidate or not. The company has a unique policy: a candidate is considered qualified (and therefore hired) if they pass more than half of the tests with scores greater than or equal to the passing score p. Write a function that takes in the total number of tests k, the passing score p, and a list of integers representing the scores received by the candidate, and returns a boolean indicating whether the candidate should be hired. Input - The first line contains two integers k and p (1 ≤ k ≤ 100, 1 ≤ p ≤ 100), the number of tests and the passing score. - The second line contains k integers, each between 0 and 100 inclusive, representing the scores received by the candidate in each test. Output - Return `True` if the candidate should be hired, and `False` otherwise. Examples Input ``` 5 75 80 70 85 90 60 ``` Output ``` True ``` Input ``` 4 50 30 40 45 50 ``` Output ``` False ``` Input ``` 3 60 61 59 60 ``` Output ``` False ``` Note - In the first example, the candidate passes 3 out of 5 tests (80, 85, and 90), which is more than half of the tests taken, so they should be hired. - In the second example, the candidate passes only 1 out of 4 tests (50), which is not more than half, so they should not be hired. - In the third example, the candidate passes only 1 out of 3 tests (61), which is not more than half, so they should not be hired.","solution":"def should_hire(k, p, scores): Evaluates whether a candidate should be hired based on the number of tests passed with a score greater than or equal to p. Parameters: k (int): The number of tests. p (int): The passing score. scores (list): A list of integers representing the scores received by the candidate in each test. Returns: bool: True if the candidate should be hired, False otherwise. passing_scores = [score for score in scores if score >= p] return len(passing_scores) > k // 2"},{"question":"A company has a fleet of delivery vans that deliver packages to several destinations. Each van can carry a limited number of packages at a time. The goal is to find out the minimum number of trips required for all vans combined to deliver all the packages to their respective destinations under the given constraints. Each package has a specified destination, and each destination can be visited multiple times by any van. To simplify, the company has an unlimited number of vans, but each van can only deliver up to a maximum of `k` packages per trip. The packages cannot be repacked, combined or split. Given the list of packages with their respective destinations, write a function to compute the minimum number of trips needed to deliver all the packages. Input The first line contains two integers, `n` and `k`, where `n` is the number of packages and `k` is the maximum number of packages a van can carry in one trip (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100). The second line contains `n` space-separated integers representing the destinations of the packages. Output Print a single integer representing the minimum number of trips required. Examples Input 10 3 2 3 2 1 3 3 2 1 1 2 Output 4 Input 5 2 1 1 1 1 1 Output 3","solution":"from collections import Counter def min_trips(n, k, destinations): Returns the minimum number of trips required to deliver all the packages. :param n: int - the number of packages :param k: int - the maximum number of packages a van can carry in one trip :param destinations: List[int] - the list of destinations for the packages :return: int - the minimum number of trips required trip_count = 0 # Count the frequency of each destination destination_count = Counter(destinations) # Calculate the trips needed for each destination for count in destination_count.values(): trips_needed = (count + k - 1) // k # This is equivalent to math.ceil(count / k) trip_count += trips_needed return trip_count"},{"question":"Avery has two arrays of integers, `a` and `b`, both of length `n`. He wants to determine if it\'s possible to make the two arrays identical by permuting (rearranging) the elements of array `b`. Input The first line contains a single integer `n` (1 ≤ n ≤ 1000) representing the number of elements in each array. The second line contains `n` integers representing the elements of array `a`. The third line contains `n` integers representing the elements of array `b`. Output Print \\"YES\\" (without quotes) if Avery can make the arrays identical by permuting the elements of `b`, or \\"NO\\" (without quotes) if it is not possible. Examples Input 5 1 2 3 4 5 5 4 3 2 1 Output YES Input 3 1 2 2 2 2 3 Output NO Input 4 1 1 2 2 2 2 1 1 Output YES","solution":"def can_make_identical(n, a, b): Determines if two arrays of integers can be made identical by permuting the elements of the second array. Parameters: n (int): The number of elements in each array. a (list of int): The first array. b (list of int): The second array. Returns: str: \\"YES\\" if we can make the arrays identical by permuting the elements of `b`, otherwise \\"NO\\". if sorted(a) == sorted(b): return \\"YES\\" else: return \\"NO\\""},{"question":"In a computer graphics application, you are tasked with coloring a 2D grid. Each cell in the grid is either black or white. You want to help the application determine if there\'s a continuous path of black cells that connects the top row of the grid to the bottom row. A path is considered continuous if it moves through adjacent cells (up, down, left, or right). Input The first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid, respectively. The next n lines each contain m characters, either \'B\' (black) or \'W\' (white), representing the grid. Output Print \\"YES\\" if there exists a continuous path of black cells from any cell in the top row to any cell in the bottom row. Otherwise, print \\"NO\\". Examples Input 5 5 WBBBW WBWBW BBBBB WBBBB WWBBB Output YES Input 4 4 BWWW WBBB WWBB WWWB Output NO Input 3 3 BBB WWW BBB Output NO Note In the first example, there is a continuous path of black cells connecting the top row to the bottom row. In the second and third examples, no such continuous path exists.","solution":"def is_path_from_top_to_bottom(grid, n, m): Determines if there is a continuous path of black cells (\'B\') from any cell in the top row to any cell in the bottom row of the grid. from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'B\' and not visited[x][y] visited = [[False] * m for _ in range(n)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right # Find all starting points in the top row queue = deque() for j in range(m): if grid[0][j] == \'B\': queue.append((0, j)) visited[0][j] = True # BFS to find a path to the bottom row while queue: x, y = queue.popleft() if x == n-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"A company awards bonuses to its employees based on their performance. The performance of each employee is represented as an integer and stored in a list. Higher numbers represent better performance. The company wants to ensure that bonuses are distributed fairly, such that: 1. Every employee must receive at least 1 unit of bonus. 2. Employees with a higher performance rating receive more bonuses than their neighbors with lower performance ratings. Your task is to calculate the minimum total amount of bonus units that the company must allocate. Input - The first line of input contains an integer `n` (1 ≤ n ≤ 10^5) — the number of employees. - The second line contains `n` integers `p_1, p_2, ..., p_n` (1 ≤ p_i ≤ 10^5) where `p_i` is the performance rating of the i-th employee. Output - Output a single integer — the minimum total amount of bonus units that the company must allocate. Example Input 4 1 2 2 3 Output 6 Explanation - The minimum bonuses can be distributed as [1, 2, 1, 2] with a total of 6 units. The second employee gets 2 units, because their performance (2) is better than their neighbour\'s (1). The employee with performance 3 also gets 2 units, being better than their neighbour (2).","solution":"def min_bonus(n, performances): if n == 0: return 0 # Initialize all bonuses to 1 unit bonuses = [1] * n # First pass from left to right for i in range(1, n): if performances[i] > performances[i - 1]: bonuses[i] = bonuses[i - 1] + 1 # Second pass from right to left for i in range(n - 2, -1, -1): if performances[i] > performances[i + 1]: bonuses[i] = max(bonuses[i], bonuses[i + 1] + 1) return sum(bonuses) # Example usage if __name__ == \\"__main__\\": n = 4 performances = [1, 2, 2, 3] print(min_bonus(n, performances)) # Output: 6"},{"question":"Alice is exploring string patterns and has become interested in identifying repeating substrings within a given string. She defines an Overlapping Repeating Substring (ORS) as a non-empty substring that occurs more than once in a given string and where repeated occurrences of the substring can overlap with each other. For example: - In the string \\"ababab\\", the substring \\"abab\\" is an ORS because it repeats and overlaps. - In the string \\"aaaa\\", the substring \\"aaa\\" is an ORS because it repeats and overlaps. However, in the string \\"abcd\\", there are no ORS as there are no repeating substrings longer than one character. Alice wants to write a program to calculate the length of the longest ORS in a given string. If there is no ORS in the string, the program should return 0. Input: - The first line contains a single integer T, the number of test cases. - Each of the next T lines contains a single string S, consisting of lowercase alphabet characters. Output: - For each test case, output a single integer, the length of the longest ORS in the given string. If no such substring exists, print 0. Constraints: - 1 ≤ T ≤ 10^4 - 1 ≤ |S| ≤ 10^3 SAMPLE INPUT 3 ababab abcd aaaa SAMPLE OUTPUT 4 0 3 Explanation: In the first test case, \\"abab\\" is the longest ORS with a length of 4. In the second test case, there is no ORS, so the output is 0. In the third test case, \\"aaa\\" is the longest ORS with a length of 3.","solution":"def longest_ors(s): def is_overlap(l, s): for i in range(len(s) - l + 1): if s[i:i+l] in s[i+1:]: return True return False max_len = 0 n = len(s) for length in range(1, n): if is_overlap(length, s): max_len = length return max_len def main(input_list): T = int(input_list[0]) results = [] for i in range(1, T + 1): s = input_list[i] results.append(longest_ors(s)) return results"},{"question":"You are building a software application that requires scheduling of tasks. Each task has a unique identifier and a duration in hours. Your task is to implement a scheduling function that divides these tasks into work days. Each work day can have up to 8 hours of tasks scheduled. The goal is to minimize the number of work days needed to complete all tasks. You need to write a program that reads a list of tasks and their respective durations, and then determines the minimal number of work days required. # Input The input consists of: 1. An integer `t` (1 ≤ t ≤ 10000) — the number of test cases. 2. For each test case: - An integer `n` (1 ≤ n ≤ 1000) — the number of tasks. - A list of `n` positive integers where each integer `d_i` (1 ≤ d_i ≤ 8) represents the duration in hours of the i-th task. # Output For each test case, output a single integer — the minimal number of work days required to complete all tasks. # Example Input ``` 3 5 4 3 2 1 2 3 8 8 8 4 3 3 3 7 ``` # Example Output ``` 2 3 3 ``` # Explanation In the first test case: - You can schedule the tasks [4, 3] into the first work day (total 7 hours), and tasks [2, 1, 2] into the second work day (total 5 hours). So, 2 work days are needed. In the second test case: - Each task takes a whole work day because each task is 8 hours long. Thus, 3 work days are needed. In the third test case: - You can schedule the tasks [3, 3] into the first work day (total 6 hours), and the tasks [3, 7] into the next two work days. Thus, 3 work days are needed.","solution":"def minimal_work_days(t, test_cases): results = [] for i in range(t): n, tasks = test_cases[i] tasks.sort(reverse=True) # Sort tasks to pack largest tasks first days = 0 while tasks: current_day = 0 j = 0 while j < len(tasks): if current_day + tasks[j] <= 8: current_day += tasks[j] tasks.pop(j) else: j += 1 days += 1 results.append(days) return results"},{"question":"You are tasked with managing a conference room scheduling system for a company. The goal is to process various events related to scheduling the use of a single conference room, ensuring no double-booking occurs. The events are processed sequentially and you must determine whether each booking request can be accommodated. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of time slots and the number of events. Time slots are represented by numbers from 1 to n. Each of the next m lines contains an event, given in chronological order. The first number on the line indicates the type of event t (1 ≤ t ≤ 2): - If t = 1, then the next two integers x and y (1 ≤ x ≤ y ≤ n) represent a booking request for the time slots from x to y (inclusive). - If t = 2, then the next integer k (1 ≤ k ≤ n) represents a query whether the time slot k is currently booked. It is guaranteed that there is at least one query of the second type. Output For each query of the second type, output \\"BOOKED\\" if the time slot is booked, and \\"AVAILABLE\\" otherwise. Print the answers without quotes. Example Input 10 7 1 2 5 1 6 8 2 4 2 7 1 5 5 2 5 2 10 Output BOOKED BOOKED BOOKED AVAILABLE","solution":"def conference_room_scheduling(n, m, events): time_slots = [False] * (n + 1) results = [] for event in events: t = event[0] if t == 1: x, y = event[1], event[2] for i in range(x, y + 1): time_slots[i] = True elif t == 2: k = event[1] if time_slots[k]: results.append(\\"BOOKED\\") else: results.append(\\"AVAILABLE\\") return results"},{"question":"A city government wants to improve the traffic flow through a rectangular intersection. The intersection is w units wide and h units high, divided into 1x1 grid squares. The city has installed traffic cameras that will track m cars passing through the intersection. Each car enters the intersection at a specific point on one of the four borders and moves in a straight line either horizontally or vertically across the intersection. Each car has a specific entry point along one of the borders and moves at a fixed speed (1 unit per time unit). Every car also waits for a certain amount of time before it starts moving. If two cars collide at the same point at the same time, they turn 90 degrees in place and continue moving. No car changes direction more than once. Given the dimensions of the intersection and the details of each car\'s movement, determine the final position of each car after it leaves the intersection or after possibly turning once. # Input: - The first line contains three integers w, h, and m (1 ≤ w, h ≤ 100000, 1 ≤ m ≤ 100000) — the width and height of the intersection, and the number of cars. - The following m lines each contain three integers representing the initial information for a car: - `e` (1 ≤ e ≤ 4): The entry border of the car (1 for bottom, 2 for left, 3 for top, 4 for right). - `p` (1 ≤ p < type-dependent upper limit): The entry position along the border. If `e` is 1 or 3, `p` is the x-coordinate and must be between 1 and w-1. If `e` is 2 or 4, `p` is the y-coordinate and must be between 1 and h-1. - `t` (0 ≤ t ≤ 100000): The time the car waits before starting to move. # Output: - Output m lines, each containing the final position of the corresponding car (x, y). # Example: Input: ``` 5 7 4 1 2 1 2 3 0 4 6 2 3 4 1 ``` Output: ``` 5 3 4 7 1 5 4 7 ``` # Note: - In the example, the first car enters at (2, 0) and moves up. The second car starts at (0, 3) and moves right. The third car enters at (7, 6) and moves left. The fourth car starts at (4, 7) and moves down. If they collide, they turn and continue moving, otherwise, they move in a straight line to the opposite border.","solution":"def car_final_position(w, h, m, car_info): def move_car(e, p, t): if e == 1: # bottom border (moves up) initial_x, initial_y = p, 0 final_x, final_y = p, h elif e == 2: # left border (moves right) initial_x, initial_y = 0, p final_x, final_y = w, p elif e == 3: # top border (moves down) initial_x, initial_y = p, h final_x, final_y = p, 0 elif e == 4: # right border (moves left) initial_x, initial_y = w, p final_x, final_y = 0, p # Position just before possible turning before_turn_x = initial_x + t * (final_x - initial_x) // abs(final_x - initial_x) if final_x != initial_x else initial_x before_turn_y = initial_y + t * (final_y - initial_y) // abs(final_y - initial_y) if final_y != initial_y else initial_y # If t is large enough, the car leaves without turning because it crosses the full distance directly return (final_x, final_y) if before_turn_x == final_x or before_turn_y == final_y else (before_turn_x, before_turn_y) positions = [] for e, p, t in car_info: positions.append(move_car(e, p, t)) return positions"},{"question":"Write a function `calculatePaths(matrix)` that counts the number of unique paths from the top-left corner to the bottom-right corner of a grid, given that some cells in the grid are \\"blocked\\". A block cell cannot be part of any path. You can only move either down or right at any point in time. # Input - A 2D list `matrix` of size `m x n` where `matrix[i][j]` is either `0` (indicating the cell is free) or `1` (indicating the cell is blocked). - `1 ≤ m, n ≤ 100` # Output - Return an integer representing the number of unique paths from the top-left corner to the bottom-right corner of the grid. # Examples **Input:** ``` matrix = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] ``` **Output:** ``` 2 ``` **Input:** ``` matrix = [ [0, 1], [0, 0] ] ``` **Output:** ``` 1 ``` # Notes For the first example, the two unique paths are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right For the second example, the unique path is: 1. Down -> Right","solution":"def calculatePaths(matrix): Counts the number of unique paths from the top-left corner to the bottom-right corner of a grid, given that some cells in the grid are \\"blocked\\". A blocked cell cannot be part of any path. You can only move either down or right at any point in time. :param matrix: List[List[int]], a 2D list where 0 represents a free cell and 1 represents a blocked cell. :return: int, number of unique paths. if not matrix or matrix[0][0] == 1 or matrix[-1][-1] == 1: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if matrix[i][j] == 1: dp[i][j] = 0 # Blocked cell else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Akshara has a unique rectangular garden where she grows flowers. She wants to divide this garden into square plots for better organization and irrigation. The goal is to maximize the side length of the square plots such that all plots have the same size and the entire garden area is used up without any leftover. Input The first input line contains an integer T, the number of test cases. Each test case consists of a single line with two space-separated integers w and h, representing the width and height of the rectangular garden. Output For each test case, output two space-separated integers, the largest possible side length of the square plots and the number of such square plots. Constraints 1 ≤ T ≤ 1000 1 ≤ w, h ≤ 10^9 SAMPLE INPUT 2 6 9 4 4 SAMPLE OUTPUT 3 6 4 1 Explanation In the 1st test case, the width (w) of the garden is 6 and the height (h) is 9. The largest possible side length of the square plots is 3, and the number of such square plots is 6. In the 2nd test case, the width (w) and height (h) are both 4. The largest possible side length of the square plots is 4, and the number of such square plots is 1.","solution":"def gcd(a, b): Helper function to calculate the gcd of two numbers while b: a, b = b, a % b return a def garden_plots(T, dimensions): results = [] for i in range(T): w, h = dimensions[i] side_length = gcd(w, h) num_plots = (w // side_length) * (h // side_length) results.append((side_length, num_plots)) return results"},{"question":"A restaurant chain named FastFoodie has designed a new system for tracking customer orders. Each customer can place multiple orders at different times. The objective is to determine the minimum number of kitchen slots required to handle the orders such that no two orders overlap in preparation time. Each order is represented by a preparation start time and an end time, and you need to calculate how many such orders can be handled simultaneously considering all overlapping times. Your task is to write a program to find the minimum number of kitchen slots needed to handle all orders without any overlap in their preparation times. Input The input consists of several datasets. Each dataset is formatted as follows: N start1 end1 start2 end2 . . . startN endN The first line of a dataset contains an integer N (1 ≤ N ≤ 1000) which indicates the number of orders. The following N lines describe the orders. Each line contains two integers, starti and endi (0 ≤ starti < endi ≤ 1000000000) which represents the start and end times of the i-th order respectively. The input ends with a single line containing a zero, which signifies that there are no more datasets. Output For each dataset, print the minimum number of kitchen slots required to handle all the orders without any overlap in their preparation times. Example Input 3 0 10 10 20 20 30 4 5 15 0 10 20 30 10 25 2 1 3 2 4 0 Output 1 2 2","solution":"import heapq def min_kitchen_slots(orders): Returns the minimum number of kitchen slots required to handle all orders without any overlap. if not orders: return 0 # Sort the orders by the start time orders.sort(key=lambda x: x[0]) # Initialize a min-heap to track the end times of orders being processed end_times = [] # Start with the first order heapq.heappush(end_times, orders[0][1]) # Iterate through the rest of the orders for i in range(1, len(orders)): current_start, current_end = orders[i] # If the current order\'s start time is greater than or equal to the earliest end time # we can use the same kitchen slot, pop the top of the heap if current_start >= end_times[0]: heapq.heappop(end_times) # Push the current order\'s end time onto the heap heapq.heappush(end_times, current_end) # The size of the heap will be the number of kitchen slots required return len(end_times) def process_input(input_data): result = [] lines = input_data.strip().split(\\"n\\") index = 0 while index < len(lines): n = int(lines[index].strip()) if n == 0: break orders = [] for i in range(1, n + 1): start, end = map(int, lines[index + i].strip().split()) orders.append((start, end)) result.append(min_kitchen_slots(orders)) index += n + 1 return result"},{"question":"Alice is very much interested in recipe management. She is compiling recipes from various sources and would like an efficient way to manage recipes and their ingredients. Each recipe consists of a name and a list of ingredients with respective quantities required. Alice might also want to update or delete recipes, or even check if she can make a specific recipe based on the ingredients she has in her pantry. Could you help her manage these recipes? You will be asked to provide a system that can handle multiple operations such as adding a new recipe, updating an existing recipe, deleting a recipe, and checking if a recipe can be made with the ingredients given. Input The first line contains an integer N, the number of operations to be performed. The following N lines describe the operations, one per line. - To add a new recipe: \\"ADD recipe_name I ingredient1 quantity1 I ingredient2 quantity2 ... I ingredientK quantityK\\" - To update an existing recipe: \\"UPDATE recipe_name I ingredient1 quantity1 I ingredient2 quantity2 ... I ingredientK quantityK\\" - To delete an existing recipe: \\"DELETE recipe_name\\" - To check if a recipe can be made: \\"CHECK recipe_name I ingredient1 quantity1 I ingredient2 quantity2 ... I ingredientK quantityK\\" Output For each \\"CHECK\\" operation, output \\"YES\\" if the recipe can be made with the given ingredients, otherwise \\"NO\\". Constraints 1 <= N <= 100 1 <= recipe_name length <= 50 1 <= ingredient name length <= 50 1 <= quantity <= 1000 Example Input: 8 ADD Pasta I Noodles 200 I Sauce 150 I Cheese 50 ADD Salad I Lettuce 100 I Tomato 50 I Onion 30 I Olive-oil 20 CHECK Pasta I Noodles 200 I Sauce 150 I Cheese 50 CHECK Pasta I Noodles 100 I Sauce 150 I Cheese 50 UPDATE Salad I Lettuce 120 I Tomato 50 I Onion 30 I Olive-oil 20 CHECK Salad I Lettuce 120 I Tomato 50 I Onion 30 I Olive-oil 20 DELETE Pasta CHECK Pasta I Noodles 200 I Sauce 150 I Cheese 50 Output: YES NO YES NO Explanation The 3rd operation checks if the \\"Pasta\\" recipe can be made with the given ingredients. It matches exactly with the required quantities, so the output is \\"YES\\". The 4th operation fails as the given quantity of Noodles is less than required, hence \\"NO\\". After the 5th operation, the \\"Salad\\" recipe is updated and the 6th operation confirms it with all the quantities matching. The 8th operation fails since the \\"Pasta\\" recipe is deleted and hence cannot be made, resulting in \\"NO\\".","solution":"class RecipeManager: def __init__(self): self.recipes = {} def add_recipe(self, recipe_name, ingredients): self.recipes[recipe_name] = ingredients def update_recipe(self, recipe_name, ingredients): if recipe_name in self.recipes: self.recipes[recipe_name] = ingredients def delete_recipe(self, recipe_name): if recipe_name in self.recipes: del self.recipes[recipe_name] def check_recipe(self, recipe_name, pantry_ingredients): if recipe_name not in self.recipes: return \\"NO\\" recipe_ingredients = self.recipes[recipe_name] for ingredient, quantity in recipe_ingredients.items(): if ingredient not in pantry_ingredients or pantry_ingredients[ingredient] < quantity: return \\"NO\\" return \\"YES\\" def process_operations(self, operations): results = [] for operation in operations: tokens = operation.split() command = tokens[0] recipe_name = tokens[1] ingredients = {} if command in [\\"ADD\\", \\"UPDATE\\", \\"CHECK\\"]: for i in range(3, len(tokens), 3): ingredient_name = tokens[i] ingredient_quantity = int(tokens[i+1]) ingredients[ingredient_name] = ingredient_quantity if command == \\"ADD\\": self.add_recipe(recipe_name, ingredients) elif command == \\"UPDATE\\": self.update_recipe(recipe_name, ingredients) elif command == \\"DELETE\\": self.delete_recipe(recipe_name) elif command == \\"CHECK\\": result = self.check_recipe(recipe_name, ingredients) results.append(result) return results # Helper function to handle input and processing def manage_recipes(operations): manager = RecipeManager() return manager.process_operations(operations)"},{"question":"You are given a list of integers. Transform the list such that each element in the new list is the sum of itself and all previous elements in the original list. Constraints * 1 ≤ len(list) ≤ 100 (len(list) is the number of integers in the list.) * -100 ≤ each integer in the list ≤ 100 Input Input is given from Standard Input in the following format: n (integer, the length of the list) list (a space-separated list of n integers) Output Output the transformed list as space-separated integers in one line. Examples Input 5 1 2 3 4 5 Output 1 3 6 10 15 Input 3 -1 2 3 Output -1 1 4 Input 4 0 0 0 0 Output 0 0 0 0","solution":"def transform_list(lst): Transform the list such that each element in the new list is the sum of itself and all previous elements in the original list. transformed_list = [] current_sum = 0 for num in lst: current_sum += num transformed_list.append(current_sum) return transformed_list def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) lst = list(map(int, data[1:])) result = transform_list(lst) print(\' \'.join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"A balanced binary search tree (BST) is a binary search tree that satisfies the balance property. The balance property ensures that the height of the two child subtrees of any node differ by at most one. A balanced BST maintains O(log n) time complexity for insertions, deletions, and lookups. Consider the following operations: - Insert(value): Insert a value into the BST while maintaining the balance property. - Delete(value): Remove a value from the BST while maintaining the balance property. - Search(value): Check if a value exists in the BST. You are given a sequence of operations to be performed sequentially on an initially empty balanced BST. Implement the balanced BST and perform the operations given in the input. Input - The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of operations. - The next t lines contain a series of operations in the format: - \\"Insert x\\" (0 ≤ x < 2^30) — Insert the integer x into the BST. - \\"Delete x\\" (0 ≤ x < 2^30) — Delete the integer x from the BST if it exists. - \\"Search x\\" (0 ≤ x < 2^30) — Print \\"Found\\" if the integer x exists in the BST, otherwise print \\"Not Found\\". Output The output should print the result of each \\"Search\\" operation in the order it appears in the input. Example Input 10 Insert 5 Insert 15 Search 5 Insert 10 Search 15 Search 7 Delete 15 Search 15 Insert 7 Search 7 Output Found Found Not Found Not Found Found Explanation - \\"Insert 5\\": Add 5 to the BST. - \\"Insert 15\\": Add 15 to the BST while maintaining balance. - \\"Search 5\\": 5 is in the BST, so output \\"Found\\". - \\"Insert 10\\": Add 10 to the BST while maintaining balance. - \\"Search 15\\": 15 is in the BST, so output \\"Found\\". - \\"Search 7\\": 7 is not in the BST, so output \\"Not Found\\". - \\"Delete 15\\": Remove 15 from the BST while maintaining balance. - \\"Search 15\\": 15 is not in the BST anymore, so output \\"Not Found\\". - \\"Insert 7\\": Add 7 to the BST while maintaining balance. - \\"Search 7\\": 7 is in the BST, so output \\"Found\\".","solution":"class TreeNode: def __init__(self, key): self.key = key self.height = 1 self.left = None self.right = None class AVLTree: def getHeight(self, node): if not node: return 0 return node.height def getBalance(self, node): if not node: return 0 return self.getHeight(node.left) - self.getHeight(node.right) def rightRotate(self, y): x = y.left T2 = x.right x.right = y y.left = T2 y.height = max(self.getHeight(y.left), self.getHeight(y.right)) + 1 x.height = max(self.getHeight(x.left), self.getHeight(x.right)) + 1 return x def leftRotate(self, x): y = x.right T2 = y.left y.left = x x.right = T2 x.height = max(self.getHeight(x.left), self.getHeight(x.right)) + 1 y.height = max(self.getHeight(y.left), self.getHeight(y.right)) + 1 return y def insert(self, root, key): if not root: return TreeNode(key) if key < root.key: root.left = self.insert(root.left, key) else: root.right = self.insert(root.right, key) root.height = max(self.getHeight(root.left), self.getHeight(root.right)) + 1 balance = self.getBalance(root) if balance > 1 and key < root.left.key: return self.rightRotate(root) if balance < -1 and key > root.right.key: return self.leftRotate(root) if balance > 1 and key > root.left.key: root.left = self.leftRotate(root.left) return self.rightRotate(root) if balance < -1 and key < root.right.key: root.right = self.rightRotate(root.right) return self.leftRotate(root) return root def minValueNode(self, node): current = node while current.left: current = current.left return current def delete(self, root, key): if not root: return root if key < root.key: root.left = self.delete(root.left, key) elif key > root.key: root.right = self.delete(root.right, key) else: if not root.left: return root.right elif not root.right: return root.left temp = self.minValueNode(root.right) root.key = temp.key root.right = self.delete(root.right, temp.key) if not root: return root root.height = max(self.getHeight(root.left), self.getHeight(root.right)) + 1 balance = self.getBalance(root) if balance > 1 and self.getBalance(root.left) >= 0: return self.rightRotate(root) if balance < -1 and self.getBalance(root.right) <= 0: return self.leftRotate(root) if balance > 1 and self.getBalance(root.left) < 0: root.left = self.leftRotate(root.left) return self.rightRotate(root) if balance < -1 and self.getBalance(root.right) > 0: root.right = self.rightRotate(root.right) return self.leftRotate(root) return root def search(self, root, key): if not root: return False if key == root.key: return True elif key < root.key: return self.search(root.left, key) else: return self.search(root.right, key) def process_operations(operations): avl_tree = AVLTree() root = None output = [] for operation in operations: op_parts = operation.split() cmd = op_parts[0] value = int(op_parts[1]) if cmd == \\"Insert\\": root = avl_tree.insert(root, value) elif cmd == \\"Delete\\": root = avl_tree.delete(root, value) elif cmd == \\"Search\\": found = avl_tree.search(root, value) if found: output.append(\\"Found\\") else: output.append(\\"Not Found\\") return output"},{"question":"Olivia is training for a marathon and plans to run n training sessions over n days. Each training session has a specific distance to be covered. Additionally, Olivia\'s energy levels change every day based on the training session she completed the previous day. Olivia starts with an initial energy level of e. After completing a training session on a given day, her energy level for the next day is modified by an energy factor (positive or negative). If her energy level drops to or below zero at any point in time, Olivia cannot complete her training schedule. Formally, if Olivia runs d_i kilometers on the i-th day, her energy level will be updated using the formula: energy = previous_energy + c_i * d_i, where c_i is a constant associated with the i-th day. Determine if Olivia can finish all n training sessions with a positive energy level on all days. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — number of training sessions. The second line contains a single integer e (1 ≤ e ≤ 1000) — initial energy level. The third line contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 1000), where d_i denotes the distance in kilometers Olivia needs to run on the i-th day. The fourth line contains n integers c_1, c_2, ..., c_n (-1000 ≤ c_i ≤ 1000), where c_i denotes the energy factor for the i-th day. Output Print \\"YES\\" if Olivia can complete all n training sessions with positive energy levels on all days, otherwise print \\"NO\\". Examples Input 3 10 5 6 4 -2 3 -1 Output YES Input 4 15 3 5 7 2 -3 -4 2 -1 Output NO Note In the first example: - Day 1: Olivia starts with energy 10. She runs 5 kilometers with energy factor -2, so her energy becomes 10 + (-2 * 5) = 0. - Day 2: Since Olivia\'s energy level became 0 after the first day, she won\'t be able to start the second day\'s training. Thus, it\'s not possible for Olivia to complete her training. In the second example: - Day 1: Olivia starts with energy 15. She runs 3 kilometers with energy factor -3, so her energy becomes 15 + (-3 * 3) = 6. - Day 2: She runs 5 kilometers with energy factor -4, so her energy becomes 6 + (-4 * 5) = -14. Since her energy level becomes negative, Olivia won’t be able to complete her training.","solution":"def can_complete_training(n, e, distances, energy_factors): energy = e for i in range(n): energy += energy_factors[i] * distances[i] if energy <= 0: return \\"NO\\" return \\"YES\\""},{"question":"A well-known museum has recently acquired an ancient artifact that is said to have mysterious properties. The museum staff have discovered that the artifact is capable of producing unique sequences of numbers under certain conditions. They have come to you for help in studying this property to validate its authenticity. The artifact generates sequences of n integers, where each integer is in the range from 1 to n (inclusive) and no two integers in the sequence are equal. The sequence produced is such that every prefix of the sequence has its elements sum to a multiple of k. For example, if k = 3, then the sequence [3, 1, 2] has valid prefixes [3] (3 % 3 == 0), [3, 1] (sum = 4, not divisible by 3), and [3, 1, 2] (sum = 6, divisible by 3). Given the two parameters, n and k, your task is to determine whether such a sequence exists, and if it does, provide one such sequence. Input - The first line contains two space-separated integers n and k (1 ≤ n, k ≤ 1000). Output - If a valid sequence exists, print n distinct integers between 1 and n on a single line, separated by spaces. If no such sequence exists, print \\"-1\\" (without quotes). Examples Input 3 3 Output 3 1 2 Input 4 5 Output -1 Input 5 1 Output 1 2 3 4 5 Input 7 4 Output 4 1 5 2 3 7 6 Note For Input (3, 3), the output is [3, 1, 2] which has valid prefixes: - [3] (sum = 3, which is 0 modulo 3) - [3, 1] (sum = 4, which is not 0 modulo 3) - [3, 1, 2] (sum = 6, which is 0 modulo 3) Hence, [3, 1, 2] is a valid sequence. For Input (4, 5), it is impossible to create such a sequence and hence the output is -1.","solution":"def generate_sequence(n, k): Given two parameters, n and k, determine if a sequence of n distinct integers can be created such that every prefix of the sequence has its elements sum to a multiple of k. If such a sequence exists, return it. Otherwise, return -1. # Check for the trivial case where k == 1, in which any sequence of 1 to n is valid. if k == 1: return list(range(1, n + 1)) # Check for the case where a sequence cannot meet the criteria. if n % k != 0: return -1 # Generate the sequence sequence = [] for i in range(n // k): for j in range(1, k + 1): sequence.append(i * k + j) return sequence"},{"question":"Alice is an avid collector of rare coins. One day she discovered that some of her coins have secret numbers engraved on them. She wants to play a little game with these numbers. Alice has n coins, each with a unique number engraved on it. She can perform the following operations on the coins: 1. Choose any two distinct coins and add the number engraved on one coin to the number engraved on the other coin. 2. Choose any two distinct coins and take the difference of their numbers, treating this as a new number (This new number must be positive). Alice wants to figure out the maximum possible number that can be obtained by performing a series of these operations. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of coins. The second line contains n integers, a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the numbers engraved on the coins. Output Output one integer — the maximum possible number that can be obtained by performing a series of operations on the coins. Examples Input 4 3 8 5 7 Output 23 Input 3 1 1 1 Output 3 Input 2 10 50 Output 60 Note In the first example, one possible series of operations is: 1. Add the number on the first coin to the number on the second coin, resulting in numbers [3, 11, 5, 7]. 2. Add the number on the third coin to the number on the second coin, resulting in [3, 16, 5, 7]. 3. Add the number on the fourth coin to the number on the second coin, resulting in [3, 23, 5, 7]. Thus, the maximum number is 23. In the second example, since all the numbers are the same, the highest sum we can get is the sum of all three numbers. In the third example, add the number on the first coin to the second coin, resulting in [10, 60], with the maximum number being 60.","solution":"def max_coin_value(n, coins): Returns the maximum possible number that can be obtained by performing a series of operations on the coins. # The maximum number that can be obtained is simply the sum of all coin values. return sum(coins)"},{"question":"A magical garden consists of a grid of unique flowers, represented by a 2D matrix `garden` where each element is a unique integer representing a specific type of flower. A gardener starts at the top-left corner of the garden and wants to make a walk to any flower and come back to the starting point. The gardener can only move up, down, left, or right and must not step on the same flower more than once during the walk. Determine if the gardener can return to the starting point following these conditions. Input The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 100), representing the dimensions of the garden matrix. The next `m` lines each contain `n` integers separated by spaces, representing the flowers in the garden. Each integer is unique within the garden. Output Print \\"Yes\\" if the gardener can return to the starting point following the rules, and \\"No\\" otherwise. Examples Input 2 2 1 2 3 4 Output Yes Input 2 3 1 2 3 4 5 6 Output No Input 3 3 1 2 3 4 5 6 7 8 9 Output Yes Note In the first example, the gardener can follow the path (0,0) -> (1,0) -> (1,1) -> (0,1) -> (0,0). In the second example, it is not possible to return to the starting point without stepping on the same flower more than once. In the third example, a possible path is (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (1,2) -> (0,2) -> (0,1) -> (0,0).","solution":"def is_return_possible(m, n, garden): Determine if it\'s possible for the gardener to return to the starting point without stepping on the same flower more than once. Parameters: m (int): Number of rows in the garden matrix. n (int): Number of columns in the garden matrix. garden (list of list of int): The garden matrix. Returns: str: \\"Yes\\" if it\'s possible to return to the starting point, otherwise \\"No\\". if m % 2 == 0 or n % 2 == 0: return \\"Yes\\" return \\"No\\" # Example usage: # m = 2 # n = 2 # garden = [ # [1, 2], # [3, 4] # ] # print(is_return_possible(m, n, garden)) # Output: Yes"},{"question":"In an enchanted forest, there are N magical creatures, numbered from 1 to N. Each creature has a unique magic power level. These creatures often form pairs to perform powerful spells. However, due to the limitation of their spells, a creature cannot pair with more than one other creature. Additionally, the difference in their magical powers should not exceed a given threshold K. Your task is to determine the maximum number of valid pairs of creatures that can be formed under these conditions. Constraints * 2 leq N leq 1000 * 1 leq K leq 1000 * 1 leq power_i leq 1000 (1 leq i leq N) Input Input is given from Standard Input in the following format: N K power_1 power_2 ... power_N Output Print the maximum number of pairs that can be formed. Examples Input 6 2 3 5 1 4 6 2 Output 3 Input 5 1 10 9 4 2 1 Output 2 Input 4 0 5 5 5 5 Output 2 Input 8 3 8 5 6 1 3 2 4 7 Output 4","solution":"def max_pairs(N, K, powers): Returns the maximum number of pairs of magical creatures that can be formed such that the difference in their magical powers does not exceed K. # Sort the powers array powers.sort() i, pairs = 0, 0 while i < N - 1: if powers[i + 1] - powers[i] <= K: pairs += 1 i += 2 # Move to the next pair else: i += 1 # Check the next element for pairing return pairs"},{"question":"Sarah is an avid reader and loves to organize her bookshelf. She arranges her books based on the number of pages they have. She wants to find out the average number of pages of the books on her shelf. However, she only wants to include books that have more than 100 pages to get a better insight into her collection. Can you help her with this? Input The first line of the input will contain T (number of test cases). Each test case will contain two lines. The first line will contain N (number of books on the shelf) and the second line will contain N space-separated integers Pj representing the number of pages in the j^th book. Output For each test case, print the average number of pages for all the books that have more than 100 pages. If no book has more than 100 pages, print \\"No books with more than 100 pages\\". Note: Your answer should be exactly up to 6 decimal places. Constraints 1 ≤ T ≤ 5 1 ≤ N ≤ 10^5 1 ≤ Pj ≤ 1000 SAMPLE INPUT 2 4 120 50 180 220 3 80 60 90 SAMPLE OUTPUT 173.333333 No books with more than 100 pages","solution":"def average_pages(test_cases): results = [] for case in test_cases: N, pages = case filtered_pages = [page for page in pages if page > 100] if not filtered_pages: results.append(\\"No books with more than 100 pages\\") else: average = sum(filtered_pages) / len(filtered_pages) results.append(f\\"{average:.6f}\\") return results # Example usage: # test_cases = [(4, [120, 50, 180, 220]), (3, [80, 60, 90])] # print(average_pages(test_cases))"},{"question":"Let\'s consider a grid of size n x n where n is an odd number. Each cell in the grid can have one of three states: either empty (represented by 0), a starting point of a move (represented by 1), or an endpoint of a move (represented by 2). A move can be made up, down, left, or right from the starting point and should end at an endpoint. However, a move cannot go outside the grid boundaries, and each move should be of the maximum length possible within the grid constraints. You need to determine if there is any possible move in the given grid that starts at any cell with 1 and ends at any cell with 2. If any such move is possible, output \\"YES\\". Otherwise, output \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 1999), which is guaranteed to be an odd number and represents the grid\'s dimensions. Each of the next n lines contains n integers representing the grid state. Each integer is one of 0, 1, or 2. Output Output \\"YES\\" if there is any possible valid move from a cell with 1 to a cell with 2. Otherwise, output \\"NO\\". Examples Input 3 1 0 2 0 0 0 2 0 0 Output YES Input 5 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 2 0 0 1 0 0 0 0 0 0 Output YES Input 3 1 0 0 0 0 0 0 0 2 Output NO Explanation In the first example, a move can be made from (0,0) to (0,2) or (0,0) to (2,0). Hence, the output is \\"YES\\". In the second example, there are moves from (1,1) to (1,3) and from (3,3) to (3,0). Thus, the output is \\"YES\\". In the third example, there are no possible moves from a cell with 1 to a cell with 2 within the grid, so the output is \\"NO\\".","solution":"def is_possible_move(n, grid): Determines if there\'s a possible move from any cell with 1 to any cell with 2 in the grid. # Finding all positions of 1\'s and 2\'s positions_1 = [] positions_2 = [] for i in range(n): for j in range(n): if grid[i][j] == 1: positions_1.append((i, j)) elif grid[i][j] == 2: positions_2.append((i, j)) # Checking for each pair of (1, 2) if they are in the same row or column for (x1, y1) in positions_1: for (x2, y2) in positions_2: if x1 == x2 or y1 == y2: return \\"YES\\" return \\"NO\\""},{"question":"You are given three integers, X, Y, and Z, each between 1 and 4 (inclusive). Determine if it is possible to choose two integers from X, Y, and Z such that their product is even. Constraints * All values in input are integers. * 1 leq X, Y, Z leq 4 Input Input is given from Standard Input in the following format: X Y Z Output If it is possible to choose two integers from the given values such that their product is even, print `Yes`; otherwise, print `No`. Examples Input 2 3 4 Output Yes Input 1 3 3 Output No Input 1 2 1 Output Yes","solution":"def is_product_even(X, Y, Z): Determines if it is possible to choose two integers from X, Y, and Z such that their product is even. Parameters: X, Y, Z (int): Three integers each between 1 and 4 (inclusive). Returns: str: \\"Yes\\" if it\'s possible to choose two integers such that their product is even, otherwise \\"No\\". def is_even(n): return n % 2 == 0 # Check all possible pairs among X, Y, and Z pairs = [(X, Y), (X, Z), (Y, Z)] for (a, b) in pairs: if is_even(a) or is_even(b): return \\"Yes\\" return \\"No\\""},{"question":"Leo has a set of n light bulbs numbered from 1 to n lined up in a row. Initially, all the light bulbs are turned off. Leo can perform a series of toggle operations. In a single toggle operation, Leo can select a range of consecutive bulbs and switch their states (i.e., turn on the off bulbs and turn off the on bulbs). Leo wants to achieve a certain configuration of bulbs after a series of operations. The target state of each bulb is specified as a binary string of length n, with \'1\' representing an \\"on\\" bulb and \'0\' representing an \\"off\\" bulb. Given the initial state (which is all bulbs off) and the target state, determine the minimum number of toggle operations required to achieve the target configuration. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of light bulbs. The second line contains a binary string of length n — the target configuration of the bulbs. Output Print a single integer — the minimum number of toggle operations required to transform the initial state to the target configuration. Examples Input 5 10101 Output 3 Input 3 111 Output 1 Input 7 0000000 Output 0 Note: For the first example, the sequence of operations can be: 1. Toggle the range [1, 1] to make it 1---. 2. Toggle the range [3, 3] to make it 101--. 3. Toggle the range [5, 5] to make it 10101. For the second example, the entire range [1, 3] can be toggled in one operation.","solution":"def minimum_toggles(n, target): Given the number of bulbs n and the target configuration, this function returns the minimum number of toggle operations required. # Initial state is all \\"0\\"s initial_state = \\"0\\" * n # Count the number of times we see a change from \'0\' to \'1\' or \'1\' to \'0\' # This change indicates a new range that will need to be toggled. toggles = 0 for i in range(n): if initial_state[i] != target[i]: toggles += 1 while i < n and initial_state[i] != target[i]: initial_state = initial_state[:i] + target[i] + initial_state[i+1:] i += 1 return toggles"},{"question":"You are given a list of strings representing a collection of words. Your task is to determine if there is any word in the collection that is an anagram of another word in the collection. Input The first line contains an integer ( n ) denoting the number of words in the list. Each of the following ( n ) lines contains one word. All words consist of lowercase English letters only. The number of words doesn\'t exceed 1000 and word lengths do not exceed 100. Output Print `YES` if there is at least one pair of anagrams in the list, otherwise print `NO`. Examples Input 5 listen silent enlist hello world Output YES Input 4 apple banana carrot date Output NO","solution":"def contains_anagram(words): Determine if there is any word in the collection that is an anagram of another word in the collection. Args: words (list of str): List of words. Returns: str: \\"YES\\" if there is at least one pair of anagrams, otherwise \\"NO\\". sorted_words = [\'\'.join(sorted(word)) for word in words] if len(sorted_words) != len(set(sorted_words)): return \\"YES\\" else: return \\"NO\\" # Example usage: # words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"hello\\", \\"world\\"] # print(contains_anagram(words)) # Output: \\"YES\\""},{"question":"You are a developer participating in a cybersecurity challenge, and one of the tasks involves analyzing log files to identify potential security breaches. The log files consist of entries that record user login attempts at a system. Each entry in the log is a string that represents a timestamp and a username, indicating when a specific user tried to log in. The challenge requires identifying suspicious activity, defined as a user attempting to log in more than `k` times within any given `m` minute window. If such activity is detected for a user, their username should be flagged. Input The input begins with two integers `m` (1 ≤ m ≤ 1440) and `k` (1 ≤ k ≤ 100), and then an integer `n` (1 ≤ n ≤ 10^6) indicating the number of log entries. Each of the following `n` lines contains a log entry, starting with the timestamp which is in the format \\"YYYY-MM-DD HH:MM\\" followed by a space and then a username (a string with no spaces). Output Output all usernames that should be flagged in ascending alphabetical order, each on a new line. If no users should be flagged, output \\"None\\". Example Input 5 3 6 2023-07-20 10:01 alice 2023-07-20 10:02 alice 2023-07-20 10:03 bob 2023-07-20 10:04 alice 2023-07-20 10:04 alice 2023-07-20 10:05 bob Output alice Note In this example, `alice` attempts to log in 4 times within a 5-minute window, surpassing the threshold `k` of 3 attempts, thus she gets flagged. `bob` only attempts to log in twice within any 5-minute window, so he does not get flagged.","solution":"from collections import defaultdict from datetime import datetime, timedelta def detect_suspicious_activity(m, k, n, logs): user_logs = defaultdict(list) flagged_users = set() # Parse logs and store them by username for log in logs: timestamp_str, username = log[:16], log[17:] timestamp = datetime.strptime(timestamp_str, \\"%Y-%m-%d %H:%M\\") user_logs[username].append(timestamp) # Check each user\'s activity for suspicious behavior for username, timestamps in user_logs.items(): timestamps.sort() for i in range(len(timestamps)): window_start = timestamps[i] window_end = window_start + timedelta(minutes=m) count = 0 for j in range(i, len(timestamps)): if timestamps[j] > window_end: break count += 1 if count > k: flagged_users.add(username) break # Output flagged users in alphabetical order if flagged_users: return sorted(flagged_users) else: return [\\"None\\"]"},{"question":"You are given an integer array A of length N and an integer Q representing the number of queries. Each query can be one of the following types: * T_i=1: Given two integers X_i and V_i, add V_i to A_{X_i}. * T_i=2: Given two integers L_i and R_i, calculate the sum of the subarray from A_{L_i} to A_{R_i}. * T_i=3: Given a single integer V_i, calculate the count of elements in the array that are greater than or equal to V_i. Constraints: * 1 leq N leq 2 times 10^5 * -10^6 leq A_i leq 10^6 * 1 leq Q leq 2 times 10^5 * 1 leq T_i leq 3 * 1 leq X_i leq N, -10^6 leq V_i leq 10^6 (T_i=1) * 1 leq L_i leq R_i leq N (T_i=2) * All input values are integers. Input Input is given from Standard Input in the following format: N Q A_1 A_2 cdots A_N First query Second query vdots Q-th query Each query is given in the following formats: If T_i=1, ``` T_i X_i V_i ``` If T_i=2, ``` T_i L_i R_i ``` If T_i=3, ``` T_i V_i ``` Output For each query with T_i=2, 3, print the answer. Example Input ``` 5 5 1 2 3 2 1 2 1 5 3 2 1 3 1 2 2 4 3 2 ``` Output ``` 9 3 8 3 ```","solution":"def process_queries(n, q, arr, queries): results = [] for query in queries: t = query[0] if t == 1: x, v = query[1], query[2] arr[x-1] += v elif t == 2: l, r = query[1], query[2] results.append(sum(arr[l-1:r])) elif t == 3: v = query[1] count = sum(1 for x in arr if x >= v) results.append(count) return results def process_input_output(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) q = int(data[1]) arr = list(map(int, data[2:2+n])) queries = [] index = 2 + n for _ in range(q): t = int(data[index]) if t == 1: x = int(data[index+1]) v = int(data[index+2]) queries.append((t, x, v)) index += 3 elif t == 2: l = int(data[index+1]) r = int(data[index+2]) queries.append((t, l, r)) index += 3 elif t == 3: v = int(data[index+1]) queries.append((t, v)) index += 2 result = process_queries(n, q, arr, queries) for res in result: print(res)"},{"question":"Given a list of books, each with a particular thickness, and a shelf that can support a certain maximum width, you need to find the largest number of books that can be placed on the shelf without exceeding the maximum width. Input The first line contains an integer n (1 ≤ n ≤ 1000) representing the number of books. The second line contains n integers, where the i-th integer represents the thickness t_i (1 ≤ t_i ≤ 1000) of the i-th book. The third line contains one integer W (1 ≤ W ≤ 10000), which represents the maximum width the shelf can support. Output Output an integer representing the maximum number of books that can be placed on the shelf without exceeding the maximum width. Example Input 5 2 3 1 5 4 10 Output 4 Explanation We can place the books with thicknesses 2, 3, 1, and 4 on the shelf (2 + 3 + 1 + 4 = 10, which is within the maximum width of 10). This allows us to place a total of 4 books.","solution":"def max_books_on_shelf(n, thicknesses, W): Returns the maximum number of books that can be placed on the shelf without exceeding the maximum width. Parameters: n (int): The number of books. thicknesses (list of int): The thicknesses of the books. W (int): The maximum width the shelf can support. Returns: int: The maximum number of books. # Sort the list of thicknesses in ascending order thicknesses.sort() current_width = 0 count = 0 for thickness in thicknesses: if current_width + thickness <= W: current_width += thickness count += 1 else: break return count"},{"question":"A research lab is experimenting with a new type of balanced chemical equation generator. Each chemical equation adheres to strict properties, ensuring that the number of atoms of each element on both sides of the equation is balanced. In this task, you have an equation with specific slots for elements and coefficients and need to determine the possible values to balance it perfectly. Input The first line contains a single integer t (1 ≤ t ≤ 1000) denoting the number of test cases. Each test case follows the same structure: - The first line of each test case contains an integer n (1 ≤ n ≤ 100) representing the number of unique elements. - The second line contains n space-separated strings representing the element symbols. - The third line contains n space-separated integers representing the number of atoms of each element on the reactant side. - The fourth line contains n space-separated integers representing the number of atoms of each element on the product side. Output For each test case, output a single line containing `YES` if the equation can be balanced with integer coefficients, otherwise output `NO`. Example Input 2 2 H O 2 1 2 1 3 C H O 1 4 2 1 2 1 Output YES NO Note In the first test case, both sides already have identical counts of H and O atoms, indicating a balanced equation. In the second test case, the reactant side has 4 H atoms and the product side only has 2 H atoms, so the equation cannot be balanced with integer coefficients. This question evaluates the ability to determine if a chemical equation is already balanced using provided data or requires algorithmic adjustments to achieve an equilibrium state.","solution":"def can_balance_equation(t, test_cases): results = [] for i in range(t): n = test_cases[i][\'n\'] reactants = test_cases[i][\'reactants\'] products = test_cases[i][\'products\'] balanced = True for j in range(n): if reactants[j] != products[j]: balanced = False break if balanced: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You\'re given a string consisting of lowercase English letters and an integer k. The string is called a \\"k-beautiful\\" string if it can be transformed into a string where every character appears at least k times. You have to remove some characters from the string (possibly none) so that the resulting string is k-beautiful. Your task is to find the length of the longest possible k-beautiful string that can be achieved. Input The first line contains the string s (1 ≤ |s| ≤ 100,000), which consists of lowercase English letters. The second line contains the integer k (1 ≤ k ≤ 100,000). Output Output the length of the longest k-beautiful string. Examples Input aabbcc 2 Output 6 Input abc 2 Output 0 Input aaabbbccc 3 Output 9","solution":"from collections import Counter def longest_k_beautiful_string(s, k): Returns the length of the longest k-beautiful string that can be achieved. if k <= 0 or not s: return 0 counter = Counter(s) length = 0 for char, count in counter.items(): if count >= k: length += (count // k) * k return length"},{"question":"In a far-off land, there exist n enchanted towns, each connected by magical roads. Each road has a certain cost to traverse it. As a gesture of goodwill, the king wants to make travel between any two towns as cheap as possible, ensuring that there exists a path (direct or indirect) between any pair of towns. However, the roads lose their magic powers once they are traversed, so each can only be used once. Your task is to help the king by determining the cheapest way to connect all towns together using the magical roads. Input The first line of input consists of two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of towns and the number of magical roads between them. Each of the next m lines contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — the cost to traverse the road between towns u and v. Output If it is possible to connect all towns together using the given roads, print the minimum total cost. If it\'s not possible to connect all the towns, print -1. Examples Input 4 5 1 2 3 2 3 2 3 4 4 1 4 1 1 3 5 Output 6 Input 3 1 1 2 1 Output -1","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): edges.sort(key=lambda x: x[2]) parent = list(range(n)) rank = [0] * n mst_cost = 0 edge_count = 0 for u, v, w in edges: u -= 1 v -= 1 if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += w edge_count += 1 if edge_count == n - 1: return mst_cost return -1 def minimum_cost_to_connect_towns(n, m, roads): if n - 1 > m: return -1 return kruskal(n, roads)"},{"question":"You are given an array of integers that represent the heights of a range of mountains, in order from left to right. Define a peak as an element that is larger than its immediate neighbors (if they exist). Your task is to find the number of peaks in the array. Input - The first line contains a single positive integer t (1 ≤ t ≤ 50) indicating the number of test cases. - Each test case begins with an integer n (1 ≤ n ≤ 100) which represents the number of mountains. - The next line contains n space-separated integers, representing the heights of the mountains. Output - For each test case, output a single integer indicating the number of peaks in the corresponding array. Example Input: 3 5 1 3 2 4 1 3 1 2 3 6 1 3 2 3 5 4 Output: 2 0 2","solution":"def count_peaks(t, test_cases): results = [] for i in range(t): n, heights = test_cases[i] peak_count = 0 for j in range(1, n - 1): if heights[j] > heights[j - 1] and heights[j] > heights[j + 1]: peak_count += 1 results.append(peak_count) return results"},{"question":"Dexter has created a new game where players must navigate a grid filled with obstacles. The grid is represented as a matrix of cells where each cell can either be empty or contain an obstacle. Each cell is identified by its row and column number. The objective is to find the shortest path from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1) without stepping on obstacles. You can only move to adjacent cells in the grid (left, right, up, or down). If there is no valid path, you should return -1. INPUT First line gives T, the number of test cases. Each test case starts with two integers N and M - the dimensions of the grid. The following N lines each contain M integers, where 0 represents an empty cell and 1 represents an obstacle. OUTPUT For each test case, print the length of the shortest path from (0, 0) to (N-1, M-1). Return -1 if no such path exists. CONSTRAINTS 1 ≤ T ≤ 50 1 ≤ N, M ≤ 100 SAMPLE INPUT 2 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 1 1 0 0 0 0 SAMPLE OUTPUT 4 -1 Explanation For the first case, the shortest path is right -> right -> down -> down -> left, yielding a total length of 4 steps. For the second case, no path exists from the top-left corner to the bottom-right corner due to the obstacles blocking all possible paths.","solution":"from collections import deque def shortest_path(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1 def parse_input(input_string): input_lines = input_string.strip().split(\\"n\\") num_cases = int(input_lines[0]) index = 1 test_cases = [] for _ in range(num_cases): n, m = map(int, input_lines[index].split()) index += 1 grid = [] for _ in range(n): grid.append(list(map(int, input_lines[index].split()))) index += 1 test_cases.append(grid) return test_cases def process_test_cases(input_string): test_cases = parse_input(input_string) results = [] for grid in test_cases: results.append(shortest_path(grid)) return results def main(input_string): results = process_test_cases(input_string) return \'n\'.join(map(str, results))"},{"question":"A robot is located at the top-left corner of an MxN grid. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. However, there are obstacles in the grid that the robot cannot traverse. Write a function that takes an MxN grid as input where each cell is either 0 (empty) or 1 (obstacle), and returns the number of unique paths that the robot can take to reach the bottom-right corner. A path is considered unique if no two paths traverse the same set of positions in the same order. Input: - The first line contains an integer T denoting the number of test cases. - Each test case is represented by two lines: - The first line contains two integers M and N, denoting the dimensions of the grid. - The next M lines each contain N integers, representing the grid. Output: - For each test case, output the number of unique paths from the top-left corner to the bottom-right corner. Constraints: 1 ≤ T ≤ 100 1 ≤ M, N ≤ 100 0 ≤ grid[i][j] ≤ 1 Example Input: 2 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 0 0 0 0 0 0 Output: 2 3 Explanation: In the first test case, there are two unique paths from the top-left to the bottom-right corner avoiding obstacles: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second test case, there are three unique paths: 1. Down -> Down -> Right -> Right -> Up -> Right 2. Down -> Right -> Right -> Down -> Down 3. Right -> Down -> Down -> Right -> Down","solution":"def unique_paths_with_obstacles(M, N, grid): Returns the number of unique paths in a grid with obstacles. Parameters: M (int): Number of rows in the grid. N (int): Number of columns in the grid. grid (list of list of int): The grid representation where 0 is an empty cell and 1 is an obstacle. Returns: int: Number of unique paths from top-left to bottom-right corner. if grid[0][0] == 1 or grid[M-1][N-1] == 1: return 0 dp = [[0] * N for _ in range(M)] dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[M-1][N-1] def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) results = [] index = 1 for _ in range(T): M, N = map(int, lines[index].split()) grid = [] for i in range(M): grid.append(list(map(int, lines[index + 1 + i].split()))) result = unique_paths_with_obstacles(M, N, grid) results.append(result) index += (M + 1) return results"},{"question":"Trip Organizer A group of friends is planning a road trip and they need to organize the driving schedule such that each person drives at least one segment of the journey. The objective is to distribute the driving responsibility as evenly as possible among the friends, minimizing the difference in the number of segments driven by each person, and also maximizing the minimum number of segments driven by any individual when there are multiple possible ways to distribute the segments evenly. Each segment has a predefined length, and the distribution of driving segments needs to ensure each person drives at least one segment. Input The input consists of several test cases. Each test case begins with two integers n and m (1 ≤ n ≤ 50, 1 ≤ m ≤ 100) where n is the number of friends and m is the number of segments. The next line contains m integers representing the lengths of the segments. The end of the input is indicated by a line with two zeros. Output For each test case, output two integers separated by a single space. The first integer represents the minimum number of segments driven by any person, and the second integer represents the maximum number of segments driven by any person in an optimized distribution. Sample Input 3 5 10 20 30 40 50 4 7 10 20 20 30 30 40 50 0 0 Sample Output 1 2 1 2 Explanation In the first test case, one optimal way to distribute the segments is: - Friend 1 drives segments of lengths 10 and 20. - Friend 2 drives segments of lengths 30 and 40. - Friend 3 drives the segment of length 50. In the second test case, an optimal distribution could be: - Friend 1 drives segments of lengths 10 and 30. - Friend 2 drives the segment of length 20. - Friend 3 drives segments of lengths 20 and 50. - Friend 4 drives segments of lengths 30 and 40.","solution":"def trip_organizer(test_cases): def calculate_segments(n, m, segments): average = m // n leftover = m % n if leftover == 0: return average, average else: return average, average + 1 results = [] for test_case in test_cases: n, m, segments = test_case min_segments, max_segments = calculate_segments(n, m, segments) results.append((min_segments, max_segments)) return results"},{"question":"You are tasked with reorganizing a string of lowercase English letters such that no two adjacent characters are the same. If it is not possible to achieve this, you should return an empty string. To achieve this, you can swap any two characters in the string as many times as required until the no-adjacent-same-characters condition is met. # Input - The first line of input contains an integer `t` (1 ≤ t ≤ 10^4) - the number of test cases. - Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 10^5) - the string you need to reorganize. The total length of all strings does not exceed 10^5. # Output For each test case, print a single line - the reorganized string or an empty string if it is not possible to reorganize it. # Example Input ``` 3 aab aaab abc ``` Output ``` aba (empty) abc ``` # Note In the first test case, the string \\"aab\\" can be reorganized as \\"aba\\" where no two adjacent characters are the same. In the second test case, it is not possible to reorganize the string \\"aaab\\" to meet the requirement, so the output is an empty string. In the third test case, the string \\"abc\\" can be reorganized as \\"abc\\" itself, since all characters are already in the desired order.","solution":"from collections import Counter import heapq def reorganize_string(s): # Count the frequency of each character in the string frequency = Counter(s) # Create a max heap based on frequency (-frequency to make it a max-heap) max_heap = [(-freq, char) for char, freq in frequency.items()] heapq.heapify(max_heap) # Initialize previous character and result string prev_char, prev_freq = \'\', 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # If previous character exists and has remaining frequency, add it back to the heap if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Set the current character as the previous one, and decrement its frequency prev_char = char prev_freq = freq + 1 # If rearranged string length is equal to the original string, return the string if len(result) == len(s): return \'\'.join(result) else: return \\"\\" def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(reorganize_string(s)) return results"},{"question":"You are given a list of integers representing the heights of buildings in a row. You can change the height of at most 1 building by adding or removing any positive amount of height (including making it taller or shorter than its current height, and it can be changed to any other integer). Determine the minimum possible value of the maximum difference in height between any two adjacent buildings after this change. Input The first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) representing the number of buildings. The second line contains n integers h_1, h_2, …, h_n (1 ≤ h_i ≤ {10^9}) representing the heights of the buildings. Output Output a single integer, the minimum possible value of the maximum difference between the heights of any two adjacent buildings after modifying the height of at most one building. Examples Input 5 1 5 3 9 7 Output 4 Input 3 15 10 20 Output 5 Note In the first example, you can change the second building height from 5 to 6. Then the differences between adjacent buildings are 5 (|1-6|), 3 (|6-3|), 6 (|3-9|), and 2 (|9-7|). The maximum difference is now 6. In the second example, you can change the first building height from 15 to 17. Then the differences between adjacent buildings are 7 (|17-10|) and 10 (|10-20|). The maximum difference is now 10. However, changing the third building height from 20 to 15 results in the differences 5 (|15-10|) and 5 (|10-15|). Therefore, the minimum possible value of the maximum difference is 5.","solution":"def min_max_difference(n, heights): def get_max_diff(arr): max_diff = 0 for i in range(len(arr) - 1): max_diff = max(max_diff, abs(arr[i] - arr[i + 1])) return max_diff if n <= 2: return 0 min_possible_max_diff = float(\'inf\') for i in range(n): if i == 0: new_heights = heights[1:] elif i == n-1: new_heights = heights[:-1] else: new_heights = heights[:i] + heights[i+1:] min_possible_max_diff = min(min_possible_max_diff, get_max_diff(new_heights)) return min_possible_max_diff"},{"question":"You are given three non-negative integers a, b, and c. You can perform the following operation any number of times: Choose any one of the three integers and decrease it by 1 while increasing another one by 1. Your task is to determine if it\'s possible to make all three integers equal using the given operation. Input: The input consists of a single line containing three non-negative integers a, b, and c (0 ≤ a, b, c ≤ 109). Output: Output \\"Yes\\" (without quotes) if it is possible to make all three integers equal, otherwise output \\"No\\" (without quotes). Examples: Input: 1 2 3 Output: Yes Input: 1 2 4 Output: No Input: 0 0 0 Output: Yes Explanation: In the first example, you can make 1 -> 2 and 3 -> 2 in one move, then all become 2. So the answer is \\"Yes\\". In the second example, it\'s impossible to make all three integers equal. Thus, the answer is \\"No\\". In the third example, all integers are already equal, so the answer is \\"Yes\\".","solution":"def can_make_equal(a, b, c): Determines if the given integers a, b, and c can be made equal by the allowed operation. total_sum = a + b + c # Check if the total sum of a, b, and c is divisible by 3 return total_sum % 3 == 0"},{"question":"You are given a string consisting of lowercase alphabetical characters. Your task is to rearrange its characters such that no two adjacent characters are the same. If it is possible to achieve, output any possible rearrangement. Otherwise, output \\"Not Possible\\". Input The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains a string of length n consisting of lowercase alphabetical characters. Output If it is possible to rearrange the characters such that no two adjacent characters are the same, print any such rearrangement. Otherwise, print \\"Not Possible\\". Examples Input 6 aabbcc Output abcabc Input 4 aaab Output Not Possible Input 5 aabbc Output abcab","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the characters of the input string such that no two adjacent characters are the same. If it is impossible to do so, returns \\"Not Possible\\". frequency = Counter(s) max_heap = [(-count, char) for char, count in frequency.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # If there\'s a previously used character, push it back to the heap if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update the previous character to the current one prev_count, prev_char = count + 1, char result = \'\'.join(result) if len(result) != len(s): return \\"Not Possible\\" return result"},{"question":"In the magical land of Algorithmia, there is a mystical garden that consists of n rows and m columns of flowerbeds. Each flowerbed can have one of three types of flowers: daffodils (represented by \'D\'), lilies (represented by \'L\'), or no flowers (represented by \'-\'). Flower fairies from the Garden Guild visit the garden every day to tend to it. Each fairy can perform two operations: 1. **Planting**: A fairy can plant either a daffodil or a lily in any empty flowerbed (a cell marked with \'-\'). 2. **Harvesting**: A fairy can remove either a daffodil or a lily from a flowerbed. However, the fairies have a rule: they must never plant flowers such that any row or column contains more than one type of flower. This means that if a row or column already contains a daffodil, no more lilies can be planted in that row or column, and vice versa. The fairies want to know if it is possible to tend to the garden in such a way that every flowerbed is either empty, has a daffodil, or has a lily, without breaking the planting rule. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100), which are the dimensions of the garden. Each of the next n lines contains m characters each, describing the garden. These characters belong to the set {\'D\', \'L\', \'-\'}, where \'-\' denotes an empty flowerbed, \'D\' denotes a daffodil, and \'L\' denotes a lily. Output Print \\"Possible\\" (without quotes) if the fairies can tend to the garden according to their rule. Otherwise, print \\"Impossible\\" (without quotes). Examples Input 2 2 D- -L Output Possible Input 3 3 D-L --- --- Output Impossible","solution":"def can_tend_garden(n, m, garden): rows = [[] for _ in range(n)] cols = [[] for _ in range(m)] for i in range(n): for j in range(m): if garden[i][j] == \'D\': rows[i].append(\'D\') cols[j].append(\'D\') elif garden[i][j] == \'L\': rows[i].append(\'L\') cols[j].append(\'L\') for row in rows: if \'D\' in row and \'L\' in row: return \\"Impossible\\" for col in cols: if \'D\' in col and \'L\' in col: return \\"Impossible\\" return \\"Possible\\""},{"question":"Maria is organizing a charity marathon. Each participant of the marathon is assigned a unique integer ID number. The marathon involves running through several checkpoints. Each participant\'s progress is recorded in an array which logs their ID number whenever they pass through a checkpoint. Sometimes, a participant might pass the same checkpoint multiple times, and hence their ID number could appear multiple times in the array. Maria wants to ensure that each participant receives a medal based on their participation, but she only wants to give one medal to each participant, regardless of how many times their ID appears in the log. Additionally, she wants to know the number of unique participants that have completed the race. Your task is to help Maria determine the number of unique participants and to generate a list of these unique participant IDs in ascending order. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of checkpoint logs. The second line contains n integers x1, x2, ..., xn (1 ≤ xi ≤ 10^5) — participant ID numbers appearing in the checkpoint logs. Output Print the number of unique participants in the first line. In the second line, print the list of unique participant IDs in ascending order, separated by a single space. Examples Input 7 4 2 4 3 2 1 4 Output 4 1 2 3 4 Input 5 5 5 5 5 5 Output 1 5 Note In the first sample, there are 4 unique participants with IDs 1, 2, 3, and 4. In the second sample, there is only 1 unique participant with ID 5.","solution":"def marathon_participants(n, participant_ids): Given the number of logs and a list of participant IDs recorded at each checkpoint, returns the number of unique participants and their IDs in ascending order. :param n: integer - the number of checkpoint logs :param participant_ids: list of integers - the participant IDs recorded at each checkpoint :return: tuple (int, list of int) - the number of unique participants and a list of unique participant IDs # Using a set to find unique participants unique_participants = set(participant_ids) # Converting the set to a sorted list sorted_unique_participants = sorted(unique_participants) return len(sorted_unique_participants), sorted_unique_participants"},{"question":"Problem Statement A group of friends decided to create a new board game that involves connecting cities with roads. The roads are represented as line segments connecting two cities on a 2D plane. Each city is represented by a pair of coordinates (xi, yi). The players must ensure that the road network forms a single connected component, meaning that every city must be reachable from any other city through a series of roads. However, during the construction of the roads, some cities were left isolated or the roads did not connect all the cities. Your task is to determine how many additional roads are needed at minimum to ensure all cities are interconnected. Two cities are considered connected if there exists a path of roads directly or indirectly connecting them. Constraints - 1 <= C <= 100 — number of cities - 0 <= xi, yi <= 1000 — coordinates of each city - 0 <= R <= 4950 — number of roads Input The input is structured as follows: ``` C R x1 y1 x2 y2 ... xC yC ci1 cj1 ci2 cj2 ... ciR cjR ``` - The first line contains two integers, C (number of cities) and R (number of roads). - The next C lines each contain two integers xi and yi representing the coordinates of the ith city. - The next R lines each contain two integers cij and cjj, representing a road between the cities indexed by cij and cjj (indices are 1-based). Output Output a single line containing the minimum number of additional roads required to connect all the cities. Examples Input ``` 5 2 0 0 2 2 4 4 6 6 8 8 1 2 4 5 ``` Output ``` 2 ``` Input ``` 4 1 1 2 3 4 6 7 8 9 2 3 ``` Output ``` 2 ``` Input ``` 3 3 1 1 2 2 3 3 1 2 2 3 1 3 ``` Output ``` 0 ```","solution":"def minimum_additional_roads(cities, roads, city_coords, connections): from collections import defaultdict, deque def bfs(start, visited, graph): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Build adjacency list for the graph graph = defaultdict(list) for conn in connections: u, v = conn graph[u-1].append(v-1) graph[v-1].append(u-1) visited = set() components = 0 # Find number of connected components for city in range(cities): if city not in visited: bfs(city, visited, graph) components += 1 # The minimum additional roads needed to connect all components # is (components - 1) return components - 1"},{"question":"Given a positive integer n, you are tasked with finding the next integer greater than n which has the same number of 1-bits in its binary representation as n. Write a function that accepts an integer n and outputs the next integer greater than n with the same number of 1-bits in its binary form. Constraints * 1 <= n <= 10^6 Input The input is given from Standard Input in the following format: n Output Print the next integer greater than n with the same number of 1-bits in its binary representation. Examples Input 5 Output 6 Explanation: The binary representation of 5 is \'101\', which contains two 1-bits. The next integer greater than 5 with two 1-bits in its binary representation is 6 (\'110\'). Input 7 Output 11 Explanation: The binary representation of 7 is \'111\', which contains three 1-bits. The next integer greater than 7 with three 1-bits in its binary representation is 11 (\'1011\'). Input 12 Output 17 Explanation: The binary representation of 12 is \'1100\', which contains two 1-bits. The next integer greater than 12 with two 1-bits in its binary representation is 17 (\'10001\').","solution":"def next_higher_same_one_bits(n): Returns the next integer greater than n which has the same number of 1-bits in its binary representation. num_one_bits = bin(n).count(\'1\') next_num = n + 1 while bin(next_num).count(\'1\') != num_one_bits: next_num += 1 return next_num"},{"question":"You are given an array of integers and a target integer. Write a program to count and return the number of unique pairs (i, j) in the array such that array[i] + array[j] is equal to the target integer, where i < j. Note that each pair must be unique. Input The input is given in the following format: n array target The first line contains an integer n, the size of the array (1 ≤ n ≤ 105). The second line contains n space-separated integers, representing the elements of the array. The third line contains the target integer. Output Output a single integer, the number of unique pairs (i, j) such that array[i] + array[j] equals the target integer. Examples Input 5 1 2 3 4 5 6 Output 2 Input 4 1 1 1 1 2 Output 1 Note In the first example, the unique pairs are (1, 5) and (2, 4). In the second example, the unique pair is (1, 1).","solution":"def count_unique_pairs(array, target): Returns the count of unique pairs (i, j) where array[i] + array[j] equals the target. seen = set() pairs = set() for num in array: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return len(pairs) # Function to read input and convert it to the necessary format for the `count_unique_pairs` function. def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) array = list(map(int, data[1:n+1])) target = int(data[n+1]) result = count_unique_pairs(array, target) print(result)"},{"question":"A delivery robot needs to transport packages between various departments in a large warehouse. The warehouse is represented as a grid of cells with rows and columns. Each cell is either an empty space where the robot can move freely or an obstacle which the robot cannot traverse. The robot can move in four possible directions: up, down, left, and right. However, due to the robot\'s weight constraints, it has a limited number of moves it can make per trip. Given the warehouse grid and the maximum number of moves the robot can make in a trip, determine if it\'s possible for the robot to travel from the start cell to the destination cell within the allowed number of moves. Input The first line of the input contains three integers n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 104) — the dimensions of the warehouse grid (n rows and m columns) and the maximum number of moves the robot can make. The next n lines each contain m characters representing the grid. The characters can be: - \'.\' indicating an empty space, - \'#\' indicating an obstacle, - \'S\' indicating the starting position of the robot, - \'D\' indicating the destination position. There will be exactly one \'S\' and one \'D\' in the grid. Output Print \\"YES\\" if the robot can reach the destination within the allowed number of moves. Otherwise, print \\"NO\\". Examples Input 5 5 10 S.... .#. #.. .#... .#..D Output YES Input 4 4 6 S.#. .. .#D. Output NO Input 3 4 2 S.#D .. Output NO Note In the first example, the robot can navigate around the obstacles and reach the destination in fewer than 10 moves. In the second example, the robot cannot reach the destination because the path is blocked by obstacles and the number of moves is insufficient. In the third example, the robot cannot reach the destination within 2 moves even though the path is clear.","solution":"def can_robot_reach_destination(n, m, k, grid): from collections import deque # Find start and destination positions start = None destination = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'D\': destination = (i, j) # Check if start or destination are not found (even if problem\'s input guarantee they exist) if not start or not destination: return \\"NO\\" # BFS to find shortest path directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) # (row, col, current_moves) visited = set() visited.add((start[0], start[1])) while queue: r, c, current_moves = queue.popleft() if (r, c) == destination: return \\"YES\\" if current_moves < k: for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] != \'#\': queue.append((nr, nc, current_moves + 1)) visited.add((nr, nc)) return \\"NO\\""},{"question":"In a galaxy far, far away, there lies a planet called Algorithms. The inhabitants of this planet practice a unique form of arithmetic involving their mystical ability to manipulate sequences of numbers through operations they call \\"transmutations.\\" The two most common transmutations are: 1. Addition: Given a sequence of integers, the operation can add a fixed integer to each element of the sequence. 2. Multiplication: Given a sequence of integers, the operation can multiply each element of the sequence by a fixed integer. The inhabitants are particularly interested in determining if a given initial sequence of integers can be transmuted into a target sequence using at most one \\"addition\\" and one \\"multiplication\\" in any order. Given two sequences of integers `A` and `B`, both of length `n`, you are to determine if it\'s possible to transform sequence `A` into sequence `B` by performing at most one \\"addition\\" and one \\"multiplication\\" in any order (i.e., you can perform \\"addition\\" first followed by \\"multiplication\\", or \\"multiplication\\" first followed by \\"addition\\", or just \\"addition\\" or just \\"multiplication\\"). Input The first line contains an integer `n` (1 ≤ n ≤ 1000), the length of the sequences. The second line contains `n` integers representing sequence `A`. The third line contains `n` integers representing sequence `B`. Output Print \\"YES\\" if sequence `A` can be transmuted into sequence `B` using at most one \\"addition\\" and one \\"multiplication\\", otherwise, print \\"NO\\". Examples Input 3 1 2 3 2 4 6 Output YES Input 3 2 4 6 1 2 4 Output NO","solution":"def can_transmute_sequence(n, A, B): Determines if sequence A can be transmuted into sequence B using at most one addition and one multiplication in any order, or just one of those operations. # Return immediately if both sequences are the same if A == B: return \\"YES\\" # Try addition first, then multiplication for k in range(n): add_val = B[k] - A[k] simulated_A = [A[i] + add_val for i in range(n)] for m in range(n): if simulated_A[m] != 0: mult_val = B[m] / simulated_A[m] if all(simulated_A[i] * mult_val == B[i] for i in range(n)): return \\"YES\\" # Try multiplication first, then addition for k in range(n): if A[k] != 0: mult_val = B[k] / A[k] simulated_A = [A[i] * mult_val for i in range(n)] add_val = B[k] - simulated_A[k] if all(simulated_A[i] + add_val == B[i] for i in range(n)): return \\"YES\\" return \\"NO\\" # Example usage: # n = 3 # A = [1, 2, 3] # B = [2, 4, 6] # print(can_transmute_sequence(n, A, B)) # Output: YES # n = 3 # A = [2, 4, 6] # B = [1, 2, 4] # print(can_transmute_sequence(n, A, B)) # Output: NO"},{"question":"You are given a string S consisting of lowercase alphabets and an integer K. You want to transform the string such that the number of distinct characters in any substring of the transformed string is at most K. You can choose to delete some characters from the original string S to create the transformed string. Determine the length of the longest possible substring of the transformed string that satisfies the above condition. Constraints * The input string S has a length of at least 1 and at most 100,000. * The integer K is at least 1 and at most the number of distinct characters in S. Input The input is given from Standard Input in the following format: S K Output Print the maximum length of the longest possible substring of the transformed string that contains at most K distinct characters. Examples Input abcba 2 Output 3 Input abcd 1 Output 1 Input aabbcc 1 Output 2","solution":"def longest_substring_with_k_distinct(s, k): if not s or k == 0: return 0 char_count = {} left = 0 max_length = 0 for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"David and his friend Ethan enjoy solving puzzles involving numbers. David has come up with a new problem for Ethan involving the sum of unique elements in a list. Given a list of integers, Ethan needs to find the sum of elements that appear exactly once in the list. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case contains a single line with space-separated integers representing the list. Output For each test case, output a single line containing the sum of the elements that appear exactly once in the list. If no such elements exist in the list, output 0. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 (where N is the number of elements in the list) -10^9 ≤ A[i] ≤ 10^9 (where A[i] is the ith element of the list) Example Input: 3 1 2 3 2 1 4 5 6 6 5 4 7 8 9 8 9 10 Output: 3 7 10 Explanation Example case 1: The elements 1, 2, and 3 appear more than once, so they are not considered. No elements appear exactly once, so the output is 0. Example case 2: The element 7 appears exactly once in the list. Example case 3: The element 10 appears exactly once in the list.","solution":"def sum_of_unique_elements(test_cases): results = [] for nums in test_cases: count = {} for num in nums: if num in count: count[num] += 1 else: count[num] = 1 unique_sum = sum(num for num, cnt in count.items() if cnt == 1) results.append(unique_sum) return results"},{"question":"You are given a list of products sold in a store. Each product has a name, a category, and a price. Write a program to categorize the products and print each category and the list of products in that category, sorted by price in ascending order. Products in the same category should be printed in the order of their names if they have the same price. You can assume that: - A product name consists of at most 50 characters. - A category consists of at most 20 characters. - The price is a positive integer not greater than 10,000. - The number of products is less than or equal to 100. The categories should be printed in alphabetical order. # Input ``` name category price :: :: ``` # Output ``` category name price name price :: :: ``` # Example Input ``` apple fruit 100 banana fruit 60 carrot vegetable 40 detergent cleaning 120 broccoli vegetable 70 wipe cleaning 80 soap cleaning 80 orange fruit 100 ``` Output ``` cleaning detergent 120 soap 80 wipe 80 fruit banana 60 apple 100 orange 100 vegetable carrot 40 broccoli 70 ```","solution":"def categorize_products(products): Categorize products by their category and sort them by price and name. :param products: List of tuples (name, category, price) :return: Dictionary with categories as keys and sorted list of products as values from collections import defaultdict categories = defaultdict(list) for product in products: name, category, price = product categories[category].append((name, price)) sorted_categories = {} for category in sorted(categories.keys()): sorted_categories[category] = sorted(categories[category], key=lambda x: (x[1], x[0])) return sorted_categories def print_categories(sorted_categories): Print categories and products in the desired format. :param sorted_categories: Dictionary with sorted products for category in sorted_categories.keys(): print(category) for product in sorted_categories[category]: print(f\\"{product[0]} {product[1]}\\")"},{"question":"Write a function that reads an integer array and returns the maximum possible sum of its elements such that no two elements are adjacent in the original array. If all elements are negative, return 0. For example, consider the array {3, 2, 5, 10, 7}. The maximum possible sum of elements without picking adjacent elements is 15 (selecting 3, 5, and 7). INPUT The input consists of two lines. - The first line contains an integer n, the number of elements in the array. - The second line contains n space-separated integers representing the elements of the array. OUTPUT Output a single integer denoting the maximum sum. CONSTRAINTS 1 ≤ n ≤ 1000 -10^4 ≤ array elements ≤ 10^4 SAMPLE INPUT 5 3 2 5 10 7 SAMPLE OUTPUT 15","solution":"def max_non_adjacent_sum(arr): Returns the maximum possible sum of non-adjacent elements from the array. If all elements are negative, returns 0. if not arr: return 0 include = 0 exclude = 0 for num in arr: new_exclude = max(exclude, include) include = exclude + num exclude = new_exclude return max(exclude, include) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:n+1])) print(max_non_adjacent_sum(arr)) if __name__ == \\"__main__\\": main()"},{"question":"Given a 2D matrix of characters and a string, determine if the string can be constructed by starting from any cell in the matrix and recursively moving to any of the 8 neighboring cells (up, down, left, right, and 4 diagonals). Each cell can be used only once in the construction of the string. Write a function `find_path(matrix, word)` that takes as input a matrix (a list of lists of characters) and a word (a string). The function should return `True` if the word can be constructed, otherwise return `False`. # Function Signature ```python def find_path(matrix: List[List[str]], word: str) -> bool: pass ``` # Input - `matrix`: A list of lists of characters representing the 2D matrix. The dimensions of the matrix are between 1 and 100, inclusive. - `word`: A string of length between 1 and 100, consisting of uppercase English letters only. # Output - Return `True` if the word can be constructed by moving from one cell to an adjacent cell in the matrix. Otherwise, return `False`. # Examples ```python matrix = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCCED\\" print(find_path(matrix, word)) # Output: True matrix = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"SEE\\" print(find_path(matrix, word)) # Output: True matrix = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCB\\" print(find_path(matrix, word)) # Output: False ``` # Constraints - You can only move in 8 possible directions (right, left, up, down, and diagonally). - An index in the matrix can only be used once in the path. - The word consists of uppercase English letters only.","solution":"def find_path(matrix, word): def dfs(x, y, word_index): if word_index == len(word): return True if x < 0 or y < 0 or x >= len(matrix) or y >= len(matrix[0]) or matrix[x][y] != word[word_index]: return False # Save the current letter and mark the cell as visited current_char = matrix[x][y] matrix[x][y] = \\"#\\" # Possible directions (8 directions) directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for dx, dy in directions: if dfs(x + dx, y + dy, word_index + 1): return True # Restore the current letter (backtrack) matrix[x][y] = current_char return False for i in range(len(matrix)): for j in range(len(matrix[0])): if dfs(i, j, 0): return True return False"},{"question":"A factory has a machine that packages items into boxes. Each box has a maximum capacity of `C` items. The factory receives orders with a certain number of items, and each order needs to be divided into the minimum number of boxes possible without exceeding the capacity of each box. Your task is to determine the minimum number of boxes required for each order. Input Format: - The first line contains an integer `N`, the number of orders. - The next `N` lines each contain a single integer representing the number of items in the order. Output Format: - For each order, output the minimum number of boxes required. Constraints: - 1 ≤ N ≤ 100 - 1 ≤ number of items in each order ≤ 10^4 - 1 ≤ C ≤ 1000 SAMPLE INPUT: 3 450 1200 999 C = 500 SAMPLE OUTPUT: 1 3 2 Explanation: - For the first order of 450 items, only one box is needed since the capacity is 500. - For the second order of 1200 items, three boxes are needed (500+500+200). - For the third order of 999 items, two boxes are needed (500+499).","solution":"def min_boxes(orders, C): Determines the minimum number of boxes required for each order given the capacity C. Parameters: orders (list of int): List of number of items in each order. C (int): Maximum capacity of each box. Returns: list of int: Number of boxes required for each order. result = [] for items in orders: result.append((items + C - 1) // C) # Using ceiling division to compute number of boxes return result"},{"question":"Assume you have a list of numbers and you need to arrange them in a specific order. The task is to sort the numbers based on the number of set bits (1s) in their binary representation. If two numbers have the same number of set bits, the smaller number should appear first. **Input:** - The first line contains an integer `t` (1 ≤ t ≤ 100) - the number of test cases. - Each of the next `t` lines contains a space-separated list of integers. **Output:** - For each test case, print the sorted list on a new line. **Constraints:** - 1 ≤ n ≤ 100 (number of integers in each test case) - 0 ≤ a[i] ≤ 10^6 **Example:** **Input:** ``` 2 3 7 8 9 1 2 4 8 16 ``` **Output:** ``` 8 3 9 7 1 2 4 8 16 ```","solution":"def count_set_bits(n): return bin(n).count(\'1\') def sort_by_set_bits(test_cases): sorted_cases = [] for case in test_cases: sorted_case = sorted(case, key=lambda x: (count_set_bits(x), x)) sorted_cases.append(sorted_case) return sorted_cases def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [list(map(int, line.split())) for line in lines[1:t+1]] return sort_by_set_bits(test_cases)"},{"question":"Write a program that simulates the rotation of a 2D NxN matrix clockwise. Your task is to perform the rotation and print the resulting matrix. Constraints * 1 leq N leq 100 * Each element in the matrix is an integer where 0 leq the integer leq 1000 Input The first line contains a single integer N, representing the dimensions of the NxN matrix. The next N lines contain N integers each, representing the matrix elements row by row. Output Output the rotated matrix with each element separated by a space on a new line. Examples Input 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 Input 3 1 2 3 4 5 6 7 8 9 Output 7 4 1 8 5 2 9 6 3","solution":"def rotate_matrix(matrix): Rotates the given NxN matrix clockwise. N = len(matrix) rotated = [[0] * N for _ in range(N)] for row in range(N): for col in range(N): rotated[col][N-1-row] = matrix[row][col] return rotated def print_matrix(matrix): Prints the matrix in the required format. for row in matrix: print(\\" \\".join(map(str, row))) def main(): # Read input N = int(input()) matrix = [] for _ in range(N): row = list(map(int, input().strip().split())) matrix.append(row) # Rotate matrix rotated_matrix = rotate_matrix(matrix) # Print output print_matrix(rotated_matrix) if __name__ == \\"__main__\\": main()"},{"question":"An online bookstore is organizing its inventory of books. Each book belongs to one or more genres, and the store wants to print out a report of the top N genres based on the number of books they contain. You are given a list of books, where each book has a unique ID and a list of genres it belongs to. Your task is to determine the top N genres in terms of the number of books they include. If two genres have the same count, they should be ordered lexicographically. Write a program that outputs the top N genres along with their respective counts. Input The first line contains two integers B (1 ≤ B ≤ 10^3) and N (1 ≤ N ≤ 50), where B is the number of books and N is the number of top genres to report. Each of the next B lines contains the book ID (a unique integer) followed by a space-separated list of genres (each genre is a string consisting of lowercase English letters only). Output Print N lines. Each line should contain a genre followed by the number of books it includes. The genres should be listed in decreasing order of the number of books they contain. If two genres have the same count, they should be ordered alphabetically. Examples Input 5 3 1 fantasy mystery 2 mystery 3 fantasy 4 romance 5 fantasy romance Output fantasy 3 mystery 2 romance 2 Input 4 2 1 history 2 science history 3 history 4 science Output history 3 science 2","solution":"def top_n_genres(B, N, books): from collections import defaultdict genre_count = defaultdict(int) for book in books: book_info = book.split() genres = book_info[1:] for genre in genres: genre_count[genre] += 1 sorted_genres = sorted(genre_count.items(), key=lambda x: (-x[1], x[0])) return sorted_genres[:N] def format_genre_output(sorted_genres): return [f\\"{genre} {count}\\" for genre, count in sorted_genres]"},{"question":"You are given an undirected graph with n nodes and m edges. Your task is to determine if you can color the graph using exactly k different colors such that no two adjacent nodes have the same color. Input: - The first line contains three integers n, m and k (1 ≤ n ≤ 100, 0 ≤ m ≤ 200, 1 ≤ k ≤ 100). - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v. Output: - Print \\"YES\\" if the graph can be colored using exactly k different colors, otherwise print \\"NO\\". Example: Input: 4 4 3 1 2 1 3 2 4 3 4 Output: YES Input: 3 3 2 1 2 2 3 3 1 Output: NO Explanation: In the first example: - The graph can be colored using 3 colors such as: (1-Red), (2-Green), (3-Blue), (4-Red). Hence, the output is \\"YES\\". In the second example: - The graph requires more than 2 colors to ensure no two adjacent nodes have the same color. Hence, the output is \\"NO\\".","solution":"def can_color_graph(n, m, k, edges): if k <= 1: # We can only color a graph with k=1 color if it contains no edges return \\"YES\\" if m == 0 else \\"NO\\" # Perform a graph traversal to determine the highest degree of any vertex from collections import defaultdict adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) max_degree = max(len(neighbors) for neighbors in adjacency_list.values()) # A graph can be colored with k colors if the maximum degree < k (for ordinary graphs) # For k=2, we need to check if the graph is bipartite if k == 2: # To check bipartiteness, we use BFS to try to color the graph in two colors color = {} def bfs_check_bipartite(source): queue = [source] color[source] = 0 # Start coloring with color 0 while queue: node = queue.pop(0) current_color = color[node] for neighbor in adjacency_list[node]: if neighbor not in color: color[neighbor] = 1 - current_color # Alternate color queue.append(neighbor) elif color[neighbor] == current_color: return False return True for node in range(1, n + 1): if node not in color: if not bfs_check_bipartite(node): return \\"NO\\" return \\"YES\\" return \\"YES\\" if max_degree < k else \\"NO\\""},{"question":"A sequence of integers is called an arithmetic sequence if the difference between consecutive terms is constant. Given a sequence containing n integers, determine if it is an arithmetic sequence after possibly reordering the integers. You need to write a function that can check this. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of integers in the sequence. The second line contains the sequence of n integers separated by spaces (−10^9 ≤ integer ≤ 10^9). Output Output \\"YES\\" (without quotes) if the numbers can be reordered to form an arithmetic sequence, and \\"NO\\" otherwise. Examples Input 5 3 5 1 7 9 Output YES Input 4 1 2 4 7 Output NO","solution":"def is_arithmetic_sequence(n, sequence): Determine if the sequence can be reordered to form an arithmetic sequence. :param n: int - number of integers in the sequence :param sequence: list of int - the sequence of integers :return: str - \\"YES\\" if the sequence can be reordered to form an arithmetic sequence, otherwise \\"NO\\" if n == 1: return \\"YES\\" sequence.sort() diff = sequence[1] - sequence[0] for i in range(2, n): if sequence[i] - sequence[i - 1] != diff: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers A of length N. You can perform the following operation on the array as many times as you want: - Choose an integer x (x > 0) and remove exactly x elements from the array. For every index i that is removed, add its value to the result score. Compute the maximum result score possible if you can perform the above operation any number of times. Input - The input consists of a single integer N (1 ≤ N ≤ 1000), and an array of N integers A (1 ≤ A_i ≤ 1000). The input will be given in the following format: ``` N A_1 A_2 ... A_N ``` Output - Print the maximum possible result score. Examples Input ``` 4 1 2 3 4 ``` Output ``` 10 ``` Input ``` 5 5 5 10 100 10 ``` Output ``` 130 ``` Input ``` 6 3 2 3 2 3 2 ``` Output ``` 15 ``` Explanation of Examples - In the first case, the array is [1, 2, 3, 4]. The optimal strategy is to remove all elements at once: 1 + 2 + 3 + 4 = 10. - In the second case, the array is [5, 5, 10, 100, 10]. The optimal strategy is to remove elements [100] first, then [10, 10] twice, and [5, 5] twice. The result score is 100 + 10 + 10 + 5 + 5 = 130. - In the third case, the array is [3, 2, 3, 2, 3, 2]. The optimal strategy is to remove [3, 3, 3] and [2, 2, 2]. The result score is 3 + 3 + 3 + 2 + 2 + 2 = 15.","solution":"def max_result_score(N, A): Computes the maximum possible result score by repeatedly removing elements from the array A and adding their values to the result score. Parameters: N (int): The length of the array. A (list of int): The array of integers. Returns: int: The maximum possible result score. return sum(A)"},{"question":"Shane is a data scientist working at a tech startup called AI Wonders. One of his projects involves analyzing a series of data streams to identify anomalies in real-time. The data streams are represented as lists of integers, with each integer representing the value at a specific time point. Shane wants to write a function that efficiently identifies the maximum length of contiguous subarrays meeting certain criteria, which he will specify. The function will take the following input parameters: 1. A list of integers `A` representing the data stream values. 2. An integer `X` which sets the upper limit for the elements in the subarrays. 3. An integer `Y` which sets the lower limit for the length of the subarrays. The criteria for a subarray to be valid are: - Every element in the subarray must be less than or equal to `X`. - The length of the subarray must be at least `Y`. Shane needs the function to return the maximum length of such a subarray, or 0 if no such subarray exists. Constraints: - The length of the list `A` (i.e., number of elements) will be at most 100,000. - The value of each element in `A` can be any integer in the range from -10^9 to 10^9. - The values of `X` and `Y` will be integers such that 0 ≤ X ≤ 10^9 and 1 ≤ Y ≤ 100,000. Input: - `A`: List of integers representing the data stream. - `X`: An integer setting the upper limit. - `Y`: An integer setting the lower limit. Output: - The maximum length of a contiguous subarray that meets the criteria, or 0 if no such subarray exists. Example: Input: ``` A = [1, 2, 3, 4, 5, 6, 7, 8] X = 5 Y = 3 ``` Output: ``` 5 ``` Explanation: The contiguous subarray [1, 2, 3, 4, 5] meets the criteria, and its length is 5. Input: ``` A = [10, 5, 3, 1, 2, 8, 6, 7] X = 4 Y = 2 ``` Output: ``` 3 ``` Explanation: The contiguous subarray [3, 1, 2] meets the criteria, and its length is 3. Input: ``` A = [1, 2, 3, 4, 5] X = 2 Y = 3 ``` Output: ``` 0 ``` Explanation: No contiguous subarray meets the criteria as the length of valid subarrays is less than 3. Write a function `max_subarray_length` to solve this problem. The function signature is as follows: ```python def max_subarray_length(A: List[int], X: int, Y: int) -> int: pass ```","solution":"def max_subarray_length(A, X, Y): Returns the maximum length of contiguous subarrays where every element is less than or equal to X, and the length of the subarray is at least Y. max_len = 0 current_len = 0 for value in A: if value <= X: current_len += 1 else: if current_len >= Y: max_len = max(max_len, current_len) current_len = 0 if current_len >= Y: max_len = max(max_len, current_len) return max_len"},{"question":"Given a grid of size n x n, and an initial position (x,y) on the grid, you need to determine the minimum number of moves required to reach a target position (tx, ty). You can only move up, down, left, or right, and certain cells are blocked, meaning you cannot step on them. You need to write a function that takes the grid, the initial position, and the target position as inputs and returns the minimum number of moves. If the target cannot be reached, return -1. Constraints: - The grid is an n x n matrix, where 1 <= n <= 100. - Each cell in the grid is represented by either 0 (free) or 1 (blocked). - The initial and target positions are always free cells. - Grid provides a valid representation, i.e., initial and target positions are within the grid bounds and are not blocked. Inputs: 1. grid: list of lists of integers representing the grid. 2. start: a tuple (x, y) representing the initial position. 3. target: a tuple (tx, ty) representing the target position. SAMPLE INPUT: grid = [ [0, 0, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 0, 0], [0, 0, 1, 1, 0], [1, 0, 0, 0, 0] ] start = (0, 0) target = (4, 4) SAMPLE OUTPUT: 8","solution":"from collections import deque def min_moves(grid, start, target): Returns the minimum number of moves required to reach the target position from the start position on the given grid, or -1 if the target cannot be reached. n = len(grid) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right def is_valid(x, y): return 0 <= x < n and 0 <= y < n and grid[x][y] == 0 queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == target: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # Target cannot be reached"},{"question":"The Little Elephant enjoys working with strings. He has a string s consisting of lowercase Latin letters. Let\'s define a \\"bold segment\\" as a contiguous substring of s such that each character in that substring appears at least twice in the entire string s. The Little Elephant wants to find the longest bold segment in the string. Help the Little Elephant find the length of the longest bold segment in the string s. If there are no such segments, the answer should be 0. Input The first line contains a single string s (1 ≤ |s| ≤ 105) consisting of lowercase Latin letters. Output In a single line print a single integer — the length of the longest bold segment. Examples Input abcabc Output 6 Input abba Output 4 Input abcdef Output 0 Note In the first sample, the entire string \\"abcabc\\" is a bold segment because each character appears at least twice. In the second sample, the entire string \\"abba\\" is a bold segment because each character appears at least twice. In the third sample, there are no bold segments because each character appears only once. Thus, the answer is 0.","solution":"def longest_bold_segment(s): n = len(s) if n == 0: return 0 # Count the frequency of each character freq = {} for ch in s: if ch in freq: freq[ch] += 1 else: freq[ch] = 1 # Find all characters that appear at least twice at_least_twice = set(ch for ch in freq if freq[ch] >= 2) max_length = 0 current_length = 0 in_bold_segment = False for ch in s: if ch in at_least_twice: if in_bold_segment: current_length += 1 else: in_bold_segment = True current_length = 1 else: if in_bold_segment: max_length = max(max_length, current_length) in_bold_segment = False current_length = 0 # Check one more time at the end of the string if in_bold_segment: max_length = max(max_length, current_length) return max_length"},{"question":"You are given a string s consisting of lowercase Latin letters and question marks (\'?\'). A question mark can be replaced by any lowercase Latin letter. Determine if you can replace the question marks in s to produce a palindrome. Input The input consists of a single line: a string s (1 ≤ |s| ≤ 1000) consisting of lowercase Latin letters and question marks. Output Print \\"YES\\" if it is possible to replace the question marks to make s a palindrome, and \\"NO\\" otherwise. Examples Input a?b??a Output YES Input ab?cb Output NO Input x?x Output YES Input ?z? Output YES","solution":"def can_form_palindrome(s): Determines if it is possible to replace the question marks in s to produce a palindrome. n = len(s) s = list(s) # Convert to list for mutability for i in range(n // 2): left = s[i] right = s[n - i - 1] if left == \'?\' and right == \'?\': s[i] = s[n - i - 1] = \'a\' # Choose \'a\' arbitrarily elif left == \'?\': s[i] = right elif right == \'?\': s[n - i - 1] = left elif left != right: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of n integers and q queries. Each query asks you to find the maximum sum of any subarray that includes at least one element from a specified range [l, r]. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of testcases. The description of t testcases follows. The first line of each testcase contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of queries. The second line of each testcase contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9). Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the description of the query. Output For each testcase, print q integers — the results for each query of that testcase. Example Input 1 5 3 5 -3 2 -1 4 1 3 2 5 1 5 Output 5 5 7 Note In the example, the subarrays that include at least one element from the ranges are: 1. For the range [1, 3], the maximum sum subarray is [5], which sums to 5. 2. For the range [2, 5], the maximum sum subarray is [5, -3, 2, -1, 4], which sums to 7. 3. For the range [1, 5], the maximum sum subarray is [5, -3, 2, -1, 4], which sums to 7.","solution":"def max_subarray_sum_in_range(arr, queries): Given an array and a list of queries, each asking for the maximum sum of any subarray that includes at least one element from a specified range [l, r], this function returns the answers for each query. :param arr: List of integers representing the array. :param queries: List of tuples where each tuple contains two integers representing the range [l, r]. :return: List of integers representing the maximum sum of subarrays for each query. def max_subarray_sum(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far results = [] for l, r in queries: max_sum = float(\'-inf\') for i in range(l-1, r): for j in range(i, r): current_sum = sum(arr[i:j+1]) max_sum = max(max_sum, current_sum) results.append(max_sum) return results def process_test_cases(t, test_cases): Processes multiple test cases of the max_subarray_sum_in_range function. :param t: Integer representing the number of test cases. :param test_cases: List of tuples, each containing the integer n, the integer q, the array, and the queries. :return: List of lists containing the results for each query of each test case. results = [] for testcase in test_cases: n, q, arr, queries = testcase results.append(max_subarray_sum_in_range(arr, queries)) return results # Example usage: # t = 1 # test_cases = [ # (5, 3, [5, -3, 2, -1, 4], [(1, 3), (2, 5), (1, 5)]) # ] # print(process_test_cases(t, test_cases)) # Output: [[5, 5, 7]]"},{"question":"You are given a string S consisting of lowercase English letters and a string T consisting of lowercase English letters, both of length N. You can perform the following operation any number of times: Choose a pair of positions i and j (1 <= i, j <= N) such that S[i] == T[j] and swap S[i] with S[j]. Your task is to determine if it is possible to make strings S and T identical using any number of such operations. Constraints * 1 <= N <= 10^5 * |S| = |T| = N * S and T only contain lowercase English letters. Input Input is given from Standard Input in the following format: S T Output Print \\"YES\\" if it is possible to make the strings identical, otherwise \\"NO\\". Examples Input abc bca Output YES Input abcd dcba Output YES Input abcde abcfz Output NO","solution":"def can_make_strings_identical(S, T): Determine if it is possible to make strings S and T identical by swapping characters in specified conditions. # If S and T have the same characters and same frequencies # we can always swap to make them identical from collections import Counter # Count frequencies of characters in both strings count_S = Counter(S) count_T = Counter(T) # Compare the frequency counters if count_S == count_T: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of integers. Your task is to find the smallest subarray (continuous segment) that needs to be sorted (in ascending order) so that the whole array becomes sorted. Input - The first line contains an integer n (1 ≤ n ≤ 100,000) — the size of the array. - The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 100,000) — the elements of the array. Output - Print two integers l and r (1 ≤ l ≤ r ≤ n) — the 1-based starting and ending indices of the smallest subarray which needs to be sorted. If the array is already sorted, output \\"0 0\\". Examples Input 8 1 2 4 5 3 5 6 7 Output 3 5 Input 5 1 2 3 4 5 Output 0 0 Note In the first example, sorting the subarray from index 3 to 5 (1-based) would make the entire array sorted: [1, 2, 3, 4, 5, 5, 6, 7]. In the second example, the array is already sorted, so the output is \\"0 0\\".","solution":"def find_unsorted_subarray(arr): n = len(arr) start, end = -1, -1 for i in range(n-1): if arr[i] > arr[i + 1]: start = i break if start == -1: return (0, 0) for i in range(n-1, 0, -1): if arr[i] < arr[i - 1]: end = i break min_val = min(arr[start:end+1]) max_val = max(arr[start:end+1]) for i in range(start): if arr[i] > min_val: start = i break for i in range(n-1, end, -1): if arr[i] < max_val: end = i break return (start + 1, end + 1)"},{"question":"A wireless sensor network is arranged in a circular formation with n sensors numbered from 1 to n. Each sensor has a unique identifier and communicates with its two immediate neighbors. Due to a malfunction, some of the sensors stopped working and need to be repaired. You are given an array `sensors` representing the working status of each sensor, where sensors[i] is 1 if the i-th sensor is working and 0 otherwise. You are tasked with counting the number of continuous segments of working sensors of maximum length. Write a program that outputs the maximum length of continuous working sensors and the number of such segments. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of sensors. The second line contains n integers (each being 0 or 1) separated by spaces, representing the working status of the sensors. Output Print two integers — the maximum length of continuous working sensors and the number of such segments. Examples Input 10 1 0 1 1 0 1 1 1 0 1 Output 3 1 Input 5 0 1 1 1 0 Output 3 1 Input 7 1 1 0 1 1 0 1 Output 2 2 Note In the first example, the maximum length of continuous working sensors is 3 (sensors 6 to 8), and there is 1 such segment. In the second example, the longest segment of consecutive working sensors is 3 (sensors 2 to 4), and there is 1 such segment. In the third example, the longest segments have a length of 2, and there are 2 such segments (sensors 1 to 2 and sensors 4 to 5).","solution":"def max_working_sensors_segment(n, sensors): max_length = 0 max_segments_count = 0 current_length = 0 for status in sensors: if status == 1: current_length += 1 if current_length > max_length: max_length = current_length max_segments_count = 1 elif current_length == max_length: max_segments_count += 1 else: current_length = 0 return max_length, max_segments_count"},{"question":"You are given a sequence of brackets (both round and square brackets). Determine if the sequence is balanced. A sequence is considered balanced if all opening brackets have a corresponding closing bracket of the same type, and they close in the correct order. A sequence is balanced if: 1. Each opening bracket has a corresponding closing bracket of the same type. 2. Brackets close in the correct order, meaning that a closing square bracket should not close before any previous opened round bracket is closed, and vice-versa. Input The first line contains an integer n (1 ≤ n ≤ 100) which is the length of the sequence. The second line contains a sequence of n characters consisting only of round brackets `()` and square brackets `[]`. Output Print \\"YES\\" if the sequence is balanced. Otherwise, print \\"NO\\". Examples Input 8 ([]([])) Output YES Input 5 ([)]) Output NO Input 4 [(( Output NO","solution":"def is_balanced(n, sequence): Returns \\"YES\\" if the sequence of brackets is balanced. Otherwise, returns \\"NO\\". Params: n (int): Length of the sequence. sequence (str): A sequence of brackets consisting only of round and square brackets. Returns: str: \\"YES\\" if the sequence is balanced, \\"NO\\" otherwise. stack = [] brackets = {\')\': \'(\', \']\': \'[\'} for char in sequence: if char in brackets.values(): # if it\'s an opening bracket stack.append(char) elif char in brackets: # if it\'s a closing bracket if stack and stack[-1] == brackets[char]: stack.pop() else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"You are given an array of integers of length n and an integer k (1 ≤ k ≤ n). You need to find the maximum sum of any contiguous subarray of length exactly k. For example, if the array is [1, 2, 3, 4, 5] and k=3, the maximum sum of any contiguous subarray of length 3 is 12, from the subarray [3, 4, 5]. Write a function that takes in an array of integers and the integer k, and returns the maximum sum of any contiguous subarray of length k. Function Signature ```python def max_contiguous_subarray_sum(arr: List[int], k: int) -> int: ``` # Input - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array. - The second line contains n integers a_1, a_2, …, a_n (-10^4 ≤ a_i ≤ 10^4)— the elements of the array. - The third line contains a single integer k (1 ≤ k ≤ n) — the length of the contiguous subarray. # Output - Output a single integer - the maximum sum of any contiguous subarray of length k. # Examples Input ``` 5 1 2 3 4 5 3 ``` Output ``` 12 ``` Input ``` 6 -1 2 3 4 -2 2 2 ``` Output ``` 7 ``` Note In the first example, the maximum sum of any contiguous subarray of length 3 is 12 from the subarray [3, 4, 5]. In the second example, the maximum sum of any contiguous subarray of length 2 is 7 from the subarray [3, 4].","solution":"from typing import List def max_contiguous_subarray_sum(arr: List[int], k: int) -> int: Returns the maximum sum of any contiguous subarray of length k. if not arr or k > len(arr): return 0 # Calculate the sum of the first subarray of length k max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"A renowned city is known for its beautifully arranged gardens. Each garden in the city is laid out in a rectangular grid with M rows and N columns. The mayor of the city wants to promote walking culture and has decided to build walking paths in such a way that connects any two distinct cells in the garden. These paths can only be built horizontally or vertically between adjacent cells. However, the city has a unique rule: there must be exactly one path leading to or from every cell, forming a single continuous loop around the garden. Being a programmer, you have been tasked with developing a program to determine the length of the walking path needed for a given garden. Input - The input consists of multiple datasets. Each dataset is a single line containing two integers M and N separated by a single space. The line containing two zeros separated by a single space indicates the end of the input. - M and N are the number of rows and columns of the garden, respectively. You may assume 0 < M, N ≤ 100. Output - For each dataset, output a separate line containing the total length of the walking path required for the garden. Each path length should be followed by the word \\"units\\". Example Input 3 3 4 5 10 8 0 0 Output 12 units 28 units 72 units","solution":"def calculate_walking_path_length(m, n): Calculate the length of the walking path needed for a given garden with M rows and N columns. The length is calculated as (M * N * 2). if m == 0 or n == 0: return None return m * n * 2 def process_garden_paths(input_lines): Processes multiple datasets and outputs the walking path lengths for each garden. results = [] for line in input_lines: m, n = map(int, line.split()) if m == 0 and n == 0: break path_length = calculate_walking_path_length(m, n) results.append(f\\"{path_length} units\\") return results"},{"question":"Given a list of integers, you are required to determine if the list can be split into two non-empty sublists such that the sum of each sublist is equal. If possible, print \\"YES\\" and the two sublists. Otherwise, print \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the list. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9), representing the elements of the list. Output If the list can be split as required, print \\"YES\\" on the first line and the two sublists on the next two lines. If there are multiple possible solutions, you may print any of them. Each sublist should be printed on a new line, and their elements should be space-separated. If the list cannot be split as required, print \\"NO\\". Examples Input 6 3 1 4 2 2 2 Output YES 3 1 4 2 2 2 Input 4 1 2 3 5 Output NO Note In the first sample, the two sublists [3, 1, 4] and [2, 2, 2] both have the sum 8. In the second sample, there is no way to split the list into two sublists with equal sum.","solution":"def can_split_list(numbers): Determines if a list of integers can be split into two non-empty sublists with equal sum. Returns a tuple (\\"YES\\", sublist1, sublist2) if possible, otherwise returns (\\"NO\\",). total_sum = sum(numbers) # If the total sum is odd, it\'s impossible to split into two equal parts if total_sum % 2 != 0: return (\\"NO\\",) target = total_sum // 2 n = len(numbers) dp = [False] * (target + 1) dp[0] = True for num in numbers: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] if not dp[target]: return (\\"NO\\",) # Now find the sublists sublist1 = [] sublist2 = [] current_target = target for num in reversed(numbers): if current_target >= num and dp[current_target - num]: sublist1.append(num) current_target -= num else: sublist2.append(num) return (\\"YES\\", sublist1, sublist2) # Example usage: # numbers = [3, 1, 4, 2, 2, 2] # result = can_split_list(numbers) # print(result)"},{"question":"Given an array of integers `arr` and an integer `k`, determine if it\'s possible to partition the array into `k` non-empty subsets with equal sums. Constraints * 1 ≤ `arr.length` ≤ 16 * -10^4 ≤ `arr[i]` ≤ 10^4 * 1 ≤ `k` ≤ `arr.length` Input Input is given from Standard Input in the following format: ``` arr k ``` Output Print \\"yes\\" if it\'s possible to partition the array into `k` subsets with equal sums, otherwise print \\"no\\". Examples Input ``` [4, 3, 2, 3, 5, 2, 1] 4 ``` Output ``` yes ``` Input ``` [1, 2, 3, 4] 3 ``` Output ``` no ```","solution":"def can_partition_k_subsets(arr, k): total_sum = sum(arr) if total_sum % k != 0: return \\"no\\" target = total_sum // k used = [False] * len(arr) def backtrack(k_rem, current_sum, start_index): if k_rem == 1: return True if current_sum == target: return backtrack(k_rem - 1, 0, 0) for i in range(start_index, len(arr)): if not used[i] and current_sum + arr[i] <= target: used[i] = True if backtrack(k_rem, current_sum + arr[i], i + 1): return True used[i] = False return False return \\"yes\\" if backtrack(k, 0, 0) else \\"no\\" # Example input arr = [4, 3, 2, 3, 5, 2, 1] k = 4 print(can_partition_k_subsets(arr, k)) arr = [1, 2, 3, 4] k = 3 print(can_partition_k_subsets(arr, k))"},{"question":"You are given a list of m distinct integers chosen from the range 1 to n (inclusive). Your task is to determine if it is possible to choose a subset of these integers such that the difference between the maximum and minimum values in this subset is exactly k. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Input The first line contains three integers n (1 ≤ n ≤ 1000), m (1 ≤ m ≤ min(n, 1000)), and k (1 ≤ k ≤ n). The second line contains m distinct integers, each between 1 and n (inclusive). Output Print \\"YES\\" if there exists a subset such that the difference between the maximum and minimum values in this subset is exactly k. Otherwise, print \\"NO\\". Examples Input 10 5 4 1 2 3 4 5 Output YES Input 10 5 6 1 2 3 4 5 Output NO Note In the first example, you can choose the subset {1, 5}, where the difference between 5 and 1 is exactly 4. Thus the output is \\"YES\\". In the second example, there is no subset where the difference between the maximum and minimum values is 6, so the output is \\"NO\\".","solution":"def is_possible_subset(n, m, k, arr): Determines if there exists a subset of the given list \'arr\' such that the difference between the maximum and minimum value in this subset is exactly \'k\'. arr_set = set(arr) for num in arr: if (num + k) in arr_set: return \\"YES\\" return \\"NO\\""},{"question":"You are tasked with organizing a charity run event, where participants will be running various predefined distances. Each distance category has a finite number of slots, and participants can register for only one category. After aggregating all the participants\' registrations, you need to determine which participants get to run in their desired categories based on a first-come, first-served basis. The event has the following distance categories, each with a maximum number of allowed participants: - 5 km: 2 participants - 10 km: 3 participants - 21 km: 5 participants - 42 km: 3 participants Create a program that processes a list of participants\' registration requests and outputs the participants who have successfully registered for their desired distances until each distance\'s capacity is reached. Input Multiple datasets are provided as input. Each dataset follows this format: m (number of participants: integer) P1 D1 (participant ID of first participant, desired running distance: 2 integers separated by a space) P2 D2 (participant ID of second participant, desired running distance: 2 integers separated by a space) .. .. Pm Dm (participant ID of m-th participant, desired running distance: 2 integers separated by a space) m is 100 or less, and P1 to Pm are unique IDs. D1 to Dm can be one of the preset distances (5, 10, 21, 42). When m is 0, it indicates the end of the input. Output For each dataset, output the IDs of the successfully registered participants in the order they were processed. Print one ID per line. Example Input 5 101 5 102 10 103 5 104 21 105 42 4 201 42 202 21 203 21 204 21 1 301 10 0 Output 101 102 104 105 201 202 203 204 301","solution":"def register_participants(data): Registers participants based on their desired distance and available slots. Args: data (list of tuples): Each tuple contains the number of participants followed by participant ID and desired distance. Returns: list: List of successfully registered participant IDs for each dataset. DISTANCE_LIMITS = { 5: 2, 10: 3, 21: 5, 42: 3 } results = [] current_limits = {k: 0 for k in DISTANCE_LIMITS} for dataset in data: if dataset == 0: break current_limits = {k: 0 for k in DISTANCE_LIMITS} for i in range(1, len(dataset)): participant_id, distance = dataset[i] if current_limits[distance] < DISTANCE_LIMITS[distance]: results.append(participant_id) current_limits[distance] += 1 return results"},{"question":"Write a script that reads mathematical expressions from a file and evaluates each expression. The file contains one expression per line and you need to print the results of these expressions in the order they appear in the file. An expression can be an arithmetic operation involving addition, subtraction, multiplication, division, parentheses, and non-negative integers. Input The input will be read from a file named `expressions.txt`. Each line of this file will contain one valid mathematical expression. Example content of `expressions.txt`: ``` 3 + 5 * 2 (4 + 8) / 3 15 * (3 - 1) 7 + 4 * 3 / (1 + 2) ``` Output For each expression in the file, print the result in the order the expressions appear in the file. Each result should be printed on a new line. Example output for the provided sample file content: ``` 13 4 30 11 ``` Note - The expressions are guaranteed to be syntactically correct. - Implement the script in a language of your choice that supports file I/O operations.","solution":"def evaluate_expressions(file_path): results = [] with open(file_path, \'r\') as file: for line in file: expression = line.strip() if expression: try: result = eval(expression) results.append(result) except Exception as e: results.append(f\\"Error evaluating expression: {expression}, {e}\\") return results"},{"question":"Given a sequence of n integers, your task is to find the length of the longest subsequence such that the difference between consecutive elements is either 1 or -1. Input The first line contains an integer t (1 ≤ t ≤ 10^3) — the number of test cases in the input. Then t test cases follow. Each test case begins with an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The next line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the elements of the sequence. Output For each test case, print a single integer — the length of the longest subsequence such that the difference between consecutive elements is either 1 or -1. Example Input 2 5 1 2 3 4 5 7 4 3 2 3 4 5 6 Output 5 7","solution":"def longest_subsequence_length(t, test_cases): results = [] for i in range(t): n, sequence = test_cases[i] if n == 1: results.append(1) continue max_length = 1 current_length = 1 for j in range(1, n): if abs(sequence[j] - sequence[j-1]) == 1: current_length += 1 else: current_length = 1 max_length = max(max_length, current_length) results.append(max_length) return results"},{"question":"Peter has started receiving messages with various numerical codes from his friends. Each message contains a number, and Peter enjoys identifying and summing up the numeric digits in the codes. Sometimes, Peter\'s friends include a \'?\' instead of a digit. Your task is to help Peter find the range of possible sums of the digits for each given message considering that the \'?\' can be replaced by any digit from 0 to 9. Write a program that takes several messages and determines the minimum and maximum possible sums of the digits for each message. # Input - The first line contains a single integer `t` (1 ≤ t ≤ 1000) — the number of messages. - Each of the next `t` lines contains a string representing a numerical code, which may contain digits (\'0\'-\'9\') and/or \'?\' characters. The length of each string is between 1 and 1000, inclusive. # Output For each message, print two integers separated by a space: the minimum sum and the maximum sum of the digits, considering the possible replacements of \'?\'. # Examples Input ``` 3 123 1?2 ?99? ``` Output ``` 6 6 3 12 18 36 ``` # Explanation 1. For the first message, \\"123\\", there\'s no \'?\', so the sum is fixed at 6. 2. For the second message, \\"1?2\\", \'?\' can be replaced by any digit from 0 to 9. The minimum possible sum is 1+0+2 = 3, and the maximum possible sum is 1+9+2 = 12. 3. For the third message, \\"?99?\\", the minimum possible sum is 0+9+9+0 = 18, and the maximum possible sum is 9+9+9+9 = 36.","solution":"def calculate_min_max_sums(t, messages): result = [] for message in messages: min_sum = sum(int(ch) for ch in message if ch.isdigit()) max_sum = sum(int(ch) for ch in message if ch.isdigit()) + 9 * message.count(\'?\') result.append((min_sum, max_sum)) return result"},{"question":"You are given a sequence of integers. Your task is to find the length of the longest subsequence that satisfies two conditions: 1. The sequence is strictly increasing. 2. The last element in the sequence is the smallest possible. A subsequence of a sequence is obtained by deleting some (possibly zero) elements without changing the order of the remaining elements. Constraints * 1 leq n leq 2000 * 1 leq a_i leq 10^9 Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Output Print the length of the longest subsequence that is strictly increasing. Examples Input 6 5 3 4 8 6 7 Output 4 Input 5 1 2 3 4 5 Output 5 Input 5 5 4 3 2 1 Output 1","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest strictly increasing subsequence. from bisect import bisect_left if not arr: return 0 n = len(arr) subseq = [] for x in arr: pos = bisect_left(subseq, x) if pos == len(subseq): subseq.append(x) else: subseq[pos] = x return len(subseq)"},{"question":"A contiguous subarray of an integer array is a sequence of consecutive elements, and its sum is the sum of these elements. We can find the sum of the largest contiguous subarray by scanning the array. Write a function `max_subarray_sum` to find the contiguous subarray within a one-dimensional array of integers, `nums`, which has the largest sum. Note that the contiguous subarray must contain at least one number. # Input: * The function takes a single input: * list `nums`: a list of integers (1 ≤ len(nums) ≤ 10^5, -10^4 ≤ nums[i] ≤ 10^4) # Output: * The function should return a single integer, the sum of the largest contiguous subarray. # Example: ```python max_subarray_sum([1, -3, 2, 1, -1]) ``` Output: ``` 3 ``` Explanation: The contiguous subarray [2, 1] has the largest sum, which is 3. ```python max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]) ``` Output: ``` 6 ``` Explanation: The contiguous subarray [4,-1,2,1] has the largest sum, which is 6.","solution":"def max_subarray_sum(nums): Returns the sum of the largest contiguous subarray. Args: nums (list): List of integers. Returns: int: Sum of the largest contiguous subarray. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"A small tech company wants to create a function for a new internal tool. The function should identify the first number in the Fibonacci sequence that is greater than a given input integer. The Fibonacci sequence is a series where the next number is found by adding up the two numbers before it. The first two numbers of the series are 0 and 1. Your task is to determine the first number in this sequence that is greater than the provided input. Input: 60 Note: You do not need to create a program for this problem; you have to write your answers for a small input and a large input in the given code snippet. To see how to submit a solution, please check this link SAMPLE INPUT 50 SAMPLE OUTPUT 55","solution":"def first_fibonacci_greater_than(n): Returns the first Fibonacci number greater than the given input n. if n < 0: return None a, b = 0, 1 while b <= n: a, b = b, a + b return b"},{"question":"You are given an integer T representing the number of test cases. For each test case, you are given an integer K and a string S of length N which consists of lowercase English letters. You need to rearrange the string such that there are at most K distinct characters in the resulting string. If it is not possible to create such a rearrangement, return \\"-1\\". Otherwise, return the rearranged string with at most K distinct characters. Constraints * 1 leq T leq 100 * 1 leq N leq 1000 * 1 leq K leq 26 Input The input is given from Standard Input in the following format: T K S Output For each test case, print the rearranged string with at most K distinct characters if possible, otherwise print \\"-1\\". Examples Input 2 4 aabbcc 2 abcdef Output aabbcc -1","solution":"def rearrange_string(T, test_cases): Returns a list of rearranged strings with at most K distinct characters for each test case. Parameters: T (int): The number of test cases. test_cases (list): A list of tuples where each tuple contains (K, S). Returns: list: A list of results for each test case as per the problem\'s requirements. def rearrange_case(K, S): distinct_characters = set(S) # If number of unique characters is already within the limit if len(distinct_characters) <= K: return S else: # If the number of unique characters is greater than K we cannot rearrange it successfully return \\"-1\\" results = [] for K, S in test_cases: result = rearrange_case(K, S) results.append(result) return results"},{"question":"You are given a list of integers, where the integers represent the height of buildings denoted as `buildings[i]` at the i-th position. The goal is to determine the maximum area of a rectangle that can be formed by any contiguous set of these buildings, where the width of the rectangle is the number of buildings and the height is the minimum height among the selected buildings. Constraints * The length of the list will be between 1 and 10^5. * Each building height will be a non-negative integer and will be at most 10^6. Input The input is given from Standard Input in the following format: ``` n buildings[0] buildings[1] ... buildings[n-1] ``` Output Print an integer representing the maximum area of a rectangle that can be formed by any contiguous set of buildings. Examples Input ``` 6 2 1 5 6 2 3 ``` Output ``` 10 ``` Input ``` 5 4 4 4 4 4 ``` Output ``` 20 ``` Input ``` 3 3 2 2 ``` Output ``` 6 ```","solution":"def largest_rectangle_area(buildings): Find the maximum area of a rectangle that can be formed by any contiguous set of buildings. stack = [] max_area = 0 index = 0 while index < len(buildings): if not stack or buildings[stack[-1]] <= buildings[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (buildings[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (buildings[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) buildings = list(map(int, data[1:])) print(largest_rectangle_area(buildings))"},{"question":"A large software system is developed by combining multiple smaller modules, each having its own unique responsibilities and role in the larger ecosystem. During extensive testing, it has been observed that certain pairs of modules interact more frequently, whereas others rarely communicate with each other. This knowledge can be leveraged to optimize the overall system performance by bringing frequently interacting modules closer to each other, thus reducing communication delays. A development team needs to analyze the interaction data and determine the pairs of modules which interact most frequently. In this problem, you are provided with interaction logs between different module pairs in the form of strings. Each interaction log consists of three integers representing the interacting modules and the number of interactions between them. Your task is to write a program that reads the interaction logs and outputs the pair of modules with the highest interaction count. In the case of multiple pairs with the same highest interaction count, output any one of them. Input The input consists of several test cases, each representing interaction logs for a system, in the following format: n log1 log2 ... logn The first line of the input consists of a single non-negative integer n which represents the number of interaction logs. If n is zero, it implies the end of the input. Each logi is in the following format: module1 module2 count where module1 and module2 are distinct integers representing the interacting modules, and count is an integer representing the number of interactions between the modules. The count is positive, and all integers (module1, module2, and count) are separated by a single space. The modules are positive integers and the maximum number of interactions \'n\' is less than or equal to 1024. Output For each test case, print the pair of modules (module1 and module2) with the highest interaction count. If there are multiple pairs with the same highest interaction count, output any one of them. Example Input 3 1 2 10 2 3 5 1 3 15 2 4 5 7 5 6 12 0 Output 1 3 5 6","solution":"def find_most_frequent_pair(logs): Find the pair of modules with the highest interaction count. Parameters: logs (list of tuples): Each tuple contains three integers representing two modules and their interaction count. Returns: tuple: A pair of modules (module1, module2) with the highest interaction count. max_interaction = 0 result_pair = None for log in logs: module1, module2, count = log if count > max_interaction: max_interaction = count result_pair = (module1, module2) return result_pair def process_interaction_logs(logs): Process a list of interaction logs and find the most frequent interaction pair for each test case. Parameters: logs (list of str): List of strings representing the input logs for multiple test cases. Returns: list of tuples: List of result pairs for each test case. index = 0 results = [] while index < len(logs): n = int(logs[index]) if n == 0: break interaction_logs = [] for i in range(index + 1, index + 1 + n): interaction_logs.append(tuple(map(int, logs[i].split()))) result = find_most_frequent_pair(interaction_logs) results.append(result) index += n + 1 return results logs = [ \\"3\\", \\"1 2 10\\", \\"2 3 5\\", \\"1 3 15\\", \\"2\\", \\"4 5 7\\", \\"5 6 12\\", \\"0\\" ] results = process_interaction_logs(logs) for result in results: print(result[0], result[1])"},{"question":"You are given a list of integers representing the stock prices of a company for the last N days. Your task is to maximize the profit by choosing a single day to buy one stock and different day in the future to sell that stock. If buying a stock on some day and selling it at a later date doesn\'t yield any profit, output 0. Input: - An integer N (number of days) - A list of N integers representing stock prices Output: - The maximum possible profit that can be achieved Constraints: 1 ≤ N ≤ 10^5 1 ≤ stock prices ≤ 10^4 Example Input: 7 7 1 5 3 6 4 Example Output: 5 Explanation: The best strategy is to buy on day 2 (price = 1) and sell on day 5 (price = 6), yielding a profit of 6-1 = 5.","solution":"def max_profit(stock_prices): Returns the maximum profit that can be achieved by buying and selling the stock on different days. If no profit can be made, returns 0. :param stock_prices: List[int], list of stock prices :return: Integer, maximum profit if not stock_prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in stock_prices: if price < min_price: min_price = price current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"Trong loves to categorize his book collection. He has N books, and each book belongs to one of M categories. Additionally, there are some books that belong to multiple categories. To organize his bookshelf, he wants to create a list of categories that each have at least K books. Given the categories that each book belongs to, find out which categories have at least K books. Constraints * All values in input are integers. * 1 leq N, M leq 50 * 1 leq K leq N * 1 leq C_{ij} leq M * Each book is assigned to at least one category. Input is given from Standard Input in the following format: N M K B_1 C_{11} C_{12} ... C_{1B_1} B_2 C_{21} C_{22} ... C_{2B_2} : B_N C_{N1} C_{N2} ... C_{NB_N} Output Print the categories that have at least K books. Each category should be printed on a new line in ascending order. If no category satisfies the condition, print \\"None\\". Examples Input 3 4 2 2 1 3 1 3 2 2 3 Output 3 Input 5 3 3 2 1 2 2 1 3 1 2 1 1 2 2 3 Output 1 2 Input 4 2 3 2 1 2 1 1 1 2 2 1 2 Output 1 2 Input 4 5 2 2 1 3 1 3 2 2 3 1 4 Output 3","solution":"def categorize_books(n, m, k, books): from collections import defaultdict category_count = defaultdict(int) for book in books: categories = book[1:] for category in categories: category_count[category] += 1 result = [category for category, count in category_count.items() if count >= k] if result: return sorted(result) else: return [\\"None\\"]"},{"question":"A security agency has set up a new policy for generating secure passcodes. The policy is to avoid using certain digits in any particular order within the passcode. Specifically, a passcode should not contain the sequence \\"123\\" or \\"321\\" anywhere within it. Given this restriction, write a program that will take an input passcode and determine if it is compliant with the new security policy. If the passcode is compliant, the program should output \\"Valid Passcode\\". Otherwise, it should output \\"Invalid Passcode\\". Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line containing the word \\"END\\". For each dataset, an alphanumeric string representing the passcode is given on one line. The length of each passcode does not exceed 100 characters. The number of datasets does not exceed 10000. Output For each dataset, output \\"Valid Passcode\\" if the passcode complies with the new policy and \\"Invalid Passcode\\" if it does not. Example Input secure123code pass321word mysecurepasscode codesecure END Output Invalid Passcode Invalid Passcode Valid Passcode Valid Passcode","solution":"def is_passcode_valid(passcode): Determines if the given passcode is compliant with the security policy. A compliant passcode does not contain the sequence \\"123\\" or \\"321\\". Parameters: passcode (str): The passcode to check. Returns: str: \\"Valid Passcode\\" if compliant, otherwise \\"Invalid Passcode\\". if \\"123\\" in passcode or \\"321\\" in passcode: return \\"Invalid Passcode\\" return \\"Valid Passcode\\" def check_passcodes(passcodes): Takes a list of passcodes and returns a list of results. Each result is either \\"Valid Passcode\\" or \\"Invalid Passcode\\" based on whether the corresponding passcode complies with the security policy. Parameters: passcodes (list): List of passcodes to check. Returns: list: List of strings with each string being \\"Valid Passcode\\" or \\"Invalid Passcode\\". results = [] for passcode in passcodes: if passcode == \\"END\\": break results.append(is_passcode_valid(passcode)) return results"},{"question":"You have been given a string representing a code snippet which might contain nested code blocks denoted by curly braces `{}`. Write a function that calculates the maximum depth of the nested code blocks. Input The input consists of a single line string `s` (1 ≤ length of s ≤ 10^6) containing any characters. Output Output a single integer denoting the maximum depth of the nested code blocks. Example Input ``` { int x = 5; { int y = 10; { int z = x + y; } } } ``` Output 3 Note In the provided example, the maximum depth of nested code blocks is 3 due to three nested curly braces `{}`, ` {}`, and ` {}`.","solution":"def max_depth_of_code_blocks(s): Returns the maximum depth of nested code blocks denoted by curly braces. Args: s (str): A string representing the code snippet. Returns: int: The maximum depth of nested code blocks. max_depth = 0 current_depth = 0 for char in s: if char == \'{\': current_depth += 1 if current_depth > max_depth: max_depth = current_depth elif char == \'}\': current_depth -= 1 return max_depth"},{"question":"A --Shipping Containers Optimization Problem Statement You are managing the storage and transportation of shipping containers at a large port. The port has an endless capacity but you need to optimize the loading of containers onto the ships. Each ship has a maximum weight it can carry, and each container has a given weight. The goal is to maximize the total weight of the containers loaded onto a ship without exceeding its weight capacity. Each container can only be loaded onto one ship. You are provided with the number of ships, their respective weight capacities, and the list of weights of all available containers. Write an algorithm that will output the maximum total weight that can be loaded onto each ship, ensuring no ship exceeds its weight capacity. Input The input is given in the following format: m c_1 c_2 ... c_m n w_1 w_2 ... w_n In the input: - m represents the number of ships. - c_i represents the weight capacity of the i-th ship, for i in the range 1 leq i leq m. - n represents the number of containers. - w_j represents the weight of the j-th container, for j in the range 1 leq j leq n. Output The output should be in the following format: m lines, where the i-th line contains the maximum total weight that can be loaded onto the i-th ship without exceeding its weight capacity. Constraints - 1 leq m, n leq 50 - 1 leq c_i, w_j leq 10^4 Sample Input 1 3 100 150 200 5 50 50 50 50 50 Sample Output 1 100 150 200 Sample Input 2 2 30 50 4 10 40 20 30 Sample Output 2 30 50 Explanation for Sample Input 1: - Ship 1 can carry containers with weights [50,50] for a total of 100. - Ship 2 can carry containers with weights [50,50,50] for a total of 150. - Ship 3 can carry containers with weights [50,50,50] for a total of 200. Explanation for Sample Input 2: - Ship 1 can carry containers with weights [10,20] for a total of 30. - Ship 2 can carry containers with weights [40] for a total of 50.","solution":"def knapsack(capacity, weights): Solves the 0/1 knapsack problem for given capacity and weights. n = len(weights) dp = [0] * (capacity + 1) for weight in weights: for c in range(capacity, weight - 1, -1): dp[c] = max(dp[c], dp[c - weight] + weight) return dp[-1] def maximize_loaded_weight(m, capacities, n, container_weights): For each ship, determines the maximum total weight of containers that can be loaded onto the ship without exceeding its weight capacity. result = [] for capacity in capacities: max_weight = knapsack(capacity, container_weights) result.append(max_weight) return result"},{"question":"In a coding competition, there are N participants lined up. Each participant can solve a specific range of problems defined by a start and end problem number (both inclusive). For Participant i, this range is represented as [S_i, E_i]. A problem is considered \\"covered\\" if at least one participant can solve it. Ringo wants to know how many unique problems are covered by at least one participant. Constraints * 1 leq N leq 5000 * 1 leq S_i leq E_i leq 10^9 Input Input is given from Standard Input in the following format: N S_1 E_1 S_2 E_2 : S_N E_N Output Print the number of unique problems covered by at least one participant. Example Input 3 1 4 3 6 5 8 Output 8 Input 2 2 5 7 10 Output 8 Input 4 1 2 2 3 3 4 4 5 Output 5","solution":"def count_unique_problems(N, ranges): problems_covered = set() for r in ranges: S, E = r problems_covered.update(range(S, E + 1)) return len(problems_covered) # Example of usage: # N = 3 # ranges = [(1, 4), (3, 6), (5, 8)] # print(count_unique_problems(N, ranges)) # Output should be 8"},{"question":"In a Great Hall, there are n tables arranged in a row, each with a different number of seats ranging from 1 to n. A group of m knights is to be seated such that each table has at least one knight and no two tables have the same number of knights. The head knight, Merlin, has issued a challenge: each table must have a specific number of knights, described by an array a, where a_i denotes the number of knights for the i-th table (1 ≤ i ≤ n). Given the integers n and m, and the array a, determine the distinct ways to arrange the knights such that Merlin\'s challenge is met. Return the total number of such distinct arrangements modulo (10^9 + 7). Input: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10^5) — the number of tables and the total number of knights. - The second line contains n integers, the array a (1 ≤ a_i ≤ m) — where a_i is the required number of knights at table i. Output: - Output one integer: the number of distinct ways to arrange the knights modulo (10^9 + 7). Examples: Input: 4 10 2 3 1 4 Output: 60 Input: 3 6 1 2 3 Output: 6 Input: 5 15 1 3 5 2 4 Output: 240 Note: For the first example, there are several valid knight arrangements such as [2, 3, 1, 4], [3, 2, 1, 4], etc. The total number of valid permutations is 60.","solution":"def count_knight_arrangements(n, m, a): Returns the number of distinct ways to arrange knights as per the given requirements modulo 10^9 + 7. MOD = 10**9 + 7 from math import factorial # Calculate the factorial of n (number of tables, also the maximum value in a array) fact_n = factorial(n) % MOD # To check if the given a is a valid permutation of numbers from 1 to n if sorted(a) == list(range(1, n + 1)): return fact_n return 0"},{"question":"Implement a program that helps in managing stock prices of different companies. You are provided with a list of stock prices for different companies for a series of days. Your task is to process the list of stock prices and generate the following information: 1. For each company, determine the maximum stock price observed during the given period. 2. Determine the total number of days when the stock price of each company was exactly equal to its maximum price. Input The input consists of multiple lines: - The first line contains the number of companies N (1 ≤ N ≤ 100). - The following N lines each contain a sequence of integers separated by spaces, representing the stock prices of the company over a series of days. Each company\'s stock prices are given in a separate line. - Each sequence of stock prices contains at least one price and no more than 1000 prices, where each price is an integer between 1 and 10000. Output For each company, on a new line, print two integers separated by a space: - The maximum stock price for that company during the given period. - The number of days the stock price was exactly equal to the maximum price. Examples Input 3 10 15 10 20 20 5 5 5 8 10 8 10 8 10 Output 20 2 5 3 10 3","solution":"def analyze_stock_prices(n, prices): result = [] for price_list in prices: max_price = max(price_list) max_price_count = price_list.count(max_price) result.append((max_price, max_price_count)) return result # Example usage # This would ideally be replaced by input reading in a real-world scenario n = 3 prices = [ [10, 15, 10, 20, 20], [5, 5, 5], [8, 10, 8, 10, 8, 10] ] print(analyze_stock_prices(n, prices))"},{"question":"Polycarp has written a new program to organize a coding competition. The competition consists of several coding problems, each with a certain level of difficulty. Participants can solve these problems to gain points. Polycarp wants to figure out if the problems are well balanced in terms of difficulty. Each problem has a specific difficulty rating, and each participant has a skill level. To balance the competition, Polycarp wants each participant to solve problems that match their skill level as closely as possible. A participant can attempt to solve a problem if their skill level is greater than or equal to the problem’s difficulty rating. However, to ensure that participants are sufficiently challenged, Polycarp wants to maximize the total number of problems they can attempt, without letting any participant solve all the problems. Can you help Polycarp determine how many problems each participant can attempt? Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100) — the number of participants and the number of problems, respectively. The second line contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 100), where s_i denotes the skill level of the i-th participant. The third line contains m integers d_1, d_2, ..., d_m (1 ≤ d_i ≤ 100), where d_i denotes the difficulty rating of the i-th problem. Output For each participant, print the maximum number of problems they can attempt, ensuring that no participant solves all the problems. Examples Input 3 4 70 50 90 30 45 60 80 Output 3 2 4 Input 2 5 25 55 10 20 30 40 50 Output 2 5 Input 4 3 15 35 75 40 10 30 80 Output 1 2 2 2 Note In the first example, the participants have skill levels 70, 50, and 90. The problems have difficulties 30, 45, 60, and 80. The maximum number of problems each participant can attempt are 3, 2, and 4, respectively. In the second example, the first participant can solve problems with difficulties 10 and 20, while the second participant can solve all 5 problems. In the third example, the maximum number of problems each participant can solve are 1, 2, 2, and 2, respectively.","solution":"def max_problems_attemptable(n, m, participants, problems): Returns a list of maximum number of problems each participant can attempt. result = [] problems.sort() for skill in participants: count = 0 for difficulty in problems: if skill >= difficulty: count += 1 result.append(count) return result # Example use case if __name__ == \\"__main__\\": n = 3 m = 4 participants = [70, 50, 90] problems = [30, 45, 60, 80] print(max_problems_attemptable(n, m, participants, problems)) # Expected: [3, 2, 4]"},{"question":"Jane is organizing a team-building event for her company. As part of the event, she has planned a puzzle task where participants need to find a hidden message in a given string. The message is defined by a set of non-overlapping substrings \\"apple\\". Given a string, the participants are required to count how many times the substring \\"apple\\" appears in it. Jane wants to automate the scoring process by writing a program that takes a number of test cases, and for each test case a string, and outputs the number of non-overlapping occurrences of the substring \\"apple\\". INPUT: The first line of input contains the number of test cases t. Then t lines follow, each containing a single string of lowercase letters. OUTPUT: Output contains t lines; each line contains the answer for that test case. CONSTRAINTS: 1 ≤ t ≤ 100 1 ≤ length of each string ≤ 10^6 SAMPLE INPUT: 2 applepieapple appleappleapple SAMPLE OUTPUT: 2 3 Explanation: For test case 1: The first occurrence of \\"apple\\" starts at index 0 and the second occurrence starts at index 8. For test case 2: The first occurrence of \\"apple\\" starts at index 0, the second occurrence starts at index 5, and the third occurrence starts at index 10.","solution":"def count_apple_occurances(t, strings): Returns a list of the number of non-overlapping occurrences of \\"apple\\" in each string for a given number of test cases. Parameters: t (int): Number of test cases strings (list of str): List of input strings to be analyzed Returns: list of int: List of counts of \\"apple\\" in each string substring = \\"apple\\" result = [] for string in strings: count = 0 index = 0 while index <= len(string) - len(substring): index = string.find(substring, index) if index == -1: break count += 1 index += len(substring) result.append(count) return result"},{"question":"Anika is organizing a multi-city charity marathon, and she wants to ensure that the route between any two cities is as direct as possible, given a list of potential direct routes. Given a list of cities and the direct routes connecting them, help Anika determine the shortest path between any two cities, if it exists. Input The first line contains an integer N, the number of cities. The second line contains an integer M, the number of direct routes. Each of the next M lines contains three space-separated integers u, v, and w, indicating a direct route between cities u and v with distance w. The final line contains two integers s and t, the starting city and the target city for which Anika wants to find the shortest route. Output If there is a path from city s to city t, print the shortest distance. If there is no such path, print -1. Constraints 1 ≤ N ≤ 1000 1 ≤ M ≤ 100000 1 ≤ u, v ≤ N 1 ≤ w ≤ 1000 SAMPLE INPUT 4 5 1 2 4 1 3 2 2 3 3 2 4 1 3 4 5 1 4 SAMPLE OUTPUT 5 Explanation In this example, the shortest path from city 1 to city 4 could either be 1 -> 3 -> 4 with distance 2 + 5 = 7, or 1 -> 2 -> 4 with distance 4 + 1 = 5. The shortest distance is 5.","solution":"import heapq def shortest_path(N, M, routes, s, t): Determines the shortest path between city s and city t. Args: N: int, number of cities. M: int, number of direct routes. routes: list of tuples, each with three integers (u, v, w) indicating a direct route between u and v with distance w. s: int, the starting city. t: int, the target city. Returns: int: the shortest distance from city s to city t, or -1 if no such path exists. # Build the adjacency list for the graph graph = [[] for _ in range(N + 1)] for u, v, w in routes: graph[u].append((v, w)) graph[v].append((u, w)) # Assuming undirected graph # Dijkstra\'s algorithm distances = [float(\'inf\')] * (N + 1) distances[s] = 0 priority_queue = [(0, s)] while priority_queue: current_distance, current_city = heapq.heappop(priority_queue) if current_distance > distances[current_city]: continue for neighbor, weight in graph[current_city]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[t] if distances[t] != float(\'inf\') else -1 # Example usage: # N = 4 # M = 5 # routes = [(1, 2, 4), (1, 3, 2), (2, 3, 3), (2, 4, 1), (3, 4, 5)] # s = 1 # t = 4 # print(shortest_path(N, M, routes, s, t)) # Output: 5"},{"question":"An antique book collector has a collection of rare books displayed in his bookshelf. Each book has a specific monetary value assigned to it. Over the years, some books might have gotten misplaced in the shelf and are not sorted in any particular order with respect to their value. The collector now wants to determine the maximum possible value difference between any two books that are displayed sequentially in the bookshelf. Design a function to assist the book collector in finding this maximum difference. You are given an array where each element represents the value of a particular book in the order they are displayed on the shelf. Your task is to determine the maximum absolute difference in value between any two adjacent books. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of books in the collection. The second line contains n integers, where each integer value[i] (0 ≤ value[i] ≤ 10^6) indicates the monetary value of the i-th book in the sequence they appear. Output Print a single integer — the maximum absolute difference in value between any two adjacent books in the collection. Example Input 5 1 3 7 8 2 Output 6 Input 4 10 5 20 10 Output 15","solution":"def max_adjacent_difference(n, values): Returns the maximum absolute difference in value between any two adjacent books. :param n: Number of books :param values: List of book values :return: Maximum absolute difference between any two adjacent books\' values max_diff = 0 for i in range(n - 1): diff = abs(values[i] - values[i + 1]) if diff > max_diff: max_diff = diff return max_diff"},{"question":"Tom and Jerry are playing a number game with m rows of numbers. Each row contains an even number of integers. It is guaranteed that the total number of integers across all rows is also an even number. Tom and Jerry take turns alternately, with Tom going first. On a player\'s turn, they must select one row and remove exactly half of the integers in that row. The first player to be unable to make a move loses the game (when there are no rows left with an even number of integers). Given the starting configuration, determine who will win the game. Input The first line contains one integer m (1 ≤ m ≤ 25) — the number of rows. Each of the next m lines contains an even number of integers, a_i (2 ≤ a_i ≤ 20), representing the numbers in the i-th row. Output Print a single string \\"Tom\\" if Tom wins; otherwise, print \\"Jerry\\" (without double quotes). Examples Input 3 2 4 3 6 1 7 8 5 Output Tom Input 2 2 5 6 4 7 3 8 2 Output Jerry Note In the first example, Tom can select the second row and remove 2 and 6, and 1 and 7 on his turn, making further moves unfavorable for Jerry and ensuring a win for Tom. In the second example, regardless of Tom\'s first move, Jerry can always respond with a move that balances the game, leading Jerry to win.","solution":"def game_winner(rows): m = len(rows) # Since m is guaranteed to be the number of rows (with even total numbers and even count per row) # Tom, being first, if m is odd Tom wins, if m is even Jerry wins. return \\"Tom\\" if m % 2 == 1 else \\"Jerry\\" # Example usage rows = [ [2, 4], [3, 6, 1, 7], [8, 5] ] print(game_winner(rows)) # Output should be \\"Tom\\" rows = [ [2, 5, 6, 4], [7, 3, 8, 2] ] print(game_winner(rows)) # Output should be \\"Jerry\\""},{"question":"You have been given a 2D grid of size m × n representing a maze, where 0 represents an open path and 1 represents a wall. You are also given two points: a starting point and an ending point. Write a function to determine whether there is a path from the starting point to the ending point. You can only move up, down, left, or right. You cannot move through walls, and you cannot move outside the boundaries of the maze. Your function should return `true` if there is a path from the starting point to the ending point, and `false` otherwise. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. Each of the next m lines contains n integers, each either 0 or 1, representing the maze. The next line contains four integers sx, sy, ex, ey (0 ≤ sx, sy, ex, ey < m, n) — the coordinates of the starting and ending points, respectively. Output Output a single line containing \\"true\\" if there is a path from the starting point to the ending point, otherwise \\"false\\". Example Input 5 5 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 0 0 0 0 0 0 4 4 Output true","solution":"def is_path(maze, start, end): m, n = len(maze), len(maze[0]) sx, sy = start ex, ey = end if maze[sx][sy] == 1 or maze[ex][ey] == 1: return False def is_valid(x, y): return 0 <= x < m and 0 <= y < n and maze[x][y] == 0 visited = [[False for _ in range(n)] for _ in range(m)] def dfs(x, y): if not is_valid(x, y) or visited[x][y]: return False if (x, y) == (ex, ey): return True visited[x][y] = True # Explore all 4 directions return (dfs(x+1, y) or dfs(x-1, y) or dfs(x, y+1) or dfs(x, y-1)) return dfs(sx, sy)"},{"question":"Given an array of integers nums, you are tasked with finding the maximum product that can be obtained from a contiguous subarray. A contiguous subarray is defined as a subarray where all the elements are adjacent to each other in the original array. You should implement a function `maxProduct` that takes a list of integers as input and returns an integer representing the maximum product of a subarray within the list. Input The first line contains an integer T, representing the number of test cases. Each test case consists of two lines. The first line contains an integer, n, representing the number of elements in the array. The second line contains n space-separated integers that represent the elements of the array nums. Output For each test case, output a single integer, the maximum product of a contiguous subarray. Constraints: 1 <= T <= 50 1 <= n <= 200 -10 <= nums[i] <= 10, 1 <= i <= n SAMPLE INPUT 2 4 2 3 -2 4 3 -2 0 -1 SAMPLE OUTPUT 6 0 Explanation In the first test case, the maximum product subarray is [2, 3] which gives the product 6. In the second test case, the maximum product subarray is [0] which gives the product 0.","solution":"def maxProduct(nums): Returns the maximum product of a contiguous subarray within nums. if not nums: return 0 max_prod = min_prod = result = nums[0] for num in nums[1:]: if num == 0: max_prod = min_prod = 1 temp_max = max(num, max_prod * num, min_prod * num) min_prod = min(num, max_prod * num, min_prod * num) max_prod = temp_max result = max(result, max_prod) return result def process_input(T, test_cases): Processes multiple test cases for finding the maximum product of a contiguous subarray. results = [] for case in test_cases: n, nums = case results.append(maxProduct(nums)) return results"},{"question":"In a small town, there is a unique way to celebrate the New Year. The town has a tradition where people line up in a circle, and each person is given a number ranging from 1 to N. However, this year, they have decided to form pairs and exchange gifts. Each person can only pair with one other person, and every pair should exchange their gifts in one of the two possible ways: person A gives a gift to person B, and person B gives a gift back to person A. However, the challenge is that they do not want any two people who are adjacent in the original circle to be paired together. Pairing among closer people might lead to preference and bias, causing dissatisfaction among town members. Your task is to help them find all possible pairs such that no two people who are adjacent in the circle are paired together. If it is not possible, return -1. Input The first line contains one integer N (3 ≤ N ≤ 500) — the number of people in the circle. The next line contains N unique integers representing the numbers assigned to each person in the circle in a clockwise order. Output Output should contain N/2 pairs of integers, where each pair represents the people who will exchange gifts. Every person should appear in exactly one pair. If it is not possible, output -1. Examples Input 6 1 2 3 4 5 6 Output 1 4 2 5 3 6 Input 5 1 2 3 4 5 Output -1","solution":"def find_non_adjacent_pairs(N, people): Finds all valid pairs such that no two people who are adjacent in the circle are paired together. :param N: Number of people in the circle :param people: List of people\'s numbers in clockwise order :return: List of pairs if possible, otherwise -1 if N % 2 != 0: return -1 pairs = [] for i in range(N // 2): pairs.append((people[i], people[i + N // 2])) return pairs"},{"question":"Problem description You are an avid traveler and love to visit new places. You have recently come across a problem where you need to determine the optimal path between cities in a country. Each city is connected to other cities by direct roads with different travel times. Given the travel times between cities, your task is to find the minimum travel time required to get from a starting city to a destination city. However, you can use at most one stopover (intermediate city) to reach your destination. Input: - The first line contains an integer T, the number of test cases. Each test case consists of three parts: - The first part contains an integer N, the number of cities. - The second part contains an integer M, the number of direct roads between cities. - The next M lines, each containing three integers u, v, and t, represent a direct road from city u to city v with a travel time of t. The roads are bidirectional. - The last part contains two integers S and D, representing the starting city and the destination city. Constraints: - 1 ≤ T ≤ 50 - 2 ≤ N ≤ 100 - 1 ≤ M ≤ 400 - 1 ≤ u, v ≤ N - 1 ≤ t ≤ 1000 - 1 ≤ S, D ≤ N - Cities are numbered from 1 to N. - S ≠ D Output: For each test case, output a single integer on a new line: the minimum travel time from the start city to the destination city with at most one stopover. If it is not possible to travel from the start city to the destination city, output -1. Example: Input: 2 4 3 1 2 10 2 3 10 3 4 10 1 4 3 3 1 2 5 2 3 15 1 3 30 1 3 Output: 30 20 Explanation: In the first test case, the minimum travel time from city 1 to city 4 is achieved by going through the route 1 -> 2 -> 3 -> 4, with a total travel time of 30. In the second test case, the direct route from city 1 to city 3 takes 30 units of time. An alternative route going through city 2 (1 -> 2 -> 3) takes 20 units of time, which is less than the direct route.","solution":"import heapq def min_travel_time_with_stopover(T, test_cases): def dijkstra(graph, start, n): Performs Dijkstra\'s algorithm and returns the shortest distances from the start city to all other cities. distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances results = [] for case in test_cases: n, m, roads, s, d = case[\'N\'], case[\'M\'], case[\'roads\'], case[\'S\'], case[\'D\'] graph = {i: [] for i in range(1, n + 1)} for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) if s == d: results.append(0) continue distances_from_start = dijkstra(graph, s, n) distances_from_dest = dijkstra(graph, d, n) min_time = distances_from_start[d] for u, v, t in roads: through_uv = distances_from_start[u] + t + distances_from_dest[v] through_vu = distances_from_start[v] + t + distances_from_dest[u] min_time = min(min_time, through_uv, through_vu) results.append(min_time if min_time != float(\'inf\') else -1) return results"},{"question":"Given a string consisting of digits and lowercase English letters, your task is to determine the longest contiguous substring that contains at most one distinct character. Input The input consists of a single string s (1 ≤ |s| ≤ 10^5), where |s| is the length of the string. Output Output a single integer representing the length of the longest contiguous substring that contains at most one distinct character. Examples Input aaabbcaaaa Output 4 Input abcdef Output 1 Note In the first example, the substring with the longest length that contains at most one distinct character is \\"aaaa\\", which has a length of 4. In the second example, all characters are distinct, so the answer is 1 since the longest contiguous substring that contains at most one distinct character is any of the characters themselves.","solution":"def longest_contiguous_substring(s): Returns the length of the longest contiguous substring that contains at most one distinct character. max_len = 1 current_char = s[0] current_length = 1 for char in s[1:]: if char == current_char: current_length += 1 else: current_char = char current_length = 1 max_len = max(max_len, current_length) return max_len"},{"question":"A popular social network has users with unique user IDs represented by integers. Users can \\"follow\\" other users, creating a \\"follower-followee\\" relationship. The social network wants to implement a feature to find the \\"influencers\\" among the users. An influencer is defined as someone who is not following anyone but is followed by at least one other user. Given the number of users and a list of follower-followee pairs, your task is to write a program to identify all influencers. If no influencers are found, output \\"No influencers found\\". # Input - The first line of the input contains an integer `N` (1 ≤ N ≤ 1000), the number of users. - The next line contains an integer `M` (0 ≤ M ≤ 10000), the number of follower-followee pairs. - Each of the next `M` lines contains two integers `a` and `b` (1 ≤ a, b ≤ N, a ≠ b) indicating that user `a` follows user `b`. # Output - If there are no influencers, output a single line with the text \\"No influencers found\\". - Otherwise, output the user IDs of all the influencers in ascending order, each on a new line. # Example Input ``` 5 4 1 2 3 2 4 2 4 3 ``` Output ``` 2 ``` Input ``` 3 2 1 2 2 3 ``` Output ``` 3 ``` Input ``` 4 4 1 2 2 3 3 4 4 1 ``` Output ``` No influencers found ```","solution":"def find_influencers(N, M, follower_followee_pairs): following_counts = {i: 0 for i in range(1, N + 1)} followed_by_counts = {i: 0 for i in range(1, N + 1)} for a, b in follower_followee_pairs: following_counts[a] += 1 followed_by_counts[b] += 1 influencers = [user for user in range(1, N + 1) if following_counts[user] == 0 and followed_by_counts[user] > 0] if influencers: return sorted(influencers) else: return [\\"No influencers found\\"]"},{"question":"You are given a list of n integers representing the heights of buildings in a row. You need to find and return the number of buildings you can see from the left end of the row, assuming no buildings block the view of the shorter or same height buildings behind them. Input: - The first line contains a single integer T (1 ≤ T ≤ 10) — the number of test cases. - The first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of buildings. - The second line of each test case contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), representing the heights of the buildings. Output: - For each test case, output a single integer in a new line representing the number of buildings visible from the left end of the row. Example Input 3 5 1 2 3 2 5 4 4 3 2 1 6 1 2 2 3 1 4 Output 4 1 4 Note In the first test case, the visible buildings from left to right have heights: 1, 2, 3, and 5. In the second test case, only the first building is visible. In the third test case, the visible buildings from left to right have heights: 1, 2, 3, and 4.","solution":"def count_visible_buildings(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] heights = test_cases[i][1] max_height = 0 visible_count = 0 for height in heights: if height > max_height: visible_count += 1 max_height = height results.append(visible_count) return results"},{"question":"Alice is an avid gardener and she wants to plant flowers in her rectangular garden. The garden is represented as a grid of cells with dimensions n by m. She wants to plant the flowers such that no two flowers are in the same row or the same column. Moreover, she wishes to maximize the minimum distance between any two flowers planted. The distance between two flowers located at (i1, j1) and (i2, j2) in the grid is defined as |i1 - i2| + |j1 - j2|. Alice has one special power: she can block a few cells in the grid such that no flower can be planted in those cells. Given n, m, the number of cells that Alice can block, and the list of cells that she can block, help Alice determine the maximum possible minimum distance between any two flowers she plants. Input - The first line contains three integers n, m (2 ≤ n, m ≤ 1000) and k (0 ≤ k ≤ n * m), where n and m are the dimensions of the garden and k is the number of cells she can block. - The next k lines each contain two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) representing the cells that can be blocked. Output Output a single integer: the maximum possible minimum distance between any two flowers planted. Examples Input 3 3 1 2 2 Output 2 (Note: In this example, one possible way to achieve the maximum minimum distance is to block cell (2, 2) and plant flowers at (1, 1), (3, 1), and (2, 3). The minimum distance between any two flowers is 2.) Input 4 4 2 1 1 4 4 Output 3 (Note: In this example, Alice can block cells (1, 1) and (4, 4) and plant flowers such that the minimum distance between any two flowers is maximized to 3.)","solution":"def max_min_distance(n, m, k, blocked_cells): from heapq import heappop, heappush import itertools directions = [(0, 1), (1, 0), (-1, 0), (0, -1)] def is_in_bounds(x, y): return 0 <= x < n and 0 <= y < m def bfs(blocked): visited = [[False] * m for _ in range(n)] distances = [[float(\'inf\')] * m for _ in range(n)] queue = [] for r, c in blocked: heappush(queue, (0, r, c)) distances[r][c] = 0 while queue: d, x, y = heappop(queue) if visited[x][y]: continue visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if is_in_bounds(nx, ny) and not visited[nx][ny]: new_dist = d + 1 if new_dist < distances[nx][ny]: distances[nx][ny] = new_dist heappush(queue, (new_dist, nx, ny)) return distances if k == 0: return (min(n, m) + 1) // 2 dists = [] for blocked_combination in itertools.combinations(blocked_cells, k): dists.append(bfs(blocked_combination)) max_distance = 0 for i in range(n): for j in range(m): possible_minimum = min(d[i][j] for d in dists) max_distance = max(max_distance, possible_minimum) return max_distance # Example usage: # n, m, k = 3, 3, 1 # blocked_cells = [(1, 1)] # print(max_min_distance(n, m, k, blocked_cells)) # Output: 2"},{"question":"Jennifer is a software developer, and she is working on a new project which involves processing a large amount of textual data. However, Jennifer has noticed that some words within the data often appear with varying capitalizations. For the purpose of her analysis, she needs to normalize the extracted words by converting them to \\"CamelCase\\" format, where the first letter of each word is capitalized and the rest of the letters are in lowercase. Words are separated by spaces, and Jennifer wants to ensure that only alphanumeric characters are included in the final CamelCase output. Non-alphanumeric characters should be ignored. Help Jennifer by writing a function that takes a sentence as input and converts it to CamelCase format. Input - One line containing a string s (1 ≤ |s| ≤ 10^5) representing the sentence. Output - Output a single string in CamelCase format. Examples Input \\"hello world\\" Output \\"HelloWorld\\" Input \\"this is a test sentence!\\" Output \\"ThisIsATestSentence\\" Input \\"Code 132 Academy\\" Output \\"Code132Academy\\" Note In the first example, \\"hello world\\" is converted to \\"HelloWorld\\" by capitalizing the first letter of \\"hello\\" and \\"world\\" and omitting the space. In the second example, \\"this is a test sentence!\\" is converted to \\"ThisIsATestSentence\\" by capitalizing the first letter of each word and removing the exclamation mark. In the third example, \\"Code 132 Academy\\" is converted to \\"Code132Academy\\" by capitalizing the first letter of each word and keeping the numbers in their original position.","solution":"def to_camel_case(s): Convert the input sentence to CamelCase format. :param s: str - input sentence containing words separated by spaces :return: str - the sentence converted to CamelCase format import re words = re.findall(r\'bw+b\', s) # Find all words containing alphanumeric characters camel_case_words = [word.capitalize() for word in words] # Capitalize each word return \'\'.join(camel_case_words) # Join all words in CamelCase format # Example usage if __name__ == \\"__main__\\": sentence = \\"hello world\\" print(to_camel_case(sentence)) # Should print \\"HelloWorld\\""},{"question":"You are given N sets of parentheses sequences. Your task is to determine if each sequence is balanced. A sequence of parentheses is balanced if it contains the correct order of opening and closing parentheses and each closing parenthesis has a corresponding opening parenthesis. Input The first line contains an integer N (1 ≤ N ≤ 100) — the number of sequences. The next N lines each contain a single string consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' (1 ≤ length of each string ≤ 100). Output For each sequence, print \\"YES\\" if the sequence is balanced, otherwise print \\"NO\\". Examples Input 3 ()[]{} ([{}]) ([)] Output YES YES NO Note In the first sequence, all types of parentheses are balanced and properly nested. In the second sequence, all types of parentheses are balanced and properly nested. In the third sequence, the closing bracket \')\' does not have a corresponding opening bracket \'(\', making it unbalanced.","solution":"def is_balanced(sequence): Returns \'YES\' if the given sequence of parentheses is balanced, otherwise \'NO\'. A sequence is balanced if it has correct opening and closing parentheses. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in sequence: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket.keys(): if stack == [] or matching_bracket[char] != stack.pop(): return \\"NO\\" else: return \\"NO\\" return \\"YES\\" if stack == [] else \\"NO\\" def check_sequences(n, sequences): Returns a list of \'YES\' or \'NO\' for each sequence to indicate if it is balanced or not. results = [] for sequence in sequences: results.append(is_balanced(sequence)) return results"},{"question":"You are given an integer array representing the elevations of a 2D terrain, where each element signifies the height at that point. Imagine it raining over this terrain, and water collects in the valleys between the peaks. Your task is to compute the total amount of water that will be trapped between the elevations after the rain stops. Input: The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array representing the terrain\'s elevations. The next line contains n integers hi (0 ≤ hi ≤ 10^4) — the values of the array elements which represent the heights at various points. Output: Print a single integer — the total units of water trapped between the elevations. Examples: Input: 6 0 1 2 1 0 1 Output: 1 Input: 5 3 2 1 2 3 Output: 4 Input: 7 4 2 0 3 2 5 Output: 9","solution":"def trapRainWater(elevations): Computes the total amount of water trapped between the elevations after rainfall. Parameters: elevations (list of int): Array representing the heights at various points. Returns: int: Total units of trapped water. if not elevations: return 0 n = len(elevations) left_max = [0] * n right_max = [0] * n left_max[0] = elevations[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], elevations[i]) right_max[n - 1] = elevations[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], elevations[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - elevations[i] return water_trapped"},{"question":"A balanced string is defined as a string that has the same number of \'A\'s and \'B\'s. Given a positive integer n, your task is to generate a balanced string of length n. If it\'s not possible, return \\"not possible\\". For example, for n = 6, one possible balanced string is \\"AABBAB\\". If n = 3, it\'s not possible to form a balanced string as there\'s no way to have an equal number of \'A\'s and \'B\'s in a string of odd length. Input The input contains only a single integer n (1 ≤ n ≤ 1000). Output Print a single balanced string of length n if possible, otherwise print \\"not possible\\". If there are multiple possible balanced strings, print any one of them. Examples Input 6 Output AABBAB Input 7 Output not possible","solution":"def generate_balanced_string(n): Generate a balanced string of length n with equal number of \'A\'s and \'B\'s. If not possible, return \\"not possible\\". if n % 2 != 0: return \\"not possible\\" return (\\"AB\\" * (n // 2))[:n]"},{"question":"A company has a special way of encrypting its messages, and they need your help to design a program to decrypt them. The encrypted message is represented as a string \'S\' of length \'N\', containing only lowercase alphabets. The encryption process is quite simple: Each letter in the message has been replaced by the next letter in the English alphabet. The last letter \'z\' wraps around to become \'a\'. Your task is to write a program that takes the encrypted message and returns the original message before encryption. INPUT: The first line contains an integer T, denoting the number of test cases. For each test case, there is a single line containing an encrypted string S of lowercase alphabets. OUTPUT: For each test case, print the decrypted message string. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 SAMPLE INPUT 2 bcd yza SAMPLE OUTPUT abc xyz","solution":"def decrypt_message(encrypted_message): decrypted_message = [] for char in encrypted_message: if char == \'a\': decrypted_message.append(\'z\') else: decrypted_message.append(chr(ord(char) - 1)) return \'\'.join(decrypted_message) def decrypt_messages(test_cases): results = [] for message in test_cases: results.append(decrypt_message(message)) return results"},{"question":"Joanna loves collecting rare gemstones. She stores them in containers and wants to organize them in such a way that the value of the gemstones in each container meets a certain threshold. However, she wants to minimize the number of containers used. Each gemstone has a specific value, and a container can hold any combination of gemstones with the total value of gemstones at least equal to a specified minimum value, but not exceeding it. You are given an array of integers representing the value of each gemstone and an integer representing the minimum value a container can hold. Write a function to find the minimum number of containers required to store all the gemstones such that each container meets the value requirements. Function Signature: ```python def min_containers(values: List[int], min_value: int) -> int: pass ``` # Input - `values`: A list of integers (1 ≤ len(values) ≤ 10^5; 1 ≤ values[i] ≤ 10^5), where `values[i]` represents the value of the i-th gemstone. - `min_value`: An integer (1 ≤ min_value ≤ 10^9) representing the minimum value a container should hold. # Output - Return an integer representing the minimum number of containers required. # Example 1 ```python values = [1, 2, 2, 3, 5] min_value = 6 ``` Output: ``` 2 ``` Explanation: - One possible way is to group [1, 2, 3] in one container and [2, 5] in another. # Example 2 ```python values = [10, 7, 11, 14] min_value = 20 ``` Output: ``` 2 ``` Explanation: - [10, 11] in one container and [7, 14] in another would suffice.","solution":"from typing import List def min_containers(values: List[int], min_value: int) -> int: values.sort(reverse=True) containers = 0 n = len(values) i = 0 while i < n: current_sum = 0 while i < n and current_sum < min_value: current_sum += values[i] i += 1 containers += 1 return containers"},{"question":"In a remote city, there exists a unique bus route that covers the whole city. The route forms a simple, unidirectional graph where each intersection is connected to exactly one other intersection. Due to this structure, it\'s guaranteed that there is a cycle somewhere in the route. Dina, a curious resident, wants to find out the length of the smallest cycle in this bus route network. You are given a list of n intersections, where each intersection is connected directly to one other intersection. Can you help Dina find the length of the smallest cycle? # Input - The first line contains a single integer n (2 ≤ n ≤ 100,000), representing the number of intersections. - The second line contains n integers. The i-th integer represents the intersection that intersection i is directly connected to. The intersections are numbered from 1 to n. # Output - Print a single integer, the length of the smallest cycle in the route. # Example Input ``` 5 2 3 4 5 1 ``` Output ``` 5 ``` Input ``` 6 2 3 4 5 6 4 ``` Output ``` 3 ``` Input ``` 4 2 3 1 3 ``` Output ``` 3 ``` In the first example, the direct connections form the cycle: 1 -> 2 -> 3 -> 4 -> 5 -> 1. This cycle has a length of 5. In the second example, intersection 4 connects back to intersection 3 forming a smaller cycle 4 -> 5 -> 6 -> 4 of length 3. In the third example, the smallest cycle is formed by intersections 2 -> 3 -> 4 -> 3 with a length of 3.","solution":"def find_smallest_cycle(n, connections): visited = [False] * (n + 1) def find_cycle_length(start): current = start length = 0 while not visited[current]: visited[current] = True current = connections[current - 1] length += 1 cycle_start = current cycle_length = 0 while True: current = connections[current - 1] cycle_length += 1 if current == cycle_start: break return cycle_length smallest_cycle_length = float(\'inf\') for i in range(1, n + 1): if not visited[i]: cycle_length = find_cycle_length(i) smallest_cycle_length = min(smallest_cycle_length, cycle_length) return smallest_cycle_length"},{"question":"Sarah loves numbers and especially enjoys finding interesting patterns in them. Recently, she has become fascinated with prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Sarah comes up with an interesting problem and needs your help to solve it. Sarah wants you to find the smallest prime number greater than or equal to a given number N. Can you write a program to help her achieve this? Input: The first line of input contains a single integer T, the number of test cases. Each of the next T lines contains a single integer N. Output: For each test case, output the smallest prime number greater than or equal to N on a new line. Constraints: 1 ≤ T ≤ 100 2 ≤ N ≤ 10^6 SAMPLE INPUT 3 17 29 45 SAMPLE OUTPUT 17 29 47 Explanation: For the 1st test case, the smallest prime number greater than or equal to 17 is 17. For the 2nd test case, the smallest prime number greater than or equal to 29 is 29. For the 3rd test case, the smallest prime number greater than or equal to 45 is 47.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def smallest_prime_geq_n(n): Find the smallest prime number greater than or equal to n. while not is_prime(n): n += 1 return n def solve(T, cases): Solve the problem for T test cases. results = [] for case in cases: n = case results.append(smallest_prime_geq_n(n)) return results"},{"question":"You are developing a gardening robot that can navigate a rectangular garden. The garden is divided into a grid of cells, and each cell can either be empty or contain an obstacle. The robot begins at the top-left corner of the garden and must reach the bottom-right corner. The robot can move in four possible directions: up, down, left, and right. However, it cannot move into a cell that contains an obstacle or move outside the garden grid. Your task is to determine the minimum number of moves required for the robot to reach the bottom-right corner from the top-left corner. If it is not possible to reach the bottom-right corner, return -1. Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns in the grid, respectively. The next m lines each contain n characters, where each character is either \'.\' (indicating an empty cell) or \'#\' (indicating an obstacle). Output Print a single integer representing the minimum number of moves required for the robot to reach the bottom-right corner, or -1 if it is not possible. Examples Input 5 5 ..... .#. ....# .#... ..... Output 8 Input 3 3 .#. # .#. Output -1 Explanation In the first example: The robot can follow this path: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,3) -> (3,4) -> (4,4), taking 8 moves. In the second example, the robot cannot reach the bottom-right corner since there is no valid path.","solution":"from collections import deque def min_moves_to_reach_end(m, n, grid): def is_valid(x, y): return 0 <= x < m and 0 <= y < n and grid[x][y] == \'.\' and not visited[x][y] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Right, Down, Left, Up queue = deque([(0, 0, 0)]) # (row, col, distance) visited = [[False] * n for _ in range(m)] visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == m-1 and y == n-1: # Reached the bottom-right corner return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1 # If we exhaust the queue without reaching the end # Inputs for testing # Format: (m, n, grid) inputs = [ (5, 5, [\\".....\\", \\".#.\\", \\"....#\\", \\".#...\\", \\".....\\"]), (3, 3, [\\".#.\\", \\"#\\", \\".#.\\"]), ] # Outputs for testing # Corresponding expected outputs for inputs expected_outputs = [ 8, -1 ]"},{"question":"You are given a list of students and their scores. Each student can take multiple tests, and each test has a different weight. Your task is to calculate the weighted average score for each student and determine the highest average score. Input The input consists of several lines. The first line contains an integer n (1 <= n <= 100), the number of students. Each of the following n lines describes a student. The description starts with the student\'s name (a string without spaces, maximum length 100), followed by an integer m (1 <= m <= 20), the number of tests the student has taken. Then, m pairs follow, each consisting of an integer score (0 <= score <= 100) and the corresponding weight (a positive integer). Output Output the name of the student with the highest weighted average score, formatted to two decimal places. If there are multiple students with the same highest average score, output the one who comes first in the input. Example Input 2 Alice 3 95 4 80 2 100 1 Bob 2 80 3 90 4 Output Alice","solution":"def calculate_weighted_average(scores_and_weights): total_weighted_score = 0 total_weight = 0 for score, weight in zip(scores_and_weights[0::2], scores_and_weights[1::2]): total_weighted_score += score * weight total_weight += weight return total_weighted_score / total_weight def find_student_with_highest_average(n, students): highest_average = -1 top_student = \\"\\" for student in students: name, m, *scores_and_weights = student average = calculate_weighted_average(scores_and_weights) if average > highest_average: highest_average = average top_student = name return top_student def main(data): lines = data.split(\'n\') n = int(lines[0]) students = [lines[i + 1].split() for i in range(n)] for student in students: student[1] = int(student[1]) student[2:] = list(map(int, student[2:])) return find_student_with_highest_average(n, students)"},{"question":"Little Iris just learned about numeric palindromes and the magic of prime numbers, and she came up with a new interesting problem: You are given an integer n. Your task is to find out how many prime numbers that are less than or equal to n are also palindromic numbers. A palindromic number is a number that remains the same when its digits are reversed. Input The input contains a single integer n (1 ≤ n ≤ 10000). Output Output a single integer which is the count of prime palindromic numbers less than or equal to n. Examples Input 100 Output 5 Input 10 Output 4 Note Palindromic prime numbers less than or equal to 100 are: [2, 3, 5, 7, 11]. Thus, the output for the first example is 5. Palindromic prime numbers less than or equal to 10 are: [2, 3, 5, 7]. Thus, the output for the second example is 4.","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def is_palindrome(num): Checks if a number is palindromic. return str(num) == str(num)[::-1] def count_prime_palindromes(n): Counts the number of prime palindromic numbers less than or equal to n. count = 0 for i in range(2, n + 1): if is_prime(i) and is_palindrome(i): count += 1 return count"},{"question":"A research institute is conducting an experiment that involves observations of certain bacteria\'s growth on two-dimensional grids. They have a grid of size n x m (where n is the number of rows and m is the number of columns) filled with integers representing the length of bacteria observed. They need a program to determine the maximum length of bacteria within any rectangular sub-grid (submatrix) of the given grid. Given the grid of integer values, write a program to determine the maximum length of bacteria obtainable in any submatrix of the grid. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid, respectively. The following n lines each contain m integers representing the lengths of bacteria at each grid cell. Each of these lengths is an integer between 1 and 100. Output Output a single integer representing the maximum length of bacteria obtainable in any rectangular sub-grid of the given grid. Examples Input 3 3 1 2 3 2 3 4 3 4 5 Output 5 Input 2 4 4 3 2 1 1 5 1 4 Output 5","solution":"def max_bacteria_length(n, m, grid): Returns the maximum length of the bacteria obtainable in any rectangular sub-grid. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of list of int): The grid containing lengths of bacteria. Returns: int: The maximum length of bacteria in any submatrix. max_length = 0 for row in grid: max_length = max(max_length, max(row)) return max_length"},{"question":"You are given a list of N integers, and your task is to determine if there exists a subset of these integers such that the sum of the subset is divisible by a given integer K. If such a subset exists, return `YES`. Otherwise, return `NO`. **Input:** - The first line contains two space-separated integers N and K. - The second line contains N space-separated integers representing the list. **Output:** - Print `YES` if there exists a subset whose sum is divisible by K. Otherwise, print `NO`. **Constraints:** - 1 ≤ N ≤ 50 - -10^9 ≤ elements of the list ≤ 10^9 - 1 ≤ K ≤ 1000 **Example 1:** **Input:** ``` 4 3 1 2 3 4 ``` **Output:** ``` YES ``` **Example 2:** **Input:** ``` 5 5 1 -1 2 -3 4 ``` **Output:** ``` YES ```","solution":"def subset_sum_divisible(N, K, arr): Determines if there exists a subset of arr such that the sum of the subset is divisible by K. :param N: The number of integers in the list :param K: The integer divisor :param arr: The list of integers :return: \\"YES\\" if such a subset exists, otherwise \\"NO\\" # Dynamic programming approach with a set to store possible remainders reachable = {0} for num in arr: new_reachable = set(reachable) # Copy existing reachable remainders for remainder in reachable: new_remainder = (remainder + num) % K if new_remainder == 0: return \\"YES\\" new_reachable.add(new_remainder) reachable = new_reachable return \\"NO\\""},{"question":"Dr. Smith has a fascination with arranging books in his library. His library has a peculiar rule: each book must be placed on a specific shelf in the library; no two books may share the same shelf. Dr. Smith’s library is divided into a number of segments, each containing a certain number of shelves. Shelves within the same segment are contiguous and are assigned increasing shelf numbers starting from 1. He has a list of books he wants to place on the shelves, where each book is described by a range of valid shelves ([start_shelf, end_shelf]). Dr. Smith wants to place each book on a shelf within its valid range such that no two books share the same shelf. Determine if it is possible to place all the books according to these rules. Input The first line contains two integers, S and B (1 ≤ S, B ≤ 200,000), representing the number of segments and the total number of books, respectively. The next S lines describe the segments. Each segment is represented by an integer N (1 ≤ N ≤ 200,000), indicating the number of shelves in the segment. The next B lines describe the books. Each line contains two integers, start_shelf and end_shelf (1 ≤ start_shelf ≤ end_shelf ≤ the total number of shelves in the library), representing the range of valid shelves for that book. Output Output “YES” if it is possible to place all the books according to the rules. Otherwise, output “NO”. Example Input 2 3 3 2 1 3 2 4 4 5 Output YES Note Segment 1 has 3 shelves (shelves 1, 2, and 3), and Segment 2 has 2 shelves (shelves 4 and 5). Book 1 can be placed on shelf 1, 2, or 3. Book 2 can be placed on shelf 2, 3, or 4. Book 3 can be placed on shelf 4 or 5. All books can be placed without any conflicts. Thus, the output is YES.","solution":"def can_place_books(S, B, segments, books): from bisect import bisect_left, bisect_right # Create a list of cumulative shelves for each segment total_shelves = [] cumulative_shelves = 0 for shelves in segments: cumulative_shelves += shelves total_shelves.append(cumulative_shelves) # Flatten segments to obtain absolute shelf numbers & availability availability = [False] * cumulative_shelves for i in range(S): start = total_shelves[i-1] if i > 0 else 0 for j in range(start, total_shelves[i]): availability[j] = True # Iterate through all books to place them for start_shelf, end_shelf in books: placed = False for i in range(start_shelf - 1, end_shelf): if availability[i]: availability[i] = False placed = True break if not placed: return \\"NO\\" return \\"YES\\""},{"question":"Description You\'re tasked with developing a software to manage a simple stock portfolio, including daily stock price updates and the ability to compute the portfolio value based on the shares held. The input gives you the initial stock prices, followed by the stock price updates over a certain period, and finally the shares held for each stock. The goal is to calculate and output the portfolio value on a specific date based on the provided inputs. Input The input consists of multiple test cases. The first line of each test case shows the number of stocks N. The next line contains N integers, representing the initial prices of each stock in the portfolio. The next line contains an integer D, representing the number of days with price updates. The next D lines describe the price updates, each containing N integers representing the stock prices for each of the N stocks on that day. The next line contains N integers representing how many shares are held for each of the N stocks. The final line contains an integer, the specific day number (from 0 to D) on which to calculate the portfolio value. Day 0 represents the initial prices. All input numbers are in the range [0,10000]. Input ends with EOF. Output For each test case, output the value of the portfolio on the specified day, one line at a time. Example Input 2 10 20 3 12 22 11 18 9 15 5 10 2 3 100 200 5 120 220 110 180 90 150 115 170 130 160 10 15 1 Output 340 4950 Explanation: In the first test case, the portfolio consists of two stocks with initial prices 10 and 20. After three days of price updates: - Day 1 prices: 12 and 22 - Day 2 prices: 11 and 18 - Day 3 prices: 9 and 15 The shares held are 5 and 10, respectively. The portfolio value on day 2 is calculated as (11 * 5) + (18 * 10) = 55 + 180 = 235. In the second test case, the portfolio after the price updates of five days results in the value calculated using the prices on the first day as requested. The portfolio value on day 1 is calculated as (120 * 10) + (220 * 15) = 1200 + 3300 = 4500.","solution":"def calculate_portfolio_value(initial_prices, updates, shares, specified_day): Calculate the value of the portfolio on the specified day. :param initial_prices: List of initial prices of stocks :param updates: List of lists where each sublist contains stock prices for each day :param shares: List of shares held for each stock :param specified_day: Integer representing the day to calculate the portfolio value :return: Integer representing the value of the portfolio on the specified day if specified_day == 0: prices = initial_prices else: prices = updates[specified_day - 1] return sum(price * share for price, share in zip(prices, shares)) # Function to parse input and calculate portfolio values for each test case def process_input(input_text): lines = input_text.strip().split(\'n\') index = 0 results = [] while index < len(lines): N = int(lines[index]) index += 1 initial_prices = list(map(int, lines[index].split())) index += 1 D = int(lines[index]) index += 1 updates = [] for _ in range(D): updates.append(list(map(int, lines[index].split()))) index += 1 shares = list(map(int, lines[index].split())) index += 1 specified_day = int(lines[index]) index += 1 portfolio_value = calculate_portfolio_value(initial_prices, updates, shares, specified_day) results.append(portfolio_value) return results"},{"question":"An e-commerce website records the number of items sold each day. The site admin wants to know the maximum number of items sold consecutively across any number of days. You need to write a function that takes an array of integers, where each integer represents the number of items sold on a specific day, and returns the maximum sum of items sold in any consecutive sequence of days. # Input Format - First line contains an integer N, denoting the number of days. - Second line contains N space-separated integers, each representing the number of items sold on that respective day. # Output Format - Output an integer representing the maximum number of items sold in any consecutive sequence of days. # Constraints - 1 ≤ N ≤ 10^5 - -10^9 ≤ number of items sold on each day ≤ 10^9 # Example Input ``` 5 3 -2 5 -1 4 ``` # Example Output ``` 9 ``` # Explanation In this example, the maximum sum of items sold in any consecutive sequence of days is achieved by summing the numbers 3, -2, 5, and 3 (which gives 9). Although there are other sequences like [3, -2, 5], their sums are not greater. Write a Python function `max_consecutive_sales(N, sales)` to solve the problem. ```python def max_consecutive_sales(N, sales): # Your code here # Example use case N = 5 sales = [3, -2, 5, -1, 4] print(max_consecutive_sales(N, sales)) # Output should be 9 ```","solution":"def max_consecutive_sales(N, sales): Returns the maximum sum of items sold in any consecutive sequence of days. Uses Kadane\'s Algorithm for linear time complexity. max_current = max_global = sales[0] for i in range(1, N): max_current = max(sales[i], max_current + sales[i]) if max_current > max_global: max_global = max_current return max_global # Example use case N = 5 sales = [3, -2, 5, -1, 4] print(max_consecutive_sales(N, sales)) # Output should be 9"},{"question":"You are organizing a coding competition and need to create a scoreboard. Each participant accumulates points for solving problems, but the score distribution is not based on the order in which the problems are solved, only on the number of problems solved and the points assigned to each. You need to determine the scoreboard which lists participants sorted first by the total points in descending order, and then by their names lexicographically in ascending order in case of ties. Each participant has a unique name, but they might not attempt all problems. Input The first line contains two integers `p` and `q` (1 ≤ p ≤ 1000, 1 ≤ q ≤ 100), the number of participants and the number of problems, respectively. The next `q` lines contain the scores for each problem: the i-th line contains a single integer si (1 ≤ si ≤ 1000), the score assigned for solving the i-th problem. The following `p` lines describe the participants: the j-th line contains a string `t` (1 ≤ |t| ≤ 20) representing the participant\'s name, followed by `q` integers where the i-th integer is either 0 or 1. A value of 1 indicates that the participant solved the i-th problem, and 0 indicates they did not solve it. Output Output `p` lines. Each line contains the name of a participant along with their total score, sorted as described above. Examples Input 3 4 500 300 200 400 alice 1 0 1 1 bob 0 1 1 0 charlie 1 1 0 0 Output alice 1100 charlie 800 bob 500 Input 2 3 200 100 300 eve 1 1 1 dave 1 0 1 Output eve 600 dave 500","solution":"def calculate_scoreboard(participants_info, problem_scores): scores = [] for participant in participants_info: name = participant[0] scores_for_problems = participant[1:] total_score = sum(score for score, solved in zip(problem_scores, scores_for_problems) if solved == 1) scores.append((total_score, name)) scores.sort(key=lambda x: (-x[0], x[1])) return scores def get_scoreboard(p, q, problem_scores, participants): participants_info = [] for participant in participants: parts = participant.split() name = parts[0] scores_for_problems = list(map(int, parts[1:])) participants_info.append([name] + scores_for_problems) sorted_scores = calculate_scoreboard(participants_info, problem_scores) return sorted_scores # Helper function to output the scoreboard in the desired format def format_scoreboard(sorted_scores): result = [] for total_score, name in sorted_scores: result.append(f\\"{name} {total_score}\\") return result"},{"question":"Write a function called `reverse_words` that takes a string as input, reverses the order of the words, and returns the new string. Each word is defined as a sequence of non-space characters. Ensure that the function preserves the space between the words in the original input. # Function Signature ```python def reverse_words(s: str) -> str: pass ``` # Examples ```python assert reverse_words(\\"hello world\\") == \\"world hello\\" assert reverse_words(\\"The sky is blue\\") == \\"blue is sky The\\" assert reverse_words(\\"a good example\\") == \\"example good a\\" assert reverse_words(\\" Bob Loves Alice \\") == \\"Alice Loves Bob\\" ``` # Constraints 1. The input string can have extra spaces before, after, or between words. 2. The input string will not be empty. 3. Only one space should separate words in the resulting string.","solution":"def reverse_words(s: str) -> str: This function takes a string s, reverses the order of the words, and returns the new string. Each word is defined as a sequence of non-space characters. It ensures that there\'s only one space between words in the resulting string. # Split the string by whitespace to get individual words words = s.split() # Reverse the order of words and join them with a single space reversed_words = \' \'.join(reversed(words)) return reversed_words"},{"question":"In a given string, we define a \\"balanced substring\\" as a substring that contains an equal number of the characters \'a\' and \'b\'. You are given a string S consisting of only \'a\' and \'b\' characters. Write a program to determine the length of the longest balanced substring in S. Constraints * 1 ≤ |S| ≤ 1000 * S contains only \'a\' and \'b\' characters. Input Input is given from Standard Input in the following format: S Output Print the length of the longest balanced substring. If no balanced substring exists, print `0`. Examples Input abbaba Output 6 Input ababa Output 4 Input aaaa Output 0","solution":"def longest_balanced_substring(S): Returns the length of the longest balanced substring (with equal number of \'a\' and \'b\') in the given string S. max_length = 0 n = len(S) # Iterate through all possible starting points of substrings for i in range(n): count_a = 0 count_b = 0 # Iterate through the substring starting from i to the end of the string for j in range(i, n): if S[j] == \'a\': count_a += 1 else: count_b += 1 # If counts are equal, we have a balanced substring if count_a == count_b: max_length = max(max_length, j - i + 1) return max_length"},{"question":"A factory has a series of machines arranged in a line. Each machine is responsible for processing a unit of work, and there is a specific order in which the work must be processed. Initially, each machine has a workload value representing the amount of work it currently holds. The factory manager wants to redistribute the workloads so that all machines have the same workload value. To achieve this, the manager can perform the following operation any number of times: Choose two adjacent machines and redistribute the work between them in such a way that they hold equal workloads. If the total work in the two adjacent machines combined is odd, this operation cannot be performed. Determine if it is possible to equalize the workloads of all the machines using the allowed operation. Input The first line contains an integer n (2 ≤ n ≤ 200,000) — the number of machines. The second line contains n integers wi (0 ≤ wi ≤ 1,000,000,000), where wi is the initial workload of the ith machine. Output Print \\"YES\\" if it is possible to equalize the workloads of all the machines, and \\"NO\\" otherwise. Examples Input 3 4 6 2 Output YES Input 4 3 1 4 2 Output NO Input 2 7 7 Output YES Note In the first sample, you can perform the following sequence of operations: - Redistribute work between the 1st and 2nd machines: [5, 5, 2] - Redistribute work between the 2nd and 3rd machines: [5, 3, 3] - Redistribute work between the 1st and 2nd machines: [4, 4, 3] - Redistribute work between the 2nd and 3rd machines: [4, 3, 4] - Redistribute work between the 1st and 2nd machines: [4, 4, 4] In the second sample, it is impossible to redistribute the workloads to make all machines equal. In the third sample, the machines already have equal workloads.","solution":"def can_equalize_workload(n, workloads): Determine if it is possible to equalize the workloads of all machines. Parameters: n (int): the number of machines workloads (list of int): the initial workload of each machine Returns: str: \\"YES\\" if it is possible to equalize the workloads, \\"NO\\" otherwise # Calculate the total workload total_workload = sum(workloads) # Check if the total workload is divisible by the number of machines if total_workload % n != 0: return \\"NO\\" # Check each pair of adjacent machines for i in range(n - 1): if (workloads[i] + workloads[i + 1]) % 2 != 0: return \\"NO\\" return \\"YES\\""},{"question":"You are given a sequence of N integers. Your task is to determine the maximum possible value of a contiguous subsequence within the given sequence. A contiguous subsequence is defined as a sequence of elements that are consecutive in the original sequence. Constraints * 1 ≤ N ≤ 10^5 * -10^4 ≤ sequence[i] ≤ 10^4 (1 ≤ i ≤ N) Input The input is given from Standard Input in the following format: N sequence[1] sequence[2] ... sequence[N] Output Print the maximum possible value of a contiguous subsequence. Examples Input 5 1 -2 3 10 -4 Output 13 Input 4 -2 -3 -1 -5 Output -1 Input 6 2 -3 4 -1 2 1 Output 6 Input 8 -1 2 3 -2 5 -3 2 -1 Output 8","solution":"def max_subsequence_sum(N, sequence): Returns the maximum possible value of a contiguous subsequence within the given sequence. N: int, length of the sequence sequence: list of int, the sequence of integers max_sum = float(\'-inf\') current_sum = 0 for num in sequence: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum"},{"question":"A software company organizes coding contests regularly. Each contest has several problems that must be solved within a specified duration. The company wants to ensure that there are no overlapping contests for any participants. You need to create a schedule where no two contests overlap. Each contest is defined by a start time and an end time (exclusive). A participant can join a new contest if it starts exactly when their previous contest ends. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 1000) — the number of contests. The next n lines describe the contests. Each line contains two integers s_i and e_i (1 ≤ s_i < e_i ≤ 10^5) — the start time and end time of the i-th contest. Output For each test case, print \\"YES\\" if it is possible to schedule all contests without overlaps, and \\"NO\\" otherwise. Examples Input 2 3 1 3 2 4 3 5 2 2 3 1 2 Output NO YES Input 1 4 1 5 5 10 10 15 15 20 Output YES Input 2 2 1 4 4 6 3 3 5 1 4 2 6 Output YES NO","solution":"def can_schedule_contests(t, test_cases): results = [] for i in range(t): n, contests = test_cases[i] # Sorting the contests by their start time, and in the case of tie, by their end time contests.sort(key=lambda x: (x[0], x[1])) possible = True prev_end = 0 for s, e in contests: if s < prev_end: possible = False break prev_end = e results.append(\\"YES\\" if possible else \\"NO\\") return results"},{"question":"Cat and Mouse Game: Sam loves playing games, and his favorite one involves a cat chasing a mouse on a 2D grid. The grid is made up of cells, and the cat and the mouse can only move up, down, left, or right one cell at a time. The cat always starts at the bottom-right corner and the mouse starts at the top-left corner of an MxN grid. Given that the cat always chases the mouse along the shortest path possible, calculate the minimum number of moves the cat must make to catch the mouse. Input Format: The first line contains T, the number of test cases. The next T lines each contain two integers M and N, representing the number of rows and columns of the grid. Output Format: Output the minimum number of moves the cat must make to catch the mouse for each test case in separate lines. Constraints: 1 ≤ T ≤ 100 1 ≤ M, N ≤ 1000 Example Input: 2 5 5 3 7 Example Output: 8 8 Explanation: In the first test case, the cat moves from (5,5) to (1,1). The minimum number of moves is the sum of the differences in their row and column positions: (5-1) + (5-1) = 8. In the second test case, the cat moves from (3,7) to (1,1). The minimum number of moves is (3-1) + (7-1) = 8.","solution":"def minimum_moves_to_catch_mouse(M, N): Returns the minimum number of moves the cat must make to catch the mouse. The cat starts at (M, N) and the mouse starts at (1, 1). The minimum number of moves is the sum of the vertical and horizontal distances. return (M - 1) + (N - 1) def process_test_cases(test_cases): Processes multiple test cases and returns the results as a list. Parameters: test_cases (list of tuples): A list of tuples where each tuple contains (M, N). Returns: list: A list of results for each test case. results = [minimum_moves_to_catch_mouse(M, N) for M, N in test_cases] return results"},{"question":"Karen, the owner of a bookstore, observes that her customers have specific preferences for books based on their genre. She wants to rearrange the bookshelves such that the books are grouped by genre and the order of the books within each genre remains the same as their original sequence. Karen also wants to minimize the number of shelves used. Each book can belong to only one genre and each genre must occupy a contiguous sequence of positions on a shelf. For example, if the genres are \\"Fiction\\", \\"Non-Fiction\\", and \\"Science\\", books can be ordered as \\"Fiction, Fiction, Non-Fiction, Science, Science\\", but any other arrangement where the genres are not contiguous would not be allowed (e.g., \\"Fiction, Non-Fiction, Fiction, Science, Non-Fiction, Science\\"). You need to write a program to help Karen achieve this. Given a list of books with their genres, output the new arrangement of books such that the genres are contiguous and the number of shelves used is minimized. Input The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the number of books. The second line contains n space-separated strings g_i — the genres of the books in the original order (each string is a non-empty string of at most 10 characters). Output Output the minimum number of shelves required. If there are multiple valid solutions, you may output any. Examples Input 5 Fiction Non-Fiction Fiction Science Science Output 3 Input 4 History Science History Science Output 2 Input 6 Romance Romance Fiction Fiction Non-Fiction Non-Fiction Output 3 Note In the first example, the optimal arrangement can be: * First shelf: Fiction, Fiction * Second shelf: Non-Fiction * Third shelf: Science, Science In the second example, the optimal arrangement can be: * First shelf: History, History * Second shelf: Science, Science","solution":"def rearrange_books(n, genres): Function to rearrange books to minimize the number of shelves used. Parameters: n (int): The number of books. genres (list of str): The genres of the books in original order. Returns: int: The minimum number of shelves required. from collections import defaultdict genre_positions = defaultdict(list) # Group books by genre and maintain original order for i, genre in enumerate(genres): genre_positions[genre].append(i) return len(genre_positions) # Example usage: # n = 5 # genres = [\\"Fiction\\", \\"Non-Fiction\\", \\"Fiction\\", \\"Science\\", \\"Science\\"] # print(rearrange_books(n, genres)) # Output: 3"},{"question":"John is organizing a web development bootcamp. For one of the project assignments, he needs to design a grid where each cell represents a different task. However, John wants to ensure that no two adjacent cells (horizontally or vertically) contain the same task identifier. Given a grid of size N x M, help John determine the minimum number of different task identifiers needed to fill this grid such that no two adjacent cells will have the same identifier. Input: First line of the input contains T denoting the number of test cases. Then T lines follow, each containing two integers N and M. Output: For each test case, output a single integer denoting the minimum number of different task identifiers required. Constraints: 1 ≤ T ≤ 10^5 1 ≤ N, M ≤ 10^4 Sample Input: 3 1 1 2 2 2 3 Sample Output: 1 2 2 Explanation: Test case 1: A 1x1 grid requires only 1 task identifier since no adjacent cells exist. Test case 2: A 2x2 grid can be filled with 2 different tasks in a checkerboard pattern: 1 2 2 1 Test case 3: A 2x3 grid can also be filled with 2 different tasks: 1 2 1 2 1 2","solution":"def minimum_task_identifiers(T, dimensions): Given a list of grid dimensions, returns the minimum number of different task identifiers required for each grid to ensure no two adjacent cells have the same identifier. Parameters: T (int): The number of test cases. dimensions (list of tuples): Each tuple contains two integers N and M, representing the grid dimensions. Returns: list of int: The minimum number of task identifiers for each test case. results = [] for N, M in dimensions: if N == 1 or M == 1: results.append(1) elif N % 2 == 0 or M % 2 == 0: results.append(2) else: results.append(2) return results"},{"question":"Write a program that takes an integer `n` and then `n` edges of an undirected graph as input. The program should output `True` if the graph is bipartite, otherwise `False`. A graph is bipartite if the nodes can be colored using two colors such that no two adjacent nodes have the same color. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000000), the number of edges. - The next `n` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ 1000000) representing an edge between node `u` and node `v`. # Output - Output `True` if the graph is bipartite, otherwise `False`. # Examples Example 1 Input: ``` 3 1 2 2 3 3 1 ``` Output: ``` False ``` Example 2 Input: ``` 4 1 2 1 3 2 4 3 4 ``` Output: ``` True ``` In the example 1, the graph cannot be colored using two colors such that no two adjacent nodes have the same color, hence the output is `False`. In the example 2, the graph can be colored using two colors, thus the output is `True`.","solution":"from collections import defaultdict, deque def is_bipartite(n, edges): graph = defaultdict(list) # Building the graph from the edges for u, v in edges: graph[u].append(v) graph[v].append(u) color = {} # Function to perform BFS and check bipartiteness def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in color: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True # Check all components of the graph for node in graph: if node not in color: if not bfs(node): return False return True # Example usage if __name__ == \\"__main__\\": n = int(input()) edges = [tuple(map(int, input().strip().split())) for _ in range(n)] print(is_bipartite(n, edges))"},{"question":"Chef loves preparing dishes using ingredients from his enchanting garden. Each ingredient in his garden has a magical property and can only be harvested during a specific range of months in the year. Chef wants to maximize the number of unique dishes he can prepare using the ingredients available to him. Each dish requires exactly one type of ingredient. Given that you have information about N different types of ingredients and their respective harvesting months, determine the maximum number of unique dishes Chef can prepare within the given constraints. **Input:** - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of different types of ingredients. - Each of the next N lines contains two integers Li and Ri, the start and end month (1 ≤ Li ≤ Ri ≤ 12) of the i-th ingredient\'s harvesting period. **Output:** For each test case, print the maximum number of unique dishes Chef can prepare. **Constraints:** 1. 1 ≤ T ≤ 10 2. 1 ≤ N ≤ 1000 3. 1 ≤ Li ≤ Ri ≤ 12 **Example:** **Input:** ``` 2 3 1 4 2 6 5 8 4 1 3 2 5 4 6 7 9 ``` **Output:** ``` 2 3 ``` **Explanation:** - In the first test case, Chef can use the ingredients available from 1 to 4 for one dish and the ingredients from 5 to 8 for another dish, making a total of 2 dishes. - In the second test case, Chef can use the ingredients available from 1 to 3 for one dish, 4 to 6 for another dish, and 7 to 9 for another dish, making a total of 3 dishes.","solution":"def max_unique_dishes(T, test_cases): results = [] for t in range(T): N = test_cases[t][\'N\'] periods = test_cases[t][\'periods\'] periods.sort(key=lambda x: x[1]) # Sorting by the end month (Ri) count = 0 current_end = 0 for period in periods: if period[0] > current_end: count += 1 current_end = period[1] results.append(count) return results # Example usage T = 2 test_cases = [ {\'N\': 3, \'periods\': [(1, 4), (2, 6), (5, 8)]}, {\'N\': 4, \'periods\': [(1, 3), (2, 5), (4, 6), (7, 9)]} ] print(max_unique_dishes(T, test_cases)) # Output should be [2, 3]"},{"question":"You are given a string S consisting of lowercase English letters. Your task is to determine if it is possible to reorder the characters in S so that no two adjacent characters are the same. If such a reordering is possible, output one valid reordering of the string. Otherwise, output \\"No\\". Constraints * 1 ≤ |S| ≤ 1000 Input The input is given as follows: S Output If a reordering exists such that no two adjacent characters are the same, print \\"Yes\\" in the first line followed by the rearranged string in the second line. If no such reordering exists, print \\"No\\". Examples Input aabb Output Yes abab Input aaab Output No Input aaaabbcc Output Yes abacacab","solution":"from heapq import heapify, heappop, heappush from collections import Counter def rearrange_string(S): Determines if it is possible to reorder characters in S such that no two adjacent characters are the same. If possible, return \\"Yes\\" followed by a valid reordering. Otherwise, return \\"No\\". count = Counter(S) max_heap = [(-freq, char) for char, freq in count.items()] heapify(max_heap) if -max_heap[0][0] > (len(S) + 1) // 2: return \\"No\\" result = [] prev_freq, prev_char = 0, \'\' while max_heap: freq, char = heappop(max_heap) result.append(char) if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char return \\"Yesn\\" + \'\'.join(result)"},{"question":"Develop a program that calculates the prefix sums of a list of integers. The prefix sum of an array is defined as an array of the same size where each element at index `i` is the sum of the elements from index 0 to `i` in the original array. For example, the prefix sum of the array `[1, 2, 3, 4, 5]` is `[1, 3, 6, 10, 15]`. Input The input consists of multiple test cases. Each test case is a list of positive integers separated by spaces, where the number of integers does not exceed 10,000. Input ends with EOF. The number of test cases does not exceed 5. Output For each list of integers, output its corresponding prefix sums on a single line separated by spaces. Examples Input 1 2 3 4 5 5 4 3 2 1 10 20 30 Output 1 3 6 10 15 5 9 12 14 15 10 30 60 Input 2 4 6 8 3 1 1 1 1 1 1 Output 2 6 12 20 3 1 2 3 4 5 6 Input None Output None","solution":"def calculate_prefix_sums(inputs): Calculate the prefix sums for each list in inputs. :param inputs: List of lists, each a list of integers. :return: List of strings where each string is the prefix sums of the respective list in inputs. result = [] for lst in inputs: prefix_sums = [] current_sum = 0 for num in lst: current_sum += num prefix_sums.append(current_sum) result.append(\\" \\".join(map(str, prefix_sums))) return result"},{"question":"You are given a string representation of a positive integer. You need to determine the smallest positive integer that consists of the same digits as the given number but arranged in non-decreasing order. For example: * For the input \\"321\\", the output should be \\"123\\". * For the input \\"465467\\", the output should be \\"445667\\". * For the input \\"1000\\", the output should be \\"0001\\". The function should take a single string argument representing the number and return the rearranged number as a string. Input - A single string representing a positive integer (1 ≤ length of string ≤ 1,000,000). Output - A single string representing the smallest integer that can be formed using the digits of the input number. Example Input ``` 321 ``` Output ``` 123 ``` Input ``` 465467 ``` Output ``` 445667 ``` Input ``` 1000 ``` Output ``` 0001 ```","solution":"def rearrange_digits(number_str): Returns the smallest positive integer that consists of the same digits as the given number but arranged in non-decreasing order. Parameters: number_str (str): The string representation of a positive integer. Returns: str: The rearranged number as a string. return \'\'.join(sorted(number_str))"},{"question":"You are given a list of integers representing the levels of various enemies in a game. Your task is to defeat all enemies using the least number of operations. An operation consists of choosing a contiguous subsequence of the list and defeating all enemies whose levels are the same within that subsequence. For example, if the subsequence is `[3, 3, 3]`, all three enemies are defeated in one operation. Determine the minimum number of operations required to defeat all the enemies. Input The first line contains an integer n (1 ≤ n ≤ 10^6), the number of enemies. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6), representing the levels of the enemies. Output Print one integer: the minimum number of operations required to defeat all the enemies. Examples Input 5 2 2 2 3 3 Output 2 Input 6 4 1 1 1 4 4 Output 3 Input 4 5 5 5 5 Output 1 Note In the first example, we have enemies with levels 2, 2, 2, 3, 3. We can defeat the sequence `[2, 2, 2]` in one operation and the sequence `[3, 3]` in another operation. Therefore, 2 operations are needed to defeat all the enemies. In the second example, the levels of enemies are 4, 1, 1, 1, 4, 4. The optimal way to defeat them is by three operations: `[4]`, `[1, 1, 1]`, and `[4, 4]`. In the last example, all enemies have the same level, so they can be defeated in one operation.","solution":"def min_operations_to_defeat_enemies(n, levels): This function returns the minimum number of operations required to defeat all the enemies. if n == 0: return 0 operations = 1 for i in range(1, n): if levels[i] != levels[i - 1]: operations += 1 return operations"},{"question":"Sarah is interested in a specific numbering system she calls “Mod Sequence”. In Mod Sequence, given two integers M and L, she creates a sequence as follows: 1. Begin with an integer P = 0. 2. Add 1 to P until P reaches M. 3. When P reaches M, revert back to 0 and continue. She intends to understand how often zero appears in the first L elements of this sequence. Write a function that takes two integers M and L as input and returns how many times zero appears in the first L elements of the sequence. Constraints - 1 ≤ M ≤ 100,000 - 1 ≤ L ≤ 1,000,000,000 Input The input is given from Standard Input in the following format: M L Output Print a single integer, representing the number of times zero appears in the first L elements of the sequence. Examples Input 3 10 Output 3 Input 5 25 Output 5 Input 7 15 Output 2","solution":"def mod_sequence_zeros(M, L): Returns the number of times zero appears in the first L elements of the mod sequence defined by M. # Calculate full cycles of the mod sequence within the first L elements full_cycles = L // (M + 1) # Calculate the remaining elements after the full cycles remaining_elements = L % (M + 1) # Zeros appear once in each cycle, so count full cycle zeros zero_count = full_cycles # If remaining elements include a zero if remaining_elements > 0: zero_count += 1 return zero_count # Reading input from standard input (not needed in testing) if __name__ == \\"__main__\\": import sys input = sys.stdin.read M, L = map(int, input().split()) print(mod_sequence_zeros(M, L))"},{"question":"A toy shop has recently started selling a new kind of toy blocks. Each block is marked with a positive integer value and arranged in a row. The shop owner offers a special discount: Any contiguous subsequence of blocks can be bought for 90% of their total sum rounded down to the nearest integer. The buyer need not buy all the blocks, and can choose to buy any single contiguous subsequence or a combination of them such that the total cost is minimized. Given the row of toy blocks, compute the minimum cost required to buy all blocks under the special discount offer. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of blocks in the row. The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the value marked on each block. Output Print a single number — the minimum cost required to buy all the blocks. Examples Input 5 10 20 30 40 50 Output 135 Input 4 100 200 300 400 Output 900","solution":"def minimum_cost_to_buy_blocks(n, values): Calculate the minimum cost to buy all blocks with the special discount offer. total_sum = sum(values) discounted_sum = total_sum * 0.9 return int(discounted_sum) # Test the function with provided examples print(minimum_cost_to_buy_blocks(5, [10, 20, 30, 40, 50])) # Expected Output: 135 print(minimum_cost_to_buy_blocks(4, [100, 200, 300, 400])) # Expected Output: 900"},{"question":"Sarah is developing a new feature for a social media app that allows users to see the trending topics based on hashtags used in posts. The system keeps track of when each post is made and the hashtags it contains. She wants to implement a function to find the top \'k\' trending hashtags within a given time range. Given a list of posts, where each post contains a timestamp and a list of hashtags, and a time range [start_time, end_time], your task is to find the \'k\' most frequently used hashtags in that time range. If there are multiple hashtags with the same frequency, they should be sorted lexicographically. Input The first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of posts. The next n lines each contain a timestamp t_i (0 ≤ t_i ≤ 10^9) and a space-separated list of hashtags (each hashtag is a string of non-whitespace characters and all hashtags in a list are unique, but they can be repeated across different posts). The following line contains two integers q and k (1 ≤ q, k ≤ 10^5), the number of queries and the number of top trending hashtags, respectively. Each of the following q lines contains two integers start_time and end_time (0 ≤ start_time ≤ end_time ≤ 10^9), representing the time range for which to find the top \'k\' trending hashtags. Output For each query, print the \'k\' most frequently used hashtags within the given time range, ordered by frequency and then alphabetically. If there are fewer than \'k\' unique hashtags in the given time range, output all of them. Examples Input 5 100 #fun #sun 200 #play #sun 300 #sun 400 #fun #play 500 #relax 2 2 150 350 100 500 Output #sun #play #sun #fun Note In the first query, the time range is [150, 350]. The hashtags in this range are: - 200: #play, #sun - 300: #sun The frequency count for hashtags is: - #sun: 2, - #play: 1 The top 2 trending hashtags are #sun and #play. In the second query, the time range is [100, 500]. The hashtags in this range are: - 100: #fun, #sun - 200: #play, #sun - 300: #sun - 400: #fun, #play - 500: #relax The frequency count for hashtags is: - #sun: 3, - #fun: 2, - #play: 2, - #relax: 1 The top 2 trending hashtags are #sun and #fun (since #fun comes before #play lexicographically and both have the same frequency).","solution":"from collections import defaultdict, Counter from heapq import nlargest def get_top_trending_hashtags(posts, queries, k): Finds the top \'k\' trending hashtags within specified time ranges. Args: posts: List of tuples where each tuple contains a timestamp and a list of hashtags. queries: List of tuples where each tuple contains a start_time and end_time. k: The number of top trending hashtags to retrieve. Returns: A list of lists containing the \'k\' most frequently used hashtags for each query. def collect_hashtags_in_range(posts, start_time, end_time): hashtags_count = Counter() for timestamp, hashtags in posts: if start_time <= timestamp <= end_time: hashtags_count.update(hashtags) return hashtags_count result = [] for start_time, end_time in queries: hashtags_count = collect_hashtags_in_range(posts, start_time, end_time) if not hashtags_count: result.append([]) continue # Use a heap to find the top k elements top_hashtags = nlargest(k, hashtags_count.items(), key=lambda x: (x[1], -ord(x[0][0]))) top_hashtags = sorted(top_hashtags, key=lambda x: (-x[1], x[0])) # Extract only the hashtags from the tuples result.append([hashtag for hashtag, count in top_hashtags]) return result"},{"question":"Given a rectangular matrix of size N x M, each element in the matrix either contains a 0 or a 1. You need to find the row with the maximum number of 1s. If there are multiple rows with the same maximum number of 1s, return the index of the smallest row. Indices are 0-based. Input: The first line contains two integers N and M, the dimensions of the matrix. Each of the next N lines contains M integers (either 0 or 1) separated by space. Output: Print a single integer representing the index of the row with the most number of 1s. Constraints: 1 ≤ N, M ≤ 1000 SAMPLE INPUT 4 4 0 1 1 1 0 0 1 1 1 1 1 0 0 0 0 0 SAMPLE OUTPUT 0 Explanation In the given input, the first row contains three 1s, which is the maximum among all rows. Thus, the output is 0.","solution":"def row_with_max_ones(matrix): Finds the row index with the maximum number of 1s in the given binary matrix. If multiple rows have the same number of maximum 1s, returns the smallest row index. Parameters: matrix (List[List[int]]): The binary matrix Returns: int: The row index with the maximum number of 1s max_ones_count = -1 row_index_with_max_ones = -1 for i in range(len(matrix)): ones_count = sum(matrix[i]) if ones_count > max_ones_count: max_ones_count = ones_count row_index_with_max_ones = i return row_index_with_max_ones def read_input_and_find_row_max_ones(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) matrix = [] index = 2 for i in range(N): row = list(map(int, data[index:index+M])) matrix.append(row) index += M return row_with_max_ones(matrix) # Example usage if __name__ == \\"__main__\\": result = read_input_and_find_row_max_ones() print(result)"},{"question":"You\'re responsible for developing a system to manage a fleet of electric scooters in a city. Each scooter has a unique ID, a current battery level (in percentage), and a status indicating whether it\'s currently being used or not. The system should be able to perform the following tasks: 1. Add a new scooter to the fleet. 2. Remove a scooter from the fleet. 3. Update the battery level of a scooter. 4. Change the status of a scooter (from \'in use\' to \'available\' or from \'available\' to \'in use\'). 5. Find the scooter with the lowest battery level that is still available. 6. List all scooters, sorted by their IDs in lexicographical order. Write a class `ElectricScooterFleet` to manage the above tasks. Here\'s the class interface: ```python class ElectricScooterFleet: def __init__(self): # Initializes an empty fleet of scooters pass def add_scooter(self, scooter_id: str, battery_level: int): # Adds a new scooter to the fleet pass def remove_scooter(self, scooter_id: str): # Removes a scooter from the fleet pass def update_battery(self, scooter_id: str, battery_level: int): # Updates the battery level of a specified scooter pass def change_status(self, scooter_id: str, status: str): # Changes the status of a specified scooter pass def find_lowest_battery(self) -> str: # Returns the ID of the available scooter with the lowest battery level pass def list_scooters(self) -> list: # Returns a list of scooters sorted by ID in lexicographical order pass ``` # Constraints: - The `scooter_id` is a string containing only alphanumeric characters, with a length between 1 and 10. - The `battery_level` is an integer between 0 and 100. - The `status` is either \\"in use\\" or \\"available\\". # Implementation Example: Add method implementations in the `ElectricScooterFleet` class to handle adding, removing, updating, changing status, finding the lowest battery available scooter, and listing all scooters. # Sample Input: ```python fleet = ElectricScooterFleet() # Adding scooters fleet.add_scooter(\'A123\', 50) fleet.add_scooter(\'B456\', 80) fleet.add_scooter(\'C789\', 20) # Updating battery levels fleet.update_battery(\'A123\', 40) # Changing the status of scooters fleet.change_status(\'C789\', \'in use\') fleet.change_status(\'A123\', \'available\') # Finding the scooter with the lowest battery print(fleet.find_lowest_battery()) # Output: A123 # Listing all scooters print(fleet.list_scooters()) # Output: [\'A123\', \'B456\', \'C789\'] # Removing a scooter fleet.remove_scooter(\'B456\') # Listing all scooters after removal print(fleet.list_scooters()) # Output: [\'A123\', \'C789\'] ``` # Sample Output: ``` A123 [\'A123\', \'B456\', \'C789\'] [\'A123\', \'C789\'] ```","solution":"class ElectricScooterFleet: def __init__(self): self.scooters = {} def add_scooter(self, scooter_id: str, battery_level: int): if scooter_id not in self.scooters: self.scooters[scooter_id] = { \'battery_level\': battery_level, \'status\': \'available\' } def remove_scooter(self, scooter_id: str): if scooter_id in self.scooters: del self.scooters[scooter_id] def update_battery(self, scooter_id: str, battery_level: int): if scooter_id in self.scooters: self.scooters[scooter_id][\'battery_level\'] = battery_level def change_status(self, scooter_id: str, status: str): if scooter_id in self.scooters and status in [\'in use\', \'available\']: self.scooters[scooter_id][\'status\'] = status def find_lowest_battery(self) -> str: lowest_battery_scooter = None lowest_battery = 101 # Higher than the maximum possible battery level for scooter_id, details in self.scooters.items(): if details[\'status\'] == \'available\' and details[\'battery_level\'] < lowest_battery: lowest_battery = details[\'battery_level\'] lowest_battery_scooter = scooter_id return lowest_battery_scooter def list_scooters(self) -> list: return sorted(self.scooters.keys())"},{"question":"A company is organizing a team-building exercise consisting of solving a chain reaction puzzle. Each employee has to trigger a reaction according to a specific rule: when an employee triggers a reaction, they cause other employees to react in a cascade. The reaction starts with a single employee and spreads according to predefined rules. Each employee is represented by a node in a directed graph, where an edge from node A to node B indicates that if employee A reacts, employee B will also react. The goal is to find the minimum number of initial reactions needed to make sure all employees have reacted. # Input - The first line contains two integers `n` and `m` (1 ≤ `n` ≤ 10^5, 0 ≤ `m` ≤ 10^5) — the number of employees (nodes) and the number of relationships (edges), respectively. - The next `m` lines each contain two integers `u` and `v` (1 ≤ `u`, `v` ≤ `n`), indicating a direct relationship where employee `u` causes employee `v` to react. # Output - Print a single integer — the minimum number of initial reactions needed to make sure all employees react. # Example Input ``` 4 3 1 2 2 3 4 2 ``` Output ``` 2 ``` Explanation In this example, triggering reactions in employees 1 and 4 ensures that all employees end up reacting. Employee 1 will cause 2 and subsequently 3 to react, while employee 4 will independently cause 2 to react again (although it\'s already reacted). Note There may be multiple unique minimum sets of initial reactions that achieve full coverage of all employees reacting. The required output is the size of any one of those sets. This problem tests graph traversal and understanding of strongly connected components, requiring knowledge of algorithms like Depth First Search (DFS) and Tarjan\'s algorithm.","solution":"def find_minimum_reactions(n, m, edges): from collections import defaultdict, deque def tarjans_scc(n, edges): index = 0 stack = [] lowlink = [-1] * n idx = [-1] * n on_stack = [False] * n SCCs = [] def strongconnect(node): nonlocal index idx[node] = index lowlink[node] = index index += 1 stack.append(node) on_stack[node] = True for neighbor in graph[node]: if idx[neighbor] == -1: strongconnect(neighbor) lowlink[node] = min(lowlink[node], lowlink[neighbor]) elif on_stack[neighbor]: lowlink[node] = min(lowlink[node], idx[neighbor]) if lowlink[node] == idx[node]: scc = [] while True: w = stack.pop() on_stack[w] = False scc.append(w) if w == node: break SCCs.append(scc) graph = defaultdict(list) for u, v in edges: graph[u - 1].append(v - 1) for node in range(n): if idx[node] == -1: strongconnect(node) return SCCs SCCs = tarjans_scc(n, edges) in_degree = [0] * len(SCCs) scc_index = [-1] * n for i, scc in enumerate(SCCs): for node in scc: scc_index[node] = i for u, v in edges: if scc_index[u - 1] != scc_index[v - 1]: in_degree[scc_index[v - 1]] += 1 no_incoming_sccs = sum(1 for x in in_degree if x == 0) return no_incoming_sccs"},{"question":"You are given a string consisting of lowercase English letters. You can perform two types of operations: 1. Select any two adjacent characters in the string and swap them at a cost of 1 coin. 2. Select any character in the string and increase its value to the next character in the alphabet at a cost of 1 coin. (\'z\' is followed by \'a\'). Your task is to make the string palindrome with the minimum cost possible. Recall that a string is a palindrome if it reads the same backward as forward. Input The input consists of a single string s (1 ≤ |s| ≤ 2000) consisting of lowercase English letters. Output Output a single integer — the minimum cost to make the string palindrome. Examples Input abc Output 2 Input abccba Output 0 Note In the first example, you can change the string \\"abc\\" to \\"aba\\" at a cost of 1 coin (replace \'c\' with \'a\'), then swap the first \'a\' and \'c\' at a cost of 1 coin, resulting in the palindrome \\"cba\\". In the second example, the string \\"abccba\\" is already a palindrome, so no cost is needed.","solution":"def min_cost_to_palindrome(s): Returns the minimum cost to make a string a palindrome. n = len(s) cost = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: cost += 1 return cost"},{"question":"This is a dynamic programming problem. You are provided with a list of integers, where each integer represents the maximum jump length from that position. Your task is to determine the minimum number of jumps required to reach the last index starting from the first index. An integer `n` is called the maximum jump length from position `i` if it allows you to move from index `i` to any index `i + j` where `0 <= j <= n`. You will implement a function `minJumps(arr)` that takes an array of positive integers as input and returns an integer representing the minimum number of jumps needed to reach the last index. If it is not possible to reach the last index, return -1. Your solution should have a time complexity of O(n) and a space complexity of O(1). Input An array of integers `arr` where 1 <= arr[i] <= 1000. Output An integer representing the minimum number of jumps needed to reach the last index, or -1 if not possible. Function Signature ```python def minJumps(arr: List[int]) -> int: ``` Examples ```python assert minJumps([2, 3, 1, 1, 4]) == 2 assert minJumps([2, 1, 0, 3]) == -1 assert minJumps([1, 1, 1, 1]) == 3 assert minJumps([6, 2, 4, 0, 5, 1, 1, 4, 2, 9]) == 2 ``` Explanation - In the first example, the optimal path is to jump 1 step to index 1 and then jump 3 steps to the last index (total two jumps). - In the second example, you cannot reach the last index because the zero value at index 2 does not allow further progress. - In the third example, you need a jump for each index since the maximum jump length at each index is 1. - In the fourth example, the optimal path is to jump 1 step to index 1 and then jump 6 steps to the last index (total two jumps).","solution":"from typing import List def minJumps(arr: List[int]) -> int: n = len(arr) if n == 1: return 0 if arr[0] == 0: return -1 maxReach = arr[0] steps = arr[0] jumps = 1 for i in range(1, n): if i == n - 1: return jumps maxReach = max(maxReach, i + arr[i]) steps -= 1 if steps == 0: jumps += 1 if i >= maxReach: return -1 steps = maxReach - i return -1"},{"question":"You are given an array of integers representing the prices of different fruits in a shop. Your goal is to identify all the subarrays of length exactly K and calculate the maximum sum of prices among these subarrays. Write a function that takes two inputs: 1. An integer array `prices` which contains the prices of the fruits. 2. An integer `K` representing the length of the subarrays. The function should return the maximum sum of prices found in any subarray of length K. Constraints * All values in input are integers. * 1 leq K leq length of prices array leq 100 * 1 leq prices[i] leq 1000 for all valid i Input Input is given from Standard Input in the following format: * An integer `n`, the number of elements in `prices`. * Next, `n` space-separated integers representing the prices array. * Finally, an integer `K`. Output Print the maximum sum of prices found in any subarray of length K. Examples Input 5 1 3 5 2 8 3 Output 15 Input 6 4 2 1 6 2 4 2 Output 8 Input 4 7 7 2 7 1 Output 7","solution":"def max_sum_subarray(prices, K): Returns the maximum sum of prices found in any subarray of length K. n = len(prices) if K > n: return 0 max_sum = -float(\'inf\') current_sum = 0 for i in range(K): current_sum += prices[i] max_sum = max(max_sum, current_sum) for i in range(K, n): current_sum = current_sum + prices[i] - prices[i - K] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"John has recently taken a job as a warehouse manager and is responsible for organizing packages on shelves. Each package is represented by a unique positive integer weight. John has a special rule for organizing: he wants to divide the packages into two groups in such a way that the absolute difference between the sum of the weights of the packages in the two groups is minimized. You are given the weights of n packages. Your task is to determine the minimum possible absolute difference between the sum of the weights of the two groups after dividing the packages. Input The first line of input contains a single integer n (1 ≤ n ≤ 100), the number of packages. The second line contains n integers, w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10^4), the weights of the packages. Output Output a single integer, the minimum possible absolute difference between the sums of the weights of the two groups. Examples Input 4 1 6 11 5 Output 1 Input 3 1 1 4 Output 2 Note In the first sample, John can divide the packages into two groups as follows: {1, 5, 6} and {11}. The sum of the weights in the first group is 12, and the sum of the weights in the second group is 11. The absolute difference is |12 - 11| = 1, which is the minimum possible. In the second sample, John can divide the packages into two groups as follows: {1, 1} and {4}. The sum of the weights in the first group is 2, and the sum of the weights in the second group is 4. The absolute difference is |2 - 4| = 2, which is the minimum possible.","solution":"def min_difference_partition(n, weights): Determine the minimum possible absolute difference between the sums of the weights of the two groups after dividing the packages. Args: n : int : number of packages. weights : list : list of weights of the packages. Returns: int : minimum possible absolute difference. total_sum = sum(weights) target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for weight in weights: for j in range(target, weight - 1, -1): dp[j] = dp[j] or dp[j - weight] for i in range(target, -1, -1): if dp[i]: return total_sum - 2 * i"},{"question":"In a completed university course, the students need their final grades calculated based on their scores in several assignments. The university has a peculiar grading policy whereby they drop the lowest score for each student and then take the average of the remaining scores to determine the final grade. Write a program that computes the final grade for each student based on this policy. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of students. The next n lines each contain the name of a student (a non-empty string of no more than 20 uppercase and/or lowercase Latin letters) followed by the list of integer scores (1 ≤ scores ≤ 100) the student received in their assignments. Each line will have at least two scores to ensure there is a score to drop. Output For each student, print their name followed by their final grade, rounded to the nearest integer. Examples Input 3 Alice 70 80 90 100 Bob 90 60 70 Charlie 100 90 80 70 Output Alice 90 Bob 80 Charlie 90","solution":"def calculate_final_grades(students_scores): final_grades = {} for student_scores in students_scores: name = student_scores[0] scores = list(map(int, student_scores[1:])) scores.remove(min(scores)) average_score = round(sum(scores) / len(scores)) final_grades[name] = average_score return final_grades def format_final_grades(final_grades): formatted_grades = [] for name, grade in final_grades.items(): formatted_grades.append(f\\"{name} {grade}\\") return formatted_grades def main_grading_system(student_data): students_scores = [line.split() for line in student_data] final_grades = calculate_final_grades(students_scores) return format_final_grades(final_grades)"},{"question":"You are given an array of integers `arr` and a target integer `target`. Your task is to find all unique combinations in `arr` where the integer numbers sum to `target`. Each number in `arr` may be used multiple times in the combination. The solution set must not contain duplicate combinations. You can return the combinations in any order. Input: - The first line contains an integer `t` (1 ≤ t ≤ 50) — the number of test cases. - For each test case: - The first line contains a single integer `n` (1 ≤ n ≤ 30) — the number of elements in `arr`. - The second line contains `n` space-separated integers, representing the elements of `arr[j]` (1 ≤ arr[j] ≤ 200). - The third line contains a single integer `target` (1 ≤ target ≤ 500). Output: For each test case, output the list of all unique combinations of `arr` where the numbers sum to `target`, in the format shown below. Example: Input: ``` 2 4 2 3 6 7 7 3 2 3 5 8 ``` Output: ``` [[2, 2, 3], [7]] [[2, 2, 2, 2], [2, 3, 3], [3, 5]] ``` Note: 1. The solution set must not contain duplicate combinations. 2. Numbers in the solution combination may be in any order. 3. You may use the same element from `arr` as many times as needed.","solution":"def find_combinations(arr, target): result = [] def backtrack(remain, combo, start): if remain == 0: result.append(list(combo)) return elif remain < 0: return for i in range(start, len(arr)): combo.append(arr[i]) backtrack(remain - arr[i], combo, i) combo.pop() arr.sort() backtrack(target, [], 0) return result def solve_multiple_cases(test_cases): results = [] for arr, target in test_cases: results.append(find_combinations(arr, target)) return results"},{"question":"A programming competition is being held, and the organizers need a system to quickly determine the ranking of the participants based on their scores. Each participant has a unique ID and submits their solutions, which are graded with a score. The ranking should be ordered in descending order of scores. If two participants have the same score, they should be ranked in ascending order of their IDs. Write a program that takes as input the number of participants and their respective scores, then outputs the participants\' IDs in the correct ranking order. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of participants. Each of the following n lines contains two space-separated integers: IDi (1 ≤ IDi ≤ 100) and scorei (1 ≤ scorei ≤ 100), representing the ID and score of the i-th participant. Output Output the IDs of the participants in the correct ranking order, one per line. Examples Input 4 3 95 1 85 2 85 4 90 Output 3 4 1 2 Input 3 2 75 1 90 3 85 Output 1 3 2","solution":"def rank_participants(n, scores): Returns the participant IDs in the correct ranking order. :param n: Number of participants :param scores: List of tuples where each tuple contains (ID, score) :return: List of participant IDs in the correct ranking order # Sort the participants first by score in descending order, then by ID in ascending order scores.sort(key=lambda x: (-x[1], x[0])) # Extract and return only the IDs in the required order return [id for id, score in scores]"},{"question":"You are given an array of integers representing the daily temperatures in a week. Your task is to find out how many days a person will have to wait until a warmer temperature for each day. If there is no future day with a warmer temperature, put 0 for that day. For example, given the list of temperatures *[73, 74, 75, 71, 69, 72, 76, 73]*, your output should be *[1, 1, 4, 2, 1, 1, 0, 0]*. Detailed explanation: - For day 1 (temperature 73), the person will wait 1 day to day 2 (temperature 74) for a warmer temperature. - For day 2 (temperature 74), the person will wait 1 day to day 3 (temperature 75). - For day 3 (temperature 75), the person will wait 4 days to day 7 (temperature 76). - For day 4 (temperature 71), the person will wait 2 days to day 6 (temperature 72). - For day 5 (temperature 69), the person will wait 1 day to day 6 (temperature 72). - For day 6 (temperature 72), the person will wait 1 day to day 7 (temperature 76). - For day 7 (temperature 76), there are no future days with a warmer temperature, so the output is 0. - For day 8 (temperature 73), there are no future days with a warmer temperature, so the output is 0. Implement a function **dailyTemperatures** that takes an array of integers as input and returns an array of integers as output. Input A single integer array of length n (1 ≤ n ≤ 10^5) where each element represents the temperature on that day. Each temperature value is between 30 and 100 inclusive. Output A single integer array of length n where each element represents the number of days to wait until a warmer temperature. If there is no future day with a warmer temperature, put 0. Example Input: [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] Note You can assume that temperatures are given only for a single week, so the length of the array will always be 7. This property makes it easier to handle the problem since we can use a stack as part of the solution to ensure each temperature is processed.","solution":"def dailyTemperatures(temperatures): Returns a list of days to wait until a warmer temperature for each day. If no future day has a warmer temperature, returns 0 for that day. n = len(temperatures) result = [0] * n stack = [] # This will store the indices of the temperatures array for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: j = stack.pop() result[j] = i - j stack.append(i) return result"},{"question":"In a dystopian city, there are n key locations connected by m one-way roads. Each road has a unique positive length. Scientists have recently discovered a way to teleport between these key locations using a series of teleportation gates. However, using a teleportation gate requires paying a fee based on the distance of the road it replaces. The city\'s council decided to implement a cost-effective travel route that allows any location to reach any other location, either by using the roads directly or by teleporting if it is cheaper. Therefore, they want to install teleportation gates only on the roads that reduce the overall travel cost. Your task is to determine if the roads form a strongly connected component (SCC) or not, and if not, return how many roads (at minimum) need to be bi-directional to make the city\'s road system into a SCC. A strongly connected component is a component in a directed graph where there is a path in each direction between each pair of vertices of the component. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100000) — the number of locations and the number of one-way roads. Each of the next m lines contains three integers u, v, and l (1 ≤ u, v ≤ n, 1 ≤ l ≤ 109) — indicating a one-way road from location u to location v with length l. Output If the given road system is already a strongly connected component, print \\"0\\". Otherwise, print the minimum number of roads that need to be made bi-directional to make the given road system into a strongly connected component. Example 1: Input 4 4 1 2 1 2 3 4 3 4 2 4 1 3 Output 0 Example 2: Input 4 3 1 2 1 2 3 4 3 4 2 Output 1 Explanation: One possible solution is to make the road from 4 to 1 bi-directional to ensure there is a path both ways between every pair of locations.","solution":"from collections import defaultdict, deque def min_edges_to_scc(n, m, roads): def bfs(start, adj_list): visited = [False] * (n + 1) queue = deque([start]) while queue: node = queue.popleft() if not visited[node]: visited[node] = True for neighbor in adj_list[node]: if not visited[neighbor]: queue.append(neighbor) return visited if n == 1: return 0 adj_list = defaultdict(list) rev_adj_list = defaultdict(list) for u, v, l in roads: adj_list[u].append(v) rev_adj_list[v].append(u) start = 1 visited_from_start = bfs(start, adj_list) all_reachable_from_start = all(visited_from_start[1:]) visited_from_start_rev = bfs(start, rev_adj_list) all_reachable_to_start = all(visited_from_start_rev[1:]) if all_reachable_from_start and all_reachable_to_start: return 0 return 1 def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) roads = [tuple(map(int, line.split())) for line in lines[1:]] return n, m, roads def main(input_str): n, m, roads = parse_input(input_str) result = min_edges_to_scc(n, m, roads) return str(result)"},{"question":"In a game development environment, you are tasked with creating an efficient collision detection system for simple 2D rectangular objects. You are given T test cases. For each test case, you will be provided with two rectangles. Each rectangle is defined by its bottom-left corner’s (x, y) coordinates, its width, and its height. Your task is to determine whether the two rectangles overlap. Two rectangles overlap if they share any common area; otherwise, they do not overlap. Input: The first line of input contains T, the number of test cases. Each of the next T lines contains 8 integers, representing two rectangles. The first four integers are the x and y coordinates of the bottom-left corner of the first rectangle, followed by its width and height. The next four integers are the same for the second rectangle. Output: For each test case, print \\"Yes\\" if the rectangles overlap, otherwise print \\"No\\". Constraints: 1 ≤ T ≤ 1000 0 ≤ x, y, width, height ≤ 10^4 Sample Input: 3 1 1 4 4 2 2 2 2 1 1 2 2 3 3 2 2 0 0 1 1 2 2 2 2 Sample Output: Yes No No Explanation: For the 1st case, the rectangles (1,1,4,4) and (2,2,2,2) overlap. For the 2nd case, the rectangles (1,1,2,2) and (3,3,2,2) do not overlap. For the 3rd case, the rectangles (0,0,1,1) and (2,2,2,2) do not overlap.","solution":"def are_rectangles_overlapping(x1, y1, w1, h1, x2, y2, w2, h2): Determines if two rectangles overlap. Each rectangle is defined by the coordinates of its bottom-left corner, its width and its height. (x1, y1) is the bottom-left corner of the first rectangle with width w1 and height h1. (x2, y2) is the bottom-left corner of the second rectangle with width w2 and height h2. Returns \'Yes\' if the rectangles overlap, otherwise \'No\'. if (x1 + w1 <= x2 or x2 + w2 <= x1 or y1 + h1 <= y2 or y2 + h2 <= y1): return \\"No\\" else: return \\"Yes\\" def process_test_cases(T, cases): results = [] for case in cases: x1, y1, w1, h1, x2, y2, w2, h2 = case results.append(are_rectangles_overlapping(x1, y1, w1, h1, x2, y2, w2, h2)) return results"},{"question":"# Problem Statement You are given a grid of `mxn` cells, where each cell contains either a 0 (empty) or a 1 (occupied). Your objective is to determine the size of the largest square sub-grid that contains only 1s. For example, consider the following grid: ``` 1 0 1 0 1 1 1 1 0 1 1 1 0 1 1 0 ``` In this grid, the largest square sub-grid that contains only 1s has size 2x2. Write a program that takes a grid as input and outputs the size of the largest square sub-grid containing only 1s. # Input - The first line contains two integers `m` and `n`, indicating the number of rows and columns in the grid, respectively. - The next `m` lines each contain `n` integers (either 0 or 1) separated by spaces, representing the grid. # Output - A single integer representing the size of the largest square sub-grid containing only 1s. # Constraints - `1 ≤ m, n ≤ 1000` - Grid elements are either 0 or 1. # Example Example 1 Input: ``` 4 4 1 0 1 0 1 1 1 1 0 1 1 1 0 1 1 0 ``` Output: ``` 2 ``` Example 2 Input: ``` 3 3 1 1 1 1 1 1 1 1 1 ``` Output: ``` 3 ```","solution":"def largest_square_subgrid_size(grid): if not grid: return 0 m = len(grid) n = len(grid[0]) # Initializing a 2D dp array with 0 values dp = [[0] * n for _ in range(m)] max_size = 0 for i in range(m): for j in range(n): if grid[i][j] == 1: if i == 0 or j == 0: # First row or first column dp[i][j] = 1 else: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 max_size = max(max_size, dp[i][j]) return max_size def parse_input(input_str): lines = input_str.strip().split(\'n\') m, n = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return m, n, grid"},{"question":"A developer needs to create an application that manages a set of servers. Each server is identified by a unique ID and has a predefined capacity indicating the number of tasks it can handle concurrently. Task assignments to servers follow a specific rule: tasks are assigned in a round-robin fashion among all servers, starting from the server with the lowest ID number. Given a list of servers and their capacities, as well as a list of incoming tasks, simulate the process of assigning tasks to servers. Determine the final number of tasks assigned to each server. Input The first line contains the number of servers S. The next S lines each contain two integers ID and capacity representing the ID and capacity of each server. The next line contains an integer T, representing the number of tasks. The following T lines contain a single integer each, indicating the IDs of the tasks in the order they arrive. Output For each server, output its ID followed by the number of tasks assigned to it in the order of their IDs. Constraints 1 ≤ S ≤ 10^3 1 ≤ ID ≤ 10^5 1 ≤ capacity ≤ 10^5 1 ≤ T ≤ 10^5 SAMPLE INPUT 3 101 3 102 2 103 1 5 1 2 3 4 5 SAMPLE OUTPUT 101 2 102 2 103 1","solution":"def assign_tasks_to_servers(server_data, tasks): # Sort the servers by ID servers = sorted(server_data, key=lambda x: x[0]) # Initialize task count for each server ID task_counts = {server_id: 0 for server_id, _ in servers} # Initialize current server index and track the total servers count current_server_index = 0 server_count = len(servers) # Iterate through tasks and assign them in round-robin fashion for task in tasks: # Find the current server server_id, capacity = servers[current_server_index] # Assign the task to the current server task_counts[server_id] += 1 # Move to the next server current_server_index = (current_server_index + 1) % server_count # Prepare the result as a list of tuples and sort by server ID result = [(server_id, task_counts[server_id]) for server_id, _ in servers] return result"},{"question":"Problem Description Bob loves playing with sequences of numbers and finding interesting properties in them. This time, he\'s interested in finding the \\"Balanced Index\\" of an array. The Balanced Index is defined as the index where the sum of the elements to the left is equal to the sum of the elements to the right. Write a function that takes an array of integers as input and returns the Balanced Index if it exists. If no such index exists, return -1. Input Format Input consists of a single line containing a list of integers separated by commas. Output Format Output a single integer - the Balanced Index of the array, or -1 if there is no such index. Constraints 1 ≤ length of array ≤ 1000 -1000 ≤ element of array ≤ 1000 SAMPLE INPUT 1, 7, 3, 6, 5, 6 SAMPLE OUTPUT 3","solution":"def find_balanced_index(arr): Returns the Balanced Index where the sum of the elements to the left is equal to the sum of the elements to the right. If no such index exists, returns -1. total_sum = sum(arr) left_sum = 0 for i in range(len(arr)): # right_sum is total_sum minus left_sum minus the current element right_sum = total_sum - left_sum - arr[i] if left_sum == right_sum: return i left_sum += arr[i] return -1"},{"question":"You are given a list of integers and a target value. Determine if there exists a subset of the given list with a sum equal to the target value. If such a subset exists, print \\"YES\\"; otherwise, print \\"NO\\". Input: The first line contains two integers n and k (1 ≤ n ≤ 20, -10^3 ≤ k ≤ 10^3) — the number of integers in the list and the target value. The second line contains n integers a[i] (-10^3 ≤ a[i] ≤ 10^3) — the integers in the list. Output: Output \\"YES\\" if there exists a subset of the given list with a sum equal to the target value. Otherwise, output \\"NO\\". Examples: Input: 4 5 1 2 3 4 Output: YES Input: 3 8 1 5 6 Output: NO Input: 6 -3 1 -2 3 -4 5 -6 Output: YES Note: In the first example, the subset {1, 4} or {2, 3} has a sum of 5. In the second example, there is no subset that sums up to 8. In the third example, the subset {-2, -1} or {-6, 3} has a sum of -3.","solution":"def subset_sum_exists(n, k, a): from itertools import combinations # Check all possible subsets for r in range(1, n + 1): for subset in combinations(a, r): if sum(subset) == k: return \\"YES\\" return \\"NO\\" # Example usage print(subset_sum_exists(4, 5, [1, 2, 3, 4])) # Output should be \\"YES\\" print(subset_sum_exists(3, 8, [1, 5, 6])) # Output should be \\"NO\\" print(subset_sum_exists(6, -3, [1, -2, 3, -4, 5, -6])) # Output should be \\"YES\\""},{"question":"A company manages a hierarchical structure of employees and their subordinates. The hierarchy is represented using a text file where each line contains the name of an employee. The first line contains the name of the CEO, and each subsequent line is indented to signify that the employee is a direct subordinate of the previous less indented employee. Here is an example of such a text file: Alice Bob Carol Dave Eve Frank Grace In the above example, Alice is the CEO. Bob and Eve are direct subordinates of Alice. Carol and Dave are direct subordinates of Bob, and so on. For the company\'s internal assessment, it is necessary to verify certain hierarchical relationships among the employees as described in the hierarchy file. Given multiple sets of hierarchies and respective statements, your task is to evaluate whether each statement is true or false based on the given hierarchy. Input Each input dataset starts with two integers n (0 < n < 1000) and m (0 < m < 1000), where n represents the number of employees in the hierarchy, and m represents the number of statements. The next n lines contain the names of the employees, structured according to their hierarchy as described above. Following these lines are m statements in the format X is a direct subordinate of Y or X is a superior of Y or X is a colleague of Y, where X and Y are employee names from the hierarchy. The input terminates with two zeros. - X is a direct subordinate of Y: X reports directly to Y. - X is a superior of Y: X is a higher-up in the hierarchy chain of Y. - X is a colleague of Y: X and Y report to the same immediate superior. Output For each statement, your program should output True or False based on the validity of the statement within the given hierarchy. Each output line should contain either True or False with a capital first letter. Separate outputs of different datasets with an empty line. Example Input 7 5 Alice Bob Carol Dave Eve Frank Grace Carol is a direct subordinate of Bob. Grace is a superior of Frank. Dave is a colleague of Carol. Frank is a colleague of Bob. Eve is a superior of Dave. 2 1 John Emily Emily is a direct subordinate of John. 0 0 Output True False True False False True","solution":"def process_hierarchy(n, m, hierarchy_lines, statements): hierarchy = {} superior_map = {} colleague_map = {} current_depth = -1 parent_stack = [] for line in hierarchy_lines: depth = 0 while depth < len(line) and line[depth] == \' \': depth += 1 name = line[depth:].strip() # Pop out levels deeper than current if depth > current_depth: parent_stack.append((name, depth)) else: while parent_stack and parent_stack[-1][1] >= depth: parent_stack.pop() parent_stack.append((name, depth)) if parent_stack and len(parent_stack) > 1: superior = parent_stack[-2][0] if superior not in hierarchy: hierarchy[superior] = [] hierarchy[superior].append(name) superior_map[name] = superior current_depth = depth for sup, subs in hierarchy.items(): for i in range(len(subs)): for j in range(i+1, len(subs)): colleague_map[(subs[i], subs[j])] = True colleague_map[(subs[j], subs[i])] = True results = [] for statement in statements: if \'is a direct subordinate of\' in statement: x, y = statement.split(\' is a direct subordinate of \') x, y = x.strip(\'.\'), y.strip(\'.\') if y in hierarchy and x in hierarchy[y]: results.append(True) else: results.append(False) elif \'is a superior of\' in statement: x, y = statement.split(\' is a superior of \') x, y = x.strip(\'.\'), y.strip(\'.\') if y in superior_map: sup = y found = False while sup in superior_map: sup = superior_map[sup] if sup == x: found = True break if found: results.append(True) else: results.append(False) else: results.append(False) elif \'is a colleague of\' in statement: x, y = statement.split(\' is a colleague of \') x, y = x.strip(\'.\'), y.strip(\'.\') if x in superior_map and y in superior_map and (x, y) in colleague_map: results.append(True) else: results.append(False) return results def evaluate_all_hierarchies(input_data): index = 0 output_lines = [] while index < len(input_data): n, m = map(int, input_data[index].strip().split()) if n == 0 and m == 0: break index += 1 hierarchy_lines = [] for _ in range(n): hierarchy_lines.append(input_data[index].rstrip()) index += 1 statements = [] for _ in range(m): statements.append(input_data[index].strip()) index += 1 results = process_hierarchy(n, m, hierarchy_lines, statements) for result in results: output_lines.append(\\"True\\" if result else \\"False\\") output_lines.append(\\"\\") return \\"n\\".join(output_lines).strip()"},{"question":"Leonid loves creating unique strings by rearranging characters. Given an initial string s, he wants to create a new string t such that: 1. All characters in t are unique. 2. The order of characters in t should follow their first occurrence order in s. 3. t should be lexicographically smallest among all possible valid strings that can be formed with the above conditions. Help Leonid find the string t. Input The first line contains a string s (1 ≤ |s| ≤ 1000) consisting of lowercase Latin letters. Output Print the lexicographically smallest valid string t. Examples Input abcabc Output abc Input cbacdcbc Output acdb Note: In the second example, \\"acdb\\" is selected because you take the characters in the order of their first appearance (c -> a -> d -> b), and no earlier lexicographic order can keep all characters unique while maintaining their first occurrence order.","solution":"def smallest_unique_string(s): Given a string s, generate the lexicographically smallest unique character string t, preserving the order of their first occurrences. last_occurrence = {} for i, char in enumerate(s): last_occurrence[char] = i stack = [] in_stack = set() for i, char in enumerate(s): if char in in_stack: continue while stack and char < stack[-1] and last_occurrence[stack[-1]] > i: in_stack.remove(stack.pop()) stack.append(char) in_stack.add(char) return \'\'.join(stack)"},{"question":"You are organizing a game tournament with \'n\' participants. Participants are paired and the winner of each pair advances to the next round. If the number of participants in a round is odd, one participant will automatically advance to the next round without a match. Write a program to simulate the tournament and determine how many matches are needed to find the ultimate winner. Input The input consists of a single integer n, the number of participants (1 ≤ n ≤ 10^6). Output Output a single integer, the total number of matches needed to determine the winner. Examples Input 8 Output 7 Input 13 Output 12 Input 1 Output 0","solution":"def tournament_matches(n): Calculate the total number of matches needed to determine the winner. :param n: int, number of participants :return: int, number of matches matches = 0 while n > 1: matches += n // 2 n = (n // 2) + (n % 2) return matches"},{"question":"The Chameleon FizzBuzz Challenge: You are tasked with creating a function that generates a series of outputs based on the rules of a modified FizzBuzz challenge. The input will be an integer `n`, representing the length of the series, and a list of tuples, where each tuple contains two elements: a divisor `d` and a string `s`. Your function should output the series from 1 to `n` inclusive as follows: - For each integer `i` in the series: - If `i` is divisible by any number `d` in the list of tuples, concatenate the respective string `s` for each divisor. - If `i` is not divisible by any of the numbers in the list, return the integer `i` itself as a string. Constraints * 1 ≤ n ≤ 10^6 * 1 ≤ length of tuples list ≤ 100 * 1 ≤ d ≤ 100 * 1 ≤ length of any string ≤ 100 Input The input will be provided as follows: 1. The first line contains the integer `n`. 2. The second line contains an integer `k`, the number of tuples. 3. The next `k` lines each contain a tuple consisting of an integer `d` and a string `s`. Output The function should output the series described as a list of strings. Examples Input 15 3 3 Fizz 5 Buzz 7 Woof Output \\"1\\", \\"2\\", \\"Fizz\\", \\"4\\", \\"Buzz\\", \\"Fizz\\", \\"Woof\\", \\"8\\", \\"Fizz\\", \\"Buzz\\", \\"11\\", \\"Fizz\\", \\"13\\", \\"Woof\\", \\"FizzBuzz\\" Input 10 2 2 Prime 3 Cube Output \\"1\\", \\"PrimeCube\\", \\"Prime\\", \\"Prime\\", \\"5\\", \\"PrimeCube\\", \\"Prime\\", \\"PrimeCube\\", \\"9\\", \\"Prime\\"","solution":"def chameleon_fizzbuzz(n, rules): result = [] for i in range(1, n + 1): output = \'\' for d, s in rules: if i % d == 0: output += s if not output: output = str(i) result.append(output) return result"},{"question":"You are given a string s consisting of lowercase English letters, and another string p which is a permutation of some or all of the letters in s. Your task is to find all the start indices of p\'s permutations in s. Input The first line contains the string s (1 ≤ |s| ≤ 10^4), and the second line contains the string p (1 ≤ |p| ≤ 10^3). Output Print the list of all start indices separated by spaces. If no such index exists, print an empty list. Examples Input cbaebabacd abc Output 0 6 Note The example string \\"cbaebabacd\\" contains the string \\"abc\\" at indices 0 and 6.","solution":"def find_permutation_indices(s, p): Finds all starting indices of p\'s permutations in s. from collections import Counter len_s, len_p = len(s), len(p) if len_p > len_s: return [] result = [] p_counter = Counter(p) s_counter = Counter(s[:len_p - 1]) # Initialize the counter for the first window in s for i in range(len_p - 1, len_s): s_counter[s[i]] += 1 # include a new character in the window # Check if current window matches with the permutation of p if s_counter == p_counter: result.append(i - len_p + 1) # remove the leftmost character of the window left_char = s[i - len_p + 1] s_counter[left_char] -= 1 if s_counter[left_char] == 0: del s_counter[left_char] return result"},{"question":"POINTS - 30 Given an array of integers, write a function to find the longest contiguous subarray that is strictly increasing. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with an integer N denoting the length of the array, followed by N space-separated integers representing the elements of the array. Output For each test case, output a single line containing the length of the longest contiguous subarray that is strictly increasing. Constraints 1<=T<=100, 1<=N<=1000 -1000<=A[i]<=1000 Example Input: 2 5 1 2 1 2 3 6 1 2 3 4 5 4 Output: 2 5","solution":"def longest_increasing_subarray_length(arr): Returns the length of the longest contiguous subarray that is strictly increasing. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length def process_test_cases(T, test_cases): results = [] for test_case in test_cases: N, arr = test_case results.append(longest_increasing_subarray_length(arr)) return results"},{"question":"Santa Claus has a list of children and their respective wishlists for Christmas. He wants to ensure that each child gets as many wishes granted as possible. However, Santa has a limited number of each gift available. Santa needs a program to help him determine the maximum number of wishes he can grant while ensuring no child gets more than one of each specific gift. Each gift has a unique ID and a maximum quantity available. A child\'s wishlist contains a set of gift IDs they want for Christmas. A gift can only be granted if it is available in stock and if it has not been given to the same child more than once. Write a program to determine the maximum number of wishes granted. For simplicity, assume that Santa has enough resources to handle the logistics, and the only constraints are the gift quantities and unique assignments per child. **Input:** The first line contains integers `c` and `g` where `c` is the number of children and `g` is the number of different gifts available. (1 ≤ c, g ≤ 1000) The next `c` lines each describe a child\'s wishlist. Each line starts with an integer `k` (0 ≤ k ≤ g), the number of wishes in the child\'s list, followed by `k` space-separated integers representing the gift IDs. The next line contains `g` integers where each integer `a_i` (0 ≤ a_i ≤ 100) represents the quantity available for gift ID `i`. **Output:** Output one integer representing the maximum number of wishes that can be granted. **Example:** Input: ``` 3 5 3 1 2 3 2 2 3 1 1 2 2 1 1 0 ``` Output: ``` 4 ``` In this example: - There are 3 children and 5 different gifts. - The wishlists are: - Child 1: wishes for gifts 1, 2, 3 - Child 2: wishes for gifts 2, 3 - Child 3: wishes for gift 1 - The quantities available are: - Gift 1: 2 units - Gift 2: 1 unit - Gift 3: 1 unit - Gift 4: 0 units - Gift 5: 0 units The maximum number of wishes that can be granted is 4.","solution":"def max_wishes_granted(c, g, wishlists, quantities): granted_count = 0 gift_distribution = {i: 0 for i in range(1, g + 1)} # to keep track of each gift given for child in wishlists: for gift in child: if quantities[gift - 1] > 0 and gift_distribution[gift] < quantities[gift - 1]: granted_count += 1 gift_distribution[gift] += 1 return granted_count # Example usage: c = 3 g = 5 wishlists = [ [1, 2, 3], [2, 3], [1] ] quantities = [2, 1, 1, 0, 0] print(max_wishes_granted(c, g, wishlists, quantities)) # Should output 4"},{"question":"John is learning about string manipulations and pattern finding in strings. He encountered a problem while practicing and seeks your help to solve it. The problem is as follows: Given a string and a pattern, determine if the pattern appears as a subsequence in the string. A subsequence is derived from another string by deleting some or none of the characters without changing the order of the remaining characters. Input: The first line contains an integer T, the number of test cases. The next 2*T lines each contain a pair of strings S and P, where S is the main string and P is the pattern string. Output: For each test case, print \\"YES\\" if the pattern appears as a subsequence in the main string, otherwise print \\"NO\\" in a new line. Constraints: 1 ≤ T ≤ 500 1 ≤ |S|, |P| ≤ 1000 SAMPLE INPUT 2 coding assessment cdss interview preparation view SAMPLE OUTPUT YES YES","solution":"def is_subsequence(s, p): Determines if p is a subsequence of s. s_len, p_len = len(s), len(p) i, j = 0, 0 while i < s_len and j < p_len: if s[i] == p[j]: j += 1 i += 1 return j == p_len def solve_subsequence_problems(test_cases): Takes a list of (s, p) tuples and returns a list of \\"YES\\" or \\"NO\\" based on whether p is a subsequence of s for each tuple. results = [] for s, p in test_cases: if is_subsequence(s, p): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You have been hired to develop a software system for a library. One of the features of the system is to keep track of the currently available books and allow users to borrow or return books. Each book is uniquely identified by an ISBN number. The library imposes the following rules for borrowing books: 1. A user can borrow a book only if it is available in the library. 2. When a user borrows a book, it is removed from the available list of books. 3. When a user returns a book, it is added back to the list of available books. 4. Users can borrow and return multiple books at once. You need to implement a class `Library` which supports the following methods: 1. `__init__(self)` - Initializes the Library with an empty set of available books. 2. `add_books(self, books)` - Adds the given list of books (represented as ISBN numbers) to the library. Each book can appear multiple times in the list. 3. `borrow_books(self, books)` - Borrows the given list of books (represented as ISBN numbers) from the library. If any of the books are not available, the function should print \\"Book not available: {ISBN}\\" for each unavailable book and borrow only the available books. 4. `return_books(self, books)` - Returns the given list of books (represented as ISBN numbers) to the library. 5. `available_books(self)` - Returns the list of currently available books in no particular order. # Implementation Details: - You may assume that ISBNs are strings. - Use any appropriate data structures to manage the library\'s inventory efficiently. # Example: ```python library = Library() library.add_books([\'978-3-16-148410-0\', \'978-3-16-148410-1\', \'978-3-16-148410-2\']) library.borrow_books([\'978-3-16-148410-0\', \'978-3-16-148410-3\']) # Output: Book not available: 978-3-16-148410-3 print(library.available_books()) # Output: [\'978-3-16-148410-1\', \'978-3-16-148410-2\'] library.return_books([\'978-3-16-148410-0\']) print(library.available_books()) # Output: [\'978-3-16-148410-1\', \'978-3-16-148410-2\', \'978-3-16-148410-0\'] ``` Write the implementation for the `Library` class.","solution":"class Library: def __init__(self): Initializes the Library with an empty set of available books. self.available_books_set = set() def add_books(self, books): Adds the given list of books (represented as ISBN numbers) to the library. Each book can appear multiple times in the list. self.available_books_set.update(books) def borrow_books(self, books): Borrows the given list of books (represented as ISBN numbers) from the library. If any of the books are not available, the function prints \\"Book not available: {ISBN}\\" for each unavailable book and borrows only the available books. for book in books: if book in self.available_books_set: self.available_books_set.remove(book) else: print(f\\"Book not available: {book}\\") def return_books(self, books): Returns the given list of books (represented as ISBN numbers) to the library. self.available_books_set.update(books) def available_books(self): Returns the list of currently available books in no particular order. return list(self.available_books_set)"},{"question":"You are given an array of integers. Your task is to find a contiguous subarray with the largest sum and return the sum. If there are multiple subarrays with the same largest sum, return the sum of the first one found. Define a function `maxSubarraySum(arr)` that takes an array of integers `arr` as input and returns the sum of the subarray with the largest sum. # INPUT - The first line contains an integer T, the number of test cases. - The following T lines each contain: - An integer n, the size of the array. - A space-separated list of n integers representing the array. # OUTPUT For each test case, print the sum of the contiguous subarray with the largest sum. # CONSTRAINTS - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 10^5 - -10^4 ≤ arr[i] ≤ 10^4 # SAMPLE INPUT 2 5 1 2 3 -2 5 4 -1 -2 -3 -4 # SAMPLE OUTPUT 9 -1","solution":"def maxSubarraySum(arr): Given an array arr, return the sum of the contiguous subarray with the largest sum. max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) if current_sum > max_sum: max_sum = current_sum return max_sum def process_input(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] results.append(maxSubarraySum(arr)) return results"},{"question":"You are organizing a treasure hunt event in a park, and there are several treasure boxes hidden at different locations. Each treasure box has a certain amount of gold in it. The challenge is that each participant can only carry a limited amount of weight, and each treasure box has a specific weight. Your task is to determine the maximum amount of gold a participant can collect without exceeding the weight limit they can carry. Write a program that calculates this maximum amount of gold. Input The input is given in the following format: n W wi1 go1 wi2 go2 :: wim gom The first line gives the total number of treasure boxes n (n ≤ 100), and the second line gives the maximum weight W (1 ≤ W ≤ 1000) that a participant can carry. The following n lines are given the weight wi and the amount of gold goi for each treasure box (1 ≤ wi, goi ≤ 100). Output Output the maximum amount of gold a participant can collect (integer) on one line. Example Input 4 10 2 10 3 14 7 15 5 7 Output 31 In this example, by selecting the treasure boxes with weights 2, 3, and 5, the participant can carry a total weight of 10 and collect a total of 10 + 14 + 7 = 31 gold units, which is the maximum possible amount.","solution":"def max_gold(n, W, treasures): dp = [0] * (W + 1) for weight, gold in treasures: for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + gold) return dp[W] def parse_input(input_string): lines = input_string.strip().split(\'n\') n = int(lines[0]) W = int(lines[1]) treasures = [tuple(map(int, line.split())) for line in lines[2:]] return n, W, treasures def main(input_string): n, W, treasures = parse_input(input_string) return max_gold(n, W, treasures)"},{"question":"You are managing a cinema with N movies to be screened. Each movie has a different popularity score and falls into one of two categories: International or Domestic. The schedule must be arranged as follows: 1. **Cinema 1** screens only International movies in descending order of their popularity scores. 2. **Cinema 2** screens only Domestic movies in descending order of their popularity scores. Print the names of the movies scheduled in each cinema. Constraints * 1 ≤ N ≤ 100 * Each movie name is a string of length between 1 and 50 (inclusive) consisting of English letters and/or digits. * Each movie has a unique popularity score, which is an integer between 1 and 100 (inclusive). * Movie categories are either \'International\' or \'Domestic\'. Input Input is given from Standard Input in the following format: ``` N movie_name_1 popularity_score_1 category_1 : movie_name_N popularity_score_N category_N ``` Output Print schedules for Cinema 1 and Cinema 2. First, list the movies scheduled for Cinema 1 (International movies), each on a new line. Then, list the movies scheduled for Cinema 2 (Domestic movies), each on a new line. If there are no movies for a cinema, print \\"No movies\\" for that cinema. Examples Input ``` 6 Inception 90 International Parasite 95 International Titanic 89 Domestic Avengers 99 International Up 85 Domestic Soul 88 Domestic ``` Output ``` Avengers Parasite Inception Titanic Soul Up ``` Input ``` 3 WonderWoman 75 Domestic Joker 85 International Frozen 95 Domestic ``` Output ``` Joker Frozen WonderWoman ```","solution":"def schedule_movies(N, movie_info): # Dictionaries to store movies with their popularity scores international_movies = [] domestic_movies = [] # Process each movie and categorize it for movie_detail in movie_info: movie_name, popularity_score, category = movie_detail.split() popularity_score = int(popularity_score) if category == \\"International\\": international_movies.append((popularity_score, movie_name)) elif category == \\"Domestic\\": domestic_movies.append((popularity_score, movie_name)) # Sort the movies by their popularity scores in descending order international_movies.sort(reverse=True, key=lambda x: x[0]) domestic_movies.sort(reverse=True, key=lambda x: x[0]) # Prepare the output lists cinema_1 = [movie[1] for movie in international_movies] cinema_2 = [movie[1] for movie in domestic_movies] return cinema_1, cinema_2 # Helper function to handle input-output conversion def handle_input_output(): import sys input = sys.stdin.read data = input().strip().split(\'n\') N = int(data[0]) movie_info = data[1:] cinema_1, cinema_2 = schedule_movies(N, movie_info) if cinema_1: for movie in cinema_1: print(movie) else: print(\\"No movies\\") if cinema_2: for movie in cinema_2: print(movie) else: print(\\"No movies\\")"},{"question":"A small village is organizing a traditional marathon event, which will take place in a straight line track. There are `n` runners participating in the marathon, each with a unique bib number. The runners start at different positions along the track and run at different constant speeds. Your task is to find out the minimum number of photo checkpoints needed along the track so that each runner is captured at least once. Each runner is characterized by their initial starting position and their running speed. A photo checkpoint captures all runners currently at that position. Input The first line of input contains a single integer `n` (1 ≤ n ≤ 1000) — the number of runners. The next `n` lines each contain two integers `si` and `vi` (0 ≤ si ≤ 100000, 1 ≤ vi ≤ 100), where `si` is the initial position of the i-th runner, and `vi` is the running speed of the i-th runner. Output Output a single integer — the minimum number of photo checkpoints to capture all runners at least once. Example Input: 3 5 5 10 2 15 7 Output: 3 Input: 4 0 4 8 3 13 2 6 5 Output: 4 Note For the first example, the minimum number of photo checkpoints is 3, because each runner moves at a different speed and would need to be captured at their unique positions. For the second example, despite different positions and speeds for each runner, each checkpoint must account for all distinct positions and times runners will be at a given point.","solution":"def min_checkpoints(n, runners): Returns the minimum number of photo checkpoints needed so that each runner is captured at least once. :param n: Number of runners. :param runners: List of tuples containing (si, vi) for each runner. :return: Minimum number of checkpoints. return n"},{"question":"There are n islands connected by m bridges. Each bridge has a length and a toll required to cross it. Brian wants to travel from island 1 to island n and is willing to take the shortest path in terms of the total distance. However, he must minimize the toll cost that he would have to pay. Given the number of islands, bridges, and the details of each bridge, help Brian find the minimum toll cost required to travel from island 1 to island n while ensuring the distance traveled is as short as possible. Input The first line contains two integers n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000) — the number of islands and the number of bridges, respectively. The following m lines each contain three integers u, v, and l, t (1 ≤ u, v ≤ n, 1 ≤ l ≤ 1000, 0 ≤ t ≤ 100) — representing a bridge from island u to island v, the length of the bridge, and the toll required to cross it. Output Print a single integer: the minimum toll cost for Brian to travel from island 1 to island n with the shortest path possible. Examples Input 3 3 1 2 4 10 2 3 2 5 1 3 10 20 Output 15 Input 4 4 1 2 5 5 2 3 5 0 3 4 5 5 1 4 15 30 Output 10 Note In the first example, the shortest path goes through islands 1 → 2 → 3 with a total length of 4 + 2 = 6 and a minimum toll cost of 10 + 5 = 15. In the second example, the shortest path is through islands 1 → 4 with a length of 15, but the toll cost is too high, so the optimal path is 1 → 2 → 3 → 4 with a total length of 15 and a toll cost of 5 + 0 + 5 = 10.","solution":"import heapq def find_min_toll(n, m, bridges): Finds the minimum toll cost required to travel from island 1 to island n while ensuring the distance traveled is the shortest. :param n: Number of islands :param m: Number of bridges :param bridges: List of tuple (u, v, l, t) where u and v are islands connected, l is the length of the bridge, t is the toll cost :return: Minimum toll cost for the shortest path from island 1 to island n graph = {i: [] for i in range(1, n + 1)} for u, v, l, t in bridges: graph[u].append((v, l, t)) graph[v].append((u, l, t)) pq = [(0, 0, 1)] # (total_length, total_toll, node) dist = {i: float(\'inf\') for i in range(1, n + 1)} toll = {i: float(\'inf\') for i in range(1, n + 1)} dist[1] = 0 toll[1] = 0 while pq: curr_length, curr_toll, u = heapq.heappop(pq) if u == n: return curr_toll for v, l, t in graph[u]: new_length = curr_length + l new_toll = curr_toll + t if new_length < dist[v] or (new_length == dist[v] and new_toll < toll[v]): dist[v] = new_length toll[v] = new_toll heapq.heappush(pq, (new_length, new_toll, v)) return -1"},{"question":"You are given a sequence of positive integers. You can perform the following operation any number of times: remove any two consecutive elements a and b from the sequence and insert the result of a + b back into the sequence. Determine the minimum possible value of the last remaining element after performing the above operations. Constraints * 1 ≤ length of sequence ≤ 1000 * 1 ≤ value of each element ≤ 1000 Input The input is given from Standard Input in the following format: n a_1 a_2 ... a_n Output Print the minimum possible value of the last remaining element. Examples Input 4 1 2 3 4 Output 10 Input 3 5 2 1 Output 8 Input 5 4 4 4 4 4 Output 20","solution":"def min_final_value(n, sequence): Function to determine the minimum possible value of the last remaining element after repeatedly combining any two consecutive elements in the sequence. return sum(sequence)"},{"question":"Dave is a photographer and loves taking photos of different landscapes. He has a special way of organizing his photos: he arranges them in a grid of size m x n. Due to a limitation in his photo album software, he needs each row and each column of the grid to contain unique photos — meaning no duplicate photo can appear within the same row or column. You are given an integer matrix grid of size m x n representing the photo IDs in the grid. Each photo ID is a positive integer. Your task is to write a function that verifies whether the grid satisfies Dave\'s unique photo requirement. Specifically, check if each row and each column contains only unique photo IDs. Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the grid. The next m lines each contain n integers representing the photo IDs in the grid. Output Print \\"YES\\" if the grid satisfies Dave\'s unique photo requirement, otherwise print \\"NO\\". Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output YES Input 3 3 1 2 3 4 5 6 1 8 9 Output NO Input 2 4 1 2 3 4 5 6 7 3 Output NO","solution":"def is_unique_photos(grid): m = len(grid) if m == 0: return \\"YES\\" n = len(grid[0]) # Check each row for duplicates for row in grid: if len(set(row)) != len(row): return \\"NO\\" # Check each column for duplicates for col in range(n): col_values = [grid[row][col] for row in range(m)] if len(set(col_values)) != len(col_values): return \\"NO\\" return \\"YES\\""},{"question":"You are given a string `s` consisting of alphanumeric characters and parentheses. Your task is to determine if the parentheses in the string are balanced. The parentheses are considered balanced if: 1. Every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. 2. The parentheses are properly nested. Constraints: - The length of the string will not exceed 1000 characters. - The string may contain other alphanumeric characters, but you only need to consider the matching of the parentheses. Input: A single string `s`. Output: Print \\"Balanced\\" if the parentheses are balanced, otherwise print \\"Unbalanced\\". Examples: Input: ``` (a+b*(c-d)) ``` Output: ``` Balanced ``` Input: ``` (a+b*(c-d) ``` Output: ``` Unbalanced ``` Input: ``` abc(d)e)f ``` Output: ``` Unbalanced ``` Input: ``` (((()))) ``` Output: ``` Balanced ```","solution":"def is_balanced(s): Determines if the parentheses in the string are balanced. Args: s (str): Input string containing alphanumeric characters and parentheses. Returns: str: \\"Balanced\\" if the parentheses are balanced, otherwise \\"Unbalanced\\". stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"Unbalanced\\" stack.pop() if not stack: return \\"Balanced\\" else: return \\"Unbalanced\\""},{"question":"Dr. Widget is working on a project to monitor power consumption of various devices in a smart home setup. Each device has a unique ID and a power consumption rating in watts. Dr. Widget wants to periodically calculate the total power consumption of all devices, but she also wants to track the highest power-consuming device. Write a program that helps Dr. Widget manage this task. The program should handle multiple queries where each query can be one of the following: 1. Add a new device with a unique ID and its power consumption. 2. Remove a device by its ID. 3. Query the total power consumption of all devices. 4. Query the device ID with the highest power consumption. Input format: The first line contains an integer Q denoting the number of queries. Each of the next Q lines contains a query in one of the following formats: - For adding a device: `ADD device_id power_consumption` - For removing a device: `REMOVE device_id` - For total power consumption query: `TOTAL` - For highest power-consuming device query: `MAX` Output format: For each query of type `TOTAL` or `MAX`, output the result on a new line. If there are no devices when a `MAX` query is issued, output `-1`. Constraints: 1 ≤ Q ≤ 10000 1 ≤ device_id ≤ 1000000 1 ≤ power_consumption ≤ 10^4 SAMPLE INPUT 7 ADD 101 200 ADD 102 150 TOTAL ADD 103 300 MAX REMOVE 103 MAX SAMPLE OUTPUT 350 103 101","solution":"class SmartHome: def __init__(self): self.devices = {} def add_device(self, device_id, power_consumption): self.devices[device_id] = power_consumption def remove_device(self, device_id): if device_id in self.devices: del self.devices[device_id] def total_power(self): return sum(self.devices.values()) def max_power_device(self): if not self.devices: return -1 return max(self.devices, key=self.devices.get) def handle_queries(queries): smart_home = SmartHome() results = [] for query in queries: parts = query.split() if parts[0] == \'ADD\': device_id = int(parts[1]) power_consumption = int(parts[2]) smart_home.add_device(device_id, power_consumption) elif parts[0] == \'REMOVE\': device_id = int(parts[1]) smart_home.remove_device(device_id) elif parts[0] == \'TOTAL\': results.append(smart_home.total_power()) elif parts[0] == \'MAX\': results.append(smart_home.max_power_device()) return results"},{"question":"You are given a list of integers where every integer appears exactly three times, except for one integer which appears exactly once. Write a program to find the integer that appears only once. Input Format The input consists of several test cases. The first line of the input file contains a positive integer T, the number of test cases. Then, T test cases follow. Each test case consists of two lines: - The first line contains a positive integer N, the number of integers in the list. - The second line contains N integers separated by spaces. Output Format The output must contain exactly T lines, each line containing the integer that appears exactly once in the respective list. Constraints 1 ≤ T ≤ 100 4 ≤ N ≤ 1000 (N is always of the form 3x + 1 for some integer x) -10^6 ≤ integer in list ≤ 10^6 SAMPLE INPUT 2 7 2 2 3 3 3 2 4 10 0 1 0 1 0 1 -3 -3 -3 7 SAMPLE OUTPUT 4 7","solution":"def find_unique_integer(test_cases): result = [] for case in test_cases: N, nums = case num_count = {} for num in nums: if num in num_count: num_count[num] += 1 else: num_count[num] = 1 for num in num_count: if num_count[num] == 1: result.append(num) break return result def process_input(T, cases): test_cases = [] for i in range(T): N = cases[i*2] nums = list(map(int, cases[i*2 + 1].split())) test_cases.append((N, nums)) return find_unique_integer(test_cases)"},{"question":"You are working on a project that involves processing a large number of logs generated by a web server. Each log entry contains a timestamp and a URL accessed by a user. Your task is to determine the most frequently accessed URL within a specified time window. A log entry is a string in the format “YYYY-MM-DD HH:MM:SS URL”. For example, the log entry “2023-05-01 12:34:56 /index.html” indicates that the URL “/index.html” was accessed at the timestamp “2023-05-01 12:34:56”. Given a list of log entries and a time window specified by a start time and an end time, you need to find the most frequently accessed URL within that time window. If there is a tie (i.e., multiple URLs have the same highest frequency), return the lexicographically smallest URL. Input - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of log entries. - The next n lines each contain a log entry in the format described above. - The next two lines contain the start time and end time of the time window, respectively, in the format “YYYY-MM-DD HH:MM:SS”. Output Print the most frequently accessed URL within the specified time window. If there is a tie, print the lexicographically smallest URL among those with the highest frequency. Examples Input 6 2023-05-01 09:00:00 /home 2023-05-01 09:01:00 /index.html 2023-05-01 09:02:00 /contact 2023-05-01 09:03:00 /index.html 2023-05-01 09:04:00 /home 2023-05-01 09:05:00 /home 2023-05-01 09:00:00 2023-05-01 09:05:00 Output /home Input 5 2023-05-01 10:00:00 /about 2023-05-01 10:01:00 /home 2023-05-01 10:02:00 /about 2023-05-01 10:03:00 /home 2023-05-01 10:04:00 /index.html 2023-05-01 10:00:00 2023-05-01 10:03:00 Output /about","solution":"from datetime import datetime def most_frequent_url(log_entries, start_time, end_time): Determines the most frequently accessed URL within the specified time window. Parameters: log_entries (list): List of log entry strings in the format \\"YYYY-MM-DD HH:MM:SS URL\\". start_time (str): Start time of the time window in the format \\"YYYY-MM-DD HH:MM:SS\\". end_time (str): End time of the time window in the format \\"YYYY-MM-DD HH:MM:SS\\". Returns: str: The most frequently accessed URL within the specified time window. # Convert start and end times to datetime objects start_time = datetime.strptime(start_time, \\"%Y-%m-%d %H:%M:%S\\") end_time = datetime.strptime(end_time, \\"%Y-%m-%d %H:%M:%S\\") # Dictionary to count URL accesses url_counts = {} for entry in log_entries: # Split the log entry into timestamp and URL timestamp_str, url = entry.rsplit(\\" \\", 1) timestamp = datetime.strptime(timestamp_str, \\"%Y-%m-%d %H:%M:%S\\") # Only consider logs within the time window if start_time <= timestamp <= end_time: if url in url_counts: url_counts[url] += 1 else: url_counts[url] = 1 # Determine the most frequently accessed URL max_count = 0 most_frequent_url = \\"\\" for url, count in url_counts.items(): if count > max_count or (count == max_count and url < most_frequent_url): max_count = count most_frequent_url = url return most_frequent_url"},{"question":"In a faraway land, there are M cities connected by bidirectional train tracks. Each train track has a travel time assigned to it, defined by a non-negative integer. Your task is to determine the shortest possible travel time between any two cities via the train tracks. Due to the uniqueness of this land, it is guaranteed that there exists a path between any two cities and all travel times are distinct. Input The first line of input contains two natural numbers (2 ≤ M ≤ 100) — the number of cities and the number of train tracks respectively. Each of the next M lines contains three integers, u, v, and t (0 ≤ t ≤ 2000), indicating there is a train track between city u and city v with travel time t. Output Output an M x M matrix where the j-th number in the i-th row represents the shortest travel time between city i and city j. If i and j are the same, the travel time should be zero. Examples Input 3 3 1 2 4 2 3 1 3 1 7 Output 0 4 5 4 0 1 5 1 0","solution":"def floyd_warshall(matrix): M = len(matrix) # Initialize the distance matrix dist = [[float(\'inf\')] * M for _ in range(M)] for i in range(M): dist[i][i] = 0 # Copy the given adjacency matrix values into the distance matrix for u in range(M): for v in range(M): if matrix[u][v] != 0 and u != v: dist[u][v] = matrix[u][v] # Apply Floyd-Warshall Algorithm for k in range(M): for i in range(M): for j in range(M): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def get_shortest_travel_time_matrix(M, edges): # Initialize adjacency matrix matrix = [[0 if i == j else float(\'inf\') for j in range(M)] for i in range(M)] for u, v, t in edges: matrix[u-1][v-1] = t matrix[v-1][u-1] = t shortest_paths = floyd_warshall(matrix) return shortest_paths # Example usage edges = [ (1, 2, 4), (2, 3, 1), (3, 1, 7) ] result = get_shortest_travel_time_matrix(3, edges) for row in result: print(\' \'.join(map(str, row)))"},{"question":"In a remote village, there is a famous bakery known for its delicious rectangular cakes. The bakery is planning to expand its facilities and distribute cakes to multiple shops in the village. For this purpose, they need to cut a large rectangular cake into smaller pieces based on specific customer orders. Each order specifies a rectangular piece defined by its top-left and bottom-right coordinates. The bakery wants to maximize the number of orders they can fulfill from one rectangular cake. The large rectangular cake is represented by an n x m matrix, where each cell contains a unique integer identifying it. The orders are given as a list of sub-rectangles within this matrix, and you need to determine which orders can be fulfilled without overlapping. Input The first line contains two integers n and m (1 ≤ n, m ≤ 20) — the dimensions of the large rectangular cake. The second line contains an integer k (1 ≤ k ≤ 100) — the number of orders. The next k lines describe the orders. Each line contains four integers r1 c1 r2 c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m) representing the top-left (r1, c1) and bottom-right (r2, c2) coordinates of the requested sub-rectangle. Output Print an integer t in the first line — the maximum number of non-overlapping orders that can be fulfilled. Print t lines, each containing 4 integers r1 c1 r2 c2 — the coordinates of the top-left and bottom-right corners of the non-overlapping orders. The orders should be listed in the order they appear in the input. Example Input 4 5 3 1 1 2 3 2 2 4 5 3 1 4 3 Output 2 1 1 2 3 3 1 4 3 Input 5 5 4 1 1 3 3 2 2 5 5 1 4 2 5 4 4 5 5 Output 3 1 1 3 3 1 4 2 5 4 4 5 5","solution":"def can_fulfill(order, selected_orders): for o in selected_orders: if not (order[2] < o[0] or order[0] > o[2] or order[3] < o[1] or order[1] > o[3]): return False return True def max_non_overlapping_orders(n, m, k, orders): fulfilled_orders = [] for order in orders: if can_fulfill(order, fulfilled_orders): fulfilled_orders.append(order) return fulfilled_orders def main(): import sys input = sys.stdin.read data = input().split() n, m = int(data[0]), int(data[1]) k = int(data[2]) orders = [] index = 3 for _ in range(k): r1 = int(data[index]) c1 = int(data[index + 1]) r2 = int(data[index + 2]) c2 = int(data[index + 3]) orders.append((r1, c1, r2, c2)) index += 4 result = max_non_overlapping_orders(n, m, k, orders) print(len(result)) for r in result: print(r[0], r[1], r[2], r[3]) # Uncomment the following line to run the script outside a test environment # if __name__ == \\"__main__\\": # main()"},{"question":"You are given an array of integers, which represent a sequence of daily temperature readings. Your task is to create a function that determines how many days one would have to wait for a warmer temperature for each day in the given sequence. If there is no future day for which this is possible, return 0 for that day. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the number of days. The second line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 100) representing the daily temperatures. Output Output n space-separated integers, where the ith integer is the number of days until a warmer temperature for the ith day. If no such day exists, output 0. Examples Input 8 73 74 75 71 69 72 76 73 Output 1 1 4 2 1 1 0 0 Input 4 30 40 50 60 Output 1 1 1 0 Input 4 30 20 10 5 Output 0 0 0 0 Explanation For the first example, the output indicates that: - For day 1 (temperature 73), the next warmer day is day 2 (temperature 74), so we wait 1 day. - For day 2 (temperature 74), the next warmer day is day 3 (temperature 75), so we wait 1 day. - For day 3 (temperature 75), the next warmer day is day 7 (temperature 76), so we wait 4 days. - For day 4 (temperature 71), the next warmer day is day 6 (temperature 72), so we wait 2 days. - For day 5 (temperature 69), the next warmer day is day 6 (temperature 72), so we wait 1 day. - For day 6 (temperature 72), the next warmer day is day 7 (temperature 76), so we wait 1 day. - For day 7 (temperature 76), there is no future day with a warmer temperature, so the wait is 0 days. - For day 8 (temperature 73), there is no future day with a warmer temperature, so the wait is 0 days.","solution":"def daily_temperatures(n, temperatures): Given a list of daily temperatures, returns a list where the value at each index indicates the number of days one would have to wait for a warmer temperature. result = [0] * n stack = [] for i, current_temp in enumerate(temperatures): while stack and temperatures[stack[-1]] < current_temp: index = stack.pop() result[index] = i - index stack.append(i) return result"},{"question":"You are tasked with managing a warehouse containing a large inventory of unique items. Each item has an associated ID and price. There are multiple operations that you need to handle: 1. Increase the price of all items within a given ID range by a specified amount. 2. Decrease the price of all items within a specified price range by a certain amount. 3. Determine the total price of all items within a certain ID range. The operations will be given sequentially, and you must process them in the order they appear. Input The first line contains a single integer q (1 ≤ q ≤ 10,000), representing the number of operations. Each of the next q lines consists of an operation which can be one of the following three types: - \\"1 l r x\\": Increase the price of all items with IDs within the range [l, r] (inclusive) by x units. - \\"2 a b y\\": Decrease the price of all items with prices within the range [a, b] (inclusive) by y units. - \\"3 l r\\": Output the total price of items with IDs within the range [l, r] (inclusive). Note: Every item initially has a price of 0. Output For each type-3 operation, output the total price of all items within the specified ID range, in chronological order. Example Input 6 1 1 5 10 2 5 15 3 3 1 5 1 2 3 5 3 2 3 3 1 3 Output 27 15 27 Note In the example: 1. IDs [1, 2, 3, 4, 5] all have their prices increased by 10, so prices are now [10, 10, 10, 10, 10]. 2. IDs with prices [10] are in the range [5, 15], so their prices are decreased by 3 to [7, 7, 7, 7, 7]. 3. The total price for IDs in range [1, 5] is 7 + 7 + 7 + 7 + 7 = 35. 4. IDs [2, 3] have their prices increased by 5, so prices are now [7, 12, 12, 7, 7]. 5. The total price for IDs in range [2, 3] is 12 + 12 = 24. 6. The total price for IDs in range [1, 3] is 7 + 12 + 12 = 31.","solution":"def manage_warehouse(operations): inventory = {} results = [] for operation in operations: op = operation.split() if op[0] == \'1\': l, r, x = int(op[1]), int(op[2]), int(op[3]) for i in range(l, r + 1): if i in inventory: inventory[i] += x else: inventory[i] = x elif op[0] == \'2\': a, b, y = int(op[1]), int(op[2]), int(op[3]) for key in inventory: if a <= inventory[key] <= b: inventory[key] = max(0, inventory[key] - y) elif op[0] == \'3\': l, r = int(op[1]), int(op[2]) total_price = sum(inventory[i] for i in range(l, r + 1) if i in inventory) results.append(total_price) return results"},{"question":"You are given a grid of size N x M. Each cell in the grid can be either land (\'L\') or water (\'W\'). Two cells are considered connected if they are adjacent in any of the four directions (left, right, up, or down). An island is a group of connected land cells. Your task is to find out the number of islands in the grid. Write a function `countIslands(grid)` that takes in a 2D list of characters representing the grid and returns the number of islands. # Input - The function `countIslands(grid)` will receive a 2D list of characters, where each character is either \'L\' (representing land) or \'W\' (representing water). - The size of the grid will be N x M where 1 ≤ N, M ≤ 50. # Output - The function should return an integer representing the number of islands. # Examples Example 1 **Input:** ```python grid = [ [\\"L\\", \\"W\\", \\"L\\", \\"L\\"], [\\"L\\", \\"L\\", \\"W\\", \\"W\\"], [\\"W\\", \\"L\\", \\"L\\", \\"W\\"], [\\"W\\", \\"W\\", \\"W\\", \\"L\\"] ] ``` **Output:** ```python 3 ``` Example 2 **Input:** ```python grid = [ [\\"L\\", \\"L\\"], [\\"L\\", \\"L\\"] ] ``` **Output:** ```python 1 ``` # Note - In the first example, there are three islands: one at the top-left, one in the middle, and one at the bottom-right. - In the second example, there is only one island consisting of all land cells.","solution":"def countIslands(grid): Returns the number of islands in the given grid. An island is a group of connected land cells (\'L\') connected horizontally or vertically. if not grid: return 0 rows = len(grid) cols = len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(x, y): if x < 0 or x >= rows or y < 0 or y >= cols or grid[x][y] == \'W\' or visited[x][y]: return visited[x][y] = True dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) island_count = 0 for i in range(rows): for j in range(cols): if grid[i][j] == \'L\' and not visited[i][j]: dfs(i, j) island_count += 1 return island_count"},{"question":"Eri loves to play video games on her handheld console. Each game consumes a certain amount of battery charge when played. Specifically, playing one game reduces the battery charge by X percent. Eri wants to play games for as long as possible without recharging her console\'s battery, but she will stop when the battery charge drops below Y percent, as she does not want the battery to fully drain. Given the initial battery percentage P, calculate the total number of games Eri can play before stopping. Constraints * All values in input are integers. * 1 leq X, Y leq 100 * 0 leq P leq 100 Input Input is given from Standard Input in the following format: X Y P Output Print the number of games Eri can play. Examples Input 10 20 100 Output 8 Input 5 40 100 Output 12 Input 15 10 50 Output 2","solution":"def games_eri_can_play(X, Y, P): Calculate the total number of games Eri can play before stopping. Parameters: X (int): The battery percentage reduction per game. Y (int): The threshold battery percentage at which she will stop playing. P (int): The initial battery percentage. Returns: int: The total number of games Eri can play. games_count = 0 while P >= Y: P -= X games_count += 1 return games_count - 1 # Subtracting 1 because she stops once battery goes below Y # Example usage: # print(games_eri_can_play(10, 20, 100)) # Output: 8"},{"question":"Marks Distribution in an Exam In a classroom, the teacher wants to distribute the marks such that: 1. The sum of the marks received by all students is exactly the total marks in the exam. 2. Each student receives a unique amount of marks. 3. The smallest possible mark a student can receive is 1, and the largest possible mark is the total number of students in the classroom. Given the total marks available and the number of students in the classroom, determine the marks each student should receive such that the criteria are met. Input The input consists of a single test case of the following format: m s m is the total marks available and s is the number of students (1 ≤ s ≤ 2 times 10^4) satisfying s(s+1)/2 leq m leq s(s+1)/2 + (s-1) Output The output consists of s lines, each containing one integer, representing the marks received by each student. Each value must be unique, and their sum must equal m. If there are multiple solutions, you may output any one of them. Sample Input 1 21 6 Sample Output 1 1 2 3 4 5 6 Sample Input 2 24 6 Sample Output 2 1 2 3 4 5 9 Example Input 21 6 Output 1 2 3 4 5 6","solution":"def distribute_marks(total_marks, num_students): Returns a list of marks for each student such that they are all unique, the sum is total_marks, and marks range from 1 to num_students. marks = list(range(1, num_students + 1)) current_sum = sum(marks) diff = total_marks - current_sum for i in range(num_students-1, -1, -1): if diff <= 0: break additional_marks = min(diff, total_marks - marks[i] - current_sum + marks[i]) marks[i] += additional_marks diff -= additional_marks return marks"},{"question":"There is a street with `n` houses and each house has an integer value representing the number of candy bags it contains. You have a gift bag which can only hold a certain number of candy bags, `k`. Your task is to maximize the number of candy bags that can fit into the gift bag by selecting consecutive houses from the street. If there are multiple solutions, return the subarray of house indices which comes first in lexicographical order. Input: The first line of the input contains two integers, `n` (1 ≤ `n` ≤ 1000) and `k` (1 ≤ `k` ≤ 10^4). The second line contains `n` integers `a1, a2, ..., an` (1 ≤ `ai` ≤ 100), the number of candy bags in each house. Output: Print a single line containing the indices (1-based) of the houses from which candy bags should be collected in order to maximize the number of candy bags that can be carried in the gift bag. If there are multiple solutions, return the one with the smallest starting index. Examples: Input: 6 15 2 3 5 7 1 4 Output: 2 4 Explanation: - Counting from house 2 to house 4 the number of candy bags are 3 + 5 + 7 = 15. - There is no subarray with a total sum greater than 15 that is less than or equal to k. Input: 5 10 1 1 1 1 1 Output: 1 10 Explanation: - Counting from house 1 to house 10 the number of candy bags are 10. Input: 4 7 5 1 2 1 Output: 2 3 Explanation: - Counting from house 2 to house 3 the number of candy bags are 1 + 2 = 7. - There is no subarray with a total sum greater than 7 that is less than or equal to k. Note: In case of multiple answers, such as in the second example, the subarray [1, 10] and [2, 4] both yield 5 candy bags each and sum up to be exactly 10 but [1, 2] comes lexicographically first. So, it is preferred as the answer.","solution":"def max_candy_bags(n, k, candy_bags): max_sum = 0 start_idx = 0 end_idx = 0 current_sum = 0 start = 0 for end in range(n): current_sum += candy_bags[end] while current_sum > k: current_sum -= candy_bags[start] start += 1 if current_sum > max_sum or (current_sum == max_sum and end - start < end_idx - start_idx): max_sum = current_sum start_idx = start end_idx = end return start_idx + 1, end_idx + 1"},{"question":"The city of Gridtopia is organized in a perfect grid of size n x m. Each cell in the grid represents a building, and the city council is planning to install surveillance cameras on some of the buildings to cover the entire city with the minimum number of cameras. Each camera installed in a building can monitor all the cells in its row and column. Your task is to determine the minimum number of cameras required to cover every cell of the city grid. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. Output Print a single integer — the minimum number of cameras required to cover the entire city grid. Examples Input 3 4 Output 4 Input 1 1 Output 1 Input 5 6 Output 6 Explanation In the first example, a 3x4 grid, you need 4 cameras to cover the entire grid: - One camera at (1, 1) covers the entire first row and first column. - One camera at (2, 2) covers the entire second row and second column. - One camera at (3, 3) covers the entire third row and third column. - One camera at (3, 4) covers the entire third row and fourth column. In the second example, a 1x1 grid, only one camera is needed to cover the single cell. In the third example, a 5x6 grid, you need 6 cameras to cover all cells because the grid\'s maximum side length is 6, and placing one camera in each column or row is sufficient to cover the entire grid.","solution":"def minimum_cameras(n, m): Returns the minimum number of cameras required to cover the entire n x m grid. Each camera can monitor all the cells in its row and column. # The minimum number of cameras required is the larger number between rows and columns return max(n, m)"},{"question":"A city is trying to manage its traffic by controlling a set of traffic lights. The city\'s grid of streets can be represented as a graph where intersections are nodes and streets are edges connecting the nodes. Each street has a length and a traffic light at one end of the street. The traffic light at the start of a street is green for exactly t_i seconds, alternating with a red light for the same duration. You need to determine the earliest time it’s possible to travel from the start to the end of the city. You are given n intersections and m streets, with the start and end intersections specified. Your task is to find the minimum time required to travel from the start intersection to the end intersection, given the periodic nature of the traffic lights. Constraints: * All values in input are integers. * 2 leq n leq 1000 * 1 leq m leq 5000 * 1 leq t_i leq 100 * 1 leq length leq 1000 Input: The input is given from standard input in the following format: n m start end u_1 v_1 length_1 t_1 u_2 v_2 length_2 t_2 vdots u_m v_m length_m t_m Output: Print the minimum time required to travel from the start intersection to the end intersection. If it\'s impossible to reach the end intersection, print -1. Example: Input: 5 6 1 5 1 2 5 3 2 3 10 2 1 3 20 2 3 4 5 1 4 5 10 2 3 5 7 3 Output: 25","solution":"import heapq import sys def find_minimum_time(n, m, start, end, streets): graph = [[] for _ in range(n + 1)] for u, v, length, t_i in streets: graph[u].append((v, length, t_i)) graph[v].append((u, length, t_i)) # PriorityQueue for Dijkstra\'s pq = [] heapq.heappush(pq, (0, start)) # Distance array distance = [float(\'inf\')] * (n + 1) distance[start] = 0 while pq: current_time, current_node = heapq.heappop(pq) if current_node == end: return current_time if current_time > distance[current_node]: continue for neighbor, length, t_i in graph[current_node]: cycle_time = t_i * 2 wait_time = 0 if (current_time % cycle_time) >= t_i: wait_time = cycle_time - (current_time % cycle_time) arrival_time = current_time + length + wait_time if arrival_time < distance[neighbor]: distance[neighbor] = arrival_time heapq.heappush(pq, (arrival_time, neighbor)) return -1 if distance[end] == float(\'inf\') else distance[end] def minimum_time_from_input(): input = sys.stdin.read data = input().split() idx = 0 n = int(data[idx]) idx += 1 m = int(data[idx]) idx += 1 start = int(data[idx]) idx += 1 end = int(data[idx]) idx += 1 streets = [] for _ in range(m): u = int(data[idx]) idx += 1 v = int(data[idx]) idx += 1 length = int(data[idx]) idx += 1 t_i = int(data[idx]) idx += 1 streets.append((u, v, length, t_i)) print(find_minimum_time(n, m, start, end, streets))"},{"question":"In a faraway land, there is a village with n houses numbered from 1 to n, and m bidirectional roads connecting pairs of houses. Each road has a certain length. The village chief wants to select some of these roads to build a central biking route such that villagers can travel between any two houses using this route without any cycles, and the total length of the selected roads should be minimized. In other words, you need to find the minimum spanning tree (MST) for the village. **Input** The input consists of multiple lines. The first line contains two integers, n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) – the number of houses and the number of roads, respectively. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10000) – a pair of houses and the length of the road connecting them. **Output** Print a single integer representing the total length of the roads in the MST of the village. If no MST exists (i.e., if not all houses can be connected), print \\"IMPOSSIBLE\\". **Examples** Input 1: ``` 4 5 1 2 1 1 3 4 2 3 2 3 4 3 4 1 5 ``` Output 1: ``` 6 ``` Input 2: ``` 3 1 1 2 2 ``` Output 2: ``` IMPOSSIBLE ``` **Explanation** In the first example, the MST can be formed by selecting the roads with lengths 1, 2, and 3. The total length is 6. In the second example, there is no way to connect all the houses, as house 3 is isolated, hence the output is \\"IMPOSSIBLE\\".","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): result = [] i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: if i >= len(edges): return \\"IMPOSSIBLE\\" u, v, w = edges[i] i = i + 1 x = find(parent, u) y = find(parent, v) if x != y: e = e + 1 result.append(w) union(parent, rank, x, y) return sum(result) def minimum_spanning_tree(input_data): lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) edges = [] for i in range(1, m + 1): u, v, w = map(int, lines[i].split()) edges.append((u - 1, v - 1, w)) if n == 1: return 0 if m == 0 else \\"IMPOSSIBLE\\" return kruskal(n, edges)"},{"question":"A company has hired you to optimize their log processing system. They have a large number of log entries, each representing an event with a timestamp, and they need help sorting these logs. The logs are given in a specific format: each log entry starts with a unique identifier, followed by a space, and then a timestamp in the \\"YYYY-MM-DD HH:MM:SS\\" format. Your task is to sort the logs based on their timestamps, from the oldest to the newest. If two log entries have the same timestamp, maintain their relative order from the input. Write a function `sort_logs` that takes as input a list of log entries and returns the sorted list. Input: - A list of strings `logs`, where each string represents a log entry. The length of each log entry will not exceed 100 characters. The number of log entries `n` satisfies `1 ≤ n ≤ 10000`. Output: - A list of strings representing the sorted log entries. Example Input: ``` [ \\"log2 2022-10-01 18:30:00\\", \\"log1 2022-10-01 17:30:00\\", \\"log3 2022-10-01 18:30:00\\" ] ``` Output: ``` [ \\"log1 2022-10-01 17:30:00\\", \\"log2 2022-10-01 18:30:00\\", \\"log3 2022-10-01 18:30:00\\" ] ``` Note: - To parse and compare the timestamps, consider using the datetime module in Python. - Remember to maintain the relative order of entries with the same timestamp as they appeared in the input.","solution":"from datetime import datetime def sort_logs(logs): Sort logs based on their timestamps in \'YYYY-MM-DD HH:MM:SS\' format. Args: logs: List of strings, where each string represents a log entry. Returns: List of strings representing the sorted log entries. # Extract the timestamp part and use it for sorting def get_timestamp(log): # Split the log entry to extract the timestamp part parts = log.split(maxsplit=1) return datetime.strptime(parts[1], \\"%Y-%m-%d %H:%M:%S\\") # Sort logs using the extracted timestamps sorted_logs = sorted(logs, key=get_timestamp) return sorted_logs"},{"question":"Dr. Doofenshmirtz has devised a new security system for his latest Inator machine. The security system consists of a panel with a sequence of buttons, each identified by a unique letter from \'A\' to \'Z\', which must be pressed in a specific order. The order of the sequence is encoded as a string of characters. However, he realized there might be some instances where the sequence of button presses would deactivate the system instead of activating it. A valid sequence should not contain any substring of three consecutive identical characters. To ensure the system works correctly, he needs a way to verify sequences. Your task is to determine if the given sequence is a valid sequence or not based on the above rule. Input: - An integer T, the number of test cases. - Each test case consists of a single line string S of length L, representing the sequence of button presses. Output: - For each test case, print \\"valid\\" if the sequence does not contain any substring of three consecutive identical characters. Otherwise, print \\"invalid\\". Constraints: 1 ≤ T ≤ 50 1 ≤ L ≤ 10^5 S contains only uppercase letters \'A\' to \'Z\' SAMPLE INPUT 2 ABCCBA AAABBBCCC SAMPLE OUTPUT valid invalid Explanation: In the first test case, no character is repeated three times consecutively, so it is a valid sequence. In the second test case, character \'A\' is repeated three times consecutively, as well as \'B\' and \'C\', so it is an invalid sequence.","solution":"def is_valid_sequence(sequence): Checks if the given sequence is valid i.e., it does not contain any substring of three consecutive identical characters. length = len(sequence) for i in range(length - 2): if sequence[i] == sequence[i+1] == sequence[i+2]: return \\"invalid\\" return \\"valid\\" def process_test_cases(T, cases): Takes in the number of test cases T and the list of cases, returns a list of results whether each case is valid or invalid. results = [] for case in cases: results.append(is_valid_sequence(case)) return results"},{"question":"Olya loves to play with sequences and has recently discovered a new special sequence called the \\"Balanced Sequence.\\" A sequence is called a balanced sequence if it can be divided into a set of contiguous groups where: 1. Each group consists of the same distinct element repeated one or more times. 2. The frequency of each distinct element in the sequence is the same as the frequency of that element in any group. For example, the sequence [1, 1, 2, 2, 1, 1, 2, 2] is a balanced sequence because it can be divided into groups [1, 1], [2, 2], [1, 1], and [2, 2], each group consisting of repeated elements and the frequency of 1s and 2s being the same in each group. Olya wants you to write a program that determines whether a given sequence is a balanced sequence or not. # Input The first line contains a single integer n (1 ≤ n ≤ 1000), the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the sequence. # Output Output \\"YES\\" (without quotes) if the sequence is a balanced sequence, otherwise print \\"NO\\" (without quotes). # Example Input ``` 8 1 1 2 2 1 1 2 2 ``` Output ``` YES ``` Input ``` 5 1 2 3 4 5 ``` Output ``` NO ``` Note For the first example, the sequence can be divided into groups [1, 1], [2, 2], [1, 1], and [2, 2], making it a balanced sequence. For the second example, there is no way to divide the sequence into contiguous groups with the same frequency of each element in every group; thus, it is not a balanced sequence.","solution":"def is_balanced_sequence(n, sequence): Determines if a given sequence is a balanced sequence. Args: n : int : the number of elements in the sequence sequence : list of int : the elements of the sequence Returns: str : \\"YES\\" if the sequence is a balanced sequence, otherwise \\"NO\\" if n == 1: return \\"YES\\" freq_map = {} group_size = 0 current_freq_map = {} for num in sequence: if num not in current_freq_map: current_freq_map[num] = 0 current_freq_map[num] += 1 if num not in freq_map: freq_map[num] = 0 freq_map[num] += 1 if group_size == 0: group_size = current_freq_map[num] for val in current_freq_map.values(): if val != group_size: return \\"NO\\" if sum(current_freq_map.values()) == group_size * len(current_freq_map): group_size = 0 current_freq_map = {} for val in freq_map.values(): if val % len(freq_map) != 0: return \\"NO\\" return \\"YES\\""},{"question":"Alex and Sam are playing an interesting game involving strings. They have an array of N strings, each consisting of lowercase English letters. They will play M rounds of the game consecutively. In each round, a string S will be provided and the players need to find out how many strings in the array can be transformed into the given string S by modifying at most K positions (by replacing the character at those positions with another character). The players make their moves alternately, with Alex starting every game. In each turn, a player chooses one string from the array that can be transformed into S according to the current game\'s rules and discards it. The player who cannot make a move loses. Each round starts with the original set of strings. Write a program to determine the winner of each round. Print \'A\' if Alex wins and \'S\' if Sam wins. Input: - The first line contains two space-separated integers N and M, the number of strings and the number of rounds respectively. - The next N lines each contain a single string, representing the array of strings. - The next M lines each contain a space-separated integer K and string S, representing the maximum number of positions that can be modified and the target string for that round. Output: - Output a single line containing M characters, each being either \'A\' or \'S\', denoting the winner of each round. Constraints: - 1 ≤ N, M ≤ 10^5 - 1 ≤ length of any string ≤ 50 - K ≥ 0 Example: Input: 3 3 abc def ghi 2 zab 1 def 0 ghi Output: SAA Explanation: 1. For the first round with target string \\"zab\\" and K=2, the string array [abc, def, ghi]: - \\"abc\\" can be changed to \\"zab\\" by changing \'a\' to \'z\' and \'c\' to \'b\'. (2 changes) - \\"def\\" and \\"ghi\\" need more than 2 changes each. Therefore, only \\"abc\\" can be used, and since Alex starts and removes it first, Sam cannot make a move and loses. 2. For the second round with target string \\"def\\" and K=1: - Only \\"def\\" can match with 0 changes. - Alex starts and wins by removing \\"def\\". 3. For the third round with target string \\"ghi\\" and K=0: - Only \\"ghi\\" matches with no changes needed. - Alex wins by removing \\"ghi\\".","solution":"def determine_winner(N, M, strings, rounds): results = [] def can_transform(str1, str2, max_changes): changes = 0 for i in range(len(str1)): if str1[i] != str2[i]: changes += 1 if changes > max_changes: return False return changes <= max_changes for k, target_str in rounds: transformable_count = sum(1 for string in strings if can_transform(string, target_str, k)) if transformable_count % 2 == 1: results.append(\'A\') else: results.append(\'S\') return \'\'.join(results)"},{"question":"You are given an array of integers where every integer appears exactly three times, except for one integer which appears exactly once. Your task is to find the integer that appears only once in O(n) time and O(1) space complexity. Input The first line contains a single integer T (1 ≤ T ≤ 100) — the number of test cases. The next T lines each contain a description of the test case: - The first line of each test case contains an integer N (1 ≤ N ≤ 10^5) — the number of integers in the array. - The second line of each test case contains N integers separated by space. Output For each test case, print the integer that appears only once. Example Input 3 7 2 2 3 2 7 7 7 10 5 5 5 3 3 3 4 4 4 9 6 8 8 8 6 6 6 1 Output 3 9 1 Notes In the first query, the integer that appears only once is \'3\'. In the second query, the integer that appears only once is \'9\'. In the third query, the integer that appears only once is \'1\'.","solution":"def find_unique_number(nums): Function to find the number that appears exactly once in the array where every other number appears exactly three times. ones, twos = 0, 0 for num in nums: ones = (ones ^ num) & ~twos twos = (twos ^ num) & ~ones return ones def find_unique_in_test_cases(T, test_cases): Function to handle multiple test cases and find unique numbers for each. results = [] for case in test_cases: N, nums = case unique_num = find_unique_number(nums) results.append(unique_num) return results"},{"question":"Given a binary string, Polycarp wants to rearrange it in such a way that no two consecutive characters are the same. He wonders if it is possible to do so, and if yes, he wants to know the lexicographically smallest string that can be achieved under the constraints. You are asked to help Polycarp by implementing a function that takes a binary string `s` and rearranges it to satisfy the conditions mentioned above or determines if it is impossible. Input The input consists of a single line with a binary string `s` (1 ≤ |s| ≤ 100,000), consisting exclusively of characters \'0\' and \'1\'. Output If it is impossible to rearrange the string such that no two consecutive characters are the same, output \\"NO\\". Otherwise, output the lexicographically smallest string that meets the conditions. Examples Input ``` 1100 ``` Output ``` 0101 ``` Input ``` 111000 ``` Output ``` 010101 ``` Input ``` 1111 ``` Output ``` NO ``` Note In the first example, a possible rearrangement is \\"0101\\", which is the lexicographically smallest string with no two consecutive characters being the same. In the second example, the string can be rearranged such that it forms \\"010101\\". In the third example, it is impossible to rearrange the string to meet the desired conditions, hence the output is \\"NO\\".","solution":"def rearrange_binary_string(s): Function to determine if a binary string can be rearranged with no two consecutive characters being the same and if possible returns the lexicographically smallest rearranged string. # Count the number of 0s and 1s in the input string count0 = s.count(\'0\') count1 = s.count(\'1\') # If the number of one of the characters exceeds the other by more than 1, it\'s impossible if abs(count0 - count1) > 1: return \\"NO\\" # To form lexicographically smallest string, decide whether to start with \'0\' or \'1\' if count0 >= count1: result = [\'0\', \'1\'] * count1 + [\'0\'] * (count0 - count1) else: result = [\'1\', \'0\'] * count0 + [\'1\'] * (count1 - count0) return \'\'.join(result)"},{"question":"In a city, there are several waste collection centers and multiple neighborhoods requiring waste collection services. The cost for waste collection depends upon the distance between the neighborhoods and the collection centers. Each neighborhood generates a specific amount of waste every day and each collection center has a maximum waste handling capacity. The objective is to determine the minimum total distance covered to collect all the waste, assuming every neighborhood\'s waste must be collected by one of the available collection centers. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of waste collection centers. Each of the next n lines contains three integers xi, yi, ci — the coordinates of the i-th waste collection center and its waste handling capacity in kilograms per day. The next line contains an integer m (1 ≤ m ≤ 100) — the number of neighborhoods. Each of the next m lines contains three integers ui, vi, wi — the coordinates of the i-th neighborhood and the amount of waste generated by it in kilograms per day. The coordinates are integers, and their values do not exceed 1000 by absolute value. The waste amounts and capacities are also integers and positive. Output Print a single integer — the minimum total distance covered to collect all the waste. If it is not possible to collect all the waste, print -1. Examples Input 2 1 2 10 3 4 12 3 2 3 8 4 5 5 6 7 6 Output 10 Input 3 1 1 5 2 2 8 3 3 10 2 4 4 15 5 5 3 Output -1 Note In the first example, you can assign the following waste collections: - (2,3) with 8 kg of waste to the collection center at (1,2) covering 2 units of distance. - (4,5) with 5 kg of waste to the collection center at (3,4) covering 2 units of distance. - (6,7) with 6 kg of waste to the collection center at (3,4) covering 6 units of distance. Total distance is 2 + 2 + 6 = 10 units. In the second example, the waste generation in neighborhoods exceeds the collection capacity of all centers combined, hence it\'s not possible to collect all the waste.","solution":"def min_total_distance(n, centers, m, neighborhoods): from heapq import heappush, heappop import math def distance(x1, y1, x2, y2): return abs(x1 - x2) + abs(y1 - y2) waste_collected = [0] * n # Waste collected by each center pq = [] # Priority queue to keep track of minimal distances # Creating all possible distances and pushing them to priority queue for i in range(m): for j in range(n): dist = distance(neighborhoods[i][0], neighborhoods[i][1], centers[j][0], centers[j][1]) heappush(pq, (dist, i, j)) total_distance = 0 assigned_neighborhoods = set() while pq and len(assigned_neighborhoods) < m: dist, nh_idx, ctr_idx = heappop(pq) if nh_idx in assigned_neighborhoods: continue if waste_collected[ctr_idx] + neighborhoods[nh_idx][2] <= centers[ctr_idx][2]: waste_collected[ctr_idx] += neighborhoods[nh_idx][2] total_distance += dist assigned_neighborhoods.add(nh_idx) if len(assigned_neighborhoods) == m: return total_distance else: return -1 # Example 1 n = 2 centers = [(1, 2, 10), (3, 4, 12)] m = 3 neighborhoods = [(2, 3, 8), (4, 5, 5), (6, 7, 6)] print(min_total_distance(n, centers, m, neighborhoods)) # Output: 10 # Example 2 n = 3 centers = [(1, 1, 5), (2, 2, 8), (3, 3, 10)] m = 2 neighborhoods = [(4, 4, 15), (5, 5, 3)] print(min_total_distance(n, centers, m, neighborhoods)) # Output: -1"},{"question":"The forest of Narnia is inhabited by a variety of magical creatures. There are N distinct types of magical plants scattered across the forest, each type represented by an integer between 1 and N. Each plant type i has a magical value v(i) which denotes the energy it provides. The kingdom wants to create the ultimate magical potion using these plants. For every plant of type i, it requires exactly C_i plants, where 1 <= C_i <= 10^4. There are unlimited supplies for each type of plant in the forest. Your task is to calculate the maximum energy that can be obtained by collecting plants in such a way that each type of plant is collected exactly C_i times. The total number of collected plants should not exceed a given budget B (1 <= B <= 10^9). Input The first line of input contains an integer N (1 <= N <= 10^5), followed by N integers v(1), v(2), ..., v(N) (1 <= v(i) <= 10^9), denoting the magical values of the plants. The second line contains N integers C(1), C(2), ..., C(N) where 1 <= C_i <= 10^4, denoting the count of each type of plant required for the potion. The third line contains an integer B (1 <= B <= 10^9), denoting the maximum number of plants that can be collected. Output Print the maximum total magical energy that can be obtained by collecting the plants according to the given conditions. Example Input: 4 10 20 30 40 2 3 4 1 10 Output: 190 Explanation: One possible way to collect the plants is: Collect 2 of plant type 1, 3 of plant type 2, 4 of plant type 3, and 1 of plant type 4. Energy = 2*10 + 3*20 + 4*30 + 1*40 = 20 + 60 + 120 + 40 = 240 However, the total number of plants is: 2 + 3 + 4 + 1 = 10, which is less than or equal to the budget B. Other combinations that do not exceed the budget can be calculated, and the combination (2, 3, 4, 1) yields the maximum energy.","solution":"def max_energy(N, values, counts, B): Returns the maximum total magical energy that can be obtained by collecting the plants according to the constraints. :param N: int : Number of different types of plants :param values: List[int] : Magical values of each plant :param counts: List[int] : Required count of each plant for the potion :param B: int : Maximum number of plants that can be collected :return: int : Maximum total magical energy plants = [(values[i], counts[i]) for i in range(N)] # Sort plants based on their individual energy value plants.sort(reverse=True, key=lambda x: x[0]) total_energy = 0 total_plants_collected = 0 for value, count in plants: if total_plants_collected + count <= B: total_energy += value * count total_plants_collected += count else: remaining_budget = B - total_plants_collected total_energy += value * remaining_budget break return total_energy"},{"question":"Polycarp has recently tasked you with optimization of a file storage system. The system stores files in directories with the properties explained below: 1. Each file has a unique name, consisting of lowercase Latin letters without spaces. 2. Each directory can contain both files and subdirectories. 3. Directories are named with lowercase Latin letters as well. 4. Initially, the system starts with a \\"root\\" directory. 5. There are a set of paths that describe where files should be placed. 6. A path consists of directory names separated by slashes \'/\' and ends with a file name. The goal is to reconstruct the directory structure and then output the file names in lexicographical order in the format <directory_path>/<file_name>. Input: - The first line contains an integer n (1 ≤ n ≤ 10^3), the number of file paths. - The next `n` lines each contain a path (string) where the file is located. Output: - Output all file paths in lexicographical order. Example: Input: 7 root/a/file1 root/a/file3 root/b/file2 root/a/b/file4 root/b/a/file5 root/a/c/file6 root/b/file7 Output: root/a/b/file4 root/a/c/file6 root/a/file1 root/a/file3 root/b/a/file5 root/b/file2 root/b/file7 Explanation: The output paths all include the full directory structure from the \\"root\\" to each file, sorted in lexicographical order based on the full path. The system hierarchy is implicit and built from the paths given in the input.","solution":"def reconstruct_and_sort_file_paths(paths): Reconstructs the directory structure and sorts the file names in lexicographical order. Args: paths (list of str): List of file paths. Returns: list of str: Sorted file paths. paths.sort() return paths # Example usage: # paths = [ # \\"root/a/file1\\", # \\"root/a/file3\\", # \\"root/b/file2\\", # \\"root/a/b/file4\\", # \\"root/b/a/file5\\", # \\"root/a/c/file6\\", # \\"root/b/file7\\" # ] # # sorted_paths = reconstruct_and_sort_file_paths(paths) # print(\\"n\\".join(sorted_paths))"},{"question":"Magical Squares Company wants to design a new game that involves magic squares. A magic square is a 3x3 grid populated with numbers from 1 to 9, such that the sum of the numbers in each row, column, and the two main diagonals is the same. To develop this game, they need a function that, given a 3x3 grid of numbers from 1 to 9, determines if it is a magic square. Constraints * Each number in the grid is an integer from 1 to 9. * The grid always contains exactly 9 numbers. Input Input is given as three lines, each containing three integers, representing the 3x3 grid: ``` a1 a2 a3 b1 b2 b3 c1 c2 c3 ``` Output Print \\"YES\\" if the given grid is a magic square, otherwise print \\"NO\\". Examples Input ``` 2 7 6 9 5 1 4 3 8 ``` Output ``` YES ``` Input ``` 3 1 6 7 5 9 4 8 2 ``` Output ``` NO ``` Notes In the first example, the given grid has the same sum for each row, column, and the two main diagonals (which is 15), therefore it is a magic square. In the second example, the sums of some rows, columns, or diagonals differ, so it is not a magic square.","solution":"def is_magic_square(grid): Determines if the given 3x3 grid is a magic square. Args: grid: A list of lists representing the 3x3 grid. Returns: A string \\"YES\\" if the grid is a magic square, otherwise \\"NO\\". # Calculate the sum of each row row_sums = [sum(row) for row in grid] # Calculate the sum of each column col_sums = [sum(grid[i][j] for i in range(3)) for j in range(3)] # Calculate the sum of the two main diagonals diag1_sum = sum(grid[i][i] for i in range(3)) diag2_sum = sum(grid[i][2-i] for i in range(3)) # Get the unique sums from rows, columns and diagonals unique_sums = set(row_sums + col_sums + [diag1_sum, diag2_sum]) # Check if all sums are the same return \\"YES\\" if len(unique_sums) == 1 else \\"NO\\""},{"question":"Given a matrix representing a directed graph where each element `matrix[i][j]` is 1 if there is a directed edge from vertex `i` to vertex `j`, and 0 otherwise, your task is to write a function to determine if there is a cycle in the graph. The graph is represented as a 2D list of size N x N, and each element can only be 0 or 1. A cycle in the graph is defined as a sequence of vertices starting and ending at the same vertex, with each edge being distinct and directed according to the edges in the matrix. # Input - The first line contains an integer `N` (2 ≤ N ≤ 1000), the number of vertices in the graph. - The next `N` lines each contain `N` integers (either 0 or 1), representing the adjacency matrix of the graph. # Output - Print `True` if there is a cycle in the graph, otherwise print `False`. # Examples Example 1 Input: ``` 4 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 ``` Output: ``` True ``` Example 2 Input: ``` 3 0 1 0 0 0 1 1 0 0 ``` Output: ``` True ``` Example 3 Input: ``` 3 0 1 0 0 0 1 0 0 0 ``` Output: ``` False ``` # Notes You may use Depth-First Search (DFS) to detect cycles in the directed graph. A common approach is to use a recursion stack to keep track of the vertices currently in the stack of the DFS as this can help detect back edges, which indicate a cycle.","solution":"def has_cycle(graph): N = len(graph) # Helper function to perform DFS def dfs(v, visited, rec_stack): visited[v] = True rec_stack[v] = True for neighbor in range(N): if graph[v][neighbor] == 1: if not visited[neighbor]: if dfs(neighbor, visited, rec_stack): return True elif rec_stack[neighbor]: return True rec_stack[v] = False return False visited = [False] * N rec_stack = [False] * N for node in range(N): if not visited[node]: if dfs(node, visited, rec_stack): return True return False"},{"question":"You are given a list of integers `arr` of length `n`. You need to determine if it is possible to make all the elements in the array equal by performing the following operation any number of times: Choose any two adjacent elements and replace both of them with their sum. Constraints * 2 leq n leq 100,000 * -10^9 leq arr[i] leq 10^9 Input Input is given from Standard Input in the following format: n arr Output Print \\"YES\\" if it\'s possible to make all elements in the array equal by performing the operation. Otherwise, print \\"NO\\". Examples Input 3 1 2 3 Output NO Input 4 2 4 6 2 Output YES","solution":"def can_make_all_elements_equal(n, arr): Determine if it\'s possible to make all elements equal by repeatedly summing adjacent elements. # Check the parity of the first element first_parity = arr[0] % 2 # Compare the parity of each element with the first element\'s parity for num in arr: if num % 2 != first_parity: return \\"NO\\" return \\"YES\\""},{"question":"The Kingdom of Zolon consists of a cluster of islands connected by bridges. There are n islands in total, numbered from 1 to n. Each bridge connects two islands directly and has an associated travel cost. The King of Zolon wants to ensure he can travel between all islands with the minimum total travel cost. Your task is to determine the minimum travel cost required to connect all the islands using bridges, ensuring there is a path between any two islands. Essentially, you need to find the minimum spanning tree (MST) of the islands represented as a graph. Input The first line of the input contains two space-separated integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of islands and the number of bridges, respectively. The next m lines each contain three space-separated integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000), representing a bridge between islands u and v with a travel cost of w. Output Output a single integer — the minimum total travel cost to connect all the islands. If it is impossible to connect all the islands, output -1. Examples Input 4 5 1 2 5 1 3 10 2 3 4 2 4 11 3 4 7 Output 16 Input 5 3 1 2 3 1 3 2 4 5 2 Output -1 Note In the first example, the minimum total travel cost to connect all the islands is 16. In the second example, it is impossible to connect all the islands because islands 4 and 5 are not connected to the others. This problem can be solved using Kruskal\'s or Prim\'s algorithm for finding a minimum spanning tree.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): edges.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n mst_cost = 0 edge_count = 0 for u, v, w in edges: root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) mst_cost += w edge_count += 1 if edge_count == n - 1: break if edge_count != n - 1: return -1 return mst_cost def minimum_travel_cost(n, m, bridges): edges = [(u-1, v-1, w) for u, v, w in bridges] return kruskal(n, edges)"},{"question":"Write a function `find_unique_characters` that takes a string `s` as input and returns a list of unique characters in the order they first appear in the string. The function should consider only lowercase alphabetic characters (i.e., \'a\' to \'z\'). Any non-alphabetic characters should be ignored. **Example** ```python find_unique_characters(\\"abracadabra123!\\") # Output: [\'a\', \'b\', \'r\', \'c\', \'d\'] ``` **Constraints** - The input string can be of length between 1 and 10^5. - The input string will contain a mix of alphabetic and non-alphabetic characters. Only lowercase alphabetic characters will be considered for the result.","solution":"def find_unique_characters(s): Returns a list of unique alphabetic characters in the order they first appear in the input string `s`. Non-alphabetic characters are ignored. seen = set() unique_chars = [] for char in s: if \'a\' <= char <= \'z\': # if the character is a lowercase alphabetic character if char not in seen: seen.add(char) unique_chars.append(char) return unique_chars"},{"question":"In a small kingdom, there are multiple castles connected by a network of roads. Each road has an associated cost to traverse. The king wants to ensure that his advisors can travel between any two castles with the minimal cost possible by setting up optimal travel paths. You, as the kingdom\'s chief engineer, have been tasked with determining the minimal travel cost between various pairs of castles. Given the number of castles and the roads connecting them with their respective travel costs, you need to compute the minimum travel cost for several queries, each asking for the minimum travel cost from one castle to another. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of castles and the number of roads, respectively. The next m lines each contain three space-separated integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) — where u and v are the castles connected by a road, and w is the cost associated with that road. The next line contains an integer q (1 ≤ q ≤ 5000) — the number of queries. Each of the next q lines contains two space-separated integers a and b (1 ≤ a, b ≤ n) — where a and b denote the castles for which the minimal travel cost is to be determined. Output For each query, print a single line containing the minimum travel cost between castles a and b. If there is no path between the castles, print -1. Examples Input 4 4 1 2 4 2 3 1 3 4 7 4 2 2 3 1 3 2 4 1 4 Output 5 2 6 Note In the example, the minimum travel cost from castle 1 to castle 3 is 5 (1 -> 2 -> 3 with a total cost of 4 + 1 = 5). The minimum travel cost from castle 2 to castle 4 is 2 (direct road with cost 2). The minimum travel cost from castle 1 to castle 4 is 6 via the path (1 -> 2 -> 4 with a total cost of 4 + 2 = 6).","solution":"import heapq def find_min_travel_costs(n, m, roads, queries): def dijkstra(start, end): distances = [float(\'inf\')] * (n + 1) distances[start] = 0 min_heap = [(0, start)] while min_heap: current_dist, current_node = heapq.heappop(min_heap) if current_dist > distances[current_node]: continue for neighbor, cost in graph[current_node]: distance = current_dist + cost if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1 # Create graph representation graph = [[] for _ in range(n + 1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Process each query results = [] for a, b in queries: results.append(dijkstra(a, b)) return results"},{"question":"You are given two strings text1 and text2. Your task is to find the length of their longest common subsequence. A subsequence is a sequence that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. Input: - Two strings text1 and text2, where 1 <= text1.length, text2.length <= 1000. Output: - A single integer representing the length of the longest common subsequence of text1 and text2. Example: Input: ``` abcde ace ``` Output: ``` 3 ``` Explanation: The longest common subsequence is \\"ace\\" which has length 3. Input: ``` abc abc ``` Output: ``` 3 ``` Explanation: The longest common subsequence is \\"abc\\" which has length 3. Input: ``` abc def ``` Output: ``` 0 ``` Explanation: There is no common subsequence, so the longest common subsequence length is 0.","solution":"def longest_common_subsequence(text1, text2): Returns the length of the longest common subsequence of text1 and text2. m, n = len(text1), len(text2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if text1[i - 1] == text2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"A company is organizing a conference, and they need to assign speakers to time slots. Each speaker is represented as a pair (a_i, b_i) where a_i is the start time and b_i is the end time of the speaker\'s session. Your task is to schedule all speakers in a way that maximizes the number of sessions arranged without overlap. Given a list of speakers, each represented by their start and end times, determine the maximum number of non-overlapping sessions that can be scheduled. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t test cases follow. The first line of each test case contains an integer n (1 ≤ n ≤ 10^5) — the number of speakers. The following n lines each contain two integers a_i and b_i (0 ≤ a_i < b_i ≤ 10^9) — the start and end times of the speaker\'s session. It is guaranteed that the sum of the number of speakers across all test cases does not exceed 10^6. Output For each test case, print a single integer — the maximum number of non-overlapping sessions that can be scheduled. Example Input 2 3 1 3 2 5 4 6 4 1 2 2 3 3 4 4 5 Output 2 4 Note In the first test case, you can select the sessions [1,3] and [4,6], which do not overlap, giving a maximum of 2 sessions. In the second test case, you can select all sessions as they do not overlap, giving a maximum of 4 sessions.","solution":"def max_non_overlapping_sessions(test_cases): results = [] for sessions in test_cases: # Sort sessions based on the end time sessions.sort(key=lambda x: x[1]) count = 0 last_end = -1 for start, end in sessions: if start >= last_end: count += 1 last_end = end results.append(count) return results # Function to parse input and feed to the solution function def schedule_conference(input_str): input_lines = input_str.strip().split(\'n\') t = int(input_lines[0].strip()) index = 1 test_cases = [] for _ in range(t): n = int(input_lines[index].strip()) index += 1 sessions = [] for _ in range(n): a, b = map(int, input_lines[index].strip().split()) sessions.append((a, b)) index += 1 test_cases.append(sessions) results = max_non_overlapping_sessions(test_cases) return results"},{"question":"Given an array of integers, find three distinct elements a, b, and c in the array such that the combination (a, b, c) forms a Pythagorean triplet, where a^2 + b^2 = c^2. If multiple solutions exist, return any one of them. If no such triplet exists, return -1. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the size of the array. - The next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output: - A triplet (a, b, c) such that the combination forms a Pythagorean triplet if it exists. If no such combination is found, return -1. Examples Input: 5 3 1 4 6 5 Output: 3 4 5 Input: 6 10 4 6 12 5 8 Output: 6 8 10 Input: 4 1 2 3 4 Output: -1 Note: In the first test case, (3, 4, 5) is a Pythagorean triplet as 3^2 + 4^2 = 5^2. In the second test case, (6, 8, 10) is a valid triplet as 6^2 + 8^2 = 10^2. In the third test case, no combination of three distinct elements forms a Pythagorean triplet, hence the output is -1.","solution":"def find_pythagorean_triplet(arr): Given an array of integers, this function finds three distinct elements a, b, and c in the array such that the combination (a, b, c) forms a Pythagorean triplet, where a^2 + b^2 = c^2. If multiple solutions exist, return any one of them. If no such triplet exists, return -1. Args: arr (list): list of integers Returns: tuple: a triplet that forms a Pythagorean triplet, otherwise -1. n = len(arr) # Step 1: Square all elements and store in a dictionary for quick lookup squared = {x**2: x for x in arr} # Step 2: Find pairs (a^2, b^2) such that their sum exists in the dictionary for i in range(n): for j in range(i + 1, n): a2 = arr[i]**2 b2 = arr[j]**2 if a2 + b2 in squared: return arr[i], arr[j], squared[a2 + b2] return -1"},{"question":"In the game of \\"Dungeon Escape,\\" a player is navigating through a 2D grid representing a dungeon. The grid is composed of cells, each of which can either be empty (\'.\') or contain a wall (\'#\'). The player starts from the top-left corner of the grid (cell (1, 1)) and aims to reach the bottom-right corner (cell (N, M)). The player can move up, down, left, or right, but cannot move through walls. Given the dungeon\'s size N x M and the configuration of walls, determine the minimum number of moves required to reach the bottom-right corner from the top-left corner. If there is no possible way for the player to reach the goal, return -1. Input Input begins with a line containing two integers N and M (1 ≤ N, M ≤ 500) representing the number of rows and columns in the dungeon. The next N lines each contain M characters (either \'.\' or \'#\') representing the dungeon\'s grid. Output Output a single integer representing the minimum number of moves required to reach the bottom-right corner. If it is not possible, output -1. Examples Input 5 5 ..... .#. .#... .#. ..... Output 8 Input 5 5 .#... .#.#. .#.#. ...#. # Output -1 Explanation In the first example, the player can reach the bottom-right corner by navigating around the walls, requiring a minimum of 8 moves. In the second example, there is no possible path for the player to reach the goal due to the walls blocking the way.","solution":"from collections import deque def min_moves_to_escape(N, M, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' queue = deque([(0, 0, 0)]) visited = [[False] * M for _ in range(N)] visited[0][0] = True while queue: x, y, steps = queue.popleft() if x == N-1 and y == M-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1"},{"question":"A large company is organizing a coding competition for its employees. The employees are divided into teams, and each team is given a set of coding problems to solve. The goal is for each team to solve as many problems as possible within a limited amount of time. After the competition, the organizers want to analyze the performance of each team to determine the overall ranking. The scoring system is as follows: - Each problem solved grants the team a certain number of points based on the difficulty of the problem. - Additionally, if a team solves a problem faster than the other teams, they receive a time bonus. Given the completion times and scores of solved problems for each team, you need to write a program that ranks the teams based on their total score (including time bonuses). Input The input consists of multiple datasets representing different competitions. Each dataset starts with an integer n (the number of teams, 1 ≤ n ≤ 100) followed by n sets of team data. Each team data set starts with an integer m (the number of problems solved by the team, 0 ≤ m ≤ 50) followed by m pairs of integers: - The first integer of each pair represents the score of the problem solved. - The second integer of each pair represents the time at which the problem was solved. The end of the input is indicated by a line containing a zero. Output For each dataset, output the ranking of the teams based on their total scores, with the top-ranked team being listed first. If two teams have the same total score, the team with the lower team number (1-based index) is ranked higher. Example Input 3 2 50 30 30 40 3 20 20 10 10 40 50 1 60 60 4 3 10 10 20 30 30 50 2 50 40 80 70 0 Output 2 1 3 1 2 Explanation In the first dataset: - Team 1: solves 2 problems: scores 50 + 30 = 80, no time bonus. - Team 2: solves 3 problems: scores 20 + 10 + 40 = 70, no time bonus. - Team 3: solves 1 problem: scores 60, no time bonus. The ranking is 1 (2nd team which scores 70), 2 (1st team which scores 80), and 3 (3rd team which scores 60). In the second dataset: - Team 1: solves 3 problems: scores 10 + 20 + 30 = 60, no time bonus. - Team 2: solves 2 problems: scores 50 + 80 = 130, no time bonus. The ranking is 1 (1st team which scores 60) and 2 (2nd team which scores 130).","solution":"def rank_teams(datasets): This function takes the competition datasets as input and returns the ranking of the teams based on their total scores. Parameters: datasets (list of list): Each item in the outer list is a dataset representing a competition. Each dataset is a list of teams, where each team is represented by a list of tuples (score, time). Returns: list of list: Each item in the outer list is a list representing the ranked team numbers for the corresponding competition dataset. def calculate_total_score(team_data): Helper function to calculate the total score for a given team. Parameters: team_data (list of tuples): Each tuple contains the score and the time for a solved problem. Returns: int: The total score for the team. total_score = 0 time_bonus = 0 for score, time in team_data: total_score += score return total_score + time_bonus results = [] for dataset in datasets: scores = [] for i, team in enumerate(dataset): total_score = calculate_total_score(team) scores.append((total_score, i + 1)) scores.sort(reverse=True, key=lambda x: (x[0], -x[1])) results.append([x[1] for x in scores]) return results"},{"question":"In a city grid, you are given a street network that consists of n intersections and m two-way roads between them. Each road has a certain length and optionally a specific repair cost associated with it. The city planner has been tasked to ensure that the network remains connected while only repairing up to k roads. If the network cannot be made fully connected under the given constraints, determine the minimal number of repairs needed to achieve connectivity. Input The first line contains three space-separated integers n, m, and k (1 ≤ n ≤ 50, 1 ≤ m ≤ 1000, 0 ≤ k ≤ m) — the number of intersections, the number of roads, and the maximum number of roads that can be repaired, respectively. Each of the next m lines contains three space-separated integers u, v, and c (1 ≤ u, v ≤ n, u ≠ v, 0 ≤ c ≤ 1000) — the two intersections connected by the road and the repair cost. If c is 0, the road does not need any repair. Output If it\'s possible to make the street network fully connected by repairing at most k roads, print the minimal total cost of the repairs. If it\'s not possible, print -1. Examples Input 5 6 2 1 2 3 2 3 0 3 4 4 4 5 0 1 5 2 2 4 1 Output 3 Input 5 4 1 1 2 5 2 3 0 3 4 4 4 5 6 Output -1","solution":"def min_repair_cost(n, m, k, roads): Returns the minimal total repair cost to make the network fully connected, or -1 if it\'s not possible to connect all intersections within k repairs. :param n: Number of intersections :param m: Number of roads :param k: Maximum number of roads that can be repaired :param roads: List of tuples, each containing (u, v, c) where u and v are intersections connected by the road, and c is the repair cost :return: Minimum total repair cost or -1 if not possible # Kruskal\'s algorithm requires this helper for union-find class DSU: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, x): if self.parent[x] != x: self.parent[x] = self.find(self.parent[x]) return self.parent[x] def union(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX != rootY: if self.rank[rootX] > self.rank[rootY]: self.parent[rootY] = rootX elif self.rank[rootX] < self.rank[rootY]: self.parent[rootX] = rootY else: self.parent[rootY] = rootX self.rank[rootX] += 1 roads.sort(key=lambda x: (x[2], x[0], x[1])) # Firstly, include all roads that do not need any repair using Kruskal\'s algorithm dsu = DSU(n) total_cost = 0 edges_used = 0 for u, v, c in roads: if c == 0: # Roads with no repair cost if dsu.find(u - 1) != dsu.find(v - 1): dsu.union(u - 1, v - 1) edges_used += 1 # After including zero-cost roads, check connectivity if edges_used == n - 1: return total_cost # Try to add repairable roads repairs = [] for u, v, c in roads: if c > 0: # Roads that need repair repairs.append((u, v, c)) for u, v, c in repairs: if dsu.find(u - 1) != dsu.find(v - 1): dsu.union(u - 1, v - 1) total_cost += c k -= 1 edges_used += 1 if edges_used == n - 1: return total_cost if k < 0: return -1 return -1 if edges_used != n - 1 else total_cost"},{"question":"You are given a list of integers `nums` and an integer `target`. Determine if there exist two elements in `nums` such that their sum is equal to `target`. If such elements exist, print \\"Yes\\" and the indices of the two elements (1-based index). If there are multiple correct answers, print any one of them. Otherwise, print \\"No\\". Input The first line contains two integers n (1 ≤ n ≤ 10^5) and target (-10^9 ≤ target ≤ 10^9). The second line contains n integers, each element of `nums` (-10^9 ≤ nums[i] ≤ 10^9). Output If there are two elements in `nums` whose sum is equal to `target`, print \\"Yes\\" followed by the 1-based indices of the two elements. Otherwise, print \\"No\\". Examples Input 5 9 2 7 11 15 3 Output Yes 1 2 Input 4 6 1 2 3 4 Output Yes 2 4 Input 3 10 1 2 3 Output No Note In the first example, the sum of the elements at indices 1 and 2 is 2 + 7 = 9, which is equal to the target. In the second example, the sum of the elements at indices 2 and 4 is 2 + 4 = 6, which is equal to the target. In the third example, there are no two elements in the list whose sum equals the target, hence the output is \\"No\\".","solution":"def find_two_sum(nums, target): Determines if there are two elements in `nums` that sum up to `target`. If such elements exist, print \\"Yes\\" followed by their 1-based indices. If not, print \\"No\\". lookup = {} for idx, num in enumerate(nums): complement = target - num if complement in lookup: # Printing \\"Yes\\" and the 1-based indices print(\\"Yes\\") print(lookup[complement] + 1, idx + 1) return lookup[num] = idx print(\\"No\\")"},{"question":"You are given a rectangular matrix of dimensions N x M. Each cell contains a positive integer. You need to find the maximum sum of any subarray of this matrix. A subarray is defined by a contiguous rectangular block of the original matrix. Input The first line of the input contains an integer T - the number of test cases. The first line of each test case contains two integers N and M - the dimensions of the matrix. The next N lines, each containing M space-separated integers, represent the matrix. Output For each test case, output one integer on a separate line - the maximum sum of any subarray in the matrix. Constraints 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 1 ≤ matrix[i][j] ≤ 1000 Example Input: 2 2 2 1 2 3 4 3 3 1 2 3 4 5 6 7 8 9 Output: 10 45","solution":"def maximum_sum_subarray(matrix): def kadane(arr, size): max_end_here = max_so_far = arr[0] for i in range(1, size): max_end_here = max(arr[i], max_end_here + arr[i]) max_so_far = max(max_so_far, max_end_here) return max_so_far N = len(matrix) M = len(matrix[0]) max_sum = float(\'-inf\') for left in range(M): temp = [0] * N for right in range(left, M): for i in range(N): temp[i] += matrix[i][right] current_sum = kadane(temp, N) max_sum = max(max_sum, current_sum) return max_sum def solve_matrices_maximum_subarray_sum(T, test_cases): results = [] for t in range(T): N, M = test_cases[t][0] matrix = test_cases[t][1] results.append(maximum_sum_subarray(matrix)) return results"},{"question":"**Fish Tank Control** You are tasked with programming the control system of a fish tank that automatically regulates its temperature. The fish tank contains a heater and a cooler, which can be turned on or off. Additionally, there is a sensor that reports the current water temperature at regular intervals. You are given a target temperature `T` that the water should be kept at. If the water temperature is below the target, you should turn on the heater. If it\'s above the target, you should turn on the cooler. If the temperature is exactly at the target, both the heater and cooler should be turned off. Design a function `control_fish_tank(current_temperature: float, target_temperature: float) -> str` that takes two decimal numbers representing the current temperature and the target temperature, respectively. The function should return `\\"heater\\"` if the heater should be turned on, `\\"cooler\\"` if the cooler should be turned on, and `\\"off\\"` if neither the heater nor the cooler should be turned on. # Input - Two decimal numbers, `current_temperature` and `target_temperature` (0 ≤ current_temperature, target_temperature ≤ 100). # Output - A string: `\\"heater\\"`, `\\"cooler\\"`, or `\\"off\\"`. # Example Input ``` current_temperature = 22.5 target_temperature = 24.0 ``` Output ``` \\"heater\\" ``` Input ``` current_temperature = 26.3 target_temperature = 24.0 ``` Output ``` \\"cooler\\" ``` Input ``` current_temperature = 24.0 target_temperature = 24.0 ``` Output ``` \\"off\\" ```","solution":"def control_fish_tank(current_temperature: float, target_temperature: float) -> str: Determines the control action for the fish tank temperature regulation system. Parameters: current_temperature (float): The current temperature of the water. target_temperature (float): The desired target temperature of the water. Returns: str: \\"heater\\" if the heater should be turned on, \\"cooler\\" if the cooler should be turned on, \\"off\\" if neither the heater nor the cooler should be turned on. if current_temperature < target_temperature: return \\"heater\\" elif current_temperature > target_temperature: return \\"cooler\\" else: return \\"off\\""},{"question":"A security system logs alerts whenever access is attempted to various restricted rooms in a building. Each attempt logs the room number and the time of access in 24-hour format (HH:MM). Given a start time and an end time, you need to determine the maximum number of unique rooms that had access attempts during this period. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of access attempts logged. The next n lines each contain a room number (a non-negative integer) and an access time in the format HH:MM. The last line contains the start time and end time in the format HH:MM separated by a space. Output Output one number — the maximum number of unique rooms that had access attempts between the start time and the end time, inclusive. Examples Input 5 101 08:00 102 09:15 103 12:30 101 08:45 104 14:00 08:00 12:30 Output 3 Input 4 105 10:00 106 10:10 105 12:00 107 13:00 09:30 12:00 Output 2","solution":"def max_unique_rooms(n, logs, start_time, end_time): def to_minutes(time): h, m = map(int, time.split(\':\')) return h * 60 + m start_minutes = to_minutes(start_time) end_minutes = to_minutes(end_time) unique_rooms = set() for log in logs: room, access_time = log.split() room = int(room) access_minutes = to_minutes(access_time) if start_minutes <= access_minutes <= end_minutes: unique_rooms.add(room) return len(unique_rooms)"},{"question":"Given an array of integers and a target sum, determine if any two numbers within the array add up to the target sum. Return true if such a pair exists, otherwise return false. You need to optimize for time complexity. Constraints * The input array will have a length between 1 and 10^5. * Each element of the array will be an integer within the range [-10^9, 10^9]. * The target sum will be an integer within the range [-10^9, 10^9]. Input The first line of input consists of an integer n, the length of the array. The second line contains n space-separated integers which represent the elements of the array. The third line contains a single integer, the target sum. Output Print \\"true\\" if there are any two numbers in the array that add up to the target sum, otherwise print \\"false\\". Examples Input 4 2 7 11 15 9 Output true Input 3 1 2 3 7 Output false","solution":"def has_pair_with_sum(arr, target): Determines if there are any two numbers in the array that add up to the target sum. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"You are given a list of non-negative integers, where each integer represents the number of oranges in a corresponding box. You can perform the following operation any number of times: - Choose any two boxes and transfer an orange from one box to the other. Your task is to determine whether it is possible to make the number of oranges in each box equal. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of boxes. The second line contains n non-negative integers separated by spaces, where the i-th integer is the number of oranges in the i-th box. Output Print \\"YES\\" if it is possible to make the number of oranges in each box equal using the described operation. Otherwise, print \\"NO\\". Examples Input 5 1 3 5 7 9 Output YES Input 4 1 2 3 5 Output NO Note In the first example, you can perform the following sequence of operations to balance the boxes: - Transfer an orange from the second box to the first box. The number of oranges in each box will be [2, 2, 5, 7, 9]. - Transfer an orange from the third box to the first box. The number of oranges in each box will be [3, 2, 4, 7, 9]. - Continue this process until all boxes have the same number of oranges. In the second example, it is not possible to balance the oranges equally in all boxes regardless of the operations performed.","solution":"def can_balance_oranges(n, oranges): Determines if it is possible to make the number of oranges in each box equal using the described operation. :param n: An integer representing the number of boxes. :param oranges: A list of integers where each integer represents the number of oranges in a box. :return: \\"YES\\" if it is possible to balance the oranges equally, otherwise \\"NO\\". total_oranges = sum(oranges) # If the total number of oranges is divisible by the number of boxes, return \\"YES\\". if total_oranges % n == 0: return \\"YES\\" return \\"NO\\""},{"question":"A security company has a system for monitoring soldiers in a large area using sensors. The area is divided into a grid of cells, each containing a sensor that can detect if a soldier is present within the cell. However, sometimes the sensors might malfunction and provide false readings. To mitigate this, the system looks for a specific pattern to reliably detect the presence of soldiers: if at least two out of three consecutive cells in a row or a column indicate the presence of a soldier. Your task is to create a function to determine if this condition is satisfied for each row and column in the grid. # Input - The first line contains two integers `m` and `n`, the number of rows and columns in the grid respectively. (1 ≤ m, n ≤ 100) - The next `m` lines contain `n` characters each (either \'1\' or \'0\' with no spaces), representing the readings of the sensors for each cell where \'1\' indicates the presence of a soldier and \'0\' indicates no soldier. # Output - Print \\"YES\\" (without quotes) if the company can reliably determine that there are soldiers present in the monitored area based on the pattern condition. Otherwise, print \\"NO\\". # Example Input 4 5 10101 01110 11011 00101 Output YES Explanation In the example above, every row and column contains at least one instance where at least two out of three consecutive cells indicate the presence of a soldier. **Note:** - In the first row, \'10101\', there are multiple blocks of two consecutive cells with soldiers (i.e., \'10\', \'01\', and \'01\'). - In the first column, \'1010\', there are blocks of two consecutive cells with soldiers (i.e., \'10\' and \'01\'). By analyzing both rows and columns in the grid, the function should be able to determine if the \\"two out of three\\" pattern is satisfied for the given grid configuration. If so, print \\"YES\\". Otherwise, print \\"NO\\".","solution":"def detect_soldiers_pattern(grid, m, n): def has_two_out_of_three_consecutive(s): for i in range(len(s) - 2): if s[i:i+3].count(\'1\') >= 2: return True return False # Check rows for row in grid: if has_two_out_of_three_consecutive(row): return \\"YES\\" # Check columns for col in range(n): column = \'\'.join(grid[row][col] for row in range(m)) if has_two_out_of_three_consecutive(column): return \\"YES\\" return \\"NO\\""},{"question":"Create a program that takes a string of mixed-case alphabets and outputs the number of vowels (both upper-case and lower-case) in the string, along with their counts for each letter in alphabetical order, and the total number of vowels. Example: if a user inputs - \\"EducAtIon\\" the output is: a: 1 e: 1 i: 1 o: 1 u: 1 Total: 5 Note: The vowels are a, e, i, o, and u (consider both upper-case and lower-case as the same letter). SAMPLE INPUT EducAtIon SAMPLE OUTPUT a: 1 e: 1 i: 1 o: 1 u: 1 Total: 5","solution":"def count_vowels(s): This function takes a string of mixed-case alphabets and returns the count of each vowel (both upper-case and lower-case treated the same) along with the total number of vowels. # Convert the string to lower case to handle case insensitivity s = s.lower() # Define the vowels vowels = \'aeiou\' # Dictionary to store the counts of each vowel vowel_count = {vowel: 0 for vowel in vowels} # Total count of vowels total_count = 0 # Count the vowels for char in s: if char in vowels: vowel_count[char] += 1 total_count += 1 # Generate the output string result = [] for vowel in sorted(vowel_count.keys()): if vowel_count[vowel] > 0: result.append(f\\"{vowel}: {vowel_count[vowel]}\\") result.append(f\\"Total: {total_count}\\") return \\"n\\".join(result)"},{"question":"Your task is to write a function that takes a list of integers and returns the sum of all unique elements in the list. The list may contain both positive and negative integers, and duplicate values should only be counted once in the sum. Input: - An integer `n` representing the number of elements in the list (1 <= n <= 10^4). - A list of `n` integers, where each integer is between -10^4 and 10^4. Output: - A single integer representing the sum of all unique elements in the list. Example: Input: 5 1 2 3 2 1 Output: 6 Explanation: The unique elements in the list are 1, 2, and 3. Their sum is 1 + 2 + 3 = 6.","solution":"def sum_of_unique_elements(n, elements): Returns the sum of unique elements in the list \'elements\'. Args: n (int): Number of elements in the list. elements (list of int): List of integers. Returns: int: Sum of unique elements. return sum(set(elements))"},{"question":"A group of developers is working on a project to simulate the spread of a virus in a network of computers. Each computer is represented as a node in a graph, and the connections between them (potential paths for the virus to spread) are the edges. If one computer gets infected, it can spread the virus to all directly connected computers. The project requires an algorithm that determines the minimal steps required to infect the entire network, starting from an initially infected computer. If it\'s not possible to infect all computers, the algorithm should return -1. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000) — the number of computers (nodes) in the network and the number of connections (edges) respectively. Each of the following m lines contains two space-separated integers u and v (1 ≤ u, v ≤ n) indicating that there is a direct connection between computers u and v. The last line contains a single integer s (1 ≤ s ≤ n) — the initially infected computer. Output Output a single integer representing the minimum number of steps required to infect the entire network. If it is not possible to infect all computers, print -1. Examples Input 5 4 1 2 2 3 3 4 4 5 1 Output 4 Input 4 2 1 2 3 4 1 Output -1 Input 3 1 1 2 1 Output 2 Note In the first example, starting from computer 1, the virus infects computers 2, 3, 4, and finally 5 in four steps (1->2->3->4->5). In the second example, computers 3 and 4 are in a separate part of the network that’s not connected to the initially infected computer 1, so it\'s impossible to infect the entire network. In the third example, starting from computer 1, the virus infects computer 2 in one step and computer 3 in the next step, taking a total of two steps.","solution":"from collections import deque def min_steps_to_infect_network(n, m, edges, s): Determines the minimum number of steps required to infect the entire network starting from node `s`. :param n: int - Number of computers (nodes) :param m: int - Number of connections (edges) :param edges: List of tuples - Each tuple contains two integers indicating a direct connection (u, v) :param s: int - Initially infected computer :return: int - Minimum steps to infect the entire network or -1 if not possible # Create adjacency list graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS to find the shortest path to infect all nodes visited = {i: False for i in range(1, n + 1)} queue = deque([(s, 0)]) visited[s] = True max_steps = 0 infected_count = 0 while queue: node, steps = queue.popleft() max_steps = steps infected_count += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, steps + 1)) # Check if all nodes are infected if infected_count == n: return max_steps else: return -1"},{"question":"Alex loves playing with strings made up of lowercase English letters. He has a special interest in finding the largest palindromic substring within a given string. However, he is curious about modifying the string by changing a single character to see if it helps in forming a larger palindromic substring. Given a string s of length n (1 ≤ n ≤ 1000), you need to find the length of the largest palindromic substring that can be obtained by changing at most one character in the string. Input The first line contains an integer n (1 ≤ n ≤ 1000) – the length of the string. The second line contains the string s consisting of lowercase English letters. Output Print the length of the largest palindromic substring that can be obtained by changing at most one character in the string. Examples Input 7 abacaba Output 7 Input 5 abcde Output 3 Input 4 aabb Output 3","solution":"def longest_palindromic_substring_with_one_change(s): Returns the length of the largest palindromic substring that can be obtained by changing at most one character in the string. def is_palindrome(s): return s == s[::-1] n = len(s) max_len = 1 for i in range(n): for j in range(i, n): substring = s[i:j+1] if is_palindrome(substring): max_len = max(max_len, j-i+1) for i in range(n): for j in range(i, n): for k in range(i, j+1): original_char = s[k] for c in \'abcdefghijklmnopqrstuvwxyz\': if c != original_char: modified = s[:k] + c + s[k+1:] if is_palindrome(modified[i:j+1]): max_len = max(max_len, j-i+1) return max_len"},{"question":"You are given an array `a` consisting of `n` integers. You need to perform a set of operations on it, which can be of two types: 1. Update the element at the `i`-th position to x. 2. Calculate the sum of elements in the subarray from `l` to `r`, inclusive. Write a program that processes a list of operations and outputs the results of all operations of the second type. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100000), the number of elements in the array. - The second line contains `n` integers `a[1], a[2], ..., a[n]` (1 ≤ a[i] ≤ 100000). - The third line contains an integer `q` (1 ≤ q ≤ 100000), the number of operations. - The next `q` lines describe the operations. Each operation is described by three or four integers: - For the first type of operation, the line will be formatted as `1 i x`, where `1` indicates the type of operation, `i` (1 ≤ i ≤ n) is the index to update, and `x` (1 ≤ x ≤ 100000) is the new value. - For the second type of operation, the line will be formatted as `2 l r`, where `2` indicates the type of operation, and `l` and `r` (1 ≤ l ≤ r ≤ n) are the boundaries of the subarray to be summed. # Output For each operation of the second type, print the result on a new line. # Example Input 5 1 2 3 4 5 5 2 1 3 1 3 10 2 1 3 1 5 6 2 4 5 Output 6 13 10 Note: For the second example input, after updating the array to `[1, 2, 10, 4, 5]`, the sum from position 1 to 3 is 13. Then, after updating the array again to `[1, 2, 10, 4, 6]`, the sum from position 4 to 5 is 10.","solution":"def process_operations(n, a, q, operations): Processes the update and sum queries on the array `a`. :param n: Number of elements in the array `a`. :param a: List of integers representing the array. :param q: Number of operations. :param operations: List of operations to be performed on the array. :return: List of results for sum operations. results = [] for op in operations: if op[0] == 1: # Update operation i, x = op[1] - 1, op[2] a[i] = x elif op[0] == 2: # Sum operation l, r = op[1] - 1, op[2] results.append(sum(a[l:r])) return results"},{"question":"A team of archaeologists uncovered a set of ancient tablets with strange inscriptions. They deciphered the inscriptions as assemblies of alien robots. Each robot consists of multiple parts represented by uppercase letters, denoted as A, B, C, etc. The order of assembly matters, and no duplicate parts can be used within a single robot. The assembly process is described by multiple lines, where each line contains one of the following commands: - `ADD <part>`: Adds the specified part to the current robot in the correct assembly order (i.e., the order in which parts are added). - `START`: Begins a new robot assembly. - `END`: Finishes the current robot assembly. There can be multiple robots described sequentially in an input, but no robot is started after being finished using `END`. Your task is to decode these commands and output the assembly instructions for all robots. Assume the commands are correct and terminate appropriately. Input The input consists of multiple lines containing commands, with each command on a new line. Each `<part>` is represented by a single uppercase letter. The input is guaranteed to have at least one robot defined correctly. Output Output the alphabetical order of parts for each robot in the order they were assembled, one line per robot. Examples Input ``` START ADD A ADD B END START ADD C ADD A ADD B END ``` Output ``` AB ABC ``` Input ``` START ADD C ADD B ADD A END START ADD D ADD E ADD F END ``` Output ``` ABC DEF ``` Input ``` START ADD E ADD D END START ADD B ADD C ADD F END START ADD A END ``` Output ``` DE BCF A ``` Note: The input follows the sequence of commands precisely. Ensure parts are printed in alphabetical order and maintain the order of robots as they are assembled.","solution":"def decode_commands(commands): result = [] current_robot = None for command in commands: if command == \\"START\\": current_robot = [] elif command == \\"END\\": if current_robot is not None: result.append(\\"\\".join(sorted(current_robot))) current_robot = None elif command.startswith(\\"ADD\\"): _, part = command.split() if current_robot is not None and part not in current_robot: current_robot.append(part) return result"},{"question":"You have been given an array `arr` consisting of `n` integers. Your task is to process `q` queries, each asking for the minimum value in a subarray defined by its starting and ending indices. Write a program that processes these queries efficiently. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. - The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 10^9) — the elements of the array. - The third line contains an integer `q` (1 ≤ q ≤ 100,000) — the number of queries. - The following `q` lines each contain two integers `l` and `r` (1 ≤ l ≤ r ≤ n) — the 1-based starting and ending indices of the subarrays. # Output For each query, output a single integer — the minimum value in the specified subarray. # Example Input ``` 5 1 3 2 5 4 3 1 3 2 4 1 5 ``` Output ``` 1 2 1 ``` # Note - In the first query, the minimum value in the subarray from index 1 to 3 is 1. - In the second query, the minimum value in the subarray from index 2 to 4 is 2. - In the third query, the minimum value in the subarray from index 1 to 5 is 1. # Constraints - The array length `n` and number of queries `q` can be as large as 100,000. - The values in the array can be very large, up to 10^9. Thus, a naive approach to finding the minimum for each query could be too slow. - Consider using efficient data structures like a segment tree, sparse table, or other advanced techniques to ensure your solution can handle the largest input sizes in a reasonable timeframe.","solution":"def preprocess(arr): Preprocess the input array to allow efficient minimum queries using a Sparse Table. Returns the Sparse Table and the log array. import math n = len(arr) MAX_LOG = math.floor(math.log2(n)) + 1 # Create Sparse Table st = [[0] * MAX_LOG for _ in range(n)] log = [0] * (n + 1) # Initialize the Sparse Table for i in range(n): st[i][0] = arr[i] # Precompute logs for i in range(2, n + 1): log[i] = log[i // 2] + 1 # Build the Sparse Table j = 1 while (1 << j) <= n: i = 0 while (i + (1 << j) - 1) < n: st[i][j] = min(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]) i += 1 j += 1 return st, log def query(st, log, l, r): Query the minimum value in the range [l, r] using the Sparse Table. Adjust indexes from 1-based to 0-based for internal calculations. l -= 1 r -= 1 j = log[r - l + 1] return min(st[l][j], st[r - (1 << j) + 1][j]) def process_queries(n, arr, queries): Process each query and return the results. # Preprocess the array to build the Sparse Table st, log = preprocess(arr) # Process each query results = [] for l, r in queries: results.append(query(st, log, l, r)) return results"},{"question":"An e-commerce company is analyzing its user traffic. They maintain a log of user sessions in their system, where each session is defined by its start time and end time. The task is to find the maximum number of overlapping sessions at any given time. Given an array of tuples `sessions`, where each tuple `(start, end)` represents a session with start and end timestamps, create a function `max_overlapping_sessions(sessions)` that returns the maximum number of concurrent sessions. Here\'s the detailed specification: Input - `sessions`: A list of tuples where each tuple contains two integers `start` and `end` (0 ≤ start < end ≤ 10^9). The number of sessions `m` is between 1 and 10^5. Output - Return a single integer representing the maximum number of overlapping sessions. Example ```python sessions = [(1, 5), (2, 6), (4, 8), (3, 7)] print(max_overlapping_sessions(sessions)) # Output: 3 ``` Explanation: - The time intervals are: [1,5], [2,6], [4,8], [3,7]. - At time 4, three sessions are overlapping: [1,5], [2,6], and [4,8]. Hence, the maximum number of overlapping sessions is 3. Another Example ```python sessions = [(1, 2), (2, 3), (3, 4)] print(max_overlapping_sessions(sessions)) # Output: 1 ``` Explanation: - The time intervals are: [1,2], [2,3], [3,4]. - There is no overlap between the sessions. Hence, the maximum number of overlapping sessions is 1.","solution":"def max_overlapping_sessions(sessions): Returns the maximum number of concurrent sessions given a list of session intervals. events = [] for start, end in sessions: events.append((start, \'start\')) events.append((end, \'end\')) # Sort events first by time, then by type (end before start when the times are the same) events.sort(key=lambda x: (x[0], x[1] == \'start\')) max_overlap = 0 current_overlap = 0 for time, type in events: if type == \'start\': current_overlap += 1 max_overlap = max(max_overlap, current_overlap) else: current_overlap -= 1 return max_overlap"},{"question":"You are given an array of n integers. Your task is to find a subsequence of the array such that the product of its elements is the largest even product possible. If there are multiple subsequences with the same product, you can return any. If no even product is possible, return an empty subsequence. A subsequence is a sequence that can be derived from the array by deleting some elements without changing the order of the remaining elements. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output On the first line, print the largest possible even product and its corresponding subsequence. On the second line, print the indices of the selected elements in the subsequence in the original array (1-based indices). If there are multiple answers, print any. If no even product is possible, print 0 on the first line and an empty line on the second. Example Input 6 3 5 2 3 4 6 Output 144 2 3 4 6 Explanation The largest even product can be achieved by selecting the subsequence [5, 2, 4, 6], which gives the product 5 * 2 * 4 * 6 = 240. Note It\'s guaranteed that there\'s always at least one even number in the array.","solution":"def largest_even_product_subsequence(arr): n = len(arr) even_numbers = [x for x in arr if x % 2 == 0] if not even_numbers: return (0, []) even_product = 1 selected_indices = [] for i, val in enumerate(even_numbers): even_filetered_index = [index+1 for index, value in enumerate(arr) if value in even_numbers ] even_product *= val return (even_product, even_filetered_index)"},{"question":"Given a binary matrix of size `m x n`, determine the size of the largest square sub-matrix that contains only 1s. You are provided with an `m x n` binary matrix. Your task is to write a function that finds and returns the size (area) of the largest square sub-matrix within the given binary matrix that contains only 1\'s. **Input:** - The first line contains two integers `m` and `n` representing the number of rows and columns in the matrix, respectively. - The next `m` lines contain `n` integers each (either 0 or 1), representing the binary matrix. **Output:** - Print an integer representing the area of the largest square sub-matrix that contains only 1\'s. **Example:** Input: ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` Output: ``` 4 ``` Input: ``` 3 3 0 1 1 1 1 1 1 1 0 ``` Output: ``` 4 ``` **Note:** In the first example, the largest square sub-matrix with only 1\'s has the size 2x2, and thus the area is 2*2 = 4. In the second example, the largest square sub-matrix of 1\'s also has the size 2x2, resulting in an area of 4.","solution":"def largest_square_area(matrix): if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0] * n for _ in range(m)] max_side_length = 0 for i in range(m): for j in range(n): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length * max_side_length"},{"question":"Shivam loves music and he has a list of his favorite songs. Each song is represented by its length in minutes. Shivam wants to create a playlist for his road trip which should be as close as possible to a given length, L, in minutes. However, he cannot repeat any song in the playlist, and the total length of the playlist should not exceed L. Help Shivam find the longest playlist length he can achieve that is at most L minutes. Input The first line contains two integers n (1 ≤ n ≤ 1000) and L (1 ≤ L ≤ 1000) — the number of songs in Shivam\'s list and the desired maximum length of the playlist. The second line contains n space-separated integers describing the lengths of the songs in minutes (1 ≤ length of each song ≤ 1000). Output Print a single integer — the length of the longest possible playlist that is at most L minutes. Examples Input 5 10 3 6 7 8 2 Output 10 Input 4 15 4 1 8 12 Output 13 Note In the first sample, Shivam can choose the songs with lengths 3 and 7 to get a playlist of 10 minutes, which is the maximum possible length without exceeding 10 minutes. In the second sample, Shivam can choose the songs with lengths 1, 4, and 8 to get a playlist of 13 minutes, which is the longest possible length without exceeding 15 minutes.","solution":"def longest_playlist_length(n, L, song_lengths): Given the number of songs \'n\', the maximum length \'L\' of the playlist and the list of song lengths, return the length of the longest possible playlist that is at most L minutes. # To solve this problem, we will use a variation of the knapsack problem (0/1 Knapsack problem). # We create a dp array of size L+1 to store the maximum length of playlist achievable for each # length up to L. dp = [0] * (L + 1) for length in song_lengths: # We update the dp array in reverse order to ensure that each song is only used once. for i in range(L, length - 1, -1): dp[i] = max(dp[i], dp[i - length] + length) return dp[L] # Example usage: # n = 5, L = 10, song_lengths = [3, 6, 7, 8, 2] # print(longest_playlist_length(5, 10, [3, 6, 7, 8, 2])) # Output: 10"},{"question":"Sara loves circles! She likes to explore various properties of a circle given its radius. Given a circle\'s radius, Sara wants to calculate the area and the circumference of the circle. Provide the results rounded to 8 decimal places. Input A single integer r (0 ≤ r ≤ 1000) is given, representing the radius of the circle. Output Two floating-point numbers: the area and the circumference of the circle. Your answers must be rounded to 8 decimal places. Examples Input 1 Output 3.14159265 6.28318531 Input 10 Output 314.15926536 62.83185307","solution":"import math def circle_properties(r): Given the radius of a circle, returns the area and circumference of the circle rounded to 8 decimal places. area = round(math.pi * r ** 2, 8) circumference = round(2 * math.pi * r, 8) return area, circumference"},{"question":"You are given an `m x n` grid where each cell contains a non-negative integer. You are also given an integer `k`, which represents the maximum number of steps you can move in the grid. From each cell `(i, j)` in the grid, you can move to any of the cells `(i+1, j)`, `(i-1, j)`, `(i, j+1)`, `(i, j-1)`, `(i + k, j)`, `(i - k, j)`, `(i, j + k)`, `(i, j - k)` provided the destination cells are within the grid boundaries. Your task is to find the maximum integer you can reach starting from the top-left corner of the grid `(0, 0)` while making at most `k` moves. Constraints * `1 <= m, n <= 100` * `0 <= grid[i][j] <= 10000` * `1 <= k <= 5` Input The input is given from Standard Input in the following format: ``` m n k grid[0][0] grid[0][1] ... grid[0][n-1] grid[1][0] grid[1][1] ... grid[1][n-1] . . grid[m-1][0] grid[m-1][1] ... grid[m-1][n-1] ``` Output Print a single integer indicating the maximum integer you can reach starting from the cell `(0, 0)` with at most `k` moves. Examples Input: ``` 3 4 2 1 3 1 5 2 2 4 1 5 0 3 0 ``` Output: ``` 5 ``` Input: ``` 2 2 1 1 2 3 4 ``` Output: ``` 4 ```","solution":"def max_value_in_grid(m, n, k, grid): Returns the maximum value in the grid that can be reached from (0, 0) within at most k steps. Parameters: ----------- m (int): rows in the grid n (int): columns in the grid k (int): max number of steps grid (list[list[int]]): grid data Returns: -------- int: max value that can be reached within k steps from collections import deque # Directions for normal step and k step directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (k, 0), (-k, 0), (0, k), (0, -k)] # BFS initialization queue = deque([(0, 0)]) # Queue stores positions visited = set() visited.add((0, 0)) max_value = grid[0][0] while queue: r, c = queue.popleft() for dr, dc in directions: new_r, new_c = r + dr, c + dc if 0 <= new_r < m and 0 <= new_c < n and (new_r, new_c) not in visited: visited.add((new_r, new_c)) queue.append((new_r, new_c)) max_value = max(max_value, grid[new_r][new_c]) return max_value"},{"question":"You are given a string and you need to perform several operations on it. The operations are defined as follows: * substr(l, r): Print the substring of the given string starting from the l-th character to the r-th character inclusive. * concat(s): Concatenate the string s to the end of the current string. * replace(l, r, s): Replace the substring from the l-th character to the r-th character inclusive with the string s. * erase(l, r): Remove the substring from the l-th character to the r-th character inclusive. Constraints * 1 leq q leq 100,000 * 0 leq l leq r < |string| * The input strings consist of only lowercase English letters. * The lengths of string and s are at most 100,000. Input The input is given in the following format: ``` initial_string q query_1 query_2 : query_q ``` Each query query_i is given in one of the following formats: ``` 0 l r ``` or ``` 1 s ``` or ``` 2 l r s ``` or ``` 3 l r ``` The first digit 0, 1, 2, or 3 represents the operation substr(l, r), concat(s), replace(l, r, s), or erase(l, r) respectively. Output Print the result of each substr operation. Example Input ``` abcdef 8 0 0 2 1 ghi 0 3 5 2 0 2 xyz 0 0 5 3 2 4 0 0 2 0 2 2 ``` Output ``` abc def xyzdef xyf f ```","solution":"def perform_operations(initial_string, queries): Perform operations on the given initial_string based on the given queries. result = [] s = initial_string for query in queries: parts = query.split() operation = int(parts[0]) if operation == 0: l, r = int(parts[1]), int(parts[2]) result.append(s[l:r+1]) elif operation == 1: concat_str = parts[1] s += concat_str elif operation == 2: l, r, replace_str = int(parts[1]), int(parts[2]), parts[3] s = s[:l] + replace_str + s[r+1:] elif operation == 3: l, r = int(parts[1]), int(parts[2]) s = s[:l] + s[r+1:] return result"},{"question":"Given an integer array, find the difference between the maximum and minimum element of the array and print the result. Constraints * The array consists of integers. * The length of the array is between 1 and 100 (inclusive). * Each integer in the array is between -10^3 and 10^3. Input Input is given from Standard Input in the following format: N A1 A2 A3 ... AN Here, N is the length of the array, and A1, A2, A3, ..., AN are the elements of the array. Output Print the difference between the maximum and minimum element of the array. Examples Input 5 1 3 -1 7 5 Output 8 Input 3 1000 2000 3000 Output 2000 Input 4 -1000 -500 -750 -250 Output 750","solution":"def find_difference(arr): Returns the difference between the maximum and minimum element of the array. if not arr: return 0 max_elem = max(arr) min_elem = min(arr) return max_elem - min_elem if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) # First line is the length of array arr = list(map(int, data[1:n+1])) # Next are the elements of the array print(find_difference(arr))"},{"question":"You are working on a software project where you need to implement a string compression algorithm. The algorithm should compress the string by replacing sequences of the same character with that character followed by the number of times it appears consecutively. If the compressed string is not shorter than the original string, you should return the original string instead. Input The input consists of a single string s (1 ≤ |s| ≤ 1000), where |s| represents the length of the string. The string only contains uppercase alphabetic characters (A-Z). Output Print the compressed string if it is shorter than the original string. Otherwise, print the original string. Examples Input AAABBBCCCAA Output A3B3C3A2 Input ABCD Output ABCD Input AABBBAABB Output A2B3A2B2 Note In the first example, the compressed string \\"A3B3C3A2\\" is shorter than the original string \\"AAABBBCCCAA\\", so the compressed string is returned. In the second example, the original string \\"ABCD\\" is not compressible into a shorter string, so it is returned as is. In the third example, the compressed string \\"A2B3A2B2\\" is shorter than the original string \\"AABBBAABB\\", so the compressed string is returned.","solution":"def compress_string(s): Compresses the string by replacing sequences of the same character with that character followed by the number of times it appears consecutively. If the compressed string is not shorter than the original string, it returns the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) # append the last sequence compressed_string = \'\'.join(compressed) if len(compressed_string) < len(s): return compressed_string else: return s"},{"question":"Oleg is now focusing on a new coding problem inspired by his love for prime numbers. He wants to find out how many prime numbers exist in a specific range. Given a range [a, b], count the number of prime numbers within that range, inclusive. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Help Oleg solve this problem by writing a program that determines the number of prime numbers in the given range. Input The first line contains two integers a and b (1 ≤ a ≤ b ≤ 10^6), representing the range. Output Print a single integer, the count of prime numbers in the given range. Examples Input 10 30 Output 6 Note The prime numbers between 10 and 30 are 11, 13, 17, 19, 23, and 29. Hence, the output is 6.","solution":"import math def count_primes_in_range(a, b): Returns the count of prime numbers in the range [a, b], inclusive. def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True prime_count = 0 for number in range(a, b + 1): if is_prime(number): prime_count += 1 return prime_count"},{"question":"You are given a string consisting of lowercase English alphabets. In one move you can remove any two adjacent characters in the string if they are the same and add one occurrence of the next letter of the alphabet at the same position. For example, if the string contains \\"aa\\", you can remove \\"aa\\" and replace them with \\"b\\". If the string contains \\"zz\\", you can remove \\"zz\\" and replace them with \\"a\\". Determine the minimum number of moves required to reduce the string to its minimal possible length. If it is impossible to perform any moves, print 0. Input The first line contains a string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. Output Print the minimum number of moves required to reduce the string to the minimal possible length. Examples Input abba Output 1 Input aabbcc Output 3 Input abcd Output 0 Note In the first example, you can perform one move: remove \\"bb\\" and replace them with \\"c\\" → \\"ac\\" which is the minimal possible length. In the second example, you can perform the following sequence of moves: remove \\"aa\\" and replace them with \\"b\\" → \\"bbcc\\" → remove \\"bb\\" and replace them with \\"c\\" → \\"ccc\\" → \\"aa\\" and replace them with \\"b\\" → \\"aac\\". In the third example, no moves can be performed, so the output is 0.","solution":"def minimal_length_moves(s): Returns the minimum number of moves required to reduce the string to its minimal possible length. def next_char(c): return chr((ord(c) - 97 + 1) % 26 + 97) moves = 0 stack = [] for char in s: if stack and stack[-1] == char: stack.pop() stack.append(next_char(char)) moves += 1 else: stack.append(char) return moves"},{"question":"Fiona loves to paint, and she owns a unique painting robot. The robot can paint in a very specific way: it always moves up, down, left, or right one unit per command and stops painting when it returns to the original starting point. Fiona is curious to know the minimum number of commands needed for the robot to return to its starting point after painting. You are given the initial number of commands that the robot needs to follow. Each command is represented by a character: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. You need to determine the minimal additional commands required to make sure the robot returns to its starting point. Input: The first line contains a single integer N representing the initial number of commands. The second line contains a string of length N, consisting of the characters \'U\', \'D\', \'L\', and \'R\' representing the commands the robot initially follows. Output: Print the minimal number of additional commands required for the robot to return to its starting point. Constraints: 1 ≤ N ≤ 1000 SAMPLE INPUT 4 UDUD SAMPLE OUTPUT 0 SAMPLE INPUT 6 UDLRUU SAMPLE OUTPUT 2 Explanation: For the first example, the robot already returns to its starting point, so no additional commands are needed. For the second example, the robot needs to move down twice (\'DD\') to counter the two \'U\' commands. Thus, 2 additional commands are required.","solution":"def minimal_additional_commands(n, commands): Calculate the minimal additional commands required for the robot to return to its starting point. Args: n (int): Number of initial commands. commands (str): String of commands which are \'U\', \'D\', \'L\', \'R\' Returns: int: Minimal number of additional commands required. vertical = 0 # net vertical distance horizontal = 0 # net horizontal distance for command in commands: if command == \'U\': vertical += 1 elif command == \'D\': vertical -= 1 elif command == \'L\': horizontal -= 1 elif command == \'R\': horizontal += 1 return abs(vertical) + abs(horizontal)"},{"question":"Shuffling the Words Alex loves creating patterns with words. Recently, he discovered a fun game where he can shuffle the words in a sentence to see how many distinct sentences can be created if these words are shuffled without changing the relative order of the letters within each word. For example, given a set of words [\\"cat\\", \\"dog\\"], the shuffled sentences could be: \\"cat dog\\" or \\"dog cat\\". Your task is to determine the number of distinct sentences that can be formed from a given set of words by shuffling them. Input The input consists of at most 50 datasets, each in the following format. n word1 word2 ... wordn The first line contains a number n, which is the number of words in the dataset. The following line contains n distinct words separated by single spaces. Each word consists of lowercase English letters and has a length of at most 100. The end of the input is indicated by a line containing zero. Output For each dataset, output the number of distinct sentences that can be formed by shuffling the words. Sample Input 2 cat dog 3 apple banana cherry 4 one two three four 0 Output for the Sample Input 2 6 24 Example Input 2 cat dog 3 apple banana cherry 4 one two three four 0 Output 2 6 24","solution":"import math def count_distinct_sentences(n, words): Returns the number of distinct sentences that can be formed by shuffling the words. if n == 0: return 0 return math.factorial(n) def process_input(data): results = [] i = 0 while i < len(data): n = int(data[i]) if n == 0: break words = data[i + 1].split() results.append(count_distinct_sentences(n, words)) i += 2 return results"},{"question":"You are given a grid with n rows and m columns filled with integers. You should find the minimum path sum from the top-left corner to the bottom-right corner. You can only move right or down at any point in time. Write a program that solves this problem using dynamic programming. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. The next n lines contain m integers each — the grid values, where the j-th integer in the i-th line represents the value in the cell (i, j). Output Print the minimum path sum from the top-left corner to the bottom-right corner. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Note In the provided example, the minimum path sum is obtained by going down, down, right, right which totals to 1 + 1 + 4 + 1 = 7.","solution":"def min_path_sum(n, m, grid): Finds the minimum path sum from the top-left corner to the bottom-right corner of a grid, moving only right or down. # Create a dp array to store the minimum path sums dp = [[0] * m for _ in range(n)] # Initialize the first cell with the grid\'s first cell value dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the minimum path sum return dp[n-1][m-1]"},{"question":"Peter loves spending his free time solving puzzles. Today, he stumbled upon an interesting number game. In this game, he has to find a contiguous subarray from a given array of integers such that the sum of the subarray\'s elements is the maximum possible. However, there are some additional rules. Peter can choose to skip one element entirely from the array to maximize the sum of the subarray. He can choose to skip one element, or he can choose not to skip any element at all. Help Peter determine the maximum sum he can achieve by applying this strategy. Write a function to calculate this maximum sum. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100000) — the number of elements in the array. - The second line contains `n` integers `a1, a2, ..., an` (−10^4 ≤ ai ≤ 10^4) — the elements of the array. # Output - Print a single integer — the maximum sum of the contiguous subarray, with the option to skip one element from the array. # Examples Input 6 1 -2 3 4 -1 2 Output 9 Input 5 -2 -3 4 -1 -2 Output 4 # Note In the first sample, the maximum sum is obtained by skipping the second element -2 and taking the subarray [1, 3, 4, -1, 2]. In the second sample, the maximum sum is obtained by taking the subarray [4], and the negative numbers are better to be skipped altogether.","solution":"def maximum_sum_with_skip(arr): n = len(arr) if n == 0: return 0 max_end_here = [0] * n max_with_skip = [0] * n max_end_here[0] = arr[0] result = arr[0] for i in range(1, n): max_end_here[i] = max(arr[i], max_end_here[i-1] + arr[i]) max_with_skip[i] = max(max_end_here[i-1], max_with_skip[i-1] + arr[i]) result = max(result, max_end_here[i], max_with_skip[i]) return result"},{"question":"Alex is building a custom storage system and needs a specific storage module with certain capacity values. Alex has an unlimited supply of storage units with a unit capacity C0 = 1. Using these units, Alex can create larger storage modules. The valid operations for creating a new module are: 1. A single storage unit. 2. A storage unit added to an existing module sequentially. 3. Two existing modules combined sequentially. For sequential additions, the capacity of the new module equals C = Cm + C0, while for combining two existing modules, the capacity of the new module equals C = Ca + Cb, where Cm, Ca, and Cb denote the capacities of the existing modules. Alex needs to build a storage module with a capacity equal to a fraction frac{a}{b}, where a and b are given integers. Determine the smallest number of storage units required to form such a module. Input: The single input line contains two space-separated integers a and b (1 ≤ a, b ≤ 10^18). It is guaranteed that the fraction frac{a}{b} is irreducible. It is guaranteed that a solution always exists. Output: Print a single number — the answer to the problem. # Examples Input ``` 1 1 ``` Output ``` 1 ``` Input ``` 5 3 ``` Output ``` 5 ``` Input ``` 17 4 ``` Output ``` 17 ``` # Note In the first example, only one storage unit is needed since 1/1 is the unit capacity itself. In the second example, five storage units can be combined sequentially to provide a capacity of 5, which when divided by 3 gives the required storage module capacity of 5/3. However, it\'s more optimal this way: Create two storage units with capacities 1 and 2, combine them to get 3 units, and combine this with another unit to get 5.","solution":"def smallest_number_of_storage_units(a, b): Returns the smallest number of storage units required to form the storage module with a capacity of the irreducible fraction a / b. return a"},{"question":"In an ancient kingdom, there is a currency system with coins of the following denominations: 1, 5, 10, 25 (let\'s call them C1, C5, C10, C25 respectively). The king has ordered you to design an algorithm to determine the minimum number of coins needed to make up a given amount of money. Write a function `min_coins` which takes a single integer `amount` as input and returns the minimum number of coins needed to make up that amount. Input - An integer `amount` (1 ≤ amount ≤ 10000) which is the amount of money we need to find coins for. Output - An integer representing the minimum number of coins needed to make up the given amount. Examples Input 23 Output 5 Input 75 Output 3 Note In the first example, the optimal way to get 23 is using two 10-value coins and three 1-value coins, making a total of 5 coins. In the second example, the optimal way to get 75 is using three 25-value coins, making a total of 3 coins.","solution":"def min_coins(amount): Returns the minimum number of coins needed to make up the given amount. The coin denominations used are 1, 5, 10, and 25. coins = [25, 10, 5, 1] count = 0 for coin in coins: count += amount // coin amount %= coin return count"},{"question":"Alice loves puzzles, and she has recently come across a classic problem: generating Pascal\'s Triangle. Pascal\'s Triangle is a triangular array of the binomial coefficients. The (i, j)-th entry of Pascal\'s Triangle can be computed using the formula: [ C(i, j) = binom{i}{j} = frac{i!}{j!(i-j)!} ] where i is the row index and j is the column index, both starting from 0. Alice has a unique puzzle for you: she wants you to generate Pascal\'s Triangle up to the n-th row and output the total sum of all the elements in the triangle up to this row. Can you solve her puzzle? Input The input consists of a single integer n (0 ≤ n ≤ 1000) representing the number of rows of Pascal\'s Triangle to generate. Output Output a single integer which is the sum of all the elements in Pascal\'s Triangle up to and including the n-th row. Examples Input 3 Output 15 Input 0 Output 1 Note For the first test sample, Pascal\'s Triangle up to the 3rd row (inclusive) is: [ begin{array}{cccccc} & 1 & & & & & 1 & 1 & & & & 1 & 2 & 1 & & 1 & 3 & 3 & 1 & & end{array} ] The sum of all elements: 1 + (1 + 1) + (1 + 2 + 1) + (1 + 3 + 3 + 1) = 15. For the second test sample, Pascal\'s Triangle up to the 0th row (inclusive) is: [ begin{array}{c} 1 end{array} ] The sum of all elements: 1.","solution":"def pascals_triangle_sum(n): This function takes an integer n and returns the sum of all the elements in Pascal\'s Triangle up to and including the n-th row. if n == 0: return 1 sum_total = 0 for i in range(n + 1): row_sum = 2 ** i sum_total += row_sum return sum_total"},{"question":"Given a sequence of n integers representing the heights of students in a classroom, you are required to reorganize the sequence such that every student is either taller than both neighbors or shorter than both neighbors. If there are multiple correct solutions, you can output any of them. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the number of students. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 106) — the heights of the students in the initial order. Output Print the sequence of heights after reorganization. Examples Input 5 4 3 2 5 1 Output 3 5 2 4 1 Input 4 1 2 3 4 Output 1 3 2 4 Note In the first example, the reorganization can be done in multiple ways, one example is 3 5 2 4 1 where every student is either taller than both neighbors or shorter than both neighbors. In the second example, one valid reorganization is 1 3 2 4. Here, 3 is taller than its neighbors 1 and 2, and 4 is taller than its neighbors 2 and 3.","solution":"def reorganize_students_heights(n, heights): Reorganize students\' heights such that every student is either taller than both neighbors or shorter than both neighbors. if n <= 1: return heights # Sort the heights heights.sort() # Place the smallest half elements in even indices and the largest half elements in odd indices result = [0] * n mid = (n + 1) // 2 result[::2] = heights[:mid] # Fill even indices with the smaller half result[1::2] = heights[mid:] # Fill odd indices with the larger half return result"},{"question":"Given a positive integer N, find the smallest integer greater than or equal to N that is a multiple of 7. You need to print this integer. Constraints * 1 leq N leq 1000 * All values in input are integers. Input Input is given from Standard Input in the following format: N Output Print the smallest integer greater than or equal to N that is a multiple of 7. Examples Input 20 Output 21 Input 49 Output 49 Input 60 Output 63","solution":"def smallest_multiple_of_7(N): Given a positive integer N, finds the smallest integer greater than or equal to N that is a multiple of 7. if N % 7 == 0: return N else: return N + (7 - N % 7)"},{"question":"In a faraway kingdom called Techlandia, the wise king has decided to organize a grand coding contest. He recorded the scores of all the participants and now wants to rank them, but in a unique way. The participants should be ranked based on their scores in descending order, and participants with equal scores should maintain their original order of appearance. Your task is to write a program that helps the king to rank the participants according to his requirements. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of participants. The next n lines contain one integer each, the score of the i-th participant (1 ≤ score ≤ 1000). Output Output n lines, each containing the score of the participant in the ranked order as described. Examples Input 5 300 200 400 400 100 Output 400 400 300 200 100 Input 3 500 500 700 Output 700 500 500 Note In the first example, participants with scores 400 maintain their original order of appearance and come first in the rank. The other scores are sorted in descending order. In the second example, participant with score 700 comes first, followed by the participants with scores 500 in their original order of appearance.","solution":"def rank_participants(n, scores): Ranks the participants\' scores in descending order. Participants with the same score keep original order. Parameters: - n (int): Number of participants. - scores (list of int): Scores of the participants. Returns: - list of int: Ranked scores according to the rules. # Pair each score with its original index indexed_scores = list(enumerate(scores)) # Sort by score first (in descending order), then by original index sorted_scores = sorted(indexed_scores, key=lambda x: (-x[1], x[0])) # Extract the sorted scores result = [score for idx, score in sorted_scores] return result # Example usage: # n = 5 # scores = [300, 200, 400, 400, 100] # ranked_scores = rank_participants(n, scores) # print(ranked_scores) # Output should be [400, 400, 300, 200, 100]"},{"question":"In a city, there are n buildings arranged in a row. Each building has a certain height. After a series of operations where each operation consists of either increasing the height of a selected building or decreasing the height of a selected building by 1 unit, you need to make all buildings\' heights equal. Determine the minimum number of operations required to make all buildings\' heights the same. Input First line of input consists of an integer n (1 ≤ n ≤ 100). Next line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100) representing the heights of the buildings. Output Output a single integer, the minimum number of operations required. Examples Input 3 1 2 3 Output 2 Input 5 5 5 5 5 5 Output 0","solution":"def min_operations_to_equal_heights(n, heights): Returns the minimum number of operations required to make all building heights equal. Parameters: n (int): Number of buildings. heights (list of int): List of heights of the buildings. Returns: int: Minimum number of operations. if n == 1: return 0 median_height = sorted(heights)[n // 2] operations = sum(abs(height - median_height) for height in heights) return operations"},{"question":"Given a non-negative integer `num`, repeatedly add all its digits until the result has only one digit. For example, given `num = 38`, the process is like: - 3 + 8 = 11 - 1 + 1 = 2 Since `2` has only one digit, return it. Implement the function `addDigits(num: int) -> int` to achieve this. Input: - The input is a non-negative integer `num`. Output: - The output should be a single-digit integer which is the result of repeatedly adding all digits until only one digit remains. **Examples** 1. **Input**: ` num = 38` **Output**: `2` 2. **Input**: ` num = 123` **Output**: `6` 3. **Input**: ` num = 0` **Output**: `0` Constraints: - `0 <= num <= 2^31 - 1`","solution":"def addDigits(num: int) -> int: Given a non-negative integer num, repeatedly add all its digits until the result has only one digit. while num >= 10: num = sum(int(digit) for digit in str(num)) return num"},{"question":"You are given an array of integers where each element represents the number of minutes it takes to complete a certain task. The day is divided into two shifts: morning and afternoon. The objective is to determine if you can assign the tasks into the two shifts such that the total time for both shifts is exactly equal. Each task can only be assigned to one shift. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of tasks. The next line contains a space-separated list of n integers, where each integer ti (1 ≤ ti ≤ 1000) represents the time in minutes it takes to complete the i-th task. Output Output \\"YES\\" if you can divide the tasks into two shifts with equal total time, otherwise, output \\"NO\\". Examples Input 4 30 40 20 10 Output YES Input 5 10 20 30 40 30 Output NO Note In the first example, the tasks can be divided into two shifts as follows: {30, 40} and {20, 10} with both shifts summing up to 70 minutes. In the second example, it is not possible to divide the tasks into two shifts with equal total time.","solution":"def can_divide_tasks_equally(n, tasks): Determines if it\'s possible to divide tasks into two shifts with equal total time. Args: n (int): The number of tasks. tasks (list of int): The time in minutes for each task. Returns: str: \\"YES\\" if it\'s possible to divide the tasks equally, otherwise \\"NO\\". total_time = sum(tasks) # If total time is odd, we can\'t split it into two equal parts if total_time % 2 != 0: return \\"NO\\" # We need to see if we can form a subset with sum equal to total_time / 2 target = total_time // 2 # Initialize the dp array, where dp[i] will be True if sum i can be formed by any subset of tasks dp = [False] * (target + 1) dp[0] = True # Process each task for task in tasks: for i in range(target, task - 1, -1): dp[i] = dp[i] or dp[i - task] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"You are given an N x N grid, where each cell contains either a 0 or a 1. Cells with 0 are considered open spaces, while cells with 1 are considered obstacles. A robot is placed at the top-left corner of the grid (0, 0) and needs to reach the bottom-right corner of the grid (N-1, N-1). The robot can only move right or down. However, the robot is equipped with a single ability to clear exactly one obstacle (change a 1 to a 0) in its path to help find the path. To help the robot, you need to determine the minimum number of moves required to reach the bottom-right corner, considering that it can clear one obstacle on its way. Input The first line contains a single integer T, the number of test cases (1 ≤ T ≤ 10). Each test case starts with an integer N (1 ≤ N ≤ 50), representing the size of the grid. This is followed by N lines, each containing N integers (either 0 or 1), representing the grid. Output For each test case, output a single line containing the minimum number of moves required to reach the bottom-right corner from the top-left corner, or -1 if it is not possible to reach the destination even after clearing one obstacle. Example Input: 2 3 0 0 1 0 1 0 1 0 0 3 0 1 1 1 1 1 1 1 0 Output: 4 -1 Explanation In the first test case, the robot can clear the obstacle at (0, 2) and then follow the path (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2). The minimum number of moves required is 4. In the second test case, even after clearing one obstacle, there is no path from (0,0) to (2,2). Hence, the output is -1.","solution":"from collections import deque def min_moves_to_reach_with_obstacle_clearing(grid): N = len(grid) directions = [(1, 0), (0, 1)] def in_bounds(x, y): return 0 <= x < N and 0 <= y < N visited = [[[False, False] for _ in range(N)] for _ in range(N)] visited[0][0][0] = True queue = deque([(0, 0, 0, 0)]) while queue: x, y, cleared, moves = queue.popleft() if x == N - 1 and y == N - 1: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if in_bounds(nx, ny): if grid[nx][ny] == 0 and not visited[nx][ny][cleared]: visited[nx][ny][cleared] = True queue.append((nx, ny, cleared, moves + 1)) elif grid[nx][ny] == 1 and cleared == 0 and not visited[nx][ny][1]: visited[nx][ny][1] = True queue.append((nx, ny, 1, moves + 1)) return -1 def solve(T, grids): results = [] for grid in grids: results.append(min_moves_to_reach_with_obstacle_clearing(grid)) return results"},{"question":"You are working with a robot designed to clean a rectangular grid of cells. The grid consists of some cells that are dirty and some that are clean. The robot starts at a designated starting cell and can move to adjacent cells in four possible directions: up, down, left, and right. The goal is to determine the minimum number of moves required for the robot to clean all dirty cells on the grid, starting from the initial position. A cell is considered dirty if it contains the character \'D\', clean if it contains the character \'.\', and blocked (i.e., inaccessible) if it contains the character \'#\'. The robot cannot move through blocked cells. Input The input is given in the following format: R C grid The first line provides the number of rows R (1 leq R leq 50) and the number of columns C (1 leq C leq 50). The next R lines give the grid itself, where each line is a string of length C consisting of characters \'D\', \'.\', and \'#\'. The robot starts at the top-left corner of the grid (position (0,0)). Output Output a single integer representing the minimum number of moves required for the robot to clean all dirty cells. If it is not possible to clean all dirty cells, output \\"-1\\". Examples Input 5 6 D.D.#. ..D..# .#D.D. D..#.. ..D.D. Output 16 Input 3 3 D#D .#. D#D Output -1","solution":"from collections import deque def min_moves_to_clean(R, C, grid): Determines the minimum number of moves required for the robot to clean all dirty cells on the grid. def bfs(start): visited = [[False] * C for _ in range(R)] queue = deque([(start, 0)]) visited[start[0]][start[1]] = True while queue: (x, y), dist = queue.popleft() if grid[x][y] == \'D\': yield (x, y), dist for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C and not visited[nx][ny] and grid[nx][ny] != \'#\': visited[nx][ny] = True queue.append(((nx, ny), dist + 1)) dirty_cells = [(i, j) for i in range(R) for j in range(C) if grid[i][j] == \'D\'] if not dirty_cells: return 0 start = (0, 0) if grid[start[0]][start[1]] == \'#\': return -1 total_moves = 0 for target in dirty_cells: for (cell, dist) in bfs(start): if cell == target: total_moves += dist start = cell break else: return -1 return total_moves"},{"question":"A software company wants to distribute badges among its employees based on their scores. The number of badges each employee receives should satisfy the following conditions: 1. Each employee must receive at least one badge. 2. Employees with a higher score should receive more badges than their immediate lower score neighbors. You are given an array of integers representing the scores of `n` employees. Your task is to compute the minimum number of badges required to distribute among the employees according to the above rules. Input: The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. Each test case contains two lines: - The first line contains a single integer `n` (1 ≤ n ≤ 1000), the number of employees. - The second line contains `n` integers `score_1, score_2, ..., score_n` (1 ≤ score_i ≤ 10^9), representing the scores of the employees. Output: For each test case, output a single integer, the minimum number of badges needed. Example: Input: 3 3 1 2 2 4 4 6 4 5 5 1 2 3 4 5 Output: 4 6 15 Explanation: 1. For the first test case, the minimum number of badges can be distributed as [1, 2, 1] or [1, 2, 2] or any other combination that satisfies the rules but the sum is always 4. 2. For the second test case, the minimum distribution can be [1, 2, 1, 2]. 3. For the third test case, the scores are strictly increasing, so the distribution will be [1, 2, 3, 4, 5], and the sum is 15.","solution":"def minimum_badges_required(num_cases, cases): results = [] for case in cases: n, scores = case if n == 0: results.append(0) continue badges = [1] * n # Forward pass for i in range(1, n): if scores[i] > scores[i - 1]: badges[i] = badges[i - 1] + 1 # Backward pass for i in range(n - 2, -1, -1): if scores[i] > scores[i + 1]: badges[i] = max(badges[i], badges[i + 1] + 1) results.append(sum(badges)) return results # Reading input and formatting it def read_input_format(input_text): input_lines = input_text.strip().split(\'n\') t = int(input_lines[0]) cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) scores = list(map(int, input_lines[index + 1].split())) cases.append((n, scores)) index += 2 return t, cases # Function that will be called with the input def badges_solver(input_text): num_cases, cases = read_input_format(input_text) return minimum_badges_required(num_cases, cases)"},{"question":"You are given n different candy types, each with a certain sweetness value. You want to divide all candies into exactly two groups such that the absolute difference in total sweetness between the two groups is minimized. Note that you must use all candies, and each candy should be placed in exactly one group. Input The first line contains a single integer n (1 ≤ n ≤ 25) — the number of different candy types. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the sweetness values of the candies. Output Output a single integer, the minimal possible absolute difference between the total sweetness of the two groups. Examples Input 5 1 2 3 4 5 Output 1 Input 4 10 20 30 40 Output 0 Note In the first sample case: * You can group the candies as [1, 4, 5] and [2, 3]. The total sweetness values are 10 and 5 respectively, and the absolute difference is |10 - 9| = 1, which is the minimal possible difference. In the second sample case: * You can group the candies as [10, 30] and [20, 40]. The total sweetness values are 40 and 40 respectively, and the absolute difference is |40 - 40| = 0, which is the minimal possible difference.","solution":"def minimal_sweetness_difference(n, sweetness_values): from itertools import combinations total_sweetness = sum(sweetness_values) half_total_sweetness = total_sweetness // 2 min_difference = float(\'inf\') for i in range(1, n + 1): for combo in combinations(sweetness_values, i): group1_sweetness = sum(combo) group2_sweetness = total_sweetness - group1_sweetness current_difference = abs(group1_sweetness - group2_sweetness) min_difference = min(min_difference, current_difference) return min_difference"},{"question":"In an amusement park, there is a popular ride called \\"Rota Coaster\\" which has different types of tickets. Each ticket allows a specific number of rides. The number of rides each ticket can afford is represented by an integer array `rides[]` of size `n`, where each element `rides[i]` denotes the number of rides for the i-th ticket. You\'re given an initial number of rides `r` that you want to take. You aim to maximize the total number of rides you can initially afford using the tickets, by combining certain tickets to meet or exceed your initial ride target `r`. You can use a ticket more than once, and you are allowed to take more rides than `r` if required. Write a function that computes the minimum number of tickets needed to achieve at least `r` rides. If it is not possible to achieve `r` rides, the function should return -1. # Input - An integer `r` (1 ≤ `r` ≤ 10^4) representing the initial number of rides. - An integer `n` (1 ≤ `n` ≤ 100) representing the number of different ticket types. - An array `rides[]` (1 ≤ `rides[i]` ≤ 10^4) representing the rides each ticket type can afford. # Output - Return an integer representing the minimum number of tickets needed to achieve at least `r` rides, or -1 if not possible. # Example Example 1: ```python Input: r = 7 n = 3 rides = [1, 3, 4] Output: 2 Explanation: Combine two tickets with 4 rides each to make 8 rides which is greater than or equal to 7. The minimum tickets required is 2. ``` Example 2: ```python Input: r = 5 n = 2 rides = [2, 4] Output: -1 Explanation: There is no combination of tickets that can make at least 5 rides. Therefore, the output is -1. ``` # Constraints - 1 ≤ `r` ≤ 10^4 - 1 ≤ `n` ≤ 100 - 1 ≤ `rides[i]` ≤ 10^4 # Note - You can use a ticket more than once. - The solution should be efficient, consider using dynamic programming or similar techniques to optimize the problem.","solution":"def min_tickets_needed(r, n, rides): # Initialize an array to store minimum tickets needed for a given number of rides dp = [float(\'inf\')] * (r + 1) dp[0] = 0 # No tickets are needed for 0 rides # Use dynamic programming to find the minimum number of tickets required for i in range(1, r + 1): for ride in rides: if i >= ride: dp[i] = min(dp[i], dp[i - ride] + 1) # Check if it\'s possible to get at least r rides min_tickets = min(dp[r:]) return min_tickets if min_tickets != float(\'inf\') else -1"},{"question":"**I: Subarray Sum** Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k. You may assume that the array contains only non-negative integers. # Input The first line contains an integer n, the number of elements in the array. The following line contains n space-separated integers representing the array nums. The last line contains an integer k. # Output Output a single integer, the total number of continuous subarrays whose sum equals to k. # Constraints * 1 ≤ n ≤ 100,000 * 0 ≤ nums[i] ≤ 10,000 * -10^7 ≤ k ≤ 10^7 # Example Input ``` 5 1 1 1 1 1 2 ``` Output ``` 4 ``` Input ``` 6 1 2 3 4 5 6 10 ``` Output ``` 1 ```","solution":"def subarray_sum(nums, k): Returns the total number of continuous subarrays whose sum equals to k. count = 0 current_sum = 0 prefix_sums = {0: 1} for num in nums: current_sum += num if current_sum - k in prefix_sums: count += prefix_sums[current_sum - k] if current_sum in prefix_sums: prefix_sums[current_sum] += 1 else: prefix_sums[current_sum] = 1 return count"},{"question":"The kingdom of Zandia has a unique way of protecting its treasures. They use a chamber that can only be opened using codes generated through a specific sequence algorithm. The algorithm works as follows: Given an integer n (1 ≤ n ≤ 1000), you must generate a sequence of length n where the terms of the sequence meet the following conditions: 1. The sequence consists of distinct integers. 2. The sum of the integers in the sequence is zero. The king of Zandia needs your help to generate this sequence. Can you write a program that will generate such a sequence for any given n? Input The first line contains a single integer n (1 ≤ n ≤ 1000). Output Output a single line containing n space-separated integers such that they form a sequence that meets the specified conditions. Example Input 4 Output -2 -1 1 2 Input 3 Output -1 0 1 Note In the first example, the sum of the sequence (-2) + (-1) + 1 + 2 is 0 and all integers are distinct. In the second example, the sum of the sequence (-1) + 0 + 1 is 0 and all integers are distinct.","solution":"def generate_sequence(n): sequence = [] if n % 2 == 0: half = n // 2 sequence = list(range(-half, 0)) + list(range(1, half+1)) else: half = n // 2 sequence = list(range(-half, 0)) + [0] + list(range(1, half+1)) return sequence"},{"question":"A social networking site has a feature where a user\'s profile can display their \\"Activity Summary\\" in a sorted manner. The summary consists of several activity tokens, each representing a different type of activity the user has engaged in. Each activity token consists of an integer `T` representing the number of times the user has engaged in that activity, and a string `A` describing the activity. To avoid confusion, the site moderators have imposed a rule that the \\"Activity Summary\\" must list the activities sorted by the count of the activities in descending order. If two activities have the same count, they should be sorted by the activity\'s description in alphabetical order. Your task is to implement a function that sorts a list of activity tokens according to the above rules. # Input - The first line contains an integer `N` (1 ≤ N ≤ 100,000), the number of activities in the summary. - The next `N` lines each contain a string `A` and an integer `T`, where `A` is the description of the activity (a string of length between 1 and 100 inclusive, consisting of only lowercase English letters), and `T` is the count of times the user has engaged in the activity (0 ≤ T ≤ 1,000,000). # Output - Output the sorted list of activities. Each line should contain the activity description followed by the count. # Example Input: ``` 5 likes 10 comments 3 shares 10 reactions 8 posts 5 ``` Output: ``` likes 10 shares 10 reactions 8 posts 5 comments 3 ``` # Explanation - The activities \\"likes\\" and \\"shares\\" have the same count of `10`. Therefore, they are sorted alphabetically within the group with count `10`. - The remaining activities are sorted in descending order by their count.","solution":"def sort_activities(activities): Sorts the activities first by the count (desc) and then by the activity description (asc). Parameters: activities (list of tuples): List containing tuples of the form (activity description, count). Returns: list of tuples: Sorted list of activities. # Sorting first by count descending, then by description ascending activities.sort(key=lambda x: (-x[1], x[0])) return activities"},{"question":"John is given a sequence of n integers and he needs your help. He needs to determine if there exists a subset of these integers such that the sum of the subset is an odd number. Write a function to help John figure this out. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of integers in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Output Print \\"YES\\" (without quotes) if there exists a subset with an odd sum and \\"NO\\" (without quotes) otherwise. Examples Input 5 1 2 3 4 5 Output YES Input 4 2 4 6 8 Output NO Note In the first sample, John can choose the subset {1, 2, 3} which sums to 6, which is even, but also he can choose {1, 2, 3, 4, 5} which sums to 15, which is odd. In the second sample, all subsets will sum to an even number because all numbers in the sequence are even. There is no subset with an odd sum.","solution":"def has_odd_sum_subset(n, arr): Determine if there exists a subset of the array \'arr\' with an odd sum. Parameters: n (int): Number of integers in the sequence arr (list of int): The sequence of integers Returns: str: \\"YES\\" if there exists a subset with an odd sum, \\"NO\\" otherwise # Check if there is at least one odd number in the array for num in arr: if num % 2 == 1: return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of integers and a range [L, R]. Your task is to determine the sum of the integers within the given range (inclusive). Constraints * All values in input are integers. * 1 leq N leq 10^6 (number of integers in the list). * 1 leq L leq R leq N * -10^9 leq Each integer in the list leq 10^9 Input Input is given from Standard Input in the following format: N arr_1 arr_2 arr_3 ... arr_N L R Output Print the sum of the integers within the range [L, R] (inclusive). Examples Input 5 1 2 3 4 5 2 4 Output 9 Input 6 -1 -3 5 7 9 -2 1 3 Output 1 Input 8 4 6 1 0 -3 7 2 -5 3 7 Output 7","solution":"def range_sum(N, arr, L, R): Given a list of integers and a range [L, R], returns the sum of the integers within the given range (inclusive). Args: N (int): Number of integers in the list. arr (list of int): List of integers. L (int): Start index of the range (1-based). R (int): End index of the range (1-based). Returns: int: Sum of the integers within the range [L, R]. # Convert the 1-based indexing to 0-based indexing L_index = L - 1 R_index = R - 1 # Calculate the sum of elements in the given range return sum(arr[L_index:R_index + 1]) # Example of using the function: # N = 5 # arr = [1, 2, 3, 4, 5] # L = 2 # R = 4 # Expected output: 9 print(range_sum(5, [1, 2, 3, 4, 5], 2, 4))"},{"question":"Write a program that determines if a point lies inside, outside, or on the border of a given triangle. The vertices of the triangle and the coordinates of the point are provided as input. Constraints * -100 leq x_1, y_1, x_2, y_2, x_3, y_3, x_p, y_p leq 100 Input Eight integers x_1, y_1, x_2, y_2, x_3, y_3, x_p, y_p separated by a single space, representing the coordinates of the vertices of the triangle (x_1, y_1), (x_2, y_2), (x_3, y_3) and the point (x_p, y_p). Output Print \\"Inside\\" if the point lies inside the triangle, \\"Outside\\" if the point lies outside the triangle, and \\"Border\\" if the point lies exactly on the border of the triangle. Examples Input 0 0 5 0 0 5 1 1 Output Inside Input 0 0 5 0 0 5 5 1 Output Outside Input 0 0 5 0 0 5 2.5 0 Output Border","solution":"def orientation(p, q, r): Return the orientation of the triplet (p, q, r). 0 -> p, q and r are collinear 1 -> Clockwise 2 -> Counterclockwise val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]) if val == 0: return 0 elif val > 0: return 1 else: return 2 def on_segment(p, q, r): Check if point q lies on segment pr if min(p[0], r[0]) <= q[0] <= max(p[0], r[0]) and min(p[1], r[1]) <= q[1] <= max(p[1], r[1]): return True return False def is_point_in_triangle(x1, y1, x2, y2, x3, y3, xp, yp): p1, p2, p3, p = (x1, y1), (x2, y2), (x3, y3), (xp, yp) # Check if the point lies on any of the triangle\'s edges if orientation(p1, p2, p) == 0 and on_segment(p1, p, p2): return \\"Border\\" if orientation(p2, p3, p) == 0 and on_segment(p2, p, p3): return \\"Border\\" if orientation(p3, p1, p) == 0 and on_segment(p3, p, p1): return \\"Border\\" # Calculate barycentric coordinates denominator = ((y2 - y3) * (x1 - x3) + (x3 - x2) * (y1 - y3)) a = ((y2 - y3) * (xp - x3) + (x3 - x2) * (yp - y3)) / denominator b = ((y3 - y1) * (xp - x3) + (x1 - x3) * (yp - y3)) / denominator c = 1 - a - b if 0 < a < 1 and 0 < b < 1 and 0 < c < 1: return \\"Inside\\" else: return \\"Outside\\""},{"question":"Your task is to help a furniture manufacturing company design a new type of bookshelf that maximizes its utility while adhering to given constraints. The bookshelf is a rectangular grid of size n × m, where n represents the number of horizontal shelves and m represents the number of vertical columns. Each shelf can hold books up to a certain weight limit. The weight limit for each shelf is represented as an array of integers. The company wants to ensure that no shelf is overburdened, and each column has the least disparity in weight. Write a program to determine the minimal possible maximum disparity among all columns. Disparity for a column is defined as the absolute difference between the heaviest and lightest loaded shelves in that column. Input: - The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), representing the number of shelves and columns, respectively. - The second line contains n integers, w1, w2, ..., wn (1 ≤ wi ≤ 1000), where wi represents the weight limit of the i-th shelf. Output: - Output a single integer representing the minimal possible maximum disparity among all columns. Example Input: 4 3 10 20 30 40 Output: 10 Note: In the sample input, the bookshelf grid has 4 shelves and 3 columns, with weight limits as [10, 20, 30, 40]. One possible way to minimize the disparity could be: - Column 1: 10, 30 - Column 2: 20, 40 - Column 3: (empty slots) The disparities for each column in this arrangement are: - Column 1: (30-10) = 20 - Column 2: (40-20) = 20 - Column 3: 0 Thus, the minimum possible maximum disparity is 20. However, by optimizing the distribution, a better solution with lower disparity might exist, and your task is to find that optimal solution.","solution":"def minimize_max_disparity(n, m, weights): Returns the minimal possible maximum disparity among all columns. weights.sort() def validate_disparity(disparity): required_columns = 1 current_min = weights[0] current_max = weights[0] for i in range(1, n): current_min = min(current_min, weights[i]) current_max = max(current_max, weights[i]) if current_max - current_min > disparity: required_columns += 1 current_min = weights[i] current_max = weights[i] if required_columns > m: return False return True left, right = 0, weights[-1] - weights[0] result = right while left <= right: mid = (left + right) // 2 if validate_disparity(mid): result = mid right = mid - 1 else: left = mid + 1 return result"},{"question":"Alex is programming a digital drawing app and wants to implement a feature that checks if a given series of points forms a valid convex polygon. A polygon is convex if all its interior angles are less than 180 degrees. Alex needs your help to write a function that will determine if a sequence of given points forms such a polygon. Input The first line contains a single integer n (3 ≤ n ≤ 1000) — the number of vertices of the polygon. The next n lines each contain two integers xi, yi (-10^9 ≤ xi, yi ≤ 10^9) — the coordinates of the i-th point. The points are listed in the order they are connected to form the polygon. Output Output the word \\"YES\\" if the given points form a convex polygon, otherwise output \\"NO\\". Example Input 4 0 0 4 0 4 3 0 3 Output YES Input 5 0 0 2 2 4 1 4 4 0 4 Output NO","solution":"def is_convex_polygon(n, points): def cross_product_orientation(p, q, r): return (q[0] - p[0]) * (r[1] - p[1]) - (q[1] - p[1]) * (r[0] - p[0]) if n < 3: return \\"NO\\" orientation = 0 for i in range(n): p1, p2, p3 = points[i], points[(i + 1) % n], points[(i + 2) % n] cross_product = cross_product_orientation(p1, p2, p3) if cross_product != 0: if orientation == 0: orientation = 1 if cross_product > 0 else -1 elif (cross_product > 0 and orientation < 0) or (cross_product < 0 and orientation > 0): return \\"NO\\" return \\"YES\\""},{"question":"In a distant galaxy, there exists a highly advanced civilization known for its remarkable intelligence and problem-solving skills. Their core transportation system is based on teleportation nodes linked in a complex manner. These nodes are represented by a binary tree. Each node in this binary tree has a value, and every node except the root node has a parent. Nodes are connected such that each non-root node has one path that leads from it directly to its parent node. Given a series of traversal commands represented as a string consisting of the characters \'L\' (left) and \'R\' (right), determine the value of the node reached if starting from the root and following the commands exactly. The structure of the binary tree is as follows: - \'L\' moves from the current node to its left child. - \'R\' moves from the current node to its right child. For instance, in the traversal command sequence \\"LRL\\", starting from the root (value 1), the commands would navigate through nodes as follows: move Left to node 2, then move Right to node 5, then move Left to node 10. Thus, the answer would be 10. # Input - The first line contains a single integer `t` (1 ≤ t ≤ 10^4), the number of test cases. - Each of the following `t` lines contains a string of length `n` (0 ≤ n ≤ 10^4), representing the traversal commands for each test case. # Output - For each test case, output a single integer representing the value of the node reached by following the traversal commands from the root. # Example Input ``` 3 LRL LLL RRRR ``` Output ``` 10 8 None ``` # Explanation For the given binary tree: ``` 1 / 2 3 / / 4 5 6 7 /| | /| /| 8 9 10 11 12 13 ``` - For the first command \\"LRL\\": starting from 1 -> move to 2 -> move to 5 -> move to 10. Thus, the output is 10. - For the second command \\"LLL\\": starting from 1 -> move to 2 -> move to 4 -> move to 8. Thus, the output is 8. - For the third command \\"RRRR\\": starting from 1 -> move to 3 -> move to 7 -> move further to the right child which does not exist. Thus, the output is `None`.","solution":"class BinaryTreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_sample_tree(): Builds the sample binary tree as described in the prompt. Returns the root of the tree. nodes = {i: BinaryTreeNode(i) for i in range(1, 15)} # Manually connect the nodes to form the tree structure nodes[1].left, nodes[1].right = nodes[2], nodes[3] nodes[2].left, nodes[2].right = nodes[4], nodes[5] nodes[3].left, nodes[3].right = nodes[6], nodes[7] nodes[4].left, nodes[4].right = nodes[8], nodes[9] nodes[5].left, nodes[5].right = nodes[10], nodes[11] nodes[6].left, nodes[6].right = nodes[12], nodes[13] # nodes[7] is a leaf with no children return nodes[1] def find_node_by_path(root, path): Given the root of a binary tree and a path string consisting of \'L\' and \'R\', find the node after following the path from the root. If any step in the path leads to a non-existing node, return None. current = root for step in path: if step == \'L\': current = current.left elif step == \'R\': current = current.right if current is None: return None return current.value if current else None def solve(test_cases): Processes each test case and returns the results as a list of integers (or None). Each case consists of a traversal path string. root = build_sample_tree() result = [] for path in test_cases: result.append(find_node_by_path(root, path)) return result"},{"question":"Chef is preparing a rectangular cake for a party. The cake is represented by a grid of size `m x n`, and it contains various ingredients symbolized as characters (`A-Z`). However, Chef wants the cake to have only a single consecutive ingredient (say only \'A\' or only \'B\'). To achieve this, Chef can cut horizontal or vertical slices and remove sections of the cake. He can perform any number of operations. Given the initial state of the cake, determine the minimum number of cuts required to make the cake consist of only a single consecutive type of ingredient. # Input - An integer `t`, the number of test cases. (1 ≤ t ≤ 50) - For each test case: - Two integers `m` and `n` (1 ≤ m, n ≤ 50) the dimensions of the cake grid. - `m` lines, each containing a string of `n` characters representing the cake. # Output For each test case, print a single integer representing the minimum number of cuts required. # Example Input: 2 3 3 AAA ABA AAA 4 4 ABBA BBAA ABAB BABA Output: 1 1 # Note: - In the first example, Chef can remove the second row entirely, requiring only one cut. - In the second example, Chef can remove the third column entirely, requiring only one cut. # Constraints: - The cake will always have at least one type of ingredient used consecutively.","solution":"def min_cuts_to_uniform_cake(t, test_cases): results = [] for case in test_cases: m, n, cake = case row_cut_needed = any(len(set(row)) > 1 for row in cake) col_cut_needed = any(len(set(cake[i][j] for i in range(m))) > 1 for j in range(n)) results.append(int(row_cut_needed or col_cut_needed)) return results"},{"question":"A company has implemented a system that tracks the amount of data used by each employee on their office computer. The system collects the data usage in megabytes (MB) for different activities like browsing, video streaming, and downloads. The data is recorded as a list of activities each with a corresponding amount of data used. Your task is to generate a report that summarizes the total data usage for each unique activity. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of entries in the data log. Each of the next n lines contains a string activity and an integer data, separated by a space, which represent an activity name and amount of data used in megabytes, respectively (1 ≤ data ≤ 104). The activity name consists of lowercase English letters and its length does not exceed 20 characters. Output For each unique activity, print the activity name and the total data used for that activity, in the order they appeared in the input. Examples Input 5 browsing 100 video 300 browsing 200 downloads 400 video 700 Output browsing 300 video 1000 downloads 400 Input 3 games 500 music 150 games 450 Output games 950 music 150","solution":"def summarize_data_usage(n, data_log): Summarizes the total data usage for each unique activity. :param n: The number of entries in the data log :param data_log: A list of tuples, each containing an activity and the corresponding data usage in megabytes :return: A dictionary with activity names as keys and the total data usage as values data_usage = {} for activity, data in data_log: if activity in data_usage: data_usage[activity] += data else: data_usage[activity] = data return data_usage # Example Usage n = 5 data_log = [ (\\"browsing\\", 100), (\\"video\\", 300), (\\"browsing\\", 200), (\\"downloads\\", 400), (\\"video\\", 700) ] result = summarize_data_usage(n, data_log) for activity, total_data in result.items(): print(activity, total_data)"},{"question":"Write a function **minimum_deletions_palindrome(s)** that returns the minimum number of character deletions required to make a given string a palindrome. A palindrome is a string that reads the same backward as forward. For instance, \\"racecar\\" is a palindrome, but \\"race\\" is not. # Input - A single string **s** consisting of lowercase English letters. # Output - Return an integer representing the minimum number of deletions. # Constraints - 1 ≤ |s| ≤ 10^5 **Sample Input 1** ``` abcca ``` **Sample Output 1** ``` 1 ``` **Sample Input 2** ``` abcdef ``` **Sample Output 2** ``` 5 ``` # Explanation In the first example, by removing the character \'b\', the string becomes \\"acca\\", which is a palindrome. Hence, only one deletion is required. In the second example, the characters need to be removed to leave any single character as a palindrome since no two characters in the string form a palindrome otherwise. Hence, 5 deletions are required. # Hint Use dynamic programming to find the longest palindromic subsequence, and subtract its length from the total length of the string to get the minimum deletions required.","solution":"def minimum_deletions_palindrome(s): Returns the minimum number of deletions required to make the given string a palindrome. n = len(s) # Create a dp array where dp[i][j] will store the length of longest palindromic subsequence dp = [[0] * n for _ in range(n)] # Each single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Check palindromic subsequences of length 2 to n for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) # The length of the longest palindromic subsequence lps = dp[0][n - 1] # The minimum deletions required is the total length minus the length of the LPS return n - lps"},{"question":"Given an array of integers, find the maximum possible product of any non-empty subarray of the given array. A subarray is any contiguous part of the array. Your task is to write a function that receives an array and returns the highest product possible from any of its subarrays. Function signature: ```python def max_subarray_product(arr: List[int]) -> int: ``` # Input - An array `arr` of integers with length ranging from 1 to 1000 inclusive. The elements of the array can be negative, zero or positive with absolute value up to 1000. # Output - An integer representing the maximum product of any subarray of `arr`. # Example Example 1 Input: ``` arr = [2, 3, -2, 4] ``` Output: ``` 6 ``` Explanation: - The subarray [2, 3] has the maximum product 6. Example 2 Input: ``` arr = [-2, 0, -1] ``` Output: ``` 0 ``` Explanation: - The subarray [0] has the maximum product 0. Example 3 Input: ``` arr = [-2, -3, 0, -2, -40] ``` Output: ``` 80 ``` Explanation: - The subarray [-2, -40] has the maximum product 80. # Note - The product of a subarray is the result of multiplying its elements together. - Consider the case where the array has just one element. The maximum product will be the element itself. - Pay attention to potential integer overflows in the product calculation.","solution":"from typing import List def max_subarray_product(arr: List[int]) -> int: This function returns the maximum possible product of any non-empty subarray if not arr: return 0 max_product = min_product = result = arr[0] for num in arr[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"A mysterious island is inhabited by two types of creatures: Knights and Knaves. Knights always tell the truth, while Knaves always lie. One day, during an exploration, you encounter three creatures named A, B, and C, who make the following statements: A says, \\"C is a Knight.\\" B says, \\"A is a Knave.\\" C says, \\"B is a Knave.\\" Determine the identity of each creature: whether they are Knights or Knaves. Input The input consists of a single line containing three integers (A_status, B_status, C_status). The integers A_status, B_status, and C_status are either 1 (for Knight) or 0 (for Knave): - If A_status is 1, A is a Knight; if A_status is 0, A is a Knave. - If B_status is 1, B is a Knight; if B_status is 0, B is a Knave. - If C_status is 1, C is a Knight; if C_status is 0, C is a Knave. Output The output should be a single line containing the solution to the puzzle in the format \\"A:X B:Y C:Z\\" where X, Y, and Z are either \\"Knight\\" or \\"Knave\\". Examples Input 0 1 0 Output A:Knave B:Knight C:Knave Input 1 0 1 Output A:Knight B:Knave C:Knight Input 1 1 0 Output A:Knight B:Knight C:Knave","solution":"def determine_identity(A_status, B_status, C_status): Determines the identity of A, B, and C as either Knights or Knaves based on their statements and their given statuses. Args: A_status (int): Status of A, 1 for Knight, 0 for Knave. B_status (int): Status of B, 1 for Knight, 0 for Knave. C_status (int): Status of C, 1 for Knight, 0 for Knave. Returns: str: A string stating the identity of A, B, and C. A_identity = \\"Knight\\" if A_status == 1 else \\"Knave\\" B_identity = \\"Knight\\" if B_status == 1 else \\"Knave\\" C_identity = \\"Knight\\" if C_status == 1 else \\"Knave\\" return f\\"A:{A_identity} B:{B_identity} C:{C_identity}\\""},{"question":"You are given a string and a pattern. Implement a function to find all the starting indices of the pattern\'s anagrams in the given string. Input The first line contains a string s (1 ≤ |s| ≤ 10^4) — the text in which to find anagrams. The second line contains a string p (1 ≤ |p| ≤ 100) — the pattern whose anagrams need to be found. Output Print a list of integers denoting all the starting indices of the pattern\'s anagrams in the string. The indices should be in ascending order. Examples Input cbaebabacd abc Output [0, 6] Input abab ab Output [0, 1, 2]","solution":"from collections import Counter def find_anagrams(s, p): Returns a list of starting indices of the pattern\'s anagrams in the given string. p_len = len(p) s_len = len(s) p_count = Counter(p) s_count = Counter() result = [] for i in range(s_len): # add one more letter on the right side of the window s_count[s[i]] += 1 # remove one letter from the left side of the window if size of the window is greater than p_len if i >= p_len: if s_count[s[i - p_len]] == 1: del s_count[s[i - p_len]] else: s_count[s[i - p_len]] -= 1 # compare window with the pattern if s_count == p_count: result.append(i - p_len + 1) return result"},{"question":"You are given an array of N integers: B = { B_1, B_2, cdots, B_N }. You can perform the following operation on the array as many times as you like: * Choose an index i (1 ≤ i < N) and swap B_i and B_{i+1} if B_i < B_{i+1}. Determine if it is possible to sort the array in non-decreasing order using the given operation. If possible, print \\"YES\\", otherwise print \\"NO\\". Constraints * 1 ≤ N ≤ 10^5 * -10^9 ≤ B_i ≤ 10^9 Input Input is given from Standard Input in the following format: N B_1 B_2 ... B_N Output Print \\"YES\\" if it is possible to sort the array in non-decreasing order using the given operation, otherwise print \\"NO\\". Examples Input 5 3 1 4 5 2 Output NO Input 4 10 10 9 9 Output YES","solution":"def can_be_sorted(N, B): Determines if the array B can be sorted in non-decreasing order. Args: N: int - the size of the array B: list of int - the array of integers Returns: str - \\"YES\\" if the array can be sorted in non-decreasing order, otherwise \\"NO\\" for i in range(N - 1): if B[i] < B[i + 1]: return \\"NO\\" return \\"YES\\""},{"question":"In a motivational speaking event, a speaker has n sessions planned for the day. Each session has a start and end time, and the speaker needs to attend all sessions without any overlap. If it\'s not possible to attend all sessions without overlap, the goal is to attend the maximum number of sessions. Given the start and end times of the sessions, determine the maximum number of sessions that the speaker can attend. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of sessions. Each of the next n lines contains two integers s_i and e_i (1 ≤ s_i < e_i ≤ 10^9) — the start and end times of the i-th session. Output In a single line, print the maximum number of sessions that the speaker can attend without any overlap. Example Input 5 1 3 2 4 3 5 6 8 7 9 Output 3 Input 4 1 2 2 3 3 4 4 5 Output 4","solution":"def max_sessions(n, sessions): # Sort sessions by their end times sessions.sort(key=lambda x: x[1]) max_sessions_count = 0 last_end_time = 0 for start, end in sessions: if start >= last_end_time: max_sessions_count += 1 last_end_time = end return max_sessions_count"},{"question":"Linda recently started working as a software engineer and is tasked with designing an efficient storage system for her company. To test her skills, she needs to analyze an array of integers and identify all unique pairs of integers that sum up to a given target value. Write a function that finds all unique pairs in the array where the sum of each pair equals the target value. A pair (a, b) is considered the same as (b, a) and should be counted only once. Input Format The first line contains the number of test-cases T. Each test-case consists of two lines: - The first line of each test-case contains two integers N (the number of elements in the array) and K (the target sum). - The second line contains N space-separated integers representing the array. Output Format For each test-case, output a list of unique pairs (as tuples) that sum up to K. Each pair should be in the form (min, max) and the list should be sorted in ascending order based on the first element of the tuples. If no such pairs are found, return an empty list. Constraints 1 ≤ T ≤ 100 2 ≤ N ≤ 10^4 -10^6 ≤ array elements ≤ 10^6 -2 * 10^6 ≤ K ≤ 2 * 10^6 SAMPLE INPUT 2 4 5 1 2 3 4 5 0 1 -1 2 -2 3 SAMPLE OUTPUT [(1, 4), (2, 3)] [(-2, 2), (-1, 1)] Explanation For the first test-case, there are two pairs that sum up to 5: (1, 4) and (2, 3). For the second test-case, there are two pairs that sum up to 0: (1, -1) and (2, -2).","solution":"def find_pairs_with_sum(test_cases): Returns all unique pairs of integers from each given array that sum up to a given target value. Each pair (a, b) will be in the form (min, max) and should be counted only once. :param test_cases: List of tuples, each containing: - (N, K): tuple with the number of elements and target sum - List of integers representing the array :return: List of lists of unique pairs (as tuples) that sum up to the target value results = [] for (N, K), array in test_cases: pairs = set() seen = {} # Iterate over the array to find pairs for number in array: target = K - number if target in seen: pairs.add((min(number, target), max(number, target))) seen[number] = True # Convert pairs to sorted list results.append(sorted(list(pairs))) return results"},{"question":"In a remote village, there is a unique tradition where children arrange stones in a specific pattern for a local festival. Each stone has a designated color represented by a character. After arranging the stones in a row, the children decided to perform a special ceremony called \\"stone merging\\". During the stone merging ceremony, each adjacent pair of stones of the same color merges into a single stone of that color, reducing the total number of stones. This process is repeated until no more adjacent stones of the same color remain. Given the initial arrangement of stones in a row, determine the final arrangement of stones after all possible merges have been performed. Input The input contains a single string s (1 ≤ |s| ≤ 10^5) — the initial arrangement of stones, where each character represents the color of a stone. Output Print the final arrangement of stones after all possible merges. Examples Input AABBBCCDAA Output ABCDA Input RRRRGGGBB Output RGB Input XYZ Output XYZ Note In the first sample, the initial arrangement \\"AABBBCCDAA\\" goes through the following merge steps: AABBBCCDAA -> ABBCCDAA -> ABCCDA -> ABCDA In the second sample, the initial arrangement \\"RRRRGGGBB\\" goes through these merge steps: RRRRGGGBB -> RGGGBB -> RGB The third sample \\"XYZ\\" has no adjacent same stones and thus remains unchanged.","solution":"def stone_merging(s: str) -> str: if not s: return s result = [s[0]] for i in range(1, len(s)): if s[i] != s[i - 1]: result.append(s[i]) return \'\'.join(result)"},{"question":"Given a list of integers, develop a function to determine the largest sum of any contiguous subarray within the list. Your function should return both the largest sum and the starting and ending indices of the subarray. Input List of integers Output Tuple consisting of the largest sum, starting index, and ending index Example Input: [-2, 1, -3, 4, -1, 2, 1, -5, 4] Output: (6, 3, 6) Explanation: The subarray with the largest sum is [4, -1, 2, 1], which starts at index 3 and ends at index 6, yielding the sum 6.","solution":"def max_subarray_sum(arr): Returns the largest sum of any contiguous subarray within the list along with the starting and ending indices of that subarray. Parameters: arr (list): List of integers Returns: tuple: (largest sum, starting index, ending index) if not arr: # empty list check return (0, -1, -1) max_sum = float(\'-inf\') current_sum = 0 start = 0 start_tmp = 0 end = 0 for i, value in enumerate(arr): if current_sum <= 0: current_sum = value start_tmp = i else: current_sum += value if current_sum > max_sum: max_sum = current_sum start = start_tmp end = i return (max_sum, start, end)"},{"question":"A company has a grid of dimensions n x m representing their warehouse with some obstacles and open spaces. Each cell in the grid can either be an obstacle (represented by \'#\') or be open (represented by \'.\'). The company wants to place the largest possible square area completely within open cells. Your task is to determine the side length of the largest such square that can be placed within the given grid. # Input The first line contains two integers, `n` and `m` (`1 ≤ n, m ≤ 1000`) — the number of rows and columns in the grid. The next `n` lines each contain a string of `m` characters where each character is either a \'#\' or a \'.\'. # Output Output a single integer — the side length of the largest square that can be placed within open cells in the warehouse grid. # Example Input 5 6 ....#. #..... ...... #... .#...# Output 3 # Note In the given example, the largest square that can be placed within open cells has a side length of 3. One possible placement of this square is: ``` #.... #.... #.... ``` By analyzing and dynamically placing the possible largest squares within the open cells while avoiding obstacles, we determine the side length of the largest possible square.","solution":"def largest_open_square(n, m, grid): if n == 0 or m == 0: return 0 dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"The Company X, a web hosting provider, wants to manage its IP addresses more efficiently. One key aspect of this management is to identify the network address and the broadcast address for a given IP address and its subnet mask. In this task, you will write a program that takes an IP address and a subnet mask as input and outputs the corresponding network address and broadcast address. # Definitions: 1. **IP Address**: A 32-bit number usually represented in dotted decimal format (e.g., 192.168.1.1). 2. **Subnet Mask**: Another 32-bit number which can also be represented in dotted decimal format (e.g., 255.255.255.0). 3. **Network Address**: The logical and operation on each bit of the IP address and the subnet mask. 4. **Broadcast Address**: The network address with all the host bits set to one. # Input: The input consists of multiple lines. Each line contains an IP address and a subnet mask, separated by a space. The input will terminate with a line \\"0.0.0.0 0.0.0.0\\" # Output: For each line of input, output the corresponding network address and broadcast address in the format \\"NetworkAddress BroadcastAddress\\". Each address should be in dotted decimal form. # Example: Input: 192.168.1.10 255.255.255.0 10.0.0.1 255.0.0.0 0.0.0.0 0.0.0.0 Output: 192.168.1.0 192.168.1.255 10.0.0.0 10.255.255.255 # Constraints: - Each octet of the IP address and subnet mask is an integer between 0 and 255. - The input will contain at most 100 lines. # Hint: You can use bitwise operations to calculate the network address and the broadcast address: 1. Convert the IP address and subnet mask from dotted decimal format to binary. 2. Perform bitwise AND to get the network address. 3. Perform bitwise OR on the inverted subnet mask to get the broadcast address. The following formula might be helpful: - Network Address = IP Address & Subnet Mask - Broadcast Address = Network Address | (~Subnet Mask)","solution":"def ip_to_binary(ip): return \'\'.join(f\'{int(octet):08b}\' for octet in ip.split(\'.\')) def binary_to_ip(binary): return \'.\'.join(str(int(binary[i:i+8], 2)) for i in range(0, 32, 8)) def network_and_broadcast(ip, subnet): ip_bin = ip_to_binary(ip) subnet_bin = ip_to_binary(subnet) # Calculate network address network_bin = \'\'.join(\'1\' if ip_bin[i] == subnet_bin[i] == \'1\' else \'0\' for i in range(32)) network_address = binary_to_ip(network_bin) # Calculate broadcast address broadcast_bin = \'\'.join(\'1\' if subnet_bin[i] == \'0\' else network_bin[i] for i in range(32)) broadcast_address = binary_to_ip(broadcast_bin) return network_address, broadcast_address def process_input(ip_subnet_pairs): results = [] for ip, subnet in ip_subnet_pairs: if ip == \\"0.0.0.0\\" and subnet == \\"0.0.0.0\\": break network_address, broadcast_address = network_and_broadcast(ip, subnet) results.append(f\\"{network_address} {broadcast_address}\\") return results"},{"question":"A company has developed a new file organization system. In this system, a series of commands must be executed to manage files and directories. Each command is represented as a string and belongs to one of the following categories: 1. `create <path>` - Creates a new directory at the specified path. All intermediate directories in the path must already exist. 2. `delete <path>` - Deletes the directory at the specified path only if it is empty. 3. `list <path>` - Lists all directories directly within the specified path, ordered lexicographically. Given a series of commands to manage the file system, your task is to simulate the file system operations and output the results for the `list` commands. Each directory in the path is represented by a string of lowercase English letters, and paths are separated by \'/\'. The root directory is represented by a single \'/\'. Assume all paths start from the root. Input The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of commands. The next `n` lines contain commands \'create\', \'delete\', or \'list\', and the corresponding paths (1 ≤ length of each path ≤ 100). Output For each `list <path>` command, output the lexicographically sorted list of directories directly within the specified path. If the directory does not exist, output \\"Directory does not exist\\". Examples Input 7 create /a create /a/b create /a/c list /a create /a/b/d list /a/b delete /a/b/d Output b c Directory does not exist Explanation 1. The command `create /a` creates directory `a` in the root directory. 2. The command `create /a/b` creates directory `b` within directory `a`. 3. The command `create /a/c` creates directory `c` within directory `a`. 4. The command `list /a` lists the directories within `a` which are `b` and `c`, sorted lexicographically. 5. The command `create /a/b/d` creates directory `d` within directory `b` under `a`. 6. The command `list /a/b` attempts to list directories within `b`, but directory `b` is empty after the `delete /a/b/d` command. 7. The command `delete /a/b/d` deletes directory `d` within `b` under `a`, which results in `list /a/b` showing \\"Directory does not exist\\" since it could not list any contents.","solution":"class FileSystem: def __init__(self): self.fs = {\'/\': {}} def create(self, path): dirs = path.strip(\'/\').split(\'/\') current = self.fs[\'/\'] for d in dirs: if d not in current: current[d] = {} current = current[d] def delete(self, path): dirs = path.strip(\'/\').split(\'/\') current = self.fs[\'/\'] stack = [] for d in dirs: stack.append(current) current = current[d] if not current: parent = stack[-1] del parent[dirs[-1]] def list(self, path): dirs = path.strip(\'/\').split(\'/\') current = self.fs[\'/\'] for d in dirs: if d not in current: return \\"Directory does not exist\\" current = current[d] return \\" \\".join(sorted(current.keys())) # Example Usage: fs = FileSystem() commands = [ \\"create /a\\", \\"create /a/b\\", \\"create /a/c\\", \\"list /a\\", \\"create /a/b/d\\", \\"list /a/b\\", \\"delete /a/b/d\\", ] results = [] for cmd in commands: action, path = cmd.split() if action == \\"create\\": fs.create(path) elif action == \\"delete\\": fs.delete(path) elif action == \\"list\\": results.append(fs.list(path)) # Now, results should contain the outputs for the \'list\' commands for result in results: print(result)"},{"question":"A popular mobile game involves navigating a character through a grid, avoiding obstacles, and collecting items along the way. The grid is represented by a matrix with `n` rows and `m` columns. Each cell can either contain an obstacle (\'#\'), an item to collect (\'*\'), or be empty (\'.\'). The player starts at the top-left corner of the grid (cell (1,1)) and can move to adjacent cells in four directions (up, down, left, right). The goal is to collect all items and reach the bottom-right corner of the grid (cell (n,m)). Write a function `can_collect_all_items` that determines whether it is possible to collect all items and reach the bottom-right corner of the grid given the initial state of the grid. Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), the number of rows and columns in the grid. - The next `n` lines each contain `m` characters representing the grid\'s initial state. Output: - Print \\"YES\\" if it\'s possible to collect all items and reach the bottom-right corner, and \\"NO\\" otherwise. Example: Input 5 5 . . . # * # . # . . * . . # . # # . * . . . . . * Output YES Explanation: A possible path to collect all items could be as follows: (1,1) → (1,2) → (1,3) → (2,2) → (3,2) → (3,3) → (4,3) → (5,3) → (5,4) → (5,5) Another possible path avoiding unnecessary moves could also be found, but the key is that it meets all the conditions. In this example, your function should explore the grid and check if such a path exists.","solution":"def can_collect_all_items(n, m, grid): from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] != \'#\' def bfs(start_x, start_y): queue = deque([(start_x, start_y)]) visited = set((start_x, start_y)) items_collected = 0 while queue: x, y = queue.popleft() if grid[x][y] == \'*\': items_collected += 1 if x == n-1 and y == m-1: if items_collected == total_items: return True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False # Count total items in the grid total_items = sum(row.count(\'*\') for row in grid) # Start BFS from (0, 0) if grid[0][0] == \'#\': return \\"NO\\" if bfs(0, 0): return \\"YES\\" else: return \\"NO\\""},{"question":"A website logs events for user activity tracking. Each event is comprised of an action followed by the user ID. The action can either be \\"login\\" or \\"logout\\". If a user attempts to logout without logging in first, it is considered an invalid action. The input consists of a sequence of event logs, where each event is represented by a pair of strings (action, userID). The sequence of events is terminated by a \\"STOP\\". Write a program that processes the event logs and determines the number of invalid logout attempts. INPUT: The input log consists of several lines, each containing an action followed by a user ID. The action can be either \\"login\\" or \\"logout\\". The log is terminated by a line containing the string \\"STOP\\". OUTPUT: For each log, output the number of invalid logout attempts. Constraints: - The length of each action (login/logout) will be 5 or 6 characters. - The userID will be a string of alphanumeric characters with length between 1 and 10. - The number of events will be less than 100. SAMPLE INPUT: login user1 login user2 logout user2 logout user1 logout user1 STOP SAMPLE OUTPUT: 1","solution":"def count_invalid_logouts(logs): Processes the event logs to count the number of invalid logout attempts. logged_in_users = set() invalid_logouts = 0 for log in logs: if log == \\"STOP\\": break action, user_id = log.split() if action == \\"login\\": logged_in_users.add(user_id) elif action == \\"logout\\": if user_id in logged_in_users: logged_in_users.remove(user_id) else: invalid_logouts += 1 return invalid_logouts"},{"question":"Given an integer n, write a program to generate the n-th row of Pascal\'s Triangle. Pascal\'s Triangle is a triangular array of the binomial coefficients arranged in such a way that, in the nth row and kth column, we have the binomial coefficient: n!/(k! * (n-k)!). Each number is the sum of the two directly above it in the previous row. Input: The input consists of a single integer n (0 ≤ n ≤ 1000). Output: Output n space-separated integers denoting the n-th row of Pascal\'s Triangle. Examples: Input: 4 Output: 1 4 6 4 1 Input: 10 Output: 1 10 45 120 210 252 210 120 45 10 1","solution":"import math def nth_row_pascals_triangle(n): Returns the n-th row of Pascal\'s Triangle. Args: n (int): The row index of Pascal\'s Triangle (0 <= n <= 1000). Returns: List[int]: The n-th row of Pascal\'s Triangle. return [math.comb(n, k) for k in range(n + 1)]"},{"question":"You are given a string consisting of lowercase Latin letters and several queries. For each query, you are given a substring and asked to check if any permutation of this substring appears as a contiguous part of the original string. For instance, if the original string is \\"abcde\\" and the query is \\"bca\\", then the answer is \\"Yes\\" because \\"bca\\" permutes to \\"abc\\", which is a part of the original string. Write a program to answer such queries efficiently. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains the string of length n consisting of lowercase Latin letters. The third line contains a single integer q (1 ≤ q ≤ 1000) — the number of queries. Each of the next q lines contains a single string s (1 ≤ |s| ≤ n) representing a query. Output For each query, print \\"Yes\\" if any permutation of the query string appears as a contiguous substring of the original string, otherwise print \\"No\\". Examples Input 5 abcde 3 bca aec ed Output Yes No Yes Note In the first sample, \\"bca\\" permutes to \\"abc\\", which is a part of the original string \\"abcde\\". So the answer is \\"Yes\\". In the second sample, \\"aec\\" has no permutation that appears as a contiguous substring in \\"abcde\\". So the answer is \\"No\\". In the third sample, \\"ed\\" permutes to \\"de\\", which is a part of the original string \\"abcde\\". So the answer is \\"Yes\\".","solution":"def check_permutation_substring(n, original_string, queries): from collections import Counter def is_permutation_in_string(small, big): small_len = len(small) big_len = len(big) if small_len > big_len: return False small_counter = Counter(small) window_counter = Counter(big[:small_len]) if small_counter == window_counter: return True for i in range(small_len, big_len): window_counter[big[i - small_len]] -= 1 if window_counter[big[i - small_len]] == 0: del window_counter[big[i - small_len]] window_counter[big[i]] += 1 if window_counter == small_counter: return True return False results = [] for query in queries: if is_permutation_in_string(query, original_string): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Substring Palindrome Given a string S, find the length of the longest substring which is a palindrome. Input A single string S is given in a line. Output Print the length of the longest palindromic substring in a line. Constraints * The length of string S is 1 leq |S| leq 1000 Sample Input 1 babad Sample Output 1 3 Sample Input 2 cbbd Sample Output 2 2 Sample Input 3 a Sample Output 3 1 Sample Input 4 forgeeksskeegfor Sample Output 4 10 Example Input babad Output 3","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the given string s. n = len(s) if n <= 1: return n longest = 1 dp = [[False] * n for _ in range(n)] for i in range(n): dp[i][i] = True for length in range(2, n+1): for start in range(n-length+1): end = start + length - 1 if s[start] == s[end]: if length == 2: dp[start][end] = True else: dp[start][end] = dp[start+1][end-1] if dp[start][end]: longest = max(longest, length) return longest"},{"question":"Write a program that reads a list of space-separated integers and an integer target k, then finds two distinct numbers in the list that add up to the target k. If such a pair exists, print the two numbers in any order. If no such pair exists, print \\"No pair found\\". Constraints * Each integer in the list will be between -10^6 and 10^6. * The length of the list will be between 2 and 10^5. * The target integer k will be between -10^6 and 10^6. Input The input consists of multiple datasets. Each dataset is given in the following format. list_of_integers target_k The input ends with a dataset where the list is \\"0\\", indicating the end of the input. Your program should not process this dataset. Output For each dataset, print the two numbers that add up to the target k, or \\"No pair found\\" if no such pair exists. Example Input 1 2 3 4 5 9 -1 -2 -3 -4 -5 -6 -7 10 5 5 5 5 5 6 10 10 0 0 Output 5 4 -7 -3 5 5 No pair found","solution":"def find_pairs(int_list, target_k): Function to find two distinct numbers in the list that add up to the target k. Returns the two numbers as a tuple if such a pair exists, otherwise returns \\"No pair found\\". num_set = set() for num in int_list: complement = target_k - num if complement in num_set: return (num, complement) num_set.add(num) return \\"No pair found\\" def process_input(data): Process the input data and prints the result for each dataset. datasets = data.strip().split(\'n\') results = [] for dataset in datasets: tokens = dataset.split() if tokens[0] == \'0\': break int_list = list(map(int, tokens[:-1])) target_k = int(tokens[-1]) result = find_pairs(int_list, target_k) results.append(result) return results def main(data): results = process_input(data) for result in results: if result == \\"No pair found\\": print(result) else: print(f\\"{result[0]} {result[1]}\\")"},{"question":"You are writing a program that will manage reservations for a movie theater. The theater has `N` seats in a single row, numbered from 1 to N. Reservations can be made for a contiguous block of seats. You need to implement a system that supports the following operations: 1. **Reserve a block of seats**: A block of seats can be reserved if and only if all seats in the block are available. 2. **Cancel a reservation**: A previously reserved block of seats can be canceled, making those seats available again. 3. **Check if a block is available**: Determine if a contiguous block of seats is entirely available. Your task is to design a class `Theater` that implements the above operations. The class should support the following methods: - **`__init__(self, N: int)`**: Initializes the theater with N seats, all of which are available. - **`reserve(self, start: int, end: int) -> bool`**: Reserves the seats from `start` to `end` (inclusive). If any of these seats are already reserved, return `False`. If the reservation is successful, return `True`. - **`cancel(self, start: int, end: int) -> bool`**: Cancels the reservation from `start` to `end` (inclusive). If all these seats were not reserved previously, return `False`. If the cancellation is successful, return `True`. - **`is_available(self, start: int, end: int) -> bool`**: Checks if all seats from `start` to `end` (inclusive) are available. If they are, return `True`. Otherwise, return `False`. # Example ```python # Initialize the theater with 10 seats theater = Theater(10) # Reserve seats from 3 to 5 print(theater.reserve(3, 5)) # True # Check if seats from 3 to 5 are available print(theater.is_available(3, 5)) # False # Check if seats from 1 to 2 are available print(theater.is_available(1, 2)) # True # Cancel reservation from 3 to 5 print(theater.cancel(3, 5)) # True # Check if seats from 3 to 5 are available print(theater.is_available(3, 5)) # True # Try to cancel seats that were not reserved print(theater.cancel(1, 2)) # False ``` # Constraints - `1 <= N <= 1000` - `1 <= start <= end <= N` # Note - All methods should operate efficiently even for the largest inputs. - You can assume that the input arguments to the methods will always be valid, meaning that `1 <= start <= end <= N`.","solution":"class Theater: def __init__(self, N: int): self.seats = [True] * N # True indicates that the seat is available def reserve(self, start: int, end: int) -> bool: if all(self.seats[start-1:end]): for i in range(start-1, end): self.seats[i] = False return True return False def cancel(self, start: int, end: int) -> bool: if not all(self.seats[start-1:end]): for i in range(start-1, end): self.seats[i] = True return True return False def is_available(self, start: int, end: int) -> bool: return all(self.seats[start-1:end])"},{"question":"You are given an array of integers representing the number of hours you have available to study each day for a series of exams. Your goal is to distribute your study time optimally to maximize your total score. Each exam is scheduled on a different day, and the score for an exam is computed as the square of the number of hours you study for that exam. You can study for multiple exams on the same day, but the score for each exam must be calculated independently. Your task is to determine the maximum total score you can obtain given the distribution of available study hours. Input The first line of input contains an integer N (1 ≤ N ≤ 1000), the number of days. The second line contains N space-separated integers, where the i-th integer represents the number of hours available on the i-th day (1 ≤ hours ≤ 100). Output Output a single integer representing the maximum total score you can achieve based on the distribution of available study hours. Examples Input 5 1 2 3 4 5 Output 55 Input 3 10 10 10 Output 300 Explanation In the first example, you can study for one hour on each of the first five days for the first exam, giving you scores of 1^2 = 1, 2^2 = 4, 3^2 = 9, 4^2 = 16, and 5^2 = 25, for a total score of 55. In the second example, you can study for each exam for the entire 10 hours on different days, giving you scores of 10^2 = 100, 10^2 = 100, and 10^2 = 100, for a total score of 300.","solution":"def max_total_score(N, hours): Returns the maximum total score that can be achieved given the number of hours available each day. Parameters: N (int): Number of days. hours (list): List of integers representing the number of hours available each day. Returns: int: The maximum total score achievable. # Calculating the total score: total_score = sum([hour ** 2 for hour in hours]) return total_score"},{"question":"A company is organizing a treasure hunt game in an n×m grid. The grid cells are either empty or contain a wall. The company provided a map of the grid s depicting which cells are empty (\'.\') and which have walls (\'#\'). The treasure hunt starts at the top-left cell (0,0), and the participants must reach the bottom-right cell (n-1, m-1). They can move up, down, left, or right, but cannot pass through walls. The participants aim to find the shortest path from the starting cell to the treasure. Write a function to find the minimum number of steps required to reach the treasure from the starting cell. If reaching the treasure is not possible, return -1. # Constraints * 1 ≤ n, m ≤ 100 * The starting cell (0,0) and the treasure cell (n-1, m-1) are always empty cells (\'.\'). # Input The input is given in the following format from standard input: ``` n m s1 s2 ... sn ``` * n and m are the dimensions of the grid. * si is a string representing the ith row of the grid. # Output Print the minimum number of steps required to reach the treasure, or -1 if it is not possible. # Examples Example 1 **Input:** ``` 4 5 ..... .#... .#.#. ...#. ``` **Output:** ``` 7 ``` Example 2 **Input:** ``` 3 3 . # . ``` **Output:** ``` -1 ```","solution":"from collections import deque def min_steps_to_treasure(n, m, grid): # Directions for up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() # Check if reached bottom-right cell if x == n - 1 and y == m - 1: return steps # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) # If no path found return -1"},{"question":"Palindrome Permutation Check A palindrome is a word or phrase that reads the same backward as forward, ignoring spaces and punctuation marks. For instance, \\"madam\\", \\"racecar\\", and \\"A man, a plan, a canal, Panama\\" are all palindromes. Given a string, determine if any permutation of the characters in the string can form a palindrome. To illustrate, \\"civic\\" is already a palindrome, \\"ivicc\\" can be rearranged to \\"civic\\", whereas \\"hello\\" cannot form a palindrome. One important consideration is to disregard any spaces in the string and treat the characters as case-insensitive. The program should determine whether the string can be rearranged into a palindromic form. Input The input contains multiple lines. Each line contains a string with a maximum length of 100 characters. The input ends with a single line containing a period (\\".\\"), which should not be processed. Output For each input string, output \\"yes\\" if any permutation of the characters can form a palindrome, or \\"no\\" if no permutation can form a palindrome. The output should be case-insensitive and there should be no extra characters in the output. Sample Input Tact Coa Able was I ere I saw Elba not a palindrome No lemon, no melon . Sample Output yes yes no yes Example Input Output","solution":"def can_form_palindrome(s): Determines if any permutation of the given string s can form a palindrome. :param s: input string :return: \'yes\' if a permutation can form a palindrome, \'no\' otherwise from collections import Counter # Remove spaces and convert to lowercase cleaned_s = \'\'.join(filter(str.isalnum, s)).lower() # Count character frequencies char_count = Counter(cleaned_s) # Check the number of characters with odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if at most one character has an odd count return \'yes\' if odd_count <= 1 else \'no\' def process_input(input_lines): results = [] for line in input_lines: if line.strip() == \'.\': break result = can_form_palindrome(line) results.append(result) return results"},{"question":"You are given a list of N integers, representing the heights of people standing in a queue. Unfortunately, some people are missing from the queue, and the heights of those missing people are represented as -1. You need to determine if it is possible to sort the list in non-decreasing order by inserting positive integers in place of the -1s. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". Constraints * 1 leq N leq 10^5 * -1 leq heights[i] leq 10^9 Input The input is given from Standard Input in the following format: N heights_1 heights_2 ... heights_N Output Print \\"YES\\" if it is possible to sort the queue in non-decreasing order by replacing -1s with positive integers. Otherwise, print \\"NO\\". Examples Input 5 -1 2 3 -1 5 Output YES Input 6 4 -1 -1 2 6 8 Output NO","solution":"def can_sort_queue(N, heights): Determines if it is possible to sort the list in non-decreasing order by inserting positive integers in place of -1s. Parameters: N (int): The number of elements in the list. heights (list of int): The heights of people in the queue, where -1 represents a missing person. Returns: str: \\"YES\\" if it is possible to sort the list, otherwise \\"NO\\". # Iterate through the heights list and check where the -1s are. previous_height = float(\'-inf\') for height in heights: if height != -1: if height < previous_height: return \\"NO\\" previous_height = height return \\"YES\\""},{"question":"You are given an integer N (1 ≤ N ≤ 1000). Determine whether the sum of digits of N is divisible by 3. Constraints * The input value is a single integer. * 1 ≤ N ≤ 1000 Input Input is given from Standard Input in the following format: N Output If the sum of the digits of N is divisible by 3, print `Yes`; otherwise, print `No`. Examples Input 123 Output Yes Input 26 Output No Input 999 Output Yes","solution":"def is_sum_of_digits_divisible_by_3(N): Determine whether the sum of the digits of N is divisible by 3. Parameters: N (int): A given integer (1 ≤ N ≤ 1000) Returns: str: \'Yes\' if the sum of digits is divisible by 3, otherwise \'No\' digit_sum = sum(int(digit) for digit in str(N)) return \\"Yes\\" if digit_sum % 3 == 0 else \\"No\\""},{"question":"**Problem description.** Peter is playing a card game with his friends. There are N cards arranged in a row, where each card has a number written on it. Peter wants to know the maximum sum of a contiguous subarray of cards. Help Peter find the maximum sum of any contiguous subarray of cards. **Input** Input description: - First line of input contains an integer N, the number of cards. - The next line contains N integers, representing the numbers on the cards. **Output** Output description: - Print the maximum sum of any contiguous subarray of cards. **Example** Input: 6 -2 1 -3 4 -1 2 1 -5 4 Output: 6 **Explanation** In this case N=6. The contiguous subarray with the maximum sum is [4, -1, 2, 1], and its sum is 6.","solution":"def max_contiguous_subarray_sum(nums): Returns the maximum sum of any contiguous subarray. if not nums: return 0 max_sum = nums[0] current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an array of N integers and a value X. Determine if there exists any pair of elements in the array whose sum is equal to X. Return \\"Yes\\" if such a pair exists, otherwise print \\"No\\". Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ Ai ≤ 10^9 * 1 ≤ X ≤ 2 × 10^9 Input Input is given from Standard Input in the following format: N X A1 A2 A3 ... AN Output Output either \\"Yes\\" or \\"No\\" based on whether there exists a pair of elements whose sum is equal to X. Examples Input 5 10 3 4 1 7 5 Output Yes Input 4 8 1 2 3 9 Output No Input 6 14 10 2 4 6 8 12 Output Yes","solution":"def has_pair_with_sum(n, x, arr): Determines if there exists a pair of elements in the array whose sum is equal to X. :param n: number of elements in the array :param x: target sum :param arr: list of integers (the array) :return: \\"Yes\\" if such a pair exists, \\"No\\" otherwise elements_set = set() for number in arr: if x - number in elements_set: return \\"Yes\\" elements_set.add(number) return \\"No\\""},{"question":"A forest has N distinct types of trees. The trees of each type are planted in a contiguous block along a straight path. There are T test cases to be processed. For each test case, you will be given Q queries. Each query consists of a single integer representing the position of a tree along the path, and you have to determine the type of the tree at that position. Input: The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains an integer N denoting the number of distinct tree types. The second line contains N space-separated integers where the i-th integer Ai denotes the number of consecutive trees of type i in the forest. The third line contains an integer Q denoting the number of queries. Each of the next Q lines contains a single integer representing the position of a tree (1-indexed). Output: For each query, output the type of the tree at the given position. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Ai ≤ 10^4 1 ≤ Q ≤ 10^5 1 ≤ Position ≤ sum of all Ai in the test case SAMPLE INPUT 1 3 2 3 4 5 1 3 5 6 9 SAMPLE OUTPUT 1 2 2 3 3 Explanation There are 3 types of trees: 2 trees of type 1, 3 trees of type 2, and 4 trees of type 3. For the queries: - Position 1 falls within the block of type 1 trees, so the answer is 1. - Position 3 is in the block of type 2 trees, so the answer is 2. - Position 5 is also type 2. - Position 6 starts the block of type 3 trees, so the answer is 3. - Position 9 is also type 3.","solution":"def find_tree_type(N, A, positions): This function returns the types of trees at the given positions. :param N: Number of distinct tree types :param A: List containing the number of consecutive trees of each type :param positions: List of positions for which the tree type is to be determined :return: List of types of trees at the given positions # Compute the prefix sums to determine position ranges of each tree type. prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i - 1] + A[i - 1] result = [] for pos in positions: # Perform binary search to find the correct type based on the position low, high = 0, N while low < high: mid = (low + high) // 2 if pos <= prefix_sums[mid]: high = mid else: low = mid + 1 result.append(low) return result def process_queries(T, test_cases): This function processes multiple test cases and returns the results. :param T: Number of test cases :param test_cases: List of test case data where each element is a tuple (N, A, Q, positions) :return: List of list of results for each test case results = [] for N, A, Q, positions in test_cases: results.append(find_tree_type(N, A, positions)) return results"},{"question":"A popular online game allows players to collect points by completing challenges. The game controls the number of points players have and offers various types of actions to modify these points. The game supports the following actions which a player can perform: - ADD X: Increases the number of points by X (1 ≤ X ≤ 1000). - SUBTRACT X: Decreases the number of points by X (1 ≤ X ≤ 1000). The player\'s points cannot go below 0. - MULTIPLY X: Multiplies the number of points by X (1 ≤ X ≤ 10). - DIVIDE X: Divides the number of points by X (1 ≤ X ≤ 10). This operation uses integer division, meaning the result is rounded down to the nearest integer. You need to simulate these actions and determine the player\'s points after each action. Input - The first line contains an integer N (1 ≤ N ≤ 1000), the number of actions. - The following N lines each contain one of the described actions. Output - Output N lines, where the i^th line contains the number of points after the i^th action. Example Input: 5 ADD 5 MULTIPLY 2 SUBTRACT 4 DIVIDE 3 ADD 10 Output: 5 10 6 2 12 Explanation: Initially, the number of points is 0. After ADD 5, the points increase to 5. After MULTIPLY 2, the points double to 10. After SUBTRACT 4, the points decrease to 6. After DIVIDE 3, the points are divided by 3, result is 2. After ADD 10, the points increase to 12.","solution":"def game_points_simulation(actions): points = 0 results = [] for action in actions: command, value = action.split() value = int(value) if command == \\"ADD\\": points += value elif command == \\"SUBTRACT\\": points = max(0, points - value) elif command == \\"MULTIPLY\\": points *= value elif command == \\"DIVIDE\\": points //= value results.append(points) return results"},{"question":"A college organizes a programming competition in which each student is assigned a computer in a single line. Due to network constraints, a student can only cooperate with another student who is seated at a distance of exactly `k` computers away. You have to form as many cooperating pairs as possible. Each student has an energy level. When two students cooperate, their energy levels should be within a given threshold `d` of each other. The cooperation pairs should be formed such that the maximum number of students can cooperate, and each student can be part of at most one cooperating pair. Given the number of students `n`, the distance `k`, and the energy levels of the students, determine the maximum number of cooperating pairs that can be formed. Input The first line contains three integers `n` (1 ≤ n ≤ 2·10^5), `k` (1 ≤ k < n), and `d` (0 ≤ d ≤ 10^5) — the number of students, the required distance for cooperation, and the maximum energy difference for cooperation. The second line contains `n` integers `e1, e2, ..., en` (1 ≤ ei ≤ 10^5) where `ei` denotes the energy level of the i-th student. Output Print a single integer — the maximum number of cooperating pairs that can be formed. Examples Input 5 1 2 4 7 5 6 8 Output 2 Input 6 2 3 1 2 3 4 5 6 Output 2 Input 4 1 0 1 5 3 7 Output 0 Note In the first example, the pairs that can be formed are: - Student 1 (energy 4) and Student 2 (energy 7) cannot cooperate since `|4 - 7| = 3 > 2` - Student 2 (energy 7) and Student 3 (energy 5) can cooperate since `|7 - 5| = 2 ≤ 2` - Student 3 (energy 5) and Student 4 (energy 6) can cooperate since `|5 - 6| = 1 ≤ 2` - Student 4 (energy 6) and Student 5 (energy 8) cannot cooperate since `|6 - 8| = 2 > 2` Thus, the maximum number of cooperating pairs is 2. In the second example, the pairs that can be formed are: - Student 1 (energy 1) and Student 3 (energy 3) can cooperate since `|1 - 3| = 2 ≤ 3` - Student 2 (energy 2) and Student 4 (energy 4) can cooperate since `|2 - 4| = 2 ≤ 3` - Student 3 (energy 3) and Student 5 (energy 5) can cooperate since `|3 - 5| = 2 ≤ 3` - Student 4 (energy 4) and Student 6 (energy 6) can cooperate since `|4 - 6| = 2 ≤ 3` Thus, picking the best opportunities, the maximum number of cooperating pairs is 2. In the third example, no pairs can be formed since `|ei - ej|` for any adjacent students `i` and `j` is greater than 0 for any given `k`, and `d = 0`.","solution":"def max_cooperating_pairs(n, k, d, energy_levels): Determine the maximum number of cooperating pairs. Parameters: n (int): The number of students. k (int): The required distance for cooperation. d (int): The maximum energy difference for cooperation. energy_levels (list): The energy levels of the students. Returns: int: The maximum number of cooperating pairs. cooperating_pairs = 0 visited = [False] * n for i in range(n): if i + k < n and not visited[i] and not visited[i + k] and abs(energy_levels[i] - energy_levels[i + k]) <= d: cooperating_pairs += 1 visited[i] = True visited[i + k] = True return cooperating_pairs"},{"question":"You are given an array `a` of size `n` and `q` queries to perform on it. Each query is of the form: * 1 l r v — add value `v` to each element in the segment `[l, r]` (1-indexed). * 2 l r — calculate the sum of elements in the segment `[l, r]` (1-indexed) and return it. After processing all the queries, you need to output the results of all queries of type 2. # Input The first line contains two integer numbers `n` and `q` (1 ≤ n, q ≤ 2·10^5). The second line contains `n` integer numbers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9). The next `q` lines each contain either: - three integers `1 l r v` (1 ≤ l ≤ r ≤ n, 1 ≤ v ≤ 10^9), describing a query of the first type, or - two integers `2 l r` (1 ≤ l ≤ r ≤ n), describing a query of the second type. # Output Print the results of all queries of the second type, each on a new line. # Example Input ``` 5 3 1 2 3 4 5 1 2 4 3 2 1 5 2 3 5 ``` Output ``` 21 15 ``` # Explanation After performing the first query: a = [1, 5, 6, 7, 5] For the second query, sum of the entire array is 1+5+6+7+5 = 24. For the third query, sum of elements from 3rd to 5th position is 6+7+5 = 18.","solution":"def process_queries(n, q, a, queries): Processes the queries on the array a and returns the result of sum queries. Args: n: (int) the size of the array. q: (int) number of queries. a: (list of int) initial array. queries: (list of tuples) list of queries to perform. Returns: list of int: results of the sum queries. results = [] for query in queries: if query[0] == 1: _, l, r, v = query for i in range(l - 1, r): a[i] += v else: _, l, r = query results.append(sum(a[l - 1:r])) return results"},{"question":"A small company has a complex inventory system consisting of various products stored in different storage units. The owner of the company wants to efficiently manage the inventory by frequently querying the total number of a specific type of product available across all storage units. You are tasked with writing a program that processes these queries and provides the required information. Constraints > 1 ≤ s ≤ 10^4 > 1 ≤ t ≤ 10^5 > 1 ≤ pi ≤ 10^4 (1 ≤ i ≤ s) > 1 ≤ qi ≤ 10^4 (1 ≤ i ≤ t) > ai and bi are integers (1 ≤ i ≤ s) > ci and di are integers (1 ≤ i ≤ t) > 1 ≤ ai, bi, ci, di ≤ 10^4 * All inputs are given as integers Input > s t > a1 b1 > a2 b2 > ... > as bs > c1 d1 > c2 d2 > ... > ct dt * s represents the number of storage units. * t represents the number of queries. * The 2nd to s + 1 lines represent the products and their quantities in each storage unit. * ai represents the product type. * bi represents the quantity of the product type in the storage unit. * The s + 2nd to s + t + 1 lines represent each query to the storage system. * Each query consists of two integers ci and di representing the range of product types [ci, di] to be counted, inclusively. Output > Q1 > Q2 > ... > Qt * Output the total number of products of the specified types for each query. Examples Input 5 3 1 10 2 20 3 30 4 40 5 50 1 3 2 4 1 5 Output 60 90 150 Input 3 2 2 15 2 25 3 35 2 2 3 3 Output 40 35","solution":"def process_inventory(s, t, products, queries): Processes the queries and returns the required information about the total number of specific types of products available across all storage units. Args: s (int): Number of storage units. t (int): Number of queries. products (list of tuples): Each tuple contains the product type and its quantity. queries (list of tuples): Each tuple contains the range of product types to be counted. Returns: list of int: Total number of products of the specified types for each query. # Create a dictionary to store the total quantity for each product type product_quantity = {} for p_type, quantity in products: if p_type in product_quantity: product_quantity[p_type] += quantity else: product_quantity[p_type] = quantity results = [] # Process each query for ci, di in queries: total_quantity = 0 for p_type in range(ci, di + 1): if p_type in product_quantity: total_quantity += product_quantity[p_type] results.append(total_quantity) return results"},{"question":"You are organizing a competition where participants demonstrate their problem-solving skills by navigating through a series of blocked paths. Each path is represented by a string consisting of two types of characters: `\'O\'` (open path) and `\'#\'` (blocked path). Participants can move only from left to right and must determine if they can reach the end of the path. For each path, the participants follow this rule: 1. If the starting position (leftmost character) is \'#\', the path is blocked and they cannot start. 2. They can only move from one `\'O\'` to another `\'O\'`. 3. They cannot jump over or move into positions marked by `\'#\'`. As an organizer, you are given multiple path strings and need to determine whether participants can successfully navigate from the start (leftmost character) to the end (rightmost character) for each path provided. # Input The input consists of multiple paths given in the following format: ``` N p_1 p_2 : p_N ``` where: * `N` is the number of paths. * `p_i` is a string consisting only of characters `\'O\'` and `\'#\'`, representing the i-th path. # Output For each path, print `Yes` if the participant can navigate from the start to the end of the path without encountering any blocks. Otherwise, print `No`. # Constraints * 1 ≤ N ≤ 10^4 * 1 ≤ |p_i| ≤ 10^5 * p_i consists only of the characters `\'O\'` and `\'#\'`. # Examples Input ``` 3 OOOO OO O#O ``` Output ``` Yes No No ``` Input ``` 2 OOO OOO ``` Output ``` No No ```","solution":"def can_navigate_paths(N, paths): results = [] for path in paths: if path[0] == \'#\' or \'#\' in path: results.append(\\"No\\") else: results.append(\\"Yes\\") return results"},{"question":"You are tasked with designing a new transportation system for an underground city consisting of n stations connected by m bidirectional tunnels. Each tunnel connects two different stations and has a specific transit time. Your goal is to design a transit system that minimizes the travel time for given queries involving different start and end stations. The underground city can be represented as a graph where each station is a vertex and each tunnel is an edge with a weight equal to the transit time. You\'ll receive multiple queries where each query asks for the minimum travel time between two stations. Input The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^6) — the number of stations and tunnels in the underground city. The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^3) — two stations connected by a tunnel and the transit time between them. The next line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the next q lines contains two integers x and y (1 ≤ x, y ≤ n) — the starting and ending stations for each query. It is guaranteed that x and y are different for each query. Output Print q integers, one per line — the minimum travel time for each query. If there is no path between the given stations in a query, print -1. Example Input 5 6 1 2 4 2 3 1 3 4 2 4 5 3 1 5 10 2 4 5 3 1 3 2 5 1 4 Output 5 6 7 Note In the first query, the optimal path from station 1 to station 3 is through station 2, taking a total of 5 time units (1 -> 2 -> 3: 4 + 1 = 5). In the second query, the optimal path from station 2 to station 5 is through stations 3 and 4, taking a total of 6 time units (2 -> 3 -> 4 -> 5: 1 + 2 + 3 = 6). In the third query, the optimal path from station 1 to station 4 is through stations 2 and 3, taking a total of 7 time units (1 -> 2 -> 3 -> 4: 4 + 1 + 2 = 7).","solution":"import heapq import sys from collections import defaultdict def dijkstra(graph, start, n): dist = [float(\'inf\')] * (n + 1) dist[start] = 0 pq = [(0, start)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist def minimal_travel_time(n, m, edges, queries): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for x, y in queries: dist = dijkstra(graph, x, n) results.append(dist[y] if dist[y] != float(\'inf\') else -1) return results"},{"question":"A software company has multiple servers. Over time, these servers can experience fluctuating loads due to different tasks assigned to them. The company\'s goal is to balance the load across the servers as evenly as possible to optimize performance. Each server has a load capacity, which is the maximum load it can handle. You need to redistribute a certain number of additional tasks among the servers such that the maximum load on any server after redistribution doesn\'t exceed the initial highest load before redistribution. Input The first line contains an integer t, the number of test cases. For each test case, the first line contains two integers n and k, where n is the number of servers and k is the number of additional tasks to redistribute. The next line contains n integers representing the load capacity of each server. Output For each test case, print a single line containing the maximum load on any server after redistributing the tasks, ensuring it does not exceed the initial highest load before redistribution. SAMPLE INPUT 2 3 7 5 10 3 4 2 4 8 6 3 SAMPLE OUTPUT 10 8 Explanation Input Constraints are 1 ≤ t ≤ 100 1 ≤ n ≤ 100 0 ≤ k ≤ 100000 1 ≤ load capacity ≤ 10000","solution":"def max_load_after_distribution(t, test_cases): results = [] for case in test_cases: n, k = case[\'n\'], case[\'k\'] capacities = case[\'capacities\'] max_capacity = max(capacities) additional_tasks = min(k, n * max_capacity - sum(capacities)) results.append(max_capacity) return results def parse_input(input_data): input_lines = input_data.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] idx = 1 for _ in range(t): n, k = map(int, input_lines[idx].split()) capacities = list(map(int, input_lines[idx + 1].split())) test_cases.append({\'n\': n, \'k\': k, \'capacities\': capacities}) idx += 2 return t, test_cases def process(input_data): t, test_cases = parse_input(input_data) return max_load_after_distribution(t, test_cases)"},{"question":"Input The input contains a single string s (1 ≤ s.length ≤ 100), which consists of only lowercase English letters. Output Return the length of the longest palindrome that can be formed using the characters from the string s. Examples Input abccccdd Output 7 Explanation One example of the longest palindrome that can be formed is \\"dccaccd\\". Input a Output 1 Explanation The only palindromic sequence is \\"a\\". Input bb Output 2 Explanation The longest palindrome that can be formed is \\"bb\\".","solution":"def longest_palindrome(s): Returns the length of the longest palindrome that can be formed using the characters of the given string s. from collections import Counter char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"You are working for a delivery logistics company that aims to optimize its package delivery routes. The company operates in a city represented by a grid of size n × n. The grid is initially empty, and they need an efficient way to keep track of packages that are delivered at certain grid points and answer queries about the total number of packages within specific sub-grids. The grid supports two types of operations: 1. **Delivery** - When a new package is delivered at a specific grid point (i, j). 2. **Query** - Determine the number of packages delivered in the sub-grid from (x1, y1) to (x2, y2) inclusive. Write a program that processes the operations efficiently. Input The first line of input contains two integers n and q (1 ≤ n ≤ 1000, 1 ≤ q ≤ 100,000) — the size of the grid and the number of operations. Each of the following q lines contains an operation: - An operation of type \\"Delivery\\" is given as: `1 i j`, where 1 denotes the type of operation, and (i, j) (1 ≤ i, j ≤ n) specifies the grid point. - An operation of type \\"Query\\" is given as: `2 x1 y1 x2 y2`, where 2 denotes the type of operation, and (x1, y1) (1 ≤ x1 ≤ x2 ≤ n) and (y1, y2) (1 ≤ y1 ≤ y2 ≤ n) specify the corners of the sub-grid. Output For each query operation, output a single integer — the number of packages in the specified sub-grid. Example Input 5 6 1 1 1 1 2 2 1 3 3 2 1 1 3 3 1 4 4 2 2 2 5 5 Output 3 2 Note In the example above: - The first three operations deliver packages to points (1, 1), (2, 2), and (3, 3). - The first query checks the sub-grid from (1, 1) to (3, 3), which contains 3 packages. - The fourth delivery operation delivers a package to point (4, 4). - The second query checks the sub-grid from (2, 2) to (5, 5), which now contains 2 packages. Your task is to efficiently handle the delivery and query operations, ensuring the program can handle up to the maximum constraints.","solution":"class DeliveryGrid: def __init__(self, n): self.n = n # Initialize a 2D list of integers (size (n+1)x(n+1)) for prefix sum array self.grid = [[0] * (n + 1) for _ in range(n + 1)] def deliver(self, i, j): # Mark the delivery point self.grid[i][j] += 1 def query(self, x1, y1, x2, y2): # Compute the prefix sums prefix_sum = [[0] * (self.n + 1) for _ in range(self.n + 1)] for i in range(1, self.n + 1): for j in range(1, self.n + 1): prefix_sum[i][j] = (self.grid[i][j] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) # Compute the number of packages in the sub-grid using the prefix sums total = (prefix_sum[x2][y2] - (prefix_sum[x1-1][y2] if x1 > 1 else 0) - (prefix_sum[x2][y1-1] if y1 > 1 else 0) + (prefix_sum[x1-1][y1-1] if x1 > 1 and y1 > 1 else 0)) return total"},{"question":"A robot is located at the top-left corner of an m x n grid (marked \'Start\' in the diagram below). ``` Start: Finish: (0,0) (m-1,n-1) +---+---+---+---+---+ +---+---+---+ | | | | | |... ... | | | | | A| | | | | | | | | +---+---+---+---+---+ +---+---+---+ | | | | | | | | | | | | | | | | | | | | +---+---+---+---+---+ +---+---+---+ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . +---+---+---+---+---+ +---+---+---+ | | | | | | | | | | | | | | | | | B| | | +---+---+---+---+---+ +---+---+---+ ``` The robot can only move to either the right or down at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the diagram above) but there are obstacles on the grid. Obstacles are represented as \'1\' and free space as \'0\' in the m x n grid. The robot seeks the unique path from start to finish. If there are no possible unique paths, output is 0. Write a function that finds the number of unique paths the robot can take to reach the bottom-right corner considering the obstacles. **Input:** * The first line contains two integers m and n (1 ≤ m, n ≤ 1000) – the number of rows and columns respectively in the grid. * The next m lines each contain a string of length n with \'0\' representing an open cell and \'1\' representing an obstacle. **Output:** Return an integer representing the number of unique paths from the start to \'Finish\' considering the obstacles. **Example:** **Input:** ``` 3 3 0 0 0 0 1 0 0 0 0 ``` **Output:** ``` 2 ``` **Example:** **Input:** ``` 3 3 0 1 0 0 1 0 0 0 0 ``` **Output:** ``` 1 ```","solution":"def unique_paths_with_obstacles(grid): m = len(grid) n = len(grid[0]) if grid[0][0] == \'1\' or grid[m-1][n-1] == \'1\': return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 - int(grid[0][0]) for i in range(m): for j in range(n): if grid[i][j] == \'1\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"There are N students standing in a row from left to right, each with a certain height. You can select a student and decrease their height by 1 unit any number of times or do nothing. Your goal is to make the sequence of heights strictly decreasing from left to right. Write a function that determines whether it is possible to achieve a strictly decreasing sequence of heights by performing the operations described. Constraints * All values in input are integers. * 1 ≤ N ≤ 10^5 * 1 ≤ H_i ≤ 10^9 Input Input is given from Standard Input in the following format: N H_1 H_2 ... H_N Output If it is possible to make the heights of the students strictly decreasing from left to right, print `Possible`; otherwise, print `Impossible`. Examples Input 4 4 3 2 1 Output Possible Input 5 5 5 5 4 3 Output Impossible Input 3 3 1 2 Output Impossible Input 1 2000000000 Output Possible","solution":"def is_strictly_decreasing_possible(N, heights): Determines if it is possible to make the heights of students strictly decreasing from left to right by reducing any student\'s height by 1 unit any number of times. Parameters: - N: an integer representing the number of students - heights: a list of integers representing the heights of the students Returns: - \'Possible\' or \'Impossible\' depending on whether the sequence can be made strictly decreasing for i in range(1, N): if heights[i] >= heights[i - 1]: return \'Impossible\' return \'Possible\'"},{"question":"You are tasked with developing a database system that records and processes event logs from multiple sources. The logs come via a stream over a period and have the following structure: timestamp, source_id, event_type. Here are the definitions: - `timestamp` is a Unix timestamp (a non-negative integer) representing the time the event was generated. - `source_id` is a positive integer representing the ID of the source that generated the event. - `event_type` is a string representing the type of event (e.g., \\"ERROR\\", \\"INFO\\", \\"DEBUG\\"). These logs are collected in an unordered manner and can span across months, hence the database needs to collate and process this data in real-time. Your task is to write a program that takes as input the logs and processes them to answer the following query efficiently: Given a time range [start_time, end_time] and a source_id, return the count of each event_type that occurred within that time range for the specified source_id. The program should handle multiple queries and provide results in a timely manner. # Input Format 1. The first line contains an integer `n` (1 ≤ n ≤ 100,000), the number of logs. 2. Each of the next `n` lines contains three space-separated values: an integer `timestamp`, an integer `source_id`, and a string `event_type`. 3. The next line contains an integer `q` (1 ≤ q ≤ 10,000), the number of queries. 4. Each of the next `q` lines contains three space-separated values: two integers `start_time`, `end_time`, and an integer `source_id`. # Output Format For each query, print the count of each event_type within the given time range for the specified source_id in the following format: ``` event_type_1 count_1 event_type_2 count_2 ... event_type_k count_k ``` Event types and their counts should be ordered lexicographically by event_type. If there are no events in the provided range, output \\"No events\\". # Example Input ``` 6 1609459200 1 ERROR 1609459260 2 INFO 1609459320 1 DEBUG 1609459380 2 ERROR 1609459440 1 INFO 1609459500 1 ERROR 2 1609459200 1609459440 1 1609459200 1609459440 2 ``` Output ``` DEBUG 1 ERROR 1 INFO 1 No events ``` # Constraints - The total number of logs and queries might require efficient storage and fast retrieval. - You may assume that timestamps are given in increasing order. - Event types are alphanumeric and have a maximum length of 10 characters. # Notes To solve this problem, consider using appropriate data structures that can store and retrieve logs based on time ranges and source_id efficiently. Optimize for quick insertion of logs and fast query processing.","solution":"from collections import defaultdict class EventLogProcessor: def __init__(self): self.logs_by_source = defaultdict(list) def add_log(self, timestamp, source_id, event_type): self.logs_by_source[source_id].append((timestamp, event_type)) def process_logs(self): for source_id in self.logs_by_source: self.logs_by_source[source_id].sort() def query(self, start_time, end_time, source_id): if source_id not in self.logs_by_source: return \\"No events\\" logs = self.logs_by_source[source_id] event_count = defaultdict(int) for timestamp, event_type in logs: if start_time <= timestamp <= end_time: event_count[event_type] += 1 if not event_count: return \\"No events\\" sorted_events = sorted(event_count.items()) result = [f\\"{event_type} {count}\\" for event_type, count in sorted_events] return \\"n\\".join(result) def main(): import sys input = sys.stdin.read data = input().split(\'n\') n = int(data[0]) event_processor = EventLogProcessor() for i in range(1, n + 1): timestamp, source_id, event_type = data[i].split() timestamp, source_id = int(timestamp), int(source_id) event_processor.add_log(timestamp, source_id, event_type) event_processor.process_logs() q = int(data[n + 1]) queries = data[n + 2:n + 2 + q] results = [] for query in queries: start_time, end_time, source_id = map(int, query.split()) result = event_processor.query(start_time, end_time, source_id) results.append(result) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are managing several projects, each with a specific set of prerequisites, in a large software company. You need to determine the minimum time required to complete all projects given the dependencies among them. The completion time for each project is fixed and provided. # Task You are given the number of projects, their respective completion times, and the dependencies among them. Your task is to determine the minimum time required to complete all the projects. # Input - The first line contains an integer `N` (1 ≤ N ≤ 100000), which is the number of projects. - The second line contains `N` integers `T1, T2, ..., TN` (1 ≤ Ti ≤ 10000), where `Ti` is the time required to complete the i-th project. - The third line contains an integer `M` (0 ≤ M ≤ 200000), which is the number of dependencies. - The following `M` lines each contain two integers `A` and `B` (1 ≤ A, B ≤ N), indicating that project `A` must be completed before project `B`. # Output - Output a single integer, the minimum time required to complete all projects. # Example Input ``` 5 3 2 1 4 5 4 1 2 1 3 3 4 2 5 ``` Output ``` 10 ``` # Explanation In this example, there are 5 projects. The times required for their completion are [3, 2, 1, 4, 5]. The dependencies specify that: - Project 1 must be completed before projects 2 and 3. - Project 3 must be completed before project 4. - Project 2 must be completed before project 5. The minimum time to complete all projects is determined by the critical path, which is 10 time units: - Complete project 1 (3 units) - Then project 2 (2 units, total 5 units) and project 3 (1 unit, total 4 units) - Project 4 can only start after project 3 is finished (4 + 4 = 8 units) - Project 5 can only start after project 2 is finished (5 + 5 = 10 units)","solution":"from collections import deque, defaultdict def min_time_to_complete_projects(N, times, M, dependencies): # Convert 1-based to 0-based indexing for times and dependencies times = [0] + times adj_list = defaultdict(list) in_degree = [0] * (N + 1) for dep in dependencies: A, B = dep adj_list[A].append(B) in_degree[B] += 1 queue = deque() earliest_finish = [0] * (N + 1) for i in range(1, N + 1): if in_degree[i] == 0: queue.append(i) earliest_finish[i] = times[i] while queue: current = queue.popleft() for neighbor in adj_list[current]: in_degree[neighbor] -= 1 earliest_finish[neighbor] = max(earliest_finish[neighbor], earliest_finish[current] + times[neighbor]) if in_degree[neighbor] == 0: queue.append(neighbor) return max(earliest_finish) # Example usage: N = 5 times = [3, 2, 1, 4, 5] M = 4 dependencies = [(1, 2), (1, 3), (3, 4), (2, 5)] print(min_time_to_complete_projects(N, times, M, dependencies)) # Output: 10"},{"question":"You are organizing a treasure hunt competition. There are n locations and each location is represented as a point with coordinates (x, y) in a 2D plane. The i-th location is at point (x_i, y_i). You have to hide the treasure at one of these locations. The objective of the game is to select a location to hide the treasure such that it minimizes the maximum distance any participant has to travel to reach the treasure from their starting location. Initially, each participant is located at one of the points given among the n locations. The distance between two points (x1, y1) and (x2, y2) is defined as the Manhattan distance, which is |x1 - x2| + |y1 - y2|. You need to determine the optimal point among the n given points to hide the treasure which minimizes the maximum Manhattan distance any participant has to travel. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of locations. Each of the next n lines contains two integers x_i and y_i (|x_i|, |y_i| ≤ 10^9) — the coordinates of the i-th location. Output Print two integers x_treasure and y_treasure — the coordinates of the location where you should hide the treasure such that it minimizes the maximum distance any participant has to travel. Examples Input 3 0 0 2 2 1 1 Output 1 1 Input 4 1 3 5 1 2 2 6 6 Output 2 2","solution":"def optimal_treasure_location(n, locations): Determines the optimal treasure location that minimizes the maximum Manhattan distance any participant has to travel. Parameters: n (int): Number of locations locations (list of tuple): List of tuples where each tuple represents the coordinates (x, y) of a location Returns: tuple: Coordinates of the optimal treasure location (x, y) # Extract the x and y coordinates separately x_coords = sorted([x for x, y in locations]) y_coords = sorted([y for x, y in locations]) # The optimal x and y are the median of the x and y coordinates respectively optimal_x = x_coords[(n - 1) // 2] optimal_y = y_coords[(n - 1) // 2] return (optimal_x, optimal_y)"},{"question":"You are given an array of integers, where each integer may appear multiple times. Your task is to find the number of unique pairs `(a, b)` (where `a` and `b` are different elements of the array) such that their sum is equal to a given target integer. A pair (a, b) and (b, a) are considered the same and should be counted only once. Input The first line of the input contains an integer N (2 ≤ N ≤ 100) - the number of elements in the array. The second line contains N integers representing the elements of the array. The third line contains a single integer - the target sum. Output Output a single integer - the count of unique pairs whose sum is equal to the target sum. Examples Input 5 1 2 3 4 5 6 Output 2 Input 4 1 1 1 1 2 Output 1 Input 6 2 4 3 5 7 8 10 Output 2","solution":"def count_unique_pairs(nums, target): Given an array of integers nums and a target integer, return the number of unique pairs (a, b) such that their sum equals the target and a != b. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pair = tuple(sorted((num, complement))) pairs.add(pair) seen.add(num) return len(pairs)"},{"question":"Problem statement A local library is organizing a book exchange event where participants can exchange books among themselves. Each participant initially brings a certain number of books and can exchange them based on certain rules. Each participant can exchange a book if they bring the required number of books for that exchange, including books they acquired during the event. The event aims to maximize the number of exchanges each participant can complete. Write a program to determine the maximum number of exchanges each participant can make. Input The input is given in the following format: N b_0 b_1 b_2 ... b_(N-1) M e_0 e_1 e_2 ... e_(M-1) where - N is the number of participants. - b_i is the number of books each participant i initially brings. - M is the number of different exchange types. - e_j is the number of books required for exchange type j. Constraint - All inputs are integers - 1 ≤ N ≤ 300,000 - 1 ≤ M ≤ 300,000 - 0 ≤ b_i ≤ 1,000,000 - 0 ≤ e_j ≤ 10,000 Output Print the maximum number of exchanges each participant can make on line N. On the i-th line, output the number of exchanges participant i can make. Sample Sample input 1 6 1 2 3 4 5 6 3 1 2 3 Sample output 1 1 2 3 4 5 6 Explanation for sample output 1 * Participant 0: Can exchange 1 book. * Participant 1: Can exchange 2 books. * Participant 2: Can exchange 3 books. * Participant 3: Can exchange 4 books. * Participant 4: Can exchange 5 books. * Participant 5: Can exchange 6 books. Sample input 2 5 5 3 10 4 6 4 2 5 6 1 Sample output 2 5 3 10 4 6 Explanation for sample output 2 * Participant 0: Can perform exchanges with 2, 5, and 1, for a total of 5 books used. * Participant 1: Can perform exchanges with 2 and 1, for a total of 3 books used. * Participant 2: Can perform exchanges with 5, 2, 1, and 2, for a total of 10 books used. * Participant 3: Can perform exchanges with 1 and 2, for a total of 4 books used. * Participant 4: Can perform exchanges with 5 and 1, for a total of 6 books used. Example Input 5 5 3 10 4 6 4 2 5 6 1 Output 5 3 10 4 6","solution":"def max_exchanges(N, books, M, exchanges): Calculate the maximum number of exchanges each participant can make. Parameters: N (int): The number of participants. books (list of int): The number of books each participant initially brings. M (int): The number of different exchange types. exchanges (list of int): The number of books required for each exchange type. Returns: list of int: The maximum number of exchanges each participant can make. max_exchanges_per_participant = [0] * N # Sort the list of exchanges requirements exchanges.sort() for i in range(N): total_books = books[i] count_exchanges = 0 # Use a list to simulate dynamic changes in the number of books simulations_books = total_books for exh in exchanges: while simulations_books >= exh: simulations_books -= exh count_exchanges += 1 max_exchanges_per_participant[i] = count_exchanges return max_exchanges_per_participant"},{"question":"You are given a string s consisting of lowercase English letters. You need to partition the string into as few pieces as possible such that each letter appears in at most one piece, and then print the length of each partition. Input The first line contains a single integer n (1 <= n <= 1000) — the length of string s. The second line contains the string s of length n. Output Output the lengths of the partitions in a single line. If there are multiple solutions, you may print any of them. Examples Input 8 ababcbacadefegdehijhklij Output 9 7 8 Input 6 caedbdedda Output 1 9 Note In the first example, the first partition is \\"ababcbaca\\", the second partition is \\"defegde\\", and the third partition is \\"hijhklij\\". This is the optimal partitioning since letters within each partition do not repeat in other partitions and the total number of partitions is minimized. In the second example, the optimal partitioning is \\"c\\", \\"a\\", \\"edbdedda\\" since \\"d\\" appears multiple times and hence the longest possible partition conforming to the rules stretches till the end.","solution":"def partition_labels(s): Returns the lengths of the partitions. last_occurrence = {char: idx for idx, char in enumerate(s)} partitions = [] start, end = 0, 0 for idx, char in enumerate(s): end = max(end, last_occurrence[char]) if idx == end: partitions.append(end - start + 1) start = idx + 1 return partitions"},{"question":"You are given a grid with `n` rows and `m` columns, where each cell contains an integer representing the height of a block in a city. A structure is considered a \\"peak\\" if it is higher than any of its neighbors. Neighbor cells are those that share an edge (not diagonally). Your task is to write a program that finds the total number of \\"peaks\\" in the grid. Input The input consists of the first line containing two integers `n` and `m` (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. The next `n` lines contain `m` integers each, representing the heights of the blocks (0 ≤ height ≤ 100). Output Print a single integer — the number of \\"peaks\\" in the grid. Examples Input 3 3 1 2 1 2 3 2 1 2 1 Output 1 Input 2 2 1 5 4 2 Output 1 Note In the first example, the 3x3 grid is: ``` 1 2 1 2 3 2 1 2 1 ``` The only peak is at (1, 1) with a height of 3. In the second example, the 2x2 grid is: ``` 1 5 4 2 ``` The only peak is at (0, 1) with a height of 5.","solution":"def count_peaks(grid): Count the number of \\"peaks\\" in a grid where a peak is a cell that is higher than any of its neighbors. n = len(grid) m = len(grid[0]) peak_count = 0 def is_peak(i, j): current_height = grid[i][j] # Check top if i > 0 and grid[i-1][j] >= current_height: return False # Check bottom if i < n-1 and grid[i+1][j] >= current_height: return False # Check left if j > 0 and grid[i][j-1] >= current_height: return False # Check right if j < m-1 and grid[i][j+1] >= current_height: return False return True for i in range(n): for j in range(m): if is_peak(i, j): peak_count += 1 return peak_count"},{"question":"In this problem, you need to determine if a permutation of integers from 1 to n can form a sequence where the average of each prefix is an integer. A sequence a is called a permutation of length n if it consists of all integers from 1 to n in some order. For example, [3,1,2] is a permutation of length 3. You are asked to check whether there exists such a permutation where for every k (1 ≤ k ≤ n), the average of the first k elements is an integer. Input The input contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow. Each test case contains a single integer n (1 ≤ n ≤ 10^5) — the length of the permutation. Output For each test case, output \\"YES\\" if there exists such a permutation, otherwise output \\"NO\\". Example Input 5 1 2 3 4 5 Output YES YES NO YES NO Explanation: For n = 1, the permutation [1] has the average of prefix being [1], which is an integer. For n = 2, the permutation [1,2] and [2,1] both have averages of prefixes as integers. For example, in [1,2], the prefixes and their averages are: [1] -> 1, [1,2] -> 1.5. For n = 3, any permutation such as [1,2,3] cannot form integer averages for all prefixes. For n = 4, the permutation [1,2,3,4] has the averages of prefixes being [1, 1.5, 2, 2.5]. For n = 5, any permutation of length 5 will have a non-integer average for at least one of its prefixes.","solution":"def is_valid_permutation(n): Determines if a valid permutation with integer prefix averages exists for the given n. if n == 1 or n % 2 == 0: return \\"YES\\" else: return \\"NO\\" def solve(t, test_cases): Solves for each test case. t: number of test cases test_cases: list of integers representing each test case value for n results = [] for n in test_cases: results.append(is_valid_permutation(n)) return results"},{"question":"A company wishes to analyze the stock prices of its shares over several consecutive days to identify potential dips followed by surges. You are given an array representing the stock prices for N consecutive days. A \\"dip\\" is defined as a period during which the stock price consecutively decreases for a certain number of days, followed by a period of consecutive increase. Write a function to determine if there exists a dip in the given array of stock prices. The function should return `True` if at least one dip exists, otherwise return `False`. Constraints: - 3 leq N leq 1000 - 1 leq stock prices leq 1000 - All stock prices are integers. Input: The input consists of a single line containing N space-separated integers representing the stock prices on each day. Output: Output should be either `True` or `False`. Examples: Input: 7 8 5 3 4 9 10 Output: True Input: 1 2 3 4 5 6 Output: False Input: 4 4 4 3 3 3 2 1 2 3 4 Output: True Note: In the first example, there is a dip from day 2 to day 4 (8 -> 5 -> 3) followed by an increase from day 4 to day 6 (3 -> 4 -> 9). In the second example, there is no dip as the prices never decrease. In the third example, there is a dip from day 4 to day 8 (4 -> 3 -> 3 -> 2 -> 1) followed by an increase from day 8 to day 11 (1 -> 2 -> 3 -> 4).","solution":"def has_dip(prices): Determine if there exists a dip in the given list of stock prices. A dip is a period of consecutive decreases followed by a consecutive increase. Parameters: prices (list of int): list of stock prices on consecutive days Returns: bool: True if a dip exists, otherwise False n = len(prices) if n < 3: return False decreasing = False increasing = False for i in range(1, n): if prices[i] < prices[i-1]: if increasing: return True decreasing = True elif prices[i] > prices[i-1]: if decreasing: increasing = True return decreasing and increasing"},{"question":"Word Pattern Match You are given a pattern string and a sentence string. The pattern consists of lowercase alphabetic characters, and the sentence consists of words separated by single spaces. You need to determine if the sentence follows the same pattern. Here, a pattern \\"a\\" can match any word, but two occurrences of the same pattern character should match the same word. For Example: Given the pattern \\"abba\\" and the sentence \\"dog cat cat dog\\", the pattern matches because the same characters in the pattern map to the same words in the sentence. Your task is to develop a program that identifies if the pattern matches the given sentence. Input The first line consists of the input pattern string. The second line consists of the input sentence string, with words separated by single spaces. Output The output should be \\"True\\" if the sentence follows the pattern, otherwise \\"False\\". Examples Input: abba dog cat cat dog Output: True Input: abba dog cat cat fish Output: False","solution":"def word_pattern(pattern, sentence): words = sentence.split() if len(pattern) != len(words): return False char_to_word = {} word_to_char = {} for char, word in zip(pattern, words): if char in char_to_word and char_to_word[char] != word: return False if word in word_to_char and word_to_char[word] != char: return False char_to_word[char] = word word_to_char[word] = char return True"},{"question":"A magic square is a grid of numbers where the sum of every row, column, and both main diagonals are the same. This sum is known as the magic constant. A grid is considered a magic square if it meets these criteria. You are given a square grid of size n filled with numbers. Your task is to determine if the given grid is a magic square or not. To be a magic square, each number in the grid must be distinct and an integer between 1 and n^2 (inclusive). # Input - The first line contains an integer n (1 ≤ n ≤ 1000), indicating the size of the grid. - The next n lines each contain n integers, representing the numbers in the grid. # Output - Print \\"YES\\" if the grid is a magic square. - Print \\"NO\\" otherwise. # Example Input 1 ``` 3 2 7 6 9 5 1 4 3 8 ``` Output 1 ``` YES ``` Input 2 ``` 3 8 1 6 3 5 7 4 9 2 ``` Output 2 ``` YES ``` Input 3 ``` 3 8 1 6 3 5 7 4 9 3 ``` Output 3 ``` NO ``` # Explanation In the first example, the grid is a magic square as all rows, columns, and main diagonals sum to 15, and distinct integers from 1 to 9 are used. In the second example, the grid again is a magic square with the same properties. In the third example, the grid is not a magic square because the numbers are not distinct.","solution":"def is_magic_square(n, grid): Determines if a given n x n grid is a magic square. Args: n (int): Size of the grid. grid (list of list of int): The square grid of numbers. Returns: str: \\"YES\\" if the grid is a magic square, otherwise \\"NO\\". magic_constant = n * (n ** 2 + 1) // 2 # Check if all numbers are distinct and in the range [1, n^2] elements = set() for row in grid: for elem in row: if elem < 1 or elem > n ** 2 or elem in elements: return \\"NO\\" elements.add(elem) # Check rows for i in range(n): if sum(grid[i]) != magic_constant: return \\"NO\\" # Check columns for j in range(n): if sum(grid[i][j] for i in range(n)) != magic_constant: return \\"NO\\" # Check main diagonal if sum(grid[i][i] for i in range(n)) != magic_constant: return \\"NO\\" # Check secondary diagonal if sum(grid[i][n - 1 - i] for i in range(n)) != magic_constant: return \\"NO\\" return \\"YES\\" # Example usage: # n = 3 # grid = [ # [2, 7, 6], # [9, 5, 1], # [4, 3, 8] # ] # print(is_magic_square(n, grid)) # Output: YES"},{"question":"In a forest, there are N squirrels and M nuts scattered randomly. Squirrels love nuts, and each squirrel wants to collect at least one nut. However, squirrels are very particular and will not share nuts among themselves. You need to determine the minimum number of nuts that must be present in the forest so that every squirrel can be satisfied (i.e., each squirrel has at least one nut). Input The input contains two integers N and M, where N is the number of squirrels (1 ≤ N ≤ 10^9) and M is the number of nuts (0 ≤ M ≤ 10^9). Output Output one integer: the minimum number of nuts needed so that every squirrel can have at least one. If it is not possible to satisfy all squirrels, output -1. Examples Input 5 8 Output 5 Input 3 2 Output -1 Input 6 0 Output -1 Explanation - In the first example, there are 5 squirrels and 8 nuts. Each squirrel can get at least one nut, so the output is 5. - In the second example, there are 3 squirrels but only 2 nuts, so it\'s impossible for each squirrel to get a nut, hence the output is -1. - In the third example, there are 6 squirrels but no nuts, so it\'s impossible to satisfy the squirrels, hence the output is -1.","solution":"def minimum_nuts_needed(N, M): Determines the minimum number of nuts needed so that every squirrel can have at least one. Returns -1 if it\'s not possible to satisfy all squirrels. Parameters: N (int): Number of squirrels M (int): Number of nuts Returns: int: Minimum number of nuts needed or -1 if not possible if M < N: return -1 return N"},{"question":"A company is planning to optimize its network by updating the connection routes between its servers. The company\'s network is represented as an undirected graph with n servers and m connections. Each connection has a given weight (representing latency), and the goal is to find the most efficient way to connect all servers with the minimum possible total latency. Your task is to find the minimum spanning tree (MST) of the network. The MST is a subset of the connections that connects all the servers without any cycles and with the minimum total weight. Input The first line contains two integers n (2 ≤ n ≤ 10^5) and m (n - 1 ≤ m ≤ 2 * 10^5), the number of servers and the number of connections, respectively. Each of the next m lines contains three integers: ai, bi (1 ≤ ai, bi ≤ n, ai ≠ bi) and wi (1 ≤ wi ≤ 10^6), where ai and bi are the servers connected by the i-th connection, and wi is the weight of the connection. Output Print a single integer, the total weight of the minimum spanning tree. Examples Input 4 5 1 2 1 1 3 4 2 3 2 3 4 3 2 4 5 Output 6 Input 3 3 1 2 3 2 3 2 1 3 1 Output 3","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def minimum_spanning_tree(n, connections): Finds the weight of the minimum spanning tree using Kruskal\'s algorithm. :param n: Number of servers (vertices) :param connections: List of connections (edges) in the form (ai, bi, wi) :return: Total weight of the minimum spanning tree # Step 1: Sort all the edges based on their weight connections.sort(key=lambda x: x[2]) # Step 2: Initialize Union-Find structure uf = UnionFind(n) mst_weight = 0 mst_edges = 0 # Step 3: Iterate over the sorted edges for u, v, weight in connections: if uf.find(u - 1) != uf.find(v - 1): # Using 0-based indexing for Union-Find uf.union(u - 1, v - 1) mst_weight += weight mst_edges += 1 if mst_edges == n - 1: # MST will have exactly n-1 edges break return mst_weight"},{"question":"A group of friends are planning to celebrate New Year\'s Eve together, and they have decided to split into teams to participate in various games. Each friend either wants to be on the same team as another specific friend or wants to be on a different team from another specific friend. Help them determine if it is possible to assign them to teams in such a way that everyone\'s preference is satisfied. Input The first line contains two integers n and m (1 ≤ n ≤ 100000, 0 ≤ m ≤ 200000) — the number of friends and the number of constraints, respectively. Each of the next m lines describes a constraint in the format \\"a x b\\" (without the quotes), where a and b are integers (1 ≤ a, b ≤ n and a ≠ b), and x is either \\"=\\" or \\"≠\\". If x is \\"=\\", it means that friend a wants to be on the same team as friend b. If x is \\"≠\\", it means that friend a wants to be on a different team from friend b. Output Print \\"YES\\" if it is possible to divide friends into two teams satisfying all constraints. Print \\"NO\\" otherwise. Examples Input 3 3 1 = 2 2 ≠ 3 1 ≠ 3 Output YES Input 3 3 1 = 2 2 = 3 1 ≠ 3 Output NO Note In the first example, you can assign friend 1 and friend 2 to one team, and friend 3 to the other team. This way, all constraints are met: friend 1 is on the same team as friend 2, friend 2 is on a different team from friend 3, and friend 1 is on a different team from friend 3. In the second example, it is not possible to satisfy all constraints. Friend 1 and friend 3 cannot be on both the same and different teams simultaneously.","solution":"class DSU: Disjoint Set Union (Union-Find) data structure with path compression and union by rank. def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, x): if self.parent[x] != x: self.parent[x] = self.find(self.parent[x]) return self.parent[x] def union(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX != rootY: if self.rank[rootX] > self.rank[rootY]: self.parent[rootY] = rootX elif self.rank[rootX] < self.rank[rootY]: self.parent[rootX] = rootY else: self.parent[rootY] = rootX self.rank[rootX] += 1 def can_divide_friends(n, m, constraints): dsu = DSU(n) diseq_constraints = [] for constraint in constraints: a, x, b = constraint.split() a = int(a) - 1 b = int(b) - 1 if x == \\"=\\": dsu.union(a, b) else: diseq_constraints.append((a, b)) for a, b in diseq_constraints: if dsu.find(a) == dsu.find(b): return \\"NO\\" return \\"YES\\""},{"question":"Alex is organizing a coding competition and needs to generate random teams from a given list of participants. However, each team must consist of exactly 3 participants. Given the total number of participants, determine how many full teams can be formed, and how many participants will be left out, if any. Input Format The first line contains a single integer T, the number of test cases. Each of the following T lines contains an integer N representing the total number of participants. Output Format For each test case, print two integers separated by a space: the number of full teams that can be formed and the number of participants left out. Constraints 1 ≤ T ≤ 1000 0 ≤ N ≤ 10^6 SAMPLE INPUT 3 7 10 0 SAMPLE OUTPUT 2 1 3 1 0 0 Explanation Case 1: With 7 participants, 2 full teams of 3 members each can be formed, leaving 1 participant left out. Case 2: With 10 participants, 3 full teams can be formed, leaving 1 participant left out. Case 3: With 0 participants, no teams can be formed, and no participants are left out.","solution":"def get_teams_and_leftovers(T, participants_list): Given a list of participants, determine the number of full teams and leftovers for each test case. Each team consists of 3 participants. Parameters: T (int): The number of test cases. participants_list (list of int): The list containing the number of participants for each test case. Returns: list of tuples: Each tuple contains two integers: the number of full teams and the number of participants left out. result = [] for N in participants_list: full_teams = N // 3 leftovers = N % 3 result.append((full_teams, leftovers)) return result"},{"question":"Design a data structure that supports the following operations efficiently: * insert(x): Insert an integer `x` into the data structure. * remove(x): Remove one occurrence of integer `x` from the data structure. If `x` is not present, do nothing. * get_median(): Return the median of the current elements in the data structure. If the number of elements is even, return the smaller of the two middle elements. Maintain an efficient solution to handle the given operations. Note that the definition of median here requires that when the number of elements is even, the smaller of the two middle elements should be returned. Constraints * 1 leq q leq 200,000 * -10^9 leq x leq 10^9 Input The input is given in the following format: ``` q query_1 query_2 : query_q ``` Each query is given by one of the following strings: * `\\"insert x\\"` where `x` is the integer to be inserted. * `\\"remove x\\"` where `x` is the integer to be removed. * `\\"get_median\\"` to obtain the current median of the data structure. Output For each `get_median` operation, print the current median in a new line. Example Input ``` 6 insert 1 insert 5 get_median insert 2 get_median remove 1 get_median ``` Output ``` 1 1 2 ```","solution":"import bisect class MedianDataStructure: def __init__(self): self.data = [] def insert(self, x): bisect.insort(self.data, x) def remove(self, x): if x in self.data: self.data.remove(x) def get_median(self): n = len(self.data) if n == 0: return None if n % 2 == 1: return self.data[n // 2] else: return self.data[n // 2 - 1] # Example usage: # mds = MedianDataStructure() # mds.insert(1) # mds.insert(5) # print(mds.get_median()) # Should print 1 # mds.insert(2) # print(mds.get_median()) # Should print 1 # mds.remove(1) # print(mds.get_median()) # Should print 2"},{"question":"Ivan is planning to organize his bookshelf in his new apartment. The bookshelf has `n` shelves, each of which has a capacity to hold a certain number of books. Ivan has `m` books to place on the shelves, and each book has a unique height. Ivan wants to place all the books in such a way that no shelf capacity is exceeded and no book on an upper shelf is taller than any book directly below it. Your task is to help Ivan determine if it is possible to organize the books according to these rules. Input The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of shelves and the number of books. The second line contains `n` integers `c_1, c_2, ..., c_n` (1 ≤ c_i ≤ 1000), where `c_i` is the capacity of the i-th shelf (number of books it can hold). The third line contains `m` integers `h_1, h_2, ..., h_m` (1 ≤ h_i ≤ 1000), where `h_i` is the height of the i-th book. Output If it is possible to organize the books on the shelves according to the given rules, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 3 5 2 2 1 3 5 1 2 4 Output YES Input 2 4 1 2 5 6 7 1 Output NO","solution":"def can_organize_books(n, m, capacities, heights): capacities.sort(reverse=True) heights.sort() capacity_idx = 0 for height in heights: if capacity_idx >= n: return \\"NO\\" if capacities[capacity_idx] > 0: capacities[capacity_idx] -= 1 else: capacity_idx += 1 if capacity_idx >= n or capacities[capacity_idx] == 0: return \\"NO\\" capacities[capacity_idx] -= 1 return \\"YES\\""},{"question":"You are given a grid-based game with dimensions M x N. Each cell in the grid may contain an item represented by a non-negative integer value, or it may be empty, represented by the value 0. Your player can move through the grid starting from the top-left corner (0, 0) to the bottom-right corner (M-1, N-1), but may only move right or down at any step. Your goal is to find the maximum value of items the player can collect on a path from the start to the destination. Input - The first line contains two integers M and N, representing the dimensions of the grid (1 ≤ M, N ≤ 100). - Each of the next M lines contains N space-separated integers representing the grid cells. Output - Output a single integer, the maximum value of items the player can collect on a path from (0, 0) to (M-1, N-1). Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Input 2 2 1 0 2 3 Output 6 Note In the first example, the path that results in the maximum value collected is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), collecting items with values 1, 2, 3, 6, and 9 for a total of 1+2+3+6+9 = 21. In the second example, the optimal path is (0,0) -> (1,0) -> (1,1), collecting items with values 1, 2, and 3, for a total of 1+2+3 = 6.","solution":"def max_items_collection(M, N, grid): Given a grid of M x N, returns the maximum value of items collected on a path from (0, 0) to (M-1, N-1). The path can only go right or down at any step. # Create a 2D list to store the maximum value of items collected for each cell dp = [[0] * N for _ in range(M)] # Initialize the top-left cell with the value in the grid dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the result return dp[M-1][N-1]"},{"question":"A retail shop wants to optimize its inventory system by organizing its products efficiently. The shopkeeper has a list of products with their names and prices. To make the system better, he wants to sort the products primarily based on their price in increasing order. If two products have the same price, they should be sorted in lexicographical order by their names. Write a program to help the shopkeeper achieve this sorting. Input format: On the first line of the standard input, there is an integer N, denoting the number of products. N lines follow, each of which contains a string and a float, denoting the name of the product and its price. Output format: You must print the sorted list of products based on the given criteria. Constraints: 1 ≤ N ≤ 10^4 1 ≤ | Length of the product name | ≤ 100 0 ≤ Price ≤ 10^5 SAMPLE INPUT 4 Milk 1.50 Bread 2.20 Eggs 1.50 Butter 3.00 SAMPLE OUTPUT Eggs 1.50 Milk 1.50 Bread 2.20 Butter 3.00","solution":"def sort_products(products): Sorts the list of products by price in increasing order. If two products have the same price, they are sorted lexicographically by name. Args: products: List of tuples, where each tuple contains the product name and price. Returns: A list of tuples sorted by the mentioned criteria. # Sorting based on given criteria return sorted(products, key=lambda x: (x[1], x[0])) def parse_input(input_lines): Parses the input lines and converts it into a list of products. Args: input_lines: List of strings representing the input lines. Returns: A list of tuples, where each tuple contains the product name and price. # Extract the number of products num_products = int(input_lines[0]) products = [] for i in range(1, num_products + 1): parts = input_lines[i].rsplit(\' \', 1) name = parts[0] price = float(parts[1]) products.append((name, price)) return products def format_output(sorted_products): Formats the sorted products for output. Args: sorted_products: List of tuples, where each tuple contains the product name and price. Returns: A list of strings, each representing a product in the required format. return [f\\"{product[0]} {product[1]:.2f}\\" for product in sorted_products] # Complete sorting function that integrates parsing input and formatting output def inventory_sort(input_lines): products = parse_input(input_lines) sorted_products = sort_products(products) return format_output(sorted_products)"},{"question":"You are given an array of integers and a target integer. Your task is to write a program to find all unique pairs of integers in the array that sum up to the target value. Each pair of integers should be output in ascending order, and the set of all pairs should be displayed in lexicographical order. Input The program will receive an input in two lines: 1. The first line contains the integers in the array, separated by spaces. 2. The second line contains the target integer. Output The output should consist of each unique pair that sums to the target, written on a new line. Each pair should be displayed in ascending order, with the numbers separated by a space. If no such pairs exist, output \\"No pairs found\\". Example Input: 2 4 3 5 7 8 1 9 10 Output: 1 9 2 8 3 7","solution":"def find_pairs(arr, target): Returns a list of unique pairs of integers from the array that sum up to the target value. Each pair is sorted in ascending order, and the set of all pairs is displayed in lexicographical order. pairs = set() seen = set() for number in arr: complement = target - number if complement in seen: pair = tuple(sorted((number, complement))) pairs.add(pair) seen.add(number) if pairs: sorted_pairs = sorted(pairs) return sorted_pairs else: return \\"No pairs found\\""},{"question":"Write a function that reads an integer n and calculates the nth term of the Tribonacci sequence. The Tribonacci sequence is similar to the Fibonacci sequence, but instead of starting with two predetermined terms, the sequence starts with three predetermined terms and each term afterwards is the sum of the preceding three terms. The first three terms of the Tribonacci sequence are T_0 = 0, T_1= 1, and T_2 = 1. Your task is to implement a function `tribonacci(n)` that returns the nth term of the Tribonacci sequence. Input - A single integer n (0 ≤ n ≤ 35). Output - A single integer representing the nth term of the Tribonacci sequence. Example Input 0 Output 0 Input 4 Output 4","solution":"def tribonacci(n): Returns the nth term of the Tribonacci sequence. Parameters: n (int): The term index to find in the Tribonacci sequence. Returns: int: The nth term of the Tribonacci sequence. if n == 0: return 0 elif n == 1 or n == 2: return 1 t0, t1, t2 = 0, 1, 1 for _ in range(3, n + 1): t_next = t0 + t1 + t2 t0, t1, t2 = t1, t2, t_next return t2"},{"question":"You are given an integer n. Your task is to find any n pair of integers (ai, bi) such that: * Each pair (ai, bi) must satisfy: 1 ≤ ai < bi ≤ 10^9. * The sum of ai and bi for each pair (ai + bi) should be equal to 2 * (i + 1), where i is the 1-based index of the pair in the list. Input The input consists of a single integer n (1 ≤ n ≤ 1000). Output Output n pairs of integers. The i-th pair should be represented as (ai, bi), and each pair must satisfy the conditions described above. Example Input 3 Output (1, 3) (2, 4) (3, 5)","solution":"def generate_pairs(n): Generates n pairs of integers (a_i, b_i) such that: - 1 ≤ ai < bi ≤ 10^9 - ai + bi = 2 * (i + 1) where i is the 1-based index pairs = [] for i in range(1, n + 1): ai = i bi = 2 * (i + 1) - ai pairs.append((ai, bi)) return pairs"},{"question":"Alice is playing a game with colored beads. She starts with a string of n beads, each bead being either red (R) or blue (B). She can perform the following operation as many times as she likes: - Select any two adjacent beads, and if they are different colors, remove both of them from the string. Alice wants to find the length of the shortest string she can achieve by performing this operation. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the length of the string. The second line contains a string s of length n consisting of characters \'R\' and \'B\'. Output Output a single integer, the length of the shortest string Alice can achieve. Examples Input 4 RBRB Output 0 Input 5 RRBRB Output 1 Note In the first example, Alice can repeatedly remove pairs of adjacent \'R\' and \'B\' to achieve an empty string. In the second example, Alice can remove the first \'R\' and \'B\', then remove the next \'R\' and \'B\', leaving a single \'R\' at the end.","solution":"def shortest_bead_string(n, s): Returns the length of the shortest string Alice can achieve by removing pairs of adjacent beads that are of different colors. stack = [] for bead in s: if stack and stack[-1] != bead: stack.pop() else: stack.append(bead) return len(stack)"},{"question":"In a city park, a jogging track is marked with several stations. Each station is represented by a number from 1 to N. Runners often create different paths from one station to another to maximize their workout. However, each runner follows a unique rule: they can only jog from station i to station j if the greatest common divisor (GCD) of i and j is greater than 1 and j > i. Your task is to determine the length of the longest possible path a runner can create following these rules. The length of a path is defined as the number of stations visited. Input: - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of stations. Output: - For each test case, output a single line containing an integer representing the length of the longest possible path for the given number of stations. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 10^5 Example: Input: 2 4 6 Output: 2 3 Explanation: For the first test case with N = 4, one of the longest paths is: 1 -> 2 -> 4. The path length is 2. For the second test case with N = 6, one of the longest paths is: 1 -> 2 -> 4 -> 6. The path length is 3.","solution":"def longest_path_length(N): Returns the length of the longest possible path a runner can create from station 1 to station N. # The longest path for a given N will be from 1 to the highest even number <= N return N // 2 def process_test_cases(T, test_cases): results = [] for case in test_cases: results.append(longest_path_length(case)) return results"},{"question":"Alice loves numbers and symmetry in numbers. She frequently creates numeric palindromes by mirroring the numbers. A numeric palindrome looks the same when read forwards or backwards, such as 121 or 12321. Alice wants to know if a number can be rearranged to form a numeric palindrome. Given a number, determine if it\'s possible to rearrange its digits to create a palindrome. Input: First line contains T, the number of test cases. The next T lines contain one number per line. Output: For each test case, print \\"YES\\" if it\'s possible to rearrange the digits to form a palindrome. Otherwise, print \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ Number of digits in each number ≤ 10^5 Example: Input: 3 12321 123 112233 Output: YES NO YES","solution":"def can_form_palindrome(number): Returns \\"YES\\" if the given number\'s digits can be rearranged to form a palindrome, \\"NO\\" otherwise. from collections import Counter # Count the frequency of each digit in the number digit_count = Counter(number) # Check how many digits have an odd count odd_count = sum(1 for count in digit_count.values() if count % 2 != 0) # A number can be arranged as a palindrome if it has at most one digit with an odd count if odd_count > 1: return \\"NO\\" else: return \\"YES\\" def process_input(T, numbers): results = [] for number in numbers: results.append(can_form_palindrome(number)) return results"},{"question":"You are given an array of integers. You need to find the sum of all the even numbers in the array. Input Format The first line of input contains an integer N, which is the size of the array (1 ≤ N ≤ 100). The second line contains N space-separated integers representing the elements of the array. Output Format Print the sum of all the even numbers in the array on a single line. If there are no even numbers, print 0. Constraints -10^3 ≤ array elements ≤ 10^3 SAMPLE INPUT 5 1 2 3 4 5 SAMPLE OUTPUT 6","solution":"def sum_of_even_numbers(arr): Returns the sum of all the even numbers in the given array. Parameters: arr (list of int): The input array of integers. Returns: int: The sum of all even numbers in the array. return sum(x for x in arr if x % 2 == 0)"},{"question":"As a software engineer, you are tasked with developing an inventory management system for a small retail store. One of the requirements is to identify products that have maintained an \\"equal quantity\\" for both the current month and the previous month. Input You\'ll be given two sets of data (separated by a blank line) representing the inventory counts for products in the store. Each set consists of lines with product IDs and their corresponding quantities. Each line has the following format: pi, qi pi (1 ≤ pi ≤ 1,000) is an integer representing the product ID, and qi (1 ≤ qi ≤ 100) is an integer representing the quantity of the product. Output Output the product IDs of items that have the same quantity in both months, one per line, sorted in ascending order. Example Input 101, 20 102, 35 103, 50 101, 20 104, 60 103, 50 Output 101 103 Each product ID and quantity pair is unique within a month. Ensure your program efficiently processes this input and produces the correct output.","solution":"def get_equal_quantity_products(current_month, previous_month): Returns the product IDs of items that have the same quantity in both months, sorted in ascending order. current_month_dict = {} previous_month_dict = {} for item in current_month.strip().split(\'n\'): pid, qty = map(int, item.split(\', \')) current_month_dict[pid] = qty for item in previous_month.strip().split(\'n\'): pid, qty = map(int, item.split(\', \')) previous_month_dict[pid] = qty result = [] for key in current_month_dict: if key in previous_month_dict and current_month_dict[key] == previous_month_dict[key]: result.append(key) return sorted(result)"},{"question":"There are M trees in a forest numbered from 1 through M, arranged in a row. Each tree i (1 ≤ i ≤ M) is initially free from fire and is characterized by an integer F_i, which represents its fire resistance power. At time t=0, a fire starts at tree S and can spread to its neighboring trees. The strength of the fire decreases linearly by one unit per every tree it travels. For instance, if the fire spreads from tree i to tree i+1, the strength at tree i+1 becomes (initial strength - 1). If the fire strength at any tree is greater than or equal to its fire resistance power, that tree will catch fire and potentially propagate the fire. Determine the maximum number of trees that can catch fire, given the initial fire strength. Constraints * 1 ≤ M ≤ 200000 * 1 ≤ F_i ≤ 10^9 (1 ≤ i ≤ M) * 1 ≤ S ≤ M * 1 ≤ initial strength ≤ 10^9 * All F_i are integers Input The input is given from Standard Input in the following format: M initial_strength S F_1 F_2 ... F_M Output Print the maximum number of trees that can catch fire. Examples Input 5 6 3 4 7 5 2 3 Output 3 Input 4 8 1 5 6 10 3 Output 2","solution":"def max_trees_catch_fire(M, initial_strength, S, F): Returns the maximum number of trees that can catch fire given the initial conditions. # Adjust index to be 0 based S = S - 1 # Strength of fire left_strength = initial_strength right_strength = initial_strength # Initialize count of trees that catch fire count = 0 # Spread fire to the left for i in range(S, -1, -1): if left_strength >= F[i]: count += 1 left_strength -= 1 else: break # Spread fire to the right for i in range(S + 1, M): if right_strength - 1 >= F[i]: count += 1 right_strength -= 1 else: break return count"},{"question":"David is organizing a relay race event at his school, and he has a list of students who will participate. Each student has a unique id and a certain speed value. The event will be conducted in rounds, and each round contains a certain number of students running a specific distance. David wants to determine the rank of each student based on the order of their speeds in every round. # Input - The first line contains three integers n, r, and q (1 ≤ n ≤ 10^5, 1 ≤ r, q ≤ 10^5), where n is the total number of students, r is the number of rounds in the race, and q is the number of student speed queries after the race. - The second line contains n unique integers s1, s2, ..., sn (1 ≤ si ≤ 10^9) representing the speed values of each student. - The following r lines describe the participants of each round. Each of these lines starts with an integer k (2 ≤ k ≤ n), followed by k unique integers denoting the ids of the students participating in that round. - The next q lines contain one integer each, representing the id of a student David wants to know the rank of. # Output For each of the q queries, print the rank of the student based on their speed in the respective round. The rank is determined by sorting the participants\' speeds in descending order (fastest speed gets the rank 1). If a student participates in multiple rounds, consider only their best rank across all rounds. # Examples Input ``` 5 3 3 10 5 8 7 3 3 1 2 3 2 3 5 4 1 4 3 5 1 2 3 ``` Output ``` 1 5 1 ``` Explanation - The rounds and ranks are as follows: - First round (ids 1, 2, 3 with speeds 10, 5, 8): ranks are 1 (id 1), 3 (id 2), 2 (id 3). - Second round (ids 3, 5 with speeds 8, 3): ranks are 1 (id 3), 2 (id 5). - Third round (ids 1, 4, 3, 5 with speeds 10, 7, 8, 3): ranks are 1 (id 1), 2 (id 3), 3 (id 4), 4 (id 5). - Therefore, the best ranks are: - id 1: 1 (from 1st round and 3rd round) - id 2: 3 (from 1st round) - id 3: 1 (from 2nd round and 3rd round)","solution":"def relay_race_ranking(n, r, q, speeds, rounds, queries): import collections # Dictionary to store the best rank for each student best_ranks = collections.defaultdict(lambda: float(\'inf\')) # Process each round for round_info in rounds: participants = round_info[1:] participants_speeds = sorted([(speeds[id-1], id) for id in participants], reverse=True) # Assign ranks within this round for rank, (_, id) in enumerate(participants_speeds, 1): best_ranks[id] = min(best_ranks[id], rank) # Extract results for queries result = [] for query in queries: result.append(best_ranks[query]) return result"},{"question":"A communications company has a network of cities connected by fiber optic cables. The company wants to know the minimum total length of cable required to connect all cities such that every city is reachable from any other city. Each city is represented as a node, and each cable is represented as an edge with a given length. To simplify the problem, assume all cables are bi-directional. You need to implement a function that finds the minimum spanning tree (MST) of this network. Input The first line contains an integer n (2 ≤ n ≤ 1000), the number of cities, and an integer m (n-1 ≤ m ≤ 10000), the number of cables. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n; u ≠ v; 1 ≤ w ≤ 1000) representing a cable of length w connecting city u and city v. Output Print a single integer representing the total length of the cables in the MST. Example Input 4 5 1 2 1 1 3 4 2 3 2 3 4 3 2 4 5 Output 6 Explanation The minimum spanning tree can be formed by selecting the cables with lengths 1, 2, and 3, which connect all cities with a total length of 6.","solution":"def find_minimum_spanning_tree(n, m, edges): # Using Kruskal\'s algorithm for finding MST edges.sort(key=lambda x: x[2]) parent = list(range(n)) def find(u): if parent[u] != u: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: parent[root_u] = root_v mst_length = 0 num_edges = 0 for u, v, w in edges: if find(u-1) != find(v-1): union(u-1, v-1) mst_length += w num_edges += 1 if num_edges == n - 1: break return mst_length"},{"question":"You are tasked with hosting a television show race where n contestants compete in a series of k rounds. Each contestant has a specific speed in each round, and their performance can change from round to round. Your job is to determine the order of contestants based on their total performance over all rounds. Formally: - You have n contestants and k rounds. - Each contestant i has k speeds, where speed[i][j] represents the speed of contestant i in round j. Your goal is to sort the contestants in descending order based on their total speed over all rounds. If two contestants have the same total speed, they should be sorted based on their contestant number in ascending order. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of independent test cases. The first line of each test case contains two integers n (1 ≤ n ≤ 500) and k (1 ≤ k ≤ 500) — the number of contestants and the number of rounds. The next n lines contain k integers each, representing the speeds of each contestant in each round. Output For each test case, print n integers — the order of contestants sorted by their total performance over all rounds. If two contestants have the same total speed, sort them by their contestant number. Example Input 2 3 2 5 3 7 4 6 3 2 3 4 2 6 1 3 4 Output 2 1 3 2 1 Note In the first test case: - Contestant 1 has a total speed of 5 + 3 = 8 - Contestant 2 has a total speed of 7 + 4 = 11 - Contestant 3 has a total speed of 6 + 3 = 9 In descending order based on total speed, the order is 2, 3, 1. In the second test case: - Contestant 1 has a total speed of 4 + 2 + 6 = 12 - Contestant 2 has a total speed of 1 + 3 + 4 = 8 In descending order based on total speed, the order is 1, 2.","solution":"def sort_contestants(test_cases): result = [] for case in test_cases: n, k, speeds = case total_speeds = [(sum(speeds[i]), i + 1) for i in range(n)] total_speeds.sort(key=lambda x: (-x[0], x[1])) result.append([idx for _, idx in total_speeds]) return result def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n, k = map(int, lines[index].split()) speeds = [] for i in range(n): speeds.append(list(map(int, lines[index + 1 + i].split()))) test_cases.append((n, k, speeds)) index += n + 1 return test_cases def format_output(output_list): return \'n\'.join(\' \'.join(map(str, result)) for result in output_list)"},{"question":"You are monitoring a temperature sensor that sends a reading every minute. The sensor readings are integers that represent temperature in degrees Celsius. You want to find out the maximum range of temperatures recorded over any k consecutive minutes. Your task is to implement a function that, given a list of temperatures and an integer k, returns an integer that is the maximum temperature range over any k consecutive readings in the list. The temperature range is defined as the difference between the maximum and minimum temperature in the specified interval. Input The first line contains a single integer n (1 ≤ n ≤ 105), the number of temperature readings. The second line contains a single integer k (1 ≤ k ≤ n), the size of the interval to consider. The third line contains n integers, where the i-th integer represents the temperature reading at the i-th minute (−109 ≤ temperature[i] ≤ 109). Output Output a single integer, the maximum temperature range recorded over any k consecutive minutes. Example Input 7 3 1 3 -2 6 4 1 8 Output 8 Explanation The maximum range over any 3 consecutive minutes is recorded between minutes 3 to 5, where the temperatures are -2, 6, and 4. The range is 6 - (-2) = 8.","solution":"def max_temperature_range(temperatures, k): Returns the maximum temperature range over any k consecutive readings. :param temperatures: List of recorded temperatures. :param k: Size of the interval to consider. :return: Maximum temperature range over any k consecutive minutes. n = len(temperatures) max_range = float(\'-inf\') for i in range(n - k + 1): current_range = max(temperatures[i:i + k]) - min(temperatures[i:i + k]) if current_range > max_range: max_range = current_range return max_range"},{"question":"You are given a number k and a sequence of n integers. Determine the maximum sum of a subsequence such that no element in the subsequence is greater than k. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^9) — the number of elements in the sequence and the maximum allowed value for elements in the subsequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. Output Print a single integer — the maximum sum of a subsequence such that no element in the subsequence is greater than k. Example Input 5 7 3 7 2 9 5 Output 17 Note For the given input, the subsequence [3, 7, 2, 5] has the maximum sum of 17. The element 9 is excluded as it is greater than k.","solution":"def max_subsequence_sum(n, k, sequence): Returns the maximum sum of a subsequence such that no element in the subsequence is greater than k. Parameters: n (int): The number of elements in the sequence. k (int): The maximum allowed value for elements in the subsequence. sequence (list of int): The elements of the sequence. Returns: int: The maximum sum of the valid subsequence. return sum(x for x in sequence if x <= k)"},{"question":"A school organizes a coding competition, where each student is scored based on their performance. Each student’s score is a distinct positive integer. The teacher has a list of K observations concerning the students’ scores. The i-th observation notes that the S_i-th lowest score is T_i. Based on these observations, determine the minimum possible number of students in the competition. # Constraints - 1 ≤ K ≤ 10^5 - 1 ≤ S_i ≤ 10^9 (1 ≤ i ≤ K) - 1 ≤ T_i ≤ 10^9 (1 ≤ i ≤ K) - If i ≠ j, S_i ≠ S_j. - There exists a valid outcome that is consistent with the observations. - All input values are integers. # Input Input is provided from Standard Input in the following format: ``` K S_1 T_1 . . S_K T_K ``` # Output Print the minimum possible number of students in the competition. # Examples Example 1 **Input:** ``` 3 2 5 1 8 3 2 ``` **Output:** ``` 3 ``` Example 2 **Input:** ``` 4 1 4 3 6 2 5 7 1 ``` **Output:** ``` 7 ``` Example 3 **Input:** ``` 2 1000000000 1 1 1000000000 ``` **Output:** ``` 1000000000 ```","solution":"def minimum_students(k, observations): Determines the minimum number of students in the competition based on the observations. Parameters: k (int): Number of observations. observations (list of tuples): A list containing K tuples, each tuple contains (S_i, T_i) representing the S_i-th lowest score is T_i. Returns: int: The minimum number of students in the competition. max_index = 0 for s, t in observations: max_index = max(max_index, s) return max_index def parse_input(input_str): lines = input_str.strip().split(\'n\') k = int(lines[0]) observations = [ tuple(map(int, line.split())) for line in lines[1:] ] return k, observations"},{"question":"You are given a series of street numbers each identified by a unique integer. The street numbers need to be sorted in a specific way for an upcoming event. The sorting order should be as follows: all odd numbers in ascending order followed by all even numbers in descending order. INPUT The first line contains the number of test cases T. For each test case, the first line contains an integer N, the number of street numbers. The second line contains N integers representing the street numbers. OUTPUT For each test case, output a single line containing the street numbers sorted in the specified order. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ Street number ≤ 10000 SAMPLE INPUT 2 5 3 8 5 12 9 6 7 6 3 4 2 1 SAMPLE OUTPUT 3 5 9 12 8 1 3 7 6 4 2 Explanation For the first test case, the odd numbers are [3, 5, 9] and the even numbers are [8, 12]. Sorting the odd numbers in ascending order gives [3, 5, 9], and sorting the even numbers in descending order gives [12, 8]. Combining both results in [3, 5, 9, 12, 8].","solution":"def sort_street_numbers(test_cases): results = [] for case in test_cases: N, numbers = case odd_numbers = sorted([num for num in numbers if num % 2 != 0]) even_numbers = sorted([num for num in numbers if num % 2 == 0], reverse=True) results.append(odd_numbers + even_numbers) return results"},{"question":"You are given an array of length N consisting of only positive integers. Each element in this array represents the weight of a corresponding item. You need to divide this array into two non-empty subarrays S1 and S2 such that the absolute difference between the sums of the weights of the items in S1 and S2 is minimized. Write a program to find the minimum possible absolute difference. Constraints * 2 ≦ N ≦ 10^5 * 1 ≦ weight_i ≦ 10^4 * All input values are integers. Input The input is given from Standard Input in the following format: N weight_1 weight_2 ... weight_N Output Print the minimum possible absolute difference. Examples Input 5 4 1 2 3 6 Output 0 Input 3 10 20 15 Output 5","solution":"def minimum_difference(weights): Returns the minimal possible absolute difference between the sums of two subarrays. total_sum = sum(weights) n = len(weights) # Initialize a DP array to keep track of possible sums dp = [False] * (total_sum // 2 + 1) dp[0] = True # Populate the DP array for weight in weights: for j in range(total_sum // 2, weight - 1, -1): dp[j] = dp[j] or dp[j - weight] # Find the largest possible value in dp array for j in range(total_sum // 2, -1, -1): if dp[j]: sum1 = j break sum2 = total_sum - sum1 return abs(sum2 - sum1)"},{"question":"You are given a grid of size n x m, where each cell contains an integer representing the height of terrain at that point. Your task is to determine the minimum effort path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). The effort of a path is defined as the maximum absolute difference in heights between two consecutive cells in the path. You can move up, down, left, or right. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100). Each of the next n lines contains m integers representing the heights of the cells (0 ≤ height ≤ 1000). Output Output a single integer representing the minimum effort required to travel from the top-left to the bottom-right corner. Examples Input 3 3 1 2 2 3 8 2 5 3 5 Output 2 Input 2 2 1 2 2 1 Output 1 Note In the first example, the minimum effort path is (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2), with heights [1, 3, 8, 3, 5], and the maximum difference in this path is 2. In the second example, the path (0,0) -> (0,1) -> (1,1) has heights [1, 2, 1], and the maximum difference is 1.","solution":"from heapq import heappush, heappop def minimum_effort_path(heights): n, m = len(heights), len(heights[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Function to check if you can traverse the grid with a given max effort def can_traverse(max_effort): visited = [[False for _ in range(m)] for _ in range(n)] heap = [(0, 0, 0)] # (effort, x, y) while heap: effort, x, y = heappop(heap) if x == n-1 and y == m-1: return True if visited[x][y]: continue visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: next_effort = max(effort, abs(heights[nx][ny] - heights[x][y])) if next_effort <= max_effort: heappush(heap, (next_effort, nx, ny)) return False # Binary search over the possible maximum efforts low, high = 0, 1000 while low < high: mid = (low + high) // 2 if can_traverse(mid): high = mid else: low = mid + 1 return low # Example usage: heights = [ [1, 2, 2], [3, 8, 2], [5, 3, 5] ] print(minimum_effort_path(heights)) # Output: 2"},{"question":"You are the organizer of a coding competition, and you\'ve decided to introduce a new challenge that involves sorting and reversing segments of arrays. The objective of the problem is to assess participants\' ability to manipulate array segments efficiently. Given an array of distinct integers, you can perform a series of operations to maximize the sum of a subsequence. Each operation involves reversing a segment of the array. The task is to determine the maximum possible sum of a subsequence for the initial array and after each operation. A subsequence of an array is a sequence that can be derived by deleting some or no elements without changing the order of the remaining elements. The sum of a subsequence is the sum of its elements. Input - The first line contains an integer t (1 ≤ t ≤ 1000) denoting the number of test cases. The description of the test cases follows. - The first line of each test case contains two integers n and q (1 ≤ n ≤ 100000, 0 ≤ q ≤ 100000) denoting the number of elements in the array and the number of operations respectively. - The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) denoting the elements of the array. - Each of the next q lines contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n) denoting the start and end indices (1-based) of the segment that will be reversed in the i-th operation. It is guaranteed that the sum of n and the sum of q over all test cases does not exceed 1000000. Output For each test case, output q + 1 integers. Each integer should be the maximum sum of a subsequence of the array before any operations and after each of the q operations. Example # Input 2 5 1 3 7 2 5 1 2 4 4 3 1 3 5 4 1 2 1 4 2 3 # Output 17 18 10 10 12 12 # Explanation In the first test case, the initial array is [3, 7, 2, 5, 1]. The maximum sum of any subsequence is 17 (by taking all the elements). After the first operation (reversing the segment [7, 2, 5]), the array becomes [3, 5, 2, 7, 1], and the maximum sum is 18 (again taking all the elements). In the second test case, the initial array is [1, 3, 5, 4]. The maximum sum of any subsequence is 10. After the first operation (reversing the segment [1, 3]), the array becomes [3, 1, 5, 4], and the maximum sum remains 10. After the second operation (reversing the segment [1, 5, 4, 3]), the array becomes [4, 5, 3, 1], and the maximum sum is now 12. After the third operation (reversing the segment [5, 3]), the array becomes [4, 3, 5, 1], and the maximum sum remains 12.","solution":"def max_subsequence_sum(a): Returns the maximum sum of any subsequence of the array. return sum(x for x in a if x > 0) def process_operations(n, q, array, operations): results = [] results.append(max_subsequence_sum(array)) for l, r in operations: # Convert to zero-based index l -= 1 r -= 1 # Reverse the segment array[l:r+1] = reversed(array[l:r+1]) # Calculate the maximum possible sum of a subsequence results.append(max_subsequence_sum(array)) return results def solve(t, test_cases): results = [] for i in range(t): n, q = test_cases[i][0] array = test_cases[i][1] operations = test_cases[i][2] result = process_operations(n, q, array, operations) results.append(result) return results # Example usage # Input t = 2 test_cases = [ ((5, 1), [3, 7, 2, 5, 1], [(2, 4)]), ((4, 3), [1, 3, 5, 4], [(1, 2), (1, 4), (2, 3)]) ] # Output results = solve(t, test_cases) for result in results: print(\\" \\".join(map(str, result)))"},{"question":"A company hosts an annual sports event, and this year they want to organize the participants into multiple equal-sized basketball teams. To do so, they need to determine the number of teams they can form and whether there will be any leftover players who cannot be assigned to a team. Your task is to help the company by writing a program that calculates the maximum number of teams and the number of leftover players. The input consists of two integers: n and k. Here, n is the total number of participants, and k is the number of players required for each team. Your program should print the maximum number of teams that can be formed and the number of leftover players. Input The first and only line contains two integers n and k (1 ≤ k ≤ n ≤ 109). Output Print two integers — the maximum number of teams that can be formed and the number of leftover players. Examples Input 10 3 Output 3 1 Input 15 5 Output 3 0 Input 7 4 Output 1 3","solution":"def calculate_teams_and_leftover(n, k): Returns the maximum number of teams that can be formed and the number of leftover players. :param n: int, total number of participants :param k: int, number of players required for each team :return: tuple of two integers (max_teams, leftover) max_teams = n // k leftover = n % k return max_teams, leftover"},{"question":"You are given a rectangular grid with m rows and n columns. Each cell of the grid is initially empty. You have two types of operations: 1. Add a rectangle of space to the grid. 2. Query if a specific point in the grid is inside any added rectangle. To add a rectangle, you will be given the coordinates of the top-left and bottom-right corners of the rectangle (inclusive). To query a point, you will be given the coordinates of the point, and you need to determine if this point lies within any previously added rectangle. Input The first line of the input contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns of the grid. The second line contains a single integer q (1 ≤ q ≤ 100000) — the number of operations. The following q lines describe the operations. Each operation is formatted as follows: - If it\'s an \\"add\\" operation, the line contains the string \\"add\\" followed by four integers x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ m, 1 ≤ y1 ≤ y2 ≤ n), where (x1, y1) are the coordinates of the top-left corner and (x2, y2) are the coordinates of the bottom-right corner of the rectangle. - If it\'s a \\"query\\" operation, the line contains the string \\"query\\" followed by two integers x, y (1 ≤ x ≤ m, 1 ≤ y ≤ n) — the coordinates of the point to be checked. Output For each \\"query\\" operation, output \\"yes\\" if the point lies within any rectangle added to the grid; otherwise, output \\"no\\". Examples Input 5 5 5 add 1 1 3 3 query 2 2 add 4 4 5 5 query 3 4 query 4 4 Output yes no yes Input 10 10 4 add 1 1 5 5 query 6 6 add 6 6 10 10 query 7 7 Output no yes Note: In each \\"add\\" operation, you can consider that you are drawing a filled rectangle on the grid and in each \\"query\\" operation, you are checking the presence of a point inside any of these rectangles. Remember that if a point is on the edge of the rectangle, it\'s still considered inside.","solution":"def process_operations(m, n, q, operations): grid = [[False] * n for _ in range(m)] results = [] for operation in operations: op_data = operation.split() if op_data[0] == \\"add\\": x1, y1, x2, y2 = map(int, op_data[1:]) for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): grid[i][j] = True elif op_data[0] == \\"query\\": x, y = map(int, op_data[1:]) if grid[x - 1][y - 1]: results.append(\\"yes\\") else: results.append(\\"no\\") return results"},{"question":"In a grid of size m x n, you can move from one cell to another if they are adjacent cells. Find the maximum number of adjacent cells you can visit in the grid by starting from any cell and moving to adjacent cells without revisiting any cell. Cells in the grid are represented by the (row, column) coordinates. An adjacent cell is one step to the top, bottom, left, or right of the current cell, within the bounds of the grid. Write a program that, given the dimensions of the grid m and n, computes the maximum number of cells you can visit starting from any cell in the grid. Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000), separated by a single space. Output A single integer representing the maximum number of adjacent cells you can visit. Examples Input 3 3 Output 9 Input 2 2 Output 4 Input 1 5 Output 5","solution":"def max_adjacent_cells(m, n): Given the dimensions of the grid m x n, return the maximum number of cells you can visit starting from any cell in the grid and moving to adjacent cells without revisiting any cell. # Since we can start from any cell and traverse the entire grid, the maximum number of cells # we can visit is simply the total number of cells in the grid, which is m * n. return m * n"},{"question":"In a kingdom, there are N islands connected by M bridges, where each bridge has a magical property of changing the traveler\'s size by certain factor. You are the royal messenger, and you have to deliver important messages to all islands quickly without changing your size if possible. Each bridge has a specific factor by which it increases or decreases the traveler\'s size (either a positive multiplier greater than 1 or a negative fraction less than 1). Each island has one important notice point where the message has to be marked delivered. You are initially at island 1 with a size of 1.0. Your task is to find out the minimum number of bridges you need to cross to deliver the messages to all islands while keeping your size the same. If it\'s not possible to deliver messages with the same size on all islands, return -1. Input The input is given in the following format: N M a1 b1 f1 a2 b2 f2 :: aM bM fM The first line gives the number of islands N (2 ≤ N ≤ 1000) and the number of bridges M (1 ≤ M ≤ 5000). The islands are numbered from 1 to N, the initial island is island 1. Each of the following M lines contains the information for a bridge: starting island ai (1 ≤ ai < N), ending island bi (1 < bi ≤ N), and the magical factor fi (0 < fi ≤ 10), which denotes the change factor of the traveler\'s size when taking this bridge from island ai to island bi. Output Output the minimum number of bridges you need to cross to deliver the messages without changing your size. If it is not possible, output -1. Examples Input 5 6 1 2 1.1 2 3 0.9 1 3 1.0 3 4 1.0 4 5 1.0 3 5 0.5 Output 3 Input 4 4 1 2 2.0 2 3 0.5 3 4 1.0 1 4 2.0 Output -1 Input 3 3 1 2 1.0 2 3 1.0 1 3 2.0 Output 2","solution":"from collections import deque, defaultdict def min_bridges_without_size_change(N, M, bridges): Returns the minimum number of bridges to cross without changing size. If it\'s not possible, returns -1. adj_list = defaultdict(list) # Build adjacency list for a, b, f in bridges: if f == 1.0: adj_list[a].append(b) adj_list[b].append(a) # BFS to find shortest path from 1 to all other nodes queue = deque([(1, 0)]) visited = [False] * (N + 1) visited[1] = True while queue: current, steps = queue.popleft() if current == N: return steps for neighbor in adj_list[current]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, steps + 1)) # Check if all nodes are visited for i in range(1, N + 1): if not visited[i]: return -1 return steps # Example usage # if __name__ == \\"__main__\\": # N = 5 # M = 6 # bridges = [ # (1, 2, 1.1), # (2, 3, 0.9), # (1, 3, 1.0), # (3, 4, 1.0), # (4, 5, 1.0), # (3, 5, 0.5) # ] # print(min_bridges_without_size_change(N, M, bridges)) # Output: 3"},{"question":"Alice and Bob are playing a game with a string consisting of lowercase English letters. The game is as follows: each player, on their turn, selects a character from the string and removes all occurrences of that character from the string. The game continues until no characters are left in the string. Alice goes first. The player who cannot make a move loses. Your task is to determine the winner of the game if both players play optimally. Input The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains a string consisting of n lowercase English letters. Output If Alice wins, print \\"Alice\\". If Bob wins, print \\"Bob\\". Examples Input 6 aaabbb Output Bob Input 7 abcdefg Output Alice Note In the first example, Alice removes all \'a\'s and Bob removes all \'b\'s. Now the string is empty, and Alice cannot make a move, so Bob wins. In the second example, Alice can remove any character from the string, and Bob can only remove the next character. Alice will always have the last move with optimal play.","solution":"def game_winner(n, s): Determines the winner of the game if both players play optimally. Parameters: n (int): The length of the string. s (str): The string consisting of lowercase English letters. Returns: str: \'Alice\' if Alice wins, \'Bob\' if Bob wins. from collections import Counter char_counts = Counter(s) distinct_char_count = len(char_counts) # If the number of distinct characters is odd, Alice wins # If even, Bob wins if distinct_char_count % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"You are given a city represented by an n x n grid, where each cell represents a building or an empty space. A person can walk from one cell to its adjacent cell (up, down, left, or right) but cannot move diagonally. It takes one minute to move between adjacent cells. Some cells are impassable because they are either buildings or obstacles. You need to find the shortest path from a starting point (x1, y1) to a destination (x2, y2) on the grid. If the destination is unreachable, return -1. Input The first line contains three integers n, x1, y1, x2, y2 (1 ≤ n ≤ 1000, 1 ≤ x1, y1, x2, y2 ≤ n) — the size of the grid and the coordinates of the starting and destination points, respectively. The next n lines contain n characters each, forming the city grid. Each character is either \'.\' representing an empty cell or \'#\' representing a building or obstacle. The coordinates are 1-based indices. Output Print a single integer — the minimum number of minutes required to reach the destination or -1 if it is impossible. Example Input 5 1 1 5 5 ..#.. .#.#. .#... ... ..... Output 8 Explanation In the example, the path from (1, 1) to (5, 5) is: (1, 1) -> (2, 1) -> (3, 1) -> (4, 1) -> (5, 1) -> (5, 2) -> (5, 3) -> (5, 4) -> (5, 5)","solution":"from collections import deque def shortest_path(n, x1, y1, x2, y2, grid): # Convert the 1-based index to 0-based index x1, y1, x2, y2 = x1 - 1, y1 - 1, x2 - 1, y2 - 1 # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS queue initialization queue = deque([(x1, y1, 0)]) # (current_x, current_y, current_distance) visited = set((x1, y1)) while queue: current_x, current_y, current_distance = queue.popleft() # If the destination is reached if current_x == x2 and current_y == y2: return current_distance # Check all possible directions for direction in directions: next_x, next_y = current_x + direction[0], current_y + direction[1] # Check if the next move is within the grid and not visited yet if 0 <= next_x < n and 0 <= next_y < n and (next_x, next_y) not in visited: if grid[next_x][next_y] == \'.\': queue.append((next_x, next_y, current_distance + 1)) visited.add((next_x, next_y)) # Return -1 if destination is unreachable return -1"}]'),S={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},Y={class:"search-container"},j={class:"card-container"},C={key:0,class:"empty-state"},P=["disabled"],F={key:0},R={key:1};function D(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",Y,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):h("",!0)]),t("div",j,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",C,' No results found for "'+l(a.searchQuery)+'". ',1)):h("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",F,"See more"))],8,P)):h("",!0)])}const M=d(S,[["render",D],["__scopeId","data-v-c10f1ac1"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/39.md","filePath":"quotes/39.md"}'),z={name:"quotes/39.md"},U=Object.assign(z,{setup(s){return(e,u)=>(n(),i("div",null,[x(M)]))}});export{B as __pageData,U as default};
