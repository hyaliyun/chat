import{_ as c,o as n,c as i,a as t,m as h,t as d,C as g,M as _,U as y,f as u,F as w,p as b,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},A={class:"review-title"},E={class:"review-content"};function C(a,e,l,p,r,s){return n(),i("div",T,[t("div",q,[t("div",A,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),h(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),h(d(l.poem.solution),1)])])])}const S=c(k,[["render",C],["__scopeId","data-v-abc5e6ef"]]),D=JSON.parse('[{"question":"In this exercise, you will work with Python\'s string methods and list operations to accomplish text-related tasks. This problem will test your ability to manipulate strings and lists and apply basic programming techniques. You are required to create a function named `string_manipulations` which performs the following tasks: 1. Given a string sentence, create a list of its words. 2. Compute the frequency of each word in the list. 3. Find the word that has the maximum frequency. If there is a tie, choose the word that appears first in the list. 4. Return the list of words, the frequency dictionary, and the most frequent word. The function should return a tuple with three elements in the following order: - The list of words in the sentence. - A dictionary containing the frequency of each word. - The word with the highest frequency. # Function Signature The signature of the function is: ```python def string_manipulations(sentence: str) -> tuple: pass ``` # Example ```python sentence = \\"the quick brown fox jumps over the lazy dog the quick dog\\" result = string_manipulations(sentence) print(result) ``` Output: ``` ([\'the\', \'quick\', \'brown\', \'fox\', \'jumps\', \'over\', \'the\', \'lazy\', \'dog\', \'the\', \'quick\', \'dog\'], {\'the\': 3, \'quick\': 2, \'brown\': 1, \'fox\': 1, \'jumps\': 1, \'over\': 1, \'lazy\': 1, \'dog\': 2}, \'the\') ``` # Constraints - Assume the input string is non-empty and contains only alphabetical characters and spaces. - The words are separated by single spaces. - The function should handle both uppercase and lowercase letters by converting the entire sentence to lowercase before processing. Use Python\'s built-in string methods and dictionary operations to solve this problem. Ensure that the string is correctly split into words, and the frequency calculation is accurate.","solution":"def string_manipulations(sentence: str) -> tuple: # Convert the sentence to lowercase sentence = sentence.lower() # Create a list of words words = sentence.split() # Compute the frequency of each word frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 # Find the word with the maximum frequency max_frequency = 0 max_word = None for word in words: if frequency[word] > max_frequency: max_frequency = frequency[word] max_word = word return (words, frequency, max_word)"},{"question":"You need to implement a function `group_students` that groups students into study teams based on their skill levels and preferences. Each student has a unique identifier, a skill level (an integer), and a list of preferred teammates\' identifiers. The goal is to maximize the number of groups formed of exactly three students where each student in the group prefers being with the other two members, and their skill levels are within a given range of each other. The function `group_students` should: 1. Iterate over the list of students, their skill levels, and preferences. 2. Form teams of exactly three students where: - Each student in the team prefers the other two students. - The difference in skill levels between the highest and lowest in the team does not exceed the given `max_skill_diff`. 3. Return the number of such groups formed. **Function Signature:** ```python def group_students(students: list[dict], max_skill_diff: int) -> int: pass ``` **Parameters:** - `students` (list of dicts): A list of dictionaries, each representing a student with keys: - `\'id\'` (int): The student\'s unique identifier. - `\'skill_level\'` (int): The student\'s skill level. - `\'preferences\'` (list of int): List of other student identifiers this student prefers to work with. - `max_skill_diff` (int): The maximum allowed difference between the highest and lowest skill levels in a team. **Returns:** - `int`: The number of valid teams (groups of exactly three students) formed. **Example Usage:** ```python students = [ {\'id\': 1, \'skill_level\': 5, \'preferences\': [2, 3]}, {\'id\': 2, \'skill_level\': 6, \'preferences\': [1, 3]}, {\'id\': 3, \'skill_level\': 7, \'preferences\': [1, 2]}, {\'id\': 4, \'skill_level\': 4, \'preferences\': [5, 6]}, {\'id\': 5, \'skill_level\': 5, \'preferences\': [4, 6]}, {\'id\': 6, \'skill_level\': 6, \'preferences\': [4, 5]} ] group_count = group_students(students=students, max_skill_diff=2) print(group_count) # Expected output: 2 (one group being [1, 2, 3] and another being [4, 5, 6]) ``` **Important Notes:** - A student can be part of at most one team. - Consider the order of students in the `preferences` list while forming the groups. - Ensure the function efficiently handles the grouping to avoid excessive computation time with large input sizes.","solution":"from itertools import combinations def group_students(students, max_skill_diff): Groups students into teams of exactly three where each student in the group prefers the other two members and their skill levels are within a given range. Args: - students (list of dict): List of dictionaries each representing a student. - max_skill_diff (int): Maximum allowed difference between highest and lowest skill levels in a team. Returns: - int: Number of valid teams formed. # Helper function to check if three students can form a group def can_form_group(student1, student2, student3): ids = [student1[\'id\'], student2[\'id\'], student3[\'id\']] skill_levels = [student1[\'skill_level\'], student2[\'skill_level\'], student3[\'skill_level\']] preferences = [student1[\'preferences\'], student2[\'preferences\'], student3[\'preferences\']] if all(x in preferences[0] for x in ids if x != student1[\'id\']) and all(x in preferences[1] for x in ids if x != student2[\'id\']) and all(x in preferences[2] for x in ids if x != student3[\'id\']): if max(skill_levels) - min(skill_levels) <= max_skill_diff: return True return False valid_groups = [] student_ids_in_group = set() for combo in combinations(students, 3): if can_form_group(*combo): # Make sure no student is already in a group if not any(student[\'id\'] in student_ids_in_group for student in combo): valid_groups.append(combo) student_ids_in_group.update(student[\'id\'] for student in combo) return len(valid_groups)"},{"question":"You\'ve been hired to work on a project that involves processing text data from a list of phrases. Each phrase contains words that might be repeated. Your task is to write a function `filter_unique_words(phrases)` that filters out repeated words within each phrase and retains only the unique ones in their original order. Here\'s the requirement for the function: 1. Traverse through each phrase in the `phrases` list. 2. For each phrase, extract each word and keep track of words that have already appeared within that phrase. 3. If a word appears more than once in the same phrase, discard its subsequent occurrences. 4. Create a new list of phrases containing only the unique words for each original phrase, maintaining their order of first appearance. 5. Return the new list of phrases. # Function Signature: ```python def filter_unique_words(phrases): pass ``` # Constraints: - The input `phrases` is a list of strings, where each string is a phrase composed of words separated by spaces. - Words are case-sensitive, e.g., \'Hello\' and \'hello\' are considered different words. - The maximum number of phrases is 100. - Each phrase can contain up to 100 words. # Example Usage: ```python phrases = [ \\"this is a test test\\", \\"hello world world hello\\", \\"python is great python programming\\" ] print(filter_unique_words(phrases)) # Output: [ # \\"this is a test\\", # \\"hello world\\", # \\"python is great programming\\" # ] ```","solution":"def filter_unique_words(phrases): Filters out repeated words within each phrase and retains only the unique ones in their original order. new_phrases = [] for phrase in phrases: words = phrase.split() seen = set() unique_words = [] for word in words: if word not in seen: seen.add(word) unique_words.append(word) new_phrases.append(\\" \\".join(unique_words)) return new_phrases"},{"question":"Your task is to create a function that takes a list of integers and returns a tuple containing two lists. The first list should contain all the even integers from the input list, and the second list should contain all the odd integers. Ensure that the integers in each list maintain their original order as in the input list. The function should output: tuple: A tuple containing two lists (even_list, odd_list). You should write self-contained code starting with: ``` def task_func(int_list): ```","solution":"def task_func(int_list): Takes a list of integers and returns a tuple containing two lists: one with even integers and another with odd integers. Parameters: int_list (list): A list of integers. Returns: tuple: A tuple containing two lists (even_list, odd_list). even_list = [num for num in int_list if num % 2 == 0] odd_list = [num for num in int_list if num % 2 != 0] return (even_list, odd_list)"},{"question":"You have been hired to create a basic blog post manager. A blog post consists of a title, content, and a unique identifier (ID). Your task is to implement a class `BlogManager` that allows you to perform the following operations: 1. **Add a New Post:** - Given a title and content, add the new post to the system. The ID should be automatically generated to ensure it is unique. - Return the ID of the newly created post. 2. **Delete a Post:** - Given an ID, delete the post associated with that ID. - If the post with the given ID does not exist, raise a `ValueError`. 3. **Retrieve a Post:** - Given an ID, retrieve the post details. - If the post with the given ID does not exist, raise a `ValueError`. 4. **Update a Post:** - Given an ID, new title, and new content, update the post associated with the ID. - If the post with the given ID does not exist, raise a `ValueError`. Your `BlogManager` class should manage all these operations efficiently. Use a dictionary to store and manage the blog posts. The unique identifier (ID) should be an integer that starts from 1 and increments by 1 for each new post added. ```python class BlogManager: def __init__(self): self.posts = {} self.current_id = 1 def add_post(self, title, content): post_id = self.current_id self.posts[post_id] = {\'title\': title, \'content\': content} self.current_id += 1 return post_id def delete_post(self, post_id): if post_id in self.posts: del self.posts[post_id] else: raise ValueError(f\\"Post with ID {post_id} does not exist.\\") def retrieve_post(self, post_id): if post_id in self.posts: return self.posts[post_id] else: raise ValueError(f\\"Post with ID {post_id} does not exist.\\") def update_post(self, post_id, title, content): if post_id in self.posts: self.posts[post_id] = {\'title\': title, \'content\': content} else: raise ValueError(f\\"Post with ID {post_id} does not exist.\\") # Example usage: blog_manager = BlogManager() post_id1 = blog_manager.add_post(\\"First Post\\", \\"This is the content of the first post.\\") print(blog_manager.retrieve_post(post_id1)) # Output: {\'title\': \'First Post\', \'content\': \'This is the content of the first post.\'} blog_manager.update_post(post_id1, \\"Updated Post\\", \\"Updated content.\\") print(blog_manager.retrieve_post(post_id1)) # Output: {\'title\': \'Updated Post\', \'content\': \'Updated content.\'} blog_manager.delete_post(post_id1) # blog_manager.retrieve_post(post_id1) # Should raise ValueError since post_id1 is deleted ```","solution":"class BlogManager: def __init__(self): self.posts = {} self.current_id = 1 def add_post(self, title, content): post_id = self.current_id self.posts[post_id] = {\'title\': title, \'content\': content} self.current_id += 1 return post_id def delete_post(self, post_id): if post_id in self.posts: del self.posts[post_id] else: raise ValueError(f\\"Post with ID {post_id} does not exist.\\") def retrieve_post(self, post_id): if post_id in self.posts: return self.posts[post_id] else: raise ValueError(f\\"Post with ID {post_id} does not exist.\\") def update_post(self, post_id, title, content): if post_id in self.posts: self.posts[post_id] = {\'title\': title, \'content\': content} else: raise ValueError(f\\"Post with ID {post_id} does not exist.\\")"},{"question":"You are tasked with writing a Python function named `filter_anagrams` that identifies and groups anagrams from a given list of strings. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Your function will group these strings into a list of lists, where each sublist contains words that are anagrams of each other. Your function will take the following parameter: - `words`: A list of strings to be checked for anagrams. Your function should return: - A list of lists, where each sublist contains strings that are anagrams of each other. Here\'s the sample header of the function: ```python def filter_anagrams(words): # Your code here ``` # Requirements: 1. All strings in the input list are assumed to be lowercase and contain only alphabetic characters. 2. Utilize Python\'s collection types and dictionaries to efficiently group the anagrams. # Example: ```python words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"hello\\", \\"ohlle\\", \\"world\\"] print(filter_anagrams(words)) ``` # Expected Output: ```python [[\'listen\', \'silent\', \'enlist\'], [\'hello\', \'ohlle\'], [\'world\']] ``` # Explanation: - The words \\"listen\\", \\"silent\\", and \\"enlist\\" are anagrams of each other. - The words \\"hello\\" and \\"ohlle\\" are anagrams of each other. - The word \\"world\\" does not have any anagram in the given list.","solution":"from collections import defaultdict def filter_anagrams(words): Groups anagrams from a given list of words. Args: words (list of str): A list of strings to be checked for anagrams. Returns: list of list of str: A list of lists, where each sublist contains words that are anagrams of each other. anagram_dict = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) return list(anagram_dict.values())"},{"question":"Write a Python function called `find_prime_factors` that computes the prime factors of a given integer. This function will determine if the input integer is valid (positive integer greater than 1), and then find and return all prime factors. The function should ensure efficient computation for larger integers. Here\'s a detailed specification of the function: ```python def find_prime_factors(n): Computes the prime factors of a given integer. :param n: Integer input for which prime factors are to be computed. Must be greater than 1. :return: A list of prime factors. Example usage: >>> find_prime_factors(56) [2, 2, 2, 7] >>> find_prime_factors(97) [97] if n < 2: raise ValueError(\\"Input must be an integer greater than 1.\\") def is_prime(k): if k <= 1: return False if k <= 3: return True if k % 2 == 0 or k % 3 == 0: return False i = 5 while i * i <= k: if k % i == 0 or k % (i + 2) == 0: return False i += 6 return True prime_factors = [] # Divide by 2 until odd while n % 2 == 0: prime_factors.append(2) n //= 2 # Check odd factors from 3 upwards for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: prime_factors.append(i) n //= i # If n is prime and greater than 2 if n > 2: prime_factors.append(n) return prime_factors ``` Requirements: 1. Validate that the input integer is greater than 1. 2. Implement helper function `is_prime` to verify primality. 3. Efficiently compute prime factors, considering optimization techniques like checking divisibility up to the square root of the number. 4. Return a list of prime factors, allowing repeated factors if applicable. 5. Ensure your function handles both smaller and significantly larger integers efficiently.","solution":"def find_prime_factors(n): Computes the prime factors of a given integer. :param n: Integer input for which prime factors are to be computed. Must be greater than 1. :return: A list of prime factors. if n < 2: raise ValueError(\\"Input must be an integer greater than 1.\\") prime_factors = [] # Divide by 2 until odd while n % 2 == 0: prime_factors.append(2) n //= 2 # Check odd factors from 3 upwards for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: prime_factors.append(i) n //= i # If n is prime and greater than 2 if n > 2: prime_factors.append(n) return prime_factors"},{"question":"In this problem, you will create a function `k_closest_points` to find the `k` closest points to the origin from a given list of 2D points. Each point is represented as a list in the form `[x, y]` and the origin is represented as `[0, 0]`. The distance to the origin is calculated using the Euclidean distance formula. **Function Signature:** ```python def k_closest_points(points, k): Find the k closest points to the origin from the given list of points. :param points: List of points. Each point is a list in the form [x, y]. :param k: Number of closest points to find. :return: List of the k closest points to the origin. ``` **Parameters:** - `points` (list of list of float): A list of 2D points where each point is represented as a list `[x, y]`. - `k` (int): The number of closest points to the origin to return. **Returns:** - A list of the `k` closest points to the origin, in any order. **Instructions:** 1. Calculate the Euclidean distance for each point to the origin. The Euclidean distance for a point `[x, y]` to the origin is calculated as `sqrt(x^2 + y^2)`. 2. Utilize a heap data structure to efficiently find the `k` closest points. 3. Return the list of the `k` closest points. Here\'s an example of what your function might look like in use: ```python points = [[1, 2], [1, -1], [3, 4], [2, 2]] k = 2 closest_points = k_closest_points(points, k) print(closest_points) ```","solution":"import heapq import math def k_closest_points(points, k): Find the k closest points to the origin from the given list of points. :param points: List of points. Each point is a list in the form [x, y]. :param k: Number of closest points to find. :return: List of the k closest points to the origin. # Calculate the Euclidean distance for each point and store it with the point distances = [((math.sqrt(x**2 + y**2), [x, y])) for x, y in points] # Use a heap (min-heap by default in Python with heapq) to find the k smallest distances closest_points = heapq.nsmallest(k, distances, key=lambda x: x[0]) # Extract only the points from the tuple (distance, point) return [point for _, point in closest_points]"},{"question":"You are required to write a function named `calculate_metrics` which takes as input a list of dictionaries `data` and a list of strings `fields`. The function should compute and return key statistical measures for the specified fields. Specifically, for each field, calculate the average, median, and standard deviation of its values from the dictionaries in the list `data`. Your task is to: 1. Create helper functions to compute the average, median, and standard deviation. 2. For each string in `fields`, extract the respective values from each dictionary in `data`. 3. Calculate the average, median, and standard deviation of these extracted values. 4. Return the results in a dictionary where each key is a field name and the value is another dictionary with keys \'average\', \'median\', and \'std_dev\'. Here is the signature of the function you must implement: ```python def calculate_metrics(data: List[Dict[str, float]], fields: List[str]) -> Dict[str, Dict[str, float]]: ``` **Example Usage:** ```python data = [ {\'field1\': 10.0, \'field2\': 20.0}, {\'field1\': 20.0, \'field2\': 30.0}, {\'field1\': 30.0, \'field2\': 40.0}, ] fields = [\'field1\', \'field2\'] print(calculate_metrics(data, fields)) # Output: # { # \'field1\': {\'average\': 20.0, \'median\': 20.0, \'std_dev\': 10.0}, # \'field2\': {\'average\': 30.0, \'median\': 30.0, \'std_dev\': 10.0} # } ``` **Notes:** - The median should be calculated as the middle value of a sorted list, or the average of the two middle values if the list is even. - You can use the `math` and `statistics` libraries to assist with calculations where needed. - Assume all fields in `data` have valid numeric values and that `data` is non-empty.","solution":"import statistics def calculate_metrics(data, fields): Calculate the average, median, and standard deviation for each specified field in the data. results = {} for field in fields: # Extract the values for the current field from each dictionary in data values = [d[field] for d in data if field in d] # Calculate metrics avg = statistics.mean(values) med = statistics.median(values) std_dev = statistics.stdev(values) # Store the results results[field] = { \'average\': avg, \'median\': med, \'std_dev\': std_dev } return results"},{"question":"You need to write a function called `findMovieByTitle(title)` that takes a single argument, `title`, which is a string representing the title of a movie. The function will use the OMDB (Open Movie Database) API to retrieve information about a movie with the given title. To implement this function, you should use the `requests` library to make a GET request to the OMDB API and the `json.loads` function from the `json` library to parse the JSON response. The function should handle any exceptions that might occur during the request. The function should print the following movie information: 1. Title of the movie. 2. Year the movie was released. 3. IMDB rating. 4. Director of the movie. 5. Genre of the movie. Here is a summary of tasks to be performed in the function: - Make a GET request to the OMDB API using the provided `title`. - Convert the response from JSON format to a Python dictionary using `json.loads`. - Extract and print the required movie information. - Handle any potential exceptions that may occur during the API request. Assume API key is \'your_api_key_here\', and the response data will be in JSON format. You may find the [Python Library Documentation for json.loads](https://docs.python.org/3/library/json.html#json.loads) useful.","solution":"import requests import json def findMovieByTitle(title): Fetches movie information from the OMDB API and prints the key details. :param title: Title of the movie. api_key = \'your_api_key_here\' url = f\\"http://www.omdbapi.com/?t={title}&apikey={api_key}\\" try: response = requests.get(url) response.raise_for_status() movie_data = response.json() if movie_data.get(\'Response\') == \'True\': print(\\"Title:\\", movie_data.get(\'Title\')) print(\\"Year:\\", movie_data.get(\'Year\')) print(\\"IMDB Rating:\\", movie_data.get(\'imdbRating\')) print(\\"Director:\\", movie_data.get(\'Director\')) print(\\"Genre:\\", movie_data.get(\'Genre\')) else: print(\\"Movie not found!\\") except requests.exceptions.HTTPError as http_err: print(f\\"HTTP error occurred: {http_err}\\") except Exception as err: print(f\\"Other error occurred: {err}\\")"},{"question":"# Train Arrival Simulation In a railway station, multiple trains may arrive at different times. Write a function that takes the arrival and departure times of trains and calculates the minimum number of platforms required to accommodate all the trains without any two trains sharing the same platform at the same time. **Function to Implement:** `min_platforms(arrivals, departures)` Function Parameters: - `arrivals`: A list of integers where each integer represents the arrival time of a train. - `departures`: A list of integers where each integer represents the departure time of a train. Function Behavior: 1. Sort both the arrivals and departures lists. 2. Initialize variables to keep track of the current number of platforms in use and the maximum number of platforms required. 3. Use two pointers to traverse the sorted arrival and departure times. 4. For each train: - If the arrival time is less than the departure time of the next train to depart, increment the current platform count and move to the next arrival. - Otherwise, decrement the current platform count and move to the next departure. 5. Update the maximum number of platforms required. Additional Information: - Time in both lists is in a 24-hour format without colons (e.g., 1330 for 1:30 PM). - Assume that the arrival and departure times lists are of the same length, and each entry in arrivals corresponds to the same index in departures. **Objective**: Implement the `min_platforms` function such that it performs as described above. Example: ```python arrivals = [900, 940, 950, 1100, 1500, 1800] departures = [910, 1200, 1120, 1130, 1900, 2000] # Expected output: 3 min_platforms(arrivals, departures) ``` The function should return `3` because the maximum number of platforms needed at the same time is `3`.","solution":"def min_platforms(arrivals, departures): Returns the minimum number of platforms required to accommodate all the trains. arrivals.sort() departures.sort() n = len(arrivals) platform_needed = 0 max_platforms = 0 i, j = 0, 0 while i < n and j < n: if arrivals[i] < departures[j]: platform_needed += 1 i += 1 if platform_needed > max_platforms: max_platforms = platform_needed else: platform_needed -= 1 j += 1 return max_platforms"},{"question":"** You are required to implement a function that simulates a basic banking system. The function will manage accounts and be able to perform deposit, withdrawal, and balance check operations based on user inputs. This function simulates the operations for one account only. Your function should be named `bank_operations(actions)` where `actions` is a list of tuples. Each tuple contains a string command and a single integer value. The commands can be: - \\"deposit\\" which will add the integer value to the account balance. - \\"withdraw\\" which will subtract the integer value from the account balance. - \\"balance\\" which will simply report the current balance. It is important to note: 1. The initial account balance is zero. 2. The function should return a list of balances after each \\"balance\\" command. 3. If a \\"withdraw\\" operation attempts to withdraw more money than is currently in the account, it should not change the balance and skip to the next operation. 4. Assume all integer values are non-negative. Implement the following function: ```python def bank_operations(actions): Simulates a banking system with deposits, withdrawals, and balance checks. Parameters: actions (list of tuples): A list of tuples where each tuple contains a string command and an integer value. Returns: list of int: A list of balances after each \\"balance\\" command. pass ``` **Example:** ```python actions = [(\\"deposit\\", 100), (\\"withdraw\\", 50), (\\"balance\\", 0), (\\"withdraw\\", 60), (\\"balance\\", 0), (\\"deposit\\", 25), (\\"balance\\", 0)] result = bank_operations(actions) print(result) # Output: [50, 50, 75] ``` The output list contains the balance after each \\"balance\\" command in the order they appear in the `actions` list.","solution":"def bank_operations(actions): Simulates a banking system with deposits, withdrawals, and balance checks. Parameters: actions (list of tuples): A list of tuples where each tuple contains a string command and an integer value. Returns: list of int: A list of balances after each \\"balance\\" command. balance = 0 balance_history = [] for action in actions: command, value = action if command == \\"deposit\\": balance += value elif command == \\"withdraw\\": if balance >= value: balance -= value elif command == \\"balance\\": balance_history.append(balance) return balance_history"},{"question":"**Binary Tree Zigzag Level Order Traversal** In this problem, you will implement a function to traverse a binary tree in a zigzag level order. This means alternating between left-to-right and right-to-left traversal at each level of the tree. The function should be named `zigzag_level_order` and have the following signature: ```python def zigzag_level_order(root): pass ``` **Parameters:** 1. `root` (TreeNode): The root node of the binary tree. **Returns:** - A list of lists, where each inner list contains the values of the nodes at that level in zigzag order. **Instructions:** - You are given a binary tree node class `TreeNode` with the following definition: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` - Use a queue to manage the traversal process, and a flag to alternate between left-to-right and right-to-left traversal directions. - Ensure to handle cases where the binary tree is empty (i.e., the root node is `None`). Below is an example usage scenario of how your function should work: ```python # Example usage: # Construct the binary tree: # 3 # / # 9 20 # / # 15 7 root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20) root.right.left = TreeNode(15) root.right.right = TreeNode(7) # Call zigzag_level_order result = zigzag_level_order(root) print(result) # Expected output: [[3], [20, 9], [15, 7]] ``` Ensure your implementation is efficient and adheres to the expected time and space complexities for traversing a binary tree. **Note:** If the tree is empty (i.e., `root` is `None`), the function should return an empty list.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzag_level_order(root): if not root: return [] result = [] queue = deque([root]) left_to_right = True while queue: level_size = len(queue) current_level = deque() for _ in range(level_size): node = queue.popleft() if left_to_right: current_level.append(node.val) else: current_level.appendleft(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(list(current_level)) left_to_right = not left_to_right return result"},{"question":"Given a dictionary containing names as keys and a list of grades as values, write a function `calculate_average_grades()` that calculates the average grade for each student and returns a dictionary with names as keys and their average grades as values. You are provided with the following: - `students_grades`: a dictionary where each key is a student\'s name (a string) and the corresponding value is a list of integer grades. - The list of grades for each student can have any number of grades, but it will always have at least one grade. Your task is to write the function `calculate_average_grades()` that: 1. Iterates over each student in the `students_grades` dictionary. 2. Calculates the average grade for each student by summing their grades and dividing by the number of grades. 3. Creates a new dictionary with the students\' names as keys and their average grades as values. 4. Returns the dictionary containing the average grades. The function definition should be: ```python def calculate_average_grades(students_grades): # Your code here ``` For example, given the following input: ```python students_grades = { \\"Alice\\": [85, 92, 78], \\"Bob\\": [79, 85, 88, 90], \\"Charlie\\": [92, 85] } ``` The function should return: ```python { \\"Alice\\": 85.0, \\"Bob\\": 85.5, \\"Charlie\\": 88.5 } ```","solution":"def calculate_average_grades(students_grades): Calculates the average grade for each student and returns a dictionary with their average grades. :param students_grades: Dictionary where keys are student names and values are lists of grades. :return: Dictionary with student names as keys and their average grades as values. average_grades = {} for student, grades in students_grades.items(): average_grades[student] = sum(grades) / len(grades) return average_grades"},{"question":"Design and implement a function that reads a CSV file containing customer purchases and performs the following tasks: 1. Preprocess the data by filling any missing values in the \'Amount\' column with the column\'s mean. 2. Encode the \'Product\' column using one-hot encoding. 3. Standardize the \'Amount\' column to have zero mean and unit variance. 4. Split the data into training and testing sets. 5. Train a linear regression model to predict the \'Amount\' using the encoded \'Product\' features. 6. Evaluate the model using Mean Absolute Error (MAE). The function should return the trained linear regression model and the MAE score. You should write self-contained code starting with: ``` import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_absolute_error from sklearn.preprocessing import StandardScaler def task_func(file_path): ```","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_absolute_error from sklearn.preprocessing import StandardScaler def task_func(file_path): # Read the CSV file data = pd.read_csv(file_path) # Preprocess the data # Fill missing values in \'Amount\' column with the column\'s mean data[\'Amount\'].fillna(data[\'Amount\'].mean(), inplace=True) # One-hot encode the \'Product\' column data_encoded = pd.get_dummies(data, columns=[\'Product\']) # Standardize the \'Amount\' column scaler = StandardScaler() data_encoded[\'Amount\'] = scaler.fit_transform(data_encoded[[\'Amount\']]) # Split the data into training and testing sets X = data_encoded.drop(\'Amount\', axis=1) y = data_encoded[\'Amount\'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train a linear regression model model = LinearRegression() model.fit(X_train, y_train) # Predict using the testing set y_pred = model.predict(X_test) # Evaluate the model using Mean Absolute Error (MAE) mae_score = mean_absolute_error(y_test, y_pred) return model, mae_score"},{"question":"You will work with strings and simple data encoding in this task. Write a function named `encode_string` that encodes a given input string based on the following rules: 1. Each character in the string should be replaced with the sequence of characters from the cipher. 2. The cipher is defined as follows: - \'a\' -> \'4\' - \'e\' -> \'3\' - \'i\' -> \'1\' - \'o\' -> \'0\' - \'u\' -> \'7\' - Any other character remains unchanged. The function should take one input parameter: - `input_string` (string): The string to be encoded. The function should return a new string that represents the encoded version of the `input_string`. Here\'s a template for the function: ```python def encode_string(input_string): Encodes the input string based on the given cipher rules. Parameters: input_string (str): The string to be encoded. Returns: str: The encoded string. # Your code here # Example usage: encoded = encode_string(\\"hello, how are you?\\") print(\\"Encoded String:\\", encoded) ``` Your task is to complete the `encode_string` function so that it correctly encodes the provided input string based on the specified rules.","solution":"def encode_string(input_string): Encodes the input string based on the given cipher rules. Parameters: input_string (str): The string to be encoded. Returns: str: The encoded string. cipher = { \'a\': \'4\', \'e\': \'3\', \'i\': \'1\', \'o\': \'0\', \'u\': \'7\' } encoded_string = \'\'.join([cipher[char] if char in cipher else char for char in input_string]) return encoded_string"},{"question":"You are required to implement a function named `analyze_stock_data` that performs the following tasks: 1. **Loading Data**: Read a CSV file containing daily stock prices for a single stock. The CSV file contains columns: \\"Date\\" (in YYYY-MM-DD format), \\"Open\\", \\"High\\", \\"Low\\", \\"Close\\", \\"Volume\\". 2. **Moving Average**: Compute the moving average of the closing prices over a specified window of days. 3. **Data Visualization**: Plot the original closing prices and the moving average on the same graph. 4. **Libraries to Use**: - `pandas.read_csv`: To load the CSV file. - `pandas.DataFrame.rolling`: To compute the moving average. - `matplotlib` for plotting the data. 5. **Function Signature**: ```python def analyze_stock_data(file_path: str, window: int) -> None: ``` **Instructions**: - Function must be named `analyze_stock_data`. - It should accept two parameters: `file_path` which is a string representing the file path of the CSV file to be loaded, and `window` which is an integer specifying the window size for the moving average. - Use `pandas` functions, specifically `read_csv` to load the stock data and `DataFrame.rolling` to compute the moving average. - Use `matplotlib` to plot the closing prices and the moving average on the same graph. Below is a code snippet to help illustrate the required operations for reference: ```python import pandas as pd import matplotlib.pyplot as plt def analyze_stock_data(file_path, window): # Load the stock data from the CSV data = pd.read_csv(file_path) # Parse the \\"Date\\" column as datetime data[\'Date\'] = pd.to_datetime(data[\'Date\']) # Set the \\"Date\\" column as the index data.set_index(\'Date\', inplace=True) # Compute the moving average of the closing prices data[\'Moving_Avg\'] = data[\'Close\'].rolling(window=window).mean() # Plot the closing prices and the moving average plt.figure(figsize=(12, 6)) plt.plot(data[\'Close\'], label=\'Closing Prices\') plt.plot(data[\'Moving_Avg\'], label=f\'{window}-Day Moving Average\', color=\'red\') plt.xlabel(\'Date\') plt.ylabel(\'Price\') plt.title(\'Stock Closing Prices and Moving Average\') plt.legend() plt.show() # Example usage file_path = \'stock_data.csv\' window = 20 analyze_stock_data(file_path, window) ```","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_stock_data(file_path: str, window: int) -> None: Analyzes stock data by computing the moving average and plots the stock\'s closing prices along with the computed moving average. Parameters: - file_path: str : the path to the CSV file containing the stock data. - window: int : the window size for computing the moving average. # Load the stock data from the CSV data = pd.read_csv(file_path) # Parse the \\"Date\\" column as datetime data[\'Date\'] = pd.to_datetime(data[\'Date\']) # Set the \\"Date\\" column as the index data.set_index(\'Date\', inplace=True) # Compute the moving average of the closing prices data[\'Moving_Avg\'] = data[\'Close\'].rolling(window=window).mean() # Plot the closing prices and the moving average plt.figure(figsize=(12, 6)) plt.plot(data[\'Close\'], label=\'Closing Prices\') plt.plot(data[\'Moving_Avg\'], label=f\'{window}-Day Moving Average\', color=\'red\') plt.xlabel(\'Date\') plt.ylabel(\'Price\') plt.title(\'Stock Closing Prices and Moving Average\') plt.legend() plt.show()"},{"question":"You are required to create a function that identifies the most frequently occurring sequences of characters of a given length within a string. The function will accept a string and sequence length as inputs and returns the most common sequences along with their counts. # Function Signature: ```python def Frequent_Sequences(s: str, seq_len: int) -> dict: ``` # Parameters: - `s`: A string from which to find the sequences. - `seq_len`: An integer representing the length of the sequences to be considered. # Requirements: 1. If the input string `s` is shorter than the given sequence length `seq_len`, return an empty dictionary. 2. The function should be case-sensitive, treating \\"a\\" and \\"A\\" as different characters. 3. In case of ties (sequences with the same frequency), include all the tied sequences in the output. # Output: - Returns a dictionary where keys are the most frequent sequences of length `seq_len`, and values are their counts. # Example: Calling ```python Frequent_Sequences(\\"abababca\\", 2) ``` should return ```python {\\"ab\\": 3} ``` Calling ```python Frequent_Sequences(\\"abcabcabcabc\\", 3) ``` should return ```python {\\"abc\\": 4} ```","solution":"def Frequent_Sequences(s: str, seq_len: int) -> dict: if len(s) < seq_len: return {} seq_count = {} for i in range(len(s) - seq_len + 1): seq = s[i:i+seq_len] if seq in seq_count: seq_count[seq] += 1 else: seq_count[seq] = 1 max_count = max(seq_count.values(), default=0) return {seq: count for seq, count in seq_count.items() if count == max_count}"},{"question":"Write a function to find all prime numbers up to a given integer `n` using the Sieve of Eratosthenes algorithm. The Sieve of Eratosthenes is a simple and ancient algorithm used to find all primes smaller than or equal to a given limit. # Requirements: 1. **Function Name:** `sieve_of_eratosthenes` 2. **Parameters:** - `n` (int): The upper limit (inclusive) for finding prime numbers. 3. **Returns:** - A list of integers representing all prime numbers up to `n`. # Function Details: - The function should use the Sieve of Eratosthenes algorithm to find all prime numbers less than or equal to `n`. - It should eliminate multiples of each prime starting from 2. # Example Usage: Given `n = 30`, the function should return: ```python [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] ``` # Steps: 1. Create a list of boolean values representing whether a number is prime. 2. Initialize the list with `True`, except for indices 0 and 1 which represent the numbers 0 and 1, respectively. 3. Starting from the first prime number, 2, eliminate all its multiples. 4. Repeat the process for the next number that hasn\'t been eliminated. 5. Continue until you\'ve processed numbers up to the square root of `n`. 6. Collect and return all indices marked as `True` in the boolean list, which represent prime numbers. # Example Usage: ```python def sieve_of_eratosthenes(n): # Implementation here print(sieve_of_eratosthenes(30)) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] ```","solution":"def sieve_of_eratosthenes(n): Finds all prime numbers up to a given integer n using the Sieve of Eratosthenes algorithm. Parameters: n (int): The upper limit (inclusive) for finding prime numbers. Returns: list: A list of integers representing all prime numbers up to n. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0], is_prime[1] = False, False p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [i for i in range(n + 1) if is_prime[i]]"},{"question":"You are required to implement a function named `binary_tree_inorder_traversal` that performs an in-order traversal of a binary tree and returns the values of the nodes in the traversal order as a list. An in-order traversal visits the left subtree, then the root node, and finally the right subtree. # Function Signature ```python def binary_tree_inorder_traversal(root: Optional[TreeNode]) -> List[int]: pass ``` # Requirements 1. **Function Parameters:** - `root`: A `TreeNode` object representing the root node of the binary tree. If the tree is empty, `root` will be `None`. 2. **Function Output:** - The output should be a list of integers representing the node values in in-order traversal order. # Detailed Steps 1. **Define TreeNode Class:** - The `TreeNode` class is provided and represents a node in the binary tree. It includes three attributes: `val` for the node\'s value, `left` for the left child, and `right` for the right child. ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` 2. **In-Order Traversal Implementation:** - Implement an in-order traversal algorithm that recursively visits the left subtree, adds the root node value to the result list, and then visits the right subtree. 3. **Edge Cases:** - Handle the case where the input binary tree is empty (`root` is `None`). # Example Assume you have the following binary tree: ``` 1 2 / 3 ``` 1. After creating the tree with the following code: ```python root = TreeNode(1) root.right = TreeNode(2) root.right.left = TreeNode(3) ``` 2. Calling `binary_tree_inorder_traversal(root)` should return: ```plaintext [1, 3, 2] ``` # Libraries - Standard libraries such as `typing` for type hints (`Optional`, `List`) may be used.","solution":"from typing import Optional, List class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def binary_tree_inorder_traversal(root: Optional[TreeNode]) -> List[int]: Performs an in-order traversal of a binary tree and returns the values of the nodes in traversal order. :param root: Root node of the binary tree :return: List of node values in in-order traversal order def inorder(node: Optional[TreeNode], result: List[int]): if not node: return inorder(node.left, result) result.append(node.val) inorder(node.right, result) result = [] inorder(root, result) return result"},{"question":"You are tasked with writing a function `zoo_escape` that simulates a scenario in a text-based adventure game where the player needs to decide how to escape from a zoo. The player can choose between climbing a wall (input `1`) or digging a tunnel (input `2`). The chosen escape method is compared against a randomly generated outcome to determine if they successfully escaped or not. The function should utilize the `time.sleep` function to create pauses in the output to simulate a suspenseful effect. Here is the detailed logic you need to implement in the `zoo_escape` function: 1. Print a series of prompts asking the player to choose between climbing the wall (input `1`) or digging a tunnel (input `2`). 2. Capture the player\'s choice using `input()`. 3. Print additional messages and use `time.sleep` to create pauses of 1 second for suspense. 4. Generate a random integer (either 1 or 2) to simulate the outcome of the chosen escape method. 5. Based on the comparison, print whether the player successfully escaped or not. Important: - You must import and use the `time` module\'s `sleep` function to create the suspenseful pauses. - Use the `random` module to generate a random integer between 1 and 2. Function Signature: ```python def zoo_escape(): pass ``` Example Output: When executed, the function replicates the following interaction: ``` You are trapped in a zoo and need to escape. You could climb the wall (1) or dig a tunnel (2). Which method do you choose? (1 or 2) 1 -------------------------------------------------- You contemplate your plan You gather your strength You start your escape and... You successfully escape the zoo -------------------------------------------------- ```","solution":"import time import random def zoo_escape(): print(\\"You are trapped in a zoo and need to escape.\\") print(\\"You could climb the wall (1) or dig a tunnel (2).\\") choice = int(input(\\"nWhich method do you choose? (1 or 2)n\\")) print(\\"--------------------------------------------------\\") print(\\"You contemplate your plan\\") time.sleep(1) print(\\"nYou gather your strength\\") time.sleep(1) print(\\"nYou start your escape and...\\") time.sleep(1) outcome = random.randint(1, 2) if choice == outcome: print(\\"nYou successfully escape the zoo\\") else: print(\\"nYou failed to escape\\") print(\\"--------------------------------------------------\\")"},{"question":"Implement a function named `find_duplicates` that identifies all duplicate elements in a given list of integers and returns them in ascending order. Your function should have the following signature: ```python def find_duplicates(input_list: List[int]) -> List[int]: ``` The function should take in a single parameter: - `input_list`: A list of integers that may contain duplicates. The function should return a list of integers: - A list containing all elements that appear more than once in `input_list`, sorted in ascending order. If there are no duplicates, return an empty list. Example: ```python # Example data input_list = [4, 3, 2, 7, 8, 2, 3, 1] result = find_duplicates(input_list) print(f\\"Duplicates: {result}\\") # Expected Output: Duplicates: [2, 3] ``` Another example: ```python # Example data input_list = [10, 10, 30, 30, 20, 50, 50, 50] result = find_duplicates(input_list) print(f\\"Duplicates: {result}\\") # Expected Output: Duplicates: [10, 30, 50] ```","solution":"from typing import List def find_duplicates(input_list: List[int]) -> List[int]: Returns a list of duplicate elements in ascending order from input_list. # Dictionary to store the frequency of elements frequency = {} for num in input_list: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 # Extract elements that appear more than once and sort them duplicates = [num for num, count in frequency.items() if count > 1] return sorted(duplicates)"},{"question":"You need to create a function that simulates a simple stock management system. The function should support three operations: `stock`, `sell`, and `query`. These operations are performed on an inventory of items, where each item has a name and a quantity. Your function should allow for adding stock, selling stock, and querying the current stock of a specific item. **Function Signature:** ```python def stock_management(tasks: List[Tuple[str, str, int]]) -> List[int]: ``` **Parameters:** - `tasks`: A list of tasks to be performed on the inventory. Each task is represented as a tuple containing: - the operation (`\\"stock\\"`, `\\"sell\\"`, or `\\"query\\"`) - the item name (a string) - the quantity (an integer) **Returns:** A list of integers where each element is the result of a `\\"query\\"` operation. The value should be the current quantity of the queried item. If the item is not found in the inventory during a `\\"query\\"` operation, return 0 for that query. **Constraints:** 1. The `tasks` list will contain at most 10,000 tasks. 2. Item names are case-sensitive and consist only of alphabetic characters. **Example:** ```python tasks = [ (\\"stock\\", \\"apple\\", 50), (\\"stock\\", \\"banana\\", 30), (\\"sell\\", \\"apple\\", 10), (\\"query\\", \\"apple\\", 0), (\\"query\\", \\"banana\\", 0), (\\"query\\", \\"cherry\\", 0) ] The function should return: [40, 30, 0] ``` **Hint:** Use a dictionary to manage the inventory where keys are item names and values are quantities. Implement logic to handle `\\"stock\\"`, `\\"sell\\"`, and `\\"query\\"` operations accordingly. Ensure that selling more items than the current stock does not result in negative quantities.","solution":"from typing import List, Tuple def stock_management(tasks: List[Tuple[str, str, int]]) -> List[int]: inventory = {} query_results = [] for operation, item, quantity in tasks: if operation == \\"stock\\": if item in inventory: inventory[item] += quantity else: inventory[item] = quantity elif operation == \\"sell\\": if item in inventory: inventory[item] = max(0, inventory[item] - quantity) elif operation == \\"query\\": query_results.append(inventory.get(item, 0)) return query_results"},{"question":"You are tasked with implementing a file system simulation that performs a set of commands provided to it. The file system operates within a virtual hierarchy of directories and files. The function `simulate_file_system(commands)` should be implemented with the following requirements: - `commands`: A list of strings, where each string is a command to be executed in order. - The file system supports three types of commands: - `mkdir [path]`: Creates a new directory at the specified path. If intermediate directories in the path do not exist, they should also be created. - `touch [path]`: Creates a new file at the specified path. If intermediate directories in the path do not exist, they should also be created. If the file already exists, its modification status is updated. - `ls [path]`: Lists all files and directories at the specified path. Should return a list of names sorted in lexicographical order. The function should return a dictionary `file_system_state` representing the final state of the file system after executing all commands. The structure of the dictionary should reflect the hierarchy of directories and files. ```python { \\"root\\": { \\"subdir1\\": { \\"subdir2\\": {}, \\"file1\\": \\"file\\" }, \\"subdir3\\": { \\"file2\\": \\"file\\" } } } ``` In this example, there are three directories (`subdir1`, `subdir2`, and `subdir3`) and two files (`file1` and `file2`). Files are represented by the string `\\"file\\"` in the respective paths. Here is a helper function that might be useful: ```python def create_nested_dict(path, is_file=False): keys = path.split(\'/\') d = current = {} for key in keys[:-1]: current = current.setdefault(key, {}) if is_file: current[keys[-1]] = \\"file\\" else: current[keys[-1]] = {} return d ``` Using this helper function within your `simulate_file_system(commands)` will assist in building the nested dictionary required to reflect the state of the virtual file system. The following is an example input and expected output: ```python commands = [ \\"mkdir /subdir1/subdir2\\", \\"touch /subdir1/file1\\", \\"touch /subdir3/file2\\", \\"ls /subdir1\\", ] result = simulate_file_system(commands) # Expected output: { \\"subdir1\\": { \\"subdir2\\": {}, \\"file1\\": \\"file\\" }, \\"subdir3\\": { \\"file2\\": \\"file\\" } } ``` Implement this function and ensure that it handles each command type correctly while maintaining the structural integrity of the virtual file system hierarchy.","solution":"def create_nested_dict(base, path, is_file=False): A helper function to create a nested dictionary structure representing directories and files. keys = path.strip(\'/\').split(\'/\') current = base for key in keys[:-1]: current = current.setdefault(key, {}) if is_file: current[keys[-1]] = \\"file\\" else: current[keys[-1]] = {} return base def simulate_file_system(commands): Simulates a file system based on a list of commands. file_system_state = {} for cmd in commands: parts = cmd.split() if parts[0] == \'mkdir\': path = parts[1] file_system_state = create_nested_dict(file_system_state, path, is_file=False) elif parts[0] == \'touch\': path = parts[1] file_system_state = create_nested_dict(file_system_state, path, is_file=True) elif parts[0] == \'ls\': # ls command does not modify the file system state, just lists contents path = parts[1].strip(\'/\') current = file_system_state for part in path.split(\'/\'): if part: current = current.get(part, {}) return sorted(list(current.keys())) return file_system_state"},{"question":"**Context:** You are designing a system to help people efficiently load data packets into servers. Each server has a limited capacity, and each data packet has a specific size. The goal is to distribute the packets in such a way that the packets are loaded into the servers while minimizing the number of servers used. **Goal:** Write a function `load_packets(packet_sizes, server_capacity)` which distributes the packets into the minimum number of servers required to load all packets without exceeding any server\'s capacity. **Function Signature:** ```python def load_packets(packet_sizes, server_capacity): pass ``` **Input:** - `packet_sizes`: A list of integers where each integer represents the size of a data packet. - `server_capacity`: An integer representing the maximum capacity of each server. **Output:** - A list of lists, where each inner list represents the packets loaded into one server. **Constraints:** 1. The list of packet sizes will be non-negative integers. 2. The server capacity is a positive integer. 3. Each packet should be assigned to exactly one server, and the sum of the packet sizes in a server should not exceed the server capacity. 4. Utilize an efficient algorithm to minimize the number of servers used, preferably a First Fit Decreasing algorithm by sorting the packet sizes in descending order and then using a greedy approach to assign packets to servers. **Example:** ```python packet_sizes = [4, 8, 1, 4, 2, 1] server_capacity = 10 # Expected output: [[8, 2], [4, 4, 1, 1]] ``` In this example, sorting the packet sizes in descending order gives: [8, 4, 4, 2, 1, 1]. The first server takes the largest packet (8) and then can take the second largest (2). The second server handles the remaining packets [4, 4, 1, 1] while staying within the 10-unit capacity constraint.","solution":"def load_packets(packet_sizes, server_capacity): Distributes the packets into the minimum number of servers required. Parameters: packet_sizes (list of int): Sizes of the data packets to be loaded. server_capacity (int): Maximum capacity of each server. Returns: list of lists: Distribution of packets into servers. if not packet_sizes: return [] # Sort packet sizes in descending order for First Fit Decreasing approach packet_sizes.sort(reverse=True) servers = [] for packet in packet_sizes: placed = False for server in servers: if sum(server) + packet <= server_capacity: server.append(packet) placed = True break if not placed: servers.append([packet]) return servers"},{"question":"You are required to create a function that takes a list of integers and returns a dictionary with keys representing each unique integer from the list and values representing their respective frequencies. Your function should be named `count_frequencies`. The function signature should be: ```python def count_frequencies(numbers: List[int]) -> Dict[int, int]: ``` # Parameters: - **numbers (List[int])**: A list of integers whose frequencies need to be calculated. # Returns: - **Dict[int, int]**: A dictionary where each key is a unique integer from the input list and the corresponding value is the count of that integer in the list. # Examples: ```python # Example 1 numbers = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] print(count_frequencies(numbers)) # Output: {1: 1, 2: 2, 3: 3, 4: 4} # Example 2 numbers = [1, 1, 1, 1, 1] print(count_frequencies(numbers)) # Output: {1: 5} # Example 3 numbers = [] print(count_frequencies(numbers)) # Output: {} ``` # Requirements: 1. Utilize core Python data structures and functions. 2. Ensure the function handles empty lists gracefully by returning an empty dictionary. 3. The solution should be efficient and easy to read.","solution":"from typing import List, Dict def count_frequencies(numbers: List[int]) -> Dict[int, int]: Returns a dictionary with the frequency of each unique integer in the list. Args: numbers (List[int]): A list of integers. Returns: Dict[int, int]: A dictionary with the frequency count of each unique integer. frequency_dict = {} for number in numbers: if number in frequency_dict: frequency_dict[number] += 1 else: frequency_dict[number] = 1 return frequency_dict"},{"question":"# Problem: Implement a Function to Simulate a Markov Chain Write a function `simulate_markov_chain(transition_matrix: List[List[float]], start_state: int, num_steps: int) -> List[int]` that performs the following tasks: 1. **Input Description**: - `transition_matrix`: A 2D list where each sub-list represents probabilities of transitioning from one state to another. - `start_state`: An integer representing the initial state. - `num_steps`: An integer representing the number of steps to simulate. 2. **Validate Input**: - Ensure the transition matrix is square (i.e., the number of rows equals the number of columns). - Verify that each row in the transition matrix sums to 1 (with a tolerance for floating-point arithmetic). - Ensure the `start_state` is a valid state within the transition matrix. 3. **Simulate the Markov Chain**: - Start at `start_state` and simulate the Markov chain for `num_steps` steps. - At each step, determine the next state based on the transition probabilities from the current state. 4. **Output the Sequence of States**: - Return a list representing the sequence of states visited during the simulation. # Required Libraries - numpy: for probabilistic transitions, as it allows easy sampling from the probability distributions. # Function Signature ```python from typing import List def simulate_markov_chain(transition_matrix: List[List[float]], start_state: int, num_steps: int) -> List[int]: pass ``` # Example Assume we have the following transition matrix and we start from state 0: ```python transition_matrix = [ [0.1, 0.6, 0.3], [0.4, 0.3, 0.3], [0.5, 0.2, 0.3] ] ``` Calling the function as follows: ```python simulate_markov_chain(transition_matrix, 0, 5) ``` This may produce a sequence like: `[0, 1, 2, 0, 0, 2]`. # Implementation Restrictions - Use `numpy` library to facilitate random choices based on the given probabilities. # Notes: - Make sure to import `numpy` within the function. - Handle edge cases such as invalid inputs gracefully. - Ensure that the function is efficient and works within reasonable time limits for larger matrices and number of steps.","solution":"from typing import List import numpy as np def simulate_markov_chain(transition_matrix: List[List[float]], start_state: int, num_steps: int) -> List[int]: # Check if the transition_matrix is square num_states = len(transition_matrix) if not all(len(row) == num_states for row in transition_matrix): raise ValueError(\\"Transition matrix must be square.\\") # Check if each row sums to 1 if not all(abs(sum(row) - 1.0) < 1e-8 for row in transition_matrix): raise ValueError(\\"Each row of the transition matrix must sum to 1.\\") # Check if start_state is valid if not (0 <= start_state < num_states): raise ValueError(\\"Start state must be a valid state within the transition matrix.\\") current_state = start_state sequence_of_states = [current_state] for _ in range(num_steps): next_state = np.random.choice(num_states, p=transition_matrix[current_state]) sequence_of_states.append(next_state) current_state = next_state return sequence_of_states"},{"question":"**Context:** You are developing a feature for an e-commerce platform’s recommendation system. The platform keeps track of user activities, including viewing and purchasing products. Your task is to build a function that processes user activity data and identifies the most viewed and most purchased products within a given time window. **Task:** Write a function `analyze_user_activity(activity_log, start_date, end_date)` that takes the following inputs: 1. `activity_log` (list of dicts): A list of activity records where each record is a dictionary with the following keys: - `timestamp` (string): The time when the activity occurred in \\"YYYY-MM-DD HH:MM:SS\\" format. - `user_id` (string): The ID of the user who performed the activity. - `product_id` (string): The ID of the product involved in the activity. - `action` (string): The type of activity, either \\"view\\" or \\"purchase\\". 2. `start_date` (string): The beginning of the date range for counting activities in \\"YYYY-MM-DD\\" format. 3. `end_date` (string): The end of the date range for counting activities in \\"YYYY-MM-DD\\" format. **Output:** The function should return: 1. `most_viewed` (string): The product_id of the most viewed product within the specified date range. 2. `most_purchased` (string): The product_id of the most purchased product within the specified date range. **Specific Requirements:** - Only consider activities that fall between `start_date` and `end_date` inclusive. - If no activities fall within the given date range, return `None` for both `most_viewed` and `most_purchased`. - If there are ties (multiple products with the same maximum count), return any one of them. **Examples:** ```python example_activity_log = [ {\\"timestamp\\": \\"2023-01-10 14:23:00\\", \\"user_id\\": \\"user_1\\", \\"product_id\\": \\"product_A\\", \\"action\\": \\"view\\"}, {\\"timestamp\\": \\"2023-01-11 10:05:00\\", \\"user_id\\": \\"user_2\\", \\"product_id\\": \\"product_B\\", \\"action\\": \\"purchase\\"}, {\\"timestamp\\": \\"2023-01-12 16:17:00\\", \\"user_id\\": \\"user_3\\", \\"product_id\\": \\"product_A\\", \\"action\\": \\"view\\"}, {\\"timestamp\\": \\"2023-01-15 09:33:00\\", \\"user_id\\": \\"user_1\\", \\"product_id\\": \\"product_C\\", \\"action\\": \\"view\\"}, {\\"timestamp\\": \\"2023-01-17 21:11:00\\", \\"user_id\\": \\"user_2\\", \\"product_id\\": \\"product_B\\", \\"action\\": \\"purchase\\"}, {\\"timestamp\\": \\"2023-01-18 08:45:00\\", \\"user_id\\": \\"user_3\\", \\"product_id\\": \\"product_A\\", \\"action\\": \\"purchase\\"}, {\\"timestamp\\": \\"2023-01-20 14:23:00\\", \\"user_id\\": \\"user_1\\", \\"product_id\\": \\"product_C\\", \\"action\\": \\"view\\"}, ] start_date_example = \\"2023-01-10\\" end_date_example = \\"2023-01-20\\" most_viewed, most_purchased = analyze_user_activity(example_activity_log, start_date_example, end_date_example) ```","solution":"from collections import defaultdict from datetime import datetime def analyze_user_activity(activity_log, start_date, end_date): Analyzes user activity log and identifies the most viewed and most purchased products within the given date range. Parameters: - activity_log: List[Dict] - A list of activity records. - start_date: str - The beginning of the date range in \\"YYYY-MM-DD\\" format. - end_date: str - The end of the date range in \\"YYYY-MM-DD\\" format. Returns: - Tuple[str, str] - most_viewed and most_purchased product_ids. start = datetime.strptime(start_date, \\"%Y-%m-%d\\") end = datetime.strptime(end_date, \\"%Y-%m-%d\\") views = defaultdict(int) purchases = defaultdict(int) for entry in activity_log: timestamp = datetime.strptime(entry[\\"timestamp\\"], \\"%Y-%m-%d %H:%M:%S\\") if start <= timestamp <= end: if entry[\\"action\\"] == \\"view\\": views[entry[\\"product_id\\"]] += 1 elif entry[\\"action\\"] == \\"purchase\\": purchases[entry[\\"product_id\\"]] += 1 most_viewed = max(views, key=views.get, default=None) most_purchased = max(purchases, key=purchases.get, default=None) return most_viewed, most_purchased"},{"question":"You are tasked with implementing a function named `find_kth_smallest` to find the k-th smallest element in an unsorted array. Your implementation should be efficient, aiming for an average-case time complexity of O(n). **Function Signature:** ```python def find_kth_smallest(arr: List[int], k: int) -> int: ``` **Parameters:** - `arr` (List[int]): A list of integers which can contain both positive and negative numbers. - `k` (int): The position of the smallest element to find (1-indexed). **Returns:** - An integer representing the k-th smallest element in the array. **Constraints:** 1. You must use the Quickselect algorithm. 2. Your solution should have an average time complexity of O(n). 3. You are not allowed to use Python\'s built-in sorting functions or methods. **Instructions:** 1. Implement the Quickselect algorithm to find the k-th smallest element. 2. The array should not be modified permanently after the function execution. 3. Handle edge cases such as invalid values of `k`. Example: ```python arr = [7, 10, 4, 3, 20, 15] k = 3 print(find_kth_smallest(arr, k)) # should return 7 arr = [7, 10, 4, 3, 20, 15] k = 1 print(find_kth_smallest(arr, k)) # should return 3 arr = [7, 10, 4, 3, 20, 15] k = 6 print(find_kth_smallest(arr, k)) # should return 20 ``` **Hint:** 1. Use the partition method to rearrange elements based on a pivot. 2. Recursively call the Quickselect method only on the part of the array that contains the k-th smallest element.","solution":"from typing import List import random def partition(arr: List[int], low: int, high: int) -> int: pivot = arr[high] i = low for j in range(low, high): if arr[j] < pivot: arr[i], arr[j] = arr[j], arr[i] i += 1 arr[i], arr[high] = arr[high], arr[i] return i def quickselect(arr: List[int], low: int, high: int, k: int) -> int: if low < high: pivot_index = partition(arr, low, high) if pivot_index == k: return arr[pivot_index] elif pivot_index > k: return quickselect(arr, low, pivot_index - 1, k) else: return quickselect(arr, pivot_index + 1, high, k) return arr[low] def find_kth_smallest(arr: List[int], k: int) -> int: if k < 1 or k > len(arr): raise ValueError(\\"k is out of the valid range\\") copied_arr = arr[:] return quickselect(copied_arr, 0, len(copied_arr) - 1, k - 1)"},{"question":"You are required to implement a function named `findLongestCommonPrefix` that takes a list of strings and finds the longest common prefix among them. If there is no common prefix, the function returns an empty string. # Function Signature: ```python def findLongestCommonPrefix(strs: list) -> str: # Your implementation here ``` # Detailed Instructions: 1. **Edge Cases**: - If the input list is empty, return an empty string. - If the input list contains only one string, return that string as the longest common prefix. 2. **Find Prefix by Comparison**: - Compare characters of the strings one by one until a mismatch is found or one of the strings is fully compared. - The comparison should be case-sensitive (i.e., \'A\' is not equal to \'a\'). 3. **Reduce Comparison Range**: - Iterate from the beginning of the strings to the shortest string length to avoid index errors. - Stop as soon as any character in the same position differs. # Example: ```python print(findLongestCommonPrefix([\\"flower\\", \\"flow\\", \\"flight\\"])) # Output: \\"fl\\" print(findLongestCommonPrefix([\\"dog\\", \\"racecar\\", \\"car\\"])) # Output: \\"\\" print(findLongestCommonPrefix([\\"interspecies\\", \\"interstellar\\", \\"interstate\\"])) # Output: \\"inters\\" print(findLongestCommonPrefix([\\"throne\\", \\"throne\\"])) # Output: \\"throne\\" print(findLongestCommonPrefix([])) # Output: \\"\\" ``` # Requirements: - Use basic looping constructs or string operations to solve the problem. # Constraints: - The length of the input list will be between 0 and 200. - The length of each string will be between 0 and 200. - All characters in the input list are lower-case English letters (a-z).","solution":"def findLongestCommonPrefix(strs: list) -> str: if not strs: return \\"\\" # Find the minimum length string in the list min_len = min(len(s) for s in strs) longest_common_prefix = \\"\\" for i in range(min_len): # Get the current character from the first string current_char = strs[0][i] # Check if this character is the same in all strings at position i if all(s[i] == current_char for s in strs): longest_common_prefix += current_char else: break return longest_common_prefix"},{"question":"In this problem, you are required to write a function `find_optimal_path(matrix)` that takes in a 2D NumPy array `matrix` representing a grid of integer values. The function should perform the following steps: 1. **Examine the grid**: Each cell in the matrix contains an integer that represents the cost of stepping into that cell. 2. **Starting Point**: The top-left cell `(0, 0)` is the starting point. 3. **Ending Point**: The bottom-right cell `(n-1, m-1)` is the destination. 4. **Valid Moves**: From any cell `(i, j)`, moves can be made to either the cell directly to the right `(i, j+1)` or directly below `(i+1, j)`, provided the cell lies within the grid. 5. **Compute the optimal path**: The function should compute the path from the top-left to the bottom-right that minimizes the total cost. **Required Libraries:** You should use the following NumPy library function: - `numpy.zeros` **Function Definition:** ```python def find_optimal_path(matrix): # Your implementation here ``` **Example:** ```python import numpy as np # Example usage: matrix = np.array([[1, 3, 1], [1, 5, 1], [4, 2, 1]]) optimal_path_cost = find_optimal_path(matrix) print(optimal_path_cost) # Output: 7 ``` # Explanation In the example provided, the optimal path that minimizes the total cost is: - Start at `(0,0)` with cost `1` - Move to `(0,1)` with cost `3`, total cost `1+3=4` - Move to `(0,2)` with cost `1`, total cost `4+1=5` - Move to `(1,2)` with cost `1`, total cost `5+1=6` - Move to `(2,2)` with cost `1`, total cost `6+1=7` Thus, the function should output `7` for the given matrix.","solution":"import numpy as np def find_optimal_path(matrix): Finds the optimal path from the top-left to the bottom-right of a grid to minimize the total cost. Moves are allowed only to the right or downward. Parameters: matrix (ndarray): 2D array of integers representing the cost grid. Returns: int: Minimum total cost of the optimal path. n, m = matrix.shape dp = np.zeros((n, m), dtype=int) dp[0, 0] = matrix[0, 0] # Initialize first column of the dp matrix for i in range(1, n): dp[i, 0] = dp[i-1, 0] + matrix[i, 0] # Initialize first row of the dp matrix for j in range(1, m): dp[0, j] = dp[0, j-1] + matrix[0, j] # Fill the rest of the dp matrix for i in range(1, n): for j in range(1, m): dp[i, j] = min(dp[i-1, j], dp[i, j-1]) + matrix[i, j] return dp[n-1, m-1]"},{"question":"Create a function that takes a string of text as input, processes the text to find the most frequently occurring word, and returns that word along with its frequency. Words should be case-insensitive and punctuation should be ignored. If there are multiple words with the same highest frequency, return the one that appears first in alphabetical order. The function should output with: ``` tuple: A tuple containing the most frequent word and its frequency. ``` You should write self-contained code starting with: ``` import string def most_frequent_word(text): ``` Example: - Input: \\"Hello, hello! This is a test. This test is only a test.\\" - Output: (\'test\', 3)","solution":"import string def most_frequent_word(text): Returns the most frequently occurring word in the text and its frequency. Words are case-insensitive and punctuation is ignored. # Convert the text to lowercase text = text.lower() # Remove punctuation text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split text into words words = text.split() # Count the frequency of each word word_counts = {} for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 # Find the most frequent word with the highest count max_frequency = -1 most_frequent_words = [] for word, count in word_counts.items(): if count > max_frequency: max_frequency = count most_frequent_words = [word] elif count == max_frequency: most_frequent_words.append(word) # Return the first word in alphabetical order if there are ties most_frequent_word = min(most_frequent_words) return (most_frequent_word, max_frequency)"},{"question":"**Context:** You are tasked with developing a feature for a game that includes an energy regeneration mechanic. The player\'s energy regenerates over time but is also reduced by certain actions. The goal is to update the player\'s energy considering both regeneration and action consumption in a given time frame. **Task:** Write a function named `update_energy` that modifies the player\'s energy according to a specified regeneration rate, a list of energy-consuming actions, and the time elapsed. The function should ensure that the player\'s energy does not exceed a maximum limit nor fall below zero. **Function Signature:** ```python def update_energy(current_energy: float, max_energy: float, regen_rate: float, actions: List[Dict[str, Union[str, float]]], time_elapsed: float) -> float: ``` **Inputs:** 1. `current_energy`: A float representing the current energy level of the player. 2. `max_energy`: A float representing the maximum energy limit of the player. 3. `regen_rate`: A float representing the energy regeneration rate per second. 4. `actions`: A list of dictionaries, each representing an action performed by the player. Each dictionary contains: - `\'name\'`: A string representing the name of the action. - `\'consumption\'`: A float representing the energy consumed by this action. 5. `time_elapsed`: A float representing the time elapsed in seconds. **Outputs:** - A float representing the updated energy level of the player. **Example:** Suppose: ```python current_energy = 50.0 max_energy = 100.0 regen_rate = 2.0 actions = [{\'name\': \'jump\', \'consumption\': 5.0}, {\'name\': \'dash\', \'consumption\': 10.0}] time_elapsed = 10.0 ``` Your function should calculate the updated energy after applying regeneration and deducting action consumption. An example output could be: ```python 75.0 # Assuming the regeneration and consumption calculations result in this value ``` **Guidelines:** 1. Regenerate energy based on the `regen_rate` and `time_elapsed`. 2. Deduct the total energy consumed by all actions listed in `actions`. 3. Ensure the final energy level does not exceed `max_energy` nor drop below 0. 4. Consider edge cases such as no actions being performed or the current energy already being at the maximum or zero. **Important Note:** Handle scenarios gracefully where multiple actions may deplete the energy significantly, ensuring it doesn\'t drop below zero.","solution":"from typing import List, Dict, Union def update_energy(current_energy: float, max_energy: float, regen_rate: float, actions: List[Dict[str, Union[str, float]]], time_elapsed: float) -> float: Update the player\'s energy by considering regeneration and action consumption within a given time frame. Args: - current_energy (float): Current energy level of the player. - max_energy (float): Maximum energy limit of the player. - regen_rate (float): Energy regeneration rate per second. - actions (List[Dict[str, Union[str, float]]]): List of energy-consuming actions. - time_elapsed (float): Time elapsed in seconds. Returns: - float: Updated energy level of the player. # Calculate total energy regenerated over time_elapsed energy_regenerated = regen_rate * time_elapsed # Sum up the total energy consumed by all actions total_consumption = sum(action[\'consumption\'] for action in actions) # Calculate the new energy level new_energy = current_energy + energy_regenerated - total_consumption # Ensure the new energy level does not exceed max_energy nor fall below zero new_energy = min(max(new_energy, 0), max_energy) return new_energy"},{"question":"You are required to write a function named `filter_top_scores` which takes a Pandas DataFrame and an integer `n` as inputs and returns a new DataFrame containing the top `n` rows based on the values in the \'score\' column. The function should perform the following steps: 1. Sort the input DataFrame based on the \'score\' column in descending order. 2. Select the top `n` rows from the sorted DataFrame. 3. Return the new DataFrame which contains only these top `n` rows. The input DataFrame is assumed to contain a \'score\' column with numerical values. You are expected to use Pandas sorting and selection functions. Hint: Use `sort_values` and `head` methods of a Pandas DataFrame. **Function Signature:** ```python def filter_top_scores(df: pd.DataFrame, n: int) -> pd.DataFrame: pass ``` Example: ```python data = {\'name\': [\'Alice\', \'Bob\', \'Charlie\', \'David\'], \'score\': [85, 95, 78, 90]} df = pd.DataFrame(data) top_scores_df = filter_top_scores(df, 3) print(top_scores_df) # Expected output: # name score # 1 Bob 95 # 3 David 90 # 0 Alice 85 ```","solution":"import pandas as pd def filter_top_scores(df: pd.DataFrame, n: int) -> pd.DataFrame: Returns the top n rows based on the \'score\' column from the given DataFrame sorted in descending order. Params: df: pd.DataFrame - The input DataFrame containing a \'score\' column with numerical values. n: int - The number of top rows to return. Returns: pd.DataFrame - New DataFrame containing top n rows sorted by \'score\' in descending order. sorted_df = df.sort_values(by=\'score\', ascending=False) top_n_df = sorted_df.head(n) return top_n_df"},{"question":"Write a function that takes a URL of a webpage, fetches the HTML content, and extracts all unique email addresses found within the content. The function should log the number of emails found and the time taken to complete the extraction process using Python\'s logging module. The logging output should include INFO level logs for the start of the extraction and DEBUG level logs for the extracted emails and timing details. The function should return with: set: A set containing all unique email addresses found. You should write self-contained code starting with: ``` import logging import requests import re import time def extract_emails_from_webpage(url): ```","solution":"import logging import requests import re import time def extract_emails_from_webpage(url): Fetches the HTML content from the given URL, extracts unique email addresses, and logs the number of emails found and the time taken to complete the extraction process. Args: url (str): The URL of the webpage to fetch and extract emails from. Returns: set: A set of unique email addresses found within the HTML content. logging.basicConfig(level=logging.DEBUG) logger = logging.getLogger(__name__) logger.info(\\"Starting email extraction from the URL: %s\\", url) start_time = time.time() try: response = requests.get(url) response.raise_for_status() html_content = response.text # Regex for extracting emails email_pattern = r\'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}\' emails = set(re.findall(email_pattern, html_content)) end_time = time.time() logger.debug(\\"Extracted emails: %s\\", emails) logger.info(\\"Number of unique emails found: %d\\", len(emails)) logger.debug(\\"Time taken for extraction: %.2f seconds\\", end_time - start_time) return emails except requests.RequestException as e: logger.error(\\"Error fetching the URL: %s\\", e) return set()"},{"question":"You are given a text file containing multiple paragraphs of text. Your task is to read the file and perform the following operations: 1. Count the total number of words in the file. 2. Identify and count the frequency of each word in the file. 3. Find the top 5 most frequent words and their respective counts. 4. Write these top 5 words and their counts to a new text file named `top_words.txt`. Please ensure that word counting is case-insensitive, and punctuation is ignored. **Assume the input file is named `input.txt`.** **Function Signature:** ```python def analyze_text_file(): pass ``` # Example **Given `input.txt`:** ``` Hello world! This is a test. Hello again. This test is simple. Simple test. ``` **Expected Output in `top_words.txt`:** ``` hello: 2 test: 3 this: 2 is: 2 simple: 2 ``` **Requirements:** - Read the contents of `input.txt`. - Count words case-insensitively. - Ignore punctuation when counting words. - Output the top 5 most frequent words in `top_words.txt` in descending order of frequency. If there is a tie, order by the word\'s appearance in the text.","solution":"import re from collections import Counter def analyze_text_file(): # Read the contents of the input file with open(\'input.txt\', \'r\') as file: text = file.read() # Remove punctuation and make all words lowercase words = re.findall(r\'bw+b\', text.lower()) # Count the frequency of each word word_counts = Counter(words) # Find the top 5 most frequent words top_words = word_counts.most_common(5) # Write the top words and their counts to top_words.txt with open(\'top_words.txt\', \'w\') as file: for word, count in top_words: file.write(f\'{word}: {count}n\')"},{"question":"You are given a list of strings where each string represents a date in the format \\"Month day, year\\". Your task is to write a function that converts these strings into a list of `datetime` objects, sorted in chronological order. Your task is to write a function: ```python def sort_dates(dates: list) -> list: # Your code here ``` The `sort_dates` function should: 1. Use the `datetime` library to parse the date strings into `datetime` objects. 2. Sort the list of `datetime` objects in ascending order. 3. Return the sorted list of `datetime` objects. Make sure to handle edge cases such as invalid date formats or impossible dates gracefully. # Example: ```python dates = [\\"December 31, 2020\\", \\"January 1, 2021\\", \\"November 10, 2020\\"] result = sort_dates(dates) print(result) ``` Expected Output: ```python [datetime.datetime(2020, 11, 10, 0, 0), datetime.datetime(2020, 12, 31, 0, 0), datetime.datetime(2021, 1, 1, 0, 0)] ``` # Note: - Assume the input list will always contain non-empty strings. - If any date string is in an incorrect format, you may ignore that particular string. - The month names will always be capitalized properly (e.g., \\"January\\", not \\"january\\").","solution":"from datetime import datetime def sort_dates(dates: list) -> list: Converts a list of date strings into datetime objects and sorts them in chronological order. Args: dates (list): List of date strings in the format \\"Month day, year\\". Returns: list: List of datetime objects sorted in ascending order. date_objects = [] for date in dates: try: date_object = datetime.strptime(date, \\"%B %d, %Y\\") date_objects.append(date_object) except ValueError: # Skip invalid date formats continue sorted_date_objects = sorted(date_objects) return sorted_date_objects"},{"question":"You are required to write a function named `order_entry_to_json` which will allow users to add information about a product order to a JSON file. The function should perform the following operations: 1. Prompt the user to enter the product name. 2. Prompt the user to enter the quantity of the product ordered. 3. Prompt the user to enter the price per unit of the product. 4. Read an existing dictionary from a file named `orders.json`, which may or may not exist initially. 5. Add the new entry (product name, quantity, and price) to the dictionary, using the product name as the key and a dictionary containing the quantity and price as the value. 6. Write the updated dictionary back to the `orders.json` file. 7. Read the dictionary again from `orders.json` to confirm the changes. 8. Print the updated dictionary. Requirements: - Use the `json.load` function to read the JSON data from the file. - Use the `json.dump` function to write JSON data to the file. - Handle the case where the file does not exist initially. Here is a code template for the function: ```python import json import os def order_entry_to_json(): # Prompt the user to enter the product name. product_name = input(\\"Enter the product name: \\") # Prompt the user to enter the quantity. quantity = int(input(\\"Enter the quantity: \\")) # Prompt the user to enter the price per unit. price = float(input(\\"Enter the price per unit: \\")) # Initialize an empty dictionary to hold the existing data. orders = {} # Check if the \'orders.json\' file exists. if os.path.exists(\'orders.json\'): with open(\'orders.json\', \'r\') as file: # Read the existing dictionary from \'orders.json\'. orders = json.load(file) # Add the new entry (product name, quantity, and price) to the dictionary. orders[product_name] = {\'quantity\': quantity, \'price\': price} # Write the updated dictionary back to \'orders.json\'. with open(\'orders.json\', \'w\') as file: json.dump(orders, file) # Read the dictionary again from \'orders.json\'. with open(\'orders.json\', \'r\') as file: updated_data = json.load(file) # Print the updated dictionary. print(\\"Updated Dictionary is {}\\".format(updated_data)) ```","solution":"import json import os def order_entry_to_json(): This function allows the user to enter a product order and stores it in a JSON file. # Prompt the user to enter the product name. product_name = input(\\"Enter the product name: \\") # Prompt the user to enter the quantity. quantity = int(input(\\"Enter the quantity: \\")) # Prompt the user to enter the price per unit. price = float(input(\\"Enter the price per unit: \\")) # Initialize an empty dictionary to hold the existing data. orders = {} # Check if the \'orders.json\' file exists. if os.path.exists(\'orders.json\'): with open(\'orders.json\', \'r\') as file: # Read the existing dictionary from \'orders.json\'. orders = json.load(file) # Add the new entry (product name, quantity, and price) to the dictionary. orders[product_name] = {\'quantity\': quantity, \'price\': price} # Write the updated dictionary back to \'orders.json\'. with open(\'orders.json\', \'w\') as file: json.dump(orders, file, indent=4) # Read the dictionary again from \'orders.json\'. with open(\'orders.json\', \'r\') as file: updated_data = json.load(file) # Print the updated dictionary. print(\\"Updated Dictionary is:\\") print(updated_data)"},{"question":"You are developing a simple banking system where users can perform operations such as deposit, withdraw, and check their account balance. Your task is to design a class named `BankAccount` that allows these operations to be performed while ensuring certain constraints. Your goal is to write a class `BankAccount` that: 1. Initializes with an account holder\'s name and an initial balance. 2. Can handle deposits by adding to the current balance. 3. Can handle withdrawals by deducting from the balance only if there are sufficient funds. 4. Allows balance inquiry. **Class Definition:** ```python class BankAccount: def __init__(self, account_holder: str, initial_balance: float): # Initializes the class with account_holder name and initial_balance def deposit(self, amount: float) -> None: # Adds the deposit amount to the balance def withdraw(self, amount: float) -> str: # Deducts the withdrawal amount from the balance if there are sufficient funds # Returns a message if the balance is insufficient def get_balance(self) -> float: # Returns the current balance ``` **Instructions:** - Implement the `__init__` method to initialize the account holder\'s name and initial balance. - Implement the `deposit` method to increase the account balance by the specified amount. - Implement the `withdraw` method to decrease the balance only if there are sufficient funds. If not, return a string message `\\"Insufficient funds\\"`. - Implement the `get_balance` method to return the current balance. **Example Usage:** ```python account = BankAccount(\\"John Doe\\", 100.0) account.deposit(50.0) # Balance should be 150.0 print(account.get_balance()) # Should return 150.0 print(account.withdraw(70.0)) # Should return None, balance should be 80.0 print(account.get_balance()) # Should return 80.0 print(account.withdraw(90.0)) # Should return \\"Insufficient funds\\" ```","solution":"class BankAccount: def __init__(self, account_holder: str, initial_balance: float): self.account_holder = account_holder self.balance = initial_balance def deposit(self, amount: float) -> None: self.balance += amount def withdraw(self, amount: float) -> str: if self.balance >= amount: self.balance -= amount else: return \\"Insufficient funds\\" def get_balance(self) -> float: return self.balance"},{"question":"Write a function called `determine_winner` which calculates the winner of a simplified tic-tac-toe game. The board is represented by a list of lists, where each sublist represents a row and each element in the sublist is either \'X\', \'O\', or an empty string to denote empty spaces. The function should: 1. Check all rows, columns, and diagonals to determine if there is a winner. 2. Return \'X\' if the player with \'X\' wins, \'O\' if the player with \'O\' wins, or \'Draw\' if there is no winner and no empty spaces. If the board still has empty spaces but no winner, return \'Pending\'. **Example Input:** ```python board = [ [\'X\', \'O\', \'X\'], [\'O\', \'X\', \'O\'], [\'O\', \'X\', \'X\'] ] ``` **Example Output:** ```python \'X\' ``` **Function signature:** ```python def determine_winner(board: List[List[str]]) -> str: ```","solution":"from typing import List def determine_winner(board: List[List[str]]) -> str: def check_winner(cells: List[str]) -> str: if cells[0] == cells[1] == cells[2] and cells[0] != \'\': return cells[0] return \'\' n = len(board) # Check rows and columns for i in range(n): row_result = check_winner(board[i]) column_result = check_winner([board[j][i] for j in range(n)]) if row_result: return row_result if column_result: return column_result # Check diagonals diag1_result = check_winner([board[i][i] for i in range(n)]) diag2_result = check_winner([board[i][n-i-1] for i in range(n)]) if diag1_result: return diag1_result if diag2_result: return diag2_result # Check for empty spaces for row in board: if \'\' in row: return \'Pending\' return \'Draw\'"},{"question":"**Context:** You are working on a project that includes analyzing the performance of a recommender system. To help understand its behavior better, you need to visualize the accuracy of recommendations as a function of different similarity thresholds. **Task:** Write a function named `plot_recommendation_accuracy` that takes three parameters: - `similarity_thresholds`: A list or numpy array of similarity thresholds used to filter recommendations. - `accuracy_scores`: A list or numpy array containing the accuracy scores of recommendations for each threshold. - `accuracy_std`: A list or numpy array containing the standard deviation of accuracy scores for each threshold. The function should: 1. Create a plot that displays the accuracy scores against the similarity thresholds. 2. Shade the region representing the standard deviation around the accuracy scores. 3. Add a vertical dashed line at the threshold with the highest mean accuracy score. 4. Label both the axes and add a title to the plot for clarity. You are required to use the `matplotlib.pyplot.pyplot.figure`, `matplotlib.pyplot.show`, and `numpy.argmax` functions in your implementation. **Function Signature:** ```python def plot_recommendation_accuracy(similarity_thresholds, accuracy_scores, accuracy_std): pass ``` **Example Usage:** ```python import numpy as np similarity_thresholds = np.linspace(0.1, 1.0, 50) accuracy_scores = np.random.rand(50) # This should be replaced with actual accuracy scores accuracy_std = np.random.rand(50) * 0.05 # Replace with actual std deviations plot_recommendation_accuracy(similarity_thresholds, accuracy_scores, accuracy_std) ```","solution":"import matplotlib.pyplot as plt import numpy as np def plot_recommendation_accuracy(similarity_thresholds, accuracy_scores, accuracy_std): Plots the accuracy of recommendations against similarity thresholds. Parameters: - similarity_thresholds: list or numpy array of similarity thresholds used to filter recommendations. - accuracy_scores: list or numpy array containing the accuracy scores of recommendations for each threshold. - accuracy_std: list or numpy array containing the standard deviation of accuracy scores for each threshold. Returns: - None, this function only plots the graph. # Create a plot plt.figure(figsize=(10, 6)) # Plot accuracy scores against similarity thresholds plt.plot(similarity_thresholds, accuracy_scores, label=\'Accuracy Score\', color=\'b\') # Shade the region representing the standard deviation plt.fill_between(similarity_thresholds, accuracy_scores - accuracy_std, accuracy_scores + accuracy_std, color=\'b\', alpha=0.2) # Add vertical dashed line at the threshold with the highest mean accuracy score max_accuracy_index = np.argmax(accuracy_scores) max_threshold = similarity_thresholds[max_accuracy_index] plt.axvline(x=max_threshold, color=\'r\', linestyle=\'--\', label=\'Max Accuracy Threshold\') # Labeling axes and adding title plt.xlabel(\'Similarity Threshold\') plt.ylabel(\'Accuracy Score\') plt.title(\'Recommendation Accuracy vs. Similarity Threshold\') plt.legend() # Show the plot plt.show()"},{"question":"Create a function that monitors a given directory for any new or modified files. When a new or modified file is detected, compress the file to a \'.zip\' format, move it to a specified backup directory, and log the operation details, including the file name and time of the operation. The function should output: str: A message indicating the number of files compressed and moved during the operation or any error encountered. You should write self-contained code starting with: ``` import os import time import zipfile import shutil def monitor_and_backup(src_directory, backup_directory, log_filename): ```","solution":"import os import time import zipfile import shutil def monitor_and_backup(src_directory, backup_directory, log_filename): Monitors a directory for any new or modified files, compresses the detected files to \'.zip\' format, moves them to the backup directory, and logs the details of the operation. Args: src_directory (str): The source directory to monitor. backup_directory (str): The directory where compressed files are backed up. log_filename (str): The filename where operation details are logged. Returns: str: A message indicating the number of files compressed and moved during the operation or any error encountered. try: if not os.path.exists(backup_directory): os.makedirs(backup_directory) file_count = 0 with open(log_filename, \'a\') as log_file: for dirpath, _, filenames in os.walk(src_directory): for filename in filenames: file_path = os.path.join(dirpath, filename) backup_file_path = os.path.join(backup_directory, filename + \'.zip\') # Check if the file is new or modified by comparing modified timestamps if (not os.path.exists(backup_file_path)) or (os.path.getmtime(file_path) > os.path.getmtime(backup_file_path)): # Compress the file with zipfile.ZipFile(backup_file_path, \'w\') as zipf: zipf.write(file_path, filename) # Log the operation details log_file.write( f\\"{time.strftime(\'%Y-%m-%d %H:%M:%S\')} - {filename} compressed and moved to backup.n\\" ) file_count += 1 return f\\"Total {file_count} files were compressed and moved.\\" except Exception as e: return f\\"Error encountered: {e}\\""},{"question":"In this task, you need to implement a function called `is_subsequence` which checks whether a given string `s` is a subsequence of a string `t`. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. # Function Signature: ```python def is_subsequence(s, t): pass ``` # Parameters: - `s` (str): The string to check as a subsequence. - `t` (str): The target string from which the subsequence is to be checked. # Returns: - `bool`: A boolean value that indicates whether `s` is a subsequence of `t`. # Example: ```python >>> is_subsequence(\\"abc\\", \\"ahbgdc\\") True >>> is_subsequence(\\"axc\\", \\"ahbgdc\\") False ``` # Explanation: In the examples above: - For the input `s` as \\"abc\\" and `t` as \\"ahbgdc\\", the output is `True` because \\"abc\\" can be derived from \\"ahbgdc\\" by removing \\"h\\", \\"g\\", and \\"d\\". - For the input `s` as \\"axc\\" and `t` as \\"ahbgdc\\", the output is `False` because \\"axc\\" cannot be formed from \\"ahbgdc\\" without changing the order of the characters. # Hints: - You can solve this problem using a two-pointer technique. - Iterate through the characters of `t` and check if all characters of `s` can be found sequentially. - Maintain a pointer for the characters of `s` and try to match these characters in the string `t`. This function is useful in various applications such as text processing, database query optimizations, and pattern matching algorithms.","solution":"def is_subsequence(s, t): Checks whether the string `s` is a subsequence of string `t`. t_index = 0 s_index = 0 while t_index < len(t) and s_index < len(s): if t[t_index] == s[s_index]: s_index += 1 t_index += 1 return s_index == len(s)"},{"question":"You are required to implement a function called `longestCommonSubstring` that finds the longest common substring between two given strings. The function should return the longest substring that appears in both strings. If there are multiple substrings of the same maximum length, return any one of them. The function should handle upper and lower case characters as distinct. The function takes two parameters: - `str1`: The first string. - `str2`: The second string. Here is the function signature you should use: ```python def longestCommonSubstring(str1, str2): # your code here ``` Example usage: ```python substring = longestCommonSubstring(\\"abcxyz\\", \\"xyzabc\\") print(f\\"The longest common substring is \'{substring}\'\\") ``` In this example, possible outputs could be \\"abc\\" or \\"xyz\\", as both are longest common substrings of length 3.","solution":"def longestCommonSubstring(str1, str2): Finds the longest common substring between two given strings. Args: str1 (string): The first string. str2 (string): The second string. Returns: string: The longest substring that appears in both strings. If there are multiple substrings of the same maximum length, returns any one of them. m, n = len(str1), len(str2) longest = 0 ending_index = 0 dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > longest: longest = dp[i][j] ending_index = i else: dp[i][j] = 0 return str1[ending_index - longest : ending_index]"},{"question":"Given a string `s` which represents a task list containing characters and digits, where each character (a-z, A-Z) represents a task and each digit represents the priority of the task from 1 to 9. Each task can have multiple priorities, and the priorities are given in a sequence immediately following the task character. You are required to implement the function `parse_task_list`, which takes a task list string `s` and returns a dictionary where the keys are the task characters, and the values are lists of integers representing their priorities. # Function Signature ```python def parse_task_list(s: str) -> dict: ``` # Parameters - `s` (str): A string representing the task list. # Returns - dict: A dictionary with characters as keys and lists of integers as values representing the priorities. # Example ```python s = \\"a12b3c4d56\\" result = parse_task_list(s) ``` `result` should be: ```python { \'a\': [1, 2], \'b\': [3], \'c\': [4], \'d\': [5, 6] } ``` # Constraints - Each task character can have one or more priority digits following it. - The input string will only contain valid task characters and digits. - The input string will have at least one task and one priority digit. # Instructions 1. Parse the provided string `s` to identify tasks and their respective priorities. 2. Ensure each task character is correctly mapped to its list of priority digits. 3. Return the dictionary containing task and priority mappings. # Example ```python s = \\"k987m51h324\\" result = parse_task_list(s) ``` `result` should be: ```python { \'k\': [9, 8, 7], \'m\': [5, 1], \'h\': [3, 2, 4] } ```","solution":"def parse_task_list(s: str) -> dict: Parses the task list string and returns a dictionary with tasks and their priorities. tasks = {} i = 0 while i < len(s): if s[i].isalpha(): task = s[i] i += 1 priorities = [] while i < len(s) and s[i].isdigit(): priorities.append(int(s[i])) i += 1 tasks[task] = priorities return tasks"},{"question":"You are required to write a function `generate_unique_subsets` that generates all unique subsets of a given list of integers. The function should ensure that the subsets returned are unique, meaning that subsets containing the same elements in different orders are considered duplicates and should only be included once. Here are the specific requirements: 1. **Function Name**: `generate_unique_subsets` 2. **Input**: A single list of integers, `nums`, which may contain duplicate elements. 3. **Output**: Return a list of lists, each sublist representing a unique subset of the input list. The subsets can be in any order, but each unique subset must only appear once, regardless of the order of elements within the subset. You can use any method to generate the subsets but must ensure they are unique. **Task**: Write a function `generate_unique_subsets(nums)` that adheres to the following requirements: - Generate all possible subsets of the input list. - Ensure that each subset is unique (duplicates in different orders are not allowed). Example: Suppose `nums = [1, 2, 2]`, the function call would look like: ```python generate_unique_subsets([1, 2, 2]) ``` The expected output could be: ```python [[], [1], [2], [1, 2], [2, 2], [1, 2, 2]] ``` Explanation: - `[]` is the empty subset. - `[1]` is the subset containing just `1`. - `[2]` is the subset containing just `2`. - `[1, 2]` is the subset containing `1` and `2`. - `[2, 2]` is the subset containing two `2`s. - `[1, 2, 2]` is the subset containing `1` and two `2`s. - Note that the subsets `[1, 2]` and `[2, 1]` are considered identical.","solution":"def generate_unique_subsets(nums): Generates all unique subsets of the given list of integers. :param nums: List of integers which may contain duplicates. :return: List of lists representing all unique subsets. def backtrack(start, path): # Convert path to a tuple to ensure uniqueness result.add(tuple(path)) for i in range(start, len(nums)): # Include current number in the subset path.append(nums[i]) backtrack(i + 1, path) # Backtrack and remove the number from the current path path.pop() nums.sort() # Sort the list to handle duplicates result = set() backtrack(0, []) # Convert the result set of tuples back to a list of lists return [list(subset) for subset in sorted(result)]"},{"question":"In this problem, you will implement a function that takes as input a list of tuples representing start and end times of meetings in a day and returns the minimum number of meeting rooms required to accommodate all meetings. The function `min_meeting_rooms(intervals)` should: 1. Accept a list of tuples `intervals`, where each tuple `(start, end)` represents the start and end times of a meeting. 2. Return the minimum number of meeting rooms required to accommodate all the meetings without any overlap. To solve this problem, you may use the following steps: - Extract and sort the start and end times separately. - Use a pointer to traverse the start times and count the ongoing meetings. - Use another pointer to traverse the end times and decrease the count when a meeting ends. - Keep track of the maximum number of concurrent meetings, which will give the number of meeting rooms required. **Examples:** ```python def min_meeting_rooms(intervals): # Extract start and end times and sort them starts = sorted([i[0] for i in intervals]) ends = sorted([i[1] for i in intervals]) start_ptr, end_ptr = 0, 0 used_rooms = 0 max_rooms = 0 # Iterate through all start times while start_ptr < len(starts): if starts[start_ptr] < ends[end_ptr]: used_rooms += 1 start_ptr += 1 else: used_rooms -= 1 end_ptr += 1 max_rooms = max(max_rooms, used_rooms) return max_rooms # Example 1: intervals = [(0, 30), (5, 10), (15, 20)] print(min_meeting_rooms(intervals)) # Output: 2 # Example 2: intervals = [(7, 10), (2, 4)] print(min_meeting_rooms(intervals)) # Output: 1 ``` **Goals:** - Understand how to manage and traverse sorted lists efficiently. - Implement a two-pointer technique to solve the problem. - Ensure the function handles edge cases, such as no meetings or overlapping meetings correctly. **Hint:** Use the sorted start and end times to keep track of the number of overlapping meetings dynamically and the maximum overlap observed will be the number of rooms required.","solution":"def min_meeting_rooms(intervals): if not intervals: return 0 # Extract start and end times and sort them starts = sorted([i[0] for i in intervals]) ends = sorted([i[1] for i in intervals]) start_ptr, end_ptr = 0, 0 used_rooms = 0 max_rooms = 0 # Iterate through all start times while start_ptr < len(starts): if starts[start_ptr] < ends[end_ptr]: used_rooms += 1 start_ptr += 1 else: used_rooms -= 1 end_ptr += 1 max_rooms = max(max_rooms, used_rooms) return max_rooms"},{"question":"You are required to create a Python function called `calculate_statistics` that computes statistical values from a given list of numbers. The goal is to practice working with lists and applying basic statistical calculations like mean, median, and mode. # Function Specification - **Function Name:** `calculate_statistics` - **Parameters:** - `numbers` (list of integers or floats): The list of numbers for which statistical values will be computed. - **Behavior:** - Calculate and return the mean (average) of the numbers. - Calculate and return the median (middle value) of the numbers. If the list has an even number of elements, return the average of the two central numbers. - Calculate and return the mode (most frequent value) of the numbers. If multiple values have the same highest frequency, return a list of those values. # Requirements: 1. Implement the necessary calculations for mean, median, and mode directly within the function without using external libraries. 2. Handle edge cases such as an empty list or a list with only one number. 3. Ensure that your function has appropriate comments for clarity. # Example: ```python def calculate_statistics(numbers): if not numbers: return None, None, None numbers.sort() n = len(numbers) # Mean mean = sum(numbers) / n # Median if n % 2 == 0: median = (numbers[n//2 - 1] + numbers[n//2]) / 2 else: median = numbers[n//2] # Mode frequency = {} for num in numbers: frequency[num] = frequency.get(num, 0) + 1 highest_frequency = max(frequency.values()) mode = [key for key, value in frequency.items() if value == highest_frequency] if len(mode) == 1: mode = mode[0] return mean, median, mode # Example usage: print(calculate_statistics([1, 2, 2, 3, 4])) # Output: (2.4, 2, 2) print(calculate_statistics([1, 1, 2, 3, 3])) # Output: (2.0, 2, [1, 3]) ``` # Notes: - If the input list is empty, return `None, None, None`. - If there is a tie for the mode, return a list of all values that have the highest frequency.","solution":"def calculate_statistics(numbers): Returns the mean, median, and mode of the list of numbers. If the list is empty, returns None, None, None. :param numbers: list of integers or floats :return: tuple (mean, median, mode) if not numbers: return None, None, None # Sorting the numbers numbers.sort() n = len(numbers) # Calculate Mean mean = sum(numbers) / n # Calculate Median if n % 2 == 0: median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2 else: median = numbers[n // 2] # Calculate Mode frequency = {} for num in numbers: frequency[num] = frequency.get(num, 0) + 1 highest_frequency = max(frequency.values()) mode = [key for key, value in frequency.items() if value == highest_frequency] if len(mode) == 1: mode = mode[0] return mean, median, mode"},{"question":"Implement a function to compute the Euclidean distance between two points in a 3D space. The inputs will be two tuples, each containing three floating-point numbers representing the coordinates of the points. The function should return the Euclidean distance rounded to two decimal places. Raise a TypeError if the inputs are not tuples or do not contain exactly three floating-point numbers. The function should raise the exception for: TypeError: If the inputs are not tuples or do not contain exactly three floating-point numbers. The function should output: float: The Euclidean distance between the two points rounded to two decimal places. You should write self-contained code starting with: ``` import math def compute_distance(point1, point2): ```","solution":"import math def compute_distance(point1, point2): Computes the Euclidean distance between two points in a 3D space. Args: point1 (tuple): A tuple containing three floating-point numbers representing the coordinates of the first point. point2 (tuple): A tuple containing three floating-point numbers representing the coordinates of the second point. Returns: float: The Euclidean distance between the two points rounded to two decimal places. Raises: TypeError: If the inputs are not tuples or do not contain exactly three floating-point numbers. if not (isinstance(point1, tuple) and isinstance(point2, tuple)): raise TypeError(\\"Inputs must be tuples.\\") if len(point1) != 3 or len(point2) != 3: raise TypeError(\\"Each tuple must contain exactly three elements.\\") if not all(isinstance(coord, (int, float)) for coord in point1 + point2): raise TypeError(\\"All elements in the tuples must be integers or floating-point numbers.\\") distance = math.sqrt(sum((coord1 - coord2) ** 2 for coord1, coord2 in zip(point1, point2))) return round(distance, 2)"},{"question":"In this problem, you will write a function called `merge_sort` that takes a single argument: a list of integers. This function will implement the merge sort algorithm to sort the list in ascending order. The merge sort algorithm follows the divide-and-conquer approach to break down the list into smaller sublists, sort those sublists, and then merge them back together into a sorted list. Your task is to implement this process from scratch, without using any built-in sorting functions or libraries. Here\'s the problem broken down: 1. `merge_sort(arr: list) -> list`: This function will: - Take a list of integers `arr` as input. - Recursively split the list into halves until each sublist has one element. - Merge each pair of sublists back together in sorted order. - Return the final sorted list. **Input:** - `arr`: A list of integers. **Output:** - The function returns a list of integers sorted in ascending order. **Example:** Suppose the input list is: ``` [38, 27, 43, 3, 9, 82, 10] ``` Running `merge_sort([38, 27, 43, 3, 9, 82, 10])` should return: ``` [3, 9, 10, 27, 38, 43, 82] ``` **Constraints:** - You may assume that the list does not contain any duplicate values. - The function should not modify the original list. - The list length can be up to 10^6 elements.","solution":"def merge_sort(arr): Returns the sorted list using the merge sort algorithm. if len(arr) <= 1: return arr # Helper function to merge two sorted lists def merge(left, right): sorted_list = [] left_index, right_index = 0, 0 # Compare each element of the lists and merge them in sorted order while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_list.append(left[left_index]) left_index += 1 else: sorted_list.append(right[right_index]) right_index += 1 # If there are remaining elements in either left or right, add them to the sorted list sorted_list.extend(left[left_index:]) sorted_list.extend(right[right_index:]) return sorted_list # Split the array into halves and sort each half mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) # Merge the sorted halves return merge(left_half, right_half)"},{"question":"Create a Python function called `find_anagram_pairs` that takes a list of strings and returns a list of pairs of indices representing the positions of the anagram pairs within the input list. Your function `find_anagram_pairs(words)` should: 1. Identify anagram pairs within the provided list of strings. 2. Return a list of tuples, where each tuple represents the indices of two strings that are anagrams of each other. For example, calling `find_anagram_pairs([\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gooegl\\"])` should return `[(0, 1), (0, 2), (1, 2), (3, 4)]` because: - \\"listen\\" and \\"silent\\" are anagrams and are at indices 0 and 1. - \\"listen\\" and \\"enlist\\" are anagrams and are at indices 0 and 2. - \\"silent\\" and \\"enlist\\" are anagrams and are at indices 1 and 2. - \\"google\\" and \\"gooegl\\" are anagrams and are at indices 3 and 4. Requirements: - The function should consider each pair of words only once; hence, if (i, j) is in the output, (j, i) should not be. - Words are case-insensitive, meaning \\"Listen\\" and \\"Silent\\" should be treated as anagrams. Write the function following the above requirements.","solution":"def find_anagram_pairs(words): Returns a list of tuples with indices representing anagram pairs. anagram_pairs = [] lowered_words = [word.lower() for word in words] for i in range(len(lowered_words)): for j in range(i + 1, len(lowered_words)): if sorted(lowered_words[i]) == sorted(lowered_words[j]): anagram_pairs.append((i, j)) return anagram_pairs"},{"question":"Design a function `compute_area(points)` that calculates the area of a polygon given its vertices. You should implement this using the Shoelace formula, which determines the area for a simple polygon whose vertices are described by their coordinates in the 2D plane. The Shoelace formula for the polygon area is: [ text{Area} = 0.5 times left| sum_{i=1}^{n-1} (x_i cdot y_{i+1} - x_{i+1} cdot y_i) + (x_n cdot y_1 - x_1 cdot y_n) right| ] where ( (x_1, y_1), (x_2, y_2), ldots, (x_n, y_n) ) are the coordinates of the vertices. # Function Signature ```python def compute_area(points: List[Tuple[float, float]]) -> float: ``` # Parameters: - **points** (List[Tuple[float, float]]): A list of tuples, with each tuple representing the coordinates ((x, y)) of a vertex. There will be at least 3 vertices since the polygon is simple. # Returns: - **float**: The computed area of the polygon. # Example: ```python def compute_area(points: List[Tuple[float, float]]) -> float: n = len(points) area = 0 for i in range(n): x1, y1 = points[i] x2, y2 = points[(i + 1) % n] area += x1 * y2 - x2 * y1 return abs(area) / 2 print(compute_area([(0, 0), (4, 0), (4, 3), (0, 3)])) # Output: 12.0 ``` # Instructions: - Ensure the function handles any set of vertices correctly as long as they form a simple polygon. - Note that the vertices will be provided in an orderly fashion either clockwise or counterclockwise.","solution":"def compute_area(points): n = len(points) area = 0 for i in range(n): x1, y1 = points[i] x2, y2 = points[(i + 1) % n] area += x1 * y2 - x2 * y1 return abs(area) / 2"},{"question":"In this problem, you will practice working with Pandas DataFrames in Python. Specifically, you\'ll write a function named `calculate_mean_grade` that takes a DataFrame containing students\' grades and returns a DataFrame with an additional column showing the mean grade for each student. # Function Signature ```python def calculate_mean_grade(df): Adds a column \'mean_grade\' to the DataFrame which contains the mean grade for each student. Parameters: df (pandas.DataFrame): A DataFrame where each row represents a student, and each column (except the first one) represents a subject grade. Returns: pandas.DataFrame: The original DataFrame with an additional column \'mean_grade\'. pass ``` # Requirements - The function should use the Pandas library to manipulate the DataFrame. - The mean grade should be calculated across all subject columns for each student. - The original DataFrame should be returned with an additional column named \'mean_grade\'. - The DataFrame will have a structure where the first column is the student name, and the subsequent columns are their grades in different subjects. # Example ```python import pandas as pd data = { \'student_name\': [\'Alice\', \'Bob\', \'Charlie\'], \'math\': [90, 70, 85], \'science\': [95, 80, 78], \'history\': [92, 88, 84] } df = pd.DataFrame(data) result_df = calculate_mean_grade(df) print(result_df) # Output should be # student_name math science history mean_grade # 0 Alice 90 95 92 92.333333 # 1 Bob 70 80 88 79.333333 # 2 Charlie 85 78 84 82.333333 ``` Your task is to write the function `calculate_mean_grade` that fulfills the above requirements.","solution":"import pandas as pd def calculate_mean_grade(df): Adds a column \'mean_grade\' to the DataFrame which contains the mean grade for each student. Parameters: df (pandas.DataFrame): A DataFrame where each row represents a student, and each column (except the first one) represents a subject grade. Returns: pandas.DataFrame: The original DataFrame with an additional column \'mean_grade\'. df[\'mean_grade\'] = df.iloc[:, 1:].mean(axis=1) return df"},{"question":"In many applications, it is important to gather statistics about text documents, such as counting the frequency of each word in a given text. Your task is to write a function named `count_word_frequency` which takes a single parameter `text` - a string containing the text to analyze. The function should return a dictionary where the keys are words and the values are the respective frequencies of those words in the text. Specifically, you are required to write a function that: 1. Normalizes the words by converting all characters to lowercase. 2. Removes punctuation and splits the text into a list of words. 3. Counts the frequency of each word and stores it in a dictionary. 4. Returns the dictionary with word counts. Here is a partially completed function for you to finish: ```python import string def count_word_frequency(text): # Step 1: Convert text to lowercase text = text.lower() # Step 2: Remove punctuation and split text into words translator = str.maketrans(\'\', \'\', string.punctuation) text = text.translate(translator) words = text.split() # Step 3: Count the frequency of each word word_counts = {} for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 # Step 4: Return the dictionary of word counts return word_counts ``` **Important Requirements:** - Normalize all text to lowercase to ensure accurate frequency counts. - Remove punctuation using the `string` module to focus on word frequency. - Ensure the function returns the correct dictionary structure. - Handle input text robustly, considering edge cases like empty strings.","solution":"import string def count_word_frequency(text): Count the frequency of each word in the given text. Parameters: text (str): The text to analyze. Returns: dict: A dictionary with words as keys and their respective frequencies as values. # Step 1: Convert text to lowercase text = text.lower() # Step 2: Remove punctuation and split text into words translator = str.maketrans(\'\', \'\', string.punctuation) text = text.translate(translator) words = text.split() # Step 3: Count the frequency of each word word_counts = {} for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 # Step 4: Return the dictionary of word counts return word_counts"},{"question":"You need to write a function that reshapes a given list of integers into a specified matrix shape. The function should take a list of integers and a tuple specifying the desired matrix shape (rows, columns). The matrix should be filled with the integers from the list row-wise. If there are not enough integers to fill the matrix, the remaining cells should be filled with `None`. If there are more integers than needed, the extra integers should be ignored. Your function will be named `reshape_matrix`. It should use the `numpy` library to create the matrix. The function should return a `numpy.ndarray` that represents the reshaped matrix. Function Signature ```python def reshape_matrix(nums: List[int], shape: Tuple[int, int]) -> np.ndarray: pass ``` Input - `nums` (List[int]): A list of integers to be reshaped into the matrix. - `shape` (Tuple[int, int]): A tuple that specifies the number of rows and columns for the matrix. Output - Returns a `numpy.ndarray` representing the reshaped matrix. Example ```python import numpy as np nums = [1, 2, 3, 4, 5, 6, 7] shape = (3, 3) matrix = reshape_matrix(nums, shape) print(matrix) ``` Expected Output: ``` [[ 1. 2. 3.] [ 4. 5. 6.] [ 7. None None]] ```","solution":"from typing import List, Tuple import numpy as np def reshape_matrix(nums: List[int], shape: Tuple[int, int]) -> np.ndarray: rows, columns = shape matrix = np.full((rows, columns), None) for i in range(min(len(nums), rows * columns)): matrix[i // columns, i % columns] = nums[i] return matrix"},{"question":"You are tasked to implement a binary search algorithm using recursion. Specifically, you are to create a function named `recursive_binary_search` which takes a sorted list of integers and a target value as input, and returns the index of the target if found, or -1 otherwise. The function should employ a helper function that performs the actual recursive search. The search process should follow these steps: - Compare the target value to the middle element of the list. - If the target matches the middle element, return the index. - If the target is less than the middle element, recursively search in the left half. - If the target is greater than the middle element, recursively search in the right half. - If the target is not found, return -1. Your implementation must handle edge cases such as an empty list or a list with one element. Function signature: ```python def recursive_binary_search(arr, target): def search_helper(arr, target, left, right): pass pass ```","solution":"def recursive_binary_search(arr, target): def search_helper(arr, target, left, right): if left > right: return -1 mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] > target: return search_helper(arr, target, left, mid - 1) else: return search_helper(arr, target, mid + 1, right) return search_helper(arr, target, 0, len(arr) - 1)"},{"question":"Create a class `Rectangle` which takes the width and height as input parameters. Implement methods to calculate the area and perimeter of the rectangle. Additionally, implement getter and setter methods for the width and height that ensure both attributes are positive integers, raising a `ValueError` if an attempt is made to set them to non-positive values. You should write self-contained code starting with: ``` class Rectangle: def __init__(self, width, height): ```","solution":"class Rectangle: def __init__(self, width, height): self._width = None self._height = None self.width = width # use the setter self.height = height # use the setter @property def width(self): return self._width @width.setter def width(self, value): if value <= 0: raise ValueError(\\"Width must be a positive integer\\") self._width = value @property def height(self): return self._height @height.setter def height(self, value): if value <= 0: raise ValueError(\\"Height must be a positive integer\\") self._height = value def area(self): return self._width * self._height def perimeter(self): return 2 * (self._width + self._height)"},{"question":"You are tasked with creating a function named `find_substring_indices` that identifies the starting indices of all occurrences of a given substring within a string. The function should take two arguments: the main string `text` and the substring `pattern`. The function should return a list of integers representing the starting indices of each occurrence of `pattern` within `text`. Here are the details and constraints: 1. The function signature is `def find_substring_indices(text: str, pattern: str) -> list:`. 2. The function should handle the case where `pattern` occurs multiple times in `text`. 3. If `pattern` does not occur in `text`, the function should return an empty list. 4. The comparison should be case-sensitive. 5. You are not allowed to use built-in functions like `str.find()` or `str.index()` for this task. Instead, you must implement the logic manually to find the starting indices. Examples: ```python assert find_substring_indices(\\"abracadabra\\", \\"abra\\") == [0, 7] assert find_substring_indices(\\"hello world\\", \\"o\\") == [4, 7] assert find_substring_indices(\\"aaaaa\\", \\"aa\\") == [0, 1, 2, 3] assert find_substring_indices(\\"test\\", \\"xyz\\") == [] assert find_substring_indices(\\"mississippi\\", \\"iss\\") == [1, 4] ``` Implement the `find_substring_indices` function to satisfy the above requirements and example cases.","solution":"def find_substring_indices(text: str, pattern: str) -> list: Identifies the starting indices of all occurrences of a given substring within a string. Args: text (str): The main string to search within. pattern (str): The substring to search for. Returns: list: A list of integers representing the starting indices of each occurrence of the pattern within the text. if not text or not pattern: return [] indices = [] len_text = len(text) len_pattern = len(pattern) for i in range(len_text - len_pattern + 1): if text[i:i+len_pattern] == pattern: indices.append(i) return indices"},{"question":"You have been hired to analyze a sales data spreadsheet and calculate a custom metric for revenue. The data is provided in a CSV file with the following columns: `OrderID`, `ProductID`, `Quantity`, `Price`, and `OrderDate`. Your task is to create a function `calculate_total_revenue` to achieve the following: 1. Read the CSV file into a pandas DataFrame using `pandas.read_csv`. 2. Create a new column `Revenue` which is calculated as `Quantity * Price`. 3. Group the data by `OrderDate` and calculate the total revenue for each unique date. 4. Save the grouped data into a new CSV file with columns `OrderDate` and `TotalRevenue`. # Function Signature: ```python def calculate_total_revenue(sales_data_path: str, result_csv_path: str) -> None: pass ``` # Example: Given: - `sales_data_path`: Path to `sales_data.csv` - `result_csv_path`: Path to the output CSV file ```python calculate_total_revenue(\\"data/sales_data.csv\\", \\"data/total_revenue.csv\\") ``` # Expected Actions: - Read the sales data CSV file. - Calculate revenue for each row. - Group the data by `OrderDate` and calculate the total revenue per day. - Save the results to a new CSV file. # Required Libraries: - `pandas` # Note: Ensure that the output CSV file contains grouped data by unique `OrderDate` with correctly calculated `TotalRevenue`.","solution":"import pandas as pd def calculate_total_revenue(sales_data_path: str, result_csv_path: str) -> None: # Read the CSV file into a DataFrame sales_data = pd.read_csv(sales_data_path) # Calculate the Revenue as Quantity * Price sales_data[\'Revenue\'] = sales_data[\'Quantity\'] * sales_data[\'Price\'] # Group the data by OrderDate and calculate the total revenue for each date grouped_data = sales_data.groupby(\'OrderDate\').agg(TotalRevenue=(\'Revenue\', \'sum\')).reset_index() # Save the grouped data as a new CSV file grouped_data.to_csv(result_csv_path, index=False)"},{"question":"**You are required to implement a function that simulates a simple encryption and decryption process using a basic shift cipher technique, known as the Caesar Cipher. This type of cipher involves shifting each letter in the plaintext by a fixed number of positions in the alphabet. **Function Requirements:** 1. You need to write a function named `caesar_cipher(text, shift)`. 2. The function should take in two parameters: - `text`: A string that needs to be encrypted or decrypted. - `shift`: An integer that determines the number of positions by which letters in the text are shifted. A positive shift means shifting to the right, and a negative shift means shifting to the left. 3. The function should return the resulting encrypted or decrypted text. **Details:** - Only alphabetic characters (\'a\' to \'z\' and \'A\' to \'Z\') should be shifted. - Other characters (such as punctuation, spaces, digits) should remain unchanged. - The function should handle both uppercase and lowercase letters correctly, preserving the case after shifting. - The alphabet wraps around, meaning that shifting \'z\' by 1 results in \'a\', and shifting \'a\' by -1 results in \'z\'. **Example Calls:** ```python caesar_cipher(\\"Hello, World!\\", 3) ``` Output: `\\"Khoor, Zruog!\\"` ```python caesar_cipher(\\"Khoor, Zruog!\\", -3) ``` Output: `\\"Hello, World!\\"` **Hints:** - Use the `ord` function to convert between characters and their corresponding ASCII values. - The `chr` function can be used to convert ASCII values back to characters. - Handle the wrap-around using modulo arithmetic.","solution":"def caesar_cipher(text, shift): Encrypts or decrypts a given text using Caesar Cipher technique. result = [] for char in text: if char.isalpha(): ascii_offset = ord(\'A\') if char.isupper() else ord(\'a\') shifted_char = chr(((ord(char) - ascii_offset + shift) % 26) + ascii_offset) result.append(shifted_char) else: result.append(char) return \'\'.join(result)"},{"question":"Write a function that takes a string of words separated by spaces and returns the length of the shortest word(s). The function should ignore non-alphabetic characters and consider only the lengths of actual words. If there are multiple words of the same shortest length, it should return the length value only once. You should write self-contained code starting with: ``` import re def shortest_word_length(sentence): ```","solution":"import re def shortest_word_length(sentence): Returns the length of the shortest word(s) in the sentence. Ignores non-alphabetic characters and considers only the lengths of actual words. # Remove all non-alphabetic characters except spaces, and split sentence into words words = re.findall(r\'b[a-zA-Z]+b\', sentence) if not words: return 0 # Find the length of the shortest word(s) shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"** You are given a dataset that tracks the sales performance of various products across different regions, with columns for region, product, date, sales, and returns. Your task is to write a function called `process_sales_data(file_path)` that: 1. Reads the data from a CSV file located at `file_path`. 2. Adds two new columns to the DataFrame: `net_sales` and `returns_percentage`, initialized to zero. 3. For each product within each region, calculates the net sales (sales - returns) and the percentage of returns relative to sales. 4. Renames several columns to more descriptive names and adds three additional columns with constant values: - `COUNTRY_CODE` with value `\'US\'` - `COUNTRY_NAME` with value `\'United States\'` - `DATA_SOURCE` with value `\'Company Sales Database\'` 5. Returns the modified DataFrame. The structure of the input DataFrame is assumed to be as follows: ``` | region | product | date | sales | returns | |--------|---------|------------|-------|---------| | ... | ... | ... | ... | ... | ``` You should use the `pandas` library for reading the CSV file and manipulating the DataFrame. Make sure the resulting DataFrame contains the following columns: ``` | REGION_NAME | PRODUCT_NAME | REPORT_DATE | SALES_AMOUNT | RETURNS_AMOUNT | NET_SALES | RETURNS_PERCENTAGE | COUNTRY_CODE | COUNTRY_NAME | DATA_SOURCE | |-------------|--------------|-------------|--------------|----------------|-----------|--------------------|--------------|--------------|-------------| | ... | ... | ... | ... | ... | ... | ... | \'US\' | \'United States\' | \'Company Sales Database\' | ``` **Function Signature:** ```python def process_sales_data(file_path: str) -> pd.DataFrame: pass ``` **Example:** Suppose `sales_data.csv` contains the following data: ``` region,product,date,sales,returns North,Widget,2023-01-01,100,5 North,Widget,2023-01-02,150,10 North,Gadget,2023-01-01,200,15 South,Widget,2023-01-01,250,25 South,Gadget,2023-01-02,300,20 ``` Calling `process_sales_data(\\"sales_data.csv\\")` should return: ``` REGION_NAME,PRODUCT_NAME,REPORT_DATE,SALES_AMOUNT,RETURNS_AMOUNT,NET_SALES,RETURNS_PERCENTAGE,COUNTRY_CODE,COUNTRY_NAME,DATA_SOURCE North,Widget,2023-01-01,100,5,95,5.0,US,United States,Company Sales Database North,Widget,2023-01-02,150,10,140,6.67,US,United States,Company Sales Database North,Gadget,2023-01-01,200,15,185,7.5,US,United States,Company Sales Database South,Widget,2023-01-01,250,25,225,10.0,US,United States,Company Sales Database South,Gadget,2023-01-02,300,20,280,6.67,US,United States,Company Sales Database ``` **","solution":"import pandas as pd def process_sales_data(file_path: str) -> pd.DataFrame: Processes the sales data from the CSV file located at file_path. Args: file_path (str): Path to the CSV file containing the sales data. Returns: pd.DataFrame: Processed DataFrame with additional columns and transformations. # Read the data from the CSV file df = pd.read_csv(file_path) # Add two new columns df[\'NET_SALES\'] = df[\'sales\'] - df[\'returns\'] df[\'RETURNS_PERCENTAGE\'] = (df[\'returns\'] / df[\'sales\'] * 100).round(2) # Rename columns df.rename(columns={\'region\': \'REGION_NAME\', \'product\': \'PRODUCT_NAME\', \'date\': \'REPORT_DATE\', \'sales\': \'SALES_AMOUNT\', \'returns\': \'RETURNS_AMOUNT\'}, inplace=True) # Add constant columns df[\'COUNTRY_CODE\'] = \'US\' df[\'COUNTRY_NAME\'] = \'United States\' df[\'DATA_SOURCE\'] = \'Company Sales Database\' return df"},{"question":"You are asked to create a Python function to manage and analyze data from an e-commerce platform. The function will track the number of units sold for various products over a given period and identify the top-performing products. Using the `pandas` library, you need to read and process data, compute the total sales, and plot the top-selling products. Write a function `track_sales_and_plot(filename, start_date, end_date, top_n)` to read a CSV file containing sales data, filter sales within the specified date range, compute the total quantity sold for each product, and plot the top N products by total sales. The function should: 1. Take the following inputs: - `filename`: string, the name of the CSV file containing sales data. - `start_date`: string, the start date in the format \'YYYY-MM-DD\'. - `end_date`: string, the end date in the format \'YYYY-MM-DD\'. - `top_n`: integer, the number of top-selling products to plot. 2. The CSV file will have the following columns: - `date`: string, the date of the sale in the format \'YYYY-MM-DD\'. - `product`: string, the name of the product. - `quantity`: integer, the number of units sold. 3. Use `pandas` to: - Read the CSV file into a DataFrame. - Convert the `date` column to datetime format. - Filter the DataFrame for rows where the `date` is within the `start_date` and `end_date` range. - Group by `product` and sum the `quantity` sold. - Sort the grouped data by total quantity sold in descending order. - Select the top N products by total sales. 4. Plot the top N products using `matplotlib.pyplot.bar`: - Plot the product names on the x-axis and total quantities on the y-axis. - Set the x-axis label, y-axis label, a title for the plot, and enable the grid. - Rotate the x-axis labels for better readability if necessary. 5. Finally, display the plot using `matplotlib.pyplot.show()`. **Function Signature:** ```python def track_sales_and_plot(filename, start_date, end_date, top_n): pass ``` **Example Usage:** ```python track_sales_and_plot( filename=\\"sales_data.csv\\", start_date=\\"2023-01-01\\", end_date=\\"2023-06-30\\", top_n=5 ) ```","solution":"import pandas as pd import matplotlib.pyplot as plt def track_sales_and_plot(filename, start_date, end_date, top_n): Reads sales data from a CSV file, filters data within the specified date range, computes total quantity sold for each product, and plots the top N products by total sales. Parameters: filename (str): The name of the CSV file containing sales data. start_date (str): The start date in the format \'YYYY-MM-DD\'. end_date (str): The end date in the format \'YYYY-MM-DD\'. top_n (int): The number of top-selling products to plot. Returns: None # Read the CSV file into a DataFrame df = pd.read_csv(filename) # Convert the \'date\' column to datetime format df[\'date\'] = pd.to_datetime(df[\'date\']) # Filter the DataFrame for rows where \'date\' is within the start_date and end_date range mask = (df[\'date\'] >= start_date) & (df[\'date\'] <= end_date) filtered_df = df.loc[mask] # Group by \'product\' and sum the \'quantity\' sold grouped_df = filtered_df.groupby(\'product\', as_index=False).agg({\'quantity\':\'sum\'}) # Sort the grouped data by total quantity sold in descending order sorted_df = grouped_df.sort_values(by=\'quantity\', ascending=False) # Select the top N products by total sales top_products = sorted_df.head(top_n) # Plot the top N products plt.figure(figsize=(10, 6)) plt.bar(top_products[\'product\'], top_products[\'quantity\'], color=\'skyblue\') plt.xlabel(\'Product\') plt.ylabel(\'Total Quantity Sold\') plt.title(f\'Top {top_n} Selling Products from {start_date} to {end_date}\') plt.xticks(rotation=45) plt.grid(axis=\'y\') plt.show()"},{"question":"You are given a list of integers, and you need to determine whether it is possible to partition this list into two subsets such that the sum of the elements in both subsets is equal. Write a Python function named `can_partition` that takes a list of integers as input and returns `True` if such a partition exists, and `False` otherwise. The function should utilize dynamic programming to solve the problem efficiently. The approach should involve creating a boolean DP array that helps track whether a subset with a certain sum can be formed using the elements of the list. Use the following structure for the function: ```python def can_partition(nums): # Your code here ``` Example: ```python print(can_partition([1, 5, 11, 5])) # Output: True (The list can be partitioned as [1, 5, 5] and [11]) print(can_partition([1, 2, 3, 5])) # Output: False (The list cannot be partitioned into two subsets with equal sum) ``` # Constraints: - The input list will contain non-negative integers. - The length of the input list will be between 1 and 200. - The sum of elements in the input list will not exceed 10,000.","solution":"def can_partition(nums): Determines if the list can be partitioned into two subsets with equal sum using dynamic programming. total_sum = sum(nums) # If the total sum is odd, it can\'t be split into two equal subsets if total_sum % 2 != 0: return False subset_sum = total_sum // 2 n = len(nums) # Create a DP array to store solutions to sub-problems dp = [False] * (subset_sum + 1) dp[0] = True for num in nums: for i in range(subset_sum, num - 1, -1): if dp[i - num]: dp[i] = True return dp[subset_sum]"},{"question":"You have been tasked with implementing a function to perform matrix operations such as addition, subtraction, and multiplication using the NumPy library in Python. The function must be named `matrix_operation` and should take three arguments: 1. `operation` (str): A string specifying the type of operation to perform. It can be one of `\\"add\\"`, `\\"subtract\\"`, or `\\"multiply\\"`. 2. `matrix1` (numpy.ndarray): A 2-D NumPy array representing the first matrix. 3. `matrix2` (numpy.ndarray): A 2-D NumPy array representing the second matrix. The function should return a new matrix resulting from the specified operation. The function should also handle any invalid `operation` value by exiting the program gracefully using `sys.exit()` with a meaningful error message. - For the `\\"add\\"` operation, perform element-wise addition: [ C_{ij} = A_{ij} + B_{ij} ] - For the `\\"subtract\\"` operation, perform element-wise subtraction: [ C_{ij} = A_{ij} - B_{ij} ] - For the `\\"multiply\\"` operation, perform matrix multiplication: [ C_{ik} = sum_j (A_{ij} times B_{jk}) ] Make sure to utilize the following NumPy functions in your implementation: `numpy.add`, `numpy.subtract`, `numpy.matmul`. Also, use `sys.exit` for error handling. **Example Usage:** ```python import numpy as np matrix1 = np.array([[1, 2], [3, 4]]) matrix2 = np.array([[5, 6], [7, 8]]) result = matrix_operation(\\"add\\", matrix1, matrix2) print(result) # Output: # [[ 6 8] # [10 12]] result = matrix_operation(\\"subtract\\", matrix1, matrix2) print(result) # Output: # [[-4 -4] # [-4 -4]] result = matrix_operation(\\"multiply\\", matrix1, matrix2) print(result) # Output: # [[19 22] # [43 50]] ```","solution":"import numpy as np import sys def matrix_operation(operation, matrix1, matrix2): Perform matrix operations such as addition, subtraction, and multiplication. Args: - operation (str): The type of operation (\\"add\\", \\"subtract\\", \\"multiply\\"). - matrix1 (numpy.ndarray): The first matrix. - matrix2 (numpy.ndarray): The second matrix. Returns: - numpy.ndarray: The resulting matrix from the operation. if operation == \\"add\\": return np.add(matrix1, matrix2) elif operation == \\"subtract\\": return np.subtract(matrix1, matrix2) elif operation == \\"multiply\\": return np.matmul(matrix1, matrix2) else: print(f\\"Invalid operation: {operation}\\", file=sys.stderr) sys.exit(1)"},{"question":"In this problem, you are asked to create a function named `optimize_string_transformation` that converts a given string into a target string using the minimum number of operations. An operation is defined as: 1. Insert a character, 2. Delete a character, or 3. Replace a character. Your function should return the minimum number of operations needed to transform the given string into the target string. You are encouraged to use dynamic programming to solve this problem efficiently. # Requirements: 1. **Input**: The function will take two string arguments, `source` and `target`. 2. **Output**: The function should return an integer that represents the minimum number of operations required. # Function Signature: ```python def optimize_string_transformation(source: str, target: str) -> int: ... ``` # Example: ```python # Example 1: source = \\"kitten\\" target = \\"sitting\\" print(optimize_string_transformation(source, target)) # Output: 3 # Explanation: # kitten -> sitten (replace \'k\' with \'s\') # sitten -> sittin (replace \'e\' with \'i\') # sittin -> sitting (insert \'g\') # Example 2: source = \\"flaw\\" target = \\"lawn\\" print(optimize_string_transformation(source, target)) # Output: 2 # Explanation: # flaw -> law (delete \'f\') # law -> lawn (insert \'n\') ``` # Important: - Your solution must handle large strings efficiently. - Consider edge cases (e.g., one or both strings being empty). # Hints: - Utilize a 2D table where `dp[i][j]` represents the edit distance between the first `i` characters of `source` and the first `j` characters of `target`. - Initialize the boundaries of the table properly (i.e., transforming an empty string to a non-empty string and vice versa).","solution":"def optimize_string_transformation(source: str, target: str) -> int: Returns the minimum number of operations needed to transform the source string into the target string. m, n = len(source), len(target) # Create a 2D dp array with (m+1) x (n+1) dimensions dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the dp array for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If source is empty, we need to insert all characters of target elif j == 0: dp[i][j] = i # If target is empty, we need to delete all characters of source else: # If last characters are the same, ignore the last character and recur for the remaining if source[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: # If the last character is different, consider all possibilities and find the minimum dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1])# Replace return dp[m][n]"},{"question":"Write a function to calculate the intersection of two given lists of strings, ignoring case sensitivity. The result should be displayed as a sorted list of unique strings, also in a case-insensitive manner. Your solution should handle the scenario where either of the input lists is empty by returning an empty list. Function signature: ``` def find_intersection(list1, list2): ``` Example: Input: ``` list1 = [\\"apple\\", \\"Banana\\", \\"Cherry\\"] list2 = [\\"banana\\", \\"cherry\\", \\"Date\\", \\"Elderberry\\"] ``` Output: ``` [\'banana\', \'cherry\'] ```","solution":"def find_intersection(list1, list2): Returns the intersection of two lists of strings, ignoring case sensitivity, as a sorted list of unique strings. # Convert both lists to lower case and to sets set1 = set(map(str.lower, list1)) set2 = set(map(str.lower, list2)) # Find intersection intersection = set1.intersection(set2) # Convert intersection to a sorted list return sorted(intersection)"},{"question":"Write a function that takes a list of strings and returns a new list of the same strings, but with all vowels (a, e, i, o, u) removed. Preserve the original order of characters and strings in the list. The function should output with: list: A list of strings with vowels removed. You should write self-contained code starting with: ``` def remove_vowels(input_list): ```","solution":"def remove_vowels(input_list): Given a list of strings, returns a new list with all vowels removed from the strings. :param input_list: List of strings :return: List of strings with vowels removed vowels = \'aeiouAEIOU\' result = [] for string in input_list: new_string = \'\'.join([char for char in string if char not in vowels]) result.append(new_string) return result"},{"question":"You are required to implement a function to evaluate the probability density function (PDF) of a Gaussian (normal) distribution. The function will take three parameters: `x`, `mu`, and `sigma`, representing the data point, the mean, and the standard deviation of the distribution, respectively. The formula for the Gaussian PDF is: [ f(x, mu, sigma) = frac{1}{sigma sqrt{2 pi}} e^{-frac{(x - mu)^2}{2 sigma^2}} ] Here is a detailed description of the function you need to implement: ```python def gaussian_pdf(x, mu, sigma): Calculate the Gaussian probability density function for a given x, mean mu, and standard deviation sigma. :type x: float :param x: The data point at which to evaluate the PDF. :type mu: float :param mu: The mean of the Gaussian distribution. :type sigma: float :param sigma: The standard deviation of the Gaussian distribution. :return: The value of the Gaussian PDF at x. :rtype: float ``` # Requirements: - **Use** `math` or `numpy` to implement the necessary mathematical operations. - **Ensure** that the function correctly calculates the value of the Gaussian PDF. # Constraints: - You can assume that `sigma` is always greater than zero. - Values for `x`, `mu`, and `sigma` are valid floats. **Hint:** Make sure to import the necessary libraries, such as `math` or `numpy`, for computing the exponential and square root functions. # Example: Given the following parameters ```python x = 1.0 mu = 0.0 sigma = 1.0 ``` The function call `gaussian_pdf(x, mu, sigma)` should return the value of the PDF at ( x ).","solution":"import math def gaussian_pdf(x, mu, sigma): Calculate the Gaussian probability density function for a given x, mean mu, and standard deviation sigma. :type x: float :param x: The data point at which to evaluate the PDF. :type mu: float :param mu: The mean of the Gaussian distribution. :type sigma: float :param sigma: The standard deviation of the Gaussian distribution. :return: The value of the Gaussian PDF at x. :rtype: float coef = 1 / (sigma * math.sqrt(2 * math.pi)) exponent = math.exp(-((x - mu) ** 2) / (2 * sigma ** 2)) return coef * exponent"},{"question":"Design a function that takes a string of parentheses and determines if the order of the parentheses is valid. A string of parentheses is considered valid if all parentheses are closed and properly nested. The function should use a stack data structure for the implementation. The function should raise the exception for: ValueError: If the input is not a string or contains characters other than parentheses \\"(){}[]\\". The function should return: bool: True if the input string is valid, else False. You should write self-contained code starting with: ``` def is_valid_parentheses(s): ```","solution":"def is_valid_parentheses(s): Determine if the input string of parentheses is valid. Parameters: s (str): The input string containing only parentheses \\"(){}[]\\". Returns: bool: True if the string is valid, False otherwise. Raises: ValueError: If the input is not a string or contains characters other than parentheses \\"(){}[]\\". if not isinstance(s, str): raise ValueError(\\"Input must be a string.\\") valid_chars = {\'(\', \')\', \'{\', \'}\', \'[\', \']\'} if any(ch not in valid_chars for ch in s): raise ValueError(\\"Input contains invalid characters.\\") stack = [] matching_paren = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_paren: if stack and stack[-1] == matching_paren[char]: stack.pop() else: return False else: stack.append(char) return not stack"},{"question":"You are required to implement a function called `find_common_elements_in_sorted_arrays` that finds the common elements in multiple sorted arrays. Your implementation should take advantage of the sorted property of the arrays to efficiently locate the common elements. **Context:** Given ( k ) sorted arrays of integers, the goal of this problem is to identify the elements that are present in all the arrays. The efficient way to solve this problem leverages the fact that the arrays are sorted. **Function Prototype:** ```python def find_common_elements_in_sorted_arrays(arrays): pass ``` **Parameters:** - `arrays`: A list of k sorted lists of integers. **Returns:** - `common_elements`: A list containing the integers that were found in all the input arrays. **Instructions:** 1. Use pointers to iterate through each of the k sorted arrays simultaneously. 2. Compare the elements pointed to by each pointer to determine if they are equal. 3. If the elements are all equal, add the element to the result list and advance all pointers. 4. If the elements are not all equal, advance the pointer(s) pointing to the smallest element(s). 5. Repeat the process until any one of the pointers reaches the end of its array. 6. The function should return the list of common elements found in all k arrays. **Example:** ```python arrays = [ [1, 2, 3, 4, 5], [2, 4, 5, 6, 7], [0, 2, 4, 5, 8, 9] ] result = find_common_elements_in_sorted_arrays(arrays) # result should be [2, 4, 5] ``` Consider edge cases where one or more arrays may be empty. The result should be an empty list if there are no common elements. Make sure to handle cases with various lengths of arrays efficiently. The expected time complexity of the solution should be (O(n*k)), where (n) is the length of the longest array and (k) is the number of arrays.","solution":"def find_common_elements_in_sorted_arrays(arrays): This function takes a list of sorted integer arrays and returns a list of integers that are common in all arrays. Parameters: arrays (list of list of int): List of sorted integer arrays. Returns: list of int: List of common integers found in all arrays. if not arrays: return [] # Initialize pointers for each array pointers = [0] * len(arrays) common_elements = [] while all(ptr < len(arr) for ptr, arr in zip(pointers, arrays)): # Get the current elements at each pointer current_elements = [arrays[i][pointers[i]] for i in range(len(arrays))] # Check if all current elements are equal if all(ele == current_elements[0] for ele in current_elements): # If equal, add to common_elements and advance all pointers common_elements.append(current_elements[0]) pointers = [p + 1 for p in pointers] else: # If not equal, find the minimum element and move the corresponding pointers min_element = min(current_elements) pointers = [p + (arrays[i][p] == min_element) for i, p in enumerate(pointers)] return common_elements"},{"question":"Implement the function `merge_sorted_lists(lst1, lst2)` that takes two sorted lists `lst1` and `lst2` and merges them into a single sorted list. **Requirements:** 1. The two input lists `lst1` and `lst2` are sorted in non-decreasing order. 2. The function should maintain the sorting order in the merged result. 3. Do not use built-in sorting functions. The function should follow these steps: 1. Initialize an empty list `merged` to store the merged result. 2. Use two pointers, one for each list, to track the current elements being compared. 3. Compare elements at the pointers, append the smaller element to the `merged` list, and move the corresponding pointer forward. 4. If one list is exhausted before the other, append the remaining elements of the other list to `merged`. 5. Return the merged list. **Function Signature:** ```python def merge_sorted_lists(lst1: list, lst2: list) -> list: ``` **Example Usage:** ```python result = merge_sorted_lists([1, 3, 5], [2, 4, 6]) print(result) # Output: [1, 2, 3, 4, 5, 6] ``` **Constraints:** - `lst1` and `lst2` contain only integers. - Both `lst1` and `lst2` are sorted in non-decreasing order. - Length of `lst1` and `lst2` is not more than 10^5.","solution":"def merge_sorted_lists(lst1, lst2): Merges two sorted lists into a single sorted list. merged = [] i, j = 0, 0 while i < len(lst1) and j < len(lst2): if lst1[i] <= lst2[j]: merged.append(lst1[i]) i += 1 else: merged.append(lst2[j]) j += 1 while i < len(lst1): merged.append(lst1[i]) i += 1 while j < len(lst2): merged.append(lst2[j]) j += 1 return merged"},{"question":"You are given a dataset containing information about different houses. The dataset includes both numeric and categorical columns that need to be preprocessed before applying a predictive model for house pricing. Your task is to write a function named `preprocess_and_predict_house_prices` that performs the following steps: 1. **Handling Missing Values**: - For numeric columns, fill missing values with the median of each column. - For categorical columns, fill missing values with the most frequent value of each column. 2. **Encoding Categorical Data**: - Use `pandas.get_dummies` to one-hot encode the categorical columns while dropping the first category to avoid multicollinearity. 3. **Feature Scaling**: - Standardize the numeric columns to have a mean of 0 and a standard deviation of 1 using `sklearn.preprocessing.StandardScaler`. 4. **Model Training**: - Split the data into training and test sets using an 80-20 split. - Use a Linear Regression model from `sklearn.linear_model` to predict house prices. - Train the model on the training set and evaluate its performance on the test set. 5. **Save the Model**: - Save the trained linear regression model to a file named `house_price_model.pkl`. Here is the signature of the function you need to implement: ```python def preprocess_and_predict_house_prices(data, output_model_file=\'house_price_model.pkl\'): Preprocess the data and train a linear regression model to predict house prices. :param data: pd.DataFrame, The input dataset to preprocess and use for training. :param output_model_file: str, The name of the file to save the trained model. :return: None pass ```","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LinearRegression from sklearn.impute import SimpleImputer import joblib def preprocess_and_predict_house_prices(data, output_model_file=\'house_price_model.pkl\'): Preprocess the data and train a linear regression model to predict house prices. :param data: pd.DataFrame, The input dataset to preprocess and use for training. :param output_model_file: str, The name of the file to save the trained model. :return: None # Separate features and target variable X = data.drop(columns=[\'price\']) # Assuming \'price\' is the target variable y = data[\'price\'] # Identify numeric and categorical columns numeric_cols = X.select_dtypes(include=[\'number\']).columns categorical_cols = X.select_dtypes(include=[\'object\', \'category\']).columns # Handling missing values numeric_imputer = SimpleImputer(strategy=\'median\') categorical_imputer = SimpleImputer(strategy=\'most_frequent\') X[numeric_cols] = numeric_imputer.fit_transform(X[numeric_cols]) X[categorical_cols] = categorical_imputer.fit_transform(X[categorical_cols]) # Encoding categorical data X = pd.get_dummies(X, columns=categorical_cols, drop_first=True) # Feature scaling scaler = StandardScaler() X[numeric_cols] = scaler.fit_transform(X[numeric_cols]) # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Model training model = LinearRegression() model.fit(X_train, y_train) # Save the model joblib.dump(model, output_model_file) # Evaluate the model score = model.score(X_test, y_test) print(f\\"Model R^2 score: {score}\\")"},{"question":"You are required to write a function called `modify_and_save_json(json_data, filename)` which takes two parameters: 1. `json_data`: A dictionary representing the content to be saved to the JSON file. 2. `filename`: A string representing the name of the JSON file. Additionally, the function should perform the following operations: 1. Add a new key-value pair to the dictionary: `\\"status\\": \\"processed\\"`. 2. If the dictionary already has a key named `\\"events\\"`, append the string `\\"completed\\"` to the list associated with this key. If the key does not exist, create it and set its value to `[\\"completed\\"]`. 3. Save the modified dictionary to the JSON file specified by `filename`. **Requirements:** - **Use the `json` module to handle the JSON data.** - **Ensure that the JSON data is pretty-printed with an indentation of 4 spaces when saved to the file.** # Example Usage ```python json_data = { \\"name\\": \\"Alice\\", \\"age\\": 30, \\"events\\": [\\"registered\\", \\"logged_in\\"] } filename = \\"user_data.json\\" modify_and_save_json(json_data, filename) ``` After executing the above code, the `user_data.json` file should contain the following contents: ```json { \\"name\\": \\"Alice\\", \\"age\\": 30, \\"events\\": [ \\"registered\\", \\"logged_in\\", \\"completed\\" ], \\"status\\": \\"processed\\" } ```","solution":"import json def modify_and_save_json(json_data, filename): Modify the json_data dictionary and save it to a file with the specified filename. Parameters: json_data (dict): The dictionary to modify and save. filename (str): The name of the JSON file to save the data to. # Add \'status\' key with value \'processed\' json_data[\\"status\\"] = \\"processed\\" # Modify or create \'events\' key if \\"events\\" in json_data: json_data[\\"events\\"].append(\\"completed\\") else: json_data[\\"events\\"] = [\\"completed\\"] # Save the modified dictionary to the JSON file with open(filename, \'w\') as file: json.dump(json_data, file, indent=4)"},{"question":"You are a software engineer working on a project that involves text analysis. One of the requirements is to create a function that can identify and extract all hyperlinks from a given piece of text. A hyperlink is defined as a substring that matches the following format: `[display_text](url)` where `display_text` can be any sequence of characters except the square brackets `[]`, and `url` can be any sequence of characters except the parentheses `()`. To achieve this, you must create a function called `extract_hyperlinks` that takes a single string as input and returns a list of tuples. Each tuple should contain the (display_text, url) extracted from the hyperlink notation found in the input string. # Function Signature: ```python def extract_hyperlinks(text: str) -> list: Extracts all hyperlinks from the given text in the format [display_text](url). Parameters: text (str): The input text containing hyperlinks. Returns: list: A list of tuples where each tuple contains (display_text, url) from the hyperlinks in the input text. ``` # Example: ```python text = \\"Here are some useful links: [Google](https://www.google.com), [GitHub](https://github.com).\\" hyperlinks = extract_hyperlinks(text) print(hyperlinks) # Expected Output: [(\'Google\', \'https://www.google.com\'), (\'GitHub\', \'https://github.com\')] text2 = \\"Visit [Home Page](http://example.com) or contact us at [support page](http://example.com/support).\\" hyperlinks2 = extract_hyperlinks(text2) print(hyperlinks2) # Expected Output: [(\'Home Page\', \'http://example.com\'), (\'support page\', \'http://example.com/support\')] ``` You may use regular expressions to simplify the task of identifying and extracting the hyperlinks from the given text. Ensure that your function handles cases where there are no hyperlinks by returning an empty list.","solution":"import re def extract_hyperlinks(text: str) -> list: Extracts all hyperlinks from the given text in the format [display_text](url). Parameters: text (str): The input text containing hyperlinks. Returns: list: A list of tuples where each tuple contains (display_text, url) from the hyperlinks in the input text. pattern = re.compile(r\'[([^[]]+)]((https?://[^()]+))\') matches = pattern.findall(text) return matches"},{"question":"Develop a Python function `longest_common_subsequence_length(seq1, seq2)` that identifies the length of the longest common subsequence (LCS) between two given sequences. The function should: - Take the following parameters: - `seq1`: A string or list representing the first sequence. - `seq2`: A string or list representing the second sequence. - Return an integer representing the length of the longest common subsequence between the two sequences. Requirements: - Use dynamic programming to solve the problem efficiently. - Ensure the function handles sequences of varying lengths gracefully. - Optimize for both time and space where possible. Example function signature: ```python def longest_common_subsequence_length(seq1, seq2): # Implementation goes here ``` Examples: ```python print(longest_common_subsequence_length(\\"ABCDGH\\", \\"AEDFHR\\")) # Output: 3 (Longest common subsequence is \\"ADH\\") print(longest_common_subsequence_length(\\"ABC\\", \\"AC\\")) # Output: 2 (Longest common subsequence is \\"AC\\") ```","solution":"def longest_common_subsequence_length(seq1, seq2): Returns the length of the longest common subsequence between seq1 and seq2. m, n = len(seq1), len(seq2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if seq1[i - 1] == seq2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You are required to write a Python function named `cluster_points` that assigns each point to a cluster based on the nearest centroid. This function should use the numpy library for vectorized operations and the scipy.spatial library to calculate Euclidean distances. # Function Signature ```python def cluster_points(points: np.ndarray, centroids: np.ndarray) -> np.ndarray: ``` # Parameters - `points` (np.ndarray): A two-dimensional array where each row represents the coordinates of a point in n-dimensional space. - `centroids` (np.ndarray): A two-dimensional array where each row represents the coordinates of a centroid in n-dimensional space. # Returns - (np.ndarray): A one-dimensional array where each element is an integer representing the index of the nearest centroid for the corresponding point in the input array. # Description To assign each point to the nearest centroid, you will need to calculate the distance from each point to each centroid and then determine the nearest centroid for each point. Use the following steps: 1. Calculate the Euclidean distance from each point to each centroid. 2. Find the index of the closest centroid for each point. 3. Return the indices of the nearest centroids. # Example ```python import numpy as np from scipy.spatial import distance # Example usage points = np.array([ [1.0, 2.0], [3.0, 4.0], [5.0, 6.0], [7.0, 8.0] ]) centroids = np.array([ [2.0, 2.0], [6.0, 6.0] ]) assigned_clusters = cluster_points(points, centroids) print(assigned_clusters) # This should output an array like [0, 0, 1, 1] ``` # Requirements - You must use `scipy.spatial.distance.cdist` to calculate the distances. - The clusters returned should be the indices of the nearest centroids. # Hints - Make sure to correctly use the `cdist` function from `scipy.spatial.distance` to compute pairwise distances efficiently. - Validate that both input arrays `points` and `centroids` are of compatible shapes to perform the necessary calculations.","solution":"import numpy as np from scipy.spatial import distance def cluster_points(points: np.ndarray, centroids: np.ndarray) -> np.ndarray: Assign each point to the nearest centroid. Parameters: points (np.ndarray): A two-dimensional array where each row represents the coordinates of a point in n-dimensional space. centroids (np.ndarray): A two-dimensional array where each row represents the coordinates of a centroid in n-dimensional space. Returns: np.ndarray: A one-dimensional array where each element is an integer representing the index of the nearest centroid for the corresponding point in the input array. # Calculate the Euclidean distance from each point to each centroid distances = distance.cdist(points, centroids, \'euclidean\') # Find the index of the closest centroid for each point closest_centroids = np.argmin(distances, axis=1) return closest_centroids"},{"question":"You are tasked with writing a function `reverse_words(s: str) -> str` in Python that reverses the words in a given string. The function should take a single argument `s` which is a string containing words separated by spaces and return a new string with the words in reverse order. The words themselves should not be reversed, only their order should be changed. Requirements: 1. The function should be named `reverse_words`. 2. The function should take a single argument `s` which is a string. 3. The function should return a string with the words in reverse order. 4. Punctuation and capitalization should be preserved as in the original string. 5. Words are defined as sequences of characters separated by spaces. Example: ```python s = \\"hello world\\" print(reverse_words(s)) # Expected output: \\"world hello\\" s = \\"The quick brown fox\\" print(reverse_words(s)) # Expected output: \\"fox brown quick The\\" ```","solution":"def reverse_words(s: str) -> str: Returns a new string with the words in reverse order. words = s.split() reversed_words = \' \'.join(reversed(words)) return reversed_words"},{"question":"You are given two lists of integers `nums1` and `nums2`. Your task is to create a function called `common_element_pairs` that finds all unique pairs of integers `(num1, num2)` such that `num1` is from `nums1` and `num2` is from `nums2`, and the two numbers are the same. If an integer `n` appears multiple times in both lists, you only need to consider it as one unique pair. The function should return a list of tuples representing these pairs. The tuples should be sorted in ascending order based on the integer value. # Function Signature ```python def common_element_pairs(nums1, nums2): Find unique pairs of identical integers from two lists. Parameters: nums1 (List[int]): The first list of integers. nums2 (List[int]): The second list of integers. Returns: List[Tuple[int, int]]: A list of tuples representing the pairs of identical integers that appear in both lists. ``` # Constraints 1. The elements in `nums1` and `nums2` are all integers. 2. Both lists can be of any length, including zero. 3. The integers within the lists can be positive, negative, or zero. # Example If `nums1 = [1, 2, 3, 4, 5]` and `nums2 = [4, 5, 6, 7, 1]`: ```python common_pairs = common_element_pairs([1, 2, 3, 4, 5], [4, 5, 6, 7, 1]) print(common_pairs) # Should output [(1, 1), (4, 4), (5, 5)] ``` # Notes - Ensure that the function handles cases where there are no common elements gracefully, returning an empty list. - The function should be optimized for efficiency, considering the potential large size of the input lists.","solution":"def common_element_pairs(nums1, nums2): Find unique pairs of identical integers from two lists. Parameters: nums1 (List[int]): The first list of integers. nums2 (List[int]): The second list of integers. Returns: List[Tuple[int, int]]: A list of tuples representing the pairs of identical integers that appear in both lists. # Convert both lists to sets to find unique common elements set1 = set(nums1) set2 = set(nums2) # Find the intersection of the two sets common_elements = set1.intersection(set2) # Convert common elements to sorted list of tuples result = sorted((elem, elem) for elem in common_elements) return result"},{"question":"You are developing a simple text editor that allows users to type and manipulate text. One of the features you need to implement is a function that can find and replace all occurrences of a specific word in a given text. Write a Python function named `find_and_replace` that takes three arguments: 1. `text`: A string representing the original text. 2. `find_word`: A string representing the word to find in the text. 3. `replacement`: A string representing the word to replace the found word with. The function should return a new string with all instances of `find_word` replaced by `replacement`. **Function Signature:** ```python def find_and_replace(text: str, find_word: str, replacement: str) -> str: # Your implementation here pass ``` **Input:** - `text`: A string containing the original text. (1 ≤ len(text) ≤ 10^5) - `find_word`: A string containing the word to find. (1 ≤ len(find_word) ≤ 100) - `replacement`: A string containing the word to replace with. (1 ≤ len(replacement) ≤ 100) **Output:** - A new string with all occurrences of `find_word` replaced by `replacement`. **Example:** ```python text = \\"the quick brown fox jumps over the lazy dog\\" find_word = \\"the\\" replacement = \\"a\\" assert find_and_replace(text, find_word, replacement) == \\"a quick brown fox jumps over a lazy dog\\" text = \\"hello world, hello universe\\" find_word = \\"hello\\" replacement = \\"hi\\" assert find_and_replace(text, find_word, replacement) == \\"hi world, hi universe\\" ``` **Constraints:** - The function should handle cases where `find_word` does not exist in `text` gracefully, returning the original `text` without changes. - It should be case-sensitive, matching exact word occurrences.","solution":"def find_and_replace(text: str, find_word: str, replacement: str) -> str: Replaces all occurrences of `find_word` in `text` with `replacement`. Args: text (str): The original text. find_word (str): The word to find in the text. replacement (str): The word to replace the found word with. Returns: str: The text with all occurrences of `find_word` replaced by `replacement`. return text.replace(find_word, replacement)"},{"question":"Write a function named `flatten_dict` that takes a dictionary with nested dictionaries as values and returns a new dictionary with no nested dictionaries. The keys in the flattened dictionary should be a concatenation of all the keys in the nesting path, joined by a specified delimiter. The function should take two arguments: 1. `nested_dict`: The input nested dictionary. 2. `delimiter`: A string used to join nested keys in the final flattened dictionary. The goal of the function is to transform the hierarchical structure of the nested dictionary into a flat dictionary where each key represents the path to the corresponding value in the original dictionary. Constraints: - The nested dictionary may have multiple levels of nesting. - The keys in the dictionary are guaranteed to be strings. - The delimiter should be a non-empty string. Example: ```python nested_dict = { \'a\': { \'b\': { \'c\': 1, \'d\': 2 }, \'e\': 3 }, \'f\': 4 } flatten_dict(nested_dict, \'_\') # Output: {\'a_b_c\': 1, \'a_b_d\': 2, \'a_e\': 3, \'f\': 4} ``` Implement the function following the described behavior.","solution":"def flatten_dict(nested_dict, delimiter): Flattens a nested dictionary into a single level dictionary with concatenated keys. Parameters: nested_dict (dict): The input dictionary to flatten. delimiter (str): The delimiter used to concatenate the keys. Returns: dict: The flattened dictionary with concatenated keys. def _flatten(current_dict, parent_key=\'\'): items = {} for k, v in current_dict.items(): new_key = f\\"{parent_key}{delimiter}{k}\\" if parent_key else k if isinstance(v, dict): items.update(_flatten(v, new_key)) else: items[new_key] = v return items return _flatten(nested_dict)"},{"question":"Given a list of words, find the longest word that can be constructed by concatenating copies of shorter words also present in the list. If no such combination is found, return an empty string. The function should output: string: The longest word that is composed of other words in the list, or an empty string if no such word exists. You should write a self-contained code starting with: ``` def find_longest_word(words): ```","solution":"def find_longest_word(words): Finds the longest word that can be constructed by concatenating copies of shorter words also present in the list. Parameters: words (list): List of words Returns: string: The longest word that is composed of other words in the list # Create a set of words for quick look-up word_set = set(words) # Function to check if a word can be constructed from other words in the set def can_form_word(word): memo = {} def can_form(word): if word in memo: return memo[word] for i in range(1, len(word)): prefix = word[:i] suffix = word[i:] if prefix in word_set and (suffix in word_set or can_form(suffix)): memo[word] = True return True memo[word] = False return False return can_form(word) # Sort words by length in descending order words.sort(key=len, reverse=True) # Check the longest word that can be formed by other words for word in words: word_set.remove(word) if can_form_word(word): return word word_set.add(word) return \\"\\""},{"question":"You are given a text file named `server_log.txt` that resides in the following directory path: `/Users/admin/Documents/server_logs/`. The log file contains multiple lines, where each line records a timestamp and a log message. Each line is formatted as follows: `YYYY-MM-DD hh:mm:ss - log message`. Your task is to write a function named `filter_logs_by_date()` that filters the logs based on a user-specified date and writes the filtered logs to a new file named `filtered_log.txt` in the same directory. The function should perform the following steps: 1. Prompt the user to enter a date in the format `YYYY-MM-DD`. 2. Validate that the input date is correctly formatted. If not, print an error message and terminate the function. 3. Read the contents of the existing `server_log.txt` file. 4. Write all lines from `server_log.txt` that contain the specified date to a new file named `filtered_log.txt`. 5. Print a message indicating how many log entries were written to the new file. # Requirements - Write a function named `filter_logs_by_date()`. - Validate the user input date. - Handle file reading and writing operations using standard file I/O functions. ```python def filter_logs_by_date(): pass ```","solution":"import re from datetime import datetime def filter_logs_by_date(): # Directory and file paths log_dir = \'/Users/admin/Documents/server_logs/\' log_file = log_dir + \'server_log.txt\' output_file = log_dir + \'filtered_log.txt\' # Prompt the user to enter a date user_date = input(\\"Enter a date (YYYY-MM-DD): \\") # Validate the user input date try: validated_date = datetime.strptime(user_date, \\"%Y-%m-%d\\").date() except ValueError: print(\\"Error: Invalid date format. Please enter the date in YYYY-MM-DD format.\\") return # Compile regex pattern for matching lines containing the specified date date_pattern = re.compile(r\'^\' + re.escape(user_date)) # Read the log file, filter lines, and write to the new file try: with open(log_file, \'r\') as infile, open(output_file, \'w\') as outfile: count = 0 for line in infile: if date_pattern.match(line): outfile.write(line) count += 1 print(f\\"{count} log entries were written to \'{output_file}\'\\") except FileNotFoundError: print(f\\"Error: Log file \'{log_file}\' not found.\\") except IOError as e: print(f\\"Error: {e}\\")"},{"question":"You are tasked with writing a function `roman_to_integer(s)` that converts a Roman numeral to an integer. Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D`, and `M`. Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. There are six instances where subtraction is used: - `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. - `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. - `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. The function should take one parameter: 1. `s` (str): A string representing the Roman numeral. The function should return an integer representing the converted Roman numeral. # Usage Input/Output Example For example, given the input `s = \\"MCMXCIV\\"`: - The function call should look like `roman_to_integer(\\"MCMXCIV\\")` - The function should return `1994` # Requirements: - The function should be able to handle Roman numerals up to 3999. # Constraints: - The input string `s` is guaranteed to be a valid Roman numeral. - The length of `s` is between 1 and 15. Write the function `roman_to_integer(s)` that converts a given Roman numeral to an integer following the rules described above.","solution":"def roman_to_integer(s): Converts a Roman numeral string to an integer. roman_to_int = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): current_value = roman_to_int[char] if current_value >= prev_value: total += current_value else: total -= current_value prev_value = current_value return total"},{"question":"In this problem, you are required to write a function that simulates a simplified version of the Game of Life. The game is played on an infinite two-dimensional grid of square cells, each of which is in one of two possible states, live or dead. The state of the grid evolves in steps, according to a set of rules: 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. For this task, you will implement the function `game_of_life(grid: List[List[int]]) -> List[List[int]]` that takes a 2D list `grid` consisting of 0s (representing dead cells) and 1s (representing live cells) as input, and returns the next state of the grid after one step. **Function Specification:** - **Function Name:** `game_of_life` - **Parameters:** - `grid (List[List[int]])`: The input 2D grid as a list of lists of integers. - **Returns:** - `List[List[int]]`: The grid representing the next state after applying the rules of the Game of Life. **Game Rules Implementation:** 1. Loop through each cell of the grid. 2. Calculate the sum of the live neighbors for the current cell. 3. Apply the rules to determine the new state of the cell. 4. Store the results in a new grid to avoid modifying the original grid during computation. **Example:** Let\'s assume `grid` is: ``` grid = [ [0, 1, 0], [0, 0, 1], [1, 1, 1] ] ``` The grid representing the next state under Game of Life rules would be: ``` next_grid = [ [0, 0, 0], [1, 0, 1], [0, 1, 1] ] ```","solution":"from typing import List def game_of_life(grid: List[List[int]]) -> List[List[int]]: if not grid or not grid[0]: return [] rows, cols = len(grid), len(grid[0]) def get_live_neighbors(r, c): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] live_neighbors = 0 for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols: live_neighbors += grid[nr][nc] return live_neighbors new_grid = [[0] * cols for _ in range(rows)] for r in range(rows): for c in range(cols): live_neighbors = get_live_neighbors(r, c) if grid[r][c] == 1: if live_neighbors < 2 or live_neighbors > 3: new_grid[r][c] = 0 else: new_grid[r][c] = 1 else: if live_neighbors == 3: new_grid[r][c] = 1 return new_grid"},{"question":"You are given a function that filters and processes a list of integers based on specific conditions. The function accepts a list of integers and performs the following operations: 1. **Filter the Integers**: Retain only the integers that are even. 2. **Sort the Integers**: Sort the remaining integers in descending order. 3. **Calculate the Sum**: Compute the sum of the sorted integers. 4. **Return Results**: Return a dictionary with the sorted list and the computed sum. The initial function definition is provided below. Modify the function to implement the described operations: ```python def process_numbers(integer_list): Process a list of integers by filtering, sorting, and computing the sum. :param integer_list: List of integers :return: Dictionary with \'sorted_list\' and \'sum\' of the integers # Filter integers retaining only the even ones filtered_integers = [x for x in integer_list if x % 2 == 0] # Sort the integers in descending order sorted_integers = sorted(filtered_integers, reverse=True) # Calculate the sum of the integers sum_integers = sum(sorted_integers) # Return the results return { \'sorted_list\': sorted_integers, \'sum\': sum_integers } ``` # Requirements: 1. Filter the input list to retain only even integers. 2. Sort the filtered integers in descending order. 3. Calculate the sum of the sorted even integers. 4. Ensure the function returns a dictionary with two keys: `sorted_list` containing the sorted integers and `sum` containing their sum. # Example: ```python input_list = [5, 2, 9, 8, 12, 3, 7, 10, 6, 4, 11] result = process_numbers(input_list) print(result) ``` Output: ```python { \'sorted_list\': [12, 10, 8, 6, 4, 2], \'sum\': 42 } ```","solution":"def process_numbers(integer_list): Process a list of integers by filtering, sorting, and computing the sum. :param integer_list: List of integers :return: Dictionary with \'sorted_list\' and \'sum\' of the integers # Filter integers retaining only the even ones filtered_integers = [x for x in integer_list if x % 2 == 0] # Sort the integers in descending order sorted_integers = sorted(filtered_integers, reverse=True) # Calculate the sum of the integers sum_integers = sum(sorted_integers) # Return the results return { \'sorted_list\': sorted_integers, \'sum\': sum_integers }"},{"question":"Write a function `calculate_grocery_cost` that calculates the total cost of groceries based on an input dictionary representing the items and their corresponding prices. The function should also apply discounts based on certain criteria: - If more than 5 different items are bought, apply a 10% discount on the total cost. - If the total cost exceeds 50, before any discount, apply a 15% discount on the total cost. Your task is to: 1. Sum up the costs of items. 2. Apply the 10% discount if more than 5 different items are bought. 3. Apply the 15% discount if the total cost is more than 50 before applying any discount. 4. Ensure to apply only one discount - the one that gives the maximum reduction. *The function signature should be:* ```python def calculate_grocery_cost(groceries): Args: groceries (dict): dictionary where keys are item names and values are their prices Returns: float: Total cost after applying the relevant discount ``` Here\'s an example usage of your function: ```python groceries = { \'apples\': 5.50, \'bread\': 2.25, \'milk\': 3.75, \'cheese\': 4.00, \'chicken\': 9.50, \'pasta\': 1.25, \'banana\': 0.85 } total_cost = calculate_grocery_cost(groceries) print(total_cost) # should print the total cost after the appropriate discount is applied ```","solution":"def calculate_grocery_cost(groceries): Calculate the total cost of groceries, applying the appropriate discount. Args: groceries (dict): dictionary where keys are item names and values are their prices Returns: float: Total cost after applying the relevant discount total_cost = sum(groceries.values()) num_items = len(groceries) # Apply discounts based on the criteria discount_10 = total_cost * 0.10 if num_items > 5 else 0 discount_15 = total_cost * 0.15 if total_cost > 50 else 0 # Apply only the maximum discount max_discount = max(discount_10, discount_15) total_cost -= max_discount return total_cost"},{"question":"Given a matrix of integers, write a function `rotate_matrix` to rotate the matrix clockwise by 90 degrees. The function should modify the input matrix in-place without using any extra space for another matrix. This is a common problem in many computer graphics applications and algorithms, where efficient manipulation of data structures is required. **Function Signature:** ```python def rotate_matrix(matrix): ``` **Parameters:** 1. `matrix` (list of list of int): A square matrix (n x n) of integers. **Returns:** - The function doesn\'t return anything. It modifies the input matrix in-place. # Example: Input: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) ``` Output: ```python matrix = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Constraints: - The function should perform the rotation in-place. - The input matrix will always be a square matrix with dimensions n x n. - The dimensions of the matrix (n) will be in the range [1, 100]. # Hints: 1. You can achieve the rotation by first transposing the matrix and then reversing each row. 2. Transpose a matrix by swapping the element at (i, j) with the element at (j, i). **Example:** ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] # Transpose the matrix # [ # [1, 4, 7], # [2, 5, 8], # [3, 6, 9] # ] # Then reverse each row # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` **Your task:** Implement the `rotate_matrix` function as described.","solution":"def rotate_matrix(matrix): Rotates the input n x n matrix by 90 degrees clockwise in place. Parameters: matrix (list of list of int): The n x n matrix to be rotated. Returns: None n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"You are required to write a Python function that takes two lists of integers and returns a list of integers that represents their element-wise sums. Given the following requirements: 1. The function should be named `element_wise_sum` and accept two parameters: - `list1`: The first list of integers. - `list2`: The second list of integers. 2. The function should iterate over each list and add corresponding elements from both lists. 3. Return a new list containing the sums of the corresponding elements. 4. If the lists have different lengths, append the remaining elements from the longer list to the result. **Function Signature:** ```python def element_wise_sum(list1: list[int], list2: list[int]) -> list[int]: ``` **Example:** ```python # Given list1 = [1, 2, 3] list2 = [4, 5, 6] # Calculate result = element_wise_sum(list1, list2) # Expected Output # [5, 7, 9] print(result) # Should print [5, 7, 9] ``` **Constraints:** - The lists may be of different lengths. - The function should be able to handle empty lists. **Additional Example:** ```python # Given list1 = [1, 2] list2 = [3, 4, 5] # Calculate result = element_wise_sum(list1, list2) # Expected Output # [4, 6, 5] print(result) # Should print [4, 6, 5] # Given list1 = [7, 8, 9, 10] list2 = [1, 2] # Calculate result = element_wise_sum(list1, list2) # Expected Output # [8, 10, 9, 10] print(result) # Should print [8, 10, 9, 10] ``` **Explanation:** - The first example sums elements at the same index positions and results in `[5, 7, 9]`. - For unequal lengths, the remaining elements from the longer list are appended to the result.","solution":"def element_wise_sum(list1, list2): Returns a new list containing the element-wise sums of list1 and list2. If the lists have different lengths, the remaining elements from the longer list are appended. # Determine the length of the shorter list min_length = min(len(list1), len(list2)) # Initialize the result list with element-wise sums of the corresponding elements result = [list1[i] + list2[i] for i in range(min_length)] # Append the remaining elements from the longer list if len(list1) > len(list2): result.extend(list1[min_length:]) else: result.extend(list2[min_length:]) return result"},{"question":"# Educational Objective This problem is designed to help you understand and practice using Python\'s built-in dictionary methods for performing operations on nested dictionaries. These operations are essential for managing and manipulating complex data structures efficiently. # Context and Requirements You are tasked with creating a function that takes a dictionary representing a collection of students and their grades across multiple subjects. The function should compute the average grade for each student and return a new dictionary with the student\'s names as keys and their average grades as values. # Function Specification - **Function Name**: `calculate_average_grades` - **Parameters**: - `grades` (a dictionary): This dictionary has student names as keys, and the value for each key is another dictionary with subject names as keys and the corresponding grades as values (all grades are integers). - **Return**: A dictionary with student names as keys and their average grades as values (floats rounded to two decimal places). # Example ```python grades_dict = { \\"Alice\\": {\\"Math\\": 90, \\"Science\\": 85, \\"History\\": 88}, \\"Bob\\": {\\"Math\\": 70, \\"Science\\": 75, \\"History\\": 72}, \\"Charlie\\": {\\"Math\\": 100, \\"Science\\": 95, \\"History\\": 98} } average_grades = calculate_average_grades(grades_dict) print(average_grades) # Output: {\'Alice\': 87.67, \'Bob\': 72.33, \'Charlie\': 97.67} ``` # Rules 1. Iterate through each student\'s grades dictionary to compute the average grade. 2. Use the `round()` function to round the average to two decimal places. 3. Ensure that the returned dictionary matches the specified format.","solution":"def calculate_average_grades(grades): This function calculates the average grade of each student given a dictionary with student names and their grades across multiple subjects. Parameters: grades (dict): A dictionary where the keys are student names and the values are dictionaries with subjects as keys and grades as values. Returns: dict: A dictionary with student names as keys and their average grades as values. average_grades = {} for student, subjects in grades.items(): total = sum(subjects.values()) count = len(subjects) average_grades[student] = round(total / count, 2) return average_grades"},{"question":"# Multi-Set Manipulation In this problem, you will write a function called `multi_set_operation` that performs union, intersection, and difference operations on two multi-sets. A multi-set is a collection where elements are allowed to appear more than once. The multi-sets will be represented as dictionaries where the keys are the elements and the values are their respective counts. For example: - The multi-set {1, 1, 2, 3, 4} would be represented as `{1: 2, 2: 1, 3: 1, 4: 1}`. - Another multi-set {1, 2, 2, 3} would be represented as `{1: 1, 2: 2, 3: 1}`. # Instructions: 1. Implement the function `multi_set_operation(set1, set2, operation)` where: - `set1` (dict): The first multi-set. - `set2` (dict): The second multi-set. - `operation` (str): The operation to perform. The operation can be one of the following: - `\'union\'`: The resulting multi-set should include the maximum count of each element from both sets. - `\'intersection\'`: The resulting multi-set should include the minimum count of each element present in both sets. - `\'difference\'`: The resulting multi-set should include each element of the first multi-set with its count reduced by the count of the element in the second multi-set, but only if the result is positive. The function should return: - `result` (dict): The resulting multi-set after performing the specified operation. # Example: ```python def multi_set_operation(set1, set2, operation): # Your implementation here # Example multi-sets set1 = {1: 2, 2: 1, 3: 1, 4: 1} set2 = {1: 1, 2: 2, 3: 1} # Union operation result_union = multi_set_operation(set1, set2, \'union\') print(result_union) # Expected output: {1: 2, 2: 2, 3: 1, 4: 1} # Intersection operation result_intersection = multi_set_operation(set1, set2, \'intersection\') print(result_intersection) # Expected output: {1: 1, 2: 1, 3: 1} # Difference operation result_difference = multi_set_operation(set1, set2, \'difference\') print(result_difference) # Expected output: {1: 1, 4: 1} ``` # Expected Output: ```python {1: 2, 2: 2, 3: 1, 4: 1} {1: 1, 2: 1, 3: 1} {1: 1, 4: 1} ```","solution":"def multi_set_operation(set1, set2, operation): Perform union, intersection, and difference operations on two multi-sets. Args: - set1 (dict): The first multi-set. - set2 (dict): The second multi-set. - operation (str): The operation to perform (\'union\', \'intersection\', \'difference\'). Returns: - result (dict): The resulting multi-set after performing the specified operation. result = {} if operation == \'union\': all_keys = set(set1.keys()).union(set(set2.keys())) for key in all_keys: result[key] = max(set1.get(key, 0), set2.get(key, 0)) elif operation == \'intersection\': common_keys = set(set1.keys()).intersection(set(set2.keys())) for key in common_keys: result[key] = min(set1.get(key, 0), set2.get(key, 0)) elif operation == \'difference\': for key in set1: diff = set1.get(key, 0) - set2.get(key, 0) if diff > 0: result[key] = diff return result"},{"question":"You are required to write a function named `find_nth_fibonacci` that computes the N-th Fibonacci number. The N-th Fibonacci number is part of a sequence where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence follows these rules: - `fib(0) = 0` - `fib(1) = 1` - `fib(n) = fib(n-1) + fib(n-2)` for `n >= 2` Your task is to implement the function `find_nth_fibonacci(n)` that: 1. Takes one parameter - `n`, the position of the Fibonacci number to be found. 2. Returns the N-th Fibonacci number. Note that the function should handle non-negative integers for `n` and use an iterative approach to avoid recursion limits for large values of `n`. **Example:** ```python n = 10 print(find_nth_fibonacci(n)) ``` Output: ```plaintext 55 ```","solution":"def find_nth_fibonacci(n): Returns the N-th Fibonacci number using an iterative approach. Parameters: n (int): The position of the Fibonacci number to find. Returns: int: The N-th Fibonacci number. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") elif n == 0: return 0 elif n == 1: return 1 prev_1, prev_2 = 1, 0 for _ in range(2, n + 1): current = prev_1 + prev_2 prev_2 = prev_1 prev_1 = current return prev_1"},{"question":"Create a function named `running_total` that calculates the running total of a list of integers. The running total is a new list where each element at index `i` is the sum of the elements from index `0` to `i` in the original list. Your function should have a single parameter: - `numbers`: List of integers for which the running total should be calculated. The function should: 1. Calculate the running total for the input list. 2. Return a new list which represents the running total. Example: ```python def running_total(numbers): result = [] total = 0 for number in numbers: total += number result.append(total) return result numbers = [1, 2, 3, 4] print(running_total(numbers)) # Output: [1, 3, 6, 10] ``` In this example, the running total is calculated as follows: - 1 (just the first element) - 1 + 2 = 3 (sum of the first two elements) - 1 + 2 + 3 = 6 (sum of the first three elements) - 1 + 2 + 3 + 4 = 10 (sum of all four elements)","solution":"def running_total(numbers): Returns the running total of the given list of numbers. result = [] total = 0 for number in numbers: total += number result.append(total) return result"},{"question":"--- You are to write a function in Python that determines whether a given square matrix is symmetric. A symmetric matrix is one that is equal to its transpose. You should use the Numpy library, specifically the `numpy.array_equal` and `numpy.transpose` functions. # Function Signature ```python def is_symmetric(matrix: np.ndarray) -> bool: Check if a square matrix is symmetric. Parameters: matrix (np.ndarray): A numpy array representing a square matrix. Returns: bool: `True` if the matrix is symmetric, `False` otherwise. ``` # Requirements 1. **Numpy Library**: Use the `numpy.transpose` function to obtain the transpose of the matrix. 2. **Numpy Library**: Use the `numpy.array_equal` function to compare the original matrix with its transpose. # Inputs - `matrix`: A `numpy.ndarray` array of shape `(n, n)` where `n ≥ 1` representing the given square matrix. # Output - `result`: A `bool` that returns `True` if the matrix is symmetric, otherwise it returns `False`. # Example ```python # Example input matrix = np.array([ [1, 2, 3], [2, 4, 5], [3, 5, 6] ]) # Example output symmetric = is_symmetric(matrix) # Expected output: True ``` # Note A matrix `M` is considered symmetric if: [ M_{i,j} = M_{j,i} quad text{for all } i, j ] Your task is to implement the `is_symmetric` function to check for matrix symmetry using `numpy.transpose` and `numpy.array_equal`. ---","solution":"import numpy as np def is_symmetric(matrix: np.ndarray) -> bool: Check if a square matrix is symmetric. Parameters: matrix (np.ndarray): A numpy array representing a square matrix. Returns: bool: `True` if the matrix is symmetric, `False` otherwise. return np.array_equal(matrix, np.transpose(matrix))"},{"question":"You are tasked with developing a program that simulates a simple stock trading system over a given period. The program should read stock price data from a CSV file and determine the maximum possible profit from a single buy-sell transaction within that period. The input CSV file contains daily stock prices with the format: ``` Day,Price 1,100 2,180 3,260 4,310 5,40 6,535 7,695 ... ``` Your goal is to write a function named `max_profit_from_csv` that reads the CSV file using Python\'s built-in `csv.reader` and identifies the maximum profit that could be made by buying a stock on one day and selling it on any one of the subsequent days within the same period. Function signature: ```python def max_profit_from_csv(file_path: str) -> int: pass ``` The function should: 1. Take in the path to the CSV file containing stock prices. 2. Read the CSV file to create a list of stock prices. 3. Calculate the maximum profit achievable by buying on one day and selling on another subsequent day. 4. Return the maximum profit as an integer. Utilize the `csv.reader` library to read data from the CSV file as described in the API documentation.","solution":"import csv def max_profit_from_csv(file_path: str) -> int: prices = [] # Read the CSV file and extract prices with open(file_path, \'r\') as file: reader = csv.reader(file) next(reader) # skip header for row in reader: prices.append(int(row[1])) # Initialize variables to keep track of min price and max profit if not prices: return 0 # If there are no prices, max profit is 0 min_price = prices[0] max_profit = 0 # Loop through prices to calculate max profit for price in prices: max_profit = max(max_profit, price - min_price) min_price = min(min_price, price) return max_profit"},{"question":"** You are given a sequence of integers and your task is to implement a Python function named `find_peak_element` that finds one peak element in the array. A peak element is an element that is greater than its neighbors. For an array with multiple peaks, the function should return the position of any one of them. Specifically: - Given a list of integers `nums`, find a peak in the list. - The element at index `i` is considered a peak if `nums[i] > nums[i - 1]` and `nums[i] > nums[i + 1]`. - For the edge elements, assume outside the bounds to be negative infinity. - In case of multiple peaks, return the index of any peak. - You should implement the function in `O(log n)` time complexity using a binary search approach. # Function Definition ```python def find_peak_element(nums): pass ``` # Example ```python nums = [1, 2, 3, 1] result = find_peak_element(nums) # Possible output: 2 (since nums[2] = 3 is a peak element) nums = [1, 2, 1, 3, 5, 6, 4] result = find_peak_element(nums) # Possible output: 1 (since nums[1] = 2 is a peak element) or 5 (since nums[5] = 6 is a peak element) ``` # Constraints - The length of `nums` will be in the range [1, 1000]. - The elements of `nums` are not sorted. - The elements of `nums` will be within the range `[-10^4, 10^4]`. **Note:** Ensure the solution uses binary search for an efficient logarithmic time complexity.","solution":"def find_peak_element(nums): left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[mid + 1]: right = mid else: left = mid + 1 return left"},{"question":"You are required to write a function named `process_words()` that reads words from a text file, processes them using multiple threads, and then writes the processed words to another text file. To complete this task, you will simulate the following scenario: 1. Function `process_words()` reads all words from an input file. 2. Split the list of words into `n` roughly equal parts, where `n` is the number of threads to be used for processing. 3. Each thread processes its respective part of the list. The processing involves converting each word to uppercase. 4. After processing, each thread should store its result in a shared data structure (such as a list). 5. Once all threads have completed their processing, merge the results and write the processed words to an output file, maintaining the original order. **Function Signature**: ```python def process_words(input_file: str, output_file: str, n: int) -> None: pass ``` # Additional Information: - Import the necessary libraries: `threading` and `os`. - Read all words from the `input_file` (one word per line). - Each thread should handle converting its subset of words to uppercase. - Ensure thread-safe operations when writing to the shared data structure. - Write the final list of processed words to the `output_file`, one word per line. # Constraints: - `input_file` and `output_file` are valid file paths. - `n` will be a positive integer and no greater than the number of total words in the file. # Example: If the input file contains: ``` hello world this is a test ``` and `n = 2`: - The words might be split into `[\'hello\', \'world\', \'this\']` and `[\'is\', \'a\', \'test\']` processed by two threads. - After processing, the output file should contain: ``` HELLO WORLD THIS IS A TEST ```","solution":"from threading import Thread, Lock import os def process_words(input_file: str, output_file: str, n: int) -> None: # Read words from input file with open(input_file, \'r\') as infile: words = infile.read().splitlines() def process_chunk(chunk, output, lock, index): processed_chunk = [word.upper() for word in chunk] with lock: output.append((index, processed_chunk)) # Divide words into chunks for each thread chunks = [] chunk_size = len(words) // n for i in range(n): start_index = i * chunk_size if i == n - 1: # Handle remaining words in the last chunk chunks.append(words[start_index:]) else: chunks.append(words[start_index:start_index + chunk_size]) threads = [] output = [] lock = Lock() # Create and start threads for index, chunk in enumerate(chunks): thread = Thread(target=process_chunk, args=(chunk, output, lock, index)) threads.append(thread) thread.start() # Wait for all threads to finish for thread in threads: thread.join() # Sort the output by original chunk index to maintain order output.sort(key=lambda x: x[0]) # Flatten the list of processed words processed_words = [word for _, chunk in output for word in chunk] # Write processed words to the output file with open(output_file, \'w\') as outfile: outfile.write(\'n\'.join(processed_words))"},{"question":"Create a function named `simulate_dice_roll` that simulates a dice roll game, where a player bets on the outcome and checks their luck. The function will: 1. Ask the user to input a number between `1` and `6` as their guess and the amount they want to bet. 2. Simulate a dice roll using the `random.randint` method from the `random` library to randomly select a number between `1` and `6`. 3. Use `time.sleep` from the `time` library to introduce a 2-second delay to simulate the suspense of the dice roll. 4. Compare the dice roll result with the player\'s guess to determine if they won or lost the bet. 5. Return a message indicating whether the player won or lost, and the corresponding amount. The function signature should be: ```python def simulate_dice_roll(): pass ``` **Requirements:** 1. Use `random.randint(1, 6)` to generate the dice roll result. 2. Use `time.sleep(2)` to simulate a 2-second delay for the dice roll. 3. Ensure your function performs the following tasks (with appropriate print statements): - Prompt the user to input their guess and bet amount. - Display the guess and bet amount. - Simulate and display the dice roll result. - Determine and display the win/loss result.","solution":"import random import time def simulate_dice_roll(): Simulates a dice roll where a player bets on the outcome. # Prompt user for their guess and bet amount guess = int(input(\\"Enter your guess (1-6): \\")) bet_amount = float(input(\\"Enter your bet amount: \\")) # Ensure the guess is within the valid range if guess < 1 or guess > 6: return \\"Invalid guess. Please enter a number between 1 and 6.\\" print(f\\"You guessed: {guess} and bet: {bet_amount}\\") # Simulate dice roll print(\\"Rolling the dice...\\") time.sleep(2) # Adding a delay for suspense roll_result = random.randint(1, 6) print(f\\"The dice rolled: {roll_result}\\") # Determine the win/loss if guess == roll_result: return f\\"Congratulations! You won {bet_amount * 6}!\\" else: return f\\"Sorry! You lost {bet_amount}. Better luck next time!\\""},{"question":"# Find and Remove Duplicate Integers from a List Write a function that takes a list of integers and returns a new list with any duplicate integers removed. The order of the integers in the returned list should be the same as the first occurrence in the original list. The function should output with: - list: A list of integers with duplicates removed. You should write self-contained code starting with: ```python def remove_duplicates(int_list): ``` Example: ```python remove_duplicates([1, 2, 2, 3, 4, 4, 5]) # Output: [1, 2, 3, 4, 5] remove_duplicates([5, 5, 5, 1, 2, 2, 3]) # Output: [5, 1, 2, 3] ``` # Constraints: - The function should work efficiently for large lists, up to 1,000,000 elements. - The input list will contain only integers.","solution":"def remove_duplicates(int_list): Returns a list with duplicates removed, preserving the order of first occurrence. Parameters: int_list (list of int): The input list of integers. Returns: list of int: A list with duplicates removed. seen = set() result = [] for num in int_list: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"You are developing a system that tracks the inventory of various items in a warehouse. Your task is to create a function that will update the inventory based on a given list of transactions. Each transaction indicates items that were either added to or removed from the inventory. # Task: Implement the function `update_inventory(inventory, transactions)`. This function will take two arguments: 1. **inventory**: A dictionary where keys are item names (strings) and values are the number of those items currently in stock (integers). 2. **transactions**: A list of dictionaries, where each dictionary represents a single transaction with the following structure: - **item**: A string indicating the name of the item. - **quantity**: An integer indicating the number of items added to (positive) or removed from (negative) the inventory. # Specifications: 1. **Function Name**: `update_inventory` 2. **Parameters**: - `inventory`: A dictionary with item names as keys and stock quantities as values. - `transactions`: A list of dictionaries, each containing an \'item\' and \'quantity\' key. 3. **Return Value**: The function should update the inventory dictionary in place and return it. # Usage: When you call the function `update_inventory(inventory, transactions)`, it should appropriately adjust the quantities in the inventory based on the transactions. ```python def update_inventory(inventory, transactions): # Your implementation should go here. # Example usage: inventory = {\'apples\': 10, \'oranges\': 5, \'pears\': 8} transactions = [ {\'item\': \'apples\', \'quantity\': 3}, {\'item\': \'oranges\', \'quantity\': -2}, {\'item\': \'pears\', \'quantity\': -5}, {\'item\': \'bananas\', \'quantity\': 7} ] updated_inventory = update_inventory(inventory, transactions) print(updated_inventory) # Output: {\'apples\': 13, \'oranges\': 3, \'pears\': 3, \'bananas\': 7} ``` # Requirements: - If a transaction involves an item not currently in the inventory, add the item to the inventory with the appropriate quantity. - If the resulting quantity of an item in the inventory goes below zero, set the quantity to zero. - Your solution should handle cases where the `transactions` list is empty, returning the inventory unchanged in such scenarios. - Ensure that the function performs efficiently with large inventories and numerous transactions.","solution":"def update_inventory(inventory, transactions): Update the inventory based on a list of transactions. Parameters: inventory (dict): A dictionary with item names as keys and stock quantities as values. transactions (list): A list of dictionaries, each containing an \'item\' and \'quantity\' key. Returns: dict: The updated inventory dictionary. for transaction in transactions: item = transaction[\'item\'] quantity = transaction[\'quantity\'] if item in inventory: inventory[item] += quantity else: inventory[item] = quantity if inventory[item] < 0: inventory[item] = 0 return inventory"},{"question":"You are tasked with writing a function that processes a given text file to count the occurrence of each word and handles various edge cases appropriately. The function should be named `count_words` and perform the following specific tasks: 1. Open and read the contents of the given file. 2. Ignore case and punctuation when counting words. 3. Return a dictionary where the keys are the words and the values are their respective counts. 4. If the file cannot be opened (e.g., the file does not exist), print an error message. Function signature: ```python def count_words(file_path: str) -> dict: pass ``` # Parameters: - `file_path` (str): The path to the text file that needs to be processed. # Example Usage Given a file `example.txt` with content: ``` Hello world! Hello, programming world. ``` The function call: ```python word_counts = count_words(\\"example.txt\\") ``` Should return a dictionary similar to: ```python { \\"hello\\": 2, \\"world\\": 2, \\"programming\\": 1 } ``` # Requirements: 1. Use standard Python file handling to read the file. 2. Strip punctuation from words and ignore case sensitivity. 3. Properly handle and report any exception arising from file operations.","solution":"import string def count_words(file_path: str) -> dict: Count the occurrence of each word in the given text file, ignoring case and punctuation. :param file_path: str - The path to the text file that needs to be processed. :return: dict - A dictionary with words as keys and their counts as values. try: with open(file_path, \'r\') as file: text = file.read() except IOError: print(f\\"Error: The file \'{file_path}\' could not be opened.\\") return {} # Convert text to lowercase and remove punctuation translator = str.maketrans(\'\', \'\', string.punctuation) text = text.lower().translate(translator) words = text.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"Creates a synthetic dataset for regression problems with make_regression from sklearn. Generates a DataFrame with the synthetic data, splits it into training and test sets, then fits a LinearRegression model on the training set and evaluates its Mean Squared Error on the test set. The DataFrame should have columns for features and the target. The function should output with: tuple: The DataFrame of the dataset, the training mean squared error, and the test mean squared error. You should write self-contained code starting with: ``` import pandas as pd import numpy as np from sklearn.datasets import make_regression from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error def task_func(n_samples=100, n_features=10, noise=0.0, random_state=None): ```","solution":"import pandas as pd import numpy as np from sklearn.datasets import make_regression from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error def task_func(n_samples=100, n_features=10, noise=0.0, random_state=None): # Generate synthetic data for regression X, y = make_regression(n_samples=n_samples, n_features=n_features, noise=noise, random_state=random_state) # Create DataFrame from the generated data feature_columns = [f\\"feature_{i}\\" for i in range(n_features)] df = pd.DataFrame(X, columns=feature_columns) df[\'target\'] = y # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=random_state) # Fit a LinearRegression model on the training set model = LinearRegression() model.fit(X_train, y_train) # Predict on both training and test sets y_train_pred = model.predict(X_train) y_test_pred = model.predict(X_test) # Calculate Mean Squared Error on training and test sets train_mse = mean_squared_error(y_train, y_train_pred) test_mse = mean_squared_error(y_test, y_test_pred) return df, train_mse, test_mse"},{"question":"In this task, you will create a Python function that implements a simple text-based adventure game. The game will involve navigating through a series of rooms, collecting items, and encountering obstacles. The user will interact with the game using text commands such as \\"go north,\\" \\"take item,\\" or \\"use item.\\" The game will continue until the user either completes the objective or chooses to exit. You are required to write a function called `play_adventure_game`. This function will handle the main game loop, including navigating through rooms, managing the player\'s inventory, and processing user commands. Specific requirements are as follows: 1. The function should use a data structure to represent rooms and their connections. 2. Implement logic to handle user commands and update the game state accordingly. Function signature: ```python def play_adventure_game() -> None: ``` # Requirements: - The function should initialize a map of rooms with connections and any items or obstacles they contain. - Use a dictionary to represent the player\'s inventory. - For each command entered by the user, the function should: - Parse the command and determine the action to take (e.g., moving to a different room, taking an item, using an item). - Update the player\'s current location or inventory based on the command. - Provide appropriate feedback about the result of the action (e.g., \\"You can\'t go that way,\\" \\"You have taken the key\\"). - Handle the overall game loop, allowing the user to continue issuing commands until the game is completed or the user chooses to exit. - Include at least one winning condition and one losing condition (e.g., finding an item, encountering a dangerous situation). # Example Scenario: - The user starts in a room with two doors: one to the north and one to the east. The user must find a key in one of the rooms and use it to unlock a door in another room to win the game. - The game should provide feedback and status messages to help the user understand what to do next and describe the current state of the game.","solution":"def play_adventure_game() -> None: rooms = { \'start\': {\'north\': \'hallway\', \'east\': \'kitchen\', \'item\': None}, \'hallway\': {\'south\': \'start\', \'east\': \'bedroom\', \'item\': \'key\'}, \'kitchen\': {\'west\': \'start\', \'item\': \'monster\'}, \'bedroom\': {\'west\': \'hallway\', \'north\': \'vault\', \'item\': None}, \'vault\': {\'south\': \'bedroom\', \'item\': \'treasure\', \'required_item\': \'key\'} } current_room = \'start\' inventory = {} def print_status(): print(f\\"You are in the {current_room}.\\") if \'item\' in rooms[current_room] and rooms[current_room][\'item\'] is not None: print(f\\"You see a {rooms[current_room][\'item\']} here.\\") print(\\"Welcome to the adventure game!\\") print_status() while True: command = input(\\"nEnter command: \\").strip().lower() if command in [\'exit\', \'quit\']: print(\\"Thanks for playing!\\") break elif command.startswith(\'go \'): direction = command.split()[1] if direction in rooms[current_room]: next_room = rooms[current_room][direction] if \'required_item\' in rooms[next_room] and rooms[next_room][\'required_item\'] not in inventory: print(f\\"You need {rooms[next_room][\'required_item\']} to enter this room.\\") else: current_room = next_room print_status() else: print(\\"You can\'t go that way.\\") elif command.startswith(\'take \'): item = command.split()[1] if \'item\' in rooms[current_room] and rooms[current_room][\'item\'] == item: inventory[item] = item rooms[current_room][\'item\'] = None print(f\\"You have taken the {item}.\\") else: print(\\"There is no such item here.\\") elif command.startswith(\'use \'): item = command.split()[1] if item in inventory: if current_room == \'vault\' and item == \'key\': print(\\"You have unlocked the vault and found the treasure! You win!\\") break else: print(f\\"You can\'t use {item} here.\\") else: print(\\"You don\'t have that item.\\") else: print(\\"Invalid command. Try \'go <direction>\', \'take <item>\', \'use <item>\', or \'exit\'.\\") if \'item\' in rooms[current_room] and rooms[current_room][\'item\'] == \'monster\': print(\\"You encountered a monster and lost the game!\\") break"},{"question":"You are tasked with writing a function `remove_employee(salaries_json, name)` that takes in two parameters: 1. `salaries_json`: A JSON formatted string representing a dictionary of employees and their respective salaries. 2. `name`: A string representing the name of the employee to remove. Your function should perform the following tasks: 1. Parse the JSON string into a Python dictionary. 2. Remove the employee with the given name from the dictionary. If the provided name does not exist in the dictionary, your function should print an error message \\"Employee not found\\" and return the original JSON string unchanged. 3. Serialize the updated dictionary back into a JSON formatted string using `json.dumps`. 4. Return the updated JSON string. You must use the `json.dumps` method from the `json` library for the serialization process. Below is an example of how your function should behave: Example: ```python salaries_json = \'{\\"Alice\\": 70000, \\"Bob\\": 50000, \\"Charlie\\": 60000}\' result = remove_employee(salaries_json, \\"Charlie\\") print(result) # Output: {\\"Alice\\": 70000, \\"Bob\\": 50000} result = remove_employee(salaries_json, \\"Dave\\") # Output: Employee not found print(result) # Output: {\\"Alice\\": 70000, \\"Bob\\": 50000, \\"Charlie\\": 60000} ```","solution":"import json def remove_employee(salaries_json, name): Removes the employee with the given name from the JSON formatted string. Parameters: salaries_json (str): JSON formatted string representing a dictionary of employees and their respective salaries. name (str): The name of the employee to remove. Returns: str: Updated JSON formatted string after removing the employee. salaries_dict = json.loads(salaries_json) if name in salaries_dict: del salaries_dict[name] else: print(\\"Employee not found\\") return salaries_json return json.dumps(salaries_dict)"},{"question":"Your task is to implement a simple collaborative filtering-based recommendation system in Python to predict user ratings for unseen items. You need to use the mean squared error (MSE) as the cost function to optimize the parameters. Write a function named `collaborative_filtering` with the following specifications: 1. Compute user and item feature matrices using gradient descent. 2. Compute the predicted ratings by multiplying these matrices. 3. Calculate the MSE between the actual and predicted ratings. 4. Update the user and item feature matrices to minimize the error using gradient descent. 5. Return the optimized user and item feature matrices along with the predicted ratings. Your function should accept the following parameters: - `R`: A user-item matrix with actual ratings (numpy.ndarray). - `num_features`: The number of latent features for users and items. - `alpha`: The learning rate for gradient descent. - `lambda_reg`: The regularization parameter. - `num_epochs`: The number of iterations for training. Use the `numpy` library for matrix manipulations. ```python def collaborative_filtering(R, num_features, alpha, lambda_reg, num_epochs): Trains a collaborative filtering model using gradient descent to predict ratings. Parameters: R: numpy.ndarray -- User-item rating matrix (num_users, num_items) num_features: int -- Number of latent features alpha: float -- Learning rate lambda_reg: float -- Regularization parameter num_epochs: int -- Number of iterations for training Returns: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray] -- Optimized user feature matrix (U), Optimized item feature matrix (M), Predicted ratings (R_pred) ```","solution":"import numpy as np def collaborative_filtering(R, num_features, alpha, lambda_reg, num_epochs): num_users, num_items = R.shape # Initialize user and item feature matrices randomly U = np.random.rand(num_users, num_features) M = np.random.rand(num_items, num_features) for epoch in range(num_epochs): # Compute the predicted ratings R_pred = U @ M.T # Compute the error error = R - R_pred # Compute the gradient U_grad = -2 * (error @ M) + 2 * lambda_reg * U M_grad = -2 * (error.T @ U) + 2 * lambda_reg * M # Update the user and item feature matrices U -= alpha * U_grad M -= alpha * M_grad # Calculate and print mean squared error for monitoring mse = np.mean(np.square(R - R_pred)) print(f\'Epoch {epoch+1}/{num_epochs}, MSE: {mse}\') # Compute the final predicted ratings R_pred = U @ M.T return U, M, R_pred"},{"question":"In this task, you need to improve a basic order processing system for an online store by implementing a function that manages stock and processes customer orders. You are to write a function called `process_order` that takes two inputs: 1. `order` (dictionary) - contains item names as keys and quantities as values representing the customer\'s order. 2. `inventory` (dictionary) - contains item names as keys and available stock quantities as values. The function should perform the following steps: 1. Validate that the `order` is not empty. 2. Iterate over the `order` and check if the quantities requested are available in the `inventory`. 3. If an item in the order is not available in the inventory, or the quantity requested exceeds the available stock, it should return an \\"Out of Stock\\" message indicating the item. 4. If all items are available in the required quantity, adjust the inventory by subtracting the ordered quantities. 5. After processing the order, return the updated inventory. Example: ```python def process_order(order, inventory): # Function implementation will go here pass # Example usage: print(process_order({\\"apple\\": 3, \\"banana\\": 2}, {\\"apple\\": 5, \\"banana\\": 4, \\"orange\\": 10})) # Output: {\'apple\': 2, \'banana\': 2, \'orange\': 10} print(process_order({\\"apple\\": 6, \\"banana\\": 2}, {\\"apple\\": 5, \\"banana\\": 4, \\"orange\\": 10})) # Output: \\"Out of Stock: apple\\" ```","solution":"def process_order(order, inventory): if not order: return \\"Order is empty\\" for item, quantity in order.items(): if item not in inventory: return f\\"Out of Stock: {item}\\" if inventory[item] < quantity: return f\\"Out of Stock: {item}\\" for item, quantity in order.items(): inventory[item] -= quantity return inventory"},{"question":"You are asked to design a function that calculates the moving average of a time series data. The function should compute the moving average based on a specified window size and return the result as a list. The time series data and the window size are provided as inputs. Your function should be named `calculate_moving_average`. The function should: 1. Take in a list of integers or floats representing the time series data. 2. Take in an integer representing the window size for the moving average. 3. Compute the moving average using the specified window size. 4. Return a list of floats representing the moving average of the time series data. The moving average for a time series data point is calculated as the average of the previous `window_size` elements. If there are not enough previous elements (i.e., for the first `window_size - 1` elements), the moving average should be calculated using only the available elements. **Function Signature** ```python def calculate_moving_average(time_series: list, window_size: int) -> list: pass ``` **Input** - `time_series`: A list of integers or floats representing the time series data. - `window_size`: An integer that specifies the window size for the moving average. **Output** - Returns a list of floats representing the moving average of the time series data. **Example Usage** ```python time_series = [1, 2, 3, 4, 5, 6] window_size = 3 moving_average = calculate_moving_average(time_series, window_size) print(moving_average) # Output: [1.0, 1.5, 2.0, 3.0, 4.0, 5.0] ``` **Additional Notes** - In the above example, the moving average for the first element is just the element itself (1.0), for the second element it is the average of the first two elements (1.5), and for the third element, it is the average of the first three elements (2.0). For subsequent elements, it uses the average of the last 3 elements including the current one.","solution":"def calculate_moving_average(time_series, window_size): Calculate the moving average of a given time series data with a specified window size. Parameters: time_series (list of int/float): The time series data. window_size (int): The window size for the moving average. Returns: list of float: The moving average of the time series data. if window_size <= 0: raise ValueError(\\"Window size must be a positive integer\\") n = len(time_series) moving_averages = [] for i in range(n): window = time_series[max(0, i - window_size + 1):i + 1] window_avg = sum(window) / len(window) moving_averages.append(window_avg) return moving_averages"},{"question":"You are given a dataset containing information about various products sold in an e-commerce store. This dataset includes the following columns: Product ID, Product Name, Category, Price, and Sold Quantity for the year 2022. Your task is to write a function that computes and returns the following information for each product category using the `pandas.DataFrame.groupby` and `pandas.Series.idxmax` functions. The function you need to write should be named `analyze_sales`, and it will take one parameter: 1. `data`: A pandas DataFrame containing the following columns: - \'ProductID\': A unique identifier for the product. - \'ProductName\': The name of the product. - \'Category\': The category of the product. - \'Price\': The price of the product. - \'SoldQuantity\': The quantity sold in the year 2022. The function `analyze_sales` should compute the following for each product category: - The total number of products in the category. - The total sold quantity of the category. - The average price of products in the category. - The Product Name of the product with the highest sold quantity in the respective category. The function should display the following information for each category: ``` --------------------------------- Category: <category_name> Total Products: <total_products> Total Sold Quantity: <total_sold_quantity> Average Price: <average_price> Top Selling Product: <top_selling_product_name> ``` **You are required to use the `pandas.DataFrame.groupby` and `pandas.Series.idxmax` functions in your solution.** Here is the template for the function you need to write: ```python import pandas as pd def analyze_sales(data): grouped_data = data.groupby(\'Category\') for category, group in grouped_data: total_products = group[\'ProductID\'].nunique() total_sold_quantity = group[\'SoldQuantity\'].sum() average_price = group[\'Price\'].mean() top_selling_product_index = group[\'SoldQuantity\'].idxmax() top_selling_product_name = group.loc[top_selling_product_index, \'ProductName\'] # Display the information print(\\"---------------------------------\\") print(f\\"Category: {category}\\") print(f\\"Total Products: {total_products}\\") print(f\\"Total Sold Quantity: {total_sold_quantity}\\") print(f\\"Average Price: {average_price}\\") print(f\\"Top Selling Product: {top_selling_product_name}\\") ```","solution":"import pandas as pd def analyze_sales(data): grouped_data = data.groupby(\'Category\') for category, group in grouped_data: total_products = group[\'ProductID\'].nunique() total_sold_quantity = group[\'SoldQuantity\'].sum() average_price = group[\'Price\'].mean() top_selling_product_index = group[\'SoldQuantity\'].idxmax() top_selling_product_name = group.loc[top_selling_product_index, \'ProductName\'] # Display the information print(\\"---------------------------------\\") print(f\\"Category: {category}\\") print(f\\"Total Products: {total_products}\\") print(f\\"Total Sold Quantity: {total_sold_quantity}\\") print(f\\"Average Price: {average_price}\\") print(f\\"Top Selling Product: {top_selling_product_name}\\")"},{"question":"In scientific applications, it is often necessary to transform spherical polar coordinates to Cartesian coordinates. In this problem, you are tasked with converting a given set of spherical coordinates (radius, polar angle, and azimuthal angle) into Cartesian coordinates (x, y, z). **Function Signature:** ```python def spherical_to_cartesian(r: float, theta: float, phi: float) -> Tuple[float, float, float]: ``` # Parameters: - `r` (float): The radius or radial distance from the origin. - `theta` (float): The polar angle in degrees from the z-axis. - `phi` (float): The azimuthal angle in degrees from the x-axis in the x-y plane. # Returns: - A tuple containing: - `x` (float): The x-coordinate in the Cartesian coordinate system. - `y` (float): The y-coordinate in the Cartesian coordinate system. - `z` (float): The z-coordinate in the Cartesian coordinate system. # Instructions: 1. Convert the polar angle `theta` and azimuthal angle `phi` from degrees to radians using the formula: [ text{radians} = text{degrees} times left(frac{pi}{180}right) ] 2. Use the spherical to Cartesian conversion formulas: [ x = r times sin(theta) times cos(phi) ] [ y = r times sin(theta) times sin(phi) ] [ z = r times cos(theta) ] 3. Utilize the built-in `math.sin`, `math.cos`, and `math.radians` functions for the calculations. 4. Return the calculated `x`, `y`, and `z` coordinates as a tuple. # Example: ```python r = 1.0 theta = 45.0 # Polar angle in degrees phi = 30.0 # Azimuthal angle in degrees x, y, z = spherical_to_cartesian(r, theta, phi) print(f\\"x: {x}, y: {y}, z: {z}\\") # Outputs the Cartesian coordinates (x, y, z) ``` Your task is to implement the function `spherical_to_cartesian` as described above using the `math` library for the necessary trigonometric computations.","solution":"import math from typing import Tuple def spherical_to_cartesian(r: float, theta: float, phi: float) -> Tuple[float, float, float]: Convert spherical coordinates to Cartesian coordinates. Parameters: r (float): Radius or radial distance from the origin. theta (float): Polar angle in degrees from the z-axis. phi (float): Azimuthal angle in degrees from the x-axis in the x-y plane. Returns: Tuple[float, float, float]: Cartesian coordinates (x, y, z). # Convert angles from degrees to radians theta_rad = math.radians(theta) phi_rad = math.radians(phi) # Calculate Cartesian coordinates x = r * math.sin(theta_rad) * math.cos(phi_rad) y = r * math.sin(theta_rad) * math.sin(phi_rad) z = r * math.cos(theta_rad) return x, y, z"},{"question":"You are asked to design a function to analyze the frequency of words in a text document. The function should take a string as input and return a dictionary where the keys are unique words and the values are the counts of occurrences of each word. Additionally, the function should ignore case, remove punctuation, and handle any whitespace variations. # Function Definition: Implement the function `word_frequency(text: str) -> dict`. # Requirements: 1. The function must convert all words to lowercase to ensure case-insensitivity. 2. The function should strip punctuation from the words. You can assume the punctuation marks are `.,!?;:\\"\'`. 3. The function must handle any variations in whitespace (spaces, newlines, tabs) and treat them as single spaces. 4. The function should return a dictionary with words as keys and their frequency counts as values. # Parameters: - `text`: A string representing the content of the text document. # Returns: - A dictionary where the keys are unique words (all lowercase and punctuation-free) and the values are the counts of occurrences of those words in the text. # Example Usage: ```python text = \\"Hello, World! Hello? HELLO... Are you there?\\" result = word_frequency(text) print(result) ``` # Expected Output: ```plaintext { \'hello\': 3, \'world\': 1, \'are\': 1, \'you\': 1, \'there\': 1 } ```","solution":"import string def word_frequency(text: str) -> dict: Analyze the frequency of words in a text document. Parameters: - text: A string representing the content of the text document. Returns: - A dictionary where the keys are unique words (all lowercase and punctuation-free) and the values are the counts of occurrences of those words in the text. # Remove punctuation and convert text to lowercase text = text.lower() text = text.translate(str.maketrans(\\"\\", \\"\\", string.punctuation)) # Replace any whitespace characters with single spaces words = text.split() # Count the frequency of each word frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Write a function that takes a list of integers and returns a new list with the elements rearranged such that all negative numbers appear before all positive numbers, while maintaining the relative order of the negative numbers and positive numbers within their respective groups. # Requirements: 1. **Function Name**: `rearrange_numbers` 2. **Input**: A list of integers `nums`. 3. **Output**: A list of integers with negative numbers appearing before positive numbers, preserving the original order within each group. # Constraints: - Do not use built-in sorting functions. - The relative order of negative numbers and positive numbers should remain unchanged. - The input list can contain zeroes, they are considered non-negative. # Example Usage: ```python nums = [4, -1, 9, -6, 0, 3, -2, -5, 6] output = rearrange_numbers(nums) print(output) # Output should be: [-1, -6, -2, -5, 4, 9, 0, 3, 6] ``` Implement the function to meet the requirements specified above.","solution":"def rearrange_numbers(nums): Rearrange the numbers such that all negative numbers appear before all positive numbers, while maintaining the relative order of the negative numbers and positive numbers within their respective groups. :param nums: List of integers :return: List of integers rearranged as specified negative_numbers = [] non_negative_numbers = [] # Separate the numbers into two lists for num in nums: if num < 0: negative_numbers.append(num) else: non_negative_numbers.append(num) # Concatenate the negative and non-negative lists return negative_numbers + non_negative_numbers"},{"question":"You are asked to create a function that can process and transform a list of numeric grades, converting them into letter grades based on a given grading scale, and then output a summary of the number of each letter grade. Your function should be named `grade_summary`. Specifically: 1. Define a grading scale as follows: - \'A\': 90-100 - \'B\': 80-89 - \'C\': 70-79 - \'D\': 60-69 - \'F\': below 60 2. Iterate over the input list of numeric grades and convert each grade into the corresponding letter grade. 3. Calculate the number of occurrences for each letter grade. 4. Return the summary as a dictionary with letter grades as keys and their counts as values. Your function should have the following signature: ```python def grade_summary(grades: list) -> dict: Converts numeric grades into letter grades and summarizes the count of each letter grade. Args: grades (list): List of numeric grades (integers). Returns: dict: A dictionary with letter grades as keys and their counts as values. ``` # Example ```python # Example usage: grades = [85, 92, 78, 63, 89, 95, 70, 52, 88] summary = grade_summary(grades) print(summary) # Example output: {\'A\': 2, \'B\': 3, \'C\': 2, \'D\': 1, \'F\': 1} ```","solution":"def grade_summary(grades): Converts numeric grades into letter grades and summarizes the count of each letter grade. Args: grades (list): List of numeric grades (integers). Returns: dict: A dictionary with letter grades as keys and their counts as values. summary = {\'A\': 0, \'B\': 0, \'C\': 0, \'D\': 0, \'F\': 0} for grade in grades: if grade >= 90: summary[\'A\'] += 1 elif grade >= 80: summary[\'B\'] += 1 elif grade >= 70: summary[\'C\'] += 1 elif grade >= 60: summary[\'D\'] += 1 else: summary[\'F\'] += 1 return summary"},{"question":"The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The Fibonacci sequence is used in various computational and mathematical applications, and it serves as an excellent exercise in understanding recursion and iterative computation. # Task Implement a function `fibonacci(n)` that returns the nth Fibonacci number. You can solve this problem using either a recursive or an iterative approach. The goal of this problem is to help you practice the concept of recursion or iteration and improve your skills in handling performance considerations for exponential growth computations. # Requirements 1. **Function Name**: `fibonacci` 2. **Parameters**: - `n` (int): The index (0-based) in the Fibonacci sequence whose value is to be returned. 3. **Behavior**: The function should return the nth Fibonacci number. # Example ```python # Example function call print(fibonacci(10)) # Output: 55 print(fibonacci(15)) # Output: 610 ``` # Additional Notes - Make sure your function handles small and large values efficiently. For instance, computing the 50th Fibonacci number should be feasible within a reasonable time frame. - You may want to explore caching/memoization techniques or iterative methods to optimize the function. - Be mindful of edge cases such as negative inputs or non-integer values. Assume well-formed input for this exercise.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Parameters: n (int): The index (0-based) in the Fibonacci sequence whose value is to be returned. Returns: int: The nth Fibonacci number. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that calculates the Simple Moving Average (SMA) of stock prices over a specified window size. The function should take a DataFrame containing columns \'Date\' and \'Close\', and an integer window size. It should return a DataFrame with three columns: \'Date\', \'Close\', and \'SMA\', where \'SMA\' represents the simple moving average of the closing prices. The function should start as follows: ```python import pandas as pd def calculate_sma(df, window): ```","solution":"import pandas as pd def calculate_sma(df, window): Calculates the Simple Moving Average (SMA) of stock prices over a specified window size. Parameters: df (pd.DataFrame): DataFrame containing columns \'Date\' and \'Close\'. window (int): The window size for calculating the SMA. Returns: pd.DataFrame: DataFrame with columns \'Date\', \'Close\', and \'SMA\'. df[\'SMA\'] = df[\'Close\'].rolling(window=window).mean() return df"},{"question":"You are tasked with implementing a function that rearranges the digits of a given non-negative integer to form the smallest possible integer. If the input integer\'s digits are already in ascending order, the function should return the same integer. Your function\'s name should be `rearrangeToSmallest`. The function signature is as follows: ```python def rearrangeToSmallest(num: int) -> int: ``` # Parameters: - `num`: A non-negative integer. # Returns: - An integer representing the smallest possible integer that can be formed by rearranging the digits of the input `num`. # Example: ```python num = 321 rearrangeToSmallest(num) # Output: 123 num = 120 rearrangeToSmallest(num) # Output: 102 num = 111 rearrangeToSmallest(num) # Output: 111 ``` # Constraints: 1. The integer `num` is non-negative and can be zero. 2. Consider leading zeros and ensure the rearranged integer does not have any unnecessary leading zeros. For example, rearranging `100` should yield `100`, not `001`.","solution":"def rearrangeToSmallest(num: int) -> int: Rearranges the digits of a given non-negative integer to form the smallest possible integer. # Convert the number to a list of its digits digits = list(str(num)) # Sort the digits digits.sort() # If the number has leading zeros in sorted form # Move the first non-zero digit to the beginning if digits[0] == \'0\': for i in range(len(digits)): if digits[i] != \'0\': # Swap the first zero with the first non-zero value digits[0], digits[i] = digits[i], digits[0] break # Join the digits back into a string and convert to an integer return int(\'\'.join(digits))"},{"question":"You are required to design a function called `generate_customer_report(transactions_file)`. This function processes a CSV file that contains customer transaction records and returns a dictionary where the keys are customer IDs and the values are the total amount spent by each customer. Each record in the CSV file contains the following fields: `customer_id`, `transaction_date` (in the `YYYY-MM-DD` format), and `transaction_amount`. The CSV file begins with a header that you must skip. The function should: 1. Read the CSV file using Python’s `csv` library. 2. Parse each row to extract the `customer_id` and `transaction_amount`. 3. Accumulate the total transaction amount for each customer. 4. Return a dictionary where the keys are `customer_id` and the values are the total transaction amounts. For this exercise, ensure you use the `csv.DictReader` for handling CSV files and handle potential edge cases such as missing or malformed data appropriately. **Function Signature:** ```python def generate_customer_report(transactions_file: str) -> dict: # Your implementation here ```","solution":"import csv def generate_customer_report(transactions_file: str) -> dict: Processes a CSV file with customer transaction records and returns a dictionary where the keys are customer IDs and the values are the total amount spent by each customer. Parameters: transactions_file (str): Path to the CSV file Returns: dict: Dictionary with customer_id as keys and total transaction amount as values customer_totals = {} # Open the CSV file with open(transactions_file, newline=\'\') as csvfile: reader = csv.DictReader(csvfile) # Iterate through each row in the CSV file for row in reader: customer_id = row.get(\'customer_id\') transaction_amount = row.get(\'transaction_amount\') # Basic validation checking if customer_id and transaction_amount: try: transaction_amount = float(transaction_amount) except ValueError: continue # skip rows with invalid transaction_amount values # Accumulate the transaction amount for each customer if customer_id in customer_totals: customer_totals[customer_id] += transaction_amount else: customer_totals[customer_id] = transaction_amount return customer_totals"},{"question":"Write a function that accepts a list of dictionaries and sorts the list based on a specified key. Each dictionary in the list contains information about a person, including \'name\', \'age\', and \'height\'. The function should return the sorted list and handle any cases where the specified key might be missing in some dictionaries gracefully by placing those dictionaries at the end of the sorted list. If two dictionaries have the same value for the specified key, they should maintain their relative order from the input list (stable sort). The function should output as: list_of_dicts (list): The sorted list of dictionaries based on specified key. An example input and output would be: ``` input_list = [ {\'name\': \'Alice\', \'age\': 30, \'height\': 165}, {\'name\': \'Bob\', \'age\': 25}, {\'name\': \'Charlie\', \'age\': 35, \'height\': 170}, {\'name\': \'David\', \'height\': 180} ] key = \'age\' output_list = [ {\'name\': \'Bob\', \'age\': 25}, {\'name\': \'Alice\', \'age\': 30, \'height\': 165}, {\'name\': \'Charlie\', \'age\': 35, \'height\': 170}, {\'name\': \'David\', \'height\': 180} ] You should write self-contained code starting with: ``` def sort_dict_list(dict_list, sort_key): ```","solution":"def sort_dict_list(dict_list, sort_key): Sorts a list of dictionaries based on a specified key. Dictionaries missing the specified key are placed at the end. Arguments: dict_list: list of dictionaries to sort sort_key: key to sort the dictionaries by Returns: List of sorted dictionaries # Separate dictionaries with and without the sort key with_key = [d for d in dict_list if sort_key in d] without_key = [d for d in dict_list if sort_key not in d] # Sort the dictionaries with the key, while maintaining stable order with_key_sorted = sorted(with_key, key=lambda x: x[sort_key]) # Combine the sorted with_key list with the without_key list sorted_dict_list = with_key_sorted + without_key return sorted_dict_list"},{"question":"You are required to create a Python function that generates all possible permutations of a given string and returns them as a sorted list. This function should employ a recursive approach to compute the permutations. The goal is to ensure that the function handles strings of varying lengths and character compositions efficiently. # Function Details - **Function Name**: `generate_permutations` - **Parameters**: - `input_string`: A string for which permutations need to be generated. # Requirements 1. Use a recursive algorithm to compute all permutations of the input string. 2. Return the list of permutations sorted in lexicographical order. # Example Here\'s an example of how you might call the function: ```python input_string = \\"abc\\" result = generate_permutations(input_string) print(result) ``` Output: ``` [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] ``` In this example, the `input_string` is \\"abc\\", and the function should return a list of all permutations sorted alphabetically. Implement the function `generate_permutations` to meet the outlined requirements.","solution":"def generate_permutations(input_string): Generates all permutations of the given string in lexicographical order. Parameters: input_string (str): The string for which to generate permutations. Returns: list: A sorted list of all permutations of the input string. if len(input_string) == 0: return [\'\'] permutations = [] for i in range(len(input_string)): # Remove the character at index i and find permutations of the remaining string remaining = input_string[:i] + input_string[i+1:] for p in generate_permutations(remaining): permutations.append(input_string[i] + p) # Remove duplicates and sort the permutations lexicographically return sorted(list(set(permutations)))"},{"question":"Write a function that takes a list of strings representing mathematical expressions in postfix notation and evaluates each expression. The function should return a list with the results of each evaluation. If an expression is invalid, store `None` for that expression in the result list. The function should output with: List: A list with the results of each postfix expression, with `None` in place of any invalid expressions. You should write self-contained code starting with: ``` def evaluate_postfix(expressions): ```","solution":"def evaluate_postfix(expressions): Evaluates a list of strings of postfix expressions. Params: expressions (list of str): List of postfix expressions as strings. Returns: list: Results of each postfix expression evaluation. None for invalid expressions. def eval_expression(expression): stack = [] tokens = expression.split() operators = {\'+\', \'-\', \'*\', \'/\'} for token in tokens: if token.isdigit() or (token.startswith(\'-\') and token[1:].isdigit()): stack.append(int(token)) elif token in operators: try: b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(int(a / b)) # Integer division except IndexError: return None else: return None if len(stack) != 1: return None return stack.pop() return [eval_expression(expr) for expr in expressions]"},{"question":"You are required to implement the function `has_cycle(graph)` which checks if a given undirected graph contains any cycle. The graph will be represented as an adjacency list, where keys are node identifiers and values are lists of neighbors. # Constraints: 1. The `graph` parameter will be a dictionary where keys are integers and values are lists of integers, representing the neighbors of the corresponding key. 2. The function should return a boolean value: `True` if there is at least one cycle in the graph, and `False` otherwise. 3. Ensure the function efficiently handles graphs with up to 10^4 nodes and 10^5 edges. 4. Handle edge cases where the graph might be empty or contain disconnected components. # Libraries: - Standard Python libraries only (e.g., collections for stacks/queues). # Function Signature: ```python def has_cycle(graph): pass ``` # Example: ```python graph = { 0: [1, 2], 1: [0, 2], 2: [0, 1, 3], 3: [2] } print(has_cycle(graph)) # Output: True graph = { 0: [1], 1: [2], 2: [3], 3: [4], 4: [] } print(has_cycle(graph)) # Output: False ``` # Note: - Utilize Depth-First Search (DFS) or Breadth-First Search (BFS) algorithms to detect cycles. - Ensure handling of visited nodes to prevent infinite loops. - Make use of appropriate data structures for efficient graph traversal and cycle detection.","solution":"def has_cycle(graph): Detect if an undirected graph contains a cycle. :param graph: Dictionary representation of the graph adjacency list :return: Boolean value indicating whether the graph has a cycle or not def dfs(node, parent): visited.add(node) for neighbor in graph.get(node, []): if neighbor not in visited: if dfs(neighbor, node): return True elif neighbor != parent: return True return False visited = set() for node in graph.keys(): if node not in visited: if dfs(node, -1): return True return False"},{"question":"Compute the sum of digit factorial combinations and determine if it is a perfect square. The function should create combinations of digits taken three at a time from a list, compute the factorial of each digit in the combination, sum these factorials, and then check if the resultant sum is a perfect square. Use itertools for combinations and math for factorial and square root calculations. The function should output with: list of tuples: Each combination of digits, their factorial sum, and whether the sum is a perfect square or not. You should write self-contained code starting with: ``` import math import itertools def check_perfect_square(n): return int(math.sqrt(n))**2 == n def task_func(numbers): result = [] for combo in itertools.combinations(numbers, 3): factorial_sum = sum(math.factorial(digit) for digit in combo) result.append((combo, factorial_sum, check_perfect_square(factorial_sum))) return result ```","solution":"import math import itertools def check_perfect_square(n): return int(math.sqrt(n))**2 == n def task_func(numbers): result = [] for combo in itertools.combinations(numbers, 3): factorial_sum = sum(math.factorial(digit) for digit in combo) result.append((combo, factorial_sum, check_perfect_square(factorial_sum))) return result"},{"question":"In this task, you need to develop an algorithm that finds the most efficient route to deliver goods to multiple delivery points, minimizing the total distance traveled. Each delivery point must be visited exactly once. Given the coordinates of the delivery points, you need to determine the order in which to visit them to achieve the shortest possible route. This is a classic Traveling Salesman Problem (TSP) scenario. You must implement the function `find_optimal_route(delivery_points: List[Tuple[int, int]]) -> Tuple[float, List[Tuple[int, int]]]`, which takes a list of tuples, with each tuple representing the (x, y) coordinates of a delivery point. The function should return a tuple containing the minimum total distance that the delivery vehicle needs to travel and the list of delivery points in the order that minimizes the travel distance. Here\'s a breakdown of the approach you can follow: 1. If there is only one delivery point, return 0 as distance and the single delivery point. 2. If there are two delivery points, return the Euclidean distance between them and the list containing both points. 3. For more than two delivery points, use a heuristic algorithm, such as the nearest neighbor algorithm, to find a suboptimal solution. Alternatively, implement a dynamic programming approach with memoization to find the exact solution. You may find the `itertools` module helpful for generating permutations when implementing the brute-force approach for smaller inputs. Function Signature: ```python from typing import List, Tuple from itertools import permutations import math def find_optimal_route(delivery_points: List[Tuple[int, int]]) -> Tuple[float, List[Tuple[int, int]]]: pass def calculate_distance(point1: Tuple[int, int], point2: Tuple[int, int]) -> float: return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) ``` Your task is to fill in the `find_optimal_route` function and optionally use the helper function `calculate_distance` to compute the Euclidean distance between two points.","solution":"from typing import List, Tuple from itertools import permutations import math def calculate_distance(point1: Tuple[int, int], point2: Tuple[int, int]) -> float: Helper function to calculate the Euclidean distance between two points. return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) def find_optimal_route(delivery_points: List[Tuple[int, int]]) -> Tuple[float, List[Tuple[int, int]]]: Function to find the most efficient route to deliver goods to multiple delivery points, minimizing the total distance traveled. # Number of delivery points n = len(delivery_points) # If there is only one delivery point, return 0 distance and the point itself if n == 1: return 0.0, delivery_points # If there are two delivery points, return the Euclidean distance between them and the list if n == 2: distance = calculate_distance(delivery_points[0], delivery_points[1]) return distance, delivery_points # For more than two delivery points, use brute-force approach (i.e., permutation) to find the optimal route min_distance = float(\'inf\') best_route = [] for perm in permutations(delivery_points): current_distance = sum(calculate_distance(perm[i], perm[i+1]) for i in range(n-1)) if current_distance < min_distance: min_distance = current_distance best_route = perm return min_distance, list(best_route)"},{"question":"Implement a function `find_connected_components` that takes an undirected graph represented as an adjacency matrix and finds all connected components. The function should return a list of lists, where each list contains the indices of nodes in a connected component. The function signature is provided below: ```python def find_connected_components(adj_matrix: np.ndarray) -> List[List[int]]: Find all connected components in an undirected graph. Args: adj_matrix (np.ndarray): A 2D numpy array representing the adjacency matrix of the graph. The value adj_matrix[i][j] is 1 if there is an edge between nodes i and j, and 0 otherwise. Returns: List[List[int]]: A list of lists, where each list contains the node indices of a connected component. ``` **Requirements:** - Use `numpy.zeros` to create an array to keep track of visited nodes. - Use Depth-First Search (DFS) or Breadth-First Search (BFS) algorithm to explore nodes and identify connected components. - Avoid using built-in graph libraries like NetworkX; implement the graph traversal manually. **Input:** - `adj_matrix`: A 2D numpy array of integers (0 or 1) representing the adjacency matrix of the graph, e.g., `np.array([[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]])`. **Output:** - A list of lists, where each sub-list contains the node indices (as integers) of a connected component, e.g., `[[0, 1, 2], [3]]`. **Example:** ```python # Example Usage: adj_matrix = np.array([[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]]) print(find_connected_components(adj_matrix)) # Output: [[0, 1, 2], [3]] ```","solution":"from typing import List import numpy as np def find_connected_components(adj_matrix: np.ndarray) -> List[List[int]]: def dfs(node, visited, component): visited[node] = True component.append(node) for neighbor, is_connected in enumerate(adj_matrix[node]): if is_connected and not visited[neighbor]: dfs(neighbor, visited, component) n = len(adj_matrix) visited = np.zeros(n, dtype=bool) components = [] for node in range(n): if not visited[node]: component = [] dfs(node, visited, component) components.append(component) return components"},{"question":"In this problem, you need to develop a scheduling system for a simple task execution controller. The task controller handles the execution of tasks with specific time requirements. Each task has a name and a duration, and the controller executes these tasks sequentially based on their arrival times. You are required to write a function named `schedule_tasks` that: 1. Takes a list of tasks as input where each task is represented as a tuple `(task_name, duration)`. 2. Each task is executed in the order they arrive. 3. Returns a list of tuples where each tuple represents a task and the time at which it was completed. Assume the system starts executing tasks at time `0`. The duration of each task is represented in integral units of time. The function should compute the completion time for each task as it is executed sequentially. The details for the task list input are as follows: - Each task tuple contains a string `task_name` and an integer `duration`. - The tasks are executed strictly in the order they appear in the list. The output should be a list of tuples where each tuple is of the form `(task_name, completion_time)`. Here is a template of what your function definition should look like: ```python def schedule_tasks(task_list): # Your implementation goes here ``` # Example Input ```python task_list = [(\\"Task1\\", 3), (\\"Task2\\", 2), (\\"Task3\\", 1)] ``` Output ```python [(\'Task1\', 3), (\'Task2\', 5), (\'Task3\', 6)] ``` Explanation - \\"Task1\\" takes 3 units of time and is completed at time 3. - \\"Task2\\" takes 2 units of time and starts at time 3, thus is completed at time 5. - \\"Task3\\" takes 1 unit of time and starts at time 5, thus is completed at time 6.","solution":"def schedule_tasks(task_list): Returns a list of tuples where each tuple represents a task and the time at which it was completed. current_time = 0 result = [] for task_name, duration in task_list: current_time += duration result.append((task_name, current_time)) return result"},{"question":"Create a function that simulates rolling two six-sided dice 10,000 times and calculates the probability of each possible result (from 2 to 12). The function should plot the probability distribution as a bar chart and return a dictionary with the results. The function should output: dict: A dictionary where the keys are the possible sums (2 to 12) and the values are the probabilities of these sums. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def roll_dice_simulation(num_rolls=10000): ```","solution":"import numpy as np import matplotlib.pyplot as plt def roll_dice_simulation(num_rolls=10000): Simulates rolling two six-sided dice `num_rolls` times and calculates the probability of each possible result (from 2 to 12). Parameters: num_rolls (int): The number of times to roll the dice. Returns: dict: A dictionary with sums as keys (2 to 12) and their probabilities as values. results = np.random.randint(1, 7, size=(num_rolls, 2)).sum(axis=1) prob_distribution = {sum_: (results == sum_).mean() for sum_ in range(2, 13)} # Plot the probability distribution plt.bar(prob_distribution.keys(), prob_distribution.values(), tick_label=list(prob_distribution.keys())) plt.xlabel(\'Sum of Dice\') plt.ylabel(\'Probability\') plt.title(\'Probability Distribution of Rolling Two Dice\') plt.show() return prob_distribution"},{"question":"# Problem Description You are tasked with creating a function that processes company profit data and generates a report summarizing the monthly profits for the year. Each month will have a specific profit amount and the summary should include the total profit for the year, the average monthly profit, and the month with the highest and lowest profits. Your function should be named `generate_profit_report(profits)`. This function takes one parameter: 1. `profits`: a dictionary where the keys are month names (e.g., \'January\', \'February\', etc.) and the values are the profit amounts (e.g., {\'January\': 1200, \'February\': 1100, ...}). The function should perform the following tasks: 1. Calculate the total profit for the year. 2. Calculate the average monthly profit. 3. Identify the month with the highest profit. 4. Identify the month with the lowest profit. 5. Generate a summary report that includes: - Total profit for the year - Average monthly profit - The month with the highest profit and the profit amount - The month with the lowest profit and the profit amount The summary report should be returned as a string in the following format: ``` Total Profit for the Year: <total_profit> Average Monthly Profit: <average_profit> Month with Highest Profit: <month> (<highest_profit>) Month with Lowest Profit: <month> (<lowest_profit>) ``` Please ensure your function handles cases where all months are provided and that the profit amounts are valid numerical values.","solution":"def generate_profit_report(profits): Generates a summary report of the monthly profits for the year. Parameters: profits (dict): A dictionary with month names as keys and profit amounts as values. Returns: str: The summary report. if not profits or not all(isinstance(value, (int, float)) for value in profits.values()): raise ValueError(\\"Invalid input. Profits must be a dictionary with numerical values.\\") total_profit = sum(profits.values()) average_profit = total_profit / 12 month_with_highest_profit = max(profits, key=profits.get) highest_profit = profits[month_with_highest_profit] month_with_lowest_profit = min(profits, key=profits.get) lowest_profit = profits[month_with_lowest_profit] report = ( f\\"Total Profit for the Year: {total_profit}n\\" f\\"Average Monthly Profit: {average_profit:.2f}n\\" f\\"Month with Highest Profit: {month_with_highest_profit} ({highest_profit})n\\" f\\"Month with Lowest Profit: {month_with_lowest_profit} ({lowest_profit})\\" ) return report"},{"question":"**Conference Room Reservation Checker** You are tasked with creating a function that determines if a conference room reservation schedule is valid. A reservation schedule is given as a list of tuples where each tuple represents a reservation with a start and end time in 24-hour format. The schedule is valid if no two reservations overlap. Write a function `is_schedule_valid(schedule)` that takes a list of tuples and returns `True` if the schedule is valid and `False` if there are any overlapping reservations. Each reservation is represented as a tuple `(start_time, end_time)`. Both `start_time` and `end_time` are always given in the format `\\"HH:MM\\"` and `start_time` is always less than `end_time`. **Function Signature:** ```python def is_schedule_valid(schedule: list[tuple[str, str]]) -> bool: pass ``` **Example:** ```python schedule = [(\\"09:00\\", \\"10:30\\"), (\\"10:30\\", \\"11:00\\"), (\\"11:00\\", \\"12:00\\")] # There are no overlaps, so the function should return True. assert is_schedule_valid(schedule) == True schedule = [(\\"09:00\\", \\"10:30\\"), (\\"10:15\\", \\"11:00\\"), (\\"11:00\\", \\"12:00\\")] # The second reservation overlaps with the first one, so the function should return False. assert is_schedule_valid(schedule) == False ``` **Constraints:** 1. The `schedule` list will have at most 10,000 reservations. 2. Each time will be in the range `\\"00:00\\"` to `\\"23:59\\"`. 3. The interval `(start_time, end_time)` will have a duration of at least 1 minute and at most 24 hours.","solution":"def is_schedule_valid(schedule): Determine if a conference room reservation schedule is valid. A schedule is valid if no two reservations overlap. Args: schedule (list[tuple[str, str]]): List of tuples representing the reservations. Returns: bool: True if no reservations overlap, False otherwise. # Convert time strings to minutes to easily compare times def time_to_minutes(t): hours, minutes = map(int, t.split(\':\')) return hours * 60 + minutes # Sort the schedule by start time schedule.sort(key=lambda x: time_to_minutes(x[0])) # Check for any overlaps for i in range(1, len(schedule)): prev_end = time_to_minutes(schedule[i-1][1]) curr_start = time_to_minutes(schedule[i][0]) if curr_start < prev_end: return False return True"},{"question":"You are required to develop a program that calculates the maximum area of a rectangle that can be formed within a histogram. The histogram is represented as a list of integers where each integer represents the height of a bar in the histogram. Assumed that each bar has a width of 1 unit. Write a function `maximum_histogram_area(heights)` that takes a list of integers `heights` as input, representing the heights of the histogram bars. The function should: 1. Accept one argument: - `heights`: A list of integers where each integer represents the height of a bar in the histogram. 2. Calculate the maximum rectangular area that can be formed within the bounds of the histogram. Example: ```python heights = [2, 1, 5, 6, 2, 3] print(maximum_histogram_area(heights)) # Output should be 10 ``` **Constraints:** - The length of `heights` will be between 1 and 100,000. - Each height in `heights` will be between 0 and 10,000. **Hint:** - You can solve this problem efficiently using a stack data structure to keep track of the indices of the histogram bars. **Clarification:** Your implementation should be efficient enough to handle the upper limits of the input size in a reasonable time frame.","solution":"def maximum_histogram_area(heights): Calculate the maximum rectangular area that can be formed within the bounds of the histogram. :param heights: List of integers where each integer represents the height of a bar in the histogram. :return: Maximum area of rectangle that can be formed in the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"In this problem, we will work with a basic inventory management system for an e-commerce platform. Your task is to implement a function that updates the inventory levels based on a list of orders processed within a day. **Function to Implement**: `updateInventory(products, orders)` **Function Description**: - `products`: A dictionary where keys are product names and values are their current stock levels (integers). - `orders`: A list of dictionaries, each representing an order. Each dictionary contains the `product` name (string) and the `quantity` ordered (integer). The function should: 1. Iterate through each order and adjust the corresponding product\'s stock level within the `products` dictionary. 2. If an ordered product is not found in the `products` dictionary, it should be ignored. 3. Return the updated `products` dictionary. **Example Input/Output**: ```python products = { \'laptop\': 10, \'keyboard\': 20, \'mouse\': 15 } orders = [ {\'product\': \'laptop\', \'quantity\': 1}, {\'product\': \'mouse\', \'quantity\': 5}, {\'product\': \'keyboard\', \'quantity\': 2} ] updated_inventory = updateInventory(products, orders) print(updated_inventory) # Output: {\'laptop\': 9, \'keyboard\': 18, \'mouse\': 10} ```","solution":"def updateInventory(products, orders): Updates the inventory levels based on the orders. Args: products (dict): Dictionary of product names and their current stock levels. orders (list): A list of dictionaries, each representing an order with product name and quantity ordered. Returns: dict: Updated inventory levels. for order in orders: product_name = order[\'product\'] quantity_ordered = order[\'quantity\'] if product_name in products: products[product_name] -= quantity_ordered return products"},{"question":"Write a function named `sort_strings_by_length` that sorts a given list of strings in ascending order based on their lengths. If two strings have the same length, they should be sorted lexicographically (dictionary order). Your function should expect one parameter: - `strings`: A list of strings to be sorted. The function should return a new sorted list of strings according to the specifications mentioned above. # Example Usage: ```python strings = [\\"apple\\", \\"kiwi\\", \\"pear\\", \\"banana\\", \\"cherry\\", \\"grapefruit\\"] sorted_strings = sort_strings_by_length(strings) print(sorted_strings) # Output: [\'kiwi\', \'pear\', \'apple\', \'banana\', \'cherry\', \'grapefruit\'] strings = [\\"abc\\", \\"a\\", \\"ab\\", \\"abcd\\", \\"abdc\\"] sorted_strings = sort_strings_by_length(strings) print(sorted_strings) # Output: [\'a\', \'ab\', \'abc\', \'abcd\', \'abdc\'] ``` # Requirements: 1. Use Python\'s `sorted()` function with a suitable key to sort the strings first by length and then lexicographically. 2. Ensure that the function handles an empty list gracefully by returning an empty list. # Provided Libraries: You may use any standard Python library for string manipulation and sorting. Ensure your function follows the above specifications to correctly sort the list of strings.","solution":"def sort_strings_by_length(strings): Sorts a list of strings in ascending order based on string lengths. If two strings have the same length, they will be sorted lexicographically. Parameters: - strings (list): A list of strings to be sorted. Returns: - list: A new sorted list of strings. return sorted(strings, key=lambda s: (len(s), s))"},{"question":"Write a Python function named `extract_hashtags` that takes a string as input and extracts all unique hashtags from it. A hashtag is defined as a word that begins with the \'#\' character and is followed by alphanumeric characters (letters and numbers) only. The function should return a list of unique hashtags in the order they appear in the input string, without including the \'#\' character. Function Signature: ```python def extract_hashtags(text: str) -> list: ``` Requirements: 1. Use Python\'s built-in string handling and list manipulation functionalities. 2. Ensure the resulting list contains hashtags in the order they first appear in the input string. 3. Hashtags should not be case-sensitive, meaning `#Python` and `#python` should be considered the same hashtag and only included once in the result. Example: ```python text = \\"Love coding in #Python! Let\'s build something with #python and #MachineLearning. #coding\\" print(extract_hashtags(text)) # Output: [\\"Python\\", \\"MachineLearning\\", \\"coding\\"] ``` Note: The input text can contain punctuation and other special characters which are not part of hashtags.","solution":"import re def extract_hashtags(text: str) -> list: Extracts unique hashtags from the input text in the order they appear. Args: text (str): The input string containing hashtags. Returns: list: A list of unique hashtags without the \'#\' character and in the order they appear. hashtags = re.findall(r\'#(w+)\', text) seen = set() unique_hashtags = [] for hashtag in hashtags: lower_hashtag = hashtag.lower() if lower_hashtag not in seen: seen.add(lower_hashtag) unique_hashtags.append(hashtag) return unique_hashtags"},{"question":"--- Write a function named `find_kth_largest` that takes two parameters: a list of integers `nums` and an integer `k`. The function should return the k-th largest element in the list. You may assume that k is always valid, i.e., 1 ≤ k ≤ len(nums). To solve this problem, you are required to implement a solution with an average time complexity of O(n), potentially using a variation of the Quickselect algorithm. ```python def find_kth_largest(nums, k): Returns the k-th largest element in the nums list. Args: nums (list): A list of integers. k (int): The k-th position (1-based) to find the largest element. Returns: int: The k-th largest element in the list. # Your implementation here ``` **Example Usage:** ```python nums = [3, 2, 1, 5, 6, 4] k = 2 print(find_kth_largest(nums, k)) # Output: 5 nums = [3, 2, 3, 1, 2, 4, 5, 5, 6] k = 4 print(find_kth_largest(nums, k)) # Output: 4 ``` This function will help you understand the process of finding the k-th largest element in an unsorted list efficiently using advanced sorting algorithms.","solution":"def partition(nums, left, right, pivot_index): pivot_value = nums[pivot_index] nums[pivot_index], nums[right] = nums[right], nums[pivot_index] store_index = left for i in range(left, right): if nums[i] < pivot_value: nums[store_index], nums[i] = nums[i], nums[store_index] store_index += 1 nums[right], nums[store_index] = nums[store_index], nums[right] return store_index def quickselect(nums, left, right, k_smallest): if left == right: return nums[left] pivot_index = left + (right - left) // 2 pivot_index = partition(nums, left, right, pivot_index) if k_smallest == pivot_index: return nums[k_smallest] elif k_smallest < pivot_index: return quickselect(nums, left, pivot_index - 1, k_smallest) else: return quickselect(nums, pivot_index + 1, right, k_smallest) def find_kth_largest(nums, k): Returns the k-th largest element in the nums list. Args: nums (list): A list of integers. k (int): The k-th position (1-based) to find the largest element. Returns: int: The k-th largest element in the list. size = len(nums) return quickselect(nums, 0, size - 1, size - k)"},{"question":"In this problem, you are required to write a Python function named `plot_trigonometric_functions` that visualizes three mathematical functions using the `matplotlib` library. Specifically, this function will: 1. Define a range of values (`x`) from 0 to (2pi) with an increment of 0.1 using `numpy.arange`. 2. Compute the values of three functions: - ( y1 = sin(x) ) - ( y2 = cos(x) ) - ( y3 = tan(x) ) 3. Plot these functions on a single graph with `x` as the x-axis using `matplotlib.pyplot`. 4. Add a legend to differentiate the three functions. 5. Add grid lines to the plot for improved readability. 6. Limit the y-axis to the range [-10, 10] to handle the asymptotes of the tangent function gracefully. The graphical output should have: - The `y1` function plotted as a blue dashed line. - The `y2` function plotted as a red solid line. - The `y3` function plotted as a green dotted line. - The x-axis labeled as \'x\'. - The y-axis labeled as \'y\'. - A legend to indicate which line corresponds to which function. - Grid lines enabled. - The y-axis limited to the range [-10, 10]. Your task is to implement the `plot_trigonometric_functions` function with the specified behavior. # Required Packages: - `numpy`: To generate the range of values. - `matplotlib.pyplot`: For plotting the graphs. Here is the prototype of the function you will implement: ```python def plot_trigonometric_functions(): pass ```","solution":"import numpy as np import matplotlib.pyplot as plt def plot_trigonometric_functions(): # Define the range of x values from 0 to 2π with an increment of 0.1 x = np.arange(0, 2 * np.pi, 0.1) # Calculate y values for the three trigonometric functions y1 = np.sin(x) y2 = np.cos(x) y3 = np.tan(x) # Plot the functions plt.plot(x, y1, \'b--\', label=\'sin(x)\') # Blue dashed line for sin(x) plt.plot(x, y2, \'r-\', label=\'cos(x)\') # Red solid line for cos(x) plt.plot(x, y3, \'g:\', label=\'tan(x)\') # Green dotted line for tan(x) # Add labels and legend plt.xlabel(\'x\') plt.ylabel(\'y\') plt.legend() plt.grid(True) plt.ylim(-10, 10) # Limit the y-axis to [-10,10] # Show the plot plt.show()"},{"question":"You are given a JSON file containing a collection of courses offered by a university. Each course has a set of prerequisites listed within the file. Your task is to determine the order in which a student could complete the courses, given that some courses must be completed before others. To achieve this, you need to write a function named `find_course_order` that takes in one parameter: 1. `file_path`: A string representing the file path to the JSON data for the university courses. The JSON file contains data in the following format: ```json { \\"courses\\": [ { \\"course_id\\": \\"CS101\\", \\"prerequisites\\": [] }, { \\"course_id\\": \\"CS102\\", \\"prerequisites\\": [\\"CS101\\"] }, { \\"course_id\\": \\"CS103\\", \\"prerequisites\\": [\\"CS102\\"] }, { \\"course_id\\": \\"CS104\\", \\"prerequisites\\": [\\"CS101\\", \\"CS102\\"] } ] } ``` Your function should: 1. Load the data from the JSON file into a dictionary. 2. Determine a valid order in which to complete the courses based on the prerequisites. 3. Return the course order as a list of course IDs. If it is not possible to complete all courses (i.e., there is a circular dependency), return an empty list. Here is an example of how the function will be used: ```python course_order = find_course_order(\\"courses.json\\") print(course_order) ``` # Requirements - Implement topological sorting to determine the order of courses. - Use Python\'s `json` module to read the JSON file. # Example Output ```python [\'CS101\', \'CS102\', \'CS104\', \'CS103\'] ```","solution":"import json from collections import deque, defaultdict def find_course_order(file_path): def load_courses(file_path): with open(file_path, \'r\') as file: data = json.load(file) return data[\'courses\'] courses = load_courses(file_path) # Create a graph from courses and their prerequisites graph = defaultdict(list) indegree = defaultdict(int) for course in courses: course_id = course[\'course_id\'] prerequisites = course[\'prerequisites\'] indegree[course_id] = 0 # initialize indegree for each course for course in courses: course_id = course[\'course_id\'] for prereq in course[\'prerequisites\']: graph[prereq].append(course_id) indegree[course_id] += 1 # Topological sort using Kahn\'s algorithm (BFS) course_order = [] zero_indegree_queue = deque([course for course in indegree if indegree[course] == 0]) while zero_indegree_queue: course = zero_indegree_queue.popleft() course_order.append(course) for neighbor in graph[course]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: zero_indegree_queue.append(neighbor) # If the course order contains all courses, return it, otherwise there is a cycle if len(course_order) == len(courses): return course_order else: return [] # Example usage: # course_order = find_course_order(\\"courses.json\\") # print(course_order)"},{"question":"You are required to create a function that determines whether a given string is a valid International Standard Book Number (ISBN-10). The function must check that the ISBN-10 is correctly formatted and follows the ISBN-10 validation rule. Function Name: `is_valid_isbn` Parameters: 1. `isbn` (str): A string representing the ISBN-10 which consists of 10 characters, where each character is either a digit or the letter \'X\' (which represents the number 10). Returns: - `valid` (bool): A boolean value indicating whether the ISBN-10 is valid (`True`) or not (`False`). **Validation Rules:** - The ISBN-10 consists of 9 digits followed by either a digit or the letter \'X\'. - To verify the validity, multiply each of the first 9 digits by its position (i.e., 1 through 9) and sum these products together. - Add 10 times the 10th character if it is \'X\', otherwise add the 10th digit itself. - The sum must be divisible by 11 to be a valid ISBN-10. **Example:** ```python valid = is_valid_isbn(\'0471958697\') print(valid) # Expected Output: True valid = is_valid_isbn(\'123456789X\') print(valid) # Expected Output: True valid = is_valid_isbn(\'1234567890\') print(valid) # Expected Output: False ```","solution":"def is_valid_isbn(isbn: str) -> bool: Determines if the given string is a valid ISBN-10. Args: isbn (str): A string representing the ISBN-10 to validate. Returns: bool: True if the ISBN-10 is valid, False otherwise. if len(isbn) != 10: return False total = 0 for i in range(9): if not isbn[i].isdigit(): return False total += int(isbn[i]) * (i + 1) if isbn[9] == \'X\': total += 10 * 10 elif isbn[9].isdigit(): total += int(isbn[9]) * 10 else: return False return total % 11 == 0"},{"question":"In this problem, you will implement a function to return the maximum product obtained by multiplying two distinct elements from a given list of integers. The functionality should be encapsulated within a single function named `max_product`. The goal is to explore the use of sorting and efficient list traversal techniques to determine the maximum product. Your task is to implement the function `max_product(arr: List[int]) -> int` which accepts a list of integers `arr` and returns the maximum product of any two distinct elements from the list. Specifically: 1. Sort the list of integers in descending order. 2. Calculate the product of the two largest elements in the sorted list. 3. Also consider the possibility that the list might contain negative numbers for which the largest product might come from the smallest (most negative) numbers. # Example ```python max_product([1, 10, 2, 6]) # 60 max_product([1, 3, 4, 5, 2]) # 20 max_product([-10, -20, 1, 3]) # 200 max_product([-1, -2, -3, -4]) # 12 ``` # Constraints - The length of the list `arr` will be at least 2. - The elements of the list will be integers, both positive and negative. # Additional Notes - Ensure your solution is efficient and does not use nested loops to check all pairs.","solution":"from typing import List def max_product(arr: List[int]) -> int: Returns the maximum product obtained by multiplying two distinct elements from the list. if len(arr) < 2: raise ValueError(\\"The input list must have at least two elements.\\") # Step 1: Sort the list sorted_arr = sorted(arr) # Step 2: Calculate the product of the two largest elements and # the product of the two smallest elements (in case both are negative) product1 = sorted_arr[-1] * sorted_arr[-2] product2 = sorted_arr[0] * sorted_arr[1] # Step 3: Return the maximum of the two products return max(product1, product2)"},{"question":"Write a function that takes a pandas DataFrame containing columns for item IDs, purchase dates, and sales quantities. The function must generate a bar chart displaying total sales quantity per item for a specified date range. The function should also label the bars with the corresponding sales quantities. The function should output with: matplotlib.axes._subplots.AxesSubplot: The Axes object with the bar chart. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def task_func(df: pd.DataFrame, start_date: str, end_date: str) -> plt.Axes: ```","solution":"import pandas as pd import matplotlib.pyplot as plt def task_func(df: pd.DataFrame, start_date: str, end_date: str) -> plt.Axes: Generates a bar chart displaying total sales quantity per item for a specified date range. Parameters: df (pd.DataFrame): DataFrame containing columns \'item_id\', \'purchase_date\', and \'sales_quantity\'. start_date (str): Start date in \'YYYY-MM-DD\' format. end_date (str): End date in \'YYYY-MM-DD\' format. Returns: matplotlib.axes._subplots.AxesSubplot: The Axes object with the bar chart. # Convert purchase_date to datetime df[\'purchase_date\'] = pd.to_datetime(df[\'purchase_date\']) # Filter DataFrame within the date range mask = (df[\'purchase_date\'] >= start_date) & (df[\'purchase_date\'] <= end_date) filtered_df = df[mask] # Group by item_id and sum the sales quantities sales_summary = filtered_df.groupby(\'item_id\')[\'sales_quantity\'].sum().reset_index() # Plotting the bar chart fig, ax = plt.subplots(figsize=(10, 6)) bars = ax.bar(sales_summary[\'item_id\'], sales_summary[\'sales_quantity\']) # Labeling the bars with sales quantities for bar in bars: height = bar.get_height() ax.annotate(f\'{height}\', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), textcoords=\\"offset points\\", ha=\'center\', va=\'bottom\') ax.set_xlabel(\'Item IDs\') ax.set_ylabel(\'Total Sales Quantity\') ax.set_title(\'Total Sales Quantity per Item from {} to {}\'.format(start_date, end_date)) return ax"},{"question":"In network communications, it is important to efficiently encode and decode messages to ensure they can be transmitted over a variety of channels with minimal loss. One simple method of encoding is called Run-Length Encoding (RLE), which reduces the size of the input by collapsing consecutive identical elements into a single element with a count. Your task is to write two functions: `rle_encode` and `rle_decode`. 1. `rle_encode` takes a string `input_str` and returns a list of tuples. Each tuple contains a character from the input string and its corresponding run length. For example, the string \\"aaabbcaa\\" should be encoded as `[(\'a\', 3), (\'b\', 2), (\'c\', 1), (\'a\', 2)]`. 2. `rle_decode` takes a list of tuples (as produced by `rle_encode`) and reconstructs the original string. For instance, the input `[(\'a\', 3), (\'b\', 2), (\'c\', 1), (\'a\', 2)]` should be decoded as \\"aaabbcaa\\". Function Signatures: ```python def rle_encode(input_str: str) -> list: pass def rle_decode(encoded_list: list) -> str: pass ``` **Constraints**: - The input string `input_str` contains only lowercase alphabetic characters and has a length between 1 and 1000. - The output list and input list elements in `rle_encode` and `rle_decode` respectively, should maintain the order of characters as they appear in the string.","solution":"def rle_encode(input_str: str) -> list: if not input_str: return [] encoded = [] count = 1 prev_char = input_str[0] for char in input_str[1:]: if char == prev_char: count += 1 else: encoded.append((prev_char, count)) prev_char = char count = 1 encoded.append((prev_char, count)) # Add the last run return encoded def rle_decode(encoded_list: list) -> str: if not encoded_list: return \\"\\" decoded = \\"\\".join(char * count for char, count in encoded_list) return decoded"},{"question":"Utilize recursion to generate all possible permutations of a given string and return them as a list. Ensure the function handles edge cases such as an empty string or a string with duplicate characters. The function should output: list: A list of all possible permutations of the input string. You should write self-contained code starting with: ``` def task_func(s): ```","solution":"def task_func(s): Return all possible permutations of the input string s. # base cases if len(s) == 0: return [\\"\\"] if len(s) == 1: return [s] # recursive case permutations = [] for i, char in enumerate(s): remaining_chars = s[:i] + s[i+1:] for perm in task_func(remaining_chars): permutations.append(char + perm) return list(set(permutations)) # using set to remove duplicates"},{"question":"You need to write a Python function called `invert_dictionary` that takes a dictionary as input where the keys are strings and the values are lists of strings, and returns a new dictionary that inverts the mappings. In the resulting dictionary, each string that was originally found in the lists should become a key mapping to a list of all keys from the original dictionary that had that string in their list. The function should: 1. Iterate over each key in the original dictionary. 2. For each string in the list of values corresponding to that key, add an entry in the new dictionary where the string is the key and the original key is appended to the list of values. Here is the function signature: ```python def invert_dictionary(d: dict) -> dict: pass ``` **Example:** If the input dictionary is: ```python d = { \\"fruit\\": [\\"apple\\", \\"banana\\"], \\"color\\": [\\"red\\", \\"yellow\\", \\"green\\"], \\"category\\": [\\"fruit\\", \\"vegetable\\"] } ``` Then the output should be: ```python { \\"apple\\": [\\"fruit\\"], \\"banana\\": [\\"fruit\\"], \\"red\\": [\\"color\\"], \\"yellow\\": [\\"color\\"], \\"green\\": [\\"color\\"], \\"fruit\\": [\\"category\\"], \\"vegetable\\": [\\"category\\"] } ``` **Constraints:** - You can assume that the strings in the lists are unique within each list. - The input dictionary will not be empty, and each list of values will contain at least one string.","solution":"def invert_dictionary(d: dict) -> dict: inverted = {} for key, values in d.items(): for value in values: if value not in inverted: inverted[value] = [] inverted[value].append(key) return inverted"},{"question":"You are given a list of dictionaries, where each dictionary represents a student\'s record with the keys \'name\', \'age\', and \'grade\'. The goal is to filter out the students whose grade is below a given threshold and then sort the remaining students by their names in alphabetical order. Write a function named `filter_and_sort_students` that takes two arguments: - `students`, which is a list of dictionaries where each dictionary contains the keys \'name\' (a string), \'age\' (an integer), and \'grade\' (an integer). - `min_grade`, which is an integer representing the minimum grade threshold. The function should return a new list of dictionaries containing only the students who have grades greater than or equal to `min_grade`, sorted by their \'name\' in alphabetical order. Example: ```python students = [ {\'name\': \'Alice\', \'age\': 20, \'grade\': 85}, {\'name\': \'Bob\', \'age\': 22, \'grade\': 70}, {\'name\': \'Charlie\', \'age\': 23, \'grade\': 90}, {\'name\': \'David\', \'age\': 21, \'grade\': 65} ] min_grade = 75 ``` Calling `filter_and_sort_students(students, min_grade)` should return: ```python [ {\'name\': \'Alice\', \'age\': 20, \'grade\': 85}, {\'name\': \'Charlie\', \'age\': 23, \'grade\': 90} ] ```","solution":"def filter_and_sort_students(students, min_grade): Filters out students with grades below the given threshold and sorts the remaining students by name. Args: students (list of dict): List of dictionaries where each dictionary contains \'name\', \'age\', and \'grade\'. min_grade (int): Minimum grade threshold. Returns: list of dict: Filtered and sorted list of student dictionaries. filtered_students = [student for student in students if student[\'grade\'] >= min_grade] sorted_students = sorted(filtered_students, key=lambda x: x[\'name\']) return sorted_students"},{"question":"You are to write a function `find_longest_subarray_with_sum(arr: List[int], target_sum: int) -> List[int]` that finds the longest contiguous subarray within the given array `arr` whose elements sum up to the `target_sum`. The function should accept two parameters: - `arr`: A list of integers. - `target_sum`: An integer representing the target sum. The function should return the subarray as a list of integers. If there is no such subarray, an empty list should be returned. The return format should be the subarray itself, not the indices of the subarray. **Example:** ```python find_longest_subarray_with_sum([1, 2, 3, 7, 5], 12) ``` The example above would return the subarray `[2, 3, 7]` since it is the longest subarray that sums to 12. You can assume that there will not be multiple subarrays with the same length that sum to `target_sum`.","solution":"def find_longest_subarray_with_sum(arr, target_sum): Finds the longest contiguous subarray with a sum equal to target_sum. current_sum = 0 start_index = 0 max_length = 0 subarray = [] sum_indices = {0: -1} # To handle the case when the subarray starts from index 0 for end_index in range(len(arr)): current_sum += arr[end_index] if (current_sum - target_sum) in sum_indices: potential_start_index = sum_indices[current_sum - target_sum] + 1 if end_index - potential_start_index + 1 > max_length: max_length = end_index - potential_start_index + 1 subarray = arr[potential_start_index:end_index + 1] if current_sum not in sum_indices: sum_indices[current_sum] = end_index return subarray"},{"question":"Consider the problem of rotating a square matrix 90 degrees clockwise. Given a 2D array representation of an `n x n` matrix `matrix`, you are required to implement a function `rotate_matrix(matrix)` that returns a new `n x n` matrix representing the original matrix rotated 90 degrees clockwise. To do this, you should employ list comprehensions and slicing techniques. **Description of the Rotation:** For each element at position `(i, j)` in the original matrix, its new position in the rotated matrix will be `(j, n-i-1)`. Function Signature: ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: ``` **Inputs:** - `matrix`: List[List[int]] — A 2D list of integers representing an `n x n` matrix. **Outputs:** - Returns a new 2D list representing the rotated matrix. **Example:** ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] result = rotate_matrix(matrix) # Expected output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] matrix = [ [1, 2], [3, 4] ] result = rotate_matrix(matrix) # Expected output: # [ # [3, 1], # [4, 2] # ] ``` Note: The size of the input matrix is always `n x n`. Ensure your solution is efficient and leverages Python’s list comprehensions and slicing capabilities where appropriate.","solution":"def rotate_matrix(matrix): Rotates the given n x n matrix 90 degrees clockwise. Args: matrix (List[List[int]]): A 2D list of integers representing an n x n matrix. Returns: List[List[int]]: A new 2D list representing the rotated matrix. n = len(matrix) return [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)]"},{"question":"You are asked to create a function that compares two JSON files and highlights their differences. The JSON files contain nested structures with various data types such as lists, dictionaries, strings, numbers, and booleans. Your task is to identify keys that are present in one file but not the other, as well as keys that have different values in the two files. The function you need to implement is named `compareJSON`. This function takes two parameters: - `file1`: The path to the first JSON file. - `file2`: The path to the second JSON file. Your function should: 1. Read and parse both JSON files using the `json.load` method. 2. Recursively compare the contents of these JSON files. 3. Return a dictionary containing the differences. This dictionary should have two keys: \'differences\' and \'missing\', where: - \'differences\' maps to a list of tuples, each containing the path to the differing key and the differing values from both files. - \'missing\' maps to a dictionary that specifies keys missing from each file in relation to the other. Your task is to complete the implementation of the `compareJSON` function. Here is the provided code skeleton: ```python import json def compareJSON(file1, file2): def compareDicts(d1, d2, path=[]): differences = [] missing = {\'file1\': [], \'file2\': []} keys1 = set(d1.keys()) keys2 = set(d2.keys()) for key in keys1 - keys2: missing[\'file2\'].append(\'/\'.join(path + [key])) for key in keys2 - keys1: missing[\'file1\'].append(\'/\'.join(path + [key])) for key in keys1 & keys2: new_path = path + [key] if isinstance(d1[key], dict) and isinstance(d2[key], dict): sub_diff, sub_missing = compareDicts(d1[key], d2[key], new_path) differences.extend(sub_diff) missing[\'file1\'].extend(sub_missing[\'file1\']) missing[\'file2\'].extend(sub_missing[\'file2\']) elif d1[key] != d2[key]: differences.append((\'/\'.join(new_path), d1[key], d2[key])) return differences, missing with open(file1, \'r\') as f1, open(file2, \'r\') as f2: data1 = json.load(f1) data2 = json.load(f2) differences, missing = compareDicts(data1, data2) return {\'differences\': differences, \'missing\': missing} ```","solution":"import json def compareJSON(file1, file2): def compareDicts(d1, d2, path=[]): differences = [] missing = {\'file1\': [], \'file2\': []} keys1 = set(d1.keys()) keys2 = set(d2.keys()) for key in keys1 - keys2: missing[\'file2\'].append(\'/\'.join(path + [key])) for key in keys2 - keys1: missing[\'file1\'].append(\'/\'.join(path + [key])) for key in keys1 & keys2: new_path = path + [key] if isinstance(d1[key], dict) and isinstance(d2[key], dict): sub_diff, sub_missing = compareDicts(d1[key], d2[key], new_path) differences.extend(sub_diff) missing[\'file1\'].extend(sub_missing[\'file1\']) missing[\'file2\'].extend(sub_missing[\'file2\']) elif d1[key] != d2[key]: differences.append((\'/\'.join(new_path), d1[key], d2[key])) return differences, missing with open(file1, \'r\') as f1, open(file2, \'r\') as f2: data1 = json.load(f1) data2 = json.load(f2) differences, missing = compareDicts(data1, data2) return {\'differences\': differences, \'missing\': missing}"},{"question":"You are tasked with creating a function, `remove_duplicates`, which removes all duplicate elements from an input list while preserving the original order of elements. The function should adhere to the following requirements: 1. **Input:** The input will be a single list of integers. 2. **Output:** The output should be a list of integers with duplicates removed, while maintaining their original order. 3. **Efficiency:** Aim for an efficient solution with respect to both time and space complexity. Function Signature: `def remove_duplicates(nums: List[int]) -> List[int]` Example: ```python Input: nums = [4, 5, 9, 4, 9, 1, 5, 3] Output: [4, 5, 9, 1, 3] Input: nums = [2, 3, 4, 3, 2, 5, 6, 2] Output: [2, 3, 4, 5, 6] ``` **Hints:** - Consider utilizing an additional data structure to keep track of elements that have already been seen. - Think about how you can achieve a solution that processes the input list in a single pass (linear complexity).","solution":"from typing import List def remove_duplicates(nums: List[int]) -> List[int]: Remove duplicates from a list while preserving the original order. Args: nums (List[int]): A list of integers. Returns: List[int]: A list of integers with duplicates removed. seen = set() result = [] for num in nums: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Create a function that takes a list of integers and a specified threshold value, then finds all unique triplets in the list which gives the sum of zero, and whose absolute difference between the highest and lowest value in the triplet is less than or equal to the specified threshold. The function should return a list of these unique triplets, each sorted in ascending order. The function should output: list: A list of unique triplets meeting the criteria, each triplet sorted in ascending order. You should write self-contained code starting with: ``` def find_triplets(nums, threshold): ```","solution":"def find_triplets(nums, threshold): def find_triplets_helper(nums): nums.sort() triplets = [] length = len(nums) for i in range(length - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, length - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s == 0: triplet = sorted([nums[i], nums[left], nums[right]]) triplets.append(triplet) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif s < 0: left += 1 else: right -= 1 return triplets unique_triplets = find_triplets_helper(nums) result = [] for triplet in unique_triplets: if max(triplet) - min(triplet) <= threshold: result.append(triplet) return result"},{"question":"You need to implement a function called `find_top_student` that takes a list of dictionaries containing student names and their grades. Each dictionary will have keys \\"name\\" and \\"grades\\", where \\"grades\\" is a list of integers. The function should find the student with the highest average grade and return their name. If there are multiple students with the same highest average grade, return the name that comes first alphabetically. **Function Signature:** ```python def find_top_student(students: List[Dict[str, Any]]) -> str: ``` **Requirements:** 1. Calculate the average grade for each student. 2. Identify the student(s) with the highest average grade. 3. Return the name of the student with the highest average grade. If there is a tie, return the name that comes first alphabetically. **Example:** ```python students = [ {\\"name\\": \\"Alice\\", \\"grades\\": [88, 78, 92]}, {\\"name\\": \\"Bob\\", \\"grades\\": [90, 85, 85]}, {\\"name\\": \\"Charlie\\", \\"grades\\": [90, 85, 85]} ] # The function call find_top_student(students) # Should return: \\"Bob\\" # Bob and Charlie have the same average grade, but \\"Bob\\" comes first alphabetically. ```","solution":"from typing import List, Dict, Any def find_top_student(students: List[Dict[str, Any]]) -> str: def average(grades: List[int]) -> float: return sum(grades) / len(grades) if grades else 0.0 top_student = None top_avg = -1 for student in students: avg = average(student[\\"grades\\"]) if avg > top_avg or (avg == top_avg and (top_student is None or student[\\"name\\"] < top_student)): top_student = student[\\"name\\"] top_avg = avg return top_student"},{"question":"Develop a function named `binary_matrix_check` that verifies if a given binary matrix is symmetric. A matrix is said to be symmetric if it is equal to its transpose. In this context, a binary matrix is a 2D list where each element is either 0 or 1. Your function should accept one parameter: - `matrix`: A 2D list of integers (0s and 1s) representing the binary matrix. The function should return `True` if the matrix is symmetric, and `False` otherwise. Please ensure your function has the following header: ```python def binary_matrix_check(matrix: list) -> bool: ``` **Example Usage**: ```python matrix = [ [1, 0, 1], [0, 1, 0], [1, 0, 1] ] print(binary_matrix_check(matrix)) # Output: True matrix = [ [1, 0, 1], [0, 1, 0], [0, 0, 1] ] print(binary_matrix_check(matrix)) # Output: False ``` **Explanation**: For the first example, the matrix is symmetric because it is equal to its transpose. For the second example, the matrix is not symmetric because it is not equal to its transpose.","solution":"def binary_matrix_check(matrix: list) -> bool: Checks if a binary matrix is symmetric. Parameters: matrix (list): A 2D list of integers (0s and 1s) representing the binary matrix. Returns: bool: True if the matrix is symmetric, False otherwise. n = len(matrix) for i in range(n): for j in range(i, n): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"Write a function using PyTorch to train a simple linear regression model on the provided dataset and evaluate its mean squared error using scikit-learn\'s mean_squared_error. The function splits the dataset into training and testing sets, defines, and trains a linear regression model using PyTorch, and evaluates its performance using the mean squared error metric. This example demonstrates the integration of PyTorch for model training with scikit-learn for dataset manipulation and evaluation. The function should output: mse (float): The mean squared error of the model on the test data. You should write self-contained code starting with: ``` import torch import torch.nn as nn from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error def task_func(X, y): ```","solution":"import torch import torch.nn as nn import torch.optim as optim from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error import numpy as np def task_func(X, y): # Convert inputs to numpy arrays if they aren\'t already X = np.array(X) y = np.array(y) # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Convert to PyTorch tensors X_train_tensor = torch.tensor(X_train, dtype=torch.float32) y_train_tensor = torch.tensor(y_train, dtype=torch.float32).view(-1, 1) X_test_tensor = torch.tensor(X_test, dtype=torch.float32) y_test_tensor = torch.tensor(y_test, dtype=torch.float32).view(-1, 1) # Define a simple linear regression model model = nn.Linear(X.shape[1], 1) # Define the loss function and the optimizer loss_fn = nn.MSELoss() optimizer = optim.SGD(model.parameters(), lr=0.01) # Train the model num_epochs = 1000 for epoch in range(num_epochs): model.train() optimizer.zero_grad() y_pred = model(X_train_tensor) loss = loss_fn(y_pred, y_train_tensor) loss.backward() optimizer.step() # Evaluate the model model.eval() with torch.no_grad(): y_test_pred = model(X_test_tensor).squeeze() mse = mean_squared_error(y_test, y_test_pred.numpy()) return mse"},{"question":"** You are asked to develop a function that takes an integer `n` and returns a list of all sequences of balanced parentheses that can be formed using `n` pairs of parentheses. The function signature is: ```python def generateParentheses(n): ``` The function should generate all valid combinations of `n` pairs of parentheses and return them as a list of strings. **Constraints**: 1. The output list should contain only unique combinations. 2. Strings in the output list should represent sequences of valid, balanced parentheses. **Examples**: ```python # Example 1 n = 3 print(generateParentheses(n)) # Output: [\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"] # Example 2 n = 1 print(generateParentheses(n)) # Output: [\\"()\\"] ``` **Hint**: Use a backtracking approach to explore all possible sequences and ensure each sequence is valid before adding it to the results list.","solution":"def generateParentheses(n): Generate all combinations of n pairs of balanced parentheses. Args: n (int): Number of pairs of parentheses Returns: List[str]: A list containing all valid combinations of n pairs of parentheses. def backtrack(current, open_count, close_count): if len(current) == 2 * n: result.append(current) return if open_count < n: backtrack(current + \\"(\\", open_count + 1, close_count) if close_count < open_count: backtrack(current + \\")\\", open_count, close_count + 1) result = [] backtrack(\\"\\", 0, 0) return result"},{"question":"**In this problem, you are required to implement a function that simulates the trajectory of a projectile launched at a certain angle and velocity under the influence of gravity. The function will also plot the projectile\'s trajectory and compute the maximum height and range of the projectile. Here are the detailed requirements: # Function Name: ```python simulate_projectile ``` # Input Parameters: - `initial_velocity` (float): The initial velocity of the projectile in meters per second. - `angle` (float): The launch angle of the projectile in degrees. - `time_step` (float): The time step for the simulation in seconds. - `total_time` (float): The total duration of the simulation in seconds. # Output: - The function will return: 1. A list of tuples, each representing the (x, y) coordinates of the projectile at each time step. 2. The maximum height reached by the projectile. 3. The total horizontal distance (range) traveled by the projectile before hitting the ground. - The function will also plot: - The trajectory of the projectile using matplotlib. - Annotate the maximum height and range on the plot. # Example Usage: ```python initial_velocity = 50.0 # m/s angle = 45.0 # degrees time_step = 0.05 # s total_time = 10.0 # s trajectory, max_height, range = simulate_projectile(initial_velocity, angle, time_step, total_time) ``` # Task: Implement the `simulate_projectile` function, which: 1. Converts the launch angle from degrees to radians. 2. Computes the initial velocity components in the x and y directions. 3. Simulates the projectile motion using the equations of motion for each time step until the total time is reached or the projectile hits the ground. 4. Returns the list of (x, y) coordinates, the maximum height, and the range. 5. Plots the trajectory, annotating the maximum height and the range. # Additional Information: - Use the following libraries and functions: - `numpy.sin`, `numpy.cos`, and `numpy.deg2rad` to handle trigonometric calculations and angle conversions. - `matplotlib.pyplot.plot` to plot the projectile\'s path. - `matplotlib.pyplot.annotate` to label the maximum height and range on the plot. - Assume acceleration due to gravity `g = 9.81 m/s²`, with no air resistance. # Example Plot: The plot should show the parabolic trajectory of the projectile with clear annotations indicating the maximum height and range. **","solution":"import numpy as np import matplotlib.pyplot as plt def simulate_projectile(initial_velocity, angle, time_step, total_time): Simulates the trajectory of a projectile launched at a certain angle and velocity, plotting the trajectory and returning the coordinates, maximum height and range. Args: initial_velocity (float): The initial velocity of the projectile in meters per second. angle (float): The launch angle of the projectile in degrees. time_step (float): The time step for the simulation in seconds. total_time (float): The total duration of the simulation in seconds. Returns: tuple: A list of tuples representing the (x, y) coordinates of the projectile at each time step, the maximum height reached by the projectile, and the total horizontal distance (range) traveled by the projectile before hitting the ground. g = 9.81 # Acceleration due to gravity in m/s^2 angle_rad = np.deg2rad(angle) # Convert angle to radians # Calculate initial velocity components v_x = initial_velocity * np.cos(angle_rad) v_y = initial_velocity * np.sin(angle_rad) # Initialize lists to store x and y coordinates x_coords = [] y_coords = [] # Initialize variables for maximum height and range max_height = 0 horizontal_range = 0 # Time simulation times = np.arange(0, total_time, time_step) for t in times: x = v_x * t y = v_y * t - 0.5 * g * t ** 2 if y < 0: break x_coords.append(x) y_coords.append(y) if y > max_height: max_height = y if y_coords: horizontal_range = x_coords[-1] # Plotting the projectile trajectory plt.plot(x_coords, y_coords, label=\'Trajectory\') plt.scatter(horizontal_range, 0, color=\'red\') plt.scatter(x_coords[y_coords.index(max_height)], max_height, color=\'blue\') plt.annotate(f\'Max Height:n({x_coords[y_coords.index(max_height)]:.2f}, {max_height:.2f})\', (x_coords[y_coords.index(max_height)], max_height), textcoords=\'offset points\', xytext=(-40,10), ha=\'center\') plt.annotate(f\'Range: ({horizontal_range:.2f}, 0)\', (horizontal_range, 0), textcoords=\'offset points\', xytext=(0,-10), ha=\'center\') plt.xlabel(\'Horizontal Distance (m)\') plt.ylabel(\'Vertical Distance (m)\') plt.title(\'Projectile Trajectory\') plt.legend() plt.grid(True) plt.show() return list(zip(x_coords, y_coords)), max_height, horizontal_range"},{"question":"Implement a function `find_min_path_sum` in Python that calculates the minimum path sum in a grid from the top-left corner to the bottom-right corner, where you can only move to the right or down at each step. The function signature is: ```python def find_min_path_sum(grid): ``` **Parameters:** - `grid`: A list of lists of integers representing the grid where each cell contains a non-negative integer. **Returns:** - An integer representing the minimum path sum from the top-left to the bottom-right corner of the grid. **Example:** ``` Input: [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] Output: 7 ``` **Requirements:** - Utilize dynamic programming to build up from the top-left to bottom-right cells. - The solution should effectively handle grids of varying sizes in a computationally efficient manner.","solution":"def find_min_path_sum(grid): Calculates the minimum path sum in the grid from top-left to bottom-right corner, moving only right or down at each step. Parameters: - grid (list of lists of ints): A 2D grid where each cell contains a non-negative integer Returns: - int: The minimum path sum if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) # Initialize the first cell with itself as it is the starting point dp = [[0] * cols for _ in range(rows)] dp[0][0] = grid[0][0] # Initialize the first column (can only come from above) for r in range(1, rows): dp[r][0] = dp[r-1][0] + grid[r][0] # Initialize the first row (can only come from the left) for c in range(1, cols): dp[0][c] = dp[0][c-1] + grid[0][c] # Fill the rest of the dp table for r in range(1, rows): for c in range(1, cols): dp[r][c] = grid[r][c] + min(dp[r-1][c], dp[r][c-1]) return dp[rows-1][cols-1]"},{"question":"In this problem, you are tasked with creating a function, `count_islands`, that can identify and count the number of \\"islands\\" in a 2D grid. An island is a group of adjacent \'1\'s (horizontally or vertically) surrounded by \'0\'s. For the purpose of this problem, you can assume that groups of diagonally adjacent \'1\'s are not connected. Your function should accept one parameter: 1. `grid` (list of list of strings): A 2D grid map where \'1\' represents land and \'0\' represents water. The function should return an integer representing the number of islands found in the input grid. Here are the specific requirements: 1. Use depth-first search (DFS) or breadth-first search (BFS) algorithm to explore the grid. 2. Ensure that each cell of the grid is visited only once. 3. Mutate the grid as you perform the search or use an additional data structure to keep track of visited cells. Implement the function `count_islands(grid)` following the specifications outlined above. Example usage: ```python grid = [ [\\"1\\",\\"1\\",\\"1\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] print(count_islands(grid)) # Expected output: 2 ```","solution":"def count_islands(grid): if not grid: return 0 def dfs(x, y): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == \'0\': return grid[x][y] = \'0\' dfs(x-1, y) dfs(x+1, y) dfs(x, y-1) dfs(x, y+1) num_islands = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': dfs(i, j) num_islands += 1 return num_islands"},{"question":"You are given two binary trees. Write a function to determine whether these two trees are structurally identical (i.e., they have the same structure and node values). The function should be named `are_identical_trees` and it should take two arguments `tree1` and `tree2` which are the root nodes of the two binary trees. # Definition for a binary tree node: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` # Function Signature ```python def are_identical_trees(tree1: TreeNode, tree2: TreeNode) -> bool: ... ``` # Steps 1. If both trees are empty, return `True`. 2. If one tree is empty and the other is not, return `False`. 3. If the values of the root nodes of both trees are equal, recursively check the left and right subtrees. 4. If all corresponding subtrees are identical, return `True`. # Example Given the following trees: **Tree 1:** ``` 1 / 2 3 ``` **Tree 2:** ``` 1 / 2 3 ``` Function call `are_identical_trees(tree1, tree2)` should return `True`. Given the following trees: **Tree 1:** ``` 1 / 2 3 4 ``` **Tree 2:** ``` 1 / 2 3 / 4 ``` Function call `are_identical_trees(tree1, tree2)` should return `False`, because the structure of the trees is different even though the values are the same.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def are_identical_trees(tree1: TreeNode, tree2: TreeNode) -> bool: if tree1 is None and tree2 is None: return True if tree1 is None or tree2 is None: return False return (tree1.val == tree2.val) and are_identical_trees(tree1.left, tree2.left) and are_identical_trees(tree1.right, tree2.right)"},{"question":"You are required to implement a function `matrix_word_search(matrix: List[List[str]], word: str) -> bool` that determines if a given word can be found in a 2D grid of characters. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. Here are the specific requirements: 1. The function should take two parameters: - `matrix`: A list of lists of single-character strings representing the 2D grid. - `word`: A string representing the word to search for in the matrix. 2. The function should return a boolean value - `True` if the word can be found in the grid, and `False` otherwise. 3. You should implement a depth-first search (DFS) algorithm to explore possible paths in the grid. Below is an example of the function signature and a sample test case: ```python from typing import List def matrix_word_search(matrix: List[List[str]], word: str) -> bool: # Your implementation here pass # Sample test case matrix = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCCED\\" print(matrix_word_search(matrix, word)) # Output: True ``` In the sample test case provided: - The word \\"ABCCED\\" is found along the path [A -> B -> C -> C -> E -> D]. - Note that the function should be able to handle corner cases where the word may appear in different orientations or not at all.","solution":"from typing import List, Tuple def matrix_word_search(matrix: List[List[str]], word: str) -> bool: if not matrix or not matrix[0]: return False rows, cols = len(matrix), len(matrix[0]) def dfs(r: int, c: int, index: int) -> bool: if index == len(word): return True if r < 0 or c < 0 or r >= rows or c >= cols or matrix[r][c] != word[index]: return False # temporarily mark the cell as visited temp, matrix[r][c] = matrix[r][c], \'#\' # recursively search in all four possible directions result = ( dfs(r + 1, c, index + 1) or # down dfs(r - 1, c, index + 1) or # up dfs(r, c + 1, index + 1) or # right dfs(r, c - 1, index + 1) # left ) # restore the cell value matrix[r][c] = temp return result for i in range(rows): for j in range(cols): if dfs(i, j, 0): return True return False"},{"question":"You are tasked with creating a Python function that takes a list of integers and returns a new list where each element is the product of all the integers in the original list except for the integer at that position. Your solution should avoid using division to achieve this. This problem will help demonstrate your ability to manipulate arrays and implement algorithms with linear time complexity, O(n), and constant space complexity, O(1), (not including the output list). The function should be named `product_except_self` and should take a single parameter: - `nums` (a list of integers) Here\'s the detailed functionality required for the function: - Iterate through the list and generate a prefix product for each element. - Then, generate a suffix product by iterating from the end of the list and multiply that with the prefix product. - Store the results in a new list and return it. The function signature should look like this: ```python def product_except_self(nums): # your implementation here pass ``` Examples: - `product_except_self([1, 2, 3, 4])` should return `[24, 12, 8, 6]`. - `product_except_self([-1, 1, 0, -3, 3])` should return `[0, 0, 9, 0, 0]`. - `product_except_self([2, 2, 2, 2])` should return `[8, 8, 8, 8]`. Note: Ensure that your implementation properly handles edge cases, such as an input list containing zeros or negative numbers.","solution":"def product_except_self(nums): Returns a list of products where each element is the product of all elements except the one at that position. This implementation avoids division. if not nums: return [] length = len(nums) result = [1] * length # Calculate prefix products prefix_product = 1 for i in range(length): result[i] = prefix_product prefix_product *= nums[i] # Calculate suffix products and multiply suffix_product = 1 for i in range(length - 1, -1, -1): result[i] *= suffix_product suffix_product *= nums[i] return result"},{"question":"Write a function that takes a list of strings and returns a dictionary with the count of each unique word across all strings. The function should ignore case and punctuation, considering only alphanumeric characters as part of words. Additionally, the function should handle cases where the input is not a list of strings by raising the appropriate exception. The function should raise the exception for: ValueError: If the input is not a list. TypeError: If any element in the list is not a string. The function should output with: dict: A dictionary where keys are unique words and values are their respective counts. You should write self-contained code starting with: ``` import re from collections import defaultdict def word_count(strings: list) -> dict: ```","solution":"import re from collections import defaultdict def word_count(strings: list) -> dict: if not isinstance(strings, list): raise ValueError(\\"Input is not a list\\") word_count_dict = defaultdict(int) for string in strings: if not isinstance(string, str): raise TypeError(\\"All elements in the list must be strings\\") # Remove punctuation and convert to lower case sanitized_string = re.sub(r\'[^a-zA-Z0-9s]\', \'\', string).lower() # Split the string into words and count them words = sanitized_string.split() for word in words: word_count_dict[word] += 1 return dict(word_count_dict)"},{"question":"You are given a string containing a sequence of characters, and your task is to determine if the string is a palindrome. A palindrome is a string that reads the same backward as forward, ignoring spaces, punctuation, and case sensitivity. Write a function `is_palindrome(input_string)` that takes a single parameter: - `input_string`: a string containing the input sequence. The function should return a boolean value `True` if the input string is a palindrome, and `False` otherwise. For the purpose of this task, consider only alphanumeric characters and ignore cases, spaces, and punctuation. **Function Signature**: ```python def is_palindrome(input_string: str) -> bool: ``` **Example**: ```python # Example usage: result = is_palindrome(\\"A man, a plan, a canal, Panama\\") print(result) # Output: True result = is_palindrome(\\"Hello, World!\\") print(result) # Output: False ``` **Constraints**: - The input string may contain spaces, punctuation marks, and can vary in case. - The solution should perform in reasonable time even for long strings.","solution":"import re def is_palindrome(input_string): Determine if the input string is a palindrome, considering only alphanumeric characters and ignoring cases, spaces, and punctuation. # Remove non-alphanumeric characters and convert to lower case sanitized_string = re.sub(r\'[^a-zA-Z0-9]\', \'\', input_string).lower() # Check if the sanitized string reads the same forwards and backwards return sanitized_string == sanitized_string[::-1]"},{"question":"You are tasked with creating a function in Python that demonstrates the use of the `collections.Counter` class from the `collections` module. Your goal is to write a function named `count_items` that takes a list of items and returns a dictionary with the count of each unique item. Specifically, the function should: 1. Take one argument: - `items` (a list): A list of items, which can be of any hashable type (e.g., strings, integers). 2. Use the `collections.Counter` class to count the occurrences of each item in the list. 3. Return a dictionary where the keys are the unique items from the list, and the values are their counts. **Example Usage:** ```python count_items([\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"banana\\"]) ``` **Expected Output:** ```python {\'apple\': 2, \'banana\': 3, \'orange\': 1} ``` Ensure that the `collections.Counter` class is used as specified in the task description.","solution":"from collections import Counter def count_items(items): Returns a dictionary where keys are the unique items from the list and values are their counts. Parameters: items (list): A list of hashable items (e.g., strings, integers) Returns: dict: A dictionary with items as keys and their counts as values counter = Counter(items) return dict(counter)"},{"question":"Write a function `number_to_words(n: int) -> str` that converts a given integer `n` into its English words representation. The function should be able to handle numbers from 0 to 999,999. Detailed Requirements: - Create helper functions if necessary to break down the problem. - Consider special cases for unique English words such as \\"zero\\", \\"eleven\\", \\"twenty\\", etc. - Be attentive to spaces and hyphens in multi-word numbers. - Handle both singular and plural forms of units appropriately (\\"one thousand\\", \\"two thousand\\"). Example: ```python number_to_words(0) # should return \\"zero\\" number_to_words(13) # should return \\"thirteen\\" number_to_words(85) # should return \\"eighty-five\\" number_to_words(523) # should return \\"five hundred twenty-three\\" number_to_words(999999) # should return \\"nine hundred ninety-nine thousand nine hundred ninety-nine\\" ```","solution":"def number_to_words(n): Converts a given integer `n` (from 0 to 999,999) into its English words representation. if n == 0: return \\"zero\\" under_20 = [\\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\", \\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"] tens = [\\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"] def two_digit_number_to_words(n): if n < 20: return under_20[n-1] # -1 because the list is 0-indexed else: ten = tens[n//10 - 2] # -2 because the list starts from \'twenty\' one = \'\' if n % 10 == 0 else under_20[n % 10 - 1] return ten if one == \'\' else ten + \'-\' + one def three_digit_number_to_words(n): hundred = under_20[n // 100 - 1] + \\" hundred\\" if n // 100 != 0 else \'\' rest = \'\' if n % 100 == 0 else two_digit_number_to_words(n % 100) if hundred and rest: return hundred + \\" \\" + rest elif hundred: return hundred else: return rest result = \\"\\" if n >= 1000: result += three_digit_number_to_words(n // 1000) + \\" thousand\\" if n % 1000 != 0: result += \\" \\" + three_digit_number_to_words(n % 1000) else: result += three_digit_number_to_words(n) return result.strip()"},{"question":"You are given the task of implementing a memory cache system for frequently accessed data. The cache should efficiently store and retrieve data based on access patterns. Implement the class `LRUCache` with the following specifications: 1. The cache should be implemented using the Least Recently Used (LRU) eviction policy. 2. Your cache class `LRUCache` should have the following methods: - `__init__(self, capacity: int)`: Initialize the cache with a fixed capacity. - `get(self, key: int) -> int`: Return the value of the `key` if the key exists in the cache, otherwise return -1. - `put(self, key: int, value: int) -> None`: Insert or update the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item. # Requirements: - Your implementation should be efficient with a time complexity of O(1) for both `get` and `put` operations. - Use appropriate data structures to maintain the LRU order. # Example: ```python cache = LRUCache(2) cache.put(1, 1) # cache is {1: 1} cache.put(2, 2) # cache is {1: 1, 2: 2} print(cache.get(1)) # returns 1 cache.put(3, 3) # evicts key 2, cache is {1: 1, 3: 3} print(cache.get(2)) # returns -1 (not found) cache.put(4, 4) # evicts key 1, cache is {3: 3, 4: 4} print(cache.get(1)) # returns -1 (not found) print(cache.get(3)) # returns 3 print(cache.get(4)) # returns 4 ``` The order of operations in the example should match the LRU eviction policy. Your solution should focus on optimizing the operations to ensure they run in constant time.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 else: self.cache.move_to_end(key) # mark the key as recently used return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) # mark the key as recently used self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False) # pop the first item (least recently used)"},{"question":"Write a function that takes a list of strings and returns a list of the strings sorted by their lengths. In case of strings with the same length, maintain their original order. This will test your ability with list manipulations and sorting. The function should output: list: A list of strings sorted by their lengths. You should write self-contained code starting with: ``` def sort_strings_by_length(strings: list): ```","solution":"def sort_strings_by_length(strings: list) -> list: Takes a list of strings and returns a list of the strings sorted by their lengths. In case of strings with the same length, maintain their original order. return sorted(strings, key=len)"},{"question":"Create a function to simulate the daily temperatures for a given city over a period of one month. The temperature for each day should be normally distributed around a mean temperature, which varies based on the season. The function should generate temperatures for each day in Celsius. After simulating the temperatures, plot a histogram to show the distribution of daily temperatures and a line graph showing the temperature trend over the month. The function should output: pandas.DataFrame: A DataFrame containing the date and simulated temperature for each day. matplotlib.figure.Figure: A figure object showing both the histogram and the temperature trend plot. You should write self-contained code starting with: ``` import pandas as pd import numpy as np import matplotlib.pyplot as plt def simulate_temperatures(city, month, year, mean_temp, std_dev, random_seed=0): ```","solution":"import pandas as pd import numpy as np import matplotlib.pyplot as plt def simulate_temperatures(city, month, year, mean_temp, std_dev, random_seed=0): Simulates daily temperatures for a given city over a month. Parameters: - city (str): The city for which to simulate temperatures. - month (int): The month for which to simulate temperatures. - year (int): The year for which to simulate temperatures. - mean_temp (float): The mean temperature for the month. - std_dev (float): The standard deviation of the temperatures. - random_seed (int, default 0): The random seed for reproducibility. Returns: - pd.DataFrame: A DataFrame containing the date and simulated temperature for each day. - figure (matplotlib.figure.Figure): A figure object showing both the histogram and the temperature trend plot. np.random.seed(random_seed) # Generate dates for the given month and year dates = pd.date_range(start=f\'{year}-{month:02d}-01\', end=f\'{year}-{month:02d}-28\') # Simulate temperatures temperatures = np.random.normal(loc=mean_temp, scale=std_dev, size=len(dates)) # Create DataFrame data = pd.DataFrame({\'Date\': dates, \'Temperature\': temperatures}) # Plotting fig, ax = plt.subplots(2, 1, figsize=(10, 8)) # Histogram ax[0].hist(temperatures, bins=15, color=\'skyblue\', edgecolor=\'black\') ax[0].set_title(f\'{city} - Temperature Distribution for {month}/{year}\') ax[0].set_xlabel(\'Temperature (°C)\') ax[0].set_ylabel(\'Frequency\') # Line Plot ax[1].plot(dates, temperatures, marker=\'o\', linestyle=\'-\', color=\'coral\') ax[1].set_title(f\'{city} - Temperature Trend for {month}/{year}\') ax[1].set_xlabel(\'Date\') ax[1].set_ylabel(\'Temperature (°C)\') ax[1].xaxis.set_major_formatter(plt.FixedFormatter(dates.strftime(\'%Y-%m-%d\'))) fig.autofmt_xdate() plt.tight_layout() return data, fig"},{"question":"You are developing a simulation for a simple traffic control system at an intersection. Your goal is to implement a queue-based system that manages the flow of vehicles from four directions: North, South, East, and West. Each direction has its own queue of vehicles, where vehicles arrive at random intervals. Write a function named `manage_traffic` that simulates the traffic flow. The function should: 1. Create four empty queues, one for each direction. 2. Simulate vehicle arrivals over a given period of time (in seconds). For this simulation, assume vehicles arrive following a Poisson distribution with a given rate (vehicles per second) specific to each direction. 3. At each time step, check for arriving vehicles and add them to the respective queues. 4. Implement a simple traffic light system that allows vehicles from one direction to move forward at a time, in the order: North, East, South, West. 5. Remove vehicles from the front of the currently active queue at a specified rate (vehicles per second). 6. Continue the simulation for the given period and return the number of vehicles remaining in each queue at the end. Here is the function signature and details: ```python import random from collections import deque def manage_traffic(simulation_time, arrival_rates, service_rate): Simulates traffic flow at an intersection using queues for each direction. Args: simulation_time (int): Total time to run the simulation (in seconds). arrival_rates (dict): Dictionary with arrival rates (vehicles per second) for each direction (keys: \'North\', \'South\', \'East\', \'West\'). service_rate (float): Rate at which vehicles are processed from the queue (vehicles per second). Returns: dict: Dictionary with the count of vehicles remaining in each direction\'s queue (keys: \'North\', \'South\', \'East\', \'West\'). # Initialize queues for each direction queues = {\'North\': deque(), \'South\': deque(), \'East\': deque(), \'West\': deque()} for time in range(simulation_time): # Simulate vehicle arrivals for direction in arrival_rates: if random.random() < arrival_rates[direction]: queues[direction].append(time) # Determine which queue to process based on a simple traffic light system current_direction = [\'North\', \'East\', \'South\', \'West\'][time % 4] # Process vehicles from the front of the current queue if queues[current_direction]: service_count = int(service_rate) for _ in range(service_count): if queues[current_direction]: queues[current_direction].popleft() # Return the number of vehicles in each queue results = {direction: len(queues[direction]) for direction in queues} return results ``` Note: You may use the Poisson distribution or a simple random intake rate for vehicle arrivals and assume each vehicle takes a unit time to be processed. Function Use Example: ```python simulation_time = 100 # 100 seconds arrival_rates = {\'North\': 0.1, \'South\': 0.1, \'East\': 0.1, \'West\': 0.1} # 0.1 vehicles per second service_rate = 1 # 1 vehicle per second result = manage_traffic(simulation_time, arrival_rates, service_rate) print(result) # Example output: {\'North\': 5, \'South\': 4, \'East\': 3, \'West\': 6} ```","solution":"import random from collections import deque def manage_traffic(simulation_time, arrival_rates, service_rate): Simulates traffic flow at an intersection using queues for each direction. Args: simulation_time (int): Total time to run the simulation (in seconds). arrival_rates (dict): Dictionary with arrival rates (vehicles per second) for each direction (keys: \'North\', \'South\', \'East\', \'West\'). service_rate (float): Rate at which vehicles are processed from the queue (vehicles per second). Returns: dict: Dictionary with the count of vehicles remaining in each direction\'s queue (keys: \'North\', \'South\', \'East\', \'West\'). # Initialize queues for each direction queues = {\'North\': deque(), \'South\': deque(), \'East\': deque(), \'West\': deque()} for time in range(simulation_time): # Simulate vehicle arrivals for direction in arrival_rates: if random.random() < arrival_rates[direction]: queues[direction].append(time) # Determine which queue to process based on a simple traffic light system current_direction = [\'North\', \'East\', \'South\', \'West\'][time % 4] # Process vehicles from the front of the current queue if queues[current_direction]: service_count = int(service_rate) for _ in range(service_count): if queues[current_direction]: queues[current_direction].popleft() # Return the number of vehicles in each queue results = {direction: len(queues[direction]) for direction in queues} return results"},{"question":"Implement a function that takes a string representing a mathematical expression as input and returns the evaluated result, ensuring to handle basic arithmetic operations: addition, subtraction, multiplication, and division. The function should follow the correct order of operations (PEMDAS/BODMAS rules). Note that: - You can use the `eval` function but with caution to avoid evaluating any unsafe code. - The expression will contain non-negative integers and valid operators. The function should output: - Result: The evaluated result of the mathematical expression as a float if division is involved, otherwise as an integer. You should write self-contained code starting with: ```python def evaluate_expression(expression: str): ```","solution":"def evaluate_expression(expression: str): Evaluates a string representing a mathematical expression and returns the result. Handles basic arithmetic operations: addition, subtraction, multiplication, and division. Follows the correct order of operations (PEMDAS/BODMAS rules). Args: expression (str): The mathematical expression to evaluate. Returns: float/int: The evaluated result of the expression. try: # Use eval in a safe context that allows only arithmetic operations result = eval(expression, {\\"__builtins__\\": None}, {}) return result if isinstance(result, float) else int(result) except Exception as e: raise ValueError(\\"Invalid mathematical expression\\") from e"},{"question":"Write a function that extracts substrings from a given list of strings based on the specified start and end indices. If the end index exceeds the length of the string, extract up to the end of the string. The function should skip any strings that are shorter than the specified start index. Return a new list containing the extracted substrings. The function should be defined as: ``` def extract_substrings(strings, start_idx, end_idx): ``` Input: - `strings`: A list of strings from which substrings need to be extracted. - `start_idx`: The starting index for substring extraction. - `end_idx`: The ending index for substring extraction. Output: - A list of extracted substrings based on the indices provided. Example: ``` strings = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"] start_idx = 1 end_idx = 3 ``` Expected output: ``` [\\"pp\\", \\"an\\", \\"he\\", \\"at\\"] ```","solution":"def extract_substrings(strings, start_idx, end_idx): Extract substrings from a given list of strings based on the specified start and end indices. If the end index exceeds the length of the string, extract up to the end of the string. Skip any strings that are shorter than the specified start index. Args: strings (list of str): List of strings to extract substrings from. start_idx (int): Start index for the substring extraction. end_idx (int): End index for the substring extraction. Returns: list of str: List of extracted substrings. result = [] for s in strings: if len(s) >= start_idx: result.append(s[start_idx:end_idx]) return result"},{"question":"Create a function that takes a DataFrame containing columns of \'Product\', \'Price\', and \'Quantity\' and calculates the total value (Price * Quantity) for each product. Then group the products by their first letter and sum their total values. Return a DataFrame with the grouped first letters and their corresponding summed values. The function should output: df (DataFrame): A DataFrame containing the first letter of the product, and the summed total values of products starting with that letter. Your code should start with: ```python import pandas as pd def calculate_grouped_values(products_df): ```","solution":"import pandas as pd def calculate_grouped_values(products_df): Calculate the total value for each product and group by the first letter of the product, then sum the total values by group. Parameters: products_df (pd.DataFrame): DataFrame containing \'Product\', \'Price\', \'Quantity\' columns. Returns: pd.DataFrame: DataFrame containing the \'First_Letter\' and \'Total_Value\' columns. products_df[\'Total_Value\'] = products_df[\'Price\'] * products_df[\'Quantity\'] products_df[\'First_Letter\'] = products_df[\'Product\'].str[0] grouped_df = products_df.groupby(\'First_Letter\')[\'Total_Value\'].sum().reset_index() return grouped_df"},{"question":"You are tasked with creating a function that receives a list of integers representing the preorder traversal of a binary search tree (BST) and constructs the BST from this traversal. After constructing the BST, the function should perform an inorder traversal to return the elements in sorted order. Below is a detailed outline to guide you in completing this task: 1. **Understanding Preorder Traversal**: - The given list of integers represents the preorder traversal of a BST. - Preorder traversal visits nodes in the order: root, left subtree, then right subtree. 2. **Constructing the BST**: - Create a helper function to insert nodes into the BST. - Iterate through the given list and keep adding nodes to the BST. 3. **Inorder Traversal**: - Perform an inorder traversal of the constructed BST. - Inorder traversal visits nodes in the order: left subtree, root, then right subtree. - Collect and return the elements in a list. Create a function named `preorder_to_inorder`, which accomplishes the above steps. # Function Specification: - **Function Name**: `preorder_to_inorder` - **Input**: A list of integers representing the preorder traversal of a BST. - **Output**: A list of integers representing the inorder traversal of the constructed BST. # Example: ```python Input: [10, 5, 1, 7, 40, 50] Output: [1, 5, 7, 10, 40, 50] ``` # Assumptions: - The input list is non-empty and contains distinct integers. - The BST constructed from the preorder traversal is valid. Use the provided guidelines to implement the `preorder_to_inorder` function. # Requirements: - **BST Construction**: Utilizing preorder traversal data. - **Inorder Traversal**: Returning elements in sorted order.","solution":"class TreeNode: def __init__(self, val=0): self.val = val self.left = None self.right = None def insert_into_bst(root, val): if root is None: return TreeNode(val) if val < root.val: root.left = insert_into_bst(root.left, val) else: root.right = insert_into_bst(root.right, val) return root def preorder_to_inorder(preorder): if not preorder: return [] # Construct BST from preorder traversal root = TreeNode(preorder[0]) for val in preorder[1:]: insert_into_bst(root, val) # Helper function to perform inorder traversal def inorder_traversal(node): return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) if node else [] # Perform inorder traversal of the BST return inorder_traversal(root)"},{"question":"The task is to create a function named `cumulative_average` that takes a list of numbers as its input and performs the following operations: 1. Computes the cumulative average of the numbers in the list. 2. Returns a new list where each element is the cumulative average up to that point in the input list. Here is a step-by-step breakdown of the function requirements: - The function should initialize an empty list to store the cumulative averages. - As it iterates through the input list of numbers, it should maintain a running sum and a count of the numbers processed so far. - For each number in the input list, the function should compute the average by dividing the running sum by the count, then append this average to the cumulative average list. - Finally, the function should return the list of cumulative averages. Example: ```python input_list = [1, 2, 3, 4] output_list = cumulative_average(input_list) print(output_list) # Output should be [1.0, 1.5, 2.0, 2.5] ``` In this example, the cumulative averages are computed as follows: 1. Average of the first element: (1) / 1 = 1.0 2. Average of the first two elements: (1 + 2) / 2 = 1.5 3. Average of the first three elements: (1 + 2 + 3) / 3 = 2.0 4. Average of all four elements: (1 + 2 + 3 + 4) / 4 = 2.5","solution":"def cumulative_average(numbers): Computes the cumulative average of a list of numbers. Parameters: numbers (list): A list of numbers. Returns: list: A list of cumulative averages. cumulative_sum = 0 cumulative_avgs = [] for count, number in enumerate(numbers, start=1): cumulative_sum += number cumulative_avgs.append(cumulative_sum / count) return cumulative_avgs"},{"question":"You are required to write a function `FindFrequentWords(text, k)` that identifies the k most frequent words in a given text and logs this information to a CSV file. The function should also print the top k most frequent words to the console along with their frequencies. Here are the detailed requirements: 1. **Parameters:** - `text`: A string that contains the text from which to identify frequent words. Example: `\\"hello world hello programming world\\"` - `k`: An integer specifying the number of top frequent words to find. Example: `2` 2. **CSV File (`frequent_words.csv`):** - Write the `WORD` and `FREQUENCY` for each of the top k most frequent words to a CSV file named `frequent_words.csv`. 3. **Console Output:** - Print each of the top k most frequent words along with their frequencies to the console. 4. Ignore punctuation and consider case-insensitive matches for words. Use a helper function to clean and split the text into words. Here is a template for the function signature you need to implement: ```python import csv import collections def FindFrequentWords(text, k): Identifies and logs the k most frequent words to a CSV file and prints them to the console. # Function to clean and split text into words def clean_and_split(text): # Convert text to lowercase text = text.lower() # Remove punctuation text = \'\'.join(c for c in text if c.isalnum() or c.isspace()) # Split text into words words = text.split() return words words = clean_and_split(text) # Count frequencies of words using collections.Counter counter = collections.Counter(words) # Find the k most common words most_common_words = counter.most_common(k) # Write to CSV file with open(\'frequent_words.csv\', mode=\'w\', newline=\'\') as file: writer = csv.writer(file) writer.writerow([\'WORD\', \'FREQUENCY\']) for word, freq in most_common_words: writer.writerow([word, freq]) # Print to console for word, freq in most_common_words: print(f\'{word}: {freq}\') ```","solution":"import csv import collections def FindFrequentWords(text, k): Identifies and logs the k most frequent words to a CSV file and prints them to the console. # Function to clean and split text into words def clean_and_split(text): # Convert text to lowercase text = text.lower() # Remove punctuation text = \'\'.join(c for c in text if c.isalnum() or c.isspace()) # Split text into words words = text.split() return words words = clean_and_split(text) # Count frequencies of words using collections.Counter counter = collections.Counter(words) # Find the k most common words most_common_words = counter.most_common(k) # Write to CSV file with open(\'frequent_words.csv\', mode=\'w\', newline=\'\') as file: writer = csv.writer(file) writer.writerow([\'WORD\', \'FREQUENCY\']) for word, freq in most_common_words: writer.writerow([word, freq]) # Print to console for word, freq in most_common_words: print(f\'{word}: {freq}\')"},{"question":"Given a list of integers, you need to write a function that partitions the list into two subsets such that the difference between the sum of elements in the two subsets is minimized. Specifically, your function should return a tuple containing the two subsets that result in the minimal difference in their sums. Your task is to write a function `min_difference_partition(nums: List[int]) -> Tuple[List[int], List[int]]` in Python that accomplishes this. To clarify: 1. You need to find two subsets from the original list `nums` with minimal possible absolute difference in their sums. 2. The function should return the two subsets as a tuple, e.g., `([subset1], [subset2])`. **Function Signature:** ```python def min_difference_partition(nums: List[int]) -> Tuple[List[int], List[int]]: pass ``` **Example:** ```python nums = [1, 6, 11, 5] subset1, subset2 = min_difference_partition(nums) # Expected output: # subset1 = [1, 6, 5] or [11, 1] # subset2 = [11] or [6, 5] # The difference between the sums of subset1 and subset2 is minimized to 1. ``` **Note:** - The solution should return any valid partition with the minimal possible difference. - You may assume the list contains positive integers and its length will not exceed 20 for efficient computation.","solution":"from typing import List, Tuple def min_difference_partition(nums: List[int]) -> Tuple[List[int], List[int]]: n = len(nums) total_sum = sum(nums) target = total_sum // 2 # Dynamic programming table: dp[i][j] will be True if # a subset with sum j can be attained using the first i numbers. dp = [[False] * (target + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(target + 1): dp[i][j] = dp[i - 1][j] if j >= nums[i - 1]: dp[i][j] = dp[i][j] or dp[i - 1][j - nums[i - 1]] # Find the largest value in the last row which is True. for j in range(target, -1, -1): if dp[n][j]: subset1_sum = j break subset1 = [] subset2 = nums.copy() remaining_sum = subset1_sum for i in range(n, 0, -1): if remaining_sum >= nums[i-1] and dp[i-1][remaining_sum - nums[i-1]]: subset1.append(nums[i-1]) subset2.remove(nums[i-1]) remaining_sum -= nums[i-1] return (subset1, subset2)"},{"question":"You are asked to write a function called `longest_sequence` that takes a list of integers and returns the length of the longest contiguous subsequence where the absolute difference between any two consecutive elements is at most 1. The function should efficiently find the longest possible subsequence that satisfies the given condition. Your task: 1. Implement the function `longest_sequence(nums: List[int]) -> int`. 2. Ensure the function handles edge cases, such as an empty list. 3. Optimize the function to run in O(n) time. Example Usage: ```python sequence_length = longest_sequence([1, 2, 2, 3, 4, 5, 1, 2, 3]) print(f\\"Length of the longest sequence: {sequence_length}\\") ``` Example Output: ``` Length of the longest sequence: 6 # For the subsequence [1, 2, 2, 3, 4, 5] ```","solution":"from typing import List def longest_sequence(nums: List[int]) -> int: if not nums: return 0 max_length = current_length = 1 for i in range(1, len(nums)): if abs(nums[i] - nums[i - 1]) <= 1: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length)"},{"question":"You are required to implement a function called `top_k_frequent_elements` that takes a list of integers `nums` and an integer `k`, and returns the `k` most frequent elements in the list. You will use the `collections.Counter` class from the `collections` module to count the frequency of elements. The inputs to the function are: - `nums`: A list of integers. - `k`: An integer representing the number of top frequent elements to return. The function should return a list of the `k` most frequent elements in descending order of their frequency. In the case of a tie in frequency, the order of elements with the same frequency does not matter. **Requirements**: - Utilize the `collections.Counter` to count the frequency of elements as shown in the provided `Python Documentation`. **Function Signature**: ```python def top_k_frequent_elements(nums: List[int], k: int) -> List[int]: pass ``` **Example**: ```python from collections import Counter from typing import List def top_k_frequent_elements(nums: List[int], k: int) -> List[int]: counts = Counter(nums) return [item for item, count in counts.most_common(k)] # Example usage: nums = [1, 1, 1, 2, 2, 3] k = 2 print(top_k_frequent_elements(nums, k)) # Expected Output: [1, 2] nums = [4, 4, 4, 4, 2, 2, 2, 3, 3, 1] k = 3 print(top_k_frequent_elements(nums, k)) # Expected Output: [4, 2, 3] ```","solution":"from collections import Counter from typing import List def top_k_frequent_elements(nums: List[int], k: int) -> List[int]: Returns the k most frequent elements in descending order of their frequency. Parameters: nums (List[int]): List of integers. k (int): Number of top frequent elements to return. Returns: List[int]: List of the k most frequent elements. counts = Counter(nums) return [item for item, count in counts.most_common(k)]"},{"question":"You are given a text file that contains numerous paragraphs of text. Your task is to write a function that processes this text file and provides specific analytics about the content. Specifically, you need to write a function named `text_file_analysis` which accepts a single parameter: `file_path` (a string representing the path to the text file). The function should do the following: 1. Read the entire content of the file located at `file_path`. 2. Divide the content into paragraphs. A paragraph in the text file is defined as a block of text separated by one or more blank lines. 3. For each paragraph, print the following information: - The total number of words in the paragraph. - The number of unique words in the paragraph. - The average word length in the paragraph (rounded to two decimal places). **Function Signature:** ```python def text_file_analysis(file_path: str) -> None: ``` **Example Text File Content:** Assume the text file `./text_file.txt` contains the following text: ``` Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque varius justo eget erat dignissim, ut fermentum est tristique. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Nullam vehicula, ipsum eu maximus lobortis, purus augue dictum purus, id porta ex felis non sapien. Praesent nec felis ac purus tincidunt dictum eu in purus. ``` Your function should analyze this file and print the required information for each paragraph. **Requirements:** - Ensure that the file is read correctly and the paragraphs are processed as expected. - Handle various text formatting intricacies, such as multiple blank lines separating paragraphs. - Assume each word consists of alphanumeric characters and is separated by whitespace. **Hint:** Consider using regular expressions to split paragraphs and words effectively.","solution":"import re def text_file_analysis(file_path): with open(file_path, \'r\', encoding=\'utf-8\') as file: content = file.read() paragraphs = re.split(r\'ns*n\', content.strip()) for paragraph in paragraphs: words = re.findall(r\'bw+b\', paragraph) num_words = len(words) unique_words = set(words) num_unique_words = len(unique_words) if num_words > 0: avg_word_length = round(sum(len(word) for word in words) / num_words, 2) else: avg_word_length = 0.00 print(f\\"Paragraph analysis:\\") print(f\\"Total number of words: {num_words}\\") print(f\\"Number of unique words: {num_unique_words}\\") print(f\\"Average word length: {avg_word_length:.2f}\\") print(\'-\' * 40)"},{"question":"You are given a list of login attempts for a web application, where each attempt is recorded as a tuple containing a `timestamp` (in the format `YYYY-MM-DD HH:MM:SS`), `username`, and `login_status` (either `success` or `failure`). Your task is to write a function called `find_failed_login_streaks` that will detect consecutive failed login attempts for each user and record the longest streak of failures per user. Here are the details you need to consider: 1. **Function Signature:** ```python def find_failed_login_streaks(login_attempts: List[Tuple[str, str, str]]) -> Dict[str, int]: ``` 2. **Parameters:** - `login_attempts` (List[Tuple[str, str, str]]): A list of login attempt records, where each record is a tuple containing the `timestamp` (str), `username` (str), and `login_status` (str). 3. **Returns:** - A dictionary where the key is the `username` and the value is the length of the longest streak of consecutive failed login attempts for that user. 4. **Behavior:** - The function should iterate through the list of login attempts and calculate the longest streak of consecutive failures for each user. - Keep track of the longest streak for each user and return a dictionary containing the results. 5. **Requirements:** - Handle cases where a user may have no failed attempts or no streaks of failures. - login_attempts are provided already sorted by timestamp. **Example:** Assume you have the following login attempts: ```python login_attempts = [ (\\"2023-01-01 10:00:00\\", \\"user1\\", \\"failure\\"), (\\"2023-01-01 10:01:00\\", \\"user1\\", \\"failure\\"), (\\"2023-01-01 10:02:00\\", \\"user1\\", \\"success\\"), (\\"2023-01-01 10:03:00\\", \\"user1\\", \\"failure\\"), (\\"2023-01-01 10:04:00\\", \\"user2\\", \\"failure\\"), (\\"2023-01-01 10:05:00\\", \\"user2\\", \\"failure\\"), (\\"2023-01-01 10:07:00\\", \\"user2\\", \\"failure\\"), (\\"2023-01-01 10:08:00\\", \\"user2\\", \\"success\\") ] ``` ```python output = find_failed_login_streaks(login_attempts) # Expected output: {\'user1\': 2, \'user2\': 3} ```","solution":"from typing import List, Tuple, Dict def find_failed_login_streaks(login_attempts: List[Tuple[str, str, str]]) -> Dict[str, int]: result = {} current_streak = {} for timestamp, username, login_status in login_attempts: if username not in current_streak: current_streak[username] = 0 result[username] = 0 if login_status == \\"failure\\": current_streak[username] += 1 result[username] = max(result[username], current_streak[username]) else: current_streak[username] = 0 return result"},{"question":"Given a DataFrame that includes two columns of numerical values, calculate the pairwise Euclidean distance between rows and return a new DataFrame where each element represents the distance between rows. The input DataFrame contains two columns named \'x\' and \'y\' with numerical values. The function should compute the Euclidean distance using the formula sqrt((x2 - x1)^2 + (y2 - y1)^2). The output DataFrame should have the same row and column index labels as the input DataFrame, and each element (i, j) should contain the distance between row i and row j. The function should raise an Exception for ValueError if there are any non-numeric values in the \'x\' or \'y\' columns. You should write self-contained code starting with: ``` import pandas as pd import numpy as np def compute_pairwise_distances(df): ```","solution":"import pandas as pd import numpy as np def compute_pairwise_distances(df): Compute pairwise Euclidean distances between rows in a DataFrame. Parameters: df (DataFrame): DataFrame with two columns \'x\' and \'y\' containing numerical values. Returns: DataFrame: DataFrame where element (i, j) is the Euclidean distance between row i and row j. Raises: ValueError: If there are any non-numeric values in the \'x\' or \'y\' columns. if not pd.api.types.is_numeric_dtype(df[\'x\']) or not pd.api.types.is_numeric_dtype(df[\'y\']): raise ValueError(\\"Both \'x\' and \'y\' columns must contain only numerical values.\\") def euclidean_distance(row1, row2): return np.sqrt((row1[\'x\'] - row2[\'x\']) ** 2 + (row1[\'y\'] - row2[\'y\']) ** 2) distances = pd.DataFrame(index=df.index, columns=df.index, dtype=float) for i in df.index: for j in df.index: distances.at[i, j] = euclidean_distance(df.loc[i], df.loc[j]) return distances"},{"question":"Create a function that simulates a simple stock trading strategy and calculates the profit or loss from a series of daily stock prices. The strategy is to always buy one unit of stock when the price is lower than the previous day\'s price and sell one unit of stock when the price is higher than the previous day\'s price. The function should take a list of integers representing daily stock prices and return a single integer representing the total profit or loss from applying this trading strategy. You should write self-contained code starting with: ``` def trading_strategy(prices: List[int]) -> int: ```","solution":"from typing import List def trading_strategy(prices: List[int]) -> int: Simulates a simple stock trading strategy and calculates the total profit or loss from a series of daily stock prices. :param prices: List of integers representing daily stock prices :return: Total profit or loss from applying the trading strategy profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: profit += (prices[i] - prices[i - 1]) # if prices[i] < prices[i - 1], no need to track \\"loss\\" since # we would never be buying at higher and selling at lower. return profit"},{"question":"You are tasked with implementing a `matrix_multiplication` function that performs the multiplication of two matrices. Your function will take two matrices as input and return the resultant matrix. Each matrix is represented as a list of lists, where each inner list represents a row of the matrix. The function should check for the compatibility of the matrices for multiplication and raise a `ValueError` if the matrices cannot be multiplied (i.e., the number of columns in the first matrix does not equal the number of rows in the second matrix). Here\'s what you need to do: 1. Validate the input matrices to ensure they are lists of lists containing numerical values. 2. Ensure that the number of columns in the first matrix equals the number of rows in the second matrix. 3. Perform the matrix multiplication and return the resultant matrix. You need to define the function as follows: ```python def matrix_multiplication(matrix1, matrix2): # Your code will go here ``` **Function Signature:** ```python def matrix_multiplication(matrix1: list[list[float]], matrix2: list[list[float]]) -> list[list[float]]: pass ``` **Input:** - `matrix1`: A list of lists where each inner list represents a row of the first matrix. - `matrix2`: A list of lists where each inner list represents a row of the second matrix. **Output:** - A list of lists representing the resultant matrix after multiplication. **Example:** ```python matrix1 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] matrix2 = [ [9, 8, 7], [6, 5, 4], [3, 2, 1] ] result = matrix_multiplication(matrix1, matrix2) print(result) # Output should be [[30, 24, 18], [84, 69, 54], [138, 114, 90]] ```","solution":"def matrix_multiplication(matrix1, matrix2): Multiplies two matrices and returns the resultant matrix. :param matrix1: List of lists representing the first matrix. :param matrix2: List of lists representing the second matrix. :return: Resultant matrix after multiplication. :raises ValueError: If the matrices cannot be multiplied due to dimension mismatch. # Validate input matrices if not all(isinstance(row, list) for row in matrix1) or not all(isinstance(row, list) for row in matrix2): raise ValueError(\\"Both matrices must be lists of lists\\") if not all(isinstance(elm, (int, float)) for row in matrix1 for elm in row) or not all(isinstance(elm, (int, float)) for row in matrix2 for elm in row): raise ValueError(\\"All elements in the matrices must be numerical values\\") num_rows_matrix1 = len(matrix1) num_cols_matrix1 = len(matrix1[0]) num_rows_matrix2 = len(matrix2) num_cols_matrix2 = len(matrix2[0]) # Check for compatibility if num_cols_matrix1 != num_rows_matrix2: raise ValueError(\\"The number of columns in the first matrix must be equal to the number of rows in the second matrix\\") # Initialize the result matrix with zeros result = [[0 for _ in range(num_cols_matrix2)] for _ in range(num_rows_matrix1)] # Perform matrix multiplication for i in range(num_rows_matrix1): for j in range(num_cols_matrix2): for k in range(num_cols_matrix1): result[i][j] += matrix1[i][k] * matrix2[k][j] return result"},{"question":"In this problem, you need to implement a function that finds the k-th smallest element in an unsorted list. The function should handle edge cases such as when k is greater than the length of the list or when the list is empty. Specifically, complete the function `findKthSmallest(arr, k)` which will return the k-th smallest element in the list `arr`. **Function Signature:** ```python def findKthSmallest(arr, k): Returns the k-th smallest element in the list. ``` # Requirements: - Use the Python `sorted` function to sort the list. - Handle edge cases by raising an `IndexError` if k is out of bounds. # Input: - `arr`: A list of integers. - `k`: An integer representing the k-th position (1-based index). # Output: - The function should return an integer which is the k-th smallest element in the list. **Example**: ```python arr = [7, 10, 4, 3, 20, 15] k = 3 result = findKthSmallest(arr, k) print(result) # Expected output: 7 ``` **Additional Example**: ```python arr = [7, 10, 4, 3, 20, 15] k = 1 result = findKthSmallest(arr, k) print(result) # Expected output: 3 ``` # Constraints: - You may assume that k is a positive integer.","solution":"def findKthSmallest(arr, k): Returns the k-th smallest element in the list. if k <= 0 or k > len(arr): raise IndexError(\\"k is out of bounds\\") sorted_arr = sorted(arr) return sorted_arr[k-1]"},{"question":"Write a function that takes a list of integers and two additional integers, `k` and `n`. The function finds contiguous subarrays within the list whose sum is exactly `n` and whose length is at most `k`. The function should return a list of these subarrays. The function should output with: matching_subarrays (list): A list of lists, where each internal list is a contiguous subarray that meets the criteria. You should write self-contained code starting with: ``` def find_matching_subarrays(arr, k, n): ```","solution":"def find_matching_subarrays(arr, k, n): This function finds all contiguous subarrays whose sum is exactly `n` and whose length is at most `k`. Args: - arr (list of int): The input list of integers. - k (int): The maximum length of any subarray. - n (int): The target sum for the subarrays. Returns: - matching_subarrays (list of lists): A list of contiguous subarrays that match the criteria. matching_subarrays = [] length = len(arr) for start in range(length): for end in range(start + 1, min(start + k + 1, length + 1)): subarray = arr[start:end] if sum(subarray) == n: matching_subarrays.append(subarray) return matching_subarrays"},{"question":"In this problem, you need to write a function that takes a string containing a mathematical equation with addition and subtraction operations, evaluates the equation, and returns the result. However, the twist is that you are not allowed to use Python\'s built-in `eval` function or similar high-level functions that directly evaluate the expression. Instead, you will have to parse and compute the result manually. # Function Specifications: 1. **Function Name**: `evaluate_expression` 2. **Function Input**: The function should take a single input, a string `expression` which consists of non-negative integers and operations `+` and `-`. The string will not contain any spaces. 3. **Output**: The function should return an integer which is the result of the computed expression. 4. **Constraints**: - The input string will only contain digits and the characters `+` and `-`. - The input string will be non-empty and will be a valid expression. - There will be no consecutive operators, and the expression will not start or end with an operator. # Example ```python result = evaluate_expression(\\"3+5-2\\") print(result) ``` Output: ``` 6 ``` # Requirements: - You need to manually parse the input string and handle the addition and subtraction operations. - Avoid using the `eval` function or any other high-level function that evaluates the expression directly.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing only addition and subtraction. Args: expression (str): A string containing the mathematical expression. Returns: int: The result of the evaluated expression. total = 0 current_number = 0 sign = 1 # 1 for positive, -1 for negative for char in expression: if char.isdigit(): current_number = current_number * 10 + int(char) else: total += sign * current_number current_number = 0 if char == \'+\': sign = 1 elif char == \'-\': sign = -1 total += sign * current_number return total"},{"question":"Create a class named `Library` that manages a collection of books. Each book in the library is represented by a dictionary with keys: `title`, `author`, `year`, and `copies`. The `Library` class should provide methods to add a book, remove a book, borrow a book (decrease the number of available copies), and return a book (increase the number of available copies). The `Library` class should have the following methods: 1. `__init__(self)`: Initializes an empty list to store books. 2. `add_book(self, title, author, year, copies)`: Adds a new book to the library. 3. `remove_book(self, title)`: Removes a book from the library by its title. 4. `borrow_book(self, title)`: Borrows a book by reducing its copies by 1 if available. 5. `return_book(self, title)`: Returns a book by increasing its copies by 1 if it exists in the library. Each method should appropriately handle cases where the book may not exist in the library. # Example: ```python library = Library() library.add_book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925, 3) library.add_book(\\"1984\\", \\"George Orwell\\", 1949, 2) library.borrow_book(\\"1984\\") library.borrow_book(\\"The Great Gatsby\\") library.borrow_book(\\"The Great Gatsby\\") print(library.books) # Expected: [{\'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\', \'year\': 1925, \'copies\': 1}, {\'title\': \'1984\', \'author\': \'George Orwell\', \'year\': 1949, \'copies\': 1}] library.return_book(\\"The Great Gatsby\\") print(library.books) # Expected: [{\'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\', \'year\': 1925, \'copies\': 2}, {\'title\': \'1984\', \'author\': \'George Orwell\', \'year\': 1949, \'copies\': 1}] ```","solution":"class Library: def __init__(self): Initializes an empty list to store books. self.books = [] def add_book(self, title, author, year, copies): Adds a new book to the library. self.books.append({\\"title\\": title, \\"author\\": author, \\"year\\": year, \\"copies\\": copies}) def remove_book(self, title): Removes a book from the library by its title. self.books = [book for book in self.books if book[\\"title\\"] != title] def borrow_book(self, title): Borrows a book by reducing its copies by 1 if available. for book in self.books: if book[\\"title\\"] == title: if book[\\"copies\\"] > 0: book[\\"copies\\"] -= 1 else: print(\\"No copies available\\") return def return_book(self, title): Returns a book by increasing its copies by 1 if it exists in the library. for book in self.books: if book[\\"title\\"] == title: book[\\"copies\\"] += 1 return"},{"question":"In this problem, you need to implement a simple text-based Minesweeper game in Python. You will define a function `create_minesweeper_board(rows, cols, mines)` which will generate a minesweeper board of given dimensions and place the specified number of mines randomly within the board. Your function should: 1. Create an `rows` x `cols` grid initialized with zeros. 2. Randomly place exactly `mines` number of mines (represented as `-1`) within the grid. 3. Update the grid with the correct mine counts for each non-mine cell. Each cell should contain the number of mines in its adjacent cells (including diagonals). Here is the sample function signature to get you started: ```python import random def create_minesweeper_board(rows, cols, mines): # Create an empty board board = [[0 for _ in range(cols)] for _ in range(rows)] # Place mines randomly mine_positions = set() while len(mine_positions) < mines: mine_positions.add((random.randint(0, rows-1), random.randint(0, cols-1))) for (r, c) in mine_positions: board[r][c] = -1 # Calculate adjacent mine counts for r in range(rows): for c in range(cols): if board[r][c] == -1: continue # Check all adjacent cells mine_count = 0 for i in range(max(0, r-1), min(r+2, rows)): for j in range(max(0, c-1), min(c+2, cols)): if board[i][j] == -1: mine_count += 1 board[r][c] = mine_count return board # Example call to your function might look like this: # create_minesweeper_board(5, 5, 5) ``` You can test your function by printing the board in a readable format or writing additional functions to display the board.","solution":"import random def create_minesweeper_board(rows, cols, mines): Creates a Minesweeper board of given dimensions with the specified number of mines. Args: rows (int): Number of rows in the board. cols (int): Number of columns in the board. mines (int): Number of mines to place on the board. Returns: list: 2D list representing the Minesweeper board. # Create an empty board board = [[0 for _ in range(cols)] for _ in range(rows)] # Place mines randomly mine_positions = set() while len(mine_positions) < mines: mine_positions.add((random.randint(0, rows-1), random.randint(0, cols-1))) for (r, c) in mine_positions: board[r][c] = -1 # Calculate adjacent mine counts for r in range(rows): for c in range(cols): if board[r][c] == -1: continue # Check all adjacent cells mine_count = 0 for i in range(max(0, r-1), min(r+2, rows)): for j in range(max(0, c-1), min(c+2, cols)): if board[i][j] == -1: mine_count += 1 board[r][c] = mine_count return board"},{"question":"You have a text file named `student_grades.txt` containing the names and grades of students. Each line in the file is formatted as \\"Name Grade\\" (e.g., \\"Alice 85\\"), separated by a space. Write a function named `calculate_grade_distribution` that: 1. Reads the data from the `student_grades.txt` file. 2. Calculates the number of students falling into each grade category based on the following rules: - \\"A\\" for grades between 90 and 100 (inclusive). - \\"B\\" for grades between 80 and 89 (inclusive). - \\"C\\" for grades between 70 and 79 (inclusive). - \\"D\\" for grades between 60 and 69 (inclusive). - \\"F\\" for grades below 60. 3. Prints the number of students in each category in the format \\"A: X, B: Y, C: Z, D: W, F: V\\". Ensure that: - The function is named `calculate_grade_distribution`. - You properly handle reading the file and processing each line to extract the name and grade. - You categorize and count the grades accurately according to the specified ranges. Example content of `student_grades.txt`: ``` Alice 95 Bob 67 Charlie 78 Daisy 81 Edward 55 ```","solution":"def calculate_grade_distribution(file_path=\'student_grades.txt\'): Reads the data from the student_grades.txt file and calculates the number of students falling into each grade category, then prints the results. grade_distribution = {\'A\': 0, \'B\': 0, \'C\': 0, \'D\': 0, \'F\': 0} with open(file_path, \'r\') as file: lines = file.readlines() for line in lines: name, grade = line.strip().split() grade = int(grade) if 90 <= grade <= 100: grade_distribution[\'A\'] += 1 elif 80 <= grade <= 89: grade_distribution[\'B\'] += 1 elif 70 <= grade <= 79: grade_distribution[\'C\'] += 1 elif 60 <= grade <= 69: grade_distribution[\'D\'] += 1 else: grade_distribution[\'F\'] += 1 print(f\\"A: {grade_distribution[\'A\']}, B: {grade_distribution[\'B\']}, C: {grade_distribution[\'C\']}, D: {grade_distribution[\'D\']}, F: {grade_distribution[\'F\']}\\") # Example usage: # calculate_grade_distribution(\'student_grades.txt\')"},{"question":"You are required to implement a function called `merge_unique_lists` that merges two lists of integers and returns a new list that contains only the unique elements from both lists, preserving the order they first appear in the input lists. **Function Signature:** ```python def merge_unique_lists(list1: list, list2: list) -> list: ``` **Parameters:** 1. `list1` (list): The first input list of integers. 2. `list2` (list): The second input list of integers. **Returns:** - A new list of integers that contains only the unique elements from `list1` and `list2` in the order they appeared in the original lists. **Example:** ```python list1 = [1, 3, 2, 4, 5] list2 = [2, 6, 3, 7, 8] print(merge_unique_lists(list1, list2)) ``` **Output:** ``` [1, 3, 2, 4, 5, 6, 7, 8] ``` **Constraints:** - The input lists can be of different lengths. - The input lists can be empty. - The values in the input lists are within the integer range. # Implementation Details - Avoid unnecessary nested loops to minimize time complexity. - Utilize a set to track and check for unique elements to maintain efficiency. To complete the task, follow these detailed steps: 1. Create an empty list for the result and an empty set to track seen elements. 2. Iterate through the first list, add elements to the result list and set if they haven\'t been seen before. 3. Repeat the above step for the second list.","solution":"def merge_unique_lists(list1: list, list2: list) -> list: Merge two lists and return a list with unique elements in the order they first appeared in the original lists. Parameters: - list1 (list): The first input list of integers. - list2 (list): The second input list of integers. Returns: - list: A new list containing unique integers from list1 and list2. seen = set() merged_list = [] for item in list1 + list2: # Concatenate the lists for single pass iteration if item not in seen: seen.add(item) merged_list.append(item) return merged_list"},{"question":"``` Create a function that takes a list of dictionaries where each dictionary contains a user\'s name and their corresponding login count. The function should generate a bar chart showing the total login counts for each user. - The DataFrame should have columns \'User\' and \'LoginCount\'. - The plot title should be \'User Login Counts\'. - The x-axis label should be \'User\'. - The y-axis label should be \'Total Logins\'. The function should output with: tuple: A tuple containing: DataFrame: A pandas DataFrame with the user\'s name and login count. Axes: The Axes object of the bar chart visualizing the login counts per user. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def task_func(user_data): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def task_func(user_data): Takes a list of dictionaries containing user names and their login counts, then generates a bar chart showing the total login counts for each user. Arguments: user_data : list of dicts : [{\'name\': <user_name>, \'login_count\': <login_count>}] Returns: tuple : (DataFrame, Axes object) # Create a DataFrame from the user data df = pd.DataFrame(user_data) # Check if DataFrame is empty if df.empty: raise ValueError(\\"The input user data must not be empty.\\") # Rename columns for clarity df.columns = [\'User\', \'LoginCount\'] # Generate the bar chart ax = df.plot(kind=\'bar\', x=\'User\', y=\'LoginCount\', legend=False) # Set the title and labels ax.set_title(\'User Login Counts\') ax.set_xlabel(\'User\') ax.set_ylabel(\'Total Logins\') # Return the DataFrame and the Axes object return df, ax"},{"question":"Create a function that parses a JSON file containing user data, calculates the average age of users, and outputs the result to a new JSON file. The function should ignore users with missing or invalid age data. The format of the JSON file is as follows: ```json [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"email\\": \\"alice@example.com\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"email\\": \\"bob@example.com\\"}, ... ] ``` The output file should contain a single key \\"average_age\\" with the calculated average. The function should raise the exception for: ValueError: If the input file is empty, not readable, or contains no valid age data. IOError: If the file cannot be written to the specified directory. The function should output with: str: The file path of the generated JSON report. You should write self-contained code starting with: ```python import json from statistics import mean import os def calculate_average_age(input_file_path, output_dir=\\".\\", output_file_name=\\"average_age_report.json\\"): ```","solution":"import json from statistics import mean import os def calculate_average_age(input_file_path, output_dir=\\".\\", output_file_name=\\"average_age_report.json\\"): # Read and parse the input JSON file try: with open(input_file_path, \'r\') as file: users = json.load(file) except (IOError, ValueError) as e: raise ValueError(\\"The input file is not readable or contains invalid JSON data.\\") from e # Extract valid ages ages = [user[\'age\'] for user in users if isinstance(user.get(\'age\'), int) and user[\'age\'] > 0] if not ages: raise ValueError(\\"The input file contains no valid age data.\\") # Calculate the average age average_age = mean(ages) # Prepare the output data output_data = {\\"average_age\\": average_age} output_file_path = os.path.join(output_dir, output_file_name) # Write the output JSON file try: with open(output_file_path, \'w\') as outfile: json.dump(output_data, outfile) except IOError as e: raise IOError(\\"Unable to write to the output directory.\\") from e return output_file_path"},{"question":"Write a function that takes a list of numerical dictionaries, calculates the moving average for a specified window size, and visualizes the resulting time series along with the moving average using Matplotlib. The function should output: A tuple containing: - A pandas DataFrame with the original data and the moving average. - A Matplotlib Axes object for the plot of the original data and the moving average. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def task_func(data_list, window_size): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def task_func(data_list, window_size): This function takes a list of numerical dictionaries and a specified window size, calculates the moving average, and plots the original time series data along with the moving average. Parameters: data_list (list): A list of dictionaries where each dictionary contains \'timestamp\' and \'value\' keys. window_size (int): The window size for calculating the moving average. Returns: tuple: A pandas DataFrame with the original data and the moving average, and a Matplotlib Axes object for the plot. # Convert the list of dictionaries to a DataFrame df = pd.DataFrame(data_list) # Calculate the moving average df[\'moving_average\'] = df[\'value\'].rolling(window=window_size).mean() # Plot the original data and the moving average ax = df.plot(x=\'timestamp\', y=[\'value\', \'moving_average\'], figsize=(12, 6), title=\'Time Series Data and Moving Average\') ax.set_xlabel(\\"Timestamp\\") ax.set_ylabel(\\"Value\\") plt.show() return df, ax"},{"question":"In this problem, you need to create a function named `generate_hashtag(s)`. This function takes a single argument, a string `s`, which represents a sentence. Your task is to convert this sentence into a hashtag suitable for social media. The rules for generating the hashtag are: 1. The final hashtag should start with a hash symbol (`#`). 2. Each word in the input should be capitalized. 3. All spaces should be removed to form the final hashtag. 4. If the input is an empty string, the function should return an empty string. Function Signature ```python def generate_hashtag(s: str) -> str: ``` Example ```python >>> generate_hashtag(\\"hello world\\") \'#HelloWorld\' >>> generate_hashtag(\\" Code assessment question \\") \'#CodeAssessmentQuestion\' >>> generate_hashtag(\\" \\") \'\' >>> generate_hashtag(\\"Hashtag Generation Example\\") \'#HashtagGenerationExample\' ``` **Note:** - The input string can contain leading or trailing spaces, which should be ignored. - Consecutive spaces should be treated as a single space. - You do not need to handle special characters other than space and alphabetic characters in this problem.","solution":"def generate_hashtag(s: str) -> str: Returns a formatted hashtag based on the given sentence. # Strip leading and trailing spaces s = s.strip() # Check if the input string is empty after trimming spaces if not s: return \'\' # Split the string into words, capitalize each word and join them without spaces words = s.split() formatted_words = [word.capitalize() for word in words] hashtag = \'#\' + \'\'.join(formatted_words) return hashtag"},{"question":"You are required to write a Python function `shortest_path_length(maze)` to determine the length of the shortest path from the top-left corner to the bottom-right corner of a given rectangular maze. The maze is represented by a list of lists containing `0`s and `1`s, where `0` indicates a walkable cell and `1` indicates a blocked cell. You can move in four possible directions: up, down, left, and right. If no path exists, the function should return `-1`. **Function Signature:** ```python def shortest_path_length(maze: List[List[int]]) -> int: pass ``` **Parameters:** - `maze` (List[List[int]]): A list of lists of integers representing the maze grid. **Returns:** - `int`: The length of the shortest path from the top-left corner to the bottom-right corner. If no path exists, return `-1`. # Requirements 1. The solution must use the Breadth-First Search (BFS) algorithm to find the shortest path. 2. Handle mazes where the start or end point might be blocked. 3. Assume the maze contains at least one cell. # Example Input: ```python maze = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0] ] ``` Output: ```python 9 # The length of the shortest path from top-left to bottom-right ```","solution":"from typing import List from collections import deque def shortest_path_length(maze: List[List[int]]) -> int: if not maze or not maze[0] or maze[0][0] == 1 or maze[-1][-1] == 1: return -1 rows, cols = len(maze), len(maze[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == rows - 1 and col == cols - 1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols and maze[new_row][new_col] == 0 and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"You are required to write a function called `find_non_repeated` that takes a single string input and returns the first non-repeated character in the string. A non-repeated character is a character that appears only once in the string. If all characters are repeated or the string is empty, the function should return `None`. To achieve this, you may use Python\'s standard data structures such as dictionaries to keep track of character counts. # Requirements 1. The function name should be `find_non_repeated`. 2. The function should accept a single string parameter. 3. The function should return `None` if no non-repeated character is found or if the string is empty. **Function Signature:** ```python def find_non_repeated(s: str) -> str: ``` **Example:** ```python input: \\"swiss\\" output: \\"w\\" input: \\"redivider\\" output: \\"v\\" input: \\"aabbcc\\" output: None ``` # Input - A single string that contains alphanumeric characters and/or symbols. (0 ≤ length(s) ≤ 1000) # Output - The first non-repeated character if it exists, otherwise `None`. # Constraints - You may use any standard Python data structures. - Focus on efficiency, particularly for longer strings.","solution":"def find_non_repeated(s: str) -> str: Returns the first non-repeated character in the string s. If all characters are repeated or the string is empty, the function returns None. char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char return None"},{"question":"You are required to develop a function utilizing the pandas library\'s data manipulation capabilities. This function will be named `analyze_dataframe`, and it will accept a pandas DataFrame as input. The function should process the DataFrame based on the following rules: 1. Identify the column with the highest mean value. 2. If the column name starts with a vowel (a, e, i, o, u), return the sum of its values. 3. If the column name starts with a consonant, return the highest value in the column. Here is a prototype and an explanation of the function: ```python def analyze_dataframe(df): Given a pandas DataFrame, identify the column with the highest mean value and perform specific operations based on the column name. Parameters: df (pandas.DataFrame): The DataFrame to be analyzed. Returns: result (float): The sum or maximum value based on the column name starting with a vowel or consonant. # Implementation here ``` **Details**: - Use `pandas.DataFrame.mean` to calculate the mean values of the columns. - Use `str.startswith` to check the first character of the column name. - Use `pandas.Series.sum` and `pandas.Series.max` for the required operations on the column. **Example**: ```python import pandas as pd # Creating a sample DataFrame data = { \\"alpha\\": [1, 2, 3, 4], \\"beta\\": [5, 6, 7, 8], \\"gamma\\": [9, 10, 11, 12] } df = pd.DataFrame(data) # Analyze the DataFrame result = analyze_dataframe(df) # For the given DataFrame, the output should be: # Since the column \\"gamma\\" has the highest mean value (10.5) and its name starts with a consonant, the function should return: # 12 (the highest value in the \\"gamma\\" column) ```","solution":"import pandas as pd def analyze_dataframe(df): Given a pandas DataFrame, identify the column with the highest mean value and perform specific operations based on the column name. Parameters: df (pandas.DataFrame): The DataFrame to be analyzed. Returns: result (float): The sum or maximum value based on the column name starting with a vowel or consonant. # Calculate mean values for each column means = df.mean() # Find the column with the highest mean value col_highest_mean = means.idxmax() # Determine if the column name starts with a vowel if col_highest_mean[0].lower() in \\"aeiou\\": # Return the sum of the column values return df[col_highest_mean].sum() else: # Return the maximum value of the column return df[col_highest_mean].max()"},{"question":"Design a function that takes a list of points in a 2D plane and connects each point to the nearest point in the list to form a path. The points should be represented as tuples of (x, y) coordinates. The function should output a list of tuples where each tuple consists of two points that are connected. Use Euclidean distance to determine the nearest points. The function should output: path (list): A list of tuples, where each tuple contains two points (as tuples of x and y coordinates) that are connected. You should write self-contained code starting with: ``` import math def task_func(points): ``` # Example ``` points = [(0, 0), (2, 2), (3, 10), (5, 2), (6, 8)] path = task_func(points) print(path) ```","solution":"import math def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def task_func(points): if not points: return [] path = [] visited = {points[0]} current_point = points[0] while len(visited) < len(points): min_dist = float(\'inf\') nearest_point = None for point in points: if point not in visited: dist = euclidean_distance(current_point, point) if dist < min_dist: min_dist = dist nearest_point = point path.append((current_point, nearest_point)) visited.add(nearest_point) current_point = nearest_point return path"},{"question":"Write a function that simulates flipping a coin multiple times and tracks the longest consecutive streak of heads. Use the `random.choice` method to simulate the coin flips, where \'H\' represents heads and \'T\' represents tails. Return the length of the longest consecutive streak of heads. Your code should start with: ``` import random def longest_heads_streak(num_flips): ```","solution":"import random def longest_heads_streak(num_flips): Simulates flipping a coin num_flips times and returns the longest consecutive streak of heads. flips = [random.choice([\'H\', \'T\']) for _ in range(num_flips)] max_streak = 0 current_streak = 0 for flip in flips: if (flip == \'H\'): current_streak += 1 if current_streak > max_streak: max_streak = current_streak else: current_streak = 0 return max_streak"},{"question":"Create a function called `merge_and_analyze_datasets(data1_csv, data2_csv)` that reads two CSV files, merges their tables on a common column, and performs basic statistical analysis using Pandas. Your function should compute the mean, median, and standard deviation of a specified numeric column after merging the datasets. Here are the details of the function requirements: 1. **Function Name:** `merge_and_analyze_datasets(data1_csv, data2_csv)` 2. **Parameters:** - `data1_csv`: A string representing the path to the first CSV file to be read. - `data2_csv`: A string representing the path to the second CSV file to be read. 3. **Actions:** - Read the two CSV files using `pandas.read_csv`. - Perform an inner merge of the two datasets on a common column named `id`. - Calculate the mean, median, and standard deviation of a numeric column named `value` from the merged dataset. - Print these statistical values in the format: \\"Mean: {mean_value}, Median: {median_value}, Std Dev: {std_dev_value}\\". 4. **Output:** - The function does not need to return any value. It should print the calculated statistics. # Sample CSV Data Assume the CSV files contain data similar to the following structure: data1.csv ``` id,value 1,10 2,15 3,20 ``` data2.csv ``` id,description 1,Item A 2,Item B 3,Item C ``` # Usage Example Here is an example of how the function will be used: ```python merge_and_analyze_datasets(\\"data1.csv\\", \\"data2.csv\\") ``` This should output the statistics based on the merged data from `data1.csv` and `data2.csv`.","solution":"import pandas as pd def merge_and_analyze_datasets(data1_csv, data2_csv): Reads two CSV files, merges their tables on a common \'id\' column, and performs basic statistical analysis. Prints the mean, median, and standard deviation of the \'value\' column from the merged dataset. # Read the CSV files into DataFrames data1 = pd.read_csv(data1_csv) data2 = pd.read_csv(data2_csv) # Perform an inner merge on the \'id\' column merged_data = pd.merge(data1, data2, on=\'id\') # Calculate the statistics for the \'value\' column mean_value = merged_data[\'value\'].mean() median_value = merged_data[\'value\'].median() std_dev_value = merged_data[\'value\'].std() # Print the statistics print(f\\"Mean: {mean_value}, Median: {median_value}, Std Dev: {std_dev_value}\\")"},{"question":"**Data Stream Window Aggregation** You are tasked to write a class named `DataStream` that collects incoming integer data and provides aggregation statistics over a sliding window of a given size. The window should maintain only the last `n` integers received, where `n` is specified at the time of the `DataStream` object creation. The class should provide methods to add new data and retrieve the current window statistics. The `DataStream` class should have the following methods: 1. `__init__(self, window_size: int)`: Initializes the data stream with a given window size `window_size`. 2. `add_data(self, value: int)`: Adds a new integer data `value` to the stream. 3. `get_window_stats(self) -> dict`: Returns a dictionary with the following statistics for the current window: - `\'min\'`: Minimum value in the window. - `\'max\'`: Maximum value in the window. - `\'average\'`: Average of values in the window (as a float). - `\'size\'`: Number of elements in the window. If there are no elements in the window, all statistics except size should be None. **Function Signature:** ```python class DataStream: def __init__(self, window_size: int): pass def add_data(self, value: int): pass def get_window_stats(self) -> dict: pass ``` **Example:** ```python ds = DataStream(3) ds.add_data(1) ds.add_data(2) print(ds.get_window_stats()) # Output: {\'min\': 1, \'max\': 2, \'average\': 1.5, \'size\': 2} ds.add_data(3) print(ds.get_window_stats()) # Output: {\'min\': 1, \'max\': 3, \'average\': 2.0, \'size\': 3} ds.add_data(4) print(ds.get_window_stats()) # Output: {\'min\': 2, \'max\': 4, \'average\': 3.0, \'size\': 3} ds.add_data(5) print(ds.get_window_stats()) # Output: {\'min\': 3, \'max\': 5, \'average\': 4.0, \'size\': 3} ```","solution":"from collections import deque class DataStream: def __init__(self, window_size: int): self.window_size = window_size self.window = deque() def add_data(self, value: int): if len(self.window) == self.window_size: self.window.popleft() self.window.append(value) def get_window_stats(self) -> dict: if not self.window: return { \'min\': None, \'max\': None, \'average\': None, \'size\': 0 } window_list = list(self.window) return { \'min\': min(window_list), \'max\': max(window_list), \'average\': sum(window_list) / len(window_list), \'size\': len(window_list) }"},{"question":"You are asked to write a function `rotate_image_90(image)` that rotates a given grayscale image by 90 degrees clockwise. A grayscale image can be represented as a 2D NumPy array `image` with dimensions (h, w): - `h` is the height of the image. - `w` is the width of the image. The function should: 1. Determine the dimensions of the input image (h, w). 2. Create an output 2D NumPy array `rotated` with dimensions (w, h) to store the rotated image. 3. Loop through each pixel in the input image, determine its new position in the rotated image, and assign the pixel\'s value to the new position in `rotated`. **Required Library**: `numpy.zeros` **Function Signature**: ```python def rotate_image_90(image): # Your code here ``` **Example**: ```python import numpy as np image = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) result = rotate_image_90(image) print(result) ``` Expected output: ``` [[7 4 1] [8 5 2] [9 6 3]] ```","solution":"import numpy as np def rotate_image_90(image): Rotates a given grayscale image by 90 degrees clockwise. Parameters: - image: 2D numpy array representing a grayscale image Returns: - rotated: 2D numpy array of the rotated image h, w = image.shape rotated = np.zeros((w, h), dtype=image.dtype) for i in range(h): for j in range(w): rotated[j, h - 1 - i] = image[i, j] return rotated"},{"question":"In software development, it\'s often necessary to manipulate and transform strings to ensure they meet specific criteria or to extract useful information. One common task is to generate CamelCase strings from sentences or phrases. Your task is to write a function `to_camel_case(sentence)` that converts a given sentence into a CamelCase string. The input sentence will be a non-empty string consisting of alphabetic characters and spaces, where words are separated by single spaces. The function should remove the spaces, capitalize the first letter of each word (except the first word), and return the resulting CamelCase string. Here is an example to illustrate how it works: **Example:** ```python sentence = \\"hello world this is camel case\\" camel_case_string = to_camel_case(sentence) print(camel_case_string) ``` **Expected Output:** ``` \\"helloWorldThisIsCamelCase\\" ``` **Function Signature:** ```python def to_camel_case(sentence: str) -> str: # Your code here ``` **Requirements:** - Implement the function without using any external libraries. - The input will always be a non-empty string with words separated by single spaces. - Only alphabetic characters and spaces will be present in the input string. - Ensure that the function handles both upper and lower case letters while converting to CamelCase.","solution":"def to_camel_case(sentence: str) -> str: Converts a given sentence into a CamelCase string. The function removes spaces, capitalizes the first letter of each word (except the first word), and returns the resulting CamelCase string. Args: sentence (str): The input sentence with words separated by single spaces. Returns: str: The resulting CamelCase string. words = sentence.split() camel_case_string = words[0].lower() + \'\'.join(word.capitalize() for word in words[1:]) return camel_case_string"},{"question":"You are required to implement a function to simulate a simplified version of a Tic-Tac-Toe game between two players. Your function should take as input a sequence of moves, update the game board accordingly, and determine the game\'s outcome: a win for player X, a win for player O, or a draw. **Function Name:** `ticTacToeResult` **Inputs:** 1. A list of tuples representing the moves made by the players in chronological order. Each tuple contains three elements: - Player identifier (`\'X\'` or `\'O\'`) - Row index (0, 1, or 2) - Column index (0, 1, or 2) **Output:** - The function should return the result of the game: - `\'X wins\'` if player X wins. - `\'O wins\'` if player O wins. - `\'Draw\'` if there is no winner and all cells are filled. **Requirements:** - The function should update the board after each move using a 3x3 2D list. - After processing all moves, the function should check all rows, columns, and diagonals for a win condition. - The function should handle cases where moves are made after the game has already been decided (ignore such moves). **Example:** ```python moves = [ (\'X\', 0, 0), (\'O\', 1, 1), (\'X\', 0, 1), (\'O\', 2, 2), (\'X\', 0, 2) ] ``` Processing the above moves should result in the function returning: `\'X wins\'`. **Additional Sample Input and Output:** Given: ```python moves = [ (\'X\', 0, 0), (\'O\', 0, 1), (\'X\', 1, 1), (\'O\', 2, 2), (\'X\', 2, 1), (\'O\', 1, 0), (\'X\', 2, 0) ] ``` Your function should return: `\'Draw\'`.","solution":"def ticTacToeResult(moves): Simulates a Tic-Tac-Toe game and returns the result. Parameters: moves (list): List of tuples where each tuple is (player, row, col) Returns: str: \'X wins\', \'O wins\', or \'Draw\' # Initialize an empty 3x3 board board = [[\'\' for _ in range(3)] for _ in range(3)] # Apply the moves to the board for player, row, col in moves: if board[row][col] == \'\': board[row][col] = player # Check rows, columns, and diagonals for a win for i in range(3): # Check rows if board[i][0] == board[i][1] == board[i][2] != \'\': return f\\"{board[i][0]} wins\\" # Check columns if board[0][i] == board[1][i] == board[2][i] != \'\': return f\\"{board[0][i]} wins\\" # Check diagonals if board[0][0] == board[1][1] == board[2][2] != \'\': return f\\"{board[0][0]} wins\\" if board[0][2] == board[1][1] == board[2][0] != \'\': return f\\"{board[0][2]} wins\\" # Check for draw for row in board: for cell in row: if cell == \'\': return \'Ongoing\' # If any empty cell is found, the game is still ongoing. return \'Draw\' # If all cells are filled and no winner, it\'s a draw"},{"question":"You are required to write a Python function named `is_prime_or_perfect_square(n)`. This function will accept a single integer `n` and determine if the number is a prime number or a perfect square. The function should return: - `\\"Prime\\"` if `n` is a prime number. - `\\"Perfect Square\\"` if `n` is a perfect square. - `None` if the number is neither a prime number nor a perfect square. # Example ```python print(is_prime_or_perfect_square(5)) # Expected output: Prime print(is_prime_or_perfect_square(9)) # Expected output: Perfect Square print(is_prime_or_perfect_square(8)) # Expected output: None ``` # Constraints - The number `n` will be a positive integer greater than 1. # Definitions - A **prime number** is a natural number greater than 1 that has no positive divisors other than 1 and itself. - A **perfect square** is a number that is the square of an integer, i.e., there exists an integer `k` such that `k*k = n`.","solution":"import math def is_prime_or_perfect_square(n): Determines if the given number is a prime number or a perfect square. :param n: The number to check :return: \\"Prime\\" if the number is a prime number, \\"Perfect Square\\" if the number is a perfect square, None if the number is neither a prime number nor a perfect square. # Function to check if a number is prime def is_prime(num): if num <= 1: return False for i in range(2, int(math.sqrt(num)) + 1): if num % i == 0: return False return True # Function to check if a number is a perfect square def is_perfect_square(num): root = int(math.sqrt(num)) return root * root == num if is_prime(n): return \\"Prime\\" elif is_perfect_square(n): return \\"Perfect Square\\" else: return None"},{"question":"You are tasked with implementing a function that calculates the Manhattan distance between two points in a 2D plane. The Manhattan distance between two points ((x1, y1)) and ((x2, y2)) is given by the sum of the absolute differences of their coordinates: (|x1 - x2| + |y1 - y2|). Write a function named `manhattan_distance` that takes in two tuples representing the coordinates of the points and returns the Manhattan distance between them. Function Signature: ```python def manhattan_distance(point1: tuple, point2: tuple) -> int: ... ``` - `point1`: A tuple ((x1, y1)) representing the coordinates of the first point. - `point2`: A tuple ((x2, y2)) representing the coordinates of the second point. Return: - An integer representing the Manhattan distance between the two points. Example: ```python point1 = (2, 3) point2 = (5, 1) print(manhattan_distance(point1, point2)) # Output: 5 ``` Educational Focus: This problem is designed for you to practice basic arithmetic operations and handling tuples in Python.","solution":"def manhattan_distance(point1: tuple, point2: tuple) -> int: Calculates the Manhattan distance between two points in a 2D plane. Args: point1 (tuple): Coordinates of the first point (x1, y1) point2 (tuple): Coordinates of the second point (x2, y2) Returns: int: The Manhattan distance between the two points x1, y1 = point1 x2, y2 = point2 return abs(x1 - x2) + abs(y1 - y2)"},{"question":"Create a Python function `find_common_elements` that takes two lists of integers as input and returns a list of integers that are present in both input lists. The resulting list should be sorted in ascending order and should not contain any duplicates. Ensure that your solution efficiently handles input lists that may contain up to 10,000 elements. Here is the function signature: ```python def find_common_elements(list1: list[int], list2: list[int]) -> list[int]: ``` Example: ```python print(find_common_elements([1, 2, 3, 4, 5], [4, 5, 6, 7, 8])) # Should return [4, 5] print(find_common_elements([10, 20, 30, 40], [15, 20, 25, 30])) # Should return [20, 30] print(find_common_elements([1, 1, 2, 2], [2, 2, 3, 3])) # Should return [2] ```","solution":"def find_common_elements(list1: list[int], list2: list[int]) -> list[int]: Finds the common elements in both input lists, removes duplicates, and returns them in sorted order. # Using set intersection to find common elements common_elements = set(list1).intersection(set(list2)) # Converting the set to a sorted list return sorted(common_elements)"},{"question":"``` Given a list of integers, this function should identify the even and odd numbers, adding the even numbers to one list and the odd numbers to another. Following that, it should compute the sum of the even numbers and the product of the odd numbers. The function should return a dictionary where the keys are `evens_sum` and `odds_product`, and the corresponding values are the computed sum and product, respectively. The function should handle: 1. An empty input list, returning `0` for both sums and product. 2. A list containing all even or all odd numbers gracefully. You should write self-contained code starting with: ``` def process_numbers(int_list): ``` Example: ``` print(process_numbers([1, 2, 3, 4, 5])) # Output: {\'evens_sum\': 6, \'odds_product\': 15} print(process_numbers([2, 4, 6, 8])) # Output: {\'evens_sum\': 20, \'odds_product\': 1} ``` ```","solution":"def process_numbers(int_list): Process the given list of integers to identify even and odd numbers, compute the sum of even numbers and the product of odd numbers. Return a dictionary with the results. evens = [] odds = [] for num in int_list: if num % 2 == 0: evens.append(num) else: odds.append(num) evens_sum = sum(evens) if evens else 0 odds_product = 1 for odd in odds: odds_product *= odd if not odds: odds_product = 1 return { \'evens_sum\': evens_sum, \'odds_product\': odds_product }"},{"question":"In this problem, you need to write a Python function called `generate_thumbnail` that generates a thumbnail image from a larger image. Use the Python Imaging Library (PIL), also known as `Pillow`, for this task. Your function should take an image file path and thumbnail size tuple as arguments, and save the thumbnail image to a new file. Function Signature ```python def generate_thumbnail(image_path: str, size: tuple) -> str: pass ``` # Requirements: 1. Use the `PIL.Image.open` function to open the image file. 2. Use the `Image.thumbnail` method to create a thumbnail of the specified size. 3. Save the thumbnail to a new file with \\"_thumbnail\\" appended to the original filename. 4. Ensure the aspect ratio of the image is maintained in the thumbnail. # Instruction: - **generate_thumbnail(image_path: str, size: tuple) -> str**: - **Input**: - `image_path` (a string representing the file path to the image). - `size` (a tuple representing the maximum width and height of the thumbnail). - **Output**: A string containing the file path to the newly saved thumbnail image. # Example: ```python thumbnail_path = generate_thumbnail(\\"example.jpg\\", (100, 100)) print(thumbnail_path) ``` **Output:** This should print the path to the newly saved thumbnail image, which should be named `example_thumbnail.jpg`. # Important Notes: - Ensure that your function handles cases where the input file does not exist. In such cases, return a string \\"File not found.\\". - Ensure your code is robust and handles exceptions where the image could not be processed. - The `PIL` library should be properly imported and used within your function. # Libraries to Use: - `PIL.Image` # Installation: To install the PIL library, you can use the following pip command if it\'s not already installed: ```sh pip install pillow ```","solution":"from PIL import Image import os def generate_thumbnail(image_path: str, size: tuple) -> str: Generates a thumbnail of the given image and saves it with \'_thumbnail\' appended to the original filename. Args: image_path (str): The file path to the image. size (tuple): The maximum width and height of the thumbnail. Returns: str: The file path to the newly saved thumbnail image. try: # Open an image file with Image.open(image_path) as img: # Create a thumbnail maintaining the aspect ratio img.thumbnail(size) # Prepare the new filename with \'_thumbnail\' appended base, ext = os.path.splitext(image_path) thumbnail_path = base + \'_thumbnail\' + ext # Save the thumbnail image img.save(thumbnail_path) return thumbnail_path except FileNotFoundError: return \\"File not found.\\" except Exception as e: return f\\"Error processing image: {e}\\""},{"question":"Given a list of strings, write a function to determine the second most frequent word in the list. If there is no second most frequent word, return an empty string. To implement this function, you can use a dictionary to count occurrences of each word and then find the second most frequent one. The function should output with: str: The second most frequent word or an empty string if it does not exist. You should write self-contained code starting with: ``` def second_most_frequent(words): ```","solution":"def second_most_frequent(words): Determine the second most frequent word in the list. Parameters: words (list of str): List of words. Returns: str: The second most frequent word or an empty string if it does not exist. if not words: return \\"\\" # Count the frequency of each word frequency = {} for word in words: frequency[word] = frequency.get(word, 0) + 1 # Sort words by frequency in descending order sorted_words = sorted(frequency.items(), key=lambda x: x[1], reverse=True) # Check if there is a second most frequent word if len(sorted_words) < 2: return \\"\\" # Return the second most frequent word return sorted_words[1][0]"},{"question":"You are required to implement a function `generatePrimes` that generates a list of prime numbers up to a given number `n`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. You should use the Sieve of Eratosthenes algorithm to efficiently find all prime numbers up to `n`. Function Signature: ```python def generatePrimes(n): pass ``` # Input: - `n` (int): an integer representing the upper limit (inclusive) up to which prime numbers should be generated. # Output: - A list of integers representing all prime numbers up to and including `n`. # Constraints: - Assume `n` is a non-negative integer (0 ≤ n ≤ 10^6). - Your solution should be optimized for time complexity using the Sieve of Eratosthenes algorithm. # Example: To generate prime numbers up to 10: ```python generatePrimes(10) ``` Output: ```python [2, 3, 5, 7] ``` To generate prime numbers up to 20: ```python generatePrimes(20) ``` Output: ```python [2, 3, 5, 7, 11, 13, 17, 19] ``` # Note: - Make sure to handle edge cases, such as when `n` is 0 or 1, where no prime numbers exist. - Remember to return the prime numbers in ascending order.","solution":"def generatePrimes(n): Generates a list of prime numbers up to a given number n using the Sieve of Eratosthenes algorithm. :param n: Integer, the upper limit (inclusive) up to which prime numbers should be generated. :return: List of integers representing all prime numbers up to and including n. if n < 2: return [] # Initialize a boolean array that will help us mark the non-prime numbers is_prime = [True] * (n + 1) p = 2 while (p * p <= n): # If is_prime[p] is not changed, then it is a prime if is_prime[p]: # Marking all multiples of p as False indicating they are not primes for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 # Collecting all prime numbers primes = [p for p in range(2, n + 1) if is_prime[p]] return primes"},{"question":"You are given a list of products from different vendors. Each product has fields such as `vendor_id`, `product_id`, `price`, and `quantity`. You are tasked with writing a function that performs the following tasks: 1. Fetches product lists from multiple vendors via API calls. 2. Consolidates the product data into a single `pandas.DataFrame`. 3. Removes duplicate products based on `product_id`, keeping the entry with the highest `price`. 4. Provides an option to filter the consolidated data by `vendor_id`. **Parameters:** - `api_endpoints` : list : A list of tuples where each tuple contains a `vendor_id` and the corresponding API endpoint URL. - `vendor_filter` : list : (Optional) A list of `vendor_id`s to filter the data. Default is `None`, which means no filter. **Returns:** - A `pandas.DataFrame` containing consolidated and filtered product data. **Example Usage:** ```python api_endpoints = [ (1, \'https://api.vendor1.com/products\'), (2, \'https://api.vendor2.com/products\'), (3, \'https://api.vendor3.com/products\') ] vendor_filter = [1, 3] df = fetch_and_consolidate_products(api_endpoints, vendor_filter) print(df) ``` # Required Libraries: - `pandas` - `requests`","solution":"import pandas as pd import requests def fetch_and_consolidate_products(api_endpoints, vendor_filter=None): product_list = [] # Fetch data from each vendor for vendor_id, url in api_endpoints: response = requests.get(url) if response.status_code == 200: products = response.json() for product in products: product[\'vendor_id\'] = vendor_id product_list.append(product) else: print(f\\"Failed to fetch data from {url}\\") # Consolidate into DataFrame df = pd.DataFrame(product_list) # Remove duplicates based on product_id, keeping the highest price entry df = df.sort_values(\'price\', ascending=False).drop_duplicates(\'product_id\') # Filter by vendor_id if vendor_filter is provided if vendor_filter is not None: df = df[df[\'vendor_id\'].isin(vendor_filter)] return df"},{"question":"Your task is to implement a function named `merge_sorted_lists` that takes two sorted lists of integers and returns a single sorted list that contains all the elements from both input lists. This problem will help you practice list manipulation and merging techniques. # Requirements: - Implement the function `merge_sorted_lists(list1, list2)` such that: - It returns a new list that includes all the elements from `list1` and `list2`, in ascending order. - Both input lists `list1` and `list2` are already sorted in ascending order. # Constraints: - Each input list will contain non-negative integers. - The length of each list will be between 0 and (10^5). # Additional Information: - You should aim for an efficient solution with a time complexity of O(n + m), where n is the length of `list1` and m is the length of `list2`. - You may not use any built-in sorting functions. Example: ```python merge_sorted_lists([1, 3, 5], [2, 4, 6]) # Returns: [1, 2, 3, 4, 5, 6] merge_sorted_lists([0, 10], [5, 15, 20]) # Returns: [0, 5, 10, 15, 20] merge_sorted_lists([], [7, 8, 9]) # Returns: [7, 8, 9] ```","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Parameters: list1 (list): The first sorted list of integers. list2 (list): The second sorted list of integers. Returns: list: The merged and sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 or list2 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are tasked with simulating a simple traffic light system. The objective is to build a function that alternates between three states: \'Green\', \'Yellow\', and \'Red\'. Each state has a specific duration, and the system should cycle through these states indefinitely. To simulate the passage of time, you can use the Python `time` module to introduce delays corresponding to the duration of each state. Your task is to write a function called `run_traffic_light()` which will simulate the traffic light system with the following requirements: 1. The \'Green\' light should be on for 7 seconds. 2. The \'Yellow\' light should be on for 2 seconds. 3. The \'Red\' light should be on for 5 seconds. 4. The function should print the current state of the traffic light each time it changes. Here is the structural detail of how the function should be implemented: - `run_traffic_light()`: This function will infinitely cycle through the states \'Green\', \'Yellow\', and \'Red\', printing the current state and waiting for the specified duration before changing to the next state. **Notes:** - Use the `time.sleep(seconds)` function to introduce delays corresponding to the duration of each state. - The function should print \\"Green light is ON\\", \\"Yellow light is ON\\", and \\"Red light is ON\\" for each respective state when active. - Ensure that the states transition in the correct order: Green -> Yellow -> Red -> Green -> ... **Examples:** When `run_traffic_light()` is executed, it should print the states and simulate the traffic light system according to the given durations. ```python import time def run_traffic_light(): while True: print(\\"Green light is ON\\") time.sleep(7) print(\\"Yellow light is ON\\") time.sleep(2) print(\\"Red light is ON\\") time.sleep(5) ``` Execute the `run_traffic_light()` function to start the simulation, and observe how it continuously cycles through the three states with the specified durations.","solution":"import time def run_traffic_light(): while True: print(\\"Green light is ON\\") time.sleep(7) print(\\"Yellow light is ON\\") time.sleep(2) print(\\"Red light is ON\\") time.sleep(5)"},{"question":"You are required to create a Python function `process_daily_logs()` that reads a log file containing timestamped entries of various events that occur daily and summarizes the number of occurrences for each event type within a given day. The function should demonstrate file handling, dictionary usage, and datetime parsing. # Function Requirements: 1. **Function Name:** `process_daily_logs` 2. **Input Parameters:** - `log_file_path`: A string representing the path to the log file. - `date_str`: A string representing the date for which the summary needs to be generated in the format `\\"YYYY-MM-DD\\"`. 3. **Output:** The function should return a dictionary where the keys are event types (as strings) and the values are the counts of occurrences for each event type (as integers) on the specified date. 4. **Log Entry Format:** - Each line in the log file consists of a timestamp and an event type, separated by a space. Example: `\\"2023-09-15 08:23:45 login\\"` 5. **File Handling:** - Open and read the log file provided via `log_file_path`. - Use appropriate exception handling to manage issues such as missing files or incorrect formats. # Example Usage: Given the contents of the log file `daily_logs.txt`: ``` 2023-09-15 08:23:45 login 2023-09-15 08:45:30 logout 2023-09-15 09:00:00 login 2023-09-16 10:00:00 login 2023-09-15 11:23:45 purchase ``` Calling the function: ```python result = process_daily_logs(\'daily_logs.txt\', \'2023-09-15\') ``` Should return the output: ```python { \'login\': 2, \'logout\': 1, \'purchase\': 1 } ``` # Additional Information: - Use the `datetime.strptime()` method to parse and compare the dates in the log entries. - Ensure the function handles any possible errors gracefully by using try-except blocks. Implement the function `process_daily_logs()` to achieve the requirements described above.","solution":"import datetime def process_daily_logs(log_file_path, date_str): # Initialize an empty dictionary to store event counts event_counts = {} try: # Open the log file with open(log_file_path, \'r\') as file: # Read all lines from the file lines = file.readlines() # Parse the provided date string to a datetime object target_date = datetime.datetime.strptime(date_str, \'%Y-%m-%d\').date() # Iterate over each line in the log file for line in lines: # Extract the timestamp and the event type from the line try: timestamp_str, event_type = line.strip().rsplit(\' \', 1) timestamp = datetime.datetime.strptime(timestamp_str, \'%Y-%m-%d %H:%M:%S\') # Check if the date of the timestamp matches the target date if timestamp.date() == target_date: # Increment the count for the event type if event_type in event_counts: event_counts[event_type] += 1 else: event_counts[event_type] = 1 except ValueError: # Skip any lines that do not match the expected format continue except FileNotFoundError: # Handle the case where the log file is not found print(f\\"Error: The file \'{log_file_path}\' was not found.\\") except Exception as e: # Handle any other exceptions that may occur print(f\\"An error occurred: {e}\\") return event_counts"},{"question":"Write a function that finds the shortest path in a weighted directed graph from a given start node to a target node using Dijkstra\'s algorithm. The graph will be provided as an adjacency list in a JSON file, where keys are node identifiers and values are lists of tuples `(neighbor, weight)`. The function should return the shortest path as a list of nodes. The function should be self-contained and start with: ``` import json import heapq def find_shortest_path(json_file_path, start_node, target_node): ```","solution":"import json import heapq def find_shortest_path(json_file_path, start_node, target_node): with open(json_file_path, \'r\') as file: graph = json.load(file) # Priority queue to store (distance, node) pairs priority_queue = [(0, start_node)] # Dictionary to store the shortest distance to every node distances = {start_node: 0} # Dictionary to store the path previous_nodes = {} while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If we reached the target node, build and return the path if current_node == target_node: path = [] while current_node is not None: path.append(current_node) current_node = previous_nodes.get(current_node) return path[::-1] for neighbor, weight in graph.get(current_node, []): distance = current_distance + weight # Only consider this new path if it\'s better if distance < distances.get(neighbor, float(\'inf\')): distances[neighbor] = distance previous_nodes[neighbor] = current_node heapq.heappush(priority_queue, (distance, neighbor)) # Return empty if no path found return []"},{"question":"Implement a function `task_func` that accepts a list of strings and returns a dictionary. The keys of the dictionary should be the unique characters found in all the strings combined (ignoring case), and the values should be their respective counts across all strings. Non-alphabetic characters should be ignored. Ensure that the returned dictionary has keys in alphabetical order. You should write self-contained code starting with: ``` def task_func(strings): ``` Example: ``` input: [\'Hello World\', \'Python3!\'] output: {\'d\': 1, \'e\': 1, \'h\': 2, \'l\': 3, \'n\': 1, \'o\': 3, \'p\': 1, \'r\': 1, \'t\': 1, \'w\': 1, \'y\': 1} ```","solution":"def task_func(strings): Returns a dictionary with unique characters as keys (ignoring case) and their counts across all strings. Non-alphabetic characters are ignored. Keys are in alphabetical order. from collections import Counter import re combined_string = \\"\\".join(strings).lower() filtered_string = re.sub(r\'[^a-z]\', \'\', combined_string) char_count = Counter(filtered_string) return dict(sorted(char_count.items()))"},{"question":"You are to create a function named `string_transform` that performs a series of transformations on an input string. This function will perform the following tasks: 1. Convert the entire string to uppercase. 2. Replace all spaces with hyphens (\'-\'). 3. Check if the string is a palindrome (ignoring case, spaces, and hyphens). 4. Find the length of the transformed string (after conversions above). Your task is to implement the `string_transform` function, which should accept one parameter: - `input_str`: The input string to be transformed. The function should return a tuple containing: 1. The uppercase transformed string with spaces replaced by hyphens. 2. A boolean value indicating whether the transformed string is a palindrome. 3. The length of the transformed string. **Requirements:** - A palindrome is a string that reads the same backward as forwards. - You must ignore spaces and hyphens when checking for palindrome. - Strings should be compared in a case-insensitive manner for palindrome check. Example: ```python result = string_transform(\\"A man a plan a canal Panama\\") print(result) # Output: (\'A-MAN-A-PLAN-A-CANAL-PANAMA\', True, 27) result = string_transform(\\"Hello World\\") print(result) # Output: (\'HELLO-WORLD\', False, 11) ```","solution":"def string_transform(input_str): Transforms the input string according to the specified requirements: 1. Convert the entire string to uppercase. 2. Replace all spaces with hyphens (\'-\'). 3. Check if the string is a palindrome (ignoring case, spaces, and hyphens). 4. Find the length of the transformed string (after conversions above). Returns a tuple containing: - The uppercase transformed string with spaces replaced by hyphens. - A boolean indicating if the transformed string is a palindrome. - The length of the transformed string. # Step 1: Convert the entire string to uppercase transformed_str = input_str.upper() # Step 2: Replace all spaces with hyphens transformed_str = transformed_str.replace(\' \', \'-\') # Preprocess string for palindrome check (remove spaces and hyphens, compare case-insensitively) processed_str = transformed_str.replace(\'-\', \'\') # Step 3: Check if the string is a palindrome is_palindrome = processed_str == processed_str[::-1] # Step 4: Find the length of the transformed string transformed_length = len(transformed_str) return transformed_str, is_palindrome, transformed_length"},{"question":"**Context:** You have been provided with a list of integers and a target value. Your task is to determine if there are three distinct integers in the list that add up to the target value. **Task:** Write a function named `find_three_elements_sum` that performs the following steps: 1. Takes a list of integers and a target sum value as inputs. 2. Finds three distinct elements in the list that sum up to the target value. - If such elements are found, return them as a tuple `(a, b, c)` where `a`, `b`, and `c` are the integers from the list. - If no such elements exist, return `None`. **Function Signature:** ```python def find_three_elements_sum(nums, target): ``` **Parameters:** - `nums` (List[int]): The list of integers. - `target` (int): The target sum value to be achieved by adding three distinct integers from the list. **Example:** ```python # Example 1: nums = [1, 2, 3, 4, 5, 6] target = 12 # The function should return (1, 5, 6), (2, 4, 6), or any other valid combination. # Example 2: nums = [2, 4, 7, 1, 9] target = 21 # The function should return None as no three distinct integers sum to 21. ``` **Requirements:** - The function should consider all possible unique triplets in the list. - Ensure that the integers selected are distinct from each other. - You may assume the input list does not contain duplicate values. - Optimize the function to avoid unnecessary computations. **Constraints:** - The input list `nums` will have at least three integers. - The integers in `nums` can be positive, negative, or zero.","solution":"def find_three_elements_sum(nums, target): Finds three distinct elements in nums that sum up to the target value. :param nums: List[int] - List of integers :param target: int - Target sum value :return: Tuple[int, int, int] or None nums.sort() n = len(nums) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return (nums[i], nums[left], nums[right]) elif current_sum < target: left += 1 else: right -= 1 return None"},{"question":"Design a function to simulate the spread of a virus within a population over time. The simulation should model the changes in state for individuals within a grid, where each cell represents an individual who can be in one of three states: susceptible (S), infected (I), or recovered (R). The function should: 1. **Initial Setup:** - Take an initial grid configuration, where each cell contains one of the states (\'S\', \'I\', \'R\'). - Define a set of parameters for the simulation including: - Transmission probability `p` (the likelihood of a susceptible individual getting infected if they have an infected neighbor). - Recovery probability `r` (the likelihood of an infected individual recovering in a time step). - Total number of time steps to simulate `num_steps`. 2. **Simulation Process:** - At each time step, update the state of each individual based on the defined probabilities and the states of their neighbors. - Consider the immediate neighbors (up, down, left, right) for each cell. - Apply the changes to all cells concurrently based on the states at the beginning of the current time step. 3. **Return Results:** - Return the grid configurations at each time step as a list of numpy arrays. # Function Signature ```python import numpy as np def simulate_virus_spread(grid, p, r, num_steps): Simulate the spread of a virus in a population over time. Parameters: grid (numpy.ndarray): Initial grid configuration (\'S\', \'I\', \'R\'). p (float): Transmission probability. r (float): Recovery probability. num_steps (int): Total number of time steps to simulate. Returns: list of numpy.ndarray: List of grid configurations at each time step. pass ``` # Requirements 1. Implement the `simulate_virus_spread` function to update the states of individuals based on the probabilities `p` and `r`. 2. Ensure the grid configurations are updated concurrently, so changes in one cell do not affect the updates of its neighbors within the same time step. 3. Return the list of grid configurations over the simulation period. # Example Given: - Initial grid configuration: ``` S S S S I S S S S ``` - Transmission probability (`p`): `0.3` - Recovery probability (`r`): `0.1` - Total number of time steps (`num_steps`): `5` The `simulate_virus_spread` function should return a list of grid configurations representing the state of the population at each time step. ```python initial_grid = np.array([ [\'S\', \'S\', \'S\'], [\'S\', \'I\', \'S\'], [\'S\', \'S\', \'S\'] ]) p = 0.3 r = 0.1 num_steps = 5 grids = simulate_virus_spread(initial_grid, p, r, num_steps) for step, grid in enumerate(grids): print(f\\"Time step {step}:n{grid}n\\") ```","solution":"import numpy as np def simulate_virus_spread(grid, p, r, num_steps): Simulate the spread of a virus in a population over time. Parameters: grid (numpy.ndarray): Initial grid configuration (\'S\', \'I\', \'R\'). p (float): Transmission probability. r (float): Recovery probability. num_steps (int): Total number of time steps to simulate. Returns: list of numpy.ndarray: List of grid configurations at each time step. def get_neighbors(x, y, grid): neighbors = [] if x > 0: neighbors.append((x - 1, y)) if x < grid.shape[0] - 1: neighbors.append((x + 1, y)) if y > 0: neighbors.append((x, y - 1)) if y < grid.shape[1] - 1: neighbors.append((x, y + 1)) return neighbors np.random.seed(42) # for reproducibility current_grid = grid.copy() grids = [current_grid.copy()] for _ in range(num_steps): new_grid = current_grid.copy() for i in range(current_grid.shape[0]): for j in range(current_grid.shape[1]): if current_grid[i, j] == \\"I\\": if np.random.rand() < r: new_grid[i, j] = \\"R\\" elif current_grid[i, j] == \\"S\\": neighbors = get_neighbors(i, j, current_grid) for x, y in neighbors: if current_grid[x, y] == \\"I\\" and np.random.rand() < p: new_grid[i, j] = \\"I\\" break current_grid = new_grid grids.append(current_grid.copy()) return grids"},{"question":"Given an array of integers, write a function to find the length of the longest subsequence such that all elements of the subsequence are sorted in strictly increasing order. Additionally, return the actual subsequence as a list. You should write self-contained code starting with: ``` def longest_increasing_subsequence(arr): ``` For example: ``` Input: arr = [10, 22, 9, 33, 21, 50, 41, 60, 80] Output: (6, [10, 22, 33, 50, 60, 80]) Input: arr = [3, 10, 2, 1, 20] Output: (3, [3, 10, 20]) Input: arr = [3, 2] Output: (1, [3]) ```","solution":"def longest_increasing_subsequence(arr): Returns the length and one of the longest increasing subsequences of the array. if not arr: return (0, []) n = len(arr) lengths = [1] * n previous_indices = [-1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lengths[i] < lengths[j] + 1: lengths[i] = lengths[j] + 1 previous_indices[i] = j max_length = max(lengths) index = lengths.index(max_length) lis = [] while index != -1: lis.append(arr[index]) index = previous_indices[index] lis.reverse() return (max_length, lis)"},{"question":"You are tasked with writing a function in Python to parse and evaluate basic mathematical expressions given as strings. The function should be capable of handling addition, subtraction, multiplication, and division operations between integers. This exercise aims to help you practice parsing strings and implementing arithmetic operations. Write a function named `evaluate_expression` that follows these rules: 1. The function should accept a single parameter: - `expression`: a string representing a mathematical expression. The expression will contain integers and the operators `+`, `-`, `*`, and `/` without any spaces. 2. Evaluate the expression according to the standard rules of arithmetic (i.e., multiplication and division before addition and subtraction). 3. If division by zero occurs, the function should return the string `\\"Error: Division by Zero\\"`. Your final function should return the result of the evaluated expression as an integer or a float (if division is involved). # Example Input and Output ```python print(evaluate_expression(\\"3+5*2\\")) # Output: 13 print(evaluate_expression(\\"10-2/2\\")) # Output: 9.0 print(evaluate_expression(\\"8+4/0\\")) # Output: \\"Error: Division by Zero\\" ``` # Constraints - The input string will contain only non-negative integers and the `+`, `-`, `*`, and `/` operators. - The input string will be a valid mathematical expression. - The function should handle division operations and return results as floats properly when needed.","solution":"def evaluate_expression(expression): Evaluates a basic mathematical expression containing +, -, *, / without spaces. Returns an integer or a float depending on the operation, and handles division by zero. try: return eval(expression, {\\"__builtins__\\": None}, {}) except ZeroDivisionError: return \\"Error: Division by Zero\\""},{"question":"In this problem, you will work with strings and dictionaries to create a simple encryption and decryption system. Your task is to implement two functions: `encrypt_text` and `decrypt_text`. # Details 1. **`encrypt_text(text, shift)`**: This function takes in two parameters: a `text` string and an integer `shift`. It should return an encrypted version of the `text` where each letter is shifted **forward** in the alphabet by the `shift` value. Spaces and non-alphabetic characters should remain unchanged. 2. **`decrypt_text(encrypted_text, shift)`**: This function takes in two parameters: an `encrypted_text` string and an integer `shift`. It should return the original decrypted text by shifting the letters **backward** in the alphabet by the `shift` value. Spaces and non-alphabetic characters should remain unchanged. # Example ```python encrypt_text(\\"hello world\\", 3) -> \\"khoor zruog\\" decrypt_text(\\"khoor zruog\\", 3) -> \\"hello world\\" ``` # Additional Information - Both functions should handle both uppercase and lowercase letters. - The shift will always be a non-negative integer. - The alphabet is considered to wrap around; for example, shifting \'z\' by 1 should result in \'a\'. # Implementation You may assume that the helper function `shift_char` is provided which correctly shifts a single character by a given value, wrapping around the alphabet if necessary. This helper function can be used within your solutions for `encrypt_text` and `decrypt_text`. However, you still need to handle cases where characters are not alphabetic. ```python def shift_char(char, shift): if char.isalpha(): base = ord(\'A\') if char.isupper() else ord(\'a\') return chr((ord(char) - base + shift) % 26 + base) else: return char def encrypt_text(text, shift): encrypted = [] for char in text: encrypted.append(shift_char(char, shift)) return \'\'.join(encrypted) def decrypt_text(encrypted_text, shift): decrypted = [] for char in encrypted_text: decrypted.append(shift_char(char, -shift)) return \'\'.join(decrypted) ``` Complete the functions `encrypt_text` and `decrypt_text` using the provided structure.","solution":"def shift_char(char, shift): if char.isalpha(): base = ord(\'A\') if char.isupper() else ord(\'a\') return chr((ord(char) - base + shift) % 26 + base) else: return char def encrypt_text(text, shift): Encrypts the text by shifting each letter forward by the given shift value. Non-alphabetic characters remain unchanged. encrypted = [shift_char(char, shift) for char in text] return \'\'.join(encrypted) def decrypt_text(encrypted_text, shift): Decrypts the text by shifting each letter backward by the given shift value. Non-alphabetic characters remain unchanged. decrypted = [shift_char(char, -shift) for char in encrypted_text] return \'\'.join(decrypted)"},{"question":"You are tasked with creating a function called `find_anagrams` that identifies all anagram groups from a given list of words. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Your function should group all words that are anagrams of each other into lists and return a list of these lists. 1. The function `find_anagrams` should take exactly one parameter, `words`, which is a list of strings representing the list of words to be analyzed. It should return a list of lists, where each sub-list contains words that are anagrams of each other. 2. Input words can be in any case (upper or lower), but the function should group words in a case-insensitive manner. 3. The output lists should only contain the original words with their original cases, and the order of the words within each anagram group does not matter. However, the groups themselves should be sorted in ascending order based on their first occurrence in the original list. Here is a breakdown of the problem: - Implement the `find_anagrams` function. - Group words that are anagrams of each other. - Ensure case-insensitivity when identifying anagrams. - Maintain the original case of words in the output. - Sort the groups by their first occurrence in the original list. Your task is to write the `find_anagrams` function adhering to the requirements specified above.","solution":"def find_anagrams(words): Groups words that are anagrams of each other. Args: words (list of str): List of words to be grouped. Returns: list of lists: Grouped list of anagrams. from collections import defaultdict anagram_groups = defaultdict(list) for word in words: # Sort the word in a case-insensitive manner sorted_word = \'\'.join(sorted(word.lower())) anagram_groups[sorted_word].append(word) # Convert dict to list of lists and sort by first occurrence of original words return list(anagram_groups.values())"},{"question":"Reads a list of employee records in JSON format and calculates the total salary expense for each department. Also, identify which department has the highest average salary. The function should return a dictionary with departments as keys and their total salaries as values, and the name of the department with the highest average salary. The function should output: tuple: A tuple containing: dict: A dictionary with department names as keys and total salary expense as values. str: The name of the department with the highest average salary. You should write self-contained code starting with: ```python import json from collections import defaultdict def calculate_salary_expenses(json_data): ```","solution":"import json from collections import defaultdict def calculate_salary_expenses(json_data): Reads a list of employee records in JSON format and calculates the total salary expense for each department. Also, identifies which department has the highest average salary. :param json_data: JSON formatted string of employee records :return: Tuple containing two elements: - a dictionary with department names as keys and total salary expense as values. - the name of the department with the highest average salary. data = json.loads(json_data) department_salaries = defaultdict(int) department_employees = defaultdict(int) for record in data: department = record[\'department\'] salary = record[\'salary\'] department_salaries[department] += salary department_employees[department] += 1 highest_avg_salary_department = None highest_avg_salary = 0 for department, total_salary in department_salaries.items(): avg_salary = total_salary / department_employees[department] if avg_salary > highest_avg_salary: highest_avg_salary = avg_salary highest_avg_salary_department = department return dict(department_salaries), highest_avg_salary_department"},{"question":"**Title:** Stock Price Data Aggregation **Description:** You are provided with stock price data for multiple companies over several days. Your task is to write a function that aggregates this data to compute the average closing price and the highest closing price for each company over the entire period. The input data is represented as a pandas DataFrame (`stock_data`) with the following columns: - `date`: The date of the stock prices (string in `YYYY-MM-DD` format). - `company`: The name of the company (string). - `closing_price`: The closing price of the company\'s stock on the given date (float). **Function Signature:** You need to create a function `aggregate_stock_data(stock_data: pd.DataFrame) -> pd.DataFrame` **Parameters:** - `stock_data`: `pd.DataFrame` - The DataFrame containing the stock price data. **Returns:** - `result`: `pd.DataFrame` - A DataFrame with two columns: - `company`: The name of the company. - `average_closing_price`: The average closing price of the company over the period. - `highest_closing_price`: The highest closing price of the company over the period. **Instructions:** 1. Group the data by the `company` column. 2. For each company, calculate the average of the `closing_price` values. 3. Also, find the highest `closing_price` value for each company. 4. Create a new DataFrame with the company names, their average closing prices, and their highest closing prices. 5. Return the newly created DataFrame. **Example:** ```python import pandas as pd data = { \'date\': [\'2023-01-01\', \'2023-01-01\', \'2023-01-02\', \'2023-01-02\', \'2023-01-03\', \'2023-01-03\'], \'company\': [\'CompanyA\', \'CompanyB\', \'CompanyA\', \'CompanyB\', \'CompanyA\', \'CompanyB\'], \'closing_price\': [100.5, 200.3, 101.0, 195.5, 102.2, 198.8] } stock_data = pd.DataFrame(data) result = aggregate_stock_data(stock_data) print(result) # Output could be: # company average_closing_price highest_closing_price # 0 CompanyA 101.23 102.2 # 1 CompanyB 198.20 200.3 ``` **Note:** The stock data is assumed to be clean, with no missing or duplicated entries for simplicity.","solution":"import pandas as pd def aggregate_stock_data(stock_data: pd.DataFrame) -> pd.DataFrame: Aggregates stock data to compute average and highest closing price for each company. Parameters: stock_data (pd.DataFrame): DataFrame containing stock price data with columns \'date\', \'company\', and \'closing_price\'. Returns: pd.DataFrame: DataFrame with columns \'company\', \'average_closing_price\', and \'highest_closing_price\'. # Group the stock data by \'company\' and compute the required metrics aggregated_data = stock_data.groupby(\'company\').agg( average_closing_price=(\'closing_price\', \'mean\'), highest_closing_price=(\'closing_price\', \'max\') ).reset_index() return aggregated_data"},{"question":"You are given a list of transactions where each transaction consists of a product ID and the quantity sold. Your goal is to write a Python function that calculates the total quantities for each unique product ID. # Function Requirements 1. **Function Name**: `calculate_total_quantity` 2. **Parameters**: - `transactions` (list of tuples): A list where each tuple contains two elements - product ID (an integer) and quantity sold (an integer). 3. **Returns**: - A dictionary where the keys are product IDs and the values are the total quantities sold for each product ID. # Detailed Instructions 1. **Implement the function**: - Define the function `calculate_total_quantity(transactions)`. - Initialize an empty dictionary to store the total quantities for each product ID. - Iterate through the list of transactions. - For each transaction, extract the product ID and quantity. - Update the total quantity in the dictionary for the corresponding product ID. - Return the dictionary with the total quantities. # Example Usage ```python transactions = [ (101, 2), (102, 5), (101, 3), (103, 7), (102, 2) ] results = calculate_total_quantity(transactions) print(results) # Expected output: {101: 5, 102: 7, 103: 7} ``` # Additional Notes - Ensure your implementation efficiently updates the quantities in the dictionary. - Handle cases where the list contains multiple transactions for the same product ID by accumulating the quantities.","solution":"def calculate_total_quantity(transactions): Calculate the total quantities for each unique product ID. Parameters: transactions (list of tuples): A list where each tuple contains two elements - product ID (an integer) and quantity sold (an integer). Returns: dict: A dictionary where the keys are product IDs and the values are the total quantities sold for each product ID. total_quantities = {} for product_id, quantity in transactions: if product_id in total_quantities: total_quantities[product_id] += quantity else: total_quantities[product_id] = quantity return total_quantities"},{"question":"Write a function that processes a CSV file containing employee working hours and calculates the total payment for each employee based on their hourly wage. The function should return a pandas DataFrame with the employee names and their corresponding total payment. If the CSV file is empty, the function should return an empty DataFrame. You should write self-contained code starting with: ``` import pandas as pd def calculate_payments(csv_file_path, hourly_wages): ```","solution":"import pandas as pd def calculate_payments(csv_file_path, hourly_wages): Processes a CSV file containing employee working hours and calculates the total payment for each employee. Parameters: csv_file_path (str): The path to the CSV file containing employee names and their working hours. hourly_wages (dict): A dictionary with employee names as keys and their hourly wage as values. Returns: pd.DataFrame: A DataFrame with employee names and their total payment. # Read the CSV file try: df = pd.read_csv(csv_file_path) except pd.errors.EmptyDataError: return pd.DataFrame(columns=[\'Employee\', \'TotalPayment\']) # Calculate total payment for each employee df[\'TotalPayment\'] = df.apply(lambda row: row[\'HoursWorked\'] * hourly_wages.get(row[\'Employee\'], 0), axis=1) # Group by employee and sum their total payments total_payment_df = df.groupby(\'Employee\')[\'TotalPayment\'].sum().reset_index() return total_payment_df"},{"question":"You are implementing a feature for a simple text-based restaurant ordering system. The system presents users with a menu and allows them to place an order. Your task is to define a function `take_order(menu)`, which will take a dictionary `menu` as an argument. The keys of the dictionary are the item names, and the values are the item prices. Your implementation of the `take_order(menu)` function should meet the following requirements: 1. **Displaying Menu**: The function should display the menu items and their prices in a formatted list. 2. **Taking Order**: The function should continuously prompt the user to enter the name of an item they want to order until they enter an empty string (i.e., just press Enter). 3. **Invalid Item Handling**: If the user enters an item name that is not in the menu, print a message indicating the item is invalid and prompt the user to try again. 4. **Order Summary**: After the user finishes entering items, display a summary of the ordered items and the total cost. # Define the `take_order(menu)` function The extended code should assume the presence of a defined `menu` dictionary and seamlessly integrate with the described functionality. **Example Execution Flow:** - Display the menu to the user. - Prompt the user to enter the item they wish to order. - After each item is entered, the system checks if the item is valid. - If invalid, notify the user and prompt again. - If valid, add the item to the order. - When the user finishes entering items, display the order summary including the total cost. **Sample Menu Dictionary:** ``` menu = { \'Burger\': 5.99, \'Fries\': 2.99, \'Soda\': 1.50, \'Salad\': 4.50 } ``` **Example Code Implementation:** ```python def take_order(menu): import sys import os def clear_screen(): os.system(\'cls\' if os.name == \'nt\' else \'clear\') order = [] total_cost = 0.0 clear_screen() print(\\"Welcome to our restaurant!\\") print(\\"Here is our menu:\\") for item, price in menu.items(): print(f\\"{item}: {price:.2f}\\") while True: item = input(\\"nPlease enter the name of the item you want to order (or press Enter to finish): \\") if item == \\"\\": break elif item not in menu: print(f\\"\'{item}\' is not on the menu. Please try again.\\") else: order.append(item) total_cost += menu[item] clear_screen() print(\\"Your order summary:\\") for item in order: print(f\\"- {item}: {menu[item]:.2f}\\") print(f\\"Total Cost: {total_cost:.2f}\\") ```","solution":"def take_order(menu): This function takes a dictionary named \'menu\' as input, displays the menu, allows user to place an order by entering item names, and displays a summary of the order with the total cost. order = [] total_cost = 0.0 # Display the menu print(\\"Welcome to our restaurant!\\") print(\\"Here is our menu:\\") for item, price in menu.items(): print(f\\"{item}: {price:.2f}\\") while True: item = input(\\"nPlease enter the name of the item you want to order (or press Enter to finish): \\").strip() if item == \\"\\": break elif item not in menu: print(f\\"\'{item}\' is not on the menu. Please try again.\\") else: order.append(item) total_cost += menu[item] # Display order summary print(\\"nYour order summary:\\") for item in order: print(f\\"- {item}: {menu[item]:.2f}\\") print(f\\"Total Cost: {total_cost:.2f}\\") # No unit test code can execute UI-based input handling. Below are the unit tests, indicating the approach."},{"question":"You are given a list of transaction records for various customers. Each record contains a customer ID, transaction amount, and timestamp. Your task is to analyze the transactions and identify fraudulent activities. A fraudulent activity is defined as any customer having more than a specified number of transactions within a given time period. Write a function named `identify_fraudulent_activity` which takes in three arguments: 1. `transactions` (List[dict]): A list of transaction records where each record is a dictionary containing \'customer_id\' (str), \'amount\' (float), and \'timestamp\' (str) in \\"YYYY-MM-DD HH:MM:SS\\" format. 2. `threshold` (int): The maximum number of transactions allowed for a customer within the given time period. 3. `time_period` (str): The time period to check for the threshold, given in \\"N units\\" format (e.g., \\"5 minutes\\", \\"1 hour\\", \\"1 day\\"). The function should return a list of customer IDs who have exceeded the transaction threshold within the specified time period. Hint: You may find the `pandas` library useful for handling and analyzing the transaction data. Function signature: ```python from typing import List, Dict import pandas as pd def identify_fraudulent_activity(transactions: List[Dict], threshold: int, time_period: str) -> List[str]: Args: transactions (List[dict]): List of transaction records. threshold (int): Maximum number of transactions allowed within the given time period. time_period (str): The time period to check for the threshold, formatted as \\"N units\\". Returns: List[str]: List of customer IDs who exceeded the transaction threshold. # Your code here ``` **Example Usage:** ```python transactions = [ {\\"customer_id\\": \\"C001\\", \\"amount\\": 100.0, \\"timestamp\\": \\"2023-10-01 10:00:00\\"}, {\\"customer_id\\": \\"C001\\", \\"amount\\": 200.0, \\"timestamp\\": \\"2023-10-01 10:05:00\\"}, {\\"customer_id\\": \\"C002\\", \\"amount\\": 150.0, \\"timestamp\\": \\"2023-10-01 10:15:00\\"}, {\\"customer_id\\": \\"C001\\", \\"amount\\": 300.0, \\"timestamp\\": \\"2023-10-01 10:06:00\\"}, {\\"customer_id\\": \\"C002\\", \\"amount\\": 250.0, \\"timestamp\\": \\"2023-10-01 10:20:00\\"}, {\\"customer_id\\": \\"C001\\", \\"amount\\": 400.0, \\"timestamp\\": \\"2023-10-01 10:07:00\\"}, ] fraudulent_customers = identify_fraudulent_activity(transactions, 3, \\"10 minutes\\") print(fraudulent_customers) # Output: [\'C001\'] ```","solution":"from typing import List, Dict import pandas as pd def identify_fraudulent_activity(transactions: List[Dict], threshold: int, time_period: str) -> List[str]: # Parse the transactions into a DataFrame df = pd.DataFrame(transactions) df[\'timestamp\'] = pd.to_datetime(df[\'timestamp\']) # Extract the numeric value and unit from the time_period value, unit = time_period.split() value = int(value) # Define the frequency string for pandas offset if unit.startswith(\'minute\'): time_range = f\'{value}T\' elif unit.startswith(\'hour\'): time_range = f\'{value}H\' elif unit.startswith(\'day\'): time_range = f\'{value}D\' else: raise ValueError(\\"Unsupported time unit. Use \'minutes\', \'hours\', or \'days\'.\\") # Create an empty list to store fraudulent customer IDs fraudulent_customers = set() # Group by each customer and check their transaction count within the time period for customer_id, group in df.groupby(\'customer_id\'): time_windows = group[\'timestamp\'].apply(lambda x: pd.date_range(start=x, periods=2, freq=time_range)[1]) for window_start, window_end in zip(group[\'timestamp\'], time_windows): count_in_range = group[(group[\'timestamp\'] >= window_start) & (group[\'timestamp\'] < window_end)].shape[0] if count_in_range > threshold: fraudulent_customers.add(customer_id) break return list(fraudulent_customers)"},{"question":"You are required to write a function named `evaluate_reverse_polish_notation` that evaluates the value of an arithmetic expression in Reverse Polish Notation (RPN). The function should take a list of strings, where each string is either an operand or an operator, and return the result as an integer. The function definition is as follows: ```python def evaluate_reverse_polish_notation(tokens: list) -> int: Evaluates the value of an arithmetic expression in Reverse Polish Notation. Parameters: - tokens (list): A list of strings representing a valid RPN expression. Each string is either an operand (e.g., \\"2\\") or an operator (e.g., \\"+\\"). Returns: - int: The evaluated result of the RPN expression. pass ``` # Constraints: 1. Each token is either an integer or one of the following operators: \\"+\\", \\"-\\", \\"*\\", \\"/\\". 2. It is guaranteed that the given RPN expression is valid. 3. Division between two integers should truncate towards zero. # Example: For given input `tokens=[\\"2\\", \\"1\\", \\"+\\", \\"3\\", \\"*\\"]`, the output should be: ```python 9 ``` For given input `tokens=[\\"4\\", \\"13\\", \\"5\\", \\"/\\", \\"+\\"]`, the output should be: ```python 6 ``` **Hint**: Use a stack to keep track of the intermediate results as you process each token in the RPN expression.","solution":"def evaluate_reverse_polish_notation(tokens: list) -> int: stack = [] for token in tokens: if token in (\'+\', \'-\', \'*\', \'/\'): b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(int(a / b)) # truncate towards zero else: stack.append(int(token)) return stack[0]"},{"question":"Create a function called `recipe_book` with the following behaviors: 1. **Prints an introductory message** for the recipe book. 2. **Takes the number of recipes** as input from the user. 3. **For each recipe,** prompts the user to enter the recipe name, the number of ingredients, and then enter each ingredient separately. 4. **Stores each recipe and its ingredients** in a dictionary where the key is the recipe name and the value is a list of ingredients. 5. **After all recipes are entered,** prints out the recipe book in a nicely formatted manner. Ensure you handle the user inputs appropriately and display the final recipes in a clear and readable way. **Function Signature:** ```python def recipe_book() -> None: ``` **Requirements:** - Prompt for the number of recipes. - Collect and store each recipe\'s name and ingredients. - Display the final list of recipes in a formatted output.","solution":"def recipe_book(): Collects recipes from the user and displays them in a formatted way. print(\\"Welcome to the Recipe Book!\\") try: num_recipes = int(input(\\"How many recipes would you like to add? \\")) except ValueError: print(\\"Please enter a valid number of recipes.\\") return recipes = {} for _ in range(num_recipes): recipe_name = input(\\"Enter the name of the recipe: \\").strip() try: num_ingredients = int(input(f\\"How many ingredients does {recipe_name} have? \\")) except ValueError: print(\\"Please enter a valid number of ingredients.\\") return ingredients = [] for _ in range(num_ingredients): ingredient = input(\\"Enter an ingredient: \\").strip() ingredients.append(ingredient) recipes[recipe_name] = ingredients print(\\"nRecipe Book:\\") for recipe, ingredients in recipes.items(): print(f\\"n{recipe}:\\") for ingredient in ingredients: print(f\\" - {ingredient}\\")"},{"question":"You are asked to design a function called `lucky_number_calculator` that calculates a \\"lucky number\\" based on a person\'s name. The function should follow these steps: 1. Take a single string input representing a person\'s name. 2. Remove any non-alphabetical characters and convert the name to lowercase. 3. Assign each letter a value corresponding to its position in the alphabet: a=1, b=2, ..., z=26. 4. Calculate the sum of these numeric values. 5. Continue reducing this sum until a single-digit number is obtained by summing the digits of the sum repeatedly. 6. Return this single-digit number as the \\"lucky number\\". For example, given the name \\"Alice\\", the process should be: - Clean and normalize: \\"alice\\" - Numeric values: a=1, l=12, i=9, c=3, e=5 - Sum: 1 + 12 + 9 + 3 + 5 = 30 - Reduce: 3 + 0 = 3 - Lucky number: 3 Here is a template of the required function definition: ```python def lucky_number_calculator(name): # Function details go here pass ```","solution":"def lucky_number_calculator(name): Calculates the \'lucky number\' based on the given name. Args: name (str): The name input to compute the lucky number. Returns: int: A single-digit lucky number. name = \'\'.join(filter(str.isalpha, name)).lower() alphabet_values = {chr(i + 96): i for i in range(1, 27)} total_sum = sum(alphabet_values[char] for char in name) while total_sum >= 10: total_sum = sum(int(digit) for digit in str(total_sum)) return total_sum"},{"question":"This function takes a list of student dictionaries and computes the average grade for each student. It then returns a new list of dictionaries containing each student\'s name and their corresponding average grade. If any student\'s grades list is empty, their average grade should be represented as `None`. The function should output: list: A list of dictionaries with each student\'s name and their average grade. You should write self-contained code starting with: ``` def calculate_average_grades(students): ```","solution":"def calculate_average_grades(students): This function takes a list of student dictionaries and computes the average grade for each student. It then returns a new list of dictionaries containing each student\'s name and their corresponding average grade. If any student\'s grades list is empty, their average grade should be represented as `None`. Args: students (list): List of dictionaries, where each dictionary contains \'name\' and \'grades\'. Returns: list: A list of dictionaries with each student\'s name and their average grade. result = [] for student in students: name = student.get(\'name\') grades = student.get(\'grades\', []) if len(grades) == 0: average_grade = None else: average_grade = sum(grades) / len(grades) result.append({\'name\': name, \'average_grade\': average_grade}) return result"},{"question":"** You are tasked with writing a Python function that models a basic Markov chain and computes the steady-state probabilities of each state. A Markov chain is a stochastic process that undergoes transitions from one state to another in a state space. In many practical problems, we are interested in the long-term behavior of the Markov chain, which is represented by its steady-state distribution. The function `compute_steady_state_probabilities(transition_matrix, tol=1e-6, max_iterations=1000)` should: 1. Initialize a probability vector with equal probability for each state. 2. Iteratively update the probability vector using the transition matrix until it converges to a steady state. 3. Return the steady-state probability vector once convergence is achieved or the maximum number of iterations is reached. **Function Specification:** ```python def compute_steady_state_probabilities(transition_matrix, tol=1e-6, max_iterations=1000): Compute the steady-state probabilities for a Markov chain given a transition matrix. Arguments: - transition_matrix: A square matrix (list of lists) where element (i, j) represents the transition probability from state i to state j. - tol: The tolerance for convergence (default is 1e-6). - max_iterations: The maximum number of iterations to perform (default is 1000). Returns: - A list representing the steady-state probabilities for each state. pass ``` You need to: - Import the appropriate numerical computation library such as `numpy`. - Ensure that the transition matrix is a valid probability matrix (rows sum to 1). - Initialize the probability vector using an appropriate method (equal probabilities for all states). - Update the probability vector using matrix multiplication iteratively. - Check for convergence by comparing the difference between successive updates against the tolerance. - Return the steady-state probability vector once convergence is achieved or after the maximum iterations. **","solution":"import numpy as np def compute_steady_state_probabilities(transition_matrix, tol=1e-6, max_iterations=1000): Compute the steady-state probabilities for a Markov chain given a transition matrix. Arguments: - transition_matrix: A square matrix (list of lists) where element (i, j) represents the transition probability from state i to state j. - tol: The tolerance for convergence (default is 1e-6). - max_iterations: The maximum number of iterations to perform (default is 1000). Returns: - A list representing the steady-state probabilities for each state. # Convert the transition matrix to a numpy array P = np.array(transition_matrix) # Number of states n = P.shape[0] # Initialize the probability vector with equal probability for each state prob_vector = np.ones(n) / n for iteration in range(max_iterations): # Update the probability vector new_prob_vector = np.dot(prob_vector, P) # Check for convergence if np.linalg.norm(new_prob_vector - prob_vector, ord=1) < tol: return new_prob_vector.tolist() prob_vector = new_prob_vector return prob_vector.tolist()"},{"question":"You have been given a JSON file named `ecommerce_sales.json` that contains sales records for an online store. Each entry in the JSON file represents a single transaction with various fields, including the total sale amount and the category of the item sold. You need to write a function `analyze_sales` that reads this JSON file and computes several statistics on the sales records. Specifically, you need to use the `json` library to parse the file. The function should output the following: 1. The total number of sales transactions in the file. 2. The average sale amount across all transactions. 3. The highest sale amount recorded. 4. The total number of transactions for each item category. 5. The total revenue for each item category. The JSON file has the following structure for each transaction: - `sale_amount`: The amount of the sale (a float). - `category`: The category of the item sold (a string). The function signature is as follows: ```python def analyze_sales(filename: str) -> None: ``` The `filename` parameter is the path to the JSON file.","solution":"import json from collections import defaultdict def analyze_sales(filename: str) -> None: with open(filename, \'r\') as file: sales_data = json.load(file) total_sales_transactions = len(sales_data) total_sales_amount = sum(sale[\'sale_amount\'] for sale in sales_data) average_sale_amount = total_sales_amount / total_sales_transactions if total_sales_transactions > 0 else 0 highest_sale_amount = max(sale[\'sale_amount\'] for sale in sales_data) if total_sales_transactions > 0 else 0 category_count = defaultdict(int) category_revenue = defaultdict(float) for sale in sales_data: category = sale[\'category\'] amount = sale[\'sale_amount\'] category_count[category] += 1 category_revenue[category] += amount print(\\"Total number of sales transactions:\\", total_sales_transactions) print(\\"Average sale amount:\\", average_sale_amount) print(\\"Highest sale amount recorded:\\", highest_sale_amount) print(\\"Total number of transactions for each item category:\\", dict(category_count)) print(\\"Total revenue for each item category:\\", dict(category_revenue))"},{"question":"Write a function `filter_and_transform_orders(orders, threshold)` that takes a list of dictionaries, `orders`, and an integer, `threshold`, as its input. Each dictionary in `orders` represents an order and has the following structure: ```python { \'order_id\': int, \'product_name\': str, \'quantity\': int, \'price_per_item\': float, \'status\': str } ``` The function should accomplish the following tasks: 1. Filter out the orders that have a `status` other than `\'delivered\'`. 2. For each remaining order, calculate the total price by multiplying the `quantity` with `price_per_item`. 3. Only include orders where the total price is greater than the `threshold` value. 4. Transform the filtered orders into a new list of dictionaries with the following structure: ```python { \'order_id\': int, \'product_name\': str, \'total_price\': float } ``` Return the newly constructed list. Example input: ```python orders = [ {\'order_id\': 1, \'product_name\': \'Pen\', \'quantity\': 10, \'price_per_item\': 2.5, \'status\': \'delivered\'}, {\'order_id\': 2, \'product_name\': \'Notebook\', \'quantity\': 5, \'price_per_item\': 3.5, \'status\': \'pending\'}, {\'order_id\': 3, \'product_name\': \'Pencil\', \'quantity\': 20, \'price_per_item\': 1.5, \'status\': \'delivered\'}, {\'order_id\': 4, \'product_name\': \'Eraser\', \'quantity\': 1, \'price_per_item\': 0.5, \'status\': \'delivered\'} ] threshold = 20 ``` Example output: ```python [ {\'order_id\': 3, \'product_name\': \'Pencil\', \'total_price\': 30.0} ] ```","solution":"def filter_and_transform_orders(orders, threshold): Filters and transforms orders according to the given specifications. Parameters: orders (list): List of dictionaries where each dictionary represents an order. threshold (int): The minimum total price an order must have to be included in the result. Returns: list: A list of transformed orders that meet the criteria. # Step 1: Filter out orders with status other than \'delivered\' delivered_orders = [order for order in orders if order[\'status\'] == \'delivered\'] # Step 2: Calculate total price and apply threshold result = [] for order in delivered_orders: total_price = order[\'quantity\'] * order[\'price_per_item\'] if total_price > threshold: # Step 4: Transform the order dictionary transformed_order = { \'order_id\': order[\'order_id\'], \'product_name\': order[\'product_name\'], \'total_price\': total_price } result.append(transformed_order) return result"},{"question":"You are required to create a Python function using the `Pandas` library, commonly used for data manipulation and analysis. The task is to write a function named `filter_and_aggregate` that accepts the following parameters: - `dataframe`: a Pandas DataFrame that contains columns \'category\', \'value\', and \'timestamp\'. - `category`: a string indicating the category to filter the data on. - `start_date`: a string representing the start date in the format \'YYYY-MM-DD\'. - `end_date`: a string representing the end date in the format \'YYYY-MM-DD\'. The function `filter_and_aggregate` should perform the following tasks: 1. Filter the DataFrame to include only rows where the \'category\' column matches the provided category and the \'timestamp\' column falls between the start_date and end_date, inclusive. 2. After filtering the data, calculate the sum of the \'value\' column. 3. Return the resulting sum as a single integer. Make sure to handle the date and time filtering appropriately and ensure the function performs the necessary operations as efficiently as possible. Here is an example DataFrame that could be passed to the `filter_and_aggregate` function: ``` category value timestamp 0 A 10 2023-01-01 1 B 20 2023-01-02 2 A 30 2023-02-01 3 B 40 2023-02-02 4 A 50 2023-03-01 ``` For instance, calling `filter_and_aggregate(dataframe, \'A\', \'2023-01-01\', \'2023-02-28\')` should return `40`, since the rows for category \'A\' within the given date range have values 10 and 30, and their sum is 40.","solution":"import pandas as pd def filter_and_aggregate(dataframe, category, start_date, end_date): Filter the dataframe by category and date range, then sum the \'value\' column. Parameters: - dataframe (pd.DataFrame): DataFrame with columns \'category\', \'value\', \'timestamp\' - category (str): The category to filter on - start_date (str): Start date in \'YYYY-MM-DD\' format - end_date (str): End date in \'YYYY-MM-DD\' format Returns: - int: Sum of the \'value\' column after filtering # Convert the timestamp column to datetime if it\'s not already if not pd.api.types.is_datetime64_any_dtype(dataframe[\'timestamp\']): dataframe[\'timestamp\'] = pd.to_datetime(dataframe[\'timestamp\']) # Filter the DataFrame based on category and date range filtered_df = dataframe[ (dataframe[\'category\'] == category) & (dataframe[\'timestamp\'] >= start_date) & (dataframe[\'timestamp\'] <= end_date) ] # Calculate the sum of the \'value\' column in the filtered DataFrame total_value = filtered_df[\'value\'].sum() return total_value"},{"question":"You are asked to create a function named `find_common_elements` that identifies common elements present in three sorted lists. The function should return a new sorted list containing these common elements. Implement this function efficiently to handle large input sizes. Below is the detailed specification of the `find_common_elements` function: Function Signature ```python def find_common_elements(list1, list2, list3): Find common elements in three sorted lists. :param list1: List[int], first sorted list of integers :param list2: List[int], second sorted list of integers :param list3: List[int], third sorted list of integers :return: List[int], sorted list of common elements ``` Requirements: 1. Your function should take three parameters: - `list1` (a sorted list of integers), - `list2` (a sorted list of integers), - `list3` (a sorted list of integers). 2. Use a linear-time algorithm to identify common elements, ensuring the function can handle large lists efficiently. 3. Return a new list that contains the common elements, sorted in ascending order. 4. Ensure that your solution does not convert the list into sets or use any additional sorting operations. Manipulate the lists directly using their sorted properties. 5. Include test cases that demonstrate the function\'s behavior with varying input sizes (including edge cases with empty lists).","solution":"def find_common_elements(list1, list2, list3): Find common elements in three sorted lists. :param list1: List[int], first sorted list of integers :param list2: List[int], second sorted list of integers :param list3: List[int], third sorted list of integers :return: List[int], sorted list of common elements i, j, k = 0, 0, 0 common_elements = [] while i < len(list1) and j < len(list2) and k < len(list3): if list1[i] == list2[j] == list3[k]: common_elements.append(list1[i]) i += 1 j += 1 k += 1 elif list1[i] < list2[j]: i += 1 elif list2[j] < list3[k]: j += 1 else: k += 1 return common_elements"},{"question":"In this problem, you are required to write a function that calculates the moving average of closing stock prices over a specified window. The primary goal is to smooth the price series to identify the general trend in a noisy data set. Your task is to implement a function that performs this calculation on a time series data frame. Your task is to implement the following function: ```python def moving_average(stock_data: pd.DataFrame, window: int) -> pd.DataFrame: :param stock_data: stock price dataframe with \'Date\' and \'Close\' columns :param window: integer representing the window size for the moving average :return: dataframe with the \'Date\' and \'Moving_Average\' columns The function should add a new column called \'Moving_Average\' to the input DataFrame `stock_data`, which calculates the moving average of the closing prices using the specified window size. The input DataFrame `stock_data` has the following columns: - Date: Date of the stock price in string format. - Close: Closing price of the stock on that date. Use the following API functions from the pandas library for this task: 1. `pandas.to_datetime` 2. `pandas.DataFrame` 3. `pandas.Series.rolling` # Your implementation here ``` To demonstrate the functionality, consider the following example: ```python import pandas as pd # Sample stock data data = { \'Date\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-04\', \'2023-01-05\'], \'Close\': [100, 102, 104, 103, 101] } stock_data = pd.DataFrame(data) # Calculating the moving average with a window of 2 days result = moving_average(stock_data, window=2) print(result) ``` Ensure to handle date parsing and missing values appropriately. The resulting DataFrame should include the moving average values correctly aligned with the given window size.","solution":"import pandas as pd def moving_average(stock_data: pd.DataFrame, window: int) -> pd.DataFrame: :param stock_data: stock price dataframe with \'Date\' and \'Close\' columns :param window: integer representing the window size for the moving average :return: dataframe with the \'Date\' and \'Moving_Average\' columns The function should add a new column called \'Moving_Average\' to the input DataFrame `stock_data`, which calculates the moving average of the closing prices using the specified window size. The input DataFrame `stock_data` has the following columns: - Date: Date of the stock price in string format. - Close: Closing price of the stock on that date. # Ensure the \'Date\' column is in datetime format stock_data[\'Date\'] = pd.to_datetime(stock_data[\'Date\']) # Calculate the moving average of the \'Close\' prices with the given window size stock_data[\'Moving_Average\'] = stock_data[\'Close\'].rolling(window=window).mean() # Return the dataframe with \'Date\' and \'Moving_Average\' columns return stock_data[[\'Date\', \'Moving_Average\']] # Example usage: # import pandas as pd # data = {\'Date\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-04\', \'2023-01-05\'], # \'Close\': [100, 102, 104, 103, 101]} # stock_data = pd.DataFrame(data) # result = moving_average(stock_data, window=2) # print(result)"},{"question":"Implement a function `letter_frequency_histogram` that takes a single argument `text`, which is a string. The function should calculate the frequency of each letter in the string and then plot a histogram using `matplotlib` to visualize these frequencies. Ignore case (i.e., count \'A\' and \'a\' as the same letter) and consider only alphabetic characters. Your function should: 1. Calculate the frequency of each letter in the given string. 2. Plot a histogram of these letter frequencies using `matplotlib`, with letters on the x-axis and frequencies on the y-axis. Below is a skeleton of the function: ```python import matplotlib.pyplot as plt from collections import Counter import string def letter_frequency_histogram(text): # Your code here # Example usage: letter_frequency_histogram(\\"Hello World\\") # This should plot a histogram showing the frequency of each letter in the string \\"Hello World\\". ``` Make sure to import the necessary packages and dependencies at the beginning of your code.","solution":"import matplotlib.pyplot as plt from collections import Counter import string def letter_frequency_histogram(text): Plots a histogram of letter frequencies in the given text. Args: text (str): Input text to analyze letter frequencies. # Convert text to lowercase and filter only alphabetic characters filtered_text = \'\'.join(filter(str.isalpha, text.lower())) # Count the frequency of each letter using Counter counter = Counter(filtered_text) # Create a sorted list of letters and their frequencies letters = sorted(counter.keys()) frequencies = [counter[letter] for letter in letters] # Plot the histogram plt.figure(figsize=(10, 6)) plt.bar(letters, frequencies, color=\'blue\') plt.xlabel(\'Letters\') plt.ylabel(\'Frequencies\') plt.title(\'Letter Frequency Histogram\') plt.show()"},{"question":"You are tasked with creating a function that finds the maximum path sum in a binary tree. The primary objective is to better understand tree traversal and dynamic programming techniques. Your function needs to handle various edge cases, including trees with negative values. Function Specifications: 1. **Function Name:** `max_path_sum` 2. **Parameters:** - `root`: The root node of a binary tree. 3. **Tree Node Definition:** Assume a `TreeNode` class is defined as follows: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` 4. **Behavior:** - Calculate the maximum path sum in the binary tree. A path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. - You may assume the input is a binary tree with at least one node. - Handle any edge cases such as negative values. 5. **Example Use Case:** ```python # Example Tree: # 1 # / # 2 3 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) print(max_path_sum(root)) # Output: 6 (2 + 1 + 3) ``` This example should calculate and print the maximum path sum of 6, which goes through nodes 2, 1, and 3.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_path_sum(root): Calculates the maximum path sum in a binary tree. def helper(node): nonlocal max_sum if not node: return 0 left_sum = max(helper(node.left), 0) # ignore paths with negative sums right_sum = max(helper(node.right), 0) current_path_sum = node.value + left_sum + right_sum # Update global maximum if the current path sum is greater max_sum = max(max_sum, current_path_sum) # Return the maximum gain if continuing the same path return node.value + max(left_sum, right_sum) max_sum = float(\'-inf\') helper(root) return max_sum"},{"question":"Design and implement a function that calculates the minimum spanning tree (MST) of a given graph using Kruskal\'s algorithm. The function should accept an adjacency list representation of the graph and output the total weight of the MST. For the purpose of this task, assume the graph is undirected and connected, and each edge has a positive weight. The input graph is represented by a dictionary where keys are node identifiers and values are lists of tuples, each containing a neighboring node and the edge weight. The function should output: - int: The total weight of the MST. You should write a self-contained function starting with: ``` def kruskal_mst(graph): ```","solution":"def kruskal_mst(graph): Calculates the minimum spanning tree (MST) of a given graph using Kruskal\'s algorithm. Parameters: graph (dict): An adjacency list representation of the graph. Keys are node identifiers and values are lists of tuples, each containing a neighboring node and the edge weight. Returns: int: The total weight of the MST. edges = [] for node in graph: for neighbor, weight in graph[node]: if node < neighbor: edges.append((weight, node, neighbor)) edges.sort() parent = {} rank = {} def find(node): if parent[node] != node: parent[node] = find(parent[node]) return parent[node] def union(node1, node2): root1 = find(node1) root2 = find(node2) if root1 != root2: if rank[root1] > rank[root2]: parent[root2] = root1 else: parent[root1] = root2 if rank[root1] == rank[root2]: rank[root2] += 1 for node in graph: parent[node] = node rank[node] = 0 mst_weight = 0 mst_edges = 0 for weight, u, v in edges: if find(u) != find(v): union(u, v) mst_weight += weight mst_edges += 1 if mst_edges == len(graph) - 1: break return mst_weight"},{"question":"Implement a function that normalizes a given list of integers based on the given range [a, b]. The normalized value `y` of an integer `x` is calculated using the formula: [ y = frac{(x - text{min}) times (b - a)}{text{max} - text{min}} + a ] where `min` is the minimum value in the list and `max` is the maximum value in the list. If the list is empty, the function should raise a ValueError. The function should accept: - `nums`: List of integers to normalize. - `a`: Integer, lower bound of the normalization range. - `b`: Integer, upper bound of the normalization range. The function should return: - List of normalized integers. You should write self-contained code starting with: ``` def normalize(nums, a, b): ```","solution":"def normalize(nums, a, b): Normalizes the given list of integers based on the given range [a, b]. Parameters: nums (list): List of integers to normalize. a (int): Lower bound of the normalization range. b (int): Upper bound of the normalization range. Returns: list: List of normalized integers. Raises: ValueError: If the input list is empty. if not nums: raise ValueError(\\"The input list cannot be empty.\\") min_val = min(nums) max_val = max(nums) if min_val == max_val: return [a] * len(nums) return [((x - min_val) * (b - a)) / (max_val - min_val) + a for x in nums]"},{"question":"You are asked to implement a function for the k-means clustering algorithm. The function should be named `k_means_clustering` and must utilize the numpy library for numerical operations, particularly `numpy.linalg.norm` for computing the Euclidean distance. Here is a detailed breakdown of the function\'s requirements: # Function Signature: ```python def k_means_clustering(data_points, k, max_iterations): ``` # Parameters: - `data_points` (numpy.ndarray): The input dataset with each column representing a data point, shaped `(n_features, m_samples)`. - `k` (int): The number of clusters to form. - `max_iterations` (int): The maximum number of iterations to run the algorithm. # Returns: - A dictionary containing: - `\'centroids\'` (numpy.ndarray): The coordinates of the k centroids, shaped `(n_features, k)`. - `\'labels\'` (numpy.ndarray): Array of cluster assignments for each data point, shaped `(m_samples,)`. - `\'inertia\'` (float): The sum of squared distances of samples to their closest cluster center. # Functionality: 1. **Initialization**: Randomly initialize the centroids by randomly sampling `k` data points without replacement. 2. **Assignment Step**: Assign each data point to the nearest centroid based on Euclidean distance using `numpy.linalg.norm`. 3. **Update Step**: Recalculate the centroids as the mean of all data points assigned to each centroid. 4. **Convergence Check**: Check for convergence by comparing the centroids of the current iteration with those of the previous iteration. 5. **Stopping Condition**: Stop if the centroids do not change or if the maximum number of iterations is reached. 6. **Inertia Calculation**: Sum of squared distances of samples to their closest cluster center. # Example Usage: Here\'s an example of how the function might be used: ```python import numpy as np # Sample dataset data_points = np.array([[1.0, 1.5, 3.0, 5.0, 3.5, 4.0], [1.0, 1.5, 1.0, 2.0, 5.5, 4.5]]) # Number of clusters k = 2 # Maximum iterations max_iterations = 100 # Perform k-means clustering result = k_means_clustering(data_points, k, max_iterations) print(\\"Final Centroids:\\", result[\'centroids\']) print(\\"Cluster Labels:\\", result[\'labels\']) print(\\"Inertia:\\", result[\'inertia\']) ``` Your task is to implement the `k_means_clustering` function following the above description.","solution":"import numpy as np def k_means_clustering(data_points, k, max_iterations): Perform k-means clustering on the given data points. Parameters: - data_points (numpy.ndarray): The input dataset with each column representing a data point, shaped (n_features, m_samples). - k (int): The number of clusters to form. - max_iterations (int): The maximum number of iterations to run the algorithm. Returns: - A dictionary containing: - \'centroids\' (numpy.ndarray): The coordinates of the k centroids, shaped (n_features, k). - \'labels\' (numpy.ndarray): Array of cluster assignments for each data point, shaped (m_samples,). - \'inertia\' (float): The sum of squared distances of samples to their closest cluster center. np.random.seed(42) # For reproducibility # Initialize the centroids by randomly sampling k data points n_features, m_samples = data_points.shape initial_indices = np.random.choice(m_samples, k, replace=False) centroids = data_points[:, initial_indices] labels = np.zeros(m_samples, dtype=int) for iteration in range(max_iterations): # Assignment step for i in range(m_samples): distances = np.linalg.norm(data_points[:, i:i+1] - centroids, axis=0) labels[i] = np.argmin(distances) # Update step new_centroids = np.zeros((n_features, k)) for j in range(k): points_in_cluster = data_points[:, labels == j] if points_in_cluster.shape[1] > 0: new_centroids[:, j] = np.mean(points_in_cluster, axis=1) else: new_centroids[:, j] = centroids[:, j] # Keep the same centroid if no points are assigned # Check for convergence if np.all(centroids == new_centroids): break centroids = new_centroids # Calculate inertia inertia = 0.0 for i in range(m_samples): inertia += np.min(np.linalg.norm(data_points[:, i:i+1] - centroids, axis=0)**2) return { \'centroids\': centroids, \'labels\': labels, \'inertia\': inertia }"},{"question":"In this problem, we will implement the forward pass for a ReLU (Rectified Linear Unit) activation layer using the `numpy` library. The goal is to write a function named `relu_forward` that computes the output of the ReLU function given the input data. The ReLU activation function is defined as `ReLU(x) = max(0, x)` and is applied element-wise to the input. You are given the input data `x`, which has shape `(N, D)`, where `N` is the number of examples and `D` is the number of features. You need to complete the following steps: 1. Apply the ReLU function to the input data `x`. 2. Return the output of the ReLU function and a cache containing the input data `x` that can be used for the backward pass. **Function Definition:** ```python def relu_forward(x): Computes the forward pass for a ReLU layer. Input: - x: Input data of shape (N, D) Returns a tuple of: - out: Output data, of shape (N, D) - cache: Input data x, of shape (N, D) ``` Ensure that: - The output `out` retains the same shape as the input `x`. **Keep in Mind:** - Use `numpy.maximum` to apply the ReLU function element-wise.","solution":"import numpy as np def relu_forward(x): Computes the forward pass for a ReLU layer. Input: - x: Input data of shape (N, D) Returns a tuple of: - out: Output data, of shape (N, D) - cache: Input data x, of shape (N, D) out = np.maximum(0, x) cache = x return out, cache"},{"question":"Write a function named `generate_sentence_from_file` that reads a text file containing multiple lines of words and constructs a grammatically correct sentence from a specified number of words chosen at random. Ensure that the first word starts with a capital letter and the sentence ends with a period. If the number of words requested is greater than the number of words available in the file, raise a `ValueError` with an appropriate message. The function should follow these steps: 1. Open and read the contents of the specified file. Assume each line in the file is a series of words separated by space. 2. Flatten the list of words and remove any newline or extra spaces. Normalize all words to lowercase. 3. Randomly select the specified number of words from the list. 4. Capitalize the first word and ensure the sentence ends with a period. 5. Combine the words into a single string. Your function definition should be as follows: ```python def generate_sentence_from_file(filename: str, num_words: int) -> str: import random # Your implementation here ``` Example: Suppose the contents of \\"sample.txt\\" are: ``` hello world this is a sample file with multiple lines of text for testing ``` Calling `generate_sentence_from_file(\\"sample.txt\\", 5)` might produce: \\"Sample testing is text world.\\"","solution":"import random def generate_sentence_from_file(filename: str, num_words: int) -> str: with open(filename, \'r\') as file: words = [] for line in file: words.extend(line.strip().lower().split()) if num_words > len(words): raise ValueError(\\"The requested number of words exceeds the number of words available in the file.\\") selected_words = random.sample(words, num_words) selected_words[0] = selected_words[0].capitalize() sentence = \' \'.join(selected_words) + \'.\' return sentence"},{"question":"You are tasked with writing a function `count_and_classify_words` that processes a list of words to count their occurrences and classify them based on their lengths. The function should return two results: a dictionary with the word as the key and its count as the value, and another dictionary classifying the words into short (1-4 characters), medium (5-7 characters), and long (8 or more characters) lengths. The function signature should be: ```python def count_and_classify_words(words): ``` Parameters: - `words` (list of strings): A list containing words to be processed. Your function should: 1. Count the occurrences of each word in the given list. 2. Classify the words into three categories based on their lengths: - `short` for words with 1 to 4 characters, - `medium` for words with 5 to 7 characters, - `long` for words with 8 or more characters. 3. Return a tuple containing two dictionaries: - The first dictionary should have words as keys and their counts as values. - The second dictionary should have the categories \'short\', \'medium\', and \'long\' as keys and lists of words in each category as values. Example Input: ```python words = [\\"apple\\", \\"banana\\", \\"pear\\", \\"apple\\", \\"kiwi\\", \\"plum\\", \\"grape\\", \\"kiwi\\", \\"watermelon\\"] count_and_classify_words(words) ``` Expected Output: ```python ( { \'apple\': 2, \'banana\': 1, \'pear\': 1, \'kiwi\': 2, \'plum\': 1, \'grape\': 1, \'watermelon\': 1 }, { \'short\': [\'pear\', \'kiwi\', \'plum\'], \'medium\': [\'apple\', \'banana\', \'grape\'], \'long\': [\'watermelon\'] } ) ``` Ensure your solution is efficient and handles edge cases, such as an empty input list or very long lists with various word lengths.","solution":"def count_and_classify_words(words): Counts the occurrences of each word and classifies them based on their lengths. Parameters: words (list of str): List of words to be processed. Returns: tuple: A tuple containing two dictionaries: - The first dictionary counts the occurrences of each word. - The second dictionary classifies words into \'short\', \'medium\', and \'long\' categories based on length. from collections import defaultdict word_count = defaultdict(int) classification = {\'short\': [], \'medium\': [], \'long\': []} for word in words: word_count[word] += 1 if 1 <= len(word) <= 4: classification[\'short\'].append(word) elif 5 <= len(word) <= 7: classification[\'medium\'].append(word) else: classification[\'long\'].append(word) return dict(word_count), classification"},{"question":"You are tasked with writing a Python function to solve the following problem: **Problem Statement:** A logistics company wants to determine the most optimal route for delivering packages. Each package delivery consists of visiting several cities in a specific order. Given a list of delivery routes where each route is represented as a list of cities, write a function `optimal_delivery_route(routes)` that returns the shortest route (in terms of the number of cities) that covers all the cities at least once. If there are multiple routes with the same length, return the route that appears first in the input list. **Function Signature:** ```python def optimal_delivery_route(routes: List[List[str]]) -> List[str]: ``` **Input:** - `routes` (List[List[str]]): A list of delivery routes, where each route is represented as a list of city names (strings). **Output:** - (List[str]): The shortest route that covers all cities at least once. If there are multiple such routes, return the one that appears first in the input list. **Constraints:** - Each route can have a different number of cities. - Each city is represented by a string (1 ≤ length of city name ≤ 100). - The total number of cities across all routes will not exceed 1000. - The number of routes will not exceed 100. **Example:** ```python # Example 1: routes = [[\\"A\\", \\"B\\", \\"C\\"], [\\"A\\", \\"D\\"], [\\"C\\", \\"B\\", \\"A\\"]] print(optimal_delivery_route(routes)) # Output: [\\"A\\", \\"B\\", \\"C\\"] # Example 2: routes = [[\\"A\\", \\"B\\"], [\\"B\\", \\"C\\", \\"D\\"], [\\"D\\", \\"E\\"], [\\"A\\", \\"D\\", \\"E\\"]] print(optimal_delivery_route(routes)) # Output: [\\"A\\", \\"B\\"] ```","solution":"def optimal_delivery_route(routes): Returns the shortest route that covers all cities at least once. If there are multiple routes with the same length, returns the one that appears first in the input list. Parameters: routes (List[List[str]]): A list of delivery routes, where each route is represented as a list of city names (strings). Returns: List[str]: The shortest route that covers all cities at least once. if not routes: return [] shortest_route = min(routes, key=len) return shortest_route"},{"question":"Your task is to create a function `draw_star_pattern(size, color)` using the `turtle` graphics library to draw a star with a given size and color. This function should utilize specific `turtle` functions: `turtle.pencolor`, `turtle.begin_fill`, `turtle.end_fill`, and `turtle.goto`. Ensure the function sets up the turtle environment, adjusts the turtle\'s properties like pen color, starting position, and size, and then uses the `turtle` library to draw a star-shaped pattern. Here is an outline of the tasks your function should perform: 1. Set up the turtle graphics environment with a window size of 600x600 pixels. 2. Move the turtle to a starting position. 3. Set the pen color to the specified color and begin filling the star with the same color. 4. Draw a star using the given size. 5. Ensure the drawing operation completes correctly by calling `turtle.done()` at the end of the function. Use the function name `draw_star_pattern(size, color)` for your implementation. Below is the skeleton of the function to help you start: ```python import turtle def draw_star_pattern(size, color): # Set up your turtle environment here # Move the turtle to the starting position # Set the pen color and begin filling # Draw the star pattern # Complete the drawing operation with filling and ending the fill # Call the function to ensure it works as expected draw_star_pattern(100, \\"red\\") ```","solution":"import turtle def draw_star_pattern(size, color): # Set up the turtle graphics environment screen = turtle.Screen() screen.setup(width=600, height=600) # Create turtle object star_turtle = turtle.Turtle() # Move the turtle to starting position star_turtle.penup() star_turtle.goto(0, -size / 2) star_turtle.pendown() # Set the pen color and begin filling star_turtle.pencolor(color) star_turtle.fillcolor(color) star_turtle.begin_fill() # Draw the star pattern for _ in range(5): star_turtle.forward(size) star_turtle.right(144) # Complete the drawing operation with filling and ending the fill star_turtle.end_fill() # Complete the drawing operation turtle.done() # Call the function to ensure it works as expected # Comment out the function call to avoid running turtle graphics during unit tests # draw_star_pattern(100, \\"red\\")"},{"question":"In this problem, we will be working with a dataset of house prices and various features describing the houses using a**`sklearn.linear_model.LinearRegression`** model. Your task is to create a function that preprocesses the data by handling missing values, encoding categorical variables, and scaling the features, and then applies a linear regression model to predict the house prices. **Function Name:** `predict_house_prices` **Parameters:** - `data_path`: The file path to the CSV file containing the house data. **Returns:** - A list of predicted house prices for the entire dataset. **Instructions:** 1. Load the dataset from the given CSV file path. 2. Handle any missing values by filling them with the median value of the respective column. 3. Encode categorical variables using one-hot encoding. 4. Standardize the numerical features to have a mean of 0 and a standard deviation of 1. 5. Split the data into features (X) and target (y), where the target is the \'price\' column. 6. Split the data into training and testing sets using an 80-20 split. 7. Train a `LinearRegression` model on the training data. 8. Use the trained model to predict house prices on the test data. 9. Return the predicted house prices. Below is the template for the function you need to implement: ```python def predict_house_prices(data_path): import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.preprocessing import StandardScaler, OneHotEncoder from sklearn.impute import SimpleImputer from sklearn.compose import ColumnTransformer from sklearn.pipeline import Pipeline # Load the dataset data = pd.read_csv(data_path) # Define numerical and categorical columns numerical_cols = data.select_dtypes(include=[\'int64\', \'float64\']).columns.drop(\'price\') categorical_cols = data.select_dtypes(include=[\'object\']).columns # Preprocessing for numerical data: impute and scale numerical_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'median\')), (\'scaler\', StandardScaler()) ]) # Preprocessing for categorical data: impute and encode categorical_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'constant\', fill_value=\'missing\')), (\'onehot\', OneHotEncoder(handle_unknown=\'ignore\')) ]) # Combine transformations preprocessor = ColumnTransformer( transformers=[ (\'num\', numerical_transformer, numerical_cols), (\'cat\', categorical_transformer, categorical_cols) ]) # Create a processing and modeling pipeline model = Pipeline(steps=[ (\'preprocessor\', preprocessor), (\'model\', LinearRegression()) ]) # Split the data into features (X) and target (y) X = data.drop(\'price\', axis=1) y = data[\'price\'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the model model.fit(X_train, y_train) # Predict the house prices predicted_prices = model.predict(X_test) return predicted_prices.tolist() ```","solution":"def predict_house_prices(data_path): import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.preprocessing import StandardScaler, OneHotEncoder from sklearn.impute import SimpleImputer from sklearn.compose import ColumnTransformer from sklearn.pipeline import Pipeline # Load the dataset data = pd.read_csv(data_path) # Define numerical and categorical columns numerical_cols = data.select_dtypes(include=[\'int64\', \'float64\']).columns.drop(\'price\') categorical_cols = data.select_dtypes(include=[\'object\']).columns # Preprocessing for numerical data: impute and scale numerical_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'median\')), (\'scaler\', StandardScaler()) ]) # Preprocessing for categorical data: impute and encode categorical_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'constant\', fill_value=\'missing\')), (\'onehot\', OneHotEncoder(handle_unknown=\'ignore\')) ]) # Combine transformations preprocessor = ColumnTransformer( transformers=[ (\'num\', numerical_transformer, numerical_cols), (\'cat\', categorical_transformer, categorical_cols) ] ) # Create a processing and modeling pipeline model = Pipeline(steps=[ (\'preprocessor\', preprocessor), (\'model\', LinearRegression()) ]) # Split the data into features (X) and target (y) X = data.drop(\'price\', axis=1) y = data[\'price\'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the model model.fit(X_train, y_train) # Predict the house prices predicted_prices = model.predict(X_test) return predicted_prices.tolist()"},{"question":"You are required to write a function `common_elements` that takes in two lists of integers and returns a new list that contains the intersection of the two lists, i.e., the elements that are common to both input lists without duplicates. The order of elements in the resultant list should be the same as their order of first appearance in the first input list. Specifically, you need to: 1. Traverse the first input list and collect elements that also exist in the second input list. 2. Ensure each element in the result is unique and follows the order of their first appearance in the first list. You must implement the function signature as follows: ```python def common_elements(list1: list, list2: list) -> list: pass ``` Arguments: - `list1`: A list of integers. - `list2`: A list of integers. Requirements: - The result list must maintain the order of elements as they appear in the first list. - Each element in the result list should be unique. Ensure your function handles edge cases where one or both input lists are empty or have no common elements.","solution":"def common_elements(list1: list, list2: list) -> list: Returns a list containing unique common elements from list1 and list2 in the order they appear in list1. set2 = set(list2) result = [] seen = set() for item in list1: if item in set2 and item not in seen: result.append(item) seen.add(item) return result"},{"question":"You are tasked with implementing a k-nearest neighbors (k-NN) classifier from scratch using NumPy. This classifier should be able to predict the label of a test point based on the majority label of its k nearest neighbors from the training data. **Function Requirements:** - Function Name: `knn_classifier` - Arguments: - `X_train` (numpy.ndarray): A 2D array of shape (num_train, num_features), representing the feature matrix of the training data. - `y_train` (numpy.ndarray): A 1D array of shape (num_train,), representing the true labels of the training data. - `X_test` (numpy.ndarray): A 2D array of shape (num_test, num_features), representing the feature matrix of the test data. - `k` (int): The number of nearest neighbors to consider for classification. - Returns: A 1D numpy array containing the predicted labels for the test data. **Context:** - The k-NN classifier is a type of instance-based learning, where the class of a test point is determined by the classes of its k nearest neighbors. - The distance metric used should be Euclidean distance. - You may use the `numpy.linalg.norm` function to compute Euclidean distances. **Example Usage:** ```python X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]]) y_train = np.array([0, 0, 1, 1]) X_test = np.array([[1.5, 2.5], [3.5, 4.5]]) predictions = knn_classifier(X_train, y_train, X_test, k=3) print(\\"Predictions: \\", predictions) ``` **Required Libraries:** - numpy **Example Implementation:** ```python import numpy as np def knn_classifier(X_train, y_train, X_test, k): num_test = X_test.shape[0] predictions = np.zeros(num_test) for i in range(num_test): distances = np.linalg.norm(X_train - X_test[i, :], axis=1) nearest_neighbors = np.argsort(distances)[:k] nearest_labels = y_train[nearest_neighbors] predictions[i] = np.argmax(np.bincount(nearest_labels)) return predictions ```","solution":"import numpy as np def knn_classifier(X_train, y_train, X_test, k): Predict the label for each test point in X_test based on the k nearest neighbors from the training data (X_train and y_train). Parameters: X_train (numpy.ndarray): Training data features of shape (num_train, num_features). y_train (numpy.ndarray): Training data labels of shape (num_train,). X_test (numpy.ndarray): Test data features of shape (num_test, num_features). k (int): Number of nearest neighbors to consider for voting. Returns: numpy.ndarray: Predicted labels for the test data. num_test = X_test.shape[0] predictions = np.zeros(num_test, dtype=int) for i in range(num_test): # Compute the Euclidean distances between X_test[i] and all points in X_train distances = np.linalg.norm(X_train - X_test[i, :], axis=1) # Find the indices of the k nearest neighbors nearest_neighbors = np.argsort(distances)[:k] # Get the labels of the k nearest neighbors nearest_labels = y_train[nearest_neighbors] # Predict the label based on the majority vote predictions[i] = np.argmax(np.bincount(nearest_labels)) return predictions"},{"question":"You are required to create a function `calculate_path_distance` that calculates the total distance covered in a path given a sequence of coordinates (x, y). Each coordinate represents a point on the 2D plane, and the function should sum the Euclidean distances between each consecutive pair of points. # Requirements 1. **Function Name:** `calculate_path_distance` 2. **Input Parameters:** - `coordinates`: A list or array of tuples, where each tuple contains two elements representing the x and y coordinates of a point. 3. **Function Behavior:** - Convert the input coordinates to a NumPy array using `numpy.asarray` if not already. - Calculate the Euclidean distance between each consecutive pair of points. - Sum these distances to get the total path distance. 4. **Output:** The function should return a single floating-point value representing the total distance. # Example ```python coordinates = [(0,0), (3,4), (6,8), (10,4)] distance = calculate_path_distance(coordinates) print(distance) # Output should be the sum of distances between consecutive points ``` In this example, the function should calculate the distance between each pair of consecutive points and return the total distance covered. # Hints - You can calculate the Euclidean distance between two points (x1, y1) and (x2, y2) using the formula: [ distance = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] - The NumPy function `numpy.linalg.norm` might be useful for calculating the Euclidean distance in a vectorized manner.","solution":"import numpy as np def calculate_path_distance(coordinates): Calculates the total distance covered in a path given a sequence of coordinates (x, y). Parameters: coordinates (list of tuples): A list where each tuple contains two elements representing the x and y coordinates of a point. Returns: float: The total distance of the path. if not coordinates or len(coordinates) < 2: return 0.0 # Convert coordinates to a numpy array coords_array = np.asarray(coordinates) # Calculate the differences between consecutive points diffs = np.diff(coords_array, axis=0) # Calculate the Euclidean distances using numpy.linalg.norm (vectorized operation) distances = np.linalg.norm(diffs, axis=1) # Sum the distances to get the total path distance total_distance = distances.sum() return total_distance"},{"question":"**Sum of Subarray Minimums** **Objective**: Write a Python function named `sum_of_subarray_minimums(arr)` that calculates the sum of the minimums of all subarrays of the given array `arr`. **Function Signature**: ```python def sum_of_subarray_minimums(arr): pass ``` **Input**: - `arr` (List[int]): An array of integers of length `n` (1 ≤ n ≤ 3 * 10^4). **Instructions**: 1. Consider all possible subarrays of the input array `arr`. 2. Compute the minimum value for each subarray. 3. Return the sum of these minimum values modulo (10^9 + 7) to prevent overflow. **Output**: The function should return an integer: the sum of the minimums of all subarrays of the input array, modulo (10^9 + 7). **Example**: ```python print(sum_of_subarray_minimums([3,1,2,4])) # Output: 17 ``` **Explanation**: - All subarrays of [3,1,2,4] are: [3], [3,1], [3,1,2], [3,1,2,4], [1], [1,2], [1,2,4], [2], [2,4], [4]. - Their respective minimums are: 3, 1, 1, 1, 1, 1, 1, 2, 2, 4. - The sum of these minimums is 3+1+1+1+1+1+1+2+2+4 = 17. --- # Notes: - A subarray is a contiguous part of an array. - Consider optimizing your approach to handle the upper constraint efficiently, as a naive O(n^2) or O(n^3) approach may not be feasible within the time limits.","solution":"def sum_of_subarray_minimums(arr): MOD = 10**9 + 7 n = len(arr) # Stack for the previous less element ple = [-1] * n # Stack for the next less element nle = [n] * n stack = [] # Finding previous less element for i in range(n): while stack and arr[stack[-1]] > arr[i]: stack.pop() if stack: ple[i] = stack[-1] stack.append(i) stack = [] # Finding next less element for i in range(n-1, -1, -1): while stack and arr[stack[-1]] >= arr[i]: stack.pop() if stack: nle[i] = stack[-1] stack.append(i) result = 0 for i in range(n): left = i - ple[i] right = nle[i] - i result = (result + arr[i] * left * right) % MOD return result"},{"question":"You are asked to implement a function that simulates the classic FizzBuzz problem with a twist. Instead of iterating over a simple range of numbers, the task is to iterate over a given list of integers and determine if each integer meets specific conditions. Depending on the conditions met, output a corresponding string or the integer itself. Write a function named `fizz_buzz_customized(numbers, fizz_num, buzz_num)` that takes in three inputs: - `numbers`: A list of integers. - `fizz_num`: An integer that defines the divisor for \\"Fizz\\". - `buzz_num`: An integer that defines the divisor for \\"Buzz\\". The function should iterate over the `numbers` list and apply the following rules: - If a number is divisible by both `fizz_num` and `buzz_num`, append \\"FizzBuzz\\" to the result list. - If a number is divisible by `fizz_num` only, append \\"Fizz\\" to the result list. - If a number is divisible by `buzz_num` only, append \\"Buzz\\" to the result list. - Otherwise, append the number itself. Finally, the function should return the result list. Here is a usage example: ```python def fizz_buzz_customized(numbers, fizz_num, buzz_num): result = [] for number in numbers: if number % fizz_num == 0 and number % buzz_num == 0: result.append(\\"FizzBuzz\\") elif number % fizz_num == 0: result.append(\\"Fizz\\") elif number % buzz_num == 0: result.append(\\"Buzz\\") else: result.append(number) return result # Example usage: numbers = [1, 2, 3, 4, 5, 15, 30] fizz_num = 3 buzz_num = 5 output = fizz_buzz_customized(numbers, fizz_num, buzz_num) print(output) # Expected output: [1, 2, \'Fizz\', 4, \'Buzz\', \'FizzBuzz\', \'FizzBuzz\'] ```","solution":"def fizz_buzz_customized(numbers, fizz_num, buzz_num): This function takes a list of numbers and two divisors (fizz_num and buzz_num). It returns a list where each element corresponds to: - \\"FizzBuzz\\" if the number is divisible by both fizz_num and buzz_num, - \\"Fizz\\" if the number is divisible by fizz_num, - \\"Buzz\\" if the number is divisible by buzz_num, - the number itself if none of these conditions are met. result = [] for number in numbers: if number % fizz_num == 0 and number % buzz_num == 0: result.append(\\"FizzBuzz\\") elif number % fizz_num == 0: result.append(\\"Fizz\\") elif number % buzz_num == 0: result.append(\\"Buzz\\") else: result.append(number) return result"},{"question":"You are required to implement a matrix multiplication function that multiplies two matrices. This task should cement your understanding of matrix operations and the use of the `numpy` library. Function Name: `matrix_multiplication` # Input - `matrix_a` (numpy.ndarray): A 2D array of shape (m, n) representing the first matrix, with m rows and n columns. - `matrix_b` (numpy.ndarray): A 2D array of shape (n, p) representing the second matrix, with n rows and p columns. # Output - `result` (numpy.ndarray): A 2D array of shape (m, p) representing the resultant matrix after multiplying `matrix_a` and `matrix_b`. # Task 1. Verify that the number of columns in `matrix_a` is equal to the number of rows in `matrix_b`. 2. Use `numpy.dot` to perform the matrix multiplication. 3. Return the resultant matrix. # Example ```python import numpy as np # Example data matrix_a = np.array([[1, 2], [3, 4]]) matrix_b = np.array([[5, 6], [7, 8]]) # Function call result = matrix_multiplication(matrix_a, matrix_b) print(result) ``` In this example, given the input `matrix_a` and `matrix_b`, the function will return the resultant matrix after performing matrix multiplication.","solution":"import numpy as np def matrix_multiplication(matrix_a, matrix_b): Multiplies two matrices using numpy.dot and returns the resultant matrix. Parameters: matrix_a (numpy.ndarray): A 2D array of shape (m, n). matrix_b (numpy.ndarray): A 2D array of shape (n, p). Returns: numpy.ndarray: A 2D array of shape (m, p) resulting from the matrix multiplication. if matrix_a.shape[1] != matrix_b.shape[0]: raise ValueError(\\"Number of columns in matrix_a must be equal to the number of rows in matrix_b\\") return np.dot(matrix_a, matrix_b)"},{"question":"Create a function that simulates a simple bank account system where users can deposit, withdraw, and check their balance. The system should maintain transaction history in a list, which includes the type of transaction (\\"deposit\\" or \\"withdraw\\"), the amount, and the resulting balance after each transaction. The function should update and return the current balance after each transaction. Implement the following functionalities: 1. deposit(amount): Adds the specified amount to the balance and records the transaction. 2. withdraw(amount): Subtracts the specified amount from the balance if sufficient funds are available, otherwise, return an error message. 3. check_balance(): Returns the current balance. 4. get_transaction_history(): Returns the list of all transactions. You should write self-contained code starting with: ``` class BankAccount: def __init__(self): ```","solution":"class BankAccount: def __init__(self): Initialize a new bank account with a balance of 0 and an empty transaction history. self.balance = 0 self.transaction_history = [] def deposit(self, amount): Deposit the specified amount into the account. if amount <= 0: return \\"Deposit amount should be positive.\\" self.balance += amount self.transaction_history.append({\'type\': \'deposit\', \'amount\': amount, \'balance\': self.balance}) return self.balance def withdraw(self, amount): Withdraw the specified amount from the account if sufficient funds are available. if amount <= 0: return \\"Withdrawal amount should be positive.\\" if amount > self.balance: return \\"Insufficient funds.\\" self.balance -= amount self.transaction_history.append({\'type\': \'withdraw\', \'amount\': amount, \'balance\': self.balance}) return self.balance def check_balance(self): Return the current balance. return self.balance def get_transaction_history(self): Return the list of all transactions. return self.transaction_history"},{"question":"Create a function that processes a list of integers and identifies the longest subsequence where the difference between consecutive elements is the same. Return the length of this subsequence and one example of such a subsequence. If the input list is empty, raise a ValueError with the message \\"Input list is empty\\". The function should raise the exception for: ValueError(\\"Input list is empty\\"): If the input list is empty. The function should output: length (int): The length of the longest subsequence with the same difference between consecutive elements. subsequence (list): A list representing one example of the longest subsequence found. You should write self-contained code starting with: ``` def task_func(nums): ```","solution":"def task_func(nums): if not nums: raise ValueError(\\"Input list is empty\\") max_length = 1 longest_subsequence = [nums[0]] current_subsequence = [nums[0]] for i in range(1, len(nums)): if len(current_subsequence) == 1: current_diff = nums[i] - nums[i - 1] current_subsequence.append(nums[i]) else: if nums[i] - nums[i - 1] == current_diff: current_subsequence.append(nums[i]) else: current_diff = nums[i] - nums[i - 1] if len(current_subsequence) > max_length: max_length = len(current_subsequence) longest_subsequence = current_subsequence[:] current_subsequence = [nums[i - 1], nums[i]] if len(current_subsequence) > max_length: max_length = len(current_subsequence) longest_subsequence = current_subsequence return max_length, longest_subsequence"},{"question":"You are asked to develop a function named `rotate_matrix` that rotates a given N x N 2D matrix 90 degrees clockwise. The function should modify the matrix in place without using any extra space for another matrix. The function should follow the steps described below: 1. Transpose the matrix by swapping elements at position (i, j) with those at position (j, i). 2. Reverse the order of elements in each row of the transposed matrix. Function Signature: ```python def rotate_matrix(matrix: List[List[int]]) -> None: ``` # Constraints: - The given matrix will always be a square matrix (same number of rows and columns). - The matrix will contain only integers. - The size of the matrix N will be between 1 and 1000. Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) print(matrix) ``` Output: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Explanation: After transposing the matrix: ``` [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] ``` Then reversing the order of elements in each row: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ```","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> None: Rotates the given NxN matrix 90 degrees clockwise in place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"**Problem Title:** Implementing a Custom Matrix Multiplication You are tasked with implementing a function that performs matrix multiplication. Matrix multiplication is a common operation in various fields such as computer graphics, machine learning, and scientific computing. The function you need to implement is `matrix_multiply(mat1: list, mat2: list) -> list`, which multiplies two matrices `mat1` and `mat2` and returns the resulting product matrix. The number of columns in `mat1` must be equal to the number of rows in `mat2`. **Function Signature:** ```python def matrix_multiply(mat1: list, mat2: list) -> list: pass ``` **Requirements:** - Do not use any external libraries such as `numpy`; implement the multiplication from scratch. - The resulting product matrix should be stored and returned as a list of lists. **Parameters:** - `mat1` (list): A 2D list representing the first matrix. - `mat2` (list): A 2D list representing the second matrix. **Returns:** - `list`: A 2D list representing the product of the two matrices. **Example:** ```python # Example Matrices mat1 = [ [1, 2], [3, 4] ] mat2 = [ [5, 6], [7, 8] ] # Function Call product = matrix_multiply(mat1, mat2) # Expected Output: Product matrix print(product) # Output: [[19, 22], [43, 50]] ``` Note: Ensure that the implementation checks for the valid dimensions before performing the multiplication and handles any potential errors appropriately.","solution":"def matrix_multiply(mat1: list, mat2: list) -> list: Multiplies two matrices and returns the product matrix. Parameters: mat1 (list): A 2D list representing the first matrix. mat2 (list): A 2D list representing the second matrix. Returns: list: A 2D list representing the product of the two matrices. # Number of rows and columns in the input matrices rows_mat1 = len(mat1) cols_mat1 = len(mat1[0]) rows_mat2 = len(mat2) cols_mat2 = len(mat2[0]) # Ensure the matrices can be multiplied if cols_mat1 != rows_mat2: raise ValueError(\\"Number of columns in mat1 must be equal to the number of rows in mat2\\") # Initialize the resulting product matrix with zeros product = [[0 for _ in range(cols_mat2)] for _ in range(rows_mat1)] # Perform matrix multiplication for i in range(rows_mat1): for j in range(cols_mat2): for k in range(cols_mat1): product[i][j] += mat1[i][k] * mat2[k][j] return product"},{"question":"# Context Your task is to manage the seating allocation in a theater. The theater has a fixed number of rows and seats per row. Each seat can either be occupied or empty. You need to write a function that can book a specified number of consecutive seats in a row, if they are available. # Problem Create a function `book_seats(theater, row, num_seats)` that tries to book the specified number of consecutive seats in the given row. The function should follow these steps: 1. Verify if there are `num_seats` consecutive empty (indicated by 0) seats available in the specified row. 2. If available, book these seats by marking them as 1 indicating they are occupied. 3. If booking is successful, return `True`. Otherwise, return `False`. # Function Signature ```python def book_seats(theater, row, num_seats): Tries to book num_seats consecutive seats in the given row. Parameters: theater (list of lists of int): The seating arrangement of the theater. 0 indicates an empty seat, 1 indicates an occupied seat. row (int): The row number (0-indexed) in which to book the seats. num_seats (int): The number of consecutive seats to book. Returns: bool: True if the booking was successful, otherwise False. # Your implementation here ``` # Example ```python theater = [ [0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0] ] # Book 3 consecutive seats in row 0 success = book_seats(theater, 0, 3) print(success) # Output: True print(theater) # Output: [[0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0]] # Book 2 consecutive seats in row 1 success = book_seats(theater, 1, 2) print(success) # Output: False print(theater) # Output: [[0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0]] ``` # Requirements - Ensure the row and num_seats parameters are within valid ranges. - Handle edge cases where the number of available seats is less than num_seats.","solution":"def book_seats(theater, row, num_seats): Tries to book num_seats consecutive seats in the given row. Parameters: theater (list of lists of int): The seating arrangement of the theater. 0 indicates an empty seat, 1 indicates an occupied seat. row (int): The row number (0-indexed) in which to book the seats. num_seats (int): The number of consecutive seats to book. Returns: bool: True if the booking was successful, otherwise False. # Check if the row number is valid if row < 0 or row >= len(theater): return False row_seats = theater[row] # Traverse the row to find consecutive empty seats for i in range(len(row_seats) - num_seats + 1): # Check if the segment is all empty (contains only 0s) if all(seat == 0 for seat in row_seats[i:i + num_seats]): # Mark these seats as booked (1) for j in range(i, i + num_seats): row_seats[j] = 1 return True # If we reach here, it means we couldn\'t find enough consecutive empty seats return False"},{"question":"You are required to develop a Python function named `find_common_students` that identifies students who are enrolled in both mathematics and science classes. The student data is stored in two separate text files, `math_students.txt` and `science_students.txt`. Each file contains a list of student names, with each name on a new line. Your function should read from both files, identify common names, and display the names of students enrolled in both classes. Here is the detailed explanation of the task: 1. **Function Definition:** - The function should be named `find_common_students`. 2. **Parameters:** - The function doesn\'t take any parameters. 3. **Functionality:** - The function should open and read both `math_students.txt` and `science_students.txt`. - It should store the names of students from each file in two separate sets. - The function should find the intersection of these two sets to determine the common students. - It should print the names of students who are enrolled in both mathematics and science classes. - Handle the following exceptions during file reading: - `FileNotFoundError`: Print an appropriate message indicating a missing file. - Any other exception: Print an error message and the exception detail. 4. **Expected Behavior:** - Read student names from both files. - Identify and print the names of students enrolled in both classes. - Handle and display error messages appropriately in case of exceptions.","solution":"def find_common_students(): try: with open(\'math_students.txt\', \'r\') as math_file: math_students = set(math_file.read().splitlines()) with open(\'science_students.txt\', \'r\') as science_file: science_students = set(science_file.read().splitlines()) common_students = math_students & science_students if not common_students: print(\\"No common students found.\\") else: print(\\"Students enrolled in both mathematics and science classes:\\") for student in common_students: print(student) except FileNotFoundError as e: print(f\\"Error: {e.strerror}. File {e.filename} not found.\\") except Exception as e: print(f\\"An unexpected error occurred: {e}\\")"},{"question":"You need to implement a function called `moving_average` that calculates and returns the moving averages of a given list of numbers over a specified window size. This task will help you practice manipulating lists and understanding the concept of moving averages. # Function Signature: ```python def moving_average(numbers, window_size): Calculates moving averages of the given list of numbers over a specified window size. Parameters: numbers : list A list of numerical values. window_size : int The window size over which to calculate the moving average. Returns: list A list of moving averages. Each element is the average of the numbers in the current window. If the length of the numbers is less than the window size, the returned list should be empty. ``` # Input: - `numbers`: a list of numerical values. - `window_size`: an integer representing the size of the window over which to compute the moving average. # Output: - A list of numerical values representing the moving averages. # Guidelines: 1. **Validate the Input**: If `window_size` is greater than the length of `numbers`, return an empty list. 2. **Calculate the Moving Averages**: Traverse through `numbers` and compute the average for each window of specified size. 3. **Store and Return the Result**: Store each calculated moving average in a list and return this list. Here is the prototype of the function you need to implement. Ensure you correctly handle edge cases and process the list efficiently. # Example: ```python numbers = [1, 2, 3, 4, 5] window_size = 3 print(moving_average(numbers, window_size)) # Output: [2.0, 3.0, 4.0] numbers = [10, 20, 30, 40] window_size = 5 print(moving_average(numbers, window_size)) # Output: [] ```","solution":"def moving_average(numbers, window_size): Calculates moving averages of the given list of numbers over a specified window size. Parameters: numbers : list A list of numerical values. window_size : int The window size over which to calculate the moving average. Returns: list A list of moving averages. Each element is the average of the numbers in the current window. If the length of the numbers is less than the window size, the returned list should be empty. if window_size > len(numbers): return [] moving_averages = [] for i in range(len(numbers) - window_size + 1): window = numbers[i:i + window_size] window_average = sum(window) / window_size moving_averages.append(window_average) return moving_averages"},{"question":"**Title**: Largest Contiguous Subarray Sum In this problem, you are required to write a function named `maxSubarraySum` that finds the sum of the largest contiguous subarray within a given list of integers. **Context**: Given a list of integers, a contiguous subarray is a subset of the list where elements are linear and sequential. The problem requires you to identify such a subarray with the maximum possible sum among all possible contiguous subarrays. **Task**: 1. Implement the function `maxSubarraySum(arr)` which: - Takes a list of integers `arr` as input. - Finds and returns the sum of the contiguous subarray with the maximum sum. **Requirements**: - Use Kadane\'s algorithm to achieve an optimal solution with O(n) time complexity. - Ensure the function handles both positive and negative integers in the input list. - Include condition to return 0 if the list is empty. **Function Signature**: ```python def maxSubarraySum(arr): # Your code here ``` **Example**: ```python print(maxSubarraySum([1, -2, 3, 4, -5, 8])) # It should output 10 print(maxSubarraySum([-1, -2, -3, -4])) # It should output -1 print(maxSubarraySum([5, 4, -1, 7, 8])) # It should output 23 ```","solution":"def maxSubarraySum(arr): Find the sum of the largest contiguous subarray using Kadane\'s algorithm. Returns 0 if the list is empty. if not arr: return 0 max_so_far = current_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) max_so_far = max(max_so_far, current_max) return max_so_far"},{"question":"You have been tasked with writing a function named `group_strings_by_length` that sorts and groups strings based on their lengths. This is a common task in text processing and data organization when dealing with strings of varying lengths. The function `group_strings_by_length` should take one input: - `strings`: A list of strings. Your task is to implement the `group_strings_by_length` function using Python\'s built-in libraries. The function will return a dictionary where the keys are the lengths of the strings, and the values are lists containing strings of that length, sorted lexicographically. **Function Signature:** ```python def group_strings_by_length(strings): # Your implementation here ``` **Example:** ```python # Given list of strings strings = [\\"banana\\", \\"apple\\", \\"kiwi\\", \\"cherry\\", \\"date\\", \\"fig\\", \\"grape\\"] # Group and sort strings by length print(group_strings_by_length(strings)) # Expected output: # { # 3: [\\"fig\\"], # 4: [\\"date\\", \\"kiwi\\"], # 5: [\\"apple\\", \\"grape\\"], # 6: [\\"banana\\", \\"cherry\\"] # } ``` **Notes:** - The strings should be grouped based on their length. - Within each length group, the strings should be sorted in lexicographic order.","solution":"def group_strings_by_length(strings): Groups and sorts strings based on their lengths. :param strings: List of strings :return: Dictionary where the keys are lengths and the values are lists of strings of that length. from collections import defaultdict grouped_strings = defaultdict(list) for string in strings: grouped_strings[len(string)].append(string) return {length: sorted(grouped_strings[length]) for length in grouped_strings}"},{"question":"You are given a `bank_transactions` dictionary where keys are account IDs (strings) and values are lists of tuples. Each tuple contains two elements - a transaction type (either `\'debit\'` or `\'credit\'`) and an integer representing the transaction amount. Your task is to write a function `calculate_net_balances(bank_transactions)` that processes these transactions and returns a dictionary. This dictionary maps each account ID to its net balance after all transactions have been applied. The function should perform the following steps: 1. Initialize a dictionary to store net balances for each account ID. 2. Iterate through each account ID and their corresponding list of transactions. 3. For each transaction, if the type is `\'credit\'`, add the amount to the net balance for that account. If the type is `\'debit\'`, subtract the amount from the net balance for that account. 4. Return the dictionary containing the net balances. You are required to correctly handle both `\'credit\'` and `\'debit\'` transactions to compute the final balance. Here is the function signature you need to implement: ```python def calculate_net_balances(bank_transactions): # Your code here ```","solution":"def calculate_net_balances(bank_transactions): Calculate the net balance for each account based on a given dictionary of bank transactions. :param bank_transactions: dict, where keys are account IDs and values are lists of tuples with transaction type (\'debit\' or \'credit\') and amount. :return: A dictionary where keys are account IDs and values are net balances. net_balances = {} for account_id, transactions in bank_transactions.items(): net_balance = 0 for transaction in transactions: trans_type, amount = transaction if trans_type == \'credit\': net_balance += amount elif trans_type == \'debit\': net_balance -= amount net_balances[account_id] = net_balance return net_balances"},{"question":"You are provided with code snippets to analyze the effectiveness of a k-means clustering algorithm on a given dataset. For this problem, you need to write a function `evaluate_kmeans` that performs the following tasks: 1. Initialize the k-means algorithm with a given number of clusters `k`. 2. Fit the k-means algorithm to the data `X`. 3. Predict the cluster labels for the data points in `X`. 4. Compute the inertia value to determine the within-cluster sum-of-squares. 5. Compute the silhouette score to measure the quality of clustering. 6. Estimate the partial derivative of the inertia with respect to perturbations in the data point (first feature of the first data point). 7. Plot the inertia values for a range of `k` values from 1 to `max_k`. Use the following functions from the libraries: - `sklearn.cluster.KMeans` - `sklearn.metrics.silhouette_score` - `matplotlib.pyplot.plot` - `matplotlib.pyplot.xlabel` - `matplotlib.pyplot.ylabel` - `matplotlib.pyplot.title` - `numpy.linspace` Implement the function `evaluate_kmeans` accordingly. The function should return a dictionary containing the inertia and silhouette scores for the given `k`, and display the plot of inertia values against `k`. ```python import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans from sklearn.metrics import silhouette_score def evaluate_kmeans(X, k, max_k): # 1. Initialize k-means kmeans = KMeans(n_clusters=k, random_state=42) # 2. Fit k-means to the data kmeans.fit(X) # 3. Predict cluster labels labels = kmeans.predict(X) # 4. Compute inertia inertia = kmeans.inertia_ # 5. Compute silhouette score if k > 1: silhouette = silhouette_score(X, labels) else: silhouette = -1 # Silhouette score is not defined for a single cluster # Print inertia and silhouette score print(\\"Inertia: {0}\\".format(inertia)) print(\\"Silhouette Score: {0}\\".format(silhouette)) # 6. Partial derivative estimator for inertia X_perturbed = X.copy() X_perturbed[0, 0] += 0.0001 kmeans_perturbed = KMeans(n_clusters=k, random_state=42).fit(X_perturbed) inertia_perturbed = kmeans_perturbed.inertia_ partial_derivative_inertia = (inertia_perturbed - inertia) / 0.0001 print(\\"Partial Derivative of Inertia w.r.t. first feature of the first data point: {0}\\".format(partial_derivative_inertia)) # 7. Plot inertia for range of k values inertia_values = [] k_values = range(1, max_k + 1) for i in k_values: kmeans_temp = KMeans(n_clusters=i, random_state=42).fit(X) inertia_values.append(kmeans_temp.inertia_) plt.plot(k_values, inertia_values, marker=\'o\') plt.xlabel(\'Number of clusters (k)\') plt.ylabel(\'Inertia\') plt.title(\'Inertia vs. Number of clusters\') plt.show() return {\\"inertia\\": inertia, \\"silhouette\\": silhouette} # Example usage # X = np.random.rand(100, 2) # Replace this with actual data # evaluate_kmeans(X, k=3, max_k=10) ```","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans from sklearn.metrics import silhouette_score def evaluate_kmeans(X, k, max_k): # 1. Initialize k-means kmeans = KMeans(n_clusters=k, random_state=42) # 2. Fit k-means to the data kmeans.fit(X) # 3. Predict cluster labels labels = kmeans.predict(X) # 4. Compute inertia inertia = kmeans.inertia_ # 5. Compute silhouette score if k > 1: silhouette = silhouette_score(X, labels) else: silhouette = -1 # Silhouette score is not defined for a single cluster # Partial derivative estimator for inertia X_perturbed = X.copy() X_perturbed[0, 0] += 0.0001 kmeans_perturbed = KMeans(n_clusters=k, random_state=42).fit(X_perturbed) inertia_perturbed = kmeans_perturbed.inertia_ partial_derivative_inertia = (inertia_perturbed - inertia) / 0.0001 # Plot inertia for range of k values inertia_values = [] k_values = range(1, max_k + 1) for i in k_values: kmeans_temp = KMeans(n_clusters=i, random_state=42).fit(X) inertia_values.append(kmeans_temp.inertia_) plt.plot(k_values, inertia_values, marker=\'o\') plt.xlabel(\'Number of clusters (k)\') plt.ylabel(\'Inertia\') plt.title(\'Inertia vs. Number of clusters\') plt.show() return {\\"inertia\\": inertia, \\"silhouette\\": silhouette, \\"partial_derivative_inertia\\": partial_derivative_inertia}"},{"question":"You are to create a function named `camel_to_snake_case` that converts a given CamelCase string into a snake_case string. The function should replace every uppercase letter with an underscore followed by the lowercase version of the letter. Here are the requirements: - You are required to use the `re` library for this task. - Specifically, you should use the `re.sub` method for pattern substitution. # Function Signature ```python def camel_to_snake_case(camelStr: str) -> str: pass ``` # Input - `camelStr`: A string in CamelCase format. Example: `CamelCaseString` # Output - Returns a string in snake_case format. Example: `camel_case_string` # Example ```python assert camel_to_snake_case(\\"CamelCaseString\\") == \\"camel_case_string\\" assert camel_to_snake_case(\\"ExampleStringWithMultipleWords\\") == \\"example_string_with_multiple_words\\" ``` Consider the following edge cases: - Strings with no uppercase letters, which should remain unchanged (e.g., `simple` stays `simple`). - Strings with consecutive uppercase letters (e.g., `HTTPResponseHandler` to `http_response_handler`). - Strings that start with an uppercase letter or multiple uppercase letters.","solution":"import re def camel_to_snake_case(camelStr: str) -> str: # Substitute uppercase letters preceded by some character or at the # start with \\"_letter\\", with letter being the corresponding lowercase. s1 = re.sub(\'(.)([A-Z][a-z]+)\', r\'1_2\', camelStr) # Handle when there are multiple consecutive capital letters. snake_str = re.sub(\'([a-z0-9])([A-Z])\', r\'1_2\', s1).lower() return snake_str"},{"question":"In this problem, you will demonstrate the use of Python\'s `collections.Counter` and its capabilities by creating a function that analyzes the frequency of elements in a list and returns the top `n` most common elements. The objective is to familiarize yourself with the `Counter` class and its methods. # Task: 1. Write a function `top_n_common_elements` that takes a list of elements and an integer `n` as input and returns the `n` most common elements from the list. 2. Use `collections.Counter` to count the occurrences of each element in the list. 3. Return the `n` most common elements as a list of tuples, each containing the element and its count. # Function Signature: - `top_n_common_elements(elements: List[Any], n: int) -> List[Tuple[Any, int]]` # Detailed Requirements: - **Function `top_n_common_elements`:** - This function should count the occurrences of each element in the input list using `collections.Counter`. - It should return a list of the `n` most common elements and their counts in descending order of frequency. - If `n` is greater than the number of unique elements in the list, return the list of all unique elements and their counts. # Example Usage: ```python from collections import Counter from typing import List, Tuple, Any def top_n_common_elements(elements: List[Any], n: int) -> List[Tuple[Any, int]]: # This function will be implemented by the user pass # Sample Function Call: sample_list = [\'apple\', \'banana\', \'apple\', \'orange\', \'banana\', \'banana\'] n = 2 print(top_n_common_elements(sample_list, n)) ``` Expected Output: ``` [(\'banana\', 3), (\'apple\', 2)] ``` **Note: Setting `n` to a value greater than the number of unique elements should still return all unique elements, such as:** ```python sample_list = [\'apple\', \'banana\', \'apple\', \'orange\'] n = 5 print(top_n_common_elements(sample_list, n)) ``` Expected Output: ``` [(\'apple\', 2), (\'banana\', 1), (\'orange\', 1)] ```","solution":"from collections import Counter from typing import List, Tuple, Any def top_n_common_elements(elements: List[Any], n: int) -> List[Tuple[Any, int]]: Returns the n most common elements from the list along with their counts. Parameters: elements (List[Any]): The list of elements to analyze. n (int): The number of top common elements to return. Returns: List[Tuple[Any, int]]: A list of tuples, each containing the element and its count. counter = Counter(elements) return counter.most_common(n)"},{"question":"Given a list of dictionaries, where each dictionary represents a product with \'product_id\', \'name\', and \'price\', write a function that calculates the total price of products for a given list of product IDs, and applies a discount if the total price exceeds a given threshold. The discount should be applied to the total price only, not to individual product prices. The function should output: - dict: A dictionary containing: - \'total_price\': The total price of the selected products after applying the discount. - \'original_total_price\': The total price of the selected products before applying the discount. - \'discount_applied\': A boolean indicating whether a discount was applied. You should write self-contained code starting with: ```python def calculate_total(products, product_ids, discount_threshold, discount_rate): Calculates the total price of selected products and applies a discount if applicable. Parameters: products (list of dict): A list of dictionaries, each containing \'product_id\', \'name\', and \'price\'. product_ids (list of str): A list of product IDs to be included in the calculation. discount_threshold (float): The total price threshold above which the discount will be applied. discount_rate (float): The rate of discount to be applied to the total price (e.g., 0.1 for 10%). Returns: dict: Containing \'total_price\', \'original_total_price\', and \'discount_applied\'. # Your implementation here ```","solution":"def calculate_total(products, product_ids, discount_threshold, discount_rate): Calculates the total price of selected products and applies a discount if applicable. Parameters: products (list of dict): A list of dictionaries, each containing \'product_id\', \'name\', and \'price\'. product_ids (list of str): A list of product IDs to be included in the calculation. discount_threshold (float): The total price threshold above which the discount will be applied. discount_rate (float): The rate of discount to be applied to the total price (e.g., 0.1 for 10%). Returns: dict: Containing \'total_price\', \'original_total_price\', and \'discount_applied\'. total_price = 0 for product in products: if product[\'product_id\'] in product_ids: total_price += product[\'price\'] original_total_price = total_price discount_applied = False if total_price > discount_threshold: total_price *= (1 - discount_rate) discount_applied = True return { \'total_price\': total_price, \'original_total_price\': original_total_price, \'discount_applied\': discount_applied, }"},{"question":"Write a Python function called `top_n_students` that receives two parameters: a list of dictionaries representing students with their respective scores, and an integer `n` indicating the number of top students to return. The function should return a list of the names of the top `n` students based on their scores. If two students have the same score, their order should be determined by their name in alphabetical order. The function should: 1. Take as input a list of dictionaries, where each dictionary contains two keys: `\'name\'` (a string representing the student\'s name) and `\'score\'` (an integer representing the student\'s score). 2. An integer `n` representing the number of top students to return. 3. Return a list of the names of the top `n` students sorted by their scores in descending order. In case of a tie, students with the same score should be sorted alphabetically by their names. Example input: ```python students = [ {\\"name\\": \\"Alice\\", \\"score\\": 91}, {\\"name\\": \\"Bob\\", \\"score\\": 85}, {\\"name\\": \\"Charlie\\", \\"score\\": 91}, {\\"name\\": \\"David\\", \\"score\\": 78} ] n = 2 ``` Expected output: ```python [\\"Alice\\", \\"Charlie\\"] ``` Explanation: Alice and Charlie have the highest scores (91), and they are sorted alphabetically. # Requirements: - Define the function `top_n_students(students: list, n: int) -> list`. - Utilize Python\'s sorting capabilities to achieve the desired order. - Handle edge cases such as `n` being greater than the number of students. # Constraints: - The input list is non-empty and contains valid dictionaries with correct data types for `\'name\'` and `\'score\'`. - The integer `n` will always be a positive integer not greater than the length of the list.","solution":"def top_n_students(students, n): Returns a list of the names of the top n students sorted by their scores in descending order. In case of a tie, students with the same score are sorted alphabetically by their names. # Sort the students first by score in descending order, then by name in ascending order sorted_students = sorted(students, key=lambda x: (-x[\'score\'], x[\'name\'])) # Extract the top n students\' names top_n = [student[\'name\'] for student in sorted_students[:n]] return top_n"},{"question":"You are tasked with creating a function that finds the first missing positive integer in an unsorted list of integers. Your solution should work in O(n) time using constant space. **Function Signature:** ```python def first_missing_positive(nums: List[int]) -> int: ``` **Parameters:** - `nums`: A list of integers, which can include both positive and negative numbers. **Description:** - Implement an algorithm to find the smallest positive integer that is missing from the list. - Your solution should operate in linear time, O(n), and use a constant amount of extra space, O(1). **Example:** ```python # Example 1: first_missing_positive([3, 4, -1, 1]) -> 2 # Example 2: first_missing_positive([1, 2, 0]) -> 3 ``` **Explanation:** 1. In Example 1, 1 and 3 exist in the list, but 2 is missing, hence the function returns 2. 2. In Example 2, the sequence of positive integers starts from 1, 2 is present, but 3 is missing, so the function returns 3. # Hint: You might want to use the array indices themselves to reorder the elements and track the presence of numbers.","solution":"from typing import List def first_missing_positive(nums: List[int]) -> int: n = len(nums) # Step 1: Clean up the array for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Step 2: Mark the presence of numbers for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Step 3: Identify the first missing positive integer for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"You are required to create a function named `generate_bar_chart` that takes a dictionary containing categorical labels as keys and their corresponding numerical values as input, and generates a bar chart to visualize the data. The dictionary will always contain string keys associated with integer or float values. Your function should follow these steps: 1. Extract the keys and values from the dictionary. 2. Use the `matplotlib.pyplot.bar` function from the Matplotlib library to create a bar chart where labels are used as the x-axis categories and the values are represented as bar heights. 3. Use `matplotlib.pyplot.show` function from the Matplotlib library to display the plot. Here is an example of the input dictionary: ```python data = { \'Apple\': 10, \'Banana\': 15, \'Cherry\': 7, \'Date\': 3, \'Elderberry\': 12 } ``` Your function must handle this format of input and generate a bar chart accordingly. **Function Signature:** ```python def generate_bar_chart(data: dict) -> None: pass ``` **Example:** ```python data = { \'Apple\': 10, \'Banana\': 15, \'Cherry\': 7, \'Date\': 3, \'Elderberry\': 12 } generate_bar_chart(data) ``` **Expected Behavior:** The function call should create and display a bar chart with the provided labels as x-axis categories and their corresponding values as the bar heights.","solution":"import matplotlib.pyplot as plt def generate_bar_chart(data: dict) -> None: Generates and displays a bar chart based on the given data dictionary. Parameters: data (dict): A dictionary with string keys (categories) and numerical values. Returns: None categories = list(data.keys()) values = list(data.values()) plt.bar(categories, values) plt.xlabel(\'Category\') plt.ylabel(\'Value\') plt.title(\'Bar Chart\') plt.show()"},{"question":"You are tasked with designing a function `generateRandomSubsets`. This function should generate all possible non-empty subsets of a given input set of integers. Additionally, the function should be able to randomize the order of these subsets before returning them. Your function should: - Accept a parameter `input_set` which is a list of unique integers. - Use an appropriate method to generate all non-empty subsets of the input set. - Randomize the order of these subsets using the `random` library. - Return the list of randomized subsets. Ensure that you validate the input to confirm it is a list of integers. Comment your code to explain each step, particularly how subsets are generated and how they are shuffled. Here is an example of how the function might be called and expected output: ```python input_set = [1, 2, 3] subsets = generateRandomSubsets(input_set) print(subsets) # Possible output (subsets order will vary due to randomness): # [[1, 2], [1], [2, 3], [1, 3], [2], [1, 2, 3], [3]] ```","solution":"import itertools import random def generateRandomSubsets(input_set): Generates all possible non-empty subsets of a given input set of integers and returns them in random order. Parameters: input_set (list): A list of unique integers. Returns: list: A list of non-empty subsets in random order. # Validate input if not all(isinstance(x, int) for x in input_set): raise ValueError(\\"input_set must be a list of integers\\") subsets = [] # Generate all possible non-empty subsets for r in range(1, len(input_set) + 1): subsets.extend(itertools.combinations(input_set, r)) # Convert tuples to lists subsets = [list(subset) for subset in subsets] # Randomize the order of the subsets random.shuffle(subsets) return subsets"},{"question":"You are asked to implement a function that trims leading and trailing whitespace characters from each string in an array of strings. The function should return an array of the trimmed strings in the same order. # Specific Requirements 1. The function should be named `trim_whitespace`. 2. The function should take a single argument, `strings`, which is a NumPy array of shape `(num_strings,)` and dtype `str_`. This array contains `num_strings` strings that may have leading and trailing whitespace. 3. Each string in the array should be trimmed of leading and trailing whitespace. 4. If the input is not a one-dimensional NumPy array of strings, your function should raise a `TypeError`. 5. You must use the NumPy library functions `numpy.char.strip` and `numpy.ndim` to accomplish this task. # Example ```python import numpy as np strings = np.array([\\" hello \\", \\"world \\", \\" Python \\", \\" numpy \\"], dtype=np.str_) result = trim_whitespace(strings) ``` This should return: ```python array([\\"hello\\", \\"world\\", \\"Python\\", \\"numpy\\"], dtype=\'<U6\') ``` # Libraries You are required to use the following NumPy functions: - `numpy.char.strip`: To strip whitespace characters from each string. - `numpy.ndim`: To verify the dimensionality of the input array. # Constraints - Do not use any libraries other than NumPy. - Ensure your function adheres to the specified requirements and raises an appropriate error for invalid inputs. Implement the function `trim_whitespace(strings)` following the guidelines above.","solution":"import numpy as np def trim_whitespace(strings): Trims leading and trailing whitespace characters from each string in an array of strings. Parameters: strings (numpy.ndarray): A one-dimensional NumPy array of shape (num_strings,) and dtype str_. Returns: numpy.ndarray: A NumPy array of the trimmed strings in the same order. Raises: TypeError: If the input is not a one-dimensional NumPy array of strings. if not isinstance(strings, np.ndarray) or strings.dtype.type != np.str_ or np.ndim(strings) != 1: raise TypeError(\\"Input must be a one-dimensional NumPy array of strings.\\") return np.char.strip(strings)"},{"question":"Create a function `assign_grades` that processes student exam scores and assigns letter grades based on the score distribution. The function will take a `pandas.DataFrame` as input and return a new DataFrame with an additional column labeled `grade`. The input DataFrame contains the following columns: - `student_id`: An integer representing the unique ID of the student. - `score`: A floating-point number representing the student\'s exam score (out of 100). The function should perform the following steps: 1. Compute the mean and standard deviation of the scores. 2. Assign grades based on the score distribution: - \'A\' for scores greater than or equal to the mean plus one standard deviation. - \'B\' for scores between the mean and the mean plus one standard deviation. - \'C\' for scores between the mean minus one standard deviation and the mean. - \'D\' for scores less than the mean minus one standard deviation. 3. Return the new DataFrame with the added `grade` column. Here is the function signature: ```python import pandas as pd def assign_grades(df): Parameters: df: pd.DataFrame A DataFrame containing \'student_id\' and \'score\' columns. Returns: A new pd.DataFrame with an additional \'grade\' column. pass ```","solution":"import pandas as pd def assign_grades(df): Parameters: df: pd.DataFrame A DataFrame containing \'student_id\' and \'score\' columns. Returns: A new pd.DataFrame with an additional \'grade\' column. mean_score = df[\'score\'].mean() std_dev_score = df[\'score\'].std() def determine_grade(score): if score >= mean_score + std_dev_score: return \'A\' elif score >= mean_score: return \'B\' elif score >= mean_score - std_dev_score: return \'C\' else: return \'D\' df[\'grade\'] = df[\'score\'].apply(determine_grade) return df"},{"question":"# Background: Pandas is a widely-used library in Python for data manipulation and analysis. It offers powerful data structures for handling various types of data and provides numerous functions for data processing. This problem aims to help learners become familiar with some basic Pandas operations like creating a DataFrame, filtering data, and summing columns. # Task: You are required to write a function named `process_data`. This function will: 1. Create a Pandas DataFrame from a dictionary of lists. 2. Filter the DataFrame to include only the rows where the value in the \\"Score\\" column is greater than a given threshold. 3. Calculate and return the sum of the \\"Score\\" column for the filtered rows. # Function Signature: ```python def process_data(data: dict, threshold: float) -> float: ``` # Requirements: - Use Pandas\' `pd.DataFrame` for creating the DataFrame. - Use `pd.DataFrame.loc` or `pd.DataFrame.query` for filtering the rows. - Use `pd.DataFrame.sum` to calculate the sum of the \\"Score\\" column after filtering. - The input dictionary will have keys \\"Name\\" and \\"Score\\", each mapping to a list of names and scores respectively. # Example: If `process_data(data, threshold)` is called with: ```python data = { \\"Name\\": [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\"], \\"Score\\": [85, 92, 78, 90] } threshold = 80 ``` it should return: ``` 267 ``` # Libraries: Ensure your solution makes use of the following Pandas APIs: - `pd.DataFrame` - `pd.DataFrame.loc` - `pd.DataFrame.sum` # Note: You may assume that the input dictionary will always contain the keys \\"Name\\" and \\"Score\\", and the values will be lists of the same length.","solution":"import pandas as pd def process_data(data: dict, threshold: float) -> float: Create a DataFrame, filter by a threshold in the \'Score\' column, and return the sum of the \'Score\' column for the filtered rows. # Create a DataFrame from the input dictionary df = pd.DataFrame(data) # Filter the DataFrame to include rows where the \'Score\' is greater than the given threshold filtered_df = df.loc[df[\'Score\'] > threshold] # Calculate and return the sum of the \'Score\' column for the filtered rows score_sum = filtered_df[\'Score\'].sum() return score_sum"},{"question":"You are designing a mini-weather forecasting simulation tool. The function simulates the reading of temperature and humidity levels at various times of the day using a simple model. Your task is to implement a function named `weather_simulation` that will generate and return the temperature and humidity values for a specified hour. Use mathematical functions to produce realistic variations throughout the day. **Function Signature:** ```python def weather_simulation(hour): Parameters: hour : An integer representing the hour of the day (0 to 23). Returns: A tuple containing: - Temperature (float) based on a sinusoidal function to simulate daily temperature changes. - Humidity (float) based on a sinusoidal function to simulate daily humidity changes. ``` **Requirements:** 1. Import and use the math library functions `math.radians`, `math.sin`, and `math.cos` for the necessary calculations. 2. Assume the temperature follows a daily cycle pattern, peaking at 2 PM (14:00) and dropping to the lowest around 2 AM (2:00). 3. Assume the humidity follows an opposite pattern, peaking early in the morning around 6 AM (6:00) and lowering in the late afternoon around 5 PM (17:00). 4. Compute the temperature using the formula: - ( text{temperature} = 15 + 10 cdot sinleft(frac{(hour - 14) cdot 15}{180}piright) ) 5. Compute the humidity using the formula: - ( text{humidity} = 70 + 20 cdot cosleft(frac{(hour - 6) cdot 15}{180}piright) ) **Example:** Calling `weather_simulation(14)` should return approximately: ```python (25.0, 50.0) # example approximation: temperature peaks at 14:00, humidity lowers in the afternoon ```","solution":"import math def weather_simulation(hour): Simulates the temperature and humidity for a given hour of the day. Parameters: hour : An integer representing the hour of the day (0 to 23). Returns: A tuple containing: - Temperature (float) based on a sinusoidal function to simulate daily temperature changes. - Humidity (float) based on a sinusoidal function to simulate daily humidity changes. temperature = 15 + 10 * math.sin(math.radians((hour - 14) * 15)) humidity = 70 + 20 * math.cos(math.radians((hour - 6) * 15)) return round(temperature, 2), round(humidity, 2)"},{"question":"You are tasked with writing a function to analyze two JSON files: `employee_data.json` and `performance_data.json`. The `employee_data.json` contains data about various employees\' details, while `performance_data.json` contains data about employees\' performance scores over specific intervals. Your goal is to create a new JSON file named `employee_performance_report.json` that contains the fields: `EmployeeID`, `EmployeeName`, and `AveragePerformanceScore`. # Input: 1. `employee_data.json` with the following structure: ```json [ { \\"EmployeeID\\": \\"E001\\", \\"EmployeeName\\": \\"John Doe\\", \\"Department\\": \\"Engineering\\" }, { \\"EmployeeID\\": \\"E002\\", \\"EmployeeName\\": \\"Jane Smith\\", \\"Department\\": \\"HR\\" } ] ``` 2. `performance_data.json` with the following structure: ```json [ { \\"EmployeeID\\": \\"E001\\", \\"Scores\\": [80, 85, 90] }, { \\"EmployeeID\\": \\"E002\\", \\"Scores\\": [78, 82, 85] } ] ``` # Task: Write a function `generate_employee_performance_report(employee_file, performance_file, output_file)` to: 1. Read data from `employee_data.json` and store employee IDs and their corresponding names. 2. Read data from `performance_data.json` to calculate the average performance score for each employee. 3. If an employee has no performance scores, their average score should be recorded as 0. 4. Combine these datasets based on the employee IDs. 5. Write the resulting combined data into a new JSON file `employee_performance_report.json`. # Requirements: - Handle averages correctly by considering only the scores available and calculate the mean. - Use the `json` Python library for reading and writing the JSON files. - Ensure your output JSON structure is consistent with the input styles. # Example: Given `employee_data.json`: ```json [ { \\"EmployeeID\\": \\"E001\\", \\"EmployeeName\\": \\"John Doe\\", \\"Department\\": \\"Engineering\\" }, { \\"EmployeeID\\": \\"E002\\", \\"EmployeeName\\": \\"Jane Smith\\", \\"Department\\": \\"HR\\" } ] ``` Given `performance_data.json`: ```json [ { \\"EmployeeID\\": \\"E001\\", \\"Scores\\": [80, 85, 90] }, { \\"EmployeeID\\": \\"E002\\", \\"Scores\\": [78, 82, 85] } ] ``` Output `employee_performance_report.json` should be: ```json [ { \\"EmployeeID\\": \\"E001\\", \\"EmployeeName\\": \\"John Doe\\", \\"AveragePerformanceScore\\": 85.0 }, { \\"EmployeeID\\": \\"E002\\", \\"EmployeeName\\": \\"Jane Smith\\", \\"AveragePerformanceScore\\": 81.66666666666667 } ] ```","solution":"import json def generate_employee_performance_report(employee_file, performance_file, output_file): with open(employee_file, \'r\') as ef: employees = json.load(ef) with open(performance_file, \'r\') as pf: performance_data = json.load(pf) perf_dict = {entry[\'EmployeeID\']: entry[\'Scores\'] for entry in performance_data} report = [] for employee in employees: emp_id = employee[\'EmployeeID\'] emp_name = employee[\'EmployeeName\'] scores = perf_dict.get(emp_id, []) avg_score = sum(scores) / len(scores) if scores else 0 report.append({ \\"EmployeeID\\": emp_id, \\"EmployeeName\\": emp_name, \\"AveragePerformanceScore\\": avg_score }) with open(output_file, \'w\') as of: json.dump(report, of, indent=4)"},{"question":"**Magic Square Verification** A \\"magic square\\" is a `n x n` square matrix in which the sum of every row, every column, and both main diagonals is the same. Create a function `is_magic_square(matrix: List[List[int]]) -> bool` that determines if a given `n x n` matrix is a magic square. **Function Signature:** ```python def is_magic_square(matrix: List[List[int]]) -> bool ``` **Parameters:** - `matrix` (List[List[int]]): A 2D list representing the `n x n` matrix to be checked. **Returns:** - `bool`: Returns `True` if the matrix is a magic square, otherwise `False`. **Constraints:** - The matrix will always be a square (i.e., `n x n` where 1 ≤ n ≤ 10). - The integers in `matrix` will be between -10^4 and 10^4. **Example Usage:** ```python >>> is_magic_square([ ... [8, 1, 6], ... [3, 5, 7], ... [4, 9, 2] ... ]) True >>> is_magic_square([ ... [2, 7, 6], ... [9, 5, 1], ... [4, 3, 8] ... ]) True >>> is_magic_square([ ... [2, 7, 6], ... [9, 5, 1], ... [4, 3, 9] ... ]) False ``` **Explanation:** - In the first example, the sum of each row, each column, and both main diagonals is 15. - In the second example, the sum of each row, each column, and both main diagonals is also 15. - In the third example, the matrix doesn\'t meet the criteria of a magic square as the sums of the different lines are not equal. **Notes:** - Consider implementing helper functions to calculate the sums of rows, columns, and diagonals to aid in the verification.","solution":"from typing import List def is_magic_square(matrix: List[List[int]]) -> bool: n = len(matrix) if n == 0: # Empty matrix edge case, by definition it\'s not a magic square return False expected_sum = sum(matrix[0]) # Check sum of all rows for row in matrix: if sum(row) != expected_sum: return False # Check sum of all columns for col in range(n): if sum(matrix[row][col] for row in range(n)) != expected_sum: return False # Check sum of the main diagonal if sum(matrix[i][i] for i in range(n)) != expected_sum: return False # Check sum of the secondary diagonal if sum(matrix[i][n - 1 - i] for i in range(n)) != expected_sum: return False # If all checks passed, it\'s a magic square return True"},{"question":"Design and implement a function named `calculate_sales_commission` which processes a given sales dataset and computes the total commission for each salesperson. Specific steps and constraints are outlined below: 1. **Function Definition**: Define a function called `calculate_sales_commission(sales_data)`. 2. **Arguments**: - `sales_data`: A list of dictionaries representing sales transactions. Each dictionary has the following keys: - `salesperson` (string): The name of the salesperson. - `amount` (float): The sale amount. - `commission_rate` (float): The commission rate as a percentage (e.g., 5 for 5%). 3. **Function Logic**: - Initialize an empty dictionary to hold the total commissions for each salesperson. - Iterate over each transaction in `sales_data`. - For each transaction, calculate the commission for the sale amount and add it to the corresponding salesperson\'s total in the dictionary. - If a salesperson has no prior entries, initialize their total in the dictionary. 4. **Return Value**: Return a dictionary with the total commission for each salesperson. **Example Usage**: ```python sales = [ {\\"salesperson\\": \\"Alice\\", \\"amount\\": 200.0, \\"commission_rate\\": 5.0}, {\\"salesperson\\": \\"Bob\\", \\"amount\\": 150.0, \\"commission_rate\\": 10.0}, {\\"salesperson\\": \\"Alice\\", \\"amount\\": 300.0, \\"commission_rate\\": 5.0}, ] commissions = calculate_sales_commission(sales) print(commissions) ``` For the given example: - \\"Alice\\" has two sales with commissions 10 (5% of 200) and 15 (5% of 300), totaling 25. - \\"Bob\\" has one sale with a commission of 15 (10% of 150). - The resulting dictionary should be `{\\"Alice\\": 25.0, \\"Bob\\": 15.0}`.","solution":"def calculate_sales_commission(sales_data): Calculate the total commission for each salesperson. :param sales_data: List of dictionaries containing sales transactions. Each dictionary has the keys: - \'salesperson\': name of the salesperson (str) - \'amount\': sale amount (float) - \'commission_rate\': commission rate as a percentage (float) :return: Dictionary with salespersons\' names as keys and their total commissions as values (float). commissions = {} for transaction in sales_data: salesperson = transaction[\'salesperson\'] amount = transaction[\'amount\'] commission_rate = transaction[\'commission_rate\'] commission = amount * (commission_rate / 100) if salesperson in commissions: commissions[salesperson] += commission else: commissions[salesperson] = commission return commissions"},{"question":"You are required to write a Python function named `calculate_order_total`. This function aims to compute the total amount of an order based on a list of item prices and a discount that should be applied to the total. The input to the function will be as follows: - A list of item prices, where each price is a float representing the cost of an individual item. - A discount, which is a float representing a percentage discount (0 to 100) to be applied to the total amount. This discount should be applied after summing all the item prices. # Requirements - The function should sum all individual item prices to get the total amount before discount. - The discount should be applied to the total amount to get the final total. - If the discount is 0, the final total should be equal to the sum of item prices. - The function should return the computed final total rounded to 2 decimal places. # Function Signature ```python def calculate_order_total(item_prices: list, discount: float) -> float: pass ``` # Example Given the following call: ```python item_prices = [10.99, 5.49, 7.25] discount = 10.0 calculate_order_total(item_prices, discount) ``` The function should calculate the sum of the item prices as `10.99 + 5.49 + 7.25 = 23.73`. With a discount of 10%, the total should be `23.73 * (1 - 10/100)`, which equals `21.36`. The function should return `21.36`. Given another call with no discount: ```python item_prices = [15.00, 20.00, 30.00] discount = 0.0 calculate_order_total(item_prices, discount) ``` The function should return the sum of item prices as `15.00 + 20.00 + 30.00 = 65.00`. Since the discount is 0, the final total remains `65.00`. The function should return `65.00`.","solution":"def calculate_order_total(item_prices: list, discount: float) -> float: Calculates the total order amount after applying the given discount. Parameters: item_prices (list of floats): List of item prices discount (float): Discount percentage to be applied (0 to 100) Returns: float: Final total amount after applying the discount, rounded to 2 decimal places total_before_discount = sum(item_prices) discount_multiplier = (100 - discount) / 100 total_after_discount = total_before_discount * discount_multiplier return round(total_after_discount, 2)"},{"question":"You are tasked with writing a function named `optimize_meal_plan` that helps in selecting a combination of food items to reach a target caloric intake. To accomplish this, you will use dynamic programming to solve the subset-sum problem. Your function should perform the following steps: 1. Accept a list of food items where each food item is represented by a tuple (name, calories). 2. Accept a target total number of calories. 3. Use dynamic programming to find a subset of food items such that their total caloric value is as close as possible to the target calories without exceeding it. 4. Return the list of selected food items. Ensure that your function signature is as follows: ```python def optimize_meal_plan(food_items: List[Tuple[str, int]], target_calories: int) -> List[str]: ``` Parameters: - `food_items` (List[Tuple[str, int]]): A list of tuples where each tuple contains a string (name of the food item) and an integer (calories of the food item). - `target_calories` (int): The desired total caloric intake. Returns: - `List[str]`: A list of names of the selected food items. You may assume: - There can be up to 100 food items. - Food item calorie values are positive integers. - The target caloric intake is a positive integer. Here is an example: ```python food_items = [(\\"apple\\", 95), (\\"banana\\", 105), (\\"chocolate\\", 250), (\\"sandwich\\", 300)] target_calories = 400 result = optimize_meal_plan(food_items, target_calories) print(result) # Output might be: [\'apple\', \'banana\', \'chocolate\'] ``` Feel free to use the `typing` module for type annotations.","solution":"from typing import List, Tuple def optimize_meal_plan(food_items: List[Tuple[str, int]], target_calories: int) -> List[str]: n = len(food_items) dp = [0] * (target_calories + 1) item_tracker = [[] for _ in range(target_calories + 1)] for name, calories in food_items: for i in range(target_calories, calories - 1, -1): if dp[i - calories] + calories > dp[i]: dp[i] = dp[i - calories] + calories item_tracker[i] = item_tracker[i - calories] + [name] return item_tracker[target_calories]"},{"question":"You are hired to develop a Python function that processes a list of records, with each record representing a product and its associated details. Specifically, you will create a function that extracts the names of products which have a stock quantity above a specified threshold. Your task is to complete the function `get_products_above_threshold(records, threshold)` which takes two parameters: - `records`: a list of dictionaries, where each dictionary represents a product with the following keys: - `name`: a string representing the product\'s name. - `quantity`: an integer representing the stock quantity of the product. - `price`: a float representing the price of the product. - `threshold`: an integer representing the stock quantity threshold. **Functionality Requirements**: 1. Iterate through the provided `records` list and check each product\'s `quantity` against the `threshold`. 2. Collect the `name` of each product that has a `quantity` greater than the `threshold`. 3. Return a list of names of the products which have a quantity greater than the `threshold`. # Example Usage: ```python records = [ {\\"name\\": \\"ProductA\\", \\"quantity\\": 10, \\"price\\": 99.99}, {\\"name\\": \\"ProductB\\", \\"quantity\\": 5, \\"price\\": 199.99}, {\\"name\\": \\"ProductC\\", \\"quantity\\": 20, \\"price\\": 49.99} ] threshold = 8 product_names = get_products_above_threshold(records, threshold) print(product_names) # Output: [\\"ProductA\\", \\"ProductC\\"] ``` # Constraints: - Assume that the `records` list contains at least one product. - The `quantity` values are non-negative integers. Please ensure your function is named `get_products_above_threshold` and fulfills the specified requirements.","solution":"def get_products_above_threshold(records, threshold): Returns a list of the names of products which have a quantity above the given threshold. Args: records (list of dict): List of product records where each record is a dictionary with keys \'name\', \'quantity\', and \'price\'. threshold (int): The stock quantity threshold to compare against. Returns: list of str: List of product names with a quantity greater than the threshold. result = [record[\\"name\\"] for record in records if record[\\"quantity\\"] > threshold] return result"},{"question":"Create a function that takes a string representing an arithmetic expression and evaluates the result. The arithmetic expression may contain integers, parentheses, and the operators \'+\', \'-\', \'*\', and \'/\' (integer division). The expression is guaranteed to be valid. The function should use the shunting yard algorithm to handle operator precedence and associativity, and the evaluation should be done using a stack-based approach. The function should return: * int: The evaluated result of the arithmetic expression. You should write self-contained code starting with: ``` def evaluate_expression(expression): ```","solution":"def evaluate_expression(expression): def shunting_yard(expression): Convert infix expression to postfix (Reverse Polish Notation) precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] operators = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 output.append(num) i -= 1 elif expression[i] in precedence: while (operators and operators[-1] in precedence and precedence[operators[-1]] >= precedence[expression[i]]): output.append(operators.pop()) operators.append(expression[i]) elif expression[i] == \'(\': operators.append(expression[i]) elif expression[i] == \')\': while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() i += 1 while operators: output.append(operators.pop()) return output def evaluate_postfix(postfix): Evaluate expression in postfix notation stack = [] for token in postfix: if isinstance(token, int): stack.append(token) else: b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(a // b) return stack[0] postfix = shunting_yard(expression) return evaluate_postfix(postfix)"},{"question":"You are asked to implement a function to analyze temperature readings from multiple sensors over a period of time. The goal is to identify sensors that are consistently within a specified temperature range. Your function should read a 2D NumPy array, where each column represents temperature readings from one sensor taken at different time intervals. A sensor is considered \\"consistent\\" if all its temperature readings fall within the given minimum and maximum temperature range. Your task is to write a function named `consistent_sensors` with the following signature: ```python def consistent_sensors(data, temp_min, temp_max): pass ``` # Parameters - `data` (numpy.ndarray): A 2D NumPy array of shape `(time_intervals, num_sensors)`, where each element represents the temperature reading from a sensor at a specific time. - `temp_min` (float): The minimum acceptable temperature value. - `temp_max` (float): The maximum acceptable temperature value. # Returns - `numpy.ndarray`: A 1D NumPy array of indices indicating which sensors are consistent (i.e., all temperature readings for that sensor are within the specified range). # Detailed Steps 1. Iterate over each sensor (column) in the data array. 2. Check if all temperature readings for the sensor are within the range `[temp_min, temp_max]`. 3. Collect the indices of the sensors that meet the criteria. 4. Return a 1D array of these consistent sensor indices. # Example ```python import numpy as np # Example data data = np.array([[25, 18, 30], [26, 19, 29], [27, 21, 31], [29, 20, 32]]) temp_min = 18 temp_max = 30 # Compute the consistent sensors result = consistent_sensors(data, temp_min, temp_max) print(result) # Output should be a 1D array of indices # Example: # [0 1] ``` # Helper Function (for reference) - `check_consistency(sensor_data, temp_min, temp_max)`: Receives a 1D array and checks if all values are within the given temperature range, returning `True` if consistent, otherwise `False`. Ensure your implementation is efficient and leverages NumPy operations where possible for optimal performance.","solution":"import numpy as np def consistent_sensors(data, temp_min, temp_max): Identifies sensors that have all their readings within the specified temperature range. Parameters: data (numpy.ndarray): A 2D array where each column represents temperature readings from one sensor. temp_min (float): The minimum acceptable temperature value. temp_max (float): The maximum acceptable temperature value. Returns: numpy.ndarray: A 1D array of indices indicating which sensors are consistent. num_sensors = data.shape[1] consistent_indices = [] for sensor_index in range(num_sensors): sensor_data = data[:, sensor_index] if np.all((sensor_data >= temp_min) & (sensor_data <= temp_max)): consistent_indices.append(sensor_index) return np.array(consistent_indices)"},{"question":"In this task, you need to write a function `find_majority_element` that identifies the majority element in a list of integers. The majority element is defined as the element that appears more than half the time in the list. If no such element exists, the function should return `None`. # Function Signature ```python def find_majority_element(nums: List[int]) -> int: pass ``` # Parameters - `nums` (List[int]): A list of integers. # Returns - `int`: The majority element in the list, or `None` if no majority element exists. # Constraints - You should implement an efficient solution with a linear time complexity, O(n). - The function should use O(1) space complexity. # Example Given the following input list: ```python nums = [3, 3, 4, 2, 4, 4, 2, 4, 4] ``` Calling the function as follows: ```python result = find_majority_element(nums) print(result) ``` Should output: ```python 4 ``` Here\'s another example: ```python nums = [3, 3, 4, 2, 4, 4, 2, 4] ``` Calling the function as follows: ```python result = find_majority_element(nums) print(result) ``` Should output: ```python None ```","solution":"from typing import List def find_majority_element(nums: List[int]) -> int: This function finds the majority element in a list of integers. The majority element is the element that appears more than half the time in the list. If no such element exists, the function returns None. candidate, count = None, 0 # Phase 1: Find a candidate using Boyer-Moore Voting Algorithm for num in nums: if count == 0: candidate, count = num, 1 elif num == candidate: count += 1 else: count -= 1 # Phase 2: Verify that the candidate is actually the majority element if nums.count(candidate) > len(nums) // 2: return candidate return None"},{"question":"Write a Python function that generates a random list of integers and finds the top `N` largest unique values from this list. Return these values as a sorted list in descending order. The generation of random integers should be constrained by a provided range. The function should output: list: A sorted list containing the top `N` largest unique values. You should write self-contained code starting with: ```python import random def find_top_n_unique(num_elements, N, value_range=(1, 100)): Function to find the top N largest unique values from a random list of integers within a specified range. Args: num_elements (int): Number of random integers to generate. N (int): Number of top unique values to find. value_range (tuple): A tuple specifying the range (min, max) of random integers. Returns: list: Sorted list of the top N largest unique values in descending order. # Generate random integers within the specified range random_list = [random.randint(value_range[0], value_range[1]) for _ in range(num_elements)] # Find the unique values and sort them in descending order unique_values = list(set(random_list)) unique_values.sort(reverse=True) # Return the top N unique values return unique_values[:N] # Example usage: # result = find_top_n_unique(50, 5) # print(result) ```","solution":"import random def find_top_n_unique(num_elements, N, value_range=(1, 100)): Function to find the top N largest unique values from a random list of integers within a specified range. Args: num_elements (int): Number of random integers to generate. N (int): Number of top unique values to find. value_range (tuple): A tuple specifying the range (min, max) of random integers. Returns: list: Sorted list of the top N largest unique values in descending order. # Generate random integers within the specified range random_list = [random.randint(value_range[0], value_range[1]) for _ in range(num_elements)] # Find the unique values and sort them in descending order unique_values = list(set(random_list)) unique_values.sort(reverse=True) # Return the top N unique values return unique_values[:N] # Example usage: # result = find_top_n_unique(50, 5) # print(result)"},{"question":"The National Climatic Data Center (NCDC) stores weather data with temperature readings taken every hour for different cities. The data is stored in a text file where each line represents a record for a particular city and is formatted as follows: ``` City,YYYY-MM-DD HH,Temperature ``` Your task is to write a function `average_temperature(file)` that takes the filename of the weather data file as input and returns a dictionary. The dictionary should have city names as keys and their corresponding average temperatures as values. # Requirements: 1. Read and parse the input file line by line. 2. Convert the temperature readings to float and calculate the average temperature for each city. 3. Ensure the function handles empty files gracefully by returning an empty dictionary. # Function Signature: ```python def average_temperature(file: str) -> dict: pass ``` # Example: Assuming the content of the file `weather_data.txt` is: ``` New York,2023-01-01 00,32.0 New York,2023-01-01 01,30.5 Los Angeles,2023-01-01 00,75.0 Los Angeles,2023-01-01 01,74.5 ``` Calling the function: ```python result = average_temperature(\'weather_data.txt\') print(result) # Output should be: {\'New York\': 31.25, \'Los Angeles\': 74.75} ```","solution":"def average_temperature(file: str) -> dict: from collections import defaultdict # Dictionary to store the sum and count of temperatures for each city temps = defaultdict(lambda: {\'sum\': 0, \'count\': 0}) with open(file, \'r\') as f: for line in f: line = line.strip() if line: parts = line.split(\',\') city = parts[0] temperature = float(parts[2]) temps[city][\'sum\'] += temperature temps[city][\'count\'] += 1 # Calculate the average temperature for each city averages = {city: data[\'sum\'] / data[\'count\'] for city, data in temps.items()} return averages"},{"question":"You have been provided a data table in CSV format containing two columns: `Event` and `Attendance`. An example of the CSV content is as follows: ```csv Event,Attendance Soccer,12000 Basketball,9500 Tennis,3000 Concert,22000 Theatre,4000 ``` Create a function called `plot_event_attendance` that reads the data from the CSV file and generates a bar chart using the Matplotlib library in Python. The bar chart should display events on the x-axis and their respective attendances on the y-axis. The chart should be saved as \\"attendance_chart.png\\". Your function should: 1. Read the data from the provided CSV file. 2. Parse the data to extract \'Event\' and \'Attendance\' values. 3. Generate a bar chart with \'Event\' on the x-axis and \'Attendance\' on the y-axis. 4. Save the bar chart as \\"attendance_chart.png\\". Ensure that the x-axis is labeled as \\"Event\\", the y-axis as \\"Attendance\\", and the chart has a title \\"Event Attendance\\". **Example Usage:** ```python csv_content = Event,Attendance Soccer,12000 Basketball,9500 Tennis,3000 Concert,22000 Theatre,4000 # Assuming this content is saved in a file named \'events.csv\'. plot_event_attendance(\'events.csv\') ``` **Constraints:** 1. The function should read the file from the given file path argument. 2. Handle possible errors related to file reading operations and CSV parsing.","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_event_attendance(csv_file_path): Reads the data from a given CSV file and generates a bar chart with \'Event\' on the x-axis and \'Attendance\' on the y-axis, saving the chart as \'attendance_chart.png\'. Parameters: csv_file_path (str): Path to the CSV file containing \'Event\' and \'Attendance\' data. try: # Reading the CSV file data = pd.read_csv(csv_file_path) # Extracting \'Event\' and \'Attendance\' columns events = data[\'Event\'] attendance = data[\'Attendance\'] # Generating the bar chart plt.figure(figsize=(10, 6)) plt.bar(events, attendance, color=\'skyblue\') plt.xlabel(\'Event\') plt.ylabel(\'Attendance\') plt.title(\'Event Attendance\') plt.xticks(rotation=45, ha=\'right\') # Saving the bar chart plt.savefig(\'attendance_chart.png\') plt.close() except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"You are asked to write a function named `generate_2d_spiral_array` that generates an `n x n` 2D array filled with integers from `1` to `n*n` in a spiral order, starting from the top-left corner and moving inwards in a clockwise direction. The function should adhere to the following signature: ```python import numpy as np def generate_2d_spiral_array(n: int) -> np.ndarray: # Function implementation ``` # Parameters: - `n` (`int`): The dimension of the square 2D array to generate. # Returns: - A 2D `numpy.ndarray` of shape `(n, n)` filled with integers from `1` to `n*n` in a spiral order. # Example: For `n = 3`: ```python generate_2d_spiral_array(3) ``` The result should be: ```python np.array([ [ 1, 2, 3], [ 8, 9, 4], [ 7, 6, 5] ]) ``` # Explanation: The function should populate an `n x n` array starting from the top-left corner, proceeding right along the top row, then down the right column, then left along the bottom row, and then up the left column, effectively spiraling inward until all positions in the array are filled with sequential integers.","solution":"import numpy as np def generate_2d_spiral_array(n: int) -> np.ndarray: Generates an n x n 2D array filled with integers from 1 to n*n in a spiral order. spiral_array = np.zeros((n, n), dtype=int) counter = 1 top, bottom = 0, n - 1 left, right = 0, n - 1 while top <= bottom and left <= right: # Traverse from left to right along the top row for i in range(left, right + 1): spiral_array[top][i] = counter counter += 1 top += 1 # Traverse from top to bottom along the right column for i in range(top, bottom + 1): spiral_array[i][right] = counter counter += 1 right -= 1 # Traverse from right to left along the bottom row if top <= bottom: for i in range(right, left - 1, -1): spiral_array[bottom][i] = counter counter += 1 bottom -= 1 # Traverse from bottom to top along the left column if left <= right: for i in range(bottom, top - 1, -1): spiral_array[i][left] = counter counter += 1 left += 1 return spiral_array"},{"question":"You are tasked with simulating a library system to manage books and member rentals. The system should allow adding new books, registering new members, and recording the borrowing and returning of books. Your task is to write a `Library` class with methods to facilitate these operations. 1. The `Library` class should use two dictionaries: - `books` to store information on books (keyed by book IDs). - `members` to store information on members (keyed by member IDs). 2. Implement the following methods: - `add_book(book_id, book_title)`: - Adds a new book to the `books` dictionary with the book ID as the key and the title as the value. - `register_member(member_id, member_name)`: - Registers a new member with the member ID as the key and the member\'s name as the value. - `borrow_book(member_id, book_id)`: - Records a book as borrowed by a member if the book is available and the member is registered. - Mark the book as unavailable. - Return a message indicating success or failure of the operation. - `return_book(book_id)`: - Marks the book as available again. 3. The `Library` class should also keep track of the borrowed books in a dictionary `borrowed_books` where keys are book IDs and values are member IDs who borrowed them. **Data Structures:** - `books`: A dictionary where key is `book_id` and value is `book_title`. - `members`: A dictionary where key is `member_id` and value is `member_name`. - `borrowed_books`: A dictionary where key is `book_id` and value is `member_id`. **Example Usage:** ```python library = Library() library.add_book(1, \\"The Great Gatsby\\") library.add_book(2, \\"1984\\") library.register_member(101, \\"Alice\\") library.register_member(102, \\"Bob\\") print(library.borrow_book(101, 1)) # Output: \\"Book borrowed successfully\\" print(library.borrow_book(102, 1)) # Output: \\"Book not available\\" library.return_book(1) print(library.borrow_book(102, 1)) # Output: \\"Book borrowed successfully\\" ``` **Requirements:** - Ensure error handling for scenarios such as borrowing an unavailable book, unregistered member, and returning a non-borrowed book. **Class Signature:** ```python class Library: def __init__(self): self.books = {} self.members = {} self.borrowed_books = {} def add_book(self, book_id: int, book_title: str) -> None: pass def register_member(self, member_id: int, member_name: str) -> None: pass def borrow_book(self, member_id: int, book_id: int) -> str: pass def return_book(self, book_id: int) -> None: pass ```","solution":"class Library: def __init__(self): self.books = {} self.members = {} self.borrowed_books = {} def add_book(self, book_id: int, book_title: str) -> None: self.books[book_id] = book_title def register_member(self, member_id: int, member_name: str) -> None: self.members[member_id] = member_name def borrow_book(self, member_id: int, book_id: int) -> str: if book_id not in self.books: return \\"Book not found\\" if book_id in self.borrowed_books: return \\"Book not available\\" if member_id not in self.members: return \\"Member not registered\\" self.borrowed_books[book_id] = member_id return \\"Book borrowed successfully\\" def return_book(self, book_id: int) -> None: if book_id in self.borrowed_books: del self.borrowed_books[book_id]"},{"question":"**You are required to write a Python function named `grade_summary` using the `pandas` library. This function will process a DataFrame containing students\' grades and return a summary as a dictionary.** **Function Requirements:** - **Function Name**: `grade_summary` - **Input**: A `pandas.DataFrame` named `grades` with columns: `\'student_id\'`, `\'subject\'`, and `\'grade\'`. - **Output**: A dictionary containing summary statistics of the grades for each subject with the following structure: - Keys are the subject names. - Values are dictionaries with three keys: - `\'average\'`: The mean of the grades for that subject. - `\'max\'`: The maximum grade for that subject. - `\'min\'`: The minimum grade for that subject. **Steps to Follow**: 1. Group the DataFrame by the `\'subject\'` column. 2. For each group, compute the mean, maximum, and minimum grades. 3. Construct a dictionary with subject names as keys and the computed statistics as values. # Example: Assume the following DataFrame `grades`: ``` student_id subject grade 0 1 Math 85 1 2 Math 90 2 1 History 70 3 2 History 75 4 1 Science 95 5 2 Science 85 ``` The function should return: ``` { \'Math\': { \'average\': 87.5, \'max\': 90, \'min\': 85 }, \'History\': { \'average\': 72.5, \'max\': 75, \'min\': 70 }, \'Science\': { \'average\': 90, \'max\': 95, \'min\': 85 } } ``` **Libraries to Use**: `pandas` **Implementation Note**: - Handle scenarios where the DataFrame may be empty or missing expected columns. - Ensure proper aggregation and mapping of subject-specific statistics.","solution":"import pandas as pd def grade_summary(grades): Processes a DataFrame containing students\' grades and returns a summary as a dictionary. Parameters: grades (pd.DataFrame): A DataFrame with columns: \'student_id\', \'subject\', and \'grade\'. Returns: dict: A dictionary containing summary statistics of the grades for each subject. summary = {} if \'subject\' not in grades.columns or \'grade\' not in grades.columns: raise ValueError(\\"DataFrame must contain \'subject\' and \'grade\' columns\\") subjects = grades.groupby(\'subject\') for subject, group in subjects: average_grade = group[\'grade\'].mean() max_grade = group[\'grade\'].max() min_grade = group[\'grade\'].min() summary[subject] = { \'average\': average_grade, \'max\': max_grade, \'min\': min_grade } return summary"},{"question":"Given a log file named `system_log.txt` that contains timestamped system logs, you are tasked with writing a function named `extract_errors` which does the following: 1. Reads the `system_log.txt` file line by line. 2. Extracts all the lines that contain the word `\\"ERROR\\"`. 3. Returns a list of the extracted error lines. Additionally, you need to implement a function named `count_errors` which: 1. Takes the list of error lines extracted by `extract_errors`. 2. Counts the number of occurrences of each type of error. 3. Returns a dictionary where the keys are the error types (extracted words immediately following \\"ERROR\\") and the values are their respective counts. Example log format in `system_log.txt`: ``` 2023-02-13 10:12:45 INFO Starting process 2023-02-13 10:13:03 ERROR Disk full 2023-02-13 10:14:22 WARNING Low memory 2023-02-13 10:15:19 ERROR Connection lost 2023-02-13 10:16:52 INFO Process completed 2023-02-13 10:17:33 ERROR Disk full ``` Using the example log, the `extract_errors` function should return: ```python [ \\"2023-02-13 10:13:03 ERROR Disk full\\", \\"2023-02-13 10:15:19 ERROR Connection lost\\", \\"2023-02-13 10:17:33 ERROR Disk full\\" ] ``` The `count_errors` function should then return: ```python { \\"Disk full\\": 2, \\"Connection lost\\": 1 } ```","solution":"def extract_errors(logfile): Reads the log file and extracts lines containing the word \\"ERROR\\". Parameters: logfile (str): Path to the log file. Returns: list: A list of error lines. error_lines = [] with open(logfile, \'r\') as file: for line in file: if \\"ERROR\\" in line: error_lines.append(line.strip()) return error_lines def count_errors(error_lines): Count the occurrences of each type of error in the error lines. Parameters: error_lines (list): List of error lines. Returns: dict: Dictionary with error types as keys and their counts as values. error_counts = {} for line in error_lines: parts = line.split(\\"ERROR \\", 1) if len(parts) > 1: error_type = parts[1] if error_type in error_counts: error_counts[error_type] += 1 else: error_counts[error_type] = 1 return error_counts"},{"question":"Given a dictionary of key-value pairs representing the prices of various items in a store, and a list of items that a customer wishes to buy, write a function to calculate the total cost of the items in the shopping list. If an item in the list is not found in the dictionary, it should be considered free (i.e., have a cost of 0). You should write self-contained code starting with: ``` def calculate_total_cost(prices, shopping_list): ``` The function should return: ``` float: The total cost of the items in the shopping list. ```","solution":"def calculate_total_cost(prices, shopping_list): Calculate the total cost of items in the shopping list. :param prices: Dictionary containing item prices. :param shopping_list: List of items to calculate total cost for. :return: Total cost of the items in the shopping list. total_cost = 0.0 for item in shopping_list: if item in prices: total_cost += prices[item] else: total_cost += 0 # Free if not found in the dictionary return total_cost"},{"question":"You are given a list of dictionaries where each dictionary represents a product with the following key-value pairs: `id` (unique identifier), `name` (product name), `category` (category to which the product belongs), and `price` (price of the product). Your task is to implement a function named `process_product_data` that performs the following steps: 1. **Input**: The function will take a single parameter `product_list`, which is a list of dictionaries containing product information. 2. **Filtering**: Remove products that have a price less than or equal to 0. 3. **Categorization**: Group the remaining products by their category into a new dictionary, where the key is the category and the value is a list of product dictionaries belonging to that category. 4. **Sorting**: Within each category, sort the products in descending order by price. 5. **Output**: Return the final dictionary containing the categorized and sorted products. **Requirements**: - Use list comprehensions and the `sorted` function as part of your solution. Here is the function signature for reference: ```python def process_product_data(product_list: list) -> dict: pass ```","solution":"def process_product_data(product_list): Processes the product list by filtering, categorizing, and sorting the products. :param product_list: List of dictionaries where each dictionary contains product information. :return: Dictionary categorizing products by their category with products sorted by price within each category. # Filter out products with price less than or equal to 0 filtered_products = [product for product in product_list if product[\'price\'] > 0] # Initialize the categories dictionary categories = {} # Categorize the products for product in filtered_products: category = product[\'category\'] if category not in categories: categories[category] = [] categories[category].append(product) # Sort products within each category by price in descending order for category in categories: categories[category] = sorted(categories[category], key=lambda x: x[\'price\'], reverse=True) return categories"},{"question":"You have been contracted to build a function that processes a list of transactions and categorizes them into deposits and withdrawals. Each transaction will be represented as a dictionary with keys `\\"type\\"` (either `\'deposit\'` or `\'withdrawal\'`) and `\\"amount\\"` (a positive integer representing the monetary amount). The function should return a summary dictionary with the total amount of deposits and withdrawals. Function name: `process_transactions` Function signature: ```python def process_transactions(transactions): ``` Requirements: 1. The `transactions` parameter is a list of dictionaries, where each dictionary represents a transaction with two keys: - `\\"type\\"`: a string that is either `\'deposit\'` or `\'withdrawal\'`. - `\\"amount\\"`: an integer representing the amount of the transaction. 2. The function should return a dictionary with two keys: - `\\"total_deposits\\"`: the sum of amounts for all transactions of type `\'deposit\'`. - `\\"total_withdrawals\\"`: the sum of amounts for all transactions of type `\'withdrawal\'`. 3. If the input list is empty, the function should return `{\'total_deposits\': 0, \'total_withdrawals\': 0}`. Example: ```python transactions = [ {\'type\': \'deposit\', \'amount\': 100}, {\'type\': \'withdrawal\', \'amount\': 50}, {\'type\': \'deposit\', \'amount\': 300}, {\'type\': \'withdrawal\', \'amount\': 70}, ] output = process_transactions(transactions) # output should be {\'total_deposits\': 400, \'total_withdrawals\': 120} transactions = [] output = process_transactions(transactions) # output should be {\'total_deposits\': 0, \'total_withdrawals\': 0} ```","solution":"def process_transactions(transactions): Processes a list of transactions and categorizes them into deposits and withdrawals. Parameters: transactions (list): A list of transaction dictionaries with keys \'type\' and \'amount\'. Returns: dict: A dictionary with keys \'total_deposits\' and \'total_withdrawals\' representing the sum of amounts for deposits and withdrawals respectively. summary = {\\"total_deposits\\": 0, \\"total_withdrawals\\": 0} for transaction in transactions: if transaction[\'type\'] == \'deposit\': summary[\'total_deposits\'] += transaction[\'amount\'] elif transaction[\'type\'] == \'withdrawal\': summary[\'total_withdrawals\'] += transaction[\'amount\'] return summary"},{"question":"You are required to write a function using the Pandas library that determines if each student in a group has passed or failed based on their exam scores. Each student\'s information is provided as a dictionary with their name and scores in three subjects—Mathematics, Science, and English. The passing condition is that a student must score at least 40% in each subject. The classification rules are as follows: 1. A student is classified as \\"Passed\\" if their score in all three subjects is 40 or above. 2. Otherwise, the student is classified as \\"Failed\\". **Function Name**: `pass_or_fail` **Input**: A Pandas DataFrame with columns [\'Name\', \'Mathematics\', \'Science\', \'English\']. **Output**: A Pandas DataFrame with columns [\'Name\', \'Result\'], where each result is either \\"Passed\\" or \\"Failed\\". **Please note**: - You must use the Pandas library to create and manipulate the DataFrame for input and output. - Use the `pandas.DataFrame` class for input and output DataFrames. Example: ```python import pandas as pd data = { \'Name\': [\'Alice\', \'Bob\', \'Charlie\', \'David\'], \'Mathematics\': [50, 35, 45, 60], \'Science\': [55, 65, 25, 70], \'English\': [60, 40, 50, 30] } df = pd.DataFrame(data) print(pass_or_fail(df)) ``` Output: ``` Name Result 0 Alice Passed 1 Bob Failed 2 Charlie Failed 3 David Failed ```","solution":"import pandas as pd def pass_or_fail(df): Determines if each student in the DataFrame has passed or failed based on their scores. Parameters: df (pd.DataFrame): Input DataFrame with columns \'Name\', \'Mathematics\', \'Science\', \'English\'. Returns: pd.DataFrame: Output DataFrame with columns \'Name\' and \'Result\', where \'Result\' is either \'Passed\' or \'Failed\'. # Check if each student has passed each subject df[\'Result\'] = (df[\'Mathematics\'] >= 40) & (df[\'Science\'] >= 40) & (df[\'English\'] >= 40) # Convert boolean result to \'Passed\' or \'Failed\' df[\'Result\'] = df[\'Result\'].apply(lambda x: \'Passed\' if x else \'Failed\') # Return the new DataFrame with \'Name\' and \'Result\' return df[[\'Name\', \'Result\']]"},{"question":"You are required to write a Python function named `merge_lists` that merges two sorted lists into a single sorted list. Ensure that the merged list maintains the sorted order. The function signature is as follows: ```python def merge_lists(list1, list2): ``` **Details:** 1. You may assume that both input lists, `list1` and `list2`, are sorted in ascending order. 2. The function should return a new list containing elements from both input lists, also sorted in ascending order. 3. To achieve this, you should iterate through both lists, compare their elements, and build the merged list accordingly, similar to the merge step in the merge sort algorithm. **Example:** ```python list1 = [1, 3, 5] list2 = [2, 4, 6] merged_list = merge_lists(list1, list2) print(merged_list) # Output should be [1, 2, 3, 4, 5, 6] ``` Remember, the key requirement is that the merged list must be sorted even if the input lists contain different lengths and interleaving elements.","solution":"def merge_lists(list1, list2): Merges two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 # Traverse both lists and insert smaller value from list1 or list2 # into merged_list and then move to the next element in each list. while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Store remaining elements of list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Store remaining elements of list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are building a simple inventory management system for a small bookstore. Implement a class called `BookInventory` that helps manage the inventory of books. The functionality of the class should include: 1. **Adding a book to the inventory**: - Method: `add_book` - Parameters: `title` (str), `author` (str), `quantity` (int) - Description: Adds a book to the inventory. If the book already exists, update the quantity. 2. **Removing a book from the inventory**: - Method: `remove_book` - Parameters: `title` (str), `quantity` (int) - Description: Decreases the quantity of the book by the specified amount. If the resulting quantity is less than or equal to 0, remove the book from the inventory. 3. **Getting the list of books by an author**: - Method: `get_books_by_author` - Parameters: `author` (str) - Description: Returns a list of titles of all books by the given author. 4. **Getting the inventory as a list of dictionaries**: - Method: `get_inventory` - Description: Returns the complete inventory as a list of dictionaries. Each dictionary should have the keys `title`, `author`, and `quantity`. 5. **Getting the quantity of a specific book**: - Method: `get_quantity` - Parameters: `title` (str) - Description: Returns the quantity of the specified book. If the book is not in the inventory, return 0. Write the `BookInventory` class based on the described functionality. Ensure proper handling of edge cases, such as adding negative quantities or removing more than available. **Class Signature:** ```python class BookInventory: def __init__(self): self.inventory = [] def add_book(self, title: str, author: str, quantity: int): pass def remove_book(self, title: str, quantity: int): pass def get_books_by_author(self, author: str) -> list: pass def get_inventory(self) -> list: pass def get_quantity(self, title: str) -> int: pass ``` **Example:** ```python inventory = BookInventory() # Adding books inventory.add_book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 5) inventory.add_book(\\"1984\\", \\"George Orwell\\", 10) inventory.add_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 3) # Removing books inventory.remove_book(\\"1984\\", 2) # Getting books by an author print(inventory.get_books_by_author(\\"George Orwell\\")) # Output: [\\"1984\\"] # Getting the inventory print(inventory.get_inventory()) # Output: [ # {\'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\', \'quantity\': 5}, # {\'title\': \'1984\', \'author\': \'George Orwell\', \'quantity\': 8}, # {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'quantity\': 3} # ] # Getting the quantity of a specific book print(inventory.get_quantity(\\"The Great Gatsby\\")) # Output: 5 print(inventory.get_quantity(\\"1984\\")) # Output: 8 print(inventory.get_quantity(\\"Moby Dick\\")) # Output: 0 ```","solution":"class BookInventory: def __init__(self): self.inventory = {} def add_book(self, title: str, author: str, quantity: int): if title in self.inventory: self.inventory[title][\'quantity\'] += quantity else: self.inventory[title] = {\'author\': author, \'quantity\': quantity} def remove_book(self, title: str, quantity: int): if title in self.inventory: self.inventory[title][\'quantity\'] -= quantity if self.inventory[title][\'quantity\'] <= 0: del self.inventory[title] def get_books_by_author(self, author: str) -> list: return [title for title, details in self.inventory.items() if details[\'author\'] == author] def get_inventory(self) -> list: return [{\'title\': title, \'author\': details[\'author\'], \'quantity\': details[\'quantity\']} for title, details in self.inventory.items()] def get_quantity(self, title: str) -> int: return self.inventory.get(title, {}).get(\'quantity\', 0)"},{"question":"You are tasked with creating a function named `unique_substrings_count` that takes a string as input and returns the number of unique substrings that can be derived from it. Requirements: 1. **Function Name:** `unique_substrings_count` 2. **Parameter**: - `s` (str): The input string. 3. **Returns**: - `count` (int): The number of unique substrings of the input string. Example: ```python def unique_substrings_count(s): pass # Placeholder for your implementation # Usage Example count = unique_substrings_count(\\"abc\\") print(count) # Expected output: 6 (substrings: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\") ```","solution":"def unique_substrings_count(s): Returns the number of unique substrings that can be derived from the input string. unique_substrings = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): unique_substrings.add(s[i:j]) return len(unique_substrings)"},{"question":"**Binary Tree Level Order Traversal** You need to implement a function that performs a level-order traversal on a binary tree. In level-order traversal, nodes are visited level by level from left to right. The function should return a list of lists, where each sublist contains the values of the nodes at that level. **Function Signature:** ```python def level_order_traversal(root): pass ``` **Function Description:** - `level_order_traversal(root)`: This function takes the root of a binary tree as input and returns a list of lists. Each inner list represents the nodes at that level from left to right. **Requirements:** 1. You need to use a breadth-first search approach, employing a queue to maintain the order of nodes. 2. If the binary tree is empty, return an empty list. **Example:** ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right # Example Tree: # 3 # / # 9 20 # / # 15 7 root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20, TreeNode(15), TreeNode(7)) output = level_order_traversal(root) print(output) # Output should be [[3], [9, 20], [15, 7]] ``` **Constraints:** - The number of nodes in the tree is in the range [0, 2000]. - The value of each node is an integer and within the range of (-10^4) to (10^4).","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_traversal(root): if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) level_nodes = [] for i in range(level_size): node = queue.popleft() level_nodes.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level_nodes) return result"},{"question":"**Task: Data Analysis with Pandas and Matplotlib** You are tasked with creating a function `sales_trend_plot` that takes three parameters: `data`, `start_year`, and `end_year`. This function will generate a line graph to visualize the yearly sales trend using Pandas and Matplotlib. The steps involved in the function are as follows: 1. Filter the DataFrame `data` to include rows where the column \\"Year\\" is between `start_year` and `end_year`, inclusive. 2. Group the filtered data by the \\"Year\\" column and compute the total sales for each year. Assume the sales amounts are in a column named \\"Sales\\". 3. Generate a line plot using Matplotlib with: - X-axis representing the \\"Year\\". - Y-axis representing the total sales for each year. 4. Add proper axis labels and a title to the graph. **Function Signature:** ```python def sales_trend_plot(data: pd.DataFrame, start_year: int, end_year: int) -> None: pass ``` **Input:** - `data` (pd.DataFrame): A DataFrame containing sales data with at least two columns: \\"Year\\" and \\"Sales\\". - `start_year` (int): An integer representing the starting year of the period to analyze. - `end_year` (int): An integer representing the ending year of the period to analyze. **Output:** - A line plot visualizing the yearly sales trend within the specified period. **Example:** ```python import pandas as pd data = pd.DataFrame({ \\"Year\\": [2015, 2016, 2017, 2018, 2019, 2020, 2021], \\"Sales\\": [250, 270, 300, 310, 280, 320, 350] }) start_year = 2016 end_year = 2020 sales_trend_plot(data, start_year, end_year) ``` This should create a line plot with the x-axis showing the years (2016, 2017, 2018, 2019, 2020) and the y-axis showing the corresponding total sales values. Make sure to import the necessary libraries (`import pandas as pd` and `import matplotlib.pyplot as plt`) at the beginning of your script.","solution":"import pandas as pd import matplotlib.pyplot as plt def sales_trend_plot(data: pd.DataFrame, start_year: int, end_year: int) -> None: Generates a line graph to visualize the yearly sales trend using the given data. Parameters: data (pd.DataFrame): DataFrame containing sales data with columns \'Year\' and \'Sales\'. start_year (int): The starting year for filtering the data. end_year (int): The ending year for filtering the data. # Filter data for the specified period filtered_data = data[(data[\'Year\'] >= start_year) & (data[\'Year\'] <= end_year)] # Group by \'Year\' and calculate total sales for each year yearly_sales = filtered_data.groupby(\'Year\')[\'Sales\'].sum().reset_index() # Generate the line plot plt.figure(figsize=(10, 5)) plt.plot(yearly_sales[\'Year\'], yearly_sales[\'Sales\'], marker=\'o\', linestyle=\'-\') # Add labels and title plt.xlabel(\'Year\') plt.ylabel(\'Total Sales\') plt.title(f\'Sales Trend from {start_year} to {end_year}\') # Display the plot plt.grid(True) plt.show()"},{"question":"You are tasked with writing a program to manage a basic task scheduling system using Python dictionaries. Create a function named `manage_tasks` that takes a list of tasks as input and returns a dictionary containing the categorized tasks. Each task in the list will be represented as a dictionary with the following keys: `id`, `task_name`, `priority`, and `status`. - `id`: a unique integer identifier for the task. - `task_name`: a string representing the name of the task. - `priority`: an integer representing the priority of the task (1 for high, 2 for medium, 3 for low). - `status`: a string indicating the current status of the task (\'to_do\', \'in_progress\', \'completed\'). The function should categorize the tasks based on their status and return a dictionary with three keys: `to_do`, `in_progress`, and `completed`. Each key should map to a list of task names that fall under that status category. The tasks within each list should be sorted by their priority (high to low). You may assume that the input list will contain valid data structures and values. Example input: ```python tasks = [ {\\"id\\": 1, \\"task_name\\": \\"Task A\\", \\"priority\\": 1, \\"status\\": \\"to_do\\"}, {\\"id\\": 2, \\"task_name\\": \\"Task B\\", \\"priority\\": 3, \\"status\\": \\"in_progress\\"}, {\\"id\\": 3, \\"task_name\\": \\"Task C\\", \\"priority\\": 2, \\"status\\": \\"completed\\"}, {\\"id\\": 4, \\"task_name\\": \\"Task D\\", \\"priority\\": 1, \\"status\\": \\"to_do\\"}, {\\"id\\": 5, \\"task_name\\": \\"Task E\\", \\"priority\\": 2, \\"status\\": \\"completed\\"} ] ``` Expected output: ```python { \\"to_do\\": [\\"Task A\\", \\"Task D\\"], \\"in_progress\\": [\\"Task B\\"], \\"completed\\": [\\"Task C\\", \\"Task E\\"] } ``` Function signature: ```python def manage_tasks(tasks: list) -> dict: # Your code here ```","solution":"def manage_tasks(tasks): Categorizes tasks based on their status and sorts each category by priority. Parameters: tasks (list): A list of task dictionaries each with keys \'id\', \'task_name\', \'priority\', and \'status\'. Returns: dict: A dictionary with keys \'to_do\', \'in_progress\', and \'completed\' mapping to lists of task names. categorized_tasks = { \\"to_do\\": [], \\"in_progress\\": [], \\"completed\\": [] } for task in tasks: categorized_tasks[task[\'status\']].append(task) for status in categorized_tasks: categorized_tasks[status].sort(key=lambda x: x[\'priority\']) categorized_tasks[status] = [task[\'task_name\'] for task in categorized_tasks[status]] return categorized_tasks"},{"question":"Write a function that simulates the rolling of two six-sided dice `n` times and calculates the frequency of each possible sum (from 2 to 12). Plot the frequencies as a bar chart. Use `numpy` for random number generation and `matplotlib` for plotting the bar chart. The function should output a tuple containing the matplotlib figure object for the bar chart and a dictionary with the frequencies of each possible sum. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def roll_dice_simulation(n = 1000): ```","solution":"import numpy as np import matplotlib.pyplot as plt def roll_dice_simulation(n=1000): # Simulate rolling two six-sided dice n times dice_rolls1 = np.random.randint(1, 7, size=n) dice_rolls2 = np.random.randint(1, 7, size=n) sums = dice_rolls1 + dice_rolls2 # Calculate the frequency of each possible sum (from 2 to 12) sums_frequency = {sum_value: 0 for sum_value in range(2, 13)} for result in sums: sums_frequency[result] += 1 # Plot the frequencies as a bar chart plt.figure(figsize=(10, 6)) plt.bar(sums_frequency.keys(), sums_frequency.values(), color=\'blue\') plt.xlabel(\'Sum\') plt.ylabel(\'Frequency\') plt.title(\'Frequency of Each Possible Sum from Rolling Two Six-Sided Dice\') plt.xticks(list(sums_frequency.keys())) # Save the figure object fig = plt.gcf() return fig, sums_frequency"},{"question":"Create a function named `factorial_recursive` that calculates the factorial of a given non-negative integer using recursion. The function should take one parameter: - `n` (the integer for which the factorial is to be calculated) Factorial of a non-negative integer `n` is the product of all positive integers less than or equal to `n`. The factorial of `0` is defined to be `1`. Ensure your function handles the base case and the recursive case correctly. # Example If you call `factorial_recursive(5)`, the function should return `120` because `5! = 5 * 4 * 3 * 2 * 1 = 120`.","solution":"def factorial_recursive(n): Returns the factorial of a given non-negative integer n using recursion. if n == 0: return 1 else: return n * factorial_recursive(n - 1)"},{"question":"You are provided with a dataset that contains information about various customers, stored in a Pandas DataFrame called `customer_df`. The DataFrame\'s structure includes columns for \'CustomerID\', \'Name\', \'Age\', \'Email\', and \'Purchase_Amount\'. You need to analyze the purchasing behavior of these customers and provide insights. **Objective:** Write a function named `analyze_customers` that: 1. Extracts the ages and purchase amounts from the provided DataFrame `customer_df`. 2. Computes the total purchase amount for each unique age. 3. Identifies the age group with the highest total purchases and the age group with the lowest total purchases. 4. Calculates the average purchase amount across all customers. 5. Uses Matplotlib to create a bar plot that displays: - The total purchase amount of each age group. - Highlights the age group with the highest and lowest total purchases. 6. Prints the average purchase amount rounded to two decimal places. **Libraries to Use:** - `pandas` for dataframe operations. - `matplotlib.pyplot` for plotting the bar graph. **Function Signature:** ```python def analyze_customers(customer_df: pd.DataFrame) -> None: pass ```","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_customers(customer_df: pd.DataFrame) -> None: # Extract ages and purchase amounts ages = customer_df[\'Age\'] purchase_amounts = customer_df[\'Purchase_Amount\'] # Compute total purchase amount for each unique age total_purchases_by_age = customer_df.groupby(\'Age\')[\'Purchase_Amount\'].sum() # Identify the age group with the highest and lowest total purchases max_purchase_age = total_purchases_by_age.idxmax() min_purchase_age = total_purchases_by_age.idxmin() # Calculate the average purchase amount across all customers average_purchase_amount = purchase_amounts.mean() # Create a bar plot plt.figure(figsize=(10, 5)) bars = plt.bar(total_purchases_by_age.index, total_purchases_by_age.values) # Highlight the age group with the highest and lowest total purchases bars[total_purchases_by_age.index.get_loc(max_purchase_age)].set_color(\'g\') bars[total_purchases_by_age.index.get_loc(min_purchase_age)].set_color(\'r\') plt.xlabel(\'Age\') plt.ylabel(\'Total Purchase Amount\') plt.title(\'Total Purchase Amount by Age Group\') # Show the plot plt.show() # Print the average purchase amount rounded to two decimal places print(f\'Average Purchase Amount: {average_purchase_amount:.2f}\')"},{"question":"You are required to create a function that processes a list of tuples representing sales records and generates a formatted summary report as a string. Each tuple contains three elements: the name of the product (string), quantity sold (integer), and price per unit (float). # Function Requirements: 1. Define a function named `generate_sales_report` that accepts one parameter: - `sales_data`: A list of tuples, where each tuple contains (product_name, quantity_sold, price_per_unit). 2. Within the function: - Calculate the total revenue for each product by multiplying the quantity sold by the price per unit. - Generate a formatted string that summarizes the sales for each product in the following format: ``` Product: product_name Quantity Sold: quantity_sold Total Revenue: total_revenue ``` - Add a final summary line that states the overall total revenue for all products. 3. Return the formatted sales report as a string. # Example Usage: ```python sales_data = [ (\'Widget\', 10, 2.5), (\'Gadget\', 5, 3.0), (\'Doohickey\', 12, 1.75) ] print(generate_sales_report(sales_data)) ``` # Expected Output: ``` Product: Widget Quantity Sold: 10 Total Revenue: 25.00 Product: Gadget Quantity Sold: 5 Total Revenue: 15.00 Product: Doohickey Quantity Sold: 12 Total Revenue: 21.00 Overall Total Revenue: 61.00 ``` # Constraints: - Each tuple in `sales_data` contains valid data. - `quantity_sold` is a non-negative integer and `price_per_unit` is a non-negative float.","solution":"def generate_sales_report(sales_data): Generates a formatted sales report from the sales data. Args: sales_data (list of tuples): Each tuple contains (product_name, quantity_sold, price_per_unit). Returns: str: Formatted summary report of the sales data. total_revenue_all = 0 report_lines = [] for product_name, quantity_sold, price_per_unit in sales_data: total_revenue = quantity_sold * price_per_unit total_revenue_all += total_revenue report_lines.append( f\\"Product: {product_name}n\\" f\\"Quantity Sold: {quantity_sold}n\\" f\\"Total Revenue: {total_revenue:.2f}n\\" ) report_lines.append(f\\"Overall Total Revenue: {total_revenue_all:.2f}\\") return \\"n\\".join(report_lines)"},{"question":"Write a function that takes a list of strings and returns a dictionary where the keys are the unique words found in the list, and the values are the number of times each word appears. The function should ignore the case of the words, i.e., \\"Apple\\" and \\"apple\\" should be considered the same word. You should make use of the `collections` module to simplify the counting process. If the input list is empty, return an empty dictionary. The function should handle: - Different cases of words (e.g., \\"Apple\\" and \\"apple\\" should be treated as the same word) - Punctuation attached to words (e.g., \\"apple,\\" and \\"apple!\\" should count as \\"apple\\") The function should output: ``` dict: A dictionary where the keys are the unique words and the values are the count of each word. ``` You should write self-contained code starting with: ``` import collections import re def count_words(word_list): ```","solution":"import collections import re def count_words(word_list): Takes a list of strings and returns a dictionary with unique words as keys and their count as values. word_count = collections.Counter() for word in word_list: # Remove punctuation and make the word lower case clean_word = re.sub(r\'W+\', \'\', word).lower() if clean_word: # Only add non-empty words word_count[clean_word] += 1 return dict(word_count)"},{"question":"You are given a list of names, and you are tasked with writing a function `group_names_by_initial(names)` that groups these names by their initial letter. The function should create a dictionary where the keys are the initial letters and the values are lists of names that start with that letter. The names in each list should be in the same order as they appeared in the input list. Requirements: - The function should be case-insensitive, meaning \'Alice\' and \'alice\' should be grouped together. - The keys in the resulting dictionary should be uppercase letters. - Names starting with non-alphabetic characters should be ignored. Function Signature: ```python def group_names_by_initial(names: list) -> dict: ... ``` Example: ```python input_list = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"alice\\", \\"bob\\", \\"charlie\\", \\"123\\", \\"_underscore\\", \\"Anna\\"] output_dict = group_names_by_initial(input_list) ``` Expected Output: ```python { \'A\': [\'Alice\', \'alice\', \'Anna\'], \'B\': [\'Bob\', \'bob\'], \'C\': [\'Charlie\', \'charlie\'] } ```","solution":"def group_names_by_initial(names: list) -> dict: Groups names by their initial letter, ignoring non-alphabetic starting characters and considering case-insensitivity. result = {} for name in names: if name and name[0].isalpha(): initial = name[0].upper() if initial not in result: result[initial] = [] result[initial].append(name) return result"},{"question":"You are provided with two integer arrays `arr1` and `arr2` of the same length, and an integer `k`. Your task is to write a Python function called `elementwise_subtract_and_mod` that performs a specific series of operations using these arrays. The steps are as follows: 1. Subtract each corresponding element of `arr2` from `arr1`. 2. Compute the modulo `k` of each resulting element. 3. Combine the resultant values into a new array and return it. Your implementation should ensure that all operations are performed element-wise. Function Signature ```python def elementwise_subtract_and_mod(arr1: List[int], arr2: List[int], k: int) -> List[int]: ``` Inputs - `arr1`: A list of integers representing the first array. - `arr2`: A list of integers representing the second array, having the same length as `arr1`. - `k`: A positive integer used in the modulo operation. Outputs - Return a list of integers containing the resultant array after performing the specified operations. Example ```python arr1 = [10, 20, 30] arr2 = [1, 2, 3] k = 5 result = elementwise_subtract_and_mod(arr1, arr2, k) # Example output # [4, 3, 2] ``` Constraints - The input arrays `arr1` and `arr2` are guaranteed to have the same length. - The value of `k` will be a positive integer.","solution":"from typing import List def elementwise_subtract_and_mod(arr1: List[int], arr2: List[int], k: int) -> List[int]: Subtracts each element of arr2 from the corresponding element of arr1, and computes the modulo k of each resulting element. Parameters: - arr1: List[int], first array of integers - arr2: List[int], second array of integers (same length as arr1) - k: int, positive integer for modulo operation Returns: - List[int] containing the resultant values after the operations result = [(a1 - a2) % k for a1, a2 in zip(arr1, arr2)] return result"},{"question":"** You are given a text file containing multiple lines of text. Each line consists of a series of numbers separated by a varying number of spaces. The task is to process the file, extract the numbers, and then calculate the sum of these numbers for each line. Write a function `process_text_file(file_path)` that takes a file path as an argument and returns a list of integers, where each integer represents the sum of numbers from the corresponding line in the file. For instance, the file might look as follows: ``` 10 20 30 40 50 60 70 80 100 ``` Your function should: 1. Read the file line by line. 2. Extract the numbers from each line, ignoring any spaces. 3. Calculate the sum of numbers for each line. 4. Return a list where each element is the sum of numbers for the corresponding line in the file. **Function Signature:** ```python def process_text_file(file_path: str) -> list: pass ``` **Example Usage:** ```python file_path = \'numbers.txt\' result = process_text_file(file_path) print(result) # Output: [60, 90, 210, 100] ``` **Note:** - The file format is such that each line contains valid integers separated by spaces (including multiple spaces). - The function should handle an arbitrary number of lines in the file. - Ensure efficient reading and processing of the file for performance.","solution":"def process_text_file(file_path: str) -> list: Processes the file, calculates the sum of numbers for each line, and returns a list of sums for each line. result = [] with open(file_path, \'r\') as file: for line in file: # Split the line by spaces and filter out empty strings numbers = [int(num) for num in line.split() if num] result.append(sum(numbers)) return result"},{"question":"Write a function that takes a list of integers as input and returns a dictionary with keys \\"max_product\\" and \\"pair\\". The \\"max_product\\" should be the maximum product of any two distinct numbers in the list, and the \\"pair\\" should be the tuple of the two numbers that produce this product. You should write self-contained code starting with: ``` def find_max_product_pair(numbers): ```","solution":"def find_max_product_pair(numbers): Returns a dictionary with the maximum product of any two distinct numbers in the list and the pair that produces this product. if len(numbers) < 2: return {\\"max_product\\": None, \\"pair\\": None} max_product = float(\'-inf\') pair = (None, None) n = len(numbers) for i in range(n - 1): for j in range(i + 1, n): product = numbers[i] * numbers[j] if product > max_product: max_product = product pair = (numbers[i], numbers[j]) return {\\"max_product\\": max_product, \\"pair\\": pair}"},{"question":"You are tasked with writing a Python function called `find_missing_numbers` which takes a single argument `nums` representing a list of integers. The list is supposed to contain integers ranging from `1` to `n` (inclusive), where `n` is the length of the list, but some numbers are missing. Your function should return a list of the missing numbers. To solve this problem, avoid using extra space for another list or array. Your solution should have a time complexity of O(n). **Example:** ```python find_missing_numbers([4, 3, 2, 7, 8, 2, 3, 1]) -> [5, 6] find_missing_numbers([1, 1, 2, 2]) -> [3, 4] ``` Explanation: - In the first example, the numbers from `1` to `8` are expected, but `5` and `6` are missing. - In the second example, the numbers from `1` to `4` are expected, but `3` and `4` are missing. **Function Signature:** ```python def find_missing_numbers(nums: list[int]) -> list[int]: pass ```","solution":"def find_missing_numbers(nums): Returns the list of missing numbers in the range [1, n] where n is the length of the input list nums. # Iterate over each element and mark the corresponding index negative for i in range(len(nums)): index = abs(nums[i]) - 1 if nums[index] > 0: nums[index] = -nums[index] # Collect all indexes that have positive values missing_numbers = [] for i in range(len(nums)): if nums[i] > 0: missing_numbers.append(i + 1) return missing_numbers"},{"question":"You are required to write a function called `find_missing_number` that takes in a list of unique integers ranging from 1 to 100 inclusive and returns the single missing number. The list will contain exactly 99 numbers, with one number missing from the complete set. Your task is to develop an efficient algorithm to find the missing number. # Function Signature ```python def find_missing_number(numbers: list) -> int: pass ``` # Example ```python numbers = [1, 2, 3, 4, 5, ..., 99, 100] # with one number missing missing_number = find_missing_number(numbers) print(missing_number) # Output could be 28, if 28 is the missing number ``` # Constraints - The input list will always contain 99 unique integers from the range 1 to 100. - The list items are not sorted in any specific order.","solution":"def find_missing_number(numbers: list) -> int: Takes a list of unique integers from 1 to 100 with one number missing and returns the missing number. expected_sum = sum(range(1, 101)) # Sum of numbers from 1 to 100 actual_sum = sum(numbers) # Sum of numbers in the list return expected_sum - actual_sum # The difference will be the missing number"},{"question":"In this problem, you are required to create a Python function named `generate_histogram` that utilizes the `matplotlib.pyplot` library to generate and display a histogram. The function should follow these specific requirements: 1. The function should take one parameter: - `data`: a list of numerical values. 2. The function should create a histogram plot using the provided data. 3. The histogram should have bins such that each bin falls on an integer boundary (e.g., 1-2, 2-3, etc.). 4. The X-axis should be labeled as \\"Value\\". 5. The Y-axis should be labeled as \\"Frequency\\". 6. The histogram should have a title, \\"Histogram of Data\\". 7. Utilize `plt.tight_layout()` to optimize the spacing of the plot elements. This task will help you practice creating histograms using `matplotlib.pyplot` and understanding the distribution of data visually. Implement the `generate_histogram` function to meet the criteria above and display the histogram. ```python def generate_histogram(data): Create and display a histogram for a given list of data, with appropriate labels and title. Args: data (list): A list of numerical values to plot in the histogram. pass ```","solution":"import matplotlib.pyplot as plt def generate_histogram(data): Create and display a histogram for a given list of data, with appropriate labels and title. Args: data (list): A list of numerical values to plot in the histogram. plt.hist(data, bins=range(min(data), max(data) + 2), edgecolor=\'black\') plt.xlabel(\\"Value\\") plt.ylabel(\\"Frequency\\") plt.title(\\"Histogram of Data\\") plt.tight_layout() plt.show()"},{"question":"You are tasked with writing a function called `sum_numeric_values` that processes a list of mixed data types and returns the sum of all numeric values within the list. The list may contain integers, floats, strings, and other types. Here\'s the signature of the function you need to implement: ```python def sum_numeric_values(data): pass ``` **Function Signature:** - `sum_numeric_values(data)`: - `data`: A list containing mixed data types. Your function should: - Iterate through each element in the list. - Check if the element is of a numeric type (int or float). - Sum all numeric elements and return the total. **Example Usage:** ```python data = [1, \'apple\', 3.5, \'42\', -1, 2.75, \'banana\'] result = sum_numeric_values(data) ``` The function would sum the numeric values `1`, `3.5`, `-1`, and `2.75`, returning a total of `6.25`. **Constraints:** - You can assume that the list will contain no nested lists. - Handle both integers and floats, but ignore strings that represent numbers (i.e., do not convert \'42\' into a number).","solution":"def sum_numeric_values(data): Sums all numeric values (int and float) within the list \'data\'. Parameters: - data: a list containing mixed data types Returns: - Sum of all numeric values within the list total = 0.0 for item in data: if isinstance(item, (int, float)): total += item return total"},{"question":"You are tasked with writing a Python function to process weather data from a local CSV file and generate a summary report. The CSV file contains daily weather records with columns such as `date`, `temperature`, `humidity`, and `precipitation`. The function should calculate the average temperature, average humidity, and total precipitation for a specified date range and save the result as a new CSV file. Function Signature ```python def generate_weather_report(start_date: str, end_date: str, input_csv: str = \\"../data/weather_data.csv\\", output_csv: str = \\"../data/weather_summary.csv\\") -> None: Generates a summary report of weather data within a given date range. :param start_date: The starting date for the summary report, formatted as \'YYYY-MM-DD\'. :param end_date: The ending date for the summary report, formatted as \'YYYY-MM-DD\'. :param input_csv: The file path to a CSV file containing daily weather records. :param output_csv: The file path where the summary report will be saved as a CSV file. :return: None ``` Input 1. `start_date` (str): The starting date for the summary report (format: \'YYYY-MM-DD\'). 2. `end_date` (str): The ending date for the summary report (format: \'YYYY-MM-DD\'). 3. `input_csv` (str): Path to a CSV file that contains daily weather records. 4. `output_csv` (str): Path on the local machine to save the summary report as a CSV file. Output - The function does not return anything. - It saves the summary report as a CSV file at the specified path `output_csv`. Requirements Use the `pandas` library to process the CSV data. Here are the specific steps you need to follow: 1. Read the input CSV file using `pandas.read_csv`. 2. Filter the data for the specified date range using the `start_date` and `end_date`. 3. Calculate the average temperature, average humidity, and total precipitation for the filtered data. 4. Create a new DataFrame to hold the summary statistics. 5. Save the summary DataFrame as a CSV file at the specified `output_csv` path. Example Suppose the `input_csv` contains: ```csv date,temperature,humidity,precipitation 2022-01-01,30.5,75,0.2 2022-01-02,28.0,70,0.0 2022-01-03,32.1,80,0.1 2022-01-04,35.2,65,0.0 2022-01-05,33.5,72,0.3 ``` When calling: ```python generate_weather_report(\\"2022-01-01\\", \\"2022-01-03\\", \\"../data/weather_data.csv\\", \\"../data/weather_summary.csv\\") ``` The function should generate a summary report containing: ```csv average_temperature,average_humidity,total_precipitation 30.2,75.0,0.3 ``` and save it to the specified CSV file.","solution":"import pandas as pd def generate_weather_report(start_date: str, end_date: str, input_csv: str = \\"../data/weather_data.csv\\", output_csv: str = \\"../data/weather_summary.csv\\") -> None: Generates a summary report of weather data within a given date range. :param start_date: The starting date for the summary report, formatted as \'YYYY-MM-DD\'. :param end_date: The ending date for the summary report, formatted as \'YYYY-MM-DD\'. :param input_csv: The file path to a CSV file containing daily weather records. :param output_csv: The file path where the summary report will be saved as a CSV file. :return: None # Load the weather data df = pd.read_csv(input_csv) # Convert the date column to datetime format df[\'date\'] = pd.to_datetime(df[\'date\']) # Filter the data for the specified date range mask = (df[\'date\'] >= start_date) & (df[\'date\'] <= end_date) filtered_df = df.loc[mask] # Calculate summary statistics average_temperature = filtered_df[\'temperature\'].mean() average_humidity = filtered_df[\'humidity\'].mean() total_precipitation = filtered_df[\'precipitation\'].sum() # Create a summary DataFrame summary_df = pd.DataFrame({ \'average_temperature\': [average_temperature], \'average_humidity\': [average_humidity], \'total_precipitation\': [total_precipitation] }) # Save the summary DataFrame to a CSV file summary_df.to_csv(output_csv, index=False)"},{"question":"# Implement a Simple Inventory System You are tasked with writing a Python function `inventory_system(commands)` that will simulate a simplified inventory management system. The function should: 1. Take a list of string commands as the input, where each command manipulates the inventory. 2. Support the following commands: - `\\"add <item>\\"`: Adds an item to the inventory. If the item already exists, do nothing. - `\\"remove <item>\\"`: Removes an item from the inventory. If the item does not exist, do nothing. - `\\"check <item>\\"`: Returns `True` if the item is in the inventory, and `False` otherwise. - `\\"list\\"`: Returns a sorted list of all items currently in the inventory. 3. Return the appropriate results for `\\"check <item>\\"` and `\\"list\\"` commands, and `None` for `\\"add <item>\\"` and `\\"remove <item>\\"`. The function signature should be: ```python def inventory_system(commands: List[str]) -> Union[None, bool, List[str]]: pass ``` # Example: ```python commands = [ \\"add apple\\", \\"add banana\\", \\"check apple\\", \\"remove apple\\", \\"check apple\\", \\"list\\" ] result = inventory_system(commands) ``` Output: ``` None None True None False [\'banana\'] ``` # Constraints: - Assume item names are case-sensitive and do not contain spaces. - The maximum length of the `commands` list will not exceed 1000. - Use appropriate data structures to ensure efficient command execution.","solution":"def inventory_system(commands): inventory = set() results = [] for command in commands: parts = command.split() action = parts[0] if action == \\"add\\": item = parts[1] inventory.add(item) results.append(None) elif action == \\"remove\\": item = parts[1] inventory.discard(item) results.append(None) elif action == \\"check\\": item = parts[1] results.append(item in inventory) elif action == \\"list\\": results.append(sorted(inventory)) return results"},{"question":"Implement a function that simulates a basic text-based adventure game in which the player navigates through a series of rooms in a house. Each room has a description and a set of possible actions. The player can move between rooms by specifying their desired action. # Task Implement a function named `play_game` that takes no parameters and outputs the journey of the player through the house. # Scenario The house has the following rooms: \'Kitchen\', \'Living Room\', \'Bathroom\', and \'Bedroom\'. The player\'s journey starts in the \'Living Room\'. Each room has two possible actions associated with it, given below: 1. \'Living Room\': - go to \'Kitchen\' - go to \'Bathroom\' 2. \'Kitchen\': - go to \'Bedroom\' - go back to \'Living Room\' 3. \'Bathroom\': - go back to \'Living Room\' - go to \'Bedroom\' 4. \'Bedroom\': - go back to \'Kitchen\' - go back to \'Bathroom\' Each action leads to a printed description of the result, and at any point, the player can choose to \\"exit\\" to end the game. # Function Behavior 1. Print the description of the current room. 2. Print the possible actions. 3. Ask the player for their action and update the current room accordingly. 4. Continue this process until the player chooses to \\"exit\\". # Example If the player starts in the \'Living Room\', the function should output: ``` You are in the Living Room. Possible actions: 1. go to Kitchen 2. go to Bathroom 3. exit What do you want to do? 1 You are in the Kitchen. Possible actions: 1. go to Bedroom 2. go back to Living Room 3. exit What do you want to do? 3 You exited the game. ``` # Constraints - Assume valid inputs for simplicity (1, 2, or 3). - Use clear and user-friendly print statements. - You can assume the player will always take valid actions within the game context. Function Signature: ```python def play_game() -> None: ``` Make sure the function interacts with the user through standard input and output.","solution":"def play_game(): This function simulates a text-based adventure game where a player navigates through rooms in a house. rooms = { \'Living Room\': [(\'go to Kitchen\', \'Kitchen\'), (\'go to Bathroom\', \'Bathroom\')], \'Kitchen\': [(\'go to Bedroom\', \'Bedroom\'), (\'go back to Living Room\', \'Living Room\')], \'Bathroom\': [(\'go back to Living Room\', \'Living Room\'), (\'go to Bedroom\', \'Bedroom\')], \'Bedroom\': [(\'go back to Kitchen\', \'Kitchen\'), (\'go back to Bathroom\', \'Bathroom\')] } current_room = \'Living Room\' while True: print(f\\"nYou are in the {current_room}.\\") print(\\"Possible actions:\\") for index, (description, _) in enumerate(rooms[current_room], 1): print(f\\"{index}. {description}\\") print(f\\"{index + 1}. exit\\") action = input(\\"What do you want to do? \\").strip() if action.isdigit(): action = int(action) if action == len(rooms[current_room]) + 1: print(\\"You exited the game.\\") break elif 1 <= action <= len(rooms[current_room]): _, next_room = rooms[current_room][action - 1] current_room = next_room else: print(\\"Invalid action number. Please choose a valid action.\\") else: print(\\"Invalid input. Please enter the number corresponding to your choice.\\")"},{"question":"Write a function, `unique_alternatives`, that computes all unique permutations of a given list of integers with potential duplicates, and returns them sorted in lexicographical order. Function Signature: ```python def unique_alternatives(nums): Generate all unique permutations of a list of integers with duplicates. Parameters ---------- nums : list of int The list of integers which may contain duplicates. Returns ------- permutations : list of list of int A list of unique permutations, each permutation is a list of integers. The permutations are sorted in lexicographical order. ``` # Explanation: - **nums**: A list of integers that may include duplicates. # Requirements: - You may use the `itertools.permutations` library, but ensure that duplicates are handled and only unique permutations are returned. - The result should be sorted in lexicographical order. # Example: ```python nums = [1, 1, 2] print(unique_alternatives(nums)) # Output: [[1, 1, 2], [1, 2, 1], [2, 1, 1]] nums = [3, 3, 0] print(unique_alternatives(nums)) # Output: [[0, 3, 3], [3, 0, 3], [3, 3, 0]] ``` - The function should generate all permutations and ensure no duplicate permutations are included. # Constraints: - The input list can have up to 8 integers. - Handling duplicates properly is crucial for efficiency and correctness.","solution":"from itertools import permutations def unique_alternatives(nums): Generate all unique permutations of a list of integers with duplicates. Parameters ---------- nums : list of int The list of integers which may contain duplicates. Returns ------- permutations : list of list of int A list of unique permutations, each permutation is a list of integers. The permutations are sorted in lexicographical order. unique_perms = set(permutations(nums)) sorted_perms = sorted(unique_perms) return [list(perm) for perm in sorted_perms]"},{"question":"Write a function called `merge_sorted_lists` that merges two sorted lists of integers into one sorted list. The function should maintain the sorted order of the elements in the combined list. You are not allowed to use built-in sorting functions. The function should accept two parameters: 1. `list1` (List[int]): The first sorted list. 2. `list2` (List[int]): The second sorted list. The function should return a new list that contains all the elements from `list1` and `list2`, sorted in ascending order. **Function Signature:** ```python def merge_sorted_lists(list1: List[int], list2: List[int]) -> List[int]: ``` # Example ```python # Example 1 print(merge_sorted_lists([1, 3, 5], [2, 4, 6])) # Output: [1, 2, 3, 4, 5, 6] # Example 2 print(merge_sorted_lists([0, 10, 20], [5, 15, 25])) # Output: [0, 5, 10, 15, 20, 25] ``` **Constraints:** - The input lists `list1` and `list2` are already sorted in non-decreasing order. - The length of each list can be zero or more, but the combined length will not exceed 100. # Educational Objective This problem will help you understand how to merge two sorted lists efficiently and maintain the sorted order without using built-in sorting functions. This is a fundamental concept in understanding algorithms related to merging and sorting.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list. merged_list = [] i, j = 0, 0 # Traverse both lists and append smaller element to the merged list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements of list1, if any while i < len(list1): merged_list.append(list1[i]) i += 1 # Append remaining elements of list2, if any while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list # Example usage: # print(merge_sorted_lists([1, 3, 5], [2, 4, 6])) # Output: [1, 2, 3, 4, 5, 6] # print(merge_sorted_lists([0, 10, 20], [5, 15, 25])) # Output: [0, 5, 10, 15, 20, 25]"},{"question":"Write a function called `merge_and_sort_lists` that takes two lists of integers as input and returns a single list that contains all the integers from both lists, sorted in ascending order. Your task is to: 1. Write a helper function called `merge_lists` that merges two lists into one. 2. Write another helper function called `sort_list` that sorts a list of integers in ascending order. 3. Use these helper functions within the main function `merge_and_sort_lists` to achieve the desired output. The function `merge_and_sort_lists` should have the following structure: ```python def merge_lists(list1, list2): pass def sort_list(lst): pass def merge_and_sort_lists(list1, list2): pass ``` # Examples Example 1: ```python list1 = [4, 2, 7] list2 = [5, 9, 1, 3] print(merge_and_sort_lists(list1, list2)) # Output: [1, 2, 3, 4, 5, 7, 9] ``` Example 2: ```python list1 = [10, 8] list2 = [7, 4, 6] print(merge_and_sort_lists(list1, list2)) # Output: [4, 6, 7, 8, 10] ``` Ensure that: - The `merge_lists` function combines the two input lists without filtering or removing any elements. - The `sort_list` function sorts the combined list in ascending order. - The `merge_and_sort_lists` function leverages both helper functions to produce the final output.","solution":"def merge_lists(list1, list2): Merges two lists into one. return list1 + list2 def sort_list(lst): Sorts a list of integers in ascending order. return sorted(lst) def merge_and_sort_lists(list1, list2): Merges two lists and sorts the resulting list in ascending order. merged_list = merge_lists(list1, list2) sorted_list = sort_list(merged_list) return sorted_list"},{"question":"You are given a list of integers representing daily temperatures. Create a function that returns a list where the value at each index is the number of days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. The function should output with: List[int]: A list of integers representing the number of days to wait until a warmer temperature. You should write self-contained code starting with: ``` def daily_temperatures(temperatures): ```","solution":"def daily_temperatures(temperatures): Given a list of integers representing daily temperatures, this function returns a list where the value at each index is the number of days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. :param temperatures: List[int] - Input list of daily temperatures. :return: List[int] - Output list with days to wait until a warmer temperature. n = len(temperatures) answer = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: idx = stack.pop() answer[idx] = i - idx stack.append(i) return answer"},{"question":"You are required to implement a function in Python that simulates a simplified version of a warehouse inventory management system. The system should support the addition, removal, and querying of inventory items. Each item in the inventory will have a unique identifier (ID), a name, and a quantity. Create a function named `warehouseInventory(commands)`, where: - `commands` is a list of strings, where each string represents an operation to be performed on the inventory. The possible operations are: - `\\"ADD id name quantity\\"`: Adds a new item or increases the quantity of an existing item in the inventory. `id` is the item identifier, `name` is the item name, and `quantity` is the number of items to add. - `\\"REMOVE id quantity\\"`: Reduces the quantity of the item with the given `id` by the specified `quantity`. If the `quantity` to be removed exceeds the current quantity, remove the item completely. - `\\"QUERY id\\"`: Returns the name and current quantity of the item with the given `id` in the format `\\"name: quantity\\"`. The function should: 1. Handle the operations in the order they appear in the `commands` list. 2. Maintain the inventory in a suitable data structure that can efficiently support addition, removal, and querying. 3. Return a list of results corresponding to the \\"QUERY\\" operations in the order they were received. If an item does not exist for a \\"QUERY\\", return `\\"Item not found\\"`. Here\'s an example of how the function should be structured: ```python def warehouseInventory(commands): pass ``` Example input and output: ```python commands = [\\"ADD 1 Widget 10\\", \\"ADD 2 Gadget 5\\", \\"REMOVE 1 3\\", \\"QUERY 1\\", \\"QUERY 2\\", \\"REMOVE 2 5\\", \\"QUERY 2\\"] print(warehouseInventory(commands)) # Output: [\\"Widget: 7\\", \\"Gadget: 5\\", \\"Item not found\\"] ```","solution":"def warehouseInventory(commands): Simulates a simplified warehouse inventory management system based on provided commands. Parameters: commands (list of str): List of strings representing the operations to be performed. Returns: list of str: Results corresponding to the \\"QUERY\\" operations in the order they were received. inventory = {} results = [] for command in commands: parts = command.split() if parts[0] == \\"ADD\\": id = parts[1] name = parts[2] quantity = int(parts[3]) if id in inventory: inventory[id][\'quantity\'] += quantity else: inventory[id] = {\'name\': name, \'quantity\': quantity} elif parts[0] == \\"REMOVE\\": id = parts[1] quantity = int(parts[2]) if id in inventory: if inventory[id][\'quantity\'] <= quantity: del inventory[id] else: inventory[id][\'quantity\'] -= quantity elif parts[0] == \\"QUERY\\": id = parts[1] if id in inventory: results.append(f\\"{inventory[id][\'name\']}: {inventory[id][\'quantity\']}\\") else: results.append(\\"Item not found\\") return results"},{"question":"You are required to write a function called `process_temperature_data` that takes a string parameter `filepath`, and reads a CSV file containing daily temperature records. The function should perform the following tasks: 1. Read the CSV file into a pandas DataFrame. 2. Parse the `Date` column to datetime format. 3. Filter the DataFrame to include only the rows where the `Temperature` is above 20 degrees Celsius. 4. Return a DataFrame with only the columns \\"Date\\", \\"Location\\", and \\"Temperature\\" in that order. The CSV file is encoded in `utf-8`. Function Signature: ```python def process_temperature_data(filepath: str) -> pd.DataFrame: pass ``` Example: Suppose the CSV file `temperature_data.csv` contains the following records: | Date | Location | Temperature | |------------|----------|-------------| | 2023-01-01 | CityA | 18 | | 2023-01-02 | CityB | 22 | | 2023-01-03 | CityC | 25 | Calling your function like this: ```python df = process_temperature_data(\\"temperature_data.csv\\") print(df) ``` Should produce the following output: | Date | Location | Temperature | |------------|----------|-------------| | 2023-01-02 | CityB | 22 | | 2023-01-03 | CityC | 25 | Required Libraries: - `pandas`","solution":"import pandas as pd def process_temperature_data(filepath: str) -> pd.DataFrame: Reads a CSV file containing daily temperature records, filters by temperature above 20 degrees, and returns a DataFrame with specific columns. Parameters: filepath (str): The path to the CSV file. Returns: pd.DataFrame: Filtered DataFrame with columns \\"Date\\", \\"Location\\", and \\"Temperature\\". # Read CSV file into DataFrame df = pd.read_csv(filepath, encoding=\'utf-8\') # Parse the \'Date\' column to datetime format df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Filter for temperatures above 20 degrees df_filtered = df[df[\'Temperature\'] > 20] # Select and return the required columns return df_filtered[[\'Date\', \'Location\', \'Temperature\']]"},{"question":"You are required to create a class that models a simple online auction system. The class should be named `Auction` and must include the following methods: 1. `__init__` which initializes the auction with an item name (string), starting price (float), and an empty list of bids. 2. `place_bid` which takes two arguments: `bidder_name` (string) and `bid_amount` (float). It should add a tuple `(bidder_name, bid_amount)` to the list of bids only if `bid_amount` is higher than the current highest bid in the auction. If the bid is not higher, it should raise a `ValueError` with the message \\"Bid is too low.\\" 3. `get_highest_bid` which returns a tuple `(bidder_name, bid_amount)` representing the highest bid. If no bids have been placed, it should return `None`. 4. `get_all_bids` which returns the list of all bids as tuples, sorted in descending order by amount. You should also ensure appropriate error handling for invalid bid inputs and operations. Example: ```python auction = Auction(\\"Antique Vase\\", 100.0) auction.place_bid(\\"Alice\\", 150.0) auction.place_bid(\\"Bob\\", 200.0) print(auction.get_highest_bid()) # Output: (\\"Bob\\", 200.0) print(auction.get_all_bids()) # Output: [(\\"Bob\\", 200.0), (\\"Alice\\", 150.0)] ``` Class Signature: ```python class Auction: def __init__(self, item_name: str, starting_price: float): pass def place_bid(self, bidder_name: str, bid_amount: float): pass def get_highest_bid(self) -> (str, float): pass def get_all_bids(self) -> list: pass ```","solution":"class Auction: def __init__(self, item_name: str, starting_price: float): self.item_name = item_name self.starting_price = starting_price self.bids = [] def place_bid(self, bidder_name: str, bid_amount: float): if not self.bids and bid_amount >= self.starting_price: self.bids.append((bidder_name, bid_amount)) elif self.bids and bid_amount > self.bids[-1][1]: self.bids.append((bidder_name, bid_amount)) else: raise ValueError(\\"Bid is too low\\") def get_highest_bid(self) -> (str, float): if not self.bids: return None return self.bids[-1] def get_all_bids(self) -> list: return sorted(self.bids, key=lambda x: x[1], reverse=True)"},{"question":"You are asked to create a function that processes employee attendance logs stored in a CSV file and calculates the number of hours worked by each employee in a given month. The function `calculate_hours` should read attendance data from a CSV file named `\\"attendance.csv\\"` and return the total number of hours worked by each employee in the specified month. # Requirements: 1. **Input**: - A CSV file named `\\"attendance.csv\\"` with a structure similar to: ```csv employee_id,date,time_in,time_out 1,2023-08-01,09:00,17:00 1,2023-08-02,09:15,17:15 2,2023-08-01,09:30,18:00 // more attendance records... ``` - A `month` string in the format `\\"YYYY-MM\\"` to specify the month for which the hours should be calculated. 2. **Output**: A dictionary where keys are employee IDs and values are the total hours worked by that employee in the specified month. # Function Signature: ```python def calculate_hours(month: str) -> dict: pass ``` # Instructions: 1. Use the `csv` module to read the attendance data from the CSV file. 2. Parse the `date` column to filter records that belong to the specified month. 3. Calculate the difference between `time_out` and `time_in` for each record to determine the hours worked. 4. Sum the hours worked for each employee over the specified month. 5. Return a dictionary where keys are employee IDs and values are the total hours worked. # Example: Assuming the CSV file has the following content and the specified month is `\\"2023-08\\"`: ```csv employee_id,date,time_in,time_out 1,2023-08-01,09:00,17:00 1,2023-08-02,09:15,17:15 2,2023-08-01,09:30,18:00 2,2023-07-31,08:00,16:00 ``` The function output should be: ```python { 1: 16.25, 2: 8.5 } ``` # Constraints: - You can assume that the CSV file is always present and readable. - Times are provided in 24-hour format. - The date filtering should accurately consider the specified month and year.","solution":"import csv from datetime import datetime def calculate_hours(month: str) -> dict: Calculates the total hours worked by each employee for the specified month. Args: - month (str): The month in the format \'YYYY-MM\'. Returns: - dict: A dictionary with employee IDs as keys and total hours worked as values. hours_worked = {} with open(\'attendance.csv\', newline=\'\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: date = row[\'date\'] if date.startswith(month): employee_id = int(row[\'employee_id\']) time_in = datetime.strptime(row[\'time_in\'], \'%H:%M\') time_out = datetime.strptime(row[\'time_out\'], \'%H:%M\') hours = (time_out - time_in).seconds / 3600.0 if employee_id in hours_worked: hours_worked[employee_id] += hours else: hours_worked[employee_id] = hours return hours_worked"},{"question":"You are required to create a Python function that implements the Principal Component Analysis (PCA) on a given dataset and plots the explained variance ratio of each principal component. This exercise aims to understand the usage of `PCA` from the sklearn library and `bar` plot from matplotlib. **Function Name:** ```python def plot_pca_explained_variance(X): # Implementation to be defined here ``` **Parameters:** - `X (array-like)`: The input feature matrix of shape (n_samples, n_features). **Instructions:** 1. Import the necessary libraries: `numpy`, `sklearn.decomposition.PCA`, and `matplotlib.pyplot`. 2. Initialize a `PCA` instance and fit it to the data. 3. Retrieve the explained variance ratio of each principal component. 4. Plot the explained variance ratio using a bar chart. Use `matplotlib.pyplot.show` to display the plot. **Plot Requirements:** - Title: \\"Explained Variance Ratio by Principal Component\\" - X-axis label: \\"Principal Component\\" - Y-axis label: \\"Explained Variance Ratio\\" Here is a scaffold of the function to guide your implementation: ```python def plot_pca_explained_variance(X): import numpy as np from sklearn.decomposition import PCA import matplotlib.pyplot as plt # Initialize PCA and fit the data pca = PCA() pca.fit(X) # Retrieve the explained variance ratio explained_variance_ratio = pca.explained_variance_ratio_ # Generate bar plot plt.figure(figsize=(8,6)) plt.bar(range(1, len(explained_variance_ratio) + 1), explained_variance_ratio, alpha=0.7, align=\'center\') plt.title(\'Explained Variance Ratio by Principal Component\') plt.xlabel(\'Principal Component\') plt.ylabel(\'Explained Variance Ratio\') plt.show() ```","solution":"def plot_pca_explained_variance(X): import numpy as np from sklearn.decomposition import PCA import matplotlib.pyplot as plt # Initialize PCA and fit the data pca = PCA() pca.fit(X) # Retrieve the explained variance ratio explained_variance_ratio = pca.explained_variance_ratio_ # Generate bar plot plt.figure(figsize=(8,6)) plt.bar(range(1, len(explained_variance_ratio) + 1), explained_variance_ratio, alpha=0.7, align=\'center\') plt.title(\'Explained Variance Ratio by Principal Component\') plt.xlabel(\'Principal Component\') plt.ylabel(\'Explained Variance Ratio\') plt.show()"},{"question":"You are tasked with designing a function to perform k-means clustering using a naive implementation (with loops). This function will help in understanding the intuition behind this unsupervised learning algorithm, focusing on computational steps involved in adjusting centroids and assigning data points to clusters. The function `kmeans_naive(X, k, num_iters)` computes the cluster centroids and the assignments of each point to one of the clusters. The function signature is as follows: ```python def kmeans_naive(X, k, num_iters): K-means clustering, naive implementation (with loops). Parameters: - X: A numpy array of shape (N, D) containing a dataset with N samples, each with D features. - k: An integer indicating the number of clusters. - num_iters: An integer indicating the number of iterations for the algorithm to run. Returns: - A tuple of: - centroids: A numpy array of shape (k, D) containing the cluster centroids. - labels: A numpy array of shape (N,) containing the cluster assignment for each data point. pass ``` # Inputs: - **X**: A numpy array of shape `(N, D)` containing the dataset with `N` samples and `D` features. - **k**: An integer indicating the number of clusters. - **num_iters**: An integer indicating the number of iterations for the algorithm to run. # Outputs: - **centroids**: A numpy array of shape `(k, D)` containing the cluster centroids. - **labels**: A numpy array of shape `(N,)` containing the cluster assignment for each data point. # Requirements: 1. Use explicit loops to compute the distance between points and centroids. 2. Use loops to update centroids based on cluster assignments. 3. Recompute cluster assignments and update centroids iteratively for `num_iters` iterations. # Example: Given the following inputs: ```python X = np.array([[1.0, 2.0], [3.0, 3.0], [3.0, 4.0], [5.0, 7.0]]) k = 2 num_iters = 10 ``` Calling `kmeans_naive(X, k, num_iters)` should return the final centroids and the cluster assignments. # Constraints: - Do not use any advanced numpy functions for distance calculations or clustering. Focus on basic arithmetic and loops. - All computations should be done using explicit loops.","solution":"import numpy as np def kmeans_naive(X, k, num_iters): K-means clustering, naive implementation (with loops). Parameters: - X: A numpy array of shape (N, D) containing a dataset with N samples, each with D features. - k: An integer indicating the number of clusters. - num_iters: An integer indicating the number of iterations for the algorithm to run. Returns: - A tuple of: - centroids: A numpy array of shape (k, D) containing the cluster centroids. - labels: A numpy array of shape (N,) containing the cluster assignment for each data point. np.random.seed(42) N, D = X.shape centroids = X[np.random.choice(N, k, replace=False)] labels = np.zeros(N, dtype=int) for _ in range(num_iters): # Step 1: Assign labels based on closest centroid for i in range(N): min_dist = float(\'inf\') for j in range(k): dist = np.sum((X[i] - centroids[j]) ** 2) if dist < min_dist: min_dist = dist labels[i] = j # Step 2: Update centroids new_centroids = np.zeros((k, D)) counts = np.zeros(k) for i in range(N): new_centroids[labels[i]] += X[i] counts[labels[i]] += 1 for j in range(k): if counts[j] > 0: new_centroids[j] /= counts[j] centroids = new_centroids return centroids, labels"},{"question":"Write a function named `count_unique_words()` that reads a given text file, counts the frequency of each unique word in the file, and returns a dictionary with words as keys and their respective counts as values. For the purpose of this task, a word is defined as a sequence of alphabetic characters, and words are case-insensitive (e.g., \\"Apple\\" and \\"apple\\" are considered the same word). Specific requirements: 1. **File Reading**: Use the `open()` function to read the contents of a text file. 2. **Word Extraction**: Extract words using regular expressions to ensure only alphabetic characters are considered. Convert words to lower case to handle case-insensitivity. 3. **Counting**: Use a dictionary to keep track of the word frequencies. 4. **Return Value**: Return the dictionary where the keys are words and values are their counts. Your `count_unique_words()` function should take one parameter `filename`, which is the name of the text file to read. Below is a usage example: if the content of `example.txt` is \\"Hello world! Hello Python.\\", the function should return `{\'hello\': 2, \'world\': 1, \'python\': 1}`.","solution":"import re from collections import defaultdict def count_unique_words(filename): Reads a given text file, counts the frequency of each unique word (case-insensitive), and returns a dictionary with words as keys and their respective counts as values. Parameters: filename (str): The name of the text file to read. Returns: dict: Dictionary where keys are unique words and values are their counts. word_count = defaultdict(int) with open(filename, \'r\', encoding=\'utf-8\') as file: text = file.read() # Extract words using regex and convert to lowercase words = re.findall(r\'b[a-zA-Z]+b\', text.lower()) for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"Create a function called `replace_words` that replaces words in a given text according to a dictionary of replacements. The function should take two parameters: a string `text` and a dictionary `replacements`. The keys in the dictionary represent words that should be found in the text and replaced with the corresponding values. The function should return the modified version of the text with all replacements applied. The function should have the following signature: ```python def replace_words(text: str, replacements: dict) -> str: pass ``` # Example Usage: ```python text = \\"The quick brown fox jumped over the lazy dog\\" replacements = { \\"quick\\": \\"slow\\", \\"fox\\": \\"cat\\", \\"lazy\\": \\"energetic\\" } modified_text = replace_words(text, replacements) print(modified_text) # Output: \\"The slow brown cat jumped over the energetic dog\\" ``` # Constraints: - Only replace whole words, ensuring that partial matches are not replaced. For example, if the text contains \\"foxes\\" and the replacements include \\"fox\\", \\"foxes\\" should not be modified. - Replacement is case-sensitive; \\"Quick\\" would not be replaced with \\"slow\\". - You can assume that all words in the text are separated by spaces and contain no punctuation.","solution":"def replace_words(text: str, replacements: dict) -> str: words = text.split() for i, word in enumerate(words): if word in replacements: words[i] = replacements[word] return \' \'.join(words)"},{"question":"You need to write a Python function `dictionary_filter(dictionaries, key, threshold)` that filters a list of dictionaries based on a specified key-value criterion. Each dictionary in the list contains several key-value pairs, and your function should return a new list containing only the dictionaries where the value associated with the specified key is greater than or equal to the given threshold. # Detailed Instructions: - **Function Name**: `dictionary_filter` - **Parameters**: - `dictionaries` (list of dict): The list of dictionaries to be filtered. - `key` (str): The key whose associated values will be used to filter the dictionaries. - `threshold` (int or float): The threshold value for the filtering criterion. # Constraints: - The value associated with the specified key in each dictionary will always be an integer or a float. - The key will be present in all dictionaries. - The input list may contain zero or more dictionaries. - Ensure that the order of dictionaries in the output list matches their order in the input list. # Example: Suppose you have the following list of dictionaries: ```python dictionaries = [ {\'name\': \'apple\', \'price\': 10, \'quantity\': 15}, {\'name\': \'banana\', \'price\': 5, \'quantity\': 30}, {\'name\': \'cherry\', \'price\': 15, \'quantity\': 10}, ] ``` Calling `dictionary_filter(dictionaries, \'price\', 10)` should return: ```python [ {\'name\': \'apple\', \'price\': 10, \'quantity\': 15}, {\'name\': \'cherry\', \'price\': 15, \'quantity\': 10}, ] ``` Another example with a different threshold: ```python dictionary_filter(dictionaries, \'quantity\', 20) ``` Should return: ```python [ {\'name\': \'banana\', \'price\': 5, \'quantity\': 30} ] ```","solution":"def dictionary_filter(dictionaries, key, threshold): Filters a list of dictionaries based on a specified key-value criterion. Parameters: dictionaries (list of dict): The list of dictionaries to be filtered. key (str): The key whose associated values will be used to filter the dictionaries. threshold (int or float): The threshold value for the filtering criterion. Returns: list of dict: A new list containing only the dictionaries where the value associated with the specified key is greater than or equal to the threshold. return [d for d in dictionaries if d[key] >= threshold]"},{"question":"You are tasked with creating a function that finds the common elements between two symbolic sets and prints the resulting set in a human-readable, pretty-printed format using the `sympy.pprint` library. Write a function named `common_elements(set1, set2)` that: 1. Takes two parameters, `set1` and `set2`, which are symbolic sets. 2. Computes the intersection of these two sets. 3. Uses the `sympy.pprint` function to print the result in a readable, pretty-printed format. Assume that `set1` and `set2` are always valid symbolic sets. The use of the `sympy.pprint` library is mandatory for the pretty-printing of the result. You are required to: - Import the necessary components from `sympy`. - Use appropriate `sympy` functions to handle symbolic sets and perform the required tasks. - Ensure that the result is formatted in a way that is easy to understand. # Example Usage Given the following sets: ```python from sympy import FiniteSet set1 = FiniteSet(1, 2, 3, 4) set2 = FiniteSet(3, 4, 5, 6) ``` Calling `common_elements(set1, set2)` should compute the intersection `{3, 4}` and print: ``` {3, 4} ``` in a pretty-printed format.","solution":"from sympy import FiniteSet, pprint def common_elements(set1, set2): Finds the common elements between two symbolic sets and prints the result in a pretty-printed format. intersection = set1 & set2 pprint(intersection)"},{"question":"You are given sales data from an online store, including the order ID, purchase date, and the order amount. Your task is to visualize this data by plotting the total sales amount per month using a bar chart. # Function Details - **Function Name**: `plot_monthly_sales` - **Input**: A Pandas DataFrame `data` that contains the following columns: - `\\"OrderID\\"`: A unique identifier for each order. - `\\"OrderDate\\"`: The date the order was placed, formatted as a string in the `\\"yyyy-mm-dd\\"` format. - `\\"Amount\\"`: The total amount for the order, as a float. - **Output**: The function should display a bar chart using Matplotlib that shows the total sales amount for each month. # Specifications 1. Convert the column `\\"OrderDate\\"` to datetime format. 2. Group the data by month and calculate the total sales amount for each month. 3. Use Matplotlib\'s `pyplot.bar` to generate the bar chart. 4. The x-axis should be labeled with the month names. 5. The y-axis should represent the total sales amount. 6. The title of the chart should be \\"Monthly Sales Amount\\". # Example Given the following DataFrame: ```python import pandas as pd data = pd.DataFrame({ \\"OrderID\\": [1, 2, 3, 4, 5, 6, 7], \\"OrderDate\\": [\\"2022-01-15\\", \\"2022-02-20\\", \\"2022-02-25\\", \\"2022-03-10\\", \\"2022-03-15\\", \\"2022-04-05\\", \\"2022-04-10\\"], \\"Amount\\": [100.0, 150.0, 200.0, 120.0, 180.0, 160.0, 140.0] }) ``` Your function, when called as `plot_monthly_sales(data)`, should display a bar chart with: - X-axis labels as [\\"January\\", \\"February\\", \\"March\\", \\"April\\"] - Bars representing the total sales amount for each month. - The title of the chart should be \\"Monthly Sales Amount\\". You should use the following Matplotlib functions documented in the snippet provided: - `matplotlib.pyplot.bar` - `matplotlib.pyplot.xticks` - `matplotlib.pyplot.title` - `matplotlib.pyplot.show` Here is the relevant Matplotlib documentation: [Bar Chart Documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.bar.html)","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_monthly_sales(data): Plots a bar chart showing the total sales amount per month. Parameters: data (pd.DataFrame): DataFrame containing \'OrderID\', \'OrderDate\', and \'Amount\' columns. # 1. Convert the \'OrderDate\' column to datetime format data[\'OrderDate\'] = pd.to_datetime(data[\'OrderDate\']) # 2. Group the data by month and calculate total sales amount for each month data[\'Month\'] = data[\'OrderDate\'].dt.to_period(\'M\') monthly_sales = data.groupby(\'Month\')[\'Amount\'].sum() # 3. Use Matplotlib\'s bar to generate the bar chart plt.figure(figsize=(10, 5)) monthly_sales.index = monthly_sales.index.strftime(\'%B\') plt.bar(monthly_sales.index, monthly_sales.values) # 4. Label the x-axis with the month names plt.xticks(rotation=45) # 5. Label the y-axis with \'Total Sales Amount\' plt.ylabel(\'Total Sales Amount\') # 6. Add title \\"Monthly Sales Amount\\" plt.title(\'Monthly Sales Amount\') # 7. Display the plot plt.show()"},{"question":"You are developing a software that analyzes weather data and identifies trends. One of the tasks is to calculate the maximum temperature difference observed in a sequence of daily temperatures over a specified period. Your task is to write a function called `max_temperature_difference(temperatures)` that takes a list of integers representing daily temperatures and returns the maximum difference between any two temperatures in the list. Function Specification ```python def max_temperature_difference(temperatures): # Implementation here ``` - **Input**: - `temperatures`: A list of integers where each integer represents the temperature recorded on a specific day. - **Output**: - An integer representing the maximum difference between any two temperatures in the input list. # Example ```python temperatures = [30, 20, 25, 35, 10, 60] result = max_temperature_difference(temperatures) print(result) # Expected output: 50 ``` # Implementation Notes - The maximum difference is defined as the absolute difference between the maximum temperature and the minimum temperature in the list. - You can assume that the length of `temperatures` is at least 2. - Aim for an efficient solution with a linear pass through the list. # Solution Explanation - Identify the minimum and maximum temperatures in the list. - Compute the absolute difference between the maximum and minimum temperatures. - Return this difference as the result.","solution":"def max_temperature_difference(temperatures): Returns the maximum difference between any two temperatures in the list. if not temperatures or len(temperatures) < 2: raise ValueError(\\"At least two temperatures are required to calculate the difference.\\") max_temp = max(temperatures) min_temp = min(temperatures) return max_temp - min_temp"},{"question":"In this problem, you will write a function named `count_words_with_prefix` that will count the number of words in a list that start with a given prefix. The function should be case-insensitive. Your function `count_words_with_prefix` should take two parameters: - `words`: a list of strings representing words that need to be checked. - `prefix`: a string representing the prefix to be matched. The function should return an integer representing the count of words that start with the given prefix. Your implementation should be case-insensitive, meaning both uppercase and lowercase letters should be treated as the same. **Example:** ```python words = [\\"Hello\\", \\"holiday\\", \\"happy\\", \\"Helium\\", \\"Host\\", \\"hero\\", \\"Humor\\"] prefix = \\"ho\\" print(count_words_with_prefix(words, prefix)) ``` Should output: ``` 2 ``` In this example, \\"holiday\\" and \\"Host\\" are the words that start with the prefix \\"ho\\" (case-insensitive).","solution":"def count_words_with_prefix(words, prefix): Returns the count of words in the list that start with the given prefix in a case-insensitive manner. :param words: List of strings representing words to be checked :param prefix: The prefix string to be matched :return: Integer count of words that start with the given prefix prefix = prefix.lower() count = sum(1 for word in words if word.lower().startswith(prefix)) return count"},{"question":"In this problem, you will write a function called `climb_combinations` that calculates the number of unique ways to climb a staircase with a given number of steps, `n`. You can climb the staircase by taking steps of 1, 2, or 3 at a time. For instance, if `n` is 4, you have the following possible combinations to reach the top: - 1+1+1+1 - 1+1+2 - 1+2+1 - 2+1+1 - 2+2 - 1+3 - 3+1 Thus, the number of ways to climb a staircase with 4 steps is 7. The problem requires you to implement a function to compute the total number of unique ways to reach the top of a staircase of `n` steps. **Function Signature:** ```python def climb_combinations(n: int) -> int: pass ``` **Input:** - An integer `n` (1 ≤ n ≤ 30), which represents the total number of steps in the staircase. **Output:** - An integer representing the number of unique ways to reach the top of the staircase. **Example:** ```python assert climb_combinations(3) == 4 assert climb_combinations(4) == 7 ```","solution":"def climb_combinations(n: int) -> int: Calculates the number of unique ways to climb a staircase with `n` steps, where each step can be 1, 2, or 3 at a time. if n <= 0: return 0 elif n == 1: return 1 elif n == 2: return 2 elif n == 3: return 4 dp = [0] * (n + 1) dp[1], dp[2], dp[3] = 1, 2, 4 for i in range(4, n + 1): dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] return dp[n]"},{"question":"You are required to create a function named `generate_expense_report` that generates a monthly expense report from a list of transactions. The function should take a list of dictionaries as its parameter, where each dictionary represents a transaction. Each transaction dictionary contains three keys: `\'date\'` (a string in the format `\'YYYY-MM-DD\'`), `\'category\'` (a string representing the expense category), and `\'amount\'` (a float representing the transaction amount). The function should process these transactions and return a dictionary where the keys are the unique expense categories and the values are the total amount spent in each category for the month. The function should correctly handle cases where there are no transactions or all transactions are in the same category. **Example Function Call:** ```python transactions = [ {\'date\': \'2023-01-15\', \'category\': \'Food\', \'amount\': 12.5}, {\'date\': \'2023-01-18\', \'category\': \'Transport\', \'amount\': 7.8}, {\'date\': \'2023-01-20\', \'category\': \'Food\', \'amount\': 20.0}, ] expense_report = generate_expense_report(transactions) ``` **Expected Result:** ```python {\'Food\': 32.5, \'Transport\': 7.8} ``` **Requirements:** - The function should group the expenses by category and sum the amount spent in each category. - If there are no transactions, the function should return an empty dictionary. - Ensure that the function can handle multiple transactions of the same category efficiently. Here is a code snippet to help you start: ```python def generate_expense_report(transactions): expense_report = {} for transaction in transactions: category = transaction[\'category\'] amount = transaction[\'amount\'] if category in expense_report: expense_report[category] += amount else: expense_report[category] = amount return expense_report ```","solution":"def generate_expense_report(transactions): Generates a monthly expense report from a list of transactions. Parameters: transactions (list): A list of dictionaries where each dictionary represents a transaction. Each transaction dictionary contains three keys: \'date\' (str), \'category\' (str), and \'amount\' (float). Returns: dict: A dictionary where keys are unique expense categories and values are the total amount spent in each category for the month. expense_report = {} for transaction in transactions: category = transaction[\'category\'] amount = transaction[\'amount\'] if category in expense_report: expense_report[category] += amount else: expense_report[category] = amount return expense_report"},{"question":"You are given a text file, `books_list.txt`, where each line represents a book with details including the title, author, year of publication, genre, and number of pages. The details on each line are separated by the \\"|\\" character. Write a function called `analyze_books` that takes the filename as a parameter and performs the following analyses: 1. **Total Number of Books**: Count the total number of books listed. 2. **Books by Genre**: Count the number of books per genre. 3. **Books Before Year 2000**: List out all books published before the year 2000 along with their authors. 4. **Average Number of Pages by Author**: Calculate the average number of pages for books written by each author. Your function should read the input text file and process the data to perform these tasks. Return the results in a dictionary with appropriately labeled keys for each analysis. The expected output dictionary should have the following structure: ```python { \\"total_books\\": <total number of books>, \\"books_by_genre\\": <Counter object with genre-wise counts>, \\"books_before_2000\\": [{\\"title\\": <book title>, \\"author\\": <author>} for each book before 2000], \\"average_pages_by_author\\": <dictionary with average page counts per author> } ``` **Note**: Assume that there is no missing data and each book entry is correctly formatted in the file.","solution":"import collections def analyze_books(filename): Function to analyze book data from a given file. Parameters: filename (str): The name of the text file containing book details. Returns: dict: A dictionary containing various analyses of the books. with open(filename, \'r\') as file: lines = file.readlines() total_books = 0 books_by_genre = collections.Counter() books_before_2000 = [] pages_by_author = collections.defaultdict(list) for line in lines: total_books += 1 title, author, year, genre, pages = line.strip().split(\'|\') year = int(year) pages = int(pages) books_by_genre[genre] += 1 if year < 2000: books_before_2000.append({\\"title\\": title, \\"author\\": author}) pages_by_author[author].append(pages) average_pages_by_author = {author: sum(pages) / len(pages) for author, pages in pages_by_author.items()} return { \\"total_books\\": total_books, \\"books_by_genre\\": books_by_genre, \\"books_before_2000\\": books_before_2000, \\"average_pages_by_author\\": average_pages_by_author }"},{"question":"Develop a function to analyze customer purchase data and derive key insights for a business. The function should calculate total expenditures per customer, identify top spenders, and visualize purchase distributions. Specifically, it should: - Calculate the total amount spent by each customer. - Identify the top 10% of customers by total spending. - Create a histogram showing the distribution of total expenditures among all customers. - Save the histogram as \'expenditure_distribution.png\'. The output of the function should be: dict: A dictionary containing: - \'total_expenditure\': a DataFrame with columns \'CustomerID\' and \'TotalSpent\' showing the total spending per customer. - \'top_spenders\': a DataFrame with columns \'CustomerID\' and \'TotalSpent\' for the top 10% of spenders. - \'histogram_file\': filename of the saved histogram image. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def analyze_purchases(df): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_purchases(df): Analyzes customer purchase data to derive key insights. Parameters: df (DataFrame): DataFrame with columns \'CustomerID\' and \'AmountSpent\'. Returns: dict: A dictionary containing: - \'total_expenditure\': a DataFrame with columns \'CustomerID\' and \'TotalSpent\' showing the total spending per customer. - \'top_spenders\': a DataFrame with columns \'CustomerID\' and \'TotalSpent\' for the top 10% of spenders. - \'histogram_file\': filename of the saved histogram image. # Calculate total amount spent by each customer total_expenditure = df.groupby(\'CustomerID\').sum().reset_index() total_expenditure.columns = [\'CustomerID\', \'TotalSpent\'] # Identify the top 10% of customers by total spending top_percentage = 0.10 threshold = total_expenditure[\'TotalSpent\'].quantile(1 - top_percentage) top_spenders = total_expenditure[total_expenditure[\'TotalSpent\'] >= threshold] # Create a histogram showing the distribution of total expenditures among all customers plt.figure(figsize=(10, 6)) plt.hist(total_expenditure[\'TotalSpent\'], bins=30, edgecolor=\'k\', alpha=0.7) plt.title(\'Distribution of Total Expenditures\') plt.xlabel(\'Total Spent\') plt.ylabel(\'Number of Customers\') histogram_file = \'expenditure_distribution.png\' plt.savefig(histogram_file) plt.close() return { \'total_expenditure\': total_expenditure, \'top_spenders\': top_spenders, \'histogram_file\': histogram_file }"},{"question":"Design a function named `generate_report` that processes a list of orders and creates a report summarizing the sales. The report should include the total sales per product and the overall revenue. The order data will be provided in a list of dictionaries, with each dictionary representing an order containing the following keys: - `product`: a string representing the name of the product. - `quantity`: an integer representing the number of units sold. - `price_per_unit`: a float representing the price per unit of the product. Your function should perform the following tasks: 1. **Calculate Total Sales Per Product**: Sum up the quantity sold for each product. 2. **Calculate Overall Revenue**: Compute the total revenue generated from all orders. 3. **Return a Summary Dictionary**: The dictionary should have the following structure: - A key `\'total_sales\'` containing a dictionary mapping product names to their total sales. - A key `\'overall_revenue\'` containing the total revenue from all orders. Your function signature should look like this: ```python def generate_report(orders: list): ``` where: - `orders` is a list of dictionaries, with each dictionary containing the keys `product`, `quantity`, and `price_per_unit`. Example: ```python orders = [ {\\"product\\": \\"apple\\", \\"quantity\\": 10, \\"price_per_unit\\": 0.50}, {\\"product\\": \\"banana\\", \\"quantity\\": 5, \\"price_per_unit\\": 0.20}, {\\"product\\": \\"apple\\", \\"quantity\\": 4, \\"price_per_unit\\": 0.50} ] result = generate_report(orders) print(result) ``` Expected Output: ```python { \\"total_sales\\": { \\"apple\\": 14, \\"banana\\": 5 }, \\"overall_revenue\\": 8.0 } ```","solution":"def generate_report(orders: list): Processes a list of orders to generate a summary report. Args: orders (list): List of dictionaries representing orders. Each dictionary contains \'product\' (str), \'quantity\' (int), and \'price_per_unit\' (float). Returns: dict: A summary dictionary with total sales per product and overall revenue. total_sales = {} overall_revenue = 0.0 for order in orders: product = order[\'product\'] quantity = order[\'quantity\'] price_per_unit = order[\'price_per_unit\'] if product in total_sales: total_sales[product] += quantity else: total_sales[product] = quantity overall_revenue += quantity * price_per_unit return { \\"total_sales\\": total_sales, \\"overall_revenue\\": overall_revenue }"},{"question":"Implement a function that takes an integer `n` and generates a Pascal\'s triangle with `n` rows. Pascal\'s triangle is a triangular array of numbers where each number is the sum of the two numbers directly above it. The function should return a list of lists, where each inner list represents a row in the triangle. Write a self-contained function starting with: ``` def generate_pascals_triangle(n): ``` For example: ``` generate_pascals_triangle(5) ``` Output: ``` [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] ```","solution":"def generate_pascals_triangle(n): Generates Pascal\'s triangle with n rows. Args: n (int): The number of rows in the triangle. Returns: list of lists: A list where each inner list represents a row in the triangle. if n <= 0: return [] triangle = [[1]] for row_num in range(1, n): row = [1] for j in range(1, row_num): row.append(triangle[row_num-1][j-1] + triangle[row_num-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"You are given a maze represented as a 2D grid. The maze contains walls, open paths, a starting point, and a goal. The goal is to determine the shortest path from the starting point to the goal while navigating through open paths and avoiding walls. The maze is represented by a list of lists, where: - `1` represents a wall. - `0` represents an open path. - `S` represents the starting point. - `G` represents the goal. You need to implement the function `shortest_path_in_maze` which takes one input: 1. `maze` (a list of lists of integers and characters) The function should return an integer representing the number of steps in the shortest path from the starting point to the goal. If there is no valid path, return `-1`. # Example: ```python maze = [ [\'S\', 0, 1, 0, 0], [ 0, 0, 1, 0, 1], [ 1, 0, 1, 0, 0], [ 0, 0, 0, 0, \'G\'], [ 1, 0, 1, 1, 0] ] output = shortest_path_in_maze(maze) # Example output: 7 ``` # Constraints: - There will be exactly one `S` and one `G` in the maze. - The size of the maze can vary, but it will always be a valid rectangular grid with dimensions at least 3x3. - The maze will not contain any cycles or isolated regions. Please ensure your function handles edge cases, such as trapped starting or goal points, properly.","solution":"from collections import deque def shortest_path_in_maze(maze): Returns the number of steps in the shortest path from \'S\' to \'G\' in the maze. If there is no valid path, returns -1. rows = len(maze) cols = len(maze[0]) # Find starting point \'S\' and goal point \'G\' start = (0, 0) goal = (0, 0) for r in range(rows): for c in range(cols): if maze[r][c] == \'S\': start = (r, c) elif maze[r][c] == \'G\': goal = (r, c) # Define directions for moving in the maze: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize BFS queue = deque([start]) visited = set() visited.add(start) steps = 0 while queue: for _ in range(len(queue)): r, c = queue.popleft() # If we\'ve reached the goal if (r, c) == goal: return steps # Explore neighbors for dr, dc in directions: nr, nc = r + dr, c + dc # Check if the neighbor is within bounds and is an open path if 0 <= nr < rows and 0 <= nc < cols and maze[nr][nc] != 1 and (nr, nc) not in visited: queue.append((nr, nc)) visited.add((nr, nc)) steps += 1 return -1"},{"question":"Write a function to compute the average duration of songs grouped by genre from a Pandas DataFrame. The DataFrame contains columns \'duration\' (in seconds) and \'genre\'. The function should return a dictionary where the keys are genres and the values are the average duration of songs in that genre. You should write self-contained code starting with: ``` import pandas as pd def task_func(df): ```","solution":"import pandas as pd def task_func(df): Computes the average duration of songs grouped by genre from a DataFrame. Parameters: df (DataFrame): DataFrame containing \'duration\' (in seconds) and \'genre\' columns. Returns: Dictionary: Dictionary where keys are genres and values are the average duration of songs in that genre. # Grouping by genre and calculating the mean duration grouped = df.groupby(\'genre\')[\'duration\'].mean() # Converting the grouped data to dictionary result = grouped.to_dict() return result"},{"question":"You are tasked with creating a function that reads details from a JSON file, processes the data, and visualizes it using a pie chart. This problem will help you learn to use `matplotlib` for plotting graphs and visualizing data in different formats. **Function to Implement:** ```python def visualize_sales_data(filename): Reads sales data from a JSON file and visualizes it using a pie chart. Parameters: - filename (str): The path to the JSON file containing the sales data. The JSON file is assumed to have the following structure: [ {\\"category\\": \\"Electronics\\", \\"sales\\": 15000}, {\\"category\\": \\"Clothing\\", \\"sales\\": 12000}, {\\"category\\": \\"Groceries\\", \\"sales\\": 9000}, {\\"category\\": \\"Books\\", \\"sales\\": 5000} ] The function should: 1. Read the data from the JSON file. 2. Create a pie chart where: - Each slice represents a sales category. - The size of each slice corresponds to the sales amount. 3. Label each slice with the sales category and the percentage it contributes to the total sales. 4. Ensure the pie chart is displayed in a circular format. 5. Display the pie chart. pass ``` # Requirements: 1. Use the `matplotlib.pyplot` library to create and display the pie chart. 2. Read the input data using Python\'s built-in JSON handling capabilities (using `json.load` or similar methods). 3. Use the `matplotlib.pyplot.pie` function appropriately to create the pie chart and label the slices. # Example: Suppose the JSON file `sales_data.json` has the following contents: ```json [ {\\"category\\": \\"Electronics\\", \\"sales\\": 15000}, {\\"category\\": \\"Clothing\\", \\"sales\\": 12000}, {\\"category\\": \\"Groceries\\", \\"sales\\": 9000}, {\\"category\\": \\"Books\\", \\"sales\\": 5000} ] ``` **Expected Output:** A pie chart where: - Each slice represents one of the categories: \'Electronics\', \'Clothing\', \'Groceries\', \'Books\'. - The size of the slices reflects the sales amounts: 15000, 12000, 9000, 5000. - Each slice is labeled with the category name and its percentage contribution to the total sales. - The pie chart is circular in shape and clearly displays the distribution of categories. # Constraints: - You can assume the JSON file always exists and has the correct format.","solution":"import json import matplotlib.pyplot as plt def visualize_sales_data(filename): Reads sales data from a JSON file and visualizes it using a pie chart. Parameters: - filename (str): The path to the JSON file containing the sales data. # Read data from JSON file with open(filename, \'r\') as file: sales_data = json.load(file) # Extract categories and corresponding sales amounts categories = [entry[\'category\'] for entry in sales_data] sales = [entry[\'sales\'] for entry in sales_data] # Create a pie chart plt.figure(figsize=(10, 6)) plt.pie(sales, labels=categories, autopct=\'%1.1f%%\', startangle=140) # Ensure the pie chart is circular plt.axis(\'equal\') # Display the pie chart plt.title(\'Sales Distribution by Category\') plt.show()"},{"question":"You are required to create a function that performs a specific manipulation on a string. The function should identify the first non-repeating character in the string and return it. If there is no non-repeating character, the function should return an empty string. You are to create a function named `first_non_repeating_char` which takes a single argument: - `s`: A string containing lowercase alphabetical characters. The function should: 1. Iterate through the string to count the frequency of each character. 2. Iterate through the string again to find the first character with a frequency of one. 3. Return the first non-repeating character or an empty string if there is none. Example Suppose we have the following string: ```python s = \\"swiss\\" ``` After applying your `first_non_repeating_char` function, the result should be: ```python \'w\' ``` If the input string is: ```python s = \\"aabbcc\\" ``` Since there are no non-repeating characters, the function should return: ```python \'\' # Function Signature: ```python def first_non_repeating_char(s: str) -> str: ``` # Note: - Ensure that your function handles strings of any length including an empty string. - The function should only consider lowercase alphabetical characters (a-z). - Optimize your solution to achieve a linear time complexity. Write the full function definition in your solution.","solution":"def first_non_repeating_char(s: str) -> str: Returns the first non-repeating character in a string. If there are no non-repeating characters, returns an empty string. :param s: A string containing lowercase alphabetical characters :return: The first non-repeating character or an empty string if none exists # Dictionary to count frequencies of each character frequency = {} # First pass to populate the frequency dictionary for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 # Second pass to identify the first non-repeating character for char in s: if frequency[char] == 1: return char # If no non-repeating character found return \'\'"},{"question":"**Objective** Write a Python function named `is_palindrome_permutation` that checks whether any permutation of a given string can form a palindrome. A palindrome is a word that reads the same backward as forward. Only alphanumeric characters should be considered, and the function should be case-insensitive. **Function Signature**: ```python def is_palindrome_permutation(s: str) -> bool: pass ``` **Parameters**: - `s` (str): The string to be checked. **Returns**: - `bool`: `True` if any permutation of the string can form a palindrome, `False` otherwise. **Instructions**: 1. Normalize the string by removing non-alphanumeric characters and converting to lowercase. 2. Count the frequency of each remaining character. 3. Determine if more than one character has an odd frequency — a palindrome can have at most one character with an odd frequency. 4. Return `True` if the conditions for forming a palindrome are met, otherwise return `False`. **Example**: ```python # Example usage: result1 = is_palindrome_permutation(\\"Tact Coa\\") print(result1) # The output should be True, as \\"Tact Coa\\" can be rearranged to \\"taco cat\\" or \\"atco cta\\" result2 = is_palindrome_permutation(\\"Hello\\") print(result2) # The output should be False, since no permutation of \\"Hello\\" can form a palindrome result3 = is_palindrome_permutation(\\"A man, a plan, a canal, Panama\\") print(result3) # The output should be True, as ignoring spaces and punctuation, it is a palindrome ```","solution":"def is_palindrome_permutation(s: str) -> bool: Check if any permutation of the input string can form a palindrome. :param s: str - the input string :return: bool - True if any permutation can form a palindrome, otherwise False. from collections import Counter import re # Normalize the string normalized_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Count the frequency of each character freq_counter = Counter(normalized_s) # Check the number of characters with odd frequency odd_count = sum(1 for count in freq_counter.values() if count % 2 != 0) # For the string to be a palindrome permutation, it should have at most one character with an odd count return odd_count <= 1 # Example usage: # result1 = is_palindrome_permutation(\\"Tact Coa\\") # True # result2 = is_palindrome_permutation(\\"Hello\\") # False # result3 = is_palindrome_permutation(\\"A man, a plan, a canal, Panama\\") # True"},{"question":"Your task is to create a function named `custom_groupby_mean` that computes the mean of a specified numeric column in a DataFrame, grouped by one or more other columns, and returns the result as a new DataFrame. # Requirements: 1. You will use the `pandas` library to handle the DataFrame operations. 2. The function should take these parameters: - `df`: A pandas DataFrame that contains the data. - `groupby_columns`: A list of column names to group by. - `numeric_column`: The name of the numeric column for which the mean is to be calculated. 3. The function should group the DataFrame by the specified `groupby_columns` and compute the mean of the `numeric_column` for each group. 4. The result should be a new DataFrame containing the `groupby_columns` and the mean of the `numeric_column`, with appropriate column names. # Example: Assume you have the following DataFrame `df`: ```python import pandas as pd data = { \'city\': [\'A\', \'A\', \'B\', \'A\', \'B\', \'B\'], \'product\': [\'X\', \'Y\', \'X\', \'Y\', \'X\', \'Y\'], \'sales\': [10, 15, 10, 20, 15, 25] } df = pd.DataFrame(data) ``` Calling `custom_groupby_mean(df, groupby_columns=[\'city\', \'product\'], numeric_column=\'sales\')` should return the following DataFrame: ```python city product sales_mean 0 A X 10.0 1 A Y 17.5 2 B X 12.5 3 B Y 25.0 ```","solution":"import pandas as pd def custom_groupby_mean(df, groupby_columns, numeric_column): Groups the DataFrame by the specified columns and computes the mean of the specified numeric column. Parameters: df (pd.DataFrame): The DataFrame containing the data. groupby_columns (list): A list of column names to group by. numeric_column (str): The name of the numeric column for which the mean is to be calculated. Returns: pd.DataFrame: A new DataFrame with the groupby columns and the mean of the numeric column. grouped_df = df.groupby(groupby_columns)[numeric_column].mean().reset_index() grouped_df.rename(columns={numeric_column: f\\"{numeric_column}_mean\\"}, inplace=True) return grouped_df"},{"question":"You are required to process a dataset of weather information contained in a CSV file. Write a function named `analyze_weather_data(filename)` that performs the following tasks: 1. Reads the CSV file into a Pandas DataFrame. 2. Computes and prints the following statistics for three specific numerical columns (`Temperature`, `Humidity`, `WindSpeed`): - Minimum value - Maximum value - Standard deviation - Sum 3. Writes specific subsets of the data to an output file named `weather_output.txt`: - All dates in the dataset - The maximal values of `Temperature` and `Humidity` column - The `WindSpeed` for the last row - The `Date` and `Temperature` for rows indexed at 0, 3, and 6 - Standard deviations for `Temperature`, `Humidity`, and `WindSpeed` Make sure to use the relevant libraries specified below: - `pandas.read_csv` - `numpy.std` You are expected to ensure that the function `analyze_weather_data` follows these steps and outputs the specified results. **CSV File Structure example:** ``` Date,Temperature,Humidity,WindSpeed 2021-01-01,32.5,80,5.1 2021-01-02,35.0,85,3.2 2021-01-03,30.0,60,4.8 2021-01-04,31.5,75,5.6 ``` **Function Specification:** ```python def analyze_weather_data(filename: str) -> None: # Your implementation here ```","solution":"import pandas as pd import numpy as np def analyze_weather_data(filename: str) -> None: # Read CSV file into DataFrame df = pd.read_csv(filename) # Calculate statistics for Temperature, Humidity, and WindSpeed stats = {} for column in [\'Temperature\', \'Humidity\', \'WindSpeed\']: stats[column] = { \'min\': df[column].min(), \'max\': df[column].max(), \'std\': np.std(df[column]), \'sum\': df[column].sum() } # Print the statistics for column, col_stats in stats.items(): print(f\\"Statistics for {column}:\\") for stat_name, value in col_stats.items(): print(f\\" {stat_name}: {value}\\") # Write to the output file with open(\'weather_output.txt\', \'w\') as out_file: # All dates in the dataset out_file.write(\\"All Dates:n\\") out_file.write(\\"n\\".join(df[\'Date\']) + \\"n\\") # Maximal values of Temperature and Humidity out_file.write(\\"nMaximal Values:n\\") out_file.write(f\\"Temperature: {stats[\'Temperature\'][\'max\']}n\\") out_file.write(f\\"Humidity: {stats[\'Humidity\'][\'max\']}n\\") # WindSpeed for the last row out_file.write(\\"nWindSpeed for the last row:n\\") out_file.write(f\\"{df.iloc[-1][\'WindSpeed\']}n\\") # Date and Temperature for rows indexed at 0, 3, and 6 out_file.write(\\"nDate and Temperature for rows indexed at 0, 3, and 6:n\\") for i in [0, 3, 6]: if i < len(df): out_file.write(f\\"{df.iloc[i][\'Date\']}: {df.iloc[i][\'Temperature\']}n\\") # Standard deviations for Temperature, Humidity, and WindSpeed out_file.write(\\"nStandard Deviations:n\\") out_file.write(f\\"Temperature: {stats[\'Temperature\'][\'std\']}n\\") out_file.write(f\\"Humidity: {stats[\'Humidity\'][\'std\']}n\\") out_file.write(f\\"WindSpeed: {stats[\'WindSpeed\'][\'std\']}n\\")"},{"question":"You have been given the task to implement the `spell_checker` function which determines whether words in a sentence are spelled correctly. The function should accept a string representing a sentence and a list of strings representing a dictionary of correctly spelled words. The function should output a list of misspelled words found in the sentence. All words in the sentence are separated by spaces and punctuation marks should be ignored. Implement the function `spell_checker(sentence, dictionary)` which accepts: - `sentence`: a string containing a sentence with words separated by spaces. - `dictionary`: a list of correctly spelled words (each word being a lowercase string). The function should return a list of misspelled words from the sentence, in the order they appear in the original sentence. Each word should be converted to lowercase before checking against the dictionary. # Required Function and Implementation Details You should write the function `spell_checker(sentence, dictionary)` to identify misspelled words. The function should: 1. Ignore punctuation and convert all characters to lowercase. 2. Split the sentence into individual words. 3. Iterate through the list of words and check each word against the dictionary. # Example: ```python sentence = \\"The qiuck, brown foxe jumps over the *lazy dogs!\\" dictionary = [\\"the\\", \\"quick\\", \\"brown\\", \\"fox\\", \\"jumps\\", \\"over\\", \\"lazy\\", \\"dogs\\"] print(spell_checker(sentence, dictionary)) # Expected Output: [\\"qiuck\\", \\"foxe\\"] ```","solution":"import string def spell_checker(sentence, dictionary): Checks the spelling of each word in the provided sentence. Parameters: sentence (str): The sentence to check. dictionary (list of str): The list of correctly spelled words. Returns: list of str: List of misspelled words found in the sentence. # Remove punctuation and convert to lowercase translator = str.maketrans(\'\', \'\', string.punctuation) cleaned_sentence = sentence.translate(translator).lower() # Split the sentence into words words = cleaned_sentence.split() # Identify misspelled words misspelled_words = [word for word in words if word not in dictionary] return misspelled_words"},{"question":"You are required to flatten a nested dictionary and convert it to a single-level dictionary. Write a function called `flatten_dictionary` that takes a dictionary as input and returns a new dictionary where the keys represent the path to each value in the original dictionary. **Function Signature:** ```python def flatten_dictionary(d: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: pass ``` # Requirements: 1. The keys of the new dictionary should be concatenated with a separator (default is a dot `\'.\'`). 2. If an original dictionary has a nested dictionary as a value, the new keys in the flattened dictionary should represent the path to the nested value separated by the separator. # Implementation Details: - Traverse the original dictionary, and for each key-value pair: - If the value is a dictionary, recursively process it and update the path. - If the value is not a dictionary, add the key-value pair to the new dictionary with the updated path. # Example Usage: ```python input_dict = { \'key1\': \'value1\', \'key2\': { \'key3\': \'value3\', \'key4\': { \'key5\': \'value5\' } }, \'key6\': \'value6\' } flattened = flatten_dictionary(input_dict) print(flattened) # Output: {\'key1\': \'value1\', \'key2.key3\': \'value3\', \'key2.key4.key5\': \'value5\', \'key6\': \'value6\'} ``` # Assumptions: - The dictionary keys will be strings. - The input dictionary can contain nested dictionaries but will not contain other complex data types like lists or sets as values. Implement the `flatten_dictionary` function to achieve the desired behavior.","solution":"def flatten_dictionary(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary to a single-level dictionary where the keys represent the path to each value in the original dictionary. Parameters: - d: dict, the original dictionary to flatten - parent_key: str, the base key (used for recursion, default is empty) - sep: str, the separator to use in the flattened dictionary keys (default is \'.\') Returns: - dict, the flattened dictionary items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dictionary(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Implement a function in Python to detect cycles in a directed graph using Depth First Search (DFS). A cycle in a directed graph is a path that starts and ends at the same vertex without repeating any vertices and edges unless it starts and ends on the same vertex. Given: - The number of vertices. - A list of directed edges where each edge is represented as a tuple (u, v) indicating a directed edge from node u to node v. Write a function `has_cycle(vertices, edges)` that returns `True` if there is a cycle in the given graph, and `False` otherwise. Using Depth First Search (DFS), the function should handle the input and output as described below: - **Input**: - `vertices`: An integer representing the number of vertices in the graph (vertices are labeled from 0 to vertices-1). - `edges`: A list of tuples representing the directed edges in the graph. - **Output**: - A boolean value `True` if the graph contains a cycle, `False` otherwise. ```python def has_cycle(vertices, edges): # Your code here pass ``` # Example ```python vertices = 4 edges = [(0, 1), (1, 2), (2, 0), (3, 0)] print(has_cycle(vertices, edges)) # Output: True vertices = 4 edges = [(0, 1), (1, 2), (3, 0)] print(has_cycle(vertices, edges)) # Output: False ```","solution":"def has_cycle(vertices, edges): def dfs(v): visited[v] = True rec_stack[v] = True for neighbor in adj_list[v]: if not visited[neighbor]: if dfs(neighbor): return True elif rec_stack[neighbor]: return True rec_stack[v] = False return False adj_list = [[] for _ in range(vertices)] for u, v in edges: adj_list[u].append(v) visited = [False] * vertices rec_stack = [False] * vertices for node in range(vertices): if not visited[node]: if dfs(node): return True return False"},{"question":"You are tasked with writing a Python function named `longest_unique_substring(s)` that identifies the longest substring with all unique characters in the given string `s`. The function should return the length of this longest substring. For example, in the string \\"abcabcbb\\", the longest substring with all unique characters is \\"abc\\", which has a length of 3. Similarly, for the string \\"bbbbb\\", the longest substring with all unique characters is \\"b\\", which has a length of 1. To solve this problem, implement the following in your function: 1. Initialize two pointers, `start` and `end`, both at the beginning of the string. 2. Use a set to keep track of characters in the current window (substring). 3. Move the `end` pointer to expand the window until a duplicate character is found. 4. Once a duplicate is found, move the `start` pointer to shrink the window until no duplicates remain. 5. Keep track of the maximum length of the window during this process. Use the built-in data structures to efficiently manage and check characters in the substring. **Function Signature:** ```python def longest_unique_substring(s: str) -> int: pass ``` # Constraints: - The length of the string `s` will be at most `10,000`. - The string `s` will consist of printable ASCII characters. # Example: ```python assert longest_unique_substring(\\"abcabcbb\\") == 3 assert longest_unique_substring(\\"bbbbb\\") == 1 assert longest_unique_substring(\\"pwwkew\\") == 3 assert longest_unique_substring(\\"\\") == 0 ```","solution":"def longest_unique_substring(s: str) -> int: n = len(s) if n == 0: return 0 start = 0 max_length = 0 char_set = set() for end in range(n): while s[end] in char_set: char_set.remove(s[start]) start += 1 char_set.add(s[end]) max_length = max(max_length, end - start + 1) return max_length"},{"question":"You need to create a Python function `find_highest_frequency_words` that reads a text file and identifies the top N words by frequency. The function should return a dictionary with the top N words as keys and their frequencies as values. In case of a tie in frequencies, the words should be alphabetically sorted. Ignore case and punctuation. The function `find_highest_frequency_words` should: 1. Read the content of the text file. 2. Process the text to clean out punctuation and convert all words to lowercase. 3. Compute the frequency of each word. 4. Identify the top N words by frequency, resolving ties alphabetically. 5. Return a dictionary with the top N words as keys and their frequencies as values. The function signature is as follows: ```python def find_highest_frequency_words(file_name: str, N: int) -> dict: # your code here ``` Here is an example of how you might call your function: ```python result = find_highest_frequency_words(\'example.txt\', 5) print(result) # Output: {\'and\': 25, \'the\': 18, \'to\': 15, \'of\': 13, \'a\': 13} ```","solution":"import string from collections import Counter def find_highest_frequency_words(file_name: str, N: int) -> dict: Reads a text file, identifies the top N words by frequency, and returns a dictionary with the words as keys and their frequencies as values. Ties are resolved alphabetically. Args: file_name (str): The name of the text file to process. N (int): The number of top frequency words to return. Returns: dict: A dictionary with the top N words and their frequencies. with open(file_name, \'r\') as file: text = file.read() # Convert to lowercase and remove punctuation text = text.lower() text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split into words and count frequencies words = text.split() word_counts = Counter(words) # Get the top N words sorted by frequency and alphabetically in case of tie most_common = word_counts.most_common() most_common.sort(key=lambda x: (-x[1], x[0])) # Collect the top N results into a dictionary top_words = dict(most_common[:N]) return top_words"},{"question":"Given an array of integers, write a Python function `majority_element(nums)` that finds the majority element in the array. The majority element is the element that appears more than `n // 2` times, where `n` is the length of the array. You can assume that the array is non-empty and the majority element always exists in the array. Function signature: ```python def majority_element(nums: [int]) -> int: pass ``` **Constraints:** - The array `nums` will have a length of at least 1 and at most 10^5. - Each element in the array will be an integer between `-10^9` and `10^9`. **Example:** Input: `majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4])` Output: `4` In this example, the number `4` appears more than `n // 2` times in the given array, thus it is the majority element.","solution":"def majority_element(nums): Finds the majority element in the array which appears more than n // 2 times. count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate"},{"question":"Write a function that takes a list of tuples where each tuple consists of a pair of strings. The function should: 1. Create a directed graph using the strings as nodes and the tuples as edges. 2. Find all strongly connected components (SCCs) in the graph. 3. Represent each SCC as a list of nodes. 4. Sort the lists of nodes alphabetically for consistency. The function should output: List[List[str]]: A list of lists, where each inner list contains the nodes of a strongly connected component. Use the NetworkX library to implement the function and start with: ``` import networkx as nx def find_sccs(pairs): ```","solution":"import networkx as nx def find_sccs(pairs): Finds and returns the strongly connected components of a directed graph created from the given list of string pairs. Parameters: pairs (List[Tuple[str, str]]): List of pairs representing the edges of the graph. Returns: List[List[str]]: A list of lists, where each inner list contains the nodes of a strongly connected component. # Create a directed graph G = nx.DiGraph() # Add edges to the graph G.add_edges_from(pairs) # Find strongly connected components sccs = list(nx.strongly_connected_components(G)) # Convert sets to sorted lists sccs_sorted = sorted([sorted(list(scc)) for scc in sccs]) return sccs_sorted"},{"question":"Given a list of integers, design a function that returns a dictionary where the keys are the integers from the list and the values are their respective frequencies. The function should also have an option to include only the top \'k\' most frequent elements in the dictionary. If \'k\' is not specified, it should include all elements. The main steps of the function are: 1. Count the frequency of each element. 2. Optionally filter the top \'k\' most frequent elements. 3. Return the frequency dictionary. The function signature should be: ``` def compute_frequencies(nums, k=None): ``` The function should handle edge cases, such as an empty list and a value of \'k\' greater than the number of unique elements in the list. Output: ``` { element_1: freq_1, element_2: freq_2, ... } ``` Example of expected behavior: ``` compute_frequencies([1, 2, 2, 3, 3, 3]) Output: {1: 1, 2: 2, 3: 3} compute_frequencies([1, 2, 2, 3, 3, 3], k=2) Output: {2: 2, 3: 3} ```","solution":"from collections import Counter def compute_frequencies(nums, k=None): Return a dictionary of the frequencies of integers in the list `nums`. If `k` is specified, only include the top `k` most frequent elements in the dictionary. Args: nums: A list of integers. k: An optional integer specifying the number of top most frequent elements to include. Returns: A dictionary where keys are integers from the list and values are their frequencies. # Count the frequencies of each number in the list freq_dict = Counter(nums) # If k is specified, filter to include only the top k most frequent elements if k is not None: freq_dict = dict(freq_dict.most_common(k)) return freq_dict"},{"question":"Your task is to write a Python function named `merge_and_sort` that combines two lists of integers and returns a new sorted list. This function must be efficient and handle any specific input types and values appropriately by raising certain exceptions if the inputs don\'t meet the criteria. The function should also log relevant information, errors, and the resultant sorted list using the `logging` module. The function signature is as follows: ```python def merge_and_sort(list1: list, list2: list) -> list: ``` # Function Details: 1. **Parameters:** - `list1` (list): The first list of integers. - `list2` (list): The second list of integers. 2. **Returns:** - The function returns a new list containing all integers from `list1` and `list2` sorted in ascending order. 3. **Exceptions:** - Raises `TypeError` if either `list1` or `list2` is not a list. - Raises `ValueError` if any element in `list1` or `list2` is not an integer. # Requirements: - Use the `logging` module to log: - The start of the function execution. - Any errors encountered (with `logging.error`). - The resulting sorted list before returning the value. # Example Usage: ```python result = merge_and_sort([3, 1, 2], [5, 4, 7]) print(result) # Should print the sorted list [1, 2, 3, 4, 5, 7] ``` # Constraints: - Both `list1` and `list2` must be lists of integer elements. - If either `list1` or `list2` contain non-integer elements, an appropriate exception must be raised. # Library to Use: - `logging.error` for logging errors. Write and test the `merge_and_sort` function to make sure it adheres to the above specifications and handles all edge cases.","solution":"import logging def merge_and_sort(list1: list, list2: list) -> list: Combines two lists of integers and returns a new sorted list. Logs relevant information and errors. # Configure logging logging.basicConfig(level=logging.INFO) logging.info(\\"Starting merge_and_sort function\\") # Check if both inputs are lists if not isinstance(list1, list) or not isinstance(list2, list): logging.error(\\"One or both arguments are not of type \'list\'\\") raise TypeError(\\"Both arguments must be of type \'list\'\\") # Check if all elements in the lists are integers if not all(isinstance(x, int) for x in list1) or not all(isinstance(x, int) for x in list2): logging.error(\\"One or both lists contain non-integer elements\\") raise ValueError(\\"All elements in both lists must be integers\\") # Merge and sort the lists result = sorted(list1 + list2) logging.info(f\\"The sorted result is: {result}\\") return result"},{"question":"In this problem, you are required to implement the function `calculate_eigen_values_vectors` that reads a square matrix from a given file, computes its eigenvalues and eigenvectors, and returns them. The function should take the following parameter: - `file_path`: A string representing the path to the data file. The data file will represent the matrix in CSV format, without a header row or column. Each row of the matrix will correspond to a row in the file. Here is the summary of the steps you need to implement: 1. Read the matrix data from the file using `pandas.read_csv()` with `header=None`. 2. Convert the data into a NumPy array. 3. Check if the matrix is square; if not, raise a `ValueError`. 4. Use `numpy.linalg.eig` to compute the eigenvalues and eigenvectors of the matrix. 5. Return the eigenvalues and eigenvectors. The function signature should look like this: ```python def calculate_eigen_values_vectors(file_path: str): pass ```","solution":"import pandas as pd import numpy as np def calculate_eigen_values_vectors(file_path: str): Reads a square matrix from a given file, computes its eigenvalues and eigenvectors, and returns them. Args: - file_path (str): A string representing the path to the data file. Returns: - (tuple): A tuple containing two numpy arrays: - eigenvalues: The eigenvalues of the matrix. - eigenvectors: The eigenvectors of the matrix. # Step 1: Read the matrix data from the file using pandas.read_csv() with header=None matrix_df = pd.read_csv(file_path, header=None) # Step 2: Convert the data into a NumPy array matrix = matrix_df.to_numpy() # Step 3: Check if the matrix is square; if not, raise a ValueError if matrix.shape[0] != matrix.shape[1]: raise ValueError(\\"The matrix is not square.\\") # Step 4: Use numpy.linalg.eig to compute the eigenvalues and eigenvectors of the matrix eigenvalues, eigenvectors = np.linalg.eig(matrix) # Step 5: Return the eigenvalues and eigenvectors return eigenvalues, eigenvectors"},{"question":"In this problem, you will implement an algorithm to manage a hospital\'s patient data during an outbreak using a priority queue to ensure that patients with the most urgent cases are attended to first. You are required to write a function named `process_patients` that simulates the regular intake and release of patients based on their severity of symptoms. Patients arrive at the hospital with varying severity levels, and you must ensure that the patient with the highest severity is treated first. Each patient will be represented by a tuple containing their name and severity level. The function `process_patients` should perform the following steps: 1. Add new patients to the queue. 2. If the treatment room is available (i.e., current patient is None), assign the patient with the highest severity to the treatment room. 3. Optionally, if specified, treat a patient for a fixed period and then release them, ensuring the correct patient order. The function signature should be: ```python def process_patients(patients, new_entries, t): # Your code here ``` **Parameters:** - `patients`: a list of tuples representing the existing patients in the queue, where each tuple is `(name, severity)`. - `new_entries`: a list of tuples representing the new patients arriving at the hospital, where each tuple is `(name, severity)`. - `t`: an integer representing the number of cycles (or time units) to process patients. **Requirements:** 1. Use the `heapq` module for managing the priority queue. 2. Ensure that the patient with the highest severity (highest severity value) is treated first. 3. Return a list of processed patients\' names in the order they were treated. **Example:** ```python patients = [(\\"Alice\\", 5), (\\"Bob\\", 3)] new_entries = [(\\"Charlie\\", 6), (\\"David\\", 4)] t = 3 Output: [\\"Charlie\\", \\"Alice\\", \\"David\\"] ```","solution":"import heapq def process_patients(patients, new_entries, t): Process patients in the patient queue based on the severity and return the names of the patients in the order they were treated. Parameters: patients (list): List of tuples representing patients in the queue with (name, severity). new_entries (list): List of tuples representing new arriving patients with (name, severity). t (int): Number of cycles to process patients. Returns: list: Names of the patients in the order they were treated. # Convert patients list and new_entries list into a max-heap based on severity queue = [(-severity, name) for name, severity in patients + new_entries] heapq.heapify(queue) treated_patients = [] for _ in range(t): if queue: severity, name = heapq.heappop(queue) treated_patients.append(name) return treated_patients"},{"question":"You are required to implement a function called `find_most_common_word` that reads a text file and identifies the word that appears most frequently. This problem will help you understand and use basic file handling and string manipulation in Python. Function Signature: ```python def find_most_common_word(file_path: str) -> str: ``` Inputs: 1. `file_path` ( text{(str)} ): The path to the text file. Outputs: - The function should return the most common word from the file as a string. Function Description: 1. Open and read the content of the file. 2. Convert the text to lowercase to ensure the word comparison is case-insensitive. 3. Remove punctuation marks from the text for accurate word comparison. 4. Split the text into individual words. 5. Use a dictionary to count the occurrences of each word. 6. Identify and return the word with the highest frequency. # Example: Given the contents of the file: ``` Hello world! Hello Python programmers. Welcome to the world of Python. Python is great. ``` The output would be: ```python \'python\' ``` # Requirements: - You should use Python’s basic file and string handling functions. External libraries (other than Python’s built-in modules) should not be used. - Ensure the function handles common punctuation correctly and is case-insensitive. # Constraints: - The text file will contain at most 1000 lines. - The total number of words in the file will be at most 10,000. - Each word will be separated by whitespace or punctuation.","solution":"import string def find_most_common_word(file_path: str) -> str: Finds the most common word in a given text file. Args: - file_path (str): Path to the text file. Returns: - str: The most common word in the text file. with open(file_path, \'r\') as file: text = file.read().lower() # Remove punctuation text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) words = text.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 most_common_word = max(word_count, key=word_count.get) return most_common_word"},{"question":"Write a function that simulates a Markov Chain for a given number of steps starting from an initial state. The states and their transition probabilities will be provided as input. Your function should track and return the sequence of visited states and the final state after the specified number of steps. Additionally, plot the frequency of visits to each state. The function should output: tuple: A tuple containing a list of visited states, the final state, and a matplotlib Axes object for the plot. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def simulate_markov_chain(states, transition_matrix, initial_state, num_steps): ```","solution":"import numpy as np import matplotlib.pyplot as plt def simulate_markov_chain(states, transition_matrix, initial_state, num_steps): Simulates a Markov Chain for a given number of steps starting from an initial state. Parameters: states (list): List of all possible states. transition_matrix (numpy.ndarray): Matrix of transition probabilities. initial_state (str): The starting state. num_steps (int): The number of steps to simulate. Returns: tuple: A tuple containing a list of visited states, the final state, and a matplotlib Axes object for the plot. state_to_index = {state: idx for idx, state in enumerate(states)} index_to_state = {idx: state for state, idx in state_to_index.items()} current_state_index = state_to_index[initial_state] visited_states = [initial_state] for _ in range(num_steps): current_state_index = np.random.choice(len(states), p=transition_matrix[current_state_index]) visited_states.append(index_to_state[current_state_index]) visit_frequencies = {state: visited_states.count(state) for state in states} fig, ax = plt.subplots() ax.bar(visit_frequencies.keys(), visit_frequencies.values()) ax.set_xlabel(\'State\') ax.set_ylabel(\'Frequency\') ax.set_title(\'State Visit Frequencies\') return visited_states, visited_states[-1], ax"},{"question":"You are tasked with implementing a context manager class `FileWriter` that safely writes data to a file. This exercise will help you understand context managers and the `with` statement in Python. Below are the requirements and steps to follow: 1. **Class Name and Role**: - The class should be named `FileWriter`. - It should be a context manager used for writing data to a file. 2. **Libraries to Use**: - No external libraries are needed. 3. **Functionality**: - The `FileWriter` class should implement the `__enter__` and `__exit__` methods. - The `__enter__` method should open the file for writing and return the file object. - The `__exit__` method should handle exceptions, ensure the file is properly closed, and suppress any exceptions if needed. 4. **Testing**: - Write a sample usage of the `FileWriter` class that writes some sample data to a file. - Verify the contents of the file to ensure the data was written correctly. Here is an incomplete code snippet to guide you: ```python class FileWriter: def __init__(self, file_name, mode=\'w\'): self.file_name = file_name self.mode = mode def __enter__(self): self.file = open(self.file_name, self.mode) return self.file def __exit__(self, exc_type, exc_value, traceback): self.file.close() # Suppress any exceptions return True # Sample usage of the \'FileWriter\' context manager sample_data = \\"Hello, world!\\" with FileWriter(\\"sample.txt\\") as file: file.write(sample_data) # Verify the contents of \'sample.txt\' to ensure the data was written correctly ```","solution":"class FileWriter: def __init__(self, file_name, mode=\'w\'): self.file_name = file_name self.mode = mode def __enter__(self): self.file = open(self.file_name, self.mode) return self.file def __exit__(self, exc_type, exc_value, traceback): if self.file: self.file.close() # Suppress any exceptions return True # Sample usage of the \'FileWriter\' context manager sample_data = \\"Hello, world!\\" with FileWriter(\\"sample.txt\\") as file: file.write(sample_data) # Verify the contents of \'sample.txt\' to ensure the data was written correctly with open(\\"sample.txt\\", \\"r\\") as file: assert file.read() == sample_data"},{"question":"**Problem**: Track Competition Ranking System You are tasked with implementing a ranking system for a track competition. Each runner’s performance is measured in milliseconds. Write a function that takes a list of runner names and their corresponding times, sorts the runners based on their performance (ascending order), and displays the results in a tabular format using the `pandas` library. **Function Signature**: ```python def display_rankings(runners: list, times: list) -> None: ``` # Input Parameters: - `runners` (list): A list of strings representing the names of the runners. - `times` (list): A list of integers representing the times (in milliseconds) taken by each runner. # Output: - The function does not return any value. It should print a table showing the rankings, with columns for \\"Rank\\", \\"Runner\\", and \\"Time (ms)\\". # Requirements: 1. **Use the `pandas.DataFrame` method** to create the table. 2. Sort the runners based on their times in ascending order. 3. Label the columns as specified. 4. Ensure the \\"Rank\\" column contains the ranking starting from 1. # Example: If the `runners` list is `[\'Alice\', \'Bob\', \'Charlie\']` and the `times` list is `[320, 275, 290]`: - \\"Bob\\" should be ranked 1 with a time of 275 ms - \\"Charlie\\" should be ranked 2 with a time of 290 ms - \\"Alice\\" should be ranked 3 with a time of 320 ms The resulting table should be: ``` Rank Runner Time (ms) 0 1 Bob 275 1 2 Charlie 290 2 3 Alice 320 ``` **Libraries Required**: ```python import pandas as pd ```","solution":"import pandas as pd def display_rankings(runners: list, times: list) -> None: Displays the rankings of runners based on their times in a tabular format. Args: runners (list): List of runner names. times (list): List of times in milliseconds corresponding to each runner. Returns: None # Create a DataFrame from the runners and times df = pd.DataFrame({ \'Runner\': runners, \'Time (ms)\': times }) # Sort the DataFrame based on the times in ascending order df = df.sort_values(by=\'Time (ms)\').reset_index(drop=True) # Add the Rank column, starting from 1 df[\'Rank\'] = df.index + 1 # Reorder columns to have Rank, Runner, Time (ms) df = df[[\'Rank\', \'Runner\', \'Time (ms)\']] # Print the DataFrame print(df)"},{"question":"You are tasked with analyzing a CSV file containing customer transactions to identify patterns in spending behavior. The CSV file contains multiple columns: \'customer_id\', \'transaction_date\', and \'amount\'. Your goal is to find customers with unusual spending patterns based on the total transaction amount in a defined time window. Implement a function `analyze_spending(file_path: str, window_days: int, threshold: float) -> List[str]` that performs the following steps: 1. Reads the CSV file into a DataFrame using `pandas.read_csv`. 2. Converts the \'transaction_date\' column to `datetime` format. 3. For each customer, calculates the total transaction amount within every rolling window period of `window_days`. 4. Identifies customers whose total transaction amount in any window period exceeds the given `threshold`. 5. Returns a list of unique \'customer_id\'s that exhibit these unusual spending patterns. Use the `pandas` library to achieve this task. Ensure your solution handles edge cases, such as customers with no transactions within the time window or transactions exactly on the window boundary.","solution":"import pandas as pd from typing import List def analyze_spending(file_path: str, window_days: int, threshold: float) -> List[str]: Analyzes the spending behavior of customers and identifies those with unusual spending patterns. :param file_path: Path to the CSV file containing transaction data :param window_days: Integer number of days for the rolling window period :param threshold: Float amount which if exceeded in the rolling window period flags the customer :return: List of unique customer_ids with unusual spending patterns # Step 1: Read the CSV file df = pd.read_csv(file_path) # Step 2: Convert \'transaction_date\' to datetime format df[\'transaction_date\'] = pd.to_datetime(df[\'transaction_date\']) # Initialize a set to store unique customer IDs with unusual spending patterns unusual_customers = set() # Step 3: For each customer, calculate the total transaction amount within every rolling window period of `window_days` for customer_id, group in df.groupby(\'customer_id\'): group = group.sort_values(\'transaction_date\') group.set_index(\'transaction_date\', inplace=True) # Calculate rolling sum of \'amount\' over the window_days period rolling_sum = group[\'amount\'].rolling(window=f\\"{window_days}D\\").sum() # Step 4: Identify customers with total transaction amount exceeding the threshold if (rolling_sum > threshold).any(): unusual_customers.add(customer_id) # Step 5: Return the list of unique customer IDs return list(unusual_customers)"},{"question":"In this exercise, you will implement a function that manipulates a list of integers to generate all possible unique permutations. This task will help you understand backtracking or iterative algorithms for permutation generation. Task Create a function named `generate_permutations` that: 1. Takes a single parameter: a list of integers `numbers`. 2. Returns a list of lists, where each inner list is a unique permutation of the input list. **Function Signature:** ```python def generate_permutations(numbers: list) -> list: ``` Detailed Steps: 1. **Input Handling:** - Ensure that the function can handle any list of integers, including an empty list. 2. **Permutation Generation:** - Use an appropriate algorithm (recursive, backtracking, or iterative) to generate all unique permutations of the list. - Ensure that no duplicates are present in the output, even if the input list contains duplicate elements. 3. **Output:** - Return the list of unique permutations in any order. Example: If you call `generate_permutations([1, 2, 3])`, it should return: ```python [ [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1] ] ``` Another call `generate_permutations([1, 1, 2])` might return: ```python [ [1, 1, 2], [1, 2, 1], [2, 1, 1] ] ``` Here\'s a simple implementation stub for where you will fill in the required functionality: ```python def generate_permutations(numbers: list) -> list: # Function to generate all unique permutations def permute(nums): return [] return permute(numbers) # Example usage: # generate_permutations([1, 2, 3]) # generate_permutations([1, 1, 2]) ```","solution":"from itertools import permutations def generate_permutations(numbers: list) -> list: Generate all unique permutations of a list of integers. return [list(p) for p in set(permutations(numbers))]"},{"question":"You are tasked with writing a Python function that finds the first duplicate element in an input list of integers. The function should return the first duplicate number it encounters when traversing the list from left to right. If there are no duplicates, the function should return `-1`. # Requirements: 1. You must not use any external libraries. 2. The function should have a time complexity of O(n). # Function Signature: ```python def first_duplicate(nums: list) -> int: ``` # Parameters: - `nums`: A list of integers. # Returns: - An integer representing the first duplicate number. If no duplicates are found, return `-1`. # Example: ```python input_list = [2, 1, 3, 5, 3, 2] print(first_duplicate(input_list)) ``` **Output:** ``` 3 ``` # Notes: - You should handle edge cases such as an empty list or a list with no duplicates. - The function should have linear runtime complexity and use constant extra space.","solution":"def first_duplicate(nums: list) -> int: Finds the first duplicate element in the input list. :param nums: A list of integers. :return: The first duplicate number encountered or -1 if no duplicates are found. seen = set() for num in nums: if num in seen: return num seen.add(num) return -1"},{"question":"This function generates all possible permutations of a given list. The function should return a list of tuples, where each tuple represents a unique permutation of the input elements. The function should output: permutations (list): A list of tuples, where each tuple is a permutation of the input list. You should write self-contained code starting with: ``` from itertools import permutations def generate_permutations(elements): ```","solution":"from itertools import permutations def generate_permutations(elements): Generates all possible permutations of a given list and returns them as a list of tuples. Parameters: elements (list): The input list of elements to permute. Returns: list: A list of tuples, where each tuple is a permutation of the input list. return list(permutations(elements))"},{"question":"Write a function called `sequence_palindrome` that determines if a given sequence of numbers contains a contiguous subsequence which is a palindrome. A palindrome is a sequence that reads the same backward as forward. **Function Signature** ```python def sequence_palindrome(sequence: list) -> bool: Check if the sequence contains a contiguous subsequence which is a palindrome. Args: sequence (list): A list of integers representing the sequence. Returns: bool: True if there\'s at least one contiguous palindromic subsequence, False otherwise. ``` **Parameters:** 1. `sequence` (list): A list of integers representing the sequence. **Returns:** - `bool`: True if there exists at least one contiguous palindromic subsequence, False otherwise. **Instructions:** 1. The function should scan through the sequence to find any subsequence which is palindromic. 2. A subsequence is a contiguous part of the sequence. 3. Palindrome subsequences must have a length of at least 2. **Example:** ```python print(sequence_palindrome([1, 2, 3, 2, 1])) # Output: True (The entire sequence is a palindrome) print(sequence_palindrome([1, 2, 3, 4, 5])) # Output: False (There is no palindromic subsequence of length 2 or more) print(sequence_palindrome([10, 20, 30, 20, 10])) # Output: True (The entire sequence is a palindrome) ``` #","solution":"def sequence_palindrome(sequence): Check if the sequence contains a contiguous subsequence which is a palindrome. Args: sequence (list): A list of integers representing the sequence. Returns: bool: True if there\'s at least one contiguous palindromic subsequence, False otherwise. n = len(sequence) if n < 2: return False # Function to check if a given sequence is palindrome def is_palindrome(sub_sequence): return sub_sequence == sub_sequence[::-1] # Check all possible contiguous subsequences for i in range(n): for j in range(i + 1, n + 1): sub_seq = sequence[i:j] if len(sub_seq) >= 2 and is_palindrome(sub_seq): return True return False"},{"question":"You are required to write a function that detects and returns duplicates from a list of integers. This function should help you learn to implement and test basic list manipulations in Python. Write a function named `find_duplicates` with the following parameter: - `nums (list[int])`: A list of integers. The function should: 1. Identify and return a new list that contains all the duplicate integers from the `nums` list in the order they first appear. 2. Ensure each duplicate is included only once in the result, even if it appears multiple times in the input list. **Example:** ```python find_duplicates([1, 2, 3, 3, 4, 5, 6, 2, 1, 1, 7, 8, 2]) ``` **Output:** `[3, 2, 1]` The function should handle large lists efficiently and maintain a time complexity of O(n) where n is the number of elements in the input list.","solution":"def find_duplicates(nums): Identifies and returns all duplicates from the list `nums`. Each duplicate appears only once in the result and in the order they were first encountered. seen = set() duplicates = set() result = [] for num in nums: if num in seen: if num not in duplicates: duplicates.add(num) result.append(num) else: seen.add(num) return result"},{"question":"You are tasked with implementing a Python function to perform a binary search on a sorted array. The function should return the index of the target value if it is present in the array, and -1 if it is not present. This exercise will help you get acquainted with the implementation of binary search, which is an essential algorithm for searching in sorted arrays. Your task is to write a function named `binary_search` that takes the following parameters: - `arr` (list of integers): A sorted list of integers. - `target` (integer): The value to search for in the array. The function should return the index of the `target` if it exists in the array, otherwise return -1. Function Signature ```python def binary_search(arr: List[int], target: int) -> int: ``` Example ```python arr = [1, 2, 4, 5, 7, 8, 9] target = 5 output = binary_search(arr, target) print(output) ``` Expected output: ``` 3 ``` In the above example, the target value `5` is present at index `3` in the array. # Constraints 1. The input array `arr` is assumed to be sorted in ascending order. 2. You must implement the binary search algorithm and must not use built-in search functions. 3. The function should have a time complexity of O(log n), where n is the length of `arr`.","solution":"from typing import List def binary_search(arr: List[int], target: int) -> int: Perform a binary search on a sorted array to find the index of the target value. Parameters: arr (List[int]): A sorted list of integers. target (int): The value to search for in the array. Returns: int: The index of the target value if it is present in the array, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"In the context of natural language processing, one common task is to determine the sentiment of a given text as positive, negative, or neutral based on the words and phrases it contains. This task can be approached using a simple bag-of-words (BoW) model combined with a predefined sentiment lexicon, which assigns a positive, negative, or neutral sentiment score to words. Your task is to write a function `determine_sentiment(text, lexicon)` that processes a given string of text and calculates an overall sentiment score based on a provided lexicon. The lexicon is a dictionary where the keys are words and the values are their corresponding sentiment scores. A positive score indicates a positive sentiment, a negative score indicates a negative sentiment, and a score of zero indicates a neutral sentiment. The overall sentiment score of the text is the sum of the sentiment scores of individual words, ignoring any words not found in the lexicon. The function should return \\"positive\\" if the overall sentiment score is greater than zero, \\"negative\\" if the score is less than zero, and \\"neutral\\" if the score is exactly zero. **Function Signature:** ```python def determine_sentiment(text, lexicon): Determine the sentiment of a given text based on a sentiment lexicon. Parameters: text (str): The input text to analyze. lexicon (dict): A dictionary mapping words to their sentiment scores. Returns: str: \\"positive\\", \\"negative\\", or \\"neutral\\" based on the overall sentiment score. ``` # Constraints: 1. Tokenize the text by splitting it into words based on spaces. 2. Convert all words to lowercase to ensure case insensitivity. 3. Ignore punctuation and special characters. 4. Words not found in the lexicon should be treated as having a neutral sentiment (score of zero). # Example: ```python lexicon = { \'happy\': 1, \'sad\': -1, \'joy\': 2, \'terrible\': -2, \'okay\': 0 } text = \\"I am so happy and full of joy, but also a little sad.\\" result = determine_sentiment(text, lexicon) print(result) # Expected output: \\"positive\\" text = \\"This experience was terrible and made me feel very sad.\\" result = determine_sentiment(text, lexicon) print(result) # Expected output: \\"negative\\" text = \\"It\'s okay, I guess.\\" result = determine_sentiment(text, lexicon) print(result) # Expected output: \\"neutral\\" ```","solution":"def determine_sentiment(text, lexicon): Determine the sentiment of a given text based on a sentiment lexicon. Parameters: text (str): The input text to analyze. lexicon (dict): A dictionary mapping words to their sentiment scores. Returns: str: \\"positive\\", \\"negative\\", or \\"neutral\\" based on the overall sentiment score. # Tokenize the text, convert words to lowercase, and ignore punctuation words = text.lower().split() # Calculate the overall sentiment score sentiment_score = 0 for word in words: sentiment_score += lexicon.get(word, 0) # Determine the sentiment based on the overall score if sentiment_score > 0: return \\"positive\\" elif sentiment_score < 0: return \\"negative\\" else: return \\"neutral\\""},{"question":"You are given a list of strings representing file paths, where each path is composed of directory names separated by the \'/\' character. Your task is to write a function `build_directory_tree(file_paths)` that constructs a nested dictionary representing the directory tree. The function should: 1. Create directories as nested dictionaries within a root directory. 2. Handle cases where there are multiple files in the same directory. 3. Ensure that the structure adequately reflects the hierarchy of the directories. **Function Signature:** ```python def build_directory_tree(file_paths: list) -> dict: pass ``` **Constraints:** - Each string in `file_paths` represents a valid file path. - The \'/\' character is used as the directory separator. - The function should work for any number of file paths. **Example:** ```python file_paths = [ \'folder1/folder2/file1.txt\', \'folder1/folder2/file2.txt\', \'folder1/file3.txt\', \'folder3/file4.txt\' ] directory_tree = build_directory_tree(file_paths) print(directory_tree) ``` Output: ```python { \'folder1\': { \'folder2\': { \'file1.txt\': {}, \'file2.txt\': {} }, \'file3.txt\': {} }, \'folder3\': { \'file4.txt\': {} } } ```","solution":"def build_directory_tree(file_paths: list) -> dict: This function takes a list of file paths and returns a nested dictionary representing the directory tree. root = {} for path in file_paths: parts = path.split(\'/\') current = root for part in parts: if part not in current: current[part] = {} current = current[part] return root"},{"question":"Create a function named `rotate_matrix` that rotates a given square matrix by 90 degrees clockwise. This function is useful in image processing and computer graphics for tasks such as rotating textures or other grid-like data. The function signature should be: ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotate a square matrix by 90 degrees clockwise. Args: matrix (List[List[int]]): A 2D list of integers representing the square matrix. Returns: List[List[int]]: The rotated matrix. ``` # Input: - `matrix`: A 2D list where each sublist contains the elements of a row of the matrix. # Output: - A 2D list representing the rotated matrix. # Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotated = rotate_matrix(matrix) print(rotated) # Expected Output: # [[7, 4, 1], # [8, 5, 2], # [9, 6, 3]] ``` The function should leverage the following list methods documented as: 1. List comprehensions to efficiently generate the rotated matrix.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotate a square matrix by 90 degrees clockwise. Args: matrix (List[List[int]]): A 2D list of integers representing the square matrix. Returns: List[List[int]]: The rotated matrix. n = len(matrix) return [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)]"},{"question":"You are tasked with writing a Python function `compute_closest_pair`, which will find the closest pair of points from a given list of 2D points. The function should take a list of points, where each point is represented as a tuple `(x, y)`, and return a tuple containing the closest pair of points. Your function must use the divide-and-conquer approach to achieve an optimal O(n log n) time complexity. Here are the specific requirements: 1. **Input:** - A list `points` of tuples, where each tuple `(x, y)` represents the coordinates of a point on a 2D plane. The list will contain at least two points. 2. **Behavior:** - The function should return a tuple containing the closest pair of points. If there are multiple pairs with the same minimum distance, returning any one of them is acceptable. 3. **Output:** - A tuple containing two tuples, each representing the coordinates of one of the closest pair of points. You will also need to define a helper function `distance` that will compute the Euclidean distance between two points. Additionally, you should implement helper functions as needed to efficiently sort points and perform the divide-and-conquer steps. Here is a skeleton of the function you need to implement: ```python import math def distance(point1, point2): # Implement the logic to compute the Euclidean distance between two points. pass def compute_closest_pair(points): # Implement the logic to find the closest pair of points using divide-and-conquer approach. pass ``` Ensure you handle edge cases and validate inputs where appropriate, for example, ensuring the list contains at least two points.","solution":"import math def distance(point1, point2): Returns the Euclidean distance between two points. return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) def closest_pair(points): Brute force method to find the closest pair of points. min_dist = float(\'inf\') pair = None n = len(points) for i in range(n): for j in range(i + 1, n): dist = distance(points[i], points[j]) if dist < min_dist: min_dist = dist pair = (points[i], points[j]) return pair def closest_pair_rec(points_sorted_by_x, points_sorted_by_y): Helper recursive function to find the closest pair using divide and conquer. n = len(points_sorted_by_x) if n <= 3: return closest_pair(points_sorted_by_x) mid = n // 2 mid_point = points_sorted_by_x[mid] left_by_x = points_sorted_by_x[:mid] right_by_x = points_sorted_by_x[mid:] midpoint_x = points_sorted_by_x[mid][0] left_by_y = list(filter(lambda p: p[0] <= midpoint_x, points_sorted_by_y)) right_by_y = list(filter(lambda p: p[0] > midpoint_x, points_sorted_by_y)) closest_pair_left = closest_pair_rec(left_by_x, left_by_y) closest_pair_right = closest_pair_rec(right_by_x, right_by_y) min_pair = min(closest_pair_left, closest_pair_right, key=lambda pair: distance(pair[0], pair[1])) min_dist = distance(min_pair[0], min_pair[1]) strip = [point for point in points_sorted_by_y if abs(point[0] - midpoint_x) < min_dist] strip_size = len(strip) for i in range(strip_size): for j in range(i + 1, min(i + 7, strip_size)): if distance(strip[i], strip[j]) < min_dist: min_dist = distance(strip[i], strip[j]) min_pair = (strip[i], strip[j]) return min_pair def compute_closest_pair(points): Main function to find the closest pair of points using divide-and-conquer approach. if len(points) < 2: raise ValueError(\\"At least two points are required.\\") points_sorted_by_x = sorted(points, key=lambda p: p[0]) points_sorted_by_y = sorted(points, key=lambda p: p[1]) return closest_pair_rec(points_sorted_by_x, points_sorted_by_y)"},{"question":"**Context**: You are tasked with developing a function that approximates the value of π (pi) using the Monte Carlo method. This method involves generating random points in a square, and determining the ratio of points that fall inside a quarter circle inscribed within the square. For this task, you may use functions from the `random` and `math` libraries. **Objective**: Implement a function called `approximate_pi` that takes one parameter: `num_points`, an integer representing the number of random points to generate. **Function Signature**: ```python def approximate_pi(num_points: int) -> float: pass ``` **Requirements**: 1. Use the `random.uniform` function to generate random floating point numbers. 2. Calculate the number of points that fall inside the quarter circle. 3. Use the mathematical formula to approximate the value of π based on the ratio of points inside the circle to the total number of points. 4. Return the approximated value of π as a float. **Sample Input and Output**: ```python approximate_pi(10000) # Example Output: 3.1412 ``` **Note**: The exact output will vary since the method relies on randomly generated points.","solution":"import random import math def approximate_pi(num_points: int) -> float: inside_circle = 0 for _ in range(num_points): x = random.uniform(0, 1) y = random.uniform(0, 1) if x**2 + y**2 <= 1: inside_circle += 1 return (inside_circle / num_points) * 4"},{"question":"You are required to implement a function `find_longest_word(s, d)` that finds the longest word in a given dictionary `d` that can be formed by deleting some characters of the given string `s`. The function should return the longest possible word. If multiple words of the same maximum length can be formed, return the one that appears first in the dictionary. If no word can be formed, return an empty string. **Function Signature**: ```python def find_longest_word(s, d): Find the longest word in dictionary that can be formed by deleting some of the given string characters. Parameters: s : str The original string from which characters can be deleted. d : list of str The dictionary containing the words to be checked. Returns: str The longest word that can be formed. ``` **Implementation Requirements**: - Iterate over the dictionary to check each word. - Ensure any candidate word can be formed by deleting some characters from the given string `s`. - Consider both length and lexicographical order when choosing the result. # Example: ```python # Example 1 s = \\"abpcplea\\" d = [\\"ale\\", \\"apple\\", \\"monkey\\", \\"plea\\"] result = find_longest_word(s, d) print(result) # Output: \\"apple\\" # Example 2 s = \\"abpcplea\\" d = [\\"a\\", \\"b\\", \\"c\\"] result = find_longest_word(s, d) print(result) # Output: \\"a\\" ``` # Constraints: - The input string `s` has a length in the range [1, 1000]. - The dictionary `d` contains at most 1000 words, each with a length in the range [1, 1000]. - All strings and words contain only lowercase letters.","solution":"def can_form_word(s, word): Returns True if the word can be formed by deleting some characters of the string s. it = iter(s) return all(char in it for char in word) def find_longest_word(s, d): Find the longest word in the dictionary `d` that can be formed by deleting some of the given string\'s `s` characters. Parameters: s : str The original string from which characters can be deleted. d : list of str The dictionary containing the words to be checked. Returns: str The longest word that can be formed. longest_word = \\"\\" for word in d: if can_form_word(s, word): if len(word) > len(longest_word) or (len(word) == len(longest_word) and word < longest_word): longest_word = word return longest_word"},{"question":"Create a function `generate_fibonacci_sequence(n)` that takes an integer `n` as input and returns the first `n` numbers in the Fibonacci sequence as a list. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. Ensure the function handles the following cases: 1. If `n` is 0, return an empty list `[]`. 2. If `n` is 1, return `[0]`. 3. For any other value of `n`, return the corresponding Fibonacci sequence up to `n` numbers. **Example Usage:** - `generate_fibonacci_sequence(0)` should return `[]` - `generate_fibonacci_sequence(1)` should return `[0]` - `generate_fibonacci_sequence(5)` should return `[0, 1, 1, 2, 3]` - `generate_fibonacci_sequence(10)` should return `[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]` Consider edge cases such as negative numbers or non-integer inputs, and handle them appropriately by raising a `ValueError` with the message `\\"Input must be a non-negative integer\\"`. Your task is to implement the `generate_fibonacci_sequence(n)` function correctly.","solution":"def generate_fibonacci_sequence(n): Generates the first n Fibonacci numbers. Args: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first n Fibonacci numbers. Raises: ValueError: If the input is not a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return [] if n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): next_value = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_value) return fib_sequence"},{"question":"You are tasked with creating a function that simulates the transformation of a list of integers by applying a given set of operations. Each operation is represented by a string that describes either adding, subtracting, multiplying, or dividing a specific value to/from all elements in the list. The operations will be provided in a sequence, and each operation should be applied in order. The function you need to create is called `transform_list`. This function should take two arguments: - `numbers`: a list of integers. - `operations`: a list of strings, where each string follows the format `[operation] [value]`, with `[operation]` being one of \\"add\\", \\"subtract\\", \\"multiply\\", or \\"divide\\", and `[value]` being an integer. For each operation string in the `operations` list: - If `[operation]` is \\"add\\", add `[value]` to each element in the `numbers` list. - If `[operation]` is \\"subtract\\", subtract `[value]` from each element in the `numbers` list. - If `[operation]` is \\"multiply\\", multiply each element in the `numbers` list by `[value]`. - If `[operation]` is \\"divide\\", divide each element in the `numbers` list by `[value]`. Assume integer division. Your function should return the transformed list of integers after applying all the operations. Implement the function `transform_list(numbers, operations)` to achieve the described functionality. Ensure that each operation is applied in the given order. **Example**: ```python numbers = [1, 2, 3, 4] operations = [\\"add 2\\", \\"multiply 3\\"] print(transform_list(numbers, operations)) ``` Output: ``` [9, 12, 15, 18] ``` **Constraints**: 1. The `numbers` list will contain between 1 and 1000 integers. 2. Each integer in the `numbers` list will be between -1000 and 1000. 3. The `operations` list will contain between 1 and 100 strings. 4. The `[value]` in each operation will be between 1 and 100.","solution":"def transform_list(numbers, operations): for operation in operations: op, value = operation.split() value = int(value) if op == \\"add\\": numbers = [num + value for num in numbers] elif op == \\"subtract\\": numbers = [num - value for num in numbers] elif op == \\"multiply\\": numbers = [num * value for num in numbers] elif op == \\"divide\\": numbers = [num // value for num in numbers] return numbers"},{"question":"Your task is to implement a function in Python that computes the moving average of a given list of integers with a specified window size. This exercise aims to familiarize you with list indexing, window sliding techniques, and basic list operations. Write a function `moving_average` that takes the following arguments: - `data` (list of int): A list of integers representing the data points. - `window_size` (int): The size of the moving window (must be greater than 0). The function should return a list of floats where each element is the average of the respective window. If the window size exceeds the length of the data, return an empty list. # Example ```python result = moving_average([1, 2, 3, 4, 5], 3) print(result) # Expected output: # [2.0, 3.0, 4.0] result = moving_average([10, 20, 30, 40, 50, 60], 4) print(result) # Expected output: # [25.0, 35.0, 45.0] result = moving_average([5, 7], 3) print(result) # Expected output: # [] ``` # Requirements - Ensure the function handles edge cases, such as an empty input list or a window size greater than the length of the data. - Utilize list slicing to compute the sum of elements in each window. - Maintain efficiency in terms of time complexity with respect to the length of the input list and window size.","solution":"def moving_average(data, window_size): Calculates the moving average of a given list of integers with a specified window size. Parameters: data (list of int): A list of integers representing the data points. window_size (int): The size of the moving window (must be greater than 0). Returns: list of floats: A list where each element is the average of a respective window. Empty list if window size exceeds the length of the data. if window_size <= 0: raise ValueError(\\"Window size must be greater than 0\\") n = len(data) if window_size > n: return [] moving_averages = [] for i in range(n - window_size + 1): window = data[i:i + window_size] window_average = sum(window) / window_size moving_averages.append(window_average) return moving_averages"},{"question":"You are required to implement a function `matchFrequencies(s1, s2)` that determines whether two given strings `s1` and `s2` have the same character frequencies. Two strings are said to have matching frequencies if each character appears the same number of times in both strings. The function should: 1. Create a frequency dictionary for each string where the keys are characters and values are their respective counts. 2. Compare the two dictionaries. 3. Return `True` if the character frequencies match, otherwise return `False`. **Function Signature** ```python def matchFrequencies(s1, s2): # Your code here ``` **Example:** ```python # Check if frequencies match print(matchFrequencies(\\"anagram\\", \\"nagaram\\")) # Output: True print(matchFrequencies(\\"rat\\", \\"car\\")) # Output: False print(matchFrequencies(\\"listen\\", \\"silent\\")) # Output: True print(matchFrequencies(\\"aabbcc\\", \\"abcabc\\")) # Output: True print(matchFrequencies(\\"hello\\", \\"world\\")) # Output: False ```","solution":"from collections import Counter def matchFrequencies(s1, s2): Determines whether two given strings s1 and s2 have the same character frequencies. return Counter(s1) == Counter(s2)"},{"question":"--- You are given a dataset, `climate_data`, which contains historical climate information for various cities. The dataset has the following structure: | City | Year | Month | Temperature | Rainfall | |-------------|------|-------|-------------|----------| | CityA | 2020 | 1 | 12.3 | 45.2 | | CityB | 2020 | 1 | 10.1 | 60.7 | | CityA | 2020 | 2 | 14.2 | 40.1 | | ... | ... | ... | ... | ... | Your task is to write a function named `plot_city_climate` that takes the following parameters: 1. `city_name` (string): The name of the city. 2. `start_year` (int): The starting year for the data to be plotted. 3. `end_year` (int): The ending year for the data to be plotted. The function will: 1. Filter the dataset to find all entries that match the given `city_name` and are within the `start_year` and `end_year` range. 2. Extract the \'Year\', \'Month\', \'Temperature\', and \'Rainfall\' columns for the filtered entries. 3. Create two subplots using `matplotlib.pyplot`: - The first subplot will be a line plot of the monthly average temperatures over the specified years. - The x-axis should be labeled \\"Month\\". - The y-axis should be labeled \\"Average Temperature (°C)\\". - The months should be represented as 1 through 12. - The second subplot will be a bar plot of the monthly total rainfall over the specified years. - The x-axis should be labeled \\"Month\\". - The y-axis should be labeled \\"Total Rainfall (mm)\\". 4. The title of each subplot should indicate the city name and specify whether it is \'Temperature\' or \'Rainfall\' data being presented. You must use the following methods from `matplotlib.pyplot`: - `matplotlib.pyplot.xlabel()` to label the x-axes. - `matplotlib.pyplot.ylabel()` to label the y-axes. - `matplotlib.pyplot.show()` to display the plot. Here is the function signature: ```python def plot_city_climate(city_name, start_year, end_year): # Your code here ```","solution":"import pandas as pd import matplotlib.pyplot as plt # Assuming climate_data is a pandas DataFrame def plot_city_climate(city_name, start_year, end_year, climate_data): Plots climate data for a specific city within a defined year range. Parameters: - city_name: The name of the city (str) - start_year: The starting year for the data to be plotted (int) - end_year: The ending year for the data to be plotted (int) - climate_data: The dataset containing climate information (pandas DataFrame) # Filter data for the specified city and year range filtered_data = climate_data[ (climate_data[\'City\'] == city_name) & (climate_data[\'Year\'] >= start_year) & (climate_data[\'Year\'] <= end_year) ] if filtered_data.empty: print(f\\"No data found for {city_name} between {start_year} and {end_year}\\") return # Group by month and compute average temperature and total rainfall monthly_data = filtered_data.groupby(\'Month\').agg( {\'Temperature\': \'mean\', \'Rainfall\': \'sum\'} ).reset_index() # Create subplots fig, ax1 = plt.subplots(2, 1, figsize=(12, 10)) # Plot average temperature ax1[0].plot(monthly_data[\'Month\'], monthly_data[\'Temperature\'], marker=\'o\') ax1[0].set_title(f\'{city_name} Average Monthly Temperature\') ax1[0].set_xlabel(\'Month\') ax1[0].set_ylabel(\'Average Temperature (°C)\') # Plot total rainfall ax1[1].bar(monthly_data[\'Month\'], monthly_data[\'Rainfall\'], color=\'b\') ax1[1].set_title(f\'{city_name} Monthly Total Rainfall\') ax1[1].set_xlabel(\'Month\') ax1[1].set_ylabel(\'Total Rainfall (mm)\') plt.tight_layout() plt.show()"},{"question":"# Background You are tasked with creating a function that processes and analyzes a list of book transaction records. Each record contains information on whether the book transaction was a purchase or a return. The function should generate a summary of the total number of books purchased and returned, as well as the titles of books that were purchased more than once. # Task You need to implement the `analyze_book_transactions` function which performs the following: 1. **Input Validation**: Ensure the input is a list of dictionaries, with each dictionary containing keys: \'title\', \'type\', and \'quantity\'. 2. **Transaction Processing**: Iterate through the transaction records to separate the counts for purchases and returns. 3. **Summary Generation**: Create a summary that includes the total number of books purchased and returned, and a list of book titles that were purchased more than once. 4. **Error Handling**: If any input record does not conform to the expected structure, handle it appropriately by skipping the faulty record and moving to the next. # Function Signature ```python def analyze_book_transactions(transactions: list) -> dict: ``` - **transactions** (list): A list of dictionaries with each dictionary representing a transaction. Each dictionary contains: - **title** (string): The title of the book. - **type** (string): Either \'purchase\' or \'return\'. - **quantity** (int): The number of books involved in the transaction. # Instructions 1. Validate the input to ensure it is a list of dictionaries with the correct keys. 2. Process each transaction to maintain counts for purchases and returns separately. 3. Generate a summary with the following structure: ```json { \\"total_purchased\\": int, \\"total_returned\\": int, \\"multiple_purchases\\": list } ``` - **total_purchased**: Total number of books purchased. - **total_returned**: Total number of books returned. - **multiple_purchases**: List of book titles that were purchased more than once. 4. Handle any incorrectly structured transaction records gracefully by logging an error message and continuing with the next record. # Example Usage ```python transactions = [ {\\"title\\": \\"Book A\\", \\"type\\": \\"purchase\\", \\"quantity\\": 2}, {\\"title\\": \\"Book B\\", \\"type\\": \\"purchase\\", \\"quantity\\": 1}, {\\"title\\": \\"Book A\\", \\"type\\": \\"purchase\\", \\"quantity\\": 3}, {\\"title\\": \\"Book C\\", \\"type\\": \\"return\\", \\"quantity\\": 1} ] result = analyze_book_transactions(transactions) # Expected output: # { # \\"total_purchased\\": 6, # \\"total_returned\\": 1, # \\"multiple_purchases\\": [\\"Book A\\"] # } ```","solution":"def analyze_book_transactions(transactions: list) -> dict: if not isinstance(transactions, list): raise ValueError(\\"Input must be a list of dictionaries\\") total_purchased = 0 total_returned = 0 purchase_counts = {} multiple_purchases = set() for record in transactions: if not all(key in record for key in [\'title\', \'type\', \'quantity\']): print(\\"Skipping invalid record:\\", record) continue title = record[\'title\'] trans_type = record[\'type\'] quantity = record[\'quantity\'] if not isinstance(title, str) or not isinstance(trans_type, str) or not isinstance(quantity, int): print(\\"Skipping invalid record data types:\\", record) continue if trans_type == \'purchase\': total_purchased += quantity if title in purchase_counts: purchase_counts[title] += quantity multiple_purchases.add(title) else: purchase_counts[title] = quantity elif trans_type == \'return\': total_returned += quantity else: print(\\"Skipping record with invalid transaction type:\\", record) return { \\"total_purchased\\": total_purchased, \\"total_returned\\": total_returned, \\"multiple_purchases\\": list(multiple_purchases) }"},{"question":"Construct a function that accepts a list of dictionaries representing students, where each dictionary contains the keys \'name\' (a string) and \'grades\' (a list of integers). The function should create a pandas DataFrame with columns \'Name\' and \'AverageGrade\', where \'AverageGrade\' is the average of the grades for each student. Filter out and exclude students with an average grade below 50. Return the DataFrame sorted by \'AverageGrade\' in descending order. Example input: ``` students = [ {\\"name\\": \\"Alice\\", \\"grades\\": [80, 90, 100]}, {\\"name\\": \\"Bob\\", \\"grades\\": [70, 60, 50]}, {\\"name\\": \\"Charlie\\", \\"grades\\": [40, 30, 20]} ] ``` The function should output a DataFrame with: pd.DataFrame: A DataFrame with names and average grades of students who have an average grade of 50 or above, sorted by \'AverageGrade\' in descending order. You should write self-contained code starting with: ``` import pandas as pd def student_grades(students_list): ```","solution":"import pandas as pd def student_grades(students_list): # Create lists for names and average grades names = [] average_grades = [] # Calculate average grades for each student for student in students_list: name = student[\'name\'] grades = student[\'grades\'] if grades: # Check if grades list is not empty avg_grade = sum(grades) / len(grades) if avg_grade >= 50: names.append(name) average_grades.append(avg_grade) # Create a DataFrame data = {\'Name\': names, \'AverageGrade\': average_grades} df = pd.DataFrame(data) # Sort by AverageGrade in descending order df = df.sort_values(by=\'AverageGrade\', ascending=False).reset_index(drop=True) return df"},{"question":"You are asked to write a function called `process_transactions(transactions)` that processes a list of banking transactions and returns a summary of the final balances for each account. Each transaction is represented as a dictionary with the following keys: - `\'account_number\'` (str): The unique identifier for the account. - `\'amount\'` (float): The amount of money to be added to (positive value) or subtracted from (negative value) the account balance. # Function Specification - **Function Name:** `process_transactions` - **Parameters:** - `transactions` (list of dict): A list of transactions, where each transaction is a dictionary as described above. - **Returns:** A dictionary where the keys are account numbers and the values are the final balances for those accounts. **Example:** If `process_transactions` is called with the following list of transactions: ```python [ {\'account_number\': \'123\', \'amount\': 100.0}, {\'account_number\': \'456\', \'amount\': 200.0}, {\'account_number\': \'123\', \'amount\': -50.0}, {\'account_number\': \'789\', \'amount\': 300.0}, {\'account_number\': \'456\', \'amount\': -200.0} ] ``` The function should return: ```python { \'123\': 50.0, \'456\': 0.0, \'789\': 300.0 } ``` **Instructions:** 1. Implement the `process_transactions` function. 2. Ensure that the function correctly calculates the balance for each account based on the transactions. 3. Test the function with various inputs to verify its correctness.","solution":"def process_transactions(transactions): Processes a list of banking transactions and returns the final balances for each account. Parameters: transactions (list of dict): A list of transactions where each transaction is represented as a dictionary with keys: \'account_number\' (str): The unique identifier for the account, \'amount\' (float): The amount of money to add/subtract from the account balance. Returns: dict: A dictionary where the keys are account numbers and the values are the final balances for those accounts. account_balances = {} for transaction in transactions: account_number = transaction[\'account_number\'] amount = transaction[\'amount\'] if account_number in account_balances: account_balances[account_number] += amount else: account_balances[account_number] = amount return account_balances"},{"question":"In this problem, you are required to write a Python function named `diagonal_sum` that uses the **NumPy** library to calculate the sum of the main diagonal elements of a given 4x4 matrix. This matrix will represent some form of board or grid with arbitrary integer values. # Specifications: 1. **Function Name:** `diagonal_sum` 2. **Input:** The function takes a single parameter: - `matrix`: A 4x4 list of lists (a 2-dimensional list) representing a matrix of integers. 3. **Output:** The function returns an integer, which is the sum of the elements on the main diagonal of the matrix. # Constraints: - You should use the `numpy.diag` and `numpy.sum` functions to find the main diagonal elements and calculate their sum. # Example: For calling: ```python matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] result = diagonal_sum(matrix) print(result) ``` The expected output would be: ```python 34 ``` # Notes: 1. Ensure that your function correctly converts the input list of lists into a NumPy array. 2. The primary diagonal of a matrix consists of elements where the row and column indices are the same (i.e., `matrix[i][i]`). 3. Assume that the input matrix is always a 4x4 matrix of integers.","solution":"import numpy as np def diagonal_sum(matrix): Calculate the sum of the main diagonal elements of a given 4x4 matrix. Parameters: matrix (list of list): A 4x4 list of lists representing the matrix. Returns: int: The sum of the main diagonal elements. # Convert the input list of lists into a NumPy array np_matrix = np.array(matrix) # Extract the main diagonal elements main_diagonal = np.diag(np_matrix) # Calculate the sum of the main diagonal elements return np.sum(main_diagonal)"},{"question":"This function reads a list of integers, removes all duplicate numbers while preserving the order of first occurrence, and returns the list of unique numbers. The function should also return a dictionary with the count of each number in the original list. The function should output: dict: A dictionary with keys \'unique_list\' which contains the list of unique numbers in their order of first occurrence, and \'counts\' which is a dictionary with keys as the original numbers and values as the count of their occurrences. You should write self-contained code starting with: ``` def process_numbers(numbers): ```","solution":"def process_numbers(numbers): Processes the list of integers to remove duplicates and count occurrences. Parameters: numbers (list): A list of integers. Returns: dict: A dictionary with \'unique_list\' and \'counts\'. unique_list = [] counts = {} for number in numbers: if number not in counts: unique_list.append(number) counts[number] = counts.get(number, 0) + 1 return { \'unique_list\': unique_list, \'counts\': counts }"},{"question":"You are developing a feature for a library inventory system, where you need to categorize a large collection of books based on their genres. The system has a predefined list of genres, and each book record contains a brief description. Your task is to implement a function `categorize_books` that assigns a genre to each book based on keywords found in its description. For this task, you should: - Use the `re` library to handle regular expressions for keyword matching. - Use the `os` library to handle directory and file operations. Please write a function `categorize_books` that performs the following steps: 1. **Directory Setup**: - Ensure the output directory exists, creating it if necessary. 2. **Genre Definitions**: - Define a dictionary where keys are genre names and values are lists of keywords associated with each genre. 3. **Book Loading**: - Load book descriptions from text files located in a specified input directory. Each file contains the description of a single book. 4. **Book Classification**: - Assign a genre to each book by checking if its description contains any of the predefined keywords for each genre. - If a book matches keywords from multiple genres, assign it to the first matching genre based on the order in the genre dictionary. - If no keywords match, categorize the book as \\"Uncategorized\\". 5. **Output Generation**: - Write the categorized books to text files in the output directory. Each file should be named according to the genre and contain the descriptions of books that fall under that genre. The function signature should be: ```python def categorize_books(input_dir, output_dir, genre_keywords): # Your code here ``` # Additional Details: - `input_dir`: Path to the directory containing book description files. - `output_dir`: Path to the directory where categorized description files will be saved. - `genre_keywords`: Dictionary where keys are genre names and values are lists of keywords associated with each genre. Implement the function `categorize_books` using the specified libraries. Ensure directories are properly handled, descriptions are loaded and categorized accurately, and categorized files are saved in the correct locations. # Example Usage ```python genre_keywords = { \\"Science Fiction\\": [\\"space\\", \\"alien\\", \\"robot\\"], \\"Fantasy\\": [\\"magic\\", \\"dragon\\", \\"wizard\\"], \\"Mystery\\": [\\"murder\\", \\"detective\\", \\"crime\\"], } categorize_books(\\"books/descriptions\\", \\"books/categorized\\", genre_keywords) ```","solution":"import os import re def categorize_books(input_dir, output_dir, genre_keywords): # Ensure the output directory exists if not os.path.exists(output_dir): os.makedirs(output_dir) # Initialize a dictionary to hold categorized book descriptions categorized_books = {genre: [] for genre in genre_keywords} categorized_books[\\"Uncategorized\\"] = [] # Load book descriptions from files in the input directory for filename in os.listdir(input_dir): file_path = os.path.join(input_dir, filename) with open(file_path, \'r\') as file: description = file.read() # Determine the book\'s genre based on keywords categorized = False for genre, keywords in genre_keywords.items(): for keyword in keywords: if re.search(r\'b\' + re.escape(keyword) + r\'b\', description, re.IGNORECASE): categorized_books[genre].append(description) categorized = True break if categorized: break if not categorized: categorized_books[\\"Uncategorized\\"].append(description) # Write the categorized books to text files in the output directory for genre, descriptions in categorized_books.items(): output_file_path = os.path.join(output_dir, f\\"{genre}.txt\\") with open(output_file_path, \'w\') as output_file: for desc in descriptions: output_file.write(desc + \\"nn\\")"},{"question":"Write a function named `merge_dictionaries` that takes two dictionaries, `dict1` and `dict2`, as input and merges them into a single dictionary. In case there are shared keys between the two dictionaries, the conflicts should be resolved based on the following rules: 1. If the value associated with the key is a list in both dictionaries, concatenate the lists. 2. If the value associated with the key is a dictionary in both dictionaries, merge the dictionaries recursively using the same rules. 3. In any other cases, the value from `dict2` should override the value from `dict1`. Example: ```python def merge_dictionaries(dict1, dict2): # Implement the function here # Example inputs dict1 = { \\"a\\": [1, 2], \\"b\\": { \\"x\\": 1, \\"y\\": [10, 20] }, \\"c\\": 5, \\"d\\": 7 } dict2 = { \\"a\\": [3, 4], \\"b\\": { \\"y\\": [30, 40], \\"z\\": 2 }, \\"c\\": 8, \\"e\\": 9 } # Expected output print(merge_dictionaries(dict1, dict2)) ``` Expected Output: ``` { \\"a\\": [1, 2, 3, 4], \\"b\\": { \\"x\\": 1, \\"y\\": [10, 20, 30, 40], \\"z\\": 2 }, \\"c\\": 8, \\"d\\": 7, \\"e\\": 9 } ```","solution":"def merge_dictionaries(dict1, dict2): Merges two dictionaries into a single dictionary. In case of conflicts: - If the value for a key is a list in both dictionaries, concatenate the lists. - If the value for a key is a dictionary in both dictionaries, merge the dictionaries recursively. - In any other case, the value from dict2 overrides the value from dict1. result = dict1.copy() for key, value in dict2.items(): if key in result: if isinstance(result[key], list) and isinstance(value, list): result[key] = result[key] + value elif isinstance(result[key], dict) and isinstance(value, dict): result[key] = merge_dictionaries(result[key], value) else: result[key] = value else: result[key] = value return result"},{"question":"Your task is to write a function `matrix_multiplication(A, B)` that multiplies two matrices and returns the resulting matrix. This program should handle edge cases where the matrices are not conformable (i.e., cannot be multiplied). Function Signature ```python def matrix_multiplication(A: list, B: list) -> list: ``` Parameters - `A`: A two-dimensional list representing the first matrix. - `B`: A two-dimensional list representing the second matrix. Requirements 1. Verify that the number of columns in matrix `A` is equal to the number of rows in matrix `B`. If not, return an empty list. 2. Perform matrix multiplication and return the resulting matrix. Example Usage ```python A = [ [1, 2], [3, 4] ] B = [ [5, 6], [7, 8] ] result = matrix_multiplication(A, B) print(result) # Output: [[19, 22], [43, 50]] ``` Expected Output The function should return the product of the two matrices. For the example provided, the resulting matrix would be `[[19, 22], [43, 50]]`. Additional Notes 1. If either matrix `A` or `B` is empty, return an empty list. 2. Ensure that the function handles matrices of varying sizes correctly, as long as they are conformable.","solution":"def matrix_multiplication(A, B): Multiplies two matrices A and B. Parameters: A (list): A two-dimensional list representing the first matrix. B (list): A two-dimensional list representing the second matrix. Returns: list: The resulting matrix after multiplication, or an empty list if multiplication is not possible. if not A or not B or len(A[0]) != len(B): return [] result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))] for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"You are tasked with creating a function called `analytic_geometry_intervals` that calculates the total length of a union of intervals on a number line. Given a list of intervals, each represented as a tuple of two numbers (start and end), the function should merge overlapping intervals and compute the total length covered by the union of these intervals. For instance, given the intervals [(1, 3), (2, 6), (8, 10), (15, 18)], the intervals (1, 3) and (2, 6) overlap and should be merged into (1, 6). The total length covered by the union of these intervals is (6 - 1) + (10 - 8) + (18 - 15) = 2 + 8 + 3 = 10. Here is the detailed specification for the function: - **Function Name:** `analytic_geometry_intervals` - **Parameters:** - `intervals`: A list of tuples, where each tuple contains two integers representing the start and end of an interval. - **Returns:** - A single integer representing the total length covered by the union of the intervals. # Example Input: ```python intervals = [(1, 3), (2, 6), (8, 10), (15, 18)] ``` Output: ```python 10 ``` # Note: - If the intervals list is empty, the function should return 0. - The intervals within the list are not necessarily sorted. Design and implement the function accordingly.","solution":"def analytic_geometry_intervals(intervals): if not intervals: return 0 # Sort intervals based on the starting point of each interval intervals.sort(key=lambda x: x[0]) # Initialize a variable to keep track of merged intervals merged_intervals = [] for interval in intervals: # If merged_intervals is empty or there is no overlap with the last interval in merged_intervals if not merged_intervals or merged_intervals[-1][1] < interval[0]: merged_intervals.append(interval) else: # There is overlap, so we merge the current interval with the last one in merged_intervals merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], interval[1])) # Calculate the total length covered by the merged intervals total_length = sum(end - start for start, end in merged_intervals) return total_length"},{"question":"# Context You are developing a notification system for an online marketplace. Users should receive emails about new listings matching their saved search preferences. You need to implement a function that, given a list of users and their preferences, identifies the users who should be notified about a new listing based on the listing\'s properties. # Goal You will create a function `identify_users_to_notify` which should take in the following inputs: - `users`: a dictionary where keys are user IDs, and values are lists of dictionaries representing their saved searches. Each search dictionary contains keys \'category\', \'location\', and \'price_range\' (a tuple of minimum and maximum price). - `new_listing`: a dictionary representing the details of a new listing. It contains keys \'category\', \'location\', and \'price\'. # Function Signature ```python def identify_users_to_notify(users, new_listing): ``` # Requirements 1. The function should return a list of user IDs for users whose saved searches match the new listing. 2. A saved search matches a new listing if: - The \'category\' of the new listing matches the \'category\' in the saved search. - The \'location\' of the new listing matches the \'location\' in the saved search. - The \'price\' of the new listing falls within the \'price_range\' in the saved search. # Instructions 1. Iterate through each user in the `users` dictionary. 2. For each user, iterate through their list of saved searches. 3. Check if the new listing matches any of the user\'s saved searches based on the conditions specified above. 4. If a match is found, add the user ID to the list of users who should be notified. 5. Return the list of user IDs who should be notified. # Example ```python users = { \\"user1\\": [ {\\"category\\": \\"electronics\\", \\"location\\": \\"New York\\", \\"price_range\\": (100, 500)}, {\\"category\\": \\"books\\", \\"location\\": \\"San Francisco\\", \\"price_range\\": (10, 50)} ], \\"user2\\": [ {\\"category\\": \\"electronics\\", \\"location\\": \\"New York\\", \\"price_range\\": (200, 800)} ], \\"user3\\": [ {\\"category\\": \\"fashion\\", \\"location\\": \\"Chicago\\", \\"price_range\\": (20, 100)}, {\\"category\\": \\"books\\", \\"location\\": \\"New York\\", \\"price_range\\": (5, 30)} ] } new_listing = {\\"category\\": \\"electronics\\", \\"location\\": \\"New York\\", \\"price\\": 300} # Should return [\'user1\', \'user2\'] identify_users_to_notify(users, new_listing) ``` # Solution To solve this problem, you will: 1. Initialize an empty list to store the IDs of users who should be notified. 2. Iterate through the `users` dictionary to check each user\'s saved searches. 3. For each saved search, check if the new listing matches based on category, location, and price range. 4. If a match is found, add the user ID to the notification list. 5. Return the list of user IDs.","solution":"def identify_users_to_notify(users, new_listing): Identifies users who should be notified about a new listing. Parameters: users (dict): Dictionary where keys are user IDs and values are lists of dictionaries representing saved searches. new_listing (dict): Dictionary representing the new listing\'s details. Returns: list: List of user IDs who should be notified. notify_users = [] for user_id, searches in users.items(): for search in searches: if (search[\'category\'] == new_listing[\'category\'] and search[\'location\'] == new_listing[\'location\'] and search[\'price_range\'][0] <= new_listing[\'price\'] <= search[\'price_range\'][1]): notify_users.append(user_id) break # Once a match is found for a user, no need to check further searches return notify_users"},{"question":"Create a function that converts temperatures from Fahrenheit to Celsius and categorizes them based on predefined ranges. The function should accept a list of temperatures in Fahrenheit and return a Pandas DataFrame with columns for \'Temperature (F)\', \'Temperature (C)\', and \'Category\'. The categories are as follows: - \\"Cold\\" for temperatures below 32°F - \\"Cool\\" for temperatures between 32°F and 59°F - \\"Warm\\" for temperatures between 60°F and 85°F - \\"Hot\\" for temperatures above 85°F The function should raise an exception for: TypeError if the input list is not composed solely of numerical values (integers or floats). The function should output: DataFrame: A Pandas DataFrame with the original Fahrenheit temperatures, converted Celsius temperatures, and their respective categories. You should write self-contained code starting with: ``` import pandas as pd def convert_and_categorize_temps(temps): ```","solution":"import pandas as pd def convert_and_categorize_temps(temps): # Check if the input list contains only numbers if not all(isinstance(t, (int, float)) for t in temps): raise TypeError(\\"All items in the input list must be integers or floats.\\") # Define the ranges and categories def categorize_temp(temp_f): if temp_f < 32: return \\"Cold\\" elif 32 <= temp_f <= 59: return \\"Cool\\" elif 60 <= temp_f <= 85: return \\"Warm\\" else: return \\"Hot\\" # Convert temperatures and categorize temps_c = [(t - 32) * 5.0/9.0 for t in temps] # Convert to Celsius categories = [categorize_temp(t) for t in temps] # Create DataFrame data = { \'Temperature (F)\': temps, \'Temperature (C)\': temps_c, \'Category\': categories } df = pd.DataFrame(data) return df"},{"question":"You are developing a system that manages a library\'s book inventory. The library\'s inventory is stored in a CSV file, and you need to implement a function `update_book_prices(file_path, updates, sep)` that updates the prices of books based on a dictionary of updates. The dictionary keys are book IDs, and the values are the new prices. Your task is to read the CSV file into a Pandas DataFrame, apply the updates, and then write the updated DataFrame back to the CSV file. # Specifications: 1. **Function Name**: `update_book_prices` 2. **Parameters**: - `file_path` (str): The path to the CSV file containing the book inventory. - `updates` (dict): A dictionary with book IDs as keys and new prices as values. - `sep` (str): The separator used in the CSV file, e.g., \',\' or \';\'. 3. **Returns**: None (the function should write the updated DataFrame back to the CSV file). # Requirements: - Use the `pandas.read_csv` function to read the CSV file. - Update the prices of the books according to the `updates` dictionary. - Use the `pandas.to_csv` function to write the updated DataFrame back to the CSV file, maintaining the original separator. # Example: Suppose you have a CSV file `books.csv` with the following content: ```csv ID,Title,Price 1,The Catcher in the Rye,10.99 2,To Kill a Mockingbird,7.99 3,1984,8.99 ``` And the updates dictionary is: ```python updates = { 1: 12.99, 3: 9.49 } ``` The function call `update_book_prices(\'books.csv\', updates, \',\')` should modify the `books.csv` file to: ```csv ID,Title,Price 1,The Catcher in the Rye,12.99 2,To Kill a Mockingbird,7.99 3,1984,9.49 ``` ```python import pandas as pd def update_book_prices(file_path, updates, sep): # Read the CSV file into a DataFrame df = pd.read_csv(file_path, sep=sep) # Apply price updates for book_id, new_price in updates.items(): df.loc[df[\'ID\'] == book_id, \'Price\'] = new_price # Write the updated DataFrame back to the CSV file df.to_csv(file_path, sep=sep, index=False) ```","solution":"import pandas as pd def update_book_prices(file_path, updates, sep): Updates the prices of books in a CSV file based on a dictionary of updates. Parameters: - file_path (str): The path to the CSV file containing the book inventory. - updates (dict): A dictionary with book IDs as keys and new prices as values. - sep (str): The separator used in the CSV file, e.g., \',\' or \';\'. Returns: - None: The function writes the updated DataFrame back to the CSV file. # Read the CSV file into a DataFrame df = pd.read_csv(file_path, sep=sep) # Apply price updates for book_id, new_price in updates.items(): df.loc[df[\'ID\'] == book_id, \'Price\'] = new_price # Write the updated DataFrame back to the CSV file df.to_csv(file_path, sep=sep, index=False)"},{"question":"You are provided with transaction data in the form of a DataFrame, containing information about the transaction amounts, transaction dates, and user IDs. Your task is to implement a function named `transaction_summary(df)` that computes and displays various summaries related to these transactions using the given DataFrame `df`. The following summaries need to be computed: 1. The total number of transactions. 2. The total, average, minimum, and maximum transaction amounts. 3. The earliest and most recent transaction dates. 4. The total transaction amount per user. You are required to use the following functions from the `pandas` library: - `pandas.DataFrame.sum` - `pandas.DataFrame.mean` - `pandas.DataFrame.min` - `pandas.DataFrame.max` - `pandas.DataFrame.groupby` Function Signature: ```python def transaction_summary(df): ``` Input: - `df` (DataFrame): A DataFrame containing the transaction data with at least the columns \'Transaction Amount\', \'Transaction Date\', and \'User ID\'. Output: The function should print the following information: 1. Total number of transactions. 2. Total, average, minimum, and maximum transaction amounts in a formatted string. 3. The earliest and most recent transaction dates in a formatted string. 4. Total transaction amount per user in a formatted string. Example: ```python import pandas as pd data = { \'Transaction Amount\': [100.5, 200, 150, 300, 50], \'Transaction Date\': pd.to_datetime([\'2021-01-01\', \'2021-01-05\', \'2021-01-03\', \'2021-01-02\', \'2021-01-07\']), \'User ID\': [1, 2, 1, 3, 2] } df = pd.DataFrame(data) transaction_summary(df) ``` Expected output: ``` Transaction Summary: Total number of transactions: 5 Transaction Amount Summary: Total: 801.50 Average: 160.30 Minimum: 50.00 Maximum: 300.00 Transaction Date Summary: Earliest Transaction Date: 2021-01-01 Most Recent Transaction Date: 2021-01-07 Total Transaction Amount per User: User 1: 250.50 User 2: 250.00 User 3: 300.00 ```","solution":"import pandas as pd def transaction_summary(df): Prints the summary of transactions based on given DataFrame. total_number_of_transactions = df.shape[0] total_transaction_amount = df[\'Transaction Amount\'].sum() avg_transaction_amount = df[\'Transaction Amount\'].mean() min_transaction_amount = df[\'Transaction Amount\'].min() max_transaction_amount = df[\'Transaction Amount\'].max() earliest_transaction_date = df[\'Transaction Date\'].min() most_recent_transaction_date = df[\'Transaction Date\'].max() transaction_amount_per_user = df.groupby(\'User ID\')[\'Transaction Amount\'].sum().to_dict() print(\\"Transaction Summary:n\\") print(f\\"Total number of transactions: {total_number_of_transactions}n\\") print(\\"Transaction Amount Summary:\\") print(f\\"Total: {total_transaction_amount:.2f}\\") print(f\\"Average: {avg_transaction_amount:.2f}\\") print(f\\"Minimum: {min_transaction_amount:.2f}\\") print(f\\"Maximum: {max_transaction_amount:.2f}n\\") print(\\"Transaction Date Summary:\\") print(f\\"Earliest Transaction Date: {earliest_transaction_date.date()}\\") print(f\\"Most Recent Transaction Date: {most_recent_transaction_date.date()}n\\") print(\\"Total Transaction Amount per User:\\") for user, amount in transaction_amount_per_user.items(): print(f\\"User {user}: {amount:.2f}\\")"},{"question":"Your task is to write a function named `find_min_length_word` that takes a list of strings and returns the word with the minimum length. If there are multiple words with the same minimum length, return the one that appears first in the list. This function should also ignore any leading or trailing whitespace in each string when determining its length. # Requirements: 1. Use the `strip` method to remove any leading or trailing whitespace from each word. 2. Make sure to handle empty list input by returning an empty string. # Function Signature: ```python def find_min_length_word(words): ``` # Input: - `words` (List of strings): A list of words (strings). # Output: - Returns the word (string) with the minimum length. # Example: ```python words = [\\" banana \\", \\" \\", \\"apple\\", \\"pear\\", \\" peach \\"] result = find_min_length_word(words) print(result) ``` Expected output: ``` pear ``` Write the function `find_min_length_word` to accomplish this task.","solution":"def find_min_length_word(words): Returns the word with the minimum length from a list of strings. If there are multiple words with the same minimum length, returns the one that appears first. Ignores leading or trailing whitespace when determining length. Handles empty list input by returning an empty string. :param words: List of strings :return: Word with the minimum length if not words: return \\"\\" min_word = None min_length = float(\'inf\') for word in words: clean_word = word.strip() if clean_word and len(clean_word) < min_length: min_length = len(clean_word) min_word = clean_word elif clean_word == \'\': continue return min_word if min_word is not None else \\"\\""},{"question":"**Context:** In this problem, you need to implement a function that processes text by tokenizing sentences into words and computing the frequency of each unique word. You will create a function called `word_frequency` that takes a string of text and returns a dictionary mapping each word to its frequency in the text. **Objective:** Create a function `word_frequency` that performs the following steps: 1. Split the input text into tokens (words), using space as the delimiter. 2. Convert each word to lowercase to ensure case insensitivity. 3. Remove any punctuation from the words (assume punctuation includes: .,!?). 4. Calculate the frequency of each unique word. 5. Return a dictionary where the keys are the unique words and the values are their respective counts. **Specification:** - The input text will be a single string. - The output should be a dictionary with words as keys and their frequencies as values. **Example:** ```python text = \\"Hello, world! Hello...\\" print(word_frequency(text)) # Output should be: {\'hello\': 2, \'world\': 1} ``` **Function Signature:** ```python def word_frequency(text: str) -> dict: Calculates the frequency of each word in the given text pass ```","solution":"def word_frequency(text: str) -> dict: Calculates the frequency of each word in the given text. Arguments: text: str -- The input string. Returns: dict -- A dictionary with words as keys and their frequencies as values. import re # Using regular expression to remove punctuation and split the text into words words = re.findall(r\'bw+b\', text.lower()) frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"You are given a dataset of house prices, with each house represented by a series of features. Your task is to implement a function to predict the house prices based on these features using Ridge Regression. The purpose of this question is to make you familiar with the `scikit-learn` library, specifically the `Ridge` regression model, and to practice data handling using the `pandas` library. The dataset, provided as a `pandas DataFrame`, contains various features along with a target column named `\\"Price\\"`, which represents the house price. Your goal is to write a function `predict_house_prices` which takes the dataset as input and splits it into training and test sets, fits a Ridge regression model on the training set, and returns the predicted prices for the test set. Function Signature: ```python def predict_house_prices(df: pd.DataFrame, test_size: float = 0.2, alpha: float = 1.0) -> np.ndarray: pass ``` Requirements: - Use `pandas` to preprocess the data. - Split the data into training and test sets using `train_test_split` from `sklearn.model_selection`. - Use `Ridge` regression model from `sklearn.linear_model` with the provided `alpha` parameter. - Fit the model on the training set and predict prices on the test set. - Return the predicted prices as a NumPy array. Example: ```python import pandas as pd data = { \'feature1\': [0.2, 0.3, 0.4, 0.5], \'feature2\': [1.1, 1.3, 1.5, 1.7], \'feature3\': [10, 15, 10, 20], \'Price\': [100, 150, 200, 250] } df = pd.DataFrame(data) print(predict_house_prices(df)) ``` In this example, the function should: 1. Split the DataFrame into training and test sets. 2. Fit a Ridge regression model to the training data. 3. Return predictions for the test set as a NumPy array.","solution":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import Ridge def predict_house_prices(df: pd.DataFrame, test_size: float = 0.2, alpha: float = 1.0) -> np.ndarray: Predict house prices using Ridge Regression. Parameters: df (pd.DataFrame): DataFrame containing feature columns and a target column \'Price\'. test_size (float): Proportion of the dataset to include in the test split. alpha (float): Regularization strength; must be a positive float. Returns: np.ndarray: Predicted prices for the test set. # Separate features and target X = df.drop(columns=[\'Price\']) y = df[\'Price\'] # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42) # Initialize and train the Ridge regression model ridge_model = Ridge(alpha=alpha) ridge_model.fit(X_train, y_train) # Predict on the test set y_pred = ridge_model.predict(X_test) # Return the predicted prices return y_pred"},{"question":"Design and implement a function named `draw_star_pattern` that uses the `turtle` graphics library to draw a pattern composed of stars in a circular arrangement. The stars should be evenly distributed along the circumference of an imaginary circle. Here are the specific requirements for the function `draw_star_pattern`: 1. Set up a drawing canvas with a width of 600 pixels and a height of 600 pixels. 2. Set the background color of the canvas to dark blue. 3. Ensure the drawing pen color is yellow and the pen size is 2 pixels. 4. The function should draw 12 stars, each with a side length of 50 pixels, positioned along the circumference of an imaginary circle with a radius of 200 pixels. The stars should be evenly spaced, and the center of the circle should be at coordinates `(0, 0)`. 5. After finishing the drawing, the function should call the `turtle.done()` method to indicate completion of the drawing. The function should use the following turtle graphics methods: - `turtle.setup(width, height)` - `turtle.bgcolor(color)` - `turtle.pensize(width)` - `turtle.done()` For the purpose of drawing a single star, assume you have a helper function `draw_star(side_length, x, y)` that draws a star of size `side_length` with the center at coordinates `(x, y)`. Your task is to implement the `draw_star_pattern` function by making appropriate use of the required library functions and ensuring the stars are correctly positioned.","solution":"import turtle import math def draw_star(side_length, x, y): Draws a star with the given side length at the specified coordinates (x, y). angle = 144 turtle.penup() turtle.goto(x, y) turtle.pendown() for _ in range(5): turtle.forward(side_length) turtle.right(angle) def draw_star_pattern(): Draws a pattern of 12 stars in a circular arrangement. # Setup the drawing canvas turtle.setup(600, 600) turtle.bgcolor(\'darkblue\') turtle.pensize(2) turtle.color(\'yellow\') # Number of stars and radius of the circle num_stars = 12 radius = 200 # Angle between each star angle_between_stars = 360 / num_stars for i in range(num_stars): angle = math.radians(i * angle_between_stars) x = radius * math.cos(angle) y = radius * math.sin(angle) draw_star(50, x, y) turtle.done() # Note that running this function in an automated test is not feasible # because it requires a graphical context. However, the function is # designed to be called to display the pattern."},{"question":"You are required to create a function `find_long_words()` that identifies all words in a given text file that are longer than a specified length and writes these words to a new file. The function should read from an existing text file, extract words, filter out the long words based on the given length criteria, and save these filtered words in a new file, ensuring no word is repeated. Here are the detailed steps the function should perform: 1. Open a specified text file in read mode. 2. Extract all words in the text file. Words are defined as sequences of alphabetic characters separated by non-alphabetic characters. 3. Identify words that exceed a specified length. 4. Write these long words to a new text file, ensuring each word appears only once in the output file. You need to use the `os` and `re` packages to accomplish this task. The function signature should be: ```python def find_long_words(input_file: str, output_file: str, length: int) -> None: pass ``` **Input:** - `input_file` (str): The path to the input text file. - `output_file` (str): The path to the output text file where the filtered words will be written. - `length` (int): The minimum length of words to be included in the output file. **Assumptions:** - The input file path and file are always valid. - Words are case-insensitive (e.g., \'Word\' and \'word\' are considered the same and should appear only once in the output). - The output file should contain one word per line. - Punctuation and other non-alphabetic characters separate words. Here is a detailed breakdown of the method you will use: - **open(filename, mode)**: This function opens a file and returns a corresponding file object. - **re.findall(pattern, string)**: This function returns all non-overlapping matches of the pattern in the string as a list of strings. Example: Given an input file \\"input.txt\\" with content: ``` Hello world! This is a test file. The goal is to find all words that are longer than five letters. ``` If the `length` is specified as 5, the `find_long_words()` function should write the following words to the output file \\"output.txt\\": ``` longer letters ``` The function should be implemented such that it correctly handles different input and output file paths and varying length criteria.","solution":"import os import re def find_long_words(input_file: str, output_file: str, length: int) -> None: Reads words from input_file, filters out words longer than the specified length, and writes the unique long words to output_file. Args: input_file (str): The path to the input text file. output_file (str): The path to the output text file where the filtered words will be written. length (int): The minimum length of words to be included in the output file. Returns: None # Read the content of the input file with open(input_file, \'r\') as file: content = file.read() # Extract words using regular expression words = re.findall(r\'b[a-zA-Z]+b\', content) # Filter out words longer than the specified length long_words = {word.lower() for word in words if len(word) > length} # Write the unique long words to the output file with open(output_file, \'w\') as file: for word in sorted(long_words): file.write(f\\"{word}n\\")"},{"question":"You are tasked with writing a function `remove_nth_last_occurrence` that removes the nth last occurrence of a specified element from a list. Your function should ensure that only the nth last occurrence is removed and all other occurrences remain intact. Here is what your function should do: 1. **Identify the nth last occurrence** of the element. 2. Remove this identified occurrence from the list. 3. If the element does not have an nth last occurrence, return the list unchanged. **Function Signature:** ```python def remove_nth_last_occurrence(lst: list, elem: int, n: int) -> list: pass ``` **Input:** - A list of integers `lst`. - An integer `elem` that specifies the element to be removed. - An integer `n` that indicates which last occurrence to remove (1 being the last occurrence, 2 being the second to last, and so on). **Output:** - A list with the nth last occurrence of `elem` removed, or the original list if the element does not have an nth last occurrence. **Example:** ```python input_list = [4, 5, 6, 4, 7, 4, 8, 4] element = 4 n = 2 print(remove_nth_last_occurrence(input_list, element, n)) # Expected Output: [4, 5, 6, 4, 7, 8, 4] input_list = [1, 2, 3, 4, 5] element = 6 n = 1 print(remove_nth_last_occurrence(input_list, element, n)) # Expected Output: [1, 2, 3, 4, 5] ``` **Explanation:** - In the first example, the second to last occurrence of the element `4` is removed, resulting in the modified list `[4, 5, 6, 4, 7, 8, 4]`. - In the second example, the element `6` does not exist in the list, so the original list `[1, 2, 3, 4, 5]` is returned unchanged.","solution":"def remove_nth_last_occurrence(lst: list, elem: int, n: int) -> list: occurrences = [i for i, x in enumerate(lst) if x == elem] if len(occurrences) < n: return lst nth_last_occurrence_index = occurrences[-n] return lst[:nth_last_occurrence_index] + lst[nth_last_occurrence_index + 1:]"},{"question":"Create a function named `replace_placeholders` that replaces placeholders in a template string with values from a dictionary. The placeholders in the template are denoted by the format `{placeholder_name}`. The function should take a template string and a dictionary as input and return the formatted string with placeholders replaced by their corresponding values from the dictionary. Specifically, you need to: 1. Iterate through the dictionary and replace each placeholder in the template string with its corresponding value. 2. Ensure that the function handles the case where a placeholder in the template does not have a corresponding value in the dictionary by leaving the placeholder unchanged. The `replace_placeholders` function should have the following signature: ```python def replace_placeholders(template: str, values: dict) -> str: ``` # Parameters: - `template` (str): The template string containing placeholders. - `values` (dict): A dictionary where the keys are placeholder names and the values are the values to be inserted into the template. # Example Input: ```python template = \\"Hello, {name}! You have {count} new messages.\\" values = { \\"name\\": \\"Alice\\", \\"count\\": 5 } ``` # Expected Output: ```python \\"Hello, Alice! You have 5 new messages.\\" ``` # Additional Notes: - The function should be case-sensitive with respect to placeholder names. - The function should handle templates with multiple instances of the same placeholder correctly. - If a placeholder in the template does not exist in the dictionary, it should remain as it is in the template string. # Example Use Case: If the input template is `\\"Dear {user}, your order {order_number} has been shipped.\\"` and the dictionary is `{\\"user\\": \\"Bob\\", \\"order_number\\": \\"12345\\"}`, calling `replace_placeholders(template, values)` should return `\\"Dear Bob, your order 12345 has been shipped.\\"`.","solution":"def replace_placeholders(template: str, values: dict) -> str: Replaces placeholders in a template string with values from a dictionary. Parameters: - template (str): The template string containing placeholders. - values (dict): A dictionary where the keys are placeholder names and the values are the values to be inserted into the template. Returns: - str: The formatted template string with placeholders replaced by their corresponding values from the dictionary. for key, value in values.items(): template = template.replace(f\'{{{key}}}\', str(value)) return template"},{"question":"You are required to write a function named `flatten_dict` that takes a nested dictionary and flattens it so that the output is a single-level dictionary with keys indicating the path taken through the original nested dictionary. # Function Signature ```python def flatten_dict(d: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: ``` # Parameters - `d` (dict): A nested dictionary to be flattened. - `parent_key` (str, optional): A string used to indicate the key of the parent dictionary. It defaults to an empty string. - `sep` (str, optional): A string used as a separator for nested keys. It defaults to a period `\'.\'`. # Returns - A single-level dictionary where each key represents the path to the corresponding value in the nested dictionary. # Example ```python >>> flatten_dict({\'a\': 1, \'b\': {\'c\': 2, \'d\': {\'e\': 3}}}) {\'a\': 1, \'b.c\': 2, \'b.d.e\': 3} >>> flatten_dict({\'x\': {\'y\': {\'z\': 4}}}) {\'x.y.z\': 4} ``` # Requirements - Use recursion to handle the nesting levels of the dictionary. - Ensure the keys in the flattened dictionary are constructed correctly using the separator. - The function should not modify the original dictionary.","solution":"def flatten_dict(d: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Use the K-means clustering algorithm to classify a given dataset into a specified number of clusters. The function should return the cluster centers and the labels assigned to each data point. The data is provided as a NumPy array, and the number of clusters is given as an integer. The function should output: tuple: A tuple containing: cluster_centers: A NumPy array with the coordinates of the cluster centers. labels: A NumPy array with the label assigned to each data point indicating its cluster. You should write self-contained code starting with: ``` import numpy as np from sklearn.cluster import KMeans def task_func(data_array, num_clusters): ```","solution":"import numpy as np from sklearn.cluster import KMeans def task_func(data_array, num_clusters): Perform K-means clustering on the given data array into the specified number of clusters. Parameters: data_array (np.ndarray): The data array to be clustered. num_clusters (int): The number of clusters to form. Returns: tuple: A tuple containing: cluster_centers (np.ndarray): Coordinates of the cluster centers. labels (np.ndarray): Label assigned to each data point indicating its cluster. kmeans = KMeans(n_clusters=num_clusters, random_state=0) kmeans.fit(data_array) return kmeans.cluster_centers_, kmeans.labels_"},{"question":"**Title: Implementing a Simple Decision Tree Classifier** **Overview:** In this problem, you need to implement a function called `decision_tree_classifier` which performs a simple decision tree classification given a dataset. The function should use the NumPy and Pandas libraries for handling data operations. You are required to leverage the `pandas.DataFrame`, `numpy.unique`, and `numpy.argmax` functions to achieve this goal. **Context:** A decision tree classifier is a machine learning model used for classification tasks, where the model splits the data into subsets based on the value of input features. The decision is built in the form of a tree with nodes representing the features and edges representing the decision rules. **Function Signature:** ```python def decision_tree_classifier(data: pd.DataFrame, target: str) -> Any: ``` **Parameters:** - `data`: A Pandas DataFrame containing the dataset, where each column represents a feature and each row represents a data point. - `target`: A string representing the name of the target column (the column to predict). **Returns:** - An object representing the decision tree. The object should have a method `predict`, which takes a Pandas DataFrame as input and returns a list of predictions for each row. **Requirements:** 1. You must use the `pandas.DataFrame` to handle the dataset. 2. You must use the `numpy.unique` function to find unique values in the target column. 3. Implement the ID3 algorithm (Iterative Dichotomiser 3) for building the decision tree. 4. Ensure the decision tree can handle both numerical and categorical data. **Example:** ```python import pandas as pd data = pd.DataFrame({ \'Outlook\': [\'Sunny\', \'Sunny\', \'Overcast\', \'Rain\', \'Rain\', \'Rain\', \'Overcast\', \'Sunny\', \'Sunny\', \'Rain\', \'Sunny\', \'Overcast\', \'Overcast\', \'Rain\'], \'Temperature\': [\'Hot\', \'Hot\', \'Hot\', \'Mild\', \'Cool\', \'Cool\', \'Cool\', \'Mild\', \'Cool\', \'Mild\', \'Mild\', \'Mild\', \'Hot\', \'Mild\'], \'Humidity\': [\'High\', \'High\', \'High\', \'High\', \'Normal\', \'Normal\', \'Normal\', \'High\', \'Normal\', \'Normal\', \'Normal\', \'High\', \'Normal\', \'High\'], \'Windy\': [False, True, False, False, False, True, True, False, False, False, True, True, False, True], \'PlayTennis\': [\'No\', \'No\', \'Yes\', \'Yes\', \'Yes\', \'No\', \'Yes\', \'No\', \'Yes\', \'Yes\', \'Yes\', \'Yes\', \'Yes\', \'No\'] }) classifier = decision_tree_classifier(data, \'PlayTennis\') predictions = classifier.predict(pd.DataFrame({ \'Outlook\': [\'Sunny\', \'Rain\'], \'Temperature\': [\'Cool\', \'Hot\'], \'Humidity\': [\'Normal\', \'High\'], \'Windy\': [True, False] })) print(predictions) # Output: [\'Yes\', \'No\'] ``` **Hints:** - Use entropy and information gain to select the best feature at each node. - Handle missing values by ignoring the row or imputing a sensible value. - If no information gain is achieved with a feature, treat it as a leaf node with the most common class in the subset.","solution":"import pandas as pd import numpy as np class TreeNode: def __init__(self, feature=None, threshold=None, left=None, right=None, *, value=None): self.feature = feature self.threshold = threshold self.left = left self.right = right self.value = value def is_leaf_node(self): return self.value is not None def entropy(y): hist = np.bincount(y) ps = hist / len(y) return -np.sum([p * np.log2(p) for p in ps if p > 0]) def split(data, column, threshold): left = data[data[column] <= threshold] right = data[data[column] > threshold] return left, right def best_split(data, target): best_gain = -1 best_col = None best_threshold = None for col in data.columns: if col == target: continue thresholds = data[col].unique() for threshold in thresholds: left, right = split(data, col, threshold) if len(left) == 0 or len(right) == 0: continue left_entropy = entropy(left[target].values) right_entropy = entropy(right[target].values) gain = entropy(data[target].values) - (len(left) / len(data) * left_entropy + len(right) / len(data) * right_entropy) if gain > best_gain: best_gain = gain best_col = col best_threshold = threshold return best_col, best_threshold def build_tree(data, target, depth=0): y = data[target] if len(np.unique(y)) == 1: return TreeNode(value=y.iloc[0]) if len(data) == 0 or len(data.columns) == 1: return TreeNode(value=np.bincount(y).argmax()) col, threshold = best_split(data, target) if col is None: return TreeNode(value=np.bincount(y).argmax()) left, right = split(data, col, threshold) left_tree = build_tree(left, target, depth+1) right_tree = build_tree(right, target, depth+1) return TreeNode(col, threshold, left_tree, right_tree) class DecisionTreeClassifier: def __init__(self): self.tree = None def fit(self, data, target): self.tree = build_tree(data, target) def predict_one(self, x, node): if node.is_leaf_node(): return node.value if x[node.feature] <= node.threshold: return self.predict_one(x, node.left) else: return self.predict_one(x, node.right) def predict(self, data): return [self.predict_one(row, self.tree) for _, row in data.iterrows()] def decision_tree_classifier(data: pd.DataFrame, target: str): clf = DecisionTreeClassifier() clf.fit(data, target) return clf"},{"question":"You are given a dataset in CSV format that contains information about employees in a company. Each row in the CSV file represents an employee and has the following columns: `ID`, `Name`, `Age`, `Department`, and `Salary`. Your task is to write a function named `filter_employees` that reads the CSV file, filters the employees based on specific criteria, and writes the filtered data to a new CSV file. The function should perform the following steps: 1. Read the content of the provided CSV file. 2. Filter the employees who meet the following criteria: - Age is greater than a specified value. - Department matches a specified value. - Salary is within a specified range (inclusive). 3. Save the filtered data to a new file named `filtered_employees.csv`. Use the required libraries `csv` and `pathlib.Path` to handle file operations and ensure your function meets the following requirements: - If no file is provided or if the file does not exist, the function should gracefully exit with an appropriate message. - Use `pathlib.Path` for file operations. Function Signature: ```python def filter_employees(filepath: str, min_age: int, department: str, min_salary: float, max_salary: float): ``` **Example Usage:** ```python filter_employees(\\"employees.csv\\", 30, \\"Engineering\\", 50000, 100000) ``` **The function should follow these steps:** - Check if a valid file path is provided through the `filepath` argument. - Read the content of the file and filter the employees based on the provided criteria. - Write the filtered data to a new CSV file named `filtered_employees.csv` in the same directory as the original file.","solution":"import csv from pathlib import Path def filter_employees(filepath: str, min_age: int, department: str, min_salary: float, max_salary: float): Filters employees from a CSV file based on specified criteria and writes the filtered data to a new CSV file. Args: filepath (str): The path to the input CSV file. min_age (int): Minimum age of employees to be included. department (str): The department to match. min_salary (float): Minimum salary of employees to be included. max_salary (float): Maximum salary of employees to be included. path = Path(filepath) if not path.is_file(): print(\\"The file does not exist.\\") return with path.open(mode=\'r\', newline=\'\') as infile: reader = csv.DictReader(infile) filtered_employees = [ row for row in reader if ( int(row[\'Age\']) > min_age and row[\'Department\'] == department and min_salary <= float(row[\'Salary\']) <= max_salary ) ] output_file = path.parent / \\"filtered_employees.csv\\" with output_file.open(mode=\'w\', newline=\'\') as outfile: writer = csv.DictWriter(outfile, fieldnames=reader.fieldnames) writer.writeheader() writer.writerows(filtered_employees)"},{"question":"Design a Python function named `draw_trapezoid_and_calculate_area` that uses the `matplotlib` library to plot a trapezoid based on given vertices and calculate its area. The function will utilize basic geometric properties to compute the area of the trapezoid. The function should take one positional argument, `vertices`, which is a list of four tuples representing the coordinates of the trapezoid\'s vertices in the order [(x1, y1), (x2, y2), (x3, y3), (x4, y4)]. Functional Requirements: 1. Create a plot with appropriate axis limits to visualize the trapezoid. 2. Plot the trapezoid by connecting the vertices with line segments. Use a different color to fill the trapezoid to distinguish it clearly. 3. Calculate the area of the trapezoid using the formula for the area of a quadrilateral. 4. Display the calculated area as text on the plot near the center of the trapezoid. 5. Use the `matplotlib.pyplot.text` function to annotate the plot with the area value, ensuring it is clearly readable. The goal of this problem is to reinforce understanding of plotting polygons with `matplotlib` and performing geometric calculations in Python. Ensure proper formatting so that the function works without errors and meets all specified requirements.","solution":"import matplotlib.pyplot as plt def draw_trapezoid_and_calculate_area(vertices): Plots a trapezoid based on given vertices and calculates its area. vertices: list of four tuples representing the coordinates of the trapezoid\'s vertices in the order [(x1, y1), (x2, y2), (x3, y3), (x4, y4)]. Returns: area: float, area of the trapezoid. # Unpack the vertices (x1, y1), (x2, y2), (x3, y3), (x4, y4) = vertices # Plot the trapezoid plt.figure() xs, ys = zip(*vertices + [vertices[0]]) # to close the loop of vertices back to the start plt.plot(xs, ys, \'b-\', linewidth=2) plt.fill(xs, ys, \'skyblue\', alpha=0.5) # Calculate the area of the trapezoid using the shoelace formula for a convex quadrilateral area = 0.5 * abs(x1*y2 + x2*y3 + x3*y4 + x4*y1 - y1*x2 - y2*x3 - y3*x4 - y4*x1) # Annotate the plot with the area center_x = sum([x1, x2, x3, x4]) / 4 center_y = sum([y1, y2, y3, y4]) / 4 plt.text(center_x, center_y, f\'Area = {area:.2f}\', ha=\'center\', fontsize=12, bbox=dict(facecolor=\'white\', alpha=0.5)) # Set axis limits for better visual representation plt.xlim(min(xs) - 1, max(xs) + 1) plt.ylim(min(ys) - 1, max(ys) + 1) # Show the plot plt.xlabel(\'X-axis\') plt.ylabel(\'Y-axis\') plt.grid(True) plt.title(\'Trapezoid Plot with Area Annotation\') plt.show() return area"},{"question":"You are asked to implement a function that simulates a random walk and determines the probability of returning to the origin after a given number of steps. This exercise focuses on understanding random processes and leveraging libraries in Python to perform simulations. The random walk takes place on a 2D grid, and at each step, the walker can move one unit up, down, left, or right with equal probability. Write a function `random_walk_probability(n_steps, n_simulations)` that calculates the probability of the walker returning to the origin after `n_steps` steps, based on `n_simulations` independent simulations. - `n_steps`: An integer representing the number of steps the walker takes in each simulation. - `n_simulations`: An integer representing the number of simulations to run. Your function should: 1. Perform `n_simulations` random walk simulations, each consisting of `n_steps` steps. 2. Record the number of times the walker returns to the origin after completing the steps. 3. Calculate and return the probability of returning to the origin after `n_steps`. Use the `numpy` library to assist with randomization and array operations. Example usage: ```python probability = random_walk_probability(10, 10000) print(\\"Probability of returning to origin after 10 steps:\\", probability) ``` Expected logic: - Initialize a counter to track the number of returns to the origin. - For each simulation, initialize the walker\'s position to the origin. - Randomly generate steps and update the walker\'s position accordingly. - Check if the walker is back at the origin after `n_steps` steps and update the counter. - Calculate the final probability as the ratio of successful returns to the total number of simulations.","solution":"import numpy as np def random_walk_probability(n_steps, n_simulations): Calculate the probability of returning to the origin after `n_steps` steps in a 2D random walk based on `n_simulations` independent simulations. Args: - n_steps (int): Number of steps for each walk. - n_simulations (int): Number of simulations to run. Returns: - float: Probability of returning to the origin after `n_steps`. origin_returns = 0 # Counter for number of returns to origin for _ in range(n_simulations): # Start at origin position = np.zeros(2) # Perform the random walk for _ in range(n_steps): step = np.random.choice([\\"up\\", \\"down\\", \\"left\\", \\"right\\"]) if step == \\"up\\": position[1] += 1 elif step == \\"down\\": position[1] -= 1 elif step == \\"left\\": position[0] -= 1 elif step == \\"right\\": position[0] += 1 # Check if back to origin if np.array_equal(position, [0, 0]): origin_returns += 1 # Calculate the probability return origin_returns / n_simulations"},{"question":"Extract and count the occurrences of each unique word in a given paragraph. The function should first strip out any punctuation, then split the text into individual words. It should return a dictionary where keys are the unique words and values are the counts of those words in the text, ignoring case. The function should output with: dict: A dictionary with unique words as keys and their occurrences as values. You should write self-contained code starting with: ``` import re from collections import Counter def count_words(paragraph): ```","solution":"import re from collections import Counter def count_words(paragraph): # Remove punctuation using regex cleaned_text = re.sub(r\'[^ws]\', \'\', paragraph) # Convert text to lower case to count words ignoring case cleaned_text = cleaned_text.lower() # Split the text into words words = cleaned_text.split() # Use Counter from collections to count occurrences of each word word_count = Counter(words) return dict(word_count)"},{"question":"Design a program that generates a heatmap for a grid of data points where each cell\'s color represents the aggregated sum of values from a list of randomly distributed 2D point values. Specifically, create a function that generates a specified number of random 2D points within a defined range, assigns random values to each point, and then aggregates these values into a grid. The grid\'s cells\' color should represent the total value aggregated from the points falling within each cell. The function should output with: matplotlib.axes.Axes: An Axes object with the heatmap. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def generate_heatmap(grid_size=(10, 10), num_points=100, value_range=(0, 100)): ```","solution":"import numpy as np import matplotlib.pyplot as plt def generate_heatmap(grid_size=(10, 10), num_points=100, value_range=(0, 100)): Generates a heatmap for a grid of data points. Parameters: - grid_size (tuple): Size of the grid (rows, cols). - num_points (int): Number of random 2D points. - value_range (tuple): Range (min, max) of random values assigned to the points. Returns: - matplotlib.axes.Axes: An Axes object with the heatmap. grid = np.zeros(grid_size) rows, cols = grid_size # Generate random 2D points and values points = np.random.randint(low=0, high=rows, size=(num_points, 2)) values = np.random.randint(low=value_range[0], high=value_range[1], size=num_points) # Aggregate values into the grid for point, value in zip(points, values): x, y = point grid[x, y] += value # Create the heatmap fig, ax = plt.subplots() cax = ax.matshow(grid, cmap=\'hot\') fig.colorbar(cax) return ax"},{"question":"Given two lists, create a function to merge them into a dictionary. The first list contains keys, and the second list contains values. Ensure every key has a corresponding value. If the lists are of unequal lengths, raise a ValueError indicating the mismatch. The function should output: dict: A dictionary mapping the keys to their corresponding values. You should write self-contained code starting with: ``` def merge_lists_to_dict(keys, values): ```","solution":"def merge_lists_to_dict(keys, values): Merges two lists into a dictionary where the first list contains keys and the second list contains values. Raises a ValueError if the lists are of unequal lengths. :param keys: List of keys. :param values: List of values. :return: Dictionary mapping keys to values. if len(keys) != len(values): raise ValueError(\\"The length of keys and values must be the same.\\") return dict(zip(keys, values))"},{"question":"You are tasked with writing a function `word_frequency_analysis` that takes in two parameters: 1. `documents`: A list of strings, where each string represents a document. 2. `top_n`: An integer denoting the number of top frequent words to return. The goal of the function is to analyze the collection of documents and return the top `n` most frequent words along with their frequencies. The analysis should include the following steps: 1. Tokenize the words in the documents by splitting at whitespace and converting to lowercase. 2. Count the frequency of each word across all documents. 3. Sort the words by their frequencies in descending order. If two words have the same frequency, sort them alphabetically. 4. Return the top `n` words along with their frequencies as a list of tuples. **Note:** - Use `collections.Counter` for counting the word frequencies. - Ignore punctuation and assume words are separated by whitespace. Your function should return a list of tuples, where each tuple contains two elements: 1. The word (a string). 2. The frequency of the word (an integer). **Function Signature:** ```python def word_frequency_analysis(documents, top_n): pass ``` **Example:** ```python documents = [ \\"Hello world, hello\\", \\"hello Python world\\", \\"Python is great\\" ] top_n = 3 result = word_frequency_analysis(documents, top_n) print(result) # Output: [(\'hello\', 3), (\'world\', 2), (\'python\', 2)] ``` #","solution":"from collections import Counter import re def word_frequency_analysis(documents, top_n): Analyzes the collection of documents and returns the top n most frequent words along with their frequencies. # Combine all documents into one large string combined_text = \\" \\".join(documents).lower() # Tokenize words while ignoring punctuations words = re.findall(r\'bw+b\', combined_text) # Count the frequency of each word word_counts = Counter(words) # Sort the words by frequency (descending) and alphabetically if frequencies are the same sorted_words = sorted(word_counts.items(), key=lambda x: (-x[1], x[0])) # Return the top n words along with their frequencies return sorted_words[:top_n]"},{"question":"You are working on optimizing the performance of a video streaming platform. One task involves calculating the average buffering time for a sequence of video segments. Each segment is represented as a list of tuples where each tuple contains two integers: the timestamp when buffering started and the timestamp when buffering ended. Your goal is to write a function `average_buffering_time(buffering_segments)` that calculates the average buffering time across all segments. # Function Signature ```python def average_buffering_time(buffering_segments: List[Tuple[int, int]]) -> float: # implementation goes here ``` # Steps 1. Calculate the buffering time for each segment by subtracting the start timestamp from the end timestamp. 2. Sum all buffering times and divide by the number of segments to obtain the average. # Example ```python buffering_segments = [(10, 15), (20, 25), (30, 35)] print(average_buffering_time(buffering_segments)) # Output should be 5.0 ``` # Constraints - You may assume that the list of segments, `buffering_segments`, is non-empty. - The timestamps in each tuple will be positive integers where the end timestamp is strictly greater than the start timestamp. - The result should be a floating-point number rounded to two decimal places. # Requirements The function should efficiently calculate the average buffering time, considering both accuracy and performance.","solution":"from typing import List, Tuple def average_buffering_time(buffering_segments: List[Tuple[int, int]]) -> float: Calculates the average buffering time from a list of buffering segments. Parameters: buffering_segments (List[Tuple[int, int]]): A list of tuples where each tuple contains two integers: the start timestamp and the end timestamp of buffering. Returns: float: The average buffering time across all segments, rounded to two decimal places. total_buffering_time = sum(end - start for start, end in buffering_segments) average_time = total_buffering_time / len(buffering_segments) return round(average_time, 2)"},{"question":"**In this problem, you are required to implement a function that calculates the angle (in degrees) between two given vectors. The vectors will be represented as lists of equal length containing integer or float values. The angle between two vectors can be calculated using the dot product and the magnitude (Euclidean norm) of the vectors. Given two vectors **A** and **B**, the formula to find the angle θ between them is: [ theta = cos^{-1}left( frac{A cdot B}{|A| |B|} right) ] Where: - ( A cdot B ) is the dot product of vectors **A** and **B**. - ( |A| ) and ( |B| ) are the magnitudes of vectors **A** and **B** respectively. You need to use the `numpy` library functions to compute the dot product and magnitudes, and the `numpy.arccos` function to compute the inverse cosine. **Requirements**: 1. You must use only the numpy functions: `numpy.dot`, `numpy.linalg.norm`, and `numpy.arccos`. 2. Your function should take two lists `a` and `b` as inputs and return a single float representing the angle in degrees between the vectors. **Function Signature**: ```python import numpy as np def vector_angle(a, b): # Your implementation here ``` **Example**: ```python a = [1, 0] b = [0, 1] result = vector_angle(a, b) print(result) # Expected output: 90.0 ``` **Hint**: - Use `np.dot` to compute the dot product of the two vectors. - Use `np.linalg.norm` to compute the magnitudes (Euclidean norms) of the vectors. - Use `np.arccos` and `np.degrees` to compute the angle in degrees. **Objective**: This problem will help you understand how to use numpy operations to perform vector calculations, which is essential in various fields including physics, computer graphics, and machine learning.","solution":"import numpy as np def vector_angle(a, b): Calculate the angle in degrees between vectors a and b. Parameters: a (list of int/float): The first vector. b (list of int/float): The second vector. Returns: float: The angle between the vectors in degrees. # Convert lists to numpy arrays vec_a = np.array(a) vec_b = np.array(b) # Calculate dot product dot_product = np.dot(vec_a, vec_b) # Calculate magnitudes magnitude_a = np.linalg.norm(vec_a) magnitude_b = np.linalg.norm(vec_b) # Calculate the cosine of the angle cos_theta = dot_product / (magnitude_a * magnitude_b) # Calculate the angle in radians theta_radians = np.arccos(cos_theta) # Convert the angle to degrees theta_degrees = np.degrees(theta_radians) return theta_degrees"},{"question":"Given a dataset of unique word pairs representing synonyms, your task is to write a function that checks if two given words are synonyms of each other, directly or indirectly. Two words are considered synonymous if: 1. They are directly listed as pairs in the dataset. 2. They share a common synonym (transitivity). **Example:** Given word pairs `[(\\"fast\\", \\"quick\\"), (\\"quick\\", \\"speedy\\"), (\\"speedy\\", \\"rapid\\"), (\\"slow\\", \\"sluggish\\")]`, \\"fast\\" and \\"speedy\\" are synonyms because they are connected through \\"quick\\". **Function Signature:** ```python def are_synonyms(synonym_pairs, word1, word2): Determines if two words are synonyms based on given synonym pairs. :param synonym_pairs: List of tuples, where each tuple contains two words that are synonyms. :param word1: A string representing the first word. :param word2: A string representing the second word. :return: True if the words are synonyms, False otherwise. # Your code here ``` **Instructions:** 1. Use a graph traversal algorithm (e.g., Depth First Search or Breadth First Search) to determine if a path exists between the two words. 2. Create a graph representation from the synonym pairs. 3. Implement the traversal to check the connectivity between `word1` and `word2`. **Example Usage:** ```python synonym_pairs = [(\\"fast\\", \\"quick\\"), (\\"quick\\", \\"speedy\\"), (\\"speedy\\", \\"rapid\\"), (\\"slow\\", \\"sluggish\\")] print(are_synonyms(synonym_pairs, \\"fast\\", \\"speedy\\")) # Output: True print(are_synonyms(synonym_pairs, \\"fast\\", \\"slow\\")) # Output: False ``` **Important:** - Handle cases where words are not present in any of the pairs. - Make sure to avoid cycles and redundant checks in your traversal algorithm.","solution":"from collections import deque, defaultdict def are_synonyms(synonym_pairs, word1, word2): Determines if two words are synonyms based on given synonym pairs. :param synonym_pairs: List of tuples, where each tuple contains two words that are synonyms. :param word1: A string representing the first word. :param word2: A string representing the second word. :return: True if the words are synonyms, False otherwise. if word1 == word2: return True # Build the graph from synonym pairs synonym_graph = defaultdict(set) for word_a, word_b in synonym_pairs: synonym_graph[word_a].add(word_b) synonym_graph[word_b].add(word_a) # Perform Breadth First Search (BFS) to find connectivity queue = deque([word1]) visited = set([word1]) while queue: current_word = queue.popleft() for neighbor in synonym_graph[current_word]: if neighbor == word2: return True if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return False"},{"question":"You are tasked to implement a function for a sorting challenge that modifies a traditional sorting algorithm to meet certain criteria. The goal of the function is to sort a list of integers such that all even numbers come before all odd numbers while maintaining the relative order of both even and odd numbers as they appeared in the original list. Your task is to implement the function `custom_sort(numbers)` which: 1. Takes a list of integers as input. 2. Separates the even numbers and the odd numbers from the list. 3. Sorts the even numbers while maintaining their relative order from the original list. 4. Sorts the odd numbers while maintaining their relative order from the original list. 5. Returns a new list with all even numbers followed by all odd numbers. Function signature: `def custom_sort(numbers: List[int]) -> List[int]` **Explanation of variables and requirements**: - `numbers`: A list of integers to be sorted according to the given criteria. Examples: ```python print(custom_sort([4, 1, 3, 2, 5, 6])) ``` This should return `[4, 2, 6, 1, 3, 5]` because: - Even numbers: [4, 2, 6] (relative order maintained) - Odd numbers: [1, 3, 5] (relative order maintained) ```python print(custom_sort([7, 8, 5, 6, 4, 3])) ``` This should return `[8, 6, 4, 7, 5, 3]` because: - Even numbers: [8, 6, 4] (relative order maintained) - Odd numbers: [7, 5, 3] (relative order maintained)","solution":"from typing import List def custom_sort(numbers: List[int]) -> List[int]: evens = [num for num in numbers if num % 2 == 0] odds = [num for num in numbers if num % 2 != 0] return evens + odds"},{"question":"You are tasked with creating a function named `find_second_largest` that will find and return the second largest number in a list of integers. **Function Signature:** ```python def find_second_largest(nums: list) -> int: ``` **Parameters:** - `nums` (list): A list of integers from which the second largest number needs to be found. **Returns:** - (int): The second largest number in the list. **Instructions:** 1. Ensure that the function handles edge cases where the list may have duplicate values. 2. If the list length is less than 2, or all elements are identical and thus do not have a second largest distinct number, return `None`. **Example Usage:** ```python nums = [10, 5, 7, 12, 7, 12] result = find_second_largest(nums) print(result) # Example output: 10 ``` **Constraints:** - Do not use built-in functions that directly solve the problem. - Aim for a solution with O(n) time complexity.","solution":"def find_second_largest(nums: list) -> int: Returns the second largest number in a list of integers. If the list length is less than 2 or all elements are identical, returns None. if len(nums) < 2: return None first_max = second_max = float(\'-inf\') for num in nums: if num > first_max: second_max = first_max first_max = num elif first_max > num > second_max: second_max = num return second_max if second_max != float(\'-inf\') else None"},{"question":"You need to write a function called `find_shared_elements` that accepts two Python lists and returns a new list containing the elements that both input lists have in common. The order of the elements in the output list should be the same as their order of appearance in the first input list. Function Signature: ```python def find_shared_elements(list1, list2): # Function body to be implemented ``` Parameters: - `list1` (list): The first list of elements. - `list2` (list): The second list of elements. Requirements: 1. The function should return a list that only contains the elements that are present in both `list1` and `list2`. 2. The order of elements in the resulting list should match the order they appear in `list1`. 3. The function should handle cases where lists contain different types of elements (integers, strings, etc.). 4. Avoid using any built-in set operations or libraries specific to intersection operations. # Example: Here is an example of how your function will be used: ```python # Example 1: list1 = [1, 2, 2, 3, 4, 5] list2 = [2, 3, 5, 6] print(find_shared_elements(list1, list2)) # Output: [2, 2, 3, 5] # Example 2: list1 = [\'a\', \'b\', \'c\', \'d\'] list2 = [\'c\', \'d\', \'e\'] print(find_shared_elements(list1, list2)) # Output: [\'c\', \'d\'] ```","solution":"def find_shared_elements(list1, list2): Returns the elements that are present in both list1 and list2, preserving the order of their appearance in list1. shared_elements = [] elements_set = set(list2) # Convert list2 to a set for quicker look-up for item in list1: if item in elements_set: shared_elements.append(item) return shared_elements"},{"question":"You are required to write a Python function called `directory_summary` which will analyze a given directory and produce a summary of its contents. The function should be able to handle subdirectories and files within the main directory. The following functionalities should be included: 1. Traverse the directory and its subdirectories using `os.walk()`. 2. Determine the size of each file in bytes and the total number of files. 3. Classify files into categories based on their extensions (e.g., `.txt`, `.py`, `.jpg`, etc.). 4. Calculate the total size used by files in each category. 5. Identify the subdirectory with the largest total file size and the one with the greatest number of files. 6. Return a dictionary that includes: - The total number of files. - A breakdown of files by category (extension). - The total size used by each file category. - The subdirectory with the largest total file size. - The subdirectory with the largest number of files. Your task is to implement the `directory_summary` function: ```python import os def directory_summary(dir_path): Function to analyze a given directory and produce a summary including total number of files, classification by file types, total size by file types, and information about the largest subdirectory. Args: dir_path (str): The path of the directory to analyze. Returns: dict: A summary with the following structure: { \'total_files\': int, \'file_categories\': {str: int}, # Mapping of file extension to number of files \'category_sizes\': {str: int}, # Mapping of file extension to total size in bytes \'largest_subdir_by_size\': str, # Path to the subdirectory with the largest total file size \'largest_subdir_by_files\': str # Path to the subdirectory with the largest number of files } pass ``` The function should utilize the APIs: `os.walk`, `os.path.getsize`, `os.path.join`.","solution":"import os from collections import defaultdict def directory_summary(dir_path): Function to analyze a given directory and produce a summary including total number of files, classification by file types, total size by file types, and information about the largest subdirectory. Args: dir_path (str): The path of the directory to analyze. Returns: dict: A summary with the following structure: { \'total_files\': int, \'file_categories\': {str: int}, # Mapping of file extension to number of files \'category_sizes\': {str: int}, # Mapping of file extension to total size in bytes \'largest_subdir_by_size\': str, # Path to the subdirectory with the largest total file size \'largest_subdir_by_files\': str # Path to the subdirectory with the largest number of files } total_files = 0 file_categories = defaultdict(int) category_sizes = defaultdict(int) subdir_sizes = defaultdict(int) subdir_file_counts = defaultdict(int) for root, dirs, files in os.walk(dir_path): for file in files: total_files += 1 file_path = os.path.join(root, file) file_size = os.path.getsize(file_path) file_ext = os.path.splitext(file)[1] file_categories[file_ext] += 1 category_sizes[file_ext] += file_size subdir_sizes[root] += file_size subdir_file_counts[root] += 1 largest_subdir_by_size = max(subdir_sizes, key=subdir_sizes.get, default=\\"\\") largest_subdir_by_files = max(subdir_file_counts, key=subdir_file_counts.get, default=\\"\\") return { \'total_files\': total_files, \'file_categories\': dict(file_categories), \'category_sizes\': dict(category_sizes), \'largest_subdir_by_size\': largest_subdir_by_size, \'largest_subdir_by_files\': largest_subdir_by_files }"},{"question":"Given a list of strings representing filenames, write a function that groups the filenames by their file extensions. The function should take a list of filenames as input, find the file extension for each filename, and then group the filenames under corresponding extensions. The function should return a dictionary with file extensions as keys and lists of filenames with that extension as values. The function should raise the exception for: ValueError: If the input is not a list, or if any element in the list is not a string. The function should output with: dict: A dictionary mapping file extensions to lists of filenames. You should write self-contained code starting with: ``` def group_filenames_by_extension(filenames): ```","solution":"def group_filenames_by_extension(filenames): Groups the filenames by their file extensions. Parameters: filenames (list): A list of filenames as strings. Returns: dict: A dictionary mapping file extensions to lists of filenames. Raises: ValueError: If the input is not a list, or if any element in the list is not a string. if not isinstance(filenames, list): raise ValueError(\\"Input should be a list of strings\\") group = {} for filename in filenames: if not isinstance(filename, str): raise ValueError(\\"All elements in the list should be strings\\") if \'.\' in filename: extension = filename.split(\'.\')[-1] if extension in group: group[extension].append(filename) else: group[extension] = [filename] else: if \'\' in group: group[\'\'].append(filename) else: group[\'\'] = [filename] return group"},{"question":"Write a function that takes a DataFrame and column name as input. The function should fill missing values in the specified column with the mean of that column. The function should output: pandas.DataFrame: DataFrame with missing values filled in the specified column. You should write self-contained code starting with: ``` import pandas as pd def fill_missing_with_mean(dataframe, column_name): ```","solution":"import pandas as pd def fill_missing_with_mean(dataframe, column_name): Fills missing values in the specified column with the mean of the column. Parameters: dataframe (pd.DataFrame): The input DataFrame. column_name (str): The name of the column to fill missing values in. Returns: pd.DataFrame: DataFrame with missing values filled in the specified column. mean_value = dataframe[column_name].mean() dataframe[column_name].fillna(mean_value, inplace=True) return dataframe"},{"question":"Write a function named `find_shortest_unique_substring` that takes two parameters: a string `s` and a string `charset`. The function should return the shortest substring of `s` that contains all the characters in `charset` at least once. If no such substring exists, return an empty string. The function should follow these steps: 1. Create a dictionary to count the occurrences of each character in `charset`. 2. Use a sliding window approach to find the shortest substring that contains all characters in `charset`. 3. Expand the window by moving the right pointer to the right in each iteration, updating the count of characters within the window. 4. Once the window contains all characters from `charset`, move the left pointer to the right to find a potentially shorter valid window. 5. Track the minimum window length and update the result whenever a shorter valid window is found. 6. If no such substring exists, return an empty string. # Example Suppose you have the following inputs: ```python s = \\"ADOBECODEBANC\\" charset = \\"ABC\\" ``` Calling `find_shortest_unique_substring(s, charset)` should return: ```python \\"BANC\\" ``` As `BANC` is the shortest substring of `s` that contains all characters in `ABC`.","solution":"def find_shortest_unique_substring(s, charset): from collections import Counter, defaultdict if not s or not charset: return \\"\\" charset_count = Counter(charset) required_chars = len(charset_count) # Create a dictionary to count characters in the current window window_count = defaultdict(int) formed = 0 left, right = 0, 0 min_length = float(\'inf\') min_window = \\"\\" while right < len(s): char = s[right] window_count[char] += 1 if char in charset_count and window_count[char] == charset_count[char]: formed += 1 while left <= right and formed == required_chars: char = s[left] if right - left + 1 < min_length: min_length = right - left + 1 min_window = s[left:right+1] window_count[char] -= 1 if char in charset_count and window_count[char] < charset_count[char]: formed -= 1 left += 1 right += 1 return min_window"},{"question":"You are tasked with creating a function `find_optimal_path(matrix, start, end)` that finds the optimal path from a starting point `start` to an ending point `end` in a given matrix, using the shortest path algorithm. The function should return the length of the optimal path. The matrix is a 2D list of integers, where each integer represents the cost to move into that cell. The function should find the path with the minimum total cost. You can move up, down, left, or right, but not diagonally. Your function should: 1. Validate the input to ensure `start` and `end` are within the bounds of the matrix, and print \'Invalid input\' and exit the function if they are not. 2. Use Dijkstra\'s algorithm to find the shortest path from `start` to `end`. 3. Return the total cost of the optimal path from `start` to `end`. **Function Signature:** ```python def find_optimal_path(matrix: List[List[int]], start: Tuple[int, int], end: Tuple[int, int]) -> int: ``` # Example ```python matrix = [ [1, 2, 3], [4, 8, 2], [1, 5, 3] ] start = (0, 0) end = (2, 2) print(find_optimal_path(matrix, start, end)) ``` # Output 19 # Additional Notes: - Use the `heapq` library to implement Dijkstra\'s algorithm. - Assume the necessary library is already imported: ```python import heapq ``` - You can assume that the matrix contains only positive integers and is non-empty.","solution":"from typing import List, Tuple import heapq def find_optimal_path(matrix: List[List[int]], start: Tuple[int, int], end: Tuple[int, int]) -> int: Finds the optimal path from start to end in a given matrix using Dijkstra\'s algorithm. def is_valid_position(matrix, position): rows, cols = len(matrix), len(matrix[0]) x, y = position return 0 <= x < rows and 0 <= y < cols if not (is_valid_position(matrix, start) and is_valid_position(matrix, end)): print(\'Invalid input\') return rows, cols = len(matrix), len(matrix[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] pq = [(matrix[start[0]][start[1]], start)] # (cost, position) visited = set() costs = {start: matrix[start[0]][start[1]]} while pq: current_cost, (x, y) = heapq.heappop(pq) if (x, y) in visited: continue visited.add((x, y)) if (x, y) == end: return current_cost for dx, dy in directions: next_x, next_y = x + dx, y + dy if is_valid_position(matrix, (next_x, next_y)) and (next_x, next_y) not in visited: next_cost = current_cost + matrix[next_x][next_y] if next_cost < costs.get((next_x, next_y), float(\'inf\')): costs[(next_x, next_y)] = next_cost heapq.heappush(pq, (next_cost, (next_x, next_y))) return costs.get(end, float(\'inf\'))"},{"question":"You are tasked with creating a function called `count_unique_words` that reads a text file and counts the number of unique words in it, considering words are unique based on their case-insensitive form. For this, you will need to use the `os` and `re` modules. - `os.path.isfile(path)`: This function checks if the specified path is an existing regular file. - `os.path.join(a, *p)`: This function joins one or more path components. - `re.findall(pattern, string)`: This function returns all non-overlapping matches of the pattern in the string, as a list of strings. Your function should: 1. Take a single string parameter `filename` representing the name of the text file. 2. Check if the file exists and is a regular file using `os.path.isfile()`. 3. Read the contents of the file. 4. Use regular expressions to extract words from the text. Words are sequences of alphabetic characters `[a-zA-Z]+`. 5. Convert all words to lowercase and count the number of unique words. Write the `count_unique_words` function following the above requirements. Function signature: ```python def count_unique_words(filename: str) -> int: pass ```","solution":"import os import re def count_unique_words(filename: str) -> int: Counts the number of unique words in a text file, case insensitive. :param filename: The name of the text file :return: The count of unique words if not os.path.isfile(filename): raise FileNotFoundError(f\\"The file {filename} does not exist.\\") with open(filename, \'r\') as file: content = file.read() words = re.findall(r\'[a-zA-Z]+\', content) unique_words = set(word.lower() for word in words) return len(unique_words)"},{"question":"Write a Python function named `extract_integers` that takes a string as input and returns a list of integers found in the string. The integers can be positive or negative, and the function should preserve their sign. If there are no integers in the input string, the function should return an empty list. Your task is to: 1. Implement the function `extract_integers(input_string)`. 2. Ensure that the function correctly identifies and extracts all integers, including those with signs. 3. Handle edge cases where the string may contain no integers or integers of varying lengths and formats. **Function Signature** ```python def extract_integers(input_string: str) -> list: # your implementation here ``` **Example Usage** ```python extract_integers(\\"The temperatures are -7, 2, and 13 degrees Celsius.\\") # Output: [-7, 2, 13] extract_integers(\\"No numbers here!\\") # Output: [] extract_integers(\\"1, -2, 3.45, and -67 are mixed!\\") # Output: [1, -2, 3, -67] ```","solution":"import re def extract_integers(input_string: str) -> list: Extracts all integers from the input string, preserving their sign. Parameters: - input_string (str): The string from which to extract integers. Returns: - list: A list of integers found in the input string. # Use regular expression to find all integers in the string integer_pattern = r\'(?<!S)-?d+\' found_integers = re.findall(integer_pattern, input_string) # Convert the matched strings to integers return [int(num) for num in found_integers]"},{"question":"Write a Python function `find_repeated_sequences(dna, n)` that finds all the `n`-length sequences (substrings) that occur more than once in a DNA molecule. A DNA molecule is represented as a string containing characters \'A\', \'C\', \'G\', and \'T\'. The function should use a sliding window approach to extract all possible substrings of length `n` and count their occurrences. Function Signature ```python def find_repeated_sequences(dna: str, n: int) -> List[str]: ``` Parameters - `dna`: A string representing the DNA molecule. - `n`: An integer representing the length of the sequences to be found. Returns - A list of strings, each representing a sequence of length `n` that occurs more than once in the DNA molecule. The list should be sorted lexicographically. Explanation - Use a sliding window approach to iterate through the string and extract all substrings of length `n`. - Utilize a dictionary to count the occurrences of these substrings. - Filter out the substrings that occur more than once and return them in a lexicographically sorted list. Example ```python print(find_repeated_sequences(\'AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\', 10)) # [\'AAAAACCCCC\', \'CCCCCAAAAA\'] print(find_repeated_sequences(\'AAAAAAAAAAAAA\', 5)) # [\'AAAAA\'] ```","solution":"from typing import List def find_repeated_sequences(dna: str, n: int) -> List[str]: if n <= 0 or len(dna) < n: return [] sequence_count = {} result = set() for i in range(len(dna) - n + 1): seq = dna[i:i+n] if seq in sequence_count: sequence_count[seq] += 1 result.add(seq) else: sequence_count[seq] = 1 return sorted(result)"},{"question":"You need to implement a function named `transpose_matrix` that takes a 2-dimensional list (matrix) and returns its transpose. The transpose of a matrix is formed by swapping the rows and columns. **Function Signature:** ```python def transpose_matrix(matrix: List[List[int]]) -> List[List[int]]: This function takes a 2D list (matrix) as input and returns its transpose. ``` **Detailed Requirements:** 1. **Matrix Representation:** - The matrix is represented as a list of lists, where each inner list represents a row. - The input matrix will contain integers only. 2. **Transpose Definition:** - The transpose of a matrix is another matrix obtained by exchanging the rows and columns of the original. - For an m x n matrix, the transpose will be an n x m matrix. 3. **Input Parameters:** - The function receives a 2-dimensional list (matrix) as its input. - It is not necessary to validate whether the input is a proper matrix (e.g., all rows having the same length). 4. **Output:** - Return the transposed matrix as a 2-dimensional list. 5. **Example:** - If the input matrix is: ``` [ [1, 2, 3], [4, 5, 6] ] ``` The transpose will be: ``` [ [1, 4], [2, 5], [3, 6] ] ```","solution":"from typing import List def transpose_matrix(matrix: List[List[int]]) -> List[List[int]]: This function takes a 2D list (matrix) as input and returns its transpose. if not matrix: return [] # Get the number of rows and columns rows = len(matrix) cols = len(matrix[0]) # Create an empty transposed matrix with size cols x rows transposed_matrix = [[0] * rows for _ in range(cols)] # Fill in the transposed matrix for r in range(rows): for c in range(cols): transposed_matrix[c][r] = matrix[r][c] return transposed_matrix"},{"question":"Design a function named `deep_copy_nested_dictionary` that performs a deep copy of a given nested dictionary. The function should ensure that changes to the new dictionary do not affect the original dictionary. # Requirements: - Use recursion to handle the deep copy process. - The function should take a single parameter, the nested dictionary to be copied. - The function should return a new dictionary that is a deep copy of the input. # Example: ```python original_dict = { \'a\': 1, \'b\': {\'b1\': 2, \'b2\': 3}, \'c\': {\'c1\': {\'c2\': 4}} } new_dict = deep_copy_nested_dictionary(original_dict) new_dict[\'b\'][\'b1\'] = 10 # original_dict should remain unchanged: # { # \'a\': 1, # \'b\': {\'b1\': 2, \'b2\': 3}, # \'c\': {\'c1\': {\'c2\': 4}} # } ``` # Hints: - Use a helper function to perform the recursive deep copy. - Test with dictionaries having various levels of nesting.","solution":"def deep_copy_nested_dictionary(original_dict): Performs a deep copy of a nested dictionary. Parameters: original_dict (dict): The dictionary to copy. Returns: dict: A deep copy of the original dictionary. if not isinstance(original_dict, dict): return original_dict return {key: deep_copy_nested_dictionary(value) for key, value in original_dict.items()}"},{"question":"Write a function named `longest_consecutive_substring` that finds the longest consecutive substring of a given character from an input string. The function should filter out non-alphabetic characters before processing. # Task: 1. **Function Name**: `longest_consecutive_substring` 2. **Parameters**: A string `s` which may contain alphabetic and non-alphabetic characters. 3. **Returns**: A tuple containing the longest consecutive substring and its length. If there are multiple substrings of the same maximum length, return the first one. # Specific Requirements: - Before processing, filter out all non-alphabetic characters from the string. - The comparison must be case insensitive, i.e., \'A\' and \'a\' should be considered the same. - If the input string after filtering is empty, return an empty string and 0. # Example: ```python result = longest_consecutive_substring(\\"aabBBbaaa!!bbbbcc!!ddD112\\") print(result) # Output: (\'bbbb\', 4) ``` In this example, the longest consecutive substring is \\"bbbb\\" with a length of 4. Non-alphabetic characters and case differences are ignored for the purpose of comparison.","solution":"def longest_consecutive_substring(s): Finds the longest consecutive substring of a given character in the input string after filtering out non-alphabetic characters. Args: s (str): The input string which may contain alphabetic and non-alphabetic characters. Returns: tuple: A tuple containing the longest consecutive substring and its length. If there are multiple substrings of the same maximum length, returns the first one. filtered_string = \'\'.join(filter(str.isalpha, s)).lower() if not filtered_string: return \\"\\", 0 max_length = 0 max_substring = \\"\\" curr_length = 1 for i in range(1, len(filtered_string)): if filtered_string[i] == filtered_string[i - 1]: curr_length += 1 else: if curr_length > max_length: max_length = curr_length max_substring = filtered_string[i - 1] * curr_length curr_length = 1 # Check the last run if curr_length > max_length: max_length = curr_length max_substring = filtered_string[-1] * curr_length return max_substring, max_length"},{"question":"You have been asked to create a function that generates top-secret encrypted messages using a simple substitution cipher. The function should take in a list of words and a shift value and return a list of encrypted words. Each letter in the word should be replaced by the letter that is shifted by the given value in the alphabet. The function should support both upper-case and lower-case letters, but non-alphabetic characters should remain unchanged. # Function Signature ```python def encrypt_messages(words, shift): Encrypts a list of words using a simple substitution cipher. Parameters: words (list): A list of words (strings) to be encrypted. shift (int): An integer value by which to shift each letter. Returns: list: A list of encrypted words. pass ``` # Parameters and Requirements - **words**: A list of strings where each string is a word to be encrypted. - **shift**: An integer that indicates the number of positions each letter should be shifted in the alphabet. # Example ```python # Example usage: words = [\\"hello\\", \\"world!\\"] shift = 3 # Result should be [\\"khoor\\", \\"zruog!\\"] encrypted_words = encrypt_messages(words, shift) print(encrypted_words) ``` # Constraints - The shift value can be positive or negative. - All input words will consist only of printable ASCII characters. - Letters wrap around at the end of the alphabet. For example, with a shift of 3, \'z\' becomes \'c\'. # Hints - Utilize the `ord` and `chr` functions for shifting letters. - Consider creating helper functions to handle the shifting logic for readability. - Be mindful of preserving the case (upper-case or lower-case) of each letter.","solution":"def encrypt_messages(words, shift): Encrypts a list of words using a simple substitution cipher. Parameters: words (list): A list of words (strings) to be encrypted. shift (int): An integer value by which to shift each letter. Returns: list: A list of encrypted words. def shift_character(c, shift): if \'a\' <= c <= \'z\': start = ord(\'a\') elif \'A\' <= c <= \'Z\': start = ord(\'A\') else: return c shifted = (ord(c) - start + shift) % 26 + start return chr(shifted) encrypted_words = [\'\'.join(shift_character(c, shift) for c in word) for word in words] return encrypted_words"},{"question":"In this exercise, you will create a function called `find_all_indices` that takes a list and an element, and returns a list of indices where the element occurs in the given list. # Requirements: 1. **Function Name**: `find_all_indices` 2. **Input**: A list of elements `lst` and an element `element`. 3. **Output**: Returns a list of indices where the specified element occurs in the provided list. If the element does not exist in the list, return an empty list. # Explanation: - Iterate through the list and keep track of the indices where the given element is found. - The function should handle any type of element within the list (integers, strings, etc). # Example: ```python print(find_all_indices([1, 2, 3, 2, 4, 2], 2)) # Output: [1, 3, 5] print(find_all_indices([\'a\', \'b\', \'a\', \'c\'], \'a\')) # Output: [0, 2] print(find_all_indices([1, 2, 3], 4)) # Output: [] ``` Ensure the function works correctly for different data types and returns indices in the order they appear in the list.","solution":"def find_all_indices(lst, element): Returns a list of indices where the specified element occurs in the provided list. return [index for index, value in enumerate(lst) if value == element]"},{"question":"In this problem, you are required to implement a function `word_combinations` that generates all possible unique letter combinations from a given list of words. The task is to write a function named `word_combinations` that takes a list of words and returns a list of all unique letter combinations that can be formed when taking one letter from each word. Here are the details: - Input: A list of strings `words`, where each string is a word containing only lowercase alphabetical characters. - Output: A list of all unique letter combinations formed by taking one letter from each word in the input list. The combinations should be returned as a list of strings, each string representing one unique combination. The function should return the letter combinations sorted lexicographically. Example: ```python def word_combinations(words): pass # Example: words_list = [\\"abc\\", \\"de\\", \\"fgh\\"] print(word_combinations(words_list)) # Output: [\'adf\', \'adg\', \'adh\', \'aef\', \'aeg\', \'aeh\', \'bdf\', \'bdg\', \'bdh\', \'bef\', \'beg\', \'beh\', \'cdf\', \'cdg\', \'cdh\', \'cef\', \'ceg\', \'ceh\'] ``` You can use Python\'s itertools library to facilitate the generation of combinations. Be sure to handle edge cases such as empty input list gracefully.","solution":"import itertools def word_combinations(words): Generates all possible unique letter combinations from a given list of words. Args: words: List of strings, where each string is a word containing only lowercase alphabetical characters. Returns: A list of all unique letter combinations formed by taking one letter from each word in lexicographical order. if not words: return [] # Use itertools.product to create all combinations combinations = itertools.product(*words) # Concatenate each tuple of the combination into a string result = [\'\'.join(combination) for combination in combinations] return sorted(result)"},{"question":"Write a function that generates and prints the Fibonacci sequence up to a specified number of terms, and then calculates the sum of these terms. The function should take an integer argument representing the number of terms in the Fibonacci sequence. The function should start with: ``` def generate_fibonacci(num_terms): ``` The output of the function should be: - A list containing the Fibonacci sequence up to the supplied number of terms. - The sum of the Fibonacci sequence up to the supplied number of terms. # Example `generate_fibonacci(5)` should print: ``` [0, 1, 1, 2, 3] 7 ```","solution":"def generate_fibonacci(num_terms): Generates the Fibonacci sequence up to the specified number of terms and calculates the sum of these terms. Parameters: num_terms (int): The number of terms in the Fibonacci sequence to generate. Returns: tuple: A tuple containing a list of the Fibonacci sequence and the sum of its terms. if num_terms <= 0: return ([], 0) fibonacci_sequence = [0, 1] for _ in range(2, num_terms): next_term = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_term) if num_terms == 1: fibonacci_sequence = [0] fib_sum = sum(fibonacci_sequence[:num_terms]) return (fibonacci_sequence[:num_terms], fib_sum)"},{"question":"Write a function named `remove_duplicate_chars` that takes a string as input and returns a new string with all duplicate characters removed, keeping only the first occurrence of each character. Here are the steps you should follow to achieve this: 1. Initialize an empty set to keep track of characters that have already been processed. 2. Initialize an empty list to build the resulting string. 3. Iterate through each character of the input string: - If the character has not been seen before, add it to the set and append it to the result list. - If the character has been seen before, skip it. 4. Join the list of characters into a single string and return it. **Function Signature:** ```python def remove_duplicate_chars(input_string: str) -> str: pass ``` **Example:** - Calling `remove_duplicate_chars(\\"programming\\")` should return `\\"progamin\\"`. - Calling `remove_duplicate_chars(\\"abracadabra\\")` should return `\\"abrcd\\"`. **Additional Notes:** - The function should be case-sensitive, meaning \'A\' and \'a\' are considered distinct characters. - Preserve the order of characters as they appear in the input string.","solution":"def remove_duplicate_chars(input_string: str) -> str: Removes duplicate characters from the input string, keeping only the first occurrence of each character. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"You are responsible for developing a function that determines whether a given binary tree is height-balanced. A binary tree is considered height-balanced if for every node in the tree, the difference in height between its left and right subtrees is at most 1. The height of a node is the number of edges on the longest path from the node to a leaf. In this task, you will write a function `is_balanced(root: TreeNode) -> bool` to check if the tree is height-balanced. The tree node is represented using the following class definition: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` The function takes the following parameter: - `root`: the root node of the binary tree. The function should return `True` if the tree is height-balanced, and `False` otherwise. **Function Signature**: ```python def is_balanced(root: TreeNode) -> bool: ... ``` # Example: ```python # Example 1: # Input tree: 3 # / # 9 20 # / # 15 7 root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20, TreeNode(15), TreeNode(7)) print(is_balanced(root)) # Output: True # Example 2: # Input tree: 1 # / # 2 2 # / # 3 3 # / # 4 4 root = TreeNode(1) root.left = TreeNode(2, TreeNode(3, TreeNode(4), TreeNode(4)), TreeNode(3)) root.right = TreeNode(2) print(is_balanced(root)) # Output: False ``` # Requirements: - Ensure the function efficiently checks for the height balance property. - Consider using a recursive approach to determine the height and balanced status simultaneously to improve efficiency.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root: TreeNode) -> bool: def check_balance(node: TreeNode): if not node: return 0, True left_height, is_left_balanced = check_balance(node.left) right_height, is_right_balanced = check_balance(node.right) height = max(left_height, right_height) + 1 is_balanced_node = abs(left_height - right_height) <= 1 return height, is_left_balanced and is_right_balanced and is_balanced_node _, balanced = check_balance(root) return balanced"},{"question":"Design a function that analyzes a list of stock price data to identify the best day to buy and the best day to sell in order to maximize profit. The input will be a list of tuples where each tuple contains a date (in \'YYYY-MM-DD\' format) and a closing price (float). The function should return a tuple with the optimal buy date, sell date, and the maximum profit. If no profit can be made, return \'No Profit\'. You should write self-contained code starting with: ``` from datetime import datetime def maximize_profit(stock_data): ```","solution":"from datetime import datetime def maximize_profit(stock_data): if not stock_data: return \\"No Profit\\" min_price_index = 0 max_profit = 0 best_buy_day = best_sell_day = None for i in range(1, len(stock_data)): if stock_data[i][1] < stock_data[min_price_index][1]: min_price_index = i potential_profit = stock_data[i][1] - stock_data[min_price_index][1] if potential_profit > max_profit: max_profit = potential_profit best_buy_day = stock_data[min_price_index][0] best_sell_day = stock_data[i][0] if max_profit == 0: return \\"No Profit\\" return best_buy_day, best_sell_day, max_profit"},{"question":"You are asked to implement a function named `find_duplicate_filenames` that searches for duplicate filenames across multiple directories and lists the duplicates encountered. The function should utilize specific functions from the `os` module in Python to accomplish its task. Specifically, your task is to use the following `os` module functions: - `os.path.join` - `os.path.isfile` - `os.listdir` - `os.path.basename` Function prototype: ```python def find_duplicate_filenames(directories: list) -> list: ``` **Parameters:** 1. `directories`: A list containing strings, where each string is the path to a directory to be searched for duplicate filenames. **Behavior:** - The function should iterate over all the files in each of the specified directories. - It should extract the filenames (excluding the directory path) and keep track of how many times each filename appears. - If a filename appears more than once across the directories, consider it as a duplicate. - The function should return a list of such duplicate filenames. # Example: Assume the directories `dir1` and `dir2` contain the following files: `dir1`: - `report.docx` - `data.xlsx` - `presentation.pptx` `dir2`: - `summary.txt` - `data.xlsx` - `notes.docx` If you call: ```python find_duplicate_filenames([r\\"dir1\\", r\\"dir2\\"]) ``` The function should return: ```python [\'data.xlsx\'] ```","solution":"import os def find_duplicate_filenames(directories: list) -> list: Finds duplicate filenames across the given list of directories. Parameters: directories (list): List of directory paths to search for duplicate filenames. Returns: list: List of duplicate filenames. filename_count = {} for directory in directories: try: for file in os.listdir(directory): file_path = os.path.join(directory, file) if os.path.isfile(file_path): filename = os.path.basename(file_path) if filename in filename_count: filename_count[filename] += 1 else: filename_count[filename] = 1 except FileNotFoundError: # Directory does not exist continue except PermissionError: # No permission to access the directory continue duplicates = [filename for filename, count in filename_count.items() if count > 1] return duplicates"},{"question":"You are tasked with implementing a function that reads a list of integers from a file called \\"numbers.txt\\" and returns a dictionary with the following statistics: - The total count of numbers. - The sum of the numbers. - The average of the numbers, rounded to two decimal places. - The maximum number. - The minimum number. The file \\"numbers.txt\\" will contain one integer per line. Your function should handle any potential file reading errors gracefully by catching exceptions and returning an appropriate error message. Your task is to write a function named `compute_statistics() -> Union[Dict[str, Union[int, float]], str]`. The function should perform the following operations: 1. Open the file \\"numbers.txt\\" in read mode. 2. Read all the integers from the file into a list. 3. Compute the required statistics: count, sum, average (rounded to two decimal places), maximum, and minimum. 4. Return these statistics in a dictionary with keys \'count\', \'sum\', \'average\', \'max\', and \'min\'. 5. If the file cannot be read, catch the exception and return the string \\"Error reading file\\". Assume the presence of the `typings` module for type hinting. This problem assesses your ability to read from files, handle exceptions, and calculate basic statistics.","solution":"from typing import Union, Dict def compute_statistics() -> Union[Dict[str, Union[int, float]], str]: try: with open(\\"numbers.txt\\", \\"r\\") as file: numbers = [int(line.strip()) for line in file] if not numbers: return { \\"count\\": 0, \\"sum\\": 0, \\"average\\": 0.0, \\"max\\": None, \\"min\\": None } total_count = len(numbers) total_sum = sum(numbers) average = round(total_sum / total_count, 2) max_number = max(numbers) min_number = min(numbers) return { \\"count\\": total_count, \\"sum\\": total_sum, \\"average\\": average, \\"max\\": max_number, \\"min\\": min_number } except Exception as e: return \\"Error reading file\\""},{"question":"You are provided with a dataset containing sales transaction data for a retail store. Your task is to write a function named `calculate_sales_summary` that takes in three parameters: `data_filepath`, `start_date`, and `end_date`, and returns a pandas DataFrame that provides a summary of sales within the specified date range. The summary should include the total sales, the average sales per transaction, and the number of transactions for each product category. The dataset file is in CSV format and contains at least the following columns: - `Transaction ID`: a unique identifier for each transaction - `Date`: the date of the transaction - `Category`: the product category - `Sales Amount`: the total amount of the transaction Your function should: 1. Load the data from the specified file. 2. Convert the `Date` column to datetime format. 3. Filter the DataFrame to include only the transactions within the specified date range. 4. Group the data by `Category` and calculate the required summary statistics: total sales, average sales per transaction, and the number of transactions. Here is the prototype of the function: ```python def calculate_sales_summary(data_filepath: str, start_date: str, end_date: str) -> pd.DataFrame: Calculates sales summary for the specified date range and returns a summary DataFrame. Args: data_filepath (str): the file path of the sales transaction data start_date (str): the start date of the date range (in \'YYYY-MM-DD\' format) end_date (str): the end date of the date range (in \'YYYY-MM-DD\' format) Returns: pd.DataFrame: DataFrame containing sales summary statistics (total sales, average sales per transaction, and number of transactions) grouped by product category # Complete the function below. ``` You are required to use the `pandas.read_csv` function to load the data and `pandas.to_datetime` to convert the `Date` column to datetime format. Example: ```python data_filepath = \'retail_sales.csv\' summary_df = calculate_sales_summary(data_filepath, \'2023-01-01\', \'2023-03-31\') print(summary_df.head()) ``` This should load the sales data, filter it by the date range from January 1, 2023, to March 31, 2023, and then provide the summary statistics for each product category within this date range, printing the head of the resulting DataFrame.","solution":"import pandas as pd def calculate_sales_summary(data_filepath: str, start_date: str, end_date: str) -> pd.DataFrame: Calculates sales summary for the specified date range and returns a summary DataFrame. Args: data_filepath (str): the file path of the sales transaction data start_date (str): the start date of the date range (in \'YYYY-MM-DD\' format) end_date (str): the end date of the date range (in \'YYYY-MM-DD\' format) Returns: pd.DataFrame: DataFrame containing sales summary statistics (total sales, average sales per transaction, and number of transactions) grouped by product category # Load the data from the specified file df = pd.read_csv(data_filepath) # Convert the \\"Date\\" column to datetime format df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Filter the DataFrame to include only the transactions within the specified date range filtered_df = df[(df[\'Date\'] >= start_date) & (df[\'Date\'] <= end_date)] # Group the data by \'Category\' and calculate the summary statistics summary_df = filtered_df.groupby(\'Category\').agg( total_sales=(\'Sales Amount\', \'sum\'), average_sales_per_transaction=(\'Sales Amount\', \'mean\'), number_of_transactions=(\'Transaction ID\', \'count\') ).reset_index() return summary_df"},{"question":"You are required to implement a function that simulates a simplified version of the classic Minesweeper game played on a 5x5 grid. In this game, there are 5 randomly placed mines, and the remaining cells contain numbers that indicate the number of mines adjacent to that cell (horizontally, vertically, and diagonally). **Function Signature:** ```python def generate_minesweeper_grid(): ``` **Function Description:** - This function does not take any parameters. - The function should generate a 5x5 grid where 5 cells contain mines (represented by \\"*\\"). - The remaining cells should contain numbers that indicate how many mines are adjacent to that cell. **Key Requirements:** 1. **Grid Initialization:** - Generate a 5x5 grid filled with zeros. 2. **Placing Mines:** - Randomly place 5 mines in the grid. - Ensure no two mines occupy the same cell. 3. **Updating Numbers:** - For each cell in the grid that does not contain a mine, update its value to the count of adjacent mines. 4. **Display function:** - Include a helper function to display the grid in a neatly formatted manner for testing purposes. **Example Usage:** ```python generate_minesweeper_grid() # Example output: # [ # [ 1, \'*\', 2, 1, 0], # [ 1, 1, 2, \'*\', 1], # [ 0, 1, 2, 2, 1], # [\'*\', 1, 1, 0, 0], # [ 1, 1, 0, 0, 0], # ] ``` **Notes:** - Use the `random` library to handle the random placement of mines. - Ensure the function assembles the complete grid with correct mine counts and mines. - You can create additional helper functions to manage specific tasks within the main function.","solution":"import random def generate_minesweeper_grid(): def create_empty_grid(size): return [[0 for _ in range(size)] for _ in range(size)] def place_mines(grid, num_mines): size = len(grid) mines_placed = 0 while mines_placed < num_mines: row = random.randint(0, size - 1) col = random.randint(0, size - 1) if grid[row][col] != \'*\': grid[row][col] = \'*\' mines_placed += 1 def update_numbers(grid): size = len(grid) directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for row in range(size): for col in range(size): if grid[row][col] == \'*\': continue mine_count = 0 for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < size and 0 <= c < size and grid[r][c] == \'*\': mine_count += 1 grid[row][col] = mine_count def display_grid(grid): for row in grid: print(\' \'.join(str(cell) for cell in row)) size = 5 num_mines = 5 grid = create_empty_grid(size) place_mines(grid, num_mines) update_numbers(grid) display_grid(grid) return grid"},{"question":"You are required to create a function named `find_popular_words` that analyzes a given block of text and identifies the most frequent words. The function should return a list of tuples, each containing a word and its frequency. The words should be sorted first by their frequency in descending order, and then by the word in ascending alphabetical order if frequencies are the same. Your task is to: 1. Tokenize the input text into words. Assume words are separated by spaces and punctuation marks should be removed. 2. Normalize the words to lowercase. 3. Count the frequency of each word in the text. 4. Sort the words by frequency in descending order. If two words have the same frequency, they should be sorted alphabetically. 5. Return a list of tuples, each containing a word and its frequency. **Function Signature:** ```python def find_popular_words(text: str) -> List[Tuple[str, int]]: pass ``` # Requirements: - Use regular expressions to remove punctuation and to tokenize words. - Convert all words to lowercase for case-insensitive comparison. - Use dictionary data structures to count word frequencies. - Utilize sorting and lambda functions to achieve the correct order of output. # Example: ```python text = \\"Hello world! The world is beautiful. Hello, hello, who is there? The world says hello.\\" result = find_popular_words(text) print(result) # Example Output: # [(\'hello\', 4), (\'world\', 3), (\'is\', 2), (\'the\', 2), (\'beautiful\', 1), (\'says\', 1), (\'there\', 1), (\'who\', 1)] ``` # Note: - The function should handle a mix of upper and lower case inputs and treat them uniformly. - The punctuation marks such as period, comma, exclamation mark, question mark, etc., should be ignored.","solution":"import re from typing import List, Tuple from collections import Counter def find_popular_words(text: str) -> List[Tuple[str, int]]: Analyzes a given block of text and identifies the most frequent words. Args: text (str): A string containing the text to be analyzed. Returns: List[Tuple[str, int]]: A list of tuples, each containing a word and its frequency, sorted by frequency in descending order, then alphabetically. # Remove punctuation using regex, tokenize the text and convert to lowercase words = re.findall(r\'bw+b\', text.lower()) # Count the frequency of each word word_count = Counter(words) # Sort the words by frequency (descending) and alphabetically (ascending) sorted_words = sorted(word_count.items(), key=lambda x: (-x[1], x[0])) return sorted_words"},{"question":"You are working on a project where you need to implement a function for tracking inventory in a warehouse. Each inventory item is represented as a dictionary containing its properties such as item name, category, quantity, and price per unit. You need to create a function that processes a list of such inventory items and returns a new list of dictionaries, where each dictionary contains additional computed properties like total value (quantity * price per unit) and a unique item ID. Your task is to implement a function named `process_inventory` which accepts one parameter: - `inventory_list`: a list of dictionaries where each dictionary represents an inventory item with the following keys: - \'item_name\': a string representing the name of the item. - \'category\': a string representing the category of the item. - \'quantity\': an integer representing the quantity of the item in stock. - \'price_per_unit\': a float representing the price of one unit of the item. The `process_inventory` function should: 1. Generate a unique item ID for each item in the list. The item ID should be a string that combines the item\'s category and its position in the list, starting from 1. For example, the first item in the \'Electronics\' category would have an ID of \'Electronics1\'. 2. Calculate the total value for each item by multiplying its quantity by its price per unit. 3. Create a new list of dictionaries representing the processed inventory items. Each dictionary should contain the original keys and values plus \'item_id\' and \'total_value\' keys with their computed values. The function should return the new list of dictionaries with the added properties. Below are the necessary steps within the `process_inventory` function: - Iterate over the list of inventory items. - For each item, generate a unique item ID. - Calculate the total value. - Construct a dictionary for each item with the original properties plus the computed properties. **Function Signature:** ```python def process_inventory(inventory_list: List[Dict[str, Union[str, int, float]]]) -> List[Dict[str, Union[str, int, float]]]: pass ``` **Example Input:** ```python inventory_list = [ {\'item_name\': \'Laptop\', \'category\': \'Electronics\', \'quantity\': 10, \'price_per_unit\': 899.99}, {\'item_name\': \'Tablet\', \'category\': \'Electronics\', \'quantity\': 15, \'price_per_unit\': 299.99}, {\'item_name\': \'Chair\', \'category\': \'Furniture\', \'quantity\': 20, \'price_per_unit\': 49.99} ] ``` **Expected Output:** ```python [ {\'item_name\': \'Laptop\', \'category\': \'Electronics\', \'quantity\': 10, \'price_per_unit\': 899.99, \'item_id\': \'Electronics1\', \'total_value\': 8999.90}, {\'item_name\': \'Tablet\', \'category\': \'Electronics\', \'quantity\': 15, \'price_per_unit\': 299.99, \'item_id\': \'Electronics2\', \'total_value\': 4499.85}, {\'item_name\': \'Chair\', \'category\': \'Furniture\', \'quantity\': 20, \'price_per_unit\': 49.99, \'item_id\': \'Furniture1\', \'total_value\': 999.80} ] ```","solution":"from typing import List, Dict, Union def process_inventory(inventory_list: List[Dict[str, Union[str, int, float]]]) -> List[Dict[str, Union[str, int, float]]]: Processes the inventory list to add unique item IDs and total values. Parameters: inventory_list (List[Dict[str, Union[str, int, float]]]): List of inventory items. Returns: List[Dict[str, Union[str, int, float]]]: List of processed inventory items with added \'item_id\' and \'total_value\'. processed_list = [] category_count = {} for index, item in enumerate(inventory_list): category = item[\'category\'] if category not in category_count: category_count[category] = 0 category_count[category] += 1 item_id = f\\"{category}{category_count[category]}\\" total_value = round(item[\'quantity\'] * item[\'price_per_unit\'], 2) processed_item = item.copy() processed_item[\'item_id\'] = item_id processed_item[\'total_value\'] = total_value processed_list.append(processed_item) return processed_list"},{"question":"You are asked to write a function in Python that processes a list of dictionaries and generates a summary report based on specific criteria. The function should be named `generate_summary_report`. Here are the detailed requirements for the function `generate_summary_report`: 1. The function should take one parameter: - `data`: a list of dictionaries where each dictionary represents an individual\'s record with the following keys: `\\"name\\"`, `\\"age\\"`, `\\"department\\"`, and `\\"salary\\"`. 2. The function should generate a summary report that includes: - The total number of individuals. - The average age of all individuals. - The total salary paid to individuals in each department. - A list of individuals whose salary is above the average salary of all individuals. 3. The report should be returned as a dictionary with the following keys: - `\\"total_individuals\\"`: the total number of individuals. - `\\"average_age\\"`: the average age of all individuals. - `\\"total_salary_by_department\\"`: a dictionary where the keys are department names and the values are the total salaries paid to individuals in those departments. - `\\"above_average_salary\\"`: a list of dictionaries representing individuals whose salary is above the average salary. Your task is to implement this function `generate_summary_report`.","solution":"def generate_summary_report(data): Generates a summary report based on the given list of dictionaries representing individuals. Parameters: - data (list): A list of dictionaries with keys: \\"name\\", \\"age\\", \\"department\\", and \\"salary\\". Returns: - dict: A dictionary containing the summary report. if not data: return { \\"total_individuals\\": 0, \\"average_age\\": 0, \\"total_salary_by_department\\": {}, \\"above_average_salary\\": [] } total_individuals = len(data) total_age = sum(individual[\'age\'] for individual in data) average_age = total_age / total_individuals total_salary_by_department = {} for individual in data: department = individual[\'department\'] salary = individual[\'salary\'] if department not in total_salary_by_department: total_salary_by_department[department] = 0 total_salary_by_department[department] += salary average_salary = sum(individual[\'salary\'] for individual in data) / total_individuals above_average_salary = [ individual for individual in data if individual[\'salary\'] > average_salary ] return { \\"total_individuals\\": total_individuals, \\"average_age\\": average_age, \\"total_salary_by_department\\": total_salary_by_department, \\"above_average_salary\\": above_average_salary }"},{"question":"You need to implement a function called `max_sliding_window` that finds the maximum value in each sliding window of size `k` in an array of integers. The function should return an array containing those maximum values in the same order as the windows appear in the array. # Input - `nums`: A list of integers representing the input array. - `k`: An integer representing the size of the sliding window. # Output - A list of integers representing the maximum values of each sliding window. # Constraints - All integers in the input list and the sliding window size `k` are non-negative. - The length of the input list is greater than or equal to `k`. # Example Input: ```python nums = [1, 3, 1, 2, 0, 5] k = 3 ``` Output: ```python [3, 3, 2, 5] ``` # Notes: 1. To achieve efficient performance, avoid using nested loops. Aim for an algorithm with linear complexity. Here is the function signature: ```python def max_sliding_window(nums, k): # Your implementation goes here ```","solution":"from collections import deque def max_sliding_window(nums, k): Finds the maximum values in each sliding window of size k in the given list of integers. Parameters: nums (list of int): The input array of integers. k (int): The size of the sliding window. Returns: list of int: The list of maximum values for each sliding window. if not nums or k <= 0: return [] if k == 1: return nums deq = deque() output = [] for i in range(len(nums)): # Remove elements not within the sliding window if deq and deq[0] < i - k + 1: deq.popleft() # Remove elements from deq while they are smaller than current num while deq and nums[deq[-1]] < nums[i]: deq.pop() # Add current element\'s index to deq deq.append(i) # Once we have processed at least k elements, add the maximum of the current window to output list if i >= k - 1: output.append(nums[deq[0]]) return output"},{"question":"In this problem, you are tasked with implementing a function `matrix_rotate` that rotates a given square matrix by 90 degrees clockwise. This function emphasizes understanding and manipulating 2-dimensional arrays using the numpy library. # Function Signature ```python import numpy as np def matrix_rotate(matrix: np.ndarray) -> np.ndarray: pass ``` # Requirements 1. The `matrix` is a 2-dimensional numpy array of shape (n, n), where `n` is the dimension of the square matrix. 2. The function should return a new 2-dimensional numpy array of the same shape (n, n) containing the original matrix rotated 90 degrees clockwise. # Functionality 1. Rotate the input `matrix` by 90 degrees clockwise using appropriate numpy operations. 2. The output matrix should have elements shifted from the appropriate indices as per the 90 degrees rotation rule. # Example ```python matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) print(matrix_rotate(matrix)) # Expected output: # array([[7, 4, 1], # [8, 5, 2], # [9, 6, 3]]) ``` # Rules - You may utilize numpy functions such as `np.rot90` and slicing operations to implement the rotation. - Ensure the function is efficient and handles edge cases (e.g., small matrices such as 1x1 matrix). - Explain each part of the solution for better understanding.","solution":"import numpy as np def matrix_rotate(matrix: np.ndarray) -> np.ndarray: Rotates a given square matrix by 90 degrees clockwise. Args: matrix (np.ndarray): A 2-dimensional numpy array of shape (n, n). Returns: np.ndarray: A new 2-dimensional numpy array of shape (n, n) containing the original matrix rotated 90 degrees clockwise. # Transpose the matrix transposed_matrix = np.transpose(matrix) # Reverse each row to get the 90 degrees clockwise rotation rotated_matrix = np.flip(transposed_matrix, axis=1) return rotated_matrix"},{"question":"In this challenge, you need to create a function that processes a list of strings and returns a dictionary where the keys are the strings themselves, and the values are the lengths of those strings. The objective is to understand and utilize dictionary comprehensions in Python. You have to implement a function called `string_lengths`, which takes a single argument `str_list`. This argument is a list of strings. The `string_lengths` function should return a dictionary where each key-value pair represents a string from the input list and its corresponding length. # Requirements: - Use dictionary comprehension to create the dictionary. # Function Signature: ```python def string_lengths(str_list: [str]) -> dict: ``` # Example: ```python # Example input list of strings input_strings = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"] # Call the function with the example input result = string_lengths(input_strings) # Expected output: {\'apple\': 5, \'banana\': 6, \'cherry\': 6, \'date\': 4} print(result) # Output: {\'apple\': 5, \'banana\': 6, \'cherry\': 6, \'date\': 4} # Assertions to test the function assert result == {\'apple\': 5, \'banana\': 6, \'cherry\': 6, \'date\': 4} assert string_lengths([\\"\\"]) == {\\"\\": 0} # Edge case of an empty string assert string_lengths([\\"a\\", \\"ab\\", \\"abc\\"]) == {\\"a\\": 1, \\"ab\\": 2, \\"abc\\": 3} # Example of varied length strings ``` Implement the function according to the provided requirements.","solution":"def string_lengths(str_list): Processes a list of strings and returns a dictionary where the keys are the strings themselves and the values are their lengths. Args: str_list (list): A list of strings. Returns: dict: A dictionary with strings as keys and their lengths as values. return {s: len(s) for s in str_list}"},{"question":"Create a class in Python that models a basic banking system. The class should support operations such as creating an account with an initial balance, depositing money into the account, withdrawing money from the account, and checking the current balance. Ensure the withdrawal and deposit operations validate the amounts to prevent negative balances and handle invalid transactions. Implement the following methods: - `__init__` to initialize the account with a unique account number and initial balance (default to 0). - `deposit` to add funds to the account. - `withdraw` to take funds out of the account. - `check_balance` to return the current balance. Here\'s a blueprint to get you started: ``` class BankAccount: def __init__(self, account_number, initial_balance=0): # Initialize the account pass def deposit(self, amount): # Add the specified amount to the balance pass def withdraw(self, amount): # Subtract the specified amount from the balance, if sufficient funds are available pass def check_balance(self): # Return the current account balance pass ``` For instance, creating an account with an initial balance of 100, depositing 50, and then withdrawing 30 should correctly update the balance and handle each operation appropriately. Ensure to validate all inputs for logical consistency.","solution":"class BankAccount: def __init__(self, account_number, initial_balance=0): Initialize the bank account with account number and an initial balance. self.account_number = account_number if initial_balance < 0: raise ValueError(\\"Initial balance cannot be negative.\\") self.balance = initial_balance def deposit(self, amount): Deposit a specified amount into the account. if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.balance += amount def withdraw(self, amount): Withdraw a specified amount from the account if there are sufficient funds. if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds.\\") self.balance -= amount def check_balance(self): Return the current balance of the account. return self.balance"},{"question":"You are provided with a pandas DataFrame, `sales_df`, containing data related to product sales. The DataFrame has the following columns: - `Product ID`: The unique identifier for the product. - `Store`: The store where the product was sold. - `Sales`: The number of units sold. - `Sales Date`: The date of the sale. Your task is to write a function, `analyze_sales`, that performs the following steps: 1. Calculate the total number of units sold for each `Product ID`. 2. Calculate the total number of units sold for each `Store`. 3. Calculate the monthly sales trend for each `Product ID` over the given period. 4. Plot a line chart for the monthly sales trend of the top 3 best-selling products. The plot should have the following properties: - Different colors for each product line. - Legend should be visible at the top left corner. - Plot title should be \\"Monthly Sales Trend of Top 3 Products\\". - Grid should be visible with a gray color. 5. Print the total sales from steps 1 and 2. Use the libraries `pandas` and `matplotlib` for data manipulation and plotting, respectively. Here\'s how your function signature should look: ```python def analyze_sales(sales_df: pd.DataFrame) -> None: pass ``` # Example For a DataFrame `sales_df` as below: ```python data = { \\"Product ID\\": [101, 202, 101, 303, 202, 101], \\"Store\\": [\\"Store A\\", \\"Store B\\", \\"Store A\\", \\"Store C\\", \\"Store B\\", \\"Store A\\"], \\"Sales\\": [5, 10, 15, 7, 8, 12], \\"Sales Date\\": pd.to_datetime([\\"2023-01-05\\", \\"2023-01-06\\", \\"2023-02-10\\", \\"2023-03-05\\", \\"2023-03-15\\", \\"2023-04-02\\"]) } sales_df = pd.DataFrame(data) ``` When calling the function `analyze_sales(sales_df)`, the function should compute the total sales, plot the required line chart, and print the required sales totals.","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_sales(sales_df: pd.DataFrame) -> None: # Step 1: Calculate the total number of units sold for each Product ID product_sales = sales_df.groupby(\'Product ID\')[\'Sales\'].sum() print(\\"Total units sold per Product ID:\\") print(product_sales) # Step 2: Calculate the total number of units sold for each Store store_sales = sales_df.groupby(\'Store\')[\'Sales\'].sum() print(\\"nTotal units sold per Store:\\") print(store_sales) # Step 3: Calculate the monthly sales trend for each Product ID sales_df[\'Sales Date\'] = pd.to_datetime(sales_df[\'Sales Date\']) sales_df[\'Month\'] = sales_df[\'Sales Date\'].dt.to_period(\'M\') monthly_sales = sales_df.groupby([\'Product ID\', \'Month\'])[\'Sales\'].sum().unstack(fill_value=0) # Step 4: Plot a line chart for the monthly sales trend of the top 3 best-selling products top_products = product_sales.nlargest(3).index top_monthly_sales = monthly_sales.loc[top_products] plt.figure(figsize=(10, 6)) for product_id in top_monthly_sales.index: plt.plot(top_monthly_sales.columns.astype(str), top_monthly_sales.loc[product_id], label=f\'Product {product_id}\') plt.title(\\"Monthly Sales Trend of Top 3 Products\\") plt.xlabel(\\"Month\\") plt.ylabel(\\"Sales\\") plt.legend(loc=\'upper left\') plt.grid(True, linestyle=\'--\', color=\'gray\') plt.show()"},{"question":"In this problem, you will be implementing a function to find the shortest word transformation sequence from a start word to an end word, given a list of allowed intermediate words. You are required to solve this using Breadth-First Search (BFS). Function Signature ```python def word_ladder(start: str, end: str, word_list: list[str]) -> int: Find the length of the shortest transformation sequence from start to end. Parameters ---------- start : str The starting word. end : str The end word. word_list : list of str The list of intermediate allowed words. Returns ------- int The length of the shortest transformation sequence from start to end. If no such transformation sequence exists, return 0. # Your implementation here ``` # Detailed Explanation 1. **Transformation Sequence**: - Each word in the sequence should change by only one character at a time. - Each intermediate word must be in the given list of words. 2. **Breadth-First Search (BFS)**: - Use BFS to explore the shortest path from the start word to the end word. - Track visited words to avoid cycles. # Constraints: 1. All words have the same length. 2. All words consist of lowercase English letters only. 3. You may assume no duplicates in the word list. 4. The start and end words are non-empty and not the same. # Example ```python # Example data start = \\"hit\\" end = \\"cog\\" word_list = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"] # Function call result = word_ladder(start, end, word_list) # Example Output # result should be an integer indicating the length of the shortest transformation sequence # In this case, the result should be 5 corresponding to the sequence [\\"hit\\", \\"hot\\", \\"dot\\", \\"dog\\", \\"cog\\"] ``` # Libraries 1. `collections.deque`: You may use a deque for the BFS queue if needed. Your task is to complete the function `word_ladder` to match the description provided.","solution":"from collections import deque def word_ladder(start: str, end: str, word_list: list[str]) -> int: Find the length of the shortest transformation sequence from start to end. Parameters ---------- start : str The starting word. end : str The end word. word_list : list of str The list of intermediate allowed words. Returns ------- int The length of the shortest transformation sequence from start to end. If no such transformation sequence exists, return 0. if end not in word_list: return 0 word_list = set(word_list) queue = deque([(start, 1)]) visited = set() while queue: current_word, steps = queue.popleft() if current_word == end: return steps for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in word_list and next_word not in visited: visited.add(next_word) queue.append((next_word, steps + 1)) return 0"},{"question":"You are tasked with developing a simple recommendation system for a movie streaming service. The goal is to recommend movies to a user based on the genres they like. You will be provided with a DataFrame containing information about movies and their genres, as well as a list of genres that the user is interested in. Write a function `recommend_movies(movie_df, user_genres)` that performs the following: 1. Filters the movies based on the genre list provided by the user. 2. Sorts the filtered movies alphabetically by their title. 3. Returns a list of movie titles that match the user\'s interests. **Function Signature:** ```python def recommend_movies(movie_df, user_genres): pass ``` **Example Usage:** ```python import pandas as pd movie_data = { \\"movie_id\\": [1, 2, 3, 4, 5], \\"title\\": [\\"The Matrix\\", \\"Inception\\", \\"Toy Story\\", \\"Titanic\\", \\"Avengers\\"], \\"genres\\": [\\"Action|Sci-Fi\\", \\"Action|Thriller\\", \\"Animation|Children\\", \\"Drama|Romance\\", \\"Action|Adventure\\"] } movie_df = pd.DataFrame(movie_data) user_genres = [\\"Action\\", \\"Adventure\\"] recommended_movies = recommend_movies(movie_df, user_genres) print(recommended_movies) # Expected Output: [\'Avengers\', \'Inception\', \'The Matrix\'] ``` Provide a detailed implementation of the function `recommend_movies` in the next section.","solution":"def recommend_movies(movie_df, user_genres): Recommends movies to a user based on the genres they like. Parameters: movie_df (pd.DataFrame): DataFrame containing movie information with columns \'movie_id\', \'title\', and \'genres\'. user_genres (list): List of genres the user is interested in. Returns: list: List of movie titles that match the user\'s interests. recommended_movies = [] for index, row in movie_df.iterrows(): movie_genres = row[\'genres\'].split(\'|\') if any(genre in movie_genres for genre in user_genres): recommended_movies.append(row[\'title\']) recommended_movies.sort() return recommended_movies"},{"question":"You are asked to implement a function to perform clustering analysis on a set of geographical coordinates using the K-means algorithm. The dataset, provided as a list of tuples containing latitude and longitude, should be clustered into a specified number of clusters. Your function should: 1. Convert the list of tuples into a numpy array for processing. 2. Standardize the geographical coordinates for effective clustering using sklearn\'s StandardScaler. 3. Apply the K-means clustering algorithm from the sklearn library to the standardized data. 4. Return the cluster centers (latitude and longitude) and the labels assigned to each geographical point indicating which cluster they belong to. 5. Print the total sum of squared distances of samples to their nearest cluster center (inertia). Use the `sklearn.cluster` library to perform K-means clustering and `sklearn.preprocessing` for data standardization. To illustrate your code, the function signature is provided below: ```python def kmeans_clustering(coords, num_clusters): pass ``` Example: Given inputs: ```python coords = [(37.7749, -122.4194), (34.0522, -118.2437), (36.1699, -115.1398), (40.7128, -74.0060), (51.5074, -0.1278)] num_clusters = 2 ``` Output requirements: - A numpy array of the cluster centers (shape: `num_clusters x 2`, where each row contains [latitude, longitude]). - A numpy array of labels (shape: `number_of_coordinates`, where each element is the cluster label assigned to the corresponding coordinate). - Printed inertia value.","solution":"import numpy as np from sklearn.preprocessing import StandardScaler from sklearn.cluster import KMeans def kmeans_clustering(coords, num_clusters): Perform K-means clustering on geographical coordinates. Parameters: coords (list of tuple): List of tuples where each tuple contains the latitude and longitude. num_clusters (int): Number of clusters to form. Returns: (tuple): Tuple containing: - cluster_centers (numpy.ndarray): Array of cluster centers. - labels (numpy.ndarray): Array of labels indicating the cluster each coordinate belongs to. # Convert list of tuples to numpy array coords_array = np.array(coords) # Standardize the coordinates scaler = StandardScaler() standardized_coords = scaler.fit_transform(coords_array) # Apply K-means clustering kmeans = KMeans(n_clusters=num_clusters) kmeans.fit(standardized_coords) # Get the resulting cluster centers and labels cluster_centers_standardized = kmeans.cluster_centers_ labels = kmeans.labels_ # Convert the cluster centers back to original coordinate space cluster_centers = scaler.inverse_transform(cluster_centers_standardized) # Print inertia value print(f\'Total sum of squared distances (inertia): {kmeans.inertia_}\') return cluster_centers, labels"},{"question":"You are required to implement a function that finds the k most frequent elements in a given list and returns them in decreasing frequency order. If two elements have the same frequency, their relative order in the original list should be retained in the result. Your task is to write a function named `top_k_frequent` that meets these criteria. The function signature should be as follows: ```python def top_k_frequent(elements, k): Parameters: elements (list): A list of integers. k (int): The number of most frequent elements to return. Returns: list: A list of the k most frequent elements in decreasing frequency order. ``` # Function Requirements 1. **elements**: This parameter specifies the list of integers from which the k most frequent elements are to be identified. 2. **k**: This parameter specifies the number of top frequent elements to be returned. # Guidelines 1. Compute the frequency of each element in the list. 2. Use a stable sorting algorithm to ensure that if two elements have the same frequency, their order relative to each other in the original list is preserved. 3. Return the k elements with the highest frequency. # Example ```python # Example input elements = [1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4] k = 2 # Expected output # The function should return [4, 1] since 4 appears 4 times and 1 appears 3 times. print(top_k_frequent(elements, k)) # Output: [4, 1] ``` # Considerations 1. If `k` is greater than the number of unique elements in the list, return all unique elements. 2. Ensure the function executes efficiently for large lists. Implement the function so that it correctly identifies and returns the k most frequent elements based on the guidelines and examples provided.","solution":"def top_k_frequent(elements, k): Returns the k most frequent elements in decreasing frequency order. If two elements have the same frequency, their order in the original list is retained. from collections import Counter # Count the frequency of each element frequency = Counter(elements) # Get the unique elements sorted by frequency first, then by their first occurrence in the list unique_elements = sorted(frequency.keys(), key=lambda x: (-frequency[x], elements.index(x))) # Return the top k elements return unique_elements[:k]"},{"question":"You are tasked with designing a Python function `overlap_intervals` that finds the overlap between two lists of intervals. Each interval is represented as a tuple of two integers `[start, end]`, where `start` is the starting point and `end` is the endpoint. The interval is inclusive of both `start` and `end`. The function should have the following signature: ```python def overlap_intervals(intervals1: List[Tuple[int, int]], intervals2: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ``` # Parameters: - `intervals1`: A list of tuples where each tuple represents an interval `[start, end]`. The list is not necessarily sorted and may contain overlapping intervals. - `intervals2`: A list of tuples where each tuple represents an interval `[start, end]`. The list is not necessarily sorted and may contain overlapping intervals. # Returns: - A list of tuples where each tuple represents the overlapping intervals between the two lists. Each resulting interval should be as small as possible, excluding zero-length overlaps (i.e., the end must be greater than the start). # Constraints: 1. The intervals in `intervals1` and `intervals2` are not necessarily sorted. 2. There may be overlapping intervals within each input list. 3. The intervals in the output list should be sorted by their start values and should not overlap with each other. # Example: ```python intervals1 = [(1, 3), (5, 9), (12, 16)] intervals2 = [(2, 6), (8, 10), (15, 18)] overlap_intervals(intervals1, intervals2) # Output: [(2, 3), (5, 6), (8, 9), (15, 16)] ``` **Objective**: Implement the function `overlap_intervals` to find the overlaps between two lists of intervals based on the specified parameters and constraints.","solution":"from typing import List, Tuple def overlap_intervals(intervals1: List[Tuple[int, int]], intervals2: List[Tuple[int, int]]) -> List[Tuple[int, int]]: # First, sort both lists of intervals by their start value intervals1.sort() intervals2.sort() i = 0 j = 0 result = [] while i < len(intervals1) and j < len(intervals2): start1, end1 = intervals1[i] start2, end2 = intervals2[j] # Find the overlap between intervals1[i] and intervals2[j] overlap_start = max(start1, start2) overlap_end = min(end1, end2) if overlap_start <= overlap_end: result.append((overlap_start, overlap_end)) # Move to the next interval in the list that finished earlier if end1 < end2: i += 1 else: j += 1 return result"},{"question":"You are given a list of dictionaries where each dictionary represents a product and its details such as \'name\', \'price\', and \'stock\'. Write a function that filters out products that are out of stock or priced above a certain threshold. Return a list of product names that meet both criteria. Define your function as follows: ``` def filter_products(products, max_price): ``` # Parameters: - `products`(list): A list of dictionaries, where each dictionary contains: - \'name\' (str): The name of the product. - \'price\' (float): The price of the product. - \'stock\' (int): The number of items available in stock. - `max_price` (float): The maximum price threshold. # Returns: - `list` of strings: The names of products that are in stock and priced below the max_price. # Example: ``` products = [ {\\"name\\": \\"laptop\\", \\"price\\": 999.99, \\"stock\\": 10}, {\\"name\\": \\"smartphone\\", \\"price\\": 499.99, \\"stock\\": 0}, {\\"name\\": \\"tablet\\", \\"price\\": 199.99, \\"stock\\": 20}, {\\"name\\": \\"headphones\\", \\"price\\": 79.99, \\"stock\\": 50} ] max_price = 200.00 filter_products(products, max_price) ``` The function should return: ``` [\'tablet\', \'headphones\'] ```","solution":"def filter_products(products, max_price): Filters out products that are out of stock or priced above the max_price. Returns a list of product names that meet both criteria. :param products: list of dictionaries, each containing: \'name\' (str): The name of the product, \'price\' (float): The price of the product, \'stock\' (int): The stock count of the product. :param max_price: float, the maximum price threshold. :return: list of strings, names of products in stock and priced below the max_price. return [product[\'name\'] for product in products if product[\'stock\'] > 0 and product[\'price\'] <= max_price]"},{"question":"You are required to develop a function named `find_common_elements` that identifies the common elements between multiple lists and returns them as output. The function will take a list of lists where each sub-list contains integer values. Your function should: 1. Determine the common elements among all sub-lists in the input. 2. Return the common elements as a sorted list. Here\'s a template for your function: ```python def find_common_elements(lists_of_arrays): # Your code goes here ``` # Example Input: ```python lists_of_arrays = [ [3, 1, 2, 4], [5, 4, 3, 2, 1], [6, 2, 4, 3, 10] ] ``` # Expected Output: ```python [2, 3, 4] ``` The common elements are determined by their presence in all sub-lists, and the output should be sorted in ascending order.","solution":"def find_common_elements(lists_of_arrays): Returns the common elements among all sub-lists sorted in ascending order. if not lists_of_arrays: return [] common_elements = set(lists_of_arrays[0]) for sublist in lists_of_arrays[1:]: common_elements &= set(sublist) return sorted(common_elements)"},{"question":"In this problem, you are asked to implement a function that simulates a very basic file system with commands to create, delete, and move files. The file system is represented as a dictionary where keys are file paths and values are file contents. You are to write a function named `simulate_file_system` that takes a list of commands and performs the following operations: 1. `CREATE file_path content`: Creates a new file at the specified path with the given content. If the file already exists, it should be overwritten. 2. `DELETE file_path`: Deletes the file at the specified path. If the file does not exist, ignore the command. 3. `MOVE src_file_path dest_file_path`: Moves the file from the source path to the destination path. If the source file does not exist, ignore the command. If the destination file already exists, it should be overwritten. The function should return the resulting file system as a dictionary. Commands are given in a list, for example: ```python commands = [ \\"CREATE /a/b/c file1\\", \\"CREATE /x/y/z file2\\", \\"MOVE /a/b/c /a/b/d\\", \\"DELETE /x/y/z\\" ] ``` Your function definition should look like this: ```python def simulate_file_system(commands: list) -> dict: ``` Example usage: ```python commands = [ \\"CREATE /a/b/c file1\\", \\"CREATE /x/y/z file2\\", \\"MOVE /a/b/c /a/b/d\\", \\"DELETE /x/y/z\\" ] result = simulate_file_system(commands) # Expected output: # { # \\"/a/b/d\\": \\"file1\\" # } ```","solution":"def simulate_file_system(commands: list) -> dict: file_system = {} for command in commands: parts = command.split() operation = parts[0] if operation == \\"CREATE\\": path = parts[1] content = parts[2] file_system[path] = content elif operation == \\"DELETE\\": path = parts[1] if path in file_system: del file_system[path] elif operation == \\"MOVE\\": src_path = parts[1] dest_path = parts[2] if src_path in file_system: file_system[dest_path] = file_system[src_path] del file_system[src_path] return file_system"},{"question":"Write a function that implements the K-Nearest Neighbors (KNN) algorithm to classify data points and visualize the classification boundaries using Matplotlib. The function takes features, labels, the number of neighbors `k`, and plots the classification boundaries along with the data points. The function should output with: - Figure: A Matplotlib Figure object containing the plot. - Axes: An Axes object with the plotted classification boundaries and data points. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from matplotlib.colors import ListedColormap from sklearn.neighbors import KNeighborsClassifier def knn_decision_boundary(X, y, k=3, title=\\"KNN Decision Boundary\\"): ```","solution":"import numpy as np import matplotlib.pyplot as plt from matplotlib.colors import ListedColormap from sklearn.neighbors import KNeighborsClassifier def knn_decision_boundary(X, y, k=3, title=\\"KNN Decision Boundary\\"): Plots the K-Nearest Neighbors decision boundaries. Parameters: X (np.array): Feature data for plotting. y (np.array): Labels corresponding to the feature data. k (int): Number of neighbors. title (str): Title of the plot. Returns: fig (Figure): Matplotlib Figure object containing the plot. ax (Axes): Matplotlib Axes object with the plotted classification boundaries and data points. h = 0.02 # step size in the mesh # Create color maps cmap_light = ListedColormap([\'#FFAAAA\', \'#AAAAFF\']) cmap_bold = ListedColormap([\'#FF0000\', \'#0000FF\']) clf = KNeighborsClassifier(n_neighbors=k) clf.fit(X, y) # Calculate min, max values x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1 y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1 xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h)) Z = clf.predict(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape) fig, ax = plt.subplots() ax.contourf(xx, yy, Z, cmap=cmap_light) # Plot also the training points scatter = ax.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold, edgecolor=\'k\', s=20) legend1 = ax.legend(*scatter.legend_elements(), loc=\\"upper right\\", title=\\"Classes\\") ax.add_artist(legend1) ax.set_xlim(xx.min(), xx.max()) ax.set_ylim(yy.min(), yy.max()) ax.set_title(f\\"{title} (k = {k})\\") return fig, ax"},{"question":"You are tasked with implementing a function called `fill_missing_dates` that will take a DataFrame with a date column and fill in any missing dates within the given date range, preserving all existing columns and populating any added rows with NaN values for the non-date columns. Function Signature ```python def fill_missing_dates(df, date_col, start_date, end_date): pass ``` Parameters - `df`: A `pandas.DataFrame` object containing data, with at least one column being of date type. - `date_col`: A string representing the column name in `df` that contains date values. - `start_date`: A string representing the starting date in the format `YYYY-MM-DD`. - `end_date`: A string representing the ending date in the format `YYYY-MM-DD`. Returns - A `pandas.DataFrame` with missing dates within the specified range filled, preserving NaN values for other columns. Instructions 1. Convert the `date_col` to a `pandas.DatetimeIndex` if it is not already in that format. 2. Create a complete list of dates from `start_date` to `end_date`. 3. Reindex the DataFrame to include the complete list of dates, ensuring that new rows for missing dates contain NaN values for all columns except the date column. 4. Sort the DataFrame by the date column and return the resulting DataFrame. # Example Usage ```python import pandas as pd data = { \'date\': [\'2022-01-01\', \'2022-01-03\', \'2022-01-06\'], \'value\': [100, 200, 300] } df = pd.DataFrame(data) result = fill_missing_dates(df, \'date\', \'2022-01-01\', \'2022-01-07\') print(result) ``` # Expected Output ``` date value 0 2022-01-01 100.0 1 2022-01-02 NaN 2 2022-01-03 200.0 3 2022-01-04 NaN 4 2022-01-05 NaN 5 2022-01-06 300.0 6 2022-01-07 NaN ``` # Additional Notes - Ensure that the date handling is consistent and correctly managed using `pandas` datetime functions. - The resulting DataFrame should have a continuous index based on the date range provided.","solution":"import pandas as pd def fill_missing_dates(df, date_col, start_date, end_date): Fills in missing dates within the given date range in the DataFrame. Parameters: df (pd.DataFrame): The DataFrame containing data. date_col (str): The column name that contains date values. start_date (str): The starting date in the format \'YYYY-MM-DD\'. end_date (str): The ending date in the format \'YYYY-MM-DD\'. Returns: pd.DataFrame: A DataFrame with missing dates filled in and other columns populated with NaNs for missing dates. # Ensure that the date column is in datetime format df[date_col] = pd.to_datetime(df[date_col]) # Generate a full date range full_date_range = pd.date_range(start=start_date, end=end_date) # Set the date column as the index df.set_index(date_col, inplace=True) # Reindex the DataFrame with the full date range df = df.reindex(full_date_range) # Reset the index and rename the date index to the original date column name df.reset_index(inplace=True) df.rename(columns={\'index\': date_col}, inplace=True) # Return the reindexed DataFrame return df"},{"question":"** You are given a task to develop a function named `find_rare_words` which helps identify rare words from a collection of text files. Each text file in a specified folder contains a random mix of words. The function should: 1. Read all text files in the specified folder and count the occurrence of each word across all files. 2. Identify words that appear less than `threshold` times in total across all files. The function should have the following signature: ```python def find_rare_words(folder_path: str, threshold: int) -> list: ``` **Parameters:** - `folder_path` (str): The path to the folder containing the text files. - `threshold` (int): The maximum number of occurrences for a word to be considered rare. **Returns:** - list: A list of rare words (those that appear less than `threshold` times). **Libraries to Use**: You are required to use the following libraries in your implementation: - `os.listdir` - `collections.Counter` **Example Usage:** Assume the folder contains three text files: - `folder_path/file_1.txt` - `folder_path/file_2.txt` - `folder_path/file_3.txt` ```plaintext Content of file_1.txt: apple banana apple Content of file_2.txt: banana banana orange Content of file_3.txt: apple orange berry berry ``` The function call: ```python rare_words = find_rare_words(\\"folder_path\\", 3) ``` will produce a result list containing the rare words, which in this case would be: `[\\"orange\\"]`. Note: Words should be case-insensitive and punctuation should be ignored. **","solution":"import os from collections import Counter def find_rare_words(folder_path: str, threshold: int) -> list: word_counter = Counter() for filename in os.listdir(folder_path): if filename.endswith(\\".txt\\"): with open(os.path.join(folder_path, filename), \'r\', encoding=\'utf-8\') as file: for line in file: words = line.lower().translate(str.maketrans(\\"\\", \\"\\", \\",.!?;:\\")).split() word_counter.update(words) rare_words = [word for word, count in word_counter.items() if count < threshold] return rare_words"},{"question":"**Context:** You are developing a recommendation system for an online bookstore. To better understand the reading preferences of your users, you need to analyze the patterns in their book ratings. Assume all ratings are integers between 1 and 5. **Objective:** Write a function `get_rating_trends()` that takes in a list of user ratings and returns the number of increases, decreases, and stable points in the sequence of ratings. An increase is when a rating is higher than the previous one, a decrease is when it is lower, and a stable point is when the rating is the same as the previous one. **Function Signature:** ```python def get_rating_trends(ratings: list[int]) -> tuple[int, int, int]: pass ``` **Requirements:** 1. You should iterate through the list of ratings and compare each rating to the previous one. 2. Count the number of increases, decreases, and stable points in the ratings list. 3. Return the counts as a tuple in the form (increases, decreases, stable points). **Example Input:** ```python ratings = [1, 2, 2, 3, 1, 4, 4, 2, 5, 5] ``` **Example Output:** ```python (4, 2, 3) ``` **Explanation:** - The first comparison (1 to 2) is an increase. - The second comparison (2 to 2) is a stable point. - The third comparison (2 to 3) is an increase. - The fourth comparison (3 to 1) is a decrease. - The fifth comparison (1 to 4) is an increase. - The sixth comparison (4 to 4) is a stable point. - The seventh comparison (4 to 2) is a decrease. - The eighth comparison (2 to 5) is an increase. - The ninth comparison (5 to 5) is a stable point. Therefore, there are 4 increases, 2 decreases, and 3 stable points.","solution":"def get_rating_trends(ratings: list[int]) -> tuple[int, int, int]: Returns the number of increases, decreases, and stable points in the sequence of ratings. if len(ratings) < 2: return (0, 0, 0) increases = decreases = stable_points = 0 for i in range(1, len(ratings)): if ratings[i] > ratings[i - 1]: increases += 1 elif ratings[i] < ratings[i - 1]: decreases += 1 else: stable_points += 1 return (increases, decreases, stable_points)"},{"question":"You are developing a utility for monitoring a directory for any new text files that get added. When a new text file is identified, you need to read its contents and append them to a master log file (`masterlog.txt`). This functionality is essential for maintaining a consolidated log of all text files added to the directory. Function Name: `monitor_directory_and_log` Roles of this function: - Continuously monitor a specified directory for any new text files (`.txt`). - When a new text file is detected, read the content of this file and append it to the end of `masterlog.txt`. - Ensure that only the newly added files since the function started running are processed. - Use appropriate file handling and directory monitoring techniques. **Function Specification:** ```python def monitor_directory_and_log(directory_path): Monitors the specified directory for new text files and appends their contents to \'masterlog.txt\'. Args: directory_path (str): The path to the directory to monitor. ``` **Important Note**: You may use the available Python libraries like `os`, `time`, and `fnmatch` to monitor the directory and identify text files. Ensure the function handles any exceptions that may occur, such as file access issues.","solution":"import os import time from fnmatch import fnmatch def monitor_directory_and_log(directory_path): Monitors the specified directory for new text files and appends their contents to \'masterlog.txt\'. Args: directory_path (str): The path to the directory to monitor. processed_files = set() while True: try: # Check the directory for new .txt files current_files = set(f for f in os.listdir(directory_path) if fnmatch(f, \'*.txt\')) new_files = current_files - processed_files for file_name in new_files: file_path = os.path.join(directory_path, file_name) with open(file_path, \'r\') as file: file_content = file.read() with open(\'masterlog.txt\', \'a\') as master_log: master_log.write(file_content) processed_files.add(file_name) time.sleep(1) except Exception as e: print(f\\"An error occurred: {e}\\") time.sleep(1)"},{"question":"You are tasked with creating a function `process_numbers(numbers, operation=\\"sum\\", transformer=None)` that takes a list of numbers, an operation (either `\\"sum\\"`, `\\"product\\"`, `\\"average\\"`, `\\"min\\"`, or `\\"max\\"`), and an optional transformer function. The function should perform the specified operation on the list of numbers, optionally applying the transformer function to each number before the operation. Your function should: 1. Define a nested function `apply_transformer(numbers, transformer)` that: - Takes a list of numbers and a transformer function. - Returns a list where each number has been transformed by the given transformer function. If the transformer is `None`, return the numbers as-is. 2. Define a nested function `perform_operation(numbers, operation)` that: - Takes a list of numbers and an operation string. - Returns the result of the specified operation (`\\"sum\\"`, `\\"product\\"`, `\\"average\\"`, `\\"min\\"`, or `\\"max\\"`). Use the appropriate Python built-in functions (e.g., `sum`, `min`, `max`, etc.). - Raise an exception if an invalid operation is provided. 3. Use the `apply_transformer` function to apply the transformer to the numbers (if any). 4. Use the `perform_operation` function to compute the desired operation on the (transformed) numbers. 5. Return the result of the operation. # Example Usage ```python numbers = [1, 2, 3, 4, 5] print(process_numbers(numbers, \\"sum\\")) # Output: 15 print(process_numbers(numbers, \\"product\\")) # Output: 120 print(process_numbers(numbers, \\"average\\")) # Output: 3.0 print(process_numbers(numbers, \\"min\\")) # Output: 1 print(process_numbers(numbers, \\"max\\")) # Output: 5 # Using a transformer function to square each number transformer = lambda x: x**2 print(process_numbers(numbers, \\"sum\\", transformer)) # Output: 55 (1^2 + 2^2 + 3^2 + 4^2 + 5^2) print(process_numbers(numbers, \\"product\\", transformer)) # Output: 14400 (1^2 * 2^2 * 3^2 * 4^2 * 5^2) # Should raise an exception with message \\"Invalid operation given\\" print(process_numbers(numbers, \\"median\\")) ```","solution":"def process_numbers(numbers, operation=\\"sum\\", transformer=None): Process a list of numbers by applying a given operation and an optional transformer function. Args: numbers (list): List of numbers. operation (str): The operation to perform. Possible values are \\"sum\\", \\"product\\", \\"average\\", \\"min\\", or \\"max\\". transformer (function, optional): A function to apply to each number before performing the operation. Returns: The result of the specified operation on the (transformed) list of numbers. def apply_transformer(numbers, transformer): if transformer is None: return numbers return [transformer(num) for num in numbers] def perform_operation(numbers, operation): if operation == \\"sum\\": return sum(numbers) elif operation == \\"product\\": result = 1 for num in numbers: result *= num return result elif operation == \\"average\\": return sum(numbers) / len(numbers) elif operation == \\"min\\": return min(numbers) elif operation == \\"max\\": return max(numbers) else: raise ValueError(\\"Invalid operation given\\") transformed_numbers = apply_transformer(numbers, transformer) return perform_operation(transformed_numbers, operation)"},{"question":"Read a text file containing multiple lines of comma-separated values (CSV format). Each line represents a product with the following information: \'product_id\', \'name\', \'category\', and \'price\'. Write a function that reads the file, calculates the total number of products and the average price per category, and returns a dictionary where key is the category and the value is another dictionary with keys \'total_products\' and \'average_price\'. The function should raise the exception for: FileNotFoundError: If the file does not exist. ValueError: If any line does not have exactly four values, or if \'price\' is not a valid floating-point number. The function should output: dict: A dictionary where each key is a category and each value is another dictionary with keys \'total_products\' and \'average_price\'. You should write self-contained code starting with: ``` def analyze_products(file_path): ```","solution":"def analyze_products(file_path): import os if not os.path.exists(file_path): raise FileNotFoundError(f\\"File not found: {file_path}\\") category_data = {} with open(file_path, \'r\') as file: for line in file: parts = line.strip().split(\',\') if len(parts) != 4: raise ValueError(\\"Each line must contain exactly four values\\") product_id, name, category, price = parts try: price = float(price) except ValueError: raise ValueError(\\"Price must be a valid floating-point number\\") if category not in category_data: category_data[category] = {\'total_products\': 0, \'total_price\': 0.0} category_data[category][\'total_products\'] += 1 category_data[category][\'total_price\'] += price # Calculate the average price for each category for category in category_data: total_products = category_data[category][\'total_products\'] total_price = category_data[category][\'total_price\'] category_data[category][\'average_price\'] = total_price / total_products # Remove total_price from the dictionary for the final output del category_data[category][\'total_price\'] return category_data"},{"question":"You are required to define a function called `calculate_route_distance` that calculates the total distance of a route based on a given list of city coordinates. The coordinates are given as a list of tuples, where each tuple contains the x and y positions of a city. The function should compute the distance by summing up the Euclidean distances between consecutive cities, including the distance from the last city back to the first to form a complete route (circular route). To calculate the Euclidean distance between two cities `(x1, y1)` and `(x2, y2)`, use the formula: ``` distance = sqrt((x2 - x1)^2 + (y2 - y1)^2) ``` Here are the specific requirements: 1. The function should take a list of tuples as input, where each tuple contains the `(x, y)` coordinates of a city. 2. The function should calculate the distance between each pair of consecutive cities and sum these distances. 3. The function should also include the distance from the last city back to the first city to complete the circular route. 4. You can use the `math.sqrt` function to calculate the square root and the `math.pow` function to calculate the power. The function signature should be: ```python def calculate_route_distance(cities: list) -> float: ``` Your task is to implement this function so that, given a list of city coordinates, it returns the total distance of the route.","solution":"import math def calculate_route_distance(cities: list) -> float: Calculate the total distance of a circular route given a list of city coordinates. Args: cities (list): A list of tuples, where each tuple contains two floats representing the x and y coordinates of a city. Returns: float: The total distance of the route. total_distance = 0.0 if len(cities) < 2: return total_distance for i in range(len(cities)): x1, y1 = cities[i] x2, y2 = cities[(i + 1) % len(cities)] distance = math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2)) total_distance += distance return total_distance"},{"question":"You are required to design and implement a class that represents a simplified transaction ledger for a bank account, allowing for deposits, withdrawals, and balance queries. The class should maintain the transaction history and be able to return a statement for all transactions in the account. # Class Requirements: 1. **Class Name**: `BankAccount` 2. **Methods**: - `__init__(self, account_name: str)`: Initializes the account with the given account name and an empty transaction list. - `deposit(self, amount: float)`: Adds the provided amount to the account balance and records the transaction. - `withdraw(self, amount: float)`: Deducts the provided amount from the account balance if there are sufficient funds and records the transaction. If there are insufficient funds, the method should raise an `InsufficientFundsError` exception, which should be a custom exception defined in your code. - `get_balance(self) -> float`: Returns the current account balance. - `get_statement(self) -> List[Dict[str, Union[str, float]]]`: Returns a list of dictionaries, each representing a transaction. Each dictionary should contain the type of transaction (\'deposit\' or \'withdrawal\'), the amount, and the resulting balance after the transaction. # Example Usage: ```python # Create a new bank account account = BankAccount(\\"John Doe\\") # Make some transactions account.deposit(1000.0) account.withdraw(250.0) balance = account.get_balance() # Should return 750.0 # Get the transaction statement statement = account.get_statement() # Statement example: # [ # {\\"type\\": \\"deposit\\", \\"amount\\": 1000.0, \\"balance\\": 1000.0}, # {\\"type\\": \\"withdrawal\\", \\"amount\\": 250.0, \\"balance\\": 750.0} # ] ``` # Custom Exception: 1. **Class Name**: `InsufficientFundsError` 2. **Inheritance**: Inherits from `Exception`. 3. **Initialization**: `__init__(self, message: str = \\"Insufficient funds for the transaction\\")` # Implementation Details: - Ensure proper handling of floating-point amounts when updating the balance. - Add appropriate type hints to all methods. - Include docstrings for all methods explaining their purpose and usage. The main goal is to reflect a real-world scenario of a basic banking system transaction ledger while ensuring error handling and class-based structure adherence.","solution":"from typing import List, Dict, Union class InsufficientFundsError(Exception): def __init__(self, message: str = \\"Insufficient funds for the transaction\\"): self.message = message super().__init__(self.message) class BankAccount: def __init__(self, account_name: str): self.account_name = account_name self.balance = 0.0 self.transaction_history = [] def deposit(self, amount: float): if amount <= 0: raise ValueError(\\"Deposit amount must be positive\\") self.balance += amount transaction = {\\"type\\": \\"deposit\\", \\"amount\\": amount, \\"balance\\": self.balance} self.transaction_history.append(transaction) def withdraw(self, amount: float): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") if amount > self.balance: raise InsufficientFundsError() self.balance -= amount transaction = {\\"type\\": \\"withdrawal\\", \\"amount\\": amount, \\"balance\\": self.balance} self.transaction_history.append(transaction) def get_balance(self) -> float: return self.balance def get_statement(self) -> List[Dict[str, Union[str, float]]]: return self.transaction_history"},{"question":"In this exercise, you are required to use the Pandas and Matplotlib libraries to analyze and visualize the distribution of a dataset. The purpose of this problem is to understand how to use the `pandas.read_csv`, `pandas.DataFrame.describe`, `pandas.DataFrame.hist`, and `matplotlib.pyplot` functions effectively. You need to write a function called `analyze_and_plot_distribution` that performs the following tasks: 1. Reads a CSV file specified by the file path into a Pandas DataFrame. The CSV file contains numerical data across multiple columns. 2. Displays the summary statistics of the DataFrame using the `describe` method. 3. Plots a histogram for each numerical column in the DataFrame with appropriate labels. The function should have the following signature: ```python def analyze_and_plot_distribution(file_path: str): # Your code goes here ``` # Constraints: 1. Use `pandas.read_csv` to read the CSV file. 2. Use `pandas.DataFrame.describe` to display summary statistics of the numerical columns. 3. Use `pandas.DataFrame.hist` to plot histograms for each numerical column. 4. Use `matplotlib.pyplot.show` to display the histograms. # Example Output: When the function is called with a valid file path, the summary statistics should be printed, and histograms for each numerical column should be displayed.","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_and_plot_distribution(file_path: str): Reads a CSV file into a Pandas DataFrame, displays summary statistics, and plots histograms for numerical columns. :param file_path: Path to the CSV file # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Display summary statistics of the DataFrame print(df.describe()) # Plot histograms for each numerical column df.hist(bins=30, figsize=(10, 10)) plt.tight_layout() plt.show()"},{"question":"You are required to implement a function that calculates the running moving average of a time series dataset with a specified window size. The dataset is structured as a `pandas.DataFrame` with a column for dates and another for the data values. Your task is to calculate and append the moving averages to the original dataset. The dataset `data` has the following structure: - A column named \'date\' with dates in a string format (e.g., \'YYYY-MM-DD\'). - A column named \'value\' with numerical values representing the data points. Your function, `moving_average`, should: 1. Convert the \'date\' column to a datetime format. 2. Ensure the data is sorted by the \'date\' column. 3. Compute the moving average using a specified window size. 4. Append the computed moving averages as a new column named \'moving_avg\' to the original dataset. 5. Return the modified `pandas.DataFrame`. Function Signature: ```python def moving_average(data: pd.DataFrame, window_size: int) -> pd.DataFrame: pass ``` # Requirements: 1. Use `pandas.DataFrame` for data manipulation. 2. Utilize `pandas.Series.rolling` to compute the moving averages. Here is an example of invoking the function: ```python import pandas as pd # Example dataset data = pd.DataFrame({ \'date\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-04\', \'2023-01-05\'], \'value\': [10, 20, 30, 40, 50] }) # Use the function to calculate moving average with a window size of 3 result = moving_average(data, 3) print(result) ``` # Expected Output: The `result` DataFrame should include the original columns along with a new column `moving_avg` displaying the calculated moving averages: ```plaintext date value moving_avg 0 2023-01-01 10 NaN 1 2023-01-02 20 NaN 2 2023-01-03 30 20.0 3 2023-01-04 40 30.0 4 2023-01-05 50 40.0 ``` Here, the `moving_avg` column starts to show values once there is enough data to fill the specified window size (3 in this case).","solution":"import pandas as pd def moving_average(data: pd.DataFrame, window_size: int) -> pd.DataFrame: Calculate and append the moving average to the dataframe. Args: data (pd.DataFrame): The input DataFrame with \'date\' and \'value\' columns. window_size (int): The window size for calculating the moving average. Returns: pd.DataFrame: The DataFrame with an additional \'moving_avg\' column. # Convert the \'date\' column to datetime format data[\'date\'] = pd.to_datetime(data[\'date\']) # Sort the data by \'date\' data = data.sort_values(by=\'date\') # Calculate the moving average data[\'moving_avg\'] = data[\'value\'].rolling(window=window_size).mean() return data"},{"question":"You are tasked with creating a function `find_missing_number` that takes in a list of integers and returns the missing number in the sequence. The list is supposed to contain consecutive numbers in a given range but will always have exactly one number missing. The sequence may not necessarily start with 1, but it will be in ascending order without duplicates. The function should be optimized for both time and space complexities. **Your function must:** 1. Identify the correct range of the sequence using the minimum and maximum values in the list. 2. Determine the missing number efficiently. 3. Handle cases where the input list is extremely large. # Function Signature ```python def find_missing_number(nums: List[int]) -> int: Find the missing number in a list of consecutive integers. Parameters: ----------- nums : List[int] List of consecutive integers with exactly one number missing. Returns ---------- int The missing number in the sequence. ``` # Example ```python # Test case 1 nums = [1, 2, 3, 4, 6, 7, 8, 9, 10] print(find_missing_number(nums)) # Output: 5 # Test case 2 nums = [10, 11, 12, 13, 14, 16] print(find_missing_number(nums)) # Output: 15 ``` # Note: - You can assume the input list will always have at least two numbers and be sorted in ascending order. - The function should run in linear time `O(n)` and use constant space `O(1)`.","solution":"from typing import List def find_missing_number(nums: List[int]) -> int: Find the missing number in a list of consecutive integers. Parameters: ----------- nums : List[int] List of consecutive integers with exactly one number missing. Returns ---------- int The missing number in the sequence. n = len(nums) + 1 # since one number is missing actual_sum = sum(nums) expected_sum = (n * (nums[0] + nums[-1])) // 2 return expected_sum - actual_sum"},{"question":"You are asked to write a Python function named `find_common_characters`. This function will take two strings as input and will return a sorted list of unique characters that are present in both strings. **Requirements**: 1. The function should be case-insensitive, meaning \'A\' and \'a\' should be considered the same character. 2. The resulting list should contain unique characters only, without duplicates. 3. The characters in the returned list should be sorted in alphabetical order. 4. You can assume that the input strings will only contain alphabetic characters (no spaces, numbers, or punctuation). **Function Signature**: ```python def find_common_characters(str1: str, str2: str) -> list: pass ``` **Input**: - `str1`: A string containing alphabetic characters. - `str2`: A string containing alphabetic characters. **Output**: - The function returns a list of unique characters present in both strings, sorted in alphabetical order. # Example ```python result = find_common_characters(\\"HelloWorld\\", \\"worldPeace\\") print(result) # Output: [\'d\', \'e\', \'l\', \'o\', \'r\', \'w\'] ``` # Hints: - Use Python\'s `set` data structure to find the intersection of characters. - Convert both strings to lowercase before finding common characters. - To sort the list, you can use Python\'s built-in `sorted()` function.","solution":"def find_common_characters(str1: str, str2: str) -> list: Returns a sorted list of unique characters that are present in both input strings. The function is case-insensitive. # Convert both strings to lower case to make the search case-insensitive lower_str1 = str1.lower() lower_str2 = str2.lower() # Use set intersection to find common characters common_characters = set(lower_str1) & set(lower_str2) # Return the sorted list of unique common characters return sorted(common_characters)"},{"question":"You are tasked with implementing a single function named `accumulate_products` that leverages the pandas library. This function will help us in computing a cumulative product across a DataFrame along a specified axis. Given a pandas DataFrame `df` and an integer `axis`, your task is to return a DataFrame where each element is the product of all previous elements along the specified axis. The function definition is as follows: ```python def accumulate_products(df, axis): Compute the cumulative product of the DataFrame elements along a given axis. Args: df (pandas DataFrame): The input DataFrame. axis (int): The axis to compute the cumulative product (0 for columns, 1 for rows). Returns: pandas DataFrame: A DataFrame with the cumulative products. ``` **Constraints**: - `df` will always be a pandas DataFrame with numerical values. - `axis` will be either `0` (for column-wise operation) or `1` (for row-wise operation). - You must use the `cumprod` function from the pandas library as part of your implementation. **Example Usage**: ```python import pandas as pd data = { \'A\': [1, 2, 3], \'B\': [4, 5, 6], \'C\': [7, 8, 9] } df = pd.DataFrame(data) # Expected output: DataFrame where each element is the product of all previous elements along the rows result_row = accumulate_products(df, 1) print(result_row) # Expected output: DataFrame where each element is the product of all previous elements along the columns result_col = accumulate_products(df, 0) print(result_col) ```","solution":"import pandas as pd def accumulate_products(df, axis): Compute the cumulative product of the DataFrame elements along a given axis. Args: df (pandas DataFrame): The input DataFrame. axis (int): The axis to compute the cumulative product (0 for columns, 1 for rows). Returns: pandas DataFrame: A DataFrame with the cumulative products. return df.cumprod(axis=axis)"},{"question":"Design a function called `frequency_of_characters` that analyzes a given string and determines the frequency of each character in the string. The function should return a dictionary with characters as keys and their respective frequencies as values. Your function should be able to handle uppercase and lowercase characters separately. Requirements: - The function should be named `frequency_of_characters`. - The function should accept one parameter: - `input_string`: a string for which the character frequencies need to be determined. - The function should return a dictionary where the keys are characters and the values are their frequencies in the given string. Example: ```python result = frequency_of_characters(\\"Hello World!\\") ``` This would return a dictionary like: ```python {\'H\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \' \': 1, \'W\': 1, \'r\': 1, \'d\': 1, \'!\': 1} ``` Note: - Consider all characters, including spaces and punctuation. - The case of characters should be preserved (e.g., \'H\' and \'h\' are different keys). Libraries to be used: - None (built-in Python functionalities only).","solution":"def frequency_of_characters(input_string): Returns a dictionary with the frequency of each character in the input string. Arguments: input_string: The string for which character frequencies need to be determined. Returns: A dictionary with characters as keys and their respective frequencies as values. frequency_dict = {} for char in input_string: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Problem Statement: You are tasked to implement a function called `find_possible_words` that takes a sequence of digits and returns all possible words that can be formed using the mapping of numbers to letters on a traditional phone keypad (from 2 to 9). # Function Signature: ```python def find_possible_words(digits: str) -> List[str]: ``` # Input: - `digits`: A string of digits from \'2\' to \'9\'. # Output: - A list of strings, where each string is a possible word formed by the corresponding digits. # Constraints: - Each digit can be mapped to 3 or 4 different letters as represented on a traditional phone keypad (e.g., 2 maps to \'abc\', 3 maps to \'def\', etc.). - The digit \'0\' and \'1\' should not be part of the input. - The length of the input string `digits` will not exceed 4. # Example: Given an input string `digits = \\"23\\"`, the function `find_possible_words(digits)` should return `[\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"]`. # Explanation: The function uses the digit-to-letter mapping to produce all combinations of letters that can be derived from the sequence of given digits. For digits 2 to 9, the letters mappings are as follows: - \'2\': \'abc\' - \'3\': \'def\' - \'4\': \'ghi\' - \'5\': \'jkl\' - \'6\': \'mno\' - \'7\': \'pqrs\' - \'8\': \'tuv\' - \'9\': \'wxyz\' The approach should be to utilize a recursive or iterative process to generate all possible letter combinations that the sequence of digits can spell out.","solution":"from typing import List def find_possible_words(digits: str) -> List[str]: if not digits: return [] # Mapping of digits to corresponding letters phone_mapping = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } def backtrack(index, path): # If the path is the same length as digits, we have a complete word if len(path) == len(digits): combinations.append(\'\'.join(path)) return # Get the letters that the current digit can represent, and loop through them possible_letters = phone_mapping[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() # Backtrack combinations = [] backtrack(0, []) return combinations"},{"question":"**Title: Log Analysis: Count Unique IP Addresses by Hour** You are working with server log data that contains information about each request made to the server. Each log entry contains a timestamp and an IP address. Write a function named `count_unique_ips_by_hour` that takes in a single parameter: - `file_path` (a string representing the file path to a log file). The function should read the log data from the file, parse each entry to extract the timestamp and IP address, and return a dictionary where the keys are hour values (0-23) and the values are the count of unique IP addresses that made requests during that hour. Here is what needs to be accomplished: 1. Read the log file line by line where each line contains a timestamp and an IP address separated by a space (e.g., `\\"2023-03-15 14:23:45 192.168.0.1\\"`). 2. Parse the timestamp to extract the hour. 3. Count the number of unique IP addresses for each hour of the day. 4. Handle any possible exceptions during the file reading process and return a status indicating success or failure. # Requirements Use the `datetime` module to parse the timestamp and extract the hour. **A sample log file might look like this:** ``` 2023-03-15 14:23:45 192.168.0.1 2023-03-15 14:45:22 192.168.0.2 2023-03-15 15:01:10 192.168.0.1 2023-03-15 14:23:45 192.168.0.1 2023-03-15 14:23:45 10.0.0.1 ``` # Function Signature ```python def count_unique_ips_by_hour(file_path): # Your code here # Example usage: # unique_ips, status = count_unique_ips_by_hour(\'server_log.txt\') # if status: # print(unique_ips) # else: # print(\\"Failed to load data\\") ``` # Test Cases You should ensure your function is tested with various combinations of inputs, including but not limited to: 1. A valid file path with typical log file content. 2. An empty log file. 3. A file containing malformed entries. 4. Logs with overlapping IPs across different hours. # Example Output For the provided sample log file, the function should return: ```python { 14: 3, # Three unique IPs logged during the 14th hour 15: 1, # One unique IP logged during the 15th hour } ```","solution":"import datetime def count_unique_ips_by_hour(file_path): Reads a log file, counts unique IP addresses by hour, and returns the result as a dictionary. Parameters: - file_path (str): Path to the log file. Returns: - (dict, bool): A dictionary where keys are hour values (0-23) and values are counts of unique IP addresses, and a status indicating success (True) or failure (False) in reading the file. try: unique_ips_by_hour = {hour: set() for hour in range(24)} with open(file_path, \'r\') as file: for line in file: try: timestamp, ip_address = line.strip().rsplit(\' \', 1) hour = datetime.datetime.strptime(timestamp, \'%Y-%m-%d %H:%M:%S\').hour unique_ips_by_hour[hour].add(ip_address) except ValueError: # Skip malformed entries continue # Transform sets to their lengths representing unique IP counts unique_ips_by_hour = {hour: len(ips) for hour, ips in unique_ips_by_hour.items()} return unique_ips_by_hour, True except Exception: return {}, False"},{"question":"You are required to implement a function that determines if there exists a subset of elements in a given list of integers that add up to a target sum. This is a classic \\"subset sum problem,\\" which is a common algorithmic challenge. The function `subset_sum(nums: List[int], target: int) -> bool` should take as input: - `nums`: A list of integers. - `target`: An integer representing the target sum. Your task is to complete the function using dynamic programming. The function should return `True` if there exists a subset of numbers in `nums` that add up to `target`, and `False` otherwise. # Function Signature ```python from typing import List def subset_sum(nums: List[int], target: int) -> bool: pass ``` # Input - `nums`: A list of integers representing the set of numbers. - `target`: An integer representing the target sum. # Output - A boolean value indicating whether there exists a subset of elements in `nums` that adds up to `target`. # Constraints - The length of `nums` is between 1 and 200. - Each element in `nums` is between -1000 and 1000. - The value of `target` is between -1000 and 1000. # Example ```python nums = [2, 3, 7, 8, 10] target = 11 print(subset_sum(nums, target)) # Expected Output: True (because 3 + 8 = 11) nums = [1, 2, 3, 4, 5] target = 10 print(subset_sum(nums, target)) # Expected Output: True (because 1 + 2 + 3 + 4 = 10) nums = [1, 2, 5] target = 4 print(subset_sum(nums, target)) # Expected Output: False (there is no subset that adds up to 4) ``` # Additional Details - The function should use dynamic programming to solve the problem efficiently. - Define a 2D boolean array `dp` where `dp[i][j]` will be `True` if there is a subset of the first `i` elements in `nums` that adds up to `j`, otherwise `False`. - Initialize the array such that `dp[i][0] = True` for all `i` since a sum of 0 can always be achieved with an empty subset. - Update the array based on the elements in `nums` and use it to decide the result.","solution":"from typing import List def subset_sum(nums: List[int], target: int) -> bool: n = len(nums) dp = [[False] * (target + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(target + 1): if j >= nums[i-1]: dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]] else: dp[i][j] = dp[i-1][j] return dp[n][target]"},{"question":"You have been tasked with implementing a function to smooth a given time series data using a simple moving average. A simple moving average is calculated by taking the arithmetic mean of a given set of values over a specified window. **Requirements:** 1. Write a function named `moving_average` which takes the following parameters: - `data` (list of floats): The input time series data. - `window_size` (int): The size of the window over which to compute the moving average. 2. The function should: - Return a list of floats containing the moving average of the input data. The output list should have the same length as the input list. - Handle the edges of the data where the window cannot be fully applied by taking the average of the available elements within the window. # Example: ```python # Example data data = [3, 5, 8, 12, 9, 7, 5, 3] window_size = 3 # Compute moving average output = moving_average(data, window_size) print(output) ``` # Expected Output: ```python [3.0, 4.0, 5.33, 8.33, 9.67, 9.33, 7.0, 5.0] ``` # Explanation: - For the first element, since the window size 3 is larger than available neighbors, the average is of the available value(s): `(3) / 1 = 3.0` - For the second element: `(3 + 5) / 2 = 4.0` - For the third element: `(3 + 5 + 8) / 3 ≈ 5.33` - Continue this process up to the end of the list, adjusting the window size as necessary at the edges.","solution":"def moving_average(data, window_size): Calculate the simple moving average of a given time series data over a specified window size. :param data: List of floats representing the time series data. :param window_size: Integer representing the size of the window. :return: List of floats containing the moving average of the input data. if window_size <= 0: raise ValueError(\\"Window size must be positive\\") n = len(data) averages = [] for i in range(n): start = max(0, i - window_size + 1) window_data = data[start:i+1] average = sum(window_data) / len(window_data) averages.append(round(average, 2)) return averages"},{"question":"You need to implement a Python function that determines if a given list of integers can be rearranged to form an arithmetic sequence. An arithmetic sequence is a sequence of numbers in which the difference between any two consecutive terms is the same. Function Signature ```python def can_form_arithmetic_sequence(arr: List[int]) -> bool: Given a list of integers `arr`, determines if the integers can be rearranged to form an arithmetic sequence. Parameters: arr (List[int]): A list of integers. Returns: bool: True if the list can be rearranged to form an arithmetic sequence, False otherwise. ``` # Instructions 1. **Check Length**: If the list has fewer than 2 integers, it already forms an arithmetic sequence. 2. **Sorting**: Sort the list to facilitate the comparison of differences between consecutive elements. 3. **Difference Calculation**: Calculate the common difference using the first two elements. 4. **Validation**: Verify that the difference between every consecutive pair of numbers is the same as the common difference. Example ```python # Input: arr = [3, 1, 5, 7] # After sorting: [1, 3, 5, 7] # The differences between consecutive elements: 3 - 1 = 2, 5 - 3 = 2, 7 - 5 = 2 # Thus, the list can be rearranged to form an arithmetic sequence. can_form_arithmetic_sequence([3, 1, 5, 7]) -> True # Input: arr = [2, 4, 1, 5] # After sorting: [1, 2, 4, 5] # The differences between consecutive elements: 2 - 1 = 1, 4 - 2 = 2, 5 - 4 = 1 # The differences are not consistent, so the list cannot be rearranged to form an arithmetic sequence. can_form_arithmetic_sequence([2, 4, 1, 5]) -> False ``` # [Library Api Requirements] - **sorted(iterable)**: Returns a new sorted list from the items in `iterable`. # Constraints - The list `arr` can contain up to 10^4 integers. - The integers can range from -10^6 to 10^6.","solution":"from typing import List def can_form_arithmetic_sequence(arr: List[int]) -> bool: Given a list of integers `arr`, determines if the integers can be rearranged to form an arithmetic sequence. Parameters: arr (List[int]): A list of integers. Returns: bool: True if the list can be rearranged to form an arithmetic sequence, False otherwise. if len(arr) < 2: return True arr.sort() common_difference = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i - 1] != common_difference: return False return True"},{"question":"Write a function that takes a CSV file, reads its contents, and normalizes a specified numeric column by scaling its values to a specified range [min_value, max_value]. The function should handle cases where the file does not exist or the specified column is not numeric appropriately. It should output the modified contents of the CSV as a string. The function should raise the exception for: FileNotFoundError: If the CSV file does not exist. ValueError: If the specified column is not numeric or if min_value is greater than max_value. The function should output: str: The modified contents of the CSV with the normalized column. You should write self-contained code starting with: ``` import csv import os import sys def normalize_csv(file_path, column_name, min_value, max_value): ```","solution":"import csv import os def normalize_csv(file_path, column_name, min_value, max_value): Normalize the specified numeric column of a CSV file to a specified range [min_value, max_value]. Args: file_path (str): The path to the CSV file. column_name (str): The name of the column to normalize. min_value (float): The minimum value of the normalized range. max_value (float): The maximum value of the normalized range. Returns: str: The modified contents of the CSV with the normalized column. Raises: FileNotFoundError: If the CSV file does not exist. ValueError: If the specified column is not numeric or if min_value is greater than max_value. if not os.path.exists(file_path): raise FileNotFoundError(\\"The specified CSV file does not exist.\\") if min_value > max_value: raise ValueError(\\"min_value must be less than or equal to max_value.\\") with open(file_path, mode=\'r\', newline=\'\') as file: reader = csv.DictReader(file) if column_name not in reader.fieldnames: raise ValueError(f\\"The specified column \'{column_name}\' does not exist in the CSV.\\") rows = list(reader) try: column_values = [float(row[column_name]) for row in rows] except ValueError: raise ValueError(f\\"The specified column \'{column_name}\' is not numeric.\\") min_col_value = min(column_values) max_col_value = max(column_values) for row in rows: original_value = float(row[column_name]) normalized_value = min_value + (max_value - min_value) * (original_value - min_col_value) / (max_col_value - min_col_value) row[column_name] = normalized_value modified_csv = \',\'.join(reader.fieldnames) + \'n\' for row in rows: modified_csv += \',\'.join(map(str, [row[fieldname] for fieldname in reader.fieldnames])) + \'n\' return modified_csv"},{"question":"Write a function called `process_weather_data` that analyzes temperature data over a year and provides basic statistical insights. You will be working with a Python dictionary, where keys are the names of the months and values are lists of daily temperatures for that month. Your task is to compute the following: 1. The average temperature for each month. 2. The overall highest temperature recorded during the year. 3. The overall lowest temperature recorded during the year. 4. The month with the highest average temperature. 5. The month with the lowest average temperature. The function should return a dictionary containing: - `\'monthly_averages\'`: a dictionary with the month names as keys and their corresponding average temperatures as values. - `\'overall_highest\'`: the overall highest temperature recorded. - `\'overall_lowest\'`: the overall lowest temperature recorded. - `\'highest_avg_month\'`: the month with the highest average temperature. - `\'lowest_avg_month\'`: the month with the lowest average temperature. Here\'s the function signature: ```python def process_weather_data(weather_data): pass ``` **Instructions:** 1. The `weather_data` parameter will be a dictionary where keys are strings representing the months (e.g., \\"January\\", \\"February\\") and values are lists of integers or floats representing the daily temperatures. 2. Use Python standard library functions to compute the required statistics. Import statements (if needed) should be placed inside the function. 3. Ensure proper handling of corner cases, such as months with no temperature data. 4. Return the result as a dictionary as specified above. Example usage: ```python weather_data = { \\"January\\": [30, 31, 29, 26], \\"February\\": [35, 36, 37], \\"March\\": [45, 48, 50], } result = process_weather_data(weather_data) print(result) # Output should be in the following format: # { # \'monthly_averages\': {\'January\': 29, \'February\': 36, \'March\': 47.67}, # \'overall_highest\': 50, # \'overall_lowest\': 26, # \'highest_avg_month\': \'March\', # \'lowest_avg_month\': \'January\' # } ```","solution":"def process_weather_data(weather_data): import statistics monthly_averages = {} overall_highest = float(\'-inf\') overall_lowest = float(\'inf\') highest_avg_month = \'\' lowest_avg_month = \'\' for month, temperatures in weather_data.items(): if temperatures: # Check if the month has temperature data avg_temp = statistics.mean(temperatures) monthly_averages[month] = avg_temp if avg_temp > monthly_averages.get(highest_avg_month, float(\'-inf\')): highest_avg_month = month if avg_temp < monthly_averages.get(lowest_avg_month, float(\'inf\')): lowest_avg_month = month month_highest = max(temperatures) month_lowest = min(temperatures) overall_highest = max(overall_highest, month_highest) overall_lowest = min(overall_lowest, month_lowest) return { \'monthly_averages\': monthly_averages, \'overall_highest\': overall_highest, \'overall_lowest\': overall_lowest, \'highest_avg_month\': highest_avg_month, \'lowest_avg_month\': lowest_avg_month }"},{"question":"You are required to create a function called `palindrome_permutation` that determines if any permutation of an input string can form a palindrome. A palindrome is a string that reads the same backward as forward. # Requirements: 1. The function should ignore spaces and be case insensitive. 2. The function should accept a single string argument. 3. The function should return `True` if at least one permutation of the input string can form a palindrome, and `False` otherwise. Here is your target interface: ```python def palindrome_permutation(s: str) -> bool: pass ``` # Additional Information: - You may use any standard library functions as needed. - Consider using a dictionary or a Counter to keep track of character frequencies. # Example Inputs and Outputs: ```python palindrome_permutation(\\"Tact Coa\\") # Output: True # Explanation: \\"Tact Coa\\" can be permuted to form \\"taco cat\\", which is a palindrome. palindrome_permutation(\\"Hello\\") # Output: False # Explanation: No permutation of \\"Hello\\" can form a palindrome. palindrome_permutation(\\"A man a plan a canal Panama\\") # Output: True # Explanation: Ignoring spaces and case, the input can form \\"A man a plan a canal Panama\\" which is a palindrome. ``` # Notes: - The function can return early if finding more than one character with an odd count of occurrences.","solution":"from collections import Counter def palindrome_permutation(s: str) -> bool: Determine if any permutation of the input string can form a palindrome. This function ignores spaces and is case insensitive. # Normalize the string: remove spaces and convert to lower case normalized_str = s.replace(\\" \\", \\"\\").lower() # Count frequency of each character char_count = Counter(normalized_str) # Check the number of characters with an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be a palindrome permutation, at most one character count can be odd return odd_count <= 1"},{"question":"You are tasked with writing a function named `flatten_json` that takes a nested JSON object as input and returns a flattened dictionary. The keys in the flattened dictionary will be a combination of the keys from the nested dictionary, joined by underscores. **Requirements:** 1. Your function should accept a single parameter `data` which will be a dictionary representing a JSON object. 2. The function should recursively flatten any nested dictionaries. 3. In the flattened dictionary, the nested key names should be concatenated with underscores (`_`) as the separator. 4. If the input JSON is already flat, the function should return it as is. **Example Usage:** ```python # Example input nested_json = { \\"user\\": { \\"name\\": \\"Alice\\", \\"details\\": { \\"age\\": 30, \\"location\\": \\"Wonderland\\" } }, \\"status\\": \\"active\\" } # Function call result = flatten_json(nested_json) # Expected output print(result) # Outputs: { # \\"user_name\\": \\"Alice\\", # \\"user_details_age\\": 30, # \\"user_details_location\\": \\"Wonderland\\", # \\"status\\": \\"active\\" # } ``` Develop your solution ensuring it handles multiple levels of nesting and adheres strictly to the above requirements.","solution":"def flatten_json(data, parent_key=\'\', separator=\'_\'): Recursively flattens a nested JSON object. Args: data (dict): The nested JSON object to be flattened. parent_key (str, optional): The base key to use for nested keys. Defaults to \'\'. separator (str, optional): The separator to use between nested key parts. Defaults to \'_\'. Returns: dict: A flattened dictionary. items = [] for k, v in data.items(): new_key = f\\"{parent_key}{separator}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_json(v, new_key, separator).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Find the longest substring without repeating characters from the given string. The function should handle strings with at least one character. Return the length of this longest substring. The function should output with: int: The length of the longest substring without repeating characters. You should write self-contained code starting with: ``` def length_of_longest_substring(s): ```","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_index_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index_map: start = max(char_index_map[s[end]] + 1, start) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are asked to write a Python function named `rotate_matrix_90_degrees`. This function will take a square matrix (a list of lists) as an input. The goal is to rotate the matrix 90 degrees clockwise in place, meaning you should modify the original matrix without using extra space for another matrix. For example, rotating the matrix `[[1, 2, 3], [4, 5, 6], [7, 8, 9]]` 90 degrees clockwise should transform it to `[[7, 4, 1], [8, 5, 2], [9, 6, 3]]`. The function should modify the input matrix directly and has no return value. # Function Signature ```python def rotate_matrix_90_degrees(matrix): pass ``` # Input - `matrix`: A list of lists where each inner list has the same length as the outer list (i.e., a square matrix). For example, `[[1,2,3], [4,5,6], [7,8,9]]`. # Output - No returned output. The function should modify the input matrix in place. # Example ```python # Example 1 matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] rotate_matrix_90_degrees(matrix) print(matrix) # Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] # Example 2 matrix = [[1, 2], [3, 4]] rotate_matrix_90_degrees(matrix) print(matrix) # Output: [[3, 1], [4, 2]] ``` # Constraints - The function should handle square matrices with dimensions between `1 x 1` and `100 x 100`. - You are not allowed to use any additional list to store the results; the rotation should be done in place.","solution":"def rotate_matrix_90_degrees(matrix): Rotates the given n x n matrix 90 degrees clockwise in place. # First step: Transpose the matrix n = len(matrix) for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Second step: Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"You are tasked with creating a Python function named `transpose_matrix` that takes a matrix (a list of lists) as input and returns the transpose of the matrix. The transpose of a matrix is obtained by swapping the rows and columns. # Function Signature: ```python def transpose_matrix(matrix: list[list[int]]) -> list[list[int]]: ``` # Inputs: - `matrix` (list[list[int]]): A list of lists where each inner list is a row of the matrix. Each element of the matrix is an integer. # Outputs: - `list[list[int]]`: A list of lists where the rows and columns have been swapped compared to the input matrix. # Requirements: 1. **Validate the input matrix** to ensure it is non-empty and all rows have the same number of elements. 2. **Compute the transpose** of the matrix, which involves converting the rows of the input matrix into columns of the output matrix. 3. **Return the transposed matrix**. # Example: ```python # Given the following matrix: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] # Calling the function: result = transpose_matrix(matrix) # The function should return the following transposed matrix: # [ # [1, 4, 7], # [2, 5, 8], # [3, 6, 9] # ] ``` # Constraints: - The matrix can have any number of rows and columns, but it will always be rectangular (all rows will have the same number of columns). - The matrix will contain at least one element. - Do not use any external libraries for the matrix transposition. # Note: The transpose operation is a fundamental matrix manipulation and should be solvable using basic list operations in Python.","solution":"def transpose_matrix(matrix: list[list[int]]) -> list[list[int]]: Returns the transpose of the given matrix. Parameters: matrix: list[list[int]] - A list of lists where each inner list is a row of the matrix. Returns: list[list[int]] - The transposed matrix. if not matrix or not matrix[0]: raise ValueError(\\"Input matrix must be non-empty and all rows must have the same number of elements.\\") row_count = len(matrix) col_count = len(matrix[0]) for row in matrix: if len(row) != col_count: raise ValueError(\\"All rows in the matrix must have the same number of elements.\\") transposed = [[matrix[row][col] for row in range(row_count)] for col in range(col_count)] return transposed"},{"question":"You are given a grid of characters representing a map where \'X\' marks an obstacle, \'S\' marks a starting point, and \'E\' marks an endpoint. Your task is to implement a function `find_path` to determine if there is a path from \'S\' to \'E\' avoiding obstacles (\'X\'). The path can only be constructed from cells connected horizontally or vertically (not diagonally). Your function `find_path` should take the following parameter: - `grid` (list of list of str): A 2D list representing the grid. The function should return a list of tuples representing the coordinates of the path from \'S\' to \'E\'. If no such path exists, the function should return an empty list. Requirements - Utilize a relevant pathfinding algorithm like Depth First Search (DFS) or Breadth-First Search (BFS). - Ensure that your code efficiently handles scenarios where no path exists. - Return the path in the format of a list of tuples representing the coordinates i.e., [(row1, col1), (row2, col2), ..., (rowN, colN)] or an empty list if no path exists. **Example:** ```python grid = [ [\'S\', \'O\', \'O\', \'O\'], [\'X\', \'X\', \'O\', \'E\'], [\'O\', \'O\', \'O\', \'X\'], [\'O\', \'X\', \'X\', \'O\'] ] print(find_path(grid)) ``` **Output:** ```python [(0, 0), (0, 1), (0, 2), (0, 3), (1, 3)] ``` **Hint in the Question:** You may use a queue to keep track of the cells to be processed and a set to keep the visited cells. Helper Function Signature: ```python def find_path(grid: List[List[str]]) -> List[Tuple[int, int]]: # Your code here ```","solution":"from collections import deque def find_path(grid): Finds the path from \'S\' to \'E\' in the given grid avoiding \'X\' obstacles. Parameters: grid (list of list of str): 2D list representing the grid. Returns: list of tuples: Coordinates of the path from \'S\' to \'E\' or empty list if no path exists. def bfs(start, end): queue = deque([start]) visited = set() visited.add(start) parents = {start: None} while queue: current = queue.popleft() if current == end: break for d in [(0, 1), (1, 0), (0, -1), (-1, 0)]: next_step = (current[0] + d[0], current[1] + d[1]) if (0 <= next_step[0] < len(grid) and 0 <= next_step[1] < len(grid[0]) and grid[next_step[0]][next_step[1]] != \'X\' and next_step not in visited): queue.append(next_step) visited.add(next_step) parents[next_step] = current if end not in parents: return [] # Reconstruct path path = [] step = end while step: path.append(step) step = parents[step] return path[::-1] start = end = None for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) if not start or not end: return [] return bfs(start, end)"},{"question":"Read data from a JSON file which contains an array of objects, each representing an individual with keys \\"name\\" (str), \\"age\\" (int), and \\"scores\\" (list of int). Calculate the average score for each individual and write the results to a text file named \\"individual_averages.txt\\" in a specified directory. Ensure proper error handling if the file is empty, does not exist, or contains invalid data. The function should output: str: The path to the \\"individual_averages.txt\\" file containing the average score for each individual. You should write self-contained code starting with: ``` import os import json def task_func(json_file_path: str, output_dir: str) -> str: ```","solution":"import os import json def task_func(json_file_path: str, output_dir: str) -> str: Reads data from a JSON file, calculates the average score for each individual, and writes the results to a text file. Parameters: json_file_path (str): The path to the JSON file. output_dir (str): The directory where \\"individual_averages.txt\\" will be saved. Returns: str: The path to the \\"individual_averages.txt\\" file. # Checking if JSON file exists if not os.path.exists(json_file_path): raise FileNotFoundError(f\\"The file {json_file_path} does not exist.\\") # Reading JSON file with open(json_file_path, \'r\') as file: try: data = json.load(file) except json.JSONDecodeError: raise ValueError(\\"Invalid JSON data.\\") if not data: raise ValueError(\\"The JSON file is empty.\\") results = [] for individual in data: # Ensuring \'name\', \'age\', and \'scores\' keys exist if \'name\' not in individual or \'age\' not in individual or \'scores\' not in individual: raise ValueError(\\"Invalid data structure. Each object must have \'name\', \'age\', and \'scores\' keys.\\") # Ensuring \'scores\' is a list if not isinstance(individual[\'scores\'], list): raise ValueError(\\"The \'scores\' key must be a list.\\") # Calculating average score if individual[\'scores\']: average_score = sum(individual[\'scores\']) / len(individual[\'scores\']) else: average_score = 0 results.append(f\\"Name: {individual[\'name\']}, Age: {individual[\'age\']}, Average Score: {average_score:.2f}n\\") # Writing results to output file os.makedirs(output_dir, exist_ok=True) output_file_path = os.path.join(output_dir, \\"individual_averages.txt\\") with open(output_file_path, \'w\') as outfile: outfile.writelines(results) return output_file_path"},{"question":"You are tasked with writing a Python function named `valid_email_addresses` that takes a list of email addresses as input and returns a list containing only the valid email addresses. An email address is considered valid if it meets the following criteria: 1. **Format**: The email address should conform to the pattern `local_part@domain_part`. 2. **Local Part**: The local part should: - Begin with an alphanumeric character. - Contain only alphanumeric characters and the special characters `.`, `_`, `+`, and `-`. - End with an alphanumeric character. 3. **Domain Part**: The domain part should: - Only contain alphanumeric characters and the special character `.`. - Have at least one `.`. - Not begin or end with the special character `.`. 4. **Overall Constraints**: Both parts should be non-empty and the entire email address should not contain any spaces. Your implementation should handle edge cases and invalid formats gracefully. Here is the detailed requirement for the function: # Function Signature ```python def valid_email_addresses(email_list): # Implementation details ``` # Input - `email_list`: A list of strings representing the email addresses. # Output - A list of strings representing the valid email addresses from the input list. # Example ```python print(valid_email_addresses([\'test.email+alex@leetcode.com\', \'test.email@leetcode\', \'test@.com\', \'@leetcode.com\', \'user@domain.co\'])) ``` **Sample Output** ```python [\'test.email+alex@leetcode.com\', \'user@domain.co\'] ``` # Additional Constraints - Do not use any external email validation libraries. - Write efficient and clean code. - Consider edge cases and write comments or docstrings to enhance code readability.","solution":"import re def valid_email_addresses(email_list): Validates email addresses based on given criteria. :param email_list: List of email addresses as strings. :return: List of valid email addresses. valid_emails = [] pattern = re.compile( r\'^[a-zA-Z0-9][a-zA-Z0-9._+-]*[a-zA-Z0-9]@[a-zA-Z0-9]+(.[a-zA-Z0-9]+)+\' ) for email in email_list: if pattern.match(email): valid_emails.append(email) return valid_emails"},{"question":"You are required to write a function to analyze and summarize a dataset from a text file containing information about various scientific experiments. Each experiment record consists of the experiment ID, category, start date, end date, and the result status. The data in the text file is delimited by semicolons (`;`). The function, `summarize_experiment_data(filepath: str) -> dict`, should perform the following tasks: 1. **Read the Data File**: - The input file (`filepath`) should be read line by line. 2. **Process Each Experiment Record**: - Each line in the file represents one experiment record. - Split each line by the semicolon delimiter to extract individual fields. 3. **Calculate Statistics**: - Determine the total number of experiments. - Calculate the number of experiments per category. - Calculate the number of experiments that are still ongoing (i.e., no end date). - Calculate the number of experiments that are completed (i.e., with a result status). 4. **Return a Summary Dictionary**: - Return a dictionary with the above-calculated statistics. **Requirements**: Use the built-in `datetime` module for date parsing. # Function Signature: ```python def summarize_experiment_data(filepath: str) -> dict: pass ``` # Example Usage: ```python filepath = \\"experiments.txt\\" summary = summarize_experiment_data(filepath) print(summary) ``` # Example Input (`experiments.txt`): ``` E001;Physics;2021-01-15;2021-02-15;completed E002;Chemistry;2021-03-10;;ongoing E003;Biology;2021-01-20;2021-01-25;completed E004;Physics;2021-02-01;;ongoing E005;Chemistry;2021-02-20;2021-03-01;completed ``` # Example Output: ```python { \'total_experiments\': 5, \'experiments_per_category\': { \'Physics\': 2, \'Chemistry\': 2, \'Biology\': 1 }, \'ongoing_experiments\': 2, \'completed_experiments\': 3 } ```","solution":"def summarize_experiment_data(filepath: str) -> dict: from collections import defaultdict total_experiments = 0 experiments_per_category = defaultdict(int) ongoing_experiments = 0 completed_experiments = 0 with open(filepath, \'r\') as file: for line in file: total_experiments += 1 experiment_id, category, start_date, end_date, result_status = line.strip().split(\';\') experiments_per_category[category] += 1 if end_date == \'\': ongoing_experiments += 1 if result_status == \'completed\': completed_experiments += 1 return { \'total_experiments\': total_experiments, \'experiments_per_category\': dict(experiments_per_category), \'ongoing_experiments\': ongoing_experiments, \'completed_experiments\': completed_experiments }"},{"question":"Write a function that takes a list of integers and returns the longest contiguous subarray that sums to zero. The function should return a dictionary where the key \'start_index\' indicates the starting index of the subarray, \'end_index\' indicates the ending index of the subarray, and \'subarray\' is the list of integers in that subarray. If there are multiple subarrays with the same maximum length, return any one of them. The function should output with: dict: A dictionary containing the start index, end index, and the subarray that sums to zero. You should write self-contained code starting with: ``` def find_longest_subarray_zero_sum(arr): ```","solution":"def find_longest_subarray_zero_sum(arr): Returns the longest contiguous subarray that sums to zero. Parameters: arr (list of int): List of integers. Returns: dict: A dictionary containing \'start_index\', \'end_index\', and \'subarray\' that sums to zero. sum_index_map = {} max_len = 0 start_index = 0 end_index = -1 current_sum = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum == 0: max_len = i + 1 start_index = 0 end_index = i if current_sum in sum_index_map: if i - sum_index_map[current_sum] > max_len: max_len = i - sum_index_map[current_sum] start_index = sum_index_map[current_sum] + 1 end_index = i else: sum_index_map[current_sum] = i subarray = arr[start_index:end_index + 1] return { \'start_index\': start_index, \'end_index\': end_index, \'subarray\': subarray }"},{"question":"Design a function to read a JSON file and export a summary of the data in the form of a CSV file. The summary should include the average, minimum, maximum, and total of a specified numeric field. If the JSON file does not contain the specified numeric field, the function should return an appropriate error message. The function should return the path of the created CSV file. The function signature is: ``` import json import csv import os def summarize_json_to_csv(json_path: str, numeric_field: str, csv_path: str) -> str: ```","solution":"import json import csv import os def summarize_json_to_csv(json_path: str, numeric_field: str, csv_path: str) -> str: Reads a JSON file, computes the average, minimum, maximum, and total of a specified numeric field, and exports the summary to a CSV file. :param json_path: Path to the JSON file :param numeric_field: The numeric field to compute summary statistics on :param csv_path: Path to the resulting CSV file :return: Path to the created CSV file or an error message if the numeric field does not exist try: with open(json_path, \'r\') as f: data = json.load(f) except Exception as e: return f\\"Error reading JSON file: {e}\\" values = [] for item in data: if numeric_field in item and isinstance(item[numeric_field], (int, float)): values.append(item[numeric_field]) if not values: return f\\"Error: The specified numeric field \'{numeric_field}\' does not exist in the JSON file or contains no numeric data.\\" summary = { \'average\': sum(values) / len(values), \'minimum\': min(values), \'maximum\': max(values), \'total\': sum(values), } try: with open(csv_path, \'w\', newline=\'\') as csvfile: writer = csv.DictWriter(csvfile, fieldnames=[\'average\', \'minimum\', \'maximum\', \'total\']) writer.writeheader() writer.writerow(summary) except Exception as e: return f\\"Error writing CSV file: {e}\\" return csv_path"},{"question":"You are working on a project involving robotic movements in a grid environment with obstacles. Your task is to plan a path for the robot from a starting point to a destination point. You are required to write a function named `find_robot_path` that uses the A* search algorithm to find the shortest path. The grid is represented as a 2D list, where each element is either a 0 (traversable cell) or a 1 (obstacle). The robot can move horizontally, vertically, and diagonally to adjacent cells that are not obstacles. The function signature will be: ```python def find_robot_path(grid, start, end): ``` This function should: 1. Implement the A* search algorithm. 2. Return a list of tuples representing the path from the start cell to the end cell, inclusive. 3. Return an empty list if no path is found. Function Specification: - **Input:** - `grid` (list of lists of ints): The grid representing the environment. - `start` (tuple of ints): The starting cell (row, col). - `end` (tuple of ints): The destination cell (row, col). - **Output:** - A list of tuples representing the path from the `start` to the `end` cell inclusive, or an empty list if no path exists. Ensure that you use an appropriate heuristic in your implementation of the A* algorithm to ensure efficient pathfinding.","solution":"import heapq def heuristic(a, b): # Using the Euclidean distance as the heuristic return ((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2) ** 0.5 def find_robot_path(grid, start, end): rows, cols = len(grid), len(grid[0]) open_list = [] heapq.heappush(open_list, (0, start)) came_from = {} g_score = {start: 0} f_score = {start: heuristic(start, end)} directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] while open_list: current = heapq.heappop(open_list)[1] if current == end: path = [] while current in came_from: path.append(current) current = came_from[current] path.append(start) return path[::-1] for direction in directions: neighbor = (current[0] + direction[0], current[1] + direction[1]) if 0 <= neighbor[0] < rows and 0 <= neighbor[1] < cols and grid[neighbor[0]][neighbor[1]] == 0: tentative_g_score = g_score[current] + 1 if neighbor not in g_score or tentative_g_score < g_score[neighbor]: came_from[neighbor] = current g_score[neighbor] = tentative_g_score f_score[neighbor] = tentative_g_score + heuristic(neighbor, end) heapq.heappush(open_list, (f_score[neighbor], neighbor)) return [] # Example Usage: # grid = [ # [0, 1, 0, 0, 0], # [0, 1, 0, 1, 0], # [0, 0, 0, 1, 0], # [0, 1, 0, 1, 0], # [0, 0, 0, 0, 0] # ] # start = (0, 0) # end = (4, 4) # print(find_robot_path(grid, start, end))"},{"question":"Generate a random array of integers and find the three most frequent elements in it. Return these elements in the order from most to least frequent. In case of a tie, return the smaller element first. The function should output with: list: The three most frequent integers in the array. You should write self-contained code starting with: ``` import numpy as np from collections import Counter def task_func(size=1000, range_start=1, range_end=100, seed=42): ```","solution":"import numpy as np from collections import Counter def task_func(size=1000, range_start=1, range_end=100, seed=42): Generate a random array of integers and find the three most frequent elements in it. Return these elements in order from most to least frequent. In case of a tie, return the smaller element first. Args: size (int): Size of the array to generate. range_start (int): Start of the range of integers. range_end (int): End of the range of integers. seed (int): Seed for random number generation. Returns: list: The three most frequent integers in the array. # Set the seed for reproducibility np.random.seed(seed) # Generate the random array array = np.random.randint(range_start, range_end + 1, size) # Count the frequency of each element in the array counter = Counter(array) # Get the three most common elements, sorted by count and then by the element\'s value itself if there\'s a tie most_common_three = counter.most_common() most_common_three.sort(key=lambda x: (-x[1], x[0])) return [elem for elem, count in most_common_three[:3]]"},{"question":"In this problem, you will create a Python function `max_pairwise_product(nums: List[int]) -> int` that takes a list of integers and returns the maximum pairwise product that can be obtained by multiplying any two distinct elements in the list. The function should be efficient and handle large input sizes. You are required to use an algorithm that runs in linear time, O(n), to ensure that the solution is efficient even for very large lists. Here is a step-by-step breakdown of what you need to do: 1. **Import Required Libraries:** - For this problem, you can make use of Python\'s built-in functions and data structures. 2. **Create the Function `max_pairwise_product`:** - This function should take a list of integers as input. - It should identify the two largest distinct integers in the list and return their product. # Function Signature: ```python from typing import List def max_pairwise_product(nums: List[int]) -> int: ``` # Example: ```python print(max_pairwise_product([1, 10, 2, 6, 5, 3])) # Output: 60, which is the product of 10 and 6 print(max_pairwise_product([7, 5, 14, 2, 8, 8])) # Output: 112, which is the product of 14 and 8 ``` **Note:** Ensure that your function handles edge cases such as lists with fewer than two elements by appropriately raising an exception or returning a result that indicates the input is too small to form a product.","solution":"from typing import List def max_pairwise_product(nums: List[int]) -> int: if len(nums) < 2: raise ValueError(\\"List must contain at least two elements\\") # Initialize the two largest elements max1, max2 = float(\'-inf\'), float(\'-inf\') for num in nums: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num return max1 * max2"},{"question":"You are tasked with creating a function that takes a directed graph represented as an adjacency matrix and returns the shortest path between a given start node and all other nodes using Dijkstra\'s algorithm. The graph may contain nodes that are not reachable from the start node, and weights are positive integers. The function you must implement is: ```python def dijkstra_shortest_paths(adj_matrix: list, start_node: int) -> list: ``` # Function Details: - **Parameters:** - `adj_matrix` (list of lists): A 2-dimensional list where `adj_matrix[i][j]` represents the weight of the edge from node `i` to node `j`. If there is no edge, the value is float(\'inf\'). `adj_matrix[i][i]` should be 0 for all nodes `i`. - `start_node` (int): The index of the starting node. - **Returns:** - `distances` (list): A list where the i-th element is the shortest distance from the start node to the i-th node. If a node is not reachable, the distance should be float(\'inf\'). # Requirements: - **Algorithm:** Implement Dijkstra\'s algorithm to find the shortest paths. - **Assumptions:** - The input adjacency matrix is a square matrix (n x n), where n is the number of nodes. - All weights are positive integers. - The starting node index is valid (0 ≤ start_node < n). # Example: Given the following adjacency matrix (with 4 nodes): ``` [ [0, 10, float(\'inf\'), 30], [10, 0, 50, float(\'inf\')], [float(\'inf\'), 50, 0, 20], [30, float(\'inf\'), 20, 0] ] ``` and `start_node` of 0, the function should return: ``` [0, 10, 70, 30] ``` Explanation: - The shortest path from node 0 to node 1 is [0 -> 1] with a distance of 10. - The shortest path from node 0 to node 2 is [0 -> 3 -> 2] with a distance of 70. - The shortest path from node 0 to node 3 is [0 -> 3] with a distance of 30. - Node 0 is the start node, so the distance to itself is 0. # Constraints: - Assume that the input graph will always be a directed graph with positive weights. - Make sure to handle graphs where some nodes may not be reachable from the start node. # Notes: - You may use Python’s standard libraries but not any specialized graph libraries (e.g., NetworkX). - You are encouraged to use a priority queue (heap) to implement Dijkstra’s algorithm efficiently.","solution":"import heapq def dijkstra_shortest_paths(adj_matrix: list, start_node: int) -> list: Implements Dijkstra\'s algorithm to find the shortest path from start_node to all other nodes in a graph represented by an adjacency matrix. Parameters: - adj_matrix (list of lists): A 2-dimensional list where adj_matrix[i][j] represents the weight of the edge from node i to node j. If there is no edge, the value is float(\'inf\'). adj_matrix[i][i] should be 0 for all nodes i. - start_node (int): The index of the starting node. Returns: - distances (list): A list where the i-th element is the shortest distance from the start node to the i-th node. If a node is not reachable, the distance should be float(\'inf\'). n = len(adj_matrix) distances = [float(\'inf\')] * n distances[start_node] = 0 priority_queue = [(0, start_node)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbour in range(n): weight = adj_matrix[current_node][neighbour] if weight != float(\'inf\'): distance = current_distance + weight if distance < distances[neighbour]: distances[neighbour] = distance heapq.heappush(priority_queue, (distance, neighbour)) return distances"},{"question":"# Context: Suppose you are working on a command-line application that manages a list of tasks. Each task has a unique identifier, a description, and a status indicating whether the task is completed. You are required to implement functionalities to add a new task, mark an existing task as completed, and display the list of tasks in a nicely formatted way. # Task: Write a class named `TaskManager` with the following specifications: 1. **Class Initialization**: - The class `TaskManager` should initialize an empty dictionary to store tasks. Each task has an ID (integer) as the key and a tuple containing the description (string) and status (boolean) as the value. 2. **Methods**: - `add_task(task_id: int, description: str) -> None`: - Adds a new task with the given `task_id` and `description`. The initial status of the task should be `False`, indicating that it is incomplete. - `complete_task(task_id: int) -> None`: - Marks the task with the given `task_id` as completed by setting its status to `True`. - `display_tasks() -> None`: - Prints all tasks in a readable format, showing the task ID, description, and status (as \\"Completed\\" or \\"Incomplete\\"). # Requirements: - Ensure the dictionary key (task ID) is unique for each task. - Handle the scenario where a provided `task_id` does not exist when marking tasks as completed or displaying tasks. - Implement input validation to prevent adding tasks with duplicate IDs. # Example: Here\'s an outline of how your class will be used: ```python # Creating an instance of TaskManager manager = TaskManager() # Adding tasks manager.add_task(1, \\"Buy groceries\\") manager.add_task(2, \\"Reply to emails\\") # Marking a task as completed manager.complete_task(1) # Displaying tasks manager.display_tasks() ``` Expected Output: ``` ID: 1, Description: Buy groceries, Status: Completed ID: 2, Description: Reply to emails, Status: Incomplete ``` # Class Signature: ```python class TaskManager: def __init__(self): # Your implementation here def add_task(self, task_id, description): # Your implementation here def complete_task(self, task_id): # Your implementation here def display_tasks(self): # Your implementation here ```","solution":"class TaskManager: def __init__(self): self.tasks = {} def add_task(self, task_id: int, description: str) -> None: if task_id in self.tasks: raise ValueError(\\"Task ID already exists\\") self.tasks[task_id] = (description, False) def complete_task(self, task_id: int) -> None: if task_id not in self.tasks: raise ValueError(\\"Task ID does not exist\\") description, _ = self.tasks[task_id] self.tasks[task_id] = (description, True) def display_tasks(self) -> None: for task_id, (description, status) in self.tasks.items(): status_str = \\"Completed\\" if status else \\"Incomplete\\" print(f\\"ID: {task_id}, Description: {description}, Status: {status_str}\\")"},{"question":"In this exercise, you will create a simple text-based version of the classic game \\"Rock, Paper, Scissors.\\" The goal is to allow the user to play the game against the computer. Your task is to write a function named `play_rock_paper_scissors` that facilitates this game. The function should use the `random.choice` method from the `random` library to generate the computer\'s choice and handle the game rules accordingly. Here\'s a detailed breakdown of the function\'s requirements: 1. The computer randomly selects \'rock\', \'paper\', or \'scissors\' using `random.choice([\'rock\', \'paper\', \'scissors\'])`. 2. Prompt the user to enter their choice: \'rock\', \'paper\', or \'scissors\'. 3. Compare the user\'s choice and the computer\'s choice to determine the winner using the classic rules: - Rock beats scissors. - Scissors beat paper. - Paper beats rock. 4. Announce the winner (or if it\'s a tie) and display both the user\'s and the computer\'s choices. 5. Ask the user if they want to play again: - If the answer is \'yes\', restart the game loop. - If the answer is \'no\' or the input is empty, print \\"Thanks for playing!\\" and terminate the game. ```python import random def play_rock_paper_scissors(): while True: user_choice = input(\\"Enter your choice (rock, paper, scissors): \\").lower() if user_choice not in [\'rock\', \'paper\', \'scissors\']: print(\\"Invalid choice, please try again.\\") continue computer_choice = random.choice([\'rock\', \'paper\', \'scissors\']) print(f\\"Computer chose: {computer_choice}\\") if user_choice == computer_choice: print(\\"It\'s a tie!\\") elif (user_choice == \'rock\' and computer_choice == \'scissors\') or (user_choice == \'scissors\' and computer_choice == \'paper\') or (user_choice == \'paper\' and computer_choice == \'rock\'): print(\\"You win!\\") else: print(\\"You lose!\\") play_again = input(\\"Do you want to play again? (yes/no): \\").lower() if play_again != \'yes\': print(\\"Thanks for playing!\\") break ```","solution":"import random def play_rock_paper_scissors(): Allows the user to play Rock, Paper, Scissors against the computer. The computer randomly selects \'rock\', \'paper\', or \'scissors\'. The user is prompted to select \'rock\', \'paper\', or \'scissors\'. The winner is determined based on classic Rock, Paper, Scissors rules. while True: user_choice = input(\\"Enter your choice (rock, paper, scissors): \\").lower() if user_choice not in [\'rock\', \'paper\', \'scissors\']: print(\\"Invalid choice, please try again.\\") continue computer_choice = random.choice([\'rock\', \'paper\', \'scissors\']) print(f\\"Computer chose: {computer_choice}\\") if user_choice == computer_choice: print(\\"It\'s a tie!\\") elif (user_choice == \'rock\' and computer_choice == \'scissors\') or (user_choice == \'scissors\' and computer_choice == \'paper\') or (user_choice == \'paper\' and computer_choice == \'rock\'): print(\\"You win!\\") else: print(\\"You lose!\\") play_again = input(\\"Do you want to play again? (yes/no): \\").lower() if play_again != \'yes\': print(\\"Thanks for playing!\\") break"},{"question":"You need to write a Python function that simulates a simple restaurant ordering system. Create a function called `manage_order` that takes a dictionary representing the menu and a list of tuples where each tuple contains a string representing a dish and an integer representing the quantity of that dish ordered. The function should return a final bill as a dictionary, showing each ordered dish and its corresponding total cost. If a dish is ordered that is not present in the menu, it should be ignored in the final bill. **Function Signature** ```python def manage_order(menu, orders): pass ``` **Requirements:** 1. Iterate through the list of tuples and compute the total cost for each ordered dish. 2. Ignore dishes that are not present in the menu. 3. Return the final bill as a dictionary where keys are the dish names and values are the total cost for each dish. **Notes:** - The `menu` dictionary has dish names as keys and prices per item as values. - The `orders` list consists of tuples where each tuple has a dish name and a quantity. # Example Execution: **Input:** ```python menu = { \\"burger\\": 5.99, \\"fries\\": 2.99, \\"salad\\": 4.99 } orders = [ (\\"burger\\", 2), (\\"fries\\", 3), (\\"salad\\", 1), (\\"pizza\\", 2) # This dish is not in the menu and should be ignored ] print(manage_order(menu, orders)) ``` **Output:** ```python { \\"burger\\": 11.98, # 5.99 * 2 \\"fries\\": 8.97, # 2.99 * 3 \\"salad\\": 4.99 # 4.99 * 1 } ```","solution":"def manage_order(menu, orders): This function takes a menu and a list of orders and returns the final bill as a dictionary. If an ordered dish is not present in the menu, it will be ignored. :param menu: Dictionary with dish names as keys and prices per item as values :param orders: List of tuples where each tuple contains a dish name and a quantity :return: Dictionary with each ordered dish and its corresponding total cost bill = {} for dish, quantity in orders: if dish in menu: if dish in bill: bill[dish] += menu[dish] * quantity else: bill[dish] = menu[dish] * quantity return bill"},{"question":"In this exercise, you\'ll work with JSON file processing and gain familiarity with the `json` and `statistics` libraries in Python. You will implement a function named `average_scores` that reads a JSON file containing information about students and their scores in various subjects. The function should compute the average score for each subject and return a dictionary with subjects as keys and their corresponding average scores as values. Function Signature ```python def average_scores(filename: str) -> Dict[str, float]: ``` Steps to Follow 1. **Read the File**: Open and read the content of the file named `filename`. 2. **Parse JSON Content**: Use the `json.load` function to parse the JSON content into a Python dictionary. 3. **Extract Scores**: Iterate through the list of students and collect scores for each subject. 4. **Compute Averages**: Use the `statistics.mean` function to calculate the average score for each subject. 5. **Return Format**: The function should return a dictionary where each key is a subject, and each value is the average score for that subject. JSON Example Consider a JSON file named `students.json` with the following contents: ```json [ {\\"name\\": \\"Alice\\", \\"math\\": 85, \\"science\\": 92, \\"english\\": 88}, {\\"name\\": \\"Bob\\", \\"math\\": 78, \\"science\\": 83, \\"english\\": 77}, {\\"name\\": \\"Charlie\\", \\"math\\": 90, \\"science\\": 85, \\"english\\": 92} ] ``` If the function is called as `average_scores(\'students.json\')`, it should return: ```python { \\"math\\": 84.33, \\"science\\": 86.67, \\"english\\": 85.67 } ``` Constraints - You can assume the file will be readable and contain a valid JSON array of dictionaries. - Ensure to handle the file opening and closing properly. - Use the `statistics.mean` function to calculate average scores. - Scores should be rounded to two decimal places. Make sure to use `json.load` and `statistics.mean` as part of your solution.","solution":"import json import statistics from typing import Dict def average_scores(filename: str) -> Dict[str, float]: with open(filename, \'r\') as file: data = json.load(file) subjects = {} for student in data: for subject, score in student.items(): if subject != \'name\': # Ignoring the \'name\' field if subject not in subjects: subjects[subject] = [] subjects[subject].append(score) average_scores = {subject: round(statistics.mean(scores), 2) for subject, scores in subjects.items()} return average_scores"},{"question":"You are given two lists of integers representing the preorder and inorder traversal of a binary tree. The elements of the lists are unique. Write a function `build_tree` that reconstructs the binary tree from these traversals and returns the root node of the tree. The tree nodes should be represented using a class `TreeNode`. The `TreeNode` class is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` **Function Signature:** ```python def build_tree(preorder, inorder): pass ``` **Parameters:** - `preorder` (List[int]): List of integers representing the preorder traversal of the tree. - `inorder` (List[int]): List of integers representing the inorder traversal of the tree. **Returns:** - `TreeNode`: The root node of the reconstructed binary tree. **Example:** ```python preorder = [3, 9, 20, 15, 7] inorder = [9, 3, 15, 20, 7] root = build_tree(preorder, inorder) print(root.val) # Output: 3 print(root.left.val) # Output: 9 print(root.right.val) # Output: 20 print(root.right.left.val) # Output: 15 print(root.right.right.val) # Output: 7 ``` # Note: To reconstruct the tree, follow these steps: 1. The first element in the preorder list is the root of the tree. 2. Find the root element in the inorder list. The elements before the root in the inorder list are the left subtree, and the elements after the root are the right subtree. 3. Recursively apply the above steps to reconstruct the left and right subtrees.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(preorder, inorder): Reconstructs the binary tree from preorder and inorder traversals. if not preorder or not inorder: return None # Root is the first element in preorder traversal root_val = preorder.pop(0) root = TreeNode(root_val) # Find the index of the root in inorder traversal inorder_index = inorder.index(root_val) # Build left and right subtrees root.left = build_tree(preorder, inorder[:inorder_index]) root.right = build_tree(preorder, inorder[inorder_index+1:]) return root"},{"question":"You are required to write a Python function named `find_words_with_prefix` that takes a list of words and a prefix string as input and returns a list of words from the input list that start with the given prefix. The comparison should be case-sensitive. Function Signature ```python def find_words_with_prefix(words: list, prefix: str) -> list: pass ``` Example Usage: ```python words = [\'apple\', \'application\', \'banana\', \'appetite\', \'apply\'] prefix = \'app\' matching_words = find_words_with_prefix(words, prefix) print(matching_words) # Output: [\'apple\', \'application\', \'appetite\', \'apply\'] ``` Requirements: 1. The function should iterate through the list of words. 2. It should check each word to see if it starts with the specified prefix. 3. It should return a list of words that start with the given prefix. 4. The comparison must be case-sensitive.","solution":"def find_words_with_prefix(words: list, prefix: str) -> list: Returns a list of words from the input list that start with the given prefix. :param words: List of words to search through. :param prefix: Prefix string to match words with. :return: List of words starting with the given prefix. return [word for word in words if word.startswith(prefix)]"},{"question":"You are tasked with creating a function `extract_movie_ratings(release_year: int) -> List[Tuple[str, float]]` that performs a specific data extraction and transformation task. The objective of this function is to fetch and extract movie titles along with their ratings from a hypothetical movie database available on the web for a given release year. Details: 1. **Web Scraping**: - The function fetches data from a URL constructed with the given release year: `f\\"http://example.com/movies/{release_year}\\"`. - The web page contains movie information structured in a fixed format (e.g., in a table or list). 2. **HTML Structure**: - Each movie has a title enclosed in an HTML tag: `<span class=\\"movietitle\\">Movie Title</span>`. - Each movie has a rating enclosed in another HTML tag: `<span class=\\"rating\\">8.75</span>`. 3. **Data Extraction**: - Extract all movie titles and their corresponding ratings available for the given release year. - Use regular expressions to identify and extract these values reliably from the HTML content. 4. **Return**: - The function should return a list of tuples, where each tuple contains a movie title and its rating as a float. - If no movies are found or the scraping fails, return an empty list. # Function Implementation: - Use Python\'s `re` module to compile and use regular expressions. - Use Python\'s `urllib.request` for fetching the web content. - Handle exceptions properly if the URL fetch fails or if the HTML structure does not match the expected format. # Function Signature: ```python from typing import List, Tuple import re import urllib.request def extract_movie_ratings(release_year: int) -> List[Tuple[str, float]]: pass ```","solution":"from typing import List, Tuple import re import urllib.request def extract_movie_ratings(release_year: int) -> List[Tuple[str, float]]: url = f\\"http://example.com/movies/{release_year}\\" try: # Fetching the HTML content of the page response = urllib.request.urlopen(url) html = response.read().decode(\'utf-8\') except: return [] # Regular expression patterns to extract movie titles and ratings title_pattern = re.compile(r\'<span class=\\"movietitle\\">(.*?)</span>\') rating_pattern = re.compile(r\'<span class=\\"rating\\">(.*?)</span>\') # Finding all the movie titles and ratings using regex movie_titles = title_pattern.findall(html) movie_ratings = rating_pattern.findall(html) # Parsing ratings to float and pairing titles with ratings movie_data = [] for title, rating in zip(movie_titles, movie_ratings): try: movie_data.append((title, float(rating))) except ValueError: continue # Skip if rating is not a valid float return movie_data"},{"question":"Create a function that checks if a given binary tree is a Full Binary Tree. A Full Binary Tree is a binary tree where every node has either 0 or 2 children. The function should take a binary tree node as input and return a boolean indicating whether the tree is full or not. The function should start with: ``` class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_full_binary_tree(root): ``` Example usage: ``` # Constructing a full binary tree # 1 # / # 2 3 # / # 4 5 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) print(is_full_binary_tree(root)) # Output should be True # Constructing a non-full binary tree # 1 # / # 2 3 # / # 4 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) print(is_full_binary_tree(root)) # Output should be False ```","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_full_binary_tree(root): Checks if a given binary tree is a Full Binary Tree. Parameters: root (TreeNode): The root node of the binary tree. Returns: bool: True if the tree is full, False otherwise. if root is None: return True # Leaf node if root.left is None and root.right is None: return True # Node with two children if root.left is not None and root.right is not None: return is_full_binary_tree(root.left) and is_full_binary_tree(root.right) # Node with one child return False"},{"question":"# Stock Data Analysis You are given stock price data of various companies in the form of a CSV file. Your goal is to analyze and visualize the stock\'s performance over a specified time range provided by the user. Your task involves calculating monthly average closing prices and returning a summary DataFrame with visualizations. Function Definition: Define a function named `compute_stock_summary` that will: 1. Load the stock data for a given company from a CSV file using the `pandas.read_csv` function. 2. Convert the \'Date\' column to datetime format using `pandas.to_datetime`. 3. Filter the DataFrame based on the specified start and end dates. 4. Calculate the average closing price for each month in the specified date range. 5. Generate a simple plot of the monthly average closing prices. The function should strictly adhere to the following signature: ```python def compute_stock_summary(company: str, start_date: str, end_date: str) -> pd.DataFrame: ``` - **Parameters**: * `company` (str): The name of the company (this corresponds to a key in the `STOCK_DATA` dictionary). * `start_date` (str): The start date for the analysis in \'YYYY-MM-DD\' format. * `end_date` (str): The end date for the analysis in \'YYYY-MM-DD\' format. - **Returns**: * `pd.DataFrame`: A pandas DataFrame containing average closing prices for each month in the specified date range. Data: The stock data for companies can be accessed using a dictionary called `STOCK_DATA`, which maps company names to their respective CSV file paths. Example: ```python STOCK_DATA = { \'apple\': \'apple_stock.csv\', \'google\': \'google_stock.csv\', \'amazon\': \'amazon_stock.csv\' } ``` # Example Usage ```python df = compute_stock_summary(\'apple\', \'2020-01-01\', \'2020-12-31\') print(df.head()) ``` This example would load data for Apple, filter it to include only prices from January 1, 2020, to December 31, 2020, calculate the average closing prices for each month within this range, and then print the first few rows of the resulting DataFrame. # Important Notes - Ensure the date range provided by the user is valid by handling any potential date errors. - Use the `pandas.to_datetime` for converting the \'Date\' column. - Use `pandas.read_csv` for reading the CSV data. - Create a basic plot of the average monthly closing prices using `matplotlib` or any other plotting library.","solution":"import pandas as pd import matplotlib.pyplot as plt # Provided stock data paths STOCK_DATA = { \'apple\': \'apple_stock.csv\', \'google\': \'google_stock.csv\', \'amazon\': \'amazon_stock.csv\' } def compute_stock_summary(company: str, start_date: str, end_date: str) -> pd.DataFrame: Compute the monthly average closing prices for a given company between specified dates. :param company: Name of the company :param start_date: Start date in \'YYYY-MM-DD\' format :param end_date: End date in \'YYYY-MM-DD\' format :return: DataFrame with average closing prices for each month # Load stock data from CSV if company not in STOCK_DATA: raise ValueError(\\"Company data not available\\") df = pd.read_csv(STOCK_DATA[company]) # Convert \'Date\' column to datetime format df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Filter data based on the specified date range mask = (df[\'Date\'] >= start_date) & (df[\'Date\'] <= end_date) filtered_df = df.loc[mask] # Calculate monthly average closing prices filtered_df.set_index(\'Date\', inplace=True) monthly_avg = filtered_df[\'Close\'].resample(\'M\').mean().reset_index() # Plot the monthly average closing prices plt.figure(figsize=(10, 6)) plt.plot(monthly_avg[\'Date\'], monthly_avg[\'Close\'], marker=\'o\', linestyle=\'-\', color=\'b\') plt.title(f\'Monthly Average Closing Prices for {company.capitalize()}\') plt.xlabel(\'Date\') plt.ylabel(\'Average Closing Price\') plt.grid(True) plt.xticks(rotation=45) plt.show() return monthly_avg"},{"question":"You are given a list of integers where each integer appears three times except for one integer that appears only once. Write a function named `find_unique_number` that finds and returns the integer that appears only once. The function should efficiently handle lists with a large number of elements, and it should have a linear runtime complexity. # Constraints: 1. The list of integers will have at least 4 elements. 2. All integers in the list are 32-bit signed integers. **Function Signature:** ```python def find_unique_number(nums: list[int]) -> int: ``` **Example Usage:** ```python print(find_unique_number([2, 2, 3, 2])) # Output: 3 print(find_unique_number([0, 1, 0, 1, 0, 1, 99])) # Output: 99 ```","solution":"def find_unique_number(nums): Finds the unique number in a list where every element appears three times except one. ones, twos = 0, 0 for num in nums: twos |= ones & num ones ^= num common_mask = ~(ones & twos) ones &= common_mask twos &= common_mask return ones"},{"question":"--- Write a function `generate_masked_string(input_str, mask_char=\'#\')` that takes a string `input_str` and a character `mask_char` (defaulting to `#`). The function should replace all characters in `input_str` with `mask_char`, except for the first and the last character of the string, which should remain unchanged. Instructions: 1. Define the function `generate_masked_string(input_str, mask_char=\'#\')`. 2. Ensure the function handles edge cases where the length of the input string is less than or equal to 2. 3. Create a new string in which all characters, except for the first and last character, are replaced by `mask_char`. 4. Return the newly constructed masked string. Examples: - `generate_masked_string(\\"hello\\")` should return `\\"h#o\\"`. - `generate_masked_string(\\"environment\\", \'*\')` should return `\\"e*********t\\"`. - `generate_masked_string(\\"ab\\")` should return `\\"ab\\"` (no change since the input length is less than or equal to 2).","solution":"def generate_masked_string(input_str, mask_char=\'#\'): Returns a string where all characters except the first and last are replaced with the mask_char. Parameters: input_str (str): The original string. mask_char (str): The character to mask with (default is \'#\'). Returns: str: The masked string. if len(input_str) <= 2: return input_str return input_str[0] + mask_char * (len(input_str) - 2) + input_str[-1]"},{"question":"You are managing the logistics for a car rental company. Each day, the company can either rent out one car (indicated by `1`) or no cars (indicated by `0`). The probability of renting out one car on any given day is about 40%, while the probability of not renting out any is about 60%. Your goal is to write a function named `simulate_rentals` that takes two arguments: 1. `days` (an integer): The number of days to simulate rentals for. 2. `seed` (an integer): A seed value to initialize the random number generator for reproducibility. The function should simulate the rental process by generating a list where each element is either `0` or `1`, corresponding to the number of cars rented out each day. The function should return this list of rental outcomes. To accomplish this, make use of Python\'s `random` library, specifically the `random.seed` and `random.choices` methods: - `random.seed(seed)`: This should be used to initialize the random number generator. - `random.choices(population, weights, k)`: This should be utilized to randomly select `0` or `1` for each day with the probability distribution mentioned above. Your implementation should ensure that the random elements are selected with the correct distribution. Here is an outline of what the function should look like: ```python def simulate_rentals(days, seed): # Initialize random number generator with the given seed # Generate the list of rental outcomes return rental_outcomes ```","solution":"import random def simulate_rentals(days, seed): Simulates the car rentals over a given number of days. Parameters: days (int): The number of days to simulate rentals for. seed (int): A seed value to initialize the random number generator. Returns: list: A list of integers where each integer is either 0 or 1, indicating the number of cars rented out each day. random.seed(seed) rental_outcomes = random.choices([0, 1], weights=[0.6, 0.4], k=days) return rental_outcomes"},{"question":"You are given a Pandas DataFrame, `df`, which contains weather data for a city. The DataFrame includes columns such as \'Temperature\', \'Humidity\', \'Wind Speed\', and \'Precipitation\'. Write a function called `weather_stats` that calculates and prints the following statistics: 1. The highest and lowest temperature recorded. 2. The average wind speed. 3. The total precipitation. The function should also print the time taken to perform these calculations using the `time` module. You must use `time.time()`, to record the start and end times of the calculations and display the time taken for computation. The input parameter and function signature are as follows: ```python import pandas as pd import time def weather_stats(df): # Your code here ``` Below is an example DataFrame that may be passed to the function: ```python import pandas as pd data = {\'Temperature\': [22, 19, 25, 20, 23], \'Humidity\': [65, 60, 70, 75, 68], \'Wind Speed\': [5, 7, 6, 8, 10], \'Precipitation\': [0.5, 0.0, 1.2, 0.0, 0.8]} df = pd.DataFrame(data) ```","solution":"import pandas as pd import time def weather_stats(df): start_time = time.time() highest_temp = df[\'Temperature\'].max() lowest_temp = df[\'Temperature\'].min() avg_wind_speed = df[\'Wind Speed\'].mean() total_precipitation = df[\'Precipitation\'].sum() end_time = time.time() time_taken = end_time - start_time print(f\\"Highest Temperature: {highest_temp}\\") print(f\\"Lowest Temperature: {lowest_temp}\\") print(f\\"Average Wind Speed: {avg_wind_speed}\\") print(f\\"Total Precipitation: {total_precipitation}\\") print(f\\"Time taken for computation: {time_taken} seconds\\")"},{"question":"You are tasked with creating a function `flatten_dict` that takes a single dictionary argument and returns a \\"flattened\\" version of the dictionary. Flattening the dictionary involves converting any nested dictionaries within the input dictionary to a single level dictionary. The keys in the flattened dictionary are constructed by concatenating the keys from each level, separated by a period. # Function Signature ```python def flatten_dict(d: dict) -> dict: ``` # Example ```python input_dict = { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3, \\"f\\": 4 } }, \\"g\\": 5 } output_dict = flatten_dict(input_dict) print(output_dict) # Expected Output: # {\'a\': 1, \'b.c\': 2, \'b.d.e\': 3, \'b.d.f\': 4, \'g\': 5} ``` # Instructions 1. Define the function `flatten_dict` which takes a single dictionary input. 2. The function should iterate through each key-value pair in the input dictionary. 3. If a value is a nested dictionary, recursively flatten the nested dictionary. 4. Construct the flattened keys by concatenating parent keys with nested keys using a period (.) 5. Return the flattened dictionary. # Constraints - The input dictionary can have nested dictionaries to any depth. - Key names are strings and values can be any data type, but all dictionary values should be preserved in the flattened version. # Hints - Utilize recursive helper functions to manage nested dictionaries. - The base case of the recursion involves a dictionary without nested dictionaries. - Pay special attention to concatenating keys with the correct separators. # Additional Notes - Ensure your solution handles edge cases, such as empty dictionaries. - The flattened dictionary keys should maintain the original order of items as much as possible.","solution":"def flatten_dict(d: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: Flatten a nested dictionary. Args: d (dict): The dictionary to flatten. parent_key (str): The base key to use for the flattened dictionary. sep (str): The separator to use between keys. Returns: dict: The flattened dictionary. items = {} for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.update(flatten_dict(v, new_key, sep=sep)) else: items[new_key] = v return items"},{"question":"**Background:** You are working for a logistics company that needs to optimize the routes for its delivery trucks. The objective is to determine the shortest path to deliver packages to a list of destinations. The company\'s delivery network can be represented as a graph where each node is a location and each edge is the distance between two locations. **Objective:** You need to write a function `shortest_path_routing(start: str, destinations: List[str], graph: Dict[str, Dict[str, int]]) -> Dict[str, int]` that calculates the shortest path from the starting location to each of the destinations using Dijkstra\'s algorithm. **Requirements:** 1. **Name of the function:** `shortest_path_routing` 2. **Parameters:** - `start` (str): The starting location. - `destinations` (List[str]): A list of destination locations. - `graph` (Dict[str, Dict[str, int]]): A representation of the network where the keys are location names and the values are dictionaries with neighboring locations as keys and distances as values. 3. **Returns:** - A `Dict[str, int]` where the keys are the destination locations and the values are the shortest distances from the starting location. 4. You are required to use Dijkstra\'s algorithm to find the shortest path. **Using the given parameters, your function should be capable of:** - Parsing and understanding the graph structure. - Efficiently computing the shortest paths to all destination nodes from the start node. - Returning the results in the specified format. *Hint:* You may find the `heapq` library useful for implementing the priority queue in Dijkstra\'s algorithm. **Example:** ```python graph = { \\"A\\": {\\"B\\": 1, \\"C\\": 4}, \\"B\\": {\\"A\\": 1, \\"C\\": 2, \\"D\\": 5}, \\"C\\": {\\"A\\": 4, \\"B\\": 2, \\"D\\": 1}, \\"D\\": {\\"B\\": 5, \\"C\\": 1} } result = shortest_path_routing(start=\\"A\\", destinations=[\\"C\\", \\"D\\"], graph=graph) print(result) # Expected output: # {\'C\': 3, \'D\': 4} ``` **Notes:** - Implement the priority queue using a min-heap to efficiently get the closest unvisited node. - Ensure to track and update the shortest path to each node while iterating through the graph.","solution":"import heapq from typing import List, Dict def shortest_path_routing(start: str, destinations: List[str], graph: Dict[str, Dict[str, int]]) -> Dict[str, int]: Calculates the shortest path from the starting location to each of the destinations using Dijkstra\'s algorithm. # Initialize the priority queue with the starting node and distances dictionary priority_queue = [(0, start)] shortest_distances = {node: float(\'inf\') for node in graph} shortest_distances[start] = 0 visited = set() while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_node in visited: continue visited.add(current_node) for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < shortest_distances[neighbor]: shortest_distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) # Extract distances for the required destinations result = {destination: shortest_distances[destination] for destination in destinations} return result"},{"question":"In this problem, you will create a class called `LimitedCounter` that uses a combination of threading and synchronization to manage concurrent access to a shared counter. The counter should have a defined limit, and threads should be able to increment the counter up to this limit. If a thread tries to increment the counter beyond its limit, it should be blocked until other threads decrement the counter. Here\'s a detailed breakdown of the requirements: 1. Your `LimitedCounter` class should accept two parameters: `initial` (the initial value of the counter) and `limit` (the maximum value the counter can reach). 2. The class should have an `increment` method that: - Increments the counter by 1 only if it does not exceed the limit. - If the counter would exceed the limit, the thread should wait until the counter is decremented by another thread. 3. The class should have a `decrement` method that: - Decrements the counter by 1. - Notifies any waiting threads that they can attempt to increment the counter. 4. Use a `threading.Condition` object to manage the synchronization between threads. Your task is to implement the `LimitedCounter` class and its methods. Here\'s a template to get you started: ```python import threading class LimitedCounter: def __init__(self, initial, limit): self.counter = initial self.limit = limit self.condition = threading.Condition() def increment(self): with self.condition: while self.counter >= self.limit: self.condition.wait() self.counter += 1 self.condition.notify_all() def decrement(self): with self.condition: self.counter -= 1 self.condition.notify_all() ``` **Note:** You do not need to write any additional code to create or manage threads. This class should be thread-safe and handle concurrent access correctly.","solution":"import threading class LimitedCounter: def __init__(self, initial, limit): self.counter = initial self.limit = limit self.condition = threading.Condition() def increment(self): with self.condition: while self.counter >= self.limit: self.condition.wait() self.counter += 1 self.condition.notify_all() def decrement(self): with self.condition: self.counter -= 1 self.condition.notify_all()"},{"question":"You are asked to implement a simple text-based Tic-Tac-Toe game using Python. The game will be played on a 3x3 grid between two players who alternate turns. Each player will input their move in terms of board position (1-9). The grid positions will be numbered as follows: ``` 1 | 2 | 3 --------- 4 | 5 | 6 --------- 7 | 8 | 9 ``` Your task is to write a function `play_tic_tac_toe` that manages the game, checks for win conditions, and displays the game board after each move. The function should: 1. Alternate turns between Player 1 (`\'X\'`) and Player 2 (`\'O\'`). 2. Print the updated board after each move. 3. Check for a win condition after each move. A win is when a player has three of their markers in a row, column, or diagonal. 4. When a win is detected, print the winning player and end the game. 5. If no moves are left and no player has won, declare the game as a draw. ```python def play_tic_tac_toe(): # Implement this function pass ``` # Example Usage ```python play_tic_tac_toe() ``` # Example Execution ``` 1 | 2 | 3 --------- 4 | 5 | 6 --------- 7 | 8 | 9 Player 1\'s turn (X): Choose a position (1-9): 5 --------- 4 | X | 6 --------- 7 | 8 | 9 Player 2\'s turn (O): Choose a position (1-9): 3 --------- 4 | X | O --------- 7 | 8 | 9 ... Player 1 wins! --------- X | X | X --------- 7 | O | O ``` Note: Ensure proper input validation such that each move is within the bounds (1-9), and the chosen position is not already taken.","solution":"def print_board(board): for row in board: print(\\" | \\".join(row)) print(\\"-\\" * 9) def check_win(board, player): # Check rows for row in board: if all(s == player for s in row): return True # Check columns for col in range(3): if all(board[row][col] == player for row in range(3)): return True # Check diagonals if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)): return True return False def check_draw(board): return all(all(cell != \'_\' for cell in row) for row in board) def play_tic_tac_toe(): board = [[\'_\'] * 3 for _ in range(3)] moves = { \'1\': (0, 0), \'2\': (0, 1), \'3\': (0, 2), \'4\': (1, 0), \'5\': (1, 1), \'6\': (1, 2), \'7\': (2, 0), \'8\': (2, 1), \'9\': (2, 2) } current_player = \'X\' while True: print_board(board) move = input(f\\"Player {current_player}\'s turn ({current_player}): Choose a position (1-9): \\") if move not in moves or board[moves[move][0]][moves[move][1]] != \'_\': print(\\"Invalid move. Try again.\\") continue row, col = moves[move] board[row][col] = current_player if check_win(board, current_player): print_board(board) print(f\\"Player {current_player} wins!\\") break if check_draw(board): print_board(board) print(\\"It\'s a draw!\\") break current_player = \'O\' if current_player == \'X\' else \'X\'"},{"question":"You need to write a Python function named `water_area` that calculates how much water would be trapped after it rains over a histogram. The histogram is defined as a list of non-negative integers, where each integer represents the height of a vertical bar. The function signature is as follows: ```python def water_area(heights): Calculate the amount of water trapped after raining over the histogram defined by heights. Parameters: heights (list): A list of non-negative integers representing the height of bars. Returns: int: The total number of units of water trapped. ``` **Requirements**: - Consider the constraints of space and time efficiency, approaching an O(n) time complexity if possible. - Do not use extra space for another structures besides the input and few variables. **Objective**: Implement this function to demonstrate understanding of problem-solving with arrays and working with linear pass algorithms.","solution":"def water_area(heights): Calculate the amount of water trapped after raining over the histogram defined by heights. Parameters: heights (list): A list of non-negative integers representing the height of bars. Returns: int: The total number of units of water trapped. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the trapped water water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"In this problem, you are tasked with creating a function to simulate and visualize a simple orbital motion of a planet around a star, utilizing the `matplotlib` library\'s `plot` and `scatter` methods as specified. Your job is to implement the function `plot_orbit(semi_major_axis, eccentricity, num_points)`. This function will take in three parameters: 1. `semi_major_axis`: The semi-major axis of the orbital ellipse. 2. `eccentricity`: The eccentricity of the orbit, a value between 0 (circular orbit) and 1 (parabolic trajectory). 3. `num_points`: The number of points to generate along the orbit. The function should: - Calculate the positions of the planet in its orbit based on the given parameters. - Generate `num_points` points evenly distributed along the orbit\'s path. - Plot the orbit as an ellipse using the calculated points. - Mark the current positions of the star (at one of the foci) and the planet on the plotted ellipse using `plt.scatter`. - Ensure that the plot is properly labeled with suitable axis labels and a title. To help you out, here is the infrastructure and relevant dependencies you\'ll need: - `numpy` for generating and manipulating numerical data. - `matplotlib.pyplot` for plotting. # Prototype of the function ```python def plot_orbit(semi_major_axis, eccentricity, num_points): Plotting the orbit of a planet around a star. Parameters: semi_major_axis (float): Semi-major axis of the orbital ellipse. eccentricity (float): Eccentricity of the orbital ellipse. num_points (int): Number of points to generate along the orbit. Returns: None pass ``` # Example Usage ```python semi_major_axis = 5.0 # Semi-major axis of 5 units eccentricity = 0.5 # Eccentricity of 0.5 num_points = 100 # Generate 100 points along the orbit plot_orbit(semi_major_axis, eccentricity, num_points) ``` This code should produce a visualization of the orbital path, plotting the elliptical orbit of the planet and marking the current positions of the star and the planet. # Guidelines: - Use the parametric equations of an ellipse to calculate the (x, y) positions of the planet: - ( x(t) = a cos(t) ) - ( y(t) = b sin(t) ) where ( a ) is the semi-major axis and ( b = a sqrt{1 - e^2} ) is the semi-minor axis. - The star is located at one of the foci of the ellipse, positioned at ( (ae, 0) ). - Use `numpy.linspace` to generate an array of `num_points` evenly spaced values for the parameter ( t ) (from 0 to ( 2pi )). - Use `matplotlib.pyplot.plot` to plot the orbit and `matplotlib.pyplot.scatter` to mark the positions of the star and the planet. - Label the x-axis and y-axis using `matplotlib.pyplot.xlabel` and `matplotlib.pyplot.ylabel` respectively. - Ensure the plot is titled meaningfully using `matplotlib.pyplot.title`. # Hint: You might find the `numpy.linspace` function useful for generating equally spaced values of ( t ) and `numpy.cos` and `numpy.sin` for calculating the x and y coordinates.","solution":"import numpy as np import matplotlib.pyplot as plt def plot_orbit(semi_major_axis, eccentricity, num_points): Plotting the orbit of a planet around a star. Parameters: semi_major_axis (float): Semi-major axis of the orbital ellipse. eccentricity (float): Eccentricity of the orbital ellipse. num_points (int): Number of points to generate along the orbit. Returns: None # Define the semi-minor axis semi_minor_axis = semi_major_axis * np.sqrt(1 - eccentricity**2) # Generate num_points evenly spaced values from 0 to 2*pi t = np.linspace(0, 2 * np.pi, num_points) # Calculate the (x, y) positions x = semi_major_axis * np.cos(t) y = semi_minor_axis * np.sin(t) # Position of the star at one of the foci star_x = semi_major_axis * eccentricity star_y = 0 # Position of the planet (let\'s take the first point in this case) planet_x = x[0] planet_y = y[0] # Plot the orbit plt.plot(x, y, label=\'Orbit\') # Mark the star\'s position plt.scatter(star_x, star_y, color=\'yellow\', s=100, label=\'Star\') # Mark the planet\'s position plt.scatter(planet_x, planet_y, color=\'blue\', s=50, label=\'Planet\') # Labeling the plot plt.xlabel(\'X position\') plt.ylabel(\'Y position\') plt.title(\'Orbital Motion of Planet around Star\') plt.legend() plt.axis(\'equal\') # Show the plot plt.show()"},{"question":"Write a function that takes a list of tuples where each tuple contains two elements: a string and a list of integers. Your task is to flatten the list of tuples into a list of dictionaries where each dictionary contains the string as the \'name\' key and each integer from the list as a separate key-value pair under \'value\'. The resulting list should preserve the order of the tuples and integers. The function should have the following signature: ``` def flatten_tuples(input_list): ``` The function should output: ``` result (list): A list of dictionaries with \'name\' and \'value\' key-value pairs. ``` Example: ``` input_list = [(\\"a\\", [1, 2]), (\\"b\\", [3, 4, 5])] flatten_tuples(input_list) ``` Output: ``` [ {\\"name\\": \\"a\\", \\"value\\": 1}, {\\"name\\": \\"a\\", \\"value\\": 2}, {\\"name\\": \\"b\\", \\"value\\": 3}, {\\"name\\": \\"b\\", \\"value\\": 4}, {\\"name\\": \\"b\\", \\"value\\": 5} ] ```","solution":"def flatten_tuples(input_list): Flattens a list of tuples where each tuple contains a string and a list of integers into a list of dictionaries. Args: input_list (list): A list of tuples. Each tuple contains a string and a list of integers. Returns: list: A list of dictionaries with \'name\' and \'value\' key-value pairs. result = [] for name, values in input_list: for value in values: result.append({\\"name\\": name, \\"value\\": value}) return result"},{"question":"You are given a list of strings representing mathematical expressions that consist of non-negative integers, the four basic arithmetic operations (+, -, *, /), and parentheses. Your task is to write a function to evaluate each expression and return a list of results. Implement the function `evaluate_expressions(expressions)` that evaluates each expression in the input list and returns a list of integers representing the results. The input list `expressions` contains valid arithmetic expressions with non-negative integers and the operators +, -, *, and /. All divisions are integer divisions. **Function Signature:** ```python def evaluate_expressions(expressions: list) -> list: # Your code here ``` **Inputs:** - `expressions`: A list of strings, where each string is a valid arithmetic expression consisting of non-negative integers, +, -, *, /, and parentheses. **Output:** - Returns a list of integers, where each integer is the result of evaluating the corresponding expression in `expressions`. **Constraints:** - Each element in the `expressions` list will be a valid arithmetic expression. - The length of `expressions` will be between 1 and 100 inclusive. - The length of each expression string will be between 1 and 100 characters inclusive. - The expressions will only contain non-negative integers and the operators +, -, *, / with parentheses for grouping. **Example:** ```python expressions = [\\"2 + 3 * 4\\", \\"(1 + 2) * 3\\", \\"10 / 2 - 3\\", \\"5 * (2 + 3)\\"] print(evaluate_expressions(expressions)) # Output: [14, 9, 2, 25] ``` **Note:** You may use the `eval()` function in Python for this task, but ensure to use it safely.","solution":"def evaluate_expressions(expressions: list) -> list: Evaluates a list of arithmetic expressions and returns the results. :param expressions: A list of strings, each representing a mathematical expression. :return: A list of integers, each being the result of the corresponding expression evaluation. # Use a safe eval by restricting globals and locals results = [] for expr in expressions: # Since we have valid expressions we can use eval with safe environment result = eval(expr, {\\"__builtins__\\": None}, {}) results.append(int(result)) return results"},{"question":"You have been tasked to write a function `count_vowels_consonants()` that processes a provided string and returns the count of vowels and consonants in that string. The function should discriminate between the two based on the following definitions: - Vowels: \'a\', \'e\', \'i\', \'o\', \'u\' (both lowercase and uppercase are considered). - Consonants: Any alphabetical characters that are not vowels. Your function should follow these steps: 1. Prompt the user to input a string. 2. Initialize two counters, one for vowels and one for consonants. 3. Loop through each character in the string: - If the character is a vowel (uppercase or lowercase), increment the vowel counter. - If the character is a consonant (uppercase or lowercase), increment the consonant counter. 4. Ignore non-alphabetic characters from both counts. 5. Return a tuple with the count of vowels and the count of consonants. Make sure your function is case-insensitive and properly handles unexpected input such as numbers or punctuation. Here is an example of how to handle the string and distinguish between vowels and consonants: ```python def count_vowels_consonants(): import string vowels = \\"aeiouAEIOU\\" user_string = input(\\"Please enter a string: \\") vowel_count = 0 consonant_count = 0 for char in user_string: if char in vowels: vowel_count += 1 elif char.isalpha(): consonant_count += 1 return (vowel_count, consonant_count) ``` Example usage: - Input: \\"Hello, World!\\" - Output: (3 vowels, 7 consonants)","solution":"def count_vowels_consonants(user_string): Counts the number of vowels and consonants in the given string. :param user_string: The string to process :return: Tuple containing the count of vowels and consonants respectively vowels = \\"aeiouAEIOU\\" vowel_count = 0 consonant_count = 0 for char in user_string: if char in vowels: vowel_count += 1 elif char.isalpha(): consonant_count += 1 return (vowel_count, consonant_count)"},{"question":"# Objective Develop a function called `rotate_matrix_90_degrees` in Python that rotates a given square matrix by 90 degrees in the clockwise direction. The function should leverage NumPy for matrix operations where appropriate. # Requirements You are provided with the following inputs: 1. `matrix`: A 2D NumPy array representing a square matrix. Your function should return the rotated matrix which is also a 2D NumPy array. # Function Signature ```python def rotate_matrix_90_degrees(matrix): pass ``` # Example ```python import numpy as np matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) rotated_matrix = rotate_matrix_90_degrees(matrix) print(rotated_matrix) ``` Expected Output: ``` array([[7, 4, 1], [8, 5, 2], [9, 6, 3]]) ```","solution":"import numpy as np def rotate_matrix_90_degrees(matrix): Given a square 2D numpy array `matrix`, rotate it 90 degrees clockwise. return np.rot90(matrix, -1)"},{"question":"Write a function that takes a string consisting of words separated by spaces and returns the longest word in the string. If there are multiple words of the same maximum length, return the first one encountered. Assume that the input string contains only letters and spaces, and is non-empty. The function should output: str: The longest word in the provided string. You should write self-contained code starting with: ``` def find_longest_word(s): ``` Example: ``` assert find_longest_word(\\"The quick brown fox jumped over the lazy dog\\") == \\"jumped\\" assert find_longest_word(\\"To be or not to be that is the question\\") == \\"question\\" ```","solution":"def find_longest_word(s: str) -> str: Returns the longest word in the provided string. If there are multiple words of the same maximum length, returns the first one encountered. Parameters: s (str): A string consisting of words separated by spaces. Returns: str: The longest word in the provided string. words = s.split() longest_word = max(words, key=len) return longest_word"},{"question":"Read a text file and count the frequency of each word, ignoring case. The function should: - Read the text file, assuming UTF-8 encoding. - Split the text into words (a word is defined as a series of alphanumeric characters and underscores). - Convert all words to lowercase. - Count the occurrences of each word. - Return a dictionary where the keys are words and the values are their respective counts. The function should handle errors by returning an empty dictionary for files that do not exist or cannot be read. You should write self-contained code starting with: ``` import re import os def count_words_in_file(file_path): ```","solution":"import re import os from collections import defaultdict def count_words_in_file(file_path): Reads a text file and counts the frequency of each word, ignoring case. Parameters: file_path (str): Path to the text file. Returns: dict: A dictionary where keys are words and values are their respective counts. Returns an empty dictionary if the file does not exist or cannot be read. word_count = defaultdict(int) try: with open(file_path, \'r\', encoding=\'utf-8\') as file: for line in file: words = re.findall(r\'bw+b\', line.lower()) for word in words: word_count[word] += 1 except IOError: # Return an empty dictionary if the file does not exist or cannot be read return {} return word_count"},{"question":"--- You are asked to create an algorithm in Python to find the longest common subsequence (LCS) between two strings. An LCS is defined as the longest sequence of characters that appear left-to-right (but not necessarily in a contiguous block) in both strings. In this problem, you are to write a function named `longestCommonSubsequence`. This function takes two arguments, `text1` and `text2`, which are the input strings. Your task is to calculate the length of the longest common subsequence using dynamic programming. To complete this task, follow these steps: 1. Initialize a 2D array (list of lists) `dp` of size `len(text1) + 1` by `len(text2) + 1` with all zeros. 2. Iterate over each character in `text1` and `text2` to fill in `dp` according to the following rules: - If the characters `text1[i-1]` and `text2[j-1]` match, then `dp[i][j] = dp[i-1][j-1] + 1`. - If the characters do not match, then `dp[i][j] = max(dp[i-1][j], dp[i][j-1])`. 3. The value in `dp[len(text1)][len(text2)]` will be the length of the LCS. **Function Signature:** ```python def longestCommonSubsequence(text1: str, text2: str) -> int: ``` **Input:** - `text1`: A string containing up to 1000 lowercase English letters. - `text2`: A string containing up to 1000 lowercase English letters. **Output:** - An integer representing the length of the longest common subsequence between `text1` and `text2`. **Example:** ```python text1 = \\"abcde\\" text2 = \\"ace\\" print(longestCommonSubsequence(text1, text2)) # Output: 3 ``` Note: Ensure your solution efficiently utilizes dynamic programming and does not exceed a time complexity of O(n*m), where n and m are the lengths of the two input strings. ---","solution":"def longestCommonSubsequence(text1: str, text2: str) -> int: Returns the length of the longest common subsequence between text1 and text2. # Initialize the dp array with zeros dp = [[0] * (len(text2) + 1) for _ in range(len(text1) + 1)] # Fill dp array with LCS lengths for i in range(1, len(text1) + 1): for j in range(1, len(text2) + 1): if text1[i - 1] == text2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of LCS is in the cell dp[len(text1)][len(text2)] return dp[len(text1)][len(text2)]"},{"question":"You are required to write a function that takes a list of dictionaries and generates a summary of their contents. This function will help in quickly understanding the structure and missing values within the dataset represented by the list of dictionaries. # Function Requirements: 1. **Function Name**: `generate_summary` 2. **Parameters**: - `data`: A list of dictionaries representing the dataset. Each dictionary corresponds to a row in the dataset and may have different keys. 3. **Output**: - A dictionary where: - The keys are the unique keys found among all dictionaries in the list. - The values are dictionaries containing the following information: - `count`: The number of times this key appears in the list. - `missing`: The number of times this key is missing in the list. - `unique_values`: The number of unique values associated with this key. # Example Usage: ```python data = [ {\'name\': \'Alice\', \'age\': 30, \'city\': \'Wonderland\'}, {\'name\': \'Bob\', \'age\': 25}, {\'name\': \'Charlie\', \'city\': \'Narnia\'}, {\'name\': \'Alice\', \'age\': 30, \'city\': \'Wonderland\', \'occupation\': \'Explorer\'} ] # Expected output: # { # \'name\': {\'count\': 4, \'missing\': 0, \'unique_values\': 3}, # \'age\': {\'count\': 3, \'missing\': 1, \'unique_values\': 2}, # \'city\': {\'count\': 3, \'missing\': 1, \'unique_values\': 2}, # \'occupation\': {\'count\': 1, \'missing\': 3, \'unique_values\': 1} # } summary = generate_summary(data) print(summary) ``` # Task: Implement the function `generate_summary` according to the specifications above.","solution":"def generate_summary(data): Generates a summary of the dataset represented by a list of dictionaries. summary = {} total_rows = len(data) for row in data: for key in row: if key not in summary: summary[key] = {\'count\': 0, \'missing\': 0, \'unique_values\': set()} summary[key][\'count\'] += 1 summary[key][\'unique_values\'].add(row[key]) for key in summary: summary[key][\'missing\'] = total_rows - summary[key][\'count\'] summary[key][\'unique_values\'] = len(summary[key][\'unique_values\']) return summary"},{"question":"You need to implement a Python function called `group_squares_and_cubes` that takes a single parameter: a list of integers. This function should group the integers into three categories: perfect squares, perfect cubes, and others. The function should return a dictionary with the keys \'squares\', \'cubes\', and \'others\', where each key maps to a list of integers falling into that category. Perfect squares are integers that can be expressed as the square of another integer (e.g., 1, 4, 9). Perfect cubes are integers that can be expressed as the cube of another integer (e.g., 1, 8, 27). Note that an integer can be both a perfect square and a perfect cube; in such a case, it should appear in both lists. # Example Usage: ```python numbers = [1, 2, 3, 4, 8, 9, 16, 27, 32] result = group_squares_and_cubes(numbers) print(result) ``` # Example Output: ```python { \'squares\': [1, 4, 9, 16], \'cubes\': [1, 8, 27], \'others\': [2, 3, 32] } ``` # Requirements: - Implement the function using a `for` loop to iterate over the list of integers. - Use `math.isqrt` and `round` methods to determine if a number is a perfect square or cube.","solution":"import math def is_perfect_square(n): root = math.isqrt(n) return root * root == n def is_perfect_cube(n): root = round(n ** (1/3)) return root * root * root == n def group_squares_and_cubes(numbers): result = { \'squares\': [], \'cubes\': [], \'others\': [] } for number in numbers: if is_perfect_square(number): result[\'squares\'].append(number) if is_perfect_cube(number): result[\'cubes\'].append(number) if not (is_perfect_square(number) or is_perfect_cube(number)): result[\'others\'].append(number) return result"},{"question":"In this problem, you are required to write a function that checks if a given 2D list (matrix) is a Toeplitz matrix. A matrix is considered to be a Toeplitz matrix if every diagonal from top-left to bottom-right has the same elements. The function you need to implement is named `is_toeplitz_matrix`, and it should accept a 2D list `matrix`. Your function should return `True` if the matrix is a Toeplitz matrix, and `False` otherwise. A Toeplitz matrix can be visualized as: ```plaintext 1 2 3 4 5 1 2 3 9 5 1 2 ``` In this example, all elements along each diagonal from top-left to bottom-right are the same. **Function Signature:** ```python def is_toeplitz_matrix(matrix: List[List[int]]) -> bool: pass ``` **Requirements:** 1. Implement the function `is_toeplitz_matrix`. 2. Assume that the input matrix will have at least one row and one column. 3. You may not use any imported libraries; solve the problem using basic Python constructs. **Example:** ```python matrix1 = [ [1, 2, 3, 4], [5, 1, 2, 3], [9, 5, 1, 2] ] matrix2 = [ [1, 2], [2, 2] ] print(is_toeplitz_matrix(matrix1)) # Expected output: True print(is_toeplitz_matrix(matrix2)) # Expected output: False ```","solution":"def is_toeplitz_matrix(matrix): Checks if a given 2D list (matrix) is a Toeplitz matrix. Parameters: matrix (List[List[int]]): The 2D list to check. Returns: bool: True if the matrix is a Toeplitz matrix, False otherwise. if not matrix: return True # An empty matrix or one without rows/columns is trivially Toeplitz. rows = len(matrix) cols = len(matrix[0]) for row in range(rows-1): for col in range(cols-1): if matrix[row][col] != matrix[row+1][col+1]: return False return True"},{"question":"In many applications, string manipulation is essential, and Python provides powerful tools to handle such tasks. In this problem, we will work with string manipulation to determine the longest palindromic substring within a given string. Task You are required to write a function named `longest_palindromic_substring` which takes a single argument: - `s`: A string representing the input string. Your task is to return the longest contiguous substring of `s` that is a palindrome. If there are multiple substrings of the same maximum length, return the first one that appears. Restrictions and Requirements 1. **Function to implement**: `longest_palindromic_substring(s: str) -> str` 2. **Time Complexity**: Your solution should have a time complexity of `O(n^2)` at worst, where `n` is the length of the input string. Examples 1. For an input string of `\\"babad\\"`: ```python s = \\"babad\\" result = longest_palindromic_substring(s) print(result) # Should print \\"bab\\" or \\"aba\\" ``` 2. For an input string of `\\"cbbd\\"`: ```python s = \\"cbbd\\" result = longest_palindromic_substring(s) print(result) # Should print \\"bb\\" ``` 3. For an input string of `\\"a\\"`: ```python s = \\"a\\" result = longest_palindromic_substring(s) print(result) # Should print \\"a\\" ``` 4. For an input string of `\\"forgeeksskeegfor\\"`: ```python s = \\"forgeeksskeegfor\\" result = longest_palindromic_substring(s) print(result) # Should print \\"geeksskeeg\\" ``` Remember to handle the edge cases where the input string might be empty or contain only one character.","solution":"def longest_palindromic_substring(s: str) -> str: Returns the longest palindromic substring of the given string s. if not s: return \\"\\" n = len(s) start = 0 max_length = 1 # Create a 2D list to store whether s[i][j] is a palindrome. dp = [[False] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = True # Check for sub-string of length 2 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = True if length > max_length: start = i max_length = length return s[start:start + max_length]"},{"question":"You are asked to write a function called `is_valid_graph` that determines if a list of edge pairs represents a valid undirected, connected graph without any self-loops or multiple edges between the same pair of vertices. # Constraints: - The edge pairs are given as a list of tuples where each tuple is a pair of integers representing an edge between two different vertices. - Vertices are represented by non-negative integers. - The graph might not include every vertex in a continuous sequence (e.g., there could be vertices labeled 0 and 2 but no vertex labeled 1). # Function Signature: ```python def is_valid_graph(edges: List[Tuple[int, int]]) -> bool: ``` # Parameters: - `edges` (List[Tuple[int, int]]): A list of tuples where each tuple `(u, v)` represents an edge between vertex `u` and vertex `v`. # Returns: - A boolean value: `True` if the list of edge pairs forms a valid undirected, connected graph, `False` otherwise. # Example: ```python print(is_valid_graph([(0, 1), (1, 2), (2, 0)])) # Output: True print(is_valid_graph([(0, 1), (2, 3)])) # Output: False print(is_valid_graph([(0, 1), (1, 1)])) # Output: False ``` # Hints: - You can use a depth-first search (DFS) or breadth-first search (BFS) to check the connectivity of the graph. - Consider using data structures such as dictionaries or sets to manage the graph’s adjacency list. - Be mindful of self-loops and parallel edges when validating the graph structure.","solution":"from typing import List, Tuple from collections import defaultdict def is_valid_graph(edges: List[Tuple[int, int]]) -> bool: if not edges: return False adj_list = defaultdict(set) # Build the adjacency list and check for self-loops and multiple edges for u, v in edges: if u == v: # self-loop return False if v in adj_list[u]: # multiple edge return False adj_list[u].add(v) adj_list[v].add(u) # Perform BFS or DFS to check connectivity visited = set() def dfs(node): stack = [node] while stack: current = stack.pop() if current not in visited: visited.add(current) for neighbor in adj_list[current]: if neighbor not in visited: stack.append(neighbor) # Start DFS from the first node start_node = list(adj_list.keys())[0] dfs(start_node) # Check if all nodes in the adjacency list are visited if len(visited) != len(adj_list): return False return True"},{"question":"Your task is to create a Python function `merge_and_sort_lists` that takes two parameters: `list1` and `list2`. The function should merge the two lists into a single list, remove any duplicate values, and return the merged list sorted in ascending order. To achieve this, you need to concatenate the two lists, eliminate duplicates by converting the list to a set and back to a list, and then sort the final list in ascending order. **Function Signature:** ```python def merge_and_sort_lists(list1: list, list2: list) -> list: pass ``` **Input:** - `list1` (list): The first list of integers. - `list2` (list): The second list of integers. **Output:** - A sorted list of unique integers from the merged input lists. **Constraints:** - The lists `list1` and `list2` can contain any integers, including duplicates. - The function should return a list with unique integers sorted in ascending order. **Example:** 1. Input: ```python list1 = [3, 5, 7, 9] list2 = [1, 3, 5, 7] ``` Output: ```python [1, 3, 5, 7, 9] ``` 2. Input: ```python list1 = [10, 20, 20, 30] list2 = [15, 10, 25, 30] ``` Output: ```python [10, 15, 20, 25, 30] ```","solution":"def merge_and_sort_lists(list1: list, list2: list) -> list: Merges two lists into a single list, removes duplicates, and returns the merged list sorted in ascending order. merged_list = list1 + list2 unique_list = list(set(merged_list)) unique_list.sort() return unique_list"},{"question":"In this task, you\'ll create a function that evaluates the factorial of a number using memoization technique for optimized performance. Factorials grow very quickly, and calculating them repetitively can be inefficient, so you will utilize memoization to store previously computed values, thereby avoiding redundant calculations. The factorial of a non-negative integer n is the product of all integers from 1 to n, denoted as ( n! ). Factorials have the following property: [ n! = n times (n-1)! ] with the base case of ( 0! = 1 ). Your task is to implement the `memoized_factorial(n)` function which uses memoization to efficiently compute the factorial of n. # Function Signature ```python def memoized_factorial(n: int, memo={}) -> int: # Your code here pass ``` # Input - An integer `n` (0 ≤ n ≤ 100) which represents the number whose factorial is to be computed. # Output - An integer representing the factorial of the given number `n`. # Requirement - You must use a dictionary to store computed factorials. # Example ```python # Example usage: print(memoized_factorial(5)) # Output should be 120 print(memoized_factorial(10)) # Output should be 3628800 print(memoized_factorial(0)) # Output should be 1 print(memoized_factorial(1)) # Output should be 1 ``` # Libraries You are not allowed to use any external libraries for this function except the standard Python data structures. # Constraints - Use memoization as the primary technique to optimize factorial calculations. - Handle the base case explicitly to avoid redundant computation.","solution":"def memoized_factorial(n: int, memo={}) -> int: Returns the factorial of number n using memoization technique. if n in memo: return memo[n] if n == 0 or n == 1: memo[n] = 1 else: memo[n] = n * memoized_factorial(n - 1, memo) return memo[n]"},{"question":"You are provided with a data structure representing an HTML document in the form of a nested dictionary. The function should traverse this dictionary structure and generate a string representing the HTML content. The dictionary keys represent HTML tag names, and the values can either be: 1. A string: This represents the text content within the HTML tag. 2. Another dictionary: This represents nested HTML tags within the parent tag. Here is your task: **Function Name:** `generate_html` **Arguments:** - `structure` (dict): A dictionary representing the structure of the HTML document. **Returns:** - A string containing the generated HTML content. **Requirements:** 1. Handle nested dictionaries to represent nested HTML tags. 2. Add indentation to nested tags to improve the readability of the output. 3. Ensure the generated HTML content is well-formed. 4. Handle self-closing tags (like `<img>`) correctly by identifying a predefined list of such tags. **Function Template:** ```python def generate_html(structure, indent=0): # A set of self-closing tags in HTML self_closing_tags = {\'img\', \'br\', \'hr\', \'meta\', \'link\', \'input\'} def generate_html_recursively(structure, indent): html_string = \'\' indent_space = \' \' * indent for tag, content in structure.items(): if tag in self_closing_tags: # If the tag is self-closing html_string += f\\"{indent_space}<{tag}>n\\" else: # If content is a string, wrap it in the tag if isinstance(content, str): html_string += f\\"{indent_space}<{tag}>{content}</{tag}>n\\" # If content is a dict, recursively generate HTML for nested tags elif isinstance(content, dict): html_string += f\\"{indent_space}<{tag}>n\\" html_string += generate_html_recursively(content, indent + 2) html_string += f\\"{indent_space}</{tag}>n\\" return html_string return generate_html_recursively(structure, indent) ``` **Example:** ```python structure = { \'html\': { \'head\': { \'title\': \'Test Page\' }, \'body\': { \'h1\': \'This is a heading\', \'p\': { \'span\': \'This is a paragraph with a \', \'a\': \'link\' }, \'img\': \'\' } } } html_content = generate_html(structure) print(html_content) ``` **Expected Output:** ``` <html> <head> <title>Test Page</title> </head> <body> <h1>This is a heading</h1> <p> <span>This is a paragraph with a </span> <a>link</a> </p> <img> </body> </html> ```","solution":"def generate_html(structure, indent=0): # A set of self-closing tags in HTML self_closing_tags = {\'img\', \'br\', \'hr\', \'meta\', \'link\', \'input\'} def generate_html_recursively(structure, indent): html_string = \'\' indent_space = \' \' * indent for tag, content in structure.items(): if tag in self_closing_tags: # If the tag is self-closing html_string += f\\"{indent_space}<{tag}>n\\" else: # If content is a string, wrap it in the tag if isinstance(content, str): html_string += f\\"{indent_space}<{tag}>{content}</{tag}>n\\" # If content is a dict, recursively generate HTML for nested tags elif isinstance(content, dict): html_string += f\\"{indent_space}<{tag}>n\\" html_string += generate_html_recursively(content, indent + 2) html_string += f\\"{indent_space}</{tag}>n\\" return html_string return generate_html_recursively(structure, indent)"},{"question":"Determine the longest common prefix of a set of strings using a Trie (prefix tree) data structure. If no common prefix exists, return an empty string. The function should handle edge cases such as: - When the input list is empty. - When the list contains only one string. - When the list contains strings with varying lengths and characters. The function should output the longest common prefix string. You should write self-contained code starting with: ``` class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word): node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def longest_common_prefix(self): node = self.root prefix = \\"\\" while len(node.children) == 1 and not node.is_end_of_word: char, next_node = list(node.children.items())[0] prefix += char node = next_node return prefix def task_func(strings): if not strings: raise ValueError(\\"Input list is empty.\\") if len(strings) == 1: return strings[0] trie = Trie() for string in strings: trie.insert(string) return trie.longest_common_prefix() ```","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word): node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def longest_common_prefix(self): node = self.root prefix = \\"\\" while len(node.children) == 1 and not node.is_end_of_word: char, next_node = list(node.children.items())[0] prefix += char node = next_node return prefix def task_func(strings): if not strings: return \\"\\" if len(strings) == 1: return strings[0] trie = Trie() for string in strings: trie.insert(string) return trie.longest_common_prefix()"},{"question":"You are implementing a library management system and need to create a function `check_book_availability(book_list, requested_book)` that checks if a requested book is available in the library. The book titles are case insensitive, and the library should also suggest possible matches if the exact book is not found. The specific requirements are as follows: 1. The function should take in two arguments: - `book_list`: A list of strings, each representing a book title available in the library. - `requested_book`: A string representing the book title being requested by the user. 2. The function should first normalize both `book_list` and `requested_book` to lowercase for case-insensitive comparison. 3. If the exact `requested_book` is found in `book_list`, return the message: \\"The book \'<requested_book>\' is available.\\" 4. If the exact `requested_book` is not found, check for partial matches. If any book titles in `book_list` contain the `requested_book` as a substring (case insensitive), return a list of suggested titles in the format: \\"The book \'<requested_book>\' is not available. Did you mean: <comma_separated_list_of_suggestions>?\\" 5. If there are no exact or partial matches, return the message: \\"The book \'<requested_book>\' is not available, and no similar titles were found.\\" You need to implement the `check_book_availability` function to satisfy all the requirements above. Ensure case insensitivity is handled correctly, and the suggestions are formatted appropriately.","solution":"def check_book_availability(book_list, requested_book): Checks if a requested book is available in the library and suggests possible matches if not found. :param book_list: List of book titles available in the library :param requested_book: The book title being requested :return: A message indicating the availability of the book or suggesting similar titles # Normalize the case for comparison normalized_books = [book.lower() for book in book_list] requested_book_lower = requested_book.lower() # Check for exact match if requested_book_lower in normalized_books: return f\\"The book \'{requested_book}\' is available.\\" # Check for partial matches partial_matches = [book for book in book_list if requested_book_lower in book.lower()] if partial_matches: suggestions = \\", \\".join(partial_matches) return f\\"The book \'{requested_book}\' is not available. Did you mean: {suggestions}?\\" else: return f\\"The book \'{requested_book}\' is not available, and no similar titles were found.\\""},{"question":"Implement a function to identify all palindromic substrings of input text and return them in a list. The function should raise the exception: ValueError: If the input text is not a string. The function should output with: list: A list containing all unique palindromic substrings. You should write self-contained code starting with: ``` def task_func(text): ```","solution":"def task_func(text): Identify all palindromic substrings of the input text and return them in a list. Raises: ValueError: If the input text is not a string. Returns: list: A list containing all unique palindromic substrings. if not isinstance(text, str): raise ValueError(\\"Input text must be a string\\") def is_palindrome(s): return s == s[::-1] palindromes = set() n = len(text) for i in range(n): for j in range(i + 1, n + 1): substring = text[i:j] if is_palindrome(substring): palindromes.add(substring) return list(palindromes)"},{"question":"Develop a Python program to read a CSV file containing sales data with columns \'Date\', \'Product\', \'Quantity\', and \'Price\'. The program should aggregate the data to compute the total sales (Quantity * Price) for each product by month. It should then plot a bar chart to visualize the monthly total sales for the top 5 products with the highest sales in the most recent month available in the data. If the CSV is empty, the function raises a ValueError. The function output should include both the aggregated DataFrame and the bar chart. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def sales_analysis(csv_path): ```","solution":"import pandas as pd import matplotlib.pyplot as plt import calendar def sales_analysis(csv_path): # Read the CSV file sales_data = pd.read_csv(csv_path) # Check if the DataFrame is empty if sales_data.empty: raise ValueError(\\"The CSV file is empty\\") # Ensure the \'Date\' column is in datetime format sales_data[\'Date\'] = pd.to_datetime(sales_data[\'Date\']) # Extract year and month from \'Date\' column sales_data[\'YearMonth\'] = sales_data[\'Date\'].dt.to_period(\'M\') # Compute total sales for each row sales_data[\'TotalSales\'] = sales_data[\'Quantity\'] * sales_data[\'Price\'] # Aggregate total sales by product and year-month aggregated_data = sales_data.groupby([\'Product\', \'YearMonth\'])[\'TotalSales\'].sum().reset_index() # Find the most recent month in the data most_recent_month = aggregated_data[\'YearMonth\'].max() # Get the top 5 products with the highest sales in the most recent month top_products = aggregated_data[aggregated_data[\'YearMonth\'] == most_recent_month] top_products = top_products.nlargest(5, \'TotalSales\')[\'Product\'] # Filter the data to include only the top 5 products filtered_data = aggregated_data[aggregated_data[\'Product\'].isin(top_products)] # Pivot the data to have products as columns and YearMonth as index pivot_data = filtered_data.pivot(index=\'YearMonth\', columns=\'Product\', values=\'TotalSales\').fillna(0) # Plot the bar chart pivot_data.plot(kind=\'bar\', figsize=(10, 6)) plt.title(\'Monthly Total Sales for Top 5 Products\') plt.ylabel(\'Total Sales\') plt.xlabel(\'Month\') plt.xticks(rotation=45) plt.legend(title=\'Products\') plt.tight_layout() plt.show() return aggregated_data, pivot_data"},{"question":"You need to create a Python function called `find_largest_block(grid)` that takes a 2D list of integers `grid` representing a grid of cells, each containing a 0 or 1. The function should return the size of the largest contiguous block of 1s. Contiguity is defined as horizontal or vertical adjacency (not diagonal). For example, given the following grid: ``` [ [1, 1, 0, 0], [1, 0, 1, 1], [0, 1, 1, 0], [1, 0, 0, 1] ] ``` The largest block of 1s is 4 (formed by the cells at (0,0), (0,1), (1,0), and (2,1)). # Constraints - The grid will have at least one element. - The grid dimensions can range from 1x1 to 100x100. # Example Input and Output ``` find_largest_block([ [1, 1, 0, 0], [1, 0, 1, 1], [0, 1, 1, 0], [1, 0, 0, 1] ]) ``` should return `4`. ``` find_largest_block([ [0, 0, 0], [0, 1, 0], [0, 0, 0] ]) ``` should return `1`. # Note You may implement the algorithm using Depth-First Search (DFS) or Breadth-First Search (BFS) to explore the grid and find connected components. # Libraries You may only use the standard Python libraries for this problem.","solution":"def find_largest_block(grid): def dfs(x, y): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == 0: return 0 grid[x][y] = 0 # Mark the cell as visited size = 1 size += dfs(x + 1, y) size += dfs(x - 1, y) size += dfs(x, y + 1) size += dfs(x, y - 1) return size max_size = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: max_size = max(max_size, dfs(i, j)) return max_size"},{"question":"Create a function that takes a string containing a mathematical expression (e.g., \\"3 + 5 * 2\\") and evaluates it, while allowing the user to define custom operators with their associated precedence and associativity. The function should parse the string, apply the provided custom operators, and return the result as a float. If no custom operators are specified, it should evaluate using standard arithmetic operators. The function should output with: Float: The result of the evaluated expression based on the provided operators. You should write self-contained code starting with: ``` import operator from collections import deque def evaluate_expression(expression, custom_operators=None): ```","solution":"import operator from collections import deque def evaluate_expression(expression, custom_operators=None): if custom_operators is None: custom_operators = { \'+\': {\'precedence\': 1, \'associativity\': \'L\', \'function\': operator.add}, \'-\': {\'precedence\': 1, \'associativity\': \'L\', \'function\': operator.sub}, \'*\': {\'precedence\': 2, \'associativity\': \'L\', \'function\': operator.mul}, \'/\': {\'precedence\': 2, \'associativity\': \'L\', \'function\': operator.truediv}, } def shunting_yard(expression, custom_operators): output_queue = deque() operator_stack = [] tokens = expression.split() for token in tokens: if token.isdigit(): output_queue.append(float(token)) elif token in custom_operators: while operator_stack and operator_stack[-1] in custom_operators: top_op = operator_stack[-1] top_prec = custom_operators[top_op][\'precedence\'] cur_prec = custom_operators[token][\'precedence\'] if ((custom_operators[token][\'associativity\'] == \'L\' and cur_prec <= top_prec) or (custom_operators[token][\'associativity\'] == \'R\' and cur_prec < top_prec)): output_queue.append(operator_stack.pop()) else: break operator_stack.append(token) elif token == \'(\': operator_stack.append(token) elif token == \')\': while operator_stack and operator_stack[-1] != \'(\': output_queue.append(operator_stack.pop()) operator_stack.pop() while operator_stack: output_queue.append(operator_stack.pop()) return output_queue def evaluate_rpn(rpn_queue, custom_operators): stack = [] while rpn_queue: token = rpn_queue.popleft() if isinstance(token, float): stack.append(token) elif token in custom_operators: b = stack.pop() a = stack.pop() result = custom_operators[token][\'function\'](a, b) stack.append(result) return stack[0] rpn_queue = shunting_yard(expression, custom_operators) return evaluate_rpn(rpn_queue, custom_operators)"},{"question":"A weather forecasting company has collected temperature data for a full year. Each entry in the dataset contains the date and the temperature recorded on that day. Your task is to identify the top 5 pairs of dates which had the smallest temperature difference between them. To achieve this, you can use the Python `itertools.combinations` function, which generates successive r-length combinations of elements from an iterable. Here\'s a sample data frame to illustrate the structure: ```plaintext | Date | Temperature | |------------|-------------| | 2023-01-01 | 5 | | 2023-01-02 | 6 | | 2023-01-03 | 7 | | 2023-01-04 | 10 | | 2023-01-05 | 15 | ``` In this data frame, the pairs: - `2023-01-01` and `2023-01-02` have a temperature difference of 1. - `2023-01-02` and `2023-01-03` have a temperature difference of 1. - `2023-01-03` and `2023-01-04` have a temperature difference of 3. **Function Specification:** You need to implement a function named `smallest_temp_diff` that takes a DataFrame as input and returns the five pairs of dates with the smallest temperature difference. The function should adhere to the following signature: ```python def smallest_temp_diff(df: pd.DataFrame) -> List[Tuple[str, str]]: ``` **Constraints:** 1. `itertools.combinations` must be used to generate 2-date combinations. 2. The input DataFrame will always have at least five dates. 3. Output the top 5 pairs of dates with the smallest temperature difference in ascending order of the difference. If fewer than 5 unique pairs exist, return all pairs sorted by temperature difference. **Example Usage:** Given the input DataFrame `df` as described: ```plaintext | Date | Temperature | |------------|-------------| | 2023-01-01 | 5 | | 2023-01-02 | 6 | | 2023-01-03 | 7 | | 2023-01-04 | 10 | | 2023-01-05 | 15 | ``` Calling `smallest_temp_diff(df)` should return: ```python [(‘2023-01-01’, ‘2023-01-02’), (‘2023-01-02’, ‘2023-01-03’), (‘2023-01-03’, ‘2023-01-04’), (‘2023-01-01’, ‘2023-01-03’), (‘2023-01-02’, ‘2023-01-04’)] ```","solution":"import pandas as pd from itertools import combinations from typing import List, Tuple def smallest_temp_diff(df: pd.DataFrame) -> List[Tuple[str, str]]: Given a dataframe with \'Date\' and \'Temperature\' columns, this function finds the top 5 pairs of dates with the smallest temperature difference. Parameters: - df: pandas DataFrame containing \'Date\' and \'Temperature\' columns Returns: - List[Tuple[str, str]]: list of tuples containing the pairs of dates with the smallest temperature difference # Convert Date column to string to ensure correct format df[\'Date\'] = df[\'Date\'].astype(str) # Generate all combinations of rows (pairs of dates) pairs = combinations(df.itertuples(index=False), 2) # Calculate the temperature difference for each pair diff_list = [ (abs(r1.Temperature - r2.Temperature), r1.Date, r2.Date) for r1, r2 in pairs ] # Sort the list by temperature difference and take the top 5 diff_list = sorted(diff_list)[:5] # Extract the pairs of dates from the sorted list result = [(date1, date2) for _, date1, date2 in diff_list] return result"},{"question":"You are required to write a function called `calculate_trip_cost(fuel_price, fuel_efficiency, distance, passengers)`. The function calculates the total cost of a road trip given the price of fuel per gallon, the fuel efficiency of the vehicle (miles per gallon), the distance of the trip in miles, and the number of passengers sharing the cost. The trip cost calculation should consider: 1. The total fuel cost for the entire trip. 2. The individual share of the cost for each passenger. The function should return a tuple containing two elements: - The total cost of the trip. - The cost per passenger. If the number of passengers is 0 or negative, the function should print \\"Invalid number of passengers\\" and return `None`. **Function Signature:** ```python def calculate_trip_cost(fuel_price: float, fuel_efficiency: float, distance: float, passengers: int) -> tuple: pass ``` **Example Inputs and Outputs:** 1. `calculate_trip_cost(3.50, 25.0, 300, 3)` should return `(42.0, 14.0)` 2. `calculate_trip_cost(4.00, 20.0, 500, 5)` should return `(100.0, 20.0)` 3. `calculate_trip_cost(3.75, 30.0, 120, 0)` should print \\"Invalid number of passengers\\" and return `None` 4. `calculate_trip_cost(2.80, 35.0, 280, 4)` should return `(22.4, 5.6)`","solution":"def calculate_trip_cost(fuel_price, fuel_efficiency, distance, passengers): Calculates the total and per passenger cost of a trip. :param fuel_price: Price of fuel per gallon. :param fuel_efficiency: Fuel efficiency of the vehicle in miles per gallon. :param distance: Distance of the trip in miles. :param passengers: Number of passengers sharing the cost. :return: A tuple containing total cost and per passenger cost if passengers > 0, otherwise None. if passengers <= 0: print(\\"Invalid number of passengers\\") return None total_fuel_needed = distance / fuel_efficiency total_cost = total_fuel_needed * fuel_price cost_per_passenger = total_cost / passengers return total_cost, cost_per_passenger"},{"question":"Create a function named `matrix_diagonal_sum` that takes one argument: 1. `matrix`: a 2-D square numpy array containing numerical values. The function should: - Compute the sum of the main diagonal elements. - Compute the sum of the anti-diagonal elements. - Return these two sums as a tuple. Example: ```python import numpy as np matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) main_diagonal_sum, anti_diagonal_sum = matrix_diagonal_sum(matrix) print(main_diagonal_sum) # Expected output: 15 (1 + 5 + 9) print(anti_diagonal_sum) # Expected output: 15 (3 + 5 + 7) ```","solution":"import numpy as np def matrix_diagonal_sum(matrix): Computes the sum of the main diagonal and the anti-diagonal of a square matrix. Parameters: matrix (numpy.ndarray): 2-D square numpy array containing numerical values. Returns: tuple: sum of the main diagonal elements, sum of the anti-diagonal elements. main_diagonal_sum = np.sum(np.diag(matrix)) anti_diagonal_sum = np.sum(np.diag(np.fliplr(matrix))) return (main_diagonal_sum, anti_diagonal_sum)"},{"question":"You are tasked with analyzing a file of computer system logs to identify and extract all recorded error messages. The logs are in plain text and follow a specific format where each log entry contains a timestamp, log level, and message. An example log file is provided below: ``` 2023-10-01 12:00:00,000 INFO Starting the system. 2023-10-01 12:00:05,123 ERROR Failed to connect to the database. 2023-10-01 12:00:10,456 WARN Low disk space. 2023-10-01 12:00:15,000 INFO User login successful. 2023-10-01 12:00:20,789 ERROR Timeout occurred during file upload. ``` You need to write a function named **`extract_error_messages`** that reads a file containing system logs and extracts all the error messages (log level \\"ERROR\\"). # Constraints: - The function should take the filename of the log file as an input parameter. - The function should return a list of all error messages extracted from the log file. - You are required to use standard I/O operations to read the file. # Example Usage: ```python error_messages = extract_error_messages(\\"system_logs.txt\\") print(error_messages) ``` # Expected output for the example log file: ```python [ \\"Failed to connect to the database.\\", \\"Timeout occurred during file upload.\\" ] ```","solution":"def extract_error_messages(filename): Reads a file containing system logs and extracts all the error messages. Parameters: filename (str): The name of the log file to read. Returns: List[str]: A list of error messages extracted from the log file. error_messages = [] with open(filename, \'r\') as file: for line in file: if \\"ERROR\\" in line: error_message = line.split(\\"ERROR\\", 1)[1].strip() error_messages.append(error_message) return error_messages"},{"question":"# Premise: Suppose you are tasked with developing a Python function that generates all possible substrings of a given string. Each substring must be unique and listed in lexicographical order (dictionary order). You are to implement this without using any built-in Python functions designed specifically for generating substrings or permutations. # Function Signature: ```python def generate_substrings(s: str) -> list: ``` # Inputs: - `s`: A string of lowercase alphabetic characters. (e.g., \\"abc\\") # Outputs: - Returns a list of strings where each string is a unique substring of `s`, sorted in lexicographical order. # Requirements: 1. Do not use any built-in Python functions specifically designed for generating substrings or permutations. 2. Ensure that the function avoids generating duplicate substrings. 3. Each substring in the output list must be unique and sorted in lexicographical order. # Example: ```python >>> generate_substrings(\\"abc\\") [\'a\', \'ab\', \'abc\', \'b\', \'bc\', \'c\'] ```","solution":"def generate_substrings(s: str) -> list: Generates all unique substrings of a given string `s` and returns them sorted in lexicographical order. substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return sorted(substrings)"},{"question":"You need to write a function `rotate_matrix` that rotates a given NxN 2D matrix 90 degrees clockwise. The function should perform the rotation in-place, meaning you cannot use additional data structures for storing intermediate results. Detailed Steps: 1. The function `rotate_matrix` will take one argument: - `matrix`: A list of lists, where each inner list represents a row of the NxN matrix. 2. The rotation should transpose the matrix and then reverse each row to achieve the 90-degree clockwise rotation. Requirements: - You **must** not use any external libraries. - You **must** perform the rotation in-place and not use additional arrays or lists. Here is the function signature: ```python def rotate_matrix(matrix: list) -> None: pass ``` Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) print(matrix) # Output should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ```","solution":"def rotate_matrix(matrix: list) -> None: Rotates the given NxN matrix 90 degrees clockwise in place. :param matrix: List of lists representing the NxN matrix. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"You are tasked with writing a Python function that processes and evaluates nested dictionary structures. Each dictionary contains keys that can map to integers, other dictionaries, or lists. Your function should traverse the entire nested structure to calculate the sum of all integers found within the dictionary, including those in nested dictionaries and lists. Your function should be named `sum_nested_integers`, and it should have the following signature: ```python def sum_nested_integers(nested_structure: dict) -> int: ``` # Example: Given the input dictionary ```python nested_structure = { \\"a\\": 5, \\"b\\": { \\"c\\": 10, \\"d\\": [1, 2, {\\"e\\": 3}] }, \\"f\\": 7, \\"g\\": [] } ``` your function should: 1. Traverse the dictionary and find all integer values. 2. Include integer values inside nested dictionaries and lists in the total sum. 3. Return the total sum of all integers. For the given example, the output should be: ```python total_sum = sum_nested_integers(nested_structure) print(total_sum) # Output should be 28 ``` Ensure to handle empty dictionaries and lists properly while calculating the sum.","solution":"def sum_nested_integers(nested_structure): Traverse a nested dictionary and compute the sum of all integers. def traverse(element): total = 0 if isinstance(element, int): return element elif isinstance(element, dict): for value in element.values(): total += traverse(value) elif isinstance(element, list): for item in element: total += traverse(item) return total return traverse(nested_structure)"},{"question":"**You are tasked with designing a library system for a simulation of borrowing and returning books. The objective of this problem is to create a function that processes borrow and return operations for a library, as well as keeps track of the availability of books. Write a class named `Library` with the following methods: 1. **__init__(self, initial_books: list)**: Initializes the library with a given list of books. Each book should be represented as a dictionary with the following keys: - \\"title\\": The title of the book (string). - \\"author\\": The author of the book (string). - \\"available\\": A boolean indicating if the book is available for borrowing (initially set to `True`). 2. **borrow_book(self, title: str) -> str**: Attempts to borrow a book with the given title. If the book is available, mark it as not available and return a success message. If the book is not available or does not exist, return an appropriate error message. 3. **return_book(self, title: str) -> str**: Attempts to return a book with the given title. If the book is found and is not currently available, mark it as available and return a success message. If the book does not exist or is already available, return an appropriate error message. 4. **book_status(self, title: str) -> str**: Checks the availability of the book with the given title and returns its status message. **Example Usage:** ```python library = Library([ {\\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"available\\": True}, {\\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\", \\"available\\": True}, {\\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"available\\": True} ]) print(library.borrow_book(\\"1984\\")) # Output: \\"You have successfully borrowed \'1984\'.\\" print(library.book_status(\\"1984\\")) # Output: \\"\'1984\' is currently not available.\\" print(library.return_book(\\"1984\\")) # Output: \\"You have successfully returned \'1984\'.\\" print(library.return_book(\\"The Catcher in the Rye\\")) # Output: \\"The book \'The Catcher in the Rye\' does not exist in the library.\\" print(library.book_status(\\"The Great Gatsby\\")) # Output: \\"\'The Great Gatsby\' is currently available.\\" print(library.borrow_book(\\"1984\\")) # Output: \\"You have successfully borrowed \'1984\'.\\" print(library.borrow_book(\\"1984\\")) # Output: \\"\'1984\' is currently not available.\\" ``` **Constraints:** - The library starts with an initial list of books. - Each book title in the library is unique. - Use appropriate string formatting for the messages. **Example list of books:** ```python initial_books = [ {\\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"available\\": True}, {\\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\", \\"available\\": True}, {\\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"available\\": True} ] ```","solution":"class Library: def __init__(self, initial_books): Initializes the library with a given list of books. Each book should be represented as a dictionary with keys \\"title\\", \\"author\\", and \\"available\\". self.books = {book[\\"title\\"]: book for book in initial_books} def borrow_book(self, title): Attempts to borrow a book with the given title. If the book is available, mark it as not available and return a success message. If the book is not available or does not exist, return an appropriate error message. if title in self.books: if self.books[title][\\"available\\"]: self.books[title][\\"available\\"] = False return f\\"You have successfully borrowed \'{title}\'.\\" else: return f\\"\'{title}\' is currently not available.\\" else: return f\\"The book \'{title}\' does not exist in the library.\\" def return_book(self, title): Attempts to return a book with the given title. If the book is found and is not currently available, mark it as available and return a success message. If the book does not exist or is already available, return an appropriate error message. if title in self.books: if not self.books[title][\\"available\\"]: self.books[title][\\"available\\"] = True return f\\"You have successfully returned \'{title}\'.\\" else: return f\\"\'{title}\' is already available in the library.\\" else: return f\\"The book \'{title}\' does not exist in the library.\\" def book_status(self, title): Checks the availability of the book with the given title and returns its status message. if title in self.books: if self.books[title][\\"available\\"]: return f\\"\'{title}\' is currently available.\\" else: return f\\"\'{title}\' is currently not available.\\" else: return f\\"The book \'{title}\' does not exist in the library.\\""},{"question":"You are required to implement a function named `textToMorse` that converts a given text string into its Morse code equivalent. Morse code is a method used in telecommunication to encode text characters as sequences of dots (`.`) and dashes (`-`). Each letter of the alphabet and each number is represented by a unique sequence of dots and dashes. # Function Specification **Function Name:** ```python textToMorse(text: str) -> str ``` **Parameters:** - `text`: A string containing the input text that needs to be converted to Morse code. Assume that the input may contain letters (both uppercase and lowercase) and numbers only. **Return:** - The function should return a string representing the Morse code equivalent of the input text, with each Morse code character separated by a space and each word separated by a slash (`/`). # Morse Code Mapping: ```python MORSE_CODE_DICT = {} ``` **Requirements and Constraints:** 1. Ensure the Morse code characters for each letter or number in the input string are correct as per the provided dictionary. 2. Convert all input letters to uppercase before conversion (Morse code is case insensitive). 3. Separate individual Morse code characters by spaces. 4. Separate words in the input text by slashes (`/`) in the Morse code output. 5. Ignore any characters that are not alphabets or digits. # Example Usage: ```python # Convert \\"Hello World\\" to Morse code textToMorse(\\"Hello World\\") # Should return \\".... . .-.. .-.. --- / .-- --- .-. .-.. -..\\" # Convert \\"Python 123\\" to Morse code textToMorse(\\"Python 123\\") # Should return \\".--. -.-- - .... --- -. / .---- ..--- ...--\\" # Convert \\"SOS\\" to Morse code textToMorse(\\"SOS\\") # Should return \\"... --- ...\\" ```","solution":"def textToMorse(text: str) -> str: MORSE_CODE_DICT = {} # Convert the text to uppercase text = text.upper() # Convert each character to Morse code morse_words = [] for word in text.split(): morse_characters = [] for char in word: if char in MORSE_CODE_DICT: morse_characters.append(MORSE_CODE_DICT[char]) morse_words.append(\\" \\".join(morse_characters)) # Join morse words with the slash morse_code = \\" / \\".join(morse_words) return morse_code"},{"question":"You are provided with a text file named `student_scores.txt` that contains the scores of students in different subjects. Each line in the text file represents the scores of a single student. The subjects included are Mathematics, Physics, Chemistry, and Biology. The scores are separated by spaces and appear in the order mentioned. For example, a line in the file may look like this: ``` 78 85 90 92 ``` The goal is to create a function named `analyze_student_scores` that reads the text file, processes the student scores, and returns a dictionary containing the following information: - Average score for each subject (average_math, average_physics, average_chemistry, average_biology). - Highest score and the corresponding subject (highest_score, highest_subject). - Lowest score and the corresponding subject (lowest_score, lowest_subject). **Function Signature:** ```python def analyze_student_scores(file_path: str) -> dict: ``` **Example:** If the `student_scores.txt` contains the following lines: ``` 78 85 90 92 88 79 85 91 95 89 92 88 70 92 88 75 ``` The function should return a dictionary like: ```python { \'average_math\': 82.75, \'average_physics\': 86.25, \'average_chemistry\': 88.75, \'average_biology\': 86.5, \'highest_score\': 95, \'highest_subject\': \'Mathematics\', \'lowest_score\': 70, \'lowest_subject\': \'Mathematics\', } ```","solution":"def analyze_student_scores(file_path: str) -> dict: import numpy as np # Define the subjects subjects = [\'Mathematics\', \'Physics\', \'Chemistry\', \'Biology\'] # Initialize lists to hold scores for each subject math_scores = [] physics_scores = [] chemistry_scores = [] biology_scores = [] # Read the file and gather scores with open(file_path, \'r\') as file: for line in file: scores = list(map(int, line.split())) math_scores.append(scores[0]) physics_scores.append(scores[1]) chemistry_scores.append(scores[2]) biology_scores.append(scores[3]) # Calculate average scores average_math = np.mean(math_scores) average_physics = np.mean(physics_scores) average_chemistry = np.mean(chemistry_scores) average_biology = np.mean(biology_scores) # Combine all scores to find highest and lowest all_scores = { \'Mathematics\': math_scores, \'Physics\': physics_scores, \'Chemistry\': chemistry_scores, \'Biology\': biology_scores } highest_score = float(\'-inf\') highest_subject = \'\' lowest_score = float(\'inf\') lowest_subject = \'\' for subject, scores in all_scores.items(): subject_max = max(scores) subject_min = min(scores) if subject_max > highest_score: highest_score = subject_max highest_subject = subject if subject_min < lowest_score: lowest_score = subject_min lowest_subject = subject return { \'average_math\': average_math, \'average_physics\': average_physics, \'average_chemistry\': average_chemistry, \'average_biology\': average_biology, \'highest_score\': highest_score, \'highest_subject\': highest_subject, \'lowest_score\': lowest_score, \'lowest_subject\': lowest_subject }"},{"question":"You are required to create a function that simulates a simple book catalog system. The function will interact with a list of book titles and authors to perform various operations such as adding, removing, and searching for books. The function should: 1. Accept a command string and an optional tuple containing the book title and author. 2. Perform the following operations based on the command: - \\"add\\": Add a new book to the catalog. - \\"remove\\": Remove a book from the catalog. - \\"search\\": Search for books by a given author and return a list of their titles. Each book is represented as a dictionary with keys \\"title\\" and \\"author\\". The catalog itself is a list of such dictionaries. **Function Signature:** ```python def book_catalog(command, book=None): pass ``` **Example Usage:** ```python # Initialize the catalog list catalog = [] # Add books to the catalog book_catalog(\\"add\\", (\\"The Catcher in the Rye\\", \\"J.D. Salinger\\")) book_catalog(\\"add\\", (\\"To Kill a Mockingbird\\", \\"Harper Lee\\")) # Search for books by an author print(book_catalog(\\"search\\", (\\"Harper Lee\\",))) # Output: [\\"To Kill a Mockingbird\\"] # Remove a book from the catalog book_catalog(\\"remove\\", (\\"To Kill a Mockingbird\\", \\"Harper Lee\\")) # Verify removal print(book_catalog(\\"search\\", (\\"Harper Lee\\",))) # Output: [] ``` **Hints:** - Use a global list or an external list passed to the function to keep track of the catalog. - Perform checks for the existence of books when adding or removing to avoid duplicates or errors. - Implement the search functionality to match the author\'s name exactly as given in the input.","solution":"catalog = [] def book_catalog(command, book=None): if command == \\"add\\" and book: # Add the book to the catalog if it doesn\'t already exist if not any(b[\'title\'] == book[0] and b[\'author\'] == book[1] for b in catalog): catalog.append({\'title\': book[0], \'author\': book[1]}) elif command == \\"remove\\" and book: # Remove the book from the catalog if it exists catalog[:] = [b for b in catalog if not (b[\'title\'] == book[0] and b[\'author\'] == book[1])] elif command == \\"search\\" and book: # Search for books by the author return [b[\'title\'] for b in catalog if b[\'author\'] == book[0]] return None"},{"question":"You are required to write a function related to date and time operations using the `datetime` library in Python. Specifically, you need to create a function `business_days_between(start_date, end_date)` that calculates the number of business days between two given dates, excluding weekends. Here is what your function should do: 1. Parse the `start_date` and `end_date` strings into `datetime` objects. 2. Iterate over each date in the range and count only the weekdays (Monday through Friday). # Function Signature ```python def business_days_between(start_date: str, end_date: str) -> int: pass ``` # Input - `start_date`: A string representing the start date in the format `YYYY-MM-DD`. - `end_date`: A string representing the end date in the format `YYYY-MM-DD`. # Output - An integer representing the number of business days (Monday to Friday) between the start and end dates, inclusive. # Example ```python assert business_days_between(\\"2023-10-01\\", \\"2023-10-10\\") == 6 assert business_days_between(\\"2023-10-05\\", \\"2023-10-07\\") == 3 ``` # Requirements - Ensure that the date parsing is done correctly using the `datetime` library. - Handle edge cases such as the end date being before the start date, or both dates being the same. # Constraints - The `start_date` and `end_date` are valid dates in the format `YYYY-MM-DD`. - The `start_date` is not after the `end_date`. This function will be useful in scenarios where calculations related to workdays are required, such as project management and payroll systems.","solution":"from datetime import datetime, timedelta def business_days_between(start_date: str, end_date: str) -> int: Returns the number of business days between two dates. Parameters: - start_date: A string representing the start date in the format \\"YYYY-MM-DD\\". - end_date: A string representing the end date in the format \\"YYYY-MM-DD\\". Returns: - An integer representing the number of business days between the start and end dates, inclusive. start = datetime.strptime(start_date, \\"%Y-%m-%d\\") end = datetime.strptime(end_date, \\"%Y-%m-%d\\") if start > end: return 0 business_days_count = 0 current_date = start while current_date <= end: if current_date.weekday() < 5: # Monday to Friday are 0-4 business_days_count += 1 current_date += timedelta(days=1) return business_days_count"},{"question":"# Daily Temperature Analysis You are tasked with writing a function that processes temperature data to generate insights about daily temperature variations over a specified period of time. The function will read data from a CSV file, analyze the temperature variations for each day, and return a summary as a Pandas DataFrame. To achieve this, you need to perform the following steps in your function: 1. **Function Name:** `analyze_temperature_variation` 2. **Function Parameters:** - `file_path` (str): The path to the CSV file containing temperature data. The file includes columns: `date` (in YYYY-MM-DD format) and `temperature` (in degrees Celsius). 3. **Function Returns:** - A Pandas DataFrame containing the summary of daily temperature variations, which includes the columns: `date`, `min_temp`, `max_temp`, `avg_temp`, and `temp_range`. # Example Usage: ```python >>> df_summary = analyze_temperature_variation(\'temperature_data.csv\') >>> print(df_summary) ``` # Additional Requirements: - Use the `pandas` library to read the CSV file and perform data analysis. - Ensure the function validates the input filepath using appropriate error handling. - The DataFrame should be grouped by `date` to calculate the minimum temperature (`min_temp`), maximum temperature (`max_temp`), average temperature (`avg_temp`), and temperature range (`temp_range`) for each day. - Ensure the function handles missing or NaN values gracefully and raises an appropriate error if the data is incomplete. - The returned DataFrame should be sorted by `date`. # Important Notes: - You must use `pandas.DataFrame` to construct the tabular data structure as per the requirement described. - The output should provide a clear and concise summary of the daily temperature variations.","solution":"import pandas as pd def analyze_temperature_variation(file_path): Processes temperature data from a CSV file to generate insights about daily temperature variations. Parameters: file_path (str): The path to the CSV file containing temperature data. Returns: pd.DataFrame: A dataframe containing the summary of daily temperature variations. try: # Read the CSV file temperature_data = pd.read_csv(file_path) # Check for required columns if \'date\' not in temperature_data.columns or \'temperature\' not in temperature_data.columns: raise ValueError(\\"The CSV file does not contain required columns: \'date\' and \'temperature\'\\") # Handle missing or NaN values if temperature_data.isnull().values.any(): raise ValueError(\\"The CSV file contains missing or NaN values.\\") # Convert \'date\' column to datetime temperature_data[\'date\'] = pd.to_datetime(temperature_data[\'date\']) # Group by date and calculate the required metrics grouped = temperature_data.groupby(\'date\').agg( min_temp=(\'temperature\', \'min\'), max_temp=(\'temperature\', \'max\'), avg_temp=(\'temperature\', \'mean\') ) # Calculate the temperature range grouped[\'temp_range\'] = grouped[\'max_temp\'] - grouped[\'min_temp\'] # Reset index to convert grouped DataFrame back to a regular DataFrame summary_df = grouped.reset_index() # Sort by date summary_df = summary_df.sort_values(\'date\') return summary_df except FileNotFoundError: raise FileNotFoundError(\\"The specified file was not found.\\") except pd.errors.EmptyDataError: raise ValueError(\\"The CSV file is empty.\\") except Exception as e: raise e"},{"question":"You are tasked with writing a function called `merge_and_sort_dicts` in Python that takes a list of dictionaries and returns a single dictionary. The keys of the resulting dictionary should be unique, and their corresponding values should be lists of values from the input dictionaries that had the same keys. The final dictionary should be sorted by its keys in ascending order. The function should maintain the order of values as they appear in the input dictionaries. **Function Signature:** ```python def merge_and_sort_dicts(dict_list: list[dict]) -> dict: pass ``` **Arguments:** - `dict_list` (list[dict]): A list of dictionaries to merge and sort. **Returns:** - `dict`: A single dictionary with unique keys, where each key maps to a list of values aggregated from the input dictionaries, sorted by the keys in ascending order. **Requirements:** 1. Merge dictionaries such that each key is associated with a list of all values from input dictionaries with that key. 2. Sort the final dictionary by its keys in ascending order. Below is an example of how your function might be used: **Example Usage:** ```python dict_list = [ {\\"a\\": 1, \\"b\\": 2, \\"c\\": 3}, {\\"b\\": 3, \\"c\\": 4, \\"d\\": 5}, {\\"a\\": 6, \\"d\\": 7, \\"e\\": 8} ] result = merge_and_sort_dicts(dict_list) # Example result would be like: {\'a\': [1, 6], \'b\': [2, 3], \'c\': [3, 4], \'d\': [5, 7], \'e\': [8]} print(result) ```","solution":"def merge_and_sort_dicts(dict_list): Merges a list of dictionaries into a single dictionary with unique keys. The values in the resulting dictionary are lists of values from the input dictionaries. The result is sorted by its keys in ascending order. Args: dict_list (list of dict): A list of dictionaries to merge and sort. Returns: dict: A single dictionary with lists of values aggregated from the input dictionaries, sorted by the keys in ascending order. result = {} # Merge dictionaries for dictionary in dict_list: for key, value in dictionary.items(): if key not in result: result[key] = [] result[key].append(value) # Sort the dictionary by keys sorted_result = dict(sorted(result.items())) return sorted_result"},{"question":"Create a Python function that generates a DataFrame with two columns of random integer data and a given number of rows. Then, plot a histogram for each column using matplotlib. Ensure that the DataFrame is not empty and has at least two columns. If these conditions are not met, raise a ValueError. The function should return: - A tuple containing: 1. DataFrame: The pandas DataFrame generated. 2. Figure: The matplotlib Figure object containing the histograms. You should write self-contained code starting with: ```python import pandas as pd import numpy as np import matplotlib.pyplot as plt def generate_histogram(rows): if rows < 1: raise ValueError(\\"The DataFrame must not be empty and should have at least two columns\\") data = { \'Column1\': np.random.randint(1, 100, size=rows), \'Column2\': np.random.randint(1, 100, size=rows) } df = pd.DataFrame(data) fig, axes = plt.subplots(1, 2, figsize=(12, 6)) axes[0].hist(df[\'Column1\'], bins=10, color=\'blue\', edgecolor=\'black\') axes[0].set_title(\'Histogram of Column 1\') axes[1].hist(df[\'Column2\'], bins=10, color=\'green\', edgecolor=\'black\') axes[1].set_title(\'Histogram of Column 2\') plt.tight_layout() plt.show() return df, fig ```","solution":"import pandas as pd import numpy as np import matplotlib.pyplot as plt def generate_histogram(rows): if rows < 1: raise ValueError(\\"The DataFrame must not be empty and should have at least two columns\\") data = { \'Column1\': np.random.randint(1, 100, size=rows), \'Column2\': np.random.randint(1, 100, size=rows) } df = pd.DataFrame(data) fig, axes = plt.subplots(1, 2, figsize=(12, 6)) axes[0].hist(df[\'Column1\'], bins=10, color=\'blue\', edgecolor=\'black\') axes[0].set_title(\'Histogram of Column 1\') axes[1].hist(df[\'Column2\'], bins=10, color=\'green\', edgecolor=\'black\') axes[1].set_title(\'Histogram of Column 2\') plt.tight_layout() return df, fig"},{"question":"In this problem, you will write a function called `pascal_triangle` that generates the first `n` rows of Pascal’s triangle. Pascal’s triangle is a triangular array of the binomial coefficients. The entries in each row are the coefficients of the binomial expansion of ((x + y)^n), and each number is the sum of the two directly above it. # Function Requirements: 1. **Function Name:** `pascal_triangle` 2. **Parameters:** - `n`: The number of rows to generate. 3. **Returns:** A list of lists, where each inner list represents a row in Pascal’s triangle up to the `n`-th row (inclusive, with the first row being the 0th row `[1]`). # Example Usage: ```python result = pascal_triangle(5) print(result) # Expected output: # [ # [1], # [1, 1], # [1, 2, 1], # [1, 3, 3, 1], # [1, 4, 6, 4, 1], # [1, 5, 10, 10, 5, 1] # ] ``` # Constraints and Assumptions: 1. Assume `n` is a non-negative integer. 2. You do not need to handle input validation. 3. The function should correctly compute the binomial coefficients using an iterative approach to build each row based on the previous one. 4. The function should handle edge cases where `n` is 0 (returning `[[1]]`). Your task is to implement the `pascal_triangle` function that follows these requirements.","solution":"def pascal_triangle(n): Generates the first n rows of Pascal\'s triangle. Args: n (int): The number of rows to generate. Returns: List[List[int]]: A list of lists, where each inner list represents a row in Pascal’s triangle. if n == 0: return [[1]] triangle = [[1]] for i in range(1, n + 1): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"You are given a function `find_missing_number` that finds the single missing number in an array of unique integers ranging from 0 to n, where exactly one number is missing. The provided function utilizes a mathematical approach leveraging the sum of a series. Your task is to implement and optimize a function named `find_two_missing_numbers` to find the two missing numbers in a given array of unique integers. The integers range from 0 to ( n ) inclusive, with exactly two numbers missing. Your solution should be efficient and make use of the mathematical properties including the sum and the sum of squares of the first ( n ) natural numbers. The function signature should be: ```python def find_two_missing_numbers(nums: list[int]) -> list[int]: ``` # Example: ```python nums = [0, 1, 3, 4, 5, 6] print(find_two_missing_numbers(nums)) # Output: [2, 7] nums = [1, 2, 4, 5] print(find_two_missing_numbers(nums)) # Output: [0, 3] ``` # Constraints: 1. The length of the array `nums` is ( n - 1 ) where ( n ) is the maximum number in the range which includes the two missing numbers. 2. All elements in the array are unique and are between 0 and ( n ) inclusive.","solution":"def find_two_missing_numbers(nums: list[int]) -> list[int]: n = len(nums) + 2 # since two numbers are missing total_sum = n * (n - 1) // 2 total_sum_squares = (n * (n - 1) * (2 * n - 1)) // 6 actual_sum = sum(nums) actual_sum_squares = sum(x * x for x in nums) sum_diff = total_sum - actual_sum sum_squares_diff = total_sum_squares - actual_sum_squares sum_two_missing = sum_diff sum_two_missing_squares = sum_squares_diff # We have two equations: # x + y = sum_two_missing # x^2 + y^2 = sum_two_missing_squares # Using the identity (x + y)^2 = x^2 + y^2 + 2xy we get: # sum_two_missing^2 = sum_two_missing_squares + 2xy # => 2xy = sum_two_missing^2 - sum_two_missing_squares # => xy = (sum_two_missing^2 - sum_two_missing_squares) / 2 product_two_missing = (sum_two_missing * sum_two_missing - sum_two_missing_squares) // 2 # x and y are the roots of the quadratic equation: # t^2 - sum_two_missing * t + product_two_missing = 0 # we can solve for t using the quadratic formula a = 1 b = -sum_two_missing c = product_two_missing discriminant = b * b - 4 * a * c x = (-b + discriminant**0.5) / (2 * a) y = (-b - discriminant**0.5) / (2 * a) return [int(x), int(y)]"},{"question":"You are required to develop a function that normalizes a list of scores by applying the Min-Max normalization. The function will take three arguments: `scores`, `new_min`, and `new_max`. Here is the detailed requirement: 1. **Function Name**: `normalize_scores` 2. **Arguments**: - `scores`: A list of numerical scores (e.g., student grades). - `new_min`: The new minimum value of the normalized scores. - `new_max`: The new maximum value of the normalized scores. 3. **Returns**: - If the length of `scores` is less than 2, return an empty list. - Otherwise, return a list of normalized scores such that the minimum score in `scores` maps to `new_min` and the maximum score maps to `new_max`. To solve this problem, you will need to use basic arithmetic operations to transform the `scores` list based on the Min-Max normalization formula. Your task is to implement the `normalize_scores` function based on the provided specifications. Min-Max normalization formula is given by: [ text{normalized_value} = frac{( text{score} - text{min_score} )} {( text{max_score} - text{min_score} )} times ( text{new_max} - text{new_min} ) + text{new_min} ]","solution":"def normalize_scores(scores, new_min, new_max): Normalizes a list of scores using Min-Max normalization. Parameters: scores (list of float): A list of scores to be normalized. new_min (float): The new minimum value of the normalized scores. new_max (float): The new maximum value of the normalized scores. Returns: list of float: A list of normalized scores. if len(scores) < 2: return [] min_score = min(scores) max_score = max(scores) if min_score == max_score: return [new_min] * len(scores) normalized_scores = [ ((score - min_score) / (max_score - min_score)) * (new_max - new_min) + new_min for score in scores ] return normalized_scores"},{"question":"**In this problem, you will implement a function named `process_integers` which takes as input a list of integers `int_list` and a sequence of operations (`operations`) that will be applied on the list. The operations may include filtering, mapping, and reducing the integers using specified conditions or functions. The input list `int_list` is a list of integers, and the operations are given in a list of tuples, where each tuple specifies the type of operation and relevant parameters. The available operations and their formats are as follows: 1. `Filter`: Filter the elements based on a condition. Format: `(\'Filter\', Condition)` - `Condition`: A lambda function that takes an integer and returns True or False 2. `Map`: Map the elements using a specified function. Format: `(\'Map\', Function)` - `Function`: A lambda function that takes an integer and returns another integer 3. `Reduce`: Reduce the elements to a single value using a binary function. Format: `(\'Reduce\', BinaryFunction, InitialValue)` - `BinaryFunction`: A lambda function that takes two integers and returns one integer - `InitialValue`: An integer which serves as the initial value for the reduction Implement the function `process_integers` to perform these operations in the given sequence on the input list `int_list`. ```python def process_integers(int_list, operations): for operation in operations: if operation[0] == \'Filter\': condition = operation[1] int_list = list(filter(condition, int_list)) elif operation[0] == \'Map\': func = operation[1] int_list = list(map(func, int_list)) elif operation[0] == \'Reduce\': binary_function, initial_value = operation[1], operation[2] int_list = [reduce(binary_function, int_list, initial_value)] return int_list ``` Note: You might need to import the `reduce` function from the `functools` module to use it. ```python from functools import reduce ``` Examples: 1. `process_integers([1, 2, 3, 4, 5], [(\'Filter\', lambda x: x % 2 == 0), (\'Map\', lambda x: x * 2)])` should return `[4, 8]`. 2. `process_integers([1, 2, 3, 4, 5], [(\'Reduce\', lambda x, y: x + y, 0)])` should return `[15]`. ```","solution":"from functools import reduce def process_integers(int_list, operations): for operation in operations: if operation[0] == \'Filter\': condition = operation[1] int_list = list(filter(condition, int_list)) elif operation[0] == \'Map\': func = operation[1] int_list = list(map(func, int_list)) elif operation[0] == \'Reduce\': binary_function, initial_value = operation[1], operation[2] int_list = [reduce(binary_function, int_list, initial_value)] return int_list"},{"question":"Write a Python function named `most_common_char` that finds the most common character in a given string, ignoring case. If there is a tie, return the character that appears first in the string (considering the first occurrence of the characters tying in frequency). You are required to perform the following steps: 1. Convert the string to lowercase to ignore character case. 2. Utilize a dictionary to keep track of the frequency of each character. 3. Iterate through the string to populate the frequency dictionary. 4. Determine the character with the highest frequency. 5. Handle any ties by selecting the character that appears first in the original string. # Function Signature ```python def most_common_char(s): \'\'\' Find the most common character in the given string `s`, ignoring case. In case of a tie, return the character that appears first in the string. Parameters: s : str : Input string Returns: char : str : The most common character \'\'\' # Your implementation here ``` # Example ```python >>> most_common_char(\\"Programming\\") \'g\' >>> most_common_char(\\"ababc\\") \'a\' >>> most_common_char(\\"Hello World!\\") \'l\' ``` # Note: - Uppercase and lowercase letters should be considered the same. - Special characters and spaces should be ignored in the frequency count. # Constraints: - The input string will only contain ASCII characters.","solution":"def most_common_char(s): Find the most common character in the given string `s`, ignoring case. In case of a tie, return the character that appears first in the string. Parameters: s : str : Input string Returns: char : str : The most common character from collections import Counter # Convert string to lowercase s = s.lower() # Filter out non-alphabetic characters s_filtered = \'\'.join(filter(str.isalpha, s)) # Count the frequency of each character frequency = Counter(s_filtered) if not frequency: return \'\' # Return an empty string if there are no alphabetic characters # Find the character with the highest frequency, breaking ties by the character\'s first appearance most_common = s_filtered[0] for char in s_filtered: if frequency[char] > frequency[most_common]: most_common = char elif frequency[char] == frequency[most_common]: if s_filtered.index(char) < s_filtered.index(most_common): most_common = char return most_common"},{"question":"You are required to write a function named `mask_generator` that generates masks for a given batch of images, where the masks highlight the regions of interest based on an intensity threshold. The function should return masks for each image in the batch separately. Use NumPy for array manipulations and assume the images are represented as 2D arrays. Each mask will have the same shape as the original image, with pixel values set to 1 where the corresponding pixel in the image is above the intensity threshold, and 0 otherwise. Function Signature ```python def mask_generator(images, intensity_threshold): Parameters: images (np.ndarray): A 3-dimensional matrix representing the batch of grayscale images, with shape (batch_size, height, width). intensity_threshold (float): The intensity threshold to generate masks. Returns: np.ndarray: A 3-dimensional matrix of binary masks with the same shape as the input images. ``` # Example Usage ```python import numpy as np # Example batch of images images = np.array([[[0.6, 0.4, 0.8], [0.3, 0.7, 0.2]], [[0.1, 0.5, 0.6], [0.7, 0.8, 0.3]]]) # Intensity threshold intensity_threshold = 0.5 # Generating masks masks = mask_generator(images, intensity_threshold) print(masks) # Expected output: # [[[1, 0, 1], # [0, 1, 0]], # [[0, 0, 1], # [1, 1, 0]]] ``` # Requirements - **Ensure the function handles a batch of images, not just a single image.** - The function should be optimized to process arrays efficiently using NumPy operations. - The resulting masks must have binary values (0 or 1) based on the intensity threshold.","solution":"import numpy as np def mask_generator(images, intensity_threshold): Generates binary masks for a given batch of images based on an intensity threshold. Parameters: images (np.ndarray): A 3-dimensional matrix representing the batch of grayscale images, with shape (batch_size, height, width). intensity_threshold (float): The intensity threshold to generate masks. Returns: np.ndarray: A 3-dimensional matrix of binary masks with the same shape as the input images. masks = (images > intensity_threshold).astype(int) return masks"},{"question":"You are tasked with implementing a function to calculate the longest zigzag subsequence within a given list of integers. A zigzag subsequence is one where the differences between successive numbers strictly alternate between positive and negative. Your function should be named `longest_zigzag`, and it should take a single parameter: - `sequence`: a list of integers representing the initial sequence. Your function should return an integer, representing the length of the longest zigzag subsequence. Here is a sample implementation plan to guide your function: 1. Initialize two lists, `up` and `down`, each with the same length as `sequence` and filled with ones, indicating that the minimal zigzag subsequence starting at each point is at least the element itself. 2. Traverse the `sequence` from the second element to the end. 3. For each element in the sequence, check with all preceding elements to update `up` and `down`: - If the current element is greater than a preceding element, update the `up` list. - If the current element is smaller, update the `down` list. 4. The value at each index will represent the length of the longest zigzag subsequence ending at that point, considering the established conditions. 5. Return the maximum value from the `up` and `down` lists. Make sure to optimize your function for efficiency and correctness. ```python def longest_zigzag(sequence): # Your implementation here ``` Example: ```python sequence = [1, 7, 4, 9, 2, 5] result = longest_zigzag(sequence) print(result) # Expected output: 6 sequence = [1, 4, 7, 2, 5, 6] result = longest_zigzag(sequence) print(result) # Expected output: 4 ``` When implementing, ensure you handle edge cases such as empty sequences or sequences with all identical elements.","solution":"def longest_zigzag(sequence): if not sequence: return 0 n = len(sequence) if n == 1: return 1 up = [1] * n down = [1] * n for i in range(1, n): for j in range(0, i): if sequence[i] > sequence[j]: up[i] = max(up[i], down[j] + 1) elif sequence[i] < sequence[j]: down[i] = max(down[i], up[j] + 1) return max(max(up), max(down))"},{"question":"You have been given an exercise to practice working with strings and dictionaries in Python. Your goal is to write a function named `frequency_counter` that counts the frequency of each character in a given string and returns a dictionary with characters as keys and their frequencies as values. **Function Signature:** ```python def frequency_counter(input_string: str) -> dict: ``` **Parameters:** - `input_string` (str): The string for which you want to count character frequencies. **Returns:** - A dictionary (dict) where keys are characters, and values are their frequency count. The function should: 1. Iterate through each character in the input string. 2. Maintain a dictionary to keep track of the frequency of each character. 3. Return the dictionary containing character frequencies. **Example:** ```python output = frequency_counter(\\"example\\") print(output) # Expected output: {\'e\': 2, \'x\': 1, \'a\': 1, \'m\': 1, \'p\': 1, \'l\': 1} ```","solution":"def frequency_counter(input_string: str) -> dict: Counts the frequency of each character in a given string and returns a dictionary with characters as keys and their frequencies as values. Parameters: input_string (str): The string for which you want to count character frequencies. Returns: dict: A dictionary where keys are characters, and values are their frequency count. frequency = {} for char in input_string: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Implement a function that takes a list of integers and returns a dictionary where the keys are the unique integers from the list, and the values are the square of those integers. The function should also return the average of these squared values. The function should output: tuple: A tuple containing the dictionary of squared values and the average of those squared values. You should write self-contained code starting with: ``` def square_and_average(int_list): ```","solution":"def square_and_average(int_list): Takes a list of integers and returns a tuple containing a dictionary where the keys are the unique integers from the list, and the values are the squares of those integers, along with the average of these squared values. if not int_list: return {}, 0 squared_dict = {x: x**2 for x in set(int_list)} average = sum(squared_dict.values()) / len(squared_dict) return squared_dict, average"},{"question":"You are required to write a function named `level_order_traversal` that performs a level-order traversal on a binary tree. The level-order traversal visits all the nodes of the binary tree level by level, starting from the root. You will implement the function `level_order_traversal` which takes in the root of the binary tree and returns a list of lists, where each inner list contains the values of the nodes at that level. Each node in the binary tree has the following structure: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` The `level_order_traversal` function should: 1. Initialize an empty list `result` to store the final level order traversal. 2. Initialize a queue and add the root to it. 3. While the queue is not empty: - Initialize an empty list `current_level` to store nodes of the current level. - Get the number of nodes at the current level. - For each node at the current level: - Dequeue the node. - Append the node\'s value to the `current_level` list. - Enqueue the node\'s left and right children (if they exist). - Append the `current_level` list to the `result` list. 4. Return the `result` list. Here is a formal outline of the `level_order_traversal` function: ```python def level_order_traversal(root: TreeNode): # Your implementation here ``` Example: Given the following binary tree, ``` 3 / 9 20 / 15 7 ``` The function should return: ``` [[3], [9, 20], [15, 7]] ```","solution":"from collections import deque from typing import Optional, List class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_traversal(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] result = [] queue = deque([root]) while queue: current_level = [] level_size = len(queue) for _ in range(level_size): node = queue.popleft() current_level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(current_level) return result"},{"question":"Create a function to calculate the harmonic mean of a list of numbers. Use the harmonic mean formula: ( H = frac{n}{sum_{i=1}^{n} frac{1}{x_i}} ) where (x_i) are the individual numbers in the list. Handle the edge cases where the list might be empty or contain a zero. The function should output with: float: The harmonic mean of the given list of numbers. You should write self-contained code starting with: ``` def harmonic_mean(numbers): ```","solution":"def harmonic_mean(numbers): Calculate the harmonic mean of a list of numbers. :param numbers: List of numbers. :return: Harmonic mean of the list of numbers or 0 if list is empty or contains a zero. if not numbers or any(n == 0 for n in numbers): return 0 n = len(numbers) harmonic_mean_value = n / sum(1 / x for x in numbers) return harmonic_mean_value"},{"question":"Write a Python function named `transpose_and_flatten` that takes a list of dictionaries representing matrices and returns a transposed and flattened list of lists. Each dictionary in the input list contains two keys: \'rows\' and \'values\'. \'rows\' is an integer representing the number of rows in the matrix, and \'values\' is a list of lists representing the matrix values. The function should: 1. Transpose each matrix. 2. Flatten the transposed matrix into a single list while preserving the order of elements. 3. Return a list of these flattened matrices for each input matrix. To correctly transpose and flatten the data, you must use list comprehensions and the `zip` function. The function signature should be: ```python def transpose_and_flatten(matrices: List[Dict[str, Union[int, List[List[int]]]]]) -> List[List[int]]: ``` For example: ```python matrices = [ {\\"rows\\": 2, \\"values\\": [[1, 2, 3], [4, 5, 6]]}, {\\"rows\\": 3, \\"values\\": [[7, 8], [9, 10], [11, 12]]} ] The output should be: [ [1, 4, 2, 5, 3, 6], [7, 9, 11, 8, 10, 12] ] ```","solution":"from typing import List, Dict, Union def transpose_and_flatten(matrices: List[Dict[str, Union[int, List[List[int]]]]]) -> List[List[int]]: result = [] for matrix in matrices: rows = matrix[\'rows\'] values = matrix[\'values\'] transposed = list(map(list, zip(*values))) flattened = [item for sublist in transposed for item in sublist] result.append(flattened) return result"},{"question":"Implement a function `intersection_of_intervals(intervals1, intervals2)` that finds the intersection of two lists of intervals. Each interval is represented as a two-element list [start, end], where inclusive `start` and exclusive `end` define the interval. Two intervals intersect if they share any common points. The intersection of two intervals is the maximal interval covered by both intervals. * The input to the function is: - `intervals1`: A list of intervals where each interval is represented as [start, end]. - `intervals2`: Another list of intervals where each interval is represented as [start, end]. * The output of the function should be: - `intersection`: A list of intervals representing the intersection of intervals from `intervals1` and `intervals2`. This function should follow these guidelines: - An interval [start, end] has `start` less than `end`. - The resulting list of intervals should be merged and sorted. - If there are no intersections, the function should return an empty list. **For example:** ```python intervals1 = [[1, 3], [5, 6]] intervals2 = [[2, 7]] print(intersection_of_intervals(intervals1, intervals2)) # Output: [[2, 3], [5, 6]] ``` You may use the following helper functions from Python: - `sorted` - `max` - `min` Additionally, ensure to handle edge cases such as empty lists and non-overlapping intervals.","solution":"def intersection_of_intervals(intervals1, intervals2): Finds the intersection of two lists of intervals. Returns a list of intersecting intervals. i, j = 0, 0 intersections = [] while i < len(intervals1) and j < len(intervals2): start1, end1 = intervals1[i] start2, end2 = intervals2[j] # Calculate the intersection interval start_intersect = max(start1, start2) end_intersect = min(end1, end2) # If there is an intersection if start_intersect < end_intersect: intersections.append([start_intersect, end_intersect]) # Move the pointer for the interval with the smallest end point if end1 < end2: i += 1 else: j += 1 return intersections"},{"question":"Write a Python function named `plot_circle_within_square` that uses the `matplotlib` library to create a graphical representation of a circle inscribed within a square, both centered at the origin. The function should take an optional `radius` parameter that specifies the radius of the circle (and half the side length of the square). By default, the `radius` parameter should be set to 1. The `matplotlib.pyplot.xlim` and `matplotlib.pyplot.ylim` functions must be used to set the x and y axis limits for the plot. Your function should: 1. Create a plot with x and y limits set to ([-radius, radius]). 2. Draw the inscribed circle within a square that ranges from ([-radius, -radius]) to ([radius, radius]). Input: - An optional parameter `radius` (default value is 1), which is a float or an integer that dictates the radius of the circle and half the side length of the square. Output: - The function does not return any output but displays the plot of the inscribed circle and the square. Below are a few examples to illustrate the expected behavior: Example 1: ```python plot_circle_within_square() ``` This should display a plot with x and y limits ranging from ([-1, 1]) and a square from ([-1, -1]) to ([1, 1]) with an inscribed circle of radius 1. Example 2: ```python plot_circle_within_square(radius=2) ``` This should display a plot with x and y limits ranging from ([-2, 2]) and a square from ([-2, -2]) to ([2, 2]) with an inscribed circle of radius 2.","solution":"import matplotlib.pyplot as plt def plot_circle_within_square(radius=1): Plots a circle inscribed within a square, both centered at the origin. Parameters: radius (float or int): The radius of the circle and half the side length of the square. Default is 1. fig, ax = plt.subplots() # Set the x and y limits plt.xlim(-radius, radius) plt.ylim(-radius, radius) # Create the square and the circle square = plt.Rectangle((-radius, -radius), 2 * radius, 2 * radius, fill=False, edgecolor=\'blue\') circle = plt.Circle((0, 0), radius, fill=False, edgecolor=\'green\') # Add the square and circle to the plot ax.add_patch(square) ax.add_patch(circle) # Set aspect ratio to be equal for correct display ax.set_aspect(\'equal\', \'box\') # Display the plot plt.show()"},{"question":"The task is to implement a Python function named `validate_code` that checks if a given string representing a code snippet follows specific coding style guidelines. Specifically, you need to ensure that the code adheres to the following rules: 1. Indentation must be done using four spaces (not tabs). 2. Each code block (like the body of `if`, `for`, or `while` statements) must be properly indented. 3. There must be no trailing whitespace at the end of any line. 4. Each function definition should start with `def` followed by a space and the function name, ensuring no extra spaces. 5. Lines should not exceed 80 characters in length. Your task is to implement the function `validate_code` that follows this signature: ```python def validate_code(code: str) -> bool: ``` # Steps to Follow: 1. Split the input code into lines and check each line independently. 2. For each line, verify that: - No line exceeds 80 characters. - There is no trailing whitespace. 3. For indentations: - Ensure indentation is four spaces for each level. 4. For function definitions: - Ensure they follow the pattern `def function_name:` with no extra spaces or incorrect format. # Example: ```python code = def example_function(): if True: print(\\"Hello, World!\\") return result = validate_code(code) print(result) # Output: True invalid_code = def example_function(): if True: print(\\"Hello, World!\\") # Two spaces indentation error return result = validate_code(invalid_code) print(result) # Output: False ``` # Constraints: - The `code` input is a string representing a block of code with a maximum length of 1000 characters. - The function should return `True` if the code meets all style guidelines, `False` otherwise. - Assume the code snippet provided is syntactically correct Python code.","solution":"def validate_code(code: str) -> bool: lines = code.splitlines() for line in lines: # Check for trailing whitespace if line.rstrip() != line: return False # Check for line length if len(line) > 80: return False # Check for indentation (either 0 or multiple of 4 spaces) leading_spaces = len(line) - len(line.lstrip()) if leading_spaces % 4 != 0: return False # Check function definitions if line.strip().startswith(\'def \'): if not line.strip().startswith(\'def \') or line.strip().count(\' \') != 1: return False return True"},{"question":"You are to create a Python function named `count_anagrams` that takes a list of strings and returns the number of anagram groups present in the list. Two strings are anagrams if they contain the same characters in the same frequency, regardless of order. The function should handle both lowercase and uppercase letters (i.e., it should be case-insensitive). Function signature: ```python def count_anagrams(strings: list[str]) -> int: pass ``` # Example ```python count_anagrams([\\"listen\\", \\"silent\\", \\"enlist\\", \\"hello\\", \\"olleh\\", \\"world\\"]) # Should return 3, since \\"listen\\", \\"silent\\", \\"enlist\\" form one group, \\"hello\\", \\"olleh\\" form another group, and \\"world\\" doesn\'t form any group. count_anagrams([\\"cat\\", \\"act\\", \\"tac\\", \\"dog\\", \\"god\\"]) # Should return 2, since \\"cat\\", \\"act\\", \\"tac\\" form one group, and \\"dog\\", \\"god\\" form another group. ```","solution":"from collections import defaultdict def count_anagrams(strings: list[str]) -> int: Returns the number of anagram groups in the list of strings. anagram_dict = defaultdict(list) for string in strings: sorted_string = \'\'.join(sorted(string.lower())) anagram_dict[sorted_string].append(string) return len(anagram_dict)"},{"question":"You are given a pandas DataFrame called `salesData` which contains data about several sales transactions. Each record in the DataFrame includes the following columns: `TransactionID`, `Date`, `CustomerID`, `ItemID`, `Quantity`, and `PricePerUnit`. Your task is to write a function called `generateMonthlySalesReport` that processes this sales information in the following steps: 1. Parse the `Date` column to ensure it is in datetime format. 2. Group the data by the `CustomerID` and by the month of the `Date`. 3. Calculate the total amount spent by each customer for each month (i.e., sum up the product of `Quantity` and `PricePerUnit` for each group). 4. Return a new DataFrame where each row represents a unique `CustomerID` and a separate column for the total sales amount for each month in the format `YYYY-MM`. Function Signature: ```python def generateMonthlySalesReport(salesData: pd.DataFrame) -> pd.DataFrame: pass ``` **Install the required library**: You need the pandas library for this task. You can install it using pip if you haven\'t already: ```sh pip install pandas ``` **Inputs**: - `salesData`: A pandas DataFrame with the following columns: `TransactionID`, `Date`, `CustomerID`, `ItemID`, `Quantity`, and `PricePerUnit`. **Outputs**: - A pandas DataFrame with a `CustomerID` column and several columns for each month in the format `YYYY-MM`, containing the total amount spent by each customer. **Example**: ```python import pandas as pd data = { \'TransactionID\': [1, 2, 3, 4, 5], \'Date\': [\'2023-01-12\', \'2023-01-20\', \'2023-02-15\', \'2023-02-28\', \'2023-03-10\'], \'CustomerID\': [1, 1, 2, 2, 1], \'ItemID\': [101, 102, 101, 103, 101], \'Quantity\': [2, 1, 3, 2, 4], \'PricePerUnit\': [10, 15, 5, 20, 10] } salesData = pd.DataFrame(data) monthlyReport = generateMonthlySalesReport(salesData) print(monthlyReport) ``` **Expected Output**: ``` CustomerID 2023-01 2023-02 2023-03 0 1 35 0 40 1 2 0 55 0 ``` **Constraints**: - Ensure that the `Date` column is properly converted to datetime objects. - The function should handle varying transaction dates and customer activity accurately. - The resulting DataFrame should have columns for all months present in the input data.","solution":"import pandas as pd def generateMonthlySalesReport(salesData: pd.DataFrame) -> pd.DataFrame: Generates a report of total sales per customer per month. Parameters: salesData (pd.DataFrame): DataFrame containing sales transactions with columns `TransactionID`, `Date`, `CustomerID`, `ItemID`, `Quantity`, and `PricePerUnit`. Returns: pd.DataFrame: DataFrame with `CustomerID` and total sales per month in format `YYYY-MM`. # Ensure the Date column is in datetime format salesData[\'Date\'] = pd.to_datetime(salesData[\'Date\']) # Extract year-month from Date salesData[\'YearMonth\'] = salesData[\'Date\'].dt.to_period(\'M\') # Calculate total amount spent per transaction salesData[\'TotalSpent\'] = salesData[\'Quantity\'] * salesData[\'PricePerUnit\'] # Group by CustomerID and YearMonth and sum the TotalSpent grouped_data = salesData.groupby([\'CustomerID\', \'YearMonth\'])[\'TotalSpent\'].sum().unstack(fill_value=0) # Reset the index to turn the year-month columns into proper columns grouped_data.reset_index(inplace=True) # Rename the columns to match the required format grouped_data.columns = [str(col) if col == \'CustomerID\' else col.strftime(\'%Y-%m\') for col in grouped_data.columns] return grouped_data"},{"question":"You are required to write a function called `partition_and_sort` that partitions a list of integers into two separate lists: one containing all the even numbers and the other containing all the odd numbers. After partitioning, the function should return both lists with their values sorted in ascending order. **Function Signature:** ```python def partition_and_sort(arr: list) -> tuple: Partitions the input list into even and odd numbers and sorts each list. ``` **Parameters:** - `arr` (list): A list of integers. **Returns:** - A tuple containing two lists: - The first list contains all the even numbers from the input list, sorted in ascending order. - The second list contains all the odd numbers from the input list, sorted in ascending order. **Requirements:** 1. All even numbers should be collected in one list and all odd numbers in another list. 2. Both lists should be sorted in ascending order before returning. 3. The function should return a tuple of these two lists. **Example Usage:** ```python result = partition_and_sort([4, 1, 7, 3, 8, 2, 5, 6]) print(result) # Output: ([2, 4, 6, 8], [1, 3, 5, 7]) ``` This should partition the input list into even and odd numbers and return the sorted lists.","solution":"def partition_and_sort(arr): Partitions the input list into even and odd numbers and sorts each list. Parameters: arr (list): A list of integers. Returns: tuple: A tuple containing two lists: - The first list contains all the even numbers from the input list, sorted in ascending order. - The second list contains all the odd numbers from the input list, sorted in ascending order. evens = sorted([x for x in arr if x % 2 == 0]) odds = sorted([x for x in arr if x % 2 != 0]) return (evens, odds)"},{"question":"You are provided with an integer `n` and a list of `n` integers. Your task is to find the subarray with the maximum sum. If there are multiple such subarrays with the same sum, return the one with the smallest starting index. The subarray must contain at least one element. For this task, you need to implement a function `max_subarray(nums: List[int]) -> Tuple[int, int, int]`, where: - `nums` is the list of integers. The function should return a tuple `(max_sum, start_index, end_index)`, where: - `max_sum` is the maximum sum of any subarray in the list. - `start_index` is the starting index of the subarray with the maximum sum. - `end_index` is the ending index of the subarray with the maximum sum. Use Kadane\'s algorithm to solve this problem efficiently. Function Signature: ```python def max_subarray(nums: List[int]) -> Tuple[int, int, int]: ``` Constraints: - 1 <= n <= 10^5 - -10^4 <= nums[i] <= 10^4 Example: ```python # Given data nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4] # Expected output result = max_subarray(nums) print(result) # Output: (6, 3, 6) (subarray: [4, -1, 2, 1]) ```","solution":"from typing import List, Tuple def max_subarray(nums: List[int]) -> Tuple[int, int, int]: Finds the subarray with the maximum sum in the given list of numbers. Returns a tuple containing the maximum sum, the start index, and the end index of the subarray. max_sum = nums[0] current_sum = nums[0] start = 0 end = 0 temp_start = 0 for i in range(1, len(nums)): if current_sum + nums[i] < nums[i]: current_sum = nums[i] temp_start = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return (max_sum, start, end)"},{"question":"You are to write a function named `findPairWithTargetSum` that takes two arguments: `numbers` and `target_sum`. - `numbers` is a list of integers. - `target_sum` is the target sum we want to find a pair for. The function should perform the following operations: 1. Identify and return a tuple containing a pair of numbers from the `numbers` list that add up to the `target_sum`. 2. If multiple pairs are found, return any one of them. 3. If no such pair exists, return an empty tuple. Assume the following: - Each input list contains distinct integers. - The list will contain at least two numbers. Here is the function signature for you to implement: ```python def findPairWithTargetSum(numbers: list, target_sum: int) -> tuple: pass ```","solution":"def findPairWithTargetSum(numbers: list, target_sum: int) -> tuple: Identifies and returns a pair of numbers from the list that add up to the target_sum. :param numbers: List of integers. :param target_sum: The target sum to find a pair for. :return: A tuple containing a pair of numbers that add up to the target_sum, or an empty tuple if no such pair exists. seen = set() for number in numbers: complement = target_sum - number if complement in seen: return (complement, number) seen.add(number) return ()"},{"question":"In this problem, you are tasked with writing a function `sorted_squared_array` that takes a sorted array of integers and returns a new array containing the squares of each number, also sorted in non-decreasing order. This problem can help you understand sorting algorithms and array manipulations, which are fundamental in computer science. # Context: 1. Given a sorted array of integers, both negative and non-negative. 2. Squaring these values may disrupt the order due to the squaring of negative values turning them positive. # Task: Create a function `sorted_squared_array` that: 1. Accepts a sorted array of integers as input. 2. Returns a new array of the squares of each number from the input array, sorted in non-decreasing order. Specifically, the function signature should be: ```python def sorted_squared_array(arr): Given a sorted array of integers, returns a sorted array of the squares of those integers. Arguments: arr -- a list of integers, sorted in non-decreasing order. Returns: result -- a list of integers, sorted in non-decreasing order. ``` # Requirements: 1. You must ensure that the resulting array is sorted in non-decreasing order. 2. The function should be efficient in terms of time complexity. # Example: Given the input ```python arr = [-7, -3, 2, 3, 11] ``` The expected output should be: ```python sorted_squared_array(arr) # Output: [4, 9, 9, 49, 121] ``` # Implementation Hint: 1. Use a two-pointer technique to square the numbers and place them in the correct position in a new array. 2. Start from both ends of the given array and compare the absolute values of the elements to decide the placement of the squared values in the resulting array.","solution":"def sorted_squared_array(arr): Given a sorted array of integers, returns a sorted array of the squares of those integers. Arguments: arr -- a list of integers, sorted in non-decreasing order. Returns: result -- a list of integers, sorted in non-decreasing order. n = len(arr) result = [0] * n left, right = 0, n - 1 for i in range(n - 1, -1, -1): if abs(arr[left]) > abs(arr[right]): result[i] = arr[left] ** 2 left += 1 else: result[i] = arr[right] ** 2 right -= 1 return result"},{"question":"Write a function that takes a list of integers and returns a new list containing only the elements that are prime numbers. Make sure to optimize for performance by limiting the number of divisibility checks. The function should output: list: A list of prime numbers filtered from the input list. You should write self-contained code starting with: ``` def get_primes(input_list): ```","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def get_primes(input_list): return [num for num in input_list if is_prime(num)]"},{"question":"You are tasked to simulate the spread of a rumor in a population represented by nodes (people) in a network. Your task is to write a function `spread_rumor(population_size: int, edges: List[Tuple[int, int]], initial_spreader: int) -> List[bool]` that determines which nodes in the network will have heard the rumor after it has been spread through the network. **Function Signature** ```python def spread_rumor(population_size: int, edges: List[Tuple[int, int]], initial_spreader: int) -> List[bool]: ``` # Description The rumor spreads from one person to directly connected people (nodes) in the network. The function should simulate the spread of the rumor and return a list where each element represents whether the person (indexed from 0 to population_size - 1) has heard the rumor (`True`) or not (`False`). **Arguments:** - `population_size` (int): The total number of people in the population, each represented by a node labeled from 0 to `population_size - 1`. - `edges` (List[Tuple[int, int]]): A list of tuples representing bidirectional edges (connections) between nodes in the network. - `initial_spreader` (int): The node that starts spreading the rumor. **Return:** - The function should return a list of boolean values. Each value represents whether the node corresponding to that index has heard the rumor (`True` for heard, `False` for not heard). # Examples ```python spread_rumor(5, [(0, 1), (1, 2), (2, 3), (3, 4)], 0) ``` Will return: ```python [True, True, True, True, True] ``` ```python spread_rumor(5, [(0, 1), (1, 2), (3, 4)], 0) ``` Will return: ```python [True, True, True, False, False] ``` **Requirements:** - Utilize a graph traversal technique such as Breadth-First Search (BFS) or Depth-First Search (DFS) to simulate the spread of the rumor. - Efficiently handle the population and connections to ensure the rumor spreads correctly across the network. # Constraints: - 1 <= population_size <= 10^4 - 0 <= len(edges) <= 10^4 - 0 <= initial_spreader < population_size This problem is designed to test your understanding and implementation of graph traversal algorithms and handling network data structures efficiently.","solution":"from typing import List, Tuple from collections import deque, defaultdict def spread_rumor(population_size: int, edges: List[Tuple[int, int]], initial_spreader: int) -> List[bool]: rumor_heard = [False] * population_size graph = defaultdict(list) # Build the graph for u, v in edges: graph[u].append(v) graph[v].append(u) # Breadth-First Search (BFS) to simulate rumor spreading queue = deque([initial_spreader]) rumor_heard[initial_spreader] = True while queue: current = queue.popleft() for neighbor in graph[current]: if not rumor_heard[neighbor]: rumor_heard[neighbor] = True queue.append(neighbor) return rumor_heard"},{"question":"Design a function named `aggregate_sales_data` that processes sales information from JSON files and computes total sales for a given product id within a specific date range. The function should utilize the `json` and `datetime` libraries to read the data from JSON files and perform the necessary aggregation. Requirements: 1. **JSON Data Files:** - **Sales files** are stored in a dictionary, `SALES_DATA`, with store names as keys and file paths as values. 2. **Function Arguments:** - `store`: A string representing the store name (e.g., \'Store_A\', \'Store_B\', etc.). - `product_id`: An integer representing the product id to filter the sales. - `start_date`: A string representing the start date in the \\"YYYY-MM-DD\\" format. - `end_date`: A string representing the end date in the \\"YYYY-MM-DD\\" format. 3. **Function Role:** - Load the appropriate store data file based on the `store` parameter. - Parse the JSON data and filter the records based on the `product_id` and date range (`start_date` to `end_date`), inclusive. - Compute the total sales amount for the specified product within the date range. 4. **Output:** - Return the total sales amount as a float. Libraries Required: - `json` for reading JSON data. - `datetime` for date manipulation. Sample JSON data file structure (for reference): ```json { \\"sales\\": [ {\\"date\\": \\"2021-01-01\\", \\"product_id\\": 101, \\"quantity\\": 2, \\"amount\\": 19.99}, {\\"date\\": \\"2021-01-01\\", \\"product_id\\": 102, \\"quantity\\": 1, \\"amount\\": 9.99}, {\\"date\\": \\"2021-01-02\\", \\"product_id\\": 101, \\"quantity\\": 1, \\"amount\\": 9.99}, {\\"date\\": \\"2021-01-02\\", \\"product_id\\": 103, \\"quantity\\": 3, \\"amount\\": 29.97}, ... ] } ``` Example usage: ```python total_sales = aggregate_sales_data(\'Store_A\', 101, \'2021-01-01\', \'2021-01-03\') ```","solution":"import json from datetime import datetime # Mock SALES_DATA for the context of this example SALES_DATA = { \'Store_A\': \'data/store_a.json\', \'Store_B\': \'data/store_b.json\', } def aggregate_sales_data(store, product_id, start_date, end_date): Computes the total sales for a given product id within a specific date range for a store. Args: - store (str): The store name. - product_id (int): The product id to filter the sales. - start_date (str): The start date in \\"YYYY-MM-DD\\" format. - end_date (str): The end date in \\"YYYY-MM-DD\\" format. Returns: - float: The total sales amount for the specified product within the date range. # Load the store-specific JSON file file_path = SALES_DATA.get(store) if not file_path: return 0.0 with open(file_path, \'r\') as file: data = json.load(file) sales_records = data[\'sales\'] # Convert date strings to datetime objects start_date = datetime.strptime(start_date, \'%Y-%m-%d\') end_date = datetime.strptime(end_date, \'%Y-%m-%d\') total_sales_amount = 0.0 # Calculate total sales for the product within date range for record in sales_records: record_date = datetime.strptime(record[\'date\'], \'%Y-%m-%d\') if record[\'product_id\'] == product_id and start_date <= record_date <= end_date: total_sales_amount += record[\'amount\'] return total_sales_amount"},{"question":"You are tasked with writing a function, `find_nearest_larger(arr)`, that takes a list of integers and returns a list where each element is replaced by the nearest larger integer to the right of the original element. If there is no larger integer to the right, replace the element with `-1`. Here are the steps you should follow to complete this task: 1. Define the function `find_nearest_larger(arr)` that: - Takes one parameter: - `arr`: a list of integers. - Returns a list of integers. Here\'s a brief overview of the algorithm: - Initialize a list `result` with the same length as `arr` and fill it with `-1` values. - Iterate over the elements of `arr` starting from the first element to the second-to-last element: - For each element, find the nearest element to the right that is larger. - Update the corresponding index in the `result` list with this larger element. - If no larger element is found for a given element, it remains `-1` in the `result` list. Example: ```python find_nearest_larger([2, 5, 3, 7, 4, 8]) # Output: [5, 7, 7, 8, 8, -1] ``` Explanation: - For `2`, the nearest larger integer to the right is `5`. - For `5`, the nearest larger integer to the right is `7`. - For `3`, the nearest larger integer to the right is `7`. - For `7`, the nearest larger integer to the right is `8`. - For `4`, the nearest larger integer to the right is `8`. - For `8`, there is no larger integer to the right, so it remains `-1`. You must ensure the function is efficient and consider edge cases such as an empty list or a list with all identical elements. The purpose of this exercise is to practice scanning through lists and updating values based on specific conditions.","solution":"def find_nearest_larger(arr): Function to find the nearest larger element to the right for each element in the array. If no such element exists, replace it with -1. n = len(arr) result = [-1] * n stack = [] for i in range(n): while stack and arr[stack[-1]] < arr[i]: idx = stack.pop() result[idx] = arr[i] stack.append(i) return result"},{"question":"You are given a dataset containing a collection of coordinates in 2D space, and you need to determine which points form the perimeter of the smallest convex polygon (convex hull) that can enclose all the points. Create a function named `convex_hull` that reads a CSV file containing the coordinates of the points, calculates the convex hull using an algorithm of your choosing, and returns the coordinates of the points on the convex hull in clockwise order starting from the point with the lowest x-coordinate. If two points have the same x-coordinate, start from the one with the lowest y-coordinate. Requirements: 1. **Input**: The function should take a single string argument which is the path to the CSV file. 2. **CSV File**: The file includes two columns, `x` and `y`, representing the coordinates of the points. 3. **Output**: The function should return a list of tuples, where each tuple contains the x and y coordinates of a point on the convex hull in the required order. 4. **Libraries**: You must use the `pandas` library for reading the CSV file and manipulating the data. Other libraries for computational geometry are allowed. Convex Hull Calculation: You may use any algorithm to find the convex hull, such as the Graham scan or the Monotone chain algorithm. Function Definition: ```python def convex_hull(csv_file_path: str) -> List[Tuple[float, float]]: # Your code here ``` Example: Given the following CSV data: ``` x,y 0,0 1,1 2,2 0,2 2,0 ``` The function call: ```python convex_hull(\\"path_to_file.csv\\") ``` Should return: ```python [(0, 0), (2, 0), (2, 2), (0, 2)] ```","solution":"import pandas as pd from typing import List, Tuple def convex_hull(csv_file_path: str) -> List[Tuple[float, float]]: Calculates the convex hull of a set of 2D points from a CSV file. Args: - csv_file_path (str): The path to the CSV file containing the points with columns \'x\' and \'y\'. Returns: - List[Tuple[float, float]]: The list of points on the convex hull in clockwise order starting from the point with the lowest x-coordinate. def cross(o, a, b): 2D cross product of OA and OB vectors, returns a positive value, if OAB makes a counter-clockwise turn, negative for clockwise turn, and zero if the points are collinear. return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) # Read the CSV file df = pd.read_csv(csv_file_path) points = list(map(tuple, df[[\'x\', \'y\']].values)) # Sort the points lexicographically (tuples compare lexicographically). # Remove duplicates to detect the case we have just one unique point. points = sorted(set(points)) # Boring case: no points or a single point, possibly repeated multiple times. if len(points) <= 1: return points # 2D Convex Hull algorithm: Monotone chain (aka Andrew\'s algorithm). # Build the lower hull lower = [] for p in points: while len(lower) >= 2 and cross(lower[-2], lower[-1], p) <= 0: lower.pop() lower.append(p) # Build the upper hull upper = [] for p in reversed(points): while len(upper) >= 2 and cross(upper[-2], upper[-1], p) <= 0: upper.pop() upper.append(p) # Concatenate lower and upper hull to make the full hull (remove the last points because they are repeated) full_hull = lower[:-1] + upper[:-1] return full_hull"},{"question":"Your task is to create a function that analyzes the relationship between average grades and study hours among students, and then visualizes this relationship using a scatter plot. You are given a DataFrame `df` containing at least the following columns: - `study_hours` (float): The number of hours a student studies per week. - `average_grade` (float): The average grade of the student. - `student_name` (str): The name of the student. You are required to write a function named `plot_study_hours_vs_grade()` that: 1. Creates subsets of the data based on specific conditions: - `high_study_high_grade`: study_hours > 30 and average_grade > 85 - `low_study_high_grade`: study_hours < 10 and average_grade > 85 - `high_study_low_grade`: study_hours > 30 and average_grade < 50 - `low_study_low_grade`: study_hours < 10 and average_grade < 50 2. Plots all data points in grey with low transparency (alpha=0.1). 3. Colors and highlights the selected subsets with different colors as follows: - `high_study_high_grade`: Green - `low_study_high_grade`: Blue - `high_study_low_grade`: Red - `low_study_low_grade`: Orange 4. Adds labels to the colored points, displaying the `student_name` with a small offset from the point. 5. Formats the axes and adds a title to the plot. Use the `matplotlib` library to create the plot. Conclude by displaying the plot using `matplotlib.pyplot.show`. ```python def plot_study_hours_vs_grade(df): # your code here ```","solution":"import matplotlib.pyplot as plt def plot_study_hours_vs_grade(df): # Create subsets high_study_high_grade = df[(df[\'study_hours\'] > 30) & (df[\'average_grade\'] > 85)] low_study_high_grade = df[(df[\'study_hours\'] < 10) & (df[\'average_grade\'] > 85)] high_study_low_grade = df[(df[\'study_hours\'] > 30) & (df[\'average_grade\'] < 50)] low_study_low_grade = df[(df[\'study_hours\'] < 10) & (df[\'average_grade\'] < 50)] # Plot all data points in grey with low transparency plt.scatter(df[\'study_hours\'], df[\'average_grade\'], color=\'grey\', alpha=0.1) # Plot the subsets with different colors plt.scatter(high_study_high_grade[\'study_hours\'], high_study_high_grade[\'average_grade\'], color=\'green\', label=\'High Study High Grade\') plt.scatter(low_study_high_grade[\'study_hours\'], low_study_high_grade[\'average_grade\'], color=\'blue\', label=\'Low Study High Grade\') plt.scatter(high_study_low_grade[\'study_hours\'], high_study_low_grade[\'average_grade\'], color=\'red\', label=\'High Study Low Grade\') plt.scatter(low_study_low_grade[\'study_hours\'], low_study_low_grade[\'average_grade\'], color=\'orange\', label=\'Low Study Low Grade\') # Add labels to the colored points for _, row in high_study_high_grade.iterrows(): plt.text(row[\'study_hours\'] + 0.2, row[\'average_grade\'] + 0.2, row[\'student_name\'], color=\'green\', fontsize=9) for _, row in low_study_high_grade.iterrows(): plt.text(row[\'study_hours\'] + 0.2, row[\'average_grade\'] + 0.2, row[\'student_name\'], color=\'blue\', fontsize=9) for _, row in high_study_low_grade.iterrows(): plt.text(row[\'study_hours\'] + 0.2, row[\'average_grade\'] + 0.2, row[\'student_name\'], color=\'red\', fontsize=9) for _, row in low_study_low_grade.iterrows(): plt.text(row[\'study_hours\'] + 0.2, row[\'average_grade\'] + 0.2, row[\'student_name\'], color=\'orange\', fontsize=9) # Formatting axes and adding a title plt.xlabel(\'Study Hours per Week\') plt.ylabel(\'Average Grade\') plt.title(\'Relationship Between Study Hours and Average Grade\') plt.legend() plt.show()"},{"question":"You are tasked with writing a function that counts the number of unique words in a given text. For this purpose, a \\"word\\" is defined as any sequence of alphanumeric characters (letters and digits), separated by spaces or punctuation. Your function should ignore case, meaning that \\"Word\\" and \\"word\\" should be considered the same. **Function Signature:** ```python def count_unique_words(text): \'\'\' This function counts the number of unique words in the given text. Parameters: text (str): A string containing the text to be analyzed. Returns: int: The count of unique words in the text. \'\'\' ``` # Requirements: 1. Convert all words to lower case to ensure case insensitivity. 2. Remove any punctuation marks to accurately count words. 3. Use Python\'s `re` module to help identify and split words. # Example: ```python # Example text text = \\"Hello, world! Hello, Python. Welcome to the world of Python programming.\\" # Call the function unique_word_count = count_unique_words(text) print(unique_word_count) # Output: 6 (unique words are \'hello\', \'world\', \'python\', \'welcome\', \'to\', \'of\', \'programming\') ``` The function should handle a string input and return an integer representing the count of unique words. # Constraints: 1. The input text will not exceed 10^4 characters. 2. The input text will only contain printable ASCII characters.","solution":"import re def count_unique_words(text): \'\'\' This function counts the number of unique words in the given text. Parameters: text (str): A string containing the text to be analyzed. Returns: int: The count of unique words in the text. \'\'\' # Convert text to lower case text = text.lower() # Find all alphanumeric word sequences using regular expression words = re.findall(r\'bw+b\', text) # Use a set to store unique words unique_words = set(words) # Return the length of the set of unique words return len(unique_words)"},{"question":"You are given a list of transactions where each transaction is a dictionary containing \'timestamp\', \'user_id\', and \'amount\'. Write a function called `process_transactions()` that performs the following tasks: 1. Convert the `timestamp` to a `datetime` object and add a new key \'date\' to each transaction dictionary which stores the date (YYYY-MM-DD) without the time component. 2. Create a new dictionary `user_summary` where each key is a unique \'user_id\' and its value is a dictionary containing: - \'total_amount\': Sum of all \'amount\' values for that user. - \'average_amount\': Average \'amount\' per transaction for that user. - \'daily_transactions\': A dictionary containing dates as keys and counts of transactions per day for that user as values. 3. Return the `user_summary` dictionary. Assume each transaction amount is a positive float and the input list contains valid transaction records. ```python from datetime import datetime def process_transactions(transactions): # Your code here pass # Example transactions list transactions = [ {\'timestamp\': \'2023-01-01 10:00:00\', \'user_id\': 1, \'amount\': 100.0}, {\'timestamp\': \'2023-01-01 12:30:00\', \'user_id\': 1, \'amount\': 250.0}, {\'timestamp\': \'2023-01-02 09:00:00\', \'user_id\': 2, \'amount\': 75.0}, {\'timestamp\': \'2023-01-03 14:00:00\', \'user_id\': 1, \'amount\': 300.0}, {\'timestamp\': \'2023-01-03 14:30:00\', \'user_id\': 2, \'amount\': 150.0} ] # Calling the function print(process_transactions(transactions)) ``` The function should return a summary dictionary with the requested information.","solution":"from datetime import datetime def process_transactions(transactions): user_summary = {} for transaction in transactions: # Convert timestamp to datetime object and add \'date\' timestamp = datetime.strptime(transaction[\'timestamp\'], \'%Y-%m-%d %H:%M:%S\') date = timestamp.date().isoformat() transaction[\'date\'] = date user_id = transaction[\'user_id\'] amount = transaction[\'amount\'] if user_id not in user_summary: user_summary[user_id] = { \'total_amount\': 0, \'average_amount\': 0, \'daily_transactions\': {}, \'transaction_count\': 0 } user_summary[user_id][\'total_amount\'] += amount user_summary[user_id][\'transaction_count\'] += 1 user_summary[user_id][\'average_amount\'] = user_summary[user_id][\'total_amount\'] / user_summary[user_id][\'transaction_count\'] if date not in user_summary[user_id][\'daily_transactions\']: user_summary[user_id][\'daily_transactions\'][date] = 0 user_summary[user_id][\'daily_transactions\'][date] += 1 # Remove \'transaction_count\' as it\'s only used for calculating average for key in user_summary: del user_summary[key][\'transaction_count\'] return user_summary"},{"question":"In this problem, you are tasked with writing a function called `find_smallest_missing_positive` that finds the smallest missing positive integer from an unsorted list of integers. The function should be efficient and preferably run in O(n) time complexity and use constant space. The function `find_smallest_missing_positive` should have the following signature: ```python def find_smallest_missing_positive(nums): pass ``` # Parameters - `nums`: A list of integers which may contain both negative and positive integers as well as duplicates. # Returns - An integer representing the smallest missing positive integer from the given list. # Example Usage ```python nums = [3, 4, -1, 1] print(find_smallest_missing_positive(nums)) # Expected output: 2 nums = [1, 2, 0] print(find_smallest_missing_positive(nums)) # Expected output: 3 ``` # Notes - You are not allowed to use extra space that grows with the size of the input (`O(1)` space complexity is required). - Pay close attention to edge cases, such as empty lists or lists containing only negative numbers. The smallest missing positive integer should be `1` for an empty list or a list with no positive integers. - Given a list with all positive integers up to `n`, the smallest missing positive would be `n+1`. Implement the `find_smallest_missing_positive` function that meets the above specifications.","solution":"def find_smallest_missing_positive(nums): Finds the smallest missing positive integer from an unsorted list of integers. n = len(nums) # Step 1: Move all non-positive numbers to one side j = 0 for i in range(n): if nums[i] <= 0: nums[i], nums[j] = nums[j], nums[i] j += 1 # Now j is the index of the first positive number # Step 2: Mark the presence of an element by making the element at the index negative for i in range(j, n): val = abs(nums[i]) if val - 1 < n - j: if nums[j + val - 1] > 0: nums[j + val - 1] = -nums[j + val - 1] # Step 3: Find the first missing positive integer for i in range(j, n): if nums[i] > 0: return i - j + 1 return n - j + 1"},{"question":"Create a function to read a CSV file containing sales data for several products, calculate the total sales for each product type, and output the results in a sorted manner. The CSV file has columns \'Product\', \'Quantity\', and \'Price\'. The function reads the CSV file, computes the total sales (Quantity * Price) for each product, and returns a list of tuples, each containing the product type and its total sales, sorted by total sales in descending order. If the file is not found, the function should raise an exception. The function should output with: list: A sorted list of tuples with each tuple containing the product type and its total sales. You should write self-contained code starting with: ``` import csv from collections import defaultdict def calculate_sales(file_path: str) -> list: ```","solution":"import csv from collections import defaultdict def calculate_sales(file_path: str) -> list: Reads a CSV file containing sales data, calculates the total sales for each product type, and returns the results sorted by total sales in descending order. product_sales = defaultdict(float) try: with open(file_path, mode=\'r\') as file: csv_reader = csv.DictReader(file) for row in csv_reader: product = row[\'Product\'] quantity = float(row[\'Quantity\']) price = float(row[\'Price\']) total_sale = quantity * price product_sales[product] += total_sale except FileNotFoundError: raise Exception(f\\"The file at path {file_path} was not found.\\") except KeyError as e: raise Exception(f\\"Missing column in the CSV file: {e}\\") except ValueError: raise Exception(f\\"Invalid data type in the CSV file.\\") sorted_sales = sorted(product_sales.items(), key=lambda x: x[1], reverse=True) return sorted_sales"},{"question":"You are asked to implement a recommendation function using Python that suggests products to users based on past purchase history. The recommendation function should follow these requirements: 1. It should take three inputs: a DataFrame of purchase history (`purchase_df`), a user ID (`user_id`), and a number `n` indicating how many recommendations to generate. 2. The DataFrame (`purchase_df`) will have columns: `user_id`, `product_id`, `purchase_quantity`. 3. The function should suggest products that the user has not yet purchased, based on the popularity of the products among other users. 4. If the user has already purchased all available products, the function should return an empty list. 5. The recommendations should be sorted in descending order by the sum of `purchase_quantity` of each product across all users. The function, named `recommend_products`, should have the following signature: ```python def recommend_products(purchase_df, user_id, n): pass ``` # Example: Given the DataFrame `purchase_df` with columns: - `user_id` (e.g., \'U1\', \'U2\', \'U3\') - `product_id` (e.g., \'P1\', \'P2\', \'P3\') - `purchase_quantity` (e.g., 10, 5, 2) and a `user_id = \'U1\'`. Calling `recommend_products(purchase_df, \'U1\', 2)` should: 1. Identify products not yet purchased by `user_id = \'U1\'`. 2. Rank these products by sum of purchase quantities across all other users. 3. Return the top 2 product IDs as a list. If `U1` has already purchased all products, the function should return an empty list.","solution":"import pandas as pd def recommend_products(purchase_df, user_id, n): Recommends products to a user based on the purchase history of other users, excluding those already purchased by the user. Args: purchase_df (pd.DataFrame): DataFrame containing purchase history with columns \'user_id\', \'product_id\', and \'purchase_quantity\'. user_id (str): The ID of the user to recommend products to. n (int): The number of product recommendations to generate. Returns: list: A list of recommended product IDs. # Get the set of products already purchased by the user purchased_products = set(purchase_df[purchase_df[\'user_id\'] == user_id][\'product_id\']) # Aggregate the purchase quantities across all users for each product product_popularity = (purchase_df.groupby(\'product_id\')[\'purchase_quantity\'] .sum() .reset_index() .sort_values(by=\'purchase_quantity\', ascending=False)) # Filter out products that the user has already purchased recommended_products = product_popularity[~product_popularity[\'product_id\'].isin(purchased_products)] # Get the top `n` recommended products top_n_recommendations = recommended_products.head(n)[\'product_id\'].tolist() return top_n_recommendations"},{"question":"You are tasked with creating a function to organize and summarize the sales data for a given period. The function should process and analyze a dataset containing sales transactions and then generate and display a summary report. The function you need to create should be named `generate_sales_summary`. It will take in the following parameters: - `sales_data`: array-like of shape (n_samples, n_features) - Each entry in `sales_data` should represent a transaction and contain the following fields: `timestamp`, `item_id`, `quantity`, and `price_per_item`. - `start_date`: string - Beginning date from which to start considering sales data, in the format \'YYYY-MM-DD\'. - `end_date`: string - Ending date up to which sales data is considered, in the format \'YYYY-MM-DD\'. The function should: 1. Filter the data to include only the transactions between `start_date` and `end_date` (inclusive). 2. Calculate the total sales amount for each distinct item over the filtered period. 3. Compute the overall total sales amount for the period. 4. Display a summary report that includes: - The total sales amount for each distinct item, sorted in descending order of sales amount. - The overall total sales amount. **Requirements:** 1. Use standard libraries such as `pandas` for data manipulation and `datetime` for date handling. 2. Ensure the summary report is easy to read and formatted neatly. 3. The function should handle exceptions gracefully, especially with respect to date parsing and data filtering. **Function Signature:** ```python import pandas as pd def generate_sales_summary(sales_data, start_date, end_date): pass ``` **Example Usage:** ```python sales_data = [ {\'timestamp\': \'2023-01-01\', \'item_id\': \'A101\', \'quantity\': 2, \'price_per_item\': 20.0}, {\'timestamp\': \'2023-01-05\', \'item_id\': \'A102\', \'quantity\': 3, \'price_per_item\': 15.0}, {\'timestamp\': \'2023-01-10\', \'item_id\': \'A101\', \'quantity\': 1, \'price_per_item\': 20.0}, {\'timestamp\': \'2023-01-15\', \'item_id\': \'A103\', \'quantity\': 5, \'price_per_item\': 10.0}, {\'timestamp\': \'2023-01-20\', \'item_id\': \'A102\', \'quantity\': 2, \'price_per_item\': 15.0}, ] generate_sales_summary(sales_data, \'2023-01-01\', \'2023-01-10\') ```","solution":"import pandas as pd from datetime import datetime def generate_sales_summary(sales_data, start_date, end_date): Generates and displays a sales summary report for the given period. Parameters: sales_data: list of dicts - Each entry represents a transaction and should contain \'timestamp\', \'item_id\', \'quantity\', and \'price_per_item\'. start_date: str - Beginning date in the format \'YYYY-MM-DD\'. end_date: str - Ending date in the format \'YYYY-MM-DD\'. # Convert sales data into DataFrame df = pd.DataFrame(sales_data) # Convert \'timestamp\' to datetime df[\'timestamp\'] = pd.to_datetime(df[\'timestamp\']) # Filter data between start_date and end_date mask = (df[\'timestamp\'] >= start_date) & (df[\'timestamp\'] <= end_date) filtered_df = df.loc[mask] # Calculate total sales amount for each distinct item filtered_df[\'total_sale\'] = filtered_df[\'quantity\'] * filtered_df[\'price_per_item\'] item_summary = filtered_df.groupby(\'item_id\')[\'total_sale\'].sum().reset_index() # Sort item summary by total sales amount in descending order item_summary = item_summary.sort_values(by=\'total_sale\', ascending=False) # Calculate overall total sales amount overall_total_sales = filtered_df[\'total_sale\'].sum() # Display summary report print(\\"Sales Summary Report\\") print(\\"--------------------\\") for _, row in item_summary.iterrows(): print(f\\"Item {row[\'item_id\']}: {row[\'total_sale\']:.2f}\\") print(\\"--------------------\\") print(f\\"Overall Total Sales: {overall_total_sales:.2f}\\")"},{"question":"You are managing a warehouse and are tasked with optimizing the storage of items. Each item has a weight and a value associated with it. You need to determine the maximum value that can be obtained by storing items in a container with a fixed weight capacity. This is a variation of the classic knapsack problem. **Function Signature:** ```python def max_value(capacity: int, weights: List[int], values: List[int]) -> int: ``` **Parameters:** - `capacity` (int): The maximum weight capacity of the container. - `weights` (List[int]): A list of integers where each integer represents the weight of an item. - `values` (List[int]): A list of integers where each integer represents the value of an item. The length of `values` is equal to the length of `weights`. **Functionality:** 1. Utilize a dynamic programming approach to determine the maximum value that can be achieved without exceeding the weight capacity of the container. 2. Ensure the algorithm considers each item only once. 3. Return the maximum value as an integer. **Constraints:** - The number of items `n` is in the range `[1, 1000]`. - The weight of each item is in the range `[1, 1000]`. - The value of each item is in the range `[1, 1000]`. - The capacity of the container is in the range `[1, 10000]`. **Example:** ```python weights = [1, 3, 4, 5] values = [1, 4, 5, 7] capacity = 7 result = max_value(capacity, weights, values) print(result) # Output: 9 ``` In this example, the optimal solution is to select the items with weights 3 and 4, yielding a maximum value of 9.","solution":"from typing import List def max_value(capacity: int, weights: List[int], values: List[int]) -> int: Determines the maximum value that can be obtained by storing items in a container with a fixed weight capacity. Uses dynamic programming approach to solve the 0/1 knapsack problem. Parameters: - capacity (int): The maximum weight capacity of the container. - weights (List[int]): A list of integers where each integer represents the weight of an item. - values (List[int]): A list of integers where each integer represents the value of an item. Returns: - int: The maximum value that can be obtained. n = len(weights) dp = [0] * (capacity + 1) for i in range(n): for w in range(capacity, weights[i] - 1, -1): dp[w] = max(dp[w], dp[w - weights[i]] + values[i]) return dp[capacity]"},{"question":"You are tasked with writing a function that calculates the prefix sum of an array using NumPy. The prefix sum of an array is a second array where each element at index `i` is the sum of the elements from index `0` to `i` of the original array. This exercise aims to bolster your skills with array manipulations using the `numpy.cumsum` function. Function Signature: ```python def calculate_prefix_sum(arr: np.ndarray) -> np.ndarray: ``` Input: - `arr`: A 1-dimensional numpy array of arbitrary length containing integers. Output: - Returns a 1-dimensional numpy array of the same length as `arr` containing the prefix sums of `arr`. Explanation: 1. Use the `numpy.cumsum` function to compute the prefix sum of the input array `arr`. 2. Return the resulting array. You are required to use the Numpy library, specifically the `numpy.cumsum` function, to calculate the prefix sums. # Example: ```python arr = np.array([1, 2, 3, 4, 5]) result = calculate_prefix_sum(arr) print(result) # Output: [ 1 3 6 10 15] ```","solution":"import numpy as np def calculate_prefix_sum(arr: np.ndarray) -> np.ndarray: Calculate the prefix sum of a 1-dimensional numpy array. Parameters: arr (np.ndarray): A 1-dimensional numpy array of integers. Returns: np.ndarray: A 1-dimensional numpy array containing the prefix sums. return np.cumsum(arr)"},{"question":"In the realm of data manipulation and analysis, the Pandas library stands out as a powerful tool in Python. In this exercise, you will build a function that processes a given dataset to extract meaningful insights and present the results in a structured format. # Task: Define a function `analyze_data` that accepts a single parameter: 1. `df` (pandas DataFrame): A pandas DataFrame containing numerical and categorical data. # Function Description: The function should analyze the input DataFrame and return a summarized report in the form of a dictionary that includes: - The total number of rows. - The total number of columns. - The column names. - The data type of each column. - The number of missing values in each column. - The mean value of each numerical column. - The unique values in each categorical column. # Requirements: - You must use the Pandas library to perform the data analysis. - Ensure the function handles missing values appropriately (e.g., count them but do not discard them). - The function should correctly identify and differentiate between numerical and categorical columns. - The output dictionary should have a clear structure with descriptive keys. # Example: Given a DataFrame `df`: ```python import pandas as pd data = { \'age\': [25, 30, 35, 40, None], \'salary\': [50000, 60000, 70000, None, 90000], \'department\': [\'HR\', \'Engineering\', \'Marketing\', \'HR\', \'Marketing\'] } df = pd.DataFrame(data) ``` Calling `analyze_data(df)` should return a dictionary that might look like this: ```python { \'total_rows\': 5, \'total_columns\': 3, \'column_names\': [\'age\', \'salary\', \'department\'], \'data_types\': { \'age\': \'float64\', \'salary\': \'float64\', \'department\': \'object\' }, \'missing_values\': { \'age\': 1, \'salary\': 1, \'department\': 0 }, \'mean_values\': { \'age\': 32.5, \'salary\': 67500.0 }, \'unique_values\': { \'department\': [\'HR\', \'Engineering\', \'Marketing\'] } } ``` Implement the `analyze_data` function with the specifications provided.","solution":"import pandas as pd def analyze_data(df): report = { \'total_rows\': df.shape[0], \'total_columns\': df.shape[1], \'column_names\': list(df.columns), \'data_types\': df.dtypes.apply(lambda x: x.name).to_dict(), \'missing_values\': df.isnull().sum().to_dict(), \'mean_values\': df.select_dtypes(include=[\'number\']).mean().to_dict(), \'unique_values\': { col: df[col].dropna().unique().tolist() for col in df.select_dtypes(include=[\'object\']).columns } } return report"},{"question":"You are tasked with creating a function that simulates a simplified version of the classic board game \\"Battleship\\". In this game, there is a single battleship placed on a 5x5 grid, and the player attempts to guess its location. The battleship occupies a single cell on the grid. The function `place_battleship` will randomly place the battleship on the grid, and the function `guess_location` will allow the player to make a guess. The goal is to determine if the player\'s guess is a hit or a miss. Here is what the functions should do: 1. `place_battleship()`: This function should generate a random location for the battleship. It will return a tuple representing the row and column of the battleship (e.g., (2, 3)). 2. `guess_location(guess_row, guess_col)`: This function should take two arguments, `guess_row` and `guess_col`, representing the player\'s guess for the battleship\'s location. It should compare the player\'s guess to the battleship\'s location and return \'Hit\' if the guess is correct, and \'Miss\' otherwise. The game should continue until the player correctly guesses the location of the battleship. Ensure to use the `random.randint` function from the `random` library to generate the battleship\'s location. Function signatures: ```python import random def place_battleship(): pass def guess_location(guess_row, guess_col, battleship_row, battleship_col): pass ``` Here is what you need to implement: - `place_battleship()`: This function generates and returns a random location for the battleship. - `guess_location(guess_row, guess_col, battleship_row, battleship_col)`: This function compares the guess to the actual battleship location and returns \'Hit\' or \'Miss\'.","solution":"import random def place_battleship(): Places a battleship at a random location on a 5x5 grid. Returns: tuple: The row and column of the battleship. return (random.randint(0, 4), random.randint(0, 4)) def guess_location(guess_row, guess_col, battleship_row, battleship_col): Compares the player\'s guess to the battleship location. Args: guess_row (int): Row of the player\'s guess. guess_col (int): Column of the player\'s guess. battleship_row (int): Row where the battleship is located. battleship_col (int): Column where the battleship is located. Returns: str: \'Hit\' if guess matches battleship location, \'Miss\' otherwise. if guess_row == battleship_row and guess_col == battleship_col: return \'Hit\' else: return \'Miss\'"},{"question":"Matrix manipulation is a crucial skill in various fields such as data science, computer graphics, and machine learning. One common operation is to find the transpose of a given matrix, where the rows and columns of the original matrix are swapped. Your task is to write a Python function `transpose_matrix(matrix)` that takes a two-dimensional list (a matrix) and returns its transpose. The function should adhere to the following structure: ```python def transpose_matrix(matrix): Return the transpose of the given matrix Parameters: matrix (list of list of int): A 2D list representing the matrix to be transposed Returns: list of list of int: The transposed matrix # Your implementation here ``` # Detailed Steps: 1. Determine the number of rows and columns in the input matrix. 2. Create a new matrix with the number of rows equal to the number of columns of the input matrix and the number of columns equal to the number of rows of the input matrix. 3. Populate the new matrix with elements from the input matrix such that the element at position (i, j) in the original matrix is placed at position (j, i) in the transposed matrix. 4. Return the newly created transposed matrix. # Example: For an input matrix: ``` matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The transposed matrix should be: ``` [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] ``` Another example with a rectangular matrix: ``` matrix = [ [1, 2], [3, 4], [5, 6] ] ``` The transposed matrix should be: ``` [ [1, 3, 5], [2, 4, 6] ] ``` # Requirements: - The function should handle both square and rectangular matrices. - Ensure that your solution efficiently handles the transpose operation.","solution":"def transpose_matrix(matrix): Return the transpose of the given matrix Parameters: matrix (list of list of int): A 2D list representing the matrix to be transposed Returns: list of list of int: The transposed matrix # Ensure the matrix is not empty if not matrix or not matrix[0]: return [] # Get the number of rows and columns in the input matrix rows, cols = len(matrix), len(matrix[0]) # Initialize the transposed matrix with dimensions swapped transposed = [[0] * rows for _ in range(cols)] # Populate the transposed matrix for i in range(rows): for j in range(cols): transposed[j][i] = matrix[i][j] return transposed"},{"question":"Write a function to count the number of unique words in a text file, ignoring case, and print the top N most common words along with their counts, sorted by frequency. The function should take the following inputs: * The file path to the text file. * The number of top frequent words (N) to return. Ensure the function handles common punctuation and special characters properly. The function should output a list of tuples, each containing a word and its count, sorted by frequency in descending order. If multiple words have the same frequency, they should be sorted alphabetically. You should write self-contained code starting with: ``` import re from collections import Counter def count_top_words(file_path: str, top_n: int): ```","solution":"import re from collections import Counter def count_top_words(file_path: str, top_n: int): Counts the number of unique words in a text file, ignoring case, and returns the top N most common words sorted by frequency in descending order. :param file_path: path to the text file :param top_n: number of top frequent words to return :return: list of tuples, each containing a word and its count with open(file_path, \'r\', encoding=\'utf-8\') as file: text = file.read() # Normalize text by converting to lowercase and removing punctuation and special characters words = re.findall(r\'bw+b\', text.lower()) # Count frequency of each word word_counts = Counter(words) # Get the top N most common words sorted by frequency and alphabetically. sorted_word_counts = sorted(word_counts.items(), key=lambda x: (-x[1], x[0])) return sorted_word_counts[:top_n]"},{"question":"You are tasked with analyzing sensor data and determining the periods of significant activity based on given conditions. Given two CSV files, one containing sensor readings and another containing activity thresholds, you need to identify the periods when the sensor readings exceed the specified thresholds. You need to write a function named `identify_activity_periods` with the following input parameters: 1. `readings_path`: a string representing the file path to the CSV file containing the sensor readings. 2. `thresholds_path`: a string representing the file path to the CSV file containing the activity thresholds. The sensor readings file contains the following columns: - `timestamp`: The timestamp of the reading. - `sensor_id`: The identifier for the sensor. - `reading`: The reading value from the sensor. The thresholds file contains the following columns: - `sensor_id`: The identifier for the sensor. - `threshold`: The reading value that indicates significant activity. The function should perform the following steps: 1. Read the sensor readings and activity thresholds from the provided CSV files using `pandas.read_csv`. 2. Merge the sensor readings DataFrame with the thresholds DataFrame on the `sensor_id` column. 3. Filter the merged DataFrame to include only those rows where the `reading` value exceeds the `threshold` value. 4. Group the filtered DataFrame by `sensor_id` and calculate the start and end time of each contiguous period of significant activity. A period is considered contiguous if there are no gaps between the timestamps for that `sensor_id`. 5. Create a new DataFrame with columns `sensor_id`, `start_time`, and `end_time` representing each significant activity period. Finally, the function should return the resulting DataFrame containing the periods of significant activity for each sensor.","solution":"import pandas as pd def identify_activity_periods(readings_path, thresholds_path): # Read the CSV files readings_df = pd.read_csv(readings_path) thresholds_df = pd.read_csv(thresholds_path) # Merge the sensor readings with activity thresholds merged_df = pd.merge(readings_df, thresholds_df, on=\'sensor_id\') # Filter where readings exceed the threshold significant_df = merged_df[merged_df[\'reading\'] > merged_df[\'threshold\']] # Sort by sensor_id and timestamp significant_df = significant_df.sort_values(by=[\'sensor_id\', \'timestamp\']) # Function to find contiguous periods of activity def find_periods(group): periods = [] start_time = None end_time = None for i, row in group.iterrows(): if start_time is None: start_time = row[\'timestamp\'] end_time = row[\'timestamp\'] elif row[\'timestamp\'] == previous_timestamp + 1: # Assuming contiguous timestamps are sequential for simplicity end_time = row[\'timestamp\'] else: periods.append([start_time, end_time]) start_time = row[\'timestamp\'] end_time = row[\'timestamp\'] previous_timestamp = row[\'timestamp\'] if start_time is not None: periods.append([start_time, end_time]) return periods # List to store results result = [] # Group by sensor_id and calculate periods for sensor_id, group in significant_df.groupby(\'sensor_id\'): periods = find_periods(group) for period in periods: result.append({ \'sensor_id\': sensor_id, \'start_time\': period[0], \'end_time\': period[1] }) return pd.DataFrame(result)"},{"question":"Create a function that takes a list of integers, groups these integers by their frequency of occurrence, and returns a dictionary. The keys of this dictionary should be the frequency counts, and the values should be lists of integers that have the corresponding frequency. The function should handle potential edge cases, such as an empty list. The function should output: dict: A dictionary with frequency counts as keys and lists of integers as values. You should write self-contained code starting with: ``` def group_by_frequency(lst): ``` Example: ``` # Input lst = [4, 5, 6, 5, 4, 3] # Output { 2: [4, 5], 1: [6, 3] } ```","solution":"def group_by_frequency(lst): Group integers in a list by their frequency of occurrence. Parameters: lst (list of int): A list of integers. Returns: dict: A dictionary where the keys are frequency counts, and the values are lists of integers with the corresponding frequency. from collections import Counter, defaultdict # Count the frequency of each integer in the list frequency_count = Counter(lst) # Create a dictionary to store integers grouped by their frequency grouped_dict = defaultdict(list) # Populate the dictionary with frequencies as keys and lists of integers as values for number, freq in frequency_count.items(): grouped_dict[freq].append(number) return dict(grouped_dict)"},{"question":"In this exercise, you will be implementing a function in Python to work with file system paths using the `os` library. Your task is to write a function `get_file_extension` that takes a single string argument representing a file path and returns the file extension. The file extension is defined as the substring after the last dot `.` in the file name. If the file has no extension, return an empty string. # Function Signature ```python def get_file_extension(file_path: str) -> str: pass ``` # Input - `file_path` (type: str): A string representing the file path. # Output - (type: str): The file extension, or an empty string if there is no extension. # Example ```python assert get_file_extension(\\"/user/local/bin/script.py\\") == \\"py\\" assert get_file_extension(\\"/user/local/bin/archive.tar.gz\\") == \\"gz\\" assert get_file_extension(\\"/user/local/bin/README\\") == \\"\\" assert get_file_extension(\\"/path/to/.hiddenfile\\") == \\"\\" ``` # Requirements You need to use the `os.path.splitext` function from the `os` library to solve this problem. Here is the function you should use: os.path.splitext ```python os.path.splitext(path) Split the pathname path into a pair (root, ext) such that root + ext == path, and ext is empty or begins with a period and contains at most one period. ``` **Note:** Your task is specifically to use this method to extract the file extension from the given file path. Do not use any string operations or regular expressions for this task.","solution":"import os def get_file_extension(file_path: str) -> str: Returns the file extension from the given file path. If the file has no extension, returns an empty string. _, ext = os.path.splitext(file_path) return ext.lstrip(\'.\')"},{"question":"You are asked to create a function `prime_factorization(n)` that returns the prime factors of a given integer `n` in ascending order. The function should take a single positive integer input greater than 1 and return a list of prime factors. The detailed requirements for the function are: - The function should initialize an empty list to store the prime factors. - Use a while loop to check and divide the integer `n` by 2 until it is no longer divisible by 2. Append 2 to the prime factors list for each division. - Starting from 3, use a for loop that runs through all odd numbers up to the square root of `n`. For each number, use a while loop to check and divide `n` by this number until it is no longer divisible. Append the number to the prime factors list for each division. - If after the loop, `n` is still greater than 2, append `n` itself to the prime factors list since it must be prime at this point. Ensure the function handles edge cases such as very large values of `n` efficiently. The `prime_factorization` function definition should be as follows: ```python def prime_factorization(n): # Your implementation goes here ``` Examples: ```python prime_factorization(28) # Returns [2, 2, 7] prime_factorization(60) # Returns [2, 2, 3, 5] prime_factorization(29) # Returns [29] ```","solution":"def prime_factorization(n): Returns the prime factors of a given integer n in ascending order. Parameters: n (int): A positive integer greater than 1 to factorize. Returns: List[int]: A list of prime factors of n. prime_factors = [] # Checking and dividing by 2 while n % 2 == 0: prime_factors.append(2) n //= 2 # Checking and dividing by odd numbers from 3 upwards i = 3 while i * i <= n: while n % i == 0: prime_factors.append(i) n //= i i += 2 # If n is a prime number greater than 2 if n > 2: prime_factors.append(n) return prime_factors"},{"question":"You are required to write a function named `k_smallest_elements` that takes two parameters: 1. A list of integers `arr` 2. An integer `k` The function should return a list of the `k` smallest elements from the array in increasing order. **Requirements:** 1. You must not use built-in sorting functions like `sorted` or `sort`. 2. Your solution should handle cases where `k` is larger than the length of the list by returning all elements sorted. 3. Aim for an efficient solution beyond the basic approach of sorting the entire list. 4. You may assume that `arr` contains unique elements. # Example ```python # Example call to the function result = k_smallest_elements([7, 10, 4, 3, 20, 15], 3) print(result) ``` Output should be: ``` [3, 4, 7] ``` --- **Additional Example** ```python # Example call with k larger than list length result = k_smallest_elements([3, 5, 1, 2], 6) print(result) ``` Output should be: ``` [1, 2, 3, 5] ``` Your task is to correctly implement this function using the provided requirements.","solution":"import heapq def k_smallest_elements(arr, k): Returns the list of k smallest elements from arr in increasing order. If k is larger than the length of the list, returns all elements sorted. if k >= len(arr): # If k is larger than or equal to length of the list, return all elements sorted return heapq.nsmallest(len(arr), arr) else: # Otherwise return k smallest elements return heapq.nsmallest(k, arr)"},{"question":"You are required to implement a function that manages a simple inventory system for a store. The inventory keeps track of item names and their quantities. The system should allow adding new items, updating quantities of existing items, and retrieving the current inventory status. **Function Name**: `manage_inventory()` **Function Role**: The function should execute the following: 1. Prompt the user with options: \\"add\\", \\"update\\", \\"status\\", or \\"exit\\". 2. If the user opts to \\"add\\", they should be able to input the item name and quantity to add to the inventory. 3. If the user opts to \\"update\\", they should be able to input the item name and the new quantity to update the existing item in the inventory. 4. If the user opts for \\"status\\", the function should display the current inventory status in a readable format. 5. If the user opts for \\"exit\\", the function should terminate. 6. Handle cases where the user tries to update an item that does not exist by showing an appropriate message. **Libraries Required**: None Requirements: - Use a dictionary to store and manage the inventory. - Continuously prompt the user for actions until \\"exit\\" is selected. - Ensure that item names are case-insensitive (e.g., \\"Apple\\" and \\"apple\\" should be considered the same item). - Properly format and display the inventory status for readability.","solution":"def manage_inventory(): A function to manage a simple inventory system for a store. inventory = {} while True: choice = input(\\"Choose an action (add, update, status, exit): \\").strip().lower() if choice == \\"add\\": item_name = input(\\"Enter the item name: \\").strip().lower() quantity = int(input(\\"Enter the quantity to add: \\")) if item_name in inventory: inventory[item_name] += quantity else: inventory[item_name] = quantity print(f\\"Added {quantity} of {item_name}\\") elif choice == \\"update\\": item_name = input(\\"Enter the item name: \\").strip().lower() if item_name in inventory: quantity = int(input(\\"Enter the new quantity: \\")) inventory[item_name] = quantity print(f\\"Updated {item_name} to {quantity}\\") else: print(f\\"Item {item_name} does not exist in the inventory.\\") elif choice == \\"status\\": if not inventory: print(\\"Inventory is empty.\\") else: print(\\"Current inventory status:\\") for item, quantity in inventory.items(): print(f\\"{item.capitalize()}: {quantity}\\") elif choice == \\"exit\\": print(\\"Exiting the inventory management system.\\") break else: print(\\"Invalid choice. Please try again.\\")"},{"question":"You are tasked with writing a function to compute the accuracy score of a RandomForestClassifier model using a given number of estimators. This requires importing and utilizing functions from the `sklearn` library. The function you need to implement is `calculate_accuracy`. Here is what the function should do: 1. Fit a `RandomForestClassifier` model on the training data using the provided `n_estimators` parameter. 2. Predict the target values for the test dataset. 3. Calculate and return the accuracy score between the predicted and true target values for the test dataset. The function signature should be: ```python def calculate_accuracy(n_estimators, predictors_train, predictors_test, targ_train, targ_test): ``` Where: - `n_estimators` is an integer specifying the number of trees in the Random Forest. - `predictors_train` is a 2D array of training predictor variables. - `predictors_test` is a 2D array of test predictor variables. - `targ_train` is a 1D array of training target values. - `targ_test` is a 1D array of test target values. You are specifically required to use the `accuracy_score` function from the `sklearn.metrics` module to calculate the accuracy. Refer to the relevant documentation if needed. Here is an example usage of the function: ```python # Example data (assuming these are already preprocessed and split) n_estimators = 100 predictors_train = [[1.1, 2.2], [1.2, 2.4], [1.3, 2.6], [1.4, 2.8]] predictors_test = [[1.15, 2.3], [1.25, 2.5]] targ_train = [0, 1, 0, 1] targ_test = [1, 0] # Calculate accuracy accuracy = calculate_accuracy(n_estimators, predictors_train, predictors_test, targ_train, targ_test) print(accuracy) # This should print the accuracy score ```","solution":"from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import accuracy_score def calculate_accuracy(n_estimators, predictors_train, predictors_test, targ_train, targ_test): Fits a RandomForestClassifier model on the training data with a given number of estimators, predicts the target values for the test dataset, and calculates the accuracy score. Parameters: n_estimators (int): Number of trees in the RandomForest. predictors_train (2D array): Training predictor variables. predictors_test (2D array): Test predictor variables. targ_train (1D array): Training target values. targ_test (1D array): Test target values. Returns: float: Accuracy score of the predictions. # Initialize and fit the RandomForestClassifier model = RandomForestClassifier(n_estimators=n_estimators) model.fit(predictors_train, targ_train) # Predict the target values for the test dataset predictions = model.predict(predictors_test) # Calculate and return the accuracy score accuracy = accuracy_score(targ_test, predictions) return accuracy"},{"question":"You are required to write a function named `find_unique_elements` that will read a given text file containing integers (one integer per line) and return a sorted list of unique integers. The function should take a single parameter: a string representing the file path of the text file. If the file does not exist, the function should raise a `FileNotFoundError`. # Function Signature ```python def find_unique_elements(file_path: str): pass ``` # Example Usage ```python # Assumes the existence of \'data.txt\' with the following content: # 10 # 20 # 10 # 30 # 20 find_unique_elements(\'data.txt\') # Expected output: [10, 20, 30] ``` # Libraries - `os` # Instructions: 1. Use the `os` library to check if the file exists. If it does not, raise a `FileNotFoundError`. 2. Read the contents of the file and convert each line to an integer. 3. Store each unique integer in a set to remove duplicates. 4. Convert the set to a sorted list before returning.","solution":"def find_unique_elements(file_path: str): import os if not os.path.exists(file_path): raise FileNotFoundError(f\\"The file at {file_path} was not found\\") unique_elements = set() with open(file_path, \'r\') as file: for line in file: unique_elements.add(int(line.strip())) return sorted(unique_elements)"},{"question":"In this task, you will implement a function that finds the roots of a quadratic equation using the quadratic formula. The quadratic formula is essential in algebra and numerical analysis, enabling the determination of real-valued roots for polynomial equations of degree two. # Function Signature ```python def find_roots(a: float, b: float, c: float) -> Tuple[Optional[float], Optional[float]]: ``` # Input - `a`: A float representing the coefficient of the (x^2) term. - `b`: A float representing the coefficient of the (x) term. - `c`: A float representing the constant term. # Output - A tuple of two elements, each either a float or None. These are the roots of the quadratic equation calculated using the quadratic formula. If the equation has no real roots, both elements should be None. # Formula The quadratic formula for the roots of the equation (ax^2 + bx + c = 0) is given by: [ x = frac{-b pm sqrt{b^2 - 4ac}}{2a} ] If the discriminant ((b^2 - 4ac)) is negative, the equation has no real roots. # Example ```python print(find_roots(1, -3, 2)) # Output: (2.0, 1.0) print(find_roots(1, 2, 1)) # Output: (-1.0, -1.0) print(find_roots(1, 0, 1)) # Output: (None, None) ``` In this implementation, consider edge cases such as `a = 0`, leading to a non-quadratic equation, and adjust your code to handle these cases appropriately. Use the `math.sqrt` function to perform square root calculations while ensuring robustness in handling real number precision issues.","solution":"from typing import Tuple, Optional import math def find_roots(a: float, b: float, c: float) -> Tuple[Optional[float], Optional[float]]: if a == 0: # If `a` is 0, then it\'s not a quadratic equation. # Linear solution: bx + c = 0 => x = -c / b if b != 0 if b != 0: return -c / b, None else: # If b is also 0, there is no variable to solve for. return None, None # Calculate the discriminant discriminant = b**2 - 4*a*c if discriminant < 0: # No real number solutions return None, None sqrt_discriminant = math.sqrt(discriminant) # Compute the two roots using the quadratic formula root1 = (-b + sqrt_discriminant) / (2 * a) root2 = (-b - sqrt_discriminant) / (2 * a) return root1, root2"},{"question":"Using the Python programming language, implement a function that calculates the moving average of the last \'n\' elements for a given list of numbers. The moving average is the sum of the current element and the previous \'n-1\' elements, divided by \'n\'. The function should return a new list where each element is the moving average of the corresponding element in the input list. If an element has fewer than \'n\' previous elements to form the average, it should include all available elements. The function should handle edge cases where the length of the input list is less than \'n\', which should return an empty list. You should write self-contained code starting with: ``` def moving_average(numbers, n): ``` Example usage: ``` moving_average([10, 20, 30, 40, 50], 3) => [20.0, 30.0, 40.0] moving_average([1, 2, 3, 4, 5, 6], 2) => [1.5, 2.5, 3.5, 4.5, 5.5] moving_average([5, 10], 3) => [] ```","solution":"def moving_average(numbers, n): Calculate the moving average of the last \'n\' elements for a given list of numbers. :param numbers: List of numbers :param n: Number of elements to consider for moving average :return: List of moving averages if n <= 0 or len(numbers) < n: return [] moving_averages = [] for i in range(len(numbers) - n + 1): window = numbers[i:i + n] window_avg = sum(window) / n moving_averages.append(window_avg) return moving_averages"},{"question":"You are tasked with implementing a function that calculates the nth Fibonacci number efficiently using matrix exponentiation. The Fibonacci sequence is defined as: [ F(0) = 0 ] [ F(1) = 1 ] [ F(n) = F(n-1) + F(n-2) text{ for } n geq 2 ] Matrix exponentiation allows for this calculation in ( O(log n) ) time complexity, which is much more efficient than the naive ( O(n) ) recursive or iterative methods. The matrix representation of the Fibonacci sequence is: [ begin{pmatrix} F(n+1) & F(n) F(n) & F(n-1) end{pmatrix} = begin{pmatrix} 1 & 1 1 & 0 end{pmatrix}^n ] # Task: Define the function `fib_matrix_exponentiation(n)` following these steps: 1. Implement matrix multiplication for 2x2 matrices. 2. Implement matrix exponentiation for 2x2 matrices. 3. Use these implementations to calculate the nth power of the Fibonacci matrix. 4. Return the value ( F(n) ) from the resulting matrix. # Function Signature: ```python def fib_matrix_exponentiation(n: int) -> int: ``` # Parameters: - `n`: An integer representing the index in the Fibonacci sequence to calculate. # Returns: - An integer representing the nth Fibonacci number. # Example: ```python # Calculate the 10th Fibonacci number result = fib_matrix_exponentiation(10) print(result) # Output: 55 ``` # Note: Ensure your solution utilizes matrix exponentiation to achieve the desired time complexity.","solution":"def matrix_mult(A, B): Multiplies two 2x2 matrices A and B. return [[A[0][0]*B[0][0] + A[0][1]*B[1][0], A[0][0]*B[0][1] + A[0][1]*B[1][1]], [A[1][0]*B[0][0] + A[1][1]*B[1][0], A[1][0]*B[0][1] + A[1][1]*B[1][1]]] def matrix_exponentiation(M, power): Raises the 2x2 matrix M to the specified power using exponentiation by squaring. result = [[1, 0], [0, 1]] # identity matrix base = M while power > 0: if power % 2 == 1: result = matrix_mult(result, base) base = matrix_mult(base, base) power //= 2 return result def fib_matrix_exponentiation(n): Returns the nth Fibonacci number using matrix exponentiation. if n == 0: return 0 elif n == 1: return 1 F = [[1, 1], [1, 0]] result = matrix_exponentiation(F, n-1) return result[0][0]"},{"question":"You are required to write a function that calculates the frequency of each word in a given string and determines the top N most frequent words. The function should return these words along with their respective frequencies, in descending order of frequency. # Function Signature ```python def top_n_frequent_words(text: str, n: int) -> List[Tuple[str, int]]: ``` # Parameters: - `text` (str): The input text from which words are to be counted. - `n` (int): The number of top frequent words to return. # Requirements: 1. Split the input `text` into words. Words are separated by whitespace and punctuation should be ignored. 2. Convert all words to lower case to ensure case-insensitive counting. 3. Count the frequency of each word. 4. Return a list of tuples, each containing a word and its frequency, in descending order of frequency. The list should contain at most `n` entries. 5. Use `assert` statements to check that `n` is a positive integer. # Example: Given the input: ```python text = \\"This is a test. This test is only a test.\\" n = 2 ``` Calling `top_n_frequent_words(text, n)` should return: ``` [(\'test\', 3), (\'this\', 2)] ``` # Constraints: - You cannot use the `collections.Counter` class. - Ensure proper handling of punctuation and case sensitivity. # Additional Information: - Consider using regular expressions to handle punctuation. - You might find the `re` and `string` libraries useful for this task.","solution":"import re from typing import List, Tuple def top_n_frequent_words(text: str, n: int) -> List[Tuple[str, int]]: Calculates the frequency of each word in a given string and determines the top N most frequent words. Returns these words along with their respective frequencies, in descending order of frequency. :param text: The input text from which words are to be counted. :param n: The number of top frequent words to return. :return: A list of tuples containing the word and its frequency. assert isinstance(n, int) and n > 0, \\"n must be a positive integer\\" # Removing punctuation from the text and converting it to lower case words = re.findall(r\'bw+b\', text.lower()) # Counting the frequency of each word word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 # Sorting the words by frequency in descending order sorted_words = sorted(word_freq.items(), key=lambda item: item[1], reverse=True) # Returning the top n words return sorted_words[:n]"},{"question":"Reads a text file containing an unstructured list of programming languages and their usage count. The task is to parse the data into a structured format, sort it by usage count in descending order, and save the result as a JSON file. Additionally, return the name of the programming language with the highest usage count. The function should output: dict: A dictionary containing the sorted usage count of programming languages. str: The name of the programming language with the highest usage count. You should write self-contained code starting with: ``` import json def task_func(file_path, output_path): ```","solution":"import json def parse_data(data): Parses the unstructured data into a structured dictionary. languages = {} for line in data.splitlines(): if line.strip(): # Assuming each line is in the format \\"Language: usage_count\\" try: language, count = line.split(\':\') languages[language.strip()] = int(count.strip()) except ValueError: continue # Skip lines that do not match the expected format return languages def task_func(file_path, output_path): Reads a text file containing an unstructured list of programming languages and their usage count, parses it into a structured format, sorts it by usage count in descending order, saves the result as a JSON file, and returns the name of the language with the highest usage count. with open(file_path, \'r\') as file: data = file.read() languages = parse_data(data) sorted_languages = dict(sorted(languages.items(), key=lambda item: item[1], reverse=True)) with open(output_path, \'w\') as json_file: json.dump(sorted_languages, json_file, indent=4) most_popular_language = max(languages, key=languages.get) return sorted_languages, most_popular_language"},{"question":"Find the longest substring of a given string that contains at most two distinct characters. The function should return this substring. If there are multiple substrings with equal length, return the one which appears first. The function should output with: str: The longest substring containing at most two distinct characters. You should write self-contained code starting with: ``` def longest_substring_two_distinct(s): ```","solution":"def longest_substring_two_distinct(s): Returns the longest substring containing at most two distinct characters. If there are multiple such substrings with equal length, the one which appears first is returned. n = len(s) if n < 3: return s left, right = 0, 0 hash_map = {} max_length = 2 max_substr = s[:2] while right < n: if len(hash_map) < 3: hash_map[s[right]] = right right += 1 if len(hash_map) == 3: del_idx = min(hash_map.values()) del hash_map[s[del_idx]] left = del_idx + 1 if right - left > max_length: max_length = right - left max_substr = s[left:right] return max_substr"},{"question":"You are given a list of integers where every element appears twice except for one element, which appears exactly once. Write a function `find_unique_element(nums)` to find and return the unique element. The function should make use of constant extra space and linear runtime complexity. Here are the parameters for the function: - `nums`: A list of integers where all elements except one appear twice. You may assume that the list contains at least three elements. Example usage: ```python def find_unique_element(nums): unique_element = 0 for num in nums: unique_element ^= num return unique_element # Example list nums = [4, 1, 2, 1, 2] print(find_unique_element(nums)) # Output: 4 ```","solution":"def find_unique_element(nums): Finds and returns the unique element in the list where every element except one appears twice. Args: nums (list): List of integers. Returns: int: The integer that appears exactly once. unique_element = 0 for num in nums: unique_element ^= num return unique_element # Example list nums = [4, 1, 2, 1, 2] print(find_unique_element(nums)) # Output: 4"},{"question":"You need to develop a function that processes a list of transactions and calculates the balance of a bank account over time. Each transaction has a date, a description, and an amount. Transactions can either be deposits (positive amounts) or withdrawals (negative amounts). The balance should be calculated cumulatively, starting from an initial balance of zero. Your task is to write a function named `calculate_balance`, which accepts a single argument: - `transactions`: A list of dictionaries, where each dictionary contains \'date\' (string in \'YYYY-MM-DD\' format), \'description\' (string), and \'amount\' (float). Your function should perform the following steps: 1. Sort the transactions by date in ascending order. 2. Initialize the balance at zero. 3. Iterate through the list of transactions, updating the balance for each transaction. 4. Return a list of dictionaries, each containing the \'date\', \'balance\', and \'description\' for each transaction. You are required to handle potential exceptions gracefully (e.g., if the \'amount\' key is missing or if the date format is incorrect). The required function signature is: ```python def calculate_balance(transactions): pass ``` Example input: ```python transactions = [ {\'date\': \'2023-01-03\', \'description\': \'Deposit\', \'amount\': 1000.0}, {\'date\': \'2023-01-06\', \'description\': \'Withdrawal\', \'amount\': -200.0}, {\'date\': \'2023-01-05\', \'description\': \'Deposit\', \'amount\': 500.0}, ] ``` Expected output: ```python [ {\'date\': \'2023-01-03\', \'description\': \'Deposit\', \'balance\': 1000.0}, {\'date\': \'2023-01-05\', \'description\': \'Deposit\', \'balance\': 1500.0}, {\'date\': \'2023-01-06\', \'description\': \'Withdrawal\', \'balance\': 1300.0}, ] ```","solution":"from datetime import datetime def calculate_balance(transactions): Calculate the cumulative balance from a list of transactions. Parameters: transactions (list): A list of dictionaries containing \'date\', \'description\', and \'amount\'. Returns: list: A list of dictionaries each containing \'date\', \'description\', and \'balance\'. transactions.sort(key=lambda x: datetime.strptime(x[\'date\'], \'%Y-%m-%d\')) balance = 0 result = [] for transaction in transactions: # Skip transactions with no \'amount\' key if \'amount\' not in transaction: continue balance += transaction[\'amount\'] result.append({ \'date\': transaction[\'date\'], \'description\': transaction[\'description\'], \'balance\': balance }) return result"},{"question":"You are assigned to write a function that simulates a simple elevator system in a building using Python. Your task is to implement a class called `Elevator` which simulates an elevator movement between floors in a building. The building has floors numbered from 1 to `max_floor`. Here are the requirements for the `Elevator` class: - **Class Name:** `Elevator` - **Initializer Parameters:** - `max_floor`: an integer representing the highest floor number in the building. - **Attributes:** - `current_floor`: an integer representing the current floor where the elevator is located, initialized to 1. - `max_floor`: an integer representing the highest floor number in the building. - **Methods:** - `go_up()`: This method should move the elevator up by one floor unless it is already on the highest floor. If the elevator is on the highest floor, it should stay there. - `go_down()`: This method should move the elevator down by one floor unless it is already on the first floor. If the elevator is on the first floor, it should stay there. - `display_floor()`: This method should print the current floor number of the elevator to the console. Write the complete `Elevator` class with the specifications above. Example usage: ```python elevator = Elevator(5) elevator.display_floor() # Output: 1 elevator.go_up() elevator.display_floor() # Output: 2 elevator.go_up() elevator.go_up() elevator.display_floor() # Output: 4 elevator.go_down() elevator.display_floor() # Output: 3 elevator.go_down() elevator.go_down() elevator.go_down() elevator.display_floor() # Output: 1 ``` Note: Do not include any input/output code except in the `display_floor` method.","solution":"class Elevator: def __init__(self, max_floor): self.current_floor = 1 self.max_floor = max_floor def go_up(self): if self.current_floor < self.max_floor: self.current_floor += 1 def go_down(self): if self.current_floor > 1: self.current_floor -= 1 def display_floor(self): print(self.current_floor)"},{"question":"# Find the Overlapping Range within Multiple Time Intervals Implement a function `find_overlap(intervals: List[Tuple[int, int]])` that determines the overlapping range for a given set of time intervals. Each interval is represented as a tuple of two integers, `(start, end)`, where `start` represents the start time and `end` represents the end time of the interval. # Function Signature ```python def find_overlap(intervals: List[Tuple[int, int]]) -> Union[Tuple[int, int], None]: ``` # Parameters - `intervals`: A list of tuples. Each tuple contains two integers: - `start`: An integer representing the start time of the interval. - `end`: An integer representing the end time of the interval. # Return Value The function should return a tuple representing the start and end of the overlapping range if there is an overlap within all the given intervals. If there is no common overlap, the function should return `None`. # Example Given the following list of intervals: ```python intervals = [ (1, 5), (3, 7), (4, 6) ] ``` `find_overlap(intervals)` should return `(4, 5)` as this is the range where all intervals overlap. If the given intervals are: ```python intervals = [ (1, 3), (5, 7) ] ``` `find_overlap(intervals)` should return `None` as there is no common overlapping range among all intervals. # Constraints 1. All start and end times are non-negative integers. 2. You may assume that each interval is well-formed, i.e., `start` &leq; `end` for all intervals. 3. If there are no intervals provided, return `None`.","solution":"from typing import List, Tuple, Union def find_overlap(intervals: List[Tuple[int, int]]) -> Union[Tuple[int, int], None]: if not intervals: return None # Find the maximum of the start times max_start = max(interval[0] for interval in intervals) # Find the minimum of the end times min_end = min(interval[1] for interval in intervals) # Check if there is an overlap if max_start <= min_end: return (max_start, min_end) else: return None"},{"question":"You are assigned to write a Python function that simulates a simple task management system. The primary objective is to add, remove, and list tasks with descriptions and due dates. Each task should have a unique identifier, a description, and a due date. The tasks should be stored in a dictionary where the key is the unique identifier and the value is a dictionary containing the description and due date. # Function Signature: ```python def task_manager(action: str, task_id: int = None, description: str = None, due_date: str = None) -> dict: pass ``` # Input: - `action` (str): The action to perform. It can be one of the following: \\"add\\", \\"remove\\", \\"list\\". - `task_id` (int): The unique identifier for the task. Required for \\"remove\\" and optional for \\"add\\". - `description` (str): The task description. Required for \\"add\\". - `due_date` (str): The due date for the task in the format \\"YYYY-MM-DD\\". Required for \\"add\\". # Instructions: 1. When the action is \\"add\\": - Increment the unique identifier automatically if `task_id` is not provided. - Add the task with the provided description and due date. - Return the updated task list. 2. When the action is \\"remove\\": - Remove the task with the given `task_id`. - Return the updated task list. 3. When the action is \\"list\\": - Return the current list of tasks sorted by their due date in ascending order. # Example Usage: ```python tasks = task_manager(\\"add\\", description=\\"Complete coding assessment\\", due_date=\\"2023-11-01\\") tasks = task_manager(\\"add\\", description=\\"Submit project report\\", due_date=\\"2023-10-15\\") tasks = task_manager(\\"list\\") tasks = task_manager(\\"remove\\", task_id=1) ``` # Expected Output: ```python {\'1\': {\'description\': \'Complete coding assessment\', \'due_date\': \'2023-11-01\'}} {\'1\': {\'description\': \'Complete coding assessment\', \'due_date\': \'2023-11-01\'}, \'2\': {\'description\': \'Submit project report\', \'due_date\': \'2023-10-15\'}} {\'1\': {\'description\': \'Complete coding assessment\', \'due_date\': \'2023-11-01\'}, \'2\': {\'description\': \'Submit project report\', \'due_date\': \'2023-10-15\'}} {\'2\': {\'description\': \'Submit project report\', \'due_date\': \'2023-10-15\'}} ``` # Note: Ensure the function handles potential errors gracefully, such as attempting to remove a task that does not exist or providing an invalid action.","solution":"def task_manager(action: str, task_id: int = None, description: str = None, due_date: str = None): tasks = task_manager.tasks if action == \\"add\\": if task_id is None: task_id = max(tasks.keys(), default=0) + 1 if description is None or due_date is None: raise ValueError(\\"Description and due date are required for adding a task.\\") tasks[task_id] = {\\"description\\": description, \\"due_date\\": due_date} return tasks elif action == \\"remove\\": if task_id is None: raise ValueError(\\"Task ID is required for removing a task.\\") if task_id not in tasks: raise ValueError(f\\"Task ID {task_id} does not exist.\\") del tasks[task_id] return tasks elif action == \\"list\\": return dict(sorted(tasks.items(), key=lambda item: item[1][\\"due_date\\"])) else: raise ValueError(\\"Invalid action. Allowed actions are \'add\', \'remove\', and \'list\'.\\") # Initialize static variable for storing tasks task_manager.tasks = {}"},{"question":"You are tasked with creating a function that calculates the Euclidean distance between data points in a CSV file, and saves the resulting distance matrix to a new CSV file. Each row in the input CSV file represents a data point, and each column represents a feature. Below is an example of how you can calculate the Euclidean distance between two data points: ```python import numpy as np def euclidean_distance(point1, point2): return np.sqrt(np.sum((point1 - point2) ** 2)) ``` Your task is to implement the function `calculate_distance_matrix(input_filepath, output_filepath)` which: 1. Loads the data from a CSV file located at `input_filepath`. 2. Computes the Euclidean distance between each pair of data points. 3. Saves the resulting distance matrix to a new CSV file located at `output_filepath`. The CSV file should have the same number of rows and columns, where the entry at the ith row and jth column represents the distance between the ith and jth data points. The CSV file, `data_points.csv`, contains the following columns: \'Feature1\', \'Feature2\', ..., \'FeatureN\'. Your implementation should correctly calculate and save the distance matrix using the provided `euclidean_distance` function. Function Signature: ```python def calculate_distance_matrix(input_filepath, output_filepath): pass ``` # Constraints: - Use the `pandas` library to read and write the CSV files. - Assume that all necessary import statements are already present. - The input CSV file only contains numerical data for the features. # Example: If `input_filepath` is \'data_points.csv\' and `output_filepath` is \'distance_matrix.csv\', your function should successfully save the distance matrix to \'distance_matrix.csv\'.","solution":"import numpy as np import pandas as pd def euclidean_distance(point1, point2): return np.sqrt(np.sum((point1 - point2) ** 2)) def calculate_distance_matrix(input_filepath, output_filepath): data = pd.read_csv(input_filepath) num_points = data.shape[0] distance_matrix = np.zeros((num_points, num_points)) for i in range(num_points): for j in range(num_points): if i != j: distance_matrix[i, j] = euclidean_distance(data.iloc[i].values, data.iloc[j].values) distance_df = pd.DataFrame(distance_matrix) distance_df.to_csv(output_filepath, index=False)"},{"question":"You have been hired to create a software solution for monitoring and reducing server downtime in a data center. The data center generates server uptime logs which are stored daily in CSV files. Each CSV file contains information about different servers and their uptime during the day in the following format: ``` ServerID,StartTime,EndTime 1,2022-09-12 08:00:00,2022-09-12 17:30:00 2,2022-09-12 09:15:00,2022-09-12 18:45:00 ... ``` Your goal is to write a function called `calculate_uptime` that takes a list of file paths to these CSV files, reads and processes the uptime logs for each server, and returns a summary dictionary with the total uptime in hours for each server over the given period. Here\'s what you need to do: 1. Read each CSV file into a DataFrame using `pandas.read_csv`. 2. Parse the `StartTime` and `EndTime` columns into datetime objects. 3. Compute the uptime for each server in each file by subtracting `StartTime` from `EndTime`. 4. Accumulate the total uptime for each server across all files provided. 5. Return a dictionary where the keys are `ServerID` and the values are the total uptime in hours. You should use the following libraries: - `pandas.read_csv` to read CSV files. - `pandas.to_datetime` to parse the datetime strings. - `datetime.timedelta` to compute uptime durations. Your task is to implement the `calculate_uptime` function as described. The function signature should be: ```python def calculate_uptime(file_paths): pass ``` # Example: Assume we have two CSV files `day1.csv` and `day2.csv` with the following data: `day1.csv`: ``` ServerID,StartTime,EndTime 1,2022-09-12 08:00:00,2022-09-12 17:30:00 2,2022-09-12 09:15:00,2022-09-12 18:45:00 ``` `day2.csv`: ``` ServerID,StartTime,EndTime 1,2022-09-13 08:00:00,2022-09-13 16:00:00 2,2022-09-13 10:00:00,2022-09-13 19:00:00 ``` After processing, your function should return: ```python { 1: 17.5, # Total uptime in hours for ServerID 1 2: 18.5 # Total uptime in hours for ServerID 2 } ```","solution":"import pandas as pd def calculate_uptime(file_paths): Calculate the total uptime for each server from a list of CSV file paths. Args: file_paths (list of str): List of paths to CSV files containing uptime logs. Returns: dict: A dictionary with ServerID as keys and total uptime in hours as values. total_uptime = {} for file_path in file_paths: df = pd.read_csv(file_path) df[\'StartTime\'] = pd.to_datetime(df[\'StartTime\']) df[\'EndTime\'] = pd.to_datetime(df[\'EndTime\']) df[\'Uptime\'] = (df[\'EndTime\'] - df[\'StartTime\']).dt.total_seconds() / 3600.0 for _, row in df.iterrows(): server_id = row[\'ServerID\'] uptime = row[\'Uptime\'] if server_id in total_uptime: total_uptime[server_id] += uptime else: total_uptime[server_id] = uptime return total_uptime"},{"question":"You are given a set of articles represented as strings. Your task is to create a function that extracts the title and publication date from each article using regular expressions. Each article follows a consistent format where the title and publication date are defined as follows: - Title: Enclosed within `<title>` and `</title>` tags. - Publication Date: Enclosed within `<pubDate>` and `</pubDate>` tags, in the format `YYYY-MM-DD`. **Function Signature:** ```python def extract_article_metadata(articles): pass ``` **Input Parameters:** 1. `articles` (list of str): A list of strings, where each string represents an article containing a title and a publication date. **Output:** - Return a list of dictionaries, each containing the \'title\' and \'pubDate\' for the corresponding article. **Example:** Given the following input articles: ```python articles = [ \\"<title>Understanding AI</title><pubDate>2021-06-01</pubDate>This article explains the basics of AI.\\", \\"<title>Advances in Machine Learning</title><pubDate>2022-01-15</pubDate>This article discusses recent advances in ML.\\", \\"<title>The Future of Data Science</title><pubDate>2020-11-30</pubDate>An outlook on the future of Data Science.\\" ] ``` The function should return: ```python [ {\'title\': \'Understanding AI\', \'pubDate\': \'2021-06-01\'}, {\'title\': \'Advances in Machine Learning\', \'pubDate\': \'2022-01-15\'}, {\'title\': \'The Future of Data Science\', \'pubDate\': \'2020-11-30\'} ] ``` **Requirements:** - Use the `re` module from the Python standard library to parse the strings. - Raise a `ValueError` if any article does not contain a valid title or publication date. In this problem, you need to use regular expressions to parse and extract metadata from a list of articles.","solution":"import re def extract_article_metadata(articles): Extract the title and publication date from each article. Args: articles (list of str): A list of article strings. Returns: list of dict: A list containing dictionaries with \'title\' and \'pubDate\'. Raises: ValueError: If any article does not contain a valid title or publication date. metadata_list = [] title_pattern = re.compile(r\\"<title>(.*?)</title>\\") pub_date_pattern = re.compile(r\\"<pubDate>(d{4}-d{2}-d{2})</pubDate>\\") for article in articles: title_match = title_pattern.search(article) pub_date_match = pub_date_pattern.search(article) if not title_match or not pub_date_match: raise ValueError(f\\"Article does not contain a valid title or publication date: {article}\\") title = title_match.group(1) pub_date = pub_date_match.group(1) metadata_list.append({\'title\': title, \'pubDate\': pub_date}) return metadata_list"},{"question":"Write a function `zigzag_traverse(matrix)` that takes a 2D list `matrix` and returns a list of integers representing the elements in a zigzag order starting from the top-left corner. # Requirements 1. **Input**: The input is a 2D list named `matrix` where each sub-list is of equal length. - Example: `matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]` 2. **Output**: The output should be a list of integers representing the elements of the matrix in a zigzag order starting from the top-left corner. # Zigzag Traverse Rules - Begin traversal from the matrix\'s top-left corner. - Traverse diagonally downwards to the left edge or bottom edge. - Then, traverse diagonally upwards to the top edge or right edge. - Continue this pattern until you cover all elements of the matrix. **Example**: For the input `matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]`, the zigzag order would be: ``` [1, 2, 4, 7, 5, 3, 6, 8, 9] ``` # Function Signature ```python def zigzag_traverse(matrix: List[List[int]]) -> List[int]: pass ``` Make sure to handle edge cases such as single-row or single-column matrices, ensuring the function operates correctly for various matrix dimensions.","solution":"def zigzag_traverse(matrix): if not matrix or not matrix[0]: return [] row_count = len(matrix) col_count = len(matrix[0]) result = [] row, col = 0, 0 upward = True while row < row_count and col < col_count: result.append(matrix[row][col]) if upward: if col == col_count - 1: # Reached right border row += 1 upward = False elif row == 0: # Reached top border col += 1 upward = False else: # Otherwise move up-right row -= 1 col += 1 else: if row == row_count - 1: # Reached bottom border col += 1 upward = True elif col == 0: # Reached left border row += 1 upward = True else: # Otherwise move down-left row += 1 col -= 1 return result"},{"question":"In this problem, you need to simulate and process transactions to determine the final balance of a user\'s bank account over a series of deposits and withdrawals. The focus of this task is to understand how to manipulate lists and utilize basic arithmetic operations effectively. You are required to implement the function `calculate_final_balance(transactions: List[Tuple[str, float]]) -> float` that processes a list of transactions and calculates the final balance. Here is the step-by-step breakdown of what your function should do: 1. Start with an initial balance of 0.0. 2. Iterate through each transaction in the `transactions` list. 3. For each transaction, check the type of transaction (\'deposit\' or \'withdrawal\'). - If it is a \'deposit\', add the specified amount to the balance. - If it is a \'withdrawal\', subtract the specified amount from the balance. 4. Return the final balance after processing all transactions. **Example:** Assume you have a list of transactions: ``` transactions = [ (\\"deposit\\", 100.0), (\\"withdrawal\\", 50.0), (\\"deposit\\", 25.0), (\\"withdrawal\\", 10.0), ] ``` Processing this list of transactions should result in a final balance of: ``` 65.0 ``` Your function signature should be: ```python from typing import List, Tuple def calculate_final_balance(transactions: List[Tuple[str, float]]) -> float: # Your implementation here ``` Ensure your implementation correctly handles the specified transaction types and accurately computes the final balance.","solution":"from typing import List, Tuple def calculate_final_balance(transactions: List[Tuple[str, float]]) -> float: Processes a list of transactions and calculates the final balance. Parameters: transactions (List[Tuple[str, float]]): A list of transactions where each transaction is a tuple containing a string indicating the type of transaction (\'deposit\' or \'withdrawal\') and a float indicating the amount. Returns: float: The final balance after processing all transactions. balance = 0.0 for transaction in transactions: transaction_type, amount = transaction if transaction_type == \\"deposit\\": balance += amount elif transaction_type == \\"withdrawal\\": balance -= amount return balance"},{"question":"Create a function named `summarize_json_data(json_file: str) -> dict` that takes a file path as an input, pointing to a JSON file (`json_file`). The function should: 1. Read the `json_file` and parse its content. 2. The JSON file is an array of records, where each record is a dictionary with consistent keys across all records. 3. Calculate and return a summary dictionary with the following information: - `total_records`: the total number of records in the JSON file. - For each key in the first record, calculate `unique_values_{key}` which is the number of unique values for that key across all records (replace `{key}` with the actual key name). For example, if the JSON file content is: ```json [ {\\"name\\": \\"Alice\\", \\"age\\": 30}, {\\"name\\": \\"Bob\\", \\"age\\": 25}, {\\"name\\": \\"Alice\\", \\"age\\": 35} ] ``` The function should return: ```python { \\"total_records\\": 3, \\"unique_values_name\\": 2, \\"unique_values_age\\": 3 } ``` Use appropriate methods from Python\'s `json` module to handle the reading and parsing of the JSON file contents.","solution":"import json def summarize_json_data(json_file: str) -> dict: Reads a JSON file, summarizes the total number of records and unique values for each key. :param json_file: Path to the JSON file. :return: Dictionary summarizing the JSON data. with open(json_file, \'r\') as file: data = json.load(file) summary = {} if not data: return summary # Return empty dict if there\'s no data summary[\'total_records\'] = len(data) keys = data[0].keys() for key in keys: unique_values = set() for record in data: unique_values.add(record[key]) summary[f\'unique_values_{key}\'] = len(unique_values) return summary"},{"question":"Create a function that takes a list of names and a list of integers representing the marks obtained by each student. The function should return the name of the student with the highest mark. If there are multiple students with the highest mark, any one of them can be returned. You should write self-contained code starting with: ``` def highest_mark_student(names, marks): ```","solution":"def highest_mark_student(names, marks): Returns the name of the student with the highest mark. If there are multiple students with the highest mark, any one of them can be returned. if not names or not marks or len(names) != len(marks): return None max_mark = max(marks) max_index = marks.index(max_mark) return names[max_index]"},{"question":"You are required to implement a function that normalizes the pixel values of a grayscale image. The function should adjust the pixel values such that the minimum and maximum values of the image become 0 and 255 respectively. This process is often referred to as contrast stretching. You should use the NumPy library to perform the necessary operations. Function Signature: ```python def contrast_stretching(image: np.ndarray) -> np.ndarray: Perform contrast stretching on a grayscale image. Parameters ---------- image : np.ndarray Input grayscale image to be normalized. Returns ------- np.ndarray Normalized image with pixel values scaled from 0 to 255. pass ``` Requirements: 1. Utilize the NumPy functions to handle arrays and apply the contrast stretching. 2. Follow these steps in your function: - Identify the minimum and maximum pixel values in the input image. - Use these values to scale the pixel values of the image such that the minimum value becomes 0 and the maximum value becomes 255. - The scaling should be performed using the formula: `new_pixel = ((old_pixel - min_pixel) / (max_pixel - min_pixel)) * 255`. 3. **Input**: - `image` (np.ndarray): A grayscale image represented as a 2D NumPy array. 4. **Output**: - Return the normalized image as a 2D NumPy array with pixel values scaled from 0 to 255.","solution":"import numpy as np def contrast_stretching(image: np.ndarray) -> np.ndarray: Perform contrast stretching on a grayscale image. Parameters ---------- image : np.ndarray Input grayscale image to be normalized. Returns ------- np.ndarray Normalized image with pixel values scaled from 0 to 255. min_pixel = image.min() max_pixel = image.max() # Apply contrast stretching formula stretched_image = ((image - min_pixel) / (max_pixel - min_pixel)) * 255 # Ensure the result is in uint8 format stretched_image = stretched_image.astype(np.uint8) return stretched_image"},{"question":"You are required to write a module in Python to manage an inventory of products in a store. Each product has a name, a category, a price, and a quantity in stock. The module should allow adding new products, updating product details, and querying the inventory. Your task is to implement the following functions: 1. `add_product(inventory: dict, name: str, category: str, price: float, quantity: int) -> None`: - Adds a new product to the inventory. If the product already exists (i.e., same name and category), update its price and quantity. 2. `update_product(inventory: dict, name: str, category: str, price: float = None, quantity: int = None) -> None`: - Updates the specified product\'s price and/or quantity without affecting the other attributes. If the product does not exist, raise a `ValueError`. 3. `query_inventory(inventory: dict, category: str = None) -> list`: - Returns a list of products in the inventory. If a category is specified, only return products in that category. Each product in the list should be represented as a dictionary with keys: `name`, `category`, `price`, and `quantity`. Here are the steps to implement this: - Define an `inventory` as a dictionary where keys are tuples `(name, category)` and values are dictionaries representing the product details. - Implement the `add_product`, `update_product`, and `query_inventory` functions as specified. **Example Usage**: ```python inventory = {} add_product(inventory, \'Laptop\', \'Electronics\', 999.99, 10) add_product(inventory, \'Smartphone\', \'Electronics\', 599.99, 25) add_product(inventory, \'Coffee Maker\', \'Appliances\', 49.99, 15) update_product(inventory, \'Laptop\', \'Electronics\', quantity=12) print(query_inventory(inventory)) print(query_inventory(inventory, \'Electronics\')) ``` Expected output: ``` [ {\'name\': \'Laptop\', \'category\': \'Electronics\', \'price\': 999.99, \'quantity\': 12}, {\'name\': \'Smartphone\', \'category\': \'Electronics\', \'price\': 599.99, \'quantity\': 25}, {\'name\': \'Coffee Maker\', \'category\': \'Appliances\', \'price\': 49.99, \'quantity\': 15} ] [ {\'name\': \'Laptop\', \'category\': \'Electronics\', \'price\': 999.99, \'quantity\': 12}, {\'name\': \'Smartphone\', \'category\': \'Electronics\', \'price\': 599.99, \'quantity\': 25} ] ```","solution":"def add_product(inventory, name, category, price, quantity): Adds a new product to the inventory or updates the price and quantity if the product already exists. key = (name, category) if key in inventory: inventory[key][\'price\'] = price inventory[key][\'quantity\'] += quantity else: inventory[key] = { \'name\': name, \'category\': category, \'price\': price, \'quantity\': quantity } def update_product(inventory, name, category, price=None, quantity=None): Updates the specified product\'s price and/or quantity without affecting other attributes. Raises a ValueError if the product does not exist. key = (name, category) if key not in inventory: raise ValueError(\\"Product not found in inventory\\") if price is not None: inventory[key][\'price\'] = price if quantity is not None: inventory[key][\'quantity\'] = quantity def query_inventory(inventory, category=None): Returns a list of products in the inventory. If a category is specified, only returns products in that category. products = [] for key, details in inventory.items(): if category is None or category == details[\'category\']: products.append({ \'name\': details[\'name\'], \'category\': details[\'category\'], \'price\': details[\'price\'], \'quantity\': details[\'quantity\'] }) return products"},{"question":"In this problem, you are required to implement a function `find_path(matrix, start, end)` that computes the shortest path from a starting cell to an ending cell in a given 2D grid `matrix` using Breadth-First Search (BFS). The input grid consists of cells with values `0` or `1`, where `0` represents an open cell through which movement is allowed, and `1` represents an obstacle. The function\'s input parameters are described as follows: - `matrix`: A list of lists representing the grid where each element is either `0` or `1`. - `start`: A tuple `(x, y)` representing the starting cell coordinates. - `end`: A tuple `(x, y)` representing the ending cell coordinates. The function should return a list of tuples representing the cells in the shortest path from `start` to `end`. If no path exists, return an empty list. Only horizontal or vertical movements are allowed. You will need to complete the following steps in your function: 1. Validate the input to ensure the `start` and `end` coordinates are within the bounds of the matrix and are open cells. 2. Use a queue to implement the BFS algorithm. 3. Track visited cells to avoid revisiting them. 4. Reconstruct the path from the end cell to the start cell using a dictionary that maps each cell to its previous cell in the BFS traversal. Here is the required function signature: ```python from collections import deque def find_path(matrix, start, end): pass ``` To facilitate the BFS implementation, here’s a utility function to get valid neighbors of a cell: ```python def get_neighbors(matrix, cell): neighbors = [] x, y = cell for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < len(matrix) and 0 <= ny < len(matrix[0]) and matrix[nx][ny] == 0: neighbors.append((nx, ny)) return neighbors ```","solution":"from collections import deque def get_neighbors(matrix, cell): neighbors = [] x, y = cell for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < len(matrix) and 0 <= ny < len(matrix[0]) and matrix[nx][ny] == 0: neighbors.append((nx, ny)) return neighbors def find_path(matrix, start, end): if not matrix or not start or not end: return [] rows, cols = len(matrix), len(matrix[0]) sx, sy = start ex, ey = end # Validate start and end positions if not (0 <= sx < rows and 0 <= sy < cols and matrix[sx][sy] == 0): return [] if not (0 <= ex < rows and 0 <= ey < cols and matrix[ex][ey] == 0): return [] queue = deque([(start)]) visited = set() visited.add(start) prev = {start: None} while queue: current = queue.popleft() if current == end: path = [] while current: path.append(current) current = prev[current] return path[::-1] for neighbor in get_neighbors(matrix, current): if neighbor not in visited: queue.append(neighbor) visited.add(neighbor) prev[neighbor] = current return []"},{"question":"**You need to develop a Python function called `file_merger()` that merges several text files into a single output file. This function should carry out the following steps: 1. **Accept a list of file paths and an output file path as arguments**. For instance, `file_merger([\\"file1.txt\\", \\"file2.txt\\"], \\"merged_output.txt\\")`. 2. **Read the content from each of the specified input files and write it to the output file** in the same order as the input file paths were provided. Add a line break between the contents of each file. 3. **Handle any potential file opening/reading errors gracefully** by using try-except blocks and print an appropriate message if an error occurs (e.g., if a file does not exist). 4. **Ensure the output file contains content from all input files even if some input files are missing or unreadable**. Continue processing the next files in the list without terminating the entire operation prematurely. Remember to include necessary imports and handle file operations efficiently. Below is the initial code structure to help you get started: ```python def file_merger(input_files, output_file): # Your implementation here pass # Example usage: # file_merger([\\"file1.txt\\", \\"file2.txt\\"], \\"merged_output.txt\\") ``` Implement the `file_merger()` function to perform the specified operations. --- **","solution":"def file_merger(input_files, output_file): Merges content of several text files into a single output file. Args: input_files (list): List of file paths to be merged. output_file (str): The output file path where the merged content will be stored. with open(output_file, \'w\') as outfile: for file in input_files: try: with open(file, \'r\') as infile: content = infile.read() outfile.write(content) outfile.write(\'n\') # Add a line break between the contents of each file except Exception as e: print(f\\"An error occurred while reading {file}: {e}\\")"},{"question":"Implement a function that simulates a simplified inventory management system for an online store. The function should allow adding items with their respective quantities, removing a specified quantity of items, and querying the current quantity of a specific item. The function should output with: dict: A dictionary representing the current inventory. You should write self-contained code starting with: ``` def inventory_system(operations): Args: operations (list of tuples): A list where each tuple contains a string (operation type) followed by necessary parameters. Operations can be \'add\', \'remove\', or \'query\'. e.g., (\'add\', \'itemA\', 10), (\'remove\', \'itemA\', 5), (\'query\', \'itemA\') Returns: dict: A dictionary representing the current inventory. ``` # Example: ``` inventory_system([(\'add\', \'apple\', 10), (\'add\', \'banana\', 5), (\'remove\', \'apple\', 3), (\'query\', \'apple\')]) ``` Output: ``` {\'apple\': 7, \'banana\': 5} ```","solution":"def inventory_system(operations): Args: operations (list of tuples): A list where each tuple contains a string (operation type) followed by necessary parameters. Operations can be \'add\', \'remove\', or \'query\'. e.g., (\'add\', \'itemA\', 10), (\'remove\', \'itemA\', 5), (\'query\', \'itemA\') Returns: dict: A dictionary representing the current inventory. inventory = {} for operation in operations: op_type = operation[0] item = operation[1] if op_type == \'add\': quantity = operation[2] if item in inventory: inventory[item] += quantity else: inventory[item] = quantity elif op_type == \'remove\': quantity = operation[2] if item in inventory: inventory[item] = max(0, inventory[item] - quantity) # Ensure inventory does not go negative elif op_type == \'query\': # In the actual implementation, we might print or store the query result somewhere. # Here we\'re handling this as if nothing needed to be done since the question does not specify how to handle queries. pass return inventory"},{"question":"Develop a Python function `rotate_matrix(matrix)` that rotates a given square matrix by 90 degrees in a clockwise direction. The function takes the following parameter: - `matrix`: A 2D list representing a square n x n matrix. The function should modify the input matrix in place without using any additional 2D lists. # Example: Given: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` After calling `rotate_matrix(matrix)`, the matrix should be transformed into: ```python [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Constraints: - The input matrix will always be a square matrix (n x n). - Minimize the usage of additional space and ensure the operation is performed in place. # Function Signature: ```python def rotate_matrix(matrix: [[int]]) -> None: pass ``` # Implementation Details: - Utilize an efficient algorithm that performs the task in O(n^2) time complexity. - Make use of matrix transposition and row reversal techniques to achieve the rotation.","solution":"def rotate_matrix(matrix): Rotates the given n x n matrix by 90 degrees clockwise in place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Parse a JSON file that contains employee records and perform the following tasks: 1. Extract the employees\' names and salaries, and compute the average salary. 2. Identify and return the highest-paid employee\'s name and salary. 3. Handle the case where the JSON is empty, which should raise the exception: ValueError: No employee records found. The function should output: Tuple: A tuple containing the average salary, and a dictionary with the highest-paid employee\'s name and their salary. You should write self-contained code starting with: ``` import json def process_employee_data(file_path): ```","solution":"import json def process_employee_data(file_path): Parse a JSON file that contains employee records and perform the following tasks: 1. Extract the employees\' names and salaries, and compute the average salary. 2. Identify and return the highest-paid employee\'s name and salary. 3. Handle the case where the JSON is empty, which should raise the exception: ValueError: No employee records found. :param file_path: Path to the JSON file containing employee records. :return: Tuple containing the average salary and a dictionary with the highest-paid employee\'s name and their salary. with open(file_path, \'r\') as file: data = json.load(file) if not data: raise ValueError(\\"No employee records found.\\") total_salary = 0 highest_paid_employee = None highest_salary = 0 num_employees = len(data) for record in data: salary = record[\'salary\'] total_salary += salary if salary > highest_salary: highest_salary = salary highest_paid_employee = record average_salary = total_salary / num_employees result = { \\"name\\": highest_paid_employee[\'name\'], \\"salary\\": highest_salary } return (average_salary, result)"},{"question":"Write a Python function named `k_largest_elements(arr, k)` that finds the `k` largest elements in an array. The function should use a max-heap to identify the `k` largest elements efficiently. The `k_largest_elements` function must perform the following steps: 1. Convert the given array into a max-heap. 2. Extract the `k` largest elements from the heap. 3. Return the `k` largest elements as a sorted list in descending order. You are required to use the `heapq` module for heap operations. **Function Signature:** ```python def k_largest_elements(arr, k): pass ``` **Requirements:** - `arr` is a list of integers. - `k` is an integer such that `0 < k <= len(arr)`. - The output list should be sorted in descending order. - Use `heapq._heapify_max` to convert the list into a max-heap and `heapq._heappop_max` to extract the maximum elements from the heap. # Example ```python > arr = [3, 2, 1, 5, 6, 4] > k = 2 > result = k_largest_elements(arr, k) > print(result) # Output: [6, 5] ``` In this example, the two largest elements in the array `[3, 2, 1, 5, 6, 4]` are `6` and `5`. The returned list `[6, 5]` is sorted in descending order.","solution":"import heapq def k_largest_elements(arr, k): Returns the k largest elements in the given array in descending order. Parameters: arr (list of int): List of integers k (int): Number of largest elements to return Returns: list of int: Sorted list in descending order of k largest elements if k <= 0 or k > len(arr): raise ValueError(\\"k must be greater than 0 and less than or equal to the length of the array\\") # Convert arr to a max-heap heapq._heapify_max(arr) # Extract the k largest elements from the heap largest_elements = [heapq._heappop_max(arr) for _ in range(k)] return largest_elements"},{"question":"You are given a function definition that aims to evaluate a mathematical expression represented as a string and return the computed result. Your task is to complete and correct the function named `evaluateExpression`. This function should: 1. Take a single argument: - `expression`: a string representing a mathematical expression. The expression may contain digits, the operators `+`, `-`, `*`, `/`, and parentheses `(`, `)`. 2. Parse the `expression` and compute the result following the standard order of operations (PEMDAS/BODMAS rules). 3. Ensure that the function handles potential division by zero gracefully by returning `None` when such a case occurs. 4. Return the computed result as a float for any given valid expression. You are required to implement this function with the following steps: - Parse the input string and evaluate the expression according to the precedence of operators. - Handle edge cases such as division by zero. - Ensure the function returns a float value as a result. The function should be defined as: ```python def evaluateExpression(expression): ... ``` **Example:** Given the following expression `expression = \\"3 + 5 * (2 - 8) / 4\\"` The expected output is `1.0` **Constraints:** - The input expression will be a non-empty string containing only digits, spaces, and the operators `+`, `-`, `*`, `/`, `(`, `)`. - The function should return the final result as a float. **Note:** - You can assume that the input expression is always valid and does not contain any invalid characters. Below are some additional test cases: ```python print(evaluateExpression(\\"10 + 2 * 6\\")) # Output: 22.0 print(evaluateExpression(\\"100 * 2 + 12\\")) # Output: 212.0 print(evaluateExpression(\\"100 * ( 2 + 12 )\\")) # Output: 1400.0 print(evaluateExpression(\\"100 * ( 2 + 12 ) / 14\\")) # Output: 100.0 print(evaluateExpression(\\"10 / 0\\")) # Output: None ```","solution":"def evaluateExpression(expression): def operate(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': if b == 0: raise ZeroDivisionError return a / b def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def applyOps(operators, values): right = values.pop() left = values.pop() op = operators.pop() values.append(operate(left, right, op)) def evaluate(expression): operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue elif expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit() or expression[i] == \'.\': val = 0 decimal = False scale = 0.1 while (i < len(expression) and (expression[i].isdigit() or expression[i] == \'.\')): if expression[i] == \'.\': decimal = True elif decimal: val += (int(expression[i]) * scale) scale /= 10 else: val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while len(operators) != 0 and operators[-1] != \'(\': applyOps(operators, values) operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(expression[i])): applyOps(operators, values) operators.append(expression[i]) i += 1 while len(operators) != 0: applyOps(operators, values) return values[-1] try: return float(evaluate(expression)) except ZeroDivisionError: return None"},{"question":"In this problem, you need to implement a function that simulates the game of Life, invented by John Conway. The Game of Life is a cellular automaton where each cell can either be alive (1) or dead (0). The state of each cell in the next generation is determined by the following rules: 1. Any live cell with fewer than two live neighbors dies (underpopulation). 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies (overpopulation). 4. Any dead cell with exactly three live neighbors becomes a live cell (reproduction). You need to implement the function `game_of_life` that follows these specifications: - **Function Signature**: ```python def game_of_life(board: List[List[int]]) -> List[List[int]]: ``` - **Parameters**: - `board` (List[List[int]]): A 2D list representing the initial state of the cells, where 1 represents a live cell and 0 represents a dead cell. - **Returns**: - `List[List[int]]`: A 2D list representing the state of the cells after one generation. # Requirements: 1. Do not modify the input board directly; create a copy of the board to perform the state transitions. 2. Implement the state transitions according to the rules of the Game of Life. 3. Ensure that cells on the border of the board are handled correctly, assuming that cells outside the boundaries are dead. # Example: ```python initial_board = [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] next_generation = game_of_life(initial_board) print(next_generation) ``` Output: ``` [ [0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0] ] ``` # Steps: 1. Create a copy of the initial board. 2. Iterate through each cell in the board, count its live neighbors, and apply the rules to determine its next state. 3. Return the board with the updated states.","solution":"from typing import List def game_of_life(board: List[List[int]]) -> List[List[int]]: def count_live_neighbors(board, x, y): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] live_neighbors = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if nx >= 0 and nx < len(board) and ny >= 0 and ny < len(board[0]): live_neighbors += board[nx][ny] return live_neighbors rows, cols = len(board), len(board[0]) new_board = [[board[r][c] for c in range(cols)] for r in range(rows)] for r in range(rows): for c in range(cols): live_neighbors = count_live_neighbors(board, r, c) if board[r][c] == 1: # Live cell if live_neighbors < 2 or live_neighbors > 3: new_board[r][c] = 0 else: # Dead cell if live_neighbors == 3: new_board[r][c] = 1 return new_board"},{"question":"You are asked to implement a function that analyzes a text document to find the most common word of a specified length. The function should ignore case and exclude any punctuation. It should also handle ties by returning the first word encountered of that length with the maximum frequency. The goal of this exercise is to practice text processing techniques including string manipulation, regular expressions for cleansing data, as well as using collections to manage word frequencies. You need to write a function named `most_common_word` that takes two parameters: a string representing the text document and an integer representing the word length to search for. It should return the most common word of that length. The function prototype should be: ```python def most_common_word(text: str, length: int) -> str: ``` The function should perform the following steps: 1. **Cleanse the text** by converting it to lowercase, and removing all punctuations. 2. **Split the text** into individual words. 3. **Filter words** that match the specified length. 4. **Count the frequency** of each filtered word. 5. **Identify the most common word** of the given length. In case of ties, return the first encountered word with the highest frequency. Example: ```python text = \\"Hello, world! It\'s a beautiful day in the world. Hello to everyone.\\" length = 5 print(most_common_word(text, length)) # Output: \\"hello\\" ```","solution":"import re from collections import Counter def most_common_word(text: str, length: int) -> str: Returns the most common word of a specified length in the given text. Parameters: text (str): The input text document. length (int): The length of the word to search for. Returns: str: The most common word of the specified length. # Convert text to lowercase text = text.lower() # Remove all punctuations text = re.sub(r\'[^ws]\', \'\', text) # Split the text into individual words words = text.split() # Filter words that match the specified length filtered_words = [word for word in words if len(word) == length] # Count the frequency of each filtered word word_count = Counter(filtered_words) # Identify the most common word of the given length if word_count: most_common_word = word_count.most_common(1)[0][0] else: most_common_word = \\"\\" return most_common_word"},{"question":"You are required to write a function called `random_walk` using the Python `turtle` graphics library. The `random_walk` function should create a `turtle.Screen` object, set the background color of the screen to \\"black\\", and then create a `Turtle` object named `leo` with the shape of a turtle and the color \\"yellow\\". The turtle `leo` should perform a random walk on the screen. Specifically, `leo` should: 1. Move forward by a random distance between 20 and 50 units. 2. Turn by a random angle between 0 and 360 degrees. 3. Repeat steps 1 and 2, 30 times. The random movements should create a unique pattern every time the function is run. To achieve this, use the `random` module to generate random distances and angles. When the random walk is complete, the function should wait for a user\'s click on the screen to close the window. Make sure to import the `random` module and the necessary classes and methods from the `turtle` library to properly implement the function. To summarize, your `random_walk` function should perform the following steps: 1. Create and display a `turtle.Screen` object with a black background. 2. Instantiate a `Turtle` object named `leo` with a \\"turtle\\" shape and \\"yellow\\" color. 3. Make `leo` move forward by a random distance between 20 and 50 units and turn by a random angle between 0 and 360 degrees, repeating this sequence 30 times. 4. Wait for a user\'s click on the screen to close the window.","solution":"import turtle import random def random_walk(): # Set up the screen screen = turtle.Screen() screen.bgcolor(\\"black\\") # Create the turtle leo = turtle.Turtle() leo.shape(\\"turtle\\") leo.color(\\"yellow\\") # Perform the random walk for _ in range(30): distance = random.randint(20, 50) angle = random.randint(0, 360) leo.forward(distance) leo.right(angle) # Close the window on click screen.exitonclick()"},{"question":"You are working on a data analysis project and need to manipulate a large dataset which is provided in a CSV file. The file contains several columns including \\"product_id\\", \\"price\\", \\"quantity\\", and \\"transaction_date\\". Your task is to parse the CSV file and perform the following operations: 1. Calculate the total sales amount for each product by multiplying the price by the quantity. 2. Identify the top 3 products with the highest total sales amount. 3. Generate a bar chart to visualize the total sales amount for these top 3 products. 4. Save the bar chart as an image file named \\"top_products_sales.png\\". You are required to write a function `analyze_sales` that performs these tasks. The function should accept the file path of the CSV as input. # Function Signature ```python def analyze_sales(file_path: str): Analyze sales data to find top 3 products by sales amount. :param str file_path: Path to the CSV file containing sales data :return: None ``` # Requirements 1. Use `pandas.read_csv` to read the CSV file. 2. Use `pandas.DataFrame.groupby` to group the sales data by \\"product_id\\". 3. Use `matplotlib.pyplot.bar` to create a bar chart. 4. Save the chart using `matplotlib.pyplot.savefig`. # Example Usage ```python analyze_sales(\'sales_data.csv\') ``` This will read data from \'sales_data.csv\', compute the required metrics, and save a chart showing the top 3 products by sales amount as \\"top_products_sales.png\\". # Additional Information - Assume \\"price\\" and \\"quantity\\" columns contain numeric values. - The \\"transaction_date\\" column should be ignored in your analysis. - The \\"product_id\\" column will have unique identifier strings for each product. # Notes Ensure your solution handles exceptions such as missing files or invalid data formats gracefully, providing appropriate error messages.","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_sales(file_path: str): Analyze sales data to find top 3 products by sales amount. :param str file_path: Path to the CSV file containing sales data :return: None try: # Read the CSV file df = pd.read_csv(file_path) # Check if all required columns are present required_columns = {\'product_id\', \'price\', \'quantity\', \'transaction_date\'} if not required_columns.issubset(df.columns): raise ValueError(f\\"The file is missing one or more required columns: {required_columns}\\") # Calculate total sales amount for each product df[\'total_sales\'] = df[\'price\'] * df[\'quantity\'] # Group by product_id and sum the total sales sales_by_product = df.groupby(\'product_id\')[\'total_sales\'].sum() # Identify the top 3 products with the highest total sales amount top_products = sales_by_product.nlargest(3) # Generate a bar chart to visualize the total sales amount for these top 3 products plt.figure(figsize=(10, 6)) top_products.plot(kind=\'bar\') plt.title(\'Top 3 Products by Sales Amount\') plt.xlabel(\'Product ID\') plt.ylabel(\'Total Sales ()\') # Save the bar chart as an image file plt.savefig(\'top_products_sales.png\') plt.close() except FileNotFoundError: print(f\\"Error: The file at \'{file_path}\' does not exist.\\") except pd.errors.EmptyDataError: print(f\\"Error: The file at \'{file_path}\' is empty.\\") except pd.errors.ParserError: print(f\\"Error: The file at \'{file_path}\' could not be parsed.\\") except Exception as e: print(f\\"An error occurred: {str(e)}\\")"},{"question":"You are required to create a function that reads a CSV file containing employee data, processes the data to compute the average salary by department, and then writes these averages to a new CSV file. Your function should be named `compute_average_salaries` and must have the following signature: ```python def compute_average_salaries(input_csv, output_csv): ``` # Parameters: - `input_csv`: A string representing the file path to the input CSV file containing employee data. - `output_csv`: A string representing the file path where the output CSV file with average salaries should be written. # Input CSV Format: The input CSV file will have the following columns: - `employee_id`: A unique identifier for the employee. - `name`: The name of the employee. - `department`: The department the employee belongs to. - `salary`: The salary of the employee as a floating-point number. # Output CSV Format: The output CSV file should have the following columns: - `department`: The department name. - `average_salary`: The average salary of the employees in that department, rounded to 2 decimal places. # Example Scenario: Given an `input.csv` with the following content: ``` employee_id,name,department,salary 1,John Doe,Engineering,70000 2,Jane Smith,Engineering,80000 3,Emily Davis,Marketing,60000 4,Michael Brown,Marketing,65000 5,Linda Johnson,Sales,75000 ``` When calling `compute_average_salaries(\'input.csv\', \'output.csv\')`, the content of `output.csv` should be: ``` department,average_salary Engineering,75000.00 Marketing,62500.00 Sales,75000.00 ``` # Function Requirements: 1. Read the input CSV file and parse the employee data. 2. Compute the average salary for each department. 3. Write the results to the output CSV file with an appropriate header. # Notes: - The function should handle the case where a department has no employees gracefully. - Ensure that the average salary is rounded to 2 decimal places in the output CSV file. - Use the `csv` library for reading and writing CSV files. # Libraries required: - `csv` ```python import csv def compute_average_salaries(input_csv, output_csv): # Function implementation goes here pass ``` Implement the `compute_average_salaries` function as described. Your implementation should follow the standard mentioned in the Python documentation for the `csv` module.","solution":"import csv from collections import defaultdict def compute_average_salaries(input_csv, output_csv): department_salaries = defaultdict(list) # Read the input CSV and gather the salaries by department with open(input_csv, newline=\'\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: department = row[\'department\'] salary = float(row[\'salary\']) department_salaries[department].append(salary) # Compute the average salaries averages = [] for department, salaries in department_salaries.items(): average_salary = sum(salaries) / len(salaries) averages.append((department, round(average_salary, 2))) # Write the averages to the output CSV with open(output_csv, \'w\', newline=\'\') as csvfile: writer = csv.writer(csvfile) writer.writerow([\'department\', \'average_salary\']) for department, average_salary in averages: writer.writerow([department, f\\"{average_salary:.2f}\\"])"},{"question":"You are tasked with creating a text-based treasure hunt game simulation where a player can navigate through a series of rooms in search of a hidden treasure. The rooms are represented by a 2D grid, and the player starts in the top-left corner (0, 0). The treasure is randomly placed in one of the grid cells. The player can move up, down, left, or right, and with each move, the game will guide them by indicating whether they are \\"warmer\\" (closer to the treasure) or \\"colder\\" (farther from the treasure). To complete this task, you are required to write a function named `treasure_hunt_game()` using the `random.randint(a, b)` and `math.hypot(x, y)` functions. The function should: 1. Print a welcome message for the treasure hunt game. 2. Initialize a 5x5 grid of rooms. 3. Randomly place the treasure in one of the rooms. 4. Start the player at the top-left corner (0, 0). 5. Continuously prompt the player to move in one of the four directions (up, down, left, right). 6. Provide feedback after each move indicating if the player is warmer or colder compared to their previous position. 7. Ensure the player stays within the bounds of the grid. 8. Clear the screen and display the current player position after every move. 9. End the game if the player finds the treasure, displaying a congratulations message. Here\'s the required function signature: ```python import random import math def treasure_hunt_game(): ```","solution":"import random import math import os def clear_screen(): if os.name == \'nt\': os.system(\'cls\') else: os.system(\'clear\') def print_welcome_message(): print(\\"Welcome to the Treasure Hunt Game!\\") print(\\"Navigate through the 5x5 grid to find the hidden treasure.\\") print(\\"You can move: \'up\', \'down\', \'left\', or \'right\'.\\") print(\\"Start your hunt!\\") def get_distance(x1, y1, x2, y2): return math.hypot(x2 - x1, y2 - y1) def treasure_hunt_game(): # Initialize the grid grid_size = 5 player_pos = [0, 0] # Starting in the top-left corner (0, 0) treasure_pos = [random.randint(0, grid_size - 1), random.randint(0, grid_size - 1)] print_welcome_message() while True: # Display current position clear_screen() print(f\\"Current Position: {player_pos}\\") # Check for treasure if player_pos == treasure_pos: print(\\"Congratulations! You have found the treasure!\\") break # Ask player for a move move = input(\\"Enter your move (up, down, left, right): \\").strip().lower() previous_pos = player_pos.copy() if move == \\"up\\": player_pos[0] = max(0, player_pos[0] - 1) elif move == \\"down\\": player_pos[0] = min(grid_size - 1, player_pos[0] + 1) elif move == \\"left\\": player_pos[1] = max(0, player_pos[1] - 1) elif move == \\"right\\": player_pos[1] = min(grid_size - 1, player_pos[1] + 1) else: print(\\"Invalid move! Please try again.\\") continue # Calculate distance to treasure after the move prev_distance = get_distance(previous_pos[0], previous_pos[1], treasure_pos[0], treasure_pos[1]) curr_distance = get_distance(player_pos[0], player_pos[1], treasure_pos[0], treasure_pos[1]) if curr_distance < prev_distance: print(\\"Warmer!\\") else: print(\\"Colder!\\")"},{"question":"Implement a function `count_vowel_consonant_words` that takes a list of strings as input and returns a dictionary with the count of words starting with vowels and the count of words starting with consonants. Here\'s a detailed description of the task: 1. **Words Starting with Vowels**: A word is considered to start with a vowel if its first letter (case insensitive) is one of \'a\', \'e\', \'i\', \'o\', \'u\'. 2. **Words Starting with Consonants**: A word is considered to start with a consonant if its first letter (case insensitive) is not a vowel and is an alphabetical character. Your function should skip any words that start with non-alphabetical characters and only count words starting with vowels and consonants. The dictionary returned should have two keys: \\"vowel_words\\" and \\"consonant_words\\", corresponding to the respective counts of the words. Function Signature: ```python def count_vowel_consonant_words(words): # Your code here ``` **Parameters:** - `words`: a list of strings representing words. **Returns:** - A dictionary with \\"vowel_words\\" and \\"consonant_words\\" keys and their respective counts. **Requirements:** - Ensure the counting is case insensitive. - Only consider alphabetical characters and skip any non-alphabetical word starters. Example: ```python def count_vowel_consonant_words(words): # Your implementation here # Example usage words = [\'apple\', \'banana\', \'Apricot\', \'grape\', \'umbrella\', \'123fruit\'] print(count_vowel_consonant_words(words)) # Should print: {\'vowel_words\': 3, \'consonant_words\': 2} ```","solution":"def count_vowel_consonant_words(words): Returns a dictionary with the count of words starting with vowels and consonants. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} result = {\'vowel_words\': 0, \'consonant_words\': 0} for word in words: if word and word[0].isalpha(): if word[0].lower() in vowels: result[\'vowel_words\'] += 1 else: result[\'consonant_words\'] += 1 return result"},{"question":"--------------------- You are tasked with creating a Python function `evaluate_polynomial` that evaluates a polynomial at a given point. The function should take a list of coefficients representing the polynomial, and an integer or float representing the point at which to evaluate the polynomial. The polynomial is described by its coefficients in decreasing order of their powers. For example, the polynomial (2x^3 + 4x^2 + 3x + 5) would be represented by the list ([2, 4, 3, 5]). The function should be implemented as follows: 1. **Parameters**: - `coefficients` (list of int or float): A list of coefficients in ascending order of powers (e.g., [a0, a1, a2,..., an] for (a0 + a1x + a2x^2 + ... + anx^n)). - `x` (int or float): The value at which to evaluate the polynomial. 2. **Returns**: - `result` (int or float): The result of the polynomial evaluation at `x`. 3. **Functionality**: - Initialize the result to 0. - Iterate through the list of coefficients, and for each coefficient, compute its contribution to the result by multiplying the coefficient by the value of `x` raised to the corresponding power. - Update the result with the computed value. 4. **Requirements**: - Use a loop to iterate through the coefficients and calculate the polynomial value. - Do not use built-in libraries like numpy or numexpr for polynomial evaluation. Here is the function signature you should use: ```python def evaluate_polynomial(coefficients, x): ``` # Example: ```python coefficients = [2, 4, 3, 5] x = 2 evaluate_polynomial(coefficients, x) # Output should be 49 ``` Your task is to implement this function.","solution":"def evaluate_polynomial(coefficients, x): Evaluates a polynomial at a given point x using its coefficients. Parameters: coefficients (list of int or float): A list of coefficients in ascending order of powers x (int or float): The value at which to evaluate the polynomial Returns: result (int or float): The result of the polynomial evaluation at x result = 0 n = len(coefficients) for i in range(n): result += coefficients[i] * (x ** i) return result"},{"question":"In machine learning and data science, understanding how to efficiently manipulate and process large datasets is crucial. One such frequent operation is finding the nearest neighbors for each sample in a dataset. Given the challenge of computing the Euclidean distance between points in high-dimensional space, we want to leverage the `scipy.spatial.distance.cdist` function to solve this problem. Your task is to implement the function `FindNearestNeighbors(X, k)`, which finds the indices of the `k` nearest neighbors for each sample in the dataset, excluding the sample itself. Here\'s the specific context for your implementation: 1. **Input Parameters**: - `X` : A numpy array of shape `[N, d]` representing the dataset with `N` samples, each having `d` dimensions. - `k` : An integer representing the number of nearest neighbors to find for each sample. 2. **Output**: - A numpy array of shape `[N, k]` containing the indices of the `k` nearest neighbors for each sample in the dataset. # Function Signature: ```python import numpy as np from scipy.spatial.distance import cdist def FindNearestNeighbors(X, k): pass ``` # Implementation Details: - Use `scipy.spatial.distance.cdist` to compute the pairwise distances between samples in the dataset. - Ensure to handle self-distance properly, so that a sample is not considered its own neighbor. - Use numpy\'s functions to efficiently extract the indices of the nearest neighbors. # Example: ```python import numpy as np X = np.array([[1., 2.], [3., 4.], [5., 6.], [7., 8.]], dtype=float) k = 2 neighbors = FindNearestNeighbors(X, k) print(neighbors) ``` # Constraints: - The dataset should have at least 2 samples and the dimensionality should be at least 1. - The value of `k` should be less than `N`. Implement the `FindNearestNeighbors` function using the guidelines and constraints provided.","solution":"import numpy as np from scipy.spatial.distance import cdist def FindNearestNeighbors(X, k): Finds the indices of the k nearest neighbors for each sample in the dataset X. Parameters: X (numpy.ndarray): A numpy array of shape [N, d] representing the dataset with N samples, each having d dimensions. k (int): The number of nearest neighbors to find for each sample. Returns: numpy.ndarray: A numpy array of shape [N, k] containing the indices of the k nearest neighbors for each sample. # Compute the pairwise distances between samples distances = cdist(X, X, \'euclidean\') # Create a mask to ignore self-distances by setting them to infinity np.fill_diagonal(distances, np.inf) # Get the indices of the k nearest neighbors for each sample nearest_neighbors_indices = np.argsort(distances, axis=1)[:, :k] return nearest_neighbors_indices"},{"question":"In this problem, you are tasked with creating a Python function named `longest_word` that takes a single argument, a list of strings, and returns the longest string in the list. This problem is designed to help you practice string manipulation and basic list operations. The function `longest_word(words)` should do the following: - Accept a list of strings called `words`. - Identify the longest string in the list. If there are multiple strings with the same maximum length, return the first one that appears in the list. - If the list is empty, the function should return an empty string. Constraints: - Each string in the list contains only alphabetical characters. - The list contains at least one string. Example: ``` longest_word([\\"apple\\", \\"banana\\", \\"pear\\"]) -> \\"banana\\" longest_word([\\"car\\", \\"truck\\", \\"bicycle\\", \\"bus\\"]) -> \\"bicycle\\" longest_word([]) -> \\"\\" ```","solution":"def longest_word(words): Returns the longest string in the list `words`. If there are multiple strings with the same length, returns the first one that appears. If the list is empty, returns an empty string. if not words: return \\"\\" longest = words[0] for word in words[1:]: if len(word) > len(longest): longest = word return longest"},{"question":"In this programming challenge, you need to implement a function called `word_count` that processes a string to count the occurrences of each unique word. The function should be case-insensitive and ignore punctuation. 1. Convert all letters in the string to lowercase to ensure case insensitivity. 2. Remove all punctuation from the string to avoid counting punctuation marks as part of any word. You can consider punctuation as any character that is not an alphanumeric character. 3. Split the string into words. 4. Count the occurrences of each unique word. 5. Return a dictionary where the keys are the words and the values are their respective counts. The function signature should be: ```python def word_count(text: str) -> dict: ``` **Function Parameters:** - `text` (str): The string that contains words to be counted. **Returns:** - A dictionary with words as keys and their counts as values. **Constraints:** - The input string can be empty or contain up to 10^6 characters. To understand how to manipulate strings and dictionaries, refer to the relevant Python library documentation. **Example:** ```python # Example usage of word_count result = word_count(\\"Hello, world! Hello again. It\'s a beautiful world.\\") print(result) # Output: {\'hello\': 2, \'world\': 2, \'again\': 1, \'its\': 1, \'a\': 1, \'beautiful\': 1} ``` **Notes:** - Consider using libraries such as `re` for regular expression-based punctuation replacement. - Be sure to validate your approach by handling various cases, such as empty strings or strings with only punctuation.","solution":"import re from collections import defaultdict def word_count(text: str) -> dict: Returns a dictionary with each unique word and their occurrences. # Convert all letters to lowercase text = text.lower() # Remove all punctuation text = re.sub(r\'[^a-z0-9s]\', \'\', text) # Split the text into words words = text.split() # Count the occurrences of each word word_counts = defaultdict(int) for word in words: word_counts[word] += 1 return dict(word_counts)"},{"question":"Write a function named `sorted_squared_array` that takes a sorted list of integers (`arr`) and returns another sorted list that contains the squares of the integers from the input list. The input list `arr` contains both positive and negative integers, and you must ensure that the resulting list is sorted in non-decreasing order. Here\'s a function signature to get you started: ```python def sorted_squared_array(arr): Given a sorted list of integers (which can be negative), returns a sorted list containing the squares of those integers. Args: arr (list): A sorted list of integers. Returns: list: A sorted list containing the squares of the input integers. pass ``` # Instructions: 1. **Input List (`arr`)**: A sorted list of integers, which may include negative numbers. 2. **Output List**: The output list should contain the squares of the input list\'s integers, sorted in non-decreasing order. 3. **Constraints**: - Elements in `arr` can be negative. - The input list `arr` is already sorted in non-decreasing order. For example: - Input: `[-4, -2, -1, 0, 3, 5]` - Output: `[0, 1, 4, 9, 16, 25]` - Input: `[-7, -3, -1, 4, 8]` - Output: `[1, 9, 16, 49, 64]` **Note**: Ensure you consider edge cases such as an input list with all negative numbers, all positive numbers, or a mix of both. Use an efficient algorithm to achieve the result.","solution":"def sorted_squared_array(arr): Given a sorted list of integers (which can be negative), returns a sorted list containing the squares of those integers. Args: arr (list): A sorted list of integers. Returns: list: A sorted list containing the squares of the input integers. n = len(arr) result = [0] * n left, right = 0, n - 1 position = n - 1 while left <= right: left_square = arr[left] ** 2 right_square = arr[right] ** 2 if left_square > right_square: result[position] = left_square left += 1 else: result[position] = right_square right -= 1 position -= 1 return result"},{"question":"In this problem, you need to create a function named `sum_unique_elements` that takes two lists of integers as input and returns the sum of the unique elements across both lists. An element is considered unique if it appears in exactly one of the two lists. The function should follow these rules: 1. Combine the two input lists into one set of elements. 2. Count the frequency of each element across the combined list. 3. Sum only those elements that appear exactly once in the combined list. Function Signature: ```python def sum_unique_elements(list1, list2): pass ``` Example Usage: ```python # Input: list1 = [1, 2, 3], list2 = [3, 4, 5] sum_unique_elements([1, 2, 3], [3, 4, 5]) # Input: list1 = [1, 1, 2], list2 = [2, 3, 3] sum_unique_elements([1, 1, 2], [2, 3, 3]) # Input: list1 = [10, 20, 30], list2 = [40, 50] sum_unique_elements([10, 20, 30], [40, 50]) ``` Expected Outputs: - For the first example, the function should return 12 since the unique elements are [1, 2, 4, 5]. - For the second example, the function should return 0 since no elements are unique. - For the third example, the function should return 150 since the unique elements are [10, 20, 30, 40, 50]. Ensure the function works efficiently even for large input lists.","solution":"def sum_unique_elements(list1, list2): Returns the sum of the unique elements across both lists. An element is considered unique if it appears in exactly one of the two lists. combined_list = list1 + list2 element_count = {} for element in combined_list: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 unique_elements_sum = sum(element for element, count in element_count.items() if count == 1) return unique_elements_sum"},{"question":"You are developing a software system that processes customer orders. The system needs a function, `process_orders`, to take a list of orders and produce a summary of total sales and the number of orders per product. Each order contains a product identifier and the quantity purchased. Implement the function `process_orders` with the following specifications: - The function receives a list of dictionaries where each dictionary represents an order. - Each order dictionary has the following structure: - `product_id` (str): A string representing the unique identifier of the product. - `quantity` (int): An integer representing the quantity of the product ordered. The function should return a dictionary where: - Keys are the product identifiers (`product_id`). - Values are dictionaries containing: - `total_sales` (int): The total quantity of the product sold. - `order_count` (int): The number of orders for the product. The function signature should be: ```python def process_orders(orders): Process a list of customer orders to summarize total sales and order count per product. Parameters: orders (list): A list of dictionaries, each containing \'product_id\' and \'quantity\'. Returns: dict: A dictionary summarizing total sales and order count for each product. ``` # Example Usage: ```python orders = [ {\\"product_id\\": \\"A123\\", \\"quantity\\": 2}, {\\"product_id\\": \\"B456\\", \\"quantity\\": 1}, {\\"product_id\\": \\"A123\\", \\"quantity\\": 3}, {\\"product_id\\": \\"A123\\", \\"quantity\\": 1}, {\\"product_id\\": \\"B456\\", \\"quantity\\": 4}, ] summary = process_orders(orders) print(summary) # Expected output: # { # \\"A123\\": {\\"total_sales\\": 6, \\"order_count\\": 3}, # \\"B456\\": {\\"total_sales\\": 5, \\"order_count\\": 2} # } ``` # Requirements: 1. Iterate over the list of orders to aggregate the total sales and order count for each product. 2. Ensure that the `total_sales` and `order_count` accurately reflect the sum and count of orders per product. 3. Use appropriate data structures to achieve efficient data aggregation.","solution":"def process_orders(orders): Process a list of customer orders to summarize total sales and order count per product. Parameters: orders (list): A list of dictionaries, each containing \'product_id\' and \'quantity\'. Returns: dict: A dictionary summarizing total sales and order count for each product. summary = {} for order in orders: product_id = order[\'product_id\'] quantity = order[\'quantity\'] if product_id not in summary: summary[product_id] = {\'total_sales\': 0, \'order_count\': 0} summary[product_id][\'total_sales\'] += quantity summary[product_id][\'order_count\'] += 1 return summary"},{"question":"You are given a list of dictionaries representing orders from a food delivery service. Each dictionary contains the keys \'order_id\', \'customer\', and \'items\', where \'items\' is a list of dictionaries. Each item dictionary consists of \'item_name\', \'quantity\', and \'price\'. The task is to write a function `get_top_customers` that takes a list of orders and an integer `n` as input and returns a list of `n` customers who have spent the most money, sorted in descending order of their total spending. # Steps involved: 1. Compute the total spending for each customer by summing the cost of all items in their orders. 2. Sort the customers based on their total spending in descending order. 3. Return the top `n` customers. # Function Signature: ```python def get_top_customers(orders: list, n: int) -> list: # Your code here ``` # Example: Input: ```python orders = [ {\'order_id\': 1, \'customer\': \'Alice\', \'items\': [{\'item_name\': \'Burger\', \'quantity\': 2, \'price\': 5.0}, {\'item_name\': \'Fries\', \'quantity\': 1, \'price\': 2.5}]}, {\'order_id\': 2, \'customer\': \'Bob\', \'items\': [{\'item_name\': \'Pizza\', \'quantity\': 1, \'price\': 8.0}, {\'item_name\': \'Soda\', \'quantity\': 2, \'price\': 1.5}]}, {\'order_id\': 3, \'customer\': \'Alice\', \'items\': [{\'item_name\': \'Salad\', \'quantity\': 1, \'price\': 7.0}]} ] n = 1 ``` Output: ```python [\'Alice\'] ```","solution":"def get_top_customers(orders: list, n: int) -> list: from collections import defaultdict customer_spendings = defaultdict(float) for order in orders: customer = order[\'customer\'] for item in order[\'items\']: cost = item[\'quantity\'] * item[\'price\'] customer_spendings[customer] += cost sorted_customers = sorted(customer_spendings.items(), key=lambda x: x[1], reverse=True) top_customers = [customer for customer, _ in sorted_customers[:n]] return top_customers"},{"question":"You are asked to implement a predictive text feature similar to those found in messaging applications. The function should autocomplete a partially typed word based on a given dictionary of words and return a list of possible completions. Implement a function named `predictive_text` that behaves as follows: 1. **Dictionary of Words**: - Accept a list of words that represents a dictionary. 2. **Partial Word Completion**: - Accept a partially typed word and return all the words from the dictionary that start with this substring. 3. **Case Sensitivity**: - The search should be case-insensitive, but the returned words should retain their original casing from the dictionary. # Function Signature ```python def predictive_text(dictionary: List[str], partial: str) -> List[str]: pass ``` # Parameters - **dictionary**: `List[str]` A list of available words. - **partial**: `str` The partial word to autocomplete. # Returns - `List[str]` A list of words from the dictionary that start with the given partial word. # Example ```python dictionary = [\\"apple\\", \\"application\\", \\"banana\\", \\"berry\\", \\"grape\\", \\"orange\\"] partial = \\"app\\" print(predictive_text(dictionary, partial)) ``` The expected output would be: ```python [\\"apple\\", \\"application\\"] ``` # Requirements - The implementation should efficiently handle searches even with large dictionaries. - Make sure to handle edge cases such as an empty dictionary or no matches.","solution":"from typing import List def predictive_text(dictionary: List[str], partial: str) -> List[str]: Returns all words from the dictionary that start with the given partial word. partial_lower = partial.lower() return [word for word in dictionary if word.lower().startswith(partial_lower)]"},{"question":"You are tasked with writing a function that identifies and displays the day of the week with the highest average trip duration from a dataset. The function should be named `max_avg_trip_duration_day`. The dataset is in the form of a Pandas DataFrame and contains two columns: \'Trip Duration\' which lists the duration of trips in seconds, and \'Start Time\' which contains the start time of each trip in datetime format. You should use the functions `time.time` from Python\'s time module, `pandas.to_datetime`, and `pandas.DataFrame.groupby` within your solution. Here is what your function should do: 1. Print a statement indicating that the calculation of the day with the highest average trip duration has started. 2. Measure the start time using `time.time`. 3. Convert the \'Start Time\' column to datetime format using `pandas.to_datetime`. 4. Extract the day of the week (as a string, e.g., \'Monday\') from the \'Start Time\' column and add it as a new column named \'Day of Week\'. 5. Group the dataframe by \'Day of Week\' and calculate the mean trip duration for each group. 6. Identify the day of the week with the highest average trip duration. 7. Print the name of the day with the highest average trip duration and the average duration in minutes, rounded to one decimal place. 8. Measure the end time using `time.time` and print the elapsed time for the calculations. 9. Print a line separator for clear output formatting. **Function Signature:** ```python def max_avg_trip_duration_day(df): Identifies and displays the day of the week with the highest average trip duration. Args: (df) - Pandas DataFrame containing trip data with \'Trip Duration\' and \'Start Time\' columns ``` **Example Usage:** ```python import pandas as pd data = {\'Trip Duration\': [150, 200, 900, 600, 3600], \'Start Time\': [\'2023-01-01 07:00:00\', \'2023-01-02 08:00:00\', \'2023-01-03 09:00:00\', \'2023-01-04 10:00:00\', \'2023-01-05 11:00:00\']} df = pd.DataFrame(data) max_avg_trip_duration_day(df) ```","solution":"import pandas as pd import time def max_avg_trip_duration_day(df): Identifies and displays the day of the week with the highest average trip duration. Args: df (pd.DataFrame): Pandas DataFrame containing trip data with \'Trip Duration\' and \'Start Time\' columns print(\\"Calculation of the day with the highest average trip duration has started.\\") start_time = time.time() # Convert \'Start Time\' to datetime format df[\'Start Time\'] = pd.to_datetime(df[\'Start Time\']) # Extract the day of the week and add it as a new column df[\'Day of Week\'] = df[\'Start Time\'].dt.day_name() # Group by \'Day of Week\' and calculate the mean trip duration for each group avg_durations = df.groupby(\'Day of Week\')[\'Trip Duration\'].mean() # Identify the day with the highest average trip duration max_avg_day = avg_durations.idxmax() max_avg_duration = avg_durations.max() / 60 # Convert from seconds to minutes print(f\\"The day with the highest average trip duration is {max_avg_day} with an average duration of {max_avg_duration:.1f} minutes.\\") end_time = time.time() print(f\\"Elapsed time for the calculations: {end_time - start_time:.2f} seconds.\\") print(\\"-----------------------------------------\\")"},{"question":"Your task is to implement a function named `calculate_euler_totient` that computes the Euler\'s Totient function φ(n) for a given integer n. The Euler\'s Totient function is defined as the number of positive integers up to n that are relatively prime to n. Euler\'s Totient function can be represented as: [ phi(n) = n left(1 - frac{1}{p1}right) left(1 - frac{1}{p2}right) ldots left(1 - frac{1}{pk}right) ] where ( p1, p2, ldots, pk ) are the distinct prime factors of n. To compute the Euler\'s Totient function: 1. Initialize result as n. 2. For each prime factor p of n, multiply result with ( (1 - frac{1}{p}) ). 3. Return the final result converted to an integer. If the input n is less than or equal to 0, the function should return 0, indicating an invalid input for the Euler\'s Totient function. Use the `math.isqrt` function from Python\'s standard math library for integer square root calculations. Function Signature: ```python def calculate_euler_totient(n: int) -> int: ``` Input: - `n` (int): A positive integer to compute the Euler\'s Totient function, with ( n > 0 ). Output: - (int): The value of Euler\'s Totient function φ(n). # Example: ```python print(calculate_euler_totient(9)) # Output: 6 print(calculate_euler_totient(15)) # Output: 8 print(calculate_euler_totient(1)) # Output: 1 print(calculate_euler_totient(20)) # Output: 8 print(calculate_euler_totient(29)) # Output: 28 ``` # Constraints: - The input `n` will be an integer such that ( 1 leq n leq 10^9 ).","solution":"import math def calculate_euler_totient(n: int) -> int: Computes the Euler\'s Totient function φ(n) for a given integer n. Parameters: n (int): A positive integer greater than 0 Returns: int: The value of Euler\'s Totient function φ(n) if n <= 0: return 0 result = n p = 2 # starting with the smallest prime number # Check for each number from 2 to sqrt(n) to see if it\'s a prime factor of n while p * p <= n: if n % p == 0: # If p is a prime factor, then we divide n by p until it\'s no longer divisible while n % p == 0: n //= p result -= result // p p += 1 # If n is greater than 1 at this point, then n itself is a prime number if n > 1: result -= result // n return result"},{"question":"You are provided with two files: 1. `patients.csv`: This CSV file contains the records of patient visits to a hospital in the last year. 2. `highrisk_conditions.txt`: This text file contains a list of medical conditions that are considered high-risk. Your task is to write a function `identify_high_risk_patients()` that performs the following: 1. Reads the patients\' data from the `patients.csv` file. Each record consists of the fields `patient_id`, `name`, `visit_date`, `condition`. 2. Counts the number of visits each patient has for conditions listed in the `highrisk_conditions.txt`. 3. Determines if any patient has visited the hospital more than 10 times for high-risk conditions in the last year. 4. Generates and prints a report of such high-risk patients including `patient_id` and `name`. Ensure you efficiently read the data using the `csv` and `collections` modules to manage and analyze the frequency of patient visits for high-risk conditions. **Function Signature:** ```python def identify_high_risk_patients(): pass ``` **Example:** Assume the content of `patients.csv` is: ``` patient_id,name,visit_date,condition 1,John Doe,2023-01-15,Diabetes 2,Jane Smith,2023-02-20,Hypertension 1,John Doe,2023-03-10,Diabetes ... ``` and `highrisk_conditions.txt` is: ``` Diabetes Hypertension ... ``` Output: ``` Patient 1 (John Doe) is high-risk with 11 visits for high-risk conditions. ``` Note: Replace the example data with actual data in files while testing.","solution":"import csv from collections import defaultdict def identify_high_risk_patients(): Identifies and prints high-risk patients who have more than 10 visits for high-risk conditions. # Read high-risk conditions from the text file with open(\'highrisk_conditions.txt\', \'r\') as f: highrisk_conditions = set(line.strip() for line in f.readlines()) # Dictionary to count the number of visits each patient has for high-risk conditions patient_visits = defaultdict(int) patient_names = {} # Read patients\' data from the csv file with open(\'patients.csv\', \'r\') as f: reader = csv.DictReader(f) for row in reader: patient_id = row[\'patient_id\'] name = row[\'name\'] condition = row[\'condition\'] # Update patient name (to handle any possible name changes) patient_names[patient_id] = name # If condition is high-risk, increment the visit counter if condition in highrisk_conditions: patient_visits[patient_id] += 1 # Generate report for high-risk patients for patient_id, visit_count in patient_visits.items(): if visit_count > 10: print(f\\"Patient {patient_id} ({patient_names[patient_id]}) is high-risk with {visit_count} visits for high-risk conditions.\\") # For testing environment, we assume the files are already present in the working directory."},{"question":"You are tasked with creating a function that converts a given Roman numeral string into its integer equivalent. The function should accurately interpret the Roman numeral representation and compute the corresponding integer value. **Function Signature:** ```python def roman_to_int(roman: str) -> int: ``` **Parameters:** - `roman`: A string representing a Roman numeral. **Returns:** - An integer representing the Roman numeral converted to an integer. # Requirements: 1. Roman numerals are composed of the following characters: `\'I\'`, `\'V\'`, `\'X\'`, `\'L\'`, `\'C\'`, `\'D\'`, and `\'M\'`. 2. Roman numerals are usually written largest to smallest from left to right. 3. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. The same principle applies to the number nine, which is written as `IX`. 4. The numeral `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. 5. The numeral `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. 6. The numeral `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. # Example: ```python print(roman_to_int(\\"XII\\")) # This should return 12 print(roman_to_int(\\"IX\\")) # This should return 9 print(roman_to_int(\\"MCMXCIV\\"))# This should return 1994 ``` # Guidelines: - Consider using a dictionary to store the integer values of individual Roman numeral characters. - Traverse the string from left to right, applying the subtraction rule when necessary. - Ensure your implementation handles all valid inputs correctly and efficiently. - Handle edge cases such as empty string and invalid Roman numeral strings gracefully, returning 0 in those cases.","solution":"def roman_to_int(roman: str) -> int: roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(roman): value = roman_values.get(char, 0) if value >= prev_value: total += value else: total -= value prev_value = value return total"},{"question":"You are given a list of integers `nums` and an integer `k`. Your task is to write a Python function named `rotate_array` that rotates the elements of `nums` to the right by `k` positions. Rotating an array by 1 position means that the last element of the array becomes the first element, and every other element moves one index to the right. Make sure that your solution has a time complexity of O(n), where n is the length of the list. **Function Signature:** ```python def rotate_array(nums: List[int], k: int) -> List[int]: ``` **Parameters:** - `nums` (List[int]): A list of integers. - `k` (int): The number of positions to rotate the array to the right. **Returns:** - `List[int]`: The rotated list of integers. **Example:** ```python nums = [1, 2, 3, 4, 5, 6, 7] k = 3 assert rotate_array(nums, k) == [5, 6, 7, 1, 2, 3, 4] ``` In the example above, rotating the array `[1, 2, 3, 4, 5, 6, 7]` by 3 positions to the right results in `[5, 6, 7, 1, 2, 3, 4]`. Ensure that your implementation works for cases where `k` is larger than the length of the list by using the modulus operator.","solution":"from typing import List def rotate_array(nums: List[int], k: int) -> List[int]: Rotates the elements of nums to the right by k positions. Parameters: nums (List[int]): A list of integers. k (int): The number of positions to rotate the array to the right. Returns: List[int]: The rotated list of integers. if len(nums) == 0 or k == 0: return nums k = k % len(nums) # Reduce k to within the bounds of the array length return nums[-k:] + nums[:-k]"},{"question":"Create a function named `smallest_window(s: str, t: str) -> str` that finds the smallest contiguous substring of `s` that contains all the characters of `t`. The function should return the smallest substring or an empty string if no such substring exists. # Details: 1. **String Representation:** - `s` is the main string where we\'ll search for the substring. For example, `s = \\"ADOBECODEBANC\\"`. - `t` is the string with the characters we need to include in the substring. For example, `t = \\"ABC\\"`. 2. **Output:** - The function should find the minimum window in `s` which will contain all the characters in `t` in a time complexity better (or comparable) to O(n^2). 3. **Library Requirement:** You can use any standard library functions you find necessary. # Function Signature: ```python def smallest_window(s: str, t: str) -> str: ``` # Example: ```python result = smallest_window(\\"ADOBECODEBANC\\", \\"ABC\\") print(result) # Output should be \\"BANC\\" result = smallest_window(\\"a\\", \\"a\\") print(result) # Output should be \\"a\\" result = smallest_window(\\"a\\", \\"b\\") print(result) # Output should be \\"\\" ``` # Notes: - Ensure your function handles edge cases, such as when `s` or `t` is empty, and when `t` has characters not present in `s`. - You can assume that `t` always has at least one character.","solution":"from collections import Counter, defaultdict def smallest_window(s: str, t: str) -> str: if not s or not t: return \\"\\" # Create a counter for the characters in t dict_t = Counter(t) required = len(dict_t) # Left and right pointer l, r = 0, 0 # formed is used to keep track of how many unique characters # in t are present in the current window in their desired frequency. formed = 0 # Dictionary to keep a count of all the unique characters in the current window. window_counts = defaultdict(int) # ans tuple of the form (window length, left, right) ans = float(\\"inf\\"), None, None while r < len(s): # Add one character from the right to the window character = s[r] window_counts[character] += 1 # If the frequency of the current character added equals to the # desired count in t then increment the formed count by 1. if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 # Try and contract the window till the point where it ceases to be \'desirable\'. while l <= r and formed == required: character = s[l] # Save the smallest window until now. if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) # The character at the position pointed by the # `left` pointer is no longer a part of the window. window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 # Move the left pointer ahead, this would help to look for a new window. l += 1 # Keep expanding the window once we are done contracting. r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else s[ans[1]: ans[2] + 1]"},{"question":"Write a function named `find_longest_consecutive_sequence` that takes in a list of integers `nums` and returns the length of the longest consecutive elements sequence. Your algorithm should have a time complexity of O(n). For example, if the input list is `[100, 4, 200, 1, 3, 2]`, the longest consecutive sequence is `[1, 2, 3, 4]`, and the function should return its length, which is 4. Example usage: ```python def find_longest_consecutive_sequence(nums): if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: if num - 1 not in nums_set: # Only start counting when at the beginning of a sequence current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak # Sample input data nums = [100, 4, 200, 1, 3, 2] print(find_longest_consecutive_sequence(nums)) # Output should be 4 ``` In this function, make sure not to modify the input list and consider edge cases such as an empty list or a list with all duplicates.","solution":"def find_longest_consecutive_sequence(nums): if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: if num - 1 not in nums_set: # Only start counting when at the beginning of a sequence current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a function to analyze sales data from a CSV string input and calculate various metrics. The function takes a CSV string where each row represents a sale with fields \\"ProductID\\", \\"Quantity\\", and \\"UnitPrice\\". Calculate the total sales revenue, total units sold, and average revenue per unit. The function should return a dictionary with these metrics. If the CSV string is malformed or any of the required fields are missing, an empty dictionary should be returned. The function should output with: dict: A dictionary containing the total revenue, total units sold, and average revenue per unit (as a float). You should write self-contained code starting with: ``` import csv from io import StringIO def analyze_sales_data(csv_string): ```","solution":"import csv from io import StringIO def analyze_sales_data(csv_string): Analyzes sales data from a CSV string and calculates various metrics. Parameters: csv_string (str): The CSV string containing sales data. Each row includes fields: \\"ProductID\\", \\"Quantity\\", and \\"UnitPrice\\". Returns: dict: A dictionary containing total revenue, total units sold, and average revenue per unit. Returns an empty dictionary if the CSV is malformed or missing required fields. total_revenue = 0.0 total_units = 0 try: f = StringIO(csv_string) reader = csv.DictReader(f) if not all(field in reader.fieldnames for field in [\\"ProductID\\", \\"Quantity\\", \\"UnitPrice\\"]): return {} for row in reader: try: quantity = int(row[\\"Quantity\\"]) unit_price = float(row[\\"UnitPrice\\"]) total_revenue += quantity * unit_price total_units += quantity except ValueError: return {} if total_units == 0: average_revenue_per_unit = 0.0 else: average_revenue_per_unit = total_revenue / total_units return { \\"TotalRevenue\\": total_revenue, \\"TotalUnitsSold\\": total_units, \\"AverageRevenuePerUnit\\": average_revenue_per_unit } except Exception: return {}"},{"question":"You are required to implement a function that checks if a given sentence is a **pangram** (a sentence that contains every letter of the alphabet at least once). The function `is_pangram` takes a sentence and returns `True` if the sentence is a pangram and `False` otherwise. Your task is to implement the function `is_pangram` using a `set` to keep track of the letters in the alphabet that have been encountered in the sentence. The function should: 1. Ignore any characters that are not letters. 2. Handle both uppercase and lowercase letters by treating them as the same. 3. Efficiently check if all letters of the alphabet are present and return the result accordingly. Make sure to use the `set` data structure for efficient lookup and storage of the encountered letters. The function signature should be: ```python def is_pangram(sentence): ```","solution":"def is_pangram(sentence): Checks if a given sentence is a pangram. :param sentence: str :return: bool alphabet = set(\'abcdefghijklmnopqrstuvwxyz\') sentence_letters = set(c.lower() for c in sentence if c.isalpha()) return alphabet.issubset(sentence_letters)"},{"question":"You need to write a function that calculates the difference between the sum of the squares and the square of the sum of the first `n` natural numbers. To clarify, if `n` is the input, then: 1. The sum of the squares of the first `n` natural numbers is calculated as: [ text{sum_of_squares} = 1^2 + 2^2 + 3^2 + ldots + n^2 ] 2. The square of the sum of the first `n` natural numbers is calculated as: [ text{square_of_sum} = (1 + 2 + 3 + ldots + n)^2 ] Finally, compute the difference between `square_of_sum` and `sum_of_squares`. **Function Signature**: ```python def calculate_difference(n: int) -> int: pass ``` **Input**: - an integer `n` (1 ≤ n ≤ 100) **Output**: - an integer representing the difference between the square of the sum and the sum of the squares of the first `n` natural numbers. **Example**: ```python assert calculate_difference(3) == 22 # Explanation: # sum_of_squares = 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 # square_of_sum = (1 + 2 + 3)^2 = 6^2 = 36 # difference = 36 - 14 = 22 assert calculate_difference(10) == 2640 # Explanation: # sum_of_squares = 1^2 + 2^2 + ... + 10^2 = 385 # square_of_sum = (1 + 2 + ... + 10)^2 = 55^2 = 3025 # difference = 3025 - 385 = 2640 ``` **Constraints**: - You need to use basic arithmetic operations to calculate the sum of the squares and the square of the sum. - The implementation should be efficient to handle the upper limit of `n` gracefully.","solution":"def calculate_difference(n: int) -> int: Calculate the difference between the square of the sum and the sum of the squares of the first n natural numbers. sum_of_squares = sum(i**2 for i in range(1, n + 1)) square_of_sum = sum(range(1, n + 1)) ** 2 return square_of_sum - sum_of_squares"},{"question":"In this task, you will write a function `calculate_r2` that computes the R2 (coefficient of determination) score of a linear regression model using the `LinearRegression` class from the `sklearn.linear_model` library. The R2 score is a measure of how well the predictions approximate the real data points. Your task is to complete the function `calculate_r2(predictors_train, predictors_test, targ_train, targ_test)` that performs the following steps: 1. Initializes a `LinearRegression` model. 2. Fits the model using `predictors_train` as the input features and `targ_train` as the target values. 3. Predicts the target values for `predictors_test`. 4. Computes the R2 score comparing `targ_test` (the actual target values) and `preds_test` (the predicted values). 5. Returns the computed R2 score. Here is the function signature: ```python def calculate_r2(predictors_train, predictors_test, targ_train, targ_test): # your code here ``` **Libraries to use**: - `sklearn.linear_model.LinearRegression` - `sklearn.metrics.r2_score` **Example**: ```python from sklearn.linear_model import LinearRegression from sklearn.metrics import r2_score from sklearn.model_selection import train_test_split from sklearn.datasets import load_diabetes # Load sample data diabetes = load_diabetes() X_train, X_test, y_train, y_test = train_test_split(diabetes.data, diabetes.target, test_size=0.2, random_state=0) # Call your function r2 = calculate_r2(X_train, X_test, y_train, y_test) print(f\\"R2 Score: {r2}\\") ```","solution":"from sklearn.linear_model import LinearRegression from sklearn.metrics import r2_score def calculate_r2(predictors_train, predictors_test, targ_train, targ_test): Calculates the R2 score for a linear regression model. Parameters: predictors_train -- training data features predictors_test -- test data features targ_train -- training data target values targ_test -- test data target values Returns: R2 score # Step 1: Initialize a LinearRegression model model = LinearRegression() # Step 2: Fit the model using predictors_train and targ_train model.fit(predictors_train, targ_train) # Step 3: Predict the target values for predictors_test preds_test = model.predict(predictors_test) # Step 4: Compute the R2 score r2 = r2_score(targ_test, preds_test) # Step 5: Return the computed R2 score return r2"},{"question":"You are required to implement a function named `get_weather_forecast` that fetches real-time weather forecast data from the OpenWeatherMap API. The function should use the provided API key to request the weather forecast for a specific city. The data should be returned as a Pandas DataFrame containing the date, temperature, weather description, and humidity for the next 5 days (with three-hour intervals). Follow the requirements below: 1. **Function Name**: `get_weather_forecast` 2. **Parameters**: - `api_key` (str): A valid API key as a string. - `city_name` (str): The name of the city for which the weather forecast is requested. 3. **Returns**: - `Pandas DataFrame`: A DataFrame containing the date (`Date`), temperature (`Temperature`), weather description (`Weather`), and humidity (`Humidity`) for the next 5 days with three-hour intervals. **Requirements**: - Use the `pandas` library to handle and structure the data. - Use the `requests` library to make the API calls. - Ensure that the function validates the API key and checks for successful response from the server. - Parse the response data to extract the required information and structure it into a DataFrame. **Example Usage**: ```python >>> import pandas as pd >>> df = get_weather_forecast(\'YOUR_API_KEY_HERE\', \'London\') >>> print(df.head()) ``` Make sure to read the API guide from [OpenWeatherMap API](https://openweathermap.org/api) for more details.","solution":"import requests import pandas as pd from datetime import datetime def get_weather_forecast(api_key, city_name): Fetches the weather forecast for the next 5 days with three-hour intervals for a specified city and returns it as a Pandas DataFrame. Parameters: - api_key (str): A valid API key as a string. - city_name (str): The name of the city for which the weather forecast is requested. Returns: - pd.DataFrame: A DataFrame containing the date, temperature, weather description, and humidity. base_url = f\\"http://api.openweathermap.org/data/2.5/forecast?q={city_name}&appid={api_key}&units=metric\\" response = requests.get(base_url) if response.status_code != 200: raise Exception(f\\"API request failed with status code {response.status_code}: {response.text}\\") data = response.json() forecast_list = data[\'list\'] weather_data = [] for forecast in forecast_list: date = datetime.fromtimestamp(forecast[\'dt\']) temperature = forecast[\'main\'][\'temp\'] weather_description = forecast[\'weather\'][0][\'description\'] humidity = forecast[\'main\'][\'humidity\'] weather_data.append({ \'Date\': date, \'Temperature\': temperature, \'Weather\': weather_description, \'Humidity\': humidity, }) df = pd.DataFrame(weather_data) return df"},{"question":"Write a function that accepts a directory containing multiple CSV files with datetime and sales data, then calculates and plots the total sales per week. Each CSV file follows the naming convention \\"storeX_sales.csv\\" and contains two columns: \'datetime\' and \'sales\', where \'datetime\' is a timestamp, and \'sales\' is the sales amount. The function should process all CSV files in the specified directory, aggregate the weekly sales, and plot these totals. If a file is missing or has invalid data, the function should skip it. The function should output with: ax (matplotlib.axes._axes.Axes or None): A line plot showing \'Total Sales per Week\', with \'Week Number\' on the x-axis and \'Total Sales\' on the y-axis. If no valid data is found, return None. You should write self-contained code starting with: ``` import os import pandas as pd import matplotlib.pyplot as plt def aggregate_sales(directory_path): ```","solution":"import os import pandas as pd import matplotlib.pyplot as plt def aggregate_sales(directory_path): Process all CSV files in the specified directory, aggregate the weekly sales, and plot these totals. If no valid data is found, return None. Parameters: directory_path (str): Path to the directory containing CSV files. Returns: ax (matplotlib.axes._axes.Axes or None): A line plot showing \'Total Sales per Week\', with \'Week Number\' on the x-axis and \'Total Sales\' on the y-axis. If no valid data is found, returns None. weekly_sales = pd.DataFrame() for file_name in os.listdir(directory_path): if file_name.startswith(\\"store\\") and file_name.endswith(\\"_sales.csv\\"): file_path = os.path.join(directory_path, file_name) try: sales_data = pd.read_csv(file_path) sales_data[\'datetime\'] = pd.to_datetime(sales_data[\'datetime\']) sales_data.set_index(\'datetime\', inplace=True) weekly_data = sales_data.resample(\'W\').sum() weekly_sales = weekly_sales.add(weekly_data, fill_value=0) except Exception as e: continue if weekly_sales.empty: return None ax = weekly_sales.plot(title=\'Total Sales per Week\') ax.set_xlabel(\\"Week Number\\") ax.set_ylabel(\\"Total Sales\\") plt.show() return ax"},{"question":"**Problem Statement:** You are asked to design a function `generate_diagonal_matrix` which generates a special kind of diagonal matrix for signal processing applications. The function will take as input a list of integers and produce a diagonal matrix such that: 1. On each diagonal position `(i, i)`, where `i` is an index, the element is the product of the input element at position `i` and its index `i`. 2. Every off-diagonal element is zero. 3. The matrix must be returned as a 2D NumPy array. Here is the detailed parameter specification for the function: - `elements`: A list of integers of length `n`. The function should return an `n x n` 2D NumPy array (diagonal matrix). **Function Signature:** ```python def generate_diagonal_matrix(elements: list) -> np.ndarray: ``` **Examples:** ```python import numpy as np # Example 1 elements = [1, 2, 3] result = generate_diagonal_matrix(elements) print(result) # Expected output: # array([[0, 0, 0], # [0, 2, 0], # [0, 0, 6]]) # Example 2 elements = [5, 3, 1, 2] result = generate_diagonal_matrix(elements) print(result) # Expected output: # array([[ 0, 0, 0, 0], # [ 0, 3, 0, 0], # [ 0, 0, 2, 0], # [ 0, 0, 0, 6]]) # Example 3 elements = [7, 0, 5] result = generate_diagonal_matrix(elements) print(result) # Expected output: # array([[ 0, 0, 0], # [ 0, 0, 0], # [ 0, 0, 10]]) ``` **Explanation:** 1. For Example 1, the indices are multiplied with their corresponding elements: `[1*0, 2*1, 3*2]` which results as `[0, 2, 6]`. 2. For Example 2, the indices are multiplied with their corresponding elements: `[5*0, 3*1, 1*2, 2*3]` which results as `[0, 3, 2, 6]`. 3. For Example 3, the indices are multiplied with their corresponding elements: `[7*0, 0*1, 5*2]` which results as `[0, 0, 10]`.","solution":"import numpy as np def generate_diagonal_matrix(elements: list) -> np.ndarray: Generates a diagonal matrix where each diagonal element at position (i, i) is the product of the element at position i in the input list and its index i. All off-diagonal elements are zero. Parameters: elements (list): A list of integers of length n. Returns: np.ndarray: A 2D NumPy array of size n x n with the specified properties. n = len(elements) matrix = np.zeros((n, n), dtype=int) for i in range(n): matrix[i, i] = elements[i] * i return matrix"},{"question":"You are asked to create a function to analyze a text file containing a transcript of multiple conversations. The text file is structured in a way that each conversation starts with the tag \\"Conversation Start\\" and ends with the tag \\"Conversation End\\". Each conversation consists of multiple sentences. Your goal is to develop a function called `analyze_conversations` that processes the text file and identifies the sentence that appears the most frequently across all conversations. The function should then return this most frequent sentence along with the count of its occurrences. The function should follow these steps: 1. Read the content of the text file. 2. Split the content into individual conversations. 3. Split each conversation into sentences. 4. Identify the sentence that appears the most across all conversations. 5. Return both the most frequent sentence and its count. Function Signature ```python def analyze_conversations(file_path: str) -> Tuple[str, int]: pass ``` # Example Usage Suppose you have the following text data in a file: ``` Conversation Start Hello there. How are you? I am fine, thank you. Conversation End Conversation Start Hello there. What\'s your name? Conversation End ``` Calling `analyze_conversations(\'path_to_text_file\')` should return `(\\"Hello there.\\", 2)` because \\"Hello there.\\" is the sentence that appears the most frequently in the given conversations. # Libraries to Use - `collections.Counter` You can refer to the [Python documentation for Counter](https://docs.python.org/3/library/collections.html#collections.Counter) for more details.","solution":"from typing import Tuple from collections import Counter def analyze_conversations(file_path: str) -> Tuple[str, int]: Analyzes the text file containing conversations and returns the most frequent sentence and its count. :param file_path: Path to the text file :return: Tuple containing the most frequent sentence and its count with open(file_path, \'r\') as file: content = file.read() conversations = content.split(\'Conversation End\') sentence_counter = Counter() for conversation in conversations: if \'Conversation Start\' in conversation: sentences = conversation.split(\'n\') for sentence in sentences: sentence = sentence.strip() if sentence and sentence != \'Conversation Start\': sentence_counter[sentence] += 1 most_common_sentence, count = sentence_counter.most_common(1)[0] return most_common_sentence, count"},{"question":"In this problem, your task is to write a function `move_zeroes` that takes a list of integers and modifies it in-place to move all zeroes to the end of the list, while maintaining the relative order of the non-zero elements. **Function Signature:** ```python def move_zeroes(nums: list) -> None: ``` **Input:** - `nums`: A list of integers (e.g., [0, 1, 0, 3, 12]) **Output:** - The function modifies the `nums` list in-place, so it does not return anything. **Constraints:** - `1 <= len(nums) <= 10^4` - The integers in `nums` can be any valid integer values (both positive and negative) **Example:** ```python nums = [0, 1, 0, 3, 12] move_zeroes(nums) assert nums == [1, 3, 12, 0, 0] nums = [0, 0, 1] move_zeroes(nums) assert nums == [1, 0, 0] nums = [4, 5, 0] move_zeroes(nums) assert nums == [4, 5, 0] ```","solution":"def move_zeroes(nums: list) -> None: Modifies the input list in-place to move all zeroes to the end while maintaining the relative order of the non-zero elements. zero_count = 0 # Count of zeroes for i in range(len(nums)): if nums[i] != 0: nums[i], nums[zero_count] = nums[zero_count], nums[i] zero_count += 1"},{"question":"In the context of competitive programming, sorting is a fundamental operation that can significantly impact the efficiency of your algorithms. One common task is to sort an array of integers such that all even numbers appear before all odd numbers, while maintaining their relative order (a stability condition). You need to implement a function `stable_even_odd_sort` that sorts an array of integers in a stable manner, placing even numbers before odd numbers but not sorting the numbers internally. Function Signature ```python def stable_even_odd_sort(arr): ``` Parameters - `arr` (list): A list of integers. Returns - `sorted_arr` (list): A new list where all even numbers from the original list precede all odd numbers, maintaining the relative order of even and odd numbers as they appeared in the input list. Example ```python arr = [3, 8, 5, 2, 6, 1, 4, 7] print(stable_even_odd_sort(arr)) # Expected output: [8, 2, 6, 4, 3, 5, 1, 7] ``` Constraints - The length of `arr` will not exceed 10^5. - The integers in `arr` can be positive or negative and will fit within the range of 32-bit signed integers. # Guidelines - Aim for a linear time complexity solution to handle larger inputs efficiently. - Use additional space if necessary to achieve the stability condition while separating even and odd numbers.","solution":"def stable_even_odd_sort(arr): Sorts the array such that all even numbers come before all odd numbers, while maintaining the relative order of even and odd numbers. Parameters: arr (list): A list of integers Returns: sorted_arr (list): A new list where all even numbers precede all odd numbers evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"Implement a function that processes a list of student records and generates a grade report. Each student record contains the following fields: student ID, student name, and a list of scores for three subjects (Math, Science, and English). The function should calculate the average score for each student and determine their grade based on the average score: \'A\' for 90 and above, \'B\' for 80-89, \'C\' for 70-79, \'D\' for 60-69, and \'F\' for below 60. The function should return a list of dictionaries, each representing a student\'s grade report containing their student ID, student name, average score, and grade. You should write self-contained code starting with: ``` def generate_grade_report(students): ``` The input list of students will be structured as follows: ``` students = [ {\'student_id\': \'001\', \'name\': \'Alice\', \'scores\': [88, 92, 75]}, {\'student_id\': \'002\', \'name\': \'Bob\', \'scores\': [79, 85, 80]}, {\'student_id\': \'003\', \'name\': \'Charlie\', \'scores\': [95, 90, 93]} ] ``` The expected output for the example input is: ``` [ {\'student_id\': \'001\', \'name\': \'Alice\', \'average\': 85.0, \'grade\': \'B\'}, {\'student_id\': \'002\', \'name\': \'Bob\', \'average\': 81.33, \'grade\': \'B\'}, {\'student_id\': \'003\', \'name\': \'Charlie\', \'average\': 92.67, \'grade\': \'A\'} ] ```","solution":"def generate_grade_report(students): def calculate_grade(average): if average >= 90: return \'A\' elif average >= 80: return \'B\' elif average >= 70: return \'C\' elif average >= 60: return \'D\' else: return \'F\' reports = [] for student in students: avg_score = round(sum(student[\'scores\']) / len(student[\'scores\']), 2) grade = calculate_grade(avg_score) reports.append({ \'student_id\': student[\'student_id\'], \'name\': student[\'name\'], \'average\': avg_score, \'grade\': grade }) return reports"},{"question":"You are required to develop a function named `calculate_group_averages` which processes student scores from multiple CSV files in a given folder. The function should calculate and print the average score for each student group based on the provided data. Each CSV file represents a class and contains the scores of different groups of students. The CSV files have two columns: `group_id` and `score`. The `group_id` column indicates the ID of the student group, and the `score` column indicates the score the group received. The function should take one parameter: the path to the folder containing the CSV files. Your task is to: - List all files in the specified folder that have a `.csv` extension. - Open each of these CSV files and read their content. - Calculate the average score for each group based on the scores from all the files. - Print the group ID and its average score, sorted by group ID. To achieve this, you need to use the `os.listdir` function from the built-in Python library `os` to list all the files in the specified directory, and the `pandas` library to read and process the CSV files. The function signature should be: ```python def calculate_group_averages(folder: str): ``` # Example: Assume the directory structure is as follows: ``` /example_folder class1.csv class2.csv class3.txt ``` Contents of `class1.csv`: ``` group_id,score 1,85 2,90 1,88 ``` Contents of `class2.csv`: ``` group_id,score 2,92 3,78 1,80 ``` ```python calculate_group_averages(\'/example_folder\') ``` Output should be: ``` Group 1: 84.33 Group 2: 91.00 Group 3: 78.00 ``` **Constraints:** 1. You can assume that the folder and files are readable and exist. 2. Assume all files are not too large to be handled in memory. 3. The `group_id` and `score` are always valid and contain no NaN values. **Hint:** Use the `pandas` library for reading and processing the CSV files, and the `os` module for listing files.","solution":"import os import pandas as pd def calculate_group_averages(folder: str): Calculate and print the average score for each student group from multiple CSV files in the given folder. Args: folder (str): The path to the folder containing the CSV files. group_scores = {} # List all files in the specified folder for filename in os.listdir(folder): if filename.endswith(\'.csv\'): # Read the CSV file filepath = os.path.join(folder, filename) df = pd.read_csv(filepath) # Process each row in the CSV for index, row in df.iterrows(): group_id = row[\'group_id\'] score = row[\'score\'] if group_id not in group_scores: group_scores[group_id] = [] group_scores[group_id].append(score) # Calculate and print the average score for each group for group_id in sorted(group_scores.keys()): average_score = sum(group_scores[group_id]) / len(group_scores[group_id]) print(f\\"Group {group_id}: {average_score:.2f}\\")"}]'),F={name:"App",components:{PoemCard:S},data(){return{searchQuery:"",visibleCount:4,poemsData:D,isLoading:!1}},computed:{filteredPoems(){const a=this.searchQuery.trim().toLowerCase();return a?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(a)||e.solution&&e.solution.toLowerCase().includes(a)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(a=>setTimeout(a,1e3)),this.visibleCount+=4,this.isLoading=!1}}},R={class:"search-container"},I={class:"card-container"},Y={key:0,class:"empty-state"},z=["disabled"],P={key:0},N={key:1};function j(a,e,l,p,r,s){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",R,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):u("",!0)]),t("div",I,[(n(!0),i(w,null,b(s.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),s.displayedPoems.length===0?(n(),i("div",Y,' No results found for "'+d(r.searchQuery)+'". ',1)):u("",!0)]),s.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>s.loadMore&&s.loadMore(...o))},[r.isLoading?(n(),i("span",N,"Loading...")):(n(),i("span",P,"See more"))],8,z)):u("",!0)])}const O=c(F,[["render",j],["__scopeId","data-v-927a42a9"]]),U=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/32.md","filePath":"chatai/32.md"}'),L={name:"chatai/32.md"},V=Object.assign(L,{setup(a){return(e,l)=>(n(),i("div",null,[x(O)]))}});export{U as __pageData,V as default};
