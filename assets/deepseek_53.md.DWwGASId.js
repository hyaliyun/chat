import{_ as c,o as n,c as r,a as t,m as f,t as h,C as p,M as b,U as _,f as l,F as v,p as w,e as y,q}from"./chunks/framework.B1z0IdBH.js";const x={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},C={class:"review"},T={class:"review-title"},R={class:"review-content"};function I(i,e,u,d,s,a){return n(),r("div",k,[t("div",C,[t("div",T,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),f(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",R,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),f(h(u.poem.solution),1)])])])}const F=c(x,[["render",I],["__scopeId","data-v-f2589c85"]]),A=JSON.parse(`[{"question":"Create a function that takes in an array and returns the maximum value found in that array.","solution":"def find_max_value(arr): Returns the maximum value found in the array. if not arr: return None return max(arr)"},{"question":"Create a function that takes a vector of strings and returns a vector containing the length of each string.","solution":"def string_lengths(string_list): Returns a list containing the length of each string in the input list. Args: string_list (list of str): A list of strings. Returns: list of int: A list where each element is the length of the corresponding string in string_list. return [len(s) for s in string_list]"},{"question":"Create a function that can find the smallest number in an array.","solution":"def find_smallest_number(arr): Returns the smallest number in an array. Parameters: arr (list): List of numbers. Returns: int/float: The smallest number in the array. if not arr: raise ValueError(\\"Array is empty\\") return min(arr)"},{"question":"Create a function that takes an integer as an argument and returns the sum of all the factors of that integer. Let's call this function \`sum_of_factors\`.","solution":"def sum_of_factors(n): Returns the sum of all factors of the given integer n. if n < 1: return 0 sum_factors = 0 for i in range(1, n + 1): if n % i == 0: sum_factors += i return sum_factors"},{"question":"Create a function that takes a list of lists of numbers called \\"matrix\\" as an input and checks if every element in the matrix is a prime number. If every element is prime, the function should return True. Otherwise, it should return False.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def is_prime_matrix(matrix): Checks if every element in the given matrix is a prime number. Args: matrix: List of lists of numbers. Returns: bool: True if every element is prime, False otherwise. for row in matrix: for elem in row: if not is_prime(elem): return False return True"},{"question":"Create a function that takes a 2D array as input and returns the sum of all the elements in the array. The function should be able to handle both integers and floating point numbers.","solution":"def sum_2d_array(arr): Returns the sum of all elements in a 2D array. Parameters: arr (list of lists): A 2D array containing integers or floating point numbers Returns: float: The sum of all elements in the array total_sum = 0.0 for row in arr: for element in row: total_sum += element return total_sum"},{"question":"Create a function that takes an array of positive integers, A, and an integer size, N, as input and returns a new array where each element is the square of the corresponding element in the input array.","solution":"def square_elements(A, N): Takes an array of positive integers A and an integer size N, returns a new array where each element is the square of the corresponding element in the input array. if len(A) != N: raise ValueError(\\"Length of array A must be equal to N\\") return [x * x for x in A]"},{"question":"Create a function that takes an integer as input and returns the number of 1 bits in its binary representation. ASP.NET Core, VB.NET, or any popular .NET language solution","solution":"def count_one_bits(n): Returns the number of 1 bits in the binary representation of the input integer n. return bin(n).count('1')"},{"question":"Create a function that takes two strings, \`a\` and \`b\`, as input and returns the two strings concatenated in reverse order (i.e., \`b\` first, then \`a\`).","solution":"def concatenate_reverse(a, b): Concatenates two strings 'a' and 'b' in reverse order. Returns 'b' followed by 'a'. return b + a"},{"question":"Create a function that takes three arguments: a string, the start index, and the end index. The function should return a substring of the given string, starting from the start index to the end index (inclusive). If the start index or end index is negative or greater than the length of the string, the function should handle these cases gracefully by returning the appropriate substring from the start to the end of the string.","solution":"def substring(s, start, end): Returns a substring of the given string s, starting from the start index to the end index (inclusive). Handles cases where the start or end index is negative or greater than the length of the string. if start < 0: start = 0 if end >= len(s): end = len(s) - 1 return s[start:end+1]"},{"question":"Create a function that converts a decimal number to its binary representation as a string. Although standard Python functions can be used to achieve this, the goal is to implement the conversion manually without using any built-in functions. What's the approach to solve this?","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation as a string. if n == 0: return '0' binary = '' while n > 0: binary = str(n % 2) + binary n = n // 2 return binary"},{"question":"Create a function that takes a string and replaces all vowels in it with the symbol '*' using the for loop. The string has only alphabetic characters and spaces.","solution":"def replace_vowels_with_asterisk(s): Returns the string s with all vowels replaced with the symbol '*'. vowels = \\"aeiouAEIOU\\" replaced_string = \\"\\" for char in s: if char in vowels: replaced_string += '*' else: replaced_string += char return replaced_string"},{"question":"Create a function that checks if a given list of integers contains a prime number. If it does, the function returns True; otherwise, it returns False. You need to do this without using any external libraries.","solution":"def is_prime(n): Checks if a given number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5)+1, 2): if n % i == 0: return False return True def contains_prime(lst): Checks if a given list of integers contains any prime numbers. for n in lst: if is_prime(n): return True return False"},{"question":"Create a function that takes an integer as input and returns the next greater number with the same number of digits that is divisible by 11. If no such number exists, return -1.","solution":"def next_greater_number_divisible_by_11(n): Given an integer n, return the next greater number with the same number of digits that is divisible by 11. If no such number exists, return -1. number_of_digits = len(str(n)) start = n + 1 while len(str(start)) == number_of_digits: if start % 11 == 0: return start start += 1 return -1"},{"question":"Create a function that takes two arrays as input. Return true if one is the reverse of the other and false otherwise. For instance, the arrays could be [1, 2, 3, 4] and [4, 3, 2, 1].","solution":"def are_reverse_arrays(arr1, arr2): Returns True if arr2 is the reverse of arr1, otherwise returns False. return arr1 == arr2[::-1]"},{"question":"Create a function that takes a list of integers and returns a new list where each element is the square of the corresponding element in the input list. The function should be called \`square_elements\`.","solution":"def square_elements(lst): Takes a list of integers and returns a new list where each element is the square of the corresponding element in the input list. return [x**2 for x in lst]"},{"question":"Create a function that takes in a 2D array (list of lists of integers), and returns the product of all the elements in the array.","solution":"def product_of_2d_array(arr): Given a 2D array (list of lists of integers), returns the product of all the elements in the array. product = 1 for row in arr: for element in row: product *= element return product"},{"question":"Create a function that calculates the total number of possible unique combinations of a given string of length n, where each character in the string can be any of the 26 lowercase English alphabets or digits from 0 to 9.","solution":"def total_combinations(n): Returns the total number of possible unique combinations of a string of length n. Each character in the string can be any of the 26 lowercase English alphabets or digits from 0 to 9 (total 36 characters). if n < 0: raise ValueError(\\"Length of the string cannot be negative.\\") return 36 ** n"},{"question":"Create a function that takes a number as an input and returns \\"Buzz\\" if the number is a multiple of 5, \\"Fizz\\" if the number is a multiple of 3, \\"FizzBuzz\\" if the number is a multiple of both 3 and 5, and the number itself otherwise.","solution":"def fizz_buzz(number): Returns \\"Fizz\\" if the number is a multiple of 3, \\"Buzz\\" if the number is a multiple of 5, \\"FizzBuzz\\" if the number is a multiple of both 3 and 5, and the number itself otherwise. if number % 3 == 0 and number % 5 == 0: return \\"FizzBuzz\\" elif number % 3 == 0: return \\"Fizz\\" elif number % 5 == 0: return \\"Buzz\\" else: return number"},{"question":"Create a function that takes a positive integer \`n\` and returns the sum of all even numbers from 1 to \`n\` without using any loops.","solution":"def sum_even_numbers(n): Returns the sum of all even numbers from 1 to n. if n < 1: return 0 # Calculate the number of even numbers up to n m = n // 2 return m * (m + 1)"},{"question":"Create a function that takes a list and an integer index as arguments. The function should remove the element at the given index and return the modified list. If the index is out of range, the function should return the original list.","solution":"def remove_element(lst, index): Removes the element at the specified index in lst. If the index is out of range, returns the original list. Parameters: lst (list): The input list. index (int): The index of the element to be removed. Returns: list: The list with the element removed if index is in range, otherwise the original list. if 0 <= index < len(lst): return lst[:index] + lst[index+1:] return lst"},{"question":"Create a function that takes a string of characters and calculates the number ofabetic characters, punctuation characters, and other characters in the string.","solution":"import string def count_characters(s): Counts the number of alphabetic characters, punctuation characters, and other characters in the string. Parameters: s (str): The input string. Returns: dict: A dictionary with the counts of alphabetic, punctuation, and other characters. alpha_count = 0 punctuation_count = 0 other_count = 0 for char in s: if char.isalpha(): alpha_count += 1 elif char in string.punctuation: punctuation_count += 1 else: other_count += 1 return { 'alphabetic': alpha_count, 'punctuation': punctuation_count, 'other': other_count }"},{"question":"Create a function that takes a string and a number as input. The function should return a new string that contains the original string repeated 'n' times.","solution":"def repeat_string(s, n): Returns a new string that contains the original string 's' repeated 'n' times. return s * n"},{"question":"Create a function that takes a list of integers and returns the first pair of integers that have a difference of exactly 1. If no such pair exists, return an empty tuple.","solution":"def find_pair_with_diff_one(lst): Takes a list of integers and returns the first pair of integers that have a difference of exactly 1. If no such pair exists, returns an empty tuple. :param lst: List of integers :return: Tuple of the first pair of integers with a difference of exactly 1, or an empty tuple for i in range(len(lst) - 1): for j in range(i + 1, len(lst)): if abs(lst[i] - lst[j]) == 1: return (lst[i], lst[j]) return ()"},{"question":"Create a function that finds the smallest number in an array using the selection sort algorithm.","solution":"def selection_sort_min(arr): Performs selection sort on the array to find and return the smallest element. if not arr: # if the array is empty, return None return None for i in range(len(arr)): min_index = i # set the current index as the minimum for j in range(i+1, len(arr)): if arr[j] < arr[min_index]: min_index = j # update min_index if a smaller element is found arr[i], arr[min_index] = arr[min_index], arr[i] # swap the element at i with the element at min_index return arr[0] # return the smallest element which is now at the beginning"},{"question":"Create a function that takes two strings as input and returns a tuple of the concatenated string and the length of the concatenated string. If the function receives two numbers, it should first convert them to strings before concatenating. However, if the function receives a non-string or non-number input, it should return an error message.","solution":"def concatenate_and_length(a, b): Concatenates two inputs (after converting them to strings if they are numbers) and returns a tuple containing the concatenated string and its length. Returns an error message if inputs are not strings or numbers. if isinstance(a, (str, int, float)) and isinstance(b, (str, int, float)): concatenated = str(a) + str(b) return concatenated, len(concatenated) return \\"Error: Both inputs must be either strings or numbers.\\""},{"question":"Create a function that prints out an n x n grid of asterisks (*), where n is the number of rows and columns. The function should take an integer n as its parameter.","solution":"def print_grid(n): Prints an n x n grid of asterisks. Parameters: n (int): The number of rows and columns in the grid. grid = '' for i in range(n): grid += '*' * n + 'n' print(grid) return grid"},{"question":"Create a function that takes two integer lists as input and returns their dot product. The function should handle cases where the lists are of different lengths by truncating the longer list to match the length of the shorter one. If both lists are empty, the function should return 0.","solution":"def dot_product(list1, list2): Returns the dot product of two given lists. If the lists are of different lengths, it truncates the longer list to match the length of the shorter one. If both lists are empty, returns 0. if not list1 or not list2: return 0 min_length = min(len(list1), len(list2)) truncated_list1 = list1[:min_length] truncated_list2 = list2[:min_length] return sum(x * y for x, y in zip(truncated_list1, truncated_list2))"},{"question":"Create a function that takes two parameters: an iterable \`x\` and a function \`f\`. It should return a new iterable where the elements of \`x\` are transformed using the function \`f\`.","solution":"def transform_iterable(x, f): Applies the function \`f\` to each element in the iterable \`x\` and returns a new iterable with the transformed elements. :param x: An iterable containing elements to be transformed. :param f: A function that takes a single argument and returns a transformed value. :return: A new iterable with the transformed elements. return (f(element) for element in x)"},{"question":"Create a function that multiplies two numbers.","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Create a function that takes two inputs, an integer \`n\` and an integer \`k\`, and returns the \`k\`th bit set in a binary number with \`n\` bits set. The binary number should be interpreted in the most significant bit (MSB) to least significant bit (LSB) order. If there is no \`k\`th bit set, return None.","solution":"def kth_bit_set(n, k): Returns the index of the k-th bit set (1-indexed) in a binary number with n bits set. If there is no k-th bit set, it returns None. Args: n (int): The number of bits set. k (int): The k-th bit set to find. Returns: int: The index of the k-th bit set, or None if there is no k-th bit set. if k > n or k <= 0: return None # To get the correct bit position in a sequence of n bits set # We use 1-based indexing for k as per the problem statement. return n - k + 1"},{"question":"Create a function that takes a string and returns the string with all digits removed. How can I achieve this using Python?","solution":"def remove_digits(input_string): Removes all digits from the input string and returns the modified string. Parameters: input_string (str): The string from which digits need to be removed. Returns: str: The string without any digits. return ''.join(char for char in input_string if not char.isdigit())"},{"question":"Create a function that takes an array of integers and returns the sum of the squares of the even elements in the array. The function should be named \`sum_of_even_squares\` and should have a detailed docstring explaining its purpose, parameters, and return value.","solution":"def sum_of_even_squares(arr): Returns the sum of the squares of the even elements in the input list. Parameters: arr (list): A list of integers. Returns: int: The sum of the squares of the even elements in the list. If there are no even elements, return 0. return sum(x**2 for x in arr if x % 2 == 0)"},{"question":"Create a function that renames a file in a specified directory.","solution":"import os def rename_file(directory, current_filename, new_filename): Renames the file in the specified directory from current_filename to new_filename. :param directory: The directory where the file is located. :param current_filename: The current name of the file. :param new_filename: The new name for the file. current_path = os.path.join(directory, current_filename) new_path = os.path.join(directory, new_filename) if not os.path.exists(current_path): raise FileNotFoundError(f\\"The file {current_filename} does not exist in the directory {directory}.\\") if os.path.exists(new_path): raise FileExistsError(f\\"The file {new_filename} already exists in the directory {directory}.\\") os.rename(current_path, new_path)"},{"question":"Create a function that converts a list of integers to a list of their corresponding English words. For example, the integer 1 should be converted to \\"one\\", and 100 should be converted to \\"one hundred\\".","solution":"def convert_to_words(nums): Converts a list of integers to a list of their corresponding English words. num_words = { 0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten', 11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen', 15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighteen', 19: 'nineteen', 20: 'twenty', 30: 'thirty', 40: 'forty', 50: 'fifty', 60: 'sixty', 70: 'seventy', 80: 'eighty', 90: 'ninety', 100: 'one hundred' } def number_to_words(num): if num in num_words: return num_words[num] elif num < 100: tens, below_ten = divmod(num, 10) return f\\"{num_words[tens*10]}-{num_words[below_ten]}\\" else: return \\"number out of range\\" return [number_to_words(num) for num in nums]"},{"question":"Create a function that takes in two lists of integers (A and B) and returns the product of the corresponding elements in both lists. If the lists are of different lengths, the function should append zeros to the shorter list to make their lengths equal.","solution":"def list_product(A, B): Returns the product of corresponding elements in both lists A and B. If the lists are of different lengths, append zeros to the shorter list. max_len = max(len(A), len(B)) A += [0] * (max_len - len(A)) B += [0] * (max_len - len(B)) return [a * b for a, b in zip(A, B)]"},{"question":"Create a function that takes an array of integers and returns the minimum number of swaps to sort the array. The function should prioritize sorting the array in ascending order. If there are multiple ways to sort the array with the same minimum number of swaps, the function can return any one of them.","solution":"def min_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array. n = len(arr) arr_pos = [*enumerate(arr)] arr_pos.sort(key=lambda it: it[1]) visited = {k: False for k in range(n)} ans = 0 for i in range(n): if visited[i] or arr_pos[i][0] == i: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = arr_pos[x][0] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans"},{"question":"Create a function that takes a list of integers and returns a new list containing the cube of each integer in the input list.","solution":"def cube_list(nums): Returns a new list containing the cube of each integer in the input list. Parameters: nums (list of int): List of integers. Returns: list of int: A list containing the cube of each integer. return [num ** 3 for num in nums]"},{"question":"Create a function that takes two strings as input and returns a new string with the characters in the first string capitalized if and only if they appear in the second string.","solution":"def capitalize_matching_chars(str1, str2): Returns a new string with characters in str1 capitalized if they appear in str2. str2_set = set(str2) result = ''.join(char.upper() if char in str2_set else char for char in str1) return result"},{"question":"Create a function that takes an integer as input and returns the sum of its digits. However, the function should only consider digits that are even. If the number has no even digits, return 0.","solution":"def sum_of_even_digits(n): Returns the sum of the even digits of the input integer n. If there are no even digits, returns 0. sum_even = 0 for digit in str(abs(n)): # Convert number to string and handle negative numbers int_digit = int(digit) if int_digit % 2 == 0: sum_even += int_digit return sum_even"},{"question":"Create a function that returns the most frequent item in a list","solution":"from collections import Counter def most_frequent_item(lst): Returns the most frequent item in a list. If there are multiple items with the same highest frequency, one of them will be returned. if not lst: return None count = Counter(lst) most_common_item, _ = count.most_common(1)[0] return most_common_item"},{"question":"Create a function that takes a list of integers and returns the largest and smallest numbers in the list.","solution":"def find_largest_and_smallest(numbers): Returns the largest and smallest numbers from the list of integers. if not numbers: return None, None largest = max(numbers) smallest = min(numbers) return largest, smallest"},{"question":"Create a function that takes two parameters. The first parameter is a positive integer (n), and the second parameter is a character. The function should return a string that repeats the character n times. If the first parameter is not a positive integer or if the second parameter is not a single character, the function should return an error message.","solution":"def repeat_char(n, char): Repeats the character 'char' for 'n' times. Parameters: n (int): The number of times to repeat the character. Must be a positive integer. char (str): The character to repeat. Must be a single character string. Returns: str: The repeated character string or an error message. if not isinstance(n, int) or n <= 0: return \\"Error: The first parameter must be a positive integer.\\" if not isinstance(char, str) or len(char) != 1: return \\"Error: The second parameter must be a single character.\\" return char * n"},{"question":"Create a function that takes an array of integers and modifies each element in the array. If the element is even, subtract 1 from it. If the element is odd, add 1 to it. However, the function should only modify elements that are located at even indices (i.e., the 0th, 2nd, 4th, ... index). Make sure to copy the array first before making any modifications.","solution":"def modify_array(arr): Modifies elements at even indices: - Subtract 1 if the element is even. - Add 1 if the element is odd. Only modifies elements at even indices. modified_arr = arr.copy() for i in range(len(modified_arr)): if i % 2 == 0: if modified_arr[i] % 2 == 0: modified_arr[i] -= 1 else: modified_arr[i] += 1 return modified_arr"},{"question":"Create a function that takes an integer as input and outputs a string representation of the integer in a specific format. The function should use Python's built-in format function to achieve this.","solution":"def format_integer(n): Returns a dictionary containing various string representations of the integer \`n\`. return { 'binary': format(n, 'b'), 'octal': format(n, 'o'), 'decimal': format(n, 'd'), 'hex': format(n, 'x'), 'HEX': format(n, 'X') }"},{"question":"Create a function that takes an elevation value in feet and returns the equivalent value in meters assuming 1 foot = 0.3048 meters.","solution":"def feet_to_meters(feet): Converts an elevation value in feet to meters. Parameters: feet (float): The elevation value in feet. Returns: float: The equivalent elevation value in meters. return feet * 0.3048"},{"question":"Create a function that generates a tuple with the first 10 elements of the Fibonacci sequence. Each element in the tuple should be calculated using a recursive function. Also, make sure to include error handling in your recursive function to prevent infinite recursion and ensure that the function handles cases where the first element is not passed correctly.","solution":"def fibonacci_recursive(n, memo={}): Returns the n-th Fibonacci number using recursion with memoization. Also includes error handling for invalid input. if n < 0: raise ValueError(\\"Input cannot be negative.\\") elif n == 0: return 0 elif n == 1: return 1 if n in memo: return memo[n] memo[n] = fibonacci_recursive(n - 1, memo) + fibonacci_recursive(n - 2, memo) return memo[n] def generate_fibonacci_sequence(n=10): Returns a tuple with the first 'n' elements of the Fibonacci sequence. return tuple(fibonacci_recursive(i) for i in range(n))"},{"question":"Create a function that generates a string consisting of N '*'. However, the function should also take an optional parameter 'filler' which has a default value of '0'. If 'filler' is provided, instead of '*', it should use the 'filler' character to generate the string.","solution":"def generate_stars(N, filler='*'): Returns a string consisting of N 'filler' characters. By default, the filler is '*'. If another character is provided, it will create a string with that character. :param N: int - number of characters to generate :param filler: str - character to use in the string (default is '*') :return: str - generated string of N 'filler' characters return filler * N"},{"question":"Create a function that takes a string as input and returns the count of words in the string. However, the function should consider \\"the\\", \\"a\\", and \\"an\\" as stop words and should not count them as words. Additionally, the function should handle cases where the input string might contain leading, trailing, or multiple spaces.","solution":"def count_words(s): Returns the count of words in the input string s, excluding stop words like \\"the\\", \\"a\\", and \\"an\\". Handles leading, trailing, and multiple spaces in the string. stop_words = {'the', 'a', 'an'} words = s.lower().split() return sum(word not in stop_words for word in words)"},{"question":"Create a function that calculates the factorial of a number using a recursive approach. The function should take a single integer as an argument and return the factorial of that number. Additionally, include a section in your response explaining the concept of recursion and how it is utilized in this function.","solution":"def factorial(n): Returns the factorial of a given number n using a recursive approach. Parameters: n (int): A non-negative integer whose factorial is to be computed. Returns: int: Factorial of the input number n. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that takes in a list of strings and returns a new list with the strings sorted in reverse alphabetical order.","solution":"def sort_strings_reverse_alphabetical(strings): Returns a list of strings sorted in reverse alphabetical order. Parameters: strings (list): A list of strings Returns: list: A new list with strings sorted in reverse alphabetical order. return sorted(strings, reverse=True)"},{"question":"Create a function that takes a sorted list of integers and a target integer, and returns the index where the target integer should be inserted to maintain the sorted order of the list. If the target is already present in the list, return the index of its first occurrence.","solution":"def find_insert_position(nums, target): Returns the index where the target integer should be inserted in the sorted list to maintain order. If the target is already present, returns the index of its first occurrence. left, right = 0, len(nums) while left < right: mid = (left + right) // 2 if nums[mid] < target: left = mid + 1 else: right = mid return left"},{"question":"Create a function that takes a string and returns the string with all consonants capitalized. A consonant is defined as any alphabet character that is not a vowel (a, e, i, o, u). The function should leave all non-alphabet characters unchanged.","solution":"def capitalize_consonants(s): Returns the input string with all consonants capitalized. vowels = 'aeiouAEIOU' result = [] for char in s: if char.isalpha() and char not in vowels: result.append(char.upper()) else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes two arrays as input, finds the intersection of these arrays, and returns it as a sorted array. The function should handle cases where there are duplicate elements in the arrays.","solution":"def find_intersection(arr1, arr2): Returns the sorted intersection of two arrays, including duplicates. :param arr1: First array. :param arr2: Second array. :return: Sorted intersection array including duplicates. count1 = {} intersection = [] # Count the occurrences of elements in the first array for item in arr1: if item in count1: count1[item] += 1 else: count1[item] = 1 # Find intersection, considering duplicates for item in arr2: if item in count1 and count1[item] > 0: intersection.append(item) count1[item] -= 1 return sorted(intersection)"},{"question":"Create a function that prints \\"Hello, GPT!\\" when called.","solution":"def say_hello(): Prints 'Hello, GPT!'. print(\\"Hello, GPT!\\")"},{"question":"Create a function that prints a times table for a user-defined number in Python. The function should take an integer as an input and print out the multiplication table for that number. The solution should be suitable for beginners and should not require advanced Python features.","solution":"def print_times_table(n): Prints the multiplication table for the number n from 1 to 10. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") for i in range(1, 11): print(f\\"{n} x {i} = {n * i}\\")"},{"question":"Create a function that can convert a string into a list where each element is a chunk of the string. The chunk size is given as an argument to the function. For example, if the input string is \\"hello world\\" and the chunk size is 3, the output should be [\\"hel\\", \\"lo \\", \\"wor\\", \\"ld\\"].","solution":"def chunk_string(s, chunk_size): Splits the string s into chunks of size chunk_size. return [s[i:i + chunk_size] for i in range(0, len(s), chunk_size)]"},{"question":"Create a function that accepts a string and returns the string in reverse order. For example, if the input is \\"hello world\\", the output should be \\"dlrow olleh\\".","solution":"def reverse_string(s): Returns the input string reversed. return s[::-1]"},{"question":"Create a function that will find all the unique numbers in a list and return them as a new list.","solution":"def find_unique_numbers(lst): Returns a list of unique numbers from the input list. return list(set(lst))"},{"question":"Create a function that takes two arguments, a string and an integer. The function should return the string concatenated with itself the number of times specified by the integer. For example if the integer is 3, the string should be returned three times: \\"exampleexampleexample\\"","solution":"def repeat_string(s, n): Returns the string s concatenated with itself n times. Parameters: s (str): The string to be repeated. n (int): The number of times to repeat the string. Returns: str: The concatenated string. return s * n"},{"question":"Create a function that takes two parameters: an integer \`n\` and a list \`lst\`. The function should insert \`n\` at the index position specified by \`lst[0]\` in the list \`lst\`. If the index is out of bounds, the function should insert \`n\` at the end of the list. The function should return the modified list.","solution":"def insert_at_index(n, lst): Inserts the integer \`n\` at the index position specified by \`lst[0]\` in the list \`lst\`. If the index is out of bounds, inserts \`n\` at the end of the list. Args: - n: An integer to insert. - lst: A list where the first element \`lst[0]\` specifies the index. Returns: - The modified list. if not lst: return [n] index = lst[0] if index < 0 or index >= len(lst): lst.append(n) else: lst.insert(index, n) return lst"},{"question":"Create a function that calculates the number of days in a month. The function should take two parameters: the year and the month number.","solution":"def days_in_month(year, month): Returns the number of days in a given month for a specific year. The year is provided to account for leap years. Parameters: year (int): The year month (int): The month number (1-12) Returns: int: Number of days in the month # Check for February and account for leap years if month == 2: if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return 29 else: return 28 # April, June, September, and November have 30 days if month in [4, 6, 9, 11]: return 30 # All other months have 31 days return 31"},{"question":"Create a function that takes an integer N as input and returns the least number of perfect squares that sum up to N. For example, if N = 12, then the function should return 3, because 12 = 4 + 4 + 4. If N = 13, then the function should return 2, because 13 = 4 + 9.","solution":"from math import isqrt def numSquares(n): Returns the least number of perfect squares that sum up to n. # Initialize a DP array to store the minimum number of squares to sum up to each number from 0 to n. dp = [float('inf')] * (n + 1) dp[0] = 0 # Base case # Precompute all possible perfect squares that are less than or equal to n squares = [i * i for i in range(1, isqrt(n) + 1)] # Fill the DP array for i in range(1, n + 1): for square in squares: if i < square: break dp[i] = min(dp[i], dp[i - square] + 1) return dp[n]"},{"question":"Create a function that takes one parameter, a string, and returns the string with all vowels removed. You should preserve the case of the consonants.","solution":"def remove_vowels(s): Returns the given string s with all vowels removed. vowels = \\"aeiouAEIOU\\" return ''.join(char for char in s if char not in vowels)"},{"question":"Create a function that takes an existing list and reverses the order of its elements. The function should then print out the updated list. Due to some constraints, the function must strictly use a recursive approach. How can this be achieved in Python?","solution":"def reverse_list_recursive(lst): Recursively reverses the input list and returns the reversed list. if len(lst) == 0: return [] return [lst[-1]] + reverse_list_recursive(lst[:-1])"},{"question":"Create a function that takes an integer as an input and returns a string representing the integer in steps. For example, if the input is 5, the function should return \\"5n4n3n2n1\\". If the input is 3, the function should return \\"3n2n1\\". Assume the input is always a positive integer.","solution":"def integer_steps(n): Returns a string representing the integer in steps from n to 1. return 'n'.join(str(i) for i in range(n, 0, -1))"},{"question":"Create a function that returns a string representing the binary value of the input number. The function should handle both positive and negative integers.","solution":"def int_to_binary_string(n): Returns the binary representation of an input integer n as a string. if n < 0: # For negative numbers, use two's complement representation return '-' + bin(-n)[2:] else: return bin(n)[2:]"},{"question":"Create a function that counts the number of islands in a 2D grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water.","solution":"def num_islands(grid): Returns the number of islands in a given 2D grid. An island is surrounded by water and formed by connecting adjacent lands horizontally or vertically. if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == '0' or visited[r][c]: return visited[r][c] = True dfs(r + 1, c) dfs(r - 1, c) dfs(r, c + 1) dfs(r, c - 1) island_count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == '1' and not visited[r][c]: dfs(r, c) island_count += 1 return island_count"},{"question":"Create a function that generates a string containing all the characters from 'a' to 'z' followed by 'A' to 'Z'.","solution":"def generate_alphabet_string(): Generates a string containing all characters from 'a' to 'z' followed by 'A' to 'Z'. lower_case = ''.join(chr(i) for i in range(97, 123)) # 'a' to 'z' upper_case = ''.join(chr(i) for i in range(65, 91)) # 'A' to 'Z' return lower_case + upper_case"},{"question":"Create a function that reverses a given array of integers without using extra space. The function should modify the array in-place and return the reversed array.","solution":"def reverse_array(arr): Reverses the given array of integers in-place. Args: arr (list): A list of integers. Returns: list: The same list with elements reversed. left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Create a function that takes a linked list as a parameter and returns the value of the last element in the linked list. In Python, the linked list is represented as a series of nodes, each with a value and a pointer to the next node.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def get_last_element(head): Returns the value of the last element in the linked list. if not head: return None current = head while current.next: current = current.next return current.val"},{"question":"Create a function that takes a single input, an integer, and returns its binary representation as a string, but with a prefix '0b' and a suffix '_bin'. The function should handle positive and negative integers, and return '0b0_bin' for zero.","solution":"def to_custom_binary(n): Returns the binary representation of an integer with a prefix '0b' and a suffix '_bin'. Handles positive, negative integers and zero. if n == 0: return '0b0_bin' elif n > 0: return f\\"0b{bin(n)[2:]}_bin\\" else: return f\\"0b-{bin(abs(n))[2:]}_bin\\""},{"question":"Create a function that takes a list of integers and returns the missing number in the list. The list contains integers from 1 to n, but one number is missing. How can I achieve this in Python?","solution":"def find_missing_number(nums): Returns the missing number in the list of integers ranging from 1 to n. Args: nums (list): List of integers. Returns: int: The missing number. n = len(nums) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) return expected_sum - actual_sum"},{"question":"Create a function that generates a specific pattern of asterisks (*) based on the input size in a console application. The pattern should alternate between rows of three asterisks and rows of one asterisk.","solution":"def generate_pattern(n): Generates a pattern with alternating rows of three asterisks and one asterisk. Parameters: n (int): Number of rows in the pattern. Returns: str: The generated pattern with the specified number of rows. pattern = \\"\\" for i in range(n): if i % 2 == 0: pattern += \\"***n\\" else: pattern += \\"*n\\" return pattern.strip() # Remove the trailing newline"},{"question":"Create a function that takes two integer arguments, x and y, and returns the sum of all integers between x and y (inclusive). If y is less than x, the function should return null.","solution":"def sum_inclusive(x, y): Returns the sum of all integers between x and y (inclusive). If y is less than x, returns None. if y < x: return None return sum(range(x, y+1))"},{"question":"Create a function that takes two integers as input and returns the quotient and remainder of the division. The function should handle cases where division is not possible (i.e., division by zero).","solution":"def divide(dividend, divisor): Returns the quotient and remainder when dividend is divided by divisor. Handles division by zero by returning 'None' for both quotient and remainder. if divisor == 0: return None, None quotient = dividend // divisor remainder = dividend % divisor return quotient, remainder"},{"question":"Create a function that takes three parameters: \`x\`, \`y\`, and \`z\`, and returns the result of the expression \`x + y + 2z\`. If any of the parameters are not numbers, the function should return a string \\"Invalid input\\". Make sure your function handles different data types gracefully.","solution":"def calculate_expression(x, y, z): Returns the result of the expression x + y + 2z. If any of the parameters are not numbers, returns 'Invalid input'. if not isinstance(x, (int, float)) or not isinstance(y, (int, float)) or not isinstance(z, (int, float)): return \\"Invalid input\\" return x + y + 2*z"},{"question":"Create a function that takes a list contains a mix of integers and strings, converts all strings to integers, and returns the new list with all integers. If a string is not a valid integer, ignore it and continue with the next element in the list.","solution":"def convert_mixed_list(lst): This function takes a list with a mix of integers and strings, converts all valid string representations of integers to integers, and returns a new list with all integers. Strings that cannot be converted into integers are ignored. result = [] for item in lst: if isinstance(item, int): result.append(item) elif isinstance(item, str): try: result.append(int(item)) except ValueError: pass return result"},{"question":"Create a function that generates a given number of Fibonacci numbers.","solution":"def generate_fibonacci(n): Generates a list of the first n Fibonacci numbers. :param n: Number of Fibonacci numbers to generate :return: A list of the first n Fibonacci numbers if n <= 0: return [] fib_seq = [0, 1] while len(fib_seq) < n: fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq[:n]"},{"question":"Create a function that takes a list of integers and a target integer. The function should return a boolean indicating whether or not the target integer appears in the list.","solution":"def contains_target(lst, target): Checks if the target integer appears in the list. :param lst: List of integers. :param target: Integer to check for in the list. :return: Boolean indicating whether the target appears in the list. return target in lst"},{"question":"Create a function that takes a binary string and returns the decimal equivalent of the binary string. For instance, if the input is \\"1101\\", the output should be 13. Make sure your function handles binary strings of varying lengths.","solution":"def binary_to_decimal(binary_str): Converts a binary string to its decimal equivalent. :param binary_str: A string representing a binary number (e.g., \\"1101\\") :return: The decimal equivalent of the binary string (e.g., 13) return int(binary_str, 2)"},{"question":"Create a function that takes an array of integers, and returns true if all elements in the array are even numbers. If there's at least one odd number, the function should return false.","solution":"def all_even_numbers(array): Returns True if all elements in the array are even numbers, otherwise returns False. for num in array: if num % 2 != 0: return False return True"},{"question":"Create a function that calculates the sum of integers from 1 to \`n\` without using any loops or recursive calls. You need to implement this using only mathematical algorithms.","solution":"def sum_integers(n): Returns the sum of integers from 1 to n. if n < 1: return 0 # Sum is zero for any number less than 1 return n * (n + 1) // 2"},{"question":"Create a function that takes a string as an argument and returns the number of times the letter \\"e\\" appears in the string. You should be able to call this function with different strings and count the occurrences of the letter \\"e\\" in each string.","solution":"def count_e_occurrences(s): Returns the number of times the letter \\"e\\" appears in the string s. return s.count('e')"},{"question":"Create a function that takes two vectors of integers and returns a vector of integers representing the element-wise difference between the two vectors. If the vectors are of unequal length, calculate the difference up to the length of the shorter vector.","solution":"def vector_difference(vec1, vec2): Returns a vector of integers representing the element-wise difference between the two input vectors. If the vectors are of unequal length, the difference is calculated up to the length of the shorter vector. min_length = min(len(vec1), len(vec2)) return [vec1[i] - vec2[i] for i in range(min_length)]"},{"question":"Create a function that takes in a tuple of integers and returns a new tuple containing the elements of the original tuple sorted in ascending order.","solution":"def sort_tuple(input_tuple): Takes a tuple of integers and returns a new tuple with the elements sorted in ascending order. return tuple(sorted(input_tuple))"},{"question":"Create a function that takes three parameters, a string, a beginning index, and an ending index. The function should return a substring of the input string from the beginning index to the ending index (inclusive). If the beginning index or ending index is out of the bounds of the string, the function should handle this gracefully and return an appropriate message.","solution":"def substring_with_bounds(s, start, end): Returns a substring of the input string s from the start index to the end index (inclusive). If start or end is out of bounds, returns an appropriate message. if not isinstance(s, str): return \\"Input is not a string\\" if start < 0 or end < 0 or start >= len(s) or end >= len(s): return \\"Index out of bounds\\" if start > end: return \\"Start index is greater than end index\\" return s[start:end+1]"},{"question":"Create a function that filters out all the integers that are divisible by 3 or 5 from a given list. Return the resulting list.","solution":"def filter_divisible_by_3_or_5(numbers): Filters out integers that are divisible by 3 or 5 from the given list. Parameters: numbers (list of int): List of integers to be filtered. Returns: list of int: List of integers that are not divisible by 3 or 5. return [num for num in numbers if num % 3 != 0 and num % 5 != 0]"},{"question":"Create a function that takes an integer N and returns a list of all the prime numbers less than or equal to N. Implement this function using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(N): Returns a list of all prime numbers less than or equal to N using the Sieve of Eratosthenes algorithm. if N < 2: return [] is_prime = [True] * (N + 1) p = 2 while (p * p <= N): if (is_prime[p] == True): for i in range(p * p, N + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, N + 1) if is_prime[p]] return primes"},{"question":"Create a function that takes the argument abc and returns the square of abc","solution":"def square(abc): Returns the square of abc. return abc ** 2"},{"question":"Create a function that checks if a given string contains both uppercase and lowercase letters. If it does, return True. Otherwise, return False.","solution":"def has_upper_and_lower(s): Check if the input string contains both uppercase and lowercase letters. :param s: input string :return: True if it contains both uppercase and lowercase letters, otherwise False has_upper = any(c.isupper() for c in s) has_lower = any(c.islower() for c in s) return has_upper and has_lower"},{"question":"Create a function that uses the bubble sort algorithm to sort an array of integers.","solution":"def bubble_sort(arr): Sorts an array of integers using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a function that implements a binary search algorithm and produces the target value in an ordered list If the target value is not in the list, return -1.","solution":"def binary_search(arr, target): Implements binary search algorithm to find the target value in ordered list 'arr'. If the target value is not found, returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that calculates the sum of an array of integers. The function should return the result.","solution":"def sum_array(arr): Returns the sum of an array of integers. :param arr: List of integers :return: Integer sum of the array elements return sum(arr)"},{"question":"Create a function that takes four parameters (a, b, c, d) and returns the sum of the elements at index 0 and the last index in the given lists.","solution":"def sum_first_and_last(a, b, c, d): Returns the sum of the elements at index 0 and the last index in the given lists. Parameters: a, b, c, d (list): Input lists Returns: int: The sum of the elements at index 0 and the last index of all lists return a[0] + a[-1] + b[0] + b[-1] + c[0] + c[-1] + d[0] + d[-1]"},{"question":"Create a function that takes an integer N and returns a list of integers that are less than N and have a remainder of 1 when divided by 5.","solution":"def get_remainders(N): Returns a list of integers less than N that have a remainder of 1 when divided by 5. return [i for i in range(N) if i % 5 == 1]"},{"question":"Create a function that identifies all prime numbers less than a given non-negative integer \`N\`. The function should return a list of these prime numbers in ascending order. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def sieve_of_eratosthenes(N): Returns a list of all prime numbers less than N using the Sieve of Eratosthenes algorithm. if N <= 2: return [] primes = [True] * N primes[0] = primes[1] = False # 0 and 1 are not prime numbers for i in range(2, int(N ** 0.5) + 1): if primes[i]: for j in range(i * i, N, i): primes[j] = False return [i for i in range(2, N) if primes[i]]"},{"question":"Create a function that generates a random integer between 1 and 100, and then returns True if the number is even, and False otherwise.","solution":"import random def is_even_random_number(): Generates a random integer between 1 and 100. Returns True if the number is even, False otherwise. random_number = random.randint(1, 100) return random_number % 2 == 0"},{"question":"Create a function that returns the square of a number in a list. The function should take a list of numbers and return a new list where each number has been squared.","solution":"def square_numbers(numbers): Returns a list where each number in the input list has been squared. Parameters: numbers (list): A list of numbers Returns: list: A new list with each number squared return [number ** 2 for number in numbers]"},{"question":"Create a function that checks if a given string is a rotation of another string. For example, \\"waterbottle\\" is a rotation of \\"erbottlewat\\". How would you implement this logic in Python?","solution":"def is_rotation(s1, s2): Checks if s2 is a rotation of s1. if len(s1) != len(s2): return False return s2 in s1 + s1"},{"question":"Create a function that takes the board represented by a two-dimensional array and returns the position of the queen at a given row.","solution":"def find_queen_position(board, row): Returns the column index of the queen in the specified row of the board. The board is represented as a two-dimensional array where 1 represents a queen and 0 represents an empty cell. If no queen is found in the specified row, return -1. :param board: List of lists representing the chess board :param row: Index of the row (0-based) to find the queen in :return: Column index of the queen in the specified row, or -1 if no queen is found if row < 0 or row >= len(board): return -1 for col in range(len(board[row])): if board[row][col] == 1: return col return -1"},{"question":"Create a function that takes a dictionary and an integer as input and returns a new dictionary that only contains the key-value pairs from the original dictionary where the values are greater than the given integer.","solution":"def filter_dict_by_value(d, threshold): Returns a new dictionary containing only the key-value pairs from the original dictionary where the values are greater than the given integer threshold. Parameters: d (dict): The original dictionary threshold (int): The threshold value Returns: dict: A new dictionary with key-value pairs where the values are greater than threshold return {k: v for k, v in d.items() if v > threshold}"},{"question":"Create a function that adds 'ing' at the end of each word and returns the list of words.","solution":"def add_ing(words): Adds 'ing' at the end of each word in the given list of words. Args: words (list of str): The list of words to which 'ing' should be added. Returns: list of str: The list of words with 'ing' added at the end. return [word + 'ing' for word in words]"},{"question":"Create a function that takes in a list of integers and returns a list of integers where each element is the sum of the corresponding elements of the input list and a constant number c.","solution":"def add_constant(lst, c): Returns a list where each element is the sum of the corresponding element of the input list and a constant number c. Args: lst (list of int): The input list of integers. c (int): The constant number to be added to each element. Returns: list of int: The resulting list after adding the constant number to each element of the input list. return [x + c for x in lst]"},{"question":"Create a function that reads a numeric value from a configuration file and assigns it to a variable. The configuration file is named \\"config.txt\\" and is located in the \\"/etc/\\" directory. The numeric value is stored in a line that starts with \\"numeric_value=\\". The function should return this numeric value as an integer.","solution":"def read_numeric_value_from_config(): Reads the numeric value from the configuration file located at /etc/config.txt and returns it as an integer. config_file_path = \\"/etc/config.txt\\" with open(config_file_path, \\"r\\") as config_file: for line in config_file: if line.startswith(\\"numeric_value=\\"): numeric_value = line.split(\\"=\\")[1].strip() # Extract the value and strip whitespace return int(numeric_value) raise ValueError(\\"numeric_value not found in the configuration file\\")"},{"question":"Create a function that accepts an array of integers and returns an array of tuples, where each tuple contains a unique combination of two integers from the original array. The function should ensure that no pair is repeated in the output array.","solution":"from itertools import combinations def unique_pairs(arr): Accepts an array of integers and returns an array of tuples, where each tuple contains a unique combination of two integers from the original array. return list(combinations(arr, 2))"},{"question":"Create a function that multiplies each element in an array by a given number and returns the new array. The function should also handle the case where the number is negative, by potentially flipping the sign of the elements in the array.","solution":"def multiply_array(arr, num): Multiplies each element in the array by the given number. :param arr: List of integers or floats :param num: Integer or float to multiply each element of arr by :return: New list with each element multiplied by num return [x * num for x in arr]"},{"question":"Create a function that sorts an array of integers in ascending order using the Bubble Sort algorithm.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the Bubble Sort algorithm. Parameters: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers. n = len(arr) # Traverse through all array elements for i in range(n): # Flag to check if there was a swap swapped = False # Last i elements are already in place for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1 # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no elements were swapped, break the loop if not swapped: break return arr"},{"question":"Create a function that takes a string as input and returns a dictionary with the count of each character in the string.","solution":"def count_characters(s): Returns a dictionary with the count of each character in the string s. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Create a function that accepts an integer as an argument and returns the sum of each digit in the integer using recursion. For instance, if the input integer is 1234, the function should return 10 (1 + 2 + 3 + 4).","solution":"def sum_of_digits(n): Returns the sum of each digit in the integer n using recursion. n = abs(n) # Handle negative numbers by taking absolute value if n == 0: return 0 else: return n % 10 + sum_of_digits(n // 10)"},{"question":"Create a function that returns the first two elements as a list.","solution":"def first_two_elements(lst): Returns the first two elements of a list. return lst[:2]"},{"question":"Create a function that takes a string and returns the longest substring that has the property of being a palindrome.","solution":"def longest_palindrome_substring(s): Returns the longest palindromic substring in the given string s. n = len(s) if n == 0: return \\"\\" start, max_length = 0, 1 for i in range(1, n): # Even length palindrome low, high = i - 1, i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Odd length palindrome low, high = i - 1, i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"Create a function that uses tell and read methods in Python","solution":"def read_from_position(file, position, length): Reads a portion of the file from a specific position. :param file: file object opened in read mode :param position: the position in the file to start reading from :param length: the number of characters to read :return: the read content from the specified position # Move the cursor to the specified position file.seek(position) # Read the specified number of characters content = file.read(length) return content"},{"question":"Create a function that takes a 2D array (list of lists in Python) and returns the transpose of the matrix.","solution":"def transpose(matrix): Returns the transpose of the given 2D array (list of lists). if not matrix or not matrix[0]: return [] return [list(row) for row in zip(*matrix)]"},{"question":"Create a function that takes a list of integers and returns a new list where all the elements greater than a given threshold are replaced with the threshold value.","solution":"def replace_above_threshold(numbers, threshold): Returns a new list where all the elements greater than the given threshold are replaced with the threshold value. :param numbers: List of integers. :param threshold: Integer threshold. :return: List of integers with elements above threshold replaced by threshold. return [min(num, threshold) for num in numbers]"},{"question":"Create a function that takes a list of integers as input and returns a new list where each element is the sum of the original element and its corresponding element in the input list.","solution":"def sum_with_self(input_list): Returns a new list where each element is the sum of the original element and its corresponding element in the input list (i.e., element + element). Parameters: input_list (list): A list of integers. Returns: list: A new list of integers where each element is doubled. return [element * 2 for element in input_list]"},{"question":"Create a function that takes an integer as input and returns the number of times the integer can be divided by 2 before it becomes less than 1 using Python.","solution":"def count_divisions_by_two(n): Returns the number of times the integer n can be divided by 2 before it becomes less than 1. if n < 1: return 0 count = 0 while n >= 1: n /= 2 count += 1 return count - 1"},{"question":"Create a function that takes an integer as input and returns a list of all the integers from 1 to the input integer (inclusive). However, if a number is divisible by 3, replace it with 'Fizz', and if a number is divisible by 5, replace it with 'Buzz'. If a number is divisible by both 3 and 5, replace it with 'FizzBuzz'.","solution":"def fizz_buzz(n): Returns a list of integers from 1 to n with multiples of 3 replaced with 'Fizz', multiples of 5 replaced with 'Buzz', and multiples of both replaced with 'FizzBuzz'. result = [] for i in range(1, n + 1): if i % 15 == 0: result.append('FizzBuzz') elif i % 3 == 0: result.append('Fizz') elif i % 5 == 0: result.append('Buzz') else: result.append(i) return result"},{"question":"Create a function that takes a string of letters as an argument and converts the letters to uppercase, then adds numbers next to each letter based on its position in the alphabet. That means 'a' is 1, 'b' is 2, etc.). For instance, given the input \\"abc\\", the output should be \\"A1B2C3\\".","solution":"def convert_to_alphabet_position(s): Converts the input string of letters to uppercase with numbers corresponding to their position in the alphabet. For example, the input \\"abc\\" will become \\"A1B2C3\\". result = [] for char in s: if char.isalpha(): result.append(f\\"{char.upper()}{ord(char.lower()) - ord('a') + 1}\\") return ''.join(result)"},{"question":"Create a function that takes 2 numbers as input and returns the minimum of these two.","solution":"def minimum(a, b): Returns the minimum of a and b. if a < b: return a else: return b"},{"question":"Create a function that returns the absolute difference between the largest and smallest number in an array of integers. The function should handle both positive and negative numbers, as well as arrays with duplicate values. Return the difference as an integer.","solution":"def absolute_difference(arr): Returns the absolute difference between the largest and smallest number in an array of integers. if not arr: raise ValueError(\\"Array is empty\\") largest = max(arr) smallest = min(arr) return abs(largest - smallest)"},{"question":"Create a function that takes in a string and returns the number of occurrences of each character in the string. The function should ignore spaces and be case-insensitive.","solution":"def char_occurrences(s): Returns the number of occurrences of each character in the string. Ignores spaces and is case-insensitive. s = s.replace(\\" \\", \\"\\").lower() occurrences = {} for char in s: if char in occurrences: occurrences[char] += 1 else: occurrences[char] = 1 return occurrences"},{"question":"Create a function that takes two parameters: a string and a number. The function should return the string repeated 'n' number of times, where 'n' is the second parameter. If the second parameter is not a positive integer, the function should return an empty string. Additionally, ensure the function includes error handling for typical exceptions for string and integer inputs.","solution":"def repeat_string(s, n): Repeats the given string 's' 'n' number of times. Returns empty string if 'n' is not a positive integer. Parameters: s (str): the string to be repeated. n (int): the number of times to repeat the string. Returns: str: the repeated string or empty string if 'n' is not a positive integer. if not isinstance(s, str): raise TypeError(\\"First parameter must be a string.\\") if not isinstance(n, int): raise TypeError(\\"Second parameter must be an integer.\\") if n < 1: return \\"\\" return s * n"},{"question":"Create a function that takes two parameters, a list of positive integers and a target sum 's'. The function should return true if there exists any two distinct elements in the list that add up to 's' and return false otherwise. Use Python coding.","solution":"def has_pair_with_sum(nums, s): Returns True if there are two distinct elements in \`nums\` that add up to \`s\`. Otherwise, returns False. seen = set() for num in nums: if s - num in seen: return True seen.add(num) return False"},{"question":"Create a function that calculates the sum of all prime numbers within a given range [1, n]. The function should have a time complexity of O(n log log n) and a space complexity of O(n).","solution":"def sum_of_primes(n): Calculates the sum of all prime numbers within the range [1, n]. :param n: int - the upper limit of the range. :return: int - the sum of all prime numbers within the range [1, n]. if n < 2: return 0 is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(n ** 0.5) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False return sum(i for i in range(2, n + 1) if is_prime[i])"},{"question":"Create a function that takes two parameters, the first is a list of integers, and the second is an integer. The function should remove all occurrences of the second integer from the list and return the updated list.","solution":"def remove_occurrences(lst, value): Removes all occurrences of value from lst. Parameters: lst (list): A list of integers. value (int): Integer value to be removed from the list. Returns: list: The updated list without the occurrences of value. return [x for x in lst if x != value]"},{"question":"Create a function that takes two strings as an input, and checks if one string is a rotation of the other. The function should return a boolean value indicating whether the rotation is present or not. For example, if the input strings are \\"waterbottle\\" and \\"erbottlewat\\", the function should return true because \\"erbottlewat\\" is a rotation of \\"waterbottle\\". If the input strings are \\"hello\\" and \\"lohel\\", the function should return true as well. However, if the inputs are \\"hello\\" and \\"world\\", the function should return false. The function should handle cases where the input strings are empty or contain non-alphanumeric characters.","solution":"def is_rotation(string1, string2): Returns True if string2 is a rotation of string1, False otherwise. if len(string1) != len(string2): return False concatenated = string1 + string1 return string2 in concatenated"},{"question":"Create a function that takes in two parameters: a string and an integer. The function should return a new string where each character in the input string is duplicated according to the provided integer. For example, if the input string is \\"hello\\" and the integer is 3, the output should be \\"hhheelllloo\\".","solution":"def duplicate_characters(input_string, n): Duplicates each character in the input string n times. Parameters: input_string (str): The string to be duplicated. n (int): The number of times to duplicate each character. Returns: str: A new string with each character duplicated n times. return ''.join([char * n for char in input_string])"},{"question":"Create a function that takes in a valid integer and return its square value. The function should also handle exceptional cases where the input might not be an integer or might even be a float, but should convert such inputs to integers before squaring. If the input is not convertible to an integer, the function should return a specific error message.","solution":"def square_value(input_val): Returns the square of the input value converted to an integer. If the input is not convertible to an integer, return an error message. try: int_val = int(input_val) return int_val ** 2 except (ValueError, TypeError): return \\"Input is not convertible to an integer\\""},{"question":"Create a function that calculates the sum of odd numbers between two inclusive integers given two integers start and end, and returns the sum of those odd numbers.","solution":"def sum_of_odds(start, end): Returns the sum of odd numbers between two inclusive integers start and end. return sum(num for num in range(start, end + 1) if num % 2 != 0)"},{"question":"Create a function that takes in the radius of a circle and calculates its circumference. The function should be called \`calculate_circumference\`.","solution":"import math def calculate_circumference(radius): Calculate the circumference of a circle given its radius. Args: radius (float): The radius of the circle. Returns: float: The circumference of the circle. return 2 * math.pi * radius"},{"question":"Create a function that takes in a list of integers as the variable \`num_list\`, and returns the sum of all the integers in the list using a for loop.","solution":"def sum_of_integers(num_list): Returns the sum of all integers in the list num_list using a for loop. total = 0 for num in num_list: total += num return total"},{"question":"Create a function that takes a 2D list of integers and checks if all the integers in the list are unique. Specifically, the function should return \`True\` if all integers are unique, and \`False\` otherwise. You should handle cases where the 2D list might be empty or contain nested empty lists.","solution":"def are_all_integers_unique(matrix): Checks if all integers in a 2D list are unique. Args: matrix (list of list of int): 2D list of integers. Returns: bool: True if all integers are unique, False otherwise. seen = set() for row in matrix: for num in row: if num in seen: return False seen.add(num) return True"},{"question":"Create a function that generates Fibonacci numbers up to n. The function should return a list containing the Fibonacci numbers.","solution":"def fibonacci(n): Generate Fibonacci numbers up to n and return them as a list. :param n: An integer up to which Fibonacci numbers are generated. :return: A list containing Fibonacci numbers up to n. if n <= 0: return [] fib_list = [0, 1] while True: next_fib = fib_list[-1] + fib_list[-2] if next_fib > n: break fib_list.append(next_fib) return fib_list"},{"question":"Create a function that takes an integer as an argument and returns a string containing the binary representation of that integer. The binary string should be zero-padded to 8 bits.","solution":"def int_to_padded_binary_string(n): Returns the binary representation of an integer n, zero-padded to 8 bits. return f\\"{n & 0xFF:08b}\\""},{"question":"Create a function that takes an array of integers and returns a new array where each element is the product of all other elements in the input array except the element at the same index. The function should work efficiently without using division, and it should handle cases with zeros and negative numbers.","solution":"def product_except_self(nums): Returns an array such that each element is the product of all elements in the input array except for the element at that index. n = len(nums) if n == 0: return [] result = [1] * n prefix = 1 for i in range(n): result[i] = prefix prefix *= nums[i] suffix = 1 for i in range(n - 1, -1, -1): result[i] *= suffix suffix *= nums[i] return result"},{"question":"Create a function that generates a random string of 6 characters.","solution":"import random import string def generate_random_string(length=6): Generates a random string of specified length. Default length is 6 characters. characters = string.ascii_letters + string.digits return ''.join(random.choice(characters) for _ in range(length))"},{"question":"Create a function that takes a string and returns the string with the first letter capitalized and the rest in lowercase.","solution":"def capitalize_string(s): Capitalizes the first letter of the string and converts the rest to lowercase. if not s: return \\"\\" return s[0].upper() + s[1:].lower()"},{"question":"Create a function that searches for a target value in a sorted array and returns the index of the target if it is found. If the target is not found, return -1. The function should have a time complexity of O(log n) and must not use recursion.","solution":"def binary_search(arr, target): Searches for the target value in a sorted array using binary search. :param arr: List[int] - A sorted list of integers. :param target: int - The target value to search for. :return: int - The index of the target if found, else -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that takes an array of integers as input and returns an array of integers representing the original array's sequence reversed, without using any additional arrays except for local variables. To optimize the function, consider minimizing space complexity.","solution":"def reverse_array_in_place(arr): Reverses the given array in place. Args: arr (list): List of integers. Returns: list: The reversed list of integers. left = 0 right = len(arr) - 1 while left < right: # Swap the elements arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Create a function that takes two strings as input and returns the number of common characters between them.","solution":"def common_characters(str1, str2): Returns the number of common characters between two strings. set1 = set(str1) set2 = set(str2) common_set = set1.intersection(set2) return len(common_set)"},{"question":"Create a function that takes a list of integers as input and returns a list of prime numbers found in the input list. Additionally, the function should also return the count of non-prime numbers in the input list.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def find_primes_and_non_prime_count(numbers): Returns a tuple consisting of a list of prime numbers and the count of non-prime numbers. :param numbers: List of integers. :return: (primes, non_prime_count) where: primes is a list of prime numbers found in numbers. non_prime_count is the count of non-prime numbers in the input list. primes = [num for num in numbers if is_prime(num)] non_prime_count = len(numbers) - len(primes) return (primes, non_prime_count)"},{"question":"Create a function that takes in a lists of elements and shuffles them. The function should return the shuffled list.","solution":"import random def shuffle_list(elements): Shuffles a list of elements and returns the shuffled list. Parameters: elements (list): The list of elements to shuffle. Returns: list: The shuffled list. shuffled_elements = elements.copy() random.shuffle(shuffled_elements) return shuffled_elements"},{"question":"Create a function that takes an array of strings and returns the longest string in the array. If there are multiple strings of the same maximum length, return the one that appears first in the array.","solution":"def longest_string(strings): Returns the longest string in the array. If there are multiple strings of the same maximum length, returns the one that appears first in the array. :param strings: List of strings :return: The longest string in the list if not strings: return \\"\\" longest = strings[0] for string in strings: if len(string) > len(longest): longest = string return longest"},{"question":"Create a function that calculates the sum of the first 'n' natural numbers. The function should also return the average of these numbers. Use Python to implement this.","solution":"def sum_and_average(n): Returns the sum and average of the first 'n' natural numbers. :param n: The number of natural numbers to sum and average. :return: A tuple containing the sum and average of the first 'n' natural numbers. if n < 1: return (0, 0) total_sum = n * (n + 1) // 2 average = total_sum / n return (total_sum, average)"},{"question":"Create a function that takes a number as an input and returns the factorial of that number. The number can be between 0 and 20.","solution":"def factorial(n): Returns the factorial of a given number n. Assumes that 0 <= n <= 20. if n < 0 or n > 20: raise ValueError('Input should be between 0 and 20') if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes an array of integers arr as input and returns the count of the number of unique elements in the array.","solution":"def count_unique_elements(arr): Returns the count of the number of unique elements in the array. return len(set(arr))"},{"question":"Create a function that reads a file and returns its content as a string. The function should handle exceptions if the file does not exist or if the file is unreadable.","solution":"def read_file(file_path): Reads a file and returns its content as a string. Handles exceptions if the file does not exist or is unreadable. try: with open(file_path, 'r') as file: return file.read() except FileNotFoundError: return \\"File not found.\\" except Exception as e: return f\\"An error occurred: {e}\\""},{"question":"Create a function that takes two integers as arguments and return the sum, difference, product, and quotient of the two. In Python, the function should be named 'calculate_operations' and the other parameters should be 'num1' and 'num2'. The quotient should be a floating-point number.","solution":"def calculate_operations(num1, num2): Returns the sum, difference, product, and quotient of num1 and num2. The quotient is returned as a floating-point number. sum_val = num1 + num2 difference_val = num1 - num2 product_val = num1 * num2 if num2 != 0: quotient_val = num1 / num2 else: quotient_val = None # Handle division by zero scenario return sum_val, difference_val, product_val, quotient_val"},{"question":"Create a function that takes a string as input and returns the number of unique characters in the string, ignoring case sensitivity and spaces. For example, the string \\"Hello World\\" should return 7, as there are seven unique characters ignoring 'H', 'e', 'l', 'o', 'w', 'r', and 'd'.","solution":"def unique_characters_count(s): Returns the number of unique characters in the string, ignoring case and spaces. # Remove spaces and convert the string to lowercase cleaned_str = s.replace(\\" \\", \\"\\").lower() # Use a set to count unique characters unique_chars = set(cleaned_str) return len(unique_chars)"},{"question":"Create a function that outputs the factorial of an input number. The function should utilize recursion to calculate the factorial. Make sure to provide an example of how the function is used in a simple Python program.","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Create a function that takes an integer n as input and returns a list of all integers between 1 and n (inclusive) that are divisible by both 3 and 5.","solution":"def divisible_by_3_and_5(n): Returns a list of all integers between 1 and n (inclusive) that are divisible by both 3 and 5. return [i for i in range(1, n + 1) if i % 15 == 0]"},{"question":"Create a function that takes two strings as input and returns the number of matching words between the two strings. The function should be case-insensitive and ignore any non-alphabetical characters when counting.","solution":"import re def count_matching_words(str1, str2): Returns the number of matching words between two input strings. The comparison is case-insensitive and ignores non-alphabetical characters. # Remove non-alphabetical characters and split into words words1 = re.findall(r'bw+b', str1.lower()) words2 = re.findall(r'bw+b', str2.lower()) # Convert lists to sets to find the intersection of unique words set1 = set(words1) set2 = set(words2) # Find the common words common_words = set1.intersection(set2) # Return the number of common words return len(common_words)"},{"question":"Create a function that takes a list of numbers, counts how many even numbers are present, and returns this count.","solution":"def count_even_numbers(numbers): Returns the count of even numbers in the list. Parameters: numbers (list of int): The list of numbers to be evaluated. Returns: int: The count of even numbers in the list. return sum(1 for num in numbers if num % 2 == 0)"},{"question":"Create a function that takes two sorted lists of integers and returns a new list containing the union of the two lists. The union of two sets is the set of elements which are in either of the sets. The returned list should be sorted in ascending order.","solution":"def union_sorted_lists(list1, list2): Returns the union of two sorted lists in ascending order. i, j = 0, 0 union_list = [] while i < len(list1) and j < len(list2): if list1[i] < list2[j]: if not union_list or union_list[-1] != list1[i]: union_list.append(list1[i]) i += 1 elif list1[i] > list2[j]: if not union_list or union_list[-1] != list2[j]: union_list.append(list2[j]) j += 1 else: if not union_list or union_list[-1] != list1[i]: union_list.append(list1[i]) i += 1 j += 1 while i < len(list1): if not union_list or union_list[-1] != list1[i]: union_list.append(list1[i]) i += 1 while j < len(list2): if not union_list or union_list[-1] != list2[j]: union_list.append(list2[j]) j += 1 return union_list"},{"question":"Create a function that takes a list of integers and returns the maximum sum of any contiguous subarray. This is known as Kadane's algorithm. For example, given [1, -3, 2, 1, -1], the contiguous subarray with the largest sum is [2, 1] with a sum of 3.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray using Kadane's algorithm. :param nums: List of integers :return:Integer maximum sum of any contiguous subarray if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that takes a string as input and returns a new string with all characters that are not letters or digits removed, along with a count of the removed characters. The function should ignore case sensitivity.","solution":"import re def remove_non_alphanumeric(input_string): Removes all characters from the input_string that are not letters or digits. Returns the cleaned string along with a count of removed characters. Parameters: - input_string (str): The string to be cleaned. Returns: - tuple: The cleaned string and the count of removed characters. cleaned_string = re.sub(r'[^a-zA-Z0-9]', '', input_string) removed_count = len(input_string) - len(cleaned_string) return cleaned_string, removed_count"},{"question":"Create a function that takes a list of integers and returns the maximum sum of a subarray. This should be done with an efficient algorithm. The algorithm should have a time complexity better than O(n^2).","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray within the given list of integers. This is an implementation of Kadane's Algorithm, which runs in linear time O(n). if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that will take a list of strings as input and return a new list containing each string from the input list, but with all spaces removed.","solution":"def remove_spaces(input_list): Removes all spaces from each string in the input list. Parameters: input_list (list of str): The list of strings from which spaces will be removed. Returns: list of str: A new list containing the input strings with all spaces removed. return [s.replace(\\" \\", \\"\\") for s in input_list]"},{"question":"Create a function that takes one parameter of type 'string' and returns a new string formed by repeating the original string 'n' times.","solution":"def repeat_string(s, n): Returns a new string formed by repeating the original string 'n' times. :param s: The original string. :param n: The number of times to repeat the string. :return: The repeated string. return s * n"},{"question":"Create a function that takes a list of integers and returns a boolean indicating whether the sum of the numbers is divisible by 3 or not.","solution":"def is_sum_divisible_by_3(numbers): Returns True if the sum of the numbers in the list is divisible by 3, otherwise False. return sum(numbers) % 3 == 0"},{"question":"Create a function that takes in an array of integers and returns the index of the first element that is strictly greater than the element immediately after it. If no such element exists, return \`-1\`.","solution":"def first_strictly_greater(arr): Returns the index of the first element that is strictly greater than the element immediately after it. If no such element exists, returns -1. for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return i return -1"},{"question":"Create a function that will check if a given integer is a prime number or not. Given an integer \`n\`, write a function to return \`true\` if \`n\` is prime, otherwise, return \`false\`.","solution":"def is_prime(n): Returns True if the given integer n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Create a function that can take a string as an argument and return the length of the string in meters if it's spelled as a word like \\"one\\", \\"two\\", \\"three\\", etc., up to \\"ten\\". The function should handle edge cases, such as blank strings and incorrect spellings.","solution":"def length_in_meters(word): Returns the length in meters of the given word if it is a number word from \\"one\\" to \\"ten\\". Returns None if the input is invalid. word_to_number = { \\"one\\": 1, \\"two\\": 2, \\"three\\": 3, \\"four\\": 4, \\"five\\": 5, \\"six\\": 6, \\"seven\\": 7, \\"eight\\": 8, \\"nine\\": 9, \\"ten\\": 10 } word = word.lower().strip() if word in word_to_number: return word_to_number[word] return None"},{"question":"Create a function that takes two arrays of integers as input and returns the sum of all elements present in both arrays without using recursion. You can use any programming language you are comfortable with, but let's go with Python for this problem.","solution":"def sum_of_two_arrays(arr1, arr2): Returns the sum of all elements present in both input arrays. Parameters: arr1 (list of int): First input array. arr2 (list of int): Second input array. Returns: int: The sum of all elements in both arrays. return sum(arr1) + sum(arr2)"},{"question":"Create a function that checks if a string and a substring of the same length can be formed by rearranging the characters of the string. For example, if the string is \\"hello\\" and the substring is \\"oleh\\", the function should return True because the characters can be rearranged to form the substring.","solution":"def can_form_from_rearrangement(s: str, sub: str) -> bool: Checks if a substring can be formed by rearranging the characters of the string. Arguments: s -- the original string sub -- the substring which we want to form by rearranging Returns: True if the sub can be formed by rearranging the characters in s, otherwise False. if len(s) != len(sub): return False # Create character count dictionaries for both strings s_count = {} sub_count = {} for char in s: if char in s_count: s_count[char] += 1 else: s_count[char] = 1 for char in sub: if char in sub_count: sub_count[char] += 1 else: sub_count[char] = 1 # Compare the two dictionaries return s_count == sub_count"},{"question":"Create a function that generates a list of prime numbers using Python. The function should take an integer \`n\` as an input and return a list of the first \`n\` prime numbers in increasing order.","solution":"def generate_primes(n): Generates a list of the first n prime numbers. Parameters: n (int): The number of prime numbers to generate. Returns: list: A list containing the first n prime numbers. if n <= 0: return [] primes = [] candidate = 2 # First prime number while len(primes) < n: is_prime = True for p in primes: if candidate % p == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 1 return primes"},{"question":"Create a function that returns the most frequent element in an array of integers. If there are multiple elements with the same highest frequency, return all of them in a list. If the array is empty, return an empty list. Also, if an element appears only once in the array, it should not be included in the result.","solution":"from collections import Counter def most_frequent_elements(arr): Returns the most frequent element(s) in an array of integers. If there are multiple elements with the same highest frequency, return all of them in a list. If the array is empty, return an empty list. Also, if an element appears only once in the array, it is not included in the result. :param arr: List of integers. :return: Either a single integer or a list of integers or an empty list. if not arr: return [] count = Counter(arr) max_frequency = max(count.values()) # If max frequency is 1, it means all elements appear only once if max_frequency == 1: return [] most_frequent = [key for key, value in count.items() if value == max_frequency] return most_frequent if len(most_frequent) > 1 else most_frequent[0]"},{"question":"Create a function that takes in two arrays of integers and returns True if the arrays have the same elements, regardless of their order, and False otherwise. The function should be case-sensitive.","solution":"def have_same_elements(arr1, arr2): Returns True if arr1 and arr2 have the same elements, regardless of their order, and False otherwise. return sorted(arr1) == sorted(arr2)"},{"question":"Create a function that takes a list of integers and returns a new list containing only the integers that are divisible by 3.","solution":"def filter_divisible_by_three(numbers): Returns a new list containing only the integers from the input list that are divisible by 3. return [num for num in numbers if num % 3 == 0]"},{"question":"Create a function that returns the string \\"The number is even\\" if the input integer is even, and \\"The number is odd\\" if the input integer is odd.","solution":"def check_even_or_odd(number): Returns 'The number is even' if the number is even, and 'The number is odd' if the number is odd. if number % 2 == 0: return \\"The number is even\\" else: return \\"The number is odd\\""},{"question":"Create a function that generates all prime numbers up to a given number n.","solution":"def generate_primes(n): Generates all prime numbers up to a given number n. if n <= 1: return [] primes = [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, n + 1): if is_prime[i]: primes.append(i) for multiple in range(i * i, n + 1, i): is_prime[multiple] = False return primes"},{"question":"Create a function that takes two lists of integers as input and returns a new list that contains the elements of both input lists, sorted in ascending order. If duplicate elements exist in the combined list, they should be removed.","solution":"def merge_and_sort_unique(list1, list2): Takes two lists of integers, merges them, removes duplicates and sorts in ascending order. Returns a new sorted list with unique elements. combined_list = list1 + list2 unique_list = list(set(combined_list)) unique_list.sort() return unique_list"},{"question":"Create a function that takes a two-dimensional array of integers as an argument and returns the diagonal sum of the array. The diagonal sum is the sum of all elements on the main diagonal (from top left to bottom right) of the array. If the array is not square (i.e., the number of rows and columns are not equal), the function should return -1.","solution":"def diagonal_sum(matrix): Returns the sum of the main diagonal of a square matrix. If the matrix is not square, returns -1. if not matrix or not all(len(row) == len(matrix) for row in matrix): return -1 return sum(matrix[i][i] for i in range(len(matrix)))"},{"question":"Create a function that takes a list of tuples, where each tuple contains exactly three elements. The function should return a new list of tuples, where each tuple is the result of adding 2 to the second element of each tuple in the original list. The first and third elements remain unchanged.","solution":"def add_two_to_second_element(tuples_list): Takes a list of tuples where each tuple contains exactly three elements. Returns a new list of tuples where 2 is added to the second element of each tuple. The first and third elements remain unchanged. return [(t[0], t[1] + 2, t[2]) for t in tuples_list]"},{"question":"Create a function that returns the sum of all natural numbers from 1 to N.","solution":"def sum_of_natural_numbers(N): Returns the sum of all natural numbers from 1 to N. if N < 1: return 0 return N * (N + 1) // 2"},{"question":"Create a function that takes a string as an input and returns the reverse of that string. For example, if the input is \\"hello\\", the function should return \\"olleh\\". You should use a loop to reverse the string and not use any built-in functions like \`reverse()\` or \`[::-1]\`.","solution":"def reverse_string(input_string): Returns the reverse of the input string using a loop. reversed_string = \\"\\" for char in input_string: reversed_string = char + reversed_string return reversed_string"},{"question":"Create a function that takes an array of integers and returns a new array with each element加倍 (double). For example, if the input array is [1, 2, 3], the output array should be [2, 4, 6].","solution":"def double_elements(arr): Takes an array of integers and returns a new array with each element doubled. return [x * 2 for x in arr]"},{"question":"Create a function that takes an integer N as input and returns the closest power of 2 greater than or equal to N. If N is a power of 2, return N itself. If not, return the smallest power of 2 that is greater than N. For example, if N is 5, the function should return 8 because 8 is the closest power of 2 greater than 5.","solution":"import math def closest_power_of_2(N): Returns the closest power of 2 greater than or equal to N. If N is a power of 2, return N itself. If not, return the smallest power of 2 that is greater than N. if N <= 0: return 1 # by definition, the smallest power of 2 is 1 # Check if N is already a power of 2 if (N & (N - 1)) == 0: return N # Calculate the closest power of 2 greater than N return 2 ** math.ceil(math.log2(N))"},{"question":"Create a function that takes a 3D array and prints the elements of the array in a formatted way, including their indices. I'm currently working with a 3D NumPy array in Python, but I'm not sure how to format the indices to be used as part of the output string. Could you provide a solution for this?","solution":"import numpy as np def print_3d_array(array): Prints the elements of a 3D array along with their indices in a formatted way. if array.ndim != 3: raise ValueError(\\"Input array must be 3D\\") for i in range(array.shape[0]): for j in range(array.shape[1]): for k in range(array.shape[2]): print(f\\"Element at index ({i}, {j}, {k}) is: {array[i, j, k]}\\") # Example usage: # arr = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]) # print_3d_array(arr)"},{"question":"Create a function that converts a given string to a float number. Handle cases where the string cannot be converted to a float (e.g., \\"abc\\") by catching the exception and returning None.","solution":"def string_to_float(s): Converts a given string to a float number. Parameters: s (str): A string that potentially represents a float number. Returns: float: The converted float number if conversion is successful. None: If the conversion is unsuccessful. try: return float(s) except ValueError: return None"},{"question":"Create a function that takes a list of integers, sorts them in ascending order, and returns the sorted list. If the list is empty or contains only one element, it should return the list as is. Ang someone help me with this?","solution":"def sort_list(lst): Sorts a list of integers in ascending order. If the list is empty or contains only one element, it returns the list as is. Arguments: lst -- list of integers Returns: sorted list of integers if len(lst) <= 1: return lst else: return sorted(lst)"},{"question":"Create a function that takes a string as an argument and output the frequency of each letter in the string. The function should ignore case and non-alphabetic characters. Here's a Python code outline with some comments for guidance.","solution":"def letter_frequency(s): Returns the frequency of each letter in the string s. The function ignores case and non-alphabetic characters. from collections import Counter import string # Make the string lowercase and filter out non-alphabetic characters filtered_string = ''.join(filter(str.isalpha, s.lower())) # Use Counter to count the frequency of each letter frequency = Counter(filtered_string) return dict(frequency)"},{"question":"Create a function that removes duplicates from a list of integers while preserving the original order of appearance. The function should return the modified list with only unique elements.","solution":"def remove_duplicates(lst): Removes duplicates from a list while preserving the original order of appearance. seen = set() unique_lst = [] for item in lst: if item not in seen: unique_lst.append(item) seen.add(item) return unique_lst"},{"question":"Create a function that takes in a list of strings and returns a list of all substrings within each string, sorted in ascending order.","solution":"def find_all_substrings(input_list): Returns a list containing lists of all substrings of each input string, sorted in ascending order. :param input_list: List of strings :return: List of lists, each containing substrings of the corresponding input string in sorted order result = [] for s in input_list: substrings = sorted([s[i:j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)]) result.append(substrings) return result"},{"question":"Create a function that takes an integer and outputs the sum of all the numbers up to and including that number using recursion.","solution":"def recursive_sum(n): Returns the sum of all numbers up to and including n using recursion. if n <= 0: return 0 else: return n + recursive_sum(n - 1)"},{"question":"Create a function that takes an integer as input and returns the largest prime number less than or equal to the input number. If there are no prime numbers less than or equal to the input, return -1.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def largest_prime_leq(n): Returns the largest prime number less than or equal to n. If there are no prime numbers less than or equal to n, return -1. for i in range(n, 1, -1): if is_prime(i): return i return -1"},{"question":"Create a function that takes in a list of integers and returns the sum of all elements, but only if they are positive. Negatives should be ignored. How would you implement this in Python?","solution":"def sum_of_positives(numbers): Returns the sum of positive integers in the list 'numbers'. return sum(x for x in numbers if x > 0)"},{"question":"Create a function that converts a generic string like \`\\"1a2b3c\\"\` into a list of strings, like \`[\\"1a\\", \\"2b\\", \\"3c\\"]\`. The function should work for any generic string in the same pattern and handling exceptions for different types of input and errors in the conversion process.","solution":"def convert_string_to_list(s): Converts a string in the format \\"1a2b3c\\" into a list of strings [\\"1a\\", \\"2b\\", \\"3c\\"]. try: result = [] if len(s) % 2 != 0: raise ValueError(\\"Input string length should be even to form pairs.\\") for i in range(0, len(s), 2): result.append(s[i:i+2]) return result except Exception as e: return str(e)"},{"question":"Create a function that takes a list of integers as input and returns a new list where each element is the maximum value encountered so far in the original list.","solution":"def max_values_so_far(nums): Takes a list of integers and returns a list where each element is the maximum value encountered so far in the original list. max_so_far = [] current_max = float('-inf') for num in nums: if num > current_max: current_max = num max_so_far.append(current_max) return max_so_far"},{"question":"Create a function that calculates the area of a circle given the radius. If the radius is negative, the function should raise a ValueError.","solution":"import math def circle_area(radius): Returns the area of a circle given its radius. Raises ValueError if the radius is negative. if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * radius ** 2"},{"question":"Create a function that takes an array of strings and returns the concatenated string with the first letter of each word capitalized. For example: If the array is [\\"hello\\", \\"world\\"], the output should be \\"Hello World\\". Assume all strings in the array contain only alphabetic characters.","solution":"def capitalize_and_concatenate(arr): Takes an array of strings and returns a single concatenated string with the first letter of each word capitalized. Parameters: arr (list of str): A list of strings containing alphabetic characters only. Returns: str: A single string with each word capitalized and concatenated with spaces. capitalized_words = [word.capitalize() for word in arr] return \\" \\".join(capitalized_words)"},{"question":"Create a function that takes an array and returns an array with all the duplicates removed, preserving the order of the first occurrence of each element.","solution":"def remove_duplicates(arr): Returns an array with duplicates removed, preserving the order of first occurrence. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Create a function that returns the sum of the absolute differences of all pairs of numbers in an array. The array is guaranteed to have at least two elements.","solution":"def sum_of_absolute_differences(arr): Returns the sum of the absolute differences of all pairs of numbers in an array. total = 0 for i in range(len(arr)): for j in range(i+1, len(arr)): total += abs(arr[i] - arr[j]) return total"},{"question":"Create a function that takes a dataframe \`df\` as a parameter and returns a new dataframe where each row is a combination of unique elements from \`df\`. The function should avoid duplicates in the rows of the output dataframe.","solution":"import pandas as pd def unique_combinations(df): Takes a dataframe \`df\` and returns a new dataframe where each row is a combination of unique elements from \`df\`. The rows of the output dataframe should avoid duplicates. Parameters: df (pd.DataFrame): Input pandas DataFrame Returns: pd.DataFrame: DataFrame with unique combinations of rows unique_sets = {tuple(row) for row in df.values} unique_df = pd.DataFrame(list(unique_sets), columns=df.columns) return unique_df"},{"question":"Create a function that takes an integer as input and returns a tuple containing the binary representation of the number as a string and the hexadecimal representation of the number as a string, both without the '0b' or '0x' prefix.","solution":"def int_to_bin_hex(n): Returns a tuple containing the binary and hexadecimal representation of the input number. binary_representation = format(n, 'b') hexadecimal_representation = format(n, 'x') return (binary_representation, hexadecimal_representation)"},{"question":"Create a function that takes an array of integers and rotates it to the left by a specified number of positions. The function should return the rotated array.","solution":"def rotate_left(arr, positions): Rotates the array arr to the left by the specified number of positions. :param arr: List of integers to rotate :param positions: Number of positions to rotate the array to the left :return: The rotated array if not arr: return arr positions %= len(arr) return arr[positions:] + arr[:positions]"},{"question":"Create a function that takes a list of words and returns a list of all palindrome words in the list. A palindrome is a word that reads the same backward as forward.","solution":"def find_palindromes(words): Returns a list of palindrome words from the input list. :param words: List of words to be checked. :return: List of palindromes. return [word for word in words if word == word[::-1]]"},{"question":"Create a function that takes an array of integers and returns the sum of all numbers that appear only once in the array. If all numbers appear more than once or none appear more than once, return 0.","solution":"def sum_of_unique_numbers(arr): Returns the sum of all numbers that appear only once in the array. If all numbers appear more than once or none appear more than once, returns 0. from collections import Counter count = Counter(arr) unique_sum = sum(num for num, freq in count.items() if freq == 1) return unique_sum if unique_sum > 0 else 0"},{"question":"Create a function that can add two numbers given in string format","solution":"def add_strings(num1, num2): Returns the sum of two numbers given in string format. return str(int(num1) + int(num2))"},{"question":"Create a function that takes a string as an input and returns the first character and the last character of the string, but in the reverse order (i.e., last character first and first character last). If the string has only one character, return that character. If the string is empty, return an empty string.","solution":"def reverse_first_last(s): Returns a string that consists of the last character and the first character of the input string. If the string has only one character, return that character. If the string is empty, return an empty string. if len(s) == 0: return \\"\\" elif len(s) == 1: return s else: return s[-1] + s[0]"},{"question":"Create a function that generates a list of unique random numbers within a given range. If the range is invalid or cannot generate the required number of unique numbers, the function should raise an appropriate error.","solution":"import random def generate_unique_random_numbers(n, start, end): Generates a list of n unique random numbers within the range [start, end]. Parameters: - n (int): The number of unique random numbers to generate. - start (int): The lower bound of the range (inclusive). - end (int): The upper bound of the range (inclusive). Returns: - List[int]: A list containing n unique random numbers within the specified range. Raises: - ValueError: If the range is invalid or if it's not possible to generate n unique numbers. if start > end: raise ValueError(\\"Invalid range: 'start' should be less than or equal to 'end'.\\") total_numbers_in_range = end - start + 1 if n > total_numbers_in_range: raise ValueError(f\\"Cannot generate {n} unique numbers in the range [{start}, {end}].\\") return random.sample(range(start, end + 1), n)"},{"question":"Create a function that converts an integer to a Roman numeral. The function should handle numbers in the range from 1 to 3999. Provide a detailed explanation of the code.","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. The function handles numbers in the range from 1 to 3999. Parameters: num (int): The integer to convert to a Roman numeral. Returns: str: The Roman numeral representation of the integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \\"\\" i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Create a function that takes two parameters: (int) array1 & (int) array2. This function should return the elements that are common to both arrays, sorted in descending order. If there are no common elements, return an empty list.","solution":"def common_elements(array1, array2): Returns the elements that are common to both arrays, sorted in descending order. If there are no common elements, returns an empty list. # Convert lists to sets to find common elements common_set = set(array1).intersection(set(array2)) # Convert back to list and sort in descending order common_list = list(common_set) common_list.sort(reverse=True) return common_list"},{"question":"Create a function that turns the given string into a list of strings where each string is a word from the input string. Assume the words are separated by spaces.","solution":"def string_to_words(s): Splits the given string into a list of words. Parameters: s (str): The input string. Returns: list of str: A list where each element is a word from the input string. return s.split()"},{"question":"Create a function that calculates the Fibonacci sequence up to a given number (N). The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. Given that the function is recursive, implement it using Python and ensure to handle the base cases properly.","solution":"def fibonacci(n): Recursive function to calculate the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2) def fibonacci_sequence(N): Returns the Fibonacci sequence up to the Nth element. return [fibonacci(i) for i in range(N)]"},{"question":"Create a function that takes an integer as an argument and returns a list of its prime factors. If the integer has no prime factors (which can only happen if the integer is 0 or 1), return an empty list. Also, make sure to only return each prime factor the number of times it divides the input number completely.","solution":"def prime_factors(n): Returns a list of prime factors of integer n. if n < 2: return [] factors = [] divisor = 2 while n >= divisor: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"Create a function that takes in two lists of integers and returns a new list containing the common elements between the two lists. The returned list should not contain duplicates.","solution":"def common_elements(list1, list2): Returns a list containing the common elements between list1 and list2 without duplicates. return list(set(list1) & set(list2))"},{"question":"Create a function that takes a string input and returns a reversed string. What programming language would you use and why?","solution":"def reverse_string(s: str) -> str: Returns the reversed version of the input string s. return s[::-1]"},{"question":"Create a function that takes an array of integers as input and returns a new array where each element is the sum of the corresponding elements in the input arrays. If the input arrays are of unequal lengths, the function should only add up the elements up to the length of the shorter array.","solution":"def sum_corresponding_elements(arr1, arr2): Takes two arrays of integers and returns a new array where each element is the sum of the corresponding elements in the input arrays. If the input arrays are of unequal lengths, only adds up the elements up to the length of the shorter array. min_len = min(len(arr1), len(arr2)) return [arr1[i] + arr2[i] for i in range(min_len)]"},{"question":"Create a function that calculates the minimum number of coins needed to make a specific amount, assuming the coins are of denominations of 1, 3, and 5 units.","solution":"def min_coins(amount): Calculate the minimum number of coins needed to make a specific amount, with coin denominations of 1, 3, and 5 units. # Initialize a list to store the minimum number of coins for each amount dp = [float('inf')] * (amount + 1) dp[0] = 0 # Base case: 0 coins needed to make amount 0 # Iterate through each amount from 1 to the target amount for i in range(1, amount + 1): # Check using coin of 1 unit if i - 1 >= 0: dp[i] = min(dp[i], dp[i - 1] + 1) # Check using coin of 3 units if i - 3 >= 0: dp[i] = min(dp[i], dp[i - 3] + 1) # Check using coin of 5 units if i - 5 >= 0: dp[i] = min(dp[i], dp[i - 5] + 1) # Return the minimum number of coins for the target amount return dp[amount]"},{"question":"Create a function that calculates the value of a CSS cubic-bezier function at a given \`t\` value. A cubic-bezier function is defined by four control points (P0, P1, P2, P3), each represented by an x and y coordinate. These points format is \`[(x0, y0), (x1, y1), (x2, y2), (x3, y3)]\`, with the constraints that \`0 <= x0, x1, x2, x3 <= 1\` and \`0 <= y0, y1, y2, y3 <= 1\`.","solution":"def cubic_bezier(t, control_points): Calculate the value of a cubic-bezier function at a given t value. Parameters: t (float): The value at which to evaluate the bezier curve, must be in the range [0, 1]. control_points (list of tuples): A list containing four control points in the format [(x0, y0), (x1, y1), (x2, y2), (x3, y3)]. Returns: tuple: A tuple (x, y) representing the point on the bezier curve at the given t. (x0, y0), (x1, y1), (x2, y2), (x3, y3) = control_points cx = 3 * (x1 - x0) bx = 3 * (x2 - x1) - cx ax = x3 - x0 - cx - bx cy = 3 * (y1 - y0) by = 3 * (y2 - y1) - cy ay = y3 - y0 - cy - by x = ((ax * t + bx) * t + cx) * t + x0 y = ((ay * t + by) * t + cy) * t + y0 return (x, y)"},{"question":"Create a function that generates all possible combinations of a given list of elements, including combinations with different lengths.","solution":"from itertools import combinations def generate_combinations(elements): Generates all possible combinations of a given list of elements, including combinations with different lengths. :param elements: List of elements to generate combinations from :return: List of tuples, each being a combination of elements combs = [] for r in range(1, len(elements) + 1): combs.extend(combinations(elements, r)) return combs"},{"question":"Create a function that takes in a dictionary and returns true if all the values are positive numbers, otherwise it should return false.","solution":"def all_positive_values(d): Returns True if all values in the dictionary are positive numbers, otherwise False. return all(isinstance(v, (int, float)) and v > 0 for v in d.values())"},{"question":"Create a function that takes three integers as input and returns True if the numbers are in strictly increasing order and False otherwise. Then, test the function with the number sequence (1, 2, 3) and (3, 5, 7).","solution":"def is_strictly_increasing(a, b, c): Returns True if the integers a, b, and c are in strictly increasing order. return a < b < c"},{"question":"Create a function that takes an integer \`n\` and returns the sum of the first \`n\` positive odd numbers. The first \`n\` positive odd numbers are 1, 3, 5, ..., (2n - 1).","solution":"def sum_of_first_n_odd_numbers(n): Returns the sum of the first n positive odd numbers. return n ** 2"},{"question":"Create a function that takes in two integers, \\"start\\" and \\"end\\", and returns the list of all even numbers between \\"start\\" and \\"end\\" (inclusive).","solution":"def even_numbers(start, end): Returns a list of all even numbers between start and end (inclusive). return [num for num in range(start, end + 1) if num % 2 == 0]"},{"question":"Create a function that takes a date represented as a string in the \\"YYYY-MM-DD\\" format and returns the day of the week as a string in the \\"Sunday\\", \\"Monday\\", \\"Tuesday\\", etc. format. You can use the datetime module in Python.","solution":"import datetime def get_day_of_week(date_string): Given a date string in the format \\"YYYY-MM-DD\\", returns the day of the week (e.g. \\"Sunday\\", \\"Monday\\", etc.). Parameters: date_string (str): Date in the format \\"YYYY-MM-DD\\" Returns: str: Day of the week date_object = datetime.datetime.strptime(date_string, \\"%Y-%m-%d\\") return date_object.strftime(\\"%A\\")"},{"question":"Create a function that takes a directory path as an argument and returns a list of all files and subdirectories within it. The function should be able to handle any valid directory path on the system and should ignore hidden files and directories (those starting with a dot). If the directory does not exist or cannot be accessed, the function should raise an appropriate exception.","solution":"import os def list_directory_contents(directory_path): Returns a list of all files and subdirectories within the given directory path, ignoring hidden files and directories (those starting with a dot). Args: directory_path (str): The path to the directory. Returns: List[str]: List of files and subdirectories. Raises: Exception: If the directory does not exist or cannot be accessed. if not os.path.isdir(directory_path): raise Exception(\\"The directory does not exist or cannot be accessed\\") return [item for item in os.listdir(directory_path) if not item.startswith('.')]"},{"question":"Create a function that accepts a string and returns the string reversed, in a way that preserves the case of each letter and keeps only the letters, ignoring any non-letter characters.","solution":"def reverse_preserve_case_and_letters(s): Reverses a string, preserving the case of each letter and keeping only the letters, ignoring any non-letter characters. Args: s (str): Input string Returns: str: The reversed string with case preserved and non-letter characters removed. letters = [char for char in s if char.isalpha()] reversed_letters = letters[::-1] result = [] reversed_index = 0 for char in s: if char.isalpha(): result.append(reversed_letters[reversed_index]) reversed_index += 1 return ''.join(result)"},{"question":"Create a function that takes an array of integers and returns the maximum product that can be obtained by multiplying the numbers in an interval within the array. The interval can start and end at any index of the array, but it must be contiguous. For instance, given the array [2, 3, -2, 4], the maximum product is 6, which comes from the interval [3, -2, 4] since 3 * -2 * 4 = 6.","solution":"def max_product(nums): Returns the maximum product of any contiguous subarray. if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Create a function that takes an array of integers and returns the maximum sum of any two adjacent elements.","solution":"def max_adjacent_sum(arr): Returns the maximum sum of any two adjacent elements in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements.\\") max_sum = arr[0] + arr[1] for i in range(1, len(arr) - 1): current_sum = arr[i] + arr[i + 1] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Create a function that takes in a string and returns the longest string of consecutive repeated characters. For example, if the input string is \\"aabbbccaa\\", the function should return \\"bbb\\", as \\"bbb\\" has the maximum number of consecutive repeated characters.","solution":"def longest_consecutive_repeated_chars(s): Returns the longest string of consecutive repeated characters in the string s. if not s: return '' max_char = s[0] max_count = 1 current_char = s[0] current_count = 1 for char in s[1:]: if char == current_char: current_count += 1 else: if current_count > max_count: max_count = current_count max_char = current_char current_char = char current_count = 1 if current_count > max_count: max_count = current_count max_char = current_char return max_char * max_count"},{"question":"Create a function that checks if all elements in a given list are unique.","solution":"def are_all_elements_unique(lst): Checks if all elements in the list are unique. Args: lst (list): The list of elements to check. Returns: bool: True if all elements are unique, False otherwise. return len(lst) == len(set(lst))"},{"question":"Create a function that takes in a dictionary and returns the sum of all the values that are numeric.","solution":"def sum_numeric_values(d): Returns the sum of all numeric values in the given dictionary. Parameters: d (dict): A dictionary with values that can be numeric and non-numeric. Returns: int or float: The sum of all numeric values in the dictionary. return sum(value for value in d.values() if isinstance(value, (int, float)))"},{"question":"Create a function that takes a string and returns the reverse of the string. The function should handle multi-byte characters (like Chinese characters) correctly.","solution":"def reverse_string(s): Returns the reverse of the given string. return s[::-1]"},{"question":"Create a function that converts a string representing a binary number into an integer. The function should be named \`binary_to_decimal\` and take a single parameter \`binary_str\` which is a string containing only the characters '0' and '1'. The function should return the integer equivalent of the binary number.","solution":"def binary_to_decimal(binary_str): Converts a string representing a binary number into an integer. Parameters: binary_str (str): A string containing only the characters '0' and '1'. Returns: int: The integer equivalent of the binary number. return int(binary_str, 2)"},{"question":"Create a function that finds the maximum sum of a contiguous subarray within a given array of integers. This is known as Kadane's Algorithm. Implement it in Python.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray using Kadane's Algorithm. :param nums: List[int] - List of integers :return: int - Maximum sum of contiguous subarray # Initializations if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes an array of integers as an argument and returns the value of the smallest element in the array.","solution":"def find_smallest_element(arr): Returns the smallest element in the array. if not arr: raise ValueError(\\"Array is empty\\") return min(arr)"},{"question":"Create a function that can parse a JSON string and return a Python dictionary. Then, create a new dictionary that omits the 'age' and 'email' fields from the original dictionary and print the dict.","solution":"import json def parse_json(json_string): Parses a JSON string and returns a Python dictionary. Parameters: json_string (str): The JSON string to be parsed. Returns: dict: The parsed Python dictionary. return json.loads(json_string) def omit_age_and_email(input_dict): Omits 'age' and 'email' fields from the input dictionary and returns the new dictionary. Parameters: input_dict (dict): The input dictionary from which 'age' and 'email' fields are to be omitted. Returns: dict: The dictionary without 'age' and 'email' fields. if 'age' in input_dict: del input_dict['age'] if 'email' in input_dict: del input_dict['email'] return input_dict # Example usage: json_string = '{\\"name\\": \\"John\\", \\"age\\": 30, \\"email\\": \\"john@example.com\\"}' parsed_dict = parse_json(json_string) new_dict = omit_age_and_email(parsed_dict) print(new_dict) # Output should be: {'name': 'John'}"},{"question":"Create a function that takes a list of dictionaries as an argument. Each dictionary has keys 'name', 'age', and 'status'. The function should return a new list containing the names of all individuals who are 'active' and are older than 30 years.","solution":"def get_active_older_than_30(individuals): Returns a list of names of individuals who are 'active' and older than 30 years. Args: individuals (list): A list of dictionaries, each with 'name', 'age', and 'status' keys. Returns: list: A list of names of individuals who meet the criteria. return [person['name'] for person in individuals if person['status'] == 'active' and person['age'] > 30]"},{"question":"Create a function that takes a list of integers and returns the sum of their squares. The function should be named \`sum_of_squares\` and should include a docstring explaining its purpose and parameters. Additionally, include a check function to test the correctness of your solution with provided data points.","solution":"def sum_of_squares(nums): Returns the sum of the squares of the integers in the list \`nums\`. Parameters: nums (list): A list of integers. Returns: int: The sum of the squares of the integers in the list. return sum(x ** 2 for x in nums)"},{"question":"Create a function that rotates an array to the right by k steps. The function should return the array after performing the rotation. Assume the array is non-empty and k is a non-negative integer.","solution":"def rotate_array(arr, k): Rotates the array to the right by k steps. Arguments: arr -- list of elements to be rotated k -- number of steps to rotate the array Returns: rotated array n = len(arr) k = k % n # In case k is larger than n return arr[-k:] + arr[:-k]"},{"question":"Create a function that takes an array of integers and returns a new array containing only the elements that are divisible by either 3 or 5.","solution":"def filter_divisible_by_3_or_5(arr): Returns a new array containing only the elements that are divisible by either 3 or 5. Parameters: arr (list of int): Input array of integers. Returns: list of int: New array containing elements divisible by 3 or 5. return [x for x in arr if x % 3 == 0 or x % 5 == 0]"},{"question":"Create a function that calculates the factorial of a given non-negative integer using a recursive approach. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n using a recursive approach. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that takes a list as an argument and return the first and last element from the list.","solution":"def first_and_last(lst): Returns a tuple containing the first and last element of the given list. If the list is empty, returns None for both elements. if not lst: return (None, None) return (lst[0], lst[-1])"},{"question":"Create a function that takes a string and returns the reversed string. However, the function should be case-insensitive and ignore any non-alphabetic characters when reversing the string.","solution":"def reverse_string_ignore_non_alpha(s): Reverse the string ignoring non-alphabetic characters and case insensitivity. # Extract only alphabetic characters and make them lowercase filtered_chars = [char.lower() for char in s if char.isalpha()] # Reverse the filtered characters list reversed_filtered_chars = filtered_chars[::-1] result = [] index = 0 # Re-construct the string with non-alphabetic characters in their original positions for char in s: if char.isalpha(): result.append(reversed_filtered_chars[index]) index += 1 else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes in a string and returns the same string but with all vowels replaced with the character 'x'. The function should maintain the original case of the letters.","solution":"def replace_vowels_with_x(s): Replaces all vowels in the given string with the character 'x', maintaining the original case. Parameters: s (str): The input string. Returns: str: The string with all vowels replaced by 'x'. vowels = \\"aeiouAEIOU\\" return ''.join('x' if char in vowels else char for char in s)"},{"question":"Create a function that accepts three parameters. \`first_number\` is an integer, and \`second_number\` is a string. The function checks whether the number of characters in the string \`second_number\` is equal to the value of the integer \`first_number\`. If they are equal, the function returns \`True\`; otherwise, it returns \`False\`.","solution":"def check_length(first_number, second_number): Checks if the number of characters in second_number is equal to first_number. Args: - first_number (int): The target number of characters. - second_number (str): The string to be checked. Returns: - bool: True if the number of characters in second_number is equal to first_number, else False. return len(second_number) == first_number"},{"question":"Create a function that takes an integer as input and returns its sum of digits. If the input is negative, return the sum of the digits considering it as a positive number. For example, if the input is -123, the function should return 6 (1+2+3).","solution":"def sum_of_digits(n): Returns the sum of the digits of an integer n. If n is negative, it considers the absolute value of n. n = abs(n) return sum(int(digit) for digit in str(n))"},{"question":"Create a function that takes an integer as input and returns the number of 1's in its binary representation. This function should also correctly handle negative numbers by treating them as their two's complement binary representation.","solution":"def count_ones_in_binary(n): Returns the number of 1's in the binary representation of an integer n. For negative numbers, it treats them as their two's complement binary representation. return bin(n & 0xFFFFFFFF).count('1')"},{"question":"Create a function that finds the smallest integer in a given list. You need to consider both positive and negative integers.","solution":"def find_smallest_integer(numbers): Returns the smallest integer from the list of numbers. if not numbers: raise ValueError(\\"List is empty\\") return min(numbers)"},{"question":"Create a function that takes in two parameters: an integer \`n\` and a list \`lst\`. The function should count the number of times a particular integer \`n\` appears in the list \`lst\`. Use the for loop method to achieve this.","solution":"def count_occurrences(n, lst): Counts the number of times the integer n appears in the list lst. Parameters: n (int): The integer to count in the list. lst (list): The list in which to count occurrences of n. Returns: int: The count of n in lst. count = 0 for item in lst: if item == n: count += 1 return count"},{"question":"Create a function that takes a list of integers as an input and returns a new list where each element is sorted based on the number of 1s in its binary representation. In case of a tie, the elements should be sorted by their value in ascending order.","solution":"def sort_by_binary_ones(arr): Sorts a list of integers based on the number of 1s in their binary representation. In case of a tie, sorts them by their value in ascending order. Args: arr (list): List of integers. Returns: list: New sorted list. return sorted(arr, key=lambda x: (bin(x).count('1'), x))"},{"question":"Create a function that takes an array of integers and a target integer, and returns the indices of the two numbers such that they add up to the target. If no such two numbers exist, return an empty array.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the list that add up to the target. If no such two numbers exist, returns an empty array. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Create a function that returns the nth prime number. You should use the Sieve of Eratosthenes algorithm to generate prime numbers up to a certain limit, then return the nth prime. The function should be named \`getNthPrime\` and take one argument, \`n\`, which is the position of the prime number you want to retrieve.","solution":"def getNthPrime(n): Returns the nth prime number using the Sieve of Eratosthenes algorithm. def sieve(limit): primes = [True] * (limit + 1) p = 2 while (p * p <= limit): if primes[p]: for i in range(p * p, limit + 1, p): primes[i] = False p += 1 return [p for p in range(2, limit + 1) if primes[p]] # Start with an estimate for the upper limit limit = n * (n//2 + 1) # Heuristic for finding nth prime primes = sieve(limit) # Increase limit if we don't find enough primes while len(primes) < n: limit *= 2 primes = sieve(limit) return primes[n - 1]"},{"question":"Create a function that generates a matrix with a single path taken from top to bottom, left to right. The path will consist of filled squares (denoted as 'filled') and empty squares (denoted as 'empty'). The function should also provide a method to move and print the path step-by-step on this matrix.","solution":"def generate_matrix_with_path(rows, cols, path): Generates a matrix with a specific path from top to bottom, left to right. 'path' parameter is a list of tuples representing the coordinates of the filled path. # Initialize the matrix with 'empty' matrix = [['empty' for _ in range(cols)] for _ in range(rows)] # Mark the path in the matrix for (r, c) in path: matrix[r][c] = 'filled' return matrix def print_matrix(matrix): Print the matrix with 'filled' and 'empty' squares. for row in matrix: print(\\" \\".join(row)) def move_and_print_path(matrix, path): Move step-by-step through the matrix and print the state of the matrix at each step. for r, c in path: matrix[r][c] = 'filled' print_matrix(matrix) print() # Print a new line for better readability # Example usage rows = 5 cols = 5 path = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4)] matrix = generate_matrix_with_path(rows, cols, path) move_and_print_path(matrix, path)"},{"question":"Create a function that takes two integers as input and returns the minimum number from them.","solution":"def minimum(a, b): Returns the minimum of two integers a and b. return a if a < b else b"},{"question":"Create a function that takes an integer as an argument and prints the square of that number.","solution":"def print_square(n): Prints the square of the given integer n. print(n * n)"},{"question":"Create a function that calculates the First Digit Sum (FDS) of a given integer. The FDS is the sum of the digits of the Integer part of the number. The fractional part is ignored. For example, for the number 123.45, the FDS would be 1 + 2 + 3 = 6. If the number is negative, you should first convert it to a positive number before performing the calculation.","solution":"def first_digit_sum(num): Returns the sum of the digits of the integer part of the given number. # Convert the number to positive and get the integer part only integer_part = abs(int(num)) # Convert the integer part to a string to iterate over its digits digit_sum = sum(int(digit) for digit in str(integer_part)) return digit_sum"},{"question":"Create a function that finds the nth position in the Fibonacci sequence using recursion.","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence. if n <= 0: return \\"Input should be a positive integer\\" elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function that converts a given array of integers to a new array where each element is the square of the original element.","solution":"def square_elements(arr): Returns a new array where each element is the square of the original element. Parameters: arr (list of int): The input array of integers. Returns: list of int: The new array with squared values. return [x ** 2 for x in arr]"},{"question":"Create a function that takes two integers, \`m\` and \`n\`, and returns the sum of all integers from \`m\` to \`n\` (inclusive).","solution":"def sum_integers(m, n): Returns the sum of all integers from m to n (inclusive). # Ensure m is less than or equal to n if m > n: m, n = n, m return sum(range(m, n + 1))"},{"question":"Create a function that takes a filename and a number as input. The function should read the contents of the file line by line. If the line contains the number, the line should be printed. Otherwise, the line should be ignored.","solution":"def print_lines_with_number(filename, number): Reads a file line by line and prints the lines that contain the given number. Args: filename (str): The path to the file to be read. number (int/str): The number to search for in the file lines. number = str(number) with open(filename, 'r') as file: for line in file: if number in line: print(line.strip())"},{"question":"Create a function that , given three integers \`a\`, \`b\`, and \`c\`, returns the maximum of the three.","solution":"def max_of_three(a, b, c): Returns the maximum of three integers a, b, and c. return max(a, b, c)"},{"question":"Create a function that takes an integer as an input and returns the sum of its digits. If the sum is a single digit, return the sum. If the sum is not a single digit, return the sum of the digits of the resulting number. Repeat this process until you reach a single digit. This is known as the digital root.","solution":"def digital_root(n): Returns the digital root of a non-negative integer n. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"Create a function that calculates the product of an array of integers. In this case, if the array contains a zero, the function should return \`0\`. If the array does not contain a zero, then it should calculate the product of all the elements.","solution":"def product_of_array(nums): Returns the product of an array of integers. If the array contains a zero, returns 0. :param nums: List of integers :return: Integer product of the array or 0 if array contains a zero product = 1 for num in nums: if num == 0: return 0 product *= num return product"},{"question":"Create a function that , given two parameters (a list and an integer), returns the element at the index equal to the given integer. If the index is out of bounds, the function should return a default value.","solution":"def get_element_at_index(lst, idx, default_value=None): Returns the element at the given index from the list. If the index is out of bounds, it returns the default value. :param lst: List of elements :param idx: Index to fetch the element :param default_value: Value to return if index is out of bounds :return: Element at the index or default value if 0 <= idx < len(lst): return lst[idx] else: return default_value"},{"question":"Create a function that calculates the sum of all even numbers in a given list of integers. If the list is empty, the function should return 0. Make sure to include a docstring explaining the function's behavior.","solution":"def sum_of_evens(numbers): Returns the sum of all even numbers in the provided list of integers. If the list is empty, returns 0. :param numbers: List of integers :return: Sum of even integers return sum(num for num in numbers if num % 2 == 0)"},{"question":"Create a function that performs logical OR operation on two boolean values.","solution":"def logical_or(a, b): Returns the logical OR of a and b. return a or b"},{"question":"Create a function that computes the factorial of a given non-negative integer. How can you ensure that your function is efficient and handles large numbers?","solution":"def factorial(n): Returns the factorial of a given non-negative integer. Raises a ValueError if the input is negative. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes a string as input and returns the string with the characters sorted in ascending order.","solution":"def sort_string(s): Returns the input string with characters sorted in ascending order. return ''.join(sorted(s))"},{"question":"Create a function that takes a positive integer and returns the sum of its digits. If the number has an even number of digits, return half the sum of its digits; if the number has an odd number of digits, return three times the sum of its digits.","solution":"def sum_of_digits(num): Returns a modified sum of the digits of the positive integer \`num\`. If the number of digits is even, return half the sum of its digits. If the number of digits is odd, return three times the sum of its digits. digits = [int(digit) for digit in str(num)] sum_digits = sum(digits) if len(digits) % 2 == 0: return sum_digits // 2 else: return sum_digits * 3"},{"question":"Create a function that takes an array of integers and returns a new array with the integers sorted in descending order.","solution":"def sort_descending(arr): Takes an array of integers and returns a new array with the integers sorted in descending order. return sorted(arr, reverse=True)"},{"question":"Create a function that takes a list of integers and returns the integer that appears an odd number of times in the list. There is always exactly one integer that appears an odd number of times, and all other integers appear an even number of times.","solution":"def find_odd_occurring(arr): Returns the integer that appears an odd number of times in the list. result = 0 for number in arr: result ^= number return result"},{"question":"Create a function that takes an integer as input and outputs the number of 1-bits in the binary representation of the input. This function is commonly referred to as the Hamming Weight.","solution":"def hamming_weight(n): Returns the number of 1-bits in the binary representation of the input integer n. return bin(n).count('1')"},{"question":"Create a function that takes an integer as input and returns the sum of all the even and odd numbers in the integer. The function should return the sums as a tuple \`(even_sum, odd_sum)\`. For example, if the input integer is 12345, the output should be \`(6, 9)\`, since 2 + 4 = 6 and 1 + 3 + 5 = 9.","solution":"def sum_even_odd_numbers(n): Given an integer, this function returns a tuple with the sum of all even digits and the sum of all odd digits. Parameters: n (int): The input integer. Returns: tuple: A tuple containing two elements - sum of even digits and sum of odd digits. even_sum = 0 odd_sum = 0 for digit in str(abs(n)): digit = int(digit) if digit % 2 == 0: even_sum += digit else: odd_sum += digit return (even_sum, odd_sum)"},{"question":"Create a function that takes a single string argument and returns a new string with all the vowels in the original string replaced by asterisks. For example, if the input string is \\"apple\\", the function should return \\"*ppl*\\".","solution":"def replace_vowels(input_string): Replaces all vowels in the input string with asterisks. Args: input_string (str): The string to process. Returns: str: The processed string with all vowels replaced by asterisks. vowels = \\"aeiouAEIOU\\" result = \\"\\" for char in input_string: if char in vowels: result += '*' else: result += char return result"},{"question":"Create a function that takes as input a string representing a valid integer, and then return the binary representation of the integer - also as a string.","solution":"def int_to_binary_string(num_str): Converts a string representing a valid integer to its binary representation string. Args: num_str (str): A string representing a valid integer. Returns: str: The binary representation of the integer as a string. num = int(num_str) return bin(num)[2:] if num >= 0 else '-' + bin(num)[3:]"},{"question":"Create a function that takes in two parameters: a list of integers and a target integer. The function should return the indices of all elements in the list that are less than the target integer, excluding the target integer itself.","solution":"def find_indices_less_than_target(nums, target): Returns the indices of all elements in the list that are less than the target integer. Args: nums (list of int): List of integers. target (int): Target integer. Returns: list of int: List of indices where the elements are less than the target integer. return [i for i, num in enumerate(nums) if num < target]"},{"question":"Create a function that returns the sum of all the input values, regardless of the input size.","solution":"def sum_all(*args): Returns the sum of all input values. Parameters: *args: a variable number of inputs, all of which are assumed to be numbers Returns: The sum of all input values return sum(args)"},{"question":"Create a function that takes an integer as input, and returns the count of digits in the integer. However, the function should handle negative numbers correctly. For example, if the integer is -123, the function should return 3.","solution":"def count_digits(n): Returns the count of digits in the given integer n, ignoring the sign. n = abs(n) return len(str(n))"},{"question":"Create a function that takes a parameter n and returns the nth Fibonacci number in a programming language of your choice.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(n - 1): a, b = b, a + b return b"},{"question":"Create a function that converts a given string into its ASCII values. The function should take a string as input and return a list of integers representing the ASCII values of each character in the string.","solution":"def string_to_ascii_values(input_string): Converts a given string into its ASCII values. Parameters: input_string (str): The string to be converted. Returns: list: A list of integers representing the ASCII values of each character in the string. return [ord(char) for char in input_string]"},{"question":"Create a function that takes as argument a binary string (containing only '1's and '0's) and returns true if the binary string is a palindrome, and false otherwise.","solution":"def is_binary_palindrome(binary_string): Checks if the given binary string is a palindrome. Args: binary_string (str): A string containing only '1's and '0's. Returns: bool: True if the binary string is a palindrome, False otherwise. return binary_string == binary_string[::-1]"},{"question":"Create a function that takes a string as input and returns the string with the first vowel from the right replaced with 'u'.","solution":"def replace_last_vowel_with_u(s): Replaces the last vowel in the string (from the right) with 'u'. vowels = \\"aeiouAEIOU\\" for i in range(len(s) - 1, -1, -1): if s[i] in vowels: return s[:i] + 'u' + s[i+1:] return s"},{"question":"Create a function that generates a random Fibonacci sequence up to the nth term. The function should take an integer \`n\` as an argument and return a list containing the Fibonacci sequence up to the nth term. The Fibonacci sequence is defined as a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. However, for this problem, you can start with any two numbers, let's say 1 and 1 for simplicity.","solution":"def generate_fibonacci(n): Generates a Fibonacci sequence up to the nth term, starting with 1 and 1. Args: n (int): The number of terms in the Fibonacci sequence. Returns: list: A list containing the Fibonacci sequence up to the nth term. if n <= 0: return [] elif n == 1: return [1] elif n == 2: return [1, 1] sequence = [1, 1] for i in range(2, n): next_number = sequence[-1] + sequence[-2] sequence.append(next_number) return sequence"},{"question":"Create a function that takes two parameters, an integer \`n\` and a string \`s\`. The function should check if the string \`s\` contains exactly \`n\` occurrences of the substring \`\\"code\\"\`. If it does, return true; otherwise, return false.","solution":"def contains_exactly_n_code(n, s): Checks if the string \`s\` contains exactly \`n\` occurrences of the substring \\"code\\". Parameters: - n (int): Number of occurrences to check for. - s (string): The string to search in. Returns: - bool: True if the string contains exactly \`n\` occurrences of \\"code\\", False otherwise. return s.count(\\"code\\") == n"},{"question":"Create a function that takes in two parameters: a list of integers and a target sum. The function should return a pair of integers from the list that add up to the target sum. If no such pair exists, return None.","solution":"def two_sum(nums, target): Finds a pair of integers in the list that add up to the target sum. :param nums: List of integers. :param target: Target sum. :return: A tuple of two integers that add up to the target sum, or None if no such pair exists. seen = {} for num in nums: complement = target - num if complement in seen: return (complement, num) seen[num] = True return None"},{"question":"Create a function that takes in a positive integer and checks if it is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Write a function that will return \`True\` if the input is a prime number and \`False\` otherwise. Consider edge cases for negative numbers and numbers less than 2.","solution":"def is_prime(n): Returns True if n is a prime number, else returns False. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # other even numbers are not primes sqrt_n = int(n**0.5) + 1 for i in range(3, sqrt_n, 2): if n % i == 0: return False return True"},{"question":"Create a function that returns the largest number in a given list. If the list is empty, it should return -1. Write the function in Python.","solution":"def largest_number(numbers): Returns the largest number in the given list or -1 if the list is empty. if len(numbers) == 0: return -1 return max(numbers)"},{"question":"Create a function that generates Pythagorean triples. A Pythagorean triple consists of three positive integers a, b, and c, such that a^2 + b^2 = c^2. Generate a list of such triples less than a specified upper limit.","solution":"def generate_pythagorean_triples(limit): Generates a list of Pythagorean triples (a, b, c) such that a^2 + b^2 = c^2 and all values are less than the specified limit. triples = [] for a in range(1, limit): for b in range(a, limit): c = (a**2 + b**2) ** 0.5 if c.is_integer() and c < limit: triples.append((a, b, int(c))) return triples"},{"question":"Create a function that takes in two lists of numbers, and returns the intersecting numbers between the two lists.","solution":"def intersection(list1, list2): Returns the intersecting numbers between two lists. return list(set(list1) & set(list2))"},{"question":"Create a function that accepts a single integer and returns the sum of its digits.","solution":"def sum_of_digits(n): Returns the sum of the digits of the integer n. return sum(int(digit) for digit in str(abs(n)))"},{"question":"Create a function that takes an array of integers, and returns the count of numbers that appear an even number of times in the array.","solution":"def count_even_occurrences(arr): Takes an array of integers and returns the count of numbers that appear an even number of times. from collections import Counter if not arr: # If the array is empty, return 0 return 0 count = Counter(arr) even_count = 0 for number in count: if count[number] % 2 == 0: even_count += 1 return even_count"},{"question":"Create a function that can return the factorial of a given number. Factorial of a number is the product of all positive integers less than or equal to that number.","solution":"def factorial(n): Returns the factorial of n. Args: n (int): a non-negative integer whose factorial is to be calculated Returns: int: the factorial of the given number if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n+1): result *= i return result"},{"question":"Create a function that takes no parameters. The function should prompt the user to enter their first name and last name, store these values in variables, and then greet the user using a personalized message that includes both their first and last name.","solution":"def greet_user(): Prompts the user to enter their first name and last name, and prints a personalized greeting. first_name = input(\\"Enter your first name: \\") last_name = input(\\"Enter your last name: \\") print(f\\"Hello, {first_name} {last_name}!\\")"},{"question":"Create a function that filters out specific elements from a list based on their value. The function should take a list of integers and remove all integers that are divisible by a given divisor.","solution":"def filter_divisibles(numbers, divisor): Filters out elements from the list that are divisible by the given divisor. Parameters: - numbers: List of integers - divisor: Integer value for the divisor Returns: A list of integers that are not divisible by the divisor. return [num for num in numbers if num % divisor != 0]"},{"question":"Create a function that takes in a string and returns the length of the longest palindrome that can be formed by using any subset of the characters in the string. For example, for the input string \\"awesome\\", the longest palindrome that can be formed is \\"a\\" or \\"e\\", and the function should return 1.","solution":"def longest_palindrome_length(s): Returns the length of the longest palindrome that can be formed using any subset of the characters in the string \`s\`. from collections import Counter char_counts = Counter(s) length = 0 odd_found = False for count in char_counts.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True return length + 1 if odd_found else length"},{"question":"Create a function that prints the nth Fibonacci number using a recursive approach. The Fibonacci sequence starts with 0 and 1, where each subsequent number is the sum of the two preceding ones. For example, the first 10 numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34. What is the nth Fibonacci number when n = 7?","solution":"def fib_recursive(n): Returns the nth Fibonacci number using a recursive approach. if n <= 0: return 0 elif n == 1: return 1 else: return fib_recursive(n-1) + fib_recursive(n-2) # Example usage fib_seven = fib_recursive(7) print(f\\"The 7th Fibonacci number is: {fib_seven}\\")"},{"question":"Create a function that takes two parameters, an integer and an array of integers. The function should return the integer, but will also log to the console that integer and the array element to which the particular integer parameter matches (look for the integer in array-th position, not at integer-th position). If the integer is not at the array-th position, the array-th position should simply be null. If the integer is not found in the array, return null.","solution":"def find_and_log(index, arr): Returns the element at the \`index\`-th position of the array if index exists, otherwise returns None. Additionally, logs the integer at \`index\` and the value at that position in the array (if it exists). if index < 0 or index >= len(arr): return None match = arr[index] print(f'Index: {index}, Match: {match}') return match"},{"question":"Create a function that takes in a list of integers and a target number, and returns the index of the target number in the list if it exists, or -1 if it does not.","solution":"def find_target_index(nums, target): Returns the index of the target number in the list if it exists, or -1 if it does not. :param nums: List of integers :param target: Target integer to find :return: Index of the target integer or -1 if not found try: return nums.index(target) except ValueError: return -1"},{"question":"Create a function that will take two lists of numbers, list1 and list2, as input and return the sum of all the numbers that appear in both lists.","solution":"def sum_common_elements(list1, list2): Returns the sum of all numbers that appear in both list1 and list2. common_elements = set(list1) & set(list2) return sum(common_elements)"},{"question":"Create a function that implements a simple binary search algorithm in Python.","solution":"def binary_search(arr, target): Performs a binary search on a sorted array to find the index of the target element. Parameters: arr (list of int): The sorted list in which to search for the target. target (int): The element to search for. Returns: int: The index of the target element if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that takes a string and a number n as input and returns a new string consisting of the first n characters from the original string.","solution":"def first_n_characters(s, n): Returns the first n characters of the input string s. return s[:n]"},{"question":"Create a function that takes in two arrays and returns the maximum sum of pairs from each array where the pairs are formed by adding corresponding elements from the arrays.","solution":"def max_pairwise_sum(arr1, arr2): Returns the maximum sum of pairs formed by adding corresponding elements from the two arrays. Assumes both arrays are of equal length. if len(arr1) != len(arr2): raise ValueError(\\"Both arrays must have the same length\\") max_sum = float('-inf') for a, b in zip(arr1, arr2): current_sum = a + b if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Create a function that takes in two integers and returns their sum, but only if they are both positive. If either number is negative, return a message indicating that the numbers must be positive for the operation.","solution":"def add_positive_integers(a, b): Returns the sum of a and b if both are positive integers. If either number is negative, return a message indicating that the numbers must be positive for the operation. if a >= 0 and b >= 0: return a + b else: return \\"Both numbers must be positive for the operation.\\""},{"question":"Create a function that takes a list and returns the maximum sum of a sub-list within the given list. This sub-list can be of any length and must contain at least one element. The function should also return the start and end indices of the sub-list that achieves this maximum sum.","solution":"def max_sublist_sum(arr): This function takes a list of integers and returns a tuple containing: 1. The maximum sum of a sub-list. 2. The starting index of the sub-list. 3. The ending index of the sub-list. if not arr: return (0, None, None) max_sum = float('-inf') current_sum = 0 start = 0 max_start = 0 max_end = 0 for i in range(len(arr)): if current_sum <= 0: current_sum = arr[i] start = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum max_start = start max_end = i return (max_sum, max_start, max_end)"},{"question":"Create a function that checks if a number is prime or not. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Additionally, write a unit test to validate the functionality of your prime checking function.","solution":"def is_prime(n): Checks if a number n is prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Args: n (int): The number to check. Returns: bool: True if n is prime, False otherwise. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that returns the sum of all numbers in a list that are divisible by both 3 and 5. If the list is empty or contains no such numbers, return 0.","solution":"def sum_divisible_by_3_and_5(numbers): Returns the sum of all numbers in the list that are divisible by both 3 and 5. If the list is empty or contains no such numbers, return 0. return sum(num for num in numbers if num % 3 == 0 and num % 5 == 0)"},{"question":"Create a function that receives as input a 2D array (list of lists) and an integer 'n'. The function should return the n-th largest value found in the 2D array. If 'n' is out of bounds (i.e., less than 1 or greater than the total number of unique elements), the function should return None.","solution":"def nth_largest(matrix, n): Returns the n-th largest value in a 2D array (matrix). Parameters: matrix (list of lists): 2D array of integers. n (int): The 'n-th' largest value to retrieve. Returns: int: The n-th largest value if n is within bounds, otherwise None. if not matrix or n < 1: return None # Flatten the 2D array and get unique values flat_list = [item for sublist in matrix for item in sublist] unique_values = list(set(flat_list)) # Sort the unique values in descending order unique_values.sort(reverse=True) # Check if n is within the bounds of the number of unique values if n > len(unique_values): return None return unique_values[n-1]"},{"question":"Create a function that takes two lists as input and returns a new list containing elements that are present in either of the input lists, but not in both. This is known as the symmetric difference of two sets.","solution":"def symmetric_difference(list1, list2): Returns a list containing elements that are present in either of the input lists, but not in both (symmetric difference). set1 = set(list1) set2 = set(list2) return list(set1.symmetric_difference(set2))"},{"question":"Create a function that generates a dictionary containing the top N most common words in a given text. The function should take two parameters: the text itself as a string, and an integer N representing the number of top words to include.","solution":"from collections import Counter import re def top_n_common_words(text, n): Generates a dictionary containing the top N most common words in the given text. Parameters: text (str): The text to analyze. n (int): The number of top words to include. Returns: dict: A dictionary with the top N most common words and their frequencies. # Use a regular expression to remove punctuation and split text into words. words = re.findall(r'bw+b', text.lower()) word_counts = Counter(words) # Get the most common words up to the number specified by n. common_words = dict(word_counts.most_common(n)) return common_words"},{"question":"Create a function that takes 2 numbers and prints the sum of these numbers.","solution":"def print_sum(a, b): Prints the sum of a and b. print(a + b)"},{"question":"Create a function that accepts two arguments \`x\` and \`y\`, and is supposed to return \`x * y + z\` where \`z\` is a constant.","solution":"def multiply_and_add(x, y, z=5): Multiplies x and y, and then adds the constant z. Args: x (number): The first number to multiply. y (number): The second number to multiply. z (number): The constant to add to the product of x and y (default is 5). Returns: number: The result of x * y + z. return x * y + z"},{"question":"Create a function that takes an integer as input and returns the factorial of that number. The function should handle edge cases, such as negative numbers and zero. What are the edge cases we need to consider?","solution":"def factorial(n): Returns the factorial of a non-negative integer n. For negative numbers, raise a ValueError. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that finds the maximum value in a nested list of integers. The function should handle lists of varying depths and structure.","solution":"def find_max_in_nested_list(nested_list): Finds the maximum value in a nested list of integers. Args: nested_list (list): A list which can contain integers and other nested lists. Returns: int: The maximum integer value found in the nested list. max_value = float('-inf') def helper(sub_list): nonlocal max_value for item in sub_list: if isinstance(item, list): helper(item) else: if item > max_value: max_value = item helper(nested_list) return max_value"},{"question":"Create a function that checks if a given list of numbers is sorted in ascending order. The function should return \`True\` if the list is sorted, and \`False\` otherwise. You should also handle the case where the list contains duplicate elements.","solution":"def is_sorted(lst): Checks if the given list of numbers is sorted in ascending order. Parameters: lst (list): A list of numbers. Returns: bool: True if the list is sorted in ascending order, False otherwise. return lst == sorted(lst)"},{"question":"Create a function that takes an integer as an argument and returns the factorial of that integer. The function should be able to handle large integers efficiently.","solution":"import math def factorial(n): Returns the factorial of the given integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") return math.factorial(n)"},{"question":"Create a function that takes an array of numbers and returns a new array where each number is scaled by a given factor.","solution":"def scale_array(numbers, factor): Scales each number in the array by the given factor. Parameters: numbers (list of int/float): The array of numbers to be scaled. factor (int/float): The factor by which to scale the numbers. Returns: list of int/float: The scaled array. return [x * factor for x in numbers]"},{"question":"Create a function that will return the repeated letters in a given string.","solution":"def find_repeated_letters(s): Returns a list of repeated letters in a given string. Parameters: s (str): The input string Returns: List[str]: A list of repeated letters from collections import Counter letter_counts = Counter(s) repeated_letters = [letter for letter, count in letter_counts.items() if count > 1] return repeated_letters"},{"question":"Create a function that takes in a list of numbers and returns the sum of the numbers. However, for every number that is greater than 100, subtract 5 from it. Otherwise, just add it to the sum.","solution":"def custom_sum(numbers): Sums the given numbers, subtracting 5 from any number greater than 100 before adding it. total = 0 for num in numbers: if num > 100: total += (num - 5) else: total += num return total"},{"question":"Create a function that takes an array of integers as input and returns an array of the same length where each element is the largest number from the subarray ending at that position. The subarray includes the current element and all previous elements.","solution":"def largest_up_to(arr): Returns an array where each element is the largest number from the subarray ending at that position. :param arr: List of integers :return: List of integers if not arr: return [] max_values = [] current_max = arr[0] for num in arr: if num > current_max: current_max = num max_values.append(current_max) return max_values"},{"question":"Create a function that determines if one string is a permutation of another. The function should return \`true\` if the two strings are permutations of each other, and \`false\` otherwise.","solution":"def is_permutation(str1, str2): Determines if str1 is a permutation of str2. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if str1 is a permutation of str2, False otherwise. if len(str1) != len(str2): return False return sorted(str1) == sorted(str2)"},{"question":"Create a function that takes a list of integers as input and returns the minimum difference between any two numbers in the list. If the list has less than 2 integers, return None.","solution":"def min_diff(arr): Returns the minimum difference between any two numbers in the list. If the list has less than 2 integers, returns None. :param arr: List of integers :return: Minimum difference between any two numbers or None if len(arr) < 2: return None arr.sort() min_difference = float('inf') for i in range(len(arr) - 1): min_difference = min(min_difference, arr[i + 1] - arr[i]) return min_difference"},{"question":"Create a function that converts a given list of integers to their corresponding Roman numeral representations. The function should handle numbers in the range from 1 to 3999.","solution":"def int_to_roman(num): Converts an integer to its Roman numeral representation. :param num: Integer value to be converted (1 <= num <= 3999) :return: Roman numeral representation as a string val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] symbols = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_numeral += symbols[i] num -= val[i] i += 1 return roman_numeral"},{"question":"Create a function that takes an integer \`n\` as input and returns the sum of the cubes of the first \`n\` natural numbers.","solution":"def sum_of_cubes(n): Returns the sum of the cubes of the first n natural numbers. return sum(i**3 for i in range(1, n+1))"},{"question":"Create a function that takes a string as input and returns the longest prefix that can be formed by repeating a character in the string. The prefix does not need to be a substring of the original string, but the characters in the prefix must be the same.","solution":"def longest_repeating_prefix(s): Returns the longest prefix that can be formed by repeating a character in the string. Parameters: s (str): Input string Returns: str: Longest repeating character prefix if not s: return \\"\\" longest_prefix = \\"\\" # Finding the longest repeating prefix for i in range(len(s)): if s[i] == s[0]: longest_prefix += s[0] else: break return longest_prefix"},{"question":"Create a function that takes in two lists of strings and returns a new list containing the intersection of these lists. The intersection should contain only unique elements and be returned in alphabetical order.","solution":"def list_intersection(list1, list2): Returns a list containing the intersection of list1 and list2. The result contains unique elements in alphabetical order. # Convert lists to sets to find the intersection and then sorted list intersection_set = set(list1).intersection(set(list2)) return sorted(intersection_set)"},{"question":"Create a function that takes an array of integers, and returns an array that contains only the even numbers from the original array, but in reverse order.","solution":"def reverse_even_numbers(arr): Takes an array of integers and returns an array containing only the even numbers from the original array, in reverse order. # Filter out the even numbers even_numbers = [num for num in arr if num % 2 == 0] # Reverse the filtered even numbers list reversed_even_numbers = even_numbers[::-1] return reversed_even_numbers"},{"question":"Create a function that calculates the factorial of a given number using a loop in Python. The function should take an integer as input and return the factorial of that number.","solution":"def factorial(n): Returns the factorial of a given number using a loop. Parameters: n (int): A non-negative integer. Returns: int: The factorial of the given number. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes an array of integers and returns the median of the array without altering the original array. The function should also handle cases where the array is empty or contains negative numbers.","solution":"def find_median(nums): Returns the median of the list of numbers. If the list is empty, returns None. if not nums: return None nums_copy = sorted(nums) n = len(nums_copy) mid = n // 2 if n % 2 == 0: return (nums_copy[mid - 1] + nums_copy[mid]) / 2 else: return nums_copy[mid]"},{"question":"Create a function that takes a list of strings and returns a list of integers representing the number of characters in each string.","solution":"def count_characters(strings): This function takes a list of strings and returns a list of integers representing the number of characters in each string. :param strings: List of strings :return: List of integers return [len(s) for s in strings]"},{"question":"Create a function that takes a list of integers and returns a list of all possible pairs (tuples) of these integers. The function should avoid duplicate pairs, and the order of elements in the pair does not matter (i.e., (a, b) is considered the same as (b, a)).","solution":"from itertools import combinations def generate_pairs(numbers): Returns a list of all possible unique pairs (tuples) from a list of integers. The order of elements in the pair does not matter. return list(combinations(numbers, 2))"},{"question":"Create a function that takes an array with two numbers and returns the smaller of the two numbers.","solution":"def find_smaller_number(numbers): Returns the smaller of the two numbers in the list. Args: numbers (list): A list containing exactly two numbers. Returns: int or float: The smaller number of the two. if len(numbers) != 2: raise ValueError(\\"The input list must contain exactly two numbers.\\") return min(numbers)"},{"question":"Create a function that takes an integer as input and returns the number with all its digits reversed. For example, if the input is 1234, the function should return 4321. Assume that the input integer can be negative. If the input is negative, the negative sign should follow the reversed digits.","solution":"def reverse_integer(n): Returns the integer with all its digits reversed. If the input integer is negative, the negative sign should follow the reversed digits. str_n = str(n) if str_n[0] == '-': reversed_str_n = '-' + str_n[:0:-1] else: reversed_str_n = str_n[::-1] return int(reversed_str_n)"},{"question":"Create a function that takes two strings as input and returns the concatenation of the two strings. If the second string is empty, the function should return the first string. If the first string is also empty, it should return an empty string. Otherwise, concatenate the two strings with a space in between them.","solution":"def concatenate_strings(str1, str2): Concatenates two strings with a space in between if both are not empty. :param str1: First string. :param str2: Second string. :return: Concatenated string. if str2 == \\"\\": return str1 if str1 == \\"\\": return \\"\\" return str1 + \\" \\" + str2"},{"question":"Create a function that takes a list and returns a new list containing the square of each element.","solution":"def square_elements(lst): Returns a new list containing the square of each element in the input list. :param lst: List of integers or floats. :return: List of squared integers or floats. return [x**2 for x in lst]"},{"question":"Create a function that takes a list of integers as input and returns the sum of all the integers in the list. If the list is empty, the function should return 0. If the list contains negative numbers, they should be included in the sum.","solution":"def sum_of_list(numbers): Returns the sum of all integers in the list. If the list is empty, returns 0. Negative numbers are included in the sum. return sum(numbers)"},{"question":"Create a function that converts camelCase to snake_case in Python.","solution":"import re def camel_to_snake(camel_str): Converts a camelCase string to snake_case. # Replace capital letters with an underscore and the lowercase equivalent snake_str = re.sub(r'(?<!^)(?=[A-Z])', '_', camel_str).lower() return snake_str"},{"question":"Create a function that takes a list of integers as input and outputs the list of squared numbers.","solution":"def square_numbers(nums): Takes a list of integers and returns a list of their squares. Parameters: nums (list): A list of integers. Returns: list: A list of squared integers. return [x ** 2 for x in nums]"},{"question":"Create a function that generates a random sequence of letters based on a given probability distribution. The function should take in a list of characters and a sampling rate as parameters and return a list containing the randomly selected characters based on the specified sampling rate.","solution":"import numpy as np def generate_random_sequence(characters, sampling_rate): Generates a random sequence of letters based on a given probability distribution. Parameters: characters (list): List of characters to choose from. sampling_rate (list): List of probabilities corresponding to the characters. Returns: list: Randomly selected characters based on the specified sampling rate. if len(characters) != len(sampling_rate): raise ValueError(\\"Length of characters and sampling_rate must be the same.\\") if not np.isclose(sum(sampling_rate), 1): raise ValueError(\\"Sum of sampling_rate must be 1.\\") return np.random.choice(characters, p=sampling_rate) # Example usage: # characters = ['A', 'B', 'C'] # sampling_rate = [0.2, 0.5, 0.3] # generate_random_sequence(characters, sampling_rate)"},{"question":"Create a function that can reverse the order of elements in an array and then sorts the elements in ascending order.","solution":"def reverse_and_sort(arr): Returns a new array that is reversed and then sorted in ascending order. Parameters: arr (list): A list of elements. Returns: list: A list of elements that is reversed and then sorted. # Reverse the array reversed_arr = arr[::-1] # Sort the reversed array sorted_arr = sorted(reversed_arr) return sorted_arr"},{"question":"Create a function that takes two arrays of integers and returns a new array containing the common elements between the two input arrays. The function should efficiently find the common elements without using nested loops for brute force.","solution":"def find_common_elements(array1, array2): Returns a list of common elements between two input arrays. The common elements in the returned list are unique. set1 = set(array1) set2 = set(array2) common_elements = list(set1.intersection(set2)) return common_elements"},{"question":"Create a function that returns the sum and product of two numbers in Python.","solution":"def sum_and_product(a, b): Returns the sum and product of a and b. Args: a (int or float): The first number. b (int or float): The second number. Returns: tuple: A tuple containing the sum and product of a and b. return a + b, a * b"},{"question":"Create a function that takes a number as an argument and returns the number of times that number appears in a list. If the number is not found, return 0. The number can be an integer or a float.","solution":"def count_occurrences(num_list, num): Returns the number of times 'num' appears in 'num_list'. Parameters: num_list (list): The list to search through. num (int/float): The number to count in the list. Returns: int: The count of occurrences of 'num' in 'num_list'. return num_list.count(num)"},{"question":"Create a function that calculates the factorial of a number using both recursive and iterative approaches. The function should be able to handle large integers up to the maximum limit of the programming language it's implemented in.","solution":"def factorial_recursive(n): Returns the factorial of n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: return n * factorial_recursive(n-1) def factorial_iterative(n): Returns the factorial of n using iteration. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that is capable of transforming a sequence of integers (specifically, an array of integers) into a string, where each integer is separated by a space and enclosed in square brackets. For instance, an input array like \`[4, 5, 6]\` should be transformed into the string \`\\"[4] [5] [6]\\"\`.","solution":"def transform_sequence(arr): Transforms a sequence of integers into a string where each integer is separated by a space and enclosed in square brackets. Parameters: arr (list): List of integers. Returns: str: Transformed string. return ' '.join(f\\"[{num}]\\" for num in arr)"},{"question":"Create a function that generates a 4-character random password consisting of lowercase, uppercase, and numeric characters. The password should not include similar-looking characters such as 'O' and '0', 'I' and '1', 'l' and '1'.","solution":"import random import string def generate_password(): Generates a 4-character random password consisting of lowercase, uppercase, and numeric characters. Excludes similar-looking characters. chars = ''.join(set(string.ascii_letters + string.digits) - {'O', '0', 'I', '1', 'l'}) password = ''.join(random.choices(chars, k=4)) return password"},{"question":"Create a function that identifies whether a given number is prime or not. If the number is prime, return 1, otherwise return 0. Also, handle the edge case where the number is less than 2.","solution":"def is_prime(n): Returns 1 if n is a prime number, otherwise returns 0. if n < 2: return 0 for i in range(2, int(n**0.5) + 1): if n % i == 0: return 0 return 1"},{"question":"Create a function that generates the nth Fibonacci number using an iterative approach. The function should be efficient and suitable for large values of n.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that takes a list of integers as an argument and returns the most frequently occurring integer in the list. If there is more than one integer occurring most frequently, return all of them in a list.","solution":"def most_frequent_integers(lst): Returns the most frequently occurring integer(s) in the list. If there is more than one integer occurring most frequently, returns all of them in a list. from collections import Counter if not lst: return [] count = Counter(lst) max_frequency = max(count.values()) most_frequent = [key for key, value in count.items() if value == max_frequency] return most_frequent if len(most_frequent) > 1 else most_frequent[0]"},{"question":"Create a function that takes in an integer as a parameter and returns the asterisk path represented by the integer. For example, if the input is 3, the output should be \\"***\\". If the input is 5, the output should be \\"*****\\". Make sure to add a docstring to explain the function's behavior.","solution":"def generate_asterisks(n): Returns a string consisting of 'n' asterisks (*). Parameters: n (int): The number of asterisks to generate. Returns: str: A string of 'n' asterisks. return '*' * n"},{"question":"Create a function that outputs the first N numbers of the Fibonacci sequence as a list.","solution":"def fibonacci_sequence(N): Returns a list of the first N numbers in the Fibonacci sequence. if N <= 0: return [] fibonacci = [0, 1] while len(fibonacci) < N: fibonacci.append(fibonacci[-1] + fibonacci[-2]) return fibonacci[:N]"},{"question":"Create a function that takes an array of integers as input and returns a list of lists, where each sublist contains indices of all elements in the original array that are equal to a given target value (input parameter).","solution":"def find_all_indices(arr, target): Returns a list of lists, where each sublist contains indices of all elements in the original array that are equal to a given target value. result = [] for i, value in enumerate(arr): if value == target: result.append(i) return result"},{"question":"Create a function that takes a list and returns the most common item in the list. If there is a tie for the most common item, return all the items that are tied for most common. If the list is empty, return an empty list.","solution":"from collections import Counter def most_common_items(lst): Returns the most common items in the list. If there is a tie for the most common item, returns all tied items. If the list is empty, returns an empty list. if not lst: return [] counter = Counter(lst) max_count = max(counter.values()) return [item for item, count in counter.items() if count == max_count]"},{"question":"Create a function that takes two sorted arrays, A[] and B[], and prints the common elements of the two arrays by maintaining the order of the elements as in the original arrays.","solution":"def common_elements_sorted_arrays(A, B): This function takes two sorted arrays A and B, and returns a list of common elements. i, j = 0, 0 common_elements = [] while i < len(A) and j < len(B): if A[i] < B[j]: i += 1 elif A[i] > B[j]: j += 1 else: common_elements.append(A[i]) i += 1 j += 1 return common_elements"},{"question":"Create a function that takes a string input and returns the string in reverse order with all special characters removed.","solution":"def reverse_and_remove_special_characters(s): Returns the reversed string with all special characters removed. :param s: input string :return: reversed string with special characters removed # Remove special characters and reverse the string cleaned_string = ''.join(c for c in s if c.isalnum()) return cleaned_string[::-1]"},{"question":"Create a function that accepts a dictionary as a parameter and returns a sorted list of the dictionary's keys based on their corresponding values in ascending order.","solution":"def sort_dict_keys_by_values(d): Returns a sorted list of the dictionary's keys based on their corresponding values in ascending order. Parameters: d (dict): A dictionary where keys are sorted based on their values. Returns: list: A list of sorted keys. return sorted(d, key=d.get)"},{"question":"Create a function that takes an integer \`n\` as an argument and returns the sum of all the integers from 1 to \`n\` that have a remainder of \`r\` when divided by \`d\`. The function should call another auxiliary function \`remainder_finder(n, d)\` that finds all numbers from 1 to \`n\` that produce the remainder \`r\` when divided by \`d\`, and then sums them up.","solution":"def remainder_finder(n, d, r): Returns a list of numbers from 1 to n that produce a remainder r when divided by d. result = [] for i in range(1, n+1): if i % d == r: result.append(i) return result def sum_of_remainders(n, d, r): Returns the sum of all integers from 1 to n that have a remainder of r when divided by d. numbers_with_remainder_r = remainder_finder(n, d, r) return sum(numbers_with_remainder_r)"},{"question":"Create a function that takes an integer as input and returns a string representation of the integer in reverse order. The function should handle both positive and negative integers.","solution":"def reverse_integer(n): Returns the string representation of the integer n in reverse order. sign = '-' if n < 0 else '' n_str = str(abs(n)) reverse_str = n_str[::-1] return sign + reverse_str"},{"question":"Create a function that finds the maximum depth of a binary tree using a breadth-first search (BFS) approach. You should implement this function using Python.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth_bfs(root): Returns the maximum depth of a binary tree using BFS (breadth-first search) approach. if not root: return 0 queue = deque([(root, 1)]) # (node, current_depth) max_depth = 0 while queue: node, depth = queue.popleft() max_depth = max(max_depth, depth) if node.left: queue.append((node.left, depth + 1)) if node.right: queue.append((node.right, depth + 1)) return max_depth"},{"question":"Create a function that takes two lists as inputs and returns a new list that contains the common elements from both lists, without duplicates. How can you implement this in Python?","solution":"def common_elements(list1, list2): Returns a new list containing common elements from both lists, without duplicates. # Convert lists to sets to remove duplicates and find common elements set1 = set(list1) set2 = set(list2) common_set = set1.intersection(set2) # Convert the set back to a list before returning return list(common_set)"},{"question":"Create a function that takes an array of integers and returns the sum of all the elements that are greater than the average of the array.","solution":"def sum_above_average(arr): Returns the sum of all elements in the array that are greater than the average of the array. if not arr: # if the array is empty return 0 average = sum(arr) / len(arr) return sum(x for x in arr if x > average)"},{"question":"Create a function that takes three arguments: an integer n, a base b (which is at least 2), and an array of integers arr. The function checks if all elements in arr can be expressed as a power of b within the range from 0 to n-1. If all elements are powers of b within the specified range, return true; otherwise, return false.","solution":"def is_power_of_base(n, b, arr): Checks if all elements in arr can be expressed as a power of b within the range from 0 to n-1. Parameters: n (int): The integer defining the maximum exponent range. b (int): The base which is at least 2. arr (list): The array of integers to check. Returns: bool: True if all elements are powers of b within the range from 0 to n-1, False otherwise. if b < 2: return False powers_of_b = {b ** i for i in range(n)} return all(element in powers_of_b for element in arr)"},{"question":"Create a function that calculates the sum of all integers between 1 and n (inclusive) where n is a positive integer.","solution":"def sum_of_integers(n): Returns the sum of all integers between 1 and n (inclusive). Parameters: n (int): A positive integer. Returns: int: The sum of all integers between 1 and n. if n < 1: raise ValueError(\\"n must be a positive integer\\") return n * (n + 1) / 2"},{"question":"Create a function that accepts an array of integers. It should return the largest number divided by the smallest number in the array. If the array is empty or only contains one element, the function should return \`None\`. For example, an input of \`[5, 2, 8, 1]\` would return \`8\`, since \`8/1=8\`.","solution":"def largest_divided_by_smallest(arr): Returns the largest number divided by the smallest number in the array. If the array is empty or contains only one element, returns None. if len(arr) < 2: return None largest = max(arr) smallest = min(arr) return largest / smallest"},{"question":"Create a function that takes a string as a parameter and returns a list of all the words in the string, reversed. The words are separated by spaces. For example, if the input is \\"hello world\\", the output should be [\\"olleh\\", \\"dlrow\\"].","solution":"def reverse_words(sentence): Takes a string as a parameter and returns a list of all the words in the string, reversed. words = sentence.split() reversed_words = [word[::-1] for word in words] return reversed_words"},{"question":"Create a function that takes two lists as input, and returns a new list containing the common elements of both lists.","solution":"def common_elements(list1, list2): Returns a new list containing the common elements of both input lists. return list(set(list1) & set(list2))"},{"question":"Create a function that takes a file path as input and returns the content of the file as a string. If the file does not exist, the function should return an error message.","solution":"def read_file_content(file_path): Reads the content of a file and returns it as a string. If the file does not exist, returns an error message. Args: file_path (str): The path to the file to be read. Returns: str: Content of the file or an error message. try: with open(file_path, 'r') as file: return file.read() except FileNotFoundError: return \\"Error: File does not exist.\\""},{"question":"Create a function that takes a list of integers and returns the sum of all even numbers in the list. If the list is empty or contains no even numbers, the function should return 0.湖南是一个美丽的地方。","solution":"def sum_of_evens(nums): Returns the sum of all even numbers in the list. If the list is empty or contains no even numbers, returns 0. return sum(num for num in nums if num % 2 == 0)"},{"question":"Create a function that takes three arguments, two of which should be integers, and the third one can be either an integer or a string. If the third argument is an integer, the function returns the sum of the other two integers. If the third argument is a string, the function checks if the string represents a mathematical operation (+, -, *, /). If the string is a valid operation, it performs that operation on the first two integers and returns the result. If the operation is not valid, it returns \\"Invalid operation\\".","solution":"def operation_or_sum(a, b, c): Returns the sum of a and b if c is an integer. If c is a string representing a valid mathematical operation (+, -, *, /), performs that operation on a and b and returns the result. Otherwise, returns \\"Invalid operation\\". if isinstance(c, int): return a + b if isinstance(c, str): if c == '+': return a + b elif c == '-': return a - b elif c == '*': return a * b elif c == '/': return a / b else: return \\"Invalid operation\\""},{"question":"Create a function that returns a boolean value indicating whether or not a given binary tree is a perfect binary tree. A perfect binary tree is a complete binary tree that meets the following criteria: it has all levels completely filled except the last level. The last level must have all nodes to the left.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_perfect_binary_tree(root: TreeNode) -> bool: Determines if a given binary tree is a perfect binary tree. def depth(node): d = 0 while node: node = node.left d += 1 return d def is_perfect(node, depth, level=0): if node is None: return True if node.left is None and node.right is None: return depth == level + 1 if node.left is None or node.right is None: return False return is_perfect(node.left, depth, level + 1) and is_perfect(node.right, depth, level + 1) depth_of_tree = depth(root) return is_perfect(root, depth_of_tree)"},{"question":"Create a function that takes two lists of integers, \`list1\` and \`list2\`, and returns a new list containing the common elements found in both lists. The function should be efficient, and the solution should handle large lists effectively.","solution":"def find_common_elements(list1, list2): Returns a list containing the common elements found in both list1 and list2. set1 = set(list1) set2 = set(list2) return list(set1 & set2)"},{"question":"Create a function that takes two parameters, an integer \`x\` and a string \`y\`. The function should return a list of all possible combinations of \`x\` and \`y\`. If \`x\` is 0, the function should return a list containing an empty string. If \`y\` is an empty string, the function should return a list containing \`y\`. Otherwise, the function should return a list of all combinations where each character from \`y\` is appended to the number \`x\` in the format \\"x\\" + char.","solution":"def combine(x, y): Returns a list of all possible combinations of \`x\` and each character in \`y\`. If \`x\` is 0, return a list containing an empty string. If \`y\` is an empty string, return a list containing \`y\`. Otherwise, return a list of combinations in the format \\"x\\" + char. if x == 0: return [\\"\\"] if y == \\"\\": return [y] return [f\\"{x}{char}\\" for char in y]"},{"question":"Create a function that can reverse the words in a given string sentence while preserving the order of the words. For example, \\"Hello World\\" should be transformed into \\"olleH dlroW\\".","solution":"def reverse_words_in_sentence(sentence): Reverses the characters of each word in a sentence while preserving the order of the words. words = sentence.split() reversed_words = [''.join(reversed(word)) for word in words] return ' '.join(reversed_words)"},{"question":"Create a function that takes a list of floating-point numbers and returns the sum of their absolute values.","solution":"def sum_absolute_values(numbers): Returns the sum of the absolute values of a list of floating-point numbers. :param numbers: List of floating-point numbers. :return: Sum of their absolute values. return sum(abs(num) for num in numbers)"},{"question":"Create a function that takes an integer n and subtracts the sum of first m natural numbers from it, where m is also an integer passed as an argument. For example, if n=10 and m=2, the number to be subtracted is the sum of first 2 natural numbers, which is 1+2=3. After subtracting, the function should return the result.","solution":"def subtract_sum_of_natural_numbers(n, m): Subtracts the sum of the first m natural numbers from n. The sum of the first m natural numbers is given by the formula m*(m+1)/2. Parameters: n (int): The integer from which the sum is to be subtracted. m (int): The number of first natural numbers to sum and subtract from n. Returns: int: The result after subtracting the sum of first m natural numbers from n. sum_of_first_m_natural_numbers = m * (m + 1) // 2 return n - sum_of_first_m_natural_numbers"},{"question":"Create a function that takes two parameters, an array of integers and a target sum. The function should return true if there exists a pair in the array that adds up to the target sum, and false otherwise. The function should run in O(n) time complexity, using constant space.","solution":"def has_pair_with_sum(arr, target): Returns True if there exists a pair in arr that adds up to target, otherwise False. :param arr: List of integers. :param target: Target sum. :return: Boolean indicating if there is a pair that sums up to the target. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"Create a function that takes a string and returns the number of unique characters in the string, case-insensitive. For example, the string \\"Hello World\\" should return 8 since the characters \\"H\\", \\"e\\", \\"l\\", \\"o\\", \\"W\\", \\"r\\", \\"d\\" are unique, ignoring case sensitivity.","solution":"def unique_char_count(s): Returns the number of unique characters in the string, case-insensitive. s = s.lower() return len(set(s))"},{"question":"Create a function that takes in two numbers as parameters and returns the large number out of the two.","solution":"def larger_number(a, b): Returns the larger number between a and b. return a if a > b else b"},{"question":"Create a function that takes an array and returns the minimum and maximum values in the array. The function should iterate through the array only once.","solution":"def find_min_max(arr): Returns a tuple (min, max) containing the minimum and maximum values in the array. if not arr: raise ValueError(\\"Array should not be empty\\") min_val = max_val = arr[0] for num in arr[1:]: if num < min_val: min_val = num elif num > max_val: max_val = num return (min_val, max_val)"},{"question":"Create a function that takes a numerical vector as an input and returns its magnitude (length) in Python. To make this function available in R, I will use the \`reticulate\` package to interface between Python and R.","solution":"import math def vector_magnitude(vector): Returns the magnitude (length) of a numerical vector. The magnitude is calculated as the square root of the sum of the squares of the vector components. Parameters: vector (list or tuple): A numerical vector (list or tuple of numbers). Returns: float: The magnitude of the vector. return math.sqrt(sum(x**2 for x in vector))"},{"question":"Create a function that takes an array of strings and returns the one with the maximum length. If there are multiple strings with the same maximum length, it should return the first one that appears in the array.","solution":"def longest_string(strings): Returns the string with the maximum length from the array of strings. If multiple strings have the same maximum length, the first one that appears is returned. if not strings: return None max_length = -1 longest_str = None for string in strings: if len(string) > max_length: max_length = len(string) longest_str = string return longest_str"},{"question":"Create a function that takes two parameters: \`n\` and \`k\`. The function should return the number of unordered combinations of \`n\` items taken \`k\` at a time. The order of selection does not matter, and the result should be given modulo \`1000000007\`.","solution":"def combinations_mod(n, k): Returns the number of unordered combinations of n items taken k at a time, modulo 1000000007. MOD = 1000000007 def factorial_mod(x): Computes factorial of x modulo MOD. result = 1 for i in range(2, x + 1): result = (result * i) % MOD return result def mod_inverse(x, mod): Computes the modular inverse of x under modulo mod. return pow(x, mod - 2, mod) if k > n or k < 0: return 0 numerator = factorial_mod(n) # n! denominator = (factorial_mod(k) * factorial_mod(n - k)) % MOD # k!(n-k)! return (numerator * mod_inverse(denominator, MOD)) % MOD"},{"question":"Create a function that accepts a string, and removes all the characters that are not alphabets. Then, it checks if the resulting string is a palindrome or not. The function should return a tuple containing the cleaned string and a boolean indicating whether the string is a palindrome or not.","solution":"def clean_and_check_palindrome(input_string): Removes all non-alphabetic characters from the input string and checks if the resulting string is a palindrome. Parameters: input_string (str): The string to be cleaned and checked. Returns: tuple: A tuple containing the cleaned string and a boolean indicating whether the cleaned string is a palindrome or not. cleaned_string = ''.join(c for c in input_string if c.isalpha()) is_palindrome = cleaned_string.lower() == cleaned_string[::-1].lower() return cleaned_string, is_palindrome"},{"question":"Create a function that searches for a target value in a sorted array and returns the index of the first occurrence of the target value. If the target value is not found, return -1.","solution":"def search_first_occurrence(arr, target): Searches for the target value in a sorted array and returns the index of the first occurrence of the target value. If the target value is not found, returns -1. Parameters: arr (list): A list of sorted integers. target (int): The target integer to search for. Returns: int: The index of the first occurrence of the target value or -1 if the target is not found. left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: result = mid right = mid - 1 # Continue to search in the left half elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return result"},{"question":"Create a function that takes a string as an input and returns the reverse of that string. However, treat uppercase and lowercase letters as the same. In other words, the comparison should be case-insensitive. For example, if the input is 'Python', the function should return 'nohtyP'.","solution":"def reverse_string_case_insensitive(s): Returns the reverse of the string 's' with case-insensitive comparison. # Reverse the string using slicing reversed_str = s[::-1] return reversed_str"},{"question":"Create a function that takes in an array of strings and returns the longest string in the array.","solution":"def longest_string(strings): Returns the longest string in the array of strings. If there are multiple strings with the same maximum length, it returns the first one encountered. if not strings: return None return max(strings, key=len)"},{"question":"Create a function that takes a string as input and returns the reversed version of the string. In Python.","solution":"def reverse_string(s): Returns the reversed version of the input string. Parameters: s (str): The string to reverse. Returns: str: The reversed string. return s[::-1]"},{"question":"Create a function that takes two lists of integers, \`listA\` and \`listB\` as arguments. The function should print the elements of \`listA\` with elements of \`listB\` inserted between each pair of consecutive elements of \`listA\`. If the length of \`listA\` is n, then the output list should have \`2n - 1\` elements. If \`listA\` is empty, the function should return an empty list \`[]\`. If \`listB\` is empty or shorter than \`listA\`, the remaining elements of \`listA\` should be printed without any elements of \`listB\` inserted between them.","solution":"def interleave_lists(listA, listB): Returns a new list by inserting elements of listB between consecutive elements of listA. :param listA: List of integers :param listB: List of integers to be inserted between elements of listA :return: A new interleaved list if not listA: return [] result = [] lenB = len(listB) for i in range(len(listA) - 1): result.append(listA[i]) if i < lenB: result.append(listB[i]) result.append(listA[-1]) # add the last element of listA return result"},{"question":"Create a function that takes a string and reverses the characters in each word of the sentence without changing the order of the words.","solution":"def reverse_words_in_sentence(sentence): Reverses the characters in each word of the sentence without changing the order of the words. Parameters: sentence (str): A string containing words separated by spaces. Returns: str: A string with each word's characters reversed. words = sentence.split(' ') reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Create a function that takes an integer as an input and returns the number of odd numbers less than the input number.","solution":"def count_odd_numbers_less_than(n): Returns the number of odd numbers less than n. if n <= 0: return 0 return n // 2"},{"question":"Create a function that calculates the minimum depth of a binary tree. The binary tree is represented using a list of lists, where each element is a node and its value is the first item in the sublist, and its left and right children's indices are the next items. If a node has no child, its corresponding index is -1.","solution":"def min_depth_binary_tree(tree): Calculates the minimum depth of a binary tree represented in a list of lists. :param tree: List of lists where each sublist consists of [value, left_index, right_index] :return: Integer representing the minimum depth of the binary tree if not tree: return 0 def depth(node_index): if node_index == -1: return float('inf') # Addressing the non-existent child scenario if tree[node_index][1] == -1 and tree[node_index][2] == -1: return 1 left_depth = depth(tree[node_index][1]) right_depth = depth(tree[node_index][2]) return 1 + min(left_depth, right_depth) return depth(0)"},{"question":"Create a function that takes a string as input and returns a new string where every character is duplicated. For example, if the input string is \\"hello\\", the output should be \\"hheelllloo\\".","solution":"def duplicate_characters(s): Returns a new string where every character in the input string s is duplicated. return ''.join([char * 2 for char in s])"},{"question":"Create a function that takes in a list of integers and returns a string with each number followed by its corresponding English word.","solution":"def number_to_words(n): Helper function to convert a single digit number to its corresponding English word. words = [\\"zero\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\"] return words[n] def list_to_words(nums): Takes a list of integers and returns a string with each number followed by its English word. result = [] for num in nums: if 0 <= num <= 9: result.append(f\\"{num} {number_to_words(num)}\\") else: result.append(f\\"{num} out_of_range\\") return ' '.join(result)"},{"question":"Create a function that takes a list of numbers and return the sum of all prime numbers in the list. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. The function should ignore non-integer values and negative numbers.","solution":"def is_prime(n): Checks if the given number n is prime. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def sum_of_primes(numbers): Returns the sum of all prime numbers in the list 'numbers'. return sum(num for num in numbers if isinstance(num, int) and is_prime(num))"},{"question":"Create a function that filters out and returns only the strings from a given list that have a length greater than 5 characters.","solution":"def filter_long_strings(lst): Returns a list of strings from the input list that have a length greater than 5 characters. Parameters: lst (list): List of strings to be filtered. Returns: list: List containing strings with more than 5 characters. return [s for s in lst if len(s) > 5]"},{"question":"Create a function that takes an integer array and return the maximum subarray sum using Kadane's algorithm. What is Kadane's algorithm, and how does it work?","solution":"def max_subarray_sum(nums): This function takes an integer array and returns the maximum subarray sum using Kadane's algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, num + max_current) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that calculates the factorial of a number, but only for numbers between 0 and 10. If the input number is outside this range, the function should throw an error.","solution":"def factorial(n): Returns the factorial of a number between 0 and 10 inclusive. Raises a ValueError if the number is out of this range. if n < 0 or n > 10: raise ValueError(\\"Input number must be between 0 and 10 inclusive.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes two integers (a) and (b) as input and returns the sum of all integers from (a) to (b) (inclusive) if (a < b), and from (b) to (a) (inclusive) if (a > b). If (a = b), the function should return 0.","solution":"def sum_between(a, b): Returns the sum of all integers from a to b (inclusive) if a < b, and from b to a (inclusive) if a > b. If a == b, returns 0. if a == b: return 0 elif a < b: return sum(range(a, b + 1)) else: return sum(range(b, a + 1))"},{"question":"Create a function that takes in two parameters, a list of integers and a target number. The function should return the indices of the two numbers in the list that add up to the target number, with the condition that the first index is greater than the second index. If no valid pair of indices exists, the function should return an empty list.","solution":"def two_sum_indices(nums, target): Returns the indices of the two numbers that add up to the target number, ensuring the first index is greater than the second index. If no valid pair is found, return an empty list. indices_map = {} # Dictionary to store number and its index for i in range(len(nums)): complement = target - nums[i] if complement in indices_map: return [i, indices_map[complement]] indices_map[nums[i]] = i return []"},{"question":"Create a function that takes in the number of students and an array of their scores. The function should return the average score of all students. If the array of scores is empty, the function should return 0.","solution":"def average_score(num_students, scores): Returns the average score of all students. Parameters: - num_students (int): Number of students. - scores (list of int): List of scores. Returns: - float: Average score of the students or 0 if the scores list is empty. if num_students == 0 or not scores: return 0.0 return sum(scores) / num_students"},{"question":"Create a function that converts a string to a list of words, where words are separated by spaces. Also, ensure that each word is converted to lowercase. This function will help in text processing by breaking down the text into manageable parts for analysis.","solution":"def string_to_word_list(s): Converts a string to a list of words, where words are separated by spaces. Also ensures that each word is converted to lowercase. return s.lower().split()"},{"question":"Create a function that checks if four given numbers are in a strictly increasing order.","solution":"def are_numbers_strictly_increasing(a, b, c, d): Checks if the four given numbers are in strictly increasing order. Parameters: a (int or float): The first number. b (int or float): The second number. c (int or float): The third number. d (int or float): The fourth number. Returns: bool: True if numbers are in strictly increasing order, False otherwise. return a < b < c < d"},{"question":"Create a function that takes a list of integers and returns the product of all the integers in the list using recursion.","solution":"def product_of_list(lst): Returns the product of all the integers in the list using recursion. Parameters: lst (list): A list of integers Returns: int: The product of all the integers in the list if not lst: return 1 return lst[0] * product_of_list(lst[1:])"},{"question":"Create a function that , given an object, returns the maximum and minimum values in an array (one-dimensional).","solution":"def find_max_min(arr): Returns a tuple containing the maximum and minimum values in a one-dimensional array. Parameters: arr (list): A list of numbers Returns: tuple: A tuple where the first element is the maximum value and the second element is the minimum value if not arr: raise ValueError(\\"The array should not be empty\\") return (max(arr), min(arr))"},{"question":"Create a function that takes an integer as input and returns its binary representation as a string. Implement this function without using any built-in functions for conversion.","solution":"def int_to_binary(n): Returns the binary representation of an integer n as a string. if n == 0: return \\"0\\" binary_representation = \\"\\" is_negative = n < 0 n = abs(n) while n > 0: remainder = n % 2 binary_representation = str(remainder) + binary_representation n = n // 2 if is_negative: binary_representation = \\"-\\" + binary_representation return binary_representation"},{"question":"Create a function that takes two numbers a and b as parameters. The function should return the maximum of a and b.","solution":"def max_of_two(a, b): Returns the maximum of a and b. return a if a > b else b"},{"question":"Create a function that takes in a list of numbers and returns the sum of the numbers that are above the average of the list. Ensure your code is self-contained and imports any necessary packages at the beginning.","solution":"def sum_above_average(numbers): Returns the sum of numbers in the list that are above the average of the list. Parameters: numbers (list) : A list of numbers. Returns: (float): The sum of the numbers that are above the average. if not numbers: return 0 average = sum(numbers) / len(numbers) return sum(num for num in numbers if num > average)"},{"question":"Create a function that takes a number and an array as inputs and returns the array with the number inserted at the specified index. If the index is out of range, the number should be appended to the array. The function should handle indices lower than zero as an out of range scenario.","solution":"def insert_at_index(num, arr, index): Inserts num into the array arr at the specified index. If the index is out of range, num will be appended to the array. Negative indices are considered out of range. Parameters: - num : the number to be inserted. - arr : the array into which the number will be inserted. - index : the index at which the number should be inserted. Returns: - The array with the number inserted. if index < 0 or index >= len(arr): arr.append(num) else: arr.insert(index, num) return arr"},{"question":"Create a function that takes in a number as input and adds up the digits in the number until a single digit is obtained. For example, if the input is 987, the function should return 24, and then return 6 (since 2+4=6).","solution":"def add_digits_until_single_digit(number): Continuously adds the digits of the number until a single digit is obtained. while number >= 10: number = sum(int(digit) for digit in str(number)) return number"},{"question":"Create a function that takes a string as input and reverses the order of words while preserving the spaces and punctuation. For example, if the input string is \\"Hello, World!\\", the output should be \\"!dlroW ,olleH\\".","solution":"def reverse_words_and_preserve(input_string): Reverses the order of words in the input string while preserving the spaces and punctuation. return input_string[::-1]"},{"question":"Create a function that reverses a string without using any built-in string reverse functions, such as \`reversed()\`, \`[::-1]\`, or \`str.reverse()\`. Additionally, ensure that the function also preserves the case of the letters.","solution":"def reverse_string(s): Reverses the input string s without using built-in reverse functions. Args: s (str): The string to reverse. Returns: str: The reversed string. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Create a function that takes two integers as input and returns their sum. How can this function be extended to handle multiple integers and return their sum using Python?","solution":"def sum_integers(*args): Returns the sum of multiple integers. Accepts any number of integer arguments and returns their sum. return sum(args)"},{"question":"Create a function that compares two integers and returns the larger number. If the numbers are equal, the function should return -1.","solution":"def compare_integers(a, b): Compares two integers and returns the larger number. If the numbers are equal, returns -1. if a > b: return a elif a < b: return b else: return -1"},{"question":"Create a function that takes an array of integers and returns the second smallest number in the array. If there is no second smallest number, the function should return \`null\`.","solution":"def second_smallest(numbers): Returns the second smallest number in the array or None if there is no second smallest number. if len(numbers) < 2: return None sorted_numbers = sorted(set(numbers)) if len(sorted_numbers) < 2: return None return sorted_numbers[1]"},{"question":"Create a function that calculates the sum of all numbers in a given list. For this task, assume that the list will only contain integers.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the given list. :param numbers: List of integers :return: Integer sum of all elements in numbers return sum(numbers)"},{"question":"Create a function that generates a list of Fibonacci numbers up to a given limit. The function should also ensure that the list does not exceed the given limit. For example, if the limit is 10, the function should return [0, 1, 1, 2, 3, 5, 8].","solution":"def fibonacci_up_to_limit(limit): Generates a list of Fibonacci numbers up to the given limit. Parameters: limit (int): The upper limit for the Fibonacci sequence. Returns: list: A list of Fibonacci numbers not exceeding the given limit. if limit < 0: return [] fibonacci_sequence = [0, 1] while True: next_value = fibonacci_sequence[-1] + fibonacci_sequence[-2] if next_value > limit: break fibonacci_sequence.append(next_value) return fibonacci_sequence if limit > 0 else [0]"},{"question":"Create a function that takes a list of integers, finds the minimum and maximum values and returns the difference between them.","solution":"def find_difference(nums): Returns the difference between the maximum and minimum values in the list of integers. if not nums: raise ValueError(\\"The list should not be empty\\") min_val = min(nums) max_val = max(nums) return max_val - min_val"},{"question":"Create a function that takes two parameters, a start date and an end date. The function should return the number of days between these two dates.","solution":"from datetime import datetime def days_between_dates(start_date, end_date): Returns the number of days between two dates. Parameters: start_date (str): A string representing the start date in the format 'YYYY-MM-DD'. end_date (str): A string representing the end date in the format 'YYYY-MM-DD'. Returns: int: The number of days between the start date and end date. date_format = \\"%Y-%m-%d\\" start_dt = datetime.strptime(start_date, date_format) end_dt = datetime.strptime(end_date, date_format) delta = end_dt - start_dt return delta.days"},{"question":"Create a function that taking an integer arguments and returns the factorial of the integers. For example, if the integer is 5, the function should return 120 since 5! = 5 x 4 x 3 x 2 x 1 = 120.","solution":"def factorial(n): Returns the factorial of a given positive integer n. If n is 0, returns 1 since 0! is defined to be 1. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes a parameter which is a string. This function should return a dictionary where the keys are the characters of the string and the values are the frequencies of those characters. The function should ignore case sensitivity.","solution":"def character_frequencies(input_string): Takes a string and returns a dictionary where keys are the characters and values are the frequencies of those characters. The function ignores case sensitivity. input_string = input_string.lower() freq_dict = {} for char in input_string: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Create a function that reads a file and counts the occurrences of each word in the file. The function should return a dictionary where the keys are the words and the values are the counts. Assume the file is in a language other than English, and consider handling case sensitivity and punctuation.","solution":"import re from collections import defaultdict def count_word_occurrences(file_path): Reads a file and counts the occurrences of each word in the file. Returns a dictionary where the keys are the words and the values are the counts. Handles case sensitivity and punctuation. word_counts = defaultdict(int) with open(file_path, 'r', encoding='utf-8') as file: for line in file: # Remove punctuation and make the text lower case clean_line = re.sub(r'[^ws]', '', line).lower() words = clean_line.split() for word in words: word_counts[word] += 1 return word_counts"},{"question":"Create a function that takes two numbers as arguments and returns their sum. Can you provide an example in Python?","solution":"def sum_numbers(a, b): Returns the sum of a and b. return a + b"},{"question":"Create a function that takes a string and returns a dictionary with characters as keys and their frequencies as values.","solution":"def char_frequencies(s): Returns a dictionary with characters as keys and their frequencies as values. :param s: Input string :type s: str :return: Dictionary with character frequencies :rtype: dict freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Create a function that takes two arguments, an integer \`n\` and a list \`lst\`. The function should return a new list where all elements greater than \`n\` are doubled. If there are no elements greater than \`n\`, return the original list unchanged.","solution":"def double_greater_than(n, lst): Returns a new list where all elements greater than n are doubled. If no elements are greater than n, the original list is returned unchanged. Parameters: n (int): The threshold integer. lst (list): The list of integers to process. Returns: list: A new list with elements greater than n doubled. if not any(x > n for x in lst): return lst return [x * 2 if x > n else x for x in lst]"},{"question":"Create a function that takes an integer as input and returns the binary representation of that integer as a string with a specific prefix '0b'. For example, if the input is 5, the function should return '0b101'. If the input is 0, the function should return '0b0'. Additionally, ensure that the function can handle large integers as well. Show an example makes sense.","solution":"def int_to_binary_with_prefix(n): Returns the binary representation of an integer \`n\` with a '0b' prefix. return bin(n) # Example Usage print(int_to_binary_with_prefix(5)) # Output: '0b101' print(int_to_binary_with_prefix(0)) # Output: '0b0' print(int_to_binary_with_prefix(255)) # Output: '0b11111111'"},{"question":"Create a function that implements a Fibonacci sequence generator in Python. The function should take one parameter, \`n\`, that specifies the number of terms in the Fibonacci sequence to generate. The function should return a list containing the first \`n\` terms of the Fibonacci sequence.","solution":"def fibonacci(n): Returns the first n terms of the Fibonacci sequence. :param n: Number of terms in the Fibonacci sequence to generate. :return: A list containing the first n terms of the Fibonacci sequence. if n <= 0: return [] sequence = [0, 1] for i in range(2, n): next_term = sequence[-1] + sequence[-2] sequence.append(next_term) return sequence[:n]"},{"question":"Create a function that checks if a given string represents a valid JSON object. You need to return \`True\` if the string is valid JSON, otherwise, return \`False\`.","solution":"import json def is_valid_json(test_string): Checks if the given string is a valid JSON object. Parameters: test_string (str): The string to be tested. Returns: bool: True if the string is a valid JSON object, otherwise False. try: json.loads(test_string) return True except ValueError: return False"},{"question":"Create a function that identifies the first duplicate number in a list. If there are no duplicates, the function should return -1. For example, in the list \`[2, 3, 5, 4, 5, 1, 2, 4]\`, the first duplicate number is 5.","solution":"def first_duplicate(nums): Returns the first duplicate number in a list. If there are no duplicates, return -1. seen = set() for num in nums: if num in seen: return num seen.add(num) return -1"},{"question":"Create a function that will print a reversed string.","solution":"def reverse_string(s): Returns the reversed string of s. return s[::-1]"},{"question":"Create a function that takes as input two lists of numbers a and b, and return their intersection. The intersection of two arrays is defined as the set of elements that are common between both arrays. For example, the intersection of the arrays [1, 2, 3] and [2, 3, 4] is [2, 3], since these are the elements that both arrays have in common.","solution":"def intersection(a, b): Returns the intersection of two lists a and b. return list(set(a) & set(b))"},{"question":"Create a function that accepts an array of integers and returns a new array with all duplicates removed without using any additional data structures.","solution":"def remove_duplicates(arr): Returns a new array with all duplicates removed. if len(arr) == 0: return [] result = [] for i in range(len(arr)): is_duplicate = False for j in range(i): if arr[i] == arr[j]: is_duplicate = True break if not is_duplicate: result.append(arr[i]) return result"},{"question":"Create a function that takes one parameter, which is a list of integers. The function should check if every integer in the list is either a multiple of 3 or a multiple of 5. If all integers meet this criterion, the function should return \\"YES\\". If there is at least one integer that is not a multiple of 3 or 5, the function should return \\"NO\\".","solution":"def check_multiples(nums): Checks if every integer in the list is either a multiple of 3 or 5. Returns \\"YES\\" if all integers meet the criterion, otherwise \\"NO\\". for num in nums: if num % 3 != 0 and num % 5 != 0: return \\"NO\\" return \\"YES\\""},{"question":"Create a function that takes an integer variable, an integer index, and a two-dimensional list (matrix) and finds the element at the given index in the specified row of the matrix. The function should handle cases where the index is out of bounds by returning -1.","solution":"def get_element(matrix, row_index, col_index): Returns the element in the matrix at the given row and column index. If the row or column index is out of bounds, returns -1. :param matrix: List of lists representing the matrix :param row_index: Integer, index of the row :param col_index: Integer, index of the column :return: Element at the specified index or -1 if out of bounds # Check if the row index is out of bounds if row_index < 0 or row_index >= len(matrix): return -1 # Check if the column index is out of bounds if col_index < 0 or col_index >= len(matrix[row_index]): return -1 # Return the element at the specified index return matrix[row_index][col_index]"},{"question":"Create a function that uses the观光车巡回赛 rules to calculate the maximum score a participant can obtain by visiting all the sights using a观光车. The观光车 can be used to \\"jump\\" from one sight to another without the score penalty.","solution":"def max_score(sights): Calculates the maximum score a participant can obtain by visiting all the sights using a观光车. Args: sights (list of int): List of scores at each sight. Returns: int: Maximum score. if not sights: return 0 n = len(sights) dp = [0] * n # Initialize the dp array with the score of the first sight dp[0] = sights[0] # Traverse the sight scores and calculate the maximum score for each sight for i in range(1, n): dp[i] = max(dp[i-1] + sights[i], sights[i]) return max(dp)"},{"question":"Create a function that receives an array of integers and returns the indexes where this array achieves its minimum value. If there are multiple minimum values, return all their indexes. The function should be able to handle a list of both negative and positive integers and is not required to handle empty lists.","solution":"def find_min_indexes(arr): Returns a list of indexes where the minimum value is achieved in the input array. Parameters: arr (list of int): List of integers. Returns: list of int: List of indexes where the minimum value occurs. if not arr: raise ValueError(\\"The input array must not be empty.\\") min_val = min(arr) return [index for index, value in enumerate(arr) if value == min_val]"},{"question":"Create a function that takes a list of integers and returns a new list containing only the integers that are even and less than 100. You need to implement the function using a list comprehension.","solution":"def filter_even_numbers_less_than_100(numbers): Returns a new list containing only the integers that are even and less than 100. return [num for num in numbers if num % 2 == 0 and num < 100]"},{"question":"Create a function that takes a string and a list of characters to remove from the string. The function should return the modified string with all specified characters removed.","solution":"def remove_characters(input_string, characters_to_remove): Removes all specified characters from the input string. Parameters: - input_string (str): The original string from which characters need to be removed. - characters_to_remove (list): A list of characters to remove from the input string. Returns: - str: The modified string with specified characters removed. return ''.join(char for char in input_string if char not in characters_to_remove)"},{"question":"Create a function that processes a list of temperature readings in Celsius. The function should return the lowest temperature in the list.","solution":"def lowest_temperature(temperatures): Returns the lowest temperature in the list of temperatures. Parameters: temperatures (list of float): List of temperature readings in Celsius. Returns: float: The lowest temperature in the list. if not temperatures: raise ValueError(\\"The list of temperatures cannot be empty.\\") return min(temperatures)"},{"question":"Create a function that takes a string and returns a new string with all duplicate characters removed. Ensure that the character order is preserved.","solution":"def remove_duplicates(s): Returns a new string with all duplicate characters removed, preserving the order of the first occurrence. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that takes a string with a mix of upper, lower case letters and spaces. The function should return a new string where all words are in uppercase.","solution":"def capitalize_words(s): Returns the string with all words in uppercase. return ' '.join(word.upper() for word in s.split())"},{"question":"Create a function that verifies if a given number is a perfect square. If it is, return the number squared inputted squared, if not, return none.","solution":"import math def verify_perfect_square(num): Verifies if a given number is a perfect square. If it is, return the square of that number; if not, return None. sqrt = int(math.sqrt(num)) if sqrt * sqrt == num: return num * num else: return None"},{"question":"Create a function that takes the root of a binary tree and converts it to a binary search tree (BST) in-place. The conversion should maintain the original structure of the binary tree as much as possible. You can assume that the original binary tree does not contain duplicates.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(node, values): if node: inorder_traversal(node.left, values) values.append(node.val) inorder_traversal(node.right, values) def rebuild_bst(node, iterator): if node: rebuild_bst(node.left, iterator) node.val = next(iterator) rebuild_bst(node.right, iterator) def binary_tree_to_bst(root): # Step 1: Extract the values from the original tree values = [] inorder_traversal(root, values) # Step 2: Sort the extracted values values.sort() # Step 3: Rebuild the tree in-place with the sorted values rebuild_bst(root, iter(values)) return root"},{"question":"Create a function that verifies if the input string is a valid palindrome. A palindrome is a string that reads the same backward as forward, e.g., \\"madam\\" or \\"racecar\\". The function should ignore spaces, punctuation, and be case-insensitive.","solution":"import re def is_palindrome(s): Verifies if the input string is a valid palindrome. Ignores spaces, punctuation, and is case-insensitive. # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"Create a function that cleans up a taken phone number to ensure that it is correctly structured, regardless of spaces and punctuation. The number should be in the format of \\"(XXX) XXX-XXXX\\", where X represents a digit. If the input number does not fit this format, the function should return \\"Invalid number format\\".","solution":"import re def clean_phone_number(phone_number): Cleans the phone number to ensure it is correctly structured in the format \\"(XXX) XXX-XXXX\\". Returns \\"Invalid number format\\" if the input number does not fit the format. # Remove all non-digit characters digits = re.sub(r'D', '', phone_number) # Check if the cleaned number has exactly 10 digits if len(digits) != 10: return \\"Invalid number format\\" # Format the number in \\"(XXX) XXX-XXXX\\" formatted_number = f\\"({digits[:3]}) {digits[3:6]}-{digits[6:]}\\" return formatted_number"},{"question":"Create a function that takes two integers representing the hour and minute mark and returns the angle between the hour hand and minute hand on a clock.","solution":"def clock_angle(hour, minute): Returns the angle between the hour and minute hand on a clock. Parameters: hour (int): The hour hand, can be between 1-12. minute (int): The minute hand, can be between 0-59. Returns: float: The angle between the hour and minute hands. # Ensure hour is within 1-12 hour = hour % 12 # Ensure minute is within 0-59 minute = minute % 60 # Calculate the positions hour_angle = (hour * 30) + (minute * 0.5) minute_angle = minute * 6 # Calculate the difference angle = abs(hour_angle - minute_angle) # Return the smaller angle between the two possible return min(angle, 360 - angle)"},{"question":"Create a function that takes three inputs: fname (first name), lname (last name), and age. The function should return a dictionary containing the inputs as key-value pairs.","solution":"def create_person_dict(fname, lname, age): Creates a dictionary with the provided first name, last name, and age. Args: fname (str): The first name. lname (str): The last name. age (int): The age. Returns: dict: A dictionary containing the first name, last name, and age. return {\\"fname\\": fname, \\"lname\\": lname, \\"age\\": age}"},{"question":"Create a function that takes two strings as input and returns a new string that is the concatenation of the two input strings. The new string should be enclosed in square brackets.","solution":"def concatenate_strings(str1, str2): Takes two strings as input and returns a new string that is the concatenation of the two input strings, enclosed in square brackets. return f\\"[{str1 + str2}]\\""},{"question":"Create a function that accepts an array of integers, calculates the sum of all its elements, and returns the sum. If the array is empty or contains no elements, return 0.","solution":"def sum_array(arr): Returns the sum of all elements in the array. If the array is empty, returns 0. return sum(arr) if arr else 0"},{"question":"Create a function that generates a list of all prime numbers between 2 and a given number N. What is the most efficient way to ensure that the function runs in the least amount of time possible?","solution":"def sieve_of_eratosthenes(n): Generates a list of all prime numbers up to and including n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiples in range(start*start, n + 1, start): sieve[multiples] = False return [x for x in range(2, n + 1) if sieve[x]]"},{"question":"Create a function that takes a list of strings and returns only the strings that start with the letter 'A'.","solution":"def filter_strings_starting_with_a(strings): Filters the list of strings and returns only the strings that start with the letter 'A'. Parameters: strings (list): List of strings to filter. Returns: list: List of strings that start with the letter 'A'. return [s for s in strings if s.startswith('A')]"},{"question":"Create a function that calculates the weighted average of a list of numbers given corresponding weights.","solution":"def weighted_average(values, weights): Returns the weighted average of the given list of values weighted by the corresponding list of weights. :param values: List of numerical values. :param weights: List of numerical weights corresponding to the values. :return: The weighted average of the values. if len(values) != len(weights): raise ValueError(\\"The lengths of values and weights must be the same\\") total_weight = sum(weights) if total_weight == 0: raise ValueError(\\"The total weight must not be zero\\") weighted_sum = sum(value * weight for value, weight in zip(values, weights)) return weighted_sum / total_weight"},{"question":"Create a function that generates a random string of a given length, using only uppercase letters. Here is an example of what the function should look like: \`def generate_random_string(length): pass\` and here is an example output: \`generate_random_string(5)\` \`# Output: \\"AERHD\\"\`","solution":"import random import string def generate_random_string(length): Returns a random string of the given length using only uppercase letters. return ''.join(random.choice(string.ascii_uppercase) for _ in range(length))"},{"question":"Create a function that generates a random sentence with a given length. The length of the sentence is defined as the number of words it contains. The function should take an integer \`n\` as an input and return a string representing a random sentence with \`n\` words, each word of random length between 1 to 10 characters. The words should be separated by spaces.","solution":"import random import string def generate_random_sentence(n): Generate a random sentence with n words. Each word is of random length between 1 to 10 characters. Parameters: n (int): The number of words in the sentence. Returns: str: A random sentence with n words. words = [] for _ in range(n): word_length = random.randint(1, 10) word = ''.join(random.choices(string.ascii_lowercase, k=word_length)) words.append(word) return ' '.join(words)"},{"question":"Create a function that takes an array of integers and returns the sum of all even indices in the array. Indexing starts at 0.","solution":"def sum_even_indices(arr): Returns the sum of all elements at even indices in the array. :param arr: List of integers. :return: Integer sum of elements at even indices. return sum(arr[i] for i in range(0, len(arr), 2))"},{"question":"Create a function that generates and prints the first \`n\` prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, the first 5 prime numbers are 2, 3, 5, 7, 11.","solution":"def generate_primes(n): Generates the first n prime numbers. Parameters: n (int): The number of prime numbers to generate. Returns: list: A list containing the first n prime numbers. if n <= 0: return [] primes = [] candidate = 2 while len(primes) < n: is_prime = all(candidate % p != 0 for p in primes) if is_prime: primes.append(candidate) candidate += 1 return primes"},{"question":"Create a function that rotates a list to the right by k positions, where k can be larger than the length of the list.","solution":"def rotate_list_right(lst, k): Rotates the given list to the right by k positions. Parameters: lst (list): The list to rotate. k (int): The number of positions to rotate the list. Returns: list: The rotated list. if not lst: return lst k = k % len(lst) # Handle k larger than the length of the list return lst[-k:] + lst[:-k]"},{"question":"Create a function that takes a string as input and returns a list of words split by spaces.","solution":"def split_string_by_spaces(input_string): Splits the input string by spaces and returns a list of words. Parameters: input_string (str): The string to be split. Returns: list: List of words split by spaces. return input_string.split()"},{"question":"Create a function that generates and returns a Pascal's triangle with the first n rows. Each number in the triangle should be calculated using a binomial coefficient.","solution":"def generate_pascals_triangle(n): Generates Pascal's triangle with n rows. :param n: The number of rows for the triangle. :return: A list of lists representing Pascal's triangle. if n <= 0: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"Create a function that takes a list of integers as input and returns the sum of all the elements in the list. If the list is empty, the function should return 0. If the list contains negative numbers, the function should also sum them. The function should handle any integer overflow that may occur due to the sum of all elements.","solution":"def sum_of_list(numbers): Returns the sum of all integers in the list. If the list is empty, returns 0. If the list contains negative numbers, they are included in the sum. return sum(numbers)"},{"question":"Create a function that reverse the vowels of a given string, while leaving all other characters in their original positions.","solution":"def reverse_vowels(s): Reverse the vowels of a given string while leaving all other characters in their original positions. vowels = 'aeiouAEIOU' string = list(s) i, j = 0, len(s) - 1 while i < j: if string[i] in vowels and string[j] in vowels: string[i], string[j] = string[j], string[i] i += 1 j -= 1 if string[i] not in vowels: i += 1 if string[j] not in vowels: j -= 1 return ''.join(string)"},{"question":"Create a function that takes a string as input and returns the string with all the vowels removed. The function should also return the count of vowels removed. For instance, if the input is \\"Hello world,\\" the function should return \\"Hll wrld\\" and 3 (since three vowels: 'e', 'o', 'o' were removed).","solution":"def remove_vowels(input_string): Removes all vowels from the input string and returns the string without vowels and the count of vowels removed. Args: input_string (str): The input string. Returns: tuple: A tuple containing the string without vowels and the count of vowels removed. vowels = 'aeiouAEIOU' count = 0 output_string = [] for char in input_string: if char in vowels: count += 1 else: output_string.append(char) return ''.join(output_string), count"},{"question":"Create a function that takes the names of two cities and returns the longer name. If both cities have the same name, return that name along with a message indicating they are the same. The function should handle both uppercase and lowercase inputs and should be case-insensitive when comparing the names.","solution":"def compare_cities(city1, city2): Compares two city names and returns the longer name. If both cities have the same name (case-insensitive), returns that name with an indication message. Args: city1 (str): The name of the first city. city2 (str): The name of the second city. Returns: str: The longer city name or a message if they are the same. city1_lower = city1.lower() city2_lower = city2.lower() if city1_lower == city2_lower: return f\\"{city1} (City names are the same)\\" elif len(city1) > len(city2): return city1 else: return city2"},{"question":"Create a function that calculates the factorial of a given number. However, the function should only compute the factorial for numbers that are within a specified range (inclusive) and are even. If the number is outside the range or odd, the function should return -1. Additionally, the function should handle large numbers efficiently by using a suitable data structure or algorithm.","solution":"def factorial(num, low, high): Returns the factorial of num if it's even and within the range [low, high], otherwise returns -1. if num < low or num > high or num % 2 != 0: return -1 if num == 0: return 1 result = 1 for i in range(1, num + 1): result *= i return result"},{"question":"Create a function that calculates the factorial of a number. The function should be named \`calculate_factorial\` and should take an integer \`n\` as its parameter. The function should return the factorial of \`n\`.","solution":"def calculate_factorial(n): Returns the factorial of a given number n. The factorial of n (n!) is the product of all positive integers less than or equal to n. Arguments: n -- a non-negative integer Returns: The factorial of n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that , given a string, returns the longest palindrome substring that can be formed by removing characters from the input string.","solution":"def longest_palindrome_substring(s): Returns the longest palindrome substring that can be formed by removing characters from the input string. n = len(s) table = [[False for x in range(n)] for y in range(n)] maxLength = 1 start = 0 for i in range(n): table[i][i] = True for i in range(n - 1): if s[i] == s[i + 1]: table[i][i + 1] = True start = i maxLength = 2 for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 if (table[i + 1][j - 1] and s[i] == s[j]): table[i][j] = True if (k > maxLength): start = i maxLength = k return s[start:start + maxLength]"},{"question":"Create a function that takes in an integer n and returns a list of integers from 1 to n, but with all the multiples of 3 replaced with 'Fizz' and all the multiples of 5 replaced with 'Buzz'. For numbers that are multiples of both 3 and 5, replace them with 'FizzBuzz'.","solution":"def fizz_buzz(n): Returns a list of integers from 1 to n, with multiples of 3 replaced with \\"Fizz\\", multiples of 5 replaced with \\"Buzz\\", and multiples of both 3 and 5 replaced with \\"FizzBuzz\\". Parameters: n (int): The upper limit of the list (inclusive). Returns: list: The processed list following the FizzBuzz rules. result = [] for i in range(1, n+1): if i % 3 == 0 and i % 5 == 0: result.append('FizzBuzz') elif i % 3 == 0: result.append('Fizz') elif i % 5 == 0: result.append('Buzz') else: result.append(i) return result"},{"question":"Create a function that takes an array of integers and returns the maximum subarray sum, according to Kadane's algorithm. Kadane's algorithm is an efficient way to find the maximum sum of a contiguous subarray in an array of integers. The subarray must contain at least one number and an empty subarray has a sum of 0.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray using Kadane's algorithm. if not arr: return 0 max_current = max_global = arr[0] for number in arr[1:]: max_current = max(number, max_current + number) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes a, b, and c as arguments and returns the smallest number among them.","solution":"def smallest(a, b, c): Returns the smallest number among a, b, and c. return min(a, b, c)"},{"question":"Create a function that takes two lists of numbers and returns a list with the numbers from the first list that are not present in the second list.","solution":"def list_difference(list1, list2): Returns a list of elements from list1 that are not present in list2. Parameters: list1 (list): The first list of numbers. list2 (list): The second list of numbers. Returns: list: A new list containing elements from list1 that are not in list2. return [item for item in list1 if item not in list2]"},{"question":"Create a function that finds the maximum sum of two elements in an array.","solution":"def max_sum_of_two_elements(arr): Returns the maximum sum of two elements in the array. If the array has less than two elements, returns None. if len(arr) < 2: return None first_max = second_max = float('-inf') for num in arr: if num > first_max: second_max = first_max first_max = num elif num > second_max: second_max = num return first_max + second_max"},{"question":"Create a function that checks if a given integer is a palindrome. A palindrome is a number that reads the same backward as forward. For example, 121 is a palindrome because it reads the same both ways. Additionally, implement this check using recursion in Python. The function should return a boolean value indicating whether the number is a palindrome.","solution":"def is_palindrome_recursive(n): Checks if a given integer is a palindrome using recursion. Parameters: n (int): The integer to check. Returns: bool: True if the integer is a palindrome, False otherwise. def helper(s, start, end): # Base case for recursion: start index has passed end index if start >= end: return True # Check if characters at the start and end are the same if s[start] != s[end]: return False # Recursive call moving towards the center of the string return helper(s, start + 1, end - 1) # Convert number to string to check for palindrome properties s = str(n) return helper(s, 0, len(s) - 1)"},{"question":"Create a function that determines if a given binary tree is a binary search tree (BST). The function should accept a root node of a binary tree as its parameter and return True if the tree is a BST, otherwise False. In a binary search tree, for every node, the left child must have a value less than the node, and the right child must have a value greater than the node.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_bst_helper(node, lower_bound, upper_bound): if node is None: return True if node.val <= lower_bound or node.val >= upper_bound: return False return (is_bst_helper(node.left, lower_bound, node.val) and is_bst_helper(node.right, node.val, upper_bound)) def is_bst(root): Determine if the given binary tree is a binary search tree (BST). Args: root (TreeNode): The root node of the binary tree. Returns: bool: True if the binary tree is a BST, False otherwise. return is_bst_helper(root, float('-inf'), float('inf'))"},{"question":"Create a function that takes two positive integers A and B, and returns the total count of numbers between A and B (both inclusive) that are divisible by both 3 and 5, but not divisible by 7. How would you approach solving this problem?","solution":"def count_numbers(A, B): Returns the count of numbers between A and B (both inclusive) that are divisible by both 3 and 5, but not divisible by 7. count = 0 for num in range(A, B + 1): if num % 3 == 0 and num % 5 == 0 and num % 7 != 0: count += 1 return count"},{"question":"Create a function that takes two integers as parameters. The function should calculate the sum of all numbers from the first integer down to the second integer (inclusive). If the first integer is not greater than the second integer, the function should return an error.","solution":"def sum_from_first_to_second(first, second): Returns the sum of all numbers from first down to second (inclusive). If first is not greater than second, returns an error message. if first <= second: return \\"Error: First integer must be greater than the second integer.\\" total_sum = 0 for num in range(first, second - 1, -1): total_sum += num return total_sum"},{"question":"Create a function that takes two integers \`a\` and \`b\` as input and prints all numbers between \`a\` and \`b\` (inclusive) that are divisible by both 2 and 3.","solution":"def print_divisible_by_2_and_3(a, b): Prints all numbers between 'a' and 'b' (inclusive) that are divisible by both 2 and 3. for i in range(a, b + 1): if i % 2 == 0 and i % 3 == 0: print(i)"},{"question":"Create a function that takes a list of numbers and returns the sum of the numbers that appear only once in the list. For example, if the list is [1, 2, 2, 3, 4, 4, 5], the function should return 9 because 1 + 3 + 5 = 9.","solution":"def sum_of_unique_numbers(numbers): Returns the sum of numbers that appear only once in the list. Parameters: numbers (list): A list of numbers. Returns: int: The sum of numbers that appear only once. from collections import Counter # Count occurrences of each number number_counts = Counter(numbers) # Add up the numbers that appear only once unique_sum = sum(number for number, count in number_counts.items() if count == 1) return unique_sum"},{"question":"Create a function that accepts an array of numbers and returns the sum of the elements that are multiples of 3.","solution":"def sum_of_multiples_of_3(numbers): Returns the sum of elements in the list 'numbers' that are multiples of 3. :param numbers: List of integers :return: Sum of multiples of 3 return sum(number for number in numbers if number % 3 == 0)"},{"question":"Create a function that generates the first 'n' Fibonacci numbers. The function should be written in Python and should return a list containing the Fibonacci sequence up to the 'n'th number. The Fibonacci sequence is defined as follows: the first two numbers are 0 and 1, and each subsequent number is the sum of the two preceding ones (0, 1, 1, 2, 3, 5, 8, ...).","solution":"def generate_fibonacci(n): Generates a list of the first 'n' Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fibonacci = [0, 1] while len(fibonacci) < n: fibonacci.append(fibonacci[-1] + fibonacci[-2]) return fibonacci"},{"question":"Create a function that takes as input a list of integers and returns the second-largest (penultimate) number in the list. If the list does not have a second-largest number (because it's either empty or all elements are the same), the function should return \`None\`.","solution":"def second_largest(numbers): Returns the second-largest number in the list. If the list does not contain a second-largest number, returns None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Create a function that takes a list of numbers and an integer k. The function should return True if the sum of the first k elements is even and False if it's odd.","solution":"def is_sum_even(nums, k): Returns True if the sum of the first k elements in the list nums is even, otherwise False. :param nums: List of integers. :param k: Integer representing the number of elements to sum from the start of the list. :return: Boolean value indicating if the sum is even. if k > len(nums): return False # Alternatively, raise an error or handle as needed. sum_first_k = sum(nums[:k]) return sum_first_k % 2 == 0"},{"question":"Create a function that calculates the factorial of a given integer using a loop. The function should take an integer as input and return the factorial of that integer. If the integer is negative, the function should return an error message. Additionally, write the function in a way to handle large numbers efficiently.","solution":"def factorial(n): Returns the factorial of a given integer n. If n is negative, returns an error message. if n < 0: return \\"Error: Negative numbers do not have factorials.\\" if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes an array of integers and return the maximum number of unique integers from that array.","solution":"def max_unique_integers(arr): Returns the number of unique integers in the given array. return len(set(arr))"},{"question":"Create a function that reverse the bits in a byte. For example, if the byte is \`0b10101010\`, the function should return \`0b01010101\`. How can I do this in Python?","solution":"def reverse_bits(byte): Returns the byte with its bits reversed. reversed_byte = 0 for i in range(8): if byte & (1 << i): reversed_byte |= (1 << (7 - i)) return reversed_byte"},{"question":"Create a function that takes a string and returns the maximum frequency of any character in the string.","solution":"def max_char_frequency(s): Returns the maximum frequency of any character in the string s. if not s: return 0 frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 max_freq = max(frequency.values()) return max_freq"},{"question":"Create a function that converts a decimal number to its corresponding octal representation. The function should take an integer as input and return a string representing the octal number.","solution":"def decimal_to_octal(decimal_num): Converts a decimal number to its octal representation. Parameters: decimal_num (int): A decimal integer. Returns: str: The octal representation of the decimal number. if decimal_num == 0: return \\"0\\" is_negative = decimal_num < 0 decimal_num = abs(decimal_num) octal_num = \\"\\" while decimal_num > 0: octal_num = str(decimal_num % 8) + octal_num decimal_num //= 8 if is_negative: octal_num = \\"-\\" + octal_num return octal_num"},{"question":"Create a function that takes an array of integers and returns the maximum sum that can be obtained by forming non-consecutive subsets from the array. For example, given the array [1, 2, 3, 4], the maximum sum of a non-consecutive subset is 4+3 = 7 (choosing elements at indices 3 and 1). Write the function in Python.","solution":"def max_non_consecutive_sum(nums): Returns the maximum sum that can be obtained by forming non-consecutive subsets from the array. if len(nums) == 0: return 0 if len(nums) == 1: return nums[0] include = nums[0] exclude = 0 for i in range(1, len(nums)): new_exclude = max(include, exclude) include = exclude + nums[i] exclude = new_exclude return max(include, exclude)"},{"question":"Create a function that takes a list of integers as an input and returns the first duplicate number found in the list. If there are no duplicates, return -1. The function should ideally have a time complexity of O(n) and a space complexity of O(1).","solution":"def first_duplicate(nums): Returns the first duplicate number found in the list. If no duplicates are found, returns -1. num_set = set() for num in nums: if num in num_set: return num num_set.add(num) return -1"},{"question":"Create a function that takes an array and a target integer. The function should return the indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution. You may not use the same element twice.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target. :param nums: List of integers :param target: Target integer :return: A tuple containing the indices of the two numbers num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return (num_map[complement], i) num_map[num] = i"},{"question":"Create a function that can be used in a Python program to find the two largest numbers in an array. The function should return a tuple containing the two largest numbers in descending order.","solution":"def find_two_largest_numbers(arr): Returns a tuple containing the two largest numbers in the array in descending order. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements\\") max1 = max2 = float('-inf') for num in arr: if num > max1: max1, max2 = num, max1 elif num > max2: max2 = num return (max1, max2)"},{"question":"Create a function that accepts a list of integers and returns the list sorted in descending order using Python's built-in sort functionalities.","solution":"def sort_descending(arr): Returns the input list sorted in descending order. Parameters: arr (list of int): List of integers to sort. Returns: list of int: Sorted list in descending order. return sorted(arr, reverse=True)"},{"question":"Create a function that takes a list named \`data\` and adds a new element 'X' to the end of the list. Assign the resultant list to the variable named \`new_data\`. Print \`new_data\`.","solution":"def add_element(data): Adds the element 'X' to the end of the list and returns the new list. new_data = data + ['X'] print(new_data) return new_data"},{"question":"Create a function that takes an array of integers and an integer k as input, and return the k most frequent integers in the array.","solution":"from collections import Counter def k_most_frequent(nums, k): Returns the k most frequent integers in the array. Params: nums (list of int): List of integers. k (int): The number of most frequent integers to return. Returns: list of int: The list of the k most frequent integers. if len(nums) == 0 or k <= 0: return [] count = Counter(nums) return [item for item, _ in count.most_common(k)]"},{"question":"Create a function that takes two integer parameters \`a\` and \`b\`, and returns the result of raising \`a\` to the power of \`b\`. You are not allowed to use the built-in exponentiation operator (\`**\` or \`pow()\` function). Instead, you must implement the exponentiation yourself using a loop. Additionally, ensure that your function handles negative exponents correctly.","solution":"def power(a, b): Returns a raised to the power of b. Handles negative exponentiation as well. if b == 0: return 1 result = 1 abs_b = abs(b) for _ in range(abs_b): result *= a if b < 0: return 1 / result return result"},{"question":"Create a function that prints the numbers from 1 to n, replacing numbers that are multiples of 3 with \\"Fizz\\", multiples of 5 with \\"Buzz\\", and multiples of both 3 and 5 with \\"FizzBuzz\\". The function should take an integer n and return a list of the results.","solution":"def fizz_buzz(n): Returns a list of numbers from 1 to n where: - Multiples of 3 are replaced with \\"Fizz\\" - Multiples of 5 are replaced with \\"Buzz\\" - Multiples of both 3 and 5 are replaced with \\"FizzBuzz\\" result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Create a function that takes a string as input and returns the string in reverse order. The function should handle both uppercase and lowercase letters, and should preserve all non-letter characters in their original positions.","solution":"def reverse_string_preserve_nonletters(s): Returns the input string in reverse order with non-letter characters in their original positions. Parameters: s (str): The input string. Returns: str: The reversed string with non-letter characters preserved in original positions. # Extract the positions and values of non-letter characters non_letters = [(i, c) for i, c in enumerate(s) if not c.isalpha()] # Create a filtered list with only alphabetic characters letters = [c for c in s if c.isalpha()] # Reverse the list of letters letters.reverse() # Reconstruct the string with non-letter characters in their original positions result = list(letters) for i, c in non_letters: result.insert(i, c) return ''.join(result)"},{"question":"Create a function that takes a Python list as an input and returns the list with all non-alphanumeric characters removed. Non-alphanumeric characters include any character that is not a letter or a number.","solution":"def remove_non_alphanumeric(lst): Removes all non-alphanumeric characters from a given Python list. Parameters: lst (list): A list of strings. Returns: list: A new list with non-alphanumeric characters removed from its elements. return [''.join(char for char in item if char.isalnum()) for item in lst]"},{"question":"Create a function that takes a list of dictionaries, where each dictionary represents a book with keys 'title', 'author', and 'published_year'. The function should return a new list of dictionaries with the same structure but with the 'published_year' updated to the current year if it is older than 10 years.","solution":"from datetime import datetime def update_published_year(books): Takes a list of dictionaries representing books and updates the 'published_year' to the current year if it is older than 10 years. Args: - books (list of dict): List of dictionaries where each dictionary has keys 'title', 'author', and 'published_year'. Returns: - list of dict: Updated list of dictionaries. current_year = datetime.now().year updated_books = [] for book in books: if book['published_year'] < current_year - 10: book['published_year'] = current_year updated_books.append(book) return updated_books"},{"question":"Create a function that takes two integer parameters (start and end) and a string as a parameter (direction). If the direction is \\"forward\\", print all the numbers in the sequence from start to end. If the direction is \\"reverse\\", print all the numbers in the sequence from end to start. If the direction is neither \\"forward\\" nor \\"reverse\\", return \\"Invalid direction\\". The function should be implemented in Python.","solution":"def print_sequence(start, end, direction): Prints all the numbers in the sequence from start to end if direction is 'forward', or from end to start if direction is 'reverse'. Returns \\"Invalid direction\\" for other directions. if direction == 'forward': return list(range(start, end + 1)) elif direction == 'reverse': return list(range(end, start - 1, -1)) else: return \\"Invalid direction\\""},{"question":"Create a function that generates a sequence of Fibonacci numbers up to a given limit. The function should take an integer \`limit\` as its argument and return a list of Fibonacci numbers that are less than or equal to \`limit\`.","solution":"def fibonacci_sequence(limit): Returns a list of Fibonacci numbers up to a given limit. if limit < 0: return [] fib_sequence = [0, 1] while True: next_fib = fib_sequence[-1] + fib_sequence[-2] if next_fib > limit: break fib_sequence.append(next_fib) return fib_sequence if limit > 0 else [0]"},{"question":"Create a function that takes an integer as an input and returns a list of integers from 1 to the given number, inclusive. The list should be sorted in descending order.","solution":"def generate_descending_list(n): Generate a list of integers from 1 to n (inclusive) sorted in descending order. Parameters: n (int): The upper limit of the list. Returns: List[int]: A list of integers from 1 to n in descending order. return list(range(n, 0, -1))"},{"question":"Create a function that takes a string and rotates it a certain number of times. For example, if the input string is \\"hello\\" and the rotation number is 2, the function should return \\"llohe\\" as rotating \\"hello\\" twice means moving the first two letters (\\"he\\") to the end.","solution":"def rotate_string(s, n): Rotates the string s to the left by n positions. if not s: return s n = n % len(s) # Handle cases where n is larger than the length of s return s[n:] + s[:n]"},{"question":"Create a function that takes a string and uppercases the first letter of each sentence. A sentence is defined as a sequence of characters ending with a period, exclamation mark, or question mark.","solution":"def capitalize_sentences(text): Uppercases the first letter of each sentence in the given text. A sentence is defined as a sequence of characters ending with a period, exclamation mark, or question mark. sentences = [] sentence_start = True for char in text: if char in '.!?': sentence_start = True sentences.append(char) elif sentence_start and char.isalpha(): sentences.append(char.upper()) sentence_start = False else: sentences.append(char) return ''.join(sentences)"},{"question":"Create a function that takes a string of letters as input and returns the count of each vowel in the string. The function should be case-insensitive and should count the vowels \\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\".","solution":"def count_vowels(s): Returns a dictionary with the count of each vowel in the given string. The function is case-insensitive and counts the vowels \\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\". vowels = \\"aeiou\\" s = s.lower() vowel_count = {v: 0 for v in vowels} for char in s: if char in vowels: vowel_count[char] += 1 return vowel_count"},{"question":"Create a function that accepts two integers as parameters and returns their sum. Also, write a main function that tests the sum function with a few different pairs of integers and prints out the result of each test.","solution":"def sum_integers(a, b): Returns the sum of two integers a and b. return a + b def main(): test_cases = [ (1, 2), (-1, -2), (0, 0), (-1, 1), (100, 200) ] for a, b in test_cases: print(f\\"sum_integers({a}, {b}) = {sum_integers(a, b)}\\") if __name__ == \\"__main__\\": main()"},{"question":"Create a function that takes a string as an input and returns a string that is the reverse of the input string but only includes consonants. Reversing the string means that the last character becomes the first, and so on. Consonants are any alphabetical non-vowel characters. Your code should ignore case sensitivity and treat all uppercase and lowercase letters the same.","solution":"def reverse_consonants(s): Returns a string that is the reverse of the input string but only includes consonants. Consonants are any alphabetical non-vowel characters. vowels = 'aeiouAEIOU' consonants = [char for char in s if char.isalpha() and char not in vowels] return ''.join(consonants[::-1]) # Example usage: # reverse_consonants(\\"example\\") -> should return \\"lpmx\\""},{"question":"Create a function that takes in a DNA sequence as a parameter and returns the complementary strand of DNA.","solution":"def complementary_dna(dna_sequence): Returns the complementary DNA strand for the given DNA sequence. A -> T T -> A C -> G G -> C complement_map = { 'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C' } complementary_strand = ''.join(complement_map[base] for base in dna_sequence) return complementary_strand"},{"question":"Create a function that can take in a string and return a list of the words in the string, but sorted in descending order of their frequency.","solution":"from collections import Counter def sort_words_by_frequency(s): Takes in a string and returns a list of the words in the string, sorted in descending order of their frequency. Args: s (str): The input string. Returns: list: A list of words sorted by frequency in descending order. words = s.split() word_counts = Counter(words) sorted_words = sorted(word_counts.keys(), key=lambda word: word_counts[word], reverse=True) return sorted_words"},{"question":"Create a function that takes in two integers as arguments and returns a list of the common elements in ascending order. If there are no common elements, return an empty list.","solution":"def common_elements(a, b): Returns a list of the common elements in ascending order from the integers a and b. Returns an empty list if there are no common elements. # Convert the integers to sets of their digits set_a = set(str(a)) set_b = set(str(b)) # Find the intersection of both sets common_set = set_a.intersection(set_b) # Convert the set to a sorted list of integers common_list = sorted([int(c) for c in common_set]) return common_list"},{"question":"Create a function that takes in a string and a substring, and returns a list of all the starting indices where the substring occurs in the string. If the substring is not found, return an empty list. If the substring is empty, return an empty list as well. What should your function do if the input arguments are not in the correct type?","solution":"def find_substring_indices(s, sub): Returns a list of starting indices where the substring 'sub' occurs in the string 's'. If the substring is not found or if the substring is empty, returns an empty list. If the input arguments are not strings, raises a TypeError. :param s: The string to search within. :param sub: The substring to search for. :return: A list of starting indices where 'sub' is found in 's'. if not isinstance(s, str) or not isinstance(sub, str): raise TypeError(\\"Both arguments must be strings\\") if not sub: return [] indices = [] sub_len = len(sub) for i in range(len(s) - sub_len + 1): if s[i:i+sub_len] == sub: indices.append(i) return indices"},{"question":"Create a function that takes a list of integers and an index as input and returns the value at that index multiplied by 2.","solution":"def multiply_index_value(lst, index): Returns the value at the given index in the list multiplied by 2. Parameters: lst (list): A list of integers. index (int): The index of the element to be multiplied. Returns: int: The value at the specified index multiplied by 2. if index < 0 or index >= len(lst): raise IndexError(\\"Index is out of bounds\\") return lst[index] * 2"},{"question":"Create a function that takes in three parameters: a list, an index, and a value. The function should insert the given value at the specified index in the list and update the list in-place, without creating a new list. The function should return the updated list.","solution":"def insert_value_at_index(lst, index, value): Inserts the given value at the specified index in the list. Parameters: lst (List): The list in which the value is to be inserted. index (int): The position at which the value needs to be inserted. value: The value to be inserted in the list. Returns: List: The updated list with the value inserted at the specified position. lst.insert(index, value) return lst"},{"question":"Create a function that takes a list of integers that can either be sorted or unsorted. The function should return the list in sorted order using the bubble sort algorithm. Bubble sort is a simple comparison-based algorithm which repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a function that takes a string as an input. The function should return a dictionary with each character in the string as the key and its corresponding ASCII value as the value. If the string contains duplicate characters, the function should return the ASCII value of the first occurrence of that character. If the string is empty or null, the function should return an empty dictionary.","solution":"def char_to_ascii(string): Returns dictionary with each character in the string as the key and its corresponding ASCII value as the value. If the string contains duplicate characters, the function returns the ASCII value of the first occurrence of that character. Parameters: string (str): The input string. Returns: dict: A dictionary with characters and their corresponding ASCII values. if not string: return {} char_dict = {} for char in string: if char not in char_dict: char_dict[char] = ord(char) return char_dict"},{"question":"Create a function that takes a string as input and returns a list of words in the string. The function should ignore any non-alphabetical characters and treat them as word delimiters.","solution":"import re def extract_words(input_string): Takes a string as input and returns a list of words in the string. Non-alphabetical characters are treated as word delimiters. words = re.findall(r'[a-zA-Z]+', input_string) return words"},{"question":"Create a function that takes a dictionary representing a tree with nodes as keys and lists of child nodes as values. Write a function that traverses the tree using breadth-first search (BFS) and prints the nodes at each level of the tree.","solution":"from collections import deque, defaultdict def bfs_tree_levels(tree): Performs a breadth-first search on the given tree and prints nodes at each level. Args: tree (dict): A dictionary representing a tree with nodes as keys and lists of child nodes as values. if not tree: return # Find the root node (it should not appear in any of the values lists) all_nodes = set(tree.keys()) child_nodes = {child for children in tree.values() for child in children} root = (all_nodes - child_nodes).pop() queue = deque([(root, 0)]) current_level = -1 level_dict = defaultdict(list) while queue: node, level = queue.popleft() if level != current_level: current_level = level level_dict[level].append(node) for child in tree[node]: queue.append((child, level + 1)) # Print the nodes at each level for level in sorted(level_dict.keys()): print(\\"Level\\", level, \\":\\", level_dict[level])"},{"question":"Create a function that checks if a string contains any repeated substring of length 3 or more.","solution":"def contains_repeated_substring(s): Checks if the given string 's' contains any repeated substring of length 3 or more. n = len(s) seen_substrings = set() for length in range(3, n // 2 + 1): for start in range(n - length + 1): substring = s[start:start + length] if substring in seen_substrings: return True seen_substrings.add(substring) return False"},{"question":"Create a function that takes in an integer n and returns the nth Fibonacci number (starting from n = 0). The function should have error handling for non-integer inputs and negative integers.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Parameters: n (int): The position in the Fibonacci sequence. Returns: int: The nth Fibonacci number. Raises: ValueError: If n is not a non-negative integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that can print numbers from 1 to n.","solution":"def print_numbers(n): Prints numbers from 1 to n. return \\" \\".join(str(i) for i in range(1, n + 1))"},{"question":"Create a function that generates a random password of a given length. That length will be an input parameter to the function.","solution":"import random import string def generate_random_password(length): Generates a random password of a specified length. :param length: The length of the password to generate. :return: A randomly generated password. if length < 1: raise ValueError(\\"Password length must be at least 1\\") characters = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(characters) for _ in range(length)) return password"},{"question":"Create a function that takes an array of integers and an integer n, and returns the nth smallest element in the array. If n is greater than the length of the array, return None.","solution":"def nth_smallest_element(arr, n): Returns the nth smallest element in the array, or None if n is greater than the length of the array. :param arr: List of integers :param n: The position (1-based) of the smallest element to return :return: The nth smallest element or None if n is out of bounds if n > len(arr) or n <= 0: return None sorted_arr = sorted(arr) return sorted_arr[n - 1]"},{"question":"Create a function that takes an integer \`n\` as input and returns a list of length \`n\`. The list should contain numbers from 0 to \`n-1\` in ascending order.","solution":"def create_list(n): Returns a list of length n containing numbers from 0 to n-1 in ascending order. return list(range(n))"},{"question":"Create a function that checks if a string s is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization. Provide an example solution in Python.","solution":"import re def is_palindrome(s): Checks if the provided string \`s\` is a palindrome, ignoring spaces, punctuation, and capitalization. # Remove all non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Compare the cleaned string with its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that generates a list of Fibonacci numbers up to a given number of terms.","solution":"def fibonacci(n): Generates a list of Fibonacci numbers up to n terms. Parameters: n (int): The number of terms in the Fibonacci sequence to generate. Returns: list: A list containing the first n terms of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Create a function that accepts an array of strings as input and returns a new array containing the lengths of the strings.","solution":"def string_lengths(strings): Returns a list containing the lengths of the input strings. :param strings: List of strings :return: List of integers representing the lengths of the strings return [len(string) for string in strings]"},{"question":"Create a function that takes a single integer as an input and returns the sum of the numbers from 1 to that integer. What should the function be named and how should its parameters and return type be defined?","solution":"def sum_of_numbers(n: int) -> int: Returns the sum of the numbers from 1 to n. Parameters: n (int): The integer up to which the sum is calculated. Returns: int: Sum of numbers from 1 to n. return sum(range(1, n + 1))"},{"question":"Create a function that takes a list of unique integers and returns the first integer that appears an odd number of times in the list. If no such integer exists, the function should return -1.","solution":"def first_odd_occurrence(arr): Returns the first integer that appears an odd number of times in the list. If no such integer exists, the function returns -1. count = {} for num in arr: count[num] = count.get(num, 0) + 1 for num in arr: if count[num] % 2 != 0: return num return -1"},{"question":"Create a function that takes an integer array as input, modifies it by squaring each element, and returns the modified array. The function should handle both positive and negative integers.","solution":"def square_elements(arr): Takes an integer array as input, modifies it by squaring each element, and returns the modified array. return [x ** 2 for x in arr]"},{"question":"Create a function that accepts a string and returns the integer equivalent of that string. If the string is not a valid integer, the function should return None. Additionally, the function should be able to handle both positive and negative integers.","solution":"def to_integer(s): Converts a string to an integer. If the string is not a valid integer, returns None. Parameters: s (str): The input string. Returns: int or None: The integer equivalent if the string is a valid integer, otherwise None. try: return int(s) except ValueError: return None"},{"question":"Create a function that takes a string and an integer as parameters and returns a hash map where the key is the character from the string and the value is the number of occurrences of that character, but only count the occurrences of characters whose ASCII value is greater than the given integer.","solution":"def char_count_with_min_ascii(string, min_ascii): Returns a hash map where the key is the character from the string and the value is the number of occurrences of that character, but only count the occurrences of characters whose ASCII value is greater than the given integer. :param string: input string :param min_ascii: minimum ASCII value :return: dictionary with character counts count_dict = {} for char in string: if ord(char) > min_ascii: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Create a function that takes two integers as input and returns their sum. However, if the sum is between 10 and 20 (inclusive), it should return a message \\"Special Sum\\". Otherwise, it should return the sum.","solution":"def special_sum(a, b): Returns the sum of a and b. If the sum is between 10 and 20 (inclusive), returns \\"Special Sum\\" instead. result = a + b if 10 <= result <= 20: return \\"Special Sum\\" return result"},{"question":"Create a function that logs all odd numbers between two given numbers (inclusive).","solution":"def log_odd_numbers(start, end): Logs all odd numbers between start and end (inclusive). Returns a list of those odd numbers. return [num for num in range(start, end + 1) if num % 2 != 0]"},{"question":"Create a function that accepts a Python dictionary and returns its reversal (swap keys with their values). Note that the original dictionary should not be modified. Also, the function should handle dictionaries with duplicate values efficiently.","solution":"def reverse_dict(d): Returns a dictionary where keys and values are swapped. If there are duplicate values, they are overwritten in the order they appear in the original dictionary. reversed_dict = {} for key, value in d.items(): reversed_dict[value] = key return reversed_dict"},{"question":"Create a function that takes two integers as input and returns the sum of all integers between them (inclusive). Please also include a brief explanation of your code.","solution":"def sum_integers_between(a, b): Returns the sum of all integers between a and b (inclusive). If a is greater than b, it swaps them to correctly calculate the sum. if a > b: a, b = b, a return sum(range(a, b + 1))"},{"question":"Create a function that can calculate the sum of the squares of numbers in a list without return any value directly. Instead, the function should print the sum to the console and return None. The function should also handle a list with None values and should ignore them when calculating the sum.","solution":"def sum_of_squares(numbers): Prints the sum of the squares of numbers in a list and returns None. Ignores None values in the list. if not numbers: print(0) return None total = sum(x**2 for x in numbers if x is not None) print(total) return None"},{"question":"Create a function that formats a given date string from \\"MM/DD/YYYY\\" format to \\"YYYY-MM-DD\\" format using Python. Additionally, the function should handle date validation ensuring that the string follows a valid date format.","solution":"from datetime import datetime def format_date(date_str): Convert date string from \\"MM/DD/YYYY\\" format to \\"YYYY-MM-DD\\" format. Args: date_str (str): date string in \\"MM/DD/YYYY\\" format Returns: str: date string in \\"YYYY-MM-DD\\" format if valid, otherwise raises ValueError try: # Parse the date string date_obj = datetime.strptime(date_str, '%m/%d/%Y') # Convert to new format return date_obj.strftime('%Y-%m-%d') except ValueError: raise ValueError(\\"Invalid date format or invalid date\\")"},{"question":"Create a function that generates a random string of lowercase letters of a specified length. You should name your function \`generateRandomString\`. The function should take one parameter: \`length\`, which indicates the length of the random string to be generated.","solution":"import random import string def generateRandomString(length): Generates a random string of lowercase letters of the specified length. Parameters: length (int): The length of the random string to be generated. Returns: str: A random string of lowercase letters with the specified length. return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))"},{"question":"Create a function that determines if two strings are isomorphic. Two strings are isomorphic if the characters in the first string can be replaced to get the second string. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself. For example, 'egg' and 'add' are isomorphic because 'e' maps to 'a' and 'g' maps to 'd'.","solution":"def is_isomorphic(s, t): Determines if two strings s and t are isomorphic. if len(s) != len(t): return False map_st = {} map_ts = {} for char_s, char_t in zip(s, t): if (char_s in map_st and map_st[char_s] != char_t) or (char_t in map_ts and map_ts[char_t] != char_s): return False map_st[char_s] = char_t map_ts[char_t] = char_s return True"},{"question":"Create a function that checks if a given list contains all unique elements.","solution":"def has_unique_elements(lst): Returns True if lst contains all unique elements, otherwise False. return len(lst) == len(set(lst))"},{"question":"Create a function that generates all the possible combinations of a list while maintaining the order. The function should return a list of these combinations. You can assume that the list is always 2D, and it's items are strings.","solution":"from itertools import product def generate_combinations(lists): Generates all possible combinations of given list of lists while maintaining the order. :param lists: A 2D list where each sub-list contains strings :return: List of all possible combinations maintaining the order return [' '.join(comb) for comb in product(*lists)]"},{"question":"Create a function that takes a string and a character as input. The function should return a list of all indices where the character appears in the string. If the character does not appear, return an empty list.","solution":"def find_char_indices(s, char): Returns a list of all indices where the character \`char\` appears in the string \`s\`. Parameters: s (str): The string to search within. char (str): The character to search for. Returns: List[int]: A list of indices where \`char\` appears in \`s\`. return [i for i, c in enumerate(s) if c == char]"},{"question":"Create a function that takes a string as an input and returns its FBI code, where the code is formed by each character's ASCII value.","solution":"def convert_to_fbi_code(text): Converts a given string into its FBI code where the code is formed by each character's ASCII value. Parameters: text (str): The input string to be converted. Returns: str: A string containing the ASCII values of each character in the input string separated by hyphens. if not text: return '' ascii_values = [str(ord(char)) for char in text] fbi_code = '-'.join(ascii_values) return fbi_code"},{"question":"Create a function that checks if a number is part of the Fibonacci sequence. The function should return \`True\` if the number is in the Fibonacci sequence, and \`False\` otherwise. The function should handle large numbers efficiently.","solution":"def is_fibonacci(n): Checks if the given number n is in the Fibonacci sequence. Returns True if n is part of the Fibonacci sequence, otherwise False. if n < 0: return False a, b = 0, 1 while a <= n: if a == n: return True a, b = b, a + b return False"},{"question":"Create a function that takes a list of integers and returns a new list where each element is the sum of consecutive pairs of integers from the original list. For example, if the input list is [1, 2, 3, 4], the function should return [3, 5, 7] since 1+2=3, 2+3=5, and 3+4=7.","solution":"def sum_of_consecutive_pairs(lst): Returns a list where each element is the sum of consecutive pairs of integers from the original list. return [lst[i] + lst[i + 1] for i in range(len(lst) - 1)]"},{"question":"Create a function that generates a list of random numbers between 1 and 100 and returns the list. The function should take a single parameter \`n\`, which indicates the number of random numbers to generate.","solution":"import random def generate_random_numbers(n): Generates a list of n random numbers between 1 and 100. :param n: The number of random numbers to generate :type n: int :return: List of random numbers :rtype: list if n < 0: raise ValueError(\\"The number of random numbers to generate cannot be negative.\\") return [random.randint(1, 100) for _ in range(n)]"},{"question":"Create a function that accepts a string as input and returns a new string where each character is shifted 2 spaces in the alphabet. For example, 'a' becomes 'c', 'z' becomes 'b'. Ensure that your function handles both uppercase and lowercase letters while keeping non-alphabet characters unchanged.","solution":"def shift_alpha(input_string): Shifts each alphabet character in the input string by 2 positions in the alphabet. 'a' becomes 'c', 'z' becomes 'b', etc. Non-alphabet characters are unchanged. def shift_char(c): if 'a' <= c <= 'z': return chr(((ord(c) - ord('a') + 2) % 26) + ord('a')) elif 'A' <= c <= 'Z': return chr(((ord(c) - ord('A') + 2) % 26) + ord('A')) else: return c return ''.join(shift_char(c) for c in input_string)"},{"question":"Create a function that generates the first N Fibonacci numbers and returns them as a list. The function should be named \`generate_fibonacci\`. It should take a single parameter \`N\`, which is the number of Fibonacci numbers to generate.","solution":"def generate_fibonacci(N): Generates the first N Fibonacci numbers and returns them as a list. Parameters: N (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first N Fibonacci numbers. if N <= 0: return [] elif N == 1: return [0] fibonacci_sequence = [0, 1] for i in range(2, N): next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_number) return fibonacci_sequence"},{"question":"Create a function that takes a list of dictionaries and an integer as arguments. The function should return a new list consisting of only those dictionaries where the value of a specified key is greater than the given integer.","solution":"def filter_dicts_by_key_value(dicts, key, threshold): Filters a list of dictionaries to include only those where the value associated with the given key is greater than the threshold. Parameters: dicts (list): A list of dictionaries. key (str): The key to check values for. threshold (int): The threshold value. Returns: list: A list of dictionaries that meet the condition. return [d for d in dicts if d.get(key, float('-inf')) > threshold]"},{"question":"Create a function that finds the common elements between two lists and returns them as a new list without duplicates.","solution":"def common_elements(list1, list2): Finds the common elements between two lists and returns them as a new list without duplicates. return list(set(list1) & set(list2))"},{"question":"Create a function that takes two numbers as input. This function should return their difference (subtraction result) but only if the first number is greater than the second number, otherwise, it should return None.","solution":"def conditional_subtract(a, b): Returns the difference of a and b if a is greater than b. If a is not greater than b, return None. if a > b: return a - b else: return None"},{"question":"Create a function that accepts an array of numbers and a number \`k\`. The function should calculate and return the sum of all numbers in the array that are greater than \`k\`. If no numbers are greater than \`k\`, the function should return \`0\`.","solution":"def sum_greater_than_k(numbers, k): Returns the sum of all numbers in the array that are greater than k. Parameters: numbers (list of int/float): The list of numbers to analyze. k (int/float): The threshold number. Returns: int/float: The sum of all numbers in the array that are greater than k. return sum(num for num in numbers if num > k)"},{"question":"Create a function that takes a list of integers as input and returns a list of the squares of all the numbers in the input list, sorted in ascending order. For example, if the function is given the input \`[3, 2, -1, 4]\`, it should return \`[-1, 2, 9, 16]\`.","solution":"def sorted_squares(nums): Returns a list of the squares of all the numbers in nums, sorted in ascending order. return sorted([x**2 for x in nums])"},{"question":"Create a function that takes a string as input and returns a new string with all duplicate characters removed, maintaining the original order of characters. Consider both lowercase and uppercase characters to be distinct.","solution":"def remove_duplicates(s): Returns a new string with all duplicate characters removed, maintaining the original order of characters. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that takes a list of integers as input and returns the sum of all integers in the list. You are not allowed to use built-in functions like sum() or any other function that directly calculates the sum. You can only use a loop to iterate through the list and add the integers to a variable.","solution":"def sum_of_integers(lst): Returns the sum of all integers in the input list. Parameters: lst (list): The list of integers. Returns: int: The sum of all integers in the list. total = 0 for num in lst: total += num return total"},{"question":"Create a function that takes a single string as input and returns a new string with the first and last character removed. If the string has less than 3 characters, return None.","solution":"def remove_first_last_char(s): Removes the first and last characters from the input string. If the string has less than 3 characters, return None. if len(s) < 3: return None return s[1:-1]"},{"question":"Create a function that takes a string as input and returns the string with all the vowels replaced by the vowel that is two places ahead of it in the alphabet. For example, 'a' becomes 'c', 'e' becomes 'g', etc. The function should handle both uppercase and lowercase vowels, and it should maintain the case of the replaced vowel. If the string does not contain any vowels, the function should return the original string. The function should also handle undefined and null inputs by returning the original string.","solution":"def replace_vowels(string): Replace vowels in the input string with the vowel that is two places ahead in the alphabet, maintaining the case of the replaced vowel. # Return original string if input is None or not a string if string is None or not isinstance(string, str): return string # Mapping of vowels to two letters ahead vowel_map = { 'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W' } result = [] for char in string: if char in vowel_map: result.append(vowel_map[char]) else: result.append(char) return ''.join(result)"},{"question":"Create a function that accepts two numbers and returns their quotient.","solution":"def divide(a, b): Returns the quotient of a divided by b. Raises ValueError if b is zero. if b == 0: raise ValueError(\\"Cannot divide by zero.\\") return a / b"},{"question":"Create a function that takes two arguments, \`a\` and \`b\`, and returns the greater of the two. If they are equal, return a message saying \\"Equal\\".","solution":"def greater_or_equal(a, b): Returns the greater of a and b. If they are equal, returns \\"Equal\\". if a > b: return a elif b > a: return b else: return \\"Equal\\""},{"question":"Create a function that takes a dictionary with keys as fruit names and values as their quantities. The function should return a list of fruit names that have a quantity greater than 5. For example, if the input dictionary is \`{'apple': 3, 'banana': 6, 'orange': 4, 'grapes': 7}\`, the function should return \`['banana', 'grapes']\`.","solution":"def fruits_with_quantity_greater_than_five(fruit_dict): Returns a list of fruit names that have a quantity greater than 5. Parameters: fruit_dict (dict): A dictionary with fruit names as keys and their quantities as values. Returns: list: A list of fruit names with quantities greater than 5. return [fruit for fruit, quantity in fruit_dict.items() if quantity > 5]"},{"question":"Create a function that converts a list of tuples into a dictionary. Each tuple in the list contains two elements. The first element of each tuple will be the key in the dictionary, and the second element will be the value. If there are duplicate keys, the corresponding values should be concatenated into a list. If a key does not exist in the dictionary, it should be added with the provided value.","solution":"def tuples_to_dict(tuple_list): Convert a list of tuples into a dictionary. If a key occurs more than once, the values are concatenated into a list. result_dict = {} for key, value in tuple_list: if key in result_dict: if isinstance(result_dict[key], list): result_dict[key].append(value) else: result_dict[key] = [result_dict[key], value] else: result_dict[key] = value return result_dict"},{"question":"Create a function that takes in a string of text as an argument and returns the number of words in the string. Assume words are separated by spaces.","solution":"def count_words(text): Returns the number of words in the string 'text'. Words are assumed to be separated by spaces. words = text.split() return len(words)"},{"question":"Create a function that takes a string and a substring as input. The function should return the index of the first occurrence of the substring in the string. If the substring is not found, the function should return -1.","solution":"def find_substring(s, sub): Returns the index of the first occurrence of the substring 'sub' in the string 's'. If the substring is not found, returns -1. return s.find(sub)"},{"question":"Create a function that takes a string as input and prints each word in the string separated by a dash (-).","solution":"def dash_separated_words(s): Returns a string with each word in the input string separated by a dash. words = s.split() return '-'.join(words)"},{"question":"Create a function that takes a list of ISBNs and returns a new list containing the ISBNs sorted by their length in ascending order. If two ISBNs have the same length, maintain their original order in the list.","solution":"def sort_isbns_by_length(isbns): Sorts a list of ISBNs by their length in ascending order. If two ISBNs have the same length, maintains their original order. return sorted(isbns, key=len)"},{"question":"Create a function that takes a list of integers and returns a new list of all the prime numbers in the input list. The order of the prime numbers in the output list should be the same as their order in the input list.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def extract_primes(numbers): Given a list of integers, return a new list of the prime numbers in the input list. return [num for num in numbers if is_prime(num)]"},{"question":"Create a function that takes a string representing an array of numbers separated by commas and returns the sum of these numbers.","solution":"def sum_of_numbers(number_string): Takes a string representing an array of numbers separated by commas and returns the sum of these numbers. if not number_string: return 0 numbers = map(float, number_string.split(',')) return sum(numbers)"},{"question":"Create a function that takes an integer as an input and returns the sum of all the even numbers between 1 and that integer (inclusive). Additionally, for each even number, print the square root of the even number.","solution":"import math def sum_of_even_numbers_and_print_sqrt(n): Returns the sum of all the even numbers between 1 and n (inclusive). Prints the square root of each even number. :param n: Integer up to which the sum and square roots are computed. sum_even = 0 for i in range(2, n+1, 2): print(math.sqrt(i)) sum_even += i return sum_even"},{"question":"Create a function that takes an integer and a divisor as input and checks if the number is divisible by the divisor. If the number is divisible, print that the number is divisible by the divisor. If the number is not divisible, print that the number is not divisible by the divisor.","solution":"def check_divisibility(number, divisor): Checks if the number is divisible by the divisor and prints a message accordingly. Args: number (int): The number to be checked. divisor (int): The divisor to check against. if number % divisor == 0: print(f\\"The number {number} is divisible by {divisor}.\\") else: print(f\\"The number {number} is not divisible by {divisor}.\\")"},{"question":"Create a function that takes a number as input and returns a string indicating whether the number is \\"Even\\", \\"Odd\\", or \\"Prime\\". If the number is prime, also indicate whether it is a \\"Composite Prime\\" or a \\"Single Prime\\". A \\"Composite Prime\\" is a number that is a prime and also has divisors other than 1 and itself (i.e., it's a prime but not a small prime like 2, 3, or 5). A \\"Single Prime\\" is a small prime number (2, 3, or 5). For instance, 2, 3, and 5 are Single Primes, and any prime greater than 5 is a Composite Prime.","solution":"def is_prime(num): if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def classify_number(num): if num % 2 == 0: if is_prime(num): return \\"Single Prime\\" if num in [2,3,5] else \\"Even Composite Prime\\" return \\"Even\\" else: if is_prime(num): return \\"Single Prime\\" if num in [2,3,5] else \\"Composite Prime\\" return \\"Odd\\""},{"question":"Create a function that takes a sentence and returns it as a pig latin sentence.","solution":"def to_pig_latin(sentence): Convert a sentence to pig latin. Pig Latin translation involves moving the first letter of each word to the end, then adding \\"ay\\" to the end of each word. def convert_word(word): return word[1:] + word[0] + 'ay' words = sentence.split() pig_latin_words = [convert_word(word) for word in words] return ' '.join(pig_latin_words)"},{"question":"Create a function that takes a string and returns the number of times it contains the substring \\"hello\\".","solution":"def count_hello(s): Returns the number of times the substring 'hello' appears in the string s. return s.count('hello')"},{"question":"Create a function that accepts a string and a character as parameters and returns the number of occurrences of that character in the string.","solution":"def count_occurrences(s, char): Returns the number of occurrences of 'char' in the string 's'. Parameters: s (str): The string in which to count occurrences. char (str): The character to count in the string. Returns: int: The number of occurrences of 'char' in 's'. return s.count(char)"},{"question":"Create a function that reads a string and returns the count of each character in the string. (For the purpose of this problem, consider spaces and punctuation as valid characters.)","solution":"def count_characters(s): Returns a dictionary with the count of each character in the input string. :param s: A string :return: A dictionary with characters as keys and their counts as values char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Create a function that counts the number of occurrences of a target number in a given list.","solution":"def count_occurrences(lst, target): Counts the number of occurrences of a target number in a given list. Parameters: lst (list): The list in which to count occurrences. target: The number to count in the list. Returns: int: The number of occurrences of the target number in the list. return lst.count(target)"},{"question":"Create a function that takes a list as input and returns a new list with all elements doubled.","solution":"def double_elements(input_list): Takes a list as input and returns a new list with all elements doubled. :param input_list: List of numerical values :return: List with all elements doubled return [x * 2 for x in input_list]"},{"question":"Create a function that determines if a given year is a leap year or not. A leap year is exactly divisible by 4 except for end-of-century years, which must be divisible by 400. This means that the year 2000 was a leap year, although 1900 was not.","solution":"def is_leap_year(year): Determine if a given year is a leap year. A leap year is exactly divisible by 4 except for end-of-century years, which must be divisible by 400. if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True else: return False else: return True else: return False"},{"question":"Create a function that accepts a dictionary as an argument and returns a new dictionary with all the keys and values reversed. If the value is a number, square it. If the key is a string, convert it to uppercase. If the value is a string, reverse it. If the key is a number, convert it to a string and concatenate it with \\" times\\".","solution":"def transform_dict(input_dict): Accepts a dictionary and returns a new dictionary with keys and values reversed. If the value is a number, squares it. If the key is a string, converts it to uppercase. If the value is a string, reverses it. If the key is a number, converts it to a string and concatenates it with \\" times\\". output_dict = {} for key, value in input_dict.items(): new_key = (str(key) + \\" times\\") if isinstance(key, int) else key.upper() new_value = value ** 2 if isinstance(value, (int, float)) else value[::-1] if isinstance(value, str) else value output_dict[new_value] = new_key return output_dict"},{"question":"Create a function that takes an array of strings and returns the longest subsequence where no two adjacent elements share any common character. It is permissible to remove some of the strings from the array. The subsequence should be returned in a lexicographically sorted manner.","solution":"def longest_subsequence(arr): def has_common_char(s1, s2): return bool(set(s1) & set(s2)) def dfs(idx, current): nonlocal max_length, best_sequence if len(current) > max_length: max_length = len(current) best_sequence = sorted(current) for i in range(idx, len(arr)): if all(not has_common_char(arr[i], s) for s in current): current.append(arr[i]) dfs(i + 1, current) current.pop() max_length = 0 best_sequence = [] dfs(0, []) return best_sequence"},{"question":"Create a function that takes in a list of dictionaries, where each dictionary represents a person with at least the keys \\"name\\" and \\"age\\". The function should return a new list of dictionaries containing only the \\"name\\" and \\"age\\" of each person. If a dictionary does not have these keys, they should not be included in the output.","solution":"def filter_people_info(people): Filters a list of dictionaries to return only the dictionaries that contain the keys 'name' and 'age', with only these keys included in the new dictionaries. Parameters: people (list of dict): List of dictionaries representing people. Returns: list of dict: List of dictionaries with only 'name' and 'age' keys included. filtered_people = [] for person in people: if 'name' in person and 'age' in person: filtered_people.append({'name': person['name'], 'age': person['age']}) return filtered_people"},{"question":"Create a function that takes in two arrays of integers, \`arr1\` and \`arr2\`, and returns a new array that contains the elements of \`arr1\` followed by the elements of \`arr2\`. This function should be implemented in Python and should have a time complexity of O(n), where n is the total number of elements in both arrays. Additionally, the function should handle cases where the input arrays may contain duplicate elements.","solution":"def concatenate_arrays(arr1, arr2): Concatenates two arrays of integers and returns a new array that contains the elements of arr1 followed by the elements of arr2. :param arr1: List[int], first array of integers :param arr2: List[int], second array of integers :return: List[int], new array containing elements of arr1 followed by elements of arr2 return arr1 + arr2"},{"question":"Create a function that converts a string to a list where each element is a word from the string.","solution":"def string_to_word_list(s): Converts a string to a list where each element is a word from the string. Parameters: s (str): The input string. Returns: list: A list of words from the string. return s.split()"},{"question":"Create a function that capitalizes the first letter of each word in a given string. The function should handle strings with mixed cases, punctuation, and should not capitalize letters that are not at the start of a word.","solution":"def capitalize_words(s): Capitalizes the first letter of each word in the given string. Words are defined as sequences of characters separated by whitespace. return ' '.join(word.capitalize() for word in s.split())"},{"question":"Create a function that takes two lists of integers and returns a new list containing the elements from both lists, but without duplicates. The order of the elements should be the same as they appear in the original lists.","solution":"def merge_unique_lists(list1, list2): Returns a new list containing the elements from both input lists, but without duplicates. The elements retain the order of their first appearance. seen = set() result = [] for item in list1 + list2: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Create a function that takes a list of positive integers and returns a new list with the elements sorted in descending order.","solution":"def sort_descending(lst): Returns a new list with the elements sorted in descending order. Args: lst (list of int): A list of positive integers. Returns: list of int: A new list with elements sorted in descending order. return sorted(lst, reverse=True)"},{"question":"Create a function that will take an array of positive integers and return an array of the same length where each index i contains the product of all numbers in the input array except for the number at index i. The solution should not use division.","solution":"def product_except_self(nums): Returns an array where each element at index i contains the product of all elements in the input array except the element at index i. length = len(nums) answer = [1] * length # Product of elements to the left of each index left_product = 1 for i in range(length): answer[i] = left_product left_product *= nums[i] # Product of elements to the right of each index right_product = 1 for i in range(length - 1, -1, -1): answer[i] *= right_product right_product *= nums[i] return answer"},{"question":"Create a function that takes an integer ( n ) and returns a list of ( n ) Fibonacci numbers, where the Fibonacci sequence starts with 0 and 1. The function should be efficient and able to handle large values of ( n ).","solution":"def fibonacci(n): Returns a list containing the first n Fibonacci numbers. if n <= 0: return [] if n == 1: return [0] fib_seq = [0, 1] for _ in range(2, n): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Create a function that takes a string as an argument and checks if it is a valid Python function definition. A valid function definition should start with the \`def\` keyword, followed by a valid function name, and include a set of parentheses with any valid arguments. The function definition should end with a colon.","solution":"import re def is_valid_function_definition(s): Checks if the string is a valid Python function definition. Args: s (str): The string to check. Returns: bool: True if the string is a valid function definition, False otherwise. # Regular expression to check for valid Python function definition pattern = r\\"^defs+[a-zA-Z_]w*s*(.*)s*:\\" return bool(re.match(pattern, s))"},{"question":"Create a function that takes a list of integers, and returns a list of the sum of absolute values of each sublist, sorted in ascending order based on these sums. If two sublists have the same sum, the sublist with the smaller absolute sum of elements should come first in the sorted list.","solution":"def sort_sublists_by_absolute_sums(sublists): Takes a list of sublists of integers and returns a list of sublists sorted by the sum of absolute values of each sublist in ascending order. If two sublists have the same absolute sum, the sublist with the smaller absolute sum of elements should come first. def sort_key(sublist): return (sum(abs(x) for x in sublist), sum(sublist)) return sorted(sublists, key=sort_key)"},{"question":"Create a function that generates a list of all n*n magic squares of numbers from 1 to n^2 using Python. A magic square is a square array of distinct positive integers such that the sum of the integers in each row, each column, and both main diagonals are the same.","solution":"def generate_magic_square(n): Generate a n x n magic square for numbers from 1 to n^2. This function uses the Siamese method which works only for odd n. if n % 2 == 0: raise ValueError(\\"This function only works for odd n!\\") magic_square = [[0] * n for _ in range(n)] i, j = 0, n // 2 for num in range(1, n * n + 1): magic_square[i][j] = num new_i, new_j = (i - 1) % n, (j + 1) % n if magic_square[new_i][new_j] != 0: i = (i + 1) % n else: i, j = new_i, new_j return magic_square"},{"question":"Create a function that checks if a given string is a valid strict palindrome. A strict palindrome is one where the string reads the same forwards and backwards, disregarding any non-alphanumeric characters and ignoring cases.","solution":"import re def is_strict_palindrome(s): Returns True if the given string is a strict palindrome, ignoring non-alphanumeric characters and case, else returns False. # Remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Compare the cleaned string with its reverse return cleaned_string == cleaned_string[::-1]"},{"question":"Create a function that returns the maximum and minimum elements in a list of integers. The function should have a time complexity of O(n), where n is the number of elements in the list. Additionally, describe the steps you took to ensure the function adheres to the time complexity.","solution":"def find_max_min(lst): Returns the maximum and minimum elements in a list of integers. if not lst: return None, None max_val = lst[0] min_val = lst[0] for num in lst: if num > max_val: max_val = num if num < min_val: min_val = num return max_val, min_val"},{"question":"Create a function that identifies the most frequent word in a given text. If there are multiple words with the same highest frequency, return all of them. For example, given the text \\"hello world hello hello\\", the function should return [\\"hello\\"].","solution":"from collections import Counter import re def most_frequent_words(text): Identifies the most frequent word(s) in the given text. Returns a list of word(s) having the highest frequency. # Use regular expression to find words and ignore case words = re.findall(r'bw+b', text.lower()) # Count the frequency of each word word_counts = Counter(words) # Get the maximum frequency max_freq = max(word_counts.values(), default=0) # Find all words that have the maximum frequency most_frequent = [word for word, freq in word_counts.items() if freq == max_freq] return most_frequent"},{"question":"Create a function that removes duplicates from a list of numbers, but keep the order of the original list.","solution":"def remove_duplicates(numbers): Removes duplicates from a list of numbers while preserving the order of the original list. seen = set() result = [] for number in numbers: if number not in seen: seen.add(number) result.append(number) return result"},{"question":"Create a function that simulates a dice roll. The function should return a random number between 1 and 6.","solution":"import random def roll_dice(): Simulates a dice roll by returning a random integer between 1 and 6. return random.randint(1, 6)"},{"question":"Create a function that takes an array and returns the number of even numbers in the array. In Python.","solution":"def count_even_numbers(arr): Returns the number of even numbers in the array. Args: arr (list of int): The input array containing integers. Returns: int: The number of even numbers in the array. count = 0 for num in arr: if num % 2 == 0: count += 1 return count"},{"question":"Create a function that takes an array of positive integers and returns the frequency of the median value in the array. If the median is not a single integer (i.e., an average of two numbers), the function should return a message stating that the median is not an integer.","solution":"def median_frequency(arr): Returns the frequency of the median value in the array. If the median is not an integer, returns a message stating that the median is not an integer. arr.sort() n = len(arr) if n == 0: return \\"Array is empty\\" if n % 2 != 0: median = arr[n // 2] frequency = arr.count(median) return frequency else: mid1 = arr[(n // 2) - 1] mid2 = arr[n // 2] if mid1 == mid2: frequency = arr.count(mid1) return frequency else: return \\"The median is not an integer\\""},{"question":"Create a function that determines the maximum sum that can be achieved by splitting a given number into a sum of 4 distinct positive integers. For example, for the number 15, you might be able to split it into 1 + 2 + 3 + 9 or 1 + 2 + 4 + 8, among other combinations. The function should return the maximum sum possible from such a division. If it's not possible to split the number into 4 distinct positive integers, the function should return -1.","solution":"def max_sum_of_4_distinct_integers(number): if number < 10: # Minimum sum of 4 distinct integers (1+2+3+4) is 10 return -1 # Split the number into 1, 2, 3 and (number - 6) # This guarantees 4 distinct positive integers (as long as number >= 10) a, b, c = 1, 2, 3 d = number - (a + b + c) return a + b + c + d if a < b < c < d else -1"},{"question":"Create a function that generates a list of prime numbers that are also Fibonacci numbers within a given range. For example, the function should take the range [2, 100] as input and return [2, 3, 5, 13], as these are the prime and Fibonacci numbers within the range. The function should be efficient and handle large ranges effectively.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def fibonacci_up_to(n): Generate Fibonacci numbers up to n. fibs = [] a, b = 0, 1 while a <= n: fibs.append(a) a, b = b, a + b return fibs def prime_fibonacci_in_range(start, end): Generate prime numbers that are also Fibonacci numbers in the range [start, end]. result = [] fibs = fibonacci_up_to(end) for number in fibs: if number >= start and is_prime(number): result.append(number) return result"},{"question":"Create a function that takes a string as a parameter and returns the longest palindrome that can be formed by only removing characters from the string. The function should ignore case sensitivity and spaces. For example, if the input string is \\"A man a plan a canal Panama\\", the function should return \\"AmanaplanacanalPanama\\".","solution":"def longest_palindrome(s): Returns the longest palindrome that can be formed by only removing characters from the string. The function ignores case sensitivity and spaces. # Remove spaces and convert to lowercase filtered_s = ''.join(char.lower() for char in s if char.isalnum()) # Check each substring whether it's a palindrome and keep the longest one def is_palindrome(sub_s): return sub_s == sub_s[::-1] n = len(filtered_s) longest_pal = \\"\\" for i in range(n): for j in range(i, n): sub_s = filtered_s[i:j+1] if is_palindrome(sub_s): if len(sub_s) > len(longest_pal): longest_pal = sub_s return longest_pal"},{"question":"Create a function that determines the total number of 3x3 magic squares within a 9x9 grid. A magic square is a square grid with a specific arrangement of its elements such that the sum of each column, each row, and both main diagonals are all the same. The elements of the magic square must always be integers between 1 and 36.","solution":"def is_magic_square(square): Check if a given 3x3 square is a magic square. s = 15 # The magic constant for a 3x3 magic square with numbers 1 to 9 # Check rows and columns for i in range(3): if sum(square[i]) != s or sum([row[i] for row in square]) != s: return False # Check diagonals if sum([square[i][i] for i in range(3)]) != s or sum([square[i][2-i] for i in range(3)]) != s: return False return True def count_3x3_magic_squares(grid): Counts the number of 3x3 magic squares within a 9x9 grid. count = 0 for i in range(7): for j in range(7): square = [row[j:j+3] for row in grid[i:i+3]] if is_magic_square(square): count += 1 return count"},{"question":"Create a function that takes an array of integers and returns an array containing only elements that are multiples of either 3 or 5, sorted in ascending order.","solution":"def filter_and_sort_multiples(arr): Returns an array containing only elements that are multiples of either 3 or 5, sorted in ascending order. Parameters: arr (list): List of integers to filter and sort. Returns: List: Sorted list of integers which are multiples of either 3 or 5. # Filter elements that are multiples of either 3 or 5 filtered = [x for x in arr if x % 3 == 0 or x % 5 == 0] # Return the sorted list return sorted(filtered)"},{"question":"Create a function that takes a string as input and returns the number of vowels in the string. Vowels are considered to be all the vowels in both lower and upper cases (i.e., 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). You should also ignore any non-alphabetic characters.","solution":"def count_vowels(s): Returns the number of vowels in the input string 's'. Vowels are considered to be: 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'. Non-alphabetic characters are ignored. vowels = \\"aeiouAEIOU\\" return sum(1 for char in s if char in vowels)"},{"question":"Create a function that takes a two-dimensional list of integers and returns the maximum element found in the entire two-dimensional list. If the list is empty or contains only empty lists, the function should return \`None\`.","solution":"def find_max_2d_list(matrix): Returns the maximum element found in the entire two-dimensional list. If the list is empty or contains only empty lists, the function returns None. if not matrix or all(not row for row in matrix): return None max_element = None for row in matrix: for element in row: if max_element is None or element > max_element: max_element = element return max_element"},{"question":"Create a function that takes a string and returns the first non-repeating character in a string. For example, given the string \\"alphabet\\", the function should return 'l' because 'l' is the first character that does not repeat in the string.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters repeat, returns None. # Count the occurrences of each character in the string char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 # Iterate through the string again to find the first non-repeating character for char in s: if char_count[char] == 1: return char return None"},{"question":"Create a function that , given a string, will return a new string that contains only the odd-indexed characters from the original string.","solution":"def odd_index_characters(s): Returns a new string with only the odd-indexed characters from the original string. Parameters: s (str): The original string. Returns: str: A new string with characters at odd indices. return s[1::2]"},{"question":"Create a function that takes a positive integer \`n\` and returns the sum of its factors. A factor is a divisor of \`n\` including 1 but excluding \`n\` itself. For example, if the input is \`12\`, the factors are \`1, 2, 3, 4, 6\` and the sum is \`16\`.","solution":"def sum_of_factors(n): Returns the sum of the factors of the positive integer \`n\`. Factors include divisors of \`n\` excluding \`n\` itself. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") return sum(i for i in range(1, n) if n % i == 0)"},{"question":"Create a function that generates a password of a given length. The password should contain at least one lowercase letter, one uppercase letter, one number, and one special character. I'm using Python.","solution":"import random import string def generate_password(length): Generates a password of the given length. The password will contain at least one lowercase letter, one uppercase letter, one digit, and one special character. if length < 4: raise ValueError(\\"Password length should be at least 4 characters\\") lowercase = random.choice(string.ascii_lowercase) uppercase = random.choice(string.ascii_uppercase) digit = random.choice(string.digits) special = random.choice(string.punctuation) # Fill the remaining length with random characters from all possible characters remaining_length = length - 4 remaining_chars = random.choices(string.ascii_letters + string.digits + string.punctuation, k=remaining_length) # Combine all the characters password_chars = [lowercase, uppercase, digit, special] + remaining_chars # Shuffle the list to avoid any predictable patterns random.shuffle(password_chars) # Join the list to form the password string password = \\"\\".join(password_chars) return password"},{"question":"Create a function that takes two integers as input and returns a list of all Fibonacci numbers between these two integers (inclusive) in ascending order.","solution":"def fibonacci_in_range(start, end): Returns a list of all Fibonacci numbers between start and end (inclusive). if start > end: return [] # Initialize Fibonacci sequence fibonacci = [0, 1] while fibonacci[-1] < end: fibonacci.append(fibonacci[-1] + fibonacci[-2]) # Filter the Fibonacci numbers within the range [start, end] return [num for num in fibonacci if start <= num <= end]"},{"question":"Create a function that accepts a string as a parameter and returns the string with all vowels replaced by the vowel that comes after it in the English alphabet. For instance, 'a' would be replaced by 'e', 'e' by 'i', 'i' by 'o', 'o' by 'u', and 'u' by 'a'. The case of each vowel should be preserved (i.e., 'A' should become 'E', 'E' should become 'I', etc.).","solution":"def replace_vowels(string): Replaces all vowels in the input string with the vowel that comes after it in the English alphabet. vowel_map = { 'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a', 'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A', } return ''.join(vowel_map[char] if char in vowel_map else char for char in string)"},{"question":"Create a function that takes in an integer as an argument and returns the factorial of that integer, which is the product of all positive integers less than or equal to that integer.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. The factorial of n is the product of all positive integers less than or equal to n. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes three integer arguments: \`start\`, \`end\`, and \`step\`. The function should return a list of numbers starting from \`start\` and ending at \`end\` (inclusive), with a step size of \`step\`. For example, if \`start=1\`, \`end=10\`, and \`step=2\`, the function should return \`[1, 3, 5, 7, 9]\`. If \`step\` is negative, the function should count downwards from \`start\` to \`end\`. If \`step\` is zero, the function should raise a ValueError.","solution":"def generate_sequence(start, end, step): Generates a list of numbers starting from \`start\` to \`end\` (inclusive) with a step size of \`step\`. if step == 0: raise ValueError(\\"Step size cannot be zero\\") numbers = [] current = start if step > 0: while current <= end: numbers.append(current) current += step else: while current >= end: numbers.append(current) current += step return numbers"},{"question":"Create a function that takes two parameters from the user, saves them in two different variables, and then prints out the sum of those numbers. The function should be in Python.","solution":"def input_and_sum(): Takes two numbers from the user, calculates their sum, and returns the result. # Get the first number from the user num1 = float(input(\\"Enter the first number: \\")) # Get the second number from the user num2 = float(input(\\"Enter the second number: \\")) # Calculate the sum of the two numbers result = num1 + num2 # Return the result return result"},{"question":"Create a function that takes a dictionary, a key, and a value, and checks if the key and value are present in the dictionary. If both are present and the value is associated with the key, the function should return True; otherwise, it should return False. Write the function as \`key_value_exists\` in Python.","solution":"def key_value_exists(dictionary, key, value): Checks if the key and value are present in the dictionary where the value is associated with the specified key. Parameters: dictionary (dict): The dictionary to check. key: The key to check. value: The value to check. Returns: bool: True if the key and value are associated, False otherwise. return dictionary.get(key) == value"},{"question":"Create a function that takes a two-dimensional array as input and returns the sum of its elements.","solution":"def sum_2d_array(array): Returns the sum of all elements in a two-dimensional array. return sum(sum(row) for row in array)"},{"question":"Create a function that takes an integer as input and returns the result of squaring the number.","solution":"def square(num): Returns the square of the input number. return num * num"},{"question":"Create a function that reverses a given string. The function should take a single string as an input and return the string in reverse order.","solution":"def reverse_string(s): Returns the reverse of the given string s. return s[::-1]"},{"question":"Create a function that takes in a list of integers and return the most frequent number in the list. If there is a tie, return the smallest number among the most frequent numbers.","solution":"def most_frequent_number(numbers): Returns the most frequent number in the list. If there is a tie, returns the smallest number among the most frequent numbers. from collections import Counter # Count the frequency of each number in the list frequency = Counter(numbers) # Find the maximum frequency max_freq = max(frequency.values()) # Filter numbers that have the maximum frequency most_frequent = [num for num, freq in frequency.items() if freq == max_freq] # Return the smallest number among the most frequent numbers return min(most_frequent)"},{"question":"Create a function that takes in a list of integers and returns the sum of its elements, excluding any numbers that are divisible by 3.","solution":"def sum_excluding_divisible_by_3(numbers): This function takes in a list of integers and returns the sum of its elements, excluding any numbers that are divisible by 3. return sum(num for num in numbers if num % 3 != 0)"},{"question":"Create a function that takes a string as input and returns the length of the last word in the string. If the string is empty or only contains whitespace, return 0. A word is defined as a sequence of non-whitespace characters.","solution":"def length_of_last_word(s): Returns the length of the last word in the string s. A word is defined as a sequence of non-whitespace characters. If the string is empty or only contains whitespace, return 0. words = s.strip().split() if words: return len(words[-1]) return 0"},{"question":"Create a function that takes a string as input and returns the count of each vowel in the string. The function should only consider English alphabetic characters and ignore any non-letter characters. The function should return a dictionary with the vowels as keys and their counts as values. If a vowel appears multiple times, the function should count it each time it occurs.","solution":"def count_vowels(s): Returns a dictionary with the count of each vowel in the given string. Only English alphabetic characters are considered. vowels = 'aeiouAEIOU' counts = {v: 0 for v in vowels} for char in s: if char in vowels: counts[char] += 1 return {key: value for key, value in counts.items() if value > 0}"},{"question":"Create a function that inverts the order of words in a string while keeping the words themselves in their original order.","solution":"def invert_words_order(sentence): Inverts the order of words in a sentence while keeping the words themselves in their original order. Parameters: sentence (str): The sentence to be processed. Returns: str: A string with the words in reversed order. words = sentence.split() inverted_words = words[::-1] return ' '.join(inverted_words)"},{"question":"Create a function that returns the sorted array of even numbers from the given array. The function should return all positive even numbers from the array, sorted in ascending order.","solution":"def sort_even_numbers(arr): Returns the sorted list of positive even numbers from the given array. even_numbers = [x for x in arr if x > 0 and x % 2 == 0] return sorted(even_numbers)"},{"question":"Create a function that takes an integer \`num\` as input and returns the sum of all the even numbers from 1 to \`num\` (inclusive). If \`num\` is less than 1, the function should return 0.","solution":"def sum_of_evens(num): Returns the sum of all even numbers from 1 to num (inclusive). If num is less than 1, returns 0. if num < 1: return 0 return sum(i for i in range(1, num + 1) if i % 2 == 0)"},{"question":"Create a function that takes a string s as input and returns the string with all vowels replaced by the letter 'x'.","solution":"def replace_vowels(s): Replaces all vowels in the input string with the letter 'x'. Parameters: s (str): The input string. Returns: str: The modified string with all vowels replaced by 'x'. vowels = 'aeiouAEIOU' return ''.join(['x' if char in vowels else char for char in s])"},{"question":"Create a function that can reverse the order of words in a given string. The function should take a single string as input and return the string with the words in reverse order. Words are considered to be separated by spaces.","solution":"def reverse_words(sentence): Reverse the order of words in a given string. Parameters: sentence (str): The input string containing words separated by spaces. Returns: str: The string with the words in reverse order. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Create a function that takes an integer n as an argument and returns a list of all prime factors of n. Prime factors are the prime numbers that multiply together to give the original number. For example, the prime factors of 12 are 2, 2, and 3.","solution":"def prime_factors(n): Returns the list of prime factors of the given integer n. factors = [] # Check for the factor of 2 while n % 2 == 0: factors.append(2) n = n // 2 # Check for odd factors from 3 up to the square root of n for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n = n // i # If n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Create a function that takes two lists of numbers as input and returns the intersection of these two lists, ensuring the result contains no duplicates. The function should be sorted in ascending order.","solution":"def intersection_of_lists(list1, list2): Returns the intersection of two lists with no duplicates, sorted in ascending order. # Find the intersection and remove duplicates by converting to a set intersection_set = set(list1) & set(list2) # Convert the set back to a sorted list intersection_list = sorted(intersection_set) return intersection_list"},{"question":"Create a function that takes a dictionary and a key as input and returns the value associated with that key in the dictionary. If the key does not exist, the function should return None. Also, ensure that your function can handle nested dictionaries.","solution":"def get_value_from_dict(d, key): Returns the value associated with the given key in the dictionary. If the key does not exist, returns None. Handles nested dictionaries. if key in d: return d[key] for k, v in d.items(): if isinstance(v, dict): result = get_value_from_dict(v, key) if result is not None: return result return None"},{"question":"Create a function that can identify if a given number is prime or not. In Python, write a function named \`is_prime\` that accepts an integer as its parameter and returns \`True\` if the number is prime, otherwise return \`False\`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(n): Returns True if the number n is a prime number, otherwise returns False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Create a function that takes two parameters: a list of integers and a number n. The function should return the sum of all numbers in the list that are greater than n.","solution":"def sum_greater_than(numbers, n): Returns the sum of all numbers in the list that are greater than n. Parameters: numbers (list of int): A list of integers. n (int): The threshold number. Returns: int: The sum of all numbers greater than n. return sum(x for x in numbers if x > n)"},{"question":"Create a function that accepts an array of integers and returns the sum of all the even numbers in the array. However, if any of the numbers in the array is less than zero, the function should return -1. if the array is empty, the function should return 0.","solution":"def sum_of_evens(arr): Returns the sum of all even numbers in the array. If any number in the array is less than zero, returns -1. If the array is empty, returns 0. if any(n < 0 for n in arr): return -1 return sum(n for n in arr if n % 2 == 0)"},{"question":"Create a function that converts a given integer to its hexadecimal representation. The function should return a string that starts with \\"0x\\" followed by the hexadecimal value of the integer.","solution":"def int_to_hex(n): Converts a given integer to its hexadecimal representation. The hexadecimal string starts with '0x'. Parameters: n (int): The integer to convert. Returns: str: The hexadecimal representation of the integer. return hex(n)"},{"question":"Create a function that parses through a given text and returns a dictionary where each key-value pair represents a word and its count. The text is a string of words separated by spaces. You should ignore case sensitivity and consider only alphabetic characters. Non-alphabetic characters should be disregarded when counting words.","solution":"import re from collections import defaultdict def word_count(text): Returns a dictionary with words as the keys and their counts as the values. The function ignores case and considers only alphabetic characters. word_counts = defaultdict(int) # Use regex to find all words while disregarding non-alphabetic characters. words = re.findall(r'b[a-zA-Z]+b', text.lower()) for word in words: word_counts[word] += 1 return dict(word_counts)"},{"question":"Create a function that takes two parameters - an input string \`s\` and a frequency map \`fmap\`. The function should return a string \`res\` that contains characters from \`s\` arranged according to the frequencies specified in \`fmap\`. If there are multiple characters with the same frequency, they can appear in any order. Characters not present in \`fmap\` should be appended at the end of the string \`res\` in their original order.","solution":"def arrange_by_frequency(s, fmap): Arrange characters in the string \`s\` according to the frequency map \`fmap\`. # Create a dictionary to hold lists of characters at each frequency freq_dict = {} # Populate freq_dict with characters from fmap for char, freq in fmap.items(): if freq not in freq_dict: freq_dict[freq] = [] freq_dict[freq].append(char) # Sort frequencies in descending order sorted_frequencies = sorted(freq_dict.keys(), reverse=True) # Build the resulting string res = [] used_chars = set() for freq in sorted_frequencies: for char in freq_dict[freq]: res.append(char * freq) used_chars.add(char) # Append characters not present in fmap in their original order for char in s: if char not in used_chars: res.append(char) return ''.join(res)"},{"question":"Create a function that sorts an array in ascending order using the bubble sort algorithm.","solution":"def bubble_sort(arr): Sorts an array in ascending order using the bubble sort algorithm. Parameters: arr (list): A list of sortable items (e.g., integers, floats). Returns: list: The sorted list. n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1 # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a function that takes in a list of strings, removes duplicates, and returns a new list with only unique strings. The function should also maintain the original order of strings.","solution":"def unique_strings(strings): Receives a list of strings, removes duplicates, and returns a new list with unique strings maintaining the original order. seen = set() unique = [] for string in strings: if string not in seen: seen.add(string) unique.append(string) return unique"},{"question":"Create a function that takes two integers as input and returns a bool","solution":"def are_equal(a, b): Returns True if a and b are equal, False otherwise. return a == b"},{"question":"Create a function that takes a string as an input and returns a new string where every character in the original string is replaced with the corresponding character in the ASCII table, offset by 2. If the original character is ' ', it should be replaced with '-' (dash).","solution":"def transform_string(input_string): Takes a string as an input and returns a new string where every character in the original string is replaced with the corresponding character in the ASCII table, offset by 2. If the original character is ' ', it should be replaced with '-'. result = [] for char in input_string: if char == ' ': result.append('-') else: result.append(chr(ord(char) + 2)) return ''.join(result)"},{"question":"Create a function that takes in a list of dictionaries, where each dictionary represents a person and has keys 'name' and 'age'. The function should return a new list of dictionaries sorted by 'age' in ascending order.","solution":"def sort_by_age(people): Sorts a list of dictionaries by the value of 'age' key in ascending order. Args: people (list): A list of dictionaries. Each dictionary represents a person and has 'name' and 'age' keys. Returns: list: A new list of dictionaries sorted by 'age'. return sorted(people, key=lambda person: person['age'])"},{"question":"Create a function that reorders a string based on the frequency of its characters in descending order. If two characters have the same frequency, they should be ordered alphabetically.","solution":"from collections import Counter def reorder_string_by_frequency(s): Reorders a string based on the frequency of its characters in descending order. If two characters have the same frequency, they are ordered alphabetically. frequency = Counter(s) sorted_characters = sorted(frequency.items(), key=lambda x: (-x[1], x[0])) result = ''.join([char * count for char, count in sorted_characters]) return result"},{"question":"Create a function that takes an array of strings and returns a new array with the strings that are longer than a given length.","solution":"def filter_strings_by_length(strings, length): Returns an array of strings that are longer than the given length. Parameters: strings (list of str): The list of input strings. length (int): The length to compare each string against. Returns: list of str: A list of strings that are longer than the given length. return [string for string in strings if len(string) > length]"},{"question":"Create a function that takes a data structure or an object as input and returns a dictionary containing key-value pairs representing the frequency of each unique element in the data structure. The function should work for any iterable data structures like lists, tuples, etc.","solution":"from collections import defaultdict def element_frequency(data_structure): Takes an iterable data structure as input and returns a dictionary with the frequency of each unique element. frequency_dict = defaultdict(int) for element in data_structure: frequency_dict[element] += 1 return dict(frequency_dict)"},{"question":"Create a function that detects if an array of integers is a Mtarun array. A Mtarun array is defined as a subarray that contains a sequence of consecutive integers, regardless of order. For example, the array [2, 3, 1, 4] is a Mtarun array because the numbers could be consecutive if re-ordered, while [2, 4, 9] is not. Note that the array may contain duplicates, but the distribution of pairs should result in a sequence.","solution":"def is_mtarun_array(arr): Returns True if the array contains a sequence of consecutive integers regardless of order. if not arr: return False unique_elements = set(arr) min_val = min(unique_elements) max_val = max(unique_elements) expected_length = max_val - min_val + 1 return len(unique_elements) == expected_length"},{"question":"Create a function that returns the first non-repeating character in a string, if one exists. If no non-repeating character exists, return None. The function should work in O(n) time complexity, where n is the length of the string.","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in the string s. If no non-repeating character exists, returns None. char_count = {} # First pass to count all characters for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass to find the first non-repeating character for char in s: if char_count[char] == 1: return char return None"},{"question":"Create a function that takes an integer n and a list lst of integers. The goal is to insert every number in the range [1, n] that is not present in lst into lst. The function should return the updated list lst with these numbers inserted in ascending order.","solution":"def insert_missing_numbers(n, lst): Insert every number in the range [1, n] that is not present in the list \`lst\` into \`lst\`. The function returns the updated list with these numbers inserted in ascending order. missing_numbers = [i for i in range(1, n + 1) if i not in lst] lst.extend(missing_numbers) return sorted(lst)"},{"question":"Create a function that takes a list of integers and returns a list of their squares. The function should be named \`square_numbers\` and should handle both positive and negative integers.","solution":"def square_numbers(numbers): Takes a list of integers and returns a list of their squares. Args: numbers (list of int): The list of integers to be squared. Returns: list of int: A list of the squared integers. return [num**2 for num in numbers]"},{"question":"Create a function that calculates the factorial of a given number using a loop. The function should take one parameter which is the number for which the factorial is to be calculated.","solution":"def factorial(n): Returns the factorial of a given number n. If n is 0, the factorial is 1. If n is a negative number, an exception will be raised. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that converts a given integer to a hexadecimal string. The hexadecimal string should be in lowercase and without the \\"0x\\" prefix.","solution":"def int_to_hex(n): Converts a given integer to a hexadecimal string. The hexadecimal string will be in lowercase and without the \\"0x\\" prefix. :param n: Integer to be converted to hexadecimal. :return: Hexadecimal string representation of the integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") return hex(n).replace(\\"0x\\", \\"\\")"},{"question":"Create a function that takes two lists of integers as input and returns a new list containing the intersection of the two lists. The intersection should include all elements that appear in both lists, and the result should be sorted in ascending order.","solution":"def intersect_sorted_list(list1, list2): This function takes two lists of integers and returns a new list containing the intersection of the two lists. The result is sorted in ascending order. intersection = set(list1) & set(list2) return sorted(intersection)"},{"question":"Create a function that generates a list of all the prime numbers within a given range, including both the start and end numbers. The function should be efficient and handle large ranges effectively.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_primes(start, end): Generates a list of all prime numbers within the given range [start, end]. Parameters: start (int): The starting number of the range. end (int): The ending number of the range. Returns: list: A list of prime numbers within the given range. return [x for x in range(start, end + 1) if is_prime(x)]"},{"question":"Create a function that takes an integer as an argument and returns the negation of the passed number, if it is negative, and returns the number itself if it is non-negative.","solution":"def negate_if_negative(num): Takes an integer as an argument and returns the negation of the passed number if it is negative, otherwise returns the number itself if it is non-negative. if num < 0: return -num return num"},{"question":"Create a function that takes two integers as parameters and returns the greatest common divisor (GCD) of those two numbers. The function should be called \`find_gcd()\`. Additionally, provide an example of how to call the function with two integers.","solution":"def find_gcd(a, b): Returns the greatest common divisor (GCD) of a and b. while b: a, b = b, a % b return a # Example of how to call the function result = find_gcd(48, 18) print(result) # Output should be 6"},{"question":"Create a function that takes a list and returns a new list containing only the items that appear more than once in the original list. How can we solve this problem in Python?","solution":"def find_duplicates(lst): Returns a list containing only the items that appear more than once in the original list. from collections import Counter count = Counter(lst) return [item for item, occurrences in count.items() if occurrences > 1]"},{"question":"Create a function that takes a string and returns a new string where each word is capitalized.","solution":"def capitalize_words(sentence): Takes a string and returns a new string where each word is capitalized. Parameters: sentence (str): The input string. Returns: str: A new string with each word capitalized. return ' '.join(word.capitalize() for word in sentence.split())"},{"question":"Create a function that performs a simple linear regression analysis on a dataset. The dataset is provided as a list of tuples, where each tuple contains two numeric values representing a pair of data points. The function should return two values: the slope and the intercept of the linear regression line.","solution":"def linear_regression(data): Perform a simple linear regression on the provided dataset. Args: data (list of tuples): A list where each tuple contains two numeric values representing a pair of data points (x, y). Returns: tuple: A tuple containing the slope and the intercept of the linear regression line. n = len(data) if n == 0: raise ValueError(\\"Dataset cannot be empty\\") # Calculate the means of x and y mean_x = sum([x for x, y in data]) / n mean_y = sum([y for x, y in data]) / n # Calculate the slope (m) numerator = sum([(x - mean_x) * (y - mean_y) for x, y in data]) denominator = sum([(x - mean_x) ** 2 for x, y in data]) if denominator == 0: raise ValueError(\\"Variance of x is zero, cannot compute linear regression\\") slope = numerator / denominator # Calculate the intercept (b) intercept = mean_y - slope * mean_x return slope, intercept"},{"question":"Create a function that takes an integer num as input and returns \`True\` if the number is an exact power of 2 (e.g., 2, 4, 8, 16, etc.), and \`False\` otherwise. An exact power of 2 is a positive number which can be expressed as 2 raised to an integer power, e.g., 2^0 = 1, 2^1 = 2, etc.","solution":"def is_power_of_two(num): Returns True if num is an exact power of 2, False otherwise. if num <= 0: return False return (num & (num - 1)) == 0"},{"question":"Create a function that accepts two arrays, arr1 and arr2, and returns the number of times arr2 values match exactly with the elements in arr1. The function should also return the number of positions where a value from arr2 matches exactly with the elements in arr1. If both conditions are satisfied, then it returns the total count of matching elements and positions. If no match is found, it returns -1.","solution":"def match_arrays(arr1, arr2): Returns a tuple containing the count of matches and the count of positions where the matches occur between two arrays. Parameters: arr1 (list): The first list of elements. arr2 (list): The second list of elements to match against the first list. Returns: tuple: A tuple containing total match count and exact position match count, or returns -1 if no matches are found. total_matches = 0 position_matches = 0 for i in range(len(arr2)): if arr2[i] in arr1: total_matches += 1 if i < len(arr1) and arr2[i] == arr1[i]: position_matches += 1 if total_matches == 0: return -1 return total_matches, position_matches"},{"question":"Create a function that takes in a subset of letters of the alphabet and prints out how many words can be formed from those letters using a given list of words. The function should also consider permutations of the letters, i.e., different words that can be formed by rearranging the letters, as a different word.","solution":"from itertools import permutations def count_formable_words(subset, words): Count how many words can be formed from a subset of letters. :param subset: List of characters representing the subset of the alphabet :param words: List of words to check against the subset :return: Number of formable words subset_str = ''.join(subset) all_permutations = set([''.join(p) for i in range(1, len(subset_str) + 1) for p in permutations(subset_str, i)]) count = sum(1 for word in words if word in all_permutations) return count"},{"question":"Create a function that takes a list of numbers and returns the average of those numbers. If the list is empty, return 0. Ensure your function is well-documented and handles edge cases.","solution":"def average(numbers): Returns the average of a list of numbers. If the list is empty, return 0. Parameters: numbers (list): List of numbers. Returns: float: The average of the numbers in the list, or 0 if the list is empty. if not numbers: return 0 return sum(numbers) / len(numbers)"},{"question":"Create a function that takes two vectors of integers as input and returns the element-wise sum of the vectors. Both vectors are of equal size. For example, if the input vectors are [1, 2, 3] and [4, 5, 6], the function should return the vector [5, 7, 9].","solution":"def elementwise_sum(vec1, vec2): Returns the element-wise sum of two vectors. Both vectors must be of the same length. return [a + b for a, b in zip(vec1, vec2)]"},{"question":"Create a function that generates a random sequence of DNA based on a given length and a specific set of nucleotides. The nucleotides are A, T, C, and G. For example, given a length of 10 and a set of nucleotides [A, T], the function should output a sequence like \\"ATATATAT\\". The function should also include an optional parameter for sequence motifs, which, if provided, should ensure that the generated sequence includes the motifs.","solution":"import random def generate_dna_sequence(length, nucleotides, motifs=None): Generates a random DNA sequence based on a given length and specific set of nucleotides. If motifs are provided, ensures that the generated sequence includes the motifs. :param length: The length of the DNA sequence to generate :param nucleotides: A list of nucleotides to use in the sequence (e.g., ['A', 'T']) :param motifs: A list of motifs that must be included in the sequence (optional) :return: A random DNA sequence following the criteria if not nucleotides: raise ValueError(\\"Nucleotides list cannot be empty.\\") motif_combined_length = sum(len(motif) for motif in motifs) if motifs else 0 if motifs and motif_combined_length > length: raise ValueError(\\"Combined length of motifs cannot exceed the total length of the sequence.\\") sequence = [] for _ in range(length - motif_combined_length): sequence.append(random.choice(nucleotides)) if motifs: for motif in motifs: insert_position = random.randint(0, len(sequence)) sequence[insert_position:insert_position] = motif return ''.join(sequence)"},{"question":"Create a function that prints all numbers from 1 to 100 that are divisible by 3 or 5.","solution":"def print_divisible_by_3_or_5(): Prints all numbers from 1 to 100 that are divisible by 3 or 5. divisible_numbers = [] for i in range(1, 101): if i % 3 == 0 or i % 5 == 0: divisible_numbers.append(i) print(divisible_numbers) return divisible_numbers"},{"question":"Create a function that calculates the sum of the cubes of all the positive integers that are divisible by 3 or 5. The function should take one parameter: a positive integer n. The function should return the sum of the cubes of all positive integers less than n that are divisible by 3 or 5.","solution":"def sum_of_cubes_divisible_by_3_or_5(n): Returns the sum of the cubes of all positive integers less than n that are divisible by 3 or 5. return sum(i ** 3 for i in range(1, n) if i % 3 == 0 or i % 5 == 0)"},{"question":"Create a function that takes a filename and a list of strings as arguments. The function should write each string from the list to a file with the given filename. Each string in the list should be written on a new line. The function should also handle the opening and closing of the file.","solution":"def write_strings_to_file(filename, strings): Writes each string from the list to a file with the specified filename. Each string in the list will be written on a new line. with open(filename, 'w') as file: for string in strings: file.write(string + 'n')"},{"question":"Create a function that takes a string as input and returns the frequency of each alphabet character in the string. The function should ignore case and non-alphabet characters.","solution":"from collections import Counter import string def char_frequency(s): Returns the frequency of each alphabet character in the string. Ignore case and non-alphabet characters. # Normalize to lowercase s = s.lower() # Filter out non-alphabet characters s = ''.join(filter(lambda c: c in string.ascii_lowercase, s)) # Count the frequency of each character return dict(Counter(s))"},{"question":"Create a function that takes as input a positive integer n and returns the sum of all the multiples of 3 or 5 up to n (inclusive). If n is less than 1, the function should return 0.","solution":"def sum_of_multiples(n): Returns the sum of all multiples of 3 or 5 up to n (inclusive). If n is less than 1, returns 0. if n < 1: return 0 return sum(i for i in range(1, n+1) if i % 3 == 0 or i % 5 == 0)"},{"question":"Create a function that takes a list of integers and returns the last element of the list.","solution":"def last_element(lst): Returns the last element of the list. If the list is empty, return None. if lst: return lst[-1] return None"},{"question":"Create a function that takes a list of numbers and returns the number that appears most frequently in the list.","solution":"def most_frequent_number(numbers): Returns the number that appears most frequently in the list. If there is a tie, returns the first number that reaches the highest frequency. from collections import Counter if not numbers: return None count = Counter(numbers) most_common_number, _ = count.most_common(1)[0] return most_common_number"},{"question":"Create a function that takes a list as an argument and returns a new list where every element is squared.","solution":"def square_elements(lst): Takes a list as an argument and returns a new list where every element is squared. Parameters: lst (list): The list of elements to be squared. Returns: list: A new list with each element squared. return [x ** 2 for x in lst]"},{"question":"Create a function that calculates the factorial of a given number \`n\`. Factorials are calculated as the product of all positive integers up to \`n\`. For example, the factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120. Your function should handle the case where \`n\` is 0 by returning 1, as 0! is defined to be 1.","solution":"def factorial(n): Returns the factorial of the given number n. Parameters: n (int): A non-negative integer whose factorial is to be calculated. Returns: int: Factorial of the given number n. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes in a list of integers and returns a new list with all the even numbers removed. However, if the list is empty, return the string \\"List is empty!\\"","solution":"def remove_even_numbers(lst): Returns a new list with all the even numbers removed. If the list is empty, return the string \\"List is empty!\\". if not lst: return \\"List is empty!\\" return [num for num in lst if num % 2 != 0]"},{"question":"Create a function that generates an array of perfect squares less than or equal to a given number \`n\`. The function should return an array containing these squares in ascending order. For example, given \`n = 30\`, the function should return \`[1, 4, 9, 16, 25]\` since these are the perfect squares of numbers 1 through 5, and they are less than or equal to 30.","solution":"def perfect_squares(n): Returns a list of perfect squares less than or equal to n. squares = [] i = 1 while i * i <= n: squares.append(i * i) i += 1 return squares"},{"question":"Create a function that takes one number as an argument and returns that number multiplied by two.","solution":"def multiply_by_two(n): Returns the given number n multiplied by two. return n * 2"},{"question":"Create a function that determines if an array contains all unique characters. Implement the function without using any additional data structures like哈希 table (dictionary). The function should work efficiently and handle edge cases such as large input sizes.","solution":"def all_unique_characters(arr): Determines if the array contains all unique characters. Only lowercase English alphabets are considered. for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] == arr[j]: return False return True"},{"question":"Create a function that takes in a string and returns an integer. The function should reverse the string, then check if it is a palindrome (reads the same backward as forward). If the reversed string is a palindrome, the function should return the integer 1. If not, it should return 0.","solution":"def check_palindrome(s): Reverses the input string and checks if it is a palindrome. Returns 1 if the reversed string is a palindrome, otherwise returns 0. reversed_s = s[::-1] if reversed_s == s: return 1 else: return 0"},{"question":"Create a function that takes an array \`a\` of real numbers and an integer \`n\`. It returns a new array \`b\` containing elements at even indices of array \`a\` and the last element of array \`a\`.","solution":"def even_indices_and_last(a, n): Returns a new array containing the elements at even indices of array a and the last element of array a. if not a: return a b = a[::2] # Get elements at even indices if len(a) % 2 == 0: b.append(a[-1]) # Append the last element if even indices do not already include it return b"},{"question":"Create a function that takes two numbers as input and returns the smallest of the two.","solution":"def smallest(a, b): Returns the smallest of the two numbers. return a if a < b else b"},{"question":"Create a function that takes a string as input and returns a list of words that are longer than 5 characters.","solution":"def long_words(sentence): Returns a list of words that are longer than 5 characters from the input sentence. return [word for word in sentence.split() if len(word) > 5]"},{"question":"Create a function that takes an array of integers and returns the minimum and maximum values in a single array where the first element is the minimum and the second element is the maximum value found in the input array.","solution":"def find_min_max(arr): Returns the minimum and maximum values in the input array. Parameters: arr (list of int): List of integers. Returns: list of int: List containing the minimum and maximum value, where the first element is the minimum and the second element is the maximum value. if not arr: raise ValueError(\\"Array should not be empty.\\") min_val = min(arr) max_val = max(arr) return [min_val, max_val]"},{"question":"Create a function that generates a table of prime numbers up to a given limit 'n' using Python. The function should return the count of prime numbers generated.","solution":"def generate_prime_table(n): Generates a table of prime numbers up to a given limit n and returns the count of prime numbers generated. if n < 2: return 0 sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False prime_count = sum(sieve) primes = [num for num, is_prime in enumerate(sieve) if is_prime] # Printing the prime number table print('Prime numbers up to', n, ':', primes) return prime_count"},{"question":"Create a function that takes a sentence as input and returns the frequency of each word in the sentence. The words in the sentence can be separated by spaces or commas. The function should also ignore the case and consider \\"hello\\" and \\"Hello\\" as the same word.","solution":"def word_frequency(sentence): Returns the frequency of each word in the sentence. The words in the sentence can be separated by spaces or commas and case is ignored. # Remove punctuation and convert to lower case sentence = sentence.replace(\\",\\", \\" \\").lower() words = sentence.split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Create a function that takes two integers as input and returns the sum of their squares. However, if one of the integers is divisible by 3, you should return the double of the sum of their squares.","solution":"def sum_of_squares(a, b): Returns the sum of the squares of a and b. If either a or b is divisible by 3, returns double the sum of their squares. sum_squares = a**2 + b**2 if a % 3 == 0 or b % 3 == 0: return 2 * sum_squares return sum_squares"},{"question":"Create a function that takes two arrays of integers as input and outputs an array containing the minimum elements from each pair of corresponding elements from the input arrays.","solution":"def min_elements(arr1, arr2): Returns an array containing the minimum elements from each pair of corresponding elements from the two input arrays. Parameters: arr1 (list of int): The first input array. arr2 (list of int): The second input array. Returns: list of int: An array containing the minimum elements from each pair of corresponding elements. return [min(a, b) for a, b in zip(arr1, arr2)]"},{"question":"Create a function that finds the maximum element in an array using recursion without using any built-in functions or libraries. The function should handle both positive and negative numbers.","solution":"def find_max_recursive(arr, current_max=None, index=0): Finds the maximum element in an array using recursion. :param arr: List of numbers :param current_max: The current maximum value found so far :param index: The current index in the array being checked :return: The maximum value in the array # Base case: if current index is out of the range of the array if index == len(arr): return current_max # At first call, initialize current_max with the first element if it was not provided if current_max is None: current_max = arr[0] # Update current_max if the current element is larger if arr[index] > current_max: current_max = arr[index] # Recursive call to the next element return find_max_recursive(arr, current_max, index + 1)"},{"question":"Create a function that calculates the sum of all even numbers in a list and returns the sum. If the list contains non-integer values, the function should raise a ValueError. Additionally, the function should handle empty lists by returning 0.","solution":"def sum_of_even_numbers(lst): Returns the sum of all even numbers in the list. Raises a ValueError if the list contains non-integer values. if not all(isinstance(x, int) for x in lst): raise ValueError(\\"List contains non-integer values\\") return sum(x for x in lst if x % 2 == 0)"},{"question":"Create a function that takes in an array of integers, and returns the maximum sum of any non-empty subarray within that array.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any non-empty subarray within the array. Uses Kadane's Algorithm for an efficient solution. :param nums: List of integers :return: Integer representing the maximum subarray sum if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes a variable number of arguments and prints each argument in reverse order.","solution":"def print_reversed(*args): Prints each argument in reverse order. for arg in args: print(str(arg)[::-1])"},{"question":"Create a function that takes an array of integers as input and returns the cumulative sum of the squares of each even number in the array. Here is the sample image. I'm unable to upload images in this format.","solution":"def cumulative_sum_of_squares(arr): Returns the cumulative sum of squares of each even number in the array. sum_squares = 0 result = [] for num in arr: if num % 2 == 0: sum_squares += num ** 2 result.append(sum_squares) return result"},{"question":"Create a function that takes a list of strings as input and returns a new list with the strings sorted in ascending order. However, the sorting should be case-insensitive, meaning that 'apple' and 'Apple' should be considered equal when sorting. The function should also handle special characters and numbers in alphanumeric strings correctly.","solution":"def case_insensitive_sort(strings): Returns a new list with the strings sorted in ascending order, considering case-insensitivity. Parameters: strings (list of str): The list of strings to be sorted. Returns: list of str: A new list with the sorted strings. return sorted(strings, key=lambda s: s.lower())"},{"question":"Create a function that takes a list of integers as input and returns the mode of the list. If the list contains multiple modes, return all of them in a list. The function should handle an empty list gracefully by returning \`None\`.","solution":"from collections import Counter def find_modes(lst): Returns the mode(s) of a list of integers. If no mode is found (empty list), returns None. Parameters: lst (list): A list of integers. Returns: int or list of int: The mode if there is only one mode, or a list of modes if there are multiple. If the list is empty, returns None. if not lst: return None count = Counter(lst) max_freq = max(count.values()) modes = [key for key, value in count.items() if value == max_freq] if len(modes) == 1: return modes[0] return modes"},{"question":"Create a function that takes an integer array and returns the maximum sum of any subsequence such that the subsequence elements are sorted in non-decreasing order.","solution":"def max_sum_increasing_subsequence(arr): Returns the maximum sum of any subsequence such that the subsequence elements are sorted in non-decreasing order. n = len(arr) # Base case if n == 0: return 0 # Create an array to store results of subproblems max_sum = arr.copy() # Iterate over the array to process all elements for i in range(1, n): for j in range(i): # Update max_sum[i] if arr[i] is greater than arr[j] and # max_sum[i] is less than the sum of max_sum[j] and arr[i] if arr[i] > arr[j] and max_sum[i] < max_sum[j] + arr[i]: max_sum[i] = max_sum[j] + arr[i] # Return the maximum value in max_sum array return max(max_sum)"},{"question":"Create a function that checks if a given list of integers is sorted in non-decreasing order. The function should return \`true\` if the list is sorted in non-decreasing order, and \`false\` otherwise. Non-decreasing order means that adjacent elements in the list should satisfy the condition \`list[i] <= list[i+1]\` for all valid \`i\`.","solution":"def is_sorted_non_decreasing(arr): Returns \`True\` if the list \`arr\` is sorted in non-decreasing order, otherwise \`False\`. for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return False return True"},{"question":"Create a function that takes a list of integers and returns a list of tuples, where each tuple contains an integer and its frequency in the input list.","solution":"from collections import Counter def integer_frequencies(int_list): Takes a list of integers and returns a list of tuples, where each tuple contains an integer and its frequency in the input list. count = Counter(int_list) return list(count.items())"},{"question":"Create a function that squares a matrix in Python using the NumPy library.","solution":"import numpy as np def square_matrix(matrix): Returns the square of the given matrix. Parameters: matrix (numpy.ndarray): A square numpy matrix. Returns: numpy.ndarray: The square of the input matrix. return np.dot(matrix, matrix)"},{"question":"Create a function that generates a Fibonacci sequence using recursion. The function should be able to take an integer input \`n\`, and return a list containing the first \`n\` numbers of the Fibonacci sequence.","solution":"def fibonacci(n): Returns a list containing the first n numbers of the Fibonacci sequence using recursion. def fib_helper(a, b, n, sequence): if n == 0: return sequence return fib_helper(b, a + b, n - 1, sequence + [a]) return fib_helper(0, 1, n, [])"},{"question":"Create a function that takes two dates as input and returns the number of days between them. You can use any programming language you prefer, but Python is recommended.","solution":"from datetime import datetime def days_between_dates(date1, date2): Returns the number of days between two dates. Args: date1: string in 'YYYY-MM-DD' format date2: string in 'YYYY-MM-DD' format Returns: int: Number of days between the two dates d1 = datetime.strptime(date1, '%Y-%m-%d') d2 = datetime.strptime(date2, '%Y-%m-%d') difference = abs((d2 - d1).days) return difference"},{"question":"Create a function that takes a number and returns its square root.","solution":"import math def square_root(num): Returns the square root of the given number. If the number is negative, return None. if num < 0: return None return math.sqrt(num)"},{"question":"Create a function that takes a number as an argument and prints out the Fibonacci sequence up to that number. The function should be able to handle a maximum of 10 iterations. If the number provided is not a valid number or is greater than 10, the function should print an error message.","solution":"def fibonacci_sequence(n): Prints the Fibonacci sequence up to the given number of iterations (maximum 10). If n is not a valid number or greater than 10, prints an error message. if not isinstance(n, int) or n < 1 or n > 10: print(\\"Error: Please provide a valid number between 1 and 10.\\") return [] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) print(sequence[:n]) return sequence[:n]"},{"question":"Create a function that takes a string as input and returns the string in a case-insensitive alphabetical order. Sort the characters in the string such that all uppercase letters come first, followed by all lowercase letters, and each group is sorted alphabetically.","solution":"def sort_string(s): Takes a string as input and returns the string with uppercase letters sorted alphabetically followed by lowercase letters sorted alphabetically. upper_part = ''.join(sorted([char for char in s if char.isupper()])) lower_part = ''.join(sorted([char for char in s if char.islower()])) return upper_part + lower_part"},{"question":"Create a function that takes a list of strings and returns a new list with the strings that contain the character 'a'.","solution":"def filter_strings_with_a(strings): Takes a list of strings and returns a new list with the strings that contain the character 'a'. Parameters: strings (list): A list of strings. Returns: list: A new list with the strings that contain the character 'a'. return [s for s in strings if 'a' in s]"},{"question":"Create a function that takes two lists of integers, \`lst1\` and \`lst2\`, and an integer \`k\`. The function should return a single list that is the concatenation of the first \`k\` elements of \`lst1\` and the remaining elements of \`lst2\`.","solution":"def concatenate_lists(lst1, lst2, k): Concatenates the first k elements of lst1 with the remaining elements of lst2. Parameters: - lst1: First list of integers. - lst2: Second list of integers. - k: Number of elements to take from the beginning of lst1. Returns: A new list that is the concatenation of the first k elements of lst1 and the remaining elements of lst2. return lst1[:k] + lst2"},{"question":"Create a function that takes a number as input and returns the sum of all the digits in the number. If the number is negative, the function should return the sum of the digits considering the negative sign as a digit (e.g., for -123, it should return 1+2+3+1=7).","solution":"def sum_of_digits(num): Returns the sum of all digits in the number. If the number is negative, the negative sign is considered as an additional digit. num_str = str(num) sum_digits = sum(int(digit) for digit in num_str if digit.isdigit()) if num < 0: sum_digits += 1 # Adding the digit for the negative sign return sum_digits"},{"question":"Create a function that accepts two arrays, \`arr1\` and \`arr2\`, and returns a new array containing the unique elements from both arrays. The unique elements are those that appear in at least one of the arrays, but should not be duplicated in the result.","solution":"def unique_elements(arr1, arr2): Returns a list containing the unique elements from both input arrays. return list(set(arr1) | set(arr2))"},{"question":"Create a function that converts a binary number to an integer. The function should take a string representing a binary number and return the corresponding integer. The binary number can be of arbitrary length.","solution":"def binary_to_integer(binary_str): Converts a binary number (as a string) to an integer. :param binary_str: A string representing a binary number. :return: The corresponding integer. return int(binary_str, 2)"},{"question":"Create a function that generates all possible subsets of a given set of integers. How can I implement this in Python?","solution":"from itertools import chain, combinations def generate_subsets(s): Generates all possible subsets of a given set of integers. :param s: A list of integers :return: A list of lists, where each inner list is a subset of the input set return list(chain.from_iterable(combinations(s, r) for r in range(len(s)+1)))"},{"question":"Create a function that takes in a number of seconds and converts it into hours, minutes, and seconds.","solution":"def convert_seconds(seconds): Converts given seconds into hours, minutes, and remaining seconds. Parameters: seconds (int): The number of seconds to convert. Returns: tuple: A tuple containing (hours, minutes, seconds). hours = seconds // 3600 minutes = (seconds % 3600) // 60 seconds = seconds % 60 return hours, minutes, seconds"},{"question":"Create a function that will search through a sorted array of integers and return the index of the target number. If the target number is not found, return -1. The function should use the binary search algorithm.","solution":"def binary_search(arr, target): Performs binary search on a sorted array to find the index of the target number. Returns the index if the target is found, otherwise returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that accepts two integers, say X and Y, and returns the sum of their greatest common divisor (GCD) and least common multiple (LCM). The function should be efficient in terms of time complexity.","solution":"import math def gcd_and_lcm_sum(x, y): Returns the sum of the greatest common divisor (GCD) and the least common multiple (LCM) of two integers x and y. gcd_value = math.gcd(x, y) lcm_value = abs(x * y) // gcd_value if gcd_value != 0 else 0 # Handling zero in multiplication return gcd_value + lcm_value"},{"question":"Create a function that takes an array of integers as input and returns a new array containing only the even numbers from the original array, but with a twist: each even number in the new array should be tripled. For example, if the input array contains \`[2, 3, 5, 6]\`, the function should return \`[6, 18]\` (since 2 is tripled to 6 and 6 is tripled to 18, while 3 and 5 are odd and thus not included).","solution":"def triple_evens(arr): Takes an array of integers and returns a new array containing only the even numbers, each tripled. Parameters: arr (list): A list of integers. Returns: list: A new list with tripled even numbers. return [x * 3 for x in arr if x % 2 == 0]"},{"question":"Create a function that takes an integer as an input and outputs the Fibonacci sequence up to that integer. The sequence should be returned as a list.","solution":"def fibonacci_up_to(n): Returns the Fibonacci sequence up to the given integer n (inclusive, if n is part of the sequence). if n <= 0: return [] sequence = [0, 1] while True: next_value = sequence[-1] + sequence[-2] if next_value > n: break sequence.append(next_value) return sequence"},{"question":"Create a function that takes a positive integer as input and returns the sum of its digits. If the sum is a single digit, return the sum. If the sum is more than one digit, continue to sum the digits until a single digit is obtained. This single digit result should be returned as the final output.","solution":"def sum_of_digits(n): Returns the sum of the digits of n until a single digit is obtained. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"Create a function that takes an integer as an input and returns a string that represents a binary number. The binary string should be of a minimum length of 8 characters, padded with leading zeros if necessary.","solution":"def int_to_binary_string(n): Converts an integer to a binary string with at least 8 characters, padded with leading zeros if necessary. return format(n, '08b')"},{"question":"Create a function that determines the number of unique characters in a string, ignoring spaces.","solution":"def count_unique_characters(s): Returns the number of unique characters in the given string, ignoring spaces. # Create a set to store unique characters unique_chars = set() # Iterate over each character in the string for char in s: if char != ' ': # Ignore spaces unique_chars.add(char) # Return the size of the unique character set return len(unique_chars)"},{"question":"Create a function that calculates the minimum number of coins needed to make up a given amount. The function should take in an array of coin denominations and the target amount, and return the minimum number of coins required to make up the target amount. If it's not possible to make up the target amount with the given coins, the function should return -1.","solution":"def min_coins(coins, amount): Returns the minimum number of coins needed to make up the given amount. If it's not possible to make up the amount with the given coins, returns -1. :param coins: List[int] :param amount: int :return: int # Initialize an array to store the minimum number of coins for each amount up to the target amount. dp = [float('inf')] * (amount + 1) dp[0] = 0 # Base case: 0 coins are needed to make up amount 0. # Loop through each coin denomination for coin in coins: # Loop through each amount from coin to target amount for x in range(coin, amount + 1): # Calculate the minimum number of coins needed to make up the amount x dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Create a function that takes an array of integers as input and returns the index of the first occurrence of the maximum value in the array. If the array is empty, return -1.","solution":"def index_of_first_max(arr): Returns the index of the first occurrence of the maximum value in the array. If the array is empty, returns -1. if not arr: return -1 max_value = max(arr) return arr.index(max_value)"},{"question":"Create a function that takes a list of names and returns the shortest name in the list. If there are multiple names with the same shortest length, return the first one encountered. If the list is empty, return an empty string. Handle cases with mixed cases (e.g., \\"Alice\\", \\"bob\\").","solution":"def shortest_name(names): Returns the shortest name in the list. If there are multiple names with the same shortest length, return the first one encountered. If the list is empty, return an empty string. if not names: return \\"\\" shortest = names[0] for name in names[1:]: if len(name) < len(shortest): shortest = name return shortest"},{"question":"Create a function that generates a JSON response containing weather data based on a given city name.","solution":"import json def get_weather_data(city_name): Generates a JSON response containing weather data based on a given city name. # For the sake of this task, we will simulate weather data. # In a real-world scenario, you would fetch this data from a weather API. weather_data = { \\"city\\": city_name, \\"weather\\": { \\"temperature\\": 20, # Sample data \\"description\\": \\"Clear\\", # Sample data \\"humidity\\": 60 # Sample data } } return json.dumps(weather_data)"},{"question":"Create a function that takes two arguments, x and y, and checks whether the value of x is an even number and the value of y is a multiple of 3. The function should return \`True\` if both conditions are met, and \`False\` otherwise.","solution":"def check_even_and_multiple_of_three(x, y): Returns True if x is an even number and y is a multiple of 3. Otherwise, returns False. return x % 2 == 0 and y % 3 == 0"},{"question":"Create a function that takes two parameters: a string and an integer. The function should return a substring of the string that starts from a given index and has the specified length.","solution":"def get_substring(s: str, start_index: int, length: int) -> str: Returns a substring of string \`s\` starting from \`start_index\` with the specified \`length\`. Parameters: s (str): The original string. start_index (int): The starting index for the substring. length (int): The length of the substring. Returns: str: The resulting substring. return s[start_index:start_index + length]"},{"question":"Create a function that takes two integers as parameters and returns the sum of their squares. Write a Python code snippet for it.","solution":"def sum_of_squares(a, b): Returns the sum of the squares of a and b. return a**2 + b**2"},{"question":"Create a function that takes a string as input and returns True if the string is a palindrome (i.e., it reads the same forward and backward), and False otherwise. A palindrome忽略大小写和空格。","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, False otherwise. A palindrome reads the same forward and backward, ignoring case and spaces. # Remove spaces and convert to lowercase filtered_s = ''.join(filter(str.isalnum, s)).lower() # Check if the string is equal to its reverse return filtered_s == filtered_s[::-1]"},{"question":"Create a function that compares two lists and returns a new list containing only the elements that are in both lists. The function should handle cases where the lists contain integers, strings, and mixed types. It should also provide a message indicating when no common elements are found.","solution":"def find_common_elements(list1, list2): Returns a list containing only the elements that are present in both list1 and list2. If no common elements are found, returns an empty list. # Find the common elements using set intersection common_elements = list(set(list1) & set(list2)) # Return the list of common elements or an empty list if there are no common elements return common_elements"},{"question":"Create a function that takes an array of integers \`nums\`, and an integer \`target\`, and returns the indices of the two numbers such that they add up to \`target\`.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to target. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return None # If no solution is found"},{"question":"Create a function that takes an integer n as parameter and returns an array containing integers from 1 to n inclusive. If the input number n is less than 1, the function should return an empty array.","solution":"def generate_sequence(n): Returns a list containing integers from 1 to n inclusive. If n is less than 1, return an empty list. if n < 1: return [] return list(range(1, n + 1))"},{"question":"Create a function that generates a queue with a capacity to hold 1000 elements using coroutine methods in Python.","solution":"import collections import asyncio def coroutine(func): A decorator to create and initialize coroutines. def start(*args, **kwargs): cr = func(*args, **kwargs) next(cr) return cr return start @coroutine def queue(maxsize=1000): A coroutine function that generates a queue with a specified maximum size. By default, the maxsize is set to 1000 elements. q = collections.deque(maxlen=maxsize) while True: command, value = (yield q) if command == 'put': if len(q) < maxsize: q.append(value) elif command == 'get': if q: q.popleft() # Here is an example of how you might interact with the queue coroutine: # q = queue(1000) # # Put elements in the queue # q.send(('put', 1)) # q.send(('put', 2)) # # Get the queue's content # current_queue = q.send((None, None)) # # Retrieve an element from the queue # q.send(('get', None)) # # Check the updated queue's content # updated_queue = q.send((None, None))"},{"question":"Create a function that takes an array of numbers and a target number. The function should return true if there are two distinct indices i and j in the array such that numbers[i] + numbers[j] == target, and false otherwise. This is often referred to as the \\"two sum\\" problem.","solution":"def two_sum(nums, target): Check if there are two distinct indices i and j in the array such that nums[i] + nums[j] == target. Args: nums (list): List of integers. target (int): The target sum. Returns: bool: True if such a pair exists, otherwise False. seen = {} for i, number in enumerate(nums): complement = target - number if complement in seen: return True seen[number] = i return False"},{"question":"Create a function that finds the maximum number in a list. If the list is empty, the function should return \`None\` instead of \`-inf\`. How can I do this?","solution":"def find_max(numbers): Returns the maximum number in a list. If the list is empty, returns None. if not numbers: return None return max(numbers)"},{"question":"Create a function that takes in a list of names and returns a list of those names sorted alphabetically. The function should be case-insensitive and ignore any duplicate names. For example, if the input list includes duplicates like \\"Alice\\", \\"alice\\", and \\"Bob\\", the output should only include each name once, sorted alphabetically.","solution":"def sort_names(names): Sorts a given list of names alphabetically, case-insensitively, and removes duplicates. Args: names (list of str): List of names to be sorted. Returns: list of str: Sorted list of unique names. # Convert all names to lowercase and remove duplicates by using a set unique_names = set(name.lower() for name in names) # Sort the unique names sorted_names = sorted(unique_names) return sorted_names"},{"question":"Create a function that checks if a given string is a palindrome (a word, phrase, number, or other sequence of characters which reads the same forward and backward). If the string is a palindrome, return \\"Palindrome\\", otherwise return \\"Not a palindrome\\".","solution":"def is_palindrome(s): Checks if the given string s is a palindrome. Args: s (str): The string to check. Returns: str: \\"Palindrome\\" if the string is palindrome, \\"Not a palindrome\\" otherwise. cleaned_s = ''.join(e for e in s if e.isalnum()).lower() if cleaned_s == cleaned_s[::-1]: return \\"Palindrome\\" else: return \\"Not a palindrome\\""},{"question":"Create a function that takes a string and removes spaces from it. The function should also reverse the resulting string.","solution":"def remove_spaces_and_reverse(s): Removes spaces from the input string and returns the reversed string. return s.replace(' ', '')[::-1]"},{"question":"Create a function that finds and returns all the indices of a given element in a list.","solution":"def find_indices(lst, element): Returns a list of indices where the element is found in the list. Parameters: lst (list): The list to search within. element: The element to search for in the list. Returns: List[int]: A list of indices where the element is found. return [i for i, x in enumerate(lst) if x == element]"},{"question":"Create a function that converts a given number of seconds into minutes and seconds in this format 'MM:SS'. If the input number is less than 60, the function should display only seconds. For example, if the input is 10, the output should be '00:10'. If the input is 60, the output should be '01:00'. If the input is 75, the output should be '01:15'. If the input is 3600, the output should be '60:00'.","solution":"def convert_seconds(seconds): Converts a given number of seconds into minutes and seconds in the format 'MM:SS'. minutes = seconds // 60 remaining_seconds = seconds % 60 return f\\"{minutes:02}:{remaining_seconds:02}\\""},{"question":"Create a function that checks if a given array contains any duplicates within a specified 'k' distance from each other.","solution":"def contains_duplicates_within_k_dist(values, k): Determines if there are any duplicates within 'k' distance in the given array. :param values: List of elements to be checked :param k: Distance within which to check for duplicates :return: True if there are duplicates within 'k' distance, False otherwise seen = {} for i, value in enumerate(values): if value in seen and i - seen[value] <= k: return True seen[value] = i return False"},{"question":"Create a function that takes a string \`s\` and returns a list of all possible permutations of the string \`s\` as a list of strings.","solution":"from itertools import permutations def get_permutations(s): Returns a list of all possible permutations of the string s. perm = permutations(s) return [''.join(p) for p in perm]"},{"question":"Create a function that generates a string containing all the prime numbers less than n, concatenated together in ascending order.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def concatenate_primes(n): Generates a string containing all the prime numbers less than n, concatenated together in ascending order. primes = [str(i) for i in range(2, n) if is_prime(i)] return ''.join(primes)"},{"question":"Create a function that checks if a given list of numbers is a palindrome. A palindrome is a sequence that reads the same backward as forward. The function should ignore spaces, punctuation, and capitalization.","solution":"def is_palindrome_sequence(sequence): Returns True if the given list of numbers is a palindrome, False otherwise. return sequence == sequence[::-1]"},{"question":"Create a function that takes an array of integers as input and returns the sum of the array. If the array is empty, return 0. Please write this function using both iterative and recursive approaches.","solution":"def sum_array_iterative(arr): Returns the sum of the array using iterative approach. If the array is empty, return 0. total = 0 for num in arr: total += num return total def sum_array_recursive(arr): Returns the sum of the array using recursive approach. If the array is empty, return 0. if not arr: return 0 return arr[0] + sum_array_recursive(arr[1:])"},{"question":"Create a function that implements a Caesar cipher encryption. The function should take a string and an integer key as input and return the encrypted string.","solution":"def caesar_cipher(text, key): Encrypts the text using the Caesar cipher with the given key. Parameters: text (str): The text to be encrypted. key (int): The number of positions each character in the text is to be shifted. Returns: str: The encrypted text. result = [] for char in text: if char.isalpha(): shift = 65 if char.isupper() else 97 encrypted_char = chr((ord(char) + key - shift) % 26 + shift) result.append(encrypted_char) else: result.append(char) return ''.join(result)"},{"question":"Create a function that removes all the negative numbers in a list and returns the modified list. The function should be implemented in Python.","solution":"def remove_negatives(nums): Returns a list with all the negative numbers removed. Args: nums (list): List of integers. Returns: list: List of integers with all negative values removed. return [num for num in nums if num >= 0]"},{"question":"Create a function that takes in a string s and returns the reversed version of s.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Create a function that takes an integer and returns the smallest positive integer that is a multiple of the given integer and consists only of the digit 1.","solution":"def smallest_multiple_of_ones(n): Finds the smallest positive integer that is a multiple of n and consists only of the digit 1. Parameters: n (int): The integer for which we are finding the smallest multiple consisting only of the digit 1. Returns: int: The smallest multiple of n that consists only of the digit 1. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") multiple = 1 length = 1 while multiple % n != 0: multiple = multiple * 10 + 1 length += 1 return multiple"},{"question":"Create a function that returns the even numbers in a list, but only if they are greater than a certain value. The function should return these numbers sorted in ascending order.","solution":"def filter_and_sort_even_numbers(numbers, threshold): Returns a list of even numbers from the input list that are greater than the given threshold, sorted in ascending order. Args: numbers (list): A list of integers. threshold (int): An integer threshold. Returns: list: A sorted list of even integers greater than the threshold. even_numbers = [num for num in numbers if num % 2 == 0 and num > threshold] return sorted(even_numbers)"},{"question":"Create a function that checks if a string is a permutation of a palindrome. A permutation of a palindrome is a string that can be rearranged to form a palindrome. For example, the string \\"tactcoa\\" can be rearranged to form \\"tacocat\\", which is a palindrome. A string is a palindrome if it reads the same backward as forward. A string with an even length can have all characters in even counts, while a string with an odd length can have exactly one character with an odd count and the rest with even counts.","solution":"def is_permutation_of_palindrome(s): Checks if the input string is a permutation of a palindrome. from collections import Counter # Normalize the string by removing spaces and converting to lowercase normalized_str = s.replace(\\" \\", \\"\\").lower() # Count the frequency of each character char_count = Counter(normalized_str) # Check the number of characters with odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # If more than one character has an odd count, it can't be a permutation of a palindrome return odd_count <= 1"},{"question":"Create a function that takes three arguments (length, width, and height) and returns the volume of a cuboid with those dimensions.","solution":"def volume_of_cuboid(length, width, height): Calculate the volume of a cuboid. :param length: The length of the cuboid :param width: The width of the cuboid :param height: The height of the cuboid :return: The volume of the cuboid return length * width * height"},{"question":"Create a function that takes a string as input and returns a new string with all vowels removed. The funtion should be case-insensitive.","solution":"def remove_vowels(input_str): Removes all vowels from the input string in a case-insensitive manner. Parameters: input_str (str): The string from which vowels need to be removed. Returns: str: The input string with all vowels removed. vowels = \\"aeiouAEIOU\\" result = ''.join([char for char in input_str if char not in vowels]) return result"},{"question":"Create a function that takes two parameters: a list of numbers and a target sum. The function should calculate the number of unique pairs of numbers from the list that add up to the target sum. For example, given the list \`[1, 5, 7, -1]\` and the target sum \`6\`, the function should return \`2\` as the pairs are \`(1, 5)\` and \`(7, -1)\`.","solution":"def count_pairs_with_sum(numbers, target_sum): Returns the number of unique pairs of numbers from the list that add up to the target sum. seen = set() pairs = set() for number in numbers: complement = target_sum - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return len(pairs)"},{"question":"Create a function that takes a list of strings as input and returns the longest string in the list. If the list is empty, return an empty string. Provide a Python implementation along with a brief explanation of the function.","solution":"def longest_string(strings): Returns the longest string from the list of strings. If the list is empty, returns an empty string. Parameters: strings (list of str): List of strings. Returns: str: The longest string in the list or an empty string if the list is empty. if not strings: return \\"\\" return max(strings, key=len)"},{"question":"Create a function that takes two lists as input, where the first list represents the prices of a product, and the second list represents the days on which this product is available. Generate a dictionary where the keys are the prices of the product, and the values are lists of days when the product is available at that price.","solution":"def generate_price_day_dict(prices, days): Takes two lists: prices and days, and returns a dictionary where the keys are prices and the values are lists of days when the product is available at that price. Args: prices (list): A list of prices (floats or integers). days (list): A list of days (integers) corresponding to the prices. Returns: dict: A dictionary mapping each price to a list of days it's available. price_day_dict = {} for price, day in zip(prices, days): if price not in price_day_dict: price_day_dict[price] = [] price_day_dict[price].append(day) return price_day_dict"},{"question":"Create a function that finds and prints all the prime numbers less than a given number using the Sieve of Eratosthenes algorithm. The function should take a single integer as input and print all prime numbers less than that integer.","solution":"def sieve_of_eratosthenes(n): Prints all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False primes = [num for num in range(n) if sieve[num]] return primes"},{"question":"Create a function that calculates the total cost of items in a shopping list. The list contains tuples where the first element of each tuple is the number of items and the cost per item. For example, [(2, 3.5), (1, 5.99), (3, 1.49)].","solution":"def total_cost(shopping_list): Calculates the total cost of items in a shopping list. Args: shopping_list (list of tuple): The list contains tuples where the first element of each tuple is the number of items and the second element is the cost per item. Returns: float: The total cost of the items in the shopping list. return sum(quantity * price_per_item for quantity, price_per_item in shopping_list)"},{"question":"Create a function that takes in three arguments: start_index, end_index, and step. The function should return all the numbers from start_index to end_index (inclusive) in reverse order.","solution":"def reverse_range(start_index, end_index, step): Returns all the numbers from start_index to end_index (inclusive) in reverse order with the specified step. return list(range(end_index, start_index - 1, -step))"},{"question":"Create a function that receives two integers n and m as inputs and uses it to count the number of elements in the range [1, n] that are divisible by m. How would you approach this?","solution":"def count_divisibles(n, m): Counts the number of elements in the range [1, n] that are divisible by m. Parameters: n (int): The upper limit of the range. m (int): The divisor. Returns: int: The count of numbers divisible by m in the range [1, n]. if m == 0: raise ValueError(\\"The divisor m cannot be zero\\") count = 0 for i in range(1, n + 1): if i % m == 0: count += 1 return count"},{"question":"Create a function that takes in a list of strings and returns the longest string in the list if it exists. If there are multiple longest strings, return any one of them. If the list is empty, return None. Use Python.","solution":"def longest_string(strings): Returns the longest string in the list of strings. If there are multiple longest strings, returns any one of them. If the list is empty, returns None. Parameters: strings (list): A list of strings. Returns: str: The longest string in the list, or None if the list is empty. if not strings: return None return max(strings, key=len)"},{"question":"Create a function that takes in two integer arrays, \`array1\` and \`array2\`, as parameters. The function should return the sum of the first element of \`array1\` and the last element of \`array2\`.","solution":"def sum_first_and_last(array1, array2): Returns the sum of the first element of array1 and the last element of array2. :param array1: List of integers. :param array2: List of integers. :return: Sum of the first element of array1 and the last element of array2. if not array1 or not array2: raise ValueError(\\"Both arrays must contain at least one element.\\") return array1[0] + array2[-1]"},{"question":"Create a function that checks the type of the first element in a list and returns its type. If the list is empty, return a string \\"List is empty\\". If the type cannot be determined, return a string \\"Could not determine the type\\".","solution":"def check_first_element_type(lst): Checks the type of the first element in a list and returns its type. If the list is empty, returns \\"List is empty\\". If the type cannot be determined, returns \\"Could not determine the type\\". if not lst: return \\"List is empty\\" first_element = lst[0] if isinstance(first_element, (str, int, float, bool, list, dict, tuple, set)): return type(first_element).__name__ return \\"Could not determine the type\\""},{"question":"Create a function that takes a list and returns the second largest number in the list. If the list is empty or has only one element, return \`None\`.","solution":"def second_largest(nums): Returns the second largest number in the list. If the list is empty or has only one element, return None. if len(nums) < 2: return None first, second = float('-inf'), float('-inf') for num in nums: if num > first: first, second = num, first elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Create a function that takes an integer \`n\` as input and returns the sum of all distinct combinations of two numbers from a list of numbers ranging from 1 to \`n\`.","solution":"from itertools import combinations def sum_of_combinations(n): Returns the sum of all distinct combinations of two numbers from a list of numbers ranging from 1 to n. if n < 2: return 0 numbers = list(range(1, n + 1)) combs = combinations(numbers, 2) total_sum = sum(sum(pair) for pair in combs) return total_sum"},{"question":"Create a function that takes an integer as an argument and returns the sum of all integers from 1 to the given number.","solution":"def sum_integers(n): Returns the sum of all integers from 1 to n. If n is less than 1, the function returns 0. if n < 1: return 0 return n * (n + 1) // 2"},{"question":"Create a function that , given an integer \`n\`, returns a new function, say \`f(x)\`, such that applying \`f(x)\` returns \`(x+n)\`.","solution":"def create_adder(n): Returns a function f(x) such that f(x) = x + n. def adder(x): return x + n return adder"},{"question":"Create a function that takes in an array of integers and returns the missing integer in the sequence. The sequence starts from 1 and the integers in the array are in no particular order. For example, given the array [3, 4, 2, 5], the function should return 1 as 1 is the missing integer in the sequence from 1 to 5.","solution":"def find_missing_integer(arr): Given an array of integers, this function returns the missing integer in the sequence starting from 1. n = len(arr) + 1 total_sum = n * (n + 1) // 2 array_sum = sum(arr) return total_sum - array_sum"},{"question":"Create a function that finds the longest increasing subsequence (LIS) of a given sequence of integers, where a subsequence is defined as a sequence that can be derived from the original sequence by deleting some or no elements without changing the order of the remaining elements. For example, for the sequence [10, 9, 2, 5, 3, 7, 101, 18], the LIS is [2, 3, 7, 101].","solution":"def length_of_lis(nums): Computes the length of the longest increasing subsequence in the list \`nums\`. :param nums: List[int] - the list of integers :return: int - the length of the LIS if not nums: return 0 lis = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Create a function that takes in a string and returns the most frequently occurring character. If multiple characters have the same highest frequency, return the character that comes first in lexicographical order.","solution":"def most_frequent_character(s): Returns the most frequently occurring character in the input string. If multiple characters have the same highest frequency, returns the character that comes first in lexicographical order. from collections import Counter if not s: return None frequency = Counter(s) most_common_freq = max(frequency.values()) most_common_chars = [char for char in frequency if frequency[char] == most_common_freq] return min(most_common_chars)"},{"question":"Create a function that defaults to returning \\"undefined\\" but can be given a parameter that it uses to return a specific value.","solution":"def return_value_or_undefined(value=None): Returns the provided value if given, otherwise returns \\"undefined\\". if value is None: return \\"undefined\\" return value"},{"question":"Create a function that determines whether the sum of a list of numbers is a perfect square. If the sum is a perfect square, return \`True\`. If not, return \`False\`.","solution":"import math def is_sum_perfect_square(nums): Determines whether the sum of a list of numbers is a perfect square. :param nums: List of integers. :return: True if the sum of the numbers is a perfect square, False otherwise. total_sum = sum(nums) sqrt_total_sum = int(math.isqrt(total_sum)) return sqrt_total_sum * sqrt_total_sum == total_sum"},{"question":"Create a function that takes a string as input and returns all possible combinations of the characters in the string.","solution":"from itertools import combinations def string_combinations(s): Generates all possible combinations of characters in the input string. :param s: The input string. :return: A list of all combinations of the string's characters. result = [] for r in range(1, len(s) + 1): for combo in combinations(s, r): result.append(''.join(combo)) return result"},{"question":"Create a function that calculates the sum of all natural numbers from 1 to n using recursion. The function should be named \`sum_natural_numbers\` and should take one integer parameter \`n\`. The function should have a default value of 1 for \`n\`.","solution":"def sum_natural_numbers(n = 1): Returns the sum of all natural numbers from 1 to n using recursion. if n <= 1: return n else: return n + sum_natural_numbers(n - 1)"},{"question":"Create a function that returns true if all characters in a given string are unique, and false if any character appears more than once.","solution":"def all_unique_characters(s): Returns True if all characters in the string are unique, otherwise False. return len(s) == len(set(s))"},{"question":"Create a function that takes a dictionary as input and returns the top three keys with the highest values. If there are less than three keys, return all keys with their values sorted in descending order.","solution":"def top_three_keys(d): Returns the top three keys with the highest values in the dictionary. If there are less than three keys, returns all keys sorted by their values in descending order. sorted_items = sorted(d.items(), key=lambda item: item[1], reverse=True) return sorted_items[:3]"},{"question":"Create a function that takes a length and a width and outputs a polygon with those dimensions. Assuming a square for simplicity. For additional programming practice, create a user interface where the user can input the length and width, and display the resulting polygon. You can use any library you prefer.","solution":"import matplotlib.pyplot as plt import numpy as np def create_polygon(length, width): Creates a polygon (for simplicity, a rectangle) with the given length and width. Parameters: - length: The length of the polygon. - width: The width of the polygon. Returns: - A list of vertices representing the polygon. # Vertices of a rectangle assuming the rectangle is parallel to the x and y axes vertices = [(0, 0), (width, 0), (width, length), (0, length), (0, 0)] return vertices def plot_polygon(vertices): Plots the polygon using the provided vertices. Parameters: - vertices: A list of (x, y) tuples representing the vertices of the polygon. x, y = zip(*vertices) plt.plot(x, y, marker='o') plt.title('Polygon (Rectangle)') plt.xlabel('Width') plt.ylabel('Length') plt.grid() plt.show() # User Interface def user_interface(): try: length = float(input(\\"Enter the length of the polygon: \\")) width = float(input(\\"Enter the width of the polygon: \\")) vertices = create_polygon(length, width) plot_polygon(vertices) except ValueError: print(\\"Invalid input. Please enter numeric values for length and width.\\") # Uncomment the following line to run the user interface # user_interface()"},{"question":"Create a function that takes a list of non-negative integers and returns a new list with the numbers sorted based on the sum of their digits. If two numbers have the same digit sum, they should appear in the same order as they in the original list.","solution":"def sort_by_digit_sum(nums): Sorts a list of non-negative integers based on the sum of their digits. Parameters: nums (List[int]): The list of non-negative integers to be sorted. Returns: List[int]: A new list with the numbers sorted based on the sum of their digits. def digit_sum(n): return sum(int(digit) for digit in str(n)) return sorted(nums, key=digit_sum)"},{"question":"Create a function that will return the count of distinct elements in a list.","solution":"def count_distinct_elements(lst): Returns the count of distinct elements in the list. return len(set(lst))"},{"question":"Create a function that calculates the sum of numbers in a given range [start, end] that are divisible by either 3 or 5.","solution":"def sum_of_divisibles(start, end): Returns the sum of numbers in the range [start, end] that are divisible by either 3 or 5. Parameters: - start (int): Starting number of the range (inclusive). - end (int): Ending number of the range (inclusive). Returns: - int: Sum of applicable numbers. return sum(x for x in range(start, end + 1) if x % 3 == 0 or x % 5 == 0)"},{"question":"Create a function that takes a string as input and returns a new string with all the vowels capitalized. For example, if the input string is \\"hello world\\", the output should be \\"hEllO wOrLD\\". Please ensure your solution is efficient and handles edge cases.","solution":"def capitalize_vowels(s): Returns a new string with all the vowels in the input string capitalized. Args: s (str): The input string. Returns: str: A new string with the vowels capitalized. vowels = 'aeiou' return ''.join(char.upper() if char.lower() in vowels else char for char in s)"},{"question":"Create a function that takes two list of numbers (of equal length) and outputs a list of numbers which are obtained by multiplying the number at each corresponding index in the input lists.","solution":"def multiply_lists(list1, list2): Returns a list which contains the product of numbers at corresponding positions in two input lists. :param list1: List of numbers. :param list2: List of numbers. :return: List of products. if len(list1) != len(list2): raise ValueError(\\"Both lists must be of the same length\\") return [a * b for a, b in zip(list1, list2)]"},{"question":"Create a function that takes an integer as an input and returns the sum of its digits. If the number is negative, ignore the minus sign and still sum the digits of the absolute value of the number.","solution":"def sum_of_digits(n): Returns the sum of the digits of the given integer n. If n is negative, the minus sign is ignored. # Convert the number to its absolute value and convert to string digits_str = str(abs(n)) # Sum the digits return sum(int(digit) for digit in digits_str)"},{"question":"Create a function that takes an integer array and a target value, then returns the index of the array element that is closest to the target value. If there are multiple elements with the same minimum distance, the function should return the index of the first occurrence.","solution":"def closest_element_index(arr, target): Returns the index of the array element that is closest to the target value. If there are multiple elements with the same minimum distance, returns the index of the first occurrence. if not arr: return -1 # If the array is empty, return -1 min_diff = float('inf') closest_index = -1 for i, val in enumerate(arr): diff = abs(val - target) if diff < min_diff: min_diff = diff closest_index = i return closest_index"},{"question":"Create a function that takes two parameters, an integer and a string, and returns a list of indices in the string where the integer is found as a substring. For example, if the first parameter is 5 and the second parameter is \\"banana\\", the function should return [1, 3, 5] because '5' is not found in \\"banana\\", but if the parameters are 5 and \\"a5banana5b\\", the function should return [2, 4, 7].","solution":"def find_substring_indices(integer, string): Returns a list of indices where the integer is found as a substring in the given string. :param integer: int, integer to find as a substring :param string: str, the string to search in :return: list of int, indices where the integer is found as a substring target = str(integer) indices = [] index = string.find(target) while index != -1: indices.append(index) index = string.find(target, index + 1) return indices"},{"question":"Create a function that takes in an array of numbers and returns the second highest number in the array. If there is no second highest number (i.e., the array has less than 2 unique numbers), the function should return \`None\`.","solution":"def second_highest(numbers): Returns the second highest number in the list of numbers. If there is no second highest number (i.e., the array has less than 2 unique numbers), return None. unique_numbers = set(numbers) if len(unique_numbers) < 2: return None sorted_numbers = sorted(unique_numbers, reverse=True) return sorted_numbers[1]"},{"question":"Create a function that takes a string as input and returns the string with all vowels replaced by a specified character. You are allowed to choose a replacement for vowels from the alphabet other than 'a', 'e', 'i', 'o', or 'u'. In this case, let's use the letter 'x' as a replacement.","solution":"def replace_vowels(input_string): Replaces all vowels in the input string with the character 'x'. vowels = 'aeiouAEIOU' result = [] for char in input_string: if char in vowels: result.append('x') else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes a list of strings and returns a dictionary with the count of each unique string.","solution":"def count_unique_strings(strings): Takes a list of strings and returns a dictionary with the count of each unique string. Parameters: strings (list): A list of strings. Returns: dict: A dictionary with keys as unique strings and values as their counts. string_counts = {} for string in strings: if string in string_counts: string_counts[string] += 1 else: string_counts[string] = 1 return string_counts"},{"question":"Create a function that gives the count of prime numbers less than n.","solution":"def count_primes_less_than(n): Returns the count of prime numbers less than n. if n <= 2: return 0 is_prime = [True] * n is_prime[0], is_prime[1] = False, False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i*i, n, i): is_prime[j] = False return sum(is_prime)"},{"question":"Create a function that checks if a list contains only numbers. You should return a boolean value indicating if all elements in the list are numbers (integers or floats).","solution":"def all_numbers(lst): Checks if the list contains only numbers (integers or floats). Args: lst (List): The list to check. Returns: bool: True if all elements are numbers, False otherwise. return all(isinstance(x, (int, float)) for x in lst)"},{"question":"Create a function that takes a list of integers as input and returns the number of unique elements in the list. A unique element is defined as an element that appears only once in the list.","solution":"def count_unique_elements(lst): Returns the number of unique elements in the list. A unique element is an element that appears only once in the list. Parameters: lst (list of int): The input list of integers. Returns: int: The number of unique elements in the list. from collections import Counter count = Counter(lst) return sum(1 for value in count.values() if value == 1)"},{"question":"Create a function that takes an array of integers as an argument and returns the index of the first occurrence of the smallest integer in the array. If the smallest integer is not found, return -1.","solution":"def find_index_of_smallest(arr): Returns the index of the first occurrence of the smallest integer in the array. If the smallest integer is not found, returns -1. if not arr: return -1 smallest = min(arr) return arr.index(smallest)"},{"question":"Create a function that shuffles an input array and returns the shuffled array.","solution":"import random def shuffle_array(arr): Shuffles the input array and returns the shuffled array. shuffled_arr = arr[:] random.shuffle(shuffled_arr) return shuffled_arr"},{"question":"Create a function that takes a list of integers, where some integers can appear more than once, and return a list of unique integers that appear in the given list. The order of the unique integers in the returned list should be the same as they first appear in the input list.","solution":"def unique_elements(lst): Returns the list of unique elements in the order they first appear in the input list. Parameters: lst (list): A list of integers. Returns: list: A list of unique integers. seen = set() unique_list = [] for num in lst: if num not in seen: unique_list.append(num) seen.add(num) return unique_list"},{"question":"Create a function that takes in a list of numbers and returns the most frequent number in that list. If there are multiple numbers that occur the maximum number of times, return all of them in a list.","solution":"from collections import Counter def most_frequent(numbers): Returns the most frequent number(s) in the list. If there's a tie, returns all in a list. if not numbers: return [] # Count the frequency of each number frequency = Counter(numbers) # Find the maximum frequency max_frequency = max(frequency.values()) # Collect all numbers that have the maximum frequency most_frequent_numbers = [num for num, freq in frequency.items() if freq == max_frequency] # If only one number has the maximum frequency, return it directly if len(most_frequent_numbers) == 1: return most_frequent_numbers[0] return most_frequent_numbers"},{"question":"Create a function that generates n random numbers between a specified minimum and maximum value. The function should return these numbers as a list. Additionally, implement a check function that verifies the correctness of the generated function.","solution":"import random def generate_random_numbers(n, min_value, max_value): Generate n random numbers between min_value and max_value. Parameters: n (int): Number of random numbers to generate. min_value (int): Minimum value of the random numbers. max_value (int): Maximum value of the random numbers. Returns: list: List of n random numbers between min_value and max_value. if n <= 0 or min_value > max_value: return [] return [random.randint(min_value, max_value) for _ in range(n)] # Check function to verify the correctness of the generate_random_numbers function def check_random_numbers(numbers, n, min_value, max_value): Check the correctness of the generated random numbers. Parameters: numbers (list): List of generated random numbers. n (int): Number of random numbers that were supposed to be generated. min_value (int): Minimum value of the random numbers. max_value (int): Maximum value of the random numbers. Returns: bool: True if the generation is correct, otherwise False. if len(numbers) != n: return False if any(not(min_value <= number <= max_value) for number in numbers): return False return True"},{"question":"Create a function that takes an integer n as input and prints all prime numbers up to n (inclusive). A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def primes_up_to(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0], sieve[1] = False, False # 0 and 1 are not prime numbers p = 2 while (p * p <= n): if sieve[p] == True: for i in range(p * p, n + 1, p): sieve[i] = False p += 1 return [p for p, is_prime in enumerate(sieve) if is_prime] # Example Usage: # primes = primes_up_to(10) # print(primes) # Output: [2, 3, 5, 7]"},{"question":"Create a function that will accept 2 arguments: an array of integers, and a single integer, \`n\`. The function should return a list of indices of the integers in the array that are greater than \`n\`.","solution":"def indices_greater_than(arr, n): Returns a list of indices of integers in the array \`arr\` that are greater than \`n\`. Parameters: arr (list of int): The array of integers to check. n (int): The reference integer. Returns: list of int: A list of indices where the integers in \`arr\` are greater than \`n\`. return [i for i, x in enumerate(arr) if x > n]"},{"question":"Create a function that searches for the first occurrence of a given value in an array using linear search. The function should return the index of the found element or -1 if the element is not found.","solution":"def linear_search(arr, target): Searches for the first occurrence of the target value in the array. Returns the index of the found element or -1 if the element is not found. for index, value in enumerate(arr): if value == target: return index return -1"},{"question":"Create a function that takes in two positive integers and returns the smaller of the two.","solution":"def smaller(a, b): Returns the smaller of two positive integers a and b. if a <= 0 or b <= 0: raise ValueError(\\"Both numbers must be positive integers\\") return a if a < b else b"},{"question":"Create a function that takes a string as an input and returns a new string where the case of each letter is inverted. Uppercase letters become lowercase, and lowercase letters become uppercase.","solution":"def invert_case(s): Returns a new string where the case of each letter is inverted. Uppercase letters become lowercase, and lowercase letters become uppercase. return ''.join([char.lower() if char.isupper() else char.upper() for char in s])"},{"question":"Create a function that takes a number as an argument and returns the factorial of that number using recursion. The function should also handle edge cases such as negative numbers and non-integers.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. Handles edge cases such as negative numbers and non-integers. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that takes two integer arrays as input, and determine whether there exists a pair of elements in these arrays whose sum is greater than or equal to 10. If such a pair exists, the function should return \`True\`; if no such pair exists, it should return \`False\`.","solution":"def pairs_greater_than_ten(arr1, arr2): This function checks whether there exists a pair of elements (one from each array) such that their sum is greater than or equal to 10. Parameters: arr1 (list of int): The first list of integers. arr2 (list of int): The second list of integers. Returns: bool: True if there is a pair whose sum is greater than or equal to 10, otherwise False. for num1 in arr1: for num2 in arr2: if num1 + num2 >= 10: return True return False"},{"question":"Create a function that takes a string as an parameter and returns \`True\` if the string reads the same forwards and backwards (a palindrome), else returns \`False\`.","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, otherwise False. return s == s[::-1]"},{"question":"Create a function that takes a string and returns a new string where each word's characters are sorted in alphabetical order.","solution":"def sort_words_characters(s): This function takes a string \`s\` and returns a new string where each word's characters are sorted in alphabetical order. words = s.split() sorted_words = [''.join(sorted(word)) for word in words] return ' '.join(sorted_words)"},{"question":"Create a function that takes no arguments. This function should check if the environment is running in a production environment and return a boolean value based on that.","solution":"import os def is_production_environment(): Checks if the current environment is a production environment. Returns True if the environment variable 'ENV' is set to 'production', otherwise False. return os.getenv('ENV') == 'production'"},{"question":"Create a function that takes in an array of integers and returns the product of all numbers in the array. For example, given the array [2, 3, 4], the function should return 24 (since 2*3*4 = 24).","solution":"def product_of_array(arr): Returns the product of all numbers in the array. Parameters: arr (list of int): List of integers Returns: int: Product of all integers in the array if not arr: return 0 # Zero total product for empty array product = 1 for num in arr: product *= num return product"},{"question":"Create a function that takes a list of integers and returns a new list of the same integers, but sorted in descending order. However, the sorting should not be done using built-in sort functions. Instead, implement the sorting using the bubble sort algorithm.","solution":"def bubble_sort_descending(arr): Sorts a list of integers in descending order using the bubble sort algorithm. Parameters: arr (list): List of integers to be sorted. Returns: list: New list of integers sorted in descending order. n = len(arr) sorted_arr = arr[:] for i in range(n): for j in range(0, n-i-1): if sorted_arr[j] < sorted_arr[j+1]: sorted_arr[j], sorted_arr[j+1] = sorted_arr[j+1], sorted_arr[j] return sorted_arr"},{"question":"Create a function that takes in an array of integers and returns the sum of all even numbers in the array. If there are no even numbers, return 0. The function should be optimized for performance and written in a functional programming style.","solution":"def sum_of_even_numbers(arr): Returns the sum of all even numbers in the array. If there are no even numbers, returns 0. :param arr: List[int] - A list of integers :return: int - Sum of even numbers return sum(filter(lambda x: x % 2 == 0, arr))"},{"question":"Create a function that takes a string as input and prints each character of the string in reverse order along with its index. The index should start from 0.","solution":"def reverse_string_with_index(s): Prints each character of the input string in reverse order along with its index. Index starts at 0. for index, char in enumerate(reversed(s)): print(f\\"Index: {index}, Character: {char}\\")"},{"question":"Create a function that takes an array of integers as input and returns the cumulative sum of all elements in the array. The function should be able to handle both positive and negative numbers.","solution":"def cumulative_sum(arr): Takes an array of integers and returns the cumulative sum of all the elements. :param arr: List[int] :return: List[int] cum_sum = [] current_sum = 0 for num in arr: current_sum += num cum_sum.append(current_sum) return cum_sum"},{"question":"Create a function that takes an integer represent the clock time in 24-hour format and return a string in a 12-hour format.","solution":"def convert_to_12_hour_format(hour_24): Converts a time given in 24-hour format to 12-hour format. :param hour_24: An integer representing the hour in 24-hour format (0-23) :return: A string representing the time in 12-hour format with AM/PM if hour_24 < 0 or hour_24 > 23: raise ValueError(\\"Hour must be between 0 and 23.\\") period = \\"AM\\" if hour_24 < 12 else \\"PM\\" hour_12 = hour_24 % 12 hour_12 = 12 if hour_12 == 0 else hour_12 return f\\"{hour_12} {period}\\""},{"question":"Create a function that takes an integer n as an argument and returns the sum of all odd numbers from 1 to n (inclusive). In Python, how would you write this function?","solution":"def sum_of_odds(n): Returns the sum of all odd numbers from 1 to n (inclusive). return sum(i for i in range(1, n + 1) if i % 2 != 0)"},{"question":"Create a function that takes a list of integers as input and returns a list where all the even numbers have been removed and only odd numbers remain.","solution":"def remove_evens(lst): Takes a list of integers and removes all the even numbers. Returns a list containing only odd numbers. return [num for num in lst if num % 2 != 0]"},{"question":"Create a function that takes in a message as a string parameter, and returns a tuple with the count of each unique character in the message. The function should ignore case sensitivity and non-alphabetic characters.","solution":"import string def count_unique_characters(message): Returns a tuple with the count of each unique character in the message. The function ignores case sensitivity and non-alphabetic characters. message = message.lower() counter = {} for char in message: if char in string.ascii_lowercase: if char in counter: counter[char] += 1 else: counter[char] = 1 return tuple(sorted((char, count) for char, count in counter.items()))"},{"question":"Create a function that calculates the sum of the squares of the first \`n\` natural numbers. The function should take an integer \`n\` as an argument and return the sum of squares.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. return sum(i ** 2 for i in range(1, n + 1))"},{"question":"Create a function that takes two positive numbers as input and returns their product.","solution":"def multiply(a, b): Returns the product of two positive numbers a and b. return a * b"},{"question":"Create a function that takes two integers as input and prints out whether one is bigger, smaller, or equal to the other.","solution":"def compare_numbers(a, b): Compares two integers and returns a string indicating their relation. if a > b: return \\"a is bigger than b\\" elif a < b: return \\"a is smaller than b\\" else: return \\"a is equal to b\\""},{"question":"Create a function that translates a sentence into Pig Latin. Pig Latin is a language game by which English words are altered. To form a Pig Latin word from an English word, the initial consonant cluster is removed from the beginning of the word and placed at the end, with \\"ay\\" added to the end, or if a word begins with a vowel, simply add \\"way\\" to the end of the word. For example, \\"hello\\" becomes \\"ellohay\\" and \\"world\\" becomes \\"orldway\\". Implement the following code in Python to achieve the functionality described above.","solution":"def translate_to_pig_latin(sentence): Translates a sentence into Pig Latin. Parameters: sentence (str): The sentence to translate. Returns: str: The translated sentence in Pig Latin. def pig_latin_word(word): vowels = \\"aeiou\\" if word[0].lower() in vowels: return word + \\"way\\" else: for i, letter in enumerate(word): if letter.lower() in vowels: return word[i:] + word[:i] + \\"ay\\" return word + \\"ay\\" # in case the word is all consonants, which is rare in English words = sentence.split() pig_latin_words = [pig_latin_word(word) for word in words] return ' '.join(pig_latin_words)"},{"question":"Create a function that takes a string and returns a new string in which every letter in the original string is replaced by the letter that is 2 places ahead in the alphabet. For example, 'a' becomes 'c', 'b' becomes 'd', 'z' wraps around to 'b'. The function should also handle lowercase and uppercase letters correctly.","solution":"def shift_letters_by_two(s): Returns a new string in which every letter in the original string is replaced by the letter that is 2 places ahead in the alphabet, wrapping around if necessary. result = [] for char in s: if char.isalpha(): if char.islower(): new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a')) else: new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A')) result.append(new_char) else: result.append(char) return ''.join(result)"},{"question":"Create a function that sorts an array of integers using the quicksort algorithm. The function should take an array of integers and return the sorted array.","solution":"def quicksort(arr): Sorts an array of integers using the quicksort algorithm. :param arr: List[int] - the array of integers to sort. :return: List[int] - the sorted array. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Create a function that takes two lists of integers as input and returns a new list that contains only the integers that are present in both lists, without duplicates.","solution":"def intersection_list(list1, list2): Returns a new list that contains only the integers that are present in both input lists, without duplicates. return list(set(list1) & set(list2))"},{"question":"Create a function that validates a string to determine if it is a valid time in the format \\"HH:MM\\". Here, \\"HH\\" should be between 00 and 23, and \\"MM\\" should be between 00 and 59. The function should return \\"Valid Time\\" if the string is a valid time, and \\"Invalid Time\\" otherwise. Consider both 24-hour-clock and 12-hour-clock formats but make sure your function works only for 24-hour-clock.","solution":"def validate_time(time_str): Validates if the given string is a valid time in the format \\"HH:MM\\". HH should be between 00 and 23, and MM should be between 00 and 59. Parameters: time_str (str): A string representing time. Returns: str: \\"Valid Time\\" if valid, \\"Invalid Time\\" if invalid. if len(time_str) != 5 or time_str[2] != ':': return \\"Invalid Time\\" hh, mm = time_str.split(':') if not (hh.isdigit() and mm.isdigit()): return \\"Invalid Time\\" hh = int(hh) mm = int(mm) if 0 <= hh <= 23 and 0 <= mm <= 59: return \\"Valid Time\\" else: return \\"Invalid Time\\""},{"question":"Create a function that takes an array and an integer as arguments, and returns true if the array contains the integer, and false otherwise.","solution":"def contains(array, number): Returns True if the array contains the integer number, False otherwise. return number in array"},{"question":"Create a function that converts a given string into a dictionary where each character in the string is a key and its value is the count of its occurrences in the string.","solution":"def convert_to_dict(s): Converts a given string into a dictionary where each character in the string is a key and its value is the count of its occurrences in the string. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Create a function that calculates the factorial of a number using recursion. The function should take an integer as an input and return the factorial of that number. Additionally, provide a simple test function to verify the correctness of your factorial function. The test function should check if the factorial function correctly calculates the factorial for various test cases, including 0, 1, and positive integers.","solution":"def factorial(n): Returns the factorial of n using recursion. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that takes a list of integers and returns the second tallest number in the list. If the list has less than 2 unique numbers, return None.","solution":"def second_tallest(numbers): Returns the second tallest number in the list. If the list has less than 2 unique numbers, return None. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[-2]"},{"question":"Create a function that calculates the number of vowels in a string. The string can contain both uppercase and lowercase letters. The function should return the total count of vowels found in the string.","solution":"def count_vowels(s): Returns the number of vowels in the input string \`s\`. Vowels are defined as 'a', 'e', 'i', 'o', 'u', in both uppercase and lowercase. vowels = \\"aeiouAEIOU\\" return sum(1 for char in s if char in vowels)"},{"question":"Create a function that can handle arrays or lists in Python","solution":"def handle_arrays(input_list): Returns the input list but modified to replace any nested lists with their sum. Parameters: - input_list (list): A list which may contain nested lists Returns: - list: Modified list where nested lists are replaced with their sum result = [] for item in input_list: if isinstance(item, list): result.append(sum(item)) else: result.append(item) return result"},{"question":"Create a function that checks if a given string contains only digits or not. Return true if the string contains only digits, otherwise return false.","solution":"def contains_only_digits(s): Returns True if the string s contains only digits, otherwise returns False. return s.isdigit()"},{"question":"Create a function that converts a list of integers to a list of their square roots. For example, if you call the function with a list \`[1, 4, 16]\`, it should return \`[1.0, 2.0, 4.0]\`.","solution":"import math def sqrt_list(numbers): Returns a list of square roots of the given list of numbers. Parameters: numbers (list of int): A list of integers. Returns: list of float: A list of square roots of the integers. return [math.sqrt(number) for number in numbers]"},{"question":"Create a function that reverses both strings within a list of strings without reversing the order of the strings themselves. For example, given the list [\\"abc\\", \\"def\\", \\"ghi\\"], the function should return [\\"cba\\", \\"fed\\", \\"ihg\\"].","solution":"def reverse_strings_in_list(strings): Reverses each string in the given list without changing the order of the strings. Parameters: strings (list of str): List of strings to be reversed. Returns: list of str: List of strings where each string is reversed. return [s[::-1] for s in strings]"},{"question":"Create a function that can take a list of tuples, where each tuple contains two integer elements. The function should return the sum of all the integers in the tuples.","solution":"def sum_of_tuples(tuples_list): Takes a list of tuples, where each tuple contains two integer elements. Returns the sum of all the integers in the tuples. return sum(sum(t) for t in tuples_list)"},{"question":"Create a function that calculates the area of a circle given its radius. The function should take in the radius as an argument and return the area.","solution":"import math def area_of_circle(radius): Returns the area of a circle given its radius. if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * radius ** 2"},{"question":"Create a function that takes a string and converts it to title case. In title case, the first letter of each word is capitalized, and the remaining letters are in lowercase. Words are defined as sequences of characters separated by whitespace.","solution":"def title_case(s): Convert a string to title case. Parameters: s (str): A string to be converted to title case. Returns: str: The string in title case. return ' '.join(word.capitalize() for word in s.split())"},{"question":"Create a function that sorts a list of numbers in ascending order using the quicksort algorithm. The function should take in a list of integers and sort them in increasing order. If the list is empty or contains only one element, it should return the list unchanged. If the list contains multiple elements, it should recursively sort the elements based on the quicksort principle.","solution":"def quicksort(arr): Sorts a list of numbers in ascending order using the quicksort algorithm. Parameters: arr (list): A list of integers to be sorted. Returns: list: A new list containing the sorted integers. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Create a function that takes a list of integers and returns a list of the cumulative product of these integers, including the product of the first number in the list as the first element in the returned list.","solution":"def cumulative_product(numbers): Returns a list of the cumulative product of a list of integers. Args: numbers (list): A list of integers Returns: list: A list where each element is the cumulative product up to that point in the input list cumulative_products = [] current_product = 1 for num in numbers: current_product *= num cumulative_products.append(current_product) return cumulative_products"},{"question":"Create a function that generates a list of the first \`n\` Fibonacci numbers.","solution":"def fibonacci(n): Generates a list of the first n Fibonacci numbers. Args: n (int): The number of Fibonacci numbers to generate. Returns: List[int]: A list containing the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fib_list = [0, 1] while len(fib_list) < n: fib_list.append(fib_list[-1] + fib_list[-2]) return fib_list"},{"question":"Create a function that calculates the sum of all the divisors of a given number, excluding the number itself. This function should be efficient for large numbers.","solution":"def sum_of_divisors(n): Calculate the sum of all divisors of a given number, excluding the number itself. Args: n (int): The number to calculate the sum of its divisors. Returns: int: Sum of all divisors of the given number, excluding the number itself. if n <= 1: return 0 total = 1 # 1 is a divisor for any n > 1 sqrt_n = int(n**0.5) for i in range(2, sqrt_n + 1): if n % i == 0: total += i if i != n // i: total += n // i return total"},{"question":"Create a function that input is two numbers, and print their sum, difference, product, and quotient. How can this function be written in Python?","solution":"def arithmetic_operations(a, b): Returns the sum, difference, product, and quotient of a and b. If b is zero, the quotient will be None. sum_ab = a + b difference_ab = a - b product_ab = a * b quotient_ab = a / b if b != 0 else None return sum_ab, difference_ab, product_ab, quotient_ab"},{"question":"Create a function that takes an array of numbers and returns the second largest number in the array. If the array has less than two numbers, return null.","solution":"def second_largest_number(arr): Returns the second largest number in the array. If the array has less than two numbers, return None. if len(arr) < 2: return None first, second = float('-inf'), float('-inf') for num in arr: if num > first: first, second = num, first elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Create a function that takes two matrices and multiplies them together using Python. The matrices should be represented as two-dimensional lists.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. Matrices are represented as two-dimensional lists. # Get the number of rows and columns for both matrices rows_A, cols_A = len(A), len(A[0]) rows_B, cols_B = len(B), len(B[0]) # Check if multiplication is possible if cols_A != rows_B: raise ValueError(\\"Number of columns in A must be equal to the number of rows in B\\") # Initialize the result matrix with zeroes result = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform matrix multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Create a function that takes in a list of strings and returns a new list where each string is reversed but in uppercase.","solution":"def reverse_and_uppercase(strings): Takes in a list of strings and returns a new list where each string is reversed and in uppercase. return [s[::-1].upper() for s in strings]"},{"question":"Create a function that , given an array of strings, returns a new array where each string is surrounded by asterisks.","solution":"def surround_with_asterisks(arr): Given an array of strings, returns a new array where each string is surrounded by asterisks. :param arr: List of strings :return: List of strings with asterisks surrounding each string return [f\\"*{string}*\\" for string in arr]"},{"question":"Create a function that implements the Caesar cipher. The function should take two arguments: a string and an integer that represents the shift amount. The function should return the encrypted string.","solution":"def caesar_cipher(text, shift): Encrypts the given text using the Caesar cipher algorithm with the specified shift. Parameters: text (str): The text to be encrypted. shift (int): The number of positions by which letters should be shifted. Returns: str: The encrypted text. encrypted_text = [] for char in text: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') encrypted_char = chr((ord(char) - shift_base + shift) % 26 + shift_base) encrypted_text.append(encrypted_char) else: encrypted_text.append(char) return ''.join(encrypted_text)"},{"question":"Create a function that takes a list of integers as input and returns a new list containing the cubes of each element in the input list. The function should also handle cases where the input list may contain non-integer values. To handle non-integer values, the function should skip over them and only process integer values.","solution":"def cube_integers(input_list): Takes a list of integers and returns a new list containing the cubes of each integer in the input list. Non-integer values are skipped. if not isinstance(input_list, list): raise ValueError(\\"The input should be a list of integers\\") return [x**3 for x in input_list if isinstance(x, int)]"},{"question":"Create a function that takes two sorted lists in ascending order and merges them into a single sorted list. You can assume that the input lists do not contain duplicate elements.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list. Args: list1: A sorted list in ascending order. list2: A sorted list in ascending order. Returns: A merged sorted list in ascending order. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Create a function that converts a given string into a list containing the ASCII values of its characters.","solution":"def string_to_ascii_list(s): Converts a given string into a list containing the ASCII values of its characters. :param s: Input string :return: List of ASCII values of characters in s return [ord(char) for char in s]"},{"question":"Create a function that takes a list of integers as input and returns the sum of the squares of the odd numbers in the list. The function should ignore negative numbers and non-integer values.","solution":"def sum_of_squares_of_odds(nums): Takes a list of integers as input and returns the sum of the squares of the odd numbers in the list. Ignores negative numbers and non-integer values. if not isinstance(nums, list): raise ValueError(\\"Input must be a list\\") return sum(x ** 2 for x in nums if isinstance(x, int) and x > 0 and x % 2 != 0)"},{"question":"Create a function that accepts a string as input and returns the count of distinct characters in the string, including both uppercase and lowercase letters.","solution":"def count_distinct_characters(s): Returns the count of distinct characters in the string s. Both uppercase and lowercase letters are considered distinct. return len(set(s))"},{"question":"Create a function that takes three arguments: an integer array, the size of the array, and a divisor. The function should return an array of even length where the first half contains elements that are divisible by the divisor and the second half contains elements that are not.","solution":"def divide_array(arr, size, divisor): Divides an array into elements divisible by the divisor and elements not divisible by the divisor. Parameters: arr (list): The input array of integers. size (int): The size of the input array. divisor (int): The divisor to check divisibility. Returns: list: An array where the first half contains elements divisible by the divisor and the second half contains elements not divisible by the divisor. if len(arr) != size: raise ValueError(f\\"The size of array is {len(arr)}, expected {size}\\") divisible = [x for x in arr if x % divisor == 0] not_divisible = [x for x in arr if x % divisor != 0] result = divisible + not_divisible return result"},{"question":"Create a function that converts a string to a palindrome. A palindrome is a string that reads the same backward as forward. For example, \\"madam\\" is a palindrome.","solution":"def to_palindrome(s): Converts a string into a palindrome by appending the minimum number of characters. if not s: return s def is_palindrome(s): return s == s[::-1] if is_palindrome(s): return s for i in range(len(s)): if is_palindrome(s[i:]): return s + s[:i][::-1] return s"},{"question":"Create a function that takes one integer as input and returns its factorial. In this kata, only non-negative integers are valid input. If the input is negative, return null. Return the result as a long.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If the input is negative, returns None. if n < 0: return None if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes an array of integers as input and returns an array with each element incremented by 2.","solution":"def increment_by_two(arr): Takes an array of integers and returns an array with each element incremented by 2. :param arr: List of integers :return: List of integers incremented by 2 return [x + 2 for x in arr]"},{"question":"Create a function that accepts two string parameters. The first string parameter represents a binary number, and the second string parameter represents an integer value. The function converts the binary number to a decimal number and then modifies it by adding the integer value, returning the sum as a decimal number.","solution":"def binary_addition(binary_str, integer_val): Converts the binary number represented by binary_str to a decimal number, adds integer_val to it, and returns the sum as a decimal number. # Convert the binary string to a decimal number decimal_number = int(binary_str, 2) # Add the integer value to the decimal number result = decimal_number + int(integer_val) return result"},{"question":"Create a function that takes an integer as an input and prints the Fibonacci sequence up to that integer.","solution":"def fibonacci_sequence(n): Prints the Fibonacci sequence up to n. if n <= 0: return [] sequence = [0, 1] while sequence[-1] + sequence[-2] <= n: sequence.append(sequence[-1] + sequence[-2]) return sequence[:] # Test Output print(fibonacci_sequence(10)) # [0, 1, 1, 2, 3, 5, 8] print(fibonacci_sequence(15)) # [0, 1, 1, 2, 3, 5, 8, 13]"},{"question":"Create a function that takes a positive integer and returns a dictionary of its prime factors and their powers.","solution":"def prime_factors(n): Returns a dictionary where the keys are the prime factors of n and values are the powers of those prime factors. factors = {} p = 2 while n >= p * p: power = 0 while n % p == 0: n //= p power += 1 if power > 0: factors[p] = power p += 1 if n > 1: factors[n] = 1 return factors"},{"question":"Create a function that takes a list of integers as input and returns the elements in the list that are not divisible by 3.","solution":"def filter_not_divisible_by_3(numbers): Returns a list of elements from the input list that are not divisible by 3. return [num for num in numbers if num % 3 != 0]"},{"question":"Create a function that accepts two string parameters. The function should return a boolean value that indicates whether the first string is a substring of the second string or not.","solution":"def is_substring(sub, main): Returns True if 'sub' is a substring of 'main', otherwise False. return sub in main"},{"question":"Create a function that calculates the factorial of a given number \`n\`. The function should return the factorial. If the input is not a non-negative integer, raise a \`ValueError\`.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Parameters: n (int): A non-negative integer whose factorial is to be computed. Returns: int: Factorial of n. Raises: ValueError: If n is not a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that calculates the sum of a list of numbers, but excludes any numbers that are divisible by 3.","solution":"def sum_excluding_multiples_of_three(lst): Returns the sum of the numbers in the list excluding those that are divisible by 3. return sum(x for x in lst if x % 3 != 0)"},{"question":"Create a function that takes an array of tuples as input and returns the value that appears most frequently in the second elements of the tuples.","solution":"from collections import Counter def most_frequent_second_element(tuples): Returns the value that appears most frequently in the second elements of the tuples. # extract the second elements second_elements = [t[1] for t in tuples] # count the frequency of each element counter = Counter(second_elements) # find the most common element most_common = counter.most_common(1) return most_common[0][0] if most_common else None"},{"question":"Create a function that checks if two binary strings are identical or not. The function should return \\"Identical\\" if the strings are the same, and \\"Not Identical\\" if they are not.","solution":"def check_binary_identical(bin_str1, bin_str2): Returns 'Identical' if the two binary strings are identical, otherwise returns 'Not Identical'. if bin_str1 == bin_str2: return \\"Identical\\" else: return \\"Not Identical\\""},{"question":"Create a function that takes a string as input and returns a new string where all non-alphabetic characters are removed. Only alphabetic characters (letters of the alphabet) and spaces should be preserved in the output.","solution":"def remove_non_alphabetic(input_string): Removes all non-alphabetic characters from the input string. Spaces are preserved, other non-alphabetic characters are removed. Args: input_string (str): The string to be processed. Returns: str: A new string with only alphabetic characters and spaces. return ''.join(char for char in input_string if char.isalpha() or char.isspace())"},{"question":"Create a function that can generate the number of permutations for a given set of values. I want to understand the concept and implement it in Python. Could you walk me through the process step by-step?","solution":"def factorial(n): Returns the factorial of a given number n. if n == 0 or n == 1: return 1 result = 1 for i in range(2, n+1): result *= i return result def number_of_permutations(n): Returns the number of permutations for a set of n distinct values. return factorial(n)"},{"question":"Create a function that takes a list of integers and a target sum as parameters, and returns the indices of the two numbers such that they add up to the target sum.","solution":"def two_sum(nums, target): Finds the indices of the two numbers in nums that add up to the target. Parameters: nums (list of int): A list of integers. target (int): The target sum. Returns: list of int: The indices of the two numbers. num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: return [num_dict[complement], i] num_dict[num] = i return []"},{"question":"Create a function that finds the minimum of three integer numbers.","solution":"def find_minimum(a, b, c): Returns the minimum of three integer numbers. return min(a, b, c)"},{"question":"Create a function that finds the maximum sum of subarray of non-negative numbers from a given array of integers.","solution":"def max_sum_subarray(arr): Finds the maximum sum of subarrays consisting of non-negative numbers in a given array. max_sum = 0 current_sum = 0 for num in arr: if num >= 0: current_sum += num else: max_sum = max(max_sum, current_sum) current_sum = 0 return max(max_sum, current_sum)"},{"question":"Create a function that accepts two integers as parameters and returns a list containing the arithmetic mean and the geometric mean of the two numbers. The arithmetic mean is the average of the two numbers, and the geometric mean is calculated as the square root of the product of the two numbers. You must ensure that the function handles both positive and negative numbers correctly.","solution":"import math def calculate_means(a, b): Returns a list containing the arithmetic mean and the geometric mean of a and b. The arithmetic mean is the average of a and b. The geometric mean is the square root of the product of a and b. arithmetic_mean = (a + b) / 2 geometric_mean = math.sqrt(abs(a * b)) * (1 if (a * b >= 0) else -1) return [arithmetic_mean, geometric_mean]"},{"question":"Create a function that takes a number as input and returns a string stating whether the number is \\"Even\\", \\"Odd\\", or if it is not a number it should return \\"Invalid\\". How do I create a function in Python?","solution":"def check_number_type(input_value): Returns whether the input_value is \\"Even\\", \\"Odd\\", or \\"Invalid\\". If the input_value is not a number, it returns \\"Invalid\\". if isinstance(input_value, (int, float)): if input_value % 2 == 0: return \\"Even\\" else: return \\"Odd\\" else: return \\"Invalid\\""},{"question":"Create a function that takes two strings and returns a new string containing the bytes of the two input strings concatenated together in the order they were passed to the function.","solution":"def concatenate_bytes(str1, str2): Concatenates the bytes of two input strings and returns the result. Parameters: str1 (str): First input string. str2 (str): Second input string. Returns: str: The concatenated bytes of the two input strings. return str1.encode() + str2.encode()"},{"question":"Create a function that , given a list of integers, returns the length of the longest subsequence in which the absolute difference between consecutive elements is exactly 1.","solution":"def longest_subsequence(arr): Given a list of integers, returns the length of the longest subsequence in which the absolute difference between consecutive elements is exactly 1. if not arr: return 0 longest = 1 current_length = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) == 1: current_length += 1 else: longest = max(longest, current_length) current_length = 1 return max(longest, current_length)"},{"question":"Create a function that takes two arguments: a string \`text\` and an integer \`n\`. The function should return a new string where each character in the original string is repeated \`n\` times. For example, \`repeat_chars(\\"hello\\", 2)\` should return \`\\"hheelllloo\\"\`.","solution":"def repeat_chars(text, n): Returns a new string where each character in the original string is repeated n times. return ''.join(char * n for char in text)"},{"question":"Create a function that determines if a given word is a palindrome. A palindrome is a word that reads the same backward as forward, e.g., \\"madam\\" or \\"racecar\\". Your function should return \`True\` if the word is a palindrome and \`False\` otherwise. Additionally, the function should handle boolean inputs and casting any non-string values to strings. If the input is a dictionary, the function should return \`False\`.","solution":"def is_palindrome(word): Determines if a given word is a palindrome. Handles non-string inputs by casting to string. Returns False for dictionary inputs. if isinstance(word, dict): return False word = str(word) return word == word[::-1]"},{"question":"Create a function that returns a new list with elements that are the sum of consecutive even integers.","solution":"def sum_consecutive_even_integers(lst): Returns a new list with elements that are the sum of consecutive even integers. if not lst: return [] result = [] current_sum = 0 in_sequence = False for num in lst: if num % 2 == 0: current_sum += num in_sequence = True else: if in_sequence: result.append(current_sum) current_sum = 0 in_sequence = False if in_sequence: result.append(current_sum) return result"},{"question":"Create a function that takes an array of integers as input and returns a list of all possible subsets of the array, including the empty set.","solution":"def subsets(nums): Returns a list of all possible subsets of the array nums, including the empty set. result = [[]] for num in nums: result += [curr + [num] for curr in result] return result"},{"question":"Create a function that takes a string as input and returns a new string where all the 'a's have been replaced with 'b's, and all the 'b's have been replaced with 'a's. The function should be case-sensitive.","solution":"def swap_a_b(input_string): Replaces all 'a's with 'b's and all 'b's with 'a's in the input string. The function is case-sensitive. Args: input_string (str): The input string. Returns: str: The modified string with 'a's and 'b's swapped. swapped_string = \\"\\" for char in input_string: if char == 'a': swapped_string += 'b' elif char == 'b': swapped_string += 'a' else: swapped_string += char return swapped_string"},{"question":"Create a function that takes two strings, \`str1\` and \`str2\`, and returns True if they are equal and False otherwise, without using the \`==\` operator.","solution":"def strings_equal(str1, str2): Returns True if str1 and str2 are equal, False otherwise. if len(str1) != len(str2): return False for ch1, ch2 in zip(str1, str2): if ch1 != ch2: return False return True"},{"question":"Create a function that takes an array of integers and returns the sum of the squares of each number in the array. If the number is negative, make it positive (by taking the absolute value) before squaring it.","solution":"def sum_of_squares(arr): Returns the sum of the squares of each number in the array. If the number is negative, it is made positive (by taking the absolute value) before squaring. return sum(abs(x) ** 2 for x in arr)"},{"question":"Create a function that takes a list as input and returns the sum of all the numeric values in the list. Numbers can be integers or floats.","solution":"def sum_of_numeric_values(l): Returns the sum of all numeric (integer or float) values in the list l. return sum(item for item in l if isinstance(item, (int, float)))"},{"question":"Create a function that takes a string as a parameter and uses Python's built-in \`zip\` function to print the characters of the string in pairs. If the string has an odd number of characters, the last character should be paired with an underscore ('_'). For example, if the input string is \\"abcdefg\\", the output should be \\"ab cd ef g_\\".","solution":"def pair_characters(s): Takes a string and prints pairs of its characters. If the string has an odd number of characters, the last one is paired with an underscore ('_'). if len(s) % 2 != 0: s += '_' pairs = [\\"\\".join(pair) for pair in zip(s[::2], s[1::2])] return \\" \\".join(pairs)"},{"question":"Create a function that generates the power object of an array. The function should take two arguments: an array of numbers and a function. The function should apply this function to every element in the array, and then create a new array containing all of these results. The power object of an array is essentially the result of applying a mathematical operation repeatedly to each element of the array. In this case, the operation is determined by the input function.","solution":"def generate_power_object(array, operation_fn): Applies the given operation function to each element in the array. Args: array (list): List of numbers. operation_fn (callable): Function to apply to each element of the array. Returns: list: A new list where each element is the result of applying the operation_fn on the original elements. return [operation_fn(x) for x in array]"},{"question":"Create a function that takes in a list of email addresses and returns a dictionary where the keys are the first few letters of an email address and the values are the number of times they appear in the list.","solution":"def email_prefix_count(email_list): Returns a dictionary where the keys are the prefix of email addresses (up to the first 3 letters) and the values are the number of times they appear in the list. Parameters: email_list (list): List of email addresses Returns: dict: Dictionary with email prefixes as keys and counts as values prefix_count = {} for email in email_list: prefix = email[:3] if prefix in prefix_count: prefix_count[prefix] += 1 else: prefix_count[prefix] = 1 return prefix_count"},{"question":"Create a function that generates a random string of a specified length, containing only uppercase and lowercase letters and digits. The function should also accept an optional parameter for excluding specific characters or patterns.","solution":"import random import string def generate_random_string(length, exclude=None): Generates a random string of a specified length, containing only uppercase and lowercase letters and digits. Optionally excludes specific characters or patterns. Args: length (int): The length of the random string to generate. exclude (str, optional): A string containing characters or patterns to exclude from the generated string. Returns: str: A random string of the specified length. if length <= 0: raise ValueError(\\"Length must be a positive integer\\") # Create a list of possible characters possible_characters = string.ascii_letters + string.digits if exclude: for char in exclude: possible_characters = possible_characters.replace(char, \\"\\") if len(possible_characters) == 0: raise ValueError(\\"All characters are excluded. Cannot generate a random string.\\") return ''.join(random.choice(possible_characters) for _ in range(length))"},{"question":"Create a function that takes an integer as input and prints the reverse of the integer as a string.","solution":"def reverse_integer(n): Takes an integer n as input and returns the reverse of the integer as a string. return str(n)[::-1] if n >= 0 else '-' + str(n)[:0:-1]"},{"question":"Create a function that takes an integer as an input and returns FizzBuzz for multiples of 3 and 5. If the number is a multiple of 3, return \\"Fizz\\". If the number is a multiple of 5, return \\"Buzz\\". Otherwise, return the number unchanged.","solution":"def fizz_buzz(n): Returns 'Fizz' if n is a multiple of 3, 'Buzz' if n is a multiple of 5, 'FizzBuzz' if n is a multiple of both 3 and 5, else returns the number n. if n % 3 == 0 and n % 5 == 0: return \\"FizzBuzz\\" elif n % 3 == 0: return \\"Fizz\\" elif n % 5 == 0: return \\"Buzz\\" else: return n"},{"question":"Create a function that will accept two integers范围are from 1 to 100 and return the sum of all numbers that are divisible by either 3 or 5 within that range.","solution":"def sum_of_divisibles(a, b): Returns the sum of all numbers divisible by 3 or 5 in the range [a, b], inclusive. Range of a and b is from 1 to 100. if not (1 <= a <= 100 and 1 <= b <= 100): raise ValueError(\\"Inputs must be in the range from 1 to 100 inclusive.\\") return sum(x for x in range(a, b + 1) if x % 3 == 0 or x % 5 == 0)"},{"question":"Create a function that takes in a list and returns a new list with all the duplicate elements removed. The function should maintain the order of the original list.","solution":"def remove_duplicates(lst): Returns a new list with duplicates removed, maintaining the original order. Parameters: lst (list): The input list containing potential duplicates. Returns: list: A new list with duplicates removed. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Create a function that takes a list of integers and returns the number of integers that are prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, 2, 3, 5, and 7 are prime numbers.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def count_primes(nums): Returns the count of prime numbers in the list nums. return sum(1 for num in nums if is_prime(num))"},{"question":"Create a function that takes a list of tuples, where each tuple contains two integers, and returns a new list where each tuple is sorted in ascending order. If a tuple is already sorted in descending order, it should be reversed to be in ascending order.","solution":"def sort_tuples(tuples_list): Returns a new list where each tuple is sorted in ascending order. If a tuple is already sorted in descending order, it should be reversed. return [tuple(sorted(t)) for t in tuples_list]"},{"question":"Create a function that takes two strings as input and returns the longest common sub-sequence (LCS) between them. The LCS is defined as the longest subsequence that is common to all sequences, so it may contain duplicates.","solution":"def longest_common_subsequence(str1, str2): Returns the longest common sub-sequence (LCS) between two strings. m, n = len(str1), len(str2) # Create a DP table to store lengths of longest common subsequence dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the DP table in bottom-up fashion for i in range(m): for j in range(n): if str1[i] == str2[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) # Now, let's construct the LCS from the dp array lcs = [] while m > 0 and n > 0: if dp[m][n] == dp[m-1][n]: m -= 1 elif dp[m][n] == dp[m][n-1]: n -= 1 else: lcs.append(str1[m-1]) m -= 1 n -= 1 lcs.reverse() return ''.join(lcs)"},{"question":"Create a function that takes two filenames as arguments and compares their contents. The function should return \`True\` if the contents are identical, and \`False\` otherwise.","solution":"def compare_files(file1, file2): Compares the contents of two files. Parameters: file1 (str): The path to the first file. file2 (str): The path to the second file. Returns: bool: True if the contents are identical, False otherwise. try: with open(file1, 'r') as f1, open(file2, 'r') as f2: return f1.read() == f2.read() except FileNotFoundError: return False"},{"question":"Create a function that returns a dictionary with the count of uppercase, lowercase, and other characters in a given string.","solution":"def char_count(s): Returns a dictionary with the count of uppercase, lowercase, and other characters in the given string. counts = {'uppercase': 0, 'lowercase': 0, 'other': 0} for char in s: if char.isupper(): counts['uppercase'] += 1 elif char.islower(): counts['lowercase'] += 1 else: counts['other'] += 1 return counts"},{"question":"Create a function that takes a string as an input and returns a list of all possible combinations of characters in the string, similar to the itertools.permutations function, but with one key difference. The function should return all possible permutations of length 3 from the input string.","solution":"from itertools import permutations def get_permutations_of_length_three(s): Returns all possible permutations of length 3 from the input string. Args: s (str): The input string Returns: list: A list containing all permutations of length 3 return [''.join(p) for p in permutations(s, 3)]"},{"question":"Create a function that takes two integers as inputs and returns the sum of all numbers between them (inclusive), but only includes numbers that are even. If there are no even numbers between the inputs, the function should return 0. The function should handle cases where the second integer is less than the first by reversing the direction of the iteration.","solution":"def sum_even_numbers(a, b): Returns the sum of all even numbers between a and b inclusive. If there are no even numbers, return 0. start, end = min(a, b), max(a, b) total_sum = 0 for num in range(start, end + 1): if num % 2 == 0: total_sum += num return total_sum"},{"question":"Create a function that that accepts a two-dimensional list of integers as an argument and calculates the sum of all the elements in the list. How should I approach this?","solution":"def sum_of_elements(matrix): Returns the sum of all elements in a two-dimensional list. total_sum = 0 for row in matrix: for element in row: total_sum += element return total_sum"},{"question":"Create a function that takes an integer as input and returns its binary representation as a string. The function should handle both positive and negative integers, representing negative numbers using two's complement binary representation. If the input integer is outside the range of a standard 32-bit signed integer (-2^31 to 2^31 - 1), the function should return \\"Integer out of range for a 32-bit signed integer\\". You can assume that the input will always be an integer.","solution":"def int_to_binary(n): Converts an integer to its binary representation as a string. Handles both positive and negative integers, representing negative numbers using two's complement binary representation. If the input integer is outside the range of a standard 32-bit signed integer (-2^31 to 2^31 - 1), returns \\"Integer out of range for a 32-bit signed integer\\". # Define the range limits for a 32-bit signed integer MIN_INT = -2**31 MAX_INT = 2**31 - 1 # Check if the integer is within the 32-bit signed integer range if n < MIN_INT or n > MAX_INT: return \\"Integer out of range for a 32-bit signed integer\\" # Handling positive and zero case if n >= 0: return bin(n)[2:] # Handling negative case, creating two's complement binary_str = bin(n & 0xffffffff)[2:] return binary_str"},{"question":"Create a function that prints the elements of a given list in reverse order. However, the function should handle different data types within the list and ensure that only elements of the specified data type are printed. For example, if the list contains both strings and integers, and I specify that only strings should be printed in reverse order, the function should ignore the integers.","solution":"def print_reverse_by_type(lst, data_type): Prints the elements of the given list in reverse order, filter by the specified data type. for element in reversed(lst): if isinstance(element, data_type): print(element)"},{"question":"Create a function that generates the nth Fibonacci number using dynamic programming to improve efficiency. The function should take an integer n as input and return the nth Fibonacci number.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n <= 0: raise ValueError(\\"Input should be a positive integer.\\") if n == 1: return 0 if n == 2: return 1 fib = [0, 1] for i in range(2, n): fib.append(fib[-1] + fib[-2]) return fib[-1]"},{"question":"Create a function that takes a string of text and returns a dictionary with the frequency of each word. The function should ignore case (i.e., treat \\"apple\\" and \\"Apple\\" as the same word) and consider words to be separated by spaces. Words will not contain punctuation.","solution":"def word_frequency(s): Returns a dictionary with the frequency of each word in the input string. The function is case-insensitive and considers words to be separated by spaces. words = s.lower().split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Create a function that takes two arguments: an integer and a list of integers. The function should return a tuple containing the sum of the integer and each element in the list.","solution":"def sum_with_list(num, int_list): Returns a tuple containing the sum of the integer \`num\` and each element in the list \`int_list\`. Parameters: num (int): The integer to be added to each element of the list. int_list (list of int): The list of integers. Returns: tuple: A tuple containing the resulting sums. return tuple(num + x for x in int_list)"},{"question":"Create a function that accepts three integer parameters \`n\`, \`m\`, and \`k\`. The function should return a list of length \`k\` containing the sum of \`n\` and \`m\` for each element in the list. How can I create this function in Python?","solution":"def generate_list(n, m, k): Generates a list of length k where each element is the sum of n and m. Parameters: n (int): The first integer. m (int): The second integer. k (int): The length of the resulting list. Returns: list: A list of length k where each element is the sum of n and m. return [n + m] * k"},{"question":"Create a function that calculates the total amount of money in a bank account given the initial deposit, annual interest rate, time in years, and interest compounding frequency. The function should use the compound interest formula.","solution":"def calculate_compound_interest(principal, annual_rate, time_years, compounding_frequency): Calculate the total amount of money in a bank account using the compound interest formula. Args: - principal (float): The initial deposit amount. - annual_rate (float): The annual interest rate (as a decimal). - time_years (float): The time the money is invested for in years. - compounding_frequency (int): The number of times that interest is compounded per year. Returns: - float: The total amount of money in the bank account after the specified time. # Compound interest formula: A = P (1 + r/n)^(nt) total_amount = principal * (1 + annual_rate / compounding_frequency) ** (compounding_frequency * time_years) return total_amount"},{"question":"Create a function that takes a string \`s\` as input and returns the number of vowels in the string \`s\`. The function should consider both uppercase and lowercase vowels.","solution":"def count_vowels(s): Returns the number of vowels in the string s. Considers both uppercase and lowercase vowels. vowels = \\"aeiouAEIOU\\" return sum(1 for char in s if char in vowels)"},{"question":"Create a function that checks if a given number is prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, 2, 3, 5, 7, 11, and 13 are prime numbers. Write a function \`is_prime\` that takes an integer as its input and returns \`True\` if the number is prime, otherwise returns \`False\`.","solution":"def is_prime(n): Check if a given number is prime. Parameters: n (int): The number to check. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n ** 0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True"},{"question":"Create a function that reads a text file and prints its contents. The function should handle cases where the file does not exist.","solution":"def read_file(file_path): Reads the contents of a given text file and prints them. If the file does not exist, prints an appropriate error message. try: with open(file_path, 'r') as file: contents = file.read() print(contents) except FileNotFoundError: print(f\\"The file at '{file_path}' does not exist.\\")"},{"question":"Create a function that takes a list and a target value as input, and returns the index of the target value in the list. If the target value is not found in the list, the function should return -1. The function should not use the built-in \`index\` method of the list.","solution":"def find_index(lst, target): Returns the index of the target value in the list. If the target value is not found, returns -1. for index, value in enumerate(lst): if value == target: return index return -1"},{"question":"Create a function that takes in a path as a parameter and returns a list of paths that are in the second-level directory of the given path. If there is no second-level directory, it returns an empty list. Assume the path is in UNIX-like format.","solution":"import os def second_level_paths(path): Returns a list of paths that are in the second-level directory of the given path. If there is no second-level directory, it returns an empty list. Parameters: path (str): The directory path to search within. Returns: List[str]: A list of second-level paths. second_level = [] if not os.path.isdir(path): return second_level for first_level in os.listdir(path): first_level_path = os.path.join(path, first_level) if os.path.isdir(first_level_path): for second_level_name in os.listdir(first_level_path): second_level_path = os.path.join(first_level_path, second_level_name) second_level.append(second_level_path) return second_level"},{"question":"Create a function that takes a dictionary as an argument and returns a new dictionary where each key-value pair is reversed. The pairs in the new dictionary should be with the value as the key and the key as the value.","solution":"def reverse_dict(input_dict): Returns a new dictionary with each key-value pair reversed. The pairs in the new dictionary should be with the value as the key and the key as the value. return {v: k for k, v in input_dict.items()}"},{"question":"Create a function that can check if a given number is a perfect power and return the root and exponent. A perfect power is a number that can be expressed as another number raised to an integer exponent greater than 1. The function should return a tuple (root, exponent) if the number is a perfect power, or (None, None) if it is not.","solution":"import math def is_perfect_power(n): Check if the given number is a perfect power. If it is, return the root and exponent. If it is not, return (None, None). if n < 2: return (None, None) for base in range(2, int(math.sqrt(n)) + 1): exponent = 2 while (result := base ** exponent) <= n: if result == n: return (base, exponent) exponent += 1 return (None, None)"},{"question":"Create a function that takes a string of text and returns a list of all the words in the string that contain at least three vowels (a, e, i, o, u). Assume that the string is in all lowercase letters.","solution":"def words_with_three_vowels(text): Returns a list of words in the input text that contain at least three vowels. vowels = set('aeiou') words = text.split() return [word for word in words if sum(1 for char in word if char in vowels) >= 3]"},{"question":"Create a function that accepts an array and a target value, then returns the first index of the target value in the array. If the target value is not found, return -1. For example, if the array is [3, 5, 2, 5, 10, 5] and the target value is 5, the function should return 1 because the first occurrence of 5 is at index 1. If the target value is 8, the function should return -1 as 8 is not in the array.","solution":"def find_first_index(arr, target): Returns the first index of the target value in the array. If the target value is not found, return -1. for index, value in enumerate(arr): if value == target: return index return -1"},{"question":"Create a function that takes a string and returns all substrings of the string's length. How can I solve this problem in Python?","solution":"def get_substrings_of_length(s, length): Returns all substrings of a given length from the input string. Parameters: s (str): The input string. length (int): The length of the substrings to extract. Returns: List[str]: A list containing all substrings of the specified length. if length <= 0: raise ValueError(\\"The length of substrings must be greater than zero.\\") return [s[i:i+length] for i in range(len(s) - length + 1)]"},{"question":"Create a function that takes an integer as input and returns the integer value with its digits reversed. If reversing the digits cause the integer to overflow (i.e., if it is greater than \`2^31 - 1\` or less than \`-2^31\`), the function should return 0.","solution":"def reverse_integer(x): Reverses the digits of the given integer. Returns 0 if the reversed integer overflows. sign = -1 if x < 0 else 1 x_abs = abs(x) reversed_x = int(str(x_abs)[::-1]) reversed_x *= sign # Define the 32-bit integer range. INT_MAX = 2**31 - 1 INT_MIN = -2**31 if reversed_x < INT_MIN or reversed_x > INT_MAX: return 0 return reversed_x"},{"question":"Create a function that takes an array as input and returns the maximum difference between any two elements in the array such that the larger number comes after the smaller number.","solution":"def max_difference(arr): Returns the maximum difference between any two elements in the array such that the larger number comes after the smaller number. if len(arr) < 2: return 0 # No sufficient elements to compare, return 0 min_element = arr[0] max_diff = 0 for i in range(1, len(arr)): if arr[i] < min_element: min_element = arr[i] else: max_diff = max(max_diff, arr[i] - min_element) return max_diff"},{"question":"Create a function that will take a string and return the most frequent character in the string. If there is a tie for most frequent, return the character that appears first in the string. If the string is empty, return None.","solution":"from collections import Counter def most_frequent_character(s): Returns the most frequent character in the string. If there is a tie, returns the character that appears first. If string is empty, returns None. if not s: return None count = Counter(s) max_count = max(count.values()) for char in s: if count[char] == max_count: return char"},{"question":"Create a function that takes a list of integers and returns a new list. The new list should contain the cumulative sum of the original list, excluding the current element in the sum. The function should be named \`cumulative_except_self\` and have one parameter \`numbers\` (a list of integers).","solution":"def cumulative_except_self(numbers): Return a new list where each element is the cumulative sum of the original list, excluding the current element. total_sum = sum(numbers) return [total_sum - num for num in numbers]"},{"question":"Create a function that takes an array and a specific element to remove from that array, iterating through the array backwards.","solution":"def remove_element(arr, element): Removes all instances of \`element\` from \`arr\` by iterating through the array backwards. i = len(arr) - 1 while i >= 0: if arr[i] == element: arr.pop(i) i -= 1 return arr"},{"question":"Create a function that finds the divisors of a given number.","solution":"def find_divisors(n): Returns a list of all divisors of the given number n. if n <= 0: return [] divisors = [] for i in range(1, n + 1): if n % i == 0: divisors.append(i) return divisors"},{"question":"Create a function that takes two parameters, an integer and an array of integers. The function should return the integer multiplied by each element in the array. The result should be an array.","solution":"def multiply_elements(factor, array): Returns a new array with each element in the input array multiplied by the given factor. Parameters: factor (int): The multiplier. array (list of int): The input array of integers to be multiplied. Returns: list of int: The array with each element multiplied by the factor. return [factor * x for x in array]"},{"question":"Create a function that takes an array of integers as an argument and returns the count of prime numbers in the array. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. For simplicity, assume the array will not contain any non-integer values or less than zero values.","solution":"import math def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def count_primes(arr): Returns the count of prime numbers in an array of integers. return sum(1 for num in arr if is_prime(num))"},{"question":"Create a function that takes a list of integers and returns the two numbers in the list that sum up to a given target number. The function should return the pair of numbers as a tuple. If no such pair exists, the function should return None.","solution":"def find_pair_with_sum(numbers, target): Returns a tuple of two numbers from the list that sum up to the target. If no such pair exists, returns None. seen = set() for number in numbers: complement = target - number if complement in seen: return (complement, number) seen.add(number) return None"},{"question":"Create a function that returns \\"Hi!\\" when the function is called without parameters and \\"Hello, <name>!\\" when it is called with a name parameter.","solution":"def greet(name=None): Returns a greeting message. - If no name is provided, returns \\"Hi!\\" - If a name is provided, returns \\"Hello, <name>!\\" if name: return f\\"Hello, {name}!\\" else: return \\"Hi!\\""},{"question":"Create a function that takes an argument, a list of numbers, and returns a list of numbers where each number is the square of its corresponding number in the input list.","solution":"def square_numbers(numbers): Takes a list of numbers and returns a list of numbers where each number is the square of its corresponding number in the input list. return [number ** 2 for number in numbers]"},{"question":"Create a function that takes two integers as an input and checks if the second number is a divisor of the first number. If it is, return the result of the division, otherwise, return a message stating that the second number is not a divisor.","solution":"def check_divisor(a, b): Checks if b is a divisor of a. If so, returns the result of the division, otherwise returns a message stating that b is not a divisor. if b == 0: return \\"Division by zero is not allowed\\" if a % b == 0: return a // b else: return f\\"{b} is not a divisor of {a}\\" # Example usage (not part of the function definition): # result = check_divisor(10, 2) # print(result) # Should print: 5 # result = check_divisor(10, 3) # print(result) # Should print: \\"3 is not a divisor of 10\\""},{"question":"Create a function that calculates the factorial of a non-negative integer using recursion in Python. Also, implement error checking to handle non-integer and negative numbers as input.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Raises TypeError if n is not an integer. Raises ValueError if n is a negative integer. if not isinstance(n, int): raise TypeError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that outputs the \`k\`th smallest element in a given unsorted list. The function should be efficient and utilize a well-known algorithm. Your function should be documented with a docstring explaining its purpose, parameters, and return value.","solution":"import heapq def kth_smallest(arr, k): Returns the k-th smallest element in the given unsorted list. :param arr: List[int] - the unsorted list of integers. :param k: int - the 1-based index of the smallest element to find. :return: int - the k-th smallest element in the list. if k < 1 or k > len(arr): raise ValueError(\\"k is out of the bounds of the list size\\") # Use a heap to efficiently find the k-th smallest element. return heapq.nsmallest(k, arr)[-1]"},{"question":"Create a function that calculates the factorial of a non-negative integer n recursively.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Create a function that takes an integer as input and returns the sum of all odd numbers from 1 to n (inclusive). If n is less than 1, the function should return 0. If n is even, the function should return the sum of all odd numbers up to (n-1). Use a for loop in your solution.","solution":"def sum_odd_numbers(n): Returns the sum of all odd numbers from 1 to n (inclusive). If n is less than 1, the function returns 0. if n < 1: return 0 total = 0 for i in range(1, n + 1): if i % 2 != 0: total += i return total"},{"question":"Create a function that takes an integer as input and returns a new integer with all the bits set to \`1\` except the bits corresponding to the odd positions. In binary representation, consider the least significant bit as being in position 0 (i.e., an even position).","solution":"def set_even_bits_to_one(n): Takes an integer as input and returns a new integer with all the bits set to \`1\` except the bits corresponding to the odd positions. bit_length = n.bit_length() # Create a mask with all bits set, but clear (set to 0) all odd position bits mask = 0 for i in range(0, bit_length, 2): mask |= (1 << i) return mask # Example usage # Input: 10 (1010 in binary) # Output: 5 (0101 in binary, only even positions (0 and 2) are set)"},{"question":"Create a function that takes a dictionary as an input and returns the key with the maximum value in the dictionary.","solution":"def key_with_max_value(d): Returns the key with the maximum value in the dictionary d. If the dictionary is empty, returns None. if not d: return None return max(d, key=d.get)"},{"question":"Create a function that sums up all the numbers in an array that are greater than zero.","solution":"def sum_positive_numbers(arr): Returns the sum of all positive numbers in the array. :param arr: List of numbers :return: Sum of positive numbers return sum(x for x in arr if x > 0)"},{"question":"Create a function that determines if a given URL is valid or not. A valid URL contains a protocol (such as http or https), a domain name, and an optional path, query parameters, and fragment identifier.","solution":"import re def is_valid_url(url): Determines if a given URL is valid. A valid URL contains a protocol (such as http or https), a domain name, and an optional path, query parameters, and fragment identifier. regex = re.compile( r'^(https?://)' # protocol r'((([A-Za-z]{1,})+.)+[A-Za-z]{2,})' # domain r'(:d+)?' # optional port r'(/.*)?' # path, query params, fragment ) return re.match(regex, url) is not None"},{"question":"Create a function that finds the third maximum number in a list of integers. If the third maximum number does not exist, return the maximum number.","solution":"def third_max(nums): Returns the third maximum number in a list of integers. If the third maximum does not exist, return the maximum number. nums = list(set(nums)) # Remove duplicates if len(nums) < 3: return max(nums) nums.sort(reverse=True) return nums[2]"},{"question":"Create a function that takes a string and removes all vowels from it.","solution":"def remove_vowels(string): Removes all vowels from the given string. Parameters: string (str): The input string from which vowels will be removed. Returns: str: The string after removing all vowels. vowels = 'aeiouAEIOU' return ''.join([char for char in string if char not in vowels])"},{"question":"Create a function that will replace all instances of a certain character in a given string with a new character. For example, if you give the function the string \\"Hello, world!\\" and tell it to replace all instances of the character \\"o\\" with \\"0\\", it should return the string \\"Hell0, w0rld!\\".","solution":"def replace_char(string, old_char, new_char): Replaces all instances of old_char in the string with new_char. Parameters: string (str): The string in which to replace characters. old_char (str): The character to be replaced. new_char (str): The character to replace with. Returns: str: The modified string with all instances of old_char replaced by new_char. return string.replace(old_char, new_char)"},{"question":"Create a function that takes an array of integers and a target value as parameters. The function should use the quicksort algorithm to sort the array. After sorting, the function should search for the target value in the sorted array. If the target value is found, return the index of the target value; otherwise, return -1. The function should be written in Python.","solution":"def quicksort(arr): Quicksort algorithm to sort the array. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) def binary_search(arr, target): Binary search algorithm to find the target value in the sorted array. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1 def quicksort_and_search(arr, target): Sorts the array using quicksort and searches for the target value. sorted_arr = quicksort(arr) return binary_search(sorted_arr, target)"},{"question":"Create a function that returns a string containing HTML code for a table with three columns titled \\"Name\\", \\"Age\\", and \\"Country\\". The table should contain five rows of data, each row representing a person with a unique name, age, and country. You should also create a footer row that is colored differently and contains some summary information.","solution":"def generate_html_table(): Generate an HTML table with columns \\"Name\\", \\"Age\\", and \\"Country\\" with five rows of data and a footer row with summary information. table_html = <table border=\\"1\\"> <thead> <tr> <th>Name</th> <th>Age</th> <th>Country</th> </tr> </thead> <tbody> <tr> <td>John Doe</td> <td>25</td> <td>USA</td> </tr> <tr> <td>Jane Smith</td> <td>30</td> <td>Canada</td> </tr> <tr> <td>Akira Kurosawa</td> <td>40</td> <td>Japan</td> </tr> <tr> <td>Maria Garcia</td> <td>35</td> <td>Spain</td> </tr> <tr> <td>Hans Zimmer</td> <td>55</td> <td>Germany</td> </tr> </tbody> <tfoot style=\\"background-color: lightgrey;\\"> <tr> <td colspan=\\"3\\">Summary: 5 people from 5 different countries</td> </tr> </tfoot> </table> return table_html"},{"question":"Create a function that takes in two arguments, an array of strings and a target string to find within that array. The function should return the index of the target string in the array. If the target string is not found, the function should return -1. Write a solution in Python using list comprehension for the search.","solution":"def find_string_index(arr, target): Returns the index of the target string in the array. If target string is not found, returns -1. indices = [i for i, x in enumerate(arr) if x == target] return indices[0] if indices else -1"},{"question":"Create a function that takes an integer x and returns the number of times x+1 occurs between x and 100 (inclusive), but only count occurrences where x+1 is divisible by 3.","solution":"def count_divisible_by_3(x): Returns the number of times x+1 occurs between x and 100 (inclusive) where x+1 is divisible by 3. count = 0 for num in range(x + 1, 101): if num % 3 == 0: count += 1 return count"},{"question":"Create a function that generates a random string of a specified length using only uppercase English letters.","solution":"import random import string def generate_random_string(length): Generates a random string of the specified length using only uppercase English letters. :param length: Length of the random string to generate :return: Random string of the specified length if length <= 0: return \\"\\" return ''.join(random.choices(string.ascii_uppercase, k=length))"},{"question":"Create a function that adds two numbers and returns the result. The numbers are provided as strings and may contain leading zeros. Convert the strings to integers before performing the addition.","solution":"def add_strings(num1, num2): Adds two numbers given as strings, which may contain leading zeros. Args: num1 (str): The first number as a string. num2 (str): The second number as a string. Returns: int: The sum of the two numbers. # Convert the strings to integers int_num1 = int(num1) int_num2 = int(num2) # Return the sum of the two integers return int_num1 + int_num2"},{"question":"Create a function that accepts two arrays, \`arr1\` and \`arr2\`, and returns the pair of indexes where \`arr1[i]\` is equal to \`arr2[j]\` if such exists. The function should return the first pair of indexes found.","solution":"def find_matching_pair(arr1, arr2): Returns the first pair of indexes (i, j) where arr1[i] equals arr2[j]. Parameters: arr1 (list): The first list of elements. arr2 (list): The second list of elements. Returns: tuple: A tuple containing the indexes (i, j). If no such pair exists, return None. for i, val1 in enumerate(arr1): for j, val2 in enumerate(arr2): if val1 == val2: return (i, j) return None"},{"question":"Create a function that calculates the number of occurrences of a specific number in an array of numbers. The function should return the count of how many times the specified number appears in the array.","solution":"def count_occurrences(arr, number): Returns the number of occurrences of a specific number in an array. Parameters: arr (list): The list of numbers. number (int/float): The number to count occurrences of. Returns: int: The count of occurrences of the number in the array. return arr.count(number)"},{"question":"Create a function that checks if all elements in a given list are equal. The function should return \`True\` if they are all the same, and \`False\` otherwise. The list can contain elements of any data type.","solution":"def all_elements_equal(lst): Checks if all elements in the given list are equal. Args: lst (list): The list to check. Returns: bool: True if all elements in the list are equal, False otherwise. return all(x == lst[0] for x in lst) if lst else True"},{"question":"Create a function that takes an array of intager? as input and returns the sum of all even numbers at even indices.","solution":"def sum_even_numbers_at_even_indices(arr): Returns the sum of all even numbers at even indices in the array. return sum(arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0)"},{"question":"Create a function that takes an array of arrays and returns a new array containing the lengths of the inner arrays.","solution":"def inner_array_lengths(arrays): Returns a new array containing the lengths of the inner arrays. Parameters: arrays (list of list): An array of arrays. Returns: list: A new list containing the lengths of the inner arrays. return [len(inner_array) for inner_array in arrays]"},{"question":"Create a function that takes in a number array and an integer value as arguments, and returns an array with the integer value inserted into the original number array at all possible positions.","solution":"def insert_at_all_positions(arr, value): Inserts the given value into the array at all possible positions and returns a list of new arrays. :param arr: List of numbers :param value: Integer value to be inserted :return: List of arrays with value inserted at all possible positions result = [] for i in range(len(arr) + 1): new_arr = arr[:i] + [value] + arr[i:] result.append(new_arr) return result"},{"question":"Create a function that takes in a list of integers. The function should determine if the list is \\"divisible\\". A list is considered divisible if the sum of all elements in the list is divisible by the count of elements in the list. If the list is divisible, the function should return the sum of all elements, otherwise, it should return -1.","solution":"def is_divisible(lst): Determines if the list is 'divisible'. A list is considered divisible if the sum of all elements in the list is divisible by the count of elements in the list. If the list is divisible, returns the sum of all elements, otherwise returns -1. if len(lst) == 0: return -1 # Case where list is empty total_sum = sum(lst) if total_sum % len(lst) == 0: return total_sum else: return -1"},{"question":"Create a function that takes a list of integers as input and returns a new list containing the binary representation of each integer in the input list, each binary string should be prefixed with '0b'.","solution":"def convert_to_binary(lst): Convert a list of integers to a list of binary strings prefixed with '0b'. Parameters: lst (list): A list of integers. Returns: list: A list of binary strings prefixed with '0b'. return [bin(x) for x in lst]"},{"question":"Create a function that takes an array of integers as an argument and returns the sum and product of all the elements in the array. The function should also handle edge cases where the array is empty or contains non-integer values.","solution":"def sum_and_product(arr): Return the sum and product of all the elements in the array. If the array is empty, return (0, 1). If the array contains non-integer values, raise a ValueError. if not all(isinstance(x, int) for x in arr): raise ValueError(\\"All elements in the array must be integers.\\") total_sum = sum(arr) total_product = 1 for num in arr: total_product *= num return total_sum, total_product"},{"question":"Create a function that calculates the factorial of a given number. Write the function in Python.","solution":"def factorial(n): Returns the factorial of the given number n. Parameters: n (int): A non-negative integer whose factorial is to be computed. Returns: int: Factorial of the given number n. Raises: ValueError: If n is a negative integer. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes in a list of integers, counts the number of integers that are between 1 and 100 (inclusive), and either start or end with the digit 1. How would you implement this in Python?","solution":"def count_integers_with_digit_1(nums): Count the number of integers between 1 and 100 (inclusive) that either start or end with the digit 1. count = 0 for num in nums: if 1 <= num <= 100: str_num = str(num) if str_num[0] == '1' or str_num[-1] == '1': count += 1 return count"},{"question":"Create a function that calculates the greatest common divisor (GCD) of two numbers using the Euclidean algorithm. The function should be named \`exgcd\` and should take two integer parameters \`a\` and \`b\`. It should return the GCD of \`a\` and \`b\` and also store the coefficients (x and y) of Bézout's identity in references provided as arguments.","solution":"def exgcd(a, b): Returns the greatest common divisor (GCD) of a and b using the Euclidean algorithm. Also computes the coefficients (x, y) of Bézout's identity: a*x + b*y = gcd(a, b). Parameters: a (int): The first integer. b (int): The second integer. Returns: int: The GCD of a and b. int: The coefficient x in Bézout's identity. int: The coefficient y in Bézout's identity. if a == 0: return b, 0, 1 else: gcd, x1, y1 = exgcd(b % a, a) x = y1 - (b // a) * x1 y = x1 return gcd, x, y"},{"question":"Create a function that converts a sentence into title case, where each word starts with a capitalized letter. For example, \\"hello world\\" should become \\"Hello World\\".","solution":"def to_title_case(sentence): Converts a sentence into title case, where each word starts with a capitalized letter. Args: sentence (str): The input sentence to convert. Returns: str: The converted sentence in title case. return sentence.title()"},{"question":"Create a function that takes two integer arrays \`nums1\` and \`nums2\`, and an integer \`m\` and \`n\` representing the sizes of \`nums1\` and \`nums2\` respectively. The function should merge \`nums2\` into \`nums1\` in non-decreasing order. Both \`nums1\` and \`nums2\` are assumed to have enough space at the end to hold all elements of \`nums2\`.","solution":"def merge(nums1, m, nums2, n): Merges array nums2 into nums1 in non-decreasing order. Args: nums1 (list): First list of integers with size m + n, where the first m elements contain the actual numbers and the rest are placeholders for nums2. m (int): Number of actual elements in nums1. nums2 (list): Second list of integers with size n. n (int): Number of actual elements in nums2. Returns: None: The function modifies nums1 in-place. # Initialize pointers for nums1, nums2, and the merge index from the end of the lists p1, p2, p_merge = m - 1, n - 1, m + n - 1 # Merge the arrays starting from the end while p2 >= 0: if p1 >= 0 and nums1[p1] > nums2[p2]: nums1[p_merge] = nums1[p1] p1 -= 1 else: nums1[p_merge] = nums2[p2] p2 -= 1 p_merge -= 1"},{"question":"Create a function that calculates the sum of digits in an integer. The function should be called \`sumDigits(int)\` and should use only one line of code.","solution":"def sumDigits(n): Returns the sum of digits of given integer n. return sum(int(digit) for digit in str(abs(n)))"},{"question":"Create a function that takes in a string and returns the number of unique characters in it, ignoring case sensitivity and white spaces. For example, the string \\"Hello world!\\" should return 8 because there are 8 unique characters after removing case and white spaces (\\"helo wrld\\").","solution":"def count_unique_characters(s): Returns the number of unique characters in the given string, ignoring case sensitivity and white spaces. s = s.replace(\\" \\", \\"\\").lower() unique_characters = set(s) return len(unique_characters)"},{"question":"Create a function that rotates an nxn 2D matrix 90 degrees clockwise. Assume the matrix is a list of lists in Python.","solution":"def rotate_matrix_90_clockwise(matrix): Rotates an nxn 2D matrix 90 degrees clockwise. Args: matrix (list of list of int): The nxn 2D matrix to rotate. Returns: list of list of int: The rotated matrix. n = len(matrix) # Create a new n x n matrix to hold the rotated values rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - 1 - i] = matrix[i][j] return rotated"},{"question":"Create a function that accepts a positive integer \`n\` and returns a list of all prime numbers up to \`n\` inclusive. The function should iterate through each number from 2 to \`n\` and check if it's a prime number by testing divisibility against all numbers less than itself. If a number is found to be prime, it should be added to the result list.","solution":"def primes_up_to_n(n): Returns a list of all prime numbers up to n inclusive. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that takes in two integers, a lower bound and an upper bound, and returns a list of all even numbers strictly between them (exclusive).","solution":"def even_numbers_between(lower_bound, upper_bound): Returns a list of all even numbers strictly between the lower bound and upper bound. return [num for num in range(lower_bound + 1, upper_bound) if num % 2 == 0]"},{"question":"Create a function that takes in a list of integers and an integer value representing a target. The function should return a list of all possible combinations of the integers in the list that sum up to the target value. Each combination should be unique and order does not matter.","solution":"from typing import List def combination_sum(nums: List[int], target: int) -> List[List[int]]: Given a list of integers and a target integer, return all unique combinations of the numbers that sum up to the target. result = [] nums.sort() def backtrack(start, current_combination, current_sum): if current_sum == target: result.append(list(current_combination)) return if current_sum > target: return for i in range(start, len(nums)): current_combination.append(nums[i]) backtrack(i, current_combination, current_sum + nums[i]) current_combination.pop() backtrack(0, [], 0) return result"},{"question":"Create a function that takes a list of numbers and returns the sum of all even numbers in the list. Ensure that the function handles negative numbers and floats.","solution":"def sum_even_numbers(numbers): Returns the sum of all even numbers in the list of numbers. Handles negative numbers and floats. return sum(num for num in numbers if isinstance(num, (int, float)) and num % 2 == 0)"},{"question":"Create a function that , given a list of integers, returns the sum of all the positive integers in the list. For example, given the list [-1, 2, -3, 4, 5], it should return 11.","solution":"def sum_positive_integers(int_list): Returns the sum of all positive integers in the list. :param int_list: List of integers :return: Sum of positive integers return sum(i for i in int_list if i > 0)"},{"question":"Create a function that takes two lists of equal length and returns a new list where each element is a tuple consisting of the corresponding elements from the input lists. If the lists are not of equal length, raise a ValueError.","solution":"def zip_lists(list1, list2): Takes two lists of equal length and returns a new list where each element is a tuple consisting of the corresponding elements from the input lists. Raises a ValueError if the lists are not of equal length. Parameters: list1 (list): First list. list2 (list): Second list. Returns: list: A list of tuples. Raises: ValueError: If the input lists are not of equal length. if len(list1) != len(list2): raise ValueError(\\"The lists must be of equal length.\\") return [(list1[i], list2[i]) for i in range(len(list1))]"},{"question":"Create a function that takes an array of integers as input and returns the sum of the squares of the numbers. For example, if the input is \`[2, 3, 4]\`, the function should return \`4 + 9 + 16 = 39\`.","solution":"def sum_of_squares(numbers): Returns the sum of the squares of the numbers in the input list. Parameters: numbers (list of ints): List of integers to be squared and summed. Returns: int: The sum of the squares of the input numbers. return sum(x ** 2 for x in numbers)"},{"question":"Create a function that generates an \`n\` x \`n\` square grid filled with sequential numbers starting from 1, incrementally in a row-major order.","solution":"def generate_grid(n): Generates an n x n square grid filled with sequential numbers starting from 1, incrementally in a row-major order. Args: n (int): The size of the grid. Returns: list: An n x n list (grid) filled with sequential numbers. return [[i * n + j + 1 for j in range(n)] for i in range(n)]"},{"question":"Create a function that takes the output of a machine learning model, which is expected to be a list of scores and labels for predictions made on a dataset, and returns a dictionary with the count of each unique label.","solution":"def count_labels(predictions): Takes a list of tuples where each tuple contains a score and a label, and returns a dictionary with the count of each unique label. :param predictions: List[Tuple[float, str]] :return: Dict[str, int] label_count = {} for score, label in predictions: if label in label_count: label_count[label] += 1 else: label_count[label] = 1 return label_count"},{"question":"Create a function that takes a string as input and returns the count of all alphanumeric characters in the string.","solution":"def count_alphanumeric_characters(s): Returns the count of all alphanumeric characters in the input string s. return sum(1 for char in s if char.isalnum())"},{"question":"Create a function that can accept any number of arguments. Each argument is a potential string. The function must return a string that is the concatenation of all non-empty arguments. If no non-empty arguments are provided, return an empty string.","solution":"def concatenate_non_empty(*args): Concatenates all non-empty string arguments. Parameters: *args - Variable length argument list. Each argument is a potential string. Returns: A single string that is the concatenation of all non-empty arguments. return ''.join(arg for arg in args if arg)"},{"question":"Create a function that takes an integer n as input and returns the sum of all integers from 1 to n. The function should have a time complexity of O(n).","solution":"def sum_integers(n): Returns the sum of all integers from 1 to n. if n < 1: return 0 return sum(range(1, n + 1))"},{"question":"Create a function that allows the user to enter a string and a substring. The function will then check if the substring exists within the string and return the index of the first occurrence of the substring. If the substring does not exist, the function will return -1. Additionally, the function should handle cases where the user enters a string or substring that is longer than the specified limits (which can be provided as additional parameters). You can assume that the maximum length for the string will be 1000 characters, and the maximum length for the substring will be 100 characters.","solution":"def find_substring(main_string, sub_string, max_main_len=1000, max_sub_len=100): Returns the index of the first occurrence of sub_string in main_string. If the sub_string does not exist in main_string, returns -1. Returns -1 if input lengths exceed specified limits. # Check if lengths exceed limits if len(main_string) > max_main_len or len(sub_string) > max_sub_len: return -1 # Find and return the index return main_string.find(sub_string)"},{"question":"Create a function that takes two parameters, a string and an integer, and returns a string where the string is repeated the number of times given by the integer. For example, if the string is \\"hello\\" and the integer is 3, the function should return \\"hellohellohello\\".","solution":"def repeat_string(s, n): Returns the string s repeated n times. Parameters: s (str): The string to be repeated. n (int): The number of repetitions. Returns: str: The resulting string after repetition. return s * n"},{"question":"Create a function that takes two parameters, \`A\` and \`B\`, and returns their greatest common divisor (GCD).","solution":"import math def gcd(A, B): Returns the greatest common divisor (GCD) of A and B. return math.gcd(A, B)"},{"question":"Create a function that converts a given string of numbers to an integer. If the string does not represent a valid number or is empty, the function should return \`None\`.","solution":"def string_to_int(s): Converts a string of numbers to an integer. If the string does not represent a valid number or is empty, returns None. if s is None or s == \\"\\": return None try: return int(s) except ValueError: return None"},{"question":"Create a function that takes a list of integers and returns a new list where each element is the sum of the neighboring elements in the original list. If the list has only one element, the function should return the same single element as the new list. If the list is empty, return an empty list.","solution":"def sum_of_neighbors(lst): Returns a new list where each element is the sum of the neighboring elements in the original list. If the list has only one element, returns the same single element as the new list. If the list is empty, returns an empty list. if len(lst) == 0: return [] if len(lst) == 1: return lst new_list = [] for i in range(len(lst)): if i == 0: new_list.append(lst[i] + lst[i + 1]) elif i == len(lst) - 1: new_list.append(lst[i - 1] + lst[i]) else: new_list.append(lst[i - 1] + lst[i + 1]) return new_list"},{"question":"Create a function that takes in a list of strings and returns a list of strings that contain only the unique characters. The unique characters should appear in the same order as they appeared in the original strings list.","solution":"def unique_characters(strings): Takes in a list of strings and returns a list of strings that contain only the unique characters. The unique characters should appear in the same order as they appeared in the original strings list. def unique_chars(s): seen = set() unique_char_list = [] for char in s: if char not in seen: seen.add(char) unique_char_list.append(char) return ''.join(unique_char_list) return [unique_chars(s) for s in strings]"},{"question":"Create a function that generates a random five-letter word using the characters 'a', 'b', and 'c'. The function should return the word as a string. Additionally, you must ensure that the word generated by the function is not a subsequence of another previously generated word.","solution":"import random previously_generated_words = set() def generate_random_word(): chars = 'abc' while True: word = ''.join(random.choices(chars, k=5)) if not any(is_subsequence(word, prev_word) for prev_word in previously_generated_words): previously_generated_words.add(word) return word def is_subsequence(sub, string): it = iter(string) return all(char in it for char in sub)"},{"question":"Create a function that can check if a password is secure. The function should checks if the password has a minimum length of 8 characters, contains at least one uppercase letter, one lowercase letter, one digit, and one special character from the set \\"!@#%^&*\\".","solution":"import re def is_secure_password(password): Checks if the given password is secure. A secure password has a minimum length of 8 characters, contains at least one uppercase letter, one lowercase letter, one digit, and one special character from the set \\"!@#%^&*\\". if len(password) < 8: return False if not re.search(r'[A-Z]', password): return False if not re.search(r'[a-z]', password): return False if not re.search(r'[0-9]', password): return False if not re.search(r'[!@#%^&*]', password): return False return True"},{"question":"Create a function that reverses a string and returns the result. The function should also handle cases where the string is empty or null. The string may contain alphanumeric characters and special characters.","solution":"def reverse_string(s): Reverses the given string and returns the result. If the string is None, it returns None. if s is None: return None return s[::-1]"},{"question":"Create a function that takes a string s as an argument and returns the string reversed. How would you tackle this problem using python's slicing technique?","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Create a function that takes in three parameters: \`start\`, \`end\`, and \`step\`. It should return a list of all the numbers from \`start\` to \`end\` (inclusive) that are multiples of \`step\`.","solution":"def multiples_in_range(start, end, step): Returns a list of all the numbers from start to end (inclusive) that are multiples of step. if step == 0: raise ValueError(\\"Step cannot be zero.\\") multiples = [] for num in range(start, end + 1): if num % step == 0: multiples.append(num) return multiples"},{"question":"Create a function that takes two integer sequences and determines whether the first sequence is a subsequence of the second sequence. The function should return \`true\` if the first sequence is a subsequence of the second sequence, and \`false\` otherwise.","solution":"def is_subsequence(seq1, seq2): Determine whether seq1 is a subsequence of seq2. Args: - seq1: First sequence (list of integers) - seq2: Second sequence (list of integers) Returns: - bool: True if seq1 is a subsequence of seq2, False otherwise it = iter(seq2) return all(item in it for item in seq1)"},{"question":"Create a function that takes a list of integers as an argument and returns a new list which is the reverse of the provided list.","solution":"def reverse_list(lst): Returns a new list that is the reverse of the provided list. return lst[::-1]"},{"question":"Create a function that takes an integer array and its length, and returns the sum of the elements in the array.","solution":"def sum_array(arr): Returns the sum of the elements in the array. Parameters: arr (list of int): The array of integers to sum. Returns: int: The sum of the elements in the array. return sum(arr)"},{"question":"Create a function that calculates the number of unique elements in a list. The function should accept two parameters: a list of elements (which can be of any datatype) and an optional boolean parameter \`case_sensitive\` that defaults to \`False\`. If \`case_sensitive\` is \`False\`, the function should treat 'a' and 'A' as the same character. If \`case_sensitive\` is \`True\`, the function should treat 'a' and 'A' as different characters. The function should return the count of unique elements in the list.","solution":"def count_unique_elements(lst, case_sensitive=False): Returns the count of unique elements in the list. If case_sensitive is True, 'a' and 'A' are considered different; otherwise, they are the same. Parameters: lst : list A list of elements which can be of any datatype. case_sensitive : bool A boolean indicating if the comparison should be case sensitive. Returns: int The number of unique elements in the list. if not case_sensitive: lst = [str(item).lower() if isinstance(item, str) else item for item in lst] unique_elements = set(lst) return len(unique_elements)"},{"question":"Create a function that reverses a string in Python. You should not use any built-in string reversing functions or libraries to accomplish this task.","solution":"def reverse_string(s): Reverses the input string without using any built-in reversing function. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Create a function that reads a file and prints the lines of the file.","solution":"def read_and_print_file(file_path): Reads a file and prints its lines. Parameters: file_path (str): The path to the file to be read. try: with open(file_path, 'r') as file: for line in file: print(line, end='') # end='' to avoid adding extra new lines except FileNotFoundError: print(f\\"The file at {file_path} does not exist.\\") except IOError as e: print(f\\"An IOError occurred: {e}\\")"},{"question":"Create a function that takes a list of integers and return the list with all occurrences of the integer 4 removed. If the integer 4 does not exist in the list, return the list unchanged. The function should be implemented in Python.","solution":"def remove_fours(lst): Removes all occurrences of the integer 4 from the provided list. Parameters: lst (list): A list of integers. Returns: list: The list with all occurrences of the integer 4 removed. return [x for x in lst if x != 4]"},{"question":"Create a function that takes an integer as input and returns a list of all the factors of that integer. The factors are the numbers that divide the given number without leaving any remainder. For example, the factors of 12 are [1, 2, 3, 4, 6, 12].","solution":"def find_factors(n): Returns a list of all the factors of the given integer n. if n <= 0: raise ValueError(\\"The input must be a positive integer.\\") factors = [i for i in range(1, n + 1) if n % i == 0] return factors"},{"question":"Create a function that checks if a given list of numbers is sorted in ascending order. Additionally, the function should return the index of the first element that is out of order if the list is not sorted. If the list is already sorted, return -1.","solution":"def is_sorted(numbers): Checks if the given list of numbers is sorted in ascending order. If the list is not sorted, returns the index of the first element that is out of order. If the list is sorted, returns -1. :param numbers: List of numbers to check :return: Index of the first element out of order, or -1 if sorted for i in range(len(numbers) - 1): if numbers[i] > numbers[i + 1]: return i + 1 return -1"},{"question":"Create a function that outputs a unique generated password of a fixed length. The password should include letters (both uppercase and lowercase), numbers, and special characters. Ensure that the generated password is different from the previous password generated by this function.","solution":"import random import string previous_password = None def generate_unique_password(length): Generates a unique password of a given length that includes uppercase, lowercase, numbers, and special characters. Ensures the password is different from the previous one generated. global previous_password if length < 1: raise ValueError(\\"Password length must be at least 1\\") all_characters = string.ascii_letters + string.digits + string.punctuation while True: password = ''.join(random.choice(all_characters) for _ in range(length)) if password != previous_password: previous_password = password return password"},{"question":"Create a function that takes an integer n as an input and prints \\"Fizz\\" for multiples of 3, \\"Buzz\\" for multiples of 5, and \\"FizzBuzz\\" for multiples of both 3 and 5.","solution":"def fizz_buzz(n): Prints \\"Fizz\\" for multiples of 3, \\"Buzz\\" for multiples of 5, and \\"FizzBuzz\\" for multiples of both 3 and 5 within the range from 1 to n. results = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: results.append(\\"FizzBuzz\\") elif i % 3 == 0: results.append(\\"Fizz\\") elif i % 5 == 0: results.append(\\"Buzz\\") else: results.append(str(i)) return results"},{"question":"Create a function that takes two lists as input and returns True if the two lists contain the same elements, regardless of the order. This function should also ignore any duplicate elements, meaning that even if both lists have the same element multiple times, they are only considered once for comparison.","solution":"def are_lists_equal(list1, list2): Returns True if both lists contain the same elements, regardless of order. Duplicates are ignored in the comparison. return set(list1) == set(list2)"},{"question":"Create a function that takes a list of integers as input and returns a new list containing the sum of all elements in the original list. Additionally, the function should identify and return the maximum and minimum values within the list.","solution":"def summarize_list(numbers): Returns a sum, maximum and minimum values of the input list. Parameters: numbers (list): List of integers. Returns: tuple: A tuple containing the sum of the list, maximum value, and minimum value. if not numbers: return (0, None, None) list_sum = sum(numbers) max_value = max(numbers) min_value = min(numbers) return (list_sum, max_value, min_value)"},{"question":"Create a function that accepts a positive integer n and returns a string representing the count-and-say sequence.","solution":"def count_and_say(n): Generates the nth sequence of the count-and-say sequence. Parameters: n (int): The step of the sequence to generate. Returns: str: The nth sequence as a string. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") current_sequence = \\"1\\" for _ in range(n - 1): next_sequence = \\"\\" count = 0 char = current_sequence[0] for c in current_sequence: if c == char: count += 1 else: next_sequence += str(count) + char char = c count = 1 next_sequence += str(count) + char current_sequence = next_sequence return current_sequence"},{"question":"Create a function that reverses both the order of the words and the characters in each word.","solution":"def reverse_words_and_characters(sentence): Reverses the order of words and the characters in each word in the given sentence. :param sentence: A string containing the sentence. :return: A string with reversed words and reversed characters in each word. return ' '.join(word[::-1] for word in sentence.split()[::-1])"},{"question":"Create a function that takes a list of integers and returns a new list containing the squares of each number. The function should handle both positive and negative integers, and the output list should not contain any duplicates.","solution":"def unique_squares(nums): Returns a list of the unique squares of the numbers in the input list. return list(set(x**2 for x in nums))"},{"question":"Create a function that checks if a string contains a balanced number of parentheses. A string is considered to have balanced parentheses if every opening parenthesis '(' has a corresponding closing parenthesis ')' and they are in the correct order.","solution":"def is_balanced_parentheses(s): Checks if a string contains a balanced number of parentheses. :param s: Input string to check :return: True if the parentheses are balanced, False otherwise stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if stack: stack.pop() else: return False return len(stack) == 0"},{"question":"Create a function that implements a left rotation operation on an array. A left rotation operation moves the first element of the array to the last position, shifting all other elements one position to the left. The function should accept an array and the number of rotations as input and return the rotated array as output. The array can contain any data type (integers, strings, etc.) and the number of rotations should be non-negative.","solution":"def left_rotate(arr, num_rotations): Performs left rotation on the input array 'num_rotations' times. Parameters: arr (list): The array to be rotated. num_rotations (int): The number of times to rotate the array. Returns: list: The rotated array. if not arr: return arr num_rotations = num_rotations % len(arr) # Handle cases where num_rotations > len(arr) return arr[num_rotations:] + arr[:num_rotations]"},{"question":"Create a function that takes a list of integers and returns a new list with every other element removed.","solution":"def remove_every_other(lst): Returns a new list with every other element removed from the original list. return lst[::2]"},{"question":"Create a function that takes an integer as an input and returns a list of all the divisors of that integer. The output list should not include 1 or the integer itself.","solution":"def get_divisors(n): Returns a list of all divisors of a given integer n, excluding 1 and the number itself. if n <= 1: return [] divisors = [i for i in range(2, n) if n % i == 0] return divisors"},{"question":"Create a function that calculates the Fibonacci sequence using recursion. The function should take an integer \`n\` as input and return the nth Fibonacci number.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"Input should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function that identifies and returns all palindromic strings from a given list of strings.","solution":"def find_palindromes(strings): Returns a list of palindromic strings from the given list. return [s for s in strings if s == s[::-1]]"},{"question":"Create a function that takes an array of integers and returns a new array with the elements in reverse order. The function should be written in Python and optimized for performance.","solution":"def reverse_array(arr): Takes an array of integers and returns a new array with the elements in reverse order. :param arr: List[int] - A list of integers :return: List[int] - The reversed list of integers return arr[::-1]"},{"question":"Create a function that computes the factorial of a given number using recursion. The function should take a single integer input and return the factorial of that number. Additionally, write a check function to validate the solution with several data points.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. Parameters: n (int): The number to compute the factorial of. Must be a non-negative integer. Returns: int: The factorial of the given number n. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that accepts three parameters: an array of integers representing raster values, an integer representing the x-coordinate, and an integer representing the y-coordinate. The task is to return the sum of the raster values at the corresponding y and x coordinates in the array. Note that the x-coordinate and y-coordinate range from 0 to the length of the array minus one. If the x-coordinate or y-coordinate is below 0 or above the length of the array minus one, return -1.","solution":"def sum_raster_values(raster, x, y): Returns the sum of the raster values at coordinates (x, y). If the coordinates are out of bounds, returns -1. :param raster: List of integers representing raster values. :param x: Integer representing the x-coordinate. :param y: Integer representing the y-coordinate. :return: Integer sum of the values at the coordinates or -1 if out of bounds. if x < 0 or y < 0 or x >= len(raster) or y >= len(raster): return -1 return raster[x] + raster[y]"},{"question":"Create a function that returns a string with all numbers from 1 to N concatenated together.","solution":"def concatenate_numbers(N): Returns a string with all numbers from 1 to N concatenated together. Parameters: - N (int): The upper limit of the range of numbers to be concatenated. Returns: - str: A string of numbers from 1 to N concatenated together. return ''.join(str(i) for i in range(1, N + 1))"},{"question":"Create a function that takes in a list of integers, finds the second largest number in the list, and returns it. If the list does not have a second largest number, return None. The function should consider the list to have a second largest number if there is one distinct number that is larger than all other numbers in the list except one.","solution":"def second_largest(numbers): Returns the second largest distinct number in the list. If there isn't a second largest number, returns None. if len(numbers) < 2: return None first, second = float('-inf'), float('-inf') for num in numbers: if num > first: first, second = num, first elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Create a function that takes two integer arrays (list in Python) as input and returns their union, which is a list containing all unique elements from both lists without duplicates.","solution":"def union_of_arrays(arr1, arr2): Returns the union of two integer arrays as a list containing all unique elements. return list(set(arr1) | set(arr2))"},{"question":"Create a function that takes an integer list and returns the maximum sum of a subarray. The function should handle cases where all numbers in the array are negative. The function should also handle large input sizes efficiently.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray. Handles cases where all numbers in the array are negative. Uses Kadane's algorithm for efficient computation. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that , given two lists \`x\` and \`y\`, it should return the count of elements in both lists that are equal. However, only consider elements in the range from index 0 to \`n-1\` in both lists, where \`n\` is a parameter to the function.","solution":"def count_common_elements(x, y, n): Counts the number of elements that are equal in the two lists x and y from index 0 to n-1. Parameters: - x: List of elements - y: List of elements - n: Range up to which to consider elements in both lists Returns: - int: Number of common elements in the specified range. count = 0 for i in range(n): if i < len(x) and i < len(y) and x[i] == y[i]: count += 1 return count"},{"question":"Create a function that takes a list of integers and returns a list of the same length where each element is the square of the corresponding element in the input list.","solution":"def square_elements(lst): Returns a new list where each element is the square of the corresponding element in the input list. :param lst: List of integers :return: List of squared integers return [x ** 2 for x in lst]"},{"question":"Create a function that calculates the sum of the first n positive integers using the formula ( S = frac{n(n + 1)}{2} ). Implement this function in a language of your choice and provide a solution that is efficient and easy to understand.","solution":"def sum_of_first_n_integers(n): Returns the sum of the first n positive integers using the formula S = n * (n + 1) // 2 if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") return n * (n + 1) // 2"},{"question":"Create a function that calculates the factorial of a given number in Python. Ensure your solution is clear and efficient.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. The factorial of n is the product of all positive integers less than or equal to n. Parameters: n (int): A non-negative integer whose factorial is to be calculated Returns: int: The factorial of the given number Raises: ValueError: If n is a negative integer if n < 0: raise ValueError(\\"Cannot calculate factorial of a negative number\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that implements a stack with the following operations - push, pop, and top.","solution":"class Stack: def __init__(self): self.stack = [] def push(self, value): self.stack.append(value) def pop(self): if self.stack: return self.stack.pop() return None # Return None if stack is empty def top(self): if self.stack: return self.stack[-1] return None # Return None if stack is empty"},{"question":"Create a function that takes two parameters, a string and a substring, and returns the count of non-overlapping occurrences of the substring in the string.","solution":"def count_non_overlapping_occurrences(main_string, sub_string): Returns the count of non-overlapping occurrences of sub_string in main_string. return main_string.count(sub_string)"},{"question":"Create a function that accepts an integer as a parameter. If the integer is negative, return the string \\"Negative\\". If the integer is zero, return the string \\"Zero\\". If the integer is positive, return the string \\"Positive\\".","solution":"def determine_sign(num): Determines if the given integer is negative, zero, or positive. Parameters: num (int): The integer to check. Returns: str: \\"Negative\\" if num is less than zero, \\"Zero\\" if num is equal to zero, \\"Positive\\" if num is greater than zero. if num < 0: return \\"Negative\\" elif num == 0: return \\"Zero\\" else: return \\"Positive\\""},{"question":"Create a function that takes an array of integers and finds the first negative number in the array. If there is no negative number, the function should return \`null\`.","solution":"def first_negative(numbers): Returns the first negative number in the array. If there is no negative number, returns 'null'. for num in numbers: if num < 0: return num return 'null'"},{"question":"Create a function that takes a list of integers and a target value. The function should return the index of the target value within the list. If the target value is not in the list, return -1. Additionally, implement a check function with provided data points to verify the correctness of the solution.","solution":"def find_index(nums, target): Returns the index of the target value within the list nums. If the target value is not found, returns -1. try: return nums.index(target) except ValueError: return -1"},{"question":"Create a function that checks if a given number is a palindrome. A palindrome is a number that reads the same backward as forward. The function should handle both even and odd numbers, and consider leading zeros as significant. For example, 121 is a palindrome, but 12321 and 100 are not.","solution":"def is_palindrome_number(number): Returns True if the given number is a palindrome, False otherwise. Args: number (int): The number to be checked. Returns: bool: True if the number is a palindrome, False otherwise. num_str = str(number) return num_str == num_str[::-1]"},{"question":"Create a function that prints the Fibonacci sequence up to a number n. Here, n is the number of terms you want to print in the sequence. For example, if n = 7, the sequence would be printed as 0, 1, 1, 2, 3, 5, 8. Implement this function using recursion.","solution":"def fibonacci_sequence(n): Recursive function to return the Fibonacci sequence up to n terms. def fibonacci_recursion(k): if k <= 1: return k else: return fibonacci_recursion(k-1) + fibonacci_recursion(k-2) sequence = [] for i in range(n): sequence.append(fibonacci_recursion(i)) return sequence"},{"question":"Create a function that returns the first two maximum values in a list. The function should handle exceptions for lists that are too short and lists with non-numeric values.","solution":"def first_two_max_values(lst): Returns the first two maximum values in a list. Parameters: lst (list): A list of numeric values. Returns: tuple: A tuple containing the two maximum values. Raises: ValueError: If the list has fewer than 2 elements or contains non-numeric values. if len(lst) < 2: raise ValueError(\\"List must contain at least two elements.\\") try: sorted_lst = sorted(lst, reverse=True) return (sorted_lst[0], sorted_lst[1]) except TypeError: raise ValueError(\\"List contains non-numeric values.\\")"},{"question":"Create a function that sums all the elements in a list of numbers. If the sum is greater than 100, return the sum minus 100. If the sum is less than or equal to 100, return the sum as is.","solution":"def sum_list(numbers): Sums all the elements in a list of numbers. If the sum is greater than 100, returns the sum minus 100. If the sum is less than or equal to 100, returns the sum as is. total_sum = sum(numbers) if total_sum > 100: return total_sum - 100 else: return total_sum"},{"question":"Create a function that converts a string to a binary string.","solution":"def string_to_binary(s): Converts a string to its binary representation. Args: s (str): The input string. Returns: str: The binary representation of the string. return ' '.join(format(ord(c), '08b') for c in s)"},{"question":"Create a function that takes two parameters, a positive integer \`n\`, and a string \`s\`, and returns a new string that repeats \`s\` \`n\` times.","solution":"def repeat_string(n, s): Returns a new string that repeats \`s\` \`n\` times. Parameters: n (int): A positive integer. s (str): The string to be repeated. Returns: str: The new string that repeats \`s\` \`n\` times. return s * n"},{"question":"Create a function that produces a random fill based on an availability option and fills the extra space with the next available element from a given array. For example, if you have an array like [1,2,3,4,5] and the availability option is 1, the function will return [1,1,1,1,1]. If the availability option is 2 it will return [1,1,1,2,2] and so on, filling the extra space with the next element in the array.","solution":"def random_fill(array, availability_option): Produces a random fill based on an availability option and fills the extra space with the next available element from a given array. Parameters: - array: List of elements to fill from. - availability_option: Integer indicating the consecutive fill count. Returns: - List filled according to the availability option. filled_array = [] for i in range(len(array)): filled_array.extend([array[i]] * availability_option) return filled_array[:len(array)]"},{"question":"Create a function that takes in a string of words and returns the number of unique words in the string.","solution":"def count_unique_words(s): Takes in a string of words and returns the number of unique words in the string. words = s.split() unique_words = set(words) return len(unique_words)"},{"question":"Create a function that takes two integers as input and returns the minimum value among them. If one of the integers is \`-2147483648\`, which is the minimum possible value for a 32-bit signed integer, the function should return the other integer directly without comparison. This behavior helps in avoiding potential issues with overflow when comparing \`-2147483648\`.","solution":"def minimum_value(a, b): Returns the minimum value between two integers. If one of the integers is -2147483648, it returns the other integer directly. MIN_INT = -2147483648 if a == MIN_INT: return b if b == MIN_INT: return a return min(a, b)"},{"question":"Create a function that takes a list of ranges (intervals) as input and returns a list of intervals where the sum of the numbers in the intervals that overlap with a given range is zero.","solution":"def zero_sum_intervals(intervals): This function takes a list of intervals and returns a list of intervals where the sum of the numbers in the intervals that overlap with the given range is zero. Parameters: intervals (list of tuples): A list of intervals where each interval is a tuple (start, end). Returns: list of tuples: A list of intervals that have zero sum. result = [] for interval in intervals: start, end = interval if (start + end) == 0: result.append(interval) return result"},{"question":"Create a function that converts a non-negative integer into a list of its digits in reverse order.","solution":"def reverse_digits(n): Converts a non-negative integer into a list of its digits in reverse order. return [int(digit) for digit in str(n)][::-1]"},{"question":"Create a function that takes in two integers, a and b, and returns the sum of all numbers from a to b (inclusive).","solution":"def sum_range(a, b): Returns the sum of all numbers from a to b (inclusive). if a > b: a, b = b, a return sum(range(a, b + 1))"},{"question":"Create a function that takes an integer as input and returns True if the number is a palindrome, otherwise return False. A palindrome is a number that reads the same backward as forward. You should not use any built-in reverse functions or methods.","solution":"def is_palindrome(n): Returns True if the integer n is a palindrome, otherwise returns False. str_n = str(n) length = len(str_n) for i in range(length // 2): if str_n[i] != str_n[length - i - 1]: return False return True"},{"question":"Create a function that identifies neighboring nodes in a weighted graph where each node is associated with a weight, and the connections between nodes are also weighted. You need to find the sum of all weights connected to a given node.","solution":"def sum_of_connected_node_weights(graph, node): Given a weighted graph and a node, return the sum of all weights connected to the node. Parameters: - graph: A dictionary where keys are nodes and values are dictionaries of neighboring nodes with their respective weights. For example: {'A': {'B': 3, 'C': 5}, 'B': {'A': 3, 'C': 2}, 'C': {'A': 5, 'B': 2}} - node: The node for which to calculate the sum of connected weights. Returns: - The sum of all weights connected to the given node. if node not in graph: raise ValueError(f\\"Node {node} not present in the graph\\") return sum(graph[node].values())"},{"question":"Create a function that takes a string \`s\` and an integer \`n\` as arguments. The function should return a new string made up of \`n\` copies of the input string \`s\`.","solution":"def repeat_string(s, n): Returns a new string made up of n copies of the input string s. Args: s (str): The input string to be repeated. n (int): The number of times to repeat the input string. Returns: str: A new string made up of n copies of the input string s. return s * n"},{"question":"Create a function that takes in two integers, \`a\` and \`b\`, and returns the maximum value between them without using the built-in \`max\` function. You should use the ternary (conditional) operator to determine the maximum value.","solution":"def max_value(a, b): Returns the maximum value between a and b using the ternary operator. return a if a > b else b"},{"question":"Create a function that takes a list of strings as input and returns a dictionary where each key is a string from the list and the corresponding value is the length of that string.","solution":"def strings_to_length_dict(strings_list): Takes a list of strings and returns a dictionary where each key is a string from the list and the corresponding value is the length of that string. return {string: len(string) for string in strings_list}"},{"question":"Create a function that takes three arguments: \`type\`, \`id\`, and \`data\`. The function should return a string in the format \`\\"{type}:{id}:Data-{data}\\"\`. If \`type\` is falsy, then it should be replaced with \`\\"generic\\"\`. If \`data\` is falsy, then it should be replaced with \`\\"unknown\\"\`. The function should handle any data type for \`type\` and \`id\`.","solution":"def format_string(type_value, id_value, data_value): Formats a string based on the provided type, id, and data. If type is falsy, it defaults to \\"generic\\". If data is falsy, it defaults to \\"unknown\\". type_value = type_value if type_value else \\"generic\\" data_value = data_value if data_value else \\"unknown\\" return f\\"{type_value}:{id_value}:Data-{data_value}\\""},{"question":"Create a function that generates a list of Fibonacci numbers up to a specified length. The function should take two parameters: the length of the list and the type of sequence (either 'fibonacci' or 'luhn'). The 'fibonacci' type should generate the traditional Fibonacci sequence, while the 'luhn' type should generate numbers that follow the Luhn algorithm, a method often used in credit card validation.","solution":"def generate_sequence(length, sequence_type): Generates a sequence of numbers up to a specified length. Parameters: length (int): Length of the list (number of terms in the sequence). sequence_type (str): Type of sequence, either 'fibonacci' or 'luhn'. Returns: list: A list of numbers in the specified sequence. if sequence_type == 'fibonacci': return generate_fibonacci(length) elif sequence_type == 'luhn': return generate_luhn(length) else: raise ValueError(\\"Invalid sequence type. Choose either 'fibonacci' or 'luhn'.\\") def generate_fibonacci(length): if length <= 0: return [] if length == 1: return [0] sequence = [0, 1] while len(sequence) < length: sequence.append(sequence[-1] + sequence[-2]) return sequence def generate_luhn(length): if length <= 0: return [] if length == 1: return [0] sequence = [0, 9] # Luhn over-simplified start (this is not the Luhn sequence, as it's more a standard form) return sequence[:length] # We can elaborate further if this needs to be more sophisticated"},{"question":"Create a function that takes a list of lambda functions as input and returns another function that takes a list of values as input and applies the corresponding lambda function to each value in the list, returning a new list with the results.","solution":"def apply_lambdas(lambdas): Takes a list of lambda functions and returns a function that applies each lambda to the corresponding value in a list. def apply(values): return [fn(value) for fn, value in zip(lambdas, values)] return apply"},{"question":"Create a function that takes two parameters, a string and an integer. The function should return a new string where all instances of the integer in the string are replaced with the word 'digit'. If the integer is not present in the string, the function should return 'Integer not found'.","solution":"def replace_integer_with_word(s, num): Replaces all instances of the integer in the string with the word 'digit'. If the integer is not found in the string, returns 'Integer not found'. num_str = str(num) if num_str in s: return s.replace(num_str, 'digit') else: return 'Integer not found'"},{"question":"Create a function that takes two inputs, two integers (a and b), and adds them together then returns the result. The function should also include error handling for non-integer inputs.","solution":"def add(a, b): Returns the sum of a and b. Raises TypeError if inputs are not integers. if not isinstance(a, int) or not isinstance(b, int): raise TypeError('Both inputs must be integers') return a + b"},{"question":"Create a function that accepts a string represent a decimal number as input. It should return the sum of its digits, after converting the string to an integer. The function should throw an error if the input is not a valid decimal number.","solution":"def sum_of_digits(decimal_string): Returns the sum of the digits of the input string representing a decimal number. Raises a ValueError if the input is not a valid decimal number. if not decimal_string.isdigit(): raise ValueError(\\"Invalid input: Input is not a valid decimal number\\") integer_value = int(decimal_string) return sum(int(digit) for digit in str(integer_value))"},{"question":"Create a function that takes a list of integers and returns the sum of all elements in the list using a loop.","solution":"def sum_of_elements(lst): Returns the sum of all elements in the list using a loop. total = 0 for num in lst: total += num return total"},{"question":"Create a function that takes a list of positive integers and returns a new list containing the sum of the last two digits of each number in the input list. If a number is less than 10, the function should simply return its last digit. If the list is empty, the function should return an empty list.","solution":"def sum_of_last_two_digits(numbers): Takes a list of positive integers and returns a new list containing the sum of the last two digits of each number in the input list. If a number is less than 10, the function simply returns its last digit. If the list is empty, the function returns an empty list. result = [] for num in numbers: if num < 10: result.append(num) else: last_digit = num % 10 second_last_digit = (num // 10) % 10 result.append(last_digit + second_last_digit) return result"},{"question":"Create a function that checks if a number is happy or not. A happy number is defined as a number which eventually reaches 1 when replaced by the sum of the square of each digit repeatedly. If a number is happy, your function should return True; otherwise, it should return False.","solution":"def is_happy_number(n): Returns True if n is a happy number, otherwise False. A happy number is defined as a number which eventually reaches 1 when replaced by the sum of the square of each digit repeatedly. def get_next(number): return sum(int(digit) ** 2 for digit in str(number)) seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next(n) return n == 1"},{"question":"Create a function that generates all possible combinations of a given string, and add it to a list. The function should also handle strings containing spaces. For a string of length n, the function should return a list of 2^n combinations.","solution":"from itertools import combinations def generate_combinations(s): Generates all possible combinations of a given string, s, and adds them to a list. For a string of length n, it returns a list of 2^n combinations. comb_list = [] for i in range(len(s) + 1): comb_list.extend([''.join(comb) for comb in combinations(s, i)]) return comb_list"},{"question":"Create a function that can accept any number of arguments and return the sum of all the arguments.","solution":"def sum_all(*args): Returns the sum of all the arguments. Parameters: *args: any number of numeric arguments Returns: Sum of all the arguments return sum(args)"},{"question":"Create a function that takes a list of integers, multiplies each element by 2, and returns the resulting list. Also, include a check function to verify the correctness of the solution with provided data points.","solution":"def multiply_by_two(numbers): Returns a new list with each element in the input list multiplied by 2. return [x * 2 for x in numbers]"},{"question":"Create a function that takes two parameters, a string and an integer, and returns a new string where every nth character of the original string is converted to uppercase.","solution":"def nth_char_to_uppercase(s, n): Returns a new string where every nth character of the original string is converted to uppercase. :param s: Input string :param n: Integer indicating the interval of characters to convert to uppercase :return: New string with every nth character in uppercase # Ensure valid input if n <= 0: return s result = [] for i, char in enumerate(s): if (i + 1) % n == 0: result.append(char.upper()) else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes a 2D list (list of lists) as input and returns the sum of all elements in the list.","solution":"def sum_2d_list(lst): Returns the sum of all elements in a 2D list. Parameters: lst (list of lists of int/float): A 2D list containing numerical elements. Returns: int/float: Sum of all elements in the 2D list. total_sum = 0 for row in lst: total_sum += sum(row) return total_sum"},{"question":"Create a function that takes two integers, a and b, as input and returns the quotient and remainder of the division of a by b. You should also handle the case where b is zero and return a helpful error message.","solution":"def divide(a, b): Returns the quotient and remainder of the division of a by b. Handles division by zero by returning an error message. if b == 0: return \\"Error: Division by zero is not allowed\\" else: quotient = a // b remainder = a % b return quotient, remainder"},{"question":"Create a function that finds the sum of the squares of the first n natural numbers, and the sum of their cubes. The function should return these two values as a tuple.","solution":"def sum_of_squares_and_cubes(n): Returns the sum of the squares and the sum of the cubes of the first n natural numbers. Parameters: n (int): The number of first natural numbers Returns: tuple: (sum_of_squares, sum_of_cubes) sum_of_squares = sum(i ** 2 for i in range(1, n + 1)) sum_of_cubes = sum(i ** 3 for i in range(1, n + 1)) return (sum_of_squares, sum_of_cubes)"},{"question":"Create a function that takes an integer \`n\` as input and returns a list of \`n\` elements such that the nth element is the sum of all integers from 1 to n (inclusive). The remainder of the list elements can be any values you choose, but they must be such that the nth element remains correct. For example, if \`n = 5\`, the nth element should be 15 (1+2+3+4+5), and the remaining four elements can be any values as long as the fifth element is 15.","solution":"def create_list_with_n_sum(n): Returns a list of n elements where the nth element is the sum of all integers from 1 to n. The remaining elements are arbitrary but must ensure the nth element is correct. if n <= 0: return [] nth_element = sum(range(1, n + 1)) random_elements = [0] * (n - 1) random_elements.append(nth_element) return random_elements"},{"question":"Create a function that takes an integer \`n\` and returns the maximum sum of a contiguous subarray within an array of \`n\` integers. The array can contain both positive and negative integers.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray within the given array. Args: arr (list of int): List containing n integers (positive and negative). Returns: int: Maximum sum of a contiguous subarray. max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Create a function that accepts a list of integers and returns a new list where each integer has been incremented by 5. The function should be named \`increment_by_five\`.","solution":"def increment_by_five(lst): Returns a new list where each integer in the input list has been incremented by 5. Parameters: lst (list of int): A list of integers to increment. Returns: list of int: A new list with each integer incremented by 5. return [x + 5 for x in lst]"},{"question":"Create a function that checks if a string contains only unique characters using Python. The function should return \`True\` if all characters in the string are unique, and \`False\` otherwise. Ensure that your solution does not use any additional data structures like lists, sets, or dictionaries.","solution":"def has_unique_chars(s): Checks if a string contains only unique characters. for i in range(len(s)): for j in range(i + 1, len(s)): if s[i] == s[j]: return False return True"},{"question":"Create a function that takes a list of integers as an input, and returns the sum of all prime numbers in the list. A prime number is defined as a number that is greater than 1 and has no divisors other than 1 and itself.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def sum_primes(numbers): Returns the sum of all prime numbers in the provided list 'numbers'. return sum(n for n in numbers if is_prime(n))"},{"question":"Create a function that searches for the first occurrence of a specified string inside a given list of strings. If the string is found, the function should return the index of the string in the list. If the string is not found, the function should return -1.","solution":"def find_string_index(strings, target): Searches for the first occurrence of the target string inside the list of strings. Returns the index of the string if found, else returns -1. Parameters: strings (list of str): the list of strings to search through. target (str): the string to find in the list. Returns: int: the index of the target string if found, otherwise -1. try: return strings.index(target) except ValueError: return -1"},{"question":"Create a function that will recursively calculate the factorial of a number. The function should also check if the number is a non-negative integer before calculating the factorial. If the input is invalid, it should return an appropriate error message.","solution":"def factorial(n): Returns the factorial of non-negative integer n. If n is not a non-negative integer, returns an appropriate error message. if not isinstance(n, int): return \\"Input must be an integer\\" if n < 0: return \\"Input must be a non-negative integer\\" if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Create a function that takes an n x m matrix and an integer value v. The function should replace all occurances of v in the matrix with -1.","solution":"def replace_value(matrix, v): Replaces all occurrences of value v in the matrix with -1. Parameters: matrix (list of list of int): The n x m matrix. v (int): The integer value to be replaced with -1. Returns: list of list of int: The matrix with v replaced by -1. for i in range(len(matrix)): for j in range(len(matrix[i])): if matrix[i][j] == v: matrix[i][j] = -1 return matrix"},{"question":"Create a function that retrieves the smallest element from a list of integers. If the list is empty, return \`None\`. Use the concept of recursion to solve this problem.","solution":"def find_smallest_recursive(lst): Returns the smallest element in a list using recursion. If the list is empty, returns None. if not lst: return None def helper(lst, smallest): if not lst: return smallest if lst[0] < smallest: smallest = lst[0] return helper(lst[1:], smallest) return helper(lst[1:], lst[0])"},{"question":"Create a function that takes a string from user input, splits it into words, creates a list of those words, and then reverse the order of the list. Finally, join the reversed list back into a string and return it.","solution":"def reverse_words(input_string): Takes an input string, splits it into words, reverses the list of words, and joins them back into a string. words_list = input_string.split() reversed_words_list = words_list[::-1] reversed_string = ' '.join(reversed_words_list) return reversed_string"},{"question":"Create a function that calculates the mean value of a given list of integers.","solution":"def calculate_mean(values): Returns the mean value of a given list of integers. :param values: List of integers :return: Mean value as a float if not values: raise ValueError(\\"The list is empty\\") return sum(values) / len(values)"},{"question":"Create a function that will take an array of integers and return a new array of integers with all the duplicates removed. The function should work for an array of any size and should maintain the order of the original array.","solution":"def remove_duplicates(arr): Remove duplicates from an array of integers while maintaining the original order. Parameters: arr (list): The list of integers from which duplicates should be removed. Returns: list: A new list with duplicates removed, maintaining the original order. seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Create a function that accepts a number as input and returns a list of its factors. A factor is a number that divides into another number exactly, without leaving a remainder. The list should be sorted in ascending order. Also, ensure your function handles negative numbers correctly by returning an empty list.","solution":"def factors(n): Returns a list of factors of n in ascending order. Returns an empty list if n is negative. if n < 0: return [] factor_list = [i for i in range(1, n + 1) if n % i == 0] return factor_list"},{"question":"Create a function that takes a 2D array (matrix) as input and returns the sum of the diagonal elements from the top-left to bottom-right and from the top-right to bottom-left. The function should ignore elements outside the 2D array.","solution":"def diagonal_sum(matrix): Returns the sum of the diagonal elements from the top-left to bottom-right and the top-right to bottom-left of a given 2D array (matrix). if not matrix or not matrix[0]: return 0 n = len(matrix) primary_diagonal_sum = sum(matrix[i][i] for i in range(n)) secondary_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n)) # If the matrix has an odd size, the middle element is counted twice if n % 2 == 1: middle_index = n // 2 return primary_diagonal_sum + secondary_diagonal_sum - matrix[middle_index][middle_index] else: return primary_diagonal_sum + secondary_diagonal_sum"},{"question":"Create a function that finds the maximum sum of a continuous subarray and a function that finds the maximum sum of a non-continuous subarray within a given list of integers.","solution":"def max_sum_continuous_subarray(arr): Finds the maximum sum of a continuous subarray using Kadane's algorithm. max_ending_here = max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far def max_sum_non_continuous_subarray(arr): Finds the maximum sum of a non-continuous subarray by summing all positive numbers. max_sum = 0 max_num = max(arr) if max_num < 0: return max_num for num in arr: if num > 0: max_sum += num return max_sum"},{"question":"Create a function that takes in a string and a character, and returns a new string with the character replaced in the string at the given index.","solution":"def replace_char_at_index(string, index, char): Returns a new string with the character replaced at the given index. Parameters: string (str): The original string. index (int): The index at which the character should be replaced. char (str): The character to be placed at the given index. Returns: str: The new string with the character replaced. if not isinstance(string, str): raise ValueError(\\"The first argument must be a string.\\") if not isinstance(index, int): raise ValueError(\\"The second argument must be an integer.\\") if not isinstance(char, str) or len(char) != 1: raise ValueError(\\"The third argument must be a single character string.\\") if index < 0 or index >= len(string): raise ValueError(\\"The index is out of range.\\") return string[:index] + char + string[index + 1:]"},{"question":"Create a function that generates a string of HTML code for displaying a table with columns for First Name, Last Name, and Age, and rows for each person in the list provided. Assume that the input list is a list of dictionaries, where each dictionary represents a person with keys 'first_name', 'last_name', and 'age'.","solution":"def generate_html_table(data): Generates a string of HTML code for displaying a table with columns for First Name, Last Name, and Age, and rows for each person in the list provided. :param data: List of dictionaries, where each dictionary represents a person with keys 'first_name', 'last_name', and 'age'. :return: String of HTML code representing the table. table = '<table>n<tr><th>First Name</th><th>Last Name</th><th>Age</th></tr>n' for person in data: table += f\\"<tr><td>{person['first_name']}</td><td>{person['last_name']}</td><td>{person['age']}</td></tr>n\\" table += '</table>' return table"},{"question":"Create a function that checks whether a given number is a perfect cube, including negative numbers and zero. Your function should return \`True\` if the number is a perfect cube and \`False\` otherwise. The function should be named \`is_perfect_cube\`.","solution":"def is_perfect_cube(n): Returns True if n is a perfect cube, otherwise False. if n == 0: return True if n < 0: cube_root = int(round(-abs(n) ** (1/3.0))) else: cube_root = int(round(n ** (1/3.0))) return cube_root ** 3 == n"},{"question":"Create a function that outputs the title case version of a string input. Title case means that the first letter of every word is capitalized. For example, if the input is \\"hello world\\", the output should be \\"Hello World\\".","solution":"def title_case(text): Converts the input text to title case, capitalizing the first letter of each word. Parameters: text (str): The input string to be converted to title case. Returns: str: The title case version of the input string. return text.title()"},{"question":"Create a function that converts a given string into a pig Latin translation. In Pig Latin, a word is translated by taking the first letter, placing it at the end of the word, and then adding 'ay'. If the word starts with a vowel, 'way' is added to the end of the word. Assume that the input string contains no numbers or punctuation, and only contains lowercase letters and spaces.","solution":"def pig_latin_translation(sentence): Translates a given string into Pig Latin. Pig Latin Rules: - If a word starts with a vowel, add \\"way\\" to the end of the word. - If a word starts with a consonant, move the first letter to the end and add \\"ay\\". Args: sentence (str): The input string containing words to be translated. Returns: str: The translated Pig Latin string. vowels = 'aeiou' words = sentence.split() pig_latin_words = [] for word in words: if word[0] in vowels: pig_latin_word = word + 'way' else: pig_latin_word = word[1:] + word[0] + 'ay' pig_latin_words.append(pig_latin_word) return ' '.join(pig_latin_words)"},{"question":"Create a function that takes an integer as input and returns the length of that number, considering both positive and negative numbers and returning the absolute value of the number as well. For example, if the input is 12345, the output should be 5. If the input is -12345, the output should also be 5.","solution":"def number_length(n): Returns the length of an integer n. Considers both positive and negative numbers and returns the absolute value of the number length. return len(str(abs(n)))"},{"question":"Create a function that takes a string and returns a new string with all the consecutive 'a's replaced by a single 'a'. For example, \\"aaabbbcccd\\" should be transformed to \\"abc\\".","solution":"def replace_consecutive_a(s): Returns a new string where all consecutive 'a's are replaced by a single 'a'. Example: \\"aaabbbcccd\\" should be transformed to \\"abc\\". result = [] previous_char = \\"\\" for char in s: if char == 'a' and previous_char == 'a': continue result.append(char) previous_char = char return ''.join(result)"},{"question":"Create a function that accepts two strings and checks if one string is a rotation of the other. For example, 'hello' is a rotation of 'lohel'.","solution":"def is_rotation(s1, s2): Checks if s1 is a rotation of s2. if len(s1) != len(s2): return False return s1 in s2 * 2"},{"question":"Create a function that checks if a string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward,忽略了意大利语缩写。","solution":"def is_palindrome(s): Checks if the input string s is a palindrome. A palindrome is a word that reads the same forward and backward. Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Normalize the string by converting to lowercase and removing non-alphanumeric characters normalized_str = ''.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string reads the same forward and backward return normalized_str == normalized_str[::-1]"},{"question":"Create a function that takes an array of integers as input and returns a dictionary where keys are the unique integers and values are their counts.","solution":"def count_integers(arr): Takes an array of integers and returns a dictionary where keys are the unique integers and values are their counts. count_dict = {} for num in arr: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 return count_dict"},{"question":"Create a function that calculates the sum of odd numbers from a given list of integers.","solution":"def sum_of_odd_numbers(numbers): Returns the sum of odd numbers from a given list of integers. Parameters: numbers (list): A list of integers. Returns: int: The sum of odd integers in the list. return sum(num for num in numbers if num % 2 != 0)"},{"question":"Create a function that takes an integer N as input and returns a new list where the integers from 1 to N are the cubes of the original list elements. For example, if the input list is \`[1, 2, 3, 4]\`, the output should be \`[1, 8, 27, 64]\`.","solution":"def cubes_up_to_n(N): Returns a list with the cubes of integers from 1 to N. return [i**3 for i in range(1, N + 1)]"},{"question":"Create a function that searches a text for a specific word and returns the frequency of its occurrences. You should ignore case and consider only whole words.","solution":"import re def word_frequency(text, word): Searches for a specific word in a text and returns the frequency of its occurrences. The search is case-insensitive and only whole words are considered. Parameters: text (str): The text in which to search for the word. word (str): The word to search for in the text. Returns: int: The frequency of the word's occurrences in the text. word_regex = re.compile(r'b' + re.escape(word) + r'b', re.IGNORECASE) matches = word_regex.findall(text) return len(matches)"},{"question":"Create a function that returns the minimum value in a given list of numbers. How can I implement this in Python?","solution":"def find_minimum(numbers): Returns the minimum value in a given list of numbers. :param numbers: List of numbers :return: Minimum value in the list if not numbers: raise ValueError(\\"The list is empty\\") minimum_value = numbers[0] for number in numbers: if number < minimum_value: minimum_value = number return minimum_value"},{"question":"Create a function that takes a string as input and returns a new string with all the digits replaced by asterisks (*).","solution":"def replace_digits_with_asterisks(input_string): Returns a new string with all the digits replaced by asterisks (*). return ''.join('*' if char.isdigit() else char for char in input_string)"},{"question":"Create a function that takes in a string and returns a new string where every second character is a space. The first character should not be a space.","solution":"def every_second_char_is_space(s): Converts a string such that every second character is a space. result = [] for i, char in enumerate(s): if i % 2 == 1: result.append(' ') else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes a list of strings and returns a dictionary where the keys are the unique words in the list and the values are the counts of those words.","solution":"def count_words(word_list): Given a list of strings, returns a dictionary with the unique words as keys and their counts as values. word_count = {} for word in word_list: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"Create a function that takes a URL string and returns the domain name from that URL. The domain name is defined as the part of the URL that follows 'www.' and before the next slash '/'.","solution":"def get_domain_name(url): Extracts the domain name from a given URL string. if '://' in url: url = url.split('://')[1] if 'www.' in url: url = url.split('www.')[1] domain_name = url.split('/')[0] return domain_name"},{"question":"Create a function that calculates the nth Fibonacci number using recursion. The function should be named \`fibonacci\` and should take one parameter, \`n\`, which is the position in the Fibonacci sequence (starting from 0 for the first number, 1 for the second number, and so on). The function should return the nth Fibonacci number.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. Parameters: n (int): The position in the Fibonacci sequence (starting from 0). Returns: int: The nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function that takes an integer N as an argument and returns a list of alternating elements from 1 to N (inclusive). The sequence starts with 1, followed by the second-to-last element, then the third element, and so on until all elements are used.","solution":"def alternating_elements(N): Given an integer N, returns a list of alternating elements from 1 to N (inclusive). The sequence starts with 1, then the second-to-last element, then the third element, etc. if N <= 0: return [] elements = list(range(1, N + 1)) result = [] i, j = 0, N - 1 while i <= j: result.append(elements[i]) if i != j: result.append(elements[j]) i += 1 j -= 1 return result"},{"question":"Create a function that generates and returns all powers of a given number n up to the mth power. The function should take two parameters: an integer \`n\` and an integer \`m\`.","solution":"def generate_powers(n, m): Returns a list of powers of n from 0 to m. Parameters: - n (int): The base number. - m (int): The highest exponent. Returns: - List[int]: List containing n^0, n^1, ..., n^m. return [n ** i for i in range(m + 1)]"},{"question":"Create a function that takes an array of strings and returns a new array containing only the strings that contain the substring \\"hello\\" in them.","solution":"def filter_strings_with_hello(arr): Returns a new array containing only the strings that contain the substring \\"hello\\". :param arr: List of strings :return: List of strings containing the substring \\"hello\\" return [s for s in arr if \\"hello\\" in s]"},{"question":"Create a function that takes in a list of integers as input and returns a list of integers that are sorted in ascending order using the merge sort algorithm. Merge sort is a divide-and-conquer algorithm that divides the input list into two halves, calls itself for the two halves, and then merges the two sorted halves.","solution":"def merge_sort(arr): Sorts a list of integers in ascending order using the merge sort algorithm. if len(arr) > 1: mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] merge_sort(left_half) merge_sort(right_half) i = j = k = 0 while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: arr[k] = left_half[i] i += 1 else: arr[k] = right_half[j] j += 1 k += 1 while i < len(left_half): arr[k] = left_half[i] i += 1 k += 1 while j < len(right_half): arr[k] = right_half[j] j += 1 k += 1 return arr"},{"question":"Create a function that takes an integer as a parameter and returns its binary representation as a string. Additionally, the function should handle negative integers using the two's complement representation.","solution":"def int_to_binary(n): Converts an integer to its binary representation as a string. Handles negative integers using two's complement representation. Args: n (int): The integer to convert. Returns: str: The binary representation of the integer. if n >= 0: return bin(n)[2:] # Positive number, simple bin conversion and remove '0b' else: # Compute two's complement for negative number # We need to choose a bit length. Assuming 32-bit for this example: bits = 32 return bin((1 << bits) + n)[2:] # add (1 << 32) to the number and then convert to binary and remove '0b'"},{"question":"Create a function that takes one integer argument and returns the factorial of the integer. For example, it should return 120 (5!) for an input of 5, 1 (1!) for input 1, and 1 (0!) for input 0. However, the function should also handle negative inputs gracefully, by returning None for any negative integers. This is because the factorial function is not defined for negative numbers.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Returns None for negative integers since factorial is not defined for them. if n < 0: return None elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that will take an integer \`n\` as a parameter and return an \`ArrayList<Integer>\` of length \`n\`, where each element is a Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence goes: 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci_sequence(n): Returns a list of the first \`n\` Fibonacci numbers. if n <= 0: return [] fib_list = [0] * n if n > 0: fib_list[0] = 0 if n > 1: fib_list[1] = 1 for i in range(2, n): fib_list[i] = fib_list[i-1] + fib_list[i-2] return fib_list"},{"question":"Create a function that takes an array of integers as input and returns the two largest numbers in the array. If the array has less than two elements, the function should return an array with a single element containing the largest value found in the array. If the array is empty, the function should return an empty array.","solution":"def two_largest_numbers(arr): Returns the two largest numbers from the input array. If the array has less than two elements, returns a single element array with the largest value. If the array is empty, returns an empty array. if len(arr) == 0: return [] elif len(arr) == 1: return [arr[0]] else: first = second = float('-inf') for number in arr: if number > first: second = first first = number elif number > second: second = number return [first, second]"},{"question":"Create a function that takes two strings, a value and a precision. The function should multiply the value by the precision, cast the result to an integer and return the value.","solution":"def multiply_and_cast(value, precision): Multiplies the string representations of value and precision, then casts the result to an integer and returns it. Args: value (str): A string representing a number. precision (str): A string representing a number. Returns: int: The result of the multiplication, cast to an integer. result = float(value) * float(precision) return int(result)"},{"question":"Create a function that takes an array of integers and returns the length of the longest continuous sequence of integers where each integer is one more than the previous one.","solution":"def longest_continuous_sequence(arr): Returns the length of the longest continuous sequence of integers where each integer is one more than the previous one. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1] + 1: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Create a function that takes an array and an integer n. The function should return all the subsequences of the array of size n.","solution":"from itertools import combinations def get_subsequences(arr, n): Returns all subsequences of the array of size n. return list(combinations(arr, n))"},{"question":"Create a function that takes two input lists of integers and returns a new list that contains only the unique elements from both lists, sorted in ascending order. Make sure to handle cases where there are duplicate elements in the input lists.","solution":"def unique_sorted_elements(list1, list2): Takes two input lists of integers and returns a new list containing only the unique elements from both lists, sorted in ascending order. # Combine both lists using set to remove duplicates unique_elements = set(list1) | set(list2) # Convert set back to list and sort it result = sorted(unique_elements) return result"},{"question":"Create a function that generates a Fibonacci sequence for a given number of iterations. The function should take an integer \`n\` as an argument and return a list containing the first \`n\` numbers in the Fibonacci sequence. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci_sequence(n): Returns a list containing the first n numbers in the Fibonacci sequence. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. :param n: int - The number of iterations of the Fibonacci sequence to generate. :return: list - A list of the first n numbers in the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that calculates the total cost (in dollars) of a shopping cart based on the prices of the items and their quantities. The prices are provided in a dictionary where the keys are the item names and the values are the prices per unit. The quantities of the items in the shopping cart are provided in another dictionary with the same keys (item names). The function should return the total cost of the cart.","solution":"def calculate_total_cost(prices, quantities): Calculate the total cost of a shopping cart based on item prices and quantities. :param prices: Dictionary where keys are item names and values are prices per unit. :param quantities: Dictionary where keys are item names and values are quantities. :return: Total cost of the shopping cart. total_cost = 0 for item in prices: if item in quantities: total_cost += prices[item] * quantities[item] return total_cost"},{"question":"Create a function that extracts specific words from a given text and writes them to a file. The words to be extracted are defined by a regular expression pattern. The function should take three arguments: the input text, the regular expression pattern for the words to be extracted, and the file path to output the extracted words.","solution":"import re def extract_words_and_write_to_file(text, pattern, file_path): Extracts specific words from a given text based on a regular expression pattern and writes them to a file. Args: text (str): The input text from which to extract words. pattern (str): The regular expression pattern defining which words to extract. file_path (str): The path of the file where the extracted words will be written. Returns: None extracted_words = re.findall(pattern, text) with open(file_path, 'w') as file: for word in extracted_words: file.write(word + 'n')"},{"question":"Create a function that converts all lowercase letters in a string to uppercase. Write the function in Python.","solution":"def to_uppercase(s): Converts all lowercase letters in the string s to uppercase. Parameters: s (str): The string to convert. Returns: str: The converted string with all lowercase letters in uppercase. return s.upper()"},{"question":"Create a function that determines the area of a circle given its radius. If the radius is negative, return \\"Invalid radius\\".","solution":"import math def area_of_circle(radius): Returns the area of a circle with the given radius. If the radius is negative, returns \\"Invalid radius\\". if radius < 0: return \\"Invalid radius\\" return math.pi * (radius ** 2)"},{"question":"Create a function that takes an integer as an argument and returns the factorial of that integer using recursion. Ensure the function handles the base case properly.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. If n is 0, returns 1 since 0! is 1 by definition. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") elif n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that takes a string as a parameter and checks if it is a palindrome. If it is a palindrome, the function should return the string \\"Palindrome\\". If it is not, the function should return the string \\"Not Palindrome\\".","solution":"def check_palindrome(s): Checks if the given string is a palindrome. Args: s (str): The string to check. Returns: str: \\"Palindrome\\" if the string is a palindrome, \\"Not Palindrome\\" otherwise. # Remove spaces and convert to lowercase for uniformity s = s.replace(\\" \\", \\"\\").lower() if s == s[::-1]: return \\"Palindrome\\" else: return \\"Not Palindrome\\""},{"question":"Create a function that takes two integers num1 and num2 as input and returns true if the sum of num1 and num2 is a prime number, false otherwise. A function called \\"is_prime\\" is provided as a utility for checking primality.","solution":"def is_prime(n): Check if the number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_sum_prime(num1, num2): Check if the sum of num1 and num2 is a prime number. return is_prime(num1 + num2)"},{"question":"Create a function that converts a hexadecimal string to a binary representation in Python. For example, if the input is \\"1A\\", the function should return \\"11010\\".","solution":"def hex_to_bin(hex_str): Converts a hexadecimal string to its binary representation. Parameters: hex_str (str): The hexadecimal string. Returns: str: The binary representation of the hexadecimal string. # Convert hex string to integer num = int(hex_str, 16) # Convert integer to binary string and remove the '0b' prefix bin_str = bin(num)[2:] return bin_str"},{"question":"Create a function that takes in a list of integers and returns a new list with the even-indexed elements removed.","solution":"def remove_even_indexed_elements(lst): Returns a new list with the even-indexed elements removed. Parameters: lst (list): A list of integers. Returns: list: A new list with the even-indexed elements removed. return [lst[i] for i in range(len(lst)) if i % 2 != 0]"},{"question":"Create a function that checks if a given string represents a valid email address. The function should take one parameter: \`email\`, and return \`True\` if the email is valid, and \`False\` otherwise. A valid email address structure consists of a local part and a domain part, separated by the '@' symbol. The local part can consist of letters, digits, underscores, hyphens, and periods. The domain part must contain at least one period, and the substring after the last period must be two or three letters long.","solution":"import re def is_valid_email(email): Checks if the given email address is valid. Parameters: email (str): The email address to check. Returns: bool: True if the email is valid, False otherwise. email_pattern = re.compile( r'^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Za-z]{2,3}' ) return bool(email_pattern.match(email))"},{"question":"Create a function that takes a string and returns the longest word in the string. For example, if the string is \\"Max is 20 years old\\", the function should return \\"years\\". If the string is \\"Hello world\\", the function should return \\"Hello\\". If the string is \\"Hi!\\", the function should return \\"Hi\\". If the string is \\"One two three four five six\\", the function should return \\"three\\".","solution":"def longest_word(s): Returns the longest word in the string s. # Split the string into words based on whitespace words = s.split() # Initialize an empty string to keep track of the longest word longest = \\"\\" # Iterate over each word for word in words: # Clean the word by removing non-alphabetical characters clean_word = ''.join(filter(str.isalpha, word)) # Compare length of cleaned word with the current longest word if len(clean_word) > len(longest): longest = clean_word # Return the longest word return longest"},{"question":"Create a function that takes a matrix and a target number as input and returns the row index where the target number is found. If the target number is not found, return -1. The matrix is represented as a list of lists, where each inner list is a row of the matrix. The matrix is guaranteed to be sorted in ascending order both within rows and between rows.","solution":"def find_target_in_matrix(matrix, target): Finds the row index where the target number is found in a sorted matrix. If the target number is not found, returns -1. :param matrix: List of lists where each inner list is a row of a sorted matrix. :param target: The target number to find in the matrix. :return: Row index where the target is found or -1 if not found. for i, row in enumerate(matrix): if row and row[0] <= target <= row[-1]: # Check if the target can be in this row for num in row: if num == target: return i return -1"},{"question":"Create a function that takes in two strings, and returns the length of the longest common substring between them. For example, if the input strings are \\"abcdef\\" and \\"zabcf\\", the function should return 3, as the longest common substring is \\"abc\\".","solution":"def longest_common_substring(str1, str2): Returns the length of the longest common substring between str1 and str2. # Initialize the DP table m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] longest_length = 0 # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 longest_length = max(longest_length, dp[i][j]) return longest_length"},{"question":"Create a function that generates a list of all possible pairs of numbers (i, j) where i and j are from the list of numbers 1 to 5, including both ends. The function should return this list of pairs.","solution":"def generate_pairs(): Returns a list of all possible pairs of numbers (i, j) where i and j are both from the list of numbers 1 to 5. return [(i, j) for i in range(1, 6) for j in range(1, 6)]"},{"question":"Create a function that can check if two words are reverse strings of each other. What should the function return?","solution":"def are_reverse_strings(word1, word2): Returns True if word1 is the reverse of word2, otherwise False. return word1 == word2[::-1]"},{"question":"Create a function that takes a list of strings and returns the shortest string in the list. If there are multiple strings with the same shortest length, return the first one encountered.","solution":"def shortest_string(strings): Returns the shortest string in the list. If there are multiple strings with the same shortest length, return the first one encountered. :param strings: List of strings :return: Shortest string in the list if not strings: return None return min(strings, key=len)"},{"question":"Create a function that returns a Fibonacci sequence up to a given limit \`n\`.","solution":"def fibonacci_sequence(n): Returns a list containing the Fibonacci sequence up to the given limit n. if n <= 0: return [] sequence = [0, 1] while sequence[-1] + sequence[-2] < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that accepts an array and a number as parameters and returns the array containing the number of occurrences of the number in the array.","solution":"def count_occurrences(arr, num): Returns the number of occurrences of num in the array arr. return arr.count(num)"},{"question":"Create a function that returns the nth element of a Fibonacci sequence in Python. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first few numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on.","solution":"def fibonacci(n): Returns the nth element of the Fibonacci sequence. :param n: The position in the Fibonacci sequence (0-indexed) :return: The nth Fibonacci number if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Create a function that generates the Fibonacci sequence up to the nth term. The function should be able to reach at least up to 100 terms without taking too long to compute. To achieve this, you can implement a caching mechanism to store previously computed terms of the Fibonacci sequence. This will help reduce the computational overhead and improve the performance of the function for larger values of n.","solution":"def fibonacci(n, computed={0: 0, 1: 1}): Returns the Fibonacci sequence up to the nth term. This implementation uses caching to improve performance for larger values of n. if n not in computed: computed[n] = fibonacci(n - 1, computed) + fibonacci(n - 2, computed) return computed[n] def generate_fibonacci_sequence(n): Returns a list of the first n Fibonacci numbers. return [fibonacci(i) for i in range(n)]"},{"question":"Create a function that takes an array of integers as input and returns the sum of all the positive integers in the array. The function should ignore negative numbers.","solution":"def sum_of_positives(arr): Returns the sum of all positive integers in the array. Parameters: arr (list of int): List of integers. Returns: int: Sum of positive integers in the list. return sum(x for x in arr if x > 0)"},{"question":"Create a function that takes an integer as input and returns the number of digits in that integer. However, if the integer is negative, the function should raise a ValueError with the message \\"Cannot count digits of a negative number.\\"","solution":"def count_digits(n): Returns the number of digits in the given integer n. Raises a ValueError if n is negative. if n < 0: raise ValueError(\\"Cannot count digits of a negative number.\\") return len(str(n))"},{"question":"Create a function that takes a list of numbers as input and returns a new list with the numbers sorted in ascending order. The function should handle both integers and floating-point numbers. How should I approach solving this problem?","solution":"def sort_numbers(numbers): Takes a list of numbers (integers and/or floating-point) and returns a new list with the numbers sorted in ascending order. :param numbers: List of integers and/or floating-point numbers :return: New list with the numbers sorted in ascending order return sorted(numbers)"},{"question":"Create a function that decodes a message that has been encoded by reversing every other word in the sentence. For example, if the input is \\"I am a software developer\\", the output should be \\"I am a heroperwoked\\". The function should be able to handle multiple spaces between words and should maintain the original order of words.","solution":"def decode_message(message): Decodes a message by reversing every other word in the sentence while preserving multiple spaces. Parameters: message (str): The encoded sentence. Returns: str: The decoded sentence. words = message.split(' ') decoded_words = [ word[::-1] if i % 2 != 0 else word for i, word in enumerate(words) ] return ' '.join(decoded_words)"},{"question":"Create a function that generates all prime numbers up to a given limit using the Sieve of Eratosthenes algorithm. The function should be efficient and return a list of all prime numbers up to that limit.","solution":"def sieve_of_eratosthenes(limit): Generates all prime numbers up to a given limit using the Sieve of Eratosthenes algorithm. Args: limit (int): The upper limit up to which to generate prime numbers (inclusive). Returns: list: A list of all prime numbers up to the given limit. if limit < 2: return [] sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for num in range(2, int(limit**0.5) + 1): if sieve[num]: for multiple in range(num*num, limit + 1, num): sieve[multiple] = False return [num for num in range(2, limit + 1) if sieve[num]]"},{"question":"Create a function that takes a list of integers and returns a list containing only the distinct elements from the original list, maintaining their order of appearance.","solution":"def distinct_elements(lst): Returns a list of distinct elements from the input list, maintaining their order of appearance. seen = set() distinct_list = [] for element in lst: if element not in seen: seen.add(element) distinct_list.append(element) return distinct_list"},{"question":"Create a function that returns the length of the longest contiguous substring that does not contain any repeating characters. For instance, if the input string is \\"abcabcbb\\", the function should return 3, since the longest substring without repeating characters is \\"abc\\". Another example is \\"bbbbb\\", where the longest substring is \\"b\\", with a length of 1. The function should work with UTF-8 encoded strings, including special characters and spaces.","solution":"def length_of_longest_substring(s): Returns the length of the longest contiguous substring that does not contain any repeating characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map and char_map[s[right]] >= left: left = char_map[s[right]] + 1 char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Create a function that takes two integers as inputs and returns the result of the first integer raised to the power of the second integer. The function should handle both positive and negative integer values for the exponent. If the second integer is negative, the function should return the reciprocal of the result of the first integer raised to the absolute value of the second integer.","solution":"def power(base, exponent): Returns the result of the base raised to the power of the exponent. If the exponent is negative, returns the reciprocal of the base raised to the absolute value of the exponent. if exponent < 0: return 1 / (base ** abs(exponent)) return base ** exponent"},{"question":"Create a function that will receive an array of integers and writes to a new array all the values that are either greater than 10 or less than 0.","solution":"def filter_numbers(arr): This function receives an array of integers and returns a new array with all the values that are either greater than 10 or less than 0. :param arr: List of integers :return: List of integers filtered by the condition return [x for x in arr if x > 10 or x < 0]"},{"question":"Create a function that takes an integer array as an argument and returns the product of all elements in the array. I'm new to programming, so please help with a simple example in Python.","solution":"def product_of_array(arr): Returns the product of all elements in the array. Parameters: arr (list of int): The input array containing integers. Returns: int: The product of all elements in the array. product = 1 for num in arr: product *= num return product"},{"question":"Create a function that registers a function and a timeout value, and then calls the function after the specified timeout. How would you implement this in Python?","solution":"import time import threading def register_and_call(func, timeout): Registers a function and a timeout value, then calls the function after the specified timeout. :param func: The function to be called. :param timeout: The time in seconds to wait before calling the function. def wrapper(): time.sleep(timeout) func() thread = threading.Thread(target=wrapper) thread.start()"},{"question":"Create a function that takes an array of integers as input, removes all duplicates from the array, and returns the length of the resulting array.","solution":"def remove_duplicates(arr): Takes an array of integers, removes all duplicates, and returns the length of the resulting array. :param arr: List[int] - Array of integers. :return: int - Length of array with duplicates removed. unique_elements = set(arr) return len(unique_elements)"},{"question":"Create a function that generates the Fibonacci sequence up to the nth number. The function should be recursive. Calculate the time complexity of the function and discuss whether it is efficient.","solution":"def fibonacci_recursive(n): Returns the Fibonacci sequence up to the nth number. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_seq = fibonacci_recursive(n - 1) fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq # Time Complexity: O(2^n) due to the nature of the multiple recursive calls. # The function is not efficient for large values of n due to exponential growth in the number of calls."},{"question":"Create a function that checks if a list of integers contains consecutive numbers in ascending order. How can this function be improved to handle cases where the list might contain negative numbers and still maintain the order?","solution":"def is_consecutive(lst): Checks if the list contains consecutive numbers in ascending order, including handling negative numbers. if len(lst) < 2: return True # A list with less than 2 elements is trivially consecutive lst_sorted = sorted(lst) for i in range(1, len(lst_sorted)): if lst_sorted[i] - lst_sorted[i - 1] != 1: return False return True"},{"question":"Create a function that takes a list of lists (matrix) and returns its transpose. The function should handle matrices with different column sizes.","solution":"def transpose(matrix): Returns the transpose of the given matrix. The matrix can have rows of different lengths. if not matrix: return [] max_col_len = max(len(row) for row in matrix) transposed = [[None] * len(matrix) for _ in range(max_col_len)] for i, row in enumerate(matrix): for j, val in enumerate(row): transposed[j][i] = val # Remove None values from trailing end transposed = [[elem for elem in row if elem is not None] for row in transposed] return transposed"},{"question":"Create a function that takes an integer as input and returns a list of all the factors of that integer, including 1 and the number itself. Factors are the numbers that can divide the given number without leaving a remainder.","solution":"def find_factors(n): Returns a list of all factors of the given integer n, including 1 and the number itself. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") factors = [] for i in range(1, n + 1): if n % i == 0: factors.append(i) return factors"},{"question":"Create a function that takes an integer array \`nums\` as an argument and finds the shortest length subarray with the sum equal to \`target\`. If no such subarray exists, return 0. The function should be optimized to handle large-sized arrays.","solution":"def min_subarray_len(nums, target): Finds the shortest subarray with a sum equal to the target. Args: nums (list of int): The array of integers. target (int): The target sum. Returns: int: The length of the shortest subarray with sum equal to target. Returns 0 if no such subarray exists. left = 0 sum_subarray = 0 min_length = float('inf') for right in range(len(nums)): sum_subarray += nums[right] while sum_subarray >= target: min_length = min(min_length, right - left + 1) sum_subarray -= nums[left] left += 1 return min_length if min_length != float('inf') else 0"},{"question":"Create a function that takes a number \`x\` and returns the sum of all numbers from 1 to \`x\` (inclusive).","solution":"def sum_upto(x): Returns the sum of all numbers from 1 up to and including x. if x < 1: return 0 return x * (x + 1) // 2"},{"question":"Create a function that returns the maximum depth of a binary tree in Python. The function should take the root of the binary tree as its参数. How can you determine this depth?","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def maxDepth(root): Returns the maximum depth of a binary tree. if not root: return 0 left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Create a function that takes an integer as input and returns a list of all the even numbers between 0 and the given integer (inclusive). If the input is negative, return an empty list. You should also ensure that the function has appropriate comments explaining each step.","solution":"def list_even_numbers(n): Returns a list of all even numbers between 0 and n (inclusive). If the input n is negative, returns an empty list. Parameters: n (int): The upper limit of the range to find even numbers. Returns: List[int]: A list of even numbers between 0 and n (inclusive). if n < 0: return [] return [i for i in range(0, n+1) if i % 2 == 0]"},{"question":"Create a function that converts a given string into a dictionary where each character's ASCII value as the key and the character itself as the value. If a character has a repeat ASCII value, the function should store only the latest value for that ASCII value.","solution":"def string_to_ascii_dict(s): Converts a given string into a dictionary where each character's ASCII value is the key and the character itself is the value. ascii_dict = {} for char in s: ascii_dict[ord(char)] = char return ascii_dict"},{"question":"Create a function that returns a dictionary that contains the frequency of each letter in a given string, ignoring case sensitivity. For special characters and numbers, consider them as part of the alphabet. For example, the character 'a' and 'A' should count as the same.","solution":"def letter_frequency(s): Returns a dictionary that contains the frequency of each letter in a given string, ignoring case sensitivity. Special characters and numbers are also counted. frequency = {} for char in s.lower(): if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function that takes a list of integers and return the third largest number in the list. If the list has less than 3 unique numbers, return the maximum number in the list. If the list is empty, return an empty list. Use Python to solve this problem.","solution":"def third_largest(nums): Returns the third largest number in the list of integers. If the list has less than 3 unique numbers, returns the maximum number. If the list is empty, returns an empty list. if not nums: return [] unique_nums = list(set(nums)) if len(unique_nums) < 3: return max(unique_nums) unique_nums.sort(reverse=True) return unique_nums[2]"},{"question":"Create a function that takes a list of strings and returns a new list of strings with all characters in uppercase.","solution":"def to_uppercase(str_list): Takes a list of strings and returns a new list of strings with all characters in uppercase. :param str_list: List of strings :return: List of strings with all characters in uppercase return [s.upper() for s in str_list]"},{"question":"Create a function that takes a list of integers as an argument and returns a new list where each element is the largest number encountered so far in the list.","solution":"def largest_so_far(numbers): Returns a new list where each element is the largest number encountered so far in the input list. if not numbers: return [] result = [] max_so_far = numbers[0] for number in numbers: if number > max_so_far: max_so_far = number result.append(max_so_far) return result"},{"question":"Create a function that takes two lists of integers and returns their intersection. The intersection should be sorted and contain unique elements. If there are no common elements, the function should return an empty list. Assume both input lists may contain duplicates and are unsorted.","solution":"def intersection_of_lists(list1, list2): Returns the sorted intersection of two lists without duplicates. set1 = set(list1) set2 = set(list2) intersection = set1 & set2 result = sorted(intersection) return result"},{"question":"Create a function that takes two integers as input and returns their difference as an integer. The function should handle both cases where the first integer is greater than, less than, or equal to the second integer. If the first integer is less than the second, return -1. If the first integer is greater, return their difference. If they are equal, return their difference (which should be 0).","solution":"def difference(a, b): Returns the difference of a and b as an integer. If a < b, returns -1. If a > b, returns a - b. If a == b, returns 0. if a < b: return -1 else: return a - b"},{"question":"Create a function that returns the square root of a given number \`n\`. However, if \`n\` is negative or not a number, the function should return \`NaN\`. Use both standard mathematical and bitwise techniques for the square root calculation to demonstrate your understanding.","solution":"import math def sqrt_calculate(n): Returns the square root of a given number n. If n is negative or not a number, returns NaN. def is_number(value): return isinstance(value, (int, float)) and not isinstance(value, bool) if not is_number(n) or n < 0: return float('nan') return math.sqrt(n)"},{"question":"Create a function that takes two integers as input and returns their greatest common divisor (GCD). Implement the function using the Euclidean algorithm.","solution":"def gcd(a, b): Returns the greatest common divisor of a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return abs(a)"},{"question":"Create a function that takes an array of integers as input and returns an array where every element in the original array is doubled. For example, if the input array is [1, 2, 3], the output should be [2, 4, 6].","solution":"def double_array(arr): Returns a new array where every element of the input array is doubled. Parameters: arr (list of int): The input array of integers. Returns: list of int: A new array with each element doubled. return [x * 2 for x in arr]"},{"question":"Create a function that takes two strings as input and returns a new string with the characters from the two strings combined alternately. If one string is longer than the other, the function should append the remaining characters from the longer string at the end.","solution":"def combine_strings_alternately(s1, s2): Combine two input strings alternately. If one string is longer, append the remaining characters from the longer string. Args: s1: str - The first input string. s2: str - The second input string. Returns: str - The result of combining the two input strings alternately. combined = [] len1, len2 = len(s1), len(s2) min_len = min(len1, len2) for i in range(min_len): combined.append(s1[i]) combined.append(s2[i]) if len1 > len2: combined.append(s1[min_len:]) if len2 > len1: combined.append(s2[min_len:]) return ''.join(combined)"},{"question":"Create a function that takes a list of integers as input and returns a new list with the integers sorted in ascending order. You should not use Python's built-in sorting functions.","solution":"def bubble_sort(nums): Sorts a list of integers in ascending order using the bubble sort algorithm. Args: nums (list of int): List of integers to be sorted. Returns: list of int: New list with integers sorted in ascending order. sorted_nums = nums[:] n = len(sorted_nums) for i in range(n): for j in range(0, n-i-1): if sorted_nums[j] > sorted_nums[j+1]: sorted_nums[j], sorted_nums[j+1] = sorted_nums[j+1], sorted_nums[j] return sorted_nums"},{"question":"Create a function that takes a string as input and outputs a dictionary that shows the frequency of each character in the string, including spaces. To handle case sensitivity, treat 'A' and 'a' as two different characters.","solution":"def char_frequency(s): Returns a dictionary with the frequency of each character in the string, including spaces with case sensitivity. freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 return freq"},{"question":"Create a function that takes a string as an input and returns inverted case for each character in the string. This means that if a character is uppercase, it should be converted to lowercase, and if it is lowercase, it should be converted to uppercase.","solution":"def invert_case(s): Returns the string with the case of each character inverted. return ''.join([char.lower() if char.isupper() else char.upper() for char in s])"},{"question":"Create a function that takes a list of numbers and returns a new list with each element incremented by 1. If the list contains a zero, it should be replaced with 1. Was this question part of a larger coding challenge?","solution":"def increment_list(nums): Takes a list of numbers and returns a new list with each element incremented by 1. If an element is zero, it should be replaced with 1 instead. return [(num + 1 if num != 0 else 1) for num in nums]"},{"question":"Create a function that takes 2 parameters an array and a value. The function is to create a new array where the input value is set as the middle element of the newly created array. The array can contain multiple elements and the new array should be sorted in ascending order.","solution":"def insert_in_middle(arr, value): Inserts the value in the middle of the array and returns a new sorted array. Parameters: arr (list): A list of elements. value (int or float): The value to be inserted in the middle. Returns: list: A new sorted list with the value inserted. new_arr = arr + [value] return sorted(new_arr)"},{"question":"Create a function that takes in a nested dictionary and returns the sum of all the values. The dictionary can be any level of depth and may contain other dictionaries within it.","solution":"def sum_nested_dict(d): Recursively sums all values in a nested dictionary. Parameters: d (dict): The nested dictionary to sum values from. Returns: int/float: The sum of all values in the dictionary. total = 0 for value in d.values(): if isinstance(value, dict): total += sum_nested_dict(value) else: total += value return total"},{"question":"Create a function that takes a string as an input and returns the string with all lowercase letters converted to uppercase. Use Python as the programming language.","solution":"def convert_to_uppercase(input_string): Converts all lowercase letters in the input string to uppercase. :param input_string: str - the input string to be converted :return: str - the input string with all lowercase letters converted to uppercase return input_string.upper()"},{"question":"Create a function that converts a number to its English word representation. For example, if the input is 123, the function should return \\"One Hundred Twenty Three\\".","solution":"def number_to_words(n): Convert a non-negative integer to its English words representation. if n == 0: return \\"Zero\\" below_20 = [\\"\\", \\"One\\", \\"Two\\", \\"Three\\", \\"Four\\", \\"Five\\", \\"Six\\", \\"Seven\\", \\"Eight\\", \\"Nine\\", \\"Ten\\", \\"Eleven\\", \\"Twelve\\", \\"Thirteen\\", \\"Fourteen\\", \\"Fifteen\\", \\"Sixteen\\", \\"Seventeen\\", \\"Eighteen\\", \\"Nineteen\\"] tens = [\\"\\", \\"\\", \\"Twenty\\", \\"Thirty\\", \\"Forty\\", \\"Fifty\\", \\"Sixty\\", \\"Seventy\\", \\"Eighty\\", \\"Ninety\\"] above_1000 = [\\"\\", \\"Thousand\\", \\"Million\\", \\"Billion\\"] def helper(num): if num == 0: return \\"\\" elif num < 20: return below_20[num] + \\" \\" elif num < 100: return tens[num // 10] + \\" \\" + helper(num % 10) else: return below_20[num // 100] + \\" Hundred \\" + helper(num % 100) result = \\"\\" for i, word in enumerate(above_1000): if n % 1000 != 0: result = helper(n % 1000) + word + \\" \\" + result n //= 1000 return result.strip()"},{"question":"Create a function that calculates the sum of the first n natural numbers.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers. return n * (n + 1) // 2"},{"question":"Create a function that takes an integer and an array of integers as input and returns the sum of the array of integers plus the integer. If the integer is not provided, the function should use a default value of 5. If the array is not provided, the function should use a default array of [1, 2, 3].","solution":"def sum_with_defaults(n=5, arr=[1, 2, 3]): Returns the sum of the array elements plus the integer n. Parameters: n (int): An integer to add to the sum of the array. Defaults to 5. arr (list): A list of integers to sum. Defaults to [1, 2, 3]. Returns: int: The computed sum. return sum(arr) + n"},{"question":"Create a function that returns 'Hello, World!' in Python.","solution":"def greet(): Returns a greeting message 'Hello, World!'. return 'Hello, World!'"},{"question":"Create a function that generates all possible subsets of a set given as an array of integers. The function should not return any duplicate subsets. For example, if the input array is [1, 2, 3], the output should be [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]].","solution":"from itertools import combinations def generate_subsets(nums): Generates all possible subsets of a set given as an array of integers. Parameters: nums (list): An array of integers. Returns: List[List[int]]: A list of all possible subsets. subset_list = [] for i in range(len(nums) + 1): for combo in combinations(nums, i): subset_list.append(list(combo)) return subset_list"},{"question":"Create a function that takes two binary strings and returns their product as a binary string. The length of two binary strings should not exceed 100 characters. The result should be rounded to the nearest thousandth if necessary. You can assume that the input strings are valid binary strings and they will not be empty.","solution":"def binary_product(binary1, binary2): Returns the product of two binary strings as a binary string. The length of the binary strings should not exceed 100 characters. The result is rounded to the nearest thousandth if necessary. # Convert binary strings to integers num1 = int(binary1, 2) num2 = int(binary2, 2) # Calculate product product = num1 * num2 # Convert product to binary string binary_product_str = bin(product)[2:] return binary_product_str"},{"question":"Create a function that takes two lists of numbers and adds them element-wise. If the lists are of different lengths, the function should extend the shorter list with zeros to match the length of the longer list before performing the addition.","solution":"def add_lists(list1, list2): Adds two lists element-wise. If lists are of different lengths, extends the shorter list with zeros. Parameters: - list1: List of numbers - list2: List of numbers Returns: - List of numbers resulting from element-wise addition max_len = max(len(list1), len(list2)) # Extend both lists to be of the same length extended_list1 = list1 + [0] * (max_len - len(list1)) extended_list2 = list2 + [0] * (max_len - len(list2)) # Element-wise addition return [extended_list1[i] + extended_list2[i] for i in range(max_len)]"},{"question":"Create a function that takes a list of integers and returns a list of strings representing the integer values as Roman numerals. The function should also handle numbers in the range of 1 to 3999.","solution":"def int_to_roman(num): Converts an integer to a roman numeral string. :param num: int :return: str val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num def list_to_roman(lst): Converts a list of integers to a list of roman numeral strings. :param lst: List[int] :return: List[str] return [int_to_roman(i) for i in lst]"},{"question":"Create a function that takes two lists as input and returns a new list that is the intersection of the two input lists. The intersection should include only the elements that are present in both lists, and the resulting list should not contain any duplicates. Use set operations if possible for efficiency.","solution":"def intersection_of_lists(list1, list2): Returns the intersection of two lists as a new list, only including elements that are present in both lists, without duplicates. return list(set(list1) & set(list2))"},{"question":"Create a function that will take a list of numbers and return the length of the longest strictly increasing subsequence (LIS) in that list. For example, given the list [10, 9, 4, 5, 4, 8, 6, 5], the function should return 3, as the longest strictly increasing subsequence is [4, 5, 8].","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest strictly increasing subsequence (LIS) in a list of numbers. if not nums: return 0 lis = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Create a function that finds the common elements between two lists, and return them as a new list.","solution":"def common_elements(list1, list2): Returns a list of common elements between list1 and list2. return list(set(list1) & set(list2))"},{"question":"Create a function that will check if a given positive integer can be represented as a sum of two or more consecutive positive integers. If yes, return the maximum possible sum that can be formed by summing consecutive integers starting from 1. If no, return -1.","solution":"def can_be_sum_of_consecutive_positive_integers(n): Checks if a given positive integer n can be represented as a sum of two or more consecutive positive integers, and returns the maximum possible sum by summing consecutive integers starting from 1. If not possible, returns -1. Args: n (int): The positive integer to check. Returns: int: The maximum possible sum of consecutive integers starting from 1, or -1 if not possible. if n < 3: return -1 for m in range(n - 1, 0, -1): sum_m = m * (m + 1) // 2 if sum_m == n: return sum_m return -1"},{"question":"Create a function that generates a new string by repeating each character of the input string twice. For example, if the input string is \\"hello\\", the output should be \\"hheelllloo\\". Make sure to handle strings with different lengths.","solution":"def repeat_characters(s): Returns a new string where each character from the input string s is repeated twice. return ''.join([char*2 for char in s])"},{"question":"Create a function that takes in a single argument, a list of integers","solution":"def product_of_list(numbers): Returns the product of all integers in the list. product = 1 for number in numbers: product *= number return product"},{"question":"Create a function that reverses a list recursively in Python.","solution":"def reverse_list_recursive(lst): Reverses a list recursively. Args: lst: List of elements. Returns: Reversed list. if len(lst) == 0: return [] return [lst[-1]] + reverse_list_recursive(lst[:-1])"},{"question":"Create a function that takes in a list of strings. Your function should return a new list containing only those strings that are entirely made up of uppercase letters.","solution":"def filter_uppercase_strings(strings): Returns a new list containing only those strings that are entirely made up of uppercase letters. :param strings: List of strings to be filtered. :return: List of strings that are entirely uppercase. return [s for s in strings if s.isupper()]"},{"question":"Create a function that takes two integers and returns the sum of all odd numbers between them (inclusive of the given numbers) using a while loop.","solution":"def sum_of_odds_between(a, b): Returns the sum of all odd numbers between a and b (inclusive) using a while loop. if a > b: a, b = b, a sum_of_odds = 0 current = a while current <= b: if current % 2 != 0: sum_of_odds += current current += 1 return sum_of_odds"},{"question":"Create a function that takes an integer as a parameter and returns its square if it is even, and its cube if it is odd.","solution":"def compute_square_or_cube(n): Returns the square of n if n is even, and the cube of n if n is odd. return n ** 2 if n % 2 == 0 else n ** 3"},{"question":"Create a function that takes a dictionary as a parameter and returns a list of all the keys in the dictionary, sorted in reverse alphabetical order.","solution":"def get_reverse_sorted_keys(d): Returns a list of all keys in the dictionary, sorted in reverse alphabetical order. return sorted(d.keys(), reverse=True)"},{"question":"Create a function that takes a list of integers and returns the sum of all elements in the list, but only if the element is divisible by 3 or 5. If the list is empty, the function should return None.","solution":"def sum_divisible_by_3_or_5(numbers): Returns the sum of all elements in the list that are divisible by 3 or 5. If the list is empty, returns None. :param numbers: List of integers :return: Sum of integers divisible by 3 or 5, or None if the list is empty if not numbers: return None return sum(num for num in numbers if num % 3 == 0 or num % 5 == 0)"},{"question":"Create a function that takes an integer array and reorders the elements such that all even numbers come before the odd numbers. Write a function \`rearrangeEvenOdd(int[] arr)\`. This function should return the reordered array where even numbers are at the beginning and odd numbers are at the end.","solution":"def rearrangeEvenOdd(arr): Reorders the elements in the array such that all even numbers come before the odd numbers. :param arr: List of integers :return: List of integers with all even numbers at the beginning and odd numbers at the end even = [x for x in arr if x % 2 == 0] odd = [x for x in arr if x % 2 != 0] return even + odd"},{"question":"Create a function that takes a string and a number as input and returns the repeated string a certain number of times. If the count is negative, return an empty string. If the count is zero, return an empty string. Otherwise, return the string repeated that many times.","solution":"def repeat_string(s, count): Returns the string \`s\` repeated \`count\` times. If \`count\` is negative or zero, return an empty string. Args: s (str): the string to be repeated. count (int): the number of times to repeat the string. Returns: str: the repeated string or an empty string if \`count\` is negative or zero. if count <= 0: return \\"\\" return s * count"},{"question":"Create a function that takes an array of integers and returns an array of the same integers sorted from smallest to largest. You should use the Bubble sort algorithm. The function should be able to handle arrays of any length, including empty arrays.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the Bubble sort algorithm. Parameters: arr (list): A list of integers Returns: list: A sorted list of integers n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if not swapped: break return arr"},{"question":"Create a function that takes in a string as input and returns a new string where every character in the original string is shifted one position to the left in the alphabet. This means that 'a' becomes 'z', 'b' becomes 'a', etc. The function should handle both capital and lowercase letters, and non-alphabetical characters should remain unchanged.","solution":"def shift_left(s): Shifts every alphabetical character in the input string one position to the left in the alphabet. Args: s (str): input string Returns: str: string with characters shifted def shift_char(c): if 'a' <= c <= 'z': return chr(((ord(c) - ord('a') - 1) % 26) + ord('a')) elif 'A' <= c <= 'Z': return chr(((ord(c) - ord('A') - 1) % 26) + ord('A')) else: return c return ''.join(shift_char(c) for c in s)"},{"question":"Create a function that computes the sum of a list of integers. What language would you use?","solution":"def sum_list(numbers): Returns the sum of a list of integers. return sum(numbers)"},{"question":"Create a function that identifies all the prime numbers within a given list of integers. A prime number is defined as a number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(num): Returns True if num is a prime number, else False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def identify_primes(numbers): Identifies all the prime numbers within a given list of integers. :param numbers: List of integers :return: List of prime numbers return [num for num in numbers if is_prime(num)]"},{"question":"Create a function that takes two parameters: a string (message) and an integer (n). The function should return a string that is the result of repeating the input string n times. If the input string is empty or n is 0, the function should return an empty string.","solution":"def repeat_string(message, n): Returns the string 'message' repeated 'n' times. If 'message' is empty or 'n' is 0, returns an empty string. if not message or n == 0: return \\"\\" return message * n"},{"question":"Create a function that returns true if the number is a perfect square, and false if it's not. A perfect square is an integer that is the square of an integer, like 1, 4, 9, 16, etc.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, otherwise False. if n < 0: return False sqrt_n = int(math.sqrt(n)) return sqrt_n * sqrt_n == n"},{"question":"Create a function that calculates the factorial of a given number. Write the function in Python, and include comments to explain your logic.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. The factorial of a number n is the product of all positive integers less than or equal to n. For n=0, factorial is defined as 1. Parameters: n (int): Non-negative integer whose factorial is to be calculated. Returns: int: Factorial of the input number. # Base case: factorial of 0 is 1 if n == 0: return 1 # Compute factorial iteratively result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes both an array and a size of the array as input arguments, and returns the maximum value in the array. How do you handle edge cases with this function?","solution":"def find_max_value(arr, size): Returns the maximum value in the array. Parameters: arr (list): The array of numbers. size (int): The size of the array. Returns: int/float: The maximum value in the array. Returns None if the array is empty. if size == 0: return None max_value = arr[0] for i in range(1, size): if arr[i] > max_value: max_value = arr[i] return max_value"},{"question":"Create a function that finds the maximum and minimum values in an array. The function should take an array as input and return a tuple containing the minimum and maximum values, respectively.","solution":"def find_min_max(arr): Returns a tuple containing the minimum and maximum values in the array. if not arr: raise ValueError(\\"Array is empty\\") min_val = float('inf') max_val = float('-inf') for num in arr: if num < min_val: min_val = num if num > max_val: max_val = num return (min_val, max_val)"},{"question":"Create a function that takes an integer as input and returns the binary representation of that integer using string formatting. The function should be named \`int_to_binary\`. The function should handle both positive and negative integers, including zero. The binary representation for negative numbers should follow the twos complement method.","solution":"def int_to_binary(n): Converts an integer to its binary representation using string formatting. Handles both positive and negative integers, including zero. Args: n (int): The integer to be converted to binary. Returns: str: The binary representation of the integer. if n >= 0: return format(n, \\"b\\") else: bits = n.bit_length() return format((1 << bits) + n, \\"b\\")"},{"question":"Create a function that calculates the frequency of each character in a string. The function should return a dictionary where the keys are the characters and the values are their frequencies. If a character appears multiple times, the function should return its frequency as a whole number. For example, the function should return {'a': 1, 'b': 2, 'c': 3} for the input \\"abbccc\\".","solution":"def char_frequency(s): Returns a dictionary where keys are characters and values are their frequencies. result = {} for char in s: if char in result: result[char] += 1 else: result[char] = 1 return result"},{"question":"Create a function that takes a string of binary numbers separated by commas and returns a dictionary where each binary number is a key and its corresponding decimal equivalent is the value. The function should also include error handling to ensure that the input string is valid.","solution":"def binary_to_decimal(binary_string): Takes a string of binary numbers separated by commas and returns a dictionary where each binary number is a key and its corresponding decimal equivalent is the value. binary_str_list = binary_string.split(',') binary_dict = {} for binary_str in binary_str_list: # Validate binary string if not binary_str or not all(char in '01' for char in binary_str): raise ValueError(f\\"Invalid binary number: '{binary_str}'\\") # Convert binary to decimal decimal_value = int(binary_str, 2) binary_dict[binary_str] = decimal_value return binary_dict"},{"question":"Create a function that checks if a given string is a palindrome. An example of a palindrome is a string that reads the same backward as forward. For instance \\"racecar\\" reads the same both ways. Your code should handle both uppercase and lowercase letters and ignore spaces.","solution":"def is_palindrome(s): Returns True if the given string \`s\` is a palindrome, ignoring case and spaces; False otherwise. # Remove spaces and convert to lowercase s = s.replace(\\" \\", \\"\\").lower() # Check if the string reads the same forward and backward return s == s[::-1]"},{"question":"Create a function that receives a number and returns a string representation of the number, but with all digits reversed.","solution":"def reverse_digits(n): Returns a string representation of the number n with all digits reversed. return str(n)[::-1]"},{"question":"Create a function that takes an integer as input and returns the count of even numbers from 0 to that integer (inclusive).","solution":"def count_even_numbers(n): Returns the count of even numbers from 0 to n (inclusive). Parameters: n (int): The upper limit of the range (inclusive). Returns: int: The count of even numbers. if n < 0: return 0 return (n // 2) + 1"},{"question":"Create a function that can parse HTML and extract text from it.","solution":"from bs4 import BeautifulSoup def extract_text_from_html(html): Extracts and returns text content from the given HTML string. Parameters: html (str): The HTML content as a string. Returns: str: The extracted text content. soup = BeautifulSoup(html, 'html.parser') return soup.get_text()"},{"question":"Create a function that calculates the Fibonacci sequence up to a given number of terms and returns the sequence as a list. The function should take an integer 'n' as an input and return a list of the first 'n' numbers in the Fibonacci sequence.","solution":"def fibonacci(n): Returns the first n terms of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for _ in range(2, n): next_term = sequence[-1] + sequence[-2] sequence.append(next_term) return sequence"},{"question":"Create a function that parses input strings as ASCII character codes and converts them to corresponding uppercase letters. You need to handle a special case where the input string contains the substring \\"UFO\\". In this case, replace \\"UFO\\" with the ASCII character code for 'U' (85) followed by the character for 'F' (70) and 'O' (79).","solution":"def parse_ascii_string(input_str): This function parses an input string for ASCII character codes and converts them to uppercase letters. Special case: if the input string contains the substring \\"UFO\\", replace it with the ASCII codes for 'U' (85), 'F' (70), and 'O' (79). if 'UFO' in input_str: input_str = input_str.replace('UFO', '85 70 79') ascii_codes = map(int, input_str.split()) output_str = ''.join(chr(code) for code in ascii_codes) return output_str"},{"question":"Create a function that checks if a list of numbers contains only prime numbers. Return True if all numbers are prime, otherwise return False.","solution":"def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def all_primes(numbers): Checks if all numbers in the list are prime. Parameters: numbers (list of int): List of numbers to be checked. Returns: bool: True if all numbers are prime, False otherwise. return all(is_prime(num) for num in numbers)"},{"question":"Create a function that takes a variable amount of arguments and calculates their sum. If the sum is a prime number, return the sum, otherwise, return an array containing the sum and the next prime number after the sum.","solution":"def is_prime(n): Checks if the provided number 'n' is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def next_prime(n): Finds the next prime number greater than the provided number 'n'. if n <= 1: return 2 num = n + 1 while not is_prime(num): num += 1 return num def sum_and_check_prime(*args): Sums the provided arguments and returns the sum if it is a prime number. If the sum is not a prime number, returns a list containing the sum and the next prime number. total = sum(args) if is_prime(total): return total else: return [total, next_prime(total)]"},{"question":"Create a function that takes an array of integers as input and returns the frequency of each integer. The function should use a hash map to store the frequency of each integer, where the key is the integer itself and the value is the frequency of the integer. The function should return the hash map with the frequency of each integer.","solution":"def frequency_count(arr): Returns a dictionary containing the frequency of each integer in the given array. :param arr: List of integers :return: Dictionary with integer frequency count freq_dict = {} for num in arr: if num in freq_dict: freq_dict[num] += 1 else: freq_dict[num] = 1 return freq_dict"},{"question":"Create a function that takes an array of integers and returns the majority element. The majority element is the element that appears more than half the time in the array.","solution":"def majority_element(nums): Returns the majority element, i.e., the element that appears more than half the time in the array. Assumes that such an element always exists in the array. count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate"},{"question":"Create a function that takes an image as input, and returns a blurred image.","solution":"from PIL import Image, ImageFilter def blur_image(image_path): Blurs the image located at the given path and returns the blurred image. Params: - image_path (str): The path to the image to be blurred. Returns: - Image: The blurred image. try: image = Image.open(image_path) blurred_image = image.filter(ImageFilter.BLUR) return blurred_image except Exception as e: return str(e)"},{"question":"Create a function that takes an array of integers as an argument and returns the array with all duplicates removed. The function should not modify the original array but instead return a new array with unique values only.","solution":"def remove_duplicates(arr): Returns a new array with all duplicates removed from the input array. Parameters: arr (list): List of integers from which duplicates have to be removed. Returns: list: A new list with unique values. return list(set(arr))"},{"question":"Create a function that takes a string and returns whether the string is a palindrome (reads the same backward as forward). A palindrome does not need to be limited to alphabetic characters; it can also include spaces, digits, and punctuation. Additionally, the function should be case-insensitive and ignore non-alphanumeric characters.","solution":"import re def is_palindrome(s): Returns True if the input string is a palindrome, ignoring case and non-alphanumeric characters. # Use regex to remove all non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower() return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that takes an array of integers and returns the sum of the absolute values of all elements in the array. The function should handle both positive and negative integers.","solution":"def sum_of_absolute_values(arr): Returns the sum of the absolute values of all elements in the array. :param arr: List of integers :return: Sum of absolute values of all integers in arr return sum(abs(x) for x in arr)"},{"question":"Create a function that calculates the nth Fibonacci number using a recursive approach in Python. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Implement this in Python, ensuring that the function is optimized by avoiding redundant calculations. Use memoization to improve the runtime.","solution":"def fibonacci(n, memo={}): Calculate the nth Fibonacci number using a recursive approach with memoization. Arguments: n -- the nth number in the Fibonacci sequence to calculate Returns: The nth Fibonacci number if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Create a function that takes a list of integers as input and returns the maximum and minimum values from the list. The function should also return the positions of the maximum and minimum values in the list. If there are multiple occurrences of the maximum or minimum value, return their positions in the order they appear in the list. If the list is empty, return None for all values.","solution":"def find_max_min_positions(lst): Returns the maximum and minimum values from the list along with their positions. If there are multiple occurrences, all positions are returned. If the list is empty, returns None for all values. Parameters: lst (list): List of integers. Returns: tuple: max value, positions of max, min value, positions of min if not lst: return None, None, None, None max_val = max(lst) min_val = min(lst) max_positions = [i for i, val in enumerate(lst) if val == max_val] min_positions = [i for i, val in enumerate(lst) if val == min_val] return max_val, max_positions, min_val, min_positions"},{"question":"Create a function that takes a list of numbers and returns a new list containing only the even numbers from the original list. Additionally, the function should include a brief comment indicating what the function does.","solution":"def filter_even_numbers(numbers): Returns a list of even numbers from the given list. return [num for num in numbers if num % 2 == 0]"},{"question":"Create a function that reads integers from a file and returns a list containing the squares of those integers.","solution":"def read_and_square_integers(file_path): Reads integers from the specified file and returns a list of their squares. :param file_path: Path to the file containing integers. :return: List of squares of the integers. squares = [] with open(file_path, 'r') as file: for line in file: number = int(line.strip()) squares.append(number**2) return squares"},{"question":"Create a function that prints all the valid 4 digit combinations for a credit card number, without any repeating numbers. For example, '1234', '1243', '1324' etc. Note that the function should ignore numbers with leading zeros.","solution":"from itertools import permutations def valid_credit_card_combinations(): Prints all valid 4-digit combinations for a credit card number without any repeating numbers. digits = ['1', '2', '3', '4', '5', '6', '7', '8', '9'] valid_combinations = [] for comb in permutations(digits, 4): valid_combinations.append(''.join(comb)) return valid_combinations"},{"question":"Create a function that takes the input \\"name\\" and reads a JSON file named \\"{name}.json\\". The function should parse the JSON and print the values associated with each key.","solution":"import json def read_and_print_json(name): Reads a JSON file named \\"{name}.json\\" and prints the values associated with each key. file_path = f\\"{name}.json\\" with open(file_path, \\"r\\") as file: data = json.load(file) for key, value in data.items(): print(f\\"{key}: {value}\\")"},{"question":"Create a function that takes a string as input and returns the string in reverse order. However, the function should also ensure that the reversed string does not contain any duplicate characters.","solution":"def reverse_unique(string): Reverses the input string and ensures the reversed string does not contain any duplicate characters. Parameters: string (str): The input string to be processed. Returns: str: The processed string with unique characters in reverse order. seen = set() result = [] for char in reversed(string): if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that takes in three arguments: a string representing the name of a city, an integer representing the day of the week (1 for Monday, 7 for Sunday), and an integer representing the temperature in Fahrenheit. The function will return a string that describes the weather conditions in the specified city on the given day.","solution":"def describe_weather(city, day, temperature): Returns a string describing the weather conditions in the specified city on the given day. Parameters: city (str): The name of the city. day (int): The day of the week (1 for Monday, 7 for Sunday). temperature (int): The temperature in Fahrenheit. Returns: str: A string describing the weather conditions. days_of_week = { 1: \\"Monday\\", 2: \\"Tuesday\\", 3: \\"Wednesday\\", 4: \\"Thursday\\", 5: \\"Friday\\", 6: \\"Saturday\\", 7: \\"Sunday\\" } if day not in days_of_week: return \\"Invalid day\\" day_name = days_of_week[day] return f\\"The weather in {city} on {day_name} is {temperature}°F.\\""},{"question":"Create a function that returns the sum of all the elements in a list of numbers. The function should take one argument: a list of integers. The list may be empty or contain any number of integers.","solution":"def sum_of_elements(numbers): Returns the sum of all elements in the list \`numbers\`. Parameters: numbers (list of int): List of integers. Returns: int: Sum of all integers in the list. return sum(numbers)"},{"question":"Create a function that takes a string of binary digits, counts the number of 1s and 0s, and returns a dictionary with the results. For example, the function should return \`{1: 3, 0: 2}\` for the string \`'110100'\`.","solution":"def count_binary_digits(binary_string): Counts the number of 1s and 0s in a string of binary digits. Parameters: binary_string (str): A string consisting of binary digits ('0' and '1'). Returns: dict: A dictionary with the counts of 1s and 0s. count_1 = binary_string.count('1') count_0 = binary_string.count('0') return {1: count_1, 0: count_0}"},{"question":"Create a function that takes a list of integers, removes duplicates, sorts the list in ascending order, and returns the sorted list without duplicates.","solution":"def remove_duplicates_and_sort(numbers): Removes duplicates from the list, sorts it in ascending order, and returns the sorted list without duplicates. Args: numbers (list): A list of integers. Returns: list: A sorted list of integers without duplicates. return sorted(set(numbers))"},{"question":"Create a function that multiplies a matrix of integers by a vector of integers. Assuming both the matrix and the vector have the same number of columns. The function should raise an exception if the dimensions do not match.","solution":"def multiply_matrix_vector(matrix, vector): Multiplies a matrix of integers by a vector of integers. Args: matrix (list of list of int): The matrix to be multiplied. vector (list of int): The vector to multiply the matrix by. Returns: list of int: The result of the matrix-vector multiplication. Raises: ValueError: If the dimensions of the matrix and the vector do not match. # Check if dimensions match num_columns = len(matrix[0]) if any(len(row) != num_columns for row in matrix): raise ValueError('All rows of the matrix must have the same number of columns.') if len(vector) != num_columns: raise ValueError('The vector length must be equal to the number of columns in the matrix.') # Multiply matrix by vector result = [] for row in matrix: product_sum = sum(row[i] * vector[i] for i in range(num_columns)) result.append(product_sum) return result"},{"question":"Create a function that takes two parameters: a list of integers and a target sum. The function should return True if there are any two distinct numbers in the list that add up to the target sum, and False otherwise. You should write this function in Python.","solution":"def has_pair_with_sum(numbers, target_sum): Returns True if there are any two distinct numbers in the list that add up to the target sum. Returns False otherwise. seen_numbers = set() for number in numbers: if target_sum - number in seen_numbers: return True seen_numbers.add(number) return False"},{"question":"Create a function that takes an array as input and returns an array with the elements in reverse order. The input array must be provided as a string, where each element is separated by a comma. The function should return the reversed array as a string with elements separated by a comma.","solution":"def reverse_array(input_str): Takes a string input with elements separated by commas and returns a reversed array as a string with elements separated by commas. elements = input_str.split(',') reversed_elements = elements[::-1] return ','.join(reversed_elements)"},{"question":"Create a function that calculates the average temperature from a list of temperatures. The function should handle both Celsius and Fahrenheit temperatures, and convert them to the same scale before calculating the average.","solution":"def average_temperature(temperatures): Calculates the average temperature from a list of temperatures. Temperatures can be in Celsius or Fahrenheit and will be converted to Celsius. Parameters: temperatures (list of tuples): A list where each tuple contains a temperature value and a scale ('C' or 'F'). Returns: float: The average temperature in Celsius. def f_to_c(fahrenheit): return (fahrenheit - 32) * 5.0/9.0 total_temp_celsius = 0 count = 0 for temp, scale in temperatures: if scale == 'C': total_temp_celsius += temp elif scale == 'F': total_temp_celsius += f_to_c(temp) else: raise ValueError(\\"Unsupported temperature scale.\\") count += 1 return total_temp_celsius / count if count > 0 else 0.0"},{"question":"Create a function that takes an integer array as input and returns a new array where each element is the cube of the corresponding element in the input array.","solution":"def cube_array(arr): Returns a new array where each element is the cube of the corresponding element in the input array. Parameters: arr (list of int): Input array of integers. Returns: list of int: Array where each element is the cube of the corresponding element in the input array. return [x**3 for x in arr]"},{"question":"Create a function that checks if a number is prime. The function should take two parameters: a start and an end number.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def primes_in_range(start, end): Returns a list of prime numbers between start and end, inclusive. return [num for num in range(start, end+1) if is_prime(num)]"},{"question":"Create a function that takes two arrays of integers as input and returns an array containing the intersection of the two input arrays. The function should also remove any duplicates from the result. The intersection should be sorted in ascending order.","solution":"def intersection(arr1, arr2): Returns the sorted intersection of two input arrays without duplicates. # Convert both arrays to sets for intersection and remove duplicates set1 = set(arr1) set2 = set(arr2) # Find the intersection of both sets intersected_set = set1 & set2 # Convert to sorted list result = sorted(intersected_set) return result"},{"question":"Create a function that takes one number as a parameter and returns the square of that number.","solution":"def square(number): Returns the square of the given number. return number ** 2"},{"question":"Create a function that takes a positive integer \`n\` as input and returns the number of ways to arrange \`n\` unique items in a circular permutation. A circular permutation is a circular arrangement of objects in which the arrangement is considered the same in both clockwise and anticlockwise directions.","solution":"def circular_permutations(n): Returns the number of ways to arrange n unique items in a circular permutation, considering the arrangement the same in both clockwise and anticlockwise directions. if n < 3: raise ValueError(\\"n must be at least 3 for a valid circular permutation.\\") # The formula to count circular permutations, considering identical arrangements in both directions, is: # (n-1)! / 2 from math import factorial return factorial(n - 1) // 2"},{"question":"Create a function that takes an integer array as a parameter and returns the maximum product of any three numbers from the array. The function should handle arrays of varying sizes, including both positive and negative numbers. Additionally, your solution should have a time complexity of O(n) or better.","solution":"def maximum_product_of_three(nums): Returns the maximum product of any three numbers from the input array. if len(nums) < 3: raise ValueError(\\"Array must contain at least three numbers.\\") # Initialize the three largest and two smallest values max1 = max2 = max3 = float('-inf') min1 = min2 = float('inf') for num in nums: # Update the three largest values if num > max1: max1, max2, max3 = num, max1, max2 elif num > max2: max2, max3 = num, max2 elif num > max3: max3 = num # Update the two smallest values if num < min1: min1, min2 = num, min1 elif num < min2: min2 = num return max(max1 * max2 * max3, max1 * min1 * min2)"},{"question":"Create a function that takes in a string representing a hexadecimal number and returns a tuple containing two integers: the number of hexadecimal digits and the sum of the hexadecimal values.","solution":"def analyze_hex(hex_string): Takes a string representing a hexadecimal number and returns a tuple containing: 1. The number of hexadecimal digits 2. The sum of the hexadecimal values num_digits = len(hex_string) sum_values = sum(int(digit, 16) for digit in hex_string) return num_digits, sum_values"},{"question":"Create a function that takes a number as input and uses slicing to reverse the number if it is even. If the number is odd, no change should be made. Return the modified number.","solution":"def modify_number(num): Reverses the number if it is even, no change if it is odd. Args: num (int): The number to be modified. Returns: int: The modified number. num_str = str(num) if num % 2 == 0: return int(num_str[::-1]) else: return num"},{"question":"Create a function that calculates the sum of all the numbers in a list. How would you handle the case if the list is empty and what should the return type be?","solution":"def sum_of_list(numbers): Returns the sum of all the numbers in a list. If the list is empty, returns 0. :param numbers: List of numbers :return: Sum of the numbers in the list return sum(numbers) if numbers else 0"},{"question":"Create a function that calculates the sum of all numbers in a list that are divisible by a given number \`n\`.","solution":"def sum_divisible_by_n(numbers, n): Calculates the sum of all numbers in the list that are divisible by n. Parameters: numbers (list): List of numbers to be checked. n (int): The number by which divisibility will be checked. Returns: int: Sum of all numbers in the list that are divisible by n. return sum(x for x in numbers if x % n == 0)"},{"question":"Create a function that defines a variable \\"x\\" and returns its value. Then, call this function and print the result.","solution":"def get_variable(): Defines a variable x and returns its value. x = 42 return x # Call the function and print the result result = get_variable() print(result)"},{"question":"Create a function that takes a string and returns the length of the string. Write a program to demonstrate its usage.","solution":"def string_length(s): Returns the length of the given string s. return len(s)"},{"question":"Create a function that accepts three integer values as input and checks if all three values are distinct. If they are, return true; otherwise, return false.","solution":"def are_all_values_distinct(a, b, c): Returns True if all three input values are distinct, otherwise False. return a != b and b != c and a != c"},{"question":"Create a function that takes a list of strings where each string is a binary number. Return a new list where each binary number is converted to its decimal representation. The function should also handle cases where the input list can be empty. If the input list is empty, the function should return an empty list.","solution":"def binary_to_decimal_list(binary_list): Takes a list of strings where each string is a binary number. Returns a new list where each binary number is converted to its decimal representation. return [int(b, 2) for b in binary_list]"},{"question":"Create a function that takes an integer as input and returns the count of distinct pairs (a, b) such that a + b = target, where a and b are elements of an array of integers. The function should have a time complexity of O(n).","solution":"def count_pairs_with_sum(arr, target): Returns the count of distinct pairs (a, b) such that a + b = target. count = 0 seen = set() pairs = set() for num in arr: complement = target - num if complement in seen and (num, complement) not in pairs and (complement, num) not in pairs: count += 1 pairs.add((num, complement)) seen.add(num) return count"},{"question":"Create a function that takes two dates as input and returns the number of days between them. You should use Python's datetime module to accomplish this task. For example, if you input two dates '2023-01-01' and '2023-01-31', the function should return 30.","solution":"from datetime import datetime def days_between_dates(date1, date2): Returns the number of days between two dates. Parameters: date1 (str): The first date in format 'YYYY-MM-DD'. date2 (str): The second date in format 'YYYY-MM-DD'. Returns: int: The number of days between date1 and date2. d1 = datetime.strptime(date1, '%Y-%m-%d') d2 = datetime.strptime(date2, '%Y-%m-%d') return abs((d2 - d1).days)"},{"question":"Create a function that takes a list of integers as an argument and returns the list with each element multiplied by 2. If the list is empty, the function should return an empty list.","solution":"def multiply_by_two(lst): Takes a list of integers and returns a new list with each element multiplied by 2. return [x * 2 for x in lst]"},{"question":"Create a function that takes an string and returns a dictionary where the string's characters are keys and the frequency of each character is the values.","solution":"def char_frequency(s): Returns a dictionary where the keys are characters from the string \`s\` and the values are the frequency of those characters. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function that takes a string of integers separated by spaces and returns the sum of the squares of these integers.","solution":"def sum_of_squares(s): Returns the sum of the squares of integers in the given string s. Parameters: s (str): A string of integers separated by spaces Returns: int: The sum of the squares of the integers numbers = map(int, s.split()) return sum(x * x for x in numbers)"},{"question":"Create a function that receives two lists of integers, and returns a list of all integers that are present in both lists. If there are no integers in common, the function should return an empty list.","solution":"def common_elements(list1, list2): Returns a list of integers that are present in both list1 and list2. If no integers are in common, returns an empty list. set1 = set(list1) set2 = set(list2) common = set1.intersection(set2) return list(common)"},{"question":"Create a function that checks if a given string is a valid regular expression syntax. The function should return \`True\` if the string is a valid regular expression, and \`False\` otherwise. You can use the \`re\` module in Python to determine the validity of a regular expression.","solution":"import re def is_valid_regex(s): Checks if the given string is a valid regular expression. Args: s (str): The string to check. Returns: bool: True if the string is a valid regular expression, False otherwise. try: re.compile(s) return True except re.error: return False"},{"question":"Create a function that takes in a string as an argument and checks if it contains only alphanumeric characters. You should return true if the string is purely alphanumeric, otherwise false. An alphanumeric string contains both letters and numbers, but no special characters or whitespace.","solution":"def is_alphanumeric(s): Checks if the given string contains only alphanumeric characters. Parameters: s (str): Input string to check Returns: bool: True if the string is alphanumeric, False otherwise return s.isalnum()"},{"question":"Create a function that takes in a string and returns the string in reverse order. If the input string is empty, the function should return an empty string. If the input string contains spaces, the function should reverse the order of the characters in each word. However, spaces themselves should remain in place.","solution":"def reverse_string_with_spaces(s): Reverses the characters of each word in the input string, while keeping spaces in place. result = [] word = [] for char in s: if char == ' ': result.append(''.join(reversed(word))) result.append(' ') word = [] else: word.append(char) if word: result.append(''.join(reversed(word))) return ''.join(result)"},{"question":"Create a function that takes a string as input and returns a new string that is the reverse of the input. If the input string is empty, return an empty string. If the input string contains spaces, reverse the order of characters between each space. For example, if the input is \\"Hello World\\", the output should be \\"World Hello\\".","solution":"def reverse_words(input_string): Returns a new string that is the reverse of the input string in terms of word order. If the input string is empty, return an empty string. # Split the input string by spaces to separate words words = input_string.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words into a single string with spaces reversed_string = ' '.join(reversed_words) return reversed_string"},{"question":"Create a function that calculates the factorial of a non-negative integer, \`n\`, using Python. The factorial of \`n\`, denoted as \`n!\`, is the product of all positive integers up to \`n\`. For example, \`5! = 5 x 4 x 3 x 2 x 1 = 120\`. Ensure your function handles the case when \`n\` is 0, as \`0!\` is defined to be 1. Handle the case when the input is negative by raising an \`InvalidArgumentException\` (if such a class exists in Python) or some other appropriate exception.","solution":"def factorial(n): Calculates the factorial of a non-negative integer n. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes an array of numbers and returns the maximum sum of any two distinct numbers in the array. For example, given [2, 3, 5, 7], the function should return 12 (7 + 5).","solution":"def max_sum_of_two_distinct(numbers): Returns the maximum sum of any two distinct numbers in the array. if len(numbers) < 2: return None # or raise an exception depending on requirements numbers_sorted = sorted(numbers, reverse=True) return numbers_sorted[0] + numbers_sorted[1]"},{"question":"Create a function that , when called, prints \\"Hello, World!\\" and returns the string \\"Hello, World!\\" as well. In Python, display the results of calling this function.","solution":"def hello_world(): Prints and returns 'Hello, World!'. message = \\"Hello, World!\\" print(message) return message # Demonstrating the function call and its output print(hello_world())"},{"question":"Create a function that squares a given number.","solution":"def square(num): Returns the square of the given number. return num * num"},{"question":"Create a function that checks if a given parameter is a number.","solution":"def is_number(param): Checks if the given parameter is a number. try: float(param) return True except (ValueError, TypeError): return False"},{"question":"Create a function that takes a string and returns the string in reverse order. Note that the function should not reverse individual words but the entire string.","solution":"def reverse_string(s): Returns the string s in reverse order. return s[::-1]"},{"question":"Create a function that takes a string s as a parameter and returns a new string that is the reverse of s. The returned string should not start with any leading newline characters that were present in the original string. Similarly, it should not end with any trailing newline characters. If the string has newlines in the middle that are not leading or trailing, they should remain intact in the reversed string. For example, if the input string is \\"nhellonworldn\\", the function should return \\"nworldnhellon\\".","solution":"def reverse_string(s): Takes a string s and returns a new string that is the reverse of s, excluding any leading or trailing newline characters. stripped_string = s.strip(\\"n\\") # Remove leading and trailing newline characters reversed_string = stripped_string[::-1] return reversed_string"},{"question":"Create a function that returns the middle element of an array. If the array has an even number of elements, return the lower middle element.","solution":"def middle_element(arr): Returns the middle element of the array. If the array has an even number of elements, returns the lower middle element. if not arr: raise ValueError(\\"Array cannot be empty\\") mid_index = (len(arr) - 1) // 2 return arr[mid_index]"},{"question":"Create a function that generates a random string of a specified length. The string should consist of uppercase letters, lowercase letters, digits, and punctuation symbols. The function should take one parameter, the desired string length, and return the generated string.","solution":"import random import string def generate_random_string(length): Generates a random string of the specified length consisting of uppercase letters, lowercase letters, digits, and punctuation symbols. Parameters: length (int): The desired length of the random string. Returns: str: The generated random string. characters = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(characters) for _ in range(length))"},{"question":"Create a function that turns a lowercase string into a capitalized form.","solution":"def capitalize_string(s): Converts a given lowercase string into a capitalized form. return s.capitalize()"},{"question":"Create a function that takes an array of integers as input and returns a new array where each element is the sum of the squares of the original elements. For example, given the array [1, 2, 3], the function should return [1, 4, 9] because 1^2 = 1, 2^2 = 4, and 3^2 = 9.","solution":"def sum_of_squares(arr): Returns a new array where each element is the square of the original element. Parameters: - arr: list of integers Returns: - list of integers, where each integer is the square of the corresponding integer in the input list. return [x ** 2 for x in arr]"},{"question":"Create a function that performs an operation based on a condition.","solution":"def conditional_operation(a, b, condition): Performs an operation on a and b based on the condition. Parameters: - a: First operand - b: Second operand - condition: A boolean that defines which operation to perform If the condition is True, the function returns the sum of a and b. If the condition is False, the function returns the product of a and b. if condition: return a + b else: return a * b"},{"question":"Create a function that takes an array of integers and returns the maximum sum of any two numbers in the array.","solution":"def max_sum_of_two(arr): Returns the maximum sum of any two numbers in the array. if len(arr) < 2: raise ValueError(\\"Array must have at least two elements\\") # Sort the array in descending order and take the first two elements sorted_arr = sorted(arr, reverse=True) return sorted_arr[0] + sorted_arr[1]"},{"question":"Create a function that takes an array and a target value, and returns the indices of the two numbers that add up to the target. If no such pair exists, return an empty array. Your function should use a hash map for efficient lookup.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the array that add up to the target. If no such pair exists, returns an empty list. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Create a function that will return a dictionary of unique elements from a given list along with their counts. For instance, if we call your function with the list [3,2,3,4,2,1,1,1,2,4,3], it should return the dictionary \`{1:3, 2:3, 3:3, 4:2}\`.","solution":"def count_unique_elements(lst): Returns a dictionary containing the unique elements from the list as keys and their counts as values. Params: lst (list): The list of elements to count. Returns: dict: Dictionary of elements and their counts. counts = {} for num in lst: if num in counts: counts[num] += 1 else: counts[num] = 1 return counts"},{"question":"Create a function that takes an input array and returns the reverse of the array.","solution":"def reverse_array(arr): Returns the reverse of the input array. Parameters: arr (list): The array to be reversed. Returns: list: The reversed array. return arr[::-1]"},{"question":"Create a function that returns the sum of all numbers in an array. For instance, sumArray([1, 2, 3]) should return 6.","solution":"def sum_array(arr): Returns the sum of all numbers in the array \`arr\`. return sum(arr)"},{"question":"Create a function that returns an array of strings containing all the names of athletes who are tired. An athlete is considered \\"tired\\" if their fatigue level is above the given threshold. The array should contain only one name associated with each athlete. The order of the output array should match the order of the athletes' fatigue levels in the input array.","solution":"def tired_athletes(athletes, fatigue_levels, threshold): Returns a list of names of athletes who are tired based on the given fatigue threshold. Parameters: athletes (list): A list of athletes' names. fatigue_levels (list): A list of fatigue levels corresponding to the athletes. threshold (int): The fatigue level threshold above which athletes are considered tired. Returns: list: A list of names of tired athletes. result = [] for athlete, fatigue in zip(athletes, fatigue_levels): if fatigue > threshold: result.append(athlete) return result"},{"question":"Create a function that takes a string as input and returns a new string that is the reverse of the input string. If the input string is empty or contains only whitespace, the function should return an empty string. Make sure to handle both uppercase and lowercase letters.","solution":"def reverse_string(input_string): Returns the reverse of the input string. If the input string is empty or contains only whitespace, returns an empty string. if not input_string.strip(): return \\"\\" return input_string[::-1]"},{"question":"Create a function that can take in two positive integers, \`a\` and \`b\`, and returns the greatest common divisor of the two integers. The function should implement the Euclidean algorithm.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two positive integers a and b using the Euclidean algorithm. while b: a, b = b, a % b return a"},{"question":"Create a function that takes a list of integers and returns a new list where each element is the sum of the corresponding elements in the input list and a constant number, 5.","solution":"def add_five_to_each_element(input_list): Returns a new list where each element is the sum of the corresponding elements in the input list and 5. Parameters: input_list (list): A list of integers. Returns: list: A new list with each element increased by 5. return [x + 5 for x in input_list]"},{"question":"Create a function that takes an array of integers and target integer. The function should return an array of indices where the integers in the input array match the target integer.","solution":"def find_indices(arr, target): Returns a list of indices where the target integer is found in the input array. :param arr: List[int] - The input array of integers. :param target: int - The target integer to search for in the array. :return: List[int] - The list of indices where the target integer is found. indices = [] for i, num in enumerate(arr): if num == target: indices.append(i) return indices"},{"question":"Create a function that takes two parameters, a string and an integer, and returns the first 'n' characters of the given string. If 'n' is greater than the length of the string, return the entire string.","solution":"def first_n_characters(s, n): Returns the first 'n' characters of the given string. If 'n' is greater than the length of the string, returns the entire string. Parameters: s (str): The input string. n (int): The number of characters to return. Returns: str: The first 'n' characters of the input string. return s[:n]"},{"question":"Create a function that calculates the total price of an item after applying a discount. The function should take the original price and the discount percentage as inputs and return the discounted price. If the discount percentage is negative, the function should return the original price unchanged.","solution":"def calculate_discounted_price(original_price, discount_percentage): Calculate the total price of an item after applying a discount. Parameters: original_price (float): The original price of the item. discount_percentage (float): The discount percentage to be applied. Returns: float: The price after applying the discount. If the discount percentage is negative, the original price is returned unchanged. if discount_percentage < 0: return original_price discount_amount = (discount_percentage / 100) * original_price discounted_price = original_price - discount_amount return discounted_price"},{"question":"Create a function that takes in a list of integers and returns the sum of the prime numbers in the list. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. If there are no prime numbers in the list, the function should return 0.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # other even numbers are not prime for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sum_of_primes(lst): Returns the sum of prime numbers in the list. return sum(x for x in lst if is_prime(x))"},{"question":"Create a function that takes a list as an input and returns the sum of all its elements. If the list contains nested lists, the function should recurse and sum all the numbers in both the outer and inner lists.","solution":"def recursive_sum(lst): Returns the sum of all elements in the list. If the list contains nested lists, it recurses and sums all the numbers in both outer and inner lists. total = 0 for item in lst: if isinstance(item, list): total += recursive_sum(item) else: total += item return total"},{"question":"Create a function that finds the minimum value in a 2D array. The function should handle cases where the array contains nested arrays of varying sizes and be able to work with both positive and negative integers.","solution":"def find_min_in_2d_array(arr): Returns the minimum value found in a 2D array. Parameters: arr (list of lists): A 2D array containing integers. Returns: int: The minimum value found in the given array. if not arr: raise ValueError(\\"The input array is empty\\") min_value = float('inf') for sublist in arr: if isinstance(sublist, list): for item in sublist: if item < min_value: min_value = item if min_value == float('inf'): raise ValueError(\\"The input array contains no valid integers\\") return min_value"},{"question":"Create a function that accepts a list of integers and returns a list with the same integers that are either even or divisible by 3.","solution":"def filter_even_or_divisible_by_3(numbers): Filters the list to include only numbers that are either even or divisible by 3. Args: numbers (list): A list of integers. Returns: list: A list of integers that are either even or divisible by 3. return [num for num in numbers if num % 2 == 0 or num % 3 == 0]"},{"question":"Create a function that uses nothing other than arithmetic operators (+, -, *, /) and comparisons (<, <=, >, >=, ==, != ) to find the sum of numbers in a list. The function should work on integers and floats, as well as lists of mixed types. I am not allowed to use built-in functions or any other Python libraries.","solution":"def sum_of_list(numbers): Returns the sum of numbers in a list using only arithmetic operators and comparisons. total = 0 for number in numbers: total = total + number return total"},{"question":"Create a function that takes a string containing a hexadecimal number and returns its decimal equivalent as an integer.","solution":"def hex_to_decimal(hex_string): Converts a hexadecimal number (in string format) to its decimal equivalent. Parameters: hex_string (str): A string containing a hexadecimal number. Returns: int: The decimal equivalent of the hexadecimal number. return int(hex_string, 16)"},{"question":"Create a function that takes an integer array as input and returns the length of the longest increasing subsequence (LIS) in the array. The LIS is defined as a subsequence in which the elements are in strictly increasing order, and not necessarily contiguous. If there are multiple possible LIS, return the length of the longest one.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the given list of integers. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Create a function that takes an integer as input and returns the next closest palindromic number.","solution":"def next_palindrome(num): Returns the next closest palindromic number greater than the input number. def is_palindrome(n): s = str(n) return s == s[::-1] current_num = num + 1 while not is_palindrome(current_num): current_num += 1 return current_num"},{"question":"Create a function that takes a string as input and reverses each word in the string. For example, if the input is \\"Hello World\\", the output should be \\"olleH dlroW\\".","solution":"def reverse_words_in_string(s): Takes a string as input and reverses each word in the string. Parameters: s (str): The input string. Returns: str: The string with each word reversed. return ' '.join(word[::-1] for word in s.split())"},{"question":"Create a function that checks if a given number is a prime number. In your function, also return the smallest prime factor other than 1 for the number. If the number is not a prime, return a boolean False and indicate that there are no prime factors other than 1.","solution":"def is_prime_with_smallest_factor(n): Checks if the given number n is a prime number. If n is prime, returns True and the smallest prime factor. If n is not a prime, returns False and indicates there are no prime factors other than 1. Parameters: n (int): The number to check. Returns: tuple: (bool, smallest prime factor or message) if n <= 1: return (False, \\"No prime factors other than 1\\") if n == 2: return (True, 2) for i in range(2, int(n**0.5) + 1): if n % i == 0: return (False, \\"No prime factors other than 1\\") return (True, n)"},{"question":"Create a function that takes a number as an input and returns the sum of all prime numbers less than that number. I need a solution in Python.","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than n. if n <= 2: return 0 sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start * start, n, start): sieve[multiple] = False prime_sum = sum(index for index, is_prime in enumerate(sieve) if is_prime) return prime_sum"},{"question":"Create a function that calculates the Fibonacci sequence up to a given nth number. The function should return the sequence as a list. The nth number specifies the length of the Fibonacci sequence to generate. The function should handle negative numbers, zero, and large numbers efficiently. For negative numbers, the function should return an error message. For zero, it should return a list containing only the zero. For large numbers, the function can return up to 1000 numbers of the Fibonacci sequence.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to the nth number as a list. For negative numbers, returns an error message. For zero, returns [0]. For very large numbers, the function returns up to 1000 numbers of the Fibonacci sequence. if n < 0: return \\"Error: Input should be a non-negative integer.\\" elif n == 0: return [0] if n > 1000: n = 1000 sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Create a function that generates a list of n numbers, where each number is the number of 1's in the binary representation of its index in the list.","solution":"def count_ones_in_binary(n): Generates a list of n numbers, where each number is the number of 1's in the binary representation of its index in the list. :param n: The number of elements in the list. :type n: int :return: A list of numbers where each number is the count of 1's in the binary representation. :rtype: List[int] return [bin(i).count('1') for i in range(n)]"},{"question":"Create a function that prints every number from 1 to 100. Tell me step by step how you would approach this problem and how you would write the code in Python.","solution":"def print_numbers(): Prints every number from 1 to 100. for number in range(1, 101): print(number)"},{"question":"Create a function that takes a string as input and returns the string with the first half and the second half concatenated in reverse order. For instance, given the string \\"hello world\\", the function should return \\"dlrow olleh\\". However, if the string length is odd, the middle character should remain in the same position. For example, if the string is \\"hello world again\\", the function should return \\"dlrow olleh a\\". Write a function in Python that implements this behavior.","solution":"def reverse_halves(s): Returns a string with the first half and second half concatenated in reverse order. For odd length strings, the middle character remains in the same position. length = len(s) mid = length // 2 if length % 2 == 0: left = s[:mid] right = s[mid:] return right[::-1] + left[::-1] else: left = s[:mid] middle = s[mid] right = s[mid+1:] return right[::-1] + middle + left[::-1]"},{"question":"Create a function that efficiently add two numbers without using the '+' operator.","solution":"def add_without_plus(a, b): Adds two numbers without using the '+' operator. Uses bitwise operations to calculate the sum. MAX = 0xFFFFFFFF mask = 0xFFFFFFFF while b != 0: a, b = (a ^ b) & mask, ((a & b) << 1) & mask if a > MAX // 2: a = ~(a ^ mask) return a"},{"question":"Create a function that takes an array of integers and returns the maximum sum of any contiguous subarray. You can assume that the array contains at least one integer.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray. :param nums: List of integers :return: Integer, the maximum sum of any contiguous subarray max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that determines the number of days between two given dates. The dates provided will be in the format \\"YYYY-MM-DD\\". The function should return the absolute number of days between the two dates.","solution":"from datetime import datetime def days_between_dates(date1, date2): Returns the absolute number of days between two dates in the format \\"YYYY-MM-DD\\". date_format = \\"%Y-%m-%d\\" d1 = datetime.strptime(date1, date_format) d2 = datetime.strptime(date2, date_format) delta = abs((d2 - d1).days) return delta"},{"question":"Create a function that generates a random password of a specified length. The password should include at least one uppercase letter, one lowercase letter, one number, and one special character. The function should use the \`random\` and \`string\` modules in Python to generate the password.","solution":"import random import string def generate_password(length): Generates a random password of specified length that includes at least one uppercase letter, one lowercase letter, one number, and one special character. if length < 4: raise ValueError(\\"Password length must be at least 4 characters.\\") # Define potential characters uppercase = random.choice(string.ascii_uppercase) lowercase = random.choice(string.ascii_lowercase) digit = random.choice(string.digits) special = random.choice(string.punctuation) # Generate remaining characters remaining_length = length - 4 remaining_chars = random.choices(string.ascii_letters + string.digits + string.punctuation, k=remaining_length) # Combine all characters password_chars = [uppercase, lowercase, digit, special] + remaining_chars # Shuffle the characters random.shuffle(password_chars) # Create the final password return ''.join(password_chars)"},{"question":"Create a function that takes two parameters, an array of integers, and a target sum. The function should return true if there is any subarray within the array that sums up to the target, and false otherwise.","solution":"def has_subarray_with_sum(arr, target): Determines if there is a subarray within \`arr\` that sums up to \`target\`. Parameters: arr (list of int): The array of integers. target (int): The target sum. Returns: bool: True if such a subarray exists, False otherwise. curr_sum = 0 prefix_sums = set() for num in arr: curr_sum += num if curr_sum == target or (curr_sum - target) in prefix_sums: return True prefix_sums.add(curr_sum) return False"},{"question":"Create a function that takes an integer as an argument and returns a tuple containing the integer value, its square, and its cube.","solution":"def integer_square_cube(n): Returns a tuple containing the integer value, its square, and its cube. square = n ** 2 cube = n ** 3 return (n, square, cube)"},{"question":"Create a function that takes a string of parentheses and determines if each opening parenthesis has a corresponding closing parenthesis.","solution":"def is_balanced_parentheses(s): Returns True if each opening parenthesis has a corresponding closing parenthesis. Otherwise, returns False. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return not stack"},{"question":"Create a function that takes a list of numbers as input and returns the sum of the numbers that are both greater than 5 and less than 10.","solution":"def sum_specific_range(numbers): Returns the sum of numbers in the list that are greater than 5 and less than 10. Parameters: numbers (list): A list of numbers. Returns: int: The sum of numbers between 5 and 10. return sum(num for num in numbers if 5 < num < 10)"},{"question":"Create a function that takes in two lists as parameters and returns a dictionary where the keys are the unique elements from the first list and the values are the corresponding counts of those elements in the second list. For example, if the first list contains [\\"apple\\", \\"banana\\", \\"apple\\"] and the second list contains [\\"red\\", \\"orange\\", \\"red\\", \\"yellow\\"], the function should return {\\"apple\\": 2, \\"banana\\": 1} as \\"apple\\" appears twice in both lists.","solution":"def count_elements(list1, list2): Takes in two lists: list1 and list2. Returns a dictionary where the keys are the unique elements from list1 and the values are the counts of those elements in list2. count_dict = {} for item in set(list1): count_dict[item] = list1.count(item) return count_dict"},{"question":"Create a function that takes two strings (\`first_string\` and \`second_string\`) as arguments and returns a tuple containing the intersection of the two sets created from these strings. The intersection should include only the common characters, and each character should appear only once in the tuple.","solution":"def string_intersection(first_string, second_string): Returns a tuple containing the intersection of the sets created from the two input strings. Each character in the tuple appears only once. set1 = set(first_string) set2 = set(second_string) intersection = set1.intersection(set2) return tuple(intersection)"},{"question":"Create a function that accepts a filename and a dictionary as parameters. The function should read the content of the file and count the occurrences of words that are keys in the dictionary. It should then return a dictionary where the keys are the words from the input dictionary and the values are their respective counts in the file.","solution":"def count_words_in_file(filename, word_dict): Counts the occurrences of words in the input dictionary within the specified file. Parameters: filename (str): The name of the file to read. word_dict (dict): A dictionary where the keys are words to count in the file. Returns: dict: A dictionary with the same keys as input dictionary and their counts as values. counts = {key: 0 for key in word_dict} try: with open(filename, 'r') as file: for line in file: words = line.split() for word in words: word = word.lower().strip('.,!?;:'\\"()[]{}') if word in counts: counts[word] += 1 except FileNotFoundError: print(f\\"The file {filename} was not found.\\") return counts"},{"question":"Create a function that takes a list of integers and returns a new list that is the reverse of the given list. You should not use any built-in reversing functions or methods (like \`reverse()\`, \`[::-1]\`, etc.). The function should manually reverse the list by swapping elements.","solution":"def reverse_list(lst): Returns a new list that is the reverse of the given list. n = len(lst) reversed_lst = lst[:] # Create a copy of the original list for i in range(n // 2): # Swap the elements reversed_lst[i], reversed_lst[n - i - 1] = reversed_lst[n - i - 1], reversed_lst[i] return reversed_lst"},{"question":"Create a function that sums up all the even and odd numbers from a number list.","solution":"def sum_even_odd(numbers): Sums up all the even and odd numbers separately from a provided list. Parameters: numbers (list of int): The list of integers to process. Returns: tuple: A tuple containing two elements, the sum of even numbers and the sum of odd numbers. even_sum = 0 odd_sum = 0 for number in numbers: if number % 2 == 0: even_sum += number else: odd_sum += number return even_sum, odd_sum"},{"question":"Create a function that takes in a list of 10 floating point numbers between 0 and 1 as input, and returns a new list containing the cubes of each number in the original list.","solution":"def cube_floats(floats): Returns a list containing the cubes of each number in the original list. Parameters: floats (list of floats): A list of 10 floating point numbers between 0 and 1. Returns: List of floats containing the cubes of the original numbers. # Validating input length if len(floats) != 10: raise ValueError(\\"Input list must contain exactly 10 numbers.\\") # Validating input value range for number in floats: if not (0 <= number <= 1): raise ValueError(\\"All numbers must be between 0 and 1.\\") return [x**3 for x in floats]"},{"question":"Create a function that returns the mean of an array of numbers in Python.","solution":"def mean(numbers): Returns the mean of an array of numbers. if not numbers: raise ValueError(\\"The array is empty\\") return sum(numbers) / len(numbers)"},{"question":"Create a function that accepts an integer as an argument and returns a dictionary where the keys are the digits from 0 to 9 and the values are the counts of each digit's appearance in the input integer.","solution":"def digit_count(n): Returns a dictionary with the count of each digit in the input integer n. # Handling negative numbers n = abs(n) # Initialize a dictionary with keys as digits and values as 0 counts = {str(i): 0 for i in range(10)} # Count the digits in the integer for digit in str(n): counts[digit] += 1 return counts"},{"question":"Create a function that fetches and returns data from a URL using \`http\` in Python. You should also handle exceptions that might occur during the fetching process.","solution":"import requests def fetch_data(url): Fetches data from the given URL using an HTTP GET request. Args: url (str): The URL to fetch data from. Returns: dict: A dictionary with 'success' as a key and its value indicating whether the data was fetched successfully or not. If successful, includes 'data' key and its fetched content. If failed, includes 'error' key with error message. try: response = requests.get(url) response.raise_for_status() # Raise HTTPError for bad responses return {'success': True, 'data': response.text} except requests.exceptions.RequestException as e: return {'success': False, 'error': str(e)}"},{"question":"Create a function that checks if a string contains a specific character. charCheck('hello', 'z') should return false, while charCheck('python', 'y') should return true. How to achieve this?","solution":"def charCheck(input_string, char): Checks if input_string contains the character char. return char in input_string"},{"question":"Create a function that takes two parameters, two integers a and b, and returns the sum of all integers between a and b (inclusive) using recursion. Answer this in Python.","solution":"def sum_between(a, b): Returns the sum of all integers between a and b (inclusive) using recursion. # Base case: when a equals b if a > b: a, b = b, a if a == b: return a return a + sum_between(a + 1, b)"},{"question":"Create a function that accepts a string and returns the count of how many times a character appears consecutively in the string. For example, the string \\"aabbcc\\" should return 6, because there are 2 'a's, 2 'b's, and 2 'c's.","solution":"def count_consecutive_characters(s): Returns the total count of consecutively appearing characters in the string s. if not s: return 0 count = 1 total = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: total += count count = 1 total += count # Add the count of the last segment return total"},{"question":"Create a function that will convert a temperature in Fahrenheit to Celsius using the formula: C = (F - 32) * 5/9. Write this function in Python.","solution":"def fahrenheit_to_celsius(fahrenheit): Converts a temperature in Fahrenheit to Celsius. Parameters: fahrenheit (float): Temperature in Fahrenheit. Returns: float: Temperature in Celsius. celsius = (fahrenheit - 32) * 5 / 9 return celsius"},{"question":"Create a function that takes two numbers as parameters and returns the result of dividing the first number by the second. If the second number is zero, your function should handle this gracefully by returning \`None\` or raising an exception.","solution":"def divide(a, b): Returns the result of dividing the first number by the second. If the second number is zero, returns None. if b == 0: return None else: return a / b"},{"question":"Create a function that generates the Fibonacci sequence for n numbers.","solution":"def fibonacci_sequence(n): Generates the Fibonacci sequence up to n numbers. Parameters: n (int): Number of Fibonacci numbers to generate in the sequence. Returns: list: A list containing the Fibonacci sequence up to n numbers. if n <= 0: return [] elif n == 1: return [0] fib_seq = [0, 1] while len(fib_seq) < n: fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Create a function that checks if a given number is prime. If it is, return \\"Yes, it's a prime number.\\" Otherwise, return \\"No, it's not a prime number.\\" A prime number is a number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(n): Checks if a given number is prime. :param n: The number to check. :return: A string indicating whether the number is prime or not. if n <= 1: return \\"No, it's not a prime number.\\" if n == 2: return \\"Yes, it's a prime number.\\" if n % 2 == 0: return \\"No, it's not a prime number.\\" for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return \\"No, it's not a prime number.\\" return \\"Yes, it's a prime number.\\""},{"question":"Create a function that can analyze a string of text and output the frequency of each word in the text. The function should ignore common English stop words such as \\"the\\", \\"is\\", \\"at\\", etc. and should return the word frequencies in a dictionary.","solution":"from collections import defaultdict import re def word_frequency(text): Analyzes a string of text and outputs the frequency of each word. Certain common English stop words are ignored. # Define the list of common English stop words stop_words = { \\"the\\", \\"is\\", \\"in\\", \\"at\\", \\"of\\", \\"and\\", \\"a\\", \\"to\\", \\"it\\", \\"on\\", \\"this\\", \\"that\\", \\"with\\", \\"as\\", \\"for\\", \\"its\\", \\"was\\", \\"were\\", \\"an\\", \\"by\\" } # Clean the text by removing punctuation and converting to lowercase text = re.sub(r'[^ws]', '', text).lower() # Split the text into words words = text.split() # Initialize the dictionary to store word frequencies frequency = defaultdict(int) # Loop through each word and count its frequency if it's not a stop word for word in words: if word not in stop_words: frequency[word] += 1 return dict(frequency)"},{"question":"Create a function that accepts an array of integers, and returns the smallest and largest integers from that array. The function should work for any range of integers.","solution":"def find_smallest_largest(arr): Returns a tuple containing the smallest and largest integer from an array. if not arr: raise ValueError(\\"Array cannot be empty\\") smallest = min(arr) largest = max(arr) return (smallest, largest)"},{"question":"Create a function that takes a list of integers and returns two new lists. The first list should contain all the odd numbers from the input list, and the second list should contain all the even numbers. Assume the input list will not contain any non-integer values.","solution":"def separate_odd_even(numbers): Separates a list of integers into two lists: one with odd numbers and one with even numbers. Parameters: numbers (list): The list of integers to be separated. Returns: tuple: A tuple containing two lists (odds, evens). odds = [num for num in numbers if num % 2 != 0] evens = [num for num in numbers if num % 2 == 0] return (odds, evens)"},{"question":"Create a function that takes a list of integers and returns a list of strings, where each string describes the sum of each integer in the list, represented in binary. The output should be a list of strings, each of which is the binary representation of the sum of the integers in the input list modulo 2^32.","solution":"def binary_sum_representation(nums): Takes a list of integers and returns a list of strings, where each string is the sum of the integers modulo 2^32 in binary. modulo = 2**32 total_sum = sum(nums) % modulo binary_string = bin(total_sum)[2:] # Convert to binary and remove '0b' prefix return [binary_string]"},{"question":"Create a function that takes a list of integers and returns the majority element if it exists. The majority element is the element that appears more than ⌊n / 2⌋ times in the array, where n is the size of the array. If there is no majority element, return -1. Write a detailed explanation of your solution.","solution":"def majority_element(nums): Returns the majority element if it exists, otherwise returns -1. The majority element is the element that appears more than ⌊n / 2⌋ times. frequency_dict = {} n = len(nums) majority_threshold = n // 2 for num in nums: if num in frequency_dict: frequency_dict[num] += 1 else: frequency_dict[num] = 1 if frequency_dict[num] > majority_threshold: return num return -1"},{"question":"Create a function that takes two integers, a and b, and returns their sum. However, if a is greater than b, it should return the difference between a and b. If a is less than b, it should return the product of a and b. If a is equal to b, it should return 0.","solution":"def custom_operation(a, b): Returns the sum of a and b if a is equal to b. Returns the product of a and b if a is less than b. Returns the difference of a and b if a is greater than b. if a == b: return 0 elif a > b: return a - b else: return a * b"},{"question":"Create a function that takes an integer as an argument and returns its cube.","solution":"def cube(n): Returns the cube of the given integer n. return n ** 3"},{"question":"Create a function that takes an integer \`n\` and returns the sum of all even numbers from 1 to \`n\` (inclusive). Write a recursive solution.","solution":"def sum_even_numbers(n): Returns the sum of all even numbers from 1 to n (inclusive) using recursion. Parameters: n (int): The upper limit integer. Returns: int: The sum of all even numbers from 1 to n. if n < 2: return 0 elif n % 2 == 0: return n + sum_even_numbers(n-2) else: return sum_even_numbers(n-1)"},{"question":"Create a function that takes two lists of numbers as input and returns a list of their element-wise sums. If the lists are of unequal lengths, the function should pad the shorter list with the number 0's to match the length of the longer list before performing the addition.","solution":"def elementwise_sum(list1, list2): Takes two lists of numbers and returns a list of their element-wise sums. If the lists are of unequal lengths, the shorter list will be padded with zeros. max_len = max(len(list1), len(list2)) padded_list1 = list1 + [0] * (max_len - len(list1)) padded_list2 = list2 + [0] * (max_len - len(list2)) return [padded_list1[i] + padded_list2[i] for i in range(max_len)]"},{"question":"Create a function that calculates the Fibonacci sequence up to the n-th number. The function should be efficient and avoid recalculating values that have already been computed. Use a technique such as memoization or tabulation to optimize the solution.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the n-th number. Uses memoization to optimize the calculation of the Fibonacci sequence. fib_cache = {} def fib_memo(n): if n in fib_cache: return fib_cache[n] if n <= 1: return n result = fib_memo(n - 1) + fib_memo(n - 2) fib_cache[n] = result return result fib_sequence = [fib_memo(i) for i in range(n)] return fib_sequence"},{"question":"Create a function that takes in a list of integers and a integer x as a parameter and return the product of all numbers in the list that are greater than x. If no number in the list is greater than x, return the product as 1.","solution":"def product_greater_than_x(lst, x): Returns the product of all numbers in the list that are greater than x. If no number in the list is greater than x, return 1. product = 1 found = False for num in lst: if num > x: product *= num found = True return product if found else 1"},{"question":"Create a function that generates the nth Fibonacci number using a list to store previously calculated numbers to optimize performance. This function should be efficient and use dynamic programming to avoid recalculating the same Fibonacci numbers.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n <= 0: raise ValueError(\\"n must be a positive integer\\") if n == 1: return 0 if n == 2: return 1 fib_nums = [0, 1] + [0] * (n - 2) for i in range(2, n): fib_nums[i] = fib_nums[i - 1] + fib_nums[i - 2] return fib_nums[-1]"},{"question":"Create a function that takes three integers as input and prints the greatest common divisor (GCD) of the three numbers using the Euclidean algorithm. The Euclidean algorithm to find the GCD of two numbers is based on the principle that the GCD of two numbers also divides their difference. Extend this concept to three numbers by finding GCD of the first two numbers, then find the GCD of that result with the third number.","solution":"def gcd(a, b): while b: a, b = b, a % b return a def gcd_of_three(a, b, c): Returns the GCD of three numbers a, b, and c. first_gcd = gcd(a, b) return gcd(first_gcd, c) # Example usage gcd_of_three(48, 64, 80)"},{"question":"Create a function that takes a string as input and returns a set containing all the distinct words in the string. The function should ignore case and consider words as sequences of characters separated by whitespace, punctuation (.,!?;:()[]{}\\"), and the newline 'n' character.","solution":"import re def extract_distinct_words(text): Extracts and returns a set of distinct words from the input text. Words are considered case insensitive and are separated by whitespace and punctuation. words = re.findall(r'bw+b', text.lower()) return set(words)"},{"question":"Create a function that takes a string as input and returns a tuple containing the counts of uppercase letters, lowercase letters, digits, and special characters in the string. Implement the function without using Python's built-in count() method or regex.","solution":"def count_characters(s): Takes a string as input and returns a tuple containing the counts of uppercase letters, lowercase letters, digits, and special characters. upper_count = 0 lower_count = 0 digit_count = 0 special_count = 0 for char in s: if 'A' <= char <= 'Z': upper_count += 1 elif 'a' <= char <= 'z': lower_count += 1 elif '0' <= char <= '9': digit_count += 1 else: special_count += 1 return (upper_count, lower_count, digit_count, special_count)"},{"question":"Create a function that takes three integer arguments. Let the arguments be \`a\`, \`b\`, and \`c\`. The function should return the sum of the squares of the two largest numbers among the three arguments.","solution":"def sum_of_squares_of_two_largest(a, b, c): Returns the sum of squares of the two largest numbers among a, b, and c. # Create a list of the numbers nums = [a, b, c] # Sort the list in descending order nums_sorted = sorted(nums, reverse=True) # Calculate the sum of squares of the two largest numbers result = nums_sorted[0]**2 + nums_sorted[1]**2 return result"},{"question":"Create a function that takes three arguments: a string \`s\`, an integer \`m\`, and another integer \`n\` (0 <= m <= n). The function should return a new string that is a repetition of the original string \`s\` from index \`m\` to \`n\` inclusive for \`k\` times. Here, \`k\` is the number of characters in the substring \`s[m:n+1]\`.","solution":"def repeat_substring(s, m, n): Returns a repetition of the substring s[m:n+1] for k times, where k is the length of the substring. :param s: input string :param m: starting index :param n: ending index :return: repeated substring substring = s[m:n+1] k = len(substring) return substring * k"},{"question":"Create a function that takes a single integer and checks if it's a prime number. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. If the number is prime, the function should return \`True\`, and if not, it should return \`False\`.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5)+1, 2): if n % i == 0: return False return True"},{"question":"Create a function that checks if the parentheses in a given string are balanced and properly nested. The string will contain only parentheses '(' and ')'. Your function should return \`True\` if the parentheses are balanced and properly nested, and \`False\` otherwise.","solution":"def is_balanced_parentheses(s): Returns True if the parentheses in the given string are balanced and properly nested, False otherwise. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return not stack"},{"question":"Create a function that takes an integer N as input and returns a list of integers that have at least one digit repeated. The integers should be greater than or equal to N. For example, if N is 15, the function should return [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] since these are the integers greater than or equal to 15 with at least one digit repeated.","solution":"def repeated_digit_numbers(N): Returns a list of integers greater than or equal to N that have at least one digit repeated. def has_repeated_digit(num): digits = str(num) return any(digits.count(digit) > 1 for digit in digits) result = [] current = N while len(result) < 10: if has_repeated_digit(current): result.append(current) current += 1 return result"},{"question":"Create a function that can find the minimum number of coins needed to make a given amount. The function should take two parameters: a list of coin denominations and the target amount. The function should return the minimum number of coins required to make the target amount.","solution":"def min_coins(coins, amount): Returns the minimum number of coins needed to make the given amount. :param coins: List of coin denominations. :param amount: Target amount. :return: Minimum number of coins required to make the target amount. Returns -1 if not possible. # Initialize a list with amount+1 elements, all set to a large number (amount+1 is a safe assumption) dp = [amount + 1] * (amount + 1) dp[0] = 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != amount + 1 else -1"},{"question":"Create a function that takes in a string and returns the first repeated character in the string. If there are no repeated characters, return None. Additionally, the function should ignore case sensitivity and look for repeated characters based on their position in the string, not their order in the alphabet.","solution":"def first_repeated_char(s): Returns the first repeated character in the string s, ignoring case sensitivity. If there is no repeated character, returns None. seen = set() s = s.lower() # Ignore case sensitivity by converting the string to lowercase for char in s: if char in seen: return char seen.add(char) return None"},{"question":"Create a function that calculates the sum of all prime numbers up to but not including a given integer \`n\`.","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def sum_primes_below(n): Returns the sum of all prime numbers below a given integer n. total = 0 for num in range(2, n): if is_prime(num): total += num return total"},{"question":"Create a function that takes an integer as a parameter and returns the sum of all even numbers from 0 to the given integer (inclusive), that are divisible by 3.","solution":"def sum_even_divisible_by_3(n): Returns the sum of all even numbers from 0 to n (inclusive) that are divisible by 3. return sum(i for i in range(0, n+1) if i % 2 == 0 and i % 3 == 0)"},{"question":"Create a function that takes four integers as input and returns the smallest among the four. Additionally, handle any input that is not an integer or outside the specified range of an integer.","solution":"def smallest_of_four(a, b, c, d): Returns the smallest integer among the four inputs if valid integers within range. Raises ValueError if any input is not an integer or outside the valid integer range. valid_range = (-2147483648, 2147483647) for num in (a, b, c, d): if not isinstance(num, int): raise ValueError(f\\"Input {num} is not an integer\\") if num < valid_range[0] or num > valid_range[1]: raise ValueError(f\\"Input {num} is outside the valid integer range\\") return min(a, b, c, d)"},{"question":"Create a function that takes one argument, a positive integer, and returns a list containing the first \`n\` Fibonacci numbers. Here's the catch, you can only use recursion and no other loop constructs (like for, while). The Fibonacci function is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.","solution":"def fibonacci_recursive(n, a=0, b=1, fib_sequence=None): if fib_sequence is None: fib_sequence = [a] if n == 1: return fib_sequence fib_sequence.append(b) return fibonacci_recursive(n-1, b, a+b, fib_sequence)"},{"question":"Create a function that takes an integer as an input and multiplies it by a constant with the value 3 and then adds a constant with the value 5. The function should then return the result of this operation.","solution":"def multiply_and_add(n): Multiplies the input n by 3 and then adds 5. return n * 3 + 5"},{"question":"Create a function that takes a list of integers and returns the sum of all the numbers that are greater than a given threshold. The threshold will be provided as the second argument to the function.","solution":"def sum_above_threshold(numbers, threshold): Returns the sum of all the numbers greater than the given threshold. :param numbers: list of integers :param threshold: integer threshold :return: integer sum of numbers greater than threshold return sum(num for num in numbers if num > threshold)"},{"question":"Create a function that takes a list as an input and returns a new list where each element at an even index (considering the first index as 0) is replaced with twice its value, and each element at an odd index is replaced with its square.","solution":"def transform_list(lst): Transforms the input list by: - Doubling the element at even indexes. - Squaring the element at odd indexes. Parameters: lst (list): The input list of integers. Returns: list: The transformed list. return [x*2 if i % 2 == 0 else x**2 for i, x in enumerate(lst)]"},{"question":"Create a function that finds the maximum sum of a subarray within a given array. This is known as Kadane's algorithm.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a subarray using Kadane's Algorithm. if not arr: # handle edge case with empty array return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that can generate all the prime numbers up to a given limit 'n', and return them in a list. The function should use the Sieve of Eratosthenes algorithm for efficient prime number generation.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to 'n' using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0], sieve[1] = False, False for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start*start, n+1, start): sieve[multiple] = False return [num for num in range(n + 1) if sieve[num]]"},{"question":"Create a function that takes an integer and returns its factorial. The function should handle large numbers and be optimized for performance.","solution":"import math def factorial(n): Returns the factorial of a given integer n. Uses the math.factorial function for optimized performance. Parameters: n (int): The integer for which to calculate the factorial. Returns: int: The factorial of the given integer. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") return math.factorial(n)"},{"question":"Create a function that receives a string and returns the string with the vowels removed. Also, ensure that the function efficiently handles large strings.","solution":"def remove_vowels(input_string): This function removes all vowels (both uppercase and lowercase) from the input string. Parameters: input_string (str): The string from which vowels need to be removed. Returns: str: The string with all vowels removed. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in input_string if char not in vowels])"},{"question":"Create a function that extracts the first character of each word in a string and returns a new string containing these characters.","solution":"def extract_first_characters(s): Returns a string containing the first character of each word in the input string s. words = s.split() return ''.join(word[0] for word in words)"},{"question":"Create a function that takes an array of numbers and returns a new array of strings where each string is the squared values of the numbers from the original array.","solution":"def square_and_stringify(numbers): Takes an array of numbers and returns an array of strings where each string is the squared value of the numbers from the original array. return [str(num ** 2) for num in numbers]"},{"question":"Create a function that takes an integer x, where x is the number of flights made by a bird. Display the output as \\"It's raining, the bird can't fly,; number of flights made is: x\\" If the number of flights is even, concatenate exclamation marks to the output string based on the number of flights divided by 2. If the number of flights is odd, concatenate stars (+) instead of exclamation marks. The increment is based on the integer part of the number of flights divided by 2 (rounded down).","solution":"def bird_flight_message(x): Returns a message about the bird's flights with appended characters based on the number of flights. If the number of flights is even, append exclamation marks (!) proportional to \`x // 2\`. If the number of flights is odd, append stars (+) proportional to \`x // 2\`. base_message = f\\"It's raining, the bird can't fly; number of flights made is: {x}\\" append_char = '!' if x % 2 == 0 else '+' append_str = append_char * (x // 2) return base_message + append_str"},{"question":"Create a function that takes a list of integers and returns a list of integers that are grouped by their frequency. For example, if an integer appears three times, it should be grouped in a list of three elements. If an integer appears twice, it should be grouped in a list of two elements, and so on. The function should return a list of lists, where each inner list represents the group of integers with the same frequency. The order of the groups and the integers within each group should match the order in which they first appear in the input list. Example: group_by_frequency([4, 2, 3, 2, 4, 4]) should return [[4, 4, 4], [2, 2], [3]].","solution":"from collections import OrderedDict, Counter def group_by_frequency(lst): Given a list of integers, returns a list of lists where each inner list contains the integers grouped by their frequency. count_dict = OrderedDict() frequencies = Counter(lst) for num in lst: if num not in count_dict: count_dict[num] = [num] * frequencies[num] return list(count_dict.values())"},{"question":"Create a function that takes in a positive integer n, and returns the smallest positive integer m such that m! (m factorial) is divisible by n.","solution":"def smallest_factorial_divisible(n): def prime_factors(n): i = 2 factors = {} while i * i <= n: while (n % i) == 0: if i in factors: factors[i] += 1 else: factors[i] = 1 n //= i i += 1 if n > 1: factors[n] = 1 return factors def count_in_factorial(m, p): count = 0 power = p while power <= m: count += m // power power *= p return count factors = prime_factors(n) m = 1 while True: divisible = True for p in factors: if count_in_factorial(m, p) < factors[p]: divisible = False break if divisible: return m m += 1"},{"question":"Create a function that checks if a given number is a perfect square, without using any built-in functions like \`sqrt()\` or \`**0.5\`.","solution":"def is_perfect_square(n): Checks if a given number n is a perfect square. if n < 0: return False i = 0 while i * i <= n: if i * i == n: return True i += 1 return False"},{"question":"Create a function that takes two arguments \`a\` and \`b\` and returns \`a\` to the power of \`b\` using recursion.","solution":"def power(a, b): Returns a raised to the power of b using recursion. # Base case: any number to the power of 0 is 1 if b == 0: return 1 # Recursive case return a * power(a, b - 1)"},{"question":"Create a function that calculates the factorial of a given number n using recursion. The function should handle inputs from 0 to 20.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. Handles inputs from 0 to 20. if n < 0 or n > 20: raise ValueError(\\"n must be between 0 and 20, inclusive.\\") if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that generates the smallest number with exactly \`n\` digits and behaves as a power of 2.","solution":"def smallest_power_of_2_with_n_digits(n): Returns the smallest number with exactly n digits that is a power of 2. if n <= 0: return -1 # Invalid input case, as n needs to be a positive integer. lower_bound = 10**(n-1) upper_bound = 10**n power = 0 while True: current_power_of_2 = 2**power if lower_bound <= current_power_of_2 < upper_bound: return current_power_of_2 power += 1"},{"question":"Create a function that adds two numbers without using arithmetic operators (+, -, *, /)","solution":"def add_without_arithmetic(a, b): Adds two numbers without using arithmetic operators. Utilizes bitwise operations instead. MAX_INT = 0xFFFFFFFF while b != 0: carry = a & b a = (a ^ b) & MAX_INT b = (carry << 1) & MAX_INT return a if a <= 0x7FFFFFFF else ~(a ^ MAX_INT)"},{"question":"Create a function that takes in a list of integers and returns the maximum sum possible using the Kadane's Algorithm.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray using Kadane's Algorithm. Args: nums (list of int): List of integers. Returns: int: The maximum sum of a contiguous subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes an integer as an input and returns the sum of its digits. The function should handle both positive and negative numbers, ignoring the negative sign for the sum calculation.","solution":"def sum_of_digits(number): Returns the sum of the digits of the given number. The negative sign is ignored if the number is negative. number = abs(number) digit_sum = 0 while number > 0: digit_sum += number % 10 number //= 10 return digit_sum"},{"question":"Create a function that takes a list of words and returns the shortest and the longest word in the list.","solution":"def shortest_and_longest(words): Returns the shortest and the longest words in the list of words. Parameters: words (list): List of words (strings). Returns: tuple: (shortest word, longest word) if not words: return (None, None) shortest_word = min(words, key=len) longest_word = max(words, key=len) return (shortest_word, longest_word)"},{"question":"Create a function that takes two lists of integers and returns the count of matching integers, including those that appear multiple times. For example, if the first list is [1, 2, 2, 3] and the second list is [2, 2, 4, 6], the function should return 2, because there are two matching integers (2 and 2). The order of elements in the result does not matter.","solution":"def matching_integers_count(list1, list2): Returns the count of matching integers between two lists, including multiple occurrences. count = 0 list2_copy = list2.copy() for elem in list1: if elem in list2_copy: count += 1 list2_copy.remove(elem) return count"},{"question":"Create a function that takes two arguments, \`numbers\` (a list of integers) and \`before\` (an integer representing a divisor). The function should return the number of elements in \`numbers\` that are divisible by \`before\`. If there are no elements divisible by \`before\`, the function should return 0.","solution":"def count_divisibles(numbers, before): Returns the count of elements in the list \`numbers\` that are divisible by \`before\`. Parameters: numbers (list): A list of integers. before (int): The divisor used to determine divisibility. Returns: int: The count of elements divisible by \`before\`. return sum(1 for number in numbers if number % before == 0)"},{"question":"Create a function that takes an array of integers, and return the minimum number of moves required to sort the array in ascending order. A move is defined as swapping two elements.","solution":"def min_swaps_to_sort(arr): Returns the minimum number of moves required to sort the array in ascending order. A move is defined as swapping two elements. n = len(arr) # Create a list of tuples where each tuple will contain the element and its index arr_pos = [(value, index) for index, value in enumerate(arr)] # Sort the array by array values arr_pos.sort(key=lambda it: it[0]) # To keep track of visited elements visited = {k: False for k in range(n)} # Initialize result ans = 0 # Iterate through the array elements for i in range(n): # If the element is already visited or it is in the correct position if visited[i] or arr_pos[i][1] == i: continue # Initialize variables for cycle detection cycle_size = 0 x = i while not visited[x]: # Mark the element as visited visited[x] = True # Move to the next node x = arr_pos[x][1] cycle_size += 1 # If there is a cycle of size more than 1, then it will take (cycle_size - 1) swaps to sort if cycle_size > 1: ans += (cycle_size - 1) return ans"},{"question":"Create a function that takes an integer as input and returns its equivalent hexadecimal string representation.","solution":"def int_to_hex(n): Converts an integer to its hexadecimal string representation. Args: n (int): The integer to convert. Returns: str: The hexadecimal string representation of the integer. if not isinstance(n, int): raise TypeError(\\"Input must be an integer\\") return hex(n)"},{"question":"Create a function that takes in two values (x and y) and returns their sum.","solution":"def add(x, y): Returns the sum of x and y. return x + y"},{"question":"Create a function that returns the smallest element in an array of integers.","solution":"def find_smallest(arr): Returns the smallest element in an array of integers. Parameters: arr (list): List of integers. Returns: int: The smallest integer in the list. if not arr: raise ValueError(\\"Array must not be empty\\") return min(arr)"},{"question":"Create a function that generates all possible permutations of a given list. Each permutation should be returned as a list of strings, where each string represents a unique permutation. The input list will contain unique elements only.","solution":"from itertools import permutations def generate_permutations(input_list): Generates all possible permutations of the input list. Each permutation is returned as a string. Args: input_list (list): List of unique elements. Returns: list: List of strings, each representing a unique permutation. perm = permutations(input_list) return [''.join(map(str, p)) for p in perm]"},{"question":"Create a function that takes a list of integers and returns a boolean value. The function should return True if the list contains only even numbers, and False otherwise.","solution":"def all_even(numbers): Returns True if all integers in the list are even, False otherwise. return all(number % 2 == 0 for number in numbers)"},{"question":"Create a function that takes in a list and a target number as parameters. The function should return the index of the target number in the list, or -1 if the target number is not in the list.","solution":"def find_index(lst, target): Returns the index of the target number in the list, or -1 if the target number is not in the list. try: return lst.index(target) except ValueError: return -1"},{"question":"Create a function that checks if a given number is prime and returns whether it is prime or not. If the number is not prime, the function should return a list of factors. If the number is prime, it should return a message saying \\"Prime\\".","solution":"def check_prime(n): Check if a given number n is a prime number. If n is a prime number, return the string \\"Prime\\". If n is not a prime number, return a list of its factors. if n <= 1: return [n] # 0 and 1 are not prime, 0 has no positive factors, 1 has itself as a factor factors = [] for i in range(1, n + 1): if n % i == 0: factors.append(i) if len(factors) == 2: # only 1 and n are factors (indicating prime) return \\"Prime\\" else: return factors"},{"question":"Create a function that takes a list of words and returns a dictionary where the keys are the words and the values are the number of times each word appears in the list.","solution":"def word_count(word_list): Returns a dictionary where the keys are the words and the values are the number of times each word appears in the list. Parameters: word_list (list): List of words. Returns: dict: Dictionary with word counts. word_dict = {} for word in word_list: if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 return word_dict"},{"question":"Create a function that takes an array of integers and returns \`True\` if the array is sorted in ascending order and each element is a prime number, otherwise return \`False\`.","solution":"def is_sorted_primes(arr): Returns True if the given array of integers is sorted in ascending order and each element is a prime number, otherwise False. def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True for i in range(1, len(arr)): if arr[i-1] > arr[i] or not is_prime(arr[i]): return False return all(is_prime(num) for num in arr)"},{"question":"Create a function that takes two lists as input and returns the list that is longer. If both lists have the same length, return the first list.","solution":"def longer_list(list1, list2): Returns the longer of the two lists. If both lists have the same length, return the first list. if len(list1) >= len(list2): return list1 else: return list2"},{"question":"Create a function that returns a list of all numbers less than or equal to 50 that are multiples of both 3 and 5. How would you write this function in Python?","solution":"def multiples_of_3_and_5(): Returns a list of all numbers less than or equal to 50 that are multiples of both 3 and 5. return [x for x in range(51) if x % 3 == 0 and x % 5 == 0]"},{"question":"Create a function that takes in two strings, str1 and str2. Your goal is to determine if the two strings are anagrams of each other, not considering spaces.","solution":"def are_anagrams(str1, str2): Determines if two strings are anagrams of each other, ignoring spaces. # Remove spaces and convert to lower case normalized_str1 = ''.join(str1.split()).lower() normalized_str2 = ''.join(str2.split()).lower() # Check if the sorted characters of both strings are the same return sorted(normalized_str1) == sorted(normalized_str2)"},{"question":"Create a function that generates a list of Fibonacci numbers up to a given number \`n\`. The function should take one parameter: \`n\` (an integer representing the upper limit of the Fibonacci sequence to generate). The function should return a list of integers, where each integer is a Fibonacci number up to \`n\`.","solution":"def fibonacci_up_to_n(n): Generates a list of Fibonacci numbers up to a given number n. :param n: int, the upper limit of the Fibonacci sequence to generate. :return: list of integers, each of which is a Fibonacci number up to n. if n < 0: return [] fibonacci_sequence = [] a, b = 0, 1 while a <= n: fibonacci_sequence.append(a) a, b = b, a + b return fibonacci_sequence"},{"question":"Create a function that takes a list of integers as input and returns the sum of all the numbers in the list. You should also handle potential exceptions such as non-integer values and empty list.","solution":"def sum_of_integers(int_list): Returns the sum of all integers in the list. Raises a ValueError if any non-integer values are present in the list or if the list is empty. :param int_list: List of integers :return: Sum of integers in the list if not int_list: raise ValueError(\\"The list is empty.\\") total_sum = 0 for item in int_list: if not isinstance(item, int): raise ValueError(\\"All elements in the list must be integers.\\") total_sum += item return total_sum"},{"question":"Create a function that takes an integer array as input and moves all the even numbers to the left side of the array while keeping the relative order of the even numbers and the odd numbers the same as in the original array. You should solve this problem with an O(n) time complexity and O(1) space complexity, meaning you should not use any additional space for arrays or other data structures.","solution":"def move_evens_left(nums): Moves all even numbers to the left side of the array while keeping the relative order of evens and odds. :param nums: List[int] - List of integers :return: List[int] - Modified list with all evens at the left side n = len(nums) if n <= 1: return nums left = 0 # Pointer to place even numbers for right in range(n): if nums[right] % 2 == 0: nums[left], nums[right] = nums[right], nums[left] left += 1 return nums"},{"question":"Create a function that takes two arrays as input and returns a new array that contains only the elements that are present in both arrays.","solution":"def intersection(array1, array2): Returns an array that contains only the elements that are present in both input arrays. set1 = set(array1) set2 = set(array2) intersection_set = set1.intersection(set2) return list(intersection_set)"},{"question":"Create a function that takes in a positive integer and returns a string of binary digits, with each digit surrounded by brackets. The function should ignore leading zeros in the binary representation.","solution":"def bracketed_binary(n): Returns a string of binary digits with each digit surrounded by brackets. Leading zeros in the binary representation are ignored. :param n: int - a positive integer :return: str - binary representation with brackets if n <= 0: raise ValueError(\\"Input must be a positive integer\\") binary_representation = format(n, 'b') return \\"\\".join(f\\"[{digit}]\\" for digit in binary_representation)"},{"question":"Create a function that reverses a list of integers in place (i.e., without creating a new list). You should not use the built-in reverse or slicing methods.","solution":"def reverse_list_in_place(lst): Reverses a list of integers in place without creating a new list. start = 0 end = len(lst) - 1 while start < end: lst[start], lst[end] = lst[end], lst[start] start += 1 end -= 1 return lst"},{"question":"Create a function that accepts a string and returns whether it contains only whitespace characters. The function should be named \`is_all_whitespace\` and take a single parameter \`input_string\`.","solution":"def is_all_whitespace(input_string): Returns True if the input_string contains only whitespace characters, False otherwise. return input_string.isspace() if input_string else False"},{"question":"Create a function that takes in the coordinates of a point and returns the slope of the line connecting another point with the origin (0,0).","solution":"def calculate_slope(x, y): Calculates the slope of the line connecting the point (x, y) with the origin (0, 0). if x == 0: return float('inf') return y / x"},{"question":"Create a function that takes a list of integers and returns the count of all numbers in the list that are greater than 10.","solution":"def count_greater_than_ten(numbers): Returns the count of numbers in the list that are greater than 10. return sum(1 for number in numbers if number > 10)"},{"question":"Create a function that can capitalize all words in a given string. Python is case-sensitive, and it treats upper and lower case letters differently. However, Python provides a built-in function for string manipulation which can be used to solve this problem. How can we use the \`title()\` function to capitalize all words in a string? What is the syntax of the \`title()\` function? Can you also briefly explain how this function works?","solution":"def capitalize_words(input_string): Capitalizes the first letter of each word in the given string. Parameters: input_string (str): The string to be capitalized. Returns: str: The capitalized string. return input_string.title()"},{"question":"Create a function that takes two strings and checks if the second string is a rotation of the first string. For example, 'waterbottle' is a rotation of 'erbottlewat'.","solution":"def is_rotation(s1, s2): Checks if s2 is a rotation of s1. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"Create a function that takes a string as input and returns a new string that is a palindrome. If the input string is already a palindrome, the function should return the same string. If not, the function should return the input string followed by its reverse, concatenated together.","solution":"def make_palindrome(s): Takes a string and returns a palindrome. If the string is already a palindrome, it returns the same string. Otherwise, it returns the string followed by its reverse. def is_palindrome(s): return s == s[::-1] if is_palindrome(s): return s else: return s + s[::-1]"},{"question":"Create a function that takes a list of integers and returns a dictionary with the integers as keys and the count of occurrences as values. If the list contains non-integer elements, the function should raise a ValueError with an appropriate message.","solution":"def count_occurrences(lst): Takes a list of integers and returns a dictionary with the integers as keys and the count of occurrences as values. Raises a ValueError if the list contains non-integer elements. if not all(isinstance(x, int) for x in lst): raise ValueError(\\"List contains non-integer elements.\\") occurrences = {} for number in lst: if number in occurrences: occurrences[number] += 1 else: occurrences[number] = 1 return occurrences"},{"question":"Create a function that takes the head of a linked list and returns the middle node of that linked list. If there are two middle nodes, it should return the second middle node. The function should run in O(n) time complexity and use only O(1) extra space.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def find_middle_node(head): Returns the middle node of a linked list. If there are two middle nodes, it returns the second middle node. :param head: The head node of the linked list :return: The middle node of the linked list slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow"},{"question":"Create a function that finds the second largest number in a list. Write an efficient method to solve this problem without using built-in functions like sort() or max().","solution":"def find_second_largest(nums): Returns the second largest number in the list nums. if len(nums) < 2: return None # or raise an appropriate error first = second = float('-inf') for num in nums: if num > first: second = first first = num elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Create a function that takes in an integer \`n\` and returns the maximum number of consecutive \`1\`s that can be formed with \`n\` bits if the bits are flipped optimally.","solution":"def max_consecutive_ones(n): Returns the maximum number of consecutive \`1\`s that can be formed with \`n\` bits. :param n: int, the number of bits. :return: int, the maximum number of consecutive \`1\`s that can be formed. return n"},{"question":"Create a function that takes a list of integers and returns a new list with boolean values indicating the primality of each number in the input list. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(n): Checks if a number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def list_prime_indicators(numbers): Takes a list of integers and returns a new list with boolean values indicating the primality of each number. return [is_prime(num) for num in numbers]"},{"question":"Create a function that takes a string as input and returns its reverse. If the string is empty or contains only whitespace, the function should return an empty string. If the string contains any non-alphanumeric characters, they should be removed before reversing the string.","solution":"def reverse_and_sanitize_string(input_str): This function takes a string as input, removes non-alphanumeric characters, and returns the reversed string. If the string is empty or contains only whitespace, it returns an empty string. # Check if the input is empty or only whitespace if not input_str.strip(): return \\"\\" # Remove non-alphanumeric characters cleaned_str = ''.join(char for char in input_str if char.isalnum()) # Reverse the cleaned string reversed_str = cleaned_str[::-1] return reversed_str"},{"question":"Create a function that can take in a list of integers and determine if the list is a valid binary tree. A valid binary tree is a list where each element can only have at most two children. The children of each element can either be a number representing the child, or None if there is no child.","solution":"def is_valid_binary_tree(tree): Determine if the given list represents a valid binary tree. A valid binary tree is a list where each element can only have at most two children. if not tree: return True for node in tree: if not (isinstance(node, (list, tuple)) and len(node) <= 3): return False parent, left_child, right_child = node[0], node[1] if len(node) > 1 else None, node[2] if len(node) > 2 else None if left_child is not None and not isinstance(left_child, int): return False if right_child is not None and not isinstance(right_child, int): return False return True"},{"question":"Create a function that takes a list of integers and returns a new list containing the square of each integer from the original list. You need to ensure that your function is well-documented and includes type hints for the parameters and return value.","solution":"from typing import List def square_list(numbers: List[int]) -> List[int]: Takes a list of integers and returns a new list containing the square of each integer. :param numbers: List of integers to be squared. :return: List of squared integers. return [number ** 2 for number in numbers]"},{"question":"Create a function that takes an integer as an argument and returns the integer with its digits reversed. If the reversed integer overflows, return 0. The function should handle both positive and negative numbers.","solution":"def reverse_integer(x): This function takes an integer x as input and returns the integer with its digits reversed. If the reversed integer overflows (i.e., is outside the range of a 32-bit signed integer), it returns 0. The function handles both positive and negative numbers. INT_MAX = 2**31 - 1 INT_MIN = -2**31 sign = -1 if x < 0 else 1 x *= sign reversed_x = int(str(x)[::-1]) reversed_x *= sign if reversed_x < INT_MIN or reversed_x > INT_MAX: return 0 return reversed_x"},{"question":"Create a function that retrieves the nth Fibonacci number using an iterative approach. The function should be named \`fibonacci_nth\` and take a single argument \`n\`, where \`n\` is the position in the Fibonacci sequence. The function should return the nth Fibonacci number.","solution":"def fibonacci_nth(n): Returns the nth Fibonacci number using an iterative approach. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Create a function that takes a list of numbers and returns the product of all the positive numbers in the list. If there are no positive numbers, return 0.","solution":"def product_of_positives(numbers): Returns the product of all positive numbers in the list. If no positive numbers are found, returns 0. product = 1 found_positive = False for num in numbers: if num > 0: product *= num found_positive = True return product if found_positive else 0"},{"question":"Create a function that , given an integer \`n\`, returns the last digit of the sum of the first \`n\` Fibonacci numbers.","solution":"def get_last_digit_of_fibonacci_sum(n): Returns the last digit of the sum of the first n Fibonacci numbers. if n <= 0: return 0 # Last digit of Fibonacci sequence repeats every 60 numbers pisano_period = 60 last_digit_fib = [0, 1] for i in range(2, pisano_period): last_digit_fib.append((last_digit_fib[-1] + last_digit_fib[-2]) % 10) # Sum of the first n Fibonacci numbers is Fib(n + 2) - 1 n_mod = (n + 2) % pisano_period last_digit_sum = (last_digit_fib[n_mod] - 1) % 10 return last_digit_sum"},{"question":"Create a function that accepts a list of mixed data types and returns a new list containing only the elements that are instances of a given type, T, while maintaining their order.","solution":"def filter_by_type(elements, T): Filters a list based on a specified type T. Parameters: elements (list): The list to be filtered. T (type): The type to filter by. Returns: list: A list containing only elements of type T. return [element for element in elements if isinstance(element, T)]"},{"question":"Create a function that takes a number as an input and returns the number with its digits reversed. How can we solve this problem by converting the number to a string and then reversing it?","solution":"def reverse_number(n): Reverses the digits of the input number n. Args: n (int): The number to be reversed. Returns: int: The number with its digits reversed. # Handle the sign of the number sign = -1 if n < 0 else 1 # Convert the number to a string, strip the sign if necessary, and reverse the string reversed_str = str(abs(n))[::-1] # Convert the reversed string back to an integer and apply the sign reversed_number = sign * int(reversed_str) return reversed_number"},{"question":"Create a function that takes two strings and returns the longest common prefix (LCP). If there is no common prefix, return an empty string.","solution":"def longest_common_prefix(str1, str2): Returns the longest common prefix of two strings. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: str: The longest common prefix of the two strings. min_len = min(len(str1), len(str2)) for i in range(min_len): if str1[i] != str2[i]: return str1[:i] return str1[:min_len]"},{"question":"Create a function that takes a string 's' as an argument and returns the count of distinct characters in it. The string 's' consists of lowercase English letters and may contain spaces.","solution":"def count_distinct_characters(s): Returns the count of distinct characters in the string s. Spaces are considered as characters here. return len(set(s))"},{"question":"Create a function that calculates the sum of all the numbers in a list. I would like a version of this function that handles lists containing a mix of integers and floating-point numbers. The function should work with input validation to ensure that the input is a list, and each element in the list is either an integer or a floating-point number.","solution":"def sum_of_numbers(num_list): Returns the sum of all numbers in the list. The list can contain both integers and floating-point numbers. Args: num_list (list): A list containing integers and/or floating-point numbers. Returns: float: The sum of all numbers in the list. Raises: TypeError: If the input is not a list or if any element in the list is not an integer or a floating-point number. if not isinstance(num_list, list): raise TypeError(\\"Input must be a list.\\") total = 0 for num in num_list: if not isinstance(num, (int, float)): raise TypeError(\\"All elements in the list must be integers or floating-point numbers.\\") total += num return total"},{"question":"Create a function that takes a non-empty list of words and returns a function that, when called without arguments, returns the next word in the list. The function should cycle through the words indefinitely.","solution":"def create_word_cycler(words): Creates a word cycler function from the input list of words. Parameters: words (list): A non-empty list of words. Returns: function: A function that, when called, returns the next word in the list, cycling through the words indefinitely. index = 0 def cycler(): nonlocal index word = words[index] index = (index + 1) % len(words) return word return cycler"},{"question":"Create a function that , given an integer n, returns the sum of all even numbers from 1 to n. For example, if n = 10, the sum of all even numbers from 1 to 10 is 2 + 4 + 6 + 8 + 10 = 30.","solution":"def sum_of_even_numbers(n): Returns the sum of all even numbers from 1 to n. return sum(i for i in range(1, n+1) if i % 2 == 0)"},{"question":"Create a function that returns the maximum profit from a given list of stock prices where you can make at most two transactions. You can only hold at most one share at a time and you can't hold a share while you buy another.","solution":"def maxProfit(prices): Returns the maximum profit from at most two transactions. if len(prices) < 2: return 0 # dp array to store the maximum profit by going through the list twice. n = len(prices) dp1 = [0] * n dp2 = [0] * n # First pass: find the max profit up to each day with one transaction min_price = prices[0] for i in range(1, n): dp1[i] = max(dp1[i - 1], prices[i] - min_price) min_price = min(min_price, prices[i]) # Second pass: find the max profit after each day with one additional transaction max_price = prices[-1] for i in range(n - 2, -1, -1): dp2[i] = max(dp2[i + 1], max_price - prices[i]) max_price = max(max_price, prices[i]) # Max profit by summing up the two transactions max_profit = 0 for i in range(n): max_profit = max(max_profit, dp1[i] + dp2[i]) return max_profit"},{"question":"Create a function that generates a random UUID (Universally Unique Identifier) in Python.","solution":"import uuid def generate_uuid(): Generates a random UUID. Returns: str: A string representation of the generated UUID. return str(uuid.uuid4())"},{"question":"Create a function that returns true if the input is a numeric string, false otherwise. A numeric string should contain only digits and potentially a leading '+' or '-' sign.","solution":"def is_numeric_string(s): Returns true if the input string is a numeric string, false otherwise. A numeric string should contain only digits and potentially a leading '+' or '-' sign. if not s: return False if s[0] in ('+', '-') and s[1:].isdigit(): return True return s.isdigit()"},{"question":"Create a function that receives a string and returns an integer. This function should sort the characters of the string in ascending numeric value. If the characters represent numbers, they should be sorted as integers. If the characters represent letters, they should be sorted based on their ASCII values.","solution":"def sort_string_chars(s): Sorts characters of the string in ascending numeric value. Numbers are sorted as integers and letters are sorted based on their ASCII values. :param s: A string containing characters to be sorted :return: A sorted string with characters in ascending order # Split characters into digits and non-digits digits = sorted([char for char in s if char.isdigit()]) non_digits = sorted([char for char in s if not char.isdigit()]) # Combine the sorted lists sorted_chars = digits + non_digits return ''.join(sorted_chars)"},{"question":"Create a function that takes in an integer n, and returns a list of all numbers between 1 and n (inclusive) that are powers of 2.","solution":"def powers_of_2(n): Returns a list of all numbers between 1 and n (inclusive) that are powers of 2. result = [] power = 1 while power <= n: result.append(power) power *= 2 return result"},{"question":"Create a function that generates a list of integers based on the following criteria: For each number from 1 to 100, if the number is divisible by 3, add \\"Fizz\\" to the list; if divisible by 5, add \\"Buzz\\"; if divisible by both 3 and 5, add \\"FizzBuzz\\". If the number is not divisible by 3 or 5, add the number itself to the list. Return the list as the final output.","solution":"def fizz_buzz(): Generates a list based on divisibility criteria for numbers 1 to 100. Returns: list: A list of integers and strings based on the criteria specified. result = [] for i in range(1, 101): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(i) return result"},{"question":"Create a function that finds the maximum sum of a subarray of a given size 'k'. The function should take two parameters, a list of integers and an integer 'k'. It should return the maximum sum of any contiguous subarray of size 'k'.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of any contiguous subarray of size 'k'. Parameters: arr (list of int): The list of integers. k (int): The size of the subarray. Returns: int: The maximum sum of any contiguous subarray of size 'k'. if len(arr) < k or k <= 0: return 0 # Return 0 if array length is less than k, or k is zero or negative # Compute the sum of the first subarray of size k max_sum = current_sum = sum(arr[:k]) # Use a sliding window to calculate the sum of subarrays of size k for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that takes a string and a character as input and returns the position of the last occurrence of the character in the string. If the character is not found, return -1.","solution":"def last_occurrence(s, char): Returns the position of the last occurrence of \`char\` in the string \`s\`. If the character is not found, returns -1. return s.rfind(char)"},{"question":"Create a function that calculates the sum of all even Fibonacci numbers less than or equal to a given number \`n\`. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def sum_even_fibonacci(n): Returns the sum of all even Fibonacci numbers less than or equal to n. if n < 2: return 0 a, b = 0, 1 even_sum = 0 while b <= n: if b % 2 == 0: even_sum += b a, b = b, a + b return even_sum"},{"question":"Create a function that takes three parameters: \`a\`, \`b\`, and \`c\`. The function should check if the three parameters are integers and calculate the result of the expression \`a*b + c\`. If \`a\`, \`b\`, or \`c\` are not integers, the function should raise a \`TypeError\`.","solution":"def calculate_expression(a, b, c): Checks if the parameters a, b, and c are integers and calculates the result of a*b + c. Raises a TypeError if any of the parameters is not an integer. Parameters: a (int): The first integer. b (int): The second integer. c (int): The third integer. Returns: int: The result of the expression a*b + c. if not all(isinstance(x, int) for x in (a, b, c)): raise TypeError(\\"All parameters must be integers.\\") return a * b + c"},{"question":"Create a function that takes a list of strings and returns a new list containing the substrings from the given string list, but only if the substrings consonants are more than vowels.","solution":"def is_consonant(ch): Check if a character is a consonant. return ch.lower() in 'bcdfghjklmnpqrstvwxyz' def count_consonants_and_vowels(s): Return a tuple with counts of consonants and vowels in a given string. consonants_count = sum(1 for ch in s if is_consonant(ch)) vowels_count = sum(1 for ch in s if ch.lower() in 'aeiou') return consonants_count, vowels_count def filter_strings_with_more_consonants(strings): Return a list of strings where the number of consonants is greater than the number of vowels. result = [] for s in strings: consonants, vowels = count_consonants_and_vowels(s) if consonants > vowels: result.append(s) return result"},{"question":"Create a function that checks if an array is sorted in non-decreasing order. If not, sort the array and then return it. If the array is already sorted, simply return the array as is.","solution":"def ensure_sorted(arr): Checks if the array is sorted in non-decreasing order. If not, sorts the array. Returns the array. if arr == sorted(arr): return arr else: return sorted(arr)"},{"question":"Create a function that identifies if a given number is an Armstrong number (also known as a narcissistic number). An Armstrong number is an n-digit number that is equal to the sum of its digits each raised to the power of n. For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.","solution":"def is_armstrong_number(number): Checks if a number is an Armstrong number. An Armstrong number is a number that is the sum of its digits each raised to the power of the number of digits. Args: number (int): The number to check. Returns: bool: True if the number is an Armstrong number, False otherwise. if number < 0: return False digits = [int(digit) for digit in str(number)] n = len(digits) sum_of_powers = sum(digit ** n for digit in digits) return sum_of_powers == number"},{"question":"Create a function that is passed \`n\` (a positive integer) and returns a string which contains the binary representation of \`n\` with a maximum of 8 digits. If the binary representation of \`n\` is shorter than 8 digits, it should be padded with leading zeros to make it 8 digits long.","solution":"def binary_representation(n): Returns the binary representation of a positive integer n with a maximum of 8 digits, padded with leading zeros if necessary to make it 8 digits long. if n < 0: raise ValueError(\\"n must be a positive integer\\") binary_string = format(n, '08b') if len(binary_string) > 8: raise ValueError(\\"n cannot be represented in 8 binary digits\\") return binary_string"},{"question":"Create a function that generates a list of random integers within a given range [min, max]. The function should accept parameters for the minimum and maximum values (inclusive) and return a list of 10 random integers within that range.","solution":"import random def generate_random_integers(min_val, max_val, count=10): Generates a list of random integers within a given range [min, max]. Parameters: - min_val: The minimum value (inclusive). - max_val: The maximum value (inclusive). - count: The number of random integers to generate (default is 10). Returns: List of random integers within the specified range. if min_val > max_val: raise ValueError(\\"min_val should not be greater than max_val\\") return [random.randint(min_val, max_val) for _ in range(count)]"},{"question":"Create a function that takes three arguments: a list of numbers, the starting index, and ending index. The function should return the sum of all the numbers between the starting and ending indices (inclusive). If the starting index is greater than the ending index, the function should return 0.","solution":"def sum_between_indices(numbers, start, end): Returns the sum of all the numbers between the starting index and ending index (inclusive). If the starting index is greater than the ending index, returns 0. :param numbers: List of numbers :param start: Starting index :param end: Ending index :return: Sum of numbers between start and end indices inclusive if start > end: return 0 return sum(numbers[start:end+1])"},{"question":"Create a function that accepts a list of strings and returns a tuple containing the length of the longest string in the list along with the longest string itself. If there are multiple strings with the same maximum length, return the first one encountered.","solution":"def longest_string(lst): Returns a tuple containing the length of the longest string in the list along with the longest string itself. Parameters: lst (list): A list of strings Returns: (int, str): A tuple containing the length of the longest string and the longest string itself if not lst: return (0, \\"\\") longest = lst[0] for string in lst: if len(string) > len(longest): longest = string return (len(longest), longest)"},{"question":"Create a function that takes a string as input and returns the output of that function after applying each character with the associated ASCII value increases by 1. For example, if the input is \\"hello\\", the output should be \\"ifmmp\\".","solution":"def shift_ascii_by_one(s): Takes a string s and shifts each character's ASCII value by one. Parameters: s (str): The input string. Returns: str: A new string with each character's ASCII value increased by one. return ''.join(chr(ord(char) + 1) for char in s)"},{"question":"Create a function that takes a positive integer \`n\` as input and returns an array of the exact powers of 2 from 2^1 to 2^n (inclusive).","solution":"def powers_of_two(n): Returns an array of the exact powers of 2 from 2^1 to 2^n (inclusive). Parameters: n (int): A positive integer indicating the highest power of 2 to include in the array. Returns: list: List of powers of 2 from 2^1 to 2^n. return [2 ** i for i in range(1, n + 1)]"},{"question":"Create a function that finds the maximum sum of a contiguous subarray within a one-dimensional array of positive and negative integers.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray within the given list of integers. Args: nums (list of int): A list of integers containing both positive and negative numbers. Returns: int: The maximum sum of the contiguous subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that generates a Fibonacci sequence and then returns it as an array.","solution":"def generate_fibonacci(n): Generates a Fibonacci sequence up to the nth element and returns it as a list. :param n: number of elements in the Fibonacci sequence to generate :return: list containing the Fibonacci sequence up to the nth element if n <= 0: return [] fibonacci_sequence = [0, 1] while len(fibonacci_sequence) < n: fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2]) return fibonacci_sequence[:n]"},{"question":"Create a function that takes two parameters, a string and a number. The function should return the string repeated number times. If the string is empty or the number is less than 1, the function should return an empty string. Additionally, handle cases where the number is not an integer.","solution":"def repeat_string(s, num): Repeats the string s, num times. If the string is empty or the number is less than 1, returns an empty string. If num is not an integer, returns an empty string. Args: s (str): The input string. num (int): The number of times to repeat the string. Returns: str: The repeated string or an empty string based on the conditions. if not isinstance(num, int) or num < 1 or not s: return \\"\\" return s * num"},{"question":"Create a function that generates all subsets of a given integer array using the backtracking approach in Python.","solution":"def subsets(nums): Generates all subsets of a given list of integers using backtracking. :param nums: List[int] - List of integers :return: List[List[int]] - List of all subsets def backtrack(start, path): result.append(path[:]) for i in range(start, len(nums)): path.append(nums[i]) backtrack(i + 1, path) path.pop() result = [] backtrack(0, []) return result"},{"question":"Create a function that reverses a string in Python. Can you also provide a simple test case to verify that the function works correctly?","solution":"def reverse_string(s): Returns the reversed string of s. return s[::-1]"},{"question":"Create a function that takes a list of integers, and returns a boolean indicating whether the list is sorted in ascending order, descending order, or neither.","solution":"def is_sorted(lst): Returns True if the list is sorted in either ascending or descending order. Otherwise, returns False. if lst == sorted(lst) or lst == sorted(lst, reverse=True): return True return False"},{"question":"Create a function that adds two numbers and returns the sum. This function should be compatible with Python 3.x and follow PEP8 style guide. The function should also accept two integers as arguments and return an integer as a result.","solution":"def add_two_numbers(a, b): Returns the sum of a and b. Parameters: a (int): The first integer to be added. b (int): The second integer to be added. Returns: int: The sum of the two integers. return a + b"},{"question":"Create a function that takes a list of numbers and returns a dictionary where the keys are the numbers and the values are their respective counts. Additionally, the function should include a mode and range calculation within the dictionary as additional values. The mode is the number that appears most frequently in the list, and the range is the difference between the largest and smallest numbers in the list. The function should handle empty lists gracefully by returning a message indicating that no calculations can be performed.","solution":"from collections import Counter from typing import List, Dict, Union def list_statistics(numbers: List[int]) -> Union[Dict[int, int], str]: Given a list of numbers, returns a dictionary where the keys are the numbers and the values are their respective counts. Additionally, includes 'mode' and 'range' as keys with the mode of the list and the range of the list as values. if not numbers: return \\"No calculations can be performed on an empty list.\\" counts = Counter(numbers) mode = counts.most_common(1)[0][0] range_value = max(numbers) - min(numbers) counts['mode'] = mode counts['range'] = range_value return dict(counts)"},{"question":"Create a function that automatically converts a string into a list of integers using list comprehension. How can this be done to handle a string containing numbers separated by spaces)?","solution":"def string_to_int_list(s): Converts a string containing numbers separated by spaces into a list of integers using list comprehension. Parameters: s (str): A string containing numbers separated by spaces. Returns: list: A list of integers. return [int(x) for x in s.split()]"},{"question":"Create a function that takes an array of integers and returns the number of elements that are greater than a specified threshold.","solution":"def count_greater_than(arr, threshold): Returns the number of elements in 'arr' that are greater than 'threshold'. Parameters: arr (list of int): List of integers. threshold (int): The threshold value. Returns: int: Number of elements greater than the threshold. return sum(1 for x in arr if x > threshold)"},{"question":"Create a function that reads a file and returns the number of words in the file. Assume the file contains only one word per line and each line does not exceed 1,000 characters. The function should handle cases where a line is empty. Also, the function should count each occurrence of a word even if it appears multiple times in the file.","solution":"def count_words_in_file(file_path): Reads a file and returns the number of words in the file. Assumes the file contains only one word per line. Each line does not exceed 1,000 characters. word_count = 0 with open(file_path, 'r') as file: for line in file: # Strip the line of any leading/trailing spaces and check if it's not empty if line.strip(): word_count += 1 return word_count"},{"question":"Create a function that takes in a string and prints the string in uppercase and then in lowercase.","solution":"def print_upper_and_lowercase(s): Prints the string in uppercase and then in lowercase. print(s.upper()) print(s.lower())"},{"question":"Create a function that takes a list of integers as input and returns a new list containing only the prime numbers from the original list. For example, given a list [1, 2, 3, 4, 5, 6], the function should return [2, 3, 5].","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a new list containing only the prime numbers from the original list. return [num for num in numbers if is_prime(num)]"},{"question":"Create a function that takes a number as input and returns the sum of its digits. If the number is negative, create an exception (throw an exception) with the message \\"Negative numbers are not allowed\\".","solution":"def sum_of_digits(number): Returns the sum of the digits of the input number. If the number is negative, raises an exception with the message \\"Negative numbers are not allowed\\". if number < 0: raise ValueError(\\"Negative numbers are not allowed\\") return sum(int(digit) for digit in str(number))"},{"question":"Create a function that takes an integer as input and returns the minimum number of coins needed to make up that amount. You can use coins of denominations 1, 5, 10, and 25.","solution":"def min_coins(amount): Returns the minimum number of coins needed to make up the given amount. Denominations are 1, 5, 10, 25. denominations = [25, 10, 5, 1] count = 0 for coin in denominations: count += amount // coin amount %= coin return count"},{"question":"Create a function that takes a string and an integer as inputs and returns True if the substring of the input string from the 0th index to the given integer is present in a list, otherwise return False. The function should also handle the case where the input string is empty or the index is negative.","solution":"def substring_in_list(s, index, lst): Checks if the substring of \`s\` from 0th index to \`index\` is present in \`lst\`. :param s: Input string :param index: Integer index :param lst: List of strings :return: True if the substring is in the list, False otherwise if index < 0 or not s: return False substring = s[:index] return substring in lst"},{"question":"Create a function that receives a list of integers and a target integer. The function should return a tuple of two indices in the list such that the integers at these indices add up to the target number.","solution":"def two_sum(nums, target): Returns a tuple of two indices in the list such that the integers at these indices add up to the target integer. Parameters: nums (list of int): The list of integers. target (int): The target integer. Returns: tuple: A tuple of two indices. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return None"},{"question":"Create a function that converts all lowercase letters in a text file to uppercase letters and writes the result back to the same file.","solution":"def convert_lowercase_to_uppercase(filename): Converts all lowercase letters in a text file to uppercase letters and writes the result back to the same file. Args: filename (str): The name of the file to be processed. with open(filename, 'r') as file: content = file.read() updated_content = content.upper() with open(filename, 'w') as file: file.write(updated_content)"},{"question":"Create a function that takes a list of integers as an input and returns the sum of the squares of these integers. For example, if the input list is \`[1, 2, 2]\`, the output should be \`9\` because (1^2 + 2^2 + 2^2 = 9).","solution":"def sum_of_squares(lst): Returns the sum of the squares of the integers in the input list. :param lst: List of integers :return: Sum of the squares of the integers return sum(x**2 for x in lst)"},{"question":"Create a function that takes a list of integers and returns a new list containing the odd-indexed elements from the original list. If the original list is empty or contains an even number of elements, the returned list should be empty.","solution":"def odd_indexed_elements(lst): Returns a list containing the elements at odd indices from the original list. If the original list is empty or has an even number of elements, an empty list is returned. if not lst or len(lst) % 2 == 0: return [] return [lst[i] for i in range(len(lst)) if i % 2 != 0]"},{"question":"Create a function that writes data from a given iterable to a file in binary mode. The function should take an iterable and a file path as input and write each element of the iterable to the file as binary data.","solution":"def write_iterable_to_binary_file(iterable, file_path): Writes data from a given iterable to a file in binary mode. Parameters: iterable (iterable): An iterable containing data to write. file_path (str): The path to the file where the data should be written. with open(file_path, 'wb') as file: for element in iterable: # Assuming elements are integers or can be converted directly to bytes file.write(element.to_bytes((element.bit_length() + 7) // 8, 'big') or b'0')"},{"question":"Create a function that generates an array of integers of Fibonacci sequence up to a given limit. The function should take an integer \`n\` as an argument and return an array containing the first \`n\` numbers of the Fibonacci sequence.","solution":"def fibonacci(n): Generates an array of the first n integers of the Fibonacci sequence. Parameters: n (int): The number of elements in the Fibonacci sequence to be generated. Returns: list: A list containing the first n numbers of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Create a function that takes a string as input, and returns the string with all vowels removed. But instead of returning an empty string when there are no vowels, the function should return the original string. If the input string is empty, the function should also return the original string.","solution":"def remove_vowels(s): Returns the input string with all vowels removed. If there are no vowels or the input string is empty, returns the original string. vowels = \\"aeiouAEIOU\\" result = ''.join([char for char in s if char not in vowels]) return result if result else s"},{"question":"Create a function that takes a 2D array as input and returns the sum of all the elements in the array.","solution":"def sum_2d_array(arr): Returns the sum of all elements in a 2D array. Parameters: arr (list of list of int/float): 2D array to sum up Returns: int/float: the sum of all elements in the array total = 0 for sublist in arr: for item in sublist: total += item return total"},{"question":"Create a function that generates a list of numbers from 1 to n, inclusive, but excludes numbers that are divisible by 3 or contain the digit 3.","solution":"def generate_special_list(n): Generates a list of numbers from 1 to n, but excludes numbers that are divisible by 3 or contain the digit 3. result = [] for i in range(1, n+1): if i % 3 != 0 and '3' not in str(i): result.append(i) return result"},{"question":"Create a function that takes a list of integers and returns a list where each element is the product of pairs of integers from the input list. If the input list has an odd number of elements, the last remaining element should be doubled in the output list.","solution":"def product_of_pairs(int_list): Given a list of integers, return a new list where each element is the product of pairs of integers from the input list. If the input list has an odd number of elements, the last remaining element should be doubled in the output list. result = [] length = len(int_list) for i in range(0, length - 1, 2): result.append(int_list[i] * int_list[i + 1]) if length % 2 != 0: # if the length of the list is odd result.append(int_list[-1] * 2) return result"},{"question":"Create a function that splits a string into two halves. If the length of the string is odd, the first half should contain the middle character. How can you implement this in Python?","solution":"def split_string(s): Splits a string into two halves. If the length is odd, the first half contains the middle character. Returns a tuple of the two halves. n = len(s) if n % 2 == 0: first_half = s[:n // 2] second_half = s[n // 2:] else: first_half = s[:n // 2 + 1] second_half = s[n // 2 + 1:] return first_half, second_half"},{"question":"Create a function that returns the maximum sum of non-adjacent elements in an array.","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of non-adjacent elements in the array. if not nums: return 0 incl = 0 excl = 0 for num in nums: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"Create a function that converts a list of strings into a list of integers. Each string represents a number in base 10. You will receive the list of strings as a parameter and return the list of integers.","solution":"def convert_strings_to_integers(string_list): Converts a list of strings representing numbers into a list of integers. Parameters: string_list (list): A list of strings where each string is a base 10 number. Returns: list: A list of integers. return [int(s) for s in string_list]"},{"question":"Create a function that calculates the sum of all numbers between 0 and a given number n, and returns the total sum.","solution":"def sum_to_n(n): Returns the sum of all numbers between 0 and n inclusive. if n < 0: return 0 return sum(range(n + 1))"},{"question":"Create a function that takes a dictionary as input and returns the dictionary sorted by its values. The function should work with Python 3.9 or later which supports dictionary and set reconciliation.","solution":"def sort_dict_by_values(d): Returns a new dictionary sorted by its values. Parameters: d (dict): The dictionary to be sorted. Returns: dict: A new dictionary sorted by the values of the original dictionary. sorted_dict = {k: v for k, v in sorted(d.items(), key=lambda item: item[1])} return sorted_dict"},{"question":"Create a function that returns the middle element in a list. If the list has an odd number of elements, return the middle one. If the list has an even number of elements, return the second middle one.","solution":"def middle_element(lst): Returns the middle element in a list. If the list has an even number of elements, return the second middle one. if not lst: raise ValueError(\\"List must not be empty\\") mid_index = len(lst) // 2 return lst[mid_index]"},{"question":"Create a function that takes an array \`A\` of integers and returns the maximum product of three different numbers in \`A\`.","solution":"def maximum_product_of_three(A): Returns the maximum product of three different numbers in the list A. A.sort() return max(A[0]*A[1]*A[-1], A[-1]*A[-2]*A[-3])"},{"question":"Create a function that takes an integer as an input and prints out its prime factors. What should be the behavior of the function if the input number is not a prime?","solution":"def prime_factors(n): Returns a list of prime factors of the integer n. i = 2 factors = [] while i * i <= n: if n % i: i += 1 else: n //= i factors.append(i) if n > 1: factors.append(n) return factors"},{"question":"Create a function that generates all possible target strings from the given source string by replacing certain characters.","solution":"from itertools import product def generate_strings(source, replace_dict): Generates all possible target strings from the given source string by replacing certain characters according to the replace_dict. Parameters: - source (str): a string containing the source characters. - replace_dict (dict): a dictionary where keys are characters in the source string and values are list of characters to replace the key with. Returns: - list: a list of all possible target strings. # Create a list of options for each character in the source string options = [replace_dict.get(char, [char]) for char in source] # Use itertools.product to generate all combinations all_combinations = product(*options) # Join the tuples into strings result = [''.join(combination) for combination in all_combinations] return result"},{"question":"Create a function that takes a string as a parameter and returns the string with all uppercase letters converted to lowercase and all lowercase letters converted to uppercase. For example, if the input string is \\"helloWorld\\", the function should return \\"HELLOwORLD\\".","solution":"def swap_case(s): Returns the string with all uppercase letters converted to lowercase and all lowercase letters converted to uppercase. return s.swapcase()"},{"question":"Create a function that takes in two parameters, an array and a target sum. The function should return all unique combinations of elements in the array that add up to the target sum. The order of the combinations does not matter, but the order of the elements in the combination does.","solution":"def unique_combinations(arr, target): Returns all unique combinations of elements in the array that add up to the target sum. Parameters: arr (list): List of integers. target (int): Target sum. Returns: list: List of lists, each containing a unique combination of elements that sum to target. def backtrack(start, path, target): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(arr)): # To avoid duplicates, skip the same elements if i > start and arr[i] == arr[i - 1]: continue backtrack(i + 1, path + [arr[i]], target - arr[i]) arr.sort() # Sort to facilitate easier duplicate handling result = [] backtrack(0, [], target) return result"},{"question":"Create a function that takes in a string and an integer as input, and returns a new string where the input string is repeated 'n' times. For example, if the input string is \\"hello\\" and the integer is 3, the output should be \\"hellohellohello\\".","solution":"def repeat_string(s, n): Returns a new string where the input string s is repeated n times. :param s: Input string to be repeated. :param n: Number of times to repeat the string. :return: New string with input string repeated n times. return s * n"},{"question":"Create a function that removes every occurrence of a given value from a list and returns the modified list.","solution":"def remove_occurrences(lst, value): Removes every occurrence of the given value from the list and returns the modified list. Parameters: lst (list): The list from which to remove the value. value: The value to remove from the list. Returns: list: The modified list with the value removed. return [x for x in lst if x != value]"},{"question":"Create a function that will generate a string of 10 random digits and return it.","solution":"import random def generate_random_digits(): Returns a string of 10 random digits. return ''.join(random.choices('0123456789', k=10))"},{"question":"Create a function that takes two arrays of numbers, A and B, as input. The function should return a new array that contains the sum of the corresponding elements from A and B. If the arrays are of different lengths, the function should only sum the elements that exist in both arrays. For example, if A = [1, 2, 3, 4] and B = [5, 6, 7], the function should return [6, 8, 10] because the last element of A does not have a corresponding element in B.","solution":"def sum_arrays(A, B): Returns a new array with the sum of the corresponding elements of A and B. If A and B are of different lengths, only sum the elements that exist in both arrays. min_length = min(len(A), len(B)) return [A[i] + B[i] for i in range(min_length)]"},{"question":"Create a function that reads a CSV file and returns the number of rows in it. The function should be written in Python. You can assume that the CSV file is properly formatted and does not contain any errors.","solution":"import csv def count_csv_rows(filename): Reads a CSV file and returns the number of rows in it. Parameters: filename (str): The path to the CSV file. Returns: int: The number of rows in the CSV file. with open(filename, mode='r', newline='') as file: reader = csv.reader(file) row_count = sum(1 for row in reader) return row_count"},{"question":"Create a function that takes two parameters, an array of integers and a single integer n. The function will return a new array containing the first n elements of the input array. If n is greater than the length of the array, return the entire array.","solution":"def get_first_n_elements(arr, n): Returns the first n elements of the input array. If n is greater than the length of the array, return the entire array. Parameters: arr (list): An array of integers. n (int): A single integer representing the number of elements to return. Returns: list: A new array containing the first n elements of arr. return arr[:n]"},{"question":"Create a function that converts a binary string to an integer. The binary string consists of only '1's and '0's. Assume the binary string is non-empty and does not contain any leading zeros. You should handle cases where the binary string represents a large number. How would you approach this problem in Python?","solution":"def binary_to_integer(binary_string): Converts a binary string to an integer. Args: binary_string (str): A string representation of a binary number. Returns: int: The integer representation of the binary string. return int(binary_string, 2)"},{"question":"Create a function that takes in a string and returns the most frequent character in the string. If there are multiple characters with the same highest frequency, return the character that appears first in the string. If the string is empty, return an empty string. For example, the function should return 'a' for the string 'ababc'.","solution":"def most_frequent_char(s): Returns the most frequent character in the string s. If there are multiple characters with the same frequency, returns the one that appears first. If the string is empty, returns an empty string. if not s: return \\"\\" char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 max_freq = max(char_count.values()) for char in s: if char_count[char] == max_freq: return char"},{"question":"Create a function that takes a list of integers and returns a new list where each element is multiplied by 2. If the original element is even, it should be squared instead.","solution":"def process_list(integers): Given a list of integers, return a new list where each element is multiplied by 2. If the original element is even, it should be squared. :param integers: List of integers :return: New processed list result = [] for i in integers: if i % 2 == 0: result.append(i**2) else: result.append(i*2) return result"},{"question":"Create a function that takes an integer as input and returns the integer representing the reverse of the input integer. For example, if the input is 123, the output should be 321. If the input is -123, the output should be -321. If the input is 120, the output should be 21. Note that you should handle the case where the reversed integer overflows the 32-bit signed integer range, and in such cases, you should return 0.","solution":"def reverse_integer(x): Returns the reversed integer of the input integer x. Returns 0 if the reversed integer overflows 32-bit signed integer range. INT_MIN, INT_MAX = -2**31, 2**31 - 1 sign = -1 if x < 0 else 1 x *= sign reversed_x = 0 while x != 0: digit = x % 10 x //= 10 # Check for overflow if reversed_x > (INT_MAX - digit) / 10: return 0 reversed_x = reversed_x * 10 + digit return sign * reversed_x"},{"question":"Create a function that takes a list of integers as input and returns the product of the sum of the first half of the list and the sum of the second half of the list.","solution":"def product_of_sums(lst): This function takes a list of integers and returns the product of the sum of the first half of the list and the sum of the second half of the list. mid = len(lst) // 2 first_half_sum = sum(lst[:mid]) second_half_sum = sum(lst[mid:]) return first_half_sum * second_half_sum"},{"question":"Create a function that takes a string \`s\` as input and returns a new string that consists only of characters that appear in the original string exactly once. The function should maintain the original order of these unique characters. If there are no characters that appear only once, return an empty string.","solution":"def unique_chars(s): Returns a string that consists only of characters that appear exactly once in the input string, maintaining the original order. from collections import Counter char_count = Counter(s) return ''.join([char for char in s if char_count[char] == 1])"},{"question":"Create a function that converts a hexadecimal string to its decimal equivalent. The function should take a single string argument, which is the hexadecimal number, and return the equivalent decimal number as an integer.","solution":"def hex_to_decimal(hex_string): Converts a hexadecimal string to its decimal equivalent. Parameters: hex_string (str): The hexadecimal number as a string. Returns: int: The decimal equivalent of the hexadecimal number. try: return int(hex_string, 16) except ValueError: return None # or raise an exception, depending on desired behavior"},{"question":"Create a function that takes in a list of integers and returns the product of all the elements. If the list is empty, return 1.","solution":"def product_of_elements(int_list): Returns the product of all elements in the list. If the list is empty, returns 1. product = 1 for number in int_list: product *= number return product"},{"question":"Create a function that negates a boolean value. If the input is \`True\`, return \`False\`. If the input is \`False\`, return \`True\`.","solution":"def negate_boolean(value): Returns the negation of the boolean value. If the input is True, returns False. If the input is False, returns True. if not isinstance(value, bool): raise ValueError(\\"The input must be a boolean value\\") return not value"},{"question":"Create a function that returns a list of all combinations of a given list's elements taken two elements at a time. For instance, given the list \`[1,2,3]\`, the function should return \`[[1,2],[1,3],[2,3]]\`.","solution":"from itertools import combinations def combinations_two_elements(lst): Returns a list of all combinations of the list's elements taken two elements at a time. return [list(combo) for combo in combinations(lst, 2)]"},{"question":"Create a function that computes the n-th Fibonacci number using a loop. The function should handle cases for inputs less than zero, zero, and positive integers.","solution":"def fibonacci(n): Computes the n-th Fibonacci number using a loop. For inputs less than zero, returns None. For input zero, returns 0. For positive integers, returns the n-th Fibonacci number. if n < 0: return None elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Create a function that takes a string of numbers and returns the sum of all the numbers, assuming they are all positive whole numbers separated by commas. For example, a string \\"1,2,3,4\\" should return 10. If the string is empty, the function should return 0.","solution":"def sum_of_numbers(number_string): Returns the sum of all numbers in the input string. Numbers are assumed to be positive whole numbers separated by commas. :param number_string: A string containing numbers separated by commas :return: Integer sum of the numbers if not number_string: return 0 return sum(int(num) for num in number_string.split(','))"},{"question":"Create a function that takes in two parameters: a list of integers and a target integer. The function should return the first integer in the list that is equal to the target integer. If no such integer is found, the function should return -1.","solution":"def find_first_equal(numbers, target): Returns the first integer in the list that is equal to the target integer. If no such integer is found, returns -1. Parameters: numbers (list): A list of integers. target (int): The target integer. Returns: int: The first integer in the list that matches the target or -1 if not found. for num in numbers: if num == target: return num return -1"},{"question":"Create a function that takes two integers as inputs and returns the sum of their squares. The inputs will be in the range of -1000 to 1000 (inclusive). The function name should represent the operation it performs.","solution":"def sum_of_squares(a, b): Returns the sum of the squares of a and b. Parameters: a (int): The first integer. b (int): The second integer. Returns: int: The sum of the squares of a and b. return a**2 + b**2"},{"question":"Create a function that takes three arguments: an array of integers, a value, and a condition. For example,","solution":"def count_elements(array, value, condition): Returns the number of elements in the array that meet the condition relative to the value. Parameters: - array (list of ints): The array of integers to be checked. - value (int): The reference value for the condition. - condition (str): The condition to check (\\"greater\\", \\"less\\", \\"equal\\"). Returns: - int: The number of elements that meet the condition. if condition == \\"greater\\": return sum(1 for x in array if x > value) elif condition == \\"less\\": return sum(1 for x in array if x < value) elif condition == \\"equal\\": return sum(1 for x in array if x == value) else: raise ValueError(\\"Invalid condition specified\\")"},{"question":"Create a function that takes an integer as input and returns the sum of the digits of its absolute value.","solution":"def sum_of_digits(n): Returns the sum of the digits of the absolute value of the given integer n. n = abs(n) # Take the absolute value of n return sum(int(digit) for digit in str(n))"},{"question":"Create a function that takes an integer n as input and returns a list of the first n Fibonacci numbers. The function should be efficient and optimized for performance.","solution":"def fibonacci_sequence(n): Returns a list of the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence"},{"question":"Create a function that takes an integer array and the size of the array as parameters. The function should find and return the second smallest unique number in the array. If the array does not have a second smallest unique number, the function should return -1.","solution":"def second_smallest_unique(arr, size): Returns the second smallest unique number in the array. If the array does not have a second smallest unique number, returns -1. # Remove duplicates by converting arr to a set and back to a sorted list unique_numbers = sorted(set(arr)) # Check if there are at least two unique numbers if len(unique_numbers) < 2: return -1 # The second element in the sorted unique numbers list is the answer return unique_numbers[1]"},{"question":"Create a function that takes a string as input and returns the reversed string. Assume each character is unique.","solution":"def reverse_string(s): Returns the reversed string of s. return s[::-1]"},{"question":"Create a function that rotates a two-dimensional array by 90 degrees clockwise. The function should handle arrays of any size and return the rotated array. If the input array is empty, the function should return an empty array. The function should pass the provided test cases.","solution":"def rotate_90_clockwise(matrix): Rotates a two-dimensional array (list of lists) by 90 degrees clockwise. If the input array is empty, returns an empty array. if not matrix or not matrix[0]: return [] # Transpose and then reverse rows to get a 90 degrees clockwise rotation return [list(reversed(col)) for col in zip(*matrix)]"},{"question":"Create a function that calculates the factorial of a given number. The function should take a single integer as an input and return the factorial of that number. The factorial of a number is the product of all positive integers less than or equal to that number. For example, the factorial of 5 (denoted as 5!) is 5 x 4 x 3 x 2 x 1 = 120.","solution":"def factorial(n): Returns the factorial of a given number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that accepts three parameters: an array of integers, a starting index, and an ending index. The function should return an array containing the elements from the original array, but only those between the starting and ending indices, inclusive. If the starting index is greater than the ending index, the function should return an empty array. If the starting index or the ending index is out of range, the function should return an array containing the elements from the valid indices only.","solution":"def subarray(arr, start, end): Returns a subarray containing elements from the original array between the starting and ending indices, inclusive. If the starting index is greater than the ending index, it returns an empty array. If the starting index or the ending index is out of range, it returns an array containing the elements from the valid indices only. if start > end: return [] start = max(start, 0) end = min(end, len(arr) - 1) return arr[start:end+1]"},{"question":"Create a function that calculates the total cost of purchasing a certain quantity of products, given the price per product and a discount rate. The function should handle both integer and floating-point numbers for the price and discount rate, and should round the final total to 2 decimal places.","solution":"def calculate_total_cost(price, quantity, discount_rate): Calculate the total cost of purchasing a certain quantity of products given the price per product and a discount rate. Args: price (float): Price per product. quantity (int): Quantity of products. discount_rate (float): Discount rate in percentage. Returns: float: Total cost rounded to 2 decimal places. total_cost_before_discount = price * quantity discount_amount = total_cost_before_discount * (discount_rate / 100) total_cost_after_discount = total_cost_before_discount - discount_amount return round(total_cost_after_discount, 2)"},{"question":"Create a function that takes an integer array nums and an integer k as parameters and rotates the array to the right by k positions.","solution":"def rotate_array(nums, k): Rotates the array to the right by k positions. n = len(nums) k = k % n # In case k is greater than the length of the array return nums[-k:] + nums[:-k]"},{"question":"Create a function that takes in two lists of integers and returns a new list that combines the elements of both lists. If an element appears in both lists, it should appear only once in the resulting list. The resulting list should be sorted in ascending order.","solution":"def combine_and_sort_lists(list1, list2): Combines two lists into one list with unique elements, and sorts it in ascending order. :param list1: First list of integers. :param list2: Second list of integers. :return: A new sorted list with unique elements from both lists. combined_set = set(list1) | set(list2) sorted_list = sorted(combined_set) return sorted_list"},{"question":"Create a function that identifies whether a given number is an Armstrong number. An Armstrong number is a three-digit number in which the sum of the cubes of the digits is equal to the number itself.","solution":"def is_armstrong_number(n): Returns True if the given number n is an Armstrong number, otherwise False. # Check if the number is a three-digit number if n < 100 or n > 999: return False # Extract digits digits = [int(digit) for digit in str(n)] # Calculate the sum of the cubes of the digits armstrong_sum = sum(digit ** 3 for digit in digits) # Check if the sum is equal to the number itself return armstrong_sum == n"},{"question":"Create a function that takes a string as input and returns the number of unique characters in that string. Unique characters are defined as characters that appear exactly once in the string. The function should be case-sensitive, meaning that 'A' and 'a' are considered different characters.","solution":"def count_unique_characters(s): Returns the number of unique characters in the input string. Unique characters are those that appear exactly once in the string. :param s: str - The input string. :return: int - The number of unique characters. from collections import Counter char_count = Counter(s) unique_count = sum(1 for count in char_count.values() if count == 1) return unique_count"},{"question":"Create a function that returns a list of all prime numbers less than 100. Is the following Python code correct for this task? If not, what should it be?","solution":"def prime_numbers_less_than_100(): Returns a list of all prime numbers less than 100. primes = [] for num in range(2, 100): for i in range(2, int(num**0.5) + 1): if num % i == 0: break else: primes.append(num) return primes"},{"question":"Create a function that takes an array of numbers and returns the maximum possible sum of a subarray. This is known as the Kadane's algorithm problem.","solution":"def max_subarray_sum(nums): Returns the maximum possible sum of a subarray within the given list of numbers. This function implements Kadane's algorithm. if not nums: return 0 # Non-existent subarray max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes in two integer arrays, arr1 and arr2, and returns a 2D array that is the result of merging the two arrays into one sorted array.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted 2D array and returns it. merged = sorted(arr1 + arr2) return [merged]"},{"question":"Create a function that takes a positive integer as input and returns the sum of its digits, but with a twist. If the sum is even, return half of the sum. If the sum is odd, return three times the sum. Please provide the solution in Python.","solution":"def sum_of_digits_twist(n): Returns the sum of digits of a positive integer with specific rules: - If the sum is even, returns half the sum. - If the sum is odd, returns three times the sum. # Summing the digits of the number digit_sum = sum(int(digit) for digit in str(n)) # Applying the twist based on whether the digit sum is even or odd if digit_sum % 2 == 0: return digit_sum // 2 else: return digit_sum * 3"},{"question":"Create a function that takes two parameters, an integer array and an integer 'k', and returns a boolean value of whether the array contains a subset such that the sum of the elements in the subset is exactly 'k'.","solution":"def subset_sum(array, k): Checks if there exists a subset of the given array with a sum equal to k. :param array: List of integers :param k: Integer sum to be checked for :return: Boolean indicating if such a subset exists or not n = len(array) dp = [[False] * (k + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, k + 1): if array[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j - array[i-1]] else: dp[i][j] = dp[i-1][j] return dp[n][k]"},{"question":"Create a function that takes a positive integer \`n\` and returns a list of all prime numbers less than \`n\`. Use the Sieve of Eratosthenes algorithm for this task.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] is_prime = [True] * n is_prime[0] = is_prime[1] = False for i in range(2, int(n ** 0.5) + 1): if is_prime[i]: for j in range(i * i, n, i): is_prime[j] = False return [i for i in range(n) if is_prime[i]]"},{"question":"Create a function that takes a list of integers and return the frequency of the most frequent integer in the list. If there are multiple integers with the same highest frequency, return the frequency of these integers. The function should return 0 if the list is empty.","solution":"from collections import Counter def most_frequent_frequency(numbers): Returns the frequency of the most frequent integer in the list. If there are multiple integers with the same highest frequency, it returns the highest frequency. Returns 0 if the list is empty. if not numbers: return 0 frequency = Counter(numbers) max_frequency = max(frequency.values()) return max_frequency"},{"question":"Create a function that takes an integer n as input and prints each number from 1 to n on a new line in the console.","solution":"def print_numbers(n): Prints each number from 1 to n on a new line. for i in range(1, n + 1): print(i)"},{"question":"Create a function that reads numbers from a file and returns the sum of all even numbers found in the file. Assume the file contains one number per line. The function should handle the case where the file does not exist and provide an appropriate error message.","solution":"def sum_even_numbers_from_file(filepath): Returns the sum of all even numbers found in the specified file. Assumes that the file contains one number per line. If the file does not exist, returns an appropriate error message. try: sum_even = 0 with open(filepath, 'r') as file: for line in file: number = int(line.strip()) if number % 2 == 0: sum_even += number return sum_even except FileNotFoundError: return \\"File does not exist.\\" except ValueError: return \\"The file contains non-numeric data.\\""},{"question":"Create a function that takes a list of integers and returns a new list where each element is the product of all other elements in the original list except for the element at that index. For example, given the input list [1, 2, 3, 4], the function should return [24, 12, 8, 6].","solution":"def product_except_self(nums): Given a list of integers, returns a new list where each element is the product of all other elements in the original list except for the element at that index. length = len(nums) if length == 0: return [] result = [1] * length left = 1 for i in range(length): result[i] = left left *= nums[i] right = 1 for i in range(length-1, -1, -1): result[i] *= right right *= nums[i] return result"},{"question":"Create a function that takes in a string and returns a version of the string with all non-alphabetical characters removed.","solution":"def remove_non_alphabetical(s): Removes all non-alphabetical characters from the input string. Args: s (str): The input string. Returns: str: A string with all non-alphabetical characters removed. return ''.join(filter(str.isalpha, s))"},{"question":"Create a function that converts a string to title case, where the first character of each word is capitalized and the rest of the characters are in lowercase.","solution":"def to_title_case(string): Converts a string to title case. Parameters: string (str): The input string. Returns: str: The string converted to title case. return string.title()"},{"question":"Create a function that takes an integer as input, and returns the digit in the thousands place.","solution":"def get_thousands_place(num): Returns the digit in the thousands place of the given integer. If the given number has less than 4 digits, it returns 0. num = abs(num) # consider the absolute value to handle negative numbers return (num // 1000) % 10"},{"question":"Create a function that takes two parameters, a linear time-scale and a time value. The function should calculate the position of a point on a line at a specific time according to the time scale. The time scale is given as points per second and the time value is the current time in seconds.","solution":"def calculate_position(time_scale, time_value): Calculate the position of a point on a line at a specific time according to the time scale. :param time_scale: Points per second :param time_value: Current time in seconds :return: The position of the point on the line return time_scale * time_value"},{"question":"Create a function that generates the first n Fibonacci numbers and returns them in an array.","solution":"def generate_fibonacci(n): Generates the first n Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first n Fibonacci numbers. if n <= 0: return [] fibonacci_sequence = [0, 1] for _ in range(2, n): fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2]) return fibonacci_sequence[:n]"},{"question":"Create a function that calculates the average of an array of numbers, but ignores non-numeric values. How can you handle this in a way that considers both integers and floating-point numbers in the input array?","solution":"def average(numbers): Calculates the average of an array of numbers, ignoring non-numeric values. Parameters: numbers (list): The list of numbers Returns: float: The average of the numeric values in the list numeric_values = [num for num in numbers if isinstance(num, (int, float))] if not numeric_values: return 0.0 return sum(numeric_values) / len(numeric_values)"},{"question":"Create a function that sums up the elements in an array. If the array contains any non-numeric element, the function should return an error message. Otherwise, it should return the sum of all elements in the array.","solution":"def sum_array(arr): Sums up the elements in an array. If the array contains any non-numeric element, the function returns an error message. Otherwise, it returns the sum of all elements in the array. total = 0 for element in arr: if not isinstance(element, (int, float)): return \\"Error: Array contains non-numeric elements.\\" total += element return total"},{"question":"Create a function that takes a String as an argument and verifies that it is composed of only valid hexadecimal values. A valid hexadecimal string includes characters from 0-9 and A-F (case insensitive).","solution":"def is_valid_hex(s): Checks if the input string s is composed only of valid hexadecimal characters (0-9, A-F). hex_chars = set(\\"0123456789abcdefABCDEF\\") for char in s: if char not in hex_chars: return False return True"},{"question":"Create a function that takes a matrix of numbers and returns the sum of the last elements of each row.","solution":"def sum_of_last_elements(matrix): Given a matrix of numbers, returns the sum of the last elements of each row. return sum(row[-1] for row in matrix)"},{"question":"Create a function that takes a string as a parameter, and returns a copy of that string with all the vowels (a, e, i, o, u) removed. An uppercase and lowercase version of each vowel should be considered.","solution":"def remove_vowels(input_str): Returns a copy of input_str with all the vowels (a, e, i, o, u) removed. Both uppercase and lowercase vowels are removed. vowels = \\"aeiouAEIOU\\" return ''.join(char for char in input_str if char not in vowels)"},{"question":"Create a function that takes a word as input and returns the number of vowels in the word.","solution":"def count_vowels(word): Returns the number of vowels in the given word. Parameters: word (str): The input word to check Returns: int: The number of vowels in the word vowels = 'aeiou' count = 0 for char in word.lower(): if char in vowels: count += 1 return count"},{"question":"Create a function that takes as input two strings and checks if they are anagrams of each other. Two words are considered anagrams if they contain the same characters but in a different order. For example, the words \\"listen\\" and \\"silent\\" are anagrams.","solution":"def are_anagrams(s1, s2): Check if two strings are anagrams of each other. # Removing any spaces and converting both strings to lowercase s1 = s1.replace(\\" \\", \\"\\").lower() s2 = s2.replace(\\" \\", \\"\\").lower() # Return True if sorted characters are the same return sorted(s1) == sorted(s2)"},{"question":"Create a function that takes in an array of integers as a parameter and returns the maximum sum of any two numbers in the array. The solution should be in O(n) time complexity and O(1) space complexity.","solution":"def max_sum_of_two_numbers(arr): Returns the maximum sum of any two numbers in the array. The solution works in O(n) time complexity and O(1) space complexity. :param arr: list of integers :return: maximum sum of any two numbers in the array if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements.\\") max1 = float('-inf') max2 = float('-inf') for num in arr: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num return max1 + max2"},{"question":"Create a function that takes a list of strings and returns the length of the longest string in the list.","solution":"def longest_string_length(strings): Returns the length of the longest string in the list of strings. Args: strings (list of str): List containing strings. Returns: int: Length of the longest string in the list. if not strings: return 0 return max(len(s) for s in strings)"},{"question":"Create a function that takes a string as input and returns the modified string where every character at an even index is converted to uppercase and every character at an odd index is converted to lowercase. For example, if the input string is \\"abcdef\\", the output should be \\"AbCdEf\\".","solution":"def modify_string(s): Modifies the input string such that every character at an even index is converted to uppercase and every character at an odd index is converted to lowercase. :param s: Input string :return: Modified string return ''.join([char.upper() if idx % 2 == 0 else char.lower() for idx, char in enumerate(s)])"},{"question":"Create a function that swaps the values of two integers without using any temporary variable.","solution":"def swap(a, b): Swaps the values of a and b without using any temporary variable. Returns the swapped values. a = a + b b = a - b a = a - b return a, b"},{"question":"Create a function that reverses a string in Python. The function should return the reversed string without using any built-in functions or slicing. You should use a loop to achieve this.","solution":"def reverse_string(s): Reverses the given string without using built-in functions or slicing. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Create a function that takes a list of integers and returns the count of distinct, non-empty contiguous sublists that have a sum equal to a given target sum.","solution":"def count_sublists_with_target_sum(lst, target_sum): Returns the count of distinct, non-empty contiguous sublists that have a sum equal to target_sum. count = 0 for start in range(len(lst)): current_sum = 0 for end in range(start, len(lst)): current_sum += lst[end] if current_sum == target_sum: count += 1 return count"},{"question":"Create a function that will take two parameters, x and y. If x is greater than y, return the sum of all integers between x and y (inclusive). If x is less than or equal to y, return the difference between y and x (inclusive). Write a Python solution for this problem.","solution":"def calculate(x, y): If x is greater than y, return the sum of all integers between x and y (inclusive). If x is less than or equal to y, return the difference between y and x (inclusive). if x > y: return sum(range(y, x + 1)) else: return y - x"},{"question":"Create a function that generates and prints a right-angled triangle of height \`n\` using asterisks (*) in Python. The base of the triangle should be on the left.","solution":"def right_angled_triangle(n): Prints a right-angled triangle of height n using asterisks (*). The base of the triangle should be on the left. for i in range(1, n + 1): print('*' * i)"},{"question":"Create a function that takes in a list of integers and returns the sum of all the even numbers in the list. If there are no even numbers in the list, the function should return 0. The function should also check if the input is a list and raise a ValueError if it is not a list.","solution":"def sum_of_even_numbers(lst): Takes a list of integers and returns the sum of all the even numbers in the list. Raises ValueError if the input is not a list. if not isinstance(lst, list): raise ValueError(\\"Input must be a list\\") return sum(num for num in lst if isinstance(num, int) and num % 2 == 0)"},{"question":"Create a function that reads data from a given URL and saves it to a file. The function should take in the URL of the data source and the filename where the data should be saved.","solution":"import requests def read_from_url_and_save(url, filename): Reads data from the given URL and saves it to the specified file. :param url: The URL of the data source :param filename: The name of the file where the data should be saved response = requests.get(url) response.raise_for_status() # Will raise an HTTPError for bad responses with open(filename, 'wb') as file: file.write(response.content)"},{"question":"Create a function that adds two numbers and returns the result. The function should handle both integers and floating-point numbers.","solution":"def add_numbers(a, b): Returns the sum of a and b, can handle both integers and floating-point numbers. return a + b"},{"question":"Create a function that receives a number and returns the smallest prime number that is greater or equal to the given number. If no such prime number exists (for example, if the input is less than 2), the function should return \`None\`.","solution":"def is_prime(n): Checks if a given number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5)+1, 2): if n % i == 0: return False return True def smallest_prime_greater_or_equal(n): Returns the smallest prime number that is greater or equal to the given number n. If no such prime number exists, returns None. if n < 2: return None while not is_prime(n): n += 1 return n"},{"question":"Create a function that generates a list of all positive integers up to a given number \`n\` that are divisible by either 3 or 5.","solution":"def generate_divisible_by_3_or_5(n): Returns a list of all positive integers up to \`n\` that are divisible by either 3 or 5. return [i for i in range(1, n+1) if i % 3 == 0 or i % 5 == 0]"},{"question":"Create a function that takes a string as input and returns a new string where all the vowels in the original string are replaced with the corresponding uppercase vowels.","solution":"def replace_vowels_with_uppercase(s): Replaces all the vowels in the input string with their uppercase counterpart. Parameters: s (str): The input string. Returns: str: The string with all vowels in uppercase. vowels = 'aeiou' result = ''.join([char.upper() if char in vowels else char for char in s]) return result"},{"question":"Create a function that finds a perfect square number less than or equal to a given number \`n\`.","solution":"import math def find_perfect_square(n): Finds the largest perfect square less than or equal to n. if n < 0: return None # No perfect squares exist for negative numbers largest_square_root = int(math.sqrt(n)) perfect_square = largest_square_root ** 2 return perfect_square"},{"question":"Create a function that takes a string and returns a dictionary with the frequency of each character in the string. The function should handle both lowercase and uppercase letters and also consider spaces.","solution":"def char_frequency(s): Returns a dictionary with the frequency of each character in the string s. freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Create a function that takes in two integers, \`num1\` and \`num2\`, and returns the sum of all integers from \`num1\` to \`num2\` (inclusive). If \`num1\` is greater than \`num2\`, the function should return \`-1\` to indicate an error.","solution":"def sum_range(num1, num2): Returns the sum of all integers from num1 to num2 (inclusive). If num1 is greater than num2, returns -1 to indicate an error. if num1 > num2: return -1 return sum(range(num1, num2 + 1))"},{"question":"Create a function that takes in a list of strings and returns a dictionary where the keys are the unique strings and the values are their frequency counts.","solution":"def string_frequency(strings): Returns a dictionary where the keys are the unique strings from the input list and the values are their frequency counts. frequency = {} for string in strings: if string in frequency: frequency[string] += 1 else: frequency[string] = 1 return frequency"},{"question":"Create a function that takes a list of integers and returns a new list that contains the squares of the original integers, but only for integers that are divisible by 3. If the integer is negative, also square its absolute value before attempting the division.","solution":"def square_divisible_by_3(numbers): Given a list of integers, return a list containing the squares of the integers that are divisible by 3. If the integer is negative, the squaring is done before checking the divisibility. :param numbers: List of integers :return: List of squares of integers divisible by 3 return [num ** 2 for num in numbers if (abs(num) ** 2) % 3 == 0]"},{"question":"Create a function that rearranges the elements of a given array in reverse order.","solution":"def reverse_array(arr): Reverses the elements of the given array. return arr[::-1]"},{"question":"Create a function that takes 1 argument (an integer between 1 and 10) and returns a string value denoting the month name for the given number. If the number is out of range, it should return \\"Invalid month value.\\"","solution":"def get_month_name(month_number): Returns the month name for the given number between 1 and 10. If the number is out of range, returns 'Invalid month value.' months = [\\"Invalid month value.\\", \\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\"] if 1 <= month_number <= 10: return months[month_number] else: return \\"Invalid month value.\\""},{"question":"Create a function that takes an array, a start index, and an end index as input, and returns the maximum value within the specified range in the array. If the start index or end index is out of the array bounds, the function should handle this gracefully and return a meaningful error message.","solution":"def max_in_range(arr, start, end): Returns the maximum value within the specified range in the array. If the start or end index is out of bounds, returns a meaningful error message. Parameters: arr (list): The input array. start (int): The start index of the range. end (int): The end index of the range. Returns: int/str: The maximum value in the specified range, or an error message if indices are out of bounds. if not isinstance(arr, list): return \\"Input should be a list.\\" if start < 0 or end >= len(arr): return \\"Index out of bounds.\\" if start > end: return \\"Start index cannot be greater than end index.\\" return max(arr[start:end+1])"},{"question":"Create a function that takes a list of strings and returns the one with the most occurrences. If there are multiple strings with the same highest number of occurrences, return the first one encountered. If the list is empty, return an empty string.","solution":"def most_frequent_string(strings): Returns the string with the most occurrences in the list. If there is a tie, returns the first one encountered. If the list is empty, returns an empty string. Args: strings (list of str): List of strings to examine. Returns: str: The string with the most occurrences. if not strings: return \\"\\" frequency = {} max_count = 0 most_frequent = \\"\\" for string in strings: frequency[string] = frequency.get(string, 0) + 1 if (frequency[string] > max_count or (frequency[string] == max_count and most_frequent == \\"\\")): max_count = frequency[string] most_frequent = string return most_frequent"},{"question":"Create a function that calculates the minimum number of operations required to convert a given string into a palindrome. An operation is defined as appending a character to the end of the string.","solution":"def min_operations_to_palindrome(s): Calculate the minimum number of operations required to convert the given string into a palindrome. An operation is defined as appending a character to the end of the string. n = len(s) for i in range(n): if s[i:] == s[i:][::-1]: return i return n"},{"question":"Create a function that takes in two numbers and returns their sum. Also, the function should handle if the inputs are not numbers and return a custom error message.","solution":"def add_numbers(a, b): Returns the sum of a and b if both are numbers. If any input is not a number, returns an error message. if not isinstance(a, (int, float)) or not isinstance(b, (int, float)): return \\"Error: Both inputs must be numeric.\\" return a + b"},{"question":"Create a function that takes a list of integers as input and returns the first even number in the list. If there are no even numbers in the list, return a string indicating that there are no even numbers.","solution":"def first_even_number(numbers): Returns the first even number in the list; if the list contains no even numbers, return 'No even numbers found'. for number in numbers: if number % 2 == 0: return number return 'No even numbers found'"},{"question":"Create a function that generates a list of integers from 1 to n, where n is a parameter of the function. However, instead of starting the count from 1, it should start from a some arbitrary number 's', where 's' is another parameter of the function. For example, generate_sequence(5, 3) should return the list [3, 4, 5, 6, 7].","solution":"def generate_sequence(n, s): Generates a list of integers from s to s+n-1. Args: n (int): The count of numbers to generate. s (int): The starting number. Returns: list: A list of integers from s to s+n-1. return [s + i for i in range(n)]"},{"question":"Create a function that takes a string of characters and returns a new string that consists of the original string with each character's ASCII value doubled using Python.","solution":"def double_ascii_values(s): Takes a string of characters and returns a new string that consists of the original string with each character's ASCII value doubled using Python. return ''.join(chr(ord(char) * 2) for char in s)"},{"question":"Create a function that takes three parameters: a minimum value, a maximum value, and a step value. The function should return a list containing a range of numbers from the minimum value to the maximum value (inclusive) in steps of the step value.","solution":"def generate_range(min_val, max_val, step): Generates a range of numbers from min_val to max_val (inclusive) in steps of step value. Parameters: min_val (int): The minimum value of the range. max_val (int): The maximum value of the range. step (int): The step value for the range. Returns: list: A list containing the range of numbers. if step <= 0: raise ValueError(\\"Step must be a positive integer.\\") result = [] current = min_val while current <= max_val: result.append(current) current += step return result"},{"question":"Create a function that takes an array of integers and returns the maximum sum of any contiguous subarray within this array. This subarray can contain a single element.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray within the given array of integers. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that identifies all even numbers in a given list and returns a new list containing only those even numbers. Write a Python function to accomplish this.","solution":"def find_even_numbers(numbers): Returns a list of all even numbers from the input list. Parameters: numbers (list): A list of integers. Returns: list: A list of even integers. return [num for num in numbers if num % 2 == 0]"},{"question":"Create a function that takes two integers as arguments and returns the area of a rectangle with those integers as its width and height.","solution":"def rectangle_area(width, height): Returns the area of a rectangle given its width and height. return width * height"},{"question":"Create a function that takes in two numbers, adds them together, and then multiplies the sum by 4. Write the function in Python.","solution":"def add_and_multiply(a, b): Takes two numbers, adds them together, and multiplies the sum by 4. return (a + b) * 4"},{"question":"Create a function that checks if a given string can be rearranged into a palindrome. A palindrome is a word or phrase that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. The function should return true if the string can be rearranged to form a palindrome, and false otherwise.","solution":"from collections import Counter def can_form_palindrome(s): Check if a given string can be rearranged into a palindrome. :param s: The input string :return: True if the string can be rearranged to form a palindrome, False otherwise # Remove spaces and convert to lowercase s = ''.join(c.lower() for c in s if c.isalnum()) # Count the frequency of each character char_counts = Counter(s) # Check the number of characters that have an odd count odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # For a string to be rearranged into a palindrome: # - At most one character can have an odd count (for odd-length strings) # - All characters must have even counts or exactly one odd count (for even-length strings) return odd_count <= 1"},{"question":"Create a function that takes an integer \`n\` as input and returns a list containing all the prime numbers up to \`n\` (inclusive) using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to n (inclusive) using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes p = 2 while p * p <= n: if sieve[p] is True: for i in range(p * p, n + 1, p): sieve[i] = False p += 1 return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Create a function that can convert all strings in a list to lowercase in Python.","solution":"def to_lowercase(lst): Converts all strings in the list to lowercase. Args: lst (List[str]): List of strings to be converted. Returns: List[str]: List with all strings converted to lowercase. return [s.lower() for s in lst]"},{"question":"Create a function that takes two lists, \`list1\` and \`list2\`, and returns a new list that is the result of merging \`list1\` and \`list2\` such that the elements of \`list2\` are inserted into \`list1\` at the positions specified by a secondary list \`positions\`. The \`positions\` list contains indices where each element of \`list2\` should be inserted into \`list1\`.","solution":"def merge_lists(list1, list2, positions): Merges list2 into list1 at the positions specified by the positions list. Args: list1 (list): The original list. list2 (list): The list to be inserted into list1. positions (list): A list of positions where corresponding elements of list2 should be inserted into list1. Returns: list: The resulting merged list. result = list1.copy() offset = 0 for index, item in enumerate(list2): pos = positions[index] + offset result.insert(pos, item) offset += 1 return result"},{"question":"Create a function that accepts a variable \`x\` which represents an integer. The function should traverse through all the numbers from 1 to \`x\` in reverse order and print each number.","solution":"def print_reverse(x): Prints all numbers from x down to 1 in reverse order. Parameters: x (int): The starting integer. for i in range(x, 0, -1): print(i)"},{"question":"Create a function that implements the binary search algorithm to find a target element in a sorted array. If the target is not found, return -1.","solution":"def binary_search(arr, target): Implements binary search to find the target element in a sorted array. Returns the index of the target element if found, otherwise returns -1. :param arr: List[int] - A sorted list of integers where we will search for the target :param target: int - The target integer to find in the array :return: int - The index of the target element if found, otherwise -1 left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that takes a number as input and returns a list of all perfect squares up to that number.","solution":"import math def perfect_squares_up_to(n): Returns a list of all perfect squares up to the given number n. return [i*i for i in range(1, int(math.sqrt(n)) + 1) if i*i <= n]"},{"question":"Create a function that takes an array of integers and returns the length of the longest strictly increasing subarray. A strictly increasing subarray is a contiguous subsequence where each element is greater than the previous element.","solution":"def longest_increasing_subarray(arr): Returns the length of the longest strictly increasing subarray. Parameters: arr (list of int): The input array of integers. Returns: int: The length of the longest strictly increasing subarray. n = len(arr) if n == 0: return 0 max_len = 1 current_len = 1 for i in range(1, n): if arr[i] > arr[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"Create a function that takes in a list of integers and an integer k, and returns the sum of the k smallest integers in the list. If the list contains duplicates, they should be included in the sum.","solution":"def sum_of_k_smallest(numbers, k): Returns the sum of the k smallest integers in the list. Args: numbers (list): A list of integers. k (int): The number of smallest integers to sum. Returns: int: The sum of the k smallest integers. if k > len(numbers) or k <= 0: raise ValueError(\\"k should be a positive integer less than or equal to the length of the list\\") # Sort the list to get the k smallest numbers sorted_numbers = sorted(numbers) # Sum up the k smallest numbers return sum(sorted_numbers[:k])"},{"question":"Create a function that takes an integer as an input and returns whether it's a perfect square or not. The function should have appropriate error handling for non-integer or negative input values. To ensure the solution is effective, please include a main test function that checks both positive and negative cases, including boundary values.","solution":"import math def is_perfect_square(n): Returns whether the integer n is a perfect square or not. Non-integer or negative values will raise a ValueError. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") sqrt_n = math.isqrt(n) return sqrt_n * sqrt_n == n"},{"question":"Create a function that takes a list of tuples, where each tuple contains a string and an integer. The function should return a list of tuples sorted according to the integer value in each tuple in ascending order.","solution":"def sort_tuples_by_integer(lst): Sorts a list of tuples (string, integer) based on the integer values in ascending order. Parameters: lst (list): A list of tuples, where each tuple contains a string and an integer. Returns: list: A list of tuples sorted according to the integer value in ascending order. return sorted(lst, key=lambda x: x[1])"},{"question":"Create a function that takes two integers as input and returns the sum of all even numbers between these two integers, inclusive. If there are no even numbers in the range, the function should return 0.","solution":"def sum_of_even_numbers(a, b): Returns the sum of all even numbers between a and b (inclusive). If there are no even numbers in the range, returns 0. if a > b: a, b = b, a total_sum = 0 for num in range(a, b + 1): if num % 2 == 0: total_sum += num return total_sum"},{"question":"Create a function that takes a string as input and returns a string with all the duplicate characters removed. How should I approach this problem?","solution":"def remove_duplicates(input_string): Returns a string with all duplicate characters removed. seen = set() result = \\"\\" for char in input_string: if char not in seen: seen.add(char) result += char return result"},{"question":"Create a function that takes in a list of integers and returns the sum of all numbers that are both even and divisible by 3.","solution":"def sum_even_and_divisible_by_3(nums): Returns the sum of all integers in the list that are even and divisible by 3. Parameters: - nums: A list of integers. Returns: - The sum of all even integers in the list that are also divisible by 3. return sum(num for num in nums if num % 2 == 0 and num % 3 == 0)"},{"question":"Create a function that takes a string representation of a fraction (in the format \\"numerator/denominator\\") and returns the result of the fraction as a decimal. If the denominator is zero, the function should raise a ValueError with the message \\"Denominator cannot be zero.\\"","solution":"def fraction_to_decimal(fraction): Converts a fraction from string format \\"numerator/denominator\\" to a decimal. Raises ValueError if denominator is zero. Parameters: fraction (str): The fraction as a string, e.g., \\"3/4\\" Returns: float: The decimal representation of the fraction Raises: ValueError: If the denominator is zero numerator, denominator = map(int, fraction.split('/')) if denominator == 0: raise ValueError(\\"Denominator cannot be zero.\\") return numerator / denominator"},{"question":"Create a function that takes three numbers as input and returns the sum of the three numbers.","solution":"def sum_of_three(a, b, c): Returns the sum of a, b, and c. return a + b + c"},{"question":"Create a function that accepts a list of words and returns the longest word in the list. If there are multiple words of the same maximum length, return the first one that appears in the list.","solution":"def longest_word(words): Returns the longest word in the list of words. If there are multiple words with the same maximum length, returns the first one that appears in the list. if not words: return \\"\\" max_length = 0 longest = \\"\\" for word in words: if len(word) > max_length: max_length = len(word) longest = word return longest"},{"question":"Create a function that can reverse the order of the words in a given string without reversing the letters in the words themselves. For example, if the input is \\"Hello World\\", the output should be \\"World Hello\\".","solution":"def reverse_words_order(sentence): Reverses the order of the words in the given string without reversing the letters in the words themselves. Parameters: sentence (str): The sentence to reverse the words order of. Returns: str: The sentence with the words order reversed. return ' '.join(sentence.split()[::-1])"},{"question":"Create a function that calculates the factorial of a number using an iterative approach in Python. The function should take one argument: the number for which the factorial is to be calculated. The function should return the factorial of the number. If the input is less than 0, the function should raise a ValueError with an appropriate error message. If the input is 0, the function should return 1, as 0! is defined to be 1.","solution":"def factorial(n): Returns the factorial of a given number n using an iterative approach. Parameters: n (int): The number for which the factorial is to be calculated. Returns: int: The factorial of the given number n. Raises: ValueError: If n is less than 0. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes an integer as input and returns the count of digits in the integer. For example, if the input is 12345, the output should be 5.","solution":"def count_digits(n): Returns the count of digits in the integer n. return len(str(abs(n)))"},{"question":"Create a function that accepts two parameters: a string and an integer. The function should append the integer as a string to the end of the given string. For example, if the string is \\"abc\\" and the integer is 42, the function should return \\"abc42\\".","solution":"def append_integer_to_string(s, n): Appends the integer n to the end of the string s. Parameters: s (str): The input string. n (int): The integer to append. Returns: str: The resulting string after appending the integer. return s + str(n)"},{"question":"Create a function that takes an integer as input and returns the sum of its digits in reverse order. For example, if the input is 123, the function should return 321.","solution":"def reverse_sum_of_digits(n): Takes an integer as input and returns the sum of its digits in reverse order. # Handle negative numbers n = abs(n) reversed_digits_sum = int(str(n)[::-1]) return reversed_digits_sum"},{"question":"Create a function that takes an array of integers as input and returns the sorted array in ascending order.","solution":"def sort_array(arr): Returns the sorted array in ascending order. return sorted(arr)"},{"question":"Create a function that will generate the multiplication table for a number. The function should accept two arguments, but only the first argument is mandatory. The second argument determines the range of the multiplication table. For example, if the second argument is 5, the table generated will go from 1 to 5.","solution":"def multiplication_table(number, end=10): Generates the multiplication table for \`number\` from 1 to \`end\`. :param number: The number to generate the multiplication table for. :param end: The range limit for the multiplication table. Defaults to 10. :return: A list of strings representing the multiplication table. table = [] for i in range(1, end + 1): table.append(f\\"{number} x {i} = {number * i}\\") return table"},{"question":"Create a function that takes a list of integers and returns a list of boolean values, where each boolean value indicates whether the corresponding integer in the input list is odd or even. For example, if the input list is [1, 2, 3, 4, 5], the output list should be [true, false, true, false, true].","solution":"def is_odd_or_even(lst): Takes a list of integers and returns a list of booleans where True indicates the integer is odd, and False indicates the integer is even. Parameters: lst (list): A list of integers Returns: list: A corresponding list of booleans return [num % 2 != 0 for num in lst]"},{"question":"Create a function that filters a list of numbers and returns only the prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, 5 is a prime number because the only numbers that divide it exactly are 1 and 5.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def filter_primes(numbers): Filters the input list of numbers, returning only the prime numbers. return [num for num in numbers if is_prime(num)]"},{"question":"Create a function that outputs the maximum number of consecutive 1's that appear in an array of integers. For example, an array with [1,0,1,1,0,0,1,1,1] should return 3, as there are three consecutive 1's in a row.","solution":"def max_consecutive_ones(arr): Returns the maximum number of consecutive 1's in the input array. max_count = 0 temp_count = 0 for num in arr: if num == 1: temp_count += 1 max_count = max(max_count, temp_count) else: temp_count = 0 return max_count"},{"question":"Create a function that takes two numbers as input and returns the product of these two numbers. The function should be named \\"multiply_numbers\\".","solution":"def multiply_numbers(a, b): Returns the product of a and b. return a * b"},{"question":"Create a function that takes a list of integers and returns the number of integers that are larger than 10 and have both their first and last digits as even numbers.","solution":"def count_special_integers(numbers): Returns the number of integers in the list that are larger than 10 and have both their first and last digits as even numbers. def is_even(n): return n % 2 == 0 count = 0 for number in numbers: if number > 10: str_number = str(number) first_digit = int(str_number[0]) last_digit = int(str_number[-1]) if is_even(first_digit) and is_even(last_digit): count += 1 return count"},{"question":"Create a function that takes an integer \`n\` as input and returns an integer \`x\` such that when \`x\` is passed as an argument to a function \`h(x)\`, the result is a number whose digits are in strictly increasing order. If there are multiple solutions, return the smallest one.","solution":"def increasing_digits_number(n): Returns the smallest integer x such that the result of h(x) has digits in strictly increasing order. The function h(x) here is considered irrelevant because the primary task is to create a number whose digits are strictly increasing. return int(''.join(map(str, range(1, n+1)))) if n <= 9 else 123456789"},{"question":"Create a function that takes an integer n and returns the sum of all even numbers from 1 to n (inclusive). If n is odd, return the sum of all odd numbers from 1 to n (inclusive).","solution":"def sum_even_or_odd(n): Returns the sum of all even numbers from 1 to n if n is even. Returns the sum of all odd numbers from 1 to n if n is odd. if n % 2 == 0: return sum(i for i in range(1, n + 1) if i % 2 == 0) else: return sum(i for i in range(1, n + 1) if i % 2 != 0)"},{"question":"Create a function that takes in a string of numbers, separates them into individual digits, and returns a list of those digits. The function should ignore any non-numeric characters and handle strings with mixed content.","solution":"def separate_digits(s): Takes in a string of numbers and other characters, separates them into individual digits, and returns a list of those digits as integers. Non-numeric characters are ignored. return [int(char) for char in s if char.isdigit()]"},{"question":"Create a function that generates the nth Fibonacci number. The function should take an integer n as an argument and return the nth Fibonacci number in the sequence. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci(n): Returns the nth Fibonacci number. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. if n < 0: raise ValueError(\\"Input cannot be negative\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Create a function that takes an integer as input and returns a list of its factors. The factors are the numbers which can evenly divide the integer without leaving a remainder. For example, the factors of 12 are 1, 2, 3, 4, 6, and 12. Your function should also be able to handle negative numbers, returning an empty list in such cases, as negative numbers do not have factors in the same way positive numbers do.","solution":"def get_factors(n): Returns a list of factors of the given integer n. If the number is negative, returns an empty list. if n < 1: return [] factors = [] for i in range(1, n + 1): if n % i == 0: factors.append(i) return factors"},{"question":"Create a function that receives a list of integers and returns the count of numbers that are palindromic and even.","solution":"def count_even_palindromic_numbers(numbers): Returns the count of numbers that are palindromic and even. Parameters: - numbers: list of integers. Returns: - int : count of even and palindromic numbers. def is_palindromic(num): str_num = str(num) return str_num == str_num[::-1] return sum(1 for num in numbers if num % 2 == 0 and is_palindromic(num))"},{"question":"Create a function that generates a list of Fibonacci numbers up to a specified number of terms. The function should take two parameters: the number of terms in the series (n) and the optional maximum value (max_val). The function should return a list of Fibonacci numbers up to the n terms or up to the first occurrence of a Fibonacci number greater than or equal to max_val, whichever comes first. If both parameters are not provided, the function should return the first 10 terms of the Fibonacci sequence.","solution":"def fibonacci(n=10, max_val=float('inf')): Generates a list of Fibonacci numbers up to n terms or until a term exceeds max_val. Parameters: n (int): The number of terms in the series (default is 10). max_val (float): The maximum value up to which the series is generated (default is infinity). Returns: list: A list of Fibonacci numbers. if n <= 0: return [] fib_sequence = [] a, b = 0, 1 for _ in range(n): if a >= max_val: break fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Create a function that accepts a number and returns the factorial of that number. The function should be named \`calculate_factorial\`. If the input number is less than 0, the function should return -1 as an error indicator. For non-negative numbers, calculate the factorial using a dedicated function or using a loop. Ensure your code snippet is self-contained and imports any necessary packages at the beginning.","solution":"def calculate_factorial(n): Returns the factorial of the number n. If n is a negative number, returns -1 as an error indicator. if n < 0: return -1 if n == 0 or n == 1: return 1 factorial = 1 for i in range(2, n + 1): factorial *= i return factorial"},{"question":"Create a function that takes a string and a list of characters. The function should return a new string containing only the characters that are present in the input string but not in the list of characters.","solution":"def filter_string(input_string, char_list): Returns a new string containing only characters from input_string that are not in char_list. Parameters: input_string (str): The string to filter. char_list (list): The list of characters to remove from input_string. Returns: str: A new string with characters from input_string not in char_list. return ''.join([char for char in input_string if char not in char_list])"},{"question":"Create a function that prompts a user to enter their name and then outputs greeting message with a personalized message.","solution":"def greet_user(name): Returns a greeting message with the user's name. return f\\"Hello, {name}! Welcome!\\""},{"question":"Create a function that takes an array of integers and returns the maximum sum of a contiguous subarray. This is a classic example of Kadane's algorithm. However, in this problem, you need to implement it using a stack to keep track of the current subarray sum and a pointer to pretend you are walking through the array with your eyes.","solution":"def max_subarray_sum_using_stack(arr): Returns the maximum sum of a contiguous subarray using a stack-based approach. The function employs a stack to maintain the current sum and uses Kadane's algorithm logic while iterating through the array leveraging the stack. :param arr: List[int] - list of integers :return: int - maximum sum of contiguous subarray if not arr: return 0 # Initialize the maximum sum and current sum max_sum = -float('inf') current_sum = 0 # Iterate through the array elements for num in arr: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum"},{"question":"Create a function that takes a string as input and returns the string after reversing the order of the words in the input string.","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Create a function that generates a non-repeating sequence of characters. The sequence should be a substring of the infinite string formed by repeating the input string 's' indefinitely. A non-repeating sequence is one where no part of the sequence repeats itself in a non-trivial way (i.e., no prefix is repeated immediately after itself, and no segment of the sequence repeats elsewhere in the sequence). The function should also return the position where the sequence starts and ends in the infinite string 's+s...'.","solution":"def non_repeating_subsequence(s): Returns the longest non-repeating subsequence and its start and end positions in the infinite repetition of the string \`s\`. # We need to find the maximum length substring where no repetition occurs in the sequence. n = len(s) max_len = 0 start = 0 end = 0 for i in range(n): seen = set() j = i while (s[j % n] not in seen): seen.add(s[j % n]) j += 1 if j - i > max_len: max_len = j - i start = i end = j non_repeating_seq = ''.join(s[k % n] for k in range(start, end)) return non_repeating_seq, start, end"},{"question":"Create a function that takes in a list of integers, and returns a list of the integers in reverse order. The input list is guaranteed to have at least one element.","solution":"def reverse_list(lst): Returns the input list of integers in reverse order. return lst[::-1]"},{"question":"Create a function that reads a text file, counts the number of lines and then prints the count along with the lines themselves.","solution":"def count_and_print_lines(filepath): Reads the specified text file, counts the number of lines, and prints the count along with the lines. with open(filepath, 'r') as file: lines = file.readlines() line_count = len(lines) print(f\\"Line count: {line_count}\\") for line in lines: print(line.strip()) return line_count, [line.strip() for line in lines]"},{"question":"Create a function that returns the first non-repeating character in a string. If there is no non-repeating character, return \`_\` (underscore).","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string \`s\`. If there is no non-repeating character, return \`_\`. char_count = {} # Count each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char return '_'"},{"question":"Create a function that takes in a string and returns the string with all vowels removed. Non-alphabetic characters should be left untouched.","solution":"def remove_vowels(s): Returns the string with all vowels removed. Non-alphabetic characters are left untouched. vowels = 'aeiouAEIOU' return ''.join([char for char in s if char not in vowels])"},{"question":"Create a function that calculates the factorial of a given positive integer \`n\`. The factorial of a non-negative integer \`n\` is the product of all positive integers less than or equal to \`n\`. This function should handle large numbers up to 20.","solution":"def factorial(n): Returns the factorial of a given non-negative integer \`n\`. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes an integer as an argument and returns its factorial. The function should be implemented using both recursive and iterative methods.","solution":"def factorial_recursive(n): Computes the factorial of a number n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 return n * factorial_recursive(n - 1) def factorial_iterative(n): Computes the factorial of a number n using iteration. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes a sentence as input and returns a list of all the words in the sentence, sorted in alphabetical order. Ensure the input sentence is properly converted to lowercase before sorting.","solution":"def sort_words(sentence): Takes a sentence as input and returns a list of all words in the sentence, sorted in alphabetical order. The input sentence is converted to lowercase before sorting. words = sentence.lower().split() return sorted(words)"},{"question":"Create a function that takes an integer array nums, and an integer k. The function should remove all the elements in nums that appear more than k times and return a new list containing the unique elements.","solution":"def remove_elements(nums, k): Removes all the elements in nums that appear more than k times and returns a new list containing the unique elements. from collections import Counter # Count the occurrences of each number in nums count = Counter(nums) # Keep elements that appear less than or equal to k times result = [num for num in nums if count[num] <= k] return result"},{"question":"Create a function that checks if a given string can be formed by repeating a substring of it. For example, \\"abab\\" can be formed by repeating the substring \\"ab\\".","solution":"def can_form_by_repeating_substring(s): Checks if the given string can be formed by repeating a substring of it. :param s: str - The input string :return: bool - True if it can be formed by repeating a substring, False otherwise if not s: return False doubled_string = s + s # Remove the first and last characters to avoid counting the whole string itself modified_string = doubled_string[1:-1] return s in modified_string"},{"question":"Create a function that takes in a string and returns the number of times a particular letter appears in the string. The function should be case-sensitive.","solution":"def count_letter_occurrences(s, letter): Returns the number of times a particular letter appears in the string. Parameters: s (str): The string to search within. letter (str): The letter to count in the string. Returns: int: Number of occurrences of the letter in the string. return s.count(letter)"},{"question":"Create a function that finds the factorial of a given number. The function should be able to handle large integers, meaning it should be designed to deal with numbers that exceed the standard integer limits in most programming languages.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. If n is 0, the function returns 1 as 0! = 1. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes two lists of integers as inputs and returns a list that contains the intersection of the two lists, with each element appearing only once.","solution":"def intersection(list1, list2): Returns the intersection of two lists as a list with each element appearing only once. return list(set(list1) & set(list2))"},{"question":"Create a function that takes a list of strings and returns a new list containing only the strings that have more than 3 characters in length. Additionally, the function should filter out any strings that contain numbers or special characters.","solution":"import re def filter_strings(strings): Filters out strings that have fewer than 4 characters or contain numbers or special characters. Returns a list of strings that are more than 3 characters in length and only contain alphabetic characters. filtered_strings = [s for s in strings if len(s) > 3 and re.match(\\"^[a-zA-Z]+\\", s)] return filtered_strings"},{"question":"Create a function that calculates the factorial of a number using recursion in Python. Also, handle the case where the input number is less than 0, raising a ValueError with an appropriate message.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, raises a ValueError. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that takes in two numbers, swaps their values and returns both in a tuple. The solution should handle cases where both numbers are of different data types and still correctly swap and return them.","solution":"def swap_values(a, b): Swaps the values of a and b and returns them as a tuple. return b, a"},{"question":"Create a function that checks if a number is divisible by 17, prints it, and saves it to a list. Write a code snippet that generates numbers from 1 to 100 and checks each one using your function.","solution":"def is_divisible_by_17(number, divisible_numbers): Checks if the given number is divisible by 17, prints it, and saves it to the provided list if True. Parameters: number (int): The number to check. divisible_numbers (list): The list to append the number to if it is divisible by 17. if number % 17 == 0: print(number) divisible_numbers.append(number) # Generate numbers from 1 to 100 and check if each is divisible by 17 divisible_by_17_numbers = [] for i in range(1, 101): is_divisible_by_17(i, divisible_by_17_numbers)"},{"question":"Create a function that takes in an integer, and checks if it is a perfect square. If it is, return its square root; otherwise, return the original number.","solution":"import math def check_perfect_square(n): Returns the square root of n if n is a perfect square, otherwise returns n. if n < 0: return n # negative numbers are not perfect squares sqrt_n = math.isqrt(n) if sqrt_n * sqrt_n == n: return sqrt_n else: return n"},{"question":"Create a function that prints each word from a list on a new line using a for loop.","solution":"def print_words(word_list): Prints each word from the given list on a new line. Parameters: word_list (list): A list of words. for word in word_list: print(word)"},{"question":"Create a function that takes a string as a parameter and returns the length of the string using the built-in \`len()\` function. You should also include error handling to ensure that the input is indeed a string. If the input is not a string, the function should raise a ValueError with the message \\"Input must be a string\\".","solution":"def string_length(s): Returns the length of the input string using the built-in len() function. Raises a ValueError if the input is not a string. if not isinstance(s, str): raise ValueError(\\"Input must be a string\\") return len(s)"},{"question":"Create a function that accepts an array and determines the number of elements that are greater than the length of the array and then returns that value.","solution":"def count_elements_greater_than_length(arr): Returns the number of elements in the array that are greater than the length of the array. length = len(arr) return sum(1 for x in arr if x > length)"},{"question":"Create a function that takes in a list of integers and returns a new list containing all the unique elements from the input list, preserving their order and removing duplicates.","solution":"def unique_elements(input_list): Returns a new list containing all unique elements from the input list, preserving their order. :param input_list: List of integers. :return: List of unique integers. seen = set() unique_list = [] for element in input_list: if element not in seen: unique_list.append(element) seen.add(element) return unique_list"},{"question":"Create a function that takes a string containing a mix of lowercase, uppercase, numeric, and special characters. The function should return a string where all the numeric characters have been replaced with their corresponding English word representations (e.g., '1' should be replaced with 'one', '2' with 'two', and so on).","solution":"def replace_digits_with_words(input_string): Replaces all numeric characters in the input string with their corresponding English word representations. Args: input_string (str): The string containing a mix of lowercase, uppercase, numeric, and special characters. Returns: str: The string with numeric characters replaced by their corresponding English words. digit_to_word = { '0': 'zero', '1': 'one', '2': 'two', '3': 'three', '4': 'four', '5': 'five', '6': 'six', '7': 'seven', '8': 'eight', '9': 'nine' } result = ''.join([digit_to_word[char] if char in digit_to_word else char for char in input_string]) return result"},{"question":"Create a function that takes a string input and determines if every character is unique in the string. The function should return true if all characters are unique, and false if there are any duplicate characters.","solution":"def all_unique_characters(s): Returns True if all characters in the string s are unique, else returns False. return len(set(s)) == len(s)"},{"question":"Create a function that takes a string as an input and returns the modified string.","solution":"def reverse_words(input_string): Returns the given string with the words reversed, maintaining original word positions. Parameters: input_string (str): The input string to be modified. Returns: str: The modified string with words reversed. words = input_string.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Create a function that takes an integer array and returns an array where each element is the number of elements greater than the element currently at that position in the original array.","solution":"def count_greater_elements(arr): Returns an array where each element is the number of elements greater than the element currently at that position in the original array. Parameters: arr (list of int): The original integer array. Returns: list of int: An array where each element is the count of elements greater than the element at that position in the original array. result = [] for i in range(len(arr)): count = sum(1 for j in range(len(arr)) if arr[j] > arr[i]) result.append(count) return result"},{"question":"Create a function that takes a string as a parameter and returns a dictionary with the count of occurrences of each character in the string. The dictionary keys should be characters, and the values should be the counts of those characters in the string.","solution":"def count_characters(s): Returns a dictionary with the count of occurrences of each character in the string. Parameters: s (str): The input string. Returns: dict: A dictionary where keys are characters and values are their counts in the string. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Create a function that will take a string and output the longest palindrome that can be constructed by reordering the characters in the string.","solution":"from collections import Counter def longest_palindrome(s): Given a string, output the longest palindrome that can be constructed by reordering the characters in the string. count = Counter(s) length = 0 odd_found = False for char, freq in count.items(): if freq % 2 == 0: length += freq else: length += freq - 1 odd_found = True # Add one character for the center of palindrome if there's an odd frequency character. return length + 1 if odd_found else length"},{"question":"Create a function that takes a list of strings as a parameter and returns a list of lists. Each sublist should contain the characters of the strings in the corresponding position. For example, given the list \`['abc', 'def', 'ghi']\`, the function should return \`[['a', 'd', 'g'], ['b', 'e', 'h'], ['c', 'f', 'i']]\`.","solution":"def transpose_strings(lst): Takes a list of strings and returns a list of lists where each sublist contains the characters from the strings in the corresponding positions. Args: lst (list): List of strings Returns: list: Transposed list of lists # Check if the input list is empty or if the first string is empty if not lst or not lst[0]: return [] # Use zip to transpose the characters in each position transposed = [list(chars) for chars in zip(*lst)] return transposed"},{"question":"Create a function that takes one input the price of something and returns the result of adding the original price to the price after adding 10% of it.","solution":"def add_ten_percent(price): Returns the sum of the original price and the price after adding 10% of it. ten_percent = price * 0.10 new_price = price + ten_percent return new_price"},{"question":"Create a function that takes an array of numbers and returns an array containing the squares of the original numbers. However, if a number is already a perfect square, it should be squared again to double its square value. A perfect square is defined as a number that is the square of an integer.","solution":"import math def process_numbers(nums): Takes an array of numbers and returns an array containing the squares of the original numbers. If a number is already a perfect square, it should be squared again to double its square value. :param nums: List[int] :return: List[int] result = [] for num in nums: sqrt_num = math.isqrt(num) if sqrt_num * sqrt_num == num: # Number is a perfect square result.append(num ** 2) else: # Number is not a perfect square result.append(num ** 2) return result"},{"question":"Create a function that takes a string \`s\` and an integer \`n\` as input. The function should return a new string where each character in the original string \`s\` is repeated \`n\` times consecutively. If \`n\` is less than 0, the function should return the original string \`s\` unchanged.","solution":"def repeat_characters(s, n): Returns a new string where each character in the original string \`s\` is repeated \`n\` times consecutively. If \`n\` is less than 0, returns the original string \`s\` unchanged. if n < 0: return s return ''.join(char * n for char in s)"},{"question":"Create a function that takes a list of integers as input and returns the sum of all even-indexed numbers multiplied by the largest number in the list. If the list is empty, return 0.","solution":"def sum_even_indexed_multiplied_by_max(lst): Returns the sum of all even-indexed numbers multiplied by the largest number in the list. If the list is empty, return 0. if not lst: return 0 max_value = max(lst) sum_even_indexed = sum(lst[i] for i in range(0, len(lst), 2)) return sum_even_indexed * max_value"},{"question":"Create a function that takes two lists of integers as input and returns the sum of all the numbers that are present in both lists.","solution":"def sum_common_elements(list1, list2): Returns the sum of all numbers that are present in both lists. common_elements = set(list1).intersection(set(list2)) return sum(common_elements)"},{"question":"Create a function that takes two arrays as input and returns their element-wise bitwise XOR result. The function should be able to handle arrays of different lengths, in which case the XOR operation will only be performed up to the length of the shorter array.","solution":"def elementwise_xor(arr1, arr2): Returns the element-wise bitwise XOR of two arrays. If the arrays are of different lengths, perform XOR up to the length of the shorter array. return [a ^ b for a, b in zip(arr1, arr2)]"},{"question":"Create a function that reads a line of text from the console and returns word count of the input text.","solution":"def word_count(): Reads a line of text from the console and returns the word count. text = input(\\"Enter a line of text: \\") words = text.split() return len(words)"},{"question":"Create a function that finds the maximum in a list of integers and returns the index of the maximum value. If multiple maximum values exist, return the index of the first occurrence. If the list is empty, return -1.","solution":"def find_max_index(lst): Finds the maximum value in a list of integers and returns the index of the maximum value. If multiple maximum values exist, returns the index of the first occurrence. If the list is empty, returns -1. if not lst: return -1 max_value = lst[0] max_index = 0 for index, value in enumerate(lst): if value > max_value: max_value = value max_index = index return max_index"},{"question":"Create a function that takes an integer input and returns a tuple where the first element is the decimal value, the second element is the binary value, and the third element is the hexadecimal value of the input integer.","solution":"def int_conversion(n): Takes an integer input and returns a tuple where the first element is the decimal value, the second element is the binary value, and the third element is the hexadecimal value of the input integer. decimal_val = n binary_val = bin(n) hexadecimal_val = hex(n) return (decimal_val, binary_val, hexadecimal_val)"},{"question":"Create a function that takes a list of strings and returns a new list containing only the unique strings from the original list, preserving the order of their first occurrence.","solution":"def unique_strings(strings): Given a list of strings, returns a new list containing only the unique strings from the original list, preserving the order of their first occurrence. seen = set() unique_list = [] for string in strings: if string not in seen: seen.add(string) unique_list.append(string) return unique_list"},{"question":"Create a function that takes a list as an argument and returns a dictionary where each key is an element from the list and its value is the count of that element's occurrences in the list.","solution":"def count_elements(lst): Returns a dictionary where each key is an element from the list and its value is the count of that element's occurrences in the list. element_count = {} for element in lst: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 return element_count"},{"question":"Create a function that takes a dictionary and a target key as input and returns the value associated with the target key if it exists, otherwise returns a None. For example, given the dictionary \`{'a': 1, 'b': 2, 'c': 3}\` and the target key \`'b'\`, the function should return \`2\`. If the key does not exist, it should return \`None\`.","solution":"def find_value_in_dict(dictionary, target_key): Returns the value associated with the target key in the dictionary if it exists, otherwise returns None. Parameters: dictionary (dict): The dictionary to search. target_key: The key to find in the dictionary. Returns: The value associated with the target key or None if the key does not exist. return dictionary.get(target_key)"},{"question":"Create a function that transforms a given string into a new string where all characters are in camelCase and are de-duplicated, meaning any duplicate characters in the original string are removed and not included in the new string. The function should then sort the characters in the new string in lexicographical (alphabetical) order.","solution":"def transform_string(s): Transforms the given string into a new string where: - all characters are in camelCase - duplicate characters are removed - the result is sorted in lexicographical order s = s.lower() unique_chars = set(s) sorted_chars = sorted(unique_chars) return ''.join(sorted_chars)"},{"question":"Create a function that generates Fibonacci sequence up to a given number n. What should the function return?","solution":"def generate_fibonacci(n): Generates the Fibonacci sequence up to a given number n. The function returns a list containing the Fibonacci sequence up to n (inclusive). if n < 0: raise ValueError(\\"n must be a non-negative integer.\\") fib_sequence = [] a, b = 0, 1 while a <= n: fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Create a function that takes a positive integer as input and returns a list of all divisors of that number, excluding the number itself. For example, if the input is 12, the function should return [1, 2, 3, 4, 6].","solution":"def divisors(n): Returns a list of all divisors of a positive integer n, excluding n itself. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") return [i for i in range(1, n) if n % i == 0]"},{"question":"Create a function that reverses a string from the beginning to the end.","solution":"def reverse_string(s): Returns the reverse of the string s. return s[::-1]"},{"question":"Create a function that takes in a list of integers and return the first even number it finds in the list. If there are no even numbers, then return None.","solution":"def first_even_number(numbers): for number in numbers: if number % 2 == 0: return number return None"},{"question":"Create a function that takes a string as input and returns the string in reverse order. However, the function should ignore any non-alphabetic characters and preserve their positions in the returned string.","solution":"def reverse_string_ignore_non_alpha(s): Returns the input string in reverse order, but only changes the positions of alphabetic characters. Non-alphabet characters remain in their original positions. # Extract alphabetic characters letters = [c for c in s if c.isalpha()] reversed_letters = letters[::-1] # Create a list of the final result to build upon result = list(s) # Replace alphabetic characters in the original string with the reversed ones reversed_iter = iter(reversed_letters) for i in range(len(result)): if result[i].isalpha(): result[i] = next(reversed_iter) return ''.join(result)"},{"question":"Create a function that takes two sorted lists of integers and returns their union as a new sorted list without duplicates. The function should handle large data efficiently.","solution":"def union_sorted_lists(list1, list2): Returns the union of two sorted lists as a new sorted list without duplicates. result = [] i, j = 0, 0 len1, len2 = len(list1), len(list2) while i < len1 and j < len2: if list1[i] < list2[j]: if not result or list1[i] != result[-1]: result.append(list1[i]) i += 1 elif list1[i] > list2[j]: if not result or list2[j] != result[-1]: result.append(list2[j]) j += 1 else: if not result or list1[i] != result[-1]: result.append(list1[i]) i += 1 j += 1 while i < len1: if not result or list1[i] != result[-1]: result.append(list1[i]) i += 1 while j < len2: if not result or list2[j] != result[-1]: result.append(list2[j]) j += 1 return result"},{"question":"Create a function that takes a list of integers and returns the indices of the two numbers such that they add up to a specific target number. This is known as the \\"Two Sum\\" problem.","solution":"def two_sum(nums, target): Given a list of integers, return the indices of the two numbers such that they add up to a specific target. Args: nums: List[int] - The list of integers. target: int - The target sum. Returns: List[int] - The indices of the two numbers that add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Create a function that takes a list of tuples, each representing a point in 2D space. The function will return a new list of tuples, where each tuple is the result of adding a constant integer value to each component of the original tuples. The function should be generic and should work with any number of points, each potentially having a different number of coordinates.","solution":"def translate_points(points, value): Translates each point in the list by adding a constant integer value to each coordinate. Parameters: points (list of tuples): List of points, where each point is represented as a tuple of coordinate values. value (int): The constant integer value to add to each coordinate of the points. Returns: List of tuples: New list with each coordinate of the points translated by the given value. return [(x + value, y + value) for (x, y) in points]"},{"question":"Create a function that converts a string to its hexadecimal representation. How can this be done in Python?","solution":"def string_to_hex(s): Converts a string to its hexadecimal representation. :param s: input string :return: string in hexadecimal format return s.encode('utf-8').hex()"},{"question":"Create a function that takes an array of numbers and returns a new array with the numbers sorted in descending order.","solution":"def sort_descending(arr): Takes a list of numbers and returns a new list with the numbers sorted in descending order. return sorted(arr, reverse=True)"},{"question":"Create a function that takes a list of integers and returns a list of integers representing the cumulative sum of the input list.","solution":"def cumulative_sum(lst): Returns a list where each element is the cumulative sum of elements up to that point in the input list. cum_sum = [] current_sum = 0 for num in lst: current_sum += num cum_sum.append(current_sum) return cum_sum"},{"question":"Create a function that takes two integers, \`n\` and \`k\`, and returns the k-th smallest divisor of \`n\`.","solution":"def kth_smallest_divisor(n, k): Returns the k-th smallest divisor of n. Parameters: n (int): The integer whose divisors to find. k (int): The k-th position of the divisor to return. Returns: int: The k-th smallest divisor of n. If the k-th smallest divisor does not exist, returns -1. divisors = [i for i in range(1, n + 1) if n % i == 0] if k <= len(divisors): return divisors[k - 1] else: return -1"},{"question":"Create a function that takes in two strings as parameters and returns the concatenated result of the two strings separated by a space.","solution":"def concatenate_with_space(str1, str2): Concatenates two strings with a space in between. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: str: The concatenated string separated by a space. return str1 + \\" \\" + str2"},{"question":"Create a function that takes two numbers as parameters and returns their division result.","solution":"def divide(a, b): Returns the division of a by b. Parameters: a (int or float): The dividend. b (int or float): The divisor. Returns: float: The result of the division. Raises: ValueError: If b is zero. if b == 0: raise ValueError(\\"Division by zero is not allowed\\") return a / b"},{"question":"Create a function that takes an integer as a parameter and returns the sum of the squares of all the odd numbers between 1 and the given integer (inclusive). The function should be named \`sum_of_squares\` and should not include any global variables or external dependencies.","solution":"def sum_of_squares(n): Returns the sum of the squares of all the odd numbers between 1 and n (inclusive). Args: n (int): The upper limit integer (inclusive). Returns: int: The sum of the squares of all the odd numbers between 1 and n (inclusive). return sum(i ** 2 for i in range(1, n + 1) if i % 2 != 0)"},{"question":"Create a function that takes a list of integers as an argument and returns the list sorted in descending order. You should use Python's built-in sorting functions to accomplish this.","solution":"def sort_descending(lst): Returns the list sorted in descending order. return sorted(lst, reverse=True)"},{"question":"Create a function that checks whether all elements in a linked list are even numbers. The function should return true if all elements are even, and false otherwise.","solution":"class Node: def __init__(self, data=None, next=None): self.data = data self.next = next def are_all_elements_even(head): Checks whether all elements in the linked list are even numbers. current = head while current is not None: if current.data % 2 != 0: return False current = current.next return True"},{"question":"Create a function that encrypts a given string by converting each alphabetical character to its ASCII value and then appending the next alphabetical character in the ASCII sequence. For example, 'a' becomes '97b', 'B' becomes '66C', where 'a' is the ASCII value 97 and 'b' is the next character in the sequence. The non-alphabetical characters should remain unchanged.","solution":"def encrypt_string(s): Encrypts a given string by converting each alphabetical character to its ASCII value and then appending the next alphabetical character in the ASCII sequence. Non-alphabetical characters remain unchanged. encrypted = [] for char in s: if char.isalpha(): ascii_value = ord(char) next_char = chr(ascii_value + 1) encrypted.append(f\\"{ascii_value}{next_char}\\") else: encrypted.append(char) return ''.join(encrypted)"},{"question":"Create a function that takes two parameters, a positive integers \`n\` and \`k\`, and returns a list of length \`k\` with random elements chosen from a list of integers from 1 to \`n\`. The function should ensure that the same element is not chosen more than once in the returned list.","solution":"import random def unique_random_list(n, k): Returns a list of length k with random unique elements chosen from a list of integers from 1 to n. Parameters: n (int): the maximum number in the range of integers (inclusive) k (int): the length of the resulting list, must be less than or equal to n Returns: list: a list of k unique random integers from 1 to n if k > n: raise ValueError(\\"k must be less than or equal to n.\\") return random.sample(range(1, n + 1), k)"},{"question":"Create a function that takes in a integer and returns the sum of all integers from 1 to that number. For example, sum_numbers(5) should return 15, since 1 + 2 + 3 + 4 + 5 = 15.","solution":"def sum_numbers(n): Returns the sum of all integers from 1 to n. return sum(range(1, n+1))"},{"question":"Create a function that takes an input array and returns the maximum product of any two distinct numbers in the array. The array will have at least two numbers.","solution":"def max_product_of_two(array): Returns the maximum product of any two distinct numbers in the array. :param array: List of integers :return: The maximum product of any two distinct numbers in the array if len(array) < 2: raise ValueError(\\"Array must contain at least two numbers.\\") max1 = max2 = float('-inf') min1 = min2 = float('inf') for number in array: if number > max1: max2 = max1 max1 = number elif number > max2: max2 = number if number < min1: min2 = min1 min1 = number elif number < min2: min2 = number return max(max1 * max2, min1 * min2)"},{"question":"Create a function that takes a positive integer as input and returns the sum of the squares of the digits in the integer. For example, if the input is 123, the function should return 1² + 2² + 3² = 14.","solution":"def sum_of_squares_of_digits(n): Returns the sum of the squares of the digits of the given positive integer n. Parameters: n (int): A positive integer. Returns: int: The sum of the squares of the digits of n. return sum(int(digit)**2 for digit in str(n))"},{"question":"Create a function that generates a list of the first n prime numbers using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Returns a list of the first n prime numbers using the Sieve of Eratosthenes algorithm. if n < 1: return [] # We need an upper bound to use for finding primes. # A common practical way to estimate upper bound is using n * log(n) + n * log(log(n)) import math if n < 6: upper_bound = 15 else: upper_bound = int(n * math.log(n) + n * math.log(math.log(n))) sieve = [True] * (upper_bound + 1) sieve[0] = sieve[1] = False for start in range(2, int(upper_bound**0.5) + 1): if sieve[start]: for i in range(start*start, upper_bound + 1, start): sieve[i] = False primes = [num for num, is_prime in enumerate(sieve) if is_prime] return primes[:n]"},{"question":"Create a function that takes in a list of numbers and returns the frequency of each number. The function should ignore any duplicate entries.","solution":"def unique_frequency(numbers): Returns the frequency of each unique number in the list. from collections import Counter unique_numbers = list(set(numbers)) frequency_count = Counter(unique_numbers) return frequency_count"},{"question":"Create a function that will return a dictionary whose keys are the indices of non-zero elements in an array. The values in the dictionary should be the actual numbers from the array.","solution":"def get_non_zero_indices(arr): Returns a dictionary whose keys are the indices of non-zero elements in the array, and the values are the actual non-zero elements from the array. return {index: num for index, num in enumerate(arr) if num != 0}"},{"question":"Create a function that takes a string as input, and returns the string with all the vowels removed. Additionally, reverse the modified string before returning it. For example, if the input is \\"Hello, World!\\", the output should be \\"!dlroW olleH\\".","solution":"def remove_vowels_and_reverse(s): Removes all vowels from the input string and reverses the modified string. Args: s (str): Input string. Returns: str: Modified string with vowels removed and reversed. vowels = \\"aeiouAEIOU\\" no_vowels = ''.join([char for char in s if char not in vowels]) return no_vowels[::-1]"},{"question":"Create a function that calculates the factorial of a given number. The function should return the factorial of the number if it is a non-negative integer and raise an appropriate exception if the input is a negative number or not an integer. The function should be recursive.","solution":"def factorial(n): Returns the factorial of n. If n is a negative integer or not an integer, raises a ValueError. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that takes a filename as an argument and prints the lines of the file that contain the word \\"error\\". The function should work for any file of multiple lines.","solution":"def print_lines_with_error(filename): Prints lines that contain the word \\"error\\" from the given file. Args: - filename (str): The name of the file to read from. with open(filename, 'r') as file: lines = file.readlines() for line in lines: if 'error' in line.lower(): # Make the search case-insensitive print(line, end='')"},{"question":"Create a function that checks if a given number is even or odd. The function will take an integer as input and return a string indicating whether the number is \\"Even\\" or \\"Odd\\". Additionally, include a simple test function to verify the correctness of your function with a few test cases.","solution":"def check_even_or_odd(number): Returns \\"Even\\" if the number is even, otherwise returns \\"Odd\\". if number % 2 == 0: return \\"Even\\" else: return \\"Odd\\""},{"question":"Create a function that takes in a list of integers and returns the index of the first occurrence of an integer that is both even and negative. If no such integer exists, return -1.","solution":"def first_negative_even_index(lst): Returns the index of the first occurrence of an integer that is both even and negative. If no such integer exists, returns -1. for index, value in enumerate(lst): if value < 0 and value % 2 == 0: return index return -1"},{"question":"Create a function that takes a string s as an argument, and reverse each word within the string.","solution":"def reverse_each_word(s): Returns a string with each word reversed but still in the original order. return ' '.join(word[::-1] for word in s.split(' '))"},{"question":"Create a function that takes a string as an argument and returns the number of times a character appears in the string. The function should also return the character that appears most frequently. If there are multiple characters with the same maximum frequency, return any one of them.","solution":"def char_frequency(s): Returns a dictionary with characters as keys and their frequencies as values, and the character that appears most frequently. If there are multiple characters with the same maximum frequency, returns any one of them. if not s: return {}, None freq = {} max_char = s[0] max_count = 0 for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 if freq[char] > max_count: max_count = freq[char] max_char = char return freq, max_char"},{"question":"Create a function that takes an input value and returns the nearest integer that is divisible by 3. If the number is already divisible by 3, return the same number. If it's not divisible by 3, round it to the nearest divisible number.","solution":"def nearest_divisible_by_3(n): Returns the nearest integer that is divisible by 3. If the number is already divisible by 3, returns the same number. If not, returns the nearest integer divisible by 3. if n % 3 == 0: return n lower_diff = n % 3 upper_diff = 3 - lower_diff if lower_diff < upper_diff: return n - lower_diff # Closer to the lower number divisible by 3 else: return n + upper_diff # Closer to the upper number divisible by 3"},{"question":"Create a function that takes in a number and checks if it is a perfect square. If it is a perfect square, return true. Otherwise, return false. The function should handle both integer and floating-point numbers.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, otherwise False. Can handle both integer and floating-point numbers. if n < 0: return False sqrt_n = math.isqrt(int(n)) return sqrt_n * sqrt_n == n"},{"question":"Create a function that converts a given number of seconds into minutes, seconds, and milliseconds.","solution":"def convert_seconds(seconds): Converts a given number of seconds into minutes, seconds, and milliseconds. Parameters: seconds (float): Number of seconds to be converted. Returns: tuple: A tuple containing (minutes, seconds remainder, milliseconds) minutes = int(seconds // 60) seconds_remainder = int(seconds % 60) milliseconds = int((seconds - int(seconds)) * 1000) return (minutes, seconds_remainder, milliseconds)"},{"question":"Create a function that takes an array of integers as an input and returns the index of the first occurrence of a number that is greater than its immediate predecessor in the array. If no such number is found, return -1.","solution":"def first_greater_than_predecessor(arr): Returns the index of the first occurrence of a number that is greater than its immediate predecessor in the array. If no such number is found, returns -1. Parameters: arr (list of int): The input array of integers. Returns: int: The index of the first occurrence of a number greater than its predecessor, or -1 if no such number exists. for i in range(1, len(arr)): if arr[i] > arr[i-1]: return i return -1"},{"question":"Create a function that takes a string as a parameter. If the string is read the same backward as forward, it returns \\"Palindrome\\". If not, it returns \\"Not a Palindrome\\". The function should be case-insensitive.","solution":"def is_palindrome(s): Returns 'Palindrome' if the string is read the same backward as forward, otherwise 'Not a Palindrome'. The function is case-insensitive. # Make the string case-insensitive s = s.lower() # Remove any spaces for accurate palindrome checking s = s.replace(\\" \\", \\"\\") # Check if the string is the same forward and backward if s == s[::-1]: return \\"Palindrome\\" else: return \\"Not a Palindrome\\""},{"question":"Create a function that takes a list of integers as an input and returns the sum of all the negative numbers in the list. If there are no negative numbers, the function should return 0.","solution":"def sum_of_negative_numbers(lst): Returns the sum of all negative numbers in the input list. If there are no negative numbers, returns 0. return sum(n for n in lst if n < 0)"},{"question":"Create a function that accepts a list of integers and returns the sum of all items in the list. If any item in the list is less than 0, the function should immediately return -1.","solution":"def sum_list(lst): Returns the sum of all items in the list. If any item in the list is less than 0, the function immediately returns -1. for item in lst: if item < 0: return -1 return sum(lst)"},{"question":"Create a function that takes two numbers as input, multiplies them, and returns the result. Write the code in Python.","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Create a function that takes in an integer array and returns the maximum sum of any contiguous sub-array within that array. This is known as Kadane's algorithm problem in dynamic programming.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous sub-array within the given array. Implements Kadane's algorithm. :param arr: List[int], list of integers :return: int, maximum sum of any contiguous sub-array if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes a string S of length N (2 <= N <= 100), consisting of lowercase alphabets from a to z. The function should return the minimum number of deletions required to ensure that the remaining string is a palindrome. A palindrome is a string that reads the same forward and backward.","solution":"def min_deletions_to_palindrome(S): Returns the minimum number of deletions required to make the string S a palindrome. N = len(S) # Create a table to store results of subproblems dp = [[0] * N for _ in range(N)] # Fill the table for gap in range(1, N): for l in range(N - gap): h = l + gap if S[l] == S[h]: dp[l][h] = dp[l + 1][h - 1] else: dp[l][h] = min(dp[l + 1][h], dp[l][h - 1]) + 1 return dp[0][N - 1]"},{"question":"Create a function that takes in a string and capitalizes the first letter of each word in the string. For example, given the string \\"hello world\\", the function should return \\"Hello World\\".","solution":"def capitalize_words(s): Capitalizes the first letter of each word in the string s. :param s: String input :return: String with each word's first letter capitalized return ' '.join(word.capitalize() for word in s.split())"},{"question":"Create a function that accepts three parameters: an integer array, a list of integers, and a positive integer. The function should return a new integer array with elements from the original array sorted in reverse (descending) order based on their frequency. If two elements have the same frequency, they should be sorted based on the positive integer divisor provided. If the divisor is the same, then sort them based on their original order in the input array. The function should have a time complexity of O(NlogN).","solution":"from collections import Counter from typing import List, Tuple def custom_sort(arr: List[int], div_order: List[int], divisor: int) -> List[int]: Sorts the array based on the frequency of elements in descending order. If elements have the same frequency, sort them based on the positions given in div_order. If both frequency and div_order are the same, maintain the original order of elements. Time complexity is O(NlogN). :param arr: List of integers. :param div_order: List of integers to determine precedence in case of frequency ties. :param divisor: A positive integer divisor for further tie breaking. :return: New list sorted as described. counter = Counter(arr) div_positions = {v: i for i, v in enumerate(div_order)} def sort_key(x: int) -> Tuple[int, int, int]: return (-counter[x], div_positions.get(x, float('inf')), x % divisor) return sorted(arr, key=sort_key)"},{"question":"Create a function that takes an array of integers as input and returns the length of the longest increasing subsequence (LIS) in the array. An increasing subsequence is a sequence of numbers such that each number is strictly larger than the previous number.","solution":"def length_of_LIS(nums): Returns the length of the longest increasing subsequence (LIS) in the array \`nums\`. if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Create a function that checks if a given string is a valid email address using Python. The function should return \`True\` if the string is a valid email format, and \`False\` otherwise.","solution":"import re def is_valid_email(email): Checks if the provided string is a valid email address. Parameters: email (str): The string to be checked. Returns: bool: True if the string is a valid email address, False otherwise. email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' return bool(re.match(email_regex, email))"},{"question":"Create a function that sums up numbers from a specified starting point to an ending point. The function must handle arrays of integers, ensuring that the function only sums positive integers.","solution":"def sum_positive_numbers(start, end, numbers): Sums up the positive integers in the array \`numbers\` from index \`start\` to \`end\` inclusive. if start < 0 or end >= len(numbers) or start > end: raise ValueError(\\"Invalid start or end index\\") return sum(num for num in numbers[start:end+1] if num > 0)"},{"question":"Create a function that takes a tree as an argument and returns the sum of all node values in the tree. Assume the tree is represented as a nested dictionary in Python, where each node is a dictionary with keys 'value', 'left', and 'right', and 'left' and 'right' can either be None or another dictionary representing another node.","solution":"def sum_tree(tree): Returns the sum of all node values in the tree. :param tree: A dictionary representing the tree. :return: An integer representing the sum of all node values. if tree is None: return 0 return tree['value'] + sum_tree(tree['left']) + sum_tree(tree['right'])"},{"question":"Create a function that takes a list of integers and returns the largest sum of non-adjacent numbers. This means you cannot take the sum of two numbers that are next to each other in the list.","solution":"def largest_non_adjacent_sum(nums): Given a list of integers, returns the largest sum of non-adjacent numbers. if not nums: return 0 if len(nums) == 1: return nums[0] incl = nums[0] excl = 0 for num in nums[1:]: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"Create a function that reverses a given list using recursion in Python. Answer: def reverse_list(lst): if len(lst) == 0: return [] else: return [lst[-1]] + reverse_list(lst[:-1]) Test the function with the input list [1, 2, 3, 4, 5].","solution":"def reverse_list(lst): Recursively reverses a given list. if len(lst) == 0: return [] else: return [lst[-1]] + reverse_list(lst[:-1])"},{"question":"Create a function that takes a list of integers \`nums\` and a target integer \`target\`. The function should return the index of the first occurrence of \`target\` in \`nums\`. If \`target\` is not found in \`nums\`, return -1. Assume all elements in \`nums\` are unique.","solution":"def find_target_index(nums, target): Finds the index of the first occurrence of target in nums. If target is not found, returns -1. try: return nums.index(target) except ValueError: return -1"},{"question":"Create a function that finds the maximum product of any array subset. The array can contain both positive and negative integers.","solution":"from itertools import combinations from functools import reduce def max_product_of_subset(arr): Returns the maximum product of any subset of the given array. params: arr (list): A list of integers containing both positive and negative numbers. return: int: The maximum product of any subset of the array. if not arr: return 0 max_product = float('-inf') # Try all possible subset sizes for r in range(1, len(arr) + 1): for subset in combinations(arr, r): product = reduce((lambda x, y: x * y), subset) if product > max_product: max_product = product return max_product"},{"question":"Create a function that takes a string as input and returns the number of occurrences of each character in the string. The function should ignore caseensitivity and consider only alphabetic characters.","solution":"def count_char_occurrences(input_string): Takes a string as input and returns the number of occurrences of each character in the string. It ignores case sensitivity and considers only alphabetic characters. from collections import Counter # Normalize the input string normalized_string = ''.join(filter(str.isalpha, input_string)).lower() # Use Counter to count occurrences of each character char_count = Counter(normalized_string) return dict(char_count)"},{"question":"Create a function that generates a list of even numbers between two integers (inclusive) and returns any found even numbers in ascending order. For instance, if the inputs are 2 and 8, the function should return [2, 4, 6, 8]. If the inputs are 8 and 2, it should still return [2, 4, 6, 8]. If there are no even numbers in between, it should return an empty list.","solution":"def get_even_numbers(start, end): Generates a list of even numbers between two integers (inclusive) and returns them in ascending order. if start > end: start, end = end, start return [num for num in range(start, end + 1) if num % 2 == 0]"},{"question":"Create a function that takes a list of non-negative integers and returns a new list containing the squares of the integers in ascending order. The function should handle duplicate integers and ensure that the output list is sorted in descending order.","solution":"def square_and_sort_descending(nums): Takes a list of non-negative integers and returns a new list containing the squares of the integers in descending order. squared_nums = [num ** 2 for num in nums] return sorted(squared_nums, reverse=True)"},{"question":"Create a function that takes a list of integers and returns a new list with the elements in a specific order.","solution":"def reorder_elements(lst): This function takes a list of integers and reorders the list such that all even numbers come before all odd numbers, while maintaining the relative order of even and odd numbers. Args: lst (list): A list of integers. Returns: list: A new list with elements reordered. if not lst: return [] evens = [num for num in lst if num % 2 == 0] odds = [num for num in lst if num % 2 != 0] return evens + odds"},{"question":"Create a function that takes an integer as an argument and returns the factorial of that integer. The function should handle both positive and negative integers. For negative integers, the function should return \\"Invalid input\\".","solution":"def factorial(n): Returns the factorial of a given integer n. If n is negative, returns 'Invalid input'. if n < 0: return \\"Invalid input\\" elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that rearranges an array so that all \\" hòa \\" elements come before all \\" không hòa \\" elements in-place. Assume that the array contains only two distinct elements.","solution":"def rearrange_array(arr, pivot=\\"hòa\\"): Rearranges the array so that all \\"hòa\\" elements come before all \\"không hòa\\" elements in-place. left = 0 right = len(arr) - 1 while left < right: while left < right and arr[left] == pivot: left += 1 while left < right and arr[right] != pivot: right -= 1 if left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Create a function that takes no parameters and returns a list of all even numbers from 1 to 100, inclusive.","solution":"def get_even_numbers(): Returns a list of all even numbers from 1 to 100, inclusive. return [i for i in range(1, 101) if i % 2 == 0]"},{"question":"Create a function that will take a string and return the count of occurrences of a specific character in the string. For example, if the function is called with \\"hello\\" and 'l', the function should return 2.","solution":"def count_char_occurrences(s, char): Returns the count of occurrences of a specific character in the string. Parameters: s (str): The string to search in. char (str): The character to count. Returns: int: The count of occurrences of the character. return s.count(char)"},{"question":"Create a function that outputs the最高(最高 means \\"highest\\" in English) value of three numbers.","solution":"def highest_of_three(a, b, c): Returns the highest value among three numbers a, b, and c. return max(a, b, c)"},{"question":"Create a function that takes two integers (a and b) and returns the sum of all integers between them, inclusive. These integers may not be in ascending order.","solution":"def sum_between(a, b): Returns the sum of all integers between a and b, inclusive. The integers a and b may not be in ascending order. if a > b: a, b = b, a return sum(range(a, b + 1))"},{"question":"Create a function that calculates the factorial of a number using recursion in a Python class.","solution":"class FactorialCalculator: def factorial(self, n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: return n * self.factorial(n - 1)"},{"question":"Create a function that checks if a given number is a prime number and returns a message indicating whether it is prime or not.","solution":"def is_prime(n): Checks if a given number is a prime number. Args: n (int): The number to check. Returns: str: A message indicating whether the number is prime or not. if n <= 1: return f\\"{n} is not a prime number\\" if n == 2: return f\\"{n} is a prime number\\" if n % 2 == 0: return f\\"{n} is not a prime number\\" for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return f\\"{n} is not a prime number\\" return f\\"{n} is a prime number\\""},{"question":"Create a function that takes the root node of a binary tree and checks whether the tree is a binary search tree (BST). A binary search tree has all left children less than or equal to its parent, and all right children greater than or equal to its parent. How can this be done?","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_bst(node, left=float('-inf'), right=float('inf')): Returns True if the binary tree with the given root node is a binary search tree (BST), and False otherwise. if node is None: return True if not (left <= node.value <= right): return False return is_bst(node.left, left, node.value) and is_bst(node.right, node.value, right)"},{"question":"Create a function that takes a string and returns the length of the string when each character's ASCII value is increased by 1. For example, changing 'A' to 'B', 'a' to 'b', '9' to '0', and so on.","solution":"def length_after_shift(s): Returns the length of the string when each character's ASCII value is increased by 1. transformed_string = ''.join(chr(ord(char) + 1) for char in s) return len(transformed_string)"},{"question":"Create a function that takes two positive integers as arguments and returns their least common multiple. The function should use the greatest common divisor (GCD) method to calculate the LCM.","solution":"def gcd(a, b): Returns the greatest common divisor of a and b using Euclid's algorithm. while b: a, b = b, a % b return a def lcm(a, b): Returns the least common multiple of a and b using the GCD method. lcm(a, b) = abs(a*b) / gcd(a, b) return abs(a * b) // gcd(a, b)"},{"question":"Create a function that takes two integers, \`a\` and \`b\`, and returns the greatest common divisor (GCD) of the two numbers. The function should handle both positive and negative integers. Additionally, your function should be able to handle large integers that exceed the limit of typical integer types in most programming languages.","solution":"import math def gcd(a, b): Returns the greatest common divisor (GCD) of a and b. The function handles both positive and negative integers. return math.gcd(a, b)"},{"question":"Create a function that returns the smallest element in a list. If the list is empty, the function should return None. Use Python.","solution":"def find_smallest_element(lst): Returns the smallest element in the list. If the list is empty, returns None. if not lst: return None return min(lst)"},{"question":"Create a function that takes a string and returns the string in all capital letters.","solution":"def to_uppercase(s): Returns the given string s in all capital letters. return s.upper()"},{"question":"Create a function that takes an integer as an input and returns its binary representation as a string. The function should handle both positive and negative integers. For positive integers, the function should return the standard binary representation prefixed with '0b' to indicate binary. For negative integers, the function should return the two's complement representation as a string.","solution":"def int_to_binary(n): Converts an integer to its binary representation as a string. - For positive integers: returns the standard binary representation prefixed with '0b'. - For negative integers: returns the two's complement representation as a string. if n >= 0: return '0b' + bin(n)[2:] else: return bin(n & 0xffffffff) # Two's complement for 32-bit integers"},{"question":"Create a function that takes a positive integer and returns a list of numbers up to the given number that are divisible by three and five, and if a number is divisible by both, include it only once in the list.","solution":"def divisible_by_three_and_five(n): Returns a list of numbers up to n that are divisible by three and five. Each number divisible by three and five is included only once. result = [] for i in range(1, n+1): if i % 3 == 0 and i % 5 == 0: result.append(i) return result"},{"question":"Create a function that will accept a list of integers and return a new list containing only the even numbers from the input list. The function should be named \`filter_even_numbers\` and take a list of integers as its parameter.","solution":"def filter_even_numbers(numbers): Returns a list containing only the even numbers from the input list. :param numbers: List of integers :return: List of even integers return [num for num in numbers if num % 2 == 0]"},{"question":"Create a function that takes a 2D array of integers represented as a vector of vectors and returns the sum of all positive integers in the array. If there are no positive integers, return 0.","solution":"def sum_positive_integers(matrix): Returns the sum of all positive integers in the 2D array. If there are no positive integers, returns 0. total = 0 for row in matrix: for num in row: if num > 0: total += num return total"},{"question":"Create a function that takes as input a list of integers, and returns \`True\` if all the integers in the list are in ascending order and exactly one integer is repeated, otherwise returns \`False\`.","solution":"def is_ascending_with_one_duplicate(lst): Returns True if all integers in the list are in ascending order and exactly one integer is repeated, otherwise returns False. if len(lst) < 2: return False unique_elements = set() duplicate_count = 0 for i in range(1, len(lst)): if lst[i] < lst[i - 1]: return False if lst[i] == lst[i - 1]: duplicate_count += 1 unique_elements.add(lst[i - 1]) unique_elements.add(lst[-1]) return duplicate_count == 1 and len(unique_elements) == len(lst) - 1"},{"question":"Create a function that identifies the longest sequence of consecutive numbers in an unsorted list.","solution":"def longest_consecutive_sequence(nums): Identifies the longest sequence of consecutive numbers in an unsorted list. :param nums: List[int] :return: int if not nums: return 0 nums = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums: current_num = num current_streak = 1 while current_num + 1 in nums: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Create a function that takes an array of integers as input and returns the maximum sum of a subarray. This subarray must contain at least one element. To solve this, apply the Kadane's algorithm, which involves iterating through the array while keeping track of the current sum and the maximum sum encountered so far.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a subarray using Kadane's algorithm. Args: nums (list of int): The input array of integers. Returns: int: The maximum sum of a subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that returns the number of unique elements in an array of integers. For example, given the array [1, 2, 2, 3, 4, 4, 5], the function should return 5.","solution":"def count_unique_elements(arr): Returns the number of unique elements in an array of integers. Parameters: arr (list): The input array of integers. Returns: int: The number of unique elements in the array. return len(set(arr))"},{"question":"Create a function that takes an array of integers and returns the second largest number in the array. If there is no second largest number, it should return \`None\`. Consider edge cases such as arrays with duplicate numbers and arrays with just one unique number.","solution":"def second_largest(arr): Returns the second largest number in an array of integers. If there is no second largest number, returns None. if len(arr) < 2: return None unique_numbers = list(set(arr)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Create a function that takes a list of integers as input and returns the sum of the squares of those integers. The function should have a docstring explaining its purpose, parameters, and return value.","solution":"def sum_of_squares(numbers): This function takes a list of integers as input and returns the sum of the squares of those integers. Parameters: numbers (list): A list of integers. Returns: int: The sum of the squares of the input integers. return sum(x**2 for x in numbers)"},{"question":"Create a function that takes an array of integers as input and returns the difference between the largest and smallest numbers in the array. If the array is empty, return 0.","solution":"def min_max_difference(arr): Returns the difference between the largest and smallest numbers in the array. If the array is empty, return 0. if not arr: return 0 return max(arr) - min(arr)"},{"question":"Create a function that identifies all prime numbers up to a given limit and returns them as a list. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, 2, 3, 5, 7, 11, and 13 are all prime numbers. Your function should be efficient and suitable for large numbers.","solution":"def sieve_of_eratosthenes(limit): Returns a list of all prime numbers up to the given limit using the Sieve of Eratosthenes algorithm. if limit < 2: return [] # Initialize a boolean array to True sieve = [True] * (limit + 1) sieve[0], sieve[1] = False, False # 0 and 1 are not primes for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit + 1, start): sieve[multiple] = False # Generate the list of primes primes = [num for num, is_prime in enumerate(sieve) if is_prime] return primes"},{"question":"Create a function that takes a string as input and returns the reversed string. The function should handle strings containing letters, numbers, and symbols. Additionally, the function should not change the case of the letters (i.e., upper-case letters stay upper-case and lower-case letters stay lower-case). Additionally, you need to consider potential edge cases such as null or empty strings.","solution":"def reverse_string(s): Returns the reversed string of the input string s. The function handles letters, numbers, and symbols. if s is None: return None return s[::-1]"},{"question":"Create a function that takes two parameters: an array and a value. The function should return true if the value is present in the array, and false otherwise. However, the function should implement a linear search algorithm.","solution":"def linear_search(array, value): Returns True if value is present in the array, False otherwise. Implements a linear search algorithm. for element in array: if element == value: return True return False"},{"question":"Create a function that identifies the most frequently occurring element in a given list of integers and returns it. In case of a tie, return the smallest number.","solution":"from collections import Counter def most_frequent_element(lst): Returns the most frequently occurring element in the given list of integers. In case of a tie, returns the smallest number among the most frequently occurring elements. if not lst: return None # Return None if the list is empty counter = Counter(lst) most_common = counter.most_common() # Find the highest frequency max_frequency = most_common[0][1] # Collect all elements with the highest frequency max_elements = [elem for elem, freq in most_common if freq == max_frequency] # Return the smallest element among the ones with the highest frequency return min(max_elements)"},{"question":"Create a function that takes in a dictionary and returns a new list with all the dictionary keys. But the order of the keys in the returned list should not be based on their dictionary order, but rather on the frequency of each key's appearance across the values in the dictionary.","solution":"from collections import Counter def keys_sorted_by_frequency(d): Returns a list of dictionary keys sorted by their frequency of appearance across the values. Args: d (dict): The input dictionary. Returns: list: A list of keys sorted by their appearance frequency across values. # Create a list of all items from the dictionary values values = [item for sublist in d.values() for item in sublist] # Count the frequency of each key frequency = Counter(values) # Sort the dictionary keys based on the frequency sorted_keys = sorted(frequency.keys(), key=lambda k: frequency[k], reverse=True) return sorted_keys"},{"question":"Create a function that takes in an integer and returns the number of its prime factors.","solution":"def count_prime_factors(n): Returns the number of prime factors of the integer n. if n <= 1: return 0 prime_factors_count = 0 # Check the number of 2s that divide n while n % 2 == 0: prime_factors_count += 1 n = n // 2 # n must be odd at this point, so we can skip even numbers for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: prime_factors_count += 1 n = n // i # This condition is to check if n is a prime number greater than 2 if n > 2: prime_factors_count += 1 return prime_factors_count"},{"question":"Create a function that calculates the sum of integers from 0 to n-1 that are divisible by both 3 and 5.","solution":"def sum_divisible_by_3_and_5(n): Calculates the sum of integers from 0 to n-1 that are divisible by both 3 and 5. return sum(x for x in range(n) if x % 3 == 0 and x % 5 == 0)"},{"question":"Create a function that takes in two numbers, a and b, and returns the remainder when a is divided by b.","solution":"def remainder(a, b): Returns the remainder when a is divided by b. return a % b"},{"question":"Create a function that takes a list of integers as an argument, and returns the maximum sum of any non-empty sub-array of the given list.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any non-empty sub-array of the given list. max_sum = float('-inf') current_sum = 0 for num in arr: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum"},{"question":"Create a function that returns the number of unique permutations of a list of integers. The function should take into account both positive, negative, and zero values, as well as repeated integers. The function should be efficient and handle large lists of integers.","solution":"from collections import Counter from math import factorial def unique_permutations(lst): Returns the number of unique permutations of a list of integers. if not lst: return 0 counts = Counter(lst) numerator = factorial(len(lst)) denominator = 1 for count in counts.values(): denominator *= factorial(count) return numerator // denominator"},{"question":"Create a function that accepts a positive integer and returns a list of all prime factors of the number, including counting the number of times each factor appears in the factorization. The function should be efficient and handle large numbers.","solution":"def prime_factors(n): Calculate the prime factors of a given integer n and return a list of tuples where each tuple contains a prime factor and its count. Parameters: n (int): The integer to factorize. Must be a positive integer. Returns: List[Tuple[int, int]]: A list of tuples where each tuple contains a prime factor and its count. factors = [] divisor = 2 while n >= 2: count = 0 while n % divisor == 0: n //= divisor count += 1 if count > 0: factors.append((divisor, count)) divisor += 1 if divisor * divisor > n: if n > 1: factors.append((n, 1)) break return factors"},{"question":"Create a function that calculates the sum of all elements in a list of integers. The function should be named \`sum_list\` and should take a list of integers as its parameter. The function should return the sum of all the integers in the list.","solution":"def sum_list(numbers): Returns the sum of all elements in a list of integers. :param numbers: List of integers :return: Sum of all integers in the list return sum(numbers)"},{"question":"Create a function that takes in an array and returns the most frequent element in it. If there are multiple elements with the same frequency, return all of them in an array. For example, for the array [1, 3, 3, 2, 4, 3, 2], the function should return [3].","solution":"from collections import Counter def most_frequent_element(arr): Returns the most frequent element(s) in the array. If there are multiple elements with the same frequency, returns all of them in an array. if not arr: return [] counter = Counter(arr) max_freq = max(counter.values()) result = [element for element, count in counter.items() if count == max_freq] return result"},{"question":"Create a function that takes a list of integers and returns a new list containing only the multiples of 3.","solution":"def multiples_of_three(numbers): Returns a list containing only the multiples of 3 from the provided list of numbers. :param numbers: List of integers. :return: List of integers which are multiples of 3. return [num for num in numbers if num % 3 == 0]"},{"question":"Create a function that finds the number of occurrences of a specified substring within a given string, counting both overlapping and non-overlapping occurrences.","solution":"def count_substring_occurrences(s, sub, overlapping=True): Counts the number of occurrences of a specified substring within a given string. Counts both overlapping and non-overlapping occurrences based on the \`overlapping\` parameter. :param s: The string to search within. :param sub: The substring to search for. :param overlapping: If True, counts overlapping occurrences. If False, counts non-overlapping occurrences. :return: The number of occurrences. if overlapping: count = start = 0 while True: start = s.find(sub, start) if start == -1: break count += 1 start += 1 # Move start index by one for overlapping count return count else: return s.count(sub)"},{"question":"Create a function that takes an array of integers and returns the sum of the indices of all the even numbers in the array. If there are no even numbers in the array, the function should return -1.","solution":"def sum_even_indices(arr): Returns the sum of the indices of all the even numbers in the array. If there are no even numbers, returns -1. even_indices_sum = 0 found_even = False for i, num in enumerate(arr): if num % 2 == 0: even_indices_sum += i found_even = True return even_indices_sum if found_even else -1"},{"question":"Create a function that accepts an integer and returns the count of even numbers in its binary representation.","solution":"def count_even_bits(n): Returns the count of even numbers in the binary representation of the given integer n. Even numbers are considered as 0s in the binary representation. binary_representation = bin(n)[2:] # Convert to binary and remove '0b' prefix return binary_representation.count('0')"},{"question":"Create a function that generates the Fibonacci sequence up to a given limit. The function should return a list containing all the numbers in the sequence up to and including the limit. The Fibonacci sequence starts with 0 and 1.","solution":"def fibonacci(limit): Generates the Fibonacci sequence up to a given limit. Args: limit (int): The upper limit for the Fibonacci sequence. Returns: list: A list containing the Fibonacci sequence up to and including the limit. if limit < 0: return [] sequence = [0, 1] while True: next_value = sequence[-1] + sequence[-2] if next_value > limit: break sequence.append(next_value) return sequence if limit >= 1 else [0]"},{"question":"Create a function that converts a given string to Title Case, where every word starts with a capital letter. For example, \\"hello world\\" should be converted to \\"Hello World\\".","solution":"def to_title_case(s: str) -> str: Converts a string to Title Case, where every word starts with a capital letter. Parameters: s (str): The input string. Returns: str: The converted string in Title Case. return s.title()"},{"question":"Create a function that takes a list of integers as input and returns the sum of all the elements in the list. If the list is empty, a message \\"Empty list!\\" should be printed and the function should return None. Additionally, the function should handle any potential exceptions that may occur (e.g., type conversion errors).","solution":"def sum_of_list(lst): Returns the sum of all integers in the list. If the list is empty, prints \\"Empty list!\\" and returns None. Handles potential exceptions that may occur. if not lst: print(\\"Empty list!\\") return None try: total = sum(lst) return total except TypeError: print(\\"Error: List contains non-integer elements.\\") return None"},{"question":"Create a function that will print out fizz for numbers divisible by 3, buzz for numbers divisible by 5, and fizzbuzz for numbers divisible by both 3 and 5. For numbers not divisible by neither 3 nor 5, it should print out the number itself.","solution":"def fizzbuzz(n): Given an integer n, this function will print: - 'fizz' if the number is divisible by 3, - 'buzz' if the number is divisible by 5, - 'fizzbuzz' if the number is divisible by both 3 and 5, - the number itself if it is not divisible by either 3 or 5. if n % 3 == 0 and n % 5 == 0: return 'fizzbuzz' elif n % 3 == 0: return 'fizz' elif n % 5 == 0: return 'buzz' else: return str(n)"},{"question":"Create a function that accepts two parameters: an array and a target number. The function should return the indices of the two numbers such that they add up to the target number. If no such combination exists, return an empty array. Solve this using a hash map to achieve an efficient solution.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target number. If no such combination exists, return an empty array. Args: nums (list of int): The list of numbers. target (int): The target sum. Returns: list of int: Indices of the two numbers adding up to the target, or empty list if no such numbers exist. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i return []"},{"question":"Create a function that takes two lists of integers and returns a new list with the product of the corresponding elements. The function should handle different lengths of lists by only multiplying elements that have corresponding positions in both lists.","solution":"def multiply_corresponding_elements(list1, list2): Takes two lists of integers and returns a new list with the product of the corresponding elements. min_length = min(len(list1), len(list2)) result = [list1[i] * list2[i] for i in range(min_length)] return result"},{"question":"Create a function that takes two arguments, an array and an index 'n', and returns the 'n'th element of the array.","solution":"def get_nth_element(array, n): Returns the 'n'th element of the array. if n < 0 or n >= len(array): raise IndexError(\\"Index out of range\\") return array[n]"},{"question":"Create a function that leads users through the solution of a simple math problem interactively.","solution":"def interactive_math_solution(): This function interacts with the user to solve a simple math problem interactively. print(\\"Welcome to the interactive math solution!\\") print(\\"We will solve a simple math problem: a + b\\") # Get user inputs for 'a' while True: try: a = float(input(\\"Please enter the value of 'a': \\")) break except ValueError: print(\\"Invalid input. Please enter a numeric value for 'a'.\\") # Get user inputs for 'b' while True: try: b = float(input(\\"Please enter the value of 'b': \\")) break except ValueError: print(\\"Invalid input. Please enter a numeric value for 'b'.\\") result = a + b print(f\\"The result of {a} + {b} is {result}\\") return result"},{"question":"Create a function that can convert any given String to Title Case.","solution":"def to_title_case(s): Converts the given string to title case. Each word in the string will start with a capital letter. return s.title()"},{"question":"Create a function that takes in an integer \`n\` and returns the nth Fibonacci number. The Fibonacci sequence is defined as F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Implement this using recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function that converts an input string \`s\` to all uppercase and returns the result.","solution":"def to_uppercase(s): Converts the input string to all uppercase. Parameters: s (str): The input string to be converted. Returns: str: The converted uppercase string. return s.upper()"},{"question":"Create a function that takes a nested dictionary as input and returns a flattened version of it. The keys in the flattened dictionary should be in the format 'key1.key2.key3' for a nested dictionary like {'key1': {'key2': {'key3': 'value'}}.","solution":"def flatten_dict(d, parent_key='', sep='.'): Flattens a nested dictionary. Args: d (dict): The dictionary to flatten. parent_key (str): The base key to use for recursion. sep (str): The separator between keys. Returns: dict: The flattened dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Create a function that takes as input a list of strings and returns a list of lists, where each sub-list contains all the strings from the input list that share a common prefix with the strings in the sub-list.","solution":"from collections import defaultdict def group_by_prefix(strings): Returns a list of lists, where each sub-list contains all the strings from the input list that share a common prefix. def get_prefix(word): # This helper function returns the prefix of a word (the first character) return word[0] if word else None prefix_dict = defaultdict(list) for string in strings: prefix = get_prefix(string) if prefix: prefix_dict[prefix].append(string) return list(prefix_dict.values())"},{"question":"Create a function that takes a string as an argument and replaces all the vowels with the character 'X'.","solution":"def replace_vowels(input_string): Takes a string and replaces all vowels with 'X'. :param input_string: str, the input string to process :return: str, the processed string with vowels replaced by 'X' vowels = \\"aeiouAEIOU\\" return ''.join('X' if char in vowels else char for char in input_string)"},{"question":"Create a function that accepts a string and returns the number of occurrences of each character in the string. Use a dictionary to store the results. The function should ignore case sensitivity and consider 'a' and 'A' as the same character.","solution":"def count_character_occurrences(s): Returns the number of occurrences of each character in the string. The function ignores case sensitivity. s = s.lower() char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Create a function that takes in an integer array and returns a boolean value indicating whether the array contains a \\"lonely\\" number. A \\"lonely\\" number is defined as a number that is both greater than 10 and has exactly two distinct prime factors.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def get_prime_factors(n): Helper function to get the prime factors of a number. factors = set() if n <= 1: return factors for i in range(2, n + 1): while n % i == 0: if is_prime(i): factors.add(i) n //= i return factors def has_lonely_number(arr): Returns True if the array contains at least one \\"lonely\\" number. A \\"lonely\\" number is defined as a number that is both greater than 10 and has exactly two distinct prime factors. for num in arr: if num > 10 and len(get_prime_factors(num)) == 2: return True return False"},{"question":"Create a function that calculates the sum of all numbers up to and including a given number. This function should handle large inputs efficiently. To achieve this, you can utilize the mathematical formula for the sum of an arithmetic series.","solution":"def sum_up_to(n): Returns the sum of all numbers up to and including n. Parameters: n (int): The upper limit number. Returns: int: The sum of all numbers from 1 to n. if n < 0: return 0 return n * (n + 1) // 2"},{"question":"Create a function that takes a list and a number as input, and returns the number of occurrences of the number in the list.","solution":"def count_occurrences(lst, number): Returns the number of occurrences of \`number\` in the \`lst\`. Parameters: lst (list): The list in which to count the occurrences. number (int/float): The number whose occurrences need to be counted. Returns: int: The count of occurrences of \`number\` in \`lst\`. return lst.count(number)"},{"question":"Create a function that implements selection sort on an array of integers. Provide a brief description of how the selection sort algorithm works.","solution":"def selection_sort(arr): Sorts an array of integers in ascending order using the selection sort algorithm. n = len(arr) for i in range(n): min_index = i for j in range(i+1, n): if arr[j] < arr[min_index]: min_index = j arr[i], arr[min_index] = arr[min_index], arr[i] return arr"},{"question":"Create a function that returns the number of occurrences of each character in a given string as a dictionary where the keys are the characters and the values are their respective counts.","solution":"def char_count(s): Returns a dictionary with the count of each character in the string s. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Create a function that takes a string as input and returns the largest integer value found within the string. For instance, given the string \\"a1b2c5d9\\", the function should return 9. If there are no integers in the string, the function should return -1.","solution":"def largest_integer_in_string(s): Returns the largest integer found in the string. If there are no integers, returns -1. largest = -1 for char in s: if char.isdigit(): current_num = int(char) if current_num > largest: largest = current_num return largest"},{"question":"Create a function that finds the length of the minimal path in a 2D grid that can be achieved by moving up, down, left, or right. The path should avoid obstacles (cells marked with 1) and reach the bottom-right corner of the grid from the top-left corner. The function should handle the case where the grid does not have a valid path from the start to the finish. The function should be efficient and scalable.","solution":"from collections import deque def min_path_length(grid): Finds the length of the minimal path in a 2D grid avoiding obstacles. Moves are allowed up, down, left, or right. The function returns the length of the shortest path from the top-left corner to the bottom-right corner or -1 if no such path exists. if not grid or not grid[0]: return -1 rows, cols = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[rows-1][cols-1] == 1: return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Down, Up, Right, Left queue = deque([(0, 0, 1)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() if row == rows-1 and col == cols-1: return steps for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < rows and 0 <= c < cols and grid[r][c] == 0 and (r, c) not in visited: visited.add((r, c)) queue.append((r, c, steps + 1)) return -1"},{"question":"Create a function that takes two strings and returns the shortest string that contains both as a substring.","solution":"def shortest_common_superstring(str1, str2): Returns the shortest string that contains both str1 and str2 as substrings. # Check if str2 is in str1 or vice versa if str1 in str2: return str2 if str2 in str1: return str1 # Check the max overlap from str1 as prefix of str2 max_overlap = 0 overlap_str = \\"\\" for i in range(1, min(len(str1), len(str2)) + 1): if str1[-i:] == str2[:i]: max_overlap = i overlap_str = str1 + str2[i:] # Check the max overlap from str2 as prefix of str1 for i in range(1, min(len(str1), len(str2)) + 1): if str2[-i:] == str1[:i]: if i > max_overlap: max_overlap = i overlap_str = str2 + str1[i:] return overlap_str if max_overlap > 0 else str1 + str2"},{"question":"Create a function that converts pounds to kilograms in Python.","solution":"def pounds_to_kilograms(pounds): Converts pounds to kilograms. 1 pound = 0.453592 kilograms. return pounds * 0.453592"},{"question":"Create a function that takes in two parameters, \`n\` and \`m\`, and returns the sum of multiples of \`n\` and \`m\` from 1 to \`k\`. The function should also handle cases where \`n\` and \`m\` are both 0.","solution":"def sum_of_multiples(n, m, k): Returns the sum of multiples of n and m from 1 to k. If both n and m are 0, returns 0. if n == 0 and m == 0: return 0 multiples_set = set() if n != 0: multiples_set.update(range(n, k+1, n)) if m != 0: multiples_set.update(range(m, k+1, m)) return sum(multiples_set)"},{"question":"Create a function that converts seconds into milliseconds.","solution":"def seconds_to_milliseconds(seconds): Converts seconds to milliseconds. 1 second = 1000 milliseconds return seconds * 1000"},{"question":"Create a function that returns the nth Fibonacci number with less than or equal to n digits. The function should use a generator to generate Fibonacci numbers and stop when the nth Fibonacci number with less than or equal to n digits is found. The function should also measure and return the time taken to generate this number using Python's timeit module for accurate timing.","solution":"import timeit def fibonacci_gen(): A generator function to generate Fibonacci numbers. a, b = 0, 1 while True: yield a a, b = b, a + b def nth_fibonacci_with_n_digits(n): Returns the nth Fibonacci number with less than or equal to n digits and the time taken to generate this number. start_time = timeit.default_timer() fib_gen = fibonacci_gen() count = 0 fib_number = 0 for number in fib_gen: if len(str(number)) <= n: count += 1 fib_number = number if count == n: break end_time = timeit.default_timer() time_taken = end_time - start_time return fib_number, time_taken"},{"question":"Create a function that takes a directory path as an argument and returns all the filenames in the directory and its subdirectories in a list. The function should not return the directory names themselves, only the filenames.","solution":"import os def get_all_filenames(directory_path): Returns a list of all filenames in the given directory and its subdirectories. Args: directory_path (str): The path to the directory. Returns: List[str]: A list of filenames. filenames = [] for root, dirs, files in os.walk(directory_path): for file in files: filenames.append(file) return filenames"},{"question":"Create a function that takes a list and an item as input and returns a new list without that item. If the item is not in the list, the function should return the original list unchanged. If the item is found in the list, it should only appear once in the returned list, even if it was present multiple times in the original list.","solution":"def remove_item_from_list(lst, item): Removes the first occurrence of an item from a list. If the item is not present, returns the original list unchanged. if item in lst: lst.remove(item) return lst"},{"question":"Create a function that takes two integers as input and returns the sum of these integers. If the sum is even, return the sum plus 10; if the sum is odd, return the sum minus 10.","solution":"def sum_and_modify(a, b): Takes two integers and returns the sum modified by an additional value. If the sum is even, return the sum plus 10. If the sum is odd, return the sum minus 10. total = a + b if total % 2 == 0: return total + 10 else: return total - 10"},{"question":"Create a function that extracts the weekly high temperatures from a given list of tuples, where each tuple represents a day of the week followed by the temperature for that day. The function should return a list of the highest temperatures recorded for each day of the week.","solution":"def extract_weekly_highs(temperatures): Returns the highest temperatures recorded for each day of the week. :param temperatures: List of tuples of the form (day, temperature) :return: List of highest temperatures for each day of the week ordered from Monday to Sunday # Initialize a dictionary to hold the highest temperature for each day of the week weekly_highs = { \\"Monday\\": float('-inf'), \\"Tuesday\\": float('-inf'), \\"Wednesday\\": float('-inf'), \\"Thursday\\": float('-inf'), \\"Friday\\": float('-inf'), \\"Saturday\\": float('-inf'), \\"Sunday\\": float('-inf') } # Iterate over the temperature records and find the highest for each day for day, temp in temperatures: if temp > weekly_highs[day]: weekly_highs[day] = temp # Return the highest temperatures in the order of Monday to Sunday return [ weekly_highs[\\"Monday\\"], weekly_highs[\\"Tuesday\\"], weekly_highs[\\"Wednesday\\"], weekly_highs[\\"Thursday\\"], weekly_highs[\\"Friday\\"], weekly_highs[\\"Saturday\\"], weekly_highs[\\"Sunday\\"] ]"},{"question":"Create a function that takes an integer \`n\` as input and converts it to a string. If the string representation of the number contains the character '7', the function should return 'Bingo', otherwise, it should return the string representation of the number.","solution":"def check_number(n): Converts the integer n to a string. If the string representation contains the character '7', returns 'Bingo', otherwise returns the string representation of the number. num_str = str(n) if '7' in num_str: return 'Bingo' else: return num_str"},{"question":"Create a function that takes a string and returns its base64 encoded version.","solution":"import base64 def encode_base64(input_string): Returns the base64 encoded version of the input string. encoded_bytes = base64.b64encode(input_string.encode(\\"utf-8\\")) encoded_string = encoded_bytes.decode(\\"utf-8\\") return encoded_string"},{"question":"Create a function that takes in an array of integers as an input and returns an array of arrays of integers. The inner arrays should contain consecutive integers from the original array, starting from the smallest integer and rearranged in ascending order after every inner array.","solution":"def split_and_sort_consecutive(arr): Splits the input array into subarrays of consecutive numbers and sorts them. Args: arr (list of int): The input array containing integers. Returns: list of list of int: A list of subarrays containing consecutive integers sorted in ascending order. if not arr: return [] sorted_arr = sorted(arr) result = [] current_subarray = [sorted_arr[0]] for num in sorted_arr[1:]: if num == current_subarray[-1] + 1: current_subarray.append(num) else: result.append(current_subarray) current_subarray = [num] result.append(current_subarray) return result"},{"question":"Create a function that reverses a given string recursively. Below is the function header. What code goes in the function body to achieve the string reversal?","solution":"def reverse_string(s): Reverses a given string recursively. if len(s) == 0: return s else: return s[-1] + reverse_string(s[:-1])"},{"question":"Create a function that takes in four parameters: \`width\`, \`height\`, \`canvas\`, and \`mask\`. The function has the following functionality: If the \`mask\` is \`0\`, the function should draw a rectangle with the given \`width\` and \`height\` on the \`canvas\`; if the \`mask\` is \`1\`, the function should draw a circle with the same dimensions on the \`canvas\`. The \`mask\` parameter always equals \`0\` or \`1\`. The function should then return the \`canvas\`.","solution":"def draw_shape(width, height, canvas, mask): Draws a rectangle or circle on the canvas depending on the mask. Parameters: - width (int): The width of the shape to draw. - height (int): The height of the shape to draw. - canvas (2D list): The canvas to draw the shape on. - mask (int): If 0, draw a rectangle. If 1, draw a circle. Returns: - (2D list): The canvas with the shape drawn on it. if mask == 0: # Draw rectangle for i in range(height): for j in range(width): if i < len(canvas) and j < len(canvas[0]): canvas[i][j] = 1 elif mask == 1: # Draw circle (approximated with a simple filled circle) radius = min(width, height) // 2 cx, cy = width // 2, height // 2 for i in range(len(canvas)): for j in range(len(canvas[0])): if (i - cy) ** 2 + (j - cx) ** 2 <= radius ** 2: canvas[i][j] = 1 return canvas"},{"question":"Create a function that takes a string \`s\` and returns a new string with each character at its new position shifted one place forward in the alphabet (i.e., 'a' becomes 'b', 'z' becomes 'a', etc.). Assume that the string can only contain lowercase English letters.","solution":"def shift_string_forward(s): Shifts each character in the string \`s\` one place forward in the alphabet. 'a' becomes 'b', 'z' becomes 'a', etc. Parameters: s (str): The input string. Returns: str: A new string with each character shifted one place forward. shifted_string = \\"\\" for char in s: if char == 'z': shifted_string += 'a' else: shifted_string += chr(ord(char) + 1) return shifted_string"},{"question":"Create a function that calculates the area of a circle given the radius. What should the function return if the radius is an invalid input (i.e., negative or non-numeric)?","solution":"import math def area_of_circle(radius): Returns the area of a circle given the radius. If the radius is invalid (negative or non-numeric), the function returns None. if not isinstance(radius, (int, float)) or radius < 0: return None return math.pi * radius ** 2"},{"question":"Create a function that , when given a number, returns a list with all number combinations that add up to that number. The combinations should be unique, and you should avoid repetitions of the same number in a combination. For example, given the number \`5\`, the function should return combinations like \`[1, 4]\`, \`[2, 3]\`, \`[5]\`.","solution":"def find_combinations(target): Returns a list of unique combinations of numbers that add up to the target number. Each combination will be a list of integers, and numbers within each combination should be unique. def backtrack(start, target, path, res): if target == 0: res.append(path) return for i in range(start, target + 1): backtrack(i + 1, target - i, path + [i], res) res = [] backtrack(1, target, [], res) return res"},{"question":"Create a function that takes an integer array of any size as input and returns an array of its unique elements. The solution should ensure that the output array maintains the original order of elements as they appeared in the input array.","solution":"def unique_elements(arr): Returns an array of unique elements from the input array, maintaining the original order. seen = set() unique_arr = [] for item in arr: if item not in seen: seen.add(item) unique_arr.append(item) return unique_arr"},{"question":"Create a function that reads a file and returns the number of lines that contain the word \\"error\\". The function should also handle cases where the file does not exist or cannot be read.","solution":"def count_error_lines(file_path): Returns the number of lines that contain the word \\"error\\". Handles cases where the file does not exist or cannot be read. Args: file_path (str): Path to the file. Returns: int: Number of lines containing the word \\"error\\". Returns -1 if the file cannot be opened. try: with open(file_path, 'r') as file: lines = file.readlines() return sum(1 for line in lines if 'error' in line.lower()) except (FileNotFoundError, IOError): return -1"},{"question":"Create a function that takes an integer as an input and returns the largest integer whose square is less than or equal to the given integer.","solution":"def largest_integer_whose_square_is_less_than_or_equal_to(n): Returns the largest integer whose square is less than or equal to n. if n < 0: return None largest_int = 0 while (largest_int + 1) * (largest_int + 1) <= n: largest_int += 1 return largest_int"},{"question":"Create a function that takes two parameters: a positive integer \`n\` and an array \`arr\` of integers. The function should return the sum of the squares of the first \`n\` elements of the array. If \`n\` is greater than the length of the array, calculate the sum of squares of all elements in the array.","solution":"def sum_of_squares(n, arr): Returns the sum of the squares of the first n elements of the array arr. If n is greater than the length of the array, calculate the sum of squares of all elements in the array. Parameters: n (int): Positive integer indicating the number of elements to consider. arr (list of int): Array of integers. Returns: int: Sum of the squares of the first n elements of arr. # Use min to handle case where n is greater than the length of the array return sum(x ** 2 for x in arr[:min(n, len(arr))])"},{"question":"Create a function that will take the area of a rectangle and a basic algorithm that will find the possible dimensions that a rectangle could have with a given area. For example, if given the area 24, the function should output the dimensions (length, width) that could represent that same area. We'll assume all rectangle dimensions are integers.","solution":"def rectangle_dimensions(area): Returns a list of tuples, each representing the possible integer dimensions (length, width) that a rectangle could have given the area. dimensions = [] for length in range(1, int(area**0.5) + 1): if area % length == 0: width = area // length dimensions.append((length, width)) return dimensions"},{"question":"Create a function that returns the last element of the input list. If the list is empty, return None.","solution":"def last_element(lst): Returns the last element of the input list. If the list is empty, return None. if lst: return lst[-1] else: return None"},{"question":"Create a function that takes two parameters, \`a\` and \`b\`, which are both non-negative integers bellow 10 and return their greatest common divisor (GCD). If the inputs are not integers or they are below 0 or greater than or equal to 10, the function should return \`None\`.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two non-negative integers below 10. If the inputs are not integers or not within the range, returns None. if not (isinstance(a, int) and isinstance(b, int)): return None if a < 0 or a >= 10 or b < 0 or b >= 10: return None while b: a, b = b, a % b return a"},{"question":"Create a function that takes a list of numbers as input and returns the number that appears most frequently in the list. If there is no mode (i.e., no number appears more than once), the function should return None.","solution":"def find_mode(numbers): Returns the number that appears most frequently in the list. If there is no mode, return None. from collections import Counter if not numbers: return None count = Counter(numbers) most_common = count.most_common(1) if most_common[0][1] == 1: return None else: return most_common[0][0]"},{"question":"Create a function that takes a string and reverses the characters. However, the characters should be reversed while ignoring spaces and non-alphabetic characters. Only reverse the alphabetic characters and keep the spaces and non-alphabetic characters in their original positions.","solution":"def reverse_alpha_chars(s): Reverse the alphabetic characters in the string s, while leaving spaces and non-alphabetic characters in their original positions. # Extract only the alphabetic characters and reverse them alpha_chars = [c for c in s if c.isalpha()] alpha_chars.reverse() # Create a new list for the final result result = [] alpha_index = 0 # Iterate through the original string and replace alphabetic characters with reversed ones for char in s: if char.isalpha(): result.append(alpha_chars[alpha_index]) alpha_index += 1 else: result.append(char) # Join the list into a final string return \\"\\".join(result)"},{"question":"Create a function that performs the same operations as these two steps: \`str1 = str1.replace('ii', 'i').replace('oo', 'o')\` and store the result in \`str1\`.","solution":"def replace_ii_oo(str1): Replaces 'ii' with 'i' and 'oo' with 'o' in the given string. return str1.replace('ii', 'i').replace('oo', 'o')"},{"question":"Create a function that converts a string to title case in Python, ensuring that the first letter of each word is capitalized and the rest are in lowercase. Assume that words are separated by spaces.","solution":"def to_title_case(s): Converts the input string to title case, where the first letter of each word is capitalized and the rest are in lowercase. return ' '.join(word.capitalize() for word in s.split())"},{"question":"Create a function that takes two lists as inputs and returns the longest common subsequence (LCS) between them. If there are multiple LCSs of the same maximum length, return any one of them. If there is no common subsequence, return an empty string.","solution":"def longest_common_subsequence(list1, list2): Returns the longest common subsequence between two lists. If no common subsequence exists, returns an empty list. n, m = len(list1), len(list2) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n): for j in range(m): if list1[i] == list2[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) # Construct the longest common subsequence lcs = [] i, j = n, m while i > 0 and j > 0: if list1[i - 1] == list2[j - 1]: lcs.append(list1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] >= dp[i][j - 1]: i -= 1 else: j -= 1 lcs.reverse() return lcs"},{"question":"Create a function that takes in a list of integers and returns the sum of all even numbers in the list. Additionally, the function should return the count of all odd numbers. If the list is empty, the function should return 0 for both the sum of even numbers and the count of odd numbers.","solution":"def sum_even_count_odd(numbers): Returns a tuple containing the sum of even numbers and the count of odd numbers in the input list. Parameters: numbers (list of int): The list of integers to process. Returns: tuple (int, int): Sum of even numbers, count of odd numbers sum_even = 0 count_odd = 0 for number in numbers: if number % 2 == 0: sum_even += number else: count_odd += 1 return sum_even, count_odd"},{"question":"Create a function that would check if an integer is odd or even.","solution":"def is_even(n): Returns True if n is even, otherwise False (which means odd). return n % 2 == 0"},{"question":"Create a function that takes in the head of a linked list and counts the number of nodes in the linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def count_nodes(head): Function to count the number of nodes in a linked list. :param head: ListNode, the head of the linked list. :return: int, the number of nodes in the linked list. count = 0 current = head while current: count += 1 current = current.next return count"},{"question":"Create a function that takes a list of numbers as an argument and returns the product of all the numbers in the list. If the list is empty, return 1. If the list contains only one element, return that element.","solution":"def list_product(numbers): Returns the product of all the numbers in the list. If the list is empty, return 1. If the list contains only one element, return that element. if len(numbers) == 0: return 1 product = 1 for number in numbers: product *= number return product"},{"question":"Create a function that takes a string and returns a new string with all the characters sorted in descending order. For example, if the input is \\"hello\\", the function should return \\"ollhe\\".","solution":"def sort_string_desc(s): Takes a string and returns a new string with all the characters sorted in descending order. return ''.join(sorted(s, reverse=True))"},{"question":"Create a function that takes an integer n and returns a string that contains exactly n random lowercase letters from a-z, without repetition.","solution":"import random import string def random_string_without_repetition(n): Returns a string that contains exactly n random lowercase letters from a-z, without repetition. If n is greater than 26, returns None as it's impossible to have a string of unique letters from a-z. if n > 26: return None letters = list(string.ascii_lowercase) random.shuffle(letters) return ''.join(letters[:n])"},{"question":"Create a function that takes a string as input and returns the number of words in the string. A word is defined as a sequence of characters separated by whitespace. Include an error handling mechanism for non-string inputs.","solution":"def count_words(input_string): Returns the number of words in the input string. A word is defined as a sequence of characters separated by whitespace. If the input is not a string, raises a ValueError. if not isinstance(input_string, str): raise ValueError(\\"Input must be a string\\") words = input_string.split() return len(words)"},{"question":"Create a function that determines if a number is prime or not. Prime numbers are numbers that have only two distinct factors: 1 and the number itself.","solution":"def is_prime(n): Determine if a number is prime. Args: n (int): The number to check for primality. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Create a function that returns the count of unique elements in a given list. The function should ignore duplicates and count only unique elements.","solution":"def count_unique_elements(lst): Returns the count of unique elements in lst. return len(set(lst))"},{"question":"Create a function that , when passed an array of integers, finds the minimum and maximum values in the array without using built-in functions like Math.min() and Math.max(). You should also handle the case when the array contains only one element.","solution":"def find_min_max(arr): Returns the minimum and maximum values in the array. Assumes the array contains at least one element. if not arr: raise ValueError(\\"Array must contain at least one element\\") min_val = max_val = arr[0] for num in arr[1:]: if num < min_val: min_val = num if num > max_val: max_val = num return (min_val, max_val)"},{"question":"Create a function that generates a list of Fibonacci numbers up to a specified limit. The limit is the maximum value that any Fibonacci number in the list can have.","solution":"def fibonacci(limit): Generates a list of Fibonacci numbers up to a specified limit. :param limit: The maximum value that any Fibonacci number in the list can have. :return: A list of Fibonacci numbers up to the specified limit. if limit < 0: return [] fib_numbers = [0, 1] while True: next_fib = fib_numbers[-1] + fib_numbers[-2] if next_fib > limit: break fib_numbers.append(next_fib) return fib_numbers if limit > 0 else [0]"},{"question":"Create a function that converts a decimal number (in integers) into binary form, and then outputs the binary representation as a string. If the input number is already a binary number, it should simply output the binary string as is. To ensure the function works correctly, also provide a check function that tests it with several binary and non-binary input values.","solution":"def decimal_to_binary(num): Converts an integer to its binary representation as a string. If the number is already a binary string, returns it as is. if isinstance(num, str) and all(c in '01' for c in num): return num elif isinstance(num, int): return bin(num)[2:] else: raise ValueError(\\"Input must be a binary string or an integer.\\")"},{"question":"Create a function that takes a number as an input and returns the number of digits in the number. For example, if the input is 12345, the function should return 5.","solution":"def count_digits(number): Returns the number of digits in the input number. return len(str(abs(number)))"},{"question":"Create a function that takes a string as an argument and returns the number of words in the string. A word is defined as any sequence of characters separated by a space. However, the function should ignore leading and trailing spaces and empty strings. Finally, ensure if the input string is empty after removing leading and trailing spaces, the function returns 0.","solution":"def count_words(s): Returns the number of words in the string s. A word is any sequence of characters separated by a space. Leading and trailing spaces, as well as empty strings, are ignored. :param s: input string :return: number of words in the given string # Remove leading and trailing spaces trimmed_str = s.strip() # Check if the string is empty if not trimmed_str: return 0 # Split the string by spaces words = trimmed_str.split() # Return the number of words return len(words)"},{"question":"Create a function that finds the reversing pair in the array. A reversing pair is a pair of indices in an array such that the element at the first index is greater than the element at the second index and the first index is less than the second index. The function should return the total number of reversing pairs in the array.","solution":"def count_reversing_pairs(arr): Count the number of reversing pairs in the array. A reversing pair is a pair of indices (i, j) such that: - arr[i] > arr[j] - i < j :param arr: List of integers :return: Integer count of reversing pairs count = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): if arr[i] > arr[j]: count += 1 return count"},{"question":"Create a function that takes a list of integers and returns the list sorted in a wave form. Wave form sorting is defined as sorting the list in the pattern: smallest, largest, second smallest, second largest, and so on.","solution":"def wave_sort(lst): Function to sort the list in a wave form: smallest, largest, second smallest, second largest, and so on. # Sort the list to arrange the elements by their natural order lst.sort() # Initializing two pointers low, high = 0, len(lst) - 1 # Create a new list to store the wave form sorted elements wave_lst = [] # Alternately pick the smallest and largest remaining elements while low <= high: if low == high: wave_lst.append(lst[low]) else: wave_lst.append(lst[low]) wave_lst.append(lst[high]) low += 1 high -= 1 return wave_lst"},{"question":"Create a function that takes two numbers as input, A and B, and returns their sum. However, if A is greater than B, the function should return the absolute difference between A and B instead.","solution":"def custom_sum_or_difference(A, B): Returns the sum of A and B if A is less than or equal to B. Otherwise, returns the absolute difference between A and B. if A > B: return abs(A - B) else: return A + B"},{"question":"Create a function that takes two integers as arguments and returns the absolute difference between them. The function should be named \`calculate_absolute_difference\` and should be implemented using Python.","solution":"def calculate_absolute_difference(a, b): Returns the absolute difference between a and b. return abs(a - b)"},{"question":"Create a function that takes an input string and reverses the case of each character in the string. For example, if the input is \\"CodeBaSe\\", the output should be \\"cODEbAsE\\".","solution":"def reverse_case(input_string): Takes an input string and reverses the case of each character in the string. return input_string.swapcase()"},{"question":"Create a function that checks if a string can be rotated to form another string. For example, \\"hello\\" rotated can form \\"lohel\\".","solution":"def can_rotate_to_form(s1, s2): Checks if s1 can be rotated to form s2. Args: s1 (str): The original string. s2 (str): The target string to form by rotation. Returns: bool: True if s1 can be rotated to form s2, False otherwise. if len(s1) != len(s2): return False return s2 in s1 + s1"},{"question":"Create a function that uses a dictionary in Python to convert a list of string dates in 'YYYY-MM-DD' format into a list of dates with the format 'MM/DD/YYYY'.","solution":"def convert_date_format(date_list): Converts a list of dates from 'YYYY-MM-DD' format to 'MM/DD/YYYY' format. :param date_list: List of dates in 'YYYY-MM-DD' format. :return: List of dates in 'MM/DD/YYYY' format. return [f\\"{date.split('-')[1]}/{date.split('-')[2]}/{date.split('-')[0]}\\" for date in date_list]"},{"question":"Create a function that takes a list of integers and returns a sorted list of integers based on their absolute values.","solution":"def sort_by_absolute_value(lst): Returns a list of integers sorted by their absolute values. return sorted(lst, key=abs)"},{"question":"Create a function that checks if a given string has all unique characters. The function should return \`true\` if all characters in the string are unique, and \`false\` otherwise. Consider both case-sensitive and case-insensitive comparisons.","solution":"def has_unique_characters(s, case_sensitive=True): Checks if the given string has all unique characters. Parameters: - s (str): The string to check. - case_sensitive (bool): Whether to consider case in uniqueness checking. Returns: - bool: True if all characters are unique, False otherwise. if not case_sensitive: s = s.lower() return len(s) == len(set(s))"},{"question":"Create a function that takes an array and returns the largest integer in the array. If the array is empty, the function should return \`None\`.","solution":"def largest_integer(arr): Returns the largest integer in the array. If the array is empty, returns None. if not arr: return None return max(arr)"},{"question":"Create a function that determines if a linked list contains a cycle. To accomplish this, use Floyd's Tortoise and Hare algorithm. In this algorithm, two pointers are used: a slow pointer that moves one step at a time and a fast pointer that moves two steps. If the fast pointer ever meets the slow pointer within the list, it indicates the presence of a cycle. If the fast pointer reaches the end of the list, there is no cycle.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def has_cycle(head): Determines if a linked list contains a cycle using Floyd's Tortoise and Hare algorithm. if not head: return False slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Create a function that finds the frequency of each character in a given string \`s\`. The function should return a dictionary where the keys are the characters and the values are their corresponding frequencies.","solution":"def char_frequency(s): Returns a dictionary with the frequency of each character in the string s. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function that takes two arguments, a list of strings (representing a sentence in the form of a list of words), and an integer. The function returns a new list where each word in the original list is repeated the number of times specified by the integer.","solution":"def repeat_words(words, n): Repeats each word in the list n times. Parameters: words (list of str): List of words to be repeated. n (int): Number of times each word should be repeated. Returns: list of str: List of words repeated n times. return [word for word in words for _ in range(n)]"},{"question":"Create a function that takes a list of integers and return a list of integers that are at the even index positions but are odd numbers.","solution":"def odd_numbers_at_even_indices(lst): Returns a list of integers that are at the even index positions in the input list but are odd numbers. return [num for idx, num in enumerate(lst) if idx % 2 == 0 and num % 2 != 0]"},{"question":"Create a function that calculates the factorial of a number using recursion. Here's a hint you can use: factorial(n) = n * factorial(n-1) if n > 0, and factorial(0) = 1. Implement the function and provide a few test cases to validate your solution.","solution":"def factorial(n): Calculate the factorial of a number using recursion. Args: n (int): The number for which the factorial is to be calculated. Returns: int: The factorial of the number. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Create a function that takes a number as input and returns its binary representation without the \\"0b\\" prefix.","solution":"def to_binary(n): Returns the binary representation of the number n without the '0b' prefix. return bin(n)[2:]"},{"question":"Create a function that generates a filename with a timestamp.","solution":"import datetime def generate_filename_with_timestamp(base_name): Generates a filename with the current timestamp appended to the base_name. Parameters: base_name (str): The base name of the file. Returns: str: The generated filename with the current timestamp. timestamp = datetime.datetime.now().strftime(\\"%Y%m%d%H%M%S\\") return f\\"{base_name}_{timestamp}.txt\\""},{"question":"Create a function that receives an array of integers and outputs its contents in reverse order.","solution":"def reverse_array(arr): Returns the input array reversed. Parameters: arr (list of int): The list of integers to reverse. Returns: list of int: The reversed list of integers. return arr[::-1]"},{"question":"Create a function that takes a dictionary as input and adds a new key-value pair to the dictionary. The key should be a string and the value should be an integer. The function should then return the updated dictionary. If the key already exists in the dictionary, the function should update the value of that key with the provided integer. If the key does not exist, it should add the key with the provided integer value.","solution":"def update_dict(input_dict, key, value): Adds a new key-value pair to the dictionary or updates the value if the key already exists. Parameters: input_dict (dict): The dictionary to update. key (str): The key to add or update. value (int): The value associated with the key. Returns: dict: The updated dictionary. input_dict[key] = value return input_dict"},{"question":"Create a function that generates a random RGB color and returns it as a tuple. The RGB values should each be integers between 0 and 255.","solution":"import random def generate_random_rgb_color(): Generates a random RGB color and returns it as a tuple. Each of the RGB values is an integer between 0 and 255. r = random.randint(0, 255) g = random.randint(0, 255) b = random.randint(0, 255) return (r, g, b)"},{"question":"Create a function that takes a string of lowercase letters and returns the second highest alphabet character in the string. If there is no distinct second highest character, return None.","solution":"def second_highest_char(s): Takes a string of lowercase letters and returns the second highest alphabet character in the string. If there is no distinct second highest character, return None. unique_chars = set(s) if len(unique_chars) < 2: return None sorted_chars = sorted(unique_chars, reverse=True) return sorted_chars[1]"},{"question":"Create a function that takes an array of integers (Both Positive and Negative) and returns a new array which contains all the positive numbers from the original array.","solution":"def filter_positive_numbers(arr): Returns a list containing only the positive numbers from the given list. :param arr: List of integers (both positive and negative) :return: List of positive integers return [num for num in arr if num > 0]"},{"question":"Create a function that takes two string inputs and checks if they are anagrams of each other or not. Two strings are considered anagrams if they can be read the same way in reverse. A typical example would be_arr(\\"listen\\", \\"silent\\"). Anagrams are case-sensitive, meaning \\"Listen\\" and \\"listen\\" are not considered equal. Implement an optimized solution.","solution":"def are_anagrams(str1, str2): Checks if two strings are anagrams of each other. if len(str1) != len(str2): return False return sorted(str1) == sorted(str2)"},{"question":"Create a function that takes a string as a parameter and returns the first letter of the string. If the string is empty, return an empty string. If the string starts with a non-alphabetic character, return an empty string.","solution":"def first_letter(s): Returns the first letter of the string if it exists and is alphabetic. If the string is empty or the first character is non-alphabetic, returns an empty string. if not s or not s[0].isalpha(): return '' return s[0]"},{"question":"Create a function that calculates the factorial of a number using recursion. The function should be able to handle numbers up to 20. If the input number is negative, the function should return -1 to indicate an error.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. Args: n (int): The number to calculate the factorial of. Returns: int: The factorial of the number n. If n is negative, returns -1. if n < 0: return -1 elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that generates all possible ways to partition a given integer into a sum of other integers. The function should return a list of all partitions. For example, the number 4 can be partitioned into \`4\`, \`3+1\`, \`2+2\`, \`2+1+1\`, and \`1+1+1+1\`. Each partition is returned as a list of integers, and the function returns a list of these lists.","solution":"def partition(n): Function to generate all partitions of a given integer n. def _partition(n, max_num, prefix): if n == 0: result.append(prefix) return for i in range(min(n, max_num), 0, -1): _partition(n-i, i, prefix + [i]) result = [] _partition(n, n, []) return result"},{"question":"Create a function that generates the Fibonacci sequence up to the nth term. The nth term should be included in the sequence. For example, if n=5, the function should return [0, 1, 1, 2, 3].","solution":"def fibonacci(n): Generates the Fibonacci sequence up to the nth term (inclusive). Parameters: n (int): The number of terms in the Fibonacci sequence to generate Returns: List[int]: A list containing the Fibonacci sequence up to the nth term. if n < 1: return [] fib_sequence = [0, 1] for i in range(2, n): next_term = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_term) return fib_sequence[:n]"},{"question":"Create a function that takes two strings as input and returns the common characters between them. The function should ignore case sensitivity and return the characters in the order they appear in the first string.","solution":"def common_characters(str1, str2): Returns a string containing the common characters between str1 and str2, ignoring case sensitivity and maintaining the order from the first string. str1_lower = str1.lower() str2_lower = str2.lower() common_chars = [char for char in str1 if char.lower() in str2_lower] return ''.join(common_chars)"},{"question":"Create a function that takes in an integer k and a list of integers and returns a list of all integers from the list that are less than or equal to k.","solution":"def filter_less_or_equal(k, nums): Returns a list of all integers from the given list that are less than or equal to k. :param k: Integer to compare against :param nums: List of integers :return: List of integers from nums that are <= k return [num for num in nums if num <= k]"},{"question":"Create a function that calculates the sum of all positive numbers in an array, but only those numbers that are divisible by 3 and 5.","solution":"def sum_divisible_by_3_and_5(arr): Returns the sum of all positive numbers in the array that are divisible by both 3 and 5. return sum(x for x in arr if x > 0 and x % 3 == 0 and x % 5 == 0)"},{"question":"Create a function that takes two numbers and returns their product. If either number is zero, the function should return 0.","solution":"def multiply(a, b): Returns the product of a and b. If either a or b is zero, returns 0. if a == 0 or b == 0: return 0 return a * b"},{"question":"Create a function that takes an array of strings and returns a new array containing the elements of the original array, but in lower case. Additionally, the function should remove any duplicate elements.","solution":"def lower_case_unique(strings): Takes an array of strings and returns a new array with elements in lower case and without duplicates. :param strings: List of strings :return: List of strings in lower case and without duplicates return list(dict.fromkeys([s.lower() for s in strings]))"},{"question":"Create a function that finds all the prime factors of a given integer in a list. The function should handle both positive and negative integers, as well as zero. If the input is zero, the function should return an empty list. For negative numbers, the function should remove the negative sign and proceed with finding the prime factors of the absolute value.","solution":"def prime_factors(n): Returns a list of prime factors of the given integer \`n\`. Handles positive, negative, and zero inputs. if n == 0: return [] n = abs(n) # Work with the absolute value of n factors = [] # Check for number of 2s that divide n while n % 2 == 0: factors.append(2) n = n // 2 # n must be odd at this point, skip even numbers for i in range(3, int(n**0.5) + 1, 2): while (n % i == 0): factors.append(i) n = n // i # This condition is to check if n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Create a function that takes an integer as input and returns its factorial. For example, the factorial of 5 is 120, because 5 * 4 * 3 * 2 * 1 = 120. If the input number is less than 0, the function should return -1 to indicate an error.","solution":"def factorial(n): Returns the factorial of n. If n is less than 0, returns -1. if n < 0: return -1 elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that generates all possible combinations of k numbers out of 1 to n. For example, given n = 4 and k = 2, the function should return \`[[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\`.","solution":"from itertools import combinations def generate_combinations(n, k): Returns a list of all possible combinations of k numbers out of 1 to n. return list(combinations(range(1, n + 1), k))"},{"question":"Create a function that takes a string as input and extracts all unique characters that appear more than once in the string. The function should return these unique characters in the order they first appeared in the string.","solution":"def extract_repeated_characters(s): Extracts all unique characters that appear more than once in the string in the order they first appeared. Args: s (str): Input string. Returns: list: List of unique characters that appear more than once. seen = set() duplicates = set() order = [] for char in s: if char in seen: if char not in duplicates: duplicates.add(char) order.append(char) else: seen.add(char) return order"},{"question":"Create a function that will generate a set of random numbers and sum them up. Please write a function in Python that can achieve this. If you can, make it so that the function can accept parameters for the range of numbers and the count of numbers to generate.","solution":"import random def generate_and_sum_random_numbers(count, lower_bound, upper_bound): Generates a set of random numbers within a specified range and sums them up. Parameters: count (int): Number of random numbers to generate. lower_bound (int): Lower bound of the range for the random numbers. upper_bound (int): Upper bound of the range for the random numbers. Returns: int: The sum of the generated random numbers. random_numbers = [random.randint(lower_bound, upper_bound) for _ in range(count)] numbers_sum = sum(random_numbers) return numbers_sum"},{"question":"Create a function that adds a promotional banner to an HTML page.","solution":"def add_promotional_banner(html_page: str, banner_text: str) -> str: Adds a promotional banner with the given text to the beginning of the HTML page body. Parameters: html_page (str): The original HTML page. banner_text (str): The promotional banner text. Returns: str: The HTML page with the promotional banner added. # Define the promotional banner HTML banner_html = f'<div class=\\"promo-banner\\">{banner_text}</div>' # Insert the banner at the beginning of the body body_start_index = html_page.find('<body>') if body_start_index == -1: raise ValueError(\\"The HTML page does not contain a <body> tag.\\") # Find the location right after the <body> tag insertion_index = body_start_index + len('<body>') # Create the new html page with the promotional banner inserted new_html_page = html_page[:insertion_index] + banner_html + html_page[insertion_index:] return new_html_page"},{"question":"Create a function that adds two numbers represented as strings and returns their sum as a string. The function should handle large numbers efficiently and should be able to process very large integers that exceed the numeric capabilities of built-in data types.","solution":"def add_strings(num1, num2): Adds two numbers represented as strings and returns their sum as a string. # Reverse the strings to process from least significant digit to most significant num1 = num1[::-1] num2 = num2[::-1] carry = 0 result = [] # Loop through the digits of both numbers for i in range(max(len(num1), len(num2))): digit1 = int(num1[i]) if i < len(num1) else 0 digit2 = int(num2[i]) if i < len(num2) else 0 total = digit1 + digit2 + carry carry = total // 10 result.append(total % 10) # Append the carry if it's non-zero if carry: result.append(carry) # Reverse the result to get the final sum return ''.join(map(str, result[::-1]))"},{"question":"Create a function that checks if a given sentence is a palindrome, ignoring spaces, punctuation, and case sensitivity.","solution":"import string def is_palindrome(sentence): Checks if a given sentence is a palindrome, ignoring spaces, punctuation, and case sensitivity. # Remove punctuation and spaces, convert to lowercase cleaned_sentence = ''.join(char.lower() for char in sentence if char.isalnum()) # Check if the cleaned sentence is equal to its reverse return cleaned_sentence == cleaned_sentence[::-1]"},{"question":"Create a function that takes two integers as input and returns the sum of all the numbers between them (inclusive). If the first integer is greater than the second integer, the function should return an error message.","solution":"def sum_between(a, b): Returns the sum of all the numbers between a and b (inclusive). If a is greater than b, returns an error message. if a > b: return \\"Error: The first integer is greater than the second integer.\\" return sum(range(a, b + 1))"},{"question":"Create a function that checks if a given dictionary is empty or not. If the dictionary is empty, return \`True\`, otherwise return \`False\`.","solution":"def is_dict_empty(d): Checks if the given dictionary is empty. Parameters: d (dict): The dictionary to be checked. Returns: bool: True if the dictionary is empty, False otherwise. return not bool(d)"},{"question":"Create a function that concatenates user-provided strings with a specified separator","solution":"def concatenate(strings, separator): Concatenates a list of strings using a specified separator. Parameters: - strings: list of str, the strings to concatenate. - separator: str, the separator to use between each string. Returns: A single concatenated string with the specified separator. return separator.join(strings)"},{"question":"Create a function that takes in a string and returns a new string with all the characters replaced by their positions in the alphabet (a=1, b=2, ..., z=26). If a character is not a letter, it should be replaced by an exclamation mark (!). If the function receives a null or empty string, the function should return a null or an empty string respectively.","solution":"def alphabet_position(text): Replace each letter in the input string with its position in the English alphabet. Non-letter characters should be replaced with '!' symbol. Returns a new transformed string. Parameters: text (str): The input string. Returns: str: A new string with letters replaced by their alphabet positions and non-letters replaced by '!'. if text is None: return None if text == \\"\\": return \\"\\" result = \\"\\" for char in text: if char.isalpha(): result += str(ord(char.lower()) - ord('a') + 1) else: result += \\"!\\" return result"},{"question":"Create a function that takes a list of integers and returns a new list with each element being the square of the original element. Ensure your function is self-contained, imports any necessary packages, and includes a simple check function to verify its correctness with provided data points.","solution":"def square_elements(input_list): Returns a new list with each element being the square of the original element. :param input_list: List of integers :return: List of integers where each element is the square of the corresponding element in the input list return [x ** 2 for x in input_list]"},{"question":"Create a function that takes two positive integer inputs, \`base\` and \`exponent\`, and returns their power. For example, if \`base\` is 2 and \`exponent\` is 3, the function should return 8.","solution":"def power(base, exponent): Returns the result of base raised to the power of exponent. :param base: int, the base number (positive integer) :param exponent: int, the exponent number (positive integer) :return: int, the result of base ** exponent return base ** exponent"},{"question":"Create a function that takes a string as an input, removes all non-alphabetic characters, and returns a count of the distinct alphabetic characters. For example, given the input string \\"Hello, World!\\", the function should return 7 because it contains the distinct alphabetic characters 'H', 'e', 'l', 'o', 'W', 'r', 'd'.","solution":"def count_distinct_alphabetic_chars(s): Takes a string as input, removes all non-alphabetic characters, and returns a count of the distinct alphabetic characters. s = ''.join(filter(str.isalpha, s)) # Keep only alphabetic characters distinct_chars = set(s.lower()) # Convert to lowercase and use set to get distinct characters return len(distinct_chars)"},{"question":"Create a function that takes in a string and replaces all occurrences of a specified character with a different character provided as arguments.","solution":"def replace_char(string, old_char, new_char): Returns a new string where all occurrences of old_char in the input string have been replaced by new_char. :param string: The input string :param old_char: The character in the input string to be replaced :param new_char: The character to replace old_char with :return: A new string with old_char replaced by new_char return string.replace(old_char, new_char)"},{"question":"Create a function that multiplies two numbers using recursion in Python.","solution":"def multiply(a, b): Returns the product of a and b using recursion. # Base case: if one of the numbers is 0, the product is 0 if a == 0 or b == 0: return 0 # If b is negative, call the function with positive b and negate the result if b < 0: return -multiply(a, -b) # Recursive case: add a to the result of multiply(a, b-1) return a + multiply(a, b - 1)"},{"question":"Create a function that returns the sum of the digits in the given input string. If the function receives a non-digit character, it should ignore it.","solution":"def sum_of_digits(input_string): Returns the sum of the digits in the given input string. Ignores non-digit characters. return sum(int(char) for char in input_string if char.isdigit())"},{"question":"Create a function that generates all the fibonacci numbers up to a given limit. Your function should return a list of these numbers. The limit will be an integer.","solution":"def generate_fibonacci(limit): Generate all fibonacci numbers up to the given limit (inclusive). if limit < 0: return [] fibonacci_numbers = [0, 1] while True: next_fib = fibonacci_numbers[-1] + fibonacci_numbers[-2] if next_fib > limit: break fibonacci_numbers.append(next_fib) return fibonacci_numbers if limit > 0 else [0]"},{"question":"Create a function that takes a list of strings and returns a list of the strings with the first and last characters removed from each string.","solution":"def remove_first_and_last_characters(strings): Removes the first and last characters from each string in a list. Parameters: strings (list of str): List of strings to be modified. Returns: list of str: List of strings with the first and last characters removed. return [s[1:-1] if len(s) > 1 else '' for s in strings]"},{"question":"Create a function that calculates the sum of all numbers from 1 to n recursively. How would you implement this in Python?","solution":"def sum_recursive(n): Returns the sum of all numbers from 1 to n using recursion. if n <= 0: return 0 return n + sum_recursive(n - 1)"},{"question":"Create a function that inherits from another class, handles exceptions, and then use unit testing to validate the solution.","solution":"class ParentClass: def __init__(self, value): self.value = value def divide(self, divisor): return self.value / divisor class ChildClass(ParentClass): def __init__(self, value): super().__init__(value) def safe_divide(self, divisor): try: result = self.divide(divisor) except ZeroDivisionError: result = \\"Cannot divide by zero\\" except Exception as e: result = f\\"An error occurred: {e}\\" return result"},{"question":"Create a function that calculates the factorial of a number using recursion. The function should also handle negative inputs by raising a ValueError with an appropriate message.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. Raises a ValueError for negative input. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that checks if a given word is a palindrome (reads the same backward as forward). Write the function in Python and provide a step-by-step explanation of how it works.","solution":"def is_palindrome(word): Checks if a given word is a palindrome (reads the same backward as forward). Parameters: word (str): The word to be checked. Returns: bool: True if the word is a palindrome, False otherwise. # Convert the word to lowercase to make the check case insensitive word = word.lower() # Compare the word with its reverse return word == word[::-1]"},{"question":"Create a function that sums up numbers in an array. However, if a zero is encountered in the array, the function should skip it and continue with the next number. If an even number is found, the function should return the sum up to that number and stop.","solution":"def sum_array_with_conditions(arr): Sums up numbers in an array. Skips zero and stops at the first even number. Args: arr (list): List of integers. Returns: int: The sum of the valid numbers up to the first even number (exclusive). total = 0 for num in arr: if num == 0: continue if num % 2 == 0: break total += num return total"},{"question":"Create a function that generates random numbers and places them into an array of a given size. How should the function handle cases where the size of the array is less than or equal to zero?","solution":"import random def generate_random_numbers(size): Generates an array of random numbers of the given size. Parameters: size (int): The size of the array to generate. If size is less than or equal to 0, returns an empty array. Returns: list: Array of random numbers with the specified size. if size <= 0: return [] return [random.randint(0, 100) for _ in range(size)]"},{"question":"Create a function that takes an input dictionary, and reverses all string values while preserving the dictionary structure. If the value is not a string, it should remain unchanged. The function should also handle nested dictionaries and lists. Please provide a Python implementation.","solution":"def reverse_strings_in_dict(data): Reverses all string values in a dictionary, preserving the structure. Handles nested dictionaries and lists. if isinstance(data, dict): return {k: reverse_strings_in_dict(v) for k, v in data.items()} elif isinstance(data, list): return [reverse_strings_in_dict(i) for i in data] elif isinstance(data, str): return data[::-1] else: return data"},{"question":"Create a function that takes a string and returns the longest substring with no repeating characters. For example, if the input string is \\"abcabcbb\\", the output should be \\"abc\\", as it has the maximum length of 3. If the input string is \\"bbbbb\\", the output should be \\"b\\", as it has the maximum length of 1.","solution":"def longest_unique_substring(s): Returns the longest substring with no repeating characters. start = 0 max_length = 0 max_substring = \\"\\" used_chars = {} for index, char in enumerate(s): if char in used_chars and used_chars[char] >= start: start = used_chars[char] + 1 used_chars[char] = index current_length = index - start + 1 if current_length > max_length: max_length = current_length max_substring = s[start:index + 1] return max_substring"},{"question":"Create a function that will remove duplicates from an array. The function should take the array as input, process it, and return the array without any duplicate values. The function should also ensure that the order of the elements is preserved.","solution":"def remove_duplicates(arr): Removes duplicates from an array while preserving the order of elements. Parameters: arr (list): The input array from which duplicates have to be removed. Returns: list: The array without duplicate values. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Create a function that takes a list of integers as input and prints the sum of all the even numbers in the list. If there are no even numbers in the list, print a message indicating that there are no even numbers.","solution":"def sum_even_numbers(numbers): Sums all even numbers in the list and prints the result. If there are no even numbers, prints a message indicating that. even_sum = sum(num for num in numbers if num % 2 == 0) if even_sum == 0: print(\\"There are no even numbers in the list.\\") else: print(f\\"The sum of the even numbers is: {even_sum}\\")"},{"question":"Create a function that takes an array of integers as input and returns the maximum element in the array without using the built-in \`max()\` function. Additionally, the function should find the second maximum element in the array, and return both values in a list.","solution":"def find_max_elements(arr): Returns the maximum and second maximum elements in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements\\") first_max = float('-inf') second_max = float('-inf') for num in arr: if num > first_max: second_max = first_max first_max = num elif num > second_max and num != first_max: second_max = num return [first_max, second_max]"},{"question":"Create a function that takes a range of numbers as input and returns a list of all prime numbers within that range. The function should be called \`find_primes\` and should include a detailed docstring explaining its functionality and accept parameters for the start and end of the range, both inclusive.","solution":"def find_primes(start, end): Returns a list of all prime numbers within the specified range, inclusive of both start and end. Parameters: start (int): The starting number of the range. end (int): The ending number of the range. Returns: list: A list of prime numbers within the given range. def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Create a function that takes an array of integers and returns an array containing the top 5 largest numbers from the input array, sorted in descending order. If the input array contains fewer than 5 numbers, return all the numbers sorted in descending order.","solution":"def top_5_largest_numbers(arr): Returns the top 5 largest numbers from the input array, sorted in descending order. If the input array contains fewer than 5 numbers, return all the numbers sorted in descending order. return sorted(arr, reverse=True)[:5]"},{"question":"Create a function that takes an integer as an input and returns the largest divisor of that integer, which is less than the number itself. For example, if the input is 18, the function should return 9. If the input is 5, the function should return 1.","solution":"def largest_divisor(n): Returns the largest divisor of n which is less than n. for i in range(n//2, 0, -1): if n % i == 0: return i return 1"},{"question":"Create a function that takes a positive integer greater than 1 and returns a list of prime factors, starting from the smallest prime number. Each prime factor should be repeated in the list the number of times it occurs in the factorization.","solution":"def prime_factors(n): Returns a list of prime factors for a given positive integer n (> 1). if n <= 1: raise ValueError(\\"Input number must be greater than 1\\") factors = [] divisor = 2 while n > 1: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"Create a function that takes a string \`s\` as an input and returns boolean value if string can be segmented into a sequence of words that are all dictionary words. Use dynamic programming to solve the problem.","solution":"def word_break(s, word_dict): Returns True if the string s can be segmented into a sequence of one or more dictionary words. Args: s (str): The input string to be segmented. word_dict (set): A set of words representing the dictionary. Returns: bool: True if the string can be segmented, False otherwise. n = len(s) dp = [False] * (n + 1) dp[0] = True # Initial state; empty string can be segmented for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in word_dict: dp[i] = True break return dp[n]"},{"question":"Create a function that takes in a list of strings and returns True if any string in the list contains the substring 'hello' and False otherwise.","solution":"def contains_hello(strings): Returns True if any string in the list contains the substring 'hello', and False otherwise. for string in strings: if 'hello' in string: return True return False"},{"question":"Create a function that takes a list of integers as input and returns the smallest integer in the list that is greater than 0. If there are no positive integers in the list, the function should return -1.","solution":"def smallest_positive_integer(nums): Returns the smallest integer in the list that is greater than 0. If no such integer exists, returns -1. positive_nums = [num for num in nums if num > 0] return min(positive_nums) if positive_nums else -1"},{"question":"Create a function that uses breadth-first search (BFS) to traverse a graph. Assume the graph is represented as an adjacency list and is unweighted. The function should return the shortest path from the source node to each other node.","solution":"from collections import deque, defaultdict def bfs_shortest_path(graph, source): Perform BFS on an unweighted graph and return the shortest path from the source node to each other node. :param graph: A dictionary representing the adjacency list of the graph :param source: The starting node for BFS :return: A dictionary where keys are nodes and values are the shortest path distance from the source distances = {node: float('inf') for node in graph} distances[source] = 0 queue = deque([source]) while queue: current = queue.popleft() for neighbor in graph[current]: if distances[current] + 1 < distances[neighbor]: distances[neighbor] = distances[current] + 1 queue.append(neighbor) return distances"},{"question":"Create a function that takes an integer n as input and returns the nth Fibonacci number in the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The function should use recursion to calculate the Fibonacci number.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: raise ValueError(\\"Input should be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Create a function that takes an integer N as an input and returns a list of strings, where the i-th element in the list should be a string that contains all the integers from 1 to i (inclusive), concatenated together in ascending order. For example, if N is 4, the function should return [\\"1\\", \\"12\\", \\"123\\", \\"1234\\"].","solution":"def concatenate_numbers(N): Creates a list of strings where each string contains all integers from 1 to i in ascending order. Parameters: N (int): The number up to where the concatenation should happen. Returns: list: A list of concatenated number strings. return [''.join(str(x) for x in range(1, i+1)) for i in range(1, N+1)]"},{"question":"Create a function that takes an integer n and a list of integers. Return a new list containing only the numbers from the original list that are greater than n.","solution":"def filter_greater_than(n, numbers): Returns a list of numbers that are greater than n. Parameters: n (int): The integer threshold. numbers (list of int): The list of integers to be filtered. Returns: list of int: A list of integers from 'numbers' that are greater than 'n'. return [number for number in numbers if number > n]"},{"question":"Create a function that takes 2 arguments, multiplies them, and then divides the result by 3. The function should return the result. How can this be done in Python?","solution":"def multiply_and_divide(a, b): Multiplies two numbers and then divides the result by 3. Args: a (float or int): The first input number. b (float or int): The second input number. Returns: float: The result of (a * b) / 3. return (a * b) / 3"},{"question":"Create a function that takes an array of numbers as an input and returns the array with all odd numbers removed.","solution":"def remove_odd_numbers(arr): Removes all odd numbers from the input array. Parameters: arr (list): A list of integers. Returns: list: A list with all odd numbers removed. return [num for num in arr if num % 2 == 0]"},{"question":"Create a function that takes two input lists and outputs a list of pairs, where each pair is a concatenation of the corresponding elements from the input lists. If the input lists are not of the same length, the output should contain only the pairs formed until the shorter list is exhausted.","solution":"def pair_concatenate(list1, list2): Returns a list of concatenated pairs from two input lists. Args: list1, list2 (list of str): Input lists to be paired and concatenated. Returns: list of str: A list of concatenated pairs. return [str(a) + str(b) for a, b in zip(list1, list2)]"},{"question":"Create a function that takes a list of integers and returns a new list with the same integers sorted in descending order, but only if the integers are odd. If the integer is even, it should remain in its original position.","solution":"def sort_odds_desc(arr): Returns a new list where odd integers are sorted in descending order and even integers remain in their original positions. odd_numbers = sorted([x for x in arr if x % 2 == 1], reverse=True) result = [] odd_index = 0 for num in arr: if num % 2 == 1: result.append(odd_numbers[odd_index]) odd_index += 1 else: result.append(num) return result"},{"question":"Create a function that takes two lists as input and finds the common elements between them.","solution":"def find_common_elements(list1, list2): Returns a list of common elements between list1 and list2. return list(set(list1) & set(list2))"},{"question":"Create a function that takes an array of strings and returns the string that is the most common, most frequently occurring, in the array. If there is a tie, the first one that appears in the array should be returned. You may assume that there will always be at least one word in the array.","solution":"def most_common_string(arr): Returns the most common string in the array. If there is a tie, the first one that appears in the array should be returned. from collections import Counter count = Counter(arr) max_count = max(count.values()) for word in arr: if count[word] == max_count: return word"},{"question":"Create a function that takes two strings as input and returns the longest common substring. If there are multiple longest common substrings of the same length, return the one that appears first when compared lexicographically. If no common substring exists, return an empty string.","solution":"def longest_common_substring(str1, str2): Returns the longest common substring between two strings. If there are multiple, returns the lexicographically smallest. If no common substring exists, returns an empty string. len1, len2 = len(str1), len(str2) if len1 == 0 or len2 == 0: return \\"\\" # Initializing the table for Dynamic Programming dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] max_length = 0 ending_index = 0 # To keep a track of the lexicographically smallest common substring common_substrings = set() # Building the table for i in range(1, len1 + 1): for j in range(1, len2 + 1): if str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 if dp[i][j] > max_length: max_length = dp[i][j] ending_index = i common_substrings.clear() common_substrings.add(str1[i - max_length:i]) elif dp[i][j] == max_length: common_substrings.add(str1[i - max_length:i]) if max_length == 0: return \\"\\" return min(common_substrings)"},{"question":"Create a function that generates the first 10 Fibonacci numbers using a generator function in Python. The function should yield each number in the Fibonacci sequence.","solution":"def fibonacci_generator(): Generates the first 10 Fibonacci numbers using a generator. Yields: The next number in the Fibonacci sequence. a, b = 0, 1 count = 0 while count < 10: yield a a, b = b, a + b count += 1"},{"question":"Create a function that takes two arguments, \`min\` and \`max\`, representing the minimum and maximum integers you want to generate within an array, respectively. The function should return an array containing unique random integers between \`min\` and \`max\` (inclusive), without repetition.","solution":"import random def generate_unique_random_array(min, max): Generates an array of unique random integers between min and max (inclusive). Parameters: - min: int, the minimum integer to generate. - max: int, the maximum integer to generate. Returns: - A list of unique integers between min and max (inclusive). if min > max: raise ValueError(\\"min must be less than or equal to max\\") return random.sample(range(min, max + 1), max - min + 1)"},{"question":"Create a function that finds the index of the maximum value in an array of numbers.","solution":"def find_max_index(arr): Returns the index of the maximum value in the array. If the array is empty, returns None. if not arr: return None max_index = 0 for i in range(1, len(arr)): if arr[i] > arr[max_index]: max_index = i return max_index"},{"question":"Create a function that performs similar operations to map in Python, but for lists. The function should take a list and a transformation function as parameters. It should apply the transformation function to each element of the list and return a new list with the transformed elements. Additionally, the function should handle the case where the input list is empty.","solution":"def list_map(transform, lst): Applies the 'transform' function to each element in 'lst' and returns a new list with the transformed elements. If the input list is empty, it returns an empty list. :param transform: A function to apply to each element of the list. :param lst: A list of elements to be transformed. :return: A new list with the transformed elements. if not lst: return [] return [transform(element) for element in lst]"},{"question":"Create a function that calculates the factorial of a given number using recursion. The function should take an integer as input and return the factorial of that integer. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative integers\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that determines whether a given string contains any repeated characters. The function should return \`True\` if there are repeated characters and \`False\` otherwise.","solution":"def has_repeated_characters(s): Determines whether a given string contains any repeated characters. :param s: String to be checked for repeated characters. :return: True if there are repeated characters, False otherwise. return len(s) != len(set(s))"},{"question":"Create a function that reverses the order of a list of integers.","solution":"def reverse_list(lst): Reverses the order of a list of integers. Parameters: - lst: List of integers Returns: - A new list with the elements in reversed order. return lst[::-1]"},{"question":"Create a function that takes in a string of digits and returns the smallest possible sum of any two distinct digits within the string.","solution":"def smallest_sum_of_two_digits(digit_string): Takes in a string of digits and returns the smallest possible sum of any two distinct digits within the string. if len(digit_string) < 2: raise ValueError(\\"The input string should contain at least two digits.\\") digits = list(map(int, digit_string)) sorted_digits = sorted(digits) return sorted_digits[0] + sorted_digits[1]"},{"question":"Create a function that takes an array of integers, removes duplicates, and returns the result as a new array. If the input array is empty, the function should return an empty array. Additionally, provide a piece of code to check the correctness of the function with a few test cases.","solution":"def remove_duplicates(arr): Remove duplicates from the array and return a new array. return list(set(arr))"},{"question":"Create a function that takes two lists of numbers as input and returns a new list containing the product of all pairs of numbers from the two lists. The pairs should be formed by matching the elements at the same index from each list.","solution":"def multiply_pairs(list1, list2): This function takes two lists of numbers and returns a new list containing the product of all pairs of numbers from the two lists. The pairs are formed by matching the elements at the same index from each list. Args: list1: List of numbers. list2: List of numbers. Returns: List of products of pairs of numbers from list1 and list2. if len(list1) != len(list2): raise ValueError(\\"Both lists must have the same length\\") return [a * b for a, b in zip(list1, list2)]"},{"question":"Create a function that takes in a list of integers and returns the count of unique elements in the list. Unique elements are those that appear only once in the list.","solution":"def count_unique_elements(lst): Returns the count of unique elements in the list. Unique elements are those that appear only once in the list. from collections import Counter count = Counter(lst) unique_count = sum(1 for val in count.values() if val == 1) return unique_count"},{"question":"Create a function that takes three integers as input and returns the sum of the numbers. If any of the numbers are below 0, the function should return -1. What are you testing?","solution":"def sum_with_validation(a, b, c): Returns the sum of a, b, and c. If any of the integers are below 0, the function returns -1. if a < 0 or b < 0 or c < 0: return -1 return a + b + c"},{"question":"Create a function that sorts an array of numbers in ascending order.","solution":"def sort_numbers(arr): Sorts an array of numbers in ascending order. Parameters: arr (list): A list of numbers to be sorted. Returns: list: A new list with the numbers sorted in ascending order. return sorted(arr)"},{"question":"Create a function that checks if a given string is a palindrome without using the built-in reverse() method.","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, False otherwise. # Remove spaces and convert to lowercase for accurate comparison s = s.replace(\\" \\", \\"\\").lower() # Iterate through the string to check if it matches from start and end simultaneously for i in range(len(s) // 2): if s[i] != s[-(i + 1)]: return False return True"},{"question":"Create a function that takes an array of strings as input and returns a new array where each string has been rotated 13 places to the right in the alphabet. This is known as a Caesar cipher with a shift of 13.","solution":"def rotate_13(strings): Rotates each character in each string in the input array 13 places to the right in the alphabet. def rotate_char(c): if 'a' <= c <= 'z': return chr((ord(c) - ord('a') + 13) % 26 + ord('a')) elif 'A' <= c <= 'Z': return chr((ord(c) - ord('A') + 13) % 26 + ord('A')) else: return c def rotate_string(s): return ''.join(rotate_char(c) for c in s) return [rotate_string(s) for s in strings]"},{"question":"Create a function that takes a string and checks whether the string is a palindrome or not. Can you provide the solution in Python?","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, False otherwise. cleaned_s = ''.join(filter(str.isalnum, s)).lower() return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that takes an array of integers as input and returns a new array where each element is the square of the corresponding element in the input array. Understand the concept of list comprehension in Python to achieve this.","solution":"def square_elements(input_array): Returns a new array where each element is the square of the corresponding element in the input array. Parameters: input_array (list of int): The array of integers to be squared. Returns: list of int: A new array with squared values of the input array. return [x ** 2 for x in input_array]"},{"question":"Create a function that takes a number as input and adds 100 to it. If the number is negative, the function should return an error message. If the result of adding 100 is greater than 1000, the function should return an error message instead. How can I implement this in Python?","solution":"def add_100(num): Adds 100 to the input number if the number is non-negative. If the number is negative, returns an error message. If the result of the addition is greater than 1000, returns an error message. if num < 0: return \\"Error: Negative number\\" result = num + 100 if result > 1000: return \\"Error: Result exceeds 1000\\" return result"},{"question":"Create a function that takes three arguments: two integers and a boolean value. The function should return true only if both integers are positive if the boolean value is true, or both integers are negative if the boolean value is false.","solution":"def check_integers(a, b, flag): Returns True if both integers 'a' and 'b' are positive and 'flag' is True, or if both integers are negative and 'flag' is False. Otherwise, returns False. if flag: return a > 0 and b > 0 else: return a < 0 and b < 0"},{"question":"Create a function that takes a string \`s\` as input and returns the longest substring of \`s\` that can be formed by repeating a single character.","solution":"def longest_repeating_substring(s): Returns the longest substring of \`s\` that can be formed by repeating a single character. if not s: return \\"\\" max_char = s[0] max_length = 1 current_char = s[0] current_length = 1 for i in range(1, len(s)): if s[i] == current_char: current_length += 1 else: current_char = s[i] current_length = 1 if current_length > max_length: max_length = current_length max_char = current_char return max_char * max_length"},{"question":"Create a function that takes in a list of integers and returns the sum of all the even numbers in the list. If the list is empty or does not contain any even numbers, the function should return 0. If there is any negative number in the list, the function should return the negative of the sum of all the odd numbers in the list. If there is any number that is not an integer, the function should return an error message.","solution":"def sum_even_numbers(lst): Returns the sum of all even numbers in the list. If the list contains any negative number, returns the negative of the sum of all odd numbers in the list. If there are non-integer values in the list, returns an error message. if not all(isinstance(x, int) for x in lst): return \\"List contains non-integer value\\" if any(x < 0 for x in lst): return -sum(x for x in lst if x % 2 != 0) return sum(x for x in lst if x % 2 == 0)"},{"question":"Create a function that takes two integers as input and prints all the numbers between those integers (inclusive). If the first integer is greater than the second, print an error message. How should I approach this problem?","solution":"def print_numbers_between(a, b): Prints all numbers between \`a\` and \`b\` (inclusive). If \`a\` is greater than \`b\`, prints an error message. if a > b: print(\\"Error: The first integer is greater than the second integer.\\") else: for number in range(a, b + 1): print(number)"},{"question":"Create a function that calculates the sum of all numbers in a list. If the list is empty, the function should return 0. If the list contains any non-numeric values, the function should ignore those values and continue summing the numeric values.","solution":"def sum_all_numbers(lst): Returns the sum of all numeric values in the list. Ignores non-numeric values. If the list is empty, it returns 0. return sum(x for x in lst if isinstance(x, (int, float)))"},{"question":"Create a function that takes an integer x as input and returns the greatest integer that is less than or equal to x.","solution":"def floor_integer(x): Returns the greatest integer that is less than or equal to x. return int(x) if x >= 0 else int(x) - 1 if x != int(x) else int(x)"},{"question":"Create a function that takes in a string of digits and returns the largest possible number by permutation. For example, given the string \\"3892\\", the function should return \\"9832\\".","solution":"def largest_permutation(digit_string): Returns the largest possible number by permutating the digits in the input string. :param digit_string: A string representing digits. :return: A string representing the largest possible number. if not digit_string.isdigit(): raise ValueError(\\"Input must be a string of digits.\\") return ''.join(sorted(digit_string, reverse=True))"},{"question":"Create a function that counts the number of words in a given string. For example, the string \\"a b c\\" contains 3 words. If it's an empty string, the function should return 0.","solution":"def count_words(s): This function returns the number of words in the given string s. A word is defined as a sequence of characters separated by whitespace. if not s.strip(): return 0 return len(s.split())"},{"question":"Create a function that generates the first \`n\` Fibonacci numbers and returns them as a list. For example, if \`n\` is 5, the function should return the first 5 Fibonacci numbers: [0, 1, 1, 2, 3].","solution":"def generate_fibonacci(n): Generates the first n Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fibonacci = [0, 1] for i in range(2, n): fibonacci.append(fibonacci[i-1] + fibonacci[i-2]) return fibonacci"},{"question":"Create a function that finds the minimum and maximum values in a given list of numbers using Python. Return the result as a tuple containing the minimum and maximum values.","solution":"def find_min_max(lst): Returns a tuple containing the minimum and maximum values in the given list. Parameters: lst (list): List of numbers. Returns: tuple: A tuple containing the minimum and maximum values. if not lst: raise ValueError(\\"The list cannot be empty\\") min_value = min(lst) max_value = max(lst) return min_value, max_value"},{"question":"Create a function that takes in a single parameter \`n\` and returns a斐波那契数列（Fibonacci sequence）数组 of length \`n\`.","solution":"def fibonacci_sequence(n): Returns a list of the first n Fibonacci numbers. if n <= 0: return [] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Create a function that takes an array of integers and returns a new array that contains only the elements that are greater than 10 and are at even indices in the original array.","solution":"def get_elements_at_even_indices_greater_than_10(arr): Returns a new array containing elements from the given array that are greater than 10 and are located at even indices in the original array. Parameters: arr (list of int): The original array of integers. Returns: list of int: A new array with the specified elements. return [arr[i] for i in range(0, len(arr), 2) if arr[i] > 10]"},{"question":"Create a function that returns the maximum value in a given integer list. If the list is empty, return the integer -1. If the list contains only one element, return that element. If the list is in descending order, return the first element. Otherwise, return the maximum value in the list by performing bubble sort and then returning the last element.","solution":"def find_max_value(lst): Returns the maximum value in the given integer list. If the list is empty, returns -1. If the list contains only one element, returns that element. If the list is in descending order, returns the first element. Otherwise, returns the maximum value in the list by performing bubble sort and returning the last element. if not lst: return -1 if len(lst) == 1: return lst[0] if lst == sorted(lst, reverse=True): return lst[0] # Bubble sort n = len(lst) for i in range(n): for j in range(0, n-i-1): if lst[j] > lst[j+1]: lst[j], lst[j+1] = lst[j+1], lst[j] return lst[-1]"},{"question":"Create a function that calculates the first \`n\` numbers in the Fibonacci sequence.","solution":"def fibonacci(n): Returns the first n numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1 F(n) = F(n-1) + F(n-2) for n > 1 if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] seq = [0, 1] for i in range(2, n): seq.append(seq[-1] + seq[-2]) return seq"},{"question":"Create a function that takes an integer array of any size and returns an array containing only the positive numbers. Filter the array so that only the positive numbers remain. If the array does not contain any positive numbers, return an empty array. Make sure to use Python as the programming language.","solution":"def filter_positive_numbers(nums): Takes an integer array of any size and returns an array containing only the positive numbers. If the array doesn't contain any positive numbers, returns an empty array. :param nums: List[int] - The list of integers to filter. :return: List[int] - A list containing only the positive numbers from the input list. return [num for num in nums if num > 0]"},{"question":"Create a function that takes a string as input and returns a new string with the order of the words reversed. The words in the input string are separated by spaces.","solution":"def reverse_words(s): Reverses the order of words in the input string. Arguments: s -- input string Returns: A new string with the order of words reversed. words = s.split() return ' '.join(reversed(words))"},{"question":"Create a function that takes an array of numbers and returns the median.","solution":"def find_median(arr): Returns the median of the array of numbers. n = len(arr) if n == 0: raise ValueError(\\"The array is empty\\") arr_sorted = sorted(arr) mid = n // 2 # If length is odd, return the middle element if n % 2 != 0: return arr_sorted[mid] # If length is even, return the average of the two middle elements else: return (arr_sorted[mid - 1] + arr_sorted[mid]) / 2"},{"question":"Create a function that takes an array of dates (in the format 'YYYY-MM-DD'), and returns the date that is the farthest from the first date in the array.","solution":"from datetime import datetime def farthest_date(dates): Returns the date that is the farthest from the first date in the array. Args: dates (list): A list of dates in the format 'YYYY-MM-DD'. Returns: str: The date that is the farthest from the first date. if not dates: return None first_date = datetime.strptime(dates[0], '%Y-%m-%d') max_diff = -1 farthest_date = None for date in dates[1:]: current_date = datetime.strptime(date, '%Y-%m-%d') diff = abs((current_date - first_date).days) if diff > max_diff: max_diff = diff farthest_date = date return farthest_date"},{"question":"Create a function that takes two arrays of equal length. The function should return a new array where each element is the sum of the corresponding elements in the input arrays. If the arrays are not of equal length, the function should raise an exception.","solution":"def sum_arrays(arr1, arr2): Takes two arrays of equal length and returns a new array where each element is the sum of the corresponding elements in the input arrays. :param arr1: First input array :param arr2: Second input array :return: An array where each element is the sum of the corresponding elements in arr1 and arr2 :raises ValueError: If the input arrays are not of equal length if len(arr1) != len(arr2): raise ValueError(\\"Both arrays must be of equal length\\") return [x + y for x, y in zip(arr1, arr2)]"},{"question":"Create a function that takes two lists of integers as input and returns a list of tuples, where each tuple consists of one element from the first list and one element from the second list. Each tuple should be formed by adding the corresponding elements of the two lists. For example, given two lists \`[1, 2, 3]\` and \`[4, 5, 6]\`, the function should return \`[(5, 7), (7, 9), (9, 11)]\`.","solution":"def add_lists(list1, list2): Returns a list of tuples made by adding the corresponding elements of list1 and list2. The ith tuple is formed by adding the ith elements of both lists. if len(list1) != len(list2): raise ValueError(\\"Both lists must have the same length.\\") return [(list1[i] + list2[i], list1[i] + list2[i] + 2) for i in range(len(list1))]"},{"question":"Create a function that takes a string as a parameter and returns the reverse of that string. If the string is already a palindrome, return \\"Palindrome, string reversed\\" instead.","solution":"def reverse_string(s): Returns the reversed string of input s. If s is a palindrome, returns \\"Palindrome, string reversed\\". reverse_s = s[::-1] if s == reverse_s: return \\"Palindrome, string reversed\\" return reverse_s"},{"question":"Create a function that takes a list of integers and returns True if there is a subset of the list that sums up to a given target number, otherwise return False.","solution":"def is_subset_sum(lst, target): Check if there is a subset of the list \`lst\` that sums up to \`target\`. Args: lst (list of int): List of integers. target (int): Target sum. Returns: bool: True if subset sum exists, False otherwise. n = len(lst) # Initialize a 2D array to store the subset sum possibilities subset = [[False] * (target + 1) for _ in range(n + 1)] # There is always a subset with sum 0 - the empty subset for i in range(n + 1): subset[i][0] = True # Fill the subset table in bottom-up manner for i in range(1, n + 1): for j in range(1, target + 1): if j < lst[i - 1]: subset[i][j] = subset[i - 1][j] else: subset[i][j] = subset[i - 1][j] or subset[i - 1][j - lst[i - 1]] return subset[n][target]"},{"question":"Create a function that removes all occurrences of a specified value from a list in Python. The function should take a list and the value to remove as arguments and return a new list without the specified value.","solution":"def remove_occurrences(lst, value): Removes all occurrences of 'value' from the list 'lst'. Args: lst (list): The list from which to remove the value. value: The value to remove from the list. Returns: list: A new list without the specified value. return [item for item in lst if item != value]"},{"question":"Create a function that implements the Caesar Cipher with a shift of 3. The function should take a string as input and return the encrypted string. Additionally, provide a Python code to decode the string using the Caesar Cipher with the same shift value.","solution":"def caesar_cipher_encrypt(text, shift=3): Encrypts the input text using Caesar Cipher with a shift of 3. Args: - text (str): The input text to encrypt. - shift (int): The number of positions to shift the alphabet. Default is 3. Returns: - str: The encrypted text. result = [] for char in text: if char.isalpha(): shift_amount = shift % 26 ascii_offset = 65 if char.isupper() else 97 new_char = chr((ord(char) - ascii_offset + shift_amount) % 26 + ascii_offset) result.append(new_char) else: result.append(char) return ''.join(result) def caesar_cipher_decrypt(text, shift=3): Decrypts the input text using Caesar Cipher with a shift of 3. Args: - text (str): The input text to decrypt. - shift (int): The number of positions the alphabet was shifted. Default is 3. Returns: - str: The decrypted text. return caesar_cipher_encrypt(text, -shift)"},{"question":"Create a function that takes an array and reverses the order of the array elements. The array can contain elements of any type including numbers, strings, and complex objects. For example, \`reverseArray(myArray := [1, 2, \\"three\\", 4.0, {'key': 'value'}])\` should return \`['value', {'key': 'value'}, 4.0, \\"three\\", 2, 1]\`.","solution":"def reverseArray(array): Returns the array with the elements in reverse order. return array[::-1]"},{"question":"Create a function that checks if a list contains only integers and returns \`True\` if all elements are integers, and \`False\` otherwise.","solution":"def all_integers(lst): Checks if a list contains only integers. Args: lst (list): The list to check. Returns: bool: True if all elements in the list are integers, False otherwise. return all(isinstance(x, int) for x in lst)"},{"question":"Create a function that takes in an integer n and returns the list of all prime numbers between 1 and n (inclusive).","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def primes_up_to(n): Returns a list of all prime numbers between 1 and n (inclusive). return [num for num in range(1, n + 1) if is_prime(num)]"},{"question":"Create a function that takes an integer as input and returns the length of that integer when represented as a string. You shouldn't use any built-in methods to directly convert the integer to a string. Instead, calculate the length by manually counting the digits.","solution":"def integer_length(n): Returns the length of the given integer when represented as a string. if n == 0: return 1 length = 0 if n < 0: n = -n # Make n positive to count digits while n > 0: # Reduce n by one digit at a time n //= 10 length += 1 return length"},{"question":"Create a function that takes an array of integers and returns the maximum four-digit number that can be formed using the digits in the array. If it's not possible to form a four-digit number, return -1.","solution":"from itertools import permutations def max_four_digit_number(arr): Returns the maximum four-digit number that can be formed using the digits in the array. If it's not possible to form a four-digit number, returns -1. if len(arr) < 4: return -1 # Not enough digits digits = [str(digit) for digit in arr] max_number = -1 for perm in permutations(digits, 4): number = int(''.join(perm)) if number > max_number: max_number = number return max_number"},{"question":"Create a function that verifies if a given number is a perfect cube or not. A perfect cube is a number that can be expressed as the cube of an integer. For instance, 1, 8, and 27 are perfect cubes (as they are the cube of 1, 2, and 3, respectively), whereas 2, 14, and 26 are not. Your function should return \`True\` if the number is a perfect cube, and \`False\` otherwise. Include a check function with provided data points to verify the correctness of your solution.","solution":"def is_perfect_cube(num): Returns True if num is a perfect cube, otherwise False. if num < 0: return False cube_root = round(num ** (1/3)) return cube_root ** 3 == num"},{"question":"Create a function that takes a string and a substring as input. The function should return all the starting indices of the substring in the string. If the substring is not found, return an empty list.","solution":"def find_substring_indices(s, sub): Returns all starting indices of the substring \`sub\` in the string \`s\`. If the substring is not found, returns an empty list. indices = [] sub_len = len(sub) for i in range(len(s) - sub_len + 1): if s[i:i + sub_len] == sub: indices.append(i) return indices"},{"question":"Create a function that returns the count of all characters except for 'a', 'e', 'i', 'o', 'u' in a string. How should the function be implemented using Python?","solution":"def count_non_vowel_characters(s): Returns the count of all characters except for 'a', 'e', 'i', 'o', 'u' in a string. Both uppercase and lowercase vowels are excluded. vowels = {'a', 'e', 'i', 'o', 'u'} count = 0 for char in s.lower(): if char not in vowels: count += 1 return count"},{"question":"Create a function that takes a two-dimensional list (list of lists) as input and returns the sum of all the elements in the list.","solution":"def sum_2d_list(matrix): Returns the sum of all elements in a two-dimensional list. Parameters: matrix (list of lists of int/float): A two-dimensional list of numbers. Returns: int/float: The sum of all elements in the matrix. total = 0 for row in matrix: for element in row: total += element return total"},{"question":"Create a function that takes a single integer as an input and returns the factorial of the number. The function should handle non-negative integers and raise a ValueError for negative inputs.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Raises a ValueError for negative inputs. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes a list and returns the count of all the characters in the list. You should handle both strings and integers, converting integers to strings if necessary.","solution":"def count_characters(lst): Returns the count of all characters in the list. Converts integers to strings and counts all characters including spaces. total_count = 0 for item in lst: total_count += len(str(item)) return total_count"},{"question":"Create a function that takes two arrays as input and returns an array containing the common elements found in both of the input arrays. The function should efficiently use data structures to minimize the time complexity.","solution":"def common_elements(array1, array2): Returns a list of common elements found in both input arrays. :param array1: First list of elements :param array2: Second list of elements :return: List of common elements in both arrays set1 = set(array1) set2 = set(array2) return list(set1 & set2)"},{"question":"Create a function that accepts a list of integers as a parameter and returns the count of even numbers in the list. Additionally, the function should return the count of odd numbers in the list. The function should return these counts as a tuple, with the first element being the count of even numbers and the second element being the count of odd numbers.","solution":"def count_even_odd(numbers): Returns a tuple with the count of even numbers and the count of odd numbers in the list. :param numbers: List of integers :return: Tuple (count_even, count_odd) count_even = sum(1 for num in numbers if num % 2 == 0) count_odd = sum(1 for num in numbers if num % 2 != 0) return (count_even, count_odd)"},{"question":"Create a function that takes in four parameters: \`x\`, \`y\`, \`a\`, and \`b\`, and returns the value of \`x*y + a*b\`. If \`a and \`b\` are non-zero, return \`x*y + a*b\`, otherwise, return \`x*y\`.","solution":"def compute_expression(x, y, a, b): Returns the value of x*y + a*b if a and b are non-zero, otherwise returns x*y. if a != 0 and b != 0: return x * y + a * b else: return x * y"},{"question":"Create a function that checks if a given string contains only unique characters without using any additional data structures like arrays, lists, or dictionaries.","solution":"def has_unique_characters(s): Check if a given string contains only unique characters. Args: s (str): The string to be checked. Returns: bool: True if the string contains only unique characters, False otherwise. for i in range(len(s)): for j in range(i + 1, len(s)): if s[i] == s[j]: return False return True"},{"question":"Create a function that takes an array of numbers and returns the second largest number in the array. If the array has fewer than two numbers, return null. If the array contains duplicates of the largest number, consider them as unique values.","solution":"def second_largest(arr): Returns the second largest number in an array. If the array has fewer than two numbers, return None. if len(arr) < 2: return None first = second = float('-inf') for num in arr: if num > first: second = first first = num elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Create a function that takes a string as input and returns the most frequently occurring word in the string. If there are multiple words with the same highest frequency, return the one that appears first in the string. You should consider case sensitivity, meaning 'The' and 'the' are different words.","solution":"def most_frequent_word(s): Returns the most frequently occurring word in the string. If multiple words have the same highest frequency, the function returns the one that appears first in the string. from collections import Counter # Split the string into words words = s.split() # Create a counter for the words word_count = Counter(words) # Find the maximum frequency max_freq = max(word_count.values()) # Find the first word with the maximum frequency for word in words: if word_count[word] == max_freq: return word"},{"question":"Create a function that takes an array of integers as an input and returns the length of the longest contiguous subarray where the sum of the elements is equal to an integer k.","solution":"def longest_subarray_with_sum(arr, k): Returns the length of the longest contiguous subarray where the sum of the elements is equal to k. :param arr: List of integers :param k: Integer sum to be matched :return: Length of the longest contiguous subarray # Dictionary to store sum until each index sum_map = {} current_sum = 0 max_length = 0 for i, num in enumerate(arr): current_sum += num if current_sum == k: max_length = i + 1 if current_sum - k in sum_map: max_length = max(max_length, i - sum_map[current_sum - k]) if current_sum not in sum_map: sum_map[current_sum] = i return max_length"},{"question":"Create a function that takes a two-dimensional list of integers as input and returns the maximum element found in the 2D list. Assume that the 2D list is not empty and each sublist also contains at least one integer.","solution":"def find_max_in_2d_list(lst): Returns the maximum element found in the 2D list. max_element = lst[0][0] for sublist in lst: for item in sublist: if item > max_element: max_element = item return max_element"},{"question":"Create a function that returns the first and last characters of a string.","solution":"def first_and_last_characters(s): Returns a string composed of the first and last characters of the input string s. If the string has less than 2 characters, returns the string itself. if len(s) < 2: return s return s[0] + s[-1]"},{"question":"Create a function that generates the first \`n\` Fibonacci numbers using recursion. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first six Fibonacci numbers are 0, 1, 1, 2, 3, 5.","solution":"def fibonacci(n): Generates the first n Fibonacci numbers using recursion. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: fibs = fibonacci(n - 1) fibs.append(fibs[-1] + fibs[-2]) return fibs"},{"question":"Create a function that takes a list of tuples as an input and returns a list of single elements that are common to all tuples in the list.","solution":"def common_elements(tuples_list): Returns a list of single elements that are common to all tuples in the list. if not tuples_list: return [] # Initialize the common elements set as the first tuple set common_set = set(tuples_list[0]) # Intersect with all other tuples for t in tuples_list[1:]: common_set.intersection_update(t) return list(common_set)"},{"question":"Create a function that identifies the longest substring with the same characters in a given string. For example, for the input \\"aaabbcccddddeeeeee\\", the function should return \\"eeeeee\\".","solution":"def longest_same_char_substring(s): Identifies the longest substring with the same characters in a given string. Parameters: s (str): The input string. Returns: str: The longest substring with the same character. if not s: return \\"\\" max_char = s[0] max_length = 1 current_char = s[0] current_length = 1 for char in s[1:]: if char == current_char: current_length += 1 else: if current_length > max_length: max_char = current_char max_length = current_length current_char = char current_length = 1 if current_length > max_length: max_char = current_char max_length = current_length return max_char * max_length"},{"question":"Create a function that takes a string and an integer N as arguments. The function should return a new string where the first N characters and the last N characters of the original string are swapped. If N is greater than half the length of the string, the entire string should be reversed.","solution":"def swap_first_last_n_chars(s, n): Swaps the first N and last N characters of the original string s. If N is greater than half the length of the string, the entire string is reversed. length = len(s) if n > length // 2: return s[::-1] return s[-n:] + s[n:-n] + s[:n]"},{"question":"Create a function that takes two numbers as input and returns the sum of all integers from the first number to the second number (inclusive). If the first number is greater than the second number, the function should return 0.","solution":"def sum_in_range(start, end): Returns the sum of all integers from start to end (inclusive). If start is greater than end, returns 0. if start > end: return 0 return sum(range(start, end + 1))"},{"question":"Create a function that takes a dictionary as input and returns a new dictionary with all the values transformed using a provided function.","solution":"def transform_values(input_dict, transform_func): Returns a new dictionary with all values transformed using the provided function. :param input_dict: Dictionary with original values :param transform_func: Function to apply to each value in the dictionary :return: New dictionary with transformed values return {key: transform_func(value) for key, value in input_dict.items()}"},{"question":"Create a function that takes in a list of tuples and returns a new list of tuples with the elements of each tuple reversed.","solution":"def reverse_tuples(tuples_list): Takes a list of tuples and returns a new list of tuples with the elements of each tuple reversed. return [tuple(reversed(t)) for t in tuples_list]"},{"question":"Create a function that takes a list of strings as an argument and returns a new list where each string is concatenated with its index in the array.","solution":"def concatenate_with_index(strings): Takes a list of strings and returns a new list where each string is concatenated with its index. Args: strings (list of str): The list of strings to be concatenated with their indices. Returns: list of str: A new list containing each string concatenated with its index. return [f\\"{s}{i}\\" for i, s in enumerate(strings)]"},{"question":"Create a function that takes two string inputs, \`str1\` and \`str2\`. The function will check if \`str1\` is a rotated version of \`str2\`. A rotated string is a string that can be obtained by taking a substring from the start of the original string and moving it to the end.","solution":"def is_rotated(str1, str2): Checks if str1 is a rotated version of str2. if len(str1) != len(str2): return False concatenated = str2 + str2 return str1 in concatenated"},{"question":"Create a function that takes an array of integers and returns the sum of all unique elements that occur more than once in the array.","solution":"def sum_of_repeated_elements(arr): Takes an array of integers and returns the sum of all unique elements that occur more than once in the array. from collections import Counter # Count the occurrences of each element in the array element_count = Counter(arr) # Sum only the elements that occur more than once sum_repeated = sum(value for value, count in element_count.items() if count > 1) return sum_repeated"},{"question":"Create a function that takes a single string as an argument and returns a new string that is the reverse of the input string. Additionally, ensure that the function does not use any built-in functions for reversing strings, such as reversed() or slicing with [::-1]. The function should handle both uppercase and lowercase letters, and preserve their case in the reverse output.","solution":"def reverse_string(input_str): Reverses the given string without using any built-in reversing methods. Parameters: input_str (str): The string to be reversed. Returns: str: The reversed string. reversed_str = '' for char in input_str: reversed_str = char + reversed_str return reversed_str"},{"question":"Create a function that takes an integer as an input and returns the last digit of the number.","solution":"def last_digit(n): Returns the last digit of the given integer n. return abs(n) % 10"},{"question":"Create a function that takes two numbers as input and returns the sum of all even numbers between them, including the numbers themselves if they are even.","solution":"def sum_of_even_numbers(a, b): Returns the sum of all even numbers between a and b, inclusive. if a > b: a, b = b, a return sum(number for number in range(a, b + 1) if number % 2 == 0)"},{"question":"Create a function that accepts an array of integers, sorts them in descending order, and returns the sum of the squares of the sorted numbers.","solution":"def sum_of_squares_descending(arr): Sort the array in descending order, and return the sum of the squares of each element. sorted_arr = sorted(arr, reverse=True) return sum(x ** 2 for x in sorted_arr)"},{"question":"Create a function that accepts a data structure (dictionary) and a key, then returns a value associated with that key if the key exists, otherwise return None.","solution":"def get_value(data, key): Returns the value associated with a key in a dictionary. If the key does not exist, returns None. return data.get(key)"},{"question":"Create a function that takes a list of integers as input and returns the maximum number of elements that can be selected from the list such that the sum of the selected elements is less than or equal to a specified maximum sum. This is similar to the subset sum problem, but with a twist that you can select at most two elements more than the maximum sum allows.","solution":"def max_elements_with_sum_less_than_or_equal(nums, max_sum): Returns the maximum number of elements that can be selected from the list such that the sum of the selected elements is less than or equal to a specified maximum sum. nums.sort() current_sum = 0 count = 0 for num in nums: if current_sum + num <= max_sum: current_sum += num count += 1 else: break return count"},{"question":"Create a function that takes an integer argument and returns the sum of the first n natural numbers. For example, if the input is 5, the function should return 15, because 1 + 2 + 3 + 4 + 5 = 15.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers. return n * (n + 1) / 2"},{"question":"Create a function that converts a given string from snake_case to CamelCase. The function should handle strings with multiple words separated by underscores, ensuring the first letter of each word is capitalized and subsequently concatenated without any separators.","solution":"def snake_to_camel(snake_str): Converts a given string from snake_case to CamelCase. Args: snake_str (str): A string in snake_case format. Returns: str: The CamelCase formatted string. components = snake_str.split('_') return ''.join(x.capitalize() for x in components)"},{"question":"Create a function that takes two integers and an operator as a string ('+', '-', '*', '/') and returns the result of the arithmetic operation between the two integers.","solution":"def arithmetic_operation(a, b, operator): Perform arithmetic operation between two integers a and b based on the given operator. Arguments: a -- the first integer b -- the second integer operator -- a string which can be '+', '-', '*', '/' Returns: The result of the arithmetic operation. if operator == '+': return a + b elif operator == '-': return a - b elif operator == '*': return a * b elif operator == '/': if b == 0: raise ValueError(\\"Cannot divide by zero\\") return a / b else: raise ValueError(\\"Invalid operator!\\")"},{"question":"Create a function that takes as input a tuple of integers, and returns a tuple containing only the elements that are divisible by 3.","solution":"def filter_divisible_by_3(numbers): Returns a tuple containing only the elements of \`numbers\` that are divisible by 3. return tuple(num for num in numbers if num % 3 == 0)"},{"question":"Create a function that takes a list of integers and returns True if there is a pair of indices where the sum of the numbers at those indices is the integer 10, and False otherwise.","solution":"def has_pair_with_sum_10(lst): Returns True if there exist two different indices i and j such that lst[i] + lst[j] == 10. seen = set() for num in lst: if 10 - num in seen: return True seen.add(num) return False"},{"question":"Create a function that sorts an array of string in ascending order based on their length. If two strings have the same length, sort them alphabetically.","solution":"def sort_by_length_and_alphabetically(arr): Sorts an array of strings in ascending order based on their length. If two strings have the same length, sorts them alphabetically. Parameters: arr (list): A list of strings Returns: list: A list of strings sorted by length and alphabetically return sorted(arr, key=lambda x: (len(x), x))"},{"question":"Create a function that outputs the string 'I love programming!' when called.","solution":"def express_love_for_programming(): Returns the string 'I love programming!'. return \\"I love programming!\\""},{"question":"Create a function that takes a list of strings and returns a new list containing only the strings that have more than 5 characters.","solution":"def filter_long_strings(strings): Filters and returns a list of strings that have more than 5 characters. Args: strings (list of str): The input list of strings. Returns: list of str: The list of strings with more than 5 characters. return [string for string in strings if len(string) > 5]"},{"question":"Create a function that outputs a palindrome from the given string. The function should take a string as an argument and return the longest palindrome that can be constructed by reordering the characters in the string.","solution":"def longest_palindrome(s): Returns the longest palindrome that can be constructed by reordering the characters in the given string. from collections import Counter # Count frequency of each character char_count = Counter(s) # Characters to form the first half of the palindrome first_half = [] # Middle character of the palindrome (if any) middle_char = '' # Construct the first half of the palindrome and determine the middle character (if any) for char, count in char_count.items(): # If the count is odd, set one of them as the middle character (if not already set to another character) if count % 2 == 1: if not middle_char: middle_char = char # Add half the count to the first half of the palindrome first_half.append(char * (count // 2)) # Join the first half and its reverse to create the full palindrome, with the middle character as appropriate first_half_str = \\"\\".join(first_half) palindrome = first_half_str + middle_char + first_half_str[::-1] return palindrome"},{"question":"Create a function that accepts two integer arguments, adds them, and returns the result. If either of the integers is not an integer, raise a TypeError with a message indicating that both arguments must be integers.","solution":"def add(a, b): Returns the sum of a and b. If either of the arguments is not an integer, a TypeError is raised with a message indicating that both arguments must be integers. if not isinstance(a, int) or not isinstance(b, int): raise TypeError(\\"Both arguments must be integers\\") return a + b"},{"question":"Create a function that takes a string and a character, and returns the number of times the character appears in the string. If the character is not found, return -1.","solution":"def count_char_in_string(s, char): Returns the number of times the character \`char\` appears in the string \`s\`. If the character is not found, returns -1. Parameters: s (str): The string to search. char (str): The character to count in the string \`s\`. Returns: int: The count of \`char\` in \`s\` or -1 if \`char\` is not found in \`s\`. count = s.count(char) return count if count > 0 else -1"},{"question":"Create a function that returns the allergies a person has based on the score passed to it. The function should take one integer as a parameter and return a string that lists all the allergies.","solution":"def list_allergies(score): Returns a string listing the allergies a person has based on the score. allergens = [ (\\"Eggs\\", 1), (\\"Peanuts\\", 2), (\\"Shellfish\\", 4), (\\"Strawberries\\", 8), (\\"Tomatoes\\", 16), (\\"Chocolate\\", 32), (\\"Pollen\\", 64), (\\"Cats\\", 128) ] allergy_list = [name for name, value in allergens if score & value] return ', '.join(allergy_list)"},{"question":"Create a function that prints out the odd numbers between 1 and 100.","solution":"def print_odd_numbers(): Prints odd numbers from 1 to 100. for number in range(1, 101): if number % 2 != 0: print(number)"},{"question":"Create a function that takes a string of comma-separated numbers as input and returns the sum of those numbers as an integer. If the input string is empty, return 0.","solution":"def sum_of_numbers(comma_separated_numbers): Returns the sum of a string of comma-separated numbers. If the input string is empty, returns 0. if not comma_separated_numbers: return 0 numbers = map(int, comma_separated_numbers.split(',')) return sum(numbers)"},{"question":"Create a function that sums up the first \`n\` elements of a given list of integers.","solution":"def sum_first_n_elements(lst, n): Sums up the first \`n\` elements of a given list of integers. Parameters: lst (list): The list of integers. n (int): The number of elements to sum. Returns: int: The sum of the first \`n\` elements. if n > len(lst): raise ValueError(\\"n is greater than the length of the list\\") return sum(lst[:n])"},{"question":"Create a function that takes a list of strings and returns a single string using a for loop.","solution":"def concatenate_strings(string_list): Concatenates all strings in the list into a single string using a for loop. Parameters: string_list (list): A list of strings to be concatenated. Returns: str: A single concatenated string. result = \\"\\" for string in string_list: result += string return result"},{"question":"Create a function that checks if a given string is a valid hexadecimal string. A valid hexadecimal string consists of the characters from 0-9 and A-F (uppercase), with no spaces or special characters. Additionally, the string should not start with multiple 0's unless it is exactly \\"0\\".","solution":"def is_valid_hex(s): This function checks if the given string is a valid hexadecimal string. A valid hexadecimal string consists of the characters from 0-9 and A-F (uppercase), with no spaces or special characters and the string should not start with multiple 0's unless it is exactly \\"0\\". :param s: input string :return: True if the string is a valid hex, otherwise False if len(s) == 0: return False if s == \\"0\\": return True if s[0] == \\"0\\": return False for char in s: if char.isdigit() or ('A' <= char <= 'F'): continue else: return False return True"},{"question":"Create a function that detects if a binary tree is symmetrical. A binary tree is symmetrical if the left subtree is a mirror reflection of the right subtree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_symmetric(root): Determines if a binary tree is symmetrical. A binary tree is symmetrical if the left subtree is a mirror reflection of the right subtree. if not root: return True def is_mirror(left, right): if not left and not right: return True if not left or not right: return False return (left.val == right.val and is_mirror(left.left, right.right) and is_mirror(left.right, right.left)) return is_mirror(root.left, root.right)"},{"question":"Create a function that checks if a given string is a valid palindrome ignoring case and spaces. A palindrome reads the same backward as forward, e.g., \\"A man a plan a canal Panama\\" is a palindrome. The function should return \`True\` if the string is a palindrome and \`False\` otherwise.","solution":"def is_valid_palindrome(s): Checks if the given string s is a valid palindrome by ignoring spaces and case. Args: - s (str): Input string to check. Returns: - bool: True if s is a valid palindrome, False otherwise. # Normalize the string by removing spaces and converting to lowercase normalized_str = ''.join(c.lower() for c in s if c.isalnum()) # Check if the normalized string reads the same backward and forward return normalized_str == normalized_str[::-1]"},{"question":"Create a function that can sort three numbers without using any conditional statements (if, else, ternary, etc.). The function should return the numbers in ascending order.","solution":"def sort_three_numbers(a, b, c): Returns the three numbers in ascending order without using conditional statements. return tuple(sorted([a, b, c]))"},{"question":"Create a function that checks whether a given list of strings is lexical order. If it is, return True. If it isn't, return False. Lexicographical order is the order in which words are arranged in a dictionary, such as alphabetical order, but including all letters of the alphabet as well as punctuation. For example, in lexicographical order, \\"apple\\" comes before \\"banana\\", \\"zebra\\" comes before \\"heart\\", and \\"Try\\" comes before \\"apple\\" because 'T' comes before 'a'. You should be case-insensitive when comparing (i.e., \\"Apple\\" should be considered the same as \\"apple\\").","solution":"def is_lexicographical_order(strings): Checks if a given list of strings is in lexicographical order. Args: strings (list of str): A list of strings to check. Returns: bool: True if the list is in lexicographical order, False otherwise. strings_lower = [s.lower() for s in strings] return strings_lower == sorted(strings_lower)"},{"question":"Create a function that takes a string as an argument and returns the number of words in the string. A word is defined as a sequence of characters separated by spaces. Please ensure your answer is in Python.","solution":"def count_words(s): Returns the number of words in the input string. A word is defined as a sequence of characters separated by spaces. if not s.strip(): return 0 return len(s.split())"},{"question":"Create a function that determines if a string of parentheses is balanced. The function should return true if every opening parenthesis has a corresponding closing parenthesis in the correct order, and false otherwise.","solution":"def is_balanced(s): Determines if a string of parentheses is balanced. Parameters: s (str): The input string containing only parentheses. Returns: bool: True if the string is balanced, False otherwise. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return not stack"},{"question":"Create a function that takes a list of words and returns the length of the longest word in the list. If there are multiple words with the same longest length, return the length of any one of them.","solution":"def longest_word_length(words): This function takes a list of words and returns the length of the longest word in the list. if not words: return 0 return max(len(word) for word in words)"},{"question":"Create a function that takes a string as input and checks if the string is a palindrome when spaces are ignored and case is not significant.","solution":"def is_palindrome(s): Returns True if the input string is a palindrome when spaces are ignored and case is not significant, otherwise False. sanitized = ''.join(c.lower() for c in s if c.isalnum()) return sanitized == sanitized[::-1]"},{"question":"Create a function that takes an integer as input and returns a new integer that has all the odd digits from the original number, but in the reverse order. For example, if the input is 12345, the output should be 531. If the input is 2468, the output should be 0.","solution":"def reverse_odd_digits(num): Takes an integer as input and returns a new integer that has all the odd digits from the original number, but in the reverse order. Parameters: num (int): The input number. Returns: int: The new integer with odd digits in reverse order. odd_digits = [d for d in str(abs(num)) if int(d) % 2 != 0] if not odd_digits: return 0 return int(''.join(odd_digits[::-1]))"},{"question":"Create a function that calculates the factorial of a number in Python. The function should handle both positive and negative inputs, and raise an exception for invalid inputs.","solution":"def factorial(n): Returns the factorial of a number n. If n is negative or not an integer, it raises a ValueError. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n+1): result *= i return result"},{"question":"Create a function that takes an array of integers as an argument and returns the sum of all the integers in the array. Additionally, implement a unit test for this function to ensure its correctness.","solution":"def sum_array(arr): Returns the sum of all integers in the array. return sum(arr)"},{"question":"Create a function that returns all the prime numbers between 2 and a given number n.","solution":"def find_primes(n): Returns a list of all prime numbers between 2 and n (inclusive if n is prime). if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that takes an input string and returns the number of consonants in the string. The function should ignore case and consider only alphabetic characters.","solution":"def count_consonants(input_string): Returns the number of consonants in the input string. Ignores case and considers only alphabetic characters. consonants = \\"bcdfghjklmnpqrstvwxyz\\" input_string = input_string.lower() count = 0 for char in input_string: if char in consonants: count += 1 return count"},{"question":"Create a function that takes a string as input and returns the string in reverse order. Explain the code and the logic behind each step.","solution":"def reverse_string(s): Returns the input string in reverse order. Parameters: s (str): Input string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Create a function that converts a given string to a formatted title case using Python. Ensure that the function handles cases where the input string contains multiple words with varying cases (e.g., \\"aBc dEf gHi\\"). The function should capitalize the first letter of each word while keeping the rest of the letters in their original state.","solution":"def to_formatted_title_case(s): Converts a given string to formatted title case. Capitalizes the first letter of each word while keeping the rest of the letters as they are. :param s: Input string with multiple words. :return: Formatted title case string. words = s.split() title_case_words = [word[0].upper() + word[1:] if len(word) > 1 else word.upper() for word in words] return ' '.join(title_case_words)"},{"question":"Create a function that removes a list of elements from another list. The list of elements to be removed should contain only unique elements, but the original list can contain duplicates of the elements to be removed. The function should return the modified list with those elements removed. If an element from the list to be removed is not found in the original list, it should be skipped.","solution":"def remove_elements(original_list, elements_to_remove): Returns a list with elements removed from the original list. Args: original_list (list): The list to remove elements from. elements_to_remove (list): The list of elements to remove (unique elements only). Returns: list: The modified list with specified elements removed. return [item for item in original_list if item not in elements_to_remove]"},{"question":"Create a function that takes three integers: \`a\`, \`b\`, and \`c\`. The function should return the sum of the three integers. If any of the integers is less than 0, the function should only return the sum of the positive integers among the three.","solution":"def sum_of_integers(a, b, c): Returns the sum of the three integers a, b, and c. If any integer is less than 0, only the positive integers among the three are summed. sum = 0 if a > 0: sum += a if b > 0: sum += b if c > 0: sum += c return sum"},{"question":"Create a function that returns a random Ethernet MAC address. An Ethernet MAC address is formatted as follows: XX:XX:XX:XX:XX:XX, where each 'X' is a hexadecimal digit (0-9 and A-F).","solution":"import random def generate_mac_address(): Generates a random Ethernet MAC address. The format of a MAC address is XX:XX:XX:XX:XX:XX, where each X is a hexadecimal digit. return \\":\\".join(f\\"{random.randint(0, 255):02X}\\" for _ in range(6))"},{"question":"Create a function that takes a string as input and returns the length of the longest contiguous substring of the string that contains all unique characters. For example, if the input string is \\"abcabcbb\\", the output should be 3, since the longest substring with all unique characters is \\"abc\\".","solution":"def longest_unique_substring(s): Returns the length of the longest contiguous substring with all unique characters. Parameters: s (str): The input string Returns: int: The length of the longest substring with all unique characters n = len(s) if n == 0: return 0 max_length = 0 start = 0 char_index_map = {} for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Create a function that takes a slice of integers as an argument, and returns the integer that occurs most frequently in the slice. In the event of a tie, return the smallest integer.","solution":"def most_frequent_integer(numbers): Returns the integer that occurs most frequently in the list of integers. In case of a tie, the smallest integer is returned. from collections import Counter # Count the frequency of each number frequency = Counter(numbers) # Determine the number with the highest frequency, resolving ties by choosing the smallest number most_frequent = min(((-freq, num) for num, freq in frequency.items()))[1] return most_frequent"},{"question":"Create a function that calculates the sum of all divisors of a number. If the number is an integer, return its sum, otherwise return the sum of all integer divisors from the integer part to the floating point part of the number.","solution":"def sum_of_divisors(num): Calculates the sum of all divisors of an integer number. If the number is not an integer, it calculates the sum of all integer divisors from 1 to the integer part of the number. if not isinstance(num, int): num = int(num) divisors_sum = sum(div for div in range(1, num + 1) if num % div == 0) return divisors_sum"},{"question":"Create a function that generates a sequence of numbers based on the Collatz conjecture. The function should take an integer \`N\` as input and return a list of integers representing the Collatz sequence starting from \`N\`.","solution":"def collatz_sequence(N): Generates the Collatz sequence starting from N. Args: N (int): Starting integer for the Collatz sequence. Returns: List[int]: List of integers representing the Collatz sequence. sequence = [] while N > 1: sequence.append(N) if N % 2 == 0: N = N // 2 else: N = 3 * N + 1 sequence.append(1) # The sequence always ends with 1. return sequence"},{"question":"Create a function that takes in a string and returns the count of words in the string. A word can be defined as a sequence of characters separated by whitespace. Words can start or end with punctuation but aren't considered part of preceding/succeeding words.","solution":"def count_words(s): Returns the count of words in the string s. A word is defined as a sequence of characters separated by whitespace. if not isinstance(s, str): return 0 words = s.split() return len(words)"},{"question":"Create a function that takes in an integer \`n\` and a list of integers \`nums\` as input. The function should return a list of all possible subsets of \`nums\` with a sum that is less than or equal to \`n\`.","solution":"def subsets_with_sum_less_than_or_equal(n, nums): Generate all subsets of nums that have a sum less than or equal to n. :param n: Integer, maximum sum limit for the subsets. :param nums: List of integers :return: List of lists, where each list is a subset with sum less than or equal to n. result = [] def dfs(start, current, total): if total <= n: result.append(current[:]) for i in range(start, len(nums)): if total + nums[i] <= n: current.append(nums[i]) dfs(i + 1, current, total + nums[i]) current.pop() dfs(0, [], 0) return result"},{"question":"Create a function that will find the most common element in an array of elements. If there are multiple elements that appear the same maximum number of times, return all of them.","solution":"from collections import Counter from typing import List, Any, Union def most_common_elements(arr: List[Any]) -> Union[Any, List[Any]]: Returns the most common element(s) in the array. If there are multiple elements with the same maximum frequency, returns a list of those elements. if not arr: return [] count = Counter(arr) max_count = max(count.values()) most_common = [key for key, val in count.items() if val == max_count] # If only one most common element, return it directly if len(most_common) == 1: return most_common[0] return most_common"},{"question":"Create a function that takes an integer and returns the factorial of that integer using recursion. To ensure the accuracy of your function, include a check function with provided data points to verify that the function works as intended. Additionally, add comments explaining each part of the function.","solution":"def factorial(n): Returns the factorial of a given integer n using recursion. # Base case: if n is 0 or 1, return 1 if n == 0 or n == 1: return 1 # Recursive case: n * factorial of (n-1) return n * factorial(n - 1) def check_factorial(): Check the accuracy of the factorial function with data points. test_data = { 0: 1, 1: 1, 2: 2, 3: 6, 4: 24, 5: 120, 6: 720, 7: 5040, 8: 40320, 9: 362880, 10: 3628800 } for input_val, expected_output in test_data.items(): assert factorial(input_val) == expected_output, f\\"Test failed for input {input_val}\\" # Run check function to verify the factorial function check_factorial()"},{"question":"Create a function that takes an integer as an input and checks if it's a prime number. A prime number is a number that is greater than 1 and has no positive divisors other than 1 and itself. Your function should return \`true\` if the number is prime and \`false\` otherwise.","solution":"def is_prime(n): Checks if a number is a prime number. Parameters: n (int): The number to check. Returns: bool: True if the number is prime, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that takes two positive integers as inputs and returns their greatest common divisor (GCD). The function should be efficient and use the Euclidean algorithm for computation.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two positive integers a and b using the Euclidean algorithm. while b: a, b = b, a % b return a"},{"question":"Create a function that accepts an array of integers as a parameter and returns the largest integer in the array. Sort the array in ascending order using the bubble sort algorithm, then find the largest number in the array.","solution":"def bubble_sort(arr): Sorts an array in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def find_largest_integer(arr): Returns the largest integer in the array by first sorting it using bubble sort. if not arr: return None sorted_arr = bubble_sort(arr) return sorted_arr[-1]"},{"question":"Create a function that accepts an array of time strings in the format \\"HH:MM\\" and returns a new array with each time string converted to the 24-hour format. If a time string is invalid, it should be replaced with \\"Invalid\\".","solution":"def convert_to_24_hour_format(times): Converts an array of time strings in the format \\"HH:MM\\" to the 24-hour format. If a time string is invalid, it replaces it with \\"Invalid\\". Args: times (list): List of time strings in the format \\"HH:MM\\". Returns: list: New list with converted time strings or \\"Invalid\\" for invalid inputs. def is_valid_time(time_str): Check if the input string is a valid HH:MM time format. if len(time_str) != 5 or time_str[2] != ':': return False try: hours, minutes = map(int, time_str.split(':')) return 0 <= hours < 24 and 0 <= minutes < 60 except: return False return [time if is_valid_time(time) else \\"Invalid\\" for time in times]"},{"question":"Create a function that will return the frequency of each character in a given string. The result should be a dictionary where the keys are characters and the values are their corresponding frequencies.","solution":"def char_frequency(s): Returns a dictionary with the frequency of each character in the string s. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function that returns the maximum letter found in a string, which represents the highest character based on ASCII value. In cases where the string contains only one character, return that character. If the string is empty, return None. The function should be case-sensitive and process all printable ASCII characters.","solution":"def max_letter(s): Returns the maximum character based on ASCII value in the string \`s\`. If the string is empty, returns None. If the string contains only one character, returns that character. if not s: return None return max(s)"},{"question":"Create a function that checks if a given string is a palindrome by ignoring case and non-alphanumeric characters. A palindrome is a string that reads the same forward and backward, ignoring spaces, punctuation, and capitalization. For example, \\"A man, a plan, a canal, Panama\\" is a palindrome.","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome by ignoring case and non-alphanumeric characters. # Remove all non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that takes an integer n and returns the sum of all numbers from 1 to n. This function should be efficient and handle large values of n.","solution":"def sum_to_n(n): Returns the sum of all numbers from 1 to n using the arithmetic series sum formula. if n < 1: return 0 return n * (n + 1) / 2"},{"question":"Create a function that receives two integers, a and b, and prints all the numbers between them (inclusive), only if they are multiples of 3.","solution":"def print_multiples_of_three(a, b): Prints all the numbers between a and b (inclusive) that are multiples of 3. for num in range(min(a, b), max(a, b) + 1): if num % 3 == 0: print(num)"},{"question":"Create a function that takes a string as an input and returns a dictionary that contains the frequency of each character in the string. Make sure the dictionary keys are sorted in alphabetical order.","solution":"def char_frequency(s): Returns a dictionary with the frequency of each character in the string s. The dictionary keys are sorted in alphabetical order. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return dict(sorted(frequency.items()))"},{"question":"Create a function that takes a string as an argument and returns the number of vowels in the string. Note that vowels are the characters 'a', 'e', 'i', 'o', and 'u'. Your function should also count 'y' as a vowel when it is at the end of the word.","solution":"def count_vowels(s): Returns the number of vowels in the string s. The vowels considered are 'a', 'e', 'i', 'o', 'u'. Additionally, 'y' is counted as a vowel when it is at the end of the word. vowels = 'aeiou' vowel_count = 0 for idx, char in enumerate(s.lower()): if char in vowels: vowel_count += 1 elif char == 'y' and (idx == len(s) - 1 or not s[idx+1].isalpha()): vowel_count += 1 return vowel_count"},{"question":"Create a function that generates a Fibonacci sequence up to a given limit.","solution":"def generate_fibonacci(limit): Generates a Fibonacci sequence up to a given limit. Args: limit (int): The upper limit for the values in the Fibonacci sequence. Returns: list: A list containing the Fibonacci sequence up to the given limit. if limit < 0: return [] fibonacci_seq = [0, 1] while fibonacci_seq[-1] + fibonacci_seq[-2] <= limit: fibonacci_seq.append(fibonacci_seq[-1] + fibonacci_seq[-2]) return fibonacci_seq[:-1] if limit < 1 else fibonacci_seq"},{"question":"Create a function that takes an array of integers as input and returns a new array where each element is the sum of its original value and 10. Additionally, ensure that the function handles exceptions for non-integer inputs gracefully.","solution":"def add_ten(arr): Takes an array of integers and returns a new array where each element is the sum of its original value and 10. Handles non-integer inputs gracefully by ignoring them in the result. result = [] for item in arr: try: result.append(item + 10) except TypeError: continue # Ignore non-integer inputs return result"},{"question":"Create a function that takes an array of integers and returns their sum. Additionally, ensure the sum is returned as a string.","solution":"def sum_array_as_string(arr): Returns the sum of an array of integers as a string. Parameters: arr (list): A list of integers Returns: str: The sum of the integers in the list as a string total_sum = sum(arr) return str(total_sum)"},{"question":"Create a function that generates all subsets of a given set of numbers using a recursive approach. The function should return a list of lists, where each inner list represents a unique subset of the input set.","solution":"def generate_subsets(nums): def backtrack(start, path): subsets.append(path) for i in range(start, len(nums)): backtrack(i + 1, path + [nums[i]]) subsets = [] backtrack(0, []) return subsets"},{"question":"Create a function that generates the powers of an integer ( n ) up to ( k ) using recursion. The function should return a list of the results.","solution":"def generate_powers(n, k): Generates the powers of an integer n up to k using recursion. Parameters: n (int): The base number. k (int): The highest power. Returns: list: A list containing the powers of n from 0 to k. def helper(n, current, k): if current > k: return [] return [n ** current] + helper(n, current + 1, k) return helper(n, 0, k)"},{"question":"Create a function that can detect if one string contains the other using recursion. The function should return true if the first string contains the second string as a substring, and false otherwise.","solution":"def is_substring_recursive(s1, s2, i=0): Checks if s1 contains s2 as a substring using recursion. # If s2 is empty, it is always a substring if not s2: return True # If s1 is empty but s2 is not, s2 can't be a substring if not s1: return False # If the substring s2 matches the starting characters of s1, check the rest of s1 and s2 if s1[:len(s2)] == s2: return True # Recursively check the remainder of s1 return is_substring_recursive(s1[1:], s2)"},{"question":"Create a function that takes a list of integers and returns a new list where each element is the sum of the digits of the corresponding integer in the input list. For example, if the input list is [123, 456, 789], the function should return [6, 15, 24] because 1+2+3=6, 4+5+6=15, and 7+8+9=24.","solution":"def sum_of_digits(numbers): Takes a list of integers and returns a new list where each element is the sum of the digits of the corresponding integer in the input list. :param numbers: List of integers :return: List of integers where each integer is the sum of the digits of the corresponding integer in the input list def digit_sum(n): return sum(int(digit) for digit in str(n)) return [digit_sum(number) for number in numbers]"},{"question":"Create a function that takes as a parameter a number from 1 to 100 and returns the number as text. For example, the number 5 should return 'Five', the number 15 should return 'Fifteen', and so on. If the number is outside the range of 1 to 100, the function should return 'Invalid number'.","solution":"def number_to_text(n): Converts a number from 1 to 100 to its English text representation. if n < 1 or n > 100: return \\"Invalid number\\" units = [\\"\\", \\"One\\", \\"Two\\", \\"Three\\", \\"Four\\", \\"Five\\", \\"Six\\", \\"Seven\\", \\"Eight\\", \\"Nine\\"] teens = [\\"Ten\\", \\"Eleven\\", \\"Twelve\\", \\"Thirteen\\", \\"Fourteen\\", \\"Fifteen\\", \\"Sixteen\\", \\"Seventeen\\", \\"Eighteen\\", \\"Nineteen\\"] tens = [\\"\\", \\"\\", \\"Twenty\\", \\"Thirty\\", \\"Forty\\", \\"Fifty\\", \\"Sixty\\", \\"Seventy\\", \\"Eighty\\", \\"Ninety\\"] if n <= 9: return units[n] elif n <= 19: return teens[n - 10] elif n <= 99: return tens[n // 10] + (\\"-\\" + units[n % 10] if n % 10 != 0 else \\"\\") else: return \\"One Hundred\\""},{"question":"Create a function that calculates the factorial of a number. The function should handle both positive integers and negative numbers, and throw an appropriate exception if the input is not an integer or if a negative number is provided.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Raises a ValueError for negative numbers or non-integer inputs. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes \`id\`, \`name\`, and \`email\` as input parameters and prints out these details in a nicely formatted string.","solution":"def print_user_details(user_id, name, email): Prints out the user details in a nicely formatted string. print(f\\"ID: {user_id}nName: {name}nEmail: {email}\\")"},{"question":"Create a function that accepts a string as input and returns the number of unique characters in the string, ignoring case sensitivity. For example, the input \\"HelloWorld\\" should return 7 as letters are case-insensitive.","solution":"def unique_characters_count(input_string): Returns the number of unique characters in the string, ignoring case sensitivity. return len(set(input_string.lower()))"},{"question":"Create a function that takes a string \`s\` and an integer \`n\` as input. The function should return a new string consisting of the first \`n\` characters of \`s\` repeated \`n\` times.","solution":"def repeat_n_characters(s, n): Returns a new string consisting of the first \`n\` characters of \`s\` repeated \`n\` times. Parameters: s (str): The input string. n (int): The number of characters to take and the number of times to repeat. Returns: str: The resultant string. if n > len(s): raise ValueError(\\"n is larger than the length of the input string\\") first_n_chars = s[:n] return first_n_chars * n"},{"question":"Create a function that accepts a number and returns the truthy value of the number.","solution":"def truthy_value(num): Returns the truthy value of the number. return bool(num)"},{"question":"Create a function that converts a list of integers into a list of booleans, where each boolean indicates whether the corresponding integer is even. How would you implement this in Python?","solution":"def convert_to_even_bools(int_list): Takes a list of integers and converts it into a list of booleans. Each boolean indicates whether the corresponding integer is even. Parameters: int_list (list of int): The list of integers to convert. Returns: list of bool: A list of booleans where True means the integer is even and False means odd. return [num % 2 == 0 for num in int_list]"},{"question":"Create a function that inserts commas after every third digit from the right in a given number. For example, for the input 123456789, the output should be \\"123,456,789\\". If the number has less than 4 digits, it returns the number as is. How can we achieve this using Python functions?","solution":"def insert_commas(number): Inserts commas after every third digit from the right in a given number. Args: number (int): The input number. Returns: str: The number in string format with commas inserted. return \\"{:,}\\".format(number)"},{"question":"Create a function that finds the maximum sum of any two numbers in a list of integers. The function should handle cases where the list is empty or contains only one element.","solution":"def max_sum_of_two_numbers(nums): Returns the maximum sum of any two numbers in a list of integers. If the list is empty or contains only one element, returns None. if len(nums) < 2: return None nums.sort(reverse=True) return nums[0] + nums[1]"},{"question":"Create a function that returns the index of the current element in the list with the highest value. If there are multiple elements with the same highest value, return the index of the first occurrence.","solution":"def highest_index(lst): Returns the index of the first occurrence of the highest value in the list. :param lst: List of numbers :return: Index of the first occurrence of the highest value if not lst: raise ValueError(\\"List must not be empty\\") highest_value = max(lst) return lst.index(highest_value)"},{"question":"Create a function that accepts a string as input and returns the reverse of the characters in the string, excluding any non-alphabetic characters. For example, given the string 'Hello, World!123', the function should return 'dlroW olleH'.","solution":"def reverse_alpha_string(s): Returns the reverse of the alphabetic characters in the string s, excluding any non-alphabetic characters. # Filter out non-alphabetic characters alpha_chars = [char for char in s if char.isalpha()] # Join the list into a string and reverse it reversed_alpha_string = \\"\\".join(alpha_chars)[::-1] return reversed_alpha_string"},{"question":"Create a function that takes in an integer n and returns the nth Fibonacci number. The function should use memoization to optimize the recursive calculation. Memoization is a technique where you store the results of expensive function calls and return the cached result when the same inputs occur again.","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 else: memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Create a function that calculates the sum of all elements in a given list that are within a specified range. The list, lower bound, and upper bound of the range will be passed to the function. The function should iterate through the list, check if a list element falls within the range, and if so, add it to the sum. At the end, the function should return the total sum. If no elements fall within the range, the function should return 0.","solution":"def sum_within_range(lst, lower, upper): Calculate the sum of all elements in the list that are within the specified range [lower, upper]. :param lst: List of numbers :param lower: Lower bound of the range :param upper: Upper bound of the range :return: Sum of elements within the range total_sum = 0 for num in lst: if lower <= num <= upper: total_sum += num return total_sum"},{"question":"Create a function that takes in two arrays of integers, arr1 and arr2, and returns their intersection, meaning the elements that are present in both arrays. The function should efficiently handle large datasets and ensure the result contains no duplicates.","solution":"def intersection(arr1, arr2): Returns the intersection of two arrays, consisting of elements that are present in both arrays. The result contains no duplicates. set1 = set(arr1) set2 = set(arr2) return list(set1 & set2)"},{"question":"Create a function that takes a list of integers and returns a new list containing only the elements at even indices. The function should also calculate and return the sum of the elements at the odd indices.","solution":"def even_indices_and_odd_sum(lst): Returns a new list containing only the elements at even indices and the sum of the elements at the odd indices. Args: lst (list): A list of integers. Returns: tuple: A tuple containing a list of elements at even indices and the sum of elements at odd indices. even_elements = [lst[i] for i in range(0, len(lst), 2)] odd_sum = sum(lst[i] for i in range(1, len(lst), 2)) return even_elements, odd_sum"},{"question":"Create a function that converts a string into a hexadecimal representation.","solution":"def string_to_hex(s): Converts a given string to its hexadecimal representation. Parameters: s (str): Input string Returns: str: String representing the hexadecimal values of the input string return ''.join(format(ord(char), '02x') for char in s)"},{"question":"Create a function that finds the length of the longest palindromic substring in a given string. A substring is a contiguous sequence of characters within a string.","solution":"def longest_palindromic_substring(s): Returns the length of the longest palindromic substring in the given string. if not s: return 0 n = len(s) longest = 1 start = 0 dp = [[False]*n for _ in range(n)] for i in range(n): dp[i][i] = True for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i longest = 2 for length in range(3, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = True start = i longest = length return longest"},{"question":"Create a function that identifies and returns the Nth Fibonacci number using an iterative approach in Python. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def nth_fibonacci(n): if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that takes in a list of dictionaries, where each dictionary represents a person's information. Each dictionary contains keys 'name' and 'age'. The function should return a list of names where the age of the person is greater than 30.","solution":"def filter_names_by_age(people): Returns a list of names where the age of the person is greater than 30. :param people: List of dictionaries, where each dictionary contains 'name' and 'age' keys :return: List of names where 'age' > 30 return [person['name'] for person in people if person['age'] > 30]"},{"question":"Create a function that takes an integer and returns a string with the integer as a binary number in reverse order.","solution":"def reverse_binary(n): Converts an integer to its binary representation, then reverses this binary string and returns it. # Convert to binary and remove the '0b' prefix binary = bin(n)[2:] # Reverse the binary string reversed_binary = binary[::-1] return reversed_binary"},{"question":"Create a function that identifies the nth Fibonacci number in Python.","solution":"def fibonacci(n): Returns the nth Fibonacci number. The sequence starts with fibonacci(0) = 0, fibonacci(1) = 1. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that calculates the sum of the digits in an integer and returns it. If the integer is negative, the function should convert it to a positive integer first.","solution":"def sum_of_digits(n): Returns the sum of the digits of the integer n. If n is negative, it treats the integer as positive. n = abs(n) return sum(int(digit) for digit in str(n))"},{"question":"Create a function that takes a list of strings, counts the occurrences of each unique string, and returns a dictionary with the strings as keys and their counts as values.","solution":"def count_string_occurrences(strings): Takes a list of strings and returns a dictionary with the strings as keys and their counts as values. :param strings: List of strings :return: Dictionary with string counts counts = {} for string in strings: if string in counts: counts[string] += 1 else: counts[string] = 1 return counts"},{"question":"Create a function that takes a 2D list of integers \`lst\` and an integer \`k\`. The function should return a new list containing the \`k\`th column of each sub-list in \`lst\`.","solution":"def get_kth_column(lst, k): Returns the k-th column from each sub-list in the 2D list \`lst\`. Parameters: lst (list of list of int): The 2D list from which to extract the column. k (int): The index of the column to extract. Returns: list of int: The k-th column from each sub-list in \`lst\`. if not lst or k < 0: return [] return [row[k] for row in lst if len(row) > k]"},{"question":"Create a function that takes a list of numbers as input and returns the maximum sum of a contiguous subarray. This function should be efficient, preferably using Kadane's algorithm, which has a time complexity of O(n).","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray using Kadane's algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes three integers, a, b, and c, as input parameters. The function should return the number of unique integers that can be formed by taking any two of the three numbers (a, b, and c) and adding them together.","solution":"def unique_sums(a, b, c): Returns the number of unique sums that can be formed by adding any two of the three integers a, b, and c. sums = {a + b, b + c, a + c} return len(sums)"},{"question":"Create a function that returns the middle element of an array in Python.","solution":"def middle_element(arr): Returns the middle element of the array. If the array has an even number of elements, return the element just left of center. n = len(arr) if n == 0: return None # Assuming None to signify empty array which has no middle element. mid_index = (n - 1) // 2 return arr[mid_index]"},{"question":"Create a function that takes 3 parameters and prints to the console the type of each parameter. Then call that function and pass it with 3 different types of data.","solution":"def print_types(a, b, c): Prints the type of each parameter. print(type(a)) print(type(b)) print(type(c)) # Example call with different types of data print_types(42, \\"hello\\", 3.14)"},{"question":"Create a function that accepts a list of integers and amends the list by appending each unique integer to the end of the list. The function should ensure that the original order of the unique integers appears in the final list, while maintaining the relative order of the integers within each group. Your solution should handle large lists efficiently.","solution":"def append_unique_integers(lst): Given a list of integers, appends each unique integer to the end of the list while preserving the original order. :param lst: List of integers :return: Modified list with each unique integer appended at the end seen = set() uniques = [] for num in lst: if num not in seen: seen.add(num) uniques.append(num) lst.extend(uniques) return lst"},{"question":"Create a function that accepts an array of numbers and returns a new array with all negative numbers removed.","solution":"def remove_negatives(arr): Returns a new list with all negative numbers removed from the input list. Parameters: arr (list): A list of numbers (integers or floats). Returns: list: A new list with all negative numbers removed. return [x for x in arr if x >= 0]"},{"question":"Create a function that takes a string as an argument and returns true if the string is a valid IP address and false otherwise. An IP address consists of four numbers separated by dots, each number ranging from 0 to 255.","solution":"def is_valid_ip(ip): Returns True if the string is a valid IP address, False otherwise. An IP address consists of four numbers separated by dots, each number ranging from 0 to 255. parts = ip.split(\\".\\") if len(parts) != 4: return False for part in parts: if not part.isdigit() or not 0 <= int(part) <= 255: return False return True"},{"question":"Create a function that takes manipulate a given string in such a way that all the alphabetic characters (both uppercase and lowercase) are shifted forward by 2 in the alphabet, and non-alphabetic characters remain unchanged. For example, 'z' would become 'b', 'Z' would become 'B', and '1' would remain '1'.","solution":"def shift_string(s): Shifts all alphabetic characters in the string 's' forward by 2 in the alphabet. Non-alphabetic characters remain unchanged. shifted_s = [] for char in s: if 'a' <= char <= 'z': shifted_s.append(chr((ord(char) - ord('a') + 2) % 26 + ord('a'))) elif 'A' <= char <= 'Z': shifted_s.append(chr((ord(char) - ord('A') + 2) % 26 + ord('A'))) else: shifted_s.append(char) return ''.join(shifted_s)"},{"question":"Create a function that , given a sorted array of integers, returns a new array containing only the even numbers from the original array, sorted in ascending order.","solution":"def filter_even_numbers(arr): Returns a new array containing only the even numbers from the original sorted array. return [num for num in arr if num % 2 == 0]"},{"question":"Create a function that takes an integer as input and returns a list of its prime factors. If the input number is not prime, return a list containing the input number itself.","solution":"def prime_factors(n): Returns a list of prime factors of the given integer n. If the input number is prime, returns a list containing the input number itself. if n < 2: return [n] factors = [] divisor = 2 while n >= 2: if n % divisor == 0: factors.append(divisor) n //= divisor else: divisor += 1 return factors"},{"question":"Create a function that can convert a CSV file to a dictionary using Python. Each row in the CSV file should be a key in the dictionary, and the values should be the list of items in that row (except the first item, which is the key).","solution":"import csv def csv_to_dict(file_path): Converts a CSV file to a dictionary. The key for each row is the first item of the row, and the rest of the items become the values associated with that key. :param file_path: Path to the CSV file. :return: Dictionary with the first column as keys and the rest of the row as values. result_dict = {} with open(file_path, mode='r', newline='') as csv_file: reader = csv.reader(csv_file) for row in reader: key = row[0] values = row[1:] result_dict[key] = values return result_dict"},{"question":"Create a function that checks if a given substring exists within a string, and if it does, return the true. If not, return false.","solution":"def substring_exists(main_string, sub_string): Checks if the sub_string exists within the main_string. Parameters: main_string (str): The string to be searched. sub_string (str): The substring to search for. Returns: bool: True if the substring is found, False otherwise. return sub_string in main_string"},{"question":"Create a function that takes a list of integers and a target integer as input and returns the indices of the two numbers such that they add up to the target. The function should return the indices in reverse order (i.e., the index of the second number followed by the index of the first number). If no two numbers add up to the target, the function should return an empty list. The function should also handle cases where the list contains duplicate values.","solution":"def two_sum_reversed_indices(nums, target): Returns the indices of the two numbers in nums such that they add up to the target. The indices are returned in reverse order. If no two numbers add up to the target, returns an empty list. index_map = {} for i, num in enumerate(nums): complement = target - num if complement in index_map: return [i, index_map[complement]] index_map[num] = i return []"},{"question":"Create a function that takes an integer, say num, and returns a tuple containing the sum of all even digits and the product of all odd digits in the number.","solution":"def sum_and_product(num): This function takes an integer and returns a tuple containing: - the sum of all even digits in the number - the product of all odd digits in the number If there are no even digits, the sum is 0. If there are no odd digits, the product is considered as 1 as multiplying with 1 doesn't affect the product. num_str = str(abs(num)) sum_even = 0 product_odd = 1 has_odd = False for digit in num_str: digit = int(digit) if digit % 2 == 0: sum_even += digit else: product_odd *= digit has_odd = True if not has_odd: product_odd = 1 return sum_even, product_odd"},{"question":"Create a function that takes an array of integers and a target integer. The function should return the indices of the two numbers such that they add up to the target. If there are no two numbers that add up to the target, the function should return [-1, -1].","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target. Parameters: nums (list of int): List of integers. target (int): Target integer. Returns: list: Indices of the two numbers, or [-1, -1] if no such numbers exist. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return [-1, -1]"},{"question":"Create a function that generates a Fibonacci sequence up to a given number n. The function should return a list of the Fibonacci sequence up to but not including the number n. For example, if n is 10, the function should return [0, 1, 1, 2, 3, 5, 8].","solution":"def fibonacci_up_to_n(n): Generates a Fibonacci sequence up to a given number n. Parameters: n (int): The threshold number (upper limit, exclusive) for the Fibonacci sequence. Returns: list: A list of the Fibonacci sequence up to but not including the number n. if n <= 0: return [] sequence = [0, 1] while True: next_value = sequence[-1] + sequence[-2] if next_value >= n: break sequence.append(next_value) return sequence if n > 1 else [0]"},{"question":"Create a function that takes an integer as an input and determines whether it is a prime number or not. If the input number is not a prime number, return the smallest prime number that is greater than the input number. If the input number is a prime number, return \\"PrimeNumber\\".","solution":"def is_prime(n): Checks if a number n is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def next_prime(n): Returns the smallest prime number greater than n. candidate = n + 1 while not is_prime(candidate): candidate += 1 return candidate def prime_or_next_prime(n): Returns \\"PrimeNumber\\" if n is prime. Otherwise, returns the smallest prime number greater than n. if is_prime(n): return \\"PrimeNumber\\" else: return next_prime(n)"},{"question":"Create a function that takes in a number n and returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Implement this function using recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function that takes a list of integers as an input and returns a new list where each element is replaced by its square root. If the original element is an even number, divide its square root by 2. If the original element is not an even number, multiply its square root by 3.","solution":"import math def transform_list(nums): Transforms a given list of integers. For each element: - Calculate its square root - If the element is even, divide the square root by 2 - If the element is odd, multiply the square root by 3 Returns a new list with the transformed values. result = [] for num in nums: sqrt_value = math.sqrt(num) if num % 2 == 0: result.append(sqrt_value / 2) else: result.append(sqrt_value * 3) return result"},{"question":"Create a function that takes in one parameter: the input array. The function outputs a new array where the first element is the number of odd numbers and the second element is the sum of all even numbers in the input array.","solution":"def process_array(arr): Takes an array and returns a new array where the first element is the count of odd numbers and the second element is the sum of all even numbers in the input array. odd_count = 0 even_sum = 0 for num in arr: if num % 2 == 0: even_sum += num else: odd_count += 1 return [odd_count, even_sum]"},{"question":"Create a function that takes in a list of integers, finds the two smallest numbers, and returns their sum. Remember to handle edge cases such as an empty input or input with less than two numbers.","solution":"def sum_of_two_smallest(numbers): Returns the sum of the two smallest numbers in the list. Parameters: numbers (list): List of integers. Returns: int: Sum of the two smallest numbers. Raises: ValueError: If the list has less than two numbers. if len(numbers) < 2: raise ValueError(\\"List must contain at least two numbers.\\") sorted_numbers = sorted(numbers) return sorted_numbers[0] + sorted_numbers[1]"},{"question":"Create a function that takes a string as an argument and removes all digits from it using Python.","solution":"def remove_digits(s): Removes all digits from the given string s. Parameters: s (str): The input string. Returns: str: A new string with all digits removed. return ''.join(filter(lambda x: not x.isdigit(), s))"},{"question":"Create a function that , when given a number of Fibonacci numbers, generates the sequence up to that number. The output should be an array of Fibonacci numbers. For instance, if the input is 5, the output should be [1, 1, 2, 3, 5].","solution":"def fibonacci_sequence(n): Generates a sequence of Fibonacci numbers up to the nth number. :param n: The number of Fibonacci numbers to generate. :return: A list containing the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [1] fib_sequence = [1, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Create a function that takes a string and returns the first four digits found in the string.","solution":"def first_four_digits(string): Returns the first four digits found in the string. digits = [char for char in string if char.isdigit()] return ''.join(digits[:4])"},{"question":"Create a function that calculates the factorial of a given number. However, the function should handle large numbers gracefully, up to 9999999. Include proper error handling for non-numeric inputs and negative numbers.","solution":"import math def factorial(n): Returns the factorial of a given number n. - For non-integer inputs, it raises a TypeError. - For negative inputs, it raises a ValueError. - For n larger than 9999999, it raises an OverflowError. if not isinstance(n, int): raise TypeError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n > 9999999: raise OverflowError(\\"Input is too large. Maximum allowed is 9999999.\\") return math.factorial(n)"},{"question":"Create a function that takes two arguments, a beginning number and an end number (both inclusive), and returns a list of even numbers between these two numbers.","solution":"def even_numbers_between(start, end): Returns a list of even numbers between start and end (inclusive). return [num for num in range(start, end+1) if num % 2 == 0]"},{"question":"Create a function that takes an integer number as a parameter and converts it into a string. Then, reverse the string and return the reversed string.","solution":"def int_to_reversed_string(n): Converts an integer n into a string, reverses it, and returns the reversed string. # Convert the integer to a string str_n = str(n) # Reverse the string reversed_str_n = str_n[::-1] return reversed_str_n"},{"question":"Create a function that takes an array and a positive integer k as input and returns a new array containing the last k elements of the input array. If k is negative or greater than the length of the input array, return an empty array.","solution":"def last_k_elements(arr, k): Returns the last k elements of the input array. If k is negative or greater than the length of the input array, returns an empty array. Parameters: arr (list): The input array. k (int): The number of elements to return from the end of the array. Returns: list: A list containing the last k elements of the input array or an empty list. if k < 1 or k > len(arr): return [] return arr[-k:]"},{"question":"Create a function that calculates the median of a list of numbers in Python. The function should return the median value. If the list contains an odd number of elements, the median is the middle number. If the list contains an even number of elements, the median is the average of the two middle numbers.","solution":"def median(numbers): Returns the median of a list of numbers. :param numbers: List of numbers :type numbers: List[int or float] :return: The median value :rtype: float sorted_numbers = sorted(numbers) n = len(sorted_numbers) mid = n // 2 if n % 2 == 0: # If even, median is the average of the two middle elements return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2.0 else: # If odd, median is the middle element return sorted_numbers[mid]"},{"question":"Create a function that takes an integer as an input and outputs its reverse. For example, if the input is \`1234\`, the reversed output should be \`4321\`. How would you write a Python function to achieve this?","solution":"def reverse_integer(n): Returns the reverse of the input integer n. reversed_str = str(n)[::-1] if n < 0: return -int(reversed_str[:-1]) return int(reversed_str)"},{"question":"Create a function that takes in a list of integers and returns the sum of all the positive integers in the list. If there are no positive integers, the function should return 0. For example, given the list \`[3, -7, 2, -1, 4]\`, the function should return \`9\`.","solution":"def sum_of_positives(numbers): Returns the sum of all positive integers in the list. If there are no positive integers, returns 0. return sum(num for num in numbers if num > 0)"},{"question":"Create a function that takes a file path as input and prints out the content of the file line by line.","solution":"def print_file_content(file_path): Reads a file from the given file path and prints its content line by line. try: with open(file_path, 'r') as file: for line in file: print(line, end='') except FileNotFoundError: print(f\\"The file at {file_path} does not exist.\\") except IOError: print(f\\"An error occurred while reading the file at {file_path}.\\")"},{"question":"Create a function that takes a string as input and returns a list of all possible substrings of the input string. The function should return the substrings in reverse order of their length, starting with the longest substring and ending with the shortest substring.","solution":"def substrings_in_reverse_order(input_string): Returns a list of all possible substrings of the input string, ordered by length in reverse. substrings = [] length = len(input_string) for i in range(length): for j in range(i + 1, length + 1): substrings.append(input_string[i:j]) substrings.sort(key=len, reverse=True) return substrings"},{"question":"Create a function that takes a string as input and returns a dictionary containing the frequency of each character in the string, excluding spaces.","solution":"def char_frequency(s): Returns a dictionary containing the frequency of each character in the input string, excluding spaces. frequency = {} for char in s: if char != ' ': if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function that takes a string \`input_string\` as an argument and returns the number of distinct characters in the string, disregarding the case sensitivity. For example, if the input string is \\"HelloWorld\\", the function should return 7 because there are seven distinct characters 'H', 'e', 'l', 'o', 'W', 'r', and 'd' (ignoring the case 'w' and 'l').","solution":"def count_distinct_characters(input_string): Returns the number of distinct characters in the input string, ignoring case sensitivity. Args: input_string (str): The string to compute distinct characters from. Returns: int: The number of distinct characters. return len(set(input_string.lower()))"},{"question":"Create a function that takes an integer return the absolute value of that integer. The function should handle negative numbers by converting them to their positive counterparts. Also, discuss how to handle edge cases and potential errors in the function.","solution":"def absolute_value(n): Returns the absolute value of an integer n. if n < 0: return -n return n # Handle edge cases and potential errors # Edge Case 1: What if the input is already a positive number? - Just return the number # Edge Case 2: What if the input is zero? - The absolute value of zero is zero # Edge Case 3: What if the input is the minimum possible integer value? - Return its positive counterpart # Since this function works with integers, we do not handle float, string, or any non-integer input."},{"question":"Create a function that returns the sum of the series 1/(1^2) + 1/(2^2) + 1/(3^2) +...+ 1/(n^2)","solution":"def series_sum(n): Returns the sum of the series 1/(1^2) + 1/(2^2) + 1/(3^2) + ... + 1/(n^2). Parameters: n (int): The number of terms in the series Returns: float: The sum of the series up to the n-th term if n <= 0: return 0 return sum(1 / (i ** 2) for i in range(1, n + 1))"},{"question":"Create a function that identifies whether a given integer is a power of two. The function should return true if the number is a power of two, and false otherwise.","solution":"def is_power_of_two(n): Determines if a given integer is a power of two. :param n: Integer to be checked. :return: True if n is a power of two, otherwise False. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Create a function that converts an integer to a Roman numeral. The function should handle the numbers from 1 to 3999. You can assume that the input number is always within the range provided. Additionally, your function should handle negative numbers by returning an empty string.","solution":"def int_to_roman(num): Converts an integer to a Roman numeral. Args: num (int): The integer number to convert. Returns: str: The Roman numeral representation of the number. if num <= 0: return \\"\\" val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \\"\\" i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syms[i] num -= val[i] i += 1 return roman_num"},{"question":"Create a function that takes a list of strings and a substring as input and returns a new list that contains only the strings from the original list that contain the given substring.","solution":"def filter_strings_by_substring(strings, substring): Returns a list of strings from the input list that contain the given substring. :param strings: List of strings to filter. :param substring: Substring to look for within the strings. :return: List of strings containing the substring. return [string for string in strings if substring in string]"},{"question":"Create a function that takes an integer as input and returns its binary representation as a string. If the binary representation is shorter than 8 bits, pad the binary string with leading zeros to make it 8 bits long.","solution":"def int_to_padded_binary(n): Converts an integer to its binary representation as a 8-bit padded string. return format(n, '08b')"},{"question":"Create a function that takes in a list of integers and returns a new list with the even numbers at the beginning, followed by the odd numbers in ascending order.","solution":"def sort_even_odd(arr): Given a list of integers, return a new list with the even numbers at the beginning, followed by the odd numbers in ascending order. evens = [x for x in arr if x % 2 == 0] odds = sorted([x for x in arr if x % 2 != 0]) return evens + odds"},{"question":"Create a function that takes an input string and returns the input string reversed. How would you approach this problem?","solution":"def reverse_string(s): Returns the input string reversed. return s[::-1]"},{"question":"Create a function that takes a single argument, a list of integers, and returns the median of the list. The median is the middle value when the list is sorted. If the list has an even number of elements, return the average of the two middle elements.","solution":"def find_median(lst): Returns the median of the list of integers. sorted_lst = sorted(lst) length = len(sorted_lst) if length % 2 == 1: # If the list has an odd number of elements return sorted_lst[length // 2] else: # If the list has an even number of elements mid1, mid2 = length // 2 - 1, length // 2 return (sorted_lst[mid1] + sorted_lst[mid2]) / 2"},{"question":"Create a function that takes in a 2D array and returns the maximum value from the array. If the array is empty or contains no integers, the function should return \`None\`.","solution":"def find_max_2d(arr): Returns the maximum value from a 2D array. If the array is empty or contains no integers, return None. if not arr or all(len(row) == 0 for row in arr): return None max_value = None for row in arr: for value in row: if isinstance(value, int): if max_value is None or value > max_value: max_value = value return max_value"},{"question":"Create a function that takes a string as a parameter and returns the length of the string after removing all non-alphabetic characters.","solution":"def length_of_alphabetic_characters(s): Returns the length of the string s after removing all non-alphabetic characters. cleaned_string = ''.join(c for c in s if c.isalpha()) return len(cleaned_string)"},{"question":"Create a function that takes two integers, a and b, as input. This function should return a new list containing the elements of both a and b sorted in descending order. Additionally, the function should handle cases where the input lists contain duplicate elements and remove them from the final list.","solution":"def merge_and_sort_lists(a, b): Merges two lists and sorts them in descending order, removing duplicates. Args: a (list): First input list of integers. b (list): Second input list of integers Returns: list: A new list containing the unique elements of a and b sorted in descending order. combined_list = list(set(a) | set(b)) # Merge and remove duplicates combined_list.sort(reverse=True) # Sort in descending order return combined_list"},{"question":"Create a function that takes a list of positive integers and returns the smallest integer that is not present in the list.","solution":"def smallest_missing_integer(nums): Returns the smallest positive integer that is not present in the list. nums_set = set(nums) i = 1 while i in nums_set: i += 1 return i"},{"question":"Create a function that takes an integer number as input and returns a string representation of the date in \\"YYYY-MM-DD\\" format, where the integer represents the number of days since January 1, 1970. The integer should be treated as a Unix timestamp.","solution":"import datetime def days_to_date(days): Converts a Unix timestamp (number of days since January 1, 1970) to a string representation of the date in \\"YYYY-MM-DD\\" format. :param days: int, the number of days since January 1, 1970. :return: string, date in \\"YYYY-MM-DD\\" format. base_date = datetime.date(1970, 1, 1) target_date = base_date + datetime.timedelta(days=days) return target_date.strftime(\\"%Y-%m-%d\\")"},{"question":"Create a function that generates a list of prime numbers within a given range. For example, generate_primes(10, 50) should return [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]. Ensure to validate the input to ensure it's positive integers and the start should not be greater than the end.","solution":"def generate_primes(start, end): Generates a list of prime numbers within a given range. Parameters: start (int): The starting number of the range. end (int): The ending number of the range. Returns: list: A list of prime numbers within the given range. if not (isinstance(start, int) and isinstance(end, int) and start >= 0 and end >= 0): raise ValueError(\\"Both start and end must be non-negative integers.\\") if start > end: raise ValueError(\\"Start should not be greater than end.\\") def is_prime(n): Check if the number is a prime number. if n < 2: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True return [num for num in range(start, end + 1) if is_prime(num)]"},{"question":"Create a function that takes an array of numbers and returns their product.","solution":"def product_of_array(numbers): Returns the product of all numbers in the array. If the array is empty, returns 1 (since 1 is the multiplicative identity). product = 1 for number in numbers: product *= number return product"},{"question":"Create a function that accepts a string and returns another string with all non-alphanumeric characters removed and every character converted to lower case.","solution":"import re def clean_string(input_str): Removes all non-alphanumeric characters from the input string and converts all characters to lower case. cleaned_str = re.sub(r'[^a-zA-Z0-9]', '', input_str) return cleaned_str.lower()"},{"question":"Create a function that accepts a single integer as input and returns a new integer where all digits in the input number have been reversed.","solution":"def reverse_integer(n): Returns a new integer where all digits in the input number have been reversed. # Handling negative numbers by storing the sign and working with the absolute value sign = -1 if n < 0 else 1 n = abs(n) reversed_number = 0 while n != 0: reversed_number = reversed_number * 10 + n % 10 n = n // 10 return sign * reversed_number"},{"question":"Create a function that finding the largest number between three numbers. Create the function using a lambda function.","solution":"find_largest = lambda a, b, c: max(a, b, c)"},{"question":"Create a function that accepts an array of integers and returns the maximum number of elements that can be skipped while maintaining the order of the array and the sum of the remaining elements being as large as possible. The number of elements to skip must be less than the length of the array.","solution":"def maximize_skips(arr): Returns the maximum number of elements that can be skipped while maintaining the order of the array and the sum of the remaining elements being as large as possible. if not arr: return 0 arr_sum = sum(arr) skipped_sum = 0 skipped_count = 0 sorted_arr = sorted(arr, reverse=True) for num in sorted_arr: if len(arr) - skipped_count <= 1: break skipped_sum += num skipped_count += 1 return skipped_count"},{"question":"Create a function that takes in a string and returns the most frequent character that appears in it. If there are multiple characters with the same highest frequency, return the alphabetically smallest one.","solution":"def most_frequent_char(s): Returns the most frequent character in the string s. If there are multiple characters with the highest frequency, returns the alphabetically smallest one. from collections import Counter if not s: return '' counter = Counter(s) max_frequency = max(counter.values()) most_frequent_chars = [char for char, freq in counter.items() if freq == max_frequency] return min(most_frequent_chars)"},{"question":"Create a function that takes in a string and returns the length of the longest repeated substring.","solution":"def longest_repeated_substring(s): Returns the length of the longest repeated substring in the given string s. # Generate all suffixes of the string suffixes = [s[i:] for i in range(len(s))] # Sort the suffixes suffixes.sort() def longest_common_prefix(s1, s2): Returns the length of the longest common prefix between s1 and s2. n = min(len(s1), len(s2)) for i in range(n): if s1[i] != s2[i]: return i return n # Initialize the maximum length to 0 max_len = 0 # Iterate through the sorted suffixes to find the longest common prefix for i in range(len(s) - 1): lcp_length = longest_common_prefix(suffixes[i], suffixes[i + 1]) if lcp_length > max_len: max_len = lcp_length return max_len"},{"question":"Create a function that accepts a radian value and returns the corresponding degree value.","solution":"import math def radians_to_degrees(radian): Converts the given radian value to degrees. Parameters: radian (float): The radian value to convert. Returns: float: The corresponding degree value. return radian * (180 / math.pi)"},{"question":"Create a function that takes in a nested list and returns a flattened one.","solution":"def flatten(nested_list): Flattens a nested list. flattened_list = [] def flatten_helper(sub_list): for element in sub_list: if isinstance(element, list): flatten_helper(element) else: flattened_list.append(element) flatten_helper(nested_list) return flattened_list"},{"question":"Create a function that checks if a given number is a perfect square. If it is, return the square root of the number. If it is not, return -1. This function should work for both positive and negative integers. For negative numbers, the function should simply return -1.","solution":"import math def check_perfect_square(n): Checks if a given number is a perfect square. If it is, returns the square root of the number. If it is not, returns -1. For negative numbers, it returns -1. if n < 0: return -1 square_root = int(math.isqrt(n)) if square_root * square_root == n: return square_root return -1"},{"question":"Create a function that takes in an array of integers as input. The function should return the length of the longest strictly increasing subsequence (LIS). A strictly increasing subsequence is a sequence of numbers such that each number is greater than the one before it. For example, for the array [10, 9, 2, 5, 3, 7, 101, 18], the longest strictly increasing subsequence is [2, 3, 7, 101], and its length is 4.","solution":"def longest_increasing_subsequence(arr): if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Create a function that calculates the factorial of a given positive integer. The function should handle invalid inputs gracefully and return an appropriate error message if the input is not a positive integer.","solution":"def factorial(n): Returns the factorial of a given positive integer n. If the input is not a positive integer, returns an appropriate error message. if not isinstance(n, int) or n < 0: return \\"Input must be a non-negative integer.\\" if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes a list of integers as input and returns the largest integer in the list. If the list is empty, return None. Additionally, the function should handle negative numbers.","solution":"def find_largest(numbers): Returns the largest integer in the list. If the list is empty, returns None. if not numbers: return None return max(numbers)"},{"question":"Create a function that finds the nth prime number using the Sieve of Eratosthenes algorithm. The function should take an integer \`n\` as an input and return the nth prime number. The Sieve of Eratosthenes is one of the most efficient ways to find all primes smaller than \`n\` when \`n\` is smaller than 10 million or so.","solution":"def nth_prime(n): Returns the nth prime number using the Sieve of Eratosthenes algorithm. if n < 1: return None # Estimate upper bound for nth prime (Not guaranteed to be sufficient but good for smaller n) upper_bound = n * (10 if n < 6 else int(n * (2.5))) sieve = [True] * (upper_bound + 1) sieve[0] = sieve[1] = False p = 2 while (p * p <= upper_bound): if (sieve[p] == True): for i in range(p * p, upper_bound + 1, p): sieve[i] = False p += 1 primes = [p for p in range(upper_bound + 1) if sieve[p]] return primes[n - 1]"},{"question":"Create a function that takes in a string and counts the number of lowercase letters, uppercase letters, digits, and special characters in the string. The function should return these counts in a struct.","solution":"def count_characters(s): Counts the number of lowercase letters, uppercase letters, digits, and special characters in the string s. Parameters: s (str): The input string to be analyzed Returns: dict: A dictionary with keys 'lowercase', 'uppercase', 'digits', and 'special' and corresponding counts as values counts = { 'lowercase': 0, 'uppercase': 0, 'digits': 0, 'special': 0 } for char in s: if char.islower(): counts['lowercase'] += 1 elif char.isupper(): counts['uppercase'] += 1 elif char.isdigit(): counts['digits'] += 1 else: counts['special'] += 1 return counts"},{"question":"Create a function that takes a string and returns the first character that appears only once in the string, not considering spaces. If there is no unique character, return an empty string.","solution":"def first_unique_character(s): Returns the first character that appears only once in the string, not considering spaces. If there is no unique character, returns an empty string. s = s.replace(\\" \\", \\"\\") char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"Create a function that takes a positive integer N and returns a list with the first N Fibonacci numbers. The sequence should start with 0 and 1, and each subsequent number should be the sum of the previous two.","solution":"def fibonacci(N): Returns a list containing the first N Fibonacci numbers. if N <= 0: return [] elif N == 1: return [0] elif N == 2: return [0, 1] result = [0, 1] while len(result) < N: next_fib = result[-1] + result[-2] result.append(next_fib) return result"},{"question":"Create a function that takes a list and rotates it to the right by k positions. The function should also handle cases where k is larger than the length of the list. If k is greater than the length of the list, the function should rotate the list by the remainder of k divided by the list's length. For example, if k=5 and the list's length is 3, the function should rotate the list to the right by 2 positions (since 5 mod 3 = 2).","solution":"def rotate_list_right(lst, k): Rotates the list to the right by k positions. If k is larger than the length of the list, it rotates by the remainder of k divided by the list's length. :param lst: List of elements to be rotated. :param k: Number of positions to rotate the list by. :return: Rotated list. if not lst: # If the list is empty, return it as is return lst n = len(lst) k = k % n # Adjust k to be within the bounds of the list's length return lst[-k:] + lst[:-k]"},{"question":"Create a function that takes 2 integers (m,n) and returns a string that contains all the odd numbers between m and n (inclusive if they are odd). The numbers should be separated by a comma.","solution":"def odd_numbers(m, n): Returns a string containing all the odd numbers between m and n (inclusive if they are odd), separated by commas. return ','.join(str(i) for i in range(m, n+1) if i % 2 != 0)"},{"question":"Create a function that calculates the factorial of a number using recursion. The function should take a number \`n\` as input and return the factorial of \`n\`. If the input number is less than 0, the function should return \`None\`.","solution":"def factorial(n): Returns the factorial of a number n using recursion. If n is less than 0, returns None. if n < 0: return None if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Create a function that inserts a random element at a random index of a given list.","solution":"import random def insert_random_element(lst, element): Inserts a random element at a random index of a given list. Parameters: lst (list): The list to which the element will be inserted. element (any): The element to be inserted into the list. Returns: list: The list with the randomly inserted element. random_index = random.randint(0, len(lst)) return lst[:random_index] + [element] + lst[random_index:]"},{"question":"Create a function that takes an integer as input and returns its reverse. If reversing the number results in an integer overflow (i.e., the result is outside the 32-bit signed integer range), return 0.","solution":"def reverse_integer(x): Returns the reverse of the given integer x. If the reversed integer overflows 32-bit signed integer range, returns 0. INT_MIN, INT_MAX = -2**31, 2**31 - 1 sign = -1 if x < 0 else 1 x_abs = abs(x) reversed_x = int(str(x_abs)[::-1]) * sign if reversed_x < INT_MIN or reversed_x > INT_MAX: return 0 return reversed_x"},{"question":"Create a function that takes an integer array as parameter and returns the maximum number found in the array. The function should ignore negative numbers.","solution":"def max_non_negative(arr): Returns the maximum number found in the array, ignoring negative numbers. Parameters: arr (list): A list of integers. Returns: int: The maximum non-negative number in the array. Returns None if all numbers are negative or array is empty. non_negative_numbers = [num for num in arr if num >= 0] if not non_negative_numbers: return None return max(non_negative_numbers)"},{"question":"Create a function that , given a string and a character, returns a new string that represents the string with the first occurrence of the character replaced by its ASCII value. The function should handle edge cases like empty strings or non-existent characters gracefully.","solution":"def replace_first_occurrence_with_ascii(s: str, char: str) -> str: Replaces the first occurrence of the given character in the string with its ASCII value. Args: s (str): The input string. char (str): The character to be replaced. Returns: str: The modified string with the first occurrence of \`char\` replaced by its ASCII value. if not s or not char or len(char) != 1: return s position = s.find(char) if position == -1: return s ascii_value = str(ord(char)) new_string = s[:position] + ascii_value + s[position + 1:] return new_string"},{"question":"Create a function that takes a list of numbers and returns a new list with each number increased by 2.","solution":"def increase_by_two(nums): Returns a list where each number in the input list is increased by 2. return [num + 2 for num in nums]"},{"question":"Create a function that takes two parameters: \`x\` (an integer) and \`y\` (a string). The function should print \`x\` times the string \`y\`. Also, handle the case where the input type of \`y\` is not a string.","solution":"def repeat_string(x, y): Prints the string \`y\` repeated \`x\` times. If \`y\` is not a string, prints an error message. Parameters: x (int): The number of times to repeat the string. y (str): The string to be repeated. if not isinstance(y, str): print(\\"Error: The second parameter should be a string.\\") else: print(y * x)"},{"question":"Create a function that accepts a list of integers and returns a new list containing the squares of each number in the original list, without using any loops.","solution":"def square_list(numbers): Returns a list containing the squares of each number in the original list. return list(map(lambda x: x * x, numbers))"},{"question":"Create a function that accepts an array and returns the frequency of each element in the array.","solution":"def frequency_counter(array): Returns a dictionary with the frequency of each element in the array. frequency_dict = {} for element in array: if element in frequency_dict: frequency_dict[element] += 1 else: frequency_dict[element] = 1 return frequency_dict"},{"question":"Create a function that takes an integer and returns a tuple containing the count of even and odd numbers up to that integer. For example, if the input is 10, the function should return (5, 5) since there are 5 even numbers (0, 2, 4, 6, 8) and 5 odd numbers (1, 3, 5, 7, 9) up to 10. If the input is 1, the function should return (0, 1) since there is only one odd number (1) and no even numbers up to 1.","solution":"def count_even_odd(n): Returns a tuple containing the count of even and odd numbers up to the given integer n (exclusive). Parameters: n (int): The upper limit (exclusive). Returns: tuple: A tuple where the first element is the count of even numbers and the second element is the count of odd numbers. if n <= 0: return (0, 0) even_count = n // 2 odd_count = (n + 1) // 2 return (even_count, odd_count)"},{"question":"Create a function that efficiently calculates the sum of all natural numbers from 1 to n using the formula n*(n+1)/2.","solution":"def sum_of_natural_numbers(n): Returns the sum of all natural numbers from 1 to n using the formula n*(n+1)/2. if n < 1: return 0 return n * (n + 1) // 2"},{"question":"Create a function that generates a list of n Fibonacci numbers.","solution":"def generate_fibonacci(n): Generates a list of the first n Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first n Fibonacci numbers. if n <= 0: return [] fib_list = [0] if n > 1: fib_list.append(1) for i in range(2, n): next_fib = fib_list[-1] + fib_list[-2] fib_list.append(next_fib) return fib_list"},{"question":"Create a function that will return an array of the first n numbers of the Fibonacci sequence. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. For example, the first six Fibonacci numbers are [0, 1, 1, 2, 3, 5].","solution":"def fibonacci_sequence(n): Returns an array of the first n numbers of the Fibonacci sequence. if n <= 0: return [] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Create a function that reverses the vowels in a given string. The function should work for any string provided as input. For example, if the input string is \\"hello\\", the function should return \\"hollo\\".","solution":"def reverse_vowels(s): Returns the string s with its vowels reversed. vowels = \\"aeiouAEIOU\\" s_list = list(s) i, j = 0, len(s) - 1 while i < j: if s_list[i] not in vowels: i += 1 continue if s_list[j] not in vowels: j -= 1 continue s_list[i], s_list[j] = s_list[j], s_list[i] i += 1 j -= 1 return ''.join(s_list)"},{"question":"Create a function that takes an integer as input and raises it to a certain power based on the input integer. If the input is 2, raise it to the power of 5. If the input is 3, raise it to the power of 3. If the input is 4, raise it to the power of 2. For any other input, return \\"Invalid input\\".","solution":"def raise_to_power(number): Raises the number to a certain power based on the given integer. If the input is 2, raises it to the power of 5. If the input is 3, raises it to the power of 3. If the input is 4, raises it to the power of 2. For any other input, returns \\"Invalid input\\". if number == 2: return 2 ** 5 elif number == 3: return 3 ** 3 elif number == 4: return 4 ** 2 else: return \\"Invalid input\\""},{"question":"Create a function that takes an array of integers and a target integer, determines if there are two distinct integers in the array that sum up to the target, and returns true if so, and false otherwise.","solution":"def has_pair_with_sum(arr, target): Returns True if there are two distinct integers in the array that sum up to the target, else False. seen = set() for num in arr: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"Create a function that will sort and display all unique numbers from a given list in ascending order. The function should be named \`unique_sorted_numbers\` and should take a list of integers as an argument. The function should print the unique numbers in ascending order.","solution":"def unique_sorted_numbers(numbers): Prints the unique numbers from the list in ascending order. unique_numbers = sorted(set(numbers)) for num in unique_numbers: print(num)"},{"question":"Create a function that filters out odd numbers from a list of integers.","solution":"def filter_out_odd_numbers(numbers): Filters out odd numbers from a list of integers. Parameters: numbers (list of int): The list of integers to filter. Returns: list of int: A new list containing only the even numbers from the input list. return [num for num in numbers if num % 2 == 0]"},{"question":"Create a function that takes a string as input and returns a new string where all the characters 'a' are replaced with 'b', and all the characters 'b' are replaced with 'a'. This should be done without using any conditional statements or loops.","solution":"def swap_a_b(s): Returns a new string where all the characters 'a' are replaced with 'b', and all the characters 'b' are replaced with 'a'. translation_table = str.maketrans('ab', 'ba') return s.translate(translation_table)"},{"question":"Create a function that prints the numbers from 1 to 10 using a loop. However, if the number is divisible by 3, print \\"Fizz\\" instead, and if it's divisible by 5, print \\"Buzz\\". If the number is divisible by both 3 and 5, print \\"FizzBuzz\\". Make sure to use if-else statements for this logic.","solution":"def fizz_buzz(): Prints numbers from 1 to 10. For multiples of 3, prints \\"Fizz\\"; for multiples of 5, prints \\"Buzz\\"; for multiples of both 3 and 5, prints \\"FizzBuzz\\". result = [] for i in range(1, 11): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(i) return result"},{"question":"Create a function that takes a list of integers and returns a list of integers where each element is the count of the number of odd numbers appearing in the list up until each position.","solution":"def count_odds(lst): Takes a list of integers and returns a list where each element is the count of odd numbers appearing in the list up until each position. odd_count = 0 result = [] for num in lst: if num % 2 != 0: odd_count += 1 result.append(odd_count) return result"},{"question":"Create a function that takes a list of integers and returns a new list containing the sum of adjacent numbers. For example, given the list [1, 2, 3, 4], the function should return [3, 5, 7], since 1+2=3, 2+3=5, and 3+4=7.","solution":"def sum_of_adjacent(numbers): Given a list of integers, returns a new list containing the sum of adjacent numbers. :param numbers: List of integers :return: List of sums of adjacent numbers return [numbers[i] + numbers[i+1] for i in range(len(numbers)-1)]"},{"question":"Create a function that returns the list of all possible permutations of a given list \`subList\`. Your function should handle the permutation of elements in \`subList\`. Additionally, the permutations should maintain the order of elements as they appear in the subList. For instance, if \`subList = [1, 2, 3]\`, the output should include combinations like [1, 2, 3], [1, 3, 2], [2, 1, 3], etc.","solution":"from itertools import permutations def get_permutations(subList): Returns a list of all possible permutations of the given list \`subList\`. return list(permutations(subList))"},{"question":"Create a function that generates a list of all unique characters in a string regardless of the order. For example, if the input is \\"orange\\", the output should be ['o', 'r', 'a', 'n', 'g', 'e'].","solution":"def unique_characters(string): Returns a list of all unique characters in the input string. return list(set(string))"},{"question":"Create a function that checks if a number is a prime number or not. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Include comments in your code to explain the logic behind each step.","solution":"def is_prime(n): Checks if a number n is a prime number. Args: n (int): The number to check. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: # Prime numbers are greater than 1 return False if n <= 3: # 2 and 3 are prime numbers return True if n % 2 == 0 or n % 3 == 0: # Exclude multiples of 2 or 3 return False i = 5 # Check for divisors from 5 to the square root of n while i * i <= n: if n % i == 0 or n % (i + 2) == 0: # If n is divisible by i or i + 2, it's not prime return False i += 6 return True"},{"question":"Create a function that takes two strings as input and returns the number of times the second string appears within the first string.","solution":"def count_substring_occurrences(s, sub): Returns the number of times the substring \`sub\` appears in the string \`s\`. Parameters: s (str): The string to search within. sub (str): The substring to search for. Returns: int: The number of times \`sub\` appears in \`s\`. return s.count(sub)"},{"question":"Create a function that takes an integer \`n\` as input and prints the Fibonacci sequence up to the \`n\`th term. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci_sequence(n): Prints the Fibonacci sequence up to the nth term. sequence = [] a, b = 0, 1 for _ in range(n): sequence.append(a) a, b = b, a + b return sequence"},{"question":"Create a function that will convert a given string to all uppercase. If the input string contains any non-alphabetic characters, remove them before converting to uppercase.","solution":"def convert_to_uppercase(input_string): Converts the input string to uppercase and removes any non-alphabetic characters. Parameters: input_string (str): The string to be converted. Returns: str: The converted uppercase string without non-alphabetic characters. processed_string = ''.join(filter(str.isalpha, input_string)) return processed_string.upper()"},{"question":"Create a function that accepts an array of integers and a target integer. It should return true if two distinct elements in the array sum up to the target value, otherwise, it should return false.","solution":"def has_pair_with_sum(arr, target): Returns True if there are two distinct elements in the array that sum up to the target value, otherwise returns False. :param arr: List of integers :param target: Target integer :return: Boolean indicating whether a pair exists seen = set() for number in arr: if target - number in seen: return True seen.add(number) return False"},{"question":"Create a function that takes in a string and returns the reverse of the string. Optionally, it should also take in a boolean that determines whether to ignore case while checking for palindromes.","solution":"def reverse_string(s, ignore_case=True): Reverses the input string. If ignore_case is True, the case of characters is ignored in comparison. :param s: str - Input string to reverse. :param ignore_case: bool - Whether to ignore case when checking for palindromes. :return: str - Reversed string. if ignore_case: return s[::-1].lower() return s[::-1]"},{"question":"Create a function that takes an integer as input and returns a list of its prime factors, sorted in ascending order. If the input number is a prime number itself, it should only return that number in the list. The function should also return an empty list if the input is less than 2.","solution":"def prime_factors(n): Returns a list of prime factors of the given integer n, sorted in ascending order. If n is less than 2, returns an empty list. if n < 2: return [] factors = [] # Check for number of 2s that divide n while n % 2 == 0: factors.append(2) n = n // 2 # n must be odd at this point so a skip of 2 (i.e i = i + 2) can be used for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n = n // i # Condition if n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Create a function that accepts 2 parameters: input_string and target_char. The function should return the number of occurrences of target_char in input_string.","solution":"def count_occurrences(input_string, target_char): Returns the number of occurrences of target_char in input_string. :param input_string: String in which to count occurrences of target_char :param target_char: Character to count in input_string :return: Number of occurrences of target_char in input_string return input_string.count(target_char)"},{"question":"Create a function that takes a list of integers and returns the sum of all the elements in the list using Python.","solution":"def sum_of_list(numbers): Returns the sum of all the integers in the list. return sum(numbers)"},{"question":"Create a function that takes two parameters: the first is a list of integers, and the second is an integer n. The function should return a new list that contains every nth element from the original list, starting from the element at index 0. If the index n is out ofbounds, the function should return an empty list. Example: If the input list is [1, 2, 3, 4, 5] and n = 2, the output should be [1, 3, 5].","solution":"def every_nth_element(lst, n): Returns a new list that contains every nth element from the original list, starting from the element at index 0. Parameters: lst (list of int): The list of integers. n (int): The step count to take elements from the list. Returns: list of int: A list containing every nth element. if not lst or n <= 0 or n > len(lst): return [] return lst[::n]"},{"question":"Create a function that returns the Nth Catalan number. The function should accept an integer N as the parameter and return the Nth Catalan number. The function should also handle cases where N is 0 or negative by returning an appropriate error message. The Catalan number is a sequence of natural numbers that have found applications in combinatorial mathematics. The first few Catalan numbers are 1, 1, 2, 5, 14, 42, etc.","solution":"def catalan_number(n): Returns the Nth Catalan number. If N is 0, returns 1, as C(0) = 1. If N is negative, returns an error message. if n < 0: return \\"Error: N must be a non-negative integer.\\" if n == 0: return 1 cat = [0] * (n + 1) cat[0] = 1 # C(0) = 1 for i in range(1, n + 1): cat[i] = 0 for j in range(i): cat[i] += cat[j] * cat[i - 1 - j] return cat[n]"},{"question":"Create a function that identifies the longest substring in a given string that does not contain any repeating characters. For instance, longest_substring_length(\\"abcabcbb\\") should return 3, because the longest substring without repeating characters is \\"abc\\". The function should be optimized for time complexity. Use Python.","solution":"def longest_substring_length(s): Returns the length of the longest substring without repeating characters in string s. char_map = {} left, max_length = 0, 0 for right in range(len(s)): if s[right] in char_map and char_map[s[right]] >= left: left = char_map[s[right]] + 1 char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Create a function that takes in a list of integers and returns a new list that only contains the even numbers from the original list. How can I solve this programmatically?","solution":"def filter_even_numbers(numbers): Returns a list of even numbers from the input list. Args: numbers (list of int): The list of integers to filter. Returns: list of int: A list of even integers. return [num for num in numbers if num % 2 == 0]"},{"question":"Create a function that takes a floating-point number as input and returns its binary representation as a string. The binary string should consist of digits 0 and 1 only. The function should handle both positive and negative floating-point numbers by using the IEEE 754 standard for floating-point representation. The function should also handle a precision limit of up to 32 bits for both the integer and fractional parts of the number.","solution":"import struct def float_to_binary(number): Converts a floating-point number to its binary representation using IEEE 754 format. # Use struct to interpret the float in IEEE 754 format binary_representation = ''.join(f\\"{c:08b}\\" for c in struct.pack('!f', number)) return binary_representation"},{"question":"Create a function that defines a function that takes in one parameter N, and then within that function, defines and returns another function, which takes in another parameter M. This nested function should return the product of the original parameter N and M, multiplied by 10. If N is not a whole number, a TypeError should be raised.","solution":"def outer_function(N): if not isinstance(N, int): raise TypeError(\\"N must be a whole number (integer)\\") def inner_function(M): return N * M * 10 return inner_function"},{"question":"Create a function that calculates the sum of the elements in a list. However, if the list contains any non-integer elements, the function should raise a custom exception with the message \\"List contains non-integer elements\\".","solution":"class NonIntegerElementException(Exception): pass def sum_of_list(lst): Returns the sum of the elements in a list. Raises NonIntegerElementException if the list contains any non-integer elements. :param lst: List of elements to be summed :return: Sum of list elements if not all(isinstance(x, int) for x in lst): raise NonIntegerElementException(\\"List contains non-integer elements\\") return sum(lst)"},{"question":"Create a function that accepts a list of integers and returns the maximum value in that list. If the list is empty, it should return \`None\`.","solution":"def find_maximum(lst): Returns the maximum value in the given list of integers. If the list is empty, returns None. :param lst: List of integers :return: Maximum integer in the list or None if not lst: return None return max(lst)"},{"question":"Create a function that takes four arguments: an input string, a character to search for, and a string to replace the found character with. The function should return a new string where all occurrences of the specified character are replaced by the replacement string.","solution":"def replace_character(input_str, search_char, replace_str): Returns a new string where all occurrences of the search_char in input_str are replaced by the replace_str. Parameters: input_str (str): The string to process. search_char (str): The character to search for. replace_str (str): The string to replace the search_char with. Returns: str: A new string with all occurrences of search_char replaced by replace_str. return input_str.replace(search_char, replace_str)"},{"question":"Create a function that takes an integer \`n\` and returns the sum of all even numbers from 1 to \`n\`. If \`n\` is not positive, return 0.","solution":"def sum_of_evens(n): Returns the sum of all even numbers from 1 to n. If n is not positive, returns 0. if n <= 0: return 0 return sum(i for i in range(2, n+1, 2))"},{"question":"Create a function that takes an integer as input and returns its factorial using recursion. The function should handle both positive and negative integers input.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. For positive integers, it computes the traditional factorial. For negative integers, it raises ValueError as factorial for negative numbers is not defined. if n < 0: raise ValueError(\\"Factorial is not defined for negative integers\\") elif n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that takes a list of integers as input and returns a new list containing the squares of each element in the original list. Write a Python function that accomplishes this task.","solution":"def square_elements(lst): Returns a list containing the squares of each element in the input list. Parameters: lst (list): A list of integers. Returns: list: A list of integers where each integer is the square of the corresponding integer in the input list. return [x**2 for x in lst]"},{"question":"Create a function that checks if two strings are permutations of each other. Two strings are considered permutations if they contain the same characters in any order. For instance, \\"abc\\" and \\"bca\\" are permutations of each other.","solution":"def are_permutations(str1, str2): Checks if two strings are permutations of each other. Args: str1, str2 (str): Input strings to be checked. Returns: bool: True if str1 and str2 are permutations of each other, otherwise False. return sorted(str1) == sorted(str2)"},{"question":"Create a function that takes in a string \`input_string\` and returns the first non-repeating character in the string. If there is no non-repeating character, the function should return \`None\`.","solution":"def first_non_repeating_character(input_string): Returns the first non-repeating character in the input string. If there is no non-repeating character, returns None. char_count = {} # Count occurrences of each character for char in input_string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in input_string: if char_count[char] == 1: return char return None"},{"question":"Create a function that takes an integer \`n\` as input and returns the sum of all prime numbers less than \`n\`.","solution":"def is_prime(num): Returns True if num is a prime number, else False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_primes_less_than(n): Returns the sum of all prime numbers less than n. return sum(num for num in range(2, n) if is_prime(num))"},{"question":"Create a function that takes two parameters: a string and a substring. The function should return the number of occurrences of the substring in the string. The function should care about the case distinction.","solution":"def count_substring_occurrences(s, sub): Returns the number of occurrences of sub in s. The function is case-sensitive. return s.count(sub)"},{"question":"Create a function that decides whether it is a good day or not. A good day is defined as a day where the weather forecast predicts sunny or partly sunny with a temperature above 15 degrees Celsius. Write a Python function that takes a weather dictionary as input and returns True if the day is good and False otherwise.","solution":"def is_good_day(weather): Determines whether it is a good day based on weather conditions. A good day is defined as: - Forecast is 'sunny' or 'partly sunny' - Temperature is above 15 degrees Celsius Parameters: weather (dict): A dictionary containing 'forecast' (str) and 'temperature' (float). Returns: bool: True if it is a good day, False otherwise. forecast = weather.get('forecast').lower() temperature = weather.get('temperature') if forecast in ['sunny', 'partly sunny'] and temperature > 15: return True return False"},{"question":"Create a function that generates all possible combinations of a given string's characters.","solution":"import itertools def generate_combinations(s): Generates all possible combinations of the characters in the string s. :param s: Input string :return: List of all possible combinations if not s: return [] combinations = [] for r in range(1, len(s) + 1): combinations.extend([''.join(comb) for comb in itertools.combinations(s, r)]) return combinations"},{"question":"Create a function that takes a single integer as input and returns the sum of all even numbers from 1 to that integer. Write this function in Python.","solution":"def sum_of_even_numbers(n): Returns the sum of all even numbers from 1 to n. return sum(number for number in range(2, n+1, 2))"},{"question":"Create a function that takes two lists of integers and computes the sum of their element-wise product. Both lists have the same number of elements. For example, given two arrays of length 3, the function should compute \`(x[0]*y[0]) + (x[1]*y[1]) + (x[2]*y[2])\`. Suppose \`x\` is [1, 2, 3] and \`y\` is [4, 5, 6], the output should be 32.","solution":"def elementwise_product_sum(x, y): Compute the sum of element-wise products of two lists of integers. Args: x (list of int): First list of integers. y (list of int): Second list of integers. Returns: int: Sum of the element-wise products. return sum(a * b for a, b in zip(x, y))"},{"question":"Create a function that takes a positive integer and returns its factorial. In your solution, also ensure the function is able to handle large integers.","solution":"def factorial(n): Returns the factorial of a positive integer n. if n < 0: raise ValueError(\\"Input must be a positive integer.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes two numbers as input and returns the sum of the two numbers. However, the function should also check if either of the numbers is a prime number and return the string \\"One of the numbers is a prime number.\\" if either number is prime. If both numbers are prime, return the string \\"Both numbers are prime numbers.\\" If neither number is prime, return their sum.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_or_prime_check(a, b): Returns the sum of a and b, or a message if one or both numbers are prime. a_is_prime = is_prime(a) b_is_prime = is_prime(b) if a_is_prime and b_is_prime: return \\"Both numbers are prime numbers.\\" elif a_is_prime or b_is_prime: return \\"One of the numbers is a prime number.\\" else: return a + b"},{"question":"Create a function that takes in a list of integers and returns the second largest unique number in the list. If the list does not contain at least two unique numbers, return \`None\`.","solution":"def second_largest_unique(nums): Returns the second largest unique number from the list of integers, or None if there aren't at least two unique numbers. unique_nums = list(set(nums)) if len(unique_nums) < 2: return None unique_nums.sort(reverse=True) return unique_nums[1]"},{"question":"Create a function that generates a list of unique random numbers between a specified lower and upper limit. The function should ensure no duplicates and should be able to generate any amount of random numbers requested within those limits.","solution":"import random def generate_unique_random_numbers(lower_limit, upper_limit, total_numbers): Generates a list of unique random numbers within a specified range. Parameters: lower_limit (int): The lower limit of the range (inclusive). upper_limit (int): The upper limit of the range (inclusive). total_numbers (int): The number of unique random numbers to generate. Returns: list: A list of unique random numbers within the specified range. if upper_limit - lower_limit + 1 < total_numbers: raise ValueError(\\"Not enough unique numbers available in the specified range.\\") return random.sample(range(lower_limit, upper_limit + 1), total_numbers)"},{"question":"Create a function that calculates the number of occurrences of the string \\"ab\\" in a given substring of a larger string. The function should be case-sensitive and should only consider direct occurrences, not overlaps.","solution":"def count_ab_occurrences(s, start, end): Count the number of occurrences of the substring \\"ab\\" in the substring of 's' from 'start' to 'end' (inclusive of start and end indices). :param s: Main string :param start: Starting index of substring (inclusive) :param end: Ending index of substring (inclusive) :return: Number of occurrences of 'ab' in the given substring # Extract the relevant substring substring = s[start:end+1] # Initialize a counter count = 0 # Loop through the substring and count \\"ab\\" without overlapping i = 0 while i < len(substring) - 1: if substring[i:i+2] == \\"ab\\": count += 1 i += 2 # Move two steps ahead to avoid overlap else: i += 1 return count"},{"question":"Create a function that takes an array of integers and returns an array of the same integers sorted in descending order.","solution":"def sort_descending(arr): Returns a new array with integers sorted in descending order. :param arr: List[int] - An array of integers :return: List[int] - The sorted array in descending order return sorted(arr, reverse=True)"},{"question":"Create a function that takes two numbers, a and b, and returns their product. If either number is negatives, the function should return a string \\"Invalid Input\\" indicating that negative numbers are not allowed. If either number is zero, the function should return the other number as the product (since zero times any number is zero).","solution":"def multiply(a, b): Returns the product of a and b. If either number is negative, returns \\"Invalid Input\\". If either number is zero, returns the other number. if a < 0 or b < 0: return \\"Invalid Input\\" elif a == 0: return b elif b == 0: return a else: return a * b"},{"question":"Create a function that implements a Caesar cipher. Given a string, the function should shift each letter by one. If the shift reaches the end of the alphabet, it wraps around to the start of the alphabet. For example, if the input string is \\"hello\\", the function should return \\"ifmmp\\".","solution":"def caesar_cipher(text): Implements a Caesar cipher which shifts each letter in the text by one position. Parameters: text (str): The input string to be encrypted. Returns: str: The encrypted string. result = [] for char in text: if 'a' <= char <= 'z': result.append(chr(((ord(char) - ord('a') + 1) % 26) + ord('a'))) elif 'A' <= char <= 'Z': result.append(chr(((ord(char) - ord('A') + 1) % 26) + ord('A'))) else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes an integer array nums, and return the index of the first element in the array such that the element is equal to its value. That is, return the first (and only one) index \`i\` such that \`nums[i] == i\`. If no such element exists, return -1.","solution":"def find_first_index_equal_value(nums): Returns the index of the first element in the array such that nums[i] == i. If no such element exists, return -1. for i in range(len(nums)): if nums[i] == i: return i return -1"},{"question":"Create a function that checks if the sum of the digits of a given number is even. If it is, return true; otherwise, return false.","solution":"def is_sum_of_digits_even(number): Checks if the sum of the digits of a given number is even. :param number: The number to check :return: True if the sum of the digits is even, False otherwise digit_sum = sum(int(digit) for digit in str(abs(number))) return digit_sum % 2 == 0"},{"question":"Create a function that takes two strings as input and checks if the second string is a rotation of the first string. A string is considered a rotation of another if it can be obtained by rotating the other string in a circular manner. For example, \\"abc\\" is a rotation of \\"cba\\" by rotating \\"c\\" to the front.","solution":"def is_rotation(str1, str2): Check if str2 is a rotation of str1. # Check if lengths are different, if so they cannot be rotations of each other if len(str1) != len(str2): return False # Concatenate str1 with itself and see if str2 is a substring of the result concatenated = str1 + str1 return str2 in concatenated"},{"question":"Create a function that takes in two strings as parameters and returns a new string that concatenates the two input strings.","solution":"def concatenate_strings(str1, str2): Concatenates two input strings and returns the result. return str1 + str2"},{"question":"Create a function that takes a vector of integers and returns the sum of all even numbers in the vector.","solution":"def sum_of_even_numbers(vector): Returns the sum of all even numbers in the vector. :param vector: List of integers :return: Sum of all even integers in the list return sum(number for number in vector if number % 2 == 0)"},{"question":"Create a function that takes an integer as input and returns the sum of the squares of the digits of this integer. For instance, if the input is 123, the function should return 12 (since 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14).","solution":"def sum_of_squares_of_digits(n): Returns the sum of the squares of the digits of the input integer n. n = abs(n) return sum(int(digit) ** 2 for digit in str(n))"},{"question":"Create a function that takes a string and returns a new string with each character replaced by the next character in the alphabet. For example, 'a' would become 'b', 'b' would become 'c', and so on. The function should handle both lowercase and uppercase letters, as well as non-alphabet characters.","solution":"def shift_string(s): Takes a string and returns a new string with each character replaced by the next character in the alphabet. Handles both lowercase and uppercase letters, as well as non-alphabet characters. shifted_chars = [] for char in s: if 'a' <= char <= 'z': shifted_char = chr(((ord(char) - ord('a') + 1) % 26) + ord('a')) elif 'A' <= char <= 'Z': shifted_char = chr(((ord(char) - ord('A') + 1) % 26) + ord('A')) else: shifted_char = char shifted_chars.append(shifted_char) return ''.join(shifted_chars)"},{"question":"Create a function that accepts a list of numbers. The function will return the minimum and maximum values found in the list.","solution":"def find_min_max(numbers): Returns a tuple with the minimum and maximum values found in the list 'numbers'. :param numbers: List of numbers. :return: Tuple (min, max) if not numbers: raise ValueError(\\"The list is empty\\") min_val = min(numbers) max_val = max(numbers) return min_val, max_val"},{"question":"Create a function that takes a URL with query parameters and returns only the query parameters as a dictionary. For example, if the input is \\"http://example.com?name=John&age=30\\", the output should be \`{'name': 'John', 'age': '30'}\`.","solution":"from urllib.parse import urlparse, parse_qs def extract_query_params(url): Extracts the query parameters from a URL and returns them as a dictionary. Parameters: url (str): The URL containing query parameters. Returns: dict: A dictionary of query parameters. parsed_url = urlparse(url) query_params = parse_qs(parsed_url.query) # Ensure single value entries are not returned as lists return {k: v[0] if len(v) == 1 else v for k, v in query_params.items()}"},{"question":"Create a function that takes two sets of strings as input and returns a new set containing the strings from both sets that are not present in the other set.","solution":"def symmetric_difference(set1, set2): Returns a new set containing the strings from both sets that are not present in the other set. return set1.symmetric_difference(set2)"},{"question":"Create a function that generates a 3D matrix (an array of 2D arrays) in Python. The function should allow the user to specify the dimensions of the 3D matrix (height, width, and depth). Each element in the 3D matrix should be initialized to a specific value.","solution":"def create_3d_matrix(height, width, depth, initial_value=0): Creates a 3D matrix with the specified dimensions and initializes each element to the given initial_value. :param height: Number of 2D arrays. :param width: Number of rows in each 2D array. :param depth: Number of columns in each 2D array. :param initial_value: Initial value for each element in the matrix. :return: A 3D matrix (list of lists of lists) with the specified dimensions and initial value. return [[[initial_value for _ in range(depth)] for _ in range(width)] for _ in range(height)]"},{"question":"Create a function that converts a binary number to a decimal number and vice versa. You need to create two separate functions, one for the conversion from binary to decimal and another for the conversion from decimal to binary.","solution":"def binary_to_decimal(binary): Converts a binary number (in string format) to a decimal number. return int(binary, 2) def decimal_to_binary(decimal): Converts a decimal number to a binary number (in string format). return bin(decimal)[2:]"},{"question":"Create a function that counts the number of times a specific element appears in a list.","solution":"def count_occurrences(lst, element): Counts the number of times the specified element appears in the list. Parameters: lst (list): The list in which to count occurrences of the element. element: The element to count. Returns: int: The number of times the element appears in the list. return lst.count(element)"},{"question":"Create a function that accepts an array of numbers as input and returns a new array where each item is the original array's item minus 1.","solution":"def subtract_one(array): Accepts an array of numbers as input and returns a new array where each item is the original array's item minus 1. Parameters: array (list of int/float): Input array of numbers. Returns: list of int/float: New array with each item subtracted by 1. return [item - 1 for item in array]"},{"question":"Create a function that prints out a multiplication table for a given number. The function should take a single integer as an input and print out the multiplication table for numbers 1 through 20 for the given input number. You should not return anything from the function, but just print the table.","solution":"def print_multiplication_table(n): Prints out the multiplication table for the given number \`n\` for numbers 1 through 20. for i in range(1, 21): print(f\\"{n} x {i} = {n * i}\\")"},{"question":"Create a function that generates the Fibonacci sequence up to the nth number. The function should be named \`generate_fibonacci\` and should return a list containing the Fibonacci sequence up to the nth number.","solution":"def generate_fibonacci(n): Generates the Fibonacci sequence up to the nth number. Parameters: n (int): The length of the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence up to the nth number. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fibonacci_sequence = [0, 1] for i in range(2, n): next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_number) return fibonacci_sequence"},{"question":"Create a function that takes a list of integers as input and returns the sum of all unique numbers in the list. That is, duplicates should only be added once to the sum. How would you implement this in Python?","solution":"def sum_of_unique_numbers(numbers): Returns the sum of all unique numbers in the input list. Parameters: numbers (list of int): The list of integers. Returns: int: The sum of the unique integers in the list. return sum(set(numbers))"},{"question":"Create a function that can merge two sorted linked lists in order. For example, the function should take as input two linked lists like \`1->3->5\` and \`2->4->6\` and return a new list that is sorted, \`1->2->3->4->5->6\`.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1, l2): Merge two sorted linked lists and return it as a new sorted list. :param l1: ListNode, the head of the first sorted linked list :param l2: ListNode, the head of the second sorted linked list :return: ListNode, the head of the merged sorted linked list dummy = ListNode() tail = dummy while l1 and l2: if l1.val < l2.val: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next if l1: tail.next = l1 if l2: tail.next = l2 return dummy.next"},{"question":"Create a function that takes a string as input and returns the longest substring that contains at most two distinct characters. You can assume that the input string consists of characters in the English alphabet.","solution":"def longest_substring_two_distinct(s): Returns the longest substring that contains at most two distinct characters. if not s: return \\"\\" start, max_length, max_substring = 0, 0, \\"\\" char_map = {} for end in range(len(s)): char_map[s[end]] = char_map.get(s[end], 0) + 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 if end - start + 1 > max_length: max_length = end - start + 1 max_substring = s[start:end+1] return max_substring"},{"question":"Create a function that calculates the power of a number using recursion. The function should take two parameters: the base \`n\` and the exponent \`m\`.","solution":"def power(n, m): Calculates n raised to the power of m using recursion. Parameters: n (int or float): The base number m (int): The exponent Returns: int or float: The result of n raised to the power of m if m == 0: return 1 elif m > 0: return n * power(n, m - 1) else: return 1 / power(n, -m)"},{"question":"Create a function that reverses the order of characters in a given sentence. However, the order of the words should not be reversed. For example, if you input \\"hello world\\", the output should be \\"olleh dlrow\\".","solution":"def reverse_characters_in_sentence(sentence): Reverses the order of characters in each word in the given sentence. The order of the words remains unchanged. :param sentence: str, input sentence to be processed :return: str, sentence with characters in each word reversed words = sentence.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Create a function that takes a string as input and outputs the maximum length of the string present in any word within the string.","solution":"def max_word_length(s): Returns the maximum length of any word in the input string. Parameters: s (str): The input string. Returns: int: The length of the longest word in the string. words = s.split() if not words: return 0 return max(len(word) for word in words)"},{"question":"Create a function that takes a single integer as input and returns the next smallest palindrome number. The function should handle large numbers efficiently.","solution":"def next_palindrome(n): Returns the next smallest palindrome number greater than the given integer n. def is_palindrome(s): Checks if a string is a palindrome. return s == s[::-1] num = n + 1 while True: if is_palindrome(str(num)): return num num += 1"},{"question":"Create a function that calculates the square root of a given number using the Newton-Raphson method. The function should take a single argument: \`num\`, which is the number for which the square root is to be calculated. The function should return the square root of \`num\`.","solution":"def newton_raphson_sqrt(num, tolerance=1e-10): Calculate the square root of a given number using the Newton-Raphson method. Parameters: num (float): The number for which the square root is to be calculated. tolerance (float): The precision tolerance level. Returns: float: The calculated square root of the number. if num < 0: raise ValueError(\\"Cannot compute the square root of a negative number\\") guess = num / 2.0 while abs(guess * guess - num) > tolerance: guess = (guess + num / guess) / 2.0 return guess"},{"question":"Create a function that finds the second largest number in a list of integers. The function should handle the case where the list might not have enough elements to determine a second largest number.","solution":"def second_largest(numbers): Returns the second largest number in the list of integers. If the list has fewer than 2 unique elements, return None. if len(numbers) < 2: return None first, second = float('-inf'), float('-inf') for number in numbers: if number > first: second = first first = number elif first > number > second: second = number return second if second != float('-inf') else None"},{"question":"Create a function that takes two integers as input and prints their Euclidean distance between them.","solution":"import math def euclidean_distance(x1, x2): Returns the Euclidean distance between two points on a one-dimensional line. Since it's a one-dimensional line, this is the absolute difference between x1 and x2. return math.sqrt((x2 - x1) ** 2)"},{"question":"Create a function that given a list of elements, identifies the first non-repeated element in the list. If there are no non-repeated elements, return -1.","solution":"def first_non_repeated(lst): This function finds the first non-repeated element in the list. If there are no non-repeated elements, it returns -1. element_count = {} # Count occurrences of each element for element in lst: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 # Find the first element with a count of 1 for element in lst: if element_count[element] == 1: return element return -1"},{"question":"Create a function that , given an array of integers, returns the number of unique elements in the array. The function should use a data structure of your choice to keep track of the unique elements.","solution":"def count_unique_elements(arr): Returns the number of unique elements in the given array. Parameters: arr (list): A list of integers. Returns: int: The number of unique elements in the array. unique_elements = set(arr) return len(unique_elements)"},{"question":"Create a function that takes a list of numbers and returns a new list with the numbers sorted in descending order using merge sort algorithm.","solution":"def merge_sort_descending(arr): Takes a list of numbers and returns a new list with the numbers sorted in descending order using the merge sort algorithm. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort_descending(arr[:mid]) right_half = merge_sort_descending(arr[mid:]) return merge(left_half, right_half) def merge(left, right): sorted_list = [] while left and right: if left[0] > right[0]: sorted_list.append(left.pop(0)) else: sorted_list.append(right.pop(0)) sorted_list.extend(left if left else right) return sorted_list"},{"question":"Create a function that counts the number of 1s in the binary representation of a given positive integer. For example, the input \`13\` should return \`3\` since \`13\` is \`1101\` in binary, and there are three 1s.","solution":"def count_ones_in_binary(n): Returns the number of 1s in the binary representation of a given positive integer n. return bin(n).count('1')"},{"question":"Create a function that takes two arguments, an array of integers and a target integer. The function should return a tuple containing the indices of the two numbers such that they add up to the target. If there are no two numbers that add up to the target, the function should return an empty tuple. The function may assume that each input will have exactly one solution, and you may not use the same element twice.","solution":"def two_sum(nums, target): Returns a tuple containing the indices of the two numbers in the array 'nums' that add up to 'target'. If there are no such numbers, returns an empty tuple. Parameters: nums (List[int]): The list of integers. target (int): The target integer. Returns: Tuple[int, int]: A tuple of indices adding up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return ()"},{"question":"Create a function that takes a string as input and returns a string containing all the consonants in the input string in order from left to right.","solution":"def extract_consonants(input_string): Returns a string containing all the consonants in the input string in order from left to right. vowels = \\"AEIOUaeiou\\" consonants = ''.join([char for char in input_string if char.isalpha() and char not in vowels]) return consonants"},{"question":"Create a function that calculates the sum of the digits of a number given as a string. The function should handle both positive and negative numbers, and ensure that the input string is only composed of digits and an optional leading minus sign. If the input string is invalid, the function should return \`None\`.","solution":"def sum_of_digits(number_str): Returns the sum of the digits of a number given as a string. Handles both positive and negative numbers. If the input string is invalid, returns None. if not number_str: return None if number_str[0] == '-': number_str = number_str[1:] if not number_str.isdigit(): return None return sum(int(digit) for digit in number_str)"},{"question":"Create a function that takes a string as input and returns a new string with the letters in reverse order. If the string is empty, the function should return an empty string. For example, the reverse of \\"hello\\" should be \\"olleh\\".","solution":"def reverse_string(s): Takes a string as input and returns a new string with the letters in reverse order. If the string is empty, the function returns an empty string. return s[::-1]"},{"question":"Create a function that , when called as \`func()\` it must return a function; the returned function should always return the value of the number of times it has been called.","solution":"def func(): Returns a function that keeps track of and returns its number of calls. count = 0 def inner(): nonlocal count count += 1 return count return inner"},{"question":"Create a function that takes in two integers as input and returns the sum of the two integers. If the sum is greater than 10, return it as a string. If the sum is not greater than 10, return it as an integer.","solution":"def custom_sum(a, b): Returns the sum of two integers a and b. If the sum is greater than 10, returns the sum as a string. Otherwise, returns the sum as an integer. result = a + b if result > 10: return str(result) else: return result"},{"question":"Create a function that takes a list of integers and returns a new list with each element replaced by the sum of the squares of its digits. For example, given \`[12, 34, 56]\`, the function should return \`[1^2 + 2^2, 3^2 + 4^2, 5^2 + 6^2]\` which is \`[5, 25, 61]\`.","solution":"def sum_of_squares_of_digits(lst): Returns a list where each element is the sum of the squares of the digits of the corresponding element in the input list. Parameters: lst (list): A list of integers. Returns: list: A list of integers where each integer is the sum of the squares of the digits of the corresponding input integer. def sum_of_squares(n): # Convert the number to a string, iterate through the digits, convert back to int, square, and sum them up. return sum(int(digit) ** 2 for digit in str(n)) return [sum_of_squares(num) for num in lst]"},{"question":"Create a function that takes an integer n as a parameter and returns a list containing the squares of the first n even natural numbers. For example, if the function is called with the parameter 3, it should return [4, 16, 36].","solution":"def squares_of_even_numbers(n): Returns a list containing the squares of the first n even natural numbers. Parameters: n (int): The number of even natural numbers to square. Returns: list: A list of squares of the first n even natural numbers. return [(2 * i)**2 for i in range(1, n + 1)]"},{"question":"Create a function that calculates the factorial of a given number using a loop. The function should take an integer as input and return the factorial of the number. Assume the input will always be a non-negative integer.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. if n == 0: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that accepts a list of integers and returns the first index of the largest number in the list. If there are multiple occurrences of the largest number, it should return the index of the first occurrence. If the list is empty or contains no numbers, the function should return -1.","solution":"def first_index_of_largest_number(lst): Returns the first index of the largest number in the list. If the list is empty or contains no numbers, return -1. if not lst: return -1 max_value = max(lst) return lst.index(max_value)"},{"question":"Create a function that reads a text file and prints each line in reverse order to the console.","solution":"def print_lines_in_reverse_order(file_path): Reads a text file and prints each line in reverse order to the console. :param file_path: Path to the text file. with open(file_path, 'r') as file: lines = file.readlines() for line in lines: print(line.strip()[::-1])"},{"question":"Create a function that takes in a string as an argument and returns the most frequently occurring letter in that string. If there are multiple letters with the same repeatedly highest frequency, return the first one encountered when traversing the string. For example, for an input of \\"apple\\", the function would return \\"p\\" because it occurs twice. If the input is empty, the function should return None.","solution":"def most_frequent_letter(s): Returns the most frequently occurring letter in the string s. If there are multiple letters with the same highest frequency, return the first one encountered. If the input is empty, return None. if not s: return None frequency_dict = {} for char in s: if char.isalpha(): # Ensure we only count letters frequency_dict[char] = frequency_dict.get(char, 0) + 1 if not frequency_dict: return None most_frequent = None max_frequency = 0 for char in s: if char in frequency_dict and frequency_dict[char] > max_frequency: most_frequent = char max_frequency = frequency_dict[char] return most_frequent"},{"question":"Create a function that takes two parameters: \`n(rows)\` and \`customString\`. The function should create a list of strings, where each string is a concatenation of \`n\` occurrences of \`customString\`.","solution":"def repeat_string(n, customString): Creates a list of strings, where each string is a concatenation of \`n\` occurrences of \`customString\`. The size of the list is also \`n\`. :param n: Number of rows and number of repetitions of customString in each string :param customString: The string to be repeated :return: A list of concatenated strings return [customString * n for _ in range(n)]"},{"question":"Create a function that generates a unique 8-character string consisting of lowercase and uppercase letters and digits, ensuring that at least one character from each category is present. You should also include a main function that tests the generation of strings and checks their validity according to the rules above.","solution":"import random import string def generate_unique_string(): Generates a unique 8-character string consisting of lowercase and uppercase letters and digits, ensuring that at least one character from each category is present. lowercase = random.choice(string.ascii_lowercase) uppercase = random.choice(string.ascii_uppercase) digit = random.choice(string.digits) remaining_chars = random.choices(string.ascii_letters + string.digits, k=5) generated_string = [lowercase, uppercase, digit] + remaining_chars random.shuffle(generated_string) return ''.join(generated_string) def string_is_valid(s): Checks if the given string is valid: - contains exactly 8 characters, - has at least one lowercase letter, - has at least one uppercase letter, - has at least one digit. if len(s) != 8: return False has_lowercase = any(c.islower() for c in s) has_uppercase = any(c.isupper() for c in s) has_digit = any(c.isdigit() for c in s) return has_lowercase and has_uppercase and has_digit"},{"question":"Create a function that takes a list of integers as input and returns true if the list contains any duplicate elements. You are not allowed to use any additional data structures.","solution":"def contains_duplicates(nums): Returns True if the list contains any duplicates, otherwise False. nums.sort() for i in range(1, len(nums)): if nums[i] == nums[i-1]: return True return False"},{"question":"Create a function that generates all prime numbers up to a given number \`n\`. The function should return a list of these prime numbers. If no prime numbers are found, return an empty list.","solution":"def generate_primes(n): Generates all prime numbers up to a given number n. Parameters: n (int): The upper limit up to which primes are to be generated. Returns: list: A list of prime numbers up to n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(2, n + 1) if sieve[num]]"},{"question":"Create a function that can take any form of arguments and keywords.","solution":"def handle_any_args(*args, **kwargs): Function that takes any form of arguments and keywords. Returns a tuple containing: - a list of arguments - a dictionary of keyword arguments return args, kwargs"},{"question":"Create a function that accepts a list of strings and returns the first string that contains a specific target substring. If no string in the list contains the target substring, return \\"Target not found\\". The target substring should be a parameter of the function.","solution":"def find_first_with_target(strings, target): Returns the first string in the list that contains the target substring. If no string contains the target substring, returns \\"Target not found\\". :param strings: List of strings to search within. :param target: The substring to search for. :return: The first string containing the target or \\"Target not found\\". for string in strings: if target in string: return string return \\"Target not found\\""},{"question":"Create a function that takes an array of numbers and returns the maximum and minimum values found in that array. The function should handle both positive and negative numbers.","solution":"def find_max_min(arr): Returns a tuple containing the maximum and minimum values in the array. Parameters: arr (list of numbers): The input array containing numbers. Returns: tuple: (max_value, min_value) if not arr: raise ValueError(\\"Array cannot be empty\\") max_value = max(arr) min_value = min(arr) return (max_value, min_value)"},{"question":"Create a function that , when given a list of temperatures in degrees Celsius, returns a new list with the temperatures converted to degrees Fahrenheit and rounded to 1 decimal place.","solution":"def celsius_to_fahrenheit(celsius_list): Converts a list of temperatures from Celsius to Fahrenheit. Parameters: celsius_list (list of float): List of temperatures in Celsius. Returns: list of float: List of temperatures in Fahrenheit, rounded to 1 decimal place. return [round(c * 9/5 + 32, 1) for c in celsius_list]"},{"question":"Create a function that accepts a positive integer (n) as an argument and returns a list of all positive integers less than (n) which sum of the squares of its digits is equal to the number itself (self-squaring numbers).","solution":"def self_squaring_numbers(n): Returns a list of all positive integers less than n which sum of the squares of its digits is equal to the number itself. def sum_of_squares_of_digits(num): return sum(int(digit)**2 for digit in str(num)) result = [] for i in range(1, n): if sum_of_squares_of_digits(i) == i: result.append(i) return result"},{"question":"Create a function that takes an integer n and returns the nth Fibonacci number. The function should be optimized for large values of n. To handle large n efficiently, consider using matrix exponentiation.","solution":"def fib(n): Returns the nth Fibonacci number using matrix exponentiation. def multiply_matrices(A, B): return [ [ A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1] ], [ A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1] ] ] def matrix_power(matrix, power): result = [[1, 0], [0, 1]] # Identity matrix base = matrix while power > 0: if power % 2 == 1: result = multiply_matrices(result, base) base = multiply_matrices(base, base) power //= 2 return result if n <= 0: return 0 elif n == 1: return 1 else: F = [[1, 1], [1, 0]] result_matrix = matrix_power(F, n-1) return result_matrix[0][0]"},{"question":"Create a function that takes in an integer n and returns an array of size n filled with values from 1 to n. How can this be done in Python?","solution":"def create_array(n): Returns an array of size n filled with values from 1 to n. Parameters: n (int): The size of the array to create. Returns: list: The array containing the values from 1 to n. return list(range(1, n+1))"},{"question":"Create a function that will swap the elements of an array based on the indices provided. The function should take three parameters: an array, and two indices. After calling the function, the elements at these two indices should be swapped. Please consider edge cases, such as if the indices are out of the array bounds.","solution":"def swap_elements(arr, index1, index2): Swaps the elements of the array at the given indices. Parameters: arr (list): The array whose elements are to be swapped. index1 (int): The first index. index2 (int): The second index. Returns: list: The array with the elements swapped. Raises: IndexError: If either index1 or index2 is out of bounds. if index1 >= len(arr) or index2 >= len(arr) or index1 < 0 or index2 < 0: raise IndexError(\\"Index out of bounds\\") arr[index1], arr[index2] = arr[index2], arr[index1] return arr"},{"question":"Create a function that takes two integers as input and returns the number of common factors between them. A common factor of two integers is an integer that divides both of them without leaving a remainder.","solution":"def common_factors(a, b): Returns the number of common factors between two integers a and b. def gcd(x, y): while y: x, y = y, x % y return x gcd_ab = gcd(a, b) count = 0 for i in range(1, gcd_ab + 1): if a % i == 0 and b % i == 0: count += 1 return count"},{"question":"Create a function that takes a list of integers and modifies it to contain only the even numbers. The function should then return the modified list. The list should be passed by reference so that the changes are reflected in the original list.","solution":"def filter_even_numbers(lst): Modifies the list in-place to contain only even numbers and returns the modified list. Parameters: lst (list of int): The list of integers to be modified. Returns: list of int: The modified list containing only even numbers. lst[:] = [num for num in lst if num % 2 == 0] return lst"},{"question":"Create a function that takes an integer (n) as input and returns the product of all numbers in the range ([1, n]). This task requires understanding of basic mathematical operations and function implementation in a programming language.","solution":"def product_of_range(n): Returns the product of all numbers in the range [1, n]. Parameters: n (int): The upper end of the range (1 to n inclusive) Returns: int: Product of numbers from 1 to n inclusive if n < 1: return 0 product = 1 for i in range(1, n + 1): product *= i return product"},{"question":"Create a function that takes a number as input and returns the sum of its prime factors, counting each prime factor only once, even if the number is divisible by the same prime factor multiple times.","solution":"def sum_of_unique_prime_factors(n): Returns the sum of unique prime factors of the given number n. prime_factors = set() divisor = 2 while n % divisor == 0: prime_factors.add(divisor) n //= divisor divisor = 3 while divisor * divisor <= n: while n % divisor == 0: prime_factors.add(divisor) n //= divisor divisor += 2 if n > 1: prime_factors.add(n) return sum(prime_factors)"},{"question":"Create a function that converts a temperature in Kelvin to Celsius.","solution":"def kelvin_to_celsius(kelvin): Converts a temperature in Kelvin to Celsius. Parameters: kelvin (float): Temperature in Kelvin. Returns: float: Temperature in Celsius. return kelvin - 273.15"},{"question":"Create a function that takes a list of integers and returns a new list with an element added to it. The element to be added should be the sum of the original elements, multiplied by 2, and this should be done recursively until the list is empty. The function should also handle cases where the input list is empty.","solution":"def recursive_add_and_multiply(lst): This function takes a list of integers and returns a new list with an element added to it. The element to be added is the sum of the original elements, multiplied by 2, recursively until the list is empty. If the input list is empty, it returns an empty list. if not lst: return [] sum_val = sum(lst) lst.append(sum_val * 2) return lst"},{"question":"Create a function that takes in an array of integers as an argument. The function should return the product of all the elements in the array. If the array is empty, the function should return 1 (since the product of no numbers is conventionally considered to be 1).","solution":"def product_of_array(arr): Returns the product of all elements in the array. If the array is empty, returns 1. if not arr: return 1 product = 1 for num in arr: product *= num return product"},{"question":"Create a function that takes an array of positive integers and returns the second-largest number in the array. The array will always have at least two distinct numbers.","solution":"def second_largest(nums): Returns the second-largest number in a list of positive integers. Assumes that the list always has at least two distinct numbers. largest = second = float('-inf') for num in nums: if num > largest: second = largest largest = num elif num > second and num < largest: second = num return second"},{"question":"Create a function that sorts an array in ascending but with a twist. If the index of the element is even, the element should remain unchanged, while if the index is odd, the element should be replaced with its corresponding value in the sorted array excluding the element at the odd index it currently is. For example, given the array [5, 3, 2, 8, 1], the sorted array excluding the odd indices would be [1, 5, 2, 8, 3], but since the index 1 (current value 5) is even, it should remain unchanged. The function should return the modified array.","solution":"def sort_odd_index_elements(arr): Sorts elements at odd indices in ascending order while keeping elements at even indices unchanged. :param arr: List of integers :return: List of integers with the required twist odd_index_elements = [arr[i] for i in range(len(arr)) if i % 2 != 0] odd_index_elements_sorted = sorted(odd_index_elements) result = [] odd_index_pointer = 0 for i in range(len(arr)): if i % 2 == 0: result.append(arr[i]) else: result.append(odd_index_elements_sorted[odd_index_pointer]) odd_index_pointer += 1 return result"},{"question":"Create a function that takes two strings and checks if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example, the word \\"listen\\" is an anagram of \\"silent\\". Write a function \`are_anagrams\` that takes two strings as parameters and returns \`True\` if they are anagrams, otherwise return \`False\`.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, False otherwise. # Remove spaces and convert to lowercase for comparison str1 = str1.replace(' ', '').lower() str2 = str2.replace(' ', '').lower() # Compare sorted versions of the strings return sorted(str1) == sorted(str2)"},{"question":"Create a function that takes an integer array as input and returns an array that contains the indices of the minimum and maximum values in the input array. If there are multiple occurrences of the same value, the function should return the index of the first occurrence of the minimum and the index of the last occurrence of the maximum.","solution":"def min_max_indices(arr): Returns an array that contains the indices of the minimum and maximum values in the input array. The index of the first occurrence of the minimum value and the index of the last occurrence of the maximum value are returned. if not arr: return [] min_value = min(arr) max_value = max(arr) min_index = arr.index(min_value) max_index = len(arr) - 1 - arr[::-1].index(max_value) return [min_index, max_index]"},{"question":"Create a function that takes a string \`s\` as input and returns a string \`t\` where every character in \`s\` is transformed to the next character in the ASCII table. For example, if \`s\` is \\"abc\\", then \`t\` should be \\"bcd\\". If \`s\` is \\"z\\", then \`t\` should wrap around to \\"a\\". Note that the function should handle both uppercase and lowercase letters, and all other characters (like digits, punctuation, etc.) should remain unchanged.","solution":"def shift_characters(s): Shifts each alphabetic character in the string to the next character in ASCII. Wraps 'z' to 'a' and 'Z' to 'A'. Args: s (str): Input string to shift. Returns: str: String with characters shifted. def shift_char(c): if 'a' <= c <= 'z': return chr((ord(c) - ord('a') + 1) % 26 + ord('a')) elif 'A' <= c <= 'Z': return chr((ord(c) - ord('A') + 1) % 26 + ord('A')) else: return c return ''.join(shift_char(c) for c in s)"},{"question":"Create a function that capitalizes the first character of each word in a sentence and makes the rest of the characters lowercase. The function should ignore any leading or trailing whitespace.","solution":"def capitalize_sentence(sentence): Capitalizes the first character of each word in a sentence and makes the rest lowercase. Ignores leading or trailing whitespace. Parameters: sentence (str): The input sentence. Returns: str: The capitalized sentence. return ' '.join(word.capitalize() for word in sentence.strip().split())"},{"question":"Create a function that takes in a sorted array of integers as input and returns a new array of the same length, where each element of the new array is the average of its corresponding elements in the input array. If the element is at the beginning or end of the array, it should consider only one neighbor. For example, for an input array \`[1, 2, 3]\`, the output should be \`[2, 2, 2]\`.","solution":"def get_average_of_neighbors(arr): Returns a new array where each element is the average of its neighbors. If the element is at the beginning or end, it considers only one neighbor. :param arr: A sorted list of integers :return: A list of integers n = len(arr) if n == 0: return [] if n == 1: return arr[:] result = [0] * n for i in range(n): if i == 0: result[i] = (arr[i] + arr[i + 1]) // 2 elif i == n - 1: result[i] = (arr[i] + arr[i - 1]) // 2 else: result[i] = (arr[i - 1] + arr[i] + arr[i + 1]) // 3 return result"},{"question":"Create a function that generates a list of tuples, each containing two elements: the original string and its length. For example, given the list ['apple', 'banana', 'cherry'], the function should return [('apple', 5), ('banana', 6), ('cherry', 6)].","solution":"def generate_tuple_list(strings): Given a list of strings, return a list of tuples where each tuple contains a string and its length. :param strings: List of strings :return: List of tuples (string, length of string) return [(s, len(s)) for s in strings]"},{"question":"Create a function that takes an array as an input and returns a new array with each element's value doubled. The function signature should be \`def double_elements(array):\`.","solution":"def double_elements(array): Takes an array as input and returns a new array with each element's value doubled. return [2 * x for x in array]"},{"question":"Create a function that generates a list of all prime numbers up to a given limit. The function should be efficient and avoid unnecessary computations. How can I accomplish this using the Python programming language?","solution":"def generate_primes(limit): Generates a list of all prime numbers up to a given limit using the Sieve of Eratosthenes. :param limit: int - The upper boundary of the range to look for prime numbers. :return: list of int - A list containing all prime numbers up to limit. if limit < 2: return [] sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit + 1, start): sieve[multiple] = False return [num for num in range(2, limit + 1) if sieve[num]]"},{"question":"Create a function that takes an integer \`n\` as an input and returns the sum of all the even numbers from 0 to \`n\` inclusive. Ensure that your function handles edge cases, such as when \`n\` is less than 0.","solution":"def sum_even_numbers(n): Returns the sum of all even numbers from 0 to n inclusive. Parameters: n (int): The upper bound of the range to sum even numbers. Returns: int: The sum of all even numbers from 0 to n inclusive. if n < 0: return 0 return sum(i for i in range(0, n + 1) if i % 2 == 0)"},{"question":"Create a function that can determine the most common number in an array of integers. If there is more than one number that appears most frequently, return a list of all those numbers. If the array is empty, return an empty list.","solution":"from collections import Counter from typing import List, Union def most_common_number(arr: List[int]) -> Union[int, List[int]]: Determines the most common number(s) in an array of integers. If there is more than one number that appears most frequently, returns a list of all those numbers. If the array is empty, returns an empty list. if not arr: return [] counter = Counter(arr) max_count = max(counter.values()) most_common = [num for num, cnt in counter.items() if cnt == max_count] if len(most_common) == 1: return most_common[0] else: return most_common"},{"question":"Create a function that checks if a given list contains any duplicate elements. The function should return true if there is at least one duplicate, and false otherwise.","solution":"def contains_duplicates(lst): Returns True if there are any duplicate elements in the list, otherwise returns False. return len(lst) != len(set(lst))"},{"question":"Create a function that takes a list of integers and returns the sum of all the elements in the list. If the list is empty, return 0. Also, ensure that your function handles negative numbers.","solution":"def sum_of_elements(lst): Returns the sum of all elements in the list. If the list is empty, returns 0. Handles negative numbers as well. return sum(lst)"},{"question":"Create a function that takes an integer as input and returns True if the number is divisible by both 2 and 3, and False otherwise. You should also add some test cases to validate your function works as expected.","solution":"def is_divisible_by_2_and_3(number): Returns True if the number is divisible by both 2 and 3, and False otherwise. return number % 2 == 0 and number % 3 == 0"},{"question":"Create a function that takes in a string, checks if it's a palindrome and returns the result. A string is considered a palindrome if it reads the same backward as forward, e.g., \\"racecar\\" or \\"madam\\".","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, False otherwise. # Removing any non-alphanumeric characters and converting to lowercase clean_s = ''.join(char.lower() for char in s if char.isalnum()) return clean_s == clean_s[::-1]"},{"question":"Create a function that takes an integer as an input and checks if the input is a palindrome number. If it is, return True; otherwise, return False. You can assume that the input will always be a valid integer.","solution":"def is_palindrome_number(n): Returns True if the integer n is a palindrome number, otherwise returns False. # Convert the integer to string to easily check for palindrome property s = str(n) return s == s[::-1]"},{"question":"Create a function that takes a string input and returns all words of length greater than 5. How should the function handle punctuation without disrupting the word count?","solution":"import re def words_greater_than_five(text): Returns all words from the input text that have a length greater than 5. Handles punctuation without disrupting the word count. # Remove punctuation using regex clean_text = re.sub(r'[^ws]', '', text) words = clean_text.split() return [word for word in words if len(word) > 5]"},{"question":"Create a function that takes a list of integers and returns a new list with the elements in reverse order. For example, if the input list is [1, 2, 3, 4], the output list should be [4, 3, 2, 1].","solution":"def reverse_list(lst): Returns a new list with the elements of lst in reverse order. return lst[::-1]"},{"question":"Create a function that takes an integer n as a parameter and returns the factorial of the number. The function should handle both positive and negative numbers, and also return an appropriate error message for non-integer inputs.","solution":"def factorial(n): Returns the factorial of the given number n. For positive integers, it computes the factorial. For negative numbers, it returns an appropriate error message. For non-integer inputs, it returns an appropriate error message. if not isinstance(n, int): return \\"Error: Input is not an integer\\" if n < 0: return \\"Error: Factorial of a negative number is undefined\\" if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes three parameters: an integer array of size 3 (representing RGB) and a decimal number between 0.0 and 1.0 (representing a ratio). The function should return the result of multiplying each color in the RGB array by the ratio, clamping the result to the range of 0.0 to 255.0.","solution":"def adjust_rgb(rgb, ratio): Adjust the RGB values by a given ratio and clamp the results to the range [0.0, 255.0]. Parameters: rgb (list of int): An array of 3 integers representing RGB values. ratio (float): A decimal number between 0.0 and 1.0 representing the ratio. Returns: list of float: Adjusted RGB array with values clamped between 0.0 and 255.0. if not (0 <= ratio <= 1): raise ValueError(\\"Ratio must be between 0.0 and 1.0\\") return [min(max(0, color * ratio), 255) for color in rgb]"},{"question":"Create a function that takes two dictionaries as input and returns a new dictionary that represents the union of the two input dictionaries. If there are any common keys, keep the value from the first dictionary.","solution":"def union_dicts(dict1, dict2): Returns a new dictionary that represents the union of dict1 and dict2. If there are common keys, the value from dict1 is kept. union = dict2.copy() union.update(dict1) return union"},{"question":"Create a function that takes in two integers, x and y, and returns the sum of all integers between x and y (inclusive). If x is greater than y, the function should return a message stating \\"Please enter valid arguments\\". Otherwise, calculate the sum using a for loop and return the result.","solution":"def sum_between(x, y): Returns the sum of all integers between x and y (inclusive). If x is greater than y, returns an error message. if x > y: return \\"Please enter valid arguments\\" total = 0 for i in range(x, y + 1): total += i return total"},{"question":"Create a function that prints \\"Hello World!\\" to the console. How can this be done in Python?","solution":"def print_hello_world(): Prints \\"Hello World!\\" to the console. print(\\"Hello World!\\")"},{"question":"Create a function that takes two strings as input and returns the number of characters that are different between the two strings.","solution":"def count_different_characters(s1, s2): Returns the number of characters that are different between two strings. If the strings have different lengths, the function compares up to the length of the shorter string. length = min(len(s1), len(s2)) differences = 0 for i in range(length): if s1[i] != s2[i]: differences += 1 # Add the difference in length, as the extra characters are considered differences differences += abs(len(s1) - len(s2)) return differences"},{"question":"Create a function that takes a string as input and returns the most frequent character in the string. If there are multiple characters with the same highest frequency, the function should return all such characters in an array. If the string is empty, it should return an empty array.","solution":"from collections import Counter def most_frequent_characters(s): Returns the most frequent character(s) in the string \`s\`. If there are multiple characters with the same highest frequency, returns all such characters in an array. If the string is empty, returns an empty array. if not s: return [] # Count the frequency of each character in the string freq = Counter(s) # Find the highest frequency max_freq = max(freq.values()) # Identify all characters with the highest frequency most_frequent_chars = [char for char, count in freq.items() if count == max_freq] return most_frequent_chars"},{"question":"Create a function that takes a list of numbers and returns the diagonal elements of that matrix.","solution":"def get_diagonal_elements(matrix): Returns the diagonal elements of a given square matrix. :param matrix: List of lists, where each inner list represents a row of the matrix :return: List containing the diagonal elements of the matrix if not matrix or not matrix[0]: return [] return [matrix[i][i] for i in range(len(matrix))]"},{"question":"Create a function that takes a string of letters and returns an object with the counts of each letter in the string. If a letter is not present, it should not appear in the returned object.","solution":"def count_letters(s): Takes a string s and returns a dictionary with the counts of each letter in the string. letter_counts = {} for letter in s: if letter in letter_counts: letter_counts[letter] += 1 else: letter_counts[letter] = 1 return letter_counts"},{"question":"Create a function that takes a number as an input and returns a string that represents the number in binary, with the prefix '0b' and the suffix '00' added to the binary string. For example, if the input is 5, the function should return '0b10100'. If the input is 10, the function should return '0b101000'.","solution":"def to_custom_binary(n): Converts an integer to a custom binary string with a '0b' prefix and '00' suffix. Parameters: n (int): The integer to convert to binary. Returns: str: The custom binary string. return f'0b{bin(n)[2:]}00'"},{"question":"Create a function that takes in two arrays: \`arr1\` and \`arr2\`. The function should return a list containing all the elements that are common to both arrays, without any duplicates. Additionally, the returned list should be sorted in ascending order.","solution":"def common_elements(arr1, arr2): Returns a sorted list of unique common elements between arr1 and arr2. # Convert both arrays to sets to remove duplicates and use intersection to find common elements. common_set = set(arr1).intersection(set(arr2)) # Convert the set back to a sorted list. return sorted(common_set)"},{"question":"Create a function that takes a list of numbers and returns the frequency of each number in the list. The function should handle cases where the list may be empty.","solution":"def frequency_of_numbers(numbers): Returns a dictionary with the frequency of each number in the list. frequency = {} for number in numbers: if number in frequency: frequency[number] += 1 else: frequency[number] = 1 return frequency"},{"question":"Create a function that takes a Python list and returns the list with all duplicate elements removed while preserving the order of the elements.","solution":"def remove_duplicates(lst): Takes a Python list and returns the list with all duplicate elements removed while preserving the order of the elements. seen = set() result = [] for item in lst: if item not in seen: result.append(item) seen.add(item) return result"},{"question":"Create a function that calculates and returns the area of a circle given its radius.","solution":"import math def area_of_circle(radius): Returns the area of a circle given its radius. if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * radius ** 2"},{"question":"Create a function that takes two parameters: a string and a list. The function should check if each character in the string is an element of the list. If all characters are elements of the list, return a boolean True; otherwise, return False.","solution":"def are_characters_in_list(s, lst): Returns True if each character in the string s is an element of the list lst. Otherwise, returns False. return all(char in lst for char in s)"},{"question":"Create a function that takes a string \`s\` and an integer \`n\` as inputs and rotates the characters in the string \`s\` to the left by \`n\` positions. If \`n\` is greater than the length of the string, return the string in reverse order. If \`n\` is negative, iterate the rotation \`n\` times to the right instead of to the left.","solution":"def rotate_string(s, n): Rotates the characters in the string \`s\` to the left by \`n\` positions. If \`n\` is greater than the length of the string, return the string in reverse order. If \`n\` is negative, rotate the string \`n\` times to the right instead of to the left. length = len(s) if length == 0: return s # If n is greater than the length of the string if abs(n) > length: return s[::-1] # Adjust negative n to rotate to the right instead of left if n < 0: n = length + n # Normal left rotation for positive n return s[n:] + s[:n]"},{"question":"Create a function that returns the result of adding all numbers from 1 to the given number 'n'.","solution":"def sum_up_to(n): Returns the sum of all numbers from 1 to n. :param n: An integer number up to which the sum is computed :return: The sum of all numbers from 1 to n if n < 1: return 0 return n * (n + 1) // 2"},{"question":"Create a function that searches for a specific value in a sorted array using the binary search algorithm. The function should return the index of the value if it is found, otherwise return -1. Provide the algorithm in pseudocode, then convert it to Python.","solution":"def binary_search(array, target): Searches for a specific value in a sorted array using the binary search algorithm. Returns the index of the value if it is found, otherwise returns -1. left = 0 right = len(array) - 1 while left <= right: mid = left + (right - left) // 2 if array[mid] == target: return mid elif array[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that accepts a string and a substring as parameters. The function should return a boolean value indicating whether the substring is found within the string at least 'n' times.","solution":"def contains_substring_n_times(string, substring, n): Returns True if substring is found within string at least 'n' times, False otherwise. return string.count(substring) >= n"},{"question":"Create a function that returns the sum of the numbers located at even and odd indices in a list, respectively. This function should take a list of integers as an argument and return a tuple where the first element is the sum of numbers at even indices, and the second element is the sum of numbers at odd indices.","solution":"def sum_even_odd_indices(lst): Returns a tuple where the first element is the sum of numbers at even indices, and the second element is the sum of numbers at odd indices. Parameters: lst (list of int): The list of integers. Returns: tuple: A tuple containing the sum of numbers at even indices and odd indices. sum_even = 0 sum_odd = 0 for i in range(len(lst)): if i % 2 == 0: sum_even += lst[i] else: sum_odd += lst[i] return (sum_even, sum_odd)"},{"question":"Create a function that calculates the total number of characters in a string that are not vowels. Vowels are 'a', 'e', 'i', 'o', and 'u' (considering both uppercase and lowercase). The function should return the count of non-vowel characters.","solution":"def count_non_vowel_characters(s): Returns the count of non-vowel characters in a string. Vowels are considered as: 'a', 'e', 'i', 'o', 'u' (both uppercase and lowercase). vowels = set('aeiouAEIOU') non_vowel_count = 0 for char in s: if char not in vowels: non_vowel_count += 1 return non_vowel_count"},{"question":"Create a function that encrypts a plaintext string using the Caesar Cipher method. The function should take a string (plaintext) and an integer (shift) as parameters. The Caesar Cipher shifts each letter in the plaintext by the number of positions in the alphabet specified by the shift parameter. For example, a shift of 1 would transform 'a' to 'b', 'b' to 'c', and so on, up to 'z' which would loop around to 'a'. Non-alphabetical characters should not be changed. The function should handle both uppercase and lowercase letters.","solution":"def caesar_cipher(plaintext, shift): Encrypts the plaintext using the Caesar Cipher method with the specified shift. :param plaintext: The text to be encrypted. :param shift: The number of positions each letter in the plaintext should be shifted. :return: The encrypted text. encrypted_text = [] for char in plaintext: if char.isalpha(): # Determine base ASCII code (A for uppercase, a for lowercase) base = ord('A') if char.isupper() else ord('a') # Compute the shifted character and add it to the encrypted text encrypted_char = chr((ord(char) - base + shift) % 26 + base) encrypted_text.append(encrypted_char) else: # Non-alphabetical characters are added unchanged encrypted_text.append(char) return ''.join(encrypted_text)"},{"question":"Create a function that takes a list of integers and returns a new list with the integers in reverse order. Make sure to include a function to test your solution with various test cases.","solution":"def reverse_list(lst): Returns a new list with the integers in reverse order. Parameters: lst (list): The list of integers to be reversed. Returns: list: A new list with the integers in reverse order. return lst[::-1]"},{"question":"Create a function that takes a list and returns a new list with all duplicates removed while preserving the order of elements.","solution":"def remove_duplicates(lst): Returns a new list with all duplicates removed while preserving the order of elements. :param lst: List of elements that may contain duplicates. :return: A new list with duplicates removed. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Create a function that takes two parameters: \`n\` and \`k\`. The function should return the number of ways to form a sum \`n\` using exactly \`k\` positive integers, where each integer is between 1 and \`n\` (inclusive), and each may be used multiple times. For example, if \`n = 5\` and \`k = 3\`, the function should return 6, as the possible combinations are (1,1,3), (1,3,1), (3,1,1), (1,2,2), (2,1,2), and (2,2,1).","solution":"def count_sum_ways(n, k): Returns the number of ways to form a sum \`n\` using exactly \`k\` positive integers, where each integer is between 1 and \`n\` (inclusive) and each may be used multiple times. dp = [[0] * (k + 1) for _ in range(n + 1)] dp[0][0] = 1 for i in range(1, n + 1): for j in range(1, k + 1): for l in range(1, n + 1): if i - l >= 0: dp[i][j] += dp[i - l][j - 1] return dp[n][k]"},{"question":"Create a function that sums all elements of an array that are odd numbers.","solution":"def sum_of_odds(arr): Returns the sum of all odd numbers in the array. return sum(x for x in arr if x % 2 != 0)"},{"question":"Create a function that takes a list of lists of integers and returns a new list containing the sums of each nested list. For example, given the list \`[[1, 2], [3, 4], [5, 6]]\`, the function should return \`[3, 7, 11]\`.","solution":"def sum_nested_lists(nested_lists): Returns a list where each element is the sum of the corresponding nested list in the input. Parameters: nested_lists (list of lists of int): A list containing nested lists of integers. Returns: list: A list with the sum of each nested list. return [sum(sub_list) for sub_list in nested_lists]"},{"question":"Create a function that checks if a given string is a palindrome. A palindrome is a string that reads the same backward as forward, such as \\"level\\" or \\"radar\\". The function should return \`true\` if the string is a palindrome, and \`false\` otherwise. Assume the input string consists only of English letters and spaces. Ignore the case sensitivity. For example, 'A man a plan a canal Panama' should return \`true\`.","solution":"def is_palindrome(s): Returns True if the input string is a palindrome, False otherwise. Ignores case and spaces. cleaned = ''.join(c.lower() for c in s if c.isalnum()) return cleaned == cleaned[::-1]"},{"question":"Create a function that filters out all even numbers from a given dictionary where the keys are strings and the values are either integers or lists of integers. The function should remove any number that is even, including numbers in lists, but keep the structure of the dictionary intact.","solution":"def filter_even_numbers(d): Filters out all even numbers from a given dictionary where the keys are strings and the values are either integers or lists of integers. Parameters: d (dict): A dictionary with string keys and integer or list of integer values. Returns: dict: A dictionary with the same structure as input but with all even numbers removed. def is_odd(n): return n % 2 != 0 result = {} for key, value in d.items(): if isinstance(value, int): if is_odd(value): result[key] = value elif isinstance(value, list): filtered_list = [num for num in value if is_odd(num)] if filtered_list: # Only add the key if the filtered list is not empty result[key] = filtered_list return result"},{"question":"Create a function that takes a list of student grades and returns the average grade.","solution":"def average_grade(grades): Returns the average grade from the list of grades. :param grades: List of student grades :type grades: list :return: Average grade :rtype: float if not grades: return 0.0 return sum(grades) / len(grades)"},{"question":"Create a function that checks if two strings are rotations of each other (i.e., one string is a rotation of the other).","solution":"def are_rotations(str1, str2): Check if two strings are rotations of each other. :param str1: First string :param str2: Second string :return: True if str1 and str2 are rotations of each other, else False if len(str1) != len(str2): return False return str2 in (str1 + str1)"},{"question":"Create a function that takes an array of integers as an argument and returns a string that contains the array printed as a list in HTML format. The function should also have an option to specify the HTML tag used as the list container. The default tag should be \`<ul>\`.","solution":"def array_to_html_list(arr, tag=\\"ul\\"): Converts an array of integers into an HTML list using the specified tag. :param arr: List of integers :param tag: HTML tag to use as the list container (default is 'ul') :return: A string with the array printed as an HTML list list_items = ''.join(f\\"<li>{item}</li>\\" for item in arr) return f\\"<{tag}>{list_items}</{tag}>\\""},{"question":"Create a function that takes in two integers, \`x\` and \`y\`, and returns the higher value between \`x\` and \`y\`.","solution":"def max_value(x, y): Returns the higher value between x and y. return max(x, y)"},{"question":"Create a function that takes two lists and returns True if they have the same elements in the same order, otherwise False.","solution":"def are_lists_equal(list1, list2): Returns True if both lists have the same elements in the same order, otherwise False. return list1 == list2"},{"question":"Create a function that gets two integers \`n\` and \`x\` as input and returns their greatest common divisor (GCD). The function should use recursion to achieve this.","solution":"def gcd(n, x): Returns the greatest common divisor (GCD) of n and x using recursion. if x == 0: return n else: return gcd(x, n % x)"},{"question":"Create a function that takes a list of integers and returns a list of strings that represent the binary form of each number.","solution":"def to_binary_strings(numbers): Takes a list of integers and returns a list of strings that represent the binary form of each number. return [bin(num)[2:] for num in numbers]"},{"question":"Create a function that takes two integers as input. This function should return their sum and the difference (second number minus first number) in a tuple. If the second number is less than the first number, the function should return an error message as a string instead of a tuple.","solution":"def sum_and_difference(a, b): Returns a tuple containing the sum and the difference (b - a) of two integers. If the second integer is less than the first, returns an error message as a string. if b < a: return \\"Error: The second number is less than the first number.\\" else: return (a + b, b - a)"},{"question":"Create a function that takes a user's input and prints the string \\"Hello, User\\" to the console in Python.","solution":"def greet_user(name): Prints a greeting to the user. print(f\\"Hello, {name}\\")"},{"question":"Create a function that takes a number as an argument and prints out the first \\"n\\" prime numbers. How can this be achieved in Python?","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def first_n_primes(n): Returns a list of the first 'n' prime numbers. primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return primes"},{"question":"Create a function that takes a string as input and returns the number of occurrences of the substring \\"either\\" regardless of case.","solution":"def count_either_occurrences(s): Returns the number of occurrences of the substring \\"either\\" in the string s, regardless of case. return s.lower().count('either')"},{"question":"Create a function that takes a list of integers, finds the two numbers that are closest to each other in value and returns them as a tuple in the form (smaller_number, larger_number). If the list has less than two integers, the function should return None. If there are multiple pairs with the same minimum difference, return the first pair found.","solution":"def find_closest_pair(lst): Finds the two numbers in the list that are closest to each other in value and returns them as a tuple (smaller_number, larger_number). If the list has less than two integers, returns None. :param lst: List of integers :return: Tuple of two integers or None if len(lst) < 2: return None lst.sort() min_diff = float('inf') closest_pair = (None, None) for i in range(len(lst) - 1): diff = lst[i+1] - lst[i] if diff < min_diff: min_diff = diff closest_pair = (lst[i], lst[i+1]) return closest_pair"},{"question":"Create a function that takes two arguments and prints their sum.","solution":"def print_sum(a, b): Prints the sum of a and b. print(a + b)"},{"question":"Create a function that calculates the average of a list of integers in Python. The function should handle empty lists and return 0 if the list is empty.","solution":"def average(lst): Returns the average of a list of integers. Returns 0 if the list is empty. if not lst: return 0 return sum(lst) / len(lst)"},{"question":"Create a function that reads from a text file and returns its contents as a string.","solution":"def read_file(file_path): Reads the contents of a text file and returns it as a string. :param file_path: Path to the text file :return: Contents of the file as a string :raises: IOError if the file cannot be read with open(file_path, 'r', encoding='utf-8') as file: contents = file.read() return contents"},{"question":"Create a function that extracts all unique sentences from a given string, where each sentence begins with a capital letter and ends with a period. Additionally, the function should handle multiple sentences separated by spaces or newlines.","solution":"import re def extract_unique_sentences(text): Extracts unique sentences from a given string. A sentence is considered to start with a capital letter and end with a period. Sentences are separated by spaces or newlines. Args: text (str): The input text from which to extract sentences. Returns: list: A list of unique sentences. pattern = r'[A-Z][^.]*.' sentences = re.findall(pattern, text) unique_sentences = list(set(sentences)) return unique_sentences"},{"question":"Create a function that takes a list of integers and returns the maximum sum of any subarray within this list. The function should be named \`findMaxSubarraySum\` and should have a time complexity of O(n). Can you also provide a brief explanation of your solution?","solution":"def findMaxSubarraySum(arr): Returns the maximum sum of any subarray within the list of integers. :param arr: List of integers :return: Maximum subarray sum if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes a list of integers and returns a new list containing the sum of each pair of adjacent integers in the original list. You should not modify the original list.","solution":"def sum_adjacent_pairs(nums): Takes a list of integers and returns a new list containing the sum of each pair of adjacent integers in the original list. Args: nums (list): List of integers. Returns: list: A list of sums of adjacent pairs. return [nums[i] + nums[i + 1] for i in range(len(nums) - 1)]"},{"question":"Create a function that takes in a string and converts each character to its ASCII equivalent. Then, calculate the sum of all ASCII values of the characters in the string. The function should return the sum.","solution":"def ascii_sum(s): Converts each character in the string to its ASCII value and returns the sum of those values. Parameters: s (str): The input string. Returns: int: Sum of ASCII values of all characters in the input string. return sum(ord(char) for char in s)"},{"question":"Create a function that generates an AVL tree with a given number of nodes. Each node in the tree should be randomly generated. The function should also calculate and return the height of the AVL tree and the balance factors of all nodes.","solution":"import random class AVLNode: def __init__(self, key, height=1, left=None, right=None): self.key = key self.height = height self.left = left self.right = right self.balance = 0 # Balance factor class AVLTree: def __init__(self): self.root = None def height(self, node): if node is None: return 0 return node.height def update_height_and_balance(self, node): if node: left_height = self.height(node.left) right_height = self.height(node.right) node.height = max(left_height, right_height) + 1 node.balance = left_height - right_height def rotate_right(self, y): x = y.left T2 = x.right x.right = y y.left = T2 self.update_height_and_balance(y) self.update_height_and_balance(x) return x def rotate_left(self, x): y = x.right T2 = y.left y.left = x x.right = T2 self.update_height_and_balance(x) self.update_height_and_balance(y) return y def balance_node(self, node): self.update_height_and_balance(node) if node.balance > 1: if node.left and node.left.balance < 0: node.left = self.rotate_left(node.left) return self.rotate_right(node) if node.balance < -1: if node.right and node.right.balance > 0: node.right = self.rotate_right(node.right) return self.rotate_left(node) return node def insert(self, node, key): if node is None: return AVLNode(key) if key < node.key: node.left = self.insert(node.left, key) else: node.right = self.insert(node.right, key) return self.balance_node(node) def insert_key(self, key): self.root = self.insert(self.root, key) def get_balance_factors(self, node, balance_factors): if node is None: return balance_factors balance_factors[node.key] = node.balance self.get_balance_factors(node.left, balance_factors) self.get_balance_factors(node.right, balance_factors) return balance_factors def generate_avl_tree(n): tree = AVLTree() for _ in range(n): tree.insert_key(random.randint(0, 10000)) return tree def get_tree_height_and_balance_factors(tree): balance_factors = tree.get_balance_factors(tree.root, {}) return tree.height(tree.root), balance_factors"},{"question":"Create a function that generates a random string of a specified length using the characters from the set 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'. How can you implement this in Python?","solution":"import random import string def generate_random_string(length): Generates a random string of the specified length using the characters from the set 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'. characters = string.ascii_letters + string.digits return ''.join(random.choice(characters) for _ in range(length))"},{"question":"Create a function that sums the digits of an integer until a single digit is obtained. For example, if the number is 256, the sum of the digits is 2+5+6=13, and then summing 1+3=4, until we obtain the single digit 4.","solution":"def sum_to_single_digit(n): Sums the digits of an integer n until a single digit is obtained. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"Create a function that takes in two lists and returns their union. The union of two lists is the set of all elements that are in either of the lists. Ensure that the function handles duplicate elements and excludes them from the final union set.","solution":"def union_of_lists(list1, list2): Takes in two lists and returns their union as a list. The union of two lists is the set of all elements that are in either of the lists, handled without duplicates. # Combine both lists and convert to a set to remove duplicates, then convert back to a list return list(set(list1) | set(list2))"},{"question":"Create a function that takes an array of integers as input and returns the sum of the two largest numbers in the array. The function should handle any size of array, including edge cases like empty arrays or arrays with all negative numbers.","solution":"def sum_of_two_largest_numbers(arr): Returns the sum of the two largest numbers in the array. If the array has fewer than two elements, return None. if len(arr) < 2: return None first, second = float('-inf'), float('-inf') for number in arr: if number > first: first, second = number, first elif number > second: second = number return first + second"},{"question":"Create a function that reads a text file and returns the number of words in the file. Assume the file is located at \`/path/to/file.txt\`.","solution":"def count_words_in_file(file_path): Reads a text file from the specified path and returns the number of words in the file. :param file_path: str, path to the text file :return: int, number of words in the file try: with open(file_path, 'r') as file: contents = file.read() words = contents.split() return len(words) except FileNotFoundError: return 0"},{"question":"Create a function that takes two parameters: a string representing a date in the format \\"YYYY-MM-DD\\" and an integer representing the number of days to add to the date. The function should return the new date as a string in the same format \\"YYYY-MM-DD\\".","solution":"from datetime import datetime, timedelta def add_days_to_date(date_str, days): Adds a specified number of days to a given date. Args: date_str (str): The original date in the format \\"YYYY-MM-DD\\". days (int): The number of days to add to the date. Returns: str: The new date in the format \\"YYYY-MM-DD\\". date = datetime.strptime(date_str, \\"%Y-%m-%d\\") new_date = date + timedelta(days=days) return new_date.strftime(\\"%Y-%m-%d\\")"},{"question":"Create a function that generates all prime numbers up to a given number n using the Sieve of Eratosthenes algorithm. Explain each step of the algorithm and how it contributes to finding prime numbers efficiently.","solution":"def sieve_of_eratosthenes(n): Generates all prime numbers up to a given number n using the Sieve of Eratosthenes algorithm. Parameters: n (int): The upper limit (inclusive) to generate prime numbers. Returns: list: A list of prime numbers up to n. if n < 2: return [] # Initialize a list of booleans representing primality of numbers from 0 to n primes = [True] * (n + 1) primes[0] = primes[1] = False # 0 and 1 are not primes # Start from the first prime number, which is 2 p = 2 while (p * p <= n): # If primes[p] is True, it is a prime if primes[p]: # Mark all the multiples of p as False indicating not prime for i in range(p * p, n + 1, p): primes[i] = False p += 1 # Collect all prime numbers return [p for p in range(n + 1) if primes[p]] # Explanation: # 1. Create a list 'primes' of size n+1 initialized to True. # primes[i] will be True if i is a prime number, else False. # 2. Mark 0 and 1 as not primes since they are not. # 3. Start with the first prime number which is 2, and mark all its multiples as not primes. # 4. Repeat the process for the next number and continue until p^2 <= n. # 5. Finally, collect and return all the numbers that are still marked as True in the 'primes' list."},{"question":"Create a function that converts a Binary to a Decimal","solution":"def binary_to_decimal(binary_str): Converts a binary string to a decimal number. return int(binary_str, 2)"},{"question":"Create a function that takes in an array of digits and returns the largest number that can be formed by concatenating those digits.","solution":"from functools import cmp_to_key def create_largest_number(digits): Returns the largest number that can be formed by concatenating the given array of digits. :param digits: List[int] - List of single-digit integers :return: str - The largest number as a string def comparator(a, b): # Compare concatenated versions of a and b if a + b > b + a: return -1 elif a + b < b + a: return 1 else: return 0 # Convert all digits to strings since we will be comparing concatenated results digits_str = list(map(str, digits)) # Sort using custom comparator sorted_digits = sorted(digits_str, key=cmp_to_key(comparator), reverse=False) # Join sorted elements and return as a single string largest_number = ''.join(sorted_digits) # Remove leading zeros if there are any if largest_number[0] == '0': return '0' return largest_number"},{"question":"Create a function that takes a string parameter \`input_string\` and returns a new string that is the reverse of the input string.","solution":"def reverse_string(input_string): Returns the reverse of the input string. return input_string[::-1]"},{"question":"Create a function that takes an integer x and returns a vector of vectors of size n, where the first element in each nested vector is x, and the second and subsequent elements are the same as the previous one. For example, if x is 2 and n is 3, the output should be {{2, 2, 2}, {3, 3}, {4, 4, 4}}. How should I approach this problem?","solution":"def create_vector_of_vectors(x, n): Create a vector of vectors of size n. Args: x (int): The initial number. n (int): The size of the outer vector. Returns: list of lists: The vector of vectors. result = [] for i in range(n): inner_vector = [x + i] * (i + 2) result.append(inner_vector) return result"},{"question":"Create a function that takes two lists, one for keys and another for values, and generates a dictionary from these lists. If the lists are of unequal lengths, the function should extend the shorter list with \`None\` to match the length of the longer list.","solution":"def lists_to_dict(keys, values): Creates a dictionary from two lists, extending the shorter list with None if necessary. :param keys: List of keys :param values: List of values :return: Dictionary formed from keys and values max_length = max(len(keys), len(values)) # Extend the shorter list with None to match the length of the longer list keys.extend([None] * (max_length - len(keys))) values.extend([None] * (max_length - len(values))) # Generate the dictionary from the lists return dict(zip(keys, values))"},{"question":"Create a function that generates a list of the first 'n' Fibonacci numbers. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. Please also comment your code to explain how it works.","solution":"def generate_fibonacci(n): Generates a list of the first 'n' Fibonacci numbers. :param n: The number of Fibonacci numbers to generate. :return: A list containing the first 'n' Fibonacci numbers. # Base cases for n = 0 and n = 1 if n <= 0: return [] elif n == 1: return [0] # Initialize the list with the first two Fibonacci numbers fib_list = [0, 1] # Generate the remaining Fibonacci numbers until the list contains 'n' numbers while len(fib_list) < n: # Add the sum of the last two numbers to the list fib_list.append(fib_list[-1] + fib_list[-2]) return fib_list"},{"question":"Create a function that generates and prints the multiplication table for any given number (n), where n ranges from 1 to 10.","solution":"def multiplication_table(n): Generates and prints the multiplication table for the given number n from 1 to 10. table = [] for i in range(1, 11): table.append(f\\"{n} * {i} = {n * i}\\") return table"},{"question":"Create a function that takes in two arguments, \`x\` and \`y\`, and returns the Euclidean distance between two points in a 2D plane. Use the formula \`sqrt((x2 - x1)^2 + (y2 - y1)^2)\` and round the result to three decimal places.","solution":"import math def euclidean_distance(x1, y1, x2, y2): Returns the Euclidean distance between two points (x1, y1) and (x2, y2) in a 2D plane, rounded to three decimal places. distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2) return round(distance, 3)"},{"question":"Create a function that takes as input three numbers a, b, and c, and returns a tuple with the maximum value among a, b, and c and the minimum value among a, b, and c. If a, b, and c are not numeric, the function should return None.","solution":"def max_min(a, b, c): Returns a tuple with the maximum and minimum values among a, b, and c. If a, b, or c are not numeric, returns None. if not all(isinstance(i, (int, float)) for i in (a, b, c)): return None max_val = max(a, b, c) min_val = min(a, b, c) return (max_val, min_val)"},{"question":"Create a function that takes a string s as input and returns the length of the longest palindromic substring in s. Palindromic substrings are those that remain the same when read backward.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in s. n = len(s) if n == 0: return 0 longest = 1 def expand_from_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return right - left - 1 for i in range(n): len1 = expand_from_center(i, i) len2 = expand_from_center(i, i + 1) longest = max(longest, len1, len2) return longest"},{"question":"Create a function that takes in an array of integers and return the mode of the array. The mode is the number that appears most frequently in the array.","solution":"from collections import Counter def find_mode(arr): Returns the mode of the array, which is the number that appears most frequently in the array. If there are multiple modes, it returns the smallest one. if not arr: return None # returning None if the array is empty count = Counter(arr) max_frequency = max(count.values()) # Extract all numbers with the maximum frequency mode_candidates = [num for num, freq in count.items() if freq == max_frequency] # Return the smallest number among the candidates return min(mode_candidates)"},{"question":"Create a function that takes a string as an input and returns the maximum number of consecutive repeating characters in that string. For example, in the string \\"aabbbcccd\\", the function should return 3 because the character 'b' is repeated consecutively three times.","solution":"def max_consecutive_repeats(s): Returns the maximum number of consecutive repeating characters in the string s. if not s: return 0 max_count = 1 current_count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: current_count += 1 if current_count > max_count: max_count = current_count else: current_count = 1 return max_count"},{"question":"Create a function that converts the given string into a palindrome by appending the minimum number of characters to its end. A palindrome is a string that reads the same backward as forward.","solution":"def make_palindrome(s): Converts the given string into the shortest palindrome by appending the minimum number of characters to its end. def is_palindrome(x): return x == x[::-1] for i in range(len(s)): if is_palindrome(s[i:]): return s + s[:i][::-1] return s + s[::-1]"},{"question":"Create a function that can remove repeated characters from a string, preserving the order of appearance. For example, if the input is \\"programming\\", the output should be \\"progamin\\".","solution":"def remove_repeated_characters(s): Removes repeated characters from the string s, preserving the order of appearance. Parameters: - s (str): The input string. Returns: - str: A new string with repeated characters removed. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that takes two integers as arguments and returns the sum of a new array consisting of the elements of the two input arrays, where each element is the sum of the corresponding elements of the two input arrays.","solution":"def sum_two_arrays(arr1, arr2): Takes two lists of integers and returns the sum of a new list consisting of the element-wise sums of the input arrays. Args: arr1: List of integers. arr2: List of integers. Returns: Integer sum of the new list created by element-wise addition of arr1 and arr2. # Ensure both arrays are of the same length if len(arr1) != len(arr2): raise ValueError(\\"Both arrays need to have the same length.\\") # Create the new array by element-wise addition new_array = [x + y for x, y in zip(arr1, arr2)] # Return the sum of the new array return sum(new_array)"},{"question":"Create a function that calculates and returns the total number of days in a given month and year, taking leap years into account. The function should handle both January (1) and February (2) correctly, and return the appropriate number of days.","solution":"def days_in_month(month, year): Returns the total number of days in a given month and year. # Lists for months and number of days in corresponding months days_in_months_normal = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] days_in_months_leap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Leap year check if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): days_in_months = days_in_months_leap else: days_in_months = days_in_months_normal return days_in_months[month - 1]"},{"question":"Create a function that takes in an array of integers as an argument and returns a new array that contains both the maximum and minimum values found in the input array.","solution":"def find_max_min(arr): Returns an array containing the maximum and minimum values found in the input array. if not arr: return [] max_val = max(arr) min_val = min(arr) return [max_val, min_val]"},{"question":"Create a function that checks if a given array can be split into two non-empty parts such that one part contains only even numbers, and the other part contains only odd numbers.","solution":"def can_split_even_odd(nums): Checks if the given array can be split into two non-empty parts such that one part contains only even numbers and the other part contains only odd numbers. :param nums: List of integers :return: Boolean, True if can be split as described, False otherwise has_even = any(n % 2 == 0 for n in nums) has_odd = any(n % 2 == 1 for n in nums) return has_even and has_odd and len(nums) > 1"},{"question":"Create a function that accepts three numbers as arguments and returns their average, rounded to two decimal places.","solution":"def average_of_three(a, b, c): Accepts three numbers as arguments and returns their average, rounded to two decimal places. average = (a + b + c) / 3 return round(average, 2)"},{"question":"Create a function that accepts an array of integers and returns an array of the same length where each element at index \`i\` is the product of all elements in the original array except the element at index \`i\` itself. What is the solution without using division?","solution":"def product_except_self(nums): Returns an array of the products of all elements except self for each index. n = len(nums) if n == 0: return [] # Initialize two arrays for the products to the left and right of each element left_products = [1] * n right_products = [1] * n # Fill left_products for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill right_products for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Construct the result array result = [1] * n for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Create a function that takes in a list of integers and returns a new list that is the product of all the integers in the list. You should use a for-each loop to achieve this, and the function should continue to multiply the integers even if one of them is zero.","solution":"def product_of_list(lst): Takes in a list of integers and returns a new list where each element is the product of all the integers in the original list. result = [] product = 1 for num in lst: product *= num for _ in lst: result.append(product) return result"},{"question":"Create a function that accepts a list of integers as input and returns the list, with each element increased by 2.","solution":"def increase_by_two(lst): Returns a new list with each element from the input list increased by 2. Parameters: lst (list of int): The list of integers to increase. Returns: list of int: A new list with each element increased by 2. return [x + 2 for x in lst]"},{"question":"Create a function that takes in two lists and returns a new list containing the intersection of the two lists, but the intersection should be sorted and contain no duplicates.","solution":"def intersection_sorted_unique(list1, list2): Returns the sorted list of unique elements that are present in both list1 and list2. # Find the intersection and remove duplicates by using set intersection_set = set(list1) & set(list2) # Convert the set back into a sorted list result = sorted(intersection_set) return result"},{"question":"Create a function that takes a list of integers as input and returns the list of integers sorted in descending order. The list can contain both positive and negative integers. Ensure to handle the case when the list is empty or contains only one element. Also, the function should be able to sort a list of integers that may contain duplicate values.","solution":"def sort_descending(lst): Takes a list of integers and returns the list sorted in descending order. Handles empty lists and lists with one element. if not lst: return lst return sorted(lst, reverse=True)"},{"question":"Create a function that takes a number and adds all even numbers between 1 and that number. If the number is odd, it should add all even numbers between 1 and the largest even number less than that number. If the number is negative, the function should return 0.","solution":"def sum_even_numbers(n): Returns the sum of all even numbers between 1 and n. If n is odd, it sums up to the largest even number less than n. If n is negative, returns 0. if n < 1: return 0 if n % 2 != 0: n -= 1 return sum(range(2, n+1, 2))"},{"question":"Create a function that takes two string parameters and returns a boolean indicating whether the second string is an anagram of the first. An anagram is a word or phrase that is made by rearranging the letters of another, such as 'cinema' and 'iceman'.","solution":"def are_anagrams(str1, str2): Returns True if str2 is an anagram of str1, otherwise False. # Anagrams must be the same length if len(str1) != len(str2): return False # Anagrams must have the same letters exactly the same number of times return sorted(str1) == sorted(str2)"},{"question":"Create a function that reverses a given list but also shifts the elements in a circular manner. For example, if the input list is [1, 2, 3, 4], the output should be [4, 3, 2, 1].","solution":"def reverse_and_shift(lst): Reverses the given list and shifts the elements in a circular manner. Parameters: lst (list): The list to be reversed and shifted. Returns: list: The reversed and circularly shifted list. if not lst: return lst return lst[::-1]"},{"question":"Create a function that takes a list of strings as input and returns a new list containing only the strings that are longer than the average length of the input list. If there are no strings longer than the average, return an empty list.","solution":"def filter_longer_than_average(strings): Filters and returns a list of strings that are longer than the average length of the input list of strings. Parameters: strings (list of str): List of strings. Returns: list of str: List of strings longer than the average length. if not strings: return [] average_length = sum(len(s) for s in strings) / len(strings) return [s for s in strings if len(s) > average_length]"},{"question":"Create a function that takes a list of integers and returns a new list with the integers replaced by their square roots. However, if the integer is a perfect square, it should remain unchanged. How should the function handle negative numbers and zeros?","solution":"import math def process_numbers(nums): Returns a new list where each integer in nums is replaced by its square root if it is not a perfect square, otherwise keeps the original perfect square. Leaves negative integers unmodified. result = [] for num in nums: if num < 0: result.append(num) elif num == 0: result.append(0) elif int(math.sqrt(num)) ** 2 == num: result.append(num) else: result.append(math.sqrt(num)) return result"},{"question":"Create a function that takes the following arguments, customer_id, product_id, and quantity. This function should retrieve customer_details from the customer_details_table where customer_id matches. After that, it should validate the product_id against the products_available_table to ensure it is in stock. If the product is in stock, it should proceed to deduct the quantity from the product's stock in the products_available_table. If the quantity deducted is greater than the current stock, it should throw an exception that the product is out of stock. After deducting the quantity, it should update the customer_order_history_table with the order details. Finally, it should return the updated customer_details and the new order details.","solution":"import sqlite3 def create_connection(): conn = sqlite3.connect(':memory:') # Create an in-memory database for demonstration purposes return conn def setup_database(conn): cursor = conn.cursor() cursor.execute('''CREATE TABLE customer_details_table ( customer_id INTEGER PRIMARY KEY, customer_name TEXT, contact_info TEXT)''') cursor.execute('''CREATE TABLE products_available_table ( product_id INTEGER PRIMARY KEY, product_name TEXT, stock INTEGER)''') cursor.execute('''CREATE TABLE customer_order_history_table ( order_id INTEGER PRIMARY KEY AUTOINCREMENT, customer_id INTEGER, product_id INTEGER, quantity INTEGER, FOREIGN KEY (customer_id) REFERENCES customer_details_table (customer_id), FOREIGN KEY (product_id) REFERENCES products_available_table (product_id))''') cursor.execute(\\"INSERT INTO customer_details_table (customer_id, customer_name, contact_info) VALUES (1, 'John Doe', 'john@example.com')\\") cursor.execute(\\"INSERT INTO products_available_table (product_id, product_name, stock) VALUES (1, 'Product A', 10)\\") cursor.execute(\\"INSERT INTO products_available_table (product_id, product_name, stock) VALUES (2, 'Product B', 5)\\") conn.commit() def place_order(customer_id, product_id, quantity): conn = create_connection() setup_database(conn) cursor = conn.cursor() # Retrieve customer details cursor.execute(\\"SELECT * FROM customer_details_table WHERE customer_id=?\\", (customer_id,)) customer_details = cursor.fetchone() if not customer_details: return f\\"Customer ID {customer_id} not found\\" # Validate product_id and check stock cursor.execute(\\"SELECT stock FROM products_available_table WHERE product_id=?\\", (product_id,)) product_details = cursor.fetchone() if not product_details: return f\\"Product ID {product_id} not found\\" current_stock = product_details[0] if quantity > current_stock: return \\"Product is out of stock\\" # Deduct quantity from stock new_stock = current_stock - quantity cursor.execute(\\"UPDATE products_available_table SET stock=? WHERE product_id=?\\", (new_stock, product_id)) # Update customer order history cursor.execute(\\"INSERT INTO customer_order_history_table (customer_id, product_id, quantity) VALUES (?, ?, ?)\\", (customer_id, product_id, quantity)) conn.commit() # Retrieve the newly inserted order details cursor.execute(\\"SELECT * FROM customer_order_history_table ORDER BY order_id DESC LIMIT 1\\") new_order_details = cursor.fetchone() return customer_details, new_order_details"},{"question":"Create a function that will take three integers as arguments and return the largest of the three. You need to handle cases where the integers might be negative.","solution":"def find_largest(a, b, c): Returns the largest of the three integers. return max(a, b, c)"},{"question":"Create a function that takes in a list of integers and returns the length of the longest contiguous subarray with an equal number of 0s and 1s.","solution":"def findMaxLength(nums): Finds the length of the longest contiguous subarray with an equal number of 0s and 1s. :param nums: List[int] - a list of integers consisting of only 0s and 1s :return: int - the length of the longest contiguous subarray with an equal number of 0s and 1s count_map = {0: -1} max_length = 0 count = 0 for i, num in enumerate(nums): count = count + 1 if num == 1 else count - 1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"Create a function that takes an integer pointer and dereferences it within the function, but does not allow the caller to modify the integer it points to after the function has finished execution.","solution":"def dereference_and_protect_int(pointer): Dereferences the integer pointer and returns the value, effectively protecting the original integer from being modified by the caller after the function has finished execution. value = pointer[0] return value"},{"question":"Create a function that returns True if a positive integer n is in the Fibonacci sequence.","solution":"def is_fibonacci(n): Returns True if n is a positive integer in the Fibonacci sequence, else False. if n <= 0: return False a, b = 0, 1 while b < n: a, b = b, a + b return b == n"},{"question":"Create a function that converts a given string into a palindrome by appending the minimum number of characters at the end. The resulting palindrome should be the shortest possible. For instance, given the string \\"race\\", the function should return \\"racecar\\". If the string \\"level\\" is passed, it should return \\"level\\" since it's already a palindrome.","solution":"def make_palindrome(s): Converts the given string into the shortest possible palindrome by appending the minimum number of characters at the end. if s == s[::-1]: return s for i in range(len(s)): if s[i:] == s[i:][::-1]: return s + s[:i][::-1] return s + s[:-1][::-1] # Example usage print(make_palindrome(\\"race\\")) # Output: \\"racecar\\" print(make_palindrome(\\"level\\")) # Output: \\"level\\""},{"question":"Create a function that converts words within a sentence to Pig Latin. Pig Latin is a language game where words are transformed such that the initial consonant or cluster of consonants is moved to the end of the word followed by \\"ay\\". For example, the word \\"apple\\" becomes \\"appleay\\", and \\"banana\\" becomes \\"ananabay\\". If a word starts with a vowel, you just add \\"way\\" to the end of the word. Write a function named \`pig_latin_translator\` that takes a string of text as an argument and returns the text translated into Pig Latin. Assume that the text contains only letters and spaces.","solution":"def pig_latin_translator(text): Translates a sentence into Pig Latin. :param text: str, input sentence :return: str, sentence translated into Pig Latin def translate_word(word): vowels = \\"aeiouAEIOU\\" if word[0] in vowels: return word + \\"way\\" else: for i, letter in enumerate(word): if letter in vowels: return word[i:] + word[:i] + \\"ay\\" return word + \\"ay\\" # Just in case a word has no vowels (though this is not English) words = text.split() translated_words = [translate_word(word) for word in words] return ' '.join(translated_words)"},{"question":"Create a function that identifies and returns the longest common substring among multiple strings. If there are no common substrings, return an empty string.","solution":"def longest_common_substring(strings): Returns the longest common substring among multiple strings. If there are no common substrings, returns an empty string. if not strings: return \\"\\" # Take the shortest string as the starting point for finding common substrings shortest_str = min(strings, key=len) longest_substr = \\"\\" for i in range(len(shortest_str)): for j in range(i + 1, len(shortest_str) + 1): candidate = shortest_str[i:j] if all(candidate in s for s in strings): if len(candidate) > len(longest_substr): longest_substr = candidate return longest_substr"},{"question":"Create a function that will search for a substring within a string, and return the number of occurrences of the substring in the string. The function should be case-sensitive.","solution":"def count_substring_occurrences(main_string, substring): Returns the number of occurrences of \`substring\` within \`main_string\`. This search is case-sensitive. return main_string.count(substring)"},{"question":"Create a function that takes in an integer ranging from 1 to 12, and returns the corresponding month name in English.","solution":"def month_name(month_number): Given an integer ranging from 1 to 12, returns the corresponding month name in English. months = [ \\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\" ] if 1 <= month_number <= 12: return months[month_number - 1] else: raise ValueError(\\"Month number must be between 1 and 12\\")"},{"question":"Create a function that takes a list of integers as an input. The function should return the maximum product of any three numbers in the list. The list can contain both positive and negative integers, and the list size can vary from 3 to 1000 elements. The function should optimize performance for large lists.","solution":"def maximum_product_of_three(nums): Returns the maximum product of any three numbers in the list. nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Create a function that takes a list of integers as input and returns a list of integers that are odd and even, separated into two lists respectively.","solution":"def separate_odd_even(numbers): Separates the input list of integers into two lists: odd and even numbers. Args: numbers (list): The list of integers to be separated. Returns: tuple: A tuple containing two lists - the first list contains odd numbers and the second list contains even numbers. odd_numbers = [num for num in numbers if num % 2 != 0] even_numbers = [num for num in numbers if num % 2 == 0] return (odd_numbers, even_numbers)"},{"question":"Create a function that reverses a string in Python and then checks if the reversed string is a palindrome. A palindrome is a string that reads the same backward as forward, e.g., \\"madam\\" or \\"racecar\\".","solution":"def is_palindrome(s): Reverses the string s and checks if it is a palindrome. Parameters: s (str): The string to be checked. Returns: bool: True if the string is a palindrome, False otherwise. reversed_s = s[::-1] return s == reversed_s"},{"question":"Create a function that takes two strings as input and returns a new string that is the result of concatenating the first string with an exclamation mark and then the second string.","solution":"def concatenate_with_exclamation(str1, str2): Concatenates the first string with an exclamation mark and then the second string. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: str: The concatenated result. return str1 + '!' + str2"},{"question":"Create a function that generates a list of prime numbers up to a given number n. The function should be efficient and should aim to have a complexity of O(n log log n), similar to the Sieve of Eratosthenes algorithm.","solution":"def generate_primes(n): Generates a list of prime numbers up to a given number n using the Sieve of Eratosthenes. if n < 2: return [] sieve = [True] * (n + 1) sieve[0], sieve[1] = False, False # 0 and 1 are not primes p = 2 while p * p <= n: if sieve[p]: for i in range(p * p, n + 1, p): sieve[i] = False p += 1 return [p for p, is_prime in enumerate(sieve) if is_prime]"},{"question":"Create a function that takes a segment of a number and returns whether it is a palindrome or not. A palindrome is a number that reads the same backward as forward.","solution":"def is_palindrome(number_segment): Returns True if the segment of a number is a palindrome, False otherwise. :param number_segment: Segmnent of a number :type number_segment: int :return: True if palindrome, False if not :rtype: bool # Convert number to a string to easily reverse and check for palindrome str_segment = str(number_segment) # Check if the original string is equal to its reverse return str_segment == str_segment[::-1]"},{"question":"Create a function that takes a string and prints out each character in the string on a new line.","solution":"def print_chars(s): Prints each character in the string s on a new line. for char in s: print(char)"},{"question":"Create a function that takes a string as an argument and return the string with reversed words. Optimization is not necessary, the code should be simple and easily understandable.","solution":"def reverse_words(string): Takes a string as an argument and returns the string with words reversed. words = string.split() reversed_words = ' '.join(reversed(words)) return reversed_words"},{"question":"Create a function that takes an integer as an input paramater and returns the binary equivalent of the integer.","solution":"def int_to_binary(n): Returns the binary equivalent of the integer n as a string. return bin(n)[2:] if n >= 0 else '-' + bin(n)[3:]"},{"question":"Create a function that takes in a word and a list of words. The function should return the most frequently occurring word in the list that is also a substring of the input word. If there are multiple words with the same highest frequency, return any one of them. If no such word exists, return \\"No such word found\\".","solution":"from collections import Counter def find_frequent_subword(word, words_list): Returns the most frequently occurring word in the list that is also a substring of the input word. If no such word exists, return \\"No such word found\\". subwords = [w for w in words_list if w in word] if not subwords: return \\"No such word found\\" frequency_count = Counter(subwords) most_frequent_word = frequency_count.most_common(1)[0][0] return most_frequent_word"},{"question":"Create a function that receives an array of integers and returns the number of elements that are greater than 10 and are prime numbers.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def count_greater_than_ten_and_prime(arr): Returns the number of elements in the array that are greater than 10 and are prime numbers. return sum(1 for x in arr if x > 10 and is_prime(x))"},{"question":"Create a function that takes a list of words and returns the word with the highest frequency. If there are multiple words with the same highest frequency, return all of them in alphabetical order.","solution":"from collections import Counter def most_frequent_words(words): Returns the word(s) with the highest frequency in the given list \`words\`. If multiple words have the same highest frequency, returns them in alphabetical order. Args: words (list): A list of words (strings). Returns: list: A list of word(s) with the highest frequency in alphabetical order. if not words: return [] # Count the frequency of each word word_counts = Counter(words) # Find the maximum frequency max_frequency = max(word_counts.values()) # Get all words with the maximum frequency most_frequent = [word for word, count in word_counts.items() if count == max_frequency] # Return the words in alphabetical order return sorted(most_frequent)"},{"question":"Create a function that takes a list and an index, and returns a new list with the element at the given index removed. If the index is out of bounds, return the original list.","solution":"def remove_element_at_index(lst, index): Returns a new list with the element at the given index removed. If the index is out of bounds, returns the original list. :param lst: List from which an element will be removed :param index: Index of the element to be removed :return: New list with the element removed, or original list if index is out of bounds if index < 0 or index >= len(lst): return lst return lst[:index] + lst[index+1:]"},{"question":"Create a function that captures the maximum value from a recordset of numeric values using Python. Here, the function should receive a single parameter 'recordset', which is a list of numerical values.","solution":"def find_maximum_value(recordset): Return the maximum value from a recordset of numeric values. :param recordset: List of numerical values :return: Maximum number in the list, or None if the list is empty if not recordset: return None return max(recordset)"},{"question":"Create a function that determines if a list of numbers also contains the number 1.","solution":"def contains_one(numbers): Checks if the list contains the number 1. return 1 in numbers"},{"question":"Create a function that accepts any number of arguments of any type. The function should return the maximum value from the arguments if the arguments are numbers. If any argument is not a number, the function should ignore that argument.","solution":"def max_numeric_value(*args): Returns the maximum numeric value from the given arguments. If an argument is not numeric, it is ignored. numeric_values = [arg for arg in args if isinstance(arg, (int, float))] if not numeric_values: return None return max(numeric_values)"},{"question":"Create a function that takes two strings as arguments and returns a new string that is the result of swapping the case of all characters in the second string, leaving the first string unchanged.","solution":"def swap_case(s1, s2): Returns a new string with the case of all characters in the second string swapped. The first string is left unchanged. return s2.swapcase()"},{"question":"Create a function that takes in a list of integers and returns the largest integer in the list. If the list is empty, return None.","solution":"def find_largest_integer(numbers): Returns the largest integer in the list. If the list is empty, returns None. :param numbers: List of integers :return: The largest integer in the list or None if the list is empty if not numbers: return None return max(numbers)"},{"question":"Create a function that will output the largest number of consecutive ones in a binary string. For example, for the string \\"11011101111\\", the function should return 4, since there are four consecutive ones.","solution":"def max_consecutive_ones(binary_string): Returns the largest number of consecutive ones in a binary string. Parameters: binary_string (str): A string containing binary digits (0s and 1s). Returns: int: The maximum number of consecutive 1s in the binary string. max_count = 0 current_count = 0 for char in binary_string: if char == '1': current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 return max_count"},{"question":"Create a function that takes an array of integers and returns the sum of all unique elements in the array. By \\"unique\\" we mean elements that appear only once in the array. For example, given the array [1, 2, 2, 3, 4, 4, 5], the function should return 9 (1 + 3 + 5).","solution":"def sum_of_unique_elements(arr): Returns the sum of all unique elements in the array. element_count = {} for element in arr: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 unique_sum = sum(key for key, value in element_count.items() if value == 1) return unique_sum"},{"question":"Create a function that generates a Fibonacci sequence for a given number. The function should return a list of Fibonacci numbers up to and including that number.","solution":"def fibonacci_sequence(n): Generates a list of Fibonacci numbers up to and including \`n\`. :param n: The upper limit of the Fibonacci sequence to generate. :return: A list of Fibonacci numbers up to and including \`n\`. if n < 0: return [] fib_seq = [0, 1] if n == 0: return [0] elif n == 1: return [0, 1] while True: next_fib = fib_seq[-1] + fib_seq[-2] if next_fib > n: break fib_seq.append(next_fib) return fib_seq"},{"question":"Create a function that takes an array of integers and returns the sum of the first and the last elements in the array. If the array is empty, return 0 instead of erroring out.","solution":"def sum_first_and_last(arr): Returns the sum of the first and the last elements of the array. If the array is empty, returns 0. if not arr: return 0 return arr[0] + arr[-1]"},{"question":"Create a function that computes the area of a rectangle given its length and width. How would you write such a function in Python?","solution":"def area_of_rectangle(length, width): Computes the area of a rectangle given its length and width. Parameters: length (float): The length of the rectangle. width (float): The width of the rectangle. Returns: float: The area of the rectangle. return length * width"},{"question":"Create a function that takes a list of integers as its argument and returns a new list that contains only the even numbers from the original list. The function should be named \`extract_even_numbers\` and should not use any built-in functions or libraries except for basic list operations.","solution":"def extract_even_numbers(numbers): Returns a list of only the even numbers from the original list. even_numbers = [] for number in numbers: if number % 2 == 0: even_numbers.append(number) return even_numbers"},{"question":"Create a function that calculates the n-th Fibonacci number using memoization.","solution":"def fibonacci(n, memo={}): Returns the n-th Fibonacci number using memoization. if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Create a function that calculates the sum of all the numerical values in a nested list without using any loops or list comprehensions. This function should ideally utilize Python's built-in functions or libraries where possible.","solution":"import functools def nested_sum(nested_list): Recursively computes the sum of all numeric values in a nested list. def sum_elements(elements): if isinstance(elements, list): return functools.reduce(lambda acc, elem: acc + sum_elements(elem), elements, 0) elif isinstance(elements, (int, float)): return elements else: return 0 return sum_elements(nested_list)"},{"question":"Create a function that takes an integer input, let's call it n, and returns the nth Fibonacci number. I need this function to be efficient and suitable for large inputs of n, as performance is a concern. Can you also provide some theoretical explanation as to why the solution you propose works?","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach for efficiency. This approach ensures O(n) time complexity and O(1) space complexity. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(3, n + 1): a, b = b, a + b return b"},{"question":"Create a function that takes a list of integers and return the largest sum of any continuous subarray within the list.","solution":"def max_subarray_sum(nums): Returns the largest sum of any continuous subarray within the list nums. if not nums: # if the list is empty return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes two lists of integers as input and returns the list that has the maximum sum of its elements. If both lists have the same sum, return the first list.","solution":"def list_with_max_sum(list1, list2): This function takes two lists of integers as input and returns the list which has the maximum sum of its elements. If both lists have the same sum, it returns the first list. sum1 = sum(list1) sum2 = sum(list2) if sum1 >= sum2: return list1 else: return list2"},{"question":"Create a function that takes in a sorted array of integers and returns a new array containing only the unique elements from the original array. The function should have a time complexity of O(n) and a space complexity of O(n).","solution":"def unique_elements(arr): Returns a new array containing only the unique elements from the input sorted array. :param arr: List[int] - a sorted array of integers :return: List[int] - a new array with unique elements if not arr: return [] unique_arr = [arr[0]] for i in range(1, len(arr)): if arr[i] != arr[i - 1]: unique_arr.append(arr[i]) return unique_arr"},{"question":"Create a function that displays the frequency of each word in a given string, and ignore case (i.e., 'Hello' and 'hello' should be considered the same word). Consider punctuation as part of the word ('word,' and 'word' should be counted as distinct).","solution":"def word_frequency(text): Returns a dictionary with the frequency of each word in the given string. The function ignores the case and considers punctuation as part of the word. words = text.lower().split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Create a function that takes a string and converts it to Pig Latin. Pig Latin is a made-up language game where the first consonant sound of each word is moved to the end of the word and \\"ay\\" is added to the end. If a word starts with a vowel, \\"way\\" is added to the end instead.","solution":"def to_pig_latin(word): Converts a word to Pig Latin. vowels = 'aeiouAEIOU' if word[0] in vowels: return word + 'way' else: for i, char in enumerate(word): if char in vowels: return word[i:] + word[:i] + 'ay' return word + 'ay' # If no vowels found"},{"question":"Create a function that takes an integer array of length N as an input and returns the minimum number of deletions needed to ensure all elements in the array are of the same parity (either all even or all odd). You are allowed to delete zero or more elements from the array.","solution":"def min_deletions_to_same_parity(arr): Returns the minimum number of deletions needed to ensure all elements in the array are of the same parity (all even or all odd). if not arr: return 0 even_count = sum(1 for x in arr if x % 2 == 0) odd_count = len(arr) - even_count return min(even_count, odd_count)"},{"question":"Create a function that prints the first \`n\` odd numbers.","solution":"def print_odd_numbers(n): Prints the first n odd numbers. odd_numbers = [] for i in range(n): odd_number = 2 * i + 1 odd_numbers.append(odd_number) print(odd_number) return odd_numbers"},{"question":"Create a function that returns a message from given CodeLlama, CodeGuanzi, and CodeLouis in the alphabet order. Their current order is \`CodeLlama\`, \`CodeGuanzi\`, \`CodeLouis\`. You need to sort them alphabetically and return the result.","solution":"def get_ordered_codes(): Returns a message from given CodeLlama, CodeGuanzi, and CodeLouis in alphabetical order. codes = [\\"CodeLlama\\", \\"CodeGuanzi\\", \\"CodeLouis\\"] codes.sort() return \\" \\".join(codes)"},{"question":"Create a function that takes a list of integers and returns a new list where each element is the product of all the elements in the input list except the element at the same index. You should not use division, and the solution should have a time complexity of O(n).","solution":"def product_except_self(nums): Returns a new list where each element is the product of all the elements in the input list except the element at the same index. This solution does not use division and has a time complexity of O(n). :param nums: List of integers :return: List of integers n = len(nums) if n == 0: return [] output = [1] * n # Compute the prefix product for each element prefix = 1 for i in range(n): output[i] = prefix prefix *= nums[i] # Compute the suffix product for each element and multiply it with the prefix product suffix = 1 for i in range(n-1, -1, -1): output[i] *= suffix suffix *= nums[i] return output"},{"question":"Create a function that takes any array of integers (including negative and positives) and returns the product of all the numbers. Remember to handle both the empty and non-empty arrays.","solution":"def product_of_array(numbers): Returns the product of all numbers in the array. if not numbers: return 1 product = 1 for num in numbers: product *= num return product"},{"question":"Create a function that takes a list of integers as input and returns the count of integers that are multiples of both 2 and 3.","solution":"def count_multiples_of_2_and_3(numbers): Returns the count of integers that are multiples of both 2 and 3. Args: numbers (list of int): List of integers. Returns: int: Count of integers that are multiples of both 2 and 3. return sum(1 for number in numbers if number % 6 == 0)"},{"question":"Create a function that returns an array of size n filled with numbers from 1 to n inclusive, in ascending order. The function should accept an integer n as a parameter.","solution":"def create_array(n): Returns an array of size n filled with numbers from 1 to n inclusive, in ascending order. if n < 1: return [] return list(range(1, n + 1))"},{"question":"Create a function that generates a random string of a specific length but with an even number of characters. The function should accept an integer argument that specifies the length of the string. If the provided number is odd, the function should raise a ValueError.","solution":"import random import string def generate_even_length_string(length): Generates a random string of a specific length but with an even number of characters. Raises ValueError if the length is odd. Parameters: length (int): The length of the string to generate. Returns: str: Random string with the specified length. if length % 2 != 0: raise ValueError(\\"Length must be an even number.\\") letters = string.ascii_letters + string.digits return ''.join(random.choice(letters) for i in range(length))"},{"question":"Create a function that can reverse a given string and return the reversed string. The function should also handle cases where the string is empty or contains spaces.","solution":"def reverse_string(s): Returns the reversed string of the input s. Handles empty strings and strings with spaces. return s[::-1]"},{"question":"Create a function that prints out every even number from 0 to num (inclusive), where \`num\` is a positive integer input by the user. The function should also include error handling for non-integer inputs and numbers less than 0.","solution":"def print_even_numbers(num): Prints out every even number from 0 to num (inclusive). Handles non-integer and negative inputs with appropriate messages. if not isinstance(num, int): print(\\"Error: Input must be an integer.\\") return if num < 0: print(\\"Error: Input must be a non-negative integer.\\") return for i in range(0, num + 1, 2): print(i)"},{"question":"Create a function that takes in an array of integers and returns the sum of all the prime numbers in the array. Prime numbers are numbers greater than 1 that have no divisors other than 1 and themselves.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def sum_of_primes(arr): Returns the sum of all prime numbers in the input array. return sum(x for x in arr if is_prime(x))"}]`),P={name:"App",components:{PoemCard:F},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},N={class:"search-container"},z={class:"card-container"},E={key:0,class:"empty-state"},j=["disabled"],L={key:0},S={key:1};function V(i,e,u,d,s,a){const m=p("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",N,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[_,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",z,[(n(!0),r(v,null,w(a.displayedPoems,(o,g)=>(n(),y(m,{key:g,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",E,' No results found for "'+h(s.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),r("span",S,"Loading...")):(n(),r("span",L,"See more"))],8,j)):l("",!0)])}const D=c(P,[["render",V],["__scopeId","data-v-b5a4dbf6"]]),Y=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/53.md","filePath":"deepseek/53.md"}'),H={name:"deepseek/53.md"},B=Object.assign(H,{setup(i){return(e,u)=>(n(),r("div",null,[q(D)]))}});export{Y as __pageData,B as default};
