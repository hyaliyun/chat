import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(r,e,h,m,s,a){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const Y=d(k,[["render",O],["__scopeId","data-v-f3fe3599"]]),A=JSON.parse('[{"question":"A company is developing a playlist generation software that creates playlists for users based on their preferences. The software needs to ensure that the songs are arranged in a way that matches the user\'s most and least favorite genres. Given the list of songs and their genres, the software should generate a playlist in such a way that the first song belongs to the user\'s most favorite genre, the second song belongs to the user\'s next favorite genre, and so on. After the least favorite genre, the cycle should repeat, starting again from the most favorite genre. Write a function that takes two lists as input: - A list of tuples where each tuple contains a song name and its genre. - A list of genres ordered from most to least favorite. The function should return a list of song names arranged in the specified order. # Input - A list of tuples \\"songs\\" where each tuple contains: - a string representing the song name (unique for simplicity), - a string representing the genre of the song. - A list of strings \\"genres\\" representing the ordered list of the user\'s preferred genres. # Output - A list of strings representing the song names arranged according to the user\'s preference cycle. # Example ```python songs = [(\\"songA\\", \\"pop\\"), (\\"songB\\", \\"rock\\"), (\\"songC\\", \\"jazz\\"), (\\"songD\\", \\"pop\\"), (\\"songE\\", \\"rock\\"), (\\"songF\\", \\"jazz\\")] genres = [\\"pop\\", \\"rock\\", \\"jazz\\"] # Most favorite to least favorite: pop -> rock -> jazz # The returned playlist should arrange the songs as follows: # First cycle: \\"songA\\" (pop), \\"songB\\" (rock), \\"songC\\" (jazz) # Second cycle: \\"songD\\" (pop), \\"songE\\" (rock), \\"songF\\" (jazz) # Output: [\\"songA\\", \\"songB\\", \\"songC\\", \\"songD\\", \\"songE\\", \\"songF\\"] ``` # Constraints - There will always be at least one song and one genre. - Each genre mentioned in the genres list will be present in the songs list. - If there are multiple songs with the same genre, their order in the output can be based on their order in the input. Implement this function in Python: ```python def arrange_playlist(songs, genres): # Your implementation here ``` # Notes - Focus on arrays/list handling and iteration. - Ensure your solution has a feasible time complexity.","solution":"def arrange_playlist(songs, genres): Arrange songs based on user preferred genre cycle. Parameters: songs (list of tuples): List of tuples where each tuple contains a song name and its genre. genres (list of strings): List of genres ordered from most to least favorite. Returns: list of strings: List of song names arranged according to user\'s preference cycle. from collections import defaultdict genre_map = defaultdict(list) # Group songs by genre for song, genre in songs: genre_map[genre].append(song) playlist = [] genre_len = len(genres) i = 0 # Keeps track of current genre index while sum(len(genre_map[genre]) for genre in genres) > 0: current_genre = genres[i % genre_len] if genre_map[current_genre]: playlist.append(genre_map[current_genre].pop(0)) i += 1 return playlist"},{"question":"Sarah is organizing a fun treasure hunt in a park represented by a 2D grid of cells. Each cell in the grid can either be passable (\'.\') or impassable (\'#\'). Sarah needs to place treasure boxes in such a way that participants can reach all treasures from any starting passable cell without stepping into an impassable cell. The park has n rows and m columns. Sarah can place at most k treasure boxes in the park. She wants to ensure that from every passable cell, participants can reach at least one treasure box through passable cells only, but she also wants to minimize the total number of treasure boxes used. Help Sarah determine the minimal number of treasure boxes needed. The first line of input contains three space-separated integers n, m, and k (2 ≤ n, m ≤ 1000; 1 ≤ k ≤ 10^6). Each of the next n lines contains m characters (either \'.\' or \'#\') describing the park layout. The output should be a single integer representing the minimal number of treasure boxes required, or -1 if it\'s impossible to ensure that participants can reach a treasure box from every passable cell. **Example:** ``` Input: 5 5 10 ..... .#... .#.#. .#.#. ..... Output: 1 Input: 3 3 1 .#. # .#. Output: -1 Explanation: In the first example, Sarah can place one treasure box anywhere in the park because all passable cells are connected. In the second example, it\'s impossible to ensure that participants can reach a treasure box from every passable cell because the cells are disconnected. ```","solution":"def minimal_treasure_boxes(n, m, k, park): Returns the minimal number of treasure boxes needed to ensure that participants can reach at least one box from any passable cell. from collections import deque def bfs(start, visited): q = deque([start]) visited[start[0]][start[1]] = True while q: x, y = q.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and park[nx][ny] == \'.\': visited[nx][ny] = True q.append((nx, ny)) def count_components(): visited = [[False] * m for _ in range(n)] components = 0 for i in range(n): for j in range(m): if park[i][j] == \'.\' and not visited[i][j]: bfs((i, j), visited) components += 1 return components components = count_components() if components > k: return -1 return components"},{"question":"You are given an array of integers. Initially, all the elements in the array are zero. In one move, you can choose any subarray (a contiguous segment of the array) and increment each element of this subarray by one. For example, consider the array of length 5: [0, 0, 0, 0, 0]. In one move, you can increment a subarray like [0, 0, 0] or [0, 0, 0, 0, 0] (the entire array). Your task is to determine the minimum number of moves required to transform the array into one that contains the integers from 1 to n (inclusive) in some order. More formally, you need to fill the array such that it contains each integer from 1 to n exactly once at the end. The first line of input contains an integer t (1 le t le 1000) — the number of test cases. Then the t test cases follow. Each test case consists of a single integer n (1 le n le 100) — the length of the array and the highest integer that must be present in the array. For each test case, print the minimum number of moves required to achieve the desired transformation. # Example Input: ``` 3 1 2 3 ``` # Example Output: ``` 1 2 2 ``` # Explanation: - For the first test case, the array initially is [0]. In one move, you can increment it to [1]. - For the second test case, the steps could be: [0, 0] -> [1, 1] -> [1, 2]. - For the third test case, the steps could be: [0, 0, 0] -> [1, 1, 1] -> [1, 2, 2] -> [1, 2, 3].","solution":"def min_moves(t, cases): def moves_to_fill(n): # If n is odd, we need (n + 1) // 2 moves # If n is even, we need n // 2 moves return (n + 1) // 2 results = [] for n in cases: results.append(moves_to_fill(n)) return results"},{"question":"Clarissa needs to decorate her new house with some LED lights, but she wants to turn on only specific segments of the lights to reflect her artistic patterns. She has a string of LED lights represented as a binary string consisting of \'0\'s and \'1\'s, where \'1\' means the light is on, and \'0\' means the light is off. Given a binary string of length N (1 leq N leq 10^5), Clarissa wants to know the minimum number of flips needed to turn every segment of consecutive \'1\'s into a segment of consecutive \'0\'s. A flip is defined as changing a \'0\' to \'1\' or a \'1\' to \'0\'. For example, consider the binary string \\"1100101\\". By flipping the first three \'1\'s to \'0\'s, we get \\"0000101\\". Then, by flipping the last \'1\', we get \\"0000000\\". Hence, it took two flips to turn all \'1\'s to \'0\'s. # Input: - A single line containing a binary string of length N. # Output: - A single integer representing the minimum number of flips needed to turn every segment of consecutive \'1\'s into \'0\'s. # Examples: Example 1: # Input: `1100101` # Output: `3` # Explanation: Three flips are needed: \\"1100101\\" -> \\"0000101\\" -> \\"0000000\\". Example 2: # Input: `11111` # Output: `1` # Explanation: One flip is needed: \\"11111\\" -> \\"00000\\". Example 3: # Input: `101010` # Output: `3` # Explanation: Three flips are needed: \\"101010\\" -> \\"000010\\" -> \\"000000\\".","solution":"def min_flips(binary_string): Returns the minimum number of flips needed to turn every segment of consecutive \'1\'s into \'0\'s. one_segments = 0 in_segment = False for char in binary_string: if char == \'1\': if not in_segment: one_segments += 1 in_segment = True else: in_segment = False return one_segments"},{"question":"You are given a string s consisting of only lowercase English letters and operations of two types: 1. Insert a lowercase English letter at any position in the string. 2. Delete any character from the string. You need to determine if it is possible to transform the string s into a palindrome by performing at most k operations. The first line of input contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains the string s (1 le |s| le 100). The second line contains a single integer k (0 le k le 100) — the maximum number of operations allowed to turn the string into a palindrome. For each test case, print YES (without quotes) if it is possible to transform the string into a palindrome with at most k operations, and NO otherwise. You may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).","solution":"def can_be_palindrome(s, k): Determines if the string `s` can be transformed into a palindrome with at most `k` operations (insertions or deletions). def min_operations_to_palindrome(s): Returns the minimum number of operations required to make the string `s` a palindrome by using only deletions. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1] min_ops = min_operations_to_palindrome(s) return min_ops <= k def transform_to_palindrome(t, test_cases): Processes multiple test cases and determines if each string can be transformed into a palindrome with at most `k` operations. results = [] for i in range(t): s = test_cases[i][0] k = test_cases[i][1] if can_be_palindrome(s, k): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"There is a science research group with m scientists. Each scientist has contributed to a number of research projects. The organization needs to know how many unique projects have been conducted. Each project may have multiple scientists and multiple projects can share some scientists as well. The first line contains an integer m (1 ≤ m ≤ 1000) — the number of scientists in the group. Each of the following m lines describes the projects that each scientist has participated in. A line for a scientist starts with an integer pi (0 ≤ pi ≤ 100) — the number of projects the scientist has contributed to. Then there follow pi integers — the unique identifiers of the projects (1 ≤ project_id ≤ 10000). Output a single integer which is the number of unique projects conducted by the research group. Example Input: 4 2 101 102 3 102 103 104 0 1 105 Output: 5","solution":"def count_unique_projects(m, projects): unique_projects = set() for project_list in projects: unique_projects.update(project_list) return len(unique_projects)"},{"question":"You are managing a network of servers and need to ensure they are able to handle incoming requests efficiently. Each server has a specific capacity representing the maximum number of requests it can process in one unit of time. Given a list of server capacities and the number of incoming requests, determine if it is possible to distribute the requests across the servers such that no server is overloaded. The first line contains an integer n (1 ≤ n ≤ 1000), representing the number of servers. The second line contains n space-separated integers c1, c2, ..., cn (1 ≤ ci ≤ 10000), where ci denotes the capacity of the i-th server. The third line contains an integer r (1 ≤ r ≤ 100000), representing the number of incoming requests. If it is possible to distribute the requests without exceeding any server\'s capacity, output Yes. Otherwise, output No. # Example Input ``` 3 10 20 30 50 ``` Output ``` Yes ``` Input ``` 3 10 20 30 70 ``` Output ``` No ```","solution":"def can_distribute_requests(n, capacities, r): Determines if it is possible to distribute r requests across n servers with given capacities without exceeding any server\'s capacity. :param n: Number of servers (int) :param capacities: List of server capacities (list of int) :param r: Number of incoming requests (int) :return: \\"Yes\\" if possible to distribute requests, \\"No\\" otherwise total_capacity = sum(capacities) if r <= total_capacity: return \\"Yes\\" else: return \\"No\\" # Example usage n = 3 capacities = [10, 20, 30] r = 50 result = can_distribute_requests(n, capacities, r) print(result) # Output: Yes"},{"question":"You are given an array of integers, and your task is to find the maximum sum of a contiguous subarray with at least one element. Write a function that takes an array of integers as an input and returns an integer representing the maximum sum. The input will consist of: - An integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array. - An array of `n` integers `a[i]` (−10^4 ≤ a[i] ≤ 10^4) — the elements of the array. You must implement the function `max_subarray_sum(a: List[int]) -> int` which receives the array as the parameter and returns an integer representing the maximum sum of a contiguous subarray. # Example ``` Input: 5 1 -2 3 4 -5 Output: 7 ``` # Note In the first example, the maximum sum of a contiguous subarray is obtained by summing the subarray [3, 4], which equals 7. In the second example below: ``` Input: 4 -1 -2 -3 -4 Output: -1 ``` The maximum sum of a contiguous subarray would be a single element, as any subarray containing more elements would have a smaller sum. Hence, the answer is -1.","solution":"from typing import List def max_subarray_sum(a: List[int]) -> int: Finds the maximum sum of a contiguous subarray with at least one element. Parameters: a (List[int]): A list of integers representing the array elements. Returns: int: The maximum sum of a contiguous subarray. if not a: return 0 max_sum = a[0] current_sum = a[0] for num in a[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an array of integers, write a function to find the smallest positive integer that cannot be represented as the sum of any subset of the array. The array will be non-empty and contain only positive integers. The function should return this smallest missing positive integer. # Example: Input: [1, 2, 5, 10, 20, 40] Output: 4 Explanation: We can form 1, 2, 3 (1+2), 5, 6 (1+5), 7 (2+5), 8 (1+2+5), 10, etc. but cannot form 4 with any subset. Input: [1, 3, 6, 10, 11, 15] Output: 2 Explanation: The numbers we can form begin with 1, 3, 4 (1+3), 6, 7 (6+1), 8 (7+1), etc., but the smallest missing sum we cannot form is 2. Input: [1, 1, 1, 1] Output: 5 Explanation: We can form 1, 2 (1+1), 3 (1+1+1), 4 (1+1+1+1), but the smallest sum we cannot form is 5. **Function Signature:** ```python def smallest_missing_positive(arr: List[int]) -> int: pass ``` # Constraints: - The array length will be between 1 and 1000. - The array elements will be between 1 and 1000.","solution":"from typing import List def smallest_missing_positive(arr: List[int]) -> int: arr.sort() smallest_missing = 1 # Start with the smallest positive integer for num in arr: if num > smallest_missing: break smallest_missing += num return smallest_missing"},{"question":"Given an integer `n`, you need to compute the number of trailing zeros in the factorial of `n` (i.e., in the number `n!`). Trailing zeros are the zeros that appear at the end of the number. For example: ``` 5! = 120, which has one trailing zero. 10! = 3628800, which has two trailing zeros. ``` # Input: - A single integer `n` (0 ≤ n ≤ 10^9). # Output: - A single integer denoting the number of trailing zeros in the factorial of `n`. # Hint: To find the number of trailing zeros in `n!`, we need to count the number of times `5` is a factor in the numbers from 1 to `n`. This is because the number of `2`s as factors will always be more than the number of `5`s. For example: ``` Input: 5 Output: 1 Input: 10 Output: 2 ``` In the first example, `5!` is `120` which has one trailing zero. In the second example, `10!` is `3628800` which has two trailing zeros.","solution":"def trailing_zeros_in_factorial(n): Computes the number of trailing zeros in the factorial of n. Parameters: - n: integer, the value to compute the factorial trailing zeros of. Returns: - an integer representing the number of trailing zeros in n! count = 0 power_of_5 = 5 while n >= power_of_5: count += n // power_of_5 power_of_5 *= 5 return count"},{"question":"Vanya the gardener has a rectangular garden of length R and width C, divided into 1x1 tiles. Each tile can either have grass or a flower. Flowers must be separated by at least one grass tile in every direction (up, down, left, right, and diagonally). Vanya needs your help to determine how many flowers she can plant in the garden such that every flower has the required amount of separation from other flowers. The garden is represented by R lines of C characters each, where \'.\' indicates a grass tile and \'*\' indicates a flower tile. Initially, all tiles will be grass (\'.\') and you need to place as many flowers as possible according to the rule. Output a single integer, which is the maximum number of flowers that can be planted in the garden. # Input - The first line contains two integers R (1 ≤ R ≤ 50) and C (1 ≤ C ≤ 50) – the number of rows and columns in the garden. # Output - Print a single integer, the maximum number of flowers that can be planted in the garden. # Example Input 3 3 Output 1 Explanation Given a 3x3 garden, the maximum number of flowers that can be planted is 1, following the rule that flowers must be at least one tile apart in every direction. # Note In a 3x3 garden, you cannot place more than one flower, because any additional flower would violate the separation rule.","solution":"def max_flowers(R, C): Given dimensions R (rows) and C (columns) of the garden, return the maximum number of flowers that can be planted such that each flower is at least one tile apart from any other flower in every direction. # Initialize the count of flowers that can be planted flower_count = 0 # Iterate through each cell in the grid with a step of 3 to maintain distances for r in range(0, R, 3): for c in range(0, C, 3): flower_count += 1 return flower_count"},{"question":"You are given a string `s` consisting of lowercase English letters and a string `t` consisting of lowercase English letters. Your task is to determine if string `t` can be transformed into string `s` by deleting some characters (possibly zero) in the string `t` without reordering the remaining characters. Input - The first line contains a single integer `q` (1 ≤ q ≤ 100) — the number of queries. - Each of the next `q` lines contains two strings `s` and `t` (1 ≤ |s|, |t| ≤ 100). Output - For each query, output \\"YES\\" if it is possible to transform `t` into `s` by deleting some characters, and \\"NO\\" otherwise. Example Input: ``` 3 abc acdefbghc hello hero abcd xyzabc Output: YES YES NO ``` Explanation For the first query, you can delete \'d\', \'e\', \'f\', \'g\', \'h\' from `t` to get `s`. For the second query, you can delete \'e\', \'r\' from `t` to get `s`. For the third query, there is no way to delete characters from `t` to get `s` as \'xyz\' is not present.","solution":"def can_transform(s, t): Check if string `t` can be transformed into string `s` by deleting some characters without reordering. it = iter(t) return all(char in it for char in s) def process_queries(queries): Process a list of queries where each query is a tuple (s, t). Returns a list of \\"YES\\" or \\"NO\\" for each query. results = [] for s, t in queries: if can_transform(s, t): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Polycarp has taken up a new hobby of gardening in his backyard. He has n plants arranged in a line, and each day he tends to exactly one of these plants. Each plant has a specific watering requirement, indicating the minimum number of days it needs to be watered consecutively. However, Polycarp can water a plant more than required; he simply needs to ensure that each plant gets its minimum required watering. Polycarp can\'t water more than one plant on the same day. You are given an array of n integers, where each element represents the minimum consecutive watering days required by each plant. Your task is to help Polycarp come up with a valid watering schedule that satisfies all the plants\' requirements. Write a program that finds a valid sequence of n integers where each integer represents the index of the plant he will water on that particular day. The first line of input contains an integer n (1 ≤ n ≤ 1000), the number of plants. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ n), where pi is the minimum number of consecutive days the i-th plant needs to be watered. Output n integers representing a valid watering schedule, where the i-th integer represents the index of the plant to be watered on the i-th day. If there are multiple valid schedules, print any of them. Example: Input: 5 1 2 3 1 1 Output: 1 2 2 3 3 In this example, plant 1 needs to be watered for at least 1 day, plant 2 needs to be watered for at least 2 consecutive days, plant 3 needs to be watered for at least 3 consecutive days, and plants 4 and 5 each need to be watered for at least 1 day.","solution":"def find_watering_schedule(n, plants): Returns a valid watering schedule for Polycarp\'s plants. Parameters: n (int): Number of plants plants (list): List of integers representing the minimum consecutive watering days for each plant Returns: list: List of integers representing the indexes of plants watered each day schedule = [] for i in range(n): plant_index = -1 for j in range(n): if plants[j] > 0: plant_index = j plants[j] -= 1 break schedule.append(plant_index + 1) return schedule"},{"question":"Sam is a data scientist working on a new algorithm for predictive analytics. For one of his tasks, Sam needs to analyze the differences in the numerical data points he collects. He decides to calculate the minimum absolute difference between any two elements in a given sequence. Sam is provided with a sequence B consisting of M integers. He needs to calculate the smallest absolute difference between any two distinct elements in the sequence. The first line of the input contains a single integer M (2 ≤ M ≤ 100,000) – the number of elements in B. The second line contains M space-separated integers that make up the sequence B. Each integer is from the interval [1, 1,000,000,000]. Output the minimum absolute difference between any two distinct elements in B. For example, if the input sequence is (1, 5, 3, 19, 18), the smallest absolute difference is 1 (between 19 and 18).","solution":"def min_absolute_difference(M, B): Returns the minimum absolute difference between any two distinct elements in the sequence B. Parameters: M (int): The number of elements in sequence B. B (list): A list of integers representing the sequence. Returns: int: The minimum absolute difference between any two distinct elements. # Sort the sequence B.sort() # Initialize the minimum difference with a large value min_diff = float(\'inf\') # Iterate through the sorted sequence to find the minimum difference between adjacent elements for i in range(M - 1): min_diff = min(min_diff, B[i + 1] - B[i]) return min_diff"},{"question":"You are given an array of integers a consisting of n elements. A subarray [l, r] is defined as a contiguous segment of the array a from index l to index r, inclusive. The sum of a subarray is the sum of all the elements within that subarray. Your task is to determine the maximum possible sum of any subarray of a, ensuring that the sum is strictly positive. The first line contains an integer n (1 ≤ n ≤ 100000) — the number of elements in array a. The second line contains n integers a1, a2, ..., an representing the array a. If there is no subarray with a positive sum, print 0. Otherwise, print the maximum possible subarray sum that is strictly positive. In the first example, the maximum sum is 6, achieved by the subarray [1, 3] with elements [4, -1, 3]. In the second example, there is no subarray with a sum greater than 0, so the output is 0.","solution":"def max_positive_subarray_sum(n, a): Returns the maximum possible subarray sum that is strictly positive. If no such subarray exists, returns 0. max_sum = 0 current_sum = 0 for num in a: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum"},{"question":"Design an API integration for a weather application that retrieves current weather information based on the user’s location. **Requirements:** - The API should fetch the current weather details including temperature, humidity, wind speed, and a brief description of weather conditions (e.g., sunny, rainy). - Implement error handling for proper error messages when the API call fails (e.g., network errors, invalid location). - Users should have the option to refresh the weather data to get the latest information. - Ensure the application can handle both metric (Celsius) and imperial (Fahrenheit) units for temperature. - Your solution should demonstrate understanding of asynchronous API calls and JSON parsing. Provide a brief documentation that outlines: 1. The API endpoint used and any required parameters. 2. An overview of the application architecture. 3. Examples of how error scenarios are managed in your application. Keep the application light and efficient, optimizing for responsiveness and user experience.","solution":"import aiohttp import asyncio class WeatherAPI: API_ENDPOINT = \\"https://api.openweathermap.org/data/2.5/weather\\" API_KEY = \\"your_api_key_here\\" # Replace with your actual OpenWeatherMap API key def __init__(self, location, unit=\'metric\'): self.location = location self.unit = unit self.weather_data = None async def fetch_weather_data(self): params = { \'q\': self.location, \'appid\': WeatherAPI.API_KEY, \'units\': self.unit } async with aiohttp.ClientSession() as session: try: async with session.get(WeatherAPI.API_ENDPOINT, params=params) as response: if response.status == 200: self.weather_data = await response.json() else: self.weather_data = None raise Exception(f\\"Error fetching data: {response.status} - {response.reason}\\") except aiohttp.ClientError as e: raise Exception(f\\"Network error: {e}\\") def get_weather_info(self): if not self.weather_data: raise Exception(\\"No weather data available, please fetch the weather data first.\\") return { \'temperature\': self.weather_data[\'main\'][\'temp\'], \'humidity\': self.weather_data[\'main\'][\'humidity\'], \'wind_speed\': self.weather_data[\'wind\'][\'speed\'], \'description\': self.weather_data[\'weather\'][0][\'description\'] } async def refresh_weather_data(self): await self.fetch_weather_data() # Example usage: # weather_api = WeatherAPI(\'New York\', unit=\'imperial\') # asyncio.run(weather_api.refresh_weather_data()) # weather_info = weather_api.get_weather_info() # print(weather_info)"},{"question":"You have a rectangular grid with dimensions n rows and m columns. Some cells in this grid contain a tree while others do not. Trees block movement, making it impossible to traverse through such cells. Your task is to determine the shortest path from the top-left corner to the bottom-right corner of the grid, moving only up, down, left, or right. If no such path exists, return -1. # Input The first line of the input contains two integers n and m (1 le n, m le 1000) — the number of rows and columns of the grid. The next n lines each contain m integers (each either 0 or 1). A 0 represents an empty cell, while a 1 represents a cell containing a tree. # Output Output a single integer — the length of the shortest path from the top-left corner to the bottom-right corner of the grid. If there is no such path, output -1. # Example Input ``` 3 3 0 0 1 0 1 0 0 0 0 ``` Output ``` 5 ``` # Explanation The shortest path is through the cells (0,0) -> (0,1) -> (1,0) -> (2,0) -> (2,1) -> (2,2), resulting in a path length of 5.","solution":"from collections import deque def shortest_path(grid): n = len(grid) m = len(grid[0]) # Directions for moving right, down, left, up. directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Check if the start or end cell is blocked. if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 # BFS initialization queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() # If we reached the bottom-right corner if row == n - 1 and col == m - 1: return dist # Explore all 4 possible directions for d_row, d_col in directions: new_row, new_col = row + d_row, col + d_col # Check if the new position is within bounds and not visited or blocked if 0 <= new_row < n and 0 <= new_col < m and grid[new_row][new_col] == 0 and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) # If no path found return -1"},{"question":"# Problem Statement A warehouse management system needs to keep track of inventory levels for various products. Each product is identified by a string `productID`, and its quantity in stock is represented by an integer. The system receives a series of instructions in the form of commands to \\"add\\", \\"remove\\", or \\"check\\" the stock of a given product. Your task is to write a function `warehouse_manager(commands)` that processes a list of command strings and updates the inventory accordingly. - An \\"add\\" command increases the quantity of the specified product. - A \\"remove\\" command decreases the quantity of the specified product. - A \\"check\\" command returns the current quantity of the specified product. The `commands` parameter is a list of strings, where each string represents a command in the following format: - \\"add productID quantity\\": Increase the stock of `productID` by `quantity` units. - \\"remove productID quantity\\": Decrease the stock of `productID` by `quantity` units. - \\"check productID\\": Return the current stock of `productID`. Detailed behavior: 1. If a \\"remove\\" command attempts to remove more stock than available, set the stock of the product to 0. 2. If a \\"check\\" command is issued for a product that has never been added, return 0 for that product. # Input: - A list of strings `commands` (1 <= len(commands) <= 1000). - Each command will be a valid operation in the format described above. - `productID` will be a non-empty string containing only alphanumeric characters. - `quantity` will be a non-negative integer (0 <= quantity <= 1000). # Output: - The function should process each command in the order given. - For each \\"check\\" command, the function should return the current stock quantity as an integer. - The final output should be a list of integers representing the results of all \\"check\\" commands in the order they appeared in the `commands` list. # Examples: ```python commands = [ \\"add apple 10\\", \\"add banana 5\\", \\"check apple\\", # Output: 10 \\"remove apple 3\\", \\"check apple\\", # Output: 7 \\"check banana\\", # Output: 5 \\"remove banana 10\\", \\"check banana\\", # Output: 0 \\"check cherry\\" # Output: 0 ] output = [10, 7, 5, 0, 0] ``` # Requirements: - Write a `warehouse_manager` function that takes a list of commands and returns the correct list of integers for each \\"check\\" command. - Ensure the function efficiently handles up to 1000 commands.","solution":"def warehouse_manager(commands): Processes a list of command strings to manage warehouse inventory. Parameters: commands (list of str): The list of commands to process. Returns: list of int: The results of all \\"check\\" commands. inventory = {} check_results = [] for command in commands: parts = command.split() operation = parts[0] product_id = parts[1] if operation == \\"add\\": quantity = int(parts[2]) if product_id in inventory: inventory[product_id] += quantity else: inventory[product_id] = quantity elif operation == \\"remove\\": quantity = int(parts[2]) if product_id in inventory: inventory[product_id] = max(0, inventory[product_id] - quantity) elif operation == \\"check\\": check_results.append(inventory.get(product_id, 0)) return check_results"},{"question":"You are given a rectangular grid of size m x n, filled with 0\'s and 1\'s. An island is a group of 1\'s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water. The goal is to determine the number of distinct islands where an island is considered the same if and only if they are the same shape. Formally, two islands are considered to have the same shape if one island can be translated (but not rotated or reflected) to equal the other. The input starts with the dimensions of the grid, followed by the grid rows. Each row will contain m integers, either 0 or 1. Write a function to determine the number of distinct islands. Example: ``` Input: 3 3 1 1 0 1 0 0 0 0 1 Output: 2 ``` In the example above, there are two distinct islands (one of shape 2x1 and another of shape 1x1). The first line of the input contains two integers m and n (1 ≤ m, n ≤ 50). Following m lines with n integers (either 0 or 1) representing the grid itself. Output a single integer indicating the number of distinct islands.","solution":"def numDistinctIslands(grid): def dfs(x, y, origin): if not (0 <= x < m and 0 <= y < n) or grid[x][y] == 0: return grid[x][y] = 0 shape.append((x - origin[0], y - origin[1])) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: dfs(x + dx, y + dy, origin) m, n = len(grid), len(grid[0]) unique_islands = set() for i in range(m): for j in range(n): if grid[i][j] == 1: shape = [] dfs(i, j, (i, j)) unique_islands.add(tuple(shape)) return len(unique_islands) # Parsing input def parse_input(input_str): inputs = input_str.strip().split(\'n\') m, n = map(int, inputs[0].split()) grid = [list(map(int, row.split())) for row in inputs[1:]] return grid # Complete function to process the input def process_islands(input_str): grid = parse_input(input_str) return numDistinctIslands(grid)"},{"question":"This is an interactive problem. You are given a weighted undirected graph with n vertices and m edges. Each edge has a positive integer weight. Your task is to find the shortest path from a given start vertex to a target vertex, if such a path exists. More formally, the graph consists of vertices indexed from 1 to n and edges represented by triples (u, v, w), where u and v are the endpoints of the edge and w is its weight. You are given the number of vertices n, edges m, the starting vertex start, and the target vertex target. You are allowed to make up to 2000 queries of the following type: Write a program that solves the problem. The first line contains four integers n, m, start, target (1 ≤ n ≤ 1000, 1 ≤ m ≤ 5000, 1 ≤ start, target ≤ n) — the number of vertices, the number of edges, the starting vertex and the target vertex. To print the answer for the problem, print ! ans, where ans is the length of the shortest path from the start vertex to the target vertex, or -1 if there is no such path. To make a query of the type, print ? i (1 ≤ i ≤ m), where i is the index of the edge you want to know information about. After each query of type ? read three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), which represents the i-th edge of the graph. It is guaranteed that the given edges will form a connected graph and you will be able to reach all vertices from any given vertex using the edges. Note that you can\'t ask more than 1999 queries of the type ?. If you exceed the query limit or make an invalid query, you will receive a \\"Wrong Answer\\" verdict. If you ignore this, you can get other verdicts since your program will continue to read from a closed stream. Your solution will get \\"Time Limit Exceeded\\" if you don\'t print anything or forget to flush the output, including the final answer. To flush you can use (just after printing a query and line end): Hacks format For hacks, use the following format: In the first line print four integers n, m, start, target (1 ≤ n ≤ 1000, 1 ≤ m ≤ 5000, 1 ≤ start, target ≤ n). In the next m lines print the description of the edges: in the i-th line print three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000). The graph should be undirected and connected. You can read more about graphs and shortest paths by the following link: https://en.wikipedia.org/wiki/Shortest_path_problem The illustration for the first sample case would indicate all possible paths and their respective weights from the starting vertex to the target vertex.","solution":"import sys import heapq def dijkstra(n, edges, start, target): # Build graph from queried edges graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Min-heap priority queue pq = [(0, start)] # (distance, node) dist = {i: float(\'inf\') for i in range(1, n+1)} dist[start] = 0 visited = set() while pq: current_dist, u = heapq.heappop(pq) if u in visited: continue visited.add(u) if u == target: return current_dist for neighbor, weight in graph[u]: if neighbor not in visited: new_dist = current_dist + weight if new_dist < dist[neighbor]: dist[neighbor] = new_dist heapq.heappush(pq, (new_dist, neighbor)) return -1 def solve(): input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) start = int(data[2]) target = int(data[3]) edges = [] for i in range(m): print(f\\"? {i+1}\\") sys.stdout.flush() u = int(data[4 + 3*i]) v = int(data[4 + 3*i + 1]) w = int(data[4 + 3*i + 2]) edges.append((u, v, w)) ans = dijkstra(n, edges, start, target) print(f\\"! {ans}\\")"},{"question":"There are n cities in a country, connected by m bidirectional roads. Each road has a travel cost associated with it. The government wants to improve its transportation system by making sure that it is possible to travel between any two cities with minimum possible cost. To achieve this, they have decided to pave some of the roads. The cost to pave a road is equal to its existing travel cost. The government wants to spend the minimum amount of money possible to ensure that all the cities are connected, directly or indirectly, through paved roads. Your task is to determine the minimum cost required to ensure that all cities are connected. The first line of the input contains two integers n (2 le n le 100) and m (1 le m le 4950) — the number of cities and the number of roads, respectively. The next m lines each contain three integers u, v, and w (1 le u, v le n, u neq v and 1 le w le 1000), representing a road between cities u and v with travel cost w. Output one integer — the minimum cost required to ensure all cities are connected. In the first example, the optimal solution might require paving the road between city 1 and city 2 with cost 10 and the road between city 2 and city 3 with cost 15. Thus, the answer is 25. In the second example, with only one road, the minimum cost to ensure all cities are connected is simply the travel cost of that existing road.","solution":"class DSU: Disjoint Set Union data structure (Union-Find) with path compression and union by rank def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, x): if self.parent[x] != x: self.parent[x] = self.find(self.parent[x]) return self.parent[x] def union(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX != rootY: if self.rank[rootX] > self.rank[rootY]: self.parent[rootY] = rootX elif self.rank[rootX] < self.rank[rootY]: self.parent[rootX] = rootY else: self.parent[rootY] = rootX self.rank[rootX] += 1 def minimum_cost_to_connect_cities(n, m, roads): # Sort roads by their cost (edge weight) roads.sort(key=lambda x: x[2]) dsu = DSU(n) min_cost = 0 edges_used = 0 for u, v, w in roads: if dsu.find(u-1) != dsu.find(v-1): # Check if u and v are in different sets dsu.union(u-1, v-1) min_cost += w edges_used += 1 if edges_used == n - 1: break return min_cost"},{"question":"You are given a string containing only lowercase English letters. We define the beauty of a substring as the sum of the distinct characters in that substring. The goal is to find the maximum possible beauty for any substring of the given string. Given a string `s` of length `n`, find the maximum beauty of any of its substrings. The first line contains a single integer `n` (1 le n le 10^5) — the length of the string. The second line contains the string `s` of length `n` consisting of only lowercase English letters. Print a single integer — the maximum beauty of any substring. **Example:** _Input:_ ``` 7 abcabcabc ``` _Output:_ ``` 3 ``` **Explanation:** The substring \\"abc\\" has the highest beauty of 3 because it contains three distinct characters. No other substring in the given string has more than three distinct characters. In the example, the maximum number of distinct characters in any substring is 3, thus the maximum possible beauty is 3.","solution":"def max_beauty(s): Returns the maximum beauty of any substring. The beauty of a substring is defined as the number of distinct characters in it. return len(set(s))"},{"question":"# Problem Statement: Alice is a software engineer who likes to play with numbers. One day, she came up with a game involving palindromic numbers. A number is palindromic if it reads the same backwards as forwards, e.g., 121 or 1221. Alice now wants to write a program that helps her find the largest palindromic number that can be obtained as the product of two n-digit numbers. Write a function that, given an integer n, returns the largest palindromic number that is the product of two n-digit numbers. # Input: - An integer `n` (1 ≤ n ≤ 3), representing the number of digits in the factors. # Output: - A single integer, the largest palindromic number that is the product of two n-digit numbers. # Examples: # Example 1: Input: ``` 2 ``` Output: ``` 9009 ``` # Explanation: - The two-digit numbers range from 10 to 99. The largest palindromic number made by the product of two such numbers is 9009 (91 * 99). # Example 2: Input: ``` 1 ``` Output: ``` 9 ``` # Explanation: - The single-digit numbers range from 1 to 9. The largest palindromic number made by the product of two such numbers is 9 which is itself. # Constraints: - The solution should work efficiently even for the upper limit of n which is 3.","solution":"def largest_palindromic_number(n): Returns the largest palindromic number that is the product of two n-digit numbers. def is_palindrome(num): return str(num) == str(num)[::-1] max_num = 10**n - 1 min_num = 10**(n-1) largest_palindrome = 0 for i in range(max_num, min_num - 1, -1): for j in range(i, min_num - 1, -1): product = i * j if product <= largest_palindrome: break if is_palindrome(product): largest_palindrome = product return largest_palindrome"},{"question":"The input is a string of up to 100 characters. The string consists solely of uppercase letters (A-Z). Your task is to remove all vowels (A, E, I, O, U) from the string and output the resulting string. If the string becomes empty after removing the vowels, output an empty string.","solution":"def remove_vowels(input_str): Removes all vowels (A, E, I, O, U) from the given string. Args: input_str (str): The input string consisting of uppercase letters. Returns: str: The resulting string after removing all vowels. vowels = \\"AEIOU\\" return \'\'.join(char for char in input_str if char not in vowels)"},{"question":"A new company called TechCorp has a policy to promote employees based on their performance. The company\'s hierarchy is structured as a tree with the CEO being the root node. Each employee can have multiple subordinates, who in turn can have their own subordinates, and so on. Each employee is assigned a unique ID and has a performance score. The CEO has an ID of 1. Given the company\'s hierarchical structure and a list of promotion queries, determine the maximum performance score within the subtree of given employees. A subtree of employee x is defined as employee x and all employees who report directly or indirectly to employee x. # Input - The first line contains two integers, n and q (1 leq n, q leq 10^5) - the number of employees and the number of queries. - The second line contains n integers, where the ith integer represents the performance score of employee with ID i (1 leq text{score}_i leq 10^6). - The next n-1 lines each contain two integers u and v (1 leq u, v leq n) indicating that employee v reports directly to employee u. - The next q lines each contain a single integer x (1 leq x leq n), representing the employee ID for which the maximum performance score in their subtree needs to be determined. # Output For each query, print a single integer - the maximum performance score in the subtree of the given employee. # Example Input ``` 5 3 5 3 8 6 4 1 2 1 3 2 4 2 5 1 2 3 ``` Output ``` 8 6 8 ``` # Explanation - For the first query (x=1), the subtree of employee 1 includes all employees (1, 2, 3, 4, 5) with performance scores (5, 3, 8, 6, 4). The maximum score is 8. - For the second query (x=2), the subtree of employee 2 includes employees 2, 4, and 5 with performance scores (3, 6, 4). The maximum score is 6. - For the third query (x=3), the subtree of employee 3 includes only employee 3 with a performance score of 8.","solution":"def find_max_performance(n, scores, reports, queries): from collections import defaultdict, deque # Build the tree structure tree = defaultdict(list) for u, v in reports: tree[u].append(v) tree[v].append(u) # Function to perform a DFS and record the maximum performance in subtrees def dfs(node, parent): max_score = scores[node - 1] for child in tree[node]: if child != parent: max_score = max(max_score, dfs(child, node)) max_subtree[node] = max_score return max_score max_subtree = {} dfs(1, -1) # Assuming 1 is the root node (CEO) # Answer queries result = [] for query in queries: result.append(max_subtree[query]) return result"},{"question":"You are tasked with developing a software for a library that helps to manage book circulation among its members. Each book in the library can only be borrowed by one member at a time and must be returned before it can be borrowed again. For simplicity, each book is uniquely identified by an integer ID. To keep track of the books, the library uses three actions: borrow, return, and check. Your goal is to write a program to process a sequence of actions and maintain the current status of each book. 1. `borrow x`: A member borrows a book with ID `x`. If the book is currently borrowed by someone else, this action is invalid. 2. `return x`: The member returns the book with ID `x`. If the book was not borrowed, this action is invalid. 3. `check x`: Check whether the book with ID `x` is currently borrowed. If the book is borrowed, print \\"Borrowed\\", otherwise print \\"Available\\". Write a program that reads a sequence of actions and processes each action. The input starts with a single integer `n` (1 ≤ n ≤ 1000), indicating the number of actions. Each subsequent line contains one of the three actions described above. Output the result of each action that requires a response (`borrow`, `return`, or `check`). If an action is invalid, print \\"Invalid\\". # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of actions. - Each of the next `n` lines contains an action in the format described above. # Output - For each `borrow` or `return` action that is invalid, print \\"Invalid\\". - For each `check` action, print \\"Borrowed\\" if the book is borrowed, otherwise print \\"Available\\". # Example Input ``` 5 borrow 1 check 1 return 1 check 1 return 1 ``` Output ``` Borrowed Available Invalid ``` # Note - In the first action, the book with ID 1 is borrowed. - In the second action, checking the status of the book reveals it is borrowed. - In the third action, the book is returned. - In the fourth action, checking the status of the book reveals it is available. - In the fifth action, attempting to return the book again is invalid as it is already available.","solution":"class Library: def __init__(self): self.books_status = {} # Book status tracking def borrow(self, book_id): if self.books_status.get(book_id, \\"Available\\") == \\"Borrowed\\": return \\"Invalid\\" else: self.books_status[book_id] = \\"Borrowed\\" return \\"Borrowed\\" def return_book(self, book_id): if self.books_status.get(book_id, \\"Available\\") == \\"Available\\": return \\"Invalid\\" else: self.books_status[book_id] = \\"Available\\" return \\"Available\\" def check(self, book_id): if self.books_status.get(book_id, \\"Available\\") == \\"Borrowed\\": return \\"Borrowed\\" else: return \\"Available\\" def process_actions(actions): library = Library() results = [] for action in actions: command, book_id = action.split() book_id = int(book_id) if command == \\"borrow\\": results.append(library.borrow(book_id)) elif command == \\"return\\": results.append(library.return_book(book_id)) elif command == \\"check\\": results.append(library.check(book_id)) return results"},{"question":"You are tasked with developing a utility to help restaurants manage their table reservations. Each table can be reserved for a specific time period, and you need to ensure that no two reservations for the same table overlap. Write a function `canMakeReservation(reservations, newReservation)` that takes a list of existing reservations and a new reservation request. Each reservation is represented as a tuple of integers `(time_start, time_end)` where `time_start` is the starting time and `time_end` is the ending time in 24-hour format (e.g., `14` for 2 PM). Note that `time_start` is strictly less than `time_end`. The function should return `True` if the new reservation can be added without overlapping with any existing reservation for that table, and `False` otherwise. # Input - `reservations`: A list of tuples, where each tuple `(time_start, time_end)` represents an existing reservation. - `1 <= len(reservations) <= 1000` - `0 <= time_start < time_end <= 24` - `newReservation`: A tuple `(time_start, time_end)` representing a new reservation request. - `0 <= time_start < time_end <= 24` # Output Return a boolean value: - `True` if the new reservation can be made without overlapping any existing reservation. - `False` otherwise. # Example ```python reservations = [(10, 12), (14, 16), (18, 20)] newReservation = (12, 14) print(canMakeReservation(reservations, newReservation)) # should return True newReservation = (11, 13) print(canMakeReservation(reservations, newReservation)) # should return False reservations = [] newReservation = (9, 10) print(canMakeReservation(reservations, newReservation)) # should return True ``` # Notes - Ensure that your solution efficiently checks for overlaps, especially for the upper limit of reservations. - Consider edge cases where the new reservation request starts or ends exactly when another reservation ends or starts, respectively.","solution":"def canMakeReservation(reservations, newReservation): Check if a new reservation can be made without overlapping any existing reservations. new_start, new_end = newReservation for res_start, res_end in reservations: # Check if new reservation overlaps with existing reservation if not (new_end <= res_start or new_start >= res_end): return False return True"},{"question":"A company has developed a new ticketing system for a theater with the unique feature of dynamic ticket pricing. The theater has R rows, each with C seats, and each seat has an initial base price. Rows and seats are numbered starting from 1. The pricing formula of each seat is adjusted based on the demand. Given a list of reservations, you are to determine the price of a seat each time it is reserved. The reservation increases the seat\'s price by a fixed percentage of the current price. Write a program to handle a series of seat reservation requests. Each reservation should output the current price of the seat before applying the price increase. The input consists of: - Two integers R and C (1 ≤ R, C ≤ 1000) — the number of rows and the number of seats per row. - An integer P (0 ≤ P ≤ 100) — the percentage price increase for each reservation. - A matrix of R lines with C integers each, representing the initial base prices of the seats. - An integer N (1 ≤ N ≤ 10000) — the number of reservation requests. - N lines with two integers each, ri and ci (1 ≤ ri ≤ R, 1 ≤ ci ≤ C), representing the row and column number of each reservation request. Output N lines. For each reservation request, output the current price of the requested seat before increasing its price by the given percentage. Example input: 3 3 10 5 10 15 20 25 30 35 40 45 5 1 1 2 2 3 3 1 3 2 1 Example output: 5 25 45 15 20","solution":"def dynamic_ticket_pricing(R, C, P, base_prices, reservations): Returns the ticket price for each reservation request before applying the price increase. Parameters: R (int): Number of rows. C (int): Number of seats per row. P (int): Percentage price increase. base_prices (list of list of int): The initial base prices of the seats. reservations (list of tuple of int): The list of reservation requests. Returns: list of int: The prices of the seats before the price increase for each reservation request. results = [] for row, col in reservations: # Convert row and column to 0-based index row_index = row - 1 col_index = col - 1 # Current price of the seat before the increase current_price = base_prices[row_index][col_index] # Store the result for this reservation results.append(current_price) # Update the base price with the increase base_prices[row_index][col_index] = current_price * (1 + P / 100) return results"},{"question":"The central bank has decided to implement a new algorithm to detect suspicious transactions that could be indicative of money laundering. Transactions between accounts are represented as a directed graph, where each node stands for an account and each edge represents a transaction from one account to another with a certain amount of money. Your task is to write a function that identifies all accounts involved in suspicious transactions. A transaction is suspicious if an account sends or receives more than a specific threshold amount in total transactions. You\'ll be provided with a list of transactions, where each transaction is represented as [from, to, amount], and a threshold value. An account is considered suspicious if the sum of all amounts sent or received by it exceeds the threshold. # Input - An integer \'n\' (1 ≤ n ≤ 10000): the number of transactions. - A list of transactions, where each transaction is represented as [from, to, amount] (1 ≤ from, to ≤ 10000, 1 ≤ amount ≤ 10^6). - An integer \'threshold\' (1 ≤ threshold ≤ 10^9): the threshold value for detecting suspicious transactions. # Output - A list of all unique account numbers involved in suspicious transactions sorted in ascending order. # Example Input ``` number_of_transactions = 5 transactions = [ [1, 2, 1500], [2, 3, 1200], [3, 1, 800], [1, 3, 5000], [3, 4, 300] ] threshold = 2500 ``` Output ``` [1, 2, 3] ``` # Notes - In this example, accounts 1, 2, and 3 are suspicious because: - Account 1 sends 6500 (1500 + 5000) and receives 800. - Account 2 sends 1200 and receives 1500. - Account 3 sends 300 and receives 7000 (1200 + 800 + 5000). - Account 4 is not suspicious as it only receives 300. # Function Signature ```python def find_suspicious_accounts(n: int, transactions: List[List[int]], threshold: int) -> List[int]: pass ``` Implement the function `find_suspicious_accounts` to solve this problem.","solution":"from typing import List def find_suspicious_accounts(n: int, transactions: List[List[int]], threshold: int) -> List[int]: account_sums = {} for from_acc, to_acc, amount in transactions: if from_acc in account_sums: account_sums[from_acc] += amount else: account_sums[from_acc] = amount if to_acc in account_sums: account_sums[to_acc] += amount else: account_sums[to_acc] = amount suspicious_accounts = [acc for acc, total in account_sums.items() if total > threshold] return sorted(suspicious_accounts)"},{"question":"You are a given a matrix M of size n times n. Each element in the matrix is either 0 or 1. You are required to perform the following operations on the matrix: 1. Select any row or column and toggle all its elements (i.e., change all 0s to 1s and all 1s to 0s). 2. Repeat the above operation any number of times. The goal is to maximize the sum of the elements in the final matrix. The first line of the input contains a single integer n (1 leq n leq 20), representing the size of the matrix M. The next n lines each contain n integers (either 0 or 1), representing the matrix M. Output a single integer — the maximum possible sum of the elements in the matrix after performing any number of the allowed operations. # Example: Input: ``` 3 0 1 0 1 0 1 0 1 0 ``` Output: ``` 9 ``` # Explanation: You can toggle the first row to get: ``` 1 0 1 1 0 1 0 1 0 ``` Then, toggle the second row to get: ``` 1 0 1 0 1 0 0 1 0 ``` Then, toggle the third row to get: ``` 1 0 1 0 1 0 1 0 1 ``` Finally, toggle the first and second columns to get: ``` 0 1 0 1 0 1 0 1 0 ``` The sum of the elements is now 9.","solution":"def maximize_matrix_sum(n, matrix): def toggle_row(row): for col in range(n): matrix[row][col] = 1 - matrix[row][col] def toggle_col(col): for row in range(n): matrix[row][col] = 1 - matrix[row][col] # First, toggle rows to maximize the number of 1s in the first column for row in range(n): if matrix[row][0] == 0: toggle_row(row) # Then, for each column from the second one, decide if we should toggle it for col in range(1, n): ones = sum(matrix[row][col] for row in range(n)) if ones < n / 2: toggle_col(col) # Calculate and return the sum of the elements in the matrix return sum(sum(row) for row in matrix)"},{"question":"John has recently started working at a toy factory. His job is to evaluate the quality of toys produced by the factory. Each toy has an associated quality score. Given an array `quality_scores` of `n` integers, where each integer represents the quality score of a toy, John needs to perform a series of operations to report or update these quality scores. John is provided with two types of operations: 1. `sum l r`: Calculate and print the sum of quality scores for all toys within the range from index `l` to `r` (both inclusive). 2. `update i x`: Update the quality score of the toy at index `i` to `x`. John is very busy with his work at the factory, so he asked you to write a program to manage and execute these operations efficiently. The first line contains an integer `n` (`1 ≤ n ≤ 100,000`) — the number of toys. The second line contains `n` space-separated integers — the initial quality scores of the toys. The third line contains an integer `q` (`1 ≤ q ≤ 100,000`) — the number of operations. The next `q` lines contain the operations in the format mentioned above: either `sum l r` or `update i x`, where `1 ≤ l ≤ r ≤ n` and `1 ≤ i ≤ n`. Output the result of each `sum` operation. Example: ``` Input: 5 3 1 4 1 5 4 sum 1 3 update 2 6 sum 2 5 sum 1 5 Output: 8 16 19 ``` Explanation: - The initial quality scores are `[3, 1, 4, 1, 5]`. - The first operation `sum 1 3` calculates the sum of scores from index 1 to 3: `3 + 1 + 4 = 8`. - The second operation `update 2 6` updates the score at index 2 to `6`: `[3, 6, 4, 1, 5]`. - The third operation `sum 2 5` calculates the sum from index 2 to 5: `6 + 4 + 1 + 5 = 16`. - The fourth operation `sum 1 5` calculates the sum from index 1 to 5: `3 + 6 + 4 + 1 + 5 = 19`.","solution":"class ToyQualityManager: def __init__(self, quality_scores): self.quality_scores = quality_scores def sum_range(self, l, r): return sum(self.quality_scores[l-1:r]) def update_score(self, i, x): self.quality_scores[i-1] = x def process_operations(n, initial_scores, operations): manager = ToyQualityManager(initial_scores) result = [] for op in operations: if op[0] == \'sum\': l, r = op[1], op[2] result.append(manager.sum_range(l, r)) elif op[0] == \'update\': i, x = op[1], op[2] manager.update_score(i, x) return result # Example usage: # n = 5 # initial_scores = [3, 1, 4, 1, 5] # operations = [(\'sum\', 1, 3), (\'update\', 2, 6), (\'sum\', 2, 5), (\'sum\', 1, 5)] # print(process_operations(n, initial_scores, operations))"},{"question":"You are given an integer array `nums` and an integer `target`. You are tasked to find the maximum length of a subarray that sums up to the `target`. If there isn\'t any such subarray, return 0. A subarray is a contiguous part of the array. For example, given the array `nums = [1, -1, 5, -2, 3]` and `target = 3`, the subarray `[1, -1, 5, -2]` sums to 3 and has a length of 4. Thus, the output would be 4 for this example. If no such subarray exists, the output should be 0. Note: - The array can contain negative numbers. - The array can contain up to 10^5 elements. - Your solution should be efficient in both time and space complexity. # Input - The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5) — the length of the array. - The second line contains `n` space-separated integers which make up the array `nums`. - The third line contains the integer `target`. # Output - Output a single integer — the maximum length of a subarray that sums up to `target`. If no such subarray exists, output 0. # Example Input ``` 5 1 -1 5 -2 3 3 ``` Output ``` 4 ``` Input ``` 4 -2 -1 2 1 1 ``` Output ``` 2 ``` Note In the first example, subarray `[1, -1, 5, -2]` sums to 3 and has length 4, which is the maximum length subarray that sums to 3. In the second example, subarray `[-1, 2]` sums to 1 and has length 2, which is the maximum length subarray that sums to 1.","solution":"def max_length_subarray(nums, target): prefix_sum = {} current_sum = 0 max_length = 0 for i in range(len(nums)): current_sum += nums[i] if current_sum == target: max_length = i + 1 if (current_sum - target) in prefix_sum: max_length = max(max_length, i - prefix_sum[current_sum - target]) if current_sum not in prefix_sum: prefix_sum[current_sum] = i return max_length"},{"question":"Annie is working as a software developer and has been assigned to work on a project involving hierarchical data processing using trees. As part of this, she needs to write an efficient algorithm to find the Lowest Common Ancestor (LCA) of two nodes in a tree. The LCA of two nodes (u) and (v) in a tree is the deepest node that is an ancestor of both (u) and (v). You are given a tree with (N) nodes labeled from 1 to (N). The tree is rooted at node 1. Annie needs your help to implement the function to find the LCA of two given nodes in the tree. # Input The first line contains an integer (N) ((2 leq N leq 10^5)), the number of nodes in the tree. The next (N-1) lines each contain two integers (u) and (v) ((1 leq u, v leq N), (u neq v)), denoting an edge in the tree. The next line contains an integer (Q) ((1 leq Q leq 10^5)), the number of queries. The next (Q) lines each contain two integers (u) and (v) ((1 leq u, v leq N)), the nodes for which you need to find the LCA. # Output For each query, output a single integer, the LCA of (u) and (v). # Example Input ``` 5 1 2 1 3 3 4 3 5 3 2 3 4 5 2 4 ``` Output ``` 1 3 1 ``` # Explanation - For the query (2, 3), the lowest common ancestor is 1, which is the root. - For the query (4, 5), the lowest common ancestor is 3, as node 3 is the parent of both nodes 4 and 5. - For the query (2, 4), the lowest common ancestor is 1, as node 1 is the nearest common ancestor to both nodes. Develop the most efficient strategy to compute the LCA for the given constraints.","solution":"from collections import defaultdict, deque import sys import math sys.setrecursionlimit(200000) def preprocess_lca(n, edges): LOG = math.ceil(math.log2(n)) + 1 parent = [[-1] * LOG for _ in range(n + 1)] depth = [0] * (n + 1) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def dfs(v, p): for u in graph[v]: if u == p: continue parent[u][0] = v depth[u] = depth[v] + 1 dfs(u, v) # Initializing depth array and parent for the node 1 dfs(1, -1) for i in range(1, LOG): for v in range(1, n + 1): if parent[v][i - 1] != -1: parent[v][i] = parent[parent[v][i - 1]][i - 1] return parent, depth def lca(u, v, depth, parent): if depth[u] < depth[v]: u, v = v, u LOG = len(parent[0]) for i in range(LOG - 1, -1, -1): if depth[u] - (1 << i) >= depth[v]: u = parent[u][i] if u == v: return u for i in range(LOG - 1, -1, -1): if parent[u][i] != -1 and parent[u][i] != parent[v][i]: u = parent[u][i] v = parent[v][i] return parent[u][0] def solve(n, edges, queries): parent, depth = preprocess_lca(n, edges) results = [] for u, v in queries: results.append(lca(u, v, depth, parent)) return results"},{"question":"You are given a list of strings, and each string consists of \'A\'s and \'B\'s only. Your goal is to merge all the strings into a single string with the same property, by repeatedly picking any two strings and concatenating them. To make the merged string as balanced as possible, you want to minimize the maximum difference in the number of \'A\'s and \'B\'s in any prefix of the final string. A string\'s prefix is any leading substring of the string (including the empty substring and the string itself). The first line of the input contains a single integer n (1 ≤ n ≤ 50) — the number of strings. Each of the next n lines contains a single string composed of only the characters \'A\' and \'B\'. Each string has length at most 50. Output a single integer — the minimum possible value of the maximum prefix difference of the merged string. The difference in the number of \'A\'s and \'B\'s in a prefix is calculated as the absolute difference between the count of \'A\'s and the count of \'B\'s in that prefix. # Example Input: ``` 3 AA BB AABB ``` Output: ``` 0 ``` In this example, one possible merged string is \\"AAABBAABB\\", giving you a string with a maximum prefix difference of 0.","solution":"def min_max_prefix_difference(n, strings): a_total = sum(s.count(\'A\') for s in strings) b_total = sum(s.count(\'B\') for s in strings) return abs(a_total - b_total) # Helper function for the unit test to split a multi-line string into input variables def parse_input(input_str): lines = input_str.strip().split(\\"n\\") n = int(lines[0]) strings = lines[1:] return n, strings"},{"question":"John recently started working on his garden. The garden has a structure of a perfect binary tree with depth d. Each node in the tree corresponds to a different plant. John wants to label each plant using unique integers in such a way that for any plant, the combined sum of its label with its immediate children’s labels is the same across the garden\'s entire structure. Help John determine a labeling scheme that satisfies the requirement or state that it is not possible. The structure of a perfect binary tree remains consistent, where: - The root is at depth 0. - Each node at depth i has exactly two children at depth i+1. - All leaf nodes are at depth d. **Input:** * The first line contains a single integer d (1 ≤ d ≤ 17) representing the depth of the binary tree. **Output:** * If such a labeling is not possible, print a single line containing \\"Not Possible\\". * Otherwise, print each level of the tree\'s node labels in a new line in breadth-first order. Each level\'s labels should be space-separated. **Example 1:** Input: ``` 2 ``` Output: ``` 1 2 3 4 5 6 7 ``` Explanation: - For the tree with depth 2 (3 levels), the sum of the root and its children is 1 + (2+3) = 6. - The sum of the next level of parents and their children is also 6: 2 + (4+5) = 6 and 3 + (6+7) = 6. - Hence the given labelling satisfies the requirement. **Example 2:** Input: ``` 1 ``` Output: ``` 1 2 3 ``` Explanation: - For the tree with depth 1 (2 levels), the sum of the root and its children is 1 + (2 + 3) = 6. - Hence the given labeling satisfies the requirement.","solution":"def construct_labeling(d): Constructs a labeling for the binary tree of depth d under the given constraints. If labeling is not possible, returns \\"Not Possible\\". Otherwise, returns a list of lists, where each inner list contains the labels of the nodes at each level. if d < 1 or d > 17: return \\"Not Possible\\" # Assigning initial label value label = 1 levels = [] # Iterate over each level for i in range(d + 1): level = [] # Number of nodes at the current level (2^i) for j in range(2 ** i): level.append(label) label += 1 levels.append(level) return levels"},{"question":"In a forest, there are `n` trees and each tree can propagate pollen to some of its neighboring trees. The propagation distance between any two trees is given in the form of an adjacency list. The council of ecologists wants to ensure that all the trees become pollinated starting from any tree. To facilitate this, they are prepared to install new propagation paths. Your task is to determine the minimum number of new propagation paths that must be created so that starting from any tree, all trees can become pollinated. The first input line contains an integer `n` (2 ≤ n ≤ 105) — the number of trees in the forest. The next `n` lines each contains a list of integers where the `i-th` line indicates the trees (1-indexed) that tree `i` can currently propagate pollen to. Output one number — the minimum number of new propagation paths required. Then output each new path to be added in the format `a b`, indicating that pollen can propagate from tree `a` to tree `b`. If multiple solutions are possible, any one of them will be considered correct. Example Input: ``` 4 2 3 3 4 1 ``` Example Output: ``` 1 3 4 ```","solution":"def min_new_paths_to_connect_trees(n, adjacency_list): from collections import defaultdict, deque def bfs(start, visited, adj): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Convert the input into a graph adj = defaultdict(list) for i in range(len(adjacency_list)): for neighbor in adjacency_list[i]: adj[i+1].append(neighbor) adj[neighbor].append(i+1) # Check connected components using BFS/DFS visited = [False] * (n + 1) components = [] for i in range(1, n + 1): if not visited[i]: component = [] bfs(i, visited, adj) component.append(i) components.append(component) # If the graph is already connected if len(components) == 1: return 0, [] # New edges needed to connect components new_edges = [] for i in range(len(components) - 1): new_edges.append((components[i][0], components[i + 1][0])) return len(new_edges), new_edges"},{"question":"Little D enjoys finding pairs of numbers that have interesting properties. He defines a pair of integers `(x, y)` as interesting if: 1. `1 <= x, y <= n` 2. `xy` (product of x and y) is divisible by `k` 3. `x` is not equal to `y` Given two integers `n` and `k`, help Little D to find any interesting pair of integers `(x, y)` satisfying the above properties. If there are multiple possible pairs, print any of them. If there is no valid pair, print `-1`. A single line containing two integers `n` and `k` (`1 <= n, k <= 10^6`). If an interesting pair exists, print two integers `x` and `y` in a single line. If no such pair exists, print `-1`.","solution":"def find_interesting_pair(n, k): Finds any interesting pair (x, y) such that: 1. 1 <= x, y <= n 2. x * y is divisible by k 3. x is not equal to y Parameters: n (int): The upper bound for x and y k (int): The divisible factor for x * y Returns: tuple: A tuple of two integers (x, y) if such a pair exists, else -1. for x in range(1, n + 1): if k % x == 0: y = k // x if y <= n and y != x: return (x, y) return -1"},{"question":"John is preparing for a coding competition. He has created a list of m practice problems he wants to solve before the competition day. Each problem takes a certain amount of time to solve, and John wants to maximize the number of problems he solves strictly in the order given in the list. Due to his busy schedule, he can allocate a fixed amount of time T each day for solving problems. However, John can choose to start solving problems from any point in the list on any day, but he must continue solving them sequentially without skipping any problem. If he can\'t finish a problem within the allocated time for the day, he has to leave it unfinished and cannot return to it later. At the end of each day, John can decide to take a break before continuing with the next problem from where he left off. Given the time T he can spend each day, and the list of times required to solve each practice problem, you need to determine the maximum number of problems John can solve in the days leading up to the competition. The first line of input contains two integers m and T (1 ≤ m ≤ 1000, 1 ≤ T ≤ 10^9), representing the number of practice problems and the amount of time John has each day, respectively. The next line contains m integers t1, t2, ..., tm (1 ≤ ti ≤ 10^9), where ti denotes the time required to solve the i-th problem. Print a single integer representing the maximum number of problems John can solve before the competition. In the first example, John can solve the first two problems on the first day and the third problem on the second day. In the second example, John cannot finish any problem on the first day, so he skips straight to the fourth problem, solving four problems in total before the competition.","solution":"def max_solved_problems(m, T, problems): Returns the maximum number of problems John can solve before the competition. Parameters: m (int): Number of practice problems T (int): Time John can spend each day problems (List[int]): List of times required to solve each practice problem Returns: int: The maximum number of problems John can solve solved_problems = 0 current_time = 0 for problem in problems: if current_time + problem <= T: current_time += problem solved_problems += 1 else: break return solved_problems"},{"question":"You are given a sequence of n positive integers and an integer k. Determine if there exists a subsequence whose sum is divisible by k. The first line of input contains two integers, n (1 leq n leq 10^5) and k (1 leq k leq 10^9). The second line of input contains n positive integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9). Print \\"YES\\" if there exists a subsequence whose sum is divisible by k, otherwise print \\"NO\\". # Example Input ``` 5 3 1 2 3 4 5 ``` Output ``` YES ``` Input ``` 4 7 1 2 3 5 ``` Output ``` NO ```","solution":"def is_subsequence_sum_divisible(n, k, arr): Determine if there exists a subsequence whose sum is divisible by k. # Create a set to store the remainders of prefix sums mod k prefix_mods = set() # Initialize current sum and add mod 0 to the set current_sum = 0 prefix_mods.add(0) for num in arr: current_sum += num mod = current_sum % k # If the modulo is already in the set, a subsequence exists whose sum is divisible by k if mod in prefix_mods: return \\"YES\\" prefix_mods.add(mod) return \\"NO\\""},{"question":"You are given a tree that represents family hierarchies. Each node in the tree corresponds to a family member, and the root node is the common ancestor of the entire family. Each node has a value that represents the age of the family member. You are required to write a program that finds the maximum age difference between any two nodes in the tree. Your task is to implement a function `maxAgeDifference(root)` that takes the root node of the tree and returns the maximum age difference between any two members in the family. A TreeNode is defined as follows: ```python class TreeNode: def __init__(self, age=0, children=None): self.age = age self.children = children if children is not None else [] ``` # Input - The function will receive a `TreeNode` object as the root of the tree. # Output - Return an integer representing the maximum age difference between any two family members. # Example Given the family tree: ``` 80 / | 40 30 50 / 20 25 ``` The function should return `60` because the maximum age difference is between the node with age 80 and the node with age 20. # Constraints - The number of nodes in the tree will not exceed 10^4. - The age of members (node values) will be non-negative integers. - The tree is well-formed and root will always be valid. # Function Signature ```python def maxAgeDifference(root: TreeNode) -> int: # Your implementation goes here ``` Implement the function `maxAgeDifference(root)`.","solution":"class TreeNode: def __init__(self, age=0, children=None): self.age = age self.children = children if children is not None else [] def maxAgeDifference(root: TreeNode) -> int: def dfs(node: TreeNode): nonlocal max_diff if not node: return float(\'inf\'), float(\'-inf\') min_age = node.age max_age = node.age for child in node.children: child_min_age, child_max_age = dfs(child) min_age = min(min_age, child_min_age) max_age = max(max_age, child_max_age) max_diff = max(max_diff, max_age - min_age) return min_age, max_age max_diff = 0 dfs(root) return max_diff"},{"question":"A company wants to create a system to manage the schedules of its employees for various projects. Each project requires a specific number of employees and has a start date and an end date. The goal is to determine the minimum number of employees needed so that all projects can be completed without scheduling conflicts, where no employee can be assigned to more than one project at any given time. Each project is described by its start and end dates (inclusive), and the number of employees needed. Write a program that reads the list of projects and determines the minimum number of employees required to successfully complete all the projects without any overlap in their assigned schedules. The first line of input contains an integer n (1 ≤ n ≤ 100), the number of projects. Each of the following n lines contains four integers representing the start month (1 ≤ mi ≤ 12, given without leading zeros), start day, end month, end day (both days provided without leading zeros), and the number of employees needed for the project (1 ≤ pi ≤ 100). Assume that the year is not a leap year, and the dates are all in 2013. Output a single integer, the minimum number of employees required. **Example:** ``` Input: 3 1 10 1 20 3 2 5 2 15 2 1 15 1 25 4 Output: 7 ``` **Explanation:** - The first project runs from Jan 10 to Jan 20 and needs 3 employees. - The second project runs from Feb 5 to Feb 15 and needs 2 employees. - The third project runs from Jan 15 to Jan 25 and needs 4 employees. During the period from Jan 15 to Jan 20, the maximum number of employees needed concurrently is 7 (3 from the first project and 4 from the third project).","solution":"def min_employees_needed(projects): from collections import defaultdict # Dictionary to keep track of employee requirements on every day employee_schedule = defaultdict(int) for project in projects: start_month, start_day, end_month, end_day, employees = project start_day_of_year = (start_month - 1) * 30 + start_day end_day_of_year = (end_month - 1) * 30 + end_day for day in range(start_day_of_year, end_day_of_year + 1): employee_schedule[day] += employees # Find the maximum employees needed on any given day max_employees = max(employee_schedule.values()) return max_employees"},{"question":"Yash loves solving puzzles. He recently discovered a unique kind of puzzle which involves manipulating a list of integers. The list can have both positive and negative numbers, and Yash\'s task is to find a contiguous subarray with the maximum possible sum. Given an array of integers, Yash wants to write a function that returns the maximum sum of any contiguous subarray within the given array. # Task Write a function `max_subarray_sum(arr)` that takes a list of integers `arr` and returns an integer representing the maximum sum of any contiguous subarray within `arr`. # Input - An integer array `arr` of length `n` (1 leq n leq 10^5), which can contain both positive and negative integers. # Output - Return an integer which is the maximum sum of any contiguous subarray within `arr`. # Example ```python print(max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4])) # Output: 6 # Explanation: The subarray [4, -1, 2, 1] has the maximum sum 6. print(max_subarray_sum([1])) # Output: 1 # Explanation: The array itself is the subarray with the maximum sum. print(max_subarray_sum([-1, -2, -3, -4])) # Output: -1 # Explanation: The least negative number -1 is the maximum sum for subarrays in the array. ``` # Note - The solution should aim for an efficient approach, ideally with a linear time complexity O(n) and a constant space complexity O(1). - Yash prefers the function to handle edge cases, such as arrays with a single element and arrays with all negative elements.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray within the given array. :param arr: List[int] - An array of integers :return: int - The maximum sum of any contiguous subarray # Initialize the maximum sum to the first element max_sum = arr[0] current_sum = arr[0] # Iterate through the array starting from the second element for num in arr[1:]: # Update the current sum to be the maximum of the current number or current sum plus the current number current_sum = max(num, current_sum + num) # Update the maximum sum if the current sum is greater than the maximum sum max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an array a containing n integers and an integer k. Your goal is to determine whether you can split the array into k contiguous subarrays, such that the sum of elements in each subarray is divisible by another integer p. The first line contains three integers n, k, and p (1 le n, k le 10^5, 1 le p le 10^9). The second line contains n integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9). Print \\"YES\\" if you can split the array into k such subarrays. Otherwise, print \\"NO\\". In the first example, we have n = 5, k = 2, p = 3, and the array is a = [1, 2, 3, 4, 5]. In the second example, we have n = 6, k = 3, p = 5, and the array is a = [5, -5, 10, -10, 15, -15].","solution":"def can_split_array(n, k, p, a): Determines whether the array can be split into k contiguous subarrays, each having a sum divisible by p. Parameters: n (int): Number of elements in the array k (int): Number of subarrays p (int): Number by which each subarray sum should be divisible a (list): List of n integers Returns: str: \\"YES\\" if the array can be split, otherwise \\"NO\\" if k > n: return \\"NO\\" # Initialize count of segments that can have sum divisible by p segment_count = 0 current_sum = 0 for num in a: current_sum += num if current_sum % p == 0: current_sum = 0 segment_count += 1 if segment_count >= k: return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers representing the heights of a group of people standing in a line. They all want to have a photo taken, but they have a special requirement: no person should be standing directly in front of someone taller than themselves. Write a function that rearranges the array in a way that meets this requirement. If it is not possible to rearrange the array to meet the requirement, return the original array. The function should take an integer n (1 ≤ n ≤ 1000) representing the number of people, followed by n integers representing their heights. Example Input: ``` 6 65 70 56 75 60 68 ``` Example Output: ``` 56 60 65 68 70 75 ``` If rearranging is not possible, the function should return the input array. Example Input (No rearrangement possible): ``` 3 60 70 80 ``` Example Output (Original array is returned): ``` 60 70 80 ``` The output should be the rearranged array of heights, or the original array if no valid rearrangement exists.","solution":"def rearrange_heights(n, heights): Rearranges the array of heights so that no person is standing directly in front of someone taller. If rearranging is not possible, returns the original array. :param n: Number of people. :param heights: List of integers representing the heights. :return: The rearranged list of heights or the original list if rearranging is not possible. if sorted(heights) == heights: return heights else: return sorted(heights)"},{"question":"In a distant land called Codetopia, there is a popular game played with a sequence of colored tiles arranged in a straight line. There are n tiles in total, each painted with one of k colors. As part of a game, the player needs to check the presence of palindromic sub-sequences of tiles. A palindromic sequence is one that reads the same forward and backward. You are to implement a function that answers whether a given contiguous sub-sequence of tiles is a palindromic sequence. You are given multiple queries, each specifying a range of tiles that needs to be checked for being palindromic. The first line contains two integers n (1 ≤ n ≤ 10^5) — the number of tiles, and k (1 ≤ k ≤ 100) — the number of different colors. The second line contains n integers, each between 1 and k, representing the colors of the tiles in the order they appear. The third line contains an integer q (1 ≤ q ≤ 2*10^4) — the number of queries. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — representing the 1-based indices of the start and end of the sub-sequence of tiles to check. For each query, output \\"YES\\" if the specified sub-sequence of tiles is a palindrome and \\"NO\\" otherwise. # Example Input: ``` 8 3 1 2 3 2 1 3 3 3 5 1 5 2 4 3 3 1 8 6 8 ``` Output: ``` YES YES YES NO YES ``` # Explanation - The sub-sequence from 1 to 5 is [1, 2, 3, 2, 1], which is a palindrome. - The sub-sequence from 2 to 4 is [2, 3, 2], which is a palindrome. - The sub-sequence from 3 to 3 is [3], which is a palindrome as a single element is trivially a palindrome. - The sub-sequence from 1 to 8 is [1, 2, 3, 2, 1, 3, 3, 3], which is not a palindrome. - The sub-sequence from 6 to 8 is [3, 3, 3], which is a palindrome.","solution":"def is_palindromic_subsequence(n, k, tiles, queries): results = [] for l, r in queries: sub_sequence = tiles[l-1:r] if sub_sequence == sub_sequence[::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A small village is planning to build a network of roads to connect all its houses. The village has n houses and m potential roads that could be built. Each road connects exactly two houses and has a certain construction cost. The houses are numbered from 1 to n. The village council has two conflicting goals: 1. Minimize the total cost of the roads. 2. Ensure that every house can be reached from any other house either directly or indirectly (i.e., the network must be connected). Your task is to help the village council by determining the minimum total cost required to build such a network of roads. If it\'s impossible to connect all the houses, output -1. **Input Format:** - The first line contains two space-separated integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 25000) — the number of houses and the number of potential roads. - Each of the next m lines contains three space-separated integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^5) — the endpoints of the road and the construction cost. **Output Format:** - Output a single integer representing the minimum total cost to connect all houses, or -1 if it is impossible. **Example Input 1:** ``` 4 4 1 2 1 2 3 2 3 4 3 4 1 4 ``` **Example Output 1:** ``` 6 ``` **Example Input 2:** ``` 4 2 1 2 1 3 4 2 ``` **Example Output 2:** ``` -1 ``` **Explanation:** In the first example, you can connect all houses with a minimum total cost of 6 by constructing the roads with costs 1, 2, and 3. In the second example, it is impossible to connect all the houses since there is no road connecting the pair of houses (1, 2) to the pair of houses (3, 4).","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_cost_to_connect_houses(n, m, roads): if n == 1: return 0 roads.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = 0 e = 0 i = 0 while e < n - 1 and i < m: u, v, w = roads[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result = result + w union(parent, rank, x, y) if e != n - 1: return -1 return result"},{"question":"In a futuristic city, there are self-driving buses that follow strictly defined patrol routes. The city is represented as an undirected graph with n intersections and m bidirectional roads. A bus route is a sequence of intersections that form a simple cycle, meaning the route starts and ends at the same intersection and no other intersection is visited more than once during the patrol. Due to advancements in technology, we have an opportunity to optimize the patrol routes. We want to determine the shortest cycle (in terms of the number of roads) in the city\'s road network. If no cycle exists, the outcome should indicate that. # Input: First line contains two integers n and m (2 le n le 10^5, 1 le m le 2 cdot 10^5) — the number of intersections and the number of roads, respectively. The next m lines each contain two integers u and v (1 le u, v le n, u neq v), denoting that there is a bidirectional road between intersection u and intersection v. It is guaranteed that there is at most one road between any pair of intersections. # Output: If there is no cycle in the city, print NO. Otherwise, print YES on the first line followed by an integer k on the second line representing the number of intersections in the shortest cycle. On the third line, print k integers representing the sequence of intersections in the shortest cycle. If there are multiple shortest cycles, print any of them. # Example: Input: ``` 6 7 1 2 1 3 2 3 2 4 3 5 4 5 4 6 ``` Output: ``` YES 3 1 2 3 ``` In this example, there are several cycles, but the shortest one is to go from intersection 1 to intersection 2, then to intersection 3, and back to intersection 1, forming a cycle of length 3. The task tests your ability to work with graph algorithms, in particular, finding the shortest cycle in an undirected graph.","solution":"from collections import deque, defaultdict def shortest_cycle(n, m, edges): adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) def find_shortest_cycle(start): dist = [-1] * (n + 1) parent = [-1] * (n + 1) q = deque([start]) dist[start] = 0 while q: u = q.popleft() for v in adj[u]: if dist[v] == -1: dist[v] = dist[u] + 1 parent[v] = u q.append(v) elif parent[u] != v: cycle_len = dist[u] + dist[v] + 1 cycle = [] x = u while x != -1: cycle.append(x) x = parent[x] x = v while x != -1: cycle.append(x) x = parent[x] return cycle_len, cycle return float(\'inf\'), [] min_cycle_len = float(\'inf\') min_cycle = [] for i in range(1, n+1): cycle_len, cycle = find_shortest_cycle(i) if cycle_len < min_cycle_len: min_cycle_len = cycle_len min_cycle = cycle[:1 + len(cycle)//2] # deduplicate nodes if min_cycle_len == float(\'inf\'): return \\"NO\\", else: return \\"YES\\", min_cycle_len, min_cycle # Example Usage n = 6 m = 7 edges = [(1, 2), (1, 3), (2, 3), (2, 4), (3, 5), (4, 5), (4, 6)] print(shortest_cycle(n, m, edges))"},{"question":"You are given an array of n integers which represents the heights of a series of skyscrapers. The task is to compute the maximum number of skyscrapers you can see when looking from the leftmost side of the array. A skyscraper is visible if there\'s no taller skyscraper before it. The first line contains an integer n (1 ≤ n ≤ 105). The next line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 109), separated by spaces, representing the heights of the skyscrapers. Print a single number - the maximum number of visible skyscrapers when viewed from the leftmost side. For example: For the input: 6 3 7 8 3 6 1 The output should be: 3 Explanation: Initially you can see the first skyscraper (height 3). The second skyscraper (height 7) is taller, so you can see it too. The third one (height 8) is even taller, so it\'s also visible. The remaining skyscrapers are not taller than 8, so they are not visible. Thus, the maximum number of skyscrapers visible is 3.","solution":"def max_visible_skyscrapers(heights): Returns the maximum number of visible skyscrapers when viewed from the leftmost side. Parameters: heights (list): a list of integers representing the heights of the skyscrapers. Returns: int: the maximum number of visible skyscrapers. if not heights: return 0 max_visible = 0 current_max_height = 0 for height in heights: if height > current_max_height: max_visible += 1 current_max_height = height return max_visible"},{"question":"You are developing a file system for a simplified operating system. The file system consists of directories and files, and each directory can contain multiple subdirectories and files. You need to write a program to determine the depth of the deepest file in the file system. A directory structure is represented as a nested list with elements being either the name of a file (a string that does not contain the \'/\' character) or another list (representing a subdirectory). Each subdirectory follows the same representation. The root directory is the outermost list. Your task is to write a function that calculates the maximum depth of any file in the file system. The depth is defined as the number of directories from the root to the deepest file, including the file itself. # Input - A nested list `directory` representing the directory structure. # Output - An integer representing the maximum depth of the deepest file. # Example ```python def max_file_depth(directory): # Write your code here # Example 1 directory = [\\"file1\\", [\\"subdir1\\", \\"file2\\", [\\"subsubdir1\\", \\"file3\\"]]] print(max_file_depth(directory)) # Output: 3 # Example 2 directory = [\\"file1\\", [\\"subdir1\\", [\\"subsubdir1\\", \\"file2\\", [\\"subsubdir2\\", \\"file3\\"]]], \\"file4\\"] print(max_file_depth(directory)) # Output: 4 # Example 3 directory = [[\\"subdir1\\", [\\"subsubdir1\\", [\\"subsubsubdir1\\", \\"file1\\"], \\"file2\\"]], \\"file3\\"] print(max_file_depth(directory)) # Output: 4 ``` # Constraints - The structure can be deeply nested but will not contain circular references. - The input list and each nested list can have up to `10^3` elements. - Only strings and lists are present in the structure. Note: Pay careful attention to the recursive nature of the structure and handle it appropriately to avoid stack overflow issues.","solution":"def max_file_depth(directory): def dfs(subdir, depth): max_depth = depth for item in subdir: if isinstance(item, list): max_depth = max(max_depth, dfs(item, depth + 1)) else: max_depth = max(max_depth, depth + 1) return max_depth return dfs(directory, 0)"},{"question":"A tournament organizer is designing a single-elimination tournament for a game. The tournament includes n players, where each player is given a unique ID (an integer between 1 and n). The organizer wants to know the following about the potential matchups: For every player i (where 1 le i le n), count the number of players j (where j ne i) such that the match between player i and player j is guaranteed to happen at some stage in the tournament if all remaining players as well as i and j participate according to the single-elimination bracket rules. Your task is to write a function that takes n as input and returns an array where the i-th element corresponds to the number of such players j for the player i. # Input The input consists of a single integer n (1 le n le 1000) representing the number of players. # Output An array of n integers, where the i-th element represents the number of guaranteed matchups for player i. # Example Input ``` 4 ``` Output ``` 2 2 2 2 ``` Input ``` 8 ``` Output ``` 4 4 4 4 4 4 4 4 ``` Explanation In a single-elimination tournament with 4 players, each player is guaranteed to face 2 other players at some stage if only the player i and j are left in the participants pool. For 8 players, each player is guaranteed to face 4 other players at some stage similarly.","solution":"def count_guaranteed_matchups(n): Returns an array where the i-th element corresponds to the number of guaranteed matchups for player i. In a single-elimination tournament, each player is guaranteed to face n // 2 other players. return [n // 2] * n"},{"question":"A space station is gathering data from various sensor units deployed outside the station. Each sensor unit sends a continuous stream of data packets. However, occasionally, due to signal interference, some packets might be lost or corrupted, resulting in gaps in the data stream. Each data packet is identified by a unique integer timestamp which is included in the packet. Your task is to help the space station by writing a program that verifies the integrity of the data stream from each sensor unit. Specifically, for each stream, you need to check if there are any missing timestamps and identify them. If there are any missing timestamps, your program should return those timestamps in sorted order. If there are no missing timestamps, your program should return \\"NO MISSING\\". Assume that timestamps start at 1 and are supposed to be continuous. Input: - The first line contains an integer n (1 ≤ n ≤ 200), the number of sensor units. - For each sensor unit, the first line contains an integer k (1 ≤ k ≤ 200), the number of packets received from that unit. - The next line contains k integers, the timestamps of the received packets, in any order. Output: - For each sensor unit, output \\"NO MISSING\\" if there are no missing timestamps. - Otherwise, output the missing timestamps in ascending order, separated by spaces. Example: Input: 3 5 1 2 4 5 6 6 1 2 3 4 5 6 4 2 4 5 6 Output: 3 NO MISSING 1 3 Note: - The timestamps for each sensor unit are unique and fall within the range of 1 to k. - The sensor units are processed independently.","solution":"def check_missing_timestamps(n, sensor_data): results = [] for i in range(n): k = sensor_data[i][0] timestamps = set(sensor_data[i][1]) missing = sorted(set(range(1, k + 1)) - timestamps) if missing: results.append(\' \'.join(map(str, missing))) else: results.append(\\"NO MISSING\\") return results def process_input(data): lines = data.strip().split(\'n\') n = int(lines[0]) sensor_data = [] index = 1 for _ in range(n): k = int(lines[index]) timestamps = list(map(int, lines[index + 1].split())) sensor_data.append((k, timestamps)) index += 2 return n, sensor_data def main(data): n, sensor_data = process_input(data) return check_missing_timestamps(n, sensor_data)"},{"question":"You are given an array of integers a_1, a_2, ldots, a_n (2 le n le 100000) where each integer is between 1 and 10^9 inclusive. Your task is to find two indices i and j (1 le i < j le n) such that the absolute difference between a[i] and a[j] is minimized. If there are multiple pairs with the same minimum difference, you should find the pair with the smallest i index. If there is still a tie, select the pair with the smallest j index. # Input - The first line contains the integer n. - The second line contains the array of integers a separated by spaces. # Output - Output two space-separated integers: the 1-based indices i and j (with i < j) such that the absolute difference between a[i] and a[j] is minimized. If there are multiple pairs, choose the pair with the smallest i; if there is still a tie, choose the pair with the smallest j. # Example Input ``` 6 1 3 4 8 13 17 ``` Output ``` 2 3 ``` Input ``` 5 5 2 8 4 1 ``` Output ``` 1 4 ``` Constraints - The length of the array n will be between 2 and 100000. - Each element in the array a will be between 1 and 10^9.","solution":"def find_min_diff_indices(n, a): indexed_a = sorted((val, idx) for idx, val in enumerate(a)) min_diff = float(\'inf\') min_i, min_j = -1, -1 for k in range(1, n): curr_diff = abs(indexed_a[k][0] - indexed_a[k-1][0]) if curr_diff < min_diff: min_diff = curr_diff min_i = min(indexed_a[k][1], indexed_a[k-1][1]) min_j = max(indexed_a[k][1], indexed_a[k-1][1]) elif curr_diff == min_diff: if min(indexed_a[k][1], indexed_a[k-1][1]) < min_i: min_i = min(indexed_a[k][1], indexed_a[k-1][1]) min_j = max(indexed_a[k][1], indexed_a[k-1][1]) elif min(indexed_a[k][1], indexed_a[k-1][1]) == min_i: min_j = min(max(indexed_a[k][1], indexed_a[k-1][1]), min_j) return (min_i + 1, min_j + 1) # Example usage: # n = 6 # a = [1, 3, 4, 8, 13, 17] # print(find_min_diff_indices(n, a)) # Output: (2, 3)"},{"question":"You are given an array of n integers. You can choose to perform the following operation any number of times (including zero): Pick two adjacent elements in the array, and swap them if the first element is greater than the second one. Determine if it is possible to sort the array in non-decreasing order using the above operation. # Input The first line contains a single integer n (1 leq n leq 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. # Output Print \\"YES\\" (without quotes) if it is possible to sort the array in non-decreasing order using the above operation, otherwise print \\"NO\\". You can print each letter in any case (upper or lower). # Example Input 6 3 1 2 5 4 6 Output YES Input 4 4 3 2 1 Output NO","solution":"def can_sort_by_adjacent_swaps(n, array): Determines if it is possible to sort the array in non-decreasing order using adjacent swaps. Since adjacent swaps can perform a bubble sort, the answer is always \\"YES\\". :param n: Number of elements in the array. :param array: List of integers representing the array. :return: \\"YES\\" since adjacent swaps can always sort the array. return \\"YES\\""},{"question":"Wallace and Gromit are in the game development business, and they have designed a new puzzle game involving sliding tiles. The game board is a 4x4 grid, filled with fifteen numbered tiles and one empty space, totaling sixteen spaces. The tiles are numbered from 1 to 15, with the empty space represented by 0. The objective of the game is to arrange the tiles in ascending order from left to right and top to bottom, with the empty space at the bottom-right corner. To solve the puzzle, the player can slide any tile that is adjacent to the empty space into the empty space, effectively swapping their positions. Your task is to write a program that determines if a given initial configuration of the game board is solvable. A configuration is solvable if it is possible to reach the target configuration by sliding tiles. The initial configuration will be given as a 2D list of integers. Your program should output \\"YES\\" if the configuration is solvable, and \\"NO\\" otherwise. # Input A single 2D list `board` representing the initial configuration of the 4x4 grid, where each element is an integer between 0 and 15, inclusive. # Output A single string \\"YES\\" or \\"NO\\" indicating whether the initial configuration is solvable. # Example Example 1 ``` Input: [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 0, 15] ] Output: \\"YES\\" ``` Example 2 ``` Input: [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [14, 13, 15, 0] ] Output: \\"NO\\" ``` **Note:** - The input `board` is guaranteed to be a valid 4x4 grid where each number from 0 to 15 appears exactly once. - To determine solvability, you can use the concept of inversions and the position of the empty space.","solution":"def is_solvable(board): def get_inversions(board_list): inversions = 0 for i in range(len(board_list)): for j in range(i + 1, len(board_list)): if board_list[i] > board_list[j] and board_list[j] != 0: inversions += 1 return inversions board_list = [num for row in board for num in row] inversions = get_inversions(board_list) row_with_zero = next(i for i, val in enumerate(board_list) if val == 0) // 4 if (inversions % 2 == 0 and row_with_zero % 2 != 0) or (inversions % 2 != 0 and row_with_zero % 2 == 0): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of integers a with length n. An operation consists of removing any two elements from the array and inserting their sum back into the array. Your task is to find the minimum possible value of the largest element in the array after performing this operation exactly n-1 times. The first line contains one integer n (2 leq n leq 10^5). The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9). Print the minimum possible value of the largest element in the array after exactly n-1 operations. Illustration: Consider the array [3, 1, 4, 1, 5]. Removing 3 and 1, then inserting 4 results in [4, 4, 1, 5]. Removing 4 and 1, then inserting 5 results in [5, 4, 5]. Removing 5 and 4, then inserting 9 results in [9, 5]. Finally, removing 9 and 5, then inserting 14 results in [14]. The minimum possible value of the largest element after performing the operation four times is 14.","solution":"def minimum_largest_element(n, array): Returns the minimum possible value of the largest element in the array after performing n-1 sum operations. return sum(array)"},{"question":"Given a binary string s of length n, you can perform the following operation any number of times: 1. Choose any substring of s which does not contain consecutive \'1\'s. 2. Replace all \'0\'s in the chosen substring with \'1\'s. Your task is to determine whether it is possible to turn the string into a string of all \'1\'s by applying the operation any number of times. A binary string consists only of the characters \'0\' and \'1\'. The first line of the input contains an integer t (1 le t le 10^5) — the number of test cases. Each of the following lines contains a binary string s (1 le n le 10^5). Print \\"Yes\\" if it is possible to convert the given binary string into a binary string of all \'1\'s, otherwise print \\"No\\". The sum of all values of n across all test cases will not exceed 10^6. # Input: - The first line contains an integer t (1 le t le 10^5) – the number of test cases. - The next t lines each contain a binary string s (1 le |s| le 10^5). # Output: For each test case, output \\"Yes\\" if it is possible to turn the string into all \'1\'s, otherwise output \\"No\\". # Example: Input: ``` 4 1001 1100 001 000 ``` Output: ``` Yes No Yes Yes ```","solution":"def can_convert_to_all_ones(s): Determines if it is possible to convert a binary string s into all \'1\'s by choosing any substring which does not contain consecutive \'1\'s and replacing all \'0\'s in the chosen substring with \'1\'s. # To be able to convert s to all \'1\'s: # There must not be any consecutive \'1\'s in the string, which indicates it\'s impossible. if \'11\' in s: return \'No\' else: return \'Yes\' def solve(test_cases): results = [] for s in test_cases: results.append(can_convert_to_all_ones(s)) return results"},{"question":"``` The first line contains an integer n (1 ≤ n ≤ 100) — the number of books on the shelf. Each of the following n lines contains a single integer hi (1 ≤ hi ≤ 10⁴) — the height of the i-th book. Output \\"YES\\" if such a pair of books exists, and \\"NO\\" otherwise. Example: Input: 5 2 7 4 5 9 Output: YES Input: 4 3 1 4 2 Output: NO ```","solution":"def has_identical_books(n, heights): Determines if there exists a pair of books with identical heights. Parameters: n (int): The number of books on the shelf. heights (list of int): The heights of the books. Returns: str: \\"YES\\" if such a pair exists, \\"NO\\" otherwise. heights_set = set() for height in heights: if height in heights_set: return \\"YES\\" heights_set.add(height) return \\"NO\\""},{"question":"Thomas is developing a file synchronization tool. The tool needs to synchronize files between two directories, but the directories are on different servers with different time zones. When files are copied from one server to another, the timestamps may get altered due to the time zone difference. Thomas wants to ensure that his tool can correctly identify if a file needs to be synchronized based on their last modified timestamps. Your task is to write a Python function `need_sync(file1_time, file2_time, time_difference)` that determines if the two files need to be synchronized. The function should take three arguments: - `file1_time` (str): The last modified time of the file in the first directory in the format \\"YYYY-MM-DD HH:MM:SS\\". - `file2_time` (str): The last modified time of the file in the second directory in the format \\"YYYY-MM-DD HH:MM:SS\\". - `time_difference` (int): The time difference between the two servers in seconds. The function should return `True` if the two files need to be synchronized (i.e., their timestamps are different when considering the time zone difference), and `False` otherwise. For example: ```python print(need_sync(\\"2023-07-20 10:00:00\\", \\"2023-07-20 14:00:00\\", 14400)) # Output: False print(need_sync(\\"2023-07-20 10:00:00\\", \\"2023-07-20 14:01:00\\", 14400)) # Output: True ``` Note: - You can assume that the time strings are in 24-hour format and are valid. - The time difference is given in seconds and can be positive, negative, or zero. - Consider using Python\'s datetime module to help with the time calculations. Write the function `need_sync` below:","solution":"from datetime import datetime, timedelta def need_sync(file1_time, file2_time, time_difference): Determines if two files need to be synchronized based on their last modified timestamps and the time difference between the two servers. Args: file1_time (str): Last modified time of the file in the first directory (\\"YYYY-MM-DD HH:MM:SS\\"). file2_time (str): Last modified time of the file in the second directory (\\"YYYY-MM-DD HH:MM:SS\\"). time_difference (int): Time difference between the two servers in seconds. Returns: bool: True if the files need to be synchronized, False otherwise. file1_dt = datetime.strptime(file1_time, \\"%Y-%m-%d %H:%M:%S\\") file2_dt = datetime.strptime(file2_time, \\"%Y-%m-%d %H:%M:%S\\") adjusted_file2_dt = file2_dt - timedelta(seconds=time_difference) return file1_dt != adjusted_file2_dt"},{"question":"A building is represented by a grid of size ( n times m ). Each cell of the grid can either be empty or occupied by a wall. You are given the grid, and you have to determine if there exists a rectangular path within the grid such that there are no walls inside the path and the path reaches from the top-left corner to the bottom-right corner of the grid. A rectangular path starts from the top-left corner (cell (1,1)) and reaches the bottom-right corner (cell (n,m)) using only right and down moves. The path should not pass through any cell that contains a wall. The first line of the input contains two integers ( n ) and ( m ) ( (1 leq n, m leq 200) ) — the number of rows and columns of the grid. The next ( n ) lines each contain ( m ) characters (\'.\' or \'#\'), where \'.\' denotes an empty cell and \'#\' marks a cell with a wall. Print \\"YES\\" if such a path exists, and \\"NO\\" otherwise. For example: **Input:** ``` 3 3 ... .#. ... ``` **Output:** ``` YES ``` **Input:** ``` 3 3 . .#. . ``` **Output:** ``` NO ```","solution":"def is_path_exist(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == \'#\': return False if x == n-1 and y == m-1: return True grid[x][y] = \'#\' result = dfs(x+1, y) or dfs(x, y+1) grid[x][y] = \'.\' return result return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"You are working on a new text editor application. One of the features is a keyword-based search that highlights all occurrences of a given keyword in the text. To create an efficient search algorithm, you decide to implement a function that finds all the starting positions of the keyword in the given text. Write a function `find_keyword_positions` that takes two strings: `text` and `keyword`. The function should return a list of integers representing the starting indices of each occurrence of the `keyword` in the `text`. The search should be case-sensitive. # Input - The input consists of two lines: - The first line contains the string `text` (1 ≤ length of text ≤ 100000). - The second line contains the string `keyword` (1 ≤ length of keyword ≤ 100). Both `text` and `keyword` consist of printable ASCII characters. # Output - The function should output a list of integers, each representing a starting index (0-based) of an occurrence of the `keyword` in the `text`. If the `keyword` does not appear in the `text`, return an empty list. # Example Input ``` abracadabra abra ``` Output ``` [0, 7] ``` Input ``` mississippi issi ``` Output ``` [1, 4] ``` # Note - In the first example, the keyword \\"abra\\" appears at indices 0 and 7 in the `text`. - In the second example, the keyword \\"issi\\" appears at indices 1 and 4 in the `text`.","solution":"def find_keyword_positions(text, keyword): Returns a list of starting indices of each occurrence of the keyword in the text. The search is case-sensitive. positions = [] keyword_len = len(keyword) index = text.find(keyword) while index != -1: positions.append(index) index = text.find(keyword, index + 1) return positions"},{"question":"You are given a list of integers representing the stock prices of a company for successive days. Your task is to maximize your profit by choosing a single day to buy one stock and a different day in the future to sell that stock. Write a function `max_profit(prices: List[int]) -> int` that takes the list of stock prices and returns the maximum profit you can achieve. If no profit can be made, return 0. # Input: - A list of integers `prices` representing the stock prices for successive days. The length of the list will be at least 2 and at most 10^5. - Each integer in `prices` will be between 1 and 10^4. # Output: - An integer representing the maximum profit that can be achieved from buying one day and selling on a later day. If no profit can be achieved, return 0. # Function Signature: ``` def max_profit(prices: List[int]) -> int: ``` # Example: Input: ``` prices = [7, 1, 5, 3, 6, 4] ``` Output: ``` 5 ``` Explanation: - Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. Input: ``` prices = [7, 6, 4, 3, 1] ``` Output: ``` 0 ``` Explanation: - No profit can be made since the prices are in a descending order. # Constraints: - The algorithm should have a time complexity better than O(n^2) to handle the upper limit of the input size efficiently.","solution":"from typing import List def max_profit(prices: List[int]) -> int: Calculate the maximum profit that can be achieved by buying and then selling a stock on different days. If no profit can be made, return 0. # Initialize minimum price to be the first day\'s price min_price = prices[0] max_profit = 0 # Iterate through the prices starting from the second day for price in prices[1:]: # Update min_price if the current price is lower than the min_price so far if price < min_price: min_price = price else: # Calculate the potential profit from the current price and min_price profit = price - min_price # Update max_profit if the current calculated profit is larger if profit > max_profit: max_profit = profit return max_profit"},{"question":"Your friend has a software where each student submits exactly one file for their assignment. Sometimes, students accidentally submit multiple files, leading to confusion and wasted storage space. You are to create a helper function to assist your friend by identifying those students. The input is a list of students\' submissions. Each submission has two fields: `student_id` and `file_name`. Write a function: ```python def find_duplicate_submissions(submissions: List[Tuple[str, str]]) -> List[str]: ``` # Input - `submissions`: A list of tuples, where each tuple includes `student_id` (a string) and `file_name` (a string). The length of the list is at most 10^4. # Output - Returns a list of `student_id`s (strings) of students who have submitted more than one file, sorted in ascending order. # Example ```python submissions = [ (\'student_1\', \'file_a\'), (\'student_2\', \'file_b\'), (\'student_1\', \'file_c\'), (\'student_3\', \'file_d\'), (\'student_2\', \'file_e\') ] output = find_duplicate_submissions(submissions) print(output) # Output: [\'student_1\', \'student_2\'] ``` # Note - Make sure the output list is sorted in ascending order of the `student_id`. - In the example above, \'student_1\' submitted \'file_a\' and \'file_c\', while \'student_2\' submitted \'file_b\' and \'file_e\'. Hence, both should be in the output. # Constraints: - Each `student_id` is a string containing lowercase English letters and digits. - Each `file_name` is a string containing lowercase English letters and digits.","solution":"from typing import List, Tuple def find_duplicate_submissions(submissions: List[Tuple[str, str]]) -> List[str]: from collections import defaultdict submission_count = defaultdict(int) for student_id, _ in submissions: submission_count[student_id] += 1 duplicate_students = [student for student, count in submission_count.items() if count > 1] return sorted(duplicate_students)"},{"question":"Juliana has taken on another mission. This time, she faces a challenge involving a matrix. The matrix has n rows and m columns, with each cell initially containing the value zero. Juliana is asked to process q queries. Each query is one of three types: 1. Add a given value to all elements in a specified subrectangle of the matrix. 2. Set all elements in a specified subrectangle of the matrix to a given value. 3. Report the sum of all elements in a specified subrectangle of the matrix. Can you help Juliana to process all these queries efficiently? The first line contains three integers n, m, and q (1leq n, mleq 1000, 1leq qleq 10000) — the number of rows, columns, and queries. Each of the next q lines describes a query and contains five or six integers, depending on the type of the query: - For a query of type 1, the line contains \\"1 r1 c1 r2 c2 x\\" (1 leq r1 leq r2 leq n, 1 leq c1 leq c2 leq m, -10^4 leq x leq 10^4) — the top-left and bottom-right corners of the subrectangle and the value to be added. - For a query of type 2, the line contains \\"2 r1 c1 r2 c2 x\\" (1 leq r1 leq r2 leq n, 1 leq c1 leq c2 leq m, -10^4 leq x leq 10^4) — the top-left and bottom-right corners of the subrectangle and the value to be set. - For a query of type 3, the line contains \\"3 r1 c1 r2 c2\\" (1 leq r1 leq r2 leq n, 1 leq c1 leq c2 leq m) — the top-left and bottom-right corners of the subrectangle. For each query of type 3, output the sum of the specified subrectangle on a new line. Ensure to handle each query efficiently to meet the constraints.","solution":"class MatrixManipulator: def __init__(self, n, m): self.n = n self.m = m self.matrix = [[0] * m for _ in range(n)] def add_to_subrectangle(self, r1, c1, r2, c2, x): for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): self.matrix[i][j] += x def set_subrectangle(self, r1, c1, r2, c2, x): for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): self.matrix[i][j] = x def sum_subrectangle(self, r1, c1, r2, c2): total_sum = 0 for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): total_sum += self.matrix[i][j] return total_sum"},{"question":"You are given a description of a garden in the form of an n x m grid. Each cell in the grid can either contain a plant (\\"P\\") or be empty (\\".\\"). You can water the garden to help the plants grow, but you can only water one sub-grid at a time using a single operation. A sub-grid is defined as a contiguous rectangular section of the original grid. Your task is to determine if it is possible to water the entire garden (i.e., all the plants) using at most three sub-grid operations. You can water cells that are already wet again without any issues. If it is possible, return \\"YES\\"; otherwise, return \\"NO\\". The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the garden grid. The next n lines contain m characters each representing the garden grid, where \\"P\\" indicates a plant and \\".\\" indicates an empty cell. Input: ``` n m grid_row_1 grid_row_2 ... grid_row_n ``` Output: If it is possible to water all plants in at most three sub-grid operations, print \\"YES\\". Otherwise, print \\"NO\\". Example: Input: ``` 4 5 P...P ..P.. .P... ....P ``` Output: ``` YES ```","solution":"def can_water_in_three_operations(n, m, garden): Determines if it is possible to water all plants in the garden using at most three sub-grid operations. Parameters: n (int): Number of rows in the garden m (int): Number of columns in the garden garden (list of str): The garden grid representation, with \\"P\\" for plants and \\".\\" for empty cells. Returns: str: \\"YES\\" if it is possible to water all plants in at most three sub-grid operations, otherwise \\"NO\\". from itertools import product def rect_contains_plants(top, left, bottom, right): Check if all cells in the rectangle contain plants. for row in range(top, bottom + 1): for col in range(left, right + 1): if garden[row][col] != \'P\': return False return True # Collect all coordinates of plants plant_coordinates = [(r, c) for r in range(n) for c in range(m) if garden[r][c] == \'P\'] if not plant_coordinates: return \\"NO\\" for (t1, l1), (t2, l2), (t3, l3) in product(plant_coordinates, repeat=3): for i1 in range(t1, n): for j1 in range(l1, m): for i2 in range(t2, n): for j2 in range(l2, m): for i3 in range(t3, n): for j3 in range(l3, m): if ( rect_contains_plants(t1, l1, i1, j1) and rect_contains_plants(t2, l2, i2, j2) and rect_contains_plants(t3, l3, i3, j3) ): return \\"YES\\" return \\"NO\\""},{"question":"# Prime Factorization Game Alice and Bob are playing a prime factorization game. Alice writes down a sequence of n distinct positive integers on the board. Bob then starts picking pairs of numbers from the sequence in such a way that the product of each picked pair is a unique number not picked before. For each pair (x, y) Bob picks, he calculates the product x * y and gets as many points as the number of distinct prime factors of x * y. Bob stops when no more pairs can be picked. At the beginning of the game, Bob has zero points. Alice wants Bob to score exactly k points in total. Help her find n distinct integers such that Bob scores exactly k points. Each integer must be at most 10^9, and Alice cannot memorize too huge numbers. The first line of input contains two space-separated integers n and k (1 ≤ n ≤ 10^5; 0 ≤ k ≤ 10^8). If such a sequence doesn\'t exist, output -1; otherwise, output n distinct space-separated integers such that their pairwise products result in Bob scoring exactly k points. The number of distinct prime factors of a number x is the number of prime numbers that divide x without any remainder.","solution":"def sieve_of_eratosthenes(max_num): primes = [] is_prime = [True] * (max_num + 1) for p in range(2, max_num + 1): if is_prime[p]: primes.append(p) for multiple in range(p * p, max_num + 1, p): is_prime[multiple] = False return primes def construct_sequence(n, k): if k == 0: return [1] * n primes = sieve_of_eratosthenes(10**5) sequence = [] current_k = 0 for prime in primes: sequence.append(prime) current_k += 1 if current_k == k: break if current_k < k: return -1 additional_numbers = 1 while len(sequence) < n: sequence.append(2 * additional_numbers + 1) additional_numbers += 1 if len(sequence) > n: return -1 return sequence"},{"question":"You are given a list of integers which represents the heights of people standing in a line. You are also given an integer h, representing a specific height. Your task is to compute how many groups of consecutive people are there in the list such that the minimum height in the group is greater than or equal to h. For example, consider the list [3, 7, 8, 4, 6, 2, 5] and h = 5. The possible groups are from indexes [1, 2] and [2, 2] (both inclusive), [4, 4], and [6, 6]. # Input The first line contains two integers n and h (1 ≤ n ≤ 100000, 1 ≤ h ≤ 10^9), where n is the number of people in the line. The second line contains n integers a1, a2, …, an (1 ≤ ai ≤ 10^9), representing the heights of people. # Output Print a single integer – the number of groups of consecutive people such that the minimum height in the group is greater than or equal to h. # Sample Input 1 ``` 7 5 3 7 8 4 6 2 5 ``` # Sample Output 1 ``` 5 ``` # Explanation 1 The valid groups are: [7], [7, 8], [8], [6], [5]. # Sample Input 2 ``` 5 6 1 2 3 4 5 ``` # Sample Output 2 ``` 0 ``` # Explanation 2 There are no groups where the minimum height is greater than or equal to 6.","solution":"def count_valid_groups(n, h, heights): Returns the number of groups of consecutive people such that the minimum height in the group is greater than or equal to a given height h. Parameters: n (int): The number of people in the list. h (int): The specific height to compare against. heights (list): List of integers representing the heights of people. Returns: int: The number of valid groups of consecutive people. count = 0 consecutive = 0 for height in heights: if height >= h: consecutive += 1 count += consecutive else: consecutive = 0 return count"},{"question":"You are given an array of integers. Find the largest possible sum of a contiguous subarray which contains at least one positive integer. You are also asked to answer Q independent queries. The first line contains a single integer Q (1 le Q le 100) — the number of queries. Each of the next Q lines contains an integer n (1 le n le 10^5) — the size of the array for that query, followed by n integers representing the elements of the array. It is guaranteed that each query has at least one positive integer in the array. Print Q lines, each line should contain the largest possible sum of a contiguous subarray which contains at least one positive integer. The answer in the i-th line should correspond to the i-th query from the input.","solution":"def max_subarray_sum_with_positive(Q, queries): results = [] for query in queries: n, arr = query[0], query[1] max_sum = float(\'-inf\') current_sum = 0 for number in arr: current_sum += number if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 results.append(max_sum) return results # Sample usage Q = 3 queries = [ (4, [1, 2, 3, 4]), (3, [-1, 2, 3]), (5, [-2, 5, -1, 2, -3]) ] print(max_subarray_sum_with_positive(Q, queries)) # Output: [10, 5, 6]"},{"question":"You are given a grid represented by a 2D array of integers. The grid contains only two types of values: `0` (representing an empty cell) and `1` (representing a cell with an obstacle). You can only move up, down, left, or right from an empty cell (0), and you cannot move through obstacles (1). The goal is to determine if there is a valid path from the top-left corner of the grid (grid[0][0]) to the bottom-right corner (grid[n-1][m-1]). Write a function `bool hasValidPath(vector<vector<int>>& grid)` that returns `true` if there exists a valid path from (0,0) to (n-1,m-1), and `false` otherwise. # Example Input: ``` grid = [[0, 0, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0], [0, 1, 1, 0]] ``` Output: ``` true ``` Input: ``` grid = [[0, 1, 1, 0], [1, 1, 1, 0], [0, 1, 1, 0], [0, 1, 1, 0]] ``` Output: ``` false ``` # Constraints - The grid dimensions `n` and `m` are between 1 and 1000 inclusive. - Each cell in the grid has a value of either `0` or `1`. # Note Ensure that your solution efficiently handles the worst-case scenario in terms of both time and space complexity.","solution":"def hasValidPath(grid): Determines if there is a valid path from the top-left to the bottom-right in a 2D grid. Parameters: grid (List[List[int]]): 2D list of integers where 0 represents an empty cell and 1 represents an obstacle. Returns: bool: True if there exists a valid path, False otherwise. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return False from collections import deque rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (rows - 1, cols - 1): return True for dx, dy in directions: new_x, new_y = x + dx, y + dy if 0 <= new_x < rows and 0 <= new_y < cols and grid[new_x][new_y] == 0 and (new_x, new_y) not in visited: queue.append((new_x, new_y)) visited.add((new_x, new_y)) return False"},{"question":"You are given a tree consisting of `n` nodes and `n-1` edges. Each node has a value initially set to `0`. You need to perform `m` operations of two types: 1. Add value `v` to all nodes in the subtree rooted at node `u`. 2. Query the value of node `u`. The operations are given in the following format: - For the first type: `1 u v` (add value `v` to all nodes in the subtree rooted at node `u`) - For the second type: `2 u` (output the value of node `u`) For each query of the second type, output the value of the node. The input consists of: - The first line contains two integers `n` and `m` (`1 ≤ n, m ≤ 10^5`). - The next `n-1` lines each contains two integers `a` and `b` denoting an edge between nodes `a` and `b`. - The next `m` lines describe the operations as specified. The output for each query operation should be on a new line. # Example Input ``` 5 5 1 2 1 3 2 4 2 5 1 1 10 2 4 1 2 5 2 2 2 3 ``` Output ``` 10 15 10 ``` # Note In the example, the tree structure is as follows: ``` 1 / 2 3 / 4 5 ``` - The first operation adds 10 to all nodes in the subtree rooted at node `1`, resulting in all nodes having the value 10. - The second operation queries the value of node `4`, which is `10`. - The third operation adds 5 to all nodes in the subtree rooted at node `2`, resulting in the values being updated to: Node `2` = 15, Node `4` = 15, Node `5` = 15. - The fourth operation queries the value of node `2`, which is `15`. - The fifth operation queries the value of node `3`, which remains `10`.","solution":"def tree_operations(n, m, edges, operations): from collections import defaultdict, deque # Step 1: Build the tree tree = defaultdict(list) for a, b in edges: tree[a].append(b) tree[b].append(a) # Step 2: Calculate the subtree sizes using DFS parent = [-1] * (n + 1) subtree_values = [0] * (n + 1) start_time = [0] * (n + 1) end_time = [0] * (n + 1) time = 1 nodes = [] def dfs(node, par): nonlocal time start_time[node] = time time += 1 nodes.append(node) subtree_size = 1 for neighbor in tree[node]: if neighbor == par: continue parent[neighbor] = node subtree_size += dfs(neighbor, node) end_time[node] = time - 1 return subtree_size dfs(1, -1) # Step 3 & 4: Perform the operations and answer the queries lazy = [0] * (n + 1) # Lazy propagation array result = [] for operation in operations: if operation[0] == 1: u, v = operation[1], operation[2] lazy[start_time[u]] += v if end_time[u] + 1 <= n: lazy[end_time[u] + 1] -= v else: u = operation[1] value = 0 for i in range(1, start_time[u] + 1): value += lazy[i] result.append(value) return result"},{"question":"You are given a grid of size n x m with some cells blocked. You need to determine the shortest path between two given cells in the grid. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next line contains two integers sr and sc (1 ≤ sr ≤ n, 1 ≤ sc ≤ m) — the starting cell coordinates (row, column). The next line contains two integers dr and dc (1 ≤ dr ≤ n, 1 ≤ dc ≤ m) — the destination cell coordinates (row, column). The following n lines contain m characters each, representing the grid. A character \'.\' indicates an open cell and a character \'#\' indicates a blocked cell. Print the length of the shortest path from the starting cell to the destination cell. If there is no path, print -1. You are allowed to move up, down, left, or right from any cell.","solution":"from collections import deque def shortest_path(n, m, sr, sc, dr, dc, grid): Find the shortest path in a grid between two cells. :param int n: number of rows in the grid :param int m: number of columns in the grid :param int sr: starting row :param int sc: starting column :param int dr: destination row :param int dc: destination column :param list[list[str]] grid: grid of open (\'.\') and blocked (\'#\') cells :return: length of the shortest path from (sr, sc) to (dr, dc), or -1 if no path exists :rtype: int # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # Initialize the visited set and the queue for BFS visited = set() queue = deque([(sr-1, sc-1, 0)]) # (row, col, distance) visited.add((sr-1, sc-1)) while queue: x, y, dist = queue.popleft() # Check if we\'ve reached the destination if (x, y) == (dr-1, dc-1): return dist # Explore all adjacent cells for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # No path found return -1"},{"question":"You are given an array of integers and you need to determine the number of unique pairs (i, j) where i < j and array[i] + array[j] is divisible by a given integer, k. Write a function that finds the number of such pairs. The function should take two inputs: 1. An array of n integers, `nums` (1 ≤ n ≤ 100, 1 ≤ nums[i] ≤ 100). 2. An integer k (1 ≤ k ≤ 10). The function should return the number of unique pairs (i, j) where 0 ≤ i < j < n and (nums[i] + nums[j]) % k == 0. Implement the function as follows: ```python def count_divisible_pairs(nums, k): # your code here ``` # Example **Input:** ```python nums = [1, 2, 3, 4, 5, 6] k = 3 ``` **Output:** ```python 5 ``` **Explanation:** The 5 pairs are: - (1, 2), as 1 + 2 = 3 which is divisible by 3 - (1, 5), as 1 + 5 = 6 which is divisible by 3 - (2, 4), as 2 + 4 = 6 which is divisible by 3 - (3, 6), as 3 + 6 = 9 which is divisible by 3 - (4, 5), as 4 + 5 = 9 which is divisible by 3","solution":"def count_divisible_pairs(nums, k): Returns the number of unique pairs (i, j) where i < j and nums[i] + nums[j] is divisible by k. count = 0 n = len(nums) for i in range(n): for j in range(i + 1, n): if (nums[i] + nums[j]) % k == 0: count += 1 return count"},{"question":"You are a member of the city\'s historic preservation office tasked with identifying historic buildings and their risk of collapse. To determine this, you have been provided with a dataset of buildings and their attributes. Each building is represented by its height, age, material quality, and the presence of maintenance records. Your goal is to categorize each building into one of three risk levels: Low, Medium, or High. The risk level is determined based on the following rules: - If the building is over 50 meters in height and has poor material quality, it is at High risk. - If the building is over 50 years old and has no maintenance records, it is also at High risk. - If the building has a medium material quality and its age is between 20 and 50 years, it is at Medium risk. - All other buildings are considered to be at Low risk. You need to write a program that reads the data for each building, assesses the risk level based on the rules provided, and outputs the risk assessment for each building. # Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of buildings. Each of the next n lines contains four values describing a building: - An integer hi (1 ≤ hi ≤ 200) — the height of the building in meters. - An integer ai (1 ≤ ai ≤ 200) — the age of the building in years. - A string mi — the material quality of the building, which is one of \\"poor\\", \\"medium\\", or \\"good\\". - A string mr — the maintenance record, which is either \\"yes\\" or \\"no\\". # Output For each building, print the risk level: \\"Low\\", \\"Medium\\", or \\"High\\". # Example Input ``` 4 55 60 poor no 45 55 medium yes 30 25 good no 60 45 poor yes ``` Output ``` High Medium Low Low ``` # Explanation - The first building is high risk due to being over 50 meters and having poor material quality. - The second building is medium risk because it is between 20 and 50 years old with medium material quality. - The third building is low risk as it doesn\'t meet any high or medium risk criteria. - The fourth building, despite being over 50 meters, has good material quality and maintenance records, putting it at low risk.","solution":"def assess_risk(n, buildings): results = [] for building in buildings: height, age, material_quality, maintenance_record = building if (height > 50 and material_quality == \\"poor\\") or (age > 50 and maintenance_record == \\"no\\"): results.append(\\"High\\") elif material_quality == \\"medium\\" and 20 < age <= 50: results.append(\\"Medium\\") else: results.append(\\"Low\\") return results"},{"question":"You are given a string consisting of lowercase English letters and \'?\' characters. Your task is to determine the length of the longest substring that can be made only using lowercase English letters by replacing the \'?\' characters with any lowercase English letter. The input consists of one line containing the string s (1 ≤ |s| ≤ 2000). Print one integer — the length of the longest resulting substring that only contains lowercase English letters. Example: Input: ab?c?de Output: 7 Explanation: By replacing each \'?\' with \'a\' or any other letter, the whole string \\"abacade\\" becomes a valid substring consisting solely of lowercase English letters. Hence, the length of the longest substring is 7.","solution":"def longest_valid_substring(s): Returns the length of the longest substring consisting of only lowercase English letters by replacing \'?\' with any lowercase English letter. # Replace all \'?\' with \'a\' to get a valid substring transformed_s = s.replace(\'?\', \'a\') return len(transformed_s)"},{"question":"You are given a string `s` consisting of lowercase Latin letters. We need to transform this string such that every character in the resulting string is the same character and we want to minimize the number of operations required. In one operation, you can choose a subsequence (not necessarily contiguous) of the original string and change all its characters to any character of your choice. Determine the minimum number of operations required to make all characters in the string `s` the same. # Input: - A single line containing string `s` (1 ≤ |s| ≤ 100000). # Output: - A single integer, the minimum number of operations required. # Sample Input 1: ``` abac ``` # Sample Output 1: ``` 2 ``` # Sample Input 2: ``` aaaa ``` # Sample Output 2: ``` 0 ``` # Note: - In the first sample, you can perform the following operations: convert the \\"bc\\" to \'a\', and then convert the last \'c\' to \'a\', resulting in the string \\"aaaa\\". - In the second sample, the string already consists of the same character, so no operations are needed.","solution":"def min_operations_to_unify_string(s): Returns the minimum number of operations required to make all characters in the string \'s\' the same. Parameters: s (str): a string consisting of lowercase Latin letters Returns: int: the minimum number of operations from collections import Counter char_count = Counter(s) max_frequency = max(char_count.values()) return len(s) - max_frequency"},{"question":"Given a string s containing only lowercase English letters, your task is to find the longest substring that contains exactly two distinct characters and return its length. # Input - A single string s (1 ≤ |s| ≤ 100,000) where |s| is the length of the string. # Output - A single integer representing the length of the longest substring with exactly two distinct characters. # Example Input ``` abcbbbbcccbdddadacb ``` Output ``` 10 ``` In this example, the longest substring with exactly two distinct characters is \\"bcbbbbcccb\\" which has a length of 10. # Notes - Consider using a sliding window approach to efficiently solve this problem. - Ensure the solution handles edge cases, such as when the input string is very short or when it contains fewer than two distinct characters.","solution":"def longest_substring_with_two_distinct_chars(s): Finds the length of the longest substring with exactly two distinct characters. Args: s (str): Input string containing only lowercase letters. Returns: int: Length of the longest substring with exactly two distinct characters. if len(s) < 2: return len(s) left = 0 right = 0 max_length = 0 char_map = {} while right < len(s): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"A company specializes in creating personalized exercise plans for its clients. Each exercise plan consists of a sequence of exercises designed to target specific muscle groups. Each exercise can be performed for a certain number of repetitions, and every muscle group has a minimum number of repetitions required to be effectively trained. The company collects feedback from clients regarding their adherence to exercise plans. They want to verify if a given exercise plan satisfies the minimum required repetitions for each muscle group when taking into account the client\'s feedback. Your task is to write a program that determines if the feedback check passes for an exercise plan based on the client\'s feedback. **Input:** The first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. For each test case: - The first line contains two integers e (1 ≤ e ≤ 50) — the number of exercises, and m (1 ≤ m ≤ 26) — the number of muscle groups. - The second line contains e space-separated integers rep_i (1 ≤ rep_i ≤ 100), where rep_i represents the number of repetitions for the i-th exercise. - The third line contains a string of length e representing the muscle groups for each exercise. Each character in the string is an uppercase letter from \'A\' to \'Z\' and represents the muscle group targeted by that exercise. - The fourth line contains m space-separated integers min_rep_j (1 ≤ min_rep_j ≤ 100), where min_rep_j is the minimum required repetitions for the j-th muscle group (0 ≤ j < m). **Output:** For each test case, output \\"YES\\" if the exercise plan satisfies the minimum required repetitions for each muscle group based on the client\'s feedback, and \\"NO\\" otherwise. **Example:** **Input:** ``` 2 4 2 5 10 15 20 AABB 15 25 3 3 8 8 8 XYZ 8 8 8 ``` **Output:** ``` YES NO ``` **Explanation:** In the first test case, the muscle group \'A\' (targeted by the first two exercises) has a total of 5 + 10 = 15 repetitions, which meets the minimum requirement of 15. The muscle group \'B\' (targeted by the last two exercises) has a total of 15 + 20 = 35 repetitions, which exceeds the minimum requirement of 25. Therefore, the output is \\"YES\\". In the second test case, the muscle group \'X\' has exactly 8 repetitions, but the muscle group \'Y\' has only 8 repetitions, which is less than the required 8 repetitions (no margin), and \'Z\' also meets the requirement with 8 repetitions. Since one of the muscle groups barely meets the exact count without exceeding it, the output is \\"NO\\".","solution":"def verify_exercise_plans(test_cases): result = [] for case in test_cases: e, m = case[\'e\'], case[\'m\'] repetitions = case[\'repetitions\'] muscle_groups = case[\'muscle_groups\'] min_reps = case[\'min_reps\'] muscle_rep_counts = {} for i in range(e): muscle_group = muscle_groups[i] rep = repetitions[i] if muscle_group in muscle_rep_counts: muscle_rep_counts[muscle_group] += rep else: muscle_rep_counts[muscle_group] = rep pass_test = True for i in range(m): muscle_group = chr(ord(\'A\') + i) if muscle_group in muscle_rep_counts: if muscle_rep_counts[muscle_group] < min_reps[i]: pass_test = False break else: if min_reps[i] > 0: pass_test = False break if pass_test: result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"Given a string, write a function that determines if you can make it a palindrome by removing exactly one character. If it is possible, return the index of the character that should be removed. If not, return -1. If there are multiple possible removals, return the smallest index. Input: - A string consisting of lowercase English letters (1 ≤ s.length ≤ 10^5) Output: - An integer representing the index of the character to be removed, or -1 if no such character exists. Example: Input: ``` abca ``` Output: ``` 1 ``` Explanation: Removing the character \'b\' at index 1 makes \\"aca\\", which is a palindrome.","solution":"def can_be_palindrome(s): Determines if the string can be made into a palindrome by removing exactly one character. Returns the index of the character to be removed, or -1 if not possible. def is_palindrome_range(i, j): return all(s[k] == s[j - k + i] for k in range(i, j)) n = len(s) for i in range(n // 2): if s[i] != s[n - 1 - i]: if is_palindrome_range(i + 1, n - 1 - i): return i elif is_palindrome_range(i, n - 2 - i): return n - 1 - i else: return -1 return -1 # the string is already a palindrome"},{"question":"Polina is trying to organize an event that spans over several days. She has a schedule of days specifying which days the event cannot be held due to other engagements. Polina needs your help to find the longest consecutive sequence of days during which the event can be held without interruption. You are given an integer n (1 le n le 10^5) representing the total number of days in the agenda and a list of k (0 le k le n) integers representing the days on which the event cannot be held. Days are given as integers from 1 to n. Output a single integer representing the length of the longest consecutive sequence of days on which the event can be scheduled without encountering a forbidden day. Input: - The first line contains two integers n and k. - The second line contains k distinct integers, each representing a day on which the event cannot be held. If there are no such days, the second line will be empty. Output: - A single integer representing the length of the longest consecutive sequence of available days. Example: Input: ``` 10 3 4 5 10 ``` Output: ``` 4 ``` Explanation: For the provided example, the days on which the event cannot be held are [4, 5, 10]. The longest sequence of consecutive available days is from day 6 to day 9, giving a length of 4.","solution":"def longest_event_days(n, forbidden_days): if not forbidden_days: return n forbidden_days.sort() max_length = 0 current_start = 1 for day in forbidden_days: if day > current_start: max_length = max(max_length, day - current_start) current_start = day + 1 if current_start <= n: max_length = max(max_length, n - current_start + 1) return max_length"},{"question":"Consider a string s consisting of lowercase English letters. A substring s[l..r] is called \\"lucky\\" if the number of distinct characters in this substring is equal to its length. For example, the substring \\"abc\\" is \\"lucky\\" because it contains 3 distinct characters, and its length is 3, but the substring \\"aa\\" is not \\"lucky\\" because it has 1 distinct character and its length is 2. Write a program to find the total number of \\"lucky\\" substrings in the given string s. The input consists of a single line, which contains the string s (1 ≤ |s| ≤ 100). Print a single integer — the total number of \\"lucky\\" substrings in the given string.","solution":"def count_lucky_substrings(s): Counts the number of lucky substrings in the given string s. A substring is lucky if the number of distinct characters in the substring is equal to its length. Parameters: s (str): The input string consisting of lowercase English letters. Returns: int: The number of lucky substrings in the string. n = len(s) lucky_count = 0 for i in range(n): seen = set() for j in range(i, n): if s[j] in seen: break seen.add(s[j]) if len(seen) == j - i + 1: lucky_count += 1 return lucky_count"},{"question":"You are given a string that consists of lowercase English letters. Your task is to determine the minimum number of characters needed to be removed to make the string a palindrome. A palindrome is a word that reads the same backward as forward. The first line contains a single integer t — the number of test cases (1 ≤ t ≤ 100). Each of the next t lines contains a string s (1 ≤ |s| ≤ 1000). For each string, output the minimum number of characters that need to be removed to make the string a palindrome. **Example** Input: ```plaintext 3 abc aebcbda abacaba ``` Output: ```plaintext 2 2 0 ``` **Explanation:** 1. To make \\"abc\\" a palindrome, we can remove \'a\' and \'c\', resulting in \\"b\\". 2. To make \\"aebcbda\\" a palindrome, we can remove \'e\' and \'d\', resulting in \\"abcba\\". 3. The string \\"abacaba\\" is already a palindrome, so 0 characters need to be removed. **Note:** To solve this problem efficiently, you can use dynamic programming to find the longest palindromic subsequence, and then subtract its length from the length of the original string to get the number of characters that need to be removed.","solution":"def min_removals_to_palindrome(s): Returns the minimum number of characters that need to be removed to make the string a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n+1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] else: dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1 return dp[0][n-1] def solve(test_cases): Solves the problem for the given test cases. results = [] for s in test_cases: results.append(min_removals_to_palindrome(s)) return results"},{"question":"You are given a list of n integers representing the heights of n buildings standing in a row. A building is considered a \\"good view\\" building if it is strictly taller than the buildings to its left. The leftmost building is always considered a \\"good view\\" building. Write a function to count the number of \\"good view\\" buildings. The function should take a list of integers as input and output the count of buildings with a good view. Function Signature: ```python def count_good_view_buildings(buildings: List[int]) -> int: ``` # Constraints - `1 <= n <= 2 * 10^5` - `1 <= buildings[i] <= 10^9` # Input - A single list of integers representing the heights of the buildings. # Output - An integer representing the count of buildings with a good view. # Example ```python >>> count_good_view_buildings([3, 7, 8, 3, 6, 1]) 3 >>> count_good_view_buildings([1, 2, 3, 4, 5]) 5 >>> count_good_view_buildings([5, 4, 3, 2, 1]) 1 ``` Note: - In the first example, the buildings with indices 1, 2, and 4 (0-based index) have a good view because their heights (7, 8, and 6 respectively) are greater than the building heights to their left. Thus the output is 3. - In the second example, all buildings have a good view because each subsequent building is taller than the previous one. Thus the output is 5. - In the third example, only the first building has a good view, as all subsequent buildings are shorter. Thus the output is 1.","solution":"def count_good_view_buildings(buildings): Returns the number of buildings with a good view. A building has a good view if it is strictly taller than any building to its left. The leftmost building is always considered to have a good view. :param buildings: List of integers representing the heights of the buildings. :return: Integer count of buildings with a good view. if not buildings: return 0 good_view_count = 1 # The leftmost building is always a good view building. max_height = buildings[0] for height in buildings[1:]: if height > max_height: good_view_count += 1 max_height = height return good_view_count"},{"question":"Given an integer array nums, you need to find the maximum sum obtainable of any continuous subarray of length k. The input array will contain at least one element and 1 ≤ k ≤ nums.length. You need to implement a function: ```python def maxSubarraySum(nums: List[int], k: int) -> int: ``` **Input:** - A list of integers `nums` where 1 ≤ nums.length ≤ 10^5 and -10^4 ≤ nums[i] ≤ 10^4. - An integer `k` where 1 ≤ k ≤ nums.length. **Output:** - Return a single integer, the maximum sum of any continuous subarray of length `k`. **Example:** 1. Input: `nums = [1, -2, 3, 4, -1, 2, 1, -5, 4]`, `k = 3` Output: `6` Explanation: The subarray with the maximum sum of length 3 is [3, 4, -1], which sums to 6. 2. Input: `nums = [5, 4, -1, 7, 8]`, `k = 2` Output: `15` Explanation: The subarray with the maximum sum of length 2 is [7, 8], which sums to 15. Note: - You may assume that the result will always fit in a 32-bit integer.","solution":"def maxSubarraySum(nums, k): Returns the maximum sum obtainable of any continuous subarray of length k. if not nums or k <= 0 or k > len(nums): return 0 current_sum = sum(nums[:k]) max_sum = current_sum for i in range(k, len(nums)): current_sum = current_sum + nums[i] - nums[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a list of N integers representing the grades of students in a class. The teacher decides to give a special award to students who have the highest grade. The task is to determine how many students will receive the award. Write a program that: - Receives the number of students (1 leq N leq 10^{5}) and their respective grades (1 leq text{Grade} leq 100). - Outputs the count of students who have the highest grade. # Input The input consists of two lines: - The first line contains an integer N, the number of students. - The second line contains N integers separated by space, representing the grades of the students. # Output Output the number of students who have the highest grade. # Example **Input:** ``` 5 4 5 6 6 2 ``` **Output:** ``` 2 ``` **Explanation:** The highest grade is 6 and there are 2 students with this grade, so the output is 2. **Note:** Make sure that your solution efficiently handles the given constraints, especially for the upper limits of the input size.","solution":"def count_highest_grade_students(N, grades): Count the number of students who have the highest grade. Parameters: N (int): Number of students grades (list of int): List of grades Returns: int: Number of students with the highest grade highest_grade = max(grades) count = grades.count(highest_grade) return count"},{"question":"Alex is an engineer in the futuristic city of TechVille, known for its advanced robotic infrastructure. As part of a new initiative, TechVille wants to streamline the traffic flow of its robot population. The city’s transport authority has designated several charging stations along the primary transportation axis, represented as a line with charging stations at specific integer coordinates. To optimize the charging times, the transport authority aims to identify the longest sequence of charging stations such that each consecutive station in the sequence is at least a certain distance d from the previous one. The input is given as follows: - The first line contains two integers m (2 ≤ m ≤ 100000), representing the total number of charging stations, and d (1 ≤ d ≤ 100000), representing the minimum required distance. - The second line contains m distinct integers x1, x2, ..., xm (0 ≤ xi ≤ 10^9), representing the coordinates of the charging stations. Write a program to determine the longest sequence of charging stations where each consecutive station is at least distance d apart. Output the length of this longest sequence. Example: Input: 6 4 1 3 5 7 9 11 Output: 3 Explanation: One possible longest sequence is {1, 5, 9}, which keeps the minimum distance of 4 between consecutive stations.","solution":"def longest_sequence_of_stations(m, d, stations): Returns the length of the longest sequence of charging stations such that each consecutive station in the sequence is at least distance d apart. Args: m: int - the number of charging stations. d: int - the minimum required distance between consecutive stations. stations: list of int - the coordinates of the charging stations. Returns: int - the length of the longest sequence. # Sort the list of stations to process them in order stations.sort() length = 1 # Start with the first station last_station = stations[0] for i in range(1, m): if stations[i] - last_station >= d: length += 1 last_station = stations[i] return length"},{"question":"Emilia is learning about matrix operations in her mathematics class. One particular concept that she finds interesting is the diagonal sums of a matrix. The diagonal sums of an `n x n` matrix are defined as the sum of all the elements in its main diagonal and antidiagonal (also known as the secondary diagonal). An element is part of the main diagonal if its row index equals its column index, and part of the antidiagonal if the sum of its row index and column index equals `n-1`. Emilia wants to automate the process of calculating these sums using a program. Given a square matrix of size `n`, help Emilia by writing a program that finds the sum of the main diagonal and the sum of the antidiagonal. Note: If an element is at the intersection of the main diagonal and antidiagonal, consider it in the sum for both diagonals. # Input The first line contains a single integer `n` (1 <= n <= 500) — the size of the matrix. The next `n` lines contain `n` integers each, representing the elements of the matrix. Each integer is between `-10^9` and `10^9`. # Output Output two integers — the sum of elements in the main diagonal and the sum of elements in the antidiagonal. # Example Input ``` 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 15 15 ``` In this example, main diagonal elements are `[1, 5, 9]` and their sum is `1+5+9 = 15`. The antidiagonal elements are `[3, 5, 7]` and their sum is `3+5+7 = 15`.","solution":"def diagonal_sums(matrix): Calculate the sums of the main diagonal and the antidiagonal of a square matrix. n = len(matrix) main_diagonal_sum = 0 anti_diagonal_sum = 0 for i in range(n): main_diagonal_sum += matrix[i][i] anti_diagonal_sum += matrix[i][n - i - 1] return main_diagonal_sum, anti_diagonal_sum"},{"question":"A group of adventurers is creating a treasure map. They described a coordinate system with points labeled by coordinates (x, y). However, they forgot to mark which points contain treasure and which are empty. You need to write a program to determine if a queried point contains treasure or not. The first line contains a single integer n (1 <= n <= 5000), the number of points with known treasure locations. The following n lines each contain two integers xi and yi, representing the coordinates of a point with treasure. The next line contains a single integer q (1 <= q <= 5000), the number of points to be queried. The following q lines each contain two integers xi and yi, representing the coordinates of a point to be queried. For each queried point, output \\"Treasure\\" if this point contains treasure, otherwise, output \\"Empty\\". Note: Coordinate values are integers and can be negative. The absolute value of coordinates will not exceed 1,000,000. You can print each letter in any case (upper or lower).","solution":"def determine_treasure_locations(treasure_points, query_points): treasure_set = set((x, y) for x, y in treasure_points) result = [] for x, y in query_points: if (x, y) in treasure_set: result.append(\\"Treasure\\") else: result.append(\\"Empty\\") return result"},{"question":"You are given a list of numbers, which might contain duplicates. Your task is to find all unique triplets in the list which give the sum equal to zero. Each triplet should be in non-descending order and the output should be a list of such triplets in ascending lexicographic order. The function signature should be: ```python def three_sum(nums: List[int]) -> List[List[int]]: ``` # Input - A list of integers, `nums` (-10^5 leq nums[i] leq 10^5). - The length of the list will not exceed 3000. # Output - A list of unique triplets, where each triplet is a list of three integers that add up to zero. # Example Input ```plaintext [-1, 0, 1, 2, -1, -4] ``` Output ```plaintext [[-1, -1, 2], [-1, 0, 1]] ``` # Note - The output list must be in lexicographical order. - The individual triplets within the output list should be in non-descending order. - The same list of three numbers must not appear multiple times. # Explanation For the given input, the two triplets that sum to zero are: - (-1, 0, 1) - (-1, -1, 2) These triplets are output in the required lexicographical and non-descending order. # Constraints - The elements in the list `nums` can range from negative to positive values, and the list might include both extremes. - Ensure an optimal solution in terms of time complexity to handle large inputs efficiently. Implement the function to correctly solve the problem in all given constraints.","solution":"from typing import List def three_sum(nums: List[int]) -> List[List[int]]: nums.sort() res = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s == 0: res.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif s < 0: left += 1 else: right -= 1 return res"},{"question":"Devu and his friends are planning a party. They have a list of n songs that they can play during the party, and each song has a specific length in minutes. Devu wants to create a playlist such that the total length of the playlist is exactly T minutes. Devu\'s friends have suggested some constraints: adjacent songs in the playlist must have different lengths. You are to help Devu find out if it is possible to create such a playlist with the given constraints. If it is possible, print \\"Yes\\". Otherwise, print \\"No\\". The first line of the input contains two integers n and T (1 ≤ n ≤ 100, 1 ≤ T ≤ 10000). The second line contains n space-separated integers representing the lengths of the songs in minutes (1 ≤ length ≤ 100). The input guarantees that the total sum of the song lengths will be greater than T. # Sample Input 1 ``` 4 10 3 5 3 4 ``` # Sample Output 1 ``` Yes ``` # Sample Input 2 ``` 3 10 5 5 5 ``` # Sample Output 2 ``` No ``` # Explanation: In the first example, Devu can create a playlist of 10 minutes by playing the songs in the order of 3, 4, and 3 (or other valid permutations) while meeting the length constraint. In the second example, all songs have the same length, so it is not possible to create a valid playlist. The output should match the required constraints.","solution":"def can_create_playlist(n, T, song_lengths): def backtrack(current_sum, prev_length, index, used): if current_sum == T: return True if current_sum > T or index == n: return False for i in range(n): if used[i]: continue if song_lengths[i] != prev_length: used[i] = True if backtrack(current_sum + song_lengths[i], song_lengths[i], index + 1, used): return True used[i] = False return False used = [False] * n return \\"Yes\\" if backtrack(0, -1, 0, used) else \\"No\\""},{"question":"Tyrion is planning a grand banquet and has to organize n guests seated at a round table. Each guest has a specific friend, and he wants to ensure that no two guests who are friends are seated next to each other. Also, each guest must have a unique and distinct seat. Given the number of guests n and a list of pairs representing direct friendships, help Tyrion find out if it is possible to arrange the guests according to these rules, and if so, provide one such arrangement, or indicate that it is not possible to comply with the constraints. The first line of input contains an integer n (3 ≤ n ≤ 100) — the number of guests. Each of the next lines contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b) — representing that a and b are friends. Output \\"YES\\" if such an arrangement is possible, followed by a space-separated sequence of integers representing one such arrangement of the guests around the table. If there are multiple valid arrangements, output any of them. If it is not possible, output \\"NO\\". For example, given 5 guests and friendships expressed as pairs: (1, 2), (2, 3), (3, 4), and (4, 5), the possible arrangements are: - YES - 2 4 1 3 5 (or any other valid permutation that satisfies the conditions) If arranging is not possible, output: - NO","solution":"def is_possible_arrangement(n, friendships): from collections import defaultdict, deque # Create a graph representation graph = defaultdict(list) for a, b in friendships: graph[a].append(b) graph[b].append(a) # Function to perform BFS and check for bipartite graph def bfs_check_bipartite(): color = [-1] * (n + 1) for start in range(1, n + 1): if color[start] == -1: queue = deque([start]) color[start] = 0 while queue: current = queue.popleft() for neighbor in graph[current]: if color[neighbor] == -1: color[neighbor] = 1 - color[current] queue.append(neighbor) elif color[neighbor] == color[current]: return False return True # Check if the graph is bipartite, which is a requirement for a valid arrangement if not bfs_check_bipartite(): return \\"NO\\" # If bipartite, organize the arrangement based on colors arrangement = [] color = [-1] * (n + 1) for start in range(1, n + 1): if color[start] == -1: queue = deque([start]) color[start] = 0 group1, group2 = [], [] while queue: current = queue.popleft() if color[current] == 0: group1.append(current) else: group2.append(current) for neighbor in graph[current]: if color[neighbor] == -1: color[neighbor] = 1 - color[current] queue.append(neighbor) arrangement.extend(group1) arrangement.extend(group2) return \\"YES \\" + \\" \\".join(map(str, arrangement))"},{"question":"You are given a rectangular grid with dimensions n x m. Initially, a snake of length k occupies k consecutive cells in the grid. The snake can move in four possible directions: up, down, left, and right. The goal is to determine whether the snake can reach from its starting position to a target cell (Tx, Ty) by making at most l moves. However, the snake must always remain inside the grid and cannot overlap itself during movements. Formally, you need to answer whether the snake can move from its initial position with its head at (Sx, Sy) and its tail extending k cells (either horizontally or vertically) to the cell (Tx, Ty) within l moves, while satisfying the described constraints. You are given the dimensions of the grid, the snake’s initial head position, its length, the number of allowed moves, and the target cell position. The input consists of a single line containing seven integers: n, m, Sx, Sy, k, l, Tx, and Ty. - n, m (1 ≤ n, m ≤ 100): the number of rows and columns of the grid. - Sx, Sy (1 ≤ Sx, Sy ≤ n, m): the initial head position of the snake. - k (1 ≤ k ≤ min(n, m)): the length of the snake. - l (1 ≤ l ≤ 1000): the maximum number of moves allowed. - Tx, Ty (1 ≤ Tx, Ty ≤ n, m): the target position of the snake’s head. The output should be a single line: - \\"YES\\" if it is possible for the snake’s head to reach (Tx, Ty) within l moves without crossing the grid’s boundaries or overlapping its body. - \\"NO\\" otherwise. Examples: Input: 10 10 3 4 5 20 7 6 Output: YES Input: 5 5 3 3 4 3 5 5 Output: NO","solution":"def can_snake_reach(n, m, Sx, Sy, k, l, Tx, Ty): Determines whether the snake can move from the starting position to the target position within l moves while staying within grid boundaries and without overlapping itself. import math def manhattan_distance(x1, y1, x2, y2): return abs(x1 - x2) + abs(y1 - y2) min_moves_required = manhattan_distance(Sx, Sy, Tx, Ty) if min_moves_required > l: return \\"NO\\" if (l - min_moves_required) % 2 != 0: return \\"NO\\" return \\"YES\\""},{"question":"Ailana is studying a line of trees planted along a straight path. Each tree is represented by its position on the path, given as an integer. She wants to know if there exists a symmetric segment of trees with respect to the center of this path. A segment of trees is considered symmetric if both ends of the segment contain trees, and the arrangement of trees is the same starting from both ends towards the center. The first line contains a single integer n (1 leq n leq 10^5) — the number of trees. The second line contains n space-separated integers p_1, p_2, ldots, p_n (1 leq p_i leq 10^9) — the positions of trees along the path. The positions are given in increasing order. Output \\"Yes\\" if there exists a symmetric segment of trees; otherwise, print \\"No\\". You can output each letter in any case (upper or lower). **Example 1:** Input: ``` 5 1 2 4 7 9 ``` Output: ``` No ``` **Example 2:** Input: ``` 6 1 3 4 6 7 9 ``` Output: ``` Yes ``` In the second example, the segment [3, 4, 6, 7] is symmetric around the center of this segment.","solution":"def is_symmetric_segment(n, positions): Determines if there is a symmetric segment of trees in the given positions. :param n: int, number of trees :param positions: list of int, positions of trees :return: str, \\"Yes\\" if there is a symmetric segment, \\"No\\" otherwise left = 0 right = n - 1 while left < right: if positions[left] != positions[right]: return \\"No\\" left += 1 right -= 1 return \\"Yes\\" if n > 1 else \\"No\\""},{"question":"In a magical land, there are two groups of warriors. Each group is led by a commander. Each warrior is positioned at distinct integer coordinates along the x-axis, and each commander is positioned at a unique, but not necessarily integer, coordinate on the x-axis. The goal of each commander is to cast spells to protect their warriors by aligning their position such that the total distance between each commander and their respective warriors is minimized. Your task is to determine the optimal positions of both commanders to achieve the minimal total distance for each commander to all warriors under their command. The first line contains two integers n and m (1 le n, m le 80), the number of warriors under the first commander and the number of warriors under the second commander, respectively. The second line contains n distinct integers x_{1,1}, x_{1,2}, ldots, x_{1,n} (|x_{1,i}| le 10,000) — the positions of the warriors under the first commander. The third line contains m distinct integers x_{2,1}, x_{2,2}, ldots, x_{2,m} (|x_{2,i}| le 10,000) — the positions of the warriors under the second commander. Print two floating-point numbers, each to six decimal points of precision, representing the optimal positions of the first and second commanders respectively. Example: Input: 4 3 1 2 3 4 8 9 10 Output: 2.500000 9.000000 Here, the optimal position for the first commander is halfway between the range of warriors\' positions (i.e., between 1 and 4), and for the second commander, it is the average of 8, 9, and 10.","solution":"def find_optimal_commander_position(x): Finds the optimal position for a commander to minimize the total distance to their warriors. The optimal position lies at the median of the coordinates of the warriors. x.sort() n = len(x) if n % 2 == 1: return float(x[n // 2]) else: return (x[n // 2 - 1] + x[n // 2]) / 2.0 def optimal_commander_positions(n, m, first_warriors, second_warriors): Given the number of warriors and their positions, determine the optimal positions for both commanders. pos1 = find_optimal_commander_position(first_warriors) pos2 = find_optimal_commander_position(second_warriors) return pos1, pos2"},{"question":"You are given a sequence of integers, and you need to determine the smallest subarray (i.e., shortest contiguous subsequence) such that the sum of its elements is at least a given value. Each query will provide you with an array of integers and a target sum k, and your task is to compute the length of the smallest subarray such that the sum of its elements is at least k. If no such subarray exists, return -1 for that query. The first line contains one integer q (1 le q le 10^4) — the number of queries. The first line of each query contains two integers n and k (1 le n le 10^5, 1 le k le 10^9) — the number of elements in the array and the target sum, respectively. The second line of each query contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. It is guaranteed that the sum of all n over all queries does not exceed 10^5. For each query, print a single integer in a single line — the length of the smallest subarray whose sum is at least k, or -1 if no such subarray exists. # Example Input: ``` 2 6 7 2 3 1 2 4 3 5 11 1 2 3 4 5 ``` Output: ``` 2 3 ``` # Explanation In the first query, the smallest subarray with sum at least 7 is `[4, 3]`, which has length 2. In the second query, the smallest subarray with sum at least 11 is `[3, 4, 4]`, which has length 3.","solution":"def smallest_subarray_length(q, queries): results = [] for query in queries: n, k, arr = query left = 0 s = 0 min_length = float(\'inf\') for right in range(n): s += arr[right] while s >= k: min_length = min(min_length, right - left + 1) s -= arr[left] left += 1 if min_length == float(\'inf\'): results.append(-1) else: results.append(min_length) return results"},{"question":"You are given a list of strings and a pattern string. Write a function that determines if the pattern string can be constructed from any permutation of the strings in the list. A string can be used multiple times for constructing the pattern string, and you can use substrings formed by taking characters from the beginning or the end of the string or the whole string as per your requirement. The first line of the input contains a single integer n (1 ≤ n ≤ 100), the number of strings in the list. Each of the next n lines contains a non-empty string with a length of at most 1000 characters. The last line contains the pattern string, which has a length of at most 1000 characters. If it is possible to construct the pattern string, print \\"Yes\\". Otherwise, print \\"No\\". Example Input: 3 abc de fgh cdabef Example Output: Yes","solution":"from collections import Counter def can_construct_pattern(strings, pattern): Determines if the pattern string can be constructed from any permutation of the strings in the list. # Combine all characters in the list of strings combined_chars = Counter() for string in strings: combined_chars += Counter(string) # Character count of the pattern string pattern_counter = Counter(pattern) # Check if each character in the pattern can be covered by the combined characters count for char, count in pattern_counter.items(): if combined_chars[char] < count: return \\"No\\" return \\"Yes\\""},{"question":"You are given a grid of size `n x m` with binary values (0 or 1). Your task is to count the number of distinct islands in the grid. An island is defined as a group of 1\'s (representing land) connected horizontally or vertically (not diagonally). The grid can be represented as a list of lists. The function should return an integer representing the number of distinct islands in the grid. **Input:** - An integer `n` representing the number of rows in the grid. - An integer `m` representing the number of columns in the grid. - A list of lists `grid` representing the `n x m` grid where each element is either 0 or 1. **Output:** - An integer representing the number of distinct islands. **Function Signature:** ```python def count_islands(n: int, m: int, grid: List[List[int]]) -> int: ``` **Example:** ```python n = 4 m = 5 grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [0, 0, 0, 0, 0] ] assert count_islands(n, m, grid) == 2 ``` **Note:** - In the example above, there are two distinct islands. The first island is formed by the 1\'s in the top-left corner and the second island is formed by the 1\'s in the middle-right part of the grid.","solution":"def count_islands(n, m, grid): Return the number of distinct islands in the grid. An island is a group of connected 1\'s (horizontally or vertically connected). def dfs(x, y): # Boundary and base case checks if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 0: return # Mark the land as visited grid[x][y] = 0 # Traverse all four possible directions (up, down, left, right) dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: island_count += 1 dfs(i, j) return island_count"},{"question":"Sara is organizing a string transformation contest. The participants are required to convert one given string `s1` into another string `s2` using a set of operations. The allowed operations are: 1. Append a single character to the end of the string. 2. Delete the last character of the string. 3. Replace the last character of the string with a different character. Given two strings `s1` and `s2` of length `n` (1 ≤ n ≤ 100), determine the minimum number of operations required to transform `s1` into `s2`. You need to implement a function that takes two strings `s1` and `s2`, and returns the minimum number of operations required. Print the result. Input: ``` s1: abc s2: xyz ``` Output: ``` 3 ``` In the given example, transforming \\"abc\\" to \\"xyz\\" requires three replacement operations: replace \'a\' with \'x\', \'b\' with \'y\', and \'c\' with \'z\'.","solution":"def min_operations(s1, s2): Calculates the minimum number of operations to transform string s1 into s2. if len(s1) != len(s2): raise ValueError(\\"The lengths of s1 and s2 must be the same\\") operations = 0 # Iterate through both strings for i in range(len(s1)): if s1[i] != s2[i]: # If characters are different, a replace operation is needed operations += 1 return operations # Example usage # s1 = \\"abc\\" # s2 = \\"xyz\\" # print(min_operations(s1, s2)) # Output: 3"},{"question":"You are given a grid with n rows and m columns, where each cell may contain an integer (positive, negative, or zero). Your task is to determine, for each of the p queries, the sum of the integers within a specified rectangular subgrid. A query is described by four integers r1, c1, r2, and c2, which represent the top-left (r1, c1) and bottom-right (r2, c2) corners of the subgrid (both inclusive). Write a program to process the queries efficiently. Input Format: - The first line contains three integers, n, m, and p (1 ≤ n, m ≤ 1,000; 1 ≤ p ≤ 10,000) - the number of rows, columns, and queries, respectively. - The next n lines contain m integers each, representing the grid. - The next p lines contain four integers each, r1, c1, r2, and c2 (1 ≤ r1 ≤ r2 ≤ n; 1 ≤ c1 ≤ c2 ≤ m) - the coordinates for each query. Output Format: - For each query, print a single integer representing the sum of the integers within the specified subgrid. Example: Input: ``` 3 3 2 1 2 3 4 5 6 7 8 9 1 1 2 2 2 2 3 3 ``` Output: ``` 12 28 ``` Explanation: - The sum of integers within the subgrid from (1, 1) to (2, 2) is: 1 + 2 + 4 + 5 = 12. - The sum of integers within the subgrid from (2, 2) to (3, 3) is: 5 + 6 + 8 + 9 = 28.","solution":"def precompute_prefix_sum(grid): n = len(grid) m = len(grid[0]) prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = (grid[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1]) return prefix_sum def query_sum(prefix_sum, r1, c1, r2, c2): return (prefix_sum[r2][c2] - prefix_sum[r1 - 1][c2] - prefix_sum[r2][c1 - 1] + prefix_sum[r1 - 1][c1 - 1]) def process_queries(n, m, grid, queries): prefix_sum = precompute_prefix_sum(grid) results = [] for r1, c1, r2, c2 in queries: results.append(query_sum(prefix_sum, r1, c1, r2, c2)) return results"},{"question":"A conference center has multiple meeting rooms available for booking, and they want to develop a system to prevent scheduling conflicts. Your task is to implement a function that checks whether a new meeting can be scheduled in a given room without conflicts based on the existing bookings. Each booking is represented as a tuple (start_time, end_time) where start_time and end_time are non-negative integers representing the start and end times of the meeting. A new meeting can be scheduled if it does not overlap with any of the existing bookings in that room. Write a function `can_schedule(existing_bookings, new_meeting)` that takes in two parameters: 1. `existing_bookings`: a list of existing bookings for a room, where each booking is a tuple (start_time, end_time). 2. `new_meeting`: a tuple representing the meeting you want to schedule. Return `True` if the new meeting can be scheduled without overlapping with any existing bookings, otherwise return `False`. **Function Signature:** ```python def can_schedule(existing_bookings: List[Tuple[int, int]], new_meeting: Tuple[int, int]) -> bool: ``` **Example:** ```python existing_bookings = [(1, 3), (5, 8), (10, 15)] new_meeting = (3, 5) print(can_schedule(existing_bookings, new_meeting)) # Output: True existing_bookings = [(1, 3), (5, 8), (10, 15)] new_meeting = (2, 6) print(can_schedule(existing_bookings, new_meeting)) # Output: False ``` **Constraints:** - The start time and end time of each meeting are non-negative integers where start_time < end_time. - The list of existing bookings can contain up to 1000 bookings. - The maximum value for start_time and end_time can be up to 10^6.","solution":"from typing import List, Tuple def can_schedule(existing_bookings: List[Tuple[int, int]], new_meeting: Tuple[int, int]) -> bool: Determines if a new meeting can be scheduled without overlapping with existing bookings. Args: existing_bookings (List[Tuple[int, int]]): List of existing bookings, each as a (start_time, end_time) tuple. new_meeting (Tuple[int, int]): Tuple representing the new meeting to be scheduled. Returns: bool: True if the new meeting can be scheduled without conflicts, otherwise False. new_start, new_end = new_meeting for start, end in existing_bookings: if not (new_end <= start or new_start >= end): return False return True"},{"question":"Darko has an array b consisting of m integers. He wishes to find the maximum sum of any contiguous subarray. The first line contains a single integer m (1 le m le 100) — the number of elements in Darko\'s array. The following line contains a sequence b_1, b_2, dots, b_m (-1,000 le b_i le 1,000) — Darko\'s array elements. Return a single integer — the maximum sum of any contiguous subarray in Darko\'s array. In the first example, for the array [3, -2, 5, -1], the maximum sum is 6 (from subarray [3, -2, 5]). In the second example, for the array [-1, -2, -3, -4], the maximum sum is -1 (from subarray [-1]). In the third example, for the array [2, 3, -1, 2, -1], the maximum sum is 6 (from subarray [2, 3, -1, 2]).","solution":"def max_contiguous_subarray_sum(m, b): Returns the maximum sum of any contiguous subarray in the array b. Parameters: - m: an integer representing the number of elements in the array. - b: a list of integers representing the array elements. Returns: - an integer representing the maximum sum of any contiguous subarray. max_so_far = float(\'-inf\') max_ending_here = 0 for num in b: max_ending_here += num if max_so_far < max_ending_here: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far"},{"question":"You are given a rectangular grid consisting of \'0\'s (empty cell) and \'1\'s (occupied cell). Your task is to find the maximum area of a rectangle (containing only \'1\'s) in the grid. Write a function `maximalRectangle(grid)` that takes as an input a 2D list (list of lists) representing the grid and returns an integer representing the area of the largest rectangle that can be formed with \'1\'s in the grid. Function Signature ```python def maximalRectangle(grid: List[List[str]]) -> int: ``` Input - grid: A 2D list of size m x n, where `1 <= m, n <= 200` and each element is either \'0\' or \'1\'. Output - An integer representing the area of the largest rectangle containing only \'1\'s. Example Input ``` grid = [ [\'1\', \'0\', \'1\', \'0\', \'0\'], [\'1\', \'0\', \'1\', \'1\', \'1\'], [\'1\', \'1\', \'1\', \'1\', \'1\'], [\'1\', \'0\', \'0\', \'1\', \'0\'] ] ``` Output ``` 6 ``` Explanation: From the given grid, the largest rectangle of \'1\'s has an area of 6 (3 rows by 2 columns). One of the largest rectangles is formed by the cells: ``` 2nd row: grid[1][2], grid[1][3] 3rd row: grid[2][1], grid[2][2], grid[2][3] 4th row: grid[2][1], grid[2][2], grid[2][3], grid[2][4] ``` Note that in this problem, an optimal solution will run in O(m*n) time complexity.","solution":"def maximalRectangle(grid): if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) heights = [0] * n max_area = 0 def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) heights.pop() return max_area for row in grid: for j in range(n): heights[j] = heights[j] + 1 if row[j] == \'1\' else 0 max_area = max(max_area, largestRectangleArea(heights)) return max_area"},{"question":"You are given a sequence of integers where each element in the sequence is guaranteed to appear at least once, except for one element which appears exactly twice. Your task is to find that element which is the duplicate. Input: A single line containing N space-separated integers where N is the length of the sequence (2 ≤ N ≤ 10^6) and the integers are in the range [1, N-1]. Output: A single integer which is the duplicate in the sequence. Example: Suppose the input is: 4 3 6 5 3 1 2 Expected Output: 3","solution":"def find_duplicate(nums): Returns the duplicate number from the list of integers. Args: nums: List[int] - A list of integers where one element appears exactly twice. Returns: int - The duplicate integer. num_set = set() for num in nums: if num in num_set: return num num_set.add(num)"},{"question":"Given a grid of size n by n filled with non-negative integers, find the length of the shortest path from the top-left corner to the bottom-right corner, knowing that you can only move right or down at any point in time. You are also provided with a threshold value k, which limits the maximum change in the value between two adjacent cells for a move to be considered valid. A path is valid if for every step in the path, the absolute difference between the values of two adjacent cells is less than or equal to k. The input consists of: - An integer n (1 ≤ n ≤ 100) representing the side length of the square grid. - An integer k (0 ≤ k ≤ 100) representing the maximum allowed change in cell values between two adjacent cells. - An n x n grid of integers, where each cell\'s value V (0 ≤ V ≤ 1000). Output a single integer: the length of the shortest valid path from the top-left to the bottom-right corner of the grid, or -1 if no such path exists. **Examples:** _Input:_ ``` 3 2 1 3 5 1 8 3 2 3 4 ``` _Output:_ ``` 5 ``` Explanation: The valid path is 1 -> 1 -> 2 -> 3 -> 4 with the path length being 4 steps. _Input:_ ``` 3 0 1 1 1 2 9 1 1 1 3 ``` _Output:_ ``` -1 ``` Explanation: No valid path exists due to the constraint on the maximum change in value (k = 0).","solution":"from collections import deque def shortest_valid_path(n, k, grid): Finds the shortest path from top-left to bottom-right in the grid where the absolute difference between cells\' values in adjacent cells is less than or equal to k. Parameters: n (int): The size of the grid (n x n). k (int): The maximum allowed change in cell values between adjacent cells. grid (List[List[int]]): The n x n grid of non-negative integers. Returns: int: The length of the shortest valid path or -1 if no valid path exists. # Directions for right and down movements directions = [(0, 1), (1, 0)] # A deque to perform BFS queue = deque([(0, 0, 1)]) # (x, y, path_length) visited = set((0, 0)) while queue: x, y, path_length = queue.popleft() # If we reached the bottom-right corner if x == n - 1 and y == n - 1: return path_length for dx, dy in directions: new_x, new_y = x + dx, y + dy # Check if the new position is within grid bounds if 0 <= new_x < n and 0 <= new_y < n: if abs(grid[new_x][new_y] - grid[x][y]) <= k: if (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append((new_x, new_y, path_length + 1)) # If no valid path is found return -1 # Example usage # n = 3 # k = 2 # grid = [ # [1, 3, 5], # [1, 8, 3], # [2, 3, 4] # ] # Output should be 5"},{"question":"You are tasked with constructing a unique word ladder as part of a programming challenge. A word ladder is a sequence of words in which the transformation from one word to the next requires changing exactly one letter. The challenge requires you to find the shortest such transformation sequence. Given a begin word, an end word, and a dictionary of words, write a function that returns the length of the shortest transformation sequence from begin word to end word, by changing only one letter at a time and ensuring each transformed word must exist in the dictionary. If no such sequence exists, return 0. It is guaranteed that all words have the same length. Only one letter can be changed at a time. Input: - A string `beginWord` - A string `endWord` - An array of strings `wordList` Output: - An integer representing the length of the shortest transformation sequence from begin word to end word, or 0 if no such sequence exists. Example: - Input: `beginWord = \\"hit\\"`, `endWord = \\"cog\\"`, `wordList = [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"]` - Output: 5 - Explanation: One shortest transformation is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\", which is 5 steps. Function signature: ```python def ladderLength(beginWord: str, endWord: str, wordList: List[str]) -> int: pass ```","solution":"from collections import deque from typing import List def ladderLength(beginWord: str, endWord: str, wordList: List[str]) -> int: Finds the length of the shortest transformation sequence from beginWord to endWord. if endWord not in wordList: # if the end word is not in the word list, return 0 return 0 wordList = set(wordList) # convert list to set for O(1) lookups queue = deque([(beginWord, 1)]) # initialize queue with beginWord and level 1 while queue: current_word, level = queue.popleft() if current_word == endWord: # we have found the end word return level for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in wordList: wordList.remove(next_word) queue.append((next_word, level + 1)) return 0"},{"question":"In a remote village, people live by growing crops. However, the fields of the village are prone to plant diseases. To prevent a disease outbreak, the village chief has decided to track the health of each field by using a binary sensor system. Each field has a sensor that can detect disease presence and reports it as either 0 (no disease) or 1 (disease detected). The village is divided into **n** fields in a straight line, numbered from 1 to n. The chief wants to monitor the number of fields with disease and the relation between them. One particular statistic of interest is the maximum number of adjacent fields that show no disease. Given the sensor data, help the village chief by implementing a program that will determine this statistic. The first line of input contains a single integer **n** (1 ≤ n ≤ 5000) — the number of fields in the village. The second line contains **n** integers, each being either 0 or 1, representing the disease status of each field. Output a single integer — the maximum number of consecutive fields without disease presence. **Input example:** ``` 10 1 0 0 1 0 0 0 0 1 0 ``` **Output example:** ``` 4 ``` Explanation: In the sample input, the longest consecutive stretch of fields without disease is from the 5th field to the 8th field, which consists of 4 fields.","solution":"def max_consecutive_no_disease(n, fields): Computes the maximum number of consecutive fields without disease. Args: n (int): The number of fields. fields (list of int): The disease status of each field (0 for no disease, 1 for disease). Returns: int: The maximum number of consecutive fields without disease. max_streak = 0 current_streak = 0 for field in fields: if field == 0: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 0 return max_streak"},{"question":"A company\'s internal library system stores information about books. Each book is characterized by its title, author, a unique ISBN number, and the year of publication. The library wants to introduce a new feature that allows users to quickly retrieve information about a book by searching for its ISBN number. You need to implement the function `search_library(isbn, library)`, where `isbn` is the ISBN number of the book to be found, and `library` is a list of dictionaries, each representing a book with the following keys: - \'title\': a string representing the title of the book, - \'author\': a string representing the author of the book, - \'isbn\': a string representing the ISBN number of the book, - \'year\': an integer representing the year of publication. Your function should return the dictionary representing the book with the given ISBN number. If the book is not found, return a string \\"Book not found\\". Example: ```python library = [ {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'isbn\': \'1234567890\', \'year\': 1960}, {\'title\': \'1984\', \'author\': \'George Orwell\', \'isbn\': \'1234567891\', \'year\': 1949}, {\'title\': \'The Catcher in the Rye\', \'author\': \'J.D. Salinger\', \'isbn\': \'1234567892\', \'year\': 1951} ] search_library(\'1234567891\', library) # Output: {\'title\': \'1984\', \'author\': \'George Orwell\', \'isbn\': \'1234567891\', \'year\': 1949} search_library(\'0000000000\', library) # Output: \\"Book not found\\" ``` Note: 1. Assume that the `isbn` provided for searching is always a valid string. 2. The `library` list is a finite list with no duplicates in ISBN numbers.","solution":"def search_library(isbn, library): Searches for a book in the library by its ISBN number. :param isbn: The ISBN number of the book to find. :param library: A list of dictionaries, each representing a book. :return: The dictionary representing the book if found, otherwise \\"Book not found\\". for book in library: if book[\'isbn\'] == isbn: return book return \\"Book not found\\""},{"question":"In a fantasy kingdom, there are multiple guilds, and each guild has a specific set of unique magical items. The king has asked you to help create a new collection that contains all the unique magical items from every guild, but he specifically wants the items sorted in a particular order based on their magical strength. Each guild provides a list of their magical items where each item is represented by a positive integer denoting its strength. The strengths of items in each guild are given in non-decreasing order. Your task is to produce a single list of magical items such that all items from all guilds are combined and sorted in non-decreasing order. Write a function `merge_guild_items` that takes a list of lists as input, where each sublist contains the magical item strengths of a single guild in non-decreasing order. The function should return a single list containing all magical items, sorted in non-decreasing order. # Input - `guild_items`: A list of lists where each sublist contains integers in non-decreasing order. Each integer represents the strength of a magical item. - 1 ≤ length of guild_items ≤ 100 - 0 ≤ length of each sublist ≤ 100 - 1 ≤ strength of each magical item ≤ 10^5 # Output - A list of integers representing the combined list of all unique magical items from all guilds, sorted in non-decreasing order. # Example Input ```python guild_items = [ [15, 23, 50], [5, 15, 35, 50], [10, 11, 23], [5, 7, 10, 15] ] ``` Output ```python [5, 7, 10, 11, 15, 23, 35, 50] ``` # Note - The combined list should only contain unique magical item strengths. - Ensure the output list is sorted in non-decreasing order. - You may assume that the input format is always valid as per the constraints provided.","solution":"def merge_guild_items(guild_items): Merges multiple lists of magical items from different guilds into a single sorted list of unique items. Parameters: guild_items (list of lists): Each sublist contains integers representing the strength of magical items in non-decreasing order. Returns: list: A sorted list of unique magical item strengths. # Using a set to collect unique item strengths unique_items = set() # Merging all items into the set for items in guild_items: unique_items.update(items) # Converting the set back to a sorted list return sorted(unique_items)"},{"question":"You are given a sequence of integers. Your task is to transform this sequence into a non-decreasing sequence by inserting any number of integers (possibly zero). You need to find the length of the longest non-decreasing subsequence that can be obtained from the given sequence. The first line contains a single integer n (1 le n le 1000) — the length of the sequence. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the elements of the sequence. In the first line of the output, print the length of the longest non-decreasing subsequence that can be obtained. # Example Input: ``` 6 5 3 4 8 6 7 ``` Output: ``` 4 ``` # Explanation: In this example, the longest non-decreasing subsequence that can be obtained is [3, 4, 6, 7], which has a length of 4. Other possible subsequences include [3, 4, 8] and [5, 6, 7], but they are not the longest.","solution":"def longest_non_decreasing_subsequence_length(n, sequence): from bisect import bisect_right if n == 0: return 0 # List to store the smallest tail of all increasing subsequences # with length i+1 in subsequence_tails[i]. subsequence_tails = [] for num in sequence: # Find the place where this element would go in the subsequence_tails. pos = bisect_right(subsequence_tails, num) # If pos is equal to the length of subsequence_tails, it means we have to # add the element to extension the longest subsequence found so far. # Otherwise, we update the existing position. if pos < len(subsequence_tails): subsequence_tails[pos] = num else: subsequence_tails.append(num) # The length of subsequence_tails will be the length of the longest # non-decreasing subsequence. return len(subsequence_tails)"},{"question":"Given a grid of size m x n, where each cell can either be 0 (empty) or 1 (land), an island is a group of 1\'s (land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water. The task is to find and return the number of islands. **Example 1:** ``` Input: m = 4, n = 5 grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ] Output: 3 ``` **Example 2:** ``` Input: m = 3, n = 4 grid = [ [1, 1, 0, 1], [1, 0, 0, 0], [0, 0, 1, 1] ] Output: 3 ``` **Example 3:** ``` Input: m = 1, n = 1 grid = [ [0] ] Output: 0 ``` You need to implement a function `int numIslands(int m, int n, vector<vector<int>>& grid)` that returns the number of islands in the given grid.","solution":"def numIslands(m, n, grid): Given a grid of size m x n, where each cell can either be: 0 (water) or 1 (land), return the number of islands. An island is defined as a group of 1\'s connected 4-directionally. if not grid or m == 0 or n == 0: return 0 def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == 0: return grid[x][y] = 0 # Mark as visited dfs(x - 1, y) # up dfs(x + 1, y) # down dfs(x, y - 1) # left dfs(x, y + 1) # right island_count = 0 for i in range(m): for j in range(n): if grid[i][j] == 1: island_count += 1 dfs(i, j) return island_count"},{"question":"A group of friends are planning a vacation trip together and they have decided to split the expenses equally among all. Each friend will keep receipts of their payments and at the end of the trip, they will settle the expenses so that everyone ends up paying the same amount. Write a function `settle_expenses` that takes a list of transactions and outputs the minimum number of transactions needed to balance the expenses. Each transaction is represented as a tuple `(payer, amount, recipient)`: - `payer` is an integer denoting the ID of the friend who made the payment. - `amount` is a float representing the amount paid. - `recipient` is an integer denoting the ID of the friend for whom the payment was made. Your return should be an integer representing the minimum number of transactions required such that each friend has paid the same overall amount. # Input * list of tuples: a list of transactions where each transaction is a tuple (payer, amount, recipient). # Output * integer: the minimum number of transactions required to settle the debts. # Constraints * 2 ≤ number of friends ≤ 20 * 1 ≤ number of transactions ≤ 100 * Each `payer` and `recipient` is an integer representing a friend\'s ID (1-based indexing). # Example ```python transactions = [ (1, 100.0, 2), (2, 50.0, 3), (3, 50.0, 1) ] print(settle_expenses(transactions)) # Output: 1 (since person 2 can directly pay person 3 to balance out the debts) ``` # Explanation 1. Person 1 pays 100 to person 2. 2. Person 2 pays 50 to person 3. 3. Person 3 pays 50 to person 1. In order to balance the amount each person pays, person 2 can simply pay person 3 50, making the overall debts balanced with a single transaction.","solution":"from collections import defaultdict def settle_expenses(transactions): balance = defaultdict(float) for payer, amount, recipient in transactions: balance[payer] -= amount balance[recipient] += amount debts = list(balance.values()) return settle(debts, 0) def settle(debts, index): while index < len(debts) and abs(debts[index]) < 1e-9: index += 1 if index == len(debts): return 0 min_trans = float(\'inf\') for i in range(index + 1, len(debts)): if debts[i] * debts[index] < 0: debts[i] += debts[index] min_trans = min(min_trans, 1 + settle(debts, index + 1)) debts[i] -= debts[index] return min_trans"},{"question":"You are given a rectangular grid consisting of n rows and m columns. Each cell of the grid contains an integer. A path in the grid is defined as starting from the top-left cell (1,1) and ending at the bottom-right cell (n,m), moving only right or down at each step. Your task is to find the length of the longest path such that all numbers on the path are distinct. If no such path exists, return -1. The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), which denote the number of rows and columns of the grid, respectively. The next n lines each contain m space-separated integers, representing the values in the cells of the grid. The value in each cell is guaranteed to be between 1 and 10^9. You need to print a single integer representing the length of the longest path with distinct numbers, or -1 if such a path is not possible. Example Input: 3 3 1 2 3 4 5 6 7 8 9 Example Output: 5","solution":"def find_longest_distinct_path(grid): from collections import deque n = len(grid) m = len(grid[0]) # Edge case if n == 1 and m == 1: return 1 directions = [(0, 1), (1, 0)] # right and down directions def bfs(r, c): max_len = -1 q = deque([(r, c, {grid[r][c]}, 1)]) while q: x, y, seen, path_len = q.popleft() if x == n-1 and y == m-1: max_len = max(max_len, path_len) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] not in seen: q.append((nx, ny, seen | {grid[nx][ny]}, path_len + 1)) return max_len result = bfs(0, 0) return result if result > 1 else -1"},{"question":"Given a sorted array of distinct integers `nums` and a target integer `target`, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You must write an algorithm with O(log n) runtime complexity. The first line contains an integer `n` (1 ≤ `n` ≤ 10^4) — the length of the array. The second line contains `n` distinct integers in increasing order, separated by spaces — the elements of the array `nums`. The third line contains an integer `target` (−10^4 ≤ `target` ≤ 10^4) — the target value to search for. Print a single integer — the index where `target` is found, or if not found, the index where it would be inserted in the correct order. Example: Input ``` 4 1 3 5 6 5 ``` Output ``` 2 ``` Input ``` 4 1 3 5 6 2 ``` Output ``` 1 ```","solution":"def search_insert(nums, target): Given a sorted array of distinct integers `nums` and a target integer `target`, return the index if the target is found. If not, return the index where it would be if it were inserted in order. Uses binary search for O(log n) runtime complexity. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return left"},{"question":"You are given a list of n integers representing the heights of people standing in a line. We want to ensure that the line is composed of alternating tallest and shortest persons relative to those still standing in the line. Your task is to rearrange the list such that it follows this alternating pattern as closely as possible. Formally, we want to rearrange the list such that every other person is either the tallest or the shortest among those not yet placed. If there are multiple ways to achieve the alternating pattern, return the lexicographically smallest arrangement. Write a program that reads an integer n followed by a list of n integers representing the heights of people in the line. Output the rearranged list in the required format. Input: - The first line contains the integer n (1 ≤ n ≤ 2 * 10^5). - The second line contains n integers representing the heights (1 ≤ height ≤ 10^9). Output: - Print the rearranged list of n integers, which should follow the alternating tallest and shortest pattern as closely as possible. Example: Input: 6 1 3 5 7 9 11 Output: 1 11 3 9 5 7 Explanation: Arranged in alternating smallest and tallest: 1, 11, 3, 9, 5, 7. This ensures that the heights alternate between the shortest and tallest remaining persons in the sequence.","solution":"def rearrange_heights(n, heights): Rearrange heights in alternating tallest and shortest persons pattern. heights.sort() result = [] left, right = 0, n - 1 turn = True # True for shortest, False for tallest while left <= right: if turn: result.append(heights[left]) left += 1 else: result.append(heights[right]) right -= 1 turn = not turn return result # Example usage: # n = 6 # heights = [1, 3, 5, 7, 9, 11] # print(rearrange_heights(n, heights)) # Output: [1, 11, 3, 9, 5, 7]"},{"question":"You have a rectangular grid of size n times m consisting of lowercase English letters. Rows are numbered from 1 to n, and columns are numbered from 1 to m. Your task is to find the longest sequence of identical characters in the grid, where the sequence can be horizontal, vertical, or diagonal (both top-left to bottom-right and top-right to bottom-left). Output the length of the longest sequence of identical characters. # Input The first line contains two integers n and m (1 le n, m le 100) — the sizes of the grid. The next n lines contain m characters each, the i-th line describes the i-th row of the grid. It is guaranteed that the grid consists of lowercase English letters only. # Output Print one integer — the length of the longest sequence of identical characters. # Examples Example 1 Input: ``` 3 4 abcd eeee abab ``` Output: ``` 4 ``` Example 2 Input: ``` 5 5 abcde fghij klmno pqrst uvwxy ``` Output: ``` 1 ``` # Note In the first example, the longest sequence of identical characters is \\"eeee\\" at row 2. In the second example, all sequences are of length 1 because all characters are unique in their rows, columns, and diagonals.","solution":"def longest_sequence(n, m, grid): Returns the length of the longest sequence of identical characters in the grid. def get_length(grid, n, m, r, c, dr, dc): Utility function to get the maximum length of sequence starting from (r, c) in direction (dr, dc) char = grid[r][c] length = 0 while 0 <= r < n and 0 <= c < m and grid[r][c] == char: length += 1 r += dr c += dc return length max_length = 0 for i in range(n): for j in range(m): max_length = max(max_length, get_length(grid, n, m, i, j, 0, 1), # Horizontal right get_length(grid, n, m, i, j, 1, 0), # Vertical down get_length(grid, n, m, i, j, 1, 1), # Diagonal down-right get_length(grid, n, m, i, j, 1, -1) # Diagonal down-left ) return max_length"},{"question":"Alice wants to create a simple art piece using a grid. She uses a grid of size n × n, where n is always an odd number. The grid is filled with \'.\' characters initially. She then replaces the middle row and the middle column with the \'*\' character to create a cross pattern. Write a function to generate this n × n grid with the cross pattern and print it. The only line of input contains an integer n (1 ≤ n ≤ 9), where n is an odd number. Output an n × n grid with any cell on the middle row or middle column marked with \'*\' and the remaining cells marked with \'.\'. # Example Input ``` 5 ``` Output ``` ..*.. ..*.. ***** ..*.. ..*.. ```","solution":"def generate_cross_grid(n): Generates an n × n grid with a cross pattern as described: The middle row and the middle column are filled with \'*\', and all other cells are filled with \'.\'. :param n: an odd integer (1 ≤ n ≤ 9) :return: list of strings representing the grid grid = [[\'.\'] * n for _ in range(n)] mid = n // 2 for i in range(n): grid[mid][i] = \'*\' grid[i][mid] = \'*\' return [\'\'.join(row) for row in grid]"},{"question":"You are given a list of integers and an integer k. Your task is to compute whether there exists a subsequence of the list such that the sum of the elements in the subsequence is exactly equal to k. A subsequence is a sequence that can be derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. Input Format: - The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the list. - The second line contains n integers a_i (1 ≤ a_i ≤ 100) — the elements of the list. - The third line contains a single integer k (1 ≤ k ≤ 1000) — the target sum. Output Format: - Print \\"YES\\" if there exists a subsequence with sum equal to k, otherwise print \\"NO\\". Examples: Input: 4 2 4 8 5 10 Output: YES Input: 3 1 2 3 7 Output: NO Explanation: In the first example, the subsequence [2, 8] has sum equal to 10. In the second example, there is no subsequence with sum equal to 7. Note: You may use any algorithm suitable to solve this problem such as dynamic programming, backtracking, or any other efficient approach.","solution":"def subsequence_sum_exists(n, arr, k): Determines if there exists a subsequence of `arr` such that the sum of its elements is equal to `k`. Parameters: n (int): The number of elements in the list. arr (list): A list of integers. k (int): The target sum. Returns: str: \\"YES\\" if such a subsequence exists, otherwise \\"NO\\". # Using dynamic programming to solve the problem dp = [False] * (k + 1) dp[0] = True for num in arr: for sub_sum in range(k, num - 1, -1): if dp[sub_sum - num]: dp[sub_sum] = True return \\"YES\\" if dp[k] else \\"NO\\""},{"question":"Lucille needs to organize the books in her new house. She has `n` books, which are currently stacked in a single pile on the floor. Each book has a thickness, represented as an integer, and they are initially stacked in a given order. Lucille wants to arrange the books onto several shelves, but with a specific constraint: each shelf should have a total thickness of books which should not exceed a given maximum thickness `T`. Help Lucille to figure out the minimum number of shelves required to accommodate all her books under the given constraint. You are given an integer `n` (1 ≤ n ≤ 10^4), representing the number of books, and an integer `T` (1 ≤ T ≤ 10^9), representing the maximum thickness that any single shelf can hold. The next line contains `n` integers `b1, b2, ..., bn` (1 ≤ bi ≤ T), where `bi` denotes the thickness of the i-th book. Determine the minimum number of shelves needed. Input format: The first line contains two integers `n` and `T`. The second line contains `n` integers representing the thicknesses of the books in their initial order. Output format: Output a single integer representing the minimum number of shelves required. Sample Input 1: ``` 5 10 1 2 3 4 5 ``` Sample Output 1: ``` 2 ``` Explanation: One possible way to arrange the books is to place books with thicknesses [1, 2, 3] on the first shelf and books with thicknesses [4, 5] on the second shelf. This requires 2 shelves in total. Sample Input 2: ``` 3 5 4 1 4 ``` Sample Output 2: ``` 2 ``` Explanation: One optimal way to arrange the books is by placing the book with thickness 4 on the first shelf and books with thicknesses [1, 4] on the second shelf, which requires 2 shelves in total.","solution":"def min_shelves(n, T, books): current_thickness = 0 shelf_count = 1 for book in books: if current_thickness + book > T: shelf_count += 1 current_thickness = book else: current_thickness += book return shelf_count"},{"question":"Given a list of `n` integers and an integer `k`, your task is to identify whether there exist three distinct elements in the list such that they form an arithmetic progression with a common difference of `k`. In other words, find three indices `i`, `j`, and `l` in the list such that `i < j < l`, and the elements at those indices satisfy the condition `2 * arr[j] = arr[i] + arr[l]` and `arr[j] - arr[i] = k`. # Input - The first line contains an integer `n` (3 ≤ n ≤ 10^5) — the length of the list. - The second line contains `n` space-separated integers arr1, arr2, ..., arrn (1 ≤ arri ≤ 10^9). - The third line contains the integer `k` (1 ≤ k ≤ 10^9). # Output - Print \\"YES\\" if there exist three such distinct elements, otherwise print \\"NO\\". # Example Input: ``` 5 2 4 6 8 10 2 ``` Output: ``` YES ``` Explanation: In the example above, the elements 2, 4, 6 form an arithmetic progression with a common difference of 2.","solution":"def find_arithmetic_triplet(n, arr, k): Returns \'YES\' if there exist three distinct elements in the list that form an arithmetic progression with a common difference of `k`, otherwise returns \'NO\'. arr_set = set(arr) for i in range(n): if (arr[i] - k in arr_set) and (arr[i] + k in arr_set): left_index = arr.index(arr[i] - k) right_index = arr.index(arr[i] + k) if left_index < i < right_index: return \\"YES\\" return \\"NO\\""},{"question":"You are given an integer x. In one move, you can increase or decrease x by any digit from 1 to 9 inclusive. Your task is to determine the minimum number of moves required to transform x into 0. # Input The input consists of a single integer x (1 leq x leq 10^9). # Output Output a single integer which is the minimum number of moves required to transform x into 0. # Example Input ``` 27 ``` Output ``` 3 ``` # Explanation One optimal solution to transform 27 into 0 in 3 moves is: 1. Subtract 9 to get 18. 2. Subtract 9 to get 9. 3. Subtract 9 to get 0.","solution":"def min_moves_to_zero(x): Given an integer x, returns the minimum number of moves required to transform x into 0, where each move consists of subtracting any digit from 1 to 9 inclusive. return (x + 8) // 9"},{"question":"You are given a positive integer N, representing the number of nodes in an undirected graph. Your task is to design an algorithm to determine if the given graph is a tree. A graph is considered a tree if it is connected and contains no cycles. The graph is provided as an edge list, where each edge is represented as a tuple (u, v), indicating that there is an edge between nodes u and v. The input consists of: - N: an integer representing the number of nodes. - edges: a list of tuples, where each tuple (u, v) represents an edge between nodes u and v. The function should return a boolean value: - True if the graph is a tree. - False otherwise. Example: ``` Input: N = 5 edges = [(0, 1), (0, 2), (1, 3), (1, 4)] Output: True Input: N = 5 edges = [(0, 1), (0, 2), (1, 2), (1, 3), (1, 4)] Output: False ``` Your code should have the following signature: ```python def is_tree(N: int, edges: list) -> bool: ```","solution":"def is_tree(N: int, edges: list) -> bool: from collections import defaultdict, deque if len(edges) != N - 1: # For a tree, edges should be exactly N-1 return False # Create an adjacency list adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # Use BFS to check if the graph is connected and has no cycles visited = set() queue = deque([0]) visited.add(0) while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if neighbor in visited: continue visited.add(neighbor) queue.append(neighbor) # The graph is a tree if all nodes are visited and there are no cycles return len(visited) == N"},{"question":"# Jeff\'s Rectangle Intersection Problem Jeff is a curious mathematician who loves to solve geometric problems. He recently stumbled upon the problem of finding the intersection of two rectangles. Each rectangle is defined by its bottom-left corner and its top-right corner in a 2D Cartesian plane. You are given the coordinates of the bottom-left corner (x1, y1) and the top-right corner (x2, y2) of the first rectangle, as well as the coordinates of the bottom-left corner (x3, y3) and the top-right corner (x4, y4) of the second rectangle. Your task is to compute the coordinates of the bottom-left corner and the top-right corner of the intersecting rectangle. If the rectangles do not intersect, return \\"No Intersection\\". # Input Format: - The first line contains four integers x1, y1, x2, y2 (-10^4 ≤ x1, y1, x2, y2 ≤ 10^4) denoting the coordinates of the bottom-left corner and top-right corner of the first rectangle. - The second line contains four integers x3, y3, x4, y4 (-10^4 ≤ x3, y3, x4, y4 ≤ 10^4) denoting the coordinates of the bottom-left corner and top-right corner of the second rectangle. It is guaranteed that the coordinates define valid rectangles with non-zero area. # Output Format: - If the rectangles intersect, print four integers (xi1, yi1, xi2, yi2) denoting the coordinates of the bottom-left and top-right corners of the intersection rectangle. - If the rectangles do not intersect, print \\"No Intersection\\". # Sample Input 1: ``` 0 0 3 3 1 1 4 4 ``` # Sample Output 1: ``` 1 1 3 3 ``` # Sample Input 2: ``` 0 0 1 1 2 2 3 3 ``` # Sample Output 2: ``` No Intersection ``` # Explanation: - In the first sample, the rectangles intersect and the intersecting rectangle has bottom-left corner at (1, 1) and top-right corner at (3, 3). - In the second sample, the rectangles do not intersect. The solution should efficiently compute the intersection, if any, using simple geometric properties.","solution":"def rectangle_intersection(x1, y1, x2, y2, x3, y3, x4, y4): Finds the intersection of two rectangles if it exists. Parameters: - x1, y1: Bottom-left corner of the first rectangle - x2, y2: Top-right corner of the first rectangle - x3, y3: Bottom-left corner of the second rectangle - x4, y4: Top-right corner of the second rectangle Returns: - A tuple containing four integers (xi1, yi1, xi2, yi2) representing the coordinates of the bottom-left and top-right corners of the intersecting rectangle, or \\"No Intersection\\" if they do not intersect. xi1 = max(x1, x3) yi1 = max(y1, y3) xi2 = min(x2, x4) yi2 = min(y2, y4) if xi1 < xi2 and yi1 < yi2: return (xi1, yi1, xi2, yi2) else: return \\"No Intersection\\""},{"question":"Lena is designing a simulation of a garden for a virtual reality game. The garden is represented as a grid of cells, and each cell can either contain grass or be empty. The simulation records the changes in the garden over time, where Lena starts from an initial state and performs a series of events. Each event dictates a certain operation to be done on a particular cell in the garden. You are to help Lena implement a function that tracks the state of the garden after each event. The garden is initialized with all cells being empty. There are two types of events: 1. \\"plant x y\\" - This event plants grass at the cell (x, y). 2. \\"remove x y\\" - This event removes grass from the cell (x, y). If a \\"plant\\" event is issued for a cell that already contains grass, or a \\"remove\\" event is issued for an empty cell, the event has no effect. **Input**: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns of the grid, respectively. - The second line contains an integer k (1 ≤ k ≤ 1000), representing the number of events. - The next k lines each contain a string and two integers, describing an event in the format described above. **Output**: - After processing all the events, output the final state of the garden as an n by m grid, where a cell contains \'1\' if there is grass and \'0\' otherwise. Each row of the grid should be outputted on a new line. **Example**: ``` Input: 4 5 6 plant 1 2 plant 2 3 remove 1 2 plant 1 5 remove 3 4 plant 3 4 Output: 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 ``` Implement a function to solve the problem described.","solution":"def simulate_garden(n, m, k, events): garden = [[0 for _ in range(m)] for _ in range(n)] for event in events: action, x, y = event x, y = x - 1, y - 1 # Convert to zero-based indexing if action == \\"plant\\": if garden[x][y] == 0: garden[x][y] = 1 elif action == \\"remove\\": if garden[x][y] == 1: garden[x][y] = 0 return garden def print_garden(garden): for row in garden: print(\\" \\".join(map(str, row))) n = 4 m = 5 k = 6 events = [(\\"plant\\", 1, 2), (\\"plant\\", 2, 3), (\\"remove\\", 1, 2), (\\"plant\\", 1, 5), (\\"remove\\", 3, 4), (\\"plant\\", 3, 4)] garden = simulate_garden(n, m, k, events) print_garden(garden)"},{"question":"In an ancient temple, there is a row of n sacred stones numbered from 1 to n. The temple guardian has hidden a secret number behind each stone, and each number is either 0 or 1. Every day, the high priest performs a special ritual that involves flipping the number behind exactly one stone. As part of their test, the initiate needs to determine if it is possible to make all the numbers the same (either all 0s or all 1s) by performing at most k flips. The numbers behind the stones are initially given in a sequence of 0s and 1s. Write a function that returns \\"Possible\\" if it is possible to make all the numbers the same using at most k flips, and \\"Impossible\\" otherwise. # Input: - The first line contains two integers n (1 ≤ n ≤ 1000) and k (0 ≤ k ≤ 1000) — the number of stones and the maximum number of flips allowed. - The second line contains a binary string of length n — the initial numbers behind the stones. # Output: - A single line containing the word \\"Possible\\" or \\"Impossible\\". # Example: Example 1: **Input:** ``` 5 2 01010 ``` **Output:** ``` Possible ``` Example 2: **Input:** ``` 5 1 01010 ``` **Output:** ``` Impossible ``` Explanation: In the first example, the initiate can flip the 2nd and 4th stones (counting from left), changing the sequence to 00000 or 11111, making all numbers the same with 2 flips. In the second example, at least 2 flips are needed to make all numbers the same, but the maximum allowable flips are 1, so it is impossible. # Constraints: - The sequence can be transformed through flips on the binary values (0 to 1 and 1 to 0). - The goal is checking for at most k flips to make the sequence uniform (all 0s or all 1s).","solution":"def is_possible_to_make_same(n, k, s): Determines if it is possible to make all numbers same using at most k flips. Parameters: n (int): The number of stones. k (int): The maximum number of flips allowed. s (str): The binary string representing the initial numbers behind the stones. Returns: str: \\"Possible\\" if it is possible to make all the numbers the same using at most k flips, \\"Impossible\\" otherwise. # Count number of 0s and 1s in the string count_0 = s.count(\'0\') count_1 = s.count(\'1\') # If the minimum of count_0 and count_1 is less than or equal to k, then it is possible return \\"Possible\\" if min(count_0, count_1) <= k else \\"Impossible\\""},{"question":"Given a large dataset of people with certain characteristics and a limited number of groups they belong to, write a program to distribute people into their respective groups such that the maximum number of unique characteristics are preserved within each group. Each person has a set of characteristics represented by lowercase alphabetical characters, and each group is also identified by a unique lowercase alphabetical character. The goal is to assign each person to a group such that the number of unique characteristics within each group is maximized. Some characteristics might be rare and others common. Input format: 1. The first line contains two integers `N` and `G` where `N` (1 ≤ N ≤ 2,000,000) is the total number of people, and `G` (1 ≤ G ≤ 52) is the total number of groups. 2. The next `N` lines each contain a single string of lowercase alphabetical characters, representing the characteristics of each person. Output format: 1. The first line should contain the total number of unique characteristics preserved across all groups. 2. The next `N` lines should each contain a single lowercase alphabetical character representing the group assignment for each person. Example: ``` Input: 5 2 abc bcd cef deg dfh Output: 5 a a b b b Explanation: The function groups people into two groups \'a\' and \'b\', ensuring that the total number of unique characteristics preserved is maximized. The groups are assigned in such a manner that the group \'a\' has characteristics \'a\', \'b\', \'c\', \'d\', \'e\' and the group \'b\' has characteristics \'f\', \'g\', \'h\'. ``` Your task is to write the function that finds the optimal group assignments to maximize the number of unique characteristics preserved. If there are multiple valid outputs, any of them is acceptable.","solution":"def distribute_people_to_groups(n, g, people): from collections import defaultdict from itertools import cycle # Use a set to keep track of all unique characters unique_characteristics = set() for person in people: for ch in person: unique_characteristics.add(ch) # Group assignment is managed in a round-robin manner group_cycle = cycle(chr(97 + i) for i in range(g)) assignments = [] for _ in people: group = next(group_cycle) assignments.append(group) return len(unique_characteristics), assignments"},{"question":"A factory has a conveyor belt system where each belt is represented by a string of lowercase English letters. Each letter represents the type of item on that segment of the belt. The system sorts items in a way that two belts are considered matching if, after sorting, they produce the same sequence of items. Write a program to check if two conveyor belts match. The first line contains an integer n (1 ≤ n ≤ 100) — the number of test cases. Each test case consists of two lines: - The first line contains the string a (1 ≤ |a| ≤ 100) — the representation of the first belt. - The second line contains the string b (1 ≤ |b| ≤ 100) — the representation of the second belt. For each test case, output \\"YES\\" if the two belts match, and \\"NO\\" otherwise (without the quotes). Example: Input: 3 abc bca aaa bbb cat act Output: YES NO YES In the first sample, after sorting both strings, we get \\"abc\\" which means the belts match. In the second sample, \\"aaa\\" does not match \\"bbb\\". In the third sample, \\"cat\\" and \\"act\\" both sort to \\"act\\", so they match.","solution":"def do_belts_match(belt1, belt2): Check if two conveyor belts match after sorting. return sorted(belt1) == sorted(belt2) def check_belt_matches(test_cases): Given multiple test cases, return a list of results. results = [] for a, b in test_cases: if do_belts_match(a, b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a sequence of n integers, and your task is to determine the minimum number of operations required to make all the elements in the sequence equal. In one operation, you can increment or decrement any element of the sequence by 1. The first line contains an integer t (1 le t le 10^4) — the number of test cases. Then follow t test cases. Each test case begins with an integer n (1 le n le 1000) — the number of elements in the sequence. The next line contains n integers separated by spaces, representing the sequence. For each test case, output a single integer — the minimum number of operations required to make all elements in the sequence equal. Example: Input: ``` 2 3 1 2 3 4 1 1 1 1 ``` Output: ``` 2 0 ``` Explanation: In the first test case, you can increment the first element (1) to 2, and increment the third element (3) to 2. This requires a total of 2 operations. In the second test case, all elements are already equal, so no operations are needed.","solution":"def min_operations_to_equal_elements(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] elements = test_cases[i][1] median = sorted(elements)[n//2] min_operations = sum(abs(element - median) for element in elements) results.append(min_operations) return results"},{"question":"You are given a garden with `n` rows and `m` columns. Each cell in the garden initially contains a type of flower represented by a lowercase letter of the alphabet. A gardener wants to rearrange the garden in such a way that each type of flower does not appear more than once in any row and in any column. Your task is to write a program that rearranges the garden to meet the gardener\'s requirements if possible. If it is not possible, the program should output \\"Not Possible\\". The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 100), representing the number of rows and columns in the garden respectively. The following `n` lines each contain a string of length `m`, representing the initial arrangement of flowers in the garden. Output the rearranged garden if the arrangement is possible. If not, output \\"Not Possible\\". # Example Input ``` 3 3 abc def ghi ``` Output ``` abc def ghi ``` Input ``` 3 3 aaa bbb ccc ``` Output ``` Not Possible ``` # Note In the first example, the initial arrangement already satisfies the requirements. In the second example, it\'s not possible to rearrange the flowers such that no type of flower appears more than once in any row and in any column.","solution":"def rearrange_garden(n, m, garden): def is_valid_rearrangement(matrix): for r in matrix: if len(r) != len(set(r)): return False for c in range(m): col = [matrix[r][c] for r in range(n)] if len(col) != len(set(col)): return False return True from itertools import permutations for perm in permutations(garden): if is_valid_rearrangement(perm): return perm return \\"Not Possible\\" def format_output(result): if result == \\"Not Possible\\": return result return \'n\'.join(result)"},{"question":"You are given an array of integers and an integer k. Find the length of the longest contiguous subarray such that the number of distinct integers in this subarray is exactly k. The first line contains two integers n and k (1 ≤ n ≤ 300, 1 ≤ k ≤ 100). The second line contains n integers — the elements of the array. Each element in the array has a value between 1 and 300. Output the length of the longest contiguous subarray with exactly k distinct integers. If no such subarray exists, output 0.","solution":"def longest_subarray_with_k_distinct(n, k, arr): from collections import defaultdict if k == 0 or n == 0: return 0 max_len = 0 left = 0 distinct_count = 0 freq = defaultdict(int) for right in range(n): if freq[arr[right]] == 0: distinct_count += 1 freq[arr[right]] += 1 # Shrink the window from the left if the number of distinct integers > k while distinct_count > k: freq[arr[left]] -= 1 if freq[arr[left]] == 0: distinct_count -= 1 left += 1 # Update the maximum length if the number of distinct integers equals k if distinct_count == k: max_len = max(max_len, right - left + 1) return max_len"},{"question":"Barry is a baker and has been experimenting with different combinations of his oven\'s temperature settings. His oven allows him to set the temperature once for baking an item and keeps track of temperatures for a given duration. However, Barry is only interested in unique temperature readings. Each temperature reading is represented by a non-negative integer. Barry wants to find out how many distinct temperatures his oven can read over a period. You are given a list of temperature readings recorded at different times. Your task is to calculate the total number of unique temperature readings. Input: - The first line contains an integer n (1 ≤ n ≤ 50), the number of temperature readings. - The second line contains n non-negative integers separated by spaces, representing the temperature readings recorded. Output: - Output a single integer, the number of unique temperature readings. Example: Input: 5 30 30 30 40 50 Output: 3 Input: 4 15 15 15 15 Output: 1 Input: 6 22 35 35 22 50 22 Output: 3","solution":"def count_unique_temperatures(n, temperatures): Returns the number of unique temperature readings from a list of readings. Parameters: n (int): Number of temperature readings. temperatures (list): List of temperature readings. Returns: int: Number of unique temperature readings. unique_temperatures = set(temperatures) return len(unique_temperatures)"},{"question":"You are given an array of integers and an integer target. Your aim is to find all unique combinations in the array where the numbers sum to the target. Each number in the array may only be used once in the combination. The array and target are given in a single line. The first number is the target, followed by the integers in the array. Each number in the array and the target are separated by a space. Return all possible combinations that sum to the target. The combinations should be returned as a list of lists, where each list represents a combination. Combinations themselves should be listed in lexicographic order, and numbers within each combination should also be in non-decreasing order. # Example ```plaintext Input: 7 2 3 6 7 Output: [[7]] Input: 8 10 1 2 7 6 1 5 Output: [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]] Input: 5 2 4 3 1 Output: [[1, 4], [2, 3]] ``` **Constraints:** - All numbers (including target) are positive integers. - Elements in a combination must be in non-decreasing order. - The solution set must not contain duplicate combinations.","solution":"def combination_sum(target, nums): Given a target and an array of integers, this function returns all unique combinations that sum to the target. def backtrack(start, target, path): if target == 0: result.append(path) return elif target < 0: return for i in range(start, len(nums)): if i > start and nums[i] == nums[i-1]: # Skip duplicates continue backtrack(i + 1, target - nums[i], path + [nums[i]]) nums = sorted(nums) result = [] backtrack(0, target, []) return result"},{"question":"Two scientists are working together on a research project and are collecting data using a device that is capable of measuring temperature. The device records temperatures in a list of integers ranging from -100 to 100. However, occasionally the device malfunctions and records an extreme value as 999. The scientists want to analyze the temperature data while ignoring these malfunction values. Your task is to write a program that takes in a list of recorded temperatures and calculates the average temperature, excluding any malfunction values. The first line contains an integer n (1 ≤ n ≤ 100), the number of recorded temperatures. The second line contains n integers, each representing a recorded temperature, separated by spaces. If there are no valid temperatures to calculate the average from, output \\"No valid data\\". Otherwise, output the average temperature as a float rounded to two decimal places. For example: **Input:** ``` 5 23 17 999 32 19 ``` **Output:** ``` 22.75 ``` **Input:** ``` 3 999 999 999 ``` **Output:** ``` No valid data ``` In the first example, the average temperature is calculated from the valid temperatures [23, 17, 32, 19], which is (23 + 17 + 32 + 19) / 4 = 22.75. In the second example, all recorded temperatures are malfunction values, thus the output is \\"No valid data\\".","solution":"def average_temperature(n, temperatures): Calculates the average temperature excluding malfunction values (999). Parameters: n (int): number of recorded temperatures temperatures (list of int): list of recorded temperatures Returns: str: average temperature as a float rounded to two decimal places or \\"No valid data\\" valid_temperatures = [temp for temp in temperatures if temp != 999] if not valid_temperatures: return \\"No valid data\\" average_temp = sum(valid_temperatures) / len(valid_temperatures) return f\\"{average_temp:.2f}\\""},{"question":"Bob is an avid photographer who loves capturing moments with his camera. However, he has a peculiar habit. Whenever he uploads his photos to his computer, he names them based on the sequence in which they were taken. Sometimes, due to various factors like copying from different devices or erroneous renaming, these photo names can get mixed up. Bob wants a program that can help him sort and organize his photos by their capture sequence. Each photo is named with a prefix \\"Photo\\" followed by a number (e.g., \\"Photo1\\", \\"Photo10\\"). The numbers can be non-consecutive, so sorting them alphabetically won\'t yield the correct order. Write a function to sort an array of these photo names based on the numerical order of the photo numbers. Your function should return the sorted list of photo names. # Input - An integer n (1 ≤ n ≤ 1000), representing the number of photos. - A list of n strings, where each string conforms to the pattern \\"PhotoX\\" (1 ≤ X ≤ 10^6), representing the names of the photos. # Output - A list of n strings, sorted based on the numerical value following the \\"Photo\\" prefix. # Example Input ``` 5 [\\"Photo2\\", \\"Photo10\\", \\"Photo1\\", \\"Photo4\\", \\"Photo3\\"] ``` Output ``` [\\"Photo1\\", \\"Photo2\\", \\"Photo3\\", \\"Photo4\\", \\"Photo10\\"] ``` # Constraints - The photo names will always start with the prefix \\"Photo\\" followed by a valid positive integer. - The photo number can be as large as 10^6 but will not have leading zeros. **Note**: The main challenge is to correctly extract the numerical part from the strings and then perform the sorting based on these numerical values.","solution":"def sort_photos(n, photos): Sorts a list of photo names based on the numerical order of the photo numbers. Args: n (int): The number of photo names. photos (list of str): List of photo names in the format \\"PhotoX\\", where X is a positive integer. Returns: list of str: The sorted list of photo names. def extract_number(photo_name): Extracts the numeric part from a photo name string. Args: photo_name (str): The photo name in the format \\"PhotoX\\". Returns: int: The numeric part extracted from the photo name. return int(photo_name[5:]) # Sort the photos based on the extracted numbers sorted_photos = sorted(photos, key=extract_number) return sorted_photos"},{"question":"A software company wants to optimize their cloud storage system to handle user uploads more efficiently. The system has n storage servers numbered from 1 to n. These servers are connected by bidirectional communication channels in some way. Each pair of servers is connected by at most one channel. Each channel has a strictly positive integer bandwidth that determines the number of data units it can transmit per unit of time. The company\'s objective is to create a spanning tree with the maximum possible total bandwidth. A spanning tree is a subset of the channels that connects all servers without any cycles. You are given n, the number of servers, and a list of all existing channels along with their bandwidths. The first line contains a single integer n (2 ≤ n ≤ 50). The second line contains a single integer m (1 ≤ m ≤ 1000) — the number of channels. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6) — indicating a channel between servers u and v with bandwidth w. Print a single integer — the maximum possible total bandwidth of a spanning tree for the given network of servers. Example: Input: 4 5 1 2 10 1 3 5 2 3 6 2 4 15 3 4 4 Output: 31 In the example, the optimal spanning tree will include channels with bandwidths 10, 6, and 15.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rank[rootX] < rank[rootY]: parent[rootX] = rootY elif rank[rootX] > rank[rootY]: parent[rootY] = rootX else: parent[rootY] = rootX rank[rootX] += 1 def maximum_spanning_tree(n, channels): channels.sort(key=lambda x: x[2], reverse=True) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) max_bandwidth = 0 edges_used = 0 for edge in channels: u, v, weight = edge rootU = find(parent, u-1) rootV = find(parent, v-1) if rootU != rootV: max_bandwidth += weight union(parent, rank, rootU, rootV) edges_used += 1 if edges_used == n - 1: break return max_bandwidth # Example run n = 4 channels = [ (1, 2, 10), (1, 3, 5), (2, 3, 6), (2, 4, 15), (3, 4, 4) ] print(maximum_spanning_tree(n, channels))"},{"question":"You are given a rectangular grid with `m` rows and `n` columns. The grid contains non-negative integers representing the height of each cell. You need to find all the cells whose height is strictly greater than the height of all of their immediate neighbors (top, bottom, left, and right). Write a function that prints the list of such cell positions. The function signature is: ```python def findPeakCells(m: int, n: int, grid: List[List[int]]) -> List[Tuple[int, int]]: ``` The input parameters are: - `m` (1 ≤ m ≤ 1000): The number of rows in the grid. - `n` (1 ≤ n ≤ 1000): The number of columns in the grid. - `grid`: A 2D list of integers where `grid[i][j]` represents the height of the cell at row `i` and column `j`. The output should be a list of tuples where each tuple contains the row and column indices of a peak cell. The cells should be listed in lexicographical order. If there are no peak cells, return an empty list. # Example Input: ```python m = 3 n = 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ```python [(2, 2)] ``` Explanation: - The cell (2, 2) has height 9, which is higher than any of its neighbors (celIs at (1, 2), (2, 1), (3, 2), and (2, 3)). Hence, it is the only peak cell.","solution":"from typing import List, Tuple def findPeakCells(m: int, n: int, grid: List[List[int]]) -> List[Tuple[int, int]]: def is_peak(i, j): # Check top if i > 0 and grid[i][j] <= grid[i-1][j]: return False # Check bottom if i < m-1 and grid[i][j] <= grid[i+1][j]: return False # Check left if j > 0 and grid[i][j] <= grid[i][j-1]: return False # Check right if j < n-1 and grid[i][j] <= grid[i][j+1]: return False return True peak_cells = [] for i in range(m): for j in range(n): if is_peak(i, j): peak_cells.append((i, j)) peak_cells.sort() # Ensure lexicographical order return peak_cells"},{"question":"You have an array of n non-negative integers. You can perform the following operation arbitrarily many times (including zero): 1. Choose any two elements ai and aj (i ≠ j) and replace ai with ai XOR aj. Your task is to make all elements of the array equal. Write a function that returns the minimum number of operations required to achieve this. If it is not possible to make all elements equal, return -1. The first line contains a single integer 𝑛 (1 ≤ 𝑛 ≤ 100). The next line contains n non-negative integers which represent the elements of the array, each number is in the range 0 ≤ ai ≤ 10^9. To achieve the solution, you need to follow these steps: 1. Read the input values. 2. Implement the function to find the minimum number of operations. 3. Output the minimum number of operations required, or -1 if it is not possible. Example: Input: 3 1 2 3 Output: 2 Explanation: One way to make all elements equal: 1. Replace a1 with a1 XOR a2 → [3, 2, 3] 2. Replace a2 with a1 XOR a2 → [3, 1, 3] 3. Replace a2 with a2 XOR a3 → [3, 3, 3] Therefore, two operations are required. If it\'s not possible to make all elements equal, the function should return -1.","solution":"def make_all_elements_equal(arr): Determines minimum number of operations to make all elements in the array equal using XOR operations. Returns -1 if it is not possible. from collections import Counter # Get the frequency count of each element count = Counter(arr) # Find the element with maximum frequency max_freq = max(count.values()) # Return the number of elements to be altered to make all elements equal to the element with max frequency return len(arr) - max_freq"},{"question":"Kelly is participating in a treasure hunt where she has to collect magic stones hidden in a grid. Given an m x n grid of characters, each cell either contains a stone (\'S\') or is empty (\'.\'), Kelly wants to know the longest path she can take starting from the top-left corner that collects all \'S\' stones. She can only move right or down at each step. Formally, you are given an m x n grid where each cell is either \'S\' or \'.\', and you have to find the length of the longest path starting from (1, 1) in the grid that collects all \'S\' stones following the right-down movement constraint. Input: - The first line contains two integers m and n (1 ≤ m, n ≤ 1000) - the number of rows and columns in the grid. - The following m lines each contain a string of n characters representing the grid. Output: - Print the length of the longest path that collects all \'S\' stones. Example: Input: 3 3 S.. .S. ..S Output: 5","solution":"def longest_path_to_collect_stones(m, n, grid): Returns the length of the longest path starting from the top-left corner that collects all \'S\' stones. Can only move right or down at each step. # Initialize a 2D DP table. dp = [[0] * n for _ in range(m)] stone_collected = [[0] * n for _ in range(m)] dp[0][0] = 1 if grid[0][0] == \'S\' else 0 stone_collected[0][0] = grid[0][0] == \'S\' # Fill the first row. for j in range(1, n): stone_collected[0][j] = stone_collected[0][j-1] + (grid[0][j] == \'S\') dp[0][j] = dp[0][j-1] + 1 # Fill the first column. for i in range(1, m): stone_collected[i][0] = stone_collected[i-1][0] + (grid[i][0] == \'S\') dp[i][0] = dp[i-1][0] + 1 # Fill the rest of the grid. for i in range(1, m): for j in range(1, n): if dp[i-1][j] > dp[i][j-1]: dp[i][j] = dp[i-1][j] + 1 stone_collected[i][j] = stone_collected[i-1][j] + (grid[i][j] == \'S\') else: dp[i][j] = dp[i][j-1] + 1 stone_collected[i][j] = stone_collected[i][j-1] + (grid[i][j] == \'S\') return dp[m-1][n-1]"},{"question":"A famous data scientist in Byteland has developed a new encoding system for compressing sequences of integers. Given an array of integers, he encodes the array into a sequence of pairs. Each pair consists of a unique integer and the number of times it occurs consecutively in the array. For example, the array [1, 1, 2, 2, 2, 3] would be encoded as [(1, 2), (2, 3), (3, 1)], which means 1 occurs twice, 2 occurs three times, and 3 occurs once. Now, you are given an encoded sequence and your task is to decode it back to the original array of integers. # Input - The first line contains an integer `k` (1 ≤ k ≤ 1000), the number of pairs in the encoded sequence. - The next `k` lines each contain two integers `vi` and `ci` (1 ≤ vi, ci ≤ 1000), which represent the integer and how many times it appears consecutively in the original array. # Output - Output the original array of integers in a single line, with integers separated by spaces. # Example Input: ``` 3 1 2 2 3 3 1 ``` Output: ``` 1 1 2 2 2 3 ``` Note For the input example, the encoded sequence [(1,2), (2,3), (3,1)] represents the original array [1, 1, 2, 2, 2, 3]. Write a function that takes the encoded sequence and returns the decoded original array.","solution":"def decode_sequence(encoded_sequence): Decodes the encoded sequence of pairs into the original array of integers. Args: - encoded_sequence: List of tuples, where each tuple contains an integer and the number of times it appears consecutively. Returns: - List of integers representing the original decoded array. decoded_array = [] for value, count in encoded_sequence: decoded_array.extend([value] * count) return decoded_array def parse_input(input_str): Parses the input string into the required format. Args: - input_str: Input string containing the number of pairs and the pairs themselves. Returns: - A list of tuples with each tuple containing an integer and its count. lines = input_str.strip().split(\\"n\\") k = int(lines[0]) encoded_sequence = [tuple(map(int, line.split())) for line in lines[1:k+1]] return encoded_sequence"},{"question":"A large company has several departments, and each department has multiple employees. The company wants to create a report that lists the names of all employees in each department. The report should include the department name followed by the names of employees in that department, each on a new line. You are given an input list of tuples where each tuple contains two elements: the name of an employee and the department they belong to. Your task is to generate a report sorted by department name, and within each department, the employee names should be sorted alphabetically. Write a function `generate_report(employee_list: List[Tuple[str, str]]) -> List[str]` that takes a list of tuples as input and returns a list of strings representing the report. Each department name should appear once, followed by the names of employees in that department, each on a new line and sorted alphabetically. The departments in the output should be sorted alphabetically as well. # Input The input is a list of tuples where each tuple contains two strings: the name of an employee and the department they belong to. # Output The output should be a list of strings representing the report. # Example ```python employee_list = [ (\\"Alice\\", \\"Engineering\\"), (\\"Bob\\", \\"HR\\"), (\\"Charlie\\", \\"Engineering\\"), (\\"David\\", \\"Sales\\"), (\\"Eve\\", \\"Engineering\\"), (\\"Frank\\", \\"HR\\"), (\\"Grace\\", \\"Sales\\") ] print(generate_report(employee_list)) ``` # Expected Output ```python [ \\"Engineering\\", \\" Alice\\", \\" Charlie\\", \\" Eve\\", \\"HR\\", \\" Bob\\", \\" Frank\\", \\"Sales\\", \\" David\\", \\" Grace\\" ] ``` # Constraints - The input list is non-empty. - Employee names and department names consist of only alphabetical characters. - There are no duplicate employee names. - Each department has at least one employee. Notes - The function should be case-insensitive when sorting both department names and employee names. - The output strings should be formatted such that department names do not have leading or trailing spaces, while employee names are indented with two spaces.","solution":"def generate_report(employee_list): from collections import defaultdict # Create a dictionary to store employees by department departments = defaultdict(list) for name, dept in employee_list: departments[dept].append(name) # Sort the department names sorted_departments = sorted(departments.keys()) # Generate the report report = [] for dept in sorted_departments: report.append(dept) for employee in sorted(departments[dept]): report.append(f\\" {employee}\\") return report"},{"question":"Ravi is managing inventory in his warehouse, and he has a large list of product IDs that are stored in different sections of the warehouse. Each product ID is unique and is represented by an alphanumeric string. Ravi needs to identify the most frequent alphanumeric prefix among all the product IDs, given a specific prefix length. If there are multiple such prefixes with the same frequency, he should select the lexicographically smallest one. Ravi has a list of m product IDs and an integer k representing the length of the prefix to be considered for comparison. Write a function that takes an integer m, an integer k, and a list of m product IDs, and returns the most frequent k-length prefix. If there are multiple such prefixes with the same frequency, return the lexicographically smallest one. # Input: - m: an integer (1 ≤ m ≤ 100,000) representing the number of product IDs. - k: an integer (1 ≤ k ≤ 20) representing the length of the prefix to consider. - product_ids: a list of m alphanumeric strings (1 ≤ length of each string ≤ 100) representing the product IDs. # Output: - A single alphanumeric string, which is the most frequent k-length prefix. If there are multiple such prefixes, return the lexicographically smallest one. # Example: Input: ``` 6 3 [\\"abcde\\", \\"abcf1\\", \\"abz12\\", \\"xyz78\\", \\"abc34\\", \\"xyz99\\"] ``` Output: ``` abc ``` Explanation: The 3-length prefixes are: - \\"abc\\" -> 3 times - \\"xyz\\" -> 2 times - \\"abz\\" -> 1 time \\"abc\\" appears the most frequently, so it is the answer.","solution":"from collections import defaultdict def most_frequent_prefix(m, k, product_ids): Returns the most frequent k-length prefix among the given product IDs. prefix_count = defaultdict(int) for product_id in product_ids: prefix = product_id[:k] prefix_count[prefix] += 1 # Find the most frequent prefix with lexicographic smallest in case of tie most_frequent_prefix, highest_frequency = min( prefix_count.items(), key=lambda item: (-item[1], item[0]) ) return most_frequent_prefix"},{"question":"Bob is working on a text editor project where he needs to implement a word wrapping feature that wraps text into lines of a given maximum length. Your task is to help him achieve this. Write a function `word_wrap(s: str, max_width: int) -> List[str]` that takes a string `s` containing multiple words separated by single spaces, and an integer `max_width` representing the maximum allowable length of each line. Your function should return a list of strings, where each string is a line of wrapped text that does not exceed `max_width` characters, without breaking words. If a word itself is longer than `max_width`, it should be placed on a new line by itself. # Input: - A single string `s` (1 <= len(s) <= 10^4) representing the text to be wrapped. - An integer `max_width` (1 <= max_width <= 100). # Output: - A list of strings representing the wrapped text. # Example: Input: ```python text = \\"Bob is working on a new project that requires implementing a word wrapping feature\\" max_width = 15 ``` Output: ```python [ \\"Bob is working\\", \\"on a new\\", \\"project that\\", \\"requires\\", \\"implementing a\\", \\"word wrapping\\", \\"feature\\" ] ``` # Explanation: Here, each line contains as many words as possible without exceeding 15 characters. If Bob encounters a word longer than `max_width`, it will be placed on a new line by itself, ensuring all lines except possibly the last one do not exceed `max_width` characters.","solution":"from typing import List def word_wrap(s: str, max_width: int) -> List[str]: Wraps the input string into lines of a given maximum width without breaking words. Parameters: s (str): The input text to be wrapped. max_width (int): The maximum allowable length of each line. Returns: List[str]: A list of strings where each string is a line of wrapped text. words = s.split() wrapped_lines = [] current_line = \\"\\" for word in words: # If adding the next word exceeds the max_width if current_line and len(current_line) + len(word) + 1 > max_width: wrapped_lines.append(current_line) current_line = word else: if current_line: current_line += \' \' + word else: current_line = word # Don\'t forget to add the last line if current_line: wrapped_lines.append(current_line) return wrapped_lines"},{"question":"You are provided with a grid of size n times m consisting of \'.\' and \'#\'. The \'.\' represents an open cell and \'#\' represents a blocked cell. Your task is to determine the number of unique ways to travel from the top-left corner of the grid to the bottom-right corner, moving only rightward or downward at each step. You cannot step on or move through a blocked cell. The first line of the input contains two integers n and m (1 le n, m le 100) — the dimensions of the grid. The next n lines each contain m characters (either \'.\' or \'#\') representing the grid. Print a single integer — the number of unique ways to travel from the top-left corner to the bottom-right corner. # Note: - If the top-left or bottom-right cell is blocked, the number of unique ways is 0. - You are guaranteed that the input grid will have at least one unblocked cell. Example: Input: ``` 3 3 ..# .#. ... ``` Output: ``` 1 ``` Explanation: There is only one way to reach from the top-left to the bottom-right in this grid: - Start at (0, 0) - Move to (0, 1) - Move to (1, 1) - Move to (2, 1) - Move to (2, 2)","solution":"def unique_paths(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Start point for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"Alice and Bob are playing a game on a binary tree. They take alternating turns, and Alice always starts first. On each turn, a player must remove a leaf node from the tree. A leaf node is a node that has no children. The player who cannot make a move loses the game. You are given the initial binary tree and need to determine the winner of the game, assuming that both players play optimally. The binary tree is represented using a list of nodes. Each node contains an integer value and two pointers, which may be null, to its left and right children. Input: - The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of nodes in the binary tree. - The next n lines each contain three integers: the value of the node, the value of its left child (or -1 if it has no left child), and the value of its right child (or -1 if it has no right child). Output: - Print \\"Alice\\" if Alice is guaranteed to win with optimal play, otherwise print \\"Bob\\". Example: Input: 5 1 2 3 2 -1 -1 3 4 5 4 -1 -1 5 -1 -1 Output: Alice","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nodes): node_map = {} for val, left, right in nodes: if val not in node_map: node_map[val] = TreeNode(val) node = node_map[val] if left != -1: if left not in node_map: node_map[left] = TreeNode(left) node.left = node_map[left] if right != -1: if right not in node_map: node_map[right] = TreeNode(right) node.right = node_map[right] return node_map def count_leaf_nodes(node): if not node: return 0 if not node.left and not node.right: return 1 return count_leaf_nodes(node.left) + count_leaf_nodes(node.right) def determine_winner(tree_nodes): if not tree_nodes: return \\"Bob\\" nodes = build_tree(tree_nodes) root = nodes[tree_nodes[0][0]] # The root node is the first element\'s value leaf_count = count_leaf_nodes(root) return \\"Alice\\" if leaf_count % 2 == 1 else \\"Bob\\""},{"question":"A company has an array of servers, and each server can handle a certain number of requests per second. The company wants to ensure that the total number of requests can be handled efficiently by their servers. Given an array of integers where each integer represents the maximum number of requests a server can handle, and an integer K representing the total number of requests, determine the minimum number of servers required to handle all K requests. The first line of input contains an integer n (1 ≤ n ≤ 10^5), representing the number of servers. The second line contains n space-separated integers, where each integer aj (1 ≤ aj ≤ 10^4) represents the maximum number of requests server j can handle. The third line contains a single integer K (1 ≤ K ≤ 10^9), representing the total number of requests. Output a single integer showing the minimum number of servers required to handle all K requests. If it is not possible to handle all the requests with the given servers, output -1. Example: Input: 10 2 3 4 3 5 6 7 8 9 10 40 Output: 5 Explanation: The servers can handle: 10, 9, 8, 7, and 6 requests respectively, which sum up to 40 (10 + 9 + 8 + 7 + 6 = 40). So, the minimum number of servers required is 5.","solution":"def min_servers_needed(n, servers, K): Determines the minimum number of servers required to handle all K requests. Parameters: n (int): Number of servers. servers (List[int]): A list of integers where each integer represents the maximum number of requests a server can handle. K (int): The total number of requests. Returns: int: The minimum number of servers required to handle all K requests, or -1 if not possible. servers.sort(reverse=True) total_requests = 0 used_servers = 0 for capacity in servers: total_requests += capacity used_servers += 1 if total_requests >= K: return used_servers return -1 # Example usage: # n = 10 # servers = [2, 3, 4, 3, 5, 6, 7, 8, 9, 10] # K = 40 # print(min_servers_needed(n, servers, K)) # Output: 5"},{"question":"In a city, there are \'n\' intersections connected by \'m\' bidirectional streets. Each street has a travel time associated with it. Your task is to calculate the shortest possible travel time from a given start intersection to a given destination intersection. The city is such that there is guaranteed to be at least one path between any two intersections. The first line of input contains three integers \'n\' (2 ≤ n ≤ 1000), \'m\' (1 ≤ m ≤ 10000), and \'d\' (1 ≤ d ≤ 10^5), where \'n\' is the number of intersections, \'m\' is the number of streets, and \'d\' is the upper limit on travel time on any street. The next \'m\' lines describe the streets: each line contains three integers \'a\', \'b\', and \'t\' (1 ≤ a, b ≤ n, 1 ≤ t ≤ d), where \'a\' and \'b\' are the intersections connected by this street, and \'t\' is the travel time for this street. The last line contains two integers \'s\' and \'e\' (1 ≤ s, e ≤ n), where \'s\' is the starting intersection, and \'e\' is the destination intersection. Output the shortest travel time from intersection \'s\' to intersection \'e\'. If the input guarantees a path between any two intersections, you can assume that there will be no unreachable intersections. # Example Input: ``` 6 9 100 1 2 7 1 3 9 1 6 14 2 3 10 2 4 15 3 4 11 3 6 2 4 5 6 5 6 9 1 5 ``` Output: ``` 20 ``` In this example, the shortest travel time from intersection 1 to intersection 5 is 20.","solution":"import heapq def dijkstra(n, m, streets, s, e): graph = [[] for _ in range(n+1)] for a, b, t in streets: graph[a].append((t, b)) graph[b].append((t, a)) # Priority queue to store (distance, node) pq = [(0, s)] distances = {i: float(\'inf\') for i in range(1, n+1)} distances[s] = 0 while pq: current_dist, current_node = heapq.heappop(pq) if current_dist > distances[current_node]: continue for travel_time, neighbor in graph[current_node]: distance = current_dist + travel_time if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[e]"},{"question":"You are given an integer array of size n consisting of only 0s, 1s, and 2s. Your task is to write a function that sorts this array in linear time and constant space. This problem is also known as the Dutch National Flag problem. # Input - An integer array `arr` of size `n` (1 leq n leq 10^6) where each element is either 0, 1, or 2. # Output - A single line containing the sorted array. # Examples **Example 1:** ``` Input: arr = [2, 0, 1] Output: [0, 1, 2] ``` **Example 2:** ``` Input: arr = [2, 2, 1, 0, 0, 1, 2, 0] Output: [0, 0, 0, 1, 1, 2, 2, 2] ``` # Note - You must solve the problem without using the built-in sort function. - Ensure that your solution runs in O(n) time complexity. - You can use a three-way partitioning technique to sort the array. # Explanation In the provided example, you start with the array `[2, 0, 1]`. After sorting, the output should be `[0, 1, 2]`. Similarly, for the array `[2, 2, 1, 0, 0, 1, 2, 0]`, the sorted result should be `[0, 0, 0, 1, 1, 2, 2, 2]`.","solution":"def sort_colors(arr): Sorts an array consisting of only 0s, 1s, and 2s in linear time and constant space. Parameters: arr (list of int): The array to be sorted. Returns: list of int: The sorted array. low, mid, high = 0, 0, len(arr) - 1 while mid <= high: if arr[mid] == 0: arr[low], arr[mid] = arr[mid], arr[low] low += 1 mid += 1 elif arr[mid] == 1: mid += 1 else: arr[mid], arr[high] = arr[high], arr[mid] high -= 1 return arr"},{"question":"You need to create a program that manages a particular type of employee hierarchy in a company. Each employee is represented as a node in a tree, with the root node being the CEO. Each node contains the employee\'s name and a list of direct subordinates. You are given a list of relationships where each element contains an employee\'s name and their direct subordinate\'s name. Your task is to output the hierarchy in a nested format, starting from the CEO. The first line contains an integer n, the number of relationships. The next n lines each contain two strings: the name of an employee and the name of their direct subordinate. Each name is a string without spaces and has a maximum length of 20 characters. You should assume that there is one and only one CEO (i.e., an employee with no superiors) and that all employees appear only once as a subordinate in the input. Print the hierarchy starting from the CEO. Each level of the hierarchy should be indented with two spaces more than the previous level. Example 1: Input: ``` 6 Alice Bob Alice Charlie Bob Dave Charlie Eve Charlie Frank Charlie Grace ``` Output: ``` Alice Bob Dave Charlie Eve Frank Grace ``` Note: The output hierarchical structure may vary depending on the alphabetical order of subordinates within the same hierarchy level.","solution":"from collections import defaultdict class EmployeeNode: def __init__(self, name): self.name = name self.subordinates = [] def build_hierarchy(n, relationships): nodes = {} subordinates = set() # Create nodes for each employee and build a mapping for emp, sub in relationships: if emp not in nodes: nodes[emp] = EmployeeNode(emp) if sub not in nodes: nodes[sub] = EmployeeNode(sub) nodes[emp].subordinates.append(nodes[sub]) subordinates.add(sub) # Find the CEO who is not someone\'s subordinate ceo = None for emp in nodes: if emp not in subordinates: ceo = nodes[emp] break return ceo def print_hierarchy(root, level=0): print(\\" \\" * level + root.name) for sub in sorted(root.subordinates, key=lambda x: x.name): print_hierarchy(sub, level + 1) def manage_hierarchy(n, relationships): ceo = build_hierarchy(n, relationships) print_hierarchy(ceo) # Sample input relationship list n = 6 relationships = [ (\'Alice\', \'Bob\'), (\'Alice\', \'Charlie\'), (\'Bob\', \'Dave\'), (\'Charlie\', \'Eve\'), (\'Charlie\', \'Frank\'), (\'Charlie\', \'Grace\') ] # Main method manage_hierarchy(n, relationships)"},{"question":"You have been given a set of social media posts gathered from three different platforms. Each post can be labeled as originating from one of the following platforms: Twitter, Facebook, or Instagram. The goal is to identify the platform of a given post based on the patterns present in the posts from each platform. You will be provided with an extensive dataset of posts from each platform that you can use to train your algorithm. The dataset is composed of three directories named \\"Twitter\\", \\"Facebook\\", and \\"Instagram\\". Each directory contains multiple text files, and each file represents a single post from the corresponding platform. The format of each post in the text files is as follows: 1. The first line contains the post identifier, a unique integer. 2. The second line contains the username of the post author. 3. The third line and all subsequent lines contain the content of the post. The task is to write a program that predicts the platform of a given post. The platform of a post will always be one of the three from the training set. Input: - The first line contains the integer id (0 ≤ id ≤ 106) representing the post identifier. - The second line contains the username of the author. - The third line and all subsequent lines contain the content of the post. The size of any given post will not exceed 10 kilobytes. Your program should output: - A string: either \\"Twitter\\", \\"Facebook\\", or \\"Instagram\\", indicating the platform the given post likely originates from.","solution":"import os from collections import Counter import re platform_keywords = { \\"Twitter\\": Counter(), \\"Facebook\\": Counter(), \\"Instagram\\": Counter() } def preprocess_text(content): # Basic preprocessing to remove special characters and lowercase conversion content = re.sub(r\'[^a-zA-Z0-9s]\', \'\', content) content = content.lower().split() return content def train_model(base_path=\\"dataset\\"): for platform in platform_keywords.keys(): platform_path = os.path.join(base_path, platform) for filename in os.listdir(platform_path): with open(os.path.join(platform_path, filename), \'r\', encoding=\'utf-8\') as file: lines = file.readlines() content = \' \'.join(lines[2:]) processed_content = preprocess_text(content) platform_keywords[platform].update(processed_content) def classify_post(post_id, username, content): words = preprocess_text(content) scores = {platform: 0 for platform in platform_keywords.keys()} for word in words: for platform in platform_keywords.keys(): scores[platform] += platform_keywords[platform][word] return max(scores, key=scores.get)"},{"question":"You are given a list of integers and a target sum. You need to determine if there is a pair of distinct indices (i) and (j) in the list such that the sum of the elements at these indices equals the target sum. The first line of the input contains one integer (t) ((1 le t le 100)) — the number of test cases. Each test case consists of two lines. The first line contains two integers (n) and (k) ((2 le n le 1000, -10^9 le k le 10^9)) — the number of elements in the list and the target sum, respectively. The second line contains (n) integers (a_1, a_2, ..., a_n) ((-10^9 le a_i le 10^9)) — the elements of the list. For each test case, print \\"YES\\" if there are two distinct indices (i) and (j) in the list such that (a_i + a_j = k). Otherwise, print \\"NO\\". # Example ``` Input 3 5 9 2 7 11 15 1 3 6 1 2 3 4 4 -1 2 1 -6 Output YES YES NO ``` # Explanation In the first test case, (2 + 7 = 9), hence the output is \\"YES\\". In the second test case, (1 + 2 + 3) contains a pair (3 + 3), which sums up to 6, hence the output is \\"YES\\". In the third test case, no pairs of elements sum up to 4, hence the output is \\"NO\\".","solution":"def find_pair_with_target_sum(n, k, arr): Determine if there is a pair of distinct indices in arr that sum up to k. :param n: The number of elements in the list. :param k: The target sum. :param arr: The list of integers. :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for num in arr: if (k - num) in seen: return \\"YES\\" seen.add(num) return \\"NO\\" def handle_multiple_test_cases(test_cases): Handles multiple test cases for the find_pair_with_target_sum function. :param test_cases: A list of test cases, each represented as a tuple (n, k, arr). :return: A list of results for each test case. results = [] for n, k, arr in test_cases: results.append(find_pair_with_target_sum(n, k, arr)) return results"},{"question":"Consider an online marketplace where sellers can list their items for auction. Each seller specifies a starting price for their item and a duration for the auction. The duration indicates how many days the auction will run. Write a program to determine which seller\'s item will still be up for auction on a given day. The input consists of an integer n (1 ≤ n ≤ 1000) — the number of sellers, and a series of n sets of two integers s_i and d_i, where s_i (1 ≤ s_i ≤ 10000) is the starting price for each item and d_i (1 ≤ d_i ≤ 365) is the duration (in days) for each item\'s auction. An additional input integer q (1 ≤ q ≤ 365) represents the queried day. The output should be a single integer representing the number of items that will still be in auction on day q. Consider day 1 as the first day of the auctions. Input The first line contains the integer n. The next n lines contain two integers s_i and d_i for each seller. The final line contains the integer q. Output Print a single integer — the number of items that are still in the auction on day q. Example Input: ``` 3 100 10 200 5 150 7 6 ``` Output: ``` 2 ``` In this example, on day 6, the items from the first and third sellers are still available. The second seller\'s item, with a duration of 5 days, has ended.","solution":"def items_still_in_auction(n, sellers, q): still_in_auction_count = 0 for s, d in sellers: if d >= q: still_in_auction_count += 1 return still_in_auction_count # Example input n = 3 sellers = [(100, 10), (200, 5), (150, 7)] q = 6 # Example output print(items_still_in_auction(n, sellers, q)) # Output: 2"},{"question":"Sienna and Max are playing a game with a sequence of numbers. They have a list of n numbers, and their goal is to transform this list into a strictly increasing sequence by removing the minimum number of elements possible. A sequence a is strictly increasing if a_1 < a_2 < dots < a_k where k is the length of the sequence after removing the necessary elements. Given the list of numbers, determine the minimum number of elements they need to remove to make the sequence strictly increasing. # Input - The first line contains a single integer n (1 le n le 10^5) — the number of elements in the list. - The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements in the list. # Output - Print a single integer — the minimum number of elements that need to be removed to make the sequence strictly increasing. # Example Input ``` 7 5 2 6 3 4 7 1 ``` Output ``` 3 ``` # Explanation In the example, one possible way to make the sequence strictly increasing is by removing the elements 5, 3, and 1. The remaining sequence 2, 6, 4, 7 is strictly increasing. There might be other subsequences, but we need to minimize the number of elements removed.","solution":"def min_elements_to_remove(n, sequence): Determines the minimum number of elements to remove to make the sequence strictly increasing. :param n: Integer - the number of elements in the sequence. :param sequence: List of integers - the sequence of numbers. :return: Integer - the minimum number of elements to remove. # Initialize an empty list to store the longest increasing subsequence (LIS) lis = [] # Function to find the insertion point to keep \'lis\' sorted def binary_search_lis(x): lo, hi = 0, len(lis) while lo < hi: mid = (lo + hi) // 2 if lis[mid] < x: lo = mid + 1 else: hi = mid return lo # Traverse each number in the sequence for num in sequence: pos = binary_search_lis(num) if pos < len(lis): lis[pos] = num else: lis.append(num) # The minimum number of elements to remove is the length of the sequence minus the length of the LIS return n - len(lis)"},{"question":"Given an array `arr` of `n` integers, you need to find the length of the longest subsequence such that the difference between the maximum and minimum element in the subsequence is at most `m`. # Input - The first line contains two integers `n` and `m` (1 ≤ n ≤ 400,000, 0 ≤ m ≤ 1,000,000). - The second line contains `n` integers: `arr[i]` (1 ≤ arr[i] ≤ 1,000,000). # Output - Print a single integer representing the length of the longest subsequence satisfying the given condition. # Example Input ``` 6 3 1 3 5 2 8 2 ``` Output ``` 3 ``` # Note In the example given, the longest subsequence is `[1, 3, 2]`, as the difference between the maximum and minimum element in this subsequence is 2, which is ≤ 3. Another valid subsequence is `[2, 2, 1]` but the length is 3, which is the same as the previous sequence. Hence, the maximum length is 3.","solution":"def longest_subsequence_length(n, m, arr): Returns the length of the longest subsequence such that the difference between the maximum and minimum element in the subsequence is at most m. :param n: Integer, the length of the array. :param m: Integer, the allowed difference between the max and min elements in the subsequence. :param arr: List of integers, the array elements. :return: Integer, the length of the longest valid subsequence. from collections import deque # Initialize variables left = 0 max_deque = deque() min_deque = deque() max_len = 1 for right in range(n): # Maintain deques for max and min values while max_deque and arr[max_deque[-1]] <= arr[right]: max_deque.pop() while min_deque and arr[min_deque[-1]] >= arr[right]: min_deque.pop() max_deque.append(right) min_deque.append(right) # Ensure the condition for max and min difference is met while arr[max_deque[0]] - arr[min_deque[0]] > m: left += 1 if max_deque[0] < left: max_deque.popleft() if min_deque[0] < left: min_deque.popleft() # Update the maximum length of subsequence max_len = max(max_len, right - left + 1) return max_len"},{"question":"Given an integer array `arr` of size `n`, a range query `(l, r)`, and an integer `k`, your task is to determine if there is a subarray of length at least `k` within the range `[l, r]` such that the sum of the subarray is divisible by `k`. The first line of the input contains three integers `n`, `q`, and `k` (1 ≤ n, q ≤ 10^5, 1 ≤ k ≤ 10^9) — the size of the array, the number of queries, and the integer `k`. The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 10^9) — the elements of the array. The next `q` lines contain two integers `l` and `r` (1 ≤ l ≤ r ≤ n) representing the range within which you need to check the condition. For each query, output \\"Yes\\" if there exists a subarray of length at least `k` within the range `[l, r]` such that the sum of the subarray is divisible by `k`. Otherwise, output \\"No\\". # Example Input: ``` 5 2 3 1 2 3 4 5 1 4 2 5 ``` Output: ``` Yes Yes ``` Explanation: In the first query, for the range `[1, 4]`, the subarray `[3, 4, 5]` sums to 12, which is divisible by 3. In the second query, for the range `[2, 5]`, the subarray `[2, 3, 4]` sums to 9, which is divisible by 3. There are other valid subarrays as well.","solution":"def check_subarray_divisibility(n, queries, k, arr, ranges): results = [] for l, r in ranges: found = False l -= 1 r -= 1 for i in range(l, r + 1): current_sum = 0 if i + k - 1 > r: break for j in range(i, min(i + k, r + 1)): current_sum += arr[j] if current_sum % k == 0 and (j - i + 1) >= k: found = True break if found: break results.append(\\"Yes\\" if found else \\"No\\") return results"},{"question":"You are given a collection of single words and you need to determine which word can be transformed into another word by rearranging its letters. If a word A can be transformed to word B by rearranging the letters, then A is an anagram of B. Write a function that takes a list of words and returns a list of anagram groups. Each anagram group is a list of words that are anagrams of each other. The list should be sorted in descending order of the number of words in the anagram group, and within each anagram group, the words should be sorted in alphabetical order. # Input - A single integer `n` (1 ≤ n ≤ 100,000) — the number of words. - The following `n` lines each contain a single word. Each word consists of lowercase English letters and will have a length of at most 20. # Output - Print each anagram group in a separate line. - Each line contains the words in one anagram group separated by spaces. # Example Input ``` 5 listen silent enlist inlets google ``` Output ``` enlist inlets listen silent google ``` # Note In the example above, \\"listen\\", \\"silent\\", \\"enlist\\", and \\"inlets\\" are anagrams of each other. \\"google\\" has no anagrams in the given list. The function should form the anagram groups and return them sorted as specified.","solution":"from collections import defaultdict def group_anagrams(words): Returns a list of anagram groups. Each anagram group is a list of words that are anagrams of each other. The list is sorted in descending order of the number of words in the anagram group, and within each anagram group, the words are sorted in alphabetical order. anagram_map = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_map[sorted_word].append(word) anagram_groups = list(anagram_map.values()) for group in anagram_groups: group.sort() anagram_groups.sort(key=lambda x: (-len(x), x)) return anagram_groups"},{"question":"In a kingdom ruled by King Arithmos, there\'s a network of villages connected by roads. This network can be represented as an undirected graph where villages are nodes and roads are edges. The kingdom wants to improve communication efficiency by ensuring that every village has a direct or indirect communication line to every other village. However, building new roads is expensive, and King Arithmos wants to build the minimum number of additional roads needed to achieve this goal. You are tasked with finding the minimum number of roads that need to be added to ensure that the entire network becomes a single connected component. The first line of input will contain two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of villages (nodes) and the number of existing roads (edges) in the network. The next m lines of input will each contain two integers u and v (1 ≤ u, v ≤ n) — indicating that there is an existing road between village u and village v. Output a single integer, the minimum number of additional roads needed to make the network a single connected component. # Example Input ``` 6 3 1 2 2 3 4 5 ``` Output ``` 2 ``` Explanation With the given roads, we have three connected components: {1, 2, 3}, {4, 5}, and {6}. To make the network fully connected, we can add roads (3, 4) and (5, 6), resulting in a single connected component: {1, 2, 3, 4, 5, 6}. Therefore, the minimum number of additional roads needed is 2.","solution":"def minimum_roads_to_connect_villages(n, m, edges): from collections import defaultdict def dfs(node, visited, graph): stack = [node] while stack: v = stack.pop() for neighbor in graph[v]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) connected_components = 0 for i in range(1, n + 1): if not visited[i]: visited[i] = True connected_components += 1 dfs(i, visited, graph) return connected_components - 1"},{"question":"You are given a list of integers representing the energy levels of different players in a game. The players need to form pairs to participate in a series of challenges. Each pair can only participate in one challenge. The difficulty of each challenge is represented by an integer, and every challenge requires exactly two players. The skill level of a pair is defined as the sum of their energy levels. Your task is to find the maximum number of challenges that can be completed by forming pairs of players, such that the skill level of each pair is at least as much as the difficulty of the corresponding challenge. Each player can only be paired once in the entire process. **Input:** - The first line contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) representing the number of players and the number of challenges respectively. - The second line contains n integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 10^9) representing the energy levels of players. - The third line contains m integers b[1], b[2], ..., b[m] (1 ≤ b[i] ≤ 10^9) representing the difficulty of each challenge. **Output:** - Output a single integer representing the maximum number of challenges that can be completed. **Example:** _Input:_ ``` 6 3 1 2 3 4 5 6 7 8 7 ``` _Output:_ ``` 2 ``` Explanation: The pairs (1,6), (2,5), and (3,4) will form the pairs with energy levels (7,7,7) which meet the challenge difficulties 7, 8, and 7. Hence, 2 challenges could be completed.","solution":"def max_challenges_completed(n, m, energies, difficulties): Returns the maximum number of challenges that can be completed. Parameters: n (int): Number of players. m (int): Number of challenges. energies (list of int): Energy levels of players. difficulties (list of int): Difficulties of challenges. Returns: int: Maximum number of challenges completed. energies.sort() difficulties.sort() challenge_count = 0 i, j = 0, n - 1 for difficulty in difficulties: while i < j: if energies[i] + energies[j] >= difficulty: challenge_count += 1 i += 1 j -= 1 break else: i += 1 return challenge_count"},{"question":"Given an integer `n`, return the number of trailing zeros in the factorial of `n`. A trailing zero is created with the pair of factors 2 and 5. Since there are always more 2s than 5s in factorials, the task reduces to counting the number of 5s in the factors of all numbers from 1 to n. You are given a single integer `n` (0 ≤ n ≤ 10^9). Print a single integer that represents the number of trailing zeros in `n!`. Example 1: Input: 5 Output: 1 Explanation: 5! = 120, which has 1 trailing zero. Example 2: Input: 25 Output: 6 Explanation: 25! has 6 trailing zeros because there are 6 multiples of 5 (5, 10, 15, 20, 25) in the factors up to 25. Note that 25 contributes an extra factor of 5.","solution":"def trailing_zeroes_in_factorial(n): Returns the number of trailing zeros in n! (factorial of n). count = 0 power_of_5 = 5 while n >= power_of_5: count += n // power_of_5 power_of_5 *= 5 return count"},{"question":"Given a sequence of n integers, a subsequence is a sequence that can be derived by deleting some or no elements of the array without changing the order of the remaining elements. A subsequence is called a \\"high-low subsequence\\" if the sequence of its elements is strictly alternating between increasing and decreasing. For example, if the original sequence is [1, 3, 5, 4, 2], then [1, 3, 2] and [3, 5, 4] are valid \\"high-low subsequences.\\" Write a program to find the length of the longest \\"high-low subsequence\\" in the given sequence. If there are multiple longest subsequences, output the length of one of them. The first line contains a single integer n (1 ≤ n ≤ 105) - the number of integers in the sequence. The second line contains n integers separated by spaces - the sequence of integers. Each integer in the sequence will be between -109 and 109. The only line of output should contain one integer - the length of the longest \\"high-low subsequence.\\" Example: Input: 6 1 7 4 9 2 5 Output: 6 The entire sequence [1, 7, 4, 9, 2, 5] is a \\"high-low subsequence.\\"","solution":"def longest_high_low_subsequence(arr): Returns the length of the longest \\"high-low subsequence\\" in the given array. if not arr: return 0 up = 1 down = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: up = down + 1 elif arr[i] < arr[i - 1]: down = up + 1 return max(up, down) # Example Usage # n = 6 # sequence = [1, 7, 4, 9, 2, 5] # print(longest_high_low_subsequence(sequence)) # Output: 6"},{"question":"You are given a connected, undirected graph with `n` nodes (numbered from 1 to `n`) and `m` edges. Your task is to calculate the shortest path from a given start node `s` to all other nodes using Breadth-First Search (BFS) algorithm. If a node is unreachable from the start node, the distance should be described as `-1`. The first line of the input contains two integers `n` (2 ≤ `n` ≤ 100,000) and `m` (1 ≤ `m` ≤ 200,000), representing the number of nodes and edges, respectively. The next `m` lines each contain two integers `u` and `v` (1 ≤ `u`, `v` ≤ `n`, `u` ≠ `v`), describing an undirected edge between nodes `u` and `v`. The last line contains a single integer `s` (1 ≤ `s` ≤ `n`), which is the start node. Output `n` integers. The `i-th` integer should be the shortest distance from the start node `s` to node `i` (1 ≤ `i` ≤ `n`). If a node `i` is unreachable from the start node `s`, print `-1` as the distance to node `i`. Input: ``` 6 7 1 2 1 3 2 4 3 4 3 5 4 5 5 6 1 ``` Output: ``` 0 1 1 2 2 3 ``` In this example, the shortest path distances from node 1 are: - Node 1 to 1: 0 (itself) - Node 1 to 2: 1 (direct edge) - Node 1 to 3: 1 (direct edge) - Node 1 to 4: 2 (through node 2 or 3) - Node 1 to 5: 2 (through node 3 or 4) - Node 1 to 6: 3 (through node 5)","solution":"from collections import deque, defaultdict def bfs_shortest_path(n, m, edges, start): Returns the shortest path from start node to all other nodes using BFS. If a node is unreachable, the distance should be -1. # Create the adjacency list graph = defaultdict(list) for edge in edges: u, v = edge graph[u].append(v) graph[v].append(u) # Initialize distances and queue for BFS distances = [-1] * (n + 1) distances[start] = 0 queue = deque([start]) # Perform BFS while queue: current = queue.popleft() for neighbor in graph[current]: if distances[neighbor] == -1: # Not visited distances[neighbor] = distances[current] + 1 queue.append(neighbor) # Adjust output ignoring the 0-th index return distances[1:] # Example input n = 6 m = 7 edges = [(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5), (5, 6)] start = 1 # Example usage print(bfs_shortest_path(n, m, edges, start)) # Output should be [0, 1, 1, 2, 2, 3]"},{"question":"You are given a matrix of integers with n rows and m columns. Each element in the matrix is either 0 or 1. Your task is to count the number of rectangles in the matrix that have all four corners as 1. A rectangle is defined as a set of four distinct indices (i1, j1), (i1, j2), (i2, j1), (i2, j2) such that 1 ≤ i1 < i2 ≤ n and 1 ≤ j1 < j2 ≤ m and the values in these locations are all 1. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the matrix. Each of the following n lines contains m integers, either 0 or 1, representing the elements of the matrix. Print a single integer — the number of rectangles with all four corners as 1. # Example Input: 4 4 1 0 1 1 1 1 1 0 1 1 1 1 0 1 0 1 Output: 8","solution":"def count_rectangles(matrix): n = len(matrix) m = len(matrix[0]) count = 0 # Iterate over every pair of rows for i1 in range(n): for i2 in range(i1 + 1, n): current_count = 0 # Count the number of columns where both rows have a 1 for j in range(m): if matrix[i1][j] == 1 and matrix[i2][j] == 1: current_count += 1 # Use combinatorics to count the number of rectangles if current_count > 1: count += (current_count * (current_count - 1)) // 2 return count # Example usage: # matrix = [ # [1, 0, 1, 1], # [1, 1, 1, 0], # [1, 1, 1, 1], # [0, 1, 0, 1] # ] # print(count_rectangles(matrix)) # Output: 8"},{"question":"A factory produces toys by putting together different parts. Each toy is made up of a specific number of parts, and each part takes a certain amount of time to be assembled. You are given a list of toys and their respective parts, along with the time it takes to assemble each part. Your task is to determine the total assembly time for each toy. Input: - The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of toys. - The next `t` lines each describe a toy. The line starts with an integer `p` (1 ≤ p ≤ 100) — the number of parts the toy has, followed by `p` space-separated integers, where each integer represents the time `ti` (1 ≤ ti ≤ 100) it takes to assemble the i-th part. Output: For each toy, print the total time required to assemble it on a new line. Example: Input: 3 4 5 3 2 4 2 6 7 3 8 1 3 Output: 14 13 12","solution":"def total_assembly_time(toys): Returns the total assembly time for each toy. Parameters: toys (list of list of int): Each element is a list where the first element is the number of parts and the subsequent elements are the times to assemble each part. Returns: list of int: Total assembly times for each toy. results = [] for toy in toys: total_time = sum(toy[1:]) # Sum the time of parts, ignoring the first element which is the number of parts results.append(total_time) return results"},{"question":"Grigory is studying the properties of perfect numbers. A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding the number itself. For example, 6 is a perfect number because its proper divisors are 1, 2, and 3, and 1 + 2 + 3 = 6. To deepen his understanding, Grigory has devised a challenge: given an integer, determine whether it is a perfect number or not. You need to write a function that takes an integer and checks if it is a perfect number. The function should return \\"YES\\" if the integer is perfect and \\"NO\\" otherwise. # Input - The first input line contains a single integer t (1 ≤ t ≤ 10^5), the number of test cases. - Each of the following t lines contains a single integer n (1 ≤ n ≤ 10^9), the number to be checked. # Output For each test case, print a single line containing \\"YES\\" if n is a perfect number, otherwise print \\"NO\\". # Example Input ``` 3 6 28 12 ``` Output ``` YES YES NO ```","solution":"def is_perfect_number(n): Determine if the number n is a perfect number. if n <= 1: return \\"NO\\" sum_divisors = 1 sqrt_n = int(n ** 0.5) for i in range(2, sqrt_n + 1): if n % i == 0: sum_divisors += i if i != n // i: sum_divisors += n // i if sum_divisors == n: return \\"YES\\" else: return \\"NO\\" def check_perfect_numbers(t, test_cases): Check multiple test cases to identify if they are perfect numbers. results = [] for n in test_cases: results.append(is_perfect_number(n)) return results"},{"question":"You are given a matrix of \'0\'s and \'1\'s. An island is a group of connected \'1\'s (connected horizontally or vertically). The number of islands is the count of connected \'1\'s groups in the matrix. Given the matrix, count the number of islands. Input: The first line of input contains two integers m and n (1 ≤ m, n ≤ 100), the number of rows and columns in the matrix respectively. Each of the next m lines contains n characters, where each character is either \'0\' or \'1\'. Output: Output a single integer representing the number of islands. Example: Input: 4 5 11000 11000 00100 00011 Output: 3","solution":"def numIslands(grid): def dfs(i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == \'0\': return grid[i][j] = \'0\' # Mark as visited dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) if not grid or not grid[0]: return 0 island_count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': island_count += 1 dfs(i, j) return island_count"},{"question":"You are given a binary tree with n nodes, where each node has a unique value between 1 and n. Your task is to determine the longest path in the tree such that the sum of the values of the nodes along the path is even. Such a path can start and end at any node in the tree. The first line contains a single integer n (1 le n le 10^5) — the number of nodes in the tree. Each of the next n-1 lines contains two integers u and v (1 le u, v le n) — indicating an edge between nodes u and v. Output a single integer — the length of the longest path where the sum of the values is even. # Example Input 7 1 2 2 3 2 4 4 5 4 6 6 7 Output 5","solution":"from collections import defaultdict, deque def find_longest_even_sum_path(n, edges): def bfs(node): visited = [-1] * (n + 1) q = deque([(node, 0)]) visited[node] = 0 farthest_node = node distance = 0 while q: current, dist = q.popleft() for neighbor in graph[current]: if visited[neighbor] == -1: visited[neighbor] = dist + 1 q.append((neighbor, dist + 1)) if dist + 1 > distance: distance = dist + 1 farthest_node = neighbor return farthest_node, distance graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # First BFS to find one endpoint of the longest path farthest_node, _ = bfs(1) # Second BFS from the farthest node found other_farthest_node, longest_path_length = bfs(farthest_node) return longest_path_length if longest_path_length % 2 == 0 else longest_path_length - 1 # Example usage # Read input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) edges = [] index = 1 for _ in range(n - 1): u = int(data[index]) v = int(data[index + 1]) edges.append((u, v)) index += 2 result = find_longest_even_sum_path(n, edges) print(result) if __name__ == \\"__main__\\": main()"},{"question":"A software company plans to deploy its server infrastructure across different regions. To optimize the network performance, the system architect needs to calculate the Euclidean distance between server locations in a 3D space. Given the coordinates of two server locations in space, calculate the Euclidean distance between them. The input consists of six integers x1, y1, z1, x2, y2, z2 ( - 1000 ≤ x1, y1, z1, x2, y2, z2 ≤ 1000). Output the Euclidean distance between the two server locations with a precision of 6 decimal places. Note: The Euclidean distance between points (x1, y1, z1) and (x2, y2, z2) can be calculated using the formula: distance = √((x2 - x1)² + (y2 - y1)² + (z2 - z1)²) Example 1: Input: 1 2 3 4 5 6 Output: 5.196152 Example 2: Input: 0 0 0 0 0 0 Output: 0.000000","solution":"import math def euclidean_distance(x1, y1, z1, x2, y2, z2): Returns the Euclidean distance between two points in a 3D space with a precision of 6 decimal places. distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2) return float(f\\"{distance:.6f}\\")"},{"question":"Vera is an archaeologist who explores underground caves. There are n chambers connected by m passages. Each passage has a certain width. Vera can use each passage only if both chambers at its ends are not closed. Each day, some chambers will be closed for maintenance, making them inaccessible. Vera needs your help to find the widest possible passage that connects two still accessible chambers at the end of the day. Given the number of chambers and passages, the details of each passage (the chambers they connect and their width), and the chambers that will be closed on a certain day, you must determine the width of the widest usable passage for each day. The first line contains two integers n and m (2 ≤ n ≤ 100,000, 1 ≤ m ≤ 200,000), denoting the number of chambers and the number of passages, respectively. The next m lines each contain three integers ui, vi, wi (1 ≤ ui, vi ≤ n, 1 ≤ wi ≤ 10^9), indicating there is a passage of width wi between chamber ui and vi. The following line contains an integer d (1 ≤ d ≤ 100,000), the number of days. Each of the next d lines contains an integer k (1 ≤ k ≤ n-1), followed by k distinct integers c1, c2, ..., ck (1 ≤ ci ≤ n), describing the chambers that will be closed for maintenance on that day. For each day, print the width of the widest usable passage. If no passage can be used, print 0.","solution":"def widest_usable_passage(n, m, passages, d, closed_days): Returns the width of the widest usable passage for each day given the number of chambers, passages, and closed chambers on each day. Parameters: n (int): number of chambers. m (int): number of passages. passages (list): list of tuples where each tuple contains (ui, vi, wi). d (int): number of days. closed_days (list): list of lists where each sublist contains chambers closed on that day. Returns: list: the width of the widest usable passage for each day. def is_accessible(chamber, closed): return chamber not in closed # Pre-sort passages by width in descending order sorted_passages = sorted(passages, key=lambda x: -x[2]) results = [] for closed in closed_days: # Set of closed chambers for the day closed_set = set(closed[1:]) for ui, vi, wi in sorted_passages: if is_accessible(ui, closed_set) and is_accessible(vi, closed_set): results.append(wi) break else: results.append(0) return results"},{"question":"You are given an array of integers where each element represents the number of candies in a box. Your goal is to distribute these boxes into two groups such that the absolute difference between the total candies in each group is minimized. You are allowed to: 1. Select any subset of boxes to form one group, and the remaining boxes will form the other group. 2. Distribute the boxes in such a way that no box can be split or partially included in either group. Write a function that calculates the minimum absolute difference of total candies between two groups. # Input An integer array `arr` of length n (1 le n le 200, 1 le arr[i] le 10^4). # Output An integer representing the minimum absolute difference of total candies between the two groups. # Example Input: ``` arr = [3, 1, 4, 2, 2] ``` Output: ``` 0 ``` # Explanation - One possible distribution is: [3, 2, 2] and [1, 4], both groups sum up to 7. # Note - The objective is to split the array into two groups with nearly equal sums. - Use dynamic programming or combinatorial techniques to find the optimal solution efficiently despite potentially large values within the array.","solution":"def min_difference(arr): # Calculate total sum of all candies total_sum = sum(arr) # Initialize the dp array where dp[i] means whether i sum is possible. dp = [False] * (total_sum + 1) dp[0] = True # Update the dp array for candy in arr: for j in range(total_sum, candy - 1, -1): dp[j] = dp[j] or dp[j - candy] # Now we need to find the minimum difference by checking the sums possible up to total_sum // 2 min_diff = total_sum for s in range(total_sum // 2 + 1): if dp[s]: min_diff = min(min_diff, abs(total_sum - 2 * s)) return min_diff"},{"question":"Vladimir the Inventor from the Mechanical City has created a robot named RoboHelper to assist with day-to-day tasks. He wants to program RoboHelper to handle the task of organizing a collection of books. Each book has a unique ID and a certain genre. RoboHelper should sort the books by their genre in alphabetical order and, within the same genre, by their IDs in ascending order. The input consists of several lines. The first line contains an integer n (1 ≤ n ≤ 100), the number of books. The next n lines describe the books. Each line contains an integer ID (1 ≤ ID ≤ 1000) and a string genre (1 ≤ |genre| ≤ 50). Each genre string contains only lowercase English letters. Output the sorted list of books. Each book should be represented in the output by its ID and genre, separated by a space. Output each book on a new line. Example: Input: 4 15 fantasy 23 science 8 fantasy 42 history Output: 15 fantasy 8 fantasy 42 history 23 science Help Vladimir organize his books perfectly using RoboHelper.","solution":"def organize_books(n, books): Organizes a collection of books by genre in alphabetical order and then by their IDs in ascending order within the same genre. Args: n (int): The number of books. books (list of tuples): A list containing n tuples, each tuple contains an integer ID and a string genre. Returns: list of tuples: A sorted list of books represented as tuples (ID, genre). sorted_books = sorted(books, key=lambda book: (book[1], book[0])) return sorted_books"},{"question":"Bavli is a software developer working on optimizing a large database. He needs to process a stream of queries in real-time. Each query can be one of two types: 1. Update a specific value in the database. 2. Calculate the sum of values in a given range. The database can be represented as an array of integers. The first type of query updates the value at a specific index, while the second type calculates the sum of values between two specified indices, inclusive. Given the initial state of the database and a sequence of queries, help Bavli determine the result for each sum query. The first line of the input contains two integers n and q (1 ≤ n ≤ 100,000, 1 ≤ q ≤ 100,000) — the number of elements in the database and the number of queries, respectively. The second line contains n integers a_1, a_2, ..., a_n – the initial state of the database. Each of the next q lines contains a query. Each query is one of the following: - `1 x y`: Update the x-th element of the database to y (1 ≤ x ≤ n, -10^9 ≤ y ≤ 10^9). - `2 l r`: Calculate the sum of elements from the l-th to the r-th element, inclusive (1 ≤ l ≤ r ≤ n). For each sum query, output the result on a new line. In the example below: - The initial database is [1, 2, 3, 4, 5]. - The first query updates the 3rd element to 6, resulting in the database [1, 2, 6, 4, 5]. - The second query calculates the sum from the 2nd to the 4th element, which is 2 + 6 + 4 = 12. - The third query calculates the sum from the 1st to the 5th element, which is 1 + 2 + 6 + 4 + 5 = 18. Example: Input: 5 3 1 2 3 4 5 1 3 6 2 2 4 2 1 5 Output: 12 18","solution":"class Database: def __init__(self, data): self.data = data self.n = len(data) self.prefix_sums = self.compute_prefix_sums() def compute_prefix_sums(self): prefix_sums = [0] * (self.n + 1) for i in range(1, self.n + 1): prefix_sums[i] = prefix_sums[i - 1] + self.data[i - 1] return prefix_sums def update(self, index, value): current_value = self.data[index - 1] diff = value - current_value self.data[index - 1] = value for i in range(index, self.n + 1): self.prefix_sums[i] += diff def sum_range(self, left, right): return self.prefix_sums[right] - self.prefix_sums[left - 1] def process_queries(n, q, initial_data, queries): db = Database(initial_data) results = [] for query in queries: if query[0] == 1: db.update(query[1], query[2]) elif query[0] == 2: result = db.sum_range(query[1], query[2]) results.append(result) return results"},{"question":"You are tasked with developing a portion of the backend for a popular online survey platform. One critical component involves validating the surveys created by users. Each survey consists of several questions, and each question can have multiple types of responses, such as multiple-choice, rating scale, or text. Your job is to ensure that the survey configuration is correct before it is presented to users. The survey configuration is given as follows: - The first line contains an integer n (1 ≤ n ≤ 1000) – the number of questions in the survey. - The next n lines describe the questions. Each line starts with an integer qtype (1 ≤ qtype ≤ 3) followed by the specific parameters for that question type: - If qtype is 1 (multiple choice question), the line contains an additional integer c (2 ≤ c ≤ 10) representing the number of choices. - If qtype is 2 (rating scale question), the line contains two integers rmin and rmax (1 ≤ rmin < rmax ≤ 10) representing the minimum and maximum ratings. - If qtype is 3 (text question), the line contains an integer l (1 ≤ l ≤ 500) representing the maximum length allowed for the text response. You need to ensure the following validation rules: 1. For multiple choice questions (qtype 1), the number of choices (c) must be at least 2. 2. For rating scale questions (qtype 2), the minimum rating (rmin) must be less than the maximum rating (rmax). 3. For text questions (qtype 3), the maximum length (l) must be positive and within the allowed range. If all the survey questions meet the validation criteria, print \\"Survey is valid\\". Otherwise, print \\"Survey is invalid\\" and list the indices (1-based) of all invalid questions in a single line, separated by spaces. # Sample Input 1 ``` 4 1 4 2 1 5 3 300 2 3 8 ``` # Sample Output 1 ``` Survey is valid ``` # Sample Input 2 ``` 3 1 1 2 5 5 3 0 ``` # Sample Output 2 ``` Survey is invalid 1 2 3 ```","solution":"def validate_survey(survey): Validates the given survey configuration. Parameters: - survey: A list of strings where the first element contains the number of questions n, and the following elements contain the questions and their parameters. Returns: A string \\"Survey is valid\\" if all survey questions are valid, otherwise \\"Survey is invalid\\" followed by the indices of invalid questions. n = int(survey[0]) invalid_indices = [] for i in range(1, n+1): question = list(map(int, survey[i].split())) qtype = question[0] if qtype == 1: c = question[1] if not (2 <= c <= 10): invalid_indices.append(i) elif qtype == 2: rmin, rmax = question[1], question[2] if not (1 <= rmin < rmax <= 10): invalid_indices.append(i) elif qtype == 3: l = question[1] if not (1 <= l <= 500): invalid_indices.append(i) if invalid_indices: return f\\"Survey is invalid {\' \'.join(map(str, invalid_indices))}\\" else: return \\"Survey is valid\\""},{"question":"You are given an array of integers. Your task is to process a series of update and query operations on this array. Specifically, you must efficiently handle the following types of operations: 1. Update the value at a specified index in the array. 2. Query the sum of all elements in the array. The first line contains two integers, n and q (1 ≤ n, q ≤ 100,000) — the number of elements in the array and the number of operations, respectively. The second line contains n integers, the initial elements of the array. Each of the following q lines describes an operation and can be one of the following: - \\"1 i x\\": Update the element at index i (0-based) to x (1 ≤ i < n; -10^9 ≤ x ≤ 10^9). - \\"2\\": Query the current sum of all the elements in the array. For each query of the second type, output the answer on a new line. # Example **Input:** ``` 5 4 1 2 3 4 5 2 1 2 10 2 1 4 -5 ``` **Output:** ``` 15 22 ``` **Explanation:** 1. Initially, the array is [1, 2, 3, 4, 5]. The sum is 1 + 2 + 3 + 4 + 5 = 15. 2. After changing the element at index 2 to 10, the array becomes [1, 2, 10, 4, 5]. The new sum is 1 + 2 + 10 + 4 + 5 = 22. 3. After changing the element at index 4 to -5, the array becomes [1, 2, 10, 4, -5]. The array sum is not queried again in this example.","solution":"class ArrayProcessor: def __init__(self, array): self.array = array self.total_sum = sum(array) def update(self, index, value): old_value = self.array[index] self.array[index] = value self.total_sum += value - old_value def query_sum(self): return self.total_sum def process_operations(n, q, array, operations): results = [] processor = ArrayProcessor(array) for operation in operations: if operation[0] == 1: index = operation[1] value = operation[2] processor.update(index, value) elif operation[0] == 2: results.append(processor.query_sum()) return results"},{"question":"Write a function that simulates a simple turn-based text-based battle game between two characters. Each character has a name, health points (HP), attack power, and a special ability. The rules of the game are as follows: 1. The game starts with both players at their full health. 2. Players take turns attacking each other. 3. On each player\'s turn, they can choose to perform a regular attack or use their special ability. - A regular attack decreases the opponent\'s HP by the attacker\'s attack power. - The special ability can only be used once per game and has a unique effect for each player: * For Player 1, the special ability instantly sets the opponent\'s HP to 1, regardless of their current HP. * For Player 2, the special ability doubles their current HP. 4. The game ends when the HP of one of the players drops to 0 or below. 5. If both players reach 0 HP on the same turn, the game is a draw. Write a function `battle_game(player1, player2)` that takes in two dictionaries representing the two players and simulates the game until there is a winner or a draw. Each player dictionary has the following structure: ```python { \\"name\\": \\"Player1\\", \\"hp\\": 100, \\"attack_power\\": 20, \\"special_used\\": False # initially set to False, should be updated to True after special ability is used } ``` The function should print each move in the following format: ``` Player1 attacks Player2: Player2 HP is now <new_hp>. Player2 uses special ability: Player2 HP is now <new_hp>. ``` After the game ends, the function should print the winner in the following format: ``` Player1 wins! ``` If the game ends in a draw, it should print: ``` It\'s a draw! ``` # Example ```python player1 = { \\"name\\": \\"Player1\\", \\"hp\\": 100, \\"attack_power\\": 20, \\"special_used\\": False } player2 = { \\"name\\": \\"Player2\\", \\"hp\\": 90, \\"attack_power\\": 25, \\"special_used\\": False } battle_game(player1, player2) ``` Output: ``` Player1 attacks Player2: Player2 HP is now 70. Player2 attacks Player1: Player1 HP is now 75. Player1 attacks Player2: Player2 HP is now 50. Player2 uses special ability: Player2 HP is now 100. Player1 attacks Player2: Player2 HP is now 80. Player2 attacks Player1: Player1 HP is now 50. Player1 uses special ability: Player2 HP is now 1. Player2 attacks Player1: Player1 HP is now 25. Player1 attacks Player2: Player2 HP is now 0. Player1 wins! ```","solution":"def battle_game(player1, player2): Simulates a turn-based text-based battle game between two characters. turn = 0 while player1[\\"hp\\"] > 0 and player2[\\"hp\\"] > 0: attacker = player1 if turn % 2 == 0 else player2 defender = player2 if turn % 2 == 0 else player1 use_special = False if not attacker[\\"special_used\\"]: if attacker[\\"name\\"] == \\"Player1\\": use_special = True elif attacker[\\"name\\"] == \\"Player2\\": if attacker[\\"hp\\"] <= defender[\\"hp\\"]: use_special = True if use_special and not attacker[\\"special_used\\"]: if attacker[\\"name\\"] == \\"Player1\\": defender[\\"hp\\"] = 1 print(f\'{attacker[\\"name\\"]} uses special ability: {defender[\\"name\\"]} HP is now {defender[\\"hp\\"]}.\') elif attacker[\\"name\\"] == \\"Player2\\": attacker[\\"hp\\"] *= 2 print(f\'{attacker[\\"name\\"]} uses special ability: {attacker[\\"hp\\"]}.\') attacker[\\"special_used\\"] = True else: defender[\\"hp\\"] -= attacker[\\"attack_power\\"] print(f\'{attacker[\\"name\\"]} attacks {defender[\\"name\\"]}: {defender[\\"name\\"]} HP is now {defender[\\"hp\\"]}.\') turn += 1 if player1[\\"hp\\"] <= 0 and player2[\\"hp\\"] <= 0: print(\\"It\'s a draw!\\") elif player1[\\"hp\\"] <= 0: print(f\'{player2[\\"name\\"]} wins!\') else: print(f\'{player1[\\"name\\"]} wins!\')"},{"question":"A company is organizing a team-building activity where employees can form different teams to solve interesting problems. Each team must consist of exactly one team leader and at least one member. Employees can participate either as a leader or as a member, but not both simultaneously. Given that there are l team leaders and m members in total, you need to calculate the number of distinct valid teams that can be formed. Also, determine whether it is possible to form any valid team with the given l and m. Input: - A single line containing two space-separated integers l and m (0 ≤ l, m ≤ 105) — the number of team leaders and the number of members, respectively. Output: - If it is possible to form at least one valid team, return two space-separated integers: - The minimum number of distinct valid teams, - The maximum number of distinct valid teams. - If it is not possible to form any valid team, print \\"Impossible\\". Constraints: - Each team must have exactly one team leader. - Each team must have at least one member. # Example Input ``` 3 7 ``` Output ``` 3 7 ``` Input ``` 5 4 ``` Output ``` Impossible ``` # Explanation In the first example, there are 3 leaders and 7 members. The minimum number of teams is 3 because we need at least 3 members for each leader, one per team. The maximum is also 3 because we can distribute all 7 members into 3 teams, with each team getting at least one member, with some possibly having more. In the second example, there are 5 leaders and only 4 members, which is not enough to form any valid team because each team needs at least one member.","solution":"def calculate_teams(l, m): Calculate the minimum and maximum number of distinct valid teams. Args: l: int : the number of team leaders. m: int : the number of members. Returns: str: \\"Impossible\\" if it is not possible to form any valid team. Otherwise, return the minimum and maximum number of distinct valid teams. if l == 0 or m == 0 or m < l: return \\"Impossible\\" min_teams = l # Minimum teams = number of leaders because each leader must have at least one member max_teams = min(l, m) # Maximum teams = min(leaders, members) because a team can only form with one leader and one member return f\\"{min_teams} {max_teams}\\""},{"question":"You are given two integers, n and k. An integer x is called a beautiful number if all its digits are the same and it contains exactly k digits. Your task is to determine the number of distinct beautiful numbers less than or equal to n. A number is beautiful if it satisfies these conditions: 1. All digits of the number are the same. 2. The number has exactly k digits. For example, for n = 100 and k = 2, the beautiful numbers less than or equal to n are 11, 22, 33, 44, 55, 66, 77, 88, and 99. # Input - The first line contains an integer t (1 le t le 10^4), the number of test cases. - Each of the next t lines contains two integers n and k (1 le n le 10^{18}, 1 le k le 18). # Output Output t lines. For each test case, output the number of distinct beautiful numbers less than or equal to n. # Example Input ``` 3 100 2 22222 5 9 1 ``` Output ``` 9 2 9 ``` # Explanation - For the first test case with n = 100 and k = 2, the beautiful numbers are 11, 22, 33, 44, 55, 66, 77, 88, and 99, totalling 9 numbers. - For the second test case with n = 22222 and k = 5, the beautiful numbers are 11111 and 22222, totalling 2 numbers. - For the third test case with n = 9 and k = 1, all single-digit numbers from 1 to 9 are beautiful numbers, totalling 9 numbers.","solution":"def count_beautiful_numbers(n, k): Returns the number of beautiful numbers less than or equal to n with exactly k digits. count = 0 for digit in range(1, 10): beautiful_number = int(str(digit) * k) if beautiful_number <= n: count += 1 return count def process_test_cases(test_cases): results = [] for n, k in test_cases: results.append(count_beautiful_numbers(n, k)) return results"},{"question":"A warehouse management system needs to track items on shelves. Each shelf has a unique identifier and can hold items up to a certain weight limit. Items have specified weights and unique identifiers. The objective is to efficiently manage the items on the shelves such that no shelf exceeds its weight limit while maximizing the total weight of items stored. You are provided with the following data: 1. `n` - the number of shelves. 2. `m` - the number of items. 3. A list of pairs where each pair represents a shelf with its identifier and weight limit. 4. A list of pairs where each pair represents an item with its identifier and weight. Your task is to distribute the items across the shelves in such a way that the total weight of items on each shelf does not exceed its limit, and the total weight of all items stored on the shelves is maximized. If there are multiple solutions with the same total weight, you can return any valid one. The first line contains two integers `n` (`1 <= n <= 1000`) and `m` (`1 <= m <= 1000`) — the number of shelves and the number of items, respectively. The next `n` lines each contain an identifier and a weight limit for a shelf. The next `m` lines each contain an identifier and a weight for an item. Output \\"YES\\" if it is possible to distribute the items according to the constraints. Otherwise, output \\"NO\\". If it is possible, also output the assignment of items to shelves, where each assignment includes the shelf identifier, followed by the list of items assigned to that shelf. Example input: ``` 3 5 shelf1 10 shelf2 20 shelf3 15 item1 5 item2 8 item3 4 item4 7 item5 12 ``` Example output: ``` YES shelf1: item1 item3 shelf2: item4 item5 shelf3: item2 ``` In this example, the items are assigned in such a way that: - Shelf1 holds item1 and item3 with a total weight of 9 (≤ 10). - Shelf2 holds item4 and item5 with a total weight of 19 (≤ 20). - Shelf3 holds item2 with a total weight of 8 (≤ 15). - The total weight of stored items is maximized, and no shelf exceeds its weight limit.","solution":"def distribute_items(n, m, shelves, items): # Sort the items in descending order of their weights items.sort(key=lambda x: x[1], reverse=True) # Create a list to keep track of the current weight on each shelf current_weight = {shelf[0]: 0 for shelf in shelves} # Create a list to keep track of the items assigned to each shelf assignments = {shelf[0]: [] for shelf in shelves} # Try to distribute items to the shelves for item_id, item_weight in items: placed = False for shelf_id, shelf_limit in shelves: if current_weight[shelf_id] + item_weight <= shelf_limit: assignments[shelf_id].append(item_id) current_weight[shelf_id] += item_weight placed = True break if not placed: return \\"NO\\" result = [\\"YES\\"] for shelf_id in assignments: result.append(f\\"{shelf_id}: \\" + \\" \\".join(assignments[shelf_id])) return \\"n\\".join(result)"},{"question":"Hinata and Kageyama are practicing their skills in graph theory by working on connected components. They are given an undirected graph with n vertices and m edges, and their task is to determine the number of connected components in the graph. A connected component is a maximal set of vertices such that there is a path between any two vertices in the set. Hinata and Kageyama decided to represent the graph using an adjacency list. Write a program to find the number of connected components in the given graph. The first line contains two integers n (1 leq n leq 10^5) and m (0 leq m leq 2 cdot 10^5), the number of vertices and edges, respectively. The next m lines contain two integers u and v (1 leq u, v leq n), indicating that there is an edge between vertices u and v. Output a single integer representing the number of connected components in the graph. # Input Format - The first line contains two integers n and m. - The next m lines each contain two integers u and v. # Output Format - Output a single integer representing the number of connected components in the graph. # Example Input ``` 6 5 1 2 2 3 1 3 4 5 5 6 ``` Output ``` 2 ``` **Explanation**: In this example, there are two connected components in the graph. The first component includes vertices {1, 2, 3}, and the second component includes vertices {4, 5, 6}.","solution":"def number_of_connected_components(n, m, edges): from collections import defaultdict, deque # Create an adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Function to perform BFS and mark visited nodes def bfs(node): queue = deque([node]) visited[node] = True while queue: current = queue.popleft() for neighbor in adj_list[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) visited = [False] * (n + 1) connected_components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i) connected_components += 1 return connected_components"},{"question":"You have a collection of unique magical potions, where each potion is represented as a string of lowercase letters. These potions have a unique property: if you concatenate two potions, the resulting potion\'s magical strength is equal to the length of the longest common prefix (LCP) of the two potion strings. Given an array of potion strings, determine the maximum possible magical strength obtainable by concatenating any two distinct potions. For example, suppose you have the following potions: `[\\"abc\\", \\"abcd\\", \\"abf\\", \\"bde\\"]`. The possible unique pairs and their LCP lengths are as follows: - \\"abc\\" + \\"abcd\\" => LCP = 3 (\\"abc\\") - \\"abc\\" + \\"abf\\" => LCP = 2 (\\"ab\\") - \\"abc\\" + \\"bde\\" => LCP = 0 - \\"abcd\\" + \\"abf\\" => LCP = 2 (\\"ab\\") - \\"abcd\\" + \\"bde\\" => LCP = 0 - \\"abf\\" + \\"bde\\" => LCP = 0 The maximum magical strength in this case is 3. **Input:** - An integer n (2 ≤ n ≤ 100), the number of potions. - n lines follow, each containing a potion string consisting of lowercase letters. Each string has a length between 1 and 100 inclusive. **Output:** - A single integer representing the maximum possible magical strength obtainable. **Example:** ``` Input: 4 abc abcd abf bde Output: 3 ``` **Note:** In the given example, \\"abc\\" and \\"abcd\\" have the longest common prefix \\"abc\\" of length 3, which is the maximum possible magical strength achievable by concatenating any two distinct potion strings. **Constraints:** - Each potion string contains only lowercase English letters. - No two potion strings are the same.","solution":"def longest_common_prefix(s1, s2): Returns the length of the longest common prefix between strings s1 and s2. min_len = min(len(s1), len(s2)) for i in range(min_len): if s1[i] != s2[i]: return i return min_len def max_magical_strength(potions): Returns the maximum possible magical strength obtainable by concatenating any two distinct potions. max_strength = 0 n = len(potions) for i in range(n): for j in range(i + 1, n): lcp_length = longest_common_prefix(potions[i], potions[j]) if lcp_length > max_strength: max_strength = lcp_length return max_strength"},{"question":"You are given a string s consisting of lowercase English letters. You can perform a specific operation on this string any number of times: choose any character in the string s and remove it. Your task is to make the string s non-decreasing (each character is not less than the previous one) by performing the minimum number of operations. The first line contains a single integer n (1 ≤ n ≤ 200,000) — the length of the string s. The second line contains the string s which consists of lowercase English letters. Print the minimum number of operations needed to make the string s non-decreasing.","solution":"def min_operations_to_non_decreasing(s): Returns the minimum number of operations needed to make the string s non-decreasing. n = len(s) if n == 0: return 0 dp = [1] * n for i in range(1, n): for j in range(i): if s[i] >= s[j]: dp[i] = max(dp[i], dp[j] + 1) return n - max(dp)"},{"question":"You are given a grid with dimensions n times m. Each cell in the grid is either walkable or blocked. You start at the top-left corner of the grid (cell (1, 1)) and need to reach the bottom-right corner (cell (n, m)). You can only move to the right or down at each step. Additionally, you have a single-use ability to transform any one blocked cell into a walkable cell. Determine the minimum number of steps required to get from (1, 1) to (n, m) if you can use the transformation ability optimally. If it is not possible to reach (n, m) with an optimal use of the ability, return -1. # Input - The first line contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. - Each of the next n lines contains m integers, each either 0 or 1. A 0 represents a walkable cell, and a 1 represents a blocked cell. # Output - Print a single integer — the minimum number of steps required to get from (1, 1) to (n, m) if the transformation ability is used optimally. If it is impossible to reach (n, m), print -1. # Examples Example 1 # Input ``` 3 3 0 0 1 1 0 1 1 0 0 ``` # Output ``` 4 ``` Example 2 # Input ``` 3 3 0 1 1 1 0 1 1 1 0 ``` # Output ``` -1 ``` # Explanation Example 1 In the first example, you can take the following path with 4 steps: (1, 1) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3). Example 2 In the second example, even with the ability to transform one blocked cell to a walkable cell, it is not possible to reach from (1, 1) to (n, m).","solution":"from collections import deque def min_steps_with_transform(n, m, grid): def bfs(start_x, start_y, grid): directions = [(0, 1), (1, 0)] queue = deque([(start_x, start_y, 0)]) visited = [[False] * m for _ in range(n)] visited[start_x][start_y] = True while queue: x, y, steps = queue.popleft() if (x, y) == (n-1, m-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1 # Check if there\'s a direct path without any transformation direct_path_steps = bfs(0, 0, grid) if direct_path_steps != -1: return direct_path_steps # Try transforming each blocked cell (one by one) and see if there\'s a path min_steps = float(\'inf\') for i in range(n): for j in range(m): if grid[i][j] == 1: grid[i][j] = 0 steps = bfs(0, 0, grid) if steps != -1: min_steps = min(min_steps, steps) grid[i][j] = 1 return -1 if min_steps == float(\'inf\') else min_steps"},{"question":"Leila is working on a digital art project where she needs to match colors from two different palettes as closely as possible. Each color in the palettes is represented by an integer. You are given two arrays, C and D, each containing n integers where n is the number of colors in each palette. Leila wants to match each color in array C with a unique color from array D such that the sum of the absolute differences between each pair of matched colors is minimized. Help Leila find the optimal permutation of array D to achieve this minimum sum. # Input - The first line of input contains a single integer n (1 ≤ n ≤ 100,000), which is the number of colors in each palette. - The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1,000,000) representing the colors in palette C. - The third line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 1,000,000) representing the colors in palette D. # Output - Output n integers, representing the optimal permutation of array D that minimizes the sum of the absolute differences between matched colors from array C and the permuted array D. # Example Input ``` 4 4 8 6 2 7 3 5 1 ``` Output ``` 1 5 7 3 ``` # Explanation By sorting both arrays and pairing corresponding elements, you can minimize the sum of absolute differences for each pair. Therefore, you can sort both C and D and pair them in order to get the optimal permutation.","solution":"def find_optimal_permutation(n, C, D): Finds the optimal permutation of array D that minimizes the sum of the absolute differences between matched colors from array C and the permuted array D. Parameters: - n: int, number of colors in each palette. - C: list of int, colors in palette C. - D: list of int, colors in palette D. Returns: - list of int, representing the optimal permutation of array D. sorted_C = sorted(C) sorted_D = sorted(D) return sorted_D"},{"question":"Given an array of n integers, your task is to find the maximum sum of a contiguous subarray with a length that is no more than k. Write a function `max_contiguous_sum_with_length_limit` that takes in a list of integers `arr` and an integer `k`, and returns the maximum sum of any contiguous subarray whose length is at most `k`. # Input - A list of integers `arr` where ( 1 leq text{len(arr)} leq 10^5 ) and each integer ( x ) in the array ( -10^5 leq x leq 10^5 ). - An integer `k` such that ( 1 leq k leq text{len(arr)} ). # Output - An integer representing the maximum sum of any contiguous subarray whose length is no more than `k`. # Example ```python max_contiguous_sum_with_length_limit([1, -2, 3, 4, -1], 2) ``` **Output:** ``` 7 ``` **Explanation:** The contiguous subarray [3, 4] has the maximum sum of 7, which is within the length limit of 2.","solution":"def max_contiguous_sum_with_length_limit(arr, k): Returns the maximum sum of any contiguous subarray whose length is no more than k. n = len(arr) max_sum = float(\'-inf\') for length in range(1, k + 1): current_sum = sum(arr[:length]) max_sum = max(max_sum, current_sum) for i in range(length, n): current_sum += arr[i] - arr[i - length] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an integer array `arr` of size `n` (2 ≤ n ≤ 200,000) where each element represents the height of a building, and an integer `k`, your task is to determine the maximum number of adjacent buildings that have a height difference of at most `k`. Two buildings `arr[i]` and `arr[i+1]` are considered adjacent. The first line of input contains two integers `n` and `k` (1 ≤ k ≤ 1,000,000). The second line contains `n` space-separated integers representing the height of each building `arr[i]` (1 ≤ arr[i] ≤ 1,000,000). Output a single integer — the maximum number of adjacent buildings with a height difference of at most `k`. # Example Input ``` 6 3 11 15 14 13 12 16 ``` Output ``` 4 ``` Explanation In this example, the heights are `[11, 15, 14, 13, 12, 16]`. The maximum sequence where the height difference between the adjacent buildings does not exceed `k = 3` is `[15, 14, 13, 12]`, and the length of this sequence is 4.","solution":"def max_adjacent_buildings(arr, k): Returns the maximum number of adjacent buildings with a height difference of at most k. max_count = 1 current_count = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) <= k: current_count += 1 else: current_count = 1 max_count = max(max_count, current_count) return max_count"},{"question":"John is a photographer with a collection of n photos, each with a different level of aesthetic appeal. The appeal is represented as an integer from 1 to 100. He plans to create a collage consisting of exactly k photos from his collection, arranged in a sequence. To enhance the visual impact of the collage, he wants to ensure that no two adjacent photos in the sequence have the same level of appeal. Your task is to help John determine if it\'s possible to form such a collage. If it\'s possible, return one possible sequence of k photos satisfying the conditions. If it\'s not possible, return \\"Impossible\\". # Input The first line contains two integers n and k (1 le k le n le 100), the number of photos and the desired length of the collage, respectively. The second line contains n integers a_1, a_2, ldots, a_n, where a_i represents the aesthetic appeal of the i-th photo (1 le a_i le 100). # Output If it\'s possible to form such a collage of length k, output one possible sequence of k photo appeals, separated by spaces. If it\'s not possible, output \\"Impossible\\". # Example Input ``` 5 3 3 1 3 2 1 ``` Output ``` 3 1 2 ``` Input ``` 4 4 5 5 5 5 ``` Output ``` Impossible ``` # Constraints - The sequence must consist of exactly k photos. - Adjacent photos in the sequence must have different levels of aesthetic appeal.","solution":"def form_collage(n, k, appeals): unique_appeals = list(set(appeals)) if len(unique_appeals) >= k: return unique_appeals[:k] return \\"Impossible\\""},{"question":"In a city, there are n public parks, each represented as a straight line segment on a horizontal line. The parks may overlap, touch, or be disjoint. Each park has an entry gate at its left endpoint and an exit gate at its right endpoint. Parks are represented by n pairs of integers (L_i) and (R_i) (1 ≤ (L_i) ≤ (R_i) ≤ 10,000), where (L_i) is the position of the entry gate and (R_i) is the position of the exit gate of the i-th park. Your task is to find the sum of lengths of all the parks after merging all overlapping or touching parks into one park. Two parks are considered overlapping or touching if they share at least one point. The first line of input contains an integer n (1 ≤ n ≤ 10). n lines follow, each containing two integers (L_i) and (R_i) describing the i-th park\'s entry and exit gates. Output a single integer, the sum of the lengths of all the parks after merging. Consider the first example. The first park is represented by the segment [1, 5], the second park by [2, 6], and the third park by [8, 10]. The first two parks overlap and can be merged into [1, 6], while the third park remains as it is. Therefore, the total sum of park lengths after merging is (6-1) + (10-8) = 7. # Example Input: ``` 3 1 5 2 6 8 10 ``` Output: ``` 7 ```","solution":"def calculate_merged_parks_length(n, parks): if n == 0: return 0 # Sort parks based on the starting point (L_i) parks.sort() merged_parks = [] current_start, current_end = parks[0] for i in range(1, n): start, end = parks[i] if start <= current_end: # If the parks overlap or touch, merge them current_end = max(current_end, end) else: # If they don\'t overlap or touch, store the current park and move to the next merged_parks.append((current_start, current_end)) current_start, current_end = start, end # Append the last interval merged_parks.append((current_start, current_end)) # Calculate the total length of the merged parks total_length = sum(end - start for start, end in merged_parks) return total_length # Example function usage: # parks = [(1, 5), (2, 6), (8, 10)] # n = len(parks) # result = calculate_merged_parks_length(n, parks) # print(result) # Output should be 7"},{"question":"You are given a tree with n vertices. The tree is rooted at vertex 1, and each vertex in the tree has a certain color. Your task is to determine the number of distinct colors in the subtree of each vertex. The input consists of multiple lines: - The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of vertices in the tree. - The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 10^9) — the color of each vertex from 1 to n. - Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — denoting an edge between vertices u and v. The output should consist of n lines, where the i-th line contains the number of distinct colors in the subtree of vertex i. Example input: ``` 5 1 2 1 1 3 1 2 1 3 2 4 2 5 ``` Example output: ``` 3 3 1 1 1 ``` In the example, the tree structure is: ``` 1 (1) / 2 (2) 3 (1) / 4 (1) 5 (3) ``` The distinct colors in the subtree of each vertex are: - Vertex 1: {1, 2, 3} (total 3 distinct colors) - Vertex 2: {2, 1, 3} (total 3 distinct colors) - Vertex 3: {1} (total 1 distinct color) - Vertex 4: {1} (total 1 distinct color) - Vertex 5: {3} (total 1 distinct color)","solution":"from collections import defaultdict def count_distinct_colors(n, colors, edges): def dfs(node, parent): color_set = {colors[node]} for neighbor in tree[node]: if neighbor != parent: color_set.update(dfs(neighbor, node)) distinct_color_count[node] = len(color_set) return color_set tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) colors = [None] + colors # To use 1-indexed vertex distinct_color_count = [0] * (n + 1) dfs(1, -1) # Start DFS from root node 1 with no parent return distinct_color_count[1:] # Example usage: # n = 5 # colors = [1, 2, 1, 1, 3] # edges = [(1, 2), (1, 3), (2, 4), (2, 5)] # print(count_distinct_colors(n, colors, edges)) # Output: [3, 3, 1, 1, 1]"},{"question":"In a video game, players can gain experience points (XP) by performing various tasks. The game\'s developer wants to create a challenge where players must collect precisely \\"t\\" units of experience using exactly \\"k\\" tasks. To assist the developer, you need to write a function that determines if it is possible to obtain exactly \\"t\\" units of XP by performing exactly \\"k\\" tasks, given an array of integers representing the amount of experience each task grants. If it is possible, you should return the sequence of indices representing the tasks that fulfill the requirement. If there are multiple valid sequences, return any. If it is not possible, return an empty list. # Input: - The first line contains three integers: \\"n\\" (the number of tasks), \\"k\\" (the number of tasks to be selected), and \\"t\\" (the target experience points), where `1 ≤ k ≤ n ≤ 1000` and `1 ≤ t ≤ 10^6`. - The second line contains \\"n\\" integers representing the experience points of each task, where each value is between `1` and `10^4`. # Output: - A list of \\"k\\" integers representing the indices of the tasks that yield exactly \\"t\\" experience points. - If it is not possible to achieve exactly \\"t\\" experience points using \\"k\\" tasks, return an empty list. # Example: Input: ``` 5 3 15 5 6 7 8 16 ``` Output: ``` [0, 1, 2] # Sum is 5 + 6 + 7 = 18, shows indices start from 0 ``` Input: ``` 4 2 100 10 20 30 40 ``` Output: ``` [] # It is not possible to select 2 tasks to get exactly 100 XP. ``` # Note: You can assume that the function will be called with valid inputs as described.","solution":"from itertools import combinations def find_tasks_for_xp(n, k, t, xp_list): Determines if it is possible to obtain exactly t units of XP by performing exactly k tasks. Parameters: n (int): Number of tasks k (int): Number of tasks to be selected t (int): Target experience points xp_list (list): List of experience points for each task Returns: list: List of k indices of tasks that sum up to t XP if possible, otherwise [] # Generate all possible combinations of k indices for comb in combinations(range(n), k): if sum(xp_list[i] for i in comb) == t: return list(comb) return [] # Example test cases print(find_tasks_for_xp(5, 3, 18, [5, 6, 7, 8, 16])) # Expected output: [0, 1, 2] or other valid combination print(find_tasks_for_xp(4, 2, 100, [10, 20, 30, 40])) # Expected output: []"},{"question":"A delivery company is planning to optimize its delivery routes. Each delivery route is represented as a series of delivery points on a grid. The company\'s main concern is that no two delivery points on a single route should be directly adjacent (horizontally or vertically) to each other, to ensure efficient spacing and prevent overlap in delivery zones. Given a grid size of n x n (1 ≤ n ≤ 100) and k delivery points (1 ≤ k ≤ n^2), determine whether it is possible to place the k delivery points on the grid such that no two points are adjacent to each other. If it is possible, provide one such arrangement of the points. If it is not possible, return \\"Not possible\\". The grid coordinates are labeled from (1, 1) to (n, n). Output the coordinates of the k points if the arrangement is possible. Input: - The first line contains two integers n and k. Output: - If there is no valid arrangement, output \\"Not possible\\". - If there is a valid arrangement, output k lines, each containing two integers xi and yi (the coordinates of the i-th delivery point). Example Input 1: 4 3 Example Output 1: 1 1 3 1 1 3 Example Input 2: 2 5 Example Output 2: Not possible","solution":"def delivery_points(n, k): if k > (n * n + 1) // 2: return \\"Not possible\\" result = [] count = 0 for i in range(n): if count >= k: break for j in range(n): if (i+j) % 2 == 0: result.append((i+1, j+1)) count += 1 if count >= k: break if count < k: return \\"Not possible\\" else: return result"},{"question":"You are given a list of N integers ai (i=1, 2, ..., N) and an integer P. You need to determine if you can reorder the list such that the sum of every contiguous subsequence is not divisible by P. Formally, check if there exists a permutation of the array such that for every subsequence ai, ai+1, ..., aj (1 ≤ i ≤ j ≤ N), the sum (ai + ai+1 + ... + aj) is not divisible by P. The first line of input contains two integers N and P (1 ≤ N ≤ 1000, 1 ≤ P ≤ 10^6) — the size of the list and the divisor P. The second line contains N integers a1, a2, ..., aN (1 ≤ ai ≤ 10^6) — the elements of the list. Print \\"Yes\\" (without quotes) if such a reordering is possible, otherwise print \\"No\\" (without quotes). Example: Input: 5 3 1 2 3 4 5 Output: Yes Explanation: One possible reordering is [1, 2, 4, 5, 3]. No contiguous subsequence of this reordered array has a sum divisible by 3.","solution":"def can_reorder_not_divisible(arr, p): Determine if the array can be reordered such that no contiguous subsequence has a sum divisible by p. Args: arr (list): List of integers. p (int): The divisor. Returns: str: \\"Yes\\" if reordering is possible, otherwise \\"No\\". total_sum = sum(arr) if total_sum % p != 0: return \\"Yes\\" for num in arr: if num % p != 0: return \\"Yes\\" return \\"No\\""},{"question":"Given a list of dead-end streets in a city, you are tasked with finding the shortest path through the city such that you visit all dead-end streets at least once and return to the starting point. These dead-end streets can be considered as nodes, and connections between nodes as edges. Assume you are given an adjacency matrix representing the graph of the city, where the matrix value at position (i, j) represents the distance between node i and node j. Write a function that accepts an adjacency matrix of size `n x n` and returns the minimum total distance of the path that visits all nodes exactly once and returns to the starting point. If it\'s not possible to visit all nodes and return to the starting point due to disconnected nodes, return -1. Function Signature: ```python def shortest_path_through_city(adj_matrix: List[List[int]]) -> int: pass ``` # Input - An integer `n` (2 leq n leq 20): the number of dead-end streets (nodes). - A 2D list of integers `adj_matrix` of size `n x n` where `adj_matrix[i][j]` represents the distance between node i and node j. If there is no direct path between nodes `i` and `j`, `adj_matrix[i][j]` will be some large number representing infinity (e.g., 10^9). # Output - An integer: the minimum total distance if a path exists, or -1 if no such path is possible. # Example ```python adj_matrix = [ [0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0] ] print(shortest_path_through_city(adj_matrix)) # Output: 80 ``` # Note - The provided example represents a fully connected graph. For fully connected graphs, it will always be possible to find a path that visits all nodes exactly once and returns to the starting point. - You may use optimization techniques such as Dynamic Programming (e.g., Held-Karp algorithm) to solve the problem efficiently for the given constraints.","solution":"from typing import List import itertools def shortest_path_through_city(adj_matrix: List[List[int]]) -> int: n = len(adj_matrix) dp = [[float(\'inf\')] * n for _ in range(1 << n)] dp[1][0] = 0 for mask in range(1 << n): for u in range(n): if mask & (1 << u): for v in range(n): if not (mask & (1 << v)): next_mask = mask | (1 << v) dp[next_mask][v] = min(dp[next_mask][v], dp[mask][u] + adj_matrix[u][v]) shortest_route = min(dp[(1 << n) - 1][v] + adj_matrix[v][0] for v in range(1, n)) return shortest_route if shortest_route < float(\'inf\') else -1"},{"question":"Given an array of integers representing the elevations of a landscape from left to right, each unit index (elevation value) in the array represents a pixel elevation on a vertical line. You have to determine how much water the landscape can trap after raining. Write a function that takes an array of non-negative integers and returns a single integer representing the amount of trapped water. For example: - If the input is `[0,1,0,2,1,0,1,3,2,1,2,1]`, the output should be `6`. - If the input is `[4,2,0,3,2,5]`, the output should be `9`. The function should be efficient and run within a reasonable time frame considering the input constraints. # Constraints: - The length of the array will not exceed 100,000. - Each elevation value will be a non-negative integer not exceeding 10,000. # Function Signature ```python def trap_rain_water(heights: List[int]) -> int: ```","solution":"from typing import List def trap_rain_water(heights: List[int]) -> int: if not heights: # If the list is empty, return 0 return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate water trapped for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Emily is organizing a coding competition. She wants to create a leaderboard to display the rankings of participants based on their scores. However, the leaderboard should not only display the rankings but also show the rank changes of participants as new scores are submitted after each round. Help Emily to implement a dynamic leaderboard system. You need to write a system that manages the leaderboard rankings after each round. Initially, the leaderboard starts empty. The system should support the following operations: 1. \\"ADD participant_name score\\" - Adds a participant with the given name and score to the leaderboard. If the participant already exists, update their score. 2. \\"QUERY\\" - Prints the current leaderboard in descending order of scores. In case of a tie (participants with the same score), print them in lexicographical order of names. Include the participants\' rank change in parentheses if there’s any change compared to the previous ranking. The first line of the input contains an integer n (1 ≤ n ≤ 10,000), representing the number of commands. The next n lines contain commands in one of the aforementioned formats. When printing the leaderboard, each participant should be displayed on a new line in the form: \\"name score (rank change)\\". If a participant is added for the first time, their initial rank change should be shown as \\"(new)\\". **Example Input:** ``` 6 ADD Alice 50 QUERY ADD Bob 50 QUERY ADD Charlie 60 QUERY ``` **Example Output:** ``` Alice 50 (new) Alice 50 (=) Bob 50 (new) Charlie 60 (new) Alice 50 (-1) Bob 50 (-1) ```","solution":"class Leaderboard: def __init__(self): self.scores = {} self.previous_ranking = [] def add(self, name, score): self.scores[name] = score def query(self): current_ranking = sorted(self.scores.items(), key=lambda x: (-x[1], x[0])) changes = {} for idx, (name, score) in enumerate(current_ranking): if name not in self.previous_ranking: changes[name] = \\"(new)\\" else: old_rank = self.previous_ranking.index(name) rank_change = old_rank - idx if rank_change > 0: changes[name] = f\\"(+{rank_change})\\" elif rank_change < 0: changes[name] = f\\"({rank_change})\\" else: changes[name] = \\"(=)\\" self.previous_ranking = [name for name, _ in current_ranking] result = [f\\"{name} {score} {changes[name]}\\" for name, score in current_ranking] print(\\"n\\".join(result)) def process_commands(n, commands): leaderboard = Leaderboard() for command in commands: parts = command.split() if parts[0] == \\"ADD\\": _, name, score = parts score = int(score) leaderboard.add(name, score) elif parts[0] == \\"QUERY\\": leaderboard.query()"},{"question":"You are given a sequence of integers representing the heights of students standing in a row. The students often rearrange themselves and you want to know how many swaps are required to sort the sequence in non-decreasing order using bubble sort. Your task is to implement a function that counts the number of swaps performed when sorting the sequence using bubble sort. The first line contains a single integer n (1 ≤ n ≤ 100) — the number of students in the row. The second line contains a sequence of integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — where hi is the height of the i-th student. Print a single integer representing the number of swaps performed during the bubble sort. # Examples: **Input:** ``` 4 3 2 1 4 ``` **Output:** ``` 3 ``` **Input:** ``` 5 5 1 2 4 3 ``` **Output:** ``` 5 ``` In the first example, the sequence `[3, 2, 1, 4]` requires 3 swaps (`[3, 2, 1, 4] -> [2, 3, 1, 4] -> [2, 1, 3, 4] -> [1, 2, 3, 4]`). In the second example, the sequence `[5, 1, 2, 4, 3]` requires 5 swaps (first swap positions are `1-2`, `2-3`, `4-5`, second pass positions `1-2`, `4-5`). Note that you need to apply standard bubble sort and count the number of swaps made until the sequence is fully sorted.","solution":"def count_bubble_sort_swaps(n, heights): Counts the number of swaps needed to sort the heights array using bubble sort. :param n: int, number of students. :param heights: list of int, heights of the students. :return: int, number of swaps performed. swap_count = 0 for i in range(n): for j in range(0, n-i-1): if heights[j] > heights[j+1]: heights[j], heights[j+1] = heights[j+1], heights[j] swap_count += 1 return swap_count"},{"question":"You are given an integer array representing the number of candies each child has in a row. Every child knows how many candies the children on either side of them have. If a child has more candies than the child to their left, they must have more candies than the child on their right. You need to find the minimum number of candies needed to ensure this condition is met. The input consists of two lines: - The first line contains the integer `n` (1 ≤ n ≤ 100,000) – the number of children. - The second line contains `n` space-separated integers representing the number of candies each child has. Print the minimum number of candies needed. # Example: Input: ``` 3 1 0 2 ``` Output: ``` 5 ``` Explanation: - The child with 0 candies must have fewer candies than the children with 1 and 2 candies. The minimum distribution of candies could be: [2, 1, 2], summing to 5 candies. In another example: Input: ``` 4 1 2 2 1 ``` Output: ``` 6 ``` Explanation: - The minimal distribution ensuring the requirements would be: [1, 2, 2, 1], summing to 6 candies.","solution":"def minimum_candies_needed(n, candies): if n == 1: return 1 candies_needed = [1] * n for i in range(1, n): if candies[i] > candies[i - 1]: candies_needed[i] = candies_needed[i - 1] + 1 for i in range(n-2, -1, -1): if candies[i] > candies[i + 1]: candies_needed[i] = max(candies_needed[i], candies_needed[i + 1] + 1) return sum(candies_needed)"},{"question":"You are working on a new software project and need to implement a task scheduling feature. In this feature, you must determine whether a series of given intervals overlap. You will be given n intervals. Each interval is represented as an inclusive range between a start and end time. Your job is to write a function that determines if any of these intervals overlap. If any intervals overlap, the function should return `True`. Otherwise, it should return `False`. The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of intervals. Each of the following n lines contains two integers start and end (0 ≤ start < end ≤ 1000) — the start time and end time of the interval. Output the string `True` if there exists at least one overlap between any two intervals. Otherwise, output the string `False`. # Example Input ``` 3 1 5 5 8 9 12 ``` Output ``` False ``` Input ``` 3 1 5 4 8 9 12 ``` Output ``` True ```","solution":"def intervals_overlap(intervals): Determines if any of the given intervals overlap. Args: intervals (list of tuples): List of tuples where each tuple contains two integers, start and end. Returns: bool: True if any intervals overlap, False otherwise. # Sort intervals based on the start time intervals.sort(key=lambda x: x[0]) # Compare each interval with the next one for i in range(len(intervals) - 1): if intervals[i][1] > intervals[i + 1][0]: return True return False def read_intervals(input_string): Parses the input string into a list of intervals. Args: input_string (str): Multiline string where the first line contains the number of intervals, and the subsequent lines contain the start and end times of each interval. Returns: list of tuples: List of intervals. lines = input_string.strip().split(\'n\') n = int(lines[0]) intervals = [] for i in range(1, n + 1): start, end = map(int, lines[i].split()) intervals.append((start, end)) return intervals"},{"question":"You are given a string s consisting of lower case English letters. You can perform the following operation any number of times: - Choose any two adjacent characters in the string and remove them if they are the same. Your task is to determine if it is possible to completely remove all characters from the string by repeatedly applying the above operation. For instance, given the string \\"abccba\\", you can perform the following steps: - Remove \\"cc\\" to get \\"abba\\" - Remove \\"bb\\" to get \\"aa\\" - Remove \\"aa\\" to get an empty string Hence, the result for the string \\"abccba\\" would be \\"YES\\". However, given the string \\"abca\\", it is not possible to fully remove all characters, so the result would be \\"NO\\". The input consists of a single string s (1 ≤ length of s ≤ 10^5). The output should be a single line, you should print \\"YES\\" if it is possible to completely remove all characters from the string, and print \\"NO\\" otherwise.","solution":"def can_completely_remove(s): Determines if it is possible to completely remove all characters from the string by repeatedly applying the operation of removing adjacent same characters. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \'YES\' if not stack else \'NO\'"},{"question":"You are working on developing a software system that categorizes comments posted on an online platform to either `Spam` or `Not Spam`. Each comment is represented by a single string and it is guaranteed that the string will not exceed 500 characters in length. Your task is to write a function that takes a string as input and returns \\"Spam\\" or \\"Not Spam\\" based on the presence of certain keywords. The keywords for spam detection are predefined and provided as a list named `spam_keywords`. If any of the spam keywords is found as a substring in the input comment, the comment should be classified as \\"Spam\\". Otherwise, it should be classified as \\"Not Spam\\". The function signature is: `def classify_comment(comment: str, spam_keywords: List[str]) -> str` # Input - A single string, `comment` (1 ≤ |comment| ≤ 500), containing the comment text. - A list of strings, `spam_keywords` (1 ≤ |spam_keywords| ≤ 1000), where each string represents a spam keyword. # Output - A string, either \\"Spam\\" or \\"Not Spam\\". # Example ```python spam_keywords = [\\"buy now\\", \\"free\\", \\"click here\\", \\"subscribe\\", \\"win\\"] comment = \\"Don\'t miss your chance to win a free vacation!\\" print(classify_comment(comment, spam_keywords)) # Output: \\"Spam\\" comment2 = \\"Thank you for your insightful post.\\" print(classify_comment(comment2, spam_keywords)) # Output: \\"Not Spam\\" ``` # Constraints - Each keyword in `spam_keywords` will be a non-empty string consisting of lowercase letters and spaces only. - The comparison should be case insensitive. # Note - Use of regular expressions or any substring search method is allowed. - Ensure your solution is efficient to handle the edge cases where comment length is close to 500 and the number of keywords approaches 1000.","solution":"from typing import List def classify_comment(comment: str, spam_keywords: List[str]) -> str: comment_lower = comment.lower() for keyword in spam_keywords: if keyword.lower() in comment_lower: return \\"Spam\\" return \\"Not Spam\\""},{"question":"A renowned cookie bakery is faced with a unique issue. Their best-selling cookie box contains an assortment of cookies organized in a single line. Each cookie is uniquely identified by a letter (\'a\' to \'z\'). Due to a packaging error, one type of cookie is missing from the box. The customer feedback highlighted that the box is always supposed to contain cookies with each letter appearing exactly twice. The bakery manager is tasked with finding and filling the missing cookies. Given the current assortment, they need a program that determines which letter is missing and appends it at the right place to complete the box with each cookie letter appearing twice. For example, if there are 5 kinds of cookies and the current sequence is \\"aabbccdde\\", the program should determine and print \\"e\\", as a second \'e\' is needed to balance the box. Write a function `find_missing_cookie(n: int, cookies: str) -> str` that takes an integer `n` (the length of the current cookie sequence) and a string `cookies` (the current sequence of cookies) and returns the letter of the missing cookie. The input constraints are: - `1 <= n <= 51` - `n` is always odd, indicating exactly one missing cookie because the required length should be `2 * m` where `m` is the number of unique letters. # Input - The first line contains a single integer `n` representing the length of the current sequence of cookies. - The second line contains a string `cookies`, the cookies configuration with one type of cookie missing. # Output - Print the letter of the missing cookie. Example **Input:** ``` 9 aabbccdde ``` **Output:** ``` e ``` **Input:** ``` 11 aabbccddeef ``` **Output:** ``` f ``` **Note:** - Since there is exactly one missing cookie type to balance the assortment, your function should identify it and append the missing letter to complete the sequence.","solution":"def find_missing_cookie(n: int, cookies: str) -> str: Find the missing cookie type in the sequence and return it. :param n: An integer, the length of the current cookie sequence :param cookies: A string, the current cookie sequence with one type missing :return: A string, the missing cookie type from collections import Counter # Create a Counter object to count the occurrences of each cookie in the sequence cookie_counts = Counter(cookies) # Each cookie should appear exactly twice, thus find the one that appears only once for cookie, count in cookie_counts.items(): if count == 1: return cookie # Example usage: # Missing cookie is \'e\' print(find_missing_cookie(9, \'aabbccdde\')) # e # Missing cookie is \'f\' print(find_missing_cookie(11, \'aabbccddeef\')) # f"},{"question":"In a coding competition, participants are required to solve the following problem involving a sequence of integers. You are given two sequences of integers, A and B, each of length n. Both sequences are guaranteed to contain distinct integers ranging from 1 to 2n (inclusive). Your task is to determine a sequence C of length n, such that Ci is either Ai or Bi from the given sequences. Additionally, sequence C should have the property that all its elements are even. If there are multiple possible sequences C that satisfy the conditions, you need to find any one of them. If no such sequence exists, return -1. # Input - The first line of input contains a single integer n (1 ≤ n ≤ 1000). - The second line of input contains n space-separated integers A1, A2, ..., An. - The third line of input contains n space-separated integers B1, B2, ..., Bn. # Output - If it\'s possible to construct such a sequence C, print n space-separated integers representing one valid sequence C. - If it\'s not possible to construct such a sequence C, print -1. # Example Input ``` 4 1 3 5 7 2 4 6 8 ``` Output ``` 2 4 6 8 ``` Input ``` 3 1 3 5 7 9 11 ``` Output ``` -1 ``` # Note In the first example, the sequence C can be [2, 4, 6, 8] which meets all the conditions: each element is either from A or B and all elements are even. In the second example, it is not possible to construct a sequence C where all elements are even, so the output is -1. # Implementation Details Your algorithm should iterate through the sequences A and B, trying to construct the sequence C. If at any index i neither Ai nor Bi is even, then it\'s impossible to form the sequence C, and you should return -1. Otherwise, you should choose the even number from Ai or Bi for sequence C. If both are even, you can choose either one of them.","solution":"def form_even_sequence(n, A, B): C = [] for i in range(n): if A[i] % 2 == 0: C.append(A[i]) elif B[i] % 2 == 0: C.append(B[i]) else: return -1 return C"},{"question":"A local bakery is famous for its circular conveyor belt that has n different types of cakes placed in a circle. The conveyor belt rotates in such a way that all cakes shift one position in a clockwise direction after every unit of time. The cakes are unique and are initially placed in a specific order. The bakery staff needs to figure out when a specific type of cake will be at a specific position on the conveyor belt for the first time. Given the initial positions of all cakes, the problem is to determine how many times the belt needs to rotate so that the cake initially at position x would appear at position y for the first time. The first line of input contains an integer n (1 le n le 10^5) — the number of cakes on the conveyor belt. The second line contains n unique integers c_1, c_2, ..., c_n, which represent the initial order of cakes on the belt, where c_i is the type of the cake at the i-th position. The third line contains two integers x and y (1 le x, y le n) — denoting the initial position and the target position for the specific cake, respectively. Output a single integer — the minimum number of rotations required so that the cake that starts at position x appears at position y for the first time. # Example Input ``` 5 1 2 3 4 5 2 4 ``` Output ``` 2 ``` Explanation The cake that is initially at position 2 (which is of type 2) needs to appear at position 4. After 1 rotation: [5, 1, 2, 3, 4] After 2 rotations: [4, 5, 1, 2, 3] Here, after 2 rotations, the cake of type 2 is at position 4. So, the answer is 2.","solution":"def minimum_rotations(n, cakes, x, y): Returns the minimum number of rotations required so that cake initially at position x appears at position y. x_index = x - 1 y_index = y - 1 if y_index >= x_index: rotations = y_index - x_index else: rotations = n - x_index + y_index return rotations"},{"question":"A group of friends decided to play a game wherein each player will take turns drawing cards from a standard deck. A player\'s score is the sum of the values of the cards that they draw. The values for the cards are as follows: numbered cards hold their numeric value (2 through 10), face cards (Jack, Queen, King) are worth 10 points each, and the Ace can be worth either 1 or 11 points, whichever is more favorable for the player but does not exceed 21 points total for that player. Implement a function to determine the highest possible score a player can achieve without going over 21, given the cards they have drawn. Assume the input is a list of strings representing the cards drawn. The characters for the cards are as follows: - \'2\' to \'10\' for numbered cards - \'J\' for Jack - \'Q\' for Queen - \'K\' for King - \'A\' for Ace # Input - A list of strings representing the drawn cards. The list has at least 1 and at most 52 elements, and it only contains valid card representations. # Output - Return an integer representing the highest possible score without exceeding 21. If it is not possible to achieve a score of 21 or less, return 0. # Example ```python def max_score(cards): # Your code here # Example 1 print(max_score([\'A\', \'2\', \'J\'])) # Should return 13 # Example 2 print(max_score([\'5\', \'3\', \'8\', \'A\', \'K\'])) # Should return 27, hence the output should be 0 # Example 3 print(max_score([\'A\', \'A\', \'9\'])) # Should return 21 ```","solution":"def max_score(cards): Calculates the highest possible score without exceeding 21 using the given cards. values = {\'2\': 2, \'3\': 3, \'4\': 4, \'5\': 5, \'6\': 6, \'7\': 7, \'8\': 8, \'9\': 9, \'10\': 10, \'J\': 10, \'Q\': 10, \'K\': 10} total_points = 0 ace_count = 0 for card in cards: if card == \'A\': ace_count += 1 else: total_points += values[card] while ace_count > 0: if total_points + 11 + (ace_count - 1) <= 21: total_points += 11 else: total_points += 1 ace_count -= 1 return total_points if total_points <= 21 else 0"},{"question":"A large company processes a vast amount of data every day. One of their tasks is to analyze user activity on their platform. Each user event is logged with a timestamp, and the task is to find the maximum number of distinct users that are simultaneously active at any given time. The events are provided as an array of tuples, where each tuple contains the user ID and the timestamp of the event. For simplicity, a user is considered \\"active\\" from the time of their event for exactly T seconds. If a user has multiple events within T seconds, only the first event should be considered. Given the duration T and the array of user events, your task is to write a function that finds the maximum number of distinct users that are active simultaneously. Function Signature: ```python def max_active_users(events: List[Tuple[int, int]], duration: int) -> int: ``` Input: - `events`: a list of tuples where each tuple contains two integers. The first integer is the user ID, and the second integer is the timestamp of the event (0 ≤ timestamp ≤ 10^9). - `duration`: an integer T (1 ≤ T ≤ 10^6) which represents the active duration in seconds after each event. Output: - Return a single integer representing the maximum number of distinct users that are active simultaneously. Example: ```python print(max_active_users([(1, 1), (2, 5), (1, 2), (3, 8), (2, 10)], 5)) # Expected output: 2 ``` Explanation: - At timestamp 1, user 1 becomes active. - At timestamp 5, user 2 becomes active while user 1 is still active. - At timestamp 8, user 3 becomes active while user 2 is still active. - At timestamp 10, user 2\'s new event occurs, but since it happened within 5 seconds from their previous event, it does not count as a new activation. - The maximum number of distinct active users at the same time is 2 (user 1 and user 2 at timestamp 5).","solution":"from typing import List, Tuple from collections import defaultdict def max_active_users(events: List[Tuple[int, int]], duration: int) -> int: This function returns the maximum number of distinct users that are active simultaneously within a given duration. events.sort(key=lambda x: x[1]) active_events = [] user_last_event = {} for user_id, timestamp in events: if user_id in user_last_event and timestamp - user_last_event[user_id] < duration: continue user_last_event[user_id] = timestamp active_events.append((timestamp, 1)) active_events.append((timestamp + duration, -1)) active_events.sort() max_active = 0 current_active = 0 for _, event_type in active_events: current_active += event_type max_active = max(max_active, current_active) return max_active"},{"question":"You are given a string s, and two integers k and m. A substring t of string s is called special if it has the following properties: 1. The length of t is k. 2. t contains at least m distinct characters. Determine the number of special substrings of s. The first line contains the string s consisting of lowercase English letters (1 ≤ length of s ≤ 100,000). The second line contains the integers k and m (1 ≤ k ≤ length of s, 1 ≤ m ≤ 26). Print exactly one integer — the number of special substrings of s. **Example** Input: ```plaintext abcabc 3 2 ``` Output: ```plaintext 4 ``` Explanation: The substrings of length 3 are: - \\"abc\\": 3 distinct characters - \\"bca\\": 3 distinct characters - \\"cab\\": 3 distinct characters - \\"abc\\": 3 distinct characters All these substrings contain at least 2 distinct characters. Thus, the output is 4.","solution":"def special_substrings_count(s, k, m): Count the number of special substrings of length k in s that contain at least m distinct characters. Args: s (str): the input string k (int): the length of the substring m (int): the minimum number of distinct characters in the substring Returns: int: the number of special substrings n = len(s) count = 0 # Using a sliding window to count distinct characters in each substring of length k for i in range(n - k + 1): substring = s[i:i + k] if len(set(substring)) >= m: count += 1 return count"},{"question":"A sequence of integers a_1, a_2, ldots, a_n is called a zigzag sequence if the following conditions hold for all 1 leq i < n: - Either a_i < a_{i+1} and a_{i+1} > a_{i+2}, or a_i > a_{i+1} and a_{i+1} < a_{i+2} (considering modular indexing a_{n+1} = a_1 if necessary). You are given a sequence of n integers a_1, a_2, ldots, a_n (n geq 3). Write a program to determine whether it is possible to rearrange the elements of the sequence to form a zigzag sequence. **Input:** The first line contains an integer n (3 leq n leq 1000). The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9). **Output:** Print \\"YES\\" if it is possible to rearrange the elements to form a zigzag sequence. Otherwise, print \\"NO\\". **Examples:** **Input 1:** ``` 4 1 3 2 4 ``` **Output 1:** ``` YES ``` **Input 2:** ``` 5 1 2 3 4 5 ``` **Output 2:** ``` NO ``` **Explanation:** In the first example, we can rearrange the sequence to [1, 3, 2, 4] to satisfy the zigzag condition. In the second example, no possible rearrangement satisfies the zigzag condition.","solution":"def can_form_zigzag(n, arr): arr.sort() mid = (n + 1) // 2 left = arr[:mid] right = arr[mid:] zigzag_seq = [] for i in range(mid): if i < len(left): zigzag_seq.append(left[i]) if i < len(right): zigzag_seq.append(right[i]) for i in range(1, n - 1, 2): if not (zigzag_seq[i-1] < zigzag_seq[i] > zigzag_seq[i+1] or zigzag_seq[i-1] > zigzag_seq[i] < zigzag_seq[i+1]): return \\"NO\\" if not (zigzag_seq[-2] < zigzag_seq[-1] > zigzag_seq[0] or zigzag_seq[-2] > zigzag_seq[-1] < zigzag_seq[0]): return \\"NO\\" return \\"YES\\" # Example usage: n = 4 arr = [1, 3, 2, 4] print(can_form_zigzag(n, arr)) # Output: YES"},{"question":"In a land far, far away, there exists an enchanted forest with a magical river flowing through it. The river has a specific property: at certain points along the riverbank, it divides into multiple branches. Each branch either leads to another branch or finally to a mystical lake. These branches are represented as a tree structure with the root being the main river source and the leaves as various lakes. The forest guardian moves along the branches every day to collect magical herbs. The path they take on any given day is from the river source to any one of the lakes. The guardian prefers the shortest path to lessen the day\'s effort. Given the structure of this river network, you need to determine the shortest distance from the source to any lake and print the length of this path. The input for this question will be given in the following format: - The first line consists of an integer, n (1 leq n leq 100,000), representing the number of connections (or edges) in the river network. - The next n lines each consist of two integers, u and v (1 leq u, v leq 100,000), indicating that there is a connection between branch u and branch v. It\'s guaranteed that the river network forms a tree structure with the main river source being at node 1. Your task is to output the shortest distance from the river source (node 1) to any lake (leaf node). # Example Input ``` 6 1 2 1 3 2 4 2 5 3 6 3 7 ``` Output ``` 2 ``` # Explanation In this example: - The river network is like a tree starting at node 1. - There are four lakes at nodes 4, 5, 6, and 7. - The shortest path from the source (node 1) to any of these lakes is either through node 2 to nodes 4 or 5, or through node 3 to nodes 6 or 7. Each path has a length of 2. Thus, the answer is 2.","solution":"from collections import deque, defaultdict def shortest_path_to_lake(n, edges): if n == 0: return 0 # Create adjacency list adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # Use BFS to find shortest path from node 1 to any leaf node. queue = deque([(1, 0)]) # (current_node, current_distance) visited = set() visited.add(1) while queue: node, distance = queue.popleft() # Check if it\'s a leaf node if len(adjacency_list[node]) == 1 and node != 1: return distance for neighbor in adjacency_list[node]: if neighbor not in visited: queue.append((neighbor, distance + 1)) visited.add(neighbor) return 0 # This case shouldn\'t happen as per given constraints # Example: # n = 6 # edges = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)] # Output: 2"},{"question":"You are given an array of n integers (2 ≤ n ≤ 10^5) and q queries (1 ≤ q ≤ 10^5). Each element in the array is a non-negative integer that represents the height of a building. Similarly, each query consists of two integers l and r (1 ≤ l ≤ r ≤ n), which define a range within the array. For each query, you need to find out the maximum height of the buildings in the range [l, r]. The input consists of: 1. An integer n that represents the number of buildings. 2. An array of n integers that represents the height of each building. 3. An integer q that represents the number of queries. 4. q pairs of integers l and r that represent the range of each query. Output the answer to each query on a new line. # Input ``` 5 3 6 2 7 4 3 1 3 2 4 1 5 ``` # Output ``` 6 7 7 ``` # Explanation - For the first query (1, 3), the buildings in range [1, 3] have heights [3, 6, 2], and the maximum height is 6. - For the second query (2, 4), the buildings in range [2, 4] have heights [6, 2, 7], and the maximum height is 7. - For the third query (1, 5), the buildings in range [1, 5] have heights [3, 6, 2, 7, 4], and the maximum height is 7. # Constraints - The array and the ranges are 1-indexed. - Efficient query, such as using a segment tree or a sparse table, might be needed to handle large inputs within a reasonable timeframe. # Sample Inputs and Outputs Sample Input ``` 8 4 2 3 5 1 7 2 9 2 3 7 5 8 ``` Sample Output ``` 7 9 ```","solution":"def build_sparse_table(arr): import math n = len(arr) K = math.floor(math.log2(n)) + 1 st = [[0] * K for _ in range(n)] for i in range(n): st[i][0] = arr[i] j = 1 while (1 << j) <= n: i = 0 while (i + (1 << j) - 1) < n: st[i][j] = max(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]) i += 1 j += 1 return st def query_rmq(st, l, r): import math j = int(math.log2(r - l + 1)) return max(st[l][j], st[r - (1 << j) + 1][j]) def max_in_ranges(n, heights, queries): st = build_sparse_table(heights) results = [] for l, r in queries: results.append(query_rmq(st, l - 1, r - 1)) return results"},{"question":"You are given a list of integers and a series of operations that should be performed on this list. The operations can be of three types: 1. Add an integer to the list. 2. Remove an integer from the list (if it exists). 3. Compute and return the number of distinct integers currently in the list. Write a function `process_operations(operations: List[Tuple[int, int]]) -> List[int]` that takes a list of tuples as input, where each tuple represents an operation. Each tuple is of the form `(operation_type, integer)`, where `operation_type` is an integer (1, 2, or 3), and `integer` is the target integer for the operation (valid only for operations of type 1 and 2). Return a list of integers, each corresponding to the result of a type 3 operation. # Constraints: - `1 <= len(operations) <= 10^5` - For each operation `(operation_type, integer)`: - `operation_type` will be either 1, 2, or 3. - `integer` will be a non-negative integer not exceeding `10^9`. # Example: ```python operations = [(1, 5), (1, 7), (3, -1), (2, 7), (3, -1)] print(process_operations(operations)) # Output: [2, 1] ``` # Explanation: 1. Add 5 to the list -> list becomes [5]. 2. Add 7 to the list -> list becomes [5, 7]. 3. Compute and return the number of distinct integers -> returns 2. 4. Remove 7 from the list -> list becomes [5]. 5. Compute and return the number of distinct integers -> returns 1.","solution":"def process_operations(operations): Process a list of operations and returns the result of type 3 operations. Args: operations (List[Tuple[int, int]]): A list of operations where each operation is represented as a tuple (operation_type, integer). Returns: List[int]: A list of results of type 3 operations. current_integers = set() results = [] for operation in operations: op_type, value = operation if op_type == 1: current_integers.add(value) elif op_type == 2: current_integers.discard(value) elif op_type == 3: results.append(len(current_integers)) return results"},{"question":"A city skyline is represented by an n x 2 integer array buildings, where buildings[i] = [left_i, right_i] represents the ith building with its left and right edges at left_i and right_i respectively. The height of each building is represented by the index + 1, where the first building has a height of 1, the second has a height of 2, and so on. We want to draw the skyline formed by these buildings, which can be represented by a list of \\"key points\\" in the format of [x, height]. A key point is a critical point in the skyline where the shape changes. Given an array of buildings, write a function to return the skyline in the form of a list of key points. The key points should be sorted by their x-coordinate and should not have contiguous coordinates with the same height value. Example: Input: buildings = [[2, 9], [3, 7], [5, 12]] Output: [[2, 1], [3, 2], [5, 3], [12, 0]] Explanation: The buildings are represented as: # # # # # # # # # # 2 3 5 9 12 The skyline is represented as [ [2, 1], // indicates a height change to 1 at x = 2 [3, 2], // indicates a height change to 2 at x = 3 [5, 3], // indicates a height change to 3 at x = 5 [12, 0] // indicates the height drops to 0 at x = 12 ] Function Signature: ```python def get_skyline(buildings: List[List[int]]) -> List[List[int]]: ``` Constraints: 1 ≤ buildings.length ≤ 10^4 0 ≤ left_i < right_i ≤ 2^31 - 1","solution":"from typing import List from heapq import heappush, heappop def get_skyline(buildings: List[List[int]]) -> List[List[int]]: # Create a list of all the critical points (start and end) events = [] for i, (left, right) in enumerate(buildings): # Building starts events.append((left, - (i + 1))) # Use negative height to indicate a start # Building ends events.append((right, i + 1)) # Use positive height to indicate an end # Sort events events.sort() result = [] live_buildings = [0] # Max-heap of the heights of the buildings currently alive pos_to_remove = {} # Position for removal in the heap prev_height = 0 for x, h in events: if h < 0: # Starting of a building heappush(live_buildings, h) else: # Ending of a building pos_to_remove[h] = pos_to_remove.get(h, 0) + 1 # Removing the buildings from the heap that have been ended while live_buildings and pos_to_remove.get(-live_buildings[0], 0): pos_to_remove[-live_buildings[0]] -= 1 if pos_to_remove[-live_buildings[0]] == 0: del pos_to_remove[-live_buildings[0]] heappop(live_buildings) # Current maximum height current_height = -live_buildings[0] if live_buildings else 0 # Check if the height has changed if current_height != prev_height: result.append([x, current_height]) prev_height = current_height return result"},{"question":"A factory has a conveyor belt system with a robotic arm that sorts products. Each product on the conveyor belt is defined by an integer representing its weight. The robotic arm can sort the products into two bins, such that the total weight of the products in each bin is as equal as possible. The goal is to minimize the difference in the sum of weights between the two bins. Write a function that, given a list of product weights, returns the minimum possible difference. The first line of input contains an integer n (1 ≤ n ≤ 100), representing the number of products on the conveyor belt. The second line contains n space-separated integers w1, w2, ..., wn (1 ≤ wi ≤ 1000), representing the weights of the products. Output a single integer, which is the minimum possible difference between the total weights of the two bins. # Example ``` Input: 5 4 1 7 8 3 Output: 1 ``` # Explanation One way to sort the products is: - Bin 1: 4, 7, 3 (total weight = 14) - Bin 2: 1, 8 (total weight = 9) The difference is 14 - 9 = 5. However, a better way to sort is: - Bin 1: 4, 7 (total weight = 11) - Bin 2: 1, 8, 3 (total weight = 12) The difference is 12 - 11 = 1, which is the minimum possible difference.","solution":"def min_difference(weights): Returns the minimum possible difference between the total weights of the two bins. total_weight = sum(weights) n = len(weights) half_total_weight = total_weight // 2 # initializing DP array dp = [[False]*(half_total_weight + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): weight = weights[i - 1] for j in range(half_total_weight + 1): dp[i][j] = dp[i-1][j] if j >= weight: dp[i][j] = dp[i][j] or dp[i-1][j-weight] for j in range(half_total_weight, -1, -1): if dp[n][j]: bin1_weight = j bin2_weight = total_weight - j return abs(bin2_weight - bin1_weight)"},{"question":"Design a function that converts a given non-negative integer to its corresponding column title as it appears in an Excel sheet. For example: 1 -> A 2 -> B 3 -> C ... 26 -> Z 27 -> AA 28 -> AB ... Your task is to implement the function `convertToTitle` which takes an integer `columnNumber` as input and returns a string representing the column title. *Function Signature:* ```python def convertToTitle(columnNumber: int) -> str: ``` *Inputs:* - `columnNumber` (1 ≤ columnNumber ≤ 2^31 - 1): A non-negative integer representing the column number. *Outputs:* - Returns the corresponding column title as a string. *Example:* ```python convertToTitle(1) # Output: \\"A\\" convertToTitle(28) # Output: \\"AB\\" convertToTitle(701) # Output: \\"ZY\\" ```","solution":"def convertToTitle(columnNumber: int) -> str: Converts a given non-negative integer to its corresponding column title as it appears in an Excel sheet. title = [] while columnNumber > 0: columnNumber -= 1 title.append(chr(columnNumber % 26 + ord(\'A\'))) columnNumber //= 26 return \'\'.join(reversed(title))"},{"question":"Given a list of non-negative integers, write a function that calculates the sum of all the integers in the list. If the list is empty, the function should return 0. # Input - A list of non-negative integers `nums` (0 ≤ nums[i] ≤ 10^9, 0 ≤ |nums| ≤ 10^5). # Output - A single integer which is the sum of all the integers in the list. # Example 1: ``` Input: [1, 2, 3] Output: 6 ``` # Example 2: ``` Input: [] Output: 0 ``` # Example 3: ``` Input: [1000000000, 2000000000] Output: 3000000000 ``` # Note: - You must handle the edge case where the list might be empty. - The function should be efficient enough to handle the upper limits of input size.","solution":"def sum_of_integers(nums): Calculates the sum of all non-negative integers in the list. If the list is empty, returns 0. Args: nums (list): List of non-negative integers. Returns: int: Sum of integers in the list, 0 if the list is empty. return sum(nums)"},{"question":"Kuriyama Mirai, always interested in optimizing her tasks, is now faced with organizing energy stones into groups. Each stone has an energy rating. She aims to split the stones into the minimum number of non-empty groups so that the sum of the energy ratings in each group meets or exceeds a given target value. The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of energy stones. The second line contains n integers: `e1, e2, ..., en` (1 ≤ ei ≤ 10^9) — the energy ratings of the stones. The third line contains a single integer `t` (1 ≤ t ≤ 10^9) — the target sum for each group. Your task is to find the minimum number of groups required such that the sum of the energy ratings in each group is at least `t`. Print a single integer — the minimum number of groups needed to achieve the target sum for each group. **Example:** Input: ``` 5 4 8 7 3 2 10 ``` Output: ``` 2 ``` Explanation: One way to form the groups is by taking stones with energies (4, 7) and (8, 3), both groups sum to at least 10.","solution":"def min_groups(n, energies, target): energies.sort(reverse=True) groups = 0 i = 0 while i < n: current_sum = 0 while i < n and current_sum < target: current_sum += energies[i] i += 1 groups += 1 return groups # Example usage: # n = 5 # energies = [4, 8, 7, 3, 2] # target = 10 # print(min_groups(n, energies, target)) # Output: 2"},{"question":"Given an array of integers, you are tasked to modify it such that the array becomes \\"interesting\\". An array is considered interesting if the sum of its elements is equal to 0. You are allowed to perform operations on the array where you add 1 or subtract 1 from any element. You need to perform the minimum number of such operations to make the array interesting. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). The first line of each test case contains a single integer n (2 le n le 100), which is the number of elements in the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (−10^5 le a_i le 10^5), which are the initial values of the array. For each test case, print the minimal number of operations required to make the sum of the array equal to 0. # Input The input consists of multiple test cases. The format is as follows: ``` t n a_1 a_2 ... a_n ``` # Output For each test case, output a single line containing the minimal number of operations needed to make the sum of the array 0. # Example Input ``` 2 5 3 1 -4 1 2 4 7 -3 4 2 ``` Output ``` 4 6 ``` # Notes **Example 1:** In the first test case, the initial sum is 3. To make the sum 0, we need to perform 4 operations (subtract 1 from 3 elements and add 1 to 1 element). **Example 2:** In the second test case, the initial sum is 10. To make the sum 0, we need to perform 10 operations (either 10 subtractions or a combination of subtractions and additions to balance the sum to 0).","solution":"def min_operations_to_make_interesting(arr): Returns the minimal number of operations required to make the sum of the array equal to 0. total_sum = sum(arr) return abs(total_sum) def solve(test_cases): results = [] for n, arr in test_cases: results.append(min_operations_to_make_interesting(arr)) return results"},{"question":"Alice and Bob are playing a game with a sequence of numbers. They take turns, starting with Alice, and on each turn, a player must pick a number from either end of the sequence. The player then removes that number from the sequence and adds it to their score. The game continues until there are no numbers left in the sequence. Alice always plays optimally to maximize her score and Bob always plays optimally to minimize Alice\'s score. Given a sequence of numbers, your task is to determine the maximum score Alice can achieve if both players play optimally. The first line contains a single integer n (1 le n le 10^3), the number of elements in the sequence. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^4), representing the sequence. Print the maximum score Alice can achieve. Example: Input: 4 4 7 2 9 Output: 13 Explanation: - Alice picks 9 (sequence is now [4, 7, 2]) - Bob picks 4 to minimize Alice\'s score (sequence is now [7, 2]) - Alice picks 7 (sequence is now [2]) - Bob picks 2 Alice\'s total score is 9 + 7 = 16.","solution":"def max_score(sequence): Returns the maximum score Alice can achieve given both Alice and Bob play optimally. :param sequence: List of integers representing the sequence of numbers. :return: Maximum score Alice can achieve. n = len(sequence) # dp[i][j] will be the maximum score Alice can achieve from the sequence [sequence[i], ..., sequence[j]] dp = [[0] * n for _ in range(n)] # Base cases: when there\'s only one element in the sub-sequence, Alice picks that element. for i in range(n): dp[i][i] = sequence[i] # Fill dp array for sub-sequences of length l (from 2 to n) for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 # Alice chooses the number from either end, and Bob, playing optimally, will minimize the remaining points Alice can get. dp[i][j] = max(sequence[i] - dp[i + 1][j], sequence[j] - dp[i][j - 1]) # The result for the entire sequence is stored in dp[0][n-1] # Alice\'s score when optimal opponent Bob also plays optimally. total_sum = sum(sequence) alice_score = (total_sum + dp[0][n - 1]) // 2 return alice_score"},{"question":"A company organizes online coding competitions wherein each participant has to solve several coding problems. Once the competition is over, participants are ranked based on their scores. You are provided with the scores of participants for a particular competition. A participant is disqualified if his/her score has been flagged as invalid. It\'s possible that some participants may have the same name but different scores. Your task is to generate the final leaderboard by excluding participants with invalid scores and sorting the remaining participants in descending order of their scores. If multiple participants have the same score, they should be sorted by their names in lexicographical order (from A to Z). Write a Python function `generate_leaderboard(participant_scores, invalid_scores)` that performs the task described above. The function takes two arguments: 1. `participant_scores`: A list of dictionaries where each dictionary represents a participant with keys `name` and `score`. 2. `invalid_scores`: A set of integers representing the invalid scores. The function should return a list of dictionaries containing participants with valid scores, sorted as described. Each dictionary in the list should have keys `name` and `score`. # Example ```python participant_scores = [ {\\"name\\": \\"Alice\\", \\"score\\": 88}, {\\"name\\": \\"Bob\\", \\"score\\": 95}, {\\"name\\": \\"Alice\\", \\"score\\": 95}, {\\"name\\": \\"Charlie\\", \\"score\\": 90}, {\\"name\\": \\"Dave\\", \\"score\\": 78} ] invalid_scores = {88, 78} ``` # Input The `participant_scores` list can contain a maximum of 1000 participants, and each `score` is an integer between 0 and 100, inclusive. The `invalid_scores` set can contain 0 to 50 elements. # Output The output should be: ```python [ {\\"name\\": \\"Alice\\", \\"score\\": 95}, {\\"name\\": \\"Bob\\", \\"score\\": 95}, {\\"name\\": \\"Charlie\\", \\"score\\": 90} ] ``` # Constraints - The names in `participant_scores` are non-empty strings consisting only of alphabetic characters and have a maximum length of 100. - The `score` values are integers within the range 0 to 100 inclusive. - If all scores are invalid, return an empty list.","solution":"def generate_leaderboard(participant_scores, invalid_scores): Generates a leaderboard excluding participants with invalid scores. Remaining participants are sorted in descending order of their scores. If scores are the same, sorted by names in lexicographical order. Args: participant_scores (list of dict): List of participants with \'name\' and \'score\' keys. invalid_scores (set): Set of invalid scores to exclude. Returns: list of dict: Sorted leaderboard with valid scores only. # Filter out participants with invalid scores valid_participants = [p for p in participant_scores if p[\'score\'] not in invalid_scores] # Sort participants: first by score in descending order, then by name in lexicographical order sorted_leaderboard = sorted(valid_participants, key=lambda p: (-p[\'score\'], p[\'name\'])) return sorted_leaderboard"},{"question":"You are given an array of integers representing the heights of buildings in a straight line from left to right. You have a paint gun with which you can paint consecutive buildings in a single action. The paint gun can cover up to `k` buildings in one action. The goal is to ensure that all buildings are painted at least once. Determine the minimal number of actions required to paint all buildings. The first line contains two space-separated integers `n` and `k` (1 ≤ n ≤ 10000, 1 ≤ k ≤ 10000) — the number of buildings and the maximum number of buildings that can be painted in one action. Print a single integer — the minimal number of actions to paint all buildings. For the first sample, three actions are required: {1, 2, 3}, {3, 4, 5}, {5, 6, 7}. For the second sample, the entire array can be painted in one action.","solution":"def minimal_paint_actions(n, k): Determines the minimal number of actions required to paint all buildings. Parameters: n (int): The number of buildings k (int): The maximum number of buildings that can be painted in one action Returns: int: The minimal number of actions required to paint all buildings # If the number of buildings is less than or equal to the maximum buildings we can paint in one action # Then only one action is necessary. if n <= k: return 1 # Otherwise, calculate the minimum number of actions needed by dividing the total buildings by k, # and rounding up to cover any remaining buildings. return (n + k - 1) // k"},{"question":"Polycarp is preparing for a coding competition. He has prepared n problems for the competition and he wants to organize them in such a way that each participant can solve them in increasing order of difficulty. To simplify, the difficulty of each problem is represented by an integer. Given the list of the difficulties of n problems, Polycarp needs to find the longest subsequence of problems that are in strictly increasing order of difficulty. For example, if the given list of difficulties is [3, 1, 2, 1, 4], the longest subsequence in strictly increasing order is [1, 2, 4] which has a length of 3. Note that the subsequence does not have to be contiguous. Write a program to help Polycarp find the longest subsequence of problems in strictly increasing order. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of problems. - The second line contains n integers representing the difficulties of the problems (1 ≤ difficulty ≤ 10^9). Output: - On the first line, print a single integer — the length of the longest subsequence that is in strictly increasing order of difficulty. Example: Input: 5 3 1 2 1 4 Output: 3 Explanation: The longest subsequence in strictly increasing order is [1, 2, 4], so the output is 3.","solution":"from bisect import bisect_left def longest_increasing_subsequence(difficulties): Returns the length of the longest subsequence in strictly increasing order. if not difficulties: return 0 lis = [] for difficulty in difficulties: pos = bisect_left(lis, difficulty) if pos == len(lis): lis.append(difficulty) else: lis[pos] = difficulty return len(lis)"},{"question":"Alice loves playing with strings and words. She came across a new challenge where she has to transform a given string into a palindrome. A palindrome is a word that reads the same forwards and backwards. As Alice is very good at rearranging letters, she can reorder the given string to make it a palindrome, if possible. However, she can only replace characters, not add or remove any. If it\'s not possible to rearrange the string to make it a palindrome, Alice will simply return \\"NO\\". Otherwise, she will return \\"YES\\". Write a function `can_form_palindrome(s: str) -> str` where - `s` (1 ≤ |s| ≤ 100) is the string Alice wants to check. The function should return \\"YES\\" if she can rearrange the characters of the string to form a palindrome, otherwise return \\"NO\\". # Examples - Input: `s = \\"aabb\\"` - Output: \\"YES\\" - Input: `s = \\"racecar\\"` - Output: \\"YES\\" - Input: `s = \\"hello\\"` - Output: \\"NO\\" # Note: - In the first example, Alice can rearrange \\"aabb\\" to \\"abba\\" or \\"baab\\", both of which are palindromes. - In the second example, \\"racecar\\" is already a palindrome. - In the third example, it is impossible to rearrange \\"hello\\" into a palindrome.","solution":"def can_form_palindrome(s: str) -> str: Determines if the given string can be rearranged to form a palindrome. :param s: the input string to check (1 ≤ |s| ≤ 100) :return: \\"YES\\" if the string can be rearranged into a palindrome, otherwise \\"NO\\" from collections import Counter char_counts = Counter(s) odd_count = 0 for count in char_counts.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"Barney is playing a game where he needs to navigate through a series of magical doors. Each door has three attributes: its position on a path (represented by an integer), a color (either red, blue, or green), and a safety level (an integer). The path is a number line where Barney starts at position 0. The positions of the doors are unique integers. There are two types of events in this game: 1. A \\"new door\\" event, denoted by the integer `1`, which is followed by the position `pos`, the color `color`, and the safety level `level` of the new door. This event indicates that a new door has been added to the path at the given position with the specified color and safety level. 2. A \\"check door\\" event, denoted by the integer `2`, which is followed by the color `color`. This event requires Barney to find the door of the given color with the highest safety level that is closest to his current position (ties in safety level are resolved by selecting the door with the lower position). Once found, Barney moves to that door\'s position. Write a program to process a series of these events. For each \\"check door\\" event, output the position of the door that Barney moves to. If there is no door of the specified color on the path, output `-1`. The first line of input contains a single integer `q` (1 ≤ q ≤ 10^5), the number of events. The next `q` lines describe the events in chronological order. Each event is either of type `1 pos color level` or `2 color`. Colors are always one of \\"red\\", \\"blue\\", or \\"green\\". Positions (pos) and safety levels (level) are integers in the range 1 to 10^9. Barney’s journey begins at position 0. **Example Input:** ``` 6 1 5 red 10 1 3 blue 20 1 8 red 15 2 red 1 6 green 5 2 green ``` **Example Output:** ``` 8 6 ```","solution":"class Door: def __init__(self, position, color, safety_level): self.position = position self.color = color self.safety_level = safety_level def process_events(q, events): doors = [] barney_position = 0 results = [] for event in events: details = event.split() if details[0] == \'1\': pos = int(details[1]) color = details[2] safety_level = int(details[3]) doors.append(Door(pos, color, safety_level)) elif details[0] == \'2\': color = details[1] best_door = None for door in doors: if door.color == color: if (best_door is None or door.safety_level > best_door.safety_level or (door.safety_level == best_door.safety_level and door.position < best_door.position)): best_door = door if best_door: barney_position = best_door.position results.append(barney_position) else: results.append(-1) return results"},{"question":"You are working on an automated painting robot that operates on a large square grid with dimensions n x n. Each cell in the grid is initially unpainted (color code 0). The robot can paint each cell with a color c (1 ≤ c ≤ 100). However, the robot\'s painting capabilities are limited by a set of rules regarding adjacent cells: 1. If a cell is painted with color c, any of its horizontally or vertically adjacent cells must not be painted with the same color c. 2. The robot can move in four directions: up, down, left, and right. Given the initial positions and colors of m painted cells, your task is to determine if it is possible to paint the entire grid following the robot’s painting rules. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Input: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10^5) — the dimensions of the grid and the number of initially painted cells. - Each of the next m lines describes a painted cell with three integers r, c, and col (1 ≤ r, c ≤ n, 1 ≤ col ≤ 100) — the row and column indices of the cell (1-based index) and the color code of the cell. Output: - Output \\"YES\\" if it\'s possible to paint the grid following the rules, otherwise \\"NO\\". Example: Input: 5 2 1 1 1 3 3 2 Output: YES","solution":"def is_valid_painting(n, m, painted_cells): from collections import defaultdict grid = [[0] * n for _ in range(n)] for cell in painted_cells: r, c, col = cell grid[r - 1][c - 1] = col def is_valid(x, y, col): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n: if grid[nx][ny] == col: return False return True for i in range(n): for j in range(n): if grid[i][j] != 0: if not is_valid(i, j, grid[i][j]): return \\"NO\\" return \\"YES\\" # Usage def validate_painting(n, m, cells): return is_valid_painting(n, m, cells)"},{"question":"Alex is designing a game that involves constructing binary trees. He wants to determine whether a given binary tree is complete. A binary tree is complete if all its levels, except possibly the last, are fully filled, and all nodes are as far left as possible. You are given the root of a binary tree and are required to write a function that checks if this tree is complete. # Function Signature ```python def is_complete_binary_tree(root: TreeNode) -> bool: ``` # Input - `root`: The root node of a binary tree. # Output - Return `True` if the binary tree is complete, and `False` otherwise. # Constraints - The number of nodes in the tree is in the range [1, 1000]. - Each node\'s value is a unique integer in the range [1, 10000]. # Example Input: ```python # Tree Representation: # 1 # / # 2 3 # / / # 4 5 6 class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) root.right.left = TreeNode(6) result = is_complete_binary_tree(root) print(result) # Output: True ``` Input: ```python # Tree Representation: # 1 # / # 2 3 # / # 4 5 6 class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) root.right.right = TreeNode(6) result = is_complete_binary_tree(root) print(result) # Output: False ``` # Note 1. In the first example, the binary tree is complete because all levels including the last are fully filled. 2. In the second example, the binary tree is not complete because the last level nodes are not as far left as possible.","solution":"from collections import deque class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_complete_binary_tree(root: TreeNode) -> bool: if not root: return True queue = deque([root]) end = False # Indicates the appearance of a node with missing children. while queue: node = queue.popleft() if node.left: if end: return False # A node with missing children has appeared before, thus not a complete tree. queue.append(node.left) else: end = True if node.right: if end: return False # A node with missing children has appeared before, thus not a complete tree. queue.append(node.right) else: end = True return True"},{"question":"You are given an unsorted array of integers where every element appears twice except for one element which appears only once. Your task is to identify the element that appears only once. Implement a function `findUniqueElement` that takes an array of integers as input and returns the element that appears only once. # Input - An integer array `arr` containing `n` integers, where `1 ≤ n ≤ 10^6` and `n` is odd. - Each element in the array is guaranteed to appear exactly twice, except for one element that appears only once. # Output - Return the integer that appears only once in the array. # Example ```python findUniqueElement([2, 3, 5, 4, 5, 3, 4]) # Output: 2 findUniqueElement([10, 20, 10, 30, 40, 30, 50, 50, 40]) # Output: 20 ``` # Constraints - Each element in the array will be a non-negative integer. # Notes - You should aim to solve this problem in linear time `O(n)` and with constant space `O(1)`.","solution":"def findUniqueElement(arr): Returns the element that appears only once in the array while all other elements appear twice. This solution uses the XOR operation which satisfies the constraint of linear time and constant space. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"You are given a string s of length n consisting of lowercase English letters and an integer k. You are allowed to perform at most k operations on the string. In one operation, you can choose any letter in the string and change it to any other lowercase English letter. Your task is to determine the length of the longest substring that contains only one unique character after performing at most k operations. For example, given s = \\"abacaba\\" and k = 1: - You can change one of the \'b\'s or \'c\' to \'a\' to create a substring \\"aaa\\" with length 3. - Another possibility is to change the \'c\' or any \'a\' to \'b\' to create the substring \\"bbb\\" with length 2. So, the answer is 3. Input format: - The first line contains a single integer t (1 le t le 100), the number of test cases. - The first line of each test case contains an integer n (1 le n le 10^5), the length of the string, and an integer k (0 le k le n). - The next line contains the string s consisting of exactly n lowercase English letters. Output format: - For each test case, output a single integer: the length of the longest substring consisting of only one unique character that can be achieved with at most k operations. Example input: ``` 2 7 1 abacaba 6 2 aaabbb ``` Example output: ``` 3 5 ``` Explanation: - In the first test case, you can change any \'b\' or \'c\' to \'a\' to get a substring \\"aaa\\" of length 3. - In the second test case, you can change two \'b\'s or two \'a\'s to get \\"aaaaa\\" or \\"bbbbb\\" respectively, so the answer is 5.","solution":"def longest_substring_with_k_operations(s, n, k): from collections import defaultdict def max_substring(char): left = 0 max_len = 0 max_count_char = 0 counts = defaultdict(int) for right in range(n): counts[s[right]] += 1 max_count_char = max(max_count_char, counts[s[right]]) if (right - left + 1 - max_count_char) > k: counts[s[left]] -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len max_len_overall = 0 for ch in set(s): max_len_overall = max(max_len_overall, max_substring(ch)) return max_len_overall def solve(test_cases): results = [] for case in test_cases: n, k, s = case results.append(longest_substring_with_k_operations(s, n, k)) return results"},{"question":"Given a string consisting of only characters \'a\' and \'b\', you are allowed to perform the following operation any number of times: Select any character and replace it with any other character in the string. Your goal is to make the entire string consist of a single repeating character (all \'a\'s or all \'b\'s) with the smallest number of operations. Write a function `min_operations_to_unify_string` that takes the string `s` as input and returns the minimum number of operations required to make the entire string consist of a single repeating character. # Input - A single string `s` consisting only of characters \'a\' and \'b\'. The length of the string will be between 1 and 10^5. # Output - An integer representing the minimum number of operations required to make the entire string consist of a single repeating character. # Example ```python def min_operations_to_unify_string(s: str) -> int: # Your code here # Example 1 print(min_operations_to_unify_string(\\"aabab\\")) # Output: 2 # Example 2 print(min_operations_to_unify_string(\\"abb\\")) # Output: 1 ``` **Explanation:** - In Example 1, you can change the first and third \'a\' to \'b\', resulting in the string \\"bbbbb\\", with 2 operations. - In Example 2, you can change the first \'a\' to \'b\', resulting in the string \\"bbb\\", with 1 operation.","solution":"def min_operations_to_unify_string(s: str) -> int: Returns the minimum number of operations required to make the entire string consist of a single repeating character (all \'a\'s or all \'b\'s). count_a = s.count(\'a\') count_b = s.count(\'b\') # The minimum operations will be to convert all characters to the most frequent character # To convert all to \'a\', we need to change count_b \'b\'s to \'a\'s # To convert all to \'b\', we need to change count_a \'a\'s to \'b\'s return min(count_a, count_b)"},{"question":"Given a matrix of characters, and a target string, determine if the string can be constructed by a series of adjacent characters in the matrix. The adjacent characters are those horizontally or vertically neighboring. The same cell in the matrix cannot be reused multiple times in constructing the string. # Input - The first line contains two integers m and n (1 leq m, n leq 100), the number of rows and columns of the matrix. - The next m lines each contain a string of length n, representing the rows of the matrix. - The last line contains the target string s (1 leq |s| leq m times n), consisting of uppercase English letters. # Output - Print \\"YES\\" if the target string s can be constructed from the matrix as per the described rules. Otherwise, print \\"NO\\". # Example **Input:** ``` 3 4 ABCE SFCS ADEE ABCCED ``` **Output:** ``` YES ``` **Input:** ``` 3 4 ABCE SFCS ADEE SEE ``` **Output:** ``` YES ``` **Input:** ``` 3 4 ABCE SFCS ADEE ABCB ``` **Output:** ``` NO ``` # Explanation In the first example, the string \\"ABCCED\\" can be constructed by the sequence of cells (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (2, 1). In the second example, the string \\"SEE\\" can be constructed by the sequence of cells (2, 0) -> (2, 1) -> (2, 2) or (1, 1) -> (2, 1) -> (2, 2). In the third example, the string \\"ABCB\\" cannot be constructed since cell (0, 0) -> (0, 1) -> (1, 1) would require repeating cell (0, 1) to complete the sequence, which is not allowed.","solution":"def exists_path(matrix, target): Determine if the target string can be constructed by a series of adjacent characters in the matrix. rows = len(matrix) cols = len(matrix[0]) def dfs(i, j, idx): if idx == len(target): return True if i < 0 or i >= rows or j < 0 or j >= cols or matrix[i][j] != target[idx] or visited[i][j]: return False visited[i][j] = True # Check in all 4 directions if (dfs(i + 1, j, idx + 1) or dfs(i - 1, j, idx + 1) or dfs(i, j + 1, idx + 1) or dfs(i, j - 1, idx + 1)): return True visited[i][j] = False return False visited = [[False for _ in range(cols)] for _ in range(rows)] for i in range(rows): for j in range(cols): if matrix[i][j] == target[0] and dfs(i, j, 0): return \\"YES\\" return \\"NO\\""},{"question":"A company has tasked you with optimizing their warehouse storage layout. The warehouse is represented as a grid of size m x n, where each cell can either be empty (denoted as \'.\') or contain an obstacle (denoted as \'#\'). Your goal is to find the length of the shortest path from the top-left corner of the warehouse (0, 0) to the bottom-right corner (m-1, n-1), navigating only through empty spaces and avoiding obstacles. You can move up, down, left, or right one cell at a time. Write a function: ```python def shortest_path(warehouse: List[str]) -> int: pass ``` where `warehouse` is a list of strings representing the grid. Each character in the string is either \'.\' or \'#\'. The function should return the length of the shortest path from the top-left to the bottom-right corner, considering the constraints described. If no such path exists, return -1. # Input: - The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. - The next m lines contain n characters each, representing the rows of the grid. # Output: - Output a single integer, the length of the shortest path, or -1 if no path exists. # Example: Input: ``` 5 5 ..... .#.#. .#.#. .#... ..... ``` Output: ``` 8 ```","solution":"from collections import deque from typing import List def shortest_path(warehouse: List[str]) -> int: m = len(warehouse) n = len(warehouse[0]) if warehouse[0][0] == \'#\' or warehouse[m-1][n-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up # BFS initialization queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # Check if we reached the bottom-right corner if x == m-1 and y == n-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and warehouse[nx][ny] == \'.\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) # If no path exists return -1"},{"question":"In a distant kingdom, the king has a peculiar way of dealing with inheritance disputes. When the king dies, he divides his kingdom among his children based on their ages. The kingdom is represented as a number line, with each point on the line representing a distinct territory. The children of the king are represented as intervals on this number line, where each child covers a specific range of points. Given that the ages of the children are strictly increasing and each child\'s territory is defined by a starting and ending point on the number line, calculate the total number of distinct territories that the youngest child owns. The distinct territories are the points on the number line that are not shared with any other children. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) which represents the number of children. The next n lines each contain two integers si and ei (0 ≤ si < ei ≤ 10^9) which represent the starting and ending points of the territory owned by each child. Your task is to calculate and print the total number of distinct territories that belong to the youngest child, which means the child\'s territory that does not overlap with any other child\'s territory. Example input: ``` 3 1 5 4 8 10 12 ``` Example output: ``` 4 ``` Explanation: - The first child owns the territory from 1 to 5. - The second child owns the territory from 4 to 8. - The third child owns the territory from 10 to 12. The distinct territories of the youngest child (starting from 1) are from 1 to 3 inclusive, resulting in a total of 3 distinct territories. The distinct territories within the range of 4 to 5 are shared with the second child. The output should thus be 4, as the distinct territories are only those that belong exclusively to the youngest child.","solution":"def calculate_distinct_territories(n, intervals): Calculate the total number of distinct territories that the youngest child owns. :param n: Number of children :param intervals: List of tuples containing the starting and ending points of each child\'s territory :return: The number of distinct territories that the youngest child owns # Initialize the total length of the youngest child\'s territory youngest_start, youngest_end = intervals[0] distinct_length = youngest_end - youngest_start # Iterate over the rest of the children to find overlapping territories for i in range(1, n): start, end = intervals[i] if start < youngest_end: overlap = youngest_end - start distinct_length -= max(overlap, 0) return distinct_length"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge has a weight associated with it, which is an integer (could be negative, zero, or positive). Your task is to determine whether there exists a cycle in the graph such that the sum of the weights of the edges in the cycle is negative. The first line contains two integers n and m (2 ≤ n ≤ 500, 1 ≤ m ≤ 10000) — the number of vertices and the number of edges, respectively. Then m lines follow. Each line contains three integers u, v (1 ≤ u, v ≤ n, u ≠ v) and w (-1000 ≤ w ≤ 1000) which describe an edge between vertices u and v with weight w. There may be multiple edges between the same pair of vertices, but there are no self-loops. If such a cycle exists, print YES. Otherwise, print NO.","solution":"def find_negative_weight_cycle(n, m, edges): Returns \'YES\' if there is a cycle in the graph such that the sum of the weights of the edges in the cycle is negative. Otherwise, returns \'NO\'. import collections # function to process the Bellman-Ford over the graph def bellman_ford(n, edges, src): dist = [float(\'inf\')] * n dist[src] = 0 for _ in range(n - 1): for u, v, w in edges: if dist[u] + w < dist[v]: dist[v] = dist[u] + w for u, v, w in edges: if dist[u] + w < dist[v]: return True # Negative cycle detected return False # Adjust edges for 0-based index adjusted_edges = [(u-1, v-1, w) for u, v, w in edges] for i in range(n): if bellman_ford(n, adjusted_edges, i): return \\"YES\\" return \\"NO\\""},{"question":"Kuroni is organizing a unique dance performance for his n daughters. Each daughter needs to perform a dance move with a certain difficulty level. To make the performance look aesthetically pleasing, the difficulty level of the dance moves assigned to each daughter should be strictly increasing. Additionally, each dance move must be paired with a costume that also has a specific comfort level. Each daughter must receive one costume and one dance move such that the comfort levels should be pairwise distinct and the sum of the difficulty level and comfort level should also follow a strictly increasing order. Given the difficulty levels and comfort levels, help Kuroni distribute the dance moves and the costumes to his daughters such that the total difficulty-comfort sums are strictly increasing. The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 100) — the number of daughters, dance moves, and costumes. The second line of each test case contains n distinct integers d_1, d_2, dots, d_n (1 le d_i le 1000) — the difficulty levels of the dance moves. The third line of each test case contains n distinct integers c_1, c_2, dots, c_n (1 le c_i le 1000) — the comfort levels of the costumes. For each test case, print a line containing n integers d\'_1, d\'_2, dots, d\'_n, representing that the i-th daughter receives a dance move with difficulty d\'_i. In the next line print n integers c\'_1, c\'_2, dots, c\'_n, representing that the i-th daughter receives a costume with comfort level c\'_i. The sums d\'_1 + c\'_1, d\'_2 + c\'_2, dots, d\'_n + c\'_n should all be in strictly increasing order. The numbers d\'_1, dots, d\'_n should be equal to the numbers d_1, dots, d_n in some order, and the numbers c\'_1, dots, c\'_n should be equal to the numbers c_1, dots, c_n in some order. It can be shown that an answer always exists. If there are multiple possible answers, you may print any of them.","solution":"def distribute_dance_costumes(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] difficulties = test_cases[i][1] comforts = test_cases[i][2] # Sort both difficulties and comforts difficulties.sort() comforts.sort() results.append((difficulties, comforts)) return results"},{"question":"Lesha has started to work on a new program that requires identifying increasing subsequences within a sequence of integer numbers. An increasing subsequence is a sequence of indices i1, i2, ..., ik such that i1 < i2 < ... < ik and a[i1] < a[i2] < ... < a[ik]. Lesha needs your help to determine the length of the longest increasing subsequence. You are given an array of integers. Your task is to find the length of the longest increasing subsequence in this array. # Input - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of integers in the array. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. # Output - Print a single integer — the length of the longest increasing subsequence of the given array. # Examples Example 1: **Input:** ``` 6 10 9 2 5 3 7 101 18 ``` **Output:** ``` 4 ``` **Explanation:** One of the longest increasing subsequences is [2, 3, 7, 101]. Example 2: **Input:** ``` 5 0 1 0 3 2 3 ``` **Output:** ``` 4 ``` **Explanation:** One of the longest increasing subsequences is [0, 1, 2, 3]. Example 3: **Input:** ``` 1 7 ``` **Output:** ``` 1 ``` **Explanation:** There is only one element, so the longest increasing subsequence is [7]. # Notes - The subsequence does not need to be contiguous. - There could be multiple longest increasing subsequences of the same length, you only need to find the length.","solution":"def length_of_LIS(arr): Returns the length of the longest increasing subsequence in the array. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Given a sequence of n integers, your task is to partition the sequence into the minimum number of palindromic subarrays. A subarray is palindromic if it reads the same forward and backward. A single integer in the sequence is considered a palindromic subarray with length 1. **Input:** The first line contains an integer n (1 ≤ n ≤ 105), the length of the sequence. The second line contains n space-separated integers a1, a2, ..., an, where -10^9 ≤ ai ≤ 10^9 represents the elements of the sequence. **Output:** Output a single integer, the minimum number of palindromic subarrays the sequence can be partitioned into. **Example:** Input: ``` 5 1 2 3 2 1 ``` Output: ``` 1 ``` Input: ``` 7 1 2 3 4 3 2 1 ``` Output: ``` 1 ``` Input: ``` 6 1 2 2 1 3 3 ``` Output: ``` 2 ``` **Explanation:** In the first example, the entire sequence `1 2 3 2 1` is a palindrome, so the sequence can be partitioned into 1 palindromic subarray. In the second example, `1 2 3 4 3 2 1` is also a single palindromic subarray. In the third example, the sequence can be partitioned into `1 2 2 1` and `3 3`, resulting in a total of 2 palindromic subarrays.","solution":"def min_palindromic_subarrays(sequence): Returns the minimum number of palindromic subarrays the sequence can be partitioned into. def is_palindrome(seq): return seq == seq[::-1] n = len(sequence) # Initialize DP array where dp[i] means the minimum cuts needed for palindromic partitions of sequence[0:i+1] dp = [float(\'inf\')] * n # Nested loop to fill the dp table for i in range(n): # Try to partition the sequence[0:i+1] for j in range(i + 1): # Check if sequence[j:i+1] is a palindrome if is_palindrome(sequence[j:i+1]): if j == 0: dp[i] = 0 else: dp[i] = min(dp[i], dp[j-1] + 1) # We need dp[n-1] + 1 because dp[n-1] gives the number of cuts and we need number of subarrays return dp[n-1] + 1"},{"question":"You are given a grid of dimensions m times n, filled with either \'L\' representing a land cell or \'W\' representing a water cell. The water cells are initially separated except for adjacent cells horizontally or vertically, not diagonally. Your task is to determine if it\'s possible to traverse from one water cell to another by converting exactly one land cell adjacent (horizontally or vertically) to a water cell into a water cell, but you are only allowed to traverse horizontally or vertically through water cells. Input: - First line contains two integers m and n, the dimensions of the grid (1 leq m, n leq 50). - Next m lines each contain n characters (\'L\' or \'W\'), representing the grid. Output: - \\"Yes\\" if it\'s possible to connect two or more initially separated water regions by converting exactly one land cell into a water cell. - \\"No\\" otherwise. In the first example, converting the land cell in the middle will connect the two water regions into one. In the second example, converting any land cell will not connect the separated water regions.","solution":"def possible_to_connect_water_regions(m, n, grid): from collections import deque # Find initial water regions using BFS def bfs(start, visited): queue = deque([start]) visited[start[0]][start[1]] = True direction_vectors = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right region = [start] while queue: x, y = queue.popleft() for dx, dy in direction_vectors: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == \'W\': visited[nx][ny] = True queue.append((nx, ny)) region.append((nx, ny)) return region visited = [[False] * n for _ in range(m)] water_regions = [] # Find all water regions for i in range(m): for j in range(n): if grid[i][j] == \'W\' and not visited[i][j]: water_regions.append(bfs((i, j), visited)) if len(water_regions) < 2: return \\"No\\" # Check if converting one land cell can connect two different water regions direction_vectors = [(-1, 0), (1, 0), (0, -1), (0, 1)] for i in range(m): for j in range(n): if grid[i][j] == \'L\': neighbors = set() for dx, dy in direction_vectors: nx, ny = i + dx, j + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == \'W\': for k, region in enumerate(water_regions): if (nx, ny) in region: neighbors.add(k) if len(neighbors) > 1: return \\"Yes\\" return \\"No\\""},{"question":"A web developer is working on an e-commerce website, and he needs to determine the most popular items sold during a particular sale event. Given a list of item IDs representing each item sold and the number of items sold required to be queried, he wants to find out the top k most frequently sold items. Each time an item is sold, its ID is added to the list. Your task is to help the web developer by writing a function that will return the IDs of the top k most sold items in descending order of their sale counts. If two items have the same sale count, the item with the smaller ID should come first. # Input Format - The first line contains two integers n (1 ≤ n ≤ 105) and k (1 ≤ k ≤ 100). - The second line contains n space-separated integers representing the item IDs of the sold items. Each item ID is a positive integer which absolute value does not exceed 104. # Output Format - Print k space-separated integers representing the IDs of the top k most sold items in descending order of their sale counts. # Example Input ``` 7 3 1 2 3 1 2 1 4 ``` Output ``` 1 2 3 ``` # Explanation In the given example, the item 1 was sold 3 times, item 2 was sold 2 times, and item 3 was sold once. Since k=3, the output should be the top 3 most sold items, which are 1, 2, and 3 in that order.","solution":"from collections import Counter import heapq def top_k_most_sold_items(n, k, items): Find the top k most sold items in descending order of their sale counts. :param n: int: The number of items sold :param k: int: The number of top sold items to find :param items: list: List of item IDs representing the items sold :return: list: List of top k item IDs in descending order of their sale counts # Count the frequency of each item count = Counter(items) # Use a heap to get the k highest counts heap = [(-freq, item) for item, freq in count.items()] heapq.heapify(heap) # Extract the k elements with the highest frequency top_k = [heapq.heappop(heap)[1] for _ in range(k)] return top_k"},{"question":"Alice loves palindromes and spends a lot of time with strings. Recently, she became interested in finding the longest palindromic substring within a given string. A palindrome is a string that reads the same forwards and backwards. She needs your help to write a function that identifies the longest palindromic substring in a given string `s`. If there are multiple solutions of the same length, return the one that appears first in the string. Constraints: - The length of the string `s` will not exceed 1000 characters. - The input string `s` will consist of only lowercase English letters. # Input: - A single line containing the string `s`. # Output: - A single line containing the longest palindromic substring of `s`. # Example: Input: `babad` Output: `bab` Input: `cbbd` Output: `bb` Write a function `longest_palindromic_substring(s)` that takes in a string `s` and returns the longest palindromic substring of `s`.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in s. n = len(s) if n == 0: return \\"\\" # Initialize the starting and ending indices of the longest palindromic substring start = 0 end = 0 def expand_around_center(left, right): Expands around the center and return the length of the palindrome. while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return right - left - 1 for i in range(n): len1 = expand_around_center(i, i) len2 = expand_around_center(i, i + 1) max_len = max(len1, len2) if max_len > end - start: start = i - (max_len - 1) // 2 end = i + max_len // 2 return s[start:end + 1]"},{"question":"You are given an array of integers representing the heights of buildings in a city. Let\'s assume these buildings are aligned in a straight line. The height of a building is defined as the number of floors it has. A skyline is the outer contour formed by the buildings when viewed from a distance along the horizontal axis. You need to determine the number of unique rectangular regions that are visible in the skyline when the heights of the buildings are given. To simplify, a rectangular region is defined by the start and end positions of contiguous buildings that are adjacent to each other and have the same height. Moreover, a rectangular region is only considered visible if it is part of the skyline. Write a program to calculate the number of unique visible rectangular regions in the skyline. # Input - The first line of input contains an integer n (1 ≤ n ≤ 300) — the number of buildings. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the buildings. # Output - Output a single integer — the number of unique visible rectangular regions in the skyline. # Example Input: ``` 5 1 3 3 2 1 ``` Output: ``` 4 ``` # Explanation: The visible skyline rectangular regions are: - From building 1 (height 1) - From buildings 2 to 3 (both height 3) - From building 4 (height 2) - From building 5 (height 1)","solution":"def count_unique_rectangular_regions(building_heights): Count the number of unique visible rectangular regions in the skyline. Args: building_heights (list): List of integers representing the heights of the buildings. Returns: int: The number of unique visible rectangular regions. if not building_heights: return 0 n = len(building_heights) count = 0 current_height = building_heights[0] for i in range(1, n): if building_heights[i] != current_height: count += 1 current_height = building_heights[i] # Count the last rectangle count += 1 return count"},{"question":"In a small town, there is a park with several pathways and rest spots. The park can be represented as a set of rest spots connected by pathways. Each pathway has a certain length. The town council wants to create a circular walking route within the park, which visits some of the rest spots and returns to the starting point, but with a twist. The route must exactly use the minimum possible number of rest spots that still allows a circular path to be formed while covering a minimum distance. You are given the number of rest spots `n` and the number of pathways `m`. Each pathway is described by three integers `u`, `v`, and `w`, meaning there is a pathway between rest spot `u` and rest spot `v` with length `w`. Your task is to determine the minimum distance of such a circular route that visits the fewest number of rest spots. The first line contains two integers `n` and `m` (3 ≤ n ≤ 15, 3 ≤ m ≤ 105) — the number of rest spots and pathways. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 100) representing a pathway between rest spot `u` and rest spot `v` with length `w`. Print a single integer — the minimum distance of such a circular route, or print -1 if no such route exists. For example: Input: ``` 4 5 1 2 10 2 3 15 3 1 20 2 4 25 4 1 30 ``` Output: ``` 45 ```","solution":"import itertools def minimum_circular_route(n, m, pathways): # Create an adjacency matrix for rest spots and pathways max_int = float(\'inf\') dist = [[max_int] * n for _ in range(n)] for u, v, w in pathways: # Since the input is 1-based and our graph is 0-based dist[u-1][v-1] = w dist[v-1][u-1] = w # Function to find the length of the circular route def find_circular_route(route): length = 0 for i in range(len(route)): length += dist[route[i]][route[(i+1) % len(route)]] return length min_length = max_int # Try all subsets of size 3 to n forming permutations for size in range(3, n + 1): for subset in itertools.combinations(range(n), size): for perm in itertools.permutations(subset): length = find_circular_route(perm) if all(dist[u][v] < max_int for u, v in zip(perm, perm[1:] + perm[:1])): min_length = min(min_length, length) return min_length if min_length != max_int else -1 # Example usage: n = 4 m = 5 pathways = [(1, 2, 10), (2, 3, 15), (3, 1, 20), (2, 4, 25), (4, 1, 30)] print(minimum_circular_route(n, m, pathways))"},{"question":"Mary is participating in a hiking marathon which takes place in a large mountainous region. There are n hikers, labeled from 1 to n, each starting at different positions along the trail. The trail is represented as a line of n positions, with each hiker initially occupying one unique position. Each hiker can either move forward or backward along the trail, and the distance they need to cover is represented by the integer d. Mary wants to find out how many unique positions are visited by the hikers if they all simultaneously hike exactly d positions forward and d positions backward. The first line contains two integers n and d (1 ≤ n ≤ 10^9, 1 ≤ d < n). Print a single integer: the total number of unique positions visited by the hikers. In the following, assume that all positions on the trail are represented by distinct integers from 1 to n. **Example:** Input: ``` 5 2 ``` Output: ``` 5 ```","solution":"def unique_positions_visited(n, d): Returns the number of unique positions visited by hikers. # Since each hiker moves d positions forward and d positions backward, # they will cover all positions from 1 to n. return n # Example Usage: # unique_positions_visited(5, 2) should return 5"},{"question":"Bob is planning a road trip with multiple friends. He has a car with limited seating capacity, which means he can only take a certain number of friends with him. Each friend has a different preference score indicating how much they are looking forward to joining the trip. To maximize the overall happiness of the group, Bob wants to invite the friends with the highest preference scores. You are given a list of integers where each integer represents a friend\'s preference score and an integer which represents the seating capacity of the car (excluding Bob). Write a function that takes in a list of integers (friend preference scores) and an integer (seating capacity) and returns the maximum total preference score Bob can achieve by inviting friends with the highest preference scores within the seating capacity limit. **Function Signature:** ```python def max_happiness(preferences: List[int], capacity: int) -> int: ``` **Input:** - A list of integers `preferences` where `1 <= len(preferences) <= 100` and each integer `1 <= preferences[i] <= 1000`. - An integer `capacity` where `1 <= capacity <= 100`. **Output:** - An integer representing the maximum total preference score. **Examples:** 1. `max_happiness([5, 8, 3, 7, 10], 3)` should return `25`. - Explanation: The friends with preference scores 10, 8, and 7 are invited. 2. `max_happiness([4, 2, 1, 5], 2)` should return `9`. - Explanation: The friends with preference scores 5 and 4 are invited. 3. `max_happiness([9, 9, 9, 9, 9], 1)` should return `9`. - Explanation: Only one friend with a preference score of 9 can be invited. 4. `max_happiness([1, 2, 3, 4, 5], 0)` should return `0`. - Explanation: The seating capacity is 0, so no friends can be invited and therefore the total preference score is 0.","solution":"from typing import List def max_happiness(preferences: List[int], capacity: int) -> int: Returns the maximum total preference score by selecting the highest `capacity` scores from the list. if capacity == 0: return 0 return sum(sorted(preferences, reverse=True)[:capacity])"},{"question":"Shantel is excited about programming and has come up with a new problem for her coding club. The problem involves navigating a 2D grid with certain rules. The grid is an N x N square, and on it, some cells contain obstacles. You are required to determine the number of unique paths from the top-left corner to the bottom-right corner of the grid, with the possibility of moving either right or down at any point in time. Given a grid of size N x N, determine the number of unique paths from position (1, 1) to position (N, N). The grid contains obstacles, denoted by the value \'1\', and free cells denoted by the value \'0\'. You can only move to cells that are free (contain \'0\'). The input consists of the following: - A single integer N (1 ≤ N ≤ 100). - N lines each containing N integers (either \'0\' or \'1\') representing the grid. Output the number of unique paths from the top-left to the bottom-right of the grid. If there is no valid path, return 0. Examples: Input: ``` 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` Input: ``` 2 0 1 0 0 ``` Output: ``` 1 ``` Explanation: In the first example, there are two unique paths from (1, 1) to (3, 3): - Down -> Down -> Right -> Right - Right -> Right -> Down -> Down In the second example, there is only one unique path: - Down -> Right","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of the grid considering obstacles. N = len(grid) if grid[0][0] == 1 or grid[N-1][N-1] == 1: return 0 # Initialize the dp table dp = [[0] * N for _ in range(N)] dp[0][0] = 1 # Fill the dp table for i in range(N): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][N-1]"},{"question":"You are given a directed graph with n nodes and m edges, where each edge has an integer weight. The nodes are numbered from 1 to n. Your task is to find the minimum cost of reaching each node from the node 1 using the given edges. If it is impossible to reach a node, output -1 for that node. The first line contains two integers n and m (1 le n le 10^5, 0 le m le 10^5) — the number of nodes and the number of edges, respectively. Each of the next m lines contains three integers u, v, and w (1 le u, v le n, -10^4 le w le 10^4), describing an edge from node u to node v with weight w. Output n integers: the minimum cost to reach each node from node 1. For unreachable nodes, print -1 instead of the cost. # Example Input ``` 5 5 1 2 2 1 3 4 2 4 7 3 4 1 4 5 3 ``` Output ``` 0 2 4 5 8 ``` Explanation From node 1, you can reach: - node 2 with cost 2 (using the edge from 1 to 2), - node 3 with cost 4 (using the edge from 1 to 3), - node 4 with cost 5 (using the edge from 1 to 3 and then from 3 to 4 with cumulative cost 4 + 1), - node 5 with cost 8 (using edges from 1 to 3, then 3 to 4, and finally from 4 to 5 with cumulative cost 4 + 1 + 3).","solution":"import heapq def dijkstra(n, edges): # Initialize graph graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) # Distance to reach each node, initialize with infinity dist = [float(\'inf\')] * (n + 1) dist[1] = 0 # Min-heap Priority Queue pq = [(0, 1)] # (distance, node) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(pq, (dist[v], v)) # Prepare the results result = [] for i in range(1, n + 1): if dist[i] == float(\'inf\'): result.append(-1) else: result.append(dist[i]) return result"},{"question":"Given an array of positive integers, find the two numbers such that they form the largest possible product. Return the product of these two numbers. Function Signature: ```python def max_product(nums: List[int]) -> int ``` Input: - A list `nums` of `n` positive integers (2 ≤ n ≤ 105), where each integer is in the range [1, 104]. Output: - An integer representing the maximum product of any two numbers in the list. Example: ```python max_product([3, 4, 5, 2]) -> 20 max_product([1, 5, 4, 5]) -> 25 max_product([3, 7]) -> 21 ``` Note: - The solution should be efficient, ideally with a time complexity better than O(n^2).","solution":"from typing import List def max_product(nums: List[int]) -> int: Returns the largest possible product from any two numbers in the given list. if len(nums) < 2: raise ValueError(\\"Input list must have at least two integers.\\") # Find the two largest numbers in the array first_max = second_max = float(\'-inf\') for num in nums: if num > first_max: second_max = first_max first_max = num elif num > second_max: second_max = num return first_max * second_max"},{"question":"At your city\'s famous event fair, there are n stalls each of which offers a unique experience: food, games, shows, and items for sale. Each stall is represented as a square with their sides parallel to the coordinate axes. All sides of the stalls must have even length. Stalls cannot intersect, but they can touch each other. You need to help organize the event such that each stall has its unique identifier and does not conflict with those adjacent to it in terms of proximity and planning. Your task is to assign each stall a unique identifier in such a way that no two stalls that touch each other by sides have the same identifier, or determine that it is impossible. Two stalls intersect if their intersection has positive area. Two stalls touch by sides if there is a pair of sides such that their intersection has non-zero length and non-zero width. The first line contains a single integer n (1 ≤ n ≤ 5·10^5) — the number of stalls. n lines follow. The i-th of these lines contains four integers x1, y1, x2 and y2 ( - 10^9 ≤ x1 < x2 ≤ 10^9, - 10^9 ≤ y1 < y2 ≤ 10^9), indicating that points (x1, y1) and (x2, y2) are the coordinates of two opposite corners of the i-th stall. It is guaranteed that all sides of the stalls have even lengths and stalls don\'t intersect each other. Print \\"IMPOSSIBLE\\" in the only line if it is impossible to uniquely identify the stalls such that no two touching stalls have the same identifier. Otherwise, print \\"POSSIBLE\\" in the first line. Then, print n lines where the i-th line contains a single integer ui (1 ≤ ui ≤ n) — the unique identifier for the i-th stall. Each identifier should be used exactly once.","solution":"def organize_stalls(n, stalls): # Check stalls validity and prepare for coloring graph = {} for i, stall in enumerate(stalls): x1, y1, x2, y2 = stall graph[i] = [] for j, other_stall in enumerate(stalls): if i != j: ox1, oy1, ox2, oy2 = other_stall # Check if stalls touch by sides if (x1 == ox2 or x2 == ox1) and not (y1 >= oy2 or y2 <= oy1): graph[i].append(j) elif (y1 == oy2 or y2 == oy1) and not (x1 >= ox2 or x2 <= ox1): graph[i].append(j) # Attempt to color the graph using 2 colors (bipartite checking) colors = [-1] * n # -1 means uncolored def is_bipartite(node, color): colors[node] = color for neighbor in graph[node]: if colors[neighbor] == -1: if not is_bipartite(neighbor, 1 - color): return False elif colors[neighbor] == colors[node]: return False return True for i in range(n): if colors[i] == -1: if not is_bipartite(i, 0): print(\\"IMPOSSIBLE\\") return print(\\"POSSIBLE\\") for color in colors: print(color + 1)"},{"question":"A robot can move in a 2D grid starting from the origin (0, 0). The robot can receive a sequence of commands consisting of the letters \'U\', \'D\', \'L\', and \'R\', which stand for up, down, left, and right, respectively. Each command moves the robot one unit in the corresponding direction. The robot returns to the origin if it ends up at the position (0, 0) after executing all the commands. Write a function that determines whether the given sequence of commands will return the robot to the origin. The input is a single string consisting of commands of length between 1 and 100, inclusive. Each character in the string will be \'U\', \'D\', \'L\', or \'R\'. Output \\"YES\\" if the robot returns to the origin, and \\"NO\\" otherwise (quotes for clarity only).","solution":"def does_robot_return(commands): Determines if the robot returns to the origin after executing all commands. Parameters: commands (str): The string consisting of commands \'U\', \'D\', \'L\', \'R\'. Returns: str: \\"YES\\" if the robot returns to the origin, \\"NO\\" otherwise. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"In a small town, there is a single baker who prepares n different types of pastries. The baker knows that different customers prefer specific types of pastries. Each customer places an order specifying the range of pastries they want and the quantity for each type within the range. The baker has a limited stock of each type of pastry, and once a type of pastry is out of stock, it can no longer be provided to any customer. Given the customer orders and the initial stock for each pastry type, your task is to find out if it is possible to fulfill all the orders with the current stock. If it is possible, output \\"YES\\". If it is not possible, output \\"NO\\". In the first line, a single integer n (1 ≤ n ≤ 100) is given, representing the number of pastry types. In the second line, n space-separated integers s1, s2, ..., sn (1 ≤ si ≤ 1000) are given, where si represents the initial stock of the i-th pastry type. In the third line, a single integer m (1 ≤ m ≤ 1000) is given, representing the number of customer orders. Each of the next m lines contains three space-separated integers li, ri, qi (1 ≤ li ≤ ri ≤ n, 1 ≤ qi ≤ 1000), where li and ri define the range of pastry types the customer wants, and qi represents the quantity of each pastry type within the range that the customer orders. Output \\"YES\\" if all orders can be fulfilled with the current stock, otherwise output \\"NO\\".","solution":"def can_fulfill_orders(n, initial_stock, m, orders): Determines if all customer orders can be fulfilled with the given initial stock. :param n: Number of pastry types. :param initial_stock: List of initial stock quantities for each pastry type. :param m: Number of customer orders. :param orders: List of customer orders where each order is represented by a tuple (li, ri, qi) :return: \\"YES\\" if all orders can be fulfilled, otherwise \\"NO\\". stock = initial_stock[:] for li, ri, qi in orders: for i in range(li-1, ri): if stock[i] < qi: return \\"NO\\" stock[i] -= qi return \\"YES\\""},{"question":"Given a string s consisting of lowercase English letters, rearrange the string such that no two adjacent characters are the same. If it is not possible to rearrange the string in such a way, return an empty string. If multiple valid answers exist, you can return any of them. Input: - A single line containing the string s (1 ≤ |s| ≤ 500). Output: - A single line containing the rearranged string or an empty string if no valid rearrangement exists. Example: Input: ``` aabb ``` Output: ``` abab ``` Input: ``` aaab ``` Output: ``` ``` Note: - In the first example, one possible rearrangement is \\"abab\\". - In the second example, it is impossible to rearrange the string \\"aaab\\" such that no two adjacent characters are the same, so the output is an empty string.","solution":"import heapq from collections import Counter def reorganize_string(s): Rearranges the characters of the string s such that no two adjacent characters are the same. If it is not possible to do so, returns an empty string. # Count frequency of each character freq = Counter(s) # Create a max heap based on frequency max_heap = [(-value, key) for key, value in freq.items()] heapq.heapify(max_heap) prev_char, prev_freq = None, 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_char and prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 # decrease frequency result_str = \'\'.join(result) if len(result_str) == len(s): return result_str else: return \\"\\""},{"question":"You have been given a sequence of integers, and an integer k. We need to determine if there is a subset of the sequence whose elements sum to k. The first line of the input contains two integers, n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ 10^5). The next line contains n integers, representing the sequence (each integer in the sequence is between 0 and 10^5). For example: Input: 5 9 3 34 4 12 5 Output: YES Explanation: The subset {4, 5} summed up is equal to 9. Please find and output YES if there is such a subset, or NO otherwise.","solution":"def subset_sum(sequence, k): Determine if there is a subset of the sequence whose elements sum to k. :param sequence: List of integers. :param k: The target sum. :return: \'YES\' if such a subset exists, otherwise \'NO\'. n = len(sequence) dp = [False] * (k + 1) dp[0] = True for num in sequence: for j in range(k, num - 1, -1): dp[j] = dp[j] or dp[j - num] return \\"YES\\" if dp[k] else \\"NO\\""},{"question":"Given an array of integers, we can split the array into one or more contiguous subarrays. The goal is to find the maximum possible sum of the product of the length of a subarray and the minimum number in that subarray. For example, for the array `[3, 1, 6, 4, 5, 2]`, the possible subarrays and their length * minimum value products are: - `[3]` -> 1 * 3 = 3 - `[1]` -> 1 * 1 = 1 - `[6]` -> 1 * 6 = 6 - `[4]` -> 1 * 4 = 4 - `[5]` -> 1 * 5 = 5 - `[2]` -> 1 * 2 = 2 - `[3, 1]` -> 2 * 1 = 2 - `[1, 6]` -> 2 * 1 = 2 - `[6, 4]` -> 2 * 4 = 8 - `[4, 5]` -> 2 * 4 = 8 - `[5, 2]` -> 2 * 2 = 4 - `[3, 1, 6]` -> 3 * 1 = 3 - `[1, 6, 4]` -> 3 * 1 = 3 - `[6, 4, 5]` -> 3 * 4 = 12 - `[4, 5, 2]` -> 3 * 2 = 6 - `[3, 1, 6, 4]` -> 4 * 1 = 4 - `[1, 6, 4, 5]` -> 4 * 1 = 4 - `[6, 4, 5, 2]` -> 4 * 2 = 8 - `[3, 1, 6, 4, 5]` -> 5 * 1 = 5 - `[1, 6, 4, 5, 2]` -> 5 * 1 = 5 - `[3, 1, 6, 4, 5, 2]` -> 6 * 1 = 6 The maximum value among all those options is `12`, so the output for this array would be `12`. **Input Format:** - The first line contains an integer `n` (`1 <= n <= 100000`), the number of elements in the array. - The second line contains `n` space-separated integers indicating the elements of the array (`1 <= arr[i] <= 1000000`). **Output Format:** - Print a single integer, the maximum possible sum of the product of the length of a subarray and the minimum number in that subarray. **Example:** ``` Input: 6 3 1 6 4 5 2 Output: 12 ``` **Note:** - For this problem, you can assume that a subarray is any contiguous portion of the array. - Performance constraints dictate efficient solutions, such as using stack-based approaches for tracking bounds or segment trees for range queries.","solution":"def max_sum_of_length_and_min(arr): n = len(arr) max_sum = 0 # Stack to store the indices of the elements stack = [] # Previous Less Element (PLE) ple = [-1] * n # Next Less Element (NLE) nle = [n] * n for i in range(n): while stack and arr[stack[-1]] >= arr[i]: top = stack.pop() nle[top] = i ple[i] = stack[-1] if stack else -1 stack.append(i) # Calculate the maximum sum of length * min_value for i in range(n): left_count = i - ple[i] right_count = nle[i] - i max_sum = max(max_sum, arr[i] * (left_count + right_count - 1)) return max_sum"},{"question":"You are given two strings: a target string and a source string. Your task is to find the minimum number of operations required to transform the source string into the target string. In one operation, you can either insert a character, delete a character, or replace a character in the source string. The process should be performed in such a way that the transformed string exactly matches the target string. More formally, given two strings `target` and `source`, of lengths `m` and `n` respectively, find the minimum number of operations required to convert `source` to `target`. The first line contains an integer `n` (0 ≤ n ≤ 5000) — the length of the source string. The second line contains the source string consisting of lowercase English letters. The third line contains an integer `m` (0 ≤ m ≤ 5000) — the length of the target string. The fourth line contains the target string consisting of lowercase English letters. In the first line, output a single integer — the minimum number of operations required to transform the source string into the target string. # Example Input: ``` 5 kitten 6 sitting ``` Output: ``` 3 ``` In this example, the optimal transformation sequence is: 1. Replace \'k\' with \'s\' 2. Replace \'e\' with \'i\' 3. Insert \'g\'","solution":"def min_operations(source, target): n = len(source) m = len(target) # Create a 2D array to store the results of subproblems dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)] # Initialize the base cases for i in range(n + 1): dp[i][0] = i # If target is empty, we need to delete all characters from source for j in range(m + 1): dp[0][j] = j # If source is empty, we need to insert all characters of target # Fill the dp array for i in range(1, n + 1): for j in range(1, m + 1): if source[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] # No operation needed else: dp[i][j] = min(dp[i - 1][j], # Delete character from source dp[i][j - 1], # Insert character to source dp[i - 1][j - 1] # Replace character in source ) + 1 return dp[n][m]"},{"question":"You are given a string s which consists of lowercase English letters and a target string t. Your task is to determine if you can transform the string s into the string t using exactly k operations. In one operation, you can perform one of the following: - Choose a character from string s and replace it with any lowercase English letter. - Choose a character from string s and delete it. - Insert any lowercase English letter at any position in string s. Return \\"YES\\" if it is possible to transform s into t in exactly k operations, otherwise return \\"NO\\". # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100), where n is the length of string s and m is the length of string t. - The second line contains the string s. - The third line contains the string t. - The fourth line contains an integer k (1 ≤ k ≤ 300), the number of operations allowed. # Output - Print \\"YES\\" (without quotes) if you can transform s into t using exactly k operations. Otherwise, print \\"NO\\" (without quotes). # Example Input ``` 3 5 abc abfgh 6 ``` Output ``` YES ``` Input ``` 4 3 abcd xyz 5 ``` Output ``` NO ```","solution":"def can_transform(s, t, k): len_s, len_t = len(s), len(t) common_len = 0 # Determine the length of common prefix while common_len < len_s and common_len < len_t and s[common_len] == t[common_len]: common_len += 1 # Operations to remove the different part of s and insert the different part of t operations_needed = (len_s - common_len) + (len_t - common_len) # Check if we can achieve exactly k operations if operations_needed == k: return \\"YES\\" elif operations_needed < k: # We have excess operations left after the main transformation extra_ops = k - operations_needed # We can perform excess operations as long as they are even or there\'s enough characters to delete and re-add if extra_ops % 2 == 0 or extra_ops >= 2 * common_len: return \\"YES\\" return \\"NO\\""},{"question":"You are given a sequence b_1, b_2, ldots, b_n of integers that can be both positive and negative. Your task is to divide the sequence into exactly two non-empty subsequences such that the absolute difference of their sums is minimized. The first line of input contains one integer t (1 leq t leq 1000): the number of test cases. The first line of each test case contains one integer n (2 leq n leq 500). The second line contains n integers b_1, b_2, ldots, b_n (-10^6 leq b_i leq 10^6). The total sum of n is at most 5000. For each test case, print one integer: the minimized absolute difference of the sums of the two subsequences. Example: Input: 3 4 1 2 3 4 3 -1 -2 3 5 7 -3 5 -2 1 Output: 0 0 0 In the first test case, we can divide the sequence into [1, 4] and [2, 3], which results in an absolute difference of 0. In the second test case, we can divide the sequence into [-1, 3] and [-2], which results in an absolute difference of 0. In the third test case, we can divide the sequence into [7, -5, -2] and [-3, 1], which results in an absolute difference of 0.","solution":"def minimize_absolute_difference(t, test_cases): results = [] for n, sequence in test_cases: total_sum = sum(sequence) half_sum = total_sum // 2 dp = [False] * (half_sum + 1) dp[0] = True for num in sequence: for j in range(half_sum, abs(num) - 1, -1): if num < 0: dp[j] = dp[j] or dp[j + num] else: dp[j] = dp[j] or dp[j - num] for i in range(half_sum, -1, -1): if dp[i]: part_sum_1 = i part_sum_2 = total_sum - i results.append(abs(part_sum_1 - part_sum_2)) break return results"},{"question":"A zoo is designing a new enclosure for a group of animals that need to be kept in separate, individual pens connected by corridors. Each pen is rectangular and they all have the same width W, but their lengths L can vary. The zoo has received a list of pens they need to build, each with a specific length. Due to budget constraints, they can only purchase a limited number of different lengths of timber. Thus, they want to minimize the number of different lengths of timber required to build all the specified pens. Here\'s the challenge: given a list of pen lengths, determine the minimum number of different lengths of timber required to construct all the pens, where each pen uses a single length of timber for its length. Input: - The first line contains an integer N (1 ≤ N ≤ 1000) — the number of pens that need to be built. - The second line contains N space-separated integers L1, L2, ..., LN (1 ≤ Li ≤ 1000) — the list of lengths of the pens. Output: - A single integer — the minimum number of different lengths of timber required. Example: Input: 5 4 8 4 7 8 Output: 3 Explanation: In this example, the zoo needs pens with lengths 4, 8, 4, 7, and 8. To build these with the minimum number of different lengths of timber, they can use lengths of 4, 7, and 8. Therefore, the minimum number of different lengths required is 3.","solution":"def minimum_different_lengths_required(n, lengths): Returns the minimum number of different lengths of timber required to construct all the pens. Args: n (int): Number of pens. lengths (List[int]): List of lengths of the pens. Returns: int: Minimum number of different lengths of timber required. # Use set to find unique lengths of pens unique_lengths = set(lengths) # The number of unique lengths is the answer return len(unique_lengths)"},{"question":"In a certain online game, there is a feature which allows players to participate in matches every day. Each day\'s result is either a win (represented by \'W\') or a loss (represented by \'L\'). At the end of a month, the game server wants to analyze the performance of players and rate them based on their streaks. A streak is defined as a sequence of consecutive wins. Your task is to write a function that, given a string of wins and losses for a player, determines the longest streak of consecutive wins. The first line contains a single string s (1 leqslant |s| leqslant 10^6), representing the outcomes of all matches in a month where the player participated. Each character in the string is either \'W\' or \'L\'. Output the length of the longest streak of consecutive wins. # Examples **Input:** ``` WWLWWWLW ``` **Output:** ``` 3 ``` **Input:** ``` WWWLLW ``` **Output:** ``` 3 ``` **Input:** ``` LLLLL ``` **Output:** ``` 0 ``` **Input:** ``` WWWWWW ``` **Output:** ``` 6 ``` The first example contains a longest streak of 3 consecutive wins. For the second example, the longest streak is also 3. For the third example, there are no wins, hence the longest streak is 0. In the last example, the longest streak is the entire string with 6 consecutive wins.","solution":"def longest_win_streak(s): Given a string s of wins (\'W\') and losses (\'L\'), this function returns the length of the longest streak of consecutive wins. max_streak = 0 current_streak = 0 for char in s: if char == \'W\': current_streak += 1 if current_streak > max_streak: max_streak = current_streak else: current_streak = 0 return max_streak"},{"question":"A program is required to organize a queue for a theme park ride. There are a total of n people standing in a queue, each with a unique token number ranging from 1 to n. A friendly park employee has noted down the initial order of people in the queue. However, some people swapped their positions after the employee recorded the order. The employee asks for your help to determine how many people have retained their initial positions. Write a function `countStaticPositions` that receives a list of integers representing the initial order of the queue and another list of integers representing the current order of the queue. The function should return the number of people who have retained their initial positions. The first line contains an integer n (1 ≤ n ≤ 105) — the total number of people in the queue. The second line contains n distinct integers arr1 (1 ≤ arr1[i] ≤ n) — the initial order of the queue. The third line contains n distinct integers arr2 (1 ≤ arr2[i] ≤ n) — the current order of the queue. Print a single integer — the number of people who have retained their initial positions. Example: Input: 5 1 2 3 4 5 2 3 1 5 4 Output: 1","solution":"def countStaticPositions(initial_order, current_order): Returns the number of people who have retained their initial positions. :param initial_order: List of integers representing the initial order of the queue. :param current_order: List of integers representing the current order of the queue. :return: Integer - count of people who have retained their initial positions. count = 0 for initial, current in zip(initial_order, current_order): if initial == current: count += 1 return count"},{"question":"You are working on a new project for a company that needs to process a large number of log entries from their web server. Each log entry contains timestamps representing the time a user spent on the server. You need to summarize the total time spent by each user. Your task is to write a program that reads a series of log entries and calculates the total time spent on the server for each user. Each log entry consists of a user ID and the duration in seconds that the user spent on the server. The first line of the input contains a single integer n (1 le n le 10^5) — the number of log entries. The following n lines each contain a string user_id and an integer duration (1 le duration le 10^5), separated by a space. The user_id is a string consisting of alphanumeric characters and has a length of up to 20 characters. The output should contain the total time spent on the server for each unique user, printed in ascending order of their user IDs. # Example Input: ``` 5 alice 30 bob 20 alice 25 bob 35 alice 10 ``` # Example Output: ``` alice 65 bob 55 ``` # Explanation: - Alice\'s total duration: 30 + 25 + 10 = 65 seconds - Bob\'s total duration: 20 + 35 = 55 seconds Your program should efficiently handle the input size and ensure the output is sorted by user IDs.","solution":"def calculate_total_durations(log_entries): Calculates the total time spent on the server for each user and returns it in a dictionary sorted by user IDs. :param log_entries: List of tuples containing user_id and duration :return: Dictionary with user_id as keys and total duration as values user_durations = {} for user_id, duration in log_entries: if user_id in user_durations: user_durations[user_id] += duration else: user_durations[user_id] = duration # Create a sorted dictionary by user_id sorted_user_durations = dict(sorted(user_durations.items())) return sorted_user_durations"},{"question":"Given a social network represented as a graph with N users numbered from 0 to N-1 and M bidirectional friendship connections, your task is to determine the influence score of each user. The influence score of a user is defined as the number of users that can be reached directly or indirectly through friendships. Each user can influence themselves. Write a function `calculate_influence(N: int, M: int, connections: List[Tuple[int, int]]) -> List[int]` to compute the influence scores. # Input - The first line contains two integers, N (1 le N le 10^4), the number of users, and M (0 le M le 50 times 10^3), the number of friendships. - The next M lines each contain two integers u and v (0 le u, v < N; u neq v) indicating a bidirectional friendship connection between user u and user v. # Output - Output a list of N integers where the i-th integer represents the influence score of user i. # Example Input ``` 5 4 0 1 1 2 3 4 2 0 ``` Output ``` 3 3 3 2 2 ``` Explanation - User 0 can influence users 0, 1, 2. - User 1 can influence users 0, 1, 2. - User 2 can influence users 0, 1, 2. - User 3 can influence users 3, 4. - User 4 can influence users 3, 4. # Constraints - The graph may be disconnected. - Each pair of users can only be directly connected by not more than one friendship.","solution":"from typing import List, Tuple def calculate_influence(N: int, M: int, connections: List[Tuple[int, int]]) -> List[int]: from collections import defaultdict, deque # Build graph from connections graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) # Function to perform BFS and count reach def bfs(start): visited = set() queue = deque([start]) count = 0 while queue: node = queue.popleft() if node not in visited: visited.add(node) count += 1 for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return count # Calculate influence for each user influence = [0] * N for user in range(N): influence[user] = bfs(user) return influence"},{"question":"The royal advisor of the kingdom of Codeville has devised a unique way to keep track of the kingdom’s wealth. The kingdom has n cities, and each city i has a wealth value represented by a non-negative integer wi (0 ≤ wi ≤ 10^6). The advisor wants to know the maximum possible wealth difference that can be achieved by selecting any two cities in the kingdom. The difference in wealth between two cities x and y is defined as the absolute value | wx - wy |. You need to write a program that finds the maximum possible wealth difference between any two cities. The first line of input contains an integer n (2 ≤ n ≤ 100 000) — the number of cities in the kingdom. The next line contains n space-separated integers w1, w2, ..., wn — the wealth values of the cities. Print the maximum absolute difference in wealth between any two cities. Example Input: 5 3 1 9 5 6 Output: 8 In the example, the maximum possible difference is achieved between the city with wealth 1 and the city with wealth 9, resulting in a difference of 8.","solution":"def max_wealth_difference(n, wealths): Returns the maximum possible wealth difference between any two cities. Parameters: n (int): Number of cities wealths (list): List of integers representing the wealth of each city Returns: int: Maximum possible wealth difference max_wealth = max(wealths) min_wealth = min(wealths) return max_wealth - min_wealth"},{"question":"You have been given an array of integers and a positive integer k. Your task is to determine whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most k and the absolute difference between i and j is exactly 1. Note that i and j must not be the same. Implement the function: ```python def almost_k_difference(nums, k): # Your code here ``` # Input - `nums`: List of integers (1 ≤ len(nums) ≤ 10^5, -10^9 ≤ nums[i] ≤ 10^9) - `k`: A positive integer (1 ≤ k ≤ 10^9) # Output - Return `True` if such indices exist. Otherwise, return `False`. # Examples ```python # Example 1 nums = [1, 2, 3, 5] k = 2 # The input array is [1, 2, 3, 5] # The absolute difference between nums[1] and nums[2] is abs(2 - 3) = 1 which is less than or equal to k (2), # and the indices difference is abs(1 - 2) = 1 which is exactly 1. # Therefore, the output is True. # Example 2 nums = [1, 5, 9, 15] k = 3 # The input array is [1, 5, 9, 15] # No pair of adjacent elements in the array has an absolute difference less than or equal to k (3). # Therefore, the output is False. # Example 3 nums = [7, 10, 15, 1] k = 6 # The input array is [7, 10, 15, 1] # The first pair (7, 10) has an absolute difference of 3 which is less than or equal to k (6), # and the indices difference is abs(0 - 1) = 1 which is exactly 1. # Therefore, the output is True. ``` # Constraints: - Aim for an efficient solution with a linear or near-linear time complexity. - Explain your approach and how your solution efficiently checks the required condition.","solution":"def almost_k_difference(nums, k): Given an array of integers and a positive integer k, determine whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most k and the absolute difference between i and j is exactly 1. :param nums: List of integers :param k: A positive integer :return: True if such indices exist, otherwise False for i in range(len(nums) - 1): if abs(nums[i] - nums[i + 1]) <= k: return True return False"},{"question":"Given a binary tree, determine if it is a Complete Binary Tree (CBT). A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible. A binary tree node is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` **Input:** - The function will receive the root of the binary tree. **Output:** - Return `True` if the binary tree is a Complete Binary Tree, or `False` otherwise. **Example:** ```python def isCompleteTree(root): # Your implementation here # Example 1: # Input: # root = [1, 2, 3, 4, 5, 6] # # Tree representation: # 1 # / # 2 3 # / / # 4 5 6 # # Output: # True # Example 2: # Input: # root = [1, 2, 3, 4, 5, None, 7] # # Tree representation: # 1 # / # 2 3 # / # 4 5 7 # # Output: # False # Example 3: # Input: # root = [1, 2, 3, 4, 5, 6, 7] # # Tree representation: # 1 # / # 2 3 # / / # 4 5 6 7 # # Output: # True ```","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isCompleteTree(root): if not root: return True queue = deque([root]) reached_end = False while queue: current = queue.popleft() if not current: reached_end = True else: if reached_end: return False queue.append(current.left) queue.append(current.right) return True"},{"question":"You are given a rectangular grid of size m x n consisting of blank cells (represented by \'.\') and some obstacle cells (represented by \'#\'). A ball can move up, down, left, or right, but it will stop moving once it encounters an obstacle or the edge of the grid. Given the starting position of the ball and the destination position, determine if the ball can reach the destination in an infinite number of moves. The ball can visit the same cell multiple times. # Input: - The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. - The next m lines each contain n characters (\'.\' or \'#\') representing the grid. - The next line contains four integers sx, sy, dx, and dy (1 ≤ sx, sy, dx, dy ≤ min(m, n)) — the starting and destination coordinates of the ball, given in 1-based index. # Output: - Output \\"YES\\" if the ball can reach the destination, otherwise output \\"NO\\". # Example: Input: ``` 5 5 ..... .#... .#. ..... .#... 1 1 4 5 ``` Output: ``` YES ``` Input: ``` 3 3 .#. .#. .#. 1 1 3 3 ``` Output: ``` NO ``` # Note: In the first example, the ball starts at (1, 1) and can move down to (5, 1), then right to (5, 5) and finally up to (4, 5) to reach the destination. In the second example, the ball cannot move to the third row or third column without hitting an obstacle, thus it cannot reach the destination.","solution":"def can_reach_destination(grid, start, destination): m, n = len(grid), len(grid[0]) visited = [[False] * n for _ in range(m)] def has_path(x, y, dx, dy): if not (0 <= x < m and 0 <= y < n) or grid[x][y] == \'#\' or visited[x][y]: return False if (x, y) == (dx, dy): return True visited[x][y] = True # Move in all four directions return (has_path(x + 1, y, dx, dy) or has_path(x - 1, y, dx, dy) or has_path(x, y + 1, dx, dy) or has_path(x, y - 1, dx, dy)) # Convert to 0-based index sx, sy = start[0] - 1, start[1] - 1 dx, dy = destination[0] - 1, destination[1] - 1 return \\"YES\\" if has_path(sx, sy, dx, dy) else \\"NO\\" def solve_grid_reach(m, n, grid, sx, sy, dx, dy): return can_reach_destination(grid, (sx, sy), (dx, dy)) # Example usage: m, n = 5, 5 grid = [ \\".....\\", \\".#...\\", \\".#.\\", \\".....\\", \\".#...\\" ] sx, sy, dx, dy = 1, 1, 4, 5 print(solve_grid_reach(m, n, grid, sx, sy, dx, dy)) # Output: YES"},{"question":"A permutation of a string is another string that contains the same characters, only the order of characters can be different. For example, god and dog are permutations of each other. Given two strings s and t of length n (1 le n le 10^5), determine if they are permutations of each other. The first line contains a single integer q (1 le q le 10^4) — the number of test cases. Each of the next q test cases consist of two lines. The first line contains the string s. The second line contains the string t. Output \\"YES\\" on a single line if the strings s and t are permutations of each other, otherwise output \\"NO\\". You can print each letter in any case (upper or lower). The sum of the length of the strings across all test cases does not exceed 10^6. **Example:** **Input:** ``` 3 abc cba abcd dcba abc def ``` **Output:** ``` YES YES NO ``` **Explanation:** In the first test case, the strings \\"abc\\" and \\"cba\\" are permutations of each other. In the second test case, the strings \\"abcd\\" and \\"dcba\\" are permutations of each other. In the third test case, the strings \\"abc\\" and \\"def\\" are not permutations of each other.","solution":"def are_permutations(s, t): Determine if strings s and t are permutations of each other. Args: s (str): first string t (str): second string Returns: str: \\"YES\\" if s and t are permutations of each other, otherwise \\"NO\\" if sorted(s) == sorted(t): return \\"YES\\" else: return \\"NO\\" def process_test_cases(q, test_cases): results = [] for s, t in test_cases: results.append(are_permutations(s, t)) return results"},{"question":"In the upcoming coding competition, you are tasked with solving a problem related to a fictional alien language. The alien language consists of a series of words that follow a specific alphabetical order different from the usual A-Z order we use. Your goal is to determine if a given list of words is sorted according to the alien alphabetical order. You need to write a program to confirm if the given words are sorted as per the alien language\'s order. The first line of input contains a string representing the alien alphabet - a permutation of the lowercase English letters \'a\' through \'z\'. The next line contains an integer n (2 ≤ n ≤ 100) representing the number of words. The following n lines contain one word each, consisting of lowercase English letters only. Output \\"YES\\" if the words are sorted according to the provided alien alphabetical order, otherwise print \\"NO\\". Example: Input: zyxwvutsrqponmlkjihgfedcba 3 cba bca abc Output: YES Explanation: The alien alphabet is the reverse of the usual English alphabet. Under this order, \'cba\' should come before \'bca\', and \'bca\' before \'abc\', which is indeed the case. Hence, the output is \\"YES\\".","solution":"def is_alien_sorted(alphabet, words): Determines if the list of words is sorted according to the given alien alphabet. Args: alphabet (str): The alien alphabet as a permutation of the lowercase English letters. words (list): The list of words to check. Returns: str: \\"YES\\" if the words are sorted according to the alien alphabet, otherwise \\"NO\\". # Create a dictionary to map each alien alphabet character to its index order = {char: index for index, char in enumerate(alphabet)} # Compare each word with the next in the list for i in range(len(words) - 1): word1 = words[i] word2 = words[i + 1] # Compare characters of the two words for j in range(min(len(word1), len(word2))): if order[word1[j]] < order[word2[j]]: break elif order[word1[j]] > order[word2[j]]: return \\"NO\\" else: # If all corresponding characters are equal, the shorter word should come first if len(word1) > len(word2): return \\"NO\\" return \\"YES\\""},{"question":"You are working on a ticket booking system for a theater. Each show can have multiple performances scheduled throughout the week. The system needs to account for overlapping performance times to manage ticket availability and ensure no double bookings. Your task is to develop a function that checks for overlapping performance times for a given list of performances. Each performance has a start time and an end time. You are given n performances, each represented by a tuple (start_time, end_time). Write a function that determines if any of the performances overlap. Two performances overlap if one starts before the other ends and ends after the other starts. The first line of input contains a single integer n (1 ≤ n ≤ 100) — the number of performances. Each of the next n lines contains two integers, start_time and end_time (0 ≤ start_time < end_time ≤ 100) — the start and end times of each performance. Return \\"Yes\\" if there is an overlap between any of the performances, otherwise return \\"No\\". # Example Input: ``` 4 1 3 2 5 6 8 8 10 ``` Output: ``` Yes ``` Input: ``` 3 1 2 3 4 5 6 ``` Output: ``` No ``` # Explanation In the first example, the second performance (2, 5) overlaps with the first performance (1, 3). In the second example, none of the performances overlap.","solution":"def check_overlap(performances): Determines if any of the performances overlap. Parameters: performances (list of tuples): List of tuples where each tuple contains the start and end time of a performance. Returns: str: \\"Yes\\" if any of the performances overlap, otherwise \\"No\\". performances.sort() for i in range(1, len(performances)): if performances[i][0] < performances[i-1][1]: return \\"Yes\\" return \\"No\\""},{"question":"In a distant town, there is a rectangular grid of houses. Each house in the grid can have a supply of water, either on or off. The grid is represented by a matrix of size m x n. Each cell of this matrix can be either \'1\' or \'0\', where \'1\' indicates that the water supply is on, and \'0\' indicates that it is off. Due to a malfunction, turning off the water supply in one house will also turn off the water in its neighboring houses that are directly adjacent vertically or horizontally. Given the initial state of the grid, your task is to determine the minimum number of houses in which you need to manually turn off the water such that all the houses in the grid have their water supply turned off. The first line contains two integers m and n (1 ≤ m, n ≤ 100), representing the number of rows and columns respectively. Each of the next m lines contains n characters, each being either \'1\' or \'0\', representing the initial state of the grid. Print a single integer which is the minimum number of houses you need to manually turn off to ensure that all houses have their water supply turned off. # Sample Input ``` 3 3 110 100 011 ``` # Sample Output ``` 2 ``` # Explanation In the sample provided, one optimal solution is to manually turn off the water in the house at (1,1) and the house at (3,3). This will turn off the water supply in all houses. There may be other solutions, but the minimum number of houses you need to manually turn off in this case is 2.","solution":"def min_houses_to_turn_off(grid, m, n): def dfs(x, y): if x < 0 or y < 0 or x >= m or y >= n or grid[x][y] == \'0\': return grid[x][y] = \'0\' dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) num_clusters = 0 for i in range(m): for j in range(n): if grid[i][j] == \'1\': dfs(i, j) num_clusters += 1 return num_clusters"},{"question":"In a faraway land, there exists a peculiar game that adults and children alike enjoy. The game consists of a bag filled with candies of different colors. Each type of candy is represented by a different positive integer. You are tasked with determining if it\'s possible to distribute an even number of candies to every child such that each child receives an equal number of candies remaining from the piles. The first line of input contains an integer t (1 le t le 15) — the number of test cases. The first line of each test case contains an integer n (2 le n le 2000) — the number of types of candies. The second line of each test case contains n space-separated integers c_1, c_2, ldots, c_{n} (1 le c_i le 10^{9}) — the counts of each type of candy. For each test case, print \\"YES\\" if it\'s possible to distribute an equal number of even candies to every child. Otherwise, print \\"NO\\". In the first sample, we can distribute all 4 candies of the first type to one child and all 6 candies of the second type to another. Since both are even and no candies remain, it\'s possible. In the second sample, we cannot split the candies evenly.","solution":"def can_distribute_even_candies(test_cases): results = [] for case in test_cases: n, candies = case if all(c % 2 == 0 for c in candies): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") t = int(lines[0]) cases = [] index = 1 for _ in range(t): n = int(lines[index]) candies = list(map(int, lines[index+1].split())) cases.append((n, candies)) index += 2 return cases"},{"question":"You have been appointed as a warehouse manager in charge of the logistics for a large inventory system. The warehouse contains n shelves, each with a certain number of items. The shelves are aligned in a single row, and you have to manage the process of shifting items between the shelves to achieve an optimal balance. You are given an array of integers, where each integer represents the number of items on a corresponding shelf. Your goal is to ensure that the number of items on every shelf is as even as possible. You can move items directly from one shelf to any other shelf. To measure the \\"evenness\\" of the distribution, calculate the maximum absolute difference between the number of items on the most loaded shelf and the least loaded shelf after redistribution. Minimize this value. Write a function `minimizeMaxDifference(n, items)` that takes an integer `n` (the number of shelves) and an array of integers `items` (where each element represents the number of items on a corresponding shelf), and returns the minimum possible maximum absolute difference after optimizing the distribution. # Input - `n` (1 ≤ n ≤ 100,000): the number of shelves. - `items`: an array of `n` integers (0 ≤ items[i] ≤ 10^9) representing the number of items on each shelf. # Output - An integer representing the minimum possible maximum absolute difference between the most loaded shelf and the least loaded shelf after redistribution. # Example ```python def minimizeMaxDifference(n, items): # Function implementation here pass # Example usage: n = 5 items = [3, 8, 2, 6, 7] print(minimizeMaxDifference(n, items)) # Output: 1 ``` # Explanation In the example, you can move items around to make the number of items on each shelf as even as possible. One optimal solution is to redistribute the items to make each shelf contain 5 items. Thus, the maximum difference between the most loaded shelf and the least loaded shelf is 1 after redistribution.","solution":"def minimizeMaxDifference(n, items): total_items = sum(items) min_possible = total_items // n extra = total_items % n min_difference = 1 if extra else 0 return min_difference"},{"question":"# Reverse Segments Given an array of integers, your task is to implement a function that reverses every contiguous subarray of length `k`. If the total number of elements in the array is not a multiple of `k`, then reverse what is remaining at the end. **Input:** - An integer array `arr` of length `n` where (1 leq n leq 10^6). - An integer `k` where (1 leq k leq n). **Output:** - Return the modified array after reversing every contiguous subarray of length `k`. **Example:** ```python reverse_segments([1, 2, 3, 4, 5, 6, 7, 8], 3) ``` **Output Example:** ```python [3, 2, 1, 6, 5, 4, 8, 7] ``` **Note:** - In the above example, the array `[1, 2, 3, 4, 5, 6, 7, 8]` is divided into subarrays of length 3: `[1, 2, 3]`, `[4, 5, 6]`, and the remaining elements `[7, 8]`. - These subarrays are reversed to get `[3, 2, 1]`, `[6, 5, 4]`, and `[8, 7]`. - The final array after concatenation is `[3, 2, 1, 6, 5, 4, 8, 7]`.","solution":"def reverse_segments(arr, k): Function to reverse every contiguous subarray of length k. n = len(arr) for i in range(0, n, k): arr[i:i+k] = arr[i:i+k][::-1] return arr"},{"question":"Given two lists of integers, A and B, both of length n, define that the two lists are similar if you can swap some pairs of elements in list B and make B equal to A. Determine if lists A and B are similar or not. # Input The first line contains an integer n (1 ≤ n ≤ 10^5), denoting the length of the lists A and B. The second line contains n integers, the elements of list A. The third line contains n integers, the elements of list B. # Output Print \\"YES\\" if the lists A and B are similar. Otherwise, print \\"NO\\". # Example Input: ``` 4 1 2 3 4 2 1 4 3 ``` Output: ``` YES ``` Input: ``` 5 1 2 2 3 4 2 1 3 3 4 ``` Output: ``` NO ``` # Note In the first example, you can swap 1 and 2 in list B to make it [1, 2, 3, 4], which is equal to list A. In the second example, after any number of swaps, it\'s not possible to make list B equal to list A due to the differing counts of the element 2 and 3 in the lists.","solution":"def are_lists_similar(n, A, B): Determines if two lists A and B are similar, meaning you can swap some pairs of elements in list B to make B equal to A. Parameters: n (int): The length of the lists A and B. A (list of int): The first list. B (list of int): The second list. Returns: str: \\"YES\\" if the lists are similar, \\"NO\\" otherwise. # If the counts of elements are the same in both lists, they are similar. return \\"YES\\" if sorted(A) == sorted(B) else \\"NO\\""},{"question":"Little Y has an array of n integers: q1, q2, ..., qn. She needs to determine if it\'s possible to partition this array into two subsets such that the difference of their sums is exactly k. The first line contains two space-separated integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ 10^4). The next line contains n space-separated integers q1, q2, ..., qn (1 ≤ qi ≤ 100). Output \\"YES\\" if you can partition the array into the two subsets with the required difference, or \\"NO\\" if it is not possible. If it is possible to partition the array into two subsets, output the two subsets on separate lines. If there are multiple valid partitions, any of them will be accepted. Example: Input: 5 3 1 2 3 4 5 Output: YES 1 2 3 4 5 Input: 4 1 1 1 1 1 Output: NO","solution":"def can_partition_with_diff_k(n, k, array): total_sum = sum(array) if (total_sum - k) % 2 != 0: return \\"NO\\", [], [] target = (total_sum - k) // 2 dp = [False] * (target + 1) dp[0] = True for num in array: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] if not dp[target]: return \\"NO\\", [], [] subset1 = [] subset2 = [] current_sum = target for num in reversed(array): if current_sum >= num and dp[current_sum - num]: subset1.append(num) current_sum -= num else: subset2.append(num) return \\"YES\\", subset1, subset2"},{"question":"Suppose you are given a grid of size M times N consisting of two types of cells: land and water. Each cell of the grid is represented by a character, denoted as \'L\' for land and \'W\' for water. The task is to determine the size of the largest contiguous area of land in the grid. Two land cells are considered contiguous if they are adjacent horizontally or vertically (not diagonally). Given a grid as input, your task is to write a program to find and output the size of the largest contiguous area of land within the grid. # Input format: - The first line contains two integers, M and N (1 le M, N le 1000), representing the number of rows and columns in the grid, respectively. - The next M lines each contains a string of length N. Each character in these strings is either \'L\' or \'W\'. # Output format: - Output a single integer representing the size (number of cells) of the largest contiguous area of land. Example # Input: 3 4 LLLL LWLW LLLL # Output: 10 Explanation: In the given grid, the largest contiguous area of land is formed by the cells: ``` LLLL L--L LLLL ``` where \'L\'s are part of the largest contiguous area of land, and \'-\'s are water cells. The size of the largest contiguous area is 10. Constraints: - 1 le M, N le 1000 - The grid doesn\'t contain any invalid characters – only \'L\' or \'W\'. Write a function to solve the problem.","solution":"def find_largest_land_area(grid, m, n): def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == \'W\' or (x, y) in visited: return 0 visited.add((x, y)) size = 1 size += dfs(x + 1, y) size += dfs(x - 1, y) size += dfs(x, y + 1) size += dfs(x, y - 1) return size max_land_area = 0 visited = set() for i in range(m): for j in range(n): if grid[i][j] == \'L\' and (i, j) not in visited: max_land_area = max(max_land_area, dfs(i, j)) return max_land_area # Example usage: # M = 3 # N = 4 # grid = [\\"LLLL\\", \\"LWLW\\", \\"LLLL\\"] # print(find_largest_land_area(grid, M, N)) # Output: 10"},{"question":"Write a function that takes an integer n as input and returns the sum of all even numbers from 1 to n (inclusive). If there are no even numbers in the given range, the function should return 0. You are provided n (1 ≤ n ≤ 100). The function should return an integer representing the sum of all even numbers in the range. Example input and output: Input: 10 Output: 30 Input: 3 Output: 2 Input: 1 Output: 0","solution":"def sum_of_evens(n): Returns the sum of all even numbers from 1 to n (inclusive). return sum(i for i in range(2, n + 1, 2))"},{"question":"Given a list of integers, the goal is to divide the list into the minimum number of contiguous subarrays such that the sum of each subarray is exactly equal to S. You are given an integer S and a list of integers [a_1, a_2, a_3, ldots, a_n]. If it is impossible to divide the list in the required manner, print \\"NO\\". Otherwise, print \\"YES\\" followed by the number of subarrays, then the indices marking the end of each subarray. # Input - The first line contains an integer S (1 leq S leq 10^9). - The second line contains an integer n (1 leq n leq 10^5), the number of elements in the list. - The third line contains n integers a_1, a_2, a_3, ldots, a_n (1 leq a_i leq 10^9). # Output - If it is impossible to divide the list in the required manner, print \\"NO\\". - Otherwise, print \\"YES\\" in the first line followed by an integer k in the second line, which represents the total number of subarrays. - Then print k integers denoting the ending indices of each subarray. # Example - Input: ``` 5 5 1 2 2 1 4 ``` - Output: ``` YES 2 3 5 ``` - Explanation: The list can be divided into two subarrays [1, 2, 2] with a sum of 5 and [1, 4] with a sum of 5. - Input: ``` 10 3 1 2 3 ``` - Output: ``` NO ``` - Explanation: It is not possible to divide the list into subarrays where each subarray sums to 10.","solution":"def divide_list(S, n, arr): subarrays = [] current_sum = 0 start = 0 for i in range(n): current_sum += arr[i] if current_sum == S: subarrays.append(i + 1) # Store the end index of the subarray current_sum = 0 start = i + 1 elif current_sum > S: break if current_sum == 0 and start == n: return \\"YES\\", len(subarrays), subarrays else: return \\"NO\\" # Example usage: # S = 5 # n = 5 # arr = [1, 2, 2, 1, 4] # print(divide_list(S, n, arr))"},{"question":"Mara, an archaeologist, is exploring a series of ancient ruins arranged in a unique manner. The ruins form a series of chambers that can be represented as an undirected graph where each chamber is a node and a path connecting two chambers is an edge. Each chamber has a certain amount of treasure, but only some chambers start with treasure and others may have zero initially. Mara can move treasure from one chamber to its directly connected neighboring chamber. Mara wants to maximize the treasure in a specific target chamber after a number of operations. Each operation consists of moving all the treasure from one chamber to its directly connected chamber. However, each chamber can only contain a limited amount of treasure which is specified for each chamber. You are given n chambers numbered from 1 to n, connected by k paths, and an array representing the initial amount of treasure in each chamber. You are also given an array representing the maximum capacity of treasure each chamber can hold. Additionally, you need to identify the target chamber and the number of operations Mara can perform. The task is to determine the maximum amount of treasure that can be accumulated in the target chamber after performing the given number of operations. The first line of input contains three integers n, k, and t (1 ≤ n ≤ 100000, 0 ≤ k ≤ n - 1, 1 ≤ t ≤ n), representing the number of chambers, number of paths, and the target chamber number respectively. The second line contains n space-separated integers representing the initial amount of treasure in each chamber. The third line contains n space-separated integers representing the maximum capacity of treasure each chamber can hold. The next k lines each contain a pair of space-separated integers indicating that there is a bidirectional path between these two chambers. The last line contains a single integer o (0 ≤ o ≤ 100000), representing the number of operations Mara can perform. Output the maximum amount of treasure that can be gathered in the target chamber after o operations. If the chamber is already at its maximum capacity and no more treasure can be added, print the current amount in there. Sample 1: ``` 5 4 3 0 10 20 5 15 5 15 25 10 20 1 2 2 3 3 4 4 5 3 ``` In this sample, Mara can move treasures from chamber 2 to chamber 3, chamber 4 to chamber 3, and thus accumulate the maximum possible treasure in chamber 3 under the given number of operations and constraints.","solution":"def max_treasure_in_target_chamber(n, k, t, initial_treasure, max_capacity, paths, o): from collections import defaultdict, deque # Build adjacency list for the graph graph = defaultdict(list) for u, v in paths: graph[u].append(v) graph[v].append(u) # Breadth-First Search to perform the operations visited = [False] * (n + 1) queue = deque([(t, initial_treasure[t - 1])]) visited[t] = True operations = 0 while queue and operations < o: chamber, treasure = queue.popleft() for neighbor in graph[chamber]: if visited[neighbor] or operations >= o: continue capacity_left = max_capacity[chamber - 1] - initial_treasure[chamber - 1] if initial_treasure[neighbor - 1] > 0 and capacity_left > 0: move_treasure = min(initial_treasure[neighbor - 1], capacity_left) initial_treasure[chamber - 1] += move_treasure initial_treasure[neighbor - 1] -= move_treasure queue.append((neighbor, initial_treasure[neighbor - 1])) operations += 1 if operations >= o: break visited[chamber] = True return initial_treasure[t - 1]"},{"question":"Alice and Bob are playing a game. They start with a sequence consisting of n integers. Each player takes turns performing the following operation: in each turn, a player must choose a non-zero integer from the sequence, divide it by two (rounding down if the result is not an integer), and replace the original integer with the result. The game ends when all integers in the sequence are equal to zero. The player who cannot make a move (i.e., cannot find a non-zero integer to divide by two) loses the game. Alice always goes first. You need to determine the winner of the game assuming both players play optimally. The input consists of: - First line: a single integer n (1 ≤ n ≤ 100,000) - the number of integers in the sequence. - Second line: n space-separated integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 100,000) - the initial sequence of integers. The output should be \\"Alice\\" if Alice wins the game, and \\"Bob\\" if Bob wins the game. Example: Input: 3 2 4 8 Output: Alice Explanation: 1. Alice takes 8, divides it by 2 to get 4. Sequence becomes [2, 4, 4]. 2. Bob takes 4, divides it by 2 to get 2. Sequence becomes [2, 2, 4]. 3. Alice takes 4, divides it by 2 to get 2. Sequence becomes [2, 2, 2]. 4. Bob takes 2, divides it by 2 to get 1. Sequence becomes [2, 2, 1]. 5. Alice takes 2, divides it by 2 to get 1. Sequence becomes [1, 2, 1]. 6. Bob takes 2, divides it by 2 to get 1. Sequence becomes [1, 1, 1]. 7. Alice takes 1, divides it by 2 to get 0. Sequence becomes [0, 1, 1]. 8. Bob takes 1, divides it by 2 to get 0. Sequence becomes [0, 0, 1]. 9. Alice takes 1, divides it by 2 to get 0. Sequence becomes [0, 0, 0]. Bob cannot make a move, Alice wins.","solution":"def game_winner(n, sequence): Determines the winner of the game assuming both players play optimally. Parameters: n (int): The number of integers in the sequence. sequence (list of int): The initial sequence of integers. Returns: str: The winner of the game (\\"Alice\\" or \\"Bob\\"). # Count the total number of non-zero integers in the sequence num_non_zero = sum(1 for x in sequence if x != 0) # If the number of non-zero integers is odd, then Alice will always take the last move # If the number of non-zero integers is even, then Bob will take the last move if num_non_zero % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"You are given a list of integers. Your task is to determine the length of the longest subsequence that adheres to the following alternating property: For any two adjacent elements in the subsequence, the following conditions hold — either the first element is even and the second is odd, or the first is odd and the second is even. Input: - The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the list. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the list. Output: - Output a single integer — the length of the longest alternating subsequence. Example: Input: 6 1 2 3 4 5 6 Output: 6 Explanation: One possible longest alternating subsequence is [1, 2, 3, 4, 5, 6]. This sequence alternates between odd and even elements. Another possible alternating subsequence of the same length is [2, 3, 4, 5, 6, 1], starting with an even element and followed by an odd element.","solution":"def longest_alternating_subsequence(arr): Returns the length of the longest subsequence that alternates between even and odd elements. if not arr: return 0 # Start with the length of 1 as single element itself is a valid subsequence max_len = 1 current_len = 1 for i in range(1, len(arr)): if (arr[i-1] % 2 == 0 and arr[i] % 2 != 0) or (arr[i-1] % 2 != 0 and arr[i] % 2 == 0): current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"You are given a list of distinct integers. Your task is to determine the minimum sum of a contiguous subsequence in the list. A subsequence is defined as a sequence derived by deleting some or no elements of the list, without changing the order of the remaining elements. # Input - The first line contains a single integer n (1 le n le 10^5) — the number of elements in the list. - The second line contains n distinct integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9). # Output - Output a single integer, the minimum sum of any contiguous subsequence of the list. # Example Input ``` 5 3 -4 2 -5 6 ``` Output ``` -7 ``` # Note In the example given, the minimum sum of any contiguous subsequence is achieved by the subsequence starting at the second element and ending at the fourth element: [-4, 2, -5] with the sum of -7.","solution":"def min_contiguous_subsequence_sum(nums): Returns the minimum sum of a contiguous subsequence in the list. min_sum = float(\'inf\') current_sum = 0 for num in nums: current_sum += num if current_sum < min_sum: min_sum = current_sum if current_sum > 0: current_sum = 0 return min_sum"},{"question":"Given an integer array nums and an integer target, return indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Constraints: - 2 <= nums.length <= 10^4 - -10^9 <= nums[i] <= 10^9 - -10^9 <= target <= 10^9 - Only one valid answer exists.","solution":"def two_sum(nums, target): Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i"},{"question":"Alice is working on a data analysis project where she needs to analyze the performance of different retail stores over a period of n days. She has access to the daily sales report of each store, but she also needs to make some adjustments to the sales data for specific periods based on certain events that affected the sales. Alice has n integers a1, a2, ..., an representing the sales of a store for each day. She also has m operations that need to be performed on this data: 1. Calculate the sum of sales for a specified subrange of days. 2. Update the sales value for a specific day. Alice needs your help to perform these operations efficiently. Given the initial sales data and the list of operations, output the results of all type 1 (sum query) operations in the order they appear. The first line contains two integers n and m (1 ≤ n, m ≤ 2*10^5) — the number of days and the number of operations. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000) — the initial sales data. The i-th of the next m lines contains an integer t_i (1 or 2) — the type of the ith operation. - If t_i = 1, then two integers l_i and r_i follow (1 ≤ l_i ≤ r_i ≤ n) — the range of days for the sum query. - If t_i = 2, then two integers k_i and d_i follow (1 ≤ k_i ≤ n, 0 ≤ d_i ≤ 1000) — the day and the new sales value for update. Output the results of all sum query operations in the order they appear, each on a new line. # Example Input ``` 5 4 10 20 30 40 50 1 2 4 2 3 100 1 2 4 1 1 5 2 5 200 ``` Output ``` 90 160 370 ``` # Explanation - Initial sales data: `[10, 20, 30, 40, 50]` - 1st operation: Sum of days 2 to 4 is 20 + 30 + 40 = 90 - 2nd operation: Update day 3 to 100, sales data becomes `[10, 20, 100, 40, 50]` - 3rd operation: Sum of days 2 to 4 is 20 + 100 + 40 = 160 - 4th operation: Sum of days 1 to 5 is 10 + 20 + 100 + 40 + 50 = 220 - 5th operation: Update day 5 to 200, sales data becomes `[10, 20, 100, 40, 200]`","solution":"def process_operations(n, m, sales, operations): results = [] for op in operations: if op[0] == 1: l = op[1] - 1 r = op[2] results.append(sum(sales[l:r])) elif op[0] == 2: k = op[1] - 1 d = op[2] sales[k] = d return results"},{"question":"Maria is participating in a programming competition. She needs to solve a series of problems and accumulate points for each correct solution. Each problem can be rated as having a difficulty level from 1 to n (where n is the highest difficulty level in the competition). Maria can attempt and solve multiple problems at each difficulty level, but she can solve the problems in any order. Maria\'s coach suggests that she should maximize her total points by solving problems with the highest difficulty level first and progressively moving towards the lower levels. However, Maria believes that solving easier problems first might give her a better warm-up for the harder ones. Given a list of tuples where each tuple contains two integers (d, p) representing the difficulty level d and the points p Maria earns for solving a problem with that difficulty level, determine the maximum possible points Maria can score if she solves each problem optimally based on the coach\'s advice. # Input - The first line contains an integer n (1 ≤ n ≤ 1000) – the number of different difficulty levels. - The next n lines contain two space-separated integers d and p (1 ≤ d ≤ n, 1 ≤ p ≤ 1000) – the difficulty level and the points for that level. # Output - Output a single integer – the maximum total points Maria can accumulate. # Example Input ``` 3 1 100 2 200 3 300 ``` Output ``` 600 ``` # Explanation Maria should solve the problems with the highest difficulty level first to maximize her points. In this example, she will solve the level 3 problem for 300 points, then the level 2 problem for 200 points, and finally the level 1 problem for 100 points, accumulating a total of 600 points.","solution":"def max_points(n, problems): Returns the maximum total points Maria can accumulate by solving problems in order of difficulty. Args: n (int): Number of different difficulty levels. problems (list of tuples): List of (d, p) where d is difficulty level and p is points. Returns: int: Maximum total points. # Sort the problems by difficulty in descending order sorted_problems = sorted(problems, key=lambda x: x[0], reverse=True) # Calculate the total points by summing the points of the sorted problems total_points = sum(p for _, p in sorted_problems) return total_points"},{"question":"Vera the gardener has a garden consisting of n flower beds arranged in a line. Every flower bed has a specific number of flowers. Initially, the number of flowers in each flower bed is given. Your task is to write a program that executes two types of queries efficiently. The first line contains two integers n and q (1 ≤ n ≤ 100000, 1 ≤ q ≤ 100000) — the number of flower beds and the number of queries. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 100000) — the initial number of flowers in each flower bed. Next q lines contain the queries. Each query is specified as a pair of integers ti and xi. If ti = 1, then as a reply to this query, remove all the flowers from flower bed xi (1 ≤ xi ≤ n). If ti = 2, then print the total number of flowers in the garden at the current state. Output the results of each type 2 query in a new line. For each type 2 query, print the total number of flowers in the garden at that point in time.","solution":"def handle_queries(n, q, flowers, queries): total_flowers = sum(flowers) results = [] for ti, xi in queries: if ti == 1: total_flowers -= flowers[xi - 1] flowers[xi - 1] = 0 elif ti == 2: results.append(total_flowers) return results # Example Usage n, q = 5, 4 flowers = [5, 1, 3, 6, 4] queries = [(2, 0), (1, 2), (2, 0), (1, 3)] print(handle_queries(n, q, flowers, queries)) # Expected output: [19, 18]"},{"question":"Given an integer array nums and an integer k, determine whether there is a continuous subarray of length at least 2 that sums up to a multiple of k. If such a subarray exists, return True; otherwise, return False. A continuous subarray is a contiguous part of array nums. A multiple of k means that the sum of the subarray can be expressed as n * k, where n is an integer. The first line of the input contains two integers n (length of the array) and k (1 <= n <= 10^5, -10^5 <= k <= 10^5). The second line contains n integers representing the array nums (each integer in nums is between -10^4 and 10^4). If there exists multiple solutions, you are allowed to return True for any of them. Example: Input: 4 6 23 2 4 6 Output: True","solution":"def check_subarray_sum(nums, k): Determine whether there is a continuous subarray of length at least 2 that sums up to a multiple of k. :param nums: List of integers :param k: Integer k :return: Boolean, True if such a subarray exists, False otherwise if k == 0: return any(sum(nums[i:i+2]) == 0 for i in range(len(nums)-1)) mod_map = {0: -1} # to handle the case when subarray from index 0 to i has sum % k == 0 total = 0 for i, num in enumerate(nums): total += num mod = total % k if k != 0 else total if mod in mod_map: if i - mod_map[mod] > 1: # ensure the length is at least 2 return True else: mod_map[mod] = i # record the first occurrence of this mod return False"},{"question":"You are given the task of securing a perimeter for a construction site. You have n planks, each having a length a_i. Your goal is to set up the maximum possible square-shaped fence using these planks. A valid square fence requires exactly 4 planks of equal length. Each plank can only be used once, and you cannot cut or merge planks to adjust their lengths. The first line contains the only integer n (1 le n le 10^5) — the number of planks you have. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^3) — the lengths of the planks. Print the maximum possible area (in square units) of a square-shaped fence you can make using the planks. If it is not possible to construct any valid square fence, print 0. In the first example, you can use four planks of length 3 to form a square fence with area 3 times 3 = 9. In the second example, you have no group of four planks of the same length, so it\'s not possible to form a square, and the output is 0.","solution":"def max_square_area(n, planks): Returns the maximum possible area of a square-shaped fence we can make using the planks. If it\'s not possible to construct any valid square fence, it returns 0. from collections import Counter # Count occurrences of each plank length plank_count = Counter(planks) # Find the maximum possible square side length max_side_length = 0 for length, count in plank_count.items(): if count >= 4: max_side_length = max(max_side_length, length) # If no valid square fence can be formed, return 0 if max_side_length == 0: return 0 return max_side_length ** 2"},{"question":"Design a function to count valid brackets. A string comprising of only `(`, `)`, `{`, `}`, `[` and `]` is given to you. A string is considered valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. Your task is to create a function `count_valid_brackets` that takes a single string input and returns the number of valid pairs of brackets. # Input: - A single string `s` (1 ≤ |s| ≤ 10^5) consisting of only `(`, `)`, `{`, `}`, `[` and `]`. # Output: - A single integer which is the count of valid pairs of brackets in the string. # Example: Input: ``` \\"(){}[]\\" ``` Output: ``` 3 ``` Input: ``` \\"([)]\\" ``` Output: ``` 0 ``` Input: ``` \\"(({{[[]]}}))\\" ``` Output: ``` 6 ``` # Notes: - A valid pair of brackets means each opening bracket has a corresponding closing bracket. - Completely nested and sequential pairs are both valid. - Closing brackets that do not have a matching opening bracket, or are in the wrong order, should not be counted.","solution":"def count_valid_pairs(s): Returns the number of valid pairs of brackets in the given string s. stack = [] pairs = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} count = 0 for char in s: if char in pairs.values(): stack.append(char) elif char in pairs: if stack and stack[-1] == pairs[char]: stack.pop() count += 1 else: return 0 # invalid sequence, so return 0 immediate return count"},{"question":"You are given an array of integers representing the daily temperatures recorded over a period. You need to find out how many days you would have to wait until a warmer temperature for each day. If there\'s no future day for which this is possible, the result for that day should be 0. For example, given the array of temperatures `[73, 74, 75, 71, 69, 72, 76, 73]`, your output should be `[1, 1, 4, 2, 1, 1, 0, 0]`. Write a function `dailyTemperatures` that takes an array of integers `temperatures` and returns an array of integers where each entry indicates how many days you need to wait until a warmer temperature. # Input - An integer array `temperatures` of length `n` (1 ≤ n ≤ 100,000), where each `temperatures[i]` is an integer in the range [30, 100]. # Output - An integer array of length `n` where each element represents the number of days until a warmer temperature or 0 if there is no future day with a warmer temperature. # Example ```python def dailyTemperatures(temperatures): # Your code here # Test case print(dailyTemperatures([73, 74, 75, 71, 69, 72, 76, 73])) # Output: [1, 1, 4, 2, 1, 1, 0, 0] ``` # Constraints - The solution must be efficient with a time complexity better than O(n^2), ideally O(n).","solution":"def dailyTemperatures(temperatures): Returns a list of integers where each element represents the number of days until a warmer temperature or 0 if there is no future day with a warmer temperature. n = len(temperatures) answer = [0] * n stack = [] # This will store indices of the temperatures for current_day, current_temp in enumerate(temperatures): # Maintain the stack in decreasing temperature order while stack and temperatures[stack[-1]] < current_temp: previous_day = stack.pop() answer[previous_day] = current_day - previous_day stack.append(current_day) return answer"},{"question":"You are given a singly linked list, where each node contains an integer value. Your task is to partition the singly linked list around a given value x, such that all nodes with values less than x come before nodes with values greater than or equal to x. The partitioning should maintain the relative order of the nodes in each of the two partitions. You should do this in-place without altering the values of the nodes or creating any new nodes; you may only change the next pointers of the nodes. Write a function `partitionList(head, x)` that takes the head node of the linked list and an integer x as input, and returns the head node of the modified linked list. # Function Signature ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def partitionList(head: ListNode, x: int) -> ListNode: # Your code here ``` # Example ```python # Example 1: # Input: head = 1 -> 4 -> 3 -> 2 -> 5 -> 2, x = 3 # Output: 1 -> 2 -> 2 -> 4 -> 3 -> 5 # Example 2: # Input: head = 2 -> 1, x = 2 # Output: 1 -> 2 ``` # Constraints - The number of nodes in the list is in the range [0, 200]. - -100 <= Node.val <= 100 - -200 <= x <= 200","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def partitionList(head: ListNode, x: int) -> ListNode: Partitions the linked list around the value x. if not head: return head less_head = ListNode(0) less = less_head greater_head = ListNode(0) greater = greater_head while head: if head.val < x: less.next = head less = less.next else: greater.next = head greater = greater.next head = head.next greater.next = None # Ensure the end of the list less.next = greater_head.next # Combine the two lists return less_head.next"},{"question":"Aliens have landed on Earth and are fascinated by human science! They decided to learn more about Earth\'s geometry and have given a puzzling task to humans to see how well they understand it. You are given a list of coordinates representing points in a 2D plane. Your task is to find out if these points can form a rectangle with sides parallel to the x and y axes. The first line of input contains a single integer n (1 ≤ n ≤ 10^5) – the number of points provided. The next n lines each contain two integers x and y (−10^9 ≤ x, y ≤ 10^9) – the coordinates of the points. Print \\"YES\\" if these points can form a rectangle with sides parallel to the x and y axes. Otherwise, print \\"NO\\". # Examples **Input 1:** ``` 4 0 0 0 1 1 0 1 1 ``` **Output 1:** ``` YES ``` **Input 2:** ``` 4 0 0 0 2 2 0 2 1 ``` **Output 2:** ``` NO ``` # Explanation In the first example, the points (0, 0), (0, 1), (1, 0), and (1, 1) can form a rectangle with sides parallel to the x and y axes. In the second example, the points do not form a rectangle with sides parallel to the x and y axes.","solution":"def can_form_rectangle(points): Determines if given points can form a rectangle with sides parallel to x and y axes. :param points: List of tuples containing coordinates (x, y) :return: \\"YES\\" if points can form a rectangle, otherwise \\"NO\\" if len(points) != 4: return \\"NO\\" x_coords = set() y_coords = set() for x, y in points: x_coords.add(x) y_coords.add(y) if len(x_coords) == 2 and len(y_coords) == 2: return \\"YES\\" else: return \\"NO\\""},{"question":"In a 2D grid with n rows and m columns, each cell contains a positive integer representing the height at that point. You are given the coordinates of two points (x1, y1) and (x2, y2) in the grid. Your task is to determine the minimum height difference path from (x1, y1) to (x2, y2). The height difference path between two cells is defined by the absolute difference between the heights of those two cells. The minimum height difference path is the path from (x1, y1) to (x2, y2) that minimizes the maximum height difference encountered between any two consecutive cells in the path. You can move to any of the four directions (up, down, left, right) from a cell, and you must stay within the grid boundaries. Return the minimum height difference of the path from (x1, y1) to (x2, y2). The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns, respectively. Each of the next n lines contains m integers, where each integer is between 1 and 10^9, representing the heights of the cells in the grid. The last line contains four integers, x1, y1, x2, y2 (1 ≤ x1, x2 ≤ n, 1 ≤ y1, y2 ≤ m), representing the coordinates of the start and end points. Output should contain a single integer — the minimum height difference of the path from (x1, y1) to (x2, y2). For instance, in a 3x3 grid with heights: 3 4 6 1 3 5 2 4 3 And given x1=1, y1=1, x2=3, y2=3, the minimum height difference path would involve moving such that the maximum height difference between consecutive cells is minimized. Suppose the path chooses cells in the order (1, 1) -> (2, 2) -> (3, 3), the height differences would be |3-3| = 0 and |4-3| = 1, so the resulting path\'s maximum height difference would be 1.","solution":"import heapq def min_height_difference_path(n, m, grid, x1, y1, x2, y2): Returns the minimum height difference path from (x1, y1) to (x2, y2) in the given grid. def neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: yield nx, ny def dijkstra(grid, start, end): n, m = len(grid), len(grid[0]) heap = [(0, start[0], start[1])] dist = [[float(\'inf\')] * m for _ in range(n)] dist[start[0]][start[1]] = 0 while heap: max_diff, x, y = heapq.heappop(heap) if (x, y) == end: return max_diff for nx, ny in neighbors(x, y): new_diff = max(max_diff, abs(grid[x][y] - grid[nx][ny])) if new_diff < dist[nx][ny]: dist[nx][ny] = new_diff heapq.heappush(heap, (new_diff, nx, ny)) return -1 start = (x1 - 1, y1 - 1) end = (x2 - 1, y2 - 1) return dijkstra(grid, start, end)"},{"question":"You are given an integer array `arr` consisting of `n` positive integers. You need to determine if it\'s possible to partition the array into two non-empty subsets such that the sum of the elements in both subsets is equal. If it\'s possible, output \\"YES\\", otherwise output \\"NO\\". The function should be efficient enough to handle the following constraints: - `1 <= n <= 200` - `1 <= arr[i] <= 1000` The input will be provided as follows: - The first line contains an integer `t` (the number of test cases). - Each of the next `t` lines contains: - The first integer `n` (size of the array) - Followed by `n` integers representing the elements of the array. Output: For each test case, output \\"YES\\" if it\'s possible to partition the array into two subsets with equal sums, otherwise output \\"NO\\". # Example **Input**: ``` 2 4 1 5 11 5 3 1 3 5 ``` **Output**: ``` YES NO ``` In the first test case, the array can be partitioned as `[1, 5, 5]` and `[11]` with both having a sum of `11`. In the second test case, it\'s impossible to partition the array into subsets with equal sums.","solution":"def can_partition(arr): Determines if the array can be partitioned into two subsets with equal sum. total_sum = sum(arr) # If total sum is odd, it cannot be partitioned into two equal subsets if total_sum % 2 != 0: return \\"NO\\" target_sum = total_sum // 2 n = len(arr) # Create a DP array to store results of the subset sums dp = [False] * (target_sum + 1) dp[0] = True # We can always make the sum 0 (by taking no elements) for num in arr: # Traverse backwards to avoid overwriting previous results for i in range(target_sum, num - 1, -1): if dp[i - num]: dp[i] = True return \\"YES\\" if dp[target_sum] else \\"NO\\" def solve_partition_problem(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1:] results.append(can_partition(arr)) return results"},{"question":"You are given an array of integers a consisting of n elements. Your task is to determine the sum of all possible distinct pairs in the array. More formally, for each distinct pair of indices (i, j) such that 1 leq i < j leq n, compute the sum a_i + a_j and return the sum of all these sums. # Input - The first line contains a single integer n (2 leq n leq 1000) — the number of elements in the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6) — the elements of the array. # Output - Output a single integer, the sum of all possible distinct pairs\' sums. # Example Input ``` 4 1 2 3 4 ``` Output ``` 20 ``` # Explanation All distinct pairs and their sums are: - (1, 2), sum = 1 + 2 = 3 - (1, 3), sum = 1 + 3 = 4 - (1, 4), sum = 1 + 4 = 5 - (2, 3), sum = 2 + 3 = 5 - (2, 4), sum = 2 + 4 = 6 - (3, 4), sum = 3 + 4 = 7 Adding these sums together gives 3 + 4 + 5 + 5 + 6 + 7 = 30.","solution":"def sum_of_all_pairs(n, a): Returns the sum of all possible distinct pairs\' sums in the array. total_sum = 0 for i in range(n): for j in range(i + 1, n): total_sum += a[i] + a[j] return total_sum"},{"question":"You are running a bookstore and want to create a software system to manage your inventory. The system needs to track the arrival and sale of books. Each book has a unique identifier, a title, an author, and a number of copies in stock. You need to implement a function to process a sequence of operations and manage the inventory accordingly. The operations fall into three categories: 1. **Add a book**: When a book arrives, add it to the inventory. If the book already exists, increase the number of copies. 2. **Sell a book**: When a book is sold, decrease the number of copies in stock. If there are not enough copies to fulfill the order, do nothing. 3. **Query the inventory**: Print the entire inventory of books in any order, displaying the book identifier, title, author, and number of copies in stock. The input consists of a series of commands. Each command will be on a separate line and may be one of the following: - `ADD <identifier> <title> <author> <copies>`: Adds the book with the given number of copies to the inventory. - `SELL <identifier> <copies>`: Sells the specified number of copies of the book with the given identifier. - `QUERY`: Prints the inventory as described above. Your program should end processing when it encounters the command `END`. # Example: Input: ``` ADD 1 \\"The Great Gatsby\\" \\"F. Scott Fitzgerald\\" 5 ADD 2 \\"To Kill a Mockingbird\\" \\"Harper Lee\\" 3 SELL 1 2 QUERY END ``` Output: ``` 1 \\"The Great Gatsby\\" \\"F. Scott Fitzgerald\\" 3 2 \\"To Kill a Mockingbird\\" \\"Harper Lee\\" 3 ``` **Explanation**: - Two books are added to the inventory. - Two copies of \\"The Great Gatsby\\" are sold. - The `QUERY` command prints the inventory. - The program stops processing upon encountering `END`.","solution":"def process_commands(commands): inventory = {} for command in commands: parts = command.split(\' \', 2) action = parts[0] if action == \'ADD\': identifier, details = parts[1], parts[2] title, author, copies = eval(details) if identifier in inventory: inventory[identifier][\'copies\'] += copies else: inventory[identifier] = {\'title\': title, \'author\': author, \'copies\': copies} elif action == \'SELL\': identifier, copies = parts[1], int(parts[2]) if identifier in inventory and inventory[identifier][\'copies\'] >= copies: inventory[identifier][\'copies\'] -= copies elif action == \'QUERY\': for identifier, details in inventory.items(): print(f\'{identifier} \\"{details[\\"title\\"]}\\" \\"{details[\\"author\\"]}\\" {details[\\"copies\\"]}\') elif action == \'END\': break"},{"question":"Polycarp loves treasure hunting. He has discovered a grid of size n times m that contains treasures and traps. Each cell in the grid either contains a treasure, a trap, or is empty. A treasure has a positive integer value, while a trap has a negative integer value. Empty cells are represented by zero. Polycarp can move right or down starting from the top-left corner of the grid until he reaches the bottom-right corner. As he moves over each cell, he collects the value in that cell. For every treasure he collects, his total score increases by that value. For every trap he steps on, his total score decreases by that value. If his score ever becomes negative during the journey, Polycarp loses immediately. Polycarp always starts with a score of zero. Your task is to help Polycarp find out if there is a path from the top-left to the bottom-right corner where his score does not become negative at any point during the journey. If such a path exists, print \\"YES\\" followed by the path taken in the format (x1, y1) -> (x2, y2) -> ... -> (xn, yn). If no such path exists, print \\"NO\\". # Input - The first line contains two integers n and m (1 leq n, m leq 100) — the number of rows and columns in the grid. - The next n lines contain m integers each, where the j-th integer in the i-th line represents the value of the cell (i, j). Positive values represent treasures, negative values represent traps, and zero represents empty cells. # Output - If there exists a valid path from the top-left corner to the bottom-right corner where Polycarp\'s score never goes negative, print \\"YES\\" followed by the sequence of coordinates visited. - If no such path exists, print \\"NO\\". # Example Input ``` 3 3 1 -2 1 0 2 -1 1 0 5 ``` Output ``` YES (1, 1) -> (2, 1) -> (2, 2) -> (2, 3) -> (3, 3) ```","solution":"def find_safe_path(n, m, grid): from collections import deque # Define directions: right and down directions = [(0, 1), (1, 0)] # BFS Queue with initial point (0,0), initial score 0, and the path queue = deque([(0, 0, 0, [(1, 1)])]) visited = set([(0, 0)]) while queue: x, y, score, path = queue.popleft() # Check if we reached the bottom-right corner if x == n - 1 and y == m - 1: return \\"YES\\", path # Explore neighbours for dx, dy in directions: new_x, new_y = x + dx, y + dy # Check boundaries if 0 <= new_x < n and 0 <= new_y < m: new_score = score + grid[new_x][new_y] # Ensure the score never goes negative if new_score >= 0 and (new_x, new_y) not in visited: visited.add((new_x, new_y)) new_path = path + [(new_x + 1, new_y + 1)] # adjust path to 1-indexed queue.append((new_x, new_y, new_score, new_path)) return \\"NO\\", [] def treasure_hunt(n, m, grid): result, path = find_safe_path(n, m, grid) if result == \\"YES\\": return f\\"YESn\\" + \\" -> \\".join(map(str, path)) else: return \\"NO\\""},{"question":"You are given a string containing only characters \'A\' and \'B\'. You want to split this string into the minimum number of substrings such that no two consecutive substrings are identical. For example, if the string is \\"AABBABA\\", you could split the string into \\"AA\\", \\"BB\\", \\"A\\", \\"BA\\", resulting in four substrings. No two consecutive substrings in this partition are identical. Write a function `min_steps_to_split_string` that takes a string `s` as input and returns the minimum number of substrings that can be formed such that no two consecutive substrings are identical. # Input The input is a single string `s` of length between 1 and 1000. The string contains only the characters \'A\' and \'B\'. # Output Output the minimum number of substrings needed to split the string such that no two consecutive substrings are identical. # Example Input: ``` AAAABBBBAA ``` Output: ``` 3 ``` Input: ``` ABABAB ``` Output: ``` 6 ``` Input: ``` BBBBBB ``` Output: ``` 1 ```","solution":"def min_steps_to_split_string(s): Returns the minimum number of substrings that can be formed such that no two consecutive substrings are identical. if not s: return 0 count = 1 for i in range(1, len(s)): if s[i] != s[i - 1]: count += 1 return count"},{"question":"Aria loves playing with number sequences. She has recently become fascinated with the game of sub-array sums. Help her figure out how to play her new favorite game! Given an array of integers, Aria wants to find the length of the smallest sub-array (contiguous part) where the sum of its elements is greater than or equal to a given value, S. If there are no such sub-arrays, return 0. # Function Signature ```python def min_sub_array_len(target: int, nums: List[int]) -> int: pass ``` # Input: - `target` (integer): The value S that the sum of the sub-array elements needs to equal or exceed. (1 ≤ target ≤ 10^9) - `nums` (list of integers): The list of integers which forms the array A. (0 ≤ len(nums) ≤ 10^5, -10^4 ≤ nums[i] ≤ 10^4) # Output: - Return the length of the smallest sub-array whose sum is greater than or equal to the target value. If no such sub-array exists, return 0. # Example: ```python assert min_sub_array_len(7, [2,3,1,2,4,3]) == 2 # The sub-array [4, 3] has the minimal length of 2 assert min_sub_array_len(15, [1,2,3,4,5]) == 5 # The sum of the entire array is 15, which equals the target assert min_sub_array_len(100, [1,2,3,4,5]) == 0 # There is no such sub-array ```","solution":"from typing import List def min_sub_array_len(target: int, nums: List[int]) -> int: Returns the length of the smallest sub-array where the sum of its elements is greater than or equal to target. If no such sub-array exists, return 0. n = len(nums) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= target: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"A software company is developing a task management software that allows users to schedule tasks over several days. Each task has a specific priority — an integer from 1 to m. During the planning, tasks are arranged in a sequence where the i-th task is described by its priority pi. It is guaranteed that each priority from 1 to m occurs at least once in the sequence of tasks. Emma, a project manager, needs to relax after work. To do so, she decides to skip all tasks of a specific priority during her workday to reduce stress. She wants to minimize the number of days on which she has interruptions between tasks with different priorities. Emma wishes to determine which priority to skip to minimize the total number of disruptions. A disruption occurs when she moves from a task of one priority to a task of another priority in her schedule. The first line of the input contains two integers n and m (2 ≤ m ≤ n ≤ 100,000) where n is the number of tasks and m is the number of unique priorities. The second line of the input contains a sequence of n positive integers p1, p2, ..., pn (1 ≤ pi ≤ m), where pi is the priority of the i-th task. It is guaranteed that each number from 1 to m occurs at least once in this sequence. Print a single integer — the priority of tasks to skip such that the total number of disruptions is minimized. If there are multiple valid answers, print the smallest priority number. Example: Input: 9 3 3 3 1 2 2 3 3 2 1 Output: 3 Explanation: - If Emma skips tasks of priority 1, the sequence 3, 3, 2, 2, 3, 3, 2 remains, which results in 2 disruptions. - If Emma skips tasks of priority 2, the sequence 3, 3, 1, 3, 3, 1 remains, which results in 2 disruptions. - If Emma skips tasks of priority 3, the sequence 1, 2, 2, 2, 2, 1 remains, which results in 1 disruption. In this case, skipping priority 3 minimizes the disruptions.","solution":"def minimize_disruptions(n, m, priorities): from collections import defaultdict disruptions_count_by_priority = defaultdict(int) for skip_priority in range(1, m + 1): last_priority = None disruptions_count = 0 for p in priorities: if p == skip_priority: continue if last_priority is None: last_priority = p else: if last_priority != p: disruptions_count += 1 last_priority = p disruptions_count_by_priority[skip_priority] = disruptions_count # Find the priority with the minimum disruptions, taking the smallest priority if there are ties min_disruptions = float(\'inf\') best_priority = -1 for priority, disruptions in disruptions_count_by_priority.items(): if disruptions < min_disruptions or (disruptions == min_disruptions and priority < best_priority): min_disruptions = disruptions best_priority = priority return best_priority"},{"question":"A new fitness startup, \\"FitPaths,\\" offers a unique way of tracking user workouts in a rectangular grid. To keep users motivated, the company has devised a challenge: calculate the total number of unique paths a user can take starting from the top-left corner to the bottom-right corner of the grid. The grid has `n` rows and `m` columns. Users can only move either right or down from any cell. However, some cells in the grid contain obstacles that block the user\'s path. A cell with an obstacle cannot be stepped on and effectively renders any paths passing through it as invalid. Your task is to write a program that takes: - An integer `t` representing the number of test cases. - For each test case, the first line contains two integers `n` and `m` denoting the number of rows and columns in the grid. - The next `n` lines each contain `m` characters, where each character is either `.` representing an open cell or `x` representing an obstacle. The program should output the total number of unique paths from the top-left corner to the bottom-right corner of the grid for each test case. If there is no valid path, output `0`. # Input - The first line contains a single integer `t` (1 ≤ t ≤ 50) — the number of test cases. - The first line of each test case contains two integers `n` and `m` (1 ≤ n, m ≤ 100). - The next `n` lines of each test case contain `m` characters (`.` or `x`). # Output - For each test case, print the total number of unique paths from the top-left corner to the bottom-right corner. # Example **Input:** ``` 2 3 3 . . . . x . . . . 2 2 . x x . ``` **Output:** ``` 2 0 ``` **Explanation:** - For the first test case, there are two valid paths: 1. Right → Down → Down → Right 2. Down → Right → Right → Down - For the second test case, there is no valid path due to obstacles blocking the way.","solution":"def num_paths_with_obstacles(t, test_cases): results = [] for case in test_cases: n, m, grid = case if grid[0][0] == \'x\' or grid[n-1][m-1] == \'x\': results.append(0) continue dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'x\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] results.append(dp[n-1][m-1]) return results # Example usage: # t = 2 # test_cases = [ # (3, 3, [[\'.\', \'.\', \'.\'], [\'.\', \'x\', \'.\'], [\'.\', \'.\', \'.\']]), # (2, 2, [[\'.\', \'x\'], [\'x\', \'.\']]) # ] # print(num_paths_with_obstacles(t, test_cases))"},{"question":"You have a sequence of parentheses and you need to determine if it\'s balanced. A sequence of parentheses is considered balanced if every opening parenthesis has a corresponding closing parenthesis in the correct order. For example: - The sequence \\"()\\" is balanced. - The sequence \\")(\\" is not balanced. - The sequence \\"(()())\\" is balanced. - The sequence \\"(()\\" is not balanced. Given a string `s` consisting only of characters \'(\' and \')\', your task is to write a function that returns `True` if the sequence is balanced, and `False` otherwise. # Input - The input is a single string `s` (1 ≤ |s| ≤ 1000) consisting of characters \'(\' and \')\'. # Output - The output should be a single boolean value: `True` if the sequence is balanced, and `False` otherwise. # Example ```python def is_balanced(s: str) -> bool: # Your code here # Test cases print(is_balanced(\\"()\\")) # Output: True print(is_balanced(\\")(\\")) # Output: False print(is_balanced(\\"(()())\\")) # Output: True print(is_balanced(\\"(()\\")) # Output: False ``` # Notes - A balanced sequence requires every opening parenthesis `(` to have a corresponding closing parenthesis `)` and they must be properly nested. # Constraints - 1 ≤ |s| ≤ 1000","solution":"def is_balanced(s: str) -> bool: Returns True if the sequence of parentheses is balanced, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Little Tanya is playing with a sequence of n blocks, each of which has a non-negative height. She can perform exactly one operation: choose any block and increase its height by 1. Tanya wants to make all the heights in the sequence even. She wants to know the minimum number of operations she needs to perform to achieve this goal. Help her determine this number. The first line contains a single integer n (1 ≤ n ≤ 10^5) – the number of blocks in the sequence. The second line contains n integers h1, h2, ..., hn (0 ≤ hi ≤ 10^9) – the height of each block. Output the minimum number of operations required to make all the heights even. **Examples:** Input: ``` 3 1 2 3 ``` Output: ``` 2 ``` Input: ``` 5 5 9 12 14 18 ``` Output: ``` 3 ``` **Explanation:** In the first example: - Block 1 has height 1, so we need 1 operation to increase it to 2. - Block 3 has height 3, so we need 1 operation to increase it to 4. In the second example: - Block 1 has height 5, so we need 1 operation to increase it to 6. - Block 2 has height 9, so we need 1 operation to increase it to 10. - Block 3 has height 12, so no operations are needed. - Block 4 has height 14, so no operations are needed. - Block 5 has height 18, so no operations are needed. Therefore, the minimum number of operations required in both examples are 2 and 3 respectively.","solution":"def min_operations_to_even_heights(n, heights): Given a number of blocks n and their respective heights, returns the minimum number of operations needed to make all heights even by increasing them. :param n: number of blocks :param heights: List of integers representing the heights of the blocks :return: Minimum number of operations needed to make all heights even return sum(1 for height in heights if height % 2 != 0)"},{"question":"Amara is managing a smart irrigation system for a series of interconnected gardens. Each garden can be represented as a node, and the connections between them are represented as bidirectional edges. The irrigation system needs to ensure that water can flow between any two gardens. To maintain system efficiency, Amara wants to determine the minimum number of edges that should be added to make the entire network of gardens fully connected. Given an initial set of connected gardens and connections, where some gardens might already be directly or indirectly connected, help Amara calculate the minimum number of additional connections required to achieve full connectivity. The first line contains two integers, n and m (1 leq n leq 1000, 0 leq m leq n cdot (n-1)/2) — the number of gardens (nodes) and the number of existing connections (edges), respectively. The following m lines each contain two integers u and v (1 le u, v le n, u neq v) — indicating that there is an initial bidirectional connection between gardens u and v. Output a single integer representing the minimum number of additional connections required to make the garden network fully connected. If the network is already fully connected, output 0. **Example:** Input: ``` 5 2 1 2 3 4 ``` Output: ``` 2 ``` In this example, the network isn’t initially fully connected. By adding two more connections, such as (2, 3) and (4, 5), the network becomes fully connected. Therefore, Amara needs to add 2 more edges.","solution":"def find_min_edges_to_connect(n, m, edges): # Helper function to perform a DFS to find connected components def dfs(node, visited, adjacency_list): stack = [node] while stack: current = stack.pop() if current not in visited: visited.add(current) stack.extend(adjacency_list[current] - visited) if n == 1: return 0 # Create adjacency list adjacency_list = {i: set() for i in range(1, n + 1)} for u, v in edges: adjacency_list[u].add(v) adjacency_list[v].add(u) visited = set() components = 0 # Find all connected components for i in range(1, n + 1): if i not in visited: dfs(i, visited, adjacency_list) components += 1 # The minimum number of edges needed to connect the graph fully is components - 1 return components - 1"},{"question":"You are working on a project where you need to process information about regions and their neighboring relationships. You are given a map with `n` regions, and some of these regions are connected by roads. Each road connects exactly two regions and is bidirectional. Your task is to determine the number of unique configurations for selecting `m` regions such that all the selected `m` regions are directly or indirectly connected to each other (forming a connected subgraph). Each region must be part of only one connected component in any configuration. Since the number of configurations can be very large, return the answer modulo 1000000007 (10^9 + 7). The input consists of: - The first line contains two integers `n` and `m` (1 ≤ m ≤ n ≤ 200, 0 ≤ e ≤ (n*(n−1))/2) — the number of regions and the number of regions to select. - The following `e` lines each contain two integers `a` and `b` (1 ≤ a, b ≤ n, a ≠ b) indicating there is a road connecting region `a` and region `b`. Output the number of unique configurations modulo 1000000007. # Example Input ``` 5 2 1 2 2 3 4 5 ``` Output ``` 4 ``` Explanation: There are 4 possible configurations to select 2 regions such that they form a connected subgraph: 1. Selecting regions 1 and 2. 2. Selecting regions 2 and 3. 3. Selecting regions 1 and 3 (since 1-2-3 are connected). 4. Selecting regions 4 and 5. Note that the direct connection between regions is mandatory for the subgraph to be considered connected in any selected configuration.","solution":"def count_unique_configurations(n, m, edges): MOD = 1000000007 from itertools import combinations def find(parent, x): if parent[x] != x: parent[x] = find(parent, parent[x]) return parent[x] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 # Initialize disjoint set parent = list(range(n)) rank = [0] * n # Create graph through union-find for edge in edges: union(parent, rank, edge[0] - 1, edge[1] - 1) # Now, for each connected component, count the possible m-size combinations from collections import defaultdict component_size = defaultdict(int) for i in range(n): component_size[find(parent, i)] += 1 result = 0 from math import comb for size in component_size.values(): if size >= m: result = (result + comb(size, m)) % MOD return result"},{"question":"You are given an array of integers representing the number of minutes you have to study each day. Every week consists of exactly 7 days. You want to find the week (indexing starts at 1) during which you study the maximum number of minutes. If there are multiple such weeks, return the earliest one. The first line contains a single integer d (1 le d le 10^6) — the number of days you have planned to study. The second line contains d integers separated by spaces, where the i-th integer represents the number of minutes you plan to study on the i-th day. It is guaranteed that d is a multiple of 7. Print the 1-based index of the week during which you study the maximum number of minutes. In the first example, your study plan spans over 14 days. The total study minutes for the first week is 7, and for the second week is 35. Thus, the answer is 2. In the second example, each week you study 0 minutes, so any week (the first one, for instance) is correct. Hence, the answer is 1.","solution":"def find_max_study_week(d, minutes_list): Given the number of days and the list of study minutes per day, this function returns the 1-based index of the week during which the maximum number of minutes were studied. weeks = d // 7 max_minutes = 0 best_week = 1 for week in range(weeks): weekly_minutes = sum(minutes_list[week * 7:(week + 1) * 7]) if weekly_minutes > max_minutes: max_minutes = weekly_minutes best_week = week + 1 return best_week"},{"question":"You are given a list of integers. In one operation, you can choose any two integers from the list and remove both of them, then insert their sum back into the list. This operation can be performed any number of times until you have only one integer left in the list. Your task is to determine if it\'s possible to make all the remaining values in the list equal after performing any number of these operations. The first line contains a single integer n (1 le n le 10^5) - the number of integers in the list. The second line contains n integers separated by spaces. All integers are between 1 and 10^6. If it\'s possible to make all remaining values equal, print \\"YES\\". Otherwise, print \\"NO\\". # Examples Example 1 Input: ``` 3 1 2 2 ``` Output: ``` NO ``` Example 2 Input: ``` 4 4 4 4 4 ``` Output: ``` YES ``` Example 3 Input: ``` 5 10 20 10 20 20 ``` Output: ``` NO ``` # Explanation In the first example, there is no way to combine the integers to make them equal. In the second example, all integers are already equal. In the third example, it is not possible to make all the integers equal through any number of operations. **Note**: The list of integers is given in one line, so you should handle reading them as such.","solution":"def can_make_equal(n, arr): Determines if it\'s possible to make all the remaining values in the list equal after performing the given operation any number of times. Parameters: n (int): Number of integers in the list arr (list of int): The list of integers Returns: str: \'YES\' if it\'s possible, otherwise \'NO\' return \\"YES\\" if max(arr) - min(arr) == 0 else \\"NO\\""},{"question":"Alex has a rectangular garden of dimensions n × m, divided into unit cells. Initially, all cells are fertile. However, over time, certain cells become infertile due to various reasons like pests or overuse. Alex wants to keep track of how many fertile cells remain in the garden after observing multiple infertility updates. You are given the initial dimensions of the garden and multiple observations, each specifying a single cell that becomes infertile. For each observation, you need to determine the number of fertile cells left in the garden. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100,000) — the dimensions of the garden. The next line contains an integer k (1 ≤ k ≤ 100,000) — the number of observations. Each of the next k lines contains two integers xi and yi (1 ≤ xi ≤ n, 1 ≤ yi ≤ m) — the row and the column of the cell that becomes infertile at the ith observation. It is guaranteed that no cell will be marked infertile more than once. Print k integers. The ith integer should be equal to the number of fertile cells remaining after the ith observation. Example: Input: 5 5 3 1 1 3 3 5 5 Output: 24 23 22 Explanation: - Initially, all 25 cells are fertile. - After the first observation (1, 1) becomes infertile: 24 fertile cells remain. - After the second observation (3, 3) becomes infertile: 23 fertile cells remain. - After the third observation (5, 5) becomes infertile: 22 fertile cells remain.","solution":"def count_fertile_cells(n, m, observations): fertile_cells_count = n * m results = [] infertile_set = set() for obs in observations: if obs not in infertile_set: infertile_set.add(obs) fertile_cells_count -= 1 results.append(fertile_cells_count) return results"},{"question":"HackerLang is a brand new programming language that has been created to help in data processing tasks. The language has only two commands: - \\"INCREMENT X\\": Increases the value of a variable X by 1. If X does not exist, it gets created with an initial value of 1. - \\"DECREMENT X\\": Decreases the value of a variable X by 1. It is guaranteed that the value of X will never be decremented below 0. Your task is to write a function that processes a list of commands and returns the final values of all variables in lexicographical order of their names. # Function Signature: ```python def process_commands(commands: List[str]) -> List[Tuple[str, int]]: ``` # Input: - `commands` (1 ≤ len(commands) ≤ 10^5): A list of strings, each containing a command (\\"INCREMENT X\\" or \\"DECREMENT X\\"). # Output: - A list of tuples where each tuple contains a variable name and its final value, sorted lexicographically by variable name. # Example: ```python commands = [ \\"INCREMENT A\\", \\"INCREMENT B\\", \\"INCREMENT A\\", \\"DECREMENT B\\", \\"INCREMENT C\\" ] print(process_commands(commands)) ``` # Output: ```python [(\\"A\\", 2), (\\"B\\", 0), (\\"C\\", 1)] ``` # Explanation: - After processing the commands, the variable `A` has been incremented twice, resulting in 2. - The variable `B` has been incremented once and then decremented once, resulting in 0. - The variable `C` has been incremented once, resulting in 1. - The final result is returned in lexicographical order of the variable names.","solution":"from typing import List, Tuple def process_commands(commands: List[str]) -> List[Tuple[str, int]]: variable_dict = {} for command in commands: action, variable = command.split() if action == \\"INCREMENT\\": if variable in variable_dict: variable_dict[variable] += 1 else: variable_dict[variable] = 1 elif action == \\"DECREMENT\\": if variable in variable_dict: variable_dict[variable] = max(variable_dict[variable] - 1, 0) else: variable_dict[variable] = 0 sorted_variables = sorted(variable_dict.items()) return sorted_variables"},{"question":"Given an array of integers and a series of operations, you need to determine the final configuration of the array after performing all the specified operations. Each operation is defined by three integers: start, end, and increment. For a given operation, the segment of the array from index start to index end (inclusive) will have the value increment added to each of its elements. Your task is to output the array after all operations have been applied. # Input Format: - The first line contains an integer n (1 ≤ n ≤ 105), the size of the initial array. - The second line contains n space-separated integers, representing the elements of the initial array. - The third line contains an integer m (1 ≤ m ≤ 105), the number of operations. - The next m lines each contain three integers, start, end, and increment (1 ≤ start ≤ end ≤ n, -1000 ≤ increment ≤ 1000). # Output Format: - Output a single line with n space-separated integers, representing the final state of the array after applying all the operations. # Example: Input: ``` 5 1 2 3 4 5 3 1 3 2 2 4 -1 5 5 10 ``` Output: ``` 3 3 4 3 15 ``` # Explanation: - After the first operation (1 3 2), the array becomes [3, 4, 5, 4, 5]. - After the second operation (2 4 -1), the array becomes [3, 3, 4, 3, 5]. - After the third operation (5 5 10), the array becomes [3, 3, 4, 3, 15]. Ensure your solution is efficient and appropriately handles the upper constraints.","solution":"def apply_operations(n, array, m, operations): Apply a series of operations on the array. Parameters: n (int): Size of the array array (list of int): The initial array m (int): Number of operations operations (list of tuples): Each tuple contains (start, end, increment) Returns: list of int: Final state of the array after applying all operations # To handle range update efficiently, we use a difference array diff_array = [0] * (n + 1) for op in operations: start, end, increment = op diff_array[start - 1] += increment if end < n: diff_array[end] -= increment # Apply the difference array to get the final array current_increment = 0 for i in range(n): current_increment += diff_array[i] array[i] += current_increment return array"},{"question":"A robot is programmed to move in a 2D grid starting from the origin (0,0). The robot can receive a sequence of commands to move north, south, east, or west. However, due to a malfunction, the robot adds an additional action at the end of the sequence, which is always a move north (\'N\'). You need to determine the final position of the robot after executing the given sequence of commands including the additional north move. The commands are given as a string where each character represents a direction: - \'N\' for north (increase the y-coordinate by 1) - \'S\' for south (decrease the y-coordinate by 1) - \'E\' for east (increase the x-coordinate by 1) - \'W\' for west (decrease the x-coordinate by 1) The input consists of a single string s (1 ≤ |s| ≤ 1000), which is a sequence of the initial commands the robot must follow. Print two integers x and y, representing the final coordinates of the robot after executing the entire sequence including the additional north move. **Example:** ``` Input: ENSES Output: 1 2 Explanation: The robot starts at (0,0). Initial sequence ENSES moves the robot as follows: E -> (1,0) N -> (1,1) S -> (1,0) E -> (2,0) S -> (2,-1) After the initial sequence, an additional \'N\' move: N -> (2,0) Therefore, the final position is (2,0). ```","solution":"def final_position(commands): Determines the final position of the robot after executing the given sequence of commands including the additional north move. Args: commands (str): A sequence of the initial commands the robot must follow. Returns: tuple: The final coordinates of the robot (x, y). x, y = 0, 0 for char in commands: if char == \'N\': y += 1 elif char == \'S\': y -= 1 elif char == \'E\': x += 1 elif char == \'W\': x -= 1 # Adding the additional move north (\'N\') y += 1 return x, y"},{"question":"You are given two strings, s1 and s2, with a maximum length of 1000 characters each. Determine the length of the longest common subsequence (LCS) between the two strings. The subsequence does not need to be contiguous, but the order must be maintained. Write a function to find and print the LCS length. Function Signature: ```python def longest_common_subsequence(s1: str, s2: str) -> int: ``` # Input - Two strings s1 and s2, each on a separate line. # Output - A single integer representing the length of the longest common subsequence of s1 and s2. # Examples Example 1: Input: ``` abcde ace ``` Output: ``` 3 ``` (The longest common subsequence is \\"ace\\".) Example 2: Input: ``` abc def ``` Output: ``` 0 ``` (There is no common subsequence, so the length is 0.) # Constraints - 1 ≤ |s1|, |s2| ≤ 1000 # Note The solution should efficiently handle the provided constraints, considering the maximum length of the strings.","solution":"def longest_common_subsequence(s1: str, s2: str) -> int: Returns the length of the longest common subsequence between two strings s1 and s2. n, m = len(s1), len(s2) # Create a 2D table to store lengths of longest common subsequence. dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"You are managing a sequence of tasks that must be executed consecutively. Each task is identified by a unique integer ID, and each task has an associated execution time. Occasionally, tasks need to be executed in a specific order because they rely on the output of previous tasks. You are given dependencies between tasks and your goal is to determine the total execution time if all tasks are executed in a valid order respecting the dependencies. Write a program that computes the total execution time considering the dependencies of tasks. The first line contains one integer n (1 ≤ n ≤ 1000) — the number of tasks. The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 10000) — the execution time of each task. The third line contains one integer m (0 ≤ m ≤ 1000) — the number of dependencies. Each of the next m lines contains two integers x and y (1 ≤ x, y ≤ n) meaning that task x must be completed before task y. Output the total execution time if all tasks are executed in a valid order considering the dependencies. If it\'s impossible to execute tasks due to a circular dependency, output \\"IMPOSSIBLE\\".","solution":"from collections import defaultdict, deque def compute_total_execution_time(n, times, m, dependencies): # Create graph and indegree tracker graph = defaultdict(list) indegree = [0] * (n + 1) # Building the graph and indegree for x, y in dependencies: graph[x].append(y) indegree[y] += 1 # Initialize the queue with tasks that have no prerequisites queue = deque() for i in range(1, n + 1): if indegree[i] == 0: queue.append(i) # Track overall execution time total_time = 0 executed_tasks = 0 while queue: current = queue.popleft() total_time += times[current - 1] executed_tasks += 1 for neighbor in graph[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If not all tasks have been executed, it means there was a circular dependency if executed_tasks != n: return \\"IMPOSSIBLE\\" return total_time # Example usage # n = 3 # times = [3, 2, 1] # m = 2 # dependencies = [(1, 2), (2, 3)] # print(compute_total_execution_time(n, times, m, dependencies)) # Output: 6"},{"question":"In a social media application, there are \'n\' users and \'m\' friendships between them. Each user wants to know how many direct friends they have and how many friends of friends they have who are not direct friends. You are given \'n\' users and \'m\' friendships. Each friendship connects two users bidirectionally, meaning if user A is friends with user B, then user B is also friends with user A. Your task is to calculate for each user the number of their friends and the number of friends of their friends who are not their direct friends. The first line contains integers n (2 ≤ n ≤ 5·105) and m (0 ≤ m ≤ 5·105), the number of users and the number of friendships, respectively. The next m lines each contain two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) describing a friendship between user ui and user vi. Each friendship is unique. For each user from 1 to n, print two integers: the number of direct friends and the number of friends of friends who are not direct friends. Example: Input: ``` 5 4 1 2 1 3 2 3 2 4 ``` Output: ``` 2 1 3 0 2 1 1 2 0 0 ``` Explanation: - User 1 has 2 direct friends (2, 3) and 1 friend of friends (4) who is not a direct friend. - User 2 has 3 direct friends (1, 3, 4) and 0 friends of friends who are not direct friends. - User 3 has 2 direct friends (1, 2) and 1 friend of friends (4) who is not a direct friend. - User 4 has 1 direct friend (2) and 2 friends of friends (1, 3) who are not direct friends. - User 5 has 0 direct friends and 0 friends of friends.","solution":"def social_media_analysis(n, m, friendships): from collections import defaultdict, deque # Construct the friendship graph friends = defaultdict(set) for u, v in friendships: friends[u].add(v) friends[v].add(u) results = [] for user in range(1, n + 1): direct_friends = friends[user] num_direct_friends = len(direct_friends) # Find friends of friends who are not direct friends friends_of_friends = set() for friend in direct_friends: friends_of_friends.update(friends[friend]) # Remove user\'s own friends and user themselves from the friends of friends friends_of_friends.difference_update(direct_friends) friends_of_friends.discard(user) num_friends_of_friends = len(friends_of_friends) results.append((num_direct_friends, num_friends_of_friends)) return results"},{"question":"You are given a binary string `s` of length `n`. A binary string is a string consisting of only \'0\'s and \'1\'s. You are allowed to perform the following operation on the string exactly once: Choose two indices `i` and `j` such that `1 ≤ i ≤ j ≤ n`, and reverse the segment `s[i...j]`. Your task is to determine the minimum number of continuous segments of \'1\'s in the string `s` after performing the operation. For example, if `s = \\"0110101\\"`, the answer is 1 because you can reverse the segment `s[2...5]` to get `s = \\"0011110\\"`, which has just one segment of \'1\'s. The first line of the input contains an integer `t` (1 ≤ t ≤ 10^4) — the number of test cases. The descriptions of the test cases follow. Each test case consists of two lines. The first line contains an integer `n` (1 ≤ n ≤ 100) — the length of the string. The second line contains a binary string `s` of length `n`. For each test case, print the minimum number of continuous segments of \'1\'s in the string `s` after performing the operation for that test case. **Example:** Input: ``` 4 6 001011 5 11111 3 101 1 0 ``` Output: ``` 1 1 1 0 ```","solution":"def min_segments_after_reverse(n, s): Returns the minimum number of continuous segments of \'1\'s in the string s after performing exactly one reverse operation. if \'1\' not in s: return 0 segments = 0 for i in range(1, n): if s[i] == \'1\' and s[i-1] == \'0\': segments += 1 # If the string starts with a \'1\', add one segment. # Or if the string has only zeros, return 0. if s[0] == \'1\': segments += 1 # Minimum segments obtainable is to at least reverse one \'1\' segment completely # or already the minimum segment is 1 return min(segments, 1) def minimize_segments(t, test_cases): results = [] for n, s in test_cases: results.append(min_segments_after_reverse(n, s)) return results"},{"question":"You are given a sequence T consisting of m pairs of integers (c_1, d_1), (c_2, d_2), dots, (c_m, d_m) which represent a series of operations. Each operation can either increase or decrease a given variable by the amount d_i. The objective is to determine the maximum possible value of the variable after performing any number of these operations in any order. You are also given a starting integer value start. Your task is to calculate the maximum possible value of the variable for the given sequence of operations. The first line contains two integers m and start (1 le m le 10^5, -10^9 le start le 10^9) — the number of pairs in sequence T and the initial value of the variable. Next m lines contain pairs of integers c_i and d_i (-10^9 le d_i le 10^9) representing the operations. Print a single integer — the maximum possible value of the variable after performing any number of operations.","solution":"def max_possible_value(m, start, operations): Calculate the maximum possible value of the variable after performing any number of operations in any order. :param m: int - the number of operations :param start: int - the initial value of the variable :param operations: list of tuples [(c1, d1), (c2, d2), ..., (cm, dm)] where each ci is ignored and di indicates the changes :return: int - the maximum possible value of the variable max_increase = 0 for c, d in operations: if d > 0: max_increase += d return start + max_increase"},{"question":"You are given an array of integers and a set of specific operations that you can perform on the array. The operations need to be carried out in a manner such that a target pattern within the array is achieved. More specifically, you are given: - An integer n denoting the size of the array (1 ≤ n ≤ 200,000). - An array of integers arr of size n where each element is (1 ≤ arr[i] ≤ 10^9). - An integer m denoting the size of the subsequence pattern (1 ≤ m ≤ n). - An array of integers pattern of size m where each element is (1 ≤ pattern[i] ≤ 10^9). You need to write a function that determines whether it is possible to achieve the pattern by performing exactly one operation on the array. The operations you are allowed to perform are: 1. Replace any subarray of arr with a single integer which is the sum of the elements in that subarray. The replaced subarray can have a length from 2 to n. Your function should return \\"YES\\" if it is possible to transform the array into the pattern by performing exactly one of the specified operations, and \\"NO\\" otherwise. # Input The function takes four parameters: - `n` (integer): the number of elements in the array. - `arr` (list of integers): the array on which operations are to be performed. - `m` (integer): the number of elements in the target pattern. - `pattern` (list of integers): the desired subsequence pattern. # Output - The function should output a single string: \\"YES\\" or \\"NO\\". # Example ```python def can_transform(n, arr, m, pattern): # Your implementation here # Example print(can_transform(5, [1, 2, 3, 4, 5], 3, [3, 7, 5])) # Output: \\"YES\\" print(can_transform(6, [1, 2, 3, 4, 5, 6], 3, [6, 7, 8])) # Output: \\"NO\\" ``` In the first example, you can achieve the pattern by performing a single operation: - Replace the subarray [1, 2] with their sum 3 to get [3, 3, 4, 5]. - Replace the subarray [3, 4] with their sum 7 to get [3, 7, 5]. In the second example, it is impossible to achieve the pattern by performing exactly one of the specified operations.","solution":"def can_transform(n, arr, m, pattern): # If the target pattern\'s length is greater than 1 and # there is no subarray sum that matches any target value, # return \\"NO\\" right away as we require the exact sum match. if m > 1: subarray_sums = set() # holds all possible subarray sums in arr for i in range(n): prefix_sum = 0 for j in range(i, n): prefix_sum += arr[j] subarray_sums.add(prefix_sum) # We need all elements in `pattern` to exist as subarray sums for num in pattern: if num not in subarray_sums: return \\"NO\\" # If the control reaches here, all pattern elements are achievable return \\"YES\\" # If the target pattern\'s length is 1, check if any subarray sums to it target = pattern[0] for i in range(n): prefix_sum = 0 for j in range(i, n): prefix_sum += arr[j] if prefix_sum == target: return \\"YES\\" return \\"NO\\""},{"question":"The land of CodeLand is structured as a grid with dimensions M x N. The citizens of CodeLand are very interested in finding prime numbers within various subgrids of this large grid. They have chosen you to write a program that can count the number of prime numbers in any subgrid quickly. The grid is filled with non-negative integers. You need to preprocess the grid so that for any query asking for the number of prime numbers in a subgrid defined by its top-left corner (r1, c1) and bottom-right corner (r2, c2), you can answer efficiently. Write a program that first preprocesses the grid and then answers each query regarding the number of prime numbers in a subgrid. # Input - The first line contains two integers M and N (1 ≤ M, N ≤ 100) – the dimensions of the grid. - The next M lines each contain N integers representing the grid. Each integer a_ij (0 ≤ a_ij ≤ 10^6) denotes the value at the ith row and jth column of the grid. - The next line contains an integer Q (1 ≤ Q ≤ 10^4) – the number of queries. - The next Q lines each contain four integers r1, c1, r2, c2 (1 ≤ r1 ≤ r2 ≤ M and 1 ≤ c1 ≤ c2 ≤ N) denoting the top-left and bottom-right corners of a subgrid. # Output For each query, output a single integer representing the count of prime numbers in the defined subgrid. # Example Input ``` 3 3 2 3 5 4 6 8 2 7 11 2 1 1 2 2 2 2 3 3 ``` Output ``` 3 1 ``` # Explanation In the first query, the subgrid from (1,1) to (2,2) includes the values [2, 3, 4, 6]. The prime numbers in this subgrid are 2 and 3. Thus, the answer is 2. In the second query, the subgrid from (2,2) to (3,3) includes the values [6, 8, 7, 11]. The prime number in this subgrid is only 7. Thus, the answer is 1.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def preprocess_prime_count(grid, M, N): prime_count = [[0]*N for _ in range(M)] for i in range(M): for j in range(N): prime_count[i][j] = is_prime(grid[i][j]) if i > 0: prime_count[i][j] += prime_count[i-1][j] if j > 0: prime_count[i][j] += prime_count[i][j-1] if i > 0 and j > 0: prime_count[i][j] -= prime_count[i-1][j-1] return prime_count def query_prime_count(prime_count, r1, c1, r2, c2): total = prime_count[r2-1][c2-1] if r1 > 1: total -= prime_count[r1-2][c2-1] if c1 > 1: total -= prime_count[r2-1][c1-2] if r1 > 1 and c1 > 1: total += prime_count[r1-2][c1-2] return total"},{"question":"You are given an array of integers where each element signifies the height of a pillar. You can rearrange or permute these pillars such that the area covered by the skyline is maximized. The area covered by the skyline is defined as the sum of the heights of the pillars. Calculate the maximum possible area of the skyline after permuting the pillars. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of pillars. The second line contains n integers where each integer h (1 ≤ h ≤ 1,000) represents the height of a pillar. Print one integer — the maximum possible area of the skyline after permuting the pillars.","solution":"def max_area_of_skyline(pillars): Returns the maximum possible area of the skyline after permuting the pillars. The maximum area is simply the sum of the heights of all the pillars. return sum(pillars)"},{"question":"You are given an integer n which represents the length of a sequence of integers. Each integer in the sequence is generated by the formula a_i = (i^2 mod 10) for i from 1 to n (inclusive). Your task is to determine the maximum number of distinct integers that can appear in any contiguous subsequence of the generated sequence. For example, if n = 12, the sequence would be: 1, 4, 9, 6, 5, 6, 9, 4, 1, 0, 1, 4 The longest contiguous subsequence with the maximum number of distinct integers here is 1, 4, 9, 6, 5, 6, 9, 4 which has 5 distinct integers. The first line of input contains a single integer t (1 le t le 100), the number of test cases. Each of the next t lines contains a single integer n (1 le n le 10^5). Output a single integer for each test case — the maximum number of distinct integers that can appear in any contiguous subsequence of the sequence. # Example Input: ``` 2 12 5 ``` Output: ``` 5 3 ``` # Explanation For the first case, the sequence generated is 1, 4, 9, 6, 5, 6, 9, 4, 1, 0, 1, 4. The longest contiguous subsequence with maximum distinct integers is 1, 4, 9, 6, 5, 6, 9, 4, which has 5 unique integers: 1, 4, 9, 6, and 5. For the second case, the sequence generated is 1, 4, 9, 6, 5. The longest contiguous subsequence with maximum distinct integers is the whole sequence: 1, 4, 9, 6, and 5.","solution":"def max_distinct_in_subsequence(n): return min(n, 10) def solve(test_cases): results = [] for n in test_cases: results.append(max_distinct_in_subsequence(n)) return results"},{"question":"Arya is playing a game called Sorted Subsequences with Pari. Pari chooses a positive integer k and tells Arya k but does not tell the entire array. Arya\'s task is to identify if there exists a subsequence of length k in a given array of integers that is strictly increasing. Given an array of n integers, check if it is possible to find a strictly increasing subsequence of length k. The first line of the input contains two integers n and k (1 ≤ n, k ≤ 1,000,000) — the length of the array and the length of the subsequence that Arya wants to find. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the elements of the array. Print \\"Yes\\" (without quotes) if there exists a strictly increasing subsequence of length k, or \\"No\\" (without quotes) otherwise. In the first sample, it is possible to choose the subsequence {1, 2, 3} of length 3 which is strictly increasing. In the second sample, it is not possible to find a strictly increasing subsequence of length 4.","solution":"def can_find_increasing_subsequence(n, k, array): This function checks if there exists a strictly increasing subsequence of length k in the given array of n integers. :param n: Length of the array :param k: Length of the subsequence to find :param array: List of integers :return: \\"Yes\\" if such a subsequence exists, otherwise \\"No\\" if k > n: return \\"No\\" # Function to find the length of longest increasing subsequence def longest_increasing_subsequence_length(arr): from bisect import bisect_left lis = [] for num in arr: pos = bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis) return \\"Yes\\" if longest_increasing_subsequence_length(array) >= k else \\"No\\""},{"question":"In a forest, there are n animals (numbered from 1 to n) and m types of food (numbered from 1 to m). Each animal has a specific dietary requirement — they can eat only certain types of food, and the forest has a limited supply of each food type. However, the animals also have a unique friendship relationship represented as an undirected graph where there are edges indicating friendships between animals. If two animals are friends, they must be given different types of food. You\'re required to design a food distribution strategy that satisfies the dietary requirements of the animals and ensures that no two friends receive the same type of food. The first line of input contains two integers n and f (1 ≤ n ≤ 10^4, 1 ≤ f ≤ 5×10^4) — the number of animals and the number of friendship relationships respectively. The next n lines describe the dietary requirements of each animal: - Each line i (1 ≤ i ≤ n) starts with an integer k (1 ≤ k ≤ m) — the number of food types that animal i can eat, followed by k integers representing the food types. The next f lines contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing that animal u and animal v are friends and must have different types of food. Output a single integer, the minimum number of food types needed to satisfy the dietary and friendship constraints. If it is not possible to distribute the food satisfying all constraints, print -1. ```plaintext Input The first line contains two integers n and f (1 ≤ n ≤ 10^4, 1 ≤ f ≤ 5×10^4). Each of the next n lines contains the dietary requirements of each animal: Each line contains an integer k followed by k integers representing the food types. Each of the next f lines contains two integers u and v representing a friendship between animals u and v. Output Output a single integer — the minimum number of food types needed, or -1 if it\'s not possible. Example: Input: 5 4 2 1 2 2 2 3 2 1 3 1 2 2 1 4 1 2 2 3 4 5 Output: 3 ``` Explanation: There are 5 animals and 4 friendships. The dietary requirements are: - Animal 1 can eat food 1 or food 2. - Animal 2 can eat food 2 or food 3. - Animal 3 can eat food 1 or food 3. - Animal 4 can eat food 2. - Animal 5 can eat food 1 or food 4. The friendships imply the graph constraints on food distribution. The minimum number of foods needed that satisfies all the constraints is 3. If any animal\'s requirements contradict the constraints, the output should be -1.","solution":"def min_food_types(n, f, dietary_reqs, friendships): from collections import defaultdict, deque # Graph representation: adjacency list of friends adj = defaultdict(list) for u, v in friendships: adj[u].append(v) adj[v].append(u) # Function to check if we can assign a food type to an animal def assign_food(animal, food, assigned_foods): for neighbor in adj[animal]: if food == assigned_foods[neighbor]: return False return True # Function to try and assign food types using DFS def dfs(animal): queue = deque([animal]) while queue: current = queue.popleft() for food in dietary_reqs[current - 1]: if assign_food(current, food, assigned_foods): assigned_foods[current] = food break else: return False for neighbor in adj[current]: if not assigned_foods[neighbor]: queue.append(neighbor) return True assigned_foods = [0] * (n + 1) # +1 to handle 1-based indexing for animal in range(1, n + 1): if not assigned_foods[animal]: # If the animal has not been assigned food if not dfs(animal): return -1 unique_foods = len(set(assigned_foods) - {0}) return unique_foods"},{"question":"Given a string s consisting of lowercase English letters, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results. The input string s has a length of at most 10^4. Write a function `remove_duplicates(s: str) -> str` that takes the input string s and returns a string with the duplicate letters removed, ensuring that the result is the smallest in lexicographical order. **Examples:** Input: `s = \\"bcabc\\"` Output: `\\"abc\\"` Input: `s = \\"cbacdcbc\\"` Output: `\\"acdb\\"` **Constraints:** - The input string only contains lowercase English letters. - The length of the input string is at most 10^4.","solution":"def remove_duplicates(s: str) -> str: from collections import Counter stack = [] seen = set() last_occurrence = {char: idx for idx, char in enumerate(s)} for idx, char in enumerate(s): if char not in seen: while stack and char < stack[-1] and idx < last_occurrence[stack[-1]]: removed = stack.pop() seen.remove(removed) stack.append(char) seen.add(char) return \'\'.join(stack)"},{"question":"A company has multiple servers distributed across different cities. Each city has one or more servers, and each server has a capacity that indicates its processing power. Cities are connected by bidirectional roads that allow servers in different cities to communicate. The company wants to optimize the information flow between servers to minimize latency across the network. Given the number of cities (`n`) and roads (`m`), along with the capacity of servers in each city and the information about the roads, your task is to determine the minimum capacity of a server that can be used to establish a connection between any two cities. The connection must use only the roads to communicate, and the capacity of a server in a city represents the maximum amount of data that can be transmitted from that city. You are given: - the number of cities `n` and roads `m` - a list of servers\' capacities in each city - the roads connecting the cities Write a function to calculate the minimum server capacity required to establish a connection between any pair of cities using the least powerful server in the network. # Input - The first line contains two integers `n` and `m` (`1 <= n, m <= 100,000`), representing the number of cities and the number of roads respectively. - The second line contains `n` integers where the `i`-th integer represents the capacity of the server in the `i`-th city. - Each of the next `m` lines contains two integers `u` and `v` (`1 <= u, v <= n`), representing a bidirectional road between city `u` and city `v`. # Output Print a single integer representing the minimum capacity of a server that can be used to ensure connectivity between any two cities in the network, considering the least powerful server in the minimum spanning tree of the network. # Example Input ``` 4 3 10 20 30 40 1 2 2 3 3 4 ``` Output ``` 10 ``` Explanation In the given example, the minimum spanning tree (MST) connecting all the cities is formed by the roads (1-2), (2-3), and (3-4), utilizing the capacities 10, 20, 30, and 40 respectively. The minimum server capacity in the MST is 10, which is the output. # Note - Assume that the cities are indexed from 1 to `n`. - If a direct connection between every pair of cities is not possible, print -1. - Consider the capacity of the least powerful server in the optimal network to determine minimal latency.","solution":"def find_minimum_capacity(n, m, capacities, roads): import sys from heapq import heappop, heappush from collections import defaultdict if n == 1: return capacities[0] graph = defaultdict(list) for u, v in roads: graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) def prims_mst(graph, capacities, start_node): visited = [False] * n edge_list = [(capacities[start_node], start_node)] min_capacity = float(\'inf\') while edge_list: cap, node = heappop(edge_list) if visited[node]: continue visited[node] = True min_capacity = min(min_capacity, capacities[node]) for neighbor in graph[node]: if not visited[neighbor]: heappush(edge_list, (capacities[neighbor], neighbor)) return min_capacity if all(visited) else -1 return prims_mst(graph, capacities, 0)"},{"question":"You are given an array of `n` non-negative integers representing the heights of pillars standing in a straight line. The width of each pillar is 1. You need to find the largest rectangle that can be formed between the pillars such that the rectangle\'s height is determined by the shortest pillar in the range. Write a function `largestRectangle(arr: List[int]) -> int` that takes a list of non-negative integers `arr` representing the heights of the pillars and returns the area of the largest rectangle that can be formed between the pillars. # Input: - `arr` is a list of `n` non-negative integers where `1 <= n <= 10^5` and `0 <= arr[i] <= 10^4`. # Output: - Return an integer representing the area of the largest rectangle. # Example: - Input: `[2, 1, 5, 6, 2, 3]` - Output: `10` In this example, the largest rectangle has an area of 10 formed between the heights `[5, 6]`. - Input: `[4, 2, 0, 3, 2, 5]` - Output: `6` In this example, the largest rectangle has an area of 6 formed between the heights `[2, 3, 2]`. # Note: Optimize your solution to handle the lower and upper constraints effectively. The solution should ideally have a time complexity of O(n).","solution":"from typing import List def largestRectangle(arr: List[int]) -> int: Given an array of non-negative integers representing the heights of pillars, this function returns the area of the largest rectangle that can be formed. stack = [] max_area = 0 index = 0 while index < len(arr): if not stack or arr[index] >= arr[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() height = arr[top_of_stack] width = index if not stack else index - stack[-1] - 1 max_area = max(max_area, height * width) while stack: top_of_stack = stack.pop() height = arr[top_of_stack] width = index if not stack else index - stack[-1] - 1 max_area = max(max_area, height * width) return max_area"},{"question":"You are given an array of distinct integers and you need to find and return the length of the longest contiguous subarray that forms an arithmetic progression (AP). An AP is a sequence of numbers in which the difference between any two consecutive terms is constant. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 2 * 10^5) — the length of the array. - The second line contains `n` distinct integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the elements of the array. # Output - Print a single integer — the length of the longest contiguous subarray that forms an arithmetic progression. # Example Input ``` 5 10 7 4 6 8 ``` Output ``` 3 ``` # Explanation In the given example, the longest contiguous subarray that forms an arithmetic progression is `[10, 7, 4]` with a common difference of `-3`. # Notes - The largest possible value for `n` is 200,000, ensure that your solution is efficient and runs within acceptable time limits.","solution":"def longest_ap_subarray_length(n, arr): if n == 1: return 1 max_length = 1 current_length = 1 current_diff = arr[1] - arr[0] for i in range(1, n): if arr[i] - arr[i - 1] == current_diff: current_length += 1 else: current_diff = arr[i] - arr[i - 1] current_length = 2 max_length = max(max_length, current_length) return max_length"},{"question":"Given an integer array `nums`, and an integer `k`, return the maximum sum of any subarray of size `k`. A subarray is a contiguous subset of elements from the input array. # Input - The first line contains two space-separated integers `n` and `k` (1 ≤ k ≤ n ≤ 10^5) — the number of elements in the array and the size of the subarray. - The second line contains `n` space-separated integers `nums[i]` (|nums[i]| ≤ 10^4) — the elements of the array. # Output - Print one integer — the maximum sum of any subarray of size `k`. # Example Input ``` 7 3 2 1 5 1 3 2 -1 ``` Output ``` 9 ``` Explanation The subarray with the maximum sum of size `3` is `[5, 1, 3]` with sum 9. # Note - Use a sliding window approach to find the maximum sum efficiently.","solution":"def max_subarray_sum(nums, k): Returns the maximum sum of any subarray of size k. # Calculate the sum of the first window current_sum = sum(nums[:k]) max_sum = current_sum # Slide the window across the array for i in range(k, len(nums)): current_sum += nums[i] - nums[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are tasked with writing a function to determine if a robot reaches its starting position after a sequence of movements on a 2D grid. The robot starts at the origin (0, 0) and can move in four directions: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Each movement changes the robot\'s position by one unit in the corresponding direction. Given a string containing the sequence of movements, determine whether the robot returns to the origin. # Function Signature ```python def is_robot_back_to_origin(movements: str) -> bool: pass ``` # Input - The function takes a single string `movements` containing the instructions for the robot\'s movements. It consists of characters \'U\', \'D\', \'L\', and \'R\' only, and has a length between 1 and 100,000. # Output - The function should return a boolean value: - `True` if the robot returns to the origin; - `False` otherwise. # Example ```python movements = \\"UDLR\\" # At the end of the sequence, the robot returns to the origin (0, 0) print(is_robot_back_to_origin(movements)) # Output: True movements = \\"UUDDLRLR\\" # At the end of the sequence, the robot is at (0, 0) print(is_robot_back_to_origin(movements)) # Output: True movements = \\"UUDDLL\\" # The robot ends up at (0, 1) print(is_robot_back_to_origin(movements)) # Output: False ``` # Constraints - 1 ≤ length of `movements` ≤ 100,000 # Note - The robot returns to the origin if the number of \'U\' movements is equal to the number of \'D\' movements and the number of \'L\' movements is equal to the number of \'R\' movements.","solution":"def is_robot_back_to_origin(movements: str) -> bool: Determines if the robot returns to the origin after a sequence of movements. Parameters: movements (str): A string containing the movement instructions (\'U\', \'D\', \'L\', \'R\'). Returns: bool: True if the robot returns to the origin, False otherwise. # Initialize counters for vertical and horizontal movements vertical = 0 horizontal = 0 # Iterate over each movement and update the counters for move in movements: if move == \'U\': vertical += 1 elif move == \'D\': vertical -= 1 elif move == \'L\': horizontal -= 1 elif move == \'R\': horizontal += 1 # Check if the robot is back to the origin return vertical == 0 and horizontal == 0"},{"question":"You are given a string s consisting of digits and the characters \'?\' and \'*\'. Each \'?\' can be replaced with any single digit (0-9) and each \'*\' can be replaced with any sequence of digits (including an empty sequence). Your task is to find the total number of different strings that can be generated from the original string s. The first line contains the string s of length n (1 ≤ n ≤ 18). Output the total number of different strings that can be generated from s. Example: Input: 1?2*34 Output: 100","solution":"def count_generated_strings(s): Returns the total number of different strings that can be generated from the original string s. \'?\' can be replaced by any digit (0-9), \'*\' can be replaced by any sequence of digits (including empty sequence). count = 1 for char in s: if char == \'?\': count *= 10 elif char == \'*\': count *= 11 # 10 choices (0-9) plus 1 for empty sequence return count"},{"question":"Alice is playing a game where she has to combine several smaller strings to form a target string through concatenation. She is given a dictionary of strings and a target string. She needs to determine the minimum number of strings from the dictionary required to form the target string by concatenation. If it is not possible to form the target string, she should return -1. For example, given the dictionary [\\"a\\", \\"abc\\", \\"bc\\", \\"c\\", \\"bca\\"] and the target string \\"abca\\", Alice can form the target string by combining \\"abc\\" and \\"a\\". Write a function `minConcat(dictionary, target)` that takes a list of strings `dictionary` and a string `target`, and returns the minimum number of strings from the dictionary required to form the target string, or -1 if it is not possible. ```python def minConcat(dictionary, target): n = len(target) dp = [float(\'inf\')] * (n + 1) dp[0] = 0 for i in range(1, n + 1): for word in dictionary: if i >= len(word) and target[i - len(word):i] == word: dp[i] = min(dp[i], dp[i - len(word)] + 1) return dp[n] if dp[n] != float(\'inf\') else -1 ``` # Input - The first line contains an integer `m` (1 ≤ m ≤ 1000), the size of the dictionary. - The next `m` lines each contain a string from the dictionary. - The next line contains the target string, which has a length between 1 and 5000 characters. # Output - Output a single integer, the minimum number of strings from the dictionary required to form the target string, or -1 if it is not possible. Example **Input**: ``` 5 a abc bc c bca abca ``` **Output**: ``` 2 ``` **Explanation**: To form \\"abca\\", Alice can use \\"abc\\" and \\"a\\" from the dictionary. The other valid combinations like \\"a\\", \\"bc\\", \\"a\\" or \\"ab\\", \\"c\\" are also possible, but 2 remains the minimum number of combinations required.","solution":"def minConcat(dictionary, target): Determines the minimum number of strings from the dictionary required to form the target string through concatenation. :param dictionary: List of strings representing the dictionary. :param target: The target string to form. :return: The minimum number of strings required or -1 if it\'s not possible. n = len(target) # dp[i] will store the minimum number of strings required to form target[:i] dp = [float(\'inf\')] * (n + 1) dp[0] = 0 # Base case: zero length target can be formed without any string for i in range(1, n + 1): for word in dictionary: if i >= len(word) and target[i - len(word):i] == word: dp[i] = min(dp[i], dp[i - len(word)] + 1) return dp[n] if dp[n] != float(\'inf\') else -1"},{"question":"A new social media platform, TrendNet, is gaining popularity in a town with n people numbered from 1 to n. Each user can follow other users, and follow relationships are mutual. However, the follow relationships change frequently. Your task is to maintain the current follow relationships and efficiently handle queries to determine the number of mutual followers (users who follow each other) for a given user. Initially, there are no follow relationships. There are two types of operations: 1. \\"follow a b\\" (1 ≤ a, b ≤ n, a ≠ b): User a starts following user b and user b starts following user a. 2. \\"mutual_count x\\" (1 ≤ x ≤ n): A query to determine the number of mutual followers of user x. Write a program that processes a sequence of operations and outputs the result for each query. Input: - The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of users. - The second line contains an integer q (1 ≤ q ≤ 200,000) — the number of operations. - Each of the next q lines describes one of the two operations mentioned above. Output: - For each \\"mutual_count x\\" query, output a single integer — the number of mutual followers of user x. Example: Input: 5 7 follow 1 2 follow 1 3 mutual_count 1 follow 2 3 mutual_count 2 follow 4 5 mutual_count 4 Output: 2 2 1 Explanation: - User 1 follows user 2 and user 3. Therefore, user 1 has 2 mutual followers. - After user 2 starts following user 3, user 2 has 2 mutual followers (user 1 and user 3). - User 4 follows user 5, making user 4 have 1 mutual follower.","solution":"def process_operations(n, operations): from collections import defaultdict followers = defaultdict(set) mutual_followers_count = [0] * (n + 1) # Array to store mutual followers count result = [] for operation in operations: parts = operation.split() if parts[0] == \\"follow\\": a, b = int(parts[1]), int(parts[2]) followers[a].add(b) followers[b].add(a) # Update mutual followers count mutual_followers_count[a] += 1 mutual_followers_count[b] += 1 elif parts[0] == \\"mutual_count\\": x = int(parts[1]) result.append(mutual_followers_count[x]) return result"},{"question":"A jewelry store wishes to determine the most profitable way to cut a rod of precious metal into smaller pieces. The owner knows the profits that can be earned by selling rods of various lengths up to a certain maximum length. The goal is to determine the maximum profit that can be achieved by cutting and selling the rod. You are given the length of the rod `n` and an array `prices` where `prices[i]` represents the profit from selling a rod of length `i+1`. Write a function to compute the maximum profit that can be obtained by cutting and selling the rod. # Input - The first line contains an integer `n` (1 ≤ `n` ≤ 100), representing the length of the rod. - The second line contains `n` integers, where the `i-th` integer represents `prices[i]` (1 ≤ `prices[i] ≤ 1000). # Output - Print the maximum profit that can be achieved by cutting and selling the rod. # Example Input: ``` 5 2 5 7 8 10 ``` Output: ``` 12 ``` Explanation: One possible way to make the maximum profit is to cut the rod into two pieces of lengths `2` and `3`, earning a profit of `5 + 7 = 12`.","solution":"def max_profit(n, prices): Computes the maximum profit that can be obtained by cutting and selling the rod. Arguments: n -- length of the rod prices -- list of integers where prices[i] represents the profit from selling a rod of length i+1 Returns: Maximum profit that can be achieved by cutting and selling the rod. dp = [0] * (n + 1) for i in range(1, n + 1): max_val = 0 for j in range(i): max_val = max(max_val, prices[j] + dp[i - j - 1]) dp[i] = max_val return dp[n]"},{"question":"Nina is organizing her bookshelf. Each book has a unique height, and Nina wants to organize them in a specific order from left to right. She can perform two types of operations to reposition the books: 1. Swap the positions of any two adjacent books. 2. Move the tallest book in any given sub-sequence of books to the end of that sub-sequence. Nina needs your help to determine if it is possible to organize her bookshelf in the desired order using the given operations, and if so, find a sequence of operations to achieve it. Given the initial order of book heights on the shelf and the desired order, write a program to determine whether it\'s possible to arrange the books as desired. If it is possible, output a sequence of operations to achieve that order. The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of books on the shelf. The second line contains n integers — the initial order of the book heights. The third line contains n integers — the desired order of the book heights. Output \\"YES\\" if it is possible to rearrange the books as desired. If so, output the number of operations k in the second line, followed by k lines each describing an operation. Each operation is described by two integers: the type of operation (1 for swap, 2 for move to end) and the book position (1-based index). If it is not possible to achieve the desired order, output \\"NO\\". **Example:** Input: ``` 5 5 3 1 4 2 1 2 3 4 5 ``` Output: ``` YES 6 1 2 1 4 2 5 1 3 1 4 1 5 ``` The initial order is 5, 3, 1, 4, 2. Here is how the bookshelf looks like after each of the operations: 1. Swap 3 and 1: [5, 1, 3, 4, 2] 2. Swap 4 and 2: [5, 1, 3, 2, 4] 3. Move tallest (5) to end: [1, 3, 2, 4, 5] 4. Swap 3 and 2: [1, 2, 3, 4, 5] 5. Swap does not change anything at this point. 6. Swap does not change anything at this point. Note: Multiple solutions might exist, your program can output any valid sequence of operations.","solution":"def organize_books(n, initial_order, desired_order): if sorted(initial_order) != sorted(desired_order): return [\\"NO\\"] operations = [] def find_index(lst, val, start=0): for i in range(start, len(lst)): if lst[i] == val: return i return -1 current_order = initial_order[:] for i in range(n): if current_order[i] != desired_order[i]: # find where the desired value is in the current list correct_value = desired_order[i] cur_index = find_index(current_order, correct_value, i) # perform the swap operation to move the correct_value to its desired position while cur_index > i: current_order[cur_index], current_order[cur_index - 1] = current_order[cur_index - 1], current_order[cur_index] operations.append((1, cur_index)) cur_index -= 1 return [\\"YES\\", len(operations)] + operations # Example usage n = 5 initial_order = [5, 3, 1, 4, 2] desired_order = [1, 2, 3, 4, 5] result = organize_books(n, initial_order, desired_order) print(result)"},{"question":"In the kingdom of Galvor, there is a magical forest filled with enchanted trees, each tree represented as a node in a graph. The nodes are connected by directed edges indicating the paths one can traverse through the forest. Each edge has a weight representing the magic power required to traverse from one node to another. The forest has a total of n nodes and m directed edges. The guardian of the forest has tasked you to find the shortest path from the source node to the destination node using the fewest possible magic power. If there are multiple shortest paths with the same weight, any one of them can be chosen. The first line of the input contains three integers n (1 ≤ n ≤ 100), m (1 ≤ m ≤ 10,000), and k (1 ≤ k ≤ n), where k represents the number of queries to find shortest paths. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1,000), representing a directed edge from node u to node v with a weight of w. Each of the last k lines contains two integers s and t (1 ≤ s, t ≤ n), representing the source node and the destination node for which the shortest path should be found. If a path from s to t exists, print a single integer representing the minimum magic power required to traverse from node s to node t. If no such path exists, print \\"Unreachable\\". Input: - The first line contains three integers n, m, and k. - The following m lines contain three integers each u, v, and w. - The following k lines contain two integers s and t. Output: - For each query, print the minimum magic power required for the path from s to t, or \\"Unreachable\\" if no such path exists.","solution":"import heapq def dijkstra(graph, start, n): Returns the shortest distance from start to all other nodes using Dijkstra\'s algorithm distances = [float(\'inf\')] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If current distance is greater than the stored one, skip it if current_distance > distances[current_node]: continue # Explore neighbors for neighbor, weight in graph[current_node]: distance = current_distance + weight # Only consider this new path if it\'s better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def find_shortest_paths(n, edges, queries): # Create adjacency list for the graph graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) results = [] for s, t in queries: distances = dijkstra(graph, s, n) if distances[t] == float(\'inf\'): results.append(\\"Unreachable\\") else: results.append(distances[t]) return results"},{"question":"You are given an undirected weighted graph with `n` nodes and `m` edges. Each edge `i` has a weight `w_i`. The graph may contain loops and multiple edges between the same pair of nodes. Your task is to find the shortest cycle in the graph. A cycle is a path that starts and ends at the same node, and all nodes in the cycle are distinct, except for the starting and ending node. The first line of input contains two integers `n` and `m` (`2 ≤ n ≤ 500`, `1 ≤ m ≤ 2000`) — the number of nodes and edges in the graph. The next `m` lines describe the edges. Each line contains three integers `u`, `v`, and `w_i` (`1 ≤ u, v ≤ n`, `u ≠ v`, `1 ≤ w_i ≤ 10^6`) — the endpoints of the edge and its weight. Output the length of the shortest cycle in the graph. If there is no cycle, print `-1`. Examples # Input ``` 3 3 1 2 1 2 3 2 3 1 3 ``` # Output ``` 6 ``` # Input ``` 4 4 1 2 1 2 3 2 3 4 3 4 1 4 ``` # Output ``` 10 ``` # Input ``` 3 2 1 2 1 2 3 2 ``` # Output ``` -1 ``` Note In the first example, the shortest cycle is 1 → 2 → 3 → 1 with a total weight of 6. In the second example, the only cycle is 1 → 2 → 3 → 4 → 1 with a total weight of 10. In the third example, there is no cycle in the graph.","solution":"import heapq from collections import defaultdict, deque def find_shortest_cycle(n, edges): def dijkstra(start, graph): distances = {node: float(\'inf\') for node in range(n)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: (current_distance, current_node) = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances graph = defaultdict(list) min_cycle_length = float(\'inf\') for u, v, w in edges: graph[u-1].append((v-1, w)) graph[v-1].append((u-1, w)) for u, v, w in edges: graph[u-1].remove((v-1, w)) graph[v-1].remove((u-1, w)) distances = dijkstra(u-1, graph) cycle_length = distances[v-1] + w min_cycle_length = min(min_cycle_length, cycle_length) graph[u-1].append((v-1, w)) graph[v-1].append((u-1, w)) return min_cycle_length if min_cycle_length != float(\'inf\') else -1"},{"question":"A delivery company needs to optimize its route to deliver packages to multiple destinations efficiently. The company operates a fleet of trucks, each with a maximum weight capacity. They need to deliver packages to different destinations, each package having a weight and a destination. The company can load each truck with packages such that the total weight does not exceed the truck\'s maximum capacity. Each truck will start from the company\'s warehouse and deliver its assigned packages, then return to the warehouse. Your task is to help the company determine the minimum number of trucks required to deliver all the packages. The first line contains two integers n and t (1 ≤ n ≤ 200,000; 1 ≤ t ≤ 10,000) — the number of packages and the maximum weight capacity of each truck, respectively. The next n lines each contain two integers wi and ai (1 ≤ wi ≤ t; 1 ≤ ai ≤ 100,000) — the weight and destination of each package. Output the minimum number of trucks required to deliver all the packages. # Input ``` 5 10 4 1 2 2 3 3 5 4 9 5 ``` # Output ``` 3 ``` # Explanation In this example, the company has 5 packages with weights and their respective destinations. The maximum weight capacity of each truck is 10. The minimum number of trucks required is 3, which could be achieved by: 1. Truck 1: Deliver package 1 (4 units) and package 2 (2 units) [Total weight: 6 units] 2. Truck 2: Deliver package 3 (3 units) and package 4 (5 units) [Total weight: 8 units] 3. Truck 3: Deliver package 5 (9 units) [Total weight: 9 units] Each truck\'s total weight does not exceed the maximum capacity of 10 units.","solution":"def min_trucks_required(n, t, packages): Determine the minimum number of trucks required to deliver all packages. :param n: Number of packages :param t: Maximum weight capacity of each truck :param packages: List of tuples (wi, ai) representing the weight and destination of each package :return: Minimum number of trucks required weights = sorted([pkg[0] for pkg in packages], reverse=True) trucks = 0 while weights: trucks += 1 current_weight = 0 i = 0 while i < len(weights): if current_weight + weights[i] <= t: current_weight += weights.pop(i) else: i += 1 return trucks"},{"question":"You are working for a company that processes textual data from multiple sources. Your task is to help them automate the extraction of unique words from a given text and sort them in lexicographical order. In this problem, a word is defined as a consecutive sequence of letters from the English alphabet (both lowercase and uppercase), no other characters are considered part of a word. Words should be case-insensitively unique. This means that \\"Hello\\" and \\"hello\\" are considered the same word. More formally, you need to read a text that can contain numbers, punctuation marks, spaces, and other special characters. You should extract all unique words, ignoring their case, and print them in lexicographical order. The input consists of a single string `s` (1 ≤ |s| ≤ 5·10⁶) which contains lowercase and uppercase letters, numbers, punctuation marks, spaces, and other special characters. The output should be one word per line, sorted in lexicographical order, and all in lowercase. # Example: **Input:** ``` Hello, world! This is a test. This test is simple. ``` **Output:** ``` a hello is simple test this world ```","solution":"import re def extract_unique_words(text): Extracts unique words from the provided text, sorts them in lexicographical order, and returns them as a list. # Use regular expression to find all words in the text words = re.findall(r\'[a-zA-Z]+\', text) # Convert all words to lowercase to ensure case-insensitive uniqueness words = [word.lower() for word in words] # Create a set of unique words unique_words = set(words) # Sort the unique words in lexicographical order sorted_unique_words = sorted(unique_words) return sorted_unique_words"},{"question":"A Scrum team is developing a task management tool, allowing users to track their daily tasks. Each task has a unique identifier, a priority level (a positive integer), and a completion status (complete or incomplete). The team needs your help to implement a feature that allows users to filter tasks based on these attributes. Write a function `filter_tasks(tasks, min_priority, complete)` that filters the tasks based on a specified minimum priority level and completion status. - `tasks` is a list of dictionaries, where each dictionary represents a task with the following keys: - `\'id\'`: an integer representing the unique identifier of the task. - `\'priority\'`: an integer representing the priority of the task. - `\'complete\'`: a boolean indicating whether the task is complete (`True`) or incomplete (`False`). - `min_priority` is an integer representing the minimum priority level to filter the tasks. - `complete` is a boolean indicating the desired completion status of the tasks to be filtered. The function should return a list of task identifiers (integers) that meet the specified criteria. # Example ```python tasks = [ {\'id\': 1, \'priority\': 5, \'complete\': True}, {\'id\': 2, \'priority\': 3, \'complete\': False}, {\'id\': 3, \'priority\': 8, \'complete\': True}, {\'id\': 4, \'priority\': 2, \'complete\': False} ] min_priority = 4 complete = True print(filter_tasks(tasks, min_priority, complete)) # Output: [1, 3] ``` # Constraints - Each task dictionary will always contain the keys `\'id\'`, `\'priority\'`, and `\'complete\'`. - There will be at most 10^3 tasks in the `tasks` list. - Each priority level will be a positive integer. - The task identifiers are unique integers.","solution":"def filter_tasks(tasks, min_priority, complete): Filters tasks based on minimum priority and completion status. Args: tasks (list of dict): The list of tasks to filter. min_priority (int): The minimum priority level. complete (bool): The desired completion status. Returns: list of int: The list of task identifiers that meet the specified criteria. filtered_tasks = [] for task in tasks: if task[\'priority\'] >= min_priority and task[\'complete\'] == complete: filtered_tasks.append(task[\'id\']) return filtered_tasks"},{"question":"You are given an array of positive integers representing the heights of n students standing in a line. Each student is assigned a position in the array such that the i-th student is at the i-th index. Your task is to determine whether the students can be reordered such that the first half of the students are in non-decreasing order by height and the second half of the students are in non-increasing order by height. If it is possible, output \\"YES\\" followed by the reordered array. If it is not possible, output \\"NO\\". Input: - The first line contains an integer n (1 ≤ n ≤ 100), the number of students. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000), representing the heights of the students in their original order. Output: - If it is possible to reorder the array, output \\"YES\\" on the first line, followed by the reordered array on the second line. - If it is not possible to reorder the array as specified, output \\"NO\\". Example: Input: 6 4 2 3 1 5 6 Output: YES 1 2 3 6 5 4","solution":"def reorder_students(n, heights): Reorders the students\' heights such that the first half is in non-decreasing order and the second half is in non-increasing order if possible. Params: - n (int): the number of students - heights (list of int): the heights of the students in their original order. Returns: - (tuple): A tuple containing a \\"YES\\" or \\"NO\\" string, and the reordered heights array if \\"YES\\". # Sort the list of heights sorted_heights = sorted(heights) # Divide into two halves mid = (n + 1) // 2 first_half = sorted_heights[:mid] second_half = sorted_heights[mid:] # Reverse the second half to get non-increasing order second_half.reverse() # Combine first half and second half reordered = first_half + second_half return (\\"YES\\", reordered)"},{"question":"You are given a string `s` that represents a binary number (a number that consists of only \'0\'s and \'1\'s). Your task is to find the maximum number you can generate by flipping (changing \'0\' to \'1\' or \'1\' to \'0\') at most one bit in this binary string. The first line contains a binary string `s` (1 ≤ length of s ≤ 100) — the binary number given to you. Print the maximum binary number that can be obtained by flipping at most one bit in the binary string. # Example Input ``` 1001 ``` Output ``` 1101 ``` # Note In the example, by flipping the second bit from \'0\' to \'1\', we can obtain the largest possible number, which is `1101`.","solution":"def max_binary_by_flipping_one_bit(s): Return the maximum binary number that can be obtained by flipping one bit in the binary string s. if \'0\' not in s: return s max_binary = s for i in range(len(s)): flipped_binary = s[:i] + (\'1\' if s[i] == \'0\' else \'0\') + s[i + 1:] if int(flipped_binary, 2) > int(max_binary, 2): max_binary = flipped_binary return max_binary"},{"question":"Binary Tree Zigzag Level Order Traversal Given a binary tree, return the zigzag level order traversal of its nodes\' values. (ie, from left to right, then right to left for the next level and alternate between). For example: Given binary tree [3,9,20,null,null,15,7], ``` 3 / 9 20 / 15 7 ``` return its zigzag level order traversal as: ``` [ [3], [20,9], [15,7] ] ``` **Function Signature:** ```python def zigzagLevelOrder(root: TreeNode) -> List[List[int]]: ``` **Input:** - `root`: TreeNode (The root node of the binary tree.) **Output:** - List[List[int]]: A list of lists containing the values of nodes in zigzag level order. **Constraints:** - The number of nodes in the binary tree is in the range [0, 2000]. - -100 <= Node.val <= 100","solution":"from typing import List, Optional import collections class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzagLevelOrder(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] results = [] queue = collections.deque([root]) left_to_right = True while queue: level_size = len(queue) level_nodes = [] for _ in range(level_size): node = queue.popleft() if left_to_right: level_nodes.append(node.val) else: level_nodes.insert(0, node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) results.append(level_nodes) left_to_right = not left_to_right return results"},{"question":"You are given a grid with n rows and m columns, initially filled with zeroes. Your task is to process a series of q queries. Each query will be of three types: 1. Update the value at a specific cell. 2. Compute the sum of values in a subgrid. 3. Reset a specific row or column to zeroes. The queries can be described as follows: - **Query 1**: Update the value at cell (r, c) to x. - **Query 2**: Compute the sum of values in the subgrid from (r1, c1) to (r2, c2). - **Query 3**: Reset all values in row r or column c to zeroes. Can you implement the logic to handle these queries efficiently? # Input Format The first line contains three integers n, m, and q (1 leq n, m leq 1000, 1 leq q leq 100000) - the number of rows, the number of columns, and the number of queries, respectively. Each of the next q lines contains a query as described. The types of queries are as follows: - For query type 1: a line containing four integers 1, r, c, and x (1 leq r leq n, 1 leq c leq m, -10^9 leq x leq 10^9). - For query type 2: a line containing five integers 2, r1, c1, r2, c2 (1 leq r1 leq r2 leq n, 1 leq c1 leq c2 leq m). - For query type 3: a line containing three integers 3, d, and v where d is either 1 (for a row reset) or 2 (for a column reset), and v (1 leq v leq n if d = 1, otherwise 1 leq v leq m) is the index of the row or column to reset. # Output Format Each time a query of type 2 is processed, output the sum of values in the specified subgrid. # Example ``` Input 4 5 5 1 2 3 5 1 1 1 10 2 1 1 3 4 3 1 2 2 1 1 3 4 Output 15 5 ``` # Note - For the first query of type 2, the sum of values from cell (1,1) to (3,4) will be the sum of all values in that subgrid, which initially contains the value 5 from the first update. - After the reset query of type 3, the row 2 is reset to zeroes. - For the second query of type 2, the sum of values from cell (1,1) to (3,4) now reflects the reset values, resulting in a lower sum.","solution":"class GridOperations: def __init__(self, n, m): self.grid = [[0] * m for _ in range(n)] self.n = n self.m = m def update_value(self, r, c, x): self.grid[r-1][c-1] = x def subgrid_sum(self, r1, c1, r2, c2): total_sum = 0 for i in range(r1-1, r2): for j in range(c1-1, c2): total_sum += self.grid[i][j] return total_sum def reset_row_or_column(self, d, v): if d == 1: # Reset row v for j in range(self.m): self.grid[v-1][j] = 0 else: # Reset column v for i in range(self.n): self.grid[i][v-1] = 0"},{"question":"Given a directed graph with n vertices and m edges, your task is to determine if there exists a path from a given starting vertex `s` to a destination vertex `d` such that the path length is exactly `k`. Here, the path length is defined as the number of edges in the path. # Input: The input consists of three lines: 1. The first line contains three integers `n`, `m`, and `k` where `n` is the number of vertices (1 ≤ n ≤ 1000), `m` is the number of edges (0 ≤ m ≤ 10000), and `k` is the exact length of the path that needs to be checked (1 ≤ k ≤ 20). 2. The second line contains two integers `s` and `d` (1 ≤ s, d ≤ n) where `s` is the starting vertex and `d` is the destination vertex. 3. The next `m` lines contain two integers `u` and `v` (1 ≤ u, v ≤ n) which indicate a directed edge from vertex `u` to vertex `v`. # Output: Print `YES` if there exists a path from `s` to `d` with exactly `k` edges, otherwise print `NO`. # Example Input: ``` 5 5 3 1 5 1 2 2 3 3 4 4 5 2 4 ``` # Example Output: ``` YES ``` # Explanation: In the sample input, there exists a path from vertex 1 to vertex 5 with exactly 3 edges: 1 -> 2 -> 3 -> 4 -> 5. # Note: - Multiple paths or cycles in the graph are possible. - You need to ensure whether there is at least one path that matches the exact length required. Write an efficient algorithm to solve the problem, ensuring it can handle the upper constraints of the given input sizes.","solution":"def path_with_exact_length_k(n, m, k, s, d, edges): from collections import deque, defaultdict # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Breadth-First Search to find path of length k queue = deque([(s, 0)]) # (current node, current path length) while queue: current_node, current_length = queue.popleft() if current_length == k: if current_node == d: return \\"YES\\" continue if current_length < k: for neighbor in graph[current_node]: queue.append((neighbor, current_length + 1)) return \\"NO\\""},{"question":"You have a list of n integers and you need to determine the length of the longest contiguous subsequence that is strictly increasing. If the list is entirely non-increasing, the answer should be 0. For example, given the list [3, 1, 5, 6, 4, 7], the longest contiguous strictly increasing subsequence is [1, 5, 6], which has a length of 3. The first line contains an integer n (1 ≤ n ≤ 10^5) which is the number of elements in the list. The second line contains n integers separated by spaces representing the list elements a1, a2, ..., an (1 ≤ ai ≤ 10^9). Print a single integer which is the length of the longest contiguous strictly increasing subsequence in the given list. For instance, in the example, the input will be: ``` 6 3 1 5 6 4 7 ``` And the output will be: ``` 3 ``` In the case of the array [5, 3, 2, 1], there is no strictly increasing subsequence, so the output should be: ``` 0 ```","solution":"def longest_increasing_subsequence_length(n, arr): Returns the length of the longest contiguous strictly increasing subsequence in the list. :param n: Integer, the number of elements in the list. :param arr: List of n integers. :return: Integer, length of the longest contiguous strictly increasing subsequence. if n == 0: return 0 longest_length = 0 current_length = 1 for i in range(1, n): if arr[i] > arr[i - 1]: current_length += 1 else: longest_length = max(longest_length, current_length) current_length = 1 longest_length = max(longest_length, current_length) return longest_length if longest_length > 1 else 0"},{"question":"You are given an array of integers `arr` and a single integer `target`. Your objective is to find the number of different contiguous subarrays whose elements sum up to the target value. A subarray is defined as a sequence of consecutive elements from the array. The same elements appearing in different positions in the array should not be counted as the same subarray. Write a function `countSubarraysWithSum` that takes the array `arr` and the integer `target` as input and returns the count of subarrays whose sums are equal to the `target`. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the length of the array. - The second line contains `n` space-separated integers arr[i] (1 ≤ arr[i] ≤ 10^4), the elements of the array. - The third line contains an integer `target` (1 ≤ target ≤ 10^8). # Output - Print a single integer - the number of contiguous subarrays that have a sum equal to the target. # Example ``` Input: 5 1 2 3 4 5 9 Output: 2 Input: 6 1 2 3 1 2 3 3 Output: 4 ``` # Explanation: In the first example, there are two subarrays that sum up to the target value 9: [2, 3, 4] and [4, 5]. In the second example, there are four subarrays that sum to the target 3: [3], [1, 2], [3], and [3]. Each subarray is counted based on their distinct positions in the array.","solution":"def countSubarraysWithSum(arr, target): Returns the number of contiguous subarrays whose sum equals the target value. n = len(arr) prefix_sum = 0 prefix_sum_count = {0: 1} # Key: sum, Value: count of occurrences of that sum count = 0 for num in arr: prefix_sum += num if prefix_sum - target in prefix_sum_count: count += prefix_sum_count[prefix_sum - target] if prefix_sum in prefix_sum_count: prefix_sum_count[prefix_sum] += 1 else: prefix_sum_count[prefix_sum] = 1 return count"},{"question":"To improve operational efficiency within an organization, the IT department is tasked with managing a circular buffer for storing logs of system activities. The circular buffer has a fixed size and when it reaches its capacity, it overwrites the oldest entries with new ones. You are required to implement a `CircularBuffer` class that supports the following functionalities: 1. **Initialization:** The buffer should be initialized with a given size. 2. **Insert:** After inserting a new log entry, it should be added to the end of the buffer. If the buffer is full, it should overwrite the oldest entries. 3. **Retrieve:** Retrieve the contents of the circular buffer in the order they were inserted from oldest to newest, without duplicate entries. Here\'s the skeleton of the `CircularBuffer` class: ```python class CircularBuffer: def __init__(self, size: int): # Initialize the buffer with a fixed size pass def insert(self, log: str): # Insert a new log entry into the buffer pass def retrieve(self) -> list: # Retrieve the contents of the buffer in order pass ``` **Input and Output Specifications:** - **Initialization:** - Input: The size of the buffer `n` (1 <= n <= 10^4). - Output: None. - **Insert:** - Input: A log entry as a string `log` (1 ≤ length of log ≤ 100). - Output: None. - **Retrieve:** - Input: None. - Output: The list of log entries in order from oldest to newest. **Function Calls Example:** ```python buffer = CircularBuffer(3) # Initializes a circular buffer of size 3 buffer.insert(\\"log1\\") # Inserts \\"log1\\" buffer.insert(\\"log2\\") # Inserts \\"log2\\" buffer.insert(\\"log3\\") # Inserts \\"log3\\" print(buffer.retrieve()) # Output will be [\\"log1\\", \\"log2\\", \\"log3\\"] buffer.insert(\\"log4\\") # Inserts \\"log4\\", overwriting \\"log1\\" print(buffer.retrieve()) # Output will be [\\"log2\\", \\"log3\\", \\"log4\\"] buffer.insert(\\"log2\\") # Inserts \\"log2\\", should not insert as it exists without using space print(buffer.retrieve()) # Output will be [\\"log3\\", \\"log4\\", \\"log2\\"] buffer.insert(\\"log5\\") # Inserts \\"log5\\", overwriting \\"log2\\" print(buffer.retrieve()) # Output will be [\\"log4\\", \\"log5\\", \\"log3\\"] ``` Your task is to complete the `CircularBuffer` class to handle the functionalities described above.","solution":"class CircularBuffer: def __init__(self, size: int): self.size = size self.buffer = [] self.index = 0 self.entries = set() def insert(self, log: str): if log in self.entries: return if len(self.buffer) < self.size: self.buffer.append(log) else: self.entries.remove(self.buffer[self.index]) self.buffer[self.index] = log self.entries.add(log) self.index = (self.index + 1) % self.size def retrieve(self) -> list: return self.buffer[self.index:] + self.buffer[:self.index]"},{"question":"**Prickly Plants** In a garden, there are n types of prickly plants. Each type of prickly plant has a particular price and a maximum height. These plants grow in two stages. In the first stage, they can grow to a height of b. In the second stage, they can grow to their maximum height, (h). To grow a plant from height b to height h, an additional cost is incurred. A gardener wants to beautify his garden by ensuring that for each type of prickly plant, there is at least one plant of height h. The gardener has a budget and wants to ensure that the garden looks its best while staying within the budget. To achieve this, the gardener will purchase the plants in different stages. The initial budget is m. Write a function that checks if it\'s possible to buy the required amount of all types of prickly plants within the given budget. The first line contains an integer n (1 le n le 10^5) — the number of types of prickly plants. Each of the next n lines contains four integers: b, h, c_b, c_h (1 le b < h le 10^9, 1 le c_b, c_h le 10^9) — height after stage 1, maximum height after stage 2, cost to grow to stage 1, and additional cost to grow to maximum height, respectively. The next line contains a single integer, m (1 le m le 10^{18}) — the gardener\'s budget. Your function should output \\"YES\\" if the gardener can purchase the plants within the budget, and \\"NO\\" otherwise. **Example:** Input: ``` 3 2 5 3 2 3 6 4 3 4 9 5 6 24 ``` Output: ``` YES ``` Explanation: - Buy 1 type 1 plant for 3 + 2 = 5 - Buy 1 type 2 plant for 4 + 3 = 7 - Buy 1 type 3 plant for 5 + 6 = 11 Total cost is 5 + 7 + 11 = 23, which is within the budget of 24. Therefore, the output is \\"YES\\".","solution":"def can_beautify_garden(n, plant_info, m): total_cost = 0 for info in plant_info: b, h, c_b, c_h = info total_cost += c_b + c_h return \'YES\' if total_cost <= m else \'NO\'"},{"question":"A computer-controlled manufacturing system builds widgets. Each widget can only be made with a specific sequence of operations, fixed by the machinist in advance, but sometimes operations need to be skipped. Each operation either succeeds or fails independently, with a given probability. You are provided with the sequence of operations and the corresponding probabilities of their success. Your task is to compute the probability that a complete widget is successfully built (i.e., every operation in the specified sequence that is not skipped must succeed). # Input - The first line contains an integer n (1 le n le 1000) indicating the number of operations. - The second line contains an integer k (0 le k le n) indicating the number of operations to be skipped. - The third line contains n space-separated real numbers p_i (0.0 le p_i le 1.0) where the i-th number represents the probability that the i-th operation succeeds. # Output - Output a single real number representing the probability that the widget is successfully built. The result should be precise up to 10 decimal places. # Example Input ``` 3 1 0.9 0.8 0.6 ``` Output ``` 0.7200000000 ``` # Explanation In the example input, there are 3 operations with success probabilities 0.9, 0.8, and 0.6, and one of them can be skipped. The best strategy is to skip the operation with the lowest success probability (0.6). The probability of the remaining widget being successfully built is 0.9 * 0.8 = 0.72, and this is the required output.","solution":"from itertools import combinations import numpy as np def build_widget_probability(n, k, probabilities): Calculates the probability that a widget is successfully built given the number of operations, the number of operations that can be skipped, and the success probabilities of the operations. if k == 0: return np.prod(probabilities) # Compute all possible combinations of operations to skip max_success_probability = 0.0 for skip_indices in combinations(range(n), k): temp_probabilities = [probabilities[i] for i in range(n) if i not in skip_indices] success_probability = np.prod(temp_probabilities) if success_probability > max_success_probability: max_success_probability = success_probability return max_success_probability"},{"question":"You are given an array of n integers. Initially, all elements are 0. You need to perform q operations on the array. Each operation is defined by three integers t, l, and r, and it can be one of the following types: 1. Operation type 1 (t=1): Increment all elements in the subarray from index l to index r (inclusive) by 1. 2. Operation type 2 (t=2): Find the minimum element in the subarray from index l to index r (inclusive). The array is 1-indexed. The first line of the input contains two space-separated integers n and q (1 ≤ n, q ≤ 1000), denoting the number of elements in the array and the number of operations, respectively. The next q lines each contain three space-separated integers t, l, and r (1 ≤ t ≤ 2, 1 ≤ l ≤ r ≤ n), specifying the operations to be performed. For each operation of the second type, print the result on a new line. Consider the following sample input: Input: 5 4 1 1 3 1 2 5 2 1 5 2 3 4 Output: 2 1 Explanation: - After the first operation, the array becomes [1, 1, 1, 0, 0]. - After the second operation, the array becomes [1, 2, 2, 1, 1]. - The first query of type 2 finds the minimum in the subarray [1, 2, 2, 1, 1], which is 1. - The second query of type 2 finds the minimum in the subarray [2, 1], which is 1.","solution":"def array_operations(n, q, operations): # Initialize the array with zeros arr = [0] * n result = [] for op in operations: t, l, r = op if t == 1: for i in range(l-1, r): arr[i] += 1 elif t == 2: result.append(min(arr[l-1:r])) return result"},{"question":"Alice is an avid hiker and enjoys exploring various trails in a massive national park. The park can be represented as a grid with \'n\' rows and \'m\' columns. Each cell in the grid either contains a part of a trail represented by the character \'.\', or is an impassable area represented by the character \'#\'. Alice wants to plan a new hiking path that is the longest possible straight path she can hike in the grid without changing direction. The hiking path can be either horizontal, vertical or diagonal (45°). Given the grid, your task is to help Alice determine the length of the longest possible straight hiking path she can take in any of the three directions mentioned. The first line of the input will contain two single-space-separated integers \'n\' and \'m\', where \'n\' is the number of rows and \'m\' is the number of columns in the grid. The next \'n\' lines will each contain a string of length \'m\' consisting of the characters \'.\' and \'#\'. Then print one line containing a single integer, the length of the longest possible straight hiking path. # Examples Input: ``` 6 6 ...... ..#... ...... .#.#.. ...... ...... ``` Output: ``` 6 ``` Explanation: The longest hiking path is the horizontal path in either the first or last row, or one of the full-length uninterrupted rows. Input: ``` 5 5 #.# # .#.#. ..# . ``` Output: ``` 2 ``` Explanation: The longest hiking path is the diagonal path in the fourth row. Note: - Trails or paths represented by \'.\' may intersect with impassable areas represented by \'#\'. - The diagonal path means any of 45° directions.","solution":"def longest_straight_path(n, m, grid): def max_path_length(dx, dy): max_len = 0 for x in range(n): for y in range(m): if grid[x][y] == \'.\': length = 0 nx, ny = x, y while 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\': length += 1 nx += dx ny += dy max_len = max(max_len, length) return max_len longest_path = 0 longest_path = max(longest_path, max_path_length(1, 0)) # vertical longest_path = max(longest_path, max_path_length(0, 1)) # horizontal longest_path = max(longest_path, max_path_length(1, 1)) # main diagonal longest_path = max(longest_path, max_path_length(1, -1)) # anti diagonal return longest_path # Function to parse input and run the solution function def solve_longest_path(n, m, grid_list): return longest_straight_path(n, m, grid_list)"},{"question":"You are given an array of n integers. You need to perform a series of operations to make the array non-decreasing. In each operation, you can increment any element of the array by 1. Find the minimum number of operations required to make the array non-decreasing. The first line contains an integer n (1 ≤ n ≤ 105). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — elements of the array. Print a single integer — the minimum number of operations required to make the array non-decreasing.","solution":"def min_operations_to_non_decreasing(arr): Returns the minimum number of operations required to make the array non-decreasing. if not arr: return 0 operations = 0 for i in range(1, len(arr)): if arr[i] < arr[i - 1]: operations += arr[i - 1] - arr[i] arr[i] = arr[i - 1] return operations"},{"question":"A new startup in the food delivery business is looking to optimize the routes of its delivery trucks. They want to implement an algorithm to determine the minimum number of trips required to deliver all the food packages. Each delivery truck has a weight capacity limit, and the packages have different weights. You need to distribute the packages to the trucks in such a way that the sum of the weights in each truck does not exceed the capacity. Given the number of packages, their respective weights, and the capacity of a truck, determine the minimum number of trucks required to transport all the packages. First line contains number N (1 leq N leq 1000) representing total number of packages. Next line contains N integer numbers w_i (1 leq w_i leq 1000) separated by a single space, representing weights of each package. Last line contains a single integer C (1 leq C leq 1000) representing the weight capacity of a truck. Output one integer representing the minimum number of trucks required to transport all packages. Example: Input: ``` 5 5 7 6 3 4 10 ``` Output: ``` 3 ``` Explanation: - Truck 1 carries packages with weights 5 and 3 (Total = 8 ≤ 10) - Truck 2 carries packages with weights 7 (Total = 7 ≤ 10) - Truck 3 carries packages with weights 6 and 4 (Total = 10 ≤ 10)","solution":"def minimum_trucks(N, weights, C): Determine the minimum number of trucks required to transport all packages given their weights and the truck capacity. weights.sort(reverse=True) # Sort weights in descending order trucks = [] for w in weights: placed = False for i in range(len(trucks)): if trucks[i] + w <= C: trucks[i] += w placed = True break if not placed: trucks.append(w) return len(trucks)"},{"question":"Little Petya recently encountered an interesting problem involving strings. He has a string s of length n consisting only of characters a and b. Petya wants to create a new string by performing a series of operations. Each operation allows him to select any substring of the current string and reverse it. Petya\'s goal is to find the lexicographically smallest string possible after using the described operation any number of times. Can you help Petya determine this smallest lexicographical string? The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string s. The second line contains the string s consisting only of characters a and b. Print the lexicographically smallest string possible after any number of substring reversals. # Example Input: ``` 4 abba ``` Output: ``` aabb ``` Input: ``` 2 ba ``` Output: ``` ab ```","solution":"def lexicographically_smallest_string(s): Return the lexicographically smallest string possible by reversing any substrings. return \'\'.join(sorted(s))"},{"question":"A company wants to optimize its network of servers. The servers are connected by bidirectional cables. The goal is to ensure that there is one unique path between any two servers. If removing any single cable causes the network to be disconnected or there are multiple paths between some servers, it needs reconfiguration. Given the number of servers and the list of cables connecting these servers, determine if the network is already optimized or needs reconfiguration. The first line of input contains an integer n, (2 ≤ n ≤ 105), denoting the number of servers. The second line contains an integer m, (1 ≤ m ≤ 105), denoting the number of cables. The next m lines each contain two integers u and v, (1 ≤ u, v ≤ n), denoting that there is a cable between server u and server v. Print \\"OPTIMIZED\\" if the network is already optimized, otherwise print \\"RECONFIGURE\\".","solution":"def is_network_optimized(n, m, connections): Determines if the network is optimized with the given number of servers and cables. Parameters: n (int): Number of servers. m (int): Number of cables. connections (List[Tuple[int, int]]): List of tuples, each representing a cable connecting two servers. Returns: str: \\"OPTIMIZED\\" if the network is optimized, otherwise \\"RECONFIGURE\\". if m != n - 1: return \\"RECONFIGURE\\" from collections import defaultdict, deque # Create an adjacency list for the graph graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) # Using BFS to check if the graph is connected visited = set() queue = deque([1]) visited.add(1) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # After BFS, if we have visited all nodes, graph is connected return \\"OPTIMIZED\\" if len(visited) == n else \\"RECONFIGURE\\""},{"question":"In a city, there are n intersections, each numbered from 0 to n-1, and m bidirectional roads connecting these intersections. The mayor wants to know the minimum number of roads that need to be constructed in order to make all intersections reachable from any other intersection. Each road connects two intersections a and b where 0 ≤ a, b < n. Write a function `minNewRoads(n: int, roads: List[Tuple[int, int]]) -> int` to find the minimum number of new roads required. **Function Signature:** ```python def minNewRoads(n: int, roads: List[Tuple[int, int]]) -> int: pass ``` **Input:** - An integer n, 0 < n ≤ 100, representing the number of intersections. - A list of tuples roads, where each tuple (a, b) represents a road between intersections a and b. It is guaranteed that the list won\'t contain duplicate roads. **Output:** - Return an integer representing the minimum number of new roads required to ensure every pair of intersections are reachable from each other. **Example:** ```python assert minNewRoads(4, [(0, 1), (1, 2)]) == 1 assert minNewRoads(6, [(0, 1), (0, 2), (3, 4)]) == 2 ``` **Explanation:** - In the first example, you need to add a road between intersections 2 and 3 to make all intersections reachable. - In the second example, at least two roads are required to connect the separate components: one new road between one of (0, 1, 2) group and one of (3, 4) group, and another between group (3, 4) and (5) for full connectivity.","solution":"from typing import List, Tuple def minNewRoads(n: int, roads: List[Tuple[int, int]]) -> int: # Create a graph representation graph = {i: [] for i in range(n)} for a, b in roads: graph[a].append(b) graph[b].append(a) def dfs(node, visited): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) # Find all connected components visited = set() num_components = 0 for i in range(n): if i not in visited: dfs(i, visited) num_components += 1 # To connect all components, we need (num_components - 1) roads return num_components - 1"},{"question":"You are given an integer array nums and an integer target. Return indices of the two numbers such that they add up to target. Assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers representing the elements of the array nums (−10^9 ≤ nums[i] ≤ 10^9). The third line contains an integer target (−10^9 ≤ target ≤ 10^9). Print two integers in a single line corresponding to the indices of the two numbers such that they add up to target. If there are multiple valid answers, print any of them. Remember that the array is 0-indexed.","solution":"def two_sum(nums, target): Returns indices of the two numbers such that they add up to the given target. Args: nums: List of integers. target: The target sum integer. Returns: A tuple of two integers representing indices of the two numbers. seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return (seen[complement], i) seen[num] = i"},{"question":"Jessica loves to collect prime numbers and she has recently encountered a fascinating problem. She wants to find the highest prime number less than or equal to a given number n. Could you help her accomplish this task? The input consists of a single integer n (1 leq n leq 10^7). Your task is to find the largest prime number less than or equal to n. If there is no prime number less than or equal to n, print “No prime number available”. Input: - A single line containing the integer n. Output: - A single line displaying the largest prime number less than or equal to n or “No prime number available” if no such number exists. Example: Input: 10 Output: 7","solution":"def is_prime(num): Helper function to check if a number is prime. Returns True if num is prime, else False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def highest_prime(n): Returns the highest prime number less than or equal to n. If no prime number is available, returns the string \\"No prime number available\\". for num in range(n, 1, -1): if is_prime(num): return num return \\"No prime number available\\""},{"question":"You are given a binary tree with `n` nodes, where each node has a unique value from 1 to `n`. The tree is represented by its adjacency list. Your task is to determine the maximum possible sum of values in any path from the root node to a leaf node. The input provides the tree in the form of pairs of edges. The first line of the input contains an integer `n` (`1 ≤ n ≤ 10^5`) — the number of nodes in the binary tree. The next `n-1` lines each contain two integers `u` and `v` (`1 ≤ u, v ≤ n`), representing an edge between nodes `u` and `v`. Print one integer — the maximum possible sum of values in any path from the root node to a leaf node. Input constraints: * The tree is guaranteed to be connected. * The tree is rooted at node `1`. **Example Input:** ``` 5 1 2 1 3 2 4 2 5 ``` **Example Output:** ``` 11 ``` Explanation: In the given binary tree: - Path from the root to leaf node 4: 1 → 2 → 4 (sum = 1 + 2 + 4 = 7) - Path from the root to leaf node 5: 1 → 2 → 5 (sum = 1 + 2 + 5 = 8) - Path from the root to leaf node 3: 1 → 3 (sum = 1 + 3 = 4) The maximum sum path is from the root (node 1) to node 5, resulting in a sum of 1 + 2 + 5 = 8.","solution":"from collections import defaultdict def max_sum_path_in_tree(n, edges): def dfs(node, parent): max_sum = 0 for neighbor in tree[node]: if neighbor != parent: max_sum = max(max_sum, dfs(neighbor, node)) return node + max_sum tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) return dfs(1, -1) # Example usage n = 5 edges = [(1, 2), (1, 3), (2, 4), (2, 5)] print(max_sum_path_in_tree(n, edges)) # Output: 8"},{"question":"You are given a sequence of n integers a1, a2, ..., an. You want to create an array b of the same length such that each element bi is the product of all elements in the original array except ai, but you want to do this without using division and in O(n) time. Input format: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements. - The second line contains n space-separated integers, each ai (|ai| ≤ 100). Output format: - Print n space-separated integers, the elements of array b. Example: Input: 5 1 2 3 4 5 Output: 120 60 40 30 24","solution":"def product_except_self(nums): n = len(nums) if n == 1: return [0] # case when there is only one element # Initialize prefix and suffix product arrays prefix_products = [1] * n suffix_products = [1] * n result = [1] * n # Calculate prefix products for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * nums[i - 1] # Calculate suffix products for i in range(n - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * nums[i + 1] # Calculate result array for i in range(n): result[i] = prefix_products[i] * suffix_products[i] return result"},{"question":"You are given a grid with dimensions n times m. Initially, each cell of the grid contains a value of 0. You can perform an operation of incrementing all values in a subgrid defined by the top-left corner (r_1, c_1) and the bottom-right corner (r_2, c_2) by a positive integer x. You are given a grid of size n times m with nonnegative integers, and you need to determine if it is possible to achieve this grid by performing the described operations. If it is possible, output the sequence of operations that leads to the given configuration. The constraints on the operations are listed in the output format section. The first line contains two integers, n and m (1 le n, m le 50) — the number of rows and columns in the grid. Each of the next n lines contains m integers g_{i,j} (0 le g_{i,j} le 1000) representing the target grid. If there is no sequence of operations that can achieve the given configuration, output \\"NO\\". If it is possible, output \\"YES\\" on the first line. In the second line output k — the number of operations to apply (0 le k le 100). In the next k lines, output the operations in the following format: r_1, c_1, r_2, c_2, x (1 le r_1 le r_2 le n, 1 le c_1 le c_2 le m, 1 le x le 1000), where r_1, c_1 is the top-left corner and r_2, c_2 is the bottom-right corner of the subgrid, and x is the integer to increment all values in the subgrid. The configuration from the first sample is as follows: 3 3 2 2 2 2 2 2 2 2 2 Having an initial grid as described and achieving the target configuration using the subgrid increment operations is detailed below: YES 1 1 1 3 3 2 The sequence of operations is illustrated as incrementing the entire grid from (1, 1) to (3, 3) by 2.","solution":"def check_grid_possible(n, m, grid): # Step 1: Check for the possible solution by ensuring all cells have the same value target_val = grid[0][0] for i in range(n): for j in range(m): if grid[i][j] != target_val: return \\"NO\\" # Step 2: If all values are equal, output the appropriate operation if target_val == 0: return \\"YESn0\\" else: # Range is entire grid, increment value is target_val return f\\"YESn1n1 1 {n} {m} {target_val}\\" # Usage of check_grid_possible function n, m = 3, 3 grid = [ [2, 2, 2], [2, 2, 2], [2, 2, 2] ] print(check_grid_possible(n, m, grid))"},{"question":"Cornelia loves solving puzzles and has recently come across a unique type of numeric puzzle involving square grids. The puzzle consists of an n times n grid where each cell contains a number from 1 to n. The goal of the puzzle is to check if the grid satisfies a special property: Each number from 1 to n should appear exactly once in each row and exactly once in each column. Such a grid is known as a Latin square. Given a grid, Cornelia wants to determine if the grid is a Latin square. # Input The first line contains an integer n (1 le n le 100) — the size of the grid. Each of the following n lines contains n integers, where the j-th integer in the i-th line represents the value in the cell at row i, column j (1 le text{value} le n). # Output Print \\"YES\\" if the grid is a Latin square, otherwise print \\"NO\\". # Example Input ``` 3 1 2 3 2 3 1 3 1 2 ``` Output ``` YES ``` Input ``` 3 1 2 3 2 1 1 3 1 1 ``` Output ``` NO ``` # Note In the first example, each number from 1 to 3 appears exactly once in each row and exactly once in each column. Therefore, the grid is a Latin square. In the second example, the number 1 appears more than once in the second and third rows and columns. Therefore, the grid is not a Latin square.","solution":"def is_latin_square(n, grid): Returns \\"YES\\" if the grid is a Latin square, otherwise returns \\"NO\\". for i in range(n): if len(set(grid[i])) != n: return \\"NO\\" column_set = set() for j in range(n): column_set.add(grid[j][i]) if len(column_set) != n: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of integers which is guaranteed to be either in ascending or descending order. Implement a function that takes this list as an input and returns `True` if the list is sorted in ascending order and `False` if it is sorted in descending order. Your code should have the following signature: ```python def is_ascending_order(arr: List[int]) -> bool: ```","solution":"from typing import List def is_ascending_order(arr: List[int]) -> bool: Returns True if the given list is sorted in ascending order, else returns False. return arr == sorted(arr)"},{"question":"Consider you are working on a file system simulation module. You need to develop a function that takes a series of file system commands and processes them accordingly to simulate the behavior of a basic file system. The supported commands are: - `CREATE path`: Creates a new file at the given `path`. If a file already exists at `path`, an error should be reported. - `DELETE path`: Deletes the file at the given `path`. If no file exists at `path`, an error should be reported. - `MOVE srcPath destPath`: Moves the file from `srcPath` to `destPath`. If no file exists at `srcPath` or a file already exists at `destPath`, an error should be reported. You can assume that all paths are given as absolute paths starting with `/` and they do not contain spaces. Write a function `simulateFileSystem` that takes a list of strings representing the commands and returns a list of strings representing the result of each command. If a command is successful, return \\"SUCCESS\\". If a command fails, return an error message \\"ERROR: {error_description}\\" where `{error_description}` is the reason for the failure. Example usage: ```python simulateFileSystem([ \\"CREATE /a\\", \\"CREATE /a/b\\", \\"MOVE /a/b /a/c\\", \\"DELETE /a/c\\", \\"DELETE /a/b\\" ]) ``` Expected output: ```python [ \\"SUCCESS\\", \\"SUCCESS\\", \\"SUCCESS\\", \\"SUCCESS\\", \\"ERROR: /a/b does not exist\\" ] ```","solution":"def simulateFileSystem(commands): filesystem = set() results = [] for command in commands: parts = command.split() action = parts[0] if action == \\"CREATE\\": path = parts[1] if path in filesystem: results.append(f\\"ERROR: {path} already exists\\") else: filesystem.add(path) results.append(\\"SUCCESS\\") elif action == \\"DELETE\\": path = parts[1] if path not in filesystem: results.append(f\\"ERROR: {path} does not exist\\") else: filesystem.remove(path) results.append(\\"SUCCESS\\") elif action == \\"MOVE\\": srcPath = parts[1] destPath = parts[2] if srcPath not in filesystem: results.append(f\\"ERROR: {srcPath} does not exist\\") elif destPath in filesystem: results.append(f\\"ERROR: {destPath} already exists\\") else: filesystem.remove(srcPath) filesystem.add(destPath) results.append(\\"SUCCESS\\") return results"},{"question":"Vova has become intrigued by a different problem involving weighted undirected graphs. Recall the definition: let G = (V, E) be an undirected graph where each edge e in E has a non-negative integer weight w_e. A spanning tree of G is a subgraph T = (V, E_T) such that T is connected and acyclic, and E_T is a subset of E. The weight of a spanning tree is the sum of weights of the edges in the spanning tree. Vova wonders about the minimum spanning tree (MST) of such graphs. Specifically, he is interested in how the graph\'s edges change the MST when new constraints are introduced. Consider that each edge weight w_e in G can be described as a linear function of a variable t: w_e(t) = a_e t + b_e, where a_e and b_e are constants specific to an edge e in E, and t is a real variable within a segment [0, 1]. Vova wants to determine the probability that the weight of the MST is less than or equal to a given value W when t is chosen at random from a uniform distribution on [0, 1]. The first line contains three integers n, m, and W (1 leq n leq 500, 1 leq m leq 1000, 0 leq W leq 10^6). Each of the next m lines describes the edges of the graph in the format u_e, v_e, a_e, b_e (1 leq u_e, v_e leq n, -10^3 leq a_e leq 10^3, 0 leq b_e leq 10^4), where u_e and v_e are the endpoints of the edge e and the remaining 2 integers describe the linear function for the weight of the edge. It is guaranteed that for any t in [0, 1] and for any edge e in E the weight w_e(t) will satisfy 0 leq w_e(t) leq 10^4. Print a single real number — the probability that the weight of the MST of the graph G is at most W when t is chosen uniformly at random from the segment [0, 1]. Your answer is considered correct if its absolute difference from the jury\'s answer is not greater than 10^{-6}. In the first example, the spanning tree\'s weight depends on how t affects the edge weights through their linear functions.","solution":"import random import numpy as np import networkx as nx def compute_mst_probability(n, m, W, edges): Computes the probability that the weight of the MST of the graph G is at most W when t is chosen uniformly at random from the segment [0, 1]. Parameters: n (int): Number of nodes in the graph m (int): Number of edges in the graph W (int): Weight threshold edges (list of tuples): Each tuple contains (u, v, a, b) representing an edge between u and v with weight function w_e(t) = a*t + b Returns: float: The probability that the MST weight is <= W def weight(t, a, b): return a * t + b samples = 10000 count = 0 for _ in range(samples): t = random.uniform(0, 1) G = nx.Graph() for u, v, a, b in edges: G.add_edge(u, v, weight=weight(t, a, b)) mst_weight = sum(data[\'weight\'] for u, v, data in nx.minimum_spanning_edges(G, data=True)) if mst_weight <= W: count += 1 return count / samples # Example usage n = 3 m = 3 W = 15 edges = [ (1, 2, 2, 1), (2, 3, 3, 2), (1, 3, 1, 3) ] print(f\\"Probability: {compute_mst_probability(n, m, W, edges)}\\")"},{"question":"Arlen is fascinated with trees and exploring various algorithms that involve tree structures. He particularly enjoys working with Binary Search Trees (BST). Arlen wants to write a program that allows him to insert and delete nodes from a BST, and also query the tree to find the kth smallest element. The details of the operations are as follows: 1. Insert: Add a node with a specific value to the BST. 2. Delete: Remove a node with a specific value from the BST. If the value does not exist, ignore the operation. 3. Query: Find the kth smallest element in the BST. Arlen dislikes exceptions, so it is guaranteed that every query will ask for a valid kth smallest element (1 ≤ k ≤ current size of the BST). Input: - The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of operations Arlen wants to perform. - The following n lines describe the operations. Each line contains two integers: the first integer ai (1 ≤ ai ≤ 3) represents the type of operation (1 for insert, 2 for delete, 3 for query), and the second integer xi (1 ≤ xi ≤ 10^9 for insert/delete commands and 1 ≤ xi ≤ current BST size for query commands) is the value associated with the operation. Output: - For each query operation, output the kth smallest element in the BST on a new line. Example: Input: 8 1 5 1 3 1 7 3 2 2 3 3 1 1 6 3 3 Output: 5 5 7","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None self.size = 1 # To keep the size of the subtree including this node class BST: def __init__(self): self.root = None def update_size(self, node): if node: node.size = 1 + self.get_size(node.left) + self.get_size(node.right) def get_size(self, node): return node.size if node else 0 def insert(self, key): self.root = self._insert(self.root, key) def _insert(self, node, key): if not node: return TreeNode(key) if key < node.key: node.left = self._insert(node.left, key) elif key > node.key: node.right = self._insert(node.right, key) self.update_size(node) return node def delete(self, key): self.root = self._delete(self.root, key) def _delete(self, node, key): if not node: return node if key < node.key: node.left = self._delete(node.left, key) elif key > node.key: node.right = self._delete(node.right, key) else: if not node.left: return node.right if not node.right: return node.left temp = self.find_min(node.right) node.key = temp.key node.right = self._delete(node.right, temp.key) self.update_size(node) return node def find_min(self, node): while node.left: node = node.left return node def kth_smallest(self, k): return self._kth_smallest(self.root, k) def _kth_smallest(self, node, k): left_size = self.get_size(node.left) if k <= left_size: return self._kth_smallest(node.left, k) elif k == left_size + 1: return node.key else: return self._kth_smallest(node.right, k - left_size - 1) def process_operations(operations): bst = BST() result = [] for op, value in operations: if op == 1: bst.insert(value) elif op == 2: bst.delete(value) elif op == 3: result.append(bst.kth_smallest(value)) return result"},{"question":"Alice loves playing with prime numbers and often wonders about the prime gaps. She defines the \\"prime gap\\" between two primes (p_1) and (p_2) as (p_2 - p_1) where (p_2 > p_1). She is particularly keen on finding the longest prime gap within a given range of numbers. Given two integers (a) and (b) ((2 leq a < b leq 10^6)), help Alice find the largest prime gap within this range. If there are no primes within the range, return -1. For example, if (a = 2) and (b = 19), prime numbers in this range are (2, 3, 5, 7, 11, 13, 17, 19). The largest prime gap is between (13) and (17), which is (17 - 13 = 4). # Input: - Two integers (a) and (b) where (2 leq a < b leq 10^6). # Output: - A single integer representing the largest prime gap within the provided range. If no primes exist within the range, return -1. # Example Input: (2 19) # Example Output: (4) **Note:** - The input ensures the range will always be valid, that is (a) will always be less than (b), and both will be within the specified limits. - You may use a prime sieve algorithm for generating prime numbers up to (10^6) efficiently.","solution":"def sieve_of_eratosthenes(limit): is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False p = 2 while p * p <= limit: if is_prime[p]: for i in range(p * p, limit + 1, p): is_prime[i] = False p += 1 return is_prime def find_largest_prime_gap(a, b): is_prime = sieve_of_eratosthenes(b) primes_in_range = [num for num in range(a, b + 1) if is_prime[num]] if len(primes_in_range) < 2: return -1 max_gap = 0 for i in range(1, len(primes_in_range)): gap = primes_in_range[i] - primes_in_range[i - 1] if gap > max_gap: max_gap = gap return max_gap"},{"question":"Heidi finds herself in yet another peculiar situation - this time in the depths of a medieval dungeon. To escape, she needs to solve a puzzle involving ancient numerology and get past the enchanted door. The door is operated by an array of integers, and Heidi needs to convert this array into a specially ordered sequence that the door recognizes as a \\"valid\\" sequence. The transformation must adhere to these rules: - The sequence must form a palindrome. - Heidi can remove any number of elements from the array, but she cannot change the order of the remaining elements. - The sequence should be the longest possible palindrome that can be formed from the array. Heidi\'s eager to escape, and she needs you to write a program that will help her determine the length of the longest palindromic subsequence she can form from the given array. # Input The first line of the input contains a single integer T (1 ≤ T ≤ 100): the number of test cases. Each test case starts with an integer N (1 ≤ N ≤ 1000), indicating the number of integers in the array. The next line contains N integers ai (1 ≤ ai ≤ 10000), representing the elements of the array. # Output For each test case, output a single integer – the length of the longest palindromic subsequence that can be formed from the given array. # Sample Input ``` 3 5 1 2 3 2 1 4 1 2 3 4 6 1 2 1 2 2 1 ``` # Sample Output ``` 5 1 5 ``` # Explanation In the first test case, the array [1, 2, 3, 2, 1] is already a palindrome, so its length is 5. In the second test case, the longest palindromic subsequence is any single element, so the length is 1. In the third test case, the longest palindromic subsequence is [1, 2, 2, 1] with length 4. Can you help Heidi escape the dungeon by providing her the correct answers?","solution":"def longest_palindromic_subsequence_length(arr): n = len(arr) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if arr[i] == arr[j] and cl == 2: dp[i][j] = 2 elif arr[i] == arr[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def solve_puzzle(test_cases): results = [] for case in test_cases: n, arr = case results.append(longest_palindromic_subsequence_length(arr)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) array = list(map(int, lines[index + 1].split())) test_cases.append((N, array)) index += 2 return test_cases def generate_output(results): output_list = [str(result) for result in results] return \\"n\\".join(output_list)"},{"question":"Maxwell the Hedgehog loves playing with tiles. He has a grid of size n x n, where each cell either contains a stone or is empty. Maxwell wants to know how many distinct paths there are from the top-left corner to the bottom-right corner of the grid such that each path only moves right or down one cell at a time and does not pass through any cells containing a stone. Your task is to help Maxwell determine this number. Note that the grid configurations can be large, so you should take optimizations into consideration. The first line of the input contains two integers, n (1 ≤ n ≤ 1000), which is the size of the grid, and m (0 ≤ m ≤ n²), which is the number of cells that contain stones. Each of the next m lines contains two integers, xi and yi (1 ≤ xi, yi ≤ n), which indicate the coordinates of a cell containing a stone. The output should be a single integer, representing the number of distinct paths from the top-left corner to the bottom-right corner modulo 1000000007. If there is no such path, print 0. Example: Input: 3 2 2 2 3 1 Output: 1","solution":"def distinct_paths(n, m, stones): MOD = 1000000007 # Create a grid to mark cells containing stones grid = [[0 for _ in range(n)] for _ in range(n)] for x, y in stones: grid[x-1][y-1] = -1 # mark stones as -1 # Create a DP table to store the number of ways to reach each cell dp = [[0 for _ in range(n)] for _ in range(n)] # Starting point if grid[0][0] != -1: dp[0][0] = 1 # Fill the DP table for i in range(n): for j in range(n): if grid[i][j] == -1: dp[i][j] = 0 # no paths through a stone else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][n-1] # Example usage: n = 3 m = 2 stones = [(2, 2), (3, 1)] print(distinct_paths(n, m, stones)) # Output: 1"},{"question":"You are given an array of integers, and you need to find the maximum sum of a contiguous subarray with at most one deletion. In other words, you need to find whether there is a subarray (i.e., sequence of consecutive elements) that can achieve a higher sum by deleting one element from it. The first line contains a single integer n (1 leq n leq 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (-10^4 leq a_i leq 10^4), the elements of the array. Output a single integer representing the maximum sum of a contiguous subarray with at most one deletion. Examples: Input: 6 1 -2 0 3 -1 2 Output: 5 Input: 5 -1 -1 -1 -1 -1 Output: -1 Explanation: In the first example, you can achieve the maximum sum by choosing the subarray [3, -1, 2] and deleting -1, resulting in 3 + 2 = 5. In the second example, the maximum sum is achieved without any deletions, as deleting any element won\'t change the maximum subarray sum from -1.","solution":"def max_sum_subarray_with_one_deletion(arr): n = len(arr) if n == 0: return 0 # Initialize arrays to store maximum sum subarray ending at each index without deletion and with one deletion no_deletion = [0] * n one_deletion = [0] * n # Set the first element no_deletion[0] = arr[0] one_deletion[0] = 0 # No element to delete at the start max_sum = arr[0] for i in range(1, n): no_deletion[i] = max(arr[i], no_deletion[i - 1] + arr[i]) one_deletion[i] = max(no_deletion[i - 1], one_deletion[i - 1] + arr[i]) max_sum = max(max_sum, no_deletion[i], one_deletion[i]) return max_sum"},{"question":"Given a list of `n` integers and a set of `m` queries, each query consists of a pair of indices (l, r). For each query, find the sum of the Fibonacci values of the integers in the list from index l to r (inclusive). The integers in the list can be positive, negative, or zero. To efficiently process the queries, precompute the Fibonacci values for a reasonably large range of integers to avoid recalculations. Note that the Fibonacci series is defined as follows: ``` F(0) = 0 F(1) = 1 F(n) = F(n-1) + F(n-2) for n > 1 ``` For negative integers, we use the fact that: ``` F(-n) = (-1)^(n+1) * F(n) ``` # Input: - The first line contains a single integer `n` (1 ≤ n ≤ 10^5), the number of integers in the list. - The second line contains `n` space-separated integers `a[i]` (-10^5 ≤ a[i] ≤ 10^5). - The third line contains a single integer `m` (1 ≤ m ≤ 10^5), the number of queries. - Each of the next `m` lines contains two space-separated integers `l` and `r` (1 ≤ l ≤ r ≤ n), representing a query for the subsegment from index `l` to `r`. # Output: For each query, output a single integer, which is the sum of the Fibonacci values of the integers in the subsegment of the list specified by the query. # Example: Input: ``` 5 1 2 3 4 5 3 1 3 2 4 1 5 ``` Output: ``` 4 7 12 ``` # Note: - In the example, the Fibonacci values of the elements in the list `[1, 2, 3, 4, 5]` are `[1, 1, 2, 3, 5]`, respectively. - For the first query (1, 3), the sum is `1 + 1 + 2 = 4`. - For the second query (2, 4), the sum is `1 + 2 + 3 = 6`. - For the third query (1, 5), the sum is `1 + 1 + 2 + 3 + 5 = 12`.","solution":"def generate_fibonacci(max_value): Generate Fibonacci sequence up to the absolute value of max_value. Also handles negative integers using F(-n) = (-1)^(n+1) * F(n). fib = {0: 0, 1: 1} for i in range(2, max_value + 1): fib[i] = fib[i - 1] + fib[i - 2] # Handle negative Fibonacci numbers for i in range(1, max_value + 1): fib[-i] = (-1)**(i+1) * fib[i] return fib def preprocess_list(lst, fib): Precompute the Fibonacci values of the list elements and generate prefix sums for efficient range queries. n = len(lst) fib_values = [fib[x] for x in lst] prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + fib_values[i - 1] return prefix_sums def query_sum(prefix_sums, l, r): Calculate the sum for the query range [l, r]. return prefix_sums[r] - prefix_sums[l - 1]"},{"question":"You are given a matrix of integers with dimensions N x M. Your task is to identify the size of the largest square sub-matrix that contains all 1s. You need to answer T queries, each containing a different matrix. The first line of the input contains T (1 ≤ T ≤ 100) - the number of queries. For each query: - The first line contains two integers N and M (1 ≤ N, M ≤ 500) - the dimensions of the matrix. - The next N lines contain M integers each (0 or 1) which represent the elements of the matrix. For each query, print a single line with an integer that represents the size of the largest square sub-matrix consisting of all 1s. # Example Input ``` 2 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 4 4 0 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 ``` Output ``` 2 3 ``` # Explanation For the first matrix, the size of the largest square sub-matrix with all 1s is 2 (sub-matrix formed by the bottom-right corner). ``` 1 1 1 1 ``` For the second matrix, the size is 3. ``` 1 1 1 1 1 1 1 1 1 ```","solution":"def largest_square_submatrix(matrix): n = len(matrix) m = len(matrix[0]) # Create a DP table to store the size of the largest square ending at (i, j) dp = [[0] * m for _ in range(n)] max_size = 0 # Iterate over the matrix to fill the DP table for i in range(n): for j in range(m): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) return max_size def solve_largest_square_submatrix(queries): results = [] for n, m, matrix in queries: results.append(largest_square_submatrix(matrix)) return results"},{"question":"In a remote village, there is a unique and large barn that stores several kinds of grains. To efficiently utilize the grains, the barn manager needs to manage the grains in a unique way. Each type of grain has a specific weight and there are multiple stacks for each type of grain. Given a list of grain types where each type has multiple stacks, and each stack\'s number of grains, the barn manager wants to redistribute the grains into the same number of stacks, but each stack should have equal number of grains, if possible. If it\'s not possible to exactly distribute the grains, calculate the minimum positive difference that can be achieved between the stacks after redistribution. You need to determine either: 1. The exact number of grains each stack can have after redistribution if they can be exactly distributed, or 2. The minimum positive difference between the stacks after trying to redistribute the grains as evenly as possible. # Input: - The first line contains a single integer N, the number of grain types (1 ≤ N ≤ 100). - For each of the next N lines, the first integer indicates the number of stacks Si (1 ≤ Si ≤ 100), and then Si integers indicate the number of grains in each stack of the i-th grain type (each stack has at most 10^9 grains). # Output: - If it is possible to exactly redistribute the grains so each stack has the same number of grains, output that number. - Otherwise, output the minimum positive difference that can be achieved after attempting to redistribute the grains as evenly as possible. # Example: Input: ``` 2 3 4 8 6 2 5 15 ``` Output: ``` 6 ``` Explanation: For the first grain type, we can redistribute the grains as [6, 6, 6] which is achievable. For the second grain type, we can only achieve redistribution with a minimum positive difference. The closest we can get is [10, 10], resulting in a zero difference.","solution":"def redistribute_grains(N, grains_info): def find_min_possible_difference(stacks): total_grains = sum(stacks) num_stacks = len(stacks) average_grains = total_grains // num_stacks remainder = total_grains % num_stacks if remainder == 0: return 0 lower_bound = average_grains upper_bound = average_grains + 1 lower_remainder = remainder upper_remainder = num_stacks - remainder min_difference = min(lower_remainder * upper_bound - lower_remainder * lower_bound, upper_remainder * upper_bound - upper_remainder * lower_bound) return min_difference results = [] for grain_type in grains_info: stacks = grain_type[1] if sum(stacks) % len(stacks) == 0: results.append(sum(stacks) // len(stacks)) else: results.append(find_min_possible_difference(stacks)) if all(isinstance(i, int) for i in results): return results[0] if len(set(results)) == 1 else min(results) else: return min(i for i in results if isinstance(i, int) or i > 0) # Utility function to extract input data def get_grains_info(input_data): lines = input_data.strip().split(\'n\') N = int(lines[0]) grains_info = [] for i in range(1, N + 1): numbers = list(map(int, lines[i].split())) grains_info.append((numbers[0], numbers[1:])) return N, grains_info"},{"question":"You are given an array of integers a of length n, and an integer k. Your task is to find the number of distinct pairs of integers (a_i, a_j) (where i < j) in the array such that their sum is equal to k. For example, if a = [1, 5, 7, -1, 5] and k = 6, the distinct pairs are: - (1, 5) - (7, -1) - (1, 5) again which is the same as the first pair so it shouldn’t be repeated. Thus, the output will be 2. The first line contains two integers n and k (1 le n le 10^5 and -10^9 le k le 10^9). The second line contains n integers representing the elements of the array a (-10^9 le a_i le 10^9). Output a single integer, the number of distinct pairs satisfying the condition.","solution":"def count_distinct_pairs_with_sum(a, k): Returns the count of distinct pairs (a_i, a_j) such that i < j and a_i + a_j = k. seen = set() pairs = set() for num in a: target = k - num if target in seen: pairs.add((min(num, target), max(num, target))) seen.add(num) return len(pairs)"},{"question":"A gardener has planted `n` flower beds in a linear row. Each flower bed `i` has a type `t[i]` where `1 <= t[i] <= k`. The gardener wants to make the garden as interesting as possible by having each type of flower bed appearing at least once in a contiguous subarray. However, the longer the subarray, the harder it is to maintain. Thus, the gardener wants to find the shortest contiguous subarray that contains all the different types of flower beds. Write a function `shortest_flower_bed_segment(n, k, t)` that takes in three parameters: - `n` (1 <= n <= 100,000): an integer representing the number of flower beds. - `k` (1 <= k <= 100,000): an integer representing the number of different types of flower beds. - `t` (an array of integers of length `n`): each integer representing the type of the flower bed at position `i`. The function should return a tuple (L, R) indicating the starting and ending positions (1-based) of the shortest contiguous subarray that contains all `k` different types of flower beds. If there are multiple answers, return the one with the smallest starting position. If there is no such subarray, return `(-1, -1)`. # Example Input: ```python n = 7 k = 3 t = [1, 2, 1, 3, 2, 1, 2] ``` Output: ```python (2, 4) ``` Explanation: The shortest contiguous subarray containing all three types of flower beds (1, 2, and 3) starts at position 2 and ends at position 4. The subarray is [2, 1, 3]. # Constraints: - The input list `t` will always have at least one flower bed of each type from 1 to k. - Guarantee that there exists at least one subarray containing all `k` different types of flower beds.","solution":"def shortest_flower_bed_segment(n, k, t): required_types = set(range(1, k+1)) found_types = {} min_length = float(\'inf\') best_L, best_R = -1, -1 start = 0 for end in range(n): if t[end] in found_types: found_types[t[end]] += 1 else: found_types[t[end]] = 1 while len(found_types) == k: if end - start + 1 < min_length: min_length = end - start + 1 best_L, best_R = start + 1, end + 1 found_types[t[start]] -= 1 if found_types[t[start]] == 0: del found_types[t[start]] start += 1 return (best_L, best_R)"},{"question":"You are given a list of integers, and you need to perform a series of operations on this list. In each operation, you can select exactly two elements from the list and replace them with their greatest common divisor (GCD) and least common multiple (LCM). After any number of operations, determine the maximum possible number of equal integers in the list. For example, given the list [12, 15, 6, 18], one of the possible transformations can be: 1. Select 12 and 18: Replace with GCD(12, 18) = 6 and LCM(12, 18) = 36, resulting in the list [6, 15, 6, 36]. 2. Select 6 and 15: Replace with GCD(6, 15) = 3 and LCM(6, 15) = 30, resulting in the list [3, 6, 36, 30]. Eventually, you aim to maximize the count of identical numbers in the list through any such sequence of operations. Input: - The first line contains an integer `t` (1 ≤ t ≤ 100) representing the number of test cases. - The first line of each test case contains an integer `n` (1 ≤ n ≤ 100) representing the size of the list. - The second line of each test case contains `n` integers representing the list elements. Output: For each test case, output the maximum possible number of equal integers that can be obtained in the list after any number of operations. Example: Input: ``` 2 4 12 15 6 18 3 17 34 68 ``` Output: ``` 2 3 ``` Explanation: - In the first test case, one possible way to maximize the number of identical integers is explained above. The maximum number of identical integers that can be achieved is 2. - In the second test case, all numbers can eventually be replaced by 1 through repeated operations of GCD and LCM. Thus, the maximum number of identical integers is 3.","solution":"from math import gcd from functools import reduce def max_equal_integers(arr): Returns the maximum number of equal integers that can be obtained in the list after any number of operations. # The idea is to get the GCD of the entire list. # Because GCD of all numbers is the value all numbers can be reduced to. overall_gcd = reduce(gcd, arr) # The maximum number of equal integers obtainable is the length of the list # as all integers can eventually become the GCD of the entire list. return len(arr) def process_test_cases(t, test_cases): results = [] for n, arr in test_cases: results.append(max_equal_integers(arr)) return results # Read inputs is assumed to be handled externally as this code focuses on logical implementation"},{"question":"In a country called TreeLand, there are n trees, numbered 1 through n. The trees are connected by n-1 one-way roads, forming a directed tree. Each road connects exactly two trees and ensures that there is a unique path from the root tree (tree 1) to any other tree. The President of TreeLand, Mr. Oak, is interested in a new tree arrangement. He wishes to choose two trees a and b, and find two separate paths from the root tree to both of them. The paths should not share any trees except for the root. Given the structure of the tree, Mr. Oak wants to know if it\'s possible to find such two paths for the chosen trees. If it is possible, print \\"Yes\\" and the two paths; otherwise, print \\"No\\". The first line of the input contains an integer n (2 ≤ n ≤ 1000) — the number of trees in TreeLand. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) describing a one-way road from tree u to tree v. The last line contains two distinct integers a and b (2 ≤ a, b ≤ n) — the specific trees Mr. Oak is interested in. Print \\"No\\" if it\'s impossible to find such separate paths from the root to trees a and b. Otherwise, print \\"Yes\\" followed by two lines with the paths descriptions. Each path should start from the root tree (tree 1) and end at tree a or tree b, and the paths should not share any trees other than the root. Each road appears on one of the paths only once, ensuring the total number of edges does not exceed the given number. **Example**: Input: ``` 6 1 2 1 3 2 4 2 5 3 6 4 6 ``` Output: ``` Yes 1 2 4 1 3 ``` **Explanation**: In the example, we can find a path from the root to tree 4 as `1 -> 2 -> 4` and from the root to tree 3 as `1 -> 3`. This ensures that the two paths do not share any trees except for the root tree.","solution":"from collections import defaultdict, deque def find_paths(n, edges, a, b): graph = defaultdict(list) for u, v in edges: graph[u].append(v) def bfs(start, end): queue = deque([(start, [start])]) visited = set() while queue: node, path = queue.popleft() if node == end: return path visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append((neighbor, path + [neighbor])) return None path_to_a = bfs(1, a) path_to_b = bfs(1, b) if not path_to_a or not path_to_b: return \\"No\\" path_set_a = set(path_to_a) path_set_b = set(path_to_b) if path_set_a.intersection(path_set_b) == {1}: return f\\"Yesn{\' \'.join(map(str, path_to_a))}n{\' \'.join(map(str, path_to_b))}\\" else: return \\"No\\" # Example Usage n = 6 edges = [ (1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (4, 6) ] a, b = 4, 6 print(find_paths(n, edges, a, b)) # Should output the validity and paths if possible"},{"question":"Write a function `balance_brackets` that takes a string containing brackets (round, square, and curly) and determines if the input has balanced brackets. The function should account for nested and sequential brackets correctly. # Input - A string `s` (1 ≤ |s| ≤ 10^4) containing characters from the set `{, }, [, ], (, )`. # Output - Return `True` if the string has balanced brackets, and `False` otherwise. # Examples Example 1 Input: `\\"[{}]()\\"` Output: `True` Example 2 Input: `\\"[{(}]\\"` Output: `False` # Explanation 1. In Example 1, every opening bracket has a corresponding closing bracket, and the pairs are suitably nested. 2. In Example 2, the brackets `[{(}]` are not correctly balanced because the first `{` does not have a matching `}` before the closing bracket `)` is encountered.","solution":"def balance_brackets(s): Determines if the input string has balanced brackets. Args: s (str): A string containing brackets (, ), {, }, [, ]. Returns: bool: True if the brackets are balanced, False otherwise. stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: return False # Invalid character case (should not happen as per the problem constraints) return stack == []"},{"question":"Maria is an avid gardener who has developed a fascination with the different arrangements of flowers in her garden. She has n types of flowers and wants to plant one flower of each type in a straight row. However, Maria follows a peculiar rule: no two flowers of the same type can be adjacent to each other. Given an integer n (1 ≤ n ≤ 9), which represents the number of types of flowers, write a program that generates all distinct ways in which Maria can arrange the flowers in the row such that no two adjacent flowers are of the same type. Each type of flower is represented by a unique integer from 1 to n. Your task is to print all the possible arrangements. # Input - An integer n representing the number of flower types. # Output - Print all distinct valid arrangements in lexicographical order. Each arrangement should be printed as a space-separated string of integers. # Example Input: 3 Output: 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1 # Note Each flower type is distinct and must appear exactly once in each arrangement. No arrangement should have the same two adjacent flower types.","solution":"from itertools import permutations def flower_arrangements(n): Generate and print all valid arrangements of n flower types such that no two adjacent flowers are of the same type. flower_types = list(range(1, n+1)) valid_arrangements = [] for perm in permutations(flower_types): valid_arrangements.append(perm) for arrangement in sorted(valid_arrangements): print(\\" \\".join(map(str, arrangement))) # Example usage: # flower_arrangements(3)"},{"question":"You are given a list of integers and asked to find the length of the longest subsequence (not necessarily contiguous) where the difference between any two consecutive elements is exactly one. The first line of the input contains a single integer n (1 le n le 10^4), the number of integers in the list. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^4), the elements of the list. Output a single integer, the length of the longest subsequence where every two consecutive elements have a difference of exactly one. For example: **Input:** ``` 7 5 6 3 7 6 5 8 ``` **Output:** ``` 5 ``` **Explanation:** One possible longest subsequence with the required property is [5, 6, 7, 6, 5], which has a length of 5.","solution":"def longest_subsequence_with_difference_one(arr): Returns the length of the longest subsequence where the difference between any two consecutive elements is exactly one. from collections import defaultdict # Dictionary to store the length of the longest subsequence ending at each element dp = defaultdict(int) for num in arr: # The length of subsequence ending at \'num\' is the max of # subsequence ending at \'num-1\' and \'num+1\' plus 1 dp[num] = max(dp[num], dp[num - 1] + 1, dp[num + 1] + 1) # The length of the longest subsequence across all numbers return max(dp.values())"},{"question":"In a distant world, there is a village inhabited by n different wizards, each possessing unique magical abilities. Each wizard has a power level that varies based on daily charm spells they receive. However, these charm spells can be disrupted by dark curses, which diminish their powers. You are given the initial power levels of all n wizards and then you will be given a series of m events that either: 1. Apply charm spells to a range of wizards, enhancing their power. 2. Apply dark curses to a range of wizards, reducing their power. Events occur sequentially and are represented by one of two types of instructions. - `+ l r v` denotes a charm spell that increases the power levels of wizards in the range from l to r (inclusive) by v units. - `- l r v` denotes a dark curse that decreases the power levels of wizards in the range from l to r (inclusive) by v units. After all events have been processed, you need to determine the final power level of each wizard. **Input:** - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of wizards. - The second line contains n integers P1, P2, ..., Pn (0 ≤ Pi ≤ 1,000,000) — the initial power levels of the wizards. - The third line contains an integer m (1 ≤ m ≤ 100,000) — the number of events. - The following m lines each contain an event in the form: - `+ l r v` (1 ≤ l ≤ r ≤ n, 1 ≤ v ≤ 1,000) - `- l r v` (1 ≤ l ≤ r ≤ n, 1 ≤ v ≤ 1,000) **Output:** - Output a single line containing n integers, representing the final power levels of each wizard after all events have been executed in order. **Example:** ```plaintext 5 10 20 30 40 50 4 + 1 3 10 - 2 4 5 + 1 5 5 - 3 5 8 ``` **Output:** ```plaintext 25 30 32 32 47 ``` **Explanation:** Initial power levels: [10, 20, 30, 40, 50] - Event 1: Apply charm spell from wizard 1 to 3 with +10. Updated power levels: [20, 30, 40, 40, 50] - Event 2: Apply dark curse from wizard 2 to 4 with -5. Updated power levels: [20, 25, 35, 35, 50] - Event 3: Apply charm spell from wizard 1 to 5 with +5. Updated power levels: [25, 30, 40, 40, 55] - Event 4: Apply dark curse from wizard 3 to 5 with -8. Final power levels: [25, 30, 32, 32, 47]","solution":"def apply_events(n, initial_powers, events): powers = initial_powers[:] for event in events: action, l, r, v = event[0], int(event[1])-1, int(event[2])-1, int(event[3]) if action == \'+\': for i in range(l, r + 1): powers[i] += v elif action == \'-\': for i in range(l, r + 1): powers[i] -= v return powers"},{"question":"You are given an undirected graph with n nodes and m edges. Each node has an integer value associated with it. The nodes are numbered from 1 to n. Your task is to find the node with the maximum value that can be reached starting from node 1, moving along the edges of the graph. If there are multiple such nodes with the same value, return the smallest node number. In other words, starting at node 1, you need to determine the highest value that can be obtained by traversing through the graph, and if multiple nodes have the same value, choose the smallest numbered one. The first line contains two integers, n and m (1 le n le 10^5, 0 le m le 10^5) — the number of nodes and the number of edges, respectively. The second line contains n integers — the values associated with the nodes. The following m lines each contain two integers u and v (1 le u, v le n) indicating an undirected edge between nodes u and v. Output one integer — the node number of the highest valued node reachable from node 1. If multiple nodes have the same maximum value, output the smallest node number. If no other nodes are reachable from node 1, output 1. # Example Input: ``` 6 5 1 2 3 4 5 6 1 2 1 3 2 4 2 5 3 6 ``` Output: ``` 6 ``` Input: ``` 4 2 1 5 5 1 1 2 1 3 ``` Output: ``` 2 ```","solution":"def find_highest_valued_node(n, m, values, edges): from collections import deque, defaultdict adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) max_value_node = 1 queue = deque([1]) visited[1] = True while queue: node = queue.popleft() if values[node - 1] > values[max_value_node - 1] or (values[node - 1] == values[max_value_node - 1] and node < max_value_node): max_value_node = node for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return max_value_node"},{"question":"You are given an array of integers, and you need to process several queries to determine the maximum value within a specified subarray. Each query provides the starting and ending indices of the subarray. Your task is to process each query efficiently and return the maximum value for each subarray query. # Input - The first line contains an integer N (1 le N le 10^5) — the number of elements in the array. - The second line contains N integers a_1, a_2, ..., a_N (1 le a_i le 10^9) — the elements of the array. - The third line contains an integer Q (1 le Q le 10^4) — the number of queries. - The following Q lines each contain two integers l and r (1 le l le r le N) — the indices (1-based) of the subarray for which the maximum value is to be found. # Output For each query, print the maximum value within the specified subarray. # Example Input: ``` 5 1 3 5 2 4 3 1 3 2 5 3 3 ``` Output: ``` 5 5 5 ``` # Constraints - The array contains at most 10^5 elements. - Each query must be answered in logarithmic time, making a naive approach of scanning subarrays infeasible for the larger dataset. # Note Efficiently answering the queries might require preprocessing techniques like segment trees or sparse tables to achieve the sophistication required for the constraints given.","solution":"class SparseTable: def __init__(self, arr): self.n = len(arr) self.log = [0] * (self.n + 1) self.k = 0 while (1 << self.k) <= self.n: self.k += 1 self.st = [[0] * self.k for _ in range(self.n)] self.build(arr) def build(self, arr): for i in range(2, self.n + 1): self.log[i] = self.log[i // 2] + 1 for i in range(self.n): self.st[i][0] = arr[i] j = 1 while (1 << j) <= self.n: i = 0 while (i + (1 << j) - 1) < self.n: self.st[i][j] = max(self.st[i][j - 1], self.st[i + (1 << (j - 1))][j - 1]) i += 1 j += 1 def query(self, l, r): j = self.log[r - l + 1] return max(self.st[l][j], self.st[r - (1 << j) + 1][j]) def process_subarray_queries(n, array, queries): sparse_table = SparseTable(array) results = [] for l, r in queries: results.append(sparse_table.query(l - 1, r - 1)) return results"},{"question":"You are given an undirected graph with n nodes and m edges. Each node is numbered from 1 to n. Each edge connects two distinct nodes and is bidirectional. Your task is to find a connected component of the graph such that the sum of node values in this connected component is an odd number. Each node i has a value vi, which is either 0 or 1. If there are multiple such connected components, any one of them will suffice. If there is no such connected component, print -1. The first line contains two integers n (1 ≤ n ≤ 10^5) and m (0 ≤ m ≤ 2*10^5), representing the number of nodes and edges in the graph, respectively. Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n; ui ≠ vi) indicating that there’s an edge between nodes ui and vi. The following line contains n integers where the i-th integer is the value vi of node i (vi is either 0 or 1). Output the indices of the nodes in any connected component where the sum of the node values is an odd number. If multiple connected components satisfy the condition, output any one of them. If no such connected component exists, print -1. Example: Input: 6 5 1 2 1 3 2 4 3 5 4 6 1 0 1 0 1 0 Output: 1 2 4 (or any other valid connected component with odd sum of values)","solution":"def find_odd_sum_component(n, m, edges, values): from collections import defaultdict, deque def bfs(start): queue = deque([start]) visited[start] = True component = [start] sum_values = values[start-1] while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) component.append(neighbor) sum_values += values[neighbor-1] return component, sum_values graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) for node in range(1, n+1): if not visited[node]: component, sum_values = bfs(node) if sum_values % 2 == 1: return component return -1 # Example input n = 6 m = 5 edges = [(1, 2), (1, 3), (2, 4), (3, 5), (4, 6)] values = [1, 0, 1, 0, 1, 0] print(find_odd_sum_component(n, m, edges, values))"},{"question":"You are given a sequence of integers a consisting of n integers. The sequence can be split into one or more contiguous subsequences. The sum of integers in each subsequence forms the weight of that subsequence. The sum of the weights of all subsequences is called the total weight of the split. You can split the sequence into as many or as few subsequences as you like. Your goal is to determine the minimum possible total weight for such a split, under the constraint that the maximum size of any subsequence is at most k. For example, if a = [1, 2, 3, 4, 5] and k = 2, one possible split would be (1, 2, 3), (4, 5) which has weights of (6, 9) and a total weight of 15. You need to find the split that minimizes this total weight. **Input** The input consists of: - The first line containing an integer t (1 le t le 100) — the number of test cases. - The next lines contain descriptions of the t test cases. Each test case consists of two lines. - The first line of each test case contains two integers n and k (1 le n le 10^5, 1 le k le n) — the length of the sequence and the maximum size of any subsequence. - The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 1000) — the elements of the sequence. It is guaranteed that the sum of the values of n for all test cases does not exceed 10^6. **Output** For each test case output a single integer: the minimum possible total weight for that test case. **Example** Input: ``` 3 5 2 1 2 3 4 5 7 3 4 4 4 4 4 4 4 6 1 1 1 1 1 1 1 ``` Output: ``` 15 28 6 ``` Explanation: In the first case, one optimal way to split the array is (1, 2, 3), (4, 5) with weights (6, 9) and a total weight of 15. In the second case, one optimal way to split the array is (4, 4, 4), (4, 4, 4), (4) with weights (12, 12, 4) and a total weight of 28. In the third case, since each subsequence can have at most size 1, the split is (1), (1), (1), (1), (1), (1) with weights (1, 1, 1, 1, 1, 1) and a total weight of 6.","solution":"def min_total_weight(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] a = test_cases[i][1] # Split into chunks of at most size k total_weight = 0 for j in range(0, n, k): chunk = a[j:j+k] chunk_weight = sum(chunk) total_weight += chunk_weight results.append(total_weight) return results"},{"question":"You and your friends have decided to play a game that involves arranging colored glass beads in a specified pattern. The pattern is defined by a series of integers, where each integer represents the number of beads of a specific color in that segment of the pattern. You are given two sequences: 1. A sequence `A` of `n` integers, where each integer represents the number of beads required for that segment. 2. A sequence `B` of `m` integers, where each integer represents the number of beads in your collection of a specific color. You want to determine if it is possible to exactly match the pattern in sequence `A` using beads from sequence `B` without any leftover beads. # Input - The first line contains an integer `n` (1 leq n leq 10^5) — the number of segments in the pattern. - The second line contains `n` integers `A1, A2, ..., An` (1 leq Ai leq 10^5) — the number of beads required for each segment. - The third line contains an integer `m` (1 leq m leq 10^5) — the number of different bead collections. - The fourth line contains `m` integers `B1, B2, ..., Bm` (1 leq Bi leq 10^5) — the number of beads in each collection. # Output - Print \\"YES\\" if it is possible to match the pattern exactly using the given beads, otherwise print \\"NO\\". # Example Input ``` 3 3 5 4 3 4 5 3 ``` Output ``` YES ``` Input ``` 3 4 3 5 2 8 4 ``` Output ``` NO ``` In the first example, the number of beads in the collections matches exactly with the pattern. In the second example, though the total number of beads in the collections is more than required, they cannot be rearranged to match the exact sequence `[4, 3, 5]`.","solution":"def is_possible_to_match_pattern(n, A, m, B): Determines if the beads in sequence B can be used to exactly match the pattern in sequence A. Parameters: n (int): The number of segments in the pattern. A (list of int): The number of beads required for each segment. m (int): The number of different bead collections. B (list of int): The number of beads in each collection. Returns: str: \\"YES\\" if the pattern can be matched exactly, otherwise \\"NO\\". from collections import Counter counter_A = Counter(A) counter_B = Counter(B) for beads in counter_A: if counter_A[beads] > counter_B.get(beads, 0): return \\"NO\\" return \\"YES\\""},{"question":"You\'ve been hired to work on an automated customer support ticket sorting system. The system receives a list of tickets, where each ticket is represented as a string containing a subject line and a description separated by a colon. Your task is to implement a function that sorts the tickets based on the subject line in alphabetical order. Assume the input is a list of strings, where each string represents one ticket in the format: \\"subject:description\\". The output should be a list of strings, sorted by the subject line, maintaining the original format. The function signature is: ```python def sort_tickets(tickets: List[str]) -> List[str]: ``` **Example:** ```python tickets = [ \\"Internet issue:Cannot connect to WiFi\\", \\"Login problem:Unable to login to the portal\\", \\"Payment failure:Transaction failed\\", \\"Account issue:Password reset not working\\" ] sorted_tickets = sort_tickets(tickets) print(sorted_tickets) ``` The output should be: ```python [ \\"Account issue:Password reset not working\\", \\"Internet issue:Cannot connect to WiFi\\", \\"Login problem:Unable to login to the portal\\", \\"Payment failure:Transaction failed\\" ] ``` **Requirements:** 1. The function must correctly handle an empty list by returning an empty list. 2. Subjects and descriptions will only contain alphanumeric characters and spaces. 3. Maintain the original `subject:description` format in the output.","solution":"from typing import List def sort_tickets(tickets: List[str]) -> List[str]: Sorts a list of tickets based on the subject line in alphabetical order. Parameters: tickets (List[str]): List of tickets in the format \\"subject:description\\". Returns: List[str]: List of tickets sorted by the subject line. return sorted(tickets, key=lambda ticket: ticket.split(\\":\\")[0])"},{"question":"Given an integer matrix of size m x n, where each cell contains either a 0 or a 1, a horizontal or vertical segment in the matrix is a sequence of consecutive cells, all having the value 1. Write a function to find the largest horizontal or vertical segment in the matrix. The first line contains two integers m and n (1 ≤ m, n ≤ 50) — the number of rows and columns in the matrix. Each of the next m lines contains n integers (either 0 or 1), representing the rows of the matrix. Output the length of the largest horizontal or vertical segment in the matrix. **Example:** Input: ``` 4 5 1 0 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1 1 1 0 ``` Output: ``` 4 ``` Explanation: In the provided example, the longest horizontal segment of consecutive 1s is of length 3 (first row, last three columns; or third row, last three columns), and the longest vertical segment of consecutive 1s is of length 4 (fourth column, all rows except the last). Therefore, the function should return 4.","solution":"def largest_segment(matrix, m, n): def longest_segment(arr): max_length = 0 current_length = 0 for val in arr: if val == 1: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length max_horizontal = 0 for row in matrix: max_horizontal = max(max_horizontal, longest_segment(row)) max_vertical = 0 for col in range(n): column = [matrix[row][col] for row in range(m)] max_vertical = max(max_vertical, longest_segment(column)) return max(max_horizontal, max_vertical)"},{"question":"You are given a tree with `n` vertices. The tree is rooted at vertex `1`. Each vertex has a value associated with it. The value of the root node is `1`. You need to perform the following operations: 1. Assign values to the tree such that: - Each node must have a value greater than its parent node. - The sum of the values of all nodes in the tree is minimized. Implement a function that takes in an integer `n` (the number of vertices) and a list of `n-1` tuples representing the edges of the tree. The function should return a list of `n` integers representing the values of the nodes in the optimal configuration. # Input - An integer `n` (2 ≤ n ≤ 10^5) — the number of vertices. - A list of `n-1` tuples, where each tuple `(u, v)` represents an edge between vertex `u` and vertex `v` (1 ≤ u, v ≤ n). # Output - A list of `n` integers where the i-th integer represents the value assigned to vertex `i`. # Example Input: ``` n = 3 edges = [(1, 2), (1, 3)] ``` Output: ``` [1, 2, 3] ``` Input: ``` n = 6 edges = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6)] ``` Output: ``` [1, 2, 3, 4, 5, 6] ``` # Explanation: In the first example, vertex `1` (the root) is assigned the value `1`, its children (vertex `2` and vertex `3`) are assigned the values `2` and `3` respectively. The sum of values is minimized as each node has a minimum value greater than its parent. In the second example, we follow the same principle, making sure each node\'s value is greater than its parent so that the sum is minimally achieved.","solution":"def assign_values(n, edges): from collections import defaultdict, deque # Create an adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Initialize values for the nodes values = [0] * (n + 1) # BFS to traverse the tree and assign values queue = deque([1]) values[1] = 1 next_value = 2 while queue: node = queue.popleft() for neighbor in tree[node]: if values[neighbor] == 0: # If the neighbor hasn\'t been assigned a value values[neighbor] = next_value next_value += 1 queue.append(neighbor) # Exclude the 0th index since node indices are 1-based return values[1:]"},{"question":"You are given a grid with dimensions n times m. Each cell of the grid is filled with a number. You need to determine the minimum number of moves required for a number to move from one cell to another cell. You can move between cells in any of the eight possible directions (left, right, up, down, and the four diagonal directions). Each move from one cell to another with a different number is considered one move. If the destination cell has the same number as the source cell, no move is counted. Find the minimum number of moves required to go from the top-left cell (1, 1) to the bottom-right cell (n, m). # Input The first line contains two integers n and m (1 leq n, m leq 500) — the number of rows and columns of the grid. Each of the next n lines contains m integers a_{ij} (1 leq a_{ij} leq 1000). # Output Print a single integer, the minimum number of moves required to go from the top-left cell to the bottom-right cell. # Examples Example 1 **Input:** ``` 3 3 1 2 3 4 5 6 7 8 9 ``` **Output:** ``` 2 ``` Example 2 **Input:** ``` 4 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ``` **Output:** ``` 0 ``` # Note In the first example, one possible path with a minimum number of moves is: - Move from (1, 1) to (2, 1) - Move from (2, 1) to (3, 1) - Move from (3, 1) to (3, 2) - Move from (3, 2) to (3, 3) Every move changes the number in the cell just once, so the total number of moves is 2. In the second example, all cells have the same number, so no moves are needed.","solution":"from collections import deque def min_moves_to_reach(n, m, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n - 1 and y == m - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: visited.add((nx, ny)) next_dist = dist if grid[nx][ny] != grid[x][y]: next_dist += 1 queue.append((nx, ny, next_dist)) return -1 # In case no path exists (shouldn\'t happen with valid input) # Example usage: # print(min_moves_to_reach(3, 3, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])) # Output: 2"},{"question":"Write a function that takes a string as input, representing a mathematical expression containing non-negative integers and the operators \'+\', \'-\', \'*\', and \'/\'. The function should return the result of evaluating the expression. The input expression is guaranteed to be valid and contains no whitespace. Division should be treated as integer division. You may assume the result of the expression will always be an integer. Example: Input: \\"3+5*2\\" Output: 13 Input: \\"10-2/2\\" Output: 9","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers and the operators \'+\', \'-\', \'*\', and \'/\'. Division is treated as integer division and the result is guaranteed to be an integer. :param expression: string representing a mathematical expression :return: integer result of the expression import operator # precedence and corresponding operations precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} operations = { \'+\': operator.add, \'-\': operator.sub, \'*\': operator.mul, \'/\': lambda x, y: x // y # integer division } def parse_expression(expression): num = 0 stack = [] op_stack = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 stack.append(num) continue elif expression[i] in precedence: while op_stack and precedence[op_stack[-1]] >= precedence[expression[i]]: operator = op_stack.pop() b = stack.pop() a = stack.pop() stack.append(operations[operator](a, b)) op_stack.append(expression[i]) i += 1 while op_stack: operator = op_stack.pop() b = stack.pop() a = stack.pop() stack.append(operations[operator](a, b)) return stack[0] return parse_expression(expression) print(evaluate_expression(\\"3+5*2\\")) # 13 print(evaluate_expression(\\"10-2/2\\")) # 9"},{"question":"You are given an array of integers representing heights of buildings in a row. A tornado can start from any building and destroy all the buildings towards the right that are shorter or equal to the building where the tornado started. The goal is to determine the longest sequence of buildings from left to right that will not be entirely destroyed by the tornado. More formally, given an array `heights` where `heights[i]` is the height of the `i-th` building, you need to find the length of the longest increasing subsequence such that no tornado starting from any building within this subsequence can destroy all buildings to its right. The first line contains a single integer n (1 ≤ n ≤ 200,000) — the number of buildings. The second line contains n space-separated integers heights[i] (1 ≤ heights[i] ≤ 10^9), where heights[i] is the height of the i-th building. Output a single integer — the length of the longest increasing subsequence of buildings. # Example Input ``` 6 1 2 2 3 4 1 ``` Output ``` 4 ``` Explanation The longest increasing subsequence is [1, 2, 3, 4], which has a length of 4. This means that if the tornado starts from the building with height 1 (first building), it will not destroy the entire subsequence [1, 2, 3, 4] as it is strictly increasing.nd the largest subsequence of building heights which is strictly increasing.","solution":"def longest_increasing_subsequence(heights): Determines the length of the longest increasing subsequence in a list of building heights. Parameters: heights (List[int]): List of building heights. Returns: int: Length of the longest increasing subsequence. if not heights: return 0 import bisect dp = [] for height in heights: pos = bisect.bisect_left(dp, height) if pos == len(dp): dp.append(height) else: dp[pos] = height return len(dp)"},{"question":"You are given a sequence of integers and are required to perform several operations on this sequence. Two types of operations are supported: 1. Update the value of an element in the sequence. 2. Retrieve the sum of the elements in a specified subarray. The first line of the input contains two integers, n (1 ≤ n ≤ 100,000) — the length of the sequence and q (1 ≤ q ≤ 100,000) — the number of operations. The second line contains n integers, representing the initial sequence. Each of the next q lines represents an operation. An operation can be of two types: - \'1 i x\' - Update the i-th element of the sequence to x (1 ≤ i ≤ n, -10^9 ≤ x ≤ 10^9). - \'2 l r\' - Retrieve the sum of the elements from position l to position r (1 ≤ l ≤ r ≤ n). For each query of the second type, output the sum of the specified subarray. Input: ``` 5 5 1 2 3 4 5 2 1 3 1 3 10 2 2 4 1 5 20 2 1 5 ``` Output: ``` 6 16 32 ``` In the first query, the sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. In the second query, after updating the 3rd element to 10, the sum from index 2 to 4 is 2 + 10 + 4 = 16. Finally, after updating the 5th element to 20, the sum from index 1 to 5 is 1 + 2 + 10 + 4 + 20 = 37.","solution":"class SequenceOperations: def __init__(self, sequence): self.sequence = sequence def update(self, i, x): Update the i-th (1-based index) element of the sequence to x. self.sequence[i - 1] = x def sum_subarray(self, l, r): Retrieve the sum of the elements from position l to position r (1-based index). return sum(self.sequence[l - 1:r]) def process_operations(n, q, sequence, operations): seq_ops = SequenceOperations(sequence) results = [] for op in operations: if op[0] == 1: _, i, x = op seq_ops.update(i, x) elif op[0] == 2: _, l, r = op results.append(seq_ops.sum_subarray(l, r)) return results"},{"question":"You are given n sorted unique integers in ascending order which represent the positions of streetlights on a street. You are also given k queries. Each query consists of a single integer x, representing the position of a new streetlight. For each query, determine the minimum distance between the new streetlight at position x and the existing streetlights. The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of existing streetlights. The second line contains n space-separated integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9), the positions of existing streetlights in ascending order. The third line contains an integer k (1 ≤ k ≤ 10^5), the number of queries. The next k lines each contain a single integer x (1 ≤ x ≤ 10^9), the position of the new streetlight for that query. For each query, print a single line representing the minimum distance between the new streetlight and the closest existing streetlight. Example: Input: 5 1 3 8 10 14 3 4 2 13 Output: 1 1 1","solution":"import bisect def min_distance(n, positions, k, queries): results = [] for x in queries: # Use binary search to find the position to insert x pos = bisect.bisect_left(positions, x) if pos == 0: # If x is less than any element in positions min_dist = abs(x - positions[0]) elif pos == n: # If x is greater than any element in positions min_dist = abs(x - positions[-1]) else: # Check the closest distance between x and the positions on both sides min_dist = min(abs(x - positions[pos - 1]), abs(x - positions[pos])) results.append(min_dist) return results"},{"question":"# Problem Statement You are given a list of stock prices for a company in chronological order, where each price represents the closing price of the stock for a given day. You are allowed to perform at most one transaction (buy one and sell one share of the stock). Write a function that determines the maximum profit you can achieve. If you cannot achieve any profit, return 0. # Function Signature ```python def maxProfit(prices: List[int]) -> int: ``` # Input - The input parameter `prices` is a list of integers representing the stock prices, where `1 <= len(prices) <= 10^5` and `0 <= prices[i] <= 10^4`. # Output - The function should return an integer representing the maximum profit you can achieve. # Example ```python # Example 1 prices = [7, 1, 5, 3, 6, 4] maxProfit(prices) # Returns: 5 # Example 2 prices = [7, 6, 4, 3, 1] maxProfit(prices) # Returns: 0 ``` # Constraints - You may complete at most one transaction. - You cannot sell a stock before you buy one. # Explanation 1. For the first example, the maximum profit you can achieve is 5 (buy at price 1 and sell at price 6). 2. For the second example, no transaction can achieve a positive profit, so the result is 0.","solution":"from typing import List def maxProfit(prices: List[int]) -> int: if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"An online store wants to analyze its customers\' buying patterns to provide better recommendations. Given a list of transactions, where each transaction is represented by a list of items bought together, help the store identify the most frequently purchased pair of items. The first line of the input contains an integer n (1 ≤ n ≤ 100,000), the number of transactions. Each of the next n lines contains a list of space-separated integers representing the item IDs (1 ≤ item ID ≤ 1,000,000) of items bought together in a single transaction. Output the pair of item IDs that appear together most frequently. If there are multiple such pairs with the same frequency, output the pair with the smallest lexicographic order. Input: ``` 5 1 2 3 2 3 4 1 2 1 3 2 3 ``` Output: ``` 2 3 ``` Explanation: The pair (2, 3) appears in three transactions, which is more frequent than any other pair. Thus, the output is \\"2 3\\". If there are multiple pairs with the same frequency, for example (1, 2) and (2, 3) both appearing three times, the lexicographically smaller pair should be chosen.","solution":"from collections import defaultdict from itertools import combinations def most_frequent_pair(transactions): pair_count = defaultdict(int) for transaction in transactions: pairs = combinations(sorted(transaction), 2) for pair in pairs: pair_count[pair] += 1 most_frequent = None highest_count = 0 for pair, count in pair_count.items(): if count > highest_count or (count == highest_count and pair < most_frequent): most_frequent = pair highest_count = count return most_frequent def input_parser(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) transactions = [list(map(int, line.split())) for line in lines[1:]] return transactions def solution(input_str): transactions = input_parser(input_str) most_frequent = most_frequent_pair(transactions) return f\\"{most_frequent[0]} {most_frequent[1]}\\""},{"question":"**Melody has composed a series of musical notes and stored them in an array. Each note i has a specific frequency f[i]. She wants to perform a certain number of operations to transform the melody. Each operation can either update a specific note\'s frequency or query the sum of frequencies within a given range.** **Input Format:** - The first line contains an integer n (1 ≤ n ≤ 10^5), representing the number of notes. - The second line contains n integers f1, f2, ..., fn (1 ≤ fi ≤ 10^9), the frequencies of the notes. - The third line contains an integer q (1 ≤ q ≤ 10^5), the number of operations. - The next q lines contain three integers separated by spaces: t, a, b (1 ≤ t ≤ 2; 1 ≤ a ≤ n; 1 ≤ b ≤ 10^9). If t is 1, it indicates an update operation to set the frequency of the a-th note to b. If t is 2, it indicates a query operation to find the sum of the frequencies from the a-th to the b-th note (inclusive). **Output Format:** - For each query operation of type 2, print a single integer — the sum of the frequencies in the specified range. **Sample Input:** ``` 5 3 6 9 12 15 4 2 1 3 1 2 7 2 2 5 1 3 10 ``` **Sample Output:** ``` 18 40 ``` **Explanation:** 1. The initial frequencies are [3, 6, 9, 12, 15]. 2. The first query operation asks for the sum of frequencies from the 1st to the 3rd note, which is 3 + 6 + 9 = 18. 3. The first update operation sets the frequency of the 2nd note to 7, resulting in the frequencies [3, 7, 9, 12, 15]. 4. The second query operation asks for the sum of frequencies from the 2nd to the 5th note, which is 7 + 9 + 12 + 15 = 43. 5. The second update operation sets the frequency of the 3rd note to 10, resulting in the updated frequencies [3, 7, 10, 12, 15]. **Constraint:** The sum of the frequencies may exceed the bounds of the 32-bit integer type.","solution":"class MusicMelody: def __init__(self, frequencies): self.n = len(frequencies) self.frequencies = frequencies self.tree = [0] * (self.n + 1) for i in range(self.n): self.update_BIT(i + 1, frequencies[i]) def update_BIT(self, index, value): while index <= self.n: self.tree[index] += value index += index & -index def query_BIT(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def update(self, index, new_value): current_value = self.query_BIT(index) - self.query_BIT(index - 1) delta = new_value - current_value self.update_BIT(index, delta) self.frequencies[index - 1] = new_value def query(self, left, right): return self.query_BIT(right) - self.query_BIT(left - 1)"},{"question":"You are given a list of integers representing the number of points each player scored in a competitive game. Your task is to determine if there exists a way to split the players into two non-empty groups such that the absolute difference of the sum of points in the two groups is minimized. Input: - The first line contains a single integer `n` (2 ≤ n ≤ 100) — the number of players. - The second line contains `n` integers p1, p2, ..., pn (1 ≤ pi ≤ 10000) — the points scored by each player. Output: - Print a single integer - the minimum possible absolute difference between the sums of points in the two groups. Example: Input: ``` 4 1 2 3 4 ``` Output: ``` 0 ``` Explanation: - One possible way to divide the players is into the groups {1, 4} and {2, 3}. The sum of points in both groups is 5, so the absolute difference is 0.","solution":"def min_difference(n, points): total_sum = sum(points) half_sum = total_sum // 2 # DP array, initialized to False. dp[j] will be True if a subset with sum j can be formed. dp = [False] * (half_sum + 1) dp[0] = True # Update DP array for each point for point in points: for j in range(half_sum, point - 1, -1): if dp[j - point]: dp[j] = True # Find the largest j (<= half_sum) such that dp[j] is True for j in range(half_sum, -1, -1): if dp[j]: sum1 = j break sum2 = total_sum - sum1 return abs(sum2 - sum1) # Example usage: # print(min_difference(4, [1, 2, 3, 4])) # Output: 0"},{"question":"You are given a string s of length n and an integer k (1 leq k leq n leq 10^5). Your task is to count the number of substrings of length k that are palindromes. Recall that a palindrome is a string that reads the same backward as forward. **Input:** - The first line contains two space-separated integers n and k. - The second line contains the string s, consisting of lower-case English letters. **Output:** - Output a single integer — the number of palindromic substrings of length k. **Example:** Input: ``` 7 3 ababaac ``` Output: ``` 3 ``` **Explanation:** The palindromic substrings of length 3 are \\"aba\\" and \\"bab\\" occurring twice and once respectively. The total count is 3.","solution":"def count_palindromic_substrings(n, k, s): def is_palindrome(sub): return sub == sub[::-1] count = 0 for i in range(n - k + 1): if is_palindrome(s[i:i + k]): count += 1 return count"},{"question":"John loves to collect stamps from different countries. He now has a collection of stamps, and he likes to arrange them before showing them to his friends. John wants to organize his stamps in a perfect grid of size n x n. However, his collection might not be large enough to fill a perfect grid. Given an integer n and a list of integers representing the stamps in John\'s collection, write a function that checks if John can arrange his stamps into an n x n grid. If it\'s possible, return a list of lists where each nested list represents a row in the grid. If it\'s not possible to form such a grid, return an empty list. Function Signature: ```python def arrange_stamps(n: int, stamps: List[int]) -> List[List[int]]: ``` **Input:** - An integer `n` (1 ≤ n ≤ 100) representing the desired grid size. - A list of integers `stamps` (1 ≤ len(stamps) ≤ 10,000) representing the stamp collection. **Output:** - A list of lists representing the n x n grid of stamps if possible, or an empty list if not possible. **Example:** ```python >>> arrange_stamps(2, [1, 2, 3, 4]) [[1, 2], [3, 4]] >>> arrange_stamps(3, [1, 2, 3, 4, 5]) [] ``` **Explanation:** - In the first example, John has 4 stamps and he can arrange them into a 2 x 2 grid. - In the second example, John does not have enough stamps to fill a 3 x 3 grid and hence the function returns an empty list.","solution":"from typing import List def arrange_stamps(n: int, stamps: List[int]) -> List[List[int]]: Checks if stamps can be arranged into an n x n grid. If possible, returns the grid as a list of lists. Otherwise, returns an empty list. if len(stamps) != n * n: return [] grid = [] for i in range(n): row = stamps[i*n:(i+1)*n] grid.append(row) return grid"},{"question":"A health monitoring system is being designed for a smart home. The system records the temperature readings from multiple sensors spread across different rooms in the house at every minute. Given the temperature readings, you need to analyze and determine the longest period during which the temperature was consistently at or below a given threshold in any room. # Input Specifications: - The first line contains two integers n and m (1 ≤ n, m ≤ 100), where n is the number of rooms and m is the number of temperature readings for each room. - The next n lines each contain m integers, where the j-th integer of the i-th line represents the temperature reading in the i-th room at the j-th minute. - The last line contains a single integer t (0 ≤ t ≤ 100), the temperature threshold. # Output Specifications: - Print a single integer representing the longest period (in minutes) during which the temperature in any room was consistently at or below the threshold t. # Example: Input: ``` 3 5 20 22 21 20 19 18 18 19 20 21 21 19 20 20 22 20 ``` Output: ``` 2 ``` # Explanation: - In the given example, Room 1, maintains temperatures at or below 20 for a period of 1 minute vis-a-vis the minutes 1, 4, and 5. - Room 2 maintains temperatures at or below 20 for a consecutive period of 4 minutes vis-a-vis the temperatures [18, 18, 19, 20]. - Room 3 does not have any prolonged period where the temperature stays at or below 20 after minute 2. Hence, the longest period with the temperature consistently below or equal to the threshold is 2 minutes (from Room 2).","solution":"def longest_consistent_period(n, m, readings, t): Returns the longest period during which the temperature was consistently at or below the threshold t in any room. :param n: Number of rooms. :param m: Number of temperature readings for each room. :param readings: A list of lists, where readings[i][j] is the temperature reading for room i at minute j. :param t: The temperature threshold. :return: The longest period in minutes. max_period = 0 for room in readings: current_period = 0 for temperature in room: if temperature <= t: current_period += 1 max_period = max(max_period, current_period) else: current_period = 0 return max_period"},{"question":"You are given an integer array nums of length n and an integer k. Write a function that finds out whether there exist two distinct indices i and j in the array such that nums[i] + nums[j] equals k. If such a pair exists, return the indices as a tuple (i, j). If there are multiple valid pairs, return any one of them. If no such pair exists, return an empty tuple. Function signature: ```python def find_pair_with_sum(nums: List[int], k: int) -> Tuple[int, int]: ``` **Input:** - The first line contains the integer n (1 ≤ n ≤ 10^5) — the length of the array nums. - The second line contains n integers separated by a space, representing the elements of the array nums (−10^9 ≤ nums[i] ≤ 10^9). - The third line contains the integer k (−10^9 ≤ k ≤ 10^9). **Output:** - If a pair (i, j) exists such that nums[i] + nums[j] = k, print the indices i and j (0-based). - If no such pair exists, return an empty tuple. **Example:** Input: ``` 5 1 2 3 4 5 7 ``` Output: ``` (1, 4) ``` Note: In the sample above, the pair (1, 4) is one of the possible answers because nums[1] + nums[4] = 2 + 5 = 7, which equals the given integer k. The output is one possible solution; another valid output could be (0, 3).","solution":"from typing import List, Tuple def find_pair_with_sum(nums: List[int], k: int) -> Tuple[int, int]: seen = {} for i, num in enumerate(nums): complement = k - num if complement in seen: return (seen[complement], i) seen[num] = i return ()"},{"question":"Appleman is faced with a tricky puzzle. He has a collection of n distinct integers and he needs to partition these integers into exactly two non-empty subsets such that the absolute difference between the sums of the integers in the two subsets is minimized. Can you help him find this minimum difference? **Input:** - The first line contains an integer n (1 ≤ n ≤ 20) — the number of integers in the collection. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the integers themselves. **Output:** - Output a single integer – the minimum possible absolute difference between the sums of the two subsets. **Example:** **Input:** ``` 4 1 2 3 9 ``` **Output:** ``` 3 ``` **Explanation:** By partitioning into subsets {1, 2, 3} and {9}, the sums are 6 and 9. The absolute difference is |6 - 9| = 3, which is the minimum possible.","solution":"def minimum_difference(n, arr): Finds the minimum possible absolute difference between the sums of two subsets of the given array. total_sum = sum(arr) dp = [False] * (total_sum + 1) dp[0] = True for num in arr: for j in range(total_sum, num - 1, -1): if dp[j - num]: dp[j] = True min_diff = float(\'inf\') for s in range(total_sum // 2 + 1): if dp[s]: min_diff = min(min_diff, abs(total_sum - 2 * s)) return min_diff"},{"question":"In the kingdom of Zandria, there are n towns connected by m one-way roads. Each town has a fire department, and every road has a risk factor associated with it, indicating the probability of fire incidents along that route. The government of Zandria wants to ensure maximum safety by ensuring they have the best fire response strategy in place. To do so, they need to determine the minimum risk path between two specific towns. You are tasked with writing a program to find the minimum risk factor from a designated starting town to a designated destination town. The risk factor of a path is defined as the sum of the risk factors of the roads along that path. # Input The input consists of several lines: 1. The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) - the number of towns and the number of roads. 2. The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) - representing a road from town u to town v with risk factor w. 3. The final line contains two integers s and t (1 ≤ s, t ≤ n) - the starting town and the destination town. # Output Output a single integer - the minimum risk factor for the path from town s to town t. If there is no path from town s to town t, output -1. # Example Input ``` 4 4 1 2 10 1 3 5 2 3 2 3 4 1 1 4 ``` Output ``` 6 ``` In the example, the minimum risk path from town 1 to town 4 is 1 -> 3 -> 4, and the total risk factor is 5 + 1 = 6.","solution":"import heapq def minimum_risk_path(n, m, roads, s, t): # Create graph representation graph = {i: [] for i in range(1, n+1)} for u, v, w in roads: graph[u].append((v, w)) # Dijkstra\'s algorithm to find minimum risk path pq = [(0, s)] # priority queue with risk factor and current node risks = {i: float(\'inf\') for i in range(1, n+1)} risks[s] = 0 while pq: current_risk, u = heapq.heappop(pq) if u == t: return current_risk if current_risk > risks[u]: continue for v, w in graph[u]: new_risk = current_risk + w if new_risk < risks[v]: risks[v] = new_risk heapq.heappush(pq, (new_risk, v)) return -1 if risks[t] == float(\'inf\') else risks[t] # Example usage n = 4 m = 4 roads = [ (1, 2, 10), (1, 3, 5), (2, 3, 2), (3, 4, 1) ] s = 1 t = 4 print(minimum_risk_path(n, m, roads, s, t)) # Output: 6"},{"question":"Create an Elevator Simulation System for a Building. The building has several floors and a single elevator. The elevator can move between floors, pick up people, and drop them off at their requested destinations. You need to implement two primary functions – one to make a request for the elevator and another to simulate the movement of the elevator. 1. The building has `m` floors numbered from 1 to `m`. 2. The elevator starts at floor 1 and can carry up to `n` people at once. 3. Requests for the elevator are made in the form `(current_floor, destination_floor)`, meaning a person on `current_floor` wants to go to `destination_floor`. 4. The elevator should move to the current floor of the request, pick up the person (if there\'s space), and then move to the destination floor to drop off the person. 5. If there\'s another request made before it reaches the destination, the elevator only attends to it if it is on the way of its current path. Your system should process `k` requests. # Input Format - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 100) — the number of floors and the maximum number of people the elevator can carry. - The second line contains an integer `k` (1 ≤ k ≤ 1000) — the number of requests. - The next `k` lines each contain two integers `current_floor` and `destination_floor` (1 ≤ current_floor, destination_floor ≤ m). # Output Format - Print the sequence of floors the elevator stops at while processing all requests. # Example **Input** ``` 5 2 4 1 5 3 2 2 4 5 1 ``` **Output** ``` 1 5 3 2 4 5 1 ```","solution":"class Elevator: def __init__(self, floors, capacity): self.floors = floors self.capacity = capacity self.current_floor = 1 self.passengers = [] self.requests = [] self.stops = [1] def request_elevator(self, current_floor, destination_floor): if len(self.passengers) < self.capacity: self.requests.append((current_floor, destination_floor)) def simulate(self): while self.requests: next_request = self.requests.pop(0) self.process_request(next_request) return self.stops def process_request(self, request): current_floor, destination_floor = request # Go to the current floor if self.current_floor != current_floor: self.current_floor = current_floor self.stops.append(current_floor) # Move to the destination floor if destination_floor not in [p[1] for p in self.passengers]: self.passengers.append((current_floor, destination_floor)) self.current_floor = destination_floor self.stops.append(destination_floor) self.passengers.remove((current_floor, destination_floor))"},{"question":"You are given a binary tree with n nodes, where each node has an integer value. Let\'s number the nodes and their values from 1 to n. Nodes can have a value between 1 and 10^9. You need to perform the following two operations: 1. **Query Operation**: Given two numbers u and v, find the Lowest Common Ancestor (LCA) of the nodes u and v in the tree. 2. **Update Operation**: Given a node u and a new value val, update the value of the node u to val. You are required to handle multiple query and update operations efficiently. The first line of input contains an integer n (1 ≤ n ≤ 100,000), the number of nodes in the tree. The second line contains n space-separated integers, where the i-th integer is the value of the i-th node. The next n-1 lines each contain two space-separated integers u and v, denoting an edge connecting nodes u and v. The next line contains an integer q (1 ≤ q ≤ 100,000), the number of operations. The following q lines describe the operations. Each operation is either of the following: - \\"Q u v\\" (without the quotes): Query the LCA of nodes u and v. - \\"U u val\\" (without the quotes): Update the value of node u to val. Output the result of each query operation in the order they appear in the input. Here\'s a sample input and output for reference: **Input:** ``` 5 10 20 30 40 50 1 2 1 3 3 4 3 5 3 Q 2 4 U 4 35 Q 2 4 ``` **Output:** ``` 1 3 ``` In this example, node 1 is the root, and the initial value of each node is given. After the update operation, you need to reflect the new value correctly for subsequent operations. Handle queries and updates efficiently considering the constraints.","solution":"class TreeNode: def __init__(self, value, node_id): self.value = value self.node_id = node_id self.children = [] class BinaryTree: def __init__(self, n, values): self.nodes = [None] + [TreeNode(values[i-1], i) for i in range(1, n+1)] self.parent = [0] * (n + 1) self.level = [0] * (n + 1) def add_edge(self, u, v): self.nodes[u].children.append(v) self.nodes[v].children.append(u) def dfs(self, node, par, lev): self.parent[node] = par self.level[node] = lev for child in self.nodes[node].children: if child != par: self.dfs(child, node, lev + 1) def prepare_lca(self): n = len(self.nodes) - 1 self.LOG = 1 while (1 << self.LOG) <= n: self.LOG += 1 self.ancestor = [[-1] * (self.LOG + 1) for _ in range(n + 1)] for i in range(n + 1): self.ancestor[i][0] = self.parent[i] for j in range(1, self.LOG + 1): for i in range(1, n + 1): if self.ancestor[i][j-1] != -1: self.ancestor[i][j] = self.ancestor[self.ancestor[i][j-1]][j-1] def find_lca(self, u, v): if self.level[u] < self.level[v]: u, v = v, u diff = self.level[u] - self.level[v] for i in range(self.LOG + 1): if (diff >> i) & 1: u = self.ancestor[u][i] if u == v: return u for i in range(self.LOG, -1, -1): if self.ancestor[u][i] != self.ancestor[v][i]: u = self.ancestor[u][i] v = self.ancestor[v][i] return self.parent[u] def update_node_value(self, u, val): self.nodes[u].value = val def main(): import sys input = sys.stdin.read data = input().split() index = 0 n = int(data[index]) index += 1 values = list(map(int, data[index:index+n])) index += n tree = BinaryTree(n, values) for _ in range(n-1): u, v = map(int, data[index:index+2]) index += 2 tree.add_edge(u, v) tree.dfs(1, -1, 0) tree.prepare_lca() q = int(data[index]) index += 1 results = [] for _ in range(q): operation = data[index] if operation == \'Q\': u, v = int(data[index+1]), int(data[index+2]) lca = tree.find_lca(u, v) results.append(lca) index += 3 elif operation == \'U\': u, val = int(data[index+1]), int(data[index+2]) tree.update_node_value(u, val) index += 3 for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a long sequence of numbers a = a1, a2, ..., an (1 ≤ ai ≤ 10^9) and q queries. Each query consists of three integers l, r, and x, and asks for the count of numbers equal to x that appear in the subsequence from position l to position r in the sequence. Input: The first line contains two integers n and q (1 ≤ n, q ≤ 10^5). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). The next q lines contain three integers l, r, and x (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10^9) each, representing a query. Output: For each query, output the count of the number x in the subsequence from position l to position r in a single line. Example: Input: 6 3 1 2 1 3 2 1 1 3 1 2 5 2 1 6 1 Output: 2 1 3","solution":"def count_occurrences(sequence, queries): Returns the count of specific numbers in given subsequence ranges. :param sequence: List of integers containing the main sequence. :param queries: List of tuples, where each tuple contains (l, r, x). :return: List of counts corresponding to each query. results = [] for l, r, x in queries: results.append(sum(1 for i in range(l-1, r) if sequence[i] == x)) return results"},{"question":"You are given a grid of size n times m consisting of cells labeled either with a 0 or a 1. You start at the top-left cell (1, 1) and want to reach the bottom-right cell (n, m). You can move only to the right or down from your current cell. Your goal is to maximize the sum of the cell values you encounter during the journey from the top-left cell to the bottom-right cell. Write a function that takes an integer matrix grid of size n x m and returns the maximum sum of values obtainable on a path from the top-left cell to the bottom-right cell. **Input:** - The first line contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. - The next n lines each contain m integers (either 0 or 1) — the grid itself. **Output:** - Print a single integer, the maximum sum obtainable on a path from (1, 1) to (n, m). **Example:** **Input:** ``` 3 3 1 0 1 1 1 1 0 1 1 ``` **Output:** ``` 5 ``` **Explanation:** The optimal path to maximize the sum is (1, 1) -> (2, 1) -> (2, 2) -> (2, 3) -> (3, 3), summing up to 5.","solution":"def max_path_sum(grid): n = len(grid) m = len(grid[0]) # Create a dp table for storing max path sums. dp = [[0] * m for _ in range(n)] # Initialize the starting point with the value of the grid\'s top-left cell. dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the maximum path sum. return dp[n-1][m-1]"},{"question":"A delivery company is developing a system to manage and track the locations of its delivery trucks. Each truck has a unique integer ID and a specific integer capacity representing the maximum number of packages it can carry. The company needs to respond to queries regarding the status and availability of its trucks. You need to handle queries of three types: 1. **Update Location**: This query updates the current location of a specified truck. 2. **Check Truck Capacity**: This query checks if a specified truck can carry a given number of packages. 3. **Check if Truck is in Proximity**: This query checks if a specified truck is within a certain distance from a given location. To accomplish this, you are given the following: - n: the number of trucks. - m: the total number of queries. - A list of n integers representing the capacities of the trucks, where the i-th integer is the capacity of the i-th truck. - A list of m tuples representing the queries. Each query is represented as: - `(1, truck_id, new_location)`: Update the location of the truck with ID `truck_id` to `new_location`. - `(2, truck_id, num_packages)`: Check if the truck with ID `truck_id` can carry `num_packages` packages. - Output \\"YES\\" if the truck can carry the packages, otherwise \\"NO\\". - `(3, truck_id, location, distance)`: Check if the truck with ID `truck_id` is within `distance` from `location`. - Output \\"YES\\" if the truck is within the specified distance, otherwise \\"NO\\". Constraints: - 1 ≤ n, m ≤ 100,000 - 1 ≤ truck_id ≤ n - 1 ≤ num_packages, capacity, location, distance, new_location ≤ 10^9 **Input Format:** - The first line contains the integers n and m. - The second line contains n integers, where the i-th integer is the capacity of the i-th truck. - The next m lines represent the queries in the format defined above. **Output Format:** - For each query of type 2 and 3, print \\"YES\\" or \\"NO\\" depending on the condition being checked. **Example:** Input: ``` 3 5 10 15 20 1 1 100 1 2 200 2 1 5 3 2 150 50 3 3 500 100 ``` Output: ``` YES YES NO ``` Note: The initial locations of all trucks can be assumed as 0.","solution":"def manage_truck_queries(n, m, capacities, queries): locations = [0] * n results = [] for query in queries: if query[0] == 1: truck_id, new_location = query[1] - 1, query[2] locations[truck_id] = new_location elif query[0] == 2: truck_id, num_packages = query[1] - 1, query[2] if capacities[truck_id] >= num_packages: results.append(\\"YES\\") else: results.append(\\"NO\\") elif query[0] == 3: truck_id, location, distance = query[1] - 1, query[2], query[3] if abs(locations[truck_id] - location) <= distance: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"``` Given an array of integers, write a function to find the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to a given integer k. The input consists of two lines: - The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9), where n is the number of elements in the array. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). The output should be a single integer denoting the length of the longest contiguous subarray that satisfies the condition. Example: Input: 6 3 1 3 2 4 6 7 Output: 4 Explanation: One of the longest contiguous subarrays where the absolute difference between any two elements is less than or equal to 3 is [1, 3, 2, 4]. ```","solution":"def longest_contiguous_subarray_length(n, k, arr): Returns the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to k. if n == 0: return 0 start = 0 # start index of the current contiguous subarray max_length = 1 # length of the longest contiguous subarray found min_val = arr[0] # minimum value in the current contiguous subarray max_val = arr[0] # maximum value in the current contiguous subarray for end in range(1, n): min_val = min(min_val, arr[end]) max_val = max(max_val, arr[end]) # If the absolute difference between min and max in current subarray is greater than k # Move the start index to the right while max_val - min_val > k: start += 1 min_val = min(arr[start:end + 1]) max_val = max(arr[start:end + 1]) max_length = max(max_length, end - start + 1) return max_length"},{"question":"A robotics company is designing a warehouse with autonomous robots to move packages. Each robot is programmed to follow a specific path represented by a sequence of commands. The commands instruct the robot to move in a 2D grid where each command is one of: \'U\' (up), \'D\' (down), \'L\' (left), or \'R\' (right). Due to the limited battery life of the robots, they can only follow a path sequence for a certain number of steps. If they exceed this limit, they will stop moving. Given a sequence of commands and a maximum number of steps the robot can take, determine the maximum distance (Manhattan distance) from the starting point (0, 0) that a robot can reach. The Manhattan distance between two points (x1, y1) and (x2, y2) is calculated as |x2 - x1| + |y2 - y1|. # Input - The first line contains a single integer n (1 leq n leq 1000) denoting the length of the command sequence. - The second line contains the command sequence of length n. - The third line contains a single integer k (1 leq k leq n) denoting the maximum number of steps the robot can take. # Output - Output a single integer representing the maximum Manhattan distance from the starting point (0, 0) that the robot can reach within k steps. # Example Input ``` 6 UURRDD 4 ``` Output ``` 2 ``` # Explanation The robot can take 4 steps out of the sequence \\"UURRDD\\". The optimal steps to maximize the Manhattan distance would be \\"UURR\\", which takes the robot to the point (2, 2). The Manhattan distance from (0, 0) to (2, 2) is 4, but with 4 steps, the maximum Manhattan distance robot can achieve is 2.","solution":"def max_manhattan_distance(n, commands, k): Calculates the maximum Manhattan distance the robot can reach from the starting point (0, 0) within k steps following the given command sequence. x, y = 0, 0 steps = min(n, k) # The robot cannot take more steps than either the length of the commands or k for i in range(steps): command = commands[i] if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return abs(x) + abs(y)"},{"question":"Your friend has recently taken an interest in string manipulation and puzzles. Noting this, you decide to challenge them with a problem involving the reorganization of strings. You provide them with the following task: Given a string `s` of length `n`, rearrange the characters such that any two adjacent characters are not the same. If such a rearrangement is not possible, return an empty string. For example, for the input string \\"aab\\", one possible valid output is \\"aba\\". If no such arrangement is possible, return \\"\\". Implement the function `reorganize_string(s)` that takes a string `s` as input and returns a possible rearrangement or an empty string if it is not possible to rearrange. **Input** - A single string `s` with length `n` (1 ≤ n ≤ 10^5) consisting of lowercase English letters. **Output** - A rearranged string such that no two adjacent characters are the same, or an empty string if no such arrangement is possible. **Examples** 1. Input: \\"aab\\" Output: \\"aba\\" 2. Input: \\"aaab\\" Output: \\"\\" 3. Input: \\"aabbcc\\" Output: \\"abcabc\\" **Note:** There may be multiple valid outputs for a given input. Any correct arrangement is acceptable.","solution":"from collections import Counter import heapq def reorganize_string(s): Rearranges the string s such that no two adjacent characters are the same. If such a rearrangement is not possible, returns an empty string. count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char reorganized_string = \'\'.join(result) if len(reorganized_string) != len(s): return \\"\\" return reorganized_string"},{"question":"Your task is to write a function that takes a string and determines the smallest window (substring) that contains all the unique characters of the string. The input string will contain only lowercase alphabets and will have at least one character. **Input:** The first line of the input contains a single integer t (1 ≤ t ≤ 10) - the number of test cases. For each test case, there is a single line containing the string s (1 ≤ |s| ≤ 10000) - the string for which you need to find the smallest window. **Output:** For each test case, output the smallest window that contains all unique characters of the given string. If there are multiple answers, return any. **Example:** **Input:** ``` 2 aabcbcdbca aaab ``` **Output:** ``` dbca a ``` **Explanation:** 1. In the first test case, all unique characters of the string `aabcbcdbca` are `a`, `b`, `c`, and `d`. The shortest substring that contains all these characters is \\"dbca\\". 2. In the second test case, the unique characters are `a` and `b`. The shortest substring that contains all these characters is \\"ab\\" or \\"aaab\\".","solution":"def smallest_window_containing_all_unique_chars(s): import collections n = len(s) unique_chars = set(s) required_chars_count = len(unique_chars) left = 0 right = 0 window_char_count = collections.defaultdict(int) formed = 0 min_len = float(\'inf\') min_window = \\"\\" while right < n: char = s[right] window_char_count[char] += 1 if window_char_count[char] == 1: formed += 1 while left <= right and formed == required_chars_count: char = s[left] if right - left + 1 < min_len: min_len = right - left + 1 min_window = s[left:right+1] window_char_count[char] -= 1 if window_char_count[char] == 0: formed -= 1 left += 1 right += 1 return min_window def solve(t, test_cases): results = [] for s in test_cases: results.append(smallest_window_containing_all_unique_chars(s)) return results"},{"question":"You are given two sequences, `a` and `b`, both of length `n`. Your task is to determine the minimum number of operations required to make sequence `a` equal to sequence `b`. In one operation, you can choose any index `i` (1 ≤ i ≤ n) and increment or decrement `a[i]` by 1. The first line of input contains an integer `n` (1 ≤ n ≤ 100,000) - the length of sequences `a` and `b`. The second line of input contains `n` space-separated integers representing the sequence `a` (|a[i]| ≤ 1,000,000). The third line of input contains `n` space-separated integers representing the sequence `b` (|b[i]| ≤ 1,000,000). Output a single integer - the minimum number of operations required to transform sequence `a` into sequence `b`. Example Input: ``` 3 1 2 3 2 3 4 ``` Example Output: ``` 3 ```","solution":"def min_operations_to_equalize_sequences(n, a, b): Calculate the minimum number of operations required to transform sequence `a` into sequence `b`. :param n: int - the length of sequences `a` and `b` :param a: list of int - the initial sequence :param b: list of int - the target sequence :return: int - the minimum number of operations operations = 0 for i in range(n): operations += abs(a[i] - b[i]) return operations"},{"question":"A group of scientists discovers a unique pattern in a certain sequence of integers. Given the first few numbers of the sequence, they realize that each number in the sequence can be obtained by computing the sum of the unique prime factors of the previous number. They want to study this sequence for as many steps as possible but they need your help to generate it. Write a program that takes an integer `n` as input, representing the number of steps to generate the sequence. The sequence always starts with the number 2. Your task is to output the sequence of numbers for `n` steps. For instance, given `n = 5`, the sequence should be: ``` 2, 2, 2, 2, 2 ``` # Input A single integer `n` (1 ≤ n ≤ 100). # Output Output a single line with `n` numbers separated by a space, representing the sequence generated. # Example Input ``` 5 ``` Output ``` 2 2 2 2 2 ``` # Note - The sum of unique prime factors of 2 is 2, so the sequence does not change and remains 2 for any number of steps.","solution":"def unique_prime_factors_sum(n): Generates a sequence of n numbers where each number is obtained by computing the sum of unique prime factors of the previous number, starting from 2. def sum_of_unique_prime_factors(num): factors = set() d = 2 while num > 1: while num % d == 0: factors.add(d) num //= d d += 1 return sum(factors) sequence = [2] for _ in range(n - 1): next_num = sum_of_unique_prime_factors(sequence[-1]) sequence.append(next_num) return sequence def generate_sequence(n): Generates the sequence for n steps based on the unique prime factors sum rule. return unique_prime_factors_sum(n)"},{"question":"Write a function `calculate_influence(n, edges, q, queries)` that takes in four parameters: 1. `n` - an integer representing the number of nodes in a graph (numbered from 0 to n-1) 2. `edges` - a list of tuples where each tuple (u, v) represents an undirected edge between node u and node v 3. `q` - an integer representing the number of queries 4. `queries` - a list of integers where each integer represents a node The function calculates the \\"influence value\\" for each queried node. The influence value of a node `v` is defined as the number of nodes in the graph that are reachable from node `v` excluding node `v` itself. For each query, return the influence value of the queried node in the order the queries are given. **Example:** ```python def calculate_influence(n, edges, q, queries): # Your code here # Example usage: n = 5 edges = [(0, 1), (1, 2), (2, 3), (3, 4)] q = 2 queries = [0, 2] print(calculate_influence(n, edges, q, queries)) # Output: [4, 2] ``` **Constraints:** - `1 <= n <= 100,000` - `0 <= len(edges) <= 200,000` - `1 <= q <= 10,000` - `0 <= queries[i] < n` Make sure that your solution is efficient and works within the constraints. **Explanation:** In the example provided: 1. The graph has 5 nodes (0 to 4) and 4 edges connecting them linearly. 2. There are 2 queries: for nodes 0 and 2. 3. For node 0, you can reach nodes 1, 2, 3, and 4, so the influence value is 4. 4. For node 2, you can reach nodes 0 and 1, so the influence value is 2.","solution":"from collections import deque, defaultdict def calculate_influence(n, edges, q, queries): def bfs(start_node): visited = set() queue = deque([start_node]) visited.add(start_node) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return len(visited) - 1 # exclude the start_node itself # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Process each query and calculate influence values influence_values = [] for node in queries: influence_values.append(bfs(node)) return influence_values"},{"question":"You are given a string consisting of lowercase English letters. You are to process multiple queries. Each query can be of two types: 1. \\"C x y\\": Change the character at position x to y. 2. \\"F l r c\\": Find the frequency of character c in the substring that starts at index l and ends at index r (inclusive). The string is 1-indexed, meaning the first character is at position 1. The first line of the input contains the initial string s (1 ≤ |s| ≤ 105). The next line contains an integer q (1 ≤ q ≤ 105), the number of queries. The next q lines each contain one of the two types of queries described above. Output the results of each \\"F l r c\\" query on a new line. Example: Input: abcabcabc 5 F 1 3 a C 1 b F 1 3 a F 4 9 c C 5 b Output: 1 0 2","solution":"def process_string_operations(s, queries): s = list(s) # Convert string to list for mutability results = [] for query in queries: parts = query.split() if parts[0] == \'C\': x = int(parts[1]) - 1 # 1-indexed to 0-indexed y = parts[2] s[x] = y elif parts[0] == \'F\': l = int(parts[1]) - 1 # 1-indexed to 0-indexed r = int(parts[2]) - 1 # 1-indexed to 0-indexed c = parts[3] count = sum(1 for i in range(l, r + 1) if s[i] == c) results.append(count) return results"},{"question":"You are organizing a charity marathon. Runners register for the marathon, and the event is divided into several checkpoints placed along the route. Each checkpoint records the time at which a runner passes through it. You need to create a system that verifies whether each runner completed the marathon within the maximum allowed time and correctly passed through all checkpoints in the given order. A runner is considered to have successfully completed the marathon if they pass through all the checkpoints in order (from the first to the last) and the total time from the first checkpoint to the last does not exceed the maximum allowed time. The first input line contains two integer numbers n, k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10) — the number of runners and the number of checkpoints. The second line contains k space-separated integers T1, T2, ..., Tk (0 ≤ Ti ≤ 10^7) — the times at which the checkpoints close. The closing times are given in increasing order. The following n lines describe the runners. Each such line i contains k space-separated integers Ri1, Ri2, ..., Rik (0 ≤ Rij ≤ 10^7) — the times at which the i-th runner passes through each of the k checkpoints in order. For each runner, print \\"YES\\" if the runner successfully completed the marathon and \\"NO\\" otherwise. **Example:** ``` Input: 3 4 100 200 300 400 50 150 250 350 90 190 290 390 110 210 310 410 Output: YES YES NO ``` In the example, there are 3 runners and 4 checkpoints. The runners must pass through the checkpoints before the respective closing times (100, 200, 300, 400). The first runner\'s times (50, 150, 250, 350) all meet these conditions, so the output is \\"YES\\". Similarly, the second runner\'s times (90, 190, 290, 390) also meet the conditions, so the output is \\"YES\\". The third runner\'s times (110, 210, 310, 410) fail at the last checkpoint (410 > 400), so the output is \\"NO\\".","solution":"def verify_marathon_completion(n, k, closing_times, runners_times): results = [] for runner in runners_times: successful = True for i in range(k): if runner[i] > closing_times[i]: successful = False break if successful: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A group of n friends decided to participate in a card game tournament. To ensure fair play and excitement, the friends agreed to a unique rule: in each round, a player can only proceed to the next round if they have won at least as many games as the opponent they are facing. This special rule ensures that players advance only through fair competition. The tournament is structured so that players are paired randomly at the beginning, and the winner of each pair advances to the next round. If there is an odd number of players in any round, one randomly chosen player gets a bye and advances automatically. The tournament continues until there is a single winner. Given the number of friends n (1 ≤ n ≤ 10^18), determine the maximum number of games the final winner can play in such a tournament. **Input:** - A single line containing an integer n, representing the number of players participating in the tournament. **Output:** - Print a single integer representing the maximum number of games the winner can play. **Example:** ``` Input 6 Output 3 ``` In the example, with 6 players, the winner can play up to 3 games: one in the first round, one in the second round, and the final game.","solution":"def max_games_played(n): Returns the maximum number of games the winner can play in a tournament with n players. import math return int(math.log2(n)) # Example usage: # print(max_games_played(6)) # Output: 3"},{"question":"Emma enjoys collecting rare stamps. She recently acquired a box containing n stamps, numbered from 1 to n. Each stamp has a unique value assigned to it, representing its rarity. Emma wants to organize her collection according to the following criteria: 1. Split the collection into two groups: one containing only the stamps with even values and the other containing only the stamps with odd values. 2. Within each group, sort the stamps in ascending order based on their values. Help Emma to organize her stamps by providing the sorted list of stamps for each group. Input: - The first line contains an integer n (1 ≤ n ≤ 100), the number of stamps in the collection. - The second line contains n integers, the values of the stamps, where each value is unique and between 1 and 1000. Output: - The first line should contain the sorted values of the stamps with even values. - The second line should contain the sorted values of the stamps with odd values. If a group is empty, output an empty line for that group. Example: Input: 6 2 5 8 3 11 4 Output: 2 4 8 3 5 11","solution":"def organize_stamps(n, stamp_values): even_stamps = [value for value in stamp_values if value % 2 == 0] odd_stamps = [value for value in stamp_values if value % 2 != 0] even_stamps.sort() odd_stamps.sort() return even_stamps, odd_stamps"},{"question":"Given an array of integers representing the initial elevation heights of various terrains, you are to determine how much water can be trapped after it rains. The water trapping mechanism is such that the water will accumulate at the lowest point between two elevations and will not spill over the elevations. # Function Signature ```python def trap_water(heights: List[int]) -> int: pass ``` # Input - `heights`: A list of integers where each integer represents the elevation height at that point. The length of the list n will be between 1 and 100,000 inclusive, and the height of each elevation will be between 0 and 100,000 inclusive. # Output - Return the total units of water that can be trapped. # Example ```python # Example 1 heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] print(trap_water(heights)) # Output: 6 # Example 2 heights = [4, 2, 0, 3, 2, 5] print(trap_water(heights)) # Output: 9 ``` # Explanation - In Example 1, the elevation graph [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] allows 6 units of water to be trapped. - In Example 2, the elevation graph [4, 2, 0, 3, 2, 5] allows 9 units of water to be trapped. # Constraints - You should aim for a solution that runs in linear time, making use of appropriate data structures to keep track of the necessary information efficiently. - Consider edge cases such as empty lists or lists with no elevation change.","solution":"def trap_water(heights): if not heights: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] total_water = 0 while left < right: if heights[left] < heights[right]: left += 1 left_max = max(left_max, heights[left]) total_water += left_max - heights[left] else: right -= 1 right_max = max(right_max, heights[right]) total_water += right_max - heights[right] return total_water"},{"question":"You are given a forest consisting of `n` trees, each characterized by a unique height. A devious lumberjack wants to cut all the trees but in such a way that he always cuts a tree only if it is the same height as some of its already cut neighboring (adjacent in the input) trees. He starts by cutting exactly one tree and then continues according to the rule mentioned above. Your task is to determine the minimum number of different starting trees he needs to cut to eventually cut down all the trees. The first line of the input contains one integer n (1 ≤ n ≤ 100,000), the number of trees. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), where hi indicates the height of the i-th tree from left to right. Output a single integer, the minimum number of different starting trees required. # Example Input: ```plaintext 6 4 2 2 3 3 2 ``` Output: ```plaintext 3 ``` Explanation: - We can start by cutting tree at index 1 (height 4), 2 (height 2), and 4 (height 3). - After cutting tree at index 1, no adjacent tree has height 4, so no further cuts are possible from tree at index 1. - We need to start cutting tree at index 2 (height 2), thus cutting trees at indexes 2, 3 and 6 (all have height 2) since they are adjacent and have the same height. - Similarly, cutting tree at index 4 (height 3) results in cutting trees at indexes 4 and 5 (both have height 3), completing all the cuts. - Therefore, a minimum of 3 different trees need to be cut initially.","solution":"def min_starting_trees_to_cut(n, heights): Determines the minimum number of different starting trees needed to cut to eventually cut down all the trees. :param n: Number of trees :param heights: List containing the height of each tree :return: Minimum number of different starting trees required height_count = {} for height in heights: if height in height_count: height_count[height] += 1 else: height_count[height] = 1 return len(height_count) # Sample usage: # print(min_starting_trees_to_cut(6, [4, 2, 2, 3, 3, 2])) => 3"},{"question":"You are given an array consisting of n integers. Your task is to calculate the number of pairs (i, j) such that 1 le i < j le n and the sum of the elements at these positions is even. You have to answer t independent test cases. The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 le n le 10^5) — the length of the array. The second line of each test case contains n integers — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^5. For each test case, print one integer: the number of pairs (i, j) such that 1 le i < j le n and the sum of the elements at these positions is even. Example input: ``` 3 4 1 2 3 4 5 1 1 1 1 1 3 2 4 6 ``` Example output: ``` 2 10 3 ``` Explanation: - In the first test case, the valid pairs are (1, 3) and (2, 4) because 1 + 3 and 2 + 4 are even. - In the second test case, the valid pairs are (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5) because all pairs of 1 + 1 are even. - In the third test case, the valid pairs are (1, 2), (1, 3), (2, 3) because 2 + 4, 2 + 6, and 4 + 6 are even.","solution":"def count_even_sum_pairs(t, test_cases): Function to count the number of pairs (i, j) (1 <= i < j <= n) such that the sum of elements at these positions is even. Parameters: t: int - number of test cases test_cases: list of tuple - each tuple contains (n: int, array: list of int) Returns: list of int - list of result for each test case results = [] for test in test_cases: n, arr = test even_count = sum(1 for x in arr if x % 2 == 0) odd_count = n - even_count # total elements - even elements gives odd elements # Pairs with both even and pairs with both odd numbers will give even sum even_pairs = even_count * (even_count - 1) // 2 odd_pairs = odd_count * (odd_count - 1) // 2 results.append(even_pairs + odd_pairs) return results"},{"question":"Little Y has a grid of dimensions m × n filled with different integers. He can perform two types of operations on the grid: 1. Select any row and cyclically shift its elements to the right. 2. Select any column and cyclically shift its elements downwards. Given the final configuration of the grid, determine whether it is possible to transform the initial configuration of the grid to the final configuration by performing any number of the two types of operations described above. The first line contains two space-separated integers m and n (1 ≤ m, n ≤ 100). The next m lines each contain n space-separated integers representing the initial configuration of the grid. The following m lines each contain n space-separated integers representing the final configuration of the grid. Print \\"YES\\" if it is possible to transform the initial configuration to the final configuration, otherwise print \\"NO\\". Examples: ``` Input: 2 3 1 2 3 4 5 6 3 1 2 6 4 5 Output: YES Input: 2 2 1 2 3 4 1 3 4 2 Output: NO ```","solution":"def can_transform(initial_grid, final_grid, m, n): Determines if the initial grid can be transformed into the final grid using the defined operations. :param initial_grid: List of lists representing the initial grid configuration. :param final_grid: List of lists representing the final grid configuration. :param m: Number of rows in the grid. :param n: Number of columns in the grid. :return: \\"YES\\" if the transformation is possible, otherwise \\"NO\\" def get_possible_grids(grid, m, n): Generates all possible grids that can be obtained by cyclically shifting rows and columns. :param grid: List of lists representing a grid configuration. :param m: Number of rows in the grid. :param n: Number of columns in the grid. :return: A set of tuples representing all possible grid configurations. possible_grids = set() for row_shift in range(m): for col_shift in range(n): # Create a new grid by shifting rows and columns new_grid = [[0] * n for _ in range(m)] for i in range(m): for j in range(n): new_i = (i + row_shift) % m new_j = (j + col_shift) % n new_grid[new_i][new_j] = grid[i][j] # Add new grid as a tuple to the set possible_grids.add(tuple(tuple(row) for row in new_grid)) return possible_grids initial_possibilities = get_possible_grids(initial_grid, m, n) # Convert final_grid to tuple of tuples for comparison final_grid_tuple = tuple(tuple(row) for row in final_grid) return \\"YES\\" if final_grid_tuple in initial_possibilities else \\"NO\\""},{"question":"Given an m x n grid filled with non-negative integers, find a path from the top left to the bottom right, which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time. The first line of input contains two positive integers m and n (1 ≤ m, n ≤ 200) — the number of rows and columns in the grid. Each of the next m lines contains n space-separated integers. Each integer aij (0 ≤ aij ≤ 1000) is the value of the cell at row i and column j. Output the minimum sum you can achieve. For example, given the grid: ```plaintext 3 3 1 3 1 1 5 1 4 2 1 ``` The output should be 7, because the path 1→3→1→1→1 results in the minimum sum.","solution":"def min_path_sum(grid): Returns the minimum sum of all numbers along a path from the top left to the bottom right of a grid. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Create a 2D dp array with the same dimensions as the grid dp = [[0] * n for _ in range(m)] # Initialize the first cell with the grid\'s first cell\'s value dp[0][0] = grid[0][0] # Fill the first column (can only come from above) for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell of dp array contains the minimum path sum return dp[m-1][n-1]"},{"question":"You are given a list of positive integers and you need to find the maximum sum of a contiguous subarray. This is a well-known problem called \\"Maximum Subarray Problem\\". Write a function that takes an array of positive integers as input and returns the maximum sum of any contiguous subarray within the input array. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^4), the number of integers in the array. - The second line contains `n` positive integers separated by spaces, representing the elements of the array. Each integer in the array will be between 1 and 10^4. # Output - Print a single integer, the maximum sum of any contiguous subarray within the given array. # Example Input: ``` 5 1 2 3 4 5 ``` Output: ``` 15 ``` In this example, the entire array is the subarray with the maximum sum. # Example Input: ``` 9 5 4 3 2 1 5 4 3 2 ``` Output: ``` 29 ``` In this example, the entire array again forms the subarray with the maximum sum. Make sure your solution is efficient enough to handle the upper limits of the input constraints.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray within the input array. Uses Kadane\'s Algorithm. max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global def get_maximum_subarray_sum(n, arr): return max_subarray_sum(arr)"},{"question":"In a distant land, there is a mystical forest where magical creatures live. Each creature has a certain magical power level associated with it. One day, the forest guardian decides to organize a contest where contestants need to form the strongest possible team of magical creatures under specific constraints. You are given a list of `n` magical creatures, each with a unique power level represented by an integer. The task is to form a team of creatures such that the sum of their power levels is as large as possible, with the constraint that no two creatures in the team have a difference in their power levels greater than `k`. Given the constraint that the number of magical creatures is `n` (1 ≤ n ≤ 100) and the power level difference limit is `k` (1 ≤ k ≤ 100), help the forest guardian determine the maximum possible sum of the power levels of the team. # Input - The first line contains two integers `n` and `k`. - The second line contains `n` integers representing the power levels of the magical creatures. # Output - Output a single integer representing the maximum possible sum of the power levels of the team. # Example Input ``` 5 3 1 3 6 9 11 ``` Output ``` 28 ``` # Explanation A valid team can be composed of the creatures with power levels 1, 3, 6, 9, and 11 since the differences between each pair of power levels are all within 3. The sum of these power levels is 1 + 3 + 6 + 9 + 11 = 30.","solution":"def max_power_sum(n, k, power_levels): # Sort the power levels to easily check the difference constraint power_levels.sort() # Initialize dp array where dp[i] will store the maximum power sum we can get with the first i+1 elements dp = [0] * n dp[0] = power_levels[0] for i in range(1, n): # Initialize the current sum to be just the current element max_sum = power_levels[i] # Iterate backward to find the max sum that includes current element for j in range(i - 1, -1, -1): if power_levels[i] - power_levels[j] <= k: max_sum = max(max_sum, power_levels[i] + dp[j]) else: break # Set the dp[i] to the found max sum dp[i] = max(dp[i-1], max_sum) return dp[-1] # Example usage # n = 5, k = 3 # power_levels = [1, 3, 6, 9, 11] # print(max_power_sum(n, k, power_levels)) # Output: 30"},{"question":"A company has introduced a new email inbox system where each user can have multiple separate inboxes. The system needs to ensure that any email sent to a user is correctly routed to one of their inboxes such that no inbox gets overwhelmed with too many emails. Each user might receive emails regularly throughout the day. The software needs to decide which inbox to place each incoming email into. The decision should be made such that the maximum number of emails in any user\'s inbox is minimized. Given an array emails, where emails[i] represents the number of emails received by the i-th user, and an integer k representing the number of inboxes each user has, determine the minimum possible maximum number of emails in any single inbox across all users after all emails have been distributed. Assume that emails are distributed optimally. # Input - An integer n (1 ≤ n ≤ 10^5) – the number of users. - An integer k (1 ≤ k ≤ 100) – the number of inboxes each user has. - An array emails of n integers (1 ≤ emails[i] ≤ 10^9) – the number of emails received by each user. # Output - A single integer, representing the minimum possible maximum number of emails in any single inbox after distribution. # Example `Input` ``` 3 2 [10, 20, 30] ``` `Output` ``` 15 ``` # Note In the given example with 3 users and each having 2 inboxes: - User 1 has 10 emails which can be evenly divided as 5 emails in each inbox. - User 2 has 20 emails which can be divided as 10 emails in each inbox. - User 3 has 30 emails which can be divided as 15 emails in each inbox. The maximum number of emails in any inbox is 15, which is the optimal solution.","solution":"def minimize_max_emails(n, k, emails): Determines the minimum possible maximum number of emails in any single inbox after optimal distribution. :param n: Integer, number of users :param k: Integer, number of inboxes each user has :param emails: List of integers, number of emails each user received :return: Integer, minimum possible maximum number of emails in any single inbox def is_possible(max_emails): Helper function to check if it\'s possible to distribute emails such that no inbox has more than max_emails emails. :param max_emails: Integer, the maximum emails allowed per inbox :return: Boolean, True if possible, False otherwise return all(email <= max_emails * k for email in emails) left, right = 1, max(emails) while left < right: mid = (left + right) // 2 if is_possible(mid): right = mid else: left = mid + 1 return left"},{"question":"You are given an integer array `arr` of size `n` and a separate integer `m`. Your task is to find if it is possible to partition the array into exactly `m` non-empty contiguous subarrays such that the sum of elements in each subarray is a prime number. If such a partition is possible, print \\"YES\\", otherwise print \\"NO\\". # Input - The first line contains an integer `t` denoting the number of test cases. (1 ≤ t ≤ 10) - Each test case contains: - The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100). - The second line contains `n` integers representing the array `arr`, where each element is between -1000 and 1000. # Output For each test case, print \\"YES\\" if it is possible to partition the array into exactly `m` subarrays with each subarray having a prime sum, otherwise print \\"NO\\". # Example Input ``` 2 5 3 2 3 5 7 11 6 2 1 4 5 -3 6 8 ``` Output ``` YES NO ``` # Note - For the first test case, one possible partition is [2, 3], [5, 7], [11], each subarray having a prime sum. - For the second test case, it\'s not possible to partition the array into exactly 2 subarrays having prime sums.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def can_partition(arr, n, m): from functools import lru_cache @lru_cache(None) def dfs(i, parts_left): if i == n and parts_left == 0: return True if i == n or parts_left == 0: return False current_sum = 0 for j in range(i, n): current_sum += arr[j] if is_prime(current_sum): if dfs(j + 1, parts_left - 1): return True return False return dfs(0, m) def solve(test_cases): results = [] for n, m, arr in test_cases: if can_partition(arr, n, m): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example function to parse the input as per the problem statement def from_input_string(input_string): input_lines = input_string.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] idx = 1 for _ in range(t): n, m = map(int, input_lines[idx].split()) arr = list(map(int, input_lines[idx + 1].split())) test_cases.append((n, m, arr)) idx += 2 return test_cases"},{"question":"You are given a sequence of integers representing the amount of rainwater collected in each barrel in a row of barrels after a storm. Each barrel has a different capacity for holding water, and you are tasked with determining the total amount of water that can be collected in these barrels. In order to do this, if you observe that any barrel overflows due to its capacity being lower than the amount of water it holds, you should consider only up to its capacity, and any excess spills out and is lost. Write a function that, given the sequence of integers representing the amount of rainwater `rainwaters`, and a corresponding sequence of integers representing the capacities of each barrel `capacities`, calculates the total amount of water actually collected in the barrels after considering the capacities. Your function should return a single integer, which is the total amount of rainwater contained in the barrels after overflow is taken into account. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of barrels. - The second line contains `n` space-separated integers representing the amount of water in each barrel after the storm. - The third line contains `n` space-separated integers representing the capacity of each barrel. # Output - Output a single integer representing the total amount of rainwater that can be contained in the barrels after considering their capacities. # Example Input ``` 5 4 5 2 7 10 3 6 1 8 9 ``` Output ``` 23 ``` # Explanation In the given example, the first barrel collects only 3 units of water (capacity exceeded by 1), the second barrel collects 5 units (within capacity), the third barrel collects only 1 unit (capacity exceeded by 1), the fourth barrel collects 7 units (within capacity), and the fifth barrel collects 9 units (capacity exceeded by 1). Summing these, we get 3 + 5 + 1 + 7 + 9 = 25 units of water effectively collected.","solution":"def total_collected_rainwater(n, rainwaters, capacities): Calculate the total amount of rainwater that can be collected in the barrels, taking into account the capacities of each barrel. :param n: The number of barrels. :param rainwaters: List of integers representing the amount of rainwater in each barrel. :param capacities: List of integers representing the capacity of each barrel. :return: Total amount of rainwater collected after considering the capacities. total_water_collected = 0 for i in range(n): total_water_collected += min(rainwaters[i], capacities[i]) return total_water_collected"},{"question":"You are given an array of integers representing the scores of participants in a competition. Your task is to find and return the maximum difference between the score of any two participants, such that the score of the participant on the left is less than that of the participant on the right. If no such pair exists, return -1. The first line contains an integer n (2 ≤ n ≤ 100) — the number of participants. The second line contains n integers separated by spaces denoting the scores of the participants, where the i-th integer represents the score of the i-th participant (1 ≤ score ≤ 1000). Output a single integer, which is the maximum difference between the scores of any two participants meeting the given condition, or -1 if no such pairs exist. Examples: Input: 5 1 2 90 10 110 Output: 109 Input: 4 100 90 80 70 Output: -1","solution":"def max_difference(n, scores): Returns the maximum difference between the scores of any two participants, where the score of the participant on the left is less than that of the participant on the right. If no such pair exists, returns -1. max_diff = -1 min_score = scores[0] for i in range(1, n): if scores[i] > min_score: max_diff = max(max_diff, scores[i] - min_score) min_score = min(min_score, scores[i]) return max_diff"},{"question":"In a company, employees work on different projects as a part of different teams. Each employee can only be part of one team, and each team works on multiple projects. The company wants to calculate the total number of unique projects being worked on by all employees. You are given two lists: 1. `employees`: A list of dictionaries where each dictionary represents an employee and has two keys: \\"id\\" (an integer representing the employee\'s ID) and \\"team_id\\" (an integer representing the ID of the team to which the employee belongs). 2. `projects`: A list of dictionaries where each dictionary represents a project and has two keys: \\"id\\" (an integer representing the project\'s ID) and \\"team_id\\" (an integer representing the ID of the team responsible for the project). Your task is to write a function `unique_projects` that takes the lists `employees` and `projects` as input and returns the total number of unique projects being worked on by all employees. **Constraints**: - `employees` list will contain up to 100,000 elements. - `projects` list will contain up to 50,000 elements. - Project and team IDs are positive integers. **Example**: Input: ```python employees = [ {\\"id\\": 1, \\"team_id\\": 1}, {\\"id\\": 2, \\"team_id\\": 1}, {\\"id\\": 3, \\"team_id\\": 2} ] projects = [ {\\"id\\": 101, \\"team_id\\": 1}, {\\"id\\": 102, \\"team_id\\": 2}, {\\"id\\": 103, \\"team_id\\": 3}, {\\"id\\": 101, \\"team_id\\": 1} ] ``` Output: ```python 2 ``` In this example, there are 2 unique projects being worked on by teams of employees: Project 101 by team 1 and Project 102 by team 2 (103 is not counted as there are no employees in team 3). **Function Signature**: ```python def unique_projects(employees: List[Dict[str, int]], projects: List[Dict[str, int]]) -> int: pass ```","solution":"from typing import List, Dict def unique_projects(employees: List[Dict[str, int]], projects: List[Dict[str, int]]) -> int: # Create a set of team_ids that have employees team_ids_with_employees = set(employee[\'team_id\'] for employee in employees) # Create a set of unique project_ids for teams that have employees unique_project_ids = set() for project in projects: if project[\'team_id\'] in team_ids_with_employees: unique_project_ids.add(project[\'id\']) return len(unique_project_ids)"},{"question":"You are given a rectangular matrix of integers with dimensions m x n, and an integer t. Your task is to find the number of distinct elements that appear in every row of the matrix and are greater than or equal to t. The first line contains three integers m, n, and t (1 ≤ m, n ≤ 1000; -10^9 ≤ t ≤ 10^9). Each of the next m lines contains n integers which represent the elements of the matrix (−10^9 ≤ matrix[i][j] ≤ 10^9). Output the number of distinct elements that appear in every row of the matrix and are greater than or equal to t. For example: Input: ``` 3 4 2 1 2 3 4 2 3 4 5 3 4 5 6 ``` Output: ``` 2 ``` Explanation: In the given matrix, the elements that appear in every row and are greater than or equal to 2 are [3, 4]. Hence, the distinct elements satisfying the condition are [3, 4], and the count is 2.","solution":"def num_distinct_elements(m, n, t, matrix): Returns the number of distinct elements that appear in every row of the matrix and are greater than or equal to t. element_sets = [] for row in matrix: element_sets.append(set(x for x in row if x >= t)) common_elements = set.intersection(*element_sets) return len(common_elements)"},{"question":"You are given a string consisting of lowercase Latin letters. You want to rearrange the letters of this string in such a way that no two adjacent characters are the same. If there are multiple possible rearrangements, return the lexicographically smallest one. If there is no valid rearrangement, return the string \\"IMPOSSIBLE\\". The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the length of the string. The second line contains a string of length n. Print one string — the lexicographically smallest rearranged string with no two adjacent characters being the same, or the string \\"IMPOSSIBLE\\" if no valid rearrangement exists. In the first sample, you could rearrange the string \\"aabb\\" to \\"abab\\". In the second sample, \\"aa\\" cannot be rearranged to satisfy the condition, so the output should be \\"IMPOSSIBLE\\".","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string such that no two adjacent characters are the same. Returns the lexicographically smallest rearranged string or \\"IMPOSSIBLE\\". # Counter of characters count = Counter(s) max_heap = [] for char, freq in count.items(): heapq.heappush(max_heap, (-freq, char)) prev_char = None prev_freq = 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) # Append the current character to the result result.append(char) # If the previous character has more remaining, push it back to the heap if prev_char and prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Update previous character and its frequency prev_char = char prev_freq = freq + 1 # Increment since we have used one of its occurrences rearranged_string = \'\'.join(result) # If the rearranged string length is not equal to the input length, then it is impossible if len(rearranged_string) != len(s): return \\"IMPOSSIBLE\\" return rearranged_string"},{"question":"You are given a sequence of n numbers, some of which may be repeated. Your goal is to find the k-th smallest distinct number in the sequence. If the sequence has fewer than k distinct numbers, output -1. # Input - The first line contains two integers n and k (1 leq n leq 10^5, 1 leq k leq 10^5) — the length of the sequence and the position of the smallest distinct number to find. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the sequence. # Output - Output the k-th smallest distinct number in the sequence, or -1 if there are fewer than k distinct elements. # Example Input ``` 7 3 4 5 1 5 3 3 4 ``` Output ``` 4 ``` Input ``` 5 6 1 2 2 1 1 ``` Output ``` -1 ``` # Explanation In the first example, the distinct numbers in sorted order are [1, 3, 4, 5]. The 3rd smallest distinct number is 4. In the second example, the distinct numbers in sorted order are [1, 2], but there are only 2 distinct numbers, fewer than 6. Hence, the output is -1.","solution":"def k_th_smallest_distinct(n, k, sequence): Finds the k-th smallest distinct number in the sequence. Returns -1 if there are fewer than k distinct numbers. Parameters: n (int): Length of the sequence k (int): The k-th position sequence (list of int): The sequence of numbers Returns: int: The k-th smallest distinct number or -1 if there are fewer than k distinct numbers. distinct_numbers = sorted(set(sequence)) if len(distinct_numbers) < k: return -1 return distinct_numbers[k - 1]"},{"question":"You are given an array of n integers representing the ages of employees in a company. Management has decided to group employees into age groups. Each group must contain at least one employee whose age is the average age of the employees in that group. For example, a group with ages [30, 32, 34] is valid if it contains an employee of age 32, as 32 is the average of 30, 32, and 34. You need to determine the minimum number of groups that can be formed from the given ages while satisfying the above condition. Input: - The first line contains an integer n (1 le n le 10^5), the number of employees. - The second line contains n space-separated integers a_1, a_2, dots, a_n (1 le a_i le 100) representing the ages of the employees. Output: - Print a single number which is the minimum number of groups. Example: Input: ``` 5 30 30 32 32 34 ``` Output: ``` 2 ``` Explanation: - One possible grouping is [30, 32, 34], where the average age is 32 (in the group). - Another grouping is [30, 32], where the average age is also 32. In this case, there are at least two such groups satisfying the condition.","solution":"def min_groups_with_avg_age(employees_ages): from collections import Counter age_count = Counter(employees_ages) max_count = 0 for age, count in age_count.items(): max_count = max(max_count, count) return max_count"},{"question":"Alex is learning about sorting algorithms in his computer science class. One of his assignments is to practice sorting a list of words. The teacher has a list of words and needs them to be sorted in lexicographical order so that Alex can verify his sorting algorithm\'s correctness. Since Alex is fairly new to programming, he decided to write a function that sorts the given list of words. Write a function `sort_words` that takes a list of words `words_list` as input and returns a new list with the words sorted in lexicographical order. The input list `words_list` will contain between 1 and 1000 words, each consisting of lowercase English letters and having length between 1 and 100 characters. # Example Input ``` words_list = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"] ``` Output ``` [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"] ``` Input ``` words_list = [\\"zebra\\", \\"mouse\\", \\"elephant\\", \\"dog\\", \\"cat\\"] ``` Output ``` [\\"cat\\", \\"dog\\", \\"elephant\\", \\"mouse\\", \\"zebra\\"] ```","solution":"def sort_words(words_list): Takes a list of words and returns a new list with the words sorted in lexicographical order. return sorted(words_list)"},{"question":"You have recently landed a job as a software engineer, and your first task is to optimize the performance of a certain system. The system processes a series of tasks, and each task has a specific processing time. Unfortunately, the system requires all tasks to be processed before a certain deadline, and you want to ensure that the total processing time does not exceed this deadline. Given an array of integers where each integer represents the processing time of a task, and a single integer representing the deadline, your goal is to determine the maximum number of tasks that can be processed without exceeding the deadline. You must choose tasks in such a way that their cumulative processing time is as large as possible but does not exceed the given deadline. Input: - The first line contains an integer n (1 le n le 10^5) — the number of tasks. - The second line contains n integers t_1, t_2, ldots, t_n (1 le t_i le 10^4) — the processing times of the tasks. - The third line contains a single integer d (1 le d le 10^9) — the deadline. Output: - Output a single integer representing the maximum number of tasks that can be processed without exceeding the deadline. Example: Input: ``` 5 1 2 3 4 5 10 ``` Output: ``` 4 ``` In the example above, you can process tasks with processing times 1, 2, 3, and 4 (totaling 10), which maximizes the number of tasks without exceeding the deadline.","solution":"def max_tasks(n, task_times, deadline): Finds the maximum number of tasks that can be processed without exceeding the deadline. Parameters: n (int): The number of tasks. task_times (list of int): The processing times of the tasks. deadline (int): The deadline. Returns: int: The maximum number of tasks that can be processed without exceeding the deadline. task_times.sort() total_time = 0 count = 0 for time in task_times: if total_time + time <= deadline: total_time += time count += 1 else: break return count"},{"question":"A courier service company wants to optimize their delivery routes. They have several delivery points along a straight road and need to determine the maximum distance between two consecutive delivery points to judge whether their drivers can manage the route efficiently. You are given the distances of these delivery points from the starting point on the road. Input begins with an integer n (2 ≤ n ≤ 100000), the number of delivery points. Following this is a line with n integers representing the distances of each delivery point from the starting point. All distances are positive integers not exceeding 10^9. Output the maximum distance between two consecutive delivery points when they are sorted in ascending order. For example, if the input is: 4 2 5 8 17 The sorted distances are: 2, 5, 8, 17. The maximum distance between consecutive points is: 9 (distance between 8 and 17). Thus, the final output should be 9.","solution":"def max_distance_between_deliveries(n, delivery_points): Finds the maximum distance between two consecutive delivery points when sorted. :param n: int - the number of delivery points (2 ≤ n ≤ 100000) :param delivery_points: list of int - the distances of each delivery point from the starting point :return: int - the maximum distance between two consecutive delivery points # Sort the delivery points delivery_points.sort() # Initialize the maximum distance as zero max_distance = 0 # Iterate through the sorted delivery points to find the maximum distance for i in range(1, n): max_distance = max(max_distance, delivery_points[i] - delivery_points[i - 1]) return max_distance"},{"question":"Karen and Lan are participating in a contest where they need to construct words from a given set of letters. They have n letters in the set. In each player\'s turn, the player selects a letter from the set and appends it to their word. If a player\'s word becomes a palindrome after adding the new letter, they score a point and start forming a new word that begins with the just-added letter. The player who cannot make a move because there are no more letters left in the set loses. Karen starts the game and the players alternate turns. Determine which player will win if both players play optimally. The first line contains a single integer n (1 ≤ n ≤ 100) — the number of letters in the set. The second line contains n characters separated by spaces — the letters in the set (each letter is a lowercase English letter). If Karen wins, print \\"Karen\\", otherwise print \\"Lan\\" (without quotes). You can print each letter in any case (upper or lower). In the first sample test, Karen wins immediately because there is only one letter which is a palindrome by itself. In the second sample test, if Karen chooses the letter \'a\', Lan will choose \'b\', making it tricky to score a point. The optimal play needs deeper analysis.","solution":"def determine_winner(n, letters): Determine the winner of the game given the number of letters and the set of letters. Returns \\"Karen\\" if Karen wins, otherwise \\"Lan\\". if n % 2 == 1: return \\"Karen\\" else: return \\"Lan\\""},{"question":"You are given two strings, `s1` and `s2`, where `s1` is a potential subsequence of `s2`. Your task is to determine whether `s1` can be formed from the characters of `s2` without reordering the characters of `s2`. If `s1` can be formed, return `True`; otherwise, return `False`. Implement a function called `is_subsequence` that takes two strings, `s1` and `s2`, as inputs and returns a boolean indicating whether `s1` is a subsequence of `s2`. Function signature: ```python def is_subsequence(s1: str, s2: str) -> bool: ``` # Example ```python s1 = \\"abc\\" s2 = \\"ahbgdc\\" is_subsequence(s1, s2) # Output: True s1 = \\"axc\\" s2 = \\"ahbgdc\\" is_subsequence(s1, s2) # Output: False ``` # Constraints - All input strings will consist of lowercase English letters. - The length of `s1` and `s2` will not exceed 1000 characters.","solution":"def is_subsequence(s1: str, s2: str) -> bool: Determine if s1 is a subsequence of s2. index_s1 = 0 index_s2 = 0 while index_s1 < len(s1) and index_s2 < len(s2): if s1[index_s1] == s2[index_s2]: index_s1 += 1 index_s2 += 1 return index_s1 == len(s1)"},{"question":"Write a function that takes an integer n indicating the number of people standing in a circle. They are numbered from 1 to n. Starting from the first person, every second person is removed from the circle, and the process continues with the person next to the one who was just removed, until only one person remains. The goal is to find the position of the last person standing. Implement the function `josephus(n)` that returns the position of the last person standing. # Input: - An integer n (1 ≤ n ≤ 10^6) representing the number of people in the circle. # Output: - An integer representing the position of the last person standing. # Example: - Input: n = 7 - Output: 7 Explanation: 1. Start with 7 people: [1, 2, 3, 4, 5, 6, 7] 2. Remove every second person: - Remove 2: [1, 3, 4, 5, 6, 7] - Remove 4: [1, 3, 5, 6, 7] - Remove 6: [1, 3, 5, 7] - Continue this process... 3. The last person standing is at position 7.","solution":"def josephus(n): Returns the position of the last person standing in the Josephus problem. Parameters: - n (int): The number of people in the circle Returns: - int: The position of the last person standing if n == 1: return 1 else: return (josephus(n - 1) + 1) % n + 1"},{"question":"Aria is playing a game on a grid of size n x m, initialized with zeros. She can perform the following operation any number of times: choose any two distinct cells in the same row or the same column and increment the values in both cells by 1. She wants to transform the grid so that all cells have the same value. The first line contains two integers, n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The second line contains a single integer k (0 ≤ k ≤ min(n, m) * 10^4) representing the number of operations she can apply to the grid. Determine if it is possible for Aria to transform the grid into a state where all cells have the same value using exactly k operations. If possible, print \\"YES\\" followed by the integer value that all cells should have. If not possible, print \\"NO\\". Example 1: ``` Input: 2 2 2 Output: YES 1 ``` Example 2: ``` Input: 3 3 8 Output: NO ``` Note: - In the first sample, Aria can perform the operation twice. For example, she can increment the cells (1,1) and (1,2), and then increment (2,1) and (2,2). - In the second sample, Aria cannot make all cell values equal with exactly 8 operations.","solution":"def can_transform_grid(n, m, k): Determine if it is possible to transform the grid so that all cells have the same value using exactly k operations. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. k (int): Number of operations allowed. Returns: str: \\"YES value\\" if it is possible to achieve the goal, where value is the integer value of each cell; \\"NO\\" if it is not possible. # The maximum number of operations that can be performed is limited by the smaller dimension. # For a grid of n x m, the minimum number of cells is min(n, m). min_operations_needed = min(n, m) # Check if k is exactly a multiple of the smaller dimension times the maximum number of pairs we can form. if k % min_operations_needed == 0: operations_per_cell = k // min_operations_needed return f\\"YES {operations_per_cell}\\" else: return \\"NO\\""},{"question":"A string is said to be \\"balanced\\" if the number of occurrences of each vowel (\'a\', \'e\', \'i\', \'o\', \'u\') in the string is the same. For example, the string \\"aebecdieoua\\" is balanced because each of the vowels appears twice in it. Given a string s, determine if it is balanced. If it is, print \\"YES\\", otherwise print \\"NO\\". The first line of the input contains a single integer n (1 leq n leq 100), which denotes the length of the string. The second line contains the string s consisting of lowercase Latin letters. Print \\"YES\\" (without quotes) if the string is balanced, otherwise print \\"NO\\". You can print each letter in any case (upper or lower). **Sample Input 1:** ``` 10 aaeeiioouu ``` **Sample Output 1:** ``` YES ``` **Sample Input 2:** ``` 5 aeiou ``` **Sample Output 2:** ``` YES ``` **Sample Input 3:** ``` 20 aebecdieouaabbccdd ``` **Sample Output 3:** ``` NO ```","solution":"def is_balanced(n, s): Determines if the given string is balanced based on the occurrences of vowels. Parameters: n (int): The length of the string. s (str): The string to check. Returns: str: \\"YES\\" if the string is balanced, otherwise \\"NO\\". vowels = \'aeiou\' counts = {v: 0 for v in vowels} for char in s: if char in vowels: counts[char] += 1 vowel_counts = set(counts.values()) # Check if all vowel counts are same and non-zero if len(vowel_counts) == 1 and 0 not in vowel_counts: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a binary tree, you need to find out whether it is a valid Binary Search Tree (BST). A valid BST is defined as follows: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. You will be given the elements of the binary tree in the form of an array where elements are filled breadth-wise, i.e., left to right level by level. Some elements may be `null`, representing that there is no node present at that position in the binary tree. **Input:** - A single integer `n` representing the number of elements in the binary tree. - An array of elements `arr` representing the binary tree nodes in breadth-wise order where some elements can be `null`. **Output:** - A boolean value, `True` if the binary tree is a valid BST, otherwise `False`. **Example:** Input: ``` 7 [2, 1, 3, null, null, null, null] ``` Output: ``` True ``` Input: ``` 7 [5, 1, 4, null, null, 3, 6] ``` Output: ``` False ``` **Note:** - The binary tree can have at most `10^4` nodes. - The value of each node is within the range of `-10^4` to `10^4`.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def construct_tree(arr): if not arr: return None nodes = [] for val in arr: if val is not None: nodes.append(TreeNode(val)) else: nodes.append(None) root = nodes[0] queue = [root] index = 1 while queue and index < len(nodes): node = queue.pop(0) if node: if index < len(nodes) and nodes[index] is not None: node.left = nodes[index] queue.append(node.left) index += 1 if index < len(nodes) and nodes[index] is not None: node.right = nodes[index] queue.append(node.right) index += 1 return root def is_valid_bst(root, low=float(\'-inf\'), high=float(\'inf\')): if not root: return True if not (low < root.val < high): return False return is_valid_bst(root.left, low, root.val) and is_valid_bst(root.right, root.val, high) def validate_bst(n, arr): root = construct_tree(arr) return is_valid_bst(root)"},{"question":"A magician has decided to perform a number trick. He writes down two integer numbers a and b on a blackboard. During each of the next few minutes, he either adds or multiplies those numbers, then replaces them with the result. The magician continues this process until he reaches a single number. To enhance the trick, he asks his assistant to pick any two numbers during each step. The assistant can always choose which pair of numbers to add or multiply together. Your task is to determine the maximum possible number the magician can obtain by optimally choosing the operations at each step. Input: - The first line contains two integers, a and b (0 ≤ a, b ≤ 1000) — the initial numbers on the blackboard. Output: - Output a single integer — the maximum result that can be obtained. Example: Input: 3 5 Output: 15 In this example, one optimal sequence could be: perform the multiplication of 3 and 5 to get 15. There are no other operations, so the result is simply 15.","solution":"def max_result(a, b): Returns the maximum result obtained by optimally choosing either addition or multiplication. return max(a + b, a * b)"},{"question":"You are given an undirected graph with n vertices and m edges. Your task is to determine if the graph contains a cycle, and if it does, return one such cycle. The graph is represented by n vertices numbered from 1 to n and m edges where each edge connects two different vertices. If there are multiple cycles, you can return any one of them. # Input - The first line contains two integers, n and m - the number of vertices and edges respectively (1 le n le 1000, 0 le m le 2000). - The next m lines contain two integers each, u and v, representing an edge between vertices u and v (1 le u, v le n and u neq v). # Output - If there is no cycle, print \\"NO\\". - If there is a cycle, print \\"YES\\" on the first line. On the second line, print the vertices of the cycle in the order they appear in the cycle. If there are multiple cycles, you can output any one of them. # Example Input ``` 4 4 1 2 2 3 3 1 3 4 ``` Output ``` YES 1 2 3 1 ``` Input ``` 4 2 1 2 3 4 ``` Output ``` NO ``` You need to implement a solution that efficiently determines whether a cycle exists in the given graph and returns one such cycle if it exists.","solution":"def find_cycle(n, m, edges): from collections import defaultdict def dfs(v, parent): visited[v] = True stack.append(v) for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif neighbor != parent: # Cycle found cycle_start = stack.index(neighbor) cycle.append(stack[cycle_start:] + [neighbor]) return True stack.pop() return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) stack = [] cycle = [] for i in range(1, n + 1): if not visited[i]: if dfs(i, -1): cycle_flat = [str(vertex) for vertex in cycle[0]] return \\"YESn\\" + \\" \\".join(cycle_flat) return \\"NO\\" # Example usage: n, m = 4, 4 edges = [(1, 2), (2, 3), (3, 1), (3, 4)] print(find_cycle(n, m, edges)) # Output should be \\"YESn1 2 3 1\\""},{"question":"You have been tasked with generating vouchers for a popular online store. Each voucher has a unique alphanumeric code and an associated discount percentage. You are given a list of voucher codes and their discounts. Write a function `sortVouchers(vouchers: List[Tuple[str, int]]) -> List[Tuple[str, int]]` that takes in a list of tuples where each tuple contains a voucher code (a string) and the discount percentage (an integer between 1 and 100). The function should return the vouchers sorted in descending order based on the discount percentage. If two vouchers have the same discount percentage, they should be ordered by their voucher code in ascending alphabetical order. # Input: - A list of tuples, where each tuple consists of a voucher code (string) and a discount percentage (int). # Output: - A list of tuples sorted by discount percentage in descending order, and by voucher code in ascending order in case of ties. # Example: ```python vouchers = [(\\"XMAS2023\\", 50), (\\"WELCOME10\\", 10), (\\"HOLIDAY20\\", 20), (\\"FREESHIP\\", 50)] sorted_vouchers = sortVouchers(vouchers) print(sorted_vouchers) ``` The expected output for the given example would be: ``` [(\'FREESHIP\', 50), (\'XMAS2023\', 50), (\'HOLIDAY20\', 20), (\'WELCOME10\', 10)] ```","solution":"from typing import List, Tuple def sortVouchers(vouchers: List[Tuple[str, int]]) -> List[Tuple[str, int]]: This function sorts a list of vouchers in descending order based on the discount percentage. If two vouchers have the same discount percentage, the voucher codes are sorted in ascending order. :param vouchers: A list of tuples, where each tuple consists of a voucher code (string) and a discount percentage (int). :return: A list of sorted tuples. return sorted(vouchers, key=lambda x: (-x[1], x[0]))"},{"question":"You are given two arrays of integers a and b of length n. You need to determine if there exists a permutation of the array b such that every element of the array b is greater than or equal to the corresponding element of the array a. Print \\"Yes\\" if such a permutation exists, otherwise print \\"No\\". For example, if a = [1, 3, 5] b = [4, 2, 6] The answer is \\"Yes\\" because the permutation [4, 6, 2] of array b can be compared as: 4 >= 1 6 >= 3 2 >= 5 If a = [2, 4, 7] b = [1, 5, 6] The answer is \\"No\\" because no permutation of array b will have all elements greater than or equal to the corresponding elements in array a. The first line contains a single integer n (1 ≤ n ≤ 105) — the number of elements in the sequences. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the first array. The third line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 109) — the second array. Output a single line with \\"Yes\\" or \\"No\\". Example 1: Input: 3 1 3 5 4 2 6 Output: Yes Example 2: Input: 3 2 4 7 1 5 6 Output: No","solution":"def can_permute_greater_or_equal(a, b): Determines if there exists a permutation of array b such that every element of the array b is greater than or equal to the corresponding element of array a. :param a: List[int], the first array. :param b: List[int], the second array. :return: str, \\"Yes\\" if such a permutation exists, otherwise \\"No\\". a.sort() b.sort() for i in range(len(a)): if b[i] < a[i]: return \\"No\\" return \\"Yes\\""},{"question":"In an online game, players can collect various rare items hidden throughout the game world. Each item has a unique identifier and a specific rarity value. Players can create collections of items and trade them with each other. The value of a collection is determined by the sum of the rarity values of all items in the collection. You are given an inventory list for several players. For each player, determine the highest valued collection they can form. The first line of the input contains a single integer p (1 ≤ p ≤ 100) — the number of players. Each of the next p sections describes a player\'s inventory and consists of the following: 1. A line containing an integer m (1 ≤ m ≤ 50) — the number of items in the player\'s inventory. 2. m lines follow, each containing two space-separated values: a string representing the item\'s identifier and an integer representing the item\'s rarity value (0 ≤ rarity value ≤ 1000). Output p lines. Each line should contain the highest collection value for the respective player. Example: Input: 3 4 sword 300 shield 100 potion 200 ring 400 3 gem 500 coin 150 necklace 450 5 helmet 250 armor 350 boots 150 cape 300 gloves 100 Output: 1000 1100 1150","solution":"def highest_valued_collection(p, inventories): Given a list of inventories for several players, determine the highest valued collection each player can form. Parameters: p (int): The number of players. inventories (list of list): Each player\'s inventory represented as a list of tuples (item_id, rarity_value). Returns: list: The highest collection value for each player. result = [] for inventory in inventories: # Each inventory is a list of tuples (item_id, rarity_value) max_value = sum(rarity_value for item_id, rarity_value in inventory) result.append(max_value) return result"},{"question":"You are a spaceship captain on an intergalactic mission, and you are managing a fleet of cargo carriers. Each carrier has a maximum capacity, which cannot be exceeded during the mission. Your task is to efficiently load the cargo into the carriers such that you maximize the utilization of available capacity. Given an integer array `weights` where `weights[i]` represents the weight of the ith cargo, and an integer `maxCapacity` which is the maximum capacity that any carrier can carry, determine the minimum number of carriers required to transport all the cargo. The cargo must be loaded such that the sum of weights in each carrier does not exceed `maxCapacity`. You can assume that each carrier can carry unlimited cargos as long as their total weight does not exceed `maxCapacity`. Input: The first line contains an integer `t` denoting the number of test cases. Each of the next `t` blocks of lines follows this format: - The first line of each test case contains two integers `n` and `maxCapacity` — the number of cargos and the maximum capacity of each carrier. - The second line of each test case contains `n` space-separated integers representing the weights of the cargos. Output: For each test case, output the minimum number of carriers required. Example: ``` Input: 2 4 10 2 3 5 8 3 4 1 2 3 Output: 2 2 ``` Explanation: In the first test case, we can use two carriers: - The first carrier carries cargos with weights [8, 2], making the total weight 10. - The second carrier carries cargos with weights [5, 3], making the total weight 8. In the second test case, we can use two carriers: - The first carrier carries all three cargos with weights [1, 2, 1], making the total weight 4. - The second carrier carries the remaining cargo with weight 3.","solution":"def min_carriers_required(weights, maxCapacity): Given a list of weights and a maximum capacity, determine the minimum number of carriers required. weights.sort(reverse=True) carriers = 0 while weights: carriers += 1 capacity_left = maxCapacity for weight in list(weights): if weight <= capacity_left: capacity_left -= weight weights.remove(weight) return carriers def process_test_cases(t, test_cases): results = [] for i in range(t): n, maxCapacity = test_cases[i * 2] weights = test_cases[i * 2 + 1] result = min_carriers_required(weights, maxCapacity) results.append(result) return results"},{"question":"A pharmaceutical company is conducting an experiment to develop a new drug. The company has a set of chemical substances, and they want to test all possible pairs of these substances. You are tasked with writing a program to analyze the compatibility of these pairs. The experiment involves n chemical substances, where each substance has a unique index from 1 to n. For each pair of substances, the compatibility score is measured, and if the score is above a certain threshold k, the pair is considered compatible. The compatibility score between substances i and j is denoted by score(i, j). It is guaranteed that score(i, j) = score(j, i) for all 1 le i < j le n. You need to find out the total number of compatible pairs of substances based on the given threshold. The first line of the input contains two integers n and k (1 le n le 1000, 1 le k le 10000). The next n times (n-1) / 2 lines contain the compatibility scores for each pair in the format: i j score(i, j), where 1 le i < j le n and 1 le score(i, j) le 10000. Output a single integer, the total number of compatible pairs of substances. # Example: Input: ``` 4 50 1 2 60 1 3 40 1 4 70 2 3 80 2 4 30 3 4 90 ``` Output: ``` 4 ``` Explanation: The compatible pairs are: - (1, 2) with a score of 60 - (1, 4) with a score of 70 - (2, 3) with a score of 80 - (3, 4) with a score of 90","solution":"def count_compatible_pairs(n, k, scores): Returns the count of compatible pairs of substances based on the provided compatibility scores and threshold. compatible_pairs_count = 0 for score in scores: i, j, s = score if s > k: compatible_pairs_count += 1 return compatible_pairs_count"},{"question":"Little Dormi has found another intriguing puzzle and needs your expertise to solve it. The puzzle consists of a grid with n rows and m columns, where each cell can contain either a wooden block (\'#\') or be empty (\'.\'). Additionally, there is a series of commands given to rotate the grid 90 degrees to the right, a specified number of times. When rotating the grid, all wooden blocks maintain their relative positions within their new rows and columns after each rotation. Your task is to determine the final configuration of the grid after performing all specified rotations. # Input Format - The first line contains two integers n and m (1 leq n, m leq 100) which represent the number of rows and columns in the grid, respectively. - The following n lines each contain m characters, representing the initial state of the grid. Each character is either \'#\' or \'.\'. - The next line contains a single integer k (0 leq k < 10^9) which denotes the number of 90-degree right rotations to be performed on the grid. # Output Format - Output the final state of the grid after performing the rotations. # Example **Input:** ``` 3 3 #.. .#. ..# 2 ``` **Output:** ``` ..# .#. #.. ``` **Explanation:** After two 90-degree rotations to the right: 1. First rotation: ``` ..# .#. #.. ``` 2. Second rotation (returns to the original state): ``` #.. .#. ..# ``` Thus, the final state of the grid is: ``` #.. .#. ..# ``` Note: Since k can be very large, you should handle the number of rotations efficiently, minimizing the number of actual rotation operations performed.","solution":"def rotate_grid(n, m, grid, k): Rotates the grid 90 degrees to the right `k` times. :param n: number of rows in the grid :param m: number of columns in the grid :param grid: list of strings representing the initial state of the grid :param k: number of 90-degree right rotations :return: final grid state after `k` rotations k %= 4 # Since rotating 4 times returns the grid to the original state def rotate_once(g): return [\'\'.join(g[i][j] for i in range(len(g) - 1, -1, -1)) for j in range(len(g[0]))] for _ in range(k): grid = rotate_once(grid) return grid"},{"question":"Design a function that takes a list of integers and an integer k, and returns the length of the shortest contiguous subarray whose sum is equal to or greater than k. If no such subarray exists, return -1. For example, given the list [2, 1, 5, 2, 3, 2] and k = 7, the shortest subarray is [5, 2], so the function should return 2. If the list is [2, 1, 5, 2, 8] and k = 7, the shortest subarray is [8], so the function should return 1. If the list is [1, 1, 1, 1, 1, 1, 1, 1] and k = 9, the function should return -1. The function signature is: ```python def min_subarray_len(nums: list[int], k: int) -> int: ``` Constraints: - 1 ≤ len(nums) ≤ 10^5 - 1 ≤ nums[i] ≤ 10^4 - 1 ≤ k ≤ 10^9 Examples: ``` min_subarray_len([2, 1, 5, 2, 3, 2], 7) -> 2 min_subarray_len([2, 1, 5, 2, 8], 7) -> 1 min_subarray_len([1, 1, 1, 1, 1, 1, 1, 1], 9) -> -1 ``` Solve this problem using an efficient approach, considering the constraints.","solution":"def min_subarray_len(nums, k): Returns the length of the shortest contiguous subarray whose sum is equal to or greater than k. If no such subarray exists, returns -1. n = len(nums) min_len = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= k: min_len = min(min_len, end - start + 1) current_sum -= nums[start] start += 1 return min_len if min_len != float(\'inf\') else -1"},{"question":"Given an array of integers and a target sum, implement a function that returns the indices of the two numbers which add up to the target sum. You may assume that each input would have exactly one solution, and you may not use the same element twice. # Function Signature ```python def two_sum(nums: List[int], target: int) -> List[int]: ``` # Input - `nums` (List[int]): A list of integers. - `target` (int): The target sum. # Output - List[int]: A list of two integers, the indices of the two numbers in `nums` that add up to the `target`. # Example ```python assert two_sum([2, 7, 11, 15], 9) == [0, 1] # nums[0] + nums[1] = 2 + 7 = 9 ``` # Constraints - Each input would have exactly one solution. - You may not use the same element twice. - The problem must be solved in O(n) time complexity. # Note - Your solution should consider the possibility of negative numbers and zeros. - Utilize appropriate data structures to achieve the required time complexity.","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: Returns the indices of the two numbers which add up to the target sum. Args: nums (List[int]): A list of integers. target (int): The target sum. Returns: List[int]: List containing two indices of the numbers whose sum equals the target. # Dictionary to store numbers and their respective indices num_to_index = {} for i, num in enumerate(nums): difference = target - num # Check if difference is in the dictionary if difference in num_to_index: return [num_to_index[difference], i] # Store the number with its index num_to_index[num] = i"},{"question":"You are given a grid of size n times n. Each cell in the grid can either be empty or contain an obstacle. You have to determine the number of distinct paths from the top-left cell (1,1) to the bottom-right cell (n,n) such that each path only consists of moving right or down through empty cells and does not pass through any cells containing obstacles. Assume you are given t test cases. In each test case, you will be provided with the grid size n and the positions of the obstacles. The first line contains an integer t (1 le t le 50) — the number of test cases. For each test case, the first line contains an integer n (1 le n le 100) — the size of the grid. The next line contains an integer m (0 le m le n^2) — the number of obstacles in the grid. Each of the next m lines contains two integers x and y (1 le x, y le n) — the 1-based coordinates of an obstacle in the grid. For each test case, print a single integer: - The number of distinct paths from the top-left cell to the bottom-right cell modulo 10^9 + 7. If there is no path, output 0.","solution":"MOD = 10**9 + 7 def num_distinct_paths(n, obstacles): if obstacles[0][0] == 1 or obstacles[n-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 # Starting point for i in range(n): for j in range(n): if obstacles[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] % MOD if j > 0: dp[i][j] += dp[i][j-1] % MOD return dp[n-1][n-1] % MOD def solve(t, test_cases): results = [] for case in test_cases: n, m, obstacle_positions = case obstacles = [[0] * n for _ in range(n)] for x, y in obstacle_positions: obstacles[x-1][y-1] = 1 results.append(num_distinct_paths(n, obstacles)) return results"},{"question":"Ninja Turtle Leonardo is training in a grid town. The town is represented by an m x n grid, where some cells contain obstacles. Leonardo can only move right or down to reach the bottom-right cell of the grid. Determine the number of unique paths Leonardo can take to move from the top-left cell to the bottom-right cell, given that he must avoid obstacles. The first line of the input contains two integers m and n, indicating the number of rows and columns, respectively. The next m lines contain n integers, each either 0 (empty cell) or 1 (obstacle). The input limitations for getting 30 points are: 1 ≤ m, n ≤ 10 The input limitations for getting 100 points are: 1 ≤ m, n ≤ 100 Output a single integer, the number of unique paths Leonardo can take from the top-left to the bottom-right cell. Example input: 3 3 0 0 0 0 1 0 0 0 0 Example output: 2","solution":"def unique_paths_with_obstacles(grid): Given a grid indicating obstacles (1) and free spaces (0), this function calculates the number of unique paths from the top-left corner to the bottom-right corner, moving only right or down. if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Starting point # Filling in the values for the first column for i in range(1, m): dp[i][0] = dp[i-1][0] if grid[i][0] == 0 else 0 # Filling in the values for the first row for j in range(1, n): dp[0][j] = dp[0][j-1] if grid[0][j] == 0 else 0 # Calculating the number of paths for remaining cells for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] else: dp[i][j] = 0 return dp[m-1][n-1] # Function to handle input and output for the environment def solve(grid_input): m, n, *grid_flat = list(map(int, grid_input.split())) grid = [grid_flat[i*n:(i+1)*n] for i in range(m)] return unique_paths_with_obstacles(grid) # Example usage: # print(solve(\\"3 3n0 0 0n0 1 0n0 0 0\\")) # Expected output: 2"},{"question":"Given an integer array of size `n`, your task is to find the smallest subarray with a sum greater than a given value `x`. Write a function `minLengthSubarray(arr, n, x)` that takes an array of integers `arr` of length `n` and an integer `x`, and returns the length of the smallest subarray with a sum greater than `x`. If no such subarray exists, return `0`. # Input - `arr`: an array of integers - `n`: an integer representing the size of the array - `x`: an integer representing the target sum # Output - An integer representing the length of the smallest subarray with a sum greater than `x`. If no such subarray exists, return `0`. # Constraints - `1 <= n <= 10^5` - `1 <= arr[i] <= 10^4` - `0 <= x <= 10^9` # Example ```python arr = [1, 4, 45, 6, 0, 19] n = 6 x = 51 minLengthSubarray(arr, n, x) ``` Output: `3` # Explanation In the example, the smallest subarray with a sum greater than `51` is `[4, 45, 6]`, which has a length of `3`.","solution":"def minLengthSubarray(arr, n, x): Returns the length of the smallest subarray with a sum greater than x. If no such subarray exists, returns 0. min_length = n + 1 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > x: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length <= n else 0"},{"question":"A large online bookstore has a system where they track the availability of each book by using a unique number id for each book. They have recently started allowing vendors to list their books on the platform, causing some books to be listed under multiple ids. To reduce redundancy, they want to merge their catalog by combining the listings for the same book and removing duplicates. Given a sequence of N unique book ids and K sets of pairings, where each pairing represents two ids of the same book, the task is to determine the number of unique books remaining after merging all the duplicate ids. Two ids are considered duplicates if they are directly paired or can be indirectly linked through other pairings. Your task is to write a function that takes two arguments - the list of N ids and the list of K pairings, and returns the number of unique books remaining after merging. **Input Format:** - The first input is an integer N (1 ≤ N ≤ 10^5), the number of unique book ids. - The second input is a list of integers representing the N unique book ids. - The third input is an integer K (0 ≤ K ≤ 10^5), the number of pairs of ids that should be considered the same book. - The fourth input is a list of lists, where each sublist contains two integers representing a pair of ids that are the same book. **Output Format:** - Return an integer representing the number of unique books remaining after merging. **Example:** ```python def count_unique_books(n, book_ids, k, pairings): # Your implementation here # Input n = 5 book_ids = [1, 2, 3, 4, 5] k = 3 pairings = [[1, 2], [2, 3], [4, 5]] # Output print(count_unique_books(n, book_ids, k, pairings)) # Output: 2 ``` **Explanation:** - Initially, there are 5 unique book ids: [1, 2, 3, 4, 5]. - After processing the pairings: [1, 2], [2, 3], [4, 5], the first 3 ids (1, 2, 3) are recognized as the same book, and the last 2 ids (4, 5) are recognized as the same book. - Hence, there are 2 unique books remaining. **Note:** - Ensure your function runs efficiently within the provided constraints. Use appropriate data structures to achieve optimal performance.","solution":"def count_unique_books(n, book_ids, k, pairings): parent = {book_id: book_id for book_id in book_ids} def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX for x, y in pairings: union(x, y) unique_roots = len(set(find(book_id) for book_id in book_ids)) return unique_roots"},{"question":"You are given a rectangular grid consisting of n rows and m columns. Each cell of the grid contains an integer. Your task is to find the largest sum of integers in any subgrid of size k times l (i.e., a subgrid consisting of exactly k rows and l columns). The grid of size n times m is represented by an array of n rows, where each row contains m integers. You will also be given the values of k and l. Consider the following example with a grid of size 3 times 5 and k = 2 and l = 2: ``` 1 2 3 1 2 0 3 1 0 5 3 4 2 0 1 ``` In this example, the largest sum subgrid of size 2 times 2 is: ``` 3 1 2 0 ``` which has a sum of 3 + 1 + 2 + 0 = 6. Write a program to find the largest sum of any k times l subgrid. # Input The first line of the input contains three integers n, m, and q (1 leq n, m leq 1000), where q denotes the number of queries. The next n lines each contain m integers representing the elements of the grid. The next q lines each contain two integers k and l (1 leq k leq n, 1 leq l leq m) representing the size of the subgrid for each query. # Output For each query, output the largest sum of any k times l subgrid. # Example Input ``` 3 5 1 1 2 3 1 2 0 3 1 0 5 3 4 2 0 1 2 2 ``` # Example Output ``` 10 ``` # Note In the example input, the subgrid with the largest sum is: ``` 1 2 0 3 ``` Another subgrid with the same sum of 10 is: ``` 1 0 3 4 ```","solution":"def max_sum_subgrid(matrix, n, m, k, l): Returns the maximum sum of any subgrid of size k x l in an n x m grid. # Calculate the cumulative sum of the grid to facilitate # efficient subgrid sum calculations. cumulative_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n): for j in range(m): cumulative_sum[i + 1][j + 1] = matrix[i][j] + cumulative_sum[i][j + 1] + cumulative_sum[i + 1][j] - cumulative_sum[i][j] max_sum = -float(\'inf\') for i in range(n - k + 1): for j in range(m - l + 1): subgrid_sum = ( cumulative_sum[i + k][j + l] - cumulative_sum[i][j + l] - cumulative_sum[i + k][j] + cumulative_sum[i][j] ) max_sum = max(max_sum, subgrid_sum) return max_sum"},{"question":"Anya is managing a hospital\'s queue management system. Patients are registered in the queue based on their critical level and the time they arrive at the hospital. The queue follows these rules: 1. Patients with the highest critical level get priority. 2. If there are multiple patients with the same critical level, the one who arrived earlier gets priority. The hospital uses two operations on the queue: - `REGISTER x y` - Registers a patient with critical level `x` and arrival time `y`. - `CALL` - Removes the patient with the highest priority from the queue (one who would be attended next). Your task is to help Anya manage the operations and keep track of which patient is called each time an operation is performed. The first line contains an integer `n` (1 ≤ n ≤ 105) - the number of operations Anya will perform. The next `n` lines contain the operations in the order they are performed. Each operation can be: - `REGISTER x y` (1 ≤ x ≤ 105, 1 ≤ y ≤ 109) - Registers a patient with critical level `x` and arrival time `y`. - `CALL` - Removes the patient with the highest priority from the queue. For each `CALL` operation, print two integers: the critical level and the arrival time of the patient Anya calls. If the queue is empty when a `CALL` operation is performed, print `-1 -1`. Example: ``` Input: 6 REGISTER 2 5 REGISTER 3 2 CALL REGISTER 2 6 CALL CALL Output: 3 2 2 5 2 6 ``` In this example, the first `CALL` operation calls the patient registered with critical level 3 and arrival time 2. The second `CALL` operation calls the patient registered with critical level 2 and arrival time 5. The third `CALL` operation calls the patient registered with critical level 2 and arrival time 6.","solution":"import heapq def manage_hospital_queue(operations): Manages operations in the hospital\'s queue system and returns the results of CALL operations. Parameters: operations (List[str]): List of operations to be performed. Returns: List[Tuple[int, int]]: List of (critical_level, arrival_time) of called patients. max_heap = [] results = [] for operation in operations: if operation.startswith(\\"REGISTER\\"): _, critical_level, arrival_time = operation.split() critical_level = int(critical_level) arrival_time = int(arrival_time) heapq.heappush(max_heap, (-critical_level, arrival_time)) elif operation == \\"CALL\\": if max_heap: critical_level, arrival_time = heapq.heappop(max_heap) results.append((-critical_level, arrival_time)) else: results.append((-1, -1)) return results # Example usage: # operations = [ # \\"REGISTER 2 5\\", # \\"REGISTER 3 2\\", # \\"CALL\\", # \\"REGISTER 2 6\\", # \\"CALL\\", # \\"CALL\\" # ] # print(manage_hospital_queue(operations)) # Output: [(3, 2), (2, 5), (2, 6)]"},{"question":"A company is looking to optimize its inventory management. They use a system where each product is assigned a unique integer ID. Every day, they receive a shipment and sell some products, and at the end of each day, they want to ensure that the inventory remains balanced according to certain rules. You are given the initial inventory of each product in the form of a list of integers, where the integer represents the quantity of each product. Every day for the next d days, the company will process two operations sequentially: 1. Increase the quantity of each product by a fixed amount u (i.e., a shipment arrives). 2. Decrease the quantity of each product by another fixed amount v (i.e., products are sold). The company defines \'balanced\' inventory as a state where the quantity of each product must be non-negative (i.e., no product should have a negative quantity). Your task is to determine if the company\'s inventory will remain balanced after d days of operations. **Input:** - An integer n (1 le n le 10^5) — the number of different products. - A list of n integers representing the initial quantities of each product, where each quantity is between 0 and 10^9. - Three integers d, u, and v (1 le d, u, v le 10^9) — the number of days, the quantity added to each product each day, and the quantity subtracted from each product each day, respectively. **Output:** - Print \\"Balanced\\" if the inventory remains balanced after d days, otherwise print \\"Unbalanced\\". **Example:** Input: ``` 3 10 20 15 5 3 4 ``` Output: ``` Balanced ``` Input: ``` 2 5 5 3 2 7 ``` Output: ``` Unbalanced ``` **Explanation:** In the first example, after each day, the inventory increases by 3 and then decreases by 4 for each product. Thus, the quantities will change as follows, for each product: - Day 1: (10 + 3 - 4), (20 + 3 - 4), (15 + 3 - 4) = 9, 19, 14 - Day 2: (9 + 3 - 4), (19 + 3 - 4), (14 + 3 - 4) = 8, 18, 13 - Day 3: ... - After 5 days, the quantities will be: 5, 15, 10 Since no product goes below zero, the inventory remains balanced. In the second example, consider the quantities after each day: - Day 1: (5 + 2 - 7) = 0 for both products, - Day 2 would result in negative quantities, hence the output is \\"Unbalanced\\".","solution":"def is_inventory_balanced(n, quantities, d, u, v): for i in range(n): if quantities[i] + d * (u - v) < 0: return \\"Unbalanced\\" return \\"Balanced\\""},{"question":"You are given two arrays, X and Y, each consisting of distinct integers and both of length n. Your goal is to find an integer m that minimizes the following quantity: `|m - X[i]| + |m - Y[i]|` for all 1 ≤ i ≤ n. In other words, you need to find the integer m that minimizes the total distance to both arrays X and Y. **Input:** - The first line contains an integer n (1 ≤ n ≤ 100,000), the length of the arrays. - The second line contains n distinct integers X[1], X[2], ..., X[n] (1 ≤ X[i] ≤ 10^9). - The third line contains n distinct integers Y[1], Y[2], ..., Y[n] (1 ≤ Y[i] ≤ 10^9). **Output:** - Output a single integer m that minimizes the given sum. **Example:** Input: ``` 3 2 6 8 3 5 7 ``` Output: ``` 5 ``` In the example, the integer 5 minimizes the total distance when considering the elements of both arrays X and Y.","solution":"def minimize_distance(n, X, Y): Given two arrays X and Y, each consisting of n distinct integers, this function finds an integer m that minimizes the sum of absolute differences between m and the elements of X and Y. Args: n (int): The number of elements in arrays X and Y. X (list of int): An array of n distinct integers. Y (list of int): An array of n distinct integers. Returns: int: The integer m that minimizes the given sum. combined_sorted = sorted(X + Y) median_index = (2 * n - 1) // 2 # Get the median index return combined_sorted[median_index]"},{"question":"You have just been hired as an engineer at a gas distribution company. The company has a large network of pipelines connecting various nodes. Each node can be viewed as a junction where one or more pipelines meet. The company wants to monitor the gas pressure at each node more efficiently. Each pipeline has a maximum capacity it can handle before it gets overloaded. If the pressure on any pipeline exceeds its maximum capacity, it will get damaged and cause significant losses. You need to determine the minimum possible maximum gas pressure that needs to be monitored such that no pipeline gets damaged. You are given: - An integer `n` (1 ≤ n ≤ 100,000) representing the number of nodes. - An integer `m` (1 ≤ m ≤ 100,000) representing the number of pipelines. - `m` lines each containing three integers `u`, `v`, and `w`, where `u` and `v` are the nodes connected by a pipeline and `w` is the maximum capacity of that pipeline. Your task is to find the minimum possible maximum gas pressure that needs to be monitored at any node such that no pipeline gets overloaded. Input: - The first line contains two integers `n` and `m`. - The next `m` lines each contain three integers `u`, `v`, and `w`. Output: - Print one integer: the minimum possible maximum gas pressure that needs to be monitored at any node. Example: Input: ``` 5 6 1 2 4 1 3 6 2 3 5 2 4 3 3 4 7 4 5 8 ``` Output: ``` 8 ``` Explanation: - The minimum possible maximum gas pressure needed to be monitored is 8 because we can distribute the pressure among the nodes such that no pipeline exceeds its maximum capacity.","solution":"def minimum_possible_max_pressure(n, m, pipelines): Determines the minimum possible maximum gas pressure that needs to be monitored at any node such that no pipeline gets overloaded. Parameters: n (int): Number of nodes. m (int): Number of pipelines. pipelines (list of tuple of int): Each tuple contains three integers (u, v, w) representing the nodes u and v connected by a pipeline with a maximum capacity of w. Returns: int: The minimum possible maximum gas pressure that needs to be monitored. from collections import defaultdict import heapq # Create the graph representation using adjacency list graph = defaultdict(list) for u, v, w in pipelines: graph[u].append((v, w)) graph[v].append((u, w)) # Prim\'s algorithm to find the minimum spanning tree def prim_mst(): visited = [False] * (n + 1) min_heap = [(0, 1)] # Starting from node 1 with 0 initial cost max_weight_in_mst = 0 while min_heap: weight, node = heapq.heappop(min_heap) if visited[node]: continue visited[node] = True max_weight_in_mst = max(max_weight_in_mst, weight) for neighbor, w in graph[node]: if not visited[neighbor]: heapq.heappush(min_heap, (w, neighbor)) return max_weight_in_mst return prim_mst() # Example usage example_pipelines = [ (1, 2, 4), (1, 3, 6), (2, 3, 5), (2, 4, 3), (3, 4, 7), (4, 5, 8) ] print(minimum_possible_max_pressure(5, 6, example_pipelines)) # Output should be 8"},{"question":"A pangram is a phrase that contains all the letters of the alphabet at least once. If we want to check if a given string is a pangram, we can simply ensure that each letter \'a\' through \'z\' appears in the string at least once. Your task is to write a function `is_pangram(s)` that takes a string `s` and returns `True` if `s` is a pangram and `False` otherwise. Function Signature: `def is_pangram(s: str) -> bool:` **Input** - A single string `s` consisting of lowercase English letters and spaces (1 ≤ |s| ≤ 1000). **Output** - A boolean value, `True` if `s` is a pangram and `False` otherwise. **Example** 1. Input: `\\"the quick brown fox jumps over a lazy dog\\"` Output: `True` Explanation: The given string contains all the letters \'a\' through \'z\'. 2. Input: `\\"hello world\\"` Output: `False` Explanation: The given string does not contain all the letters \'a\' through \'z\'. **Note** - Consider the characters exclusively from \'a\' to \'z\'. Uppercase letters and any other characters can be ignored.","solution":"def is_pangram(s: str) -> bool: Returns True if string s is a pangram, otherwise False. alphabet_set = set(\\"abcdefghijklmnopqrstuvwxyz\\") # Create a set of characters found in the string characters_in_s = set(s.replace(\\" \\", \\"\\").lower()) # Check if all alphabet letters are present in characters_in_s return alphabet_set.issubset(characters_in_s)"},{"question":"Code construction site: You are in charge of directing deliveries of equipment to multiple workstations along a straight construction site. Each equipment type is designated by an integer, and the stations each need a specific sequence of equipment to function properly. Imagine you have a number of plans, where each plan specifies a sequence of required equipment types for a construction site. Equipment deliveries come in sequential order (each equipment type labeled between 1 and \'m\'). Your task is to determine if the delivered sequence of equipment can satisfy one or more of these plans in the exact given order. For this problem, the construction site can take up to \'n\' different plans (where 1 <= n <= 10), and each plan has at most \'k\' pieces of equipment (where 1 <= k <= 50). The delivered sequence of equipment is provided in the input, which contains between 1 and 1000 pieces of equipment. # Input: - The first line of the input contains integers \'n\' and \'m\' (1 <= n <= 10, 1 <= m <= 50), representing the number of plans and the number of different types of equipment. - The next \'n\' lines each contains a sequence of integers representing a plan. Each sequence is separated by spaces and consists of different types of equipment required for that plan. - The following line contains an integer \'l\' (1 <= l <= 1000) representing the length of the delivery sequence. - The next line contains \'l\' integers representing the sequence of delivered equipment. # Output: - If one or more of the plans can be satisfied exactly in the given order by any contiguous subsequence of the delivered equipment, print \\"YES\\". - Otherwise, print \\"NO\\". # Example: Input: ``` 3 4 1 2 3 4 1 2 2 3 4 7 4 1 2 3 1 2 3 ``` Output: ``` YES ``` Explanation: Plan 2 \\"4 1 2\\" matches a contiguous subsequence \\"4 1 2\\" in the delivered sequence. Plan 3 \\"2 3 4\\" also matches the last contiguous subsequence \\"2 3 4\\". Thus the result is \\"YES\\".","solution":"def can_satisfy_any_plan(n, m, plans, l, deliveries): for plan in plans: plan_length = len(plan) for i in range(l - plan_length + 1): if deliveries[i:i + plan_length] == plan: return \\"YES\\" return \\"NO\\""},{"question":"Implement a function that takes a list of integers and returns the longest contiguous subarray that is sorted in non-decreasing order. If there are multiple subarrays with the same maximum length, return the first one encountered. The function should have the following signature: ```python def longest_sorted_subarray(arr: List[int]) -> List[int]: # Your code here ``` # Example ```python print(longest_sorted_subarray([1, 3, 5, 4, 7])) ``` Output: ```python [1, 3, 5] ``` ```python print(longest_sorted_subarray([2, 2, 2, 2, 2])) ``` Output: ```python [2, 2, 2, 2, 2] ``` # Constraints * The input list will have at most 1000 elements. * Each element of the input list will be an integer between -10^5 and 10^5.","solution":"from typing import List def longest_sorted_subarray(arr: List[int]) -> List[int]: if not arr: return [] start = 0 max_len = 1 max_start = 0 for i in range(1, len(arr)): if arr[i] < arr[i - 1]: start = i current_len = i - start + 1 if current_len > max_len: max_len = current_len max_start = start return arr[max_start:max_start + max_len]"},{"question":"Consider a board game that involves navigating through a 2D grid with obstacles. The grid is represented as an m times n matrix where each cell contains either a 0 or a 1. A cell with 0 indicates a passable path, while a cell with 1 indicates an obstacle. The player starts at the top-left corner of the grid (position (0, 0)) and aims to reach the bottom-right corner (position (m-1, n-1)). The player can move right, down, left, or up, but cannot move diagonally or out of bounds. Given the grid, determine if the player can reach the bottom-right corner from the top-left corner. If it is possible, output the minimum number of moves required to reach the goal. Otherwise, output -1. The first line contains two integers m and n (1 le m, n le 1000), the dimensions of the grid. Each of the next m lines contains n integers (either 0 or 1), representing the grid. Print a single integer, which is the minimum number of moves required to reach the bottom-right corner, or -1 if it is not possible. # Example ``` Input: 3 3 0 0 0 1 1 0 0 0 0 Output: 4 ``` In this example, the player can follow the path (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) which requires 4 moves.","solution":"from collections import deque def min_moves_to_reach_end(m, n, grid): if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == m - 1 and y == n - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # Example usage m = 3 n = 3 grid = [ [0, 0, 0], [1, 1, 0], [0, 0, 0] ] print(min_moves_to_reach_end(m, n, grid)) # Output: 4"},{"question":"You are given a grid-based city represented as a 2D plane with streets along the integer coordinates, similar to a chessboard. Each intersection of streets is a crossing point on the grid. The city also has special roads denoted as \\"express routes\\" that connect specific pairs of grid points directly. These express routes are bidirectional and can be used as shortcuts. Your task is to find the minimal travel distance from point A to point B. You can travel along the grid streets or use the express routes. Each step between adjacent grid points along the streets has a distance of 1 unit. The distance of traveling along an express route is the Euclidean distance between the two endpoints. # Input Format - The first line contains an integer n (0 leq n leq 10^5), representing the number of express routes. - The next n lines each contain four integers x_1, y_1, x_2 and y_2 (-10^9 leq x_1, y_1, x_2, y_2 leq 10^9), representing an express route between (x_1, y_1) and (x_2, y_2). - The next line contains four integers ax, ay, bx, and by (-10^9 leq ax, ay, bx, by leq 10^9), representing the coordinates of point A and point B. # Output Format - Print the minimal travel distance between point A and point B. The answer will be considered correct if its absolute or relative error does not exceed 10^{-6}. # Example Input ``` 3 1 1 5 5 2 2 6 6 3 3 7 7 1 1 8 8 ``` Output ``` 7.07106781 ``` Explanation: There is a direct express route from (1,1) to (5,5), which then allows easier access to the final destination, thus minimizing the total travel distance. # Notes Consider both the grid-based paths and the express routes when calculating the minimal distance. Use appropriate algorithms, such as Dijkstra\'s algorithm, to efficiently find the shortest path considering both types of routes.","solution":"import heapq from math import sqrt def euclidean_distance(x1, y1, x2, y2): return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) def grid_distance(x1, y1, x2, y2): return abs(x2 - x1) + abs(y2 - y1) def minimal_travel_distance(n, express_routes, ax, ay, bx, by): graph = { (ax, ay): [] if (ax, ay) == (bx, by) else [(bx, by, grid_distance(ax, ay, bx, by))] } for x1, y1, x2, y2 in express_routes: if (x1, y1) not in graph: graph[(x1, y1)] = [] if (x2, y2) not in graph: graph[(x2, y2)] = [] dist = euclidean_distance(x1, y1, x2, y2) graph[(x1, y1)].append((x2, y2, dist)) graph[(x2, y2)].append((x1, y1, dist)) # Connect express points to start and end if not already done if (ax, ay) not in graph: graph[(ax, ay)] = [] if (bx, by) not in graph: graph[(bx, by)] = [] graph[(ax, ay)].append((x1, y1, grid_distance(ax, ay, x1, y1))) graph[(ax, ay)].append((x2, y2, grid_distance(ax, ay, x2, y2))) graph[(bx, by)].append((x1, y1, grid_distance(bx, by, x1, y1))) graph[(bx, by)].append((x2, y2, grid_distance(bx, by, x2, y2))) heap = [(0, ax, ay)] visited = set() while heap: current_dist, current_x, current_y = heapq.heappop(heap) if (current_x, current_y) in visited: continue if (current_x, current_y) == (bx, by): return current_dist visited.add((current_x, current_y)) for neighbor_x, neighbor_y, distance in graph[(current_x, current_y)]: if (neighbor_x, neighbor_y) not in visited: heapq.heappush(heap, (current_dist + distance, neighbor_x, neighbor_y)) return float(\'inf\') # Sample usage: n = 3 express_routes = [(1, 1, 5, 5), (2, 2, 6, 6), (3, 3, 7, 7)] ax, ay, bx, by = 1, 1, 8, 8 print(minimal_travel_distance(n, express_routes, ax, ay, bx, by)) # Expected output: around 7.07106781"},{"question":"Catherine is creating a new game that involves drawing trees. A tree is a connected, undirected graph with no cycles. To design the game levels, she needs your help with the following problem: Given a tree with n vertices (numbered from 1 to n), determine whether it is possible to make it into a full k-ary tree by adding a minimum number of edges, if necessary. A full k-ary tree is a tree where every node has either 0 or exactly k children, except for the leaves that have no children. The first line of the input contains two integers, n and k (1 ≤ n, k ≤ 1000). The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) indicating that there is an edge between nodes u and v in the tree. If it is possible to transform the given tree into a full k-ary tree by adding edges, output \\"YES\\" and print the edges that should be added. If it is impossible, output \\"NO\\". Example: ``` Input: 5 2 1 2 1 3 3 4 3 5 Output: YES 2 1 ```","solution":"def can_form_k_ary_tree(n, k, edges): from collections import defaultdict, deque if k == 0: # Special case where k is 0, impossible to form k-ary tree return \\"NO\\", [] tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # To check if the current structure can be made a full k-ary tree added_edges = [] degree = {i: 0 for i in range(1, n + 1)} def bfs(node): # BFS to traverse the tree and check the degree queue = deque([node]) visited = set([node]) while queue: current = queue.popleft() if degree[current] > k: return False child_count = 0 for neighbor in tree[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) child_count += 1 if child_count > k: return False degree[current] = child_count for node in range(1, n + 1): if node not in visited: return False return True # Assume node 1 as root (since nodes are numbered from 1 to n) if bfs(1): return \\"YES\\", added_edges else: return \\"NO\\", [] # An example usage of the function can be demonstrated below: n = 5 k = 2 edges = [(1, 2), (1, 3), (3, 4), (3, 5)] result, added_edges = can_form_k_ary_tree(n, k, edges) print(result) for edge in added_edges: print(edge)"},{"question":"Yan has a bookshelf with *n* books, and he enjoys rearranging them in various orders. He quickly grew curious about how he could reorder his books according to specific rules. Given *n* books where each book *i* is assigned a color *c_i* (an integer between 1 and *m*, inclusive, where *m* is the number of different colors), Yan wants to know how many distinct ways he can arrange the books such that no two adjacent books have the same color. Your task is to write a program that calculates the number of valid arrangements of the books where no two consecutive books are of the same color. # Input - The first line contains two integers *n* (1 le n le 100) and *m* (1 le m le 100). - The second line contains *n* space-separated integers *c_1, c_2, ..., c_n* (1 le c_i le m), where *c_i* represents the color of the i-th book. # Output - Output a single integer, which is the number of valid arrangements of the books. # Example Input ``` 3 3 1 2 3 ``` Output ``` 12 ``` # Note For the example above with 3 books and 3 colors, the valid arrangements (with the condition that no two consecutive books share the same color) total to 12: 1. 1 2 1 2. 1 2 3 3. 1 3 1 4. 1 3 2 5. 2 1 2 6. 2 1 3 7. 2 3 1 8. 2 3 2 9. 3 1 2 10. 3 1 3 11. 3 2 1 12. 3 2 3","solution":"def count_arrangements(n, m, colors): Returns the number of valid ways to arrange n books such that no two adjacent books have the same color. if n == 1: return m # Initialize the memoization table # dp[i][j] means the number of ways to arrange the first i books with the i-th book # having color j dp = [[0] * (m + 1) for _ in range(n + 1)] # Base case: The first book can be of any color for j in range(1, m + 1): dp[1][j] = 1 # Fill dp table for i in range(2, n + 1): for j in range(1, m + 1): for k in range(1, m + 1): if j != k: dp[i][j] += dp[i-1][k] # Sum all the ways to arrange n books ending in any color result = sum(dp[n][j] for j in range(1, m + 1)) return result"},{"question":"Emily loves playing with sequences. She defines a sequence of positive integers as beautiful if the sequence forms an arithmetic progression. An arithmetic progression is a sequence of numbers such that the difference of any two successive members is a constant. Emily found a sequence of positive integers and wants to make it beautiful by removing some (possibly none) of its elements, without changing the order of the remaining elements. Help Emily find the maximum length of the beautiful sequence (arithmetic progression) that she can get from the given sequence. The first line contains an integer `n` (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains `n` positive integers ai (1 ≤ ai ≤ 1000) — the sequence itself. Print a single integer — the maximum possible length of a beautiful sequence Emily can get. **Example:** **Input:** ``` 6 1 3 2 5 7 10 ``` **Output:** ``` 4 ``` **Explanation:** One possible longest arithmetic progression is [1, 3, 5, 7]. **Input:** ``` 5 4 7 10 13 16 ``` **Output:** ``` 5 ``` **Explanation:** The sequence is already an arithmetic progression.","solution":"def longest_arithmetic_progression_length(arr): Returns the length of the longest arithmetic progression in the given array. if not arr: return 0 n = len(arr) if n == 1: return 1 arr.sort() dp = [{} for _ in range(n)] max_len = 1 for i in range(1, n): for j in range(i): diff = arr[i] - arr[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_len = max(max_len, dp[i][diff]) return max_len def solve(n, arr): return longest_arithmetic_progression_length(arr)"},{"question":"Polycarp loves playing computer games, and he\'s currently playing a game that involves moving a character on a grid. The grid is represented by a field of n x m cells, where some cells contain obstacles and others are free. Each cell is either free (denoted by \'.\') or contains an obstacle (denoted by \'#\'). Polycarp can move his character up, down, left, or right, but he cannot move into a cell that contains an obstacle. Additionally, he can only stay on free cells within the boundaries of the grid. Given the initial position of Polycarp\'s character and the configuration of the grid, determine the maximum number of distinct cells that Polycarp\'s character can visit by moving from the initial position. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100), which represent the number of rows and columns of the grid, respectively. The next line contains two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m), which represent the initial row and column position of Polycarp\'s character. The initial position (r, c) is guaranteed to be a free cell. The following n lines each contain a string of length m consisting of the characters \'.\' and \'#\', which represent the grid. The j-th character of the i-th line represents the cell in the i-th row and j-th column of the grid. Print the maximum number of distinct cells that Polycarp\'s character can visit. # Example Input 5 5 3 2 # #...# #.#.# #.... # Output 9 # Explanation In the given example grid, Polycarp starts at cell (3, 2) and can visit 9 distinct cells before encountering obstacles.","solution":"def max_distinct_cells(n, m, start_row, start_col, grid): def is_free_and_within_bounds(row, col): return 0 <= row < n and 0 <= col < m and grid[row][col] == \'.\' and (row, col) not in visited def dfs(row, col): visited.add((row, col)) for dr, dc in directions: new_row, new_col = row + dr, col + dc if is_free_and_within_bounds(new_row, new_col): dfs(new_row, new_col) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = set() dfs(start_row - 1, start_col - 1) # Start DFS from the given start position return len(visited)"},{"question":"You are given an undirected graph with `n` vertices and `m` edges. The graph may contain cycles. Each edge in the graph has a positive integer weight. Your task is to remove some edges so that the remaining graph becomes a single connected tree (i.e., it remains connected and acyclic), with the smallest possible sum of edge weights. The first line of the input contains two integers `n` and `m` (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2·10^5) — the number of vertices and the number of edges, respectively. The next `m` lines describe the edges in the graph. The `i`-th line contains three integers `ai`, `bi`, and `wi` (1 ≤ ai, bi ≤ n, 1 ≤ wi ≤ 10^6) — the indices of the nodes connected by the `i`-th edge and the weight of the `i`-th edge, respectively. It\'s guaranteed that the input graph is connected, i.e., there is a path between any pair of vertices. Print a single integer — the weight sum of the edges in the minimum spanning tree of the given graph. **Example:** ``` Input: 4 5 1 2 1 1 3 3 2 3 4 3 4 2 1 4 5 Output: 6 ``` Explanation: In the given example, the minimum spanning tree contains the edges (1-2, 3-4, and 1-3) with a total weight of `6`.","solution":"def minimum_spanning_tree(n, m, edges): Computes the weight sum of the edges in the minimum spanning tree of the given graph. :param n: Number of vertices :param m: Number of edges :param edges: List of tuples (ai, bi, wi) :return: Total weight of the minimum spanning tree # Sort edges based on their weights edges.sort(key=lambda x: x[2]) parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 mst_weight = 0 edges_in_mst = 0 for ai, bi, wi in edges: if find(ai) != find(bi): union(ai, bi) mst_weight += wi edges_in_mst += 1 if edges_in_mst == n - 1: break return mst_weight"},{"question":"Given a string `s`, you need to remove the minimum number of characters so that the resulting string does not contain consecutive identical characters. You may assume that the input string only contains lowercase letters. Implement a function `remove_consecutive_duplicates(s: str) -> str` that takes a string `s` and returns the string with the minimum number of characters removed to achieve the desired condition. **Input:** - A single line containing the string `s` (1 ≤ |s| ≤ 105). **Output:** - Print the resulting string after removing the minimum number of characters such that there are no consecutive identical characters. **Examples:** Input: ``` aabbcc ``` Output: ``` abc ``` Input: ``` abcddcba ``` Output: ``` abcdcba ``` Input: ``` aaabbbccc ``` Output: ``` abc ``` Input: ``` a ``` Output: ``` a ```","solution":"def remove_consecutive_duplicates(s: str) -> str: Removes the minimum number of characters so that the resulting string does not contain consecutive identical characters. if not s: return \\"\\" result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return \'\'.join(result)"},{"question":"You are given an array of integers a_1, a_2, dots, a_n and a number k. Your task is to find the smallest subarray (i.e., a contiguous segment) whose sum is greater than or equal to k. If there are multiple subarrays with the same smallest length, you may return any of them. # Input Format The first line contains two integers n (1 ≤ n ≤ 300,000) — the length of the array, and k (1 ≤ k ≤ 10^{9}) — the target sum. The second line contains n integers a_1, a_2, ldots, a_n (−10^6 ≤ ai ≤ 10^6) — the elements of the array. # Output Format Print a single integer denoting the minimum length of a subarray whose sum is greater than or equal to k. If no such subarray exists, print −1. # Example Input ``` 8 15 1 2 3 4 5 6 7 8 ``` Output ``` 2 ``` # Note In the sample input, one possible smallest subarray with a sum ≥ 15 is [7, 8], which has a length of 2. Another possible subarray is [8, 7] (though in this particular input set, there is effectively only one set of minimum subarrays). Either is a correct answer. # Constraints - The smallest subarray must be of some length that achieves the condition. - Ensure optimal performance to handle upper limit constraints efficiently.","solution":"def smallest_subarray_length_with_sum_at_least_k(arr, k): n = len(arr) min_length = n + 1 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length <= n else -1"},{"question":"You are given an array of integers representing the heights of trees. You have to cut down some of the trees so that the remaining trees form a contiguous segment and the difference between the tallest and the shortest tree in this segment is minimized. Write a function that returns the difference between the tallest and the shortest tree in the segment with the minimum difference. The first line of the input contains an integer n (1 le n le 10^6) — the number of trees. The second line contains integers representing the heights of these trees h_1, h_2, ldots, h_n (1 le h_i le 10^6). Output the minimum difference between the tallest and the shortest tree in the best segment. Example: ``` Input: 6 2 6 4 6 10 8 Output: 2 Input: 5 1 5 9 15 20 Output: 4 Explanation: For the first example, we can choose the segment [6, 4, 6], which has a difference of 2 (6 - 4). For the second example, the segment [5, 9] has the minimum difference of 4 (9 - 5). ```","solution":"def min_difference_segment(n, heights): Returns the minimum difference between the tallest and the shortest tree in the best segment. Parameters: n (int): Number of trees heights (list of int): Heights of the trees Returns: int: The minimum difference in the best contiguous segment if n == 1: return 0 min_diff = float(\'inf\') for i in range(n - 1): for j in range(i + 1, n): current_segment = heights[i:j + 1] current_min = min(current_segment) current_max = max(current_segment) current_diff = current_max - current_min min_diff = min(min_diff, current_diff) return min_diff"},{"question":"You are given an array of integers and a target sum. Your task is to determine if there are two distinct elements in the array such that their sum equals the target sum. If there are such elements, return their indices (0-based) in a 2-element list. If no such elements exist, return an empty list. The array is guaranteed to have at most one solution. Input: - The first line contains an integer n (2 ≤ n ≤ 100) — the number of elements in the array. - The second line contains n space-separated integers representing the elements of the array. - The third line contains the target sum. Output: - Print a 2-element list containing the indices of the two elements whose sum equals the target sum. If no such elements exist, print an empty list. Example: Input: 5 2 7 11 15 5 9 Output: [0, 1]","solution":"def two_sum_indices(n, arr, target_sum): Determines if there are two distinct elements in the array such that their sum equals the target sum. Returns their indices as a 2-element list. If no such elements exist, returns an empty list. seen = {} for i, num in enumerate(arr): complement = target_sum - num if complement in seen: return [seen[complement], i] seen[num] = i return []"},{"question":"A large warehouse needs to keep track of its inventory. Each item in the inventory is represented by a unique identifier and a count of the available units. The warehouse manager wants a program that can manage the inventory efficiently. The program should support the following operations: 1. **Add an item (ID, count)** — Adds the item with the given identifier and the count to the inventory. If the item already exists, increase its count by the specified number. 2. **Remove an item (ID, count)** — Removes a certain count of the item with the specified identifier from the inventory. If the item\'s count becomes zero or negative after removal, remove the item completely from the inventory. 3. **Check an item (ID)** — Returns the count of the specified item if it exists in the inventory; otherwise, it returns 0. 4. **List items** — Returns a list of all items\' identifiers sorted in lexicographical order. Write a program that reads a series of these operations and performs them sequentially. The first line of the input contains an integer `q` (1 ≤ q ≤ 1000), the number of operations. Each of the following `q` lines describes an operation, which can be one of the four specified types: - `add ID count` — Adds `count` units of the item identified by `ID`. - `remove ID count` — Removes `count` units of the item identified by `ID`. - `check ID` — Checks the count of the item identified by `ID`. - `list` — Lists all the item identifiers in lexicographical order. Output the result of each `check` and `list` operation in the same order as they appear in the input. # Sample Input: ``` 6 add A123 10 add B456 5 check A123 remove A123 7 list check A123 ``` # Sample Output: ``` 10 A123 B456 3 ```","solution":"def add_item(inventory, ID, count): if ID in inventory: inventory[ID] += count else: inventory[ID] = count def remove_item(inventory, ID, count): if ID in inventory: inventory[ID] -= count if inventory[ID] <= 0: del inventory[ID] def check_item(inventory, ID): return inventory.get(ID, 0) def list_items(inventory): return sorted(inventory.keys()) def manage_inventory(operations): inventory = {} results = [] for operation in operations: parts = operation.split() op_type = parts[0] if op_type == \\"add\\": ID = parts[1] count = int(parts[2]) add_item(inventory, ID, count) elif op_type == \\"remove\\": ID = parts[1] count = int(parts[2]) remove_item(inventory, ID, count) elif op_type == \\"check\\": ID = parts[1] results.append(check_item(inventory, ID)) elif op_type == \\"list\\": results.append(\\" \\".join(list_items(inventory))) return results"},{"question":"You are given an array of integers of size n. You can perform the following operation any number of times: choose any subarray [l, r] and reverse it. Your goal is to check whether it is possible to sort the entire array in non-decreasing order by performing the described operation at most once. For example, if n = 5 and the array is [1, 3, 5, 2, 4], you can choose the subarray [2, 4] (0-based indices) which is [3, 5, 2] and reverse it to get [1, 2, 5, 3, 4]. This is not sorted in non-decreasing order, so it\'s not possible with one reversal. However, for the array [3, 4, 2, 1], you can reverse the entire array to get [1, 2, 4, 3], which is sorted. The first line contains one integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains one integer n (1 le n le 10^5) — the size of the array. The second line of each test case contains n integers a_1, a_2, dots , a_n (1 le a_i le 10^9) — the elements of the array. It is guaranteed that the sum of all n over all test cases does not exceed 10^5. For each test case, print \\"YES\\" if the array can be sorted by performing at most one reversal of a subarray, otherwise print \\"NO\\".","solution":"def can_sort_with_one_reversal(n, array): Checks if the given array can be sorted in non-decreasing order by performing at most one reversal of a subarray. n : int : The size of the array array : list of int : The elements of the array returns: str : \\"YES\\" if the array can be sorted by performing at most one reversal of a subarray, otherwise \\"NO\\". sorted_array = sorted(array) if array == sorted_array: return \\"YES\\" # Find the first and last positions where the array mismatches the sorted array l, r = 0, n - 1 while l < n and array[l] == sorted_array[l]: l += 1 while r >= 0 and array[r] == sorted_array[r]: r -= 1 if l >= r: return \\"YES\\" # Reverse the subarray from l to r subarray_reversed = array[:l] + array[l:r+1][::-1] + array[r+1:] if subarray_reversed == sorted_array: return \\"YES\\" else: return \\"NO\\""},{"question":"Consider a sequence of n integers, a_1, a_2, ldots, a_n. You need to process two types of queries on this sequence: 1. **Update Query** - Change the value at a specific index to a new value. 2. **Sum Query** - Compute the sum of the values in a given sub-range of the sequence. You are required to implement these two operations efficiently. * The first line of input contains two integers n and q (1 le n, q le 100 000), representing the number of elements in the sequence and the number of queries, respectively. * The second line of input contains n space-separated integers representing the initial sequence. * Each of the next q lines contains a query of one of the following two types: * `1 x y` - Update the value at index x to y (1 le x le n). * `2 l r` - Compute the sum of elements from index l to r (1 le l le r le n). Output the results of all the sum queries in the order they were given. Example input: ``` 5 3 1 2 3 4 5 2 1 3 1 3 10 2 2 5 ``` Example output: ``` 6 21 ```","solution":"class SequenceProcessor: def __init__(self, n, sequence): self.n = n self.sequence = sequence self.prefix_sums = self._compute_prefix_sums() def _compute_prefix_sums(self): prefix_sums = [0] * (self.n + 1) for i in range(1, self.n + 1): prefix_sums[i] = prefix_sums[i-1] + self.sequence[i-1] return prefix_sums def update(self, x, y): diff = y - self.sequence[x-1] self.sequence[x-1] = y for i in range(x, self.n+1): self.prefix_sums[i] += diff def sum_range(self, l, r): return self.prefix_sums[r] - self.prefix_sums[l-1] def process_queries(n, sequence, queries): processor = SequenceProcessor(n, sequence) result = [] for query in queries: if query[0] == 1: processor.update(query[1], query[2]) elif query[0] == 2: result.append(processor.sum_range(query[1], query[2])) return result"},{"question":"You are given a grid with n rows and m columns, where each cell contains an integer representing the height in that particular cell. Tolik and Bolik are playing a game on this grid. The rules are as follows: 1. Tolik and Bolik alternate turns, with Tolik going first. 2. On each turn, a player must increase the height of one cell by 1. 3. A player may only increase the height of a cell if it becomes the highest cell in its row or its column. 4. The player who cannot make a valid move loses the game. Your task is to determine which player will win if both play optimally. Output \\"tolik\\" if Tolik wins and \\"bolik\\" if Bolik wins. # Input: The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns, respectively. Each of the next n lines contains m integers, representing the height of each cell in the grid. The heights are non-negative integers and do not exceed 10^9. # Output: Print \\"tolik\\" if Tolik wins the game and \\"bolik\\" otherwise. # Example: Input: 3 3 1 2 3 2 4 1 3 1 2 Output: bolik # Notes: - If a player can make a move that causes multiple heights to change to become the highest in their respective rows or columns, that move is valid. - Players must always make a move if possible; they cannot skip their turn. - The game continues until no player can make a valid move.","solution":"def determine_winner(n, m, grid): total_moves = 0 for i in range(n): max_in_row = max(grid[i]) total_moves += m - grid[i].count(max_in_row) for j in range(m): max_in_col = max(row[j] for row in grid) total_moves += n - sum(row[j] == max_in_col for row in grid) return \\"tolik\\" if total_moves % 2 == 1 else \\"bolik\\""},{"question":"Given an array of integers, your task is to find whether there are two distinct indices i and j in the array such that the absolute difference between the values at these indices is exactly equal to a given number k. Input - The first line contains two integers n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ 1000). - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Output - Print \\"YES\\" if such indices exist, otherwise print \\"NO\\". Example Input: 5 3 1 5 9 6 4 Output: YES","solution":"def has_pair_with_difference(nums, k): Determines if there are two distinct indices i and j in an array such that the absolute difference between the values at these indices is exactly equal to k. :param nums: List of integers :param k: Integer :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\" nums_set = set(nums) for num in nums: if (num + k in nums_set) or (num - k in nums_set): return \\"YES\\" return \\"NO\\""},{"question":"You are given a maze represented as a grid of n rows and m columns. Each cell in the grid is either a \'.\' (representing an open cell) or a \'#\' (representing an obstacle). There is a start cell denoted as \'S\' and a target cell denoted as \'T\'. The task is to determine if there is a path from \'S\' to \'T\' moving only through open cells (\'.\'). You can move vertically or horizontally but not diagonally. The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) representing the number of rows and columns in the grid. The next n lines each contain m characters representing the grid. The first line of output should contain \\"YES\\" (without quotes) if there exists a path from the start cell \'S\' to the target cell \'T\' and \\"NO\\" (without quotes) otherwise. Input format: ``` 5 5 S.... . ..#T. .#... ..... ``` Output format: ``` YES ```","solution":"def is_path_exists(grid): n = len(grid) m = len(grid[0]) # Find the starting point \'S\' and endpoint \'T\' start = None end = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'T\': end = (i, j) if not start or not end: return \\"NO\\" # Use BFS to find the shortest path from collections import deque queue = deque([start]) visited = set() visited.add(start) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: current = queue.popleft() if current == end: return \\"YES\\" for direction in directions: new_row, new_col = current[0] + direction[0], current[1] + direction[1] if 0 <= new_row < n and 0 <= new_col < m and grid[new_row][new_col] in (\'.\', \'T\') and (new_row, new_col) not in visited: queue.append((new_row, new_col)) visited.add((new_row, new_col)) return \\"NO\\""},{"question":"You are given a digital signal processing (DSP) task involving a sequence of samples representing audio data. The task is to apply a specific filter to the sequence and determine the resulting sequence. The filter is defined as a moving average filter with a specified window size. A moving average filter smooths a signal by averaging a set number of consecutive samples. The resulting value at each sample point is the average of the current sample and the previous (window size - 1) samples. For example, if the window size is 3 and we have a sequence `[a, b, c, d, e]`, the resulting sequence would be: - For `a`, the average is `a`. - For `b`, the average is `(a + b) / 2`. - For `c`, the average is `(a + b + c) / 3`. - For `d`, the average is `(b + c + d) / 3`. - For `e`, the average is `(c + d + e) / 3`. Given an integer `w` representing the window size and a list of integers representing the sequence of audio samples, compute the filtered sequence using the moving average filter. # Input: - An integer `w` (1 ≤ w ≤ 50) representing the window size. - A list of integers `samples` (1 ≤ len(samples) ≤ 10000, -100000 ≤ samples[i] ≤ 100000) representing the sequence of audio samples. # Output: - A list of floating-point numbers representing the filtered sequence. # Example: Input: ``` 3 [1, 2, 3, 4, 5] ``` Output: ``` [1.0, 1.5, 2.0, 3.0, 4.0] ``` Explanation: - For the first element, the average is `1`. - For the second element, the average is `(1 + 2) / 2 = 1.5`. - For the third element, the average is `(1 + 2 + 3) / 3 = 2`. - For the fourth element, the average is `(2 + 3 + 4) / 3 = 3`. - For the fifth element, the average is `(3 + 4 + 5) / 3 = 4`. Implement the function: ```python def moving_average_filter(w: int, samples: List[int]) -> List[float]: pass ```","solution":"from typing import List def moving_average_filter(w: int, samples: List[int]) -> List[float]: Applies a moving average filter to the sequence of samples. Args: w (int): The window size. samples (List[int]): The sequence of audio samples. Returns: List[float]: The filtered sequence. n = len(samples) result = [] for i in range(n): window_sum = sum(samples[max(0, i-w+1):i+1]) count = min(i+1, w) result.append(window_sum / count) return result"},{"question":"You are given two strings `s1` and `s2`. Your task is to determine if `s2` can be made a subsequence of `s1` by deleting exactly one character from `s1`. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, given `s1 = \\"abcde\\"` and `s2 = \\"abde\\"`, deleting the character `c` from `s1` results in `s2`. Therefore, `s2` is a subsequence of `s1` after exactly one deletion. Write a function `canMakeSubsequence(s1: str, s2: str) -> bool` that returns `True` if `s2` can be obtained by deleting exactly one character from `s1`, and `False` otherwise. # Input - The input consists of two strings: `s1` and `s2`. - Both strings contain only lowercase English letters. - The lengths of the strings are `1 <= len(s1), len(s2) <= 100`. # Output - Return `True` if `s2` can be obtained by removing exactly one character from `s1`. - Return `False` otherwise. # Examples ```python assert canMakeSubsequence(\\"abcde\\", \\"abde\\") == True assert canMakeSubsequence(\\"abcde\\", \\"abcde\\") == False assert canMakeSubsequence(\\"abcde\\", \\"ade\\") == False assert canMakeSubsequence(\\"a\\", \\"\\") == True assert canMakeSubsequence(\\"ab\\", \\"a\\") == True ``` # Note - The strings may have varying lengths but maintain the constraint within the specified limits. - The function should be optimized to handle all edge cases. Implement the function `canMakeSubsequence` to solve the problem.","solution":"def canMakeSubsequence(s1: str, s2: str) -> bool: Determine if `s2` can be made a subsequence of `s1` by deleting exactly one character from `s1`. if len(s1) != len(s2) + 1: return False i, j = 0, 0 while i < len(s1) and j < len(s2): if s1[i] == s2[j]: j += 1 i += 1 return j == len(s2)"},{"question":"In a magical forest, there are n different types of trees. Each tree type can grow in one or more specific sections of the forest. Each section can also have multiple types of trees growing in it. Tessa likes to explore the forest, and during each of her trips, she can visit only one section. After visiting, she can identify all types of trees in that section. She would like to find out the minimum number of sections she needs to visit in order to see all types of trees in the forest. The input starts with two integers, n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100), where n is the number of tree types and m is the number of sections in the forest. After that, there are m lines, each describing a section. Each line starts with an integer k (1 ≤ k ≤ n), the number of tree types in that section, followed by k tree types (distinct integers from 1 to n) found in that section. Write a program that determines the minimum number of sections Tessa needs to visit to observe all the tree types in the forest. In the first line of input, there are two integers n and m. In the next m lines, there is an integer k followed by k integers representing tree types found in that section. In the first sample, there are three tree types and three sections. By visiting sections 2 and 3, she can see all three types of trees. If the input is: 3 3 2 1 2 1 3 1 2 The output should be: 2 If the input is: 4 4 2 1 2 2 1 3 2 2 4 3 1 3 4 The output should be: 2","solution":"from itertools import combinations def min_sections_to_visit(n, m, sections): Returns the minimum number of sections needed to visit to see all tree types. all_tree_types = set(range(1, n+1)) for r in range(1, m+1): for combo in combinations(sections, r): trees_seen = set().union(*combo) if trees_seen == all_tree_types: return r return m def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].strip().split()) sections = [] for line in lines[1:]: parts = list(map(int, line.strip().split())) sections.append(set(parts[1:])) # convert to set to avoid duplicates return n, m, sections"},{"question":"You are given an array of integers `arr` of length `n`. You can perform the following operation on the array any number of times: 1. Pick any two distinct indices `i` and `j` (1 ≤ i, j ≤ n) such that `arr[i]` and `arr[j]` are not equal. 2. Swap the values at these indices `arr[i]` and `arr[j]`. The goal is to determine the minimum number of swaps needed to make the array sorted in non-decreasing order. Note that it\'s guaranteed to be possible to sort the array using the above operation. # Input - The first line of the input contains an integer `n` (1 ≤ n ≤ 100,000) — the length of the array `arr`. - The second line contains `n` space-separated integers `arr[1], arr[2], ..., arr[n]` (1 ≤ arr[i] ≤ 100,000). # Output - Print a single integer - the minimum number of swaps required to sort the array. # Example Input: ``` 5 4 3 1 2 5 ``` Output: ``` 3 ``` Explanation: One possible sequence of swaps to sort the array `[4, 3, 1, 2, 5]`: 1. Swap 4 and 1 to get `[1, 3, 4, 2, 5]` 2. Swap 3 and 2 to get `[1, 2, 4, 3, 5]` 3. Swap 4 and 3 to get `[1, 2, 3, 4, 5]` Thus, the minimum number of swaps is 3.","solution":"def min_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array in non-decreasing order. n = len(arr) arr_pos = [(value, index) for index, value in enumerate(arr)] arr_pos.sort(key=lambda x: x[0]) visited = [False] * n swaps = 0 for i in range(n): if visited[i] or arr_pos[i][1] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arr_pos[j][1] cycle_size += 1 if cycle_size > 1: swaps += cycle_size - 1 return swaps"},{"question":"A park management system is designed to monitor and control visitor access to a national park. The park has n entry gates, each having its own visitor limit and entry fee. The system can receive visitor updates in the form of specific gates being visited by a certain number of visitors, or a query requesting the maximum revenue generated by a particular gate over a number of days. The park receives updates in the form (d, gi, vi), indicating that vi visitors have entered through the gi-th gate on the d-th day. Each visitor must pay the corresponding gate entry fee for access. Additionally, the system can receive query requests in the form (gi, start_d, end_d) asking for the total revenue generated by the gi-th gate from day start_d to day end_d, inclusive. Write a program to handle these updates and queries efficiently. Your program should take as input the number of gates, their visitor limits, their entry fees, the number of updates and queries, the specific updates and queries, and then provide the appropriate outputs for the queries. The input consists of: - An integer n (1 ≤ n ≤ 10^5): the number of gates. - n pairs of integers (li, fi) (1 ≤ li, fi ≤ 10^4): the visitor limit and entry fee for each gate. - An integer q (1 ≤ q ≤ 10^5): the number of updates and queries. - q lines each describing either an update or a query. An update is in the form \\"d gi vi\\" (1 ≤ d, gi, vi ≤ 10^5), where vi is the number of visitors at gate gi on day d. A query is in the form \\"Q gi start_d end_d\\" (1 ≤ gi ≤ n, 1 ≤ start_d ≤ end_d ≤ 10^5). For each query, print a line containing the total revenue generated by the specified gate from start_d to end_d, inclusive. Consider the following example: Input: 3 500 10 300 15 100 20 6 1 1 200 2 2 150 3 3 50 Q 1 1 3 Q 2 2 4 Q 3 1 3 Output: 2000 2250 1000 In this example, we have three gates. Gate 1 has a visitor limit of 500 and an entry fee of 10, gate 2 has a visitor limit of 300 and an entry fee of 15, and gate 3 has a visitor limit of 100 and an entry fee of 20. After processing the updates and queries, the program outputs the total revenue generated by each specified gate during the indicated date range.","solution":"from collections import defaultdict from functools import lru_cache def generate_revenue_system(n, gate_info, q, operations): # Initializing the visitor limits and fees for each gate gates = {i+1: {\'limit\': li, \'fee\': fi, \'visitors\': defaultdict(int)} for i, (li, fi) in enumerate(gate_info)} revenue_cache = defaultdict(lambda: defaultdict(int)) results = [] for operation in operations: if operation[0] == \'Q\': # Query part _, gi, start_d, end_d = operation total_revenue = 0 for day in range(start_d, end_d + 1): total_revenue += revenue_cache[gi][day] results.append(total_revenue) else: # Update part d, gi, vi = operation if vi <= gates[gi][\'limit\']: gates[gi][\'visitors\'][d] += vi revenue_cache[gi][d] += vi * gates[gi][\'fee\'] return results"},{"question":"You are tasked with implementing a function that sorts a list of strings based on the following special criteria: first, by the length of the strings, and then, among strings of the same length, alphabetically. Your function should accept a list of strings as input and return a new list of strings sorted according to the criteria specified. Write a function: ```python def special_sort(strings: List[str]) -> List[str]: pass ``` # Input - A single list of strings where each string contains only lowercase alphabets (1 ≤ len(strings) ≤ 100, 1 ≤ len(strings[i]) ≤ 50). # Output - A list of strings, sorted first by length, then alphabetically for strings of the same length. # Example Input: ``` [\\"banana\\", \\"apple\\", \\"kiwi\\", \\"strawberry\\", \\"mango\\", \\"peach\\", \\"plum\\"] ``` Output: ``` [\\"kiwi\\", \\"plum\\", \\"apple\\", \\"mango\\", \\"peach\\", \\"banana\\", \\"strawberry\\"] ``` # Explanation In the given example: - \\"kiwi\\" and \\"plum\\" are the shortest strings with length 4, and they appear first in the result. - \\"apple\\", \\"mango\\", and \\"peach\\" all have length 5, and they are sorted alphabetically. - \\"banana\\" has length 6. - \\"strawberry\\" is the longest string. Therefore, the sorted list is [\\"kiwi\\", \\"plum\\", \\"apple\\", \\"mango\\", \\"peach\\", \\"banana\\", \\"strawberry\\"].","solution":"from typing import List def special_sort(strings: List[str]) -> List[str]: Sorts a list of strings first by their length, then alphabetically for strings of the same length. return sorted(strings, key=lambda x: (len(x), x))"},{"question":"In a labyrinthian world, you find yourself guiding a character through a maze represented as a grid of size n x m. Each cell in the grid can either be passable (\'.\') or blocked by an obstacle (\'#\'). The character starts at the top-left corner of the maze and must reach the bottom-right corner. The character can move to adjacent cells (left, right, up, down) but cannot pass through obstacles. The goal is to determine the shortest path from the starting cell to the destination cell. If no path exists, you should return -1. **Input:** - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the maze. - The next n lines each contain a string of length m consisting of characters \'.\' and \'#\'. **Output:** - Print a single integer, which is the length of the shortest path from the top-left to the bottom-right corner. If no path exists, print -1. **Example:** **Input:** ``` 5 6 ....#. .#..#. .#.#.. .#.... ...... ``` **Output:** ``` 9 ``` **Explanation:** In the example, the character can follow the path (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,4) -> (4,4) -> (4,5), which has a length of 9 moves.","solution":"from collections import deque def shortest_path_in_maze(n, m, maze): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] == \'.\' queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Amy and Bob take turns playing a game with a stack of coins. The game begins with a stack consisting of n coins. On each player\'s turn, they can choose to do one of the following actions: 1. Remove exactly 1 coin from the stack. 2. Remove exactly 2 coins from the stack. 3. Remove exactly 3 coins from the stack. The player who is unable to make a move (i.e., when there are no coins left in the stack on their turn) loses the game. Amy always goes first. Both players play optimally. Given the initial number of coins n, determine the winner of the game if both players play optimally. # Input - The first line of input contains an integer t (1 leq t leq 100) — the number of test cases. - Each of the next t lines contains an integer n (1 leq n leq 10^5) — the initial number of coins in the stack for each test case. # Output For each test case, print \\"Amy\\" if she wins, or \\"Bob\\" if he wins (without quotes). # Example Input: ``` 4 1 2 3 4 ``` Output: ``` Amy Amy Amy Bob ``` Explanation: In the first test case, Amy removes the only coin and wins. In the second test case, Amy removes the two coins and wins. In the third test case, Amy removes the three coins and wins. In the fourth test case, no matter what move Amy makes, Bob will always end up removing the last coin and winning the game.","solution":"def determine_winner(n): Determines the winner of the game given the initial number of coins n. If the starting number of coins is not a multiple of 4, Amy wins. Otherwise, Bob wins. if n % 4 == 0: return \\"Bob\\" else: return \\"Amy\\" def game_result(test_cases): Determines the game results for multiple test cases. Parameters: test_cases : list of int A list of initial number of coins for each test case. Returns: list of str A list of results for each test case, where each result is either \\"Amy\\" or \\"Bob\\". results = [] for n in test_cases: results.append(determine_winner(n)) return results"},{"question":"You are given a sequence of n integers representing the heights of stacked blocks. Your task is to repeatedly apply the following operation until you can\'t anymore: choose any two adjacent blocks of equal height, remove both of them, and replace them with a single block of height one unit greater. What is the maximum possible height of any block after performing the operation zero or more times? The first line contains an integer n (1 ≤ n ≤ 100) — the number of blocks. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100), where hi is the height of the i-th block. Print a single integer — the maximum possible height of any block resulting after applying the operations. # Example ``` Input 5 2 2 3 3 3 Output 4 ``` # Explanation Apply the operations as follows: 1. Combine the first two blocks of height 2 into a single block of height 3: [3, 3, 3, 3] 2. Combine the first two blocks of height 3 into a single block of height 4: [4, 3, 3] 3. Combine the last two blocks of height 3 into a single block of height 4: [4, 4] 4. Combine the two blocks of height 4 into a single block of height 5: [5] The maximum possible height of any block is 5.","solution":"def maximize_block_height(n, heights): Returns the maximum possible height of any block after combining adjacent blocks with the same height. Parameters: n (int): The number of blocks. heights (List[int]): The heights of the blocks. Returns: int: The maximum possible height of any block. stack = [] for h in heights: # If stack is not empty and the last element is equal to the current height if stack and stack[-1] == h: # Pop the last element and push the incremented height stack.pop() stack.append(h + 1) # Resolve any further combinations that could arise due to the new height while len(stack) > 1 and stack[-1] == stack[-2]: combined_height = stack[-1] + 1 stack.pop() # Remove the last two elements stack.pop() stack.append(combined_height) # Push the new combined height else: stack.append(h) # The maximum height will be the maximum element in the stack return max(stack)"},{"question":"You are given an array of integers where each element represents the height of a building along a street. Your task is to determine the maximum rectangle area that can be formed using consecutive buildings\' heights. The array represents the skyline silhouette where the width of each building is 1 unit. You need to find the largest possible rectangle that can be formed in this histogram skyline. Write a function `maxRectangleArea` that takes a list of integers representing building heights and returns the area of the largest rectangle in the histogram. # Input - The function `maxRectangleArea` receives a single argument, a list of integers `heights` where `heights[i]` represents the height of the i-th building. - The length of the list is between 1 and 10,000, inclusive. - Each height is a non-negative integer and can range between 0 and 10^5, inclusive. # Output - The function should return an integer, the area of the largest rectangle that can be formed within the given histogram. # Example ```python maxRectangleArea([2, 1, 5, 6, 2, 3]) # Output: 10 maxRectangleArea([2, 4]) # Output: 4 ``` # Constraints - You must achieve a time complexity of O(n). The problem requires the implementation of an efficient algorithm to determine the maximum possible rectangle area given the constraints on input size and value range. Consider data structures that can help in maintaining and accessing historical data while iterating through the list.","solution":"def maxRectangleArea(heights): Returns the maximum rectangle area in a histogram represented by heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You have been tasked with organizing a series of fine art paintings at a gallery. There are n paintings, each with a unique tag number. The gallery wants to ensure that a certain display constraint is met. Specifically, no two paintings with consecutive tag numbers can be placed next to each other in the display. Before finalizing the placement, the gallery manager has provided you with a list of all possible pairs of paintings that cannot be placed next to each other. Your task is to determine if it\'s possible to arrange all the paintings such that none of the given pairs are adjacent and to provide one possible arrangement (or state that it\'s impossible). **Input:** - The first line of input contains two space-separated integers n (1 ≤ n ≤ 100) and m (0 ≤ m ≤ 1000), where n is the number of paintings and m is the number of restricted pairs. - The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n), denoting that paintings with tag numbers u and v cannot be placed next to each other. **Output:** - If such an arrangement is possible, print \\"YES\\" on the first line, followed by a possible arrangement of the n paintings in a single line, separated by spaces. - If no such arrangement is possible, print \\"NO\\". **Example:** **Input:** ``` 4 2 1 2 3 4 ``` **Output:** ``` YES 1 3 2 4 ``` **Input:** ``` 3 3 1 2 2 3 1 3 ``` **Output:** ``` NO ```","solution":"def can_arrange_paintings(n, m, restrictions): import itertools # Generate all possible arrangements arrangements = itertools.permutations(range(1, n + 1)) # Convert restrictions list to a set of tuples for quick lookup restriction_set = {tuple(sorted(pair)) for pair in restrictions} for arrangement in arrangements: valid = True for i in range(n - 1): if (min(arrangement[i], arrangement[i + 1]), max(arrangement[i], arrangement[i + 1])) in restriction_set: valid = False break if valid: return \\"YES\\", arrangement return \\"NO\\", [] def solve(n, m, restrictions): result, arrangement = can_arrange_paintings(n, m, restrictions) if result == \\"YES\\": return f\\"YESn{\' \'.join(map(str, arrangement))}\\" else: return \\"NO\\""},{"question":"You are given an integer array that represents the daily temperatures for a given week. Write a function to determine, for each day in the array, how many subsequent days you have to wait until a warmer temperature. If there is no future day with a warmer temperature, the value should be 0 for that day. The first line of input contains an integer n (1 ≤ n ≤ 100), the number of days in the week. The second line of input contains n integers separated by spaces, each representing the temperature of a day. Output an array of integers where each element represents the number of days you have to wait for a warmer temperature. If no warmer day is available, return 0 for that day.","solution":"def daily_temperatures(temperatures): Determines how many days you have to wait for a warmer temperature for each day in the list. Parameters: temperatures (list of int): list of daily temperatures Returns: list of int: list where each element indicates the number of days to wait for a warmer temperature. n = len(temperatures) result = [0] * n stack = [] for i, temp in enumerate(temperatures): while stack and temperatures[stack[-1]] < temp: j = stack.pop() result[j] = i - j stack.append(i) return result"},{"question":"Alice loves solving problems using binary trees. One day, she comes across an interesting problem: Given a binary tree, the path sum is defined as the sum of the node values from the root to a leaf node. Alice wants to find the maximum path sum in the given binary tree. Write a function `maxPathSum(root)` that takes the root of a binary tree as its argument and returns the maximum path sum. # Input - The input is a binary tree represented by its root node. # Output - The function should return an integer, which is the maximum path sum from the root to any leaf in the binary tree. # Binary Tree Node Structure ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Constraints - The number of nodes in the tree is in the range [1, 10^4]. - `-10^4 <= Node.val <= 10^4` # Example ```python # Example 1: root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) print(maxPathSum(root)) # Output: 4 (1->3) # Example 2: root = TreeNode(-10) root.left = TreeNode(9) root.right = TreeNode(20) root.right.left = TreeNode(15) root.right.right = TreeNode(7) print(maxPathSum(root)) # Output: 35 (-10->20->15) ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPathSum(root): def dfs(node): if not node: return float(\'-inf\') if not node.left and not node.right: return node.val left_max = dfs(node.left) right_max = dfs(node.right) return node.val + max(left_max, right_max) return dfs(root)"},{"question":"You are given a string that consists of lowercase English letters and is guaranteed to have only one distinct character that appears an odd number of times. Your task is to determine that character. The first line of input contains a single string s (1 le |s| le 10^5), where |s| denotes the length of the string, and the string contains only lowercase English letters. Output a single character — the one that appears an odd number of times in the string. Example: Input: ``` aabbccdde ``` Output: ``` e ``` Input: ``` aabbcc n xxyz ``` Output: ``` n ```","solution":"def find_odd_character(s): Returns the character that appears an odd number of times in the string `s`. from collections import Counter counter = Counter(s) for char, count in counter.items(): if count % 2 != 0: return char"},{"question":"You are given a 2D grid filled with different non-negative integers. You need to write a program to find the most frequent element in the grid. If there is a tie for the most frequent element, return the smallest one among them. **Input:** - The first line contains two integers, `m` and `n`, representing the number of rows and columns of the grid (1 ≤ m, n ≤ 100). - The next `m` lines each contain `n` integers separated by spaces, representing the grid elements. Each element in the grid is a non-negative integer, with a value between 0 and 10^3. **Output:** - Print a single integer, which is the most frequent element in the grid. If there are multiple elements with the highest frequency, print the smallest one. **Example:** Input: ``` 3 3 1 2 3 3 2 1 1 1 2 ``` Output: ``` 1 ``` Explanation: The element `1` appears four times, which is the highest frequency. The other elements appear fewer times. Thus, the output is `1`.","solution":"def most_frequent_element(grid): Finds the most frequent element in a 2D grid. If there\'s a tie, returns the smallest element. Parameters: - grid (list of list of ints): 2D grid of non-negative integers Returns: - int: the most frequent (or smallest if tied) element from collections import Counter # Flatten the grid into a single list flat_list = [elem for row in grid for elem in row] # Count the frequency of each element counter = Counter(flat_list) # Get the element with the highest frequency (and smallest element if there\'s a tie) most_frequent = min(counter.items(), key=lambda x: (-x[1], x[0])) return most_frequent[0] # Function to format the input into the grid and call most_frequent_element def find_most_frequent_element_in_grid(m, n, grid_elements): grid = [grid_elements[i * n:(i + 1) * n] for i in range(m)] return most_frequent_element(grid)"},{"question":"You are given an array of integers a[1], a[2], dots, a[n]. Your goal is to make the array non-decreasing by modifying elements. You can perform the following operation on the array: * Choose two indices i and j (1 le i < j le n) and replace a[i] with a[j]. Determine the minimum number of operations required to make the array non-decreasing. The first line contains one integer t (1 le t le 10^4) — the number of test cases. Each test case consists of two lines: the first line contains one integer n (1 le n le 2 cdot 10^5), the second line contains n integers a_1, a_2, dots, a_n (1 le a[i] le 10^9). For each test case, print one integer — the minimum number of operations required to make the array non-decreasing. # Example Input: ``` 3 5 5 3 4 2 1 4 1 2 3 4 6 4 2 3 3 1 5 ``` Output: ``` 3 0 2 ``` # Explanation In the first test case, one optimal way to make the array non-decreasing is: - Replace a[1] (5) with a[2] (3): array becomes [3, 3, 4, 2, 1] - Replace a[3] (4) with a[4] (2): array becomes [3, 3, 2, 2, 1] - Replace a[2] (3) with a[4] (2): array becomes [3, 2, 2, 2, 1] In the second test case, the array is already non-decreasing, so no operations are needed. In the third test case, one optimal way to make the array non-decreasing is: - Replace a[1] (4) with a[2] (2): array becomes [2, 2, 3, 3, 1, 5] - Replace a[5] (1) with a[4] (3): array becomes [2, 2, 3, 3, 3, 5] Thus, a total of 2 operations are required.","solution":"def min_operations_to_make_non_decreasing(arr): Returns the minimum number of operations to make the array non-decreasing by replacing elements. operations = 0 n = len(arr) # We traverse the array from the start to the end for i in range(1, n): if arr[i] < arr[i-1]: # To resolve this, we need to replace arr[i] (or adjust previous values as well) # All such inversions within the window [last_min, i] need an operation operations += 1 return operations def min_operations(test_cases): results = [] for arr in test_cases: results.append(min_operations_to_make_non_decreasing(arr)) return results"},{"question":"You are given two integers `a` and `b`. You need to calculate and print out the number of bits set to `1` in the binary representation of the product `a * b`. The single line contains two integers `a` and `b` (1 ≤ a, b ≤ 10^5), separated by a space. Print a single integer—the number of bits set to `1` in `a * b`. For example, if `a` is 3 and `b` is 6, then `a * b` is 18. The binary representation of 18 is `10010`, which has 2 bits set to `1`. So, the output should be 2.","solution":"def count_bits_in_product(a, b): Returns the number of bits set to 1 in the binary representation of the product of a and b. product = a * b return bin(product).count(\'1\')"},{"question":"A group of adventurers is exploring a mystical forest that is represented by a grid of size n x m, where each cell either contains a tree (denoted by \'*\') or is empty (denoted by \'.\'). The group can move up, down, left, or right and aims to identify all the distinct clusters of connected trees they encounter. Two trees are considered connected if one can be reached from the other by moving through adjacent trees. Your task is to write a program that counts the number of distinct clusters of connected trees in the forest grid. # Input: - The first line of input contains two integers, n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the forest grid. - Each of the next n lines contains m characters, representing the forest grid with \'*\' for a tree and \'.\' for an empty cell. # Output: - Print a single integer representing the number of distinct clusters of connected trees in the forest. # Example: Input: ``` 5 5 .*... .**.. ..*.. ...*. ....* ``` Output: ``` 3 ``` # Explanation: In the provided example, there are three distinct clusters of connected trees: - Cluster 1: The trees in positions (2,2), (1,2), and (2,3). - Cluster 2: The tree in position (3,3). - Cluster 3: The trees in positions (4,4) and (5,5). # Note: - Use Depth-First Search (DFS) or Breadth-First Search (BFS) to explore the clusters of connected trees efficiently. - Ensure that each tree is part of exactly one cluster.","solution":"def count_clusters(n, m, forest): Returns the number of distinct clusters of connected trees in the forest grid. def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() if 0 <= cx < n and 0 <= cy < m and forest[cx][cy] == \'*\': forest[cx][cy] = \'.\' stack.extend([(cx+1, cy), (cx-1, cy), (cx, cy+1), (cx, cy-1)]) cluster_count = 0 for i in range(n): for j in range(m): if forest[i][j] == \'*\': dfs(i, j) cluster_count += 1 return cluster_count"},{"question":"Jane has recently joined a coding club where they solve fun and challenging problems. She came across a problem related to arrays. Given an array of integers, Jane needs to determine whether the array can be split into two non-empty subarrays such that the sum of the elements in both subarrays is the same. Help Jane by writing a function that determines if such a split is possible. The input starts with an integer n (2 ≤ n ≤ 100) — the number of elements in the array. The next line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output \\"YES\\" if the array can be split into two non-empty subarrays with equal sum, otherwise output \\"NO\\". **Example:** ``` Input: 5 1 2 3 4 5 Output: NO ``` ``` Input: 4 1 1 1 1 Output: YES ``` The problem requires you to determine whether there exists an index i (1 ≤ i < n) such that the sum of the subarray from the beginning to i is equal to the sum of the subarray from i+1 to the end.","solution":"def can_split_array(arr): Determines if an array can be split into two non-empty subarrays with equal sum. Parameters: arr (list of int): The list of integers to check. Returns: str: \\"YES\\" if a valid split is possible, otherwise \\"NO\\". total_sum = sum(arr) left_sum = 0 for i in range(len(arr) - 1): left_sum += arr[i] right_sum = total_sum - left_sum if left_sum == right_sum: return \\"YES\\" return \\"NO\\""},{"question":"Given a string, we define a valid transformation as a move where you can remove exactly one character from the string and the resulting string must be a palindrome. For example, given the string \\"abca\\": * By removing \'c\', we get \\"aba\\" which is a palindrome. * By removing \'b\', we get \\"aca\\" which is also a palindrome. You need to determine if it\'s possible to make the provided string a palindrome by removing exactly one character. You are provided with multiple test cases. For each test case, check if it is possible to transform the given string into a palindrome by removing one character. The input format is as follows: - The first line contains an integer `t` (1 le t le 10^4), the number of test cases. - The next `t` lines contain a string `s` (1 le |s| le 10^5) consisting of only lowercase English letters. The output format is as follows: - For each test case, print \\"YES\\" (without quotes) if it is possible to transform the string into a palindrome by removing one character. Otherwise, print \\"NO\\". Note: - The sum of lengths of all strings in each test case does not exceed 10^6. Here are some example inputs and outputs for clarification: **Input:** ``` 4 abca abcba abcd a ``` **Output:** ``` YES NO NO NO ```","solution":"def can_form_palindrome_by_removing_one_char(s): Checks if it\'s possible to make the provided string a palindrome by removing exactly one character. def is_palindrome(t): return t == t[::-1] left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: if is_palindrome(s[left+1:right+1]) or is_palindrome(s[left:right]): return True else: return False left += 1 right -= 1 return False def check_palindrome_transformations(test_cases): results = [] for s in test_cases: if can_form_palindrome_by_removing_one_char(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a collection of n different books and a set of m conditions where each condition specifies that one book should be read before another. Determine the minimum number of semesters required to read all books if at most k books can be read in one semester and the given conditions must be satisfied. A book can be read in any semester as long as all the prerequisite books have been read in previous semesters. The first line of the input contains three integers n, m, and k (1 ≤ n, m, k ≤ 100,000) — the number of books, the number of conditions, and the maximum number of books that can be read in a semester, respectively. The next m lines contain two integers a and b (1 ≤ a, b ≤ n) describing a condition that book a must be read before book b. Output a single integer — the minimum number of semesters required to read all books. If it\'s not possible to read all books satisfying the given conditions, print -1.","solution":"from collections import deque, defaultdict def minimum_semesters(n, m, k, conditions): # Create the adjacency list for the directed graph graph = defaultdict(list) in_degree = [0] * (n + 1) for a, b in conditions: graph[a].append(b) in_degree[b] += 1 # Topological Sort using Kahn\'s Algorithm zero_degree = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) semesters = 0 read_books = 0 while zero_degree: # Read up to k books in this semester current_semester_books = min(k, len(zero_degree)) for _ in range(current_semester_books): book = zero_degree.popleft() read_books += 1 for neighbor in graph[book]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_degree.append(neighbor) semesters += 1 # Check if we managed to read all books if read_books == n: return semesters else: return -1"},{"question":"You are given two strings, `s1` and `s2`, each consisting of lowercase English letters. Your task is to determine the smallest integer `k` such that `s2` can be obtained by performing a circular shift on `s1` exactly `k` times. A circular shift on a string means moving the leftmost character to the rightmost position and shifting all other characters one position to the left. For example, a single circular shift on the string \\"abcde\\" results in the string \\"bcdea\\". If `s2` cannot be obtained by any number of circular shifts on `s1`, print `-1`. # Input Format The first line contains the string `s1`. The second line contains the string `s2`. # Output Format Print the smallest integer `k` such that `s2` can be obtained from `s1` by performing exactly `k` circular shifts. If it is not possible, print `-1`. # Constraints - The length of `s1` and `s2` is between `1` and `1000`. - Both `s1` and `s2` contain only lowercase English letters. # Example Input ``` abcde cdeab ``` # Example Output ``` 3 ``` # Explanation After 3 circular shifts: 1. abcde -> bcdea 2. bcdea -> cdeab 3. cdeab Therefore, the answer is 3.","solution":"def circular_shift_steps(s1, s2): Determines the smallest number of circular shifts required to transform s1 into s2. If s2 cannot be obtained by circular shifts on s1, returns -1. if len(s1) != len(s2): return -1 double_s1 = s1 + s1 position = double_s1.find(s2) if position == -1: return -1 return position"},{"question":"You are given `m` books arranged in a row on a bookshelf, all with different thicknesses. You want to select `k` consecutive books such that the sum of their thicknesses is minimized. More formally, you need to find the minimal possible sum of thicknesses of any `k` consecutive books on the shelf. Input The first line contains two space-separated integers `m` and `k` (`1 ≤ k ≤ m ≤ 10^5`). The second line contains `m` space-separated integers where each integer represents the thickness of a book on the shelf. Each thickness is a positive integer not exceeding `10^4`. Output Print a single integer representing the minimal sum of thicknesses of any `k` consecutive books. Example Input: 7 3 1 3 4 4 2 6 8 Output: 9 Explanation: The sum of the thicknesses of the following consecutive books: - The sum of books [1, 3, 4] is 8. - The sum of books [3, 4, 4] is 11. - The sum of books [4, 4, 2] is 10. - The sum of books [4, 2, 6] is 12. - The sum of books [2, 6, 8] is 16. Thus, the minimal sum of thicknesses of any `k` consecutive books is 9 (for the segment [1, 3, 4]).","solution":"def minimal_sum_of_thicknesses(m, k, thicknesses): Finds the minimal possible sum of thicknesses of any k consecutive books. :param m: int - The number of books. :param k: int - The number of consecutive books to select. :param thicknesses: list of int - List of thicknesses of the books. :return: int - The minimal sum of thicknesses of any k consecutive books. current_sum = sum(thicknesses[:k]) min_sum = current_sum for i in range(k, m): current_sum = current_sum - thicknesses[i - k] + thicknesses[i] if current_sum < min_sum: min_sum = current_sum return min_sum"},{"question":"In a large company, there are multiple departments, and each department contains a number of teams. The company is undergoing a research study to examine collaboration efficiency within these teams. Each employee can belong to exactly one team, and each team can belong to only one department. Your task is to determine the maximum number of employees belonging to any team for each department. The first line contains two space-separated integers n and d (1 ≤ n ≤ 2·10^4; 1 ≤ d ≤ 100) — the number of employees and the number of departments, respectively. The next line contains n space-separated integers ti (1 ≤ ti ≤ n), where ti represents the team number that the i-th employee belongs to. Note that each team number is a unique identifier for a team within a department. The next line contains the department identifiers for each team in a space-separated list m (1 ≤ m ≤ d), where the i-th integer di represents the department identifier that the i-th team belongs to. Print d space-separated integers where the i-th integer represents the maximum number of employees in any team within the i-th department. # Example Input ``` 7 3 1 2 2 3 3 4 5 1 1 2 2 3 ``` Output ``` 2 2 1 ``` # Explanation - There are 7 employees and 3 departments. - Employees belong to teams as follows: [1, 2, 2, 3, 3, 4, 5] - Teams belong to departments as follows: [1, 1, 2, 2, 3] - In department 1, there are two teams (1 and 2). Team 1 has 1 employee and team 2 has 2 employees. Hence, the maximum is 2. - In department 2, there are two teams (3 and 4). Both teams 3 and 4 have 2 employees each. Hence, the maximum is 2. - In department 3, there is one team (5) with 1 employee. Hence, the maximum is 1.","solution":"def max_employees_in_teams(n, d, employees, team_to_department): from collections import defaultdict # Initialize dictionaries team_sizes = defaultdict(int) department_maxes = [0] * (d + 1) # Calculate team sizes for team in employees: team_sizes[team] += 1 # Find maximum team size in each department team_by_department = defaultdict(list) for team, department in enumerate(team_to_department, start=1): team_by_department[department].append(team) # Calculate max employees in any team within a department for dept in range(1, d + 1): if dept in team_by_department: max_team_size = max(team_sizes[team] for team in team_by_department[dept]) department_maxes[dept] = max_team_size return department_maxes[1:] # Example usage: # n, d = 7, 3 # employees = [1, 2, 2, 3, 3, 4, 5] # team_to_department = [1, 1, 2, 2, 3] # print(max_employees_in_teams(n, d, employees, team_to_department)) # Output: [2, 2, 1]"},{"question":"Given a sequence of n positive integers, find the longest subsequence such that the difference between adjacent elements is at most d. # Input - The first line contains two integers n and d (1 ≤ n ≤ 10^5, 1 ≤ d ≤ 10^9) — the length of the sequence and the maximum allowed difference. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. # Output - Output a single integer — the length of the longest subsequence that satisfies the condition. # Example Input ``` 8 3 1 3 5 7 9 11 13 15 ``` Output ``` 8 ``` Explanation: In the given example, the entire sequence itself is the longest subsequence where the difference between adjacent elements is at most 3. Thus, the output is 8.","solution":"def longest_subsequence(n, d, a): Find the length of longest subsequence such that the difference between adjacent elements is at most d. :param n: Length of the sequence :param d: Maximum allowed difference between adjacent elements :param a: List of integers representing the sequence :return: Length of the longest subsequence # Initialize list to store lengths of longest subsequences ending at each index dp = [1] * n # Iterate through each element in the input sequence for i in range(1, n): for j in range(i): # If the difference between a[i] and a[j] is within the allowed difference, # update the dp value for a[i] if abs(a[i] - a[j]) <= d: dp[i] = max(dp[i], dp[j] + 1) # The answer is the maximum value in dp array return max(dp)"},{"question":"You are given two integers m and s. The task is to find two integers x and y such that: 1. 1 leq x, y leq m 2. The sum of the digits of x is s 3. The difference between x and y is maximum If no such x exists, print \\"-1\\". The first line contains two integers m and s (1 leq m leq 1000, 0 leq s leq 1000). Print the required two integers x and y. **Examples:** ``` Input: 100 4 Output: 4 1 ``` ``` Input: 10 1000 Output: -1 ```","solution":"def find_max_difference(m, s): def digit_sum(n): return sum(int(d) for d in str(n)) x = -1 for i in range(1, m + 1): if digit_sum(i) == s: x = i break if x == -1: return -1, -1 else: y = 1 if x != 1 else 2 return x, y"},{"question":"You are given a list of course prerequisite pairs, where each pair (a, b) indicates that course \'a\' must be taken before course \'b\'. Your task is to determine if it is possible to complete all courses. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000), where n is the number of courses and m is the number of prerequisite pairs. Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ n), representing a prerequisite pair. Output \\"Yes\\" if it is possible to complete all courses, otherwise output \\"No\\". Example: Input: 4 4 1 2 2 3 3 4 4 1 Output: No Input: 4 3 1 2 2 3 3 4 Output: Yes","solution":"def can_complete_courses(n, prerequisites): from collections import defaultdict, deque # Create adjacency list and in-degree array adj_list = defaultdict(list) in_degree = [0] * n # Fill adjacency list and in-degree array for a, b in prerequisites: adj_list[a - 1].append(b - 1) in_degree[b - 1] += 1 # Initialize queue with courses having 0 in-degree queue = deque([i for i in range(n) if in_degree[i] == 0]) # Process nodes with 0 in-degree processed_courses = 0 while queue: current = queue.popleft() processed_courses += 1 for neighbor in adj_list[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If we processed all courses, return \\"Yes\\", else \\"No\\" return \\"Yes\\" if processed_courses == n else \\"No\\""},{"question":"You are given a directed graph with n nodes and m edges. Your task is to find out if there exists a cycle in the graph. If there is a cycle, you need to determine if the cycle is a positive weight cycle. The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. For each test case: - The first line contains two integers n (1 le n le 10^4) and m (0 le m le 5 cdot 10^4) — the number of nodes and the number of edges in the graph. - The next m lines describe the edges of the graph, each represented by three integers u, v, w (1 le u, v le n, -10^9 le w le 10^9) where u is the starting node, v is the ending node, and w is the weight of the edge from u to v. For each test case, output \\"YES\\" if the graph contains a positive weight cycle, otherwise output \\"NO\\". Note: - A cycle is positive weight if the sum of the weights of the edges in the cycle is greater than zero. - Nodes and edges are numbered starting from 1. Consider the graph below for one test case: ``` 4 5 1 2 3 2 3 -1 3 4 2 4 2 -2 1 4 4 ``` This graph doesn\'t contain a positive weight cycle. Therefore, the output would be \\"NO\\".","solution":"def detect_positive_cycle(n, m, edges): from collections import defaultdict import sys sys.setrecursionlimit(100000) graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) def bellman_ford(start): # Initialize distances with -inf dist = [-float(\'inf\')] * (n + 1) dist[start] = 0 for _ in range(n - 1): for u in graph: for v, w in graph[u]: if dist[u] != -float(\'inf\') and dist[v] < dist[u] + w: dist[v] = dist[u] + w for u in graph: for v, w in graph[u]: if dist[u] != -float(\'inf\') and dist[v] < dist[u] + w: # Found a positive weight cycle return True return False for i in range(1, n + 1): if bellman_ford(i): return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n, m, edges = test_cases[i] result = detect_positive_cycle(n, m, edges) results.append(result) return results"},{"question":"A cunning fox is trying to gather food for the upcoming winter. It has found a large forest with multiple types of food sources scattered throughout. Each food source has a different nutritional value associated with it. To gather food efficiently, the fox wants to maximize the total nutritional value of the food it collects but is constrained by the amount of time it can spend in the forest. The forest can be represented as a sequence of food sources, and each food source has a corresponding nutritional value. The fox plans to spend a fixed amount of time in the forest collecting food, during which it can visit several consecutive food sources. You need to help the fox determine the maximum total nutritional value it can collect by visiting a contiguous subset of food sources. The first line of the input contains two integers n and t — the total number of food sources in the forest (2 ≤ n) and the maximum number of food sources the fox can visit consecutively (1 ≤ t ≤ n). The second line contains n space-separated integers vi — the nutritional values of each food source. The nutritional values do not exceed 10^9 in absolute value. Print a single integer — the maximum total nutritional value the fox can collect by visiting at most t consecutive food sources. **Example:** Input: ``` 6 3 1 -2 3 10 -4 7 ``` Output: ``` 13 ```","solution":"def max_nutritional_value(n, t, vi): Returns the maximum total nutritional value the fox can collect by visiting at most t consecutive food sources from the array vi. max_value = float(\'-inf\') current_sum = 0 # Calculate the sum of the first \'t\' food sources for i in range(t): current_sum += vi[i] max_value = max(max_value, current_sum) # Iterate over the array starting from the (t+1)th element for i in range(t, n): current_sum += vi[i] - vi[i - t] max_value = max(max_value, current_sum) return max_value"},{"question":"You are given an undirected graph with `n` vertices and `m` edges. Each edge has a positive integer weight. Your task is to find the minimum weight required to make the graph connected. The first line contains two integers `n` and `m` (`1 leq n, m leq 100,000`), the number of vertices and edges, respectively. The next `m` lines each contain three integers `u`, `v`, and `w` (`1 leq u, v leq n, 1 leq w leq 1,000,000`), representing an edge between vertices `u` and `v` with weight `w`. Print a single integer representing the minimum weight required to make the graph connected. If the graph is already connected, print the sum of the weights of the edges necessary to keep the graph connected. If it\'s not possible to connect all vertices, print `-1`. **Example 1:** Input: ``` 4 5 1 2 1 2 3 3 3 4 4 1 4 5 2 4 2 ``` Output: ``` 6 ``` **Example 2:** Input: ``` 3 1 1 2 2 ``` Output: ``` -1 ``` In the first example, the minimum spanning tree of the graph connects all vertices with the edges (1,2), (2,4), and (3,4) with a total weight of 6. In the second example, it is not possible to connect all three vertices with only one edge given.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rank[rootX] < rank[rootY]: parent[rootX] = rootY elif rank[rootX] > rank[rootY]: parent[rootY] = rootX else: parent[rootY] = rootX rank[rootX] += 1 def minimum_weight_to_connect_graph(n, m, edges): edges = sorted(edges, key=lambda edge: edge[2]) # Sort edges by weight parent = [i for i in range(n + 1)] rank = [0] * (n + 1) mst_weight = 0 edge_count = 0 for u, v, w in edges: root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: mst_weight += w union(parent, rank, root_u, root_v) edge_count += 1 if edge_count == n - 1: break if edge_count == n - 1: return mst_weight else: return -1 def solve(n, m, input_edges): edges = [] for edge in input_edges: u, v, w = edge edges.append((u, v, w)) return minimum_weight_to_connect_graph(n, m, edges)"},{"question":"Given an array of integers, Alice likes to play a game where she tries to make the array elements non-decreasing by performing the minimum number of operations. In one operation, she can choose any index i (1 ≤ i < n) and swap the values at positions i and i+1 if the value at i is greater than the value at i+1. Write a program to help Alice determine the minimum number of operations needed to make the array non-decreasing. The first line of the input contains an integer n (1 ≤ n ≤ 100), the number of elements in the array. The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), representing the array. Print the minimum number of operations required to make the array non-decreasing. **Example:** Input: ``` 5 4 3 2 1 5 ``` Output: ``` 6 ``` Input: ``` 4 1 2 3 4 ``` Output: ``` 0 ```","solution":"def minimum_swaps_to_sort(arr): n = len(arr) swap_count = 0 for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swap elements arr[j], arr[j+1] = arr[j+1], arr[j] swap_count += 1 return swap_count"},{"question":"In a magical forest, there are n trees arranged in a straight line. Each tree has a certain height. The trees are represented as an array of integers where the i-th element is the height of the i-th tree. The forest rangers want to cut down some of the trees to create a beautiful pattern that looks like a \\"mountain\\". A sequence is considered to be a mountain if there is an index p (1 ≤ p ≤ n) such that the heights of the trees increase up to the p-th tree and then decrease from the p-th tree to the last tree. Note that the trees at both the increasing and decreasing parts must be strictly increasing or decreasing respectively. Your task is to determine the length of the longest possible mountain sequence that can be obtained by removing some of the trees (if necessary). The first line of input contains a single integer n (1 ≤ n ≤ 105) — the number of trees. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the heights of the trees. Output a single integer — the length of the longest mountain sequence that can be formed. If no mountain sequence can be formed, output 0. **Example:** Input: ``` 9 2 1 4 7 3 2 5 6 1 ``` Output: ``` 5 ``` Explanation: The longest mountain sequence that can be formed is: 1 4 7 3 2 which has a length of 5.","solution":"def longest_mountain_sequence(n, arr): if n < 3: return 0 longest_length = 0 for i in range(1, n - 1): if arr[i - 1] < arr[i] > arr[i + 1]: left = i - 1 while left > 0 and arr[left - 1] < arr[left]: left -= 1 right = i + 1 while right < n - 1 and arr[right] > arr[right + 1]: right += 1 mountain_length = right - left + 1 if mountain_length > 2: longest_length = max(longest_length, mountain_length) return longest_length"},{"question":"In a certain city, a new system has been developed to assist with planning and optimizing daily activities. Citizens can enroll in various activities such as sports, lessons, or events. Each activity has a starting time and a duration. To maximize the number of activities one can attend, intervals of these activities should not overlap. Your task is to write a program that, given a list of activities, determines the maximum number of non-overlapping activities one can attend. The first line of input contains an integer n (1 ≤ n ≤ 100,000), the number of activities available. Each of the next n lines contains two integers starti and endi (0 ≤ starti < endi ≤ 1,000,000), the starting and ending time of the ith activity. Output a single integer: the maximum number of non-overlapping activities that a person can attend. For example, given the following input: ``` 5 1 3 2 4 3 5 6 7 5 8 ``` The output should be: ``` 3 ``` In this example, the optimal solution is to attend activities with times [1,3], [3,5], and [6,7]. Your program should manage input efficiently and accurately determine the schedule to maximize activity attendance.","solution":"def max_non_overlapping_activities(n, activities): Determines the maximum number of non-overlapping activities one can attend. Parameters: n (int): The number of activities. activities (list of tuples): A list of tuples where each tuple contains two integers, the start and end time of an activity. Returns: int: The maximum number of non-overlapping activities. if n == 0: return 0 # Sort the activities based on their end time activities.sort(key=lambda x: x[1]) max_activities = 1 last_end_time = activities[0][1] for i in range(1, n): if activities[i][0] >= last_end_time: max_activities += 1 last_end_time = activities[i][1] return max_activities"},{"question":"You are responsible for organizing a coding contest where teams of exactly 4 participants are formed. Each team member\'s skill level is denoted by an integer, where higher integers represent higher skill levels. For a team to be considered balanced, the difference between the highest and lowest skill levels among the team members should not exceed a certain value d. Given the number of participants n, the maximum allowed difference d, and the skill levels of each participant, determine the maximum number of balanced teams that can be formed. Remember, each participant can only be part of one team. The first line contains two integers, n and d (1 ≤ n ≤ 2000; 0 ≤ d ≤ 100). The second line contains n integers: s1, s2, ..., sn (0 ≤ si ≤ 100), where si represents the skill level of the i-th participant. Print a single number — the maximum number of balanced teams that can be formed. For example, in the first sample, two balanced teams can be formed: one with participants having skill levels [10, 12, 12, 15] and another with participants having skill levels [20, 25, 22, 20]. In the second sample, no balanced teams can be formed.","solution":"def max_balanced_teams(n, d, skill_levels): Determines the maximum number of balanced teams that can be formed. :param n: Number of participants :param d: Maximum allowed skill difference in a team :param skill_levels: List of skill levels of the participants :return: Maximum number of balanced teams skill_levels.sort() teams_count = 0 i = 0 while i + 3 < n: if skill_levels[i + 3] - skill_levels[i] <= d: teams_count += 1 i += 4 else: i += 1 return teams_count # Example usage: # n, d = 8, 5 # skill_levels = [10, 12, 15, 22, 20, 12, 20, 25] # print(max_balanced_teams(n, d, skill_levels)) # Output: 2"},{"question":"You are given an array of n integers representing the heights of a series of buildings, h1, h2, ..., hn. The buildings are aligned sequentially. We are to evaluate the skyline formed by these buildings where the width of each building is the same. You can choose any two buildings i and j (1 ≤ i < j ≤ n) and remove all the buildings between them (i.e., buildings i+1 to j-1). You need to determine the maximum possible sum of the heights of the two buildings that remain standing after removing the buildings in between. The first line contains an integer n (2 ≤ n ≤ 5·105) — number of buildings. The following line contains n integers representing the heights of the buildings h1, h2, ..., hn (1 ≤ hi ≤ 109). Print the maximum sum of the heights of two buildings after removing the buildings in between.","solution":"def max_buildings_sum(heights): Given a list of building heights, returns the maximum possible sum of the heights of two buildings, i and j (1 ≤ i < j ≤ n), after removing the buildings in between. n = len(heights) max_sum = 0 # Iterate through the list of buildings to find the maximum sum of heights of two buildings for i in range(n-1): for j in range(i+1, n): current_sum = heights[i] + heights[j] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"A company wants to manage and analyze its employees’ performance. The performance of employees is recorded and stored in a list. The company wants to evaluate how each employee performed in a given time frame intermittently. The performance of the employees is given as an array of n integers, where the i-th integer represents the performance score of the i-th employee. There will be multiple queries where each query consists of two integers li and ri. For each query, you need to find the maximum performance score of all employees from index li to ri (inclusive). The first line contains an integer n (1 ≤ n ≤ 105) – the number of employees. The second line contains n integers – the performance scores of the employees. The next line contains an integer q (1 ≤ q ≤ 105) – the number of queries. The next q lines contain two integers li and ri (1 ≤ li ≤ ri ≤ n), which describe the subarray of performance scores from index li to ri (1-based indexing). For each query, print a single integer – the maximum performance score in the specified subarray. Example: Input: 5 1 2 3 4 5 3 1 3 2 5 1 5 Output: 3 5 5","solution":"def max_performance_in_range(n, performance_scores, queries): results = [] for li, ri in queries: results.append(max(performance_scores[li-1:ri])) return results"},{"question":"An amusement park has m roller coasters connecting n stations. Each roller coaster ride between two stations has a specific thrill value. Visitors can ride any roller coaster between two stations. However, visitors can feel tired, and therefore, their thrill value for a roller coaster decreases by a certain factor for every consecutive ride on the same roller coaster. Specifically, if a roller coaster initially has a thrill value of x, then on the first ride the thrill is x, on the second ride, it is x - p, on the third ride, it is x - 2p, and so on. The thrill value can never be less than 0. For example, if a roller coaster has an initial thrill value of 10 and the thrill reduction factor p is 2, the thrill values for consecutive rides on that roller coaster will be 10, 8, 6, 4, 2, and 0 for the subsequent rides. A visitor starts their tour from a specific station s. Calculate the maximum total thrill the visitor can experience if they can ride any roller coaster any number of times. The first line contains two integers n and m (1 ≤ n ≤ 106, 0 ≤ m ≤ 106), representing the number of stations and the number of roller coasters respectively. Each of the following m lines contains four integers u, v, x, and p (1 ≤ u, v ≤ n, 1 ≤ x, p ≤ 108), describing a roller coaster that connects station u to station v with an initial thrill value of x and a thrill reduction factor of p. The last line contains a single integer s (1 ≤ s ≤ n) – the starting station for the visitor. Print an integer denoting the maximum total thrill value the visitor can experience during their amusement park tour. For example, given the initial thrill value of 10 and reduction factor of 2 for a roller coaster between station 1 and station 2, the total thrill value for consecutive rides on that roller coaster would be: 10 + 8 + 6 + 4 + 2 = 30","solution":"def calculate_max_thrill(n, m, roller_coasters, s): max_thrill = 0 for u, v, x, p in roller_coasters: if p > 0: # Calculate the total thrill for consecutive rides until thrill becomes zero rides = x // p + 1 # Number of rides before thrill reaches zero total_thrill = (rides * (x + (x - (rides - 1) * p))) // 2 # Sum of arithmetic series max_thrill += total_thrill return max_thrill"},{"question":"Given an array of integers, your task is to find a contiguous subarray with the largest sum and output the sum of that subarray. **Input:** - The first line contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. - The second line contains `n` integers separated by spaces — the elements of the array. Each element is between -1,000 and 1,000. **Output:** - Print a single integer representing the maximum sum of a contiguous subarray. **Example:** ``` Input: 5 -2 1 -3 4 -1 2 1 -5 4 Output: 6 ``` In the example above, the maximum sum of a contiguous subarray is 6, which corresponds to the subarray `[4, -1, 2, 1]`.","solution":"def max_subarray_sum(arr): Returns the sum of the contiguous subarray with the largest sum. Uses Kadane\'s algorithm to find the maximum sum. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array a consisting of n non-negative integers, and an integer k. Your task is to find the maximum possible sum of a subsequence of length k where no two elements of the subsequence are adjacent in the original array. First line contains two integers n and k (1 le k le n le 3 cdot 10^5) — the number of elements in the array and the required length of the subsequence. Second line contains n space-separated integers a_1, a_2, ..., a_n (1 le a_i le 10^9), where a_i is the i-th element of the array. Output one integer: the maximum possible sum of a subsequence of length k with no two elements being adjacent. In the first sample, choosing elements a_1, a_3, and a_5 gives the sum 7 + 9 + 5 = 21. In the second sample, choosing elements a_2, a_4, and a_6 gives the sum 8 + 7 + 6 = 21.","solution":"def max_sum_of_subsequence(n, k, a): indexed_array = [(a[i], i) for i in range(n)] indexed_array.sort(reverse=True, key=lambda x: x[0]) # Initialize the result array and a set to store selected indices result = [] selected_indices = set() for value, index in indexed_array: if len(result) == k: break if all(abs(index - selected_index) > 1 for selected_index in selected_indices): result.append(value) selected_indices.add(index) return sum(result)"},{"question":"You are given an array of n integers. Your task is to split this array into the minimum number of subarrays such that each subarray is strictly decreasing. Determine the minimum number of subarrays required and print the start and end indices of each subarray (1-indexed). The first line contains one integer n (1 ≤ n ≤ 2 × 10^5) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output the minimum number of subarrays required. For each subarray, output the start and end indices (1-indexed). Example: Input: 6 9 8 7 1 4 3 Output: 2 1 4 5 6 Explanation: The array can be split into two subarrays: 1. [9, 8, 7, 1] (indices 1 to 4) – this is strictly decreasing. 2. [4, 3] (indices 5 to 6) – this is strictly decreasing.","solution":"def min_decreasing_subarrays(n, arr): subarrays = [] start = 0 while start < n: end = start while end + 1 < n and arr[end] > arr[end + 1]: end += 1 subarrays.append((start + 1, end + 1)) start = end + 1 return len(subarrays), subarrays"},{"question":"You are given an array of integers representing the heights of buildings in a row. Rainwater that falls on the buildings will accumulate in the gaps between them. Write a program to calculate the maximum amount of rainwater that can be trapped between the buildings. Input: 1. An integer N (1 ≤ N ≤ 100,000), representing the number of buildings. 2. A line with exactly N integers h1, h2, ..., hN (0 ≤ hi ≤ 100,000), the heights of the buildings. Output: Print a single integer, the maximum amount of rainwater that can be trapped between the buildings. Example: Input: 6 0 1 0 2 1 0 Output: 1 Explanation: In this example, 1 unit of rainwater will be trapped between the third and fourth buildings.","solution":"def trapRainWater(heights): Calculate the maximum amount of rainwater that can be trapped between the buildings. Parameters: heights (list of int): List of building heights. Returns: int: The maximum amount of trapped rainwater. if not heights: return 0 n = len(heights) left = [0] * n right = [0] * n left[0] = heights[0] for i in range(1, n): left[i] = max(left[i-1], heights[i]) right[n-1] = heights[n-1] for i in range(n-2, -1, -1): right[i] = max(right[i+1], heights[i]) water = 0 for i in range(n): water += min(left[i], right[i]) - heights[i] return water"},{"question":"Given an array of n integers, your task is to divide this array into the minimum number of subarrays such that each subarray is strictly increasing. A subarray is strictly increasing if for all its consecutive elements `a[i] < a[i+1]` holds true. You are also required to output the list of lengths of these subarrays. # Input Format: - The first line contains a single integer n (1 ≤ n ≤ 100000), the size of the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000), the elements of the array. # Output Format: - On the first line, output a single integer m, the minimum number of strictly increasing subarrays. - On the second line, output m integers, the lengths of these subarrays. # Example: Input: ``` 8 1 2 3 2 3 4 3 5 ``` Output: ``` 3 3 3 2 ``` # Explanation: In the example, the array can be divided into the following strictly increasing subarrays: - [1, 2, 3] - [2, 3, 4] - [3, 5] Hence, the minimum number of subarrays is 3 with lengths 3, 3, 2 respectively.","solution":"def divide_into_strictly_increasing_subarrays(n, arr): Divides the array into the minimum number of strictly increasing subarrays. Args: n (int): The size of the array. arr (list): The elements of the array. Returns: tuple: A tuple containing the number of subarrays and a list of lengths of these subarrays. if n == 1: return 1, [1] subarrays_lengths = [] current_length = 1 for i in range(1, n): if arr[i] > arr[i - 1]: current_length += 1 else: subarrays_lengths.append(current_length) current_length = 1 subarrays_lengths.append(current_length) return len(subarrays_lengths), subarrays_lengths"},{"question":"You are designing a new network communication protocol for an internet service provider. The protocol involves a sequence of routers connected in a line, each labeled from 1 to n. Each router has a specific forwarding capability denoted by fi, which represents the maximum number of routers it can forward a packet to in a single hop. When a packet is transmitted starting from router 1, it must eventually reach the last router n by being forwarded through intermediate routers. The objective is to minimize the total number of hops required to successfully transmit the packet from router 1 to router n. To achieve this, you must determine the optimal path that the packet should take, leveraging the forwarding capabilities of the routers. You are given the number of routers, n, and the forwarding capabilities of each router in sequence from 1 to n. Your task is to calculate the minimum number of hops needed to transmit the packet from router 1 to router n. The first line contains an integer n — the number of routers in the network. Each of the next n lines contains one integer fi (1 ≤ fi ≤ n) — the forwarding capabilities of the routers in the order from router 1 to router n. To get full points for the first group of tests it is sufficient to solve the problem with 2 ≤ n ≤ 300. To get full points for the second group of tests it is sufficient to solve the problem with 2 ≤ n ≤ 10000. To get full points for the third group of tests it is sufficient to solve the problem with 2 ≤ n ≤ 250000. Print a single integer — the minimum number of hops required to transmit the packet from router 1 to router n. Example: Input: 4 1 2 1 1 Output: 2 Explanation: In the example, the packet starts at router 1. Router 1 can only forward to router 2. Router 2 can then forward the packet directly to router 4 because its forwarding capability is 2, which covers routers 3 and 4. Thus, the packet travels from router 1 to router 2, and then from router 2 to router 4, making a total of 2 hops.","solution":"from collections import deque def min_hops(n, forwarding_capabilities): Returns the minimum number of hops required to transmit the packet from router 1 to router n. :param n: Number of routers :param forwarding_capabilities: List containing the forwarding capabilities of each router :return: Minimum number of hops required # Breadth-first search (BFS) implementation queue = deque([(1, 0)]) # (router position, number of hops) visited = set() while queue: position, hops = queue.popleft() if position == n: return hops for i in range(1, forwarding_capabilities[position - 1] + 1): new_position = position + i if new_position <= n and new_position not in visited: visited.add(new_position) queue.append((new_position, hops + 1))"},{"question":"The organizers of a coding competition are planning an award ceremony and need to perfectly arrange the seats in the hall. They have a list of participants where each participant is characterized by their excitement level ei. The excitement levels vary widely; some participants are very enthusiastic, while others are quite reserved. To keep the energy balanced in the hall, the organizers want to seat participants in such a way that the difference in excitement levels between any two adjacent participants does not exceed a specific threshold d. You are tasked to find one such possible seating arrangement for the participants or determine that it is impossible to arrange them according to the given condition. The first line contains two integers n (1 ≤ n ≤ 10^5) and d (0 ≤ d ≤ 10^9) — the number of participants and the maximum allowed difference in excitement levels between any two adjacent participants. The second line contains n space-separated integers ei — the excitement levels of the participants. The excitement levels are between -10^9 and 10^9 inclusive. If there is a valid way to arrange the participants, print \\"YES\\" followed by a sequence of integers representing the excitement levels in the desired order. If there are multiple correct arrangements, print any of them. If it is not possible to arrange the participants as required, print \\"NO\\".","solution":"def arrange_seats(n, d, excitement_levels): Arrange the participants\' excitement levels such that the difference between any two adjacent levels does not exceed the threshold d. Args: n : int - Number of participants. d : int - Maximum allowed difference in excitement levels. excitement_levels : list of int - Excitement levels of participants. Returns: str : \\"YES\\" followed by the valid sequence of excitement levels or \\"NO\\". # First, sort the list of excitement levels excitement_levels.sort() # Check if the sorted list satisfies the condition for i in range(n - 1): if excitement_levels[i + 1] - excitement_levels[i] > d: return \\"NO\\" # If all conditions are satisfied, return \\"YES\\" followed by the valid arrangement return \\"YES \\" + \' \'.join(map(str, excitement_levels))"},{"question":"You are given a string consisting of lowercase letters. Your task is to remove the minimum number of characters to make the string a palindrome. Recall that a palindrome is a string that reads the same forward and backward. Create a function `min_deletions_palindrome(s: str) -> int` that returns the minimum number of deletions required to make the string a palindrome. # Example ```python assert min_deletions_palindrome(\\"abcb\\") == 1 # Remove \'a\' to get \\"bcb\\" or remove \'c\' to get \\"abb\\" assert min_deletions_palindrome(\\"abcdef\\") == 5 # Remove \'a\', \'b\', \'c\', \'d\', \'e\' to get \\"f\\" assert min_deletions_palindrome(\\"aab\\") == 1 # Remove \'b\' to get \\"aa\\" ``` # Constraints - The string length will be at most 1000 characters. # Explanation To solve this problem, you need to determine the minimum number of deletions required to turn the input string into a palindrome. This can be achieved by finding the longest palindromic subsequence and subtracting its length from the total length of the string. # Function Signature ```python def min_deletions_palindrome(s: str) -> int: # Your code here ```","solution":"def min_deletions_palindrome(s: str) -> int: Returns the minimum number of deletions required to make the string a palindrome. n = len(s) # Create a reverse of string s rev_s = s[::-1] # Create a table to store results of subproblems dp = [[0] * (n + 1) for _ in range(n + 1)] # Build the table for i in range(1, n + 1): for j in range(1, n + 1): if s[i - 1] == rev_s[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Length of longest palindromic subsequence lps_len = dp[n][n] # Minimum number of deletions return n - lps_len"},{"question":"A small kingdom is planning to build a new city on a grid. The grid is represented as an n × n matrix where each cell contains an integer that represents the elevation of that cell. The kingdom wants to construct a road system connecting the cells in such a way that traveling between any two cells is as efficient as possible. However, the construction costs increase with elevation differences, and for safety reasons, the roads can only be constructed between adjacent cells (i.e., cells sharing a common edge). For the purpose of this problem, the path\'s elevation cost is defined as the maximum difference in elevation between consecutive cells on the path. You are given the grid of elevations and need to find out the minimum possible path elevation cost to travel from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1) of the grid. # Input: - The first line contains an integer n (2 ≤ n ≤ 1000), the dimension of the grid. - Each of the next n lines contains n integers separated by space, representing the elevation map of the city (each elevation is a non-negative integer and less than or equal to 10^6). # Output: - Print a single integer — the minimum possible elevation cost to travel from the top-left corner to the bottom-right corner of the grid. # Example: Input: ``` 4 1 2 2 3 2 3 3 4 3 4 4 5 4 5 5 6 ``` Output: ``` 1 ``` Explanation: One possible path from (0, 0) to (3, 3) with the minimum elevation cost is through cells (1, 1), (2, 2), and (3, 3) with maximum elevation difference of 1 between consecutive cells. The goal of the problem is to find the path through the grid such that the maximum elevation difference between any two consecutive cells on the path is minimized. This problem can be approached using algorithms for finding the minimum spanning tree or graph traversal methods such as Dijkstra\'s algorithm adapted to the context of elevation differences.","solution":"import heapq def minimum_possible_path_elevation_cost(n, grid): Returns the minimum possible elevation cost to travel from the top-left corner to the bottom-right corner of the grid. # Directions for adjacent cells: right, left, down, up directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Priority queue to store (cost, x, y) # Initially start with the top-left corner with cost 0 pq = [(0, 0, 0)] # Initiate a 2D array for visited nodes visited = [[False] * n for _ in range(n)] visited[0][0] = True # Use a cost array to store the minimum elevation cost to reach each cell cost = [[float(\'inf\')] * n for _ in range(n)] cost[0][0] = 0 while pq: curr_cost, x, y = heapq.heappop(pq) # If we have reached the bottom-right corner, return the current cost if x == n - 1 and y == n - 1: return curr_cost # Explore the four adjacent cells for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]: elevation_diff = abs(grid[nx][ny] - grid[x][y]) new_cost = max(curr_cost, elevation_diff) if new_cost < cost[nx][ny]: cost[nx][ny] = new_cost heapq.heappush(pq, (new_cost, nx, ny)) visited[nx][ny] = True return -1 # In case there is no valid path (but there will be one as per constraints)"},{"question":"You are given a tree with n nodes. The tree is rooted at node 1. Each node is initially colored white. You can perform two types of operations: 1. **Query Operation**: Given a node v, what is the number of black nodes in the subtree of v. 2. **Update Operation**: Given a node v, change the color of node v from white to black or black to white. Write a program to process these operations efficiently. # Input Format - The first line contains an integer n (1 leq n leq 100,000) — the number of nodes in the tree. - The next n-1 lines each contain two integers u and v (1 leq u, v leq n), representing an edge connecting node u and node v. - The next line contains a single integer q (1 leq q leq 100,000) — the number of operations. - The next q lines each represent an operation. An operation can be in one of the two forms: - \\"Q v\\" — a query operation where you need to report the number of black nodes in the subtree of node v. - \\"U v\\" — an update operation where you need to toggle the color of node v from white to black or black to white. # Output Format For each query operation, output the number of black nodes in the subtree of the given node. # Example Input ``` 5 1 2 1 3 2 4 2 5 5 U 2 Q 1 U 3 Q 1 Q 2 ``` Output ``` 1 2 1 ``` # Explanation 1. Initially, all nodes are white. 2. After \\"U 2\\", node 2 is black. 3. After \\"Q 1\\", the subtree of root node 1 has 1 black node (node 2). 4. After \\"U 3\\", node 3 is black. 5. After \\"Q 1\\", the subtree of root node 1 has 2 black nodes (nodes 2 and 3). 6. After \\"Q 2\\", the subtree of node 2 has 1 black node (node 2 itself). Note: The efficiency of your solution is crucial due to the constraints. Use suitable data structures and decomposition techniques to achieve optimal performance.","solution":"class TreeNode: def __init__(self): self.color = \'white\' self.children = [] class Tree: def __init__(self, n): self.nodes = {i: TreeNode() for i in range(1, n + 1)} self.size = n self.black_count = [0] * (n + 1) self.subtree_size = [0] * (n + 1) self.parent = list(range(n + 1)) def add_edge(self, u, v): self.nodes[u].children.append(v) self.nodes[v].children.append(u) def dfs(self, v, p): self.subtree_size[v] = 1 self.parent[v] = p for child in self.nodes[v].children: if child == p: continue self.dfs(child, v) self.subtree_size[v] += self.subtree_size[child] self.black_count[v] += self.black_count[child] def toggle_color(self, v): self.update_subtree(v, 1 if self.nodes[v].color == \'white\' else -1) self.nodes[v].color = \'black\' if self.nodes[v].color == \'white\' else \'white\' def update_subtree(self, v, diff): self.black_count[v] += diff if self.parent[v] != v: self.update_subtree(self.parent[v], diff) def query_black_nodes(self, v): return self.black_count[v] def process_operations(n, edges, operations): tree = Tree(n) for u, v in edges: tree.add_edge(u, v) tree.dfs(1, 1) result = [] for operation in operations: if operation[0] == \'U\': tree.toggle_color(operation[1]) elif operation[0] == \'Q\': result.append(tree.query_black_nodes(operation[1])) return result"},{"question":"In a warehouse, there are n boxes each initially having some number of identical items. Each box can either have items added to it or removed from it. You want to ensure that each box contains at least k items after all operations are performed. You are given two types of operations that can be performed on the boxes: 1. Add exactly m items to a box. 2. Remove exactly m items from a box. You can perform any operation on any box as many times as you\'d like. Determine the minimum number of operations required to ensure that every box has at least k items. The first line contains the integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains three integers n, m, and k (1 le n le 10^5; 1 le m, k le 10^9) — the number of boxes, the number of items to be added or removed in each operation, and the minimum number of items each box should have respectively. The second line of each test case contains n integers b_1, b_2, dots, b_n (0 le b_i le 10^9), where b_i is the initial number of items in the i-th box. The sum of n over all inputs does not exceed 10^5. For each test case, print one integer — the minimum number of operations required.","solution":"def min_operations_to_meet_threshold(n, m, k, box_items): operations = 0 for items in box_items: if items < k: diff = k - items operations += (diff + m - 1) // m # ceiling division # No need for else branch as only increasing is necessary return operations def solve(test_cases): results = [] for case in test_cases: n, m, k, box_items = case result = min_operations_to_meet_threshold(n, m, k, box_items) results.append(result) return results"},{"question":"You are given a sequence of integers a=[a_1,a_2, dots, a_n] of length n. You need to perform a series of operations on this sequence. In each operation, you can choose any two indices i and j (1 le i, j le n) such that i ne j and set a_i = a_i + a_j. After performing the operations, you need to report the minimum possible value of the maximum element in the sequence. For example, consider the sequence a = [3, 1, 4, 1, 5]. One possible way to perform the operations is: - Choose indices 2 and 1, and set a_2 = a_2 + a_1, resulting in a = [3, 4, 4, 1, 5]. - Choose indices 4 and 2, and set a_4 = a_4 + a_2, resulting in a = [3, 4, 4, 5, 5]. The minimum possible value of the maximum element is then 5. The first line contains an integer n (1 le n le 10^5) — the length of the sequence a. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9). Print a single integer — the minimum possible value of the maximum element in the sequence after performing any number of operations. # Input ``` 5 3 1 4 1 5 ``` # Output ``` 5 ``` # Explanation - Initially, the sequence is [3, 1, 4, 1, 5]. - After the first operation, the sequence becomes [3, 4, 4, 1, 5]. - After the second operation, the sequence becomes [3, 4, 4, 5, 5].","solution":"import math def min_max_value(nums): This function takes a list of integers and returns the minimum possible value of the maximum element after performing any number of the specified operations. total_sum = sum(nums) n = len(nums) min_possible_max = math.ceil(total_sum / n) return min_possible_max"},{"question":"You are given a binary tree consisting of n nodes, numbered from 1 to n. Each node has a value associated with it, denoted as a_i. Your goal is to find the sum of values of all nodes that are on the longest path from the root node to any leaf node. If there are multiple longest paths, choose the one with the maximum sum of values. A binary tree is a tree data structure in which each parent node can have at most two children. **Input:** - The first line contains a single integer n (1 leq n leq 5000), the number of nodes in the binary tree. - The second line contains n integers a_1, a_2, ldots, a_n (-1000 leq a_i leq 1000), where a_i is the value of the i-th node. - Each of the next n-1 lines contains two integers u and v (1 leq u, v leq n), denoting an edge between node u and node v. It is guaranteed that the given edges form a valid binary tree. **Output:** - Print a single integer, the sum of values of all nodes on the longest path from the root node to any leaf node with the maximum sum of values if there are multiple such paths. **Example:** ``` Input: 7 3 -1 4 2 5 -3 2 1 2 1 3 2 4 2 5 3 6 3 7 Output: 12 Explanation: - The binary tree looks like this: 1(3) / 2(-1) 3(4) / / 4(2) 5(5) 6(-3) 7(2) - The longest paths from the root node (1) to any leaf node are: 1 -> 2 -> 4 = 3 + (-1) + 2 = 4 1 -> 2 -> 5 = 3 + (-1) + 5 = 7 1 -> 3 -> 6 = 3 + 4 + (-3) = 4 1 -> 3 -> 7 = 3 + 4 + 2 = 9 - Among these paths, the path 1 -> 3 -> 7 has the maximum sum, which is 9. ```","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(n, node_vals, edges): nodes = [TreeNode(value) for value in node_vals] adj_list = {i: [] for i in range(n)} for u, v in edges: adj_list[u-1].append(v-1) adj_list[v-1].append(u-1) def build_tree_dfs(node, parent): for neighbor in adj_list[node]: if neighbor == parent: continue if nodes[node].left is None: nodes[node].left = nodes[neighbor] else: nodes[node].right = nodes[neighbor] build_tree_dfs(neighbor, node) build_tree_dfs(0, -1) return nodes[0] def sum_of_longest_path(root): def dfs(node): if node is None: return (0, 0) # (sum, depth) left_sum, left_depth = dfs(node.left) right_sum, right_depth = dfs(node.right) if left_depth > right_depth: return (left_sum + node.value, left_depth + 1) elif left_depth < right_depth: return (right_sum + node.value, right_depth + 1) else: return (max(left_sum, right_sum) + node.value, left_depth + 1) total_sum, _ = dfs(root) return total_sum def solution(n, node_vals, edges): root = build_tree(n, node_vals, edges) return sum_of_longest_path(root)"},{"question":"Alice loves creating different shapes using ASCII characters. Recently, she came up with the idea of generating triangles by a specific set of rules and now she wants to share her task with others. You are given an integer `n` (1 leq n leq 50). Your task is to print an isosceles triangle with exactly `n` rows. The triangle should be formed using the character `*` (asterisk). The triangle should be centered and the base should be the widest part of the triangle. # Input The input consists of a single integer `n`. # Output Print the isosceles triangle with `n` rows using the `*` character. Each row should be centered such that the bottom row has the maximum number of `*`. # Example Input ``` 4 ``` Output ``` * *** ***** ******* ``` Explanation - The first row has 1 `*` and is centered. - The second row has 3 `*` and is centered. - The third row has 5 `*` and is centered. - The fourth row has 7 `*` and is centered.","solution":"def generate_triangle(n): Generates an isosceles triangle with n rows using \'*\' character. triangle = [] for i in range(n): stars = \'*\' * (2*i + 1) centered_stars = stars.center(2*n - 1) triangle.append(centered_stars) return \'n\'.join(triangle)"},{"question":"Given a string s of lowercase English letters, you can perform the following operation any number of times (including zero): choose a character in the string and change it to any other lowercase English letter. The goal is to transform the string so that every letter in the resulting string is the same, minimizing the number of operations needed. For example, given the string \\"abbba\\", you can transform it into \\"aaaaa\\" with 2 operations by changing both \'b\'s to \'a\'s, or into \\"bbbbb\\" with 3 operations by changing both \'a\'s to \'b\'s, etc. The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The next t lines each contain a single string s (1 ≤ |s| ≤ 100). Output t lines — the minimum number of operations needed to make each string consist of identical characters. In the first sample, the string \\"abbba\\" can be transformed into \\"aaaaa\\" with 2 operations by changing both \'b\'s to \'a\'s. In the second sample, the string \\"aab\\" can be transformed into \\"aaa\\" with 1 operation by changing the \'b\' to \'a\'.","solution":"def min_operations_to_uniform_string(s): Returns the minimum number of operations needed to make the string consist of identical characters. from collections import Counter count = Counter(s) most_common_count = max(count.values()) # Total number of operations will be the length of string minus the most common character count return len(s) - most_common_count def transform_strings(t, strings): results = [] for s in strings: results.append(min_operations_to_uniform_string(s)) return results"},{"question":"There\'s a game called \\"Jump Game\\" that takes place on a 1-dimensional array of integers. Each element in the array represents the maximum number of jumps you can make forward from that element. The goal is to determine if you can reach the last index of the array starting from the first index. For instance, given the array `[2,3,1,1,4]`, you start at index 0 and can jump to index 1 or 2. From index 1, you can jump to index 2, 3, or 4 (the last index). Therefore, it is possible to reach the last index. Write a function `canReachEnd` that takes in a list of non-negative integers representing the array and returns a boolean indicating whether it\'s possible to reach the last index of the array. # Function Signature ```python def canReachEnd(nums: List[int]) -> bool: ``` # Input - `nums`: List of non-negative integers `nums` (1 ≤ len(nums) ≤ 104, 0 ≤ nums[i] ≤ 1000) # Output - Returns `True` if you can reach the last index, otherwise returns `False` # Examples ```python assert canReachEnd([2,3,1,1,4]) == True assert canReachEnd([3,2,1,0,4]) == False assert canReachEnd([0]) == True assert canReachEnd([2,0,0]) == True assert canReachEnd([0,1]) == False ``` # Explanation of Examples 1. In the array `[2,3,1,1,4]`, you can reach from index 0 to 1 or 2, and then reach 3 or 4 (last index). 2. In the array `[3,2,1,0,4]`, on reaching index 3, you\'re stuck since you can\'t jump further. 3. In the array `[0]`, you\'re already at the last index. 4. In the array `[2,0,0]`, you can reach directly to the last index from index 0. 5. In the array `[0,1]`, you can\'t move anywhere from the start, hence can\'t reach the last index.","solution":"def canReachEnd(nums): Determines if you can reach the last index starting from the first index. Args: nums: List of non-negative integers representing max jumps from that index. Returns: bool: True if you can reach the last index, False otherwise. max_reach = 0 n = len(nums) for i in range(n): if i > max_reach: return False max_reach = max(max_reach, i + nums[i]) if max_reach >= n - 1: return True return False"},{"question":"You are given an undirected graph with `n` nodes (numbered from 1 to 𝑛) and `m` edges. Each node has a certain probability of holding a treasure, represented by an array `p` where `p[i]` indicates the treasure probability of node `i`. Two treasure hunters, Hunter A and Hunter B, start at nodes `s1` and `s2` respectively. They can move to any adjacent node in a single step. Both hunters are only interested in maximizing the probability of finding any treasure within the graph. However, due to a recent volcanic eruption on Treasure Island, some nodes have been destroyed and are therefore inaccessible, these nodes are represented by an array `destroyed`. Calculate the maximum probability that either hunter will find a treasure, considering their combined possible movements and affected nodes. Print the resulting maximum probability. If a node is destroyed, the probability of finding treasure in that node becomes 0. # Input - The first line contains three integers `n` (1 ≤ n ≤ 1000), `m` (0 ≤ m ≤ 2000), and `d` (0 ≤ d ≤ n) — the number of nodes, edges, and destroyed nodes respectively. - The second line contains `n` space-separated integers `p[1], p[2], ..., p[n]` (0.0 ≤ p[i] ≤ 1.0) — the probability of finding a treasure in each node. - The third line contains two integers `s1` and `s2` (1 ≤ s1, s2 ≤ n) — the starting positions of Hunter A and Hunter B. - Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) — representing an edge between nodes `u` and `v`. - The last line contains `d` space-separated integers representing the list of destroyed nodes (if `d` = 0, this line can be omitted). # Output - Print a single floating-point number representing the maximum probability that either hunter will find treasure. The result should be given with at least 6 decimal places. # Example Input ``` 5 4 1 0.3 0.5 0.2 0.7 0.8 1 3 1 2 2 3 3 4 4 5 4 ``` Output ``` 0.800000 ``` # Note - In this example, the graph has 5 nodes and 4 edges. - Node 4 is destroyed, reducing the effective graph. - Hunters start at nodes 1 and 3 and the maximum probability of finding treasure is 0.8 at node 5.","solution":"def max_treasure_probability(n, m, d, p, s1, s2, edges, destroyed): from collections import defaultdict, deque # Mark destroyed nodes with zero probability for node in destroyed: p[node - 1] = 0.0 # Create adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS function to find reachable nodes and their probabilities def bfs(start): queue = deque([(start, 1.0)]) # (node, probability) visited = set([start]) max_prob = 0.0 while queue: current_node, current_prob = queue.popleft() max_prob = max(max_prob, p[current_node - 1]) for neighbor in graph[current_node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, current_prob * p[neighbor - 1])) return max_prob # Perform BFS from both starting positions max_prob_a = bfs(s1) max_prob_b = bfs(s2) # Return the highest probability of hunting treasure return max(max_prob_a, max_prob_b)"},{"question":"You are given an 8x8 chessboard and two pieces on it: a King and a Rook. Your task is to determine the minimum number of moves required for the King to reach the Rook. Both pieces move according to their standard chess rules: the King moves one square in any direction (vertically, horizontally, or diagonally), while the Rook moves any number of squares directly along a row or column. The chessboard is described by an 8x8 grid, with coordinates ranging from (0,0) to (7,7). The King\'s position is given by (kx, ky) and the Rook\'s position is given by (rx, ry). Write a function `min_moves_to_reach_rook(kx, ky, rx, ry)` that takes four integers, representing the (kx, ky) and (rx, ry) positions respectively, and returns the minimum number of moves for the King to reach the Rook. # Input - Two integers kx, ky (0 ≤ kx, ky ≤ 7) representing the coordinates of the King. - Two integers rx, ry (0 ≤ rx, ry ≤ 7) representing the coordinates of the Rook. # Output - An integer representing the minimum number of moves required for the King to reach the Rook. # Example ```python # Input kx = 0 ky = 0 rx = 7 ry = 7 # Output 7 # Explanation The King can move diagonally from (0, 0) to (7, 7) in 7 moves by moving: (1,1), (2,2), (3,3), (4,4), (5,5), (6,6), (7,7). ``` # Constraints - The King and Rook will always be on different squares. - Both coordinates provided will always be valid.","solution":"def min_moves_to_reach_rook(kx, ky, rx, ry): Returns the minimum number of moves required for the King to reach the Rook. return max(abs(kx - rx), abs(ky - ry))"},{"question":"In a distant galaxy, there exists an advanced civilization that uses a unique numbering system for their communication network. The system comprises nodes connected in a tree structure where each node represents a command center and edges represent communication links. Each command center is assigned a number (node value), unique and positive. Due to some interference with cosmic rays, the nodes experience oscillations in their values. These oscillations follow a specific pattern and the value of the node changes periodically. Given the initial values of the nodes and the period of oscillation, your task is to determine the total number of unique values experienced by the root node over one complete period of oscillation. Initially, you are provided with a tree of `n` nodes and `n-1` edges. Each node has an initial value, and a list of values that it will cycle through with a fixed period. Your task is to compute the number of unique values that the root node will take during one complete oscillation period. Each node, starting at its initial value, changes its value at each time unit to the next value in its specific period cycle. The nodes continue this changing until the cycle completes and repeats. Your input will consist of the number of nodes `n`, the list of edges defining the tree, the initial values of the nodes, and a sequence for each node defining its period cycle. Input: - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of nodes. - The next `n-1` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n) indicating an edge between node `u` and node `v`. - The next line contains `n` integers, the initial values of the nodes in the tree. - The next `n` lines each contain a sequence of integers separated by spaces, defining the period cycle for each node starting with the length `l` of the cycle followed by `l` values. Output: - Output a single integer — the number of unique values the root node will experience over one complete period. Example: ``` Input: 5 1 2 1 3 2 4 2 5 10 20 30 40 50 2 10 15 3 20 25 30 3 30 35 40 2 40 45 2 50 55 Output: 5 ``` Explanation: In this example, the root node (node 1) has an initial value of 10 and cycles through [10, 15]. Across the tree, oscillations are computed, leading to unique values experienced by the root node during each unit of time. The total unique values during one period are 5.","solution":"def unique_values_in_oscillation_period(n, edges, initial_values, oscillation_periods): Determines the number of unique values experienced by the root node over one complete period of oscillation. :param n: Number of nodes. :param edges: List of edges defining the tree :param initial_values: Initial values of the nodes :param oscillation_periods: List of sequences for each node defining its period cycle :return: Number of unique values experienced by the root node over one complete period. root_oscillation = oscillation_periods[0] root_set = set(root_oscillation) return len(root_set) # Reading input from user def main(): import sys input = sys.stdin.read data = input().split() idx = 0 n = int(data[idx]) idx += 1 edges = [] for _ in range(n - 1): u = int(data[idx]) v = int(data[idx+1]) edges.append((u, v)) idx += 2 initial_values = [] for _ in range(n): initial_values.append(int(data[idx])) idx += 1 oscillation_periods = [] for _ in range(n): l = int(data[idx]) period = [] idx += 1 for __ in range(l): period.append(int(data[idx])) idx += 1 oscillation_periods.append(period) print(unique_values_in_oscillation_period(n, edges, initial_values, oscillation_periods)) if __name__ == \'__main__\': main()"},{"question":"You are given a robot that can move on an infinite 2D grid. The robot starts at the origin point (0, 0). You need to program the robot to follow a series of movement commands to reach a specific destination point (x, y). The robot can understand three types of commands: - \\"UP\\": Move up by one unit. - \\"DOWN\\": Move down by one unit. - \\"LEFT\\": Move left by one unit. - \\"RIGHT\\": Move right by one unit. Write a program that will compute and output the sequence of commands the robot needs to follow in order to reach the point (x, y) from the origin (0, 0). Your program should output the commands as a single string in the order they should be executed. Input: The input contains two integers x and y (-10^9 ≤ x, y ≤ 10^9), which represent the coordinates of the destination point. Output: Print a single string containing the sequence of commands. Example: Input: 3 4 Output: \\"UPUPUPUPRIGHTRIGHTRIGHT\\" Explanation: To reach the point (3, 4) from the origin, the robot needs to move up 4 times and then right 3 times. Therefore, the corresponding sequence of commands is \\"UPUPUPUPRIGHTRIGHTRIGHT\\".","solution":"def navigate_robot(x, y): Computes the sequence of commands needed to move the robot from (0, 0) to (x, y). Parameters: x (int): The x-coordinate of the destination. y (int): The y-coordinate of the destination. Returns: str: A string containing the sequence of commands. commands = \\"\\" if y > 0: commands += \\"UP\\" * y elif y < 0: commands += \\"DOWN\\" * abs(y) if x > 0: commands += \\"RIGHT\\" * x elif x < 0: commands += \\"LEFT\\" * abs(x) return commands"},{"question":"Given a 6-sided die, you are allowed to place the numbers 1 to 6 on its faces in any order you choose. However, the two opposite faces should sum up to 7 (i.e., if face A has number x, the face directly opposite to A should have number 7-x). Additionally, you have to make sure that the numbers on adjacent faces (faces that share an edge) have a difference greater than or equal to 2. You need to determine if such a placement is possible and, if so, provide one valid configuration of numbers on the die. If no valid configuration is possible, return \\"NO\\". The output should be in the format: * \\"NO\\" if there is no possible configuration * \\"YES\\" followed by a space-separated list of 6 integers representing the numbers on the faces of the die. The output should follow the order: top face, bottom face, front face, back face, left face, right face. Example output: ``` YES 1 6 3 4 2 5 ``` or ``` NO ```","solution":"def find_die_configuration(): Find a valid configuration of numbers on a die such that: - The two opposite faces sum up to 7. - The difference between adjacent faces is greater than or equal to 2. Returns \\"NO\\" if no valid configuration is possible or \\"YES\\" followed by the configuration. # Since the sum of opposite faces should be 7, we have the following pairs: # (1, 6), (2, 5), (3, 4) # One example configuration that satisfies the adjacent face difference constraint: # Top (1), Bottom (6), Front (3), Back (4), Left (2), Right (5) # The differences between adjacent faces are: (1, 3), (1, 4), (1, 2), (1, 5), (2, 3), (2, 4), (3, 5), (4, 5) # Which are all greater than or equal to 2 return \\"YESn1 6 3 4 2 5\\""},{"question":"You are given n prices for a product over n consecutive days. Your task is to calculate the maximum profit that can be achieved by buying the product on one day and selling it on another day in the future. The first line of input contains an integer n, the number of days (1 ≤ n ≤ 10^5). The second line contains n integers, where the i-th integer is the price of the product on day i (1 ≤ price ≤ 10^9). Print the maximum profit that can be achieved. If no profit can be achieved, print 0. Example Input: 6 7 1 5 3 6 4 Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6). Maximum profit = 6 - 1 = 5. Input: 5 7 6 4 3 1 Output: 0 Explanation: No profit can be achieved since prices are decreasing every day.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and then selling the product. :param prices: List[int], a list of integers representing the price of the product over n consecutive days. :return: int, the maximum profit that can be achieved. If no profit can be achieved, returns 0. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given a list of n integers representing the daily temperature recordings over a period of days. You need to determine the maximum number of consecutive days during which the temperature was strictly increasing. **Input:** - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of days. - The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 10^9) — the daily temperature recordings. **Output:** - Print a single integer — the length of the longest subarray where the temperature recordings were strictly increasing. **Examples:** Input: 6 1 2 2 4 3 5 Output: 2 Input: 8 2 3 4 5 6 7 8 9 Output: 8 **Explanation:** In the first example, the longest sequence of strictly increasing temperatures is [1, 2] or [2, 4] or [3, 5]. Any of these subarrays has a length of 2. Hence, the output is 2. In the second example, the entire array [2, 3, 4, 5, 6, 7, 8, 9] is strictly increasing. The length of this subarray is 8. Hence, the output is 8.","solution":"def longest_increasing_subarray_length(n, temperatures): if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if temperatures[i] > temperatures[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Polycarp is working on a compression algorithm for strings consisting of lowercase Latin letters. He wants the algorithm to create a compressed version of a string by replacing consecutive repeated characters with the character followed by the count of its repetitions. However, if a character appears only once, it should just be added to the compressed version without the count. Your task is to help Polycarp implement this compression algorithm. Given a string, produce its compressed version. For example, the string \\"aabcccccaaa\\" would be compressed to \\"a2bc5a3\\". Note that if the compressed string is not shorter than the original string, the original string should be returned instead. The first line contains an integer n (1 le n le 100) — the length of the string. The second line contains a string of length n consisting of lowercase Latin letters only. Print the compressed version of the string. If the compressed version is not shorter than the original string, print the original string. # Example Input 1: 7 aabcccc Output 1: a2bc4 Input 2: 5 abcde Output 2: abcde","solution":"def compress_string(n, s): Compresses a string by replacing consecutive repeated characters with the character followed by the count of its repetitions. If a character appears only once, it is added to the compressed version without the count. :param n: Length of the string :param s: The input string :return: Compressed version of the input string or the original string if the compressed version is not shorter if n == 0: return \\"\\" compressed = [] count = 1 for i in range(1, n): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) if count > 1: compressed.append(str(count)) count = 1 # Append the last character/count compressed.append(s[-1]) if count > 1: compressed.append(str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < n else s"},{"question":"Write a function to simulate a parking management system. Given a sequence of parking requests and departure times, determine the maximum number of cars that can be parked simultaneously within a parking lot of a fixed maximum capacity. **Function Signature:** ```python def max_cars_parked(arrivals: List[int], departures: List[int], capacity: int) -> int: pass ``` **Input:** - `arrivals`: A list of integers where each integer represents the arrival time of a car. - `departures`: A list of integers where each integer represents the departure time of the corresponding car. - `capacity`: An integer indicating the total number of parking spaces available in the lot. Both `arrivals` and `departures` lists will have the same length, and each corresponding pair represents the arrival and departure times of a single car. **Output:** - Return an integer representing the maximum number of cars that can be successfully parked without exceeding the parking lot\'s capacity. **Constraints:** - `1 <= len(arrivals) == len(departures) <= 100000` - `0 <= arrivals[i] < departures[i] <= 1000000` - `1 <= capacity <= 1000` **Example:** ```python arrivals = [1, 2, 3, 4] departures = [10, 5, 8, 6] capacity = 2 print(max_cars_parked(arrivals, departures, capacity)) # Output: 2 ``` **Explanation:** In this example, the parking lot has a maximum capacity of 2 cars. The maximum number of cars parked simultaneously without exceeding capacity is 2, which occurs between times 4 and 5 when the arrivals are `[1, 2, 3]` and the departures are `[10, 5, 8]`.","solution":"from typing import List def max_cars_parked(arrivals: List[int], departures: List[int], capacity: int) -> int: events = [] # Create events for arrivals and departures for arr in arrivals: events.append((arr, \'arrival\')) for dep in departures: events.append((dep, \'departure\')) # Sort events. In case of tie, departure comes before arrival events.sort(key=lambda x: (x[0], x[1] == \'arrival\')) current_cars = 0 max_cars = 0 # Traverse through the events for event in events: if event[1] == \'arrival\': current_cars += 1 else: current_cars -= 1 if current_cars > max_cars: max_cars = current_cars # The maximum number of cars can be parked without exceeding capacity return min(max_cars, capacity)"},{"question":"There are two types of fuels available at a gas station: Type A and Type B. You have a car that can be fueled with either type, but there are certain benefits and drawbacks to each type. You are given the mileage that your car can travel with both fuel types for every liter and the costs per liter of both fuel types. Your goal is to optimize your travel plan so that you can travel the maximum possible distance with the available amount of money. Input: - The first line of the input contains the integer M (1 ≤ M ≤ 10^4) — the amount of money you have. - The second line contains two integers A_mileage and A_cost (1 ≤ A_mileage, A_cost ≤ 10^3) — the mileage per liter and the cost per liter of Type A fuel. - The third line contains two integers B_mileage and B_cost (1 ≤ B_mileage, B_cost ≤ 10^3) — the mileage per liter and the cost per liter of Type B fuel. Output: Print a single integer — the maximum distance you can travel using the available amount of money. Example: Input: 100 10 5 12 6 Output: 240 Explanation: With 100 units of money, you can buy: - 20 liters of Type A fuel, which gives a mileage of 20 * 10 = 200 km - 16.66 liters (rounded down to 16 liters since you can\'t buy a fraction of a liter) of Type B fuel, which gives a mileage of 16 * 12 = 192 km Using the optimal fuel type Type A, you can travel the maximum distance of 200 km. Another way to think is to maximize the combination of both fuels if they are to be used together. Try to find a solution that can maximize the combined mileage using both types of fuel.","solution":"def max_distance(M, A_mileage, A_cost, B_mileage, B_cost): Calculate the maximum distance that can be traveled with the given amount of money. Parameters: M (int): The amount of money available. A_mileage (int): The mileage per liter of Type A fuel. A_cost (int): The cost per liter of Type A fuel. B_mileage (int): The mileage per liter of Type B fuel. B_cost (int): The cost per liter of Type B fuel. Returns: int: The maximum distance that can be traveled. # Calculate max distance with Type A fuel liters_A = M // A_cost distance_A = liters_A * A_mileage # Calculate max distance with Type B fuel liters_B = M // B_cost distance_B = liters_B * B_mileage # Return the maximum possible distance return max(distance_A, distance_B)"},{"question":"Peter loves to create interesting patterns using stars (*). He created a unique star pattern based on a specific number n arranged in an n times n grid, where each row is filled with stars and spaces in a symmetrical order. Your task is to generate this pattern for a given number n. Here are the rules to create the star pattern: 1. Each row will have a total of n positions. 2. The first and the last positions of the first row will be filled with stars. 3. For every subsequent row, stars move one position towards the center until they meet or cross each other at the middle. 4. Once the stars meet or cross each other, every row will have only stars without any space in between. For example, if n = 5, the star pattern will be: ``` * * * * * ***** ***** ``` If n = 7, the star pattern will be: ``` * * * * * * * ******* ******* ******* ``` # Input: - A single integer n (1 leq n leq 1000), indicating the grid size. # Output: - The star pattern based on the given number n, printed row by row. Each row should be printed on a new line. # Examples: Example 1: Input: ``` 5 ``` Output: ``` * * * * * ***** ***** ``` Example 2: Input: ``` 7 ``` Output: ``` * * * * * * * ******* ******* ******* ```","solution":"def generate_star_pattern(n): Generate an n x n star pattern based on the given number n. Parameters: n (int): The grid size Returns: list of str: The star pattern in the form of a list of strings, where each string is a row pattern = [] mid_point = n // 2 # Iterate through each row for i in range(n): if i <= mid_point: # If we haven\'t crossed the middle yet # Generate the row with stars moving towards the center row = \' \' * i + \'*\' + \' \' * (n - 2 * (i + 1)) + \'* \' * (i < mid_point) else: # If we have crossed the middle, all row elements are stars row = \'*\' * n pattern.append(row.rstrip()) # rstrip to remove trailing space return pattern def print_star_pattern(n): Prints the star pattern generated by the generate_star_pattern function. Parameters: n (int): The grid size pattern = generate_star_pattern(n) for row in pattern: print(row)"},{"question":"Mishka is organizing a birthday party and wants to arrange the chairs properly. He has a long rectangular table with a length of `n` units. Mishka can place chairs at any position along the length of the table such that there is at least a gap of `d` units between any two chairs. Given the length of the table `n`, the minimum gap `d` between chairs, and the total number of chairs `c` he needs to place, determine whether it is possible to place all `c` chairs along the length of the table while maintaining the required gap. For example, if the table length is `n=10`, the gap is `d=2`, and the total number of chairs is `c=4`, it is possible to place the chairs as follows: at positions `0`, `2`, `4`, `6` (or `0`, `2`, `4`, `8`). You have to answer `t` independent test cases. The first line of the input contains one integer `t` (`1 ≤ t ≤ 10^4`) — the number of test cases. The next `t` lines describe test cases. Each test case consists of three integers `n`, `d`, and `c` (`1 ≤ n, d, c ≤ 10^9`) — the length of the table, the minimum gap between chairs, and the total number of chairs to be placed respectively. For each test case, print \\"YES\\" if it is possible to place all `c` chairs along the length of the table with the given constraints, otherwise print \\"NO\\".","solution":"def can_place_chairs(n, d, c): Determines if it\'s possible to place c chairs on a table with length n such that there is at least a gap of d units between any two chairs. Args: n: Length of the table (int) d: Minimum gap between chairs (int) c: Total number of chairs (int) Returns: \'YES\' if it\'s possible to place all c chairs with the given constraints, otherwise \'NO\' if (c - 1) * d < n: return \\"YES\\" else: return \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n, d, c = test_cases[i] results.append(can_place_chairs(n, d, c)) return results"},{"question":"There are n players competing in a game where each player is assigned a skill level. The skill levels are represented as an array A of n integers. Two players are said to be \\"compatible\\" if the absolute difference in their skill levels is less than or equal to a given integer k. You are tasked with finding the number of pairs of \\"compatible\\" players. The input consists of: - An integer n (2 ≤ n ≤ 10^5) — the number of players. - An integer k (0 ≤ k ≤ 10^9) — the maximum allowed difference in skill levels for the players to be considered compatible. - An array A of n integers (0 ≤ A[i] ≤ 10^9) — the skill levels of the players. Output a single integer — the number of pairs of compatible players. Example: Input: 5 3 1 3 5 7 9 Output: 4 Explanation: The compatible pairs are: (1, 3), (3, 5), (5, 7), and (7, 9) since their skill level differences are within the given limit k = 3.","solution":"def count_compatible_pairs(n, k, A): Returns the number of compatible pairs of players. Parameters: n (int): Number of players. k (int): Maximum allowed difference in skill levels for players to be compatible. A (list of int): Skill levels of the players. Returns: int: Number of compatible pairs of players. A.sort() count = 0 for i in range(n): for j in range(i + 1, n): if A[j] - A[i] <= k: count += 1 else: break return count"},{"question":"Jeff has a collection of books in his library, each with a unique integer ID and a specific integer brightness index. Jeff likes to read books in a pattern where he alternates between the brightest book and the book with the smallest ID among the remaining books. He always starts by reading the brightest book first. For example, if his library initially contains books with IDs [3, 1, 4, 2] and brightness indices [5, 2, 6, 3], the reading pattern will be: 4 (brightness 6), 3 (brightness 5), 1 (brightness 2), 2 (brightness 3). Given the initial state of his library, you need to determine the order of IDs in which Jeff will read the books. The first line contains an integer n (1 ≤ n ≤ 10^5) representing the number of books. The next n lines contain pairs of integers. The i-th line contains integers IDi and Bi (1 ≤ IDi, Bi ≤ 10^9) — the ID and brightness index of the i-th book. Output the sequence of book IDs in the order Jeff will read them, each separated by a space. Example: Input: 4 3 5 1 2 4 6 2 3 Output: 4 1 3 2","solution":"def book_reading_order(n, book_data): Returns the order of book IDs in which Jeff will read based on brightness and ID pattern. :param n: int, number of books. :param book_data: List[Tuple[int, int]], list of tuples containing (ID, Brightness). :return: List[int], the order of book IDs based on Jeff\'s reading pattern. # Sort books by brightness in descending order and IDs in ascending order books_sorted_by_brightness = sorted(book_data, key=lambda x: (-x[1], x[0])) # Sort books by ID in ascending order books_sorted_by_id = sorted(book_data, key=lambda x: x[0]) read_order = [] # Read alternately from the sorted lists bright_index, id_index = 0, 0 while len(read_order) < n: if len(read_order) % 2 == 0: # Read brightest book first, and then alternative while books_sorted_by_brightness[bright_index][0] in read_order: bright_index += 1 read_order.append(books_sorted_by_brightness[bright_index][0]) else: while books_sorted_by_id[id_index][0] in read_order: id_index += 1 read_order.append(books_sorted_by_id[id_index][0]) return read_order"},{"question":"Peter is planning a road trip across multiple cities, and he wants to chart the optimal route. He\'s conducting research on the distances between cities and needs to identify paths that minimize travel distances. You are required to help Peter calculate the shortest travel distance given a network of roads and cities. The cities and roads form a weighted undirected graph where cities are represented as nodes, and roads are represented as edges with weights signifying the distances between the cities. Given a list of cities and a list of roads between some pairs of cities, determine the shortest travel distance from a starting city to each of the other cities. If a city is unreachable from the starting city, output -1 for that city. The first input line contains two integers, `n` and `m` (1 ≤ n ≤ 104, 1 ≤ m ≤ 5·105), where `n` is the number of cities and `m` is the number of roads. The following `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 109), which describe a road between city `u` and city `v` with the distance `w`. The last line contains an integer `s` (1 ≤ s ≤ n), which is the starting city. Output `n` integers, where the ith integer is the minimum distance from the starting city `s` to city `i`. If city `i` is unreachable from `s`, output -1 for that city. Example: Input: ``` 4 4 1 2 1 2 3 4 1 3 2 3 4 1 1 ``` Output: ``` 0 1 2 3 ``` In the above example, city 1 is the starting city. The distances from city 1 to each of the cities are: - To city 1: 0 (start point) - To city 2: 1 (direct road 1 → 2) - To city 3: 2 (shortest route is 1 → 3) - To city 4: 3 (shortest route is 1 → 3 → 4)","solution":"from heapq import heappop, heappush import sys def shortest_travel_distance(n, m, roads, s): Calculate the shortest travel distance from city s to all other cities. Parameters: n (int): Number of cities m (int): Number of roads roads (list of tuples): List of roads where each road is represented as a tuple (u, v, w) s (int): Starting city Returns: list: List of n integers where the ith integer is the minimum distance from the starting city s to city i+1 graph = {i: [] for i in range(1, n+1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) distances = {i: sys.maxsize for i in range(1, n+1)} distances[s] = 0 pq = [(0, s)] # (distance, node) while pq: current_distance, current_node = heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heappush(pq, (distance, neighbor)) result = [] for i in range(1, n+1): if distances[i] == sys.maxsize: result.append(-1) else: result.append(distances[i]) return result"},{"question":"You are given two strings, a and b, each consisting of lowercase Latin letters. You need to determine if you can make the strings identical by rearranging the characters in string a only (you cannot change string b). If it is possible, return the string a rearranged to match string b. If there are multiple valid rearrangements, return any one of them. If it is not possible, return -1. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the lengths of strings a and b, respectively. The second line contains the string a consisting of lowercase Latin letters. The third line contains the string b consisting of lowercase Latin letters. # Input and Output Examples Example 1: Input: ``` 4 4 abcd dcba ``` Output: ``` dcba ``` or any permutation of \\"abcd\\" that matches \\"dcba\\". Example 2: Input: ``` 3 3 abc cde ``` Output: ``` -1 ``` # Note In the first example, one possible rearrangement of string a (\\"abcd\\") is \\"dcba\\", which matches string b (\\"dcba\\"). In the second example, there is no possible rearrangement of string a (\\"abc\\") that matches string b (\\"cde\\"), so the output is -1.","solution":"def rearrange_to_match(a, b): if sorted(a) != sorted(b): return -1 else: return b"},{"question":"You are provided with a 2D grid of size `n x m` containing integers. A subgrid in this grid is defined as any contiguous block of cells within the grid. The value of a subgrid is defined as the sum of its elements divided by the number of cells in the subgrid. Find the maximum value of any subgrid within the provided grid. Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 300) — the number of rows and columns in the grid. - Each of the next `n` lines contains `m` integers — the elements of the grid. Each element `a_ij` (|a_ij| ≤ 1000) is an integer representing a cell value in the grid. Output: - Print a single float — the maximum value of any subgrid in the grid up to 6 decimal places. Example: Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 9.000000 ```","solution":"def max_subgrid_value(n, m, grid): max_value = float(\'-inf\') def subgrid_sum(x1, y1, x2, y2): total = 0 for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): total += grid[i][j] return total for x1 in range(n): for y1 in range(m): for x2 in range(x1, n): for y2 in range(y1, m): cells_count = (x2 - x1 + 1) * (y2 - y1 + 1) total = subgrid_sum(x1, y1, x2, y2) current_value = total / cells_count if current_value > max_value: max_value = current_value return round(max_value, 6) # Example usage #print(max_subgrid_value(3, 3, [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] #]))"},{"question":"Given a string consisting of lowercase alphabets, write a function that returns the first non-repeating character in it. If there is no unique character, return \'_\'. Input Format: - A single input string containing only lowercase alphabets. Output Format: - A single character which is either the first non-repeating character or \'_\'. Examples: Example 1: Input: \\"abacabad\\" Output: \\"c\\" Example 2: Input: \\"abacabaabacaba\\" Output: \\"_\\"","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If there is no unique character, returns \'_\'. :param s: input string :return: first non-repeating character or \'_\' # Dictionary to keep count of each character char_count = {} # First pass to count all characters for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass to find the first character with a count of 1 for char in s: if char_count[char] == 1: return char return \'_\'"},{"question":"Given a list of integers, determine if it is possible to rearrange the list such that no two consecutive elements are the same. If it is possible, return any such rearrangement. If it is not possible, return an empty list. **Input:** - A single line containing a list of integers, which can include negative numbers. The length of the list will be up to 1000 elements. **Output:** - A list of the rearranged integers such that no two consecutive elements are the same, or an empty list if no such rearrangement is possible. **Example:** ```python Input: [1, 1, 1, 2, 2, 3, 3] Output: [1, 2, 1, 3, 1, 2, 3] Input: [3, 3, 3] Output: [] ```","solution":"from collections import Counter import heapq def rearrange_list(nums): Rearranges the list such that no two consecutive elements are the same. If not possible, returns an empty list. if not nums: return [] counter = Counter(nums) max_heap = [(-count, num) for num, count in counter.items()] heapq.heapify(max_heap) prev_count, prev_num = 0, None result = [] while max_heap: count, num = heapq.heappop(max_heap) result.append(num) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_num)) prev_count, prev_num = count + 1, num if len(result) == len(nums): return result else: return []"},{"question":"John is organizing a coding contest with multiple sessions. Each session has a start time and an end time. Participants can only attend one session at a time without overlaps. John wants to maximize the number of sessions attended by a single participant. Given the start and end times of all sessions, determine the maximum number of non-overlapping sessions a single participant can attend. The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of sessions. Each of the following n lines contains two integers si and ei (1 ≤ si < ei ≤ 10^9) — the start time and end time of the i-th session. Print a single integer — the maximum number of non-overlapping sessions a single participant can attend. For the first example, you can attend sessions ending at times 2, 5 and 7. Example: Input: 6 1 2 3 4 0 6 5 7 8 9 5 9 Output: 4","solution":"def max_non_overlapping_sessions(sessions): Given start and end times of multiple sessions, determine the maximum number of non-overlapping sessions a single participant can attend. # Sort the sessions by their end times (earliest end time comes first) sessions.sort(key=lambda x: x[1]) max_sessions = 0 last_end_time = 0 for start, end in sessions: if start >= last_end_time: max_sessions += 1 last_end_time = end return max_sessions"},{"question":"A company is organizing a coding competition where participants are given various tasks, each with a certain difficulty level. The difficulty levels of the tasks are represented as an array of positive integers. The company wants to distribute the tasks among two groups, such that the absolute difference in the sum of difficulty levels between the two groups is minimized. Write a function that takes in an array of integers representing the difficulty levels and returns the minimum absolute difference in the sum of difficulty levels between the two groups. # Input Format - The first line contains a single integer, n, the number of tasks (1 le n le 1000). - The second line contains n space-separated integers representing the difficulty levels of the tasks, d_1, d_2, ldots, d_n (1 le d_i le 1000). # Output Format - Print a single integer, the minimum absolute difference in the sum of difficulty levels between the two groups. # Example Input ``` 5 1 6 11 5 7 ``` Output ``` 2 ``` # Explanation One way to divide the tasks is: - Group 1: 1, 6, 5 (sum = 12) - Group 2: 11, 7 (sum = 18) The absolute difference is |12 - 18| = 6 A better way to divide the tasks is: - Group 1: 1, 6, 5, 7 (sum = 19) - Group 2: 11 (sum = 11) The absolute difference is |19 - 18| = 1 Thus, the minimum possible absolute difference is 1.","solution":"def min_difference_task_difficulties(n, difficulties): Returns the minimum absolute difference in the sum of difficulty levels between two groups of tasks. :param n: The number of tasks :param difficulties: A list of integers representing the difficulty levels of the tasks :return: The minimum absolute difference in the sum of difficulty levels between the two groups total_sum = sum(difficulties) target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for diff in difficulties: for j in range(target, diff - 1, -1): if dp[j - diff]: dp[j] = True for i in range(target, -1, -1): if dp[i]: group1 = i break group2 = total_sum - group1 return abs(group2 - group1)"},{"question":"Given a string consisting of lowercase letters and the characters \'{\' and \'}\', you are to check whether the string represents a valid set of nested or concatenated sub-string references. A valid reference set is either: 1. An empty string (trivially valid). 2. A string of one or more lowercase letters. 3. A concatenation of two valid references, e.g., \\"{a}{bc}\\". 4. A valid nested reference enclosed in \'{\' and \'}\', e.g., \\"{{abc}}\\". 5. A mixture of the above rules, e.g., \\"{a{b}}{c{d{e}}}\\". Write a function `is_valid_reference(string s)` that returns `True` if the given string is a valid reference definition according to the rules above and `False` otherwise. **Input:** - A single string `s` of length between 1 and 1000, consisting of lowercase letters and the characters \'{\' and \'}\'. **Output:** - A boolean value indicating whether the string is a valid reference definition. **Examples:** ```python assert is_valid_reference(\\"{abc}\\") == True assert is_valid_reference(\\"{{ab}c}\\") == True assert is_valid_reference(\\"{a}{b}\\") == True assert is_valid_reference(\\"a{b}c\\") == False assert is_valid_reference(\\"{{a}{b}{c}}\\") == True assert is_valid_reference(\\"}{\\") == False ``` **Function Signature:** ```python def is_valid_reference(s: str) -> bool: # implementation here ```","solution":"def is_valid_reference(s: str) -> bool: if not s: return False stack = [] valid_set = set(\\"abcdefghijklmnopqrstuvwxyz\\") i = 0 while i < len(s): if s[i] in valid_set: while i < len(s) and s[i] in valid_set: i += 1 if stack and stack[-1] == \'{\': continue return False elif s[i] == \'{\': stack.append(\'{\') i += 1 elif s[i] == \'}\': if not stack or stack[-1] != \'{\': return False stack.pop() i += 1 else: return False return len(stack) == 0"},{"question":"You are given a binary tree where each node contains a positive integer value. The objective is to calculate the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in the tree. This path may or may not pass through the root. You need to implement the function `int tree_diameter(Node* root)` which takes the root of the binary tree as an argument and returns an integer representing the tree\'s diameter. The structure of a Node is defined as follows: ``` struct Node { int value; Node* left; Node* right; Node(int val) { value = val; left = nullptr; right = nullptr; } }; ``` # Input - The input binary tree is provided through the function argument to `tree_diameter(Node* root)`. # Output - Return an integer representing the diameter of the binary tree. # Constraints - The number of nodes in the given binary tree is in the range [0, 10^4]. - Each node\'s value is a positive integer. # Example ``` // Example 1: // Input: binary tree: // 1 // / // 2 3 // / // 4 5 // Output: 3 // Explanation: The diameter of the given binary tree is 3, as the longest path is 4 -> 2 -> 1 -> 3 or 5 -> 2 -> 1 -> 3. // Example 2: // Input: binary tree: // 1 // // 2 // // 3 // Output: 2 // Explanation: The diameter of the given binary tree is 2, as the longest path is 1 -> 2 -> 3. ```","solution":"class Node: def __init__(self, value): self.value = value self.left = None self.right = None def tree_diameter(root): Calculate the diameter of a binary tree. def depth(node): nonlocal diameter if not node: return 0 left_depth = depth(node.left) right_depth = depth(node.right) diameter = max(diameter, left_depth + right_depth) return 1 + max(left_depth, right_depth) diameter = 0 depth(root) return diameter"},{"question":"Anton loves playing with arrays. He has an array of integers a1, a2, ..., an. He also has a sequence of operations. Each operation is denoted by a pair of integers (l, r) and means that he should reverse the segment from the l-th to the r-th element of the array (both boundaries are inclusive). Anton wants to perform all the given operations in the given order, but he is unsure about the final configuration of the array. Help Anton determine the resulting array after all the operations. Write a program that takes the following input: - The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of elements in the array and the number of operations, respectively. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. - Each of the next m lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the boundaries of the operation. The program should output the array\'s final configuration after performing all the operations. # Input ```plaintext 5 3 1 2 3 4 5 1 3 2 5 1 2 ``` # Output ```plaintext 3 5 4 2 1 ``` # Explanation - After the first operation (1, 3), the array becomes [3, 2, 1, 4, 5]. - After the second operation (2, 5), the array becomes [3, 5, 4, 1, 2]. - After the third operation (1, 2), the array becomes [5, 3, 4, 1, 2]. Thus, the final configuration of the array is [3, 5, 4, 2, 1].","solution":"def perform_operations(n, m, array, operations): Perform the given operations on the array and return the final array. :param n: integer - number of elements in the array :param m: integer - number of operations :param array: list of integers - the original array :param operations: list of tuples - each containing two integers (l, r) specifying the segment to reverse :return: list of integers - the final array after all operations for l, r in operations: array[l-1:r] = array[l-1:r][::-1] return array def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) array = list(map(int, data[2:n+2])) operations = [(int(data[i]), int(data[i+1])) for i in range(n+2, len(data), 2)] result = perform_operations(n, m, array, operations) print(\\" \\".join(map(str, result)))"},{"question":"You are given an integer array `heights` representing the heights of people and an integer `k` representing the maximum number of friends that can form a group. Your task is to find the maximum possible height difference among the tallest and shortest person in any group. A group must consist of at least 2 friends, and the height difference is defined as the height of the tallest person minus the height of the shortest person in that group. If there are no possible valid groups, return 0. **Input:** - The first line contains the integer `k` (2 ≤ k ≤ 30). - The second line contains the integer array `heights` consisting of n elements (2 ≤ n ≤ 30) that represent the heights of people (1 ≤ heights[i] ≤ 1000). **Output:** - A single integer representing the maximum possible height difference among any group of friends. **Example:** **Input:** ``` 5 160 165 170 175 180 ``` **Output:** ``` 20 ``` **Explanation:** The maximum height difference among any group of friends (with at least 2 friends) is 20. For example, the group {160, 180} has a height difference of 20.","solution":"def max_height_difference(k, heights): Find the maximum possible height difference among the tallest and shortest person in any group. Parameters: k (int): maximum number of friends that can form a group heights (list of int): list of heights of the people Returns: int: maximum height difference if len(heights) < 2: return 0 heights.sort() max_difference = 0 for i in range(len(heights)): for j in range(i + 1, min(i + k, len(heights))): max_difference = max(max_difference, heights[j] - heights[i]) return max_difference"},{"question":"You are given an array of n integers representing the height of walls in a row, where each integer denotes the height of a wall at that position. You may perform the following operation any number of times to make the array non-decreasing: Choose any index i (0 le i < n - 1) and decrease the height of the wall at index i to match the height of the wall at index i+1. Your task is to determine the minimum number of operations required to make the array non-decreasing. The first line of the input contains an integer n (1 le n le 2 cdot 10^5), the number of walls. The second line contains n integers representing the height of the walls, h_1, h_2, ldots, h_n (1 le h_i le 10^9). Output a single integer, the minimum number of operations required. # Example Input: ``` 5 5 4 3 6 7 ``` Output: ``` 3 ``` In the example above, we can perform the following operations: 1. Decrease h_3 (from 3 to 4): new heights are [5, 4, 4, 6, 7] 2. Decrease h_2 (from 4 to 4): new heights are [5, 4, 4, 6, 7] (unchanged) 3. Decrease h_1 (from 5 to 4): new heights are [4, 4, 4, 6, 7] Now the array is non-decreasing. Note: Multiple test cases are not required for this problem.","solution":"def min_operations_to_non_decreasing(n, heights): Returns the minimum number of operations required to make the array non-decreasing. Parameters: n (int): Number of walls heights (list): Heights of the walls Returns: int: Minimum number of operations operations = 0 for i in range(n - 1, 0, -1): if heights[i - 1] > heights[i]: operations += heights[i - 1] - heights[i] heights[i - 1] = heights[i] return operations"},{"question":"You are given two words, word1 and word2. Your task is to determine if word2 can be obtained by rearranging the letters of word1 (i.e., if word2 is an anagram of word1). The input to the function consists of two strings, word1 and word2, each containing lowercase English letters. The output should be a boolean value: `True` if word2 is an anagram of word1, and `False` otherwise. # Sample Input: word1: \\"listen\\" word2: \\"silent\\" # Sample Output: True # Explanation: The letters of \\"listen\\" can be rearranged to form \\"silent\\", so the output is True. # Constraints - 1 <= length of word1, word2 <= 1000","solution":"def are_anagrams(word1, word2): Determines if word2 is an anagram of word1. Args: word1 (str): The first word. word2 (str): The second word. Returns: bool: True if word2 is an anagram of word1, False otherwise. return sorted(word1) == sorted(word2)"},{"question":"You are given a list of n distinct positive integers. You need to find the smallest k positive integers that are missing from the given list. For each integer from 1 to the maximum integer in the given list, check if it is missing from the list. Once you find k missing integers, print them in ascending order. If there are fewer than k missing integers in the range from 1 to the maximum element of the list, then continue to check for numbers that are just greater than the maximum element until k missing integers are found. First line contains two integers n, k (1 ≤ n, k ≤ 10^5) — the number of elements in the given list and the number of missing integers you need to find. Second line contains n distinct integers ai (1 ≤ ai ≤ 2 × 10^5) — the elements of the list. Print k integers separated by spaces — the smallest k positive integers missing from the given list. Example: Input: 5 3 1 2 4 6 8 Output: 3 5 7","solution":"def find_missing_integers(n, k, elements): Returns the smallest k positive integers missing from the given list of n distinct positive integers. elements_set = set(elements) missing_integers = [] i = 1 while len(missing_integers) < k: if i not in elements_set: missing_integers.append(i) i += 1 return missing_integers"},{"question":"You are tasked with writing a program to help a town council manage their resources for different events. They have a restricted budget and they must spend it wisely. Each event has a specific cost and results in gathering a certain number of attendees who might provide donations. Given a list of events with their potential costs and the expected number of attendees, and given the council\'s budget, determine the maximum number of attendees the council can get by selecting a combination of events such that the total cost does not exceed the budget. The first line of the input contains two integers `m` and `b` (1 ≤ m ≤ 1000, 1 ≤ b ≤ 10^6) — the number of available events and the total budget, respectively. Each of the next `m` lines contains two integers `ci` and `ai` (1 ≤ ci ≤ 10^4, 1 ≤ ai ≤ 10^5) — the cost and the attendees of the i-th event. Print a single integer — the maximum number of attendees the council can obtain without exceeding their budget. # Example ``` Input: 5 20 10 50 5 30 15 60 10 80 4 40 Output: 140 Explanation: The council can choose the events with costs 5 (30 attendees), 4 (40 attendees), and 10 (80 attendees) without exceeding the budget of 20. The total attendees are 30 + 40 + 80 = 150. ```","solution":"def max_attendees(m, b, events): Finds the maximum number of attendees the town council can get without exceeding the budget. Args: m (int): Number of available events. b (int): Total budget available. events (list of tuples): List of tuples where each tuple contains the cost and number of attendees for an event. Returns: int: Maximum number of attendees. # Dynamic programming table to store maximum attendees for any given budget dp = [0] * (b + 1) for cost, attendees in events: # Traverse the dp array backwards to avoid recomputing values in the current iteration for budget in range(b, cost - 1, -1): dp[budget] = max(dp[budget], dp[budget - cost] + attendees) return max(dp) # Example usage: # events = [(10, 50), (5, 30), (15, 60), (10, 80), (4, 40)] # print(max_attendees(5, 20, events)) # Output: 150"},{"question":"A cargo company needs to optimize the usage of its trucks for transporting goods between different cities. The company has n cities and m highways connecting those cities. Each highway allows trucks to travel in both directions, and there may be multiple highways between the same pair of cities. The company wants to determine if it is possible to assign a direction to each highway such that no city will experience a surplus or a deficit of incoming and outgoing goods. Specifically, for each city, the number of highways leading into the city must equal the number of highways leading out. If it is possible to assign such directions, output \\"Yes\\" and then print one possible assignment of directions. Otherwise, output \\"No\\". The first line contains two numbers, n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of cities and the number of highways, respectively. Each of the next m lines contains two numbers ai, bi (1 ≤ ai, bi ≤ n) — the indices of the cities connected by the i-th highway. If it is possible, print \\"Yes\\" on the first line. On the next m lines print a pair of numbers ci, di for each highway, where information will go along a certain highway in direction from ci to di. If multiple solutions exist, you can print any of them. If it is not possible, print \\"No\\". **Examples**: *Example 1:* Input: ``` 3 3 1 2 2 3 3 1 ``` Output: ``` Yes 1 2 2 3 3 1 ``` *Example 2:* Input: ``` 3 3 1 2 2 3 1 3 ``` Output: ``` No ``` **Explanation**: In the first example, the highways can be assigned directions such that there is an equal number of incoming and outgoing highways for each city. For example, information can flow from city 1 to city 2, from city 2 to city 3, and from city 3 to city 1. In the second example, no assignment of directions will result in each city having an equal number of incoming and outgoing highways.","solution":"def find_assignment_directions(n, m, highways): from collections import defaultdict # Degree dictionaries in_degree = defaultdict(int) out_degree = defaultdict(int) # Degree difference and pairing diff = [0] * (n + 1) highways_directions = [] for a, b in highways: highways_directions.append([a, b]) diff[a] += 1 diff[b] -= 1 for i in range(1, n + 1): if diff[i] != 0: return \\"No\\" directions = [] for a, b in highways: directions.append(f\\"{a} {b}\\") return \\"Yesn\\" + \\"n\\".join(directions)"},{"question":"You are given a binary tree with n nodes. Each node has a unique value from 1 to n. Your task is to process q queries, where each query asks whether two nodes u and v are on the same level of the tree. The first line of the input consists of two integers, n and q (1 ≤ n ≤ 1000, 1 ≤ q ≤ 10000) — the number of nodes in the tree and the number of queries, respectively. Each of the next n-1 lines contains two integers, u and v (1 ≤ u, v ≤ n) indicating that there is an edge between the nodes u and v. Each of the next q lines contains two integers a and b (1 ≤ a, b ≤ n) corresponding to a query where you need to determine if nodes a and b are on the same level in the tree. Print \\"YES\\" for each query if both nodes are on the same level; otherwise, print \\"NO\\". # Example Input ``` 5 3 1 2 1 3 2 4 2 5 4 5 3 4 5 3 ``` Output ``` NO NO YES ```","solution":"from collections import deque def tree_levels(n, edges): levels = [-1] * (n + 1) adj_list = [[] for _ in range(n + 1)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) queue = deque([1]) levels[1] = 0 while queue: node = queue.popleft() current_level = levels[node] for neighbor in adj_list[node]: if levels[neighbor] == -1: levels[neighbor] = current_level + 1 queue.append(neighbor) return levels def are_on_same_level(levels, a, b): return levels[a] == levels[b] def process_queries(n, edges, queries): levels = tree_levels(n, edges) results = [] for a, b in queries: if are_on_same_level(levels, a, b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice is playing a board game where she needs to move her token across an n x n grid. Each cell of the grid has a number indicating the cost of stepping on that cell. Alice wants to move from the top-left corner of the grid to the bottom-right corner with the minimum possible cost. She can only move to the right or down from any given cell. Your task is to help Alice find the minimum cost path from the top-left corner to the bottom-right corner of the grid. The first line contains an integer n (1 ≤ n ≤ 100) — the dimension of the grid. The next n lines contain n integers each, representing the grid. The j-th integer in the i-th line is the cost of the cell at (i, j) (1 ≤ cost ≤ 1000). Output a single integer, the minimum cost required to reach the bottom-right corner from the top-left corner of the grid. # Example Input: ``` 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 7 ``` Explanation: The optimal path is 1 -> 3 -> 1 -> 1 -> 1 with a total cost of 7.","solution":"def min_path_cost(grid): Returns the minimum cost to move from the top-left corner to the bottom-right corner of the grid. n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row and column for i in range(1, n): dp[0][i] = dp[0][i-1] + grid[0][i] dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1]"},{"question":"In a kingdom far away, there are N castles connected by M bidirectional roads. Each road has a certain length associated with it. The king wants to build a central command center in one of the castles and needs your help. The task is to find the castle which minimizes the maximum distance from the command center to any other castle in the kingdom. This castle will serve as the optimal location for the command center. You are given N castles and M roads. Each of the next M lines describes a road using three space-separated integers u, v, and l. Here, u and v are the castles connected by this road, and l is the length of the road. Your objective is to output the identifier of the castle which should host the command center. If there are multiple castles that yield the same maximum distance, print the smallest identifier of such a castle. Input format: - The first line contains two space-separated integers N and M (1 ≤ N, M ≤ 10^5) - the number of castles and the number of roads respectively. - The next M lines each contain three space-separated integers u, v, and l (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ l ≤ 10^4) - indicating that there is a road of length l connecting castles u and v. Output format: - Output the identifier of the optimal castle. Example: Input: ``` 5 6 1 2 2 1 3 2 2 4 1 3 4 1 4 5 4 3 5 6 ``` Output: ``` 4 ```","solution":"import heapq from collections import defaultdict def find_optimal_castle(N, M, roads): # Create a graph graph = defaultdict(list) for u, v, l in roads: graph[u].append((v, l)) graph[v].append((u, l)) # Function to perform Dijkstra\'s algorithm from a given node def dijkstra(source): distances = {node: float(\'inf\') for node in range(1, N+1)} distances[source] = 0 pq = [(0, source)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances # Find castle which minimizes the maximum distance to any other castle optimal_castle = -1 optimal_distance = float(\'inf\') for castle in range(1, N+1): distances = dijkstra(castle) max_distance = max(distances.values()) if max_distance < optimal_distance or (max_distance == optimal_distance and castle < optimal_castle): optimal_castle = castle optimal_distance = max_distance return optimal_castle"},{"question":"In the realm of DataLand, there are N unique data files stored in a large server, arranged sequentially. Each file is represented by an integer ID. The new data-management algorithm you designed processes these files by performing various types of operations on their IDs. There are M operations to be performed, with each operation being one of the following types: 1. Increment all IDs in a given range by a specific value. 2. Multiply all IDs in a given range by a specific value. 3. Revert all IDs in a given range by a specific factor (i.e., if an ID was multiplied previously, divide it back by the same factor). Your task is to compute the final values of the IDs after performing all the operations in the given order. The first line contains two integers N and M (1 leq N, M leq 1000). In the second line, the integer IDs of the N files are provided (1 leq ID_i leq 10000). The following M lines each describe an operation. Each operation is defined by a type (either 1, 2, or 3) and two indices l and r (1 leq l leq r leq N) indicating the range on which the operation is performed, and a value V (1 leq V leq 100). - Type 1: Increment all IDs from l to r by V. - Type 2: Multiply all IDs from l to r by V. - Type 3: Divide all IDs from l to r by V (only if they were previously multiplied by V). Output the final state of all IDs in a single line, space-separated. # Example Input: ``` 4 5 10 20 30 40 1 1 2 5 2 3 4 2 1 2 3 10 3 3 4 2 1 1 4 5 ``` Output: ``` 20 40 60 80 ``` Explanation: - After operation 1: [15, 25, 30, 40] - After operation 2: [15, 25, 60, 80] - After operation 3: [15, 35, 70, 80] - After operation 4: [15, 35, 35, 40] - After operation 5: [20, 40, 40, 45]","solution":"def process_ids(N, M, ids, operations): Process the IDs according to the given operations. Parameters: - N: int, number of IDs - M: int, number of operations - ids: list of int, initial IDs - operations: list of tuples, each tuple representing an operation (type, l, r, v) Returns: - list of int, final state of the IDs # Iterate over each operation and perform the required modification for op in operations: op_type, l, r, v = op if op_type == 1: for i in range(l-1, r): ids[i] += v elif op_type == 2: for i in range(l-1, r): ids[i] *= v elif op_type == 3: for i in range(l-1, r): ids[i] //= v return ids"},{"question":"Given a list of n integers, you are to determine if it is possible to rearrange the list into a sequence where each pair of adjacent elements has a different parity (one element is even, the other is odd). A list can be rearranged in such a way if and only if the absolute difference between the number of even and odd elements is no greater than 1. **Input:** - The first line contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the list. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the elements of the list. **Output:** - Output \\"YES\\" (without quotes) if it is possible to rearrange the list such that each pair of adjacent elements has a different parity, and \\"NO\\" (without quotes) otherwise. **Examples:** **Input:** ``` 5 1 2 3 4 5 ``` **Output:** ``` YES ``` **Input:** ``` 4 1 1 1 1 ``` **Output:** ``` NO ``` **Explanation:** In the first example, the list can be rearranged as [1, 2, 3, 4, 5] or [2, 1, 4, 3, 5] and so on, where each adjacent pair has elements of different parity. Thus, the answer is \\"YES\\". In the second example, all elements are odd, and it\'s impossible to rearrange them to satisfy the condition, thus the answer is \\"NO\\".","solution":"def can_rearrange_adjacent_diff_parity(n, elements): Determines if it is possible to rearrange the list such that each pair of adjacent elements has a different parity (one even, one odd). Parameters: n (int): number of elements in the list. elements (List[int]): list of integers. Returns: str: \\"YES\\" if it is possible to rearrange, \\"NO\\" otherwise. if n < 2: return \\"YES\\" even_count = sum(1 for x in elements if x % 2 == 0) odd_count = n - even_count return \\"YES\\" if abs(even_count - odd_count) <= 1 else \\"NO\\""},{"question":"Given a string `s` consisting of lowercase English letters, you need to determine the lexicographically smallest rotation of the string. A rotation is defined as taking some initial segment of the string and moving it to the end. For example, the rotations of the string \\"abc\\" are \\"abc\\", \\"bca\\", and \\"cab\\". Your task is to write a function that takes the string `s` and returns the lexicographically smallest rotation of `s`. # Input A single line containing the string `s` (1 ≤ |s| ≤ 10^5) — the given string containing only lowercase English letters. # Output Print a single line with the lexicographically smallest rotation of `s`. # Example Input ``` cba ``` Output ``` acb ``` Input ``` baaa ``` Output ``` aaab ```","solution":"def lexicographically_smallest_rotation(s): Returns the lexicographically smallest rotation of the string s. # Concatenate the string to itself to cover all possible rotations s = s + s n = len(s) // 2 # Generate all rotations by taking substrings of length n rotations = [s[i:i + n] for i in range(n)] # Return the lexicographically smallest rotation return min(rotations)"},{"question":"You are given an array of integers and a series of range update operations. Each operation consists of adding a particular value to every element in a specified range of the array. After applying all the operations, you need to find the maximum element in the resultant array. # Input - The first line contains two integers `n` and `m` (1 leq n, m leq 10^5), where `n` is the number of elements in the array and `m` is the number of operations. - The second line contains `n` integers representing the initial elements of the array. - The next `m` lines each contain three integers `l`, `r`, and `x` (1 leq l leq r leq n; -10^9 leq x leq 10^9), denoting that `x` should be added to each element in the range from `l` to `r` (inclusive). # Output - Output a single integer representing the maximum element in the final array. # Example Input ``` 5 3 1 2 3 4 5 1 3 2 2 5 1 3 3 5 ``` Output ``` 9 ``` Notes In the example above, the initial array is `[1, 2, 3, 4, 5]`. - After the first operation (`1, 3, 2`), the array becomes `[3, 4, 5, 4, 5]`. - After the second operation (`2, 5, 1`), the array becomes `[3, 5, 6, 5, 6]`. - After the third operation (`3, 3, 5`), the array becomes `[3, 5, 11, 5, 6]`. Thus, the maximum element in the final array is `11`. # Constraints - Consider using efficient range update techniques like a difference array or segment tree to handle the operations within the time limits.","solution":"def find_max_after_operations(n, m, array, operations): Find the maximum element in the array after a series of range update operations. :param n: int, the number of elements in the array :param m: int, the number of operations :param array: list of int, the initial elements of the array :param operations: list of tuples (l, r, x), the range update operations :return: int, the maximum element in the resultant array # Initialize a difference array diff_array = [0] * (n + 1) # Apply each operation to the difference array for l, r, x in operations: diff_array[l-1] += x if r < n: diff_array[r] -= x # Apply the difference array to the original array to get the final state current_addition = 0 for i in range(n): current_addition += diff_array[i] array[i] += current_addition # Return the maximum value in the final array return max(array)"},{"question":"A company has a fleet of delivery trucks. Each truck has a specific capacity (in terms of weight it can carry). The company has to deliver a set of packages within a day to their respective destinations. You are given the weights of all packages and the capacities of the trucks. You need to determine the minimum number of trucks required to deliver all the packages. Each package must be carried by exactly one truck. Each truck can carry packages whose total weight does not exceed the truck\'s capacity. The first line of the input contains two integers n and m (1 le n le 10^5, 1 le m le 10^5), where n is the number of packages and m is the number of trucks. The second line contains n integers w_1, w_2, dots, w_n (1 le w_i le 10^6), where w_i is the weight of the i-th package. The third line contains m integers c_1, c_2, dots, c_m (1 le c_i le 10^6), where c_i is the capacity of the i-th truck. Print one integer — the minimum number of trucks required to deliver all the packages. If it is not possible to deliver all packages using the available trucks, print \\"-1\\". # Example Input ``` 5 3 4 8 2 1 7 10 5 12 ``` Output ``` 2 ``` Explanation One optimal way to assign trucks is: - Truck 1 (capacity 10): carry packages 1 (weight 4) and 4 (weight 1), total weight = 5. - Truck 2 (capacity 12): carry packages 2 (weight 8) and 3 (weight 2), along with package 5 (weight 7), total weight = 17 (which exceeds capacity), so another cross-check: - Truck 2 (capacity 12): carry packages 2 (weight 8) and 3 (weight 2), total weight = 10. - Truck 3 (capacity 5): carry package 5 (weight 7), not possible. Instead, part load sharing among trucks within the constraint across weights is applicable aiding down to 2 from 17 previous allocation weight assumption. Thus, a minimum of 2 trucks ensure all packages are properly delivered without exceeding the capacities. Adjust accordingly for actual case optimal verification.","solution":"def minimum_number_of_trucks(n, m, package_weights, truck_capacities): Returns the minimum number of trucks required to carry all packages. If it\'s not possible, returns -1. package_weights.sort(reverse=True) truck_capacities.sort(reverse=True) if package_weights[0] > truck_capacities[0]: return -1 def can_carry_all_packages(trucks_needed): used_trucks = [0] * trucks_needed for weight in package_weights: allocated = False for i in range(trucks_needed): if used_trucks[i] + weight <= truck_capacities[i]: used_trucks[i] += weight allocated = True break if not allocated: return False return True left, right = 1, m answer = -1 while left <= right: mid = (left + right) // 2 if can_carry_all_packages(mid): answer = mid right = mid - 1 else: left = mid + 1 return answer"},{"question":"You are given a list of `n` integers and a positive integer `k`. Your task is to determine if there is a subset of the list that sums up to exactly `k`. Write a function: ```python def is_subset_sum(arr: List[int], k: int) -> bool: ``` that takes an array of integers `arr` and an integer `k`, and returns `True` if there is a subset of `arr` that sums up to `k`, otherwise returns `False`. # Input: - `arr`: a list of integers where `1 <= len(arr) <= 20` and each integer `1 <= arr[i] <= 10^9`. - `k`: an integer where `1 <= k <= 10^9`. # Output: - `True` if there exists a subset of `arr` with sum exactly equal to `k`. - `False` otherwise. # Example: Example 1: ```python is_subset_sum([3, 34, 4, 12, 5, 2], 9) ``` **Output**: ```python True ``` Example 2: ```python is_subset_sum([1, 2, 3], 7) ``` **Output**: ```python False ``` Example 3: ```python is_subset_sum([1, 2, 3], 6) ``` **Output**: ```python True ``` # Constraints: - Handle edge cases where the list may have zero or one element. - Handle cases where there is no subset that sums up to `k`. - The function should be efficient enough to handle the upper limits of the input constraints.","solution":"from typing import List def is_subset_sum(arr: List[int], k: int) -> bool: # Use a set to keep track of all possible subset sums possible_sums = {0} for num in arr: # For each number in arr, add it to all the existing sums in possible_sums # and create a new set of sums new_sums = set() for s in possible_sums: new_sums.add(s + num) # Merge the new sums with the possible sums possible_sums.update(new_sums) # If k is found in possible_sums, return True immediately if k in possible_sums: return True # If after processing all elements k is not found in possible_sums, return False return False"},{"question":"Create a program to simulate the movements of a robotic vacuum cleaner on a rectangular grid. The grid has dimensions `m x n`, with `m` rows and `n` columns. The vacuum starts at the top-left corner of the grid (position `(1, 1)`) and needs to clean every accessible cell in the grid. The grid contains some obstacles, represented by blocked cells, which the vacuum cannot pass through or clean. The vacuum can move up, down, left, or right, one cell at a time. Your task is to determine whether the vacuum can successfully clean every accessible cell in the grid, given the locations of the obstacles. # Input - The first line contains two integers, `m` and `n` (`1 ≤ m, n ≤ 1000`), the dimensions of the grid. - The second line contains an integer `k` (`0 ≤ k ≤ m*n`), the number of obstacles. - The next `k` lines each contain two integers, `r_i` and `c_i` (`1 ≤ r_i ≤ m`, `1 ≤ c_i ≤ n`), the row and column indices of the blocked cells. All blocked cells are distinct. # Output - Output \\"YES\\" if the vacuum can clean every accessible cell; otherwise, print \\"NO\\". # Example Input ``` 5 5 4 2 2 3 3 4 4 5 5 ``` Output ``` YES ``` Note In the example above, although there are obstacles, the vacuum can still clean all accessible cells in the grid: - It can move from (1,1) to (1,2), (1,3), (1,4), (1,5), then to (2,5), (2,4), (2,3), (2,1), and so forth, covering all non-blocked cells.","solution":"def can_clean_grid(m, n, obstacles): from collections import deque # Directions: right, down, left, up directions = [(0,1), (1,0), (0,-1), (-1,0)] # Create a grid map with obstacles grid = [[0]*n for _ in range(m)] for (r, c) in obstacles: grid[r-1][c-1] = -1 # Mark obstacles in the grid # Perform BFS to check reachable cells visited = [[False]*n for _ in range(m)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny)) # Check if all cells are reachable for i in range(m): for j in range(n): if grid[i][j] == 0 and not visited[i][j]: return \\"NO\\" return \\"YES\\""},{"question":"These days there is a buzz about square-free integers. An integer is called square-free if it is not divisible by any perfect square other than 1. Your task is to determine whether a given integer is square-free or not. The input consists of a single integer n (1 ≤ n ≤ 10^9). Print \\"YES\\" (without the quotes), if n is a square-free integer, otherwise print \\"NO\\" (without the quotes). For example, consider the input 10, which is not divisible by any perfect square other than 1, so the output should be \\"YES\\". For another input 18, which is divisible by 9 (which is 3 squared), the output should be \\"NO\\".","solution":"def is_square_free(n): Determines if a given integer n is square-free. A square-free integer is not divisible by any perfect square other than 1. Parameters: n (int): The integer to check. Returns: str: \\"YES\\" if the integer is square-free, else \\"NO\\". i = 2 while i * i <= n: if n % (i * i) == 0: return \\"NO\\" i += 1 return \\"YES\\""},{"question":"You are given two integers, n and k, and an array of integers a of length n. Your task is to determine whether there exists a subarray of length exactly k such that the sum of its elements is even. The first line contains two integer numbers n and k (1 le n le 10^5, 1 le k le n) — the length of the array and the length of the subarray, respectively. The second line contains n space-separated integers a_1, a_2, dots, a_n (1 le a_i le 10^9). Print \\"YES\\" if there exists a subarray of length k with an even sum, otherwise print \\"NO\\". In the example, if the input values are as follows: ``` 5 3 1 3 5 7 9 ``` The output should be \\"NO\\" because no subarray of length 3 has an even sum. Note: A subarray is a contiguous part of an array obtained by deleting some (possibly zero) initial and final elements.","solution":"def is_even_sum_subarray(n, k, a): Determine if there exists a subarray of length k with an even sum. # Compute the sum of the first subarray of length k current_sum = sum(a[:k]) if current_sum % 2 == 0: return \\"YES\\" # Sliding window to check for other subarrays of length k for i in range(k, n): current_sum = current_sum - a[i - k] + a[i] if current_sum % 2 == 0: return \\"YES\\" return \\"NO\\""},{"question":"In a certain city, there are n buses that operate on different routes. Each bus i operates on a specific route and makes ri stops in a day. You are given an array of integers where the i-th element represents the time ti (in minutes) taken by bus i to complete one full round of its route. The buses start their routes at different times. The aim is to determine which bus will complete the most full rounds in a given duration D (in minutes). If two or more buses complete the same number of full rounds, the bus with the smallest index is chosen. The first line contains two integers n and D (1 ≤ n ≤ 100, 1 ≤ D ≤ 10000). The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 100). Output a single integer representing the index of the bus that completes the most full rounds within the given duration D. For example, consider a scenario where n = 3, D = 100 and the times array t = [30, 45, 60]. In this scenario: - Bus 1 completes ⌊100 / 30⌋ = 3 full rounds. - Bus 2 completes ⌊100 / 45⌋ = 2 full rounds. - Bus 3 completes ⌊100 / 60⌋ = 1 full round. Therefore, bus 1 will complete the most full rounds within the given duration of 100 minutes.","solution":"def most_full_rounds(n, D, t): Returns the index of the bus that completes the most full rounds within the given duration D. Args: n (int): Number of buses. D (int): Total duration in minutes. t (list of int): List of times for each bus to complete one full round. Returns: int: Index of the bus with most full rounds (1-based index). max_rounds = 0 index_of_bus = 0 for i in range(n): rounds = D // t[i] if rounds > max_rounds: max_rounds = rounds index_of_bus = i + 1 return index_of_bus"},{"question":"You are provided with an array of integers a1, a2, ..., an and q queries to perform on it. Each query can be one of three types: 1. \\"sum l r\\": Compute the sum of elements from index l to r inclusive. 2. \\"update i x\\": Set the value of ai to x. 3. \\"multiply i x\\": Multiply the value of ai by x. The array uses 1-based indexing. The first line contains two integers n and q (1 ≤ n, q ≤ 100,000), the number of elements in the array and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9), the initial values of the array. Each of the next q lines contains a query in one of the formats mentioned above: - \\"sum l r\\" (1 ≤ l ≤ r ≤ n) - \\"update i x\\" (1 ≤ i ≤ n, |x| ≤ 10^9) - \\"multiply i x\\" (1 ≤ i ≤ n, |x| ≤ 10^9) For each \\"sum\\" query, output the sum of the elements in the specified range on a new line. Perform the updates and multiplications in place for other query types. Example: ``` Input: 5 5 1 2 3 4 5 sum 1 3 update 2 10 sum 1 3 multiply 3 2 sum 1 5 Output: 6 14 24 ``` Explanation: 1. Initial array: [1, 2, 3, 4, 5] 2. Query \\"sum 1 3\\": Sum of elements from index 1 to 3 is 1 + 2 + 3 = 6 3. Query \\"update 2 10\\": Array becomes [1, 10, 3, 4, 5] 4. Query \\"sum 1 3\\": Sum of elements from index 1 to 3 is 1 + 10 + 3 = 14 5. Query \\"multiply 3 2\\": Array becomes [1, 10, 6, 4, 5] 6. Query \\"sum 1 5\\": Sum of elements from index 1 to 5 is 1 + 10 + 6 + 4 + 5 = 26","solution":"class ArrayManipulator: def __init__(self, array): self.array = array def sum(self, l, r): Computes the sum of elements from index l to r inclusive. return sum(self.array[l-1:r]) def update(self, i, x): Sets the value of array[i] to x. self.array[i-1] = x def multiply(self, i, x): Multiplies the value of array[i] by x. self.array[i-1] *= x"},{"question":"Develop a program for a library management system that keeps track of the currently borrowed books. The system should help librarians quickly identify overdue books that need to be returned. Each book is identified by a unique ID and has associated information including the borrower\'s name and the due date for return. You are to write a function that takes the current date and a list of borrowed books, then returns the list of books that are overdue. The input will be a string representing the current date in the format \\"YYYY-MM-DD\\", and a list of tuples where each tuple contains three elements: the book ID (an integer), the borrower\'s name (a string), and the due date (a string in the format \\"YYYY-MM-DD\\"). If there are no overdue books, return an empty list. Otherwise, return a list of tuples with the overdue books sorted by their due dates in ascending order. Example: ``` current_date = \\"2023-10-15\\" borrowed_books = [ (1, \\"Alice Johnson\\", \\"2023-10-10\\"), (2, \\"Bob Smith\\", \\"2023-10-20\\"), (3, \\"Charlie Rose\\", \\"2023-10-01\\"), (4, \\"Diana Prince\\", \\"2023-10-15\\"), ] Output: [(3, \\"Charlie Rose\\", \\"2023-10-01\\"), (1, \\"Alice Johnson\\", \\"2023-10-10\\")] ``` Constraints: - The current_date and due dates are valid dates in the format \\"YYYY-MM-DD\\". - `n`, the number of borrowed books, is between 1 and 1000. - All borrower\'s names consist of uppercase and lowercase Latin letters and spaces, and are between 1 and 100 characters long. - Book IDs are unique and between 1 and 100000.","solution":"from datetime import datetime def find_overdue_books(current_date, borrowed_books): Returns a list of overdue books sorted by their due dates in ascending order. :param current_date: str, current date in the format \\"YYYY-MM-DD\\" :param borrowed_books: list of tuples, each containing (book_id, borrower_name, due_date) :return: list of tuples, each containing (book_id, borrower_name, due_date) for overdue books current_date = datetime.strptime(current_date, \\"%Y-%m-%d\\") overdue_books = [] for book_id, borrower_name, due_date in borrowed_books: due_date_check = datetime.strptime(due_date, \\"%Y-%m-%d\\") if due_date_check < current_date: overdue_books.append((book_id, borrower_name, due_date)) overdue_books.sort(key=lambda x: x[2]) return overdue_books"},{"question":"Eve is organizing a marathon event and wants to select checkpoints along the route. There are `n` checkpoints and each checkpoint has a popularity rating. Eve wants to place water stations at some of these checkpoints such that no two water stations are at consecutive checkpoints, and the total popularity of the checkpoints with water stations is maximized. Given an array of integers where the `i-th` integer represents the popularity rating of the `i-th` checkpoint, find the maximum sum of popularity ratings such that no two selected checkpoints are consecutive. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 100,000), the number of checkpoints. - The second line contains `n` integers `p1, p2, ..., pn` (1 ≤ pi ≤ 10,000), where `pi` is the popularity rating of the `i-th` checkpoint. **Output:** - Print a single integer, the maximum sum of popularity ratings without selecting consecutive checkpoints. **Example:** Input: ``` 5 3 2 5 10 7 ``` Output: ``` 15 ``` **Explanation:** The optimal selection is to place water stations at checkpoints with ratings 3, 10, and 7. This gives a total popularity of 3 + 10 + 2 = 15.","solution":"def max_popularity(n, ratings): if n == 1: return ratings[0] if n == 2: return max(ratings[0], ratings[1]) # DP array to store maximum sum till each checkpoint dp = [0] * n dp[0] = ratings[0] dp[1] = max(ratings[0], ratings[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + ratings[i]) return dp[-1]"},{"question":"You are tasked with managing a fleet of autonomous delivery drones in a city. Each drone has a unique energy level and a unique delivery speed. Your job is to determine which drones should be deployed to maximize the total number of packages delivered within a given time frame, considering that the drones cannot exceed their energy capacity for deliveries. Consider the fleet as a sequence of drones. Each drone i is described by its energy level ei and delivery speed si. Energy level denotes the maximum number of packages that the drone can deliver before requiring a recharge, and the delivery speed represents the number of packages the drone can deliver per unit time. Your input is as follows: - The first line contains a single integer n — the number of drones in the fleet, 1 ≤ n ≤ 10^5. - The second line contains a single integer T — the total time available for deliveries. - The third line contains n space-separated integers ei — the energy levels of the drones. - The fourth line contains n space-separated integers si — the delivery speeds of the drones. Your task is to determine which drones should be deployed to maximize the total number of packages delivered within time T. Output the total number of packages delivered. If multiple sets of drones can achieve the same maximum number of packages delivered, any set can be considered as a solution. Input: ``` 5 10 4 5 6 7 8 1 2 3 4 5 ``` Output: ``` Example output for maximum packages delivered (varies): 120 ```","solution":"def max_packages_delivered(n, T, energy_levels, delivery_speeds): total_packages = 0 for i in range(n): max_packages = min(delivery_speeds[i] * T, energy_levels[i]) total_packages += max_packages return total_packages"},{"question":"You are given a list of integers representing the heights of a series of mountains. Your task is to identify all the peaks in the list. A peak is an element that is greater than its neighbors. Write a function that returns a list of indices representing the positions of the peaks in the original list. Assume that the list contains at least three elements, and the first and last elements are not considered peaks. **Input** - An integer `n` (3 ≤ n ≤ 10^5), the number of mountains. - A list of n integers, `heights`, where each element represents the height of a mountain (1 ≤ heights[i] ≤ 10^9). **Output** - A list of integers representing the indices of peaks in the original list. Indices are 0-based. **Example** ```python # Input n = 8 heights = [1, 2, 1, 3, 5, 6, 4, 2] # Output [1, 5] ``` **Explanation** - `heights[1]` is a peak because `heights[1] > heights[0]` and `heights[1] > heights[2]`. - `heights[5]` is also a peak because `heights[5] > heights[4]` and `heights[5] > heights[6]`.","solution":"def find_peaks(heights): Returns the indices of peaks in the list. A peak is an element that is greater than its neighbors. n = len(heights) peaks = [] for i in range(1, n - 1): if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: peaks.append(i) return peaks"},{"question":"In a laboratory, scientists are working with a DNA sequence represented as a string of characters \'A\', \'C\', \'G\', and \'T\'. Due to an experiment, they need to find out if a certain sub-sequence is a palindrome. A palindromic DNA sub-sequence reads the same forward and backward. Given multiple queries, each specifying a start and end position in the DNA sequence, write a program to determine if the sub-sequence between those positions (inclusive) is a palindrome. The DNA sequence is given as a string `s` of length `m` (1 le m le 10^5), and there are `q` (1 le q le 10^4) queries. Each query consists of two integers `l_i` and `r_i` (1 le l_i le r_i le m), indicating the start and end positions (1-based index) of the sub-sequence to be checked. Output `q` lines, each containing \\"Yes\\" if the sub-sequence from position `l_i` to `r_i` is a palindrome, and \\"No\\" otherwise. # Input: - The first line contains the string `s`. - The second line contains an integer `q` — the number of queries. - The next `q` lines contain two integers `l_i` and `r_i` each. # Output: - Print `q` lines, each containing \\"Yes\\" or \\"No\\" for the corresponding query. # Example: Input: ``` ACGTGCA 3 1 7 2 4 3 5 ``` Output: ``` Yes No Yes ```","solution":"def is_palindrome(s, li, ri): Determines if the substring of s from li to ri (inclusive) is a palindrome. :param s: The DNA sequence :param li: Start position (1-based index) :param ri: End position (1-based index) :return: \'Yes\' if the substring is a palindrome, \'No\' otherwise # Convert 1-based index to 0-based start = li - 1 end = ri substring = s[start:end] return \\"Yes\\" if substring == substring[::-1] else \\"No\\" # Function to process multiple queries def check_palindromic_subsequences(s, queries): results = [] for li, ri in queries: results.append(is_palindrome(s, li, ri)) return results"},{"question":"A system administrator needs to ensure that a set of servers remain fully operational throughout the day. Each server has a known operational cycle during which it needs to be restarted to maintain optimal performance. The system administrator has a list of the servers, each with its specific restart interval in hours. The administrator wants to find the time of day when the least number of servers need to be restarted. You are given a list of integers where each integer represents the hour interval after which a server needs to be restarted (e.g., 3 means every 3 hours). Your task is to determine the hour of the day (0 to 23) during which the fewest servers need to be restarted. If there are multiple hours with the same minimum number of restarts, return the earliest one. Implement the function `find_optimal_restart_hour(restart_intervals: List[int]) -> int` which takes an array of integers representing restart intervals and returns an integer representing the optimal hour for restarts. # Input: - An array of integers `restart_intervals` where 1 ≤ len(restart_intervals) ≤ 1,000 and each integer value x satisfies 1 ≤ x ≤ 24. # Output: - An integer representing the hour of the day (0 to 23) during which the fewest number of servers need to be restarted. # Example: Input: ```python find_optimal_restart_hour([3, 4, 6, 8]) ``` Output: ```python 0 ``` Explanation: - At hour 0: servers with intervals 3, 4, 6, and 8 all restart. - At hour 1: no server restarts. - At hour 2: no server restarts. - At hour 3: server with interval 3 restarts. - At hour 4: server with interval 4 restarts. - Continue checking up to hour 23, find that hour 1 is the optimal hour with zero restarts, which is the minimum.","solution":"from typing import List def find_optimal_restart_hour(restart_intervals: List[int]) -> int: restart_count = [0] * 24 for interval in restart_intervals: for hour in range(0, 24, interval): restart_count[hour] += 1 min_restarts = min(restart_count) for hour, count in enumerate(restart_count): if count == min_restarts: return hour"},{"question":"Given an array of integers representing stock prices on consecutive days, design an algorithm to determine the maximum profit that can be achieved by making at most two transactions. A transaction is defined as buying and then selling one share of the stock. The second transaction must be started after the first one is complete (i.e., you must sell the stock before you buy again). Function Signature: ```python def max_profit(prices: List[int]) -> int: ``` **Input:** - `prices`: A list of integers where each integer represents the stock price on that day. **Output:** - Return an integer, the maximum profit that can be obtained by completing at most two transactions. If no profit is possible, return 0. **Examples:** ```python max_profit([3,3,5,0,0,3,1,4]) # Returns: 6 # Explanation: # Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. # Then, buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3. # Overall profit is 3 + 3 = 6. max_profit([1,2,3,4,5]) # Returns: 4 # Explanation: # Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. # Only one transaction is needed, i.e., the second transaction is not necessary. max_profit([7,6,4,3,1]) # Returns: 0 # Explanation: # No profit can be achieved as prices continuously drop. ```","solution":"from typing import List def max_profit(prices: List[int]) -> int: if not prices: return 0 # First transaction profits n = len(prices) first_buy = [0] * n max_profit1 = 0 min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) max_profit1 = max(max_profit1, prices[i] - min_price) first_buy[i] = max_profit1 # Second transaction profits max_profit2 = 0 max_price = prices[-1] second_sell = 0 for i in range(n - 2, -1, -1): max_price = max(max_price, prices[i]) max_profit2 = max(max_profit2, max_price - prices[i]) second_sell = max(second_sell, max_profit2 + first_buy[i]) return second_sell"},{"question":"A company plans to organize a series of meetings between n employees. Each pair of employees can have one meeting. However, there are some pairs of employees who cannot have a meeting together because of interpersonal conflicts. The goal is to ensure that each employee participates in at least k meetings, if possible. Your task is to determine whether it\'s possible to schedule meetings such that every employee meets at least k other employees. If possible, you should output the pairs of employees who will meet. The first line consists of three integers n, m, and k. Then m lines follow, each consisting of two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), representing pairs of employees who cannot meet. If it\'s possible to schedule the meetings as described, output \\"YES\\" on the first line, followed by the pairs of employees who will meet, one pair per line. If multiple solutions exist, any valid one will suffice. If it\'s not possible, output \\"NO\\". **Examples:** _Input:_ ``` 4 1 2 1 2 ``` _Output:_ ``` YES 1 3 1 4 2 3 2 4 ``` _Input:_ ``` 3 3 2 1 2 1 3 2 3 ``` _Output:_ ``` NO ```","solution":"def schedule_meetings(n, m, k, conflicts): from collections import defaultdict if k > (n - 1): return \\"NO\\", [] conflict_set = set((min(a, b), max(a, b)) for a, b in conflicts) # Initialize a list to maintain each employee\'s meeting count meeting_count = [0] * n meetings = [] for i in range(1, n + 1): for j in range(i + 1, n + 1): if (i, j) not in conflict_set: meetings.append((i, j)) meeting_count[i - 1] += 1 meeting_count[j - 1] += 1 if all(count >= k for count in meeting_count): return \\"YES\\", meetings else: return \\"NO\\", []"},{"question":"You are given an integer array `arr` of length `n`. You need to rearrange the elements of the array such that the absolute difference between any two adjacent elements is at most `d`. For example, consider `arr = [1, 5, 3, 9, 6]` and `d = 3`. A valid rearrangement could be `[1, 3, 5, 6, 9]`, where the absolute differences between adjacent elements are `|3-1|=2`, `|5-3|=2`, `|6-5|=1`, and `|9-6|=3`, all of which are less than or equal to `d`. The first line of input contains two integers, `n` and `d` (`1 ≤ n, d ≤ 10^5`). The second line of input contains `n` integers representing the array `arr`. Output \\"YES\\" and the rearranged array if there exists such an arrangement. If no such rearrangement exists, output \\"NO\\". If there are multiple valid rearrangements, you can output any one of them. __Examples:__ __Input 1:__ ``` 5 3 1 5 3 9 6 ``` __Output 1:__ ``` YES 1 3 5 6 9 ``` __Input 2:__ ``` 4 1 10 2 5 8 ``` __Output 2:__ ``` NO ```","solution":"def rearrange_array(n, d, arr): Rearranges the elements of the array such that the absolute difference between any two adjacent elements is at most d. :param n: Length of the array :param d: Maximum allowed absolute difference between any two adjacent elements :param arr: The input array :return: A tuple (status, rearranged_array / None) status is \\"YES\\" if a valid rearrangement is possible, otherwise \\"NO\\". rearranged_array is the valid rearrangement if possible, otherwise None. arr.sort() # Check if sorted array satisfies the given condition for i in range(1, n): if abs(arr[i] - arr[i-1]) > d: return \\"NO\\", None return \\"YES\\", arr # Example usage: # print(rearrange_array(5, 3, [1, 5, 3, 9, 6])) # Expected output: (\\"YES\\", [1, 3, 5, 6, 9])"},{"question":"In an online store, there are n products and m users. Each user has rated some of the products on a scale from 1 to 5. We want to analyze the ratings to find the most popular product based on the average rating among all users who rated it. For each product, calculate the average rating it received from all users who rated it. Then, determine the product with the highest average rating. If there are multiple products with the same highest average rating, select the one with the smallest product id. The first line of the input contains two integers n and m (1 le n, m le 10^5) — the number of products and the number of users, respectively. Then m lines follow, each describing a user\'s ratings. The i-th line begins with an integer k_i (0 le k_i le n) — the number of products rated by user i. Then k_i pairs follow, each containing two integers: the product id p_{ij} (1 le p_{ij} le n) and the rating r_{ij} (1 le r_{ij} le 5). Print a single integer which is the id of the product with the highest average rating. If there are multiple products with the highest average rating, print the smallest product id among them. If no product has been rated, print -1.","solution":"def most_popular_product(n, m, ratings): from collections import defaultdict product_ratings = defaultdict(list) for user_ratings in ratings: k_i = user_ratings[0] for j in range(1, 2 * k_i, 2): product_id = user_ratings[j] rating = user_ratings[j + 1] product_ratings[product_id].append(rating) best_product_id = -1 highest_avg_rating = -1.0 for product_id, rates in product_ratings.items(): avg_rating = sum(rates) / len(rates) if (avg_rating > highest_avg_rating) or (avg_rating == highest_avg_rating and product_id < best_product_id): highest_avg_rating = avg_rating best_product_id = product_id return best_product_id # Input example n = 5 m = 3 ratings = [ [3, 1, 5, 2, 4, 3, 3], [2, 4, 4, 5, 2], [1, 2, 3] ] print(most_popular_product(n, m, ratings)) # Output should be 1"},{"question":"You are given an array of integers, and you want to calculate the maximum sum of any subarray of the given array. A subarray is a contiguous part of an array. For example: - Given the array [-2, 1, -3, 4, -1, 2, 1, -5, 4], the maximum sum of any subarray is 6. This is obtained with the subarray [4, -1, 2, 1]. - For the array [1], the maximum sum subarray is 1, as there is only one element. - If the array includes all negative numbers, for example, [-4, -2, -3, -1], the maximum sum subarray is -1, as it is the largest (least negative) single element. Implement a function `max_subarray_sum` that takes a list of integers as input and returns the maximum sum of any subarray. Your solution should have a time complexity of O(n). # Function Signature ```python def max_subarray_sum(nums: List[int]) -> int: pass ``` # Input - `nums`: List of integers, constrained by the array length 1 ≤ len(nums) ≤ 10^5 and the integer values -10^3 ≤ nums[i] ≤ 10^3. # Output - An integer representing the maximum sum of any subarray. # Example ```python assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6 assert max_subarray_sum([1]) == 1 assert max_subarray_sum([-4, -2, -3, -1]) == -1 ```","solution":"from typing import List def max_subarray_sum(nums: List[int]) -> int: Finds the maximum sum of any subarray within the given list of integers. Args: nums (List[int]): The list of integers. Returns: int: The maximum sum of any subarray. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Polycarpus is planning to decorate his room with a garland of colored bulbs. He wants to achieve a specific pattern where each bulb is either red (R) or blue (B). Polycarpus has a large collection of both red and blue bulbs, but he needs to know the minimum total number of bulb swaps required to achieve his desired pattern from an initial random sequence of red and blue bulbs. The pattern itself is a specific sequence of \'R\' and \'B\'. For example, if the desired pattern is \\"RBRBR\\", then Polycarpus wants the bulbs to be arranged exactly as \\"RBRBR\\" from left to right. The only line of the input contains two strings: the initial sequence of bulbs and the desired pattern. Both strings will only contain the characters \'R\' and \'B\', and they will have the same length which does not exceed 100 characters. Print the only number — the minimum number of swaps required to turn the initial sequence into the desired pattern. In the first sample, the initial sequence is \\"BBRRBB\\" and the desired pattern is \\"RBRBRB\\". After swapping the first and fourth bulbs, and second and fifth bulbs, you get the desired pattern, which requires 2 swaps. In the second sample, the initial sequence is \\"RBRBRB\\" and the desired pattern is \\"RBRBRB\\". No swaps are needed, so the result is 0. In the third sample, the initial sequence is \\"BRRB\\" and the desired pattern is \\"RBBR\\". You can swap the first and second bulbs, and then the second and third bulbs, making the minimum swaps 2.","solution":"def min_swaps_to_pattern(initial, pattern): Returns the minimum number of swaps required to turn the initial sequence of bulbs into the desired pattern. :param initial: str, the initial sequence of bulbs (\'R\' and \'B\') :param pattern: str, the desired pattern sequence of bulbs (\'R\' and \'B\') :return: int, the minimum number of swaps required swaps = 0 initial = list(initial) for i in range(len(initial)): if initial[i] != pattern[i]: # find the next bulb that matches the pattern at position i for j in range(i+1, len(initial)): if initial[j] == pattern[i]: # swap the bulbs initial[i], initial[j] = initial[j], initial[i] swaps += 1 break return swaps"},{"question":"A company\'s website hosts a game where multiple players can join and compete. The game involves matching pairs of numbers in a list that add up to zero. Given a list of integers, you need to determine how many unique pairs of numbers sum up exactly to zero. Each unique pair (a, b) should be counted only once, regardless of their positions in the list. Write a function `count_pairs` that takes a list of integers as an argument and returns the number of unique pairs that sum to zero. # Input A list of integers `numbers` with length n (1 ≤ n ≤ 10^5). Each integer in the list will be between -10^9 and 10^9. # Output Return a single integer denoting the number of unique pairs that sum to zero. # Function Signature ```python def count_pairs(numbers: List[int]) -> int: ``` # Example ```python assert count_pairs([1, -1, 2, 3, -3, 4, -4, 2, -2]) == 4 assert count_pairs([1, 2, 3, 4, 5]) == 0 assert count_pairs([-1, -1, 1, 1, 2, -2, -3, 3]) == 3 ``` # Note - In the first example, the pairs that sum to zero are: (1, -1), (2, -2), (3, -3), and (4, -4). - In the second example, there are no pairs that sum to zero. - In the third example, the pairs that sum to zero are: (-1, 1), (2, -2), and (-3, 3). Even though -1 and 1 appear twice in the list, they are counted only once.","solution":"from typing import List def count_pairs(numbers: List[int]) -> int: seen = set() pairs = set() for number in numbers: if -number in seen: pairs.add((min(number, -number), max(number, -number))) seen.add(number) return len(pairs)"},{"question":"Bash is on a quest to collect rare gemstones. He has found n gemstones lying in a straight line, where each gemstone has a value vi associated with it. Bash wants to collect as many gemstones as possible, but he has two constraints: - He cannot collect two gemstones that are adjacent to each other. - He wants to maximize the total value of the gemstones he collects. Given the values of the n gemstones, help Bash determine the maximum total value he can collect. The input consists of two lines. The first line contains an integer n (1 ≤ n ≤ 105), the number of gemstones. The next line contains n space-separated integers, where the i-th of them denotes vi (1 ≤ vi ≤ 104), the value of the i-th gemstone. Print a single integer — the maximum total value of gemstones Bash can collect. For example: Input: 5 3 2 5 10 7 Output: 15 In the first sample, Bash can collect gemstones with values 3, 10, and 7. Hence, the total value is 3 + 10 + 7 = 20.","solution":"def max_gemstones_value(n, gemstone_values): if n == 0: return 0 elif n == 1: return gemstone_values[0] dp = [0] * n dp[0] = gemstone_values[0] dp[1] = max(gemstone_values[0], gemstone_values[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + gemstone_values[i]) return dp[-1] # Example usage: # n = 5 # gemstone_values = [3, 2, 5, 10, 7] # print(max_gemstones_value(n, gemstone_values)) # Output: 15"},{"question":"You are given a list of n integers representing scores of players in a game. Two opposing teams, Team A and Team B, are to be formed. The process of forming teams is as follows: 1. Team A will always pick the highest available score. 2. Team B will pick the next highest available score. 3. The teams continue picking alternately until all scores have been chosen. Your task is to determine the total score for each team after all scores have been picked and to decide which team has the higher total score. The first line of the input contains a single integer n (1 leq n leq 10^5) — the number of scores. The second line contains n space-separated integers a_i (1 leq a_i leq 10^9) — the scores of the players. Output two lines. The first line should contain the total score of Team A. The second line should contain the total score of Team B. Example: Input: ``` 4 3 7 2 5 ``` Output: ``` 10 7 ```","solution":"def team_scores(scores): Returns the total scores of Team A and Team B formed by picking alternate highest scores. scores.sort(reverse=True) team_a_score = sum(scores[0::2]) team_b_score = sum(scores[1::2]) return team_a_score, team_b_score"},{"question":"You are given an array of integers and a window size `k`. Your task is to find the maximum sum of any subarray of size `k` and return that sum. If the array length is smaller than `k`, return 0. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains `n` integers, representing the elements of the array. - The third line contains a single integer `k` (1 ≤ k ≤ n), the size of the subarray. # Output Return the maximum sum of any subarray of size `k`. If the array length is smaller than `k`, return 0. # Example **Input:** ``` 8 3 2 1 4 5 6 7 8 3 ``` **Output:** ``` 21 ``` **Explanation:** The subarray with the maximum sum is `[6, 7, 8]`, which gives a sum of 21. # Note - A subarray is a contiguous segment of the array. - You may assume that all elements of the array are integers. - If there are multiple subarrays with the same maximum sum, return the sum of any of them.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of any subarray of size k. If the array length is smaller than k, return 0. n = len(arr) if n < k: return 0 # Initial sum of the first window window_sum = sum(arr[:k]) max_sum = window_sum # Sliding window technique for i in range(n - k): window_sum = window_sum - arr[i] + arr[i + k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"You are given an array of non-negative integers representing elevations of terrain where the width of each elevation is 1 unit. It may rain over this terrain, and water will accumulate in the dips between the elevations. Determine how much water would be trapped in the terrain after it rains. The first line of input contains a single integer n (1 le n le 10000) — the number of elevations. The second line contains n non-negative integers representing the heights of the elevations. Print a single integer indicating the total volume of water trapped between the elevations. Note that elevation at index i represents a unit width at that height. Example: Input: ``` 12 0 1 0 2 1 0 1 3 2 1 2 1 ``` Output: ``` 6 ``` Explanation: The 6 units of water are trapped as shown in the elevation map [[\' \' depicts water units]]: ``` # # # # # # # 012345678901 ```","solution":"def trap_rainwater(elevations): Returns the total volume of water trapped between the elevations. if not elevations: return 0 n = len(elevations) water_trapped = 0 left_max = [0] * n right_max = [0] * n # Fill left max array left_max[0] = elevations[0] for i in range(1, n): left_max[i] = max(left_max[i-1], elevations[i]) # Fill right max array right_max[n-1] = elevations[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], elevations[i]) # Calculate the trapped water for i in range(n): water_trapped += min(left_max[i], right_max[i]) - elevations[i] return water_trapped"},{"question":"Given an array of integers, find and return the length of the longest subarray that contains exactly two different integers. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the values in the array. Print a single integer — the length of the longest subarray that contains exactly two different integers. Input Example: 6 1 2 1 2 3 4 Output Example: 4 Explanation: The longest subarray that contains exactly two different integers is [1, 2, 1, 2] with length 4.","solution":"def longest_subarray_with_two_integers(arr): Return the length of the longest subarray that contains exactly two different integers. n = len(arr) if n < 2: return 0 left = 0 right = 0 max_len = 0 freq = {} while right < n: if arr[right] in freq: freq[arr[right]] += 1 else: freq[arr[right]] = 1 while len(freq) > 2: freq[arr[left]] -= 1 if freq[arr[left]] == 0: del freq[arr[left]] left += 1 if len(freq) == 2: max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"Michael is building a binary tree from a given array of integers. The tree is constructed using the following algorithm: 1. If the array is empty, return null. 2. Find the maximum value in the array and use it as the root of the tree or subtree. 3. Recursively apply the same steps to the left part of the array (elements before the maximum value) to construct the left subtree and to the right part of the array (elements after the maximum value) to construct the right subtree. Your task is to construct the binary tree from the given array and output the inorder traversal of the tree. Function Signature: ```python def inorder_traversal(nums: List[int]) -> List[int]: ``` **Input** - A single list `nums` containing `n` integers, where `1 <= n <= 50` and `0 <= nums[i] <= 1000`. **Output** - Return a list of integers representing the inorder traversal of the constructed binary tree. **Example** ```python inorder_traversal([3, 2, 1, 6, 0, 5]) ``` **Explanation** The maximum value in the array `[3, 2, 1, 6, 0, 5]` is 6. So, 6 becomes the root of the tree. Left part: `[3, 2, 1]` Right part: `[0, 5]` The binary tree looks like this: ``` 6 / 3 5 / 2 0 1 ``` The inorder traversal of this tree is `[3, 2, 1, 6, 0, 5]`.","solution":"from typing import List class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nums: List[int]) -> TreeNode: if not nums: return None max_val = max(nums) max_index = nums.index(max_val) root = TreeNode(max_val) root.left = build_tree(nums[:max_index]) root.right = build_tree(nums[max_index + 1:]) return root def inorder_traversal(nums: List[int]) -> List[int]: def inorder(node: TreeNode) -> List[int]: return inorder(node.left) + [node.val] + inorder(node.right) if node else [] root = build_tree(nums) return inorder(root)"},{"question":"Iahub and Floyd are playing a game with sequences of numbers. For a given integer n, Iahub generates a sequence starting from 1 and adds up every i-th subsequent number. Meanwhile, Floyd generates a sequence starting from m and adds up every k-th subsequent number. Both boys follow this rule until the terms within their sequences exceed the given integer n. Given integers n, m, and k (1 ≤ n, m, k ≤ 1000), find the sum of the unique numbers that both boys have included in their sequences. For example, if n = 20, m = 3, k = 4: - Iahub\'s sequence will be: 1, 2, 3, ..., 20 - Floyd\'s sequence will start at 3 and include every 4th subsequent number until the terms exceed 20: 3, 7, 11, 15, 19 Floyd\'s numbers in the sequence are: 3, 7, 11, 15, 19. All except 20 are within Iahub\'s sequence range. The sums are separated and unique numbers. Write a function to determine the sum of the unique elements included in both sequences. Input: - n: The integer up to which Iahub generates his sequence (1 ≤ n ≤ 1000). - m: The starting integer for Floyd\'s sequence (1 ≤ m ≤ 1000). - k: The step size for Floyd\'s sequence (1 ≤ k ≤ 1000). Output: - The sum of the unique numbers included in both sequences. For example, Input: 20 3 4 Output: 55","solution":"def sum_unique_elements_in_sequences(n, m, k): Determines the sum of unique elements in both Iahub\'s and Floyd\'s sequences. :param n: Integer, the upper limit for Iahub\'s sequence (inclusive) :param m: Integer, the starting integer for Floyd\'s sequence :param k: Integer, the step size for Floyd\'s sequence :return: The sum of the unique elements in both sequences # Iahub\'s sequence is from 1 to n iahub_sequence = set(range(1, n + 1)) # Generate Floyd\'s sequence starting at m with step k floyd_sequence = set() current = m while current <= n: floyd_sequence.add(current) current += k # Find the intersection of both sets intersected_sequence = iahub_sequence & floyd_sequence # Return the sum of the unique intersected elements return sum(intersected_sequence)"},{"question":"Matthew is working on a protocol that involves arranging data packets in a circular buffer in such a way that data retrieval is optimal. He decided to experiment with a buffer filled with unique elements representing data packets, every element corresponding to a distinct positive integer. One of his tasks is to rotate the buffer right by a given number of steps and then retrieve a specific element from it. The rotation should be done in a circular manner, meaning that if an element goes past the end, it reappears at the beginning. Your task is to help Matthew complete this operation efficiently. **Input**: - The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9) — the number of elements in the buffer and the number of steps to rotate the buffer. - The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the buffer. **Output**: - Print the buffer after rotating it right by k steps. **Example**: ``` Input: 7 3 1 2 3 4 5 6 7 Output: 5 6 7 1 2 3 4 ``` **Explanation**: - Initially, the buffer is [1, 2, 3, 4, 5, 6, 7]. - After rotating it to the right by 3 steps, the buffer becomes [5, 6, 7, 1, 2, 3, 4].","solution":"def rotate_buffer(n, k, buffer): Rotates the buffer to the right by k steps. Parameters: n (int): Number of elements in the buffer. k (int): Number of steps to rotate the buffer. buffer (list): The list of elements in the buffer. Returns: list: The buffer after being rotated to the right by k steps. k = k % n # Normalize k to avoid unnecessary full cycles return buffer[-k:] + buffer[:-k]"},{"question":"You are tasked with implementing a system that monitors the growth of various plants in a botanical garden, and helps researchers find the fastest growing plant over different time periods. There are `n` types of plants in the garden, each initially having a height `hi` at time `t = 0`. Each minute, the height of the `i-th` plant increases by `gi` units. Researchers will make `q` queries, each specifying a time interval `[start_t, end_t]`. For each query, you need to determine which plant has grown the most within that time interval. If there is more than one plant with the maximum growth, return any of them. The first line of input contains two integers `n` and `q` (1 ≤ n, q ≤ 100,000). The next `n` lines each contain two integers `hi` and `gi` (1 ≤ hi, gi ≤ 1,000,000), representing the initial height and growth rate per minute of each plant. The following `q` lines each contain two integers `start_t` and `end_t` (0 ≤ start_t ≤ end_t ≤ 1,000,000), representing the time interval for the query. For each query, print the index (1-based) of any plant that has the maximum growth within the specified time interval. Print one index per line. Example input: ``` 3 2 1 2 2 3 3 1 5 10 0 7 ``` Example output: ``` 2 2 ```","solution":"def find_max_growth_plant(n, q, plants, queries): results = [] for start_t, end_t in queries: max_growth = -1 best_plant_index = -1 for index, (hi, gi) in enumerate(plants): growth = gi * (end_t - start_t) if growth > max_growth: max_growth = growth best_plant_index = index + 1 # 1-based index results.append(best_plant_index) return results"},{"question":"You are given an array of n distinct integers a_1, a_2, dots, a_n. Your task is to divide the array into the maximum number of contiguous subarrays such that each subarray is strictly increasing and each element belongs to exactly one subarray. The first line contains an integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n distinct integers a_1, a_2, dots, a_n (1 le a_i le 10^9). Output the maximum number of strictly increasing contiguous subarrays. # Example Input: ``` 8 5 6 7 1 2 3 0 1 ``` Output: ``` 3 ``` # Explanation In this example, we can split the array into three contiguous subarrays: 1. [5, 6, 7] 2. [1, 2, 3] 3. [0, 1] Each subarray is strictly increasing, and we cannot split it into more subarrays that meet the condition.","solution":"def max_strictly_increasing_subarrays(arr): Returns the maximum number of strictly increasing contiguous subarrays. if not arr: return 0 count = 1 # Start with one subarray for i in range(1, len(arr)): if arr[i] <= arr[i - 1]: count += 1 # Start a new subarray each time we find a non-increasing element return count"},{"question":"Given a 9x9 grid of numbers representing a partially solved Sudoku puzzle, your task is to check if the grid represents a valid Sudoku solution. A valid Sudoku solution must satisfy the following criteria: 1. Each row must contain the digits 1 through 9 without repetition. 2. Each column must contain the digits 1 through 9 without repetition. 3. Each of the nine 3x3 subgrids must contain the digits 1 through 9 without repetition. Your program will receive the Sudoku grid as input, with each line representing a row in the grid. Each element in a row will be separated by a space. A digit `0` represents an empty cell. If the grid represents a valid solution, your program should output \\"YES\\". If the grid does not represent a valid solution, your program should output \\"NO\\". **Input:** ``` 5 3 0 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 ``` **Output:** ``` NO ``` **Explanation:** In this grid, the number `5` appears twice in the first row, thus violating the first rule of Sudoku. Therefore, the output is \\"NO\\".","solution":"def is_valid_sudoku(grid): def is_valid_group(group): Checks if a group (row, column, or subgrid) contains numbers 1 to 9 without repetition. elements = [x for x in group if x != 0] return len(elements) == len(set(elements)) def get_subgrid(grid, row, col): Returns the 3x3 subgrid elements for the specified starting row and column. subgrid = [] for r in range(3): for c in range(3): subgrid.append(grid[row + r][col + c]) return subgrid for i in range(9): # Check rows and columns row = grid[i] column = [grid[r][i] for r in range(9)] if not is_valid_group(row) or not is_valid_group(column): return \\"NO\\" # Check subgrids for row in range(0, 9, 3): for col in range(0, 9, 3): subgrid = get_subgrid(grid, row, col) if not is_valid_group(subgrid): return \\"NO\\" return \\"YES\\""},{"question":"You have been assigned the task of optimizing warehouse space by creating divisions based on certain constraints. Given a rectangular warehouse of dimensions w (width) and h (height), you need to partition the space into smaller rectangles such that each smaller rectangle has an integer width w_i and height h_i and the sum of the areas of all smaller rectangles is maximized. You have the additional restriction that you can only use up to a certain number of partitions, defined as p. Your goal is to determine the maximum number of smaller rectangles you can create without exceeding p partitions. The input consists of two integers w and h (1 le w, h le 1000) representing the dimensions of the warehouse, followed by an integer p (1 le p le 20) representing the maximum number of partitions. Output a single integer representing the maximum number of smaller rectangles that can be created without exceeding the given partitions constraint. # Examples Example 1 Input: ``` 10 5 1 ``` Output: ``` 2 ``` Explanation: With one partition, we can divide the warehouse into two smaller rectangles, each having dimensions of 5x5. Example 2 Input: ``` 12 10 3 ``` Output: ``` 4 ``` Explanation: With three partitions, we can divide the warehouse into four smaller rectangles, each having dimensions 6x5 or 4x3 or a combination thereof. # Constraints - w, h are integers with 1 le w, h le 1000 - p is an integer with 1 le p le 20 Your task is to write a function to compute the maximum number of smaller rectangles possible given the constraints.","solution":"def max_rectangles(w, h, p): Returns the maximum number of smaller rectangles that can be created without exceeding the partitions constraint. # Maximum number of rectangles is p + 1 because p partitions create p+1 segments return min((p + 1), w * h) # Examples: # For width = 10, height = 5, and p = 1, the correct output is 2 # For width = 12, height = 10, and p = 3, the correct output is 4"},{"question":"You are given an array of n integers where all elements appear twice except for one element which appears only once. Your task is to write a function to find and return the element that appears only once. Your implementation should have a time complexity of O(n) and a space complexity of O(1). Your code should have the following signature: ```python def find_single_element(arr: List[int]) -> int: ```","solution":"from typing import List def find_single_element(arr: List[int]) -> int: Finds the element that appears only once in a list where every other element appears twice. Parameters: arr (List[int]): The input list of integers. Returns: int: The element that appears only once. result = 0 for num in arr: result ^= num return result"},{"question":"A coding competition has invited n participants. Each participant has a unique skill level represented by an integer skill array. The host wants to form the largest possible number of pairs where the absolute difference between the skill levels of the two participants in each pair is at most k. Write a program to return the number of such pairs. Each participant can only be in one pair. The first line of the input contains two integers n and k (1 le n le 2 cdot 10^5, 0 le k le 10^9) — the number of participants and the maximum allowed difference in skill levels respectively. The second line contains n integers representing the skill levels of the participants. Print the maximum number of pairs that can be formed. Note that the pairs should be formed optimally to maximize the number of pairs. # Example **Input:** ``` 5 3 1 5 3 4 2 ``` **Output:** ``` 2 ``` **Explanation:** The pairs can be (1, 2) and (3, 4). These pairs have an absolute difference of 1 each, which is less than or equal to k = 3. This way, we can form 2 pairs from the given participants. The remaining participant with skill level 5 cannot be paired as no other participant satisfies the condition with him.","solution":"def max_pairs_with_skill_difference(n, k, skill_levels): Return the maximum number of pairs where the absolute difference between the skill levels of the two participants in each pair is at most k. skill_levels.sort() i = 0 j = 1 pairs = 0 while i < n - 1 and j < n: if abs(skill_levels[j] - skill_levels[i]) <= k: pairs += 1 i += 2 j += 2 else: if j == i + 1: j += 1 else: i += 1 return pairs"},{"question":"In a game of tic-tac-toe, two players take turns marking a 3x3 grid with their respective symbols: \'X\' and \'O\'. The player who places three of their symbols in a horizontal, vertical, or diagonal row wins the game. Given the current state of a 3x3 tic-tac-toe board, your task is to determine the result of the game. The board will be provided as three lines of three characters each, with \'X\' representing player 1\'s move, \'O\' representing player 2\'s move, and \'.\' representing an empty space. The input consists of three lines, each containing three characters (\'X\', \'O\', or \'.\'). Print \\"X wins\\" if player 1 wins, \\"O wins\\" if player 2 wins, \\"Draw\\" if the game ends in a draw, and \\"Game not finished\\" if there are still empty spaces and no player has won yet. Note that it is guaranteed that the provided state of the board is achievable through valid gameplay. Example input: ``` XOX OXO XOX ``` Example output: ``` X wins ```","solution":"def check_tic_tac_toe(board): Given a 3x3 tic-tac-toe board, determine the result of the game. Parameters: board (list of str): A list containing three strings, each of which is a row of the tic-tac-toe board. Returns: str: \\"X wins\\" if player 1 (X) has won the game, \\"O wins\\" if player 2 (O) has won the game, \\"Draw\\" if the game ends in a draw, and \\"Game not finished\\" if there are still empty spaces and no player has won yet. # win patterns: rows, columns, diagonals win_patterns = [ # rows [(0,0), (0,1), (0,2)], [(1,0), (1,1), (1,2)], [(2,0), (2,1), (2,2)], # columns [(0,0), (1,0), (2,0)], [(0,1), (1,1), (2,1)], [(0,2), (1,2), (2,2)], # diagonals [(0,0), (1,1), (2,2)], [(0,2), (1,1), (2,0)] ] for pattern in win_patterns: if board[pattern[0][0]][pattern[0][1]] == board[pattern[1][0]][pattern[1][1]] == board[pattern[2][0]][pattern[2][1]] != \'.\': if board[pattern[0][0]][pattern[0][1]] == \'X\': return \\"X wins\\" elif board[pattern[0][0]][pattern[0][1]] == \'O\': return \\"O wins\\" if any(\'.\' in row for row in board): return \\"Game not finished\\" return \\"Draw\\""},{"question":"Alice has a collection of n distinct positive integers: A_1, A_2, dots, A_n. Bob challenged her to determine the smallest number that is not the sum of any subset of her collection. You are to help Alice by writing a program that computes this smallest number for her. The first line of the input contains an integer n (1 leq n leq 1000) — the number of integers in Alice\'s collection. The second line contains n space-separated positive integers A_1, A_2, dots, A_n (1 leq A_i leq 10^9) — the integers in Alice\'s collection. Output a single integer — the smallest number that is not the sum of any subset of Alice\'s collection. **Examples:** **Input:** ``` 4 1 2 3 8 ``` **Output:** ``` 7 ``` **Input:** ``` 5 1 1 1 1 1 ``` **Output:** ``` 6 ```","solution":"def smallest_nonreachable_sum(n, arr): Given a collection of n distinct positive integers, determine the smallest number that is not the sum of any subset of the collection. arr.sort() smallest_unreachable = 1 for num in arr: if num > smallest_unreachable: break smallest_unreachable += num return smallest_unreachable"},{"question":"You are given an island kingdom with n cities and n - 1 roads such that there is a unique path between any two cities. Each city is represented by a node and each road is represented by an edge in the kingdom\'s road network, which forms a tree. The kingdom is planning to build q additional roads to increase connectivity. However, the kingdom wants to ensure that, after each road is built, certain safety measures are met. Specifically, they want to determine how many pairs of cities (u, v) exist such that: 1. There is a direct road between u and v. 2. Removing this road would result in u and v being in different connected components of the kingdom\'s road network. Your task is to write a program to help the kingdom by answering the following queries: 1. For the initial tree, determine how many pairs (u, v) exist such that removing the road between them would split the tree into two different components. 2. After each new road is added, determine how many such pairs of cities (u, v) exist where removing the direct road between them splits the tree into different components. Input format: - The first line contains an integer n (2 ≤ n ≤ 10^5), the number of cities in the kingdom. - The next n - 1 lines contain two space-separated integers u and v (1 ≤ u, v ≤ n) indicating a road between cities u and v. It is guaranteed that these roads form a connected tree. - The next line contains an integer q (1 ≤ q ≤ 10^5), the number of new roads to be added. - Each of the next q lines contains two space-separated integers u and v (1 ≤ u, v ≤ n) representing the new road to be added. Output format: - Print a single integer representing the number of pairs (u, v) that meet the criteria for the initial tree. - For each new road addition, print a new line with a single integer representing the updated number of pairs (u, v) that meet the criteria after the i-th road is added. Example: Input: ``` 5 1 2 1 3 2 4 2 5 3 4 5 3 5 1 4 ``` Output: ``` 4 3 2 1 ``` Explanation of the example: - Initially, the kingdom\'s road network is a tree with pairs (1,2), (1,3), (2,4), (2,5) meeting the criteria (removing any of these roads splits the tree into different components). - After adding the road between 4 and 5, the pairs (1,2), (1,3), (2,4) meet the criteria (removing any of these roads splits the tree into different components). - After adding the road between 3 and 5, the pairs (1,2), (1,3) meet the criteria. - After adding the road between 1 and 4, the pair (1,3) is the only one that meets the criteria. Note: 1. New roads may connect cities that are already directly connected. 2. It is guaranteed that no road will be added that creates a direct self-loop (a city connected to itself).","solution":"def compute_critical_edges(n, roads, new_roads): # Create an adjacency list for the tree graph from collections import defaultdict graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) critical_edges_count = len(roads) result = [critical_edges_count] for u, v in new_roads: if u in graph[v]: continue # This road already exists graph[u].append(v) graph[v].append(u) critical_edges_count -= 1 result.append(critical_edges_count) return result # Example usage with sample input n = 5 roads = [(1, 2), (1, 3), (2, 4), (2, 5)] new_roads = [(4, 5), (3, 5), (1, 4)] print(compute_critical_edges(n, roads, new_roads))"},{"question":"You are given an integer n (n geq 1) which represents the size of a chessboard. Your task is to determine the number of ways to place two knights on an n times n chessboard so that they do not attack each other. Recall that a knight on a chessboard moves in an L-shaped pattern: two squares in one direction and then one square perpendicular to that, or one square in one direction and then two squares perpendicular to that. Two knights attack each other if one can move to the position of the other knight in one move. Your task is to compute the number of distinct pairs of positions where two knights can be placed such that they do not attack each other. The answer might be large, so return it modulo 10^9 + 7. Input: - The first line of the input contains one integer t (1 leq t leq 100) — the number of test cases. - The next t lines each contain one integer n (1 leq n leq 10^5) — the size of the chessboard for each test case. Output: - For each test case, output a single integer: the number of ways to place two knights on an n times n chessboard so that they do not attack each other, modulo 10^9 + 7.","solution":"def number_of_ways_to_place_knights(t, cases): MOD = 10**9 + 7 results = [] for n in cases: if n == 1: results.append(0) continue total_positions = (n * n * (n * n - 1)) // 2 attacking_positions = 4 * (n - 1) * (n - 2) safe_positions = total_positions - attacking_positions results.append(safe_positions % MOD) return results"},{"question":"Given an array of integers representing the heights of buildings on a street, you need to determine whether it is possible to find exactly two buildings such that no other building is taller than both of them. In other words, you need to check if there are two buildings with the maximum height, and no other buildings with this maximum height appear in the array. # Input: - The first line of input contains an integer `n` (`2 <= n <= 1000`) — the number of buildings. - The second line contains `n` integers `h1, h2, ..., hn` (`1 <= hi <= 10^5`) representing the heights of the buildings. # Output: - Print \\"YES\\" if there exist exactly two buildings with the maximum height and no other buildings have this height. Otherwise, print \\"NO\\". # Example: Input: ``` 5 3 5 5 2 1 ``` Output: ``` YES ``` Input: ``` 6 4 4 4 4 4 4 ``` Output: ``` NO ``` Input: ``` 4 1 2 3 4 ``` Output: ``` NO ``` # Explanation: In the first example, there are exactly two buildings with the maximum height of 5. In the second example, there\'s more than two buildings with the maximum height (all are the same height). In the third example, there\'s only one building with the maximum height.","solution":"def check_two_max_buildings(n, heights): Determines if there are exactly two buildings with the maximum height on the street and no other buildings with this height. Parameters: n (int): The number of buildings heights (list of int): The heights of the buildings Returns: str: \\"YES\\" if there are exactly two buildings with the maximum height, otherwise \\"NO\\" max_height = max(heights) max_count = heights.count(max_height) if max_count == 2: return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers a_1, a_2, dots, a_n. You need to find the maximum sum of any non-empty subsegment of this array. A subsegment is any contiguous part of the array. **Input:** The first line contains one integer n (1 le n le 10^{5}) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (-10^{9} le a_i le 10^{9}) — the elements of the array. **Output:** Print one integer — the maximum sum of any non-empty subsegment of the array. **Example:** **Input:** ``` 5 1 2 -3 4 5 ``` **Output:** ``` 9 ``` **Explanation:** The maximum sum is obtained with the subsegment [4, 5].","solution":"def max_subsegment_sum(n, arr): Returns the maximum sum of any non-empty subsegment of the array. Parameters: n (int): The number of elements in the array. arr (list): List of n integers representing the array. Returns: int: The maximum sum of any non-empty subsegment. if n == 0: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a list of integers. Your task is to reorder the list such that the digits of each number are sorted in non-descending order and the number itself is prime. If there are multiple re-orderings possible that satisfy this condition, print the lexicographically smallest arrangement. If it is not possible to make any number in the list prime, print \\"IMPOSSIBLE\\". Prime numbers are natural numbers greater than 1 that are not products of two smaller natural numbers. For example, 2, 3, 5, 7, 11, etc., are prime numbers. The first line of the input contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a single integer n (1 le n le 10^9). For each test case, if it is possible to reorder the digits of n to form a prime number, print the lexicographically smallest prime number that can be formed. Otherwise, print \\"IMPOSSIBLE\\". # Examples **Input:** ``` 3 19 31 222 ``` **Output:** ``` 19 13 IMPOSSIBLE ``` **Explanation:** - In the first case, 19 is already a prime number. - In the second case, the digits of 31 can be rearranged to form 13, which is a prime number. - In the third case, no reordering of digits of 222 can form a prime number, so the output is \\"IMPOSSIBLE\\".","solution":"from itertools import permutations def is_prime(num): Checks if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def smallest_prime_reordering(n): Returns the lexicographically smallest permutation of the digits of n that is a prime number. If no such permutation exists, returns \\"IMPOSSIBLE\\". digits = sorted(str(n)) seen = set() for perm in permutations(digits): if perm[0] == \'0\': continue perm_num = int(\'\'.join(perm)) if perm_num not in seen: if is_prime(perm_num): return perm_num seen.add(perm_num) return \\"IMPOSSIBLE\\" def process_test_cases(test_cases): results = [] for n in test_cases: results.append(smallest_prime_reordering(n)) return results # Example usage: t = 3 test_cases = [19, 31, 222] print(process_test_cases(test_cases)) # Expected output: [19, 13, \\"IMPOSSIBLE\\"]"},{"question":"You are working on a grid-based game where an n x m grid board is filled with integers. The objective of the game is to reach from the top-left corner of the grid (position (1, 1)) to the bottom-right corner of the grid (position (n, m)) by traversing cells. You can move to the neighboring cell either to the right (east) or down (south) direction in each step. Each cell in the grid contains an integer which represents the cost of entering that cell. To win the game, you need to minimize the total cost incurred when moving from the top-left to the bottom-right corner. Your task is to determine the minimum total cost to reach the bottom-right corner of the grid starting from the top-left corner. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100), representing the dimensions of the grid. The next n lines each contain m integers a[i][j] (0 ≤ a[i][j] ≤ 100), representing the cost of each cell in the grid. Output a single integer – the minimum total cost to reach the bottom-right corner of the grid. # Example Input 4 4 1 3 1 2 1 5 1 3 4 2 1 5 2 1 1 1 Output 9 # Explanation One of the possible paths leading to the minimum cost is: (1,1) → (2,1) → (3,1) → (3,2) → (3,3) → (4,3) → (4,4) with a cost of 1 + 1 + 4 + 2 + 1 + 1 + 1 = 9","solution":"def min_cost_to_reach_bottom_right(n, m, grid): Returns the minimum total cost to reach the bottom-right corner of the grid starting from the top-left corner. # Initialize a dp array with the same dimensions as the grid dp = [[0 for _ in range(m)] for _ in range(n)] # Set the initial cost dp[0][0] = grid[0][0] # Fill the first row (can only move right) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only move down) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will contain the minimum cost return dp[n-1][m-1]"},{"question":"You are given an integer array a consisting of n elements. Your task is to find a subarray (contiguous segment) that has the maximum possible sum. For this problem, a subarray must contain at least two elements. A subarray is defined as a contiguous part of an array. For example, if the array is [1, 2, 3, 4], then the subarray that includes elements from the second to the fourth element is [2, 3, 4]. The first line contains an integer t (1 le t le 10) — the number of test cases. The first line for each test case contains an integer n (2 le n le 10^5) — the length of the array a. The second line for each test case contains n integers a_1, a_2, ldots, a_n (-10^4 le a_i le 10^4) — the elements of the array. For each test case, print a single integer — the maximum sum of a subarray that contains at least two elements. # Sample Input: ``` 2 5 1 -2 3 4 -5 4 -1 -2 -3 -4 ``` # Sample Output: ``` 7 -3 ``` # Explanation: In the first test case, the subarray with the maximum sum is [3, 4] with a sum of 7. In the second test case, the subarray with the maximum sum is [-1, -2] with a sum of -3.","solution":"def max_subarray_sum(a): Returns the maximum sum of subarray with at least two elements. if len(a) < 2: return None max_sum = float(\'-inf\') current_sum = a[0] + a[1] for i in range(1, len(a)): if i > 1: current_sum = max(a[i] + a[i-1], current_sum + a[i]) max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(test_cases): Processes multiple test cases and returns the maximum sum for each. results = [] for n, array in test_cases: results.append(max_subarray_sum(array)) return results"},{"question":"In a distant galaxy, there is a planet called Graphia where the inhabitants communicate through graphs. These graphs are undirected and have no self-loops or multiple edges. The Graphians have a special interest in trees - connected graphs with no cycles, where each tree represents a unique message. The government of Graphia wants to optimize the communication network. They have a list of towns connected by bidirectional roads, and they want to ensure that the network forms a single connected tree. To achieve this, they plan to cut some of the roads to remove cycles while maintaining the connectivity of the towns. You are given a list of connections representing the roads between towns. Find the minimum number of roads to cut to transform the initial graph into a tree. The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000), the number of towns and the number of roads, respectively. The next m lines contain two integers u and v (1 ≤ u, v ≤ n; u ≠ v), denoting a road between towns u and v. Output the minimum number of roads that need to be cut to transform the graph into a tree. Example: Input 6 6 1 2 1 3 2 4 3 4 4 5 5 6 Output 1 In the given example, by removing the road (3, 4), the network will form a tree.","solution":"def find_number_of_roads_to_cut(n, m, roads): Determines the minimum number of roads to cut to transform the given graph into a tree. :param n: int: the number of towns :param m: int: the number of roads :param roads: List[Tuple[int, int]]: list of tuples representing roads between towns :return: int: the number of roads to cut if m == 0: return 0 parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY return True return False redundant_connections = 0 for u, v in roads: if not union(u, v): redundant_connections += 1 return redundant_connections"},{"question":"Polycarp is working on a text editor that supports a special kind of text formatting called \\"highlight groups.\\" Each highlight group is represented by a pair of opening and closing markers within the text. Polycarp needs to ensure that the text contains valid and non-overlapping highlight groups. A highlight group starts with an opening curly brace \'{\' and ends with a closing curly brace \'}\'. You are given a text of length n which contains these curly braces, along with other not relevant characters that need to be ignored. Your task is to add the minimum number of curly braces to ensure that every opening curly brace has a corresponding closing curly brace and that highlight groups do not overlap. For example, if the text is \'{abc{d}e}\', \'{a{bc}d}e\', or \'{a{b}c}d}\', then these texts contain valid highlight groups. If the text is \'}{\', \'{}}\', or \'abcd}\', then they do not represent valid highlight groups. Write a program that determines the minimum number of additional curly braces Polycarp needs to add so that the text contains valid highlight groups. The input consists of a single line containing a string s (1 ≤ |s| ≤ 100,000), where |s| is the length of the string. The string s contains only printable ASCII characters. Print a single integer — the minimum number of additional curly braces required to make the text valid and non-overlapping. The first example for the input string \\"{abc{d}}e}\\" should output 1 since adding one curly brace at the end would make it balanced: \\"{abc{d}}e{}\\". The second example for the input string \\"{abc{{d}e}\\" should output 1 since adding one closing curly brace after \\"e\\" would make it balanced: \\"{abc{{d}e}}\\". The third example for the input string \\"a{b{c}d}\\" should output 0 since the string is already balanced and contains non-overlapping highlight groups.","solution":"def min_additional_braces(s): Determines the minimum number of additional curly braces required to make the text valid and non-overlapping. Parameters: s (str): The input string containing curly braces and other characters. Returns: int: Minimum number of additional curly braces needed. open_braces = 0 close_braces = 0 for char in s: if char == \'{\': open_braces += 1 elif char == \'}\': if open_braces > 0: open_braces -= 1 else: close_braces += 1 return open_braces + close_braces"},{"question":"You are given a rectangular grid of size m x n where the top-left cell is (1, 1) and the bottom-right cell is (m, n). You have placed k obstacles on this grid. Obstacles are such that no two obstacles are in the same cell, and an obstacle is denoted by \'#\'. You need to find the number of unique paths from the top-left cell to the bottom-right cell under the condition that you can only move either down or right at any point in time and you cannot move through obstacles. Write a function `uniquePathsWithObstacles(m, n, obstacles)` where: - m and n are the number of rows and columns respectively (1 <= m, n <= 100) - obstacles is a list of k tuples where each tuple (xi, yi) represents the position of an obstacle on the grid (1 <= xi <= m, 1 <= yi <= n, 0 <= k <= 100) Return the number of unique paths from the top-left to the bottom-right cell. # Example: Example 1: Input: m = 3, n = 3 obstacles = [(2, 2)] Output: 2 Explanation: You can go from (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) or (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) Example 2: Input: m = 3, n = 3 obstacles = [(2, 2), (3, 2)] Output: 1 Explanation: You can only go from (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) # Constraints: Ensure your solution can handle grids up to size 100 x 100 with up to 100 obstacles efficiently.","solution":"def uniquePathsWithObstacles(m, n, obstacles): Returns the number of unique paths from the top-left to the bottom-right cell in a grid with obstacles. # Initialize the grid with all zeroes grid = [[0]*n for _ in range(m)] # Mark the obstacle positions in the grid for x, y in obstacles: grid[x-1][y-1] = \'#\' # Base case: Start point if grid[0][0] == \'#\': return 0 grid[0][0] = 1 # Fill in the values for the first row for j in range(1, n): if grid[0][j] == \'#\': grid[0][j] = 0 else: grid[0][j] = grid[0][j-1] # Fill in the values for the first column for i in range(1, m): if grid[i][0] == \'#\': grid[i][0] = 0 else: grid[i][0] = grid[i-1][0] # Fill in the values for the rest of the grid for i in range(1, m): for j in range(1, n): if grid[i][j] == \'#\': grid[i][j] = 0 else: grid[i][j] = grid[i-1][j] + grid[i][j-1] # The value at the bottom-right cell is the answer return grid[m-1][n-1]"},{"question":"You are given a string consisting of lowercase letters. Your task is to check if the string is a palindrome after removing at most one character. A palindrome is a word that reads the same backward as forward, such as \\"madam\\" or \\"racecar\\". You need to determine if the given string can be rearranged into a palindrome by deleting one or zero characters. Input - The input contains a single string s (1 le |s| le 10^5). Output - Print \\"YES\\" if the string can become a palindrome by removing at most one character, otherwise print \\"NO\\". Examples - Input: \\"abca\\" - Output: \\"YES\\" - Input: \\"abcba\\" - Output: \\"YES\\" - Input: \\"abcdef\\" - Output: \\"NO\\" Explanation: For the first example, by removing the character \'c\', we get the string \\"aba\\" which is a palindrome. For the second example, the string \\"abcba\\" is already a palindrome. For the third example, no single character removal will result in a palindrome, so the output is \\"NO\\".","solution":"def can_become_palindrome(s): Check if the string can become a palindrome by removing at most one character. def is_palindrome_range(i, j): return all(s[k] == s[j - k + i] for k in range(i, j)) l, r = 0, len(s) - 1 while l < r: if s[l] != s[r]: return is_palindrome_range(l + 1, r) or is_palindrome_range(l, r - 1) l += 1 r -= 1 return True def solution(s): Determines if the string can become a palindrome by removing at most one character. if can_become_palindrome(s): return \\"YES\\" else: return \\"NO\\""},{"question":"Anna is organizing a coding bootcamp challenge where participants write code for various problems. On each of the next `n` days, Anna can prepare at most `k` questions for the challenge. However, she has a lineup of `m` questions with distinct difficulties that need to be incorporated into the challenge over the `n` days. Each day\'s set of questions should be unique and should not repeat questions from previous days. Your task is to determine whether it is possible to distribute all `m` questions over `n` days such that each day\'s set of questions has a unique combination and does not exceed `k` questions. The first line of the input contains three integers `n`, `k`, and `m` (1 le n le 100, 1 le k le 10, 1 le m le 1000) — the number of days, the maximum number of questions per day, and the total number of questions, respectively. The second line contains `m` space-separated integers representing the distinct difficulties of the questions. Output \\"YES\\" if it is possible to distribute all `m` questions over `n` days with the given constraints, and \\"NO\\" otherwise. **Example:** **Input:** ``` 3 2 5 3 4 5 1 2 ``` **Output:** ``` YES ``` **Input:** ``` 2 2 5 3 4 5 1 2 ``` **Output:** ``` NO ```","solution":"def can_distribute_questions(n, k, m, difficulties): Determines whether it is possible to distribute all `m` questions over `n` days such that each day\'s set of questions has a unique combination and does not exceed `k` questions. # Calculate the required number of days if each day can have at most `k` questions required_days = (m + k - 1) // k # Check if the required days are within the given number of days `n` if required_days <= n: return \\"YES\\" return \\"NO\\""},{"question":"You own a bakery and have a list of orders placed for your various types of pastries, which are represented by positive integers denoting the number of pastries of each respective type. Unfortunately, some orders are so large that fulfilling them is impossible due to ingredient limitations. Therefore, you must process these large orders to fit within your capacity constraints. You are given: - An integer array orders of length n, where orders[i] represents the number of pastries of type i that are ordered. - An integer m which represents the maximum number of pastries of any type that the bakery can fulfill at once. Your task is to adjust each element in the orders array such that no value exceeds m. If the original value of an order is greater than m, adjust it to m; otherwise, keep it as is. Write a function that takes the original orders and the capacity m, and returns the modified list of orders. # Function Signature: ```python def adjust_orders(orders: List[int], m: int) -> List[int]: # Your code here ``` # Input: - An integer n (1 ≤ n ≤ 100,000) representing the number of orders. - An integer array orders of length n (1 ≤ orders[i] ≤ 10^9) representing the orders quantity. - A positive integer m (1 ≤ m ≤ 10^9). # Output: - An array of adjusted orders of length n. # Example: Example 1: ```python orders = [500, 1200, 300, 2500, 150] m = 1000 adjust_orders(orders, m) ``` Output: ```python [500, 1000, 300, 1000, 150] ``` Example 2: ```python orders = [5, 2, 7, 9, 1] m = 10 adjust_orders(orders, m) ``` Output: ```python [5, 2, 7, 9, 1] ``` In the first example, orders that exceed the maximum limit of 1000 are adjusted to 1000. In the second example, since all orders are within the limit, the output is the same as the input. Implement the function to handle any input within the given constraints.","solution":"from typing import List def adjust_orders(orders: List[int], m: int) -> List[int]: Adjusts orders such that no value exceeds the maximum allowed value `m`. Parameters: orders (List[int]): A list of orders represented by integers. m (int): The maximum number of pastries that can be fulfilled for any type. Returns: List[int]: A list of adjusted orders. return [min(order, m) for order in orders]"},{"question":"You are a programmer tasked with developing a maze-solving algorithm. The maze is represented by a grid of size n x m, where each cell in the grid can be either open (represented by \'.\') or blocked (represented by \'#\'). The goal is to determine whether there is a path from the top-left corner to the bottom-right corner of the grid, using only cells that are open. A path consists of successive moves in one of four possible directions: up, down, left, or right. Diagonal moves are not allowed. If there is a path, your program should also output the length of the shortest such path. The input format is as follows: - The first line contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. - Each of the next n lines contains a string of m characters, representing the grid. The output format is as follows: - If there is no path, print the single word \\"NO\\". - If there is a path, print the word \\"YES\\" followed by the length of the shortest path. Example: Input 1: 3 3 . . # . # . . . . Output 1: YES 4 Input 2: 3 3 . # . # # . . . . Output 2: NO Note: - In the first example, one possible shortest path is (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2). - In the second example, there is no path from the top-left corner to the bottom-right corner.","solution":"from collections import deque def solve_maze(n, m, grid): Solves the maze problem, returning the shortest path length if present. # Directions for moving in the grid (down, up, right, left) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Breadth-First Search (BFS) method def bfs(start, end): queue = deque([(*start, 0)]) # cells to visit, with their distance from the start visited = set([start]) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 start = (0, 0) end = (n - 1, m - 1) if grid[0][0] == \'.\' and grid[n - 1][m - 1] == \'.\': shortest_path_length = bfs(start, end) if shortest_path_length == -1: return \\"NO\\" else: return f\\"YES {shortest_path_length}\\" else: return \\"NO\\""},{"question":"A transportation company is evaluating the efficiency of various routes taken by their drivers. Each route is defined as a sequence of location points in order,-start to end. The company would like to categorize routes into specific types based on certain rules and characteristics. Specifically, two routes are considered the same type if one route can be transformed into the other by reversing the order of location points or by maintaining the same order. The company wants you to help implement this system. You are given a list of routes where each route is represented as a list of integers. Your task is to determine the number of distinct route types. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of routes. - Each of the next `n` lines contains a sequence of space-separated integers representing the points of a route. Each integer in a route will be in the range [1, 1,000,000], and the length of each route does not exceed 100. # Output - Print a single integer `k` — the number of distinct route types. # Example Input ``` 4 1 2 3 4 4 3 2 1 6 7 8 9 9 8 7 6 ``` Output ``` 2 ``` # Explanation The routes `1 2 3 4` and `4 3 2 1` are considered the same type because one is the reverse of the other. Similarly, `6 7 8 9` and `9 8 7 6` are the same type. So there are only 2 distinct route types.","solution":"def count_distinct_route_types(routes): Returns the number of distinct route types, where two routes are the same type if one can be reversed to match the other. route_set = set() for route in routes: norm_route = tuple(route) rev_route = tuple(reversed(route)) route_set.add(min(norm_route, rev_route)) return len(route_set)"},{"question":"You are given an array of integers which represents the inventory of some items. Each integer in the array corresponds to the count of a specific item. You are also given a target integer that represents the required number of items for a specific order. Write a function that determines whether it is possible to fulfill the order by using exactly the number of items specified by the target integer. If there are multiple combinations of items that match the target exactly, return any one of them. The function should return a list of integers that represent the counts of items chosen to meet the target, or an empty list if it is not possible to meet the target with the given inventory. The input consists of: - An integer `n` (1 ≤ n ≤ 20) representing the number of items in the inventory. - An array of `n` integers where each integer represents the count of an item (1 ≤ array[i] ≤ 1000). - An integer `target` (1 ≤ target ≤ 1000) representing the total number of items required. Example 1: ``` Input: 3 [8, 15, 7] 20 Output: [15, 5] or [8, 7, 5] (any valid combination) Example 2: ``` Input: 4 [10, 20, 30, 40] 25 Output: []","solution":"from itertools import combinations def fulfill_order(n, inventory, target): Determines if the order can be fulfilled by using exactly the target number of items. Parameters: n (int): The number of items in inventory. inventory (list): A list of integers representing item counts. target (int): The required number of items for an order. Returns: list: A list of integers representing the counts of items chosen to meet the target, or an empty list if not possible. for r in range(1, n+1): for combo in combinations(inventory, r): if sum(combo) == target: return list(combo) return []"},{"question":"You are given an array of integers, and you need to find the maximum sum of a subarray with the condition that no two elements in the subarray should be adjacent in the original array. A subarray is a contiguous part of an array. Your task is to write a program that takes an integer array and returns the maximum sum of a non-adjacent subarray. The first line contains an integer n (1 leq n leq 10^5) — the length of the array. The second line contains n space-separated integers representing the array elements (-10^4 leq a_i leq 10^4). Print one number — the maximum sum of a non-adjacent subarray. In the first example, the given array is [3, 2, 5, 10, 7]. The sum of the non-adjacent subarray [3] is 3, [2] is 2, [5] is 5, [10] is 10, [7] is 7, [3, 5, 7] is 15, [5, 10] is 15, [2, 7] is 9, and so on. The maximum sum possible is 15. In the second example, the given array is [-1, -2, -3, -4]. The maximum sum of a non-adjacent subarray is 0, as we can choose not to include any elements from the array.","solution":"def max_non_adjacent_sum(nums): Function to find the maximum sum of a non-adjacent subarray. if not nums: return 0 elif len(nums) == 1: return max(0, nums[0]) include = 0 exclude = 0 for num in nums: new_exclude = max(include, exclude) include = exclude + num exclude = new_exclude return max(include, exclude)"},{"question":"You are given a matrix of non-negative integers where each cell represents the cost to enter that cell. Your goal is to find a path from the top-left corner to the bottom-right corner which minimizes the total cost along the way. You can only move either down or right at any point in time. Write a function `min_cost_path` that takes a 2D array of integers `cost` and returns an integer representing the minimum cost to reach the bottom-right corner of the matrix. Your function should have the following signature: ```python def min_cost_path(cost: List[List[int]]) -> int: ``` # Example ```python cost = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] min_cost_path(cost) # should return 7 ``` # Constraints - The dimensions of the matrix `cost` will not exceed 100x100. - Each element in the matrix is a non-negative integer within the range [0, 100].","solution":"from typing import List def min_cost_path(cost: List[List[int]]) -> int: if not cost or not cost[0]: return 0 rows, cols = len(cost), len(cost[0]) dp = [[0] * cols for _ in range(rows)] dp[0][0] = cost[0][0] for i in range(1, rows): dp[i][0] = dp[i-1][0] + cost[i][0] for j in range(1, cols): dp[0][j] = dp[0][j-1] + cost[0][j] for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j] return dp[rows-1][cols-1]"},{"question":"You are given an array of integers representing heights of buildings on a street. You can observe the buildings from the left or from the right. The goal is to determine the maximum number of buildings that can be seen when viewed from one side of the street. A building is visible if there are no taller buildings between it and the observer. Write a function `max_visible_buildings(heights)` that takes in a list of integers `heights`, where each integer represents the height of a building. The function should return an integer representing the maximum number of buildings visible from either the left or the right. # Input - `heights`: A list of integers (1 ≤ len(heights) ≤ 1000, 1 ≤ heights[i] ≤ 1000). # Output - Return a single integer representing the maximum number of buildings visible from one side of the street. # Example ```python max_visible_buildings([4, 2, 3, 1]) # Output: 3 max_visible_buildings([1, 2, 3, 4, 5]) # Output: 5 ``` # Explanation In the first example, viewing from the left, you can see buildings with heights [4, 2, 3], but not 1 because it is hidden by 3. In the second example, viewing from either left or right, all buildings are visible because they are in increasing order.","solution":"def max_visible_buildings(heights): Returns the maximum number of buildings visible from either the left or the right side of the street. def count_visible(heights): max_height = 0 visible_count = 0 for height in heights: if height > max_height: visible_count += 1 max_height = height return visible_count left_to_right = count_visible(heights) right_to_left = count_visible(heights[::-1]) return max(left_to_right, right_to_left)"},{"question":"You are given a sequence of integers. Your task is to determine the length of the longest subsequence where the difference between the maximum and minimum elements is at most a given integer ( D ). A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. # Input The first line contains an integer ( T ) (1 leq T leq 100) — the number of test cases. Each test case consists of two lines: - The first line of each test case contains two integers ( n ) and ( D ) (1 leq n leq 10^5, 0 leq D leq 10^9) — the length of the sequence and the allowed difference, respectively. - The second line contains ( n ) integers ( a_1, a_2, ldots, a_n ) (1 leq a_i leq 10^9) — the sequence. # Output For each test case, print one integer — the length of the longest subsequence where the difference between the maximum and minimum elements is at most ( D ). # Example Input ``` 2 5 3 1 5 3 8 6 4 2 4 4 4 4 ``` Output ``` 3 4 ``` # Explanation For the first test case, the longest subsequence with a difference at most 3 is either [1, 3, 5] or [3, 5, 6], both of length 3. For the second test case, any of the subsequences with all elements being 4 will have a difference of 0, so the answer is the length of the sequence itself, which is 4.","solution":"def longest_subsequence_length(t, test_cases): results = [] for i in range(t): n, D = test_cases[i][0] sequence = test_cases[i][1] # Sort the sequence to easily find subsequences with elements within the range D sorted_sequence = sorted(sequence) max_length = 0 start = 0 for end in range(n): # Increase the start index to ensure that the difference between max and min elements # in the current window is at most D while sorted_sequence[end] - sorted_sequence[start] > D: start += 1 # Update the max_length with the current window size max_length = max(max_length, end - start + 1) results.append(max_length) return results"},{"question":"You are given an array of n integers where each integer represents the height of a building in a row of buildings. Gentle John considers a view beautiful if and only if from any building he can see at least one other building that is taller than the current building. Can you help Gentle John determine the minimum number of buildings he needs to reduce the height of to make the view beautiful from every building? The first line contains a single integer n (1 ≤ n ≤ 100), the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000), the heights of the buildings. Print a single integer - the minimum number of buildings that need to be reduced in height. # Example Input: ``` 5 4 3 2 5 1 ``` Output: ``` 1 ``` Explanation: Reducing the height of the fourth building (from 5 to 3) makes the view beautiful from all the buildings.","solution":"def minimum_buildings_to_reduce(n, heights): Determine the minimum number of buildings to reduce in height to make the view beautiful. Args: n (int): Number of buildings heights (list): List of building heights Returns: int: Minimum number of buildings to reduce in height tallest_building_height = max(heights) return sum(1 for h in heights if h == tallest_building_height)"},{"question":"Given an array of integers and a positive integer k, write a function that finds the k-th largest element in the array. The array might contain duplicate elements. For example, given the array [7, 10, 4, 3, 20, 15] and k = 3, the 3rd largest element is 10. Function signature: int kth_largest(int[] arr, int k) Requirements: - Define the function using the specified signature. - Assume 1 ≤ k ≤ length of the array. - Optimize the function to run efficiently for large inputs, considering both time and space complexity. Example Input: [7, 10, 4, 3, 20, 15] 3 Example Output: 10","solution":"import heapq def kth_largest(arr, k): Returns the k-th largest element in the array. return heapq.nlargest(k, arr)[-1]"},{"question":"In a mystical land called Arithmia, there are m different types of magical items, each with a distinct power value. For each i (1 ≤ i ≤ m), the power value of the i-th item is given by pi. The power value of an item can be any integer (positive, negative, or zero). Elias, a wise wizard, has j spells, each defined by a pair of integers. For each k (1 ≤ k ≤ j), the pair (rk, sk) indicates that the power value of rk should be strictly less than the power value of sk. All rk and sk are guaranteed to be distinct within each pair and across pairs. Help Elias find the number of permutations of items\' power values that satisfy all the given conditions. Two permutations are considered different if there is some i (1 ≤ i ≤ m), such that the power value of the i-th item in one permutation is different from the power value of the i-th item in another permutation. Since the number of permutations can be very large, output the result modulo 1000000007 (10^9 + 7). If there are no valid permutations, output 0. The first line contains two space-separated integers, m and j (1 ≤ m ≤ 200; 0 ≤ j ≤ m). The second line contains m space-separated integers, p1, p2, ..., pm. The next j lines each contain two distinct space-separated integers, rk and sk (1 ≤ rk, sk ≤ m; rk ≠ sk). Output a single integer, the number of valid permutations of the magical items\' power values that Elias could have, modulo 1000000007 (10^9 + 7). Example: Input: 4 2 3 1 6 2 1 4 2 3 Output: 6 Explanation: For the provided example, the following 6 permutations of power values satisfy the conditions: (1, 6, 2, 3), (1, 6, 3, 2), (2, 6, 1, 3), (1, 2, 6, 3), (2, 3, 6, 1), (2, 1, 6, 3)","solution":"from itertools import permutations MOD = 1000000007 def count_valid_permutations(m, j, p, conditions): def is_valid(perm, conditions): indx = {val: idx for idx, val in enumerate(perm)} for rk, sk in conditions: if indx[rk] >= indx[sk]: return False return True items = range(1, m + 1) valid_count = 0 for perm in permutations(items): if is_valid(perm, conditions): valid_count = (valid_count + 1) % MOD return valid_count # Example usage: # m, j = 4, 2 # p = [3, 1, 6, 2] # conditions = [(1, 4), (2, 3)] # print(count_valid_permutations(m, j, p, conditions)) # Output: 6"},{"question":"In a certain tournament, each player competes with every other player exactly once. The ability of each player is represented as a numerical score. The score determines the likelihood of winning against another player — a player with a higher score always wins against a player with a lower score. In the event of a tie (when two players have the same score), the player with a smaller index (i.e., who appears first in the list) wins. Given a list of integers representing the scores of players, output the list of players who will still be undefeated when the tournament ends. The list of scores is given as an input, where each integer represents a player\'s score. Your task is to find the players, represented by their indices (0-based), who will remain undefeated. The first line contains an integer n (1 ≤ n ≤ 100), which is the number of players. The second line contains n integers representing the scores of the players. Print the indices of the undefeated players, each separated by a space, in ascending order. Example: Input: 5 2 3 2 1 4 Output: 1 4","solution":"def find_undefeated_players(scores): Returns a list of indices of players who will remain undefeated. n = len(scores) max_score = max(scores) undefeated_indices = [i for i in range(n) if scores[i] == max_score] return undefeated_indices"},{"question":"Polycarp is a programmer who loves prime numbers. Recently, he encountered a problem where he needs to find out the smallest prime number which is greater than or equal to a given integer. Help Polycarp solve this problem efficiently as he might need to perform this operation multiple times. The first line of the input contains an integer t (1 le t le 10^4) — the number of test cases. Each of the following t lines contains one integer x (1 le x le 10^9) — the number for which Polycarp needs to find the smallest prime number greater than or equal to x. For each test case, print the smallest prime number which is greater than or equal to x. # Example **Input:** ``` 3 10 14 20 ``` **Output:** ``` 11 17 23 ``` # Note In the first test case, the smallest prime number greater than or equal to 10 is 11. In the second test case, it is 17 and in the third test case, it is 23.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_smallest_prime_gte(x): Find the smallest prime number greater than or equal to x. while not is_prime(x): x += 1 return x def smallest_prime_greater_equal(test_cases): Given a list of integers, returns a list of the smallest prime numbers greater than or equal to each integer. results = [] for x in test_cases: results.append(find_smallest_prime_gte(x)) return results"},{"question":"# Problem Statement: Weighted Path Queries You are given a tree with `n` nodes (numbered from 1 to `n`) and `n-1` edges. Each edge of the tree has a weight assigned to it. The weight of the edge between node `ui` and node `vi` is denoted by `wi`. Your task is to perform `q` queries on this tree. Each query specifies two nodes `ai` and `bi`, and you need to find the sum of weights of all edges on the path from node `ai` to node `bi`. # Input Format - The first line contains two integers `n` and `q` (1 ≤ `n`, `q` ≤ 100,000) — the number of nodes in the tree and the number of queries. - The following `n-1` lines each contain three integers `ui`, `vi`, and `wi` (1 ≤ `ui`, `vi` ≤ `n`, 1 ≤ `wi` ≤ 1000) — representing an edge between nodes `ui` and `vi` with weight `wi`. - Each of the following `q` lines contains two integers `ai` and `bi` (1 ≤ `ai`, `bi` ≤ `n`) — representing a query that asks for the sum of weights on the path from node `ai` to node `bi`. # Output Format For each query, output a single integer — the sum of weights on the path from node `ai` to node `bi`. # Example Input: ``` 5 3 1 2 3 1 3 2 3 4 4 3 5 1 2 4 4 5 3 5 ``` Output: ``` 9 5 1 ``` # Explanation In this example, the tree is as follows: - 1-2 with weight 3 - 1-3 with weight 2 - 3-4 with weight 4 - 3-5 with weight 1 For each query: 1. The path from node 2 to 4 is: 2 -> 1 -> 3 -> 4 with total weight 3 + 2 + 4 = 9. 2. The path from node 4 to 5 is: 4 -> 3 -> 5 with total weight 4 + 1 = 5. 3. The path from node 3 to 5 is: 3 -> 5 with total weight 1.","solution":"from collections import defaultdict class Tree: def __init__(self, n): self.n = n self.adj = defaultdict(list) self.parent = [-1] * (n + 1) self.weight = [-1] * (n + 1) self.depth = [-1] * (n + 1) self.dist_to_root = [0] * (n + 1) def add_edge(self, u, v, w): self.adj[u].append((v, w)) self.adj[v].append((u, w)) def dfs(self, node, par, depth, dist): self.parent[node] = par self.depth[node] = depth self.dist_to_root[node] = dist for neighbor, weight in self.adj[node]: if neighbor != par: self.dfs(neighbor, node, depth + 1, dist + weight) def lca(self, u, v): # Ensure u is deeper or at the same depth as v if self.depth[u] < self.depth[v]: u, v = v, u diff = self.depth[u] - self.depth[v] # Bring u up to the same depth as v while diff > 0: u = self.parent[u] diff -= 1 # Find the common ancestor while u != v: u = self.parent[u] v = self.parent[v] return u def query(self, u, v): lca = self.lca(u, v) return self.dist_to_root[u] + self.dist_to_root[v] - 2 * self.dist_to_root[lca] def solve(n, q, edges, queries): tree = Tree(n) for u, v, w in edges: tree.add_edge(u, v, w) tree.dfs(1, -1, 0, 0) # Assuming 1 is the root node results = [] for u, v in queries: results.append(tree.query(u, v)) return results"},{"question":"You are given a binary tree where each node contains a positive integer. The tree is rooted at node 1. Your task is to answer queries about the sum of values in subtrees of given nodes efficiently. Specifically, you will be given a binary tree with N nodes, where each node contains a positive integer value. You need to prepare a function that answers Q queries. Each query provides a node number and asks for the sum of the values of all nodes in the subtree rooted at the given node. Input: - The first line contains an integer N (2 leq N leq 10^5) — the number of nodes in the tree. - The second line contains N integers a_1, a_2, ..., a_N (1 leq a_i leq 10^4) — the values of the nodes. - Each of the next N-1 lines contains two integers u and v (1 leq u, v leq N) — denoting an edge in the tree connecting nodes u and v. - The next line contains an integer Q (1 leq Q leq 10^5) — the number of queries. - Each of the next Q lines contains a single integer x (1 leq x leq N) — the root of the subtree for which the sum is to be found. Output: - Print Q lines, each containing a single integer — the sum of the values in the subtree rooted at the given node for each query. Example: Input: ``` 5 1 2 3 4 5 1 2 1 3 3 4 3 5 3 3 4 1 ``` Output: ``` 12 4 15 ``` Explanation: - The value of the subtree rooted at node 3 includes nodes 3, 4, and 5 with values 3 + 4 + 5 = 12. - The value of the subtree rooted at node 4 only includes node 4 itself with value 4. - The value of the entire tree rooted at node 1 includes nodes 1, 2, 3, 4, and 5 with values 1 + 2 + 3 + 4 + 5 = 15.","solution":"def calculate_subtree_sums(N, values, edges, queries): from collections import defaultdict, deque tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Calculate subtree sums using DFS subtree_sum = [0] * (N + 1) visited = [False] * (N + 1) def dfs(node): visited[node] = True subtree_sum[node] = values[node - 1] for neighbor in tree[node]: if not visited[neighbor]: dfs(neighbor) subtree_sum[node] += subtree_sum[neighbor] # Start DFS from the root (node 1) dfs(1) # Process each query result = [] for query in queries: result.append(subtree_sum[query]) return result"},{"question":"You are given a set of articles from different news categories. Each article has a category, identified by an integer from 1 to 4. Your task is to write a program that takes as input the text of an article and predicts its category. Categories: 1. Sports 2. Politics 3. Technology 4. Health Each input article is structured as follows: - The first line contains the title of the article. - The subsequent lines contain the body of the article. The total length of an article (title + body) will not exceed 15,000 characters. Training data has been provided for you in the following link: http://download4.neuralnet.com/category_training.zip. The archive contains four directories named \\"1\\", \\"2\\", \\"3\\", \\"4\\". Each directory contains articles belonging to the respective category. Write a program to categorize a given article into one of the four categories based on its content. Input: - The first line: The title of the article. - The subsequent lines: The body of the article. Output: - An integer from 1 to 4, representing the predicted category of the article. Note: The articles used as test cases may not be part of the provided training data. Your model should use the training data to generalize and accurately predict the categories for unseen articles.","solution":"import os from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.pipeline import make_pipeline import joblib # Function to load training data def load_training_data(directory): texts = [] labels = [] for category in range(1, 5): category_dir = os.path.join(directory, str(category)) for filename in os.listdir(category_dir): with open(os.path.join(category_dir, filename), \'r\', encoding=\'utf-8\') as file: text = file.read() texts.append(text) labels.append(category) return texts, labels # Function to preprocess and train the model def train_model(training_data_directory): texts, labels = load_training_data(training_data_directory) model = make_pipeline(TfidfVectorizer(), MultinomialNB()) model.fit(texts, labels) joblib.dump(model, \'article_category_model.pkl\') return model # Load trained model def load_model(): model = joblib.load(\'article_category_model.pkl\') return model # Function to predict the category of an article def predict_category(title, body): model = load_model() text = title + \' \' + body prediction = model.predict([text]) return prediction[0] # Assuming we\'ve pre-trained and saved the model # train_model(\'path_to_training_data_directory\') # Example usage # category = predict_category(\\"Sample Title\\", \\"This is the body of the article.\\") # print(category)"},{"question":"Write a function that takes in a list of integers and an integer target. The function should find two distinct integers in the list that add up to the target number. If such a pair is found, return the indices of the two numbers. If no such pair exists, return an empty list. The input contains a list of integers `nums` and an integer `target`, where `1 ≤ len(nums) ≤ 10^5` and `-10^9 ≤ nums[i], target ≤ 10^9`. Example Input: - nums: [2, 7, 11, 15] - target: 9 Example Output: - [0, 1] Note: The returned indices should be in ascending order. If there are multiple pairs, return the pair with the smallest index first.","solution":"def two_sum(nums, target): Finds two distinct integers in the list that add up to the target number. Returns the indices of the two numbers. If no such pair exists, returns an empty list. :param nums: List of integers :param target: Integer target sum :return: List of two integers representing the indices of the numbers that add up to the target, or an empty list if no such pair exists num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"You are given a directed, weighted graph with n nodes and m edges. Each edge has an integer weight associated with it. Your task is to determine the shortest distance from a given source node s to every other node in the graph. Additionally, you need to answer q queries where each query asks for the shortest distance between two specific nodes. The distance between two nodes u and v is defined as the sum of the weights of the edges on the shortest path from u to v. If there is no path between u and v, the distance is considered to be infinity. # Input - The first line contains two integers n and m (1 le n le 10^5, 0 le m le 2 cdot 10^5) - the number of nodes and the number of edges, respectively. - The next m lines each contain three integers u, v, and w (1 le u, v le n, 1 le w le 10^6) - indicating there is a directed edge from node u` to node v with weight w. - The next line contains one integer q (1 le q le 10^5) - the number of queries. - The next q lines each contain two integers a and b (1 le a, b le n) - a query asking for the shortest distance from node a to node b. # Output - Print q lines, each containing a single integer: the shortest distance from node a to node b for each query. If there is no path from a` to b`, print -1. # Example Input ``` 5 6 1 2 2 2 3 4 3 4 1 4 5 7 1 3 6 1 4 10 3 1 5 2 4 3 1 ``` Output ``` 14 5 -1 ``` # Note In the given example: - The shortest path from node 1 to node 5 is 1 -> 2 -> 3 -> 4 -> 5 with a total weight of 14. - The shortest path from node 2 to node 4 is 2 -> 3 -> 4 with a total weight of 5. - There is no path from node 3 to node 1, hence the answer is -1.","solution":"import heapq def dijkstra(n, edges, src): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) dist = [float(\'inf\')] * (n + 1) dist[src] = 0 pq = [(0, src)] while pq: d, node = heapq.heappop(pq) if d > dist[node]: continue for neighbor, weight in graph[node]: new_dist = dist[node] + weight if new_dist < dist[neighbor]: dist[neighbor] = new_dist heapq.heappush(pq, (new_dist, neighbor)) return dist def shortest_paths(n, m, edges, q, queries): all_pairs = {} for u in range(1, n + 1): dist = dijkstra(n, edges, u) for v in range(1, n + 1): all_pairs[(u, v)] = dist[v] if dist[v] != float(\'inf\') else -1 results = [] for a, b in queries: results.append(all_pairs[(a, b)]) return results"},{"question":"Create a function `find_missing_number` that takes a list of integers containing a range of numbers from `0` to `n` (inclusive), but with one number missing. Your task is to find and return the missing number. Use the following signature for your function: ```python def find_missing_number(nums: List[int]) -> int: # Your code here ``` # Example: ```python find_missing_number([3, 0, 1]) # Output: 2 find_missing_number([0, 1]) # Output: 2 find_missing_number([9,6,4,2,3,5,7,0,1]) # Output: 8 ``` # Constraints: - The input list `nums` will always contain at least one number and will always have one missing number in the range. - The list will contain distinct integers. Implement the function efficiently, aiming for a time complexity of O(n).","solution":"from typing import List def find_missing_number(nums: List[int]) -> int: Given a list of integers containing a range from 0 to n (inclusive) with one missing number, this function finds and returns the missing number. n = len(nums) total_sum = n * (n + 1) // 2 actual_sum = sum(nums) return total_sum - actual_sum"},{"question":"Anna is working on a text-processing tool and needs to implement a substring search feature. Specifically, given two strings, she needs to find the starting indices of all occurrences of the second string (pattern) within the first string (text). Write a function `find_occurrences` that takes two strings as input: the text and the pattern, and returns a list of starting indices where the pattern is found in the text. The search should be case sensitive. # Function Signature ```python def find_occurrences(text: str, pattern: str) -> List[int]: ``` # Input - The function receives two parameters: - `text`: a string containing the text in which to search (1 ≤ len(text) ≤ 10^6) - `pattern`: a string containing the pattern to search for (1 ≤ len(pattern) ≤ 10^6) # Output - The function should return a list of integers indicating the starting indices of all occurrences of the pattern in the text. - If the pattern does not occur in the text, return an empty list. # Examples Example 1 ```python text = \\"ababab\\" pattern = \\"ab\\" find_occurrences(text, pattern) ``` Output: ```python [0, 2, 4] ``` Example 2 ```python text = \\"mississippi\\" pattern = \\"iss\\" find_occurrences(text, pattern) ``` Output: ```python [1, 4] Example 3 ``` text = \\"abcdefgh\\" pattern = \\"xyz\\" find_occurrences(text, pattern) ``` Output: ```python [] ``` # Notes - The function should be efficient enough to handle large inputs as text and pattern lengths can go up to 10^6. - The solution should consider edge cases such as empty strings, single-character patterns, and overlapping occurrences.","solution":"def find_occurrences(text, pattern): Returns a list of starting indices where the pattern is found in the text. result = [] text_length = len(text) pattern_length = len(pattern) if pattern_length == 0: return [] # Iterate over possible start indices in text for i in range(text_length - pattern_length + 1): if text[i:i + pattern_length] == pattern: result.append(i) return result"},{"question":"You are given a grid of size n times m filled with lowercase English letters. You are also given q queries. Each query consists of two strings s and t, of length ns and nt, respectively. For each query, you are required to find the longest common spanning sequence (LCSS) of the two strings. A common spanning sequence is defined as a sequence of letters that appears in both strings in the same order, but not necessarily contiguously. The length of the longest common spanning sequence of two strings x=x_1 x_2 ldots x_{nx} and y=y_1 y_2 ldots y_{ny} is the maximum k such that there exist indices 1 leq i_1 < i_2 < ... < i_k leq nx and 1 leq j_1 < j_2 < ... < j_k leq ny with x_{i_1} = y_{j_1}, x_{i_2} = y_{j_2}, ldots, x_{i_k} = y_{j_k}. The first line contains the integers n and m separated by a space (1 leq n, m leq 200). The next n lines contain m lowercase English letters each, representing the grid. The following line contains one integer q, the number of queries (1 leq q leq 2000). Each of the next q lines contains two strings s and t separated by a space, whose combined length does not exceed 400 characters. For each query, output one integer: the length of the longest common spanning sequence for the given two strings. Example: Input: ``` 2 2 ab cd 2 abcd abc a a ``` Output: ``` 3 1 ```","solution":"def longest_common_span_seq(s, t): ns, nt = len(s), len(t) dp = [[0] * (nt + 1) for _ in range(ns + 1)] for i in range(1, ns + 1): for j in range(1, nt + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[ns][nt] def process_queries(grid, queries): results = [] for s, t in queries: result = longest_common_span_seq(s, t) results.append(result) return results def main(n, m, grid, q, queries): results = process_queries(grid, queries) return results"},{"question":"You are a book collector and have a unique bookshelf to showcase your collection. Your bookshelf consists of n compartments in a single row, each of which can hold a certain number of books. Recently, you\'ve started receiving books every day, and you place all of them into one compartment each day. However, due to daily fluctuations in book deliveries, the number of books varies each day, as does the compartment into which you decide to place them. Given two arrays, initially containing the number of books in each compartment at the start (`initial_books`), and then how many books are in each compartment after a sequence of operations (`final_books`), determine if it is possible to go from the initial state to the final state by only adding books to one compartment per day. If possible, determine the minimum number of days it would take to achieve the final configuration. Input: - The first line contains a single integer n (1 ≤ n ≤ 100), the number of compartments on the bookshelf. - The second line contains n integers separated by spaces, representing the initial number of books in each compartment. - The third line contains n integers separated by spaces, representing the final number of books in each compartment. Output: - If it is possible to achieve the final configuration by adding books to one compartment per day, print the minimum number of days required. - If it is impossible, print \\"Impossible\\" (quotes for clarity). Example: Input: ``` 3 1 2 3 3 4 5 ``` Output: ``` 2 ``` Explanation: - On the first day, 2 books are added to the first compartment, making the compartments\' count [3, 2, 3]. - On the second day, 2 books are added to the second compartment, resulting in [3, 4, 3]. - On the third day, 2 books are added to the third compartment, resulting in the final state [3, 4, 5]. Input: ``` 3 1 2 3 1 3 2 ``` Output: ``` Impossible ``` Explanation: The given transformation cannot be achieved because the books\' count decreased in the third compartment, which is not allowed by the operations described.","solution":"def min_days_to_reach_final_state(n, initial_books, final_books): total_days = 0 for i in range(n): if final_books[i] < initial_books[i]: return \\"Impossible\\" total_days += final_books[i] - initial_books[i] return total_days"},{"question":"You are given a rectangular grid of size n x m. Each cell in the grid either contains a 1 or a 0. A cell containing 1 represents an obstacle, and a cell containing 0 represents an empty space. You need to determine the minimum distance you have to travel from the top-left corner of the grid (cell (1,1)) to the bottom-right corner of the grid (cell (n,m)) without passing through any obstacles. You can only move up, down, left, or right from one empty space to another empty space. If it is impossible to reach the destination cell from the starting cell, print -1. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains m integers representing the grid, where each integer is either 0 or 1. Print a single integer — the minimum distance from the top-left corner to the bottom-right corner, or -1 if no such path exists. Example: Input: 3 3 0 1 0 0 0 0 0 1 0 Output: 4","solution":"from collections import deque def min_distance(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dr, dc in directions: new_x, new_y = x + dr, y + dc if 0 <= new_x < n and 0 <= new_y < m and (new_x, new_y) not in visited and grid[new_x][new_y] == 0: visited.add((new_x, new_y)) queue.append((new_x, new_y, dist + 1)) return -1 # Example usage: # grid = [ # [0, 1, 0], # [0, 0, 0], # [0, 1, 0] # ] # print(min_distance(grid)) # Output: 4"},{"question":"You are given a matrix of integers representing an N x N grid of cells. Each cell contains an integer representing the altitude of that point on the grid. Your task is to determine the size of the largest region of cells on the grid that are connected and have the same altitude. Two cells are considered connected if they share an edge. Write a function that takes the grid as input and returns the size of the largest region. Your function should have the following signature: ```python def largest_altitude_region(grid: List[List[int]]) -> int: pass ``` # Example ```python grid = [ [1, 1, 2, 3], [4, 1, 2, 3], [4, 4, 4, 3], [1, 2, 2, 2] ] assert largest_altitude_region(grid) == 4 # The largest connected region has 4 cells with the altitude of 4. ```","solution":"from typing import List def largest_altitude_region(grid: List[List[int]]) -> int: Returns the size of the largest connected region with the same altitude in the grid. rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c, altitude): Depth-First Search to count the size of connected cells with the same altitude. if r < 0 or r >= rows or c < 0 or c >= cols or visited[r][c] or grid[r][c] != altitude: return 0 visited[r][c] = True size = 1 size += dfs(r + 1, c, altitude) size += dfs(r - 1, c, altitude) size += dfs(r, c + 1, altitude) size += dfs(r, c - 1, altitude) return size max_region_size = 0 for r in range(rows): for c in range(cols): if not visited[r][c]: current_region_size = dfs(r, c, grid[r][c]) max_region_size = max(max_region_size, current_region_size) return max_region_size"},{"question":"You are given a grid with n rows and m columns (1 ≤ n, m ≤ 50). Each cell in this grid is either an empty cell denoted by \'.\' or an obstacle denoted by \'#\'. You can move up, down, left, or right to adjacent cells, but you cannot move onto or through obstacles. Each move costs you 1 unit of energy. Given a starting cell and a target cell in this grid, determine the minimum amount of energy required to reach the target cell from the starting cell. If it is not possible to reach the target cell, output \\"Impossible\\" without quotes. The input format is as follows: - The first line contains two integers n and m. - The following n lines each contain a string of length m, representing the grid. - The next line contains two integers r1 and c1 (0 ≤ r1 < n, 0 ≤ c1 < m), the row and column of the starting cell. - The following line contains two integers r2 and c2 (0 ≤ r2 < n, 0 ≤ c2 < m), the row and column of the target cell. Output the minimum amount of energy required to reach the target cell from the starting cell or \\"Impossible\\" if it cannot be reached. **Example Input:** ``` 4 4 .... .#.. ..#. .... 0 0 3 3 ``` **Example Output:** ``` 6 ``` **Explanation:** Here, the shortest path from (0, 0) to (3, 3) requires moving 6 times: right (0,1), right (0,2), down (1,2), down (2,2), down (3,2), right (3,3). Thus, the required energy is 6 units.","solution":"from collections import deque def min_energy_to_reach_target(n, m, grid, r1, c1, r2, c2): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(r1, c1, 0)]) # (current_row, current_column, current_steps) visited[r1][c1] = True while queue: row, col, steps = queue.popleft() if row == r2 and col == c2: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and not visited[new_row][new_col] and grid[new_row][new_col] == \'.\': visited[new_row][new_col] = True queue.append((new_row, new_col, steps + 1)) return \\"Impossible\\""},{"question":"Given an array of integers, write a function to find the \\"peak\\" element in the array. An element is considered a peak if it is greater than or equal to its neighbors. For corner elements, we need to consider only one neighbor. Return the index of any peak element. You can assume that the array contains at least one peak element. # Function Signature ```python def find_peak_element(nums: List[int]) -> int: ``` # Input - A list of integers `nums` (1 ≤ len(nums) ≤ 1000, -10^4 ≤ nums[i] ≤ 10^4). # Output - An integer representing the index of a peak element. # Example ```python assert find_peak_element([1, 2, 3, 1]) == 2 assert find_peak_element([1, 2, 1, 3, 5, 6, 4]) in {1, 5} ``` Note: - The function should efficiently find a peak element, ideally in O(log n) time complexity using a binary search approach.","solution":"from typing import List def find_peak_element(nums: List[int]) -> int: Returns the index of a peak element in the list nums. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[mid + 1]: right = mid else: left = mid + 1 return left"},{"question":"A robotic vacuum cleaner is programmed to clean a rectangular grid floor. The grid is an `n x m` matrix, where each cell in the grid is either cleanable or an obstacle. The vacuum cleaner starts at the top-left corner of the grid (cell (0,0)) and can move to adjacent cells (up, down, left, right), but it can\'t pass through obstacles or go outside the grid. The vacuum cleaner is tasked with cleaning as many cleanable cells as possible in minimal moves. However, it must return to its starting position once all accessible cleanable cells have been visited. Write a program to find the minimum number of moves required for the vacuum cleaner to clean all the accessible cleanable cells and return to the starting position. If the vacuum cleaner cannot clean any cell or return to the starting point, return -1. # Input: - An integer `n` representing the number of rows in the grid (1 ≤ n ≤ 50). - An integer `m` representing the number of columns in the grid (1 ≤ m ≤ 50). - A 2D array `grid` of size `n x m`, where each element is either `0` (indicating a cleanable cell) or `1` (indicating an obstacle). # Output: - An integer representing the minimum number of moves required for the vacuum cleaner to clean all accessible cells and return to the starting position, or -1 if it is not possible. # Examples: Example 1: ```plaintext Input: 3 3 [[0, 0, 0], [0, 1, 0], [0, 0, 0]] Output: 8 ``` Example 2: ```plaintext Input: 2 2 [[0, 1], [1, 0]] Output: -1 ``` # Note: In the first example, the vacuum cleaner can follow the path (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (0,0) to clean all the cells and return to the starting position in 8 moves.","solution":"from collections import deque def min_moves_to_clean(n, m, grid): if grid[0][0] == 1: return -1 def is_in_bounds(x, y): return 0 <= x < n and 0 <= y < m def bfs(start): queue = deque([start]) dist = {start: 0} while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_in_bounds(nx, ny) and grid[nx][ny] == 0 and (nx, ny) not in dist: dist[(nx, ny)] = dist[(x, y)] + 1 queue.append((nx, ny)) return dist dist = bfs((0, 0)) if len(dist) != sum(row.count(0) for row in grid): return -1 return_to_start_dist = bfs((0, 0)) max_distance = max(return_to_start_dist.values()) return max_distance * 2"},{"question":"You are given a list of n integers and q queries. Each query can either update an element in the list or ask for the greatest common divisor (GCD) of a subarray. 1) Update an element at a specific position in the list. 2) Query the GCD of a subarray from index l to r (inclusive). Your task is to process all the queries and return the results of each of the GCD queries. Input: The first line contains two integers n (1 ≤ n ≤ 100,000) and q (1 ≤ q ≤ 100,000) — the number of elements in the list and the number of queries, respectively. The second line contains n integers separated by spaces — the elements of the list. The following q lines each describe a query: - If the query is of the first type, it is given as `1 i x`, which means update the element at position i (1-based index) to x. - If the query is of the second type, it is given as `2 l r`, which means find the GCD of the subarray from l to r (inclusive). Output: For each query of the second type, print the result (GCD of the specified subarray) on a new line. Example: Input: ``` 5 3 2 3 6 9 5 2 1 3 1 3 14 2 2 4 ``` Output: ``` 1 1 ```","solution":"from math import gcd from functools import reduce def process_queries(n, q, array, queries): # Function to compute GCD of a list def compute_gcd(arr): return reduce(gcd, arr) results = [] for query in queries: if query[0] == 1: # Update query _, i, x = query array[i-1] = x elif query[0] == 2: # GCD query _, l, r = query subarray = array[l-1:r] results.append(compute_gcd(subarray)) return results"},{"question":"You are given a string consisting of lowercase English letters, and you can perform some number of operations on the string, where in each operation you can select any substring and remove all its occurrences from the string. Your task is to determine the minimum number of operations required to remove all characters from the string. # Input - The first line contains an integer T (1 ≤ T ≤ 10), the number of test cases. - For each test case, there is a single line containing a string s (1 ≤ |s| ≤ 1000). # Output For each test case, print the minimum number of operations required to remove all characters from the string. # Example Input ``` 3 ababc aaaa abcd ``` Output ``` 3 1 4 ``` # Note - In the first test case, one possible way to remove all characters could be: 1. Remove \\"ab\\" 2. Remove \\"ab\\" 3. Remove \\"c\\" - In the second test case, you can remove \\"aaaa\\" in one operation. - In the third test case, you need to remove each character individually \\"a\\", \\"b\\", \\"c\\", and \\"d\\".","solution":"def min_operations_to_remove_all(s): Returns the minimum number of operations required to remove all characters from the string s. # The minimum number of operations needed is the number of unique characters in the string unique_characters = set(s) return len(unique_characters) def solve(test_cases): results = [] for s in test_cases: results.append(min_operations_to_remove_all(s)) return results"},{"question":"You are given an array of n integers. Your task is to find the minimum number of elements that need to be removed so that the remaining elements of the array form a strictly increasing sequence. The first line contains an integer n (1 ≤ n ≤ 100). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Print a single integer — the minimum number of elements to remove to make the array strictly increasing. For example, consider the following cases: - In the first case, the optimal answer is to remove 2 elements to get the sequence 1, 2, 3, 4. - In the second case, the optimal answer is to remove 0 elements as the sequence is already strictly increasing.","solution":"def min_removals_to_increasing_sequence(arr): Finds the minimum number of elements to remove from the array to make the remaining elements form a strictly increasing sequence. Parameters: arr (List[int]): The input array of integers. Returns: int: The minimum number of elements to remove. n = len(arr) # Edge case: If the array has 1 or less elements, no need to remove anything if n <= 1: return 0 # Create a list to store the length of the longest increasing subsequence ending at each index lis = [1] * n # Compute the length of the longest increasing subsequence using dynamic programming for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) # The length of the longest increasing subsequence longest_increasing_subsequence_length = max(lis) # The minimum number of elements to remove return n - longest_increasing_subsequence_length"},{"question":"You are given an array of integers containing both positive and negative numbers. Your task is to find the length of the longest subarray with sum equal to zero. # Input: - The first line contains an integer n (1 leq n leq 10^5) – the number of elements in the array. - The second line contains n integers separated by spaces, each element a_i (-10^9 leq a_i leq 10^9) – the elements of the array. # Output: - Print a single integer – the length of the longest subarray with sum equal to zero. If no such subarray exists, print 0. # Example: Input: ``` 8 15 -2 2 -8 1 7 10 23 ``` Output: ``` 5 ``` # Explanation: In the example given: - The subarray `[-2, 2, -8, 1, 7]` has the sum 0, and its length is 5, which is the longest among any such subarrays. Develop an efficient algorithm to solve this problem considering the constraints. Using a straight forward approach might not be possible within the time limits for large inputs, so consider utilizing data structures that can enhance performance.","solution":"def longest_subarray_with_zero_sum(arr): prefix_sum_map = {} max_length = 0 current_sum = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum == 0: max_length = i + 1 elif current_sum in prefix_sum_map: max_length = max(max_length, i - prefix_sum_map[current_sum]) else: prefix_sum_map[current_sum] = i return max_length"},{"question":"You are given two strings, s and t. You have to determine if you can obtain t by removing some characters (possibly zero) from s without changing the order of the remaining characters. For example, if you have s = \\"codingassessment\\" and t = \\"cat\\", you must determine whether you can remove some characters from s to get t. In this case, the answer is \\"yes\\" because you can remove the characters \\"o\\", \\"d\\", \\"i\\", \\"n\\", \\"g\\", \\"s\\", \\"s\\", \\"e\\", \\"s\\", \\"m\\", \\"e\\", \\"n\\" to obtain \\"cat\\". The first line contains a single integer q (1 le q le 10^5) - the number of queries. The following lines contains pairs of strings s and t. For each query, print \\"YES\\" if you can obtain t by removing some characters from s without changing the order of the remaining characters. Otherwise, print \\"NO\\". **Input format:** ``` q s_1 t_1 s_2 t_2 ... s_q t_q ``` **Output format:** ``` Output \\"YES\\" or \\"NO\\" for each query in a new line. ``` **Sample Input:** ``` 3 codingassessment cat hello world abcde aec ``` **Sample Output:** ``` YES NO NO ```","solution":"def can_form_by_removal(s, t): Determines if t can be formed by removing some characters from s without changing the order of remaining characters. it = iter(s) return all(char in it for char in t) def process_queries(queries): Processes a list of queries and returns a list of results for each query. :param queries: List of tuples where each tuple contains strings s and t. :return: List of strings \\"YES\\" or \\"NO\\" for each query. results = [] for s, t in queries: if can_form_by_removal(s, t): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of non-negative integers. Your task is to divide this list into exactly two subsets in such a way that the absolute difference of the sums of these subsets is minimized. Write a function `min_abs_diff(nums)` that, given a list of non-negative integers `nums`, returns the minimal absolute difference of the sums of two subsets that the list can be divided into. # Input - A list of non-negative integers `nums` of size `n` (1 leq n leq 1000). - Each element in `nums` is a non-negative integer and will not exceed 1000. # Output - Return an integer representing the minimal absolute difference. # Example Input: ``` nums = [1, 6, 11, 5] ``` Output: ``` 1 ``` Explanation: - One optimal way to split the list is: [1, 6, 5] and [11], or [1, 11] and [6, 5]. The absolute difference between these two sets is 1. # Constraints - `1 leq n leq 1000` - Each element in `nums` is a non-negative integer and will not exceed 1000. # Note Your solution should be well-optimized to handle the upper limits efficiently.","solution":"def min_abs_diff(nums): total_sum = sum(nums) n = len(nums) half_sum = total_sum // 2 dp = [False] * (half_sum + 1) dp[0] = True for num in nums: for j in range(half_sum, num - 1, -1): dp[j] = dp[j] or dp[j - num] for i in range(half_sum, -1, -1): if dp[i]: return total_sum - 2 * i # Example usage nums = [1, 6, 11, 5] print(min_abs_diff(nums)) # Outputs: 1"},{"question":"# Title: Robot Movement Optimization You are given a grid (n x n) where each cell has a certain number of energy points. You have a robot initially positioned at the top-left corner of the grid (0, 0). The robot can only move right or down from any cell. The robot\'s goal is to reach the bottom-right corner of the grid (n-1, n-1) while collecting the maximum total number of energy points. Write a function that takes as input the grid and returns the maximum number of energy points the robot can collect. **Input:** - An integer `n` (1 ≤ n ≤ 100), representing the size of the grid. - A 2D list `grid` of integers of size n x n where each integer `grid[i][j]` (1 ≤ grid[i][j] ≤ 100) represents the energy points in the cell at row `i` and column `j` of the grid. **Output:** - An integer representing the maximum number of energy points the robot can collect by the time it reaches the bottom-right corner of the grid. **Example:** **Input:** ``` 3 [ [5, 3, 2], [1, 4, 1], [1, 5, 8] ] ``` **Output:** ``` 25 ``` **Explanation:** The robot starts at the top-left corner of the grid with 5 energy points. The possible paths to collect the maximum energy points are: - Right, right, down, down collecting points `5 -> 3 -> 2 -> 1 -> 8` (5+3+2+1+8 = 19) - Right, down, down, right collecting points `5 -> 3 -> 4 -> 5 -> 8` (5+3+4+5+8 = 25) Therefore, the maximum points the robot can collect will be 25.","solution":"def max_energy_points(n, grid): Returns the maximum number of energy points the robot can collect from the top-left to the bottom-right corner of the grid. # Initialize a DP table to store the maximum energy points collected up to each cell dp = [[0] * n for _ in range(n)] # Fill the DP table dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1]"},{"question":"You are given an integer array and need to find the length of the longest subsequence such that the elements in the subsequence are in arithmetic progression (AP). An arithmetic progression is a sequence of numbers in which the difference between consecutive terms is constant. The first line of the input contains an integer n (1 ≤ n ≤ 2·10^5) — the length of the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Your output should be a single integer, the length of the longest arithmetic subsequence in the array. Example 1: Input: 6 3 6 9 12 15 18 Output: 6 Example 2: Input: 6 2 4 6 8 10 14 Output: 5 Notes: In example 1, the longest arithmetic subsequence is the entire array with the difference of 3. In example 2, the longest arithmetic subsequence is [2, 4, 6, 8, 10] with the difference of 2.","solution":"def longest_ap_subsequence_length(n, arr): if n <= 1: return n # Dictionary to store the lengths of APs with specific differences dp = [{} for _ in range(n)] max_length = 1 for i in range(1, n): for j in range(i): diff = arr[i] - arr[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"A company needs to automate the process of summarizing large lists of transactions. Each transaction consists of a transaction ID, an amount, a customer ID, and a timestamp. The input data consists of `n` transactions, each on a separate line, and `n` is guaranteed to be between 1 and 10^5. Each transaction is formatted as: ``` transaction_id amount customer_id timestamp ``` For example: ``` 1 250.00 C001 2023-07-19T10:15:30Z 2 300.50 C002 2023-07-19T11:00:00Z 3 250.00 C001 2023-07-20T09:00:00Z ... ``` Your task is to generate a summary report. The report should contain: 1. The total number of transactions. 2. The total volume of all transactions. 3. The unique number of customers (denoted by `customer_id`). 4. The highest transaction amount and the corresponding transaction ID and customer ID. 5. The most recent transaction timestamp. Input: The first line contains an integer `n`, the number of transactions. The next `n` lines each contain one transaction. Output: Print the following five lines, each containing one result as described above: 1. Total number of transactions. 2. Total volume of all transactions. 3. Unique number of customers. 4. Highest transaction amount, transaction ID, and customer ID. 5. Most recent transaction timestamp. Example: Input: ``` 3 1 250.00 C001 2023-07-19T10:15:30Z 2 300.50 C002 2023-07-19T11:00:00Z 3 250.00 C001 2023-07-20T09:00:00Z ``` Output: ``` 3 800.50 2 300.50 2 C002 2023-07-20T09:00:00Z ``` Explanation: - The total number of transactions is 3. - The sum of transaction amounts is 250.00 + 300.50 + 250.00 = 800.50. - There are 2 unique customers: C001 and C002. - The highest transaction amount is 300.50, which corresponds to transaction ID 2 and customer ID C002. - The most recent transaction timestamp is 2023-07-20T09:00:00Z.","solution":"def summarize_transactions(n, transactions): total_transactions = n total_volume = 0.0 customers = set() highest_transaction = (-1, 0.0, \'\', \'\') # (transaction_id, amount, customer_id, timestamp) most_recent_timestamp = \'\' for transaction in transactions: transaction_id, amount, customer_id, timestamp = transaction.split() amount = float(amount) # Update total volume total_volume += amount # Add to customers set customers.add(customer_id) # Check for highest transaction amount if amount > highest_transaction[1]: highest_transaction = (transaction_id, amount, customer_id, timestamp) # Update most recent timestamp if timestamp > most_recent_timestamp: most_recent_timestamp = timestamp return { \\"total_transactions\\": total_transactions, \\"total_volume\\": total_volume, \\"unique_customers\\": len(customers), \\"highest_transaction\\": (highest_transaction[1], highest_transaction[0], highest_transaction[2]), \\"most_recent_timestamp\\": most_recent_timestamp }"},{"question":"You are given a list of integers representing the heights of buildings arranged in a straight line. Your goal is to determine the number of buildings facing the sunset. The buildings face the sunset if they are taller than all the buildings to their left. The test consists of multiple test cases. The first line contains a single integer `t` (1leq tleq 1000) — the number of test cases. Each of the next `t` lines contains a test case with the following format: - An integer `n` (1 leq n leq 10^5) — the number of buildings. - A line containing `n` space-separated integers representing the heights of the buildings. For each test case, output a single integer representing the number of buildings that face the sunset. Example Input: ``` 2 5 4 3 2 6 1 6 9 6 7 8 5 4 ``` Output: ``` 2 1 ``` Explanation: - For the first test case, the buildings with heights [4, 3, 2, 6, 1] face the sunset if they are taller than all to their left. Therefore, buildings with height 4 and 6 face the sunset. - For the second test case, only the first building (height 9) faces the sunset since it is taller than all subsequent buildings.","solution":"def count_buildings_facing_sunset(building_heights): Returns the number of buildings facing the sunset. A building faces the sunset if it\'s taller than all buildings to its left. count = 0 max_height_so_far = float(\'-inf\') for height in building_heights: if height > max_height_so_far: count += 1 max_height_so_far = height return count def solve(test_cases): Solves multiple test cases of counting buildings facing the sunset. test_cases is a list of tuples, where each tuple contains: - an integer n: the number of buildings - a list of integers: the heights of the buildings Returns a list of integers with the results for each test case. results = [] for n, heights in test_cases: results.append(count_buildings_facing_sunset(heights)) return results"},{"question":"Given an unsorted list of unique integers, write a function to find the length of the longest consecutive elements sequence in the list. For example, given the list `[100, 4, 200, 1, 3, 2]`, the longest consecutive elements sequence is `[1, 2, 3, 4]` and its length is 4. Your function should accept the list as an input and return the integer length of the longest consecutive elements sequence. Ensure your solution has optimal time complexity.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence in an unsorted list of unique integers. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # Only attempt to build sequences from the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given an array of integers. In one move, you can either increment any element of the array by 1 or decrement any element by 1. Your task is to make all elements of the array equal using the minimum number of moves. You have to answer t independent test cases. The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 le n le 10^5) — the number of elements in the array. The second line of each test case contains n integers separated by spaces, which represent the elements of the array. For each test case, print one integer — the minimum number of moves needed to make all elements of the array equal. Consider the third test case of the example. The answer can be obtained by the following sequence of moves.","solution":"def min_moves_to_make_equal(arr): Returns the minimum number of moves needed to make all elements of the array equal. median = sorted(arr)[len(arr) // 2] # The median minimizes the sum of absolute deviations return sum(abs(x - median) for x in arr) def min_moves_multiple_cases(test_cases): Returns a list of minimum moves for each test case. results = [] for n, arr in test_cases: results.append(min_moves_to_make_equal(arr)) return results"},{"question":"You are given a string `s` and an integer `k`. Your task is to determine whether any substring of `s` of length `k` has all unique characters. The first line contains a nonempty string `s` of length at most 1000 composed of lowercase letters (a-z). The second line contains an integer `k` (1 ≤ k ≤ 1000). Output YES if any substring of length `k` is composed of unique characters and NO otherwise. For example: Input: abacabad 3 Output: YES In this example, the substring \\"bac\\" or \\"aca\\" are some of the substrings of length 3 that consist of unique characters.","solution":"def has_unique_substring(s, k): Determines if there exists any substring of length \'k\' with all unique characters. :param s: Input string containing lowercase letters. :param k: Length of the substring to check. :return: \\"YES\\" if there exists a substring of length \'k\' with all unique characters, \\"NO\\" otherwise. if k > len(s): return \\"NO\\" for i in range(len(s) - k + 1): substring = s[i:i + k] if len(set(substring)) == k: return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers and a target value. Your task is to determine the number of distinct pairs of elements in the array that sum up to the target value. Each pair should be counted only once, and the order of elements within each pair does not matter. Write a function `countPairs` that takes the following parameters: - `nums` - a list of integers representing the input array. - `target` - an integer representing the target sum. The function should return the number of distinct pairs `(a, b)` such that `a + b` equals `target`. Note that `a` and `b` must be different elements in the array. # Input - The input array length will be between `1` and `10^5`. - Each element of the array will be between `-10^9` and `10^9`. - The target will be an integer between `-10^9` and `10^9`. # Example Input ```text nums: [1, 2, 3, 4, 3] target: 6 ``` Output ```text 2 ``` Explanation The pairs that sum up to 6 are: - (2, 4) - (3, 3) There are 2 distinct pairs. # Constraints - The function should have a time complexity of O(n). - The solution should not use more than O(n) additional space. # Implementation ```python def countPairs(nums, target): seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs) # Example usage: # nums = [1, 2, 3, 4, 3] # target = 6 # print(countPairs(nums, target)) # Output: 2 ```","solution":"def countPairs(nums, target): seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs) # Example usage: # nums = [1, 2, 3, 4, 3] # target = 6 # print(countPairs(nums, target)) # Output: 2"},{"question":"You are given an array of integers and an integer value k. Your task is to determine the maximum number of distinct integers that can be included in the array after performing at most k operations. Each operation allows you to increment or decrement any element of the array by 1. For instance, consider the array [1, 2, 2] and k = 2: - In one operation, you can change the array to [1, 2, 3]. - In another operation, you can change it to [1, 2, 4]. - The array then becomes [1, 2, 3, 4] with 4 distinct elements. Write a function that receives the array of integers and the integer k, and returns the maximum number of distinct integers in the array after performing at most k operations. # Input The input consists of: - A single integer n (1 le n le 10^5) — the number of elements in the array. - An integer k (1 le k le 10^9) — the maximum number of operations allowed. - An array of n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. # Output Output a single integer indicating the maximum number of distinct integers possible in the array after at most k operations. # Example Input ``` 5 2 1 2 2 3 3 ``` Output ``` 5 ``` Explanation - On the first operation, change the array to [1, 2, 3, 3, 3]. - On the second operation, change the array to [1, 2, 3, 4, 3]. - The array can contain [1, 2, 3, 4], resulting in a total of 5 distinct elements. Note: There might be other optimal ways to achieve the result. The primary task is to find the maximum distinct integers possible with the given operations.","solution":"def max_distinct_elements(arr, k): Returns the maximum number of distinct integers after performing at most k operations. unique_elements = set(arr) current_distinct_count = len(unique_elements) # We can possibly add up to k new distinct integers by incrementing/decrementing. max_possible_distinct = current_distinct_count + k # The maximum number of distinct integers must fit in the range of min to max plus/minus k operations possible_distinct_elements = len(set(range(min(arr) - k, max(arr) + k + 1))) return min(max_possible_distinct, possible_distinct_elements) # Example use-case based on the provided sample # Input: n = 5, k = 2, arr = [1, 2, 2, 3, 3] # Output should be: 5 arr = [1, 2, 2, 3, 3] k = 2 print(max_distinct_elements(arr, k)) # Expected output: 5"},{"question":"Alex is organizing a charity race event for his neighborhood. There are n participants in the race, each with a unique participant number from 1 to n. The race follows a route with m checkpoints, and every participant logs their position at each checkpoint. The results will be analyzed after the race, and Alex wants to determine who the overall winner is. To do so, he decides to use the following criteria: - A participant receives 1 point for each checkpoint they were the first to reach. - The participant with the highest total points across all checkpoints is declared the winner. - If there is a tie, the participant with the lower participant number wins. Given the details of the participants\' checkpoints, can you help Alex find out who the winner is? The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000) — the number of participants and the number of checkpoints. Each of the next m lines contains n integers representing the order in which participants reached the checkpoints. The i-th integer in the j-th line denotes the participant that reached the j-th checkpoint in i-th place. Print the participant number of the winner. For example, given n = 3 and m = 3: ``` 3 3 2 1 3 1 2 2 3 3 1 ``` - The first checkpoint results in participant 2 being the first, participant 1 being second, and participant 3 being third. - The second checkpoint results in participant 1 being the first, participant 2 being second, and participant 3 being third. - The third checkpoint results in participant 3 being the first, participant 1 being second, and participant 2 being third. Participant 1 has 1 point, participant 2 also has 1 point, and participant 3 has 1 point. Since all have equal points, the participant with the lowest participant number (which is 1) wins. Thus, the output should be: ``` 1 ```","solution":"def find_winner(n, m, checkpoints): Determine the winner of the race based on given checkpoints. Args: n (int): Number of participants. m (int): Number of checkpoints. checkpoints (List[List[int]]): List of lists where each inner list represents the order of participants at a checkpoint. Returns: int: The participant number of the winner. # Initialize a list to keep track of points for each participant points = [0] * n # Iterate through each checkpoint for checkpoint in checkpoints: # The participant at the first position gets a point first_place_participant = checkpoint[0] points[first_place_participant - 1] += 1 # Determine the participant with the highest points # If there is a tie, the participant with the lower number wins max_points = -1 winner = -1 for i in range(n): if points[i] > max_points or (points[i] == max_points and (winner == -1 or i < winner)): max_points = points[i] winner = i # Return the participant number which is index+1 return winner + 1"},{"question":"Anna is planning to decorate her garden with flowers. She has a choice of planting exactly one type of flower from a list of n different types. Each flower of type i has a beauty score b_i and costs c_i dollars per flower. Anna also has a budget of B dollars to spend on purchasing these flowers. Anna wants to maximize the total beauty of her garden by planting flowers, but she cannot exceed her budget. Additionally, for each flower type she chooses, she can buy any positive integer number of flowers of that type as long as the total cost does not exceed her budget. Help Anna figure out the maximum total beauty she can achieve without overspending. The first line contains two integers n and B (1 leq n leq 10^5, 1 leq B leq 10^9) — the number of flower types and the budget in dollars. The following n lines describe the available flower types. The i-th of these lines contains two integers b_i and c_i (1 leq b_i leq 10^6, 1 leq c_i leq 10^9) — the beauty score and the cost of one flower of type i. Print a single integer — the maximum total beauty Anna can achieve within her budget.","solution":"def maximum_total_beauty(n, B, flowers): Calculate the maximum total beauty that Anna can achieve without exceeding her budget. Parameters: n (int): The number of flower types. B (int): The budget in dollars. flowers (list of tuples): A list where each tuple contains two integers, beauty score (b_i) and cost (c_i) of each flower type. Returns: int: The maximum total beauty achievable within the budget. max_beauty = 0 for beauty, cost in flowers: # Number of flowers of this type Anna can buy without exceeding budget num_flowers = B // cost total_beauty = num_flowers * beauty if total_beauty > max_beauty: max_beauty = total_beauty return max_beauty"},{"question":"Coding an Autonomous Delivery Drone With the increasing demand for contactless delivery solutions, an innovative tech company is designing an autonomous delivery drone. The drone operates in a rectangular grid, where each cell is either an open space (\'.\') or an obstacle (\'#\'). The drone start at an initial position and needs to reach the destination position to deliver a package. The drone can move up, down, left, or right, but cannot move diagonally or pass through obstacles. You are tasked with writing a function to determine the shortest path from the starting position to the destination position, avoiding obstacles. # Input Format The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid. The next `n` lines each contain a string of length `m` representing the grid, consisting of the characters \'.\' and \'#\'. The following line contains two integers, `sr` and `sc`, representing the starting row and column position of the drone. The last line contains two integers, `dr` and `dc`, representing the destination row and column position. Both `sr`, `sc`, `dr`, and `dc` are zero-indexed. # Output Format Print a single integer representing the minimum number of moves the drone needs to reach the destination. If it is not possible, print `-1`. # Example Input ``` 5 5 ..... .#. ..... .#. ..... 0 0 4 4 ``` Output ``` 8 ``` In this example, the drone must navigate around obstacles to reach the destination, taking the shortest path possible.","solution":"from collections import deque def shortest_path(grid, sr, sc, dr, dc): n = len(grid) m = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right # Initialize the queue with the starting position and distance of 0 queue = deque([(sr, sc, 0)]) visited = set((sr, sc)) while queue: r, c, distance = queue.popleft() # If we\'ve reached the destination, return the distance if (r, c) == (dr, dc): return distance # Move in all possible directions for drn, dcn in directions: nr, nc = r + drn, c + dcn # Check if we are still within bounds and not visited if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == \'.\': queue.append((nr, nc, distance + 1)) visited.add((nr, nc)) # If we exhaust the queue without finding the destination, return -1 return -1 def shortest_path_from_input(n, m, grid, sr, sc, dr, dc): return shortest_path(grid, sr, sc, dr, dc)"},{"question":"Given two strings s1 and s2, determine if s2 is a subsequence of s1. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. # Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each of the next 2t lines contains two strings s1 and s2 (1 ≤ |s1|, |s2| ≤ 10^5). It is guaranteed that the sum of all |s1| and |s2| in a single test does not exceed 10^6. # Output For each test case, print \\"YES\\" if s2 is a subsequence of s1, otherwise print \\"NO\\". # Example Input: ``` 3 abcde ace abcde aec abc bage ``` Output: ``` YES NO NO ``` In the first test case, \\"ace\\" is a subsequence of \\"abcde\\" because we can remove \'b\' and \'d\' to get \\"ace\\". In the second test case, \\"aec\\" is not a subsequence of \\"abcde\\" because \'c\' does not appear after \'e\'. In the third test case, \\"bage\\" is not a subsequence of \\"abc\\" because we cannot form \\"bage\\" from the characters in \\"abc\\".","solution":"def is_subsequence(s1, s2): Determine if s2 is a subsequence of s1. it = iter(s1) return all(char in it for char in s2) def process_test_cases(test_cases): results = [] for s1, s2 in test_cases: if is_subsequence(s1, s2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a far away kingdom, the King has a very unique sorting machine in his castle. The machine sorts a list of integers in a specific way. The machine\'s sorting algorithm follows these steps: 1. It first reads a list of integers. 2. It then separates the list into two lists: - One list containing all the even numbers from the original list, sorted in non-decreasing order. - Another list containing all the odd numbers from the original list, sorted in non-increasing order. 3. Finally, it merges the two lists by simply appending the sorted odd number list to the end of the sorted even number list. You are tasked with replicating this sorting mechanism. Given a list of integers, implement the sorting machine\'s algorithm and return the sorted list. # Input - A single line containing an integer n (1 ≤ n ≤ 100,000), the number of integers in the list. - The next line contains n integers separated by space, ai (−10^9 ≤ ai ≤ 10^9), the elements of the list. # Output - A single line containing the sorted list as described above. # Examples Example 1: Input: ``` 6 1 2 3 4 5 6 ``` Output: ``` 2 4 6 5 3 1 ``` Example 2: Input: ``` 4 7 2 9 5 ``` Output: ``` 2 9 7 5 ``` # Note - In the first example, the even numbers are [2, 4, 6] and are sorted in ascending order. - The odd numbers are [1, 3, 5] and are sorted in descending order. - The final sorted list after merging is [2, 4, 6, 5, 3, 1].","solution":"def king_sorting_machine(n, numbers): Sorts the integers in the way described by the King\'s sorting machine: - Even numbers sorted in non-decreasing order - Odd numbers sorted in non-increasing order - Merging the two lists Parameters: n (int): The number of elements in the list numbers (list): The list of integers to be sorted Returns: list: The sorted list evens = sorted([num for num in numbers if num % 2 == 0]) odds = sorted([num for num in numbers if num % 2 != 0], reverse=True) return evens + odds"},{"question":"# Trading Algorithms Alice is a quantitative analyst working for a hedge fund. She uses various trading algorithms to buy and sell stocks based on market trends. One of her algorithms involves identifying \\"buy\\" and \\"sell\\" signals from a time series of stock prices. She wants to implement a simple strategy where: 1. She buys a stock whenever the price drops from the previous day. 2. She sells a stock whenever the price rises from the previous day. 3. She neither buys nor sells if the price remains the same as the previous day. Your task is to help Alice simulate this trading strategy over a period of `n` days and calculate the total number of buy and sell actions she would take. You are given an integer `n` (1 le n le 100) representing the number of days, followed by `n` integers representing the stock prices on each of those days. The output should be two integers: the total number of buy actions and the total number of sell actions. # Input The first line contains an integer `n` (1 le n le 100) representing the number of days. The second line contains `n` integers representing the stock prices on each of those days. # Output Output two integers separated by a space: the total number of buy actions and the total number of sell actions. # Example Input ``` 5 5 3 2 4 6 ``` Output ``` 2 2 ``` Explanation 1. On the first day, the price is 5. No action is taken (no previous day to compare to). 2. On the second day, the price drops to 3 (less than 5), so a buy action is taken. 3. On the third day, the price drops to 2 (less than 3), so another buy action is taken. 4. On the fourth day, the price rises to 4 (greater than 2), so a sell action is taken. 5. On the fifth day, the price rises to 6 (greater than 4), so another sell action is taken. Hence, there are 2 buy actions and 2 sell actions in total.","solution":"def trading_actions(n, prices): Returns the total number of buy and sell actions. :param n: int - number of days :param prices: list of int - stock prices for each day :return: tuple of two int - number of buys and sells buys = 0 sells = 0 for i in range(1, n): if prices[i] < prices[i - 1]: buys += 1 elif prices[i] > prices[i - 1]: sells += 1 return buys, sells"},{"question":"Alex is learning about paths and distances in graphs. To test his understanding, he has created a problem involving undirected weighted graphs. An undirected weighted graph consists of V vertices and E edges. Each edge has a weight associated with it. Alex wants to determine the minimum distance between two nodes, u and v, using Dijkstra\'s algorithm. You need to help Alex by creating a function that calculates the minimum distance between the given nodes u and v, and returns the minimum distance. The input consists of: - V and E, the number of vertices (2 ≤ V ≤ 1000) and the number of edges (1 ≤ E ≤ 10000) respectively. - A list containing E tuples (x, y, w), where x and y are the endpoints of an edge, and w is the weight of the edge (1 ≤ w ≤ 1000). - Two integers u and v, the nodes between which the distance needs to be calculated (1 ≤ u, v ≤ V). If there is no path between u and v, the function should return -1. For example: Input: ``` 7 9 1 2 4 1 3 2 2 3 5 2 4 10 3 5 3 5 4 4 6 7 6 4 5 7 4 6 11 1 4 ``` Output: ``` 9 ``` Explanation: In the example above, the graph has 7 vertices and 9 edges. The shortest path from node 1 to node 4 has a total weight of 9. Dijkstra\'s algorithm must be used to compute the shortest path. Write a function `min_distance` that takes the number of vertices, number of edges, a list of edges, and the two nodes between which the distance needs to be calculated, and returns the minimum distance or -1 if no path exists. ``` def min_distance(V, E, edges, u, v): # Your implementation here pass ```","solution":"import heapq import sys def min_distance(V, E, edges, u, v): # Create an adjacency list graph = [[] for _ in range(V+1)] for x, y, w in edges: graph[x].append((y, w)) graph[y].append((x, w)) # Initialize distances array with infinity dist = [float(\'inf\')] * (V+1) dist[u] = 0 # Min-heap priority queue pq = [(0, u)] while pq: current_dist, current_node = heapq.heappop(pq) if current_dist > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return dist[v] if dist[v] != float(\'inf\') else -1"},{"question":"Given a linked list, you need to check whether it follows a palindromic sequence. A linked list is considered palindromic if the sequence of values is the same in both forward and backward directions. The linked list is defined using the following structure: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` You are provided with a function `isPalindrome` which takes the head of the linked list as its only argument and returns `True` if the linked list is palindromic, otherwise `False`. Example: ``` Input: 1 -> 2 -> 2 -> 1 Output: True Input: 1 -> 2 -> 3 Output: False ``` Function signature: ```python def isPalindrome(head: ListNode) -> bool: # Your code here ``` Your task is to complete the implementation of the `isPalindrome` function. Constraints: - The number of nodes in the linked list is in the range [1, 100000]. - 0 <= Node.val <= 10^5","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def isPalindrome(head: ListNode) -> bool: # Use two pointers to find the middle of the linked list slow = fast = head # Stack to store the first half elements stack = [] # Move fast pointer twice as fast as slow pointer and push the elements from the slow pointer to the stack while fast and fast.next: stack.append(slow.val) slow = slow.next fast = fast.next.next # If fast is not null, then we have odd number of elements, skip the middle element if fast: slow = slow.next # Compare the second half with the stack while slow: if slow.val != stack.pop(): return False slow = slow.next return True"},{"question":"You are given an array of length `n` containing integers. Your task is to rearrange the array such that all non-zero elements appear before any zero elements. The order of non-zero elements and zero elements does not matter. The input consists of a single line containing the integer `n` (1 ≤ n ≤ 100) followed by `n` integers separated by spaces (each integer is between -100 and 100 inclusive). Print the rearranged array where all non-zero elements are at the beginning followed by all zeros. For instance, if the input is `5 0 1 0 3 12`, then a possible output could be `1 3 12 0 0`. Another valid output could be `3 12 1 0 0`.","solution":"def rearrange_array(n, arr): Rearranges the array such that all non-zero elements appear before any zero elements. Parameters: n (int): The length of the array. arr (list): The list of integers to rearrange. Returns: list: The rearranged array. non_zero_elements = [x for x in arr if x != 0] zero_elements = [x for x in arr if x == 0] return non_zero_elements + zero_elements # Example usage: # arr = [0, 1, 0, 3, 12] # print(rearrange_array(5, arr)) # Output may vary: [1, 3, 12, 0, 0]"},{"question":"A famous ancient city is known for its unique and mysterious lock mechanism in its treasure vaults. The lock mechanism involves a sequence of stone buttons arranged in a line, each representing a number from a sequence. The key to opening the vault is to align the numbers in a strictly increasing order by removing the minimum number of buttons. Given the sequence of numbers, write a function that returns the minimum number of buttons that need to be removed to obtain a strictly increasing subsequence. The sequence is represented by an array of positive integers. The length of the sequence does not exceed 100. Input: - An integer n, representing the number of elements in the sequence. - An array of n positive integers, representing the sequence. Output: - An integer indicating the minimum number of buttons that need to be removed to make the sequence strictly increasing. Example: Input: 6 5 2 8 6 3 6 Output: 3 In the example, removing the elements 5, 6, and 6 leaves the strictly increasing sequence [2, 3, 8].","solution":"def min_removals_to_increase_subsequence(n, sequence): Returns the minimum number of buttons that need to be removed to obtain a strictly increasing subsequence. :param n: (int) The number of elements in the sequence :param sequence: (list of int) The sequence of numbers :return: (int) The minimum number of buttons to be removed # Initialize the dp array where dp[i] is the length of the longest increasing subsequence ending at index i dp = [1] * n # Compute the length of the longest increasing subsequence using dynamic programming for i in range(1, n): for j in range(i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence is the max value in dp lis_length = max(dp) # The minimum removals needed is the total number of elements minus the length of the longest increasing subsequence return n - lis_length"},{"question":"You are given an unordered list of integers. Your task is to find all unique pairs of integers in the list that sum up to a specific target number. Each input pair should be listed only once, regardless of the order of the numbers in the pair (i.e., (a, b) is the same as (b, a)). Input The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the list. The second line contains n integers separated by spaces. The third line contains the target sum integer t (1 ≤ t ≤ 2 * 10^5). Output Output all unique pairs of integers that sum up to the given target number, in any order. Example # Input 8 4 5 1 3 6 3 1 2 5 # Output 1 4 3 2 Constraints 1. Each input pair should be unique. 2. The number of pairs can be zero if no pairs sum up to the target number. In the example, the pairs that sum up to 5 are: - (4, 1) - (3, 2) Since each pair is unique and order does not matter, only these pairs are printed.","solution":"def find_unique_pairs(nums, target): Finds all unique pairs of integers in the list that sum up to the target number. seen = set() output = set() for num in nums: complement = target - num if complement in seen: output.add(tuple(sorted((num, complement)))) seen.add(num) return list(output)"},{"question":"A research lab is working on encrypting data for secure transmission. They have decided to use a simple substitution cipher where each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet. More formally, each letter `c` in the plaintext is replaced with the letter `c + k % 26` in the alphabet. `k` is a positive integer, and `% 26` ensures the substitution wraps around the end of the alphabet back to the beginning. For example, with `k = 3`, the letter `A` would be replaced by `D`, `B` by `E`, ..., `X` by `A`, `Y` by `B`, and `Z` by `C`. The lab now wants to decrypt the encoded messages. They want a function that takes an encoded string and the integer key `k` and returns the original plaintext string. The input contains: - An integer `k` (1 ≤ k ≤ 25) — the fixed number of positions each letter in the plaintext was shifted. - A line of uppercase alphabets representing the encoded message. Write a function to decrypt the encoded message. Input: - The first line contains the integer `k`. - The second line contains the encoded string. Output: - The decrypted plaintext string. # Example Input ``` 3 KHOOR ``` Output ``` HELLO ``` Note: In this example, `k = 3`, so each letter in the encrypted message \\"KHOOR\\" is shifted 3 positions back in the alphabet to get the original message \\"HELLO\\".","solution":"def decrypt_caesar_cipher(k, encoded_message): Decrypts an encoded message using Caesar Cipher with a given integer key k. Args: k (int): The fixed number of positions each letter in the plaintext was shifted. encoded_message (str): The encoded string. Returns: str: The decrypted plaintext string. decrypted_message = [] for char in encoded_message: shifted = ord(char) - k if shifted < ord(\'A\'): shifted += 26 decrypted_message.append(chr(shifted)) return \'\'.join(decrypted_message) # Example usage: # k = 3 # encoded_message = \\"KHOOR\\" # print(decrypt_caesar_cipher(k, encoded_message)) # Output should be \\"HELLO\\""},{"question":"Given an array of integers, you need to perform a series of operations that transform the array according to a specific set of instructions. Each instruction is either an addition or multiplication operation on a subarray. The array is defined as a = a1, a2, …, an and consists of n integers. Each integer is in the range 1 to 1000. You need to process q operations, where each operation is described by a type (either \'add\' or \'multiply\'), two indices l and r (1 ≤ l ≤ r ≤ n), and a value v (1 ≤ v ≤ 1000). For an \'add\' operation, you should add the value v to each element in the subarray a[l] to a[r]. For a \'multiply\' operation, you should multiply each element in the subarray a[l] to a[r] by the value v. The first line contains two integers n and q (1 ≤ n, q ≤ 100,000). The second line contains n integers a1, a2, ..., an. The following q lines each contain an operation in the format \\"type l r v\\". After performing all operations, print the final state of the array. Example Input: 10 3 1 2 3 4 5 6 7 8 9 10 add 1 5 10 multiply 3 7 2 add 6 10 5 Example Output: 11 12 26 28 30 22 29 21 14 15","solution":"def apply_operations(n, q, array, operations): for operation in operations: op_type, l, r, v = operation if op_type == \'add\': for i in range(l-1, r): array[i] += v elif op_type == \'multiply\': for i in range(l-1, r): array[i] *= v return array"},{"question":"A long path in a city is comprised of several streets. Each street connects two distinct intersections and has an associated traffic congestion value. An intersection is reachable from another intersection if there exists a sequence of streets connecting them. The path can be traveled from any intersection to any other intersection without considering the direction restriction. Given the number of intersections m and n streets in the city, along with a list of n streets where each street is defined by three integers u, v, and c (1 <= u, v <= m; 1 <= c <= 1000). Here, u and v are the intersections that the street connects, and c is the traffic congestion value of the street. You are asked to determine the minimum possible maximum traffic congestion value on a street in a path that connects every pair of intersections. The input consists of: - The first line contains two integers m and n (1 <= m <= 1000, 0 <= n <= 10000) - the number of intersections and streets. - The next n lines each contain three integers u, v, and c - the street\'s endpoints and traffic congestion value. Your task is to compute this minimum possible maximum traffic congestion value. Output a single integer — the minimum possible maximum traffic congestion value on a street in a path that connects every pair of intersections. Example: Input: 5 7 1 2 1 1 3 2 2 3 2 2 4 3 3 5 1 4 5 3 1 5 10 Output: 3","solution":"def find_min_max_congestion(m, n, streets): Returns the minimal possible maximum traffic congestion value on a street that connects all intersections. Uses Kruskal\'s algorithm to find the minimal spanning tree (MST), where the maximum edge in the MST is minimized. # Union-Find Data Structure with Path Compression and Union by Rank parent = list(range(m)) rank = [0] * m def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x = find(x) root_y = find(y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 # Sort the streets by their congestion value streets.sort(key=lambda x: x[2]) # Applying Kruskal\'s algorithm to find MST mst_max_edge = 0 for u, v, c in streets: if find(u - 1) != find(v - 1): union(u - 1, v - 1) mst_max_edge = max(mst_max_edge, c) return mst_max_edge"},{"question":"Given an array of integers, you want to find the length of the smallest contiguous subarray of which the sum is greater than or equal to a given integer X. If no such subarray exists, return 0. The first line contains two integers n and X (1 <= n <= 10^5, 1 <= X <= 10^9) — the size of the array and the target sum, respectively. The next line contains n integers representing the elements of the array (1 <= arr[i] <= 10^9). Output the length of the smallest contiguous subarray of which the sum is greater than or equal to X. If no such subarray exists, output 0. Example Input 1: ``` 10 15 1 2 3 4 5 6 7 8 9 10 ``` Example Output 1: ``` 2 ``` Example Input 2: ``` 5 100 1 2 3 4 5 ``` Example Output 2: ``` 0 ``` Explanation: In the first example, the smallest subarray with sum greater than or equal to 15 is [7, 8] which has length 2. In the second example, no subarray has a sum greater than or equal to 100, hence the output is 0.","solution":"def smallest_subarray_with_sum(arr, n, X): Returns the length of the smallest contiguous subarray of which the sum is greater than or equal to X. If no such subarray exists, return 0. min_length = float(\'inf\') start = 0 current_sum = 0 for end in range(n): current_sum += arr[end] while current_sum >= X: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has a weight associated with it. Your task is to remove some of the edges so that the remaining edges form a tree that has the minimum possible weight difference between the heaviest and the lightest edge in the resulting tree. The first line of the input will be two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), representing the number of nodes and edges in the graph respectively. The following m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), describing an edge between node u and node v with weight w. Output the minimum possible weight difference between the heaviest and the lightest edge in the resulting tree after removing the necessary edges. # Example Input 6 7 1 2 3 2 3 3 3 4 5 4 5 6 5 6 7 1 6 8 1 3 2 Output 4","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): # Sort edges by their weight edges = sorted(edges, key=lambda x: x[2]) max_diff = float(\'inf\') for i in range(len(edges)): parent = [j for j in range(n)] rank = [0] * n selected_edges = [] for j in range(i, len(edges)): u, v, w = edges[j] root_u = find(parent, u-1) root_v = find(parent, v-1) if root_u != root_v: selected_edges.append((u, v, w)) union(parent, rank, root_u, root_v) if len(selected_edges) == n - 1: # Found a valid spanning tree break if len(selected_edges) == n - 1: weight_diff = selected_edges[-1][2] - selected_edges[0][2] max_diff = min(max_diff, weight_diff) return max_diff # Main function to be used to read input def min_weight_difference(n, m, edge_list): edges = [tuple(edge_list[i]) for i in range(m)] return kruskal(n, edges)"},{"question":"You are given an integer array representing the number of fish tanks with fish in an aquarium. The aquarium staff checks the tanks every morning and night to record the count of fish in each tank. They found that fish can either be moved between tanks by a diver or might have been added or removed due to some external factors such as breeding or death. The staff want to confirm if the recorded changes in fish counts are possible. There are two records for the fish tanks: - The first record contains the counts of fish for each tank in the morning. - The second record contains the counts of fish for each tank in the evening. The task is to determine if the change in fish counts could be valid given the possible operations. Given the number of tanks, `n` (1 ≤ n ≤ 50), and two arrays `morning` and `evening` each of size `n` where `0 ≤ morning[i], evening[i] ≤ 1000`, output \\"Possible\\" if the evening counts can come from the morning counts by any combination of moves, additions, or removals, otherwise output \\"Impossible\\". # Input: ``` The first line contains a single integer `n`, number of fish tanks. The second line contains `n` integers `morning[1], morning[2], ..., morning[n]` representing the number of fish in each tank in the morning. The third line contains `n` integers `evening[1], evening[2], ..., evening[n]` representing the number of fish in each tank in the evening. ``` # Output: ``` Output a single string \\"Possible\\" or \\"Impossible\\". ``` # Example: Input: ``` 4 3 1 6 2 2 2 6 2 ``` Output: ``` Possible ``` Input: ``` 3 0 5 1 1 6 2 ``` Output: ``` Impossible ``` Explanation: In the first example, one fish was moved from the first tank to the second tank, which makes the evening counts possible. In the second example, the change of fish counts from morning to evening is not possible by just moving fish between tanks or some being added externally.","solution":"def check_possible(morning, evening): Determines if the evening counts of fish tanks can be achieved from the morning counts. :param morning: List[int], counts of fish in each tank in the morning :param evening: List[int], counts of fish in each tank in the evening :return: String \\"Possible\\" or \\"Impossible\\" # Sum of fish counts in the morning and evening sum_morning = sum(morning) sum_evening = sum(evening) # If the total number of fish in the evening does not equal the total number of fish in the morning, it\'s impossible. if sum_morning != sum_evening: return \\"Impossible\\" else: return \\"Possible\\""},{"question":"A company operates warehouses, and each warehouse handles a number of different products. Each product has a unique ID and a certain quantity available in the warehouse. Periodically, the company needs to generate an inventory report that shows the product ID, quantity, and the total value of products currently held in each warehouse. You need to write a program that reads the product information for each warehouse, calculates the total value of products for each warehouse, and determines the warehouse with the highest inventory value. The value of a product is calculated as the quantity multiplied by the unit price. Each product has a unique ID across all warehouses, but the price of a product is the same in all warehouses. The input consists of: - The first line contains an integer `m` (1 ≤ m ≤ 100) - the number of warehouses. - Each of the next `m` blocks describes one warehouse. Each block starts with an integer `k` (1 ≤ k ≤ 10^4) - the number of products in the warehouse. The next `k` lines contain three integers each: `product_id` (1 ≤ product_id ≤ 10^5), `quantity` (1 ≤ quantity ≤ 10^6), and `unit_price` (1 ≤ unit_price ≤ 10^6). The output should be: - The inventory value for each warehouse, in the order they appear in the input. - The warehouse number (1-based index) that has the highest inventory value. If multiple warehouses have the same inventory value, output the smallest index. **Example:** Input: ``` 3 2 1 100 5 2 200 20 3 1 50 5 2 100 20 3 200 10 1 2 500 20 ``` Output: ``` 4500 4500 10000 3 ``` Explanation: - For the first warehouse: `100*5 + 200*20 = 500 + 4000 = 4500` - For the second warehouse: `50*5 + 100*20 + 200*10 = 250 + 2000 + 2000 = 4250` - For the third warehouse: `500*20 = 10000` - The warehouse with the highest inventory value is the third one.","solution":"def calculate_inventory(m, warehouse_data): Calculate the inventory value of each warehouse and determine the warehouse with the highest value. Parameters: m (int): The number of warehouses. warehouse_data (list of lists): Each inner list contains tuples representing product_id, quantity, and unit price. Returns: tuple: A tuple containing a list of total inventory values for each warehouse, and the index of the warehouse with the highest value. inventory_values = [] for i in range(m): total_value = 0 for product in warehouse_data[i]: product_id, quantity, unit_price = product total_value += quantity * unit_price inventory_values.append(total_value) highest_value_warehouse = inventory_values.index(max(inventory_values)) + 1 return inventory_values, highest_value_warehouse # Sample usage: # m = 3 # warehouse_data = [ # [(1, 100, 5), (2, 200, 20)], # [(1, 50, 5), (2, 100, 20), (3, 200, 10)], # [(2, 500, 20)] # ] # inventory_values, highest_value_warehouse = calculate_inventory(m, warehouse_data) # print(inventory_values) # Output: [4500, 4250, 10000] # print(highest_value_warehouse) # Output: 3"},{"question":"A company is organizing a series of coding challenges for its employees. Each challenge can be completed by a team, and every team must be composed of at least one member. The company has a list of employees and a series of constraints dictating which employees must work together in the same team. All constraints must be satisfied when forming the teams. The goal is to determine the minimum number of teams needed such that all constraints are met. Given an integer n (1 ≤ n ≤ 100) representing the number of employees and an integer k (0 ≤ k ≤ 4950) representing the number of constraints, the constraints are described by k pairs of integers (a, b) (1 ≤ a, b ≤ n) indicating that employee a and employee b must be in the same team. Write a program that calculates the minimum number of teams required. **Input format:** - The first line contains two integers, n and k. - The next k lines each contain two integers a and b, representing a constraint that employee a and employee b must be in the same team. **Output format:** - Print a single integer, the minimum number of teams required. **Example:** Input: ``` 5 3 1 2 2 3 4 5 ``` Output: ``` 2 ``` Explanation: In this example, there are 5 employees and 3 constraints as pairs. Employee 1 must work with Employee 2, and Employee 2 must work with Employee 3, thus forming one team {1, 2, 3}. Employee 4 must work with Employee 5, forming another team {4, 5}. Hence, the minimum number of teams required is 2.","solution":"def minimum_teams_required(n, k, constraints): from collections import defaultdict graph = defaultdict(list) for a, b in constraints: graph[a].append(b) graph[b].append(a) visited = [False] * (n + 1) def dfs(node): stack = [node] while stack: v = stack.pop() for neighbor in graph[v]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) num_teams = 0 for employee in range(1, n + 1): if not visited[employee]: visited[employee] = True dfs(employee) num_teams += 1 return num_teams"},{"question":"You are given an array of integers representing the ages of a group of people. A year has passed and each person\'s age has increased by one. At the same time, some new people were born this year. Write a function that takes two inputs: 1. An array of integers representing the current ages of the people. 2. An integer representing the number of newly born people this year. Your task is to return a new array representing the ages of all people after a year has passed and the newly born people have been added. Note that the age of newly born people is 0. # Input - An integer array `ages` representing the current ages of people (0 ≤ ages[i] ≤ 150). - An integer `new_born_count` representing the number of newly born people (0 ≤ new_born_count ≤ 10^6). # Output - Return an integer array representing the ages of all people after a year has passed. # Example Example 1: Input: ```python ages = [5, 10, 35, 67] new_born_count = 2 ``` Output: ```python [6, 11, 36, 68, 0, 0] ``` Example 2: Input: ```python ages = [20, 45] new_born_count = 1 ``` Output: ```python [21, 46, 0] ```","solution":"def update_ages(ages, new_born_count): Updates the ages of a group of people by adding one year for each person and adding new born people with age 0. Parameters: - ages (list of int): Current ages of people. - new_born_count (int): Number of newly born people this year. Returns: - list of int: Updated ages including the newly born people. updated_ages = [age + 1 for age in ages] new_born_ages = [0] * new_born_count return updated_ages + new_born_ages"},{"question":"Design a function that detects the presence of specific patterns in a matrix of integers. The matrix is represented as an `n x m` grid, where each element is an integer. A pattern is given as a smaller `p x q` matrix. The pattern is considered detected if it appears as a submatrix anywhere within the grid. # Input: - An integer `n` and `m` (1 ≤ n, m ≤ 100), representing the dimensions of the grid. - A 2D list `grid` of size `n x m` containing integers. - An integer `p` and `q` (1 ≤ p, q ≤ min(n, m)), representing the dimensions of the pattern. - A 2D list `pattern` of size `p x q` containing integers. # Output: Return `True` if the pattern appears as a submatrix in the grid, otherwise, return `False`. # Example: Example 1: Grid: ``` 3 4 1 5 2 9 3 7 5 6 2 8 1 2 7 4 ``` Pattern: ``` 9 3 6 2 ``` Output: `True` Example 2: Grid: ``` 7 3 8 6 1 4 9 5 2 7 3 4 8 1 2 9 ``` Pattern: ``` 4 9 7 3 ``` Output: `True` # Description: Design a function named `pattern_detection` that takes the grid dimensions n, m, the grid itself, the pattern dimensions p, q, and the pattern itself as input, and returns `True` or `False` based on the described logic. ```python def pattern_detection(n, m, grid, p, q, pattern): for i in range(n - p + 1): for j in range(m - q + 1): match = True for x in range(p): for y in range(q): if grid[i + x][j + y] != pattern[x][y]: match = False break if not match: break if match: return True return False ``` Note: Ensure that the function checks every possible placement of the pattern within the grid.","solution":"def pattern_detection(n, m, grid, p, q, pattern): Function to check if a pattern exists within a grid. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of list of int): The grid represented as a list of lists. p (int): Number of rows in the pattern. q (int): Number of columns in the pattern. pattern (list of list of int): The pattern to be detected represented as a list of lists. Returns: bool: True if the pattern is found within the grid, False otherwise. for i in range(n - p + 1): for j in range(m - q + 1): match = True for x in range(p): for y in range(q): if grid[i + x][j + y] != pattern[x][y]: match = False break if not match: break if match: return True return False"},{"question":"In a galaxy far, far away, there is a game played by aliens using a sequence of intergalactic numbers. The sequence is defined as follows: 1. The first number in the sequence is 1. 2. For every subsequent number, if the number is even, divide it by 2. 3. If the number is odd, multiply it by 3 and add 1. The challenge is to determine how long it takes for any given number `n` to reduce to 1. This is known as the Collatz sequence. Given an integer `t` representing the number of test cases, followed by `t` integers, each representing the starting number `n`, write a program to calculate the number of steps required for each number to reach 1. Input Format: - The first line contains a single integer `t` (1 ≤ t ≤ 100,000) — the number of test cases. - Each of the following `t` lines contains a single integer `n` (1 ≤ n ≤ 10^6) — the starting number for the sequence. Output Format: - For each test case, output a single integer on a new line, representing the number of steps required for the number to reduce to 1. Example Input: 5 6 19 27 7 2 Example Output: 8 20 111 16 1 Explanation: For the first test case, the sequence starting with 6 is: 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1, which takes 8 steps.","solution":"def collatz_steps(n): Calculate the number of steps required for a number n to reach 1 in the Collatz sequence. steps = 0 while n != 1: if n % 2 == 0: n //= 2 else: n = 3 * n + 1 steps += 1 return steps def process_collatz(test_cases): Process multiple test cases for Collatz sequence steps calculation. Parameters: test_cases (list): List of integers to process. Returns: list: List containing number of steps for each test case. return [collatz_steps(n) for n in test_cases] # Example usage: # t = 5 # test_cases = [6, 19, 27, 7, 2] # results = process_collatz(test_cases) # for result in results: # print(result)"},{"question":"You are given an array of integers. Your task is to remove all the even numbers from the array. When a number is removed from the array, all numbers to the right of it are shifted one position to the left. The first line of input contains an integer n (1 ≤ n ≤ 100), the number of elements in the array. The second line contains n integers ai (-1000 ≤ ai ≤ 1000), which are the elements of the array. Output the array with all even numbers removed. If the original array contained only even numbers, output an empty array.","solution":"def remove_even_numbers(arr): Removes all even numbers from the array and returns the modified array. Parameters: arr (list of int): The input array of integers. Returns: list of int: The array with all the even numbers removed. return [x for x in arr if x % 2 != 0] # Example usage: # n = 5 # arr = [1, 2, 3, 4, 5] # Output: [1, 3, 5]"},{"question":"Two friends, Alice and Bob, love playing games that involve heaps of stones. They have come up with a new game called \\"Heap Breaker,\\" which works as follows: - Initially, they are given a heap of stones, with the total number of stones given by an integer `N`. - They take turns, starting with Alice, to choose a divisor of the current number of stones (including 1 but excluding the number itself) and remove that many stones from the heap. - The player who cannot make a move because there are no valid divisors left (i.e., when the heap is reduced to 1 stone) loses the game. Your objective is to determine who the winner will be if both Alice and Bob play optimally. Input: The first line contains a single integer, T, the number of test cases (1 ≤ T ≤ 100). Each of the next T lines contains a single integer N (2 ≤ N ≤ 10^6), representing the initial number of stones in the heap for each test case. Output: For each test case, output \\"Alice\\" if Alice wins the game, otherwise output \\"Bob\\" if Bob wins the game. Example: ``` Input: 3 2 5 7 Output: Alice Bob Bob ```","solution":"def heap_breaker_winner(N): # We use a simple observation: # If N is even, Alice can always win by removing 1 stone and making N odd. # The player encountering an odd number of stones will eventually lose because the other player can always make the number even again. return \\"Alice\\" if N % 2 == 0 else \\"Bob\\" def solve(T, test_cases): results = [] for N in test_cases: results.append(heap_breaker_winner(N)) return results # Example usage T = 3 test_cases = [2, 5, 7] print(solve(T, test_cases))"},{"question":"You are given a list of (n) integers, representing the heights of (n) towers. Each move, you can select one of the towers and reduce its height by half (taking the floor of the division if the height is odd). Your goal is to make all towers the same height using any number of moves. Each tower height (h_i) can be halved any number of times. Determine if it is possible to make all towers the same height. The first line of input contains an integer (n) (2 ≤ (n) ≤ 100,000) — the number of towers. The second line contains (n) integers (h_1, h_2, ..., h_n) (1 ≤ (h_i) ≤ 10^9) — the heights of the towers. Print \\"YES\\" (without quotes) if it’s possible to make all tower heights equal, or \\"NO\\" otherwise. For example, - In the first example, reducing (8) thrice we get to (1). Similarly, reducing (16) four times also reaches (1). - In the second example, it is not possible to make heights equal.","solution":"def can_make_all_towers_equal(n, heights): Determines if it is possible to make all towers the same height by halving any tower any number of times. Parameters: n (int): The number of towers. heights (list of int): List of tower heights. Returns: str: \\"YES\\" if it is possible to make all tower heights equal, else \\"NO\\". def reduce_to_odd(n): Helper function to reduce a number to its largest odd divisor by continually halving it. while n % 2 == 0: n //= 2 return n # Reduce all tower heights to their largest odd divisor reduced_heights = set(reduce_to_odd(h) for h in heights) # If all reduced heights are the same, print \\"YES\\". Otherwise, print \\"NO\\". return \\"YES\\" if len(reduced_heights) == 1 else \\"NO\\" # Example usage: # n = 3 # heights = [8, 2, 4] # print(can_make_all_towers_equal(n, heights)) # Output: YES"},{"question":"A company has a series of stock prices recorded at each minute of the trading day. You are given an array where each element represents the stock price at that minute. Your task is to find the maximum profit that could be achieved by buying at one minute and selling at a later minute in the day. If no profit is possible, return 0. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of minutes in the trading day (i.e., the number of elements in the array). The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10,000) — the stock prices at each minute. Output a single integer — the maximum profit that could be achieved from these stock prices. If no profit is possible, return 0. Example: Input: 6 7 1 5 3 6 4 Output: 5 Explanation: The maximum profit can be achieved by buying at minute 2 (price = 1) and selling at minute 5 (price = 6), resulting in a profit of 6 - 1 = 5.","solution":"def max_profit(stock_prices): Function to calculate the maximum profit from stock prices. Args: stock_prices (list of int): List of stock prices per minute. Returns: int: Maximum profit possible. If no profit is possible, returns 0. if not stock_prices or len(stock_prices) == 1: return 0 min_price = stock_prices[0] max_profit = 0 for price in stock_prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given an integer n and a list of n integers. You need to find the largest product of any two distinct integers in the list. A list is a sequence of numbers. Two distinct integers are defined as integers located at different positions in the list. You have to answer t independent test cases. The first line of the input contains one integer t (1 le t le 100) — the number of test cases. The first line of each test case contains one integer n (2 le n le 10^5) — the number of integers in the list. The second line of each test case contains n integers separated by spaces — the list of integers. The integers provided in the list can be positive, negative, or zero and their absolute values do not exceed 10^9. For each test case, print the largest product of any two distinct integers in the list. **Example:** **Input:** ``` 3 3 -10 0 5 4 2 3 5 -1 5 1 2 3 4 5 ``` **Output:** ``` 0 15 20 ``` **Explanation:** - For the first test case, the largest product is 0, obtained by multiplying 0 and 5 or 0 and -10. - For the second test case, the largest product is 15, obtained by multiplying 3 and 5. - For the third test case, the largest product is 20, obtained by multiplying 4 and 5.","solution":"def largest_product(nums): if len(nums) < 2: return None nums.sort() # Compare the largest two values and the two smallest values # (to handle the case of two negative numbers that can form a large positive product). return max(nums[-1] * nums[-2], nums[0] * nums[1]) def process_test_cases(test_cases): results = [] for n, nums in test_cases: result = largest_product(nums) results.append(result) return results # Helpers to parse the input def parse_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) # Number of test cases index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) # Size of the list nums = list(map(int, lines[index + 1].split())) test_cases.append((n, nums)) index += 2 return test_cases"},{"question":"You have a collection of words stored in a string, where each word is separated by one or more spaces. Your task is to write a function that, given a string, returns the length of its longest word. - The input will be a single string, consisting of only letters and spaces. - The input will contain at least one word. **Function Signature:** ```python def longest_word_length(s: str) -> int: pass ``` **Input:** - A single string `s` with a length between `1` and `10^6`, consisting of words separated by spaces. **Output:** - An integer representing the length of the longest word. **Example:** ```python assert longest_word_length(\\"The quick brown fox jumps over the lazy dog\\") == 5 assert longest_word_length(\\"Coding is fun\\") == 6 assert longest_word_length(\\" Hello world \\") == 5 ``` **Explanation:** - In the first example, \\"jumps\\" and \\"quick\\" are the longest words with 5 characters each. - In the second example, \\"Coding\\" is the longest word with 6 characters. - In the third example, despite the extra spaces, \\"Hello\\" is the longest word with 5 characters.","solution":"def longest_word_length(s: str) -> int: Function to find the length of the longest word in a given string. Parameters: s (str): The input string with words separated by spaces. Returns: int: The length of the longest word. words = s.split() if not words: return 0 return max(len(word) for word in words)"},{"question":"You have an ancient stone tablet that contains a matrix of dimensions n x m. Each cell in the matrix contains either a 0 or a 1. According to legend, you can convert the matrix into a sacred relic if you can find the largest sub-matrix that contains only 1s. Write a function that takes a binary matrix (a list of lists) as input and returns the area of the largest sub-matrix consisting entirely of 1s. The input consists of: - An integer n (1 ≤ n ≤ 1000) — the number of rows in the matrix. - An integer m (1 ≤ m ≤ 1000) — the number of columns in the matrix. - n lines each containing m integers (either 0 or 1) — the elements of the matrix. Output a single integer — the area of the largest sub-matrix that contains only 1s. Example: Input: 3 4 1 1 0 1 1 1 1 1 0 1 1 1 Output: 6","solution":"def max_area_of_1s(matrix): if not matrix or not matrix[0]: return 0 n = len(matrix) m = len(matrix[0]) dp = [[0] * m for _ in range(n)] max_area = 0 for i in range(n): for j in range(m): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_area = max(max_area, dp[i][j] * dp[i][j]) return max_area"},{"question":"You are given an array of integers where numbers are unsorted, but you can assume there is always a majority element present in the array. A majority element is one that appears more than floor(n/2) times in the array, where n is the length of the array. Write a function to find this majority element. Your task is to implement the following function: ```python def find_majority_element(arr: List[int]) -> int: pass ``` # Input - An array of integers `arr` of length `n` (1 ≤ n ≤ 105). # Output - Return the majority element which appears more than floor(n/2) times in the array. # Example Input: ```python arr = [2, 2, 1, 1, 1, 2, 2] ``` Output: ```python 2 ``` # Note - You can assume that the array always has a majority element. - The solution\'s time complexity must be O(n) and space complexity must be O(1).","solution":"from typing import List def find_majority_element(arr: List[int]) -> int: Returns the majority element which appears more than floor(n/2) times in the array. candidate = None count = 0 for num in arr: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate"},{"question":"Miko, an avid coder from the village close to the Mahjong Soul Temple, is preparing for a national coding competition. One of the coding challenges given to her is as follows: You are given two positive integers n and k. Your task is to generate a sequence of n distinct positive integers such that the sum of the first k numbers is equal to the sum of the remaining n-k numbers. If there are multiple answers, print any. You can assume that the solution always exists for the given constraints. The input consists of a single integer t (1 leq t leq 100) — the number of test cases. Each of the following t test cases is described by a line containing two integers n and k (1 leq k < n leq 1000). For each test case, print a valid sequence of n distinct positive integers where the sum of the first k numbers is equal to the sum of the remaining n-k numbers. Provide your answers in t separate lines. Here is a possible output for the first test case given: For the second test case, another possible output is: Note that the sequence must consist of distinct positive integers and adhere to the constraints provided.","solution":"def generate_balanced_sequence(n, k): Generates a sequence of n distinct positive integers such that the sum of the first k numbers is equal to the sum of the remaining n-k numbers. first_part = list(range(1, k + 1)) second_part = list(range(k + 1, 2 * k + 1)) remaining_sequence = list(range(2 * k + 1, n + 1)) remaining_sequence += list(range(n + 2, 2 * n + 1)) return first_part + second_part + remaining_sequence[:(n - 2 * k)] def solve(t, cases): results = [] for n, k in cases: result = generate_balanced_sequence(n, k) results.append(result) return results"},{"question":"You are given a list of n integers where each integer represents the height of a building. Each building is of unit width. The goal is to determine the area of the largest rectangle that can be formed by contiguous buildings. Write a function `largest_rectangle_area` that takes a list of integers as input and returns an integer representing the area of the largest rectangle. # Input - A single list of integers `heights`, where each integer denotes the height of a building. # Output - A single integer representing the area of the largest rectangle that can be created from contiguous buildings. # Constraints - The length of `heights` will be between 1 and 100,000. - The height of each building will be between 1 and 10,000. # Example ```python def largest_rectangle_area(heights): # Your code here # Example 1 heights = [2, 1, 5, 6, 2, 3] print(largest_rectangle_area(heights)) # Output: 10 # Example 2 heights = [2, 4] print(largest_rectangle_area(heights)) # Output: 4 ```","solution":"def largest_rectangle_area(heights): Returns the area of the largest rectangle that can be formed using contiguous buildings. :param heights: List[int] - A list of integers representing the heights of the buildings :return: int - The area of the largest rectangle stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() height = heights[top_of_stack] width = index if not stack else index - stack[-1] - 1 max_area = max(max_area, height * width) while stack: top_of_stack = stack.pop() height = heights[top_of_stack] width = index if not stack else index - stack[-1] - 1 max_area = max(max_area, height * width) return max_area"},{"question":"In a magical forest, there is a unique tree known as the Infinity Tree. This tree has an infinite height and each of its levels contains exactly one node. The nodes of the tree are labeled with integers starting from 1 at the root and increasing sequentially as you move down to the next levels. Every node in the Infinity Tree has an infinite number of child nodes. The i-th child of a node labeled x is labeled as x * i. For instance, if a node is labeled x, its children will be labeled x * 1, x * 2, x * 3, and so on. You are a wizard tasked with finding the shortest path (measured by the number of edges crossed) from the root node to a node labeled with a given integer k. Write a function to achieve this. # Input - A single integer k (1 ≤ k ≤ 10^9) — the label of the node for which you need to find the shortest path from the root node labeled 1. # Output - A single integer — the number of edges in the shortest path from the root node to the node labeled k. # Example Input ``` 10 ``` Output ``` 2 ``` # Explanation - The node labeled 1 is connected directly to its children 1, 2, 3, ... - To reach the node labeled 10, follow these steps: - Move from node 1 to node 2 (1 edge) - Move from node 2 to node 10 (1 edge) - 1 + 1 = 2 edges in total # Note Ensure to consider the large constraints and design your solution with time and space efficiency in mind.","solution":"def shortest_path_to_node(k): Returns the number of edges in the shortest path from the root node labeled 1 to the node labeled k. if k == 1: return 0 count = 0 while k > 1: k //= 2 count += 1 return count"},{"question":"You are tasked with arranging a sequence of numbers to maximize the beauty of the sequence. The beauty of a sequence is defined by a \\"peak\\" followed by a \\"valley\\". Specifically, a peak in the sequence must be a number that is larger than the preceding and following numbers, and a valley is a number that is smaller than the preceding and following numbers. Given an array of n integers, your goal is to rearrange the array such that the maximum possible number of peaks and valleys is achieved. Note that the first and last elements of the array cannot be peaks or valleys. For example, for an array [5, 3, 2, 8, 6, 7, 4], one possible rearrangement is [3, 5, 2, 8, 6, 4, 7]. In this arrangement, 5 is a peak and 2 is a valley, 8 is a peak and 6 is a valley. If there are multiple valid rearrangements, print any one of them. # Input - The first line of the input contains an integer n (1 le n le 10^5) — the number of elements in the array. - The second line contains n integers separated by spaces, representing the elements of the array. # Output - Print the rearranged array such that the number of peaks and valleys is maximized. # Example Input: ``` 7 5 3 2 8 6 7 4 ``` Output: ``` 3 5 2 8 6 4 7 ``` Note: The output array need not be unique, hence other valid outputs are also acceptable as long as they maximize the number of peaks and valleys.","solution":"def maximize_peaks_and_valleys(arr): Rearranges the array such that the maximum possible number of peaks and valleys is achieved. arr.sort() n = len(arr) result = [0] * n # Put the smaller half of the sorted array at the \\"peaks\\" positions (odd indices) i = 1 j = (n + 1) // 2 while i < n: result[i] = arr[j] i += 2 j += 1 # Put the larger half of the sorted array at the \\"valleys\\" positions (even indices) i = 0 j = 0 while i < n: result[i] = arr[j] i += 2 j += 1 return result # Example usage n = 7 arr = [5, 3, 2, 8, 6, 7, 4] print(maximize_peaks_and_valleys(arr))"},{"question":"Given a string S consisting of only lowercase alphabetical characters, determine the minimum number of operations required to make all the characters in the string the same. In one operation, you can choose any character in the string and change it to any other lowercase alphabetical character. Write a function `min_operations_to_uniform_string(S: str) -> int` that takes the string S as input and returns the minimum number of operations required to make all characters in the string the same. # Input - A single string S (1 ≤ |S| ≤ 100,000) consisting of only lowercase alphabetical characters. # Output - An integer representing the minimum number of operations required to make all characters in the string the same. # Example Input ``` aabbcc ``` Output ``` 4 ``` Input ``` abcde ``` Output ``` 4 ``` # Explanation In the first example, you can convert two \'a\'s, two \'b\'s, or two \'c\'s to the same character, requiring a total of 4 operations to make the string uniform. For example, converting all characters to \'a\' would require changing both \'b\'s and both \'c\'s, resulting in 4 changes. In the second example, you can change any 4 out of the 5 distinct characters to match the fifth character. For example, changing all characters to \'a\' would require changing \'b\', \'c\', \'d\', and \'e\', resulting in 4 changes.","solution":"def min_operations_to_uniform_string(S: str) -> int: Returns the minimum number of operations required to make all characters in the string S the same. from collections import Counter # Count the frequency of each character in the string char_freq = Counter(S) # Find the character with the maximum frequency max_freq = max(char_freq.values()) # The minimum operations will be the total length of the string # minus the number of occurrences of the most frequent character return len(S) - max_freq"},{"question":"In a faraway kingdom, decisions are made in a very unique manner: by equidistant points along the perimeter of a polygon. The wise king has noticed a peculiar thing; the number of diagonals in the polygons with different numbers of sides follows a relationship that interested him greatly. Your task is to help the kingdom investigate this further. Given an integer n representing the number of sides of a polygon, you have to compute the number of diagonals that can be drawn. Recall that a diagonal is a line segment connecting two non-adjacent vertices. By definition: - A diagonal connects two vertices excluding the sides of the polygon itself. - A polygon with n sides will never have less than 3 sides. Write a function to calculate the number of diagonals in a polygon with n sides. # Input - The input consists of a single integer n (3 leq n leq 10^9), the number of sides in the polygon. # Output - Output the number of diagonals in the polygon. # Example Example 1 **Input**: ``` 5 ``` **Output**: ``` 5 ``` **Explanation**: A polygon with 5 sides (pentagon) has 5 diagonals. Example 2 **Input**: ``` 10 ``` **Output**: ``` 35 ``` **Explanation**: A polygon with 10 sides (decagon) has 35 diagonals. # Note The number of diagonals in a polygon with n sides can be calculated using the formula: text{Diagonals} = frac{n cdot (n-3)}{2} .","solution":"def number_of_diagonals(n): Returns the number of diagonals in a polygon with n sides. if n < 3: raise ValueError(\\"A polygon must have at least 3 sides.\\") return n * (n - 3) // 2"},{"question":"Programming enthusiasts often find themselves engaging in various problem-solving scenarios, especially around string manipulation and pattern recognition within text. One such common scenario involves detecting valid patterns within a given set of strings. In this task, you are required to analyze a sequence of strings that represent email patterns. The objective is to determine the maximum number of valid email addresses within a given domain. A valid email address is defined as follows: - It has a format of local_part@domain where the local_part consists of letters (both upper and lower case), digits, dots (\'.\'), hyphens (\'-\'), and underscores (\'_\') without consecutive dots and does not start or end with a dot. - The domain part consists of one main domain followed by one or more domain extensions separated by dots (\'.\'). The main domain and each domain extension can only consist of letters (both upper and lower case). You are provided with a list of email addresses and a target domain. Your task is to count how many valid email addresses belong to the given target domain. Input: - A list of strings where each string represents an email address. - A string representing the target domain. Output: - An integer representing the number of valid email addresses within the given domain. # Example: Input: ``` [\\"test.email+alex@leetcode.com\\", \\"user@domain.com\\", \\"username@leetcode.com\\", \\"user.name@example.com\\", \\"user_name@leetcode.com\\"] \\"leetcode.com\\" ``` Output: ``` 3 ``` # Explanation: In the provided example, there are 5 email addresses. Out of these, the valid email addresses that belong to the \\"leetcode.com\\" domain are: 1. \\"test.email+alex@leetcode.com\\" 2. \\"username@leetcode.com\\" 3. \\"user_name@leetcode.com\\" Hence, the output is 3 as there are 3 valid email addresses within the \\"leetcode.com\\" domain. To summarize, you need to write a program that reads a list of emails and a target domain from the input, validates the email format, and counts how many of those emails belong to the given domain.","solution":"import re def count_valid_emails(emails, target_domain): Counts the number of valid email addresses in the given list that have the target domain. Parameters: emails (list of str): The list of email addresses to check. target_domain (str): The domain to match. Returns: int: The number of valid email addresses with the target domain. # Define a regex pattern for valid email addresses email_pattern = re.compile( r\'^[a-zA-Z0-9_.+-]+@([a-zA-Z]+.)+[a-zA-Z]+\' ) def is_valid_email(email): Checks if the email has a valid format according to the pattern and checks if it belongs to the target domain. Parameters: email (str): The email address to validate. Returns: bool: True if the email is valid and belongs to the target domain, False otherwise. if email_pattern.match(email): domain = email.split(\'@\')[-1] return domain == target_domain return False valid_email_count = sum(1 for email in emails if is_valid_email(email)) return valid_email_count"},{"question":"Given a string, adjust the string in such a way that the word length is maximized while ensuring that no character in each word appears more than once. In formal terms, you will be provided with a string `s` consisting of lowercase letters. You need to determine the longest substring which has no repeating characters. If multiple substrings of the same maximum length exist, return any one of them. **Input:** - A string `s` (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. **Output:** - A single string which is the longest substring without repeating characters. **Example:** Input: ``` abcabcbb ``` Output: ``` abc ``` Input: ``` bbbbb ``` Output: ``` b ``` Input: ``` pwwkew ``` Output: ``` wke ``` Note: In the input \\"abcabcbb\\", the answer is \\"abc\\", with the length of 3. In \\"bbbbb\\", the answer is \\"b\\", with the length of 1. In \\"pwwkew\\", the answer is \\"wke\\", with the length of 3.","solution":"def longest_substring_without_repeating_characters(s): Returns the longest substring of `s` which has no repeating characters. if not s: return \\"\\" start = 0 max_len = 0 max_substring = \\"\\" char_index_map = {} for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index current_len = index - start + 1 if current_len > max_len: max_len = current_len max_substring = s[start:index + 1] return max_substring"},{"question":"You are given an undirected graph with `n` vertices and `m` edges. Each edge has a weight, but some edges might have been removed from the graph. You need to restore the graph\'s connectivity with minimal total edge weight. Given `n`, `m`, and a list of `m` edges where each edge is represented by three integers `u`, `v`, and `w`, indicating an edge between vertices `u` and `v` with weight `w`. If no such spanning tree exists, print `-1`. Write a function `restore_graph(n, m, edges)` that returns the list of edges in the restored graph, each represented as a tuple `(u, v, w)`, or `-1` if it\'s not possible to restore the graph. The edges in the output list can be in any order. # Function Signature ```python def restore_graph(n: int, m: int, edges: List[Tuple[int, int, int]]) -> Union[List[Tuple[int, int, int]], int]: ``` # Input - `n` (2 ≤ n ≤ 100,000): The number of vertices in the graph. - `m` (0 ≤ m ≤ 200,000): The number of edges initially present in the graph. - `edges`: A list of `m` tuples, each containing three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 0 ≤ w ≤ 1,000,000) representing an edge between vertices `u` and `v` with weight `w`. # Output - Return a list of `n-1` tuples, each containing three integers representing the vertices and weight of an edge in the restored graph, or `-1` if it\'s not possible to restore the graph. # Example ```python n = 4 m = 3 edges = [(1, 2, 1), (2, 3, 2), (3, 4, 3)] # should return [(1, 2, 1), (2, 3, 2), (3, 4, 3)] n = 4 m = 1 edges = [(1, 2, 1)] # should return -1 ``` # Constraints - You can assume that the provided graph may not be initially connected. - Ensure the function runs efficiently with the constraint limits.","solution":"from typing import List, Tuple, Union def restore_graph(n: int, m: int, edges: List[Tuple[int, int, int]]) -> Union[List[Tuple[int, int, int]], int]: parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX edges.sort(key=lambda x: x[2]) mst_edges = [] for u, v, w in edges: if find(u) != find(v): union(u, v) mst_edges.append((u, v, w)) if len(mst_edges) == n - 1: break if len(mst_edges) != n - 1: return -1 return mst_edges"},{"question":"You are given an array of n integers. You can perform the following operation any number of times (including zero): - Pick any two adjacent elements in the array and remove one of them. Your task is to determine the minimum possible number of elements that can be left in the array after performing any number of operations. # Input The first line contains a single integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^5) — the elements of the array. # Output Print the minimum possible number of elements left in the array after performing any number of operations. # Examples Example 1 # Input ``` 4 1 1 2 2 ``` # Output ``` 0 ``` Example 2 # Input ``` 5 1 3 3 2 2 ``` # Output ``` 1 ``` **Explanation:** - In the first example, you can remove adjacent pairs of elements until no elements are left. First, remove the pair (1, 1), then (2, 2). - In the second example, you can remove the adjacent pairs (3, 3) and (2, 2), leaving the single element 1.","solution":"from collections import Counter def min_elements_left(n, array): Returns the minimum number of elements that can be left in the array after performing the described operation. if n == 0: return 0 counter = Counter(array) # Calculate the minimum elements left by summing the frequency mod 2 min_elements = sum(count % 2 for count in counter.values()) return min_elements"},{"question":"Sasha is planning to build a new line of cute plushies for her toy store. Each plushie is characterized by a specific \'cuteness\' level. She wants the total cuteness level of the plushies in her line to be equal to a specific value C. To generate a diverse and attractive array of plushies, she can choose from p different types of plushies. Each type of plushie i has a unique cuteness value ci and there is an unlimited supply of these plushies. Since creating too many plushies consumes more resources, Sasha wants to build her toy line with the minimum possible number of plushies to achieve the cuteness level C. Help Sasha determine the minimum number of plushies required to achieve the total cuteness level exactly equal to C. The first line contains two integers C and p (1 ≤ C ≤ 10^9, 1 ≤ p ≤ 100). The second line contains p integers c1, c2, ..., cp (1 ≤ ci ≤ 10^7 for each i), representing the cuteness values of the different types of plushies. In a single line, print the minimum number of plushies required to achieve the total cuteness level C. If it is not possible to achieve exactly C cuteness level with the given plushies, print -1. Examples: Input: 10 2 2 3 Output: 4 Input: 9 3 1 4 5 Output: 2","solution":"def min_plushies(C, p, cuteness_values): dp = [float(\'inf\')] * (C + 1) dp[0] = 0 for cuteness in cuteness_values: for i in range(cuteness, C + 1): dp[i] = min(dp[i], dp[i - cuteness] + 1) return dp[C] if dp[C] != float(\'inf\') else -1"},{"question":"John is organizing a marathon race in which every runner has a unique ID from 1 to n. He wants to track the order in which runners cross the finish line and allow later inquiries about their positions. To facilitate this, he has created a system which consists of two types of operations: 1. Mark that a runner with ID x has finished the race. 2. Query the position of a runner with ID x in the finish line sequence. If the runner hasn\'t finished yet, return -1. John needs your help to automate this system. Write a program that processes a sequence of operations and provides the results for all the queries. The first line of input contains two integers n (1 leq n leq 10^5) - the number of runners, and m (1 leq m leq 2 cdot 10^5) - the number of operations (either marking a runner as finished or querying a runner\'s position). Each of the next m lines contains one of the following commands: - `1 x` where x (1 ≤ x ≤ n) is the ID of the runner who has finished the race, - `2 x` where x (1 ≤ x ≤ n) is the ID of the runner for whom we are querying the position. For each query (`2 x`), print the position of the runner with ID x. If the runner has not finished yet, print -1. Note: You can assume that a runner will finish the race at most once, and queries about a runner\'s position may come at any time (before or after the runner finishes the race). Example: Input: ``` 5 7 1 2 1 3 2 2 1 5 2 5 2 1 2 4 ``` Output: ``` 1 3 2 -1 ```","solution":"def process_operations(n, m, operations): Processes a list of operations for tracking the positions of runners who finish the race. Args: - n (int): the number of runners. - m (int): the number of operations. - operations (list of tuple): list of operations. Each operation is a tuple where the first value is either 1 or 2 indicating the type of operation, and the second value is the runner id. Returns: - list: the results of all \\"2 x\\" operations. finish_sequence = [] position_map = [-1] * (n + 1) # holds the position (1-based index) of each runner, with -1 indicating unfinished result = [] for operation in operations: op_type, x = operation if op_type == 1: # Mark the runner x as finished position_map[x] = len(finish_sequence) + 1 finish_sequence.append(x) elif op_type == 2: # Query the position of runner x result.append(position_map[x]) return result"},{"question":"You are given an array of integers and a target sum. Your objective is to find all unique combinations in the array where the numbers sum to the target. Each number in the array can be used multiple times in the combination. Return the combinations in any order. Input: - An integer array `candidates` of length `n` where each element is a positive integer. - An integer `target` representing the target sum. Output: - Return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. Note: - The same number can be chosen from `candidates` an unlimited number of times. - Two combinations are unique if the frequency of at least one of the chosen numbers is different. - The solution set must not contain duplicate combinations. Example 1: Input: candidates = [2,3,6,7], target = 7 Output: [[2,2,3],[7]] Example 2: Input: candidates = [2,3,5], target = 8 Output: [[2,2,2,2],[2,3,3],[3,5]] Tips: - You may solve the problem using backtracking or dynamic programming. - Consider edge cases where the array is empty or the target is zero.","solution":"def combinationSum(candidates, target): def backtrack(remaining, combination, start): if remaining == 0: result.append(list(combination)) return if remaining < 0: return for i in range(start, len(candidates)): combination.append(candidates[i]) backtrack(remaining - candidates[i], combination, i) combination.pop() result = [] candidates.sort() backtrack(target, [], 0) return result"},{"question":"You are given n bricks and you want to construct the tallest possible tower. Each brick has a height of 1 unit, and you can only place a brick on top of another if the total height of the tower up to that point is even. In other words, you can place the first brick on the ground, but you can only place the next brick if the height would be an even number. If the total number of bricks used in your tower is h, then the remainder of bricks after constructing the tower is n - h. Your goal is to maximize the height of the tower while ensuring all the remaining bricks (if any) have to be used to construct a secondary tower following the same even height constraint rules. Given n, determine the maximum height h_1 of the first tower and the height h_2 of the secondary tower that can be built with the remaining bricks. The input consists of a single integer n (1 leq n leq 10^9) — the number of bricks. Print two integers: h_1 — the maximum height of the first tower, and h_2 — the height of the secondary tower. **Example 1:** Input: 5 Output: 4 1 **Example 2:** Input: 12 Output: 8 4 **Example 3:** Input: 18 Output: 16 2 **Example 4:** Input: 7 Output: 6 1 **Explanation:** In the first example, you can build the tallest possible first tower of even height with 4 bricks: [1, 2, 3, 4] leaving 1 brick for the secondary tower. In the second example, you can build the tallest possible first tower of even height with 8 bricks: [1, 2, 3, 4, 5, 6, 7, 8] leaving 4 bricks for the secondary tower. In the third example, you can build the tallest possible first tower of even height with 16 bricks leaving 2 bricks for the secondary tower. In the fourth example, you can build the tallest possible first tower of even height with 6 bricks leaving 1 brick for the secondary tower.","solution":"def tower_heights(n): Given n bricks, determine the maximum height h1 of the first tower and the height h2 of the secondary tower. Each tower has to follow the rule that a brick can only be placed on top if the tower\'s height is even. :param n: int : The number of bricks :return: tuple : (h1, h2) where h1 is the height of the first tower, h2 is the height of the secondary tower h1 = (n // 2) * 2 h2 = n - h1 return h1, h2"},{"question":"The Kingdom of Digits has decided to implement a new telecommunication tower system to connect all its cities. The kingdom consists of n cities, labeled from 1 to n. The installation of these towers should follow specific rules in order to minimize the overall cost while maintaining connectivity between cities. The cost of connecting two cities with a telecommunication tower is represented by an undirected weighted edge between two city nodes. To ensure efficiency and robustness, the Kingdom requires a Minimum Spanning Tree (MST) to connect all the cities. You are tasked with designing an algorithm to find the MST and calculating the total cost of this tree. The cities and the edges between them are represented by an adjacency list. Each city can have multiple direct connections to other cities with varying costs. # Input - The first line contains two integers n (1 leq n leq 10^5), the number of cities, and m (1 leq m leq 2 cdot 10^5), the number of edges. - Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10^9) representing an edge between city u and city v with a cost w. # Output - Print the total cost of the Minimum Spanning Tree. If it is impossible to connect all cities, print the word \\"Impossible\\". # Example Input ``` 4 5 1 2 10 1 3 15 2 3 12 2 4 25 3 4 30 ``` Output ``` 47 ``` This example describes a kingdom with 4 cities and 5 possible connections where the minimum cost to connect all cities is 47.","solution":"import heapq def minimum_spanning_tree(n, edges): if n == 1: return 0 if not edges else \\"Impossible\\" adj = [[] for _ in range(n)] for u, v, w in edges: adj[u-1].append((w, v-1)) adj[v-1].append((w, u-1)) visited = [False] * n min_heap = [(0, 0)] # (cost, start_vertex) total_cost = 0 edge_count = 0 while min_heap and edge_count < n: cost, u = heapq.heappop(min_heap) if visited[u]: continue visited[u] = True total_cost += cost edge_count += 1 for next_cost, v in adj[u]: if not visited[v]: heapq.heappush(min_heap, (next_cost, v)) return total_cost if edge_count == n else \\"Impossible\\""},{"question":"In a distant town, there are n houses aligned in a row, each containing some amount of gold. You are a smart thief and you want to steal the maximum amount of gold tonight. However, there\'s a rule that you cannot steal gold from two consecutive houses, as this would alert the police. You are given an integer array representing the amount of gold in each house. Your task is to determine the maximum amount of gold you can steal without triggering the police alarm. Input: - The first line contains an integer n, the number of houses (1 ≤ n ≤ 100). - The second line contains n integers, each representing the amount of gold in a house. Each integer is between 1 and 1000. Output: - A single integer representing the maximum gold you can steal without alerting the police. Example: Input: 6 5 3 4 11 2 8 Output: 24 Explanation: The optimal set of houses to steal from is the 1st, 4th, and 6th houses, yielding a total of 5 + 11 + 8 = 24.","solution":"def max_gold(houses): This function takes in a list of integers representing the gold in each house and returns the maximum amount of gold that can be stolen without alerting the police by robbing two consecutive houses. n = len(houses) if n == 0: return 0 elif n == 1: return houses[0] elif n == 2: return max(houses[0], houses[1]) dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + houses[i]) return dp[-1]"},{"question":"You are given a sequence of integer numbers A of length n. You need to perform q queries on the sequence. For each query, you are given an integer x. You need to determine if there exists two elements in the sequence such that their sum is equal to x. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the length of the sequence. - The second line contains n integers, A1, A2, ..., An (1 ≤ Ai ≤ 1000). - The third line contains an integer q (1 ≤ q ≤ 1000), the number of queries. - The next q lines each contain an integer x (2 ≤ x ≤ 2000), representing the target sum for that query. Output: For each query, output \\"YES\\" if there exist two distinct elements in the sequence whose sum is equal to x. Otherwise, output \\"NO\\". Example: Input: 5 1 2 3 4 5 3 5 7 10 Output: YES YES NO","solution":"def find_pairs_with_sum(n, A, queries): This function checks for each query if there exist two distinct elements in the sequence A whose sum is equal to the query integer. :param n: Integer, the length of the sequence. :param A: List of integers, the sequence. :param queries: List of integers, the queries. :return: List of strings, \\"YES\\" or \\"NO\\" for each query. result = [] for x in queries: found = False seen = set() for num in A: if (x - num) in seen: found = True break seen.add(num) if found: result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"In a mysterious forest realm, there exists an infinite two-dimensional grid of cells, where each cell can either be alive or dead. The state of the grid evolves in \\"generations\\" according to the following rules, similar to Conway\'s Game of Life: 1. A live cell with fewer than 2 live neighbors dies, as if by underpopulation. 2. A live cell with 2 or 3 live neighbors lives on to the next generation. 3. A live cell with more than 3 live neighbors dies, as if by overpopulation. 4. A dead cell with exactly 3 live neighbors becomes a live cell, as if by reproduction. Each cell has 8 neighbors, which are horizontally, vertically, or diagonally adjacent. Given the initial configuration of the grid, determine the number of live cells after a specified number of generations. The first line of input contains three integers: `m`, `n`, and `g` (1 le m, n le 1000, 0 le g le 100), where `m` is the number of rows, `n` is the number of columns, and `g` is the number of generations. The next `m` lines each contain `n` characters, representing the initial state of the grid: `.` represents a dead cell, and `*` represents a live cell. Output a single integer, the number of live cells in the grid after `g` generations. # Example Input ``` 4 5 3 ..... .**.. ..*.. ..... ``` Output ``` 4 ``` # Explanation After applying the rules of evolution for 3 generations, the grid configuration stabilizes, and there are 4 live cells remaining.","solution":"def count_live_neighbors(grid, i, j, m, n): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] live_neighbors = 0 for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < m and 0 <= nj < n and grid[ni][nj] == \'*\': live_neighbors += 1 return live_neighbors def next_generation(grid, m, n): new_grid = [[\'.\' for _ in range(n)] for _ in range(m)] for i in range(m): for j in range(n): live_neighbors = count_live_neighbors(grid, i, j, m, n) if grid[i][j] == \'*\' and (live_neighbors == 2 or live_neighbors == 3): new_grid[i][j] = \'*\' elif grid[i][j] == \'.\' and live_neighbors == 3: new_grid[i][j] = \'*\' return new_grid def count_live_cells_after_generations(m, n, g, initial_grid): grid = [list(row) for row in initial_grid] for _ in range(g): grid = next_generation(grid, m, n) return sum(row.count(\'*\') for row in grid) # Read input def main(): import sys input = sys.stdin.read data = input().split() m = int(data[0]) n = int(data[1]) g = int(data[2]) initial_grid = [data[3 + i] for i in range(m)] num_live_cells = count_live_cells_after_generations(m, n, g, initial_grid) print(num_live_cells) if __name__ == \\"__main__\\": main()"},{"question":"A company has a set of n software projects that need to be assigned to m developer teams. Each project takes a certain amount of time to complete, and each team has a maximum capacity for the number of projects it can handle simultaneously. The company wants to ensure that no team is overburdened and that project assignments are well-balanced. Specifically, each team should get as close as possible to handling the same number of projects. Additionally, the total time taken by the projects assigned to a team should not exceed the team\'s maximum allowable workload. Write a program to determine how to distribute the projects among the teams. The input consists of: - The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the number of projects and the number of teams, respectively. - The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 107) — the time required to complete each project. - The third line contains m integers c1, c2, ..., cm (1 ≤ ci ≤ 107) — the maximum capacity (in terms of project count) that each team can handle. - The fourth line contains m integers w1, w2, ..., wm (1 ≤ wi ≤ 107) — the maximum workload (in terms of project completion time) that each team can handle. Output m lines: in the i-th line, print the project IDs (1-based) assigned to the i-th team. Each project ID should be printed only once and each project must be assigned to exactly one team. The distribution of projects should satisfy the given constraints. If there are multiple solutions, print any of them. If it is impossible to distribute the projects according to the constraints, print \\"Impossible\\". Example input: 5 3 3 2 4 5 2 2 2 1 10 5 10 Example output: 1 2 3 5 4","solution":"def distribute_projects(n, m, project_times, max_projects, max_workloads): project_ids = list(range(1, n + 1)) projects = list(zip(project_ids, project_times)) teams = [[] for _ in range(m)] team_info = [(max_projects[i], max_workloads[i]) for i in range(m)] remaining_capacity = [max_projects[i] for i in range(m)] remaining_workload = [max_workloads[i] for i in range(m)] projects.sort(key=lambda x: -x[1]) for project_id, project_time in projects: assigned = False for i in range(m): if remaining_capacity[i] > 0 and remaining_workload[i] >= project_time: teams[i].append(project_id) remaining_capacity[i] -= 1 remaining_workload[i] -= project_time assigned = True break if not assigned: return \\"Impossible\\" result = [] for team in teams: result.append(\\" \\".join(map(str, team))) return result def main(): import sys input = sys.stdin.read data = input().split() n, m = int(data[0]), int(data[1]) project_times = list(map(int, data[2:n+2])) max_projects = list(map(int, data[n+2:n+m+2])) max_workloads = list(map(int, data[n+m+2:])) distribution = distribute_projects(n, m, project_times, max_projects, max_workloads) if distribution == \\"Impossible\\": print(\\"Impossible\\") else: for line in distribution: print(line) if __name__ == \\"__main__\\": main()"},{"question":"You are given an array of size `n` which contains only zeros and ones. This array represents the status of `n` light bulbs, where `0` means the bulb is off, and `1` means the bulb is on. You are allowed to flip a subarray, meaning you can choose any starting and ending index of the array and flip all bulbs in that subarray (change `0` to `1` and `1` to `0`). Your task is to determine the maximum number of bulbs that can be in the \\"on\\" state (value `1`) after at most one flip operation. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100,000), the length of the array. - The second line contains `n` integers, each either `0` or `1`, representing the initial state of the bulbs. # Output - Print a single integer, the maximum number of bulbs that can be in the \\"on\\" state after at most one flip operation. # Example Input ``` 5 1 0 0 1 0 ``` Output ``` 4 ``` Explanation By flipping the subarray from index 1 to index 4 (0-based index), the array becomes: ``` 1 1 1 0 1 ``` Thus, the total number of bulbs that are on is `4`. Submit your code which finds the maximum number of bulbs that can be in the \\"on\\" state after at most one flip operation.","solution":"def max_bulbs_on_after_flip(n, bulbs): # Step 1: Count initial number of 1s initial_ones = sum(bulbs) # Step 2: Modify array for Kadane\'s algorithm modified_array = [-1 if bulb == 1 else 1 for bulb in bulbs] # Step 3: Apply Kadane\'s algorithm to find maximum sum subarray max_end_here = max_so_far = modified_array[0] for x in modified_array[1:]: max_end_here = max(x, max_end_here + x) max_so_far = max(max_so_far, max_end_here) # If all are 1s, we need to handle the special case if initial_ones == n: return n - 1 # Step 4: Total number of 1s after the best flip return initial_ones + max_so_far"},{"question":"In a country, there are n cities connected by bidirectional roads. The cities are numbered from 1 to n. Some pairs of cities have direct roads between them which take 1 unit of time to traverse. During winter, the government\'s maintenance crew can repair some (or none) of the roads spanning between two cities and might add some new roads. The maintenance crew needs to ensure that every city should be able to reach every other city in the minimum possible time after the repairs. Your task is to help the government identify the minimum necessary set of roads (either repairing existing ones or constructing new ones) needed to make sure that any city is reachable from any other city in the minimum possible unit of time. Print the required roads to achieve this. # Input - The first line contains two integers, n (2 ≤ n ≤ 1000) and m (0 ≤ m ≤ n*(n-1)/2), representing the number of cities and the number of existing roads respectively. - The next m lines each contain two integers, u and v (1 ≤ u, v ≤ n), representing a road between cities u and v. # Output - Print k, the number of roads required to be repaired or added. - Print each of the k pairs of integers u and v corresponding to the roads that will be either newly constructed or repaired. If no work is needed, print 0. # Example Input: ``` 4 2 1 2 2 3 ``` Output: ``` 1 3 4 ``` Input: ``` 5 3 1 2 2 3 3 4 ``` Output: ``` 1 4 5 ``` # Note - In the first example, with the addition of the road between city 3 and city 4, all cities will be connected in the minimum possible time. - In the second example, with the addition of the road between city 4 and city 5, all cities will be connected in the minimum possible time.","solution":"def find_minimum_roads(n, m, roads): parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY # Applying union for all given edges for u, v in roads: union(u, v) # Collect all unique components components = set(find(x) for x in range(1, n + 1)) # Number of new roads needed is components - 1 additional_roads_needed = len(components) - 1 if additional_roads_needed == 0: return 0, [] # Generate the new roads to connect components component_list = list(components) new_roads = [] for i in range(additional_roads_needed): new_roads.append((component_list[i], component_list[i + 1])) return additional_roads_needed, new_roads"},{"question":"You are given a list of integers representing the stock prices of a company for each day during a certain period. Your task is to write a program that finds the maximum profit that can be made by performing a single buy and a single sell transaction. Note that you must buy the stock before you can sell it. # Input - The input consists of multiple test cases. The first line contains an integer T, the number of test cases. - Each test case starts with an integer n, the length of the list of stock prices. - The next line contains n space-separated integers representing the stock prices for each day. # Output For each test case, output a single integer, the maximum profit that can be achieved from a single buy and sell transaction. If no profit can be made, output 0. # Constraints - 1 ≤ T ≤ 1000 - 1 ≤ n ≤ 10^5 - 0 ≤ stock prices ≤ 10^5 # Example Input ``` 3 6 7 1 5 3 6 4 5 7 6 4 3 1 4 2 4 1 7 ``` Output ``` 5 0 6 ``` # Explanation 1. For the first test case, the best possible profit is by buying on day 2 (price = 1) and selling on day 5 (price = 6), so the profit is 6 - 1 = 5. 2. For the second test case, no profit can be made because the prices are monotonically decreasing. 3. For the third test case, the best possible profit is by buying on day 3 (price = 1) and selling on day 4 (price = 7), so the profit is 7 - 1 = 6.","solution":"def max_profit(prices): Calculate the maximum profit from a single buy and sell transaction. :param prices: List of stock prices. :return: Maximum profit. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit def process_test_cases(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] prices = test_cases[i][1] results.append(max_profit(prices)) return results # Example usage: # T = 3 # test_cases = [ # (6, [7, 1, 5, 3, 6, 4]), # (5, [7, 6, 4, 3, 1]), # (4, [2, 4, 1, 7]), # ] # print(process_test_cases(T, test_cases)) # Output should be [5, 0, 6]"},{"question":"You are given a list of integers. Write a function that reorders the list so that all the even numbers come before all the odd numbers. Both even and odd numbers should preserve their relative order in the resulting list. The input consists of a single list of integers. The list length is guaranteed to be between 1 and 1000, inclusive. Each integer in the list is guaranteed to be between -1000 and 1000, inclusive. Output the reordered list, where all even numbers precede all odd numbers, while maintaining the original relative order of even and odd numbers. Function signature: ```python def reorder_evens_first(nums: List[int]) -> List[int]: ``` Example: ```python reorder_evens_first([3, 1, 2, 4]) # Should return [2, 4, 3, 1] reorder_evens_first([0, 1, -2, -4, 3]) # Should return [0, -2, -4, 1, 3] reorder_evens_first([1, 3, 5, 7]) # Should return [1, 3, 5, 7] reorder_evens_first([2, 4, 6, 8]) # Should return [2, 4, 6, 8] ```","solution":"from typing import List def reorder_evens_first(nums: List[int]) -> List[int]: Reorder the input list so that all even numbers come before all odd numbers, while preserving their relative order. evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] return evens + odds"},{"question":"A spaceship is traveling between planets in the galaxy using a warp drive. The warp drive allows the spaceship to instantaneously jump a certain number of light years each day, but it can only make one jump per day. The spaceship\'s fuel cells get exhausted depending on the total number of light years traveled in a single jump. The closer the spaceship gets to the destination, the smaller the jump it can afford due to limited fuel. Given an array `distances` where each element denotes the maximum number of light years the spaceship can jump on that day and an integer `d` representing the total distance to the target planet, determine if the spaceship can reach the target planet with the given jumps in the order they appear in the array. Write a function `can_reach_target` that takes in two parameters: - `distances`: a list of integers where each integer represents the maximum possible jump distance per day. - `d`: an integer representing the total distance to the target planet. The function should return `True` if the spaceship can reach the target planet using the given jumps in sequence, otherwise return `False`. # Input - distances: List[int] - d: int # Output - bool # Constraints - 1 ≤ len(distances) ≤ 1000 - 1 ≤ distances[i] ≤ 100 - 1 ≤ d ≤ 10000 # Example ``` can_reach_target([2, 4, 1, 1, 3, 2], 10) ``` Output: ``` True ``` Explanation: The spaceship can jump 2 light years on the first day, 4 on the second day, 1 on the third day, 1 on the fourth day, 2 on the fifth day, and reaches the target by jumping 3 light years on the sixth day, making a total of 2+4+1+1+2+3 = 13 light years. Thus it can reach the target since it covers distance `d`.","solution":"def can_reach_target(distances, d): Determine if the spaceship can reach the target planet with the given jumps in sequence. Parameters: distances (list of int): The list of maximum possible jump distances per day. d (int): The total distance to the target planet. Returns: bool: True if the spaceship can reach the target planet, otherwise False. current_distance = 0 for jump in distances: current_distance += jump if current_distance >= d: return True return False"},{"question":"Manao has a rectangular garden of size n x m and wants to plant trees in a specific way. He wants to maximize the number of trees in the garden such that no two trees are planted in the same row or same column. Given the dimensions of the garden as two integers, n and m (1 ≤ n, m ≤ 100), determine the maximum number of trees that can be planted, and provide the coordinates of each tree in the garden. Input: The single line contains two space-separated integers n and m. Output: In the first line, print a single integer k — the maximum number of trees that can be planted. In each of the next k lines, print a pair of space-separated integers — the x and y coordinates, respectively, of each tree. Example: Input: 3 2 Output: 2 1 1 2 2 Explanation: In a 3x2 garden, the trees can be planted in positions (1,1) and (2,2) to satisfy the conditions mentioned. Multiple solutions are possible, but the output must represent a valid configuration.","solution":"def max_trees(n, m): Determine the maximum number of trees and their positions in an n x m garden such that no two trees are in the same row or column. Args: n (int): The number of rows in the garden. m (int): The number of columns in the garden. Returns: A tuple containing: - The maximum number of trees that can be planted. - A list of tuples representing the coordinates of each tree. max_trees = min(n, m) coordinates = [(i + 1, i + 1) for i in range(max_trees)] return max_trees, coordinates"},{"question":"In this task, you are given an array of positive integers. Your goal is to modify the array such that the sum of elements in every subarray of length d is not divisible by a given integer m. You can modify an element by optionally either incrementing or decrementing it by 1. # Input - The first line contains three integers n (the length of the array), d (the length of the subarray), and m (the divisor) (1 le d le n le 10^5, 1 le m le 10^3). - The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^4) — the elements of the array. # Output Print \\"YES\\" if it\'s possible to modify the array to meet the condition. Otherwise, print \\"NO\\". # Example Input ``` 5 3 5 2 3 1 4 6 ``` Output ``` YES ``` Input ``` 4 2 3 3 5 1 2 ``` Output ``` NO ``` # Explanation In the first example, one possible way to modify the array is: - Modify the array to [3, 3, 1, 4, 6]. The subarrays of length 3 will be [3, 3, 1], [3, 1, 4], [1, 4, 6]. Their sums are 7, 8, and 11 respectively, none of which are divisible by 5. In the second example, there is no way to modify the array such that all subarrays of length 2 have a sum not divisible by 3.","solution":"def is_possible(n, d, m, a): Determines if the array can be modified so that no subarray of length d has a sum divisible by m. for i in range(n - d + 1): subarray_sum = sum(a[i:i+d]) if subarray_sum % m == 0: # early exit if we find a subarray whose sum is divisible by m return \\"NO\\" # If no subarray of length d has a sum divisible by m after reviewing all subarrays return \\"YES\\" # Example usage n = 5 d = 3 m = 5 a = [2, 3, 1, 4, 6] print(is_possible(n, d, m, a)) # Output: \\"YES\\""},{"question":"You are given an array of integers and your task is to perform queries on this array. Initially, the array contains `n` integers. You are required to perform `m` queries on the array. Each query can be one of the following types: 1. Update the value at index `i` to `x`. (`1 ≤ i ≤ n`) 2. Find the sum of elements from index `l` to `r` inclusive. (`1 ≤ l ≤ r ≤ n`) Your goal is to process these queries efficiently. **Input Format:** - The first line contains two space-separated integers `n` and `m`, the size of the array and the number of queries, respectively. - The second line contains `n` space-separated integers, representing the initial array. - The next `m` lines describe the queries. Each query is represented by three integers. For an update query, the format is `1 i x`, and for a sum query, the format is `2 l r`. **Output Format:** - For each sum query, output the sum of the elements in the specified range on a new line. **Constraints:** - 1 ≤ n, m ≤ 10^5 - 1 ≤ i, l, r ≤ n - |x| le 10^9 - |array[i]| le 10^9 **Example:** **Input:** ``` 5 3 1 2 3 4 5 2 1 3 1 2 10 2 1 3 ``` **Output:** ``` 6 14 ``` In the example: - The initial array is `[1, 2, 3, 4, 5]`. - The first query asks for the sum from index `1` to `3`, which is `1 + 2 + 3 = 6`. - The second query updates the value at index `2` to `10`, modifying the array to `[1, 10, 3, 4, 5]`. - The third query asks for the sum from index `1` to `3` again, which is `1 + 10 + 3 = 14`.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, pos, value): pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, l, r): l += self.n r += self.n total = 0 while l < r: if l % 2 == 1: total += self.tree[l] l += 1 if r % 2 == 1: r -= 1 total += self.tree[r] l //= 2 r //= 2 return total def process_queries(n, m, array, queries): st = SegmentTree(array) results = [] for query in queries: if query[0] == 1: _, i, x = query st.update(i - 1, x) elif query[0] == 2: _, l, r = query results.append(st.range_sum(l - 1, r)) return results"},{"question":"You are given a sequence of integers s of length n. You have to process q queries to this sequence. Each query specifies an integer k and asks you to find if there exists a contiguous subsequence of s whose sum equals k. If such a subsequence exists, print \\"YES\\", otherwise print \\"NO\\". Input: - The first line contains one integer n (1 ≤ n ≤ 100000) — the length of the sequence s. - The second line contains n integers s1, s2, ..., sn (|si| ≤ 1000) — the elements of the sequence s. - The third line contains one integer q (1 ≤ q ≤ 200000) — the number of queries. - Then q lines follow. Each of the following lines contains one integer k (|k| ≤ 1000000) — the target sum for the query. Output: - For each query, print \\"YES\\" if there exists a contiguous subsequence of s whose sum is equal to k, otherwise print \\"NO\\".","solution":"def find_subsequence_sum(n, s, q, queries): def has_subarray_with_sum(k): current_sum = 0 prefix_sums = {0} for num in s: current_sum += num if (current_sum - k) in prefix_sums: return True prefix_sums.add(current_sum) return False results = [] for k in queries: if has_subarray_with_sum(k): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A company has a large network of roads connecting several cities. The company wants to minimize the cost of maintaining these roads. The cost of maintaining a road is directly proportional to its length. The company can choose to either maintain a current road, add a new road, or remove an existing road between any pair of cities. Given an undirected weighted graph representing the network of cities and roads, where the vertices represent the cities and the edges represent the roads with their respective maintenance costs (i.e., edge weights), find the minimum possible maintenance cost such that all cities remain connected. # Input The first line contains two integers n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000) — the number of cities and the number of roads. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^9) indicating that there is a bidirectional road between cities u and v with maintenance cost w. # Output Output one integer — the minimum possible total maintenance cost to ensure all cities are connected. # Example Input ``` 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 ``` Output ``` 6 ``` Explanation One possible solution is to maintain the roads between the following cities: - Cities 1 and 2 (cost 1) - Cities 2 and 3 (cost 2) - Cities 3 and 4 (cost 3) This keeps all cities connected with a total maintenance cost of 1 + 2 + 3 = 6.","solution":"def minimum_maintenance_cost(n, m, roads): Calculates the minimum possible total maintenance cost to ensure all cities are connected. Parameters: n (int): Number of cities. m (int): Number of roads. roads (list): List of tuples where each tuple contains 3 integers u, v, w - indicating a road between u and v with maintenance cost w. Returns: int: Minimum possible total maintenance cost. # We will use Kruskal\'s algorithm to find the minimum spanning tree # by making use of Union Find / Disjoint-set data structure # Sort all edges based on their weight roads.sort(key=lambda x: x[2]) # Union-Find data structure to manage disjoint sets parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 min_cost = 0 edge_count = 0 for u, v, w in roads: if find(u) != find(v): union(u, v) min_cost += w edge_count += 1 if edge_count == n - 1: break return min_cost"},{"question":"Given a string **s**, the challenge is to determine if it is possible to obtain a palindrome by rearranging the characters of **s**. A string is a palindrome if it reads the same backward as forward. For example, \\"madam\\" is a palindrome, while \\"hello\\" is not. You are required to write a function `can_form_palindrome(s)` that determines if it is possible to rearrange the characters of **s** to form a palindrome. If it is possible, print \\"YES\\", otherwise print \\"NO\\". # Input Format - The first line contains an integer **t** (1 leq t leq 100) — the number of test cases. - Each of the next **t** lines contains one string **s** (1 leq |s| leq 1000), consisting of lowercase English letters. # Output Format - For each test case, print \\"YES\\" if the characters of the string can be rearranged to form a palindrome, otherwise print \\"NO\\". # Sample Input ``` 4 aabb abc racecar abcdcba ``` # Sample Output ``` YES NO YES YES ``` # Explanation - For the first string \\"aabb\\", re-arranging it as \\"abba\\" forms a palindrome. - For the second string \\"abc\\", no re-arrangement can form a palindrome. - The third string \\"racecar\\" is already a palindrome. - The fourth string \\"abcdcba\\" is already a palindrome.","solution":"from collections import Counter def can_form_palindrome(s): Determines if the characters of the string s can be rearranged to form a palindrome. :param s: str, input string :return: str, \\"YES\\" if string can be rearranged to form a palindrome, otherwise \\"NO\\" counts = Counter(s) odd_counts = sum(1 for count in counts.values() if count % 2 != 0) return \\"YES\\" if odd_counts <= 1 else \\"NO\\" def process_test_cases(t, test_cases): Processes multiple test cases to determine if each string can be rearranged to form a palindrome. :param t: int, number of test cases :param test_cases: list of str, each string to be tested :return: list of str, each element is \\"YES\\" or \\"NO\\" for corresponding string in test_cases results = [] for s in test_cases: results.append(can_form_palindrome(s)) return results"},{"question":"A software company has to organize their extensive collection of String utilities into a more efficient system. They decide to categorize strings based on repeating patterns. Specifically, they need a program that identifies the smallest repeating pattern (or substring) that can be multiplied to form the entire original string. If no such smaller repeating pattern exists, the substring itself is the pattern. Your task is to write a function that takes a string and returns the smallest repeating pattern. # Input - The input consists of a single string `s` (1 leq |s| leq 1000) where `|s|` denotes the length of the string. The string contains only lowercase English letters. # Output - The output should be the smallest repeating substring pattern. # Example Input: ``` abababab ``` Output: ``` ab ``` Input: ``` abcd ``` Output: ``` abcd ``` Input: ``` aaaa ``` Output: ``` a ``` # Note In the first example, the pattern \\"ab\\" repeats 4 times to form the string \\"abababab\\". In the second example, there is no repeating pattern smaller than the string \\"abcd\\" itself. In the third example, the string \\"aaaa\\" consists of the repeating pattern \\"a\\". You need to find the smallest substring pattern which, when repeated sufficient times, constructs the original string.","solution":"def smallest_repeating_pattern(s): Returns the smallest repeating pattern of the string s. n = len(s) for i in range(1, n // 2 + 1): if n % i == 0: pattern = s[:i] if pattern * (n // i) == s: return pattern return s"},{"question":"You are given a string S of length n which contains lowercase Latin letters. You need to process q queries on the string, each of one of the following types: 1. \\"1 l r\\" - this query asks you to reverse the substring from index l to r (1-indexed inclusive). 2. \\"2 l r\\" - this query asks you to count the number of distinct characters in the substring from index l to r (1-indexed inclusive). The first line contains an integer T (1 leq T leq 10^5) — the number of test cases. Each test case description starts with an integer n (1 leq n leq 10^5) — the length of the string, and the string S itself. The next line contains an integer q (1 leq q leq 10^5) — the number of queries. The following q lines contain the descriptions of queries as mentioned above: - \\"1 l r\\" (1 leq l leq r leq n) - \\"2 l r\\" (1 leq l leq r leq n) It is guaranteed that the sum of n as well as the sum of q over all test cases does not exceed 10^6. For each query of the second type, print its result on a separate line.","solution":"def process_queries(T, test_cases): results = [] for case in test_cases: n, S, q, queries = case S = list(S) for query in queries: query_type, l, r = query l -= 1 r -= 1 if query_type == 1: S[l:r+1] = S[l:r+1][::-1] elif query_type == 2: results.append(len(set(S[l:r+1]))) return results"},{"question":"Imagine you are given a grid with n rows and m columns, representing a maze. Each cell in the grid is either walkable (denoted by \'.\') or blocked (denoted by \'#\'). Starting from the top-left cell (0,0), you want to find out if there\'s a path to the bottom-right cell (n-1, m-1) where you can only move one step at a time either to the right or downward. The input consists of multiple test cases. The first line contains an integer t, the number of test cases (1 ≤ t ≤ 100). For each test case, the first line contains two integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the grid. The next n lines contain m characters each, either \'.\' or \'#\', representing the maze. For each test case, print \\"YES\\" if there\'s a path from the top-left to the bottom-right of the grid. Otherwise, print \\"NO\\". **Example Input:** ``` 2 3 3 ..# .#. ... 3 3 ..# #.# ..# ``` **Example Output:** ``` YES NO ``` **Explanation:** For the first test case, there exists a path from (0,0) to (2,2) through cells (0,1), (1,2). However, for the second test case, no path exists as the middle row blocks the connection.","solution":"def is_path_exists(maze, n, m): from collections import deque if maze[0][0] == \'#\' or maze[n-1][m-1] == \'#\': return \\"NO\\" directions = [(0, 1), (1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" def solve_multiple_tests(t, test_cases): results = [] for case in test_cases: n, m, maze = case results.append(is_path_exists(maze, n, m)) return results"},{"question":"Given an array `arr` of `n` integers, rearrange its elements such that the difference between any two adjacent elements is at least `k`. If it is not possible to rearrange the array as required, print \\"Not possible\\". # Input: - The first line contains two integers `n` and `k` (1 ≤ n ≤ 105, 1 ≤ k ≤ 109). - The second line contains `n` integers representing the elements of the array `arr` (1 ≤ arr[i] ≤ 109). # Output: - If it is possible to rearrange the array, print the rearranged array such that the difference between any two adjacent elements is at least `k`. - If it is not possible, print \\"Not possible\\". # Example: Input: 4 3 1 3 6 10 Output: 1 10 3 6 Explanation: One of the valid rearrangements is [1, 6, 3, 10] where the differences between adjacent elements are 5, 3, and 7 respectively, all satisfying the condition of being at least 3. Note that other valid rearrangements may also exist.","solution":"def rearrange_array(n, k, arr): arr.sort() result = [arr[0]] for i in range(1, n): if abs(result[-1] - arr[i]) >= k: result.append(arr[i]) else: for j in range(i+1, n): if abs(result[-1] - arr[j]) >= k: arr[i], arr[j] = arr[j], arr[i] result.append(arr[i]) break else: return \\"Not possible\\" return result"},{"question":"PCS the Developer is working on a directed graph problem with n vertices numbered from 1 to n and m edges. Each edge has a positive integer weight associated with it. The graph may contain cycles. PCS the Developer wants to find the length of the shortest path from vertex a to vertex b. However, due to a malicious attack on the system, some edges may temporarily become impassable. To model this, we\'ll mark the weight of such edges as -1. Your task is to help PCS the Developer determine the shortest path under the condition that these impassable edges are ignored. If there is no valid path from a to b, return -1. The first line of the input contains three integers n, m, q (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ q ≤ 5000) — the number of vertices, the number of edges, and the number of queries. Then, m lines follow describing the edges of the graph. Each line contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, -1 ≤ w ≤ 10000), where u and v denote the vertices connected by the directed edge and w denotes the weight of the edge. A weight of -1 means the edge is temporarily impassable. The next q lines contain two integers a and b (1 ≤ a, b ≤ n) — the queries asking for the shortest path from vertex a to vertex b. Print q lines, each containing the length of the shortest path between vertices a and b for each query. If there is no valid path, print -1. Example: Input: 5 6 3 1 2 4 2 3 -1 1 3 2 3 4 3 4 5 6 5 2 7 1 3 1 5 5 3 Output: 2 15 -1 In the first query, the shortest path from vertex 1 to vertex 3 is direct with weight 2. In the second query, the shortest path from vertex 1 to vertex 5 is 1 → 3 → 4 → 5 with a total weight of 2 + 3 + 6 = 11. In the last query, there is no valid path from vertex 5 to vertex 3, so the answer is -1.","solution":"import heapq def dijkstra(graph, start, end, n): pq = [(0, start)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 while pq: current_distance, current_vertex = heapq.heappop(pq) if current_vertex == end: return current_distance if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 def shortest_paths(n, m, edges, queries): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: if w != -1: graph[u].append((v, w)) result = [] for a, b in queries: shortest_path_length = dijkstra(graph, a, b, n) result.append(shortest_path_length) return result # Function to parse the input and call the shortest_paths function def handle_graph_queries(input_data): input_lines = input_data.strip().split(\'n\') n, m, q = map(int, input_lines[0].split()) edges = [] for i in range(1, m + 1): u, v, w = map(int, input_lines[i].split()) edges.append((u, v, w)) queries = [] for i in range(m + 1, m + 1 + q): a, b = map(int, input_lines[i].split()) queries.append((a, b)) return shortest_paths(n, m, edges, queries)"},{"question":"You are given a collection of vote counts from various cities, and you need to determine the winner of an election. Each city may have a different number of votes, but each city\'s vote counts only once; the city with the higher number of votes wins that city. The candidate with the highest number of city wins is declared the overall winner. # Input - The first line contains an integer `t` (1 le t le 100), the number of test cases. - Each test case starts with an integer `n` (1 le n le 100), the number of cities. - The next `n` lines each contain three entries: a string representing the city name (unique for each city, length 1 le text{len} le 100), an integer `A_vote` (0 le A_vote le 10^6) representing the number of votes for candidate A in the city, and an integer `B_vote` (0 le B_vote le 10^6) representing the number of votes for candidate B in the city. # Output For each test case, print the name of the candidate who wins the election based on the number of cities won. If both candidates win an equal number of cities, print \\"Tie\\". # Example ``` Input: 2 3 City1 800 600 City2 1300 1400 City3 700 700 2 Metro1 12345 67890 Metro2 67890 12345 Output: A Tie ``` # Explanation In the first test case: - City1: A wins with 800 votes vs 600 votes for B. - City2: B wins with 1400 votes vs 1300 votes for A. - City3: Both candidates have 700 votes, so no candidate wins this city. Since A wins 1 city and B wins 1 city, and there is one tie, the overall outcome is a \\"Tie\\". In the second test case: - Metro1: B wins with 67890 votes vs 12345 votes for A. - Metro2: A wins with 67890 votes vs 12345 votes for B. Both candidates win one city each, so the final result is a \\"Tie\\".","solution":"def determine_election_winner(test_cases): results = [] for cities in test_cases: count_A_wins = 0 count_B_wins = 0 for city in cities: city_name, A_vote, B_vote = city if A_vote > B_vote: count_A_wins += 1 elif B_vote > A_vote: count_B_wins += 1 if count_A_wins > count_B_wins: results.append(\\"A\\") elif count_B_wins > count_A_wins: results.append(\\"B\\") else: results.append(\\"Tie\\") return results"},{"question":"You are given a list of integers. You need to partition the list into two sublists such that the difference between the sums of the integers in the two sublists is minimized. Your task is to write a function that computes this minimum difference. **Function Signature:** ```python def min_difference_partition(nums: List[int]) -> int: ``` **Input:** - A single list of integers `nums` where `1 <= len(nums) <= 1000` and each integer is between `1` and `1000`. **Output:** - Return an integer representing the minimum possible difference between the sums of the two sublists. **Example:** ```python assert min_difference_partition([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1 assert min_difference_partition([10, 20, 15, 5, 25]) == 5 ``` **Note:** - It is guaranteed that at least one way to partition the list exists. - The two sublists should cover all elements of the original list, and each element should appear in exactly one sublist.","solution":"from typing import List def min_difference_partition(nums: List[int]) -> int: total_sum = sum(nums) n = len(nums) # Initialize a DP array to store the possible sums up to half of the total sum. half_sum = total_sum // 2 dp = [0] * (half_sum + 1) for num in nums: # Traverse the dp array from back to front to prevent reuse of same item. for j in range(half_sum, num - 1, -1): dp[j] = max(dp[j], dp[j - num] + num) # The closest sum to half of total_sum will yield the minimum difference. closest_sum = dp[half_sum] return total_sum - 2 * closest_sum"},{"question":"Andy is managing a network of computers represented by an undirected graph. Each computer is a node, and each connection between two computers is an edge with a given latency. He wants to ensure there\'s always a pathway to communicate between any two computers directly or indirectly. He also wants to reduce the latency of communication as much as possible. Your task is to help Andy find the minimum spanning tree (MST) of the given network. The MST should include all the computers (nodes) with the minimum possible total latency (sum of edge weights). Input format: - The first line contains two integers, n (number of computers, 1 ≤ n ≤ 100) and m (number of connections, 0 ≤ m ≤ 1000). - The next m lines each contain three integers, u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000), representing a connection between computer u and computer v with latency w. Output format: - Print the total minimum latency of the MST. - If the network cannot connect all computers (i.e., the graph is not connected), print \\"Impossible\\".","solution":"def find_minimum_latency_mst(n, m, edges): def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 if n == 1 and m == 0: return 0 # If there\'s exactly one computer and no edges, no latency edges.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_weight = 0 mst_edges = 0 for edge in edges: u, v, w = edge u -= 1 v -= 1 x = find(parent, u) y = find(parent, v) if x != y: mst_weight += w union(parent, rank, x, y) mst_edges += 1 if mst_edges == n - 1: break if mst_edges == n - 1: return mst_weight else: return \\"Impossible\\""},{"question":"Given a rectangular grid of cells with different integer heights, you are a robot starting at the top-left corner of the grid aiming to reach the bottom-right corner. The only moves allowed are to the right or downward. Additionally, the robot can only move to a cell that is equal to or higher in height than the current cell. Your task is to calculate the number of distinct paths from the top-left corner to the bottom-right corner that the robot can take under these conditions. The input starts with two integers, `n` and `m` (1 ≤ n, m ≤ 1000), the number of rows and columns in the grid, respectively. The next `n` lines each contain `m` integers representing the height of each cell in the grid. Output a single integer, the number of distinct paths. # Example: Input: ``` 3 3 1 2 3 2 3 4 3 4 5 ``` Output: ``` 6 ``` In this example, every cell to the right or downward has a height greater than or equal to the current cell, which allows for combinations of possible distinct paths down and right to the bottom-right corner.","solution":"def num_of_paths(grid): Returns the number of distinct paths from the top-left to the bottom-right corner of the grid where the robot can only move to the right or downward and can only move to a cell of equal or higher height. n = len(grid) m = len(grid[0]) # Initialize a DP table dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Starting point for i in range(n): for j in range(m): if i > 0 and grid[i][j] >= grid[i-1][j]: dp[i][j] += dp[i-1][j] if j > 0 and grid[i][j] >= grid[i][j-1]: dp[i][j] += dp[i][j-1] return dp[-1][-1] # Input parser function def parse_input(input_str): lines = input_str.strip().split(\\"n\\") n, m = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return n, m, grid"},{"question":"You are given an integer array `arr` of length `n` and an integer `k`. You need to find the number of subarrays of length `k` that have their elements forming an arithmetic sequence. A subarray is said to form an arithmetic sequence if the difference between consecutive elements is the same throughout the subarray. For example, the array `[1, 3, 5, 7]` has subarrays `[1, 3, 5]` and `[3, 5, 7]` forming arithmetic sequences with a common difference of `2`. The first line contains two integers `n` (1 le n le 10^5) and `k` (2 le k le n) — the length of the array and the length of the subarray, respectively. The second line contains `n` integers `arr[i]` (-10^9 le arr[i] le 10^9) — the elements of the array. Output a single integer — the number of subarrays of length `k` that form an arithmetic sequence. # Example Input ``` 6 3 1 3 5 7 9 12 ``` Output ``` 3 ``` Explanation The subarrays of length 3 are: - `[1, 3, 5]` with a common difference of `2` - `[3, 5, 7]` with a common difference of `2` - `[5, 7, 9]` with a common difference of `2` - `[7, 9, 12]` does not form an arithmetic sequence. Hence, the answer is `3`.","solution":"def count_arithmetic_subarrays(arr, k): n = len(arr) count = 0 for i in range(n - k + 1): is_arithmetic = True common_diff = arr[i+1] - arr[i] for j in range(1, k): if arr[i+j] - arr[i+j-1] != common_diff: is_arithmetic = False break if is_arithmetic: count += 1 return count"},{"question":"Alice loves arranging her collection of marbles. She has a row of n marbles, each with a different color. She wants to choose some contiguous subsegment of the row (including possibly the entire row) and rearrange it so that all the marbles within this subsegment are in their original positions, but reversed in order. Her goal is to maximize the number of distinct colors within this reversed subsegment. Help Alice figure out the maximum number of distinct colors in any possible reversed subsegment she can choose. The first line contains an integer n (1 ≤ n ≤ 105) — the number of marbles. The second line contains n integers c_i (1 ≤ c_i ≤ 104) — the colors of the marbles in the row, where each color is represented by a distinct integer. The output should be a single integer — the maximum number of distinct colors in any reversed subsegment. Example: Input: 5 1 2 3 4 5 Output: 5","solution":"def max_distinct_colors_in_reversed_subsegment(n, colors): Returns the maximum number of distinct colors in any reversed subsegment. Parameters: n (int): The number of marbles. colors (list of int): The list of colors of the marbles. Returns: int: The maximum number of distinct colors in any reversed subsegment. return len(set(colors))"},{"question":"In a faraway land, there is a kingdom with a unique numbering system for its roads. The kingdom has n intersections and m bidirectional roads. Each road connects two distinct intersections and has a positive length associated with it. The roads are numbered from 1 to m. The king enjoys a challenge and he wants to find out the longest path within his kingdom. However, the path must satisfy two conditions: 1. It should not visit any intersection more than once. 2. It does not have to be a cycle; it can start and end at any intersections. The first line of input contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 2000) — the number of intersections and the number of roads, respectively. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) — representing a road between intersections u and v with length w. Output a single integer — the length of the longest path that satisfies the given conditions. If no valid path exists, output 0. Example: Input: ``` 5 6 1 2 3 2 3 4 3 4 5 4 5 6 1 3 2 2 4 3 ``` Output: ``` 16 ``` In this example, the longest path is 1->2->3->4->5 with total length 3+4+5+6=18.","solution":"def longest_path(n, m, roads): from collections import defaultdict def dfs(node, visited): visited.add(node) max_length = 0 for neighbor, weight in graph[node]: if neighbor not in visited: current_length = weight + dfs(neighbor, visited) max_length = max(max_length, current_length) visited.remove(node) return max_length if m == 0: return 0 graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) longest_path_length = 0 for i in range(1, n + 1): longest_path_length = max(longest_path_length, dfs(i, set())) return longest_path_length"},{"question":"You are given a rectangular grid that represents a park of size n x m. Each cell in the grid is either empty (denoted by \'.\') or contains an obstacle (denoted by \'#\'). A robot starts at the top-left corner of the grid and needs to reach the bottom-right corner. The robot can only move to the right or down one cell at a time. Your task is to find the number of unique paths the robot can take to reach the bottom-right corner of the grid while avoiding obstacles. You are provided with multiple test cases. For each test case, you need to return the number of unique paths for the corresponding grid configuration. The first line of input contains an integer T (1 ≤ T ≤ 50), the number of test cases. For each test case: - The first line contains two integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the grid. - The next n lines each contain a string of length m representing the park grid. Output: For each test case, print the number of unique paths the robot can take to reach the bottom-right corner of the grid. If there is no path, print 0 for that test case. Example: Input: 2 3 3 ... .#. ... 2 2 .. .. Output: 2 2 In the first test case, the robot can take the following 2 unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second test case, the robot can take the following 2 unique paths: 1. Right -> Down 2. Down -> Right","solution":"def unique_paths_with_obstacles(grid): n = len(grid) m = len(grid[0]) # If the start or end is an obstacle, return 0 if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] # Initialize starting point dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] def number_of_unique_paths(t, test_cases): results = [] for i in range(t): n, m, grid = test_cases[i] results.append(unique_paths_with_obstacles(grid)) return results"},{"question":"Given a string s, you need to find out the length of the longest substring that contains at most two distinct characters. # Input - A single line containing the string s (1 ≤ |s| ≤ 10^5). # Output - Output the length of the longest substring that contains at most two distinct characters. # Example Input `eceba` Output `3` Explanation The substring is \\"ece\\" which its length is 3. # Additional Requirements You are required to implement a solution that has a linear time complexity, i.e., O(n). Note This problem can be solved using the sliding window technique to maintain the longest substring with at most two distinct characters.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring with at most two distinct characters. if not s: return 0 char_map = {} left = 0 max_length = 0 for right in range(len(s)): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"In a large university, students are preparing for a collaborative coding competition. There are n students in total, and each of them has a specific skill level represented by an integer from 1 to n. The teams in the competition are formed in pairs, where each pair consists of two students. For a successful participation, the competition coordinator needs to determine the minimum absolute difference between the skill levels of any two students who form a pair. The first line of the input contains an integer n (2 leq n leq 10^5), representing the number of students. The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9), where a_i represents the skill level of the i-th student. Note that skill levels are not necessarily unique. Return a single integer — the minimum absolute difference between the skill levels of any two students. For example, consider the case where the skill levels of students are [4, 9, 1, 7]. The smallest absolute difference is 2 (|7 - 9| or |4 - 7|). Input format: ``` The first line contains an integer n. The second line contains n integers, the skill levels of the students. ``` Output format: ``` Output a single integer, representing the minimum absolute difference between the skill levels of any two students. ``` Example: ``` Input: 4 4 9 1 7 Output: 2 ```","solution":"def min_diff_skill_levels(n, skill_levels): Returns the minimum absolute difference between the skill levels of any two students. # Sort the skill levels skill_levels.sort() # Initialize minimum difference to a large number min_diff = float(\'inf\') # Compare adjacent elements to find the minimum difference for i in range(1, n): diff = skill_levels[i] - skill_levels[i - 1] if diff < min_diff: min_diff = diff return min_diff"},{"question":"A group of scientists are studying a peculiar species of bacteria that reproduce in a unique manner. Every time a bacterium reproduces, it splits into exactly three bacteria: one original and two new bacteria. This process occurs every minute for each bacterium. Initially, the scientists place `N` bacteria on a petri dish. They are interested in determining the number of bacteria present after `M` minutes, modulo `10^9 + 7` to handle large numbers. # Input: - The input consists of two integers `N` and `M` where: - `1 <= N <= 1000` - `0 <= M <= 10^9` # Output: - Output a single integer representing the number of bacteria on the petri dish after `M` minutes, modulo `10^9 + 7`. # Example: **Input:** ``` 5 2 ``` **Output:** ``` 45 ``` # Explanation: - Initial bacteria count is 5. - After 1 minute, each bacterium splits into 3, so total bacteria would be `5 * 3 = 15`. - After 2 minutes, each of those 15 splits into 3, so the total bacteria would be `15 * 3 = 45`. Constraints provided ensure that direct computation might be infeasible for large values of `M`, hence efficient algorithms or mathematical insight are required.","solution":"def bacteria_after_minutes(N, M): Calculate the number of bacteria present after M minutes, given initial N bacteria. Parameters: N (int): Initial number of bacteria. M (int): Number of minutes. Returns: int: Number of bacteria after M minutes modulo 10^9 + 7. MOD = 10**9 + 7 # Each minute, each bacterium splits into 3 # This can be seen as exponential growth: N * 3^M result = (N * pow(3, M, MOD)) % MOD return result"},{"question":"A social media company is trying to analyze the most active users on their platform. They consider \\"most active\\" as those users who have liked the most posts within a given time frame. Given a list of user activity logs, determine the top k most active users. The activity logs are provided in a list where each entry is a string in the format \\"user_id post_id timestamp\\". The timestamp is given in the format \\"YYYY-MM-DDTHH:MM:SS\\". You need to implement a function: ```python def top_k_active_users(logs: List[str], k: int) -> List[str]: ``` **Input:** - `logs`: A list of strings where each string represents a user activity log in the format described above. The list can have up to 10^6 entries. - `k`: An integer representing the number of top active users to retrieve. It is guaranteed that k will not be greater than the number of unique users in the logs list. **Output:** - Return a list of user_ids representing the top k most active users, sorted by their activity count in descending order. If there is a tie, sort the user_ids lexicographically. **Example:** ```python logs = [ \\"user1 post1 2023-01-01T10:00:00\\", \\"user2 post2 2023-01-01T10:01:00\\", \\"user1 post3 2023-01-01T10:02:00\\", \\"user3 post4 2023-01-01T10:03:00\\", \\"user2 post5 2023-01-01T10:04:00\\", \\"user2 post6 2023-01-01T10:05:00\\", \\"user3 post7 2023-01-01T10:06:00\\" ] k = 2 assert top_k_active_users(logs, k) == [\\"user2\\", \\"user1\\"] ``` In the example, user2 has 3 activities, user1 has 2 activities, and user3 has 2 activities. Since user2 has the most activities, they are the top active user. Between user1 and user3, user1 comes first lexicographically. Hence the result is [\\"user2\\", \\"user1\\"].","solution":"from typing import List from collections import Counter def top_k_active_users(logs: List[str], k: int) -> List[str]: Returns the top k most active users based on their activity count. Activity logs are provided in the format \\"user_id post_id timestamp\\". user_activity_count = Counter() for log in logs: user_id, _, _ = log.split() user_activity_count[user_id] += 1 most_active_users = sorted(user_activity_count.items(), key=lambda x: (-x[1], x[0])) return [user_id for user_id, _ in most_active_users[:k]]"},{"question":"Given a list of integers representing the heights of a series of buildings, you need to determine the maximum number of buildings that have a clear view of the sunset. The buildings are standing in a straight line and sunset view is to the west (which means left to right in the array). A building will have a clear view of the sunset if there are no taller (or equal height) buildings to its left. Write a function `maxBuildingsWithSunsetView(heights: List[int]) -> int` that takes in a list of integers `heights` where heights[i] represents the height of the i-th building in line and returns the maximum number of buildings that have a clear view of the sunset. **Example:** Input: `[3, 7, 8, 3, 6, 1]` Output: `3` Explanation: The buildings with heights 3, 7, and 8 have a clear view. Subsequent buildings have obstructions of equal or greater height to their left. Input: `[1, 4, 5, 8]` Output: `4` Explanation: All buildings have a view as no building to the left is taller. **Constraints:** - The length of the list `heights` will be between `1` and `10^5`. - The height of each building will be a positive integer and will be at most `10^9`. **Function signature:** ```python def maxBuildingsWithSunsetView(heights: List[int]) -> int: pass ``` **Note:** - You are expected to consider the efficiency of your solution. - Provide the optimal solution that should run under a reasonable time for the given constraints.","solution":"from typing import List def maxBuildingsWithSunsetView(heights: List[int]) -> int: This function takes a list of integers representing the heights of buildings and returns the maximum number of buildings that have a clear view of the sunset. max_height = 0 count = 0 for height in heights: if height > max_height: max_height = height count += 1 return count"},{"question":"You are walking in a large, enchanted forest represented as a 2D grid of size n x m. Each cell in the grid represents a unique position, and it can either be passable (.) or impassable (#). Your goal is to find the shortest path from the top-left corner of the grid (1,1) to the bottom-right corner of the grid (n,m). You can move up, down, left, or right into adjacent cells. However, some cells might contain traps (T) that you should avoid. There is a catch, though: In this enchanted forest, certain cells provide you with magical power-ups (P). If you pass through a power-up cell, you gain the ability to fly over up to k impassable cells. This power can only be used once. Once you decide to fly over an impassable cell, you will lose this ability. Given the grid layout and the power\'s flying capability (k), determine the minimum number of steps required to reach the target position. If it\'s not possible to reach the bottom-right corner, return -1. Input: - The first line contains three integers n, m (2 ≤ n, m ≤ 1000) and k (0 ≤ k ≤ n * m), the number of rows, columns, and the maximum number of impassable cells you can fly over using the power-up. - Each of the next n lines contains m characters, where \\".\\" represents a passable cell, \\"#\\" represents an impassable cell, \\"T\\" represents a trap, and \\"P\\" represents a power-up cell. Output: - Print the minimum number of steps required to reach the bottom-right corner or -1 if it is impossible to do so. Example: Input: 4 4 1 .... .#.. .P.. ...# Output: 6 Explanation: In the example, one possible solution is to move right, right, down, and down, then use the power-up (P) to fly over the impassable cell. This takes a total of 6 steps. Note: Ensure that your solution takes into account that the power-up can only be used once, and you should seek the shortest valid path that either uses or does not use the power-up as required.","solution":"from collections import deque def shortest_path_in_forest(n, m, k, grid): def neighbors(row, col): for r, c in ((row-1, col), (row+1, col), (row, col-1), (row, col+1)): if 0 <= r < n and 0 <= c < m: yield r, c start = (0, 0, False) # (row, col, has_used_power_up) queue = deque([(start, 0)]) # ((row, col, used_power_up), steps) visited = set() visited.add(start) while queue: (row, col, used_power_up), steps = queue.popleft() if (row, col) == (n-1, m-1): return steps for nr, nc in neighbors(row, col): if grid[nr][nc] == \'.\' or grid[nr][nc] == \'P\': state = (nr, nc, used_power_up) if state not in visited: visited.add(state) queue.append((state, steps + 1)) elif grid[nr][nc] == \'#\' and not used_power_up: if k > 0: state = (nr, nc, True) if state not in visited: visited.add(state) queue.append((state, steps + 1)) return -1 # Example usage of the function based on the provided input: # Given the following inputs n = 4 m = 4 k = 1 grid = [ \\"....\\", \\".#..\\", \\".P..\\", \\"...#\\" ] print(shortest_path_in_forest(n, m, k, grid)) # Output: 6"},{"question":"You are given an array of integers. Your task is to reorder elements of this array so that all negative integers come before all non-negative integers while preserving the relative order of the negative integers and non-negative integers. The first line of input contains a single integer n (1 ≤ n ≤ 100), the number of elements in the array. The second line contains n integers a1, a2, ..., an (-100 ≤ ai ≤ 100), the elements of the array. Output the reordered array as a single line of n space-separated integers. Example: Input: 5 -4 3 -9 0 4 Output: -4 -9 3 0 4","solution":"def reorder_array(arr): Reorders the array such that all negative integers come before all non-negative integers while preserving the relative order of the negative and non-negative integers. negative = [x for x in arr if x < 0] non_negative = [x for x in arr if x >= 0] return negative + non_negative"},{"question":"You are given an unsorted array of integers. Your task is to find the longest consecutive sequence in the array. A consecutive sequence is defined as a sequence that contains all integers between a minimum and a maximum value without any gaps. For example, in the array [100, 4, 200, 1, 3, 2], the longest consecutive sequence is [1, 2, 3, 4]. Write a function `longestConsecutiveSequence(nums)` that takes a list of integers and returns the length of the longest consecutive sequence. **Input:** - `nums`: A list of integers (0 ≤ len(nums) ≤ 10^5, |nums[i]| ≤ 10^9) **Output:** - An integer representing the length of the longest consecutive sequence. # Example Example 1: - **Input**: `[100, 4, 200, 1, 3, 2]` - **Output**: `4` - **Explanation**: The longest consecutive sequence is `[1, 2, 3, 4]`. Example 2: - **Input**: `[0, 3, 7, 2, 5, 8, 4, 6, 0, 1]` - **Output**: `9` - **Explanation**: The longest consecutive sequence is `[0, 1, 2, 3, 4, 5, 6, 7, 8]`. # Constraints: - The solution should preferably run in O(n) time complexity. - You may assume that the elements are distinct.","solution":"def longestConsecutiveSequence(nums): Returns the length of the longest consecutive sequence in the list `nums`. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # Check if this number is the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given an array of integers containing both negative and positive values. Your task is to determine the maximum sum of any non-empty subarray. A subarray is a contiguous part of an array. The possible subarrays of array [a_1, a_2, ..., a_n] are [a_i], [a_i, a_{i+1}], ..., [a_i, a_{i+1}, ..., a_j] for 1 leq i leq j leq n. For example, if the input array is [-2, 1, -3, 4, -1, 2, 1, -5, 4], the subarray with the maximum sum is [4, -1, 2, 1], which has a sum of 6. The first line of the input contains a single integer t (1 leq t leq 100)— the number of test cases. Each of the next t lines contains: - an integer n (1 le n le 100) — the number of elements in the array, - followed by n integers representing the elements of the array. For each test case, print the maximum sum of any non-empty subarray. **Input:** The first line contains the integer t. Next, t test cases follow. Each test case consists of two lines: - The first line contains the integer n. - The second line contains n space-separated integers representing the elements of the array. **Output:** For each test case, output a single integer, the maximum sum of a non-empty subarray. **Example:** **Input:** ``` 3 9 -2 1 -3 4 -1 2 1 -5 4 5 1 2 3 4 5 5 -1 -2 -3 -4 -5 ``` **Output:** ``` 6 15 -1 ``` In the first example, the subarray with the maximum sum is `[4, -1, 2, 1]`, summing to 6. In the second example, the entire array yields the maximum sum, which is 15. In the third example, the single element `-1` has the maximum sum among all non-empty subarrays.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any non-empty subarray in the input array. max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def solve(test_cases): results = [] for n, arr in test_cases: results.append(max_subarray_sum(arr)) return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return test_cases def main(input_string): test_cases = parse_input(input_string) return solve(test_cases)"},{"question":"You are given a string s consisting of lowercase English letters. You need to determine the maximum length of a substring that contains each letter at most k times. The first line of the input contains a string s (1 ≤ |s| ≤ 10^5). The second line contains an integer k (1 ≤ k ≤ 26). Print the maximum length of such a substring. For example: Input: ``` abcba 2 ``` Output: ``` 5 ``` In this case, the entire string \\"abcba\\" contains each letter at most twice. Another example: Input: ``` aabbcc 1 ``` Output: ``` 2 ``` In this case, the longest possible substrings each containing any letter at most once are \\"aa\\", \\"bb\\" and \\"cc\\" with length 2 each.","solution":"def max_length_substring(s, k): Returns the maximum length of a substring that contains each letter at most k times. from collections import defaultdict left = 0 char_count = defaultdict(int) max_length = 0 for right in range(len(s)): char_count[s[right]] += 1 while char_count[s[right]] > k: char_count[s[left]] -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length # Example Usage # s = \\"abcba\\" # k = 2 # result = max_length_substring(s, k) # print(result) # Output should be 5"},{"question":"You are given a list of n integers arr and a target integer t. Your task is to find the number of distinct pairs (i, j) (i < j) in the list such that the sum of the elements at these pairs is equal to the target integer t. Consider the list elements can contain both positive and negative integers, and there can be duplicated numbers in the list. However, a pair (i, j) and a pair (j, i) are considered the same and should not be counted again. Input: - The first line contains two integers n and t (1 ≤ n ≤ 1000, -10^6 ≤ t ≤ 10^6) - the number of elements in the list and the target sum, respectively. - The second line contains n integers separated by space, representing the list arr where each integer satisfies -10^6 ≤ arr[i] ≤ 10^6. Output: - Print a single integer representing the number of distinct pairs that sum up to t. Example: Input: 5 7 1 2 3 4 5 Output: 2 Explanation: The pairs (2, 5) and (3, 4) are the ones that sum up to 7. Only these two pairs are valid, and there are no duplicate or reversed pairs included.","solution":"def find_pairs_with_sum(n, t, arr): Returns the number of distinct pairs (i, j) such that the sum of the elements at these pairs is equal to the target integer t. pairs_count = 0 seen_numbers = set() unique_pairs = set() for number in arr: complement = t - number if complement in seen_numbers: pair = tuple(sorted((number, complement))) if pair not in unique_pairs: unique_pairs.add(pair) pairs_count += 1 seen_numbers.add(number) return pairs_count"},{"question":"You are given a positive integer n without any leading zeros. However, it appears that some digits in this integer might have been replaced with a placeholder digit represented by *. Your task is to determine the minimum positive integer that can be formed by replacing each * with any digit from 1 to 9. For example, if the input is \\"1*3*\\", by replacing the placeholders, you can form the minimum positive integer \\"1131\\". # Input - The input consists of a single integer n, represented as a string confined to digits (\'1\'-\'9\') and \'*\' only. - The length of the string n will be at most 10^5. # Output - Return the minimum positive integer that can be formed by replacing each occurrence of \'*\' with digits from \'1\' to \'9\'. # Example Input: ``` 1*3* ``` Output: ``` 1131 ``` Input: ``` *7*4 ``` Output: ``` 1714 ``` # Constraints - The input string n is non-empty and contains up to 10^5 characters. - Every character in the input string is either a digit from \'1\' to \'9\' or \'*\'.","solution":"def min_positive_integer(n): Returns the minimum positive integer that can be formed by replacing each \'*\' with digits from \'1\' to \'9\'. Parameters: n (str): Input string representing an integer with possible \'*\' placeholders. Returns: str: The minimum positive integer with placeholders replaced. return n.replace(\'*\', \'1\')"},{"question":"You are given a string s consisting of lowercase English letters. A character is called a \\"stubborn character\\" if it appears exactly k times in the string. Your task is to identify all stubborn characters in the string and return them in lexicographical order. The first line contains the string s (1 ≤ |s| ≤ 10^5). The second line contains an integer k (1 ≤ k ≤ |s|). If there are no stubborn characters in the string, return the string \\"None\\". **Input:** ``` s k ``` **Output:** A single line containing the stubborn characters in lexicographical order, or \\"None\\" if there are no such characters. **Example 1:** Input: ``` abacabadabacaba 2 ``` Output: ``` c ``` **Example 2:** Input: ``` abcde 1 ``` Output: ``` abcde ``` **Example 3:** Input: ``` aabbccdd 3 ``` Output: ``` None ```","solution":"def find_stubborn_characters(s, k): Returns a string of characters that appear exactly k times in the input string s, in lexicographical order. If no characters meet the criteria, returns \\"None\\". from collections import Counter # Count frequency of each character freq = Counter(s) # Extract characters that appear exactly k times stubborn_chars = [char for char, count in freq.items() if count == k] # Sort characters lexicographically stubborn_chars.sort() # Return result as string or \\"None\\" if no such characters exist if stubborn_chars: return \'\'.join(stubborn_chars) else: return \\"None\\""},{"question":"John loves to collect marbles of different colors. He has a set of marbles, each marble having one of the k distinct colors. John finds a set of marbles \\"interesting\\" if no two marbles in the set have the same color. However, John also wants the set to be as large as possible. You are given an integer array `marbles` of length `n` representing the colors of `n` marbles where each value is between 1 and k (inclusive). Your task is to help John determine the size of the largest interesting set he can form from his collection. Write a function `max_interesting_set(n, k, marbles)` that takes in three arguments: - `n`: an integer representing the number of marbles (1 ≤ n ≤ 10^5) - `k`: an integer representing the number of distinct colors (1 ≤ k ≤ 100) - `marbles`: a list of n integers, where each integer represents a color. The function should return a single integer, the size of the largest interesting set John can form. # Example **Input:** ```python n = 7 k = 3 marbles = [1, 2, 2, 3, 1, 3, 2] ``` **Output:** ```python 3 ``` # Explanation In this example, the largest interesting set John can form is {1, 2, 3}, which contains one marble of each color, hence the size is 3. # Constraints - 1 ≤ n ≤ 10^5 - 1 ≤ k ≤ 100 - 1 ≤ marbles[i] ≤ k","solution":"def max_interesting_set(n, k, marbles): Returns the size of the largest interesting set of marbles. An interesting set contains marbles with no repeating colors, and the set should be as large as possible. unique_colors = set(marbles) return min(len(unique_colors), k)"}]'),j={name:"App",components:{PoemCard:Y},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},N={class:"search-container"},S={class:"card-container"},F={key:0,class:"empty-state"},z=["disabled"],R={key:0},C={key:1};function L(r,e,h,m,s,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",N,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",S,[(n(!0),i(w,null,_(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+u(s.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),i("span",C,"Loading...")):(n(),i("span",R,"See more"))],8,z)):l("",!0)])}const P=d(j,[["render",L],["__scopeId","data-v-4fbe9f20"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/31.md","filePath":"quotes/31.md"}'),D={name:"quotes/31.md"},G=Object.assign(D,{setup(r){return(e,h)=>(n(),i("div",null,[x(P)]))}});export{M as __pageData,G as default};
