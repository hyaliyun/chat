import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},k={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,m,a,r){return n(),i("div",T,[t("div",k,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(q,[["render",O],["__scopeId","data-v-669d05cb"]]),S=JSON.parse('[{"question":"You are given an infinite grid with coordinates ranging from (-∞, -∞) to (∞, ∞). Initially, there is a robot at the coordinate (0, 0). The robot can move according to a list of commands. Each command is one of the following four: - \\"U\\" (up) which increases the y-coordinate by 1. - \\"D\\" (down) which decreases the y-coordinate by 1. - \\"L\\" (left) which decreases the x-coordinate by 1. - \\"R\\" (right) which increases the x-coordinate by 1. You are given a list of commands executed by the robot. Your task is to determine the minimum number of commands that need to be removed from this list so that the robot returns to the origin (0, 0) after executing the remaining commands. If it is not possible for the robot to return to the origin, output -1. Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) representing the number of commands. - The second line contains a string of `n` characters, each being one of \\"U\\", \\"D\\", \\"L\\", \\"R\\". Output - Output a single integer which is the minimum number of commands to be removed, or -1 if it is impossible for the robot to return to the origin. Examples Input 6 UUDLRL Output 2 Input 4 UDUD Output 0 Input 7 UUDDLRL Output -1 Explanation - In the first example, removing the last two commands \\"RL\\" would make the robot return to the origin. - In the second example, the robot already returns to the origin without removing any command. - In the third example, it is impossible to make the robot return to the origin regardless of which commands are removed.","solution":"def min_commands_to_remove(n, commands): x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 if (x + y) % 2 != 0: return -1 return abs(x) + abs(y)"},{"question":"Write a function `balance_arrays(arr1, arr2)` that takes two lists of integers `arr1` and `arr2`. Determine if you can make `arr1` and `arr2` identical by swapping at most one integer from `arr1` with one integer from `arr2`. If it\'s possible, return True; otherwise, return False. If either list is empty, return False.","solution":"def balance_arrays(arr1, arr2): Determines if you can make arr1 and arr2 identical by swapping at most one integer from arr1 with one integer from arr2. If it\'s possible, returns True; otherwise, returns False. If either list is empty, returns False. if not arr1 or not arr2: return False if sorted(arr1) == sorted(arr2): return True sum_arr1 = sum(arr1) sum_arr2 = sum(arr2) target_diff = sum_arr1 - sum_arr2 possible_swaps = set(arr1) for num in arr2: required_num = num + target_diff // 2 if (target_diff % 2 == 0) and (required_num in possible_swaps): return True return False"},{"question":"You are given an array of integers, `arr`, of size `n` and a positive integer `k`. Define the \\"k-th distinct prime factor count\\" of an integer as the number of distinct prime factors of the k-th largest integer in the subarrays of length `k` of the given array. Your task is to determine the maximum \\"k-th distinct prime factor count\\" for any valid subarray of length `k`. Input Format: - The first line contains two space-separated integers, `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ n). - The second line contains `n` space-separated integers describing the elements of `arr` (1 ≤ arr[i] ≤ 10^5). Output Format: Print a single integer denoting the maximum \\"k-th distinct prime factor count\\" for any valid subarray of length `k`. Sample Input 0: 5 3 10 15 21 24 30 Sample Output 0: 3 Sample Input 1: 8 4 7 11 13 2 3 5 14 20 Sample Output 1: 2 Explanation: For Sample Input 0: - We have `k = 3` which means we need to consider subarrays of length 3. - The possible subarrays of length 3 from `arr` are: [10, 15, 21], [15, 21, 24], [21, 24, 30]. - The third largest integers in these subarrays are: 10 (from [10, 15, 21]), 15 (from [15, 21, 24]), and 21 (from [21, 24, 30]). - The prime factor counts for these numbers are: - 10 has prime factors {2, 5} making it 2. - 15 has prime factors {3, 5} making it 2. - 21 has prime factors {3, 7} making it 2. - Hence, the maximum k-th distinct prime factor count is 3, and for the subarray [10, 15, 21], the third largest integer 21 has 2 prime factors. For Sample Input 1: - We have `k = 4` which means we need to look at subarrays of length 4. - The possible subarrays of length 4 are: [7, 11, 13, 2], [11, 13, 2, 3], [13, 2, 3, 5], [2, 3, 5, 14], [3, 5, 14, 20]. - The fourth largest integers for these subarrays are: 2 (from [7, 11, 13, 2]), 2 (from [11, 13, 2, 3]), 3 (from [13, 2, 3, 5]), 3 (from [2, 3, 5, 14]), 5 (from [3, 5, 14, 20]). - The prime factor counts for these numbers are: - 2 has prime factor {2}, making it 1. - 2 has prime factor {2}, making it 1. - 3 has prime factor {3}, making it 1. - 3 has prime factor {3}, making it 1. - 5 has prime factor {5}, making it 1. - Thus, the maximum k-th distinct prime factor count for these subarrays is 2.","solution":"from collections import defaultdict import math # Function to compute prime factors of a number def prime_factors(n): factors = set() while n % 2 == 0: factors.add(2) n = n // 2 for i in range(3, int(math.sqrt(n)) + 1, 2): while n % i == 0: factors.add(i) n = n // i if n > 2: factors.add(n) return factors def max_k_th_prime_factor_count(n, k, arr): max_prime_factors_count = 0 for i in range(n - k + 1): subarray = sorted(arr[i:i + k]) kth_largest = subarray[k - 1] prime_factors_count = len(prime_factors(kth_largest)) max_prime_factors_count = max(max_prime_factors_count, prime_factors_count) return max_prime_factors_count"},{"question":"In a distant galaxy, there is an intricate network of planets connected by special wormholes. There are M planets, indexed from 1 to M, in this galaxy. The wormholes form a grid structure with precisely (M-1)^2 connections, such that every planet is connected to its neighboring planets in a square grid fashion. Each wormhole allows bi-directional travel, enabling spaceships to fly to adjacent planets. Each planet in the galaxy generates a unique sequence of energy pulses. These pulses can either influence the wormhole\'s stability or open new paths to other planets. There are N energy frequencies, indexed from 1 to N, which can activate a wormhole if applied sequentially. You are tasked with finding a way to navigate from planet 1 to planet M using the least number of energy frequencies such that the spaceship can travel from planet 1 to planet M. Assume that no energy frequency is repeated. Determine the minimum number of energy frequencies needed. Input - The first line contains two space-separated integers, M (1 ≤ M ≤ 10^4) – the number of planets and N (1 ≤ N ≤ 10^5) – the number of unique energy frequencies. - The next N lines describe the energy frequencies. Each line contains a single integer e (1 ≤ e ≤ N), representing an energy frequency. Output - You should print a single integer: the minimum number of energy frequencies required to travel from planet 1 to planet M. Example Input 4 3 1 2 3 Output 3 Note In this example, the planets are placed in a 2x2 grid. Thus, M=4 means there are 4 planets {1,2,3,4} connected as follows: 1 - 2 | | 3 - 4 The least number of energy frequencies required to travel from planet 1 to planet 4 is 3 (one for each step in the path 1->2->4). Each energy frequency ensures that the next wormhole is stabilized for safe travel.","solution":"def find_min_energy_frequencies(M, N, energy_frequencies): Finds the minimum number of energy frequencies required to travel from planet 1 to planet M. Parameters: M (int): The number of planets. N (int): The number of unique energy frequencies. energy_frequencies (list of int): The list of energy frequencies. Returns: int: Minimum number of energy frequencies required. # Since planets are indexed from 1 to M, the grid is sqrt(M) x sqrt(M) import math grid_size = int(math.sqrt(M)) if grid_size * grid_size != M: raise ValueError(\\"Invalid grid configuration for given M\\") # Minimum energy frequencies needed to travel from 1 to M is the number # of moves required in that grid from top-left to bottom-right return (grid_size - 1) * 2 # Example usage: M = 4 N = 3 energy_frequencies = [1, 2, 3] print(find_min_energy_frequencies(M, N, energy_frequencies)) # Output should be 2"},{"question":"Given an integer array of N elements and Q queries, each query containing two integers L and R, perform two types of operations efficiently: 1. Find the sum of elements from the subarray A[L] to A[R]. 2. Update the value of A[L] to a given value V. Input format - The first line contains two integers N and Q — the number of elements in the array and the number of queries. - The second line contains N integers representing the array A. - Each of the next Q lines represents a query which can be of two types: - `1 L R` — Find the sum of the subarray from index L to R (1-based index). - `2 L V` — Update the value of the array at index L to V (1-based index). Output format For each sum query `1 L R`, output the sum of the subarray from index L to R in a new line. Constraints - 1 ≤ N, Q ≤ 10^5 - 1 ≤ L ≤ R ≤ N - 1 ≤ V ≤ 10^9 - -10^9 ≤ A[i] ≤ 10^9 SAMPLE INPUT 5 4 1 2 3 4 5 1 1 3 2 2 10 1 1 3 1 2 5 SAMPLE OUTPUT 6 14 22 Explanation 1. The sum of subarray from index 1 to 3 is 1+2+3=6. 2. The array is updated to [1, 10, 3, 4, 5]. 3. The sum of subarray from index 1 to 3 is now 1+10+3=14. 4. The sum of subarray from index 2 to 5 is 10+3+4+5=22.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Build the tree self.build(data) def build(self, data): # Initialize the segment tree array for i in range(self.n): self.tree[i + self.n] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, index, value): # Update value at position index pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def query(self, left, right): # Query the sum in the range left += self.n right += self.n + 1 # make the range inclusive of right sum_ = 0 while left < right: if left % 2 == 1: sum_ += self.tree[left] left += 1 if right % 2 == 1: right -= 1 sum_ += self.tree[right] left //= 2 right //= 2 return sum_ def process_queries(N, Q, array, queries): seg_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: _, L, R = query results.append(seg_tree.query(L - 1, R - 1)) elif query[0] == 2: _, L, V = query seg_tree.update(L - 1, V) return results"},{"question":"Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. The LCA is defined between two nodes `v` and `w` as the lowest node in the tree that has both `v` and `w` as descendants (where we allow a node to be a descendant of itself). A node is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` You are provided the root of a binary tree and the two nodes `p` and `q` for which you need to determine the LCA. **Input:** - The root of the binary tree. - Two nodes, `p` and `q`. **Output:** - The LCA node. **Constraints:** - All values of the nodes in the binary tree are unique. **Example:** ``` Binary Tree: 3 / 5 1 / / 6 2 0 8 / 7 4 Input: root = [3,5,1,6,2,0,8,None,None,7,4], p = 5, q = 1 Output: 3 Explanation: The LCA of nodes 5 and 1 is 3. Input: root = [3,5,1,6,2,0,8,None,None,7,4], p = 5, q = 4 Output: 5 Explanation: The LCA of nodes 5 and 4 is 5. ``` **Function Signature:** ```python def lowest_common_ancestor(root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode: ``` **Hints:** - Use Depth First Search (DFS) to traverse the binary tree. - Recursively find the LCA in the left and right subtrees. - Base cases will help in identifying if a node is part of the current subtree being explored. - If one of the nodes (`p` or `q`) is found in the left subtree and the other node is found in the right subtree, then the current node is the LCA.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def lowest_common_ancestor(root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode: Returns the lowest common ancestor (LCA) of two nodes in the binary tree. if not root or root == p or root == q: return root left = lowest_common_ancestor(root.left, p, q) right = lowest_common_ancestor(root.right, p, q) if left and right: return root return left if left else right"},{"question":"When Alice was a child, she used to play with building blocks, arranging them in various ways to form different structures. Now, Alice is nostalgic and wants to revisit her childhood by forming a specific structure using N building blocks. Alice wants to build a pyramid structure, where the first level has one block, the second level has two blocks, the third level has three blocks, and so on, with each subsequent level having one more block than the previous one. The sum of blocks in the pyramid must exactly equal N. However, Alice realizes that sometimes it might not be possible to form an exact pyramid with N blocks. Help Alice determine if she can form such a pyramid with exactly N blocks. Input The input consists of a single integer N (1 ≤ N ≤ 10^9) — the number of blocks Alice has. Output Print \\"YES\\" if Alice can form a pyramid with exactly N blocks, otherwise print \\"NO\\". Examples Input 6 Output YES Input 7 Output NO Input 10 Output YES Note In the first example, with 6 blocks, Alice can build a pyramid with levels 1, 2, and 3 blocks. The total number of blocks used is 1 + 2 + 3 = 6, so the answer is \\"YES\\". In the second example, with 7 blocks, Alice cannot build a pyramid because the sum 1 + 2 + 3 + 4 = 10 exceeds 7 and no other combination works, so the answer is \\"NO\\". In the third example, with 10 blocks, Alice can build a pyramid with levels 1, 2, 3, and 4 blocks. The total number of blocks used is 1 + 2 + 3 + 4 = 10, so the answer is \\"YES\\".","solution":"def can_form_pyramid(N): Determine if we can form a pyramid with exactly N blocks. level = 0 total_blocks = 0 while total_blocks < N: level += 1 total_blocks += level if total_blocks == N: return \\"YES\\" return \\"NO\\""},{"question":"# Task: - You need to implement a function that performs a simple number transformation based on a given pattern. Given a non-negative integer `n`, transform the number by reversing its digits, then adding the reversed number to the original number. Repeat this process until you obtain a palindrome (a number that reads the same forwards and backwards). Write a function to return the resulting palindrome number and the number of steps needed to reach this palindrome. If a palindrome has not been reached within 1000 iterations, return -1 for both the palindrome and steps. # Input: - A non-negative integer `n`. # Output: - A tuple with two elements: the palindrome number obtained, and the number of steps taken to reach it, or `(-1, -1)` if a palindrome was not found within 1000 iterations. # Example: 1. Input: `n = 87` 2. Output: `(4884, 4)` 3. Explanation: - Step 1: 87 + 78 = 165 - Step 2: 165 + 561 = 726 - Step 3: 726 + 627 = 1353 - Step 4: 1353 + 3531 = 4884 (palindrome found) # Constraints: - 0 <= n <= 10^18 Notes: 1. A palindrome number reads the same backward and forward. 2. The given non-negative integer and resulting numbers should be handled up to the constraints provided efficiently. ```python def find_palindrome(n): ... # Test cases assert find_palindrome(87) == (4884, 4) assert find_palindrome(0) == (0, 0) assert find_palindrome(196) == (-1, -1) # Many conjecture 196 does not lead to a palindrome within 1000 iterations ```","solution":"def find_palindrome(n): Transform the number by reversing its digits and adding the reversed number to the original, repeating until a palindrome is obtained or return (-1, -1) if not found within 1000 iterations. :param n: Non-negative integer :return: Tuple of (palindrome found, number of steps taken) or (-1, -1) if not found within 1000 iterations def is_palindrome(num): return str(num) == str(num)[::-1] steps = 0 while steps < 1000: if is_palindrome(n): return (n, steps) reversed_n = int(str(n)[::-1]) n = n + reversed_n steps += 1 return (-1, -1)"},{"question":"Alex is a warehouse manager responsible for distributing a shipment of packages. Each package has a specific weight and it must be assigned to a truck for delivery. Trucks have a maximum weight capacity they cannot exceed, and each truck must be filled as efficiently as possible. Alex wants to minimize the number of trucks used while ensuring that no truck is overloaded. Write a program to determine the minimum number of trucks required to transport all packages. -----Input----- The first line contains an integer T (1 ≤ T ≤ 10^5) — the maximum weight capacity of any truck. The second line contains an integer P (1 ≤ P ≤ 10^5) — the number of packages. The third line contains P integers w_1, w_2, ..., w_{P} (1 ≤ w_i ≤ T for all i) — the weights of the packages. -----Output----- Output a single integer — the minimum number of trucks required to transport all the packages. -----Examples----- Input 50 5 10 30 20 40 10 Output 3 Input 10 4 5 5 5 5 Output 2","solution":"def min_trucks_required(T, P, weights): Returns the minimum number of trucks required to transport all packages. Parameters: T (int): Maximum weight capacity of any truck. P (int): Number of packages. weights (list of int): Weights of the packages. Returns: int: Minimum number of trucks required. weights.sort(reverse=True) trucks = [] for weight in weights: placed = False for i in range(len(trucks)): if trucks[i] + weight <= T: trucks[i] += weight placed = True break if not placed: trucks.append(weight) return len(trucks)"},{"question":"Isomorphic Strings Create a function that determines if two given strings are isomorphic. Two strings are isomorphic if the characters in the first string can be replaced to get the second string, while preserving the order of characters. No two characters may map to the same character, but a character may map to itself. **Function Signature:** ```python def are_isomorphic(str1: str, str2: str) -> bool: ``` **Examples:** 1. Input: `str1 = \\"egg\\", str2 = \\"add\\"` ⇒ Output: `True` 2. Input: `str1 = \\"foo\\", str2 = \\"bar\\"` ⇒ Output: `False` 3. Input: `str1 = \\"paper\\", str2 = \\"title\\"` ⇒ Output: `True` 4. Input: `str1 = \\"aab\\", str2 = \\"xyz\\"` ⇒ Output: `False` **Constraints:** - The input strings will have a length of at most 10⁴ characters. - The input strings will contain only lowercase English letters.","solution":"def are_isomorphic(str1: str, str2: str) -> bool: if len(str1) != len(str2): return False mapping_str1_to_str2 = {} mapping_str2_to_str1 = {} for c1, c2 in zip(str1, str2): if c1 in mapping_str1_to_str2: if mapping_str1_to_str2[c1] != c2: return False else: mapping_str1_to_str2[c1] = c2 if c2 in mapping_str2_to_str1: if mapping_str2_to_str1[c2] != c1: return False else: mapping_str2_to_str1[c2] = c1 return True"},{"question":"___ # Task **_Given_** a *string*, return a new string where each character in the original string is duplicated such that each appears twice in a row. ___ # Notes * The input will be a non-empty string containing only alphabetic characters. * No spaces or special characters will be present in the input. ___ # Input >> Output Examples ``` double_char(\\"abcd\\") ==> \\"aabbccdd\\" ``` **_Explanation_**: * The original string \\"abcd\\" is transformed such that each character is repeated twice. ___ ``` double_char(\\"hello\\") ==> \\"hheelllloo\\" ``` **_Explanation_**: * The original string \\"hello\\" is transformed such that each character \'h\', \'e\', \'l\', and \'o\' is repeated twice, resulting in the string \\"hheelllloo\\". ___ ``` double_char(\\"xyz\\") ==> \\"xxyyzz\\" ``` **_Explanation_**: * The original string \\"xyz\\" is transformed such that each character \'x\', \'y\', and \'z\' is repeated twice, resulting in the string \\"xxyyzz\\". ___ Enjoy Learning!","solution":"def double_char(s): Returns a new string where each character in the original string is duplicated. return \\"\\".join([char * 2 for char in s])"},{"question":"Given an integer n, write a program to output the nth power of 2 without using the power operator or function. -----Constraints----- - The value of n is a non-negative integer. - 0 leq n leq 30 -----Input----- Input is given from Standard Input in the following format: n -----Output----- Print the value of 2 raised to the power of n. -----Sample Input----- 3 -----Sample Output----- 8 The value of 2 raised to the power of 3 is 8.","solution":"def power_of_two(n): Returns the nth power of 2 without using the power operator or function. Parameters: n (int): Non-negative integer representing the power to which 2 is to be raised. Returns: int: 2 raised to the power of n. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") result = 1 for _ in range(n): result *= 2 return result"},{"question":"Consider a tree with N nodes, where each node is numbered from 1 to N. Each node has a value assigned to it, and an edge connecting two nodes indicates a parent-child relationship. The root of the tree is always node 1. You are to perform the following operation Q times: - Given a query (u, v), calculate the maximum sum of values along the simple path from node u to node v. Write a program to determine the result of each query. Constraints: - 1 leq N leq 100,000 - 1 leq Q leq 100,000 - 1 leq value_i leq 10^9 for each node i - 1 leq u, v leq N Input Input is given from Standard Input in the following format: N Q value_1 value_2 ... value_N u_1 v_1 u_2 v_2 ... u_Q v_Q Output For each query, output the maximum sum of values along the simple path from u to v. Example Input 5 3 5 3 6 1 9 1 2 2 4 3 4 2 5 1 3 4 2 1 5 4 5 3 5 Output 11 9 24 Explanation - For query (1, 3): The path from 1 to 3 is 1 -> 2 -> 3 with a sum of 5 + 3 + 6 = 14. - For query (4, 2): The path from 4 to 2 is 4 -> 2 with a sum of 1 + 3 = 4. - For query (1, 5): The path from 1 to 5 is 1 -> 2 -> 5 with a sum of 5 + 3 + 9 = 17.","solution":"import sys from collections import defaultdict, deque def max_sum_path(N, Q, values, queries, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS to find depths and parents depth = [-1] * (N + 1) parent = [-1] * (N + 1) depth[1] = 0 parent[1] = 0 queue = deque([1]) while queue: node = queue.popleft() for neighbor in graph[node]: if depth[neighbor] == -1: # Unvisited depth[neighbor] = depth[node] + 1 parent[neighbor] = node queue.append(neighbor) # Prepare for LCA with binary lifting LOG = max(1, (N).bit_length()) up = [[-1] * (LOG + 1) for _ in range(N + 1)] for i in range(1, N + 1): up[i][0] = parent[i] for j in range(1, LOG + 1): for i in range(1, N + 1): if up[i][j - 1] != -1: up[i][j] = up[up[i][j - 1]][j - 1] def lca(u, v): if depth[u] < depth[v]: u, v = v, u diff = depth[u] - depth[v] for i in range(LOG, -1, -1): if (diff >> i) & 1: u = up[u][i] if u == v: return u for i in range(LOG, -1, -1): if up[u][i] != up[v][i]: u = up[u][i] v = up[v][i] return up[u][0] results = [] for u, v in queries: lca_uv = lca(u, v) path_sum = value_u_v_sum(u, v, lca_uv, values, parent) results.append(path_sum) return results def value_u_v_sum(u, v, lca_uv, values, parent): sum_u = 0 while u != lca_uv: sum_u += values[u-1] u = parent[u] sum_v = 0 while v != lca_uv: sum_v += values[v-1] v = parent[v] sum_lca = values[lca_uv-1] return sum_u + sum_v + sum_lca"},{"question":"You are given an N times M matrix of integers where each element represents the height of each cell in a coordinate grid. The task is to find a path from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1) such that the maximum height difference between any two adjacent cells in this path is minimized. You can move to an adjacent cell by moving left, right, up, or down. ------ Input ------ The first line of the input contains two space-separated integers N and M (1 leq N, M leq 1000) representing the dimensions of the matrix. Each of the next N lines contains M space-separated integers representing the heights (0 leq height leq 10^6). ------ Output ------ Print a single integer that represents the minimum possible value of the maximum height difference between any two adjacent cells in the optimal path. ------ Example Input ------ 3 3 1 3 5 2 8 3 4 7 6 ------ Example Output ------ 3 ------ Explanation ------ One possible optimal path is (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) and the height differences along this path are |1-2|=1, |2-4|=2, |4-7|=3, |7-6|=1. The maximum height difference in this path is 3, which is the minimum possible value of the maximum height differences among all possible paths.","solution":"from heapq import heappop, heappush def min_max_height_difference(N, M, matrix): def is_valid(x, y): return 0 <= x < N and 0 <= y < M directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] heap = [(0, 0, 0)] # (diff, x, y) max_diff = [[float(\'inf\')] * M for _ in range(N)] max_diff[0][0] = 0 while heap: diff, x, y = heappop(heap) if (x, y) == (N-1, M-1): return diff for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): new_diff = max(diff, abs(matrix[x][y] - matrix[nx][ny])) if new_diff < max_diff[nx][ny]: max_diff[nx][ny] = new_diff heappush(heap, (new_diff, nx, ny)) return max_diff[N-1][M-1]"},{"question":"John is participating in a game where he needs to determine the longest consecutive subsequence of the same character in a given string. Help John by writing a function that will find the length of the longest consecutive subsequence of the same character. **Input**: The first line contains T, the number of test cases. Each of the next T lines contains a string S. **Output**: For each test case, print a single integer representing the length of the longest consecutive subsequence of the same character. **Constraints**: 1 ≤ T ≤ 50 1 ≤ |S| ≤ 100, where |S| denotes the length of the string S. **SAMPLE INPUT**: 3 aaabbbaaacccdde abcdeeee abbccdddeeeeeeeee **SAMPLE OUTPUT**: 3 4 9 **Explanation**: In the first example, the longest consecutive subsequence is ‘aaa’ with length 3. In the second example, the longest consecutive subsequence is ‘eeee’ with length 4. In the third example, the longest consecutive subsequence is ‘eeeeeeeee’ with length 9.","solution":"def longest_consecutive_subsequence_length(s): Returns the length of the longest consecutive subsequence of the same character in the string s. if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length def process_test_cases(T, strings): Processes T test cases and returns a list of results for each string. results = [] for s in strings: results.append(longest_consecutive_subsequence_length(s)) return results"},{"question":"Write a function that checks whether a given string is a palindrome, ignoring case and non-alphanumeric characters. -----Constraints----- - The input string will be non-empty and will have a maximum length of 1000 characters. - The function should ignore spaces, punctuation, and other non-alphanumeric characters. -----Input----- Input is given from Standard Input in the following format: s -----Output----- The function should print \\"True\\" if the string is a palindrome and \\"False\\" otherwise. -----Sample Input----- A man, a plan, a canal: Panama -----Sample Output----- True The string \\"A man, a plan, a canal: Panama\\" when stripped of non-alphanumeric characters and converted to lowercase becomes \\"amanaplanacanalpanama\\", which is a palindrome. Hence the output should be \\"True\\".","solution":"def is_palindrome(s): Returns True if the input string is a palindrome, ignoring case and non-alphanumeric characters. # Filter out non-alphanumeric characters and convert to lowercase filtered_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_s == filtered_s[::-1]"},{"question":"(Your task is to help find the square sum of the list of integers modulo M. You will first assess the input list and calculate the sum of squares and then take its result modulo M.) -----Constraints----- - 1 leq length of the List leq 100 - 1 leq each integer in the List leq 1000 - 1 leq M leq 1000 -----Input----- The input consists of two lines: 1. A single integer M. 2. A space-separated list of integers. -----Output----- Print the result of the sum of squares of the list elements, modulo M. -----Sample Input----- 3 4 5 6 -----Sample Output----- 2 The square sum of 4, 5, and 6 is 16 + 25 + 36 = 77. The result of 77 modulo 3 is 2.","solution":"def square_sum_modulo(M, int_list): Returns the sum of squares of the list elements, modulo M. :param M: int - the modulus value :param int_list: List[int] - list of integers :return: int - sum of squares modulo M total_sum = sum(x**2 for x in int_list) return total_sum % M"},{"question":"Write a program that takes a list of integers and returns a new list containing only the prime numbers from the original list. Constraints - The length of the input list < 10000 - Each integer n in the list is such that 1 <= n <= 10^6 Input A space-separated list of integers given in a single line. Output Print the space-separated list of prime integers in a single line. Example Input 3 4 7 6 11 13 17 18 19 Output 3 7 11 13 17 19","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Given a list of integers, return a new list containing only the prime numbers. return [num for num in numbers if is_prime(num)]"},{"question":"A large company has a customer service system where customers can send in complaints and feedback. Each complaint or feedback consists of a string of words. The company wants to analyze these strings to figure out if a given string is polite or rude. A polite string is one in which no word appears more than once. A rude string is one which contains at least one repeated word. Write a program to help the company categorize each complaint or feedback string as polite or rude. Input: The first line of input contains a single integer T, the number of test cases. Each test case is a single line containing a string S consisting of lowercase words separated by spaces. Output: For each test case, output on a separate line: \\"POLITE\\" if the string is a polite string and \\"RUDE\\" if it is a rude string. Constraints: 1 ≤ T ≤ 500 1 ≤ |S| ≤ 2000, where |S| is the length of the string S. All words in the string contain only lowercase alphabetic characters and are at most 20 characters long. Sample Input: 4 this is a good day be kind to others this is is rude politeness is important in service Sample Output: POLITE POLITE RUDE POLITE","solution":"def categorize_strings(T, strings): results = [] for S in strings: words = S.split() if len(words) == len(set(words)): results.append(\\"POLITE\\") else: results.append(\\"RUDE\\") return results"},{"question":"You are given an array of integers and a series of queries. Each query asks you to provide the maximum sum of any subarray of at most a given length. Input The first line contains two integers n (1 ≤ n ≤ 105) and q (1 ≤ q ≤ 105) — the length of the array and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (-109 ≤ ai ≤ 109) — the elements of the array. Each of the next q lines contains one integer k (1 ≤ k ≤ n) — the maximum length of the subarray for that query. Output For each query, print a single integer — the maximum sum of any subarray of length at most k. Examples Input 5 3 1 -2 3 4 -5 1 2 5 Output 4 7 7 Input 4 2 -1 -2 -3 -4 1 2 Output -1 -1","solution":"def max_subarray_sum_with_length(array, max_length): Given an array and a maximum length, find the maximum sum of any subarray of at most that length. n = len(array) dp = [float(\'-inf\')] * (n + 1) result = float(\'-inf\') for i in range(n): current_sum = 0 for j in range(max_length): if i + j >= n: break current_sum += array[i + j] if current_sum > dp[i + j + 1]: dp[i + j + 1] = current_sum for x in dp: if x > result: result = x return result def process_queries(array, queries): results = [] for k in queries: results.append(max_subarray_sum_with_length(array, k)) return results"},{"question":"You are given a list of N positive integers. You need to find the greatest common divisor (GCD) of all the integers in the list. Note that N will be between 1 and 100000. Input The single line contains N space-separated positive integers. Each of these integers will be at most 109. Output Print a single integer which is the GCD of all the numbers in the list. Examples Input 6 9 15 Output 3 Input 100 75 25 50 Output 25","solution":"def gcd(a, b): Returns the greatest common divisor of a and b using Euclid\'s algorithm. while b: a, b = b, a % b return a def find_gcd_of_list(numbers): Returns the greatest common divisor of all the integers in the list. from functools import reduce return reduce(gcd, numbers)"},{"question":"A mysterious merchant In a small village nestled in the mountains, there\'s a mysterious merchant who sells magical potions. These potions boost the strength of those who drink them, but their effects last only for a limited time. The villagers need these potions to fend off the aggressive creatures that frequently attack their homes. The attacks are sudden, and the villagers often find themselves unprepared. The village council has decided to keep a stock of potions to be distributed whenever an attack is expected. The merchant has a variety of potions, each with its own cost and duration of effect. The council has a budget and wants to maximize the total duration of effective potion time they can purchase with the given budget. Note that multiple potions of the same type can be purchased. Given a list of potions, each defined by its cost and duration, and a budget, determine the maximum total effective time that can be purchased. Input The input consists of multiple datasets. Each dataset is formatted as follows: > N B > C1 D1 > C2 D2 > ... > CN DN The first line of each dataset contains two integers, N (1 ≤ N ≤ 10,000) representing the number of different potions available, and B (0 ≤ B ≤ 1,000,000,000), representing the total budget. The next N lines each contain two integers: Ci (1 ≤ Ci ≤ 10,000) representing the cost of the i-th potion and Di (1 ≤ Di ≤ 10,000) representing the duration of effect of the i-th potion. The input ends with a dataset where N = 0 and B = 0. Do not process this dataset. Output For each dataset, output the maximum total duration of potion effects that can be purchased within the given budget. Sample Input 3 50 10 5 20 10 30 15 2 12 5 7 6 8 0 0 Output for Sample Input 25 14 Example Input 3 50 10 5 20 10 30 15 2 12 5 7 6 8 0 0 Output 25 14","solution":"def max_potion_duration(potion_data): Determines the maximum total duration of potion effects that can be purchased within the given budget. Parameters: - potion_data: List of tuples where each tuple contains (number of potions, budget, list of potions). Each potion is represented as a tuple (cost, duration). Returns: - List of integers representing the maximum total duration for each dataset. results = [] for data in potion_data: N, B, potions = data if N == 0 and B == 0: break # Sort potions based on cost per duration in ascending order potions.sort(key=lambda x: x[0] / x[1]) total_duration = 0 for cost, duration in potions: if B >= cost: max_potions = B // cost total_duration += max_potions * duration B %= cost # Remaining budget after buying the maximum potions of current type if B <= 0: break results.append(total_duration) return results"},{"question":"Jackson is an entrepreneur, and he wants to improve his productivity by automating some of his tasks. He has a series of tasks that he wants to complete each day. Jackson uses a priority list to manage his tasks, where each task is assigned a priority value. Higher priority values indicate more important tasks. Jackson\'s daily routine involves completing tasks in a specific order. However, if he encounters a more critical task while performing a current one, he reorders his list to complete the critical task first. This reordering happens only at the beginning of the day. Once Jackson begins his day, he follows the reordered list without further changes. Given the initial order of daily tasks and their priorities, determine the sequence of tasks Jackson will complete for the day. Input The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of tasks Jackson wants to accomplish. The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 10^5) — the priorities of the tasks in the initial order. Output Output the reordered list of task priorities that Jackson will follow for the day. Examples Input 5 1 3 5 2 4 Output 5 4 3 2 1 Input 4 10 20 30 25 Output 30 25 20 10","solution":"def reorder_tasks(n, priorities): Returns the reordered list of task priorities Jackson will follow for the day, sorted in descending order of their priority values. Args: n: int - the number of tasks priorities: list of int - the priorities of tasks Returns: list of int - reordered list of task priorities return sorted(priorities, reverse=True) # Example usage: # print(reorder_tasks(5, [1, 3, 5, 2, 4])) # Output: [5, 4, 3, 2, 1] # print(reorder_tasks(4, [10, 20, 30, 25])) # Output: [30, 25, 20, 10]"},{"question":"The inhabitants of Forestia are currently engaged in an effort to better understand the biodiversity of their forest. As a part of this project, they are tracking the movement of various species over distinct intervals. Can you help them by writing a program that calculates the total distance traveled by a set of animals over a series of points? You are given the positions of an animal at different timestamps during its journey in a form of coordinates. For each test case, you need to calculate the sum of Euclidean distances between consecutive points. -----Input:----- The first line of the input contains a single integer t, the number of test cases (1 ≤ t ≤ 100). Each test case starts with an integer n, the number of coordinates (2 ≤ n ≤ 100). Each of the next n lines contains two integers x and y which represent the position of the animal at different timestamps. -----Output:----- For each test case, print \\"Test case: i\\" (1 ≤ i ≤ t) in a separate line followed by the total distance traveled rounded to two decimal places. -----Constraints----- -1000 ≤ x, y ≤ 1000 -----Sample Input:----- 2 3 0 0 3 4 0 8 4 1 1 2 2 3 3 4 4 -----Sample Output:----- Test case: 1 10.00 Test case: 2 4.24 -----Notes----- The Euclidean distance between two points (x1, y1) and (x2, y2) is calculated as√((x2-x1)² + (y2-y1)²).","solution":"from math import sqrt def total_distance(points): Calculates the total Euclidean distance traveled given a list of coordinates. Args: points (list of tuples): List of (x, y) coordinates. Returns: float: Total distance traveled rounded to two decimal places. total_dist = 0.0 for i in range(1, len(points)): x1, y1 = points[i-1] x2, y2 = points[i] dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) total_dist += dist return round(total_dist, 2) def forestia_biodiversity_tracking(test_cases): Processes multiple test cases to compute the total distance traveled for each set of coordinates. Args: test_cases (list of lists): List containing test cases where each test case is a list of (x, y) coordinates. Returns: list of tuples: Each tuple contains the test case number and the computed total distance. results = [] for i, points in enumerate(test_cases): dist = total_distance(points) results.append((i + 1, dist)) return results"},{"question":"John is teaching his friends about palindromes. A palindrome is a string that reads the same forward and backward. To make the learning process fun, he decides to create a game. In this game, given a string, the players have to determine whether it is a palindrome or not. However, to make it a bit more challenging, the string can contain uppercase and lowercase letters, and spaces should be ignored while checking for palindromes. Write a program that helps John determine if the given strings are palindromes. ------ Input ------ The first line of the input contains an integer T, the number of test cases. T lines follow. Each of the next T lines contains a string S which needs to be checked for being a palindrome. ------ Output ------ For each test case output in a separate line, \\"YES\\" if the string is a palindrome, else \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 30 1 ≤ text{Length of } S ≤ 1000 ------ Sample Input 1 ------ 3 A man a plan a canal Panama No lemon no melon Step on no pets ------ Sample Output 1 ------ YES YES YES","solution":"def is_palindrome(s): This function checks if the provided string s is a palindrome, ignoring spaces and case differences. cleaned_s = \'\'.join(e.lower() for e in s if e.isalnum()) return cleaned_s == cleaned_s[::-1] def palindrome_game(T, cases): This function processes multiple test cases to check if each is a palindrome. results = [] for s in cases: if is_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A social media platform wants to ensure that its usernames adhere to specific guidelines. Write a function that validates the given username based on the following rules: 1. The username must be between 5 and 20 characters, inclusive. 2. The username can contain only lowercase letters (a-z), digits (0-9), and underscores (_). 3. The username must start with a lowercase letter. Your task is to implement the `validateUsername` function, which takes a single string parameter, `username`, and returns `True` if the username is valid according to the given rules, and `False` otherwise. Function Signature: ```python def validateUsername(username: str) -> bool: ``` Input Format: - A single string `username` representing the username to validate. Constraints: - `1 <= len(username) <= 100` Output Format: - Return `True` if the username is valid, otherwise return `False`. Sample Input 0: ``` cool_user_123 ``` Sample Output 0: ``` True ``` Sample Input 1: ``` UserCool_123 ``` Sample Output 1: ``` False ``` Sample Input 2: ``` _underscore ``` Sample Output 2: ``` False ``` Sample Input 3: ``` short ``` Sample Output 3: ``` True ``` Function Description: Complete the `validateUsername` function mentioned above. The function should return a boolean indicating whether the given username adheres to the specified guidelines or not.","solution":"def validateUsername(username: str) -> bool: Validates the username based on the given rules: 1. The username must be between 5 and 20 characters, inclusive. 2. The username can contain only lowercase letters (a-z), digits (0-9), and underscores (_). 3. The username must start with a lowercase letter. if not (5 <= len(username) <= 20): return False if not username[0].islower(): return False for char in username: if not (char.islower() or char.isdigit() or char == \'_\'): return False return True"},{"question":"A village of tiny creatures called Coderpixies is facing a challenge with their message system. They communicate using strings composed of lowercase letters and commas. Coderpixies need a mechanism to remove redundant commas from their messages to make them concise and easier to read. A redundant comma is defined as: - A comma that appears at the beginning of the string. - A comma that appears at the end of the string. - Multiple consecutive commas, where only one comma is needed. You have been tasked to write a function `clean_message(message)` that takes a string `message` and returns a new string with redundant commas removed. # Rules: 1. If a comma appears at the start of the string, remove it. 2. If a comma appears at the end of the string, remove it. 3. Replace sequences of multiple consecutive commas with a single comma. # Examples: ```python clean_message(\\",hello,world,,\\") # Output: \\"hello,world\\" clean_message(\\"welcome,to,,code,,challenge\\") # Output: \\"welcome,to,code,challenge\\" clean_message(\\",,,codewars,,\\") # Output: \\"codewars\\" ``` # Constraints: - Assume the input string will have at least one lowercase letter. - The input string may contain only lowercase letters and commas.","solution":"def clean_message(message): Function to remove redundant commas from the input message. # Remove commas from the start and end of the string message = message.strip(\',\') # Replace multiple consecutive commas with a single comma while \',,\' in message: message = message.replace(\',,\', \',\') return message"},{"question":"Determine the most frequent substring of length k in a given string. Given a string `S` and an integer `k`, return the most frequent substring of length `k` in `S`. If there are multiple substrings with the same maximum frequency, return the lexicographically smallest one. # Input - An integer `k` representing the length of the substring. - A string `S` consisting of lowercase English letters only. # Output - A single string representing the most frequent substring of length `k`. # Constraints - 1 <= |S| <= 1000, where |S| is the length of the string `S`. - 1 <= k <= |S| # Sample Input ``` 3 abcabcabc ``` # Sample Output ``` abc ``` # Explanation In the sample input, the substrings of length 3 are: - `abc` (3 occurrences) - `bca` (2 occurrences) - `cab` (2 occurrences) The substring `abc` occurs the most frequently (3 times). Hence, the output is `abc`.","solution":"from collections import defaultdict def most_frequent_substring(k, S): Returns the most frequent substring of length k in the given string S. If there are multiple substrings with the same maximum frequency, returns the lexicographically smallest one. substring_count = defaultdict(int) # Iterate over the string to count occurrences of each substring of length k for i in range(len(S) - k + 1): substring = S[i:i+k] substring_count[substring] += 1 # Find the most frequent substring max_frequency = 0 most_frequent_substr = \\"\\" for substr, count in substring_count.items(): if count > max_frequency or (count == max_frequency and substr < most_frequent_substr): max_frequency = count most_frequent_substr = substr return most_frequent_substr"},{"question":"You are managing a library system, where each book has a unique ID and belongs to a specific genre. The library conducts an annual inventory check to ensure that all books are accounted for and correctly labeled by their genre. During this year\'s check, you discovered that some books have been mistakenly labeled with the wrong genre. You need to identify these inconsistencies. Given a list of books with their genre labels and a correct genre classification list, your task is to find out how many books are labeled with the correct genre versus those that are mislabeled. Input The first input line contains an integer N (1 ≤ N ≤ 100,000) which represents the number of books in the library. The next N lines each contain two strings Bi and Gi, where Bi (1 ≤ |Bi| ≤ 50) is the book ID and Gi (1 ≤ |Gi| ≤ 20) is the genre label as per the inventory check. The following N lines also contain two strings Bi and Gi, where Bi is the book ID and Gi is the correct genre. Output Output two integers: the number of books correctly labeled with their genre and the number of books mislabeled. Examples Input 4 bk1 Fiction bk2 Science bk3 Romance bk4 Fiction bk1 Literature bk2 Science bk3 Thriller bk4 Fiction Output 2 2 Input 3 bk1 Fantasy bk2 Mystery bk3 Science bk1 Fantasy bk2 Mystery bk3 Romance Output 2 1","solution":"def count_genre_mismatches(n, inventory_check, correct_genre): This function returns the count of correctly labeled books and mislabeled books. Parameters: n (int): The number of books in the library. inventory_check (list of tuples): Each tuple consists of (Bi, Gi) where Bi is the book ID and Gi is the genre label as per the inventory check. correct_genre (list of tuples): Each tuple consists of (Bi, Gi) where Bi is the book ID and Gi is the correct genre. Returns: (int, int): A tuple where the first element is the number of correctly labeled books and the second element is the number of mislabeled books. # Create a dictionary to hold the correct genre for each book ID correct_dict = {bi: gi for bi, gi in correct_genre} correctly_labeled = 0 mislabeled = 0 # Iterate over the inventory_check list and compare with correct_dict for bi, gi in inventory_check: if gi == correct_dict[bi]: correctly_labeled += 1 else: mislabeled += 1 return correctly_labeled, mislabeled"},{"question":"Given an array of integers, find the length of the longest contiguous subarray that contains only unique numbers. The subarray should not contain any duplicate elements. Function Description Complete the `longestUniqueSubarray` function in the editor below. `longestUniqueSubarray` has the following parameter(s): * `int[] nums`: an array of integers. Returns * `int`: the length of the longest contiguous subarray with all unique elements. Input Format The first line contains an integer, n, the size of the array. The second line contains n space-separated integers, representing the elements of the array. Constraints * 1 leq n leq 10^5 * textbf{nums[i]} is an integer where 0 leq textbf{nums[i]} < 10^4. Sample Input 7 2 1 1 3 2 1 4 Sample Output 4 Explanation In the sample input, the longest contiguous subarray which contains only unique elements is [1, 3, 2, 1], which has a length of 4. Additional Notes: 1. The solution should efficiently handle large input sizes up to 10^5 elements. 2. A sliding window or two-pointer technique may be beneficial for solving this problem.","solution":"def longestUniqueSubarray(nums): Returns the length of the longest contiguous subarray with unique elements. if not nums: return 0 num_set = set() left = 0 max_length = 0 for right in range(len(nums)): while nums[right] in num_set: num_set.remove(nums[left]) left += 1 num_set.add(nums[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a connected undirected graph with n vertices and m edges. The graph does not contain any self-loops or multiple edges between the same pair of vertices. An edge in this graph is called a bridge if removing it would increase the number of connected components of the graph. Your task is to determine if the graph contains any bridges. Input The first line contains two integers, n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 10000) — the number of vertices and edges in the graph, respectively. Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — the vertices connected by the i-th edge. Output Print \\"YES\\" if the graph contains at least one bridge. Otherwise, print \\"NO\\". Examples Input 4 4 1 2 1 3 2 3 3 4 Output YES Input 4 3 1 2 1 3 2 3 Output NO","solution":"def find_bridges(n, m, edges): from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) time = 0 visited = [False] * (n + 1) disc = [float(\\"Inf\\")] * (n + 1) low = [float(\\"Inf\\")] * (n + 1) parent = [-1] * (n + 1) bridges = [] def bridge_util(u): nonlocal time visited[u] = True disc[u] = low[u] = time time += 1 for v in graph[u]: if not visited[v]: parent[v] = u bridge_util(v) low[u] = min(low[u], low[v]) if low[v] > disc[u]: bridges.append((u, v)) elif v != parent[u]: low[u] = min(low[u], disc[v]) for i in range(1, n+1): if not visited[i]: bridge_util(i) return \\"YES\\" if bridges else \\"NO\\" # Example execution # find_bridges(4, 4, [(1, 2), (1, 3), (2, 3), (3, 4)]) should return \'YES\' # find_bridges(4, 3, [(1, 2), (1, 3), (2, 3)]) should return \'NO\'"},{"question":"A person named Alex loves to code and solve complex problems. One day, Alex encountered a unique sequence problem. The problem requires finding if a given sequence of integers contains any sub-array whose sum equals to zero. Write a program that checks whether there exists at least one sub-array with a sum of zero in a given sequence. Input The first line contains a positive integer n (1 ≤ n ≤ 100), which represents the number of elements in the sequence. The second line contains n integers: a1, a2, ..., an ( -10^4 ≤ ai ≤ 10^4). Output Print \\"YES\\" if there exists at least one sub-array with a sum of zero, otherwise print \\"NO\\". Examples Input 5 4 2 -3 1 6 Output YES Input 4 1 2 3 4 Output NO Input 6 1 4 -2 -2 5 1 Output YES","solution":"def has_zero_sum_subarray(n, sequence): Checks whether there exists at least one sub-array with a sum of zero in a given sequence. Args: n (int): The number of elements in the sequence. sequence (List[int]): The sequence of integers. Returns: str: \\"YES\\" if there exists at least one sub-array with a sum of zero, otherwise \\"NO\\". prefix_sums = set() current_sum = 0 for num in sequence: current_sum += num if current_sum == 0 or current_sum in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\""},{"question":"Write a function that takes a time string in the format \\"HH:MM AM/PM\\" and returns it in 24-hour format \\"HH:MM\\". ``` For example: convert_time(\'02:30 PM\') => \'14:30\' convert_time(\'12:45 AM\') => \'00:45\' ```","solution":"def convert_time(time_str): Converts a time string in the format \\"HH:MM AM/PM\\" to 24-hour format \\"HH:MM\\". # Extract the components of the time string time, period = time_str[:-3], time_str[-2:] hours, minutes = map(int, time.split(\':\')) # Convert hours based on the period if period == \'PM\' and hours != 12: hours += 12 elif period == \'AM\' and hours == 12: hours = 0 # Format the time in 24-hour format return f\\"{hours:02}:{minutes:02}\\""},{"question":"Mia and Noah are playing a game on a linked list of n nodes. The linked list is set up such that node 1 is the head and node n is the tail. Mia starts at node 1 and Noah starts at node y (1 < y ≤ n). Moves are made in turns, with Noah going first. In one move, both can either stay at the current node or move to the next node in the list only. The game ends when Mia moves to the node where Noah is currently located. Mia wants to minimize the total number of moves, while Noah wants to maximize it by trying to avoid Mia as long as possible. You need to determine and print the total number of moves in the game. -----Input----- The first line contains two integers n and y (2 ≤ n ≤ 10^5, 1 < y ≤ n) — the number of nodes in the linked list and Noah\'s starting node respectively. -----Output----- Print the total number of moves Mia and Noah will make. -----Examples----- Input 6 4 Output 7 Input 4 2 Output 5 -----Note----- In the first example, the linked list looks like this: 1 → 2 → 3 → 4 → 5 → 6 Mia starts at node 1 and Noah starts at node 4. The optimal moves are: N: go to node 5 M: go to node 2 N: go to node 6 M: go to node 3 N: stay at node 6 M: go to node 4 N: stay at node 6 M: go to node 5 N: stay at node 6 M: go to node 6 In the second example, the linked list looks like this: 1 → 2 → 3 → 4 Mia starts at node 1 and Noah at node 2. The optimal moves are: N: go to node 3 M: stay at node 1 N: go to node 4 M: go to node 2 N: stay at node 4 M: go to node 3 N: stay at node 4 M: go to node 4","solution":"def total_moves(n, y): Determines the total number of moves in the game between Mia and Noah. :param n: The total number of nodes in the linked list. :param y: The starting node of Noah (1 < y ≤ n). :return: The total number of moves that will be made. # Mia starts at node 1 # Noah starts at node y # Mia has to make moves to reach Noah starting from node 1 # Noah tries to maintain the maximum distance within the available moves. # The total moves needed is y + (y-1) - 1 total_moves = 2 * (y - 1) return total_moves"},{"question":"Write a function `longest_consecutive_sequence(nums: List[int]) -> int` that takes a list of unsorted integers and returns the length of the longest consecutive elements sequence. Your algorithm should run in O(n) complexity. Example Input ```python nums = [100, 4, 200, 1, 3, 2] ``` Output ```python 4 ``` Explanation The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # only start counting at the beginning of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Lena the Librarian is very fond of reading books. She has a big bookshelf with n books, each with a different thickness. Lena likes to place one bookend on the leftmost side of the book collection on her shelf and another bookend on the rightmost side. A bookend covers the full height of the books but has no width. However, Lena can only place bookends where the summed widths of books between them (including the bookend positions) are minimized. Lena wants you to calculate this minimum width sum for any given position of bookends. -----Input----- The first line contains an integer n (1 ≤ n ≤ 5000) — the number of books on the shelf. The second line contains n space-separated positive integers w_1, w_2, ..., w_n (each between 1 and 10^9) representing the widths of the books. -----Output----- Print the minimum width sum that can be enclosed by the two bookends. -----Examples----- Input 5 3 1 4 2 2 Output 3 Input 3 10 7 3 Output 3 Input 1 12 Output 12 -----Note----- In the first sample, the minimum sum of widths between any two bookends (including the bookend positions) is 3, which is the width of the first book. In the second sample, placing bookends around the last book (width 3) results in the minimum sum of 3. In the third sample, there is only one book, so the width sum is simply the width of that single book, which is 12.","solution":"def find_min_width_sum(n, widths): Finds the minimum width sum enclosed by two bookends. :param n: number of books on the shelf :param widths: list containing widths of each book :return: minimum width sum between two bookends (including bookend positions) if n == 1: return widths[0] min_width = min(widths) return min_width"},{"question":"You are helping a library to automate its lending system. The library allows users to borrow books for a fixed period but also allows them to extend their borrowing period. If the library has a due date policy, you need to determine whether the books can be extended or not. The library defines the book lending period as 14 days. The extension is possible only if the extension request is made before the original due date and after the halfway point (i.e., after 7 days but before 14 days). You are given a list of borrowing records. Each borrowing record contains the user\'s name, the book name, the date the book was borrowed, and the date the extension request was made. Your task is to determine how many extensions were valid based on the library\'s policy. Input: - The first line contains an integer N, representing the number of borrowing records. - The next N lines each contain a borrowing record in the format: `<User-name> <Book-name> <Borrow-date> <Extension-request-date>` - The Borrow-date and Extension-request-date are in the format YYYY-MM-DD. Output: - Print an integer representing the count of valid extension requests. Constraints: - 1 ≤ N ≤ 1000 - The dates are valid Gregorian dates. - The length of each user-name and book-name is between 1 and 100 characters. SAMPLE INPUT 3 Alice \\"Pride and Prejudice\\" 2023-01-01 2023-01-10 Bob \\"1984\\" 2023-02-15 2023-02-21 Eve \\"To Kill a Mockingbird\\" 2023-03-01 2023-03-16 SAMPLE OUTPUT 2 Explanation: - Alice borrowed \\"Pride and Prejudice\\" on 2023-01-01. The halfway point is 2023-01-08, and the due date is 2023-01-15. Alice requested an extension on 2023-01-10, which is after the halfway point but before the due date. Hence, this is a valid extension. - Bob borrowed \\"1984\\" on 2023-02-15. The halfway point is 2023-02-22, and the due date is 2023-03-01. Bob requested an extension on 2023-02-21, which is before the halfway point. Hence, this is not a valid extension. - Eve borrowed \\"To Kill a Mockingbird\\" on 2023-03-01. The halfway point is 2023-03-08, and the due date is 2023-03-15. Eve requested an extension on 2023-03-16, which is after the due date. Hence, this is not a valid extension.","solution":"from datetime import datetime, timedelta def count_valid_extensions(borrowing_records): Counts the number of valid extension requests based on the library\'s policy. :param borrowing_records: List of tuples containing (User-name, Book-name, Borrow-date, Extension-request-date) :return: Integer count of valid extension requests valid_extensions = 0 borrowing_period = 14 # Fixed borrowing period in days halfway_period = 7 # Halfway point in days for record in borrowing_records: user_name, book_name, borrow_date_str, extension_request_date_str = record borrow_date = datetime.strptime(borrow_date_str, \'%Y-%m-%d\') extension_request_date = datetime.strptime(extension_request_date_str, \'%Y-%m-%d\') halfway_date = borrow_date + timedelta(days=halfway_period) due_date = borrow_date + timedelta(days=borrowing_period) if halfway_date < extension_request_date < due_date: valid_extensions += 1 return valid_extensions"},{"question":"A new startup called \\"Binary Matrix Inc.\\" is working on analyzing binary matrices. They want to identify specific patterns within these matrices. You have been enlisted to help them with one such problem. The problem is to determine the largest square sub-matrix within a given binary matrix that contains only 1\'s. For example, consider the following matrix: ``` 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` The largest square sub-matrix containing only 1\'s in the above matrix is: ``` 1 1 1 1 ``` and its size is 2 (since it is a 2 x 2 matrix). Your task is to write a program that, given a binary matrix, finds the size of the largest square sub-matrix containing only 1\'s. # INPUT - The first line contains an integer `T`, the number of test cases. - Each test case starts with two integers `M` and `N`, representing the number of rows and columns in the matrix. - This is followed by `M` lines, each containing `N` integers (either 0 or 1) representing the binary matrix. # OUTPUT For each test case, output a single integer, the size of the largest square sub-matrix containing only 1\'s. # CONSTRAINTS - 1 ≤ T ≤ 50 - 1 ≤ M, N ≤ 500 - The matrix contains only 0s and 1s. # SAMPLE INPUT ``` 2 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 3 3 1 1 1 1 1 1 1 1 0 ``` # SAMPLE OUTPUT ``` 2 2 ``` # Explanation For the first test case, the largest square sub-matrix containing only 1\'s is of size 2 (as shown in the example above). For the second test case, the largest square sub-matrix containing only 1\'s is also of size 2 (the top left 2 x 2 sub-matrix). Write an efficient algorithm to solve the problem within the given constraints.","solution":"def largest_square(matrix): Returns the size of the largest square sub-matrix containing only 1\'s in the given binary matrix. if not matrix: return 0 M = len(matrix) N = len(matrix[0]) # Create a DP table to store the size of the largest square submatrix ending at (i, j) dp = [[0] * N for _ in range(M)] max_side = 0 for i in range(M): for j in range(N): if matrix[i][j] == 1: # If we are at the first row or first column, the largest square is the value itself (1 or 0) if i == 0 or j == 0: dp[i][j] = 1 else: # Update the DP table value based on the minimum of the three adjacent cells plus 1 dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 # Update the maximum size of the square found so far max_side = max(max_side, dp[i][j]) return max_side def analyze_matrices(test_cases): results = [] for matrix in test_cases: results.append(largest_square(matrix)) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): M, N = map(int, input_lines[index].strip().split()) index += 1 matrix = [] for i in range(M): row = list(map(int, input_lines[index].strip().split())) index += 1 matrix.append(row) test_cases.append(matrix) return test_cases def main(input_str): test_cases = parse_input(input_str) results = analyze_matrices(test_cases) for result in results: print(result)"},{"question":"Given an array A of N integers, you need to create another array B such that B[i] is the sum of all elements in A except A[i], without using the division operation. INPUT: First line contains an integer N, representing the number of elements in the array A. Second line contains N integers representing the elements of array A. OUTPUT: Print N integers representing the array B. CONSTRAINTS: 1 ≤ N ≤ 10^5 -10^6 ≤ A[i] ≤ 10^6 SAMPLE INPUT 5 1 2 3 4 5 SAMPLE OUTPUT 14 13 12 11 10 Explanation For B[0], the sum is 2+3+4+5 = 14 For B[1], the sum is 1+3+4+5 = 13 For B[2], the sum is 1+2+4+5 = 12 For B[3], the sum is 1+2+3+5 = 11 For B[4], the sum is 1+2+3+4 = 10","solution":"def calculate_B(A): Given an array A, this function returns another array B such that B[i] is the sum of all elements in A except A[i]. N = len(A) total_sum = sum(A) B = [total_sum - A[i] for i in range(N)] return B"},{"question":"Given a string s that consists of only lowercase English letters, you need to determine if it can be rearranged into a palindrome. A string is considered a palindrome if it reads the same forwards and backwards. Return true if the string can be rearranged into a palindrome, and false otherwise. Example 1: Input: s = \\"civic\\" Output: true Explanation: The string \\"civic\\" is already a palindrome. Example 2: Input: s = \\"ivicc\\" Output: true Explanation: The string \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. Example 3: Input: s = \\"hello\\" Output: false Explanation: The string \\"hello\\" cannot be rearranged to form a palindrome. Example 4: Input: s = \\"aab\\" Output: true Explanation: The string \\"aab\\" can be rearranged to \\"aba\\", which is a palindrome. Constraints: 1 <= s.length <= 10^5 s consists of lowercase English letters.","solution":"def can_form_palindrome(s: str) -> bool: Determines if the string s can be rearranged into a palindrome. from collections import Counter # Count the occurrences of each character char_counts = Counter(s) # Count how many characters have an odd number of occurrences odd_count = sum(1 for count in char_counts.values() if count % 2 == 1) # A string can be rearranged into a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"A robot is placed on an infinite 2D grid. The robot starts at the origin point (0, 0) and follows a predetermined sequence of moves. The possible moves are: - \'U\': move up by 1 unit. - \'D\': move down by 1 unit. - \'L\': move left by 1 unit. - \'R\': move right by 1 unit. Given a sequence of moves and a set of points on the grid, determine how many of these points the robot will visit if it follows the move sequence exactly once. # Input - The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the move sequence. - The second line contains a string of length n consisting of characters \'U\', \'D\', \'L\', \'R\'. - The third line contains an integer m (1 ≤ m ≤ 10^5) — the number of points on the grid. - The next m lines each contain two integers x and y (−10^9 ≤ x, y ≤ 10^9) — the coordinates of a point on the grid. # Output Print a single integer — the number of points on the grid that the robot will visit. # Examples Example 1 **Input:** ``` 6 URRDUL 5 0 0 1 1 1 0 0 1 -1 0 ``` **Output:** ``` 3 ``` **Explanation:** - The robot starts at (0, 0) and follows these moves: Up, Right, Right, Down, Up, Left. - Visited points are: (0, 0), (0, 1), (1, 1), (2, 1), (2, 0), (1, 0). - Points (0, 0), (1, 1), (1, 0) from the input set are visited. Example 2 **Input:** ``` 4 DDRR 3 2 0 1 -2 2 -2 ``` **Output:** ``` 2 ``` **Explanation:** - The robot starts at (0, 0) and follows these moves: Down, Down, Right, Right. - Visited points are: (0, 0), (0, -1), (0, -2), (1, -2), (2, -2). - Points (1, -2) and (2, -2) from the input set are visited.","solution":"def count_visited_points(n, moves, m, points): Computes the number of distinct points visited by the robot. Parameters: n (int): Length of the move sequence. moves (str): Sequence of moves (\'U\', \'D\', \'L\', \'R\'). m (int): Number of points on the grid. points (list): List of tuples representing the points (x, y). Returns: int: Number of points visited by the robot at least once. visited_positions = set() x, y = 0, 0 visited_positions.add((x, y)) for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 visited_positions.add((x, y)) visited_count = sum((x, y) in visited_positions for x, y in points) return visited_count"},{"question":"An adventurer is traversing through a maze represented by a grid of size N x M. Each cell in the grid can either be an open path or a wall. The adventurer can only move to an adjacent cell that is an open path. Moving from one cell to any of its four adjacent cells (left, right, up, down) constitutes a single step. The goal is to determine the minimum number of steps required for the adventurer to reach the exit cell starting from the entrance cell. If it is not possible to reach the exit, return -1. The entrance is always located at the top-left corner of the grid, and the exit is always located at the bottom-right corner of the grid. The grid is represented as follows: - \'1\' indicates the cell is an open path. - \'0\' indicates the cell is a wall. -----Constraints----- - 2 leq N, M leq 1000 - The grid will always have at least one cell with \'1\' in both the entrance and exit positions. - All values in the input grid are integers. -----Input----- Input is given from Standard Input in the following format: N M grid[0][0] grid[0][1] ... grid[0][M-1] grid[1][0] grid[1][1] ... grid[1][M-1] ... grid[N-1][0] grid[N-1][1] ... grid[N-1][M-1] -----Output----- Output the minimum number of steps required to reach the exit cell from the entrance cell, or -1 if it is not possible. -----Sample Input----- 3 3 1 0 0 1 1 0 0 1 1 -----Sample Output----- 5 In the above example, the adventurer starts at (0, 0) and the possible path to the exit is: (0, 0) -> (1, 0) -> (1, 1) -> (2, 1) -> (2, 2). This requires 5 steps.","solution":"from collections import deque def minimum_steps_to_exit(n, m, grid): Determine the minimum number of steps required to reach the exit cell starting from the entrance cell. If it is not possible, return -1. :param n: Number of rows in the grid. :param m: Number of columns in the grid. :param grid: List of lists representing the grid. :return: Minimum number of steps to reach the exit, or -1 if not possible. if grid[0][0] == 0 or grid[n-1][m-1] == 0: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right queue = deque([(0, 0, 1)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if r == n - 1 and c == m - 1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == 1 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"Implement a function that takes a list of integers and returns a new list where each element is replaced by the product of all other elements in the original list except the element at that position. Algorithm steps: * Initialize an empty result list. * Iterate through the original list. * For each element: * Calculate the product of all other elements. * Append the calculated product to the result list. * Return the result list. **Note**: You should not use division for this task. Try to achieve it in O(n) time complexity using left and right product arrays. ___ # Examples ``` input = [1, 2, 3, 4] result = [24, 12, 8, 6] input = [2, 5, 6] result = [30, 12, 10] ``` ___ Give an edge case where the input list can cause issues in the function implementation.","solution":"def product_of_all_except_self(nums): Returns a new list where each element is replaced by the product of all other elements in the original list except the element at that position. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n left_accumulator = 1 for i in range(n): left_products[i] = left_accumulator left_accumulator *= nums[i] right_accumulator = 1 for i in range(n - 1, -1, -1): right_products[i] = right_accumulator right_accumulator *= nums[i] for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"A company has a fleet of vehicles that are all equipped with GPS trackers. These vehicles are out on the road performing deliveries. Each vehicle records its position at a given time in the format `(latitude, longitude)`. The company wants to analyze the movements of these vehicles to identify any potential issues in the delivery process. Your task is to write a function that, given a list of recorded positions of a vehicle, returns `True` if the vehicle has revisited any previously recorded position (excluding the current one), or `False` otherwise. **Input** - The input is a list of tuples, where each tuple contains two floats representing the latitude and longitude of a recorded position, respectively. **Output** - The output should be a boolean value: `True` if the vehicle has revisited any previously recorded position, `False` otherwise. **Examples** Input: ``` [(40.712776, -74.005974), (34.052235, -118.243683), (40.712776, -74.005974), (51.507351, -0.127758)] ``` Output: ``` True ``` Input: ``` [(37.774929, -122.419416), (34.052235, -118.243683), (51.507351, -0.127758), (48.856614, 2.352222)] ``` Output: ``` False ``` **Note** - The list of positions can be of varying lengths. - The comparison should consider the exact values of the floats for latitude and longitude.","solution":"def has_revisited_position(positions): Returns True if any position is revisited in the given list of positions. :param positions: List of tuples, where each tuple contains two floats (latitude, longitude). :return: Boolean, True if a position is revisited, False otherwise. visited_positions = set() for position in positions: if position in visited_positions: return True visited_positions.add(position) return False # Example usage: # print(has_revisited_position([(40.712776, -74.005974), (34.052235, -118.243683), (40.712776, -74.005974), (51.507351, -0.127758)])) # True # print(has_revisited_position([(37.774929, -122.419416), (34.052235, -118.243683), (51.507351, -0.127758), (48.856614, 2.352222)])) # False"},{"question":"You are managing a system that monitors temperatures from various sensors. Each temperature reading consists of an integer value and a timestamp. Design a system that supports the following operations: * addReading(t, v): add a temperature reading with timestamp t and value v * average(t1, t2): calculate the average temperature of all readings recorded in the time interval [t1, t2] The system must handle multiple temperature readings and calculate averages quickly even with a large number of entries. Constraints * The number of operations leq 1,000,000 * 0 leq t leq 1,000,000,000 * -100 leq v leq 100 * Timestamp t is strictly increasing in each addReading operation Input Multiple operations to the system are given. Each operation is provided in a line with the following format: - \\"addReading t v\\" for adding a temperature reading with timestamp t and value v - \\"average t1 t2\\" for calculating the average temperature between timestamps t1 and t2, inclusive - The input ends with \\"end\\" Output For each \\"average\\" operation, print the average temperature in a line, rounded to 2 decimal places. Example Input addReading 1 30 addReading 2 25 addReading 3 28 average 1 2 addReading 4 32 average 1 4 average 3 4 end Output 27.50 28.75 30.00","solution":"class TemperatureMonitor: def __init__(self): self.readings = [] def addReading(self, t, v): self.readings.append((t, v)) def average(self, t1, t2): total_temp = 0 count = 0 for t, v in self.readings: if t1 <= t <= t2: total_temp += v count += 1 return round(total_temp / count, 2) if count > 0 else 0.00 def process_input(input_lines): tm = TemperatureMonitor() outputs = [] for line in input_lines: if line.startswith(\\"addReading\\"): _, t, v = line.split() tm.addReading(int(t), int(v)) elif line.startswith(\\"average\\"): _, t1, t2 = line.split() avg_temp = tm.average(int(t1), int(t2)) outputs.append(f\\"{avg_temp:.2f}\\") elif line.strip() == \\"end\\": break return outputs"},{"question":"Given an array of integers, you must perform a series of operations to make all elements the same. In one operation, you can pick any two distinct elements in the array and replace one of them with the value of the other. Your task is to determine the minimum number of operations required to make all elements in the array identical. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 le n le 10^5), the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^5), the elements of the array. The sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print one integer — the minimum number of operations required to make all elements in the array the same. -----Example----- Input: 3 4 1 2 3 4 5 1 1 3 3 3 6 4 5 6 7 7 7 Output: 3 2 3","solution":"def min_operations_to_make_elements_equal(test_cases): results = [] for case in test_cases: n = case[0] array = case[1] frequency = {} for num in array: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 max_freq = max(frequency.values()) min_operations = n - max_freq results.append(min_operations) return results"},{"question":"You are given a large grid with dimensions `n x m`, where `n` represents the height and `m` represents the width of the grid. Each cell in the grid is initially empty, and its status can be marked as either blocked or free. The grid\'s rows are indexed from `1` to `n` from top to bottom, and columns are indexed from `1` to `m` from left to right. You have a start point at the top-left corner of the grid `(1, 1)` and two types of operations you can perform on the grid: - A **Vertical Block** operation, which blocks all cells in a specified column. You can execute this operation by providing the column index. - A **Horizontal Block** operation, which blocks all cells in a specified row. You can execute this operation by providing the row index. Your goal is to determine the minimum number of block operations required such that there is no path from the top-left corner `(1, 1)` to the bottom-right corner `(n, m)`. A path is defined as a sequence of adjacent cells (horizontally or vertically) that are all free. ___Input___ - The first line contains two integers `n` and `m` (`1 <= n, m <= 10^5`) — the dimensions of the grid. - The second line contains two integers `v` and `h` (`0 <= v, h <= 10^5`) — the number of vertical and horizontal block operations you have available. - The third line contains `v` distinct integers, each representing a column index where a vertical block operation can be applied. - The fourth line contains `h` distinct integers, each representing a row index where a horizontal block operation can be applied. ___Output___ Print one integer — the minimum number of block operations required to ensure there is no path from the top-left corner to the bottom-right corner of the grid. ---Examples--- ___Input___: ``` 5 5 3 2 2 4 5 3 5 ``` ___Output___: ``` 1 ``` ___Input___: ``` 4 4 2 2 1 3 2 4 ``` ___Output___: ``` 2 ``` ___Input___: ``` 1 1 1 1 1 1 ``` ___Output___: ``` 1 ``` ___Note___: In the first example, using a horizontal block operation in row 3 will block any path from the top-left to the bottom-right corner, as the blocked row divides the grid into two disconnected parts. In the second example, we need at least two block operations. Blocking rows 2 and 4, or rows 1 and 3, will ensure no path exists. In the third example, the grid is only 1x1, so a single block operation in either the sole row or column suffices.","solution":"def min_block_operations(n, m, v, h, vertical_blocks, horizontal_blocks): # If there are blocks in both a column and a row, 1 operation can cut off the path if v > 0 and h > 0: return 1 # If there are only column blocks or row blocks, then the minimum would be the only option left elif v > 0: # Only vertical blocks present return 1 if v >= 1 else 0 elif h > 0: # Only horizontal blocks present return 1 if h >= 1 else 0 # If no blocks at all else: return 0"},{"question":"# Well-Formed Parentheses Checker Parentheses are used in many programming languages to denote different levels of precedence, function calls, and so on. In this problem, your task is to check if a given string containing only parentheses is \\"well-formed.\\" A string is considered well-formed if: 1. Every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. 2. The pairs of parentheses are properly nested. Implement a function `is_well_formed(s)` that takes a string `s` consisting only of the characters \'(\' and \')\' and returns `True` if the string is well-formed and `False` otherwise. Examples: ``` is_well_formed(\\"()\\") should return True is_well_formed(\\"(())\\") should return True is_well_formed(\\"(()\\") should return False is_well_formed(\\")(\\") should return False ```","solution":"def is_well_formed(s): Checks if the given string of parentheses is well-formed. A string is well-formed if every opening parenthesis \'(\' has a matching closing parenthesis \')\' and the pairs are properly nested. Args: s (str): The input string containing only \'(\' and \')\'. Returns: bool: True if the string is well-formed, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"You have been tasked with writing a function that will determine if a given string contains a valid mathematical expression based on certain rules. The rules for the expression are as follows: 1. **Numbers**: A number can be a positive integer or a decimal. Decimals must contain a digit before and after the decimal point (e.g., 1.0, 0.5, 123.456). 2. **Operators**: The valid operators are +, -, *, / for addition, subtraction, multiplication, and division. Operators must be surrounded by valid numbers (no consecutive operators, no leading or trailing operators). 3. **Parentheses**: Parentheses must be properly balanced and can be used to alter the default precedence of operators. 4. **Spaces**: The expression may contain spaces, which should be ignored during validation. # Input The function will receive a string input representing the mathematical expression. # Output The function should return: - `Valid expression` if the expression follows the rules. - `Invalid expression` if the expression does not follow the rules. # Examples ``` Input: \\"3 + 5\\" Output: Valid expression Input: \\"10.2 * (2 + 3)\\" Output: Valid expression Input: \\"(4 + 5) * 3.1\\" Output: Valid expression Input: \\"123..45\\" Output: Invalid expression Input: \\"2 + - 3\\" Output: Invalid expression ``` # Constraints - The input string can have any length. - All numbers in the expression are positive.","solution":"import re def is_valid_expression(expression): Determines if the given string is a valid mathematical expression based on defined rules. Rules: - A number can be a positive integer or a decimal. - Valid operators are +, -, *, /. - Operators must be surrounded by valid numbers. - Parentheses must be properly balanced. - Spaces should be ignored. Parameters: expression (str): String input representing the mathematical expression. Returns: str: \\"Valid expression\\" or \\"Invalid expression\\" # Remove all spaces expression = expression.replace(\' \', \'\') # Check for invalid characters if not re.match(r\'^[d.+-*/()]*\', expression): return \\"Invalid expression\\" # Regular expression patterns to match valid numbers and operators valid_number = r\'(d+(.d+)?|.d+)\' valid_operator = r\'[+-*/]\' token_pattern = re.compile(rf\'({valid_number}|{valid_operator}|(|))\') # Tokenize the expression tokens = token_pattern.findall(expression) tokens = [token[0] for token in tokens] # Check if the tokens sequence is valid if not tokens: return \\"Invalid expression\\" # Validate balanced parentheses def balanced_parentheses(tokens): balance = 0 for token in tokens: if token == \'(\': balance += 1 elif token == \')\': balance -= 1 if balance < 0: return False return balance == 0 if not balanced_parentheses(tokens): return \\"Invalid expression\\" # Validate the sequence of tokens def valid_sequence(tokens): prev_token = \'\' for i, token in enumerate(tokens): if re.match(valid_number, token): if prev_token and re.match(valid_number, prev_token): return False elif re.match(valid_operator, token): if i == 0 or i == len(tokens) - 1: return False if re.match(valid_operator, prev_token) or prev_token == \'(\': return False elif token == \'(\': if prev_token and re.match(valid_number, prev_token): return False elif token == \')\': if prev_token == \'(\' or re.match(valid_operator, prev_token): return False prev_token = token return True if not valid_sequence(tokens): return \\"Invalid expression\\" return \\"Valid expression\\""},{"question":"Given a binary tree, write an algorithm to find the path with the maximum sum. The path can be from any node to any node (i.e., the path does not necessarily need to go through the root). Example 1: Input: 1 / 2 3 Output: 6 Explanation: The path with the maximum sum is 2 -> 1 -> 3, and the sum is 6. Example 2: Input: -10 / 9 20 / 15 7 Output: 42 Explanation: The path with the maximum sum is 15 -> 20 -> 7, and the sum is 42. Your task: Complete the method maxPathSum() that takes the root of the binary tree as an argument and returns an integer representing the maximum path sum in the binary tree. Constraints: 1 <= T <= 200 1 <= N <= 1000 -1000 <= Node Value <= 1000","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPathSum(root): Returns the maximum path sum of a binary tree. max_sum = float(\'-inf\') def helper(node): nonlocal max_sum if not node: return 0 # Recur for left and right subtree left = max(helper(node.left), 0) # We only add positive contributions right = max(helper(node.right), 0) # We only add positive contributions # Compute the path value that passes through the node current_sum = node.val + left + right # Update global max_sum if current_sum is greater max_sum = max(max_sum, current_sum) # Return the value for parent function call return node.val + max(left, right) helper(root) return max_sum"},{"question":"A large bookstore chain wants to streamline their inventory system and they need your help. The store carries a wide range of books, each with a unique identifier. Recently, they noticed that some books are very popular and sell out quickly, while others rarely leave the shelves. To better manage restocking, they want to keep track of the first book that runs out of stock on a given day. Help them by writing a program that simulates this process. You are given a sequence of book identifiers representing sales in the order of transactions throughout the day. Your task is to find the first book that becomes out of stock based on the sales. Each book starts with a stock of 1, meaning they will sell out after one sale. Input The input consists of two lines: 1. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of sales recorded. 2. The second line contains n integers, each representing a book identifier for a sold book. Books are identified by integers, and all sold books are initially assumed to be in stock. Output Output the identifier of the first book that becomes out of stock. Examples Input 5 1 2 1 3 2 Output 1 Input 4 5 6 5 6 Output 5 Input 3 4 4 2 Output 4","solution":"def first_book_out_of_stock(n, sales): Returns the identifier of the first book that becomes out of stock. Parameters: n (int): number of sales. sales (list of int): list of book identifiers representing each sale. Returns: int: The identifier of the first book that becomes out of stock. stock = {} for book_id in sales: if book_id in stock: return book_id stock[book_id] = 1 return None # This should not happen with the given problem constraints"},{"question":"You are given an array of n integers. Each integer can be either a positive integer, zero, or a negative integer. You need to process q queries. Each query is described by two integers l_j and r_j, representing a subarray from index l_j to r_j (inclusive). For each query, you must find the maximum absolute value in the specified subarray. -----Input----- The first line contains two integers n and q (1 le n, q le 100,000) — the number of elements in the array and the number of queries. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the elements of the array. Each of the next q lines contains two integers l_j and r_j (1 le l_j le r_j le n) — the range for the j-th query. -----Output----- Print q integers — the answers for each query, each on a new line. -----Examples----- Input 8 3 -3 7 -2 10 -5 7 3 -4 1 4 2 6 3 8 Output 10 10 10 -----Note----- Description of the sample: For the first query, the subarray is [-3, 7, -2, 10] and the maximum absolute value is 10. For the second query, the subarray is [7, -2, 10, -5, 7] and the maximum absolute value is 10. For the third query, the subarray is [-2, 10, -5, 7, 3, -4] and the maximum absolute value is 10.","solution":"def max_absolute_value_in_subarrays(arr, queries): Returns a list of the maximum absolute values from given subarrays. Parameters: arr (list of int): The input array of integers. queries (list of tuple): A list of tuples where each tuple contains two integers representing the range [l_j, r_j]. Returns: list of int: The maximum absolute value from each subarray. results = [] for l, r in queries: # Extract the subarray subarray = arr[l-1:r] # Find the maximum absolute value in the subarray max_abs_val = max(abs(num) for num in subarray) results.append(max_abs_val) return results"},{"question":"Given two arrays A and B of lengths N and M respectively. Your task is to merge these two arrays into a single sorted array in non-decreasing order. Print the resulting merged array. Example 1: Input: A = [5, 1, 3], B = [2, 4, 6] Output: [1, 2, 3, 4, 5, 6] Explanation: Merging A and B to get [5, 1, 3, 2, 4, 6] and then sorting it to [1, 2, 3, 4, 5, 6]. Example 2: Input: A = [10, 5], B = [7, 3, 1] Output: [1, 3, 5, 7, 10] Explanation: Merging A and B to get [10, 5, 7, 3, 1] and then sorting it to [1, 3, 5, 7, 10]. Your Task: You dont need to read input or print anything. Complete the function mergeSortArrays() which takes A and B as input parameters and returns the merged and sorted array final_arr. Expected Time Complexity: O((N+M)log(N+M)) Expected Auxiliary Space: O(N+M) Constraints: 1 <= N, M <= 1000 1 <= A[i], B[i] <= 10000","solution":"def mergeSortArrays(A, B): Merges two lists A and B into a single sorted list in non-decreasing order. :param A: List of integers. :param B: List of integers. :return: A single merged and sorted list. # Combine both lists combined = A + B # Sort the combined list combined.sort() return combined"},{"question":"Given an array of integers, write a function that returns an array of integers representing the length of the longest increasing subsequence (LIS) that ends with each respective element of the original array. The LIS is a subsequence that is strictly increasing. For example, given the array [3, 10, 2, 1, 20], the function should return [1, 2, 1, 1, 3] because the longest increasing subsequences ending at each of the elements are [3], [3, 10], [2], [1], and [1, 20]. You can assume the input array has at least one element and no more than 1000 elements. Note: The function should aim for a time complexity better than O(n^2), where n is the number of elements in the input array. Function Signature: ```python def length_of_lis_ending_at_each_element(arr: List[int]) -> List[int]: # Your code here ```","solution":"from typing import List def length_of_lis_ending_at_each_element(arr: List[int]) -> List[int]: Returns an array where each element at index i represents the length of the longest increasing subsequence ending with arr[i]. if not arr: return [] n = len(arr) lis_length = [1] * n # Initialize the LIS lengths to 1 for every element tails = [] # To store the end elements of the LIS of various lengths for i in range(n): # Binary search for the location of arr[i] in tails low, high = 0, len(tails) while low < high: mid = (low + high) // 2 if tails[mid] < arr[i]: low = mid + 1 else: high = mid # If tails doesn\'t have enough elements, append the new one if low == len(tails): tails.append(arr[i]) else: tails[low] = arr[i] lis_length[i] = low + 1 return lis_length"},{"question":"You are given a grid with R rows and C columns, where each cell in the grid has a specific height value. A path in the grid is defined as a sequence of cells starting from the top-left cell (1,1) to the bottom-right cell (R,C). You can move from a cell to its neighboring cell in the right, down, left, or up direction. The difficulty of a path is defined as the maximum absolute difference in height between any two consecutive cells in the path. Your task is to find the minimum possible difficulty of a path from the top-left cell to the bottom-right cell. Input - The first line contains two integers R and C (1 ≤ R, C ≤ 100), the number of rows and columns in the grid. - Each of the next R lines contains C integers denoting the height of each cell in the grid. The height values are non-negative integers not exceeding 1000. Output - A single integer representing the minimum possible difficulty of a path from the top-left to the bottom-right cell. Example Input 3 3 8 4 7 6 1 3 2 9 5 Output 4 Explanation In the example grid, one possible path with minimum difficulty is (8 → 6 → 2 → 9 → 5) where the maximum difference in heights between any two consecutive cells is 4. Another such path is (8 → 6 → 1 → 3 → 5). Therefore, the minimum difficulty of a path from (1,1) to (3,3) is 4.","solution":"import heapq def minimum_difficulty(R, C, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def in_bounds(x, y): return 0 <= x < R and 0 <= y < C min_heap = [(0, 0, 0)] max_difficulty = [[float(\'inf\')] * C for _ in range(R)] max_difficulty[0][0] = 0 while min_heap: diff, x, y = heapq.heappop(min_heap) if x == R-1 and y == C-1: return diff for dx, dy in directions: nx, ny = x + dx, y + dy if in_bounds(nx, ny): current_diff = max(diff, abs(grid[x][y] - grid[nx][ny])) if current_diff < max_difficulty[nx][ny]: max_difficulty[nx][ny] = current_diff heapq.heappush(min_heap, (current_diff, nx, ny)) return -1 def read_input(): R, C = map(int, input().split()) grid = [] for _ in range(R): grid.append(list(map(int, input().split()))) return R, C, grid # If you want to test the function interactively, uncomment the following lines: # R, C, grid = read_input() # print(minimum_difficulty(R, C, grid))"},{"question":"Palindrome Detection - Bug Fixing #7 Oh no, Sarah\'s palindrome detector isn\'t performing well! Your task is to fix the `IsPalindrome` function to correctly identify if a given string is a palindrome. A palindrome reads the same forwards and backwards, ignoring cases and non-alphanumeric characters. Function Signature: `public static bool IsPalindrome(string input)` **Example**: ``` IsPalindrome(\\"A man, a plan, a canal, Panama!\\") => true IsPalindrome(\\"race a car\\") => false ```","solution":"def is_palindrome(input): Checks if the given string is a palindrome, ignoring case and non-alphanumeric characters. # Filter out non-alphanumeric characters and convert to lower case cleaned_input = \'\'.join(char.lower() for char in input if char.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned_input == cleaned_input[::-1]"},{"question":"You are given an n × m grid of integers. Your task is to identify the size of the largest rectangle within this grid where all the numbers in the rectangle are the same. -----Input----- The first line of input contains integers n and m (1 ≤ n, m ≤ 50) — the number of rows and the number of columns correspondingly. The next n lines of input contain m integers each, representing the numbers in the grid. Each integer is between 0 and 9 inclusive. -----Output----- Output a single integer — the area of the largest rectangle in the grid where all numbers are the same. -----Examples----- Input 2 3 1 1 1 1 1 1 Output 6 Input 4 4 1 2 3 4 5 1 1 1 1 1 1 1 1 1 2 2 Output 6 -----Note----- In the second example, the largest rectangle with all numbers the same consists of six cells with the number 1. The rectangle spans from the second row, second column to the fourth row, fourth column.","solution":"def largest_uniform_rectangle(n, m, grid): def largest_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[index] >= histogram[stack[-1]]: stack.append(index) index += 1 else: top = stack.pop() area = histogram[top] * ((index - stack[-1] - 1) if stack else index) max_area = max(max_area, area) while stack: top = stack.pop() area = histogram[top] * ((index - stack[-1] - 1) if stack else index) max_area = max(max_area, area) return max_area max_rectangle = 0 for num in range(10): histograms = [[1 if cell == num else 0 for cell in row] for row in grid] for i in range(1, n): for j in range(m): if histograms[i][j]: histograms[i][j] += histograms[i - 1][j] for row in histograms: max_rectangle = max(max_rectangle, largest_histogram_area(row)) return max_rectangle"},{"question":"Alex and his friends love to play a game called \\"Bead Collection\\". The game involves collecting beads scattered in a linear path where each bead has a weight associated with it. They have an unlimited capacity bag to collect the beads. However, there is a tricky part: once they start collecting a bead at position \'i\', they can only move forward to collect beads and cannot go back to any previous positions. Alex wants to know the maximum sum of weights of beads they can collect, provided they start at some position \'i\' and collect beads until the end of the path. Write a function that calculates the maximum sum of weights Alex and his friends can collect if they start from some position \'i\'. Input Format: The first line contains an integer N i.e., number of beads. Next line will contain N integers, w_1, w_2, ..., w_N, representing the weights of the beads in sequential order. Output Format: A single integer which is the maximum sum of the weights of the beads Alex and his friends can collect starting from some position. Constraints: 1≤N≤10^5 -10^4 ≤ w_i ≤ 10^4, where i ∈ [1, N] SAMPLE INPUT 6 -1 2 3 -5 4 6 SAMPLE OUTPUT 10 Explanation Starting from the bead at position 2 (0-indexed), we can collect the beads with weights [2, 3, -5, 4, 6] resulting in a total sum of 10, which is the maximum sum we can get by collecting beads from any starting position until the end.","solution":"def maximum_sum_of_beads(N, weights): Calculates the maximum sum of weights of beads collected starting from some position to the end. :param N: An integer representing the number of beads. :param weights: A list of integers representing the weights of the beads in sequential order. :return: An integer representing the maximum sum of weights. max_sum_ending_here = [0] * N max_sum_ending_here[-1] = weights[-1] for i in range(N-2, -1, -1): max_sum_ending_here[i] = max(weights[i], weights[i] + max_sum_ending_here[i + 1]) return max(max_sum_ending_here) # Example Usage # N = 6 # weights = [-1, 2, 3, -5, 4, 6] # print(maximum_sum_of_beads(N, weights)) # Output: 10"},{"question":"You are working in a packaging company where you are responsible for arranging items in a rectangular box. Each item has a unique weight, and your task is to arrange them to balance the box as evenly as possible. The rules are straightforward: you can only place one item in each cell of the box, and you cannot skip any cells. Given a list of weights of n items and the dimensions of the box r (rows) and c (columns), write a program to arrange the items in the box such that the difference between the maximum weight and the minimum weight in any row and any column is minimized. You can assume that the number of items is exactly r times c. -----Input----- - The first line contains two integers 1 leq r, c leq 100 denoting the dimensions of the box. - The second line contains r times c integers 1 leq w_1, w_2, ldots, w_{r times c} leq 10^9, the weights of the items. -----Output----- - Output r lines each containing c integers. The j-th integer in the i-th line denotes the weight placed in the cell located at the i-th row and j-th column of the box. -----Example----- Sample Input 1: 2 3 1 6 4 2 5 3 Sample Output 1: 1 3 5 2 4 6 Sample Input 2: 3 3 5 1 3 6 2 8 7 4 9 Sample Output 2: 1 2 3 4 5 6 7 8 9","solution":"def arrange_items_in_box(r, c, weights): Arranges items in a rectangular box such that the difference between the maximum weight and the minimum weight in any row and any column is minimized. Args: r (int): Number of rows in the box. c (int): Number of columns in the box. weights (list of int): Weights of the items. Returns: list of list of int: Arranged weights in the box. # Sort the weights to distribute the weights evenly in the box sorted_weights = sorted(weights) # Create the box with r rows and c columns box = [[0] * c for _ in range(r)] # Fill the box in a row-major order index = 0 for i in range(r): for j in range(c): box[i][j] = sorted_weights[index] index += 1 return box # Example usage: # r, c = 2, 3 # weights = [1, 6, 4, 2, 5, 3] # print(arrange_items_in_box(r, c, weights))"},{"question":"You are given a list of integers representing the prices of items in a store and a budget. You want to determine the maximum number of items you can purchase without exceeding your budget. Write a function `maxItems` that takes in two parameters: a list of integers `prices` and an integer `budget`. The function should return the maximum number of items you can buy. Constraints: - Each price in the list `prices` will be a positive integer. - The length of `prices` will be at least 1 and at most 1000. - The `budget` will be a non-negative integer. Example 1: ```python maxItems([1, 12, 5, 111, 200, 1000, 10], 50) # returns 4 ``` Explanation: You can buy the items with prices 1, 12, 5, and 10 for a total of 28. Example 2: ```python maxItems([20, 10, 5, 30, 100], 35) # returns 3 ``` Explanation: You can buy the items with prices 10, 5, and 20 for a total of 35. Example 3: ```python maxItems([4, 5, 3, 2, 1], 10) # returns 4 ``` Explanation: You can buy the items with prices 1, 2, 3, and 4 for a total of 10.","solution":"def maxItems(prices, budget): Determines the maximum number of items that can be purchased without exceeding the budget. Parameters: prices (list of int): List of prices for the items. budget (int): Available budget. Returns: int: Maximum number of items that can be purchased. prices.sort() total_spent = 0 count = 0 for price in prices: if total_spent + price <= budget: total_spent += price count += 1 else: break return count"},{"question":"# Task: Problem Statement: Given a non-negative integer `k`, write a function that returns the `k-th` smallest prime number. # Input: - A single integer `k`. # Output: - Return the `k-th` smallest prime number as an integer. # Example: - `getKthPrime(1)` should return `2` - `getKthPrime(3)` should return `5` - `getKthPrime(10)` should return `29` # Constraints: - `1 <= k <= 10^5` # Notes: The generated list of prime numbers should be precomputed once and reused for multiple function calls to optimize performance. The function should be efficient enough to handle the upper constraint values.","solution":"def sieve_of_eratosthenes(n): Returns a list of all primes less than or equal to n. primes = [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for p in range(2, n + 1): if is_prime[p]: primes.append(p) for multiple in range(p * p, n + 1, p): is_prime[multiple] = False return primes # Precompute primes up to 10^6 prime_limit = 1000000 primes = sieve_of_eratosthenes(prime_limit) def getKthPrime(k): Returns the k-th smallest prime number. if k < 1 or k > len(primes): return None # Invalid input return primes[k - 1]"},{"question":"Mark loves to play video games, and he has recently started designing his own level-based game. In his game, each level is represented by a unique integer score. He wants to implement a feature where bonuses are awarded to players if they achieve certain scores that are multiples of a given number. Given an integer `P` representing a score, and another integer `M` representing the multiple, your task is to determine the total number of unique scores from 1 to P (inclusive) that are multiples of M. For example, if `P` is 10 and `M` is 3, the multiples of 3 in this range are 3, 6, and 9, so the result should be 3. Input format: - The first line contains T, the number of test cases. - The next T lines each contain two integers P and M. Output format: - For each test case, output a single line containing the number of unique scores that are multiples of M. Constraints: 1 ≤ T ≤ 10^5 1 ≤ P ≤ 10^9 1 ≤ M ≤ 10^5 SAMPLE INPUT 3 10 3 15 5 20 7 SAMPLE OUTPUT 3 3 2 Explanation: For the first test case, the multiples of 3 between 1 and 10 are 3, 6, and 9. For the second test case, the multiples of 5 between 1 and 15 are 5, 10, and 15. For the third test case, the multiples of 7 between 1 and 20 are 7 and 14.","solution":"def count_multiples(T, test_cases): Returns the number of unique scores that are multiples of M for each test case. Parameters: T (int): number of test cases test_cases (list of tuples): each tuple contains two integers P and M Returns: list of int: count of multiples for each test case results = [] for P, M in test_cases: results.append(P // M) return results"},{"question":"Alice is training for a marathon. She runs on a straight path every day, and she records the distances she runs in a diary. One day, she realized she lost the diary but found a temporary log containing information about some of her runs over the past month. Alice wants to know the maximum distance she ran continuously for any number of consecutive days. Since some of the temporary log entries might be missing or incorrect, she prefers to work with subsets of these distances. Given an array of distances Alice ran over some days, determine the maximum sum of any contiguous subarray. -----Input----- The first line of the input contains a single integer n (1 leq n leq 100,000), the number of days recorded. The second line contains n integers d_1, d_2, ..., d_n (-10^4 leq d_i leq 10^4), the distances Alice ran on these days. Some of these distances may be negative or zero, indicating incorrect log entries. -----Output----- Print a single integer, the maximum sum of any contiguous subarray. -----Examples----- Input 5 1 -2 3 4 -1 Output 7 Input 6 -1 2 3 -4 5 -3 Output 6 -----Explanation----- In the first example, the subarray with the maximum sum is [3, 4], giving a sum of 7. In the second example, the subarray with the maximum sum is [2, 3, -4, 5], giving a sum of 6.","solution":"def max_subarray_sum(n, distances): Given an array of distances Alice ran over some days, find the maximum sum of any contiguous subarray. Parameters: n (int): Number of days recorded. distances (list of int): List of distances run on each day. Returns: int: The maximum sum of any contiguous subarray. if n == 0: return 0 max_sum = current_sum = distances[0] for i in range(1, n): current_sum = max(distances[i], current_sum + distances[i]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a Binary Search Tree (BST) with integer values. Write a function to convert this BST into a sorted doubly linked list in place. The left and right pointers in the tree should be converted to the previous and next pointers in the doubly linked list respectively. Example 1: Input: 10 / 6 14 / / 4 8 12 16 Output: 4 6 8 10 12 14 16 Explanation: The in-order traversal of the given BST yields 4, 6, 8, 10, 12, 14, 16. The doubly linked list should reflect this order. Example 2: Input: 1 3 / 2 Output: 1 2 3 Explanation: The in-order traversal of the given BST yields 1, 2, 3. The doubly linked list should reflect this order. Your Task: You do not need to read input or print anything. Your task is to complete the function `bstToDoublyList` which takes the root of the BST as input and converts it to an in-place sorted doubly linked list. Expected Time Complexity: O(N) where N is the number of nodes in the BST. Expected Auxiliary Space: O(H) where H is the height of the given BST. Constraints: 1 <= Number of nodes <= 10^4 1 <= Node value <= 10^7","solution":"class Node: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def bstToDoublyList(root): Function to convert a BST to a sorted doubly linked list in place. if not root: return None # Helper function to handle the conversion def convert(node): nonlocal head, prev if not node: return # Recur on the left subtree convert(node.left) # Now handle the current node if prev: prev.right = node node.left = prev else: head = node prev = node # Recur on the right subtree convert(node.right) head, prev = None, None convert(root) return head"},{"question":"A text editor is a common application used to write and edit text. One important feature is tracking the cursor position and performing operations based on that position. Given the following operations, write functions to simulate the text editor\'s cursor behavior: - **move_left()**: Moves the cursor one character to the left, if possible. - **move_right()**: Moves the cursor one character to the right, if possible. - **insert(char)**: Inserts a character at the current cursor position. The cursor should move one character to the right after the insertion. - **get_text()**: Returns the current text as a string. Implement a `TextEditor` class with these methods to correctly manage the cursor position and text modifications. You need to handle input efficiently, particularly insertions and cursor movements. The text editor should perform all operations in O(1) or O(log N) time complexity, where N is the length of the text. Here is the interface definition: ```python class TextEditor: def __init__(self): Initializes the text editor with an empty string. pass def move_left(self): Moves the cursor one character to the left. pass def move_right(self): Moves the cursor one character to the right. pass def insert(self, char): Inserts the given character at the current cursor position. pass def get_text(self): Returns the text in the editor as a string. return \\"\\" ``` # Example Usage: ```python editor = TextEditor() editor.insert(\'a\') editor.insert(\'b\') editor.insert(\'c\') editor.move_left() editor.insert(\'d\') print(editor.get_text()) # Output should be \\"abdc\\" ``` # Constraints: - The text operations should handle up to (10^6) characters efficiently. - Each character insertion and cursor movement should be optimized for time complexity.","solution":"class TextEditor: def __init__(self): Initializes the text editor with an empty string. self.left_stack = [] self.right_stack = [] def move_left(self): Moves the cursor one character to the left. if self.left_stack: self.right_stack.append(self.left_stack.pop()) def move_right(self): Moves the cursor one character to the right. if self.right_stack: self.left_stack.append(self.right_stack.pop()) def insert(self, char): Inserts the given character at the current cursor position. self.left_stack.append(char) def get_text(self): Returns the text in the editor as a string. return \'\'.join(self.left_stack) + \'\'.join(reversed(self.right_stack))"},{"question":"A group of researchers is analyzing a forest ecosystem where trees can communicate through a network of roots capable of sending signals to one another. Each tree represents a node in a network, and each root connection between a pair of trees represents an edge. The researchers are interested in identifying isolated groups of trees that cannot communicate with any other trees outside their group. Your task is to determine the number of such isolated groups (connected components) in the forest. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 100000, 0 ≤ m ≤ 200000), where n is the number of trees (nodes) and m is the number of root connections (edges). The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating that there is a root connection between tree u and tree v. Output Print a single integer representing the number of isolated groups of trees in the forest. Examples Input 5 3 1 2 2 3 4 5 Output 2 Input 4 2 1 2 3 4 Output 2 Input 6 0 Output 6 Note In the first example, there are two isolated groups of trees: {1, 2, 3} and {4, 5}. In the second example, there are two isolated groups of trees: {1, 2} and {3, 4}. In the third example, each tree is isolated, so there are 6 isolated groups, each consisting of a single tree.","solution":"def find_connected_components(n, connections): from collections import defaultdict, deque def bfs(start, visited, adj_list): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in adj_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) adj_list = defaultdict(list) for u, v in connections: adj_list[u].append(v) adj_list[v].append(u) visited = set() components = 0 for node in range(1, n + 1): if node not in visited: bfs(node, visited, adj_list) components += 1 return components"},{"question":"Given a string, write a function that returns a dictionary with each word as the key and its length as the value, excluding punctuation. Ignore case while processing the words and maintain the original case in the output dictionary. Example: ```python word_lengths(\\"Hello world!\\") #=> {\\"Hello\\": 5, \\"world\\": 5} word_lengths(\\"Coding is fun, isn\'t it?\\") #=> {\\"Coding\\": 6, \\"is\\": 2, \\"fun\\": 3, \\"isn\'t\\": 5, \\"it\\": 2} ```","solution":"import string def word_lengths(text): Returns a dictionary with each word as the key and its length as the value, excluding punctuation. Ignore case while processing the words and maintain the original case in the output dictionary. translator = str.maketrans(\'\', \'\', string.punctuation) words = text.translate(translator).split() result = {word: len(word) for word in words} return result"},{"question":"Steve is organizing a hackathon and needs to design a schedule for the event, which includes a series of hackathon challenges. Each challenge has a start time and an end time that does not overlap with any other challenge. Steve wants to find out the maximum number of non-overlapping challenges he can schedule. -----Input----- The input consists of: - A single integer n (1 leq n leq 1000), the number of challenges. - Next n lines each containing two integers s_i and e_i (0 leq s_i < e_i leq 10^6), the start time and end time of the i-th challenge. It is guaranteed that the start times and end times are unique across challenges. -----Output----- Output a single integer, the maximum number of non-overlapping challenges Steve can schedule. -----Examples----- Sample Input: 4 1 3 2 5 4 6 5 7 Sample Output: 2 Explanation: The maximum number of non-overlapping challenges is 2. One possible schedule is: - Challenge 1: (1, 3) - Challenge 3: (4, 6)","solution":"def max_non_overlapping_challenges(n, challenges): Find the maximum number of non-overlapping challenges. Parameters: n (int): number of challenges challenges (list of tuples): a list where each tuple represents (start time, end time) of a challenge Returns: int: maximum number of non-overlapping challenges # Sort challenges by their end times challenges.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in challenges: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You are given a weighted undirected graph with n nodes and m edges. Each node in the graph represents a point of interest, and each edge represents a bidirectional road connecting two points with a specific cost. Your task is to design a function that will compute the minimum total cost to connect all nodes in the graph using the existing roads. This is equivalent to finding the Minimum Spanning Tree (MST) of the graph. Input - First line contains two space-separated integers n (2 ≤ n ≤ 10^5) and m (n - 1 ≤ m ≤ 2 * 10^5) — the number of nodes and edges in the graph. - The following m lines each contain three space-separated integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) — representing an edge between nodes u and v with weight w. Output - Print a single integer, the total cost of the MST. Example Input 4 5 1 2 1 1 3 4 2 3 2 2 4 6 3 4 3 Output 6 Note In the example above, the minimum spanning tree consists of edges with weights 1, 2, and 3, giving a total cost of 6.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(n, edges): result = [] # This will store the resultant MST i, e = 0, 0 # Initialize count of edges in MST and index variable edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) minimum_cost = sum([w for u, v, w in result]) return minimum_cost def minimum_spanning_tree_cost(n, m, edge_list): return kruskal_mst(n, edge_list)"},{"question":"In a coding competition, participants were given a list of numbers and asked to perform operations based on specific queries. Each query can either be an update to one of the numbers or a request to find the sum of the numbers within a specified range. Write a function to handle these queries efficiently. INPUT The first line contains two integers, n (the number of elements in the list) and q (the number of queries). The second line contains n space-separated integers representing the initial list of numbers. The next q lines contain a query in one of the following formats: - \\"update i x\\": Update the element at index i (0-based) to x. - \\"sum l r\\": Compute and return the sum of elements from index l to r (inclusive). OUTPUT For every sum query, print the result in a new line. Constraints 1 ≤ n, q ≤ 100000 1 ≤ elements of the list, x ≤ 10^9 0 ≤ i, l, r < n l ≤ r *Problem Setter:* [Your Name] SAMPLE INPUT 5 3 1 2 3 4 5 sum 1 3 update 2 10 sum 1 3 SAMPLE OUTPUT 9 16","solution":"class NumArray: def __init__(self, nums): self.n = len(nums) self.nums = nums[:] self.tree = [0] * (self.n + 1) for i in range(self.n): self._update_tree(i + 1, nums[i]) def _update_tree(self, i, val): while i <= self.n: self.tree[i] += val i += i & -i def update(self, index, val): delta = val - self.nums[index] self.nums[index] = val self._update_tree(index + 1, delta) def sum_range(self, left, right): return self._prefix_sum(right + 1) - self._prefix_sum(left) def _prefix_sum(self, i): total = 0 while i > 0: total += self.tree[i] i -= i & -i return total def handle_queries(n, q, nums, queries): num_array = NumArray(nums) results = [] for query in queries: parts = query.split() if parts[0] == \\"update\\": index = int(parts[1]) value = int(parts[2]) num_array.update(index, value) elif parts[0] == \\"sum\\": left = int(parts[1]) right = int(parts[2]) results.append(num_array.sum_range(left, right)) return results"},{"question":"In a certain research lab, there is a collection of n petri dishes and each dish contains some number of bacteria. The bacteria in each dish multiply by a growth factor of k every t hours. The scientists need to monitor the minimum amount of time required for the total bacteria count across all petri dishes to reach or exceed a specified threshold. Write a function that takes as input the initial counts of bacteria in each petri dish, the growth factor, and the threshold. The function should return the minimum number of hours required to reach or exceed the threshold. Input The input consists of multiple test cases. The first line of input is the number of test cases, t (1 ≤ t ≤ 1000). For each test case, the first line contains three integers n, k, and T (1 ≤ n ≤ 100, 2 ≤ k ≤ 10, 1 ≤ T ≤ 10^6), where n is the number of petri dishes, k is the growth factor, and T is the threshold. The second line contains n integers, a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000), representing the initial count of bacteria in each petri dish. Output For each test case, output a single integer - the minimum number of hours required to reach or exceed the threshold. Example Input 3 3 2 100 5 7 9 2 3 200 20 30 4 5 1000 100 100 100 100 Output 7 6 3 Explanation In the first test case, the initial sum of bacteria is 21. After 1 hour, the sum is 42, after 2 hours it is 84, and after 3 hours it is 168, which exceeds the threshold 100. Therefore, the minimum number of hours required is 3. In the second test case, the initial sum is 50. After 1 hour, the sum is 150, exceeding the threshold 200 in the 2nd hour, so the minimum number of hours required is 2. In the third test case, the initial sum is 400. After 1 hour, the sum is 2000, exceeding the threshold 1000, so the minimum number of hours required is 1.","solution":"def min_hours_to_reach_threshold(n, k, T, initial_counts): current_sum = sum(initial_counts) hours = 0 while current_sum < T: current_sum *= k hours += 1 return hours def process_test_cases(test_cases): results = [] for test_case in test_cases: n, k, T, initial_counts = test_case hours = min_hours_to_reach_threshold(n, k, T, initial_counts) results.append(hours) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n, k, T = map(int, lines[index].split()) initial_counts = list(map(int, lines[index + 1].split())) test_cases.append((n, k, T, initial_counts)) index += 2 return test_cases"},{"question":"Design a traffic monitoring system for a highway. The system should track the number of vehicles passing through a certain point on the highway at different times during the day. Given the recorded time (hours, minutes) and a count of vehicles passing through at that time, determine the peak hour period with the highest vehicle count and the least busy hour period with the lowest count. Each record indicates the time and the number of vehicles counted at that time. Your task is to write a program that, given a dataset with multiple recordings, outputs the peak hour period and the least busy hour period. Each hour period in the results should be represented as start time - end time in the format \\"HH:MM-HH:MM\\". Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format: m time1 count1 time2 count2 :: timem countm The first line gives the number of recordings m (1 ≤ m ≤ 1440), and the following m lines give information about the recorded observations. Information for each observation is given in the following format: HH:mm count HH represents the hour (00 ≤ HH ≤ 23) and mm represents the minutes (00 ≤ mm ≤ 59). count is the number of vehicles counted (0 ≤ count ≤ 1000). Output For each input dataset, output the following information in this format: 1st line: Peak hour period 2nd line: Least busy hour period If there are multiple peak hours or least busy hours with the same number of vehicles, output the earliest time period in the dataset. Example Input 6 08:00 50 09:30 30 10:45 60 11:15 80 12:30 50 13:00 90 5 00:00 10 01:15 5 03:30 20 04:45 15 06:00 8 0 Output 12:00-13:00 09:00-10:00 03:00-04:00 01:00-02:00","solution":"def parse_time_string(time_str): hours, minutes = map(int, time_str.split(\':\')) return hours, minutes def time_in_minutes(hours, minutes): return hours * 60 + minutes def to_time_string(minutes): hours = minutes // 60 minutes = minutes % 60 return f\\"{hours:02}:{minutes:02}\\" def find_peak_least_periods(dataset): from collections import defaultdict count_by_hour = defaultdict(int) # Dictionary to keep sum of vehicle counts by hour for time_str, count in dataset: hours, minutes = parse_time_string(time_str) count_by_hour[hours] += count peak_hour_start = min(count_by_hour.keys(), key=lambda h: (-count_by_hour[h], h)) least_busy_hour_start = min(count_by_hour.keys(), key=lambda h: (count_by_hour[h], h)) peak_hour_period = f\\"{to_time_string(peak_hour_start*60)}-{to_time_string(peak_hour_start*60+59)}\\" least_busy_hour_period = f\\"{to_time_string(least_busy_hour_start*60)}-{to_time_string(least_busy_hour_start*60+59)}\\" return peak_hour_period, least_busy_hour_period def process_inputs(input_data): input_lines = input_data.strip().split(\\"n\\") idx = 0 results = [] while idx < len(input_lines): m = int(input_lines[idx]) if m == 0: break idx += 1 dataset = [] for _ in range(m): time, count = input_lines[idx].split() count = int(count) dataset.append((time, count)) idx += 1 peak_hour_period, least_busy_hour_period = find_peak_least_periods(dataset) results.append((peak_hour_period, least_busy_hour_period)) return results"},{"question":"You are hosting a dinner party, and you want to ensure that guests sitting next to each other in a circular table know each other. There are `n` guests numbered from 1 to `n`, and you have a list of pairs of guests who know each other. You need to find an arrangement of the guests such that every guest is sitting next to someone they know, and it forms a valid circle. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of guests. - The second line contains an integer `m` (0 ≤ m ≤ 10,000), the number of pairs. - Each of the next `m` lines contains two integers `a` and `b` (1 ≤ a, b ≤ n), indicating that guests `a` and `b` know each other. Output: - Print a permutation of numbers from 1 to `n`—representing the seating arrangement of the guests such that each guest is seated next to someone they know and the circle is properly formed. If there are multiple valid arrangements, print any of them. If no valid arrangement exists, print \\"No arrangement possible\\". Example Input 6 7 1 2 2 3 3 4 4 5 5 6 6 1 1 4 Output 1 2 3 4 5 6 Input 4 2 1 2 3 4 Output No arrangement possible Input 5 5 1 2 2 3 3 4 4 5 5 1 Output 1 2 3 4 5","solution":"def find_arrangement(n, m, pairs): if n == 1: return [1] from collections import defaultdict, deque # Build the adjacency list for the graph adj = defaultdict(set) for a, b in pairs: adj[a].add(b) adj[b].add(a) # Function to test if the current path forms a valid circle def valid_circle(path, n): for i in range(n): if path[i] not in adj[path[i - 1]]: return False return True # A basic DFS to find any path that forms a cycle of length n def dfs(node, path, visited): if len(path) == n: if valid_circle(path, n): return path else: return None for neighbor in adj[node]: if neighbor not in visited: visited.add(neighbor) path.append(neighbor) res = dfs(neighbor, path, visited) if res: return res path.pop() visited.remove(neighbor) return None # Try to start DFS from each node to find a valid circle for start in range(1, n + 1): path = [start] visited = {start} res = dfs(start, path, visited) if res: return res # If no valid circle is found return \\"No arrangement possible\\" # Function to read input data and call the find_arrangement function def process_input(input_data): lines = input_data.strip().split(\\"n\\") n = int(lines[0]) m = int(lines[1]) pairs = [tuple(map(int, line.split())) for line in lines[2:2 + m]] # Call the arrangement function arrangement = find_arrangement(n, m, pairs) # Format the output if isinstance(arrangement, list): return \\" \\".join(map(str, arrangement)) else: return arrangement"},{"question":"A dragon is guarding a treasure, and you must defeat it by throwing magic potions. The health of the dragon is initially H. You have two types of potions: 1. Potion A decreases the dragon\'s health by exactly X. 2. Potion B halves the dragon\'s current health (using integer division). Your goal is to defeat the dragon with the minimum number of potions used (combining both A and B). You win when the dragon\'s health drops to 0 or lower. Determine the minimum number of potions required to defeat the dragon. -----Constraints----- - 1 leq H leq 10^{9} - 1 leq X leq 10^{9} -----Input----- Input is provided in the following format: H X -----Output----- Print the minimum number of potions required to bring the dragon\'s health to 0 or below. -----Sample Input----- 10 3 -----Sample Output----- 3 Explanation: - First use Potion B, reducing health from 10 to 5 (10 // 2). - Use Potion A, reducing health from 5 to 2 (5 - 3). - Finally, use Potion A again, reducing health from 2 to -1 (2 - 3). Thus, the minimum number of potions used is 3.","solution":"def min_potions_to_defeat_dragon(H, X): Calculates the minimum number of potions required to defeat the dragon. Parameters: H (int): Initial health of the dragon. X (int): Potency of Potion A. Returns: int: Minimum number of potions required. count = 0 while H > 0: if H // 2 < H - X: # if halving is more effective than subtracting H //= 2 else: H -= X count += 1 return count"},{"question":"You are given two strings, `str1` and `str2`. You are required to determine the length of the longest subsequence that is common to both strings. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Input Format: The first line of the input gives the number of test cases, T. T test cases follow. Each test case starts with one line containing two space-separated strings, `str1` and `str2`. Output Format: For each test case, output one line containing \\"Case #x: y\\", where x is the test case number (starting from 1) and y is the length of the longest common subsequence for that test case. Constraints: 1. 1 ≤ T ≤ 20 2. 1 ≤ length(str1), length(str2) ≤ 1000 SAMPLE INPUT 2 abcde ace abc pqr SAMPLE OUTPUT Case #1: 3 Case #2: 0 Explanation: For the first test case, \\"ace\\" is one of the longest common subsequences, so the answer is 3. For the second test case, there is no common subsequence, so the answer is 0.","solution":"def lcs_length(str1, str2): Returns the length of the longest common subsequence between str1 and str2. m, n = len(str1), len(str2) dp = [[0] * (n+1) for _ in range(m+1)] for i in range(1, m+1): for j in range(1, n+1): if str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[m][n] def find_longest_common_subsequence(T, test_cases): results = [] for idx, (str1, str2) in enumerate(test_cases): lcs_len = lcs_length(str1, str2) results.append(f\\"Case #{idx+1}: {lcs_len}\\") return results"},{"question":"Luka is playing with permutations. A permutation of length n is an array containing each number from 1 to n exactly once. Luka has an array P that is a permutation of length n. He wants to create a new array Q which is defined as follows: - For each 1 leq i leq n, Q[i] = P[P[i]] Help Luka to find the resulting array Q for the given permutation P. -----Input----- The first line contains an integer n (1 leq n leq 100) — the length of the permutation. The second line contains n distinct integers P[1], P[2], dots, P[n] (1 leq P[i] leq n) in one line, representing the permutation P. -----Output----- Print n integers Q[1], Q[2], dots, Q[n] in one line — representing the array Q. -----Examples----- Input 5 2 3 1 5 4 Output 3 1 2 4 5 Input 3 2 1 3 Output 1 2 3 Input 1 1 Output 1","solution":"def find_permutation(P): n = len(P) Q = [0] * n for i in range(n): Q[i] = P[P[i] - 1] return Q"},{"question":"Design an algorithm that receives an array of integers and a target integer. The goal is to determine if there are two distinct indices i and j in the array such that the difference between the values at these indices equals the target. Implement the function: ```python def has_pair_with_difference(arr: List[int], target: int) -> bool: ``` -----Input----- - The first argument is a list of integers `arr` of length `n` (1 le n le 10^5). - The second argument is an integer `target` (0 le target le 10^9). -----Output----- - Return `True` if such a pair exists, and `False` otherwise. -----Examples----- Input: ```python arr = [5, 20, 3, 2, 50, 80] target = 78 ``` Output: ```python True ``` Input: ```python arr = [90, 70, 20, 80, 50] target = 45 ``` Output: ```python False ``` -----Note----- In the first example, the pair `(5, 83)` exists (as 80 - 2 = 78), hence the function returns `True`. In the second example, no such pair exists for the target 45, thus the function returns `False`.","solution":"from typing import List def has_pair_with_difference(arr: List[int], target: int) -> bool: Determines if there are two distinct indices i and j in the array such that the difference between the values at these indices equals the target. Args: arr: List of integers. target: The target difference. Returns: Boolean indicating whether such a pair exists. seen = set() for value in arr: if value + target in seen or value - target in seen: return True seen.add(value) return False"},{"question":"A research scientist is working on classifying organisms based on their unique identifying characteristics. Each organism\'s characteristics are represented as non-empty strings of lowercase Latin letters. The scientist wants to create a standardized identifier for each organism by sorting the characters in each string. Your task is to help the scientist by writing a program that receives the list of characteristics and outputs the standardized list in which each characteristic is represented by its sorted version. Input The first line contains a positive integer n (1 ≤ n ≤ 100) — the number of organisms. Each of the next n lines contains a non-empty string of lowercase Latin letters representing the identifying characteristics of a single organism. (1 ≤ length of string ≤ 100). Output Output n lines, each containing the standardized identifier of the corresponding organism. Examples Input 3 bac abc cba Output abc abc abc Input 2 zxy yxz Output xyz xyz","solution":"def standardize_identifiers(n, characteristics): Returns the standardized identifiers by sorting characters in each characteristic string. Parameters: n : int The number of organisms. characteristics : list of str The list of characteristics of each organism. Returns: list of str The list of standardized identifiers. return [\'\'.join(sorted(char)) for char in characteristics] # Example usage: # n = 3 # characteristics = [\\"bac\\", \\"abc\\", \\"cba\\"] # print(standardize_identifiers(n, characteristics)) # Output should be [\\"abc\\", \\"abc\\", \\"abc\\"]"},{"question":"Alice and Bob are playing a game. The game consists of a sequence of N integers. Alice wants to find out how many integers in the sequence are greater than or equal to her chosen integer X. Help Alice determine this count for each test case. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - The first line of each test case contains two integers N and X, the length of the sequence and Alice\'s chosen integer respectively. - The second line of each test case contains N integers, representing the sequence. ------ Output Format ------ For each test case, output a single integer, the count of numbers in the sequence that are greater than or equal to X. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ X, text{sequence}[i] ≤ 1000 ----- Sample Input 1 ------ 3 5 3 1 2 3 4 5 4 10 7 8 9 10 6 5 5 5 5 5 5 5 ----- Sample Output 1 ------ 3 1 6 ------ Explanation 1 ------ Test case 1: Alice\'s chosen integer is 3. There are 3 numbers (3, 4, 5) greater than or equal to 3 in the sequence. Test case 2: Alice\'s chosen integer is 10. There is only 1 number (10) greater than or equal to 10 in the sequence. Test case 3: Alice\'s chosen integer is 5. There are 6 numbers (5, 5, 5, 5, 5, 5) greater than or equal to 5 in the sequence.","solution":"def count_greater_or_equal_numbers(t, test_cases): Returns the count of numbers greater than or equal to X in the sequence for each test case. Parameters: t (int): Number of test cases test_cases (list of tuples): Each tuple contains: - n (int): Length of the sequence - x (int): Alice\'s chosen integer - sequence (list of int): The sequence of numbers Returns: list of int: Counts of numbers greater than or equal to X for each test case res = [] for n, x, sequence in test_cases: count = sum(1 for num in sequence if num >= x) res.append(count) return res"},{"question":"You are given two integers mathbf{N} and mathbf{M}. Your task is to print the list of all possible permutations of length mathbf{M} using the integers from 1 to mathbf{N} in lexicographically sorted order. Each permutation should be printed on a new line. Input Format A single line containing integers mathbf{N} and mathbf{M} separated by a space. Constraints 1 leq M leq N leq 7 Output Format Print the permutations of length mathbf{M} using integers from 1 to mathbf{N} on separate lines. Sample Input 3 2 Sample Output 1 1 1 2 1 3 2 1 2 2 2 3 3 1 3 2 3 3 Sample Code ```python from itertools import product def main(): n, m = map(int, input().strip().split()) permutations = product(range(1, n + 1), repeat=m) for p in permutations: print(\\" \\".join(map(str, p))) if __name__ == \\"__main__\\": main() ```","solution":"from itertools import product def generate_permutations(n, m): Returns a list of all possible permutations of length m using the integers from 1 to n in lexicographically sorted order. permutations = product(range(1, n + 1), repeat=m) return [\\" \\".join(map(str, p)) for p in permutations]"},{"question":"A network administrator has a collection of devices connected in a network, represented as an undirected graph where nodes are devices and edges are direct connections between them. An important task is to determine the number of sub-networks (connected components) within this network. For a given number of devices N and a list of direct connections between them, your task is to count how many sub-networks are present. A connected component (or sub-network) in an undirected graph is a subgraph in which any two nodes are connected to each other by paths and which is connected to no additional nodes in the supergraph. -----Input----- The first line of input contains two integers N and M (1 leq N leq 10^5, 0 leq M leq 10^5), the number of devices and the number of direct connections, respectively. The next M lines each contain two integers u and v (1 leq u, v leq N), representing a direct connection between device u and device v. -----Output----- Output the number of sub-networks (connected components) in the network. -----Examples----- Sample Input 1: 5 3 1 2 2 3 4 5 Sample Output 1: 2 Sample Input 2: 4 0 Sample Output 2: 4","solution":"def count_subnetworks(N, M, connections): from collections import defaultdict, deque def bfs(node, visited, graph): queue = deque([node]) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = set() sub_networks = 0 for device in range(1, N + 1): if device not in visited: sub_networks += 1 visited.add(device) bfs(device, visited, graph) return sub_networks"},{"question":"You are given a list of intervals representing the start and end times of various tasks. Your goal is to determine if you can complete all the tasks without any overlaps, assuming you can only work on one task at a time. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of tasks. The next n lines each contain two integers s_i and e_i (0 ≤ s_i < e_i ≤ 1,000,000) — representing the start and end times of the i-th task. Output Output \\"YES\\" if it is possible to complete all tasks without any overlaps, or \\"NO\\" otherwise. Examples Input 3 1 3 2 4 3 5 Output NO Input 2 5 10 0 5 Output YES Note In the first example, the tasks [1, 3] and [2, 4] overlap, making it impossible to complete all tasks without conflicts. In the second example, the tasks [5, 10] and [0, 5] do not overlap, so it is possible to complete both tasks without conflicts.","solution":"def can_complete_tasks(intervals): Determines if it is possible to complete all tasks without any overlaps. Args: intervals: List of tuples, where each tuple contains two integers (s, e) representing the start and end times of a task. Returns: \\"YES\\" if it is possible to complete all tasks without any overlaps, otherwise \\"NO\\". # Sort intervals based on the end time intervals.sort(key=lambda x: x[1]) # Initialize the end time of the last completed task to the earliest possible time last_end_time = 0 # Iterate over the intervals to check for overlaps for start, end in intervals: if start < last_end_time: return \\"NO\\" last_end_time = end return \\"YES\\""},{"question":"You have been given a 2D grid representing a maze. The grid consists of cells that are either walls or empty spaces. The goal is to determine if there is a path from the start cell to the goal cell. - Start cell is represented by \'S\' - Goal cell is represented by \'G\' - Wall cells are represented by \'#\' - Empty spaces are represented by \'.\' You can move in four directions: up, down, left, and right. Write a program to determine if there is a path from the start cell \'S\' to the goal cell \'G\'. If a path exists, print \\"Path Exists\\". Otherwise, print \\"No Path\\". Input: - The first line contains the number of test cases. - Each test case starts with the dimensions of the grid: the number of rows and columns. - The next lines contain the grid representation. Output: - For each test case, print \\"Path Exists\\" or \\"No Path\\". SAMPLE INPUT 2 3 4 S... .#.. ..G. 5 5 S.... . ....# . ....G SAMPLE OUTPUT Path Exists No Path Explanation: Test case 1: There is a clear path from \'S\' to \'G\' through the empty spaces. Test case 2: The walls block all possible paths from \'S\' to \'G\'. The function should use Breadth-First Search (BFS) or Depth-First Search (DFS) to determine if the path exists.","solution":"def is_path_exists(grid): rows = len(grid) cols = len(grid[0]) # Helper function for BFS from collections import deque def bfs(start_r, start_c): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start_r, start_c)]) visited = set((start_r, start_c)) while queue: r, c = queue.popleft() if grid[r][c] == \'G\': return True for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited: if grid[nr][nc] != \'#\': queue.append((nr, nc)) visited.add((nr, nc)) return False start_r, start_c = None, None for r in range(rows): for c in range(cols): if grid[r][c] == \'S\': start_r, start_c = r, c break if start_r is not None: break if start_r is None: return \\"No Path\\" return \\"Path Exists\\" if bfs(start_r, start_c) else \\"No Path\\" def solve(mazes): results = [] for maze in mazes: results.append(is_path_exists(maze)) return results"},{"question":"Erin loves studying graphs, and she has recently learned about bipartite graphs. A bipartite graph is one where the set of vertices can be divided into two disjoint sets such that no two vertices within the same set are adjacent. Erin has a graph with `n` vertices and `m` edges. She wants to know if the given graph is bipartite. If it is, she needs to output the two disjoint sets of vertices. Otherwise, Erin wants to know that the graph isn\'t bipartite. Input The first line contains two space-separated integers `n` and `m` (1 ≤ n, m ≤ 100000), representing the number of vertices and the number of edges in the graph. Each of the next `m` lines contains two space-separated integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), indicating that there is an edge between vertices `u` and `v`. Output If the graph isn\'t bipartite, print the single line \\"-1\\". Otherwise, print two lines: - The first line contains the number of vertices in the first set. - The second line contains the vertices in the first set, in ascending order. - The third line contains the number of vertices in the second set. - The fourth line contains the vertices in the second set, in ascending order. Examples Input 4 4 1 2 1 3 2 4 3 4 Output 2 1 4 2 2 3 Input 3 3 1 2 1 3 2 3 Output -1","solution":"from collections import deque, defaultdict def is_bipartite(n, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = {} def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in color: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for node in range(1, n + 1): if node not in color: if not bfs(node): return \\"-1\\" set1 = [node for node in color if color[node] == 0] set2 = [node for node in color if color[node] == 1] return f\\"{len(set1)}n{\' \'.join(map(str, sorted(set1)))}n{len(set2)}n{\' \'.join(map(str, sorted(set2)))}\\" # Function to process input and call the solution function def solve(n, m, edge_list): edges = [tuple(map(int, edge.split())) for edge in edge_list] return is_bipartite(n, edges)"},{"question":"A company is planning to send multiple shipments of packages to various destinations. Each shipment consists of a set of packages, and each package has a weight. The company can send a maximum of `W` kilograms per shipment. Your task is to write a program to determine the minimum number of shipments needed to send all the packages. Constraints * 1 leq n leq 100 (number of packages) * 1 leq W leq 1000 (max weight per shipment) * 1 leq w_i leq 1000 (weight of each package) Input In the first line, two integers n and W are given. In the following line, n integers are given, where the i^{th} integer represents the weight of the i^{th} package. Output Print the minimum number of shipments required to send all packages in a single line. Example Input 5 10 2 2 2 2 10 Output 2 Explanation Shipment 1: 2, 2, 2, 2 (total weight = 8, within the limit of 10) Shipment 2: 10 (total weight = 10, within the limit of 10)","solution":"def min_shipments(n, W, weights): Determines the minimum number of shipments needed to send all packages. Args: n (int): The number of packages. W (int): The maximum weight per shipment. weights (list): A list of integers representing the weight of each package. Returns: int: The minimum number of shipments required. weights.sort(reverse=True) shipments = 0 while weights: current_load = 0 to_be_removed = [] for i, weight in enumerate(weights): if current_load + weight <= W: current_load += weight to_be_removed.append(i) for i in reversed(to_be_removed): weights.pop(i) shipments += 1 return shipments"},{"question":"```markdown In a coding competition, participants can join various coding challenges and earn points based on their performance on each challenge. The points earned can be either positive or negative, indicating a winning or losing streak, respectively. Given a series of point variations a participant earned over n challenges, determine the maximum sum of points the participant can obtain from a contiguous subarray of these point variations. Note: A contiguous subarray can be any sequence of consecutive points from the array, including the entire array itself. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5), representing the number of challenges. The second line contains n space-separated integers a₁, a₂, ..., aₙ (−10^4 ≤ aᵢ ≤ 10^4), representing the points earned or lost in each challenge. -----Output----- Print a single integer representing the maximum sum of points that can be obtained from a contiguous subarray of the given series of point variations. -----Examples----- Input 5 1 -2 3 4 -1 Output 7 Input 4 -1 -2 -3 -4 Output -1 Input 6 5 -3 5 -2 6 -1 Output 11 Input 3 2 3 -1 Output 5 ```","solution":"def max_subarray_sum(points): Returns the maximum sum of points obtained from any contiguous subarray. :param points: List[int] - List of points earned in each challenge. :return: int - Maximum sum of a contiguous subarray. max_current = max_global = points[0] for point in points[1:]: max_current = max(point, max_current + point) if max_current > max_global: max_global = max_current return max_global"},{"question":"A company is creating a task management application and needs to implement a feature to calculate the percentage of completed tasks. The application keeps track of the tasks in a list, where each task is represented by a dictionary with the following structure: ```python { \\"title\\": \\"Task Name\\", \\"completed\\": True or False } ``` The company needs a function that takes a list of tasks and returns the percentage of tasks that are completed. The function should round the result to the nearest whole number. Here is an example input: ```python tasks = [ {\\"title\\": \\"Write documentation\\", \\"completed\\": True}, {\\"title\\": \\"Fix bugs\\", \\"completed\\": False}, {\\"title\\": \\"Develop new features\\", \\"completed\\": True}, {\\"title\\": \\"Review code\\", \\"completed\\": False} ] ``` The expected output for the above input would be: ```python 50 ``` Function signature: ```python def completed_percentage(tasks: list) -> int: pass ``` Provide a function that: 1. Computes the percentage of tasks in the provided list that have the field `\\"completed\\"` set to `True`. 2. Rounds the result to the nearest whole number.","solution":"def completed_percentage(tasks: list) -> int: Returns the percentage of tasks that are completed rounded to the nearest whole number. if not tasks: return 0 total_tasks = len(tasks) completed_tasks = sum(task[\\"completed\\"] for task in tasks) percentage = (completed_tasks / total_tasks) * 100 return round(percentage)"},{"question":"You are given an array A of N integers and an integer K. Your task is to determine if there are three distinct elements in the array such that their sum is divisible by K. ------ Input Format ------ - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and K. - The second line contains N integers denoting the elements of the array A. ------ Output Format ------ For each test case, print the answer on a new line: YES if there exist three distinct elements in the array whose sum is divisible by K, and NO otherwise. Each character of the output may be printed in either uppercase or lowercase, i.e., YES, yes, yEs and yES will all be treated as identical. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 3 ≤ N ≤ 10^{3} 1 ≤ K ≤ 10^{6} 1 ≤ A[i] ≤ 10^{9} ------ Sample Input 1 ------ 3 5 3 1 2 3 4 5 4 7 10 15 7 8 6 11 3 6 9 12 15 18 ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Test case 1: One possible triplet is (1, 2, 3) whose sum is 6, and 6 is divisible by 3. Test case 2: There are no three elements whose sum is divisible by 7. Test case 3: One possible triplet is (3, 6, 12) whose sum is 21, and 21 is divisible by 11.","solution":"def is_sum_divisible_by_k(arr, k): Checks if there are any three distinct elements in the array whose sum is divisible by k. n = len(arr) for i in range(n - 2): for j in range(i + 1, n - 1): for l in range(j + 1, n): if (arr[i] + arr[j] + arr[l]) % k == 0: return \\"YES\\" return \\"NO\\" def process_multiple_test_cases(test_cases): Handles multiple test cases for the problem. results = [] for N, K, arr in test_cases: results.append(is_sum_divisible_by_k(arr, K)) return results def transform_input(input_data): Transforms the raw input into a list format suitable for processing. lines = input_data.split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, K = map(int, lines[index].split()) index += 1 arr = list(map(int, lines[index].split())) index += 1 test_cases.append((N, K, arr)) return test_cases def main(input_data): test_cases = transform_input(input_data) results = process_multiple_test_cases(test_cases) return \\"n\\".join(results)"},{"question":"You are given a string containing a mix of alphabetical characters and digits. Your task is to find the longest substring that contains at most two distinct characters. Ensure that the characters occurring in this substring are contiguous within the input string. Example 1: Input: s = \\"eceba\\" Output: \\"ece\\" Explanation: The substring \\"ece\\" contains 2 distinct characters and has a length of 3. Although \\"ba\\" also contains 2 distinct characters, its length is only 2. Example 2: Input: s = \\"ccaabbb\\" Output: \\"aabbb\\" Explanation: The substring \\"aabbb\\" contains 2 distinct characters and has a length of 5. There are other substrings with 2 distinct characters (\\"cca\\", \\"ccaa\\"), but \\"aabbb\\" is the longest. Note: - The length of the string s will not exceed 10,000. - The string s consists only of alphabets and digits. - The characters in the substring should be contiguous (occur one after another without any interruption).","solution":"def longest_substring_two_distinct(s): Returns the longest substring that contains at most two distinct characters. if len(s) == 0: return \\"\\" start, max_len, max_substring = 0, 0, \\"\\" char_map = {} for end, char in enumerate(s): char_map[char] = char_map.get(char, 0) + 1 while len(char_map) > 2: start_char = s[start] char_map[start_char] -= 1 if char_map[start_char] == 0: del char_map[start_char] start += 1 if end - start + 1 > max_len: max_len = end - start + 1 max_substring = s[start:end+1] return max_substring"},{"question":"Create a function `maxSubstring` that finds the lexicographically largest substring of a given string `s`. A substring is defined as an independent sequence of characters that can be derived from the main string by selecting characters without changing their order. The lexicographically largest substring implies the substring which would appear last in an ordered dictionary of all substrings of `s`. # Function Signature ```python def maxSubstring(s: str) -> str: ``` # Input - `s` (1 <= len(s) <= 10^5): A string consisting of only lowercase alphabets. # Output - Returns the lexicographically largest substring of the string `s`. # Example Example 1: ```python maxSubstring(\\"ababaa\\") ``` Output: ``` \\"babaa\\" ``` Explanation: - All substrings: \'a\', \'ab\', \'aba\', \'abab\', \'ababa\', \'ababaa\', \'b\', - \'ba\', \'bab\', \'baba\', \'babaa\', \'a\', \'aa\', \'aab\', \'aaba\', \'aabaa\' - The lexicographically largest substring is \\"babaa\\". Example 2: ```python maxSubstring(\\"abc\\") ``` Output: ``` \\"c\\" ``` Explanation: - All substrings: \'a\', \'ab\', \'abc\', \'b\', \'bc\', \'c\' - The lexicographically largest substring is \\"c\\". # Constraints - The function must operate with a time complexity of O(n). - It should use a constant amount of extra space O(1), apart from the input string. # Notes - You do not need to handle input or output, just implement the function.","solution":"def maxSubstring(s: str) -> str: Find the lexicographically largest substring of the given string s. max_substr = \\"\\" for i in range(len(s)): if s[i:] > max_substr: max_substr = s[i:] return max_substr"},{"question":"You are given a list of positive integers representing the amount of rain that falls each day for a period of time. Your task is to determine, for each day, the number of days until the next day with strictly more rainfall. If there is no future day with more rain, insert a 0 for that day. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of days. The second line contains n integers separated by spaces, where the i-th integer represents the rainfall on the i-th day (1 ≤ rainfall[i] ≤ 10^9). Output Print n integers separated by spaces, where the i-th integer represents the number of days until the next day with strictly more rainfall after the i-th day. If there is no such day, print 0. Examples Input 6 2 1 1 5 3 6 Output 3 1 1 1 1 0 Input 4 3 2 1 4 Output 3 1 1 0 Note In the first example, the rainfall array is [2, 1, 1, 5, 3, 6]. Here are the days until the next day with more rainfall for each day: - Day 1 (rainfall = 2): The next day with more rainfall is Day 4. Number of days = 4 - 1 = 3. - Day 2 (rainfall = 1): The next day with more rainfall is Day 4. Number of days = 4 - 2 = 2. - Day 3 (rainfall = 1): The next day with more rainfall is Day 4. Number of days = 4 - 3 = 1. - Day 4 (rainfall = 5): The next day with more rainfall is Day 6. Number of days = 6 - 4 = 2. - Day 5 (rainfall = 3): The next day with more rainfall is Day 6. Number of days = 6 - 5 = 1. - Day 6 (rainfall = 6): There is no future day with more rainfall. Number of days = 0. In the second example, the rainfall array is [3, 2, 1, 4]. - Day 1 (rainfall = 3): The next day with more rainfall is Day 4. Number of days = 4 - 1 = 3. - Day 2 (rainfall = 2): The next day with more rainfall is Day 4. Number of days = 4 - 2 = 2. - Day 3 (rainfall = 1): The next day with more rainfall is Day 4. Number of days = 4 - 3 = 1. - Day 4 (rainfall = 4): There is no future day with more rainfall. Number of days = 0.","solution":"def days_until_more_rainfall(n, rainfall): result = [0] * n stack = [] for i in range(n): while stack and rainfall[i] > rainfall[stack[-1]]: prev_index = stack.pop() result[prev_index] = i - prev_index stack.append(i) return result"},{"question":"Given a string S consisting of lowercase alphabets, your task is to find the first non-repeating character in the string and return its index. If there is no non-repeating character, return -1. Your function should be efficient. Complete the function `firstNonRepeatingCharacter(S)` which accepts the string S. Example 1: Input: \\"geeksforgeeks\\" Output: 5 Explanation: In the string \\"geeksforgeeks\\", the first non-repeating character is \'f\' which appears at index 5. Example 2: Input: \\"abcabc\\" Output: -1 Explanation: In the string \\"abcabc\\", all characters are repeated, so the function returns -1. Example 3: Input: \\"loveleetcode\\" Output: 2 Explanation: In the string \\"loveleetcode\\", the first non-repeating character is \'v\' which appears at index 2. User Task: Since this is a functional problem, you do not need to worry about the input and output. You just have to complete the function `firstNonRepeatingCharacter()` that accepts a string S and returns the index of the first non-repeating character. Constraints: - 1 <= |S| <= 10^5","solution":"def firstNonRepeatingCharacter(S): Returns the index of the first non-repeating character in the string S. If there is no non-repeating character, returns -1. char_count = {} # First pass: Count the occurrences of each character for char in S: char_count[char] = char_count.get(char, 0) + 1 # Second pass: Find the first character with a count of 1 for index, char in enumerate(S): if char_count[char] == 1: return index return -1"},{"question":"You are given a list of houses lined up in a row, each with a certain amount of money stashed. A robber cannot rob two adjacent houses, as it would alert the police. Your task is to design a function that determines the maximum amount of money the robber can steal without alerting the police. For example, given the list of houses `[2, 7, 9, 3, 1]`: * If the robber robs houses with amounts `2` and `9`, or `7` and `3`, they can steal a maximum amount of `12`. * If the robber robs houses with amounts `2`, `9`, and `1`, they can steal a maximum amount of `12`. So, ```python def rob_houses(houses: list) -> int: # Implement the function here pass houses = [2, 7, 9, 3, 1] print(rob_houses(houses)) # should return 12 ``` You can assume that the `houses` list will contain at least one element but no more than 100 elements, and each element is a non-negative integer.","solution":"def rob_houses(houses): Determines the maximum amount of money the robber can steal without alerting the police. :param houses: A list of integers where each integer represents the amount of money in each house. :return: The maximum amount of money that can be stolen without robbing two adjacent houses. if not houses: return 0 if len(houses) == 1: return houses[0] if len(houses) == 2: return max(houses[0], houses[1]) dp = [0] * len(houses) dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, len(houses)): dp[i] = max(houses[i] + dp[i-2], dp[i-1]) return dp[-1] # Test examples houses = [2, 7, 9, 3, 1] print(rob_houses(houses)) # should return 12"},{"question":"You are given a grid of size n x n (1 ≤ n ≤ 50) filled with integers. Your task is to perform a sequence of operations to transform the grid so that every row and every column contains the integers 1 through n exactly once (i.e., the grid should become a Latin square). The operations you can perform are swaps of entire rows or entire columns. You need to find a series of moves to transform the grid into a Latin square using the fewest number of operations. Input The first line contains one integer n (1 ≤ n ≤ 50) — the size of the grid. The next n lines each contain n integers, representing the grid. Output On the first line, print the number q of operations you perform (it must hold 0 ≤ q ≤ 1000). Then, print q lines, each describing one operation. Each operation should be of the form: - `row x y` indicating a swap of row x with row y (1-based index) - `column x y` indicating a swap of column x with column y (1-based index) Operations are 1-based indexed, and rows and columns are numbered from 1 to n. Examples Input 4 1 2 3 4 4 3 2 1 1 3 2 4 4 1 2 3 Output 2 row 2 4 column 1 4 Input 3 1 2 3 3 2 1 2 3 1 Output 3 row 1 2 column 2 3 column 1 2 Note Explanation of the first testcase: Initially the grid is: 1 2 3 4 4 3 2 1 1 3 2 4 4 1 2 3 - The first operation swaps row 2 with row 4, resulting in: 1 2 3 4 4 1 2 3 1 3 2 4 4 3 2 1 - The second operation swaps column 1 with column 4, resulting in: 4 2 3 1 3 1 2 4 4 3 2 1 1 2 3 4","solution":"def is_latin_square(grid, n): for i in range(n): if len(set(grid[i])) != n or len(set(row[i] for row in grid)) != n: return False return True def transpose(grid): return [list(row) for row in zip(*grid)] def process_grid(n, grid): from collections import defaultdict row_swaps = [] column_swaps = [] for target_row in range(1, n + 1): for current_row in range(1, n + 1): if set(grid[current_row - 1]) == set(range(1, n + 1)): break if current_row != target_row: row_swaps.append(f\'row {target_row} {current_row}\') grid[target_row - 1], grid[current_row - 1] = grid[current_row - 1], grid[target_row - 1] grid = transpose(grid) for target_col in range(1, n + 1): for current_col in range(1, n + 1): if set(row[current_col - 1] for row in grid) == set(range(1, n + 1)): break if current_col != target_col: column_swaps.append(f\'column {target_col} {current_col}\') for row in grid: row[target_col - 1], row[current_col - 1] = row[current_col - 1], row[target_col - 1] all_operations = row_swaps + column_swaps print(len(all_operations)) for operation in all_operations: print(operation) n = 4 grid = [ [1, 2, 3, 4], [4, 3, 2, 1], [1, 3, 2, 4], [4, 1, 2, 3] ] process_grid(n, grid)"},{"question":"Task: Write a function that receives a DNA sequence and determines whether it is a valid sequence and, if so, performs basic operations on the sequence. Rules: 1. A valid DNA sequence contains only the characters \'A\', \'C\', \'G\', and \'T\'. 2. Your function should be able to: - Verify if the sequence is valid. - Return the reverse complement of the sequence. - Return the count of each nucleotide. Testing: ```python >>> class DNASequence: >>> def __init__(self, sequence): >>> self.sequence = sequence >>> def is_valid(self): >>> return all(nucleotide in \'ACGT\' for nucleotide in self.sequence) >>> def reverse_complement(self): >>> complement = {\'A\': \'T\', \'C\': \'G\', \'G\': \'C\', \'T\': \'A\'} >>> return \'\'.join(complement[nucleotide] for nucleotide in reversed(self.sequence)) >>> def nucleotide_count(self): >>> return {nucleotide: self.sequence.count(nucleotide) for nucleotide in \'ACGT\'} >>> seq = DNASequence(\'AGCTTAGC\') >>> seq.is_valid() True >>> seq.reverse_complement() \'GCTAAGCT\' >>> seq.nucleotide_count() {\'A\': 2, \'C\': 2, \'G\': 2, \'T\': 2} ```","solution":"class DNASequence: def __init__(self, sequence): self.sequence = sequence def is_valid(self): Checks if the DNA sequence is valid (contains only A, C, G, T). return all(nucleotide in \'ACGT\' for nucleotide in self.sequence) def reverse_complement(self): Returns the reverse complement of the DNA sequence. complement = {\'A\': \'T\', \'C\': \'G\', \'G\': \'C\', \'T\': \'A\'} return \'\'.join(complement[nucleotide] for nucleotide in reversed(self.sequence)) def nucleotide_count(self): Returns a dictionary with the count of each nucleotide in the sequence. return {nucleotide: self.sequence.count(nucleotide) for nucleotide in \'ACGT\'}"},{"question":"-----Input----- The first line consists of a single integer N, (1 leq N leq 100). The next N lines each contain two integers a and b (1 leq a, b leq 10^9), representing pairs of integers. -----Output----- For each pair of integers (a, b), print the greatest common divisor (gcd) of a and b. -----Example----- Sample Input: 3 15 25 25 30 17 19 Sample Output: 5 5 1","solution":"import math def calculate_gcd(input_pairs): Calculate the GCD of each pair of integers. Args: input_pairs (list of tuples): List of tuples where each tuple contains two integers (a, b) Returns: list: List of GCDs for each pair of integers. gcd_list = [] for a, b in input_pairs: gcd_list.append(math.gcd(a, b)) return gcd_list"},{"question":"Lowest Unique Integer Hey, Listen up ! Find me the lowest unique integer from this list of numbers. You know what to do! --- Input * The list will contain only positive integers. * The list may contain duplicates. * The list may be empty. Example * Input: 1, 2, 2, 3, 4, 4, 5 * Output: 1 * Input: 3, 3, 2, 2, 1, 5, 5 * Output: 1 * Input: 2, 3, 4, 3, 2, 4 * Output: -1 (if no unique integer is found) Note - If the list is empty, return -1. - If no unique integer is found, return -1.","solution":"def lowest_unique_integer(numbers): Returns the lowest unique integer in the list of numbers. If there is no unique integer, returns -1. if not numbers: return -1 from collections import Counter counts = Counter(numbers) unique_numbers = [num for num, count in counts.items() if count == 1] if not unique_numbers: return -1 return min(unique_numbers)"},{"question":"Delivery Drones A town has N delivery zones, organized in a circular manner. The N-th zone is connected back to the 1st zone, forming a circle. A set of delivery drones are scheduled to deliver packages by visiting these zones. Each drone starts from a designated zone and can move sequentially to the next zone, spending exactly one minute to travel from one zone to the next. Given the initial positions of two delivery drones, determine the minimum amount of time required for them to meet at the same delivery zone. Each drone can start its journey immediately and continues to move around the circle indefinitely. ------ Input Format ------ - The first line contains T, the number of test cases. - Each of the next T lines contains three space-separated integers: N, P1, and P2. - N: Total number of delivery zones (1-based index). - P1: The starting zone of the first drone. - P2: The starting zone of the second drone. ------ Output Format ------ For each test case, print a single integer - the minimum time (in minutes) required for the drones to be at the same delivery zone. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 2 ≤ N ≤ 10^{9} 1 ≤ P1, P2 ≤ N ------ Sample Input 1 ------ 3 5 1 3 4 2 4 6 6 6 ------ Sample Output 1 ------ 1 2 0 ----- Explanation 1 ------ - Test case 1: The zones are ordered as: 1 -> 2 -> 3 -> 4 -> 5 -> 1. The first drone starts at zone 1 and the second drone at zone 3. They will meet at zone 4, which requires 1 minute for the first drone and 1 minute for the second drone (the shortest route for both to meet after moving sequentially). - Test case 2: The zones are ordered as: 1 -> 2 -> 3 -> 4 -> 1. The first drone starts at zone 2 and the second drone at zone 4. They will meet at zone 1 (after passing zone 4), which will require 2 minutes for both. - Test case 3: Both drones start at zone 6. Thus, they are already at the same location, requiring 0 minutes to meet.","solution":"def min_delivery_time(N, P1, P2): Calculate the minimum time for two delivery drones to meet in zones. Parameters: N (int): The number of zones arranged in a circle. P1 (int): The starting zone of the first drone. P2 (int): The starting zone of the second drone. Returns: int: The minimum time required for the drones to meet. if P1 == P2: return 0 clockwise_distance = (P2 - P1) % N counter_clockwise_distance = (P1 - P2) % N return min(clockwise_distance, counter_clockwise_distance)"},{"question":"You are given a matrix of integers where each cell in the matrix contains either a 0 or a 1. Your task is to determine the number of distinct islands in the matrix. An island is defined as a group of 1s connected horizontally or vertically. Boundary cells are considered part of the edge of the matrix. Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000), the number of rows and columns in the matrix, respectively. - The next `n` lines each contain `m` integers (either 0 or 1), representing the cells of the matrix. Output: - Output a single integer, the number of distinct islands in the matrix. Example: Input: 4 5 1 1 0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 0 0 0 Output: 3 Explanation: - There are three distinct islands in the given matrix: 1. The 1s in the top-left corner form one island. 2. The 1s starting at cell (2, 4) form a second island. 3. The single 1 at cell (4, 2) forms the third island. Note: - Ensure to handle large inputs within the given constraints effectively. - Think about efficient graph traversal techniques such as Depth-First Search (DFS) or Breadth-First Search (BFS) to solve the problem.","solution":"def number_of_islands(n, m, matrix): def dfs(row, col): if row < 0 or row >= n or col < 0 or col >= m or matrix[row][col] != 1: return matrix[row][col] = -1 # Mark cell as visited # Explore all 4 possible directions (up, down, left, right) dfs(row - 1, col) dfs(row + 1, col) dfs(row, col - 1) dfs(row, col + 1) count_islands = 0 for i in range(n): for j in range(m): if matrix[i][j] == 1: count_islands += 1 dfs(i, j) return count_islands"},{"question":"# Description Given a list of integers representing stock prices at different times throughout the day, you need to determine the maximum profit you could have made by buying one stock at a low price and selling it at a higher price later in the day. If no profit could have been made, return 0. # Task Your task is to write a function that takes a list of integers as input and returns the maximum possible profit from buying and then selling one stock. If the list is empty or contains only one element, return -1. For example, in the first case below, the maximum profit would be 5 - 1 = 4 (buy at 1 and sell at 5). In the second case, no transaction is possible, so the profit is 0. ```python max_profit([1, 2, 3, 4, 5]) # return 4 max_profit([7, 6, 4, 3, 1]) # return 0 max_profit([3, 3, 5, 0, 0, 3, 1, 4]) # return 4 max_profit([]) # return -1 max_profit([5]) # return -1 ``` ```cs StockProfitCalculator.MaxProfit(new [] {1, 2, 3, 4, 5}) // return 4 StockProfitCalculator.MaxProfit(new [] {7, 6, 4, 3, 1}) // return 0 StockProfitCalculator.MaxProfit(new [] {3, 3, 5, 0, 0, 3, 1, 4}) // return 4 StockProfitCalculator.MaxProfit(new [] { }) // return -1 StockProfitCalculator.MaxProfit(new [] {5}) // return -1 ``` ```haskell max_profit [1, 2, 3, 4, 5] -- return 4 max_profit [7, 6, 4, 3, 1] -- return 0 max_profit [3, 3, 5, 0, 0, 3, 1, 4] -- return 4 max_profit [] -- return -1 max_profit [5] -- return -1 ```","solution":"def max_profit(prices): Returns the maximum profit from buying and selling one stock. If the list is empty or contains only one element, returns -1. if not prices or len(prices) < 2: return -1 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"In a city, there are N intersections connected by M bidirectional roads. Each road connects exactly two intersections and has a certain toll you need to pay to use it. The city\'s traffic policy allows you to pass through the intersections in certain special ways that minimize the toll cost. You need to determine the lowest possible toll cost to travel from intersection S to intersection T for Q different queries. You are given the details of the intersections, roads, and queries. For each query, output the minimum toll cost. If it\'s not possible to travel from S to T for a given query, output -1. Constraints: * 1 ≤ N ≤ 1000 * 1 ≤ M ≤ 2000 * 1 ≤ Q ≤ 100 * 1 ≤ toll of each road ≤ 1000 * 1 ≤ S, T ≤ N Input: The first line contains three integers N, M, and Q— the number of intersections, the number of roads, and the number of queries, respectively. The next M lines each contain three integers u, v, and w— indicating a road between intersections u and v with a toll cost of w. The next Q lines each contain two integers S and T— representing a query to find the minimum toll cost from intersection S to intersection T. Output: For each query, output the minimum toll cost. If it\'s not possible to travel between the intersections, output -1. Example: Input 5 6 3 1 2 4 1 3 2 2 3 1 2 4 7 3 4 3 4 5 1 1 4 3 5 1 5 Output 5 4 6","solution":"import heapq def find_minimum_toll_cost(N, M, Q, roads, queries): # Create the graph graph = [[] for _ in range(N+1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start): min_toll = [float(\'inf\')] * (N + 1) min_toll[start] = 0 pq = [(0, start)] # (toll, node) while pq: current_toll, current_node = heapq.heappop(pq) if current_toll > min_toll[current_node]: continue for neighbor, toll_cost in graph[current_node]: new_toll = current_toll + toll_cost if new_toll < min_toll[neighbor]: min_toll[neighbor] = new_toll heapq.heappush(pq, (new_toll, neighbor)) return min_toll result = [] for S, T in queries: min_toll_from_S = dijkstra(S) result.append(min_toll_from_S[T] if min_toll_from_S[T] != float(\'inf\') else -1) return result"},{"question":"John loves reading books, and he has a shelf containing N books arranged from left to right. He wants to classify these books based on their genres, which are represented by integers from 1 to M. John wants to find the longest subarray of books such that no genre appears more than once. In other words, he is looking for the maximum length of a contiguous sequence of books where each genre is unique. Write a program that, given the list of genres of the N books on the shelf, determines the length of the longest subarray with all unique genres. Constraints * 1 ≦ N ≦ 100000 * 1 ≦ M ≦ N * 1 ≦ Genre_i ≦ M Input The input is given from Standard Input in the following format: N M Genre_1 Genre_2 ... Genre_N Output Print the length of the longest subarray with all unique genres. Examples Input 7 5 1 2 1 3 4 2 5 Output 5 Input 5 3 1 2 3 1 2 Output 3 Input 8 4 4 3 2 1 4 3 2 1 Output 4 Input 10 6 1 2 3 4 5 6 3 4 5 6 Output 6","solution":"def longest_unique_genres_subarray(N, M, genres): genre_index_map = {} start = 0 max_length = 0 for end in range(N): if genres[end] in genre_index_map: start = max(start, genre_index_map[genres[end]] + 1) genre_index_map[genres[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given a list of integers, write a function that returns all possible unique subsets of the list. Example: Input: [1, 2, 2] Output: [ [], [1], [2], [1, 2], [2, 2], [1, 2, 2] ] Note: - The list might contain duplicates, but the resulting subsets should be unique. - The order of the subsets does not matter.","solution":"def unique_subsets(nums): Returns all possible unique subsets of the list of integers. Args: nums (list): A list of integers. Returns: list: A list of lists containing unique subsets. nums.sort() result = [] subset = [] def dfs(index): result.append(subset[:]) for i in range(index, len(nums)): if i > index and nums[i] == nums[i - 1]: continue subset.append(nums[i]) dfs(i + 1) subset.pop() dfs(0) return result"},{"question":"**Rotting Oranges** You are given an `n` x `m` grid where each cell represents an orange at different states: - `0` representing an empty cell, - `1` representing a fresh orange, - `2` representing a rotten orange. Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1. Input The first line contains one integer `T` denoting the number of test cases. Each test case starts with a line containing two space-separated integers: `n` and `m` denoting the number of rows and columns in the grid, respectively. Each of the following `n` lines contains `m` space-separated integers representing the grid. Output For each test case, output one integer - the minimum number of minutes that must elapse until no cell has a fresh orange, or -1 if this is impossible. Constraints 1 ≤ T ≤ 25 1 ≤ n, m ≤ 100 SAMPLE INPUT 2 3 3 2 1 1 1 1 0 0 1 1 3 3 2 1 1 0 1 1 1 0 1 SAMPLE OUTPUT 4 -1","solution":"from collections import deque def min_minutes_to_rot(grid): rows, cols = len(grid), len(grid[0]) queue = deque() fresh_oranges = 0 # Initialize the queue with all rotten oranges for r in range(rows): for c in range(cols): if grid[r][c] == 2: queue.append((r, c)) elif grid[r][c] == 1: fresh_oranges += 1 if fresh_oranges == 0: return 0 minutes_passed = 0 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while queue: minutes_passed += 1 for _ in range(len(queue)): x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 1: grid[nx][ny] = 2 queue.append((nx, ny)) fresh_oranges -= 1 if fresh_oranges == 0: return minutes_passed return -1 def process_test_cases(test_cases): results = [] for grid in test_cases: results.append(min_minutes_to_rot(grid)) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n, m = map(int, lines[index].split()) index += 1 grid = [] for _ in range(n): grid.append(list(map(int, lines[index].split()))) index += 1 test_cases.append(grid) return test_cases # Example usage: if __name__ == \\"__main__\\": input_data = 2 3 3 2 1 1 1 1 0 0 1 1 3 3 2 1 1 0 1 1 1 0 1 test_cases = parse_input(input_data) results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are given a grid of size n × m filled with integers. Your task is to transform the grid into a grid of block sums where each block is k × k in size. Each block sum should be the sum of all elements within that block. If a block exceeds the grid\'s boundaries, include as many elements as possible in the sum. The transformed grid will be of reduced size. The new dimensions will be calculated as follows: New number of rows = ⌈n / k⌉ New number of columns = ⌈m / k⌉ Input The first line contains three space-separated integers n, m, and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n, m)). Then follow n lines, each containing m space-separated integers representing the elements of the original grid. Each integer in the grid is between -10000 and 10000. Output Output the transformed grid with each row printed on a new line. Each value should be the sum of the elements in its respective block. Examples Input 4 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 14 22 46 54 Input 3 3 2 1 2 3 4 5 6 7 8 9 Output 12 9 15 9 Explanation In the first example, the grid is divided into four 2x2 blocks: Block 1: 1 + 2 + 5 + 6 = 14 Block 2: 3 + 4 + 7 + 8 = 22 Block 3: 9 + 10 + 13 + 14 = 46 Block 4: 11 + 12 + 15 + 16 = 54 In the second example, the grid is divided into 2x2 blocks totaling four possible blocks, with overlaps on the grid boundaries: Block 1: 1 + 2 + 4 + 5 = 12 Block 2: 3 + 0 + 6 + 0 = 9 (0 being padding for exceeding grid boundaries) Block 3: 7 + 8 + 0 + 0 = 15 Block 4: 9 + 0 + 0 + 0 = 9","solution":"import math def block_sum_grid(n, m, k, grid): new_rows = math.ceil(n / k) new_cols = math.ceil(m / k) result = [] for i in range(new_rows): row = [] for j in range(new_cols): sum_value = 0 for x in range(i*k, min((i+1)*k, n)): for y in range(j*k, min((j+1)*k, m)): sum_value += grid[x][y] row.append(sum_value) result.append(row) return result"},{"question":"In a fantasy card game, you have a deck of n cards, each with a unique integer identifier from 1 to n. Unfortunately, you\'ve dropped the deck and now the cards are in a random order. Your task is to sort the deck so that all card identifiers are in ascending order. However, you can only perform a specific type of move: you choose any card and move it to the top of the deck. Determine the minimum number of moves required to sort the deck using this move. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of cards. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ n, all ai are distinct) — the current order of the cards in the deck. Output Print a single integer — the minimum number of moves required to sort the deck. Examples Input 5 4 3 2 5 1 Output 3 Input 3 2 1 3 Output 1 Input 6 3 1 4 5 2 6 Output 2 Note In the first example, you can sort the deck like this: 1. Move card 5 to the top: [5, 4, 3, 2, 1] 2. Move card 1 to the top: [1, 5, 4, 3, 2] 3. Move card 2 to the top: [2, 1, 5, 4, 3] In the second example, you need only one move: 1. Move card 1 to the top: [1, 2, 3] In the third example, the two moves could be: 1. Move card 6 to the top: [6, 3, 1, 4, 5, 2] 2. Move card 2 to the top: [2, 6, 3, 1, 4, 5]","solution":"def min_moves_to_sort_deck(n, cards): Returns the minimum number of moves required to sort the deck. Parameters: - n (int): The number of cards. - cards (list): The current order of the cards in the deck. Returns: - int: The minimum number of moves required to sort the deck. # Find the longest increasing subsequence in `cards` position_lookup = {card: index for index, card in enumerate(cards)} LIS_length = 0 current_length = 0 last_position = -1 for i in range(1, n + 1): if last_position < position_lookup[i]: current_length += 1 else: current_length = 1 last_position = position_lookup[i] if current_length > LIS_length: LIS_length = current_length # The number of moves required is `(n - length of the longest increasing subsequence)` return n - LIS_length"},{"question":"Smith Widget Inc. wants to determine the effectiveness of their employee training program. Each trainee starts with an initial skill level and progresses through daily training sessions. The skill level of a trainee improves by a fixed percentage each day. However, the company has a policy of rounding down the skill level to the nearest whole number at the end of each day. Write a function to calculate the total cumulative skill level at the end of a given number of days for a single trainee starting at an initial skill level. Function Description: Complete the cumulativeSkill function in the editor below. cumulativeSkill has the following parameters: - int initialSkill: the initial skill level of the trainee. - int dailyIncreasePercentage: the percentage increase (as a whole number) in skill level per day. - int days: the number of days the trainee undergoes training. The function should return: - int: the total cumulative skill level of the trainee at the end of the given number of days. Input Format: - An integer initialSkill, the initial skill level. - An integer dailyIncreasePercentage, the daily percentage increase in skill level. - An integer days, the number of days the training program runs. Constraints: - 1 ≤ initialSkill ≤ 1000 - 1 ≤ dailyIncreasePercentage ≤ 100 - 1 ≤ days ≤ 50 Example: Sample Input: ``` initialSkill = 10 dailyIncreasePercentage = 20 days = 3 ``` Sample Output: ``` 39 ``` Explanation: On day 1, the skill level is 10. On day 2, the skill level is ( leftlfloor frac{10 times 120}{100} rightrfloor = 12 ). On day 3, the skill level is ( leftlfloor frac{12 times 120}{100} rightrfloor = 14 ). Thus, the cumulative skill level at the end of 3 days is (10 + 12 + 14 = 36).","solution":"def cumulativeSkill(initialSkill, dailyIncreasePercentage, days): Calculate the cumulative skill level after a given number of days. :param initialSkill: int, initial skill level of the trainee :param dailyIncreasePercentage: int, percentage increase in skill level per day :param days: int, number of training days :return: int, total cumulative skill level at the end of the given number of days cumulative_skill = 0 current_skill = initialSkill for day in range(days): cumulative_skill += current_skill current_skill = int(current_skill * (1 + dailyIncreasePercentage / 100)) return cumulative_skill"},{"question":"A developer is working on a method to compress a given string by summarizing repeated characters. The method processes the string such that sequences of the same character are replaced by the character followed by the number of repetitions. If any character occurs consecutively only once, it should remain as it is in the compressed string (i.e., no number should follow it). Write a function `compress_string` which compresses a given string according to these rules. **Function Signature:** ```python def compress_string(s: str) -> str: ``` **Input:** - A single string `s` consisting of lowercase English letters (a-z), with the length of the string between 1 and 1000. **Output:** - A single string which is the compressed version of the input string. **Examples:** ```python assert compress_string(\\"aabcccccaaa\\") == \\"a2bc5a3\\" assert compress_string(\\"abcd\\") == \\"abcd\\" assert compress_string(\\"aaabbbccc\\") == \\"a3b3c3\\" ``` **Explanation:** 1. For the input `\\"aabcccccaaa\\"`, the function compresses the string to `\\"a2bc5a3\\"`: - \\"a\\" appears 2 times, \\"b\\" appears 1 time, \\"c\\" appears 5 times, and \\"a\\" appears 3 times again. 2. For the input `\\"abcd\\"`, the function returns `\\"abcd\\"` as no character repeats consecutively. 3. For the input `\\"aaabbbccc\\"`, the compressed string is `\\"a3b3c3\\"`: - \\"a\\" appears 3 times, \\"b\\" appears 3 times, and \\"c\\" appears 3 times.","solution":"def compress_string(s: str) -> str: if not s: return \\"\\" compressed = [] count = 1 prev_char = s[0] for char in s[1:]: if char == prev_char: count += 1 else: if count > 1: compressed.append(f\\"{prev_char}{count}\\") else: compressed.append(prev_char) prev_char = char count = 1 if count > 1: compressed.append(f\\"{prev_char}{count}\\") else: compressed.append(prev_char) return \'\'.join(compressed)"},{"question":"Write a function that takes an integer array and returns the length of the longest contiguous subarray with an equal number of 0s and 1s. You need to find the subarray that has an equal number of 0s and 1s, and returns its length. If no such subarray exists, return 0. -----Input----- The first line contains integer n (1 ≤ n ≤ 10^5) — the size of the array. The second line contains n space-separated integers (0 or 1). -----Output----- Print the length of the longest contiguous subarray with an equal number of 0s and 1s. -----Examples----- Input 6 0 1 0 1 0 1 Output 6 Input 5 0 0 1 0 1 Output 4 Input 4 0 0 1 1 Output 4","solution":"def findMaxLength(nums): Returns the length of the longest contiguous subarray with an equal number of 0s and 1s. # Change all 0s to -1s nums = [-1 if num == 0 else 1 for num in nums] # Initialize the dictionary and variables prefix_sum_map = {0: -1} max_length = 0 curr_sum = 0 for i, num in enumerate(nums): curr_sum += num if curr_sum in prefix_sum_map: max_length = max(max_length, i - prefix_sum_map[curr_sum]) else: prefix_sum_map[curr_sum] = i return max_length"},{"question":"Catherine has a collection of various types of beads. She wants to chain these beads together to form necklaces. Each necklace should contain exactly N beads. Furthermore, she has a special requirement; each necklace must be symmetrical around its center point, meaning the sequence of beads from the left half should mirror the sequence from the right half. Given the different types of beads she has, determine the number of distinct symmetric necklaces she can make using exactly N beads. Input format: The first line will contain a single integer T, the number of test cases. For each test case, there will be a single integer N, the length of the necklace. Output format: For each test case, output a single line containing the number of distinct symmetric necklaces of length N that can be formed. Constraints: 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 There are at most 26 different types of beads, denoted by lowercase English letters. SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT 26 26 676 Explanation: For test case 1, with N=1, there are 26 possible symmetric necklaces, each consisting of a single type of bead. For test case 2, with N=2, there are 26 possible symmetric necklaces, each of length 2 and consisting of pairs of identical beads. For test case 3, with N=3, each symmetrical sequence is determined by the middle bead and the identical pairs around it.","solution":"def count_symmetric_necklaces(T, cases): results = [] for N in cases: if N % 2 == 0: # Even length m = N // 2 results.append(26 ** m) else: # Odd length m = (N // 2) + 1 results.append(26 ** m) return results"},{"question":"Alice receives an array of integers and a series of query ranges. For each query range, she wants to determine the sum of all elements in the array within that range and find the maximum frequency of any element within this subarray. Alice needs your help to efficiently answer each query. -----Input----- The first line contains two integers n and q (1 le n, q le 10^5), representing the number of elements in the array and the number of queries, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^6) — the contents of the initial array. Each of the next q lines contains two integers l and r (1 le l le r le n), representing a range query for the subarray a[l] to a[r] (inclusive, 1-indexed). -----Output----- For each query, print two integers: the sum of elements within the subarray and the maximum frequency of any element in the subarray. -----Examples----- Input 5 3 1 2 2 3 1 1 3 2 5 1 5 Output 5 2 8 2 9 2 -----Note----- Explanation of the example: 1. For the first query (1, 3), the sum of elements from the first to the third is 1 + 2 + 2 = 5, and the most frequent element is 2, which appears 2 times. 2. For the second query (2, 5), the sum of elements from the second to the fifth is 2 + 2 + 3 + 1 = 8, and both elements 2 and 1 have the maximum frequency of 2. 3. For the third query (1, 5), the sum of elements from the first to the fifth is 1 + 2 + 2 + 3 + 1 = 9, and both elements 1 and 2 have the maximum frequency of 2.","solution":"from collections import defaultdict def process_queries(array, queries): results = [] prefix_sum = [0] * (len(array) + 1) # Compute prefix sums for efficient range sum queries for i in range(1, len(array) + 1): prefix_sum[i] = prefix_sum[i - 1] + array[i - 1] for l, r in queries: # Calculate the sum for range [l-1, r-1] total_sum = prefix_sum[r] - prefix_sum[l - 1] # Determine the maximum frequency in the range freq_map = defaultdict(int) max_freq = 0 for i in range(l - 1, r): freq_map[array[i]] += 1 if freq_map[array[i]] > max_freq: max_freq = freq_map[array[i]] results.append((total_sum, max_freq)) return results"},{"question":"# Zombie Apocalypse Supplies During a world-wide zombie apocalypse, you are the leader of a group of survivors. To ensure the survival of your group, you need to distribute supplies equally. Each supply kit is a string representing a combination of essential items, each denoted by a unique single character (e.g., \'W\' for water, \'F\' for food, \'M\' for medicine). However, it\'s crucial to check if the supply kits are consistent by making sure the counts of the items are the same. # Problem Given a list of supply kits, determine if all kits contain the exact same items and counts. If they do, return `True`. Otherwise, return `False`. # Input * A list of strings where each string represents a kit with item counts (e.g., \\"WWFFMM\\" represents 2 water, 2 food, 2 medicine). # Output * A boolean value: `True` if all supply kits are consistent in terms of items and counts, otherwise `False`. # Example ```python kits = [\\"WWFFMM\\", \\"MMFFWW\\", \\"WWMMFF\\"] # All kits have the same items with the same count. # So the output should be True. kits = [\\"WWFFMM\\", \\"MMFFWW\\", \\"WWMF\\"] # The third kit has a different set of items and/or counts. # So the output should be False. ``` ```python def are_kits_consistent(kits): # Your code goes here print(are_kits_consistent([\\"WWFFMM\\", \\"MMFFWW\\", \\"WWMMFF\\"])) # True print(are_kits_consistent([\\"WWFFMM\\", \\"MMFFWW\\", \\"WWMF\\"])) # False ```","solution":"from collections import Counter def are_kits_consistent(kits): Check if all supply kits are consistent in terms of items and counts. Args: kits (list of str): List of strings representing the supply kits. Returns: bool: True if all kits are consistent, False otherwise. if not kits: return True first_kit_counter = Counter(kits[0]) for kit in kits[1:]: if Counter(kit) != first_kit_counter: return False return True"},{"question":"You are given a sequence of N integers A_1, A_2, ..., A_N. You need to process Q queries, where each query contains two parameters L and R; you are to determine the number of distinct elements in the subarray from index L to R (inclusive). ------ Input ------ The first line of the input contains two space-separated integers N and Q denoting the number of elements in A and the number of queries respectively. The second line contains N space-separated integers A_1, A_2, ..., A_N. Each of the next Q lines contains two space-separated integers L and R that describe one query. ------ Output ------ For each query, print a single line containing one integer — the number of distinct elements in the subarray from index L to R. ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^4 1 ≤ A_i ≤ 10^9 for each valid i 1 ≤ L ≤ R ≤ N ------ Sample Input 1 ------ 5 3 1 2 2 1 3 1 3 2 5 1 5 ------ Sample Output 1 ------ 2 3 3","solution":"def number_of_distinct_elements(N, Q, array, queries): Returns a list of the number of distinct elements in the subarrays defined by the queries. results = [] for L, R in queries: subarray = array[L-1:R] distinct_count = len(set(subarray)) results.append(distinct_count) return results"},{"question":"Create a function that accepts a string consisting of words separated by spaces. The function should return a new string where each word\'s characters are k-spaced apart by inserting k-1 spaces between them, where k is the position of the word in the input string (1-based index). Constrain the value of k to be within the length of the word. Example: k_spaced_words(\\"hello world code assessment\\") For the first word (k=1): \'hello\' remains \'hello\' (k-1 = 0 spaces between characters) For the second word (k=2): \'world\' becomes \'w o r l d\' (k-1 = 1 space between characters) For the third word (k=3): \'code\' becomes \'c o d e\' (k-1 = 2 spaces between characters, constraining to 3 spaces) For the fourth word (k=4): \'assessment\' becomes \'a s s e s s m e n t\' (k-1 = 3 spaces between characters) Output: \\"hello w o r l d c o d e a s s e s s m e n t\\"","solution":"def k_spaced_words(input_string): Transform each word by spacing its characters k-1 spaces apart, where k is the position of the word. Constraints: k is within the length of the word. Args: input_string: str - A string of words separated by spaces Returns: str - A transformed string where each word\'s characters are k-spaced apart words = input_string.split() spaced_words = [] for i, word in enumerate(words): k = i + 1 spaces_between = min(k - 1, len(word) - 1) spaced_word = \' \' * spaces_between spaced_word = spaced_word.join(word) spaced_words.append(spaced_word) return \' \'.join(spaced_words)"},{"question":"Write a function named `reverse_words` that takes a string input consisting of multiple words and returns a new string with each word reversed, but with the original word order retained. For example, given the input \\"hello world\\", the function should return \\"olleh dlrow\\". The function should handle punctuation marks and whitespace correctly. **Example:** ``` Input: \\"This is a test.\\" Output: \\"sihT si a .tset\\" Input: \\"Coding assessments are fun!\\" Output: \\"gnidoC stnemssessa era !nuf\\" ```","solution":"def reverse_words(s): Returns a new string with each word reversed, but with the original word order retained. # Split the string into words words = s.split() # Reverse each word reversed_words = [word[::-1] for word in words] # Join the reversed words back into a single string return \' \'.join(reversed_words)"},{"question":"In a city where people like to move in straight lines, there exists a robot that can only move in four directions: north, south, east, and west. The robot starts at the origin (0, 0) and makes exactly N moves towards one of the four directions. Each move is determined by an equal probability. Given an integer N, your task is to determine the number of unique positions the robot can be at after making exactly N moves. Two positions (x1, y1) and (x2, y2) are considered unique if and only if x1 is not equal to x2 or y1 is not equal to y2. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single line of input, containing a single integer N. ------ Output Format ------ For each test case, output a single line containing the answer - the number of unique positions the robot can be at after making exactly N moves. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 30 ------ Sample Input 1 ------ 3 1 2 3 ------ Sample Output 1 ------ 4 9 16 ------ Explanation 1 ------ Test Case 1: - The possible positions after 1 move are: (1, 0), (-1, 0), (0, 1), and (0, -1). Hence, there are 4 unique positions. Test Case 2: - The possible positions after 2 moves are: (2, 0), (-2, 0), (0, 2), (0, -2), (1, 1), (1, -1), (-1, 1), and (-1, -1). Additionally, the robot can return to the origin (0, 0). In total, there are 9 unique positions. Test Case 3: - Similarly, for N=3, you can derive that there will be a total of 16 unique positions.","solution":"def unique_positions(N): Returns the number of unique positions the robot can be at after making exactly N moves. return (N + 1) ** 2"},{"question":"Nina loves sequences and math problems. She came across an interesting concept called the \\"Digital Root\\" of a number. The digital root of a number is obtained by an iterative process of summing the digits, until a single-digit is obtained. For instance, consider the number 1729: 1. Sum of digits: 1 + 7 + 2 + 9 = 19 2. Sum of digits of 19: 1 + 9 = 10 3. Sum of digits of 10: 1 + 0 = 1 Thus, the digital root of 1729 is 1. Nina is given multiple large numbers, and she needs to find the digital root for each. Write a program to help Nina find the digital roots of the given numbers. Input Format First line contains T, the number of testcases. Each of the next T lines contains an integer number N. Constraints 1leq Tleq100 0leq N<10^{1000} Output Format Print the digital root for each number in a new line. Sample Input 3 1729 12345 987654321 Sample Output 1 6 9 Explanation First testcase: N = 1729 Digital root = 1 Second testcase: N = 12345 1 + 2 + 3 + 4 + 5 = 15 1 + 5 = 6 Digital root = 6 Third testcase: N = 987654321 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 = 45 4 + 5 = 9 Digital root = 9","solution":"def digital_root(n): Returns the digital root of a number n. while n >= 10: n = sum(int(digit) for digit in str(n)) return n def digital_roots(numbers): Given a list of numbers, returns the digital root for each number. results = [] for number in numbers: results.append(digital_root(int(number))) return results"},{"question":"Given a list of integers, find the largest number possible by combining these integers into a single number. The order in which the integers are combined matters, and you should ensure that the combination forms the highest possible number. For instance, given integers [3, 30, 34, 5, 9], the best combination is \\"9534330\\". Example 1: Input: [10, 2] Output: \\"210\\" Example 2: Input: [3, 30, 34, 5, 9] Output: \\"9534330\\" Example 3: Input: [1] Output: \\"1\\" Example 4: Input: [10] Output: \\"10\\" Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function largestNumber() that takes a list of integers and returns a string representing the largest number that can be formed by combining the elements of the list in the most optimal order. Expected Time Complexity: O(NLogN). Expected Auxiliary Space: O(N). Constraints: 1 ≤ len(nums) ≤ 100 0 ≤ nums[i] ≤ 10^9","solution":"from functools import cmp_to_key def largestNumber(nums): Given a list of integers, return the largest number formed by combining them into a single number. # Custom comparator def compare(x, y): if x + y > y + x: return -1 # x should come before y elif x + y < y + x: return 1 # y should come before x else: return 0 # they are equal in terms of concatenation # Convert integers to strings to prepare for comparison str_nums = list(map(str, nums)) # Sort using the custom comparator sorted_nums = sorted(str_nums, key=cmp_to_key(compare)) # Edge case: Check if the largest number is 0 (to handle [0, 0]) if sorted_nums[0] == \'0\': return \'0\' # Join the sorted list into a single string return \'\'.join(sorted_nums)"},{"question":"Daniel loves to play with strings. He has a special interest in palindromes. A palindrome is a string that reads the same forwards and backwards. Given a string S of length N, Daniel wants to find the length of the longest palindromic substring in S. ------ Input: ------ The first line of the input contains a single integer T denoting the number of test cases. The first line of each test case consists of a single integer N, denoting the length of the string S. The second line of each test case contains a string S of length N consisting of lowercase English letters. ------ Output: ------ For each test case, output a single line denoting the length of the longest palindromic substring in S. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 ----- Sample Input 2 ------ 2 5 ababa 3 abc ----- Sample Output 2 ------ 5 1 ----- explanation 2 ------ Example case 1: The entire string \\"ababa\\" is a palindrome, so the longest palindromic substring has a length of 5. Example case 2: The longest palindromic substring in \\"abc\\" is any single character like \\"a\\", \\"b\\", or \\"c\\", hence the length is 1.","solution":"def longest_palindromic_substring(S): Returns the length of the longest palindromic substring of S. N = len(S) if N == 0: return 0 dp = [[False] * N for _ in range(N)] max_length = 1 for i in range(N): dp[i][i] = True start = 0 for i in range(N - 1): if S[i] == S[i + 1]: dp[i][i + 1] = True start = i max_length = 2 for k in range(3, N + 1): for i in range(N - k + 1): j = i + k - 1 if dp[i + 1][j - 1] and S[i] == S[j]: dp[i][j] = True if k > max_length: start = i max_length = k return max_length def process_inputs(T, test_cases): results = [] for i in range(T): N, S = test_cases[i] results.append(longest_palindromic_substring(S)) return results"},{"question":"You are given a series of events occurring on different days, and each event happens only once. Your task is to determine how many unique event dates exist within a given range of dates. Write a program to process the following types of operations: 1. Add(event_date): Insert the event_date into the set of event dates. 2. Query(start_date, end_date): Return the count of unique event dates within the inclusive range [start_date, end_date]. Input The first line contains an integer n (1 ≤ n ≤ 100,000), representing the number of operations you need to process. Each of the next n lines contains one of the two types of operations described above. - If the operation is \\"Add\\", it will be followed by a single date in the format YYYYMMDD (e.g., 20231105). - If the operation is \\"Query\\", it will be followed by two dates in the format YYYYMMDD representing start_date and end_date respectively. Output For each Query operation, output the result on a new line. Examples Input 7 Add 20230101 Add 20230102 Query 20230101 20230103 Add 20230101 Query 20230101 20230101 Add 20230301 Query 20230101 20231231 Output 2 1 3 Note The first query asks for the number of unique dates between 20230101 and 20230103, which are 20230101 and 20230102, so the answer is 2. The second query asks for the number of unique dates on 20230101, which is just 20230101 itself, so the answer is 1. The third query asks for the unique dates from the start of 2023 until the end of 2023, which includes 20230101, 20230102, and 20230301, so the answer is 3.","solution":"from bisect import bisect_left, bisect_right class EventManager: def __init__(self): self.event_dates = set() def add_event_date(self, event_date): self.event_dates.add(event_date) def query_unique_dates(self, start_date, end_date): sorted_dates = sorted(self.event_dates) start_index = bisect_left(sorted_dates, start_date) end_index = bisect_right(sorted_dates, end_date) return len(sorted_dates[start_index:end_index]) def process_operations(operations): event_manager = EventManager() result = [] for operation in operations: if operation[0] == \\"Add\\": event_manager.add_event_date(int(operation[1])) elif operation[0] == \\"Query\\": result.append(event_manager.query_unique_dates(int(operation[1]), int(operation[2]))) return result"},{"question":"Given a grid of size N x N filled with positive integers, you are initially positioned at the top-left corner of the grid (grid[0][0]) and your goal is to find a path to reach the bottom-right corner (grid[N-1][N-1]) with the minimum sum. You can only move either down or right at any point in time. Implement a function minimumPathSum(N, grid) which takes the size N and the grid as input parameters and returns the minimum sum possible to reach the bottom-right corner of the grid from the top-left corner. Example 1: Input: N = 3 Grid = {{1, 3, 1}, {1, 5, 1}, {4, 2, 1}} Output: 7 Explanation: The path 1 → 3 → 1 → 1 → 1 minimizes the sum to 7. Example 2: Input: N = 2 Grid = {{1, 2}, {1, 1}} Output: 3 Explanation: The path 1 → 1 → 1 minimizes the sum to 3. Your Task: You do not need to read input or print anything. Your task is to complete the function minimumPathSum() which takes the size N and the grid as input parameters and returns the minimum sum possible. Expected Time Complexity: O(N*N) Expected Auxiliary Space: O(N*N) Constraints: 1 ≤ N ≤ 100 1 ≤ grid[i][j] ≤ 100","solution":"def minimumPathSum(N, grid): Returns the minimum sum path from the top-left to the bottom-right of the grid. :param N: Size of the grid (N x N) :param grid: 2D list of positive integers representing the grid. :return: Minimum sum path from grid[0][0] to grid[N-1][N-1] # Create a dp array to store the minimum path sum up to each cell dp = [[0] * N for _ in range(N)] dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, N): for j in range(1, N): dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]) # The value in the bottom-right corner is the minimum path sum return dp[N-1][N-1]"},{"question":"Given a list of integers, your task is to find the smallest integer that appears an even number of times in the list. If no such integer exists, return -1. Input: The first line contains an integer T, denoting the number of test cases. Each test case consists of two lines: - The first line contains an integer n, denoting the number of integers in the test case. - The second line contains n space-separated integers. Output: For each test case, output the smallest integer that appears an even number of times. If no integer appears an even number of times, output -1. Constraints: 1 <= T <= 10 1 <= n <= 1000 -10000 <= integers <= 10000 SAMPLE INPUT 2 5 4 3 2 2 3 4 1 2 3 4 SAMPLE OUTPUT 2 -1","solution":"def smallest_even_occurrence(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] count = {} for num in arr: if num in count: count[num] += 1 else: count[num] = 1 smallest_even = float(\'inf\') for num, c in count.items(): if c % 2 == 0: if num < smallest_even: smallest_even = num if smallest_even == float(\'inf\'): results.append(-1) else: results.append(smallest_even) return results"},{"question":"Given a sequence of N integers, determine if it contains an increasing subsequence of length 3. An increasing subsequence is a sequence of numbers such that each number is greater than the one before it. Concept A subsequence is a sequence derived by removing some or none of the elements from a list without changing their order. To find an increasing subsequence of length 3, you need to ensure there are any three elements where the first is smaller than the second, and the second is smaller than the third. For example, given the list [5, 1, 5, 3, 2, 5, 4], the subsequence [1, 3, 4] is an increasing subsequence of length 3. Complete the function is_triple_increasing_subsequence in the editor below. is_triple_increasing_subsequence has the following parameter: - int sequence: a list of integers Returns: - boolean: `True` if there is an increasing subsequence of length 3, `False` otherwise Input Format The first line of input contains a single integer N, the number of elements in the sequence. The second line contains N space-separated integers. Constraints 1 leq N leq 10^5 -10^9 leq text{sequence}[i] leq 10^9 Sample Input 7 5 1 5 3 2 5 4 Sample Output True","solution":"def is_triple_increasing_subsequence(sequence): Determines if there is an increasing subsequence of length 3. Args: sequence (list of int): A list of integers. Returns: bool: True if there is an increasing subsequence of length 3, False otherwise. if len(sequence) < 3: return False first = second = float(\'inf\') for num in sequence: if num <= first: first = num elif num <= second: second = num else: return True return False"},{"question":"You are given a string containing characters \'a\' and \'b\' only. You can perform the following operation any number of times: select a sub-string \\"ab\\" and delete it to obtain a new string. Your task is to determine the minimum possible length of the string that can be obtained after performing the operation any number of times. Input The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 100) consisting of characters \'a\' and \'b\' only. Output For each test case, print the minimum possible length of the string that can be obtained. Examples Input 3 abba ababab aaaa Output 0 0 4","solution":"def min_length_after_deletions(test_cases): Returns the minimum possible length of the string after performing any number of \\"ab\\" deletions. :param test_cases: List of input strings :return: List of minimum possible lengths for each input string results = [] for s in test_cases: count_a = s.count(\'a\') count_b = s.count(\'b\') min_length = abs(count_a - count_b) results.append(min_length) return results def process_input(t, cases): return min_length_after_deletions(cases)"},{"question":"Given a sorted array of integers, write a function that returns a sorted array of the squares of each number. Example 1: Input: [-4, -1, 0, 3, 10] Output: [0, 1, 9, 16, 100] Example 2: Input: [-7, -3, 2, 3, 11] Output: [4, 9, 9, 49, 121] Note: 1. The input array can contain negative numbers. 2. The input array will have at least one number. 3. The output array must also be sorted in non-decreasing order.","solution":"def sorted_squares(nums): Given a sorted array of integers, returns a sorted array of the squares of each number. return sorted(x*x for x in nums)"},{"question":"Given a string consisting of lowercase Latin letters, you need to perform a specific operation multiple times. In each operation, you can pick any two adjacent letters and remove one of them. Your task is to determine the minimum number of operations to make all remaining characters in the string unique. For example: Consider the string \\"aabbcc\\". After three operations, it can become \\"abc\\" (remove one \'a\', one \'b\', and one \'c\'). Given multiple test cases, for each test case, you need to find the minimum number of adjacent removals so that each character in the string appears at most once. -----Input----- The first line contains an integer t (1 le t le 10^4), the number of test cases. Each of the next t lines contains a non-empty string s. The length of each string does not exceed 10^5. The total length of all strings does not exceed 10^6. -----Output----- For each test case, print a single integer — the minimum number of adjacent removals needed. -----Examples----- Input 5 aabbcc abcabc aabb abc a Output 3 3 2 0 0 -----Explanation----- - In the first test case, you can make \\"aabbcc\\" unique by removing one \'a\', one \'b\', and one \'c\'. - In the second test case, \\"abcabc\\" can be made unique by removing any three adjacent duplicates to get \\"abc\\". - In the third test case, you can remove one \'a\' and one \'b\' from \\"aabb\\" to make it \\"ab\\". - In the fourth test case, \\"abc\\" is already unique, so no operation is needed. - The fifth test case is \\"a\\" which is already unique, so no operation is needed.","solution":"def min_operations_to_unique_chars(s): Calculates the minimum number of adjacent removals needed to make all characters in the string unique. if not s: return 0 char_count = dict() for char in s: if char not in char_count: char_count[char] = 0 char_count[char] += 1 total_removals = 0 for count in char_count.values(): if count > 1: total_removals += (count - 1) return total_removals def process_test_cases(test_cases): Process multiple test cases and returns their results as a list of integers. results = [] for s in test_cases: results.append(min_operations_to_unique_chars(s)) return results"},{"question":"problem In a bustling metropolis, there is a special subway line that runs in a straight line connecting various stations. The subway system is planned such that the stations are numbered consecutively from 1 to N along the line, and each station i is located at a specific coordinate xi on the line. Due to a festival, the city administration wants to install decorations along the subway line on certain segments. For this purpose, they are given M decoration plans. Each decoration plan defines a contiguous segment of the subway line between stations. Your task is to help the city administration determine the total length of the subway line that will have decorations, considering all the decoration plans. Note that if multiple decoration plans overlap, the overlapped part should be counted only once. The input is as follows: - The first line consists of two integers N and M (1 ≤ N, M ≤ 200), where N is the number of stations, and M is the number of decoration plans. - The second line consists of N integers x1, x2, ..., xN (1 ≤ xi ≤ 1000), where xi represents the coordinate of station i. These coordinates are in non-decreasing order (i.e., x1 ≤ x2 ≤ ... ≤ xN). - The following M lines each contain two integers si and ei (1 ≤ si ≤ ei ≤ N), which define a segment from station si to station ei that will be decorated. Output the total length of the subway line that will have decorations. Example: Input 5 3 1 3 6 10 15 1 3 2 4 3 5 Output 14 Explanation: The decorations cover segments [1, 6], [3, 10], and [6, 15]. The total decorated length is: - From 1 to 6: 5 units - From 3 to 10: 7 units (1 unit overlaps with the first segment) - From 6 to 15: 9 units (3 units overlap with the first and second segments) Thus, the total length of the line with decorations is 14 units.","solution":"def calculate_decorated_length(N, M, coordinates, decoration_plans): Calculates the total length of the subway line decorated based on given decoration plans. Parameters: N (int): Number of stations. M (int): Number of decoration plans. coordinates (list of int): Coordinates of the stations. decoration_plans (list of tuples): Each tuple contains two integers (si, ei) representing the decoration plan. Returns: int: Total length of the decorated subway line. decorated_segments = [] # Convert decoration plans to segments in terms of coordinates for si, ei in decoration_plans: # si and ei are 1-based indices decorated_segments.append((coordinates[si-1], coordinates[ei-1])) # Merge overlapping intervals decorated_segments.sort() merged_segments = [] for segment in decorated_segments: if not merged_segments or merged_segments[-1][1] < segment[0]: merged_segments.append(segment) else: merged_segments[-1] = (merged_segments[-1][0], max(merged_segments[-1][1], segment[1])) # Calculate total length of merged segments total_length = 0 for start, end in merged_segments: total_length += end - start return total_length"},{"question":"You are given a list of words and your task is to find the longest word in the list that can be formed by deleting some characters of a given string s without reordering the remaining characters. If there are multiple possible results, return the longest word in the list. If there are still multiple results, return the one which appears first in the list. Input The first line contains the string s, consisting of lower-case Latin letters. The next line contains an integer n, followed by n words, each consisting of lower-case Latin letters. Output Output the longest word you can form from s, or an empty string if no words can be formed. Examples Input abpcplea 3 apple monkey plea Output apple Input abpcplea 4 a b c d Output a","solution":"def is_subsequence(s, word): Helper function to check if word can be formed by deleting some characters from s. it = iter(s) return all(char in it for char in word) def longest_word_in_list(s, word_list): Returns the longest word that can be formed by deleting some characters of the string s and without reordering the remaining characters. If there are multiple possible results, return the longest word. If there are still multiple results, return the one which appears first in the list. longest_word = \\"\\" for word in word_list: if is_subsequence(s, word): if len(word) > len(longest_word) or (len(word) == len(longest_word) and word_list.index(word) < word_list.index(longest_word)): longest_word = word return longest_word"},{"question":"Alice and Bob are playing a game with a sequence of numbers. The sequence is initially empty, and the game proceeds in turns. On each turn, one of them can choose any natural number and append it to the end of the sequence. The game ends when the sequence contains exactly N numbers. The winner is determined based on the final sum of the sequence: - If the sum of the numbers in the sequence is even, Alice wins. - If the sum of the numbers in the sequence is odd, Bob wins. Given that both Alice and Bob play optimally and Alice always goes first, can you determine who will win the game? -----Input----- The first line of input contains a single integer T, the number of test cases. Each of the next T lines contains a single integer N. -----Output----- For each test case, print the winner of the game (\\"Alice\\" or \\"Bob\\"). -----Constraints and notes----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^9 The players take optimal steps to ensure their victory if it is possible. -----Example----- Input: 3 1 2 3 Output: Bob Alice Bob -----Explanation----- For the first test case, since N is 1, Alice will pick the first number. No matter what number she picks, the sum will be the value of that number, so if the number is odd, the sum will be odd, and Bob wins. For the second test case, with N being 2, Alice can ensure the total sum of the sequence is even. She can pick two even numbers or an even number followed by an odd number. For the third test case, Alice can start with an arbitrary number, and no matter how optimally she and Bob play after that, the sum will end up being odd due to the sequence containing an odd number of turns, so Bob wins again.","solution":"def determine_winner(N): Determine the winner of the game. Parameters: N : int : The length of the sequence. Returns: str : \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins. # Alice wins if N is even, Bob wins if N is odd if N % 2 == 0: return \\"Alice\\" else: return \\"Bob\\" def solve_game(T, test_cases): results = [] for N in test_cases: results.append(determine_winner(N)) return results"},{"question":"Implement a function that takes a valid Roman numeral as input and converts it to its equivalent integer value. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. Symbol | Value ------ | ----- I | 1 V | 5 X | 10 L | 50 C | 100 D | 500 M | 1000 Roman numerals are usually written from largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Given a Roman numeral, convert it to an integer. # Example: **Input:** \\"MCMXCIV\\" **Output:** 1994","solution":"def roman_to_int(s): Convert a valid Roman numeral to its integer equivalent. :param s: Roman numeral as a string :return: Integer equivalent of the Roman numeral roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Task: Write a function called `merge_dicts` that takes two dictionaries as input and returns a single dictionary. The function should merge the dictionaries such that if there are matching keys in both dictionaries, their values should be summed. If a key exists in only one of the dictionaries, it should appear in the resulting dictionary with its value unchanged. Edge Cases to Consider: 1. If either of the dictionaries is empty, the function should return the non-empty dictionary. 2. If both dictionaries are empty, the function should return an empty dictionary. Examples: ```python merge_dicts({\\"a\\": 1, \\"b\\": 2}, {\\"b\\": 3, \\"c\\": 4}) # Output: {\\"a\\": 1, \\"b\\": 5, \\"c\\": 4} merge_dicts({\\"x\\": 5}, {\\"x\\": -5, \\"y\\": 7}) # Output: {\\"x\\": 0, \\"y\\": 7} merge_dicts({}, {\\"a\\": 1, \\"b\\": 2}) # Output: {\\"a\\": 1, \\"b\\": 2} merge_dicts({}, {}) # Output: {} ``` Notes: - You may assume that all keys in the input dictionaries are strings and all values are integers.","solution":"def merge_dicts(dict1, dict2): Merges two dictionaries by summing the values of matching keys. If a key exists in only one dictionary, it appears in the resulting dictionary with its value unchanged. result = dict1.copy() # Start with a copy of the first dictionary for key, value in dict2.items(): if key in result: result[key] += value # Sum the values if the key exists in both dictionaries else: result[key] = value # Add the key-value pair if it does not exist in the first dictionary return result"},{"question":"You are given an array of positive integers representing the heights of buildings on a 2D skyline. The goal is to draw an outline of the buildings, combining overlapping and adjacent buildings into a single outline. Each building is represented by a tuple of three integers (start, end, height), describing the horizontal start position, the horizontal end position, and the height of the building. The end position is exclusive, meaning that the building spans from start to end-1. Write a function to compute the skyline formed by these buildings. The skyline should be a list of \\"key points\\" (start position, height) that describes the outline. The list of key points should be represented as tuples and sorted by the start position. Each tuple represents a point where the height of the skyline changes. Input - The first line of input contains a single integer `n` (1 ≤ n ≤ 1000), the number of buildings. - The next `n` lines each contain three integers `start`, `end`, and `height` (1 ≤ start < end ≤ 10000, 1 ≤ height ≤ 1000), describing each building. Output - Print the key points of the skyline. Each key point should be printed on a new line, represented by two integers `x` and `y` (1 ≤ x ≤ 10000, 0 ≤ y ≤ 1000). Examples Input 3 2 9 10 3 7 15 5 12 12 Output 2 10 3 15 7 12 12 0 Input 4 1 3 3 2 4 4 5 6 1 4 5 2 Output 1 3 2 4 4 2 5 1 6 0","solution":"def compute_skyline(buildings): This function takes a list of buildings represented by tuples (start, end, height) and returns the skyline formed by these buildings as a list of key points (x, height). events = [] for (start, end, height) in buildings: events.append((start, -height)) events.append((end, height)) # Sort events, prioritizing by x position, and then by height: events.sort(key=lambda x: (x[0], x[1])) result = [] heights = {0} prev_max_height = 0 for x, h in events: if h < 0: # Building start point heights.add(-h) else: # Building end point heights.remove(h) current_max_height = max(heights) if current_max_height != prev_max_height: result.append((x, current_max_height)) prev_max_height = current_max_height return result"},{"question":"The Circular Garden In a city park, there is a circular garden. The garden contains several sections, each with a certain number of flowers. The flowers in each section bloom sequentially, one after another, in circular order. Each section has a unique position in the circle, and the blooming starts at a certain section. The blooming of flowers follows the pattern: flowers in the current section bloom, then the next section\'s flowers bloom, and so forth, continuing in a circular manner until the starting section is reached again. Given the number of sections n, the number of flowers in each section f_i, and the starting section s, determine the total number of flowers that will bloom in the circular sequence. Input The input consists of a single test case of the following format. n f_1 ... f_n s An integer n in the first line is the number of sections (1 leq n leq 100,000). Integers f_1 through f_n in the second line are the number of flowers in each section (0 leq f_i leq 1,000). An integer s in the third line is the starting section (1 ≤ s ≤ n). Output Output a single integer, the total number of flowers that will bloom in the circular sequence starting from section s. Sample Input 1 5 3 0 4 2 5 3 Sample Output 1 14 Sample Input 2 4 5 1 3 6 2 Sample Output 2 15 Sample Input 3 6 7 3 0 2 1 4 6 Sample Output 3 17 Sample Input 4 3 8 8 8 1 Sample Output 4 24 Explanation In Sample Input 1, the blooming starts from section 3, continues to section 4, then section 5, and wraps around back to section 1 and section 2. Thus, the total number of flowers that bloom is 4 + 2 + 5 + 3 + 0 = 14. In Sample Input 2, the blooming starts from section 2, continues to section 3, then section 4, and wraps around back to section 1. Thus, the total number of flowers that bloom is 1 + 3 + 6 + 5 = 15.","solution":"def total_blooming_flowers(n, flowers, s): Calculate the total number of blooming flowers in circular garden starting from section s. Parameters: n (int): Number of sections flowers (list of int): Number of flowers in each section s (int): Starting section index (1-based) Returns: int: Total number of blooming flowers # Convert starting index to 0-based start_index = s - 1 total_flowers = 0 # Iterate through the sections in circular manner for i in range(n): total_flowers += flowers[(start_index + i) % n] return total_flowers"},{"question":"Bob is planning a secret hike with his friends through the forest. He wants to create a path that visits each point of interest exactly once and returns to the starting point, forming a complete loop. To make sure his hike is well-planned, he decides to compute the total distance of the path. However, he needs your help to find the shortest possible path using a given list of distances between the points of interest. ----- Input ----- The first line contains a single integer n (2 leq n leq 10) representing the number of points of interest, including the starting point. The next n lines each contain n space-separated integers d_{ij} (0 leq d_{ij} leq 100), where d_{ij} represents the distance between point i and point j. It is guaranteed that d_{ij} = d_{ji} and d_{ii} = 0. ----- Output ----- Print a single integer, the total distance of the shortest path that visits each point exactly once and returns to the starting point. ----- Examples ----- Sample Input: 3 0 29 20 29 0 15 20 15 0 Sample Output: 64","solution":"import itertools def shortest_hike_path(n, distances): Return the total distance of the shortest path that visits each point exactly once and returns to the starting point. :param n: Number of points of interest :param distances: A list of lists where distances[i][j] is the distance from point i to point j :return: Total distance of the shortest path points = range(n) min_path_cost = float(\'inf\') for perm in itertools.permutations(points): current_cost = 0 for i in range(n): current_cost += distances[perm[i]][perm[(i + 1) % n]] min_path_cost = min(min_path_cost, current_cost) return min_path_cost"},{"question":"Implement a function called `rotate_matrix_90_degrees` that takes a 2D list (matrix) as input and rotates the matrix 90 degrees clockwise. # Input - A 2D list of integers representing the matrix to be rotated. Each element of the matrix is an integer. - You can assume the matrix is non-empty and has n x n dimensions (the number of rows is equal to the number of columns). # Output - The function should return the rotated matrix. # Constraints - The dimensions of the matrix n can be between 1 and 100 inclusive. # Example Input ``` [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ``` Output ``` [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` # Notes - The top row of the input matrix becomes the last column of the output matrix. - The middle row of the input matrix becomes the middle column of the output matrix. - The last row of the input matrix becomes the first column of the output matrix. Example Explanation The matrix is rotated 90 degrees clockwise: ``` 1 2 3 7 4 1 4 5 6 -> 8 5 2 7 8 9 9 6 3 ``` # Function Signature ```python def rotate_matrix_90_degrees(matrix: List[List[int]]) -> List[List[int]]: pass ``` # Function Example Test ```python # Test the function with given example input_matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(rotate_matrix_90_degrees(input_matrix)) # Should output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ```","solution":"from typing import List def rotate_matrix_90_degrees(matrix: List[List[int]]) -> List[List[int]]: Rotates the input n x n matrix 90 degrees clockwise. n = len(matrix) # Create a new matrix to store the result rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix # Example test input_matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(rotate_matrix_90_degrees(input_matrix)) # Should output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ]"},{"question":"You are given a series of rectangular coordinates, representing the positions of some points on a 2D plane. Your task is to compute the minimum distance required to visit all these points in a sequence such that the distance traveled between consecutive points is minimized. You can move in any of the 8 possible directions (i.e., horizontal, vertical, or diagonal). Input Format: The first line contains an integer T, i.e., the number of test cases. For each test case: - The first line contains an integer N, the number of points. - The next N lines contain two integers x and y, representing the coordinates of each point. Output Format: A single line containing the minimum distance required to visit all points for each test case. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 50 -100 ≤ x, y ≤ 100 SAMPLE INPUT 2 3 1 1 3 3 5 5 2 10 10 20 20 SAMPLE OUTPUT 6 10 Explanation: For test case 1, (1, 1) -> (3, 3) -> (5, 5) results in a total minimum distance of 6. For test case 2, (10, 10) -> (20, 20) results in a total minimum distance of 10.","solution":"def min_distance(points): Calculate the minimum distance to visit all the points in a sequence. def distance(p1, p2): Calculate the step distance between two points considering movements in 8 possible directions (horizontal, vertical, diagonal). return max(abs(p1[0] - p2[0]), abs(p1[1] - p2[1])) total_distance = 0 for i in range(len(points) - 1): total_distance += distance(points[i], points[i+1]) return total_distance def solve(t, test_cases): results = [] for i in range(t): points = test_cases[i] min_dist = min_distance(points) results.append(min_dist) return results"},{"question":"# Summary: Given a list of integers, `nums`, return the length of the longest subsequence such that all elements of the subsequence are in strictly increasing order. # Description: A subsequence is defined as a sequence that can be derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. - Create a function to find the length of such a subsequence. - You need only to return the length of the longest increasing subsequence. `1 <= len(nums) <= 2500` `-10^4 <= nums[i] <= 10^4` Examples: `nums == [10, 9, 2, 5, 3, 7, 101, 18]` would return `4`: The longest increasing subsequence is `[2, 3, 7, 101]`, so its length is `4`. `nums == [0, 1, 0, 3, 2, 3]` would return `4`: The longest increasing subsequence is `[0, 1, 2, 3]`, so its length is `4`. `nums == [7, 7, 7, 7, 7, 7, 7]` would return `1`: There are no increasing elements, so the length is `1`.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the list nums. if not nums: return 0 # dp array to store the length of the longest increasing subsequence dp = [1] * len(nums) # Loop through the list to fill the dp array for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence will be the maximum value in dp array return max(dp)"},{"question":"In a dystopian world, two rival factions, Alpha and Omega, engage in a battle to gather the most resources using drones. Each faction has an equal number of drones positioned on an n times n grid. Both factions take turns to move their drones to collect resources from cells in the grid. Alpha always moves first. The game ends when each cell in the grid has been visited by exactly one drone. The grid is described by an n times n matrix mathbf{G} where G_{i,j} denotes the amount of resources at cell (i, j). During each turn, a faction can choose any unvisited cell (i, j) for their drone to move to and collect the resources in that cell. Both factions aim to maximize their total collected resources, and they always move optimally. Given the value of n and the grid mathbf{G}, determine whether Alpha or Omega will collect the most resources, or if it will be a tie. Print textbf{Alpha} if Alpha will win, textbf{Omega} if Omega will win, or textbf{Tie} if both factions will collect an equal amount of resources. Input Format The first line of input contains a single integer, mathbf{T}, denoting the number of test cases. Each of the 2T subsequent lines describes a test case. A single test case is defined over the following two lines: An integer, n, denoting the number of rows and columns in the grid. An n times n matrix of integers, mathbf{G}, where each G_{i,j} describes the resources in the cell (i, j). Constraints 1 leq T leq 10 1 leq n leq 100 1 leq G_{i,j} leq 10^4 Output Format For each test case, print one of the following outcomes on a new line: Print textbf{Alpha} if Alpha will win. Print textbf{Omega} if Omega will win. Print textbf{Tie} if the two factions will collect an equal amount of resources. Sample Input 3 3 1 2 3 4 5 6 7 8 9 2 5 5 5 5 2 8 7 7 8 Sample Output Alpha Tie Tie Explanation Test Case 0: mathbf{G} = begin{pmatrix} 1 & 2 & 3 4 & 5 & 6 7 & 8 & 9 end{pmatrix} The drone moves as follows: Alpha chooses (2, 2) and collects 9 resources. Omega chooses (2, 1) and collects 8 resources. Alpha chooses (2, 0) and collects 7 resources. Omega chooses (1, 2) and collects 6 resources. Alpha chooses (1, 1) and collects 5 resources. Omega chooses (1, 0) and collects 4 resources. Alpha chooses (0, 2) and collects 3 resources. Omega chooses (0, 1) and collects 2 resources. Alpha chooses (0, 0) and collects 1 resource. Alpha collects a total of 25 resources, while Omega collects 20 resources. Therefore, Alpha wins, and we print textbf{Alpha}. Test Case 1: mathbf{G} = begin{pmatrix} 5 & 5 5 & 5 end{pmatrix} Every cell contains the same resources. Both factions will collect an equal amount, and we print textbf{Tie}. Test Case 2: mathbf{G} = begin{pmatrix} 8 & 7 7 & 8 end{pmatrix} No matter their choices, both factions will always end up with 15 resources each, resulting in a tie. Hence, we print textbf{Tie}.","solution":"def determine_winner(T, test_cases): results = [] for case in test_cases: n, grid = case resources = [cell for row in grid for cell in row] sorted_resources = sorted(resources, reverse=True) alpha_resources = sum(sorted_resources[i] for i in range(0, len(sorted_resources), 2)) omega_resources = sum(sorted_resources[i] for i in range(1, len(sorted_resources), 2)) if alpha_resources > omega_resources: results.append(\\"Alpha\\") elif alpha_resources < omega_resources: results.append(\\"Omega\\") else: results.append(\\"Tie\\") return results # Convert the input text to the function format. def parse_input(input_text): lines = input_text.strip().split(\'n\') index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): n = int(lines[index]) index += 1 grid = [] for _ in range(n): row = list(map(int, lines[index].split())) grid.append(row) index += 1 test_cases.append((n, grid)) return T, test_cases # Convert the function output to the output text format. def format_output(results): return \\"n\\".join(results) # Full solution integrating parsing and formatting. def main(input_text): T, test_cases = parse_input(input_text) results = determine_winner(T, test_cases) return format_output(results)"},{"question":"Given an array of n integers, the task is to find an integer x such that the sum of the absolute differences between x and all the elements in the array is minimized. If there are multiple values of x with the same minimum sum, the smallest x should be chosen. Example 1: Input: arr = [1, 2, 3] Output: 2 Explanation: The absolute differences when x = 2 are |1-2|, |2-2|, |3-2|. The sum is |1-2| + |2-2| + |3-2| = 1 + 0 + 1 = 2, which is the minimum sum of absolute differences. Example 2: Input: arr = [5, 6, 2, 4, 9] Output: 5 Explanation: The absolute differences when x = 5 are |5-5|, |6-5|, |2-5|, |4-5|, |9-5|. The sum is |5-5| + |6-5| + |2-5| + |4-5| + |9-5| = 0 + 1 + 3 + 1 + 4 = 9, which is the minimum sum of absolute differences. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minAbsSum() which takes an array arr of n integers as input and returns the integer x. Expected Time Complexity: O(n*log(n)) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^{5} -10^{6} <= arr[i] <= 10^{6}","solution":"def minAbsSum(arr): Returns the integer x such that the sum of the absolute differences between x and all the elements in the array is minimized. If there are multiple values of x with the same minimum sum, the smallest x is chosen. arr.sort() n = len(arr) # The element at the median minimizes the sum of absolute differences median = arr[n // 2] if n % 2 != 0 else arr[n // 2 - 1] return median"},{"question":"Polycarp is planning a new garden in which he wants to place flower beds. Each flower bed will be a rectangular plot. However, he doesn’t want any two flower beds to overlap. Each flower bed is defined by its bottom-left and top-right corner coordinates on a 2D plane. Polycarp wants to know how many flower beds can be placed without any overlaps. Write a program that, given the coordinates of the flower beds, determines the maximum number of non-overlapping flower beds that can be placed in the garden. -----Input----- The first line contains an integer n (1 ≤ n ≤ 200000) — the number of flower beds. The next n lines contain four integers x1, y1, x2, y2 (0 ≤ x1 < x2 ≤ 10^9, 0 ≤ y1 < y2 ≤ 10^9) representing the coordinates of the bottom-left (x1, y1) and top-right (x2, y2) corners of each flower bed. -----Output----- Print a single integer, the maximum number of non-overlapping flower beds that can be placed in the garden. -----Examples----- Input 3 1 1 3 3 2 2 4 4 5 5 6 6 Output 2 Input 4 0 0 2 2 1 1 3 3 3 3 5 5 2 2 4 4 Output 2 -----Note----- In the first example, there are three flower beds: - The first flower bed spans from (1, 1) to (3, 3) - The second flower bed spans from (2, 2) to (4, 4) - The third flower bed spans from (5, 5) to (6, 6) The only non-overlapping flower beds are the first and the third, so the output is 2. In the second example, flower beds (0,0)-(2,2) and (3,3)-(5,5) can be selected as non-overlapping, hence the maximum number of non-overlapping flower beds is 2.","solution":"def non_overlapping_flower_beds(n, beds): # Sort beds by their right side (x2) beds.sort(key=lambda x: x[2]) # Initialize variables count = 0 last_end = -1 # Iterate over the sorted beds for bed in beds: x1, y1, x2, y2 = bed if x1 >= last_end: # If the current bed does not overlap with the last selected bed count += 1 last_end = x2 return count"},{"question":"A renowned software development company has a peculiar way of organizing their employees in an office building composed of multiple rooms. The rooms are connected by corridors, and each room is equipped with several computers. To facilitate efficient communication and collaboration among the employees, the company wants to ensure that there is a way to communicate electronically between any two computers located in different rooms, via direct connections or a series of intermediate connections. To guarantee this, the IT department needs to determine the minimum number of new corridor connections required to make sure that all computers in the building are interconnected. A corridor connection between any two rooms allows direct communication between all computers in those rooms. The task is to compute the minimal number of additional corridors required to make the computer network connected. ----- Input ----- - One line with a single integer N (2 leq N leq 1000) – the number of rooms. - One line with a single integer M (0 leq M leq N(N-1)/2) – the number of existing corridors between the rooms. - M lines each containing two integers u and v (0 leq u, v < N) denoting that there is a corridor between room u and room v. ----- Output ----- - One line with a single integer - the minimum number of additional corridors needed to ensure that every computer in every room can communicate with each other. ----- Examples ----- Sample Input: 4 2 0 1 2 3 Sample Output: 1 Sample Input: 5 3 0 2 0 3 1 4 Sample Output: 1 Sample Input: 3 0 Sample Output: 2","solution":"def find_min_additional_corridors(N, M, corridors): from collections import defaultdict def dfs(node, visited, graph): stack = [node] while stack: curr = stack.pop() if not visited[curr]: visited[curr] = True for neighbor in graph[curr]: if not visited[neighbor]: stack.append(neighbor) graph = defaultdict(list) for u, v in corridors: graph[u].append(v) graph[v].append(u) visited = [False] * N connected_components = 0 for i in range(N): if not visited[i]: dfs(i, visited, graph) connected_components += 1 return connected_components - 1"},{"question":"Given a string, you are tasked with finding the first non-repeating character in it and returning its index. If all characters in the string are repeating, return -1. The string contains only lowercase English letters. INPUT First line contains an integer T, the number of test cases. Each of the next T lines contains a string S. OUTPUT For each test case, output the index of the first non-repeating character. If there is no non-repeating character, output -1. Constraints 1 ≤ T ≤ 10^5 1 ≤ |S| ≤ 10^5 The sum of lengths of all strings combined does not exceed 10^6. SAMPLE INPUT 3 leetcode loveleetcode aabbccddeeff SAMPLE OUTPUT 0 2 -1 Explanation In the first test case, the first non-repeating character is \'l\' at index 0. In the second test case, the first non-repeating character is \'v\' at index 2. In the third test case, all characters are repeating, hence the result is -1.","solution":"def first_non_repeating_character_index(T, strings): Given a list of strings, this function returns a list with the index of the first non-repeating character for each string. If all characters are repeating, returns -1 for that string. results = [] for S in strings: # Dictionary to store the frequency of characters char_count = {} # Count occurrences of each character in the string for char in S: char_count[char] = char_count.get(char, 0) + 1 # Find the first character that appears only once found = False for index, char in enumerate(S): if char_count[char] == 1: results.append(index) found = True break # If there are no non-repeating characters if not found: results.append(-1) return results"},{"question":"In a fantasy soccer league, each team can consist of up to 11 players. The roles in the game are divided as follows: - F: Forward - M: Midfielder - D: Defender - G: Goalkeeper A valid team formation must contain: - At least 1 Forward - At least 1 Midfielder - At least 1 Defender - Exactly 1 Goalkeeper This means that a valid team formation must have at least one of each role and exactly one goalkeeper, while the total number of players should not exceed 11. You are given the number of players available in each role. Your task is to determine the maximum number of valid teams that can be formed with the given players. input The input consists of one dataset. The input data is given in the following format: N f1 m1 d1 g1 f2 m2 d2 g2 :: fN mN dN gN N (1 ≤ N ≤ 100) on the first line is the number of datasets. Each dataset is given on the subsequent N lines. Each line contains four integers: - fi (0 ≤ fi ≤ 1000) is the number of Forwards - mi (0 ≤ mi ≤ 1000) is the number of Midfielders - di (0 ≤ di ≤ 1000) is the number of Defenders - gi (0 ≤ gi ≤ 1000) is the number of Goalkeepers output Output the maximum number of teams that can be formed for each dataset on one line. Example Input 3 7 5 4 2 10 7 6 3 2 2 2 1 Output 2 3 1","solution":"def max_teams(f, m, d, g): Returns the maximum number of valid teams that can be formed. A valid team has: - At least 1 Forward - At least 1 Midfielder - At least 1 Defender - Exactly 1 Goalkeeper The sum of all players should not exceed 11 per team. # Calculate the maximum team by limiting with the minimum role count and the 11 players limit max_possible_teams = min(f, m, d, g) return max_possible_teams def calculate_max_teams(datasets): calculates the maximum number of valid teams for each dataset. :param datasets: List of datasets where each dataset is a tuple of (fi, mi, di, gi) :return: List of maximum number of teams for each dataset max_teams_count = [] for dataset in datasets: f, m, d, g = dataset max_teams_for_current_dataset = max_teams(f, m, d, g) max_teams_count.append(max_teams_for_current_dataset) return max_teams_count"},{"question":"You are given a series of events in a city\'s transportation system, where each event is either an addition or removal of a bus route between two locations. Each bus route is bidirectional. Your task is to determine how many disconnected groups (components) of locations exist after each event. Two locations are connected if there is a bus route directly connecting them, or if there is a series of bus routes connecting them through other locations. Input: The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of locations. The second line contains an integer `q` (1 ≤ q ≤ 10^5), the number of events. Each of the next `q` lines contains one of two possible types of events: - \\"+ u v\\": A bus route between location `u` and location `v` is added (1 ≤ u, v ≤ n, u ≠ v). - \\"- u v\\": The bus route between location `u` and location `v` is removed. It is guaranteed that no bus route between the same pair of locations will be added more than once without being removed, and any attempt to remove a non-existent bus route will be ignored. Output: For each event, output the number of disconnected groups of locations after processing that event. Examples: Input: 5 6 + 1 2 + 2 3 + 4 5 - 1 2 + 3 4 - 2 3 Output: 4 3 2 3 2 2","solution":"class DisjointSetUnion: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n self.count = n # Initially, each location is in its own component def find(self, x): if self.parent[x] != x: self.parent[x] = self.find(self.parent[x]) return self.parent[x] def union(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX != rootY: if self.rank[rootX] > self.rank[rootY]: self.parent[rootY] = rootX elif self.rank[rootX] < self.rank[rootY]: self.parent[rootX] = rootY else: self.parent[rootY] = rootX self.rank[rootX] += 1 self.count -= 1 def disconnect(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX == rootY: self.count += 1 self.parent[y] = y self.rank[rootY] -= 1 def process_events(n, events): dsu = DisjointSetUnion(n) results = [] added = {} for event in events: parts = event.split() if parts[0] == \'+\': u, v = int(parts[1]) - 1, int(parts[2]) - 1 # Adjusting index for 0-based if (u, v) not in added: dsu.union(u, v) added[(u, v)] = True added[(v, u)] = True elif parts[0] == \'-\': u, v = int(parts[1]) - 1, int(parts[2]) - 1 if (u, v) in added: dsu.disconnect(u, v) del added[(u, v)] del added[(v, u)] results.append(dsu.count) return results"},{"question":"Alice loves playing with strings. Today, she has come up with the following problem that she wants you to solve: Given a string `s` consisting of lowercase English alphabets, you need to determine if it is possible to rearrange the characters of `s` to form a string that does not contain any two adjacent characters that are the same. If it is possible, return any valid rearrangement of the string. If it is impossible, return \\"IMPOSSIBLE\\". -----Input----- - The first line contains an integer `T` (1 ≤ T ≤ 10) representing the number of test cases. - Each of the next `T` lines contains a string `s` (1 ≤ |s| ≤ 100), a string of lowercase English alphabets. -----Output----- - For each test case, output a single line containing a rearrangement of the string if possible, otherwise, output \\"IMPOSSIBLE\\". -----Examples----- Input 3 aabb aaab abc Output abab IMPOSSIBLE abc -----Note----- In the first test case, \\"aabb\\" can be rearranged to \\"abab\\", which satisfies the condition that no two adjacent characters are the same. In the second test case, it is impossible to rearrange \\"aaab\\" in a way that no two adjacent characters are the same. In the third test case, \\"abc\\" can be rearranged as \\"abc\\", which satisfies the condition that no two adjacent characters are the same.","solution":"from collections import Counter import heapq def reorganize_string(s): Given a string `s`, decide whether it can be reorganized such that no two adjacent characters are the same. If possible, return any valid reorganization of the string, otherwise return \\"IMPOSSIBLE\\". # Count the frequency of each character in the string counter = Counter(s) max_heap = [] for char, freq in counter.items(): heapq.heappush(max_heap, (-freq, char)) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq = freq + 1 prev_char = char if len(result) != len(s): return \\"IMPOSSIBLE\\" return \'\'.join(result) def solve(T, test_cases): results = [] for s in test_cases: results.append(reorganize_string(s)) return results"},{"question":"Implement a data structure that supports the following operations on a set of integers: 1. `insert(x)` — add integer `x` to the set. 2. `remove(x)` — remove integer `x` from the set if it is present. 3. `find(x)` — determines if integer `x` is present in the set. 4. `get_min()` — return the smallest integer in the set. If the set is empty, return `None`. 5. `get_max()` — return the largest integer in the set. If the set is empty, return `None`. Input: The first line contains an integer `q` (1 ≤ q ≤ 105) — the number of operations. Each of the next `q` lines describes an operation: - `insert x` — add integer `x` to the set (−109 ≤ x ≤ 109). - `remove x` — remove integer `x` from the set if it is present. - `find x` — determines if integer `x` is present in the set. - `get_min` — return the smallest integer in the set. - `get_max` — return the largest integer in the set. Output: For each `find`, `get_min`, and `get_max` operation, print the appropriate output on a new line. Examples: Input: 10 insert 5 insert 3 insert 7 get_min get_max find 5 remove 5 find 5 get_min get_max Output: 3 7 YES NO 3 7 Input: 5 insert 10 get_min get_max remove 10 get_min Output: 10 10 None","solution":"class IntegerSet: def __init__(self): self.set = set() def insert(self, x): self.set.add(x) def remove(self, x): self.set.discard(x) # discard does not raise an error if x is not present def find(self, x): return \\"YES\\" if x in self.set else \\"NO\\" def get_min(self): if not self.set: return None return min(self.set) def get_max(self): if not self.set: return None return max(self.set)"},{"question":"**[Question]:** You are working on a digital image processing application and need to implement a feature that simulates the presence of a certain filter. One requirement is to count and report the frequency of each distinct pixel value in a grayscale image. Grayscale images are represented as 2D matrices where each element is an integer in the range [0, 255], representing different shades of gray, with 0 being black and 255 being white. Write a function that takes a 2D list representing a grayscale image and returns a dictionary where the keys are pixel values and the values are the frequency of each pixel. Your task is to implement such a function in Python. # Function Signature ```python def pixel_frequency(image: List[List[int]]) -> Dict[int, int]: ``` # Input - `image`: A 2D list of integers representing the grayscale image. Each element in the list will be in the range [0, 255]. # Output - A dictionary where each key is a pixel value and the corresponding value is its frequency in the image. # Example ```python image = [ [0, 255, 60], [130, 45, 60], [255, 0, 45] ] print(pixel_frequency(image)) # Expected Output: # {0: 2, 45: 2, 60: 2, 130: 1, 255: 2} ``` # Constraints - The input 2D list `image` will have at least one pixel and at most 10^6 pixels in total. - Each row in the 2D list may vary in length but the total number of elements across all rows will not exceed 10^6.","solution":"from typing import List, Dict from collections import defaultdict def pixel_frequency(image: List[List[int]]) -> Dict[int, int]: Given a 2D list representing a grayscale image, returns a dictionary where the keys are pixel values and the values are the frequency of each pixel. frequency = defaultdict(int) for row in image: for value in row: frequency[value] += 1 return dict(frequency)"},{"question":"You are given a positive integer n. Your task is to determine the minimum positive integer m such that the sum of the digits of m is equal to n. -----Input----- The first line contains the single integer T (1 le T le 100) — the number of test cases. Next T lines contain test cases — one per line. Each line contains a single integer n (1 le n le 10^9). -----Output----- Print T integers — one per test case. For each test case print the minimum integer m. -----Example----- Input 3 1 9 10 Output 1 9 19 -----Note----- In the first test case, the minimum integer m that has the sum of its digits equal to 1 is 1. In the second test case, the minimum integer m that has the sum of its digits equal to 9 is 9. In the third test case, the minimum integer m that has the sum of its digits equal to 10 is 19.","solution":"def min_integer_with_digit_sum(n): Returns the minimum integer m such that the sum of the digits of m is equal to n. if n <= 9: return n digits = [] while n > 0: if n >= 9: digits.append(9) n -= 9 else: digits.append(n) n = 0 digits.reverse() return int(\\"\\".join(map(str, digits))) def process_tests(test_cases): Processes a list of test cases and returns a list of results for each test case. results = [] for n in test_cases: results.append(min_integer_with_digit_sum(n)) return results"},{"question":"You are working on developing a simple database for storing strings. Each string in the database should be unique. To manage string insertions, you need to implement a function that handles the insertion of a new string into the database while maintaining the uniqueness property. If the string is already present in the database, the insertion should be canceled. Input The input will consist of a series of operations - either \\"INSERT\\" or \\"CHECK\\", followed by a space and a string. The sequence of operations will end with the line \\"END\\". Each line will contain at most 100 characters, and the string to be inserted or checked will consist of alphanumeric characters only. Output For each \\"INSERT\\" operation, if the string is successfully inserted, output \\"Inserted successfully\\". If the string is already present in the database, output \\"String already exists\\". For each \\"CHECK\\" operation, output \\"String found\\" if the string is present in the database, otherwise output \\"String not found\\". Examples Input INSERT hello INSERT world CHECK hello CHECK WORLD INSERT hello END Output Inserted successfully Inserted successfully String found String not found String already exists Note Let\'s go through the example step by step: 1. The first operation is \\"INSERT hello\\", which inserts \\"hello\\" into the database. The output is \\"Inserted successfully\\". 2. The second operation is \\"INSERT world\\", which inserts \\"world\\" into the database. The output is \\"Inserted successfully\\". 3. The third operation is \\"CHECK hello\\", which finds \\"hello\\" in the database. The output is \\"String found\\". 4. The fourth operation is \\"CHECK WORLD\\", which does not find \\"WORLD\\" in the database because the check is case-sensitive. The output is \\"String not found\\". 5. The fifth operation is \\"INSERT hello\\", which fails because \\"hello\\" is already in the database. The output is \\"String already exists\\".","solution":"def manage_strings(operations): Manages string insertions and checks for uniqueness. :param operations: List of operations to be performed on the database :return: List of results for each operation database = set() results = [] for operation in operations: if operation == \\"END\\": break command, string = operation.split(\\" \\", 1) if command == \\"INSERT\\": if string in database: results.append(\\"String already exists\\") else: database.add(string) results.append(\\"Inserted successfully\\") elif command == \\"CHECK\\": if string in database: results.append(\\"String found\\") else: results.append(\\"String not found\\") return results"},{"question":"Given an integer array `arr` of size `n` and an integer `k`, write a function to find the count of unique elements in every subarray of size `k`. The function should return a list of integers where each integer represents the count of unique elements in the corresponding subarray of `k` elements beginning with the first element of `arr` and sliding one element to the right each time. Example: Input: arr = [4, 1, 1, 2, 3, 4, 5], k = 3 Output: [2, 2, 2, 3, 3] Explanation: Subarray [4, 1, 1] has 2 unique elements -> 4, 1 Subarray [1, 1, 2] has 2 unique elements -> 1, 2 Subarray [1, 2, 3] has 3 unique elements -> 1, 2, 3 Subarray [2, 3, 4] has 3 unique elements -> 2, 3, 4 Subarray [3, 4, 5] has 3 unique elements -> 3, 4, 5 Your task: You don\'t need to read input or print anything. Your task is to complete the function `countDistinct` that takes `arr` and `k` as input parameters and returns a list of integers representing the count of unique elements in each subarray of size `k`. Expected Time Complexity: O(n) Expected Auxiliary Space: O(k) Constraints: 1 ≤ n ≤ 10^5 1 ≤ arr[i] ≤ 10^5 1 ≤ k ≤ n","solution":"def countDistinct(arr, k): This function takes an integer array arr of size n and an integer k, and returns a list of integers representing the count of unique elements in every subarray of size k. n = len(arr) if k > n: return [] # Dictionary to store the frequency of elements freq_map = {} unique_counts = [] # Initialize the frequency map for the first window for i in range(k): if arr[i] in freq_map: freq_map[arr[i]] += 1 else: freq_map[arr[i]] = 1 # Add the count of the first window unique_counts.append(len(freq_map)) # Slide the window over the rest of the array for i in range(1, n - k + 1): # Remove the frequency of the outgoing element if freq_map[arr[i - 1]] == 1: del freq_map[arr[i - 1]] else: freq_map[arr[i - 1]] -= 1 # Add the frequency of the new element if arr[i + k - 1] in freq_map: freq_map[arr[i + k - 1]] += 1 else: freq_map[arr[i + k - 1]] = 1 # Add the count of the current window unique_counts.append(len(freq_map)) return unique_counts"},{"question":"You are given n balls, each with a positive integer weight. You are also given a weight limit W. You need to determine if it\'s possible to distribute the balls into two groups such that the total weight of each group is less than or equal to the weight limit W. If it\'s possible, return the two groups. If it\'s not possible, return \\"NO\\". Input The first line contains integers n and W (1 ≤ n ≤ 100, 1 ≤ W ≤ 10^4) — the number of balls and the weight limit. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the weights of the balls. Output If it\'s possible to split the balls into two groups such that the total weight of each group is ≤ W, print \\"YES\\" followed by two lines that list the indices (1-based) of the balls in each group. Otherwise, print \\"NO\\". If there are multiple valid distributions, any one of them can be printed. Examples Input 5 10 1 2 3 4 5 Output YES 1 2 3 4 5 Input 4 7 3 3 3 3 Output YES 1 2 3 4 Input 3 4 5 6 7 Output NO Note In the first example, we can split the balls into two groups: {1, 2, 3} and {4, 5}, where the total weights of each group are 1+2+3=6 and 4+5=9, both of which are less than or equal to 10. In the second example, a possible split is {1, 2} and {3, 4}, where the total weights are 3+3=6 and 3+3=6, both less than or equal to 7. In the third example, it is impossible to split the balls into two groups such that the total weight of each group is less than or equal to 4.","solution":"def can_split_balls(n, W, weights): Determine if it is possible to split balls into two groups such that the weight of each group is <= W. If possible, return \\"YES\\" followed by two lines of indices. If not, return \\"NO\\". from itertools import combinations # Generate all possible combinations for half the balls or more for k in range(1, n): for combo in combinations(range(n), k): group1_weight = sum(weights[i] for i in combo) group2_weight = sum(weights[i] for i in range(n) if i not in combo) if group1_weight <= W and group2_weight <= W: group1 = [i + 1 for i in combo] group2 = [i + 1 for i in range(n) if i not in combo] return \\"YES\\", group1, group2 return \\"NO\\", None, None"},{"question":"A group of archaeologists discovered an ancient machine, which needs to be operated by selecting the correct sequence of stroke patterns. The machine accepts a sequence of unique integers, where the sequence must be a combination of predefined patters which are continuous subsequences from a given list. The list contains possible stroke patterns which can unlock the machine. Your task is to find out if it is possible to compile the given sequence from the predefined stroke patterns. Input Format First line contains an integer M, which denotes the number of predefined stroke patterns. Next M lines contains a list of integers separated by space denoting each stroke pattern. The next line contains the sequence you need to verify. Output Format Print a single line containing \'Possible\' or \'Impossible\'. Input Constraint 1 < M < 10 Each stroke pattern contains 1 to 5 integers. All integers are unique and fit in the 32-bit integer space. SAMPLE INPUT 3 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 SAMPLE OUTPUT Possible","solution":"def is_sequence_possible(M, patterns, sequence): Checks if a sequence can be completely formed using the given patterns. :param M: Number of predefined patterns :param patterns: List of patterns (each pattern is a list of integers) :param sequence: List of integers representing the sequence to verify :return: \'Possible\' or \'Impossible\' index = 0 while index < len(sequence): matched = False for pattern in patterns: if sequence[index:index + len(pattern)] == pattern: index += len(pattern) matched = True break if not matched: return \'Impossible\' return \'Possible\' # Sample Input: # 3 # 1 2 3 # 4 5 6 # 7 8 # 1 2 3 4 5 6 7 8"},{"question":"John is trying to create a special binary string based on some rules. Initially, he starts with an empty string. Each day, he appends one binary digit (\'0\' or \'1\') to the string based on the day number. Here\'s how he decides which digit to append: - If the current day `i` is a prime number, he appends the digit \'1\'. - If the current day `i` is not a prime number, he appends the digit \'0\'. After several days, John wants to know the number of \'1\'s in the binary string segment from day L to day R (inclusive). Your task is to write a program that calculates the number of \'1\'s in the binary string from day L to day R for several queries. # Input Format - The first line contains an integer, T, which denotes the number of test cases. - Each test case consists of two space-separated integers, L and R, representing the range of days. # Output Format For each test case, print a single integer, the number of \'1\'s in the specified range [L, R]. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ L ≤ R ≤ 10^6 # Sample Input ``` 3 1 10 11 20 1 20 ``` # Sample Output ``` 4 4 8 ``` # Explanation - For the first test case, in the range from day 1 to day 10, the prime days are 2, 3, 5, and 7. Therefore, there are 4 \'1\'s in the binary string. - For the second test case, in the range from day 11 to day 20, the prime days are 11, 13, 17, and 19. Thus, there are 4 \'1\'s in the binary string. - For the third test case, combining the results of the previous ranges, there are 8 \'1\'s in total from day 1 to day 20.","solution":"def sieve_of_eratosthenes(limit): prime = [True] * (limit + 1) p = 2 while (p * p <= limit): if (prime[p] == True): for i in range(p * p, limit + 1, p): prime[i] = False p += 1 prime[0], prime[1] = False, False return prime def count_ones_in_range(L, R, prime): return sum(prime[L:R+1]) def process_queries(T, queries): max_R = max(r for _, r in queries) prime = sieve_of_eratosthenes(max_R) results = [] for L, R in queries: results.append(count_ones_in_range(L, R, prime)) return results"},{"question":"Ada is required to merge K sorted arrays into a single sorted list. Each of these arrays is sorted in non-decreasing order. Ada is provided with a list of these K sorted arrays as input and she needs to output a single sorted list containing all the elements of the K arrays. Input First line contains an integer T, the number of test cases. Each test case starts with an integer K, the number of sorted arrays. Each of the following K lines contains integers separated by spaces: the first integer indicates the length of the array, followed by the elements of the array in non-decreasing order. Output For each test case, output a single line containing the merged sorted list. Constraints 1 ≤ T ≤ 50 1 ≤ K ≤ 100 1 ≤ Length of each array ≤ 1000 -10^5 ≤ Array Elements ≤ 10^5 SAMPLE INPUT 2 3 3 1 4 5 5 2 2 7 10 15 4 1 3 4 8 2 2 0 1 3 -10 5 20 SAMPLE OUTPUT 1 1 2 2 3 4 4 5 7 8 10 15 -10 0 1 5 20 Explanation For the first test case, merging the sorted arrays (1, 4, 5), (2, 2, 7, 10, 15), and (1, 3, 4, 8) results in the single sorted list: 1 1 2 2 3 4 4 5 7 8 10 15. For the second test case, merging (0, 1) and (-10, 5, 20) results in the single sorted list: -10 0 1 5 20.","solution":"import heapq def merge_k_sorted_arrays(test_cases): results = [] for _ in range(test_cases): k = int(input().strip()) arrays = [] for _ in range(k): array = list(map(int, input().strip().split()))[1:] arrays.append(array) merged_list = [] min_heap = [] for idx, array in enumerate(arrays): if array: heapq.heappush(min_heap, (array[0], idx, 0)) while min_heap: value, array_idx, element_idx = heapq.heappop(min_heap) merged_list.append(value) if element_idx + 1 < len(arrays[array_idx]): next_value = arrays[array_idx][element_idx + 1] heapq.heappush(min_heap, (next_value, array_idx, element_idx + 1)) results.append(\\" \\".join(map(str, merged_list))) return results"},{"question":"You are hiking in the Pixel Mountains and spot a strange sequence carved into a tree trunk. It\'s a series of numbers and operations, and you wonder if it forms a valid mathematical expression that evaluates to an integer. You notice that the sequence seems to be represented by numbers and a single type of operator between them. Your task is to determine if the sequence of numbers and operations forms a valid expression that equals a target integer. You need to identify whether placing the given operator between each adjacent number in the sequence yields the target result. -----Input----- Input consists of a single string S where: - S is the sequence of numbers separated by a single operator (+, -, *, or /). - Each number consists of digits [0-9] and the operator is one of [+, -, *, /]. The string can be no longer than 1000 characters and contains only one type of operator. -----Output----- Output a single line containing \\"YES\\" if the sequence evaluates to an integer equal to the target result, and \\"NO\\" otherwise. Note: - You should assume that division should always yield results that are integers. If at any point division by zero occurs, the answer should be \\"NO\\". - The input sequence is guaranteed to be a valid sequence of numbers with a single operator type. -----Examples----- Sample Input: 12-34-56-78 Sample Output: NO","solution":"def is_valid_expression(sequence, target): Determines if the expression formed by the sequence of numbers and the operator results in the target value. Args: sequence (str): The sequence of numbers and operators. target (int): The target integer to evaluate the expression against. Returns: str: \\"YES\\" if the expression evaluates to the target value, otherwise \\"NO\\". if \'+\' in sequence: elements = list(map(int, sequence.split(\'+\'))) result = sum(elements) elif \'-\' in sequence: elements = list(map(int, sequence.split(\'-\'))) result = elements[0] - sum(elements[1:]) elif \'*\' in sequence: elements = list(map(int, sequence.split(\'*\'))) result = 1 for e in elements: result *= e elif \'/\' in sequence: elements = list(map(int, sequence.split(\'/\'))) result = elements[0] for e in elements[1:]: if e == 0: return \\"NO\\" result /= e result = int(result) # Ensure we\'re working with an integer result. return \\"YES\\" if result == target else \\"NO\\""},{"question":"A popular online retailer uses a loyalty points system to reward its customers. Every time a customer makes a purchase, they earn a number of loyalty points proportional to the amount spent. The retailer regularly gives out promotional codes which can be used to get additional points. Each promotional code triples the customer\'s current points. Given the initial number of points a customer has, your task is to calculate the minimum number of promotional codes required for the customer to reach or exceed a target number of points. Input The first line of the input contains a positive integer T (1 ≤ T ≤ 1000) representing the number of test cases. Each of the next T lines contains two positive integers separated by a space: the initial number of points P (1 ≤ P ≤ 1000000) the customer starts with, and the target number of points N (1 ≤ N ≤ 1000000) the customer wants to achieve. Output For each test case, output one line containing a single integer representing the minimum number of promotional codes needed to reach or exceed the target points. SAMPLE INPUT 3 5 10 10 40 4 100 SAMPLE OUTPUT 1 2 3","solution":"def min_promo_codes_needed(T, test_cases): results = [] for i in range(T): P, N = test_cases[i] if P >= N: results.append(0) else: promo_codes = 0 while P < N: P *= 3 promo_codes += 1 results.append(promo_codes) return results # Sample Input T = 3 test_cases = [(5, 10), (10, 40), (4, 100)] print(min_promo_codes_needed(T, test_cases))"},{"question":"[Bank Transfer Validation]: As part of an online banking system, you have been tasked to validate the transactions between accounts. Each transaction involves transferring a certain amount from one account to another. You need to ensure that the initiating account has enough balance for the transaction before proceeding. Input The first line contains an integer T, the number of test cases. For each test case, the input consists of three parts: 1. A single integer B which denotes the initial account balance. 2. A single integer A which is the amount to be transferred. 3. An integer C which corresponds to the balance that should remain in the initiating account after the transaction if valid. Output For each test case, output \\"successful transaction\\" if B - A ≥ C, otherwise output \\"insufficient funds\\". Constraints 1 ≤ T ≤ 10 0 ≤ B ≤ 10^9 0 ≤ A ≤ 10^9 0 ≤ C ≤ 10^9 Example Input: 3 1000 200 500 500 300 100 200 100 150 Output: successful transaction successful transaction insufficient funds","solution":"def validate_transactions(transactions): Validates the transactions based on the balance requirements. Parameters: transactions (list of tuples): A list where each tuple contains three integers (B, A, C). Returns: list of str: A list of results corresponding to each transaction validation. results = [] for B, A, C in transactions: if B - A >= C: results.append(\\"successful transaction\\") else: results.append(\\"insufficient funds\\") return results"},{"question":"You are given an array of integers and a target value. Your task is to determine whether there exists a pair of distinct elements in the array whose sum equals the target value. The array may contain both positive and negative integers, and you need to find at least one valid pair if it exists. -----Input----- The first line of input contains an integer t (1 le t le 10^4) — the number of test cases. For each test case, the first line contains two integers n (2 le n le 2 cdot 10^5) — the number of elements in the array and the target value k (-10^6 le k le 10^6). The second line for each test case contains n integers a_1, a_2, dots, a_n (-10^6 le a_i le 10^6) — the elements of the array. -----Output----- For each test case, output a single line containing \\"YES\\" if there exists a pair of distinct elements in the array whose sum equals the target value, or \\"NO\\" otherwise. -----Examples----- Input 3 5 9 1 2 3 4 5 4 8 2 2 2 2 6 0 -3 1 4 3 -2 -1 Output YES NO YES -----Note----- In the first test case, the pair (4, 5) sums up to 9. In the second test case, no two distinct elements sum up to 8. In the third test case, the pairs (-3, 3) and (-2, 2) both sum up to 0.","solution":"def find_pair_with_target_sum(t, test_cases): results = [] for test in test_cases: n, k, array = test seen = set() found = False for num in array: if k - num in seen: results.append(\\"YES\\") found = True break seen.add(num) if not found: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers and a target value. Determine if there are two distinct integers in the array whose sum equals the target value. If such a pair exists, print \\"YES\\" followed by the pair. If no such pair exists, print \\"NO\\". Input Format The first line contains an integer n (the number of elements in the array). The second line contains n space-separated integers, which represent the elements of the array. The third line contains an integer target (the target sum). Constraints 2 leq n leq 10^5 -10^9 leq text{array elements} leq 10^9 -10^9 leq text{target} leq 10^9 Output Format Print \\"YES\\" followed by two space-separated integers if there is a pair of elements whose sum equals the target. If no such pair exists, print \\"NO\\". Sample Input 5 2 7 11 15 1 9 Sample Output YES 2 7 Explanation The pair (2, 7) sums to 9, which is the target value. Hence, \\"YES 2 7\\" is printed. Note that (7, 2) is considered the same pair and should not be printed again. If no such pairs are found, \\"NO\\" should be printed.","solution":"def find_pair_with_sum(arr, target): Determine if there are two distinct integers in the array whose sum equals the target value. If such a pair exists, return the result as a string \\"YES\\" followed by the pair. If no such pair exists, return the result as \\"NO\\". seen = {} for number in arr: complement = target - number if complement in seen: return f\\"YES {complement} {number}\\" seen[number] = True return \\"NO\\""},{"question":"In a small town, the primary postal service decided to implement a system to sort packages based on their destination. Each package has a label consisting of an alphanumeric code representing the street name followed by a house number, for example, \\"ElmStreet123\\". The postal worker needs to extract just the house number from each package\'s label to optimize the sorting process. Your task is to write a function that takes a single string input representing the package label, and outputs the house number as an integer. Input The input consists of a single non-empty string label containing at least one uppercase letter and at least one digit. The string length does not exceed 100 characters. It is guaranteed that digits only appear at the end of the string. Output Print the extracted house number as an integer. Examples Input MapleStreet456 Output 456 Input OakAve7890 Output 7890 Note In the first sample, \\"MapleStreet456\\" = \\"MapleStreet\\" + \\"456\\". The substring \\"456\\" represents the house number and is extracted from the end of the string. In the second sample, \\"OakAve7890\\" = \\"OakAve\\" + \\"7890\\". The substring \\"7890\\" is the house number at the end of the input string.","solution":"def extract_house_number(label): Extracts the house number from the package label which is guaranteed to have digits only at the end. house_number = \'\' # Traverse the string in the reverse order to find the digits at the end for char in reversed(label): if char.isdigit(): house_number = char + house_number else: break return int(house_number)"},{"question":"Determine whether a given year is a leap year. A year is a leap year if it is divisible by 4, but years divisible by 100 are not leap years, unless they are also divisible by 400. Input The only line of input contains an integer year (1 ≤ year ≤ 10000). Output Output \\"Leap Year\\" if the given year is a leap year, and \\"Not a Leap Year\\" otherwise. Examples Input 2020 Output Leap Year Input 1900 Output Not a Leap Year","solution":"def is_leap_year(year): Determine whether a given year is a leap year. Parameters: year (int): The year to check (1 ≤ year ≤ 10000) Returns: str: \\"Leap Year\\" if the year is a leap year, \\"Not a Leap Year\\" otherwise. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return \\"Leap Year\\" else: return \\"Not a Leap Year\\""},{"question":"Given a string that represents an arithmetic expression containing non-negative integers, +, -, *, and / operators, write a function that evaluates the expression and returns its value. The expression is always valid, so no need to handle invalid input. Assume the operators + and - have the same precedence, which is lower than * and /. The * and / operators also have the same precedence, which is higher than + and -. Assume all the operations are left-associative, meaning they are evaluated from left to right. Example 1: Input: \\"3+5*2\\" Output: 13 Example 2: Input: \\"10+2*6\\" Output: 22 Example 3: Input: \\"100*2/1\\" Output: 200 Your Task: You don\'t need to read input or print anything. Your task is to complete the function calculate() which takes the string expression as an input and returns its evaluated result. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1. The length of the input string does not exceed 60. 2. Each intermediate result will be in the range of a 32-bit signed integer.","solution":"def calculate(expression): def apply_operator(operators, values): right = values.pop() left = values.pop() op = operators.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) elif op == \'/\': values.append(int(left / right)) # Use int() for floor division like in Python 2 def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operators, values = [], [] i = 0 while i < len(expression): if expression[i].isdigit(): val = 0 while (i < len(expression) and expression[i].isdigit()): val = val * 10 + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] in \'+-*/\': while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"Alex is an avid runner who records the distance of each run in kilometers. He has a list of his running distances over the past few months and wants to analyze his running performance. Specifically, Alex is interested in the maximum distance he ran in a single run, the total distance he ran above a certain threshold, and the number of days he did not run. Write a program to help Alex analyze his running distances. Input The first line contains an integer n (0 ≤ n ≤ 1000), the number of days Alex recorded his running distances. The next n lines each contain a floating-point number di (0 ≤ di ≤ 42.195) representing the distance (in kilometers) Alex ran on the i-th day, where di = 0 indicates that Alex did not run that day. The last line contains a floating-point number t (0 ≤ t ≤ 42.195), the threshold distance. Output The program should output three lines: 1. The maximum distance Alex ran in a single run. 2. The total distance Alex ran on days when he ran more than the threshold distance t. 3. The number of days Alex did not run. Example Input 7 5.0 10.5 0.0 3.2 6.3 8.1 0.0 5.0 Output 10.5 24.9 2 Explanation In this example, Alex recorded his running distances for 7 days. The maximum distance he ran in a single run is 10.5 km. He ran a total of 24.9 km on days when he ran more than the threshold distance of 5.0 km. Lastly, there were 2 days when he did not run at all, indicated by 0.0 km.","solution":"def analyze_running_performance(n, distances, threshold): Analyze running performance. Parameters: n (int): Number of days distances recorded. distances (list of float): List of distances run on each day. threshold (float): Distance threshold. Returns: tuple: maximum distance, total distance above threshold, number of days not run if n == 0: return (0.0, 0.0, 0) max_distance = max(distances) total_distance_above_threshold = sum(d for d in distances if d > threshold) non_running_days = distances.count(0) return (max_distance, total_distance_above_threshold, non_running_days)"},{"question":"An array of integers is called beautiful if for any two different elements a and b in the array, the absolute difference between a and b is not equal to 1. You are given an array of integers and you are allowed to delete several (possibly zero) elements from the array. Your task is to determine the maximum number of elements in a beautiful array that can be obtained from the given array. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^3) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^3) — the elements of the array. -----Output----- Print a single integer — the maximum number of elements in a beautiful array that can be obtained from the given array. -----Examples----- Input 6 1 2 3 4 5 6 Output 3 Input 5 4 6 1 2 8 Output 4 -----Note----- In the first sample, one beautiful array with the maximum number of elements is {1, 3, 5}. Another beautiful array is {2, 4, 6}. Both of them have three elements. In the second sample, one beautiful array with the maximum number of elements is {4, 6, 1, 8}. Another beautiful array is {6, 1, 2, 8}. Both of them have four elements.","solution":"def max_beautiful_array_length(arr): arr.sort() n = len(arr) beautiful_arr = set() for num in arr: # Check if the current number can be added to the beautiful array if all(abs(num - other) != 1 for other in beautiful_arr): beautiful_arr.add(num) return len(beautiful_arr) # Example usage if __name__ == \\"__main__\\": n = int(input().strip()) arr = list(map(int, input().strip().split())) print(max_beautiful_array_length(arr))"},{"question":"Consider a rectangular grid of size N x M. You are initially positioned at the top-left corner of the grid (1, 1) and you want to reach the bottom-right corner (N, M). You can move either right or down from any cell in the grid. However, some cells are blocked and you cannot pass through them. Determine the number of unique paths from the top-left corner to the bottom-right corner of the grid. ------ Input Format ------ - The first line contains two integers N and M representing the number of rows and columns of the grid. - Each of the next N lines contains M integers. A value of 0 indicates that the cell is passable and a value of 1 indicates that the cell is blocked. ------ Output Format ------ Output a single integer representing the number of unique paths from the top-left corner to the bottom-right corner of the grid. If there is no such path, return 0. ------ Constraints ------ 1 ≤ N, M ≤ 50 ----- Sample Input 1 ------ 3 3 0 0 0 0 1 0 0 0 0 ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ The grid is as follows: 0 0 0 0 1 0 0 0 0 There are two unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths(grid): if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 n, m = len(grid), len(grid[0]) dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 0: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"A powerful number Z is defined as a positive integer that can be written as the sum of two or more consecutive positive integers. For example, 9 (as 4+5), 15 (as 1+2+3+4+5 or 7+8), and 22 (as 4+5+6+7) are powerful numbers. A number that cannot be written as the sum of two or more consecutive positive integers is called a non-powerful number. For instance, 1 and 2 are non-powerful numbers. -----Input----- Input consists of a single integer n (1 leq n leq 10^5). -----Output----- Output a single line containing \\"Yes\\" if the number is powerful, otherwise output \\"No\\". -----Examples----- Sample Input 1: 15 Sample Output 1: Yes Sample Input 2: 7 Sample Output 2: No","solution":"def is_powerful_number(n): Determines if the number is a powerful number (can be represented as a sum of two or more consecutive positive integers). Parameters: n (int): The number to check. Returns: str: \\"Yes\\" if the number is powerful, \\"No\\" otherwise. # A number is non-powerful if it is a power of 2; hence, n & (n - 1) == 0 if n & (n - 1) == 0: return \\"No\\" return \\"Yes\\""},{"question":"Alice is practicing her skills in data structures and algorithms. She learns about binary trees and decides to work on a problem related to finding the longest path in the tree with distinct node values. She wants to write a function that takes a binary tree as input and returns the length of the longest path where all the nodes on the path have distinct values. The binary tree is defined as follows: - Each node has a value, a left child, and a right child. - Paths are defined as sequences of nodes connected by edges. Create a function `longestDistinctPath(root)` that takes the root of the binary tree as input and returns the length of the longest path with all distinct node values. Input - The input is given as a binary tree node, where `root` is the starting node. - The value of each node is a positive integer. Output - The function should return an integer representing the length of the longest path with all distinct node values. Examples - Example 1: Input: ``` root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(2) ``` Output: ``` 3 ``` Explanation: The longest path with distinct node values is [1, 2, 4], which has length 3. - Example 2: Input: ``` root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(1) ``` Output: ``` 2 ``` Explanation: The longest path with distinct node values is [1, 2], which has length 2. Note - The given binary tree may contain duplicate values. - The longest path does not necessarily start at the root.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def longestDistinctPath(root): if not root: return 0 def dfs(node, seen): if not node: return len(seen) if node.val in seen: return len(seen) seen.add(node.val) left_len = dfs(node.left, seen.copy()) right_len = dfs(node.right, seen.copy()) seen.remove(node.val) return max(left_len, right_len) return dfs(root, set())"},{"question":"----- Statement ----- You are given an array of integers and you need to find a pair of indices (i, j) such that every integer in the array is divisible by the greatest common divisor (GCD) of the integers at the provided indices. Among all such pairs, find the pair with the minimum sum of the indices. If there are multiple such pairs, return the one with the smaller first index. -----Input----- The first line contains the number of test cases T. Each test case starts with an integer N (2 ≤ N ≤ 1000), the number of elements in the array. The next line contains N space-separated integers representing the elements of the array. -----Output----- Output T lines, one for each test case. Each line contains two integers i and j (1 ≤ i < j ≤ N) that represent the indices of the pair in the array. -----Sample Input ----- 2 4 10 15 100 90 3 8 4 16 -----Sample Output----- 1 2 1 2","solution":"from math import gcd from itertools import combinations def find_min_sum_indices(arr): n = len(arr) min_sum = float(\'inf\') best_pair = (-1, -1) for i, j in combinations(range(n), 2): g = gcd(arr[i], arr[j]) if all(a % g == 0 for a in arr): if i + j < min_sum or (i + j == min_sum and i < best_pair[0]): min_sum = i + j best_pair = (i, j) # Convert 0-based indices to 1-based as required in the problem statement return best_pair[0] + 1, best_pair[1] + 1 def process_test_cases(test_cases): results = [] for (n, arr) in test_cases: results.append(find_min_sum_indices(arr)) return results"},{"question":"Word Capitalization Checker **Problem Statement** In the Kingdom of Textopolis, the Royal Typographic Society has a strict set of rules for capitalization in formal documents. They have devised a specific rule for capitalization: a string is considered correctly capitalized if only the first letter of each word is uppercase and the remaining letters are lowercase, or if all characters in the string are uppercase indicating an acronym or title. Given a string `S`, your task is to determine whether the capitalization of each word in `S` follows the rules defined by the Royal Typographic Society. For simplicity, words are separated by a single space and consist only of English alphabetic characters. **Input** The input consists of a single line containing the string `S` with a length ranging from 1 to 1000 characters. The string `S` contains only uppercase and lowercase English letters separated by spaces. **Output** Output `True` if the capitalization in the string `S` follows the Royal Typographic Society\'s rules, otherwise output `False`. **Sample Input 1** ``` Hello World ``` **Sample Output 1** ``` True ``` **Sample Input 2** ``` HELLO WORLD ``` **Sample Output 2** ``` True ``` **Sample Input 3** ``` Hello world ``` **Sample Output 3** ``` False ``` **Example** Input: ``` Good Morning ``` Output: ``` True ```","solution":"def is_correctly_capitalized(S): Returns True if the capitalization in the string S follows the Royal Typographic Society\'s rules. words = S.split() for word in words: # Check if the word is correctly capitalized if not (word.isupper() or (word[0].isupper() and word[1:].islower())): return False return True"},{"question":"In the field of dynamic programming, the \\"Longest Increasing Subsequence\\" (LIS) problem is a classic concept familiar to many. The problem can be described as follows: given an array of integers, find the length of the longest subsequence that is strictly increasing. The subsequence does not need to be contiguous. Your task is to write a program that determines the length of the longest increasing subsequence in an array provided as input. Input The first line contains an integer n (1 ≤ n ≤ 10²) — the length of the array. The second line contains n space-separated integers a_i (1 ≤ a_i ≤ 10⁵) — the elements of the array. Output Print a single integer — the length of the longest increasing subsequence in the array. Examples Input 7 10 9 2 5 3 7 101 18 Output 4 Input 6 0 1 0 3 2 3 Output 4 Input 1 7 Output 1 Note In the first example, the longest increasing subsequence is [2, 5, 7, 101], which has a length of 4. In the second example, the longest increasing subsequence is [0, 1, 2, 3], which also has a length of 4. In the third example, there is only one element in the array, so the length of the longest increasing subsequence is 1.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the array. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given two words, each composed of lowercase English letters. Your task is to check if it is possible to make the first word equal to the second word using the following operations: 1. Remove zero or more characters from the first word. 2. Rearrange the remaining characters of the first word. You need to determine whether it is possible to transform the first word into the second word using the above operations. Input The input consists of two lines: - The first line contains the first word `a`. - The second line contains the second word `b`. Output Output \\"YES\\" (without quotes) if it\'s possible to transform the first word into the second word. Otherwise, print \\"NO\\" (without quotes). Constraints - The length of each word is between 1 and 1000 inclusive. - Both words consist only of lowercase English letters. Examples Input programming gamming Output YES Input test best Output NO Note In the first example, one possible transformation is to remove the characters \'p\', \'r\', and \'r\' from the first word to get \\"gamming\\", which is the second word. In the second example, there is no way to rearrange or remove characters from \\"test\\" to get \\"best\\", hence the output is \\"NO\\".","solution":"def can_transform(a, b): Check if it is possible to transform word `a` into word `b` by removing characters and rearranging. from collections import Counter # Count character frequencies for both words count_a = Counter(a) count_b = Counter(b) # Check if `count_b` can be formed from `count_a` for char in count_b: if count_b[char] > count_a.get(char, 0): return \\"NO\\" return \\"YES\\""},{"question":"# Problem Statement: Validate Palindromic Subsequence A string is called a palindrome if it reads the same backward as forward. Given a string and a subsequence length `k`, your task is to determine if there exists a subsequence of length `k` that forms a palindrome. # Detailed instructions: 1. You will be provided with a string `s` and an integer `k`. 2. You need to write a function `is_palindromic_subsequence(s, k)` that returns `True` if there exists a palindromic subsequence of length `k` in the string `s`, otherwise, return `False`. # Constraints: - The string `s` will contain only lowercase English letters. - 1 ≤ length of `s` ≤ 1000 - 1 ≤ `k` ≤ length of `s` # Examples: Example 1: ``` Input: s = \\"abcbab\\", k = 3 Output: True Explanation: \\"bcb\\" is a palindromic subsequence of length 3. ``` Example 2: ``` Input: s = \\"abcdef\\", k = 2 Output: False Explanation: There is no palindromic subsequence of length 2. ``` Example 3: ``` Input: s = \\"racecar\\", k = 7 Output: True Explanation: The whole string \\"racecar\\" is a palindromic subsequence of length 7. ``` Example 4: ``` Input: s = \\"aabb\\", k = 1 Output: True Explanation: Any single character is a palindromic subsequence of length 1. ``` # Note: - A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. - The function should handle edge cases, such as the smallest strings and k values. # Function signature: ```python def is_palindromic_subsequence(s: str, k: int) -> bool: pass ```","solution":"def is_palindromic_subsequence(s: str, k: int) -> bool: Determine if there exists a palindromic subsequence of length k in string s. def is_palindrome(subs): return subs == subs[::-1] n = len(s) # Use dynamic programming to find the maximum length of a palindromic subsequence dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return any(dp[i][j] == k for i in range(n) for j in range(i, n))"},{"question":"Write a function called `check_temperature` that simulates Alan\'s thought process when deciding whether something is \\"hotter than the sun.\\" Alan\'s threshold is 500 degrees Celsius. If the given temperature is higher than 500 degrees, he will exclaim \\"It\'s scorching hot!\\", otherwise he will say, \\"It\'s pleasantly warm.\\" The function takes one argument: - `temperature` (an integer or string representing the temperature in Celsius) The function should return the appropriate string based on the temperature comparison. **Examples:** ```python check_temperature(600) # Output: \\"It\'s scorching hot!\\" check_temperature(499) # Output: \\"It\'s pleasantly warm.\\" check_temperature(\\"500\\") # Output: \\"It\'s pleasantly warm.\\" check_temperature(\\"501\\") # Output: \\"It\'s scorching hot!\\" ```","solution":"def check_temperature(temperature): Returns if the temperature is \\"hotter than the sun\\" meaning hotter than 500 degrees Celsius. Args: temperature (int or str): The temperature in Celsius. Returns: str: \\"It\'s scorching hot!\\" if temperature > 500 otherwise \\"It\'s pleasantly warm.\\" if isinstance(temperature, str): temperature = int(temperature) if temperature > 500: return \\"It\'s scorching hot!\\" else: return \\"It\'s pleasantly warm.\\""},{"question":"Write a function named productElements which takes a list of integers as input and returns the product of all the non-zero integers in the list. If the list contains only zeroes, return 0. For example: ```python product_elements([1, 2, 3, 4]) # Returns 24 product_elements([0, 0, 0]) # Returns 0 product_elements([-1, 4, 0]) # Returns -4 product_elements([7, 3, 0, 2, -1]) # Returns -42 ``` Let\'s assume that the input list will always contain at least one integer.","solution":"def product_elements(lst): Returns the product of all the non-zero integers in the list. If the list contains only zeroes, returns 0. product = 1 non_zero_found = False for num in lst: if num != 0: product *= num non_zero_found = True return product if non_zero_found else 0"},{"question":"Lena loves to play games, and her new favorite is a board game where she needs to move from one corner of a grid to the opposite corner. The grid has n rows and m columns. However, the grid has certain cells blocked, making them impassable. Lena can move right, left, up, or down. Your task is to determine the minimum number of moves Lena needs to reach her goal, or if it is even possible to reach the goal. -----Input----- The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns of the grid. The next n lines contain m characters each, representing the grid. The cell represented by \'.\' is passable, while the cell represented by \'#\' is blocked. Lena starts at the top-left corner (1,1) and needs to reach the bottom-right corner (n, m). -----Output----- Print an integer — the minimum number of moves to reach the bottom-right corner from the top-left corner. If it is not possible to reach the bottom-right corner, print `-1`. -----Example----- Input 5 5 ..... .#... ..... ...#. ..... Output 8 -----Note----- In the example, Lena can reach the bottom-right corner following the path: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) -> (4,3) -> (4,4) -> (5,4) -> (5,5) Thus, the minimum number of moves is 8.","solution":"from collections import deque def min_moves(n, m, grid): # Valid moves: right, left, up, down moves = [(0, 1), (0, -1), (1, 0), (-1, 0)] # BFS initialization queue = deque([(0, 0, 0)]) # (row, col, distance) visited = [[False] * m for _ in range(n)] visited[0][0] = True while queue: x, y, dist = queue.popleft() # If we reached the bottom-right corner if x == n - 1 and y == m - 1: return dist # Explore neighbors for dx, dy in moves: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"A treasure hunter is traversing an M x N grid, starting from the top-left corner (0, 0) and moving to the bottom-right corner (M-1, N-1). The grid contains some obstacles indicated by the character `#`, and other cells are represented by a dot `.`. The treasure hunter can only move to the right or down at each step. Your task is to determine the number of unique paths the hunter can take to reach the treasure (bottom-right corner) from the start (top-left corner) given that passing through obstacles is not allowed. Constraints * 1 le M, N le 1000 Input Input is given from Standard Input in the following format: The first line contains two integers M and N, denoting the number of rows and columns in the grid. Each of the following M lines contains a string of length N consisting of characters `.` and `#`. Output Output the number of unique paths from the top-left corner (0, 0) to the bottom-right corner (M-1, N-1). If there is no such path, output 0. Examples Input 3 3 . .. .. . .#. Output 2 Input 3 3 .#. .#. .#. Output 0","solution":"def unique_paths(m, n, grid): if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1] def main(): import sys input = sys.stdin.read data = input().splitlines() m, n = map(int, data[0].split()) grid = [list(line) for line in data[1:m+1]] print(unique_paths(m, n, grid)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a string s and an array of strings wordDict, where wordDict contains a list of non-empty words. Write a function to determine if the string s can be segmented into a space-separated sequence of one or more dictionary words from wordDict. Example 1: Input: s = \\"leetcode\\", wordDict = [\\"leet\\", \\"code\\"] Output: true Explanation: Return true because \\"leetcode\\" can be segmented as \\"leet code\\". Example 2: Input: s = \\"applepenapple\\", wordDict = [\\"apple\\", \\"pen\\"] Output: true Explanation: Return true because \\"applepenapple\\" can be segmented as \\"apple pen apple\\". Example 3: Input: s = \\"catsandog\\", wordDict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output: false Explanation: Return false because \\"catsandog\\" cannot be segmented as any combination of the words in wordDict. Note: - The length of string s will not exceed 300 characters. - The length of wordDict will not exceed 1000 words. - The length of each word in wordDict will not exceed 20 characters. - The input strings consist of lowercase English letters only.","solution":"def word_break(s, wordDict): Determine if the string s can be segmented into a space-separated sequence of one or more dictionary words from wordDict. :param s: str :param wordDict: List[str] :return: bool word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[-1]"},{"question":"In a beautiful city, there are n trees planted in a straight line, and the mayor wants to plant flowers around these trees. The city has a specific rule for planting flowers: For any two neighboring trees, there should be at least d types of flowers planted between them. The goal is to determine if it\'s possible to plant flowers satisfying this rule and, if so, provide one such arrangement. Each type of flower is represented by an integer, and there are no restrictions on the number of times a type of flower can be used, except that there must be at least d different types between any two neighboring trees. Input The first line contains two integers n (1 ≤ n ≤ 1000) and d (1 ≤ d ≤ 100). Output If it\'s possible to plant the flowers following the rule, print \\"YES\\" on the first line. On the second line, print n-1 integers - the types of flowers planted between each pair of neighboring trees. If there are multiple correct answers, print any. If it is not possible to satisfy the rule, print \\"NO\\". Examples Input 5 2 Output YES 1 2 1 2 Input 3 3 Output NO","solution":"def plant_flowers(n, d): if d > n - 1: return \\"NO\\" # If it\'s possible to plant the flowers flower_types = list(range(1, d + 1)) # Create a list of d different flowers result = [] for i in range(n - 1): result.append(flower_types[i % d]) return f\\"YESn{\' \'.join(map(str, result))}\\""},{"question":"**Find Missing Number in AP** Write a function `findMissingNumber` that takes an array of integers representing an arithmetic progression (AP) with one missing element and returns the missing number. The array will have at least 3 elements and the difference between the consecutive elements in the AP will be consistent except for the position where the number is missing. ```python findMissingNumber([2, 4, 8, 10]) # should return 6 findMissingNumber([1, 7, 10]) # should return 4 findMissingNumber([5, 10, 20, 25]) # should return 15 ``` Note: - The input array will always be a valid arithmetic progression with one missing number. - The numbers in the input array are sorted in ascending order.","solution":"def findMissingNumber(arr): Returns the missing number in the arithmetic progression. n = len(arr) + 1 # Since one element is missing total_sum = (n * (arr[0] + arr[-1])) // 2 # Sum of the complete AP actual_sum = sum(arr) # Sum of the given AP with one missing element return total_sum - actual_sum"},{"question":"Aria is working on an online shopping platform. To personalize the shopping experience, she wants to implement a system for a specific type of promotional offer. She comes up with an idea to analyze customer shopping patterns over a period of time. Given some historical data, she wants to calculate the number of unique items bought by customers within a given period. Consider an array where each element represents an item bought by a customer at a specific time. You are given Q queries where each query can be one of the following three types: Type 1: u t Type 2: u k Type 3: l r Explanation: for query Type 1: replace the u^{th} purchase in the array with item t for query Type 2: add k to the current item, making it the \\"k^{th}\\" purchase for query Type 3: count the number of unique items in the array between l to r, both inclusive Aria is very busy managing other parts of the platform and needs your help to implement this system. Input: The first line of the input contains a single integer N denoting the number of purchases in the array. The next line contains N space-separated integers representing the items bought. The third line contains a single integer Q denoting the number of queries to be processed over the array. The next Q lines of input contain Q queries (one query per line). Output: For each query of type 3 print the desired answer. Constraints: 1 ≤ N, Q ≤ 10^5 1 ≤ A[i] ≤ 10^9 1 ≤ t, k ≤ 10^9 1 ≤ u, l, r ≤ N SAMPLE INPUT 5 1 2 2 1 3 4 3 1 5 1 2 4 3 1 5 2 3 10 SAMPLE OUTPUT 3 3","solution":"def execute_queries(N, items, Q, queries): results = [] for query in queries: if query[0] == 1: # Type 1: Replace the u-th purchase in the array with item t u, t = query[1], query[2] items[u - 1] = t elif query[0] == 2: # Type 2: Add k to the current item, making it the \\"k-th\\" purchase u, k = query[1], query[2] items[u - 1] += k elif query[0] == 3: # Type 3: Count the number of unique items between l to r, inclusive l, r = query[1], query[2] results.append(len(set(items[l - 1:r]))) return results"},{"question":"# Matrix Column Sum Write a function that takes a 2D matrix (a list of lists) as input and returns a list containing the sum of the elements for each column. Each column in the resulting list should correspond to the sum of each column in the input matrix. The input matrix will always have at least one row and one column, and all rows will be of the same length. For example: ```python def column_sums(matrix): # Your code here # Test cases print(column_sums([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) # Should return [12, 15, 18] print(column_sums([[1, 2], [3, 4], [5, 6]])) # Should return [9, 12] print(column_sums([[1], [2], [3], [4]])) # Should return [10] print(column_sums([[1, 2, 3, 4]])) # Should return [1, 2, 3, 4] ``` Your solution should iterate over the columns of the matrix first, summing each column\'s values, and then returning the results as a list of sums.","solution":"def column_sums(matrix): Returns a list containing the sum of the elements for each column in the input matrix. if not matrix or not matrix[0]: return [] num_rows = len(matrix) num_cols = len(matrix[0]) column_sum_list = [0] * num_cols for j in range(num_cols): for i in range(num_rows): column_sum_list[j] += matrix[i][j] return column_sum_list"},{"question":"Jennifer is a software developer working on a text editor, and she encountered an interesting problem. In her text editor, words are often separated by spaces. However, some words might be prefixed with a certain number of special characters such as \'#\', \'@\', \'!\', etc. Jennifer wants to clean the text by removing all leading special characters from each word and retaining only the words with alphabetical characters. Write a function that processes a given string and returns a cleaned version of the text. Ensure that each word in the cleaned text is separated by a single space, with no leading or trailing spaces. Function Signature: ```python def clean_text(text: str) -> str: ``` # Input - A single line input string `text` (1 leq |text| leq 10^5) containing words separated by spaces. Special characters can be any non-alphabetical characters. # Output - Return a cleaned version of the input string where each word is stripped of leading special characters and words are separated by a single space. # Examples Example 1 ```python text = \\"hello ***world !good @morning\\" print(clean_text(text)) # Output: \\"hello world good morning\\" ``` Example 2 ```python text = \\"123start 456end\\" print(clean_text(text)) # Output: \\"start end\\" ``` Example 3 ```python text = \\"**@ coding !!!is @@fun\\" print(clean_text(text)) # Output: \\"coding is fun\\" ``` Example 4 ```python text = \\"@@@@****\\" print(clean_text(text)) # Output: \\"\\" ``` # Note: - The provided text will contain at least one non-space character. - Words containing only special characters should be removed entirely.","solution":"import re def clean_text(text: str) -> str: Cleans the given text by removing leading special characters from each word. Non-alphabetical words are removed entirely. Args: text (str): Input string containing words separated by spaces. Returns: str: Cleaned version of the input string. # Split the text into words words = text.split() # Remove leading special characters and filter non-alphabetical words cleaned_words = [re.sub(r\'^[^a-zA-Z]+\', \'\', word) for word in words] filtered_words = [word for word in cleaned_words if re.search(r\'[a-zA-Z]\', word)] # Join the filtered words with a single space return \' \'.join(filtered_words)"},{"question":"Problem A global company uses a complex project management tool to keep track of tasks and their dependencies. Each task can be represented as a node in a directed acyclic graph (DAG), where an edge from node A to node B indicates that task A must be completed before task B can be started. To ensure smooth project execution, the company needs to determine a valid order in which to complete all the tasks. Given the number of tasks and a list of dependencies, return a valid order in which all the tasks can be completed. If no such order exists, return an empty list. The input format is as follows: - An integer `n`, the number of tasks. Tasks are numbered from 0 to `n-1`. - An integer `m`, the number of dependencies. - A list of `m` pairs of integers `[a, b]`, where each pair indicates that task `a` must be completed before task `b`. Constraints 1. `1 ≤ n ≤ 10^4` 2. `0 ≤ m ≤ 5 * 10^4` 3. Each pair of integers is unique and represents a directed edge in the DAG. Input The input is given in the following format: ``` n m [a1, b1] [a2, b2] ... [am, bm] ``` Output Return a list of integers representing a valid order in which all tasks can be completed. If no valid order exists, return an empty list. Examples Input ``` 4 3 [1, 0] [2, 1] [3, 2] ``` Output ``` [3, 2, 1, 0] ```","solution":"from collections import deque, defaultdict def find_order(n, m, dependencies): # Step 1: Create the adjacency list and the in-degree array. adj_list = defaultdict(list) in_degree = [0] * n # Step 2: Fill the adjacency list and in-degree array based on the dependencies. for a, b in dependencies: adj_list[a].append(b) in_degree[b] += 1 # Step 3: Initialize a queue with tasks that have no dependencies (in-degree 0). queue = deque([i for i in range(n) if in_degree[i] == 0]) # Step 4: Initialize the result list. result = [] # Step 5: Process the queue. while queue: task = queue.popleft() result.append(task) # For each dependent task, reduce its in-degree by 1. for dependent in adj_list[task]: in_degree[dependent] -= 1 # If in-degree becomes 0, add it to the queue. if in_degree[dependent] == 0: queue.append(dependent) # Step 6: If the result list contains all the tasks, return it. Otherwise, return an empty list. if len(result) == n: return result else: return []"},{"question":"Write a function that takes in a string representing a large number and formats it with commas as thousands separators. The input string will contain only digits and may have leading zeros. The function should return the formatted string without any leading zeros unless the input string represents the number zero. Example: Input: num = \\"1234567\\" Output: \\"1,234,567\\" Input: num = \\"001234567\\" Output: \\"1,234,567\\" Input: num = \\"1000\\" Output: \\"1,000\\" Input: num = \\"0001000\\" Output: \\"1,000\\" Input: num = \\"0\\" Output: \\"0\\" Note: 1. The input string num will have a length between 1 and 100, inclusive. 2. The string will not contain any non-digit characters.","solution":"def format_number_with_commas(num): Takes in a string representing a large number and formats it with commas as thousands separators. Removes leading zeros unless the number is zero. # Remove leading zeros num = num.lstrip(\'0\') # If the stripped num is empty, it means the original number was effectively \'0\' if num == \'\': return \'0\' # Format the number with commas result = \'\' length = len(num) count = 0 for i in range(length - 1, -1, -1): result = num[i] + result count += 1 if count == 3 and i != 0: result = \',\' + result count = 0 return result"},{"question":"In the land of Queueland, there are n towns, numbered from 1 to n. Each town is connected to exactly one other town by a directed road. You are given a list of these roads as pairs (a, b), indicating that there is a road from town a to town b. Note that these roads may form cycles. A transport company wants to understand the connectivity of Queueland to optimize their delivery routes. Specifically, they want to identify the largest subset of towns where it\'s possible to start in any town of the subset and visit every other town in the subset without leaving it. Write a program that, given the list of roads, finds the size of the largest strongly connected component (SCC) in Queueland. A strongly connected component is a maximal subset of towns such that, for any two towns u and v in the subset, there is a path from u to v and a path from v to u. The input consists of multiple test cases. Each test case begins with an integer n (2 ≤ n ≤ 100,000), the number of towns. Each of the next n lines contains two integers a and b (1 ≤ a, b ≤ n), indicating a road from town a to town b. It is guaranteed that there are no self-loops (a ≠ b). Output the size of the largest SCC for each test case. # Input The first line of the input contains an integer T (1 ≤ T ≤ 10) — the number of test cases. The description of the test cases follows. For each test case: - The first line contains an integer n. - Each of the next n lines contains two integers a and b. # Output For each test case, print a single integer — the size of the largest strongly connected component in Queueland. # Example Input ``` 2 5 1 2 2 3 3 1 4 5 5 4 4 1 2 2 3 3 4 4 1 ``` Output ``` 3 4 ``` # Explanation In the first test case, there are two strongly connected components: {1, 2, 3} and {4, 5}. The largest SCC has size 3. In the second test case, there is a single strongly connected component: {1, 2, 3, 4}, which includes all towns. The size of this SCC is 4.","solution":"from collections import defaultdict, deque def largest_scc_size(n, roads): def kosaraju_scc(n, graph): visit_stack = [] visited = set() def dfs1(v): visited.add(v) for neighbor in graph[v]: if neighbor not in visited: dfs1(neighbor) visit_stack.append(v) def dfs2(v, scc_set): scc_set.add(v) for neighbor in reversed_graph[v]: if neighbor not in visited_scc: visited_scc.add(neighbor) dfs2(neighbor, scc_set) graph = defaultdict(list) reversed_graph = defaultdict(list) for u, v in roads: graph[u].append(v) reversed_graph[v].append(u) for i in range(1, n + 1): if i not in visited: dfs1(i) visited_scc = set() largest_scc = 0 while visit_stack: node = visit_stack.pop() if node not in visited_scc: visited_scc.add(node) scc_set = set() dfs2(node, scc_set) largest_scc = max(largest_scc, len(scc_set)) return largest_scc graph = [(a, b) for a, b in roads] return kosaraju_scc(n, graph) def largest_scc(test_cases): results = [] for (n, roads) in test_cases: results.append(largest_scc_size(n, roads)) return results"},{"question":"Given a binary string, determine the minimum number of operations required to make the string alternate between 0\'s and 1\'s (starting with either character). In one operation, you can flip any single character from 0 to 1 or from 1 to 0. For example, given the binary string \\"010101\\", it is already alternating, so the number of operations required is 0. Given the binary string \\"11001\\", the string can be converted to \\"10101\\" by flipping the second and fourth characters, so the number of operations required is 2. Your task is to write a function that takes in the binary string and returns the minimum number of operations required to convert it into an alternating string. -----Input----- The input consists of a single line that contains the binary string s (1 leq |s| leq 10^5), where |s| denotes the length of the string. -----Output----- Print a single integer — the minimum number of operations required. -----Examples----- Input 010101 Output 0 Input 11001 Output 2 Input 1111 Output 2 Input 0000000 Output 3","solution":"def min_operations_to_alternate(s): Returns the minimum number of operations required to make the string alternate between 0\'s and 1\'s. # Based on two patterns: \\"010101...\\" and \\"101010...\\" pattern1 = \'\'.join([\'0\' if i % 2 == 0 else \'1\' for i in range(len(s))]) pattern2 = \'\'.join([\'1\' if i % 2 == 0 else \'0\' for i in range(len(s))]) # Calculating flips for both patterns flips_pattern1 = sum(1 for i in range(len(s)) if s[i] != pattern1[i]) flips_pattern2 = sum(1 for i in range(len(s)) if s[i] != pattern2[i]) # Return the minimum flips required return min(flips_pattern1, flips_pattern2)"},{"question":"In a university course, students can enroll in multiple subjects. Each subject can have a different number of registered students. As the course coordinator, you want to analyze the enrollment statistics. Given the list of subjects with the number of enrollments, you need to find the subject with the maximum enrollment. Input: The input begins with a single integer N, representing the number of subjects. The next N lines represent the enrollment details, each containing a subject name (a string) and the number of students enrolled (an integer). Output: Print the name of the subject with the maximum enrollment. If there is a tie (i.e., multiple subjects have the same maximum number of enrollments), print the one that comes first in the order of input. Constraints: 1 ≤ N ≤ 100 | 1 ≤ number of enrollments ≤ 1000 SAMPLE INPUT 4 Mathematics 50 Physics 75 Chemistry 75 Biology 60 SAMPLE OUTPUT Physics Explanation: Among the subjects, Physics and Chemistry both have the highest enrollment number (75). As Physics appears first in the input, \\"Physics\\" is the required output.","solution":"def find_subject_with_max_enrollment(n, enrollments): Returns the name of the subject with the maximum enrollment. max_enrollment = -1 subject_with_max_enrollment = \\"\\" for subject, enrollment in enrollments: if enrollment > max_enrollment: max_enrollment = enrollment subject_with_max_enrollment = subject return subject_with_max_enrollment"},{"question":"Write a function `addFactors(n)` that returns the sum of all the factors of `n`, including 1 and `n` itself. For example, the factors of 6 are 1, 2, 3, and 6, and their sum is 12. Ensure your function handles both positive integers and edge cases such as 1 and prime numbers. # Example Usage ```python print(addFactors(6)) # Output: 12 print(addFactors(28)) # Output: 56 print(addFactors(1)) # Output: 1 ``` # Constraints - The function should handle inputs 1 ≤ n ≤ 10^6 efficiently. - Document the function with appropriate comments. # Solution Outline 1. Initialize a variable to store the sum of factors. 2. Iterate through potential factors up to the square root of `n`. 3. For each factor, add it and its corresponding divisor to the sum. 4. Return the sum of the factors.","solution":"def addFactors(n): Returns the sum of all the factors of n, including 1 and n itself. Parameters: n (int): The integer to find the sum of factors for. Returns: int: Sum of all factors of n. if n == 1: return 1 sum_factors = 0 sqrt_n = int(n**0.5) for i in range(1, sqrt_n + 1): if n % i == 0: sum_factors += i if i != n // i: sum_factors += n // i return sum_factors"},{"question":"You are given an array of integers where each element appears twice except for one unique element. Your task is to find the element that appears only once. You must do this in linear time with O(1) extra space. Constraints * The array length does not exceed 10^6 . * Each element in the array is an integer where 1 leq element leq 10^9 . Input The first line contains an integer n denoting the number of elements in the array. The second line contains n integers separated by spaces representing the array. Output Print the single element that appears only once. Examples Input 7 1 2 3 2 1 4 3 Output 4 Input 5 4 3 3 4 5 Output 5","solution":"def find_unique_element(n, arr): Returns the unique element in the array. unique_element = 0 for num in arr: unique_element ^= num return unique_element # Example usage: # n = 7 # arr = [1, 2, 3, 2, 1, 4, 3] # print(find_unique_element(n, arr)) # Output: 4"},{"question":"Given the coefficients of a quadratic equation `a`, `b`, and `c` (where `a` is the coefficient of ( x^2 ), `b` is the coefficient of ( x ), and `c` is the constant term), return the roots of the quadratic equation in a list. If the roots are imaginary, return an empty list. Example 1: Input: a = 1, b = -3, c = 2 Output: [2.0, 1.0] Explanation: The equation ( x^2 - 3x + 2 = 0 ) has roots 2 and 1. Example 2: Input: a = 1, b = 2, c = 5 Output: [] Explanation: The equation ( x^2 + 2x + 5 = 0 ) has no real roots. Example 3: Input: a = 1, b = 7, c = 10 Output: [-2.0, -5.0] Explanation: The equation ( x^2 + 7x + 10 = 0 ) has roots -2 and -5. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findRoots()` which takes 3 integers `a`, `b`, and `c` and returns the roots in a list of floats. If the roots are imaginary, return an empty list. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: -1000 ≤ a, b, c ≤ 1000 `a` should not be 0","solution":"import math def findRoots(a, b, c): This function takes the coefficients of a quadratic equation (a, b, c) and returns the roots. If the roots are imaginary, an empty list is returned. discriminant = b**2 - 4*a*c if discriminant > 0: root1 = (-b + math.sqrt(discriminant)) / (2*a) root2 = (-b - math.sqrt(discriminant)) / (2*a) return [root1, root2] elif discriminant == 0: root = -b / (2*a) return [root] else: return []"},{"question":"You are given an integer array A of length n. You need to perform q queries on this array. Each query is of one of the following types: 1. Update the value at index i to x. 2. Calculate the sum of the values in the subarray from index l to index r (inclusive). Implement a function that processes these queries efficiently. **Input:** - The first line contains two integers n and q (1 le n, q le 10^5) — the length of the array and the number of queries, respectively. - The second line contains n integers A_1, A_2, ldots, A_n (1 le A_i le 10^9) — the initial elements of the array. - Each of the next q lines contains one of the following query types: - \\"1 i x\\" (1 ≤ i ≤ n, 1 ≤ x ≤ 10^9) — Update A[i] to x. - \\"2 l r\\" (1 ≤ l ≤ r ≤ n) — Calculate the sum of the subarray from index l to r. **Output:** For each query of the second type, output the sum of the subarray from index l to r. **Example:** Input: ``` 5 4 1 2 3 4 5 2 1 3 1 3 10 2 2 5 2 1 5 ``` Output: ``` 6 21 22 ``` **Note:** - After the first update query, the array becomes: [1, 2, 10, 4, 5]. - The second query calculates the sum from index 2 to 5 of this updated array: 2 + 10 + 4 + 5 = 21.","solution":"def process_queries(n, q, A, queries): Processes the given queries on array A. Args: n : int - the length of array A q : int - the number of queries A : list of int - the initial elements of the array queries : list of tuples - the queries (each tuple starts with either 1 or 2) Returns: List of int - the results of the sum queries result = [] for query in queries: if query[0] == 1: i, x = query[1] - 1, query[2] # Convert to 0-based index A[i] = x elif query[0] == 2: l, r = query[1] - 1, query[2] - 1 # Convert to 0-based index result.append(sum(A[l:r+1])) return result"},{"question":"A company requires employees to work for a minimum number of hours per week but allows flexibility in meeting this requirement over a period of days. Each employee is required to work at least H hours per week. Given the number of hours an employee worked each day for a period of D days, determine if the employee met the required hours and how many more hours are needed if they did not. Input: The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains two integers D and H, the number of days and the minimum required hours, respectively. - The second line contains D integers, representing the hours worked each day. Output: For each test case, output \\"YES\\" if the employee met or exceeded the required hours; otherwise, output \\"NO\\" followed by the number of additional hours needed. Constraints: 1 ≤ T ≤ 100 1 ≤ D ≤ 30 0 ≤ Hours worked each day ≤ 24 1 ≤ H ≤ 500 SAMPLE INPUT 2 5 40 8 8 8 8 8 7 50 6 7 8 9 10 5 4 SAMPLE OUTPUT YES NO 1 Explanation Test Case #1: The employee worked 8 hours each day for 5 days, totaling exactly 40 hours which meets the requirement. Test Case #2: The employee worked a total of 49 hours over 7 days. They needed 50 hours, so they fell short by 1 hour.","solution":"def check_work_hours(T, test_cases): results = [] for i in range(T): D, H = test_cases[i * 2] hours_worked = test_cases[i * 2 + 1] total_hours = sum(hours_worked) if total_hours >= H: results.append(\\"YES\\") else: results.append(f\\"NO {H - total_hours}\\") return results # Example of function usage: # T = 2 # test_cases = [ # (5, 40), # [8, 8, 8, 8, 8], # (7, 50), # [6, 7, 8, 9, 10, 5, 4] # ] # print(check_work_hours(T, test_cases))"},{"question":"Create a program that simulates the movement of a robot in a 2D grid. The robot can move up, down, left, or right but can only make a limited number of turns. The goal is to determine whether the robot can reach a specific target position starting from its initial position with the given turn limit. Input - The first input line contains two integers: `n` and `m` (1 ≤ n, m ≤ 100), denoting the dimensions of the grid. - The next input line contains an integer `t` (0 ≤ t ≤ 1000), denoting the maximum number of turns the robot can make. - The next input line contains two integers: `sx` and `sy` (0 ≤ sx < n, 0 ≤ sy < m), representing the starting position of the robot. - The next input line contains two integers: `tx` and `ty` (0 ≤ tx < n, 0 ≤ ty < m), representing the target position. - The following `n` lines each contain `m` characters representing the grid, where \'X\' denotes an obstacle and \'.\' denotes a free cell. The starting and target positions are guaranteed to be free cells (\'.\'). Output Output \\"YES\\" if the robot can reach the target position from the starting position within the given turn limit; otherwise, output \\"NO\\". Example Input 5 5 3 0 0 4 4 ..... ..... ..X.. ..... ..... Output YES Input 5 5 1 0 0 4 4 ..... ..... ..X.. ..... ..... Output NO","solution":"from collections import deque def can_reach_target(n, m, t, sx, sy, tx, ty, grid): # Directions: Right, Down, Left, Up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS Setup queue = deque([(sx, sy, -1, 0)]) # (x, y, last_dir, turns) visited = set([(sx, sy, -1)]) while queue: x, y, last_dir, turns = queue.popleft() # If target is reached within allowed turns if (x, y) == (tx, ty): return \\"YES\\" for idx, (dx, dy) in enumerate(directions): nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\': new_turns = turns if idx == last_dir else turns + 1 if new_turns <= t and (nx, ny, idx) not in visited: visited.add((nx, ny, idx)) queue.append((nx, ny, idx, new_turns)) return \\"NO\\""},{"question":"You are given an integer array where each element represents the height of a building. The width of each building is 1 unit. You need to determine the maximum area of a rectangle that can be formed in the histogram formed by these buildings. -----Input----- The first line contains an integer n (1 le n le 10^5) representing the number of buildings. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^4) representing the heights of the buildings. -----Output----- Print the maximum rectangular area possible. -----Examples----- Input 6 2 1 5 6 2 3 Output 10 Input 4 7 2 1 4 Output 7 Input 5 5 5 5 5 5 Output 25 Input 3 6 2 4 Output 6 -----Note----- In the first example, the maximum area is obtained by the rectangle formed between the third and fourth buildings, with width 2 and height 5, 6 respectively. In the second example, the maximum area is obtained by the rectangle covering the first building, height 7, and width 1. In the third example, all buildings have the same height of 5, and the maximum area is obtained by the rectangle covering all buildings with width 5 and height 5. In the fourth example, the maximum area is obtained by the rectangle covering the first building only (height 6, width 1).","solution":"def largestRectangleArea(heights): Calculates the maximum area of a rectangle that can be formed in the histogram with given heights. :param heights: List[int] - List of integers representing the heights of the buildings. :return: int - The maximum area of a rectangle. stack = [] max_area = 0 heights.append(0) # Adding a zero height to force calculation of remaining areas in stack for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * width) stack.append(i) return max_area"},{"question":"Your task is to design a system that sorts a list of strings based on a \'weight\' mapping provided. # Problem Statement You are given a \'weight\' mapping for each letter from \'a\' to \'z\'. Use this mapping to calculate the weight of each string (by summing the weights of its characters), and then sort the strings primarily by their weight in ascending order. If two strings have the same weight, maintain their original relative order (i.e., preserve the stability of the original list). # Input - The first line contains 26 space-separated integers, each representing the weight of the corresponding letter from \'a\' to \'z\' (i.e., the first integer is the weight of \'a\', the second is the weight of \'b\', and so on). - The second line contains an integer n (1 leq n leq 10^4) — the number of strings. - The following n lines each contain a single string consisting of lowercase letters. # Output - Print the strings sorted by their weighted sum and then by their original order in case of tie. # Example Input: ``` 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 5 abb abc abcd aaa bcc ``` Output: ``` aaa abb abc abcd bcc ``` # Explanation The weight mapping implies the following letter to weight relation: \'a\' = 1, \'b\' = 2, \'c\' = 3, ... Calculating the string weights, we get: - \\"abb\\": 1+2+2 = 5 - \\"abc\\": 1+2+3 = 6 - \\"abcd\\": 1+2+3+4 = 10 - \\"aaa\\": 1+1+1 = 3 - \\"bcc\\": 2+3+3 = 8 Sorting the strings by their weights, we get the result as shown. If multiple strings have the same weight, they appear in their original order.","solution":"def calculate_weight(string, weights): Calculate and return the total weight of the string based on the given weights. return sum(weights[ord(char) - ord(\'a\')] for char in string) def sort_strings_by_weight(weights, strings): Sort the given list of strings based on their calculated weights. Maintain the original order in case of ties. weighted_strings = [(string, calculate_weight(string, weights)) for string in strings] weighted_strings.sort(key=lambda x: x[1]) return [string for string, weight in weighted_strings] def main(weights, n, strings): sorted_strings = sort_strings_by_weight(weights, strings) return sorted_strings"},{"question":"A robot vacuum cleaner operates on a two-dimensional grid floor that can be infinitely large. The vacuum cleaner starts at a given position (x, y) on the grid. The vacuum cleaner can move in four directions: up, down, left, and right by one unit distance per move. Your task is to determine the maximum number of unique cells the robot vacuum cleaner can clean given that it has a certain amount of battery life. Each move consumes 1 unit of battery. The battery will deplete after a specified number of moves, rendering the vacuum cleaner stationary. # Input The input is given in the following format: ``` x y b ``` Where: - `x` and `y` are the starting coordinates of the vacuum cleaner. - `b` is the initial battery life (number of moves). # Constraints - -10^9 ≤ x, y ≤ 10^9 - 1 ≤ b ≤ 10,000,000 # Output Output one integer: the maximum number of unique cells the vacuum cleaner can clean. # Example Input ``` 0 0 5 ``` Output ``` 13 ``` Input ``` 10 10 3 ``` Output ``` 7 ``` Input ``` -3 -3 2 ``` Output ``` 5 ``` # Function Signature (Optional) You may assume the existence of a function with the following signature for implementation: ```python def max_clean_cells(x: int, y: int, b: int) -> int: ```","solution":"def max_clean_cells(x: int, y: int, b: int) -> int: This function returns the maximum number of unique cells the robot vacuum cleaner can clean given the starting position (x, y) and the initial battery life b. return (b + 1) * (b + 1)"},{"question":"You are given a sequence of integers S consisting of N numbers conveniently numbered from 1 through N. A magician has the power to replace certain pairs of adjacent elements in the sequence to create a new sequence S\'. Specifically, he can replace the pair (a, b) that occurs in S with (b, a) at a cost of |a - b|. The magician wants to use his powers to create a sequence S\' such that the sum of adjacent differences, given by sum_{i=1}^{N-1} |S\'_i - S\'_{i+1}|, is minimized. Design an algorithm that calculates the minimum cost required for the magician to achieve this goal. -----Constraints----- - 1 leq N leq 100,000 - 0 leq S_i leq 10^9 -----Input----- The input is given from Standard Input in the following format: ``` N S_1 S_2 ... S_N ``` -----Output----- Print a single integer: the minimum cost needed to modify the sequence to minimize the sum of adjacent differences. -----Sample Input----- 5 3 1 4 1 5 -----Sample Output----- 4 **Explanation:** One possible way to transform the sequence S to minimize the sum of adjacent differences is: 1. Swap (3, 1) to make the sequence [1, 3, 4, 1, 5], cost 2 (|3 - 1|) 2. Swap (4, 1) to make the sequence [1, 3, 1, 4, 5], cost 3 (|4 - 1|) The sum of adjacent differences for [1, 3, 1, 4, 5] is: |1 - 3| + |3 - 1| + |1 - 4| + |4 - 5| = 2 + 2 + 3 + 1 = 8 However, with the given input, other arrangements could lead to different overall costs, and the minimal transformation sum we found is 4 by a more complex series of swaps, thus the output.","solution":"def minimize_sum_adjacent_differences(sequence): Given a sequence of integers, this function calculates the minimum cost required to modify the sequence to minimize the sum of adjacent differences. sequence: List[int] - A list of integers representing the sequence. Returns: int - The minimum cost to achieve the goal. sequence.sort() total_cost = 0 for i in range(1, len(sequence)): total_cost += abs(sequence[i] - sequence[i - 1]) return total_cost"},{"question":"You are given a list of integers and an integer k. The task is to rotate the list k times to the right. Write a function `rotateList` that takes the list and integer k as arguments and returns the rotated list. Example 1: Input: list: [1, 2, 3, 4, 5] k: 2 Output: [4, 5, 1, 2, 3] Explanation: Rotating the list 2 times to the right, we get [4, 5, 1, 2, 3]. Example 2: Input: list: [100, 120, 130, 140] k: 3 Output: [120, 130, 140, 100] Explanation: Rotating the list 3 times to the right, we get [120, 130, 140, 100]. Your Task: Implement the `rotateList` function which should take a list and an integer k as input and return the list rotated k times to the right. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 <= len(list) <= 10^{5} 0 <= k <= 10^{5}","solution":"def rotateList(arr, k): Rotates the list arr k times to the right. n = len(arr) k = k % n # Ensure k is within the bounds of the list length return arr[-k:] + arr[:-k]"},{"question":"Within a country, there are N cities and M direct roads, each connecting a pair of different cities. Each road has a weight which represents the cost required to travel that road. The cities are numbered from 1 to N, and the roads are bidirectional. The government wants to improve transport efficiency by ensuring that there is a unique path for every pair of cities, which does not always exist. Your task is to compute the minimum cost required to achieve this by potentially adding new roads to the network. Constraints * 1 leq N leq 100,000 * 0 leq M leq 200,000 * 1 leq weight of each road leq 1,000,000 Input The input is given from the Standard Input in the following format: N M u_1 v_1 w_1 u_2 v_2 w_2 ... u_M v_M w_M Here, `u_i` and `v_i` represent the pair of cities connected by the i-th road and `w_i` represents its weight. Output Print the minimum cost required to ensure there is a unique path between any pair of cities. If it\'s impossible to achieve, print -1. Examples Input 4 4 1 2 3 2 3 2 3 4 4 1 4 1 Output ----------- Input 6 2 1 2 5 4 5 6 Output 1 4 3 5 ----------- Input 3 0 Output","solution":"def find_minimum_cost(N, M, roads): Given N cities and M direct roads with weights, compute the minimum cost required to ensure there is a unique path for every pair of cities. :param N: Number of cities :param M: Number of roads :param roads: List of tuples representing the roads (u, v, w) :return: Minimum cost or -1 if impossible if M == 0: return -1 if N > 1 else 0 # Union-Find implementation to detect cycles parent = list(range(N + 1)) rank = [0] * (N + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 return True return False # Kruskal\'s algorithm to find the Minimum Spanning Tree (MST) roads.sort(key=lambda x: x[2]) mst_cost = 0 edges_used = 0 for u, v, w in roads: if union(u, v): mst_cost += w edges_used += 1 if edges_used == N - 1: return mst_cost # If we didn\'t use exactly N-1 edges, it means we couldn\'t connect all cities return -1 def parse_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) roads = [] index = 2 for _ in range(M): u = int(data[index]) v = int(data[index+1]) w = int(data[index+2]) roads.append((u, v, w)) index += 3 return N, M, roads if __name__ == \\"__main__\\": N, M, roads = parse_input() result = find_minimum_cost(N, M, roads) print(result)"},{"question":"Maria is a software developer who loves solving puzzles during her free time. One day, she came across a grid puzzle where she needs to find the shortest path from the top-left corner to the bottom-right corner of a grid. However, the grid contains obstacles, and Maria can only move right or down. Help Maria to write a function that calculates the number of unique paths from the top-left corner to the bottom-right corner of the grid, avoiding obstacles. Additionally, ensure your solution is efficient and can handle larger grids. -----Input----- The first line consists of two integers, n and m (1 leq n, m leq 100), representing the number of rows and columns in the grid. The following n lines each contain m integers, either 0 or 1. A 0 represents an open cell, and a 1 represents an obstacle that Maria cannot pass through. -----Output----- The output should be a single integer representing the number of unique paths from the top-left corner to the bottom-right corner of the grid. -----Examples----- Sample Input 1: 3 3 0 0 0 0 1 0 0 0 0 Sample Output 1: 2 Sample Input 2: 3 3 0 1 0 0 1 0 0 0 0 Sample Output 2: 1","solution":"def unique_paths_with_obstacles(grid): This function calculates the number of unique paths from the top-left corner to the bottom-right corner of a grid avoiding obstacles. if not grid or grid[0][0] == 1: return 0 n = len(grid) m = len(grid[0]) # Initialize a 2D list for dynamic programming dp = [[0]*m for _ in range(n)] # Start position dp[0][0] = 1 # Fill in the dp table for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"Write a function that, given the coordinates of two points, returns the slope of the line that passes through the points. If the slope is undefined (i.e., the line is vertical), the function should return the string \\"undefined\\". ```Python calculate_slope(x1, y1, x2, y2) x1, y1, x2, y2 are the integer coordinates of the two points ``` # Example ```Python calculate_slope(1, 2, 3, 4) should return 1.0 calculate_slope(2, 5, 2, 8) should return \\"undefined\\" calculate_slope(0, 0, 1, 2) should return 2.0 calculate_slope(1, 1, 2, 4) should return 3.0 ```","solution":"def calculate_slope(x1, y1, x2, y2): Returns the slope of the line passing through the points (x1, y1) and (x2, y2). If the slope is undefined (i.e., the line is vertical), the function returns \\"undefined\\". if x1 == x2: # vertical line return \\"undefined\\" return (y2 - y1) / (x2 - x1)"},{"question":"In a Sudoku game, the objective is to fill a 9x9 grid with digits so that each column, each row, and each of the nine 3x3 sub-grids that compose the grid (also called \\"boxes\\") contains all of the digits from 1 to 9. Starting with a partially completed grid, the goal is to complete it following the rules. **Problem Statement:** Write a program that solves a given Sudoku puzzle and returns the completed grid. **Input:** The input consists of 9 lines, each containing 9 characters which represent the Sudoku grid. Empty cells are denoted by \'.\', and filled cells contain digits from \'1\' to \'9\'. **Output:** Output the completed Sudoku grid in the same format as the input. **Constraints:** - Only valid initial configurations will be provided as input. - The provided grid will have a unique solution. **Example:** Input: ``` 5 3 . . 7 . . . . 6 . . 1 9 5 . . . . 9 8 . . . . 6 . 8 . . . 6 . . . 3 4 . . 8 . 3 . . 1 7 . . . 2 . . . 6 . 6 . . . . 2 8 . . . . 4 1 9 . . 5 . . . . 8 . . 7 9 ``` Output: ``` 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 ```","solution":"def solve_sudoku(board): Solves the given Sudoku board in place. :param board: list of list of str :return: None def is_valid(board, r, c, num): # Check the row for i in range(9): if board[r][i] == num: return False # Check the column for i in range(9): if board[i][c] == num: return False # Check the 3x3 box box_row_start = (r // 3) * 3 box_col_start = (c // 3) * 3 for i in range(3): for j in range(3): if board[box_row_start + i][box_col_start + j] == num: return False return True def solve(board): for r in range(9): for c in range(9): if board[r][c] == \'.\': for num in map(str, range(1, 10)): if is_valid(board, r, c, num): board[r][c] = num if solve(board): return True board[r][c] = \'.\' return False return True solve(board) return board def parse_input(grid_lines): return [line.split() for line in grid_lines] def format_output(board): return \\"n\\".join(\\" \\".join(row) for row in board) def find_sudoku_solution(grid_lines): board = parse_input(grid_lines) solve_sudoku(board) return format_output(board)"},{"question":"Problem Statement Imagine you own a factory that manufactures rectangular boxes of different sizes, and you recently installed a machine to automate the packing process. The boxes can be packed into crates, which are also rectangular, but there\'s a catch: each crate can only contain one box, and the box must fit exactly within the crate without any rotation or overlapping. You need to write a program to determine how many boxes can be packed into the given crates. Constraints * 1 <= M <= 100 (number of boxes) * 1 <= N <= 100 (number of crates) * 1 <= width, height <= 1000 Input Each data set is input in the following format: ``` M N width1 height1 width2 height2 ... widthM heightM width1 height1 width2 height2 ... widthN heightN ``` The first line contains the number of boxes `M` and the number of crates `N`. The next `M` lines each contain two integers representing the width and height of the `M` boxes. The next `N` lines each contain two integers representing the width and height of the `N` crates. Output Output the number of boxes that can be packed into crates. Examples Input ``` 4 3 4 5 6 8 7 3 5 5 8 6 5 6 4 4 ``` Output ``` 2 ``` Input ``` 5 5 3 3 6 4 5 2 3 7 8 1 5 5 3 3 6 5 4 2 7 2 ``` Output ``` 3 ```","solution":"def pack_boxes_into_crates(M, N, boxes, crates): Determines how many boxes can be packed into crates. Parameters: - M: int, number of boxes - N: int, number of crates - boxes: list of tuples (width, height), dimensions of the boxes - crates: list of tuples (width, height), dimensions of the crates Return: - int, number of boxes that can be packed into crates packed_count = 0 for box in boxes: for crate in crates: if box[0] <= crate[0] and box[1] <= crate[1]: packed_count += 1 crates.remove(crate) # this crate is now used break return packed_count"},{"question":"You are given a list of N activities, each with a start time and an end time. Your task is to select the maximum number of activities that can be performed by a single person, assuming that a person can only work on one activity at a time. Each activity has a distinct start and end time. -----Constraints----- - 1 leq N leq 10^5 - 0 leq start_i < end_i leq 10^9 -----Input----- Input is given from Standard Input in the following format: N start_1 end_1 start_2 end_2 : start_N end_N -----Output----- Output a single integer, the maximum number of activities that can be selected. -----Sample Input----- 5 1 2 3 4 0 6 5 7 8 9 -----Sample Output----- 4 In this example, the maximum number of non-overlapping activities are (1,2), (3,4), (5,7), and (8,9). The person attends these four activities without any overlaps. To solve this problem efficiently, sort activities by their end times and then use a greedy algorithm to select the maximum number of non-overlapping activities.","solution":"def max_activities(activities): Get the maximum number of activities that can be selected without overlap. Parameters: activities (List[Tuple[int, int]]): List of tuples representing start and end times of activities. Returns: int: Maximum number of non-overlapping activities. if not activities: return 0 # Sort activities based on their end times. activities.sort(key=lambda x: x[1]) count = 1 # We can always select the first activity end_time = activities[0][1] for i in range(1, len(activities)): if activities[i][0] >= end_time: count += 1 end_time = activities[i][1] return count"},{"question":"You are given a grid of size n x n filled with non-negative integers. Your task is to find the maximum sum of numbers along a path from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1) subject to the condition that you can only move either right or down at any point in time. Input The input to the function contains tree space-separated values: - The first line contains an integer n (1 ≤ n ≤ 100), the size of the grid. - The next n lines each contain n integers representing the grid (0 ≤ grid[i][j] ≤ 1000). Output Print the maximum sum of numbers along a path from the top-left corner to the bottom-right corner. Examples Input 3 1 3 1 1 5 1 4 2 1 Output 12 Input 2 1 2 1 1 Output 4 Note In the first example, one optimum path to obtain the maximum sum is: 1 → 3 → 5 → 2 → 1. The sum is 12. In the second example, the optimum path is: 1 → 2 → 1. The sum is 4.","solution":"def max_path_sum(n, grid): Returns the maximum sum of numbers along a path from the top-left corner to the bottom-right corner where you can only move either right or down. :param n: the size of the grid :param grid: the grid itself as a list of lists :return: the maximum sum dp = [[0]*n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[0][i] = dp[0][i-1] + grid[0][i] dp[i][0] = dp[i-1][0] + grid[i][0] for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1]"},{"question":"You are given an n x m grid representing a field. Each cell of the grid can either be land or water. Your goal is to find all the islands in the grid and return the number of distinct islands. An island is a group of connected lands (1\'s) connected horizontally, vertically, or diagonally. The grid is considered to be connected if it forms a single connected island when all the islands are considered. Input: The first line contains the number of test cases T. T test cases follow. Each case starts with two integers n and m. The next n lines each contain m characters (either \'1\' for land or \'0\' for water). Output: Output T lines, one for each test case containing the number of distinct islands. Constraints: 1 ≤ T ≤ 100 1 ≤ n, m ≤ 500 SAMPLE INPUT 2 4 5 11110 11010 11000 00001 3 3 111 010 111 SAMPLE OUTPUT 2 1 Explanation: For the first case, the grid has two distinct islands. One is formed from the first three rows of land on the left side and the second is formed from the single land cell on the bottom right corner. For the second case, the grid has a single distinct island that covers the entire grid.","solution":"def num_islands(grid): if not grid: return 0 n, m = len(grid), len(grid[0]) visited = [[False for _ in range(m)] for _ in range(n)] def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == \'0\' or visited[x][y]: return visited[x][y] = True # Check all 8 directions including diagonals directions = [(-1,0), (1,0), (0,-1), (0,1), (-1,-1), (-1,1), (1,-1), (1,1)] for dx, dy in directions: dfs(x + dx, y + dy) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\' and not visited[i][j]: dfs(i, j) island_count += 1 return island_count def count_islands(test_cases): results = [] for n, m, grid in test_cases: results.append(num_islands(grid)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n, m = map(int, lines[index].split()) grid = [lines[index + 1 + i] for i in range(n)] test_cases.append((n, m, grid)) index += n + 1 return test_cases def main(input_str): test_cases = parse_input(input_str) results = count_islands(test_cases) return results"},{"question":"You are given an integer array nums and an integer k. Your task is to return the maximum element in every k-sized subarray of the array. If the length of the array is less than k, your function should return an empty list. Example 1: Input: nums = [1,3,-1,-3,5,3,6,7], k = 3 Output: [3, 3, 5, 5, 6, 7] Explanation: The maximum elements of each subarray of size 3 are listed as follows: [1, 3, -1] -> 3 [3, -1, -3] -> 3 [-1, -3, 5] -> 5 [-3, 5, 3] -> 5 [5, 3, 6] -> 6 [3, 6, 7] -> 7 Example 2: Input: nums = [1], k = 1 Output: [1] Explanation: The only subarray of size 1 is [1] with maximum element 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxInSubarrays() which takes an integer array nums and an integer k as input and returns a list of integers representing the maximum element in each k-sized subarray. Expected Time Complexity: O(n). Expected Auxiliary Space: O(k). Constraints: 1 <= |nums| <= 10^5 -10^4 <= nums[i] <= 10^4 1 <= k <= |nums|","solution":"from collections import deque def maxInSubarrays(nums, k): Returns the maximum element in every k-sized subarray of the array nums. If the length of the array is less than k, the function returns an empty list. if k > len(nums): return [] deq = deque() result = [] for i in range(len(nums)): # Remove elements not within the sliding window if deq and deq[0] == i - k: deq.popleft() # Remove all elements smaller than the current element from the deque while deq and nums[deq[-1]] <= nums[i]: deq.pop() deq.append(i) # Start adding maximum to result list after the first k elements if i >= k - 1: result.append(nums[deq[0]]) return result"},{"question":"Ravi and Maya are playing a game with numbers. The game is played as follows: Ravi chooses an integer N, and Maya has to generate a sequence of non-negative integers such that the sum of the sequence is exactly N. However, there is a catch: each element in the sequence must be a power of 2 (i.e., 1, 2, 4, 8, ...). The challenge for Maya is to generate the sequence with the minimum possible number of elements. Write a program to help Maya find the minimum number of elements in the sequence for a given N. Input: The first line contains an integer T, the number of test cases. For each test case, there is one integer N, the target number. Output: For each test case, output the minimum number of elements required to form N using powers of 2. Constraints: 1 ≤ T ≤ 10^5 1 ≤ N ≤ 2^31 - 1 Sample Input: 3 7 10 15 Sample Output: 3 2 4 Explanation: Test case 1: 7 can be expressed as 4 + 2 + 1, which are all powers of 2. Thus, the minimum number of elements is 3. Test case 2: 10 can be expressed as 8 + 2, which are powers of 2. Thus, the minimum number of elements is 2. Test case 3: 15 can be expressed as 8 + 4 + 2 + 1, which are powers of 2. Thus, the minimum number of elements is 4.","solution":"def min_powers_of_2(N): Returns the minimum number of elements required to form N using powers of 2. count = 0 while N > 0: N -= (1 << (N.bit_length() - 1)) count += 1 return count def solve(T, nums): results = [] for N in nums: results.append(min_powers_of_2(N)) return results"},{"question":"Given a string of lower-case English letters, your task is to sort the string in such a way that all vowels (a, e, i, o, u) appear before all consonants, while preserving the relative order of vowels and consonants from the original string. Implement a function that accepts a string and returns a new string where vowels come before consonants, maintaining their original relative order among vowels and consonants. # Input A single line contains a non-empty string consisting of small English letters. The length of the string is between 1 and 1000 characters. # Output Print the resulting string with all vowels appearing before consonants, while preserving their original order within their respective groups. # Examples **Example 1:** ``` Input example Output eae xmpl ``` **Example 2:** ``` Input computer Output oue cmptr ``` **Example 3:** ``` Input hello Output eo hll ``` # Constraints - The input string only contains lower-case English letters. - The length of the input string will not exceed 1000 characters.","solution":"def sort_vowels_and_consonants(s): Returns a string where all vowels come before consonants while preserving their relative order. vowels = \'aeiou\' vowel_part = \\"\\".join([char for char in s if char in vowels]) consonant_part = \\"\\".join([char for char in s if char not in vowels]) return vowel_part + \\" \\" + consonant_part"},{"question":"Given an array of integers and an integer k, find the maximum for each and every contiguous subarray of size k. Example 1: Input: arr = [1, 3, -1, -3, 5, 3, 6, 7] k = 3 Output: [3, 3, 5, 5, 6, 7] Explanation: 1st contiguous subarray = [1, 3, -1], max = 3 2nd contiguous subarray = [3, -1, -3], max = 3 3rd contiguous subarray = [-1, -3, 5], max = 5 4th contiguous subarray = [-3, 5, 3], max = 5 5th contiguous subarray = [5, 3, 6], max = 6 6th contiguous subarray = [3, 6, 7], max = 7 Example 2: Input: arr = [4, 2, 12, 11, -5] k = 2 Output: [4, 12, 12, 11] Explanation: 1st contiguous subarray = [4, 2], max = 4 2nd contiguous subarray = [2, 12], max = 12 3rd contiguous subarray = [12, 11], max = 12 4th contiguous subarray = [11, -5], max = 11 Your Task: You don\'t have to take input. Complete the function maxInSubarrays() that takes the array of integers and the integer k as parameters and returns an array of integers denoting the maximum for each and every contiguous subarray of size k. The printing is done by the driver code. Constraints: 1 <= N <= 10^5 1 <= k <= N -10^4 <= arr[i] <= 10^4","solution":"from collections import deque def max_in_subarrays(arr, k): Given an array of integers, find the maximum for each and every contiguous subarray of size k. Parameters: arr (list of int): The input array. k (int): The size of each subarray. Returns: list of int: A list of integers denoting the maximum for each subarray of size k. n = len(arr) if n * k == 0: return [] if k == 1: return arr deq = deque() result = [] # Process first k elements for i in range(k): while deq and arr[i] >= arr[deq[-1]]: deq.pop() deq.append(i) # Process the rest of the elements for i in range(k, n): result.append(arr[deq[0]]) # Remove elements not within the sliding window while deq and deq[0] <= i - k: deq.popleft() # Remove elements smaller than the current element from the deque while deq and arr[i] >= arr[deq[-1]]: deq.pop() deq.append(i) # Add the maximum for the last window result.append(arr[deq[0]]) return result"},{"question":"You are given a string consisting of lowercase letters. You are required to find a string `t` which is a rotated version of the given string `s` such that the resultant string `t` is lexicographically smallest. A string `t` is said to be a rotated version of string `s` if `t` could be obtained by rotating `s` some number of times. For example, if the string `s` is \\"abcde\\", then the rotated versions of `s` can be \\"abcde\\", \\"bcdea\\", \\"cdeab\\", \\"deabc\\", and \\"eabcd\\". -----Input----- The input consists of a single string `s` (1 ≤ |s| ≤ 100) — the given string. -----Output----- Print the lexicographically smallest rotated version of the string. -----Examples----- Input bca Output abc Input ccc Output ccc Input rzfakz Output akzrzf -----Note----- In the first sample, the possible rotated versions of \\"bca\\" are \\"bca\\", \\"cab\\", and \\"abc\\". Out of these, \\"abc\\" is the lexicographically smallest. In the second sample, all rotated versions of \\"ccc\\" will be \\"ccc\\". Hence, the smallest lexicographically string is \\"ccc\\". In the third sample, the possible rotated versions of \\"rzfakz\\" are \\"rzfakz\\", \\"zfakzr\\", \\"fakzrz\\", \\"akzrzf\\", \\"kzrzfa\\", and \\"zrzfak\\". Out of these, \\"akzrzf\\" is the lexicographically smallest.","solution":"def smallest_rotation(s): Returns the lexicographically smallest rotated version of the string s. n = len(s) candidates = [s[i:] + s[:i] for i in range(n)] return min(candidates)"},{"question":"Write a function to determine if a given string is a valid time in 24-hour format. The time will be represented as a string in the format \\"HH:MM\\", where \\"HH\\" ranges from 00 to 23 and \\"MM\\" ranges from 00 to 59. Return `True` if the string is a valid time, otherwise return `False`. # Examples ``` \\"13:45\\" --> True \\"00:00\\" --> True \\"23:59\\" --> True \\"24:00\\" --> False \\"12:60\\" --> False \\"09:30\\" --> True \\"9:30\\" --> False (invalid format) ```","solution":"def is_valid_time(time_str): Determines if a given string is a valid time in 24-hour format (HH:MM). Parameters: time_str (str): The time string to check. Returns: bool: True if time_str is a valid time, False otherwise. if len(time_str) != 5 or time_str[2] != \':\': return False try: hours = int(time_str[:2]) minutes = int(time_str[3:]) except ValueError: return False if 0 <= hours <= 23 and 0 <= minutes <= 59: return True return False"},{"question":"You are given two strings `str1` and `str2`, which represent large non-negative integers. Your task is to implement a function that multiplies these two numbers and returns the product as a string. Example 1: Input: `str1` = \\"123\\", `str2` = \\"456\\" Output: \\"56088\\" Example 2: Input: `str1` = \\"0\\", `str2` = \\"98765\\" Output: \\"0\\" Your Task: You don\'t need to handle any input. Complete the function `multiplyStrings()` that takes two strings `str1` and `str2` as input parameters and returns the product of the two numbers as a string. Constraints: - 1 <= len(str1), len(str2) <= 200 - The input strings do not contain any leading zeros except when the number is zero itself.","solution":"def multiplyStrings(str1, str2): Multiplies two large numbers represented as strings and returns the product as a string. if str1 == \\"0\\" or str2 == \\"0\\": return \\"0\\" len1 = len(str1) len2 = len(str2) result = [0] * (len1 + len2) for i in range(len1 - 1, -1, -1): for j in range(len2 - 1, -1, -1): mul = int(str1[i]) * int(str2[j]) sum = mul + result[i + j + 1] result[i + j + 1] = sum % 10 result[i + j] += sum // 10 result = \'\'.join(map(str, result)) return result.lstrip(\'0\')"},{"question":"Write a function that takes a list of integers and returns a list of the squares of each number. If a negative number is encountered, the function should stop processing and return the result up to that point. For example, given the list [1, 2, 3, -1, 4, 5], the function should return [1, 4, 9] and stop processing once it encounters the -1. Some examples: [1, 3, 5] => [1, 9, 25] [2, -1, 4] => [4] [-1, 2, 3] => [] [10, 20, 30] => [100, 400, 900] **NOTES:** * The input list will not be empty. * Negative numbers indicate termination and should not be included in the result. * Zero is considered a valid input and should be squared as well.","solution":"def square_until_negative(nums): Returns a list of squares of the numbers in the input list. Stops processing upon encountering a negative number and excludes it from the result. result = [] for num in nums: if num < 0: break result.append(num * num) return result"},{"question":"Given an integer array, move all the zeroes to the end while maintaining the relative order of the non-zero elements. Return the modified array. Example 1: Input: [0,1,0,3,12] Output: [1,3,12,0,0] Explanation: Zeroes are moved to the end while keeping the relative order of 1, 3, and 12. Example 2: Input: [0,0,1] Output: [1,0,0] Explanation: Zeroes are moved to the end and the single 1 is moved at the beginning. Note: The given array is of length in the range [1, 10^4] and the elements are integers in the range [0, 109].","solution":"def move_zeroes(nums): Moves all zeros in the integer array to the end while maintaining the relative order of non-zero elements. last_non_zero_found_at = 0 # If the current element is not 0, then we need to append it to the end of the last non-zero found position. for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_found_at] = nums[i] last_non_zero_found_at += 1 # After we have finished processing new elements, all the remaining elements should be 0 for i in range(last_non_zero_found_at, len(nums)): nums[i] = 0 return nums"},{"question":"Design a Snake Game Explanation: Design a snake game that is played on a board with dimensions width height. When a snake moves, it can move to the cell directly up, left, right or down. A game object is created as follows: class SnakeGame(int width, int height, List < List<Integer>> food): This initializes a new game object, the board’s size is width height and the food is given in a list of coordinates. Each coordinate (x,y) specifies that the food item is located at row x and column y on the board. int move(String direction): This takes the input direction could be \'U\' (Up), \'L\' (Left), \'R\' (Right), \'D\' (down) and returns the game\'s score after the move. If the game is over (the snake collides with the wall or its body), return -1. Assume that the game starts with an initial length of 1 (head of the snake is at (0, 0)), and the length of the snake increases by 1 each time it eats the food. The first food is at food[0], second is at food[1] and so on. The input direction indicates the movement of the snake\'s head. Example: ```python width: 3 height: 2 food: [[1,2],[0,1]] SnakeGame snakeGame = new SnakeGame(width, height, food); // The snake moves right. snakeGame.move(\\"R\\"); // return 0 // The snake moves down. snakeGame.move(\\"D\\"); // return 0 // The snake moves right (with food). snakeGame.move(\\"R\\"); // return 1 // The snake moves up. snakeGame.move(\\"U\\"); // return 1 // The snake moves left (with food). snakeGame.move(\\"L\\"); // return 2 // The snake moves up (c snakeGame.move(\\"U\\"); // return -1 (game over) ``` Your Task: Implement the class SnakeGame with the given methods. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= width, height <= 10^4 0 <= food.length <= 50 0 <= food[x][0] < height 0 <= food[x][1] < width Only 2 * 10^4 calls will be made to move.","solution":"class SnakeGame: def __init__(self, width, height, food): Initialize your data structure here. @param width - screen width @param height - screen height @param food - A list of food positions self.width = width self.height = height self.food = food self.food_index = 0 self.snake = [(0, 0)] # snake starts at the top-left corner self.snake_set = set(self.snake) # To track the snake\'s body self.directions = { \\"U\\": (-1, 0), \\"L\\": (0, -1), \\"R\\": (0, 1), \\"D\\": (1, 0) } self.score = 0 def move(self, direction): Moves the snake to the new direction. @param direction - string representing the move direction (\'U\', \'L\', \'R\', \'D\') @return The score after the move, or -1 if the game is over. current_head = self.snake[0] move = self.directions[direction] new_head = (current_head[0] + move[0], current_head[1] + move[1]) # Check if the new head position is out of bounds or hitting its own body (excluding the tail) if ( new_head[0] < 0 or new_head[0] >= self.height or new_head[1] < 0 or new_head[1] >= self.width or (new_head in self.snake_set and new_head != self.snake[-1]) ): return -1 # Check if the new head position is on the food if self.food_index < len(self.food) and new_head == tuple(self.food[self.food_index]): self.score += 1 self.food_index += 1 else: # Move the snake by removing the tail tail = self.snake.pop() self.snake_set.remove(tail) # Add new head to the snake self.snake.insert(0, new_head) self.snake_set.add(new_head) return self.score"},{"question":"Given an array of integers `nums`, find the maximum possible sum of elements of any subarray. A subarray is a contiguous subsequence of the array. Your task is to implement a function `maxSubArraySum(nums)` that returns this maximum sum. # Example: Input: `nums = [-2,1,-3,4,-1,2,1,-5,4]` Output: `6` Explanation: The subarray `[4,-1,2,1]` has the largest sum `6`. Input: `nums = [1]` Output: `1` Explanation: The subarray `[1]` has the largest sum `1`. Input: `nums = [5,4,-1,7,8]` Output: `23` Explanation: The subarray `[5,4,-1,7,8]` has the largest sum `23`. # Note: - 1 <= nums.length <= 10^4 - -10^4 <= nums[i] <= 10^4 # Follow up: - Can you solve it using only one pass? - Can you solve it in O(1) space?","solution":"def maxSubArraySum(nums): Returns the maximum possible sum of elements of any subarray. max_so_far = nums[0] max_ending_here = nums[0] for i in range(1, len(nums)): max_ending_here = max(nums[i], max_ending_here + nums[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Background In a small village, residents rely on a single well for their water needs. To ensure fair distribution, a schedule is created where each person can fetch water only at specific times. Each person\'s fetching time is assigned an integer representing the minute of the day they can fetch water. However, due to demand, it may be necessary for multiple people to fetch water at the same time, in which case a fair waiting order is established based on their arrival times. Problem Given a list of people with their assigned fetching times and their arrival times at the well, determine the order in which they fetch water, resolving conflicts by arrival times. Constraints: - 1 ≤ N ≤ 50 (number of people) - 0 ≤ fetching_timei < 1440 (minutes of the day, 0-1439) - 0 ≤ arrival_timei < 1440 (minutes of the day, 0-1439) Input The input is provided in the following format: ``` N fetching_time0 arrival_time0 fetching_time1 arrival_time1 ... fetching_timeN-1 arrival_timeN-1 ``` The first line contains an integer N, which represents the number of people. The following N lines each contain two integers: the fetching time and the arrival time for each person. Output Output the order of people fetching water starting from minute 0 to minute 1439, with each line showing the fetching time followed by the list of people\'s arrival times in the order they will fetch water. Examples Input 5 60 5 60 15 120 10 60 25 120 5 Output 60: 5 15 25 120: 5 10 Input 3 90 2 90 5 30 1 Output 30: 1 90: 2 5 Input 4 300 30 300 20 300 40 200 10 Output 200: 10 300: 20 30 40","solution":"def fetch_order(n, times): from collections import defaultdict fetch_dict = defaultdict(list) for fetch_time, arrival_time in times: fetch_dict[fetch_time].append(arrival_time) result = [] for fetch_time in sorted(fetch_dict.keys()): fetch_dict[fetch_time].sort() result.append(f\\"{fetch_time}: {\' \'.join(map(str, fetch_dict[fetch_time]))}\\") return result"},{"question":"A group of friends has decided to go on a road trip and they want to know the total cost for traveling in different directions. Each direction has a different cost associated with it. The costs are given as follows: Cost per kilometer: North (N) - 1 per kilometer South (S) - 2 per kilometer East (E) - 3 per kilometer West (W) - 4 per kilometer Given a sequence of directions along with the kilometers traveled in each direction, calculate the total cost for the trip. -----Input:----- - The first line of input is a single integer `n` (1 <= n <= 20) representing the number of directions traveled. - The next `n` lines each contain a character (N, S, E, or W) followed by a space and an integer representing the kilometers traveled in that direction. -----Output:----- Print the total cost of the trip. -----Sample Input:----- 4 N 10 S 5 E 3 W 2 -----Sample Output:----- 37 -----EXPLANATION:----- Total cost = (10km x 1) + (5km x 2) + (3km x 3) + (2km x 4) = 10 + 10 + 9 + 8 = 37.","solution":"def total_travel_cost(n, travels): Given the number of travel segments and a list of tuples containing the direction and kilometers, calculate the total cost of the trip. Args: n (int): Number of directions traveled travels (list of tuples): Each tuple contains a direction (str) and kilometers (int) Returns: int: Total cost of the trip cost_per_km = { \'N\': 1, \'S\': 2, \'E\': 3, \'W\': 4 } total_cost = 0 for direction, km in travels: total_cost += cost_per_km[direction] * km return total_cost"},{"question":"You are given a string consisting of uppercase English letters only. A \\"substring\\" is a sequence of consecutive characters from the string. We define a substring to be \\"nice\\" if the number of distinct letters in it is at most K. Your task is to find the length of the longest \\"nice\\" substring of the given string. -----Constraints----- - 1 leq |S| leq 10^5 - 1 leq K leq 26 -----Input----- Input is given from Standard Input in the following format: S K -----Output----- Print the length of the longest \\"nice\\" substring of the given string. -----Sample Input----- ABBACAB 2 -----Sample Output----- 4 Explanation: In the example, the longest \\"nice\\" substring with at most 2 distinct letters is \\"ABBA\\", which has a length of 4.","solution":"def longest_nice_substring(S, K): Returns the length of the longest substring with at most K distinct letters. from collections import defaultdict n = len(S) if n == 0: return 0 if K == 0: return 0 left = 0 right = 0 max_length = 0 char_count = defaultdict(int) distinct_count = 0 while right < n: if char_count[S[right]] == 0: distinct_count += 1 char_count[S[right]] += 1 right += 1 while distinct_count > K: char_count[S[left]] -= 1 if char_count[S[left]] == 0: distinct_count -= 1 left += 1 max_length = max(max_length, right - left) return max_length # Example usage: # S = \\"ABBACAB\\" # K = 2 # print(longest_nice_substring(S, K)) # Output: 4"},{"question":"Alex is trying to automate the sorting of books in a library. The library has a collection of N books, each identified by a unique integer ID. The goal is to sort the books in an increasing order of their ID, but the library can only afford to perform a restricted type of sorting operation. The operation consists of selecting any prefix of the list of books (up to and including the entire list) and reversing it. Given the initial order of the books by their IDs, determine the minimum number of such operations required to sort the books in increasing order. ---------- **Input** The first line contains an integer N — the number of books (1 leq N leq 2 times 10^5). The second line contains N distinct integers b_1, b_2, b_3, ldots, b_N — the IDs of the books in their initial order (1 leq b_i leq 10^9). ---------- **Output** Print a single integer — the minimum number of prefix reverse operations required to sort the list of book IDs in increasing order. ---------- **Examples** **Input** ``` 5 4 3 2 1 5 ``` **Output** ``` 3 ``` **Input** ``` 3 1 3 2 ``` **Output** ``` 1 ``` ---------- **Note** In the first example, one possible way to sort the books with the minimum number of operations is: 1. Reverse the entire list: [5, 1, 2, 3, 4] 2. Reverse the prefix of length 4: [3, 2, 1, 5, 4] 3. Reverse the entire list: [4, 5, 1, 2, 3] In the second example, you can sort the list in a single operation: 1. Reverse the prefix of length 2: [3, 1, 2]","solution":"def min_operations_to_sort_books(N, books): Returns the minimum number of prefix reverse operations required to sort the books in increasing order. longest_prefix = 1 count = 1 for i in range(1, N): if books[i] > books[i-1]: count += 1 else: count = 1 longest_prefix = max(longest_prefix, count) return N - longest_prefix"},{"question":"Given a positive integer n that represents the number of rows in a matrix, you need to fill the matrix with a specific pattern. The matrix has n rows and 10 columns. The pattern consists of a zigzag path from top to bottom, with the direction of the zigzag changing every two columns. Follow the given rules for filling the matrix: 1. Start by filling the first column from top to bottom. 2. Fill the second column from bottom to top. 3. Repeat the same for next two columns but start from top to bottom this time. 4. Continue alternating the pattern for the next sets of two columns. Example: Input: n = 3 Output: 1 6 7 12 13 18 19 24 25 30 2 5 8 11 14 17 20 23 26 29 3 4 9 10 15 16 21 22 27 28 Explanation: The matrix is 1 6 7 12 13 18 19 24 25 30 2 5 8 11 14 17 20 23 26 29 3 4 9 10 15 16 21 22 27 28 Your Task: You don\'t need to read input or print anything. Your task is to complete the function fillZigzag() which takes an integer n as input and returns a list of lists representing the matrix filled in the zigzag pattern. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 100","solution":"def fillZigzag(n): Returns a list of lists representing a matrix of size n x 10 filled in a zigzag pattern. matrix = [[0] * 10 for _ in range(n)] num = 1 for col in range(10): if col % 2 == 0: # fill top to bottom for row in range(n): matrix[row][col] = num num += 1 else: # fill bottom to top for row in range(n - 1, -1, -1): matrix[row][col] = num num += 1 return matrix"},{"question":"Given a list of accounts, each account contains a list of email addresses. All email addresses belong to one person. Different accounts can have the same email address in them. Merge these accounts and return the list of accounts in the following format: The first element of each account is the name, followed by the sorted list of unique emails in that account. Accounts can be in any order. Example: Input: [ [\\"John\\", \\"[johnsmith@mail.com\\", \\"john00@mail.com\\"]], [\\"John\\", \\"[johnnybravo@mail.com\\"]], [\\"John\\", \\"[johnsmith@mail.com\\", \\"john_newyork@mail.com\\"]], [\\"Mary\\", \\"[mary@mail.com]\\"] ] Output: [ [\\"John\\", [\\"john00@mail.com\\", \\"john_newyork@mail.com\\", \\"johnsmith@mail.com\\"]], [\\"John\\", [\\"johnnybravo@mail.com\\"]], [\\"Mary\\", [\\"mary@mail.com\\"]] ] Note: - The length of accounts will be in the range [1, 1000]. - The length of accounts[i] will be in the range [1, 100]. - The email addresses in accounts[i] are unique.","solution":"from collections import defaultdict def accounts_merge(accounts): Merge accounts based on email addresses. :param accounts: List of accounts where first element is account name and rest are emails. :return: Merged accounts with unique emails sorted. email_to_name = {} graph = defaultdict(set) # Build the graph for account in accounts: name = account[0] emails = account[1:] for email in emails: graph[emails[0]].add(email) graph[email].add(emails[0]) email_to_name[email] = name seen = set() merged_accounts = [] # Perform DFS to find connected components (all emails of one account) def dfs(email): stack = [email] result = [] while stack: node = stack.pop() if node not in seen: seen.add(node) result.append(node) stack.extend(graph[node]) return result for email in graph: if email not in seen: emails = sorted(dfs(email)) merged_accounts.append([email_to_name[email]] + emails) return merged_accounts"},{"question":"Mr. B, a software developer, often works with data sets that involve frequent updates and queries. To practice his skills, he decided to solve a problem involving a list of integers. His goal is to efficiently modify elements of the list and compute the sum of elements within a certain range, multiple times. Given a list of integers, your task is to implement a program that can handle the following types of operations efficiently: 1. Update the value of an element at a specific index. 2. Compute the sum of elements in a specified range. Input The input consists of multiple data sets. Each data set starts with two integers `n` (1 ≤ n ≤ 100,000) and `q` (1 ≤ q ≤ 100,000), where `n` is the length of the list and `q` is the number of operations to be performed. The next line contains `n` integers representing the initial list. Each of the following `q` lines contains an operation in one of the following formats: - `u x y`: Update the value at index `x` (0-based index) to `y`. - `s l r`: Compute the sum of elements from index `l` to index `r` (inclusive, 0-based index). Output For each sum operation, output the result on a new line. Example Input 5 5 1 2 3 4 5 s 1 3 u 2 10 s 1 3 u 0 6 s 0 4 Output 9 16 27 Explanation For the first sum operation `s 1 3`, the sum of elements from index 1 to 3 is 2+3+4=9. After the update operation `u 2 10`, the list becomes [1, 2, 10, 4, 5]. The second sum operation `s 1 3` now computes 2+10+4=16. After the update operation `u 0 6`, the list becomes [6, 2, 10, 4, 5]. Finally, the third sum operation `s 0 4` computes 6+2+10+4+5=27. Note Optimize your solution for handling large input sizes effectively.","solution":"class NumArray: def __init__(self, nums): self.nums = nums self.n = len(nums) self.bit = [0] * (self.n + 1) for i, num in enumerate(nums): self.add(i + 1, num) def update(self, index, val): diff = val - self.nums[index] self.nums[index] = val self.add(index + 1, diff) def add(self, index, val): while index <= self.n: self.bit[index] += val index += index & -index def sum_range(self, l, r): return self.sum(r + 1) - self.sum(l) def sum(self, index): total = 0 while index > 0: total += self.bit[index] index -= index & -index return total # Function to handle the input operations def process_operations(n, nums, operations): num_array = NumArray(nums) results = [] for op in operations: if op[0] == \'u\': idx, val = int(op[1]), int(op[2]) num_array.update(idx, val) elif op[0] == \'s\': l, r = int(op[1]), int(op[2]) results.append(num_array.sum_range(l, r)) return results"},{"question":"BankTrack Inc. is developing a new service to provide real-time updates on customer bank account balances. The system should maintain and update account balances based on a series of transactions and respond to queries about the current balance of specific accounts. Write a program that processes a series of commands to either update an account balance or retrieve the current balance of a specified account. Input The input consists of multiple lines in the following format: The first line contains two integers M and Q (1 ≤ M ≤ 100000, 1 ≤ Q ≤ 100000), representing the number of accounts and the number of commands respectively. Each of the following Q lines contains one of the following commands: 1 a d, where 1 is the command to update the balance, a (1 ≤ a ≤ M) is the account number, and d (-109 ≤ d ≤ 109) is the change in the balance (positive for deposits, negative for withdrawals). 2 a, where 2 is the command to retrieve the balance, and a (1 ≤ a ≤ M) is the account number. Output For each balance retrieval command, output the current balance of the specified account on a new line. Example Input 3 5 1 1 500 1 2 300 2 1 1 1 -200 2 1 Output 500 300","solution":"def bank_account_management(M, Q, commands): Processes a series of commands to either update an account balance or retrieve the current balance of a specified account. Args: M : int : Number of accounts Q : int : Number of commands commands : List[List[int]] : List of commands where each command is a list Returns: List[int] : List of balances retrieved in order of the balance retrieval commands balances = [0] * (M + 1) # Initialize balances for M accounts (1-based index) results = [] for command in commands: if command[0] == 1: a, d = command[1], command[2] balances[a] += d elif command[0] == 2: a = command[1] results.append(balances[a]) return results"},{"question":"Two players, Alice and Bob, are playing a game. The game consists of a single pile of N stones. The players take turns, and Alice goes first. On each turn, a player can remove 1, 2, or 3 stones from the pile. The player who removes the last stone wins the game. If a player cannot make a move, they lose. Given the number of stones in the pile, determine whether Alice has a winning strategy assuming both play optimally. If Alice can win, return \\"Alice\\". Otherwise, return \\"Bob\\". ------ Input Format ------ - The input consists of a single integer N, the number of stones in the pile. ------ Output Format ------ - Output a single string: either \\"Alice\\" or \\"Bob\\". ------ Constraints ------ 1 ≤ N ≤ 10^{4} ----- Sample Input 1 ------ 4 ----- Sample Output 1 ------ Alice ----- Sample Input 2 ------ 7 ----- Sample Output 2 ------ Alice ----- Sample Input 3 ------ 10 ----- Sample Output 3 ------ Bob ----- Explanation 1 ------ In the first sample, Alice can take 3 stones on her first turn, leaving Bob with 1 stone, which forces Bob to remove the last stone and lose. Therefore, Alice wins if she plays optimally. In the second sample, Alice can leave Bob in a situation where she always wins by removing the stones optimally. In the third sample, whatever number of stones Alice removes initially (1, 2, or 3), Bob can always respond in such a way to leave Alice in a losing position eventually. Therefore, Bob will win if both play optimally.","solution":"def game_winner(N): Determines whether Alice or Bob has a winning strategy given N stones. Parameters: N (int): The number of stones in the pile. Returns: str: \\"Alice\\" if Alice has a winning strategy, otherwise \\"Bob\\". if N % 4 == 0: return \\"Bob\\" else: return \\"Alice\\""},{"question":"You recently discovered an island where people use a unique numbering system called Fibonacci System, based on the Fibonacci sequence. Their sequences start with numbers 1 and 2 instead of 0 and 1, so the sequence looks like 1, 2, 3, 5, 8, 13, 21, etc. The i-th number in this sequence is Fi. For any given integer number X, the inhabitants of the island want to know the smallest number of Fibonacci numbers needed to sum up to X. It is guaranteed that such a representation always exists. ------ Input ------ The first line contains an integer T denoting the number of test cases. Each of the next T lines contains a single integer X, the number to be represented. ------ Output ------ For each test case, print in a single line the minimum number of Fibonacci numbers whose sum equals X. ------ Constraints ------ 1 ≤ T ≤ 100000 1 ≤ X ≤ 10^{18} ----- Sample Input 1 ------ 2 4 10 ----- Sample Output 1 ------ 2 2 ----- Explanation 1 ------ Example case 1. The number 4 can be represented as 2 + 2 (two Fibonacci numbers). Example case 2. The number 10 can be represented as 8 + 2 (two Fibonacci numbers).","solution":"def fibonacci_numbers_up_to(n): fibs = [1, 2] while fibs[-1] < n: fibs.append(fibs[-1] + fibs[-2]) return fibs def min_fib_numbers_sum(x): fibs = fibonacci_numbers_up_to(x) count = 0 i = len(fibs) - 1 while x > 0: if fibs[i] <= x: x -= fibs[i] count += 1 i -= 1 return count def solve_min_fib_numbers_sum(T, test_cases): results = [] for x in test_cases: results.append(min_fib_numbers_sum(x)) return results"},{"question":"Ravi, a game developer, is designing a new 2D grid-based game. In this game, the player can move in four possible directions: up, down, left, and right. The player starts from a given starting position (startX, startY) and should reach a final position (endX, endY). However, some of the cells in the grid contain obstacles, which the player cannot move through. Ravi needs to determine if there is any possible way for the player to reach the final position from the starting position without running into obstacles. Given the dimensions of the grid (N x M), the starting position, the final position, and a list of coordinates representing obstacles, write a program that checks if there is a path for the player to move from the starting position to the final position. Input: The first line of the input contains a single integer T, denoting the number of test cases. The description of T test cases follows. For each test case: - The first line contains two space-separated integers N and M, the number of rows and columns in the grid. - The second line contains four space-separated integers startX, startY, endX, endY representing the starting and final positions. - The third line contains an integer K, representing the number of obstacles. - The next K lines each contain two space-separated integers, representing the coordinates of the obstacles. Output: For each test case, output \\"YES\\" if there is a path from the starting position to the final position without hitting any obstacles, otherwise, output \\"NO\\". Constraints: 1 ≤ T ≤ 50 1 ≤ N, M ≤ 100 0 ≤ startX, startY, endX, endY < N, M 0 ≤ K ≤ N * M Sample Input: 2 5 5 0 0 4 4 3 0 1 1 0 1 2 5 5 0 0 4 4 0 Sample Output: NO YES Explanation: - In the first test case, the path is blocked by obstacles at (0, 1), (1, 0), and (1, 2). - In the second test case, there are no obstacles, so the path is clear.","solution":"def bfs(grid, startX, startY, endX, endY, N, M): from collections import deque # Define possible movements : up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the queue for BFS queue = deque([(startX, startY)]) grid[startX][startY] = True # Mark initial position as visited while queue: x, y = queue.popleft() # If we reach the end position, return True if x == endX and y == endY: return True # Explore the neighbors for dx, dy in directions: nx, ny = x + dx, y + dy # Check if the new position is within bounds and not visited/obstacle if 0 <= nx < N and 0 <= ny < M and not grid[nx][ny]: grid[nx][ny] = True queue.append((nx, ny)) # Return False if there\'s no path return False def is_path_possible(N, M, startX, startY, endX, endY, obstacles): # Create a grid of NxM with False denoting unvisited cells grid = [[False] * M for _ in range(N)] # Mark obstacles as True (visited) for ox, oy in obstacles: grid[ox][oy] = True return bfs(grid, startX, startY, endX, endY, N, M) def paths_exist(T, test_cases): results = [] for (N, M, start, end, K, obstacles) in test_cases: result = is_path_possible(N, M, start[0], start[1], end[0], end[1], obstacles) results.append(\\"YES\\" if result else \\"NO\\") return results # Sample usage # Input T = 2 test_cases = [ (5, 5, (0, 0), (4, 4), 3, [(0, 1), (1, 0), (1, 2)]), (5, 5, (0, 0), (4, 4), 0, []) ] print(paths_exist(T, test_cases)) # Output: [\'NO\', \'YES\']"},{"question":"Rita is fascinated by palindromic numbers and wants to find the smallest palindromic number larger than a given integer x. A palindromic number is a number that reads the same forward and backward, such as 121 or 1331. Your task is to help Rita find this smallest palindromic number. Input The input consists of a single integer x (1 ≤ x ≤ 10^18). Output Output the smallest palindromic number greater than x. Examples Input 123 Output 131 Input 999 Output 1001 Input 12321 Output 12421","solution":"def is_palindrome(n): Check if the number is a palindrome. return str(n) == str(n)[::-1] def next_palindrome(x): Find the smallest palindromic number greater than x. num = x + 1 while not is_palindrome(num): num += 1 return num"},{"question":"Your friend has a set of light bulbs lined up in a row, initially all turned off. They are labeled with their positions from 1 to n. Every i-th bulb toggles its state (on to off, or off to on) for each multiple of i. For example, when i = 1, every bulb toggles; when i = 2, every second bulb toggles, and so on. This process continues until every multiple up to n has been processed. Write a program to determine the final state of each bulb after this process. Input An integer n (1 ≤ n ≤ 10,000) is given in a line. Output Print a list of n integers, where each integer represents the state of the corresponding bulb (0 for off, 1 for on). Example Input 5 Output 1 0 0 1 0","solution":"def bulb_switcher(n): Determines the final state of each bulb after toggling for each multiple of i. :param n: An integer representing the number of bulbs (1 ≤ n ≤ 10,000) :return: A list of integers representing the final state of the bulbs (0 for off, 1 for on) # Initialize all bulbs to off (0) bulbs = [0] * n # Toggle the bulbs according to the problem\'s requirements for i in range(1, n + 1): for j in range(i, n + 1, i): bulbs[j - 1] = 1 - bulbs[j - 1] return bulbs"},{"question":"Tom loves solving programming challenges. Given an array of integers, he wants to find the length of the longest contiguous subarray such that its elements are in an increasing order. Input The first line contains an integer T denoting the number of test cases. For each test case, the first line contains an integer N, the size of the array. The second line contains N integers representing the elements of the array. Output For each test case, print the length of the longest increasing contiguous subarray in a new line. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 100000 1 ≤ Array elements ≤ 1000000 Example Input: 2 6 1 3 2 3 4 5 4 15 12 20 22 Output: 4 3","solution":"def length_of_longest_increasing_subarray(arr): Returns the length of the longest contiguous increasing subarray. n = len(arr) if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if arr[i] > arr[i-1]: current_length += 1 else: current_length = 1 max_length = max(max_length, current_length) return max_length def solve(test_cases): results = [] for case in test_cases: N, arr = case results.append(length_of_longest_increasing_subarray(arr)) return results # Example input handling parsing def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((N, arr)) index += 2 return test_cases"},{"question":"Task: You need to write a function `sum_of_odd_indices` that takes a list of integers as input and returns the sum of elements located at odd indices in the list (i.e., indices 1, 3, 5, etc.). Rules/Note: * If the input list is empty, the function should return 0. * Consider that the list indices start from 0. # Examples: * sum_of_odd_indices([1, 2, 3, 4, 5, 6]): 2 + 4 + 6 = 12 returns: 12 * sum_of_odd_indices([10, 20, 30, 40, 50]): 20 + 40 = 60 returns: 60 * sum_of_odd_indices([]): returns: 0 ```if-not:cfml * Hint: Use slicing to access elements at odd indices ``` ```if:cfml * Hint: Use Step argument in List comprehension to access elements at odd indices ```","solution":"def sum_of_odd_indices(num_list): Returns the sum of elements located at odd indices in the input list. :param num_list: List of integers :return: Sum of elements at odd indices return sum(num_list[i] for i in range(1, len(num_list), 2))"},{"question":"You are given an integer n. Your task is to produce an n times n matrix where each element of the matrix is either -1 or 1. The matrix should satisfy certain properties based on the value of n: 1. If n is even, the matrix should have exactly half of its elements as -1 and the other half as 1. 2. If n is odd, it should have (n^2 - 1) / 2 elements as -1 and (n^2 + 1) / 2 elements as 1. 3. The sum of the elements in any row must be 1. 4. The sum of the elements in any column must be 1. Your goal is to construct such a matrix for a given n and output it. ----- Input ----- The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. The only line of each test case contains one integer n (1 le n le 20) — the size of the matrix. ----- Output ----- For each test case, output the n times n matrix that meets the requirements. Each matrix should be output as n lines of n integers separated by spaces. If there are multiple correct answers, you may print any of them. ----- Example ----- Input 3 2 3 4 Output 1 -1 -1 1 1 -1 -1 1 1 1 -1 1 -1 1 -1 1 -1 -1 1 -1 1 1 -1 1 -1 -1 1 -1 1","solution":"def generate_matrix(n): Generate an n x n matrix where: - If n is even, the matrix contains equal numbers of -1 and 1. - If n is odd, the matrix contains (n^2 - 1) / 2 elements as -1 and (n^2 + 1) / 2 elements as 1. - The sum of the elements in any row must be 1. - The sum of the elements in any column must be 1. matrix = [[-1] * n for _ in range(n)] if n == 1: return [[1]] # Fill diagonals with 1 to make sure the sum of each row and column becomes 1 for i in range(n): matrix[i][i] = 1 return matrix def solve(input_data): result = [] t, *cases = map(int, input_data.split()) for n in cases: matrix = generate_matrix(n) result.append(\\"n\\".join(\\" \\".join(map(str, row)) for row in matrix)) return \\"nn\\".join(result)"},{"question":"Write a function that takes two strings as input and determines if one string is a subsequence of the other. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. Examples: ``` \\"is_subsequence(\'abc\', \'ahbgdc\') -> True \\"is_subsequence(\'axc\', \'ahbgdc\') -> False \\"is_subsequence(\'ace\', \'abcde\') -> True \\"is_subsequence(\'\', \'anything\') -> True \\"is_subsequence(\'anything\', \'\') -> False ``` Write the method: ```python def is_subsequence(s1: str, s2: str) -> bool: ``` ```Fsharp let is_subsequence (s1:string) (s2:string) : bool = ``` For both methods: - If the first input string is empty, return True. - If the second input string is empty and the first string is not empty, return False. - You may assume that both input strings are non-null and contain only lowercase English letters.","solution":"def is_subsequence(s1: str, s2: str) -> bool: Determines if s1 is a subsequence of s2. if not s1: return True if not s2: return False iter_s2 = iter(s2) return all(char in iter_s2 for char in s1)"},{"question":"Finish the function so that it takes an input list of integers and returns the sum of the squares of each element in the list. If the input list is empty, return 0. Assume: The input list will only contain integers, and the range for integers is within typical 32-bit signed integer bounds. Examples ``` sum_of_squares([1, 2, 3]) -> 14 sum_of_squares([0, -4, 5]) -> 41 sum_of_squares([]) -> 0 sum_of_squares([10, -2]) -> 104 ```","solution":"def sum_of_squares(numbers): Returns the sum of the squares of each element in the list. If the list is empty, return 0. return sum(x ** 2 for x in numbers)"},{"question":"# Chess Tournament In a round-robin chess tournament, every participant plays a game against every other participant exactly once. The tournament organizer wants to know the total number of games played and also evaluate the performance of a particular player, Alice. The results of all the matches are recorded in a matrix where the element at the i-th row and j-th column is 1 if the player i has won against the player j, -1 if the player i has lost against the player j, and 0 if there\'s no match played or if it is the same player. Note that if player i wins against player j, then player j loses to player i. Your task is to find the total number of games played in the tournament and the number of wins, losses, and draws for Alice. Input The first line contains an integer n (2 ≤ n ≤ 100), representing the number of participants in the tournament. The following n lines each contain n integers where the j-th integer on the i-th line is an element of the matrix as described above. Alice is represented by the participant at the first row (index 0). Output Print four integers: the total number of games played, the number of wins, losses, and draws for Alice. Examples Input 3 0 1 -1 -1 0 1 1 -1 0 Output 3 1 1 0 Input 4 0 1 0 -1 -1 0 1 0 0 -1 0 1 1 0 -1 0 Output 6 1 1 1 In the first example, there are 3 participants, so the total number of games played is 3. Alice (index 0) won against the second participant (index 1), lost to the third participant (index 2), and had no draw. In the second example, there are 4 participants, so the total number of games played is 6. Alice (index 0) won against the second participant (index 1), lost to the fourth participant (index 3), and has one draw against the third participant (index 2).","solution":"def chess_tournament(n, results): total_games = n * (n - 1) // 2 alice_wins = 0 alice_losses = 0 alice_draws = 0 for j in range(n): if results[0][j] == 1: alice_wins += 1 elif results[0][j] == -1: alice_losses += 1 elif results[0][j] == 0 and j != 0: alice_draws += 1 return total_games, alice_wins, alice_losses, alice_draws"},{"question":"Zara loves symmetry in numbers. She considers a string of digits to be beautiful if it reads the same forwards and backwards. Zara is tasked with determining how many beautiful substrings (substrings that are palindromes) of a given string of digits exist. A substring is defined as a sequence of consecutive characters within the string. In this problem, single-digit substrings are also considered beautiful as they naturally are palindromes. Write a function to help Zara calculate the number of beautiful substrings in the given string of digits. INPUT An input contains a string S, which denotes the digits. OUTPUT Print the number of beautiful substrings in the given string. CONSTRAINTS 1 ≤ |S| ≤ 1000, where |S| means the length of S. SAMPLE INPUT 121 SAMPLE OUTPUT 4 Explanation The palindromic substrings are \\"1\\", \\"2\\", \\"1\\", and \\"121\\". Therefore, the total count is 4.","solution":"def count_beautiful_substrings(s): This function counts the number of palindromic (beautiful) substrings in the given string of digits s. def is_palindrome(sub): return sub == sub[::-1] count = 0 n = len(s) for i in range(n): for j in range(i, n): if is_palindrome(s[i:j+1]): count += 1 return count"},{"question":"You are given a string `s` consisting of lowercase Latin letters. Your task is to determine whether it\'s possible to rearrange the characters of the string such that no two adjacent characters are the same. If it is possible, return one such rearrangement of the string. If it is not possible, return an empty string. Example 1: Input: \\"aab\\" Output: \\"aba\\" Example 2: Input: \\"aaab\\" Output: \\"\\" Your task: You don\'t need to read input or print anything. Your task is to complete the function `reorganizeString(s)` which takes a string `s` as input and returns a rearranged string with no two adjacent characters being the same or an empty string if it\'s not possible. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 <= s.length <= 500","solution":"import heapq from collections import Counter def reorganizeString(s): Rearranges the characters of the string such that no two adjacent characters are the same. If it is not possible, returns an empty string. # Frequency counter for each character count = Counter(s) # Max-heap based on character frequency max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) # Add the previous character back if it has leftover count if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Append current character to result and decrement its count result.append(char) freq += 1 # Decrement frequency (because it\'s negative in heap) # Update previous character and its frequency prev_freq, prev_char = freq, char result_str = \'\'.join(result) # If we cannot reorganize properly, the result_str length will not be equal to original string length if len(result_str) != len(s): return \\"\\" return result_str"},{"question":"You are given an integer array `arr` consisting of `n` distinct integers, where `n` is always odd. Your task is to find and return the median of the array. The median is the middle element of a sorted list, or the element at index `((n - 1) / 2)` when the list is in sorted order. You are not allowed to use any in-built sort functions, and you must implement a sorting algorithm from scratch. -----Input----- The input contains a single integer `n` on the first line (where 1 ≤ n ≤ 99 and n is odd), followed by `n` integers on the second line, which are the elements of the array `arr`. -----Output----- Print the median of the array. -----Examples----- Input 5 3 1 4 1 5 Output 3 Input 7 13 7 9 1 8 5 10 Output 8","solution":"def find_median(arr): Find the median of an array without using any in-built sort functions. def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) sorted_arr = quicksort(arr) median_idx = len(sorted_arr) // 2 return sorted_arr[median_idx] # Example usage: # arr = [3, 1, 4, 1, 5] # print(find_median(arr)) # Output: 3"},{"question":"In the kingdom of Valoria, there are n villages connected by roads in a way that forms a tree structure. Each village is numbered from 1 to n and each of the n-1 roads connects two villages bi-directionally. The villagers want to build a festival ground in one of the villages. They desire to maximize the minimum distance from any village to the festival ground to ensure that all villages have fair access to the festival. Given the tree structure, determine the village where the festival ground should be built to maximize the minimum distance from any village to the festival ground. Input The input consists of multiple test cases. The first line contains an integer T (1 ≤ T ≤ 10^5), the number of test cases. The description of T test cases follows. For each test case: The first line contains an integer n (2 ≤ n ≤ 10^5), the number of villages. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a road between village u and village v. It is guaranteed that the sum of n over all test cases will not exceed 10^6. Output For each test case, output a single integer, the village where the festival ground should be built to maximize the minimum distance from any village. Example Input 2 5 1 2 2 3 3 4 4 5 4 1 2 1 3 1 4 Output 3 1 Note In the first test case, if the festival ground is built in village 3, the minimum distance from any other village to village 3 is maximized to 2. In the second test case, building the festival ground in village 1 ensures the minimum distance of 1 for the other villages, as it is directly connected to all other villages.","solution":"# We will use a combination of Depth First Search (DFS) and Breadth First Search (BFS) to solve this problem. # The idea is to first find the farthest node from an arbitrary starting node using BFS, then find the farthest node from there. # The middle of the path between these two nodes will be our answer. # This method ensures that we maximize the minimum distance to all villages. from collections import deque, defaultdict def bfs_farthest_node(start, n, adj): visited = [False] * (n + 1) dist = [-1] * (n + 1) dist[start] = 0 q = deque([start]) visited[start] = True farthest_node = start while q: node = q.popleft() for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True dist[neighbor] = dist[node] + 1 q.append(neighbor) if dist[neighbor] > dist[farthest_node]: farthest_node = neighbor return farthest_node, dist def find_festival_ground(n, roads): if n == 1: return 1 # Create adjacency list adj = defaultdict(list) for u, v in roads: adj[u].append(v) adj[v].append(u) # Step 1: Find farthest node from any node, say node 1 farthest_node, _ = bfs_farthest_node(1, n, adj) # Step 2: Find farthest node from the previously found farthest node opposite_farthest_node, dist = bfs_farthest_node(farthest_node, n, adj) # Step 3: Find the middle node on the path between `farthest_node` and `opposite_farthest_node` desired_distance = dist[opposite_farthest_node] // 2 current_node = opposite_farthest_node while dist[current_node] != desired_distance: for neighbor in adj[current_node]: if dist[neighbor] == dist[current_node] - 1: current_node = neighbor break return current_node def solve(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] roads = test_cases[i][1] results.append(find_festival_ground(n, roads)) return results"},{"question":"Thanos is a superhero famous for his balancing acts. He believes that the universe must be perfectly balanced, as all things should be. He has recently started diving into the world of numbers and found an interest in sequences. He defines a perfectly balanced sequence as one where the sum of all elements is zero. Thanos decides to challenge you with the following task: Given a sequence of n integers, find the length of the longest subsequence that is perfectly balanced. A subsequence is derived from the original sequence by deleting some or none of the elements without changing the order of the remaining elements. ----- Input ----- The first line of input contains an integer T, the number of test cases. T test cases follow. Each test case consists of two lines: - The first line contains an integer n (number of elements in the sequence). - The second line contains n space-separated integers. ----- Output ----- For each test case, output a single line containing the length of the longest perfectly balanced subsequence. ----- Constraints ----- 1 leq T leq 100 1 leq n leq 10^5 -10^9 leq A_i leq 10^9 ----- Sample Input 1 ----- 3 5 1 -1 2 -2 3 4 1 2 3 4 6 -1 1 -2 2 -3 3 ----- Sample Output 1 ----- 4 0 6 ----- Explanation 1 ----- Test case 1: The longest perfectly balanced subsequence is of length 4 (1, -1, 2, -2). Test case 2: There is no subsequence that sums to 0. Test case 3: The whole sequence is the longest perfectly balanced subsequence.","solution":"def longest_balanced_subsequence(T, test_cases): results = [] for i in range(T): n, sequence = test_cases[i] prefix_sum_map = {0: -1} # to store the first occurrence of each prefix sum prefix_sum = 0 longest_length = 0 for j in range(n): prefix_sum += sequence[j] if prefix_sum in prefix_sum_map: longest_length = max(longest_length, j - prefix_sum_map[prefix_sum]) else: prefix_sum_map[prefix_sum] = j results.append(longest_length) return results # Helper function to parse input def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(lines[index]) sequence = list(map(int, lines[index + 1].split())) test_cases.append((n, sequence)) index += 2 return T, test_cases"},{"question":"You\'ve recently entered a coding competition, and one of the challenges involves cooking a perfect meal. You\'re given a list of recipes, and each recipe is made up of a specific combination of ingredients. Each ingredient has a unique nutritional value associated with it, and the goal is to find the recipe with the maximum nutritional value. A recipe\'s total nutritional value is the sum of the nutritional values of its individual ingredients. To help you find this, you need to create a program that determines the recipe with the highest nutritional value from a given list of recipes. -----Input----- The first line contains an integer n (1 le n le 1000), the number of recipes. The second line contains integer m (1 le m le 1000), the number of unique ingredients. The third line contains m integers v_1, v_2, ..., v_m (1 le v_i le 100), where v_i is the nutritional value of the i-th ingredient. The next n lines each describe a recipe: the (i+3)-rd line contains an integer k_i (1 le k_i le m), followed by k_i distinct integers that indicate the indices of the ingredients used in the i-th recipe. -----Output----- Print one integer — the maximum nutritional value among all the recipes. -----Examples----- Input 3 5 20 10 35 40 50 2 1 3 3 2 3 5 4 1 2 4 5 Output 120 Input 2 4 15 25 35 45 3 1 3 4 2 2 3 Output 95 -----Note----- In the first test case, we have three recipes: 1. The first recipe uses ingredients 1 and 3, which have nutritional values of 20 and 35, respectively, for a total of 20 + 35 = 55. 2. The second recipe uses ingredients 2, 3, and 5, which have nutritional values of 10, 35, and 50, respectively, for a total of 10 + 35 + 50 = 95. 3. The third recipe uses ingredients 1, 2, 4, and 5, which have nutritional values of 20, 10, 40, and 50, respectively, for a total of 20 + 10 + 40 + 50 = 120. The third recipe has the highest nutritional value of 120. In the second test case, we have two recipes: 1. The first recipe uses ingredients 1, 3, and 4, which have nutritional values of 15, 35, and 45, respectively, for a total of 15 + 35 + 45 = 95. 2. The second recipe uses ingredients 2 and 3, which have nutritional values of 25 and 35, respectively, for a total of 25 + 35 = 60. The first recipe has the highest nutritional value of 95.","solution":"def max_nutritional_value(n, m, nutritional_values, recipes): max_nutrition = 0 for recipe in recipes: current_nutrition = sum(nutritional_values[i - 1] for i in recipe) if current_nutrition > max_nutrition: max_nutrition = current_nutrition return max_nutrition # Example usage: n = 3 m = 5 nutritional_values = [20, 10, 35, 40, 50] recipes = [ [1, 3], [2, 3, 5], [1, 2, 4, 5] ] result = max_nutritional_value(n, m, nutritional_values, recipes) print(result) # Output: 120"},{"question":"In the statistics module of Python, the `mean()` function calculates the arithmetic mean of a given list or tuple of numerical values. It is part of the `statistics` library, which provides functions for calculating mathematical statistics of numeric data. Examples of usage: ```python from statistics import mean # Example 1 data = [1, 2, 3, 4, 5] print(mean(data)) # Output: 3 # Example 2 data = (10.5, 20.3, 30.2, 40.5) print(mean(data)) # Output: 25.375 ``` Task: You are given a list of integers. Your task is to calculate the mean of the list. The mean should be printed with 4 decimal places. Input Format: - The first line contains an integer N. - The second line contains N space-separated integers. Output Format: Print the mean of the given list with 4 decimal places. Sample Input: 5 1 2 3 4 5 Sample Output: 3.0000","solution":"def calculate_mean(N, numbers): Calculates the mean of a list of numbers and returns it rounded to 4 decimal places. Parameters: N (int): The number of elements in the list. numbers (list): The list of integers. Returns: float: The mean of the numbers, rounded to 4 decimal places. if N == 0: return 0.0000 mean_value = sum(numbers) / N return round(mean_value, 4)"},{"question":"In a distant galaxy, there exists a planet called Zeta where the inhabitants use a unique currency system. Instead of traditional currencies, Zeta\'s people use sequences of letters (\'A\', \'B\', \'C\', and \'D\') to denote values in their trading systems. However, maintaining the balance in their economy is critical, so they must follow strict rules for swapping and querying values. You are given two sequences of letters `X` and `Y` of length `N`, where each sequence contains only uppercase letters \'A\', \'B\', \'C\', and \'D\'. The sequences are used in various operations and queries as described below: 1. `Swap i j`: This operation swaps the letters at positions `i` and `j` in both `X` and `Y`. The positions are 1-based indices. 2. `Query n m k`: This query calculates the combined \\"value\\" of a specific letter `k` from `X` and `Y` within the given ranges `[1, n]` and `[1, m]`. To compute the \\"value\\" of a letter, use the following rules: - \'A\' = 1 - \'B\' = 2 - \'C\' = 3 - \'D\' = 4 Use the above values to calculate the sum of the occurrences of the specified letter `k` from the first `n` characters of `X` and the first `m` characters of `Y`. Write a program to perform these operations and answer the queries efficiently. Input: - The first line contains an integer `N` denoting the length of sequences `X` and `Y`. - The second line contains the sequence `X` (a string consisting of \'A\', \'B\', \'C\', \'D\'). - The third line contains the sequence `Y` (a string consisting of \'A\', \'B\', \'C\', \'D\'). - The fourth line contains an integer `Q` denoting the number of operations and queries. - The next `Q` lines each describe an operation or query in one of the following formats: - `Swap i j` - `Query n m k` Output: For each `Query` operation, print the resulting value on a new line. Constraints: - 1 ≤ N, Q ≤ 100,000 - 1 ≤ i, j ≤ N - 1 ≤ n, m ≤ N - k is one of \'A\', \'B\', \'C\', or \'D\' # Example Input: ``` 5 AACBD BDCAB 4 Query 3 3 A Swap 1 5 Query 5 5 D Swap 2 4 ``` Output: ``` 2 8 ``` Explanation: Initially, the sequences are: - X: AACBD - Y: BDCAB 1. Query `3 3 A`: Values of \'A\' in the first 3 characters of `X` and `Y` are: - X: AAC -> \'A\' appears 2 times -> 2 * 1 = 2 - Y: BDC -> \'A\' appears 0 times -> 0 * 1 = 0 - Total value: 2 + 0 = 2 2. Swap `1 5`: After swapping positions 1 and 5 in `X` and `Y`: - X becomes: BACAA - Y becomes: BDCAA 3. Query `5 5 D`: Values of \'D\' in the first 5 characters of `X` and `Y` are: - X: BACAA -> \'D\' appears 1 time -> 1 * 4 = 4 - Y: BDCAA -> \'D\' appears 1 time -> 1 * 4 = 4 - Total value: 4 + 4 = 8 4. Swap `2 4`: After swapping positions 2 and 4 in `X` and `Y`: - X becomes: BAACA - Y becomes: BDCAA","solution":"def sequence_operations(n, x, y, operations): # Helper function to get value based on character def get_value(character): values = {\'A\': 1, \'B\': 2, \'C\': 3, \'D\': 4} return values[character] # Convert strings to lists for mutability x = list(x) y = list(y) results = [] for op in operations: if op[0] == \'Swap\': _, i, j = op i -= 1 # Convert to 0-based index j -= 1 # Convert to 0-based index x[i], x[j] = x[j], x[i] y[i], y[j] = y[j], y[i] elif op[0] == \'Query\': _, n, m, k = op value = get_value(k) count_in_x = sum(1 for char in x[:n] if char == k) count_in_y = sum(1 for char in y[:m] if char == k) total_value = (count_in_x + count_in_y) * value results.append(total_value) return results"},{"question":"You are given a list of non-negative integers, for example: ```python [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ``` Your task is to create a function that separates these integers into two lists: one containing even numbers and the other containing odd numbers. The output should be a tuple of two lists like this: ```python ([2, 4, 6, 8, 10], [1, 3, 5, 7, 9]) ``` The order of numbers in the lists should be the same as their order in the original list. Ensure your code handles the edge case where the input list may be empty, returning a tuple of two empty lists in such cases.","solution":"def separate_even_odd(numbers): Separates a list of non-negative integers into two lists: one containing even numbers and the other containing odd numbers. Args: numbers (list of int): The list of non-negative integers. Returns: tuple: A tuple containing two lists (even numbers list, odd numbers list). evens = [num for num in numbers if num % 2 == 0] odds = [num for num in numbers if num % 2 != 0] return (evens, odds)"},{"question":"Given a list of non-negative integers representing the amount of rainwater trapped at each bar of a histogram where the width of each bar is 1, return the total amount of rainwater trapped. Example 1: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The structure of the histogram allows for 6 units of rainwater to be trapped in the \\"valleys\\" formed between the bars. Example 2: Input: [4,2,0,3,2,5] Output: 9 Explanation: The structure of the histogram allows for 9 units of rainwater to be trapped in the \\"valleys\\" formed between the bars. Note: The length of the list: 1 <= len(list) <= 100000 0 <= list[i] <= 1000","solution":"def trap(height): Returns the total amount of rainwater trapped. :param height: List[int], a list of non-negative integers representing the histogram bars. :return: int, the total amount of rainwater trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Given an array of integers and an integer X, find all unique quadruplets in the array which sum up to X. Each quadruplet should be sorted in ascending order and the list of all quadruplets should also be sorted lexicographically. Example 1: Input: arr = [1, 0, -1, 0, -2, 2] X = 0 Output: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] Explanation: The quadruplets that sum up to 0 are sorted in ascending order. Example 2: Input: arr = [2, 2, 2, 2, 2] X = 8 Output: [[2, 2, 2, 2]] Explanation: The only quadruplet that sums to 8 is [2, 2, 2, 2]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function fourSum() which takes the array arr and integer X as inputs and returns the list of quadruplets in a sorted order as specified in the problem statement. Expected Time Complexity: O(N^3) Expected Auxiliary Space: O(1) Constraints: 1<=Number of elements in the array<=100 -10^9<=Elements of array<=10^9","solution":"def fourSum(arr, X): arr.sort() n = len(arr) quadruplets = [] for i in range(n - 3): if i > 0 and arr[i] == arr[i - 1]: continue for j in range(i + 1, n - 2): if j > i + 1 and arr[j] == arr[j - 1]: continue left, right = j + 1, n - 1 while left < right: total = arr[i] + arr[j] + arr[left] + arr[right] if total == X: quadruplets.append([arr[i], arr[j], arr[left], arr[right]]) while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 elif total < X: left += 1 else: right -= 1 return quadruplets"},{"question":"Given an undirected connected graph with N nodes and M edges, you need to determine if it is possible to partition the graph into exactly two connected components by removing a single edge. Each component after the removal should still remain connected. ------ Input ------ The first line contains two space-separated integers N and M. The next M lines contain two space-separated integers u and v, representing an edge between nodes u and v. ------ Output ------ Print \\"YES\\" if it is possible to partition the graph into exactly two connected components by removing one edge. Otherwise, print \\"NO\\". ------ Constraints ------ 2 ≤ N ≤ 100,000 1 ≤ M ≤ 200,000 1 ≤ u, v ≤ N ------ Example Input ------ 5 5 1 2 2 3 3 4 4 5 2 4 ------ Example Output ------ YES ------ Example Input ------ 3 3 1 2 2 3 1 3 ------ Example Output ------ NO","solution":"def can_partition_graph(N, M, edges): from collections import defaultdict import sys sys.setrecursionlimit(200000) def dfs(node, visited, graph): visited[node] = True component_size = 1 for neighbor in graph[node]: if not visited[neighbor]: component_size += dfs(neighbor, visited, graph) return component_size if N == 2: return \\"YES\\" if M == 1 else \\"NO\\" graph = defaultdict(list) edge_count = defaultdict(int) for u, v in edges: graph[u].append(v) graph[v].append(u) edge_count[u] += 1 edge_count[v] += 1 for u, v in edges: graph[u].remove(v) graph[v].remove(u) visited = [False] * (N + 1) components = 0 valid = True sizes = [] for i in range(1, N + 1): if not visited[i]: sizes.append(dfs(i, visited, graph)) if len(sizes) > 2: valid = False break components += 1 graph[u].append(v) graph[v].append(u) if components == 2 and valid: return \\"YES\\" return \\"NO\\""},{"question":"Write a program that helps a store manager with inventory tracking. The manager has an inventory list with the initial quantity of each item. Each day, a series of transactions are processed where items are either bought or sold. Your task is to update the inventory list based on these transactions and ensure that the quantity of each item does not fall below zero. The initial quantities of the items are given as an array `inventory[]` where each element represents the quantity of a particular item. The transactions are provided as a list of tuples `transactions[]`, where each tuple contains an item index and a transaction amount. A positive amount represents newly added stock, and a negative amount represents sales. If, during any transaction, the item quantity would become negative, the transaction should be ignored. Write a function `update_inventory()` that takes the inventory list, the number of items `n`, the list of transactions, and the number of transactions `m`, and returns the updated inventory list. Example 1: Input: inventory[] = {10, 5, 8, 3} transactions[] = [(0, -3), (1, 7), (2, -10), (3, -1), (0, 1)] Output: inventory[] = {8, 12, 8, 2} Explanation: - (0, -3): Item 0 is reduced by 3, new quantity = 7 - (1, 7): Item 1 is increased by 7, new quantity = 12 - (2, -10): Item 2 cannot be reduced by 10 as current quantity is 8, transaction ignored - (3, -1): Item 3 is reduced by 1, new quantity = 2 - (0, 1): Item 0 is increased by 1, new quantity = 8 Example 2: Input: inventory[] = {4, 2} transactions[] = [(0, -5), (1, 3), (0, 2)] Output: inventory[] = {6, 5} Explanation: - (0, -5): Item 0 cannot be reduced by 5 as current quantity is 4, transaction ignored - (1, 3): Item 1 is increased by 3, new quantity = 5 - (0, 2): Item 0 is increased by 2, new quantity = 6 Your Task: Write a function `update_inventory()` that takes the arrays `inventory` and `transactions`, integers `n` and `m`, and returns the updated inventory array after applying all valid transactions. The driver code handles input and output. Expected Time Complexity: O(m) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 100 1 ≤ m ≤ 100 -20 ≤ transaction amounts ≤ 20","solution":"def update_inventory(inventory, n, transactions, m): Update the inventory list based on the transactions. Parameters: inventory (list): Initial quantities of items. n (int): Number of items in the inventory. transactions (list): List of transaction tuples (item index, transaction amount). m (int): Number of transactions. Returns: list: Updated inventory list. for (index, amount) in transactions: if 0 <= index < n: if inventory[index] + amount >= 0: inventory[index] += amount return inventory"},{"question":"Create a Spiral Matrix You will receive a single integer n (1 ≤ n ≤ 10). Your task is to generate an n x n matrix filled with elements from 1 to n^2 in a spiral order. The pattern should start from the top-left and proceed to the right, then down, left, and up in a clockwise direction, continuing the spiral until the matrix is fully filled. For example: For n = 3, the expected output is: ``` 1 2 3 8 9 4 7 6 5 ``` For n = 4, the expected output is: ``` 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 ``` Write a function `spiral_matrix(n)` that prints the n x n matrix in spiral order. Separate each element with a single space and each row with a newline character.","solution":"def spiral_matrix(n): Generates an n x n matrix filled with elements from 1 to n^2 in a spiral order. matrix = [[0]*n for _ in range(n)] num = 1 left, right = 0, n-1 top, bottom = 0, n-1 while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Alex loves playing games that involve patterns and numbers. One day, he stumbled upon a game that involves a sequence of numbers, and now he is obsessed with finding interesting patterns in them. The game works as follows: Given an integer sequence, a sliding window of size `k` is used to examine different contiguous sub-sequences. For each position of the sliding window, you compute the maximum absolute difference between any two numbers within the window. Your task is to help Alex by writing a function that returns a list of these maximum absolute differences as the window slides across the entire sequence. ----- Input ----- The first line of input contains two integers `n` and `k` (`1 ≤ k ≤ n ≤ 100,000`), where `n` is the length of the sequence and `k` is the size of the sliding window. The second line contains `n` integers representing the sequence, where each integer `a_i` (`|a_i| ≤ 10^9`) denotes the `i`-th element of the sequence. ----- Output ----- The output consists of a single line containing `n-k+1` integers, where the `i`-th integer is the maximum absolute difference within the `i`-th sliding window. Note: The absolute difference between two numbers `a` and `b` is defined as `|a - b|`. ----- Examples ----- Sample Input 1: 8 3 1 3 6 2 8 7 4 5 Sample Output 1: 5 4 6 6 4 3 Sample Input 2: 5 2 -1 2 -3 4 -5 Sample Output 2: 3 5 7 9 Sample Input 3: 5 5 4 4 4 4 4 Sample Output 3: 0","solution":"def max_absolute_differences(n, k, sequence): Given a sequence of n integers and a sliding window of size k, this function returns a list of the maximum absolute differences within each sliding window. result = [] for i in range(n - k + 1): window = sequence[i:i + k] max_diff = max(window) - min(window) result.append(max_diff) return result"},{"question":"A secret research facility is developing a new encryption algorithm to encode their sensitive data. The algorithm takes a string `S` and rotates each character forward by a fixed number of steps in the alphabet to produce an encrypted string. For example, rotating the character \'A\' by 2 steps would result in \'C\', and \'z\' by 1 step would result in \'a\'. Your task is to write a program that can decode a given encoded string `E` back to its original form. The decoding process involves rotating each character in the encoded string backward by the same number of steps used during encryption. Input Format: - The first line contains a single integer `N` (1 <= N <= 26) indicating the number of steps each letter was rotated forward during encryption. - The second line contains the encoded string `E` which is a non-empty string consisting of only uppercase and lowercase English letters. The length of `E` will not exceed 100,000 characters. Output Format: - Print the decoded string. Constraints: - The encoded string `E` will always be non-empty and contain only alphabetic characters. - Rotation respects the cyclic nature of the alphabet (i.e., rotating \'a\' backward by 1 step results in \'z\'). Sample Input #1: ``` 3 KhoorZruog ``` Sample Output #1: ``` HelloWorld ``` Sample Input #2: ``` 1 UifsfJtBOpY ``` Sample Output #2: ``` ThereIsANoX ``` Explanation #1: The original string \\"HelloWorld\\" was encrypted by rotating each character 3 steps forward to produce \\"KhoorZruog\\". To decode it, each character is rotated backward by 3 steps: - K -> H - h -> e - o -> l - o -> l - r -> o - Z -> W - r -> o - u -> r - o -> l - g -> d Hence, the output is \\"HelloWorld\\". Explanation #2: The original string \\"ThereIsANoX\\" was encrypted by rotating each character 1 step forward to produce \\"UifsfJtBOpY\\". To decode it, each character is rotated backward by 1 step: - U -> T - i -> h - f -> e - s -> r - f -> e - J -> I - t -> s - B -> A - O -> N - p -> o - Y -> X Hence, the output is \\"ThereIsANoX\\".","solution":"def decode_string(N, E): Decodes the string \'E\' by rotating each character backward by \'N\' steps. Args: N: Number of steps each letter was initially rotated forward. E: The encoded string. Returns: Decoded string. decoded_chars = [] for char in E: if \'A\' <= char <= \'Z\': decoded_char = chr(((ord(char) - ord(\'A\') - N) % 26) + ord(\'A\')) elif \'a\' <= char <= \'z\': decoded_char = chr(((ord(char) - ord(\'a\') - N) % 26) + ord(\'a\')) decoded_chars.append(decoded_char) return \'\'.join(decoded_chars)"},{"question":"A software development company has implemented a feature allowing users to create custom ordered lists. However, they need to ensure that elements within these lists are unique and sorted. They\'ve tasked you with writing a function to manage such lists. Given a base list of numbers, and a series of operations, you should process the following commands: 1. **Insert `x`**: Insert the number `x` into the list if it is not present. 2. **Delete `x`**: Delete the number `x` from the list if it is present. 3. **Check `x`**: Print `YES` if the number `x` is in the list, otherwise print `NO`. 4. **Print**: Print all numbers in the list in a sorted order. Write a function to handle these commands. # Input The first line contains integer `n` (1 ≤ n ≤ 10^5) — the number of commands. The following `n` lines each contain one of the following commands: - `Insert x` (1 ≤ x ≤ 10^9) - `Delete x` (1 ≤ x ≤ 10^9) - `Check x` (1 ≤ x ≤ 10^9) - `Print` # Output For each `Check x` command, output `YES` or `NO` in a new line. For each `Print` command, output the current list in one line of space-separated integers. If the list is empty, output an empty line. # Example Input ``` 10 Insert 5 Insert 10 Check 5 Insert 15 Print Delete 10 Print Check 10 Delete 5 Print ``` Output ``` YES 5 10 15 5 15 NO 15 ``` # Explanation After the `Insert 5` and `Insert 10` commands, the list contains [5, 10]. The `Check 5` command confirms the presence of 5. The `Insert 15` command adds 15 to the list, making it [5, 10, 15]. The first `Print` command outputs the list in sorted order. The `Delete 10` command removes 10, leaving [5, 15], verified by the second `Print` command. The `Check 10` command confirms the absence of 10. Finally, the `Delete 5` command leaves the list with [15], which is printed as the final result.","solution":"def custom_list_manager(commands): Function to process a series of commands to manage a list of unique, sorted numbers. Args: - commands (list of str): the list of commands to process Returns: - list of str: the results of the Check and Print commands numbers = set() result = [] for command in commands: parts = command.split() if parts[0] == \'Insert\': numbers.add(int(parts[1])) elif parts[0] == \'Delete\': numbers.discard(int(parts[1])) elif parts[0] == \'Check\': result.append(\'YES\' if int(parts[1]) in numbers else \'NO\') elif parts[0] == \'Print\': sorted_numbers = sorted(numbers) result.append(\' \'.join(map(str, sorted_numbers))) return result"},{"question":"You are given an array of integers arr consisting of n elements. Your task is to find the maximum number of elements in a subarray of arr such that the sum of its elements is at most s. A subarray is a contiguous part of an array. -----Input----- The first line of the input contains two integers n and s (1 le n le 10^5, 1 le s le 10^9). The second line contains n integers arr_i (1 le arr_i le 10^4) — the elements of the array. -----Output----- Print a single integer — the maximum number of elements in a subarray with a sum not exceeding s. -----Examples----- Input 5 6 1 2 3 2 1 Output 3 Input 6 10 4 2 2 1 5 1 Output 4 -----Note----- In the first example, the maximum subarray is [1, 2, 3] with a sum of 6, containing 3 elements. In the second example, the maximum subarray is [2, 2, 1, 5] with a sum of 10, containing 4 elements.","solution":"def max_subarray_length(n, s, arr): Finds the maximum number of elements in a subarray such that the sum of its elements is at most s. Parameters: n (int): Number of elements in the array s (int): Maximum allowed sum of the subarray arr (list): List of integers representing the array Returns: int: Maximum number of elements in the subarray with sum <= s max_length = 0 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] # While current_sum exceeds s, move the start pointer to right while current_sum > s: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"A robot is placed on a 10x10 grid, with its initial position at the top-left corner (0, 0). The robot can move in four directions: up, down, left, and right. The goal is to navigate the robot to a target position on the grid. Task Complete the function to navigate the robot to the target position using a sequence of moves. # Parameters: * `target_x` - x-coordinate of the target position (integer between 0 and 9 inclusively) * `target_y` - y-coordinate of the target position (integer between 0 and 9 inclusively) * `commands` - a list of commands (`\\"U\\"` for up, `\\"D\\"` for down, `\\"L\\"` for left, `\\"R\\"` for right) # Output A boolean value `True` if the sequence of commands correctly moves the robot to the target position, otherwise `False`. # Rules - The robot\'s initial position is always (0, 0). - The robot cannot move outside the boundaries of the grid. - If any command moves the robot outside the grid, return `False`. # Example ```python assert navigate_robot(2, 2, [\\"R\\", \\"R\\", \\"D\\", \\"D\\"]) == True assert navigate_robot(3, 3, [\\"R\\", \\"R\\", \\"R\\", \\"D\\", \\"D\\", \\"D\\"]) == True assert navigate_robot(3, 3, [\\"R\\", \\"U\\", \\"D\\", \\"R\\", \\"D\\", \\"D\\", \\"R\\"]) == False assert navigate_robot(5, 5, [\\"R\\", \\"R\\", \\"R\\", \\"R\\", \\"D\\", \\"D\\", \\"D\\", \\"D\\", \\"L\\", \\"L\\"]) == False ```","solution":"def navigate_robot(target_x, target_y, commands): Function to navigate the robot from (0, 0) to (target_x, target_y) using a list of commands. :param target_x: int - x-coordinate of the target position :param target_y: int - y-coordinate of the target position :param commands: list - list of commands (\\"U\\", \\"D\\", \\"L\\", \\"R\\") :return: bool - True if the sequence of commands correctly moves the robot to the target position, False otherwise. x, y = 0, 0 # initial position # move the robot based on the commands for command in commands: if command == \\"U\\": y -= 1 elif command == \\"D\\": y += 1 elif command == \\"L\\": x -= 1 elif command == \\"R\\": x += 1 # check if the robot is within grid boundaries if not (0 <= x <= 9 and 0 <= y <= 9): return False # check if the robot is at the target position return x == target_x and y == target_y"},{"question":"You are given an array of n integers. You need to partition the array into two subsets A and B such that the sum of elements in subset A is maximized, and the sum of elements in subset B is minimized. The elements in the two subsets should not have any intersection, and every element of the array must belong to exactly one of the subsets. Additionally, the number of elements in subset A should be greater than or equal to the number of elements in subset B. Write a function that takes the array as input and returns the sum of elements in subset A. Input The first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of two lines. The first line contains one integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10000) — the elements of the array. Output For each test case, print one line containing the sum of elements in subset A. Example Input 3 4 1 2 3 4 5 1 1 1 1 1 6 3 3 3 3 3 3 Output 7 3 9","solution":"def max_sum_of_A(t, test_cases): def partition_array(numbers): numbers.sort(reverse=True) length = len(numbers) half_length = (length + 1) // 2 sum_A = sum(numbers[:half_length]) return sum_A results = [] for i in range(t): n = test_cases[i][0] array = test_cases[i][1] results.append(partition_array(array)) return results"},{"question":"You are tasked with developing a program to validate International Standard Book Numbers (ISBN). The ISBN-10 format is a 10-digit number, where the first 9 digits are numerals and the final digit can be a numeral or the letter \'X\'. The final digit is a checksum, calculated such that the sum of all the digits, each multiplied by its position (from 1 to 10), is divisible by 11. #Task Given a string representing a potential ISBN-10 code, write a function to determine if the string is a valid ISBN-10. The function should return `True` if the provided string is a valid ISBN-10 and `False` otherwise. Requirements: - The string should be exactly 10 characters. - The first 9 characters must be digits (0-9). - The 10th character can be a digit or \'X\' (which represents the value 10 for checksum calculation purposes). Examples: ``` isbn = \\"0471958697\\" => True isbn = \\"123456789X\\" => True isbn = \\"1234567890\\" => False ```","solution":"def is_valid_isbn10(isbn): This function validates an ISBN-10 number. Parameters: isbn (str): The string representing the potential ISBN-10 code. Returns: bool: True if the string is a valid ISBN-10, False otherwise. if len(isbn) != 10: return False if not isbn[:9].isdigit() or (not isbn[9].isdigit() and isbn[9] != \'X\'): return False total = 0 for i in range(9): total += int(isbn[i]) * (i + 1) if isbn[9] == \'X\': total += 10 * 10 else: total += int(isbn[9]) * 10 return total % 11 == 0"},{"question":"Write a function that takes a string containing a mix of letters and digits, and returns a new string where all the digits are moved to the front, preserving the order of characters and digits seen in the input. ```python rearrange_string(\\"a1b2c3\\") # returns \\"123abc\\" ```","solution":"def rearrange_string(s): Takes a string containing a mix of letters and digits, and returns a new string where all the digits are moved to the front, preserving the order of characters and digits seen in the input. digits = \'\'.join([char for char in s if char.isdigit()]) letters = \'\'.join([char for char in s if char.isalpha()]) return digits + letters"},{"question":"You are tasked with creating a simulator for a new interstellar transportation system. The transportation system operates in a 3D space grid and uses a fleet of robotic drones to transport cargo boxes from one location to another. Each drone has limited energy and can only move a certain number of units before requiring recharging. **Objective:** Write a function that calculates the minimum energy required for a drone to transport a cargo box from a starting point to a destination point in a 3D space grid. Each unit of movement in any direction (x, y, or z) costs one unit of energy. **Function Signature:** ```python def calculate_minimum_energy(start, destination): Calculate the minimum energy required by a drone to move from start to destination in 3D space. Parameters: - start (tuple): A tuple of three integers (x1, y1, z1) representing the starting coordinates. - destination (tuple): A tuple of three integers (x2, y2, z2) representing the destination coordinates. Returns: - int: The minimum energy required to transport the cargo box from start to destination. ``` **Examples:** 1. `calculate_minimum_energy((0, 0, 0), (1, 2, 3))` Expected output: 6, as the drone needs to move 1 unit in x-direction, 2 units in y-direction, and 3 units in z-direction. 2. `calculate_minimum_energy((2, 3, 4), (5, 9, 12))` Expected output: 17, as the drone needs to move (5-2) units in x-direction, (9-3) units in y-direction, and (12-4) units in z-direction. 3. `calculate_minimum_energy((10, 10, 10), (10, 10, 10))` Expected output: 0, as the starting point and destination are the same. **Notes:** - The space grid extends infinitely in all three directions. - The function should correctly handle negative coordinates. - Drones can only move in the six primary directions (along the x, y, or z axis). - You are expected to use the Manhattan distance formula to calculate the minimum energy required.","solution":"def calculate_minimum_energy(start, destination): Calculate the minimum energy required by a drone to move from start to destination in 3D space. Parameters: - start (tuple): A tuple of three integers (x1, y1, z1) representing the starting coordinates. - destination (tuple): A tuple of three integers (x2, y2, z2) representing the destination coordinates. Returns: - int: The minimum energy required to transport the cargo box from start to destination. x1, y1, z1 = start x2, y2, z2 = destination energy = abs(x2 - x1) + abs(y2 - y1) + abs(z2 - z1) return energy"},{"question":"Define a class `Library` to manage a collection of books. Each book has a title, author, and publication year. The class should allow you to add new books, remove books by title, and search for books by title, author, or publication year. The Library class must support the following functionalities: 1. `add_book(title: str, author: str, year: int) -> None`: Adds a new book to the library with the given title, author, and publication year. 2. `remove_book(title: str) -> bool`: Removes the book with the specified title from the library. Returns `True` if the book was successfully removed, and `False` if the book was not found. 3. `search_by_title(title: str) -> List[str]`: Returns a list of book titles containing the search term (case-insensitive) in their title. 4. `search_by_author(author: str) -> List[str]`: Returns a list of book titles written by authors who include the search term (case-insensitive) in their name. 5. `search_by_year(year: int) -> List[str]`: Returns a list of book titles published in the specified year. The implementation should take into consideration case insensitivity for search functionality and manage the internal state of the book collection efficiently. -----Input:----- - First line contains a single integer `Q`, the number of operations to be performed. - Each of the following `Q` lines contains an operation in the following format: - `ADD title author year`: Adds a book with the given title, author, and publication year. - `REMOVE title`: Removes the book with the given title. - `SEARCH TITLE search_term`: Searches for books by title containing the search term. - `SEARCH AUTHOR search_term`: Searches for books by author containing the search term. - `SEARCH YEAR year`: Searches for books published in the specified year. -----Output:----- - For each `REMOVE` operation, output `True` or `False` based on whether the book was found and removed. - For each `SEARCH` operation, print each book title found on a new line. If no books are found, print `No results found`. -----Constraints:----- - `1 leq Q leq 1000` - `1 leq len(title), len(author) leq 100` - `1000 leq year leq 9999` -----Sample Input:----- 7 ADD The Alchemist Paulo Coelho 1988 ADD To Kill a Mockingbird Harper Lee 1960 SEARCH TITLE Alchemist SEARCH AUTHOR Lee REMOVE The Alchemist SEARCH TITLE Alchemist SEARCH YEAR 1988 -----Sample Output:----- The Alchemist To Kill a Mockingbird True No results found No results found","solution":"class Library: def __init__(self): self.books = [] def add_book(self, title: str, author: str, year: int) -> None: self.books.append({\'title\': title, \'author\': author, \'year\': year}) def remove_book(self, title: str) -> bool: for book in self.books: if book[\'title\'].lower() == title.lower(): self.books.remove(book) return True return False def search_by_title(self, title: str) -> list: return [book[\'title\'] for book in self.books if title.lower() in book[\'title\'].lower()] def search_by_author(self, author: str) -> list: return [book[\'title\'] for book in self.books if author.lower() in book[\'author\'].lower()] def search_by_year(self, year: int) -> list: return [book[\'title\'] for book in self.books if book[\'year\'] == year]"},{"question":"# The Missing Log A few logs were reported missing from the database as the server crashed. Fortunately, some logs are left on the client-side, but they need to be reordered. Each log entry has a certain number of common words. Your job is to sort the logs such that more frequently occurring words appear first. The challenge is that the logs do not come in a direct order, but they get mixed. # Kata Task Reorder the logs using the provided words\' frequency, preserving the original log order when ties occur. # Format You are given a list of logs and a dictionary with word frequencies. Input * A list of logs (strings), where each log is a string of words separated by spaces. * A dictionary with word frequencies; key as the word (string) and value as its frequency (integer). Output A list of logs sorted by the sum of word frequencies in descending order. # Examples * Example 1: ```python logs = [\\"error at line 3\\", \\"server warning\\", \\"connection timeout\\"] word_frequencies = {\\"error\\": 5, \\"at\\": 1, \\"line\\": 2, \\"3\\": 1, \\"server\\": 4, \\"warning\\": 3, \\"connection\\": 2, \\"timeout\\": 1} ``` ```python # Explanation: # \\"error at line 3\\" has a total frequency of 5+1+2+1 = 9 # \\"server warning\\" has a total frequency of 4+3 = 7 # \\"connection timeout\\" has a total frequency of 2+1 = 3 # Ordering should be: [\\"error at line 3\\", \\"server warning\\", \\"connection timeout\\"] result = reorder_logs(logs, word_frequencies) # Output: [\\"error at line 3\\", \\"server warning\\", \\"connection timeout\\"] ``` * Example 2: ```python logs = [\\"user login\\", \\"admin access granted\\", \\"user logout\\"] word_frequencies = {\\"user\\": 4, \\"login\\": 2, \\"admin\\": 5, \\"access\\": 3, \\"granted\\": 1, \\"logout\\": 2} ``` ```python # Explanation: # \\"admin access granted\\" has a total frequency of 5+3+1 = 9 # \\"user login\\" has a total frequency of 4+2 = 6 # \\"user logout\\" has a total frequency of 4+2 = 6 # Ordering should be: [\\"admin access granted\\", \\"user login\\", \\"user logout\\"] result = reorder_logs(logs, word_frequencies) # Output: [\\"admin access granted\\", \\"user login\\", \\"user logout\\"] ``` # Constraints * All characters in the logs are lowercase. * There are no words in the logs that don\'t appear in the word frequencies dictionary. * The logs will contain only letters and spaces. * In case of tie (i.e., logs with the same total frequency), preserve the initial order they appeared in. # Function signature ```python def reorder_logs(logs: List[str], word_frequencies: Dict[str, int]) -> List[str]: ```","solution":"from typing import List, Dict def reorder_logs(logs: List[str], word_frequencies: Dict[str, int]) -> List[str]: def log_frequency(log): return sum(word_frequencies.get(word, 0) for word in log.split()) # Sort logs by the calculated frequency in descending order sorted_logs = sorted(logs, key=log_frequency, reverse=True) return sorted_logs"},{"question":"Write a function `max_perimeter()` that takes a list of positive integers, where each integer represents the length of a stick. The function should return the maximum perimeter of a triangle that can be formed with any three sticks of the given lengths. If no such triangle exists, the function should return 0. A triangle can be formed if and only if the sum of any two sides is greater than the third side. Examples: ```python max_perimeter([2, 1, 2]) == 5 max_perimeter([1, 2, 1]) == 0 max_perimeter([3, 2, 3, 4]) == 10 max_perimeter([3, 6, 2, 3]) == 8 ``` For optimization, consider sorting the array first to simplify the check for potential triangles.","solution":"def max_perimeter(sticks): Return the maximum perimeter of a triangle that can be formed with any three sticks. If no valid triangle can be formed, return 0. # Sort sticks in descending order sticks.sort(reverse=True) # Iterate through sorted sticks and check for valid triangles for i in range(len(sticks) - 2): if sticks[i] < sticks[i + 1] + sticks[i + 2]: # Found a valid triangle return sticks[i] + sticks[i + 1] + sticks[i + 2] # No valid triangle found return 0"},{"question":"One day, Anjali encountered a challenge in an online coding platform. The challenge was to find out the count of prime numbers up to a given number N (inclusive). Being new to programming, she decides to solve this problem. Help her by writing a program. INPUT: The first line of the input contains a single integer T (the number of test cases). Next T lines of input contain an integer N. OUTPUT: For each test case, print the count of prime numbers up to and including the given integer N. CONSTRAINTS: 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^5 SAMPLE INPUT 3 10 20 30 SAMPLE OUTPUT 4 8 10 Explanation For test case 1, N=10, prime numbers up to and including 10 are: 2, 3, 5, 7. Count is 4. For test case 2, N=20, prime numbers up to and including 20 are: 2, 3, 5, 7, 11, 13, 17, 19. Count is 8. For test case 3, N=30, prime numbers up to and including 30 are: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Count is 10.","solution":"def sieve_of_eratosthenes(n): Uses the Sieve of Eratosthenes to find all prime numbers up to a given number n. Returns a list indicating prime status for each number from 0 to n. is_prime = [True] * (n + 1) is_prime[0], is_prime[1] = False, False p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return is_prime def count_primes_up_to_n(n): Given a number n, returns the count of prime numbers up to and including n. is_prime = sieve_of_eratosthenes(n) return sum(is_prime) def prime_count_per_test_case(test_cases): Given a list of test cases, returns a list with the count of prime numbers up to and including the given number for each test case. max_n = max(test_cases) is_prime = sieve_of_eratosthenes(max_n) prefix_sums = [0] * (max_n + 1) for i in range(1, max_n + 1): prefix_sums[i] = prefix_sums[i - 1] + (1 if is_prime[i] else 0) return [prefix_sums[n] for n in test_cases] # Sample execution T = 3 test_cases = [10, 20, 30] print(prime_count_per_test_case(test_cases))"},{"question":"Given a string of length (N) consisting of lower-case alphabets, find the length of the largest contiguous substring without repeating characters. -----Input:----- - First line contains an integer (T), the number of test cases. - Each of the next (T) lines contain a string (S). -----Output:----- For each test case, output an integer on a new line, the length of the largest contiguous substring without repeating characters. -----Constraints----- - (1 leq T leq 100) - (1 leq |S| leq 100000) -----Sample Input:----- 2 abcabcbb bbbbb -----Sample Output:----- 3 1","solution":"def length_of_longest_substring(s: str) -> int: Given a string, find the length of the longest substring without repeating characters. n = len(s) char_index_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index_map: start = max(char_index_map[s[end]] + 1, start) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length def process_test_cases(test_cases: list) -> list: Takes a list of test cases and returns a list of results for each test case. result = [] for s in test_cases: result.append(length_of_longest_substring(s)) return result"},{"question":"You are given a string consisting of lowercase Latin letters. You have to form a palindromic string by removing the minimum number of characters from it. A string is called palindromic if it reads the same backward as forward. Write a program that helps achieve this task. -----Input----- The first line contains a single integer ( t ) (1 leq t leq 100) — the number of test cases. The next ( t ) lines contain one string ( s ) each. It is guaranteed that the sum of the lengths of strings across all test cases does not exceed ( 2 times 10^5 ). -----Output----- For each test case, output the palindromic string with the minimum number of characters removed. -----Examples----- Input 3 abc abac a Output a aba a -----Note----- In the first test case, by removing \'b\' and \'c\', the remaining string \'a\' is a palindrome. In the second test case, by removing the characters \'b\' and \'c\', the remaining string \'aba\' is a palindrome. In the third test case, the input string is already a palindrome.","solution":"def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp def form_palindromic_string(s, dp): n = len(s) seq = [\'\'] * dp[0][n - 1] i, j = 0, n - 1 left, right = 0, dp[0][n - 1] - 1 while i <= j: if s[i] == s[j]: seq[left] = s[i] seq[right] = s[j] left += 1 right -= 1 i += 1 j -= 1 elif dp[i + 1][j] > dp[i][j - 1]: i += 1 else: j -= 1 return \'\'.join(seq) def minimal_removal_to_palindrome(t, cases): results = [] for s in cases: dp = longest_palindromic_subsequence(s) palindrome = form_palindromic_string(s, dp) results.append(palindrome) return results"},{"question":"Write a program that simulates the day-to-day population change in a small isolated town. Each day, the population of the town can increase or decrease. The changes are recorded in a list where each element represents the net change in population for that day. Your task is to calculate the final population after applying the changes for each day. Assume the initial population of the town is given. For example, if the initial population is `1000` and the daily changes are recorded as `[10, -5, 3, -2]`, the population at the end of the fourth day can be calculated as follows: - Day 1: 1000 + 10 = 1010 - Day 2: 1010 - 5 = 1005 - Day 3: 1005 + 3 = 1008 - Day 4: 1008 - 2 = 1006 So, the final population after 4 days is `1006`. Input The input is provided in the following format: ``` initial_population n c1 c2 c3 ... cn ``` The first line contains an integer `initial_population` (100 leq initial_population leq 2000), representing the initial population of the town. The second line contains an integer `n` (1 leq n leq 50), the number of days. The third line contains `n` integers, `c1 c2 c3 ... cn` (-50 leq ci leq 50), representing the net change in the population for each day. Output Output the final population of the town after `n` days on a single line. Examples Input ``` 1000 4 10 -5 3 -2 ``` Output ``` 1006 ``` Input ``` 1500 3 20 -10 5 ``` Output ``` 1515 ```","solution":"def final_population(initial_population, changes): Calculate the final population after applying daily changes. :param initial_population: The initial population of the town :param changes: A list of daily population changes :return: The final population after all changes for change in changes: initial_population += change return initial_population"},{"question":"Task Given a string `s`, return the length of the longest substring `t` that contains at most 2 distinct characters. # Implementation Write a function `longestSubstringWithTwoDistinctChars(s: str) -> int` that takes a single parameter: - `s`: A string of lowercase English letters. Return an integer representing the length of the longest substring of `s` that contains at most 2 distinct characters. # Examples Input | Output --- | --- \\"eceba\\" | 3 \\"ccaabbb\\" | 5 \\"abcabcabc\\" | 2 # Constraints - The length of the input string `s` will be at most 10,000.","solution":"def longestSubstringWithTwoDistinctChars(s: str) -> int: Returns the length of the longest substring that contains at most 2 distinct characters. n = len(s) if n < 3: return n # Sliding window left and right pointers left = 0 right = 0 # HashMap that holds the character count in the current window hashmap = {} max_len = 2 while right < n: if len(hashmap) < 3: hashmap[s[right]] = right right += 1 if len(hashmap) == 3: del_idx = min(hashmap.values()) del hashmap[s[del_idx]] left = del_idx + 1 max_len = max(max_len, right - left) return max_len"},{"question":"You are given an array of integers of length N. Your task is to find the number of distinct subarrays such that the product of the maximum and minimum element in each subarray is even. -----Constraints----- - 1 ≤ N ≤ 100000 - 1 ≤ element of array ≤ 100000 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N array_elements -----Output----- Print the number of distinct subarrays where the product of the maximum and minimum element is even. -----Sample Input----- 4 2 3 4 1 -----Sample Output----- 8 Explanation: The subarrays of the given array are: [2], [3], [4], [1], [2, 3], [3, 4], [4, 1], [2, 3, 4], [3, 4, 1], [2, 3, 4, 1] Among them, the subarrays where the product of the maximum and minimum element is even are: [2], [4], [2, 3], [2, 3, 4], [4, 1], [3, 4], [2, 3, 4, 1], [1]","solution":"def count_even_product_subarrays(n, array): Returns the number of distinct subarrays where the product of the maximum and minimum element is even. Args: - n (int): Length of the array. - array (list): List of integers representing the array elements. Returns: - int: Number of subarrays where max * min is even. count = 0 for start in range(n): max_el = array[start] min_el = array[start] for end in range(start, n): max_el = max(max_el, array[end]) min_el = min(min_el, array[end]) if (max_el * min_el) % 2 == 0: count += 1 return count"},{"question":"A group of friends have decided to host a jukebox party where they\'ll be playing songs from the years 2000 to 2019. Each year within this range has a list of popular songs, and the friends want to create a playlist that contains at least one song from each of these years. Your task is to help them decide on a song selection strategy that ensures they have the shortest possible playlist fulfilling this requirement. Each song belongs to one of the 20 years, and the number of songs provided for each year can be different. The jukebox system limits the maximum number of songs that can be added to the playlist, so finding the optimal number of songs is crucial. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the total number of songs available. Each of the next n lines contains two integers si and yi (1 ≤ si ≤ 1000, 2000 ≤ yi ≤ 2019), where si is the song ID and yi is the year the song was released. Output Print the minimum number of songs the playlist must contain to ensure there\'s at least one song from each year between 2000 and 2019. SAMPLE INPUT 9 1 2000 2 2001 3 2002 4 2002 5 2004 6 2004 7 2004 8 2000 9 2001 SAMPLE OUTPUT 7","solution":"def minimum_songs_needed(n, songs): Given the number of songs and their respective years, this function returns the minimum number of songs needed to have at least one song from each year from 2000 to 2019. years = {year: [] for year in range(2000, 2020)} # Populate the dictionary with song IDs for each year for song_id, year in songs: years[year].append(song_id) # We need at least one song from each year playlist = [] for year in range(2000, 2020): if years[year]: playlist.append(years[year][0]) else: # If any year is missing a song, it\'s impossible to build the playlist raise ValueError(f\\"No songs available for the year {year}\\") return len(playlist)"},{"question":"You are organizing a puzzle competition and need to distribute puzzles among participants. You have n different types of puzzles, and each type has exactly one variant (named from 1 to n). Each participant will receive exactly one puzzle. The puzzles are sorted in a line, and you want to distribute them such that you maximize the number of times a participant receives a puzzle whose variant number is strictly greater than the variant number received by the participant immediately before them. Let\'s define the \\"satisfaction score\\" as the number of times a participant receives a puzzle whose variant number is greater than the variant number received by the participant before them. Your task is to determine how you can distribute the puzzles to maximize this satisfaction score. -----Input----- The first line of input contains a single integer n (1 le n le 10^5) — the number of different types of puzzles. The second line of input contains exactly n space-separated integers representing the variants of the puzzles (1 le text{variant}_i le n), where the i-th integer denotes the variant of the i-th puzzle. -----Output----- Print a single integer representing the maximum possible satisfaction score. -----Examples----- Input 5 1 2 3 4 5 Output 4 Input 6 4 3 2 1 6 5 Output 3 Input 7 1 3 5 2 4 6 7 Output 6 -----Note----- In the first example case, the list is already in strictly increasing order, so each participant gets a puzzle with a variant number greater than the previous participant, leading to a satisfaction score of 4. In the second example, the optimal way to distribute is to follow the sequence directly: [1, 2, 3, 4, 5, 6], resulting in a satisfaction score of 3.","solution":"def max_satisfaction_score(n, puzzles): This function takes in an integer n and a list of integers puzzles, and returns the maximum possible satisfaction score, which is the number of times a participant receives a puzzle whose variant number is strictly greater than the variant number received by the participant immediately before them. # Sort the puzzles to maximize the satisfaction score. puzzles = sorted(puzzles) # Satisfaction score is the count of pairs where the latter element is greater # than the former element, which after sorting is simply n - 1. satisfaction_score = n - 1 return satisfaction_score"},{"question":"Write a function that takes an integer N and returns the N-th Fibonacci number modulo 10^9+7. The Fibonacci sequence is defined as: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 As the Fibonacci numbers grow exponentially, returning the Fibonacci number modulo 10^9+7 will keep the number manageable and prevent overflow. The function signature is: ```python def nth_fibonacci_modulo(n: int) -> int: ``` # Example 1: Input: ``` n = 5 ``` Output: ``` 5 ``` Explanation: - The first few Fibonacci numbers are 0, 1, 1, 2, 3, 5, and so on. - The 5th Fibonacci number is 5. # Example 2: Input: ``` n = 10 ``` Output: ``` 55 ``` Explanation: - The first few Fibonacci numbers are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, and so on. - The 10th Fibonacci number is 55. # Constraints: - 0 <= N <= 10^6 # Expected Complexity: - Time Complexity: O(log N) - Space Complexity: O(1)","solution":"def nth_fibonacci_modulo(n: int) -> int: MOD = 10**9 + 7 def matrix_mult(A, B): return [ [(A[0][0] * B[0][0] + A[0][1] * B[1][0]) % MOD, (A[0][0] * B[0][1] + A[0][1] * B[1][1]) % MOD], [(A[1][0] * B[0][0] + A[1][1] * B[1][0]) % MOD, (A[1][0] * B[0][1] + A[1][1] * B[1][1]) % MOD] ] def matrix_pow(mat, exp): res = [[1, 0], [0, 1]] base = mat while exp > 0: if exp % 2 == 1: res = matrix_mult(res, base) base = matrix_mult(base, base) exp //= 2 return res if n == 0: return 0 if n == 1: return 1 F = [[1, 1], [1, 0]] result_matrix = matrix_pow(F, n-1) return result_matrix[0][0]"},{"question":"Write a function that takes an integer `n` and returns the number of different ways `n` can be expressed as a sum of positive integers, considering that the order of the summands does not matter. For example, 4 can be expressed as 4, 3+1, 2+2, and 2+1+1. # Input # An integer `n` (1 ≤ n ≤ 1000). # Output # Output a single integer representing the number of ways to express `n` as a sum of positive integers, where the order of summands does not matter. # Examples # Input 4 Output 5 Input: 6 Output: 11 # Note # In the first example, there are 5 ways to express 4: - 4 - 3 + 1 - 2 + 2 - 2 + 1 + 1 - 1 + 1 + 1 + 1 In the second example, there are 11 ways to express 6: - 6 - 5 + 1 - 4 + 2 - 4 + 1 + 1 - 3 + 3 - 3 + 2 + 1 - 3 + 1 + 1 + 1 - 2 + 2 + 2 - 2 + 2 + 1 + 1 - 2 + 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 + 1","solution":"def count_partitions(n): Returns the number of ways to express n as a sum of positive integers, where the order of summands does not matter. # Initialize a list to store the number of partitions for each value up to n partitions = [0] * (n + 1) partitions[0] = 1 # There\'s one way to partition 0 (using no parts) # Iterate through each number from 1 to n and update the partitions list for i in range(1, n + 1): for j in range(i, n + 1): partitions[j] += partitions[j - i] return partitions[n]"},{"question":"You are given an array of integers that represents the population in different cities along a highway. The cities are numbered from left to right from 1 to n. Each integer p_i in the array represents the population of the i-th city. You are planning a campaign trip and need to visit all the cities, but you want to minimize the total distance traveled. The catch is, you must start at the first city (p_1) and visit each city exactly once in any order, but you can revisit the first city at the end if needed. Write a program to determine the minimum total distance you need to travel if the distance between any two cities i and j is defined as left|i - jright| (the absolute difference of their indices). Note that visiting the first city at the end incurs additional travel distance. For example, if n=4 and p=[4, 2, 7, 3], then one possible route could be visiting cities in the order [1, 3, 4, 2] (sequence of indices), which results in distances [2, 1, 2] between cities plus potentially returning to the first city, the total distance would be 2 + 1 + 2 = 5. However, visiting cities in the order [1, 4, 3, 2] and not returning to the first city results in distances [3, 1, 1] which results in a total distance of 3 + 1 + 1 = 5. If you visit [1, 2, 3, 4], you travel 1 + 1 + 1 = 3, which is the minimum possible distance in this problem. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases in the input. The following are descriptions of the t test cases. Each test case consists of two lines. The first line contains an integer n (1 le n le 10^5) — the number of cities. The second line contains a sequence of integers p_1, p_2, dots, p_n (1 le p_i le 10^9) — the population of cities in the order they are arranged from left to right. It is guaranteed that the sum of the values of n for all sets of input data in a test does not exceed 10^6. -----Output----- For each set of input data print a single integer — the minimum total distance traveled to visit every city starting from the first city. -----Example----- Input 3 4 4 2 7 3 3 1 5 9 2 3 6 Output 3 2 1 Explanation: In the first test case, visiting cities in order [1, 2, 3, 4] gives the minimum distance of 3. In the second test case, visiting cities in order [1, 2, 3] gives the minimum distance of 2. In the third test case, visiting cities in order [1, 2] gives the minimum distance of 1.","solution":"def minimum_distance(trips): results = [] for n, p in trips: results.append(n - 1) # Minimum distance to visit all cities once in sorted order return results # Example usage: # trips = [(4, [4, 2, 7, 3]), (3, [1, 5, 9]), (2, [3, 6])] # print(minimum_distance(trips)) # Output: [3, 2, 1]"},{"question":"* This problem is fictional and is created purely for assessment purposes, with no relation to actual events, people, or companies. One day at your company, you are asked to optimize the allocation of conference rooms based on scheduled meetings. There are several meetings planned for the day, each requiring a room. Each meeting has a start and end time. To ensure smooth proceedings, each meeting must be assigned to a different room. Your task is to write a program that determines the minimum number of conference rooms needed to accommodate all the meetings without any overlap. problem Given a list of meetings, each with a start time and an end time, determine the minimum number of conference rooms required so that no two meetings overlap in any room. * Input/Output Specifications - **Input:** - The first line contains an integer ( M ) ( (1 leq M leq 10^4) ), the number of meetings. - Each of the next ( M ) lines contains two integers ( S_i ) and ( E_i ) ( (0 leq S_i < E_i leq 10^5) ), representing the start and end times of the ( i )-th meeting. - **Output:** - Output a single integer, the minimum number of conference rooms needed. * Constraints: - The input will be given such that all meeting times are valid, with no meeting having a start time greater than its end time. - ( S_i ) and ( E_i ) are guaranteed to be integers representing times within a 24-hour period. * Example: **Input 1**: 5 1 4 2 3 3 5 7 10 8 9 **Output 1**: 2 **Input 2**: 3 0 30 5 10 15 20 **Output 2**: 2 **Input 3**: 4 1 2 2 3 3 4 4 5 **Output 3**: 1 Explanation: In **Example 1**, the meetings (1,4) and (2,3) overlap, as do (2,3) and (3,5). This requires at least 2 rooms. The meetings (7,10) and (8,9) also overlap, requiring 2 rooms. In **Example 2**, although only 3 meetings are present, (0,30) overlaps with both (5,10) and (15,20), requiring at least 2 rooms. In **Example 3**, none of the meetings overlap, thus only 1 room is required.","solution":"def min_rooms_needed(meetings): Function to determine the minimum number of conference rooms needed to accommodate all meetings without any overlap. Parameters: meetings (list of tuples): Each tuple contains the start time and end time of a meeting. Returns: int: Minimum number of conference rooms required. if not meetings: return 0 start_times = sorted([meeting[0] for meeting in meetings]) end_times = sorted([meeting[1] for meeting in meetings]) num_rooms = 0 end_index = 0 for start in start_times: if start < end_times[end_index]: num_rooms += 1 else: end_index += 1 return num_rooms"},{"question":"Given a string containing only the characters \'L\', \'R\', \'U\', and \'D\', determine if the sequence of movements described by the string will return the robot to its original position. The characters \'L\', \'R\', \'U\', and \'D\' correspond to left, right, up, and down movements, respectively. -----Constraints----- - The length of the string is between 1 and 1000. - The string will only contain characters \'L\', \'R\', \'U\', and \'D\'. -----Input----- Input is given from Standard Input in the following format: A single string s. -----Output----- Output \\"YES\\" if the sequence of movements returns the robot to the origin. Otherwise, output \\"NO\\". -----Sample Input----- LRUD -----Sample Output----- YES -----Sample Input----- LRRU -----Sample Output----- NO","solution":"def does_return_to_origin(movements): Determines if the sequence of movements described will return the robot to its original position. horizontal = 0 vertical = 0 for move in movements: if move == \'L\': horizontal -= 1 elif move == \'R\': horizontal += 1 elif move == \'U\': vertical += 1 elif move == \'D\': vertical -= 1 return \\"YES\\" if horizontal == 0 and vertical == 0 else \\"NO\\""},{"question":"Given a string, write a program to determine if the string is a valid palindrome ignoring non-alphanumeric characters and case. A palindrome is a string that reads the same forward and backward after removing non-alphanumeric characters and converting all letters to a single case. Input The input contains a single string `s` with length between 1 and 2000, inclusive. The string `s` consists of printable ASCII characters. Output Output \\"YES\\" if the string is a valid palindrome, and \\"NO\\" otherwise (quotes for clarity only). Examples Input A man, a plan, a canal: Panama Output YES Input race a car Output NO","solution":"def is_valid_palindrome(s): Returns \\"YES\\" if the string s is a valid palindrome ignoring non-alphanumeric characters and case, \\"NO\\" otherwise. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list of characters is a palindrome return \\"YES\\" if filtered_chars == filtered_chars[::-1] else \\"NO\\""},{"question":"Given a matrix of size MxN, where each cell contains a positive integer, and Q queries specifying a submatrix, calculate the sum of the elements in the specified submatrix for each query. Example: Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] queries = 2 query_params = [ (1, 1, 2, 2), (0, 0, 1, 1) ] Output: 28, 12 Explanation: For the first query, the submatrix from (1, 1) to (2, 2) is: 5 6 8 9 Sum of this submatrix = 5 + 6 + 8 + 9 = 28 For the second query, the submatrix from (0, 0) to (1, 1) is: 1 2 4 5 Sum of this submatrix = 1 + 2 + 4 + 5 = 12 Your Task: You don\'t need to read or print anything. Your task is to complete the function submatrix_sum(), which takes M, N, matrix, Q, and query_params as input and returns a list of sums corresponding to each submatrix query in query_params. Expected Time Complexity: O(Q * M * N). Expected Auxiliary Space: O(Q). Constraints: 1 <= M, N <= 100 1 <= matrix[i][j] <= 1000 1 <= Q <= 100 0 <= query_params[k][0] <= query_params[k][2] < M 0 <= query_params[k][1] <= query_params[k][3] < N","solution":"def submatrix_sum(M, N, matrix, Q, query_params): Given a matrix of size MxN and a list of Q queries specifying submatrices, return the sum of elements in those specified submatrices. Parameters: M (int): Number of rows in the matrix. N (int): Number of columns in the matrix. matrix (list of list of int): 2D list containing the matrix elements. Q (int): Number of queries. query_params (list of tuples): List of tuples containing the top-left and bottom-right coordinates of the submatrices to sum. Returns: list: List of sums of elements in the specified submatrices. result = [] for query in query_params: r1, c1, r2, c2 = query submatrix_sum = 0 for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): submatrix_sum += matrix[i][j] result.append(submatrix_sum) return result"},{"question":"You are given a list of N words. You need to determine if any two distinct words from the list are anagrams of each other. An anagram is a rearrangement of the characters in a word to form another word. Input The first line of input contains a single integer T denoting the number of test cases. Each test case starts with an integer N denoting the number of words. The following N lines contain one word each. Output For each test case, print \\"YES\\" if there are two distinct words that are anagrams of each other. Otherwise, print \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ Length of each word ≤ 100 SAMPLE INPUT 2 4 listen silent enlist google 3 cat dog tac SAMPLE OUTPUT YES YES Explanation Testcase 1: \\"listen\\", \\"silent\\", and \\"enlist\\" are all anagrams of each other. Testcase 2: \\"cat\\" and \\"tac\\" are anagrams of each other.","solution":"def check_anagrams(test_cases): results = [] for test_case in test_cases: N, words = test_case sorted_words = [\'\'.join(sorted(word)) for word in words] if len(sorted_words) != len(set(sorted_words)): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_str): lines = input_str.split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) words = lines[index + 1:index + N + 1] test_cases.append((N, words)) index += N + 1 return test_cases"},{"question":"You are given a string s consisting of n lowercase Latin letters. Your task is to determine the length of the longest substring that can be rearranged to form a palindrome. -----Input----- The input consists of a single line containing the string s of length n (1 le n le 1000). -----Output----- Print the length of the longest substring that can be rearranged to form a palindrome. -----Examples----- Input abccb Output 5 Input aabbcc Output 6 Input abc Output 1","solution":"from collections import Counter def longest_palindromic_substring_length(s): Returns the length of the longest substring that can be rearranged to form a palindrome. # Count the occurrences of each character in the string char_count = Counter(s) # Initialize length of the longest palindromic substring length = 0 odd_count_found = False # Check the counts of each character for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_count_found = True # If we have any characters with an odd count, we can use one of them in the middle of the palindrome if odd_count_found: length += 1 return length"},{"question":"A popular city has been divided into several zones and the transport authority wants to plan an efficient transportation route for their new bus service. The main objective is to connect every zone with the minimum total length of roads. You have to help the authorities find a way to achieve this. Your task is to write a program that finds the Minimum Spanning Tree (MST) of the given zones and roads. The authority wants to know which roads should be included to minimize the total road length while ensuring all zones are connected. -----Input----- The first line contains two integers, Z and R, where Z is the number of zones and R is the number of roads (1 leq Z leq 1000, Z-1 leq R leq 10000). Each of the next R lines describes a road with three integers u, v, and w where u and v are the two endpoints of the road (0-based indexing, 0 leq u, v < Z) and w is the length of the road (1 leq w leq 10000). It is guaranteed that there is at least one way to connect all the zones (i.e., the input graph is connected). -----Output----- Output Z-1 lines, each containing three integers u, v, and w representing a road in the MST. The pairs and the roads can be listed in any order. If there are multiple MSTs, print any one of them. -----Examples----- Sample Input: 4 5 0 1 1 0 2 2 0 3 1 1 3 3 2 3 4 Sample Output: 0 1 1 0 3 1 0 2 2","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(z, r, roads): result = [] i = 0 e = 0 roads = sorted(roads, key=lambda item: item[2]) parent = [] rank = [] for node in range(z): parent.append(node) rank.append(0) while e < z - 1: u, v, w = roads[i] i = i + 1 x = find(parent, u) y = find(parent, v) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) return result # Main function to process input and output def main(z, r, road_list): roads = [tuple(road) for road in road_list] mst = kruskal_mst(z, r, roads) return mst"},{"question":"In a distant kingdom, there is a legendary Phoenix Tree. The branches of this tree grow in a unique way, such that every branch splits into two new branches every year. The people of the kingdom are fascinated by the growth patterns, and they\'ve kept records of the tree\'s branches. You have been given the task of analyzing the Phoenix Tree\'s growth. Specifically, you\'re interested in the number of branches at a specific year and the number of branches that existed between two given years, inclusive. Each record provides the number of branches at the start of Year 1. The following queries can be performed: 1. [1 Y] - Get the number of branches at Year Y. 2. [2 L R] - Get the total number of branches that existed from Year L to Year R, inclusive. ```plaintext -----Input----- The first line of input contains the initial number of branches B, and the number of queries Q. Next Q lines contain the queries described above. -----Output----- For all queries of the first and second type, print the result. -----Constraints----- - 1 ≤ B ≤ 1000 - 1 ≤ Y, L, R ≤ 100 - 1 ≤ Q ≤ 10^5 -----Example----- Input: 5 5 1 3 2 1 3 1 5 2 2 4 1 7 Output: 20 30 80 320 1280 ``` In this problem, the branches double every year. Specifically, if B is the initial number of branches, then: - In Year 1: There are B branches. - In Year 2: There are 2B branches. - In Year 3: There are 4B branches. - In Year Y: There are B * (2^(Y-1)) branches. To get the total number of branches from Year L to Year R inclusive, sum up the branches for each of these years. The solution should efficiently handle the large number of queries by precomputing or using mathematical properties of exponentiation.","solution":"def number_of_branches(initial_branches, year): Given the initial number of branches and a specific year, returns the number of branches in that year. return initial_branches * (2 ** (year - 1)) def total_branches_between_years(initial_branches, start_year, end_year): Given the initial number of branches and a range of years, returns the total number of branches that existed between the start_year and end_year, inclusive. total_branches = 0 for year in range(start_year, end_year + 1): total_branches += number_of_branches(initial_branches, year) return total_branches def process_queries(initial_branches, queries): results = [] for query in queries: if query[0] == 1: # Query type [1 Y] year = query[1] results.append(number_of_branches(initial_branches, year)) elif query[0] == 2: # Query type [2 L R] start_year = query[1] end_year = query[2] results.append(total_branches_between_years(initial_branches, start_year, end_year)) return results"},{"question":"You are required to implement a series of trades in a trading card game. Each trade involves exchanging cards of a certain type between two players. The game uses a set of n different types of cards, where each type of card is represented by a unique integer from 1 to n. Each trade is described by the number of cards of a certain type that one player wants to give to another player in exchange for cards of another type. Your task is to determine if a series of trades is valid, i.e., no player can end up with a negative number of any type of card. Input The input consists of multiple test cases. The first line contains an integer T (1 leq T leq 10), the number of test cases. For each test case, the first line contains an integer n (1 leq n leq 100), the number of different card types, and another integer m (1 leq m leq 100), the number of trades. The next line contains n integers, where the i-th integer represents the initial count of cards of type i the player has (0 leq text{initial cards of type i} leq 100). This is followed by m lines, each containing four integers a, b, c, and d (1 leq a, b leq n and 1 leq c, d leq 100), describing a trade. The player gives c cards of type a and receives d cards of type b in exchange. Output For each test case, output \\"Valid\\" if the series of trades does not cause the player to have a negative number of any type of card. Otherwise, output \\"Invalid\\". Example Input 2 3 3 5 10 5 1 2 4 3 3 1 2 2 2 3 1 1 2 2 3 5 1 2 4 6 2 1 3 5 Example Output Valid Invalid Explanation In the first test case, after performing the trades, the card counts would be: - From trade 1: 5-4=1 cards of type 1, 10+3=13 cards of type 2, 5 cards of type 3. - From trade 2: 1 cards of type 1, 13 cards of type 2, 5-2=3 cards of type 3. - From trade 3: 1 cards of type 1, 13-1=12 cards of type 2, 3+1=4 cards of type 3. Since no type of card goes negative, the output for this test case is \\"Valid\\". In the second test case, after performing the initial trade, the counts of cards will be: - From trade 1: 3-4=-1 cards of type 1, 5+6=11 cards of type 2. Since the player ends up with a negative number of type 1 cards after the first trade, the output for this test case is \\"Invalid\\".","solution":"def validate_trades(T, test_cases): results = [] for case in test_cases: n = case[\'n\'] m = case[\'m\'] initial_cards = case[\'initial_cards\'] trades = case[\'trades\'] # Create a copy of the initial_cards to track changes cards = initial_cards[:] valid = True for trade in trades: a, b, c, d = trade # Perform the trade: give c cards of type a, receive d cards of type b if cards[a - 1] < c: valid = False break cards[a - 1] -= c cards[b - 1] += d results.append(\\"Valid\\" if valid else \\"Invalid\\") return results # Example usage: # T = 2 # test_cases = [ # { # \'n\': 3, # \'m\': 3, # \'initial_cards\': [5, 10, 5], # \'trades\': [ # (1, 2, 4, 3), # (3, 1, 2, 2), # (2, 3, 1, 1) # ] # }, # { # \'n\': 2, # \'m\': 2, # \'initial_cards\': [3, 5], # \'trades\': [ # (1, 2, 4, 6), # (2, 1, 3, 5) # ] # } # ] # print(validate_trades(T, test_cases))"},{"question":"You have been tasked with navigating a maze, represented by a 2D array grid where each cell is either a `0` (empty space) or `1` (wall). Your goal is to find the shortest path from the top-left corner of the maze to the bottom-right corner, moving only up, down, left, or right. If there is no path from the start to the end, return `-1`. Write a function `shortestPathInMaze(maze)` that takes a 2D list `maze` as an argument and returns the length of the shortest path. The top-left of the maze is always marked as the starting point (0, 0), and the bottom-right point is the destination. The function signature in Python: ```python def shortestPathInMaze(maze: List[List[int]]) -> int: pass ``` **Constraints:** - The maze will not be empty and will be a rectangular grid. - The maze can have dimensions as large as 100x100. - Starting point will always be `maze[0][0]` and the destination is always `maze[len(maze)-1][len(maze[0])-1]`. - Movement direction is only up, down, left, and right. - You cannot move through a cell marked with a `1`. **Example:** ```python maze1 = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 1, 0] ] print(shortestPathInMaze(maze1)) # Output: 9 maze2 = [ [0, 1, 1], [1, 0, 1], [1, 1, 0] ] print(shortestPathInMaze(maze2)) # Output: -1 (no path exists) ```","solution":"from collections import deque from typing import List def shortestPathInMaze(maze: List[List[int]]) -> int: if not maze or not maze[0]: return -1 rows, cols = len(maze), len(maze[0]) if maze[0][0] == 1 or maze[rows - 1][cols - 1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() if x == rows - 1 and y == cols - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You\'ve been tasked with developing a simple text-based game that interprets a sequence of character commands to move a player on a 2D grid. The player starts at position (0,0). The score increases by the Manhattan distance the player moves from the previous position. The commands are: - \\"U\\" for moving up (increasing the y-coordinate), - \\"D\\" for moving down (decreasing the y-coordinate), - \\"L\\" for moving left (decreasing the x-coordinate), - \\"R\\" for moving right (increasing the x-coordinate). If the player receives a command that leads them to the same position they were previously in, the score does not change. -----Input----- The first line of input contains a string of commands (1 ≤ length of the string ≤ 100) containing characters \'U\', \'D\', \'L\', \'R\'. -----Output----- Print a single integer representing the total score after executing all commands. -----Examples----- Input URDL Output 4","solution":"def calculate_score(commands): Calculates total score based on a sequence of commands. Parameters: commands (str): A string of commands (\'U\', \'D\', \'L\', \'R\') to move the player. Returns: int: The total score based on the movement. x, y = 0, 0 score = 0 for command in commands: if command == \'U\': new_x, new_y = x, y + 1 elif command == \'D\': new_x, new_y = x, y - 1 elif command == \'L\': new_x, new_y = x - 1, y elif command == \'R\': new_x, new_y = x + 1, y distance = abs(new_x - x) + abs(new_y - y) score += distance x, y = new_x, new_y return score"},{"question":"Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0. Example 1: Input: nums = [2, 1, 2] Output: 5 Explanation: You can form a triangle with sides 2, 1, and 2. Example 2: Input: nums = [1, 2, 1] Output: 0 Explanation: You cannot form a triangle with sides 1, 2, and 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function largestPerimeter() which takes the array nums and its size as input parameters and returns the largest perimeter of a valid triangle, or 0 if no valid triangle can be formed. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 3 ≤ nums.length ≤ 10^4 1 ≤ nums[i] ≤ 10^6","solution":"def largestPerimeter(nums): Returns the largest perimeter of a triangle with non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0. nums.sort(reverse=True) for i in range(len(nums) - 2): if nums[i] < nums[i + 1] + nums[i + 2]: return nums[i] + nums[i + 1] + nums[i + 2] return 0"},{"question":"Ash has undertaken an expedition in the mysterious PokéForest to find and categorize the unique species of Pokémon residing there. He discovered that the forest contains numerous regions, each having different species of Pokémon. Ash recorded the name of each Pokémon he encountered, along with the region number where they were found. His goal is to create a complete list of Pokémon species sorted by their region and then alphabetically within each region. The task is to help Ash by writing a program that, given a list of Pokémon species and their respective region numbers, sorts the Pokémon first by their region number and then alphabetically within each region. -----Input----- The first line contains an integer t (1 le t le 10^3) denoting the number of test cases. Each test case starts with an integer n (1 le n le 10^5) which represents the number of Pokémon records. Each of the following n lines contains a string p_i and an integer r_i separated by a space, where p_i (1 le text{length of } p_i le 100) is the name of the Pokémon, and r_i (1 le r_i le 10^3) is the region number. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print the sorted list of Pokémon species. The list should be sorted by region number first and then alphabetically within each region. For each Pokémon, print its name followed by its region number on a new line. Print a blank line between the output of two consecutive test cases. -----Example----- Input 2 5 Pikachu 1 Bulbasaur 2 Charmander 1 Squirtle 2 Eevee 1 3 Oddish 3 Bellsprout 3 Pidgey 2 Output Charmander 1 Eevee 1 Pikachu 1 Bulbasaur 2 Squirtle 2 Bellsprout 3 Oddish 3 Pidgey 2","solution":"def sort_pokemon(t, test_cases): result = [] for test_case in test_cases: n, pokemons = test_case pokemons.sort(key=lambda x: (x[1], x[0])) # Sorting by region and then alphabetically result.append(pokemons) return result def format_output(sorted_pokemons): output = [] for i, pokemons in enumerate(sorted_pokemons): for pokemon in pokemons: output.append(f\\"{pokemon[0]} {pokemon[1]}\\") if i < len(sorted_pokemons) - 1: output.append(\\"\\") # Blank line between test cases return \\"n\\".join(output) def main(): import sys input = sys.stdin.read data = input().split(\\"n\\") t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) pokemons = [] for j in range(index + 1, index + 1 + n): p, r = data[j].rsplit(\\" \\", 1) pokemons.append((p, int(r))) test_cases.append((n, pokemons)) index += n + 1 sorted_pokemons = sort_pokemon(t, test_cases) output = format_output(sorted_pokemons) print(output) if __name__ == \\"__main__\\": main()"},{"question":"Caleb is attending a chess competition where he needs to calculate the ratings of multiple players. Each player has a unique skill rating between 1 and 10^6. The ratings are stored in an array. Given two ratings a and b, Caleb needs to count how many players have a rating between a and b, inclusive. Given an array of player ratings and multiple queries, where each query consists of two integers representing the range [a, b], output the count of players having ratings within each specified range. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), representing the number of players. The second line contains n integers where the ith integer r[i] (1 ≤ r[i] ≤ 10^6) represents the rating of the ith player. The third line contains an integer q (1 ≤ q ≤ 10^5), representing the number of queries. The next q lines each contain two integers a and b (1 ≤ a ≤ b ≤ 10^6), representing a rating range. -----Output----- Output q lines, each containing a single integer — the count of players whose ratings lie in the range [a, b] for each query. -----Examples----- Input 5 100 200 300 400 500 3 100 300 200 400 300 500 Output 3 3 3 Input 6 10 20 30 40 50 60 2 15 35 25 55 Output 2 2","solution":"from bisect import bisect_left, bisect_right def count_in_ranges(n, ratings, q, queries): Returns a list of counts of players whose ratings fall within each given range. Parameters: n (int): Number of players ratings (list): List of player ratings q (int): Number of queries queries (list): List of tuples representing the query ranges Returns: list: List of counts for each range query # Sort the ratings once for efficient querying ratings.sort() results = [] for a, b in queries: # Find the left and right position for the range [a, b] left_idx = bisect_left(ratings, a) right_idx = bisect_right(ratings, b) count = right_idx - left_idx results.append(count) return results"},{"question":"A gardener has n plants to water. Each plant i has a water requirement of w_i milliliters per day. The gardener can water each plant by at most d milliliters per day. If the requirement for a specific plant exceeds the allowed maximum of d milliliters, the plant will not grow properly. The gardener\'s task is to determine the total amount of unmet water requirement for all plants. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of plants. The second line contains an integer d (1 ≤ d ≤ 10^9) — the maximum amount of water the gardener can supply to each plant per day. The third line contains n integers w_1, w_2, ..., w_n (0 ≤ w_i ≤ 10^9), where w_i is the daily water requirement of the i-th plant. -----Output----- Print a single integer — the total amount of unmet water requirement for all the plants that cannot be met with the given maximum watering limit. -----Examples----- Input 3 4 3 6 2 Output 2 Input 5 10 12 5 8 15 9 Output 7 -----Note----- In the first test, the first plant needs 3 milliliters, which can be met; the second plant needs 6 milliliters, but only 4 milliliters can be provided, leaving an unmet requirement of 2 milliliters; the third plant needs 2 milliliters, which can be fully met. In the second test, the first plant needs 12 milliliters, but only 10 milliliters can be provided, leaving an unmet requirement of 2 milliliters. The second plant needs 5 milliliters, which can be fully met; the third plant needs 8 milliliters, which can be fully met; the fourth plant needs 15 milliliters, but only 10 milliliters can be provided, leaving an unmet requirement of 5 milliliters; the fifth plant needs 9 milliliters, which can be fully met. Thus, the total unmet requirement is 2 + 5 = 7 milliliters.","solution":"def unmet_water_requirement(n, d, water_requirements): Calculate the total amount of unmet water requirement for all plants. :param n: Number of plants :param d: Maximum amount of water that can be provided to each plant daily :param water_requirements: List of water requirements for each plant :return: Total unmet water requirement total_unmet = 0 for requirement in water_requirements: if requirement > d: total_unmet += (requirement - d) return total_unmet # Example usage (for debugging): # n = 3 # d = 4 # water_requirements = [3, 6, 2] # print(unmet_water_requirement(n, d, water_requirements)) # Output: 2"},{"question":"Given an array of integers, determine the smallest positive integer that is not present in the array. Constraints * The length of the array (mathit{len(ar)}) is between 1 and (10^6). * Each integer in the array will be between (-10^6) and (10^6). Input Input is given from Standard Input in the following format: n ar_1 ar_2 ... ar_n Output Print the smallest positive integer that is not in the array. Examples Input 3 1 2 0 Output 3 Input 5 3 4 -1 1 2 Output 5","solution":"def smallest_missing_positive(arr): Returns the smallest positive integer that is not present in the array. arr = [num for num in arr if num > 0] arr = list(set(arr)) # Remove duplicates arr.sort() smallest_missing = 1 for num in arr: if num == smallest_missing: smallest_missing += 1 elif num > smallest_missing: break return smallest_missing"},{"question":"You are asked to help in creating a secure access system to a research facility. The system is based on generating a unique security code for each staff member. The security code must be derived from the full name of the staff member following specific rules: 1. The first character of the code is the length of the first name. 2. Then, append the ASCII value of each character in the first name. 3. Finally, append the number of vowels (a, e, i, o, u) in the last name. Write a function to generate the security code based on the full name of the staff member. -----Input----- - A single line containing the full name of the staff member. The full name will always consist of exactly two words separated by a space, where the first word is the first name and the second word is the last name. The names will only contain alphabetic characters. -----Output----- - A single string representing the generated security code. -----Examples----- Sample Input: John Doe Sample Output: 4*74*111*104*110*2 Sample Input: Alice Wonderland Sample Output: 5*65*108*105*99*101*3","solution":"def generate_security_code(full_name): Generates the security code for a staff member based on their full name. Args: full_name (str): The full name of the staff member. It consists of exactly two words separated by a space. Returns: str: The generated security code. first_name, last_name = full_name.split() # First character of the code is the length of the first name security_code = str(len(first_name)) # Append the ASCII value of each character in the first name for char in first_name: security_code += \'*\' + str(ord(char)) # Append the number of vowels in the last name vowels = set(\'aeiouAEIOU\') vowel_count = sum(1 for char in last_name if char in vowels) security_code += \'*\' + str(vowel_count) return security_code"},{"question":"Given a singly linked list of integers, determine whether a given target value exists within the list. If the target exists, return the position of its first occurrence (1-based index). If the target does not exist, return -1. Example 1: Input: Linked List: 1 -> 3 -> 5 -> 7 -> 9 Target: 5 Output: 3 Explanation: The value 5 exists in the linked list at position 3. Example 2: Input: Linked List: 10 -> 20 -> 30 -> 40 Target: 25 Output: -1 Explanation: The value 25 does not exist in the linked list, so the answer is -1. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function searchLinkedList() that takes the head of the linked list and the target value as arguments and returns the position of the target if it exists, otherwise returns -1. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: - The number of nodes in the linked list is in the range [1, 10^5]. - Each value in the linked list is in the range [1, 10^6]. - The target value is in the range [1, 10^6].","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def searchLinkedList(head, target): Returns the position (1-based index) of the target value in the linked list. If the target does not exist, return -1. current = head position = 1 while current: if current.val == target: return position current = current.next position += 1 return -1"},{"question":"A large company has a hierarchical organizational structure, which can be represented as a tree. The company decides to arrange a round-robin discussion among employees. Each employee can voice in the discussion once. Define the hierarchy of the company as a rooted tree where the root is the CEO. Each node represents an employee and each edge represents a direct report relationship. An employee can have direct reports (children nodes) and a manager (a parent node except the root). During the discussion, the company wants to ensure that no manager (parent node) participates in the discussion before all their direct reports (children nodes) have participated. Write a function to determine the minimum number of distinct rounds required for the whole tree to complete the discussion under these constraints. **Input Format:** - The first line contains a single integer `T`, the number of test cases. - For each test case: - The first line contains an integer `N`, the number of employees (nodes). - The next `N-1` lines each contain two integers `u` and `v`, representing that employee `u` is the direct manager of employee `v`. **Output Format:** - For each test case, print a single integer representing the minimum number of rounds required. **Constraints:** - `1 ≤ T ≤ 10` - `1 ≤ N ≤ 1000` **Sample Input:** ``` 2 3 1 2 1 3 5 1 2 1 3 3 4 3 5 ``` **Sample Output:** ``` 2 3 ``` **Explanation:** In the first test case, the hierarchy is: ``` 1 / 2 3 ``` Employee 1 (the root) will participate last. Employees 2 and 3 can participate in the first round. Therefore, the minimum number of rounds is 2. In the second test case, the hierarchy is: ``` 1 / 2 3 / 4 5 ``` Employees 4 and 5 can participate in the first round. Employee 3 can participate next, and finally, employee 1. Therefore, the minimum number of rounds is 3.","solution":"from collections import deque, defaultdict def min_rounds_for_discussion(T, test_cases): results = [] for case in test_cases: N, edges = case if N == 1: results.append(1) continue tree = defaultdict(list) indegree = [0] * (N + 1) for u, v in edges: tree[u].append(v) indegree[v] += 1 queue = deque() rounds = 0 for i in range(1, N + 1): if indegree[i] == 0: queue.append(i) while queue: rounds += 1 level_size = len(queue) for _ in range(level_size): node = queue.popleft() for child in tree[node]: indegree[child] -= 1 if indegree[child] == 0: queue.append(child) results.append(rounds) return results # Example usage: # T = 2 # test_cases = [ # (3, [(1, 2), (1, 3)]), # (5, [(1, 2), (1, 3), (3, 4), (3, 5)]) #] # print(min_rounds_for_discussion(T, test_cases)) # Output: [2, 3]"},{"question":"A company is organizing a contest for employees to identify the most common phrase in a set of feedback statements. Each statement contains multiple words separated by spaces, and employees are tasked with finding the most frequently occurring phrase of a specified length across all statements. The phrase length is given as part of the input. For this challenge, you are required to write a program that processes multiple test cases. For each test case, you need to determine the most frequent phrase of a given length in the provided feedback statements and return the phrase along with its frequency. A phrase is defined as a sequence of consecutive words of the specified length. If there are multiple phrases with the same highest frequency, return the one that appears first in the lexicographical order. # Input: - The first line of the input contains the number of test cases T. - For each test case, the first line contains two integers N and L. N is the number of feedback statements, and L is the length of the phrase. - The next N lines each contain a feedback statement. # Output: For each test case, output a single line containing the most frequent phrase followed by its frequency. Separate the phrase and its frequency with a space. # Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ Length of each statement ≤ 100 - 1 ≤ L ≤ Number of words in the shortest feedback statement # Sample Input: ``` 2 3 2 this is a test statement test this is a sample statement this is not 2 3 we love coding coding we love ``` # Sample Output: ``` this is 3 coding we love 1 ``` # Explanation: For the first test case: - The 2-word phrases are: \'this is\' (3 times), \'is a\' (2 times), \'a test\', \'test statement\' (1 time each), etc. - \'this is\' appears the most frequently (3 times). For the second test case: - The 3-word phrases are: \'we love coding\' (1 time), \'coding we love\' (1 time). - As there is a tie, the lexicographically smaller phrase \'coding we love\' is returned.","solution":"from collections import defaultdict def most_common_phrase(test_cases): results = [] for n, l, statements in test_cases: phrase_count = defaultdict(int) for statement in statements: words = statement.split() for i in range(len(words) - l + 1): phrase = \' \'.join(words[i:i+l]) phrase_count[phrase] += 1 most_frequent_phrase = min(phrase_count, key=lambda phrase: (-phrase_count[phrase], phrase)) results.append(f\\"{most_frequent_phrase} {phrase_count[most_frequent_phrase]}\\") return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, L = map(int, lines[index].split()) statements = lines[index + 1:index + 1 + N] test_cases.append((N, L, statements)) index += N + 1 return test_cases def main(input_string): test_cases = parse_input(input_string) return most_common_phrase(test_cases)"},{"question":"A new online music service is growing rapidly, and they keep adding new songs to their catalog every day. Each song can have certain attributes such as \\"genre\\", \\"popularity score\\", \\"year of release\\", and more. The service wants to implement a feature that allows users to search for songs based on these attributes. To implement this feature, you are given a list of songs, where each song is represented as a dictionary with the following keys: - \\"title\\": The title of the song (string) - \\"genre\\": The genre of the song (string) - \\"popularity\\": The popularity score of the song (integer) - \\"year\\": The year of release of the song (integer) Your task is to write a function that filters the songs based on the provided search criteria. The search criteria will be provided as a dictionary with possible keys being \\"genre\\", \\"min_popularity\\", and \\"year\\". If a key is not provided in the search criteria, it means no filtering should be done based on that attribute. The function should return a list of titles (strings) of the songs that match the search criteria. Input - A list of dictionaries representing songs. Each song dictionary will have the keys \\"title\\", \\"genre\\", \\"popularity\\", and \\"year\\". - A dictionary representing the search criteria. The dictionary can have the keys \\"genre\\", \\"min_popularity\\", and \\"year\\". Output - A list of strings representing the titles of the songs that match the search criteria. Function signature ```python def filter_songs(songs: List[Dict[str, Union[str, int]]], criteria: Dict[str, Union[str, int]]) -> List[str]: pass ``` Constraints - The number of songs will not exceed 10^5. - The \\"popularity\\" score and \\"year\\" of each song are between 0 and 10^9. - The length of song titles and genres will not exceed 100 characters. Example Input: songs = [ {\\"title\\": \\"Song1\\", \\"genre\\": \\"Rock\\", \\"popularity\\": 90, \\"year\\": 2000}, {\\"title\\": \\"Song2\\", \\"genre\\": \\"Pop\\", \\"popularity\\": 80, \\"year\\": 2005}, {\\"title\\": \\"Song3\\", \\"genre\\": \\"Rock\\", \\"popularity\\": 85, \\"year\\": 2010} ] criteria = {\\"genre\\": \\"Rock\\", \\"min_popularity\\": 85} Output: [\\"Song3\\"] Explanation: Only \\"Song3\\" matches the criteria of being genre \\"Rock\\" and having a popularity score of at least 85.","solution":"from typing import List, Dict, Union def filter_songs(songs: List[Dict[str, Union[str, int]]], criteria: Dict[str, Union[str, int]]) -> List[str]: filtered_songs = [] for song in songs: if \\"genre\\" in criteria and song[\\"genre\\"] != criteria[\\"genre\\"]: continue if \\"min_popularity\\" in criteria and song[\\"popularity\\"] < criteria[\\"min_popularity\\"]: continue if \\"year\\" in criteria and song[\\"year\\"] != criteria[\\"year\\"]: continue filtered_songs.append(song[\\"title\\"]) return filtered_songs"},{"question":"Develop a function that simulates a simple file system within a given size limit. The file system supports three operations: - `add <file_name> <file_size>`: Creates a file with the given name and size (in bytes). - `del <file_name>`: Deletes the file with the given name. - `info`: Prints current usage stats in the format: `used/total` bytes. If adding a file exceeds the file system\'s size limit, the file should not be added and an error message \\"Error: Not enough space.\\" should be output. Your task is to implement this file system and process a series of operations. Input The input consists of: - The first line contains a single integer T, the total capacity of the file system in bytes. - The second line contains an integer N, the number of operations. - The next N lines each contain one file operation (either add, del, or info). Output For each `info` operation, output the current usage stats. If an add operation exceeds the file system\'s size limit, output \\"Error: Not enough space.\\" Constraints 1 ≤ T ≤ 10^6 1 ≤ N ≤ 100 1 ≤ file_size ≤ T 1 ≤ |file_name| ≤ 100 Example Input: 100 6 add file1 30 add file2 50 info add file3 40 del file1 info Output: 80/100 60/100 Explanation: Initially, file1 and file2 are added without any issues. The `info` command reports 80 bytes used out of 100. Attempting to add file3 would exceed the capacity, so an error message is output. After deleting file1, the `info` command reports 60 bytes used, indicating successful deletion.","solution":"class SimpleFileSystem: def __init__(self, total_capacity): self.total_capacity = total_capacity self.used_capacity = 0 self.files = {} def add(self, file_name, file_size): if self.used_capacity + file_size > self.total_capacity: return \\"Error: Not enough space.\\" if file_name in self.files: return \\"Error: File already exists.\\" self.files[file_name] = file_size self.used_capacity += file_size def delete(self, file_name): if file_name in self.files: self.used_capacity -= self.files[file_name] del self.files[file_name] def info(self): return f\\"{self.used_capacity}/{self.total_capacity}\\" def process_file_operations(total_capacity, operations): fs = SimpleFileSystem(total_capacity) results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \'add\': _, file_name, file_size = parts file_size = int(file_size) result = fs.add(file_name, file_size) if result: results.append(result) elif command == \'del\': _, file_name = parts fs.delete(file_name) elif command == \'info\': results.append(fs.info()) return results"},{"question":"Implement the RecentlyUsedList class that simulates a list of recently used items with the following functionalities: - RecentlyUsedList(): Constructor to initialize an empty list. - add(item): Adds a new item to the list. If the item already exists in the list, it should be moved to the front (indicating it was recently used). The list should not contain duplicate entries. - get(): Returns the list of items with the most recently added or accessed item at the front and the oldest at the back. Example: RecentlyUsedList recentlyUsedList = new RecentlyUsedList(); // init empty list recentlyUsedList.add(\\"item1\\"); recentlyUsedList.add(\\"item2\\"); recentlyUsedList.add(\\"item3\\"); recentlyUsedList.add(\\"item2\\"); // \'item2\' should move to the front recentlyUsedList.add(\\"item4\\"); recentlyUsedList.get(); // should return [\'item4\', \'item2\', \'item3\', \'item1\'] Note: - The list should only contain unique items. - The add method should have an average time complexity of O(1). - The get method should return the items in the currently stored order (most recently used to least). Hints: - Consider using a combination of a HashSet or Dictionary and a LinkedList to maintain the order and uniqueness of elements efficiently.","solution":"from collections import OrderedDict class RecentlyUsedList: def __init__(self): self.items = OrderedDict() def add(self, item): if item in self.items: self.items.move_to_end(item) self.items[item] = None self.items.move_to_end(item, last=False) def get(self): return list(self.items.keys())"},{"question":"You are given a string which represents an expression containing only non-negative integers and the operators `+`, `-`, `*`, and `/`. Your task is to evaluate this expression while maintaining the order of operations (also known as BIDMAS/BODMAS rules - Brackets, Orders (i.e. powers and square roots, etc.), Division and Multiplication, Addition and Subtraction). Input The input consists of a single line containing a string representing a mathematical expression. The expression is guaranteed to be valid and will not contain any spaces. The length of the expression will not exceed 100 characters. Output Output a single line with a single integer which is the result of evaluating the expression. Examples Input 3+5*2 Output 13 Input 10+2*6/3 Output 14","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers and the operators `+`, `-`, `*`, and `/` while maintaining the order of operations (BIDMAS/BODMAS rules). :param expression: A string representing the mathematical expression :return: An integer which is the result of evaluating the expression def operate(op, second, first): if op == \'+\': return first + second elif op == \'-\': return first - second elif op == \'*\': return first * second elif op == \'/\': return first // second num_stack = [] op_stack = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 num_stack.append(num) i -= 1 elif expression[i] in \'+-*/\': while (op_stack and op_stack[-1] in \'*/\' and expression[i] in \'*/\' or op_stack and op_stack[-1] in \'*/\' and expression[i] in \'+-\' or op_stack and op_stack[-1] in \'+-\' and expression[i] in \'+-\'): num_stack.append(operate(op_stack.pop(), num_stack.pop(), num_stack.pop())) op_stack.append(expression[i]) i += 1 while op_stack: num_stack.append(operate(op_stack.pop(), num_stack.pop(), num_stack.pop())) return num_stack[0]"},{"question":"Given an unimodal list of integers, where the values first strictly increase and then strictly decrease, your task is to find the peak element of the list as efficiently as possible. A peak element is defined as an element which is greater than its neighbors. For the first and last element, you\'ll only have one neighbor to consider. Function Signature: ```python def find_peak(arr: List[int]) -> int: ``` Input: - An array `arr` of length `n` (1 ≤ n ≤ 10^6) which is strictly increasing and then strictly decreasing. Output: - Return the index (0-based) of the peak element in the list. Examples: ```python assert find_peak([1, 3, 8, 12, 4, 2]) == 3 # arr[3] = 12 is the peak assert find_peak([10, 20, 30, 40, 50, 60, 50, 20, 10]) == 5 # arr[5] = 60 is the peak assert find_peak([10]) == 0 # arr[0] = 10 is the peak because it\'s the only element ``` Explanation: - In the first example, `arr[3]` (which is 12) is the peak element because it\'s greater than both its left neighbor (8) and right neighbor (4). - In the second example, `arr[5]` (which is 60) is the peak element because it\'s greater than both its left neighbor (50) and right neighbor (50). - In the third example, there is only one element, so it is the peak by default. You should aim to implement this solution with a time complexity of O(log N).","solution":"from typing import List def find_peak(arr: List[int]) -> int: Returns the index of the peak element in an unimodal list. left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] < arr[mid + 1]: # Peak is in the right half left = mid + 1 else: # Peak is in the left half or at mid right = mid return left"},{"question":"A company manages multiple projects, and each project has a set of tasks that need to be completed. Each task has a specific time duration required for its completion. The company wants to determine the minimum amount of time required to complete all the tasks if they can work on multiple tasks simultaneously but can assign a maximum of one task per worker, and they have only a given number of workers available. You are given the number of workers available and the durations of each task. You need to find out the minimum amount of time needed to complete all the tasks, ensuring that the tasks are optimally distributed among the workers. Function Description Complete the function `minCompletionTime` in the editor below. It should return an integer representing the minimum units of time required to complete all tasks. `minCompletionTime` has the following parameters: - `workers`: an integer representing the number of workers available. - `tasks`: an array of integers where each integer represents the time duration of a task. Input Format The first line contains an integer `w`, the number of workers. The second line contains an integer `t`, the number of tasks. The third line contains `t` space-separated integers, where each integer is the time duration of a respective task. Constraints - 1 le w le 100 - 1 le t le 1000 - 1 le text{duration} le 1000 Output Format Return a single integer, the minimum time needed to complete all the tasks. Sample Input ``` 3 6 2 2 3 5 9 3 ``` Sample Output ``` 9 ``` Explanation In this example, there are 3 workers available and 6 tasks with the specified durations. One optimal assignment could be: - Worker 1 takes tasks with durations [2, 3], which takes 5 units of time. - Worker 2 takes tasks with durations [5], which takes 5 units of time. - Worker 3 takes tasks with durations [2, 3, 9], which takes 9 units of time. The minimum time to complete all tasks would be the maximum time taken by any worker, which is 9 in this case.","solution":"def minCompletionTime(workers, tasks): Determine the minimum amount of time required to complete all tasks with the given number of workers. Parameters: workers (int): the number of workers available. tasks (list): a list of integers where each integer represents the time duration of a task. Returns: int: the minimum units of time required to complete all tasks. from heapq import heappop, heappush # If the number of workers is greater than or equal to the number of tasks, # then the time required is just the longest task if workers >= len(tasks): return max(tasks) # Sort tasks in descending order to assign the longest tasks first tasks.sort(reverse=True) # Initialize a min-heap with zeros, one for each worker min_heap = [0] * workers # Assign each task to the worker with the current least load for task in tasks: least_loaded_worker = heappop(min_heap) heappush(min_heap, least_loaded_worker + task) # The time required is the maximum load of any worker after all assignments return max(min_heap)"},{"question":"Given a non-empty array of integers, find the longest contiguous subarray with an equal number of 0s and 1s. Return the length of that subarray. If there is no such subarray, return 0. For example, `findMaxLength([0,1,0,0,1,1])` should return `6` because the entire array is the longest subarray with an equal number of 0s and 1s. More examples in the test cases. # Function Signature ```python def findMaxLength(nums: List[int]) -> int: # your code here ``` # Input - A list of integers, `nums` where each element is either `0` or `1`. The length of the array is between 1 and 10^5. # Output - An integer representing the length of the longest contiguous subarray with an equal number of 0s and 1s. # Examples ```python assert findMaxLength([0, 1, 0]) == 2 assert findMaxLength([0, 1, 0, 0, 1, 1]) == 6 assert findMaxLength([0, 0, 1, 1, 0]) == 4 assert findMaxLength([1, 1, 1, 0, 1]) == 2 ```","solution":"def findMaxLength(nums): Finds the length of the longest contiguous subarray with an equal number of 0s and 1s. # Initialize variables to track the count and the maximum length of subarray count = 0 max_length = 0 # Dictionary to store the first occurrence of each count value count_map = {0: -1} for i, num in enumerate(nums): # Increment count for 1, decrement for 0 count += 1 if num == 1 else -1 # Check if the current count has been seen before if count in count_map: # Calculate the length of the subarray from the previous occurrence to the current index max_length = max(max_length, i - count_map[count]) else: # Store the first occurrence of the count count_map[count] = i return max_length"},{"question":"Given an array of integers arr of length n, find the length of the smallest subarray (contiguous elements) such that the sum of the subarray is greater than or equal to a given integer x. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the elements of the array. The third line contains a single integer x (1 ≤ x ≤ 10^9) — the target sum. -----Output----- Print a single integer — the length of the smallest subarray with the sum greater than or equal to x. If no such subarray exists, print -1. -----Examples----- Input 5 1 2 3 4 5 11 Output 3 Input 6 2 1 5 2 8 1 7 Output 1 Input 4 1 1 1 1 10 Output -1 -----Note----- In the first example, the smallest subarray with sum ≥ 11 is [4, 5, 3] which has a length of 3. In the second example, the smallest subarray with sum ≥ 7 is [8] which has a length of 1. In the third example, there is no subarray with sum ≥ 10, hence the output is -1.","solution":"def smallest_subarray_with_sum(arr, x): Returns the length of the smallest subarray with sum greater than or equal to x. If no such subarray exists, return -1. n = len(arr) if n == 0: return -1 min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= x: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Alice and Bob are playing a game with a string. The game rules are simple: - The string consists of lowercase English letters. - Alice starts the game and they alternate turns. - In each turn, the player can choose any character in the string and remove it, but the string should still remain a valid word (sub-sequence of the original string). - The objective of the game is to prevent the opponent from making a move, i.e., when a player cannot make a move, they lose. Your task is to determine who will win the game given an initial string. Input: - A single string `s` of length n where `1 <= n <= 100` consisting of lowercase English letters. Output: - Print \\"Alice\\" if Alice has a winning strategy, otherwise print \\"Bob\\". Example Input ``` abc ``` Output ``` Alice ``` Input ``` aaaaa ``` Output ``` Bob ``` **Hints:** 1. If the string has only one unique character, Bob can always force Alice to lose by removing characters one by one until Alice can\'t make a move. 2. If the string has more than one unique character, Alice can force a win by making sure she always leaves at least one character of every other unique character for Bob to deal with.","solution":"def determine_winner(s): Determines the winner of the game given the initial string s. Parameters: s (str): input string consisting of lowercase English letters Returns: str: \\"Alice\\" if Alice has a winning strategy, otherwise \\"Bob\\" unique_characters = set(s) # Alice wins if there is more than one unique character. # Bob wins if there is only one unique character because Alice can\'t make a unique move to prevent Bob from winning. if len(unique_characters) > 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Katie is working on a software that manipulates strings based on specific rules. She needs to input a string and find the longest substring where each character appears an even number of times. Write a function that takes a string as input and returns the length of the longest substring where the frequency of every character is even. If no such substring exists, return 0. # Input - The input will be a single string `s` (1 ≤ length of s ≤ 1000) containing only lowercase English letters. # Output - Output a single integer — the length of the longest substring where every character appears an even number of times. # Examples Input `abccba` Output 6 Input `abcd` Output 0 Input `aabbcc` Output 6 # Note In the first sample, the entire string \\"abccba\\" has each character appearing twice, so the output is 6. In the second sample, no substring with all characters appearing an even number of times exists, so the output is 0. In the third sample, the entire string \\"aabbcc\\" has each character appearing twice, so the output is 6.","solution":"def longest_even_char_substring(s): def is_even_freq(sub): # Helper function to check if all characters in the substring appear even times from collections import Counter count = Counter(sub) return all(freq % 2 == 0 for freq in count.values()) max_len = 0 n = len(s) # Iterate over all possible substrings and check if they satisfy the condition for i in range(n): for j in range(i+1, n+1): if is_even_freq(s[i:j]): max_len = max(max_len, j-i) return max_len"},{"question":"You are given a binary tree with n nodes. Each node is uniquely numbered with integers from 1 to n. Additionally, each node contains a value, which is a non-negative integer. You need to perform q update and query operations on this tree: 1. Update the value of a specific node. 2. Query the maximum value in the subtree rooted at a specific node. Initially, all nodes have a value equal to 0. Input The first line contains integers n and q (1 ≤ n, q ≤ 100,000) — the number of nodes in the tree and the number of operations. The second line contains n−1 integers, where the i-th integer is the parent node of the (i+1)-th node (2 ≤ i+1 ≤ n). Each of the next q lines contains either: - \\"1 vi x\\" (1 ≤ vi ≤ n, 0 ≤ x ≤ 10^9): Update the value of node vi to x. - \\"2 vi\\" (1 ≤ vi ≤ n): Query the maximum value in the subtree rooted at node vi. Output For each query of the type \\"2 vi\\", print the maximum value in the subtree rooted at node vi. Examples Input 5 6 1 1 2 2 1 1 5 1 3 3 1 4 7 2 1 2 2 2 5 Output 7 7 0 Note: In the given example, the tree structure is as follows: - Node 1 is the root. - Node 2 and 3 are children of Node 1. - Node 4 and 5 are children of Node 2. Initial values of all nodes are 0. After the updates, the values are: - Node 1 = 5 - Node 3 = 3 - Node 4 = 7 (Querying the maximum values in the respective subtrees gives the outputs as shown.)","solution":"class TreeNode: def __init__(self, id): self.id = id self.value = 0 self.children = [] def update_value(node, x): node.value = x def find_max_in_subtree(node): max_value = node.value for child in node.children: max_value = max(max_value, find_max_in_subtree(child)) return max_value def process_operations(n, edges, operations): nodes = [TreeNode(i) for i in range(n + 1)] root = nodes[1] for i, parent in enumerate(edges, start=2): nodes[parent].children.append(nodes[i]) results = [] for op in operations: parts = op.split() if parts[0] == \\"1\\": vi, x = int(parts[1]), int(parts[2]) update_value(nodes[vi], x) elif parts[0] == \\"2\\": vi = int(parts[1]) results.append(find_max_in_subtree(nodes[vi])) return results"},{"question":"Description Write a function that determines if a given string is a valid paragraph. A paragraph is valid if the following conditions are met: 1. It starts with a capital letter. 2. It ends with a proper punctuation mark (either a period, a question mark, or an exclamation point). 3. It has at least one other sentence. Each sentence within the paragraph (excluding the first) must: - Start with a capital letter. - End with a proper punctuation mark. A sentence is defined as a series of words followed by a terminating punctuation (period, question mark, or exclamation point). Words are defined as a series of letters which may contain both upper and lowercase characters. The input is a string and the function should return `True` if the paragraph is valid, otherwise `False`. Examples: ```python \\"Hello. This is a test.\\" --> True \\"This is invalid\\" --> False \\"hello. This is not valid.\\" --> False \\"Is this valid? Yes, it is!\\" --> True \\"Testing. Another sentence! And one more?\\" --> True \\"An incomplete sentence\\" --> False ``` Good luck!","solution":"import re def is_valid_paragraph(paragraph): Determines if the given string is a valid paragraph. A valid paragraph satisfies the following: 1. It starts with a capital letter. 2. It ends with a proper punctuation mark (either a period, a question mark, or an exclamation point). 3. It has at least one other sentence. Each sentence within the paragraph (excluding the first) must: - Start with a capital letter. - End with a proper punctuation mark. Args: paragraph (str): The paragraph string to be validated. Returns: bool: True if the paragraph is valid, False otherwise. sentences = re.split(r\'(?<=[.!?])s+\', paragraph) if len(sentences) < 2: return False for i, sentence in enumerate(sentences): if not sentence: return False if i == 0: # First sentence if not sentence[0].isupper() or not sentence.endswith((\'.\', \'?\', \'!\')): return False else: if not sentence[0].isupper() or not sentence.endswith((\'.\', \'?\', \'!\')): return False return True"},{"question":"In a certain computer game, you have a rectangular grid of size N×M. Your character starts at the top-left corner (1,1) and wants to reach the bottom-right corner (N,M). However, there are K enemy-occupied cells which are dangerous and need to be avoided. Your task is to find the number of ways your character can move from (1,1) to (N,M) without passing through any of the enemy-occupied cells. You can only move right or down at each step. Since the number of ways can be very large, return the result modulo 10^9+7. -----Constraints----- - 1 ≤ N, M ≤ 1000 - 0 ≤ K ≤ min(10^4, N * M) - The positions of the enemy-occupied cells are given as a list of coordinates (r_i, c_i) where 1 ≤ r_i ≤ N and 1 ≤ c_i ≤ M. -----Input----- The input is given from Standard Input in the following format: N M K r1 c1 r2 c2 ... rK cK -----Output----- Print the number of ways your character can travel to the bottom-right cell, modulo 10^9+7. -----Sample Input----- 3 3 1 2 2 -----Sample Output----- 2 There are two ways to move from (1,1) to (3,3) without passing through the cell (2,2): \\"Right, Right, Down, Down\\" and \\"Down, Down, Right, Right\\".","solution":"def num_ways_to_reach_end(N, M, K, enemies): MOD = 10**9 + 7 # Create a grid initialized to 0 grid = [[0] * M for _ in range(N)] # Mark the enemy cells as -1 for r, c in enemies: grid[r-1][c-1] = -1 # Initialize the starting cell if it\'s not an enemy cell grid[0][0] = 1 if grid[0][0] != -1 else 0 # Fill the grid with number of ways for i in range(N): for j in range(M): # If current cell is an enemy cell, skip it if grid[i][j] == -1: grid[i][j] = 0 continue # Add ways from top cell if it\'s within bounds and not an enemy if i > 0 and grid[i-1][j] != -1: grid[i][j] = (grid[i][j] + grid[i-1][j]) % MOD # Add ways from left cell if it\'s within bounds and not an enemy if j > 0 and grid[i][j-1] != -1: grid[i][j] = (grid[i][j] + grid[i][j-1]) % MOD # The result is the number of ways to reach the bottom-right corner return grid[N-1][M-1]"},{"question":"A company is organizing a team-building event and wants to divide its employees into teams such that each team has the same number of members. Each team should ideally have members with consecutive skill levels to ensure balanced skill distribution. You are provided with a list of skill levels of all employees in the company. You need to divide the employees into the maximum possible number of teams where each team has exactly K members. Write a function to determine the maximum number of teams and return the list of team configurations. Each team configuration is a list of integers representing the skill levels of the team members. If it is not possible to create such teams, return an empty list. ------ Input Format ------ - First line contains two integers N and K. - Second line contains N integers representing the skill levels of employees. ------ Output Format ------ Return the maximum number of teams and the list of team configurations. Each team configuration should be a list of integers. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 1 ≤ K ≤ N 1 ≤ text{skill level of each employee} ≤ 10^{5} ----- Sample Input 1 ------ 8 2 1 2 3 4 5 6 7 8 ----- Sample Output 1 ------ 4 [[1, 2], [3, 4], [5, 6], [7, 8]] ----- Sample Input 2 ------ 6 3 4 5 6 8 9 10 ----- Sample Output 2 ------ 2 [[4, 5, 6], [8, 9, 10]] ----- Sample Input 3 ------ 5 3 3 1 4 2 5 ----- Sample Output 3 ------ 1 [[1, 2, 3]] ----- Explanation ------ In the first sample, employees can be divided into 4 teams with the following skill levels: [1, 2], [3, 4], [5, 6], and [7, 8]. In the second sample, employees can be divided into 2 teams with the following skill levels: [4, 5, 6] and [8, 9, 10]. In the third sample, the only possible team configuration is [1, 2, 3] which uses the maximum number of employees out of the given list. Since we need 3 members per team, only one team can be formed.","solution":"def divide_teams(N, K, skill_levels): Divides employees into teams such that each team has exactly K members with consecutive skill levels. :param N: int - Number of employees :param K: int - Number of members in each team :param skill_levels: list - Skill levels of employees :return: Tuple(int, list of list) - Number of teams and list of team configurations # Sort the skill levels to ensure consecutive skills sorted_skills = sorted(skill_levels) teams = [] # Iterate over the sorted skill levels in steps of K for i in range(0, N, K): # If there are enough employees left to form a team if i + K <= N: teams.append(sorted_skills[i:i + K]) # Return the number of teams and the list of team configurations return len(teams), teams"},{"question":"Given n integers a1, a2, ..., an, you need to find the subarray with the maximum sum. A subarray is a contiguous part of an array. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the array. The next line contains n space-separated integers a1, a2, ..., an (−109 ≤ ai ≤ 109). Output Print a single integer — the sum of the subarray with the maximum sum. Examples Input 5 1 2 3 -2 5 Output 9 Input 4 -1 -2 -3 -4 Output -1 Note In the first example: * The subarray [1, 2, 3, -2, 5] has the largest sum which is 9. In the second example: * The subarray [-1] has the largest sum which is -1.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any subarray of the given array. max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_input(n, arr): return max_subarray_sum(arr)"},{"question":"Karl is working on a project to analyze sequences of integers. He has a sequence of integers of length n. He wants to determine if the sequence can be sorted in non-decreasing order by changing at most one integer in the sequence. If possible, return the list of integers after the change. If it is not possible, return -1. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the sequence of integers. -----Output----- Print n integers if the sequence can be sorted by changing at most one integer. Print -1 if it is not possible. -----Examples----- Input 5 1 2 10 5 6 Output 1 2 5 5 6 Input 3 4 1 3 Output 1 1 3 Input 4 5 4 3 2 Output -1","solution":"def can_be_sorted_by_one_change(sequence): n = len(sequence) # Helper function to check if a sequence is sorted in non-decreasing order def is_sorted(seq): return all(seq[i] <= seq[i + 1] for i in range(len(seq) - 1)) if is_sorted(sequence): return sequence # Already sorted # Find the first position where the sequence is not sorted for i in range(n - 1): if sequence[i] > sequence[i + 1]: break else: # If no break statement encountered, the sequence is sorted return sequence # Try changing sequence[i] original_value = sequence[i] sequence[i] = sequence[i + 1] if is_sorted(sequence): return sequence # Restore the original value and try changing sequence[i + 1] sequence[i] = original_value sequence[i + 1] = sequence[i] if is_sorted(sequence): return sequence # If neither modification works, return -1 return -1 # Wrapper function to fit the required input-output format def sequence_sort_check(n, seq): result = can_be_sorted_by_one_change(seq) if result == -1: return -1 else: return result"},{"question":"=====Problem Statement===== You are given a list of integers and your task is to remove all duplicate elements while maintaining the original order of elements. =====Example===== Example: >>> input_list = [4, 5, 6, 4, 5, 6, 7] After removing duplicates while maintaining order: >>> output_list = [4, 5, 6, 7] =====Input Format===== The first line contains an integer n, the number of elements in the list. The second line contains n space-separated integers representing the elements of the list. =====Output Format===== Output the list of integers after removing all duplicate elements while maintaining the original order. Example Input 8 1 2 3 2 4 3 5 6 Example Output 1 2 3 4 5 6 =====Constraints===== 1 <= n <= 1000 0 <= list elements <= 10000","solution":"def remove_duplicates(input_list): Removes duplicates from the input list while maintaining the original order. Args: input_list (list): List of integers from which to remove duplicates. Returns: list: List with duplicates removed and original order maintained. seen = set() output_list = [] for item in input_list: if item not in seen: seen.add(item) output_list.append(item) return output_list"},{"question":"Given an array of integers, the task is to determine if it can be split into two subsequences such that one subsequence is strictly increasing and the other is strictly decreasing. You are required to complete the function which returns true if the array can be split as described, otherwise false. Input: The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case contains an integer N indicating the number of elements in the array, followed by N integers, the elements of the array. Output: For each test case, output 1 if the array can be split into the required subsequences and 0 otherwise. Constraints: 1<=T<=100 1<=N<=200 -1000<=arr[i]<=1000 Example: Input 3 5 1 2 3 4 5 6 5 3 2 1 4 6 4 1 3 2 4 Output 1 1 0 Explanation: 1. In the first test case, the array can be split into subsequences [1, 2, 3, 4, 5] and []. 2. In the second test case, the array can be split into subsequences [5, 3, 2, 1] and [4, 6]. 3. In the third test case, the array cannot be split into the required subsequences. Note: The Input/Output format and Example given are used for system\'s internal purpose and should be used by a user for Expected Output only. As it is a function problem, the user should not read any input from stdin/console. The task is to complete the function specified and not to write the full code.","solution":"def can_be_split(arr): Determine if the array can be split into one strictly increasing subsequence and one strictly decreasing subsequence. def is_strictly_increasing(subarr): return all(subarr[i] < subarr[i + 1] for i in range(len(subarr) - 1)) def is_strictly_decreasing(subarr): return all(subarr[i] > subarr[i + 1] for i in range(len(subarr) - 1)) n = len(arr) for i in range(1, n): increasing, decreasing = arr[:i], arr[i:] if (is_strictly_increasing(increasing) and is_strictly_decreasing(decreasing)) or (is_strictly_increasing(decreasing) and is_strictly_decreasing(increasing)): return 1 return 0 def process_test_cases(T, test_cases): results = [] for n, arr in test_cases: results.append(can_be_split(arr)) return results"},{"question":"Write a program that determines whether all strings in a given list are anagrams of each other. Constraints * 2 leq n leq 100 * Each string contains only lowercase English letters * String length is between 1 and 100 Input The first line contains the integer n, the number of strings. Each of the next n lines contains a string. Output Print \\"Yes\\" if all given strings are anagrams of each other, otherwise \\"No\\" in a line. Examples Input 3 listen silent enlist Output Yes Input 3 listen silent hello Output No","solution":"def are_anagrams(str_list): Determines if all strings in the list are anagrams of each other. Args: str_list (list): List of strings to check Returns: str: \\"Yes\\" if all strings are anagrams, otherwise \\"No\\" if not str_list: return \\"No\\" # Sort the first string to get a base anagram comparison base_sorted = sorted(str_list[0]) for s in str_list[1:]: if sorted(s) != base_sorted: return \\"No\\" return \\"Yes\\""},{"question":"Your task is to maintain a growing list of names in alphabetic order. You have to execute several operations on an initially empty list. There are two types of operations: 1. \\"add name\\" - This command adds a name to the list in its correct position to maintain sorted order. 2. \\"remove name\\" - This command removes a name from the list if it exists. After all operations, you have to print the final sorted list of names. Input The first line contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5), representing the number of operations. The next n lines contain one of the following commands: 1. \\"add name\\" - Adds a name to the list. (name consists of only lowercase alphabetical characters and has length between 1 and 20) 2. \\"remove name\\" - Removes a name from the list if it exists. Output Print the final sorted list of names, each name on a new line. If the list is empty, print nothing. Examples Input 6 add alice add bob add charlie remove bob add dave remove bob Output alice charlie dave Input 5 add zebra remove zebra add yak add xenon add apple Output apple xenon yak","solution":"def manage_names(commands): Manage a list of names by adding or removing them based on the given commands. Args: commands (list): List of commands to be executed on the names list Returns: list: Sorted list of names after executing all commands names = set() for command in commands: action, name = command.split() if action == \'add\': names.add(name) elif action == \'remove\' and name in names: names.remove(name) return sorted(names)"},{"question":"A store keeps track of daily sales in dollars for n items over m days. For each day, there is a sales record for each item. Given the sales records, determine the total sales for each item over all the days. ------ Input Format ------ - The first line of input will contain two integers n and m, denoting the number of items and the number of days, respectively. - The next m lines will each contain n integers, representing the sales for each item on that particular day. ------ Output Format ------ Output n integers, each representing the total sales for an item over all the days. ------ Constraints ------ 1 ≤ n, m ≤ 100 0 ≤ text{sales} ≤ 1000 ------ Sample Input 1 ------ 3 2 10 20 30 5 10 15 ------ Sample Output 1 ------ 15 30 45 ------ Explanation 1 ------ For item 1, the total sales over 2 days are 10 + 5 = 15. For item 2, the total sales over 2 days are 20 + 10 = 30. For item 3, the total sales over 2 days are 30 + 15 = 45.","solution":"def total_sales(n, m, sales_records): Calculates the total sales for each item over all the days. Args: n: int - number of items m: int - number of days sales_records: list of lists - Each inner list contains n integers representing sales of each item for a day Returns: List of integers - total sales for each item over all the days # Initialize total sales for each item to 0 total_sales_per_item = [0] * n # Loop through each day\'s sales records for day_sales in sales_records: # Add each item\'s sales to the total sales for that item for i in range(n): total_sales_per_item[i] += day_sales[i] return total_sales_per_item"},{"question":"Our protagonist, Lek, is a budding chef who loves experimenting with new recipes. Today, he wants to determine the unique ways he can prepare a dish using specific ingredients. Can you help him find this out? You are given a list of N distinct ingredients and an integer M representing the number of ingredients required for a dish. Your task is to find the number of ways to choose M ingredients from the list of N ingredients, modulo 10^9+7. Input: You are given two integers N and M in the first line. The second line contains N space-separated integers representing the unique ingredient codes. Output: Output 1 integer: the number of ways to choose M ingredients from the list of N ingredients mod (10^9+7). Constraints: 2 ≤ N ≤ 1000 1 ≤ M ≤ N 1 ≤ ingredient codes ≤ 10^9 SAMPLE INPUT 5 3 1 2 3 4 5 SAMPLE OUTPUT 10 Explanation The result is 10. There are 10 ways to choose 3 ingredients out of a list of 5 distinct ingredients. For example: [1,2,3], [1,2,4], [1,2,5], [1,3,4], [1,3,5], [1,4,5], [2,3,4], [2,3,5], [2,4,5], [3,4,5]","solution":"MOD = 10**9 + 7 def factorial(n): result = 1 for i in range(2, n + 1): result = (result * i) % MOD return result def mod_inverse(n, mod): return pow(n, mod-2, mod) def combination(n, k): if k == 0 or k == n: return 1 numerator = factorial(n) denominator = (factorial(k) * factorial(n - k)) % MOD return (numerator * mod_inverse(denominator, MOD)) % MOD def number_of_ways_to_prepare_dish(N, M, ingredients): return combination(N, M) # Example ad-hoc test if __name__ == \\"__main__\\": N = 5 M = 3 ingredients = [1, 2, 3, 4, 5] print(number_of_ways_to_prepare_dish(N, M, ingredients)) # Output should be 10"},{"question":"You are given a string consisting of lowercase alphabetical characters. Write an algorithm that counts the number of vowels (a, e, i, o, u) in the string and returns this count. Your inputs: - A string, s. - s is provided, you have NO CONTROL over its value. Your expected output is a single integer representing the number of vowels in the string. Your task is to write an algorithm that processes the string and outputs the correct vowel count.","solution":"def count_vowels(s): Returns the number of vowels in the given string s. vowels = \'aeiou\' count = sum(1 for char in s if char in vowels) return count"},{"question":"Given a string, you need to determine if it is a valid palindrome, considering only alphanumeric characters and ignoring cases and spaces. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward (ignoring spaces, punctuation, and capitalization). For example, \\"A man, a plan, a canal: Panama\\" and \\"racecar\\" are valid palindromes, while \\"hello\\" and \\"Palindrome\\" are not. Your task is to write a function that checks whether the string is a valid palindrome. -----Input----- The input consists of a single line containing a string s (1 le |s| le 1000). -----Output----- Output a single line containing \\"YES\\" if the string is a valid palindrome, or \\"NO\\" otherwise. -----Examples----- Input \\"A man, a plan, a canal: Panama\\" Output YES Input \\"racecar\\" Output YES Input \\"hello\\" Output NO Input \\" \\" Output YES","solution":"def is_valid_palindrome(s): Determines if the given string is a valid palindrome, considering only alphanumeric characters and ignoring case. # Normalize the string: remove non-alphanumeric characters and convert to lower case normalized_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string is the same forwards and backwards return normalized_s == normalized_s[::-1] def check_palindrome(s): Outputs \'YES\' if the given string is a valid palindrome and \'NO\' otherwise. return \\"YES\\" if is_valid_palindrome(s) else \\"NO\\""},{"question":"Write a function that takes a string containing lowercase alphabets and returns a new string where each character has been replaced with the next character in the alphabet. The function should properly handle the case where \'z\' is encountered; it should wrap around to \'a\'. For example, ```python Inputs: \\"abc\\" -> \\"bcd\\" \\"xyz\\" -> \\"yza\\" \\"hello\\" -> \\"ifmmp\\" ```","solution":"def shift_string(s): Returns a new string where each character in the original string is replaced by the next character in the alphabet. \'z\' is wrapped around to \'a\'. return \'\'.join(chr((ord(char) - ord(\'a\') + 1) % 26 + ord(\'a\')) for char in s)"},{"question":"**Unique Elements Finder** Write a function called `uniqueElements()` that takes two lists of integers as input and returns a list containing elements that are unique to each list (i.e., elements that are not shared between the two lists). ```python uniqueElements([1, 2, 3, 4], [3, 4, 5, 6]) # should return [1, 2, 5, 6] uniqueElements([7, 8, 9], [9, 10, 11]) # should return [7, 8, 10, 11] uniqueElements([5, 5, 5], [5, 6, 7]) # should return [6, 7] ``` Note: - Each element should appear only once in the resulting list. - The order of elements in the resulting list does not matter, but each element should appear only once. - Both input lists are non-empty and contain only integers.","solution":"def uniqueElements(list1, list2): Returns a list of elements that are unique to each list. set1 = set(list1) set2 = set(list2) unique_to_list1 = set1 - set2 unique_to_list2 = set2 - set1 return list(unique_to_list1 | unique_to_list2)"},{"question":"A storage company has multiple warehouses located along a number line. The company needs to maximize efficiency by only dispatching inventory when strictly necessary. Each warehouse is capable of storing a specific amount of inventory, but not all warehouses need to be used. The company can choose any subset of warehouses to utilize. To ensure operational efficiency, the company wants to know the minimum possible maximum storage utilization across all selected warehouses. The maximum storage utilization is defined as the maximum amount of inventory stored in any warehouse in the chosen subset. The company is interested in exploring all possible subsets (except the empty set) and finding the minimum value of the maximum storage utilization across these subsets. Write a program to determine this minimal maximum storage utilization. Input The first line contains one integer n (1 ≤ n ≤ 3·10^5) denoting the number of warehouses. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 10^9) denoting the storage capacity of each warehouse. It is guaranteed that all si are distinct. Output Print a single integer — the minimum possible value of maximum storage utilization across all non-empty subsets. Examples Input 3 10 20 30 Output 10 Input 4 5 8 6 12 Output 5 Note In the first example, each warehouse will be considered individually as they all have unique capacities. Thus, the minimal maximum storage utilization is the smallest storage capacity, which is 10. In the second example, the subset with the minimum possible maximum storage utilization is the subset containing only the warehouse with the capacity of 5. Hence, the answer is 5.","solution":"def min_max_storage_utilization(n, storage_capacities): Determines the minimal maximum storage utilization across all non-empty subsets of warehouses. Parameters: n (int): Number of warehouses storage_capacities (list of int): Storage capacities of each warehouse Returns: int: The minimal possible value of maximum storage utilization # The minimal possible value of maximum storage utilization across all subsets return min(storage_capacities)"},{"question":"___ # Definition A **number** is called **_Happy Number_** if it leads to 1 after a sequence of steps wherein each step number is replaced by the sum of squares of its digits that is repeated. If we start with number 19, the sequence is as follows: 1² + 9² = 1 + 81 = 82 8² + 2² = 64 + 4 = 68 6² + 8² = 36 + 64 = 100 1² + 0² + 0² = 1 Therefore, 19 is a happy number. ___ # Task **_Given_** a **number** *determine if it is Happy or not*. ___ # Notes * The **_number_** passed to the function is **_positive_** * A number is considered **_Not Happy_** if it fails to reach 1 within 100 steps. ___ # Input >> Output Examples ``` isHappyNumber (19) -->> return \\"Happy\\" ``` **_Explanation_**: * The sequence from 19 as mentioned above eventually reaches 1, classifying it as a Happy Number. ___ ``` isHappyNumber (4) -->> return \\"Not Happy\\" ``` **_Explanation_**: * Starting from 4, the sequence is: 4² = 16 1² + 6² = 1 + 36 = 37 3² + 7² = 9 + 49 = 58 5² + 8² = 25 + 64 = 89 8² + 9² = 64 + 81 = 145 1² + 4² + 5² = 1 + 16 + 25 = 42 4² + 2² = 16 + 4 = 20 2² + 0² = 4 Here, it forms a loop and does not reach 1, hence it is not a Happy Number. ___ ``` isHappyNumber (23) -->> return \\"Happy\\" ``` **_Explanation_**: * Sequence from 23: 2² + 3² = 4 + 9 = 13 1² + 3² = 1 + 9 = 10 1² + 0² = 1 It reaches 1, classifying 23 as a Happy Number. ___ ``` isHappyNumber (2) -->> return \\"Not Happy\\" ``` **_Explanation_**: * The sequence from 2: 2² = 4 As shown in the earlier example, 4 is not a Happy Number as it generates a loop. ___ ``` isHappyNumber (1) -->> return \\"Happy\\" ``` **_Explanation_**: * The number 1 is trivially a Happy Number since it is already 1. ___","solution":"def is_happy_number(n): Determine if a number n is a happy number. def get_next(number): return sum(int(digit) ** 2 for digit in str(number)) seen = set() steps = 0 while n != 1 and steps < 100: if n in seen: return \\"Not Happy\\" seen.add(n) n = get_next(n) steps += 1 return \\"Happy\\" if n == 1 else \\"Not Happy\\""},{"question":"Background Alice loves arranging flowers in her garden. This year, she wants to plant flowers in a way that there is always one flower on each spot of a grid during the whole year. However, she also wants the flowers to be diverse, so she can only plant the same type of flower in consecutive spots after a certain number of days. Problem Alice has a garden represented by a 2D grid of size n by m. She has exactly k different types of flowers. Alice wants to fill the grid in such a way that no two consecutive grid cells contain the same type of flower on the first day. After the grid is filled initially, the flowers rotate through their types every t days. For example, if a flower spot starts with type 1, after t days, the flower in that spot will change to type 2, after another t days it will change to type 3, and so on, returning to type 1 after every k changes. Given the size of the grid (n, m), the number of flower types (k), and the rotation period t, your task is to compute the initial grid filled with flower types such that no two consecutive cells (top, bottom, left, right) have the same type of flower. Constraints The input satisfies the following conditions: * 1 ≤ n, m ≤ 100 * 2 ≤ k ≤ 100 * 1 ≤ t ≤ 100 Input The first line of the input contains three integers n, m, and k, separated by spaces. The second line contains one integer t. Output Output the initial n by m grid in which the flowers are arranged such that no consecutive cells contain the same type of flower. Each cell should have an integer between 1 and k. Output a grid of n rows and m columns, where each row is on a separate line, and the flower types within a row are separated by spaces. Example Input 4 3 3 1 Output 1 2 3 2 3 1 3 1 2 1 2 3 Input 3 3 4 2 Output 1 2 3 2 3 4 3 4 1","solution":"def generate_flower_grid(n, m, k, t): Generates an n by m grid filled with flower types such that no two consecutive cells contain the same type of flower. Args: n : int : number of rows m : int : number of columns k : int : number of flower types t : int : rotation period Returns: List[List[int]] : The initial n by m grid grid = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): # Calculate the flower type such that no adjacent flowers are the same grid[i][j] = ((i + j) % k) + 1 return grid"},{"question":"There are N servers connected by M bidirectional links in a data center. The i-th link connects Server A_i and Server B_i with a bandwidth of C_i gigabits per second (Gbps). The data center manager wants to find the shortest path from one server to another, measured by the number of hops (links) rather than the total bandwidth. Process the following Q queries: - For a given pair of servers (s_i, t_i), find the minimum number of hops needed to travel from Server s_i to Server t_i. If Server t_i is unreachable from Server s_i, print -1. -----Constraints----- - All values in input are integers. - 2 leq N leq 300 - 1 leq M leq frac{N(N-1)}{2} - 1 leq A_i, B_i leq N - A_i neq B_i - left(A_i, B_iright) neq left(A_j, B_jright) (if i neq j) - left(A_i, B_iright) neq left(B_j, A_jright) (if i neq j) - 1 leq C_i leq 10^9 - 1 leq Q leq Nleft(N-1right) - 1 leq s_i, t_i leq N - s_i neq t_i - left(s_i, t_iright) neq left(s_j, t_jright) (if i neq j) -----Input----- Input is given from Standard Input in the following format: N M A_1 B_1 C_1 : A_M B_M C_M Q s_1 t_1 : s_Q t_Q -----Output----- Print Q lines. The i-th line should contain the minimum number of hops needed to travel from Server s_i to Server t_i. If Server t_i is unreachable, the line should contain -1 instead. -----Sample Input----- 4 3 1 2 100 2 3 200 3 4 150 2 1 4 1 3 -----Sample Output----- 3 2 To travel from Server 1 to Server 4, we can use the path (1 -> 2 -> 3 -> 4), which involves 3 hops. To travel from Server 1 to Server 3, we can use the path (1 -> 2 -> 3), which involves 2 hops.","solution":"from collections import deque, defaultdict def find_minimum_hops(N, M, links, queries): # Create adjacency list for the graph graph = defaultdict(list) for A_i, B_i, C_i in links: graph[A_i].append(B_i) graph[B_i].append(A_i) # Function to find shortest path using BFS def bfs(source, target): if source == target: return 0 visited = set() queue = deque([(source, 0)]) # (current_node, current_hops) while queue: node, hops = queue.popleft() visited.add(node) for neighbor in graph[node]: if neighbor == target: return hops + 1 if neighbor not in visited: queue.append((neighbor, hops + 1)) visited.add(neighbor) return -1 results = [] for s_i, t_i in queries: results.append(bfs(s_i, t_i)) return results"},{"question":"Given an array of size N consisting of positive integers, you are required to find the length of the longest subarray that contains at most M distinct integers. INPUT The first line contains the integers N and M, representing the size of the array and the maximum number of distinct integers allowed in the subarray, respectively. The second line contains N space-separated integers representing the elements of the array. OUTPUT Print an integer representing the size of the longest subarray with at most M distinct integers. If no such subarray exists, print \\"0\\". CONSTRAINTS 1 ≤ N ≤ 300000 1 ≤ M ≤ N 1 ≤ array[i] ≤ 100000 SAMPLE INPUT 7 2 1 2 1 2 3 4 5 SAMPLE OUTPUT 4 Explanation The longest subarray with at most 2 distinct integers is [1, 2, 1, 2] which has a length of 4. Even though other subarrays like [2, 1, 2] or [1, 2, 1] also satisfy the condition, they are shorter in length.","solution":"def longest_subarray_with_m_distinct(N, M, array): Returns the length of the longest subarray with at most M distinct integers. from collections import defaultdict # Edge case: if N is 0 if N == 0: return 0 left = 0 max_length = 0 count = defaultdict(int) for right in range(N): count[array[right]] += 1 # If more than M distinct integers, move the left pointer to the right while len(count) > M: count[array[left]] -= 1 if count[array[left]] == 0: del count[array[left]] left += 1 # Update max_length max_length = max(max_length, right - left + 1) return max_length"},{"question":"Sandra loves collecting and organizing books. She has a large bookshelf with a length of L meters, and she wants to place all her books onto the shelf without any gaps between them. Sandra\'s books are either a meters or b meters in length. She wishes to find out if it\'s possible to fill the entire length of the shelf using only these two types of books. Write a program to help Sandra determine if she can fill her entire bookshelf with no gaps, using only books of length a or b meters. -----Input----- The input contains three real numbers 0<Lleq 1000, 0<aleq 1000, and 0<bleq 1000. -----Output----- Output a single line with “Perfect fit!” if Sandra can fill the length of the shelf exactly with the given books, “Can\'t fit perfectly!” otherwise. -----Examples----- Sample Input: 10.000000 3.000000 7.000000 Sample Output: Perfect fit! Sample Input: 10.000000 3.000000 6.000000 Sample Output: Can\'t fit perfectly!","solution":"def can_fill_shelf(L, a, b): Determines if the entire length of the shelf (L) can be completely filled using only books of length a and b. Args: L (float): The length of the shelf. a (float): The length of the first type of book. b (float): The length of the second type of book. Returns: str: \\"Perfect fit!\\" if the shelf can be completely filled, \\"Can\'t fit perfectly!\\" otherwise. # Edge case when lengths are zero (invalid case) if L <= 0 or a <= 0 or b <= 0: return \\"Can\'t fit perfectly!\\" # A way to handle approximate floating point comparison epsilon = 1e-9 for i in range(int(L // a) + 1): for j in range(int(L // b) + 1): if abs(i * a + j * b - L) < epsilon: return \\"Perfect fit!\\" return \\"Can\'t fit perfectly!\\""},{"question":"Write a function `score_string_similarity` that calculates the similarity score between two strings. The score is defined based on the number of matching character positions between the two strings. For each position, if the characters match, add 1 to the score. If one string is shorter than the other, the unmatched positions are ignored. For example: ```python def score_string_similarity(str1, str2): # Your code here print(score_string_similarity(\\"abc\\", \\"abd\\")) # Output: 2 (matches: a, b) print(score_string_similarity(\\"hello\\", \\"hxllo\\")) # Output: 4 (matches: h, l, l, o) print(score_string_similarity(\\"abcdef\\", \\"abc\\")) # Output: 3 (matches: a, b, c) print(score_string_similarity(\\"abcdef\\", \\"ghijkl\\")) # Output: 0 (no matches) print(score_string_similarity(\\"short\\", \\"longerstr\\")) # Output: 2 (matches: s, t) ``` As usual, your function/method should be pure, i.e., it should **not** mutatem the input strings.","solution":"def score_string_similarity(str1, str2): Calculate the similarity score between two strings based on matching character positions. score = 0 min_length = min(len(str1), len(str2)) for i in range(min_length): if str1[i] == str2[i]: score += 1 return score"},{"question":"You are given a road network represented by a graph with `n` nodes and `m` edges. Each node corresponds to a city, and each edge represents a bidirectional road connecting two cities with an integer length associated with it. Two cities can be connected directly by more than one road with different lengths. Your task is to find the shortest distance from the first city (city 1) to the last city (city `n`). If the city `n` cannot be reached from city 1, return -1. -----Input----- - The first line contains two integers `n` (2 ≤ n ≤ 10^5) and `m` (1 ≤ m ≤ 10^5) — the number of cities and the number of roads respectively. - The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), describing a road connecting cities `u` and `v` with length `w`. -----Output----- Output a single integer — the shortest distance from the first city (city 1) to the last city (city n). If there is no path from the first city to the last city, output -1. -----Examples----- Input 5 6 1 2 2 2 3 4 3 5 1 1 4 1 4 5 3 2 5 6 Output 4 Input 3 1 1 2 3 Output -1 -----Note----- In the first sample, the shortest path from city 1 to city 5 is 1 -> 4 -> 5 with a total length of 4. In the second sample, there is no path from city 1 to city 3.","solution":"import heapq def shortest_distance(n, m, roads): Returns the shortest distance from city 1 to city n. If city n cannot be reached from city 1, return -1. graph = [[] for _ in range(n+1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) INF = float(\'inf\') dist = [INF] * (n + 1) dist[1] = 0 priority_queue = [(0, 1)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) return dist[n] if dist[n] != INF else -1"},{"question":"You are developing a new text editor program that includes a feature to support auto-completions for frequently typed phrases. When a user starts typing a word, the system will suggest the most frequently used words or phrases that start with the typed prefix. Your task is to implement this feature. The editor stores a log of words or phrases that have been used, and each word or phrase has an associated frequency count indicating how often it has been used. -----Input----- The first line contains an integer N (1 leq N leq 10^5), the number of words or phrases in the log. The next N lines each contain a string s and an integer f separated by a space, where s is a word or phrase recorded in the log (1 leq |s| leq 100), and f (1 leq f leq 10^6) is the frequency of the word or phrase. The last line of the input contains a string prefix (1 leq |prefix| leq 100), which is the prefix typed by the user. -----Output----- Output up to three words or phrases that start with the given prefix, sorted by their frequency in descending order. If multiple words or phrases have the same frequency, they should be sorted lexicographically. If fewer than three words or phrases match the prefix, output all matching words or phrases. If no words or phrases match the prefix, output \\"No suggestions\\". You can assume that the words or phrases contain only lowercase English letters and spaces. -----Examples----- Sample Input 1: 5 hello 10 hi 5 how are you 3 howdy 7 house 8 ho Sample Output 1: house 8 howdy 7 how are you 3 Sample Input 2: 4 apple 15 application 10 apply 5 banana 12 app Sample Output 2: apple 15 application 10 apply 5 Sample Input 3: 3 world 4 word 5 ward 2 wo Sample Output 3: word 5 world 4 Sample Input 4: 2 machine learning 20 deep learning 25 ai Sample Output 4: No suggestions","solution":"def auto_complete(log, prefix): suggestions = [entry for entry in log if entry[0].startswith(prefix)] # Sort by frequency (descending), using lexicographical order for ties suggestions.sort(key=lambda x: (-x[1], x[0])) if not suggestions: return [\\"No suggestions\\"] return suggestions[:3] def prepare_log(lines): log = [] for line in lines: s, f = line.rsplit(\' \', 1) log.append((s, int(f))) return log"},{"question":"Given a list of integers, write a function that finds the pair of elements that have the smallest absolute difference between them and returns this pair as a list. If there are multiple pairs with the same smallest difference, return the first such pair found in the list. You can assume the list contains at least two elements. Function Signature: ```python def closest_pair(arr: List[int]) -> List[int]: pass ``` # Examples: ```python closest_pair([4, 1, 3, 2]) ``` Output: ```python [1, 2] ``` ```python closest_pair([10, 50, 22, 24, 21]) ``` Output: ```python [22, 21] ``` # Constraints: - You can assume the input will always be a list of integers containing at least two elements and all elements are distinct. - The order of the returned pair in the list should be the same as the order they appear in the original input list.","solution":"from typing import List def closest_pair(arr: List[int]) -> List[int]: arr_sorted = sorted(arr) min_diff = float(\'inf\') pair = [arr_sorted[0], arr_sorted[1]] for i in range(1, len(arr_sorted)): diff = abs(arr_sorted[i] - arr_sorted[i - 1]) if diff < min_diff: min_diff = diff pair = [arr_sorted[i - 1], arr_sorted[i]] # Ensure the order of the pair in the result is the same as in the input array first_idx = arr.index(pair[0]) second_idx = arr.index(pair[1]) if first_idx > second_idx: pair = [pair[1], pair[0]] return pair"},{"question":"Tom has a collection of unique rock samples, each identified by an uppercase letter from \'A\' to \'Z\'. He decided to create a special catalog of these samples, but he encounters a strange sorting rule: For each pair of distinct rocks in the collection, Tom needs to compare them in alphabetical order. If one rock precedes the other in alphabetical order, the latter rock must appear earlier in the sorted catalog. This rule results in the rocks being listed in reverse alphabetical order. Write a program that takes a given sequence of rocks and outputs them sorted according to Tom\'s special rule. Input: A single line of uppercase letters representing Tom\'s rock samples. The number of characters will be between 1 and 26, with no duplicate letters. Output: A single line of uppercase letters representing the sorted catalog. Example Input: CBDAFE Output: FEDCBA","solution":"def sort_rocks(rock_samples): Return the sequence of rock samples sorted according to Tom\'s special rule (reverse alphabetical order). Parameters: rock_samples (str): A string of uppercase letters representing unique rock samples. Returns: str: The sorted sequence in reverse alphabetical order. return \'\'.join(sorted(rock_samples, reverse=True))"},{"question":"In a forest, there are NN trees placed on a 2D plane at coordinates (X1,Y1)(X_1, Y_1), (X2,Y2)(X_2, Y_2), ...., (XN,YN) (X_N, Y_N). Each tree has a height denoted by HiH_i. A bird starts its flight from a certain tree and can only fly to an adjacent tree. It considers a tree as adjacent if it is directly North, South, East, or West of the current tree. The bird prefers trees with heights greater than or equal to its current tree. You need to determine the maximum height the bird can reach if it starts its flight from the tree at index SS. Indexing of trees starts from 1. -----Input:----- - First line will contain TT, number of test cases. Then TT test cases follow. - Each test case starts with an integer NN, the number of trees. - Next NN lines each contain three integers Xi X_i, Yi Y_i, and Hi H_i, denoting the coordinates and height of a tree. - The last line of each test case contains a single integer SS, the starting tree index. -----Output:----- - For each test case, print the maximum height the bird can reach starting from the tree at index SS. -----Constraints:----- - 1≤T≤1001 leq T leq 100 - 1≤N≤10001 leq N leq 1000 - −10^6≤Xi,Yi≤10^6-10^6 leq X_i, Y_i leq 10^6 - 1≤Hi≤10^61 leq H_i leq 10^6 - 1≤S≤N1 leq S leq N -----Sample Input:----- 2 4 0 0 10 0 1 20 1 0 15 1 1 25 1 3 3 3 5 4 3 6 5 3 2 2 -----Sample Output:----- 25 6","solution":"def get_maximum_height(trees, start_index): from collections import deque def is_adjacent(tree1, tree2): x1, y1, _ = tree1 x2, y2, _ = tree2 return (x1 == x2 and abs(y1 - y2) == 1) or (y1 == y2 and abs(x1 - x2) == 1) n = len(trees) start_tree = trees[start_index - 1] max_height = start_tree[2] visited = [False] * n queue = deque([start_index - 1]) while queue: current = queue.popleft() if visited[current]: continue visited[current] = True current_tree = trees[current] for i in range(n): if not visited[i] and is_adjacent(current_tree, trees[i]) and trees[i][2] >= current_tree[2]: queue.append(i) max_height = max(max_height, trees[i][2]) return max_height def max_height_from_each_test_case(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] trees = test_cases[i][1] S = test_cases[i][2] results.append(get_maximum_height(trees, S)) return results"},{"question":"A gardener wants to build a pyramid-shaped flower bed in his garden. The flower bed will be composed of layers of flowers, where each layer forms an upside-down triangle. The gardener will plant the flowers in a specific order. Each layer i (0-indexed) contains flowers numbered from `1` to `2^i`. The top layer is layer 0, and the bottom layer is layer n. For example, if n = 3, the flower bed will look like this: 1 1 2 1 1 2 3 2 1 1 2 3 4 3 2 1 Your task is to determine the way the flower bed will look like for a given n. Input The first line contains the single integer n (1 ≤ n ≤ 9). Output Print the flower bed for the given n. Each layer should start with 0, and contain numbers from 1 to 2^i, followed by a decrement to 1. Each number in a layer should be separated by exactly one space. Ensure the correct number of spaces before the first number in each layer. There should be no spaces after the last number at the end of each line. Examples Input 2 Output 1 1 2 1 1 2 3 2 1 Input 4 Output 1 1 2 1 1 2 3 2 1 1 2 3 4 3 2 1 1 2 3 4 5 4 3 2 1","solution":"def generate_flower_bed(n): flower_bed = [] for i in range(1, n + 1): layer = [] for j in range(1, i + 1): layer.append(j) for j in range(i - 1, 0, -1): layer.append(j) flower_bed.append(layer) return flower_bed def print_flower_bed(n): flower_bed = generate_flower_bed(n) max_layer_width = 2 * n - 1 for i in range(n): layer_str = \' \'.join(map(str, flower_bed[i])) padding_length = (max_layer_width - len(flower_bed[i])) // 2 print(\' \' * (2 * padding_length) + layer_str)"},{"question":"Given an array of integers and a target sum, determine if there are two numbers in the array that add up to the target sum. For example, if the array is `[2, 7, 11, 15]` and the target sum is `9`, then the output should be `True` because `2 + 7 = 9`. Example 1: Input: arr = [2, 7, 11, 15], target_sum = 9 Output: True Explanation: 2 + 7 = 9 Example 2: Input: arr = [1, 2, 3, 4, 5], target_sum = 10 Output: False Explanation: There are no two numbers that add up to 10 Your Task: You don\'t need to read or print anything. Your task is to complete the function `find_pair_with_sum()` which takes the list of integers `arr` and an integer `target_sum` as input parameters and returns a boolean value - `True` if there are two numbers in the array that add up to the target sum, and `False` otherwise. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= len(arr) <= 10^5 -10^6 <= arr[i] <= 10^6 -10^6 <= target_sum <= 10^6","solution":"def find_pair_with_sum(arr, target_sum): Returns True if there are two numbers in the array that add up to the target_sum, else False. seen = set() for num in arr: if target_sum - num in seen: return True seen.add(num) return False"},{"question":"Write a function that takes an integer `n` as input and returns a list of all prime numbers less than or equal to `n`. The function should be efficient and utilize the Sieve of Eratosthenes algorithm. **Note:** A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Examples ```python prime_numbers(10) => [2, 3, 5, 7] prime_numbers(20) => [2, 3, 5, 7, 11, 13, 17, 19] prime_numbers(1) => [] prime_numbers(2) => [2] prime_numbers(50) => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47] ``` Don\'t forget to rate this kata! Thanks :)","solution":"def prime_numbers(n): Returns a list of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False return [i for i, prime in enumerate(is_prime) if prime]"},{"question":"You are given a list of words. Your task is to find and return the longest word in the list that can be constructed by concatenating copies of shorter words also in the list. For example: ```python Given the list of words: [\\"cat\\", \\"dog\\", \\"catdog\\", \\"cats\\", \\"dogcatsdog\\"] The output should be: \\"dogcatsdog\\" ``` Further examples: ```python [\\"abcd\\", \\"abc\\", \\"def\\", \\"abcddef\\"] --> \\"abcddef\\" [\\"apple\\", \\"pie\\", \\"applepie\\"] --> \\"applepie\\" [\\"rat\\", \\"bat\\", \\"ratbatbat\\"] --> \\"ratbatbat\\" ``` Constraints: - The list of words may contain duplicates. - The words in the list will only contain lowercase English letters. - The length of the list will be at most 1000. - Each word in the list will have a length between 1 and 100. Write a function with the following signature: ```python def find_longest_concatenated_word(words: List[str]) -> str: ```","solution":"def find_longest_concatenated_word(words): Find the longest word in the list that can be constructed by concatenating copies of shorter words also in the list. words_set = set(words) memo = {} def is_concatenated(word): if word in memo: return memo[word] for i in range(1, len(word)): prefix = word[:i] suffix = word[i:] if prefix in words_set: if suffix in words_set or is_concatenated(suffix): memo[word] = True return True memo[word] = False return False longest_word = \\"\\" for word in words: if is_concatenated(word): if len(word) > len(longest_word) or (len(word) == len(longest_word) and word < longest_word): longest_word = word return longest_word"},{"question":"Given a string S that represents a compressed sequence, the goal is to decompress the sequence according to specified rules and return the decompressed sequence. The compressed sequence will contain digits representing the number of times a character repeats, followed by the character itself. Each digit and character combo will be separated by a single space. For example, \\"3a 2b 4c\\" should be expanded to \\"aaabbc\\". -----Input----- A single line containing the value S, the compressed sequence. String S will be non-empty and will contain a sequence of digit-character pairs, each separated by a single space. The digits will be positive integers less than or equal to 100, and the characters will always be lowercase alphabets. -----Output----- A single line containing the decompressed sequence. -----Examples----- Sample Input 1: 3a 2b 4c Sample Output 1: aaabbcccc Sample Input 2: 5x 1y 2z Sample Output 2: xxxxxyzz","solution":"def decompress_sequence(S): Decompresses a compressed sequence. Args: S (str): A string representing the compressed sequence. Returns: str: The decompressed sequence. decompressed = [] parts = S.split() for part in parts: num = \\"\\" char = \\"\\" for ch in part: if ch.isdigit(): num += ch else: char = ch break decompressed.append(char * int(num)) return \'\'.join(decompressed)"},{"question":"Task: You need to write a function **staircase** that generates a staircase pattern up to `n` steps. Each step should be represented by an underscore `_`, and the steps should align to the right with leading spaces. Pattern: (n)-1 leading spaces and 1 underscore (n-1)-1 leading spaces and 2 underscores (n-2)-1 leading spaces and 3 underscores .... 1 leading space and (n-1) underscores no leading spaces and n underscores *If the argument is not a positive integer, the function should return an empty string.* Examples: staircase(4): _ __ ___ ____ staircase(6): _ __ ___ ____ _____ ______ ```Note: There are no trailing spaces. The staircase should be exactly aligned to the right.``` ```Hint: Use `n` in strings to jump to the next line.```","solution":"def staircase(n): Generates a staircase pattern with `n` steps. Each step is represented by an underscore `_` and aligned to the right with leading spaces. Returns the staircase pattern as a string. if not isinstance(n, int) or n <= 0: return \\"\\" pattern = [] for i in range(1, n+1): line = \' \' * (n-i) + \'_\' * i pattern.append(line) return \'n\'.join(pattern)"},{"question":"You are given a list of integers representing server request times in milliseconds. Each integer indicates the time a request was received. Your task is to determine if the servers are overloaded. A server is considered overloaded if it receives too many requests in a short period. Given an integer threshold `k`, which represents the maximum number of requests that can be handled in a `1` second interval (1000 milliseconds), determine if any one-second window is overloaded. Input to the function will be a list of integers and an integer `k`. For example: ```python request_times = [100, 200, 300, 1500, 1600, 1700, 1800, 1900] k = 3 ``` The output should be `True` if the server is overloaded, and `False` otherwise. ```python is_overloaded([100, 200, 300, 1500, 1600, 1700, 1800, 1900], 3) # return False is_overloaded([100, 200, 300, 400, 500, 600, 700, 800], 3) # return True ```","solution":"def is_overloaded(request_times, k): Determines if the servers are overloaded given a list of request times and a threshold `k`. Parameters: - request_times (list): List of integers representing request times in milliseconds. - k (int): Maximum number of requests that can be handled in a 1 second (1000 milliseconds) interval. Returns: - bool: True if any one-second window is overloaded, otherwise False. # Edge case where there are no request times if not request_times: return False # Sort the request times to facilitate sliding window check request_times.sort() n = len(request_times) for i in range(n): # Find the end of the current 1-second window j = i while j < n and request_times[j] < request_times[i] + 1000: j += 1 # If the number of requests in this window exceeds the threshold if j - i > k: return True return False"},{"question":"You are given two integers, N and M, representing the number of rows and columns in a grid. Your task is to determine the positions of all cells in the grid that are equidistant from all edges of the grid. A cell (i, j) is equidistant from all edges if and only if: - The distance from the cell to the top edge (i) is equal to the distance from the cell to the bottom edge (N-1-i). - The distance from the cell to the left edge (j) is equal to the distance from the cell to the right edge (M-1-j). Input: The first line contains an integer T, the number of test cases. For each test case, there is one line containing two integers N and M, the number of rows and columns, respectively. Output: For each test case, output the positions of all cells that are equidistant from all edges in the format \\"(row, column)\\". If no such cells exist, output \\"No cells\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 Sample Input: 2 3 3 4 5 Sample Output: (1, 1) (1, 2) (1, 3) (2, 2) (2, 3) (3, 2) (3, 3) Explanation: - For the first test case with a 3x3 grid, only the cell (1,1) is equidistant from all edges. - For the second test case with a 4x5 grid, the cells (1,2), (1,3), (2,2), (2,3), (3,2), and (3,3) meet the criteria.","solution":"def equidistant_cells(T, test_cases): results = [] for case in test_cases: N, M = case equidistant_positions = [] for i in range(N): for j in range(M): if i == N-1-i and j == M-1-j: equidistant_positions.append((i, j)) if equidistant_positions: results.append(equidistant_positions) else: results.append(\\"No cells\\") return results"},{"question":"In a faraway land, there is a famous wizard named Merlyn who is known for his extraordinary abilities to solve complex problems. One day, Merlyn decided to challenge his students with an interesting problem. The problem involves a magical box containing a sequence of positive integers. The students must write a program to determine the maximum possible sum of a contiguous subarray. A contiguous subarray is a subarray that appears in the original array in the same sequence. For example, in the array [1, 2, 3, 4], subarrays like [2, 3] and [4] are contiguous, while [1, 3] is not. Merlyn\'s students must solve this problem for multiple test cases. Can you help them by writing a function to determine the maximum possible sum of a contiguous subarray? -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of elements in the array. - The second line contains N space-separated positive integers representing the elements of the array. -----Output----- For each test case, print a single line containing one integer — the maximum possible sum of a contiguous subarray. -----Constraints----- - 1 le T le 1,000 - 1 le N le 100 - 1 le text{arr}[i] le 1,000 for each valid i -----Example Input----- 2 4 1 2 3 4 5 5 3 2 6 7 -----Example Output----- 10 23 -----Explanation----- Example case 1: The original array is [1, 2, 3, 4]. The maximum sum of a contiguous subarray is 10, which corresponds to the subarray [1, 2, 3, 4]. Example case 2: The original array is [5, 3, 2, 6, 7]. The maximum sum of a contiguous subarray is 23, which corresponds to the subarray [5, 3, 2, 6, 7].","solution":"def max_subarray_sum(arr): Returns the maximum possible sum of a contiguous subarray within the given array. max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(max_subarray_sum(arr)) return results"},{"question":"Problem You are given a sequence of N integers, A = [a_1, a_2, ..., a_N], and M queries. Each query is of one of the following types: 1. Update the value at index i to x: `1 i x` 2. Compute the sum of elements from index l to r: `2 l r` 3. Compute the product of elements from index l to r: `3 l r` Write a program to process the queries and return the results for all sum and product queries. **Constraints:** - 1 leq N leq 10^5 - 1 leq M leq 10^5 - 1 leq a_i leq 10^3 - 1 leq x leq 10^3 - 1 leq i, l, r leq N - All integers in the input are positive. **Input Format:** The first line contains the integer N - the number of elements in the sequence. The second line contains N space-separated integers - initial values of the sequence A. The third line contains the integer M - the number of queries. The next M lines contain one of the following queries: - `1 i x`: Update the i^{th} element of the sequence to x - `2 l r`: Compute the sum of elements from index l to r - `3 l r`: Compute the product of elements from index l to r **Output Format:** For each sum (query type 2) and product (query type 3) query, print the result in a new line. **Example:** _Input:_ ``` 5 1 2 3 4 5 6 2 1 3 3 2 4 1 3 10 2 1 3 3 2 4 2 1 5 ``` _Output:_ ``` 6 24 13 80 21 ``` **Explanation:** 1. For query `2 1 3`, the sum of elements from index 1 to 3 is 1 + 2 + 3 = 6 2. For query `3 2 4`, the product of elements from index 2 to 4 is 2 * 3 * 4 = 24 3. For query `1 3 10`, the sequence is updated to `[1, 2, 10, 4, 5]` 4. For query `2 1 3`, the sum of elements from index 1 to 3 is 1 + 2 + 10 = 13 5. For query `3 2 4`, the product of elements from index 2 to 4 is 2 * 10 * 4 = 80 6. For query `2 1 5`, the sum of elements from index 1 to 5 is 1 + 2 + 10 + 4 + 5 = 22","solution":"def process_queries(sequence, queries): Process a list of queries on a sequence of integers. Parameters: sequence (list): List of integers representing the sequence. queries (list): List of queries where each query is represented as a tuple. Returns: list: Results of the sum and product queries. results = [] for query in queries: if query[0] == 1: # Update the value at index i to x i, x = query[1], query[2] sequence[i - 1] = x elif query[0] == 2: # Compute the sum of elements from index l to r l, r = query[1], query[2] sum_result = sum(sequence[l - 1:r]) results.append(sum_result) elif query[0] == 3: # Compute the product of elements from index l to r l, r = query[1], query[2] product_result = 1 for i in range(l - 1, r): product_result *= sequence[i] results.append(product_result) return results"},{"question":"You are given a list of integers, and your task is to modify the list such that every integer appears only once, in the same order as their first appearance in the input list. -----Input----- The input consists of a single line containing space-separated integers. Each integer is within the range of ([-10^5, 10^5]). -----Output----- Output the modified list of integers where all duplicates are removed, preserving the order of their first appearance in the input list. Each integer should be separated by a single space. -----Examples----- Sample Input: 4 5 6 5 4 7 8 8 4 5 9 Sample Output: 4 5 6 7 8 9","solution":"def remove_duplicates(lst): Removes duplicates from the list while preserving the order of their first appearance. seen = set() result = [] for number in lst: if number not in seen: seen.add(number) result.append(number) return result def process_input(input_string): Converts input string to list of integers, processes it to remove duplicates, and returns the result as a space-separated string of integers. lst = list(map(int, input_string.split())) unique_lst = remove_duplicates(lst) return \' \'.join(map(str, unique_lst))"},{"question":"Given a positive integer N, find the product of digits in the factorial of N. Example 1: Input: N = 5 Output: 120 Explanation: Factorial of 5 is 120. Product of its digits is 1 * 2 * 0 = 0 Example 2: Input: N = 6 Output: 720 Explanation: Factorial of 6 is 720. Product of its digits is 7 * 2 * 0 = 0 Your Task: You don\'t need to read input or print anything. Your task is to complete the function productOfDigitsInFactorial() which takes an integer N as an input parameter and returns the product of the digits of its factorial. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 100","solution":"import math def productOfDigitsInFactorial(N): Returns the product of the digits of the factorial of N. factorial = math.factorial(N) product = 1 # Calculate the product of digits of the factorial while factorial > 0: digit = factorial % 10 product *= digit factorial //= 10 return product"},{"question":"Given an undirected graph with n nodes and m edges, perform a sequence of graph operations as described below. Each node is identified by an integer from 0 to n-1. Operations: - `addEdge(u, v)`: Adds an edge between node u and node v. - `removeEdge(u, v)`: Removes the edge between node u and node v. It is guaranteed that the edge (u, v) exists before this operation. - `neighbors(u)`: Print all the neighbors of node u in ascending order. Initially, the graph has no edges. Constraints: - 1 leq n leq 100,000 - 0 leq u, v < n - 1 leq q leq 200,000 Input: The input is given in the following format: ``` n m query_1 query_2 : query_q ``` Each query query_i is given by: - `0 u v` to add an edge (u, v) - `1 u v` to remove the edge (u, v) - `2 u` to print all neighbors of u in ascending order Output: For each `neighbors` operation, print the neighbors of node u in ascending order, each on a separate line. Example: Input: ``` 5 5 0 0 1 0 0 2 0 1 3 0 3 4 2 0 1 0 2 2 0 ``` Output: ``` 1 2 1 ```","solution":"from collections import defaultdict import sys class Graph: def __init__(self, n): self.graph = defaultdict(set) def addEdge(self, u, v): self.graph[u].add(v) self.graph[v].add(u) def removeEdge(self, u, v): self.graph[u].remove(v) self.graph[v].remove(u) def neighbors(self, u): return sorted(self.graph[u]) def process_queries(n, queries): graph = Graph(n) outputs = [] for query in queries: parts = query.split() op = int(parts[0]) if op == 0: u = int(parts[1]) v = int(parts[2]) graph.addEdge(u, v) elif op == 1: u = int(parts[1]) v = int(parts[2]) graph.removeEdge(u, v) elif op == 2: u = int(parts[1]) outputs.append(graph.neighbors(u)) return outputs # You would use process_queries like this: # n = 5 # queries = [\\"0 0 1\\", \\"0 0 2\\", \\"0 1 3\\", \\"0 3 4\\", \\"2 0\\", \\"1 0 2\\", \\"2 0\\"] # print(process_queries(n, queries))"},{"question":"A prestigious marathon takes place in a bustling city, and the winner is the runner who finishes first. Your task is to create a program that determines the winner based on race completion times. Write a program that reads a list of participants and their respective completion times, and outputs the participant number of the winner and their completion time. If there are multiple winners (i.e., multiple participants with the same fastest completion time), output the participant with the lowest participant number. Input The input is given in the following format: n p1 t1 p2 t2 :: pn tn n (1 ≤ n ≤ 50) represents the number of participants, and pi represents the participant number. Participant numbers are distinct integers between 1 and n. ti (1 ≤ ti ≤ 500) indicates the time taken by participant pi to complete the marathon in minutes. Output Output the winner\'s participant number and their completion time on one line, separated by a space. Example Input 5 3 142 1 145 4 142 2 150 5 147 Output 3 142","solution":"def find_winner(participants): Determines the winner of the marathon based on the completion times. Args: participants (list of tuples): A list where each tuple contains a participant number and their completion time. Returns: tuple: The participant number and their completion time of the winner. # Sort participants based on time, then by participant number in case of tie sorted_participants = sorted(participants, key=lambda x: (x[1], x[0])) # The first element in the sorted list is the winner winner = sorted_participants[0] return winner"},{"question":"A cargo company needs a system to monitor the weight of goods being transported on a daily basis. The company wants to ensure that none of their trucks are overloaded beyond a specified weight limit on any day. Your job is to write a program that will read the daily weights of goods transported in each truck and determine if any truck exceeded the weight limit. If the weight limit is exceeded on any day, you should also calculate the total excess weight for that day and output the details. -----INPUT----- The first line of input contains an integer T denoting the number of test cases. T test cases follow. The first line of each test case contains an integer N denoting the number of trucks transporting goods on that day, and an integer W denoting the weight limit for each truck. The next line contains N spaced integers representing the weights of goods transported by each truck. -----OUTPUT----- For each test case, output \\"NO VIOLATION\\" if no truck exceeded the weight limit. Otherwise, print \\"VIOLATION\\" followed by the total excess weight for that day. -----CONSTRAINTS----- 1 <= T <= 20 1 <= N <= 100 1 <= W <= 1000 1 <= Weight of goods <= 1500 -----EXAMPLE----- Input: 2 3 1000 800 1200 950 4 500 450 600 700 500 Output: VIOLATION 200 VIOLATION 300","solution":"def monitor_truck_weights(test_cases): results = [] for test in test_cases: N, W = test[0] weights = test[1] excess_weight = 0 violation_found = False for weight in weights: if weight > W: excess_weight += (weight - W) violation_found = True if violation_found: results.append(f\\"VIOLATION {excess_weight}\\") else: results.append(\\"NO VIOLATION\\") return results def parse_input(raw_input): lines = raw_input.splitlines() T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N, W = map(int, lines[idx].split()) weights = list(map(int, lines[idx + 1].split())) test_cases.append(((N, W), weights)) idx += 2 return test_cases"},{"question":"Chef has an array A of N integers and wants to play a game with it. In this game, Chef considers all subarrays of length K and takes the product of elements in each subarray. If a product appears more than once, Chef writes that product down on a piece of paper. Chef is tired of writing, so he asks for your help. You need to modify the array in such a way that Chef will only write one product on his paper, i.e., all subarrays of length K should have distinct products. In each modification, you can choose any index i and replace A_{i} with any integer from 1 to 10^5. You need to find the minimum number of modifications required. ------ Input ------ The first line contains an integer T, the number of test cases. Each test case contains two lines of input. The first line contains two space-separated integers N and K. The second line contains N space-separated integers A_1, A_2, ldots, A_N. ------ Output ------ For each test case, output the answer in a single line. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^{5} 1 ≤ K ≤ N 1 ≤ A_{i} ≤ 10^{5} The sum of N over all test cases does not exceed 5 cdot 10^5. ----- Sample Input ------ 2 4 2 1 2 3 4 3 1 7 7 7 ----- Sample Output ------ 0 2 ----- Explanation ------ Test Case 1: K=2 and the products of the subarrays are [2, 6, 12]. All products are distinct, so no modifications are needed. Test Case 2: K=1 and the subarrays of length 1 are [7], [7], and [7]. To make all these products distinct, we need to change two elements, for example, changing the 2^{nd} and 3^{rd} elements to 8 and 9 respectively to get subarrays [7], [8], and [9].","solution":"def min_modifications(N, K, A): # Generate product of each subarray of length K product_counts = {} mods = 0 for start in range(N - K + 1): product = 1 for k in range(K): product *= A[start + k] if product in product_counts: product_counts[product] += 1 else: product_counts[product] = 1 # All products should be distinct, count modifications needed for key in product_counts: if product_counts[key] > 1: mods += product_counts[key] - 1 return mods def process_cases(T, cases): results = [] for case in cases: N, K, A = case[\'N\'], case[\'K\'], case[\'A\'] results.append(min_modifications(N, K, A)) return results"},{"question":"You are given a grid of size NxM where each cell contains a positive integer representing the initial food in that cell. You are a mouse and you start in the top-left corner of the grid. Each move, you can only go to the right or down, and you consume all the food in the cell you move to. You want to reach the bottom-right corner of the grid in such a way that you consume the maximum total food possible. Write a function that takes a 2D list representing the grid and returns the maximum total food you can consume by the time you reach the bottom-right corner. -----Input----- - The first line contains two integers N and M (1 ≤ N, M ≤ 1000) — the number of rows and columns in the grid respectively. - Each of the next N lines contains M integers, representing the grid. Each integer is between 1 and 1000 (inclusive), denoting the initial food in that cell. -----Output----- - Output one integer — the maximum total food you can consume from the top-left to the bottom-right corner of the grid. -----Examples----- Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Input 2 2 1 2 3 4 Output 8 -----Note----- In the first test case, you can consume maximum food with the path (1 -> 3 -> 5 -> 2 -> 1), which gives a total food count of 12. In the second test case, the optimal path is (1 -> 2 -> 4), giving a total of 8.","solution":"def max_food(grid): Calculate the max food that can be consumed following the described rules. :param grid: List[List[int]], a 2D list representing the grid. :return: int, the maximum total food that can be consumed. if not grid or not grid[0]: return 0 N = len(grid) M = len(grid[0]) # Create a dp array to store the maximum food collected up to each cell dp = [[0] * M for _ in range(N)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, M): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, N): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right corner contains the answer return dp[N - 1][M - 1]"},{"question":"You are given an array of n integers and a target sum k. Determine whether there exists a pair of elements in the array such that their sum is equal to the given target sum k. Input The first line contains the only integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_i (−10^9 ≤ a_i ≤ 10^9) — elements of the array. The last line contains the integer k (−10^9 ≤ k ≤ 10^9) — the target sum. Output Print \\"YES\\" if there is a pair of elements in the array whose sum is equal to k. Otherwise, print \\"NO\\". Examples Input 5 1 4 45 6 10 16 Output YES Input 4 1 2 4 3 8 Output NO","solution":"def has_pair_with_sum(arr, n, k): Determines if there exists a pair of elements in the array whose sum is equal to the given target sum k. Args: arr: List of integers n: Integer, number of elements in the array k: Integer, target sum Returns: \\"YES\\" if a pair exists, otherwise \\"NO\\" seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Write a function that takes a dictionary as input where the keys are strings and the values are integers. The function should return a new dictionary where each key is the string from the original dictionary reversed, and the value is the product of all the integers in the original dictionary except for the integer corresponding to that key. For example, given the dictionary: ```python input_dict = { \'apple\': 2, \'banana\': 3, \'cherry\': 4 } ``` The function should return: ```python { \'elppa\': 12, # 3 * 4 \'ananab\': 8, # 2 * 4 \'yrrehc\': 6 # 2 * 3 } ``` If the original dictionary contains only one key-value pair, the value in the resulting dictionary should be 1. For example: ```python input_dict = { \'single\': 5 } ``` The function should return: ```python { \'elgnis\': 1 } ``` Handle edge cases where the input dictionary is empty by returning an empty dictionary.","solution":"def transform_dictionary(input_dict): Transforms the input dictionary into a new dictionary where each key is the string from the original dictionary reversed, and the value is the product of all the integers in the original dictionary except for the integer corresponding to that key. if not input_dict: return {} # Calculate the product of all values in the dictionary total_product = 1 for value in input_dict.values(): total_product *= value # Generate the new dictionary new_dict = {} for key, value in input_dict.items(): new_key = key[::-1] if len(input_dict) > 1: new_value = total_product // value else: new_value = 1 new_dict[new_key] = new_value return new_dict"},{"question":"# **[Ice Cream Shop](/collections/ice_cream_shop)** **Ice Cream Shop** is a small business that offers a variety of ice cream flavors with different toppings. The shop owner wants to know different ways to customize a customer\'s order given a set of available flavors and toppings. At the shop, there are N different ice cream flavors and M different toppings. A customer can choose one flavor and any combination of toppings (including no toppings at all). For example, if there are 3 flavors (Vanilla, Chocolate, Strawberry) and 2 toppings (Sprinkles, Chocolate Chips), a customer can place orders like: - Vanilla - Vanilla with Sprinkles - Vanilla with Chocolate Chips - Vanilla with both Sprinkles and Chocolate Chips - Chocolate - Chocolate with Sprinkles - and so on... Now, the shop owner wants to calculate the total number of possible orders that a customer can place. # **Task** Write a function that calculates the total number of possible ice cream orders that a customer can place given the number of flavors and toppings. - **Input** - An integer `N` representing the number of ice cream flavors. - An integer `M` representing the number of toppings. - **Output** - An integer representing the total number of possible ice cream orders. # **Examples** ``` number_of_orders(3, 2) => 12 (For each of the 3 flavors, there are 4 combinations of toppings, resulting in 3 * 4 = 12 orders) number_of_orders(4, 3) => 32 (For each of the 4 flavors, there are 8 combinations of toppings, resulting in 4 * 8 = 32 orders) number_of_orders(5, 1) => 10 (For each of the 5 flavors, there are 2 combinations of toppings, resulting in 5 * 2 = 10 orders) ``` # **Function Signature** ```python def number_of_orders(N: int, M: int) -> int: pass ``` Write a function `number_of_orders` that takes in two integers, `N` and `M` as input and returns an integer representing the total number of possible ice cream orders.","solution":"def number_of_orders(N: int, M: int) -> int: Returns the total number of possible ice cream orders given N flavors and M toppings. # Each flavor has 2^M possible topping combinations (including no topping) combinations_per_flavor = 2 ** M # Total orders would be number of flavors times combinations per flavor total_orders = N * combinations_per_flavor return total_orders"},{"question":"In a popular social network, you are developing a new feature to help users find influencers based on their social connections. Every user of the network has a unique ID and can follow multiple other users, forming a directed graph of connections. An influencer within this network is defined as a user who is followed by the largest number of distinct users. If there is a tie (multiple users are followed by the same maximum number of users), the influencer with the smallest user ID is chosen. Given the network represented by connections between users, write a program to determine the user ID of the influencer. Input: - The first line of input contains an integer `n` (2 ≤ n ≤ 1000) representing the number of users. - The second line contains an integer `m` (1 ≤ m ≤ 10000) representing the number of follow connections. - The next `m` lines contain pairs of integers `a` and `b` (1 ≤ a, b ≤ n), indicating that user `a` follows user `b`. Output: - Print the user ID of the influencer. Examples Input: 5 4 1 3 2 3 4 3 5 2 Output: 3 Input: 4 6 1 2 1 3 2 3 2 4 3 4 4 1 Output: 3 Explanation of Examples: In the first example, user `3` is followed by users `1`, `2`, and `4`, making `3` the influencer as they have the highest number of followers. In the second example, user `3` and user `4` are both followed by 2 users, but since `3` has the smallest ID among them, `3` is chosen as the influencer.","solution":"def find_influencer(n, m, connections): Determines the user ID of the influencer based on the follow connections. :param n: Number of users in the network. :param m: Number of follow connections. :param connections: List of tuples representing the follow connections. :return: User ID of the influencer. from collections import defaultdict followers_count = defaultdict(int) for a, b in connections: followers_count[b] += 1 max_followers = -1 influencer_id = float(\'inf\') for user_id, count in followers_count.items(): if count > max_followers or (count == max_followers and user_id < influencer_id): max_followers = count influencer_id = user_id return influencer_id"},{"question":"Alice is playing a game with a sequence of integers. In this game, she can perform the following operations: 1. Choose any subsequence of the sequence, remove it, and append the sum of the removed elements to the end of the sequence. 2. Stop the game at any point, and calculate the score of the sequence as the sum of all remaining elements. Alice wants to maximize her score. You need to help Alice determine the maximum score she can achieve by performing a series of operations as described above. Input: The first line contains an integer n (1 ≤ n ≤ 100,000), the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000), representing the initial sequence. Output: Print the maximum score Alice can achieve by performing the operations. Examples: Input: 5 1 2 3 4 5 Output: 15 Input: 3 10 20 30 Output: 60 Note: In the first example, Alice can achieve the maximum score by simply not performing any operations and summing all the elements, resulting in a score of 1 + 2 + 3 + 4 + 5 = 15. In the second example, Alice can also achieve the maximum score by summing all the elements directly, resulting in a score of 10 + 20 + 30 = 60.","solution":"def maximize_score(n, sequence): Returns the maximum score Alice can achieve by performing the operations. # The maximum score Alice can achieve is simply the sum of all the elements in the sequence return sum(sequence)"},{"question":"Ravi is organizing a treasure hunt game and has placed several clues in a linear path. Each clue is either good or bad, and the participants can only progress if they find a path consisting of good clues. The challenge is to determine the longest sequence of consecutive good clues in the path. Given the information about the clues, write a program to find the length of the longest segment of consecutive good clues. Input Format The first line contains an integer, n, representing the number of clues in the path. The second line contains n space-separated integers where each integer is either 1 (representing a good clue) or 0 (representing a bad clue). Constraints 1 leq n leq 10^5 Output Format On a single line, print an integer denoting the length of the longest segment of consecutive good clues. Sample Input 0 10 1 0 1 1 0 1 1 1 0 1 Sample Output 0 3 Sample Input 1 6 0 0 0 0 0 0 Sample Output 1 0 Explanation Sample 0 Among the given clues, the longest sequence of consecutive good clues is of length 3: [1, 1, 1] from the 6th to the 8th clue. Sample 1 As all the clues are bad (0), there is no segment of consecutive good clues, so the output is 0.","solution":"def longest_good_clues_segment(n, clues): Returns the length of the longest consecutive segment of good clues. Parameters: n (int): The number of clues. clues (list of int): A list of integers where each integer is either 1 (good) or 0 (bad). Returns: int: The length of the longest segment of consecutive good clues. max_length = 0 current_length = 0 for clue in clues: if clue == 1: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"Given a large integer N, compute the sum of its digits. If the sum is greater than 9, compute the sum of the resulting digits. Repeat this process until a single digit is obtained and print that single digit. -----Constraints----- - 0 leq N leq 10^{100} -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the final single digit. -----Sample Input----- 9876543210 -----Sample Output----- 9 Explanation: 9876543210 -> 45 (sum of digits) 45 -> 9 (sum of digits again) Final single digit is 9","solution":"def single_digit_sum(N): Returns the single digit sum of the digits of a large integer N. while len(N) > 1: N = str(sum(int(digit) for digit in N)) return int(N)"},{"question":"You are given an array `A` of size `n`. You need to answer `q` queries. Each query consists of an integer `x`, and you need to answer the smallest range `[l, r]` where `A[l] + A[l+1] + ... + A[r]` is exactly equal to `x`. If there are multiple solutions, return the one with the smallest `l`. If no such range exists, return `-1`. -----Input----- The first line contains two integers `n` and `q` (1 leq n, q leq 200000) — the size of the array and the number of queries. The second line contains `n` integers A_1, A_2, ldots, A_n (-10^9 leq A_i leq 10^9) — the elements of the array. The next `q` lines contain one integer `x` (-10^{18} leq x leq 10^{18}) — the target sum for each query. -----Output----- For each query, print the smallest range `[l, r]` (1-based index) where the sum of elements is exactly `x`, or `-1` if no such range exists. -----Example----- Input: 5 3 1 -1 2 3 -1 5 4 1 Output: 1 4 2 5 2 2 -----Note----- - In the first query, the sum of the range `[1, 4]` is `1 + (-1) + 2 + 3 = 5`. - In the second query, the sum of the range `[2, 5]` is `-1 + 2 + 3 + (-1) = 3`. - In the third query, the sum of the range `[2, 2]` is `-1` and in no other ranges the sum of an element subset equals to `1`.","solution":"def find_smallest_range(A, queries): results = [] for x in queries: found = False for l in range(len(A)): for r in range(l, len(A)): if sum(A[l:r+1]) == x: results.append((l + 1, r + 1)) found = True break if found: break if not found: results.append(-1) return results"},{"question":"Aarav is an esteemed mathematician in the kingdom of Mathland. To protect the kingdom from invaders, he proposed a safeguard mechanism that uses prime numbers. As a result, the king has charged him with a special task to encrypt messages using prime numbers. Aarav has to arrange N integer numbers in such a way that all prime numbers must come before all the non-prime numbers, and within each group (prime and non-prime), the numbers must be sorted in descending order. You are required to assist Aarav by implementing an algorithm that takes N integers and returns a list sorted according to the given rules. -----Input:----- - First line contains N - (number of integers). - The second line contains N integers separated by space. -----Output:----- - A sequence of N integers sorted according to the given rules. -----Constraints----- - 1 leq N leq 10^4 - 1 leq A_i leq 10^6 -----Sample Input:----- 10 10 29 3 20 17 5 18 2 11 19 -----Sample Output:----- 29 19 17 11 5 3 2 20 18 10 -----EXPLANATION:----- In the given input: - Primes: 29, 3, 17, 5, 2, 11, 19 - Non-primes: 10, 20, 18 After sorting primes in descending order, we get 29, 19, 17, 11, 5, 3, 2. After sorting non-primes in descending order, we get 20, 18, 10. Combining them gives the desired output.","solution":"def is_prime(num): if num < 2: return False if num == 2: return True if num % 2 == 0: return False p = 3 while p * p <= num: if num % p == 0: return False p += 2 return True def prime_nonprime_sort(numbers): primes = [num for num in numbers if is_prime(num)] non_primes = [num for num in numbers if not is_prime(num)] primes.sort(reverse=True) non_primes.sort(reverse=True) return primes + non_primes # Example usage N = 10 numbers = [10, 29, 3, 20, 17, 5, 18, 2, 11, 19] print(prime_nonprime_sort(numbers)) # Output should be [29, 19, 17, 11, 5, 3, 2, 20, 18, 10]"},{"question":"The **Palindromic Path** Challenge --Palindrome Road -- story Sarah resides in a city where streets are arranged in a perfect grid. She loves exploring different routes from her home at the top-left corner to her favorite coffee shop at the bottom-right corner of the grid. Being a palindrome enthusiast, Sarah wants to find routes such that the sequence of step directions (either moving right or down) forms a palindrome. Can you help Sarah find the number of palindromic paths in an m x n grid? Your task is to create a program that counts the number of unique paths from the start to the end where the steps spell a palindromic sequence. problem You are given two integers m and n representing the dimensions of the grid. Calculate the number of distinct palindromic paths from the top-left corner (1,1) to the bottom-right corner (m,n). Steps are defined as: - \'R\' for moving right. - \'D\' for moving down. A palindromic path is a path where the sequence of steps is the same forwards and backwards. Input format The input is given in the following format: m n The first line contains two integers, m and n. Constraint * 1 <= m, n <= 15 Output format Output the number of unique palindromic paths in a single line. Input example 1 2 2 Output example 1 2 Input example 2 3 3 Output example 2 6 Example Input 3 3 Output 6","solution":"def count_palindromic_paths(m, n): # Total steps we need to take to reach from (1,1) to (m,n) steps = m + n - 2 # If the step count is odd, there can\'t be any palindromic paths if steps % 2 != 0: return 0 # Initialize a 3D dp array dp = [[[0 for _ in range(m)] for _ in range(n)] for _ in range(steps // 2 + 1)] # Base case: for paths of length 0, only the starting point is valid for i in range(m): for j in range(n): dp[0][i][j] = (i == 0 and j == 0) # Fill the dp table by counting the valid moves for each half-length for l in range(1, steps // 2 + 1): for i in range(m): for j in range(n): if i > 0: dp[l][i][j] += dp[l - 1][i - 1][j] if j > 0: dp[l][i][j] += dp[l - 1][i][j - 1] # Count palindromic paths count = 0 half_steps = steps // 2 for i in range(m): for j in range(n): if i + j == half_steps: count += dp[half_steps][i][j] * dp[half_steps][m - 1 - i][n - 1 - j] return count"},{"question":"You are given a binary string B of length N. You need to perform the following operation an arbitrary number of times (possibly zero) to make all characters in the string equal: - Choose a contiguous substring of B which consists entirely of the character \'0\', and flip all \'0\'s in that substring to \'1\'s. Determine the minimum number of operations required to make all characters in the string equal. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains a binary string B of length N. -----Output----- For each test case, print a single line containing one integer ― the minimum number of operations required. -----Constraints----- - 1 le T le 1,000 - 1 le N le 10^5 - B consists of only \'0\'s and \'1\'s. - the sum of N over all test cases does not exceed 10^6 -----Example Input----- 2 7 1000001 5 11111 -----Example Output----- 1 0 -----Explanation----- Example case 1: The optimal operation is to flip the substring \\"00000\\" which will change B to \\"1111111\\", making all characters equal in 1 operation.","solution":"def min_operations_to_equalize_string(T, cases): results = [] for case in cases: N, B = case if \'0\' not in B: results.append(0) else: segments_of_zeros = B.split(\'1\') operations = sum(1 for segment in segments_of_zeros if \'0\' in segment) results.append(operations) return results"},{"question":"Find the maximum product of a subarray within an array of integers. Given an integer array `nums`, find a contiguous non-empty subarray within the array that has the largest product, and return the product. Example: Input: [2,3,-2,4] Output: 6 Explanation: [2,3] has the largest product 6. Input: [-2,0,-1] Output: 0 Explanation: The result cannot be 2, because [-2,-1] is not a contiguous subarray.","solution":"def max_product_subarray(nums): Returns the maximum product of a contiguous subarray within the array nums. if not nums: return 0 max_prod = min_prod = result = nums[0] for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result"},{"question":"You are given a tree with N nodes numbered from 1 to N. The tree is rooted at node 1. Each node has a value assigned to it. You need to answer Q queries. In each query, you have to determine the sum of values of all nodes in the subtree of a given node u. -----Input----- - The first line contains an integer N — the number of nodes in the tree. - The second line contains N space-separated integers, where the i-th integer denotes the value assigned to the i-th node. - Each of the next N-1 lines contains two space-separated integers u and v — representing an edge between nodes u and v. - The next line contains an integer Q — the number of queries. - The next Q lines each contain a single integer u — the node whose subtree sum needs to be computed. -----Output----- - For each query, output a single integer on a new line — the sum of values in the subtree of the given node u. -----Constraints----- - 1 le N, Q le 100000 - 1 le value of each node le 10^9 - The sum of the values of the nodes for each query can be large, so use 64-bit integers to store them. -----Example Input----- 5 1 2 3 4 5 1 2 1 3 2 4 2 5 3 1 2 3 -----Example Output----- 15 11 3 -----Explanation----- Example case: The given tree structure is: ``` 1 / / 2 3 / 4 5 ``` - For the first query, the sum of values of all nodes in the subtree of node 1 is 1 + 2 + 3 + 4 + 5 = 15. - For the second query, the sum of values of all nodes in the subtree of node 2 is 2 + 4 + 5 = 11. - For the third query, the sum of values of all nodes in the subtree of node 3 is 3.","solution":"from collections import defaultdict def subtree_sums(N, node_values, edges, queries): def dfs(node): subtree_sum[node] = node_values[node - 1] for neighbor in tree[node]: if neighbor != parent[node]: parent[neighbor] = node dfs(neighbor) subtree_sum[node] += subtree_sum[neighbor] tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) parent = {1: None} subtree_sum = {} dfs(1) result = [] for query in queries: result.append(subtree_sum[query]) return result # Input reading example def read_input(): import sys input = sys.stdin.read data = input().split() index = 0 N = int(data[index]) index += 1 node_values = list(map(int, data[index:index+N])) index += N edges = [] for _ in range(N - 1): u = int(data[index]) v = int(data[index + 1]) edges.append((u, v)) index += 2 Q = int(data[index]) index += 1 queries = [] for _ in range(Q): queries.append(int(data[index])) index += 1 return N, node_values, edges, queries # Example usage if __name__ == \\"__main__\\": N, node_values, edges, queries = read_input() results = subtree_sums(N, node_values, edges, queries) for res in results: print(res)"},{"question":"You are given an array of N integers. Your task is to find the maximum possible value of the bitwise XOR of a non-empty subsequence of the given array. A subsequence is derived by deleting some or none of the elements without changing the order of the remaining elements. Constraints * 1 leq N leq 50 * 1 leq A_i leq 10^9 Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the maximum possible XOR value of any non-empty subsequence of the given array. Examples Input 3 3 10 5 Output 15 Input 4 1 2 3 4 Output 7 Input 2 8 7 Output 15","solution":"def max_subsequence_xor(arr): Returns the maximum XOR value of any non-empty subsequence of the given array. # Initialize result max_xor = 0 # Traverse through all elements of the array for num in arr: # Update max_xor if needed max_xor |= num return max_xor if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:])) print(max_subsequence_xor(A))"},{"question":"You are given a string consisting of lowercase English letters. You can remove any number of characters from the string to create a new string. Your task is to determine the minimum number of characters you need to remove such that the resulting string has no palindrome subsequence of length greater than or equal to 2. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. A palindrome is a string that reads the same forward and backward. -----Input----- The input consists of a single line containing a string s (1 ≤ |s| ≤ 100) consisting of lowercase English letters. -----Output----- Output a single integer — the minimum number of characters you have to remove. -----Examples----- Input abaa Output 1 Input abc Output 0 Input aaa Output 2 -----Note----- In the first test case, by removing one of the \'a\' characters, the remaining string \\"baa\\" or \\"aba\\" will not have a palindrome subsequence of length greater than or equal to 2. In the second test case, the string \\"abc\\" already has no palindrome subsequence of length greater than or equal to 2, so you don\'t need to remove any characters. In the third test case, by removing two \'a\' characters, the remaining string \\"a\\" will have no palindrome subsequence of length greater than or equal to 2.","solution":"def min_removals_to_avoid_palindromic_subsequences(s): Returns the minimum number of characters to remove such that no palindrome subsequence of length greater than or equal to 2 exists. if len(s) == 1: return 0 for char in set(s): if s.count(char) > 1: return 1 return 0"},{"question":"Your task is to implement a simple scheduling algorithm to determine how many machines are required to execute a given set of tasks without overlap. Each machine can only handle one task at a time. You are given the start and end times of tasks, and you need to figure out the minimum number of machines required to handle all tasks. -----Input----- The first line contains an integer n (1 le n le 10^4) — the number of tasks. Each of the following n lines contain two integers s and e (1 le s < e le 10^5) representing the start and end times (inclusive) of each task. -----Output----- Print a single integer — the minimum number of machines required to handle all tasks without overlap. -----Examples----- Input 3 1 4 2 5 3 6 Output 3 Input 4 1 3 2 4 3 5 4 6 Output 2 -----Note----- Each task starts at the beginning of s and ends at the beginning of e. Therefore, two tasks that end and start at the same time respectively do not overlap.","solution":"def min_machines_required(tasks): events = [] for task in tasks: s, e = task events.append((s, \'start\')) events.append((e, \'end\')) events.sort() max_machines = 0 current_machines = 0 for event in events: if event[1] == \'start\': current_machines += 1 max_machines = max(max_machines, current_machines) else: current_machines -= 1 return max_machines # Example usage: # tasks = [(1, 4), (2, 5), (3, 6)] # print(min_machines_required(tasks)) # Output: 3"},{"question":"Given a list of integers, your task is to determine if you can split the list into two non-empty sublists such that the sum of the elements in each sublist is equal. You should implement a function `can_split(lst)` that takes in a list of integers and returns `True` if you can split the list into two sublists with equal sums, and `False` otherwise. **Notes**: - The list contains at least two integers. - Each sublist must contain at least one integer. - You can assume all the integers in the list are non-negative. **Example**: ```python can_split([1, 5, 11, 5]) -> True # The list can be split into [1, 5, 5] and [11] can_split([1, 2, 3, 5]) -> False # No equal sum sublists can be made can_split([3, 3, 3, 3]) -> True # The list can be split into [3, 3] and [3, 3] ``` Implement the function `can_split(lst)` that solves the problem.","solution":"def can_split(lst): Determine if a list of integers can be split into two non-empty sublists such that the sum of the elements in each sublist is equal. Parameters: - lst (list): A list of non-negative integers. Returns: - bool: True if the list can be split into two sublists with equal sums, False otherwise. total_sum = sum(lst) # If total sum is odd, it\'s impossible to split it into two equal parts if total_sum % 2 != 0: return False target_sum = total_sum // 2 current_sum = 0 # Use a set to keep track of sums of subsets sums = {0} for num in lst: new_sums = set() for s in sums: new_sum = s + num if new_sum == target_sum: return True new_sums.add(new_sum) sums.update(new_sums) return False"},{"question":"A company wants to systematize the way it handles customer support tickets. Each support ticket can be categorized into one of several types based on the nature of the problem reported. For the purpose of analysis, they want to calculate the median time taken to resolve tickets for each category. You\'re given a list of support tickets with information on their types and the time taken to resolve each one. Your task is to write a function that returns the median resolution time for each ticket type. -----Input----- - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of support tickets. - The next n lines each contain a string s (with length between 1 and 50) representing the ticket type and an integer t (1 ≤ t ≤ 10^5) representing the time taken to resolve the ticket. -----Output----- For each ticket type, output the ticket type followed by the median resolution time. Ticket types should be listed in lexicographic order. -----Examples----- Input: 5 billing 30 technical 40 billing 20 technical 60 general 50 Output: billing 25 general 50 technical 50 Input: 6 refund 20 refund 50 refund 10 inquiry 15 inquiry 35 technical 40 Output: inquiry 25 refund 20 technical 40 -----Note----- In the first example: - For \'billing\', the resolution times are [30, 20]. The median is (20 + 30) / 2 = 25. - For \'technical\', the resolution times are [40, 60]. The median is (40 + 60) / 2 = 50. - For \'general\', there\'s only one value 50, which itself is the median. In the second example: - For \'inquiry\', the times are [15, 35]. The median is (15 + 35) / 2 = 25. - For \'refund\', the times are [20, 50, 10]. Sorting them gives [10, 20, 50], and the median is 20. - For \'technical\', the single time value 40 is itself the median.","solution":"import statistics def calculate_median_resolution_times(tickets): Returns the median resolution time for each ticket type. The types are listed in lexicographic order. from collections import defaultdict # Create a dictionary to store resolution times for each ticket type ticket_dict = defaultdict(list) # Process each ticket in the input for ticket in tickets: ticket_type, time = ticket ticket_dict[ticket_type].append(time) # Calculate medians and store results in a list of tuples median_times = [] for ticket_type in sorted(ticket_dict.keys()): times = ticket_dict[ticket_type] median_time = statistics.median(times) # Calculate the median median_times.append((ticket_type, median_time)) return median_times # Example usage tickets = [ (\'billing\', 30), (\'technical\', 40), (\'billing\', 20), (\'technical\', 60), (\'general\', 50) ] print(calculate_median_resolution_times(tickets))"},{"question":"Mark is working in a toy factory where he has been assigned the task of assembling toy cars. Each toy car is assembled by joining different parts sequentially. For simplicity, we can consider the parts as nodes in a graph, where each directed edge from node U to node V has a weight representing the time required to join part U to part V. Given this, the toy car assembly can be represented as a Directed Acyclic Graph (DAG). Mark needs your help to figure out the minimum time required to assemble a toy car from the start part to the final part. The assembly process must follow the topological order of the graph, and Mark can only start assembling a new part once all its preceding parts have been assembled. -----Input----- The input consists of several test cases. The first line of each test case contains an integer n, the number of parts (2 leq n leq 1000), and an integer m, the number of directed edges indicating dependencies between parts (1 leq m leq 5000). The following m lines each contain three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 100) representing a directed edge from part u to part v that requires w time units to assemble. The first part is always labeled as 1 (the starting part), and the final part is always labeled as n (the final part). -----Output----- For each test case, display the minimal time required to assemble the toy car from part 1 to part n. If it is impossible to assemble the toy car, display \\"impossible\\". -----Examples----- Sample Input: 2 1 1 2 3 3 2 1 2 2 2 3 1 4 3 1 2 2 2 3 3 3 4 1 Sample Output: 3 3 6","solution":"from collections import deque, defaultdict import sys def minimum_assembly_time(n, m, edges): # Create an adjacency list and calculate in-degrees graph = defaultdict(list) in_degree = {i: 0 for i in range(1, n+1)} time = {i: float(\'inf\') for i in range(1, n+1)} time[1] = 0 for u, v, w in edges: graph[u].append((v, w)) in_degree[v] += 1 # Topological sort using Kahn\'s algorithm queue = deque([node for node in range(1, n+1) if in_degree[node] == 0]) while queue: u = queue.popleft() for v, w in graph[u]: if time[u] + w < time[v]: time[v] = time[u] + w in_degree[v] -= 1 if in_degree[v] == 0: queue.append(v) return time[n] if time[n] != float(\'inf\') else \\"impossible\\" def assemble_toy_cars(test_cases): results = [] for n, m, edges in test_cases: result = minimum_assembly_time(n, m, edges) results.append(result) return results"},{"question":"Analyzing Character Frequency in Strings Little Timmy has been learning about strings and their properties. He is fascinated by how often each character appears in a string and wants to write a program to find the character that appears the most frequently in a given string. If there are multiple characters with the same highest frequency, the program should return the lexicographically smallest one among them. Your task is to help Timmy by writing a program to solve this problem. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the length of the string. - The second line contains a string of length `n` consisting of lowercase English letters. # Output - Print the character that appears the most frequently in the string. If there are multiple characters with the same highest frequency, print the lexicographically smallest one among them. # Examples Input ``` 6 bbaacc ``` Output ``` a ``` Input ``` 12 aabbbccccddd ``` Output ``` c ``` Input ``` 5 eeeee ``` Output ``` e ``` # Note In the first example, the characters \'a\', \'b\', and \'c\' all appear twice, but \'a\' is the lexicographically smallest. In the second example, the character \'c\' appears four times, which is more than any other character. In the third example, the character \'e\' appears five times, which is the entire string, so \'e\' is the most frequent. # Explanation - Use a frequency count to determine how many times each character appears in the string. - If multiple characters have the same highest frequency, compare them lexicographically to find the smallest one. - Output the character with the highest frequency or the lexicographically smallest one in case of a tie.","solution":"def most_frequent_character(n, s): Returns the most frequently occurring character in a given string. If there is a tie, returns the lexicographically smallest character. from collections import Counter frequency = Counter(s) most_common_char = min(frequency.keys(), key=lambda char: (-frequency[char], char)) return most_common_char"},{"question":"Given an array of integers, find the number of elements that have at least one smaller element and at least one larger element. Function Description Complete the `findElementsWithSmallerAndLarger` function: `findElementsWithSmallerAndLarger(arr: List[int]) -> int:` - `arr`: An array of integers. Returns - `int`: The number of elements that have both a smaller and a larger element in the array. Input Format - The first line contains an integer n, the size of the array. - The second line contains n integers separated by spaces, representing the elements of the array. Constraints - 2 leq n leq 10^5 - -10^9 leq arr[i] leq 10^9 Sample Input 0 6 5 1 9 2 5 7 Sample Output 0 4 Sample Input 1 5 1 2 3 4 5 Sample Output 1 3 Sample Explanation: In the first sample, the elements 5, 2, 5, and 7 all have both smaller elements and larger elements in the array. In the second sample, the elements 2, 3, and 4 satisfy the condition.","solution":"from typing import List def findElementsWithSmallerAndLarger(arr: List[int]) -> int: if len(arr) < 2: return 0 min_element = min(arr) max_element = max(arr) count = 0 for element in arr: if element > min_element and element < max_element: count += 1 return count"},{"question":"Luka is a talented hacker who loves solving puzzles and participating in coding competitions. Recently, he has been invited to a special competition where he embraces a unique challenge. In this competition, Luka is given an array of integers, where each integer represents the difficulty level of a particular sub-task. Luka\'s goal is to split the array into exactly K non-overlapping contiguous sub-arrays such that the maximum sum of elements in any sub-array is minimized. Help Luka determine the minimal value of the maximum sum of the K sub-arrays that he can achieve by splitting the array optimally. -----Input----- The first line of input contains two space-separated integers N and K, denoting the size of the array and the number of sub-arrays Luka needs to split the array into, respectively. The second line of input contains N space-separated integers, representing the difficulty levels of the sub-tasks. -----Output----- Output a single line containing the minimal value of the maximum sum of the K sub-arrays. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ K ≤ N - 1 ≤ difficulty level of sub-tasks ≤ 10^9 -----Example----- Input: 5 2 1 2 3 4 5 Output: 9 -----Explanation----- Example case: Luka can split the array [1, 2, 3, 4, 5] into two sub-arrays [1, 2, 3, 4] and [5], where the sums are 10 and 5 respectively. The maximum sum among these sub-arrays is 10. However, by choosing the sub-arrays [1, 2, 3] and [4, 5], he gets the sums 6 and 9 respectively. The maximum sum among these sub-arrays is 9, which is the minimum value of the maximum sum that can be achieved.","solution":"def minimize_max_sum(nums, K): Minimizes the maximum sum of K sub-arrays. :param nums: List of integers representing the difficulty levels. :param K: Integer representing the number of sub-arrays. :return: Integer representing the minimal value of the maximum sum of the K sub-arrays. def can_split(max_sum): current_sum = 0 sub_array_count = 1 for num in nums: if current_sum + num > max_sum: sub_array_count += 1 current_sum = num if sub_array_count > K: return False else: current_sum += num return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if can_split(mid): right = mid else: left = mid + 1 return left"},{"question":"Anna is organizing a charity event and needs to distribute donation funds equally among several local community centers. Each community center should receive the same whole number amount, and any leftover funds after distribution should be retained by Anna for future events. Write a program to calculate how much money each community center receives and how much money is left with Anna. # Input The input is given in the following format: t n A line of data is given that contains two values: - t (100 ≤ t ≤ 1000000) representing the total donation funds - n (1 ≤ n ≤ 1000) representing the number of community centers. # Output Output two values in a line: the amount of money each community center receives and the leftover amount with Anna. # Examples **Input** 2500 7 **Output** 357 1 **Input** 10000 15 **Output** 666 10 **Input** 5000 3 **Output** 1666 2","solution":"def distribute_funds(t, n): Calculate how much money each community center receives and leftover amount. Parameters: t (int): Total donation funds (100 ≤ t ≤ 1000000). n (int): Number of community centers (1 ≤ n ≤ 1000). Returns: tuple: Amount each community center receives, Leftover amount with Anna. per_center = t // n leftover = t % n return per_center, leftover"},{"question":"Given a list of integers, determine the length of the longest subsequence where the difference between consecutive elements is a fixed integer k. -----Constraints----- - The length of the list is at most 100,000. - Each element in the list is an integer within the range of -10^9 to 10^9. - The fixed integer k is a positive integer within the range of 1 to 100. -----Input----- Input is given from Standard Input in the following format: n k a_1 a_2 ... a_n -----Output----- Print the length of the longest subsequence where the difference between consecutive elements is exactly k. -----Sample Input----- 6 2 1 3 5 7 9 11 -----Sample Output----- 6 Explanation: In this example, the entire list forms a subsequence where each pair of consecutive elements has a difference of 2 (i.e., 3 - 1 = 2, 5 - 3 = 2, etc.). Therefore, the length of the longest subsequence is 6.","solution":"def longest_subsequence(n, k, arr): Returns the length of the longest subsequence where the difference between consecutive elements is exactly k. Parameters: n (int): Length of the list. k (int): Fixed integer difference. arr (list): List of integers. Returns: int: Length of the longest subsequence. if n == 0: return 0 dp = {} max_length = 1 for num in arr: previous_num = num - k if previous_num in dp: dp[num] = dp[previous_num] + 1 else: dp[num] = 1 if dp[num] > max_length: max_length = dp[num] return max_length # Example usage # n = 6 # k = 2 # arr = [1, 3, 5, 7, 9, 11] # print(longest_subsequence(n, k, arr)) # Output should be 6"},{"question":"You are given a list of natural numbers. Your task is to determine which of the given numbers are prime. Input An integer T, denoting the number of testcases, followed by T lines, each containing a single natural number N. Output For each integer N given at input, output a single line containing \\"Yes\\" if N is a prime number, and \\"No\\" otherwise. Input Constraint 1 ≤ T ≤ 100 1 ≤ N ≤ 10^6 SAMPLE INPUT 4 2 4 5 10 SAMPLE OUTPUT Yes No Yes No","solution":"def is_prime(n): Determines if a given number n is prime. :param n: The integer to check for primality. :return: True if n is a prime number, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def check_primes(test_cases): Determines prime status for a list of test cases. :param test_cases: List of integers to check for primality. :return: List of strings \\"Yes\\" or \\"No\\" for each test case. return [\\"Yes\\" if is_prime(n) else \\"No\\" for n in test_cases]"},{"question":"Write a function that accepts a list of integers and returns a tuple containing two values: the maximum number of consecutive integers present in the list, and another list containing the longest sequence of those consecutive integers in ascending order. If there are multiple sequences of the same maximum length, return the one that starts with the smallest integer. For example, given the input list ` [4, 2, 1, 6, 5]`, the function should return `(3, [4, 5, 6])` because the longest sequence of consecutive integers is `4, 5, 6`. If the input list is `[1, 9, 3, 10, 4, 20, 2]`, the function should return `(4, [1, 2, 3, 4])` because the longest sequence is `1, 2, 3, 4`.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest sequence of consecutive integers and the sequence itself. Args: nums (list of int): The input list of integers. Returns: tuple: A tuple containing the length of the longest sequence and the sequence itself. if not nums: return (0, []) num_set = set(nums) longest_streak = 0 best_start = None for num in nums: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 if current_streak > longest_streak or (current_streak == longest_streak and (best_start is None or num < best_start)): longest_streak = current_streak best_start = num best_sequence = list(range(best_start, best_start + longest_streak)) return (longest_streak, best_sequence)"},{"question":"Given a string s and an integer n, write a function that returns a string which is a concatenation of n copies of s. Example 1: Input: s = \\"abc\\", n = 3 Output: \\"abcabcabc\\" Example 2: Input: s = \\"xyz\\", n = 5 Output: \\"xyzxyzxyzxyzxyz\\" Your Task: You don\'t need to input anything. Complete the function repeatString() which takes a string s and an integer n as input parameters and returns the concatenated string. Constraints: - 1 <= len(s) <= 100 - 1 <= n <= 100","solution":"def repeatString(s, n): Returns a string which is a concatenation of n copies of s. return s * n"},{"question":"Arjun is developing an encrypted messaging application where each message is secured with a special numerical code. The code for each message is determined by the frequencies of characters in the message. Given a string message composed of lowercase Latin letters, the code is computed as follows: 1. Count the frequency of each character in the string. 2. Multiply each unique character\'s ASCII value by its frequency to get the contribution of that character to the code. 3. Sum the contributions of all unique characters to get the final code. Write a program to compute the code for each given message. ------ Input ------ The first line of input contains an integer T, denoting the number of test cases. Each of the following T lines contains a string message, composed of lowercase Latin letters. ------ Output ------ For each test case, output a single line containing the code of the given message. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |message| ≤ 10^{4} ------ Sample Input 1 ------ 2 abc aabbcc ------ Sample Output 1 ------ 294 588 ------ Explanation 1 ------ Example case 1: - Frequencies: a=1, b=1, c=1 - Code calculation: (1*97) + (1*98) + (1*99) = 294 Example case 2: - Frequencies: a=2, b=2, c=2 - Code calculation: (2*97) + (2*98) + (2*99) = 588","solution":"def compute_code(message): Computes the special numerical code for a given message. Parameters: message (str): The string message composed of lowercase Latin letters. Returns: int: The special numerical code for the message. from collections import Counter # Count the frequency of each character in the message frequency = Counter(message) # Calculate the code by summing the contribution of each character code = sum(freq * ord(char) for char, freq in frequency.items()) return code def process_messages(T, messages): Process multiple messages to compute their respective codes. Parameters: T (int): The number of test cases. messages (List[str]): List of string messages. Returns: List[int]: List of codes for each message. return [compute_code(message) for message in messages]"},{"question":"A spaceship battleship game has started between two players, Player A and Player B. Each player has a set of ships that are represented by their positions on a 2D grid. The grid is represented as a matrix of size NxN, where N is the size of the grid. Player A will fire a missile at a known position on the grid, and your task is to determine if the missile hits any of Player B\'s ships. Each ship is represented by a single cell on the grid and is defined by its coordinates (x, y). Given the coordinates of a missile fired by Player A, your task is to check whether the missile hits any of Player B\'s ships or not. INPUT: The first line contains two integers N (size of the grid) and M (number of Player B\'s ships). The following M lines contain the coordinates of each ship belonging to Player B, given as two integers xi and yi. The next line contains one pair of coordinates xj and yj which represents the position where Player A fires the missile. OUTPUT: Output \\"HIT\\" if the missile hits any of Player B\'s ships, otherwise output \\"MISS\\". Constraints: 1 ≤ N ≤ 100 1 ≤ M ≤ 100 0 ≤ xi, yi < N 0 ≤ xj, yj < N SAMPLE INPUT: 5 3 0 0 1 2 3 4 1 2 SAMPLE OUTPUT: HIT Explanation: In the above example, the missile fired by Player A at (1, 2) hits Player B\'s ship located at (1, 2), so the output is \\"HIT\\". If the missile had been fired at (2, 2) the output would have been \\"MISS\\", since there is no ship at that position.","solution":"def check_missile_hit(N, M, ships, missile): Determines if Player A\'s missile hits any of Player B\'s ships. Parameters: - N: Size of the grid (NxN). - M: Number of Player B\'s ships. - ships: A list of tuples representing the coordinates of Player B\'s ships. - missile: A tuple representing the coordinates where Player A fires the missile. Returns: - \\"HIT\\" if the missile hits any of Player B\'s ships, otherwise \\"MISS\\". ship_set = set(ships) if missile in ship_set: return \\"HIT\\" else: return \\"MISS\\""},{"question":"John works as a delivery driver for a local courier company. He has a set of N packages that need to be delivered to various locations in the city. Each package has a destination defined by its coordinates in a Cartesian plane. Additionally, each package has a delivery time window [t_i_start, t_i_end], during which it must be delivered. The task is to determine if John can deliver all packages on time, starting from his initial position (0, 0). John can only deliver one package at a time and travels at a constant speed of 1 unit distance per unit time. Input The input consists of multiple test cases, followed by a line containing \\"-1\\". Each test case has the following format. The first line contains an integer N (1 leq N leq 100). Each of the following N lines contains two integers x_i and y_i (-1,000 leq x_i, y_i leq 1,000), and two floating-point numbers t_i_start and t_i_end (0 leq t_i_start < t_i_end leq 1,000), which describe the coordinates of the package\'s destination and the delivery time window. Output For each test case, print its case number and \\"YES\\" if John can deliver all packages within their respective time windows, or \\"NO\\" otherwise. Example Input 3 1 1 1.0 3.0 2 2 3.0 6.0 3 3 6.0 9.0 2 1 2 0.0 1.0 2 2 1.5 2.5 -1 Output Case 1: YES Case 2: NO","solution":"def can_deliver_all_packages(test_cases): results = [] case_number = 1 for test_case in test_cases: N = test_case[0] packages = test_case[1:] # start at initial position (0, 0) and time 0 current_pos = (0, 0) current_time = 0 can_deliver = True for package in packages: x, y, t_start, t_end = package distance = abs(x - current_pos[0]) + abs(y - current_pos[1]) next_time = current_time + distance if next_time > t_end: can_deliver = False break if next_time < t_start: next_time = t_start current_pos = (x, y) current_time = next_time if can_deliver: results.append(f\\"Case {case_number}: YES\\") else: results.append(f\\"Case {case_number}: NO\\") case_number += 1 return results def parse_input(input_str): test_cases = [] lines = input_str.strip().split(\'n\') i = 0 while i < len(lines): if lines[i] == \\"-1\\": break N = int(lines[i]) packages = [] for j in range(N): x, y, t_start, t_end = map(float, lines[i + j + 1].split()) packages.append((int(x), int(y), t_start, t_end)) test_cases.append((N, *packages)) i += N + 1 return test_cases def main(input_str): test_cases = parse_input(input_str) return can_deliver_all_packages(test_cases)"},{"question":"Problem Statement: Jonas is conducting a series of experiments to study the properties of sequences. He has recently come across a specific type of sequence and needs your help to analyze it further. A sequence of positive integers is called \\"balanced\\" if for every two adjacent elements `a` and `b` in the sequence, their sum is divisible by 3. Jonas needs you to generate such a balanced sequence given specific restrictions. Your task is to generate a balanced sequence of length N such that each element in the sequence is between 1 and M (both inclusive). If no such sequence exists, print \\"NO SEQUENCE\\". Input Format: The first line of input contains a single integer, T, denoting the number of test cases. Each of the T subsequent lines contains two space-separated integers describing the respective N and M values for a test case. Output Format: For each test case, on a new line, print the balanced sequence of N elements. If no such sequence exists, print \\"NO SEQUENCE\\". Constraints: 1 <= T <= 10 1 <= N <= 10^5 1 <= M <= 10^5 Sample Input: 2 3 10 4 2 Sample Output: 1 2 1 NO SEQUENCE Explanation: Case 1: N=3 and M=10 A possible balanced sequence is [1, 2, 1] The sums of adjacent elements are: 1+2=3, 2+1=3 (both divisible by 3) Case 2: N=4 and M=2 No sequence of length 4 with elements between 1 and 2 satisfies the condition that every sum of adjacent elements is divisible by 3. Therefore, the output is \\"NO SEQUENCE\\".","solution":"def generate_balanced_sequence(N, M): if M < 3: if N == 1: return [1] return \\"NO SEQUENCE\\" sequence = [] for i in range(N): if i % 2 == 0: sequence.append(1) else: sequence.append(2) return sequence def balanced_sequences(T, cases): result = [] for N, M in cases: sequence = generate_balanced_sequence(N, M) if sequence == \\"NO SEQUENCE\\": result.append(sequence) else: result.append(\\" \\".join(map(str, sequence))) return result"},{"question":"Two cities, Alpha and Beta, are connected by a direct road. Each city has multiple warehouses. You and your delivery team have to manage the shipment of goods between the warehouses of both cities. The warehouses in Alpha are labeled as A1, A2, ..., AN, and in Beta as B1, B2, ..., BM. Every day, you will receive a request to move goods between some warehouses in Alpha and Beta. Each request indicates a specific number of goods to be transferred from a warehouse in Alpha to a warehouse in Beta or vice versa. There are some rules to follow: - Only one request can be processed at a time. - Each request has a priority which indicates the urgency of moving goods. If two requests have the same priority, the one received earlier should be processed first. You are given Q requests for the day, each request containing the details about the warehouses involved, the number of goods to be transferred, and the priority of the request. Your task is to process all the requests based on their priorities and generate a report. For each warehouse in each city, you need to track the net balance of goods (goods received minus goods sent) at the end of the day. -----Input:----- - The first line contains a single integer T denoting the number of test cases. - Each test case starts with three integers N (number of warehouses in Alpha), M (number of warehouses in Beta), and Q (number of requests). - The next Q lines describe the requests in the format: - \\"A X B Y P Z\\", where X is a warehouse in Alpha, Y is a warehouse in Beta, P is the number of goods, and Z is the priority. - \\"B Y A X P Z\\", where Y is a warehouse in Beta, X is a warehouse in Alpha, P is the number of goods, and Z is the priority. -----Output:----- For each test case, print N integers representing the net balance of goods in the warehouses of Alpha, followed by M integers representing the net balance of goods in the warehouses of Beta. -----Constraints----- - 1 leq T leq 100 - 1 leq N, M leq 1000 - 1 leq Q leq 10000 - 1 leq X leq N - 1 leq Y leq M - 1 leq P leq 100 - 1 leq Z leq 10 -----Example Input:----- 1 3 2 4 A 1 B 1 20 1 B 2 A 3 30 2 A 2 B 2 50 1 A 3 B 1 10 3 -----Example Output:----- 0 0 0 50 -30 -----Explanation:----- For the given test case: - Request A 1 B 1 20 1: Transfer 20 goods from A1 to B1: Alpha[1] = -20, Beta[1] = 20 - Request A 2 B 2 50 1: Transfer 50 goods from A2 to B2: Alpha[2] = -50, Beta[2] = 50 - Request B 2 A 3 30 2: Transfer 30 goods from B2 to A3: Beta[2] = 20 (50 - 30), Alpha[3] = 30 - Request A 3 B 1 10 3: Transfer 10 goods from A3 to B1: Alpha[3] = 20 (30 - 10), Beta[1] = 30 (20 + 10) Final net balances: - For Alpha: [A1 = -20, A2 = -50, A3 = 20] - For Beta: [B1 = 30, B2 = 20]","solution":"def process_requests(num_tests, test_cases): results = [] for test in test_cases: N, M, Q, requests = test alpha_balances = [0] * N beta_balances = [0] * M # Sort requests by priority and then by order of appearance requests.sort(key=lambda x: (x[5], x[6])) for req in requests: if req[0] == \\"A\\": alpha_index = req[1] - 1 beta_index = req[3] - 1 alpha_balances[alpha_index] -= req[4] beta_balances[beta_index] += req[4] else: beta_index = req[1] - 1 alpha_index = req[3] - 1 beta_balances[beta_index] -= req[4] alpha_balances[alpha_index] += req[4] results.append(alpha_balances + beta_balances) return results def parse_input(input_data): lines = input_data.strip().split(\\"n\\") num_tests = int(lines[0]) index = 1 test_cases = [] for _ in range(num_tests): N, M, Q = map(int, lines[index].split()) requests = [] for j in range(1, Q+1): elements = lines[index + j].split() src_city = elements[0] src = int(elements[1]) dest_city = elements[2] dest = int(elements[3]) goods = int(elements[4]) priority = int(elements[5]) requests.append((src_city, src, dest_city, dest, goods, priority, j)) index += Q + 1 test_cases.append((N, M, Q, requests)) return num_tests, test_cases def format_output(results): return \\"n\\".join(\\" \\".join(map(str, result)) for result in results) if __name__ == \\"__main__\\": input_data = input() num_tests, test_cases = parse_input(input_data) results = process_requests(num_tests, test_cases) print(format_output(results))"},{"question":"Given a string `str`, count the number of contiguous substrings that start and end with the same character. Example 1 Input: \\"abcab\\" Output: 7 Explanation: The substrings are: \\"a\\", \\"b\\", \\"c\\", \\"a\\", \\"b\\", \\"aba\\", \\"bab\\". Example 2 Input: \\"aaaa\\" Output: 10 Explanation: The substrings are: \\"a\\", \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aa\\", \\"aaa\\", \\"aaa\\", \\"aaaa\\". Your task: You don\'t have to read input or print anything. Your task is to complete the function `countSubstrs()` which takes the string `str` as input and returns the count of contiguous substrings that start and end with the same character. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= |str| <= 10^5","solution":"def countSubstrs(s): Count contiguous substrings that start and end with the same character. :param s: input string :type s: str :return: number of substrings :rtype: int n = len(s) count = 0 for i in range(n): j = i while j < n: if s[i] == s[j]: count += 1 j += 1 return count"},{"question":"Mina loves palindromes. A palindrome is a word that reads the same backward as forward. Mina has a set of strings, and she wants to count how many of these strings are palindromic. You are given a list of strings. Your task is to write a program to count how many of these strings are palindromic. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of strings in the list. The next n lines each contain one string consisting of lowercase and uppercase English letters only. The length of each string is at most 100. Output Print a single integer — the number of palindromic strings in the list. Examples Input 5 Level deed hello noon World Output 3 Input 3 Racecar Programming Madam Output 2","solution":"def count_palindromes(strings): Counts the number of palindromic strings in the given list of strings. def is_palindrome(s): return s.lower() == s.lower()[::-1] count = 0 for s in strings: if is_palindrome(s): count += 1 return count"},{"question":"You are given an array b consisting of n integers. Your task is to find out if there exists a subarray (a contiguous subsequence) of the given array whose sum is a prime number. If such a subarray exists, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line of the input contains one integer n (1 ≤ n ≤ 2000) — the number of elements in the array. The second line contains n space separated integers b1, b2, ..., bn (1 ≤ bi ≤ 1000) — the elements of the array. Output Print \\"YES\\" if there exists a subarray whose sum is a prime number. Otherwise, print \\"NO\\". Examples Input 5 1 2 3 4 5 Output YES Input 4 4 6 8 10 Output NO Input 3 7 1 12 Output YES Note In the first sample, the subarray [2, 3] has a sum of 5, which is a prime number. In the second sample, there is no subarray with a sum that is a prime number. In the third sample, the subarray [7] itself has a sum which is a prime number.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def subarray_with_prime_sum(arr): n = len(arr) for i in range(n): current_sum = 0 for j in range(i, n): current_sum += arr[j] if is_prime(current_sum): return \\"YES\\" return \\"NO\\" # Example usage: # array_b = [1, 2, 3, 4, 5] # result = subarray_with_prime_sum(array_b) # Outputs \\"YES\\""},{"question":"Given two positive integers N and M, find the maximum number of times M can be subtracted from N before N becomes less than or equal to zero. Example 1: Input: N = 10, M = 3 Output: 3 Explanation: Starting with N = 10, you can subtract 3 three times before N becomes less than or equal to zero: 10 - 3 = 7, 7 - 3 = 4, 4 - 3 = 1. After the 3rd subtraction, N = 1, and you cannot subtract 3 anymore as N would become negative or zero. Example 2: Input: N = 15, M = 5 Output: 3 Explanation: Starting with N = 15, you can subtract 5 three times before N becomes less than or equal to zero: 15 - 5 = 10, 10 - 5 = 5, 5 - 5 = 0. After the 3rd subtraction, N = 0, and you cannot subtract 5 anymore. Your Task: You dont need to read input or print anything. Complete the function maxSubtractions() which takes N and M as input parameters and returns the maximum number of times M can be subtracted from N. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1<= N, M <= 10^9","solution":"def maxSubtractions(N, M): Returns the maximum number of times M can be subtracted from N before N becomes less than or equal to zero. return N // M"},{"question":"A robot is positioned at the origin of a 2D grid. You are given a sequence of commands that the robot must follow. The commands are given as a string consisting of the characters \'U\', \'D\', \'L\', and \'R\', which represent moving up, down, left, and right, respectively. Each command moves the robot one unit in the specified direction. Write a function to determine if the robot returns to the origin after completing the sequence of commands. The robot returns to the origin if its final coordinates are (0, 0). Implement the function: ```python def is_robot_return_to_origin(commands: str) -> bool: # Your code here ``` -----Input----- - A single string `commands` (1 leq text{len}(text{commands}) leq 100) that consists of characters \'U\', \'D\', \'L\', and \'R\'. -----Output----- - Return `True` if the robot returns to the origin, otherwise return `False`. -----Examples----- Input: \\"UD\\" Output: True Input: \\"LL\\" Output: False Input: \\"RRDD\\" Output: False Input: \\"LDRRLRUULR\\" Output: False","solution":"def is_robot_return_to_origin(commands: str) -> bool: Determine if the robot returns to the origin after completing the sequence of commands. :param commands: str - A string consisting of \'U\', \'D\', \'L\', and \'R\' :return: bool - True if the robot returns to the origin, otherwise False x, y = 0, 0 # start at the origin (0, 0) for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x == 0 and y == 0"},{"question":"Create a function that simulates a simple text-based game battle between a hero and a monster. The hero and monster have health points (HP) and a set amount of damage they can inflict with each attack. The hero always attacks first in each turn. The battle continues in turns until one of them has their HP reduced to 0 or below. You need to implement a function `battle(hero, monster)` that takes two dictionaries as input: - `hero`: representing the hero with keys `HP` and `damage` - `monster`: representing the monster with keys `HP` and `damage` The function should print the result of each turn (formatted as `<Hero/Monster> attacks! <Opponent> loses <damage> HP.`) and the final status of the battle (formatted as `Hero wins!` or `Monster wins!`). Example: ```python def battle(hero, monster): hero_hp = hero[\'HP\'] monster_hp = monster[\'HP\'] while hero_hp > 0 and monster_hp > 0: # Hero attacks print(f\\"Hero attacks! Monster loses {hero[\'damage\']} HP.\\") monster_hp -= hero[\'damage\'] if monster_hp <= 0: print(\\"Hero wins!\\") return # Monster attacks print(f\\"Monster attacks! Hero loses {monster[\'damage\']} HP.\\") hero_hp -= monster[\'damage\'] if hero_hp <= 0: print(\\"Monster wins!\\") return # Example usage: hero = {\'HP\': 30, \'damage\': 10} monster = {\'HP\': 25, \'damage\': 12} battle(hero, monster) Output: ``` Hero attacks! Monster loses 10 HP. Monster attacks! Hero loses 12 HP. Hero attacks! Monster loses 10 HP. Monster attacks! Hero loses 12 HP. Hero attacks! Monster loses 10 HP. Hero wins! ```","solution":"def battle(hero, monster): hero_hp = hero[\'HP\'] monster_hp = monster[\'HP\'] while hero_hp > 0 and monster_hp > 0: # Hero attacks print(f\\"Hero attacks! Monster loses {hero[\'damage\']} HP.\\") monster_hp -= hero[\'damage\'] if monster_hp <= 0: print(\\"Hero wins!\\") return # Monster attacks print(f\\"Monster attacks! Hero loses {monster[\'damage\']} HP.\\") hero_hp -= monster[\'damage\'] if hero_hp <= 0: print(\\"Monster wins!\\") return"},{"question":"You are provided with two strings, `source` and `target`. You need to determine whether it is possible to transform `source` into `target` by repeating the following operation any number of times: - Select any character from `source` and move it to the front of the string. For example, if `source` is \\"abc\\" and `target` is \\"cab\\", you can achieve this transformation as follows: 1. Move \'c\' to the front: \\"cab\\" Another example, if `source` is \\"abc\\" and `target` is \\"bca\\", you can achieve this transformation as follows: 1. Move \'b\' to the front: \\"bac\\" 2. Move \'c\' to the front: \\"bca\\" However, if `source` is \\"abc\\" and `target` is \\"xyz\\", it\'s not possible to transform `source` into `target`. -----Input----- The input contains two lines: 1. The first line contains the string `source` consisting of lowercase English letters. 2. The second line contains the string `target` consisting of lowercase English letters. Both `source` and `target` have a length between 1 and 10^5. -----Output----- Print `YES` if `source` can be transformed into `target` using the described operation. Otherwise, print `NO`. -----Examples----- Input abc cab Output YES Input abc xyz Output NO Input aaabb bbaaa Output YES Input abcde edcba Output YES -----Note----- In the third example, the characters from `source` can be rearranged by moving any character to the front to match the `target`. In the fourth example, a series of operations can transform `source` to `target` by continually moving the right-most characters to the front.","solution":"def can_transform(source, target): Determines if the source string can be transformed into the target string by repeatedly moving any character to the front of the string. if sorted(source) == sorted(target): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string S consisting of lowercase English letters. Determine if S contains any repeated characters. Constraints * 1 leq |S| leq 100 * S consists solely of lowercase English letters. Input Input is given from Standard Input in the following format: S Output If S contains any repeated characters, print `YES`; if all characters in S are unique, print `NO`. Examples Input hello Output YES Input world Output NO Input unique Output YES Input abcde Output NO","solution":"def contains_repeated_characters(S): Determines if the input string S contains any repeated characters. :param S: A string consisting of lowercase English letters :return: \'YES\' if any character in S is repeated, otherwise \'NO\' return \'YES\' if len(set(S)) != len(S) else \'NO\'"},{"question":"You are given a sequence of n integers, and your task is to process q queries on this sequence. Each query can either update the value of an element or find the maximum and minimum values in a specified subrange of the sequence. Each query is of one of the following two forms: * (1 , i , x) — update the <i>-th element of the sequence to the value <x>. * (2 , l , r) — find the maximum and minimum values in the subrange of the sequence from index <l> to index <r> (inclusive). Input The first line contains two integers (n) and (q) ((1 leq n, q leq 2 cdot 10^5)) — the number of elements in the sequence and the number of queries, respectively. The second line contains (n) integers (a_1, a_2, ldots, a_n) ((-10^9 leq a_i leq 10^9)) — the initial values of the sequence. Each of the next (q) lines describes a query in one of the forms listed above. Output For each query of the second type, print two integers on a new line — the minimum and maximum values in the specified subrange. Example Input 8 5 2 7 -1 4 3 9 -2 5 2 2 6 1 3 10 2 1 4 1 5 -4 2 4 8 Output -1 9 2 10 -4 9","solution":"class SequenceProcessor: def __init__(self, sequence): self.sequence = sequence def update(self, i, x): self.sequence[i-1] = x def query(self, l, r): subrange = self.sequence[l-1:r] min_val = min(subrange) max_val = max(subrange) return min_val, max_val def process_queries(n, q, sequence, queries): processor = SequenceProcessor(sequence) results = [] for query in queries: if query[0] == 1: _, i, x = query processor.update(i, x) elif query[0] == 2: _, l, r = query results.append(processor.query(l, r)) return results # Example usage and output generation n = 8 q = 5 sequence = [2, 7, -1, 4, 3, 9, -2, 5] queries = [ (2, 2, 6), (1, 3, 10), (2, 1, 4), (1, 5, -4), (2, 4, 8) ] output = process_queries(n, q, sequence, queries) for result in output: print(result[0], result[1])"},{"question":"You are given an integer array `arr` and an integer `k`. Your task is to determine if there are two distinct indices `i` and `j` in the array such that `arr[i]` is equal to `arr[j]` and the absolute difference between `i` and `j` is at most `k`. In other words, you need to check if there exists at least one pair of elements (not necessarily contiguous) with the same value in the array which are no further apart than `k` positions. Input Format: The first line contains two integers, `n` (the length of the array) and `k`. The second line contains `n` integers representing the elements of the array `arr`. Output Format: Print \\"TRUE\\" (without quotes) if such a pair exists, otherwise print \\"FALSE\\" (without quotes). Constraints: 1 ≤ n ≤ 100000 1 ≤ k ≤ 100000 1 ≤ arr[i] ≤ 100000 SAMPLE INPUT 6 2 1 2 3 1 2 3 SAMPLE OUTPUT TRUE Explanation There are multiple pairs of matching elements in the array (1, 1) and (2, 2), but the ones that satisfy the condition are `arr[0]` and `arr[3]` with the same value of 1 and their indices 0 and 3 have an absolute difference of 3 which is greater than `k=2`. Similarly, `arr[1]` and `arr[4]` have value 2 and their indices 1 and 4 have a difference of 3. However, `arr[2]` and `arr[5]` both are 3 and their indices 2 and 5 have an absolute difference of 3. So, the output is \\"TRUE\\".","solution":"def contains_nearby_duplicate(arr, k): Determines if there are two distinct indices i and j in the array such that arr[i] == arr[j] and the absolute difference between i and j is at most k. :param arr: List of integers :param k: Integer, the maximum allowed distance between duplicated values :return: \\"TRUE\\" if such indices exist, \\"FALSE\\" otherwise num_indices = {} for i, num in enumerate(arr): if num in num_indices and i - num_indices[num] <= k: return \\"TRUE\\" num_indices[num] = i return \\"FALSE\\""},{"question":"Write a function that takes a list of integers representing stock prices on different days in chronological order and returns a tuple of two integers representing the best day to buy and the best day to sell to maximize profit. If there\'s no profit to be made, return (-1, -1). Input: 1. A list of integers representing stock prices. Output: 1. A tuple of two integers where the first integer is the day to buy (0-based index) and the second integer is the day to sell. If no profit can be made, return (-1, -1). Note: - The function should handle lists of various lengths, including edge cases such as an empty list or a list with one element. - Ensure that the function operates efficiently, even for long lists of prices. Example: Input: [7, 1, 5, 3, 6, 4] Output: (1, 4) Input: [7, 6, 4, 3, 1] Output: (-1, -1)","solution":"def best_days_to_trade(prices): Returns the best day to buy and sell to maximize profit. If no profit can be made, returns (-1, -1). :param prices: List of stock prices :return: Tuple of integers (buy_day, sell_day) if not prices or len(prices) < 2: return (-1, -1) min_price = prices[0] min_day = 0 max_profit = 0 best_buy_day = 0 best_sell_day = 0 for current_day in range(1, len(prices)): current_price = prices[current_day] if current_price - min_price > max_profit: max_profit = current_price - min_price best_buy_day = min_day best_sell_day = current_day if current_price < min_price: min_price = current_price min_day = current_day if max_profit > 0: return (best_buy_day, best_sell_day) else: return (-1, -1)"},{"question":"You are given a matrix with dimensions `n x m`, where each element represents the cost to step on that cell. Starting from the top-left cell (1,1), you need to move to the bottom-right cell (n,m). You can only move either to the right or down from a given cell. Your goal is to determine the minimum cost required to reach the bottom-right cell from the top-left cell. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a line containing two integers `n` and `m` (1 le n, m le 1000), representing the dimensions of the matrix. This is followed by `n` lines, each with `m` integers 0 le cost le 10^4, representing the cost of the cells in the matrix. -----Output----- Output a single integer, the minimum cost required to travel from the top-left to the bottom-right of the matrix. -----Examples----- Sample Input 1: 3 3 1 3 1 1 5 1 4 2 1 Sample Output 1: 7 Sample Input 2: 2 2 1 2 1 1 Sample Output 2: 3","solution":"def min_cost_path(cost): Returns the minimum cost required to travel from the top-left to the bottom-right of the matrix. n = len(cost) m = len(cost[0]) for i in range(1, m): cost[0][i] += cost[0][i-1] for i in range(1, n): cost[i][0] += cost[i-1][0] for i in range(1, n): for j in range(1, m): cost[i][j] += min(cost[i-1][j], cost[i][j-1]) return cost[n-1][m-1]"},{"question":"In a small town, there is a newly constructed road network arranged as a grid of intersections with two types of roads - horizontal and vertical. Each of these roads has a traffic light that changes states at a fixed cycle. The grid is composed of n rows and m columns of intersections. Each intersection has two traffic lights: one controlling the horizontal direction and the other controlling the vertical direction. The traffic lights switch states every second between green and red, but they start with different initial states and phases. Given the intersections\' traffic light configurations, determine the earliest time a car can travel from the top-left intersection to the bottom-right intersection if the car can only move right or down. Note that the car may only move through intersections when the corresponding light is green, and it takes exactly one second to move from one intersection to the next. Input The first line contains two integers n and m (2 ≤ n, m ≤ 50), the number of rows and columns. The next n lines each contain m pairs of integers. Each pair represents the initial states and phases for the traffic lights at an intersection. Each pair of integers (h_i, v_i) where (0 ≤ h_i, v_i ≤ 1) describes the state of the horizontal and vertical traffic lights respectively at time 0, and the duration of their respective phases. If the horizontal light starts in the green state, h_i is 0; if it starts in the red state, h_i is 1. Similarly, if the vertical light starts in the green state, v_i is 0; if it starts in the red state, v_i is 1. Output Print a single integer representing the earliest time the car can travel from the top-left intersection to the bottom-right intersection. Example Input 3 3 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 Output 4 Explanation In the provided example, the car can move as follows: - At t = 0: Start at (1,1). - At t = 1: Move to (1,2). - At t = 2: Wait at (1,2) (as both directions are red). - At t = 3: Move to (1,3). - At t = 4: Move to (2,3). - At t = 5: Move to (3,3). Thus, the car reaches its destination at t = 4.","solution":"from collections import deque def earliest_time_to_reach_bottom_right(n, m, grid): def is_green(light_state, duration, t): phase = t % duration return (phase < duration // 2) if light_state == 0 else (phase >= duration // 2) directions = [(0, 1), (1, 0)] # move right or down queue = deque([(0, 0, 0)]) # (row, column, time) visited = set((0, 0)) while queue: r, c, t = queue.popleft() if r == n - 1 and c == m - 1: return t for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m: if (nr, nc) in visited: continue h_i, v_i = grid[nr][nc] if dr == 0 and is_green(h_i, 2, t + 1): # moving right: check horizontal light visited.add((nr, nc)) queue.append((nr, nc, t + 1)) elif dr == 1 and is_green(v_i, 2, t + 1): # moving down: check vertical light visited.add((nr, nc)) queue.append((nr, nc, t + 1)) return -1 # should not reach here # Example usage n = 3 m = 3 grid = [ [(0, 1), (1, 1), (0, 1)], [(1, 1), (0, 1), (1, 1)], [(0, 1), (1, 1), (0, 1)] ] print(earliest_time_to_reach_bottom_right(n, m, grid)) # Output: 4"},{"question":"A theme park sells entrance tickets based on a group size. The cost of one ticket is 20. Groups of 5 or more get a 20% discount on the total cost of the tickets. Write a program to calculate the total cost of tickets for various group sizes. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single integer N - the number of people in the group. ------ Output Format ------ For each test case, output the total cost for the group. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 ----- Sample Input 1 ------ 3 1 5 10 ----- Sample Output 1 ------ 20 80 160 ----- Explanation 1 ------ Test case-1: The cost for 1 ticket is 20. Test case-2: The cost for 5 tickets without discount is 100. With a 20% discount, the total cost is 100 - 20 = 80. Test case-3: The cost for 10 tickets without discount is 200. With a 20% discount, the total cost is 200 - 40 = 160.","solution":"def calculate_ticket_cost(group_size): Calculates the total cost of tickets based on the group size. Args: group_size (int): The number of people in the group Returns: int: The total cost of tickets for the group ticket_price = 20 total_cost = group_size * ticket_price if group_size >= 5: total_cost *= 0.8 return int(total_cost) def process_test_cases(test_cases): results = [] for group_size in test_cases: results.append(calculate_ticket_cost(group_size)) return results"},{"question":"In a small town of Shopsworth, the local business owners keep track of daily transactions using a simple system. Each transaction can either be a sale or a purchase. The system logs events in the following format: \\"S\\" for sale, \\"P\\" for purchase. The system also logs the transaction amount as an integer, which can be positive for sales and negative for purchases. Given the transaction log for a day, determine the maximum profit that the business could have achieved by choosing an optimal sub-sequence of transactions. The profit for any sub-sequence is computed by summing the transaction amounts within that sub-sequence. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of transactions in a day. The second line contains n space-separated integers representing the transaction amounts. -----Output----- Print a single integer — the maximum possible profit for the day. -----Examples----- Input 5 -3 5 -2 4 -1 Output 7 Input 4 -1 -2 -3 -4 Output 0 Input 3 6 -1 5 Output 10 -----Note----- In the first example, the optimal sub-sequence of transactions to maximize profit is [5, -2, 4], which sums up to 7. In the second example, all transactions are purchases which decrease profit. Thus, the best choice is to avoid all transactions, resulting in a maximum profit of 0. In the third example, the optimal sub-sequence [6, -1, 5] results in a maximum profit of 10.","solution":"def max_profit(transaction_count, transactions): Returns the maximum possible profit for the day based on the given transactions. :param transaction_count: int, number of transactions in a day :param transactions: list of int, the transaction amounts :return: int, the maximum possible profit max_profit = 0 current_profit = 0 for transaction in transactions: current_profit += transaction if current_profit < 0: current_profit = 0 if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"Aria loves collecting rare stamps from different countries and is organizing her collection by country. Given a list of stamps, where each stamp is identified by a name and its originating country, you need to create a summary of her collection. The summary should count the number of unique stamps originating from each country. Aria wants to know how many unique stamps she has collected from each country. Input: - First Line contains an integer N, the number of stamps in her collection. - Each of the next N lines contains a string, representing the name of a stamp followed by a space and then the name of its country. Output: - For each country that has at least one stamp in Aria\'s collection, output a line containing the country name followed by a space and then the number of unique stamps collected from that country. - The output should list the countries in alphabetical order. Constraints: - 1 ≤ N ≤ 100000 - Each stamp name and country name are composed of lowercase and uppercase English letters only. - The length of each stamp name and country name does not exceed 100. Example: Input: 6 BlueMoon USA RedSun Japan BlueMoon USA Dragon Japan Phoenix China Lotus India Output: China 1 India 1 Japan 2 USA 1 Input: 5 Falcon UK Bull Spain Falcon UK Phoenix UK Eagle Germany Output: Germany 1 Spain 1 UK 2 Sample Input: 6 BlueMoon USA RedSun Japan BlueMoon USA Dragon Japan Phoenix China Lotus India Sample Output: China 1 India 1 Japan 2 USA 1 Note: - The stamp collection may have multiple stamps from the same country. - The same stamp can appear more than once, but it should be counted only once per country.","solution":"def summarize_stamps(n, stamps): Given a list of stamps, each identified by a name and its country of origin, return a summary of the number of unique stamps from each country. Args: n (int): Number of stamps in the collection. stamps (list of str): List of strings, each representing a stamp and its country. Returns: dict: A dictionary where keys are country names and values are the number of unique stamps from that country. from collections import defaultdict stamp_dict = defaultdict(set) for stamp in stamps: name, country = stamp.rsplit(\' \', 1) stamp_dict[country].add(name) summary = {country: len(stamps) for country, stamps in stamp_dict.items()} return summary"},{"question":"You are given an array `A` of `N` elements. Your task is to rearrange the array in such a way that every element at an even index (0, 2, 4, ...) is less than or equal to its next element (elements at odd indices), and every element at an odd index (1, 3, 5, ...) is greater than or equal to its next element (elements at even indices). Write a function `rearrange_array` that takes a single argument: - A: List[int] – an array of `N` integers. The function should rearrange the array `A` in-place and ensure the properties mentioned above. If there are multiple correct answers, any of them will be accepted. ------ Input Format ------ - The first line contains a single integer `N`, the length of the array. - The second line contains `N` space-separated integers representing the elements of the array `A`. ------ Output Format ------ The output should be the rearranged array `A`, printed in a single line of space-separated integers. ------ Constraints ------ - 1 ≤ N ≤ 10^5 - 1 ≤ A_i ≤ 10^9 ------ Sample Input 1 ------ 6 4 3 7 8 6 2 ------ Sample Output 1 ------ 3 7 4 8 2 6 ------ Explanation 1 ------ One of the possible correct rearrangements is: - Element at index 0 (3) is less than or equal to element at index 1 (7). - Element at index 1 (7) is greater than or equal to element at index 2 (4). - Element at index 2 (4) is less than or equal to element at index 3 (8). - Element at index 3 (8) is greater than or equal to element at index 4 (2). - Element at index 4 (2) is less than or equal to element at index 5 (6). Another possible output could be `4 7 3 8 2 6`. ------ Sample Input 2 ------ 5 1 5 1 1 6 ------ Sample Output 2 ------ 1 5 1 6 1 ------ Explanation 2 ------ One of the possible correct rearrangements is: - Element at index 0 (1) is less than or equal to element at index 1 (5). - Element at index 1 (5) is greater than or equal to element at index 2 (1). - Element at index 2 (1) is less than or equal to element at index 3 (6). - Element at index 3 (6) is greater than or equal to element at index 4 (1). Another possible output could be `1 5 1 6 1`.","solution":"def rearrange_array(A): Rearranges the array such that every element at an even index is less than or equal to its next element (at odd index), and every element at an odd index is greater than or equal to its next element (at even index). N = len(A) for i in range(0, N-1): if i % 2 == 0: if A[i] > A[i+1]: A[i], A[i+1] = A[i+1], A[i] else: if A[i] < A[i+1]: A[i], A[i+1] = A[i+1], A[i] return A"},{"question":"You are given an array of positive integers representing the heights of a group of people standing in a line. Each person tries to see as many people as possible while looking to the left. A person can see another person to their left if the height of the second person is greater than or equal to their own height. The challenge is to determine the total number of views for all people in the line. Input: The first line contains a single integer N denoting the number of people (1 ≤ N ≤ 1000). The second line contains N space-separated integers representing the heights of the people (1 ≤ height ≤ 1000). Output: Output a single integer denoting the total number of views. Example: Input #1: 5 4 3 5 1 2 Output #1: 7 Explanation: Person 1 (height=4) cannot see anyone. Person 2 (height=3) can see Person 1. Person 3 (height=5) can see Person 2 and Person 1. Person 4 (height=1) cannot see anyone. Person 5 (height=2) can see Person 4. Total views: 0 (person 1) + 1 (person 2) + 2 (person 3) + 0 (person 4) + 1 (person 5) = 4. Input #2: 4 2 2 2 2 Output #2: 6 Explanation: Each person can see all the people to their left, resulting in a total of 6 views.","solution":"def total_views(heights): This function returns the total number of views for all people in the line, where each person can see another person to their left if the height of the second person is greater than or equal to their own height. :param heights: List of integers representing the heights of the people. :return: Total number of views. n = len(heights) total_views = 0 for i in range(1, n): count = 0 for j in range(i-1, -1, -1): if heights[j] >= heights[i]: count += 1 else: break total_views += count return total_views"},{"question":"Given an array consisting of positive integers and zero. The task is to find the position of the leftmost minimum element in the range from `start` to `end` index inclusive and the position of the rightmost maximum element in the same range. If multiple minimum or maximum elements are found, return the first such occurrence for the leftmost minimum and the last such occurrence for the rightmost maximum. Example: Input: arr = [2, 3, 1, 4, 1, 5], start = 1, end = 4 Output: 2, 3 Explanation: In the range from index 1 to 4, the minimum value is 1, which first occurs at index 2. The maximum value is 4, which last occurs at index 3. Input: arr = [9, 6, 4, 2, 0, 1, 2, 3], start = 0, end = 4 Output: 4, 4 Explanation: In the range from index 0 to 4, the minimum value is 0, which first occurs at index 4. The maximum value is 9, which last occurs at index 0. Your Task: You don’t need to read input or print anything. Complete the function `find_positions()` which takes the array `arr`, integer `start`, and integer `end` as input parameters and returns a tuple containing the position of the leftmost minimum element and the position of the rightmost maximum element in the given range. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: - 1 <= len(arr) <= 10^5 - 0 <= start <= end < len(arr)","solution":"def find_positions(arr, start, end): Finds the position of the leftmost minimum element and the position of the rightmost maximum element in the given range. :param arr: List of integers. :param start: Start index of the range. :param end: End index of the range. :return: Tuple containing the positions of the leftmost minimum element and the rightmost maximum element. leftmost_min_pos = start rightmost_max_pos = start min_val = arr[start] max_val = arr[start] for i in range(start, end + 1): if arr[i] < min_val: min_val = arr[i] leftmost_min_pos = i if arr[i] >= max_val: max_val = arr[i] rightmost_max_pos = i return (leftmost_min_pos, rightmost_max_pos)"},{"question":"You are given an array of integers `a` of length `n`. You need to perform a series of operations to make all the elements of the array equal. For every operation, you can pick any two indices `i` and `j` (1 ≤ i, j ≤ n) and add a positive integer `k` to both `a[i]` and `a[j]`. Determine the minimum number of operations required to make all elements equal. Input The first line contains a single integer `t` (1 ≤ t ≤ 10^4) — the number of test cases. The first line of each test case contains a single integer `n` (2 ≤ n ≤ 2 * 10^5) — the length of array `a`. It is guaranteed that the sum of values of `n` over all test cases in the input does not exceed 10^5. The second line of each test case contains `n` integers `a[0], a[1], ..., a[n-1]` (0 ≤ a[i] ≤ 10^9). Output For each test case, print the minimum number of operations required to make all elements of `a` equal. Example Input 3 3 1 2 3 4 4 4 4 4 2 1 1 Output 2 0 0 Note In the first test case, if you add 1 to `a[0]` and `a[1]` in the first operation, and then add 1 to `a[1]` and `a[2]` in the second operation, the array `a` will become `[2, 3, 3]`, and then `[3, 3, 3]`. In the second test case, all elements are already equal, so no operations are needed. In the third test case, all elements are already equal, so no operations are needed.","solution":"def min_operations_to_equal_elements(t, test_cases): results = [] for n, a in test_cases: unique_elements = set(a) results.append(len(unique_elements) - 1) return results # Example usage: # t = 3 # test_cases = [ # (3, [1, 2, 3]), # (4, [4, 4, 4, 4]), # (2, [1, 1]) # ] # print(min_operations_to_equal_elements(t, test_cases))"},{"question":"You are given an array of integers. Your task is to determine if the array is a monotonic sequence or not. A monotonic sequence is one that is either entirely non-increasing or entirely non-decreasing. -----Constraints----- - The array contains at least one integer and at most 1000 integers. - The array elements are integers within the range of -10^9 to 10^9. -----Input----- Input is given from Standard Input in the following format: n a1 a2 a3 ... an -----Output----- Print YES if the array is monotonic, otherwise print NO. -----Sample Input----- 5 1 2 2 3 4 -----Sample Output----- YES The given array is non-decreasing.","solution":"def is_monotonic(arr): Determines whether the array is monotonic or not. A monotonic array is entirely non-increasing or entirely non-decreasing. increasing = decreasing = True for i in range(1, len(arr)): if arr[i] < arr[i-1]: increasing = False if arr[i] > arr[i-1]: decreasing = False return increasing or decreasing # Read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:n+1])) print(\\"YES\\" if is_monotonic(arr) else \\"NO\\")"},{"question":"Alex loves puzzles, especially those that involve numbers. Recently, he came across a challenge where he needs to find the smallest positive integer that is evenly divisible by all of the numbers from 1 to a given integer N. Given a number N, write a program to determine the smallest positive integer that is evenly divisible by each number from 1 to N. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first and only line of each test case contains a single integer N, as described in the problem statement. ------ Output Format ------ For each test case, output the smallest positive integer that is evenly divisible by all of the numbers from 1 to N. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 40 ----- Sample Input 1 ------ 3 1 5 10 ----- Sample Output 1 ------ 1 60 2520 ----- Explanation 1 ------ Test case 1: The smallest number that is evenly divisible by all numbers from 1 to 1 is 1. Test case 2: The smallest number that is evenly divisible by all numbers from 1 to 5 is 60. Test case 3: The smallest number that is evenly divisible by all numbers from 1 to 10 is 2520.","solution":"from math import gcd def lcm(a, b): Returns the least common multiple of a and b. return a * b // gcd(a, b) def smallest_multiple(N): Returns the smallest positive integer that is evenly divisible by all the numbers from 1 to N. smallest_mul = 1 for i in range(1, N + 1): smallest_mul = lcm(smallest_mul, i) return smallest_mul def solve(inputs): Handles multiple test cases for finding smallest multiple. T = int(inputs[0]) results = [] for i in range(1, T + 1): N = int(inputs[i]) results.append(smallest_multiple(N)) return results"},{"question":"Given an array of integers, you need to find the length of the longest contiguous subarray that contains only unique elements. On each step, you can choose to either: - Add a new element (from the array) to the current subarray. - Remove an element from the current subarray if it causes a duplicate. Write a function that determines this length for various test cases. **Input:** The input consists of multiple test cases. The first line contains a single integer t (1 leq t leq 5000) — the number of test cases. The following lines contain the description of the test cases. For each test case, the first line contains a single integer n (1 leq n leq 10^5) — the length of the array. The next line contains n space-separated integers a_i (1 leq a_i leq 10^5) — the elements of the array. **Output:** For each test case output a single integer — the length of the longest contiguous subarray that contains only unique elements. **Examples:** Input: ``` 2 5 1 2 3 4 5 7 1 2 1 3 4 2 3 ``` Output: ``` 5 4 ``` **Explanation:** * In the first test case, the entire array has unique elements, so the length is 5. * In the second test case, the longest subarray with unique elements is [1, 3, 4, 2] with length 4.","solution":"def longest_unique_subarray_length(test_cases): Given multiple test cases, each containing an array of integers, this function returns the length of the longest contiguous subarray that contains only unique elements for each test case. results = [] for arr in test_cases: n = len(arr) max_len = 0 start = 0 seen = {} for end in range(n): if arr[end] in seen: start = max(start, seen[arr[end]] + 1) seen[arr[end]] = end max_len = max(max_len, end - start + 1) results.append(max_len) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append(arr) index += 2 return test_cases"},{"question":"Write a function that takes a list of integers as an input and returns a new list that contains only the even numbers from the input list, each multiplied by 3.","solution":"def filter_and_multiply_even_numbers(lst): Takes a list of integers as input and returns a new list with only the even numbers, each multiplied by 3. :param lst: List of integers :return: New list with even numbers multiplied by 3 return [x * 3 for x in lst if x % 2 == 0]"},{"question":"A company\'s HR department is planning to organize team-building activities. To evaluate team collaboration, they want to create a game where employees must form teams under specific constraints. Each team must have exactly `k` members and every member must be unique within that team. The HR department needs a way to determine the number of possible unique teams that can be formed from `n` employees. You have been asked to write a function `count_teams(n, k)` that takes the total number of employees `n` and the required team size `k`, and returns the number of unique teams that can be formed. The result should be returned modulo 10^9+7. Input: - The input consists of multiple test cases. In the first line, a single integer `T` indicates the number of test cases. - The next `T` lines each contain two integer values `n` and `k` respectively, separated by space. Output: - For each test case, print the number of unique teams modulo 10^9+7. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 1000 - 1 ≤ k ≤ n Sample Input: 3 5 3 6 2 10 4 Sample Output: 10 15 210 Note: - The unique teams can be calculated using the binomial coefficient C(n, k) which represents the number of ways to choose `k` elements from a set of `n` elements. - C(n, k) = n! / (k! * (n - k)!) - Remember to use modulo 10^9+7 when computing the results to avoid large integers. ```python # Assuming we were to write this in Python, a possible function to solve the problem could look like this: def count_teams(n, k): MOD = 10**9 + 7 # Function to compute factorial % MOD def factorial(x): result = 1 for i in range(2, x + 1): result = (result * i) % MOD return result # Function to compute modular multiplicative inverse % MOD def mod_inverse(x): return pow(x, MOD - 2, MOD) # Compute nCk % MOD def binomial_coefficient(n, k): if k > n: return 0 return (factorial(n) * mod_inverse(factorial(k)) % MOD * mod_inverse(factorial(n - k))) % MOD return binomial_coefficient(n, k) # Example to use the function T = 3 test_cases = [(5, 3), (6, 2), (10, 4)] for n, k in test_cases: print(count_teams(n, k)) ```","solution":"def count_teams(n, k): MOD = 10**9 + 7 # Function to compute factorial % MOD def factorial(x): result = 1 for i in range(2, x + 1): result = (result * i) % MOD return result # Function to compute modular multiplicative inverse % MOD def mod_inverse(x): return pow(x, MOD - 2, MOD) # Compute nCk % MOD def binomial_coefficient(n, k): if k > n: return 0 return (factorial(n) * mod_inverse(factorial(k)) % MOD * mod_inverse(factorial(n - k))) % MOD return binomial_coefficient(n, k) def process_input(num_cases, cases): results = [] for n, k in cases: results.append(count_teams(n, k)) return results"},{"question":"Given a non-negative integer x, you need to find four integers a, b, c, and d such that 0 <= a, b, c, d <= x and a+b = c+d. If there are multiple solutions, you can return any of them. If no such integers exist, output -1. It is guaranteed that for the given constraints, a solution always exists if x equals 0 or x >= 4. Input The input consists of two lines: - The first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. - The second line contains t integers x_1, x_2, ..., x_t (0≤ x_i≤ 10^5) — the values of x for each test case. Output For each test case, if a solution exists, output four integers a, b, c, and d on a single line. If no solution exists, output -1. Examples Input 5 0 4 10 3 100 Output 0 0 0 0 1 3 2 2 1 9 4 6 1 2 2 1 2 98 30 70 Note In the first test case, x equals 0, so the only possible solution is that all four integers are zero. In the second test case, one possible solution is (a=1, b=3) and (c=2, d=2), both satisfy the condition a+b = c+d. In the third test case, one possible solution is (a=1, b=9) and (c=4, d=6), both satisfy the condition a+b = c+d. In the fourth test case, one possible solution is (a=1, b=2) and (c=2, d=1), both satisfy the condition a+b = c+d. In the fifth test case, one possible solution is (a=2, b=98) and (c=30, d=70), both satisfy the condition a+b = c+d.","solution":"def find_four_integers(t, values): results = [] for x in values: if x == 0: results.append(\\"0 0 0 0\\") elif x >= 4: a, b, c, d = 1, x - 1, 2, x - 2 results.append(f\\"{a} {b} {c} {d}\\") else: results.append(\\"-1\\") return results"},{"question":"A software company is organizing a coding marathon. Participants are allowed to work in teams, with each team assigned a unique team code. However, some participants, in an attempt to gain unfair advantages, have registered multiple teams under their supervision. The company has a policy to disqualify such participants to ensure fair play. You are tasked with identifying such cases. INPUT: - The first line contains an integer `n` indicating the number of team registrations. - Each of the next `n` lines contains two details separated by a space: a participant\'s email and their team code. OUTPUT: - Print a list of emails of participants who have registered more than one team. CONSTRAINTS: 1 <= n <= 1000 1 <= email length, team code length <= 30 SAMPLE INPUT: 8 alice@example.com teamA bob@example.com teamB alice@example.com teamC carol@example.com teamD dave@example.com teamE eve@example.com teamF carol@example.com teamG alice@example.com teamH SAMPLE OUTPUT: alice@example.com carol@example.com","solution":"def find_disqualified_participants(n, registrations): Identify participants who have registered more than one team. Parameters: - n (int): number of team registrations. - registrations (list of str): list of registrations where each registration is \'email team_code\'. Returns: - list of str: emails of participants who registered more than one team. from collections import defaultdict # Dictionary to track the count of teams per participant participant_teams = defaultdict(set) for registration in registrations: email, team_code = registration.split() participant_teams[email].add(team_code) # Identify participants with more than one team disqualified_emails = [email for email, teams in participant_teams.items() if len(teams) > 1] return sorted(disqualified_emails)"},{"question":"A hiking group wants to determine the distance they should travel over a set number of days to achieve optimal rest and minimize exhaustion. They have a plan where they want to allocate the hiking distance into daily segments such that the maximum distance hiked in a single day is minimized. Given the total distance to be hiked and the number of days the hike will take place, find the optimal way to partition the total distance into daily segments. Write a program that distributes the total hiking distance over a set number of days such that the maximum distance hiked in a single day is minimized. -----Input----- The first line contains an integer N (1 leq N leq 10^6), the total distance to be hiked. The second line contains an integer D (1 leq D leq 10^5), the number of days over which the hike will occur. -----Output----- Output a single integer, the minimized maximum distance for any single day of the hike. -----Examples----- Sample Input: 100 5 Sample Output: 20 Sample Input: 123 5 Sample Output: 25 Sample Input: 10 3 Sample Output: 4","solution":"def minimized_maximum_distance(N, D): Returns the minimized maximum distance for any single day of the hike. :param N: Total distance to be hiked. :param D: Number of days the hike will occur. :return: Minimized maximum distance for any single day. return (N + D - 1) // D"},{"question":"A new messaging app has been launched, and users can send and receive messages in the form of strings. The developers have noticed a problem: users sometimes write messages with excessive whitespace, making the messages difficult to read. Your task is to write a function that will clean up the message by removing any leading or trailing whitespace and reducing any sequence of multiple spaces within the message to a single space. For example, given the following message: ``` \\" Hello, this is a sample message! \\" ``` The cleaned-up message should be: ``` \\"Hello, this is a sample message!\\" ``` -----Input:----- The input consists of a single line containing the message. The message may have leading, trailing, or multiple spaces between words, and its length will not exceed 200 characters. -----Output:----- The output is a single line containing the cleaned-up message. -----Constraints:----- - The length of the input message will be between 1 and 200 characters. - The message will only contain printable ASCII characters. -----Sample Input----- ``` \\" Hello, this is a sample message! \\" ``` -----Sample Output----- ``` \\"Hello, this is a sample message!\\" ```","solution":"def clean_message(message): Cleans up the message by removing any leading or trailing whitespace and reducing any sequence of multiple spaces within the message to a single space. return \' \'.join(message.split())"},{"question":"In an agricultural field, a farmer plants crops in an `m x n` grid. Each cell in the grid can either contain a crop `C` or be barren land `B`. The farmer wants to determine the number of isolated crop clusters. A crop cluster is defined as a group of connected cells containing the crop `C`, and two cells are considered connected if they share a side. Write a program to determine the number of isolated crop clusters in the grid. -----Input----- The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 1000) — the number of rows and columns in the grid. Each of the next `m` lines contains a string of length `n` consisting of characters \'C\' or \'B\', representing the crop (`C`) or barren land (`B`). -----Output----- Output a single integer, which is the number of isolated crop clusters. -----Examples----- Sample Input: 4 5 CCBCC BCCCC CBBCC CCBCC Sample Output: 2 Sample Input: 3 3 CCC CCC CCC Sample Output: 1 Sample Input: 3 3 BCB CCC BCB Sample Output: 1","solution":"def count_crops_clusters(m, n, grid): Returns the number of isolated crop clusters in the m x n grid. def dfs(x, y): # Stack approach for DFS to avoid recursion depth issues in large grids stack = [(x, y)] visited.add((x, y)) while stack: i, j = stack.pop() for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]: ni, nj = i + di, j + dj if 0 <= ni < m and 0 <= nj < n and grid[ni][nj] == \'C\' and (ni, nj) not in visited: visited.add((ni, nj)) stack.append((ni, nj)) visited = set() clusters_count = 0 for i in range(m): for j in range(n): if grid[i][j] == \'C\' and (i, j) not in visited: dfs(i, j) clusters_count += 1 return clusters_count"},{"question":"An online e-commerce platform is testing a new algorithm to prevent fraudulent purchases. They have a list of purchase orders, each containing an order ID, and the amount spent by a customer. The goal is to filter out any orders where the amount spent is identical to any of the previous five orders, as these are suspected to be fraudulent. Write a function `filter_frauds` that reads a list of purchase orders and returns a list of valid purchase orders after filtering out the fraudulent ones. Each order is represented as a dictionary with keys \'order_id\' and \'amount\'. **Function Signature:** ```python def filter_frauds(orders: List[Dict[str, Union[int, float]]]) -> List[Dict[str, Union[int, float]]]: ``` **Input:** - `orders` - a list of dictionaries, where each dictionary has the following structure: ```python {\\"order_id\\": int, \\"amount\\": float} ``` `order_id` is a unique integer, and `amount` is a float representing the amount spent. **Output:** - A list of dictionaries representing the valid purchase orders after filtering out the fraudulent ones. The order of the remaining orders should be preserved from the input list. **Constraints:** - The length of the orders list will not exceed 10^5. - The amounts in the orders will not exceed 10^6 in value. **Example:** ```python orders = [ {\\"order_id\\": 1, \\"amount\\": 100.0}, {\\"order_id\\": 2, \\"amount\\": 80.0}, {\\"order_id\\": 3, \\"amount\\": 100.0}, {\\"order_id\\": 4, \\"amount\\": 150.0}, {\\"order_id\\": 5, \\"amount\\": 80.0}, {\\"order_id\\": 6, \\"amount\\": 200.0}, {\\"order_id\\": 7, \\"amount\\": 150.0}, {\\"order_id\\": 8, \\"amount\\": 250.0}, ] print(filter_frauds(orders)) ``` **Output:** ```python [ {\\"order_id\\": 1, \\"amount\\": 100.0}, {\\"order_id\\": 2, \\"amount\\": 80.0}, {\\"order_id\\": 4, \\"amount\\": 150.0}, {\\"order_id\\": 6, \\"amount\\": 200.0}, {\\"order_id\\": 8, \\"amount\\": 250.0}, ] ```","solution":"def filter_frauds(orders): Filters out fraudulent orders where the amount spent is identical to any of the previous five orders. valid_orders = [] last_five_amounts = [] for order in orders: if order[\'amount\'] in last_five_amounts: continue valid_orders.append(order) last_five_amounts.append(order[\'amount\']) if len(last_five_amounts) > 5: last_five_amounts.pop(0) return valid_orders"},{"question":"A palindrome is a string that reads the same forwards and backwards. Given a string s, you need to find the minimum number of operations required to convert it into a palindrome. In one operation, you can select any character in the string and replace it with any other character. -----Input----- The first line contains an integer q (1 leq q leq 10^4) — the number of queries. Each of the next q lines contains a single string s with a length of up to 10^5. It is guaranteed that the total length of strings in all test cases does not exceed 10^6. -----Output----- For each query, output a single integer — the minimum number of operations needed to make the string a palindrome. -----Examples----- Input 3 abcd racecar abccbx Output 2 0 1 -----Note----- In the first test case, we can change \'a\' to \'d\' and \'b\' to \'c\', resulting in the string \\"dccd\\". In the second test case, the string \\"racecar\\" is already a palindrome, so no operations are needed. In the third test case, changing the second last \'c\' to \'x\' makes the string \\"abccxx\\", which is a palindrome.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to make a string a palindrome. left, right = 0, len(s) - 1 operations = 0 while left < right: if s[left] != s[right]: operations += 1 left += 1 right -= 1 return operations def min_operations_for_queries(q, queries): For each query string s, returns the minimum number of operations needed to make it a palindrome. results = [] for s in queries: results.append(min_operations_to_palindrome(s)) return results"},{"question":"You are given a list of integers and need to determine if there is a way to split the list into two non-empty subsets such that the sum of the elements in each subset is equal. Your task is to write a function `can_partition(nums)` that will take in a list of integers `nums` and return `True` if the list can be split in the required way, otherwise, return `False`. # Input - A list of integers `nums` where `1 ≤ len(nums) ≤ 200` and each integer `1 ≤ nums[i] ≤ 100`. # Output - A boolean value `True` or `False`. # Examples Example 1 Input: ``` can_partition([1, 5, 11, 5]) ``` Output: ``` True ``` Explanation: The list can be partitioned into `[1, 5, 5]` and `[11]`, whose sums are both 11. Example 2 Input: ``` can_partition([1, 2, 3, 5]) ``` Output: ``` False ``` Explanation: The list cannot be partitioned into two subsets with equal sum. # Note - In the first example, we can split the list into `[1, 5, 5]` and `[11]`, both with a sum of 11. - In the second example, there is no way to split the list such that both subsets have the same sum.","solution":"def can_partition(nums): Returns True if the list can be partitioned into two subsets with equal sum. total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition it into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Create a dp array to store results of subproblems dp = [False] * (target + 1) dp[0] = True # Iterate through the numbers in the array for num in nums: # Iterate through the dp array backwards to update the values for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Alice has a shelf of books, where each book belongs to one of several series. Each series is uniquely identified by a string. Alice wants to arrange the books on her shelf such that no two books from the same series are adjacent to each other. She can perform the following operation any number of times: Select any two books from the shelf and swap their positions. Help Alice determine if it is possible to arrange the books such that no two books from the same series are adjacent, and if so, provide one possible valid arrangement. If it is not possible, return -1. ----- Constraints ----- - 1 ≤ number of books ≤ 10^5 - Each book\'s series is represented by a string of length between 1 and 50. - The total number of series does not exceed the number of books. ----- Input ----- The input is given from Standard Input in the following format: number_of_books series_name_1 series_name_2 series_name_3 ... series_name_{number_of_books} ----- Output ----- If it is possible to arrange the books so that no two books from the same series are adjacent, print one possible valid arrangement as a space-separated string of series names. If it is not possible, print -1. ----- Sample Input ----- 5 \\"HarryPotter\\" \\"LOTR\\" \\"HarryPotter\\" \\"LOTR\\" \\"Hobbit\\" ----- Sample Output ----- \\"HarryPotter\\" \\"LOTR\\" \\"HarryPotter\\" \\"Hobbit\\" \\"LOTR\\" Explanation: One valid arrangement is given in the output, where no two \\"HarryPotter\\" books or \\"LOTR\\" books are adjacent to each other.","solution":"from collections import Counter import heapq def arrange_books(number_of_books, book_series): Determines if it is possible to arrange books such that no two books from the same series are adjacent. If possible, returns one possible valid arrangement, otherwise returns -1. if number_of_books == 1: return \\" \\".join(book_series) series_count = Counter(book_series) max_heap = [(-count, series) for series, count in series_count.items()] heapq.heapify(max_heap) prev_count, prev_series = 0, \\"\\" result = [] while max_heap: count, series = heapq.heappop(max_heap) result.append(series) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_series)) count += 1 prev_count, prev_series = count, series if len(result) != number_of_books: return -1 return \\" \\".join(result)"},{"question":"The coding-expectation company wants to assess the skill level of candidates through an interesting problem involving prime numbers. For a given integer n, they would like candidates to determine the nth prime number. You are required to create an efficient program to solve this problem, as the value of n can be large. To help candidates, you can give some examples on how to calculate the nth prime number. Your task is to implement this functionality. Input The input consists of a single integer n (1 ≤ n ≤ 10000). Output Print the nth prime number. Example Input 6 Output 13 Explanation The first six prime numbers are 2, 3, 5, 7, 11, and 13. Hence, the 6th prime number is 13.","solution":"def nth_prime(n): Returns the nth prime number. if n < 1: raise ValueError(\\"n must be a positive integer greater than or equal to 1.\\") primes = [] num = 2 while len(primes) < n: for p in primes: if num % p == 0: break else: primes.append(num) num += 1 return primes[-1]"},{"question":"Shreya is managing a warehouse that stores multiple types of products. The warehouse is organized in a grid where each cell can hold a certain amount of one type of product. Shreya wants to move a subset of the products to a new warehouse location, ensuring that the total weight of the products moved is as close as possible to a given target weight without exceeding it. Each product has a weight associated with it, and she can select any combination of products across the grid to move. Write a program to determine the maximum possible total weight of products that Shreya can move without exceeding the target weight. -----Input----- The first line contains two integers n and m (1 leq n, m leq 10) — the dimensions of the grid. The next n lines each contain m integers. The j-th integer in the i-th line represents the weight of the product in cell (i, j) of the grid. The last line contains a single integer W (1 leq W leq 10000) — the target weight. -----Output----- Output one integer which denotes the maximum possible total weight of products that Shreya can move without exceeding the target weight. -----Examples----- Input 2 3 1 2 3 4 5 6 10 Output 10 Input 3 3 10 20 30 40 50 60 70 80 90 100 Output 100 Input 2 2 5 5 5 5 15 Output 15 -----Note----- In the first example, Shreya can move products with weights 1, 2, 3, and 4 to achieve the total weight of 10 exactly. This is the maximum possible total weight that does not exceed the target weight of 10. In the second example, Shreya can move products with weights 10, 20, 30, and 40 to achieve the total weight of 100 exactly. In the third example, Shreya can move all weights from the grid because their total sum (20) is more than the target weight (15), but summing three weights 5+5+5 or combinations of two 5’s twice gives the maximum total weight of 15.","solution":"def max_possible_weight(n, m, grid, W): Returns the maximum possible total weight of products that can be moved without exceeding the target weight W. from itertools import combinations # Flatten the grid to treat it as a list of item weights weights = [grid[i][j] for i in range(n) for j in range(m)] max_weight = 0 # Generate all possible subsets of weights for r in range(1, len(weights) + 1): for subset in combinations(weights, r): subset_weight = sum(subset) if subset_weight <= W and subset_weight > max_weight: max_weight = subset_weight return max_weight"},{"question":"Given a list of numbers, create a function that will return a boolean indicating whether the list is a \\"Zigzag Sequence\\". A sequence of numbers is considered a Zigzag Sequence if each element is either strictly greater than or strictly less than its neighbors. - If the list is empty or has only one element, return `False`. - If the list has exactly two elements, return `True` as long as they are not equal. Examples `[1, 3, 2, 4, 3]` ==> `True` `[5, 5, 5, 5]` ==> `False` `[1, 2, 3]` ==> `False`","solution":"def is_zigzag_sequence(nums): Determines if the given list of numbers is a Zigzag Sequence. A sequence of numbers is considered a Zigzag Sequence if each element is either strictly greater than or strictly less than its neighbors. Args: nums (list): List of numbers. Returns: bool: True if the list is a Zigzag Sequence, otherwise False. if len(nums) < 2: return False if len(nums) == 2: return nums[0] != nums[1] for i in range(1, len(nums) - 1): if not ((nums[i - 1] < nums[i] > nums[i + 1]) or (nums[i - 1] > nums[i] < nums[i + 1])): return False return True"},{"question":"Chef is trying to cut a large rectangular cake which is represented by a grid of cells of size M x N. Each cell can be either plain (represented by \'.\') or contain a strawberry (represented by \'S\'). Chef can only make vertical or horizontal cuts between the cells, and once a cut is made, it continues across the entire cake. Chef wants to cut the cake into exactly K pieces such that no piece contains more than one strawberry. Determine if it is possible for Chef to make K cuts following the constraints, or output \\"NO\\" if it is not possible. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three space-separated integers M, N, and K. The next M lines of each test case contain a string of length N, representing the rows of the cake grid. ------ Output ------ For each test case, print either \\"YES\\" if it is possible to cut the cake into K pieces following the constraints, or \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M, N ≤ 50 0 ≤ K ≤ 2500 ----- Sample Input 1 ------ 3 3 3 4 ... .S. ... 5 5 5 ..... ...S. ..... .S... ..... 4 4 2 .S.. ..S. .... .... ----- Sample Output 1 ------ YES NO NO ----- Explanation 1 ------ Example case 1: Chef can make 4 cuts (2 vertical cuts and 2 horizontal cuts) dividing the cake into 9 pieces each containing at most one strawberry. Example case 2: Chef cannot make exactly 5 cuts and ensure that no piece contains more than one strawberry. Example case 3: Chef needs more than 2 cuts to ensure no piece contains more than one strawberry.","solution":"def can_cut_into_k_pieces(M, N, K, cake): # Count the number of strawberries in the cake strawberry_count = sum(row.count(\'S\') for row in cake) # If the number of strawberries is greater than K, it\'s impossible to achieve the goal. if strawberry_count > K: return \\"NO\\" # If there are no strawberries, we can always make K pieces if strawberry_count == 0: return \\"YES\\" # If there\'s exactly one strawberry, we need K to be at least 1 if strawberry_count == 1 and K >= 1: return \\"YES\\" # If there are more strawberries, we should ensure that we can separate them into <= K pieces. cut_rows = [0] * (M-1) cut_cols = [0] * (N-1) for i in range(M): for j in range(N): if cake[i][j] == \'S\': row_cut = i col_cut = j for k in range(i, M-1): cut_rows[k] += 1 for l in range(j, N-1): cut_cols[l] += 1 possible_cuts = sum(r > 0 for r in cut_rows) + sum(c > 0 for c in cut_cols) if possible_cuts <= K: return \\"YES\\" return \\"NO\\" def solve(test_cases): results = [] for case in test_cases: M, N, K, cake = case results.append(can_cut_into_k_pieces(M, N, K, cake)) return results # For testing purposes def parse_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): M, N, K = map(int, input_lines[index].split()) index += 1 cake = [input_lines[i] for i in range(index, index + M)] index += M test_cases.append((M, N, K, cake)) return test_cases"},{"question":"You are given an integer array nums and an integer k. You can perform the following operation on the array any number of times: Select any subarray of size k and reverse it. Your task is to determine if it\'s possible to make the whole array sorted (in non-decreasing order) by performing the above operations. Example 1: Input: nums = [3, 1, 2, 4] k = 2 Output: True Explanation: By reversing the subarray [3, 1], we get [1, 3, 2, 4], and then by reversing the subarray [3, 2], we get [1, 2, 3, 4]. Example 2: Input: nums = [3, 1, 2, 4] k = 3 Output: False Explanation: No matter how we reverse a subarray of size 3, we can\'t sort the entire array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canBeSorted() which takes an Integer array nums and an Integer k as input and returns a boolean value (True or False) indicating whether the array can be sorted by the given operations. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= nums.length <= 10^{5} 1 <= nums[i] <= 10^{9} 1 <= k <= nums.length","solution":"def canBeSorted(nums, k): Determines if the array can be sorted by reversing subarrays of size k. if k == 1: # If k is 1, can\'t reverse anything, just need to check if already sorted return nums == sorted(nums) if k % 2 == 0: # If k is even, we can always sort the array by reversing adjacent pairs. return True # If k is odd, we need to check if the array is already sorted in segments of length k. for i in range(0, len(nums) - k + 1, k): segment = nums[i:i + k] if sorted(segment) != segment: return False return True"},{"question":"A new digital library system allows registered users to borrow and return books. Each book can be identified by a unique `book_id`, and each user is identified by a unique `user_id`. The system also maintains a record of the current stock of each book. You are required to write a program that handles the borrowing and returning of books for the library. The program should support the following operations: 1. BORROW `user_id book_id` - Borrow a book with the given `book_id`. If the book is available (stock is greater than 0), the stock should be decreased by 1 for that book, and the program should print \\"SUCCESS\\". If the book is not available (stock is 0), print \\"OUT OF STOCK\\". 2. RETURN `user_id book_id` - Return a borrowed book with the given `book_id`. The stock should be increased by 1 for that book, and the program should print \\"RETURNED\\". 3. STOCK `book_id` - Check the current stock for a book with the given `book_id`. The program should print the current stock for the book. Constraints: - 1 ≤ T ≤ 100 : Number of operations. - 1 ≤ stock of any book ≤ 1000 - `book_id` and `user_id` are strings that contain only alphanumeric characters and have a length of up to 10 characters. Input First line contains the number of operations `T`. Next `T` lines contain one of the three operations: \\"BORROW `user_id book_id`\\", \\"RETURN `user_id book_id`\\", or \\"STOCK `book_id`\\". Output For each \\"BORROW\\", \\"RETURN\\", or \\"STOCK\\" operation, output the result appropriate for each command. SAMPLE INPUT 6 STOCK B001 BORROW U001 B001 STOCK B001 BORROW U002 B001 RETURN U001 B001 STOCK B001 SAMPLE OUTPUT 0 OUT OF STOCK 0 SUCCESS RETURNED 1 Explanation 1. Initially stock for the book with `book_id` B001 is 0. 2. User U001 tries to borrow book B001 but it is out of stock. 3. Stock for book B001 remains 0. 4. Another user U002 also tries to borrow book B001 but still it is out of stock. 5. User U001 returns the book B001. So, stock increases to 1. 6. Stock for book B001 is now 1.","solution":"class LibrarySystem: def __init__(self): self.books = {} def borrow(self, user_id, book_id): if book_id in self.books and self.books[book_id] > 0: self.books[book_id] -= 1 return \\"SUCCESS\\" return \\"OUT OF STOCK\\" def return_book(self, user_id, book_id): if book_id not in self.books: self.books[book_id] = 0 self.books[book_id] += 1 return \\"RETURNED\\" def stock(self, book_id): return self.books.get(book_id, 0) def process_commands(commands): library_system = LibrarySystem() results = [] for command in commands: parts = command.split() action = parts[0] if action == \\"BORROW\\": user_id = parts[1] book_id = parts[2] result = library_system.borrow(user_id, book_id) results.append(result) elif action == \\"RETURN\\": user_id = parts[1] book_id = parts[2] result = library_system.return_book(user_id, book_id) results.append(result) elif action == \\"STOCK\\": book_id = parts[1] result = library_system.stock(book_id) results.append(str(result)) return results"},{"question":"Palindrome Partitioning Given a string s, partition it such that every substring of the partition is a palindrome. Return the minimum cuts needed for a palindrome partitioning of s. A palindrome is a string that reads the same backward as forward. Input The input consists of multiple test cases. Each test case contains a single line with a string s, where 1 ≤ |s| ≤ 1000. The end of the input is signaled by the word \\"END\\". Output For each test case, print the minimum number of cuts needed for a palindrome partitioning of the input string. Sample Input abcbm aabb abc ababbbabbababa END Sample Output 2 1 2 3 Explanation The first test case (\\"abcbm\\") has the possible partitions like [\\"a\\", \\"bcb\\", \\"m\\"] which requires 2 cuts. The second test case (\\"aabb\\") can be partitioned into [\\"aa\\", \\"bb\\"] with only 1 cut. The third test case (\\"abc\\") can be partitioned into [\\"a\\", \\"b\\", \\"c\\"] which requires 2 cuts. The fourth test case (\\"ababbbabbababa\\") has the partitions like [\\"aba\\", \\"bbb\\", \\"abba\\", \\"bab\\", \\"a\\"] with 3 cuts.","solution":"def minCut(s): n = len(s) dp = [[False] * n for _ in range(n)] cut = [0] * n for end in range(n): minCuts = end for start in range(end + 1): if s[start] == s[end] and (end - start <= 1 or dp[start + 1][end - 1]): dp[start][end] = True minCuts = 0 if start == 0 else min(minCuts, cut[start - 1] + 1) cut[end] = minCuts return cut[-1] def process_input(input_text): lines = input_text.strip().split() results = [] for line in lines: if line == \\"END\\": break results.append(minCut(line)) return results"},{"question":"You are given an integer N. Construct an array A of length N such that: 1. For all i (1 ≤ i ≤ N), A[i] = 1 or A[i] = -1. 2. The sum of the prefix sums of A is as small as possible. Recall that the prefix sum of the array A for i (1 ≤ i ≤ N) is defined as P_i = A_1 + A_2 + ... + A_i. It is guaranteed that for the given constraints, at least one such array always exists. ------ Input Format ------ - The first line of the input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The only line of each test case contains an integer N, the length of the array to be constructed. ------ Output Format ------ For each test case, output a single line containing N space-separated integers A[1], A[2], ..., A[N], denoting the elements of the array A. If there exist multiple such arrays, print any. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 - The sum of N over all test cases does not exceed 10^5. ------ Sample Input 1 ------ 2 3 4 ------ Sample Output 1 ------ 1 -1 1 1 -1 1 -1 ------ Explanation 1 ------ Test case 1: A possible array satisfying all the conditions is [1, -1, 1]: - The prefix sums are [1, 0, 1] and their sum is 1 + 0 + 1 = 2. Test case 2: A possible array satisfying all the conditions is [1, -1, 1, -1]: - The prefix sums are [1, 0, 1, 0] and their sum is 1 + 0 + 1 + 0 = 2.","solution":"def construct_array(N): Construct an array A of length N such that: 1. For all i (1 ≤ i ≤ N), A[i] = 1 or A[i] = -1. 2. The sum of the prefix sums of A is as small as possible. A = [] for i in range(N): if i % 2 == 0: A.append(1) else: A.append(-1) return A"},{"question":"Jerry is fond of cryptography and loves to encode messages using the Caesar Cipher technique. In this technique, each letter in the plaintext is shifted a certain number of places down or up the alphabet. To impress his friend Tom, Jerry wants to implement a program that can encode a message using a specified shift value. Input: - The first line will contain an integer T, the number of test cases. (1 <= T <= 100) - Each of the next T lines contains a test case consisting of an integer S (the shift value, where -25 <= S <= 25) and a string M (the message to be encoded, consisting only of lowercase alphabetical characters with a length of 1 to 100). Output: - T lines of encoded messages, one for each test case. Note: - The alphabet is considered to be cyclic, so after \'z\' comes \'a\' for positive shifts, and before \'a\' comes \'z\' for negative shifts. Example: Input: 3 3 hello -2 world 1 zebra Output: khoor umpjb afcsb","solution":"def caesar_cipher(T, test_cases): Encodes each message using the provided shift value in the Caesar Cipher technique. :param T: Integer, number of test cases :param test_cases: List of tuples containing shift value and message :return: List of encoded messages encoded_messages = [] for S, M in test_cases: encoded_message = \\"\\" for char in M: new_char = chr((ord(char) - ord(\'a\') + S) % 26 + ord(\'a\')) encoded_message += new_char encoded_messages.append(encoded_message) return encoded_messages"},{"question":"Implement a function `findKthSmallestMatrixElement(matrix, k)` that takes in a 2D matrix of size n x m where each row and each column is sorted in ascending order, and an integer `k`. The function should return the kth smallest element in the matrix. For example, given the matrix: ``` matrix = [ [1, 3, 5], [6, 7, 12], [11, 14, 14] ] ``` And `k = 6`, the function should return `11`. The matrix will have dimensions 1 ≤ n, m ≤ 300, and the elements will be integers in the range -10^9 to 10^9. Example: ```python matrix = [ [1, 5, 9], [10, 11, 13], [12, 13, 15] ] k = 8 findKthSmallestMatrixElement(matrix, k) # returns 13 ``` Hints: 1. Utilize a min-heap to solve this problem efficiently. 2. Think about how you can leverage the sorted rows and columns property of the matrix.","solution":"import heapq def findKthSmallestMatrixElement(matrix, k): Returns the kth smallest element in a sorted 2D matrix. :param matrix: List[List[int]], a 2D matrix sorted row wise and column wise :param k: int, the k-th order statistic :return: int, the k-th smallest element in the matrix n, m = len(matrix), len(matrix[0]) # Min-heap to store entries of the form (value, row, col) min_heap = [(matrix[i][0], i, 0) for i in range(min(n, k))] heapq.heapify(min_heap) # Extract min k times for _ in range(k - 1): value, i, j = heapq.heappop(min_heap) if j + 1 < m: heapq.heappush(min_heap, (matrix[i][j + 1], i, j + 1)) return heapq.heappop(min_heap)[0]"},{"question":"A treasure map is given that consists of a grid with `n` rows and `m` columns. Each cell in the grid has a single character, which can be either \'S\', \'E\', \'B\', or \'.\': - \'S\' signifies the starting point. - \'E\' signifies the endpoint. - \'B\' signifies an obstacle (block) that cannot be passed through. - \'.\' signifies an empty cell that can be traversed. Your goal is to determine if there\'s a path from the starting point \'S\' to the endpoint \'E\', moving only up, down, left, or right, and without passing through any \'B\' cells. -----Input----- The first line of input contains two integers `n` and `m` (`2 ≤ n, m ≤ 100`) — the number of rows and columns in the grid. The following `n` lines each contain a string of `m` characters representing the rows of the grid. There will always be exactly one \'S\' and one \'E\' in the grid. -----Output----- Print \\"Yes\\" if there exists a path from \'S\' to \'E\', otherwise print \\"No\\". You may print each letter in any case (upper or lower). -----Examples----- Input 4 4 S..B ..B. B... ...E Output Yes Input 3 3 S.B .B. .BE Output No","solution":"def is_path_exists(grid): from collections import deque n = len(grid) m = len(grid[0]) # Find the starting point \'S\' start = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) break if start: break # Direction vectors for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Use a queue to perform BFS queue = deque([start]) visited = set() visited.add(start) while queue: x, y = queue.popleft() if grid[x][y] == \'E\': return \\"Yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] != \'B\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"No\\""},{"question":"Given a string, determine the length of the longest substring without repeating characters. Example: For the string \\"abrkaabcdefghijjxxx\\", the longest substring without repeating characters is \\"abcdefghij\\", which has a length of 10. Function Description: Complete the function `lengthOfLongestSubstring` in the editor below. `lengthOfLongestSubstring` has the following parameter: - `s`: a string Returns: - `int`: the length of the longest substring without repeating characters. Input Format: The first line contains an integer t denoting the number of test cases. The t subsequent lines each contain a string s. Constraints: 1 leq t leq 10 0 leq |s| leq 10^4 Sample Input: 2 abcabcbb bbbbb Sample Output: 3 1 Explanation: For the string \\"abcabcbb\\", the answer is \\"abc\\", with the length of 3. For the string \\"bbbbb\\", the answer is \\"b\\", with the length of 1.","solution":"def lengthOfLongestSubstring(s): Returns the length of the longest substring without repeating characters. :param s: a string :return: an integer, the length of the longest substring without repeating characters char_index = {} longest = 0 start = 0 for end in range(len(s)): if s[end] in char_index and char_index[s[end]] >= start: start = char_index[s[end]] + 1 char_index[s[end]] = end longest = max(longest, end - start + 1) return longest"},{"question":"You are given a sequence of n integers, which are initially all zeros. You need to handle two types of operations on this sequence: * set x y — set the value of the x-th integer in the sequence to y. * sum l r — find the sum of integers in the sequence from position l to position r (inclusive). Help to efficiently manage the operations. Input The first input line contains the number of operations, q (1 ≤ q ≤ 2·10^5). Each of the next q lines contains an operation in one of the two formats described above. The array\'s length is not explicitly given but can be assumed to be at least as large as the maximum value of x in any set operation. Output For each sum l r operation, output the sum of the integers in the sequence over the specified range. Examples Input 10 set 1 5 set 2 3 sum 1 2 set 3 2 sum 1 3 sum 2 3 set 2 0 sum 1 2 sum 1 3 set 1 7 Output 8 10 5 5 7","solution":"class Sequence: def __init__(self): self.values = {} def set(self, x, y): Sets the value of the x-th integer in the sequence to y. self.values[x] = y def sum(self, l, r): Returns the sum of integers in the sequence from position l to position r (inclusive). summation = 0 for i in range(l, r + 1): if i in self.values: summation += self.values[i] return summation"},{"question":"You are tasked with designing a city road network for a new smart city project. The city will consist of n buildings connected by roads. The goal is to ensure that there is no cycle in the road network while minimizing the total length of the roads. Thus, the network should form a Minimum Spanning Tree (MST). Each building is represented as a node, and each possible road between two buildings is represented as an edge with an associated length, or weight. The length of each road is given by its Euclidean distance. You are to write a program that, given the coordinates of the buildings, computes the minimum total length of the roads required to connect all the buildings without any cycles. Input The first line contains a number n (2 ≤ n ≤ 1000) — the number of buildings. The next n lines contain integer coordinates of the buildings in format \\"xi yi\\" ( -1000 ≤ xi, yi ≤ 1000). Output Output a single number — the minimum total length of the roads required. The result should be accurate to within an absolute or relative error of 10^-6. Examples Input 4 0 0 0 1 1 0 1 1 Output 3.0000000000 Input 3 0 0 4 0 0 3 Output 7.0000000000","solution":"import math import heapq def calculate_distance(x1, y1, x2, y2): return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) def minimum_spanning_tree(n, coordinates): edges = [] for i in range(n): for j in range(i + 1, n): x1, y1 = coordinates[i] x2, y2 = coordinates[j] distance = calculate_distance(x1, y1, x2, y2) edges.append((distance, i, j)) edges.sort() parent = list(range(n)) def find(v): if parent[v] != v: parent[v] = find(parent[v]) return parent[v] def union(v1, v2): root1 = find(v1) root2 = find(v2) if root1 != root2: parent[root2] = root1 mst_cost = 0 for distance, i, j in edges: if find(i) != find(j): union(i, j) mst_cost += distance return mst_cost"},{"question":"Jack and Jill are playing a game with an array of integers. The array is initially sorted in ascending order. Each turn, Jack or Jill can choose to either remove the smallest element or the largest element from the array. The game ends when there is only one element remaining in the array, and the player who removes the second-to-last element wins. Jack always starts first. Assuming both play optimally, determine who will win the game. Input: - The first line contains an integer n, the number of elements in the array. - The second line contains n integers representing the elements of the array. Output: - Output \\"JACK\\" if Jack wins, and \\"JILL\\" if Jill wins. Constraints: 1 ≤ n ≤ 100000 1 ≤ A_i ≤ 100000 Sample Input 1: 5 1 2 3 4 5 Sample Output 1: JILL Sample Input 2: 4 1 3 7 9 Sample Output 2: JACK Explanation: In the first example, the sequence of moves are as follows: - Jack removes 5, Jill removes 1 - Jack removes 4, Jill removes 2 - Jack removes 3, and only one element, 3, is left, so Jill wins because Jack made the second-to-last move. In the second example, the sequence of moves are as follows: - Jack removes 9, Jill removes 1 - Jack removes 7, Jill removes 3 - Jack removes and the last element is left, meaning Jill had removed the second-to-last element, so Jack wins.","solution":"def game_winner(n, array): Determines the winner of the game given the number of elements and the array. :param n: int - the number of elements in the array :param array: list of int - the elements of the array :return: str - \\"JACK\\" if Jack wins, \\"JILL\\" if Jill wins return \\"JILL\\" if n % 2 == 1 else \\"JACK\\""},{"question":"Tom is an avid hiker and loves to explore mountains. During one of his expeditions, he decided to log the sequence of elevations he ascended and descended. Now, Tom wants to determine the longest continuous uphill path. An uphill path is defined as a sequence of consecutive elevations where each elevation is greater than the previous one. Write a program to help Tom find the length of the longest uphill path. -----Input:----- - The first line will contain an integer T, representing the number of test cases. Then the test cases follow. - Each test case contains two lines. The first line contains an integer N, representing the number of elevations logged by Tom. - The second line contains N integers, representing the sequence of elevations. -----Output:----- For each test case, print the length of the longest continuous uphill path in a new line. -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ elevation ≤ 10^9 -----Sample Input:----- 2 5 1 2 2 4 3 6 3 4 5 1 2 3 -----Sample Output:----- 2 3","solution":"def longest_uphill_path(elevations): Returns the length of the longest continuous uphill path in the list of elevations. if not elevations: return 0 max_length = 0 current_length = 1 # at least one elevation is considered as a path for i in range(1, len(elevations)): if elevations[i] > elevations[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 # Checking the last segment if it was the longest if current_length > max_length: max_length = current_length return max_length def longest_uphill_paths(test_cases): Given a list of test cases, where each test case is a tuple of (N, elevations), returns a list of the longest continuous uphill path length for each test case. results = [] for _, elevations in test_cases: results.append(longest_uphill_path(elevations)) return results"},{"question":"In a sports event, athletes competed in multiple events, and their scores for each event have been recorded. The athlete with the highest total score wins. If there is a tie, the athlete with the lowest participant number is declared the winner. Create a program that reads the list of participant numbers, the number of events, and the scores of each athlete in each event. The program should output the participant number of the winner and their total score. If there are multiple winners, the participant number with the lower number should be the winner. Input The input is given in the following format. n m a1 s11 s12 ... s1m a2 s21 s22 ... s2m :: an sn1 sn2 ... snm n (1 ≤ n ≤ 20) represents the number of participants and m (1 ≤ m ≤ 10) represents the number of events. ai represents the participant number. Participant numbers are different integers between 1 and n. sij (0 ≤ sij ≤ 100) represents the score of participant ai in event j. Output Output the winner\'s participant number and their total score on one line separated by a blank. Example Input 4 3 1 30 40 20 2 25 50 30 3 20 60 25 4 25 50 35 Output 2 105","solution":"def find_winner(participants_scores): Finds the winner based on the highest total score. In case of a tie, the participant with the lower number wins. :param participants_scores: List of tuples where each tuple contains participant number and their scores in all events. :return: Tuple containing the winner\'s participant number and their total score. max_score = -1 winner_info = (None, -1) for participant_info in participants_scores: participant_number = participant_info[0] scores = participant_info[1:] total_score = sum(scores) if total_score > max_score or (total_score == max_score and participant_number < winner_info[0]): max_score = total_score winner_info = (participant_number, total_score) return winner_info def sports_event_winner(input_data): lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) participants_scores = [] for line in lines[1:]: data = list(map(int, line.split())) participants_scores.append(tuple(data)) winner_info = find_winner(participants_scores) return f\\"{winner_info[0]} {winner_info[1]}\\""},{"question":"You are designing a text editor. The editor has several features, including managing text elements and processing commands to manipulate these elements. The text elements are initially all blank. There are several commands that can be issued to the editor in chronological order. These commands can perform tasks such as adding text to a specific line, deleting text from a specific line, or counting the total number of characters in the entire text editor. Please help manage the text editor by implementing these commands and providing the required outputs following each event. -----Input----- The first line of input contains two integers `m` and `c` (1 ≤ m, c ≤ 200,000) — the number of lines in the text editor and the number of commands to be processed, respectively. The next `c` lines each contain a command. The command can be one of the following three types: - \'1 x s\': Add text string `s` to line `x` (1 ≤ x ≤ m, length of s ≤ 100) - \'2 x\': Clear (delete all text from) line `x` (1 ≤ x ≤ m) - \'3\': Print the total number of characters in the text editor It is guaranteed that all commands are valid. -----Output----- For each command of type \'3\', print the total number of characters in the text editor at that point in time. -----Examples----- Input 3 6 1 1 Hello 1 2 World 3 2 1 3 1 3 ! 3 Output 10 5 6 Input 2 5 1 1 Code 3 2 1 3 1 2 Safe 3 Output 4 0 4 -----Note----- In the first sample: - Add \\"Hello\\" to line 1 (total 5 characters). - Add \\"World\\" to line 2 (total 10 characters, as \'Hello\' + \'World\' = 5 + 5). - Print the total number of characters, which is 10. - Clear line 1, leaving only \\"World\\" in line 2 (total 5 characters). - Print the total number of characters again, which is 5. - Add \\"!\\" to line 3, making the total 6 characters (5 + 1). - Print the total number of characters again, which is 6. In the second sample: - Add \\"Code\\" to line 1 (total 4 characters). - Print the total number of characters, which is 4. - Clear line 1, making the total characters 0. - Print the total number of characters again, which is 0. - Add \\"Safe\\" to line 2, making the total 4 characters. - Print the total number of characters again, which is 4.","solution":"def text_editor(m, c, commands): Manages a text editor based on provided commands. text_lines = [\'\' for _ in range(m)] total_chars = 0 output = [] for command in commands: parts = command.split() if parts[0] == \'1\': line = int(parts[1]) - 1 text = parts[2] total_chars += len(text) text_lines[line] += text elif parts[0] == \'2\': line = int(parts[1]) - 1 total_chars -= len(text_lines[line]) text_lines[line] = \'\' elif parts[0] == \'3\': output.append(total_chars) return output"},{"question":"# Task You are to help a logistics company manage and analyze their inventory by tracking shipments that arrive on different dates. Each shipment contains a certain amount of various products. The company requests a system that can accurately calculate the total inventory of a given product at any date. By keeping track of the shipments and the products they contain, you will provide a method to compute the total quantity of any product on any specific date. # Input/Output `[input]` 2D integer array `shipments` An array where each element is a 3-element array: - The first element is a non-negative integer representing the date of the shipment (days since the inventory tracking began). - The second element is a non-negative integer representing the product ID. - The third element is a non-negative integer representing the quantity of this product in this shipment. The array is sorted by ascending order of the first element (date). Each date can have multiple shipments, and each shipment can carry multiple products. `0 ≤ shipments[i][0] ≤ 1000` `0 ≤ shipments[i][1] ≤ 100` `0 ≤ shipments[i][2] ≤ 1000` `[input]` 2-element array `query` An array where the first element is a non-negative integer representing the product ID, and the second element is a non-negative integer representing the date in question. `0 ≤ query[0] ≤ 100` `0 ≤ query[1] ≤ 1000` `[output]` an integer The total quantity of the specified product available in the inventory on the given date. # Example For `shipments = [[1, 0, 5], [2, 0, 15], [3, 1, 7], [5, 0, 10]]` and `query = [0, 4]`, the output should be `20`. Explanation: - Product 0 has shipments on dates 1, 2, and 5. - By date 4, shipments have occurred on dates 1 and 2, with quantities 5 and 15 respectively. - The total quantity of product 0 by date 4 is therefore 5 + 15 = 20. For `shipments = [[2, 1, 10], [4, 1, 5], [6, 2, 8], [8, 1, 10]]` and `query = [1, 5]`, the output should be `15`. Explanation: - Product 1 has shipments on dates 2, 4, and 8. - By date 5, shipments have occurred on dates 2 and 4, with quantities 10 and 5 respectively. - The total quantity of product 1 by date 5 is therefore 10 + 5 = 15.","solution":"def total_inventory(shipments, query): Computes the total quantity of a specified product in the inventory at a given date. :param shipments: 2D integer array where each element is a 3-element array [date, product_id, quantity] :param query: 2-element array [product_id, date] :return: Total quantity of the specified product in the inventory at the given date product_id, query_date = query total_quantity = 0 for shipment in shipments: shipment_date, shipment_product_id, quantity = shipment if shipment_product_id == product_id and shipment_date <= query_date: total_quantity += quantity return total_quantity"},{"question":"Write a function that receives a list of integers and a target integer. The function should return a list of unique pairs of numbers from the list that add up to the target. Each pair should be in the form of a tuple (first, second), where \'first\' is less than or equal to \'second\'. The pairs themselves should be sorted lexicographically, and the order of the numbers in the returned tuples should reflect the order in which they appear in the input list. Examples: ```python pair_sums([1, 2, 3, 4, 3, 2, 1], 4) # [(1, 3), (2, 2)] pair_sums([1, 5, 2, 4, 3], 6) # [(1, 5), (2, 4)] pair_sums([1, 2, 2, 3, 4], 8) # [] pair_sums([0, -1, 1, -2, 2], 0) # [(-2, 2), (-1, 1)] ``` The order of the pairs in the return list does matter. The function should return the pairs sorted lexicographically.","solution":"def pair_sums(lst, target): Returns a list of unique pairs of numbers from the input list that add up to the target. Each pair is sorted (first, second) where \'first\' is <= \'second\' and the pairs are sorted lexicographically. seen = set() pairs = set() for num in lst: complement = target - num if complement in seen: pair = tuple(sorted((num, complement))) pairs.add(pair) seen.add(num) return sorted(list(pairs))"},{"question":"Given two strings str1 and str2 of size N and M respectively, your task is to determine the minimum number of steps required to make both strings identical. A step is defined as either inserting a character, deleting a character, or replacing a character. Example 1: Input: N = 6, M = 7 str1 = \\"abcdef\\" str2 = \\"azced\\" Output: 3 Explanation: Step 1: Replace \'b\' with \'z\' -> \\"azcdef\\" Step 2: Replace \'d\' with \'c\' -> \\"azccef\\" Step 3: Delete \'f\' -> \\"azce\\" Example 2: Input: N = 4, M = 3 str1 = \\"sunday\\" str2 = \\"saturday\\" Output: 3 Explanation: Step 1: Insert \'a\' after \'s\' -> \\"saunday\\" Step 2: Replace \'u\' with \'r\' -> \\"sarurday\\" Step 3: Replace \'r\' with \'n\' -> \\"saturday\\" Your Task: You don\'t need to read input or print anything. Complete the function minEditDistance() which takes N, M, str1, and str2 as input parameters and returns the minimum number of steps required. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 ≤ N, M ≤ 500","solution":"def minEditDistance(N, M, str1, str2): Function to calculate minimum edit distance to make two strings identical using dynamic programming. dp = [[0 for j in range(M + 1)] for i in range(N + 1)] for i in range(N + 1): for j in range(M + 1): if i == 0: dp[i][j] = j # If str1 is empty, insert all characters of str2 elif j == 0: dp[i][j] = i # If str2 is empty, delete all characters of str1 elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], # Remove dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[N][M]"},{"question":"Given a list of integers representing the amount of water in different sections of a pipeline, your task is to determine the minimum number of moves required to equalize the amount of water in all sections. In each move, you can transfer a unit of water from one section to an adjacent section (to the left or to the right). The list is circular, which means the first and the last sections are also adjacent. Return the minimum number of moves to make all sections contain an equal amount of water. If it\'s not possible to equalize, return -1. Example 1: Input: water = [1, 0, 5] Output: 3 Explanation: You can equalize the water by the following moves: - Move 1 unit of water from index 2 to index 0 -> [2, 0, 4] - Move 2 units from index 2 to index 1 -> [2, 2, 2]. Example 2: Input: water = [2, 2, 2, 4] Output: -1 Explanation: It\'s impossible to equalize the water because the total volume is not divisible by the number of sections. Example 3: Input: water = [4, 1, 1, 2] Output: 2 Explanation: You can equalize the water by the following moves: - Move 2 units of water from index 0 to index 2 -> [2, 1, 3, 2]. Constraints: 1 <= water.length <= 10^4 0 <= water[i] <= 10^4","solution":"def min_moves_to_equalize_water(water): Returns the minimum number of moves to equalize water in all sections or -1 if not possible. n = len(water) total_water = sum(water) if total_water % n != 0: return -1 target = total_water // n # Calculate the deficit/surplus at each index moves = 0 deficit_sum = 0 for w in water: deficit_sum += w - target moves = max(moves, abs(deficit_sum)) return moves"},{"question":"Martha recently began her journey in competitive programming, and she stumbled upon a problem while practicing with sequences. She is given a sequence of integers and needs to handle multiple queries to find the sum of a sub-array efficiently. Given the array and the queries, help her find the sum for each query by writing an efficient function. -----Input----- The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the length of the sequence and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the sequence. The following q lines each contain two integers li and ri (1 ≤ li ≤ ri ≤ n) — representing a query to find the sum of the sub-array from index li to ri (inclusive). -----Output----- For each query, print the sum of the elements in the sub-array from index li to ri (inclusive). -----Examples----- Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15 Input 6 2 3 8 7 6 1 2 1 6 3 5 Output 27 14 Input 4 1 5 6 7 8 2 4 Output 21 -----Note----- In the first example, the sum of elements in the sub-array defined by indices [1, 3] is 1 + 2 + 3 = 6. In the second example, the sum of elements in the sub-array defined by indices [1, 6] is 3 + 8 + 7 + 6 + 1 + 2 = 27.","solution":"def find_subarray_sum(n, q, sequence, queries): Given a sequence of integers and a number of queries, finds the sum of a sub-array for each query efficiently. Parameters: n (int): The length of the sequence q (int): The number of queries sequence (list of int): The sequence of integers queries (list of tuples): Each tuple contains two integers representing the start and end of the sub-array (inclusive) Returns: list of int: The sum of the sub-array for each query # Create a prefix sum array prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + sequence[i - 1] result = [] for query in queries: l, r = query # sum from l to r is prefix_sum[r] - prefix_sum[l-1] result.append(prefix_sum[r] - prefix_sum[l - 1]) return result"},{"question":"A group of scientists is analyzing DNA sequences. Each DNA sequence is represented as a string consisting of the characters \'A\', \'C\', \'G\', and \'T\'. The scientists are interested in finding out how frequently each character appears in a given sequence. They also want to determine the most frequent character. Given a DNA sequence, your task is to write a program that: 1. Counts the occurrences of each character \'A\', \'C\', \'G\', and \'T\' in the sequence. 2. Finds the character that appears most frequently in the sequence. If there is a tie, the character that appears first in the order \'A\', \'C\', \'G\', \'T\' should be selected. -----Input----- The input consists of a single line containing a string s of length n (1 leq n leq 1000). The string s consists solely of characters \'A\', \'C\', \'G\', and \'T\'. -----Output----- Output four space-separated integers representing the counts of \'A\', \'C\', \'G\', and \'T\' in the sequence. On the next line, output the most frequent character. -----Examples----- Input ACGTACGTAC Output 3 3 2 2 A Input TGGGGCCT Output 0 2 4 2 G Input CGATCGAT Output 2 2 2 2 A Note that in the last example, even though all characters appear with equal frequency, \'A\' is chosen because it appears first in the predefined order \'A\', \'C\', \'G\', \'T\'.","solution":"def analyze_dna_sequence(sequence): Count the occurrences of \'A\', \'C\', \'G\', and \'T\' in the given DNA sequence and find the most frequent character. Parameters: sequence (str): The DNA sequence consisting of characters \'A\', \'C\', \'G\', and \'T\'. Returns: tuple: A tuple containing counts of \'A\', \'C\', \'G\', and \'T\' in that order, and the most frequent character. counts = {\'A\': 0, \'C\': 0, \'G\': 0, \'T\': 0} for char in sequence: if char in counts: counts[char] += 1 most_frequent_char = max(counts, key=lambda x: (counts[x], -ord(x))) return counts[\'A\'], counts[\'C\'], counts[\'G\'], counts[\'T\'], most_frequent_char"},{"question":"Alice is preparing for her upcoming coding interview and she came across a problem. Given a non-negative integer `n`, she needs to calculate the total number of set bits (1s) in the binary representation of all integers from 1 to `n`. Alice needs your help in writing a function to solve this problem. Input Format: The first line will contain `t` - the number of test cases. The following `t` lines will each contain an integer `n`. Output Format: For each input `n`, print the total number of set bits in the binary representation of all integers from 1 to `n`. Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 10^6 SAMPLE INPUT: 2 3 7 SAMPLE OUTPUT: 4 12 Explanation: For the first test case, n = 3: - Binary representations are: 1, 10, 11 - Total set bits = 1 + 1 + 2 = 4 For the second test case, n = 7: - Binary representations are: 1, 10, 11, 100, 101, 110, 111 - Total set bits = 1 + 1 + 2 + 1 + 2 + 2 + 3 = 12","solution":"def total_set_bits(n): Given a non-negative integer n, calculate the total number of set bits (1s) in the binary representation of all integers from 1 to n. count = 0 for i in range(1, n + 1): count += bin(i).count(\'1\') return count def solve_test_cases(t, test_cases): Given t test cases, for each test case get the total number of set bits in the binary representation of all integers from 1 to n. results = [] for n in test_cases: results.append(total_set_bits(n)) return results"},{"question":"Geek is attending another challenge at the Geek Summer Carnival. This time, he needs to determine if a given string can be segmented into meaningful words from a provided dictionary. Given a string and a dictionary of words, return true if the string can be segmented into a space-separated sequence of one or more dictionary words, otherwise return false. Example 1: Input: dictionary = { \\"apple\\", \\"pen\\" } string = \\"applepenapple\\" Output: true Explanation: The string can be segmented as \\"apple pen apple\\". Example 2: Input: dictionary = { \\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\" } string = \\"catsandog\\" Output: false Explanation: The string cannot be segmented into meaningful words from the dictionary. Your Task: You don\'t need to read input or print anything. Complete the function isSegmentable() that takes a dictionary of strings and a target string as input parameters and returns a boolean value. Expected time complexity: O(N * M) Expected space complexity: O(N) where N is the length of the target string and M is the size of the dictionary. Constraints: 1 <= length of target string <= 300 1 <= number of words in dictionary <= 10^3 1 <= length of each word <= 20","solution":"def isSegmentable(dictionary, s): Check if the string can be segmented into a sequence of one or more dictionary words. :param dictionary: Set of words that the string can be segmented into :param s: Target string :return: Boolean indicating if the string can be segmented into dictionary words n = len(s) # Length of the target string dp = [False] * (n + 1) dp[0] = True # Base case # Iterate over the string length for i in range(1, n + 1): for j in range(i): # If the segment s[j:i] is in the dictionary and we can reach j if dp[j] and s[j:i] in dictionary: dp[i] = True break return dp[n]"},{"question":"You are given an array of n integers and a series of q queries. Each query consists of a single integer value and requires you to find the number of distinct integers in the array that are less than or equal to that query value. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000) - the size of the array and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) representing the array elements. Each of the next q lines contains a single integer x (1 ≤ x ≤ 109) representing the value in the query. Output For each query, output a single integer - the number of distinct integers in the array that are less than or equal to the query value. Examples Input 6 3 1 5 2 2 3 5 2 4 5 Output 2 3 4 Input 5 2 8 8 8 8 8 7 9 Output 0 1","solution":"def preprocess_array(arr): Preprocess the given array to get only distinct elements and then sort them. This will be used to quickly answer the queries. return sorted(set(arr)) def count_distinct_leq(preprocessed_arr, x): Count the number of distinct elements in the preprocessed array that are less than or equal to x. count = 0 for num in preprocessed_arr: if num <= x: count += 1 else: break return count def distinct_elements_count(n, q, arr, queries): Main function to handle multiple queries. Returns the result for each query. preprocessed_arr = preprocess_array(arr) results = [] for query in queries: results.append(count_distinct_leq(preprocessed_arr, query)) return results"},{"question":"Task **_Given_** *a string*, **_determine_** **_if it is a palindrome_**. **_Ignore_** *punctuation, case, and spacing*. ____ # Notes * **_A palindrome_** is a *word, phrase, number, or other sequence of characters which reads the same backward or forward* (ignoring punctuation, case, and spacing). * **_Examples of palindromes_**: \'madam\', \'A man, a plan, a canal, Panama!\', \'No \'x\' in Nixon\'. ___ # Input >> Output Examples ``` isPalindrome(\\"A man, a plan, a canal, Panama!\\"); ==> return True ``` **_Explanation_**: * After removing **_punctuation, case, and spacing_**, the string becomes \\"amanaplanacanalpanama\\", which is a **_palindrome_**. ___ ``` isPalindrome(\\"race a car\\"); ==> return False ``` **_Explanation_**: * After removing **_punctuation, case, and spacing_**, the string becomes \\"raceacar\\", which is **_not a palindrome_**. ___ ``` isPalindrome(\\"No \'x\' in Nixon\\"); ==> return True ``` **_Explanation_**: * After removing **_punctuation, case, and spacing_**, the string becomes \\"noxinnixon\\", which is a **_palindrome_**. ___ ___ ___ # [String Manipulation Series](https://www.codewars.com/collections/string-manipulation) # [Palindrome Challenges](https://www.codewars.com/collections/palindrome-challenges) # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored) ___ ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"import re def isPalindrome(s): Returns True if the given string s is a palindrome, ignoring punctuation, case, and spacing. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"A group of N students in a school want to distribute M chocolates among themselves in such a way that each student gets the same number of chocolates, and the number of chocolates per student is maximized. Any leftover chocolates that cannot be evenly distributed among the students are collected by the school. Determine the maximum number of chocolates each student will get and the number of chocolates the school will collect. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first and only line of each test case contains two integers N and M — the number of students and the number of chocolates. ------ Output Format ------ For each test case, output two integers: the maximum number of chocolates each student will get and the number of chocolates the school will collect. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 0 ≤ M ≤ 1000 ----- Sample Input 1 ------ 3 5 13 10 99 4 8 ----- Sample Output 1 ------ 2 3 9 9 2 0 ----- Explanation 1 ------ - Test case 1: There are 5 students and 13 chocolates. Each student can get at most 2 chocolates, with 3 chocolates left over that the school will collect. - Test case 2: There are 10 students and 99 chocolates. Each student can get at most 9 chocolates, with 9 chocolates left over that the school will collect. - Test case 3: There are 4 students and 8 chocolates. Each student can get at most 2 chocolates, with no leftover chocolates.","solution":"def distribute_chocolates(T, cases): Distributes chocolates among students and returns the results as a list of tuples. Parameters: T (int): number of test cases cases (list of tuples): Each tuple contains two integers N (number of students) and M (number of chocolates) Returns: list of tuples: Each tuple contains two integers: the maximum number of chocolates each student will get and the number of chocolates the school will collect results = [] for case in cases: N, M = case chocolates_per_student = M // N leftovers = M % N results.append((chocolates_per_student, leftovers)) return results"},{"question":"You are tasked with creating a leaderboard for a competitive programming contest. The leaderboard must be sorted based on the total score of participants. Each participant can participate in multiple problems, and each problem has a maximum score of 100. The score for each problem will be provided separately. The format of the input will be as follows: 1. First line contains an integer N, the number of participants. 2. The next N lines contain the name of participants followed by P pairs of problem IDs and scores where 1 ≤ P ≤ 100. 3. Each participant\'s scores are provided in the format: \\"Name ProblemID1 Score1 ProblemID2 Score2 ... ProblemIDP ScoreP\\". The output should consist of exactly N lines, each line containing the name of the participant followed by their total score. The leaderboard should be sorted by total score in descending order. In case of a tie, the participants should be sorted by their names in lexicographical (increasing) order. # Input: - First line: Number of participants N (1 ≤ N ≤ 100). - Following N lines: Each line contains a string (Name), followed by an integer (ProblemID) and a corresponding integer (Score). # Output: - N lines: each line contains the Name of a participant and their total score, sorted by score in descending order, and by name in case of a tie. # Sample Input: ``` 4 Alice 1 50 2 60 3 70 Bob 2 40 3 90 Charlie 1 100 2 95 Dave 3 85 1 55 ``` # Sample Output: ``` Charlie 195 Alice 180 Dave 140 Bob 130 ```","solution":"def calculate_leaderboard(input_data): # Split the input data into lines lines = input_data.strip().split(\'n\') # Number of participants N = int(lines[0]) participants = [] for i in range(1, N + 1): # Split each line into name and score parts parts = lines[i].split() name = parts[0] score = sum(int(parts[j]) for j in range(2, len(parts), 2)) participants.append((name, score)) # Sort participants by score in descending order, and by name in lexicographical order on tie participants.sort(key=lambda x: (-x[1], x[0])) # Prepare the output output = [\\"{} {}\\".format(name, score) for name, score in participants] return \'n\'.join(output) # Example usage input_data = 4 Alice 1 50 2 60 3 70 Bob 2 40 3 90 Charlie 1 100 2 95 Dave 3 85 1 55 print(calculate_leaderboard(input_data))"},{"question":"You have been given a task to write a program that analyzes a sequence of stock prices recorded over several days to determine the maximum possible profit one could achieve by buying and selling the stock on specific days. Your program should identify the best day to buy and the best day to sell to maximize the profit. Note that you can only complete one buy-and-sell transaction, and you must buy the stock before you sell it. -----Input----- Input is a list of integers, where each integer represents the stock price on each consecutive day. The list will contain at most 10^5 prices, each value being a positive integer. -----Output----- Output a single integer, representing the maximum profit that can be achieved. If no profit can be made, output 0. -----Examples----- Sample Input: [7, 1, 5, 3, 6, 4] Sample Output: 5 Explanation: The maximum profit is achieved by buying on day 2 (price = 1) and selling on day 5 (price = 6), hence the profit is 6 - 1 = 5. Sample Input: [7, 6, 4, 3, 1] Sample Output: 0 Explanation: No day exists where buying the stock would lead to a profit in this scenario, thus the maximum profit is 0.","solution":"def max_profit(prices): Function to determine the maximum profit by buying and selling a stock on specific days. :param prices: List[int] - A list of stock prices :return: int - The maximum profit possible if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given a set of integers. You need to answer a series of queries, each asking for the smallest prime number greater than or equal to a given integer in the set. To simplify, each query specifies an integer x, and you need to find the smallest prime number in the set which is greater than or equal to x. Constraints: * 1 ≤ Number of elements in the set ≤ 100,000 * 1 ≤ Value of each element ≤ 10^6 * 1 ≤ Number of queries ≤ 100,000 * 1 ≤ x ≤ 10^6 Input: Input is given from Standard Input in the following format: N Q A_1 A_2 ... A_N // N integers in the set x_1 x_2 : x_Q Output: For each query, print the answer in a new line. If there is no prime number greater than or equal to x in the set, print -1. Examples: Input: 6 3 2 3 5 7 11 13 4 6 12 Output: 5 7 13 Input: 5 2 1 4 6 8 9 5 10 Output: -1 -1","solution":"from bisect import bisect_left import sys input = sys.stdin.read def sieve(limit): is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(limit**0.5) + 1): if is_prime[i]: for j in range(i * i, limit + 1, i): is_prime[j] = False return is_prime def smallest_prime_geq(arr, queries): max_value = 10**6 is_prime = sieve(max_value) # Filter the array to contain only primes primes_set = sorted([x for x in arr if is_prime[x]]) results = [] for x in queries: idx = bisect_left(primes_set, x) if idx < len(primes_set): results.append(primes_set[idx]) else: results.append(-1) return results def main(): data = input().split() N, Q = int(data[0]), int(data[1]) arr = list(map(int, data[2:N+2])) queries = list(map(int, data[N+2:])) results = smallest_prime_geq(arr, queries) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a string consisting of lowercase English letters and a list of queries. Each query consists of a single character. For each query, determine the shortest distance from the character to its nearest occurrence in the string. If the character does not appear in the string, output `-1` for that query. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains a string S with length L (1 ≤ L ≤ 10^5). - The second line of each test case contains an integer Q - the number of queries (1 ≤ Q ≤ 10^5). - The third line of each test case contains Q space-separated characters representing the queries. ------ Output Format ------ For each query, output the shortest distance to the nearest occurrence of the character in string S. If the character does not exist in S, output `-1`. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ L ≤ 10^5 1 ≤ Q ≤ 10^5 - It is guaranteed that the sum of L over all test cases does not exceed 10^6 - It is guaranteed that the sum of Q over all test cases does not exceed 10^6 ----- Sample Input 1 ------ 2 abcde 3 a b z aabbcc 4 a d b c ----- Sample Output 1 ------ 0 1 -1 0 -1 1 2 ----- explanation 1 ------ Test Case-1: For the string \\"abcde\\": - The shortest distance to \'a\' is 0 (at index 0) - The shortest distance to \'b\' is 1 (at index 1) - The character \'z\' does not appear in the string, hence output `-1`. Test Case-2: For the string \\"aabbcc\\": - The shortest distance to \'a\' is 0 (at index 0) - The character \'d\' does not appear in the string, hence output `-1`. - The shortest distance to \'b\' is 2 (at index 2) - The shortest distance to \'c\' is 4 (at index 4)","solution":"def shortest_distance_occurrences(T, test_cases): results = [] for i in range(T): string = test_cases[i][0] queries = test_cases[i][2] char_indices = {} for idx, char in enumerate(string): if char in char_indices: char_indices[char].append(idx) else: char_indices[char] = [idx] distances = [] for query in queries: if query in char_indices: query_indices = char_indices[query] min_distance = min([abs(idx - i) for i, idx in enumerate(query_indices)]) # Simplified to check minimum distance distances.append(min(query_indices)) # The nearest occurrence distance else: distances.append(-1) results.append(distances) return results"},{"question":"Implement a function called `nextPermutation` that takes an array of integers and rearranges the numbers into the lexicographically next greater permutation of numbers. If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order). The function should modify the array in-place and use only constant extra memory. Example 1: Input: nums = [1, 2, 3] Output: [1, 3, 2] Example 2: Input: nums = [3, 2, 1] Output: [1, 2, 3] Example 3: Input: nums = [1, 1, 5] Output: [1, 5, 1] Example 4: Input: nums = [1] Output: [1] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `nextPermutation()` which takes the array `nums` as an input parameter and modifies it in-place to produce the next permutation. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: - 1 <= nums.length <= 100 - 0 <= nums[i] <= 100","solution":"def nextPermutation(nums): Rearrange numbers into the lexicographically next greater permutation of numbers. If such an arrangement is not possible, rearrange it as the lowest possible order. n = len(nums) if n <= 1: return # Step 1: Find the largest k such that nums[k] < nums[k + 1]. k = -1 for i in range(n - 1): if nums[i] < nums[i + 1]: k = i if k == -1: # The array is in descending order, reverse it. nums.reverse() return # Step 2: Find the largest l greater than k such that nums[k] < nums[l]. for l in range(n - 1, k, -1): if nums[k] < nums[l]: break # Step 3: Swap nums[k] and nums[l]. nums[k], nums[l] = nums[l], nums[k] # Step 4: Reverse the sequence from nums[k + 1] to the end. nums[k + 1:] = reversed(nums[k + 1:])"},{"question":"An n x n matrix is defined as a \\"quasi-symmetric\\" matrix if, for every pair of indices (i, j), the sum of matrix elements satisfies the following condition: ``` A[i][j] + A[j][i] = A[n-1-i][n-1-j] + A[n-1-j][n-1-i] ``` You are given a matrix of size n x n (1 ≤ n ≤ 500) filled with integers. Determine whether the given matrix is quasi-symmetric. Input The first line contains the integer n. Each of the next n lines contains n integers, representing the matrix elements. Output Print \\"YES\\" if the matrix is quasi-symmetric, otherwise print \\"NO\\". Example Input 3 1 2 3 4 5 6 7 8 9 Output NO","solution":"def is_quasi_symmetric(matrix): n = len(matrix) for i in range(n): for j in range(n): if matrix[i][j] + matrix[j][i] != matrix[n-1-i][n-1-j] + matrix[n-1-j][n-1-i]: return False return True def check_quasi_symmetric(string_input): lines = string_input.strip().split(\'n\') n = int(lines[0]) matrix = [list(map(int, line.split())) for line in lines[1:n+1]] return \\"YES\\" if is_quasi_symmetric(matrix) else \\"NO\\""},{"question":"In this challenge, your task is to create a function called ```longest_common_subsequence()``` that finds the longest common subsequence (LCS) between two strings. Unlike substrings, subsequences are not required to occupy consecutive positions within the original strings. The function should take in two strings as input and return their longest common subsequence as a string. # Function Signature ```python def longest_common_subsequence(str1: str, str2: str) -> str: ``` # Input - Two strings, ```str1``` and ```str2```, each of length up to 1000. # Output - A string representing the longest common subsequence between ```str1``` and ```str2```. - In case of multiple common subsequences of the same maximum length, you may return any of them. # Example ```python longest_common_subsequence(\\"ABCBDAB\\", \\"BDCAB\\") # Returns: \\"BCAB\\" longest_common_subsequence(\\"AGGTAB\\", \\"GXTXAYB\\") # Returns: \\"GTAB\\" ``` # Constraints and Considerations 1. It is guaranteed that the input strings will consist of uppercase English letters only. 2. Your solution should aim to be as efficient as possible to handle edge cases where the length of the strings approaches 1000. 3. Use of dynamic programming is highly recommended to optimize the solution. # Hints - Consider using a 2D table where dp[i][j] represents the length of the longest common subsequence of str1 up to the i-th index and str2 up to the j-th index. - Use backtracking to reconstruct the LCS from the filled DP table. Good luck and happy coding!","solution":"def longest_common_subsequence(str1: str, str2: str) -> str: Finds the longest common subsequence (LCS) between two strings. m, n = len(str1), len(str2) # Creating the DP table with (m+1) x (n+1) dimensions dp = [[0] * (n + 1) for _ in range(m + 1)] # Populating the DP table for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Backtracking to find the LCS i, j = m, n lcs = [] while i > 0 and j > 0: if str1[i - 1] == str2[j - 1]: lcs.append(str1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] >= dp[i][j - 1]: i -= 1 else: j -= 1 # The lcs list is built backwards, so reverse it lcs.reverse() return \'\'.join(lcs)"},{"question":"You are given a string `S` consisting of lowercase English letters. Your task is to process the string to create a new string `T` based on the following operations, which you can perform any number of times: 1. If there are two adjacent same letters `aa` in the string, you can replace them with a single letter `a`. 2. If there are two adjacent different letters `ab` in the string, you can swap them to become `ba`. Your goal is to determine if it is possible to transform the string `S` into a single-character string. If it is possible, you need to return the character, otherwise, return \\"IMPOSSIBLE\\". Input: - The first line contains one integer `Q` (1 ≤ Q ≤ 100) — the number of test cases. - Each of the next `Q` lines contains a string `S` (1 ≤ length of S ≤ 100) consisting of lowercase English letters. Output: For each test case, print a single line with the result: either the single character obtained, or \\"IMPOSSIBLE\\" if it is not possible to transform the string into a single-character string. Example: Input: ``` 3 aaab abc a ``` Output: ``` a IMPOSSIBLE a ``` Explanation: - In the first test case, the operations can be applied as follows: - Replace \\"aa\\" with \\"a\\": \\"aab\\" - Replace \\"aa\\" with \\"a\\": \\"ab\\" - Swap \\"ab\\" to \\"ba\\": \\"ba\\" - Replace \\"aa\\" with \\"a\\": \\"a\\" Result: \\"a\\" - In the second test case, no sequence of operations can transform \\"abc\\" into a single character string. - In the third test case, \\"a\\" is already a single character string, so no operations are needed.","solution":"def can_be_single_character_string(S): Function to determine if it is possible to transform the string S into a single-character string. for i in range(1, len(S)): # Check if there is any adjacent pair of different characters if S[i] != S[i-1]: return \\"IMPOSSIBLE\\" return S[0] # All characters are the same def process_test_cases(Q, cases): Function to process multiple test cases and return the results. results = [] for S in cases: result = can_be_single_character_string(S) results.append(result) return results # Example Input/Output function for demonstration purposes def solution(Q, cases): return process_test_cases(Q, cases)"},{"question":"Given a positive integer N, find the smallest integer P such that P is a palindrome and P is greater than N. Input Format: The first line of the input is an integer T, denoting the number of test cases. Each of the next T lines contains a single integer N. Output Format: For each test case, print the smallest palindrome P that is larger than N. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^6 SAMPLE INPUT 3 31 130 999 SAMPLE OUTPUT 33 131 1001","solution":"def next_palindrome(N): Returns the smallest palindrome greater than N. def is_palindrome(num): return str(num) == str(num)[::-1] P = N + 1 while not is_palindrome(P): P += 1 return P def find_smallest_palindromes(test_cases): Given a list of integers, returns a list with the smallest palindromes greater than each integer. return [next_palindrome(N) for N in test_cases]"},{"question":"A new restaurant has opened in town and decided to adopt an online reservation system to manage their table bookings. To manage their reservations efficiently, they need a program that: 1. Handles reservation requests. 2. Checks the availability of tables. 3. Confirms or denies the reservation based on the availability. The restaurant has a fixed number of tables, each uniquely identified by a table number from 1 to N where N (1 ≤ N ≤ 1000) is the total number of tables. Each table can only be reserved once for a given time slot. The restaurant operates in 24-hour slots (0-23). You are to implement a system that processes reservation requests and prints whether each reservation can be confirmed or not. Input The first line contains one positive integer N, representing the number of tables. The second line contains one positive integer M (1 ≤ M ≤ 10^5), representing the number of reservation requests. Each of the next M lines contains two integers table_number (1 ≤ table_number ≤ N) and slot (0 ≤ slot ≤ 23) representing a reservation request for a specific table at a specific time slot. Output Print M lines, one for each reservation request. Each line should either be \\"Accepted\\" if the reservation can be made or \\"Rejected\\" if the table is already booked for that specific time slot. Examples Input 3 5 1 5 2 5 1 5 3 20 2 5 Output Accepted Accepted Rejected Accepted Rejected Explanation - Tables 1, 2, and 3 are available at all slots initially. - The first request for table 1 at slot 5 is accepted. - The second request for table 2 at slot 5 is accepted. - The third request for table 1 at slot 5 is rejected because it was already booked. - The fourth request for table 3 at slot 20 is accepted. - The fifth request for table 2 at slot 5 is rejected because it was already booked.","solution":"def process_reservations(N, reservations): Processes reservations for tables at a restaurant. Args: N : int : number of tables reservations : list of tuple : list of reservation requests (table_number, slot) Returns: list : list of reservation status: \\"Accepted\\" or \\"Rejected\\" # Initialize the table availability dictionary tables = {i: [False] * 24 for i in range(1, N + 1)} results = [] for table_number, slot in reservations: if tables[table_number][slot]: results.append(\\"Rejected\\") else: tables[table_number][slot] = True results.append(\\"Accepted\\") return results"},{"question":"Write a function named `count_words` that takes a string, `sentence`, as its argument and returns a dictionary with the counts of each word in the sentence. Words should be considered case-insensitively, and punctuation marks should be ignored. For example, calling `count_words(\\"Hello world! hello.\\")` should return `{\'hello\': 2, \'world\': 1}`.","solution":"import re from collections import defaultdict def count_words(sentence): Returns a dictionary with counts of each word in the given sentence. Words are considered case-insensitively and punctuation marks are ignored. :param sentence: str, input sentence to count words from :return: dict, dictionary with word counts # Convert to lowercase sentence = sentence.lower() # Remove punctuation and split into words words = re.findall(r\'bw+b\', sentence) # Create default dictionary to count words word_counts = defaultdict(int) for word in words: word_counts[word] += 1 return dict(word_counts)"},{"question":"# Description: Write a function that takes an integer as input and returns `True` if the digits of the number form a palindrome, and `False` otherwise. A number is a palindrome if it reads the same backward as forward. # Examples ``` is_palindrome(121) == True is_palindrome(123) == False is_palindrome(1) == True is_palindrome(1111) == True is_palindrome(1221) == True is_palindrome(-121) == False ```","solution":"def is_palindrome(n): Returns True if the digits of the integer n form a palindrome, False otherwise. # If n is negative, it cannot be a palindrome if n < 0: return False # Convert number to string to check for palindrome str_n = str(n) return str_n == str_n[::-1]"},{"question":"Write a function `findMajorityElement` that takes a list of integers and returns the majority element. The majority element is the element that appears more than half the times in the list. If no such element exists, return `None`. E.g: [3, 3, 4, 2, 4, 4, 2, 4, 4] -> 4","solution":"def findMajorityElement(nums): Returns the majority element which appears more than half the times in the list. If no such element exists, returns None. count = {} length = len(nums) for num in nums: if num in count: count[num] += 1 else: count[num] = 1 if count[num] > length // 2: return num return None"},{"question":"You are given a list of unique integers which is initially sorted but has been rotated at an unknown pivot. For example, the list [0, 1, 2, 4, 5, 6, 7] might become [4, 5, 6, 7, 0, 1, 2]. You are to write a function to find a target value in the rotated list. If the target exists, return its index, otherwise return -1. You must do this with a time complexity of O(log n). Example 1: Input: nums = [4, 5, 6, 7, 0, 1, 2], target = 0 Output: 4 Explanation: The target value 0 is found at index 4. Example 2: Input: nums = [4, 5, 6, 7, 0, 1, 2], target = 3 Output: -1 Explanation: The target value 3 is not found in the list. Your Task: You don\'t need to read input or print anything. Your task is to complete the function search() which takes in a list of integers \'nums\' and an integer \'target\' and returns the index of the target if present, else returns -1. Expected Time Complexity: O(log n) Expected Auxiliary Space: O(1) Constraints: 1 <= nums.length <= 5000 -10^4 <= nums[i] <= 10^4 Each value in nums is unique.","solution":"def search(nums, target): Returns the index of target in the rotated sorted list nums. If target is not present, returns -1. if not nums: return -1 left, right = 0, len(nums) - 1 while left <= right: mid = left + (right - left) // 2 if nums[mid] == target: return mid # Determine which part is sorted if nums[left] <= nums[mid]: # Left part is sorted if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 else: # Right part is sorted if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a program to determine if a given string is an anagram of another string. Constraints * 1 ≤ length of the string ≤ 1000 * Both strings will contain only lowercase English letters. Input The input consists of two lines, each containing a string. Output Print \\"Yes\\" if the two strings are anagrams of each other, and \\"No\\" otherwise. Examples Input listen silent Output Yes Input hello world Output No","solution":"def are_anagrams(str1, str2): Determines if two strings are anagrams of each other. Args: str1 (str): The first string. str2 (str): The second string. Returns: str: \\"Yes\\" if the strings are anagrams, \\"No\\" otherwise. # Sort both strings and compare return \\"Yes\\" if sorted(str1) == sorted(str2) else \\"No\\""},{"question":"Alice and Bob love playing with sequences. They have a sequence of N integers. Each integer in the sequence can be either positive or negative or zero. Alice and Bob can modify the sequence by choosing any integer in the sequence and either increasing it by 1 or decreasing it by 1. Their goal is to make the sum of the sequence equal to zero using the minimum number of modifications. Write a program to determine the minimum number of modifications required to make the sum of the sequence equal to zero. # Input * First line contains a single integer N (1 ≤ N ≤ 100000) — the length of the sequence. * Second line contains N integers a1, a2, ..., aN (−1000 ≤ ai ≤ 1000) — the elements of the sequence. # Output Print a single integer — minimum number of modifications required to make the sum of the sequence equal to zero. # Examples Input 4 1 2 3 -1 Output 2 Input 5 -10 -5 5 10 0 Output 0 Input 3 3 -1 1 Output 1 # Explanation In the first example, the sum of the sequence is 5. We can change the values to make the sum 0 by two modifications. For instance, we can change the second element `2` to `1` and change the third element `3` to `1`, resulting in the sequence `[1, 1, 1, -1]` which sums to 0. In the second example, the sequence already has a sum of 0, thus no modifications are needed. In the third example, the sum is 3. We need a single modification: decrease any `3` by `3`, or increase `-1` by `1` and change `1` to `0`, etc.","solution":"def min_modifications_to_zero(N, sequence): Calculate the minimum number of modifications required to make the sum of the sequence equal to zero. Parameters: N (int): The length of the sequence. sequence (list of int): The sequence of integers. Returns: int: Minimum number of modifications required. sequence_sum = sum(sequence) return abs(sequence_sum)"},{"question":"You are tasked with creating a unique password generator. The password must adhere to the following criteria: - The length of the password should be exactly (N). - The password must include at least one uppercase letter, one lowercase letter, one digit, and one special character from `!@#%^&*()-+`. - The password should not contain any two identical consecutive characters. Write a function that generates such a password. Your function should take a single integer (N) as input, representing the desired length of the password. Return a string representing the generated password. If it\'s not possible to generate a password with given constraints, return \\"IMPOSSIBLE\\". ------ Function Signature ------ ```python def generate_password(N: int) -> str: ``` ------ Input Format ------ - An integer (N) representing the length of the password. ------ Output Format ------ - A string representing the generated password, or \\"IMPOSSIBLE\\" if it is not possible to generate a valid password of length (N). ------ Constraints ------ - (1 leq N leq 1000) ------ Sample Input 1 ------ 8 ------ Sample Output 1 ------ A1bcD2@ ------ Sample Input 2 ------ 2 ------ Sample Output 2 ------ IMPOSSIBLE ------ Explanation ------ - In the first example, the password \\"A1bcD2@\\" contains at least one uppercase letter, one lowercase letter, one digit, and one special character, and no two consecutive characters are the same. - In the second example, it\'s impossible to create a password of length 2 that meets all the criteria.","solution":"import random import string def generate_password(N: int) -> str: if N < 4: return \\"IMPOSSIBLE\\" # Characters available for different types upper_letters = string.ascii_uppercase lower_letters = string.ascii_lowercase digits = string.digits special_characters = \\"!@#%^&*()-+\\" # Ensure at least one of each required type password_chars = [ random.choice(upper_letters), random.choice(lower_letters), random.choice(digits), random.choice(special_characters) ] if N == 4: random.shuffle(password_chars) return \'\'.join(password_chars) # Pool of all possible characters all_characters = upper_letters + lower_letters + digits + special_characters # Add remaining characters ensuring no two consecutive characters are identical while len(password_chars) < N: next_char = random.choice(all_characters) if next_char != password_chars[-1]: password_chars.append(next_char) random.shuffle(password_chars) return \'\'.join(password_chars)"},{"question":"Given an array of N integers, you are required to perform a series of operations to obtain the smallest lexicographical array possible. In each operation, you can select any subarray A[l ... r] such that 1 leq l leq r leq N, and reverse it. ------ Input ------ The first line contains an integer T, the number of test cases. Each of the next T test cases consists of two lines: - The first line contains the integer N, the number of integers in the array. - The second line contains N space-separated integers representing the array. ------ Output ------ For each test case, output a new line containing the smallest lexicographical array possible after any number of subarray reversals. ------ Constraints ------ 1 leq T leq 10^5 1 leq N leq 10^5 1 leq A_i leq 10^9 The sum of N over all test cases does not exceed 10^6. ------ Sample Input ------ 3 4 4 3 2 1 5 1 3 5 4 2 3 2 3 1 ------ Sample Output ------ 1 2 3 4 1 2 3 4 5 1 2 3","solution":"def smallest_lexicographical_array(test_cases): result = [] for n, arr in test_cases: result.append(sorted(arr)) return result"},{"question":"A well-known video streaming company has developed a new algorithm to monitor the performance of its streaming services worldwide. During a given day, they collect data on the number of bytes streamed in each second. The company wants to find the period of time with the maximum total bytes streamed. The data for each day is represented by an array of integers, where each integer represents the number of bytes streamed in one second. You are to write a function that takes the array and an integer `k` as input and returns the maximum sum of bytes streamed during any contiguous subarray of length `k`. # Function Signature ```python def max_streamed_bytes(data: List[int], k: int) -> int: ``` # Input - `data`: a list of integers (1 ≤ len(data) ≤ 10^5), where each integer (0 ≤ data[i] ≤ 10^4) represents the number of bytes streamed in the i-th second of the day. - `k`: an integer (1 ≤ k ≤ len(data)) representing the length of the period of time we are considering. # Output - The function should return an integer representing the maximum sum of bytes streamed during any contiguous subarray of length `k`. # Example Example 1: - Input: `data = [1, 3, 2, 6, 2, 3, 5]`, `k = 3` - Output: `11` Explanation: The subarray [6, 2, 3] has the maximum sum of 11 within any contiguous subarray of length 3. Example 2: - Input: `data = [5, 2, 1, 9, 7, 3, 2]`, `k = 4` - Output: `20` Explanation: The subarray [9, 7, 3, 1] has the maximum sum of 20 within any contiguous subarray of length 4. # Constraints - You are expected to find an efficient solution with a time complexity better than O(n*k). # Note Your goal is to maximize the performance of the function by efficient use of data structures and algorithms.","solution":"def max_streamed_bytes(data, k): Returns the maximum sum of bytes streamed during any contiguous subarray of length k. # Check if the length of data is less than k if len(data) < k: return 0 # Initialize the maximum sum as the sum of the first subarray of length k max_sum = current_sum = sum(data[:k]) # Slide the window over the array for i in range(k, len(data)): current_sum += data[i] - data[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an unsorted array of integers, write a function distinctElementsSubarray() that takes in the array and an integer k. The function should compute and return the size of the smallest subarray that contains at least k distinct elements. If no such subarray exists, the function should return -1. Example 1: Input: arr = [1, 2, 1, 3, 4, 2, 3], k = 3 Output: 3 Explanation: The smallest subarray with at least 3 distinct elements is [2, 1, 3] or [1, 3, 4]. Example 2: Input: arr = [1, 2, 1, 2, 1], k = 2 Output: 2 Explanation: The smallest subarray with at least 2 distinct elements is [1, 2]. Example 3: Input: arr = [1, 2, 1, 2, 1], k = 3 Output: -1 Explanation: There is no subarray with 3 distinct elements. Your task: You do not need to read input or print anything. Write a function distinctElementsSubarray() that takes an array of integers and an integer k as input and returns the size of the smallest subarray containing at least k distinct elements. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(arr) ≤ 10^5 1 ≤ arr[i] ≤ 10^5 1 ≤ k ≤ 10^5","solution":"def distinctElementsSubarray(arr, k): Returns the size of the smallest subarray that contains at least k distinct elements. If no such subarray exists, returns -1. n = len(arr) if k > n: return -1 start = 0 min_length = float(\'inf\') element_count = {} for end in range(n): element_count[arr[end]] = element_count.get(arr[end], 0) + 1 while len(element_count) >= k: min_length = min(min_length, end - start + 1) element_count[arr[start]] -= 1 if element_count[arr[start]] == 0: del element_count[arr[start]] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Given an array of integers, determine if there exists a combination of elements that forms an arithmetic sequence. An arithmetic sequence is a sequence of numbers such that the difference between consecutive terms is constant. -----Constraints----- - All values in the input are integers. - The array length is between 3 and 6 inclusive. - Each integer value in the array is between 1 and 100 inclusive. -----Input----- The input is given from Standard Input in the following format: n a_1 a_2 ... a_n -----Output----- Print \\"Yes\\" if there exists a combination of elements in the array that forms an arithmetic sequence, otherwise print \\"No\\". -----Sample Input----- 4 3 1 4 5 -----Sample Output----- Yes - The combination [1, 3, 5] forms an arithmetic sequence with a common difference of 2. -----Sample Input----- 3 1 2 4 -----Sample Output----- No - There is no combination of elements that forms an arithmetic sequence.","solution":"from itertools import combinations def is_arithmetic_sequence(arr): Determines if there exists a combination of elements in the list that forms an arithmetic sequence. def is_arith_seq(seq): n = len(seq) if n < 2: return True diff = seq[1] - seq[0] for i in range(2, n): if seq[i] - seq[i-1] != diff: return False return True n = len(arr) for r in range(3, n+1): for comb in combinations(arr, r): comb = sorted(comb) if is_arith_seq(comb): return \\"Yes\\" return \\"No\\" def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) arr = list(map(int, data[1:])) print(is_arithmetic_sequence(arr))"},{"question":"A group of friends loves playing word games. Recently, they have discovered a new game where they try to construct the longest possible palindrome using given sets of characters. The characters in these sets are allowed to be used partially or entirely, but each character from a set can be used only once. The friends seek your help to determine the length of the longest palindrome that can be formed from given sets of characters. Given a string `S` consisting of lowercase alphabets, you need to determine the length of the longest palindrome that can be formed using any subset of characters of `S`. Input The input contains a single line with the string `S`, with `1 ≤ |S| ≤ 1000`. Output Print an integer representing the length of the longest possible palindrome that can be constructed using any subset of characters from `S`. Examples Input abccccdd Output 7 Input aabbcc Output 6 Input abcba Output 5 Explanation In the first example, one of the longest palindromes that can be constructed is \\"dccaccd\\", which has a length of 7. In the second example, the entire string \\"aabbcc\\" can be used to form the palindrome \\"abccba\\" which has a length of 6. In the third example, one of the longest palindromes that can be constructed is \\"abcba\\", which has a length of 5.","solution":"def longest_palindrome_length(s): Returns the length of the longest palindrome that can be formed using any subset of characters from the given string `s`. from collections import Counter # Count the occurrences of each character in the string count = Counter(s) length = 0 odd_found = False # Iterate over each character count for char, freq in count.items(): if freq % 2 == 0: # If the frequency is even, add it fully length += freq else: # If the frequency is odd, add the largest even part length += freq - 1 odd_found = True # If there was any character with an odd count, add 1 to length if odd_found: length += 1 return length"},{"question":"You are given a list of integers. Your task is to create a function that returns a new list containing the squares of all even numbers from the original list, followed by the cubes of all odd numbers from the original list. The order of elements in the resulting list should follow their appearance in the original list. Examples ``` [1, 2, 3, 4] --> [1, 4, 27, 16] [5, 6, 7, 8, 9] --> [125, 36, 343, 64, 729] [] ``` Constraints - The list can contain zero or more integers. - The integers can be positive, negative, or zero.","solution":"def process_numbers(nums): This function takes a list of integers and returns a new list containing the squares of all even numbers followed by the cubes of all odd numbers, preserving the order of elements from the original list. :param nums: List of integers :return: List of integers with squared evens and cubed odds result = [] for num in nums: if num % 2 == 0: result.append(num ** 2) else: result.append(num ** 3) return result"},{"question":"In this task, you are given a string consisting of lowercase alphabets and your goal is to check whether it can be rearranged into a palindrome. If it can, return any one of such palindromic arrangements; if it cannot, return an empty string. For example, given the string `code`, it cannot be rearranged into a palindrome so the output should be `\\"\\"`. But given the string `aabbcc`, it can be rearranged to form a palindrome (e.g., `abcabc` or `bcaacb` etc.), so you should return one possible palindromic arrangement. Consider these constraints: - The input string will have at most 1000 characters. - If multiple palindromic arrangements exist, you may return any one of them. More examples in the test cases. Good luck!","solution":"def can_form_palindrome(s): Checks if a given string can be rearranged into a palindrome and returns one possible palindromic arrangement if so. Otherwise, returns an empty string. from collections import Counter count = Counter(s) odd_count = 0 for value in count.values(): if value % 2 != 0: odd_count += 1 if odd_count > 1: return \\"\\" mid = \\"\\" halves = [] for char, freq in count.items(): if freq % 2 != 0: mid = char halves.append(char * (freq // 2)) half = \\"\\".join(halves) return half + mid + half[::-1]"},{"question":"Write a program that takes three integers as input and determines the largest among them. -----Input:----- - The first line contains the first integer (A). - The second line contains the second integer (B). - The third line contains the third integer (C). -----Output:----- Output a single line containing the largest of the three integers. -----Constraints----- - -1000 ≤ A ≤ 1000 - -1000 ≤ B ≤ 1000 - -1000 ≤ C ≤ 1000 -----Sample Input:----- 23 89 67 -----Sample Output:----- 89","solution":"def find_largest(a, b, c): Returns the largest amongst a, b, and c. return max(a, b, c)"},{"question":"Alice and Bob love playing a game involving prime numbers. Together, they came up with a new challenge: finding the product of all prime numbers between two given numbers inclusive. Given two positive integers, l and r, Alice wants to know the product of all prime numbers in this range modulo 10^9 + 7. Bob, being impatient, needs a fast solution. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains two integers, l and r. Output: For each test case, print the product of all prime numbers between l and r modulo 10^9 + 7, or -1 if there are no prime numbers in the given range. Constraints: 1 ≤ T ≤ 10^4 1 ≤ l ≤ r ≤ 10^6 SAMPLE INPUT 3 1 10 10 20 20 30 SAMPLE OUTPUT 210 9699690 742073813 Explanation First case: The prime numbers between 1 and 10 are 2, 3, 5, and 7. Their product is 2 * 3 * 5 * 7 = 210. Second case: The prime numbers between 10 and 20 are 11, 13, 17, and 19. Their product is 11 * 13 * 17 * 19 = 46189 which modulo 10^9 + 7 is 46189. Third case: The prime numbers between 20 and 30 are 23, 29. Their product is 23 * 29 = 667 which modulo 10^9 + 7 is 667.","solution":"def sieve(max_num): Generate a list of booleans representing primality of numbers from 0 to max_num. is_prime = [True] * (max_num + 1) is_prime[0] = is_prime[1] = False for p in range(2, int(max_num**0.5) + 1): if is_prime[p]: for i in range(p * p, max_num + 1, p): is_prime[i] = False primes = [] for num in range(max_num + 1): if is_prime[num]: primes.append(num) return is_prime, primes def prime_product(l, r, primes, is_prime, MOD=10**9 + 7): Calculate the product of all prime numbers between l and r inclusive. Return -1 if there are no primes in this range. product = 1 found_prime = False for prime in primes: if l <= prime <= r: product = (product * prime) % MOD found_prime = True if prime > r: break return product if found_prime else -1 def process_test_cases(T, cases): max_num = 10**6 is_prime, primes = sieve(max_num) results = [] for l, r in cases: result = prime_product(l, r, primes, is_prime) results.append(result) return results"},{"question":"A group of friends is planning a trip to a holiday destination. They have a list of tourist attractions they want to visit, but they have limited time. They want to visit as many attractions as possible without exceeding the available time. The time needed for each attraction and the total available time are provided. Write a program to help the friends determine the maximum number of attractions they can visit without exceeding the total available time. -----Input----- The first line contains an integer T (1 leq T leq 10000), the total available time in minutes. The second line contains an integer N (1 leq N leq 10000), the number of attractions. Each of the following N lines contains a single integer representing the time in minutes needed for each attraction. -----Output----- Output a single integer which is the maximum number of attractions that can be visited without exceeding the total available time. -----Examples----- Sample Input: 120 5 30 60 15 45 50 Sample Output: 3 Sample Input: 90 4 20 30 40 50 Sample Output: 3","solution":"def max_attractions(T, N, times): Determine the maximum number of attractions that can be visited without exceeding the total available time. Args: T : int : Total available time in minutes N : int : Number of attractions times : list : List of times needed for each attraction Returns: int : Maximum number of attractions times.sort() count = 0 total_time = 0 for time in times: if total_time + time <= T: total_time += time count += 1 else: break return count"},{"question":"You are given a list of Olympic medal tallies for various countries. Each country is defined by its name, number of gold medals, silver medals, and bronze medals. The countries are ranked primarily by the number of gold medals, then the number of silver medals (if tied in gold), and finally by the number of bronze medals (if tied in both gold and silver). Your task is to determine the ranking position of a particular country in this medal tally list. Input The first line contains an integer n (1 ≤ n ≤ 50), the number of countries in the list. The following n lines each contain a string and three integers, representing a country name (consisting of uppercase English alphabet characters only, and having length between 1 and 50), the number of gold medals, silver medals, and bronze medals that country has won, respectively. The last line contains the name of the specific country for which you need to determine the ranking position. Output In the only line, print the ranking position of the specified country in the medal tally list. Examples Input 5 USA 10 5 8 CHINA 8 10 5 JAPAN 10 5 6 GERMANY 5 6 7 RUSSIA 8 7 10 JAPAN Output 2 Input 4 KOR 5 6 7 USA 15 20 25 GER 10 10 10 CAN 5 6 8 KOR Output 4 Note In the first sample, the medal tally ordered by ranking is: 1. USA (10 Gold, 5 Silver, 8 Bronze) 2. JAPAN (10 Gold, 5 Silver, 6 Bronze) 3. CHINA (8 Gold, 10 Silver, 5 Bronze) 4. RUSSIA (8 Gold, 7 Silver, 10 Bronze) 5. GERMANY (5 Gold, 6 Silver, 7 Bronze) Since we are querying for JAPAN, which ranks second. In the second sample, the medal tally ordered by ranking is: 1. USA (15 Gold, 20 Silver, 25 Bronze) 2. GER (10 Gold, 10 Silver, 10 Bronze) 3. CAN (5 Gold, 6 Silver, 8 Bronze) 4. KOR (5 Gold, 6 Silver, 7 Bronze) Since we are querying for KOR, which ranks fourth.","solution":"def find_country_position(n, medal_data, target_country): # Sorting the medal data based on gold, silver and bronze medals in descending order sorted_medal_data = sorted(medal_data, key=lambda x: (-x[1], -x[2], -x[3])) # Find the position of the target country for idx, (country, gold, silver, bronze) in enumerate(sorted_medal_data): if country == target_country: return idx + 1 return -1 # Example usage n = 5 medal_data = [ (\\"USA\\", 10, 5, 8), (\\"CHINA\\", 8, 10, 5), (\\"JAPAN\\", 10, 5, 6), (\\"GERMANY\\", 5, 6, 7), (\\"RUSSIA\\", 8, 7, 10) ] target_country = \\"JAPAN\\" print(find_country_position(n, medal_data, target_country)) # Output: 2"},{"question":"Given a 2D grid of characters representing a map of islands (*\'L\'*) and water (*\'W\'*), you need to determine the size of the largest island. An island is defined as a group of adjacent cells containing \'L\' connected in horizontal or vertical directions. **Input:** - First line contains two integers M and N (1 le M, N le 1000) representing the number of rows and columns of the grid. - The next M lines each contain N characters representing the grid. **Output:** - A single integer which is the size of the largest island. **Examples:** *Example Input 1:* ``` 4 5 LWLWL WWWLL LLLWW LWLWL ``` *Example Output 1:* ``` 5 ``` *Example Input 2:* ``` 3 3 WLW LLL WLW ``` *Example Output 2:* ``` 5 ```","solution":"def largest_island_size(grid): Returns the size of the largest island in the given 2D grid of \'L\' and \'W\'. An island is defined as a group of adjacent \'L\'s connected horizontally or vertically. def is_valid(x, y, visited): return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and not visited[x][y] and grid[x][y] == \'L\' def dfs(x, y, visited): # Stack-based DFS to avoid recursion limit issues. stack = [(x, y)] size = 0 while stack: cx, cy = stack.pop() if not is_valid(cx, cy, visited): continue visited[cx][cy] = True size += 1 # Add all 4 possible directions. for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if is_valid(nx, ny, visited): stack.append((nx, ny)) return size if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False] * cols for _ in range(rows)] largest_size = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'L\' and not visited[r][c]: # Perform DFS to find the size of this island. current_size = dfs(r, c, visited) largest_size = max(largest_size, current_size) return largest_size # Function to intake grid data and return processed result def process_largest_island_size_input(data): lines = data.strip().split(\'n\') M, N = map(int, lines[0].split()) grid = [list(line) for line in lines[1:M+1]] return largest_island_size(grid)"},{"question":"Tom is a librarian who needs to organize a large collection of books by genre. Each genre can be represented by a unique lowercase string, and each book has a string of lowercase characters on its cover indicating its main genre. Tom wants to create an automated system to help him quickly determine if books belong to the same genre. A book\'s genre string and a genre identifier match if the genre identifier is a subsequence of the book\'s genre string. For example, if \\"art\\" is the book\'s genre string, then \\"a\\", \\"ar\\", \\"rt\\" would all be valid subsequences. You need to write a program to help Tom by checking if each book\'s genre matches a specified genre identifier. Input: The first line contains a single integer T, the number of genres and identifiers to verify. Each of the following T lines contains: - The genre string of the book G - The genre identifier I Output: For each genre and identifier pair, output on a separate line \\"YES\\" if the genre identifier is a subsequence of the book\'s genre string, and \\"NO\\" otherwise. Constraints: 1 ≤ T ≤ 10^3 1 ≤ |G|, |I| ≤ 10^3, where |G| and |I| denote the lengths of the genre string and genre identifier respectively. Sample Input: 5 literature lit biology bio chemistry chemi mathematics mat history hiss Sample Output: YES YES YES YES NO","solution":"def check_genre_subsequence(T, genre_identifier_pairs): results = [] for G, I in genre_identifier_pairs: it = iter(G) if all(char in it for char in I): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Sample usage T = 5 genre_identifier_pairs = [ (\\"literature\\", \\"lit\\"), (\\"biology\\", \\"bio\\"), (\\"chemistry\\", \\"chemi\\"), (\\"mathematics\\", \\"mat\\"), (\\"history\\", \\"hiss\\") ] results = check_genre_subsequence(T, genre_identifier_pairs) for result in results: print(result)"},{"question":"Write a function that accepts a list of integers and an integer target value, and finds the number of pairs of integers in the list that sum up to the target value. Input Two lines of input, the first line contains integers separated by space representing the list of integers, and the second line contains a single integer representing the target value. Output Print a single integer, which is the count of pairs that sum up to the target value. Example Input 1 2 3 4 3 5 Output 2","solution":"def count_pairs_with_sum(nums, target): Returns the number of pairs in the list nums that sum up to the target value. seen = {} count = 0 for num in nums: complement = target - num if complement in seen: count += seen[complement] if num in seen: seen[num] += 1 else: seen[num] = 1 return count"},{"question":"A group of scientists are working with a species of bacteria that reproduce in a unique pattern. Each generation, they produce double the amount of the previous generation\'s bacteria but in a structured way. Each bacterium splits into two new bacteria that continue to evolve in subsequent generations similarly. You are tasked with calculating the total number of bacteria present after \'n\' generations, starting from a single bacterium. Write a function `bacteria_growth(n)` that takes an integer `n` representing the number of generations and returns the total number of bacteria present after `n` generations. ** Input:** An integer n (0 ≤ n ≤ 20) ** Output:** An integer representing the total number of bacteria present after `n` generations. ** Example ** Input: 3 Output: 15 ** Explanation ** - Generation 0: 1 bacterium - Generation 1: 2 bacteria (1 splits into 2) - Generation 2: 4 bacteria (2 splits into 4) - Generation 3: 8 bacteria (4 splits into 8) The total number of bacteria after 3 generations is 1 + 2 + 4 + 8 = 15","solution":"def bacteria_growth(n): Returns the total number of bacteria present after n generations starting from a single bacterium. total_bacteria = 0 for i in range(n + 1): total_bacteria += 2 ** i return total_bacteria"},{"question":"A company has a policy for tracking employee check-ins and check-outs via a numeric code system. Each employee has a unique ID number from 1 to 100. When an employee checks in, their ID number is recorded in a list. When they check out, the code \\"0\\" is recorded and their latest check-in ID is removed from the list. For example, a sequence: ``` 4 7 0 9 0 4 5 0 0 0 ``` demonstrates that employee 4 checked in, followed by employee 7. Employee 7 then checked out, followed by employee 9 checking in, and then checking out. Subsequently, employee 4 checked in, followed by employee 5, and they both checked out successively. Write a program which simulates the check-ins and check-outs of employees represented by the sequence of ID numbers. The program should read the sequence of ID numbers and 0, then print the IDs of the employees who checked out in the correct order. Initially, there are no employees checked in. **Input:** A sequence of employee ID numbers (1-100) or 0. The number of input lines is less than or equal to 100. **Output:** For each 0 in the input, print the employee ID that checked out in order. **Example:** ``` Input: 4 7 0 9 0 4 5 0 0 0 Output: 7 9 5 4 4 ``` Here, the output is the IDs of employees in the order they checked out.","solution":"def track_checkouts(sequence): This function takes a list of employee check-in IDs and 0s indicating check-outs. It returns a list of employee IDs in the order they checked out. check_in_stack = [] check_outs = [] for s in sequence: if s == 0: if check_in_stack: check_outs.append(check_in_stack.pop()) else: check_in_stack.append(s) return check_outs"},{"question":"Given an array of integers, find the two numbers such that they add up to a specific target number. You may assume that each input would have exactly one solution, and you may not use the same element twice. Write a function to return the indices of the two numbers (1-based) that add up to the target. Input: The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. The third line contains a single integer target, representing the target sum. Output: Output the indices of the two numbers that add up to the target as two space-separated integers. Constraints: 2 <= n <= 104 -109 <= array[i] <= 109 -109 <= target <= 109 Example: Input: 4 2 7 11 15 9 Output: 1 2 Explanation: Because 2 + 7 = 9, we return indices 1 and 2 (1-based indexing).","solution":"def find_two_sum_indices(n, array, target): Given an array of integers, find the two numbers such that they add up to a specific target number. Return the indices of the two numbers (1-based) that add up to target. :param n: int - the number of elements in the array :param array: list - a list of integers :param target: int - the target sum :return: tuple - indices (1-based) of the two numbers that add up to target lookup = {} for i in range(n): complement = target - array[i] if complement in lookup: return (lookup[complement] + 1, i + 1) lookup[array[i]] = i"},{"question":"A delivery company has a large fleet of delivery trucks that often visit multiple destinations. Each truck has a delivery capacity, which is the maximum number of locations it can visit in one trip. Due to recent traffic issues, the company wants to minimize the total travel distance of its trucks while still completing all deliveries. They want to know if it\'s possible for their fleet to handle all deliveries such that each truck only travels to its maximum capacity or fewer locations, while also trying to keep the total distance covered as low as possible. A road network can be represented as a graph where intersections are nodes and roads are edges with weights representing distances. Given the capacities of the trucks, the distances between the intersections, and the number of deliveries at each intersection, write a program to determine if the delivery tasks can be completed within the capacity constraints and to output the minimum total travel distance of the trucks. -----Input----- The first line contains an integer n (1 leq n leq 100) — the number of intersections (nodes). The second line contains an integer m (1 leq m leq 500) — the number of roads (edges). The following m lines each contain three integers u, v, and d (1 le u, v le n, 1 le d le 1000) — representing a bidirectional road from intersection u to intersection v with distance d. The next line contains an integer k (1 le k le 50) — the number of trucks in the fleet. The next line contains k integers c_1, c_2, ..., c_k (1 le c_i le n) — representing the delivery capacities of the trucks. The next line contains an integer l (1 le l le n) — the number of delivery tasks. The following l lines each contain two integers x and d (1 le x le n, 0 le d le 1000) — representing an intersection x and the number of deliveries required to that intersection d. -----Output----- Print a single integer — the minimum total travel distance of the trucks required to complete all deliveries, or -1 if it is not possible to complete the deliveries within the capacity constraints. -----Example----- Input 5 6 1 2 3 1 3 4 1 4 2 2 4 5 3 4 1 4 5 6 3 2 2 4 3 1 5 3 3 5 1 Output -1","solution":"import heapq import sys from collections import defaultdict, deque def dijkstra(graph, start, n): distances = [float(\'inf\')] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def can_complete_deliveries(n, m, roads, k, capacities, l, deliveries): graph = defaultdict(list) for u, v, d in roads: graph[u].append((v, d)) graph[v].append((u, d)) total_deliveries = sum(d[1] for d in deliveries) if total_deliveries > sum(capacities): return -1 # Find the minimum distances from each node using Dijkstra\'s algorithm min_distances_from_node = {} for i in range(1, n + 1): min_distances_from_node[i] = dijkstra(graph, i, n) # Try to assign deliveries to trucks delivery_queue = deque(deliveries) total_distance = 0 for capacity in sorted(capacities, reverse=True): assignments = [] while delivery_queue and capacity > 0: intersection, delivery = delivery_queue.popleft() if delivery <= capacity: assignments.append((intersection, delivery)) capacity -= delivery else: assignments.append((intersection, capacity)) delivery_queue.appendleft((intersection, delivery - capacity)) capacity = 0 if not assignments: break min_distance = float(\'inf\') for start in range(1, n + 1): distance = 0 current_pos = start for intersection, delivery in assignments: distance += min_distances_from_node[current_pos][intersection] current_pos = intersection distance += min_distances_from_node[current_pos][start] min_distance = min(min_distance, distance) if min_distance == float(\'inf\'): return -1 total_distance += min_distance if delivery_queue: return -1 return total_distance"},{"question":"You are given an array of integers. Each element in the array represents the height of a vertical line on a 1D graph. Your task is to find two lines, which together with the x-axis, forms a container, such that the container holds the maximum amount of water. The container cannot be slanted, and you cannot move each container\'s positions after choosing which two lines are going to form the container. Write a function that takes an array of integers and returns the maximum amount of water the container can hold. -----Input----- The input is a single line containing space-separated integers h_1, h_2, ..., h_n (0 leq h_i leq 10^4), where n is the number of elements in the array and 2 leq n leq 10^5. -----Output----- Output a single integer, representing the maximum amount of water the container can hold. -----Example----- Input 1 8 6 2 5 4 8 3 7 Output 49 -----Note----- The two vertical lines in the example are at positions 1 (height 8) and 8 (height 7). The maximum water height is 7, and the width between them is 8 - 1 = 7. Therefore, the area is 7 * 7 = 49.","solution":"def max_area(heights): Returns the maximum amount of water that can be held between two lines. left = 0 right = len(heights) - 1 max_water = 0 while left < right: width = right - left current_height = min(heights[left], heights[right]) current_area = width * current_height max_water = max(max_water, current_area) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"Arjun loves gardening and he recently bought many seeds of different types of flowers. He has a rectangular garden of width `W` meters and length `L` meters where he plans to plant his flowers. Arjun has already decided on a planting scheme where each type of flower seed will be planted in a rectangular patch of specified dimensions. He wonders how many patches of each type of flower seed can fit into his garden without overlapping any patches. Help Arjun by writing a program. Input: The first line of input contains three integers W, L and N (1 ≤ W, L ≤ 10^9, 1 ≤ N ≤ 10^6), where W is the width of the garden, L is the length of the garden, and N is the number of different types of flower seeds. The next N lines each contain two integers wi and li (1 ≤ wi, li ≤ 10^9 each), representing the width and length of the rectangular patch for the i-th type of flower seed. Output: For each type of flower seed, output the maximum number of patches that can be planted in the garden without overlapping any patches, considering both horizontal and vertical orientations of the patches. SAMPLE INPUT 5 4 2 2 1 4 2 SAMPLE OUTPUT 10 2","solution":"def max_patches(W, L, flower_patches): results = [] for wi, li in flower_patches: # Calculate number of patches that fit considering horizontal and vertical orientation horizontal_fits = (W // wi) * (L // li) vertical_fits = (W // li) * (L // wi) # Choose the orientation that allows more patches results.append(max(horizontal_fits, vertical_fits)) return results"},{"question":"A software company is developing a new validation feature for tracking and managing project tasks. As part of the development process, they need to analyze the assignment of tasks to ensure that no single employee gets overwhelmed with too many tasks at the same time. They want you to write a function that checks for overlapping tasks assigned to an employee. For a given list of tasks, each defined by a start time and end time, determine if any two tasks overlap. Tasks overlap if they intersect at any point in time, including at their boundaries. -----Input----- The first line contains an integer n (1 le n le 100), the number of tasks assigned to the employee. Each of the next n lines contains two integers, start_i and end_i (-10^4 le start_i < end_i le 10^4), representing the start and end times of a task. -----Output----- If any two tasks overlap, output \\"True\\". Otherwise, output \\"False\\". -----Examples----- Sample Input 1: 3 1 5 6 10 11 15 Sample Output 1: False Sample Input 2: 4 1 5 5 10 10 15 7 12 Sample Output 2: True","solution":"def has_overlapping_tasks(tasks): Determines if any two tasks in the list overlap. Parameters: tasks (list of tuples): A list where each tuple contains two integers (start, end). Returns: bool: True if there are overlapping tasks, False otherwise. # Sort the tasks based on the start time tasks.sort(key=lambda x: x[0]) for i in range(len(tasks) - 1): # Check if the end time of the current task exceeds the start time of the next task if tasks[i][1] > tasks[i+1][0]: return True return False"},{"question":"Given a binary tree, you are tasked with finding the nodes that are visible when the tree is viewed from the right side. The right-side view of a binary tree is the set of nodes visible when it is viewed from the right side. Your Task: You do not need to read input or print anything. Your task is to complete the function rightSideView() which takes the root of the binary tree as input and returns a list of integers representing the nodes visible from the right side of the tree. Example 1: Input: [1,2,3,null,5,null,4] Output: [1, 3, 4] Explanation: 1 <--- / 2 3 <--- 5 4 <--- Example 2: Input: [1,null,3] Output: [1, 3] Explanation: 1 <--- 3 <--- Your Task: You do not need to read input or print anything. Your task is to complete the function rightSideView() which takes the root of the binary tree as input and returns a list of integers representing the nodes visible from the right side of the tree. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: - The number of nodes in the tree is in the range [0, 100]. - -100 ≤ Node.val ≤ 100","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def rightSideView(root): if not root: return [] right_view = [] queue = [root] while queue: level_length = len(queue) for i in range(level_length): node = queue.pop(0) if i == level_length - 1: # the rightmost element of this level right_view.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return right_view"},{"question":"Given two strings, find the minimum number of operations required to convert the first string into the second string. The allowed operations are: 1. Insert a character 2. Delete a character 3. Replace a character For example: * `edit_distance(\\"kitten\\", \\"sitting\\") = 3` * `edit_distance(\\"flaw\\", \\"lawn\\") = 2` * `edit_distance(\\"intention\\", \\"execution\\") = 5` The input will be two non-empty lowercase strings.","solution":"def edit_distance(s1, s2): Computes the minimum number of operations required to convert string s1 into s2. The operations allowed are insert a character, delete a character, or replace a character. Parameters: s1 (str): The source string. s2 (str): The target string. Returns: int: The minimum number of operations required to transform s1 into s2. m = len(s1) n = len(s2) # Create a table to store solutions of subproblems dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)] # Initialize the table for i in range(m + 1): for j in range(n + 1): # If first string is empty, the only option is to insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, the only option is to delete all characters of first string elif j == 0: dp[i][j] = i # If last characters are the same, ignore last character and recur for remaining string elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace # Return the result return dp[m][n]"},{"question":"You are given a string representing a mathematical expression involving non-negative integers and the basic arithmetic operators: addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`). The string may also include spaces, which should be ignored. Division should be treated as integer division (truncate towards zero). Write a function `evaluate_expression(expression: str) -> int` that takes this string as input and returns the result of the expression. Example ``` evaluate_expression(\\"3+2*2\\") -> 7 evaluate_expression(\\" 3/2 \\") -> 1 evaluate_expression(\\" 3+5 / 2 \\") -> 5 ``` Constraints - The length of the input string will be between 1 and 10^4. - The input string will contain only non-negative integers, arithmetic operators, and spaces. - The expression string is guaranteed to be a valid mathematical expression. Hint: Use a stack to help keep track of numbers and operators. Traverse the string while managing the current number and operator. Handle each operator differently as required: `*` and `/` should be immediately resolved with the most recent number in the stack, while `+` and `-` can wait until all higher precedence operations are completed.","solution":"def evaluate_expression(expression: str) -> int: Evaluate a mathematical expression involving non-negative integers and the basic arithmetic operators: addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`). Division is treated as integer division. Spaces in the input string should be ignored. def apply_op(op, second, first): if op == \'+\': return first + second if op == \'-\': return first - second if op == \'*\': return first * second if op == \'/\': return int(first / second) # Truncate towards zero # Remove spaces expression = expression.replace(\' \', \'\') stack = [] num = 0 sign = \'+\' for i, char in enumerate(expression): if char.isdigit(): num = num * 10 + int(char) if char in \'+-*/\' or i == len(expression) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign in \'*/\': last = stack.pop() stack.append(apply_op(sign, num, last)) sign = char num = 0 return sum(stack)"},{"question":"You are given an array A of integers and an integer target T. Your task is to find whether there exist two distinct indices i and j such that A[i] + A[j] = T. If such a pair exists, return their indices (i, j). If no such pair exists, return -1. Indices i and j must satisfy 1 ≤ i < j ≤ N, where N is the length of the array. ------ Input Format ------ - The first line contains an integer N, the length of the array. - The second line contains N space-separated integers, the elements of the array A. - The third line contains a single integer T, the target sum. ------ Output Format ------ - If there exists a pair (i, j) such that A[i] + A[j] = T, print the indices i and j. - If no such pair exists, print -1. ------ Constraints ------ - 1 ≤ N ≤ 10^5 - -10^9 ≤ A[i] ≤ 10^9 - -10^9 ≤ T ≤ 10^9 ------ Sample Input 1 ------ 5 2 7 11 15 3 9 ------ Sample Output 1 ------ 1 2 ------ Sample Input 2 ------ 4 1 2 3 4 8 ------ Sample Output 2 ------ -1 ------ Explanation 1 ------ In the first example, A[1] + A[2] = 2 + 7 = 9. Thus, the indices 1 and 2 form a valid pair. In the second example, there are no two distinct indices i and j such that A[i] + A[j] equals 8. Hence, the output is -1.","solution":"def find_pair_with_sum(N, A, T): Finds two distinct indices i and j such that A[i] + A[j] = T. Args: N : int : length of the array A : list : the list of integers T : int : the target sum Returns: tuple : (i, j) if such indices are found, otherwise -1 indices_map = {} for index in range(N): complement = T - A[index] if complement in indices_map: return indices_map[complement] + 1, index + 1 # converting to 1-based indexing indices_map[A[index]] = index return -1"},{"question":"Write an interactive program that will play a guessing game with the user. The program will try to guess the number the user is thinking of. Here\'s how it works: 1. The user thinks of a number between 1 and 100 (inclusive). 2. The program will try to guess the number by repeatedly making a guess and allowing the user to respond with hints. 3. The user must respond with \\"too low\\" if the program\'s guess is smaller than the number, \\"too high\\" if the program\'s guess is greater than the number, and \\"correct\\" if the program\'s guess matches the number. The program should minimize the number of guesses. Use a binary search approach for an optimal solution. **Input:** - No input is required from the user initially. **Output:** - The program should print each guess and wait for the user\'s response. Provide an implementation in Python. **Example interaction:** ``` Think of a number between 1 and 100 (inclusive). Is your number 50? too low Is your number 75? too high Is your number 62? too high Is your number 56? correct ``` Note: The actual implementation of user input for responses (\\"too low\\", \\"too high\\", \\"correct\\") should be interactive, using `input()` to get user feedback in a real program.","solution":"def guessing_game(): print(\\"Think of a number between 1 and 100 (inclusive).\\") low, high = 1, 100 while low <= high: guess = (low + high) // 2 print(f\\"Is your number {guess}?\\") response = input(\\"Enter your response (\'too low\', \'too high\', \'correct\'): \\").strip().lower() if response == \'too low\': low = guess + 1 elif response == \'too high\': high = guess - 1 elif response == \'correct\': print(f\\"Great! The number was {guess}.\\") return else: print(\\"Invalid response. Please enter \'too low\', \'too high\', or \'correct\'.\\") # This function can be called to start the game."},{"question":"In a distant universe, there exist a special type of sequence known as a Magic Sequence. A Magic Sequence of length n is an integer sequence where each element a_i is defined as the sum of the product of every pair of distinct digits in its decimal representation. For instance, for the number 123: - The pairs of distinct digits are (1,2), (1,3), and (2,3). - Therefore, the sum is 1*2 + 1*3 + 2*3 = 11. Your task is to find the k-th Magic Sequence of length n, starting from the sequence containing all 1\'s up to any valid sequence. INPUT: The first line contains an integer T denoting the number of test cases. The next T lines each contain two integers n and k. OUTPUT: For each test case, print the k-th Magic Sequence of length n as per the order defined above. Constraints: 1 ≤ T ≤ 10^4 1 ≤ n ≤ 18 1 ≤ k ≤ 10^6 SAMPLE INPUT 2 2 3 3 10 SAMPLE OUTPUT 29 136 (Note: The output sequences are representative, and might need verification for correctness in sequence definition.)","solution":"def generate_magic_sequence(n, k): Generates the k-th Magic Sequence of length n. if n == 1: return k current = int(\'1\' * n) count = 1 while count < k: current += 1 count += 1 return current def main(input_data): Handles input and output for the problem. results = [] data = input_data.strip().split() T = int(data[0]) index = 1 for _ in range(T): n = int(data[index]) k = int(data[index + 1]) results.append(generate_magic_sequence(n, k)) index += 2 return results"},{"question":"Overview Conway\'s Game of Life is a cellular automaton devised by the British mathematician John Horton Conway in 1970. It consists of a grid of cells that can live, die, or multiply based on a few mathematical rules. The game simulates cellular evolution. Here, you are required to implement a function to compute the next state of a given configuration of the grid. Rules of the Game of Life The universe of the Game of Life is an infinite, two-dimensional orthogonal grid of square cells, each of which is in one of two possible states, live or dead. Each cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent. At each step in time, the following transitions occur: 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. Your Task Write a function `game_of_life(grid)` that takes a 2D list `grid` representing the current state of the grid, where `1` indicates a live cell and `0` indicates a dead cell. The function should return a new 2D list representing the next state of the grid after applying the rules of the game. Examples # Input: ``` [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] ``` # Output: ``` [ [0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0] ] ``` # Implementation notes: - The input grid can be of any size, but you may assume it will always be a non-empty list of non-empty lists. - The output grid must be of the same dimensions as the input grid. - Handle the edges of the grid as though the grid is surrounded by an infinite region of dead cells. Additional Information - Make sure your function runs efficiently even for larger grids. - Think about how you can synchronize updates to avoid mutating the grid while calculating the next state.","solution":"def game_of_life(grid): Calculate the next state of the Game of Life grid. Args: grid (list of list of int): A 2D list representing the current state of the grid. Returns: list of list of int: A 2D list representing the next state of the grid. rows = len(grid) cols = len(grid[0]) def get_live_neighbors_count(r, c): Get the number of live neighbors around a cell at position (r, c). Args: r (int): Row index of the cell. c (int): Column index of the cell. Returns: int: The number of live neighbors. live_neighbors = 0 for i in range(r-1, r+2): for j in range(c-1, c+2): if (i == r and j == c) or i < 0 or j < 0 or i >= rows or j >= cols: continue if grid[i][j] == 1: live_neighbors += 1 return live_neighbors # Create a new grid to store the next state new_grid = [[0 for _ in range(cols)] for _ in range(rows)] for r in range(rows): for c in range(cols): live_neighbors = get_live_neighbors_count(r, c) if grid[r][c] == 1: # Rule 1 or 3 if live_neighbors < 2 or live_neighbors > 3: new_grid[r][c] = 0 # Rule 2 else: new_grid[r][c] = 1 else: # Rule 4 if live_neighbors == 3: new_grid[r][c] = 1 return new_grid"},{"question":"Amy loves running her small cafe. Her customers have a variety of favorite drinks, and she wants to ensure she stocks the right amounts to avoid shortages or waste. She stocks n different types of drinks, each identified by a unique number from 1 to n. By tracking past data, she has the expected demand for each drink on a given day. Additionally, she has constraints on her budget and storage capacity, which prevent her from stocking unlimited amounts of each drink. Each drink i has a cost c_i, an expected demand d_i, and a storage requirement s_i. Given the budget B and storage capacity C, help Amy determine the maximum number of different types of drinks she can stock such that the total cost does not exceed B and the total storage required does not exceed C. Input The first line contains three integers n, B, and C (1 ≤ n ≤ 1000, 1 ≤ B, C ≤ 10^6) — the number of different types of drinks, the budget, and the storage capacity, respectively. The next n lines each contain three integers c_i, d_i, and s_i (1 ≤ c_i, d_i, s_i ≤ 10^6) — the cost, expected demand, and storage requirement for the i-th drink. Output On the first line, output a single integer — the maximum number of different types of drinks Amy can stock. Examples Input 4 10 12 3 5 4 2 7 2 4 6 3 5 8 5 Output 3 Input 3 5 5 2 4 3 1 6 1 3 5 4 Output 2","solution":"def max_drinks(n, B, C, drinks): # DP table where dp[x][y] will be the maximum number of different types of drinks # we can stock with a budget x and storage capacity y dp = [[0] * (C + 1) for _ in range(B + 1)] for c_i, _, s_i in drinks: for b in range(B, c_i - 1, -1): for s in range(C, s_i - 1, -1): dp[b][s] = max(dp[b][s], dp[b - c_i][s - s_i] + 1) return dp[B][C]"},{"question":"A road network is represented as a grid of N x M cells. Some cells contain stones, and others are empty. You need to find the number of distinct paths from the top-left cell to the bottom-right cell, given that you can only move right or down to an adjacent cell at each step and that you cannot move through cells containing stones. You are required to write a program to compute the number of such paths. If there is no possible path, the program should return 0. Input Format The first line contains the number of test cases T. Each test case starts with two integers N and M, representing the dimensions of the grid. The next N lines each contain M characters, either \'.\' or \'#\', where \'.\' represents an empty cell and \'#\' represents a cell with a stone. Constraints 1 leq T leq 20 1 leq N, M leq 1000 Output Format Output T lines, one for each test case, containing the number of distinct paths modulo 1000000007. Sample Input 0 2 3 3 ... .#. ... 2 2 .# Sample Output 0 2 0 Explanation 0 For the first test case, there are 2 distinct paths from the top-left to the bottom-right: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right For the second test case, there is no possible path from the top-left to the bottom-right because of the stones blocking the way.","solution":"MOD = 1000000007 def num_paths(grid): N = len(grid) M = len(grid[0]) if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[N-1][M-1] def solve(test_cases): results = [] for grid in test_cases: results.append(num_paths(grid)) return results def main(input_data): input_lines = input_data.strip().split(\'n\') num_cases = int(input_lines[0]) index = 1 test_cases = [] for _ in range(num_cases): N, M = map(int, input_lines[index].split()) index += 1 grid = [] for _ in range(N): grid.append(input_lines[index]) index += 1 test_cases.append(grid) results = solve(test_cases) return \\"n\\".join(map(str, results))"},{"question":"The organizers of a coding bootcamp want to prepare a balanced meal plan for all participants. The requirement for the meal plan is that it includes exactly n different meals such that: 1. Each meal has a name and a calorie count. 2. The total calorie count of the meal plan should be as close as possible to a target value C. 3. It is guaranteed that there are at least n meals available. You need to write a function to determine the best possible meal plan given a list of available meals. If there are multiple plans with the same total calorie count closest to the target, you can return any of them. # Function Signature: ```python def closest_meal_plan(meals: List[Tuple[str, int]], n: int, C: int) -> List[Tuple[str, int]]: pass ``` # Input: - Either a list of meals `(meals)` where each meal is represented as a tuple containing the name of the meal (a string) and its calorie count (an integer), the number of meals to be included in the meal plan `(n)`, and the target calorie count `(C)`. - `1 ≤ len(meals) ≤ 1000` - `1 ≤ n ≤ len(meals)` - `0 ≤ C ≤ 10^6` # Output: - Return a list of tuples representing the selected meals. Each tuple should contain the name of the meal and its calorie count. # Example Input: ```python meals = [(\\"Chicken Salad\\", 400), (\\"Steak\\", 700), (\\"Pasta\\", 600), (\\"Burger\\", 900), (\\"Tacos\\", 300)] n = 3 C = 1500 ``` # Example Output: ```python [(\\"Chicken Salad\\", 400), (\\"Steak\\", 700), (\\"Tacos\\", 300)] ``` # Note: In the given example, the sum of calories for the chosen meals is 1400, which is the closest to the target value of 1500 compared to other combinations of 3 meals. Another valid output could be `[(\\"Chicken Salad\\", 400), (\\"Pasta\\", 600), (\\"Burger\\", 900)]` as its sum is 1900 which is the closest to 1500 after 1400.","solution":"from itertools import combinations from typing import List, Tuple def closest_meal_plan(meals: List[Tuple[str, int]], n: int, C: int) -> List[Tuple[str, int]]: Returns the best possible meal plan that is closest to the target calorie count. Parameters: - meals: List of available meals, each represented as a tuple (meal_name, calorie_count). - n: The number of meals to be included in the meal plan. - C: The target calorie count. Returns: - List of n tuples representing the selected meals. best_plan = None closest_diff = float(\'inf\') for comb in combinations(meals, n): total_calories = sum(meal[1] for meal in comb) diff = abs(total_calories - C) if diff < closest_diff: closest_diff = diff best_plan = comb return list(best_plan)"},{"question":"Given a sequence of weights for different items and sets which contain references to these indices, your task is to find the total minimum weight sum for each set by excluding the minimum weighted item in each set. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1 000) — the number of weights. The second line contains n positive integers representing the weights of the items. Each weight w_i (1 ≤ w_i ≤ 1 000). The third line contains a single integer m (1 ≤ m ≤ 1 000) — the number of sets. Each of the following m lines contains a set described by a single integer k (1 ≤ k ≤ n) followed by k indices (1-based). The indices refer to the positions of the weights in the weights list. -----Output----- Output m lines, each containing the total minimum weight sum for the respective set after excluding the minimum weighted item in that set. -----Examples----- Input 6 4 2 3 5 6 1 3 3 1 2 3 2 4 5 4 1 3 5 6 Output 7 11 12 Note In the first example: - The first set contains indices [1, 2, 3] with weights [4, 2, 3]. The minimum weight is 2, excluding it we have 4 + 3 = 7. - The second set contains indices [4, 5] with weights [5, 6]. The minimum weight is 5, excluding it we have 6. - The third set contains indices [1, 3, 5, 6] with weights [4, 3, 6, 1]. The minimum weight is 1, excluding it we have 4 + 3 + 6 = 13.","solution":"def min_weight_sum(n, weights, m, sets): result = [] for s in sets: k = s[0] indices = s[1:] # Extract corresponding weights set_weights = [weights[i-1] for i in indices] # Find the minimum weight min_weight = min(set_weights) # Sum weights excluding the minimum total_sum = sum(set_weights) - min_weight result.append(total_sum) return result"},{"question":"Given two strings S and T, determine whether T can be obtained by rotating S. A string S can be rotated by moving the first character of S to the end of S any number of times. For example, rotating \\"abcde\\" once yields \\"bcdea\\", and rotating it twice yields \\"cdeab\\". -----Constraints----- - S and T consist of lowercase English letters. - The lengths of S and T are between 1 and 100 inclusive. - S and T are of the same length. -----Input----- Input is given from Standard Input in the following format: S T -----Output----- Print \\"Yes\\" if T can be obtained by rotating S, otherwise print \\"No\\". -----Sample Input----- hello lohel -----Sample Output----- Yes","solution":"def can_obtain_by_rotating(S, T): Returns \\"Yes\\" if T can be obtained by rotating S, otherwise returns \\"No\\". if len(S) != len(T): return \\"No\\" doubled_S = S + S if T in doubled_S: return \\"Yes\\" else: return \\"No\\""},{"question":"A biology research group is studying the interaction between different species in an ecosystem. To model the interactions, they use a mathematical representation involving directed graphs. The ecosystem consists of n species and m interactions, where an interaction from species u to species v signifies that species u affects species v. The interaction between species can have positive or negative effects, represented as weights on the directed edges of the graph. A positive weight means the interaction is beneficial, while a negative weight means it is harmful. The researchers are particularly interested in identifying whether there are any cycles with a positive net effect in the graph, as these cycles might represent unsustainable growth or other significant ecosystem phenomena. Given a graph with n species and m directed interactions, determine if there exists a cycle with a positive total weight. # Input The first line contains two integers n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10,000) - the number of species and the number of interactions, respectively. Each of the next m lines contains three integers u, v, w (-1000 ≤ w ≤ 1000), representing a directed edge from species u to species v with weight w. Species are numbered from 1 to n. # Output Output \\"YES\\" if there exists a cycle with a positive total weight in the graph. Otherwise, output \\"NO\\". # Example Input ``` 4 5 1 2 3 2 3 -2 3 4 4 4 2 1 4 1 -5 ``` Output ``` YES ``` Input ``` 3 3 1 2 2 2 3 -3 3 1 1 ``` Output ``` NO ``` # Explanation In the first example, the cycle 2 -> 3 -> 4 -> 2 has a total weight of -2 + 4 + 1 = 3, which is positive. Therefore, the output is \\"YES\\". In the second example, the only cycle 1 -> 2 -> 3 -> 1 has a total weight of 2 - 3 + 1 = 0, which is not positive. Therefore, the output is \\"NO\\". The task is to determine if such a positive cycle exists in the given directed weighted graph.","solution":"from collections import defaultdict, deque def has_positive_cycle(n, m, edges): Determines if there\'s a positive net weight cycle in a graph. Parameters: n (int): The number of species (nodes). m (int): The number of interactions (edges). edges (list of tuples): Each tuple contains three integers u, v, w, representing a directed edge from node u to node v with weight w. Returns: str: \\"YES\\" if there exists a positive weight cycle, otherwise \\"NO\\". adj_list = defaultdict(list) for u, v, w in edges: adj_list[u].append((v, w)) def spfa(start): distance = [float(\'-inf\')] * (n + 1) in_queue = [False] * (n + 1) count = [0] * (n + 1) queue = deque([start]) distance[start] = 0 in_queue[start] = True while queue: node = queue.popleft() in_queue[node] = False for neighbor, weight in adj_list[node]: if distance[neighbor] < distance[node] + weight: distance[neighbor] = distance[node] + weight if not in_queue[neighbor]: queue.append(neighbor) in_queue[neighbor] = True count[neighbor] += 1 if count[neighbor] > n: return True return False for i in range(1, n + 1): if spfa(i): return \\"YES\\" return \\"NO\\" # Example usage: # n, m = 4, 5 # edges = [(1, 2, 3), (2, 3, -2), (3, 4, 4), (4, 2, 1), (4, 1, -5)] # print(has_positive_cycle(n, m, edges)) # Output: \\"YES\\""},{"question":"Polycarp is planning a marathon event where participants need to run through several checkpoints. Each checkpoint has a difficulty value associated with it. The difficulty of the marathon is defined by the maximum difference in difficulty values between any two checkpoints. Given a list of checkpoints with their respective difficulty values, Polycarp wants to determine the minimum and maximum difficulty values encountered in the marathon, and hence compute the maximum difficulty of the marathon. Help Polycarp by writing a program that, given an array of difficulty values of checkpoints, computes the maximum difficulty of the marathon. -----Input----- The first line of the input contains an integer t (1 le t le 10^4) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (2 le n le 10^5) — the number of checkpoints. The second line contains n integers d_1, d_2, dots, d_n (-10^9 le d_i le 10^9) — the difficulty values of the checkpoints. The sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the maximum difficulty of the marathon, which is defined as the maximum difference between any two checkpoints\' difficulty values. -----Examples----- Input 3 5 4 2 7 6 1 3 -5 -8 0 4 3 3 3 3 Output 6 8 0 -----Explanation----- In the first test case, the difficulty values are [4, 2, 7, 6, 1]. The minimum value is 1 and the maximum value is 7, so the maximum difficulty is 7 - 1 = 6. In the second test case, the difficulty values are [-5, -8, 0]. The minimum value is -8 and the maximum value is 0, so the maximum difficulty is 0 - (-8) = 8. In the third test case, all checkpoints have the same difficulty value of 3, so the maximum difficulty is 0.","solution":"def max_difficulty_marathon(test_cases): results = [] for case in test_cases: n, difficulties = case min_difficulty = min(difficulties) max_difficulty = max(difficulties) max_diff = max_difficulty - min_difficulty results.append(max_diff) return results"},{"question":"Write a function that takes a list of integers and returns the longest contiguous subarray that sums to a given target value. If there is no such subarray, the function should return an empty list. ```python def longest_subarray_with_sum(nums, target): # Your code goes here # Example usage: print(longest_subarray_with_sum([1, -1, 5, -2, 3], 3)) # should return [1, -1, 5, -2] print(longest_subarray_with_sum([-2, -1, 2, 1], 1)) # should return [-1, 2] print(longest_subarray_with_sum([1, 2, 3, 4, 5], 15)) # should return [1, 2, 3, 4, 5] print(longest_subarray_with_sum([1, 2, 3, 4, 5], 50)) # should return [] ``` __Constraints:__ - You may assume that the input list contains only integers. - The input list length will not exceed 10^4 elements. - The elements in the input list can be both positive and negative.","solution":"def longest_subarray_with_sum(nums, target): Returns the longest contiguous subarray that sums to the given target value. If there is no such subarray, the function returns an empty list. # Dictionary to store the first occurrence of each cumulative sum cum_sum_index = {} cum_sum = 0 max_len = 0 start_index = -1 for i in range(len(nums)): cum_sum += nums[i] if cum_sum == target: max_len = i + 1 start_index = 0 if (cum_sum - target) in cum_sum_index: if i - cum_sum_index[cum_sum - target] > max_len: max_len = i - cum_sum_index[cum_sum - target] start_index = cum_sum_index[cum_sum - target] + 1 if cum_sum not in cum_sum_index: cum_sum_index[cum_sum] = i if start_index == -1: return [] else: return nums[start_index:start_index + max_len]"},{"question":"Given an array of integers, determine whether a subset of the array exists whose sum is prime. If such a subset exists, return the smallest prime number that can be obtained, otherwise return -1. Input Format The first line of the input contains an integer {n}, which is the number of elements in the array. The second line contains {n} space-separated integers representing the elements of the array. Constraints 1 leq n leq 1000 -10^6 leq a_i leq 10^6 Output Format Output a single integer: the smallest prime number that can be obtained from the sum of any subset of the given array, or -1 if no such subset exists. Sample Input 5 3 5 7 -2 8 Sample Output 3 Explanation From the input array, the subsets and their respective sums that are prime are: - {3} -> sum = 3 (Prime) - {5} -> sum = 5 (Prime) - {3, 5} -> sum = 8 (Not Prime) - {7} -> sum = 7 (Prime) - {3, 5, 7} -> sum = 15 (Not Prime) - {3, 7} -> sum = 10 (Not Prime) - {3, -2} -> sum = 1 (Not Prime) ... and so on. The smallest prime sum among these is 3. Hence, the output is 3.","solution":"import itertools def is_prime(n): Check if a number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def smallest_prime_subset_sum(n, array): Determine the smallest prime sum from any subset of the array. primes = set() for size in range(1, len(array)+1): for subset in itertools.combinations(array, size): subset_sum = sum(subset) if is_prime(subset_sum): primes.add(subset_sum) return min(primes) if primes else -1"},{"question":"Consider a city represented by a rectangular grid with n rows and m columns. Each cell in the grid is either an empty cell (denoted by \'.\') or a cell that contains a tree (denoted by \'#\'). Your task is to determine the size of the largest square that can be formed by empty cells in the given grid. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000). - The next n lines each contain m characters, where each character is either \'.\' or \'#\'. Output: - Print a single integer, the size of the side of the largest square that consists only of empty cells. Examples: Input: 4 5 ..... .#... ..... ... Output: 3 Input: 5 5 # # # # # Output: 0 Input: 3 7 ....... .#..#.. .#..... Output: 2","solution":"def largest_empty_square(n, m, grid): Determines the size of the largest square formed by empty cells in the grid. Parameters: - n (int): Number of rows. - m (int): Number of columns. - grid (list of str): Grid of characters representing the city. Returns: int: Size of the side of the largest square. if n == 0 or m == 0: return 0 # dp array to store the size of the largest square that can end at (i,j) dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 # edges can only form squares of size 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"Given a list of integer numbers, find the longest subarray whose sum is equal to a given target value. Input The first line contains two integers n and target, where n is the number of elements in the list, and target is the desired sum. The second line contains n integers which represent the elements of the list. Output Output the length of the longest subarray that sums up to the target value. If no such subarray exists, output 0. Example Input: 8 7 1 2 3 4 5 6 7 8 Output: 2","solution":"def longest_subarray_with_sum(nums, target): Returns the length of the longest subarray whose sum is equal to the given target. prefix_sum = 0 max_length = 0 prefix_sum_indices = {0: -1} for i, num in enumerate(nums): prefix_sum += num if prefix_sum - target in prefix_sum_indices: max_length = max(max_length, i - prefix_sum_indices[prefix_sum - target]) if prefix_sum not in prefix_sum_indices: prefix_sum_indices[prefix_sum] = i return max_length"},{"question":"Implement a function that finds the shortest path in a weighted graph, using Dijkstra\'s algorithm. Your function will receive a graph represented as an adjacency list, where keys are node names and values are lists of tuples representing edges and their associated weights. The function should also take a source node and a target node as input and return the list of nodes that comprise the shortest path from the source node to the target node. If there is no path from the source to the target, the function should return an empty list. For example, given the graph: ```python { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'C\', 2), (\'D\', 5)], \'C\': [(\'D\', 1)], \'D\': [] } ``` your function should return the shortest path from \'A\' to \'D\' as `[\'A\', \'B\', \'C\', \'D\']`. The function prototype in Python should be: ```python def dijkstra(graph: dict, source: str, target: str) -> list: pass ``` Ensure your solution is efficient and handles edge cases, such as disconnected graphs or graphs with cycles.","solution":"import heapq def dijkstra(graph, source, target): # Create a priority queue to keep track of the minimum weight and the path taken queue = [(0, source, [])] visited = set() while queue: (cost, current_node, path) = heapq.heappop(queue) # Check if the current node is the target node if current_node in visited: continue path = path + [current_node] if current_node == target: return path visited.add(current_node) # Visit all neighbouring nodes for (next_node, weight) in graph.get(current_node, []): if next_node not in visited: heapq.heappush(queue, (cost + weight, next_node, path)) return [] # Example usage: # graph = { # \'A\': [(\'B\', 1), (\'C\', 4)], # \'B\': [(\'C\', 2), (\'D\', 5)], # \'C\': [(\'D\', 1)], # \'D\': [] # } # print(dijkstra(graph, \'A\', \'D\'))"},{"question":"In a laboratory, scientists have been working on creating a genetically modified species of plants. They have created a new type of plant which has distinct characteristics that make it suitable for different types of environments. Each type of environment has a characteristic value that plants specifically adapted for that environment must satisfy. The issue arises with how to distribute these plants over various environments with given criteria. Each plant needs a certain minimum amount of nutrients to grow and it must be placed in an environment where the nutrient level is at least this minimum amount. Given the nutrients required by each plant and the nutrients available in each environment, determine whether it is possible to place all the plants in appropriate environments such that each plant’s nutrient requirements are satisfied. -----Input----- The first line of input contains two integers p (1 leq p leq 1000), the number of plants, and e (1 leq e leq 1000), the number of environments. The second line of input contains p integers, where the i-th integer is the nutrient requirement of the i-th plant. The third line of input contains e integers, where the j-th integer is the nutrient level available in the j-th environment. -----Output----- Output `YES` if it is possible to place all plants in suitable environments. Otherwise, output `NO`. -----Example----- Sample Input: 4 4 10 20 30 40 40 30 20 10 Sample Output: YES Sample Input: 3 2 15 25 30 20 10 Sample Output: NO","solution":"def can_place_all_plants(p, e, plant_nutrients, environment_nutrients): Determines if it is possible to place all plants in suitable environments. Args: p : int : number of plants e : int : number of environments plant_nutrients : list of int : list of nutrient requirements for each plant environment_nutrients : list of int : list of nutrient levels available in each environment Returns: str : \\"YES\\" if all plants can be placed in suitable environments, otherwise \\"NO\\" plant_nutrients.sort() environment_nutrients.sort() i, j = 0, 0 while i < p and j < e: if plant_nutrients[i] <= environment_nutrients[j]: i += 1 j += 1 return \\"YES\\" if i == p else \\"NO\\""},{"question":"A robot is cleaning a rectangular grid floor. The floor is represented as an n times m grid of squares, and the robot starts at the top-left corner, moving to the bottom-right corner. Each square of the grid has a cleaning time associated with it. The robot can move either down or right at any point in time. Given the grid dimensions n and m, and the cleaning times for all squares in the grid, determine the minimum total cleaning time required for the robot to move from the top-left to the bottom-right corner of the grid. -----Input----- The first line contains two integers n and m (1 leq n, m leq 1000) - the dimensions of the grid. The next n lines each contain m integers c_{ij} (1 leq c_{ij} leq 1000) - the cleaning times of each square in the grid. -----Output----- Output a single integer - the minimum total cleaning time required for the robot to move from the top-left to the bottom-right corner of the grid. -----Examples----- Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 2 Output 4 -----Note----- For the first example, the robot can move along the path 1 → 3 → 1 → 1 → 1, with a total cleaning time of 7. For the second example, the robot can move along 1 → 2 → 1, with a total cleaning time of 4.","solution":"def minimum_cleaning_time(n, m, grid): # Initialize dp array with the same dimensions as grid dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will have the result return dp[n-1][m-1]"},{"question":"Our web application processes user inquiries based on specific keywords found in the query. Your task is to write a function to categorize queries into three categories: \\"Order Inquiry\\", \\"Product Inquiry\\", and \\"General Inquiry\\". - If the query contains any words from the set {\\"order\\", \\"shipment\\", \\"delivery\\", \\"track\\", \\"purchase\\"}, it should be categorized as an \\"Order Inquiry\\". - If the query contains any words from the set {\\"price\\", \\"availability\\", \\"features\\", \\"specification\\", \\"details\\"}, it should be categorized as a \\"Product Inquiry\\". - If the query does not contain any words from the above two sets, it should be categorized as a \\"General Inquiry\\". The categorization should be case-insensitive, i.e., \\"Order\\", \\"order\\", \\"ORDER\\" should all be treated the same. Input The input consists of a single string, representing the query, and the length of the query is between 1 and 1000 characters. Output Output a single string: \\"Order Inquiry\\", \\"Product Inquiry\\", or \\"General Inquiry\\". Examples Input \\"What is the price of this item?\\" Output Product Inquiry Input \\"I want to track my shipment.\\" Output Order Inquiry Input \\"Can you tell me about your return policy?\\" Output General Inquiry Note In the first sample test, the query contains the word \\"price\\", which is a keyword for a product inquiry. In the second sample test, the query contains the word \\"track\\", which relates to an order inquiry. In the third sample test, the query contains no keywords from either category, so it is classified as a general inquiry.","solution":"def categorize_query(query): Categorizes the query into \\"Order Inquiry\\", \\"Product Inquiry\\", or \\"General Inquiry\\". order_keywords = {\\"order\\", \\"shipment\\", \\"delivery\\", \\"track\\", \\"purchase\\"} product_keywords = {\\"price\\", \\"availability\\", \\"features\\", \\"specification\\", \\"details\\"} query_lower = query.lower() for word in order_keywords: if word in query_lower: return \\"Order Inquiry\\" for word in product_keywords: if word in query_lower: return \\"Product Inquiry\\" return \\"General Inquiry\\""},{"question":"Given an array of integers, you need to perform a sequence of operations on the array. There are two types of operations: * update(lf, rg, v) — this operation sets every element on the segment [lf, rg] (inclusively) to v; * prefixsum(lf, rg) — this operation returns the sum of elements on the segment [lf, rg] (inclusively). Write a program to process the given series of operations. # Input The first line contains an integer n (1 ≤ n ≤ 200000) denoting the length of the array. The second line contains the initial state of the array: a0, a1, ..., an-1 (-10^6 ≤ ai ≤ 10^6), where ai are integers. The third line contains an integer m (0 ≤ m ≤ 200000), denoting the number of operations. Each of the next m lines contains one operation. If the line contains three integers lf, rg, v (0 ≤ lf, rg ≤ n - 1; -10^6 ≤ v ≤ 10^6), it represents an update operation. If the line contains two integers lf, rg (0 ≤ lf, rg ≤ n - 1), it represents a prefixsum operation. # Output For each prefixsum operation, output the result on a new line. # Examples Input ``` 5 1 2 3 4 5 3 1 3 0 4 2 4 10 0 4 0 2 ``` Output ``` 9 15 30 13 ``` # Note In the given example: - Initial array: [1, 2, 3, 4, 5] - After the first prefixsum(1, 3): sum is 2 + 3 + 4 = 9 - After the second prefixsum(0, 4): sum is 1 + 2 + 3 + 4 + 5 = 15 - After the update(2, 4, 10), the array becomes [1, 2, 10, 10, 10] - After the third prefixsum(0, 4): sum is 1 + 2 + 10 + 10 + 10 = 33 - After the fourth prefixsum(0, 2): sum is 1 + 2 + 10 = 13","solution":"def perform_operations(n, array, operations): results = [] for operation in operations: if len(operation) == 2: # prefixsum operation lf, rg = operation results.append(sum(array[lf:rg+1])) elif len(operation) == 3: # update operation lf, rg, v = operation for i in range(lf, rg+1): array[i] = v return results"},{"question":"A tree is an undirected graph in which any two vertices are connected by exactly one path. The diameter of a tree is the length of the longest path between any two distinct vertices. Given a tree with N nodes numbered from 1 to N, your task is to determine its diameter. -----Input----- The first line contains an integer N (2 le N le 10000) – the number of nodes in the tree. Each of the following N-1 lines contains two different integers A and B (1 le A, B le N) indicating that there is an edge connecting nodes A and B. -----Output----- Output the diameter of the tree on a single line. -----Examples----- Sample Input 1: 5 1 2 2 3 3 4 4 5 Sample Output 1: 4 Sample Input 2: 6 1 3 3 4 4 5 2 4 4 6 Sample Output 2: 3 Note: In the first sample, the longest path goes through nodes 1-2-3-4-5 with length 4. In the second sample, the longest path goes through nodes 2-4-5 or 1-3-4-6 with length 3.","solution":"from collections import deque def tree_diameter(N, edges): if N == 1: return 0 # Convert edges into an adjacency list adj_list = [[] for _ in range(N + 1)] for A, B in edges: adj_list[A].append(B) adj_list[B].append(A) # Helper function to perform BFS and find the farthest node and its distance def bfs(start_node): visited = [False] * (N + 1) queue = deque([(start_node, 0)]) # (current_node, current_distance) visited[start_node] = True farthest_node, max_distance = start_node, 0 while queue: current_node, current_distance = queue.popleft() for neighbor in adj_list[current_node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, current_distance + 1)) if current_distance + 1 > max_distance: max_distance = current_distance + 1 farthest_node = neighbor return farthest_node, max_distance # Step 1: Find the farthest node from any node (let\'s start with node 1) farthest_node, _ = bfs(1) # Step 2: Find the farthest node from the above found farthest node # The distance returned will be the diameter of the tree _, diameter = bfs(farthest_node) return diameter"},{"question":"Problem : You are given an array A comprising of N non-negative integers A[1], A[2]...A[N]. You need to perform a series of operations that include updating the array and calculating the sum of elements within a given range. The two types of queries you will receive are: 1. Update operation: 1 x y - Update the value at index x to y. 2. Sum operation: 2 l r - Calculate the sum of the elements from index l to r (inclusive). You must handle these operations efficiently to maintain performance as the number of queries Q can be very large. Input: - The first line contains two integers N and Q, the number of elements in the array and the number of queries, respectively. - The next line contains N space-separated non-negative integers representing the elements of array A. - The following Q lines contain queries, each of either type 1 or type 2 as described above. Output: For each query of type 2, output the result of the sum operation on a new line. Constraints: - 1 ≤ N, Q ≤ 10^5 - 0 ≤ A[i] ≤ 10^9 - 1 ≤ x, l, r ≤ N - 0 ≤ y ≤ 10^9 SAMPLE INPUT 5 4 1 2 3 4 5 2 1 3 1 2 10 2 2 4 2 1 5 SAMPLE OUTPUT 6 17 23","solution":"def update_value(array, index, value): Updates the value at the given index of the array. array[index - 1] = value def range_sum(array, left, right): Returns the sum of elements in the array from index left to right, inclusive. return sum(array[left - 1:right]) def process_queries(N, Q, array, queries): Processes the update and sum queries on the array. results = [] for query in queries: if query[0] == 1: update_value(array, query[1], query[2]) elif query[0] == 2: results.append(range_sum(array, query[1], query[2])) return results"},{"question":"You are given a list of strings representing students and their respective scores in a series of exams. Your task is to calculate the average score for each student and return a list of strings in which each string contains a student\'s name followed by their average score (rounded to the nearest integer). The list should be sorted by students\' names in ascending order. ```python For example: calculate_averages([\\"Alice:85,90,78\\", \\"Bob:90,88,92\\", \\"Charlie:70,75,80\\"]) = [\\"Alice:84\\", \\"Bob:90\\", \\"Charlie:75\\"] Another example: calculate_averages([\\"Dave:66,74,85\\", \\"Eve:80,90,100\\", \\"Frank:50,60,70\\"]) = [\\"Dave:75\\", \\"Eve:90\\", \\"Frank:60\\"] ``` In the first example, Alice\'s average score is (85+90+78)/3 = 84.33, which rounds to 84. Bob\'s average is (90+88+92)/3 = 90. Charlie\'s average is (70+75+80)/3 = 75. In the second example, Dave\'s average score is (66+74+85)/3 = 75. Eve\'s average is (80+90+100)/3 = 90. Frank\'s average is (50+60+70)/3 = 60. Good luck!","solution":"def calculate_averages(student_scores): Calculates the average score for each student and returns a list of strings in the format \\"Name:Average\\", sorted by student names in ascending order. student_scores: List of strings in the format \\"Name:Score1,Score2,Score3,...\\". Returns: List of strings in the format \\"Name:Average\\". results = [] for entry in student_scores: name, scores_str = entry.split(\':\') scores = list(map(int, scores_str.split(\',\'))) average_score = round(sum(scores) / len(scores)) results.append(f\\"{name}:{average_score}\\") results.sort() return results"},{"question":"You are given a linked list where each node contains an integer value. Your task is to reorder the list so that all the nodes with even values come before all the nodes with odd values, while preserving the relative order of the even and odd nodes. Write a function that takes in the head of the linked list and returns the head of the reordered list. To assist in understanding, here is an example: -----Input----- A linked list represented as: 2 -> 1 -> 3 -> 5 -> 6 -> 4 -> 7 -> 8 -----Output----- The reordered linked list should be: 2 -> 6 -> 4 -> 8 -> 1 -> 3 -> 5 -> 7 -----Function Signature----- ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reorderList(head: ListNode) -> ListNode: # your code here ``` -----Constraints----- - The number of nodes in the linked list is in the range `[0, 10^4]`. - `-10^6 <= Node.val <= 10^6`","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reorderList(head: ListNode) -> ListNode: if not head: return None even_dummy = ListNode(0) odd_dummy = ListNode(0) even = even_dummy odd = odd_dummy current = head while current: if current.val % 2 == 0: even.next = current even = even.next else: odd.next = current odd = odd.next current = current.next even.next = odd_dummy.next odd.next = None return even_dummy.next"},{"question":"You are given an integer n and an array A of length n. You need to perform exactly k operations on this array, where 1 le k le 10^5. In each operation, you can select any two elements of the array and replace both of them with their maximum value (i.e. if you select A[i] and A[j], then after the operation both A[i] and A[j] will become max(A[i], A[j])). Your task is to determine the maximum possible value of the minimum element in the array A after performing exactly k operations. -----Input----- The first line of the input contains two integers n (2 le n le 10^5) and k (1 le k le 10^5). The second line contains n integers A_1, A_2, ..., A_n (1 le A_i le 10^9), representing the elements of the array A. -----Output----- Print a single integer — the maximum possible value of the minimum element in the array after k operations. -----Examples----- Input 4 2 1 5 3 2 Output 5 Input 3 3 10 20 30 Output 30 -----Note----- In the first example, we can achieve the result by performing the following operations: - In the first operation, select (A[1], A[2]) = (1, 5) and replace both with 5. The array becomes [5, 5, 3, 2]. - In the second operation, select (A[3], A[4]) = (3, 2) and replace both with 3. The array becomes [5, 5, 3, 3]. Thus, the minimum value in the array is 3. However, we can achieve higher: - In the first operation, select (A[1], A[3]) = (1, 3) and replace both with 3. The array becomes [3, 5, 3, 2]. - In the second operation, select (A[1], A[4]) = (3, 2) and replace both with 3. The array becomes [3, 5, 3, 3]. Thus, the minimum value in the array is 3. This sequence of operations is one way to get the maximum possible value of the minimum element in the array after 2 operations, which is 5.","solution":"def max_min_element_after_operations(n, k, A): Returns the maximum possible value of the minimum element in the array after exactly k operations. Parameters: n (int): The number of elements in the array. k (int): The number of operations to be performed. A (list): The array of integers. Returns: int: The maximum possible value of the minimum element after k operations. # The maximum possible value of the minimum element will be the largest element # in the array after performing the replacement operations. return max(A)"},{"question":"Given a list of non-negative integers representing the heights of bars where each bar\'s width is 1, compute how much water it can trap after raining. Example: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above are the terrains represented by the list. Rain water that trapped is indicated by the blue section in the diagram. Input: height = [4,2,0,3,2,5] Output: 9 Your Task: You don\'t need to read or print anything. Your task is to complete the function trap() which takes list height as input parameter and returns the total amount of water that can be trapped. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 ≤ len(height) ≤ 10^5 0 ≤ height[i] ≤ 10^4","solution":"def trap(height): Given a list of non-negative integers representing the heights of bars where each bar\'s width is 1, compute how much water it can trap after raining. if not height: return 0 n = len(height) left, right = 0, n - 1 left_max, right_max = height[left], height[right] trapped_water = 0 while left < right: if height[left] < height[right]: left += 1 left_max = max(left_max, height[left]) trapped_water += left_max - height[left] else: right -= 1 right_max = max(right_max, height[right]) trapped_water += right_max - height[right] return trapped_water"},{"question":"You are given an array of integers where each integer represents the number of pages in a book. You have `k` students and you need to divide the books among the students such that each student gets at least one book and the maximum number of pages assigned to a student is minimized. Determine the minimum possible value for the maximum number of pages assigned to any student. Your task is to write a program that, given the number of books, the array of pages, and the number of students, finds the minimum possible value for the maximum number of pages assigned to any student. ----- Input ----- The first line contains two integers `n` and `k` (1 ≤ n, k ≤ 10^5)—the number of books and the number of students, respectively. The second line contains `n` integers p1, p2, ..., pn (1 ≤ pi ≤ 10^4) — the number of pages in each book. The integers are separated by exactly one space. ----- Output ----- Print a single integer — the minimum possible value for the maximum number of pages assigned to any student. ----- Examples ----- Input 4 2 12 34 67 90 Output 113 Input 5 3 10 20 30 40 50 Output 60 Input 3 2 15 17 20 Output 32 ----- Note ----- In the first sample, one of the ways to distribute the books such that the maximum number of pages assigned to any student is minimized is: {12, 34, 67} and {90}. The maximum number of pages assigned is 91. Another way is: {12, 34}, {67, 90}. The maximum number of pages assigned is 91. Both lead to the minimum maximum pages of 113. In the second sample, one of the ways to distribute the books among three students is: {10, 20, 30}, {40}, {50}. The maximum number of pages assigned is 60. This is the minimum maximum pages possible.","solution":"def min_pages_to_students(n, k, pages): def is_valid_allocation(pages, n, k, max_pages): student_count = 1 current_sum = 0 for page in pages: if current_sum + page > max_pages: student_count += 1 current_sum = page if student_count > k: return False else: current_sum += page return True if n < k: return -1 # More students than books is not possible to allocate start, end = max(pages), sum(pages) result = end while start <= end: mid = (start + end) // 2 if is_valid_allocation(pages, n, k, mid): result = mid end = mid - 1 else: start = mid + 1 return result"},{"question":"Kalyan loves playing with numbers. Recently, he came across a problem where he needs to find out whether a given number is a \\"Stepping Number\\". A number is considered a Stepping Number if the difference between consecutive digits is 1. For example, 123 and 121 are Stepping Numbers, but 122 is not. Your task is to help Kalyan write a program that checks if the provided number is a Stepping Number. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case consists of a single integer X which represents the number to be checked. -----Output:----- For each test case, output \\"YES\\" if the number is a Stepping Number, otherwise output \\"NO\\". -----Constraints----- - 1 leq T leq 100 - 0 leq X leq 10^9 -----Sample Input:----- 3 123 121 122 -----Sample Output:----- YES YES NO","solution":"def is_stepping_number(n): Returns \'YES\' if n is a Stepping Number, otherwise \'NO\'. n_str = str(n) for i in range(len(n_str) - 1): if abs(int(n_str[i]) - int(n_str[i + 1])) != 1: return \\"NO\\" return \\"YES\\" def check_stepping_numbers(test_cases): Given a list of test cases, returns a list of results for each case. results = [] for case in test_cases: result = is_stepping_number(case) results.append(result) return results # Example usage: # T = 3 # test_cases = [123, 121, 122] # print(check_stepping_numbers(test_cases)) # Output: [\'YES\', \'YES\', \'NO\']"},{"question":"Anna has an array of n integers a_1, a_2, dots, a_n. She wants to make the array \\"beautiful\\" by selecting exactly one pair of indices (i, j) such that the value of a_i swaps with the value of a_j (1 le i, j le n). An array is considered \\"beautiful\\" if for every k (1 le k < n), the condition a_k < a_{k+1} holds. Determine if it is possible to make the array \\"beautiful\\" by performing exactly one swap. -----Input----- The first line of input contains a single integer t (1 le t le 1000) – the number of test cases. The descriptions of the test cases follow. The first line of each test case contains a single integer n (2 le n le 1000) – the number of elements in the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) – the elements of the array. -----Output----- For each test case, print \\"YES\\" (without quotes) if it is possible to make the array \\"beautiful\\" by performing exactly one swap. Otherwise, print \\"NO\\". -----Examples----- Input 3 4 2 3 4 5 4 5 4 3 2 4 2 4 3 5 Output YES NO YES -----Note----- In the first example, the array is already sorted in strictly increasing order, so no swaps are needed, and hence \\"YES\\". In the second example, the array is in strictly decreasing order, so a single swap cannot make it strictly increasing, and hence \\"NO\\". In the third example, swapping elements at indices 2 and 3 results in the array 2, 3, 4, 5, making it strictly increasing, and hence \\"YES\\".","solution":"def can_be_beautiful(t, test_cases): results = [] for case in test_cases: n, a = case sorted_a = sorted(a) if a == sorted_a: results.append(\\"YES\\") continue # We need to check if one swap can make the array sorted found = False for i in range(n): for j in range(i + 1, n): a[i], a[j] = a[j], a[i] if a == sorted_a: found = True a[i], a[j] = a[j], a[i] if found: break if found: break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage # t = 3 # test_cases = [ # (4, [2, 3, 4, 5]), # (4, [5, 4, 3, 2]), # (4, [2, 4, 3, 5]) # ] # print(can_be_beautiful(t, test_cases))"},{"question":"Python is known for its simple syntax and dynamic typing capabilities. However, large-scale applications often need constant refactoring and abstraction. Write a function that flattens a dictionary of arbitrary nested depth and complexity. Ensure that the function respects the flattened nested keys and adds a separator to distinguish between levels. Function signature: `def flatten_dict(d: dict, separator: str = \\".\\") -> dict:` # Input - A dictionary `d` with potentially nested dictionaries. - `separator` (optional): A string representing the separator to use for concatenating keys. Default is \\".\\" # Output - A flat dictionary where nested keys are concatenated using the provided separator. # Example ```python input_dict = { \\"a\\": { \\"b\\": { \\"c\\": 12 }, \\"d\\": 15 }, \\"e\\": 42 } output_dict = flatten_dict(input_dict) print(output_dict) # Expected Output: # { # \\"a.b.c\\": 12, # \\"a.d\\": 15, # \\"e\\": 42 # } ``` In this task, it is assumed that the input dictionary will not contain any other nested data types (like lists or sets), only dictionaries. The keys of the input dictionary are also assumed to be strings. Your task is to respect all the nested key names and concatenate them using the specified separator.","solution":"def flatten_dict(d: dict, separator: str = \\".\\") -> dict: Flattens a dictionary of arbitrary nested depth by concatenating nested keys using the provided separator. Parameters: d (dict): The dictionary to flatten. separator (str): The separator to use for concatenating keys. Default is \\".\\". Returns: dict: The flattened dictionary. def _flatten(current, prefix=\\"\\", flattened=None): if flattened is None: flattened = {} for k, v in current.items(): if isinstance(v, dict): _flatten(v, prefix + k + separator, flattened) else: flattened[prefix + k] = v return flattened return _flatten(d)"},{"question":"Monocarp is training a neural network and needs to distribute a certain number of training samples across different batches. Each batch can hold a maximum of k samples, and Monocarp wants to ensure that the number of samples in each batch is as evenly distributed as possible. You need to determine how many batches will be completely filled to their maximum capacity and how many batches will contain fewer than k samples. -----Input----- The first line contains a single integer t (1 le t le 200) — the number of test cases. Each of the following t lines contains two integers s (1 le s le 10^3) and k (1 le k le 10^3) — the total number of samples and the maximum batch size, respectively. -----Output----- For each test case, print two integers — the number of completely filled batches and the number of batches containing fewer than k samples. -----Examples----- Input 3 10 3 15 5 20 7 Output 3 1 3 0 2 6 -----Note----- In the first example, Monocarp can distribute the samples into 3 completely filled batches of 3 samples each, and 1 batch with 1 sample. In the second example, all 15 samples fit perfectly into 3 batches of 5 samples each. In the third example, Monocarp can distribute the samples into 2 completely filled batches of 7 samples each, and there will be 6 samples left to form 1 batch which is not completely filled.","solution":"def distribute_samples(t, cases): Determines the number of completely filled batches and the number of partially filled batches based on the given test cases. Parameters: t (int): Number of test cases cases (list of tuples): Each tuple contains the total number of samples (s) and the maximum batch size (k) Returns: list of tuples: Each tuple contains two integers - number of completely filled batches and number of partially filled batches results = [] for s, k in cases: full_batches = s // k remaining_samples = s % k partial_batches = 1 if remaining_samples > 0 else 0 results.append((full_batches, partial_batches)) return results"},{"question":"A certain programming language\'s dictionary class behaves as follows: it maps distinct keys to values, where keys are unique. You are to determine if two given dictionaries contain all the same keys and if each identical key maps to values that satisfy a given tolerance level. Two dictionaries A and B are considered approximately equal if for every key k present in both dictionaries, the absolute difference between A[k] and B[k] does not exceed a given value t. Write a function to determine whether the two dictionaries are approximately equal. Input The first input line contains an integer n (1 ≤ n ≤ 100000) — the number of key-value pairs in dictionary A. The following n lines each describe a key-value pair in dictionary A. Each line contains a string k and a floating-point number v. The next input line contains an integer m (1 ≤ m ≤ 100000) — the number of key-value pairs in dictionary B. The following m lines each describe a key-value pair in dictionary B. Each line contains a string k and a floating-point number v. The final input line contains a floating-point number t (0 ≤ t ≤ 1000) — the tolerance level for comparing the values. Output Print \\"YES\\" if the dictionaries are approximately equal, otherwise print \\"NO\\". Examples Input 3 apple 10.5 banana 20.3 cherry 5.2 3 apple 10.6 banana 20.2 cherry 5.0 0.3 Output YES Input 2 orange 15.0 grape 10.1 2 orange 15.5 grape 10.1 0.4 Output NO Note In the first sample, the differences between corresponding values are within the tolerance level of 0.3: - |10.5 - 10.6| = 0.1 - |20.3 - 20.2| = 0.1 - |5.2 - 5.0| = 0.2 Thus, the dictionaries are approximately equal. In the second sample, although \\"grape\\" values are the same, the absolute difference for \\"orange\\" |15.0 - 15.5| = 0.5 exceeds the tolerance level of 0.4. Thus, the dictionaries are not approximately equal.","solution":"def are_dictionaries_approximately_equal(A, B, t): Determine if two dictionaries A and B are approximately equal given a tolerance level t. if set(A.keys()) != set(B.keys()): return \\"NO\\" for key in A: if abs(A[key] - B[key]) > t: return \\"NO\\" return \\"YES\\""},{"question":"Given an array of integers, find the maximum product of any two distinct elements in the array. You should return the maximum product and the indices of the two elements that form this product. If there are multiple pairs producing the same maximum product, return the pair with the smallest indices. Note: 1. If the array has less than two elements, return -1 for both the maximum product and the indices. 2. Indices in the output should be in ascending order. Example 1: Input: arr = [3, 5, -2, 8, 11] Output: Max Product = 88 Indices = [3, 4] Explanation: The maximum product is formed by the elements 8 and 11, giving the product 88. Their indices are 3 and 4. Example 2: Input: arr = [1, 10, 2, 6, 5, 3] Output: Max Product = 60 Indices = [1, 3] Explanation: The maximum product is formed by the elements 10 and 6, giving the product 60. Their indices are 1 and 3. Example 3: Input: arr = [4] Output: Max Product = -1 Indices = [-1, -1] Explanation: There is only one element in the array, hence the output should be -1 for both the maximum product and the indices. Your Task: You don\'t need to read input or print anything. The task is to complete the function findMaxProduct(), which takes an array arr[] as input and returns a vector of size 3 where the first element is the maximum product and the second and third elements are the indices of the two elements that form this product. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 2 <= arr.length <= 10^5 -10^3 <= arr[i] <= 10^3","solution":"def findMaxProduct(arr): Returns the maximum product of any two distinct elements in the array and their indices. if len(arr) < 2: return -1, -1, -1 max1, max2 = float(\'-inf\'), float(\'-inf\') min1, min2 = float(\'inf\'), float(\'inf\') max1_idx, max2_idx, min1_idx, min2_idx = -1, -1, -1, -1 for i, num in enumerate(arr): if num > max1: max2, max2_idx = max1, max1_idx max1, max1_idx = num, i elif num > max2: max2, max2_idx = num, i if num < min1: min2, min2_idx = min1, min1_idx min1, min1_idx = num, i elif num < min2: min2, min2_idx = num, i max_prod = max1 * max2 min_prod = min1 * min2 if max_prod > min_prod: return max_prod, min(max1_idx, max2_idx), max(max1_idx, max2_idx) else: return min_prod, min(min1_idx, min2_idx), max(min1_idx, min2_idx)"},{"question":"You are given an array of positive integers. Your task is to find the smallest integer that is not present in the array and is greater than zero. Input The first line contains an integer n (1 ≤ n ≤ 2·105) — the number of elements in the array. The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. Output Output a single integer — the smallest positive integer that is not present in the array. Examples Input 3 1 2 3 Output 4 Input 5 1 3 6 4 1 2 Output 5 Note In the first example, all integers from 1 to 3 are present in the array, so the smallest integer greater than zero that is not present is 4. In the second example, the integers 1, 2, 3, 4, and 6 are present, but 5 is missing from the array, making it the smallest integer that is not present.","solution":"def smallest_missing_positive_integer(arr): Finds the smallest positive integer that is not present in the array. The approach is as follows: 1. Filter out non-positive integers and duplicates, and store positive integers in a set for O(1) lookups. 2. Iterate through the range starting from 1 upwards and find the first integer that is not in the set. :param arr: List of integers :return: Smallest missing positive integer nums = set(arr) smallest_missing = 1 while smallest_missing in nums: smallest_missing += 1 return smallest_missing"},{"question":"Given an array of integers, determine whether there exists a subset of the array such that the sum of its elements equals a given target value. Example arr = [3, 34, 4, 12, 5, 2] target = 9 In the example above, the subset [4, 5] sums up to 9, so the answer is true. Function Description Complete the function `subset_sum` in the editor below. `subset_sum` has the following parameters: - int arr[]: an array of integers - int target: the target sum Returns - boolean: `True` if there is a subset of `arr` that sums up to `target`, otherwise `False`. Input Format The first line contains an integer `n`, the number of test cases. Each of the next `n` test cases consists of two lines: - The first line contains two integers `m` (the size of the array) and `t` (the target sum). - The second line contains `m` space-separated integers representing the elements of the array. Constraints - 1 leq n leq 10 - 1 leq m leq 20 - -10^3 leq arr[i] leq 10^3 - -10^3 leq t leq 10^3 Sample Input 2 6 9 3 34 4 12 5 2 5 30 1 2 3 4 5 Sample Output True False Explanation Test Case #01: The subset [4, 5] sums up to 9, so the answer is True. Test Case #02: No subset of the array sums up to 30, so the answer is False.","solution":"def subset_sum(arr, target): Returns True if there is a subset of arr that sums up to target, False otherwise. n = len(arr) dp = [False] * (target + 1) dp[0] = True for num in arr: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target] def process_input(n, test_cases): results = [] for i in range(n): arr = test_cases[i][0] target = test_cases[i][1] result = subset_sum(arr, target) results.append(result) return results # Sample input parser def main(input_str): input_lines = input_str.strip().split(\\"n\\") n = int(input_lines[0]) test_cases = [] line_index = 1 for _ in range(n): _, target = map(int, input_lines[line_index].split()) array = list(map(int, input_lines[line_index + 1].split())) test_cases.append((array, target)) line_index += 2 return process_input(n, test_cases)"},{"question":"A city park has a beautiful rectangular garden with dimensions M x N. The garden is divided into a grid of M rows and N columns. Each cell in this grid can either have a plant or be empty. The gardeners want to plant more flowers in the empty cells, but they also want to ensure that each flower has enough space to grow. Specifically, no two flowers should be adjacent to each other (not even diagonally). Your task is to determine the maximum number of flowers that can be planted in the garden while meeting the above condition. Example 1: Input: M = 3, N = 3 garden = [ [\'.\', \'#\', \'.\'], [\'#\', \'.\', \'#\'], [\'.\', \'#\', \'.\'] ] Output: 4 Explanation: The garden grid looks like: . # . # . # . # . You can plant flowers in the cells (0,0), (0,2), (2,0), and (2,2). Hence, the maximum number of flowers is 4. Example 2: Input: M = 2, N = 2 garden = [ [\'.\', \'.\'], [\'.\', \'.\'] ] Output: 1 Explanation: The garden grid looks like: . . . . You can plant a flower in either (0,0), (1,1), or any single cell. There is no way to plant more than one flower while meeting the condition. Hence, the maximum number of flowers is 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxFlowers() which takes the 2D list \'garden\' and integers M and N as inputs and returns the maximum number of flowers that can be planted. Constraints: 1 ≤ M, N ≤ 1000 garden[i][j] is either \'.\' (empty) or \'#\' (plant)","solution":"def maxFlowers(M, N, garden): def is_valid(x, y): if 0 <= x < M and 0 <= y < N and garden[x][y] == \'.\': # Check if adjacent cells have a flower for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and garden[nx][ny] == \'F\': return False return True return False def place_flower(x, y): garden[x][y] = \'F\' def count_flowers(): flowers = 0 for i in range(M): for j in range(N): if is_valid(i, j): place_flower(i, j) flowers += 1 return flowers return count_flowers()"},{"question":"A small amusement park has a thrilling roller coaster that follows a specific set of rules. Each ride on the roller coaster proceeds based on the sequence of commands given by the riders. Each command is one of two types: 1. Move forward \'F\' 2. Move backward \'B\' The roller coaster starts at position 0, and each command changes the position by 1 unit forward or backward accordingly. After executing all the commands provided by the riders, the final position of the roller coaster is calculated. Given a string of commands where \'F\' represents a forward move and \'B\' represents a backward move, calculate the final position of the roller coaster after executing all the commands. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each of the next T lines contains a string of commands consisting of the characters \'F\' and \'B\' only. ------ Output ------ For each test case, print a single integer representing the final position of the roller coaster. ------ Constraints ------ 1 ≤ T ≤ 1,000 1 ≤ |command string| ≤ 1,000 ----- Sample Input 1 ------ 3 FFB FBFBB FFFBBB ----- Sample Output 1 ------ 1 -1 0","solution":"def final_roller_coaster_position(commands): Given a string of commands, calculate the final position of the roller coaster. Parameters: commands (str): A string consisting of \'F\' and \'B\' characters. Returns: int: The final position after executing all commands. position = 0 for command in commands: if command == \'F\': position += 1 elif command == \'B\': position -= 1 return position def roller_coaster_positions(test_cases): Given multiple test cases, return the final position for each case. Parameters: test_cases (List[str]): A list of command strings. Returns: List[int]: A list of final positions after executing each test case commands. return [final_roller_coaster_position(commands) for commands in test_cases]"},{"question":"Given an array of integers, find the smallest positive integer that cannot be represented as a sum of any subset of the array. Input Format - The first line contains an integer N, the size of the array. - The second line contains N space-separated integers representing the elements of the array. Output Format A single integer - the smallest positive integer that cannot be represented as a sum of any subset of the array. Input Constraints 1 ≤ N ≤ 1000 1 ≤ Array Element ≤ 10^9 SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT 7 Explanation - All integers from 1 to 6 can be formed by summing some subset of the list [1, 2, 3]. - But 7 cannot be formed. Hence, the output is 7.","solution":"def smallest_positive_integer_not_representable(arr): Finds the smallest positive integer that cannot be represented as a sum of any subset of the array. arr.sort() smallest_integer_not_representable = 1 for number in arr: if number > smallest_integer_not_representable: break smallest_integer_not_representable += number return smallest_integer_not_representable # Example usage: # arr = [1, 2, 3] # result = smallest_positive_integer_not_representable(arr) # print(result) # Output: 7"},{"question":"# Kata Task You are given a list of integers representing daily temperatures over a year. Write a function that returns a list of integers `days` such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put `0` instead. For example, given the input `temperatures = [73, 74, 75, 71, 69, 72, 76, 73]`, your output should be `[1, 1, 4, 2, 1, 1, 0, 0]`. NOTES: * The input list will always have a length between 1 and 10^5. * Each temperature is an integer in the range [30, 100]. Examples **Example 1:** **Input:** ```python temperatures = [73, 74, 75, 71, 69, 72, 76, 73] ``` **Output:** ```python [1, 1, 4, 2, 1, 1, 0, 0] ``` **Example 2:** **Input:** ```python temperatures = [30, 40, 50, 60] ``` **Output:** ```python [1, 1, 1, 0] ``` **Example 3:** **Input:** ```python temperatures = [30, 60, 90] ``` **Output:** ```python [1, 1, 0] ``` Constraints - The input list will always have a length between 1 and 10^5. - Each temperature is an integer in the range [30, 100].","solution":"def daily_temperatures(temperatures): Given a list of daily temperatures, returns a list indicating the number of days to wait until a warmer temperature. If no warmer temperature is found in the future, put 0 instead. n = len(temperatures) days = [0] * n stack = [] for i in range(n): # Check if the current temperature is higher than the temperature at stack\'s top index while stack and temperatures[i] > temperatures[stack[-1]]: j = stack.pop() days[j] = i - j stack.append(i) return days"},{"question":"You are given an array of integers. Your task is to determine the number of distinct integers that can be formed by concatenating any two different integers from the array. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each test case consists of two lines: the first line contains an integer n (1 ≤ n ≤ 50) — the number of integers in the array, and the second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100000) — the elements of the array. Output For each test case, print a single line containing the number of distinct integers that can be formed by concatenating any two different integers from the array. Example Input 3 3 1 2 3 4 10 20 34 45 5 123 456 789 101 112 Output 6 12 20 Note In the first test case, the distinct integers formed by concatenating any two different integers from the array {1, 2, 3} are: {12, 13, 21, 23, 31, 32}. Hence, the output is 6. In the second test case, the distinct integers formed by concatenating any two different integers from the array {10, 20, 34, 45} are: {1020, 1034, 1045, 2010, 2034, 2045, 3410, 3420, 3445, 4510, 4520, 4534}. Hence, the output is 12. In the third test case, the distinct integers formed by concatenating any two different integers from the array {123, 456, 789, 101, 112} are: {123456, 123789, 123101, 123112, 456123, 456789, 456101, 456112, 789123, 789456, 789101, 789112, 101123, 101456, 101789, 101112, 112123, 112456, 112789, 112101}. Hence, the output is 20.","solution":"def count_distinct_concatenations(test_cases): For each test case, count the number of distinct integers formed by concatenating any two different integers from the array. :param test_cases: List of tuples where each tuple contains (n, array of integers) :return: List of integers representing count of distinct integers formed for each test case results = [] for n, array in test_cases: unique_numbers = set() for i in range(n): for j in range(n): if i != j: concatenated_number = int(str(array[i]) + str(array[j])) unique_numbers.add(concatenated_number) results.append(len(unique_numbers)) return results"},{"question":"Given a list of non-negative integers `nums` representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police. You cannot rob two adjacent houses. Write a function `def rob(nums: List[int]) -> int:` implementing the described behavior. Example 1: Input: nums = [1, 2, 3, 1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount robbed = 1 + 3 = 4. Example 2: Input: nums = [2, 7, 9, 3, 1] Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9), and rob house 5 (money = 1). Total amount robbed = 2 + 9 + 1 = 12. Example 3: Input: nums = [4, 1, 2, 7, 5, 3, 1] Output: 14 Explanation: Rob house 1 (money = 4), rob house 4 (money = 7), and rob house 6 (money = 3). Total amount robbed = 4 + 7 + 3 = 14. Constraints: - 0 <= nums.length <= 100 - 0 <= nums[i] <= 400","solution":"from typing import List def rob(nums: List[int]) -> int: if not nums: return 0 if len(nums) == 1: return nums[0] dp = [0] * len(nums) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) return dp[-1]"},{"question":"Given an array of integers, your task is to find the smallest positive integer that is missing from the array. The array may contain positive and negative integers, and the size of the array is at most 10^6. Your solution should have a time complexity of O(n) and space complexity of O(1). -----Input----- The first line contains an integer n (1 le n le 10^6) — the size of the array. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the elements of the array. -----Output----- Print the smallest positive integer that is missing from the array. -----Examples----- **Input** 5 3 4 -1 1 **Output** 2 **Input** 7 1 2 0 -4 5 3 7 **Output** 4 **Input** 3 1 2 3 **Output** 4","solution":"def smallest_missing_positive(nums): This function returns the smallest positive integer that is missing from the array. Args: nums (list of int): An array of integers. Returns: int: The smallest positive integer that is missing from the array. n = len(nums) # Place each number in its right place i.e., nums[i] = i+1 for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap elements to place them at the correct index nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # The smallest missing positive number is the first index i where nums[i] != i+1 for i in range(n): if nums[i] != i + 1: return i + 1 # If no missing number in the range [1, n], return n+1 return n + 1"},{"question":"You are a contestant on a game show where you need to perform a series of tasks. One of the tasks involves sequencing a list of integers in a particular way to maximize a given score. Specifically, you need to select and reorder a subset of elements from the list such that the difference between every adjacent pair in the subsequence is minimized. The score for any selected subsequence is defined as the sum of absolute differences between every pair of adjacent elements in that subsequence. Your goal is to find the subsequence that minimizes this score. Note that you can choose to leave some elements out from the original list. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the list. The second line contains n integers, a1, a2, ..., an, representing the elements of the list (1 ≤ ai ≤ 1000). Output Output a single integer — the minimum possible score of the subsequence. Example Input 5 4 1 7 2 3 Output 3 Note For example, with the list [4, 1, 7, 2, 3], if you choose the subsequence [1, 2, 3], the score would be |1-2| + |2-3| = 1 + 1 = 2. Another valid subsequence could be [2, 3, 4], which results in a score of |2-3| + |3-4| = 1 + 1 = 2. Note that it is not necessary to include all elements in the chosen subsequence.","solution":"def minimum_subsequence_score(n, arr): Given a list of integers, find the subsequence that minimizes the sum of absolute differences between every pair of adjacent elements in the subsequence. if n == 1: return 0 arr.sort() min_score = 0 for i in range(1, n): min_score += abs(arr[i] - arr[i-1]) return min_score"},{"question":"Create a function findCommonElements that accepts two lists and returns a new list containing the common elements of the two given lists, without duplicates. Example 1: Input: list1 = [1, 2, 2, 3, 4], list2 = [2, 3, 5] Output: [2, 3] Example 2: Input: list1 = [5, 5, 6, 7], list2 = [5, 8, 7] Output: [5, 7]","solution":"def findCommonElements(list1, list2): Returns a list of common elements from list1 and list2, without duplicates. set1 = set(list1) set2 = set(list2) common_elements = list(set1 & set2) return common_elements"},{"question":"In a kingdom far away, King Raktah decided to organize a grand festival for his people. As part of the festival, he declared a competition where participants have to perform as many tasks as possible within a limited time frame. The tasks are of equal importance, but some take longer to complete than others. Each participant has a specific amount of time they can spend completing tasks. Your job is to help the participants by calculating the maximum number of tasks each participant can complete during the festival. -----Input----- - The first line contains two integers, N and T, where N is the total number of tasks and T is the time each participant can spend on completing tasks. - The second line contains N space-separated integers, where each integer represents the time required to complete a task. -----Output----- Print a single integer - the maximum number of tasks that can be completed by a participant within the given time T. -----Constraints----- 1 <= N <= 100,000 1 <= T <= 1,000,000,000 1 <= Time required for each task <= 1,000 -----Example 1----- Input: 5 10 2 1 3 4 2 Output: 4 -----Example 2----- Input: 3 5 2 2 3 Output: 2 -----Example 3----- Input: 4 8 4 4 4 4 Output: 2 -----Explanation of Sample Cases----- Example 1: The participant can complete tasks that take times 2, 1, 2, and 3 within a total of 10 units of time. Example 2: The participant can complete tasks that take times 2 and 2 within a total of 5 units of time. Example 3: The participant can complete any two tasks, each taking 4 units of time, within a total of 8 units of time.","solution":"def max_tasks(N, T, task_times): task_times.sort() total_time = 0 count = 0 for time in task_times: if total_time + time <= T: total_time += time count += 1 else: break return count"},{"question":"Write a function that takes a list of integers as input and returns a new list with elements sorted in non-decreasing order, without using the built-in sort() method or any other sorting libraries. The function should implement the QuickSort algorithm. QuickSort is a divide-and-conquer algorithm that works as follows: 1. Pick a \\"pivot\\" element from the list. 2. Partition the other elements into two sublists: those less than the pivot and those greater than or equal to the pivot. 3. Recursively apply the above steps to the sublists until each sublist contains only one element. 4. Concatenate the sublists and the pivot to get the sorted list. Example: Input: [3, 6, 8, 10, 1, 2, 1] Output: [1, 1, 2, 3, 6, 8, 10] Your task is to implement the QuickSort algorithm to sort the list. Note: You can assume that the list will contain only integers and can be empty or have duplicate elements.","solution":"def quicksort(arr): Sorts a list of integers in non-decreasing order using the QuickSort algorithm. if len(arr) <= 1: return arr else: pivot = arr[0] less_than_pivot = [x for x in arr[1:] if x < pivot] greater_or_equal_pivot = [x for x in arr[1:] if x >= pivot] return quicksort(less_than_pivot) + [pivot] + quicksort(greater_or_equal_pivot)"},{"question":"Create a function `is_valid_identifier` which takes a string and returns a boolean indicating whether the string is a valid identifier in a programming language. A valid identifier adheres to the following rules: 1. The identifier must start with a letter (a-z, A-Z) or an underscore (_). The starting character cannot be a digit or any other special character. 2. The identifier can contain alphanumeric characters (a-z, A-Z, 0-9) and underscores (_) after the initial character. 3. The identifier cannot be a reserved keyword of the programming language. For simplicity, let\'s assume the list of reserved keywords is as follows: ```python keywords = [ \\"if\\", \\"else\\", \\"while\\", \\"for\\", \\"return\\", \\"break\\", \\"continue\\", \\"def\\", \\"class\\", \\"try\\", \\"except\\", \\"import\\", \\"from\\", \\"as\\", \\"with\\" ] ``` # Examples ```python # valid identifier according to rules is_valid_identifier(\\"variable\\") # True # keywords are not valid identifiers is_valid_identifier(\\"def\\") # False # starts with a number, not valid is_valid_identifier(\\"1variable\\") # False # contains a special character, not valid is_valid_identifier(\\"var!able\\") # False # valid is_valid_identifier(\\"_temp\\") # True # valid is_valid_identifier(\\"__init__\\") # True # a space is not allowed is_valid_identifier(\\"var iable\\") # False ``` You should provide the implementation of this function in Python. Consider edge cases and ensure that your solution runs efficiently for any standard input size. # Your Implementation ```python def is_valid_identifier(identifier): keywords = [ \\"if\\", \\"else\\", \\"while\\", \\"for\\", \\"return\\", \\"break\\", \\"continue\\", \\"def\\", \\"class\\", \\"try\\", \\"except\\", \\"import\\", \\"from\\", \\"as\\", \\"with\\" ] # Check if it\'s a reserved keyword if identifier in keywords: return False # Check if it starts with a letter or underscore if not (identifier[0].isalpha() or identifier[0] == \'_\'): return False # Check remaining characters for char in identifier[1:]: if not (char.isalnum() or char == \'_\'): return False return True ``` Create some test cases for thorough validation of your function.","solution":"def is_valid_identifier(identifier): keywords = [ \\"if\\", \\"else\\", \\"while\\", \\"for\\", \\"return\\", \\"break\\", \\"continue\\", \\"def\\", \\"class\\", \\"try\\", \\"except\\", \\"import\\", \\"from\\", \\"as\\", \\"with\\" ] # Check if identifier is not empty if not identifier: return False # Check if it\'s a reserved keyword if identifier in keywords: return False # Check if it starts with a letter or underscore if not (identifier[0].isalpha() or identifier[0] == \'_\'): return False # Check remaining characters for char in identifier[1:]: if not (char.isalnum() or char == \'_\'): return False return True"},{"question":"In a certain city, there are `n` houses aligned in a straight row. Each house can either have a flower planted in front of it or not. No two adjacent houses can have flowers. Given an integer array `houses` where `houses[i]` is either `0` (no flower) or `1` (flower planted), and an integer `k` representing the number of additional flowers you want to plant, return a boolean indicating whether `k` new flowers can be planted without violating the no-adjacent-flowers rule. Example 1: Input: houses = [1,0,0,0,1], k = 1 Output: True Explanation: You can plant 1 flower at index 2 (houses becomes [1,0,1,0,1]). Example 2: Input: houses = [1,0,0,0,1], k = 2 Output: False Explanation: There is only 1 vacant spot to plant a flower without violating the rule. Note: 1 <= houses.length <= 20000 houses[i] is 0 or 1. There are no adjacent houses with flowers initially. 0 <= k <= houses.length","solution":"def can_place_flowers(houses, k): Given an integer array houses and an integer k, this function returns whether k new flowers can be planted without violating no-adjacent-flowers rule. count = 0 n = len(houses) for i in range(n): if houses[i] == 0: prev_empty = (i == 0 or houses[i - 1] == 0) next_empty = (i == n - 1 or houses[i + 1] == 0) if prev_empty and next_empty: houses[i] = 1 count += 1 if count >= k: return True return count >= k"},{"question":"You are given n integers a1, a2, ..., an. Denote this list of integers as T. Define a function h(L) that takes in a non-empty list of integers L. The function will output another integer as follows: * First, convert each integer in L to its binary representation and pad them with leading zeros so they all have the same length as the longest binary number in L. * Construct a new binary number where each bit is the maximum bit at that","solution":"def h(L): Given a list of integers L, returns an integer obtained by constructing a new binary number where each bit is the maximum bit at that position in all the binary representations of integers in L. # finding the length of the longest binary representation max_len = max(len(bin(x)[2:]) for x in L) # converting each integer to binary and padding to ensure equal lengths bin_list = [bin(x)[2:].zfill(max_len) for x in L] # constructing the new binary number by taking the max bit at each position result_bin = \'\'.join(max(bits) for bits in zip(*bin_list)) # converting the resultant binary string back to an integer return int(result_bin, 2) # Examples print(h([3, 7, 8])) # expected 15 (1111 in binary) print(h([2, 10, 18])) # expected 26 (11010 in binary) print(h([1, 2, 4, 8])) # expected 15 (1111 in binary)"},{"question":"In a city represented as a n x m grid, certain cells contain obstacles (represented by 1) and other cells are free (represented by 0). A robot can move from one cell to another if they are adjacent horizontally or vertically and the cell is free. The robot starts at the top-left corner (1, 1) and wants to reach the bottom-right corner (n, m). However, the robot can place exactly one additional obstacle in any of the free cells to potentially create an optimal path to minimize the total number of steps required. Determine the minimal number of steps required to go from the top-left corner to the bottom-right corner if the robot can place one obstacle anywhere in the grid. If it\'s not possible to reach the destination, print -1. Input: - The first line contains two integers, n and m (1 ≤ n, m ≤ 100). - The next n lines contain m integers each (either 0 or 1), representing the cell types (free or obstacle). Output: - Print a single integer representing the minimal number of steps required to reach the bottom-right corner after placing one obstacle optimally, or -1 if it\'s not possible. Examples: Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 4 Input: 4 4 0 0 1 0 1 0 1 0 0 0 0 1 0 1 0 0 Output: 6 Input: 2 2 0 1 1 0 Output: -1","solution":"from collections import deque def min_steps_with_obstacle(n, m, grid): def bfs(start_x, start_y): moves = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(start_x, start_y, 0)]) visited = [[False] * m for _ in range(n)] visited[start_x][start_y] = True while queue: x, y, steps = queue.popleft() if (x, y) == (n - 1, m - 1): return steps for dx, dy in moves: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return float(\'inf\') original_steps = bfs(0, 0) if original_steps == float(\'inf\'): return -1 min_steps = original_steps for i in range(n): for j in range(m): if grid[i][j] == 0: grid[i][j] = 1 steps = bfs(0, 0) min_steps = min(min_steps, steps) grid[i][j] = 0 return min_steps if min_steps != float(\'inf\') else -1 # Example usage n = 3 m = 3 grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] print(min_steps_with_obstacle(n, m, grid)) # Output: 4"},{"question":"You are given the task of reversing the digits of an integer while preserving the sign. Write a function `reverse_integer` that takes an integer n as input and returns the integer formed by reversing its digits, while keeping the sign of the integer unchanged. If reversing the integer results in a value that exceeds the range of 32-bit signed integers [-2^31, 2^31-1], return 0 instead. For example, reversing 123 results in 321, reversing -456 results in -654, and reversing 120 results in 21. Input The input consists of a single integer n (-2^31 ≤ n ≤ 2^31 - 1). Output The output should be a single integer, the reversed integer or 0 if the reversed integer exceeds the 32-bit signed integer range. Examples Input 123 Output 321 Input -456 Output -654 Input 120 Output 21 Input 1534236469 Output 0","solution":"def reverse_integer(n): Reverses the digits of an integer while preserving the sign. Returns 0 if the reversed integer exceeds 32-bit signed integer range. sign = -1 if n < 0 else 1 reversed_number = int(str(abs(n))[::-1]) * sign if -2**31 <= reversed_number <= 2**31 - 1: return reversed_number else: return 0"},{"question":"Given a string s and a non-empty string p, find all the start indices of p\'s anagrams in s. Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,000. Example 1: Input: s = \\"cbaebabacd\\" p = \\"abc\\" Output: [0, 6] Explanation: The substring with start index = 0 is \\"cba\\", which is an anagram of \\"abc\\". The substring with start index = 6 is \\"bac\\", which is an anagram of \\"abc\\". Example 2: Input: s = \\"abab\\" p = \\"ab\\" Output: [0, 1, 2] Explanation: The substring with start index = 0 is \\"ab\\", which is an anagram of \\"ab\\". The substring with start index = 1 is \\"ba\\", which is an anagram of \\"ab\\". The substring with start index = 2 is \\"ab\\", which is an anagram of \\"ab\\". Your Task: Complete the function findAnagrams() which takes the strings s and p as input parameters, and returns a list of indices where the anagrams of p start in s. Expected Time Complexity: O(N) where N is the length of string s. Expected Auxiliary Space: O(1) for the frequency counters. Constraints: 1 ≤ |s|, |p| ≤ 20000","solution":"def find_anagrams(s, p): Finds all the start indices of p\'s anagrams in s. from collections import Counter p_len = len(p) s_len = len(s) if p_len > s_len: return [] p_count = Counter(p) s_count = Counter(s[:p_len-1]) result = [] for i in range(p_len-1, s_len): s_count[s[i]] += 1 if s_count == p_count: result.append(i - p_len + 1) s_count[s[i - p_len + 1]] -= 1 if s_count[s[i - p_len + 1]] == 0: del s_count[s[i - p_len + 1]] return result"},{"question":"Given an array of integers and a number K, write a program to determine if there is a subset of the given array with a sum equal to K. If such a subset exists, return \\"Yes\\", otherwise return \\"No\\". Input: The first line contains T, denoting the number of test cases. Each test case contains two lines: The first line contains two integers N and K, denoting the size of the array and the target sum respectively. The second line consists of N space-separated integers, representing the elements of the array. Output: For each test case, output \\"Yes\\" if there is a subset with sum equal to K, otherwise output \\"No\\". Constraints: 0 < T ≤ 20 1 ≤ N ≤ 100 -10^4 ≤ A[i] ≤ 10^4 0 ≤ K ≤ 10^5 Note: Multiple test cases possible. Large input/output files, use scanf() and printf() for fast I/O. SAMPLE INPUT 2 4 10 2 3 7 8 5 9 1 5 3 4 2 SAMPLE OUTPUT Yes Yes","solution":"def is_subset_sum(arr, n, k): # Create a boolean array to store results of subproblems dp = [[False for _ in range(k+1)] for _ in range(n+1)] # If sum is 0, answer is true for i in range(n+1): dp[i][0] = True # Fill dp array in bottom up manner for i in range(1, n+1): for j in range(1, k+1): if j < arr[i-1]: dp[i][j] = dp[i-1][j] else: dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]] return dp[n][k] def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 results = [] for _ in range(T): N = int(data[index]) K = int(data[index+1]) index += 2 array = list(map(int, data[index:index+N])) index += N result = \\"Yes\\" if is_subset_sum(array, N, K) else \\"No\\" results.append(result) for result in results: print(result)"},{"question":"Given an array of integers and an integer k, check whether the array can be divided into pairs such that the sum of every pair is divisible by k. Each element of the array should be used exactly once in forming pairs. Example 1: Input: arr = [1, 2, 3, 4, 5, 10], k = 5 Output: True Explanation: The array can be paired as (1, 4), (2, 3), and (5, 10), and all these pairs have sums divisible by 5. Example 2: Input: arr = [1, 2, 3, 4, 5], k = 2 Output: False Explanation: No possible way to pair the elements such that their sum is divisible by 2. Your Task: You don\'t need to read input or print anything. Complete the function canPair() which takes the array and the integer k as input parameters and returns True if the array can be divided into pairs as required, otherwise returns False. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= arr.length <= 10^5 1 <= arr[i] <= 10^5 1 <= k <= 10^5","solution":"def canPair(arr, k): This function checks if the given array can be divided into pairs such that the sum of every pair is divisible by k. Each element of the array should be used exactly once. if len(arr) % 2 != 0: return False # If the number of elements in array is odd, return False remainder_count = [0] * k for num in arr: remainder = num % k remainder_count[remainder] += 1 for i in range(1, (k//2) + 1): if remainder_count[i] != remainder_count[k - i]: return False # For the case where remainder is 0, there should be even number of such elements if remainder_count[0] % 2 != 0: return False return True"},{"question":"A robot moves in a 2D grid starting at the origin (0, 0). The robot can move in four possible directions \'U\'(up), \'D\' (down), \'L\' (left), \'R\' (right), given a sequence of these movements as a string. Your task is to write a program that returns the robot\'s final location after executing all the movements. Input The input contains a single string s representing the sequence of movements. The string s has a length no greater than 1000, and only contains the characters \'U\', \'D\', \'L\', and \'R\'. Output Output the final coordinates of the robot as two space-separated integers x and y. Examples Input \\"UUDDLLRR\\" Output 0 0 Input \\"UUDD\\" Output 0 2 Input \\"LLRRD\\" Output 0 -1","solution":"def final_robot_position(movements): Returns the final position (x, y) of the robot after executing the movements. Movements are given as a string containing \'U\', \'D\', \'L\', \'R\' characters. Parameters: movements (str): A string representing the sequence of movements Returns: tuple: Final coordinates (x, y) as integers x, y = 0, 0 for move in movements: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x, y"},{"question":"You have been given a rectangular grid with dimensions `m x n`. Each cell in the grid contains a lowercase letter. Your task is to find the longest horizontal string of contiguous identical letters in the grid. # Input The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 1000), representing the number of rows and columns of the grid, respectively. Each of the following `m` lines contains `n` lowercase letters, representing the grid. # Output Output a single integer, representing the length of the longest horizontal string of contiguous identical letters found in the grid. # Example Input ``` 3 4 abab bbbb abcd ``` Output ``` 4 ``` In this example, the longest horizontal string of contiguous identical letters is in the second row with the string \\"bbbb\\", which has length 4. # Note Ensure your solution efficiently handles the maximum input size, keeping in mind the constraints of the grid dimensions.","solution":"def longest_horizontal_contiguous_identical(grid, m, n): Returns the length of the longest horizontal string of contiguous identical letters in the grid. max_length = 0 for row in grid: current_length = 1 for j in range(1, n): if row[j] == row[j - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length # Function to read inputs and output the results def main(): import sys input = sys.stdin.read data = input().strip().split() m = int(data[0]) n = int(data[1]) grid = data[2:] print(longest_horizontal_contiguous_identical(grid, m, n)) # Uncomment to enable command-line running # if __name__ == \\"__main__\\": # main()"},{"question":"An adventurer is exploring a mysterious island and comes across a series of magical doors, each requiring a specific kind of key to open. Each door has a sign with a number sequence written on it. The adventurer realizes that he needs to identify a key, which is actually the longest subsequence of consecutive numbers (in ascending order) present in the sequence. Your task is to help the adventurer by writing a program that, given a sequence of numbers, identifies the longest subsequence of consecutive numbers. If there are multiple subsequences with the same length, return the one that appears first. Input: The first line contains T, the number of test cases. The next T lines each contain a sequence of integers separated by spaces. Output: T lines, each containing the longest subsequence of consecutive numbers for the corresponding input line. Constraints: 1 ≤ T ≤ 10 1 ≤ Length of each sequence ≤ 1000 -10^6 ≤ Each number in the sequence ≤ 10^6 Sample Input: 2 1 9 3 10 2 20 31 32 33 35 34 36 30 40 Sample Output: 1 2 3 30 31 32 33 34 35 36","solution":"def longest_consecutive_subsequence(seq): Finds the longest subsequence of consecutive numbers in ascending order from the input list of integers. if not seq: return [] # Convert the sequence to a set for O(1) lookups seq_set = set(seq) max_length = 0 max_seq = [] for num in seq: # Check if it\'s the start of a sequence if num - 1 not in seq_set: current_num = num current_seq = [] while current_num in seq_set: current_seq.append(current_num) current_num += 1 if len(current_seq) > max_length: max_length = len(current_seq) max_seq = current_seq return max_seq def process_test_cases(test_cases): results = [] for case in test_cases: sequence = list(map(int, case.split())) longest_seq = longest_consecutive_subsequence(sequence) results.append(\' \'.join(map(str, longest_seq))) return results"},{"question":"There are N nodes in a graph, labeled from 1 to N. Each pair of nodes (i, j) is connected by an undirected edge with a specific weight w_{ij}. However, the graph is structured in such a way that it only contains a tree with N-1 edges, ensuring connectivity without any cycles. Your task is to determine, for each query, the distance between two given nodes u and v in the tree. The distance is defined as the sum of the weights of the edges on the unique path between u and v. -----Input----- - The first line contains a single integer T—the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N (the number of nodes) and Q (the number of queries). - The next N-1 lines each contain three integers a_i, b_i, and w_{i}, describing an edge between nodes a_i and b_i with weight w_{i}. - The next Q lines each contain two space-separated integers u and v, representing a query. -----Output----- For each query, print a single line containing the distance between nodes u and v. -----Constraints----- - 1 le T le 10 - 2 le N le 10^5 - 1 le Q le 10^5 - 1 le a_i, b_i, u, v le N - 1 le w_i le 10^9 - The sum of N across all test cases will not exceed 10^6 - The sum of Q across all test cases will not exceed 10^6 -----Example Input----- 1 5 3 1 2 3 1 3 2 2 4 4 2 5 6 2 3 4 5 1 5 -----Example Output----- 5 10 9 -----Explanation----- Example case: The tree has the following edges and corresponding weights: - Edge between 1 and 2 with weight 3 - Edge between 1 and 3 with weight 2 - Edge between 2 and 4 with weight 4 - Edge between 2 and 5 with weight 6 For the query between nodes 2 and 3, the unique path is 2 → 1 → 3, and the distance is 3 + 2 = 5. For the query between nodes 4 and 5, the unique path is 4 → 2 → 5, and the distance is 4 + 6 = 10. For the query between nodes 1 and 5, the unique path is 1 → 2 → 5, and the distance is 3 + 6 = 9.","solution":"class TreeDistance: def __init__(self, n): self.n = n self.adj_list = [[] for _ in range(n + 1)] self.parent = [-1] * (n + 1) self.depth = [-1] * (n + 1) self.dist = [0] * (n + 1) def add_edge(self, u, v, w): self.adj_list[u].append((v, w)) self.adj_list[v].append((u, w)) def dfs(self, node, parent, depth, dist): self.parent[node] = parent self.depth[node] = depth self.dist[node] = dist for neighbor, weight in self.adj_list[node]: if neighbor != parent: self.dfs(neighbor, node, depth + 1, dist + weight) def lca(self, u, v): if self.depth[u] < self.depth[v]: u, v = v, u diff = self.depth[u] - self.depth[v] while diff > 0: u = self.parent[u] diff -= 1 while u != v: u = self.parent[u] v = self.parent[v] return u def get_distance(self, u, v): lca_node = self.lca(u, v) return self.dist[u] + self.dist[v] - 2 * self.dist[lca_node] def process_queries(queries, edges): results = [] for N, Q, edge_list, query_list in queries: tree = TreeDistance(N) for u, v, w in edge_list: tree.add_edge(u, v, w) tree.dfs(1, -1, 0, 0) for u, v in query_list: results.append(tree.get_distance(u, v)) return results def main(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) idx = 1 queries = [] for _ in range(T): N, Q = map(int, lines[idx].split()) idx += 1 edges = [] for _ in range(N - 1): a, b, w = map(int, lines[idx].split()) edges.append((a, b, w)) idx += 1 queries_list = [] for _ in range(Q): u, v = map(int, lines[idx].split()) queries_list.append((u, v)) idx += 1 queries.append((N, Q, edges, queries_list)) results = process_queries(queries, edges) return \\"n\\".join(map(str, results))"},{"question":"You are given an array of N elements and Q queries. In each query, you are given two numbers L and R, and you need to find the sum of all prime numbers between L and R (inclusive) within the array. Note: - 0-based indexing. - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Example 1: Input: N = 6 Q = 2 A = {1, 2, 3, 4, 5, 6} Queries = {{0, 3}, {1, 4}} Output: 5 10 Explanation: For query 1: {0, 3} The subarray is {1, 2, 3, 4}. The primes in this range are {2, 3}. The sum of primes is 2 + 3 = 5. For query 2: {1, 4} The subarray is {2, 3, 4, 5}. The primes in this range are {2, 3, 5}. The sum of primes is 2 + 3 + 5 = 10. Example 2: Input: N = 5 Q = 1 A = {10, 11, 12, 13, 14} Queries = {{1, 3}} Output: 24 Explanation: For query 1: {1, 3} The subarray is {11, 12, 13}. The primes in this range are {11, 13}. The sum of primes is 11 + 13 = 24. Expected Time Complexity: O(N * sqrt(M) + Q), where M is the maximum value in the array A. Expected Auxiliary Space: O(N) Your Task: You don\'t need to read input or print anything. Your task is to complete the function `solvePrimeSumQueries()` which takes the integers N (length of the array), Q (number of queries), an array A, and the queries array (2-D array with L and R values for each query) as input, and returns an array of length Q with the solution to each query. Constraints: 1 <= N <= 10^3 0 <= L <= R < N 1 <= A[i] <= 10^5 1 <= Q <= 10^3","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def solvePrimeSumQueries(N, Q, A, queries): Solves the prime number sum for the given queries on the array A. prime_sums = [] for query in queries: L, R = query subarray = A[L:R+1] prime_sum = sum(x for x in subarray if is_prime(x)) prime_sums.append(prime_sum) return prime_sums"},{"question":"You are organizing a coding competition and each participant is required to submit their solutions to various coding problems. Each solution is evaluated based on a score. However, due to an issue with the evaluation system, some scores have turned out to be incorrect. You have a list of participants and their respective scores, and you want to identify the highest correct score for an easy verification process. A score is considered **correct** if it is greater than or equal to a given threshold. Write a program to determine the highest correct score among the participants. If no score is correct, the program should return -1. -----Input----- The first line of the input contains two integers n (1 leq n leq 500), the number of participants, and t (1 leq t leq 100), the threshold for a score to be considered correct. The second line contains n integers representing the scores of the participants. -----Output----- Output a single integer on a line, indicating the highest score that is greater than or equal to the threshold. If no such score exists, output -1. -----Examples----- Sample Input: 5 50 30 60 90 80 45 Sample Output: 90 Sample Input: 4 70 65 50 60 55 Sample Output: -1","solution":"def highest_correct_score(n, t, scores): Determines the highest score that is greater than or equal to the threshold. :param n: int, number of participants :param t: int, threshold score :param scores: list of int, scores of participants :return: int, highest score >= threshold, or -1 if no such score exists correct_scores = [score for score in scores if score >= t] return max(correct_scores, default=-1)"},{"question":"Tom is arranging a coding competition and he is responsible for creating the schedule for it. He has a list of n coding problems that need to be solved, each with a specific difficulty level. To keep things interesting, Tom wants to ensure that the problems are arranged in such a way that no two consecutive problems have the same difficulty level. Given an array of integers representing the difficulty levels of n coding problems, determine whether it is possible to rearrange the problems to meet Tom\'s requirement. -----Input----- Each test contains multiple test cases. The first line contains an integer t (1 leq t leq 100) — the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer n (1 leq n leq 100), indicating the number of problems. The second line of each test case contains n integers d_1, d_2, dots, d_n (1 leq d_i leq 100), indicating the difficulty levels of the problems. -----Output----- For each test case, output \\"YES\\" (without quotes) if it is possible to rearrange the problems so that no two consecutive problems have the same difficulty level, and \\"NO\\" (without quotes) otherwise. -----Examples----- Input 3 3 1 1 2 4 1 1 1 2 5 1 2 3 4 5 Output YES NO YES -----Note----- In the first test case, one possible rearrangement is [1, 2, 1], which meets the requirement. In the second test case, it is not possible to rearrange the problems to avoid two consecutive problems having the same difficulty level because three problems have the same difficulty level. In the third test case, the problems are already arranged in a way that meets the requirement.","solution":"def can_rearrange(t, test_cases): def can_be_rearranged(n, difficulties): from collections import Counter counts = Counter(difficulties) max_count = max(counts.values()) # If the most frequent element appears more than (n+1)//2 times, it\'s not possible if max_count > (n + 1) // 2: return \\"NO\\" return \\"YES\\" results = [] for n, difficulties in test_cases: result = can_be_rearranged(n, difficulties) results.append(result) return results"},{"question":"# Binary Substring Count Your task is to write a function that finds the number of substrings in a binary string that have an equal number of 0s and 1s. A binary string is a string that consists only of characters \'0\' and \'1\'. A substring is a contiguous sequence of characters within a string. The function should return the count of such substrings. # Constraints: - The input string will never be null and will always contain only \'0\' and \'1\' characters. - The length of the input string will be at least 1 and at most 1000. # Input - A single binary string (e.g., \\"00110\\") # Output - An integer representing the number of substrings with an equal number of \'0\'s and \'1\'s. # Example ``` Input: \\"00110011\\" Output: 6 Explanation: The substrings with equal number of 0\'s and 1\'s are: \\"0011\\", \\"01\\", \\"1100\\", \\"10\\", \\"0011\\", and \\"01\\". Input: \\"10101\\" Output: 4 Explanation: The substrings with equal number of 0\'s and 1\'s are: \\"10\\", \\"01\\", \\"10\\", and \\"01\\". ```","solution":"def count_binary_substrings(s): Counts binary substrings with an equal number of 0\'s and 1\'s. :param s: str: A binary string. :return: int: Total number of substrings with equal number of 0\'s and 1\'s. groups = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: groups.append(count) count = 1 groups.append(count) total_count = 0 for i in range(1, len(groups)): total_count += min(groups[i], groups[i - 1]) return total_count"},{"question":"You\'re managing a parking lot and want to help drivers find the nearest available parking spot. The parking lot can be represented as a 2D grid, where each cell is either taken (denoted by a value of `1`) or available (denoted by a value of `0`). Additionally, the grid starts at the top-left corner (0, 0) which is the entrance to the parking lot. Write a function `nearest_parking_spot(grid: List[List[int]]) -> Optional[Tuple[int,int]]` that takes a 2D list representing the parking lot grid, and returns the coordinates of the nearest available parking spot to the entrance. If no spot is available, return `None`. **Rules**: - You\'ll need to move only horizontally or vertically (not diagonally). - If multiple spots are equidistant, return the one that comes first in row-major order (top-down, left-right). **Examples**: ```python nearest_parking_spot([[1, 1, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1]]) == (0, 2) nearest_parking_spot([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == None nearest_parking_spot([[1, 0, 1], [1, 1, 1], [0, 1, 1]]) == (0, 1) ``` **Function Signature**: ```python from typing import List, Tuple, Optional def nearest_parking_spot(grid: List[List[int]]) -> Optional[Tuple[int,int]]: pass ```","solution":"from typing import List, Tuple, Optional from collections import deque def nearest_parking_spot(grid: List[List[int]]) -> Optional[Tuple[int, int]]: if not grid or not grid[0]: return None rows, cols = len(grid), len(grid[0]) visited = [[False] * cols for _ in range(rows)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: r, c, dist = queue.popleft() if grid[r][c] == 0: return (r, c) for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and not visited[nr][nc]: visited[nr][nc] = True queue.append((nr, nc, dist + 1)) return None"},{"question":"A large software project involves multiple modules coded by different teams. Each module is represented as a tree, with the root being the main entry point to the module. The nodes of the tree are functions, and the tree edges represent function calls. A functional complexity is assigned to each function (node). Given the tree structure of the module and the complexity of each function, the management wants to analyze the system\'s load when different functions are executed. The load of executing a function is defined as the sum of complexities of all nodes in the subtree rooted at that function (including itself). Your task is to write a program that calculates the load for executing each function in the module. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of functions in the module. The second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^3) — the complexity of each function. The next n-1 lines describe the tree structure. Each of these lines contains two integers u and v (1 ≤ u, v ≤ n), meaning function u calls function v or vice versa (it can be read in both directions). -----Output----- Output n integers where the i-th integer is the load of executing the i-th function. -----Examples----- Input 5 3 2 1 4 5 1 2 1 3 2 4 4 5 Output 15 11 1 9 5 Input 3 10 20 30 1 2 1 3 Output 60 20 30","solution":"def calculate_loads(n, complexities, edges): from collections import defaultdict import sys sys.setrecursionlimit(10**6) tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) loads = [-1] * (n + 1) def dfs(node, parent): load = complexities[node - 1] for child in tree[node]: if child != parent: load += dfs(child, node) loads[node] = load return load dfs(1, -1) return loads[1:]"},{"question":"-----Input----- The input consists of a single line containing one non-negative integer N (0 le N le 10^6), which represents the number of elements to be included in the sequence. The next line contains N space-separated non-negative integers a_0, a_1, ..., a_{N-1} (0 le a_i le 10^6) which constitute the sequence. -----Output----- Print a single line containing the length of the longest contiguous subsequence in which all elements are strictly increasing. -----Examples----- Sample Input 1: 6 1 3 2 2 5 7 Sample Output 1: 3 Sample Input 2: 5 5 4 3 2 1 Sample Output 2: 1 Sample Input 3: 10 1 2 3 1 2 3 4 5 6 7 Sample Output 3: 7","solution":"def longest_increasing_subsequence_length(n, sequence): if n == 0: return 0 longest_length = 1 current_length = 1 for i in range(1, n): if sequence[i] > sequence[i - 1]: current_length += 1 longest_length = max(longest_length, current_length) else: current_length = 1 return longest_length"},{"question":"Consider two warriors in a heated debate. They present their arguments as strings and aim to resolve differences by focusing on unique phrases they exclusively said. Write a Python function: ```python def unique_phrases(s1, s2) ``` The parameters ```s1``` and ```s2``` are strings where each word is separated by a space. Your function should return a string containing the words that appear exclusively in either ```s1``` or ```s2```, but not in both. Words in the result should occur once, and the order should follow their first appearance in the corresponding argument. If all words are common or no unique words are found, return \\"peace\\". **Example:** ```python unique_phrases(\\"battle honor respect\\", \\"honor courage wisdom\\") ``` Output: ``` \'battle respect courage wisdom\' ``` **Explanation:** Words \\"battle\\" and \\"respect\\" are unique to the first argument; \\"courage\\" and \\"wisdom\\" are unique to the second. \\"Honor\\" is common in both, thus excluded. The result combines all unique words in their respective order.","solution":"def unique_phrases(s1, s2): Returns a string containing unique words that appear exclusively in either s1 or s2. If no unique words are found, return \'peace\'. set_s1 = set(s1.split()) set_s2 = set(s2.split()) unique_in_s1 = set_s1 - set_s2 unique_in_s2 = set_s2 - set_s1 # Collecting unique words preserving original order result = [word for word in s1.split() if word in unique_in_s1] + [word for word in s2.split() if word in unique_in_s2] return \'peace\' if not result else \' \'.join(result)"},{"question":"Given an n x m 2D grid with each cell having a distinct integer value, find the longest increasing path in the grid. You can move up, down, left, or right from a cell to another cell with a higher integer value. Return the length of the longest increasing path. Example: Input: grid = {{9, 9, 4}, {6, 6, 8}, {2, 1, 1}} Output: 4 Explanation: The longest increasing path is [1, 2, 6, 9]. Your Task: You don\'t need to read or print anything. Your task is to complete the function longestIncreasingPath() which takes grid as input parameter and returns the length of the longest increasing path. Expected Time Complexity: O(n*m) Expected Space Complexity: O(n*m) Constraints: 1 <= n, m <= 200 1 <= grid[i][j] <= 10^4","solution":"def longestIncreasingPath(matrix): if not matrix: return 0 n, m = len(matrix), len(matrix[0]) cache = [[-1] * m for _ in range(n)] def dfs(i, j): if cache[i][j] != -1: return cache[i][j] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_path = 1 for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and matrix[ni][nj] > matrix[i][j]: max_path = max(max_path, 1 + dfs(ni, nj)) cache[i][j] = max_path return max_path longest_path = 0 for i in range(n): for j in range(m): longest_path = max(longest_path, dfs(i, j)) return longest_path"},{"question":"Function checkPalindrome() is an ideal interview question testing for understanding of recursion and string manipulation. Given a string s, check if it can be transformed into a palindrome by removing at most one character from it. A string is considered a palindrome if it reads the same forward and backward. Example 1: Input: \\"abca\\" Output: True Explanation: Remove the character \'c\', which results in the string \\"aba\\", a palindrome. Example 2: Input: \\"abc\\" Output: False Explanation: Removing any one character does not result in a palindrome. Your Task: Create a function isAlmostPalindrome(s) that returns a boolean indicating if the string can become a palindrome by removing at most one character. Constraints: 1≤ |s| ≤10^5","solution":"def is_palindrome(s: str) -> bool: Helper function to check if a string is a palindrome. return s == s[::-1] def isAlmostPalindrome(s: str) -> bool: Returns True if the string s can be transformed into a palindrome by removing at most one character, otherwise, returns False. left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # If there\'s a mismatch, try removing either the left character or the right character # and check if either resulting string is a palindrome one_char_removed_left = s[left+1:right+1] one_char_removed_right = s[left:right] return is_palindrome(one_char_removed_left) or is_palindrome(one_char_removed_right) left += 1 right -= 1 return True # If no mismatches found, it\'s already a palindrome"},{"question":"Given a string S consisting of English alphabets and commas, write a program to find the longest contiguous substring of S that contains only alphabetic characters (i.e., no commas). -----Constraints----- - 1 leq |S| leq 10^5 - S consists of uppercase and lowercase English alphabets and commas only. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the longest contiguous substring of S that contains only alphabetic characters. If there are multiple substrings of the same maximum length, print the first one. -----Sample Input----- hello,this,is,a,test -----Sample Output----- hello Among the substrings \\"hello\\", \\"this\\", \\"is\\", \\"a\\", and \\"test\\", \\"hello\\" is the longest contiguous substring containing only alphabetic characters.","solution":"def longest_alpha_substring(S): Returns the longest contiguous substring of S that contains only alphabetic characters (i.e., no commas). max_length = 0 current_length = 0 max_start = 0 current_start = 0 for i in range(len(S)): if S[i].isalpha(): if current_length == 0: current_start = i current_length += 1 else: if current_length > max_length: max_length = current_length max_start = current_start current_length = 0 if current_length > max_length: max_length = current_length max_start = current_start return S[max_start:max_start + max_length]"},{"question":"Alicia is playing a game involving a rectangular grid with N rows and M columns. Each cell in the grid has a certain number of coins. Alicia can start from any cell and move to a neighboring cell (up, down, left, right) but she can move at most K steps. She needs to collect as many coins as possible within those K steps. Help Alicia determine the maximum number of coins she can collect within K steps starting from any cell on the grid. -----Input----- The first line of input contains the integers N (1 le N le 100), M (1 le M le 100), and K (0 le K le 10), which are the number of rows, columns, and the maximum steps respectively. Each of the following N lines contains M integers indicating the number of coins in each cell. Each number of coins will be between 0 and 1000. -----Output----- The first and only line of output must contain the maximal number of coins Alicia can collect starting from any cell within K steps. -----Examples----- Sample Input: 3 3 2 1 2 3 0 1 4 2 0 5 Sample Output: 12","solution":"def max_coins(N, M, K, grid): def dfs(x, y, steps): if steps > K: return 0 max_coins_collected = grid[x][y] for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited: visited.add((nx, ny)) max_coins_collected = max(max_coins_collected, grid[x][y] + dfs(nx, ny, steps + 1)) visited.remove((nx, ny)) return max_coins_collected max_coins = 0 for i in range(N): for j in range(M): visited = set() visited.add((i, j)) max_coins = max(max_coins, dfs(i, j, 0)) return max_coins"},{"question":"A local farm wants to implement a new software system to manage their chicken coop. They need a program to track the daily egg production and calculate the total and average number of eggs produced each day over a given period. Every day, the farm records the number of eggs produced and adds it to their log. Sometimes, due to technical issues or mistakes, some days have a recorded number of zero eggs. Your task is to write a program that will take in the egg counts for N days, filter out the recorded zero counts, and then compute both the total number of eggs and the average number of eggs per recorded day. If all recordings for the given period are zero, the total egg count will be zero, and the average will be considered zero as well. -----Input----- The first line contains a single integer N (1 ≤ N ≤ 10^5) — the number of days recorded. The second line contains N integers e1, e2, ..., eN (0 ≤ ei ≤ 1000) — the number of eggs collected on i-th day. -----Output----- Print two space-separated values: the total egg count and the average eggs per day with at most 6 decimal places. -----Examples----- Input 7 5 0 6 7 0 0 8 Output 26 6.500000 Input 5 0 0 0 0 0 Output 0 0.000000 Input 4 10 20 0 30 Output 60 20.000000 -----Note----- In the first sample, the recorded egg counts are [5, 0, 6, 7, 0, 0, 8]. After filtering out the zero counts, the data becomes [5, 6, 7, 8]. The total number of eggs is 26, and the average is 26 / 4 = 6.5. In the second sample, all counts are zero. Thus, both the total and average counts are zero. In the third sample, the recorded egg counts are [10, 20, 0, 30]. After filtering the zeros, the data becomes [10, 20, 30]. The total is 60, and the average is 60 / 3 = 20.","solution":"def compute_egg_statistics(N, egg_counts): Computes the total number of eggs and the average number of eggs per day. Parameters: N (int): Number of days recorded. egg_counts (list): List containing the number of eggs collected each day. Returns: tuple: Total number of eggs and average eggs per day as a tuple. filtered_counts = [count for count in egg_counts if count > 0] total_eggs = sum(filtered_counts) average_eggs = total_eggs / len(filtered_counts) if filtered_counts else 0.0 return total_eggs, average_eggs"},{"question":"Leah is teaching her younger brother how to calculate the total advance of a list of books they were read from a book series. Each book in the series has a unique index starting from 1 and an \'advanced\' score associated with it. Leah wants to know if any three consecutive books (in terms of their indices) have an average score greater than or equal to a given threshold. If there are multiple sets of three consecutive books that meet the condition, Leah just needs to find and return one such valid set. Write a function that determines if such a set of three consecutive books exists and, if so, return the indices of these three books. -----Input----- The first line contains an integer n (3 ≤ n ≤ 100) — the number of books in the series. The second line contains n integers s_1, s_2, ..., s_n (1 ≤ s_{i} ≤ 1000) where s_{i} denotes the \'advanced\' score of the i-th book. The third line contains one integer t (1 ≤ t ≤ 1000) — the threshold for the average score. -----Output----- If there exists three consecutive books such that their average \'advanced\' score is greater than or equal to t, print \\"YES\\" and the indices of these three books. Otherwise, print \\"NO\\". -----Examples----- Input 5 30 40 35 50 45 40 Output YES 2 3 4 Input 4 10 20 30 40 35 Output NO Input 6 100 90 85 95 70 80 88 Output YES 1 2 3 -----Note----- In the first sample, the three consecutive books with indices (2, 3, 4) have scores (40, 35, 50). Their average score is (40+35+50)/3 = 41.67, which is greater than or equal to the threshold 40. In the second sample, no set of three consecutive books has an average score greater than or equal to 35. In the third sample, the three consecutive books with indices (1, 2, 3) have scores (100, 90, 85). Their average score is (100+90+85)/3 = 91.67, which is greater than or equal to the threshold 88.","solution":"def find_consecutive_books(n, scores, t): Determines if there exist three consecutive books with an average score >= threshold. Args: n (int): Number of books scores (list of int): List of advanced scores for each book t (int): Threshold average score Returns: str: \\"YES\\" followed by the indices of the three consecutive books if they exist, otherwise \\"NO\\" for i in range(n - 2): avg_score = (scores[i] + scores[i + 1] + scores[i + 2]) / 3 if avg_score >= t: return f\\"YESn{i + 1} {i + 2} {i + 3}\\" return \\"NO\\""},{"question":"Kim loves string operations and one day she came up with a new fun game, where she takes a large string and a set of smaller strings. Then, she finds out how many times each smaller string appears as a substring within the larger string. Given that the larger string can be very lengthy, Kim seeks your help to write a program to perform this task efficiently. INPUT: The first line contains an integer T, the number of test cases. For each test case: - The first line contains the larger string L. - The second line contains an integer M, the number of smaller strings. - The next M lines each contain a smaller string S. OUTPUT: For each test case, output M lines, each line containing the count of how many times each smaller string S appears in the larger string L. CONSTRAINTS: 1 <= T <= 10 1 <= length of L <= 10^6 1 <= M <= 100 1 <= length of each S <= 100 SAMPLE INPUT: 1 ababcababc 3 ab abc c SAMPLE OUTPUT: 4 2 2","solution":"def find_substring_counts(T, test_cases): results = [] for case in test_cases: L = case[\'L\'] M = case[\'M\'] substrings = case[\'substrings\'] counts = [] for S in substrings: count = L.count(S) counts.append(count) results.append(counts) return results"},{"question":"You are tasked with developing a program that analyzes a string of characters and translates it into a visually formatted matrix. Specifically, you will work with a 4x4 grid, where the input string represents each position in the matrix from left to right, top to bottom. The input string will comprise exactly 16 characters, including digits (0-9) and uppercase letters (A-Z). Each position in the matrix should be filled with the corresponding character from the input string. Input A single line consisting of 16 characters, including digits (0-9) and uppercase letters (A-Z). Output Print a 4x4 matrix, where each line contains four characters from the input string, aligned such that the character order corresponds to their position in the string. Example Input 123456789ABCDE0F Output 1 2 3 4 5 6 7 8 9 A B C D E 0 F","solution":"def string_to_matrix(s): Given a string s of exactly 16 characters, convert it to a 4x4 grid format. Parameters: s (str): A string of 16 characters containing digits (0-9) and uppercase letters (A-Z). Returns: List[List[str]]: A 4x4 matrix representation of the string. if len(s) != 16: raise ValueError(\\"Input string must be exactly 16 characters long.\\") matrix = [list(s[i:i+4]) for i in range(0, 16, 4)] return matrix def print_matrix(matrix): Prints a 4x4 matrix in a formatted way. Parameters: matrix (List[List[str]]): A 4x4 matrix to be printed. for row in matrix: print(\' \'.join(row))"},{"question":"A company is organizing a team-building activity involving a treasure hunt. They have placed N treasures in different locations on a cartesian plane, and each team has exactly M members who start at the origin (0, 0). Each team member will move towards the nearest treasure to collect it. The aim is to find out how many treasures will be left uncollected after all team members have made their moves. Initially, the team members choose the nearest treasure to go to. If there are multiple treasures at the same distance, the team members will distribute themselves to minimize the number of uncollected treasures. Write a program that determines the number of treasures left uncollected. Input The first line of input contains two integers N (1 ≤ N ≤ 105), M (1 ≤ M ≤ 105). The next N lines each contain two integers x_i and y_i (|x_i|, |y_i| ≤ 107), representing the coordinates of the treasures. Output Output a single integer — the number of treasures that will not be collected by any team member. Examples Input 5 3 1 1 2 2 3 3 4 4 5 5 Output 2 Input 3 4 -1 -1 2 2 -3 -3 Output 0 Note In the first example, there are five treasures and three team members. The team members will collect the closest three treasures, leaving the remaining two uncollected. In the second example, there are more team members than treasures, ensuring all treasures will be collected, hence the output is 0.","solution":"import math def uncollected_treasures(N, M, coordinates): Determines the number of uncollected treasures after all team members have made their moves. :param N: Total number of treasures :param M: Total number of team members :param coordinates: List of tuples representing the coordinates of treasures :return: Number of uncollected treasures # Calculate the Euclidean distances of all treasures from the origin (0, 0) distances = [math.sqrt(x**2 + y**2) for x, y in coordinates] # Sort the distances in ascending order distances.sort() # If team members are more than or equal to treasures, all treasures will be collected collected = min(N, M) # Calculate the number of uncollected treasures uncollected = N - collected return uncollected # Example usage: # N = 5 # M = 3 # coordinates = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)] # print(uncollected_treasures(N, M, coordinates)) # Output: 2"},{"question":"You are given a list of integers and an integer target. Your task is to determine if there are two distinct indices i and j in the list such that the absolute difference between the integers at these indices is equal to the target. Write a function `find_indices_with_difference(lst, target)` that returns a boolean value indicating whether such indices exist. Input Format - The first line contains a list of integers `lst` (1 <= length of `lst` <= 10^5), where each integer in the list is between -10^9 and 10^9. - The second line contains an integer `target` (0 <= `target` <= 10^9). Output Format - Output a single boolean value: `True` if such a pair of indices exists, otherwise `False`. Function Signature ```python def find_indices_with_difference(lst: List[int], target: int) -> bool: pass ``` Sample Input ``` [1, 5, 9, 13] 4 ``` Sample Output ``` True ``` Explanation All pairs with their absolute differences are (1, 5) with difference 4, (5, 9) with difference 4, and (9, 13) with difference 4. Hence such indices exist.","solution":"from typing import List def find_indices_with_difference(lst: List[int], target: int) -> bool: Determines if there are two distinct indices in the list such that the absolute difference between the integers at these indices is equal to the target. Parameters: lst (List[int]): List of integers. target (int): Target difference. Returns: bool: True if such a pair exists, otherwise False. seen = set() for number in lst: if (number + target) in seen or (number - target) in seen: return True seen.add(number) return False"},{"question":"Write a function that checks if a given string contains only unique characters, ignoring case. The function should return `true` if all characters in the string are unique, and `false` otherwise.","solution":"def has_unique_chars(s): Returns True if the given string contains only unique characters (ignoring case), False otherwise. s = s.lower() return len(s) == len(set(s))"},{"question":"Given a sequence of N integers and a list of Q queries, each containing a range [L, R], find the sum of the integers in the sequence from index L to R (inclusive) for each query. Each query will be processed independently. -----Constraints----- - All values in input are integers. - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq L_i leq R_i leq N -----Input----- Input is given from Standard Input in the following format: N Q A_1 A_2 A_3 ... A_N L_1 R_1 L_2 R_2 vdots L_Q R_Q -----Output----- For each query, print the sum of the integers from index L to R (inclusive). -----Sample Input----- 5 3 3 2 4 5 1 1 3 2 5 1 5 -----Sample Output----- 9 12 15 In this example: - The sum of integers from index 1 to 3 (3 + 2 + 4) is 9. - The sum of integers from index 2 to 5 (2 + 4 + 5 + 1) is 12. - The sum of integers from index 1 to 5 (3 + 2 + 4 + 5 + 1) is 15.","solution":"def range_sum(N, Q, sequence, queries): Returns the sum of the integers in the sequence from index L to R (inclusive) for each query. Parameters: - N : int : length of sequence - Q : int : number of queries - sequence : list : list of integers - queries : list of tuples : list of (L, R) pairs representing the queries Returns: - list of int : sum of the integers for each query results = [] # Create prefix sums for quick sum calculation prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i - 1] + sequence[i - 1] # Process each query for (L, R) in queries: results.append(prefix_sums[R] - prefix_sums[L - 1]) return results"},{"question":"Given a list of positive integers, you are required to find the minimum cost to combine these integers into one number. Combining two numbers, `x` and `y`, has a cost of `x + y`. The combined number can then be used as part of further combinations, if necessary. Your goal is to determine the minimum cost required to combine all the integers in the list into a single number. For example, given the list [1, 2, 3, 4], you could combine them in the following way: - Combine 1 and 2, cost is 3 (remaining list is [3, 3, 4]) - Combine 3 and 3, cost is 6 (remaining list is [6, 4]) - Combine 6 and 4, cost is 10 (remaining list is [10]) The final cost is the sum of these operations, which is 3 + 6 + 10 = 19. To help you understand the requirement, consider another example: For the list [4, 6, 8]: - Combine 4 and 6, cost is 10 (remaining list is [10, 8]) - Combine 10 and 8, cost is 18 (remaining list is [18]) The final cost is 10 + 18 = 28. -----Input format----- - The first line contains a single integer `n`, the number of integers in the list. - The second line contains `n` space-separated positive integers. -----Output format----- - One integer, which is the minimum combining cost. -----Sample Input----- 4 1 2 3 4 -----Sample Output----- 19 -----Sample Input----- 3 4 6 8 -----Sample Output----- 28 Constraints: 1 ≤ n ≤ 10^5 1 ≤ Each integer ≤ 10^4 Note: - You should aim to combine the numbers in a way that minimizes the overall cost by repeatedly combining the two smallest numbers in the list.","solution":"import heapq def minimum_combine_cost(nums): Given a list of positive integers, find the minimum cost to combine these integers into one number. Combining two numbers x and y has a cost of x + y. # Create a min-heap from the list heapq.heapify(nums) total_cost = 0 # Continue combining until there is only one number left in the heap while len(nums) > 1: # Extract the two smallest elements first = heapq.heappop(nums) second = heapq.heappop(nums) combined_cost = first + second total_cost += combined_cost # Push the combined number back into the heap heapq.heappush(nums, combined_cost) return total_cost # Read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = list(map(int, data[1:])) print(minimum_combine_cost(nums))"},{"question":"Design a function that takes a list of integers and returns a new list containing the cumulative sum of the integers. The cumulative sum at position i is defined as the sum of all integers from the start of the list up to position i. # For example: Given the list [1, 2, 3, 4], the function should return [1, 3, 6, 10]. CumulativeSum([1, 2, 3, 4]) => [1, 3, 6, 10] where 1 is the first element, 3 is the sum of 1 and 2, 6 is the sum of 1, 2, and 3, and 10 is the sum of 1, 2, 3, and 4.","solution":"def cumulative_sum(lst): Takes a list of integers and returns a new list containing the cumulative sum of the integers. cumsum = [] total = 0 for num in lst: total += num cumsum.append(total) return cumsum"},{"question":"Given a string of length N consisting of characters from \'a\' to \'z\', you need to determine if all the characters in the string are either all vowels or all consonants. - Vowels are \'a\', \'e\', \'i\', \'o\', \'u\'. - Consonants are any other alphabetic characters that are not vowels. Output \\"Yes\\" if all characters are either all vowels or all consonants, otherwise output \\"No\\". -----Input----- The input is a single string S of length N with 1 le N le 50. -----Output----- Output \\"Yes\\" if all characters in the string are either all vowels or all consonants, otherwise output \\"No\\". -----Examples----- Sample Input: aeiou Sample Output: Yes Sample Input: hello Sample Output: No","solution":"def check_all_vowels_or_consonants(s): Checks if all characters in the input string are either all vowels or all consonants. Args: s: A string of length N (1 ≤ N ≤ 50) consisting of characters from \'a\' to \'z\'. Returns: \\"Yes\\" if all characters in the string are either all vowels or all consonants, otherwise \\"No\\". vowels = set(\'aeiou\') all_vowels = True all_consonants = True for char in s: if char in vowels: all_consonants = False else: all_vowels = False if all_vowels or all_consonants: return \\"Yes\\" return \\"No\\""},{"question":"Sarah recently started learning about strings and algorithms. As an exercise, she came across a string manipulation problem involving longest palindromic substrings. Sarah wants to find out what’s the length of the longest palindromic substring in a given string. Your task is to write a function to help Sarah with her problem. A palindrome is a string that reads the same forwards and backwards. For example, \\"madam\\" and \\"abccba\\" are palindromes, but \\"abc\\" and \\"abca\\" are not. The problem is defined as follows: -----Input----- The first line contains an integer n (1 le n le 1000), the length of the string. The second line contains a string s of length n, consisting of lowercase English letters only. -----Output----- The output should be a single integer representing the length of the longest palindromic substring in the given string. -----Examples----- Input 7 racecar Output 7 Input 12 abacdfgdcaba Output 3 Input 5 abcde Output 1 -----Note----- In the first example, the input string \\"racecar\\" itself is a palindrome, thus the length of the longest palindromic substring is 7. In the second example, one of the longest palindromic substrings is \\"aba\\" (starting from the index 0), hence the length is 3. In the third example, since there are no palindromic substrings longer than 1 character, the output is 1.","solution":"def longest_palindromic_substring_length(n, s): Returns the length of the longest palindromic substring in the given string s. Args: n : int : The length of the string s. s : str : The string in which we need to find the longest palindromic substring. Returns: int : The length of the longest palindromic substring. if n == 0: return 0 max_len = 1 start = 0 for i in range(1, n): low = i - 1 high = i while low >= 0 and high < n and s[low] == s[high]: if (high - low + 1) > max_len: start = low max_len = high - low + 1 low -= 1 high += 1 low = i - 1 high = i + 1 while low >= 0 and high < n and s[low] == s[high]: if (high - low + 1) > max_len: start = low max_len = high - low + 1 low -= 1 high += 1 return max_len"},{"question":"Given a list of integers, your task is to determine the maximum difference between any two elements such that the larger element comes after the smaller one in the list. Write a function `max_difference(lst)` to solve the problem. # Input - A single line containing a space-separated list of integers. # Output - A single integer, which is the maximum difference between any two elements such that the larger element appears after the smaller element. If no such pairs exist, return -1. # Constraints - The length of the list will be between 1 and 10^5 inclusive. - Each integer in the list will be between -10^9 and 10^9 inclusive. # Examples Example 1 ``` Input: 7 1 5 4 6 3 Output: 5 Explanation: The maximum difference is 6 - 1 = 5. Input: 1 2 90 10 110 Output: 109 Explanation: The maximum difference is 110 - 1 = 109. Input: 5 4 3 2 1 Output: -1 Explanation: No element comes after a larger element, hence resulting in -1. ``` # Explanation For the first input example, the maximum difference that obeys the rule (element appearing later in the list must be larger than the element appearing earlier) is 6 - 1 = 5.","solution":"def max_difference(lst): if len(lst) < 2: return -1 min_element = lst[0] max_diff = -1 for i in range(1, len(lst)): if lst[i] > min_element: max_diff = max(max_diff, lst[i] - min_element) min_element = min(min_element, lst[i]) return max_diff"},{"question":"Problem Description: You are given an array of n integers. Your task is to determine the minimum possible sum of the elements of the array after performing a specific operation exactly once. The operation allows you to choose a segment of the array, reverse the order of elements in that segment, and then replace the chosen segment with the reversed segment in the original array. The segment can be of any length and can start and end at any position within the array. # Function Signature ```python def minimum_sum(n: int, arr: List[int]) -> int: pass ``` # Input Format - The first line contains a single integer n (1 ≤ n ≤ 2000), the length of the array. - The second line contains n space-separated integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4), representing the elements of the array. # Output Format Output a single integer, the minimum possible sum of the array after performing the described operation exactly once. # Example **Sample Input:** ``` 5 1 2 3 4 5 ``` **Sample Output:** ``` 15 ``` **Explanation:** The array `[1, 2, 3, 4, 5]` already has the minimum possible sum `15`, since reversing any segment does not change the sum of the elements. **Sample Input:** ``` 6 3 -1 2 -1 3 4 ``` **Sample Output:** ``` 8 ``` **Explanation:** One optimal way to reverse the segment `[3, -1, 2, -1]` to get `[-1, 2, -1, 3]` resulting in the new array `[3, -1, 2, -1, 3, 4]` which sums up to `8`. This process minimizes the sum of the array. # Constraints - 1 leq n leq 2000 - Each a_i can be negative, zero, or positive, with -10^4 leq a_i leq 10^4","solution":"def minimum_sum(n, arr): Returns the minimum possible sum of the elements of the array after reversing exactly one segment. # Given that reversing a segment does not change the total sum of the array, # the result must always be the sum of the initial array. return sum(arr)"},{"question":"You are given a string s of length n and q queries in an array queries[] of length 2*q containing l, r pair for all q queries. You need to compute the frequency of the most frequent character in the substring specified by l and r over q queries. The string is 0-indexed. Example 1: Input: n = 5 s = \\"aabbc\\" q = 2 queries = {0, 2, 1, 4} Output: 2 2 Explanation: In the first query, we need the substring from index 0 to 2 which is \\"aab\\". The most frequent character is \'a\' which appears 2 times. In the second query, we need the substring from index 1 to 4 which is \\"abbc\\". The most frequent characters are \'a\' and \'b\' which appear 2 times each. We return the frequency of \'b\', which is 2. Your Task: You do not need to read input or print anything. Your task is to complete the function maxCharFrequency() which takes n, s, q, and queries as input parameters and returns the answer for all the queries. Expected Time Complexity: O(n + q) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n, q ≤ 1000 s consists of lowercase English letters. 0 ≤ l ≤ r < n","solution":"def maxCharFrequency(n, s, q, queries): result = [] for i in range(q): l = queries[2*i] r = queries[2*i + 1] substring = s[l:r+1] char_count = {} for char in substring: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 max_frequency = max(char_count.values()) result.append(max_frequency) return result"},{"question":"Bob is organizing a charity marathon and wants to prepare a personalized pack for each of the participants. Each participant has a unique registration ID and a list of items they prefer in decreasing order of preference. The packs are prepared according to the participant\'s rank in the marathon, where rank 1 gets their top preference, rank 2 follows, and so on. If a participant’s top preference is already taken, they get the next available item in their list. Write a function to determine which item each participant gets based on their rank and preference. Example 1: Input: N = 4 Arr[][] = { {List of preferences of participant 1}, {List of preferences of participant 2}, {List of preferences of participant 3}, {List of preferences of participant 4},} = {{1, 2, 3, 4}, {4, 1, 2, 3}, {3, 4, 1, 2}, {2, 3, 4, 1}} Output: 1 4 3 2 Explanation: Participant with rank 1 gets item 1 (first in their preference). Rank 2 gets item 4 (first in preference), Rank 3 gets item 3 (first in preference). Rank 4 gets item 2 since 2 is their first available preference. Example 2: Input: N = 3 Arr[][] = { {List of preferences of participant 1}, {List of preferences of participant 2}, {List of preferences of participant 3},} = {{2, 1, 3}, {3, 2, 1}, {1, 3, 2}} Output: 2 3 1 Explanation: Rank 1 gets item 2 (first in their list), Rank 2 gets item 3 (first in their list), Rank 3 gets item 1 since it is the first available after the others have been assigned. Your Task: You don’t need to read input or print anything. Your task is to complete the function distributePacks() which takes the 2D array of integers arr and n as input parameters and returns an array of integers of size N denoting the item that each participant got in order of their ranks. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^3 Each participant’s preference list is a permutation of [1, N]","solution":"def distributePacks(N, Arr): Determines which item each participant gets based on their rank and preference. Parameters: N (int): The number of participants. Arr (list of list of int): A 2D list where each sublist contains the preferences of each participant. Returns: list of int: List of items each participant gets. # Track assigned items assigned = [False] * (N + 1) # All items from 1 to N are initially unassigned result = [0] * N # Result array for storing items each participant gets # Iterate over each participant\'s claims according to their rank for i in range(N): for preference in Arr[i]: # If the preferred item is not yet assigned, assign it to the current participant if not assigned[preference]: result[i] = preference assigned[preference] = True break return result"},{"question":"Implement a function `romanToInt(s) or roman_to_int(s) or romanToNb(s)` (depending on the language) that converts a Roman numeral to an integer. The input string is guaranteed to be a valid Roman numeral in the range from 1 to 3999. Examples: ``` romanToInt(\'III\') === 3 romanToInt(\'IV\') === 4 romanToInt(\'IX\') === 9 romanToInt(\'LVIII\') === 58 romanToInt(\'MCMXCIV\') === 1994 ```","solution":"def roman_to_int(s): Converts a Roman numeral to an integer. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Sam is organizing a sports day event at school. He wants to arrange the students in a perfectly square formation on the field. However, not all classes have the same number of students, and some students are absent. Given the total number of students available, Sam needs to determine the size of the largest possible square formation he can make and how many students will be left out after forming the largest square. -----Input----- The input consists of a single integer N which is the total number of students available. -----Output----- Output two integers on a single line: the size of the largest square formation (i.e., the side length of the square) and the number of leftover students. -----Limits----- - 1 leq N leq 10^{4} -----Examples----- Sample Input: 10 Sample Output: 3 1 Sample Input: 25 Sample Output: 5 0","solution":"import math def largest_square_formation(N): Given the total number of students N, returns the size of the largest possible square formation and the number of leftover students. Parameters: - N (int): Total number of students Returns: - int: the side length of the largest square - int: the number of leftover students side_length = int(math.sqrt(N)) leftover_students = N - (side_length ** 2) return side_length, leftover_students"},{"question":"A company has developed a new sorting algorithm that sorts an array of N integers, however, the algorithm is only optimized when all the integers in the array are unique. When given an array that contains duplicates, the algorithm can only operate if the duplicates are removed first. Design a function that removes duplicates from an array and then returns the sorted array using the company’s new algorithm. Specifically, the function should first remove all duplicate elements, and then sort the array in non-decreasing order. Implement this function and ensure it runs efficiently for large arrays. Ensure your function works within the following constraints: -----Constraints----- - 1 leq N leq 10^5 - -10^9 leq A_i leq 10^9 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ldots A_N -----Output----- Print the sorted array in non-decreasing order with all duplicates removed. -----Sample Input----- 5 4 6 4 3 6 -----Sample Output----- 3 4 6","solution":"def remove_duplicates_and_sort(arr): Removes duplicates from the array and sorts it in non-decreasing order. Parameters: arr (list): A list of integers. Returns: list: A sorted list of integers with duplicates removed. # Use a set to remove duplicates unique_elements = set(arr) # Convert the set back to a list and sort it sorted_unique_elements = sorted(unique_elements) return sorted_unique_elements"},{"question":"Array Rotation An array rotation is the circular shifting of the elements of an array by a particular number of positions. For example, rotating the array [1, 2, 3, 4, 5] by 2 positions to the right results in [4, 5, 1, 2, 3]. In this problem, you are requested to rotate an array of integers by a given number of positions to the right. Input The input consists of a single test case of the following format: n d v_1 v_2 ... v_n n is the number of elements in the array, which is an integer satisfying 1 leq n leq 10^5. d is the number of positions to rotate the array, which is a non-negative integer satisfying 0 leq d leq 10^5. Each v_i (1 leq i leq n) is an element of the array, which is an integer satisfying -10^9 leq v_i leq 10^9. Output Output the array after rotating it by d positions to the right. Sample Input 1 5 2 1 2 3 4 5 Sample Output 1 4 5 1 2 3 Sample Input 2 6 3 10 20 30 40 50 60 Sample Output 2 40 50 60 10 20 30 Sample Input 3 8 0 5 8 12 16 23 42 51 60 Sample Output 3 5 8 12 16 23 42 51 60 Example Input 5 2 1 2 3 4 5 Output 4 5 1 2 3","solution":"def rotate_array(n, d, array): Rotate the array `array` of size `n` by `d` positions to the right. if n == 0: return [] d = d % n # handle cases where d > n return array[-d:] + array[:-d]"},{"question":"You\'re given a string s consisting of only lowercase letters. Your task is to check whether you can obtain a string containing each letter of the English alphabet at least once by removing exactly one substring from s. -----Input----- The input contains one line, the string s (1 le |s| le 10^5), the string consisting of only lowercase letters. -----Output----- Print \\"YES\\" if it is possible to obtain a string containing each letter of the alphabet at least once by removing exactly one substring from the original string. Otherwise, print \\"NO\\". -----Examples----- Input abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz Output YES Input abcdefghijklmnoqrstuvwxyz Output NO Input thequickbrownfoxjumpsoverthelazydog Output NO -----Note----- In the first example, by removing the substring \\"abcdefghijklmnopqrstuvwxyz\\", we are left with another copy of the alphabet which contains every letter at least once. In the second example, there is no way to form a string with all the letters of the alphabet by removing exactly one substring. In the third example, despite the input string already containing all the letters of the alphabet, removing any single substring leaves out some letters, therefore it\'s not possible to get a complete alphabet by removing exactly one substring.","solution":"def can_form_alphabet(s): Returns \\"YES\\" if it\'s possible to form a string containing each letter of the English alphabet at least once by removing exactly one substring from the original string. Otherwise, returns \\"NO\\". from collections import Counter if len(s) < 26: return \\"NO\\" alphabets = set(\'abcdefghijklmnopqrstuvwxyz\') counter = Counter(s) for char in alphabets: if counter[char] < 2: return \\"NO\\" return \\"YES\\""},{"question":"For a given array of distinct integers, write a program to find all possible subsets (the power set) and output them in lexicographic order. Constraints * The array will have no more than 10 distinct elements. * Each subset should be listed on a new line, with elements separated by a space. * The subsets should appear in lexicographic order of subset elements. Input An integer n representing the number of elements in the array, followed by n distinct integers. Output Print each subset in a line in lexicographic order. Examples Input 3 1 2 3 Output (empty subset) 1 1 2 1 2 3 1 3 2 2 3 3 Input 2 10 9 Output (empty subset) 9 9 10 10","solution":"from itertools import combinations def find_subsets(numbers): Finds all possible subsets of the array and returns them in a lexicographic order. numbers.sort() subsets = [] n = len(numbers) for i in range(n + 1): for comb in combinations(numbers, i): subsets.append(comb) return subsets def print_subsets(n, numbers): subsets = find_subsets(numbers) for subset in subsets: print(\\" \\".join(map(str, subset))) # Example usage: # n = 3 # numbers = [1, 2, 3] # print_subsets(n, numbers)"},{"question":"Given a collection of words and a list of word pairs, your task is to determine the maximum possible length of a sequence of unique words you can create such that each adjacent pair of words in the sequence is in the given list of word pairs. You need to write a program to accomplish the following: # Input The input consists of multiple datasets. Each dataset is given in the following format: ``` n m word1 word2 ... wordn worda1 wordb1 worda2 wordb2 ... wordam wordbm ``` - The first line contains two integers, n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 500), which indicate the number of words and the number of word pairs, respectively. - The following n lines each contain a word. - The following m lines each contain two words, each pair indicating that these two words can appear consecutively in the sequence. The end of the input is indicated when a line with two zeros is encountered. # Output For each dataset, output the maximum length of the unique word sequence on one line. # Example Input ``` 5 4 a b c d e a b b c c d d e 4 2 x y z w x y y z 0 0 ``` Output ``` 5 3 ``` # Explanation In the first dataset, the complete sequence can be \\"a b c d e\\" which has a length of 5. In the second dataset, the longest sequence considering the given pairs is \\"x y z\\" or \\"y z w\\", both having a length of 3.","solution":"def max_sequence_length(words, pairs): from collections import defaultdict n = len(words) adjacency_list = defaultdict(list) for a, b in pairs: adjacency_list[a].append(b) adjacency_list[b].append(a) max_len = 0 def dfs(word, visited): nonlocal max_len visited.add(word) current_len = len(visited) max_len = max(max_len, current_len) for neighbor in adjacency_list[word]: if neighbor not in visited: dfs(neighbor, visited) visited.remove(word) for word in words: dfs(word, set()) return max_len def perform_task(input_data): data = input_data.strip().split(\'n\') i = 0 results = [] while i < len(data): n, m = map(int, data[i].split()) if n == 0 and m == 0: break i += 1 words = [] for _ in range(n): words.append(data[i]) i += 1 pairs = [] for _ in range(m): a, b = data[i].split() pairs.append((a, b)) i += 1 results.append(max_sequence_length(words, pairs)) return results"},{"question":"A company uses a set of rules to determine the eligibility of their employees for a year-end bonus. Each employee\'s eligibility is based on three criteria: number of completed projects, average performance rating, and number of years with the company. The specific rules for eligibility are as follows: 1. An employee must have completed at least 5 projects. 2. The average performance rating of the employee must be 4.0 or higher. 3. The employee must have been with the company for at least 2 years. Write a program to determine if an employee is eligible for the year-end bonus based on their details. Constraints - The number of completed projects `p` is an integer such that 0 leq p leq 50 - The average performance rating `r` is a real number such that 0.0 leq r leq 5.0 - The number of years with the company `y` is an integer such that 0 leq y leq 50 Input The input consists of several datasets. Each dataset contains three values: `p` `r` `y` The input ends with EOF. The number of datasets is less than or equal to 100. Output For each dataset, print \\"Eligible\\" if the employee meets all the criteria for the bonus and \\"Not Eligible\\" if they do not. Example Input 6 4.5 3 4 4.2 5 10 3.9 6 5 4.0 2 Output Eligible Not Eligible Not Eligible Eligible","solution":"def check_eligibility(p, r, y): Checks eligibility for year-end bonus based on number of projects completed (p), average performance rating (r), and number of years with the company (y). Args: p (int): Number of completed projects. r (float): Average performance rating. y (int): Number of years with the company. Returns: str: \\"Eligible\\" if the employee meets all criteria, otherwise \\"Not Eligible\\". if p >= 5 and r >= 4.0 and y >= 2: return \\"Eligible\\" else: return \\"Not Eligible\\""},{"question":"Given an integer N not less than 2, calculate the Nth number in the Fibonacci sequence. Constraints * 2 leq N leq 50 Input Input is given from Standard Input in the following format: N Output Print an integer representing the Nth number in the Fibonacci sequence. Examples Input 2 Output 1 Input 10 Output 55","solution":"def fibonacci(N): Returns the Nth number in the Fibonacci sequence. if N == 0: return 0 elif N == 1: return 1 else: a, b = 0, 1 for _ in range(2, N): a, b = b, a + b return b + a"},{"question":"You are given a hallway with n doors lined up in a row, numbered from 1 to n. Each door is initially closed. There are also m keys available, each key opens a specific door and can only be used once. Your task is to determine the maximum number of doors you can open using the available keys. You are provided with a list of m integers where each integer indicates which door the corresponding key opens. Input The first line of input will contain two integers n and m (1 ≤ n, m ≤ 100). The second line of input will contain m integers where the i-th integer represents the door that the i-th key opens (1 ≤ door number ≤ n). Output Output a single integer, denoting the maximum number of doors you can open. Examples Input 5 3 1 2 2 Output 2 Input 4 4 1 2 3 4 Output 4 Note For the first sample, you have keys for doors 1, 2, and 2. You can open door 1 and door 2, so the maximum number of doors you can open is 2. For the second sample, you have a key for each door, so all doors can be opened and the maximum number of doors you can open is 4.","solution":"def max_doors_opened(n, m, keys): Determine the maximum number of doors that can be opened given a list of keys. Parameters: n (int): The number of doors. m (int): The number of keys. keys (list of int): List representing which door each key opens. Returns: int: The maximum number of doors that can be opened. return len(set(keys))"},{"question":"In an online bookstore, each book is identified by a unique integer ID. A user can add their favorite books to a wish list. However, the wish list should contain only unique books (no duplicates). You are required to implement a program that processes a sequence of book IDs and outputs the final list of unique IDs in the order they were added. -----Input----- The first line of the input contains an integer n (1 le n le 1000), the number of book IDs. The second line contains n integers b_1, b_2, ldots, b_n (1 le b_i le 1000), the sequence of book IDs. -----Output----- Output the final list of unique book IDs in the order they were added, each ID separated by a space. -----Examples----- Sample Input 1: 8 4 5 6 5 6 7 4 8 Sample Output 1: 4 5 6 7 8 Sample Input 2: 5 1 2 3 3 2 Sample Output 2: 1 2 3 Sample Input 3: 6 10 20 30 20 10 40 Sample Output 3: 10 20 30 40","solution":"def unique_book_ids(n, book_ids): Returns a list of unique book IDs in the order they were added. seen = set() unique_books = [] for id in book_ids: if id not in seen: seen.add(id) unique_books.append(id) return unique_books"},{"question":"Alex has a collection of n books placed on a shelf. Each book is assigned a height value, and the heights of the books are given in an order from left to right. Alex wants to partition the books into the minimum number of groups such that, within each group, the heights of the books strictly increase from left to right. Determine the minimum number of groups needed. Input The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of books on the shelf. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 100 000), where hi is the height of the i-th book from the left. Output Print a single integer — the minimum number of groups needed. Examples Input 5 3 1 4 1 5 Output 3 Input 4 4 3 2 1 Output 4 Input 6 1 3 2 4 3 5 Output 2 Note In the first example, Alex can group the books into three groups: [3], [1, 4], [1, 5]. The heights in each group strictly increase. In the second example, each book must be in its own group because the heights are in strictly decreasing order. In the third example, Alex can group the books into two groups: [1, 2, 3], [3, 4, 5]. The heights in each group strictly increase.","solution":"def min_groups(n, heights): if n == 1: return 1 groups = [] for height in heights: placed = False for group in groups: if group[-1] < height: group.append(height) placed = True break if not placed: groups.append([height]) return len(groups) # Example usage n = 6 heights = [1, 3, 2, 4, 3, 5] print(min_groups(n, heights)) # Output: 2"},{"question":"Sakura and Tomoyo are playing a game with a magical string S. The string contains only uppercase letters, and they want to see if they can transform it into a special form through a series of operations. Each operation consists of selecting any substring of S and rearranging its characters in any order. Sakura wants to know if it\'s possible to transform S into another string T by performing a series of operations. If it is possible, she would like to know the minimum number of operations needed. Write a function to determine if the transformation is possible and, if it is, return the minimum number of operations. Input The first line contains an integer q (1 ≤ q ≤ 10000) — the number of test cases. Each of the next q lines contains two strings S and T, both with lengths between 1 and 1000, inclusive, and consisting only of uppercase English letters. Output For each test case, output \\"YES\\" and the minimum number of operations needed if the transformation is possible, or \\"NO\\" if it is not possible. Examples Input 3 ABC DEF ABC CBA ABACD BACAD Output NO YES 1 YES 0 Note In the first case, you cannot rearrange the characters in a string of any length to turn \\"ABC\\" into \\"DEF\\". In the second case, the simplest transformation of \\"ABC\\" into \\"CBA\\" requires just one operation, rearranging \\"ABC\\" into \\"CBA\\". In the third case, \\"ABACD\\" is already the same as \\"BACAD\\" when rearranged without any operations; hence, it takes 0 operations.","solution":"def can_transform(S, T): Determines if S can be transformed into T and calculates the minimum number of operations. :param S: The source string :param T: The target string :return: Tuple (bool, int) with whether transformation is possible and minimum operations, if so # If sorted characters don\'t match, transformation is not possible if sorted(S) != sorted(T): return \\"NO\\" # If strings are identical, no operations needed if S == T: return \\"YES 0\\" # If strings have the same characters but different order # One operation is enough to rearrange S to T return \\"YES 1\\" def process_cases(cases): Processes multiple test cases. :param cases: List of tuples, each containing two strings (S, T) :return: List of results for each case results = [] for S, T in cases: results.append(can_transform(S, T)) return results"},{"question":"John has a string **S** consisting of lowercase English letters. He can perform the following operation on **S** any number of times: Select an index **i** (1 ≤ i < |S|) and swap the character at position **i** with the character at position **i + 1**. John wants to sort the string **S** in non-decreasing order using the minimum number of swaps. Can you help John? If it is not possible to sort the string, output -1. ------ Input Format ------ - The first line contains a single integer **T** — the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer **N** — the size of the string **S**. - The second line of each test case contains the string **S**. ------ Output Format ------ For each test case, output the minimum number of swaps required to sort the string **S**. If it is not possible to do so, output -1. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{3} - The sum of **N** over all test cases does not exceed 10^{5}. ------ Sample Input 1 ------ 3 4 dcba 5 aabcc 3 bca ------ Sample Output 1 ------ 6 0 2 ------ Explanation 1 ------ Test case 1: The given string is **dcba**. It can be sorted to **abcd** in 6 swaps by performing the following: - Swap characters at positions 3 and 4: resulting string **dcab** - Swap characters at positions 2 and 3: resulting string **dabc** - Swap characters at positions 1 and 2: resulting string **adbc** - Swap characters at positions 2 and 3: resulting string **abdc** - Swap characters at positions 3 and 4: resulting string **abcd**. Test case 2: The given string is **aabcc**, which is already sorted, so the answer is 0. Test case 3: The given string is **bca**. It can be sorted to **abc** in 2 swaps by performing: - Swap characters at positions 2 and 3: resulting string **bac** - Swap characters at positions 1 and 2: resulting string **abc**.","solution":"def min_swaps_to_sort_string(t, test_cases): def merge_sort_and_count(arr): if len(arr) <= 1: return arr, 0 mid = len(arr) // 2 left, left_count = merge_sort_and_count(arr[:mid]) right, right_count = merge_sort_and_count(arr[mid:]) merged, merge_count = merge_and_count_split_inv(left, right) return merged, left_count + right_count + merge_count def merge_and_count_split_inv(left, right): merged = [] i = j = 0 inversions = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) j += 1 inversions += len(left) - i while i < len(left): merged.append(left[i]) i += 1 while j < len(right): merged.append(right[j]) j += 1 return merged, inversions results = [] for n, s in test_cases: sorted_s = \'\'.join(sorted(s)) if sorted_s != s: _, inversions = merge_sort_and_count(list(s)) results.append(inversions) else: results.append(0) return results"},{"question":"You are managing a warehouse and need to move packages between different locations. The warehouse consists of N locations, represented as nodes in a graph, and there are M bidirectional paths between these locations, represented as edges. Each edge has a weight associated with it, representing the time it takes to travel between the two locations connected by that edge. Your goal is to find the shortest path from a starting location S to a target location T. ------ Input ------ The first line of the input contains two integers N and M denoting the number of locations and the number of paths, respectively. The second line contins two integers S and T denoting the starting location and the target location. The next M lines contain three space-separated integers u, v, and w denoting a bidirectional path between locations u and v with a travel time of w. ------ Output ------ Print a single line containing one integer — the shortest time to travel from location S to location T. If there is no path from S to T, output -1. ------ Constraints ------ 1 ≤ N ≤ 1,000 1 ≤ M ≤ 10,000 1 ≤ u, v ≤ N 1 ≤ w ≤ 1,000 1 ≤ S, T ≤ N ------ Sample Input 1 ------ 5 6 1 5 1 2 4 1 3 2 2 3 5 2 4 10 3 4 3 4 5 7 ------ Sample Output 1 ------ 12 ----- explanation 1 ------ The shortest path from location 1 to location 5 can be found as follows: 1 -> 3 -> 4 -> 5, which takes a total time of 2 + 3 + 7 = 12 units. Note: You can use Dijkstra\'s algorithm or any other suitable shortest path algorithm to solve this problem.","solution":"import heapq def dijkstra(N, M, S, T, edges): graph = [[] for _ in range(N + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) pq = [(0, S)] distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[S] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[T] if distances[T] != float(\'inf\') else -1 def find_shortest_path(N, M, S, T, edges): return dijkstra(N, M, S, T, edges)"},{"question":"A company warehouse is stacked with boxes placed in a rectangular grid. Each box is either filled with goods or empty. The company wants to optimize the storage usage by finding the largest rectangular subgrid containing only full boxes. Write an algorithm to determine the area of the largest rectangle that contains only full boxes. Example 1: Input: warehouse = [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] Output: 6 Explanation: The largest rectangle containing only full boxes (1s) has an area of 6, formed by the rectangle: [ [1, 1], [1, 1], [1, 1] ] Example 2: Input: warehouse = [ [0, 0, 0, 0], [0, 0, 1, 1], [1, 1, 1, 1], [0, 1, 1, 1] ] Output: 6 Explanation: The largest rectangle containing only full boxes (1s) has an area of 6, formed by the rectangle: [ [1, 1, 1], [1, 1, 1] ] Your Task: You don\'t need to read input or print anything. Complete the function largestRectangleArea(grid) that takes the warehouse grid as input and returns the area of the largest rectangular subgrid containing only full boxes. Expected time complexity: O(m*n) Expected space complexity: O(n), where m and n are the number of rows and columns in the input grid. Constraints: 1. 1 <= number of rows, columns <= 200 2. All cell values in the grid are either 0 (empty box) or 1 (full box).","solution":"def largestRectangleArea(warehouse): if not warehouse: return 0 m, n = len(warehouse), len(warehouse[0]) max_area = 0 heights = [0] * (n + 1) for row in warehouse: for i in range(n): heights[i] = heights[i] + 1 if row[i] == 1 else 0 stack = [-1] for i in range(n + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Given a list of integers nums, you are to identify the length of the longest subsequence that is both increasing and has the same common difference (the common difference of an arithmetic sequence). Additionally, the subsequence must be strictly increasing. Your task is to write a function to determine the length of the longest arithmetic subsequence in the given list of integers. ------ Input ------ The input consists of two lines: - The first line contains an integer N, the number of integers in the list. - The second line contains N space-separated integers representing the list nums. ------ Output ------ Output a single integer representing the length of the longest arithmetic subsequence. ------ Constraints ------ 1 ≤ N ≤ 1000 -10^4 ≤ nums[i] ≤ 10^4 ------ Sample Input 1 ------ 7 3 6 9 12 15 1 4 ------ Sample Output 1 ------ 5 ------ Explanation 1 ------ The longest arithmetic subsequence is [3, 6, 9, 12, 15] which has a common difference of 3 and is strictly increasing. The length is 5. ------ Sample Input 2 ------ 5 1 5 9 13 17 ------ Sample Output 2 ------ 5 ------ Explanation 2 ------ The longest arithmetic subsequence is [1, 5, 9, 13, 17] which has a common difference of 4 and is strictly increasing. The length is 5.","solution":"def longest_arithmetic_subsequence(nums): from collections import defaultdict if not nums: return 0 n = len(nums) dp = [defaultdict(int) for _ in range(n)] max_length = 1 for i in range(n): for j in range(i): diff = nums[i] - nums[j] if diff != 0: # Ensure it\'s strictly increasing dp[i][diff] = dp[j][diff] + 1 max_length = max(max_length, dp[i][diff] + 1) return max_length"},{"question":"The Competitive Chef is organizing a cooking competition and needs your help planning the schedule. The competition involves a series of unique cooking events, each with a specific start and end time. The goal is to schedule the maximum number of non-overlapping events to ensure a smooth and diverse competition. You are given n events with their respective start and end times. Each event is represented by its start time s_i and end time e_i. The chef wants to select the maximum number of non-overlapping events so the competition runs efficiently over the given period. Input The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of events. Each of the next n lines contains two integers s_i and e_i (1 ≤ s_i < e_i ≤ 10^9) — the start and end times of the i-th event. Output Print a single integer — the maximum number of non-overlapping events that can be scheduled. Examples Input 5 1 3 2 5 3 9 6 8 8 10 Output 3 Input 3 5 7 1 3 4 6 Output 2 Note In the first example, the optimal set of non-overlapping events are: (1, 3), (6, 8), and (8, 10). In the second example, the optimal set of non-overlapping events are: (1, 3) and (4, 6).","solution":"def max_non_overlapping_events(events): Returns the maximum number of non-overlapping events scheduled from the given list of events represented by their start and end times. # Sort events by their end times (primary) and start times (secondary) events.sort(key=lambda x: (x[1], x[0])) count = 0 current_end = 0 for start, end in events: if start >= current_end: count += 1 current_end = end return count"},{"question":"Generate and Validate a Magic Square # Problem Statement A Magic Square is a n x n grid filled with distinct integer numbers in the range from 1 to n^2 such that each cell holds a unique number and all rows, all columns, and both main diagonals sum to the same constant. Given an integer n (where 2 <= n <= 10), check if the provided n x n grid is a Magic Square. If the grid is a Magic Square, return \\"YES\\". Otherwise, return \\"NO\\". # Input Format The first line contains an integer n. The next n lines contain n space-separated integers, representing the grid. # Output Format Print \\"YES\\" if the grid forms a Magic Square. Otherwise, print \\"NO\\". # Example Sample Input 1 ``` 3 8 1 6 3 5 7 4 9 2 ``` Sample Output 1 ``` YES ``` Sample Input 2 ``` 3 8 1 6 3 7 5 4 9 2 ``` Sample Output 2 ``` NO ``` # Constraints - The input grid consists of integers ranging from 1 to n^2 with no duplicates. - 2 ≤ n ≤ 10","solution":"def is_magic_square(n, grid): Checks if the provided n x n grid is a Magic Square. # Calculate the magic constant magic_constant = n * (n**2 + 1) // 2 # Check rows and columns sum for row in grid: if sum(row) != magic_constant: return \\"NO\\" for col in range(n): if sum(grid[row][col] for row in range(n)) != magic_constant: return \\"NO\\" # Check main diagonals sum if sum(grid[i][i] for i in range(n)) != magic_constant: return \\"NO\\" if sum(grid[i][n - i - 1] for i in range(n)) != magic_constant: return \\"NO\\" return \\"YES\\""},{"question":"You\'re given a list of n integers. Your task is to rearrange them to form a new list where the absolute difference between any two consecutive integers is minimized. If there are multiple correct answers, output any of them. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of integers. The second line contains n space-separated integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9). Output Print the rearranged list where the absolute difference between any two consecutive integers is minimized. If there are multiple correct answers, output any of them. Example Input: 5 4 2 1 3 10 Output: 1 2 3 4 10 Input: 3 1000000000 -1000000000 0 Output: -1000000000 0 1000000000 Note In the first example, one possible rearranged list is [1, 2, 3, 4, 10], where the absolute differences are minimized. In the second example, one possible rearrangement is [-1000000000, 0, 1000000000], where the absolute differences are also minimized.","solution":"def rearrange_min_difference(arr): Rearrange the list to minimize the absolute difference between any consecutive integers. Parameters: arr (List[int]): A list of integers. Returns: List[int]: The rearranged list. # Sort the array arr.sort() return arr"},{"question":"Maria loves to play a special math game during her free time. In this game, she starts with an integer n and repeatedly applies the following operation until n becomes a single-digit number: she replaces n with the sum of its digits. The goal of the game is to find the final single-digit number she ends up with. Given an integer n, write a program to determine the final single-digit number after repeatedly replacing n with the sum of its digits. Input The input consists of a single integer n (0 ≤ n ≤ 10^9). Output Output a single integer, the final single-digit number. Example Input 9875 Output 2 Input 12345 Output 6","solution":"def final_single_digit(n): Returns the final single-digit number obtained by repeatedly summing the digits of n until a single-digit number is achieved. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"Write a program to determine if a given list of strings contains any anagrams. Print \\"YES\\" if there is at least one pair of anagrams within the list, otherwise print \\"NO\\". Constraints * 1 ≤ length of each string ≤ 100 * 1 ≤ number of strings ≤ 1,000 Input Input consists of several data sets. In the first line, the number of data sets, N, is given. Then, N blocks follow. Each block consists of two lines: the first line contains an integer M, representing the number of strings in the current data set, and the second line contains M strings separated by a single space. Output For each data set, print \\"YES\\" or \\"NO\\". Example Input 2 4 listen silent apple banana 3 cat act dog Output YES YES","solution":"def contains_anagrams(data_sets): Determines if there are any anagrams in each data set of strings. Parameters: data_sets (list of list of str): A list containing lists of strings representing each data set. Returns: list of str: \'YES\' or \'NO\' for each data set indicating if it contains anagrams. results = [] for data_set in data_sets: sorted_words = [\'\'.join(sorted(word)) for word in data_set] if len(sorted_words) != len(set(sorted_words)): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input_output(input_str): input_lines = input_str.strip().split(\'n\') num_data_sets = int(input_lines[0]) index = 1 data_sets = [] for _ in range(num_data_sets): M = int(input_lines[index]) index += 1 data_set = input_lines[index].split() data_sets.append(data_set) index += 1 results = contains_anagrams(data_sets) for result in results: print(result) # Example usage: # input_str = \\"2n4nlisten silent apple bananan3ncat act dog\\" # process_input_output(input_str)"},{"question":"Two friends, Alice and Bob, play a game with a string S consisting of lowercase letters. They take turns removing characters from the string, and the game ends when the string becomes empty. Alice always goes first, followed by Bob, and they continue alternately. On each turn, a player must choose and remove the lexicographically smallest character still present in the string. The winner is the player who removes the character \'a\'. Write a function to determine the winner of the game. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single string S. -----Output:----- For each test case, output in a single line \\"Alice\\" if Alice wins, or \\"Bob\\" if Bob wins. -----Constraints----- - 1 leq T leq 10 - 1 leq |S| leq 10^5 -----Sample Input:----- 2 baca xyz -----Sample Output:----- Alice Bob -----Explanation:----- For the first test case: - Alice removes \'a\' in her first turn because it is the lexicographically smallest character. - So, Alice wins. For the second test case: - Bob removes \'a\' (if it existed) but since no \'a\' is present in the string, no one can actually remove \'a\', but, given any string, it implies Alice wins as \'a\' does not exist. - Hence as the game ends without \'a\' to remove indicating implicit win of Bob","solution":"def determine_winner(T, test_cases): Determines the winner of the game for each test case. Alice wins if she removes the character \'a\', otherwise Bob wins. :param T: Number of test cases :param test_cases: List of strings (each representing a test case) :return: List of winners for each test case results = [] for S in test_cases: if \'a\' in S: results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results"},{"question":"Alice has a string consisting of lowercase English letters. She wants to select some substrings (not necessarily contiguous) from her string and concatenate them to form a new string that is a palindrome. Determine the length of the longest palindromic string Alice can form by selecting substrings from her original string. ------ Input ------ A single line containing the string s, with length 1 ≤ |s| ≤ 10^{6}. ------ Output ------ A single line containing the length of the longest possible palindromic string that Alice can form. ------ Constraints ------ The string contains only lowercase English letters. ----- Sample Input 1 ------ abacb ----- Sample Output 1 ------ 5","solution":"def longest_palindromic_length(s): Determines the length of the longest palindromic string that can be formed from the input string by selecting substrings. Args: s (str): The input string consisting of lowercase English letters. Returns: int: The length of the longest possible palindromic string. from collections import Counter # Count the occurrences of each character in the input string char_count = Counter(s) # Initialize the length of the longest palindromic string palindromic_length = 0 odd_found = False # Iterate through the character count for count in char_count.values(): # If the count is even, it can fully contribute to the palindromic length if count % 2 == 0: palindromic_length += count else: # If the count is odd, contribute the even part and mark that an odd was found palindromic_length += count - 1 odd_found = True # If there was any character with an odd count, one such character can be placed in the middle if odd_found: palindromic_length += 1 return palindromic_length"},{"question":"A digital competition requires participants to unlock a secure vault by solving a sequence of challenges. Each participant needs to crack a custom sequence of lock codes that follow specific constraints. Your task is to write a program to determine whether a given sequence can be unlocked. # Problem Description A lock sequence is represented by a list of strings, each string consisting of digits from \'0\' to \'9\'. The lock can be unlocked by following these rules: 1. A sequence can be unlocked if each string in the sequence is a permutation of the digits of all the other strings in the sequence. 2. Each string in the sequence must have exactly the same digits but can be in any order. # Input The input consists of multiple data sets. The first line contains an integer `T`, the number of test cases. Each test case is provided as follows: - The first line of each test case contains an integer `N`, the number of strings in the sequence. - The next `N` lines contain one string each, representing the lock sequence. # Output For each test case, output \\"Unlockable\\" if the sequence can be unlocked, or \\"Not Unlockable\\" if it cannot be unlocked. # Constraints - `1 <= T <= 100` - `2 <= N <= 100` - Each string contains between `1` and `50` digits. # Example Input ``` 3 3 123 321 312 2 111 121 4 98765 56789 87956 68597 ``` Output ``` Unlockable Not Unlockable Unlockable ``` # Explanation 1. In the first case, all strings are permutations of each other, thus the sequence is \\"Unlockable\\". 2. In the second case, the strings \\"111\\" and \\"121\\" are not permutations of each other, so the sequence is \\"Not Unlockable\\". 3. In the third case, all strings are permutations of \\"98765\\", thus the sequence is \\"Unlockable\\". # Considerations - Analyze the complexity of your solution to ensure it can handle the upper limits of input size. - Think about efficient ways to compare permutations or character counts between strings. This task will test your ability to handle strings and implement efficient comparison methods. Good luck!","solution":"def is_unlockable_sequence(N, sequence): Returns whether the given sequence of strings is unlockable. A sequence is unlockable if all strings are permutations of each other. :param N: Number of strings in the sequence :param sequence: List of strings representing the lock sequence :return: \\"Unlockable\\" if the sequence can be unlocked else \\"Not Unlockable\\" # Sort the characters in each string and compare them sorted_sequence = [\'\'.join(sorted(s)) for s in sequence] # Check if all sorted strings are the same if all(s == sorted_sequence[0] for s in sorted_sequence): return \\"Unlockable\\" return \\"Not Unlockable\\" def process_input(input_data): Process the input data into required test cases and strings. :param input_data: List of strings representing the input :return: List of tuples that represent test cases lines = iter(input_data) T = int(next(lines)) test_cases = [] for _ in range(T): N = int(next(lines)) sequence = [next(lines).strip() for _ in range(N)] test_cases.append((N, sequence)) return test_cases def unlock_sequences(input_data): For each test case, determine if the lock sequence is unlockable. :param input_data: List of strings representing the input :return: List of results for each test case test_cases = process_input(input_data) results = [] for N, sequence in test_cases: result = is_unlockable_sequence(N, sequence) results.append(result) return results"},{"question":"Write a function that takes an integer array as input and returns the product of all the elements except the first occurrence of the smallest integer. If the array contains only one element, return that element. -----Input----- - An integer array `arr` where the length of the array is between 1 and 1000 inclusive. -----Output----- - An integer representing the product of all elements except the first occurrence of the smallest integer in the array. -----Example----- Input [1, 2, 3, 4] Output 24 Input [0, 4, 2, 3] Output 24 Input [1] Output 1","solution":"def product_except_first_min(arr): Returns the product of all elements except the first occurrence of the smallest integer in the array. If the array contains only one element, return that element. if len(arr) == 1: return arr[0] min_val = min(arr) min_index = arr.index(min_val) product = 1 for i in range(len(arr)): if i != min_index: product *= arr[i] return product"},{"question":"You are given a series of integers that represent the heights of a stack of boxes. The boxes must be stacked in such a way that no box ends up stacked on top of a smaller box, and each box can support an equal or smaller weight box on top of it. Write a function `stack_boxes` that takes a list of integers representing the heights of the boxes and returns the maximum possible height of the box stack that can be constructed by stacking the boxes according to the rules. # Function Signature ```python def stack_boxes(heights: List[int]) -> int: pass ``` # Input - heights: A list of integers `[h1, h2, ..., hn]` where `1 <= hi <= 10^9` and `1 <= n <= 10^4`. # Output - Returns a single integer denoting the maximum height of the stack. # Example ```python stack_boxes([4, 3, 2, 1]) # Returns 10 (the stack is 4 + 3 + 2 + 1) stack_boxes([1, 2, 3, 4, 5, 6]) # Returns 21 (the stack is 6 + 5 + 4 + 3 + 2 + 1) stack_boxes([5, 8, 1, 2, 9]) # Returns 24 (the stack is 9 + 8 + 5 + 2) ``` # Note - The stack can be built in descending height order, and the height of the stack is the sum of the heights of the boxes used. - The goal is to maximize the total height of the stack while adhering to the stacking rules.","solution":"from typing import List def stack_boxes(heights: List[int]) -> int: Returns the maximum possible height of the box stack that can be constructed by stacking the boxes according to the rules. if not heights: return 0 # Sort heights in descending order heights.sort(reverse=True) # The maximum height of the stack is the sum of the sorted heights max_height = sum(heights) return max_height"},{"question":"Given a binary tree, the task is to find the left view of the binary tree. The left view of a binary tree is the set of nodes visible when the tree is viewed from the left side. Example 1: Input: ``` 1 / 2 3 / / 4 5 6 7 8 ``` Output: [1, 2, 4, 8] Explanation: The left view of the tree is 1, 2, 4, 8. Example 2: Input: ``` 1 2 3 ``` Output: [1, 2, 3] Explanation: The left view of the tree is 1, 2, 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `leftView()` which takes the root node of the binary tree as input and returns an array containing elements of the left view. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= Number of nodes <= 10^5 0 <= value of nodes <= 10^5","solution":"class Node: def __init__(self, key): self.data = key self.left = None self.right = None def leftViewUtil(current_node, current_level, max_level, view): Utility function to find the left view of the binary tree. if current_node is None: return # If this is the first node of its level if max_level[0] < current_level: view.append(current_node.data) max_level[0] = current_level # Recur for the left and right subtree leftViewUtil(current_node.left, current_level + 1, max_level, view) leftViewUtil(current_node.right, current_level + 1, max_level, view) def leftView(root): Function to return the left view of the binary tree. view = [] leftViewUtil(root, 1, [0], view) return view"},{"question":"Write a function that takes a list of integers and returns a new list containing only the elements that are greater than the average of the original list. Example: ``` filter_above_average([1, 2, 3, 4, 5]); // should return [4, 5] filter_above_average([10, 20, 30, 40, 50]); // should return [40, 50] filter_above_average([5, 15, 25, 35]); // should return [25, 35] ```","solution":"def filter_above_average(nums): Returns a new list containing only the elements that are greater than the average of the original list. if not nums: return [] average = sum(nums) / len(nums) return [num for num in nums if num > average]"},{"question":"Devu, while playing with strings this time, came up with another interesting question that he could not solve. Can you please help him? Given a string s consisting of only lowercase alphabets, determine if it is possible to rearrange the characters in the string to form a palindrome. If it is possible, also give any possible way of valid rearrangement. A string is a palindrome if it reads the same backward as forward. -----Input----- The input will be a single line containing a string s (1 ≤ |s| ≤ 10^5). -----Output----- Print \\"YES\\" (without the quotes) if it is possible to rearrange the characters of the string to form a palindrome. Otherwise, print \\"NO\\" (without the quotes). If the rearrangement is possible, print a single line which is any valid rearrangement of the characters of the string that forms a palindrome. -----Examples----- Input aaabb Output YES ababa Input abc Output NO Input aab Output YES aba","solution":"def can_form_palindrome(s): from collections import Counter # Count frequency of each character char_count = Counter(s) # Check the number of odd frequency characters odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if there is at most one odd character count if odd_count > 1: return (\\"NO\\", \\"\\") # Reconstruct the palindrome if possible half_palindrome = [] mid_char = \\"\\" for char, count in char_count.items(): if count % 2 != 0: mid_char = char half_palindrome.extend(char * (count // 2)) half_palindrome_str = \'\'.join(half_palindrome) reversed_half_palindrome_str = half_palindrome_str[::-1] palindrome = half_palindrome_str + mid_char + reversed_half_palindrome_str return (\\"YES\\", palindrome) def main(s): result, palindrome = can_form_palindrome(s) print(result) if result == \\"YES\\": print(palindrome)"},{"question":"You are given an array of integers and you have to perform Q operations on this array. Each operation is specified by three integers: L, R, and X. For each operation, you need to increment each element in the subarray A[L....R] by X. After all operations are applied, you are required to find the maximum and minimum elements in the updated array. Input: The first line contains two integers N and Q, the size of the array and the number of operations. The second line contains N integers representing the elements of the array A. The next Q lines contain three integers L, R, and X describing the operation. Output: Print two integers, the maximum and minimum values in the final updated array. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ A[i] ≤ 10^9, where 1 ≤ i ≤ N 1 ≤ L ≤ R ≤ N 1 ≤ X ≤ 10^9 Sample Input: 5 3 1 2 3 4 5 1 3 2 2 5 1 3 4 3 Sample Output: 8 3 Explanation: After the first operation, the array becomes: [3, 4, 5, 4, 5] After the second operation, the array becomes: [3, 5, 6, 5, 6] After the third operation, the array becomes: [3, 5, 9, 8, 6] The maximum value is 9 and the minimum value is 3.","solution":"def apply_operations(n, q, array, operations): Apply the given operations on the array and return the max and min values. # Create a difference array of the same length and initialize with zeros diff = [0] * (n + 1) for L, R, X in operations: diff[L-1] += X if R < n: diff[R] -= X # Apply the difference array to get the final array values updated_array = [0] * n updated_array[0] = array[0] + diff[0] for i in range(1, n): diff[i] += diff[i-1] updated_array[i] = array[i] + diff[i] return max(updated_array), min(updated_array)"},{"question":"Tom recently started a company selling various kinds of mythical creatures. Each type of creature has a specific `selling value`, and Tom decided to sort and label these creatures from 1 to `n` based on their selling values, making the creature with the least value having the label 1, and so on. Tom often has clients asking for creatures with very specific selling values, and since this became quite frequent, Tom decided to create an automated system to handle these requests. To make this system more efficient, he has precomputed the prefix sums of the selling values of the creatures where the prefix sum at index `i` is the sum of the selling values of the first `i` creatures. Given the prefix sums and a series of queries, your task is to determine for each query the sum of the selling values of the creatures between two given indices `l` and `r` (inclusive). Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of different creatures in Tom\'s company. The second line contains n integers `p1, p2, ..., pn` (1 ≤ pi ≤ 10^9), where `pi` denotes the prefix sum of the first `i` selling values sorted in increasing order. The third line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the next q lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ n) — indices for which you need to compute the sum of the selling values between `l` and `r`. Output For each query, output the sum of the selling values between the given indices `l` and `r`. Examples Input 5 1 3 6 10 15 3 1 3 2 4 1 5 Output 6 9 15 Note The prefix sums for this example can be derived from the selling values, for instance: Selling values are [1, 2, 3, 4, 5]. Prefix sums are [1, 1+2=3, 1+2+3=6, 1+2+3+4=10, 1+2+3+4+5=15]. For the first query (l=1, r=3), the sum of the selling values between indices 1 and 3 is 1+2+3 = 6. For the second query (l=2, r=4), the sum of the selling values between indices 2 and 4 is 2+3+4 = 9. For the third query (l=1, r=5), the sum of the selling values between indices 1 and 5 is 1+2+3+4+5 = 15.","solution":"def creature_sum_queries(n, prefix_sums, queries): results = [] for l, r in queries: if l == 1: results.append(prefix_sums[r-1]) else: results.append(prefix_sums[r-1] - prefix_sums[l-2]) return results"},{"question":"There is a square grid with **N** rows and **N** columns. You start at the top-left corner (0, 0) and you want to reach the bottom-right corner (N-1, N-1). However, some cells may contain obstacles, and you can\'t move through these cells. You can only move either right or down from a cell. You need to find the number of distinct paths from the top-left to the bottom-right avoiding obstacles. Write a function to compute the number of such distinct paths. # Input The first line contains a single integer N - the size of the grid (both rows and columns). The next N lines each contain N space-separated integers (either 0 or 1). A 0 indicates an empty cell that can be walked through, and a 1 indicates an obstacle. # Output Output a single integer - the number of distinct paths from the top-left to the bottom-right corner. If there is no such path, return 0. # Constraints 1 ≤ N ≤ 1000 0 ≤ grid[i][j] ≤ 1 # Sample Input 1 ```plaintext 3 0 0 0 0 1 0 0 0 0 ``` # Sample Output 1 ```plaintext 2 ``` # Explanation The two distinct paths from (0, 0) to (2, 2) avoiding obstacles are: 1. (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) 2. (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) # Sample Input 2 ```plaintext 3 0 0 0 1 1 0 0 0 0 ``` # Sample Output 2 ```plaintext 1 ``` # Explanation The only distinct path from (0, 0) to (2, 2) avoiding obstacles is: 1. (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) # Sample Input 3 ```plaintext 2 0 1 1 0 ``` # Sample Output 3 ```plaintext 0 ``` # Explanation There is no valid path from (0, 0) to (1, 1) because all possible routes are blocked by obstacles.","solution":"def distinct_paths(N, grid): if grid[0][0] == 1 or grid[N-1][N-1] == 1: return 0 dp = [[0] * N for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][N-1]"},{"question":"A company has a network of computers connected by direct communication links. Each computer can directly communicate with some set of other computers. The company wants to know if all the computers in the network can communicate with each other either directly or indirectly. Given: - n: the number of computers (1 ≤ n ≤ 10^5). - m: the number of direct communication links (0 ≤ m ≤ 10^5). - m pairs (u, v) where 1 ≤ u, v ≤ n representing a direct communication link between computers u and v. Your task is to determine if the entire network is connected. Input: - The first line contains two integers, n and m. - The next m lines each contain two integers, u and v, indicating a direct link between computer u and computer v. Output: - Output \\"YES\\" if all computers can communicate with each other, otherwise output \\"NO\\". Example Input: 5 4 1 2 2 3 3 4 4 5 Example Output: YES Example Input: 5 3 1 2 2 3 4 5 Example Output: NO","solution":"def is_network_connected(n, m, links): Determines if the entire network of computers is connected. Parameters: n (int): Number of computers m (int): Number of direct communication links links (list of tuples): List of communication links (u, v) Returns: str: \'YES\' if all computers can communicate, otherwise \'NO\' from collections import defaultdict, deque if n == 1: return \\"YES\\" # Graph representation using adjacency list graph = defaultdict(list) for u, v in links: graph[u].append(v) graph[v].append(u) # Breadth-First Search (BFS) to check connectivity visited = set() def bfs(start): queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) # Start BFS from the first node (1) bfs(1) # Check if all nodes are visited return \\"YES\\" if len(visited) == n else \\"NO\\""},{"question":"Write a function that takes a single integer `n` as input and returns the smallest positive integer that requires exactly `n` swaps to sort in ascending order. A swap is defined as exchanging the positions of any two elements in the integer\'s decimal representation. -----Constraints----- - 1 leq n leq 10^5 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: n -----Output----- Print the smallest positive integer that requires exactly `n` swaps to sort the digits in ascending order. -----Sample Input----- 1 -----Sample Output----- 21 In this case, to sort `21` in ascending order, one swap is required (2 and 1). Therefore, the output is 21.","solution":"def smallest_integer_with_n_swaps(n): Returns the smallest positive integer that requires exactly n swaps to sort in ascending order. if n == 1: return 21 result = \'1\' + \'0\' * (n - 1) + \'2\' return int(result)"},{"question":"Write a function `distribute_apples` that calculates how many apples each student gets and how many apples are left over. Given a number of apples and students, the function should take two integers `apples` and `students` as input and return a tuple containing two integers: the number of apples each student gets and the number of apples left over. Examples: ```python distribute_apples(10, 3) -> (3, 1) distribute_apples(20, 5) -> (4, 0) distribute_apples(0, 4) -> (0, 0) distribute_apples(23, 7) -> (3, 2) distribute_apples(15, 0) -> \\"Invalid input: number of students cannot be zero\\" ``` Write your function so it handles integer division and modulo operations to determine the correct output. Ensure to handle the edge case where the number of students is zero appropriately.","solution":"def distribute_apples(apples, students): Distributes apples among students and calculates the remainder. Parameters: apples (int): The number of apples. students (int): The number of students. Returns: tuple or str: A tuple containing two integers (apples_per_student, remainder) or a string message if the input is invalid. if students == 0: return \\"Invalid input: number of students cannot be zero\\" apples_per_student = apples // students remainder = apples % students return (apples_per_student, remainder)"},{"question":"Dear Coder, Veritas dicitur, scientia potentia est. Experimentum est via. Consider the following sequence of events. Loci sunt ordinati et numerari possunt. Sequitur ratio. Omne principium habet causam, et ipso facto, finem quoque. Rp: I Sine sine triangulo II Canis, felix, avisque III Dies Solis, Lunae, Martis V Hera, Athena, Aphrodite III Fibonacci, duplicia Pondera diligenter, et rege ingenium. Stat veritas. -----Input----- The first line of input contains two space-separated integers n and m (0 ≤ n, m ≤ 100). -----Output----- Print a single integer. -----Examples----- Input 3 5 Output 8","solution":"def fibonacci(n): Returns the n-th Fibonacci number. # Using dynamic programming approach to save previous values and avoid redundant calculations. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b # `m` is not used in the Fibonacci calculation based on problem description, # Assuming we need only the Fibonacci number at position `n`. def main(n, m): return fibonacci(n)"},{"question":"Chef is planning to buy a certain number of items for his restaurant. He can purchase these items in packs of varying quantities. There are two stores in Chefland, each selling the items in packs, but the pack sizes differ. The first store sells the items in packs of K units each, and the second store sells the items in packs of L units each. Both stores sell each pack for the same price per unit. Chef wants to know the minimum number of packs he must buy to get at least N items from each store combined. Given the values N, K, and L, compute the minimum number of packs Chef must buy from the two stores to get at least N items in total. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line of input containing three space-separated integers N, K, and L. ------ Output Format ------ For each test case, output the minimum number of packs Chef must buy to get at least N items in total. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N, K, L ≤ 100 ----- Sample Input 1 ------ 4 10 3 2 15 4 5 7 5 3 8 6 7 ----- Sample Output 1 ------ 4 3 2 2 ----- Explanation 1 ------ Test case 1: With N=10, K=3, L=2, Chef needs a minimum of 4 packs (3 packs from first store and 1 pack from second store, as 3*3 + 1*2 = 11). Test case 2: With N=15, K=4, L=5, Chef needs a minimum of 3 packs (2 packs from first store and 1 pack from second store, as 2*4 + 1*5 = 13). Test case 3: With N=7, K=5, L=3, Chef needs a minimum of 2 packs (1 pack from each store, as 1*5 + 1*3 = 8). Test case 4: With N=8, K=6, L=7, Chef needs a minimum of 2 packs (1 pack from each store, as 1*6 + 1*7 = 13).","solution":"def minimum_packs(T, test_cases): results = [] for case in test_cases: N, K, L = case min_packs = float(\'inf\') for x in range(N // K + 1): y = (N - x * K + L - 1) // L if y >= 0: min_packs = min(min_packs, x + y) results.append(min_packs) return results"},{"question":"Design and implement a function to determine the longest consecutive subsequence of increasing integers in an array. You are given an array of integers. Your task is to find the length of the longest consecutive subsequence of increasing integers. The subsequence elements are required to be consecutive in the array, not just in value. ---- Input ---- The first line contains T, the number of test cases. Each of the following T lines contains an integer N, followed by N integers representing the array. ---- Output ---- For each test case, output a single line containing the length of the longest consecutive subsequence of increasing integers in the given array. ---- Constraints ---- 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 -10^6 ≤ array[i] ≤ 10^6 ---- Sample Input 1 ---- 2 6 1 2 2 3 5 4 5 10 20 30 40 50 ---- Sample Output 1 ---- 3 5","solution":"def longest_consecutive_subsequence_length(arr): Returns the length of the longest consecutive subsequence of increasing integers. if not arr: return 0 max_len = 1 current_len = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for t in test_cases: N, array = t[0], t[1:] results.append(longest_consecutive_subsequence_length(array)) return results # Example usage: test_cases = [ (6, 1, 2, 2, 3, 5, 4), (5, 10, 20, 30, 40, 50) ] results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are organizing a tournament where players compete in a series of matches. The tournament consists of several rounds, and in each round, players are paired up to compete against each other. The winners of each match proceed to the next round, and the losers are eliminated. If there is an odd number of players in a round, one player gets a bye and automatically advances to the next round. Given the list of players and the results of their matches in each round, determine the order in which players are eliminated until only one player remains. The tournament results are provided as a list of matches for each round, where each match is represented as a pair (winner, loser). Input The input consists of: - An integer n, the number of players. - A list of strings, the names of the players. - A list of lists, where each inner list represents the results of a round. Each inner list contains pairs of strings (winner, loser), representing the result of each match in that round. Output Print the names of players in the order they are eliminated. If a player gets a bye in a round, they should not be counted as eliminated in that round. Constraints 2 ≤ n ≤ 100 Each player\'s name is a unique non-empty string containing only alphabetic characters. Example Input 8 [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\", \\"Eve\\", \\"Frank\\", \\"Grace\\", \\"Helen\\"] [ [(\\"Alice\\", \\"Bob\\"), (\\"Charlie\\", \\"David\\"), (\\"Eve\\", \\"Frank\\"), (\\"Grace\\", \\"Helen\\")], [(\\"Alice\\", \\"Charlie\\"), (\\"Eve\\", \\"Grace\\")], [(\\"Alice\\", \\"Eve\\")] ] Output Bob David Frank Helen Charlie Grace Eve Explanation In the first round, Bob, David, Frank, and Helen are eliminated. In the second round, Charlie and Grace are eliminated. In the final round, Eve is eliminated. Therefore, the order of elimination is Bob, David, Frank, Helen, Charlie, Grace, Eve.","solution":"def elimination_order(n, players, results): eliminated_players = [] for round_result in results: for match in round_result: winner, loser = match eliminated_players.append(loser) return eliminated_players # Example usage n = 8 players = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\", \\"Eve\\", \\"Frank\\", \\"Grace\\", \\"Helen\\"] results = [ [(\\"Alice\\", \\"Bob\\"), (\\"Charlie\\", \\"David\\"), (\\"Eve\\", \\"Frank\\"), (\\"Grace\\", \\"Helen\\")], [(\\"Alice\\", \\"Charlie\\"), (\\"Eve\\", \\"Grace\\")], [(\\"Alice\\", \\"Eve\\")] ] print(elimination_order(n, players, results))"},{"question":"Anita is designing a navigation system for a group of delivery robots. Each robot operates within a city represented as an N x N grid. The grid has specific locations marked as obstacles, meaning the robots cannot navigate to these positions. Anita wants to determine the shortest path for a robot from a start position to an end position, ensuring the robot avoids obstacles. If the robot cannot reach the end position due to obstacles blocking all paths, the system should indicate that a path is impossible. The robot can move one step in four possible directions: up, down, left, and right. Each step has an equal cost of 1. Input The first line contains an integer N (2 ≤ N ≤ 1000) — the dimensions of the city grid. The second line contains two integers sx and sy (1 ≤ sx, sy ≤ N) — the start position of the robot. The third line contains two integers ex and ey (1 ≤ ex, ey ≤ N) — the end position of the robot. The fourth line contains an integer m (0 ≤ m ≤ 1000) — the number of obstacles in the grid. Each of the next m lines contains two integers ox and oy (1 ≤ ox, oy ≤ N) — the position of an obstacle. Output Print a single integer — the length of the shortest path from the start position to the end position. Print -1 if no such path exists. Example Input 5 1 1 5 5 3 3 3 3 4 2 3 Output 8 Note Given the grid of size 5x5 with obstacles at positions (3, 3), (3, 4), and (2, 3), the shortest path from (1, 1) to (5, 5) is of length 8. If there were no such path, the output would be -1.","solution":"from collections import deque def shortest_path(N, start, end, obstacles): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] grid = [[0] * N for _ in range(N)] # Mark obstacles on the grid for ox, oy in obstacles: grid[ox - 1][oy - 1] = -1 # Convert start and end positions to zero-indexed sx, sy = start ex, ey = end sx, sy = sx - 1, sy - 1 ex, ey = ex - 1, ey - 1 def is_valid(nx, ny): return 0 <= nx < N and 0 <= ny < N and grid[nx][ny] == 0 queue = deque([(sx, sy, 0)]) visited = set([(sx, sy)]) while queue: x, y, dist = queue.popleft() if (x, y) == (ex, ey): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given a list of strings, each representing a line in an office memo. The memo may contain requests that need to be approved. Each request follows the format \\"Request from [name]: [details] - Needs approval\\". Your task is to identify and return the names of all employees who have submitted requests that need approval. Return the names in the order they appear in the memo. Example input: ``` [ \\"Request from Alice: Increase budget by 5% - Needs approval\\", \\"Note: Monthly meeting rescheduled to Friday\\", \\"Request from Bob: Install new software - Needs approval\\", \\"Request from Charlie: Change internet provider\\", \\"Reminder: Complete your timesheets\\" ] ``` Example output: ``` [\\"Alice\\", \\"Bob\\"] ``` The memo may contain various sentences, but only those in the specified format should be considered.","solution":"def find_approval_requests(memo_lines): Identifies and returns the names of all employees who have submitted requests that need approval. Parameters: memo_lines (list of str): List of strings, each representing a line in an office memo. Returns: list of str: List of names of employees who have submitted requests that need approval. names = [] for line in memo_lines: if \'Needs approval\' in line: parts = line.split(\':\') if len(parts) > 1 and parts[0].startswith(\'Request from\'): name = parts[0].replace(\'Request from\', \'\').strip() names.append(name) return names"},{"question":"Your friend has recently taken an interest in competitive programming, and they came across a series of problems involving string manipulations. One particular problem has caught their attention, and they need your help to solve it. The problem goes as follows: You are given a string S of length N, which consists of lowercase English letters. Your task is to determine the number of substrings of S that are palindromes. A substring is a contiguous sequence of characters within the string. A palindrome is a string that reads the same backward as forward. Write a function that takes the string S as input and returns the number of palindromic substrings in S. Note that a single character is also a palindrome. ------ Input ------ - The first line contains an integer N, the length of the string S. - The second line contains the string S, consisting of N lowercase English letters. ------ Output ------ - Output a single integer, the number of palindromic substrings in S. ------ Constraints ------ - 1 ≤ N ≤ 10^3 ------ Sample Input 1 ------ 5 ababa ------ Sample Output 1 ------ 9 ------ Explanation 1 ------ The palindromic substrings are \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\", \\"bab\\", \\"aba\\", and \\"ababa\\". ------ Sample Input 2 ------ 6 racecar ------ Sample Output 2 ------ 10 ------ Explanation 2 ------ The palindromic substrings are \\"r\\", \\"a\\", \\"c\\", \\"e\\", \\"c\\", \\"a\\", \\"r\\", \\"cec\\", \\"aceca\\", and \\"racecar\\". Write a function `count_palindromic_substrings(N, S)` that solves the problem.","solution":"def count_palindromic_substrings(N, S): Returns the number of palindromic substrings in the given string S. count = 0 # Function to count palindromes centered at left and right def count_palindromes_around_center(left, right): nonlocal count while left >= 0 and right < N and S[left] == S[right]: count += 1 left -= 1 right += 1 for i in range(N): # Odd length palindromes centered at i count_palindromes_around_center(i, i) # Even length palindromes centered between i and i+1 if i + 1 < N: count_palindromes_around_center(i, i + 1) return count"},{"question":"Write a program that reads a series of pairs of positive integers and checks if ordering them as pairs (a, b) results in a consistent set of inequalities. Specifically, the pair (a, b) denotes that a should come before b. Given a set of such pairs, determine if there exists at least one way to arrange all nodes such that all pairs maintain the given ordering. Constraints * 2 leq n leq 100 Input The first line contains an integer n, the number of pairs. The following n lines each contain two integers a and b, representing the constraint that a should come before b. Output Output a single line containing \\"yes\\" if there exists a valid ordering, otherwise output “no”. Example Input: 3 1 2 2 3 1 3 Output: yes Input: 3 1 2 2 3 3 1 Output: no","solution":"from collections import defaultdict, deque def can_order_pairs(n, pairs): # Create the graph and compute in-degrees of nodes graph = defaultdict(list) in_degree = defaultdict(int) nodes = set() for a, b in pairs: graph[a].append(b) in_degree[b] += 1 nodes.add(a) nodes.add(b) # Topological Sort using Kahn\'s Algorithm # Queue for nodes with no incoming edge queue = deque([node for node in nodes if in_degree[node] == 0]) sorted_order = [] while queue: node = queue.popleft() sorted_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If sorted_order contains all nodes, there is a valid ordering if len(sorted_order) == len(nodes): return \\"yes\\" else: return \\"no\\""},{"question":"You are given two strings, S1 and S2, of length N and M, respectively. Your task is to determine the minimum number of operations required to transform S1 into S2. The operations you can perform are as follows: 1. Insert a character at any position in the string. 2. Delete any character from the string. 3. Replace any character in the string with another character. Constraints * 1 ≤ N, M ≤ 1000 * Both S1 and S2 consist only of lowercase English letters. Input The input is given from Standard Input in the following format: ``` S1 S2 ``` Output Print the minimum number of operations required to transform S1 into S2. Examples Input ``` horse ros ``` Output ``` 3 ``` Input ``` intention execution ``` Output ``` 5 ``` Input ``` kitten sitting ``` Output ``` 3 ```","solution":"def min_operations(S1, S2): Returns the minimum number of operations required to transform S1 into S2 using Insert, Delete, and Replace operations. N, M = len(S1), len(S2) # Create a (N+1) x (M+1) DP table dp = [[0] * (M + 1) for _ in range(N + 1)] # Initialize the DP table for i in range(N + 1): dp[i][0] = i for j in range(M + 1): dp[0][j] = j # Fill the DP table for i in range(1, N + 1): for j in range(1, M + 1): if S1[i - 1] == S2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1]) # Replacement dp[i][j] += 1 return dp[N][M]"},{"question":"In a distant galaxy, there exists a planet called Xylon where the inhabitants communicate using binary sequences. Their language system is quite unique: they encode phrases into binary strings and can only form valid phrases under specific rules. Your task is to determine whether a given binary string is a valid phrase according to the Xylon language rules. The rules for a binary string to be a valid phrase are: 1. The string can be empty. 2. If the string is not empty, it can be decomposed into smaller valid phrases concatenated together. 3. A single \'1\' can form a valid phrase. 4. The substring \\"110\\" can form a valid phrase. Write a function `isValidPhrase(s)` that takes a binary string `s` and returns `True` if it is a valid phrase according to the above rules, and `False` otherwise. -----Constraints:----- - The length of the binary string s is between 1 and 10^5. - The binary string contains only characters \'0\' and \'1\'. -----Input Format:----- A single line containing the binary string `s`. -----Output Format:----- A single line containing \\"True\\" if the binary string is a valid phrase according to Xylon\'s language rules, otherwise \\"False\\". Sample Input: 110110 Sample Output: True Explanation: The input \\"110110\\" can be decomposed into two \\"110\\" substrings, making it a valid phrase according to the rules. Sample Input: 10101 Sample Output: False Explanation: The input \\"10101\\" cannot be decomposed into single \'1\'s or \\"110\\" substrings, hence it is not a valid phrase.","solution":"def isValidPhrase(s): def isValidFromIndex(index): if index == len(s): return True if s[index] == \'1\': if index + 1 < len(s) and s[index+1] == \'1\' and index + 2 < len(s) and s[index+2] == \'0\': return isValidFromIndex(index + 3) return isValidFromIndex(index + 1) return False return s == \'\' or isValidFromIndex(0)"},{"question":"Patti has an analytics company. She has been working on social media data analytics for a long time, and she has collected a lot of user data. Users on social media can follow other users. Now Patty wants to analyze how many unique cycles of length 4 (i.e., social loops between four different users) exist in the data. A cycle of length 4 is defined as a sequence of four users (A, B, C, D) such that: - A follows B - B follows C - C follows D - D follows A Each user is represented by a unique number, and their follow relationships are given as pairs (U, V), where U follows V. Your task is to count the number of unique cycles of length 4 in the provided follow relationships. Input The first line of the input contains two integers, n and m, where n is the number of users, and m is the number of follow relationships. Each of the next m lines contains two integers u and v, indicating that user u follows user v. It\'s guaranteed that there are no duplicate follow relationships. Output Print a single integer — the number of unique cycles of length 4 in the provided data. Constraints 1 ≤ n ≤ 1000 0 ≤ m ≤ 10000 Example Input 5 5 1 2 2 3 3 4 4 1 1 3 2 4 4 2 Output 1 Explanation In the provided example, there is one cycle of length 4: (1, 2, 3, 4). Note Considerations should be made for ensuring that the cycles counted are unique and that the algorithm efficiently handles the given constraints.","solution":"def count_unique_cycles(n, m, follows): from collections import defaultdict follow_graph = defaultdict(set) # Build the follow graph for u, v in follows: follow_graph[u].add(v) count = 0 # Check for cycles of length 4 (A -> B -> C -> D -> A) for A in range(1, n + 1): for B in follow_graph[A]: for C in follow_graph[B]: if C == A: continue for D in follow_graph[C]: if D == A or D == B: continue if A in follow_graph[D]: count += 1 # Each cycle is counted 4 times (once from each vertex), so divide by 4 return count // 4"},{"question":"You are given a list of intervals on a number line and an integer k. Your task is to find an interval, or a point, that intersects with at least k intervals from the given list. -----Input----- The first line contains two integers n and k (1 le k le n le 100,000) — the number of given intervals and the required number of intersecting intervals. Each of the next n lines contains two integers a and b (-10^9 le a le b le 10^9) — the endpoints of an interval. -----Output----- Print two integers x and y — the endpoints of an interval that intersects with at least k given intervals. If multiple solutions exist, you can print any. -----Examples----- Input 3 2 1 5 4 8 6 10 Output 4 5 Input 4 3 0 7 3 10 6 9 8 11 Output 6 7 Input 5 4 -1 2 0 3 1 4 -2 1 -1 0 Output 0 1 -----Note----- For the first example, each interval intersects with at least one other, and the intersection of intervals [1,5] & [4,8] is [4,5], which satisfies the condition of intersecting at least 2 intervals. For the second example, the intersection of intervals [0,7], [3,10], and [6,9] is [6,7], which intersects with at least 3 intervals. In the third example, the intersection of intervals [-1,2], [0,3], [1,4], and [-2,1] is [0,1], intersecting with at least 4 intervals.","solution":"def find_intersection_interval(n, k, intervals): Find an interval that intersects with at least k given intervals. Args: n : int : number of intervals k : int : required number of intersecting intervals intervals : list of tuples : list of intervals (a, b) Returns: tuple : endpoints of an interval that intersects with at least k given intervals. points = [] for interval in intervals: points.append((interval[0], 1)) # starting point of interval points.append((interval[1] + 1, -1)) # end point of interval points.sort() current_intervals = 0 for point in points: current_intervals += point[1] if current_intervals >= k: return point[0], point[0] # Example function call # n = 3 # k = 2 # intervals = [(1, 5), (4, 8), (6, 10)] # print(find_intersection_interval(n, k, intervals)) # Output: (4, 4)"},{"question":"A company\'s payroll system needs to process salary information for its employees. The salary breakdown includes base salary, bonus, and tax based on the employee\'s salary slab. The slabs are broken down as follows: - If the salary is up to 50,000, the tax is 10% of the salary. - If the salary is between 50,001 and 100,000, the tax is 20% of the salary. - If the salary is above 100,000, the tax is 30% of the salary. The bonus is calculated as 10% of the base salary if the employee has met their targets. Write a program that calculates the net salary of an employee after applying the bonus (if any) and deducting the tax, given the base salary and whether the employee met their targets. **Input:** - The first input line contains an integer representing the base salary. - The second input line contains a string \'Y\' or \'N\', indicating whether the employee met their targets (Yes or No). **Output:** - Output a single integer denoting the net salary after subtracting the tax and adding the bonus (if applicable). **Examples:** Sample Input 1: ``` 40000 Y ``` Sample Output 1: ``` 43000 ``` Sample Input 2: ``` 75000 N ``` Sample Output 2: ``` 60000 ``` Sample Input 3: ``` 120000 Y ``` Sample Output 3: ``` 102000 ``` **Explanation:** In Sample Input 1, the base salary is 40,000, and the employee met their targets. The bonus is 10% of 40,000, which is 4,000. The tax on 40,000 is 10% of 40,000, which is 4,000. The net salary calculation will be 40,000 + 4,000 - 4,000 = 40,000. In Sample Input 2, the base salary is 75,000, and the employee did not meet their targets. No bonus is added. The tax on 75,000 is 20% of 75,000, which is 15,000. The net salary calculation will be 75,000 - 15,000 = 60,000. In Sample Input 3, the base salary is 120,000, and the employee met their targets. The bonus is 10% of 120,000, which is 12,000. The tax on 120,000 is 30% of 120,000, which is 36,000. The net salary calculation will be 120,000 + 12,000 - 36,000 = 96,000.","solution":"def calculate_net_salary(base_salary, met_targets): Calculate the net salary after applying the bonus (if any) and deducting the tax. Parameters: base_salary (int): The base salary of the employee met_targets (str): \'Y\' if the employee met their targets, \'N\' otherwise Returns: int: The net salary after tax and bonus # Calculate bonus if met_targets == \'Y\': bonus = 0.1 * base_salary else: bonus = 0 # Determine tax rate based on salary slab if base_salary <= 50000: tax_rate = 0.1 elif base_salary <= 100000: tax_rate = 0.2 else: tax_rate = 0.3 # Calculate tax tax = tax_rate * base_salary # Calculate net salary net_salary = base_salary + bonus - tax return int(net_salary)"},{"question":"You are a gardener and you need to water your plants in a rectangular garden. The garden is divided into a grid of cells, and each cell (i, j) either contains a plant or is empty. You have a limited range hose that can water all cells within a certain distance range from the current cell. Given a grid of cells representing the garden and the range of your hose, your task is to determine the minimum number of times you need to move to water all plants in the garden. Moving to a different cell to water the plants is only needed if the plants are out of range from your current cell. Input: The input consists of multiple datasets. Each dataset looks like below: N M R grid The first line contains three integers, N (1 ≤ N ≤ 50), M (1 ≤ M ≤ 50), and R (0 ≤ R ≤ 10), which denote the number of rows and columns of the garden grid, and the range of your hose respectively. The next N lines contain M integers, where each integer denotes: - 1 representing a cell with a plant. - 0 representing an empty cell. The input is terminated by a line containing three zeros. Output: For each dataset, your program must output the minimum number of times you need to move to water all plants. Example Input: 3 3 1 1 0 0 0 1 0 0 0 1 4 4 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 Output: 3 2","solution":"def min_watering_moves(n, m, r, grid): def bfs_with_range(grid, n, m, r): watered = [[False] * m for _ in range(n)] moves = 0 def in_range(x1, y1, x2, y2, r): return abs(x1 - x2) + abs(y1 - y2) <= r for i in range(n): for j in range(m): if grid[i][j] == 1 and not watered[i][j]: moves += 1 for x in range(n): for y in range(m): if grid[x][y] == 1 and in_range(i, j, x, y, r): watered[x][y] = True return moves return bfs_with_range(grid, n, m, r) def process_input(input_data): lines = input_data.strip().split(\'n\') index = 0 results = [] while index < len(lines): n, m, r = map(int, lines[index].split()) if n == 0 and m == 0 and r == 0: break index += 1 grid = [] for _ in range(n): grid.append(list(map(int, lines[index].split()))) index += 1 results.append(str(min_watering_moves(n, m, r, grid))) return \\"n\\".join(results) # Input data processing for testing purpose input_data = 3 3 1 1 0 0 0 1 0 0 0 1 4 4 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 print(process_input(input_data))"},{"question":"You are tasked with creating an inventory management system for a large warehouse that operates 24/7. The warehouse keeps track of all the products through barcode scans that record the arrival and departure of each item. Your system needs to support two operations: adding new products and removing products from the inventory. Additionally, it must be able to answer queries about the current volume of items for any given product type. Your task is to implement the system with specific capabilities. -----Input----- The input starts with an integer q (1 le q le 100000) representing the number of queries. Each of the next q lines contain a query in one of the following formats: - \\"ADD id v\\" means adding v items of product id to the inventory (with 1 leq id leq 100000 and 1 leq v leq 1000). - \\"REMOVE id v\\" means removing v items of product id from the inventory (with 1 leq id leq 100000 and 1 leq v leq 1000). - \\"QUERY id\\" means reporting the current volume of items for product id (with 1 leq id leq 100000). The operations are processed in the order they are provided, and it is guaranteed that there will always be enough items for `REMOVE` operations. -----Output----- For each \\"QUERY id\\" operation, output the current volume of items for the product id in a new line. -----Examples----- Sample Input: 6 ADD 1 100 ADD 2 150 REMOVE 1 50 QUERY 1 ADD 1 30 QUERY 1 Sample Output: 50 80","solution":"class InventoryManagementSystem: def __init__(self): self.inventory = {} def add(self, id, v): if id in self.inventory: self.inventory[id] += v else: self.inventory[id] = v def remove(self, id, v): if id in self.inventory: self.inventory[id] -= v def query(self, id): return self.inventory.get(id, 0) def process_queries(queries): system = InventoryManagementSystem() result = [] for query in queries: parts = query.split() operation = parts[0] id = int(parts[1]) if operation == \'ADD\': v = int(parts[2]) system.add(id, v) elif operation == \'REMOVE\': v = int(parts[2]) system.remove(id, v) elif operation == \'QUERY\': result.append(system.query(id)) return result"},{"question":"You are given a string s containing only lowercase alphabetical characters. Determine the first character that repeats in the string. If no character repeats, print \\"None\\". Input The input is a single line containing the string s (1 ≤ |s| ≤ 100), where |s| is the length of the string. Output Output the first repeating character in the string. If there are no repeating characters, print \\"None\\". Examples Input abcba Output b Input abcdef Output None","solution":"def first_repeating_character(s): Returns the first repeating character in the string s or \\"None\\" if no character repeats. seen = set() for char in s: if char in seen: return char seen.add(char) return \\"None\\""},{"question":"Rohan is working on a unique sorting problem where he needs to sort a list of integers according to a specific set of rules. The rules are: 1. All even numbers should appear before all odd numbers. 2. Even numbers should be sorted in ascending order. 3. Odd numbers should be sorted in descending order. Help Rohan by writing a function that takes an array of integers and returns the sorted array based on the given rules. Input Format: - The first line contains an integer T, the number of test cases. - Each test case is given in a single line containing a list of space-separated integers. Output Format: - For each test case, output a single line containing the sorted list of integers. Sample Input: 2 4 2 9 1 5 6 7 10 20 30 25 15 Sample Output: 2 4 6 9 7 5 1 10 20 30 25 15 Note: - The number of test cases T will be at most 100. - The length of each array will be at most 1000. - Each integer in the array will be between -10000 and 10000.","solution":"def custom_sort(arr): Sorts an array based on the specified rules: 1. All even numbers should appear before all odd numbers. 2. Even numbers should be sorted in ascending order. 3. Odd numbers should be sorted in descending order. Parameters: arr (list): The list of integers to be sorted. Returns: list: The sorted list based on the given rules. evens = sorted([x for x in arr if x % 2 == 0]) odds = sorted([x for x in arr if x % 2 != 0], reverse=True) return evens + odds def process_test_cases(t, test_cases): Processes multiple test cases and sorts each array based on custom_sort function. Parameters: t (int): Number of test cases. test_cases (list): List of test case arrays. Returns: list: List of sorted arrays for each test case. results = [custom_sort(case) for case in test_cases] return results"},{"question":"Write a function to determine if a given string is a valid palindrome considering only alphanumeric characters and ignoring cases. ``` A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward (ignoring spaces, punctuation, and capitalization). For example: \\"A man, a plan, a canal: Panama\\" is a palindrome. \\"race a car\\" is not a palindrome. Write a function: def isPalindrome(s: str) -> bool Input: - s: a string of length \'n\' (1 ≤ n ≤ 2 * 10^5) Output: - Return True if the given string is a palindrome. Otherwise, return False. - The function should ignore spaces, punctuation, and capitalization. ```","solution":"def isPalindrome(s: str) -> bool: Determines if a given string is a valid palindrome considering only alphanumeric characters and ignoring cases. Parameters: s (str): input string Returns: bool: True if s is a palindrome, False otherwise # Convert string to lowercase and filter out non-alphanumeric characters filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list of characters is the same forwards and backwards return filtered_chars == filtered_chars[::-1]"},{"question":"A company has a system where users are assigned unique numeric IDs. Over time, due to user deletions and other operations, some IDs may become unavailable for future assignments. To optimize storage and tracking, they want to find the smallest available user ID that has not been assigned yet. Write a function to find the smallest missing ID from a given list of assigned IDs. Input Format: - The first line contains a single integer N, the number of assigned IDs. - The second line contains N space-separated integers, representing the list of assigned IDs. Output Format: - Print the smallest positive integer that is not present in the list of assigned IDs. Constraints: 1 ≤ N ≤ 100 1 ≤ Assigned IDs ≤ 1000 Example: SAMPLE INPUT: 7 1 2 3 5 7 8 10 SAMPLE OUTPUT: 4 Explanation: In the given list, IDs from 1 to 3 are present, but ID 4 is missing. Therefore, the smallest missing ID is 4.","solution":"def find_smallest_missing_id(N, assigned_ids): Finds the smallest missing positive integer from the list of assigned IDs. Parameters: N (int): Number of assigned IDs. assigned_ids (list of int): List of assigned IDs. Returns: int: The smallest missing positive integer not in assigned_ids. assigned_ids_set = set(assigned_ids) smallest_missing_id = 1 while smallest_missing_id in assigned_ids_set: smallest_missing_id += 1 return smallest_missing_id"},{"question":"A village is built in a forest and can be represented as an undirected graph with houses as nodes and paths as edges. Each path has a positive integer weight representing the distance between the houses it connects. The village needs to install new streetlights on some paths to ensure that there is at least one direct or indirect path with lights between any two houses. Unfortunately, the local authorities only have a limited budget, meaning they can only light a few paths. Thus you have been asked to help find the minimum number of paths that need to be lighted so that every house has a lighted path between them. Note that the lights can only be installed on paths that are part of the minimum spanning tree (MST) of this graph to minimize the cost. Write a program to determine the minimum number of paths to light and the specific paths in the MST that should have lights installed to ensure every house is reachable through a lighted path. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 300,000) — the number of houses and the number of paths. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1,000,000) — the integers u and v are the endpoints of a path and w is its weight. -----Output----- The first line should contain one integer c, the minimum number of paths that need to be lighted. The next c lines should each contain three integers u, v and w describing the lighting of specific paths in the MST. If there are multiple solutions, print any of them. -----Examples----- Input 4 5 1 2 1 1 3 2 2 3 2 2 4 3 3 4 3 Output 3 1 2 1 1 3 2 2 4 3 Input 3 3 1 2 3 1 3 1 2 3 4 Output 2 1 3 1 1 2 3 -----Note----- In the first input example, an MST of the graph can be formed by using the paths with weights 1, 2 and 3, therefore a minimum of 3 paths need to be lighted to ensure every house is reachable through lighted paths. In the second input example, the MST can be formed using the paths with weights 1 and 3, so 2 paths need to be lighted.","solution":"def find_mst_and_light_paths(n, m, edges): Function to find the minimum number of paths that need to be lighted. The function uses Kruskal\'s algorithm to find the Minimum Spanning Tree (MST). # Applying Kruskal\'s algorithm to find the MST # Helper function to find the root of a set def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) # Helper function to do the union of two sets def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 # Sort all the edges in non-decreasing order of their weight edges.sort(key=lambda x: x[2]) parent = [] rank = [] # Create V subsets with single elements for node in range(n): parent.append(node) rank.append(0) mst_edges = [] # This will store the resultant MST # Number of edges to be taken is equal to V-1 for edge in edges: u, v, w = edge u -= 1 v -= 1 x = find(parent, u) y = find(parent, v) # If including this edge does not cause a cycle, # include it in the result and union the two sets. if x != y: mst_edges.append(edge) union(parent, rank, x, y) # Return the number of edges in the MST and the edges themselves return len(mst_edges), mst_edges # Example usage: n = 4 m = 5 edges = [ [1, 2, 1], [1, 3, 2], [2, 3, 2], [2, 4, 3], [3, 4, 3] ] result = find_mst_and_light_paths(n, m, edges) print(result[0]) for edge in result[1]: print(\\" \\".join(map(str, edge)))"},{"question":"A popular game is played with coins where a player must pick up a certain number of coins from a set pile in each turn, and the one who cannot pick a coin on their turn loses. You have been tasked to write a function that determines the winner of this game if both players play optimally. Game Rules: - The game begins with a pile of `n` coins. - There are two players, Player 1 and Player 2, who take turns alternately. - Each player can pick 1, 2, or 3 coins on their turn. - Player 1 always goes first. - The player who cannot pick a coin on their turn (because there are no coins left) loses the game. Write a function which takes the number of coins, `n`, and returns \\"Player 1\\" if Player 1 is guaranteed to win if both play optimally, otherwise return \\"Player 2\\". Function Signature: ```python def find_winner(n: int) -> str: pass ``` # Input: - The function will receive an integer `n`, where 1 ≤ n ≤ 10^6, representing the initial number of coins. # Output: - The function should return \\"Player 1\\" if Player 1 is guaranteed to win, otherwise \\"Player 2\\". # Example: ```python print(find_winner(1)) # Output: \\"Player 1\\" print(find_winner(2)) # Output: \\"Player 1\\" print(find_winner(3)) # Output: \\"Player 1\\" print(find_winner(4)) # Output: \\"Player 1\\" print(find_winner(5)) # Output: \\"Player 1\\" print(find_winner(6)) # Output: \\"Player 2\\" print(find_winner(7)) # Output: \\"Player 1\\" print(find_winner(8)) # Output: \\"Player 1\\" print(find_winner(9)) # Output: \\"Player 1\\" print(find_winner(10)) # Output: \\"Player 2\\" ``` # Explanation: - For `n = 1, 2, 3`, Player 1 can take all the coins on their turn and win. - For `n = 4`, Player 1 can take 3 coins leaving 1 coin for Player 2, ensuring Player 1 wins. - For `n = 5`, Player 1 can take 3 coins leaving 2 coins for Player 2, ensuring Player 1 wins. - For `n = 6`, no matter how many coins Player 1 takes, Player 2 can always win in the subsequent moves. - For larger numbers, the pattern continues based on optimal moves, maintaining consistency with above observations.","solution":"def find_winner(n: int) -> str: Determines the winner of the game with n coins if both players play optimally. :param n: int: the number of coins :return: str: \\"Player 1\\" if Player 1 is guaranteed to win, otherwise \\"Player 2\\" if n % 4 == 0: return \\"Player 2\\" else: return \\"Player 1\\""},{"question":"Problem statement You are given an array of N integers where each integer represents the height of a plant. You need to water the plants following these specific rules: 1. You can only water consecutive plants. 2. After watering a plant, its height will increase by 1. 3. You aim to make all the plants\' heights the same using the minimum number of waterings. Write a function that takes the array of plant heights and returns the minimum number of waterings required to make all plants the same height. Constraint * 1 leq N leq 100 * 1 leq text{heights}_i leq 1000 input Input follows the following format. All given numbers are integers. N text{heights}_1 text{heights}_2 ... text{heights}_N output Output the minimum number of waterings required. Examples Input 3 1 2 3 Output 3 Input 4 4 9 8 7 Output 5","solution":"def min_waterings(heights): Returns the minimum number of waterings required to make all plant heights the same. if len(heights) == 0: return 0 max_height = max(heights) min_height = min(heights) # Number of waterings required to make the smallest plant\'s height equal to the tallest plant\'s height return max_height - min_height"},{"question":"You are given an array of integers. Your task is to find the length of the longest subarray that contains equal number of positive and negative integers. -----Input----- The first line contains one integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_{n} ( - 100 ≤ a_{i} ≤ 100) — the elements of the array. -----Output----- Print the length of the longest subarray that contains equal number of positive and negative integers. -----Examples----- Input 5 1 -1 2 -2 3 Output 4 Input 8 1 -1 2 -2 1 -1 2 -2 Output 8 -----Note----- In the first example, the longest subarray with equal number of positive and negative integers is [1, -1, 2, -2], which is of length 4. In the second example, the entire array already contains equal number of positive and negative integers, so the answer is 8.","solution":"def longest_equal_positive_negative_subarray(arr): Returns the length of the longest subarray that contains equal number of positive and negative integers. n = len(arr) maxlen = 0 prefix_sums = {0: -1} # to store the first occurrence of each prefix sum current_sum = 0 for idx, num in enumerate(arr): if num > 0: current_sum += 1 elif num < 0: current_sum -= 1 if current_sum in prefix_sums: maxlen = max(maxlen, idx - prefix_sums[current_sum]) else: prefix_sums[current_sum] = idx return maxlen"},{"question":"You are given a string S consisting of lowercase alphabets, and you need to find the length of the longest substring without repeating characters. Examples: Input: 2 abcabcbb bbbbb Output: 3 1 Input Format: The first line of input contains T denoting the number of test cases. T test cases follow. Each test case contains one string S. Output Format: For each test case, in a new line, print the required output. Your Task: Since this is a function problem, you don\'t need to take any input. Just complete the provided function longestUniqueSubsttr(). Constraints: 1 <= T <= 100 1 <= |S| <= 1000 Function Signature: def longestUniqueSubsttr(S: str) -> int:","solution":"def longestUniqueSubsttr(S: str) -> int: Returns the length of the longest substring without repeating characters. n = len(S) if n == 0: return 0 char_map = {} max_len = 0 start = 0 for end in range(n): if S[end] in char_map: start = max(char_map[S[end]] + 1, start) char_map[S[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Given an integer n, write a function that generates the n-th term of the following sequence: 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, ..., where the i-th number appears exactly i times. The sequence starts from 1. Example 1: Input: n = 5 Output: 3 Explanation: The sequence is 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, ... The 5th term is 3. Example 2: Input: n = 10 Output: 4 Explanation: The sequence is 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, ... The 10th term is 4. Your Task: You dont need to read input or print anything. Complete the function findNthTerm() which takes n as input parameter and returns the n-th term of the sequence. Expected Time Complexity: O(√n) Expected Auxiliary Space: O(1) Constraints: 1<= n <=10^4","solution":"def findNthTerm(n): Returns the n-th term of the sequence: 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, ... term = 1 current_position = 0 while current_position < n: current_position += term if current_position >= n: break term += 1 return term"},{"question":"In a hypothetical world, you are designing a simplified filesystem with folders and files. A folder can contain multiple files and other folders. Each file has a size represented in megabytes (MB). Each folder has a size which is the sum of the sizes of all files it directly contains, plus the sizes of all files inside the subfolders recursively (i.e., the entire content size). For ease, let’s assume: - Files are named uniquely. - Folders are named uniquely. - A folder can never contain itself either directly or indirectly, and can never have duplicate content. Your task is to write a program to calculate and print the sizes of all folders based on the provided file structure. **Input:** The input contains multiple instructions, each on a new line. The types of instructions are as follows: - `\\"create_file [filename] [size]\\"` creates a file with the specified size. - `\\"create_folder [foldername]\\"` creates an empty folder. - `\\"add_to_folder [foldername] [item]\\"` adds a file or folder (item) to the specified folder. **Output:** For each folder, output its name and size in MB, in lexicographical order by folder name. **Examples** _Input:_ 8 create_file myfile1 100 create_file myfile2 200 create_folder documents add_to_folder documents myfile1 add_to_folder documents myfile2 create_folder archive create_file myfile3 50 add_to_folder archive documents _Output:_ archive 300 documents 300 _Input:_ 5 create_file file1 50 create_file file2 20 create_folder music create_folder videos add_to_folder music file1 _Output:_ music 50 videos 0 **Note:** - The size of a folder is calculated as the sum of all file sizes within the folder and all nested content (sub-folders, their files, etc.) - Assume input instructions are always valid and executed in order. - Consider case sensitivity as important (i.e., \\"music\\" and \\"Music\\" are different).","solution":"def calculate_folder_sizes(commands): files = {} folders = {} for command in commands: parts = command.split() if parts[0] == \\"create_file\\": filename, size = parts[1], int(parts[2]) files[filename] = size elif parts[0] == \\"create_folder\\": foldername = parts[1] folders[foldername] = [] elif parts[0] == \\"add_to_folder\\": foldername, item = parts[1], parts[2] folders[foldername].append(item) def folder_size(folder): size = 0 for item in folders[folder]: if item in files: size += files[item] else: size += folder_size(item) return size result = {} for folder in folders: result[folder] = folder_size(folder) return sorted(result.items()) # Example usage: # Input commands commands1 = [ \\"create_file myfile1 100\\", \\"create_file myfile2 200\\", \\"create_folder documents\\", \\"add_to_folder documents myfile1\\", \\"add_to_folder documents myfile2\\", \\"create_folder archive\\", \\"create_file myfile3 50\\", \\"add_to_folder archive documents\\" ] commands2 = [ \\"create_file file1 50\\", \\"create_file file2 20\\", \\"create_folder music\\", \\"create_folder videos\\", \\"add_to_folder music file1\\" ] print(calculate_folder_sizes(commands1)) print(calculate_folder_sizes(commands2))"},{"question":"In an ancient kingdom, there exists a magical garden in which plants are arranged in a linear row. Each plant can either be alive (\'A\') or dead (\'D\'). Every morning, the gardener follows a unique ritual to bring life back to the garden. He can apply exactly one spell per day that will revive or kill exactly one consecutive segment of plants. The gardener\'s goal is to have all plants in the magical garden alive. He can cast spells indefinitely until this objective is achieved. Determine the minimum number of spells the gardener needs to cast to revive all plants in the garden. The state of the garden is represented by a string `G` with |G| (the length of G) plants, where each character in `G` is either \'A\' (alive) or \'D\' (dead). Constraints - 1 ≦ |G| ≦ 10^5 - Each character in `G` is either \'A\' or \'D\'. Input The input is given from Standard Input in the following format: ``` G ``` Output Print the minimum number of spells needed to revive all plants in the garden. Example Input ``` DAAAD ``` Example Output ``` 2 ``` Explanation By applying one spell to the segment from the first to the third plant, the garden becomes `AAAAA`. Thus, two spells are necessary in this example.","solution":"def min_spells_to_revive(garden): Returns the minimum number of spells needed to revive all plants in the garden. if not garden: return 0 spells = 0 i = 0 n = len(garden) while i < n: # Find the next \'D\' if garden[i] == \'D\': spells += 1 # Skip all consecutive \'D\'s while i < n and garden[i] == \'D\': i += 1 else: i += 1 return spells"},{"question":"Given a string S consisting of lowercase alphabetic characters, identify and list all the distinct substrings of S that have exactly one unique character. -----Constraints----- - 1leq |S|leq 100 - S consists only of lowercase alphabetic characters. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print each distinct substring that contains exactly one unique character, one per line. The substrings should be listed in lexicographical order. -----Sample Input----- aaabb -----Sample Output----- a aa aaa b bb Explanation: The substrings with exactly one unique character are \'a\', \'aa\', \'aaa\', \'b\', and \'bb\'. \\"a\\" appears multiple times, but we list it only once. All distinct substrings are printed in lexicographical order.","solution":"def unique_char_substrings(s): Finds all distinct substrings in the given string that have exactly one unique character, and returns them in lexicographical order. substrings = set() for i in range(len(s)): # Track if all characters in the current substring are the same current_char = s[i] substrings.add(current_char) for j in range(i + 1, len(s)): if s[j] == current_char: substrings.add(s[i:j + 1]) else: break # Return the sorted list of substrings return sorted(substrings)"},{"question":"You are tasked with developing a module for a library management system to keep track of book borrowings and returns among members. The system will handle multiple requests for borrowing and returning books and will maintain a record of the status of each book. Each member can borrow a book if it’s available and return it when done. If a member tries to borrow a book that is currently borrowed by another member, the request should be denied. The system will also need to handle requests to check the status of a book, specifically who currently has it or if it is available. -----Input----- The input consists of a single test case. The first line contains an integer q (1 le q le 1000), the number of requests. Each of the following q lines contains a request in one of the following formats: - \\"borrow m b\\" where 0 le m le 100 is the member ID and 0 le b le 1000 is the book ID. - \\"return m b\\" where 0 le m le 100 is the member ID and 0 le b le 1000 is the book ID. - \\"status b\\" where 0 le b le 1000 is the book ID. Members and books are identified by unique integer IDs. -----Output----- For each status request, output either the member ID who has borrowed the book or \\"available\\" if the book is not currently borrowed. All borrow and return requests should be processed but do not yield any output. If a borrow request is invalid because the book is already borrowed, it should not change any records. -----Examples----- Sample Input 1: 7 borrow 1 100 status 100 borrow 2 100 status 100 return 1 100 borrow 2 100 status 100 Sample Output 1: 1 1 2 Sample Input 2: 5 borrow 3 200 borrow 3 201 return 3 200 status 200 status 201 Sample Output 2: available 3","solution":"def library_manager(queries): Manages the library book borrow and return requests, and checks book statuses. :param queries: List[str] - List of queries in the form of strings :return: List[str] - List of responses for the status queries book_status = {} results = [] for query in queries: parts = query.split() command = parts[0] if command == \\"borrow\\": member_id = int(parts[1]) book_id = int(parts[2]) if book_id not in book_status: book_status[book_id] = member_id elif command == \\"return\\": member_id = int(parts[1]) book_id = int(parts[2]) if book_id in book_status and book_status[book_id] == member_id: del book_status[book_id] elif command == \\"status\\": book_id = int(parts[1]) if book_id in book_status: results.append(str(book_status[book_id])) else: results.append(\\"available\\") return results"},{"question":"Alice is trapped in a maze with numbered rooms. Each room contains a unique number, and some rooms are connected by doors that go only one way. Alice starts in a specified room and can only move to another room following the directions of these one-way doors. Alice wants to make the sequence of moves such that the sum of the room numbers she visits is maximized. However, she needs help finding that sequence. Write a program that, given the number of rooms and the one-way doors, finds the path with the maximum sum of room numbers Alice can follow starting from a given room. Input: - The first line contains an integer `N` (1 ≤ N ≤ 100000), the number of rooms. - The second line contains an integer `S` (1 ≤ S ≤ N), the starting room number. - The next line contains a space-separated list of `N` integers, where the ith integer represents the number in the ith room. - The following `N` lines represent the one-way doors. Each line starts with an integer `K` (0 ≤ K ≤ N-1), the number of doors leading from the ith room, followed by `K` integers representing the room numbers to which these doors lead. Output: - A single integer representing the maximum sum of room numbers Alice can achieve starting from room `S`. Example: Input: 5 1 2 3 5 1 4 1 2 1 3 1 4 1 5 0 Output: 14 Explanation: Alice starts in room 1 (value 2). The paths she can follow are: 1 → 2 → 3 → 4 → 5, with the sum 2 + 3 + 5 + 1 + 4 = 15. So, she chooses this path to maximize her sum.","solution":"def find_max_sum_path(N, S, room_values, doors): from collections import defaultdict, deque graph = defaultdict(list) for i, connections in enumerate(doors): graph[i + 1] = connections def dfs(node, visited): if node in visited: return 0 visited.add(node) max_sum = 0 for neighbor in graph[node]: max_sum = max(max_sum, dfs(neighbor, visited)) visited.remove(node) return max_sum + room_values[node - 1] return dfs(S, set()) # Example Usage: N = 5 S = 1 room_values = [2, 3, 5, 1, 4] doors = [[2], [3], [4], [5], []] print(find_max_sum_path(N, S, room_values, doors)) # Output: 15"},{"question":"Given an array of integers and a target sum, determine if there are any three distinct elements in the array that add up to the target sum. If such a combination exists, return their values as a sorted tuple. Otherwise, return an empty tuple. Implement your solution without using any built-in sorting functions. Example 1: Input: array = [12, 3, 6, 1, 6, 9], target = 24 Output: (3, 9, 12) Explanation: Only the combination of 3, 9, 12 sums up to 24. Example 2: Input: array = [5, 1, -2, 7, 10, 3], target = 8 Output: (-2, 3, 7) Explanation: Only the combination of -2, 3, 7 sums up to 8. Example 3: Input: array = [1, 2, 3, 4, 5], target = 50 Output: () Explanation: No combination of three elements sums up to 50. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `find_triplet` which takes the array and the target sum as inputs and returns the sorted tuple of the three elements if exists, otherwise an empty tuple. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(1) Constraints: - 3 ≤ array.length ≤ 10^{3} - -10^{3} ≤ array[i], target ≤ 10^{3}","solution":"def find_triplet(array, target): This function finds three distinct elements in the array that sum up to the target sum. If found, it returns their values as a sorted tuple, otherwise returns an empty tuple. n = len(array) for i in range(n - 2): for j in range(i + 1, n - 1): for k in range(j + 1, n): if array[i] + array[j] + array[k] == target: triplet = sorted([array[i], array[j], array[k]]) return tuple(triplet) return ()"},{"question":"Alice is a big fan of number theory and enjoys playing with numbers. She has recently discovered an interesting property of numbers. She calls a number \'special\' if the sum of its digits is divisible by 3. For example, 123 is special because 1 + 2 + 3 = 6, which is divisible by 3. Given a number N, Alice wants to know the smallest \'special\' number that is greater than or equal to N. Help Alice find this number. You need to implement a function that takes an integer N as the input and outputs the smallest \'special\' number greater than or equal to N. Input The input contains a single integer N. Output The output contains the smallest \'special\' number greater than or equal to N. Constraints 1 ≤ N ≤ 10^18 SAMPLE INPUT 57 SAMPLE OUTPUT 57 SAMPLE INPUT 38 SAMPLE OUTPUT 39","solution":"def is_special(num): Check if a number is \'special\', i.e., if the sum of its digits is divisible by 3. digit_sum = sum(int(digit) for digit in str(num)) return digit_sum % 3 == 0 def find_smallest_special_number(N): Find the smallest \'special\' number greater than or equal to N. while not is_special(N): N += 1 return N"},{"question":"You are given a sequence of positive integers in an array. The task is to find the smallest positive integer that is not present in the array and cannot be represented as the sum of any subset of the array. Example 1: Input: arr = [1, 2, 6, 10, 11, 15] Output: 4 Explanation: The smallest positive integer that cannot be obtained by any subset sum is 4. Example 2: Input: arr = [1, 1, 1, 1] Output: 5 Explanation: The smallest positive integer that cannot be obtained by any subset sum is 5. Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestNonRepresentable() which takes an array of integers arr as input and returns the smallest positive integer that is not present in the array and cannot be represented as the sum of any subset of the array. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^9","solution":"def smallestNonRepresentable(arr): # Sort the array arr.sort() # Initialize the smallest non representable positive integer res = 1 # Traverse the array and update the result value for num in arr: # If the current number is greater than the result # then the result cannot be formed by current or previous elements if num > res: break res += num return res"},{"question":"You are given a string representing a large integer. Your task is to add one to the integer and return the resulting number as a string. The integer is guaranteed to be non-negative, and you cannot use built-in large integer libraries or directly convert the string to a numerical type. Please write a function to accomplish this task. Example 1: Input: \\"123\\" Output: \\"124\\" Example 2: Input: \\"009\\" Output: \\"010\\" Example 3: Input: \\"999\\" Output: \\"1000\\" Note: The input string may have leading zeros, which should be preserved in the output as well.","solution":"def add_one_to_string_number(num_str): Adds one to a large integer represented as a string and returns the resulting number as a string. Leading zeros are preserved in the output if present in the input. # Convert the number to a list of characters to allow mutable operations num_list = list(num_str) carry = 1 # Adding one implies we start with a carry of one # Loop from the end to the start of the list for i in range(len(num_list) - 1, -1, -1): if num_list[i] == \'9\' and carry == 1: num_list[i] = \'0\' else: num_list[i] = str(int(num_list[i]) + carry) carry = 0 break # If carry is still 1 after the loop, it means we need an extra digit at the start if carry == 1: num_list.insert(0, \'1\') return \'\'.join(num_list)"},{"question":"You\'re a software developer at a grocery store, and your task is to create a program that helps to manage shopping lists. Each item on the shopping list has a name and a category it belongs to (e.g., Fruits, Vegetables, Dairy). Your program should be able to store multiple items and allow certain operations like adding, removing, and listing items based on their category. # Objective Implement a class `ShoppingList` that supports the following operations: 1. `add_item(name: str, category: str)`: Adds an item with the given name and category to the shopping list. 2. `remove_item(name: str)`: Removes an item with the given name from the shopping list. If there are multiple items with the same name under different categories, remove the one that was added first. 3. `list_items(category: str) -> List[str]`: Lists all items in the shopping list under the given category. The items should be listed in the order they were added. # Input Format - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of operations to be performed. - The following `n` lines contain the operations, with each operation being one of the following: - `ADD name category` – for adding an item with the specified name and category. - `REMOVE name` – for removing an item with the specified name. - `LIST category` – for listing all items under the specified category. # Output Format For each `LIST` operation, output the items in the specified category in the order they were added, each item on a new line. If there are no items in the category, output \\"No items\\". # Examples Input ``` 7 ADD apple Fruits ADD milk Dairy ADD banana Fruits REMOVE apple LIST Fruits LIST Dairy REMOVE milk ``` Output ``` banana milk ``` # Notes - Each item is uniquely identified by its name within the list. - If an item to be removed does not exist, nothing should happen. - The `LIST` command for an empty category should return \\"No items\\". Implement the `ShoppingList` class with the specified functionality as described above.","solution":"from collections import defaultdict, deque from typing import List class ShoppingList: def __init__(self): self.items = defaultdict(deque) self.item_order = deque() def add_item(self, name: str, category: str): self.items[category].append(name) self.item_order.append((name, category)) def remove_item(self, name: str): for i, (n, c) in enumerate(self.item_order): if n == name: self.items[c].remove(n) self.item_order.remove((n, c)) break def list_items(self, category: str) -> List[str]: if category in self.items and self.items[category]: return list(self.items[category]) else: return [\\"No items\\"] # Simulation method to handle the operations def handle_operations(n: int, operations: List[str]) -> List[str]: shopping_list = ShoppingList() results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \'ADD\': shopping_list.add_item(parts[1], parts[2]) elif command == \'REMOVE\': shopping_list.remove_item(parts[1]) elif command == \'LIST\': results.extend(shopping_list.list_items(parts[1])) return results"},{"question":"You are given an array B of M integers where each integer is between 1 and N (inclusive). Your task is to find the smallest positive integer (greater than 0) that is not present in the array. If all integers between 1 and N are present, the answer should be N+1. ------ Input Format ------ - The first line contains an integer M denoting the size of the array. - The second line contains M space-separated integers B_{1}, B_{2}, dots, B_{M}. ------ Output Format ------ Output the smallest positive integer that is not present in the array. ------ Constraints ------ 1 ≤ M ≤ 200 1 ≤ N ≤ 200 1 ≤ B_{i} ≤ N ----- Sample Input 1 ------ 3 1 2 4 5 2 3 1 5 4 ----- Sample Output 1 ------ 3 6 ----- Explanation 1 ------ - For the first test case: The array is [1, 2, 4]. The smallest positive integer that is not present is 3. - For the second test case: The array is [2, 3, 1, 5, 4]. All integers between 1 and N=5 are present. Therefore, the answer is 6.","solution":"def find_smallest_missing_positive(B, N): Returns the smallest positive integer that is not present in the array B. If all integers between 1 and N are present, returns N+1. # Create a boolean list to mark the presence of integers from 1 to N present = [False] * (N + 1) # Mark the numbers that are present in the array for num in B: if 1 <= num <= N: present[num - 1] = True # Find the smallest number that is not present for i in range(N): if not present[i]: return i + 1 # If all numbers from 1 to N are present, return N+1 return N + 1"},{"question":"Kaweka has a sequence of integers of length n where he can perform the following operation any number of times: - Choose any two elements from the sequence and replace them with their sum. Kaweka wants to know the minimum number of operations required to make all elements in the sequence equal, if possible. -----Input----- The first line contains a single integer t (1 leq t leq 1000) - the number of test cases. For each test case, the first line contains a single integer n (2 leq n leq 100) - the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 1000) - the sequence of integers. -----Output----- For each test case, print a single integer - the minimum number of operations required to make all elements in the sequence equal. If it is not possible, print -1. -----Examples----- Input 3 4 1 2 3 4 3 1 1 5 2 2 2 Output 6 4 0 -----Note----- In the first test case, one possible sequence of operations is: - Combine 1 and 2 to get 3: the sequence becomes [3, 3, 3, 4] - Combine 3 and 3 to get 6: the sequence becomes [6, 3, 4] - Combine 3 and 3 to get 6: the sequence becomes [6, 6] - Combine 6 and 6 to get 12: the sequence becomes [12] - Combine 12 and 4 to get 16: the sequence becomes [16] - Combine 16 with itself to get 32: the sequence becomes [32] - The elements can now be made the same by adjusting values but the minimum pairwise sum operations reached 6 operations. In the second test case, one possible sequence of operations is: - Combine 1 and 1 to get 2: the sequence becomes [2, 5] - Combine 2 and 2 to get 4: the sequence becomes [4, 5] - Combine 4 and 2 to get 6: the sequence becomes [6] - Combine 6 and 6 to get 12: the sequence becomes [12] In the third test case, all elements are already equal, so no operations are needed.","solution":"def min_operations_to_equal_elements(n, arr): if len(set(arr)) == 1: return 0 return len(arr) - 1 def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(min_operations_to_equal_elements(n, arr)) return results"},{"question":"Consider a warehouse with n storage units arranged in a straight line. Each storage unit has a security camera installed above it. The warehouse managers want to lease some units for storing valuable items, but they want to ensure that no two leased units are adjacent and that every leased unit is watched by at least one camera. Each security camera covers its corresponding storage unit as well as the units directly adjacent to it (if they exist). You are given an array `a` of size n where `a[i]` (1 ≤ a[i] ≤ 10^4) represents the value of the items that could be stored in the i-th unit. Determine the maximum total value of items that can be stored in the warehouse under the given conditions. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of storage units. The second line contains n space-separated integers — the array `a` representing the value of the items that could be stored in each unit. Output Print a single integer — the maximum total value of items that can be stored in the warehouse under the described conditions. SAMPLE INPUT 5 3 2 5 10 7 SAMPLE OUTPUT 15 Explanation: One optimal solution for the given sample input is to lease units 1, 3, and 5, with values 3, 5, and 7 respectively, leading to a total value of 3 + 5 + 7 = 15. This arrangement satisfies the conditions that no two leased units are adjacent and all leased units are under camera coverage.","solution":"def max_storage_value(n, a): if n == 0: return 0 if n == 1: return a[0] dp = [0] * n dp[0] = a[0] dp[1] = max(a[0], a[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + a[i]) return dp[n-1] # Example usage: # n = 5 # a = [3, 2, 5, 10, 7] # print(max_storage_value(n, a)) # Expected output: 15"},{"question":"Sara has a list of integers representing the scores of her students in a coding competition. She wants to reward the students who have performed consistently well by identifying the longest subsequence where the scores strictly increase. For example, for the list `[3, 10, 2, 1, 20]`, the longest increasing subsequence is `[3, 10, 20]` and its length is `3`. Write a program to determine the length of the longest increasing subsequence for each test case. -----Input----- The first line contains an integer `t` (`1 <= t <= 100`) representing the number of test cases. The first line of each test case contains a single integer `n` (`1 <= n <= 1000`) representing the number of scores. The second line of each test case contains `n` integers `a_i` (`1 <= a_i <= 10000`) representing the scores. -----Output----- For each test case, output a single integer representing the length of the longest increasing subsequence. -----Examples----- Input 3 6 5 8 3 7 9 1 5 2 2 2 2 2 4 1 3 2 4 Output 3 1 3 -----Note----- For the first test case, the longest increasing subsequence is `[5, 8, 9]` with a length of `3`. For the second test case, since all elements are the same, the longest increasing subsequence is any single element, with a length of `1`. For the third test case, the longest increasing subsequence is `[1, 3, 4]` with a length of `3`.","solution":"def longest_increasing_subsequence_length(scores): Returns the length of the longest increasing subsequence in the scores list. if not scores: return 0 n = len(scores) lis = [1] * n # Initialize LIS values for all indexes as 1 # Compute optimized LIS values in a bottom up manner for i in range(1, n): for j in range(i): if scores[i] > scores[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Find the maximum value in lis array return max(lis) def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] scores = test_cases[i][1] results.append(longest_increasing_subsequence_length(scores)) return results"},{"question":"Implement a function that takes a list of integers and returns a new list where each element is the sum of the corresponding element from the original list and all previous elements. This is known as a running total or cumulative sum. For example: ``` [1, 2, 3, 4] --> [1, 3, 6, 10] [10, 20, 30] --> [10, 30, 60] ```","solution":"def running_total(lst): Returns a list where each element is the sum of the corresponding element from the original list and all previous elements. cumulative_sum = 0 result = [] for num in lst: cumulative_sum += num result.append(cumulative_sum) return result"},{"question":"You have been tasked with creating a function that determines if a string is valid based on specific criteria. A string is considered valid if it meets the following conditions: 1. It contains at least one uppercase letter. 2. It contains at least one lowercase letter. 3. It contains at least one digit. 4. It contains at least one special character from the set: [!@#%^&*()-+]. Your function should return `True` if the string is valid, and `False` otherwise. Write a function named `is_valid_string` which takes a single argument: - `s` (a non-empty string): The string to be checked for validity. # Example ```python is_valid_string(\\"HelloWorld1!\\") # Should return True is_valid_string(\\"helloworld\\") # Should return False ``` # Constraints - The string `s` will contain at least 1 character and at most 100 characters.","solution":"def is_valid_string(s): Determine if the string s is valid based on the given criteria. A string is considered valid if it contains at least one uppercase letter, one lowercase letter, one digit, and one special character from the set [!@#%^&*()-+]. Args: s (str): The string to be checked for validity. Returns: bool: True if valid, False otherwise. has_upper = any(c.isupper() for c in s) has_lower = any(c.islower() for c in s) has_digit = any(c.isdigit() for c in s) has_special = any(c in \'!@#%^&*()-+\' for c in s) return has_upper and has_lower and has_digit and has_special"},{"question":"A closely guarded space research lab consists of N chambers and M airlocks connecting them. Each chamber is numbered 1 through N and each airlock connects two different chambers bi-directionally. Your task is to design a series of inspections to ensure the safety of the lab. An inspection is defined as moving from one chamber to another either directly through an airlock or indirectly through a sequence of airlocks. Due to security constraints, each chamber can be inspected only once during a single inspection, otherwise, the inspection is considered invalid. Calculate the maximum number of valid inspections possible such that each inspection starts from any chamber and visits the largest possible number of chambers without revisiting any chamber. -----Input----- The first line contains two integers N and M (1 le N le 1500, 1 le M le 5000), the number of chambers and airlocks. Each of the following M lines contains two integers C_1 and C_2 (1 le C_1, C_2 le N), indicating an airlock between chambers C_1 and C_2. -----Output----- Output a single integer representing the maximum number of valid inspections. -----Examples----- Sample Input 1: 4 4 1 2 2 3 3 4 4 1 Sample Output 1: 1 Sample Input 2: 5 4 1 2 2 3 3 4 4 5 Sample Output 2: 2","solution":"def maximum_valid_inspections(N, M, connections): from collections import defaultdict, deque # Create a graph adjacency list graph = defaultdict(list) for c1, c2 in connections: graph[c1].append(c2) graph[c2].append(c1) visited = [False] * (N + 1) def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Find number of connected components components = 0 for chamber in range(1, N + 1): if not visited[chamber]: bfs(chamber) components += 1 return components # Parsing input function for testing purposes def parse_input(input_str): input_lines = input_str.strip().split(\'n\') N, M = map(int, input_lines[0].split()) connections = [tuple(map(int, line.split())) for line in input_lines[1:]] return N, M, connections"},{"question":"A parking lot charges fees based on the number of hours a car remains parked. The parking lot fees are structured as follows: - The first hour (or part of it) costs 5. - Each subsequent hour (or part of it) costs 3. Given an integer `N` representing the number of hours a car was parked, write a function `calculate_fee(N)` that calculates the total fee for parking the car. # Function Signature ```python def calculate_fee(N: int) -> int: ``` # Input - `N` (0 ≤ N ≤ 48): An integer representing the number of hours a car was parked. # Output - Return the total parking fee as an integer. # Examples Example 1 **Input:** ```python N = 1 ``` **Output:** ```python 5 ``` **Explanation:** The car was parked for 1 hour. The fee for the first hour is 5. Example 2 **Input:** ```python N = 3 ``` **Output:** ```python 11 ``` **Explanation:** The car was parked for 3 hours. The fee for the first hour is 5, then 2 additional hours cost 3 each. Total = 5 + 2 * 3 = 11. Example 3 **Input:** ```python N = 0 ``` **Output:** ```python 0 ``` **Explanation:** The car was not parked at all. The fee is 0. Example 4 **Input:** ```python N = 5 ``` **Output:** ```python 17 ``` **Explanation:** The car was parked for 5 hours. The fee for the first hour is 5, then 4 additional hours cost 3 each. Total = 5 + 4 * 3 = 17.","solution":"def calculate_fee(N: int) -> int: if N == 0: return 0 return 5 + (N - 1) * 3"},{"question":"You are given an array of integers `arr` and a target integer `target`. Your task is to determine whether there are two distinct integers in the array that sum up to the target value. If there exist such a pair, return the indices of the two numbers in any order. If no such pair exists, return `[-1, -1]`. # Example ``` Input: arr = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: arr[0] + arr[1] = 2 + 7 = 9 Input: arr = [1, 2, 3, 4, 5], target = 10 Output: [-1, -1] Explanation: No two numbers sum up to 10. ``` Note: - The input array may contain both positive and negative integers, as well as zero. - Assume that each input would have exactly one solution, if a valid pair exists. # Constraints - The array `arr` will have at most `10^4` integers. - Elements of `arr` are integers between `-10^5` and `10^5`. - The `target` value is an integer between `-10^5` and `10^5`. # Function Signature ```python def two_sum(arr: List[int], target: int) -> List[int]: pass ``` # Implementation Requirements - Use dictionaries/hashmaps to keep track of visited elements and their indices in order to achieve linear time complexity. - Handle edge cases, such as an empty array, appropriately.","solution":"from typing import List def two_sum(arr: List[int], target: int) -> List[int]: Returns the indices of two numbers in the array that add up to the target value, or [-1, -1] if such a pair does not exist. num_to_index = {} for index, num in enumerate(arr): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return [-1, -1]"},{"question":"Write a function `flatten_list` that takes a nested list (a list which may contain more lists) and returns a generator which yields the elements of the list in a flat structure. For example, given the list `[1, [2, 3], [4, [5, [6, 7]]], 8]`, the function should return an iterator that yields the values `1, 2, 3, 4, 5, 6, 7, 8` one by one. Constraints: * You **cannot** use any built-in flatten or deepflatten functions from any libraries. * The function must handle lists of arbitrary depth. * The function must preserve the order of elements as they appear in the original nested list. *Example:* ``` list(flatten_list([1, [2, 3], [4, [5, [6, 7]]], 8])) => [1, 2, 3, 4, 5, 6, 7, 8] list(flatten_list([1, 2, [3, 4, [5]], 6, [7, [8, 9, [10, 11]], 12]])) => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] ``` Make sure to include edge cases such as: * Empty list (i.e., `[]`) * Lists with non-numeric types (i.e., `[\'a\', [\'b\', \'c\'], [\'d\', [\'e\', [\'f\', \'g\']]], \'h\']`) * Lists that are not deeply nested","solution":"def flatten_list(nested_list): Takes a nested list and returns a generator which yields the elements of the list in a flat structure. Parameters: nested_list (list): A list which may contain more lists Returns: generator: A generator yielding elements in a flat structure for element in nested_list: if isinstance(element, list): yield from flatten_list(element) else: yield element"},{"question":"Given an array of integers, write a function that determines whether the array can be partitioned into two subsets such that the sum of elements in both subsets is the same. If this is possible, return True; otherwise, return False. For example, given the array [1, 5, 11, 5], the function should return True because the array can be partitioned into [1, 5, 5] and [11], both of which sum to 11. Given the array [1, 2, 3, 5], the function should return False because the array cannot be partitioned into subsets that have equal sums. Note: - You may assume that the length of the given array will not exceed 200. - The array will contain only positive integers.","solution":"def can_partition(nums): Determines whether the given array can be partitioned into two subsets such that the sum of the elements in both subsets is equal. :param nums: List of positive integers. :return: Boolean indicating whether the array can be partitioned. total_sum = sum(nums) # If the total sum is odd, we can\'t split it into two equal subsets if total_sum % 2 != 0: return False subset_sum = total_sum // 2 n = len(nums) # DP array to store whether a particular sum is possible dp = [False] * (subset_sum + 1) dp[0] = True for num in nums: for i in range(subset_sum, num - 1, -1): if dp[i - num]: dp[i] = True return dp[subset_sum]"},{"question":"You are given an island represented by an `n x n` grid. Each cell of the grid is either land (denoted by 1) or water (denoted by 0). A closed island is a group of land cells that are completely surrounded by water, including all diagonals. This means that the land cells cannot escape to the edge of the grid. Write a function `count_closed_islands(n, grid)` that counts the number of fully closed islands in the grid. -----Input----- * An integer `n` (1 ≤ n ≤ 100), the length of rows and columns of the grid. * A 2D list of integers `grid` with dimensions `n x n`, where each element is either 1 (land) or 0 (water). -----Output----- Return the number of closed islands. -----Examples----- Input 4 [ [1, 1, 1, 1], [1, 0, 0, 1], [1, 0, 1, 1], [1, 1, 1, 1] ] Output 1 Input 5 [ [1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1] ] Output 2 Input 3 [ [0, 0, 0], [0, 0, 0], [0, 0, 0] ] Output 0 -----Note----- In the first example, there is one closed island in the middle (1, 2), (2, 1), and (2, 2). In the second example, there are two closed islands: one at (1, 3) and another at (3, 1). In the third example, there are no closed islands since the entire grid is water.","solution":"def count_closed_islands(n, grid): def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= n: return False if grid[x][y] == 1: return True grid[x][y] = 1 # mark as visited up = dfs(x - 1, y) down = dfs(x + 1, y) left = dfs(x, y - 1) right = dfs(x, y + 1) return up and down and left and right closed_islands_count = 0 for i in range(n): for j in range(n): if grid[i][j] == 0: if dfs(i, j): closed_islands_count += 1 return closed_islands_count"},{"question":"John has a unique calculator that only supports two operations: addition and concatenation of two numbers. Given two integers, x and y, John wants to reach a target number, z, using these operations. Determine whether it is possible to achieve the target number z starting from x and y using a sequence of the operations. -----Input----- The input contains three space-separated integers - x, y, and z. (1 ≤ x, y ≤ 100, 1 ≤ z ≤ 100000). -----Output----- Print \\"Possible\\" if it is possible to reach the target number z using the allowed operations starting from x and y, otherwise print \\"Impossible\\" (without quotes). -----Constraints----- - You can perform any number of operations. - Concatenation of x and y means putting y immediately after x in decimal form (e.g., if x=12 and y=34, concatenation results in 1234 or 3412). -----Example----- Input: 2 3 23 Output: Possible -----Explanation----- By concatenating 2 and 3, we get 23, which is equal to the target number z. Therefore, the answer is \\"Possible\\".","solution":"def can_reach_target(x, y, z): Determines if it\'s possible to reach target number z using addition or concatenation of x and y. # Check if concatenation in any order gives z if int(f\\"{x}{y}\\") == z or int(f\\"{y}{x}\\") == z: return \\"Possible\\" # Use BFS/DFS or some other method if needed but in this case, let\'s brute-force # on given constraint (1 ≤ z ≤ 100000) and allowed additions explores = {x, y} queue = [(x, y)] while queue: a, b = queue.pop(0) if a + b == z: return \\"Possible\\" for addend in (x, y): new_num = a + addend if new_num <= 100000 and new_num not in explores: explores.add(new_num) queue.append((new_num, b)) new_num = b + addend if new_num <= 100000 and new_num not in explores: explores.add(new_num) queue.append((a, new_num)) return \\"Impossible\\""},{"question":"You are given a list of tuples, where each tuple contains two elements: a student\'s name and their exam score. Write a function `top_student()` that finds and returns the name of the student with the highest score. If there are multiple students with the highest score, return the name that comes first alphabetically. ```python >>> students = [(\\"John\\", 88), (\\"Emily\\", 93), (\\"Amanda\\", 93), (\\"Mike\\", 87)] >>> top_student(students) \'Amanda\' ``` The returned student\'s name should be a string. Assume there is at least one student in the list and that all scores are non-negative integers.","solution":"def top_student(students): This function finds and returns the name of the student with the highest score. If multiple students have the highest score, the one with the alphabetically first name is returned. Args: students (list of tuples): A list where each tuple contains a student\'s name and their exam score. Returns: str: The name of the student with the highest score. if not students: return None # Sort the students primarily by score in descending order, then by name in ascending order sorted_students = sorted(students, key=lambda x: (-x[1], x[0])) # The top student is the first in the sorted list return sorted_students[0][0]"},{"question":"A large ship is embarking on a journey that involves passing through several docks. Each dock has a certain amount of cargo that needs to be loaded onto the ship or unloaded from the ship. The ship has a maximum cargo capacity, and it must ensure at each dock that the total cargo onboard does not exceed this capacity nor fall below zero. Your task is to determine if the ship can successfully complete its journey without violating its cargo constraints. You are given the initial amount of cargo on the ship, the ship\'s maximum cargo capacity, and a list of cargo changes at each dock it passes through. A positive cargo change indicates loading cargo, and a negative cargo change indicates unloading cargo. -----Input----- The input consists of three parts: 1. An integer C (0 le C le 10^9) representing the initial cargo on the ship. 2. An integer M (1 le M le 10^9) representing the maximum cargo capacity of the ship. 3. A list of integers L of length n (1 le n le 10^6) where each integer represents the cargo change at a dock. -----Output----- Output \\"YES\\" if the ship can successfully complete its journey without violating the cargo constraints at any dock. Otherwise, output \\"NO\\". -----Examples----- Input 10 100 [20, -30, 10, 50] Output YES Input 50 150 [100, -200, 50] Output NO -----Note----- In the first example, the cargo changes are applied as follows: - Initial cargo: 10 - After first dock: 10 + 20 = 30 (valid) - After second dock: 30 - 30 = 0 (valid) - After third dock: 0 + 10 = 10 (valid) - After fourth dock: 10 + 50 = 60 (valid) Each step remains within the valid range of 0 to 100, so the output is \\"YES\\". In the second example: - Initial cargo: 50 - After first dock: 50 + 100 = 150 (valid) - After second dock: 150 - 200 = -50 (invalid, cargo falls below zero) The process violates the cargo constraints at the second dock, so the output is \\"NO\\".","solution":"def can_complete_journey(C, M, L): current_cargo = C for change in L: current_cargo += change if current_cargo < 0 or current_cargo > M: return \\"NO\\" return \\"YES\\""},{"question":"You are given two arrays of integers, nums1 and nums2, where nums1 contains n integers and nums2 contains m integers. Both arrays are sorted in non-decreasing order. Your task is to find the median of the combined array created by merging nums1 and nums2. The overall run-time complexity should be O(log(min(n, m))). -----Input----- The first line contains integer n (0 ≤ n ≤ 10^6), the size of the first array nums1. The next line contains n integers nums1[i] (−10^9 ≤ nums1[i] ≤ 10^9). The third line contains integer m (0 ≤ m ≤ 10^6), the size of the second array nums2. The next line contains m integers nums2[i] (−10^9 ≤ nums2[i] ≤ 10^9). -----Output----- In a single line print the median of the combined array. The median should be printed as a floating-point number with one digit of precision. -----Examples----- Example 1: Input 4 1 3 8 9 3 7 11 18 Output 8.0 Example 2: Input 2 1 2 3 3 4 5 Output 3.0 Example 3: Input 0 5 2 3 4 5 6 Output 4.0","solution":"def findMedianSortedArrays(nums1, nums2): Find the median of the merged sorted array from nums1 and nums2. if len(nums1) > len(nums2): nums1, nums2 = nums2, nums1 x, y = len(nums1), len(nums2) low, high = 0, x while low <= high: partitionX = (low + high) // 2 partitionY = (x + y + 1) // 2 - partitionX maxX = float(\'-inf\') if partitionX == 0 else nums1[partitionX - 1] minX = float(\'inf\') if partitionX == x else nums1[partitionX] maxY = float(\'-inf\') if partitionY == 0 else nums2[partitionY - 1] minY = float(\'inf\') if partitionY == y else nums2[partitionY] if maxX <= minY and maxY <= minX: if (x + y) % 2 == 0: return (max(maxX, maxY) + min(minX, minY)) / 2 else: return max(maxX, maxY) elif maxX > minY: high = partitionX - 1 else: low = partitionX + 1"},{"question":"You are given a list of integers. Design a class MaxSubarrayProduct that supports one function, MaxSubarrayProduct.maxProduct(). It will return the maximum product of a contiguous subarray. Examples: Input: MaxSubarrayProduct([2,3,-2,4]) MaxSubarrayProduct.maxProduct() // returns 6 Input: MaxSubarrayProduct([-2,0,-1]) MaxSubarrayProduct.maxProduct() // returns 0 Input: MaxSubarrayProduct([-4,-3]) MaxSubarrayProduct.maxProduct() // returns 12 Note: The input list of integers will have at least one element. The length of the input list will not exceed 10,000. The integers in the list fall within the range of [-10, 10].","solution":"class MaxSubarrayProduct: def __init__(self, nums): self.nums = nums def maxProduct(self): if not self.nums: return 0 max_product = min_product = result = self.nums[0] for num in self.nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Sophia is a member of the board game club at her school. Her favorite game involves arranging tiles on a 4x4 grid. Each tile has a number between 1 and 16, and each number appears exactly once on the grid. However, after playing the game for some time, some tiles may get misplaced. Your task is to help Sophia determine if a 4x4 grid configuration is valid by checking if all numbers from 1 to 16 are present exactly once. Input The input consists of 4 lines, each containing 4 integers representing the tiles on the grid. Output Print \\"VALID\\" if the configuration is valid, otherwise print \\"INVALID\\". Examples Input 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output VALID Input 1 2 2 4 5 6 7 8 9 10 11 12 13 14 15 16 Output INVALID Note In the first example, each number from 1 to 16 appears exactly once, so the output is \\"VALID\\". In the second example, the number 2 appears twice, so the output is \\"INVALID\\".","solution":"def is_valid_grid(grid): Checks if the 4x4 grid contains all numbers from 1 to 16 exactly once. Args: grid (list of lists of int): A 4x4 list of lists representing the grid. Returns: str: \'VALID\' if the grid is valid, \'INVALID\' otherwise. expected_numbers = set(range(1, 17)) grid_numbers = set(num for row in grid for num in row) if grid_numbers == expected_numbers: return \\"VALID\\" else: return \\"INVALID\\""},{"question":"A company is organizing a team-building event where employees will participate in a series of tasks. Each task can be performed by one or more employees, and some tasks depend on the completion of others. In order to ensure the event runs smoothly, the organizers need to determine the order in which the tasks should be performed. Each task and its dependencies are described, and you need to find a valid sequence of task completions that respects all dependencies. -----Input----- The first line of input contains two integers T and D (1 leq T leq 1000, 0 leq D leq 5000), where T is the number of tasks and D is the number of dependencies between the tasks. Each of the following D lines contains two integers a and b (1 leq a, b leq T), indicating that task a must be completed before task b. -----Output----- The first and only line of the output should contain a valid sequence of task completions. If there are multiple valid sequences, output any of them. If it is impossible to complete all tasks respecting the dependencies, output \\"IMPOSSIBLE\\". -----Examples----- Sample Input 1: 4 3 1 2 1 3 3 4 Sample Output 1: 1 3 4 2 Sample Input 2: 3 3 1 2 2 3 3 1 Sample Output 2: IMPOSSIBLE","solution":"from collections import deque def find_task_order(T, D, dependencies): graph = {i: [] for i in range(1, T + 1)} in_degrees = {i: 0 for i in range(1, T + 1)} for a, b in dependencies: graph[a].append(b) in_degrees[b] += 1 queue = deque([node for node in in_degrees if in_degrees[node] == 0]) result = [] while queue: current = queue.popleft() result.append(current) for neighbor in graph[current]: in_degrees[neighbor] -= 1 if in_degrees[neighbor] == 0: queue.append(neighbor) if len(result) == T: return result else: return \\"IMPOSSIBLE\\" def valid_task_sequence(T, D, dependencies): order = find_task_order(T, D, dependencies) if order == \\"IMPOSSIBLE\\": return \\"IMPOSSIBLE\\" else: return \\" \\".join(map(str, order))"},{"question":"Task Given an array of integers, perform the following operations: If the array is empty, print None. If the array contains only one distinct element, print that element. If the array contains more than one distinct element, print the second smallest element. Input Format A single line containing a space-separated list of integers. Constraints The number of integers in the list will not exceed 10^3. Output Format Print the second smallest element or other conditions as defined. Sample Input 0 7 7 7 7 Sample Output 0 7 Explanation 0 The array contains only one distinct element which is 7, so print 7. Sample Input 1 5 3 9 1 2 Sample Output 1 2 Explanation 1 The sorted sequence of distinct elements is [1, 2, 3, 5, 9]. The second smallest element is 2. Sample Input 2 10 Sample Output 2 10 Explanation 2 The array contains only one element which is 10, so print 10. Sample Input 3 1 1 1 1 Sample Output 3 1 Explanation 3 The sequence contains only one distinct element which is 1, so print 1. Sample Input 4 8 5 10 8 5 Sample Output 4 8 Explanation 4 The sorted sequence of distinct elements is [5, 8, 10]. The second smallest element is 8.","solution":"def second_smallest_element(arr): if not arr: return None distinct_elements = sorted(set(arr)) if len(distinct_elements) == 1: return distinct_elements[0] else: return distinct_elements[1]"},{"question":"Your friend is working on a virtual farming simulation game. The game world consists of a rectangular grid of size `n x m`. Each cell in the grid either contains fertile land or an obstacle (like a rock or a tree). The objective of the game is to find the largest possible rectangular plot of fertile land where crops can be planted. However, your friend needs your help in identifying this plot. Given a grid where \'1\' represents fertile land and \'0\' represents an obstacle, write a program to find the area of the largest rectangular plot of fertile land. Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the grid. - Each of the next `n` lines contains `m` characters, each being either \'0\' or \'1\', describing the grid. Output - Print one integer — the area of the largest rectangular plot of fertile land. Examples Input 3 4 1011 1101 1110 Output 4 Input 2 2 11 01 Output 2","solution":"def largest_rectangle_area_in_histogram(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def largest_rectangle_in_grid(n, m, grid): if not grid or n == 0 or m == 0: return 0 max_area = 0 dp = [0] * m for i in range(n): for j in range(m): dp[j] = dp[j] + 1 if grid[i][j] == \'1\' else 0 max_area = max(max_area, largest_rectangle_area_in_histogram(dp)) return max_area"},{"question":"Farmer John\'s cows are standing in a row, each facing either left or right. Farmer John records the entire row of cows with their positions using the characters \'L\' and \'R\' where \'L\' indicates a cow facing left and \'R\' indicates a cow facing right. Farmer John wants to know the minimal number of cows that have to be instructed to turn around so that all the cows will be facing the same direction (either all left or all right). ------ Input ------ The input consists of a single string s (1 ≤ |s| ≤ 10^5) representing the initial positions of the cows. ------ Output ------ Output a single integer — the minimal number of cows that have to be instructed to turn around. ------ Example ------ Input: LRLR Output: 2 Input: LLRRR Output: 2 Input: RLRLRL Output: 3","solution":"def minimize_turns(cows: str) -> int: Returns the minimal number of cows that have to be instructed to turn around so that all cows will be facing the same direction. Parameters: cows (str): A string representing the initial positions of the cows, where \'L\' is a cow facing left and \'R\' is a cow facing right. Returns: int: The minimal number of cows that have to be turned. countL = cows.count(\'L\') countR = cows.count(\'R\') # Either turn all \'L\' to \'R\' or turn all \'R\' to \'L\' return min(countL, countR)"},{"question":"Problem You are working on a secure messaging application, and you need to implement a feature that ensures messages are properly encrypted. One core component of this feature is to generate a sequence of rotated versions of the original message string, to enhance its security. Each rotation involves moving the first character of the string to the end. Given a string `s`, generate all possible rotations of the string and return them as a list. The order of rotations in the list should follow the order of their creation. Constraints The input satisfies the following conditions. * 1 leq |s| leq 100 Input The input is given in the following format: * `s`: a string consisting of printable ASCII characters with a length between 1 and 100. Output Output all the rotations of the string, each on a new line. Examples Input `rotation` Output `rotation` `otationr` `tationro` `ationrot` `tionrota` `ionrotat` `onrotati` `nrotatio` Input `abc` Output `abc` `bca` `cab`","solution":"def generate_rotations(s): Generates all rotations of the input string s. :param s: A string consisting of printable ASCII characters with length between 1 and 100 :return: A list of all rotations of the string rotations = [] length = len(s) for i in range(length): rotated_string = s[i:] + s[:i] rotations.append(rotated_string) return rotations"},{"question":"In a small town, there is a famous bakery that bakes some of the best cookies in the region. The owner is very particular about the presentation and likes to arrange cookies in consecutive boxes, but he follows a specific pattern when labeling his boxes. He relabels each box with the number of cookies in that box subtracted from the total number of cookies in the largest box for the day. Given an array of integers where each element represents the number of cookies in each box, your task is to write a function that returns an array of integers where each element is the new label for each box after the relabeling. The largest box should have a new label of 0. **Input:** The input consists of two lines: - The first line contains an integer, N, the number of boxes. - The second line contains N space-separated integers where each integer represents the number of cookies in each box. **Output:** Output a single line containing N space-separated integers which are the new labels for each box. **Example:** Input: 5 3 7 2 5 9 Output: 6 2 7 4 0 **Explanation:** In this example, the largest box contains 9 cookies. The new labels are calculated as follows: - For the first box: 9 - 3 = 6 - For the second box: 9 - 7 = 2 - For the third box: 9 - 2 = 7 - For the fourth box: 9 - 5 = 4 - For the fifth box: 9 - 9 = 0","solution":"def relabel_boxes(N, cookies): Relabel boxes where each box\'s new label is the max cookies in the largest box subtracted by the number of cookies in that box. Parameters: N (int) : Number of boxes cookies (list): List of integers where each integer represents the number of cookies in each box Returns: list: List of integers representing the new labels for each box max_cookies = max(cookies) new_labels = [max_cookies - cookie for cookie in cookies] return new_labels"},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the original list, arranged in descending order. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. For example: ```python get_primes([2, 3, 4, 5, 6, 7, 8, 9, 10]) == [7, 5, 3, 2] get_primes([12, 14, 15, 16, 18, 19, 20]) == [19] get_primes([1, 11, 13, 17, 22, 23, 24]) == [23, 17, 13, 11] get_primes([29, 31, 37, 41, 43, 47, 51]) == [47, 43, 41, 37, 31, 29] get_primes([48, 50, 55, 57, 59, 62]) == [59] ```","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def get_primes(numbers): Returns a list of prime numbers from the input list, sorted in descending order. primes = [num for num in numbers if is_prime(num)] return sorted(primes, reverse=True)"},{"question":"Given an array of positive integers, sort the array such that all even numbers precede all odd numbers. The relative order among even and odd numbers should be maintained as in the original array. Implement the function: ```python def sort_even_before_odd(arr: List[int]) -> List[int]: ``` **Input** - `arr`: A list of positive integers. Constraints: * The length of the array `arr` will be between 1 and 1000, inclusive. * Each integer in the array `arr` will be between 1 and 1000, inclusive. **Output** - The function should return a new list where all even numbers precede all odd numbers while maintaining their relative order from the original array. **Examples** Input: ``` [3, 1, 2, 4] ``` Output: ``` [2, 4, 3, 1] ``` Input: ``` [10, 21, 22, 44] ``` Output: ``` [10, 22, 44, 21] ``` Input: ``` [7, 5, 4, 6, 3] ``` Output: ``` [4, 6, 7, 5, 3] ```","solution":"from typing import List def sort_even_before_odd(arr: List[int]) -> List[int]: This function sorts the array such that all even numbers precede all odd numbers while maintaining their relative order from the original array. even_numbers = [x for x in arr if x % 2 == 0] odd_numbers = [x for x in arr if x % 2 != 0] return even_numbers + odd_numbers"},{"question":"Alice is arranging a treasure hunt game in a large garden, which is represented as a 2D grid of size MxN. Each cell within this grid can either be an empty space (.) or contain an obstacle (#). Alice will place a single treasure represented by a \'T\' in one of the empty cells. The participants start at the top-left corner of the grid (0, 0) and aim to reach the treasure in the shortest possible path, moving up, down, left, or right onto empty cells. Given the grid layout, your task is to find the minimum number of moves required for the participants to reach the treasure. If it is impossible to reach the treasure due to obstacles, return -1. Input: The first line contains an integer K - the number of test cases. Each test case starts with two space-separated integers M and N - representing the number of rows and columns of the grid respectively. The next M lines each contain N characters - either \'.\', \'#\', or \'T\'. Output: Print the minimum number of moves required for each test case in a new line. If the treasure is unreachable, return -1. Constraints: 1 ≤ K ≤ 100 2 ≤ M, N ≤ 100 SAMPLE INPUT 2 4 4 .... .#.. ..#T .... 3 3 # #T# # SAMPLE OUTPUT 5 -1 Explanation: In the first test case, the shortest path to the treasure is right -> right -> down -> down -> right, totaling 5 moves. In the second test case, it is impossible to reach the treasure as it is surrounded by obstacles on all sides.","solution":"from collections import deque def min_moves_to_treasure(test_cases): def bfs(grid, start, end, M, N): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] != \'#\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 results = [] for test_case in test_cases: M, N, grid = test_case start = (0, 0) end = None for i in range(M): for j in range(N): if grid[i][j] == \'T\': end = (i, j) break if end: break results.append(bfs(grid, start, end, M, N)) return results # Example input and output test_cases = [ (4, 4, [\\"....\\", \\".#..\\", \\"..#T\\", \\"....\\"]), (3, 3, [\\"#\\", \\"#T#\\", \\"#\\"]) ] print(min_moves_to_treasure(test_cases)) # Output: [5, -1]"},{"question":"You are presented with a series of stock prices for N days. Your task is to determine if it is possible to earn a profit by buying on one day and selling on another day that comes after the buying day. Let\'s denote the stock prices by an array `P` of length N, where `P[i]` is the price of the stock on the i-th day. For each day i such that 1 ≤ i ≤ N - 1, output `Yes` if there exists a day j such that i < j ≤ N and P[i] < P[j], otherwise output `No`. Constraints: * 2 ≤ N ≤ 200000 * 1 ≤ P[i] ≤ 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: N P_1 P_2 P_3 ... P_N Output Print the answer in N-1 lines. The i-th line should contain `Yes` if there exists a day j such that i < j ≤ N and P[i] < P[j], and `No` otherwise. Examples Input 5 3 1 4 1 5 Output Yes Yes Yes Yes Input 4 7 6 4 3 Output No No No Input 10 8 7 1 2 5 6 4 8 9 10 Output Yes Yes Yes Yes Yes Yes Yes Yes Yes","solution":"def stock_profit_possible(N, P): Given N (number of days) and P (list of stock prices), the function returns a list of \'Yes\' or \'No\' indicating whether it is possible to buy on day i and sell on a later day j for a profit. results = [] max_future_price = P[-1] for i in range(N-2, -1, -1): if P[i] < max_future_price: results.append(\\"Yes\\") else: results.append(\\"No\\") max_future_price = max(max_future_price, P[i]) return results[::-1]"},{"question":"You are provided with a grid represented by an array of strings. Each string contains only the characters \'.\' and \'#\', where \'.\' represents an empty cell and \'#\' represents a walled cell. You need to find the shortest path from the top-left corner of the grid to the bottom-right corner. You can only move up, down, left, and right. Write a function to find the shortest path, if it exists. If no such path exists, return -1. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 1000) — the number of test cases. For each test case: - The first line contains two integers n and m (1 le n, m le 200) — the dimensions of the grid. - The next n lines contain m characters each, representing the grid. -----Output----- For each test case, print a single integer — the length of the shortest path from the top-left corner to the bottom-right corner. If there is no path, print -1. -----Examples----- Input 2 5 5 ..... .#.#. .#.#. .#.#. ..... 3 3 # #.# # Output 8 -1 -----Note----- In the first test case, the grid is: ``` ..... .#.#. .#.#. .#.#. ..... ``` A possible shortest path is to move down to the second row, move right to bypass the walls, and then move down again. The length of the shortest path is 8. In the second test case, the grid is: ``` # #.# # ``` There is no path from the top-left to the bottom-right corner, so the output is -1.","solution":"from collections import deque def shortest_path(grid): def bfs(start, end): rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([start]) visited = set([start]) path_length = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == end: return path_length for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) path_length += 1 return -1 start = (0, 0) end = (len(grid) - 1, len(grid[0]) - 1) if grid[0][0] == \'#\' or grid[end[0]][end[1]] == \'#\': return -1 return bfs(start, end) def process_test_cases(test_cases): results = [] for n, m, grid in test_cases: results.append(shortest_path(grid)) return results"},{"question":"You are given a list of integers and a series of operations to perform on that list. Your task is to return the result of the specified operations in order. There are three types of operations: - \\"ADD x\\": Add the integer x to the end of the list. - \\"REMOVE\\": Remove the last integer from the list (this operation will always be valid and won\'t be called on an empty list). - \\"FIND_MIN\\": Output the smallest integer currently in the list. Your task is to process a series of these operations and return the result of each \\"FIND_MIN\\" operation. -----Constraints----- - The input list initially contains exactly one integer. - 1 ≤ Number of operations ≤ 10^5 - The integer values can range between -10^9 and 10^9. -----Input----- Input is given from Standard Input in the following format: n operation_1 : operation_n The first line contains a single integer representing the initial value in the list. Each of the following n lines contains one of the three operations in the format specified above. -----Output----- For each \\"FIND_MIN\\" operation, print a line containing the smallest integer currently in the list. -----Sample Input----- 5 ADD 3 ADD 2 ADD 8 FIND_MIN REMOVE FIND_MIN -----Sample Output----- 2 2 In the above case, the initial list contains the single number 5. After performing the operations ADD 3, ADD 2, and ADD 8, the list becomes [5, 3, 2, 8]. The first FIND_MIN operation returns the smallest integer in the list, which is 2. After removing the last element, the list becomes [5, 3, 2]. The second FIND_MIN operation again returns 2, which is the smallest integer in the list.","solution":"def process_operations(initial_value, operations): lst = [initial_value] result = [] for op in operations: if op.startswith(\\"ADD\\"): _, x = op.split() lst.append(int(x)) elif op == \\"REMOVE\\": lst.pop() elif op == \\"FIND_MIN\\": result.append(min(lst)) return result"},{"question":"Create a Python function that takes an input string representing a mathematical expression containing only non-negative integers, parentheses, plus `+`, and minus `-` operators and evaluates the expression. The input string will be properly formatted with no space characters. Constraints: - The input string length will be at least 1 and will not exceed 1000 characters. - The input string will always evaluate to a valid integer result. Function Signature: ```python def evaluate_expression(expression: str) -> int: ``` Input Format: A string `expression` representing the mathematical expression to be evaluated. Output Format: An integer representing the result of the evaluated expression. SAMPLE INPUT ```python \\"2-(3+4)\\" ``` SAMPLE OUTPUT ```python -5 ``` Explanation: The expression `2-(3+4)` is evaluated as `2-(7)` which equals `-5`.","solution":"def evaluate_expression(expression: str) -> int: This function evaluates a mathematical expression containing non-negative integers, parentheses, plus (+), and minus (-) operators and returns the result. def helper(expr, index): stack, num, sign = [], 0, 1 # sign is 1 for positive, -1 for negative while index < len(expr): char = expr[index] if char.isdigit(): num = num * 10 + int(char) elif char == \'+\': stack.append(sign * num) num, sign = 0, 1 elif char == \'-\': stack.append(sign * num) num, sign = 0, -1 elif char == \'(\': res, j = helper(expr, index + 1) stack.append(sign * res) index = j num, sign = 0, 1 elif char == \')\': stack.append(sign * num) return sum(stack), index index += 1 stack.append(sign * num) return sum(stack) return helper(expression, 0)"},{"question":"# Task: Write a function `format_duration` that takes a non-negative integer (seconds) and returns the duration in a human-readable format. * The function should return a string in the format \\"X years, Y days, Z hours, A minutes and B seconds\\". * If the input is 0, it should return \\"now\\". * For the sake of simplicity, assume that a year has 365 days and a day has 24 hours. * Components that are 0 should be omitted, except when the duration is \'now\'. # Examples: format_duration(62): \'1 minute and 2 seconds\' format_duration(3662): \'1 hour, 1 minute and 2 seconds\' format_duration(31536000): \'1 year\' Note: Use commas to separate the components except the last component which should be prefixed with \'and\'.","solution":"def format_duration(seconds): if seconds == 0: return \\"now\\" intervals = [ (\\"year\\", 365 * 24 * 60 * 60), (\\"day\\", 24 * 60 * 60), (\\"hour\\", 60 * 60), (\\"minute\\", 60), (\\"second\\", 1) ] parts = [] for name, count in intervals: value = seconds // count if value > 0: parts.append(f\\"{value} {name}\\" + (\\"s\\" if value > 1 else \\"\\")) seconds %= count if len(parts) == 1: return parts[0] return \', \'.join(parts[:-1]) + \' and \' + parts[-1]"},{"question":"You are given an array representing heights of buildings in a skyline. Your task is to compute the total area covered by the buildings when viewed from the side. Each building\'s width is 1 unit, and the height is given by the value at the respective index in the array. The buildings are contiguous, and the starting point is the leftmost building (index 0) moving towards the rightmost building (index `n-1`). # Example: Given the following array of building heights: ``` [2, 1, 3] ``` The skyline would look like this when viewed from the side: ``` # # # # # ``` The total area covered by these buildings is `2 + 1 + 3 = 6`. Write a function `calculate_area(heights)` which takes an array of non-negative integers as input and returns the total area covered by the buildings. # Function signature: `def calculate_area(heights: list[int]) -> int:` # Parameters: - `heights` (list of int): A list of non-negative integers representing the heights of the buildings. # Returns: - `int`: The total area covered by the buildings. # Constraints: - The length of the array (number of buildings) will be between `1` and `10^6`. - Heights of the buildings will be non-negative integers, each within the range `[0, 10^4]`. # Example 1: ```python calculate_area([2, 1, 3]) ``` Output: ``` 6 ``` # Example 2: ```python calculate_area([0, 1, 4, 3]) ``` Output: ``` 8 ```","solution":"def calculate_area(heights): Calculates the total area covered by the buildings when viewed from the side. :param heights: List of non-negative integers representing the heights of the buildings. :return: Total area covered by the buildings. return sum(heights)"},{"question":"Given an array of integers, find the maximum sum of any non-empty subarray. Input Format The first line contains an integer, n, the size of the array. The second line contains n space-separated integers representing the elements of the array. Output Format Print a single integer, the maximum sum of any non-empty subarray. Input Constraints 1 ≤ n ≤ 10^5 -10^4 ≤ array[i] ≤ 10^4 SAMPLE INPUT 5 1 -2 3 4 -1 SAMPLE OUTPUT 7 Explanation In the given array, the subarray with the maximum sum is [3, 4] and its sum is 7.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any non-empty subarray. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Alex loves playing with binary strings and has recently come up with a new measure of similarity between them. He defines the similarity of two binary strings of the same length as the number of positions at which both strings have the same character. He gives you two binary strings of the same length and wants you to calculate their similarity. Input format The first line of input contains an integer n (1 ≤ n ≤ 10^6), the length of the binary strings. The next two lines each contain a binary string of length n. Output format Print a single integer, the similarity of the two binary strings. SAMPLE INPUT 5 11001 10011 SAMPLE OUTPUT 3 Explanation The given binary strings \\"11001\\" and \\"10011\\" have the same characters at positions 1, 2, and 5. Therefore, their similarity is 3.","solution":"def calculate_similarity(n, binary_string1, binary_string2): Returns the similarity of two binary strings of the same length, which is the number of positions at which both strings have the same character. Parameters: n (int): The length of the binary strings. binary_string1 (str): The first binary string of length n. binary_string2 (str): The second binary string of length n. Returns: int: The similarity of the two binary strings. similarity = 0 for i in range(n): if binary_string1[i] == binary_string2[i]: similarity += 1 return similarity"},{"question":"A group of robots has just been released onto a grid, and they need to find their way back to their docking stations. The grid is represented as an n x n matrix. Each robot can move up, down, left, or right, but it must avoid obstacles on the grid. Obstacles are represented by 1s and free spaces by 0s. Initially, each robot\'s dock is located at cell (0, 0). The objective for every robot is to find the shortest path from its starting position to its docking station. Write a function `shortestPath(homeBase)` that takes in the initial positions of the robots and returns a list of the shortest paths for each robot from its start position to the docking station. If it is impossible for a robot to reach its docking station, return `-1` for that robot. Input: - The first line contains an integer `n`, representing the dimensions of the grid (2 <= n <= 50). - The second line contains two integers `x` and `y` representing the initial position of the robot on the grid (0 <= x, y < n). - The next `n` lines each contain `n` integers, representing the grid where `0` is a free space and `1` is an obstacle. Output: - Return an integer representing the minimum number of steps required for the robot to reach the docking station at cell (0, 0). If the docking station is unreachable, return `-1`. Example Input 4 3 3 0 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 Output 6","solution":"from collections import deque def shortestPath(n, x, y, grid): Returns the minimum number of steps required for the robot to reach the docking station at cell (0, 0). If the docking station is unreachable, returns -1. def is_valid(nx, ny): return 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(x, y, 0)]) visited = set((x, y)) while queue: cx, cy, dist = queue.popleft() if cx == 0 and cy == 0: return dist for dx, dy in directions: nx, ny = cx + dx, cy + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given a string consisting of lowercase alphabets and a pattern string consisting of lowercase alphabets and wildcards \'?\'. The wildcard \'?\' can represent any single character. Write a function to determine if the given pattern matches the string. Example 1: Input: str = \\"abcdef\\" pattern = \\"a?cde?\\" Output: True Explanation: The pattern matches the string as \'?\' can represent \'b\' and \'f\'. Example 2: Input: str = \\"hello\\" pattern = \\"h?llo\\" Output: True Explanation: The pattern matches the string as \'?\' can represent \'e\'. Example 3: Input: str = \\"hello\\" pattern = \\"he?\\" Output: False Explanation: The pattern does not match the string as it is shorter than the string. Your Task: You do not need to read input or print anything. Complete the function isMatch() which takes the string `str` and the pattern `pattern` as input parameters and returns a boolean indicating whether the pattern matches the string. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ length of str, pattern ≤ 10^5 pattern will contain only lowercase alphabets and the wildcard \'?\'.","solution":"def isMatch(str, pattern): Determine if the given pattern matches the string. Args: str (str): The input string consisting of lowercase alphabets. pattern (str): The pattern string consisting of lowercase alphabets and wildcards \'?\'. Returns: bool: True if the pattern matches the string, False otherwise. if len(str) != len(pattern): return False for i in range(len(str)): if pattern[i] != \'?\' and pattern[i] != str[i]: return False return True"},{"question":"You are given a list of space-separated words, your task is to find out the most frequent word in the list. If there are multiple words with the same frequency, return the one that comes first lexicographically. Input A list of space-separated words. Output The most frequent word. If multiple words have the same maximum frequency, return the smallest one lexicographically. Constraints 1 ≤ Number of words ≤ 1000 1 ≤ Length of each word ≤ 100 SAMPLE INPUT apple banana apple orange banana banana SAMPLE OUTPUT banana Explanation In the sample input, the word frequencies are: apple: 2 banana: 3 orange: 1 The word \\"banana\\" appears the most frequently (3 times), so it is the output.","solution":"from collections import Counter def most_frequent_word(words): Returns the most frequent word from the list of space-separated words. If there are multiple words with the same frequency, the one that comes first lexicographically is returned. word_list = words.split() word_count = Counter(word_list) # Find the maximum frequency max_freq = max(word_count.values()) # Filter words with the maximum frequency and return the lexicographically smallest one freq_words = [word for word, count in word_count.items() if count == max_freq] return min(freq_words)"},{"question":"A company is organizing an event and has decided to use a lucky draw system to distribute prizes. The company has n types of prizes, each type having a different number of prizes available. Participants in the event can win at most one prize of each type. To manage this lucky draw, they need a program that tracks the available prizes and handles participants\' winning requests. Each winning request specifies a type of prize and a participant\'s ID. If there is an available prize of the specified type, the participant wins it and the number of available prizes of that type is decreased by one. If there are no available prizes of the specified type, the request is denied. Write a program to handle these winning requests. ----Input---- The first line contains an integer n (1 le n le 10^5), the number of different types of prizes. The second line contains n integers, where the i-th integer p_i (0 le p_i le 10^9) denotes the number of available prizes of type i. The third line contains an integer q (1 le q le 10^5), the number of winning requests. Next q lines contain q winning requests, each represented by two integers t and id (1 le t le n, 1 le id le 10^9), indicating that the participant with ID id is requesting a prize of type t. ----Output---- For each winning request, print \\"ACCEPT\\" if the request is accepted and the participant wins a prize of the specified type. Print \\"REJECT\\" if there are no available prizes of the specified type. ----Example---- Input 3 5 0 2 5 1 100 2 101 3 102 1 103 3 104 Output ACCEPT REJECT ACCEPT ACCEPT ACCEPT Note: - In the first request, the participant with ID 100 wins a prize of type 1. - In the second request, there are no available prizes of type 2. - In the third request, the participant with ID 102 wins a prize of type 3. - In the fourth request, the participant with ID 103 wins another prize of type 1. - In the fifth request, the participant with ID 104 wins the last available prize of type 3.","solution":"def handle_lucky_draw(n, prizes, requests): results = [] for t, id in requests: if prizes[t - 1] > 0: results.append(\\"ACCEPT\\") prizes[t - 1] -= 1 else: results.append(\\"REJECT\\") return results"},{"question":"You are given a list of strings, and Q queries to process. Each query is a string S, and you need to determine how many times S appears in the list of strings. Input: The first line contains two integers, M and Q, denoting the number of strings and the number of queries. The second line contains M space-separated strings. The next Q lines each contain a single string S. Output: For each query, print the number of times the string S appears in the list of strings. Constraints: 1 ≤ M, Q ≤ 10^5 1 ≤ length of any string ≤ 100 SAMPLE INPUT 5 3 apple banana apple orange banana apple banana grape SAMPLE OUTPUT 2 2 0","solution":"def count_string_occurrences(strings, queries): This function returns a list of counts of each query string in the input list of strings. :param strings: List of strings :param queries: List of query strings :return: List of counts of each query string in the input list of strings string_count = {} for string in strings: if string in string_count: string_count[string] += 1 else: string_count[string] = 1 result = [] for query in queries: result.append(string_count.get(query, 0)) return result # Example usage (not included in actual function definition): # strings = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\"] # queries = [\\"apple\\", \\"banana\\", \\"grape\\"] # print(count_string_occurrences(strings, queries)) # Output should be [2, 2, 0]"},{"question":"Given a string, determine the first non-repeating character in it and return its index. If it does not exist, return -1. You may assume the string contains only lowercase English letters. Example: ``` Input: \\"leetcode\\" Output: 0 Input: \\"loveleetcode\\" Output: 2 Input: \\"aabb\\" Output: -1 ```","solution":"def first_uniq_char(s): Given a string, determine the first non-repeating character in it and return its index. If it does not exist, return -1. :param s: str :return: int from collections import defaultdict char_count = defaultdict(int) # Count the occurrences of each character for char in s: char_count[char] += 1 # Find the index of the first non-repeating character for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"Given a matrix with M rows and N columns, your task is to rotate the matrix 90 degrees clockwise. Write a function that takes in a 2D list of integers representing the matrix and returns the rotated matrix. ------ Input Format ------ - The first line contains two integers M and N, representing the number of rows and columns in the matrix respectively. - The next M lines each contain N integers representing the elements of the matrix. ------ Output Format ------ The output should be the rotated matrix with N rows and M columns. ------ Constraints ------ 1 ≤ M, N ≤ 1000 ------ Sample Input 1 ------ 3 3 1 2 3 4 5 6 7 8 9 ------ Sample Output 1 ------ 7 4 1 8 5 2 9 6 3 ------ Explanation 1 ------ The given 3x3 matrix: ``` 1 2 3 4 5 6 7 8 9 ``` After rotating 90 degrees clockwise, it becomes: ``` 7 4 1 8 5 2 9 6 3 ``` ------ Sample Input 2 ------ 2 4 1 2 3 4 5 6 7 8 ------ Sample Output 2 ------ 5 1 6 2 7 3 8 4 ------ Explanation 2 ------ The given 2x4 matrix: ``` 1 2 3 4 5 6 7 8 ``` After rotating 90 degrees clockwise, it becomes: ``` 5 1 6 2 7 3 8 4 ```","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given matrix 90 degrees clockwise. :param matrix: List[List[int]] - The 2D list of integers representing the matrix. :return: List[List[int]] - The rotated matrix. # Get the number of rows and columns of the input matrix M = len(matrix) N = len(matrix[0]) # Create and initialize the result matrix with the dimensions reversed rotated_matrix = [[0] * M for _ in range(N)] # Populate the rotated matrix with elements from the original matrix for i in range(M): for j in range(N): rotated_matrix[j][M - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Given a two-dimensional grid of characters and a target string, write a function that determines if the target string exists in the grid. The string can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. # Input - A two-dimensional list of characters representing the grid. - A string representing the target word. # Output - A boolean value: `True` if the target string exists in the grid, `False` otherwise. # Example ```python # Example 1 grid = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCCED\\" # Output: True # Example 2 word = \\"SEE\\" # Output: True # Example 3 word = \\"ABCB\\" # Output: False ``` # Constraints - The dimensions of the grid are not more than 200x200. - The length of the target string is not more than 10^4. - All characters are uppercase English letters.","solution":"def exist(grid, word): rows, cols = len(grid), len(grid[0]) def backtrack(r, c, suffix): if len(suffix) == 0: return True if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] != suffix[0]: return False ret = False grid[r][c], temp = \'#\', grid[r][c] # Mark the cell as visited for row_offset, col_offset in [(0, 1), (1, 0), (0, -1), (-1, 0)]: ret = backtrack(r + row_offset, c + col_offset, suffix[1:]) if ret: break grid[r][c] = temp # Unmark the cell return ret for i in range(rows): for j in range(cols): if backtrack(i, j, word): return True return False"},{"question":"Bubble City is a fictional place where cars use bubbles to float above the ground for transportation. The city has a unique set of roads represented as a grid of size `n x m`. Each cell in the grid can either be empty or contain an obstacle. Cars can move from one cell to an adjacent cell (up, down, left, or right) unless there is an obstacle. The Mayor of Bubble City is planning to optimize the pathfinding system of the city’s car navigation app. He needs your help to calculate the minimum number of moves required for a car to go from the top-left corner of the grid (cell `(0, 0)`) to the bottom-right corner (cell `(n-1, m-1)`). Write a program that determines the minimum number of moves required to travel from the top-left corner to the bottom-right corner in the shortest time possible. If it is not possible to reach the destination, the program should return -1. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the grid. - The next n lines contain m characters each, representing the grid. Each character can be either `.` (empty cell) or `#` (obstacle). Output: - Output a single integer, the minimum number of moves required to go from the top-left corner to the bottom-right corner, or `-1` if it is not possible. Examples: Input: 4 4 .... .. .... .... Output: 6 Input: 3 3 ... .#. ..# Output: -1 Input: 5 5 ..... .#.#. .#.#. .#.#. ..... Output: 8","solution":"from collections import deque def min_moves_to_reach_destination(n, m, grid): Returns the minimum number of moves required to go from the top-left corner to the bottom-right corner. If it is not possible, returns -1. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 moves = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(0, 0, 0)]) # (x, y, distance) while queue: x, y, dist = queue.popleft() if x == n - 1 and y == m - 1: return dist for move in moves: new_x, new_y = x + move[0], y + move[1] if 0 <= new_x < n and 0 <= new_y < m and not visited[new_x][new_y] and grid[new_x][new_y] == \'.\': visited[new_x][new_y] = True queue.append((new_x, new_y, dist + 1)) return -1 # Example usage: n = 4 m = 4 grid = [ \\"....\\", \\"..\\", \\"....\\", \\"....\\" ] print(min_moves_to_reach_destination(n, m, grid)) # Output should be 6"},{"question":"There is a large square grid of size N x N. Each cell in the grid can either be \'empty\' or contain an \'obstacle\'. You are given the grid and need to determine if there exists a path from the top-left corner of the grid (0, 0) to the bottom-right corner of the grid (N-1, N-1). You can only move right or down from any cell. Input: The first line of input contains an integer T, the number of test cases. Each test case contains: - An integer N, the size of the grid. - N lines each containing N characters (\'E\' for empty and \'O\' for obstacle), representing the grid. Output: For each test case, print \\"YES\\" if there exists a path from (0, 0) to (N-1, N-1), otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 Each grid cell is either \'E\' or \'O\'. SAMPLE INPUT 2 2 EE EO 3 EOE EEE OEE SAMPLE OUTPUT NO YES Explanation: In the first test case, although the first row is clear, the bottom-right cell is an obstacle, so no path exists. In the second test case, there is a clear path from (0, 0) to (2, 2). The grid structure and path consideration make this problem a typical graph traversal challenge where correctness and efficiency are key.","solution":"def path_exists(grid): Determines if there exists a path from the top-left corner to the bottom-right corner of the grid. :param grid: List[List[str]] -- the grid of size N x N :return: str -- \\"YES\\" if a path exists, otherwise \\"NO\\" N = len(grid) if grid[0][0] == \'O\' or grid[N-1][N-1] == \'O\': return \\"NO\\" from collections import deque # Directions right and down directions = [(0, 1), (1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == N - 1 and y == N - 1: return \\"YES\\" for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < N and 0 <= ny < N and grid[nx][ny] == \'E\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" def exists_path_in_grids(T, test_cases): results = [] for grid in test_cases: results.append(path_exists(grid)) return results # Input and Output part formatted to be used in testing purpose def formatted_result(T, test_cases): Helper function to parse input and return expected results results = exists_path_in_grids(T, test_cases) for result in results: print(result)"},{"question":"Given a 2D grid where different islands are represented by different positive integers, compute the size of the largest island. An island is a group of adjacent cells connected horizontally or vertically (not diagonally) and having the same integer value. You may assume no two adjacent islands will have the same value. Example: grid = [ [1, 1, 0, 0], [1, 2, 2, 0], [0, 0, 3, 3], [0, 0, 0, 3] ] In the above grid, the sizes of the islands are: Island 1: 3 cells Island 2: 2 cells Island 3: 3 cells So, the largest island size is 3. Follow up: Could you solve it using DFS or BFS with O(n × m) time complexity, where n and m are the grid dimensions?","solution":"def largest_island_size(grid): rows, cols = len(grid), len(grid[0]) visited = [[False] * cols for _ in range(rows)] def dfs(x, y, island_value): if x < 0 or x >= rows or y < 0 or y >= cols or grid[x][y] != island_value or visited[x][y]: return 0 visited[x][y] = True size = 1 size += dfs(x-1, y, island_value) size += dfs(x+1, y, island_value) size += dfs(x, y-1, island_value) size += dfs(x, y+1, island_value) return size max_size = 0 for i in range(rows): for j in range(cols): if not visited[i][j] and grid[i][j] != 0: island_size = dfs(i, j, grid[i][j]) max_size = max(max_size, island_size) return max_size"},{"question":"Meera wants to build a network of highways to connect multiple cities. Each city can be represented as a node and each highway as an edge. The map of cities and possible highways between them is given as an undirected graph with weighted edges. Meera wants to ensure that every city is connected directly or indirectly through the network of highways while minimizing the total length of highways used. Given a list of cities and highways, help Meera determine the minimum total length of highways required to connect all the cities. -----Input----- The first line contains two integers, n and m (1 le n le 10^5, 0 le m le 3 cdot 10^5) — the number of cities and the number of possible highways, respectively. Each of the following m lines contains three integers u, v, and w (1 le u, v le n, 1 le w le 10^9) — representing a highway that connects city u and city v with length w. -----Output----- Print one integer — the minimum total length of highways required to connect all cities. If it is impossible to connect all cities, return -1. -----Examples----- Input 4 5 1 2 1 1 3 4 2 3 2 3 4 3 1 4 5 Output 6 Input 4 2 1 2 5 3 4 7 Output -1","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, p): if self.parent[p] != p: self.parent[p] = self.find(self.parent[p]) return self.parent[p] def union(self, p, q): rootP = self.find(p) rootQ = self.find(q) if rootP != rootQ: if self.rank[rootP] > self.rank[rootQ]: self.parent[rootQ] = rootP elif self.rank[rootP] < self.rank[rootQ]: self.parent[rootP] = rootQ else: self.parent[rootQ] = rootP self.rank[rootP] += 1 def minimum_highway_length(n, highways): if n == 1: return 0 uf = UnionFind(n) highways.sort(key=lambda x: x[2]) total_length = 0 edges_used = 0 for u, v, w in highways: if uf.find(u - 1) != uf.find(v - 1): uf.union(u - 1, v - 1) total_length += w edges_used += 1 if edges_used == n - 1: return total_length return -1"},{"question":"# Definition **_Harshad number (or Niven number)_** is a number that is *divisible by the sum of its digits*. **_For example_**: **_18_**, since ``` 1 + 8 = 9 and 18 % 9 == 0 ``` So, **_18_** is a **_Harshad number_**. ____ # Task **_Given_** a number, **_Find if it is Harshad or not_**. ____ # Notes * **_Number_** *passed is always* **_Positive_**. * **_Return_** *the result as* **_String_** ___ # Input >> Output Examples ``` is_harshad(18) ==> return \\"Yes\\" ``` **_Explanation_**: Since **_the sum of its digits of (18) is (1 + 8 = 9)_** and **_18 % 9 is equal to 0_**, **_Then_** it\'s a **_Harshad number_**. ____ ``` is_harshad(19) ==> return \\"No\\" ``` **_Explanation_**: Since **_the sum of its digits of (19) is (1 + 9 = 10)_** and **_19 % 10 is not equal to 0_**, **_Then_** it\'s **_Not a Harshad number_**. ____ ``` is_harshad(21) ==> return \\"Yes\\" ``` **_Explanation_**: Since **_the sum of its digits of (21) is (2 + 1 = 3)_** and **_21 % 3 is equal to 0_**, **_Then_** it\'s a **_Harshad number_**. ____ ``` is_harshad(25) ==> return \\"No\\" ``` **_Explanation_**: Since **_the sum of its digits of (25) is (2 + 5 = 7)_** and **_25 % 7 is not equal to 0_**, **_Then_** it\'s **_Not a Harshad number_**.","solution":"def is_harshad(number): Determines if the given number is a Harshad number (a number divisible by the sum of its digits). Args: number (int): The positive integer to be checked. Returns: str: \\"Yes\\" if the number is a Harshad number, otherwise \\"No\\". sum_of_digits = sum(int(digit) for digit in str(number)) if number % sum_of_digits == 0: return \\"Yes\\" else: return \\"No\\""},{"question":"A delivery company has a fleet of trucks, where each truck can carry exactly one parcel of a maximum capacity. The company is planning their deliveries for the day but wants to ensure they utilize their trucks efficiently. You are given an array `weights` where each element represents the weight of a parcel. Additionally, you are given an integer `max_capacity` which is the maximum weight a truck can carry. Your task is to determine the minimum number of trucks required to deliver all the parcels. Each truck can carry at most one parcel and cannot exceed the `max_capacity`. # Input - The first line of the input contains an integer `n` (1 ≤ n ≤ 105), which represents the number of parcels. - The second line contains `n` integers where each integer `weights[i]` (1 ≤ weights[i] ≤ 109) represents the weight of the i-th parcel. - The third line contains one integer `max_capacity` (1 ≤ max_capacity ≤ 109), the maximum weight that a truck can carry. # Output - Print the minimum number of trucks required to deliver all the parcels. # Examples Example 1 ``` Input 5 2 3 8 5 4 5 Output 4 ``` **Explanation:** - Truck 1 carries parcel with weight 2 - Truck 2 carries parcel with weight 3 - Truck 3 carries parcel with weight 5 - Truck 4 carries parcel with weight 4 - Parcel with weight 8 cannot be carried because it exceeds `max_capacity`. Example 2 ``` Input 3 9 8 11 10 Output 3 ``` **Explanation:** - Truck 1 carries parcel with weight 9 - Truck 2 carries parcel with weight 8 - Truck 3 carries parcel with weight 11","solution":"def min_trucks(weights, max_capacity): Returns the minimum number of trucks required to deliver all parcels. # Count number of parcels that can be delivered with given max_capacity count = 0 for weight in weights: if weight <= max_capacity: count += 1 return count"},{"question":"In a new city, a utility company provides various services to the residents. Due to increasing demands, the company is conducting a network optimization to evenly distribute the workload among its service points. Each service point has a maximum load capacity, and certain areas are assigned to specific service points based on their geographical zones. The company wants to ensure that it minimizes the load balance difference among all service points. Each service point covers a number of areas, and each area has a certain number of residents requiring the service. The goal is to redistribute the areas among service points while keeping the zones the same, so that no service point exceeds its capacity, and the load difference between the service points is minimized. You are required to write a program that determines the optimal assignment of areas to service points. Input - The first line contains an integer n (1 ≤ n ≤ 100) - the number of service points. - The second line contains n integers, where each integer represents the maximum load capacity of each service point. - The third line contains an integer m (1 ≤ m ≤ 1000) - the number of areas. - The next m lines each contain two integers: the service point index that the area belongs to (1-based index) and the number of residents in that area. Output - Outputs the redistributed load of each service point in the order they were provided. Example Input 3 100 150 200 6 1 50 1 40 2 70 2 60 3 100 3 110 Output 90 130 190 Note In the example above, service point 1 has two areas assigned to it, each with 50 and 40 residents, respectively. The total load for service point 1 is 90. Similarly, service point 2 has two areas with 70 and 60 residents, resulting in a load of 130, and service point 3 handles 100 and 110 residents, resulting in a load of 190. These loads are within each service point\'s capacity, and the load difference is minimized.","solution":"def optimize_load_distribution(n, capacities, m, areas): loads = [0] * n # Initialize loads for each service point for area in areas: index, residents = area loads[index - 1] += residents # Assign residents to the service point return loads"},{"question":"A large group of friends is planning a camping trip. They have a plan to share the load among themselves in an optimal way. Each person has a specific weight limit they can carry. They also have a given number of items, each with a specific weight. The goal is to determine the maximum number of items that can be carried without exceeding anyone\'s weight limit. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two integers N and M denoting the number of friends and the number of items respectively. - The next line contains N space-separated integers L_{1}, L_{2}, ..., L_{N} - denoting the maximum weight limit each friend can carry. - The final line contains M space-separated integers W_{1}, W_{2}, ..., W_{M} - denoting the weights of the items. ------ Output Format ------ For each test case, output a single integer denoting the maximum number of items that can be carried without exceeding anyone\'s weight limit. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 10^{4} 1 ≤ L_{i}, W_{i} ≤ 10^{6} ----- Sample Input 1 ------ 2 3 5 10 15 20 5 7 8 9 10 2 4 5 5 3 4 5 3 ----- Sample Output 1 ------ 3 2 ----- Explanation 1 ------ Test Case 1: The friends can distribute the items as follows: one carries the 5 weight, another carries the 8 weight, and the last carries the 10 weight. So, the maximum number of items they can carry without any of them exceeding their weight limit is 3, which means carrying items of weights 5, 8, and 10. Test Case 2: The friends can carry the items as follows: one can carry the item of weight 3 and the other can carry the item of weight 3. No one will be able to carry the items of 4 and 5 weight, as their limit is 5. So, the maximum number of items they can carry is 2.","solution":"def max_items_carried(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] limits = sorted(test_cases[i][1]) weights = sorted(test_cases[i][2]) item_count = 0 j, k = 0, 0 while j < N and k < M: if weights[k] <= limits[j]: item_count += 1 j += 1 k += 1 results.append(item_count) return results"},{"question":"You are given a string consisting of lowercase Latin letters. You need to process multiple queries on this string, where each query involves changing a single character of the string and then answering if the string contains at least one unique palindrome substring. A substring is a contiguous sequence of characters within a string. A palindrome is a string that reads the same backward as forward. For example, \\"radar\\" and \\"ababa\\" are palindromes, but \\"abc\\" is not. To make it difficult, you are asked to answer these queries efficiently. -----Input----- The first line contains the initial string s of length n (1 le n le 10^5). The second line contains an integer q (1 le q le 10^5) — the number of queries. Each of the next q lines describes a query. Each query is of the form \\"i c\\", where 1 le i le n is the 1-based index of the character in the string that needs to be changed to c, which is a lowercase Latin letter. -----Output----- For each query, print \\"YES\\" if the string contains at least one unique palindrome substring after applying the query, and \\"NO\\" otherwise. -----Example----- Input abacaba 5 1 b 2 a 3 c 4 d 5 e Output YES YES YES YES YES -----Note----- In the example given, the string initially contains the following unique palindromic substrings: a, b, a, c, aba. After processing the first query, the string becomes \\"bbacaba\\" which contains: b, b, a, c, bb. You need to figure out an efficient way to determine whether there is at least one unique palindromic substring after each query. -----Constraints----- 1. The string s will have length at most 10^5. 2. There will be at most 100000 queries.","solution":"class UniquePalindromicSubstring: def __init__(self, s): self.s = s self.n = len(s) self.palindromic_substrs = self.find_unique_palindromic_substrings(s) def find_unique_palindromic_substrings(self, s): palindromes = set() for i in range(len(s)): self.expand_around_center(s, i, i, palindromes) # Odd length palindromes self.expand_around_center(s, i, i + 1, palindromes) # Even length palindromes return palindromes def expand_around_center(self, s, left, right, palindromes): while left >= 0 and right < len(s) and s[left] == s[right]: palindromes.add(s[left:right+1]) left -= 1 right += 1 def query(self, i, c): self.s = self.s[:i-1] + c + self.s[i:] self.palindromic_substrs = self.find_unique_palindromic_substrings(self.s) return \\"YES\\" if self.palindromic_substrs else \\"NO\\" # Example Usage def process_queries(s, queries): ups = UniquePalindromicSubstring(s) results = [] for index, char in queries: result = ups.query(index, char) results.append(result) return results"},{"question":"Sum of Digits Write a function that takes a non-negative integer as input and returns the sum of its digits. You are not allowed to convert the integer to a string or any other non-integer type. You should implement this function using mathematical operations only. Your function should take one parameter, an integer `n`, and return an integer representing the sum of its digits. Constraints: - The input integer `n` will be non-negative and can be as large as 2^31 - 1. Examples ```python sum_of_digits(123) #--> 6 (1 + 2 + 3) sum_of_digits(98764) #--> 34 (9 + 8 + 7 + 6 + 4) sum_of_digits(0) #--> 0 sum_of_digits(456) #--> 15 (4 + 5 + 6) ``` **If you enjoyed this problem, check out similar challenges on advanced mathematical operations.**","solution":"def sum_of_digits(n): Returns the sum of the digits of a non-negative integer. Parameters: n (int): The non-negative integer whose digits will be summed. Returns: int: Sum of the digits of n. total = 0 while n > 0: total += n % 10 n //= 10 return total"},{"question":"Aaryan loves solving mathematical puzzles, one day he came across a unique puzzle involving finding a sequence in an array. The sequence involves three indices `i`, `j`, `k` chosen such that: - `i < j < k` - `arr[i] < arr[j] < arr[k]` Given an array of distinct integers, help Aaryan find such a sequence or determine if no such sequence exists. -----Input:----- - The first line contains an integer `T`, the number of test cases. `T` test cases follow: - The first line of each test case contains an integer `N`, the number of elements in the array. - The second line of each test case contains `N` space-separated integers denoting the elements of the array. -----Output:----- For each test case, output \\"YES\\" if there exists such a sequence in the array, otherwise, output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - Each element of the array is distinct and in the range [-10^9, 10^9] -----Sample Input:----- 2 5 1 2 3 4 5 4 5 1 4 3 -----Sample Output:----- YES NO -----Explanation----- For Test Case 1: The array has a sequence `1 < 2 < 3`, `2 < 3 < 4`, and `3 < 4 < 5`, hence the answer is \\"YES\\". For Test Case 2: No such sequence exists in the array, hence the answer is \\"NO\\".","solution":"def find_sequence(T, test_cases): Determines if there exists a triple (arr[i], arr[j], arr[k]) that satisfies the conditions: i < j < k and arr[i] < arr[j] < arr[k] Parameters: - T: Number of test cases - test_cases: List of tuples, each containing (N, array) Returns: - List of \\"YES\\" or \\"NO\\" for each test case. results = [] for N, arr in test_cases: if N < 3: results.append(\\"NO\\") continue # Find the \'yes\' sequence using a single pass with a monotonically increasing stack min_i = arr[0] found = False for j in range(1, N - 1): if arr[j] > min_i: # Look for k > arr[j] for k in range(j + 1, N): if arr[k] > arr[j]: results.append(\\"YES\\") found = True break min_i = min(min_i, arr[j]) if found: break if not found: results.append(\\"NO\\") return results"},{"question":"A farmer needs to water his agricultural fields which are located on a two-dimensional Cartesian plane. The fields form a rectangular grid where every cell has coordinates (i, j) with 0 ≤ i < N and 0 ≤ j < M. The farmer has a water pump located at one of the grid cells (px, py), and he can start irrigating from this point. From any cell, the water can propagate to its four neighboring cells (up, down, left, right), taking one second to move to an adjacent cell. The field cells already have an initial amount of water, and the farmer needs to ensure that every cell in the grid receives at least W units of water. Write a function `minimum_time_to_irrigate(N, M, initial_water, px, py, W)` that computes the minimum amount of time needed to ensure that every cell in the field has at least W units of water. # Constraints * 1 ≤ N, M ≤ 1000 * 0 ≤ px < N * 0 ≤ py < M * 1 ≤ W ≤ 1000 * 0 ≤ initial_water[i][j] ≤ 1000 for all 0 ≤ i < N and 0 ≤ j < M # Input * An integer N, the number of rows in the grid. * An integer M, the number of columns in the grid. * A 2D list of integers initial_water representing the initial amount of water in each cell of the grid. * Two integers px and py, the initial position of the water pump on the grid. * An integer W, the required minimum units of water per cell. # Output * Print an integer T which is the minimum time required to ensure every cell in the grid has at least W units of water. # Example Input ``` 3 3 [[0, 0, 0], [0, 0, 0], [0, 0, 0]] 1 1 2 ``` Output ``` 2 ``` # Explanation Starting from the cell (1,1), the water will propagate to its adjacent cells in the least possible time. Each second, the water reaches the neighboring cells, i.e., from (1,1) to (0,1), (2,1), (1,0), and (1,2), until all cells have at least 2 units of water. The minimal time needed here is 2 seconds.","solution":"from collections import deque def minimum_time_to_irrigate(N, M, initial_water, px, py, W): Computes the minimum amount of time needed to ensure every cell in the field has at least W units of water. if N == 0 or M == 0: return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(px, py, 0)]) # (x, y, time) max_time = 0 visited = set() visited.add((px, py)) while queue: x, y, time = queue.popleft() if initial_water[x][y] < W: max_time = max(max_time, time) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited: queue.append((nx, ny, time + 1)) visited.add((nx, ny)) return max_time"},{"question":"Read problems statements in Russian also. Chef is very conscious about his health and loves to follow a fitness routine. He wants to track his daily calorie consumption. Over n days, Chef will consume different food items each day, and he wants to calculate the total calories consumed each day. Please help Chef by writing a program that calculates the sum of calories for each day. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains an integer n representing the number of days. The following lines contain n groups, where each group is a day\'s food items. Each group starts with an integer m indicating the number of food items consumed that day, followed by m integers representing the calories of each food item. ------ Output ------ For each test case, output n lines each containing the total calories consumed on that day. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ n ≤ 10 1 ≤ m ≤ 50 1 ≤ calorie ≤ 1000 ------ Example Input 1 ------ 2 3 4 100 200 150 50 2 300 400 3 500 600 150 2 3 100 150 200 1 500 ------ Example Output 1 ------ 500 700 1250 450 500","solution":"def calculate_calories(test_cases): results = [] for case in test_cases: n = case[0] days = case[1:] for day in days: m, *calories = day results.append(sum(calories)) return results"},{"question":"You are given a sequence of integers. Your task is to find the length of the longest subsequence that is strictly increasing and is formed by removing one or zero adjacent pairs of integers from the original sequence. Input Each test contains multiple test cases. The first line contains an integer t (1 ≤ t ≤ 10 000), denoting the number of test cases, followed by a description of the test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 100 000): the number of elements in the sequence. The second line of each test case contains n integers a_i (1 ≤ a_i ≤ 10^9): the elements of the sequence. The sum of all n throughout the test is guaranteed to not exceed 200 000. Output For each test case, print one integer: the length of the longest strictly increasing subsequence as described. Example Input 3 5 10 20 30 40 50 6 10 20 20 30 40 50 6 10 30 20 40 50 60 Output 5 5 5 Note In the first test case, the sequence is already strictly increasing, so the length of the longest strictly increasing subsequence is 5. In the second test case, by removing the adjacent pair (20, 20), we get the strictly increasing subsequence [10, 20, 30, 40, 50], which has length 5. In the third test case, by removing the adjacent pair (30, 20), we get the strictly increasing subsequence [10, 20, 40, 50, 60], which has length 5.","solution":"def find_longest_increasing_subsequence(t, test_cases): results = [] for case in test_cases: n, sequence = case if n <= 2: results.append(n) continue dp = [1] * n for i in range(n): for j in range(i+1, n): if sequence[j] > sequence[i]: dp[j] = max(dp[j], dp[i] + 1) max_length = max(dp) for i in range(n-1): if sequence[i] == sequence[i+1]: modified_dp = dp[:] modified_dp[i] = modified_dp[i+1] = 0 for j in range(i+1, n): if sequence[j] > sequence[i-1 if i > 0 else 0]: modified_dp[j] = max(modified_dp[j], modified_dp[i-1 if i > 0 else 0] + 1) if j > i+1 and sequence[j] > sequence[i]: modified_dp[j] = max(modified_dp[j], modified_dp[i] + 1) max_length = max(max_length, max(modified_dp)) results.append(max_length) return results"},{"question":"You are given an integer array representing the values in a binary tree with n nodes. The nodes are labeled from 0 to n-1. Each node has a value and a parent node, given in two arrays `values` and `parent` respectively. - `values[i]` is the value of the i-th node. - `parent[i]` is the parent of the i-th node (with `parent[0]` being `-1` since the root node has no parent). Your task is to find the largest path sum from the root node to any leaf node in the tree. A leaf node is a node that has no children. You have to answer t independent test cases. Input - The first line contains an integer t (1 le t le 10^5) — the number of test cases. - The first line of each test case contains an integer n (1 le n le 2 cdot 10^5) — the number of nodes in the tree. - The second line of each test case contains n integers representing the array `values` (-10^4 le values[i] le 10^4). - The third line of each test case contains n integers representing the array `parent` (-1 le parent[i] < n). It\'s guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5 (sum n le 2 cdot 10^5). Output For each test case, print one integer — the largest path sum from the root to any leaf node in the tree. Example # Input ``` 2 5 1 -2 3 4 -1 -1 0 0 2 2 3 1 2 3 -1 0 1 ``` # Output ``` 8 6 ``` Explanation In the first test case: - The tree structure is: 0 -> (1, 2), 2 -> (3, 4) - The path with the largest sum is 0 -> 2 -> 3 -> 4 with a sum of 1 + 3 + 4 = 8. In the second test case: - The tree structure is: 0 -> 1 -> 2 - The path with the largest sum is 0 -> 1 -> 2 with a sum of 1 + 2 + 3 = 6.","solution":"def find_largest_path_sum(n, values, parent): from collections import defaultdict tree = defaultdict(list) for i in range(1, n): tree[parent[i]].append(i) def dfs(node): if not tree[node]: return values[node] max_child_sum = float(\'-inf\') for child in tree[node]: max_child_sum = max(max_child_sum, dfs(child)) return values[node] + max_child_sum return dfs(0) def solve(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] values = test_cases[i][1] parent = test_cases[i][2] results.append(find_largest_path_sum(n, values, parent)) return results"},{"question":"You have received a job offer from a start-up company where you work as an algorithm engineer. Your first assignment is to solve an integer array problem. You are required to implement a function that, given an array of integers, finds and returns the length of the longest contiguous subarray containing equal numbers of even and odd numbers. Note: - A contiguous subarray is a subarray that can be derived by deleting some (or zero) elements from the beginning and some (or zero) elements from the end of the array without changing the order of the remaining elements. Input - First line contains an integer n (1 ≤ n ≤ 100,000) representing the number of elements in the array. - Second line contains n integers separated by a space where each integer ai (-10^9 ≤ ai ≤ 10^9) represents an element of the array. Output - Output a single integer which is the length of the longest contiguous subarray where the number of even elements equals the number of odd elements. Example Input 10 1 2 3 4 5 6 7 8 9 10 Output 10 Input 5 2 4 6 1 3 Output 4","solution":"def longest_even_odd_subarray(arr): Finds the length of the longest contiguous subarray with equal number of even and odd numbers. Parameters: arr (list): The list of integers. Returns: int: Length of the longest contiguous subarray with an equal number of even and odd numbers. n = len(arr) balance_map = {0: -1} max_length = 0 balance = 0 for i in range(n): if arr[i] % 2 == 0: balance += 1 else: balance -= 1 if balance in balance_map: max_length = max(max_length, i - balance_map[balance]) else: balance_map[balance] = i return max_length"},{"question":"Consider an array of integers. Your task is to find the highest product possible from any three of its elements. ------ Input Format ------ - The first line contains a single integer T, denoting the number of test cases. - For each test case: - The first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers, which are the elements of the array. ------ Output Format ------ For each test case, print on a new line a single integer, the highest product of any three elements in the array. ------ Constraints ------ 1 ≤ T ≤ 100 3 ≤ N ≤ 10^5 -10^3 ≤ array elements ≤ 10^3 ------ Sample Input 1 ------ 2 5 1 2 3 4 5 4 -10 -10 1 3 ------ Sample Output 1 ------ 60 300 ------ Explanation 1 ------ Test case 1: The highest product of three elements is 3 cdot 4 cdot 5 = 60. Test case 2: The highest product of three elements is -10 cdot -10 cdot 3 = 300.","solution":"def highest_product_of_three(T, test_cases): Returns a list with the highest product of any three elements from each test case. Parameters: T (int): Number of test cases. test_cases (list): A list of tuples, each tuple containing: - an integer N, the number of elements in the array. - a list of N integers. Returns: List of integers: Highest product of any three elements for each test case. results = [] for i in range(T): N, arr = test_cases[i] arr.sort() # Maximum product can be either from three largest or two smallest and one largest max_product = max(arr[0] * arr[1] * arr[-1], arr[-1] * arr[-2] * arr[-3]) results.append(max_product) return results # Example usage T = 2 test_cases = [(5, [1, 2, 3, 4, 5]), (4, [-10, -10, 1, 3])] print(highest_product_of_three(T, test_cases)) # Output: [60, 300]"},{"question":"You are tasked with developing an application that determines if a given string can be rearranged into a palindrome. A string is a palindrome if it reads the same forwards and backwards. A string can be rearranged into a palindrome if and only if at most one character in the string has an odd count. For example, the string \\"aabb\\" can be rearranged into \\"abba\\" or \\"baab\\", both of which are palindromes. However, the string \\"aaabbbb\\" can be rearranged into \\"bbaaabb\\", which is a palindrome, but \\"aaabbb\\" cannot be rearranged into a palindrome because it contains more than one character with an odd count. Write a function that takes a string as input and returns `True` if it can be rearranged into a palindrome, and `False` otherwise. -----Input----- The input consists of a single line containing a non-empty string s where 1 ≤ |s| ≤ 1000. The string s only contains lowercase alphabetical characters. -----Output----- The function should return `True` or `False` based on whether the input string can be rearranged into a palindrome. -----Examples----- Input \\"aabb\\" Output True Input \\"abc\\" Output False Input \\"aaabbbb\\" Output True Input \\"civic\\" Output True -----Note----- In the first example, \\"aabb\\" can be rearranged into \\"abba\\" or \\"baab\\", making it a palindrome. In the second example, \\"abc\\" cannot be rearranged into any palindrome. In the third example, \\"aaabbbb\\" can be rearranged into \\"bbaaabb\\", a palindrome. In the fourth example, \\"civic\\" is already a palindrome.","solution":"def can_form_palindrome(s): from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Given a matrix of size NxM, where each cell contains a lowercase alphabetical character, write a function to find the length of the longest path in the matrix such that all characters in the path are distinct. A path is defined as a sequence of cells in which you can move in eight possible directions (up, down, left, right, and the four diagonals) from any cell to any adjacent cell. Input: - First line contains T, the number of test cases. - For each test case, the first line contains two integers N and M. - The next N lines contain M lowercase alphabetical characters each, representing the matrix. Output: Print one line for each test case, denoting the length of the longest path with all distinct characters. Constraints: 1 ≤ T ≤ 10 1 ≤ N, M ≤ 10 SAMPLE INPUT: 2 3 4 abcd efgh ijkl 2 2 aa bc SAMPLE OUTPUT: 12 3 Explanation: For the first test case, one of the longest paths with all distinct characters is: a -> b -> c -> d -> h -> g -> f -> e -> i -> j -> k -> l For the second test case, one of the longest paths with all distinct characters is: a -> b -> c","solution":"def longest_path_in_matrix(mat): Finds the length of the longest path in the matrix such that all characters in the path are distinct. def dfs(x, y, visited): max_len = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and mat[nx][ny] not in visited: visited.add(mat[nx][ny]) max_len = max(max_len, 1 + dfs(nx, ny, visited)) visited.remove(mat[nx][ny]) return max_len directions = [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)] N, M = len(mat), len(mat[0]) longest_path = 0 for i in range(N): for j in range(M): visited = set() visited.add(mat[i][j]) longest_path = max(longest_path, 1 + dfs(i, j, visited)) return longest_path def process_input(): import sys input = sys.stdin.read data = input().strip().split() index = 0 T = int(data[index]) index += 1 results = [] for _ in range(T): N = int(data[index]) M = int(data[index + 1]) index += 2 matrix = [] for _ in range(N): matrix.append(list(data[index])) index += 1 results.append(longest_path_in_matrix(matrix)) for result in results: print(result)"},{"question":"In a distant country, people use coins of only three denominations: 1 coin, 3 coins, and 4 coins. You are given an amount of money n. Determine the minimum number of coins needed to make exactly that amount. Input The first line contains a single integer n (0 ≤ n ≤ 10^6). Output Print the minimum number of coins needed to make up the given amount. Examples Input 6 Output 2 Input 10 Output 3 Input 2 Output 2 Note In the first example, the minimum number of coins to combine to 6 is two 3-coin pieces. In the second example, the minimum number of coins to combine to 10 is one 4-coin piece and two 3-coin pieces. In the third example, the minimum number of coins to combine to 2 is two 1-coin pieces.","solution":"def min_coins(n): Returns the minimum number of coins needed to make up the given amount n, using denominations of 1, 3, and 4. # Base case if n == 0: return 0 # Initialize a list to store the minimum coins for each amount up to n dp = [float(\'inf\')] * (n + 1) # There is 0 way to make 0 amount dp[0] = 0 # Fill the dp array for i in range(1, n + 1): if i >= 1: dp[i] = min(dp[i], dp[i - 1] + 1) if i >= 3: dp[i] = min(dp[i], dp[i - 3] + 1) if i >= 4: dp[i] = min(dp[i], dp[i - 4] + 1) return dp[n]"},{"question":"A company wants to improve their customer satisfaction by analyzing customer service interactions. They have a simple system for categorizing interactions as \\"Positive\\", \\"Negative\\", or \\"Neutral\\" based on specific keywords. Each interaction is represented by a string of text and each string will only be evaluated based on appearances of the given keywords. You are required to write a function that categorizes each interaction based on the following rules: - If the interaction contains any of the keywords from the \\"positive\\" list, it is categorized as \\"Positive\\". - If the interaction contains any of the keywords from the \\"negative\\" list, and none from the \\"positive\\" list, it is categorized as \\"Negative\\". - If the interaction contains none of the keywords from either list, it is categorized as \\"Neutral\\". **Input:** - The first line contains an integer, n, the number of interactions. - The second line contains a list of positive keywords, each separated by a space. - The third line contains a list of negative keywords, each separated by a space. - The next n lines each represent a single interaction. **Output:** - The program should output n lines, each containing either \\"Positive\\", \\"Negative\\", or \\"Neutral\\" corresponding to the categorization of each interaction. Example: Input: 5 great excellent amazing bad terrible awful The product is great and amazing This service is terrible The experience was bad and awful I feel neutral about this The product is amazing but the service is terrible Output: Positive Negative Negative Neutral Positive","solution":"def categorize_interactions(n, positive_keywords, negative_keywords, interactions): positive_set = set(positive_keywords.split()) negative_set = set(negative_keywords.split()) results = [] for interaction in interactions: words = set(interaction.split()) if words & positive_set: results.append(\\"Positive\\") elif words & negative_set: results.append(\\"Negative\\") else: results.append(\\"Neutral\\") return results"},{"question":"Given a binary tree, implement a function to find the sum of all elements at the smallest depth where all nodes have value \'0\'. If there are no such nodes, return -1. Example 1: Input: root = [1, 2, 3, 4, 0, 0, 5, null, null, 6, 7] Output: 0 Explanation: The binary tree is as follows: 1 / 2 3 / / 4 0 0 5 / 6 7 The smallest depth where all nodes are \'0\' is depth 2, and the sum of these nodes is 0. Example 2: Input: root = [1, 2, 3, null, 0, 0, null] Output: 0 Explanation: The binary tree is as follows: 1 / 2 3 / 0 0 The smallest depth where all nodes are \'0\' is depth 2, and the sum of these nodes is 0. Example 3: Input: root = [1,2,3,4,5] Output: -1 Explanation: The binary tree is as follows: 1 / 2 3 / 4 5 There are no nodes with value \'0\'. Example 4: Input: root = [] Output: -1 Explanation: The tree is empty, hence there are no nodes with value \'0\'. Your Task: You don’t have to read input or print anything. Your task is to complete the function findSmallestDepthSum(root) which takes the root of the binary tree as input and returns the sum of node values at the smallest depth where all nodes are \'0\' as an integer. If there are no such nodes, return -1. Expected Time Complexity: O(N), where N is the number of nodes in the binary tree. Expected Space Complexity: O(N) Constraint: 1. The number of nodes in the tree can range from 0 to 1000. 2. -10^5 <= Node Value <= 10^5","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def findSmallestDepthSum(root): if not root: return -1 queue = deque([(root, 0)]) # Store node with its depth depth_sum_map = {} while queue: node, depth = queue.popleft() if node.val == 0: if depth not in depth_sum_map: depth_sum_map[depth] = 0 depth_sum_map[depth] += node.val if node.left: queue.append((node.left, depth + 1)) if node.right: queue.append((node.right, depth + 1)) # Find the smallest depth that contains only nodes with value 0 for depth in sorted(depth_sum_map): if depth_sum_map[depth] == 0: return 0 return -1"},{"question":"You are given an array of integers heights[], where heights[i] indicates the height of the i^{th} building in a city. A tower of height H can be constructed to cover a consecutive subarray of buildings such that the height of the tower is used to reach the top of the tallest building within that subarray. A tower covers a consecutive subarray [i,j] (inclusive) if the height of the tallest building in this subarray is minimized. Given a specific height limit h, your task is to determine the length of the longest consecutive subarray that can be covered by a tower of height exactly equal to h. If no such subarray exists, return 0. Example 1: Input: n = 7, h = 4 heights[] = {3, 1, 4, 1, 5, 9, 2} Output: 3 Explanation: The subarray [3, 1, 4] has a maximum height of 4, which matches the tower height h. The length of this subarray is 3. Example 2: Input: n = 5, h = 1 heights[] = {2, 1, 1, 3, 2} Output: 2 Explanation: The subarray [1, 1] has a maximum height of 1, which matches the tower height h. The length of this subarray is 2. Example 3: Input: n = 6, h = 5 heights[] = {5, 5, 5, 5, 5, 5} Output: 6 Explanation: The entire array has a maximum height of 5, which matches the tower height h. The length of this subarray is 6. Your Task: Your task is to complete the function find_tower_coverage(). This function takes the array heights[], and the integers n and h as input parameters and returns the length of the longest consecutive subarray that can be covered by a tower of height h. If no such subarray exists, return 0. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 1 <= heights[i] <= 10^3 1 <= h <= 10^3","solution":"def find_tower_coverage(n, h, heights): max_len = 0 current_len = 0 for height in heights: if height <= h: current_len += 1 if height == h: max_len = max(max_len, current_len) else: current_len = 0 return max_len"},{"question":"The local park has recently been flooded, creating numerous small islands. Alice and Bob, who love exploring, decided to navigate from Alice\'s house to Bob\'s house across the park using stepping stones over the islands. Each island has stepping stones that connect it to other islands. However, due to the flood, not all paths are available anymore. Alice wants to find out if she can reach Bob\'s house from her house using the remaining stepping stones. The park layout can be represented as a graph where the islands are nodes and the stepping stones that connect two islands are edges. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case starts with two integers N (number of islands) and M (number of stepping stones). - Then M lines follow, each containing two integers u and v, indicating a stepping stone between island u and island v. - The next line contains two integers A and B, representing Alice\'s house (island A) and Bob\'s house (island B). ------ Output Format ------ For each test case, print \\"YES\\" if Alice can reach Bob\'s house using the stepping stones, otherwise print \\"NO\\". You can print each character of each string in uppercase or lowercase (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 10^{3} 2 ≤ N ≤ 10^{5} 1 ≤ M ≤ 2×10^{5} 1 ≤ u, v, A, B ≤ N - Sum of all N across all test cases does not exceed 10^{6}. - Sum of all M across all test cases does not exceed 2×10^{6}. ----- Sample Input 1 ------ 3 4 4 1 2 2 3 3 4 4 1 1 3 3 2 1 2 2 3 1 2 5 4 1 2 2 3 3 4 4 5 1 5 ----- Sample Output 1 ------ YES YES YES ------ Explanation 1 ------ Test case 1: There are four islands and four stepping stones, forming a cycle. From island 1, Alice can reach Bob\'s house (island 3) by either the path 1-2-3 or 1-4-3. Test case 2: There are three islands and two stepping stones, connecting islands 1 to 2 and 2 to 3. Hence, island 1 is directly connected to island 2, allowing Alice to reach Bob\'s house. Test case 3: There are five islands with stepping stones connecting them sequentially from island 1 to island 5. Alice can traverse through all islands and reach island 5 easily.","solution":"def can_reach(number_of_islands, number_of_stepping_stones, stepping_stones, start_island, end_island): from collections import defaultdict, deque graph = defaultdict(list) for u, v in stepping_stones: graph[u].append(v) graph[v].append(u) visited = set() queue = deque([start_island]) visited.add(start_island) while queue: current = queue.popleft() if current == end_island: return \\"YES\\" for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return \\"NO\\" def solve(test_cases): results = [] for test in test_cases: number_of_islands, number_of_stepping_stones, stepping_stones, start_island, end_island = test result = can_reach(number_of_islands, number_of_stepping_stones, stepping_stones, start_island, end_island) results.append(result) return results"},{"question":"Write a python function `unique_coordinates(input_str: str) -> list[tuple]` that will parse a given input string of coordinates in the format \'x1 y1 x2 y2\', with coordinates being pairs of integers separated by spaces. The function should return a list of unique coordinate pairs in the format `(x, y)` that appeared only once in the string. Each coordinate pair in the input string is provided in a new line. The function should take a single string input with multiple lines of coordinate pairs and identify which coordinates are unique. For example, given the input: ``` 4 2 2 1 1 1 2 1 2 2 2 1 ``` The function should return: ``` [(4, 2), (1, 1), (2, 2)] ``` Here is the template for the function: ```python def unique_coordinates(input_str: str) -> list[tuple]: # Your code here # Example usage: input_str = \\"4 2n2 1n1 1n2 1n2 2n2 1\\" print(unique_coordinates(input_str)) ```","solution":"def unique_coordinates(input_str: str) -> list[tuple]: from collections import Counter # Split the input string by newline to get individual coordinate pairs lines = input_str.strip().split(\'n\') # Parse each line into a tuple of integers coordinates = [tuple(map(int, line.split())) for line in lines] # Count the frequency of each coordinate counter = Counter(coordinates) # Return a list of coordinates that appear only once return [coord for coord, count in counter.items() if count == 1] # Example usage: input_str = \\"4 2n2 1n1 1n2 1n2 2n2 1\\" print(unique_coordinates(input_str)) # Should print [(4, 2), (1, 1), (2, 2)]"},{"question":"You are tasked with organizing a large dataset for efficient reading and writing operations. The data is stored in an array of integers, where each integer represents a data entry. Two types of operations can be performed on the data: read and write. 1. Read Operation: Given an integer `idx`, read the value at the specified index in the array. 2. Write Operation: Given an integer `idx` and an integer `val`, write the value `val` at the specified index in the array. The operations need to be processed efficiently, especially given the possibility of a large number of operations and array size. -----Input----- The first line contains two integers `n` and `m` (1 le n, m le 200000) — the number of elements in the array and the number of operations. The second line contains `n` integers representing the initial values of the array (`1 le text{array}_i le 10^9`). Each of the following `m` lines describe an operation in one of the following formats: - `1 idx`: This represents a read operation where you need to output the value at index `idx` (1 le text{idx} le n). - `2 idx val`: This represents a write operation where you need to update the value at index `idx` to `val` (1 le text{idx} le n, 1 le text{val} le 10^9). -----Output----- For each read operation, print the value at the specified index. -----Example----- Input 5 6 10 20 30 40 50 1 3 2 3 100 1 3 1 5 2 5 500 1 5 Output 30 100 50 500 -----Note----- The initial array is [10, 20, 30, 40, 50]. - The first operation reads the value at index 3, which is 30. - The second operation writes the value 100 at index 3, changing the array to [10, 20, 100, 40, 50]. - The third operation reads the value at index 3, which is now 100. - The fourth operation reads the value at index 5, which is 50. - The fifth operation writes the value 500 at index 5, changing the array to [10, 20, 100, 40, 500]. - The sixth operation reads the value at index 5, which is now 500.","solution":"def process_operations(n, m, initial_array, operations): results = [] array = initial_array[:] for operation in operations: if operation[0] == 1: # Read operation idx = operation[1] - 1 results.append(array[idx]) elif operation[0] == 2: # Write operation idx = operation[1] - 1 val = operation[2] array[idx] = val return results"},{"question":"Alexandria is building a symmetrical string generator. A string is considered symmetrical if it reads the same forwards and backwards. Your task is: given an integer n, generate a symmetrical alphanumeric string of length n. If there are multiple possible answers, you are allowed to print any of them. If it\'s impossible to generate such a string, print -1 as the answer. Input The single line contains an integer n (1 ≤ n ≤ 100) — the length of the string. Output Print one such symmetrical string of length n, or -1 if no such string exists. Examples Input 5 Output abcba Input 2 Output aa Input 3 Output aba","solution":"def generate_symmetrical_string(n): Generates a symmetrical alphanumeric string of length n if possible, otherwise returns -1. A string is considered symmetrical if it reads the same forwards and backwards. if n < 1 or n > 100: return -1 if n == 1: return \\"a\\" half = n // 2 first_half = \'\'.join(chr(97 + (i % 26)) for i in range(half)) # Use lowercase a-z (ascii 97-122) if n % 2 == 0: symmetrical_string = first_half + first_half[::-1] else: middle_char = chr(97 + (half % 26)) symmetrical_string = first_half + middle_char + first_half[::-1] return symmetrical_string"},{"question":"A magical string is defined by a specific construction rule: 1. Start with a string `S` containing only the digit \'1\'. 2. Iteratively construct new strings based on `S` by appending the group of characters describing the count and the digit of each group in `S`. For example, - Step 1: The initial string is `S = \\"1\\"`. - Step 2: The new string formed is `S = \\"11\\"` (one \'1\'). - Step 3: The next string formed is `S = \\"21\\"` (two \'1\'s). - Step 4: The next string is `S = \\"1211\\"` (one \'2\', then one \'1\'). - And so on... Given an integer `n`, write a function to generate the `n`-th string in this magical series. -----Input----- The input is a single integer `n` (1 ≤ n ≤ 30). -----Output----- Print the `n`-th magical string in the series. -----Examples----- Input 4 Output 1211 Input 5 Output 111221 Input 1 Output 1","solution":"def magical_string(n): Generates the nth magical string. if n == 1: return \\"1\\" s = \\"1\\" # Generate up to the nth string using the described rule for _ in range(1, n): new_s = \\"\\" count = 1 current_char = s[0] for i in range(1, len(s)): if s[i] == current_char: count += 1 else: new_s += str(count) + current_char current_char = s[i] count = 1 new_s += str(count) + current_char s = new_s return s"},{"question":"You are given an array of strings where each string represents a direction and total number of steps in that direction. Directions can be \'up\', \'down\', \'left\', or \'right\'. Your task is to compute and print the final coordinates starting from the origin (0,0) after following all the directions in the given order. -----Input----- The input begins with an integer `N`, the number of directions, such that `1 ≤ N ≤ 1000`. Each of the following `N` lines contains a string `dir` and an integer `steps`, where `dir` indicates the direction and `steps` indicates the number of steps in that direction, such that `1 ≤ steps ≤ 100`. -----Output----- Output a single line with two space-separated integers denoting the final x and y coordinates. -----Examples----- Sample Input: 4 right 10 up 5 left 7 down 2 Sample Output: 3 3","solution":"def final_coordinates(instructions): Computes the final coordinates after following the given directions starting from the origin (0,0). Parameters: instructions (list of tuple): Each tuple contains a direction as a string and steps as an integer. Returns: tuple: Final coordinates as (x, y). x, y = 0, 0 for direction, steps in instructions: if direction == \'right\': x += steps elif direction == \'left\': x -= steps elif direction == \'up\': y += steps elif direction == \'down\': y -= steps return x, y"},{"question":"Write a function that calculates the product of all the elements of an input list except for the element at the current position for each position in the list. * Take a list of integers as input. * For each position in the list, calculate the product of all the other elements excluding the element at the current position. Example ```R product_except_self([1, 2, 3, 4, 5]) == [120, 60, 40, 30, 24] ``` ```python product_except_self([1, 2, 3, 4, 5]) == [120, 60, 40, 30, 24] ``` Note: You should not use division in your solution.","solution":"def product_except_self(nums): n = len(nums) if n == 0: return [] result = [1] * n left_prod = 1 for i in range(n): result[i] *= left_prod left_prod *= nums[i] right_prod = 1 for i in range(n-1, -1, -1): result[i] *= right_prod right_prod *= nums[i] return result"},{"question":"Ashok is a puzzle enthusiast who loves numeric challenges. He recently came across an interesting problem involving arrays of integers, summation, and subarrays. He decided to turn it into a puzzle for others to solve. Given an array of integers, determine if there exists a subarray (contiguous elements) that sums up to a given integer k. The function should return \\"YES\\" if such a subarray exists, and \\"NO\\" otherwise. -----Input----- Each test case consists of multiple inputs. The first line contains the integer n (1 le n le 10000) - the number of elements in the array. The second line contains n integers a_i (1 le a_i le 10^9). The third line contains the integer k (1 le k le 10^{14}). It is guaranteed that the sum of the lengths of the arrays in a single test file does not exceed 20000. -----Output----- For each test case, print \\"YES\\" if there exists a subarray that sums to k, otherwise print \\"NO\\". -----Examples----- Input 3 5 1 2 3 7 9 5 1 2 3 4 5 15 Output YES YES -----Note----- In the first test case, there is a subarray [2, 3, 4] that sums to 9. In the second test case, the entire array [1, 2, 3, 4, 5] sums to 15. Write a function to determine if such a subarray exists.","solution":"def subarray_sum_exists(n, array, k): Determine if a subarray with sum k exists in the given array. Args: n (int): The number of elements in the array. array (list of int): The list of integers. k (int): The target sum. Returns: str: \\"YES\\" if a subarray with sum k exists, otherwise \\"NO\\". cum_sum = 0 cum_sum_dict = {} for num in array: cum_sum += num if cum_sum == k: return \\"YES\\" if (cum_sum - k) in cum_sum_dict: return \\"YES\\" cum_sum_dict[cum_sum] = True return \\"NO\\""},{"question":"You are given an integer array A of size N. You need to find and print the smallest positive integer that is not present in the array. The array may have duplicate elements and can contain both positive and negative integers. ------ Input ------ The first line contains an integer T, the number of test cases. Each of the next T lines contains: - The first line contains an integer N denoting the size of the array. - The second line contains N space-separated integers denoting the elements of the array. ------ Output ------ For each test case, print a single line containing the smallest positive integer that is not present in the array. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^6 ≤ A[i] ≤ 10^6 ------ Sample Input ------ 2 5 3 4 -1 1 2 3 1 2 0 ------ Sample Output ------ 5 3 ------ Explanation ------ For the first test case, the smallest positive integer missing from the array is 5. For the second test case, the smallest positive integer missing from the array is 3.","solution":"def smallest_missing_positive(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] A_set = set(A) smallest_missing = 1 while smallest_missing in A_set: smallest_missing += 1 results.append(smallest_missing) return results # Example of how to run the function # test_cases_input = [(5, [3, 4, -1, 1, 2]), (3, [1, 2, 0])] # print(smallest_missing_positive(2, test_cases_input)) # Output: [5, 3]"},{"question":"In a game, a player can earn points by hitting targets of different shapes placed in a straight line. Each target has a certain number of points associated with it and can be hit more than once. The player uses a special device that shoots in a straight line hitting the first target it encounters. Once hit, the points of the target are added to the player’s score and the target gets destroyed before the device moves to the next target. The player aims to collect the maximum score by hitting targets optimally. Given a list of points associated with targets in the order they appear, determine the maximum score the player can collect by hitting at most K targets. Input The first line contains the number of test cases T (0 < T ≤ 10). For each test case, the first line contains an integer N (0 < N ≤ 1000) representing the number of targets and an integer K (0 < K ≤ N) representing the maximum number of targets the player can hit. The second line contains N integers representing the points of the targets in the order they appear. Output For each test case, print the case number, followed by a colon, followed by a single space, followed by a single integer indicating the maximum score the player can collect by hitting at most K targets. Sample Input 2 5 2 1 2 3 4 5 6 3 10 3 2 7 5 1 Sample Output Case 1: 9 Case 2: 22","solution":"def max_score(T, test_cases): results = [] for case_num in range(1, T+1): N, K = test_cases[case_num-1][0] points = test_cases[case_num-1][1] sorted_points = sorted(points, reverse=True) max_points = sum(sorted_points[:K]) results.append(f\\"Case {case_num}: {max_points}\\") return results # Sample input T = 2 test_cases = [ [(5, 2), [1, 2, 3, 4, 5]], [(6, 3), [10, 3, 2, 7, 5, 1]] ] output = max_score(T, test_cases) for line in output: print(line)"},{"question":"Charlie loves playing with strings. He found a string S of length N consisting of lowercase English letters. Charlie defines the beauty of a string as the number of distinct characters in it. Charlie wants to find the maximum beauty of any suffix of the string S. For example, if the given string is \\"abac\\", its suffixes are: 1. \\"abac\\" -> beauty = 3 (since \'a\', \'b\', and \'c\' are distinct) 2. \\"bac\\" -> beauty = 3 3. \\"ac\\" -> beauty = 2 4. \\"c\\" -> beauty = 1 Can you help Charlie find the maximum beauty of any suffix of the string S? ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - Each test case consists of a single line containing the string S of length N. ------ Output Format ------ For each test case, output a single integer - the maximum beauty of any suffix of the string. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{5} - Sum of N over all test cases does not exceed 2 cdot 10^{5} ----- Sample Input 1 ------ 3 abac zzz abcde ----- Sample Output 1 ------ 3 1 5 ----- Explanation 1 ------ Test case 1: The suffixes with their beauties have been illustrated above. The maximum beauty is 3. Test case 2: All suffixes are \\"zzz\\", \\"zz\\", and \\"z\\" with beauty 1. Test case 3: The suffix \\"abcde\\" itself constitutes all distinct characters, so the beauty is 5.","solution":"def max_suffix_beauty(test_cases): results = [] for s in test_cases: unique_chars = set() max_beauty = 0 # Traverse the string from end to start for char in reversed(s): unique_chars.add(char) max_beauty = max(max_beauty, len(unique_chars)) results.append(max_beauty) return results # Helper function to process input and output for multiple test cases def process_input_output(inputs): test_cases = inputs[1:] # first input is the number of test cases, which we ignore results = max_suffix_beauty(test_cases) return results"},{"question":"The Kingdom of Maqui is divided into M different provinces, each with a distinct number of cities interconnected by roads. The roads are bidirectional and all have the same length. The transportation ministry is trying to optimize travel in such a way that it is possible to travel between any two cities within a province. However, initially, some cities may not be directly connected to others, making travel between them impossible. Your task is to determine the minimum number of roads needed to be built to ensure that all cities within each province are interconnected. A province is fully interconnected if there exists a path between any two cities within that province. Input The first line contains an integer M (1 ≤ M ≤ 200), the number of provinces. Each province i is described by two integers Ci and Ri, representing the number of cities (1 ≤ Ci ≤ 1000) and the number of initial roads (0 ≤ Ri ≤ 10,000) in the province. The next Ri lines describe the roads. Each road is represented by two integers U and V (1 ≤ U, V ≤ Ci), meaning there is a road between city U and city V in that province. Output For each province, output a single integer representing the minimum number of additional roads needed to make all cities within the province interconnected. Examples Input 2 4 2 1 2 3 4 3 1 1 2 Output 1 1 Note In the first province, we have four cities and two roads. One road connects city 1 to city 2, and another road connects city 3 to city 4. We need at least one more road to ensure all cities are interconnected, for example, between city 2 and city 3. In the second province, we have three cities and one road connecting city 1 to city 2. We need at least one more road to ensure all cities are interconnected, for example, between city 2 and city 3.","solution":"def min_roads_needed_for_interconnection(M, provinces): def dfs(city, visited, graph): stack = [city] while stack: node = stack.pop() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) results = [] for i in range(M): Ci, Ri, roads = provinces[i] graph = {i: [] for i in range(1, Ci + 1)} for u, v in roads: graph[u].append(v) graph[v].append(u) visited = set() num_connected_components = 0 for city in range(1, Ci + 1): if city not in visited: num_connected_components += 1 visited.add(city) dfs(city, visited, graph) # To connect all cities in a province, we need (num_connected_components - 1) roads results.append(num_connected_components - 1) return results # Example usage M = 2 provinces = [ (4, 2, [(1, 2), (3, 4)]), (3, 1, [(1, 2)]) ] print(min_roads_needed_for_interconnection(M, provinces))"},{"question":"A group of robots is moving on a chessboard. The chessboard has an initial configuration where each cell is either empty or occupied by a robot. The robots can only move in four directions: up, down, left, and right. The objective is to determine if all robots can be moved such that no two robots are left in the same row or column. INPUT The first line of the input contains an integer T, the number of test cases. Each test case consists of: - An integer N, the size of the chessboard (N x N). - N strings of length N, representing the initial configuration of the chessboard. A \'R\' represents a robot, and a \'.\' represents an empty cell. OUTPUT For each test case, output \\"YES\\" if it is possible to rearrange the robots so that no two robots are in the same row or column. Otherwise, output \\"NO\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 8 SAMPLE INPUT 2 3 R.. .R. ..R 4 R... .... .R.. ..R. SAMPLE OUTPUT YES NO Explanation There are two test cases: - In the first test case, the initial configuration can be rearranged such that no two robots are in the same row or column: Original: R.. Rearranged: R.. .R. .R. ..R ..R So, the output is \\"YES\\". - In the second test case, it is impossible to rearrange the robots such that each robot is moved to a unique row and column without any two robots overlapping: Original: R... Rearranged: No possible arrangement .... that satisfies the condition .R.. ..R. So, the output is \\"NO\\".","solution":"def can_rearrange_robots(test_cases): results = [] for n, board in test_cases: # Validate that each row contains exactly one \'R\' valid_row = all(row.count(\'R\') == 1 for row in board) if not valid_row: results.append(\\"NO\\") continue # Collect columns for each robot columns_with_robots = [row.index(\'R\') for row in board] # Validate that all column indices are unique if len(set(columns_with_robots)) == n: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a grid of size n x m, where each cell in the grid contains one of the following: - A \'.\' (dot) representing an empty cell, - A \'#\' (hash) representing a wall, - A \'S\' representing the starting point, and - A \'E\' representing the ending point. You can move up, down, left, or right from an empty cell \'.\' to another empty cell \'.\'. You cannot move through a wall \'#\' or move out of the grid boundaries. Your task is to determine the shortest path from the starting point \'S\' to the ending point \'E\'. If there is no path, output -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and the number of columns of the grid. The next n lines each contains a string of length m, consisting only of \'.\', \'#\', \'S\', and \'E\'. There is exactly one \'S\' and one \'E\' in the grid. Output Output a single integer — the length of the shortest path from \'S\' to \'E\'. If there is no such path, output -1. Examples Input 5 5 ..... .S#.. .#... ...#E ..... Output 7 Input 3 4 S#.E ..#. .. Output -1","solution":"from collections import deque def shortest_path_in_grid(grid, n, m): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] != \'#\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right start = end = None # Find the start and end points in the grid for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) if start and end: break if not start or not end: return -1 queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set(start) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Write a function that takes a list of integers and returns a list of all pairs of integers that sum up to a specified target. Each pair should be a tuple of two numbers. The order of the pairs in the output list does not matter, but each pair should be unique (i.e., you cannot use the same elements from the list more than once, even if they appear multiple times). Examples: ```python pairs_with_sum([1, 2, 3, 4, 3], 6) => [(2, 4), (3, 3)] pairs_with_sum([1, 1, 1, 1], 2) => [(1, 1)] pairs_with_sum([3, 1, 4, 1, 5], 6) => [(1, 5)] pairs_with_sum([1, 2, 3], 7) => [] ```","solution":"def pairs_with_sum(nums, target): Returns a list of unique pairs of numbers from the input list that sum up to the target. Each pair is a tuple of two numbers. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pair = tuple(sorted((num, complement))) pairs.add(pair) seen.add(num) return list(pairs)"},{"question":"You are given an array A of N integers, A_{1}, A_{2}, ..., A_{N}. Define f(X) as the count of set bits (1-bits) in the binary representation of X. Write a function to find the sum of f(A_{i} XOR A_{j}) for all ordered pairs (i, j) such that 1 ≤ i, j ≤ N. Return the answer modulo 10^{9}+7. Example 1: Input: N = 2 A = {2, 4} Output: 6 Explanation: Binary representations are 010 and 100. The pairs are: (2 XOR 2) = 000 -> f(000) = 0 (2 XOR 4) = 110 -> f(110) = 2 (4 XOR 2) = 110 -> f(110) = 2 (4 XOR 4) = 000 -> f(000) = 0 Sum = 0 + 2 + 2 + 0 = 4. Example 2: Input: N = 3 A = {1, 3, 5} Output: 16 Explanation: Binary representations are 001, 011, and 101. The pairs are: (1 XOR 1) = 000 -> f(000) = 0 (1 XOR 3) = 010 -> f(010) = 1 (1 XOR 5) = 100 -> f(100) = 1 (3 XOR 1) = 010 -> f(010) = 1 (3 XOR 3) = 000 -> f(000) = 0 (3 XOR 5) = 110 -> f(110) = 2 (5 XOR 1) = 100 -> f(100) = 1 (5 XOR 3) = 110 -> f(110) = 2 (5 XOR 5) = 000 -> f(000) = 0 Sum = 0 + 1 + 1 + 1 + 0 + 2 + 1 + 2 + 0 = 8. Your Task: You do not need to read input or print anything. Your task is to complete the function sumXorBits() which takes the value N and the array A as input parameters and returns the desired count modulo 10^{9}+7. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^3 0 ≤ A[i] < 2^31","solution":"def sumXorBits(N, A): MOD = 10**9 + 7 def count_set_bits(x): count = 0 while x: count += x & 1 x >>= 1 return count total_sum = 0 for i in range(N): for j in range(N): total_sum += count_set_bits(A[i] ^ A[j]) total_sum %= MOD return total_sum"},{"question":"Given a string of digits, find and return all possible valid IP addresses that can be obtained by inserting dots into the string. A valid IP address must follow these rules: 1. It consists of exactly four integers, each integer is between 0 and 255, inclusive. 2. Integers cannot have leading zeros unless they are zero. 3. The original digits in the string must appear in order. Write a function to solve this problem. Example 1: Input: \\"25525511135\\" Output: [\\"255.255.11.135\\", \\"255.255.111.35\\"] Example 2: Input: \\"0000\\" Output: [\\"0.0.0.0\\"] Example 3: Input: \\"1111\\" Output: [\\"1.1.1.1\\"] Example 4: Input: \\"010010\\" Output: [\\"0.10.0.10\\", \\"0.100.1.0\\"]","solution":"def is_valid(segment): Check if a segment is a valid IP address part. if not segment or (segment[0] == \'0\' and len(segment) > 1) or int(segment) > 255: return False return True def restore_ip_addresses(s): Given a string of digits, return all possible valid IP addresses by inserting dots. def backtrack(start=0, parts=[]): if len(parts) == 4 and start == len(s): results.append(\\".\\".join(parts)) return if len(parts) == 4 or start == len(s): return for length in range(1, 4): if start + length > len(s): break segment = s[start:start+length] if is_valid(segment): backtrack(start+length, parts + [segment]) results = [] backtrack() return results"},{"question":"You\'re given a sequence of N integers, and your task is to determine the sum of all even integers in the sequence. Input The first line contains T, denoting the number of test cases. Each test case consists of one integer, N, denoting the size of the sequence. The next line contains N space-separated integers. Output For each test case, print the required sum of even integers in one line. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 SAMPLE INPUT 2 5 1 2 3 4 5 4 -8 11 20 -19 SAMPLE OUTPUT 6 12","solution":"def sum_of_even_integers(test_cases): Given a list of test cases where each test case is a tuple containing a list of integers, this function calculates and returns the sum of all even integers in each test case. :param test_cases: List of tuples with each tuple containing a list of integers :return: List of sums of even integers for each test case results = [] for case in test_cases: results.append(sum(x for x in case if x % 2 == 0)) return results def process_input(input_data): This function processes the input data and extracts the test cases. :param input_data: String containing the input data with test cases :return: List of test cases lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) sequence = list(map(int, lines[index + 1].split())) test_cases.append(sequence) index += 2 return test_cases def main(input_data): test_cases = process_input(input_data) results = sum_of_even_integers(test_cases) for result in results: print(result) # Example usage input_data = 2 5 1 2 3 4 5 4 -8 11 20 -19 main(input_data)"},{"question":"The Ghost of Computer Science Past is haunting the developers of the year 2050, causing infinite loops and memory leaks at random. The only way to banish the ghost is to decrypt its message. The ghost communicates using a sequence of binary strings, and the task is to find the longest contiguous subsequence of ones (\'1\') in each binary string. You, as a seasoned developer, are tasked with helping decrypt the message by finding the length of the longest contiguous subsequence of \'1\'s in given binary strings. -----Input----- The first line contains a single integer T, the number of binary strings. Each of the next T lines contain a binary string Si. -----Output----- Output T lines with one integer each. The ith line should contain the length of the longest contiguous subsequence of \'1\'s in the binary string Si. -----Constraints----- - 1 <= T <= 10^4 - 1 <= |Si| <= 10^6, where |Si| is the length of the binary string -----Example----- Input: 2 110011100 1110101011 Output: 3 3","solution":"def longest_contiguous_ones(binary_strings): Returns the length of the longest contiguous subsequence of \'1\'s for each binary string. Parameters: binary_strings (list of str): List containing binary strings. Returns: list of int: List of integers where each integer is the length of the longest contiguous subsequence of \'1\'s in the corresponding binary string. results = [] for binary_str in binary_strings: max_count = current_count = 0 for char in binary_str: if char == \'1\': current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 results.append(max_count) return results"},{"question":"You are given N trees in a forest, each tree having a certain height. A lumberjack wants to cut down some trees such that the heights of the remaining trees are strictly increasing from left to right. The lumberjack can only make one cut at each a time, which means he can either cut a tree down completely or leave it as is. He wants to minimize the number of cuts required to achieve this goal. Write a program that takes the number of trees and their heights as input and outputs the minimum number of cuts needed. Input The input is given in the following format. N h_1 h_2 h_3 ... h_N The first line contains the number of trees N (1 ≤ N ≤ 105). The second line contains N integers h_i (1 ≤ h_i ≤ 109), each denoting the height of the i-th tree. Output Output a single integer, the minimum number of cuts required. Examples Input 5 3 4 2 5 7 Output 1 Input 4 4 3 2 1 Output 3","solution":"def min_cuts_to_increasing_sequence(N, heights): Returns the minimum number of cuts required to make the sequence of tree heights strictly increasing. if N == 0: return 0 # Longest increasing subsequence (LIS) using dynamic programming dp = [1] * N for i in range(1, N): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) # The number of cuts required is the total number of trees minus the length of the LIS return N - max(dp) # Example input: # N = 5 # heights = [3, 4, 2, 5, 7] # min_cuts_to_increasing_sequence(N, heights) should return 1"},{"question":"# swap_characters `Goal`: Given a string, reverse the positions of all alphabetic characters in the string while leaving other characters in their original positions. Do not use additional data structures or libraries beyond basic string operations. # Input - A string `s` which can contain any printable ASCII characters. # Output - Return a string where only the positions of the alphabetic characters are reversed, and all other characters remain in their original positions. # Constraints - The input string `s` will be between 1 and 1000 characters long. - Only alphabetic characters (`a-z` and `A-Z`) should be reversed. - Maintain the case (uppercase and lowercase distinctions). # Example Input: ``` s = \\"a,bc\\" ``` Output: ``` \\"c,ba\\" ``` Explanation: Step-by-step: 1. Input string: `a,bc` 2. Extract alphabetic characters: `a`, `b`, `c` 3. Reverse extracted characters: `c`, `b`, `a` 4. Reconstruct the string maintaining positions of non-alphabetic characters: `c,ba` Input: ``` s = \\"ab-cd\\" ``` Output: ``` \\"dc-ba\\" ``` Explanation: Step-by-step: 1. Input string: `ab-cd` 2. Extract alphabetic characters: `a`, `b`, `c`, `d` 3. Reverse extracted characters: `d`, `c`, `b`, `a` 4. Reconstruct the string maintaining positions of non-alphabetic characters: `dc-ba` Input: ``` s = \\"Test1ng-Leet=code-Q!\\" ``` Output: ``` \\"Qedo1ct-eeLg=ntse-T!\\" ``` Explanation: Step-by-step: 1. Input string: `Test1ng-Leet=code-Q!` 2. Extract alphabetic characters: `T`, `e`, `s`, `t`, `n`, `g`, `L`, `e`, `e`, `t`, `c`, `o`, `d`, `e`, `Q` 3. Reverse extracted characters: `Q`, `e`, `d`, `o`, `c`, `t`, `e`, `e`, `L`, `g`, `n`, `t`, `s`, `e`, `T` 4. Reconstruct the string maintaining positions of non-alphabetic characters: `Qedo1ct-eeLg=ntse-T!` This question tests understanding of string manipulation, selective character handling, and in-place data processing without auxiliary space.","solution":"def swap_characters(s): Reverse the positions of all alphabetic characters in the string while leaving other characters in their original positions. Parameters: s (str): The input string which can contain any printable ASCII characters. Returns: str: A string where only the positions of the alphabetic characters are reversed, and all other characters remain in their original positions. # Convert the string to a list to allow in-place modifications s_list = list(s) # Initialize two pointers left, right = 0, len(s) - 1 # loop until the two pointers meet while left < right: if not s_list[left].isalpha(): left += 1 elif not s_list[right].isalpha(): right -= 1 else: # Swap the characters s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 # Convert the list back to a string and return return \'\'.join(s_list)"},{"question":"Given a 2D array where each element represents the height of terrain at that point, design an algorithm to determine the volume of water that can be trapped when it rains. The array has a boundary which cannot trap any water (imagine the boundary is infinitely high). The rule for calculating trapped water is: - The amount of water at a specific cell is determined by the minimum height of the tallest terrains to its left and right, and to its top and bottom, minus the height of the terrain at that cell. The array will have dimensions N x M and each element in the array is a non-negative integer representing the height of the terrain. **Assumptions:** - The dimensions N and M of the array will be at least 3 x 3. - Handling the boundary conditions properly will be key to solving this problem. **Example:** Input: ``` [ [1, 4, 3, 1, 3, 2], [3, 2, 1, 3, 2, 4], [2, 3, 3, 2, 3, 1] ] ``` Output: ``` 4 ``` Explanation: Water trapped: - At [1,1], it can trap min(3, 4, 3, 3) - 2 = 1 unit of water. - At [1,2], it can trap min(3, 4, 3, 2) - 1 = 1 unit of water. - At [1,3], it can trap min(3, 4, 3, 2) - 1 = 2 units of water. (Note that cells on the boundary cannot trap water.) Write a function `trapWater` which takes a 2D array of integers as input and returns the total amount of water trapped.","solution":"import heapq def trapWater(heightMap): if not heightMap or not heightMap[0]: return 0 n, m = len(heightMap), len(heightMap[0]) visited = [[False] * m for _ in range(n)] heap = [] # Add boundary cells to the heap and mark them as visited for i in range(n): for j in [0, m-1]: heapq.heappush(heap, (heightMap[i][j], i, j)) visited[i][j] = True for j in range(m): for i in [0, n-1]: heapq.heappush(heap, (heightMap[i][j], i, j)) visited[i][j] = True directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] trappedWater = 0 while heap: height, x, y = heapq.heappop(heap) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: trappedWater += max(0, height - heightMap[nx][ny]) heapq.heappush(heap, (max(height, heightMap[nx][ny]), nx, ny)) visited[nx][ny] = True return trappedWater"},{"question":"Jake works as a software engineer and he realized that one of the network protocols he is working with transmits data in packets, where each packet contains a mix of hexadecimal characters (0-9 and A-F) and other non-hexadecimal characters. He needs a function that can extract all the hexadecimal sequences of at least length 2 from a given string and return them as a list. Constraints: 1 <= length of the string <= 100 Input: The input will contain a single string consisting of both hexadecimal and non-hexadecimal characters. Output: A list containing all hexadecimal sequences of at least length 2, extracted in their order of appearance in the input string. Sample Input: \\"The address is 1A2F and the data is 4C7D3.\\" Sample Output: [\'1A2F\', \'4C7D\']","solution":"import re def extract_hex_sequences(s): Extract all hexadecimal sequences of at least length 2 from the given string. Parameters: s (str): The input string containing a mix of hexadecimal and non-hexadecimal characters. Returns: list: A list of extracted hexadecimal sequences of at least length 2. return re.findall(r\'b[0-9A-Fa-f]{2,}b\', s)"},{"question":"Given an array of integers A of size N, find the length of the longest substring with at least K distinct integers. Input: First line contains two integers N and K. Second line contains N integers separated by space denoting array A. Constraints: 1 ≤ N ≤ 10^5 1 ≤ K ≤ 100 1 ≤ A[i] ≤ 10^9 for all valid i SAMPLE INPUT 10 2 1 2 1 2 3 4 3 5 6 1 SAMPLE OUTPUT 4","solution":"def longest_subarray_with_k_distinct(N, K, A): Finds the length of the longest substring with at least K distinct integers. Parameters: N (int): The size of array A. K (int): The minimum number of distinct integers in the substring. A (list): The list of integers. Returns: int: The length of the longest substring with at least K distinct integers. from collections import defaultdict # If K is greater than N, it\'s impossible to have such a subarray if K > N: return 0 # Left and right pointers for the sliding window left, right = 0, 0 # Dictionary to count the occurrences of elements in the current window current_count = defaultdict(int) # Number of distinct integers in the current window distinct_count = 0 # Result variable to store the length of the longest subarray found max_length = 0 while right < N: # Add the element on the right end of the window if current_count[A[right]] == 0: distinct_count += 1 current_count[A[right]] += 1 right += 1 # If there are more than K distinct integers, shrink the window from the left while distinct_count > K: current_count[A[left]] -= 1 if current_count[A[left]] == 0: distinct_count -= 1 left += 1 # Update the maximum length of the valid subarray found if distinct_count >= K: max_length = max(max_length, right - left) return max_length"},{"question":"In a bustling library, students are often curious about finding books with the maximum value in consecutive sections. The library is organized into n sections, lined up in a single row. Each section i (1 ≤ i ≤ n) contains a number of books b_i. You have to answer q queries, each of which is about calculating the maximum number of books in a consecutive range of sections. Specifically, each query is defined by two integers l and r (1 ≤ l ≤ r ≤ n), and you are required to find the maximum number of books in sections from l to r, inclusive. Can you process all the queries efficiently? -----Input----- The first line contains two integers n and q (1 ≤ n, q ≤ 10^5). The second line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^4), representing the number of books in each section. Each of the next q lines describes a query with two integers l and r (1 ≤ l ≤ r ≤ n), representing the range of sections for which you need to find the maximum number of books. -----Output----- For each query, output the maximum number of books in the consecutive sections from l to r. -----Examples----- Input 5 3 2 1 5 3 4 1 3 2 4 3 5 Output 5 5 5 Input 8 4 1 3 2 7 4 5 8 6 1 4 2 6 3 8 5 7 Output 7 7 8 8 -----Note----- Consider the first sample. For the first query, the maximum number of books between sections 1 and 3 is 5. For the second query, the maximum number of books between sections 2 and 4 is 5. For the third query, the maximum number of books between sections 3 and 5 is 5.","solution":"def process_queries(n, q, books, queries): # Pre-compute prefix maximums prefix_max = [0] * (n + 1) for i in range(1, n + 1): prefix_max[i] = max(prefix_max[i - 1], books[i - 1]) results = [] for l, r in queries: results.append(max(books[l-1:r])) return results"},{"question":"Alice is a professional gamer who loves strategy games. One of her favorite games involves placing towers on a grid to defend against waves of enemies. Each tower has an assigned attack range and can attack any enemy in the same row or column within that range. Alice\'s goal is to find the optimal placement of towers such that all enemies on the grid are within the attack range of at least one tower. The grid is defined as an m times n matrix, and the positions of the enemies and towers are given as coordinates. Each tower has an infinite attack range in the horizontal and vertical directions. Your task is to determine the minimum number of towers needed to ensure that every enemy on the grid is within the attack range of at least one tower. If it\'s impossible to place towers to satisfy this condition, return -1. -----Input----- The first line contains two integers m and n (1 le m, n le 1000) — the number of rows and columns in the grid, respectively. The second line contains a single integer e (1 le e le 1000) — the number of enemies on the grid. The following e lines each contain two integers r_i and c_i (1 le r_i le m, 1 le c_i le n) — the row and column coordinates of the i-th enemy. -----Output----- Print a single integer — the minimum number of towers needed to cover all enemies, or -1 if it is impossible. -----Examples----- Input 5 4 3 1 2 3 4 5 2 Output 2 Input 4 4 4 1 1 2 2 3 3 4 4 Output 4 Input 3 3 1 2 2 Output 1","solution":"def min_towers_needed(m, n, e, enemy_positions): if e == 0: return 0 rows_covered = set() cols_covered = set() for r, c in enemy_positions: rows_covered.add(r) cols_covered.add(c) return min(len(rows_covered), len(cols_covered)) # Example usage: # m, n = 5, 4 # e = 3 # enemy_positions = [(1, 2), (3, 4), (5, 2)] # print(min_towers_needed(m, n, e, enemy_positions))"},{"question":"Lisa is hosting a party and wants to create gift bags for her guests. Each gift bag must contain a minimum number of candies and chocolates, and she has a fixed number of both candies and chocolates available. Determine whether she can create at least one gift bag with the required minimum number of candies and chocolates. ------ Input Format ------ - The first line of input will contain two integers C and D, the number of candies and chocolates she has. - The second line of input contains two space-separated integers M and N, the minimum number of candies and chocolates needed for each gift bag. ------ Output Format ------ Print a single line containing Yes if at least one gift bag can be created and No otherwise. You may print each character of the string in uppercase or lowercase (for example, the strings yes, Yes, yEs, and YES will all be treated as identical). ------ Constraints ------ 1 ≤ C, D, M, N ≤ 10^{5} ------ subtasks ------ Subtask 1 (100 points): Original constraints. ------ Sample Input 1 ------ 10 5 2 3 ------ Sample Output 1 ------ Yes ------ explanation 1 ------ Each gift bag requires 2 candies and 3 chocolates. Since Lisa has 10 candies and 5 chocolates, she can create at least one gift bag. ------ Sample Input 2 ------ 8 5 9 1 ------ Sample Output 2 ------ No ------ explanation 2 ------ Each gift bag requires 9 candies and 1 chocolate. Since Lisa only has 8 candies, she cannot create any gift bag. ------ Sample Input 3 ------ 1 1 1 1 ------ Sample Output 3 ------ Yes ------ explanation 3 ------ Each gift bag requires 1 candy and 1 chocolate. Since Lisa has exactly 1 candy and 1 chocolate, she can create exactly one gift bag. ------ Sample Input 4 ------ 15 20 5 10 ------ Sample Output 4 ------ Yes ------ explanation 4 ------ Each gift bag requires 5 candies and 10 chocolates. Since Lisa has 15 candies and 20 chocolates, she can create exactly 3 gift bags. Thus, creating one is certainly possible.","solution":"def can_create_gift_bag(C, D, M, N): Determine if at least one gift bag can be created given the amount of candies (C) and chocolates (D) along with the minimum required candies (M) and chocolates (N) for each gift bag. if C >= M and D >= N: return \\"Yes\\" else: return \\"No\\""},{"question":"Write a method that takes in a string and a number and returns the string truncated to the given number of words. Consider words to be any sequences of non-whitespace characters separated by one or more whitespace characters. If the string contains fewer words than the specified number, return the entire string. If the string is empty or null/nil, return an empty string. ```Python truncate_string(\\"The quick brown fox jumps over the lazy dog\\", 4) # should return \\"The quick brown fox\\" truncate_string(\\"Hello world\\", 5) # should return \\"Hello world\\" truncate_string(\\"\\", 3) # should return \\"\\" ``` ```Haskell truncateString \\"The quick brown fox jumps over the lazy dog\\" 4 -- should return \\"The quick brown fox\\" truncateString \\"Hello world\\" 5 -- should return \\"Hello world\\" truncateString \\"\\" 3 -- should return \\"\\" ```","solution":"def truncate_string(s, n): Truncates the string `s` to the first `n` words. Parameters: s (str): The input string to be truncated. n (int): The number of words to truncate to. Returns: str: The truncated string. if not s: return \\"\\" words = s.split() truncated_words = words[:n] return \\" \\".join(truncated_words)"},{"question":"A social network consists of \\"friends\\" who have direct connections with each other. Your task is to determine the shortest path of friendship connections required to introduce two people who are not currently friends, using the least number of intermediate friends. -----Input----- The first line of the input contains two positive integers n and m, representing the number of people in the network and the number of direct friendship connections, respectively. Each of these integers is no larger than 100,000. The people are numbered from 1 to n. The following m lines each describe a friendship connection, with two integers a and b indicating that person a and person b are direct friends. Finally, the last line contains two distinct integers x and y, representing the two people you need to introduce. -----Output----- Output a single integer, the minimum number of intermediate friends required to introduce x to y. If it is not possible to connect x to y through any number of intermediate friends, output the word IMPOSSIBLE. -----Examples----- Sample Input: 5 4 1 2 2 3 3 4 4 5 1 5 Sample Output: 4 Sample Input: 4 2 1 2 3 4 1 4 Sample Output: IMPOSSIBLE","solution":"from collections import deque, defaultdict def shortest_friendship_path(n, m, friendships, x, y): Find the shortest path of friendship connections required to introduce two people who are not currently friends. Args: n (int): number of people in the network. m (int): number of direct friendship connections. friendships (list): list of tuples; each tuple (a, b) indicates person a and person b are direct friends. x (int): person to be introduced. y (int): person to be introduced to. Returns: int: minimum number of intermediate friends required to introduce x to y. If it is not possible, returns \\"IMPOSSIBLE\\". if x == y: return 0 # Create adjacency list for the graph adj_list = defaultdict(list) for a, b in friendships: adj_list[a].append(b) adj_list[b].append(a) # BFS to find the shortest path queue = deque([(x, 0)]) # (current_node, distance) visited = set([x]) while queue: current, distance = queue.popleft() for neighbor in adj_list[current]: if neighbor == y: return distance + 1 if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return \\"IMPOSSIBLE\\" # Example usage n = 5 m = 4 friendships = [(1, 2), (2, 3), (3, 4), (4, 5)] x = 1 y = 5 print(shortest_friendship_path(n, m, friendships, x, y)) # Output: 4"},{"question":"You are given an integer array Arr of size N. Your task is to find the sum of all subarray minimums. Since the sum can be large, return it modulo 10^9 + 7. Example 1: Input: Arr = [3, 1, 2, 4] Output: 17 Example 2: Input: Arr = [11, 81, 94, 43, 3] Output: 444 Your Task: You don\'t need to read input or print anything. Your task is to complete the function `sumSubarrayMins()` which takes the array Arr as input and returns the sum of all subarray minimums. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 3 * 10^4 1 <= Arr[i] <= 3 * 10^4 Sum of N over all test cases doesn\'t exceed 10^6. Array may contain duplicate elements.","solution":"def sumSubarrayMins(Arr): MOD = 10**9 + 7 n = len(Arr) # Previous Less Element (PLE) and Next Less Element (NLE) PLE = [-1] * n NLE = [n] * n stack = [] for i in range(n): while stack and Arr[stack[-1]] > Arr[i]: NLE[stack.pop()] = i stack.append(i) stack = [] for i in range(n - 1, -1, -1): while stack and Arr[stack[-1]] >= Arr[i]: PLE[stack.pop()] = i stack.append(i) result = 0 for i in range(n): left_count = i - PLE[i] right_count = NLE[i] - i result += Arr[i] * left_count * right_count result %= MOD return result"},{"question":"Write a function that takes an integer \\"n\\" (1 ≤ n ≤ 1000) and returns a list of all pairs of integers (i, j) such that 1 ≤ i < j ≤ n and GCD(i, j) is 1. For example, for \\"n = 5\\", the pairs would be [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 5), (3, 4), (3, 5), (4, 5)]. Function signature: `def coprime_pairs(n: int) -> List[Tuple[int, int]]`","solution":"from typing import List, Tuple from math import gcd def coprime_pairs(n: int) -> List[Tuple[int, int]]: Returns a list of all pairs of integers (i, j) such that 1 ≤ i < j ≤ n and GCD(i, j) is 1. pairs = [] for i in range(1, n): for j in range(i + 1, n + 1): if gcd(i, j) == 1: pairs.append((i, j)) return pairs"},{"question":"Aanya is learning about matrices in her math class. Her teacher gave her an interesting problem. Given an `n x n` matrix, Aanya is asked to rotate the matrix 90 degrees clockwise. Help Aanya write a function that takes an `n x n` matrix as input and returns the rotated matrix. Example 1: Input: 3 1 2 3 4 5 6 7 8 9 Output: 7 4 1 8 5 2 9 6 3 Example 2: Input: 2 1 2 3 4 Output: 3 1 4 2 Your Task: You don\'t need to input anything. Complete the function rotateMatrix() which takes an integer n and a 2D list of size n*n as input and returns a 2D list of size n*n representing the rotated matrix. Constraints: 1 <= n <= 50","solution":"def rotateMatrix(n, matrix): Rotates the given n x n matrix by 90 degrees clockwise. Parameters: n (int): the dimension of the matrix matrix (list of list of int): the n x n matrix to be rotated Returns: list of list of int: the rotated n x n matrix rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - i - 1] = matrix[i][j] return rotated_matrix"},{"question":"You are given an array of integers representing the heights of buildings arranged in a row. You have a limited number of water units, and your task is to determine the maximum number of buildings that can be filled with water up to their top. Each unit of water can raise the level of any building by one height unit. You can distribute water across the buildings as you see fit but cannot exceed the quantity of water and must fill the buildings one by one starting from the left to the right. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of buildings. The second line contains n non-negative integers h1, h2, ..., hn (0 ≤ hi ≤ 1000) — the initial heights of the buildings. The final line contains an integer w (0 ≤ w ≤ 1000) — the number of water units available. Output Output an integer representing the maximum number of buildings that can be filled with water up to their top. Examples Input 5 2 1 1 3 4 4 Output 3 Input 4 0 0 0 0 5 Output 5 Input 3 5 4 6 10 Output 2 Input 3 2 3 4 0 Output 0 Note For the first sample, after allocating 4 units of water: - 2 units are used to raise the 1st building to height 4, - 1 unit is used to raise the 2nd building to height 2, - 1 unit is used to raise the 3rd building to height 2. Thus, 3 buildings receive water up to their top. For the second sample, all buildings can be filled with water up to their top with the given 5 units of water. For the third sample, you cannot fill all the buildings completely as their heights exceed the total water units available. Hence, only two buildings can be filled. For the fourth sample, no water is available, so no buildings can be filled.","solution":"def max_filled_buildings(heights, water_units): heights = sorted(heights) count = 0 for height in heights: if water_units >= height: water_units -= height count += 1 else: break return count"},{"question":"Your program will be given a string representing a binary number. Find the smallest binary number with the same number of \'1\'s and \'0\'s that is lexicographically larger than the given binary number. -----Input----- The first line of input contains a binary string ( B ) of length ( N ) ((1 le N le 20)). The binary string ( B ) will contain equal number of \'1\'s and \'0\'s and ( N ) will be even. -----Output----- Output the result on a single line. If there is no such binary number, output \'No greater binary number\'. -----Examples----- Sample Input 1: 1010 Sample Output 1: 1100 Sample Input 2: 0011 Sample Output 2: 0101 Sample Input 3: 11110000 Sample Output 3: No greater binary number","solution":"def next_greater_binary_number(b): Given a binary string b with equal number of \'1\'s and \'0\'s, find the smallest binary number that is lexicographically larger than b. If there is no such binary number, return \'No greater binary number\'. b = list(b) n = len(b) if n <= 1: return \'No greater binary number\' # Step 1: Find the rightmost char which is smaller than its next char. i = n - 2 while i >= 0 and b[i] >= b[i + 1]: i -= 1 # If no such char found, this is the largest permutation. if i == -1: return \'No greater binary number\' # Step 2: Find the smallest char on right of \'i\' and is greater than b[i]. j = n - 1 while b[j] <= b[i]: j -= 1 # Step 3: Swap characters at i and j. b[i], b[j] = b[j], b[i] # Step 4: Reverse the substring after i+1 to make it smallest lexicographically. b = b[:i+1] + b[i+1:][::-1] return \'\'.join(b)"},{"question":"Write a program that calculates the number of permutations P(n, k) from a set of n elements taken k at a time, where k ≤ n. The number of permutations is given by the formula: [ P(n, k) = frac{n!}{(n - k)!} ] Your program should be able to handle very large values of n and k efficiently. -----Input----- The only line of input contains two integers n (1 ≤ n ≤ 10^9) and k (0 ≤ k ≤ n). -----Output----- Output one integer — the number of permutations P(n, k). -----Examples----- Input 5 3 Output 60 Input 10 0 Output 1","solution":"def permutations(n, k): Returns the number of permutations P(n, k) from a set of n elements taken k at a time. P(n, k) = n! / (n - k)! if k == 0: return 1 result = 1 for i in range(n, n - k, -1): result *= i return result"},{"question":"Given a positive integer `n`, return the smallest prime number that is greater than `n`. If `n` is a prime number itself, return the next prime number. **Note**: Efficient solutions are required because large inputs will be tested. Examples: For `n = 7`, the next prime number is `11`. For `n = 14`, the next prime number is `17`. For `n = 29`, the next prime number is `31`.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def next_prime(n): Returns the smallest prime number that is greater than n. If n is a prime number itself, returns the next prime number. candidate = n + 1 while not is_prime(candidate): candidate += 1 return candidate"},{"question":"A company wants to organize a special event to promote teamwork among its employees. They decide to conduct a series of team-building sessions where employees will be paired up to complete various tasks. Every employee will participate in multiple sessions. They want to ensure that each employee pairs up with every other employee exactly once throughout the series. Given the number of employees, determine the total number of unique pairs that can be formed. -----Constraints----- - 2 ≤ N ≤ 10^6 - N is an integer. -----Input----- The input is given from Standard Input in the following format: N -----Output----- Print the total number of unique pairs that can be formed. -----Sample Input----- 4 -----Sample Output----- 6 Explanation: For 4 employees numbered 1, 2, 3, and 4, the pairs will be: (1,2), (1,3), (1,4), (2,3), (2,4), (3,4) Thus, the total number of unique pairs is 6.","solution":"def count_unique_pairs(N): Given the number of employees, determine the total number of unique pairs that can be formed. Args: N : int The number of employees. Returns: int The total number of unique pairs. if N < 2: return 0 return N * (N - 1) // 2"},{"question":"Write a program that reads a string ( s ) and a pattern string ( p ), and determines if the pattern ( p ) matches the whole input string ( s ). The pattern string can contain the special characters: * `.`: which matches any single character. * `*`: which matches zero or more of the preceding character. The matching should cover the entire string (not partial). Note - \'.\' and \'*\' character in pattern string has special meanings as described - The input strings consist of lowercase English letters only. Constraints * ( 1 leq mid s mid leq 1000 ) * ( 1 leq mid p mid leq 1000 ) Input In the first line, a string ( s ) is given. In the second line, the pattern string ( p ) is given. Output Print \\"true\\" if the pattern matches the entire string, otherwise print \\"false\\". Example Input aab c*a*b Output true Input mississippi mis*is*p*. Output false","solution":"def is_match(s, p): Determine if pattern p matches the entire input string s. Args: s (str): input string p (str): pattern string Returns: bool: True if pattern matches the string, False otherwise n, m = len(s), len(p) dp = [[False] * (m + 1) for _ in range(n + 1)] dp[0][0] = True for j in range(1, m + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 2] # \'*\' can eliminate the sequence for i in range(1, n + 1): for j in range(1, m + 1): if p[j - 1] in {s[i - 1], \'.\'}: dp[i][j] = dp[i - 1][j - 1] elif p[j - 1] == \'*\': dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] if p[j - 2] in {s[i - 1], \'.\'} else False) return dp[n][m]"},{"question":"You are given a list of integers, where each integer appears exactly three times, except for one integer which appears only once. Your task is to find the integer that appears only once. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line of each test case contains 3N+1 space-separated integers denoting the elements of the list. -----Output----- For each test case, print a single line containing the integer that appears only once. -----Constraints----- - T le 100 - 1 le N le 10^5 - |a_i| le 10^9 -----Example Input----- 1 3 5 5 5 7 7 7 4 4 4 3 -----Example Output----- 3","solution":"def find_unique_integer(T, test_cases): results = [] for case in test_cases: N, integers = case count_dict = {} for num in integers: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 for num, count in count_dict.items(): if count == 1: results.append(num) break return results"},{"question":"A digital clock displays the current time in the format HH:MM:SS. The clock allows users to set an alarm for a specific time of the day. Given a list of alarm times and the current time, your task is to determine which alarm will ring next. You should consider that all times are in a 24-hour format and the list of alarm times may not be sorted. Input The input consists of multiple datasets. Each dataset is formatted as follows: n H1:M1:S1 H2:M2:S2 ... Hn:Mn:Sn Hc:Mc:Sc The first line contains an integer n (1 ≤ n ≤ 100), the number of alarms. The next n lines contain the times of the alarms in the format HH:MM:SS. The last line contains the current time in the format HH:MM:SS. You can assume that all given times are valid times in a 24-hour format (00 ≤ HH ≤ 23, 00 ≤ MM ≤ 59, 00 ≤ SS ≤ 59) and that there is at least one alarm set. Output For each dataset, output a single line containing the time of the alarm that will ring next, in the format HH:MM:SS. If the current time is exactly the same as an alarm time, that alarm is considered the next to ring. Example Input 2 08:30:00 12:45:00 09:20:00 3 07:15:00 07:15:30 07:16:00 07:15:45 1 23:59:59 00:00:00 5 10:00:00 09:59:00 10:01:00 23:59:00 23:59:59 22:30:00 0 Output 12:45:00 07:15:45 23:59:59 09:59:00","solution":"def find_next_alarm(num_alarms, alarms, current_time): Returns the next alarm time given the current time. :param num_alarms: Number of alarms. :param alarms: List of alarm times in HH:MM:SS format. :param current_time: Current time in HH:MM:SS format. :return: Next alarm time in HH:MM:SS format. def time_to_seconds(t): h, m, s = map(int, t.split(\':\')) return h * 3600 + m * 60 + s current_seconds = time_to_seconds(current_time) min_diff = float(\'inf\') next_alarm = None for alarm in alarms: alarm_seconds = time_to_seconds(alarm) diff = (alarm_seconds - current_seconds) % (24 * 3600) if diff < min_diff: min_diff = diff next_alarm = alarm return next_alarm def process_input(input_str): input_lines = input_str.strip().split(\'n\') index = 0 results = [] while index < len(input_lines): num_alarms = int(input_lines[index].strip()) if num_alarms == 0: break index += 1 alarms = [] for _ in range(num_alarms): alarms.append(input_lines[index].strip()) index += 1 current_time = input_lines[index].strip() index += 1 results.append(find_next_alarm(num_alarms, alarms, current_time)) return results"},{"question":"**Subsequence Counting** Given two strings S and T, determine the number of times T appears as a subsequence in S. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Input Two strings S and T are given as input separated by a newline. Output Print the number of times T appears as a subsequence in S. Constraints * 1 leq |T| leq |S| leq 1000 * Both S and T contain only lowercase letters. Sample Input 1 ``` rabbbit rabbit ``` Sample Output 1 ``` 3 ``` Sample Input 2 ``` babgbag bag ``` Sample Output 2 ``` 5 ``` Example Input ``` rabbbit rabbit ``` Output ``` 3 ```","solution":"def num_distinct(S, T): m = len(S) n = len(T) # Create a 2D array to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # If T is an empty string, there is exactly one subsequence in any string S for i in range(m + 1): dp[i][0] = 1 # Fill dp[][] in bottom up manner for i in range(1, m + 1): for j in range(1, n + 1): if S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] return dp[m][n]"},{"question":"Calculate the Next Working Day Write a function that calculates the next working day given a date and an array of integers representing non-working days in a week. Function Signature: ```python def next_working_day(date: str, non_working_days: List[int]) -> str: pass ``` Example: ```python # \\"2023-06-23\\" is a Friday and we\'re given Saturday (5) and Sunday (6) as non-working days # The next working day is Monday (2023-06-26) print(next_working_day(\\"2023-06-23\\", [5, 6])) # Output: \\"2023-06-26\\" # \\"2022-12-30\\" is a Friday and we\'re given Sunday (6) only as a non-working day # The next working day is Saturday (2022-12-31) print(next_working_day(\\"2022-12-30\\", [6])) # Output: \\"2022-12-31\\" ``` Constraints: - The input date will be a valid date in the format \'YYYY-MM-DD\'. - The list `non_working_days` will contain integers from 0 (Monday) to 6 (Sunday). - The function will always be given at least one non-working day. - Consider leap years when calculating dates. Notes: - Use Python\'s `datetime` module to handle date manipulations. - The function should return the next working day in the same \'YYYY-MM-DD\' format. - The function should handle an indefinite number of skip days properly.","solution":"from datetime import datetime, timedelta from typing import List def next_working_day(date: str, non_working_days: List[int]) -> str: # Initial date conversion current_date = datetime.strptime(date, \'%Y-%m-%d\') next_day = current_date + timedelta(days=1) # Loop till we find a working day while next_day.weekday() in non_working_days: next_day += timedelta(days=1) return next_day.strftime(\'%Y-%m-%d\')"},{"question":"Eve is playing a game involving three stacks of coins. Each stack contains a certain number of coins, denoted as `x`, `y`, and `z` respectively. Eve can perform only one of two operations on the stacks repeatedly until she can no longer do so: 1. Remove two coins from one of the stacks (if it contains at least two coins) and add one coin to another stack. 2. Remove three coins from one of the stacks (if it contains at least three coins) and add two coins to another stack. She wants to find out the maximum number of coins she can accumulate in one chosen stack by performing the above operations. -----Input----- The first line contains a single integer `t` (1 leq t leq 100) — the number of test cases. The next `t` lines contain three non-negative integers `x`, `y`, and `z` separated by spaces (0 leq x, y, z leq 100) — the initial number of coins in the three stacks respectively. -----Output----- For each test case, print a single integer representing the maximum possible number of coins Eve can accumulate in one stack. -----Example----- Input 3 2 4 6 1 5 4 7 0 5 Output 8 5 13 -----Note----- For the first test case, Eve can perform the following sequence of operations to accumulate more coins in one stack: - Remove 2 coins from the third stack and add 1 coin to the first stack, making the stacks: 3 4 4 - Remove 2 coins from the second stack and add 1 coin to the first stack, making the stacks: 4 2 4 - Remove 2 coins from the third stack and add 1 coin to the first stack, making the stacks: 5 2 2 - Remove 2 coins from the second stack and add 1 coin to the first stack, making the stacks: 6 0 2 - Remove 2 coins from the third stack and add 1 coin to the first stack, making the stacks: 7 0 0 Thus, the maximum number of coins in one stack Eve can achieve is 8.","solution":"def max_coins(t, test_cases): results = [] for x, y, z in test_cases: results.append((x + y + z) // 2) return results"},{"question":"Given an integer array nums and an integer target, design an algorithm to determine if there are two distinct indices i and j in the array such that nums[i] + nums[j] == target. If such indices are found, return them in the form of a tuple (i, j). Otherwise, return an empty tuple. -----Constraints----- - 2 ≤ nums.length ≤ 100 000 - -10^9 ≤ nums[i] ≤ 10^9 - -10^9 ≤ target ≤ 10^9 -----Input----- The input is given from Standard Input in the following format: - The first line contains two integers: n and target, where n is the length of the array nums. - The second line contains n integers: the elements of the array nums. -----Output----- Output a tuple (i, j) if such indices are found; otherwise, output an empty tuple. -----Example Input----- 5 9 3 2 4 7 1 -----Example Output----- (2, 3) -----Example Explanation----- nums[2] + nums[3] = 4 + 7 = 11, which matches the target. Return the indices as a tuple.","solution":"def find_two_sum(nums, target): Given an integer array nums and an integer target, determines if there are two distinct indices i and j in the array such that nums[i] + nums[j] == target. If such indices are found, returns them in the form of a tuple (i, j). Otherwise, returns an empty tuple. num_map = {} # Dictionary to store number and their index for i, num in enumerate(nums): complement = target - num if complement in num_map: return (num_map[complement], i) num_map[num] = i return () # Example usage: # n, target = 5, 9 # nums = [3, 2, 4, 7, 1] # print(find_two_sum(nums, target)) # Should output (2, 3)"},{"question":"One day, you decided to start collecting rare gems. Each gem you find has a certain weight and value. You have a special bag that can carry a maximum total weight, but you want to maximize the total value of the gems in your bag. You are given a set of n gems, each with a given weight and value, and an integer capacity which represents the maximum weight your bag can carry. Your task is to determine the maximum value of gems you can collect without exceeding the bag\'s capacity. Input The first line contains two integers n and capacity (1 ≤ n ≤ 1000, 1 ≤ capacity ≤ 1000) — the number of gems and the capacity of your bag, respectively. Each of the next n lines contains two integers wi and vi (1 ≤ wi, vi ≤ 1000) — the weight and value of each gem. Output Output a single integer — the maximum value of gems you can collect with your bag\'s capacity. Example Input 4 7 2 10 3 20 4 30 5 40 Output 50 Note In the example, the best choice is to take gems with weights 2 and 3, which together weigh 5 and have a combined value of 10 + 20 = 30, and then to add the gem with weight 2 and value 10 again making the total value of 50.","solution":"def maximize_gem_value(n, capacity, gems): Calculates the maximum value of gems that can be collected without exceeding the bag\'s capacity. Parameters: n (int): the number of gems capacity (int): the maximum weight the bag can carry gems (list of tuples): each tuple contains (weight, value) of a gem Returns: int: maximum value of gems that can be carried # Initialize a dp array where dp[i] represents the max value for capacity i dp = [0] * (capacity + 1) # Loop through each gem for weight, value in gems: # Traverse dp array from right to left for current_weight in range(capacity, weight - 1, -1): dp[current_weight] = max(dp[current_weight], dp[current_weight - weight] + value) return max(dp)"},{"question":"Consider a matrix n times m consisting of integers. You have to rotate the matrix 90 degrees to the right. -----Input----- The first line contains two integers n and m (1 le n, m le 1000). The following n lines contain m integers each, representing the elements of the matrix. -----Output----- Output the rotated matrix. Each of the m lines should contain n integers. -----Examples----- Input 3 3 1 2 3 4 5 6 7 8 9 Output 7 4 1 8 5 2 9 6 3 Input 2 4 1 2 3 4 5 6 7 8 Output 5 1 6 2 7 3 8 4","solution":"def rotate_matrix(n, m, matrix): Rotates the matrix 90 degrees to the right. Parameters ---------- n : int Number of rows in the matrix. m : int Number of columns in the matrix. matrix : list of list of int The matrix to rotate. Returns ------- list of list of int The rotated matrix. # Create an empty matrix for the result rotated = [[0] * n for _ in range(m)] # Fill the rotated matrix for i in range(n): for j in range(m): rotated[j][n - 1 - i] = matrix[i][j] return rotated # Function to format the output for convenience def format_matrix(matrix): return \\"n\\".join(\\" \\".join(map(str, row)) for row in matrix)"},{"question":"Given an array arr[] of N elements and an integer S. Find the number of contiguous subarrays whose sum of elements is exactly equal to S. Example 1: Input: N = 5 arr[] = {1, 2, 3, 4, 5} S = 5 Output: 2 Explanation: Two subarrays with sum 5 are [2, 3] and [5]. Example 2: Input: N = 3 arr[] = {1, 1, 1} S = 2 Output: 2 Explanation: Two subarrays with sum 2 are [1, 1] (the first and second elements) and [1, 1] (the second and third elements). Your Task: You don\'t need to read input or print anything. Your task is to complete the function numOfSubarrays() which takes an integer N, and an integer S, and an array arr of size N as input and returns the number of contiguous subarrays with sum equal to S. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 -10^4 ≤ arr[i] ≤ 10^4 -10^9 ≤ S ≤ 10^9","solution":"def numOfSubarrays(N, arr, S): Returns the number of contiguous subarrays with sum equal to S. Parameters: N (int): The number of elements in the array. arr (list of int): The array of integers. S (int): The target sum. Returns: int: The number of contiguous subarrays with sum equal to S. from collections import defaultdict # This dictionary will store the cumulative sum up to all the indices prefix_sum_count = defaultdict(int) prefix_sum_count[0] = 1 current_sum = 0 count = 0 for i in range(N): current_sum += arr[i] if current_sum - S in prefix_sum_count: count += prefix_sum_count[current_sum - S] prefix_sum_count[current_sum] += 1 return count"},{"question":"Jenny loves shopping and finding discounts. She is particularly interested in combining multiple discounts to maximize her savings. She recently discovered that some stores offer multiple percentage discounts that can be applied sequentially. For example, a 10% discount followed by a 20% discount is not the same as a 30% discount. Given a list of prices and their respective discount sequences, Jenny wants to know the final price of each item after applying all the given discounts sequentially. # Examples ```plaintext original_price = 100, discounts = [10, 20] The final price after applying a 10% discount (100 -> 90), then a 20% discount (90 -> 72) will be 72. original_price = 200, discounts = [15, 10, 5] The final price after applying a 15% discount (200 -> 170), then a 10% discount (170 -> 153), then a 5% discount (153 -> 145.35) will be 145.35. ``` # Your task is to write a function that calculates the final price of each item after applying all the given discounts in the provided order. The function should return a list of final prices for each item. ```python def calculate_final_prices(prices, discounts): pass ``` # Input arguments - `prices`: a list of floats representing the original prices of different items. Each price is in the range 1.00 to 10,000.00. - `discounts`: a list of lists, where each sub-list contains integers representing the percentage discounts for each corresponding item in `prices`. Each discount percentage is in the range 1 to 100. # Output - The function should return a list of floats representing the final prices of the items after applying the respective discount sequences. # Constraints - The length of `prices` will always be equal to the length of `discounts`. - Each price will have at least one discount percentage to apply.","solution":"def calculate_final_prices(prices, discounts): Calculate the final price of each item after applying a sequence of discounts. :param prices: List of floats representing the original prices of different items. :param discounts: List of list of integers representing the percentage discounts for each corresponding item. :return: List of floats representing the final prices after applying all discounts. final_prices = [] for price, discount_sequence in zip(prices, discounts): final_price = price for discount in discount_sequence: final_price *= (1 - discount / 100.0) final_prices.append(final_price) return final_prices"},{"question":"Write a function that simulates the roll of a pair of six-sided dice, commonly known as \\"rolling two dice.\\" Each die has six faces, numbered from 1 to 6, and each face is equally likely to show on a roll. The function should generate and print all possible outcomes of rolling the pair of dice. Finally, convert the outcomes to a list of tuples and return that list. For example: Output should include (1, 1), (1, 2), ..., (6, 6) Your task is to implement the function `roll_dice()`, which takes no inputs and returns a list of tuples representing all possible outcomes of rolling two six-sided dice. ```python def roll_dice(): # Implement the function here pass # Example of expected output: # [(1, 1), (1, 2), ..., (6, 6)] ```","solution":"def roll_dice(): Returns a list of tuples representing all possible outcomes of rolling two six-sided dice. outcomes = [(i, j) for i in range(1, 7) for j in range(1, 7)] return outcomes"},{"question":"Write a function to create an acronym from a given string. The function should take a single argument, which is the input string, and return a string that is the acronym formed by the first letter of each word, converted to uppercase. Words in the input string are separated by spaces. The input string will contain only alphabetic characters and spaces. Examples ``` (\\"Portable Network Graphics\\") ==> \\"PNG\\" (\\"First In, First Out\\") ==> \\"FIFO\\" (\\"As Soon As Possible\\") ==> \\"ASAP\\" ```","solution":"def create_acronym(input_string): Returns an acronym formed by the first letter of each word in the input string, converted to uppercase. words = input_string.split() acronym = \'\'.join(word[0].upper() for word in words) return acronym"},{"question":"In a binary tree, each node has a value and at most two children. Write a function that returns the lowest common ancestor (LCA) of two given nodes in the tree. The LCA is the deepest (i.e., farthest from the root) node that is an ancestor of both nodes. For instance, in the binary tree shown below: ``` 3 / 5 1 / / 6 2 0 8 / 7 4 ``` The LCA of nodes 5 and 1 is 3. The LCA of nodes 5 and 4 is 5. You may assume that all the node values are unique. Function Signature: ```python def lowest_common_cestor(root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode: ``` Input Format The `root` parameter will be the root node of the binary tree, and `p` and `q` will be the two nodes for which you need to determine the LCA. Constraints - The number of nodes in the tree is in the range `[2, 10^4]`. - Each node has a unique value in the range `[0, 10^4]`. Output Format Return the LCA node. Sample Input ``` root = [3,5,1,6,2,0,8,None,None,7,4] p = 5 q = 1 ``` Sample Output ``` 3 ``` Explanation - The LCA for nodes 5 and 1 is 3, as node 3 is the deepest node that is an ancestor of both nodes 5 and 1. Note - The function should return the actual node that is the LCA, not just the value of the node.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def lowest_common_ancestor(root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode: Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. # Base case: if root is None or root is one of p or q if not root or root == p or root == q: return root # Recurse on the left and right subtrees left = lowest_common_ancestor(root.left, p, q) right = lowest_common_ancestor(root.right, p, q) # If both left and right are not None, p and q are in different subtrees # So root is their LCA if left and right: return root # Otherwise, return the non-null node return left if left else right"},{"question":"Raj loves to collect coins. Every day he collects a different number of coins based on the day of the week. A week consists of 7 days (Monday to Sunday). The number of coins he collects are as follows: - Monday: 1 coin - Tuesday: 2 coins - Wednesday: 3 coins - Thursday: 4 coins - Friday: 5 coins - Saturday: 6 coins - Sunday: 7 coins Given a month consisting of N days, with the first day of the month being Monday, calculate the total number of coins Raj collects in the entire month. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N - the number of days in the month. ------ Output Format ------ For each test case, output in a single line, the total number of coins Raj collects in the whole month. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{9} ------ Subtasks ------ Subtask 1 (30 points) : 1 ≤ N ≤ 100 Subtask 2 (70 points) : Original Constraints ----- Sample Input 1 ------ 3 7 14 28 ----- Sample Output 1 ------ 28 56 112 ----- Explanation 1 ------ Test case 1: The month consists of 7 days, which means a complete week. The total coins collected in one week is 1+2+3+4+5+6+7=28. Test case 2: The month consists of 14 days, which means two complete weeks. The total coins collected in two weeks is 2 * 28=56. Test case 3: The month consists of 28 days, which means four complete weeks. The total coins collected in four weeks is 4 * 28=112.","solution":"def total_coins(N): Calculate the total number of coins Raj collects in a month consisting of N days, with the first day of the month being Monday. # Sum of coins collected in one week (7 days) weekly_sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 # Number of complete weeks weeks = N // 7 # Number of remaining days after complete weeks remaining_days = N % 7 # Initial total coins for complete weeks total = weeks * weekly_sum # Adding coins collected on remaining days for day in range(1, remaining_days + 1): total += day return total def solve(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) results = [] for i in range(1, T + 1): N = int(data[i]) results.append(total_coins(N)) for result in results: print(result)"},{"question":"You are given a 2D grid of characters \'X\' and \'O\'. You need to determine the size of the largest square subgrid that consists only of \'O\' characters. The size of a square subgrid is measured by the length of one of its sides. -----Input----- The first line contains two integers n (1 le n le 1000) and m (1 le m le 1000) - the number of rows and columns in the grid. Each of the next n lines contains a string of length m consisting of the characters \'X\' and \'O\'. -----Output----- Print a single integer, the size of the largest square subgrid consisting only of \'O\' characters. -----Examples----- Input 4 5 XXOXO XOXOX XXXOO OOOOO Output 2 Input 3 3 XXX XXX XXX Output 0 -----Note----- In the first example, the largest square subgrid consisting entirely of \'O\' characters has a size of 2 (i.e., a 2x2 square). In the second example, there are no \'O\' characters, so the output is 0.","solution":"def largest_square_subgrid(n, m, grid): Returns the size of the largest square subgrid consisting only of \'O\' characters. if not grid: return 0 # A dp(i, j) stores the length of the largest square subgrid ending at (i, j) dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if grid[i][j] == \'O\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"A company is organizing a coding training program and wants to arrange the schedule so that the sessions do not overlap. Each session has a start time and an end time. The company needs to find out the maximum number of non-overlapping sessions that can be scheduled in a single room. Write a function that takes an integer `n` representing the number of sessions and a list of tuples where each tuple represents the start and end time of a session. Your function should return the maximum number of non-overlapping sessions that can be scheduled. Input: - An integer `n` (1 ≤ n ≤ 10^5), representing the number of sessions. - A list of `n` tuples, where each tuple contains two integers `start` and `end` (1 ≤ start < end ≤ 10^9), representing the start and end time of a session. Output: - An integer representing the maximum number of non-overlapping sessions. Constraints: - All session times are positive integers. - Sessions are considered overlapping if they have any common time. SAMPLE INPUT 5 (1, 2) (2, 3) (3, 4) (1, 3) (2, 5) SAMPLE OUTPUT 3 Explanation: The optimal schedule includes the sessions (1, 2), (2, 3), and (3, 4). These sessions do not overlap, and no additional sessions can be added without overlapping them.","solution":"def max_non_overlapping_sessions(n, sessions): Returns the maximum number of non-overlapping sessions that can be scheduled. :param n: Integer, number of sessions :param sessions: List of tuples, each representing the start and end time of a session :return: Integer, maximum number of non-overlapping sessions # Sort sessions based on end time sessions.sort(key=lambda x: x[1]) count = 0 end_time = 0 for start, end in sessions: if start >= end_time: count += 1 end_time = end return count"},{"question":"In a galaxy far away, there is a planet called Zortan. Zortan\'s inhabitants have a unique way of celebrating festivals. They decorate their homes with special lights that are represented in a binary string of length N. Each position in the string can either be a \'1\' (light on) or \'0\' (light off). On a particularly special festival, they want to switch the lights on in such a way that no two adjacent lights are on (no two \'1\'s are next to each other). Your task is to determine the number of valid binary strings of length N that meet this criterion. Input Format: The first line contains an integer T, denoting the number of test cases. Each of the following T lines contains a single integer N. Output Format: Output the answer to each test case on a new line. Constraints: 1 ≤ T ≤ 100000 1 ≤ N ≤ 50 SAMPLE INPUT 3 2 3 4 SAMPLE OUTPUT 3 5 8 Explanation For N = 2, the valid strings are \\"00\\", \\"01\\", and \\"10\\". For N = 3, the valid strings are \\"000\\", \\"001\\", \\"010\\", \\"100\\", and \\"101\\". For N = 4, the valid strings are \\"0000\\", \\"0001\\", \\"0010\\", \\"0100\\", \\"0101\\", \\"1000\\", \\"1001\\", and \\"1010\\".","solution":"def count_valid_strings(N): Returns the number of valid binary strings of length N where no two \'1\'s are adjacent. if N == 0: return 0 if N == 1: return 2 # \'0\', \'1\' dp = [0] * (N + 1) dp[1] = 2 # \'0\', \'1\' dp[2] = 3 # \'00\', \'01\', \'10\' for i in range(3, N + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[N] def valid_binary_strings(T, cases): For each test case, returns the number of valid binary strings of the given length. results = [] for N in cases: results.append(count_valid_strings(N)) return results"},{"question":"Xenia loves arrays. She has an array a of length n (1 ≤ n ≤ 100). The array is sorted in non-decreasing order, but it may contain duplicate elements. Xenia wants to know the length of the longest subsequence of elements that are strictly increasing. Write a function `longest_increasing_subsequence(a: List[int]) -> int` that takes an array `a` and returns the length of the longest strictly increasing subsequence. Input: - The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the array. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the array. Output: - Print a single integer — the length of the longest strictly increasing subsequence. Example: Input: 5 2 2 2 3 3 Output: 2 Explanation: The longest strictly increasing subsequence is [2, 3] which has length 2. Note: The array is already sorted in non-decreasing order. You should find the longest subsequence where each subsequent element is greater than the previous one, ensuring no two consecutive elements are equal.","solution":"from typing import List def longest_increasing_subsequence(a: List[int]) -> int: if not a: return 0 n = len(a) # Initialize lengths of longest subsequence ending at each position lis_lengths = [1] * n for i in range(1, n): for j in range(i): if a[i] > a[j]: # We can include a[i] in the subsequence ending at a[j] lis_lengths[i] = max(lis_lengths[i], lis_lengths[j] + 1) # The length of the longest increasing subsequence is the maximum value in lis_lengths return max(lis_lengths)"},{"question":"In a forest, there are N foxes. Each fox has a strength value represented as an integer. Foxes are organized in such a way that each fox i (1 ≤ i ≤ N-1) is the immediate subordinate of fox i+1. Every day, the foxes must decide how to distribute the strength they accumulate while catching prey. A fox can give some or all of its strength to its immediate subordinate, but it cannot distribute to non-adjacent foxes or obtain strength from its subordinates. The foxes have a tradition where they must ensure that after distribution, no fox has a strength greater than a given threshold value X. Your task is to determine the minimum amount of total strength the foxes must accumulate to make sure that the strength of every fox is less than or equal to X after possible redistributions. To clarify, each fox starts with the initial strength already provided as input. ------ Input Format ------ - The first line contains two space-separated integers T and X – the number of test cases and the threshold value. - Each of the following T test cases begins with a line containing a single integer N – the number of foxes. - The next line contains N space-separated integers that represent the initial strengths of the N foxes. ------ Output Format ------ For each test case, output in a single line the minimum total strength that the foxes must accumulate on that day. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ s_i ≤ 10^9 1 ≤ X ≤ 10^9 - The sum of N across all test cases does not exceed 10^6. ------ Sample Input 1 ------ 2 10 3 4 7 5 4 1 3 2 6 ------ Sample Output 1 ------ 0 4 ------ Explanation 1 ------ Test case 1: The strengths already satisfy the threshold rules, no additional strength is needed. Test case 2: Three possible redistributions can occur: - Fox 2 distributes 1 strength to fox 3, and fox 3 distributes 1 strength to fox 4. - Fox 2 distributes 2 strength to fox 4 directly. - Fox 2 distributes 1 strength to fox 3, and fox 3 distributes 1 to fox 4. Then, they all accumulate 1 more strength each to meet the threshold. Thus, the minimum additional strength needed is 4.","solution":"def minimum_total_strength(test_cases, X): results = [] for case in test_cases: N, strengths = case total_strength_needed = 0 for s in strengths: if s > X: total_strength_needed += s - X results.append(total_strength_needed) return results"},{"question":"Given a list of integers and a target sum, return all unique combinations in the list where the numbers sum to the target. Each number in the list may be used an unlimited number of times in the combination. The combinations themselves should be sorted in ascending order without duplicate combinations. Example 1: Input: candidates = [2, 3, 6, 7], target = 7 Output: [[2, 2, 3], [7]] Explanation: 2 and 3 can be used multiple times to achieve the target sum, and 7 itself is a combination. Example 2: Input: candidates = [2, 3, 5], target = 8 Output: [[2, 2, 2, 2], [2, 3, 3], [3, 5]] Explanation: Multiple combinations such as 2, 2, 2, 2 or 2, 3, 3 can be used to achieve the target sum. Your Task: You don\'t need to read or print anything. Your task is to complete the function combination_sum() which takes a list of integers and an integer target as input parameters and returns a list of all unique combinations that sum to target. Expected Time Complexity: O(2^N) Expected Space Complexity: O(target) Constraints: 1 <= candidates[i] <= 50 1 <= target <= 500 1 <= len(candidates) <= 30","solution":"def combination_sum(candidates, target): def backtrack(remain, comb, start): if remain == 0: # Make a deep copy of the current combination result.append(list(comb)) return for i in range(start, len(candidates)): if candidates[i] > remain: break # As the candidates are sorted, no need to continue if the candidate is greater than the remainder comb.append(candidates[i]) backtrack(remain - candidates[i], comb, i) comb.pop() candidates.sort() result = [] backtrack(target, [], 0) return result"},{"question":"Polycarp has been given a collection of n books, each having a certain number of pages. Polycarp loves reading but is also very busy, so he wants to read exactly one book per day. However, he wants to maximize the number of days he reads an even number of pages. Determine the maximum number of days Polycarp can spend reading books with an even number of pages. -----Input----- The first line contains a single integer n (1 le n le 100,000) — the number of books in the collection. The second line contains a sequence b_1, b_2, dots, b_n (1 le b_i le 1,000,000,000), where b_i equals the number of pages in the i-th book. -----Output----- Print the maximum number of days Polycarp can spend reading books with an even number of pages. -----Examples----- Input 5 2 4 7 9 12 Output 3 Input 3 1 3 5 Output 0 -----Note----- In the first example, the books with 2, 4, and 12 pages allow Polycarp to read for 3 days with an even number of pages. In the second example, there are no books with an even number of pages, so Polycarp cannot spend any days reading even-numbered pages.","solution":"def max_even_page_days(n, books): Returns the maximum number of days Polycarp can spend reading books with an even number of pages. :param n: int - the number of books :param books: List[int] - the number of pages in each book :return: int - the number of days Polycarp can spend reading books with an even number of pages even_books = [book for book in books if book % 2 == 0] return len(even_books)"},{"question":"Given an integer `n`, determine if it is possible to make all the digits of the number equal by performing the following operation no more than `k` times: Operation: Select one digit of the number and increment it by 1. If the digit is 9, it wraps around to 0. You need to write a function that takes in `n` and `k` and outputs `YES` if it is possible to make all digits of `n` equal using the operation at most `k` times, and `NO` otherwise. ------ Input ------ The input consists of two space-separated values: - An integer `n` (1 ≤ n ≤ 10^9) - An integer `k` (1 ≤ k ≤ 100) ------ Output ------ Print a single line containing \\"YES\\" or \\"NO\\". ------ Constraints ------ 1. The number of digits in `n` won\'t exceed 10. 2. If a digit becomes 10 after incrementing, it should wrap back to 0. ------ Example Input ------ 999 1 ------ Example Output ------ YES ------ Example Input ------ 123 2 ------ Example Output ------ NO ------ Explanation ------ In the first example, we can increment any of the digits \'9\' by 1, and it will wrap around to 0, making all digits the same (\'000\'). Hence, the output is \\"YES\\". In the second example, it is not possible to make all digits the same in just 2 operations, so the answer is \\"NO\\".","solution":"def can_make_all_digits_equal(n, k): digits = list(map(int, str(n))) unique_digits = set(digits) if len(unique_digits) == 1: return \\"YES\\" digits_counts = {digit: digits.count(digit) for digit in unique_digits} most_frequent_digit = max(digits_counts, key=digits_counts.get) total_changes_needed = sum( min((most_frequent_digit - digit) % 10, (digit - most_frequent_digit) % 10) for digit in unique_digits) return \\"YES\\" if total_changes_needed <= k else \\"NO\\""},{"question":"A company uses an internal system to manage employee records. The employee data is stored as nested JSON objects, and specific data needs to be retrieved from this information based on given queries. You will be given an employee database represented as a JSON object, and a query that specifies the property path. Your task is to provide the value of the specified property. Employee JSON object format: The JSON object can contain nested objects and arrays. The syntax follows general JSON rules: - An object is represented as a collection of key-value pairs enclosed in curly braces `{ }`. - A key is a string enclosed in double quotes `\\"\\"`. - A value can be a string, number, boolean, object, or array. - An array is a list of values enclosed in square brackets `[ ]`. - Objects and arrays can be nested. Query format: The query string specifies the path to the desired property in dot notation. For example: `.employee.details.name` This query indicates that you want to access the `name` property within the `details` object of the `employee` object. If any part of the specified path does not exist or is not an object when another key is expected, return \\"no such property\\". If the final value is an object or an array, return \\"object\\" or \\"array\\" accordingly. Otherwise, return the string representation of the final value. Input: - A JSON object representing the employee database. - A query string specifying the path to the desired property. Output: - Print the property value on one line. - Output `no such property` if the specified property does not exist, `object` if the property value is an object, and `array` if the property value is an array. Examples: Input: ```json { \\"employee\\": { \\"details\\": { \\"name\\": \\"John Doe\\", \\"age\\": 30, \\"address\\": { \\"street\\": \\"123 Maple Street\\", \\"city\\": \\"Springfield\\" }, \\"roles\\": [\\"engineer\\", \\"manager\\"] }, \\"id\\": \\"E12345\\" } } ``` Query: `.employee.details.name` Output: `\\"John Doe\\"` Input: ```json { \\"employee\\": { \\"details\\": { \\"name\\": \\"Jane Smith\\", \\"age\\": 25, \\"roles\\": [\\"designer\\"] }, \\"id\\": \\"E67890\\" } } ``` Query: `.employee.details.address.city` Output: `no such property` Input: ```json { \\"employee\\": { \\"details\\": { \\"name\\": \\"John Doe\\", \\"age\\": 30, \\"roles\\": [\\"engineer\\", \\"manager\\"] } } } ``` Query: `.employee.details.address` Output: `no such property` Input: ```json { \\"employee\\": { \\"details\\": { \\"name\\": \\"John Doe\\", \\"age\\": 30, \\"roles\\": [\\"engineer\\", \\"manager\\"] } } } ``` Query: `.employee.details.roles` Output: `array` Input: ```json { \\"employee\\": { \\"details\\": { \\"name\\": \\"John Doe\\" }, \\"id\\": \\"E12345\\" } } ``` Query: `.employee.details` Output: `object`","solution":"def retrieve_value(data, query): Retrieve the value from the nested JSON object based on the query. Args: data: dict : The JSON object. query: str : The query string specifying the path. Returns: str : The string representation of the value or \\"no such property\\" if it doesn\'t exist. Returns \\"object\\" if value is a nested object. Returns \\"array\\" if value is an array. # Removing the leading dot and splitting the query into keys keys = query.strip(\'.\').split(\'.\') value = data for key in keys: if isinstance(value, dict): value = value.get(key, \\"no such property\\") else: return \\"no such property\\" if value == \\"no such property\\": return value if isinstance(value, dict): return \\"object\\" if isinstance(value, list): return \\"array\\" return str(value)"},{"question":"You are given a string S containing only \'(\' and \')\' characters. We define a balanced string as a string that can be partitioned into one or more balanced substrings. A balanced substring is defined as: - It contains an equal number of \'(\' and \')\'. - Considering any prefix of the substring, the number of \'(\' is at least as large as the number of \')\'. Your task is to find the length of the longest balanced substring of the given string. Input The first line contains a single integer N, the length of the string. The second line contains the string S of length N. Output Output a single integer, the length of the longest balanced substring. Constraints 1 ≤ N ≤ 10^5 SAMPLE INPUT 12 (()())(())() SAMPLE OUTPUT 12 Explanation The entire string \\"(()())(())()\\" is already balanced with an equal number of \'(\' and \')\', so the length of the longest balanced substring is 12.","solution":"def longest_balanced_substring(N, S): This function returns the length of the longest balanced substring in S. Args: N : int : Length of the string S S : str : String containing only \'(\' and \')\' Returns: int : Length of the longest balanced substring max_length = 0 stack = [-1] for i in range(N): if S[i] == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_length = max(max_length, i - stack[-1]) return max_length"},{"question":"Given a string s, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can obtain by performing this transformation. Example 1: Input: s = \\"aacecaaa\\" Output: \\"aaacecaaa\\" Explanation: By adding \\"aa\\" in front of \\"aacecaaa\\", we get the palindrome \\"aaacecaaa\\". Example 2: Input: s = \\"abcd\\" Output: \\"dcbabcd\\" Explanation: By adding \\"dcb\\" in front of \\"abcd\\", we get the palindrome \\"dcbabcd\\". Example 3: Input: s = \\"a\\" Output: \\"a\\" Explanation: The string itself is already a palindrome, so no addition is required. Example 4: Input: s = \\"abb\\" Output: \\"bbabb\\" Explanation: By adding \\"bb\\" in front of \\"abb\\", we get the palindrome \\"bbabb\\". Constraints: - 1 <= s.length <= 50000 - s consists of only lowercase English letters.","solution":"def shortest_palindrome(s): Returns the shortest palindrome that can be obtained by adding characters in front of the input string s. if not s: return \\"\\" rev_s = s[::-1] combined_str = s + \\"#\\" + rev_s lps = [0] * len(combined_str) for i in range(1, len(combined_str)): j = lps[i-1] while j > 0 and combined_str[i] != combined_str[j]: j = lps[j-1] if combined_str[i] == combined_str[j]: j += 1 lps[i] = j to_add = rev_s[:len(s) - lps[-1]] return to_add + s"},{"question":"Given a list of integers representing the heights of students in a line, your task is to reorder the students in such a way that no two adjacent students have the same height while maintaining the relative ordering of students with the same height. Write a function `reorder_students(heights)` that takes a list of integers `heights` (1 ≤ len(heights) ≤ 1000, 1 ≤ heights[i] ≤ 1000), and returns the reordered list of heights. If it\'s not possible to arrange the students in such a way, return an empty list. Input A list of integers where each integer represents the height of a student in the line. Output A list of integers reordered such that no two adjacent integers are the same height. If no such arrangement is possible, return an empty list. Examples Input [1, 1, 2, 2, 3, 3] Output [1, 2, 1, 3, 2, 3] Input [4, 4, 4, 4] Output [] Note In the first example, the students can be rearranged to avoid any two adjacent students having the same height. In the second example, it is impossible to rearrange the students to meet the criteria, so an empty list is returned.","solution":"from collections import Counter import heapq def reorder_students(heights): Reorder heights such that no two adjacent students have the same height. :param heights: List of integers representing heights of students :return: List of integers reordered or empty list if not possible if not heights: return [] # Count frequency of each height height_counter = Counter(heights) # Max heap based on the count of the heights max_heap = [(-count, height) for height, count in height_counter.items()] heapq.heapify(max_heap) prev_count, prev_height = 0, 0 result = [] while max_heap: count, height = heapq.heappop(max_heap) result.append(height) # Push the previous height back into the heap if there\'s any remaining count if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_height)) # Update the previous height and remaining count prev_count = count + 1 # decrease the count prev_height = height if len(result) != len(heights): return [] return result"},{"question":"You are given a string consisting of lowercase letters. You need to determine the minimum number of characters you need to change in this string to make it a valid palindrome. A palindrome is a string that reads the same backward as forward. Input The first line contains an integer q (1 ≤ q ≤ 100) — the number of queries. Each of the next q lines contains a single string s (1 ≤ |s| ≤ 1000) consisting of only lowercase English letters. Output For each query, print a single integer — the minimum number of character changes needed to make the string a palindrome. Examples Input 3 aabb racecar abcd Output 2 0 2 Note In the first query, \\"aabb\\" can be transformed into \\"abba\\" by changing two characters. In the second query, \\"racecar\\" is already a palindrome, so no changes are needed. In the third query, \\"abcd\\" can be transformed into \\"abba\\" or \\"cbbc\\" with two changes.","solution":"def min_changes_to_palindrome(s): Returns the minimum number of character changes needed to make the string s a palindrome. n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes def process_queries(queries): Processes a list of queries to find the minimum changes to make each string a palindrome. return [min_changes_to_palindrome(s) for s in queries]"},{"question":"You are given a string s of length n consisting of characters \'a\' and \'b\' and an integer k. You want to make exactly k swaps to the characters in the string such that the number of non-overlapping subsequences \\"abab\\" in the resulting string is maximized. In a single swap, you can swap two characters that are at different positions. Find the maximum number of non-overlapping subsequences \\"abab\\" that can be obtained after exactly k swaps. Input The first line contains an integer n (1 ≤ n ≤ 1000) denoting the length of the string. The second line contains a string s of length n consisting of characters \'a\' and \'b\'. The third line contains an integer k (0 ≤ k ≤ n). Output In the first line, print the maximum number of non-overlapping subsequences \\"abab\\" that can be obtained after exactly k swaps. Examples Input 8 abbaabab 2 Output 2 Input 5 ababb 1 Output 1 Note In the first example, one of the optimal ways is to swap characters at positions 3 and 8. The resulting string is \\"abbabab\\" which has 2 non-overlapping \\"abab\\" subsequences. In the second example, the string already has one \\"abab\\" subsequence and one swap does not change the count of subsequences.","solution":"def max_abab_after_k_swaps(n, s, k): Returns the maximum number of non-overlapping subsequences \\"abab\\" that can be obtained after exactly k swaps. n: int - the length of the string s: str - the input string consisting of characters \'a\' and \'b\' k: int - the number of allowed swaps # Helper function to count non-overlapping \\"abab\\" subsequences def count_abab_subsequences(string): count = 0 i = 0 while i <= len(string) - 4: if string[i:i+4] == \\"abab\\": count += 1 i += 4 else: i += 1 return count # Start with the initial count of \\"abab\\" subsequences initial_count = count_abab_subsequences(s) # If k = 0, return the current count if k == 0: return initial_count # Since we can only swap characters at different positions, we need to maximize the pairs max_count = initial_count s_list = list(s) for i in range(n-1): for j in range(i+1, n): # Swap characters at positions i and j s_list[i], s_list[j] = s_list[j], s_list[i] # Count \\"abab\\" subsequences after the swap new_count = count_abab_subsequences(\\"\\".join(s_list)) # Update the maximum count found max_count = max(max_count, new_count) # Swap back to original positions s_list[i], s_list[j] = s_list[j], s_list[i] return max_count"},{"question":"A common problem in software engineering is managing file paths. Operating systems provide various APIs to handle file operations such as reading and writing data to files, navigating directories, and managing paths. # Path Manager Contract normalize(path) `normalize` accepts a string `path` representing a file path and returns a canonical version of that path with redundant cwd (`.`) and parent dir (`..`) references removed. Additionally, any unnecessary slashes should be collapsed into a single slash, and the path should not end with a slash unless it is the root `\\"/\\"`. An exception should be thrown for invalid paths. is_absolute(path) `is_absolute` accepts a string `path` and returns a boolean indicating whether the path is absolute. An absolute path starts with a root `\\"/\\"` and is from the base of the file system. join(path1, path2) `join` accepts two file paths `path1` and `path2` and returns a new path that is the result of concatenating `path2` onto `path1`. It should also handle edge cases such as when `path2` is an absolute path, in which case it should return `path2` as the result. Redundant slashes in the concatenated result should be removed. basename(path) `basename` accepts a string `path` representing a file path and returns the last portion of the path, which is typically the filename. If the `path` ends with a trailing slash, it should return an empty string. The result should exclude directory components and leading slashes.","solution":"import os def normalize(path): Normalize the given file path by removing redundant cwd (.) and parent (..) references and unnecessary slashes. if not isinstance(path, str) or not path: raise ValueError(\\"Invalid path\\") normalized_path = os.path.normpath(path) if normalized_path == \'.\': return \'.\' return \'/\' if normalized_path == \'/\' else normalized_path.rstrip(\'/\') def is_absolute(path): Check if the given path is an absolute path. if not isinstance(path, str): raise ValueError(\\"Invalid path\\") return os.path.isabs(path) def join(path1, path2): Join two file paths and return a single concatenated path. if not isinstance(path1, str) or not isinstance(path2, str): raise ValueError(\\"Invalid paths\\") joined_path = os.path.join(path1, path2) return normalize(joined_path) def basename(path): Return the last portion of the specified path. if not isinstance(path, str): raise ValueError(\\"Invalid path\\") if path.endswith(\'/\'): return \'\' return os.path.basename(path)"},{"question":"Arunpi enjoys working with strings and numbers. He is given an initially empty string S and needs to conduct several operations on it. The operations fall into two categories: INSERT P X: Insert string P at position X. QUERY L R: Calculate the sum of digits in the substring S[L:R] (both inclusive). Arunpi finds it challenging to handle these operations efficiently, especially as the string grows larger. Can you help him manage these tasks with optimal performance? INPUT The first line of input contains an integer M, which denotes the number of operations to be performed on the string. The following M lines each contain one operation in the format described above. OUTPUT For each operation of type QUERY, you need to output a single integer which is the sum of digits in the specified substring. If the specified substring does not contain any digits, output 0. CONSTRAINTS 1 ≤ M ≤ 10^5 1 ≤ length of P ≤ 10^3 0 ≤ X ≤ current length of the string S 1 ≤ L ≤ R ≤ current length of string S SAMPLE INPUT 6 INSERT abc123 0 INSERT 456def 6 QUERY 4 9 INSERT xyz 3 QUERY 1 5 QUERY 10 12 SAMPLE OUTPUT 21 0 0","solution":"class StringOperations: def __init__(self): self.S = \\"\\" def insert(self, P, X): Insert string P at position X in the string S. self.S = self.S[:X] + P + self.S[X:] def query(self, L, R): Calculate the sum of digits in the substring S[L:R] (both inclusive). if L < 0 or R >= len(self.S): return 0 return sum(int(ch) for ch in self.S[L:R+1] if ch.isdigit()) def process_operations(operations): s_ops = StringOperations() result = [] for op in operations: parts = op.split() command = parts[0] if command == \\"INSERT\\": P = parts[1] X = int(parts[2]) s_ops.insert(P, X) elif command == \\"QUERY\\": L = int(parts[1]) - 1 R = int(parts[2]) - 1 result.append(s_ops.query(L, R)) return result"},{"question":"Given a string `s` consisting of lowercase English letters, your task is to reorder it such that no two adjacent characters are the same. If such a reordering is possible, return any valid reordering of the string. If it is not possible, return an empty string. Example 1: Input: s = \\"aab\\" Output: \\"aba\\" Explanation: One possible reordering of the string is \\"aba\\". Example 2: Input: s = \\"aaab\\" Output: \\"\\" Explanation: There is no possible way to avoid adjacent repeating characters. Your Task: You don\'t need to read or print anything. Your task is to complete the function `reorderString()`, which takes string `s` as input and returns the reordered string or an empty string if it is not possible. Expected Time Complexity: O(n log n) Expected Space Complexity: O(n) Constraints: - 1 <= s.length <= 10^4 - s consists of lowercase English letters.","solution":"from collections import Counter import heapq def reorderString(s): Reorder the string such that no two adjacent characters are the same. If not possible, return an empty string. # Count the frequency of each character count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) # Add the previous character back if it\'s non-zero if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Add the current character to the result result.append(char) # Update the previous character and its frequency prev_freq, prev_char = freq + 1, char result_str = \'\'.join(result) if len(result_str) != len(s): return \\"\\" else: return result_str"},{"question":"Marta loves playing with strings and solving puzzles involving string manipulations. Recently, she came across an interesting problem: given a string, she wants to generate the lexicographically smallest string possible by removing exactly one character from it. Since Marta often gets distracted, she wants to write a program that will help her find this smallest string quickly. -----Input----- The input consists of one line with a string s (2 le |s| le 100000), consisting of lowercase English letters. -----Output----- Output one line with the lexicographically smallest string that can be obtained by removing exactly one character from the input string. -----Examples----- Sample Input 1: abcda Sample Output 1: abca Sample Input 2: acba Sample Output 2: aba","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string possible by removing exactly one character from the input string. # Iterate over the string and try to remove each character one by one smallest_string = s[1:] # initial result by removing the first character for i in range(len(s)): # Form the string by skipping the current character s[i] candidate = s[:i] + s[i+1:] if candidate < smallest_string: smallest_string = candidate return smallest_string"},{"question":"Write a function that, given a list of integers, determines if there exists at least one pair of elements in the list such that their sum is zero. Inputs: - The input to the function will be a list of integers. Outputs: - The output should be a boolean value: - ‘True’ if there is at least one pair of numbers that sum to zero. - ‘False’ if no such pair exists. Constraints: - The list can have both positive and negative integers. - The length of the list (n) will be between 2 and 10^5. - Each integer in the list lies between -10^9 and 10^9. Example: Input: [1, 2, -3, 4, 6] Output: False Input: [4, -4, 6, 7] Output: True","solution":"def has_zero_sum_pair(lst): Determines if there exists at least one pair of elements in the list such that their sum is zero. Parameters: lst (List[int]): A list of integers. Returns: bool: True if there is at least one pair of numbers that sum to zero, else False. seen = set() for num in lst: if -num in seen: return True seen.add(num) return False"},{"question":"Geek and Nerd are scientists working on a new chemical experiment. They have two chemicals A and B with initial quantities X and Y milliliters respectively. The goal is to determine how many doses of a special neutralizer can be made using A and B. The total volume of one dose of the neutralizer requires both chemicals in specific proportions: - Chemical A must be utilized in the ratio 2 parts for every 3 parts of Chemical B. Geek and Nerd can produce as many doses as possible until they run out of either chemical. The goal is to find the maximum number of complete doses that can be produced from the given quantities of A and B. Example 1: Input: X = 10, Y = 15 Output: 3 Explaination: To make one complete dose requires 2 milliliters of A and 3 milliliters of B. From 10 milliliters of A, we can make 10 // 2 = 5 doses. From 15 milliliters of B, we can make 15 // 3 = 5 doses. The limiting factor here is the volume of B, so the maximum number of doses is 5. Example 2: Input: X = 12, Y = 8 Output: 2 Explanantion: We can make at maximum 2 doses since each dose requires twice chemical A as compared to chemical B. Your Task: You do not need to read input or print anything. Your task is to complete the function doses() which takes X and Y as input parameters and returns an integer denoting the maximum number of complete doses that can be produced. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ X, Y ≤ 10^{6}","solution":"def doses(X, Y): Determines the maximum number of complete doses. Args: - X (int): amount of chemical A in milliliters. - Y (int): amount of chemical B in milliliters. Returns: - (int): maximum number of complete doses. doses_from_a = X // 2 # Each dose requires 2 milliliters of A doses_from_b = Y // 3 # Each dose requires 3 milliliters of B return min(doses_from_a, doses_from_b)"},{"question":"A group of friends have come up with a new variant of the classic game Tic-Tac-Toe, played on a board of given size `n x n`. Instead of alternating turns, each player can place as many markers of their own on the board as they want in one turn. A player wins if they manage to place exactly three of their markers in a line (horizontal, vertical, or diagonal). Your task is to determine if there\'s any move that will allow one of the players to win with exactly three of their markers in a line. Function Signature: ```python def tic_tac_toe_can_win(board: List[List[str]]) -> bool: # Your code here ``` Input: - `board` - A 2D list of size `n x n`, where each element is `\'A\'`, `\'B\'`, or `\'.\'`, representing Player A\'s marker, Player B\'s marker, and an empty space, respectively. Output: - Return `True` if there\'s a move that will allow one of the players to win with exactly three of their markers in a line. Otherwise, return `False`. Example 1: ``` board = [ [\'A\', \'B\', \'.\'], [\'A\', \'B\', \'.\'], [\'.\', \'.\', \'B\'] ] ``` Output: `True` Explanation: Player B can place a marker in the empty space on the third row, third column to form a vertical line of three Bs. Example 2: ``` board = [ [\'A\', \'.\', \'.\'], [\'.\', \'A\', \'.\'], [\'.\', \'.\', \'B\'] ] ``` Output: `False` Explanation: No player can place a marker in any empty space to form a line of exactly three markers.","solution":"from typing import List def tic_tac_toe_can_win(board: List[List[str]]) -> bool: n = len(board) def check_line(line): count_A = line.count(\'A\') count_B = line.count(\'B\') if count_A == 2 and line.count(\'.\') == 1: return True if count_B == 2 and line.count(\'.\') == 1: return True return False # Check all rows for row in board: if check_line(row): return True # Check all columns for col in range(n): column = [board[row][col] for row in range(n)] if check_line(column): return True # Check both diagonals main_diagonal = [board[i][i] for i in range(n)] if check_line(main_diagonal): return True anti_diagonal = [board[i][n - 1 - i] for i in range(n)] if check_line(anti_diagonal): return True return False"},{"question":"Given two arrays A and B of size N containing positive integers. Your task is to merge these two arrays alternately and return the merged array. If one array is exhausted before the other, append the remaining elements of the other array. Example 1: Input: N = 3 A[] = {1, 3, 5} B[] = {2, 4, 6} Output: {1, 2, 3, 4, 5, 6} Explanation: Merging A and B alternately gives the array {1, 2, 3, 4, 5, 6}. Example 2: Input: N = 3 A[] = {7, 8, 9} B[] = {1, 2, 3, 4, 5} Output: {7, 1, 8, 2, 9, 3, 4, 5} Explanation: Once the array A is exhausted, we append the remaining elements of B, resulting in {7, 1, 8, 2, 9, 3, 4, 5}. Your Task: You don\'t need to read input or print anything. Your task is to complete the function mergeAlternateArrays() which takes the arrays A, B, and an integer N as input parameters and returns the merged array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ A_i, B_i ≤ 10^{3}","solution":"def merge_alternate_arrays(A, B): Merges two arrays A and B alternately and returns the merged array. If one array is exhausted before the other, appends the remaining elements of the other array. merged = [] len_A = len(A) len_B = len(B) min_len = min(len_A, len_B) # Append elements from both arrays alternatively for i in range(min_len): merged.append(A[i]) merged.append(B[i]) # Append remaining elements from the longer array if len_A > min_len: merged.extend(A[min_len:]) elif len_B > min_len: merged.extend(B[min_len:]) return merged"},{"question":"A kingdom is divided into N cities connected by M bidirectional roads. Each road has a certain travel time associated with it. The ruler of the kingdom wants to ensure that it takes as little time as possible for a messenger to travel from the capital city to any other city. You are given the number of cities N and the number of roads M. You are also given the list of roads, where each road is described by three integers u, v, and t — the cities it connects and the travel time between them. The cities are numbered from 1 to N. The capital city is city 1. Your task is to determine the maximum time it takes for a messenger to travel from the capital city to any other city using the optimal routes. Input The first line of the input contains two integers, N and M (1 ≤ N ≤ 10,000; 0 ≤ M ≤ 50,000), denoting the number of cities and the number of roads, respectively. The next M lines each contain three integers u, v, and t (1 ≤ u, v ≤ N; 1 ≤ t ≤ 10,000), representing a road between city u and city v with a travel time of t minutes. Output Print a single integer, the maximum time it takes for the messenger to travel from the capital city to any other city using the optimal routes. If the capital city is the only city, print 0. If there are cities that are not reachable from the capital city, print -1. Examples Input 6 7 1 2 4 1 3 2 2 3 1 2 4 7 3 5 3 5 4 2 4 6 1 Output 8 Input 5 4 1 2 2 2 3 4 3 4 1 4 5 3 Output 10 Input 2 1 1 2 5 Output 5 Input 2 0 Output -1","solution":"import heapq def dijkstra(graph, N, src): Performs Dijkstra\'s algorithm to find the shortest path from the source node to all other nodes. :param graph: The adjacency list of the graph. :param N: The total number of nodes. :param src: The source node. :return: The shortest path distances from the source node to all other nodes. dist = [float(\'inf\')] * (N + 1) dist[src] = 0 pq = [(0, src)] # (distance, node) pairs heapq.heapify(pq) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist def messenger_travel_time(N, M, roads): Determines the maximum time it takes for a messenger to travel from the capital city (city 1) to any other city using optimal routes. :param N: Number of cities. :param M: Number of roads. :param roads: List of roads represented as tuples (u, v, t). :return: Maximum travel time from the capital city to any reachable city or -1 if some cities are unreachable. if N == 1: return 0 # Create adjacency list for the graph graph = [[] for _ in range(N + 1)] for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) # Perform Dijkstra\'s algorithm from the capital city (city 1) dist = dijkstra(graph, N, 1) # Find the maximum distance to any reachable city max_time = -1 for d in dist[1:]: if d == float(\'inf\'): return -1 max_time = max(max_time, d) return max_time"},{"question":"In a parallel world, there exists a unique numbering system for houses in a neighborhood. Each house number is a combination of a 3-letter string followed by a 4-digit number (e.g., ABC1234). The mayor of the neighborhood decided to introduce a new house numbering rule and wants to number only those houses where: 1. The sum of the ASCII values of the three letters is even. 2. The 4-digit part is a prime number. The mayor has asked you to write a program that will help in generating new house numbers according to the rule given above. Input: The first line of the input contains an integer t, the number of test cases. Each test case consists of a single line containing a string of length 3 (3 uppercase letters) followed by a 4-digit integer. Output: For each test case, print \\"YES\\" if the house number follows the new rule, and \\"NO\\" otherwise. Constraints: 1 ≤ t ≤ 1000 The 3-letter string consists of uppercase English letters only. The 4-digit number is between 1000 and 9999 (inclusive). SAMPLE INPUT 3 ABC1237 DEF4567 XYZ9992 SAMPLE OUTPUT YES NO NO","solution":"def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def is_valid_house_number(house_number): letters = house_number[:3] number = int(house_number[3:]) ascii_sum = sum(ord(char) for char in letters) if ascii_sum % 2 == 0 and is_prime(number): return True return False def check_house_numbers(test_cases): results = [] for house_number in test_cases: if is_valid_house_number(house_number): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a string s consisting of lowercase English letters and \'(\' or \')\', you need to determine if the string s is valid. A string s is considered valid if: 1. Every opening bracket \'(\' has a corresponding closing bracket \')\'. 2. The brackets are correctly nested. Write a function that returns `true` if the string is valid, and `false` otherwise. Example 1: Input: s = \\"a(b)c(d)e\\" Output: true Explanation: The string is valid as every opening bracket has a corresponding closing bracket. Example 2: Input: s = \\"a(b(c)d\\" Output: false Explanation: The string is not valid as there is an unmatched opening bracket. Example 3: Input: s = \\"(a(b)c)d)\\" Output: false Explanation: The string is not valid as there is an unmatched closing bracket. Example 4: Input: s = \\"\\" Output: true Explanation: An empty string is valid. Example 5: Input: s = \\"hello\\" Output: true Explanation: The string does not contain any brackets, so it is considered valid. Constraints: - 1 <= s.length <= 1000 - s consists of lowercase English letters, \'(\' or \')\'.","solution":"def is_valid(s): Determine if the string s is valid. A string is valid if: 1. Every opening bracket \'(\' has a corresponding closing bracket \')\'. 2. The brackets are correctly nested. :param s: str, input string consisting of lowercase English letters and \'(\' or \')\' :return: bool, True if the string is valid, False otherwise stack = [] for char in s: if char == \'(\': stack.append(\'(\') elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},C={class:"card-container"},Y={key:0,class:"empty-state"},P=["disabled"],j={key:0},M={key:1};function R(s,e,u,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",Y,' No results found for "'+h(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",M,"Loading...")):(n(),i("span",j,"See more"))],8,P)):l("",!0)])}const z=d(A,[["render",R],["__scopeId","data-v-5cd86b5b"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/18.md","filePath":"quotes/18.md"}'),L={name:"quotes/18.md"},G=Object.assign(L,{setup(s){return(e,u)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,G as default};
