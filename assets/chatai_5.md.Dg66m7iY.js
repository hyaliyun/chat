import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,p,r,a){return n(),i("div",k,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(q,[["render",O],["__scopeId","data-v-05a336d4"]]),S=JSON.parse('[{"question":"You are tasked with implementing a function to calculate the average grade of a student based on grades received for five subjects. Each subject grade is stored as a floating-point number. Write a program to calculate if the student passes or fails. - A student passes if their average grade is 5.0 or higher. - A student fails if their average grade is below 5.0. If the average grade is exactly 5.0 or higher, print \\"Pass\\", otherwise print \\"Fail\\". -----Constraints----- - All input values are floating-point numbers. - Each grade is between 0.0 and 10.0 (inclusive). -----Input----- The input is given from Standard Input in the following format: grade1 grade2 grade3 grade4 grade5 -----Output----- Print \\"Pass\\" if the student\'s average grade is 5.0 or higher, otherwise print \\"Fail\\". -----Sample Input----- 4.5 6.0 5.5 7.0 8.0 -----Sample Output----- Pass The total average grade for 4.5, 6.0, 5.5, 7.0, and 8.0 is 6.2, which is above 5.0. Thus, the output should be \\"Pass\\".","solution":"def calculate_pass_fail(grades): Determines if a student passes or fails based on an average of five grades. Parameters: grades (list of float): The list containing five subject grades. Returns: str: \\"Pass\\" if the average grade is 5.0 or higher, otherwise \\"Fail\\". average_grade = sum(grades) / len(grades) if average_grade >= 5.0: return \\"Pass\\" else: return \\"Fail\\" # Read grades from input if __name__ == \\"__main__\\": grades = list(map(float, input().split())) print(calculate_pass_fail(grades))"},{"question":"Write a program that determines if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Print \\"YES\\" if the string is a palindrome, \\"NO\\" if not. Constraints * 1 ≤ length of string ≤ 1,000 * N ≤ 1,000 Input Input consists of several data sets. In the first line, the number of data sets, N, is given. Then, N lines follow, each line corresponds to a data set. A data set consists of a single string which may contain spaces, punctuation, and mixed case letters. Output For each data set, print \\"YES\\" or \\"NO\\". Example Input 3 A man a plan a canal Panama racecar Hello World Output YES YES NO","solution":"def is_palindrome(s): Determines if the given string is a palindrome ignoring spaces, punctuation, and capitalization. import re cleaned = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return cleaned == cleaned[::-1] def check_palindromes(n, strings): results = [] for s in strings: if is_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are organizing a treasure hunt in a grid of dimension N times M. You want to hide some treasures in the grid cells such that each cell can be accessed from another cell with a minimal cost. You may perform the following operation any number of times (possibly zero): - Move from a cell (i, j) to a cell (i\', j\') with a cost c(i\', j\'). You only move to adjacent cells, i.e., (i\', j\') is either (i+1, j), (i-1, j), (i, j+1), or (i, j-1). You are given a grid where each cell has a value that determines the cost to move to that cell. The task is to find the minimum cost to travel from the top-left corner of the grid (1, 1) to the bottom-right corner of the grid (N, M). -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M, the dimensions of the grid. - The next N lines contain M space-separated integers where the j-th integer in the i-th line denotes the cost c(i, j) of cell (i, j). -----Output----- For each test case, print a single line containing one integer ― the minimum cost to travel from (1, 1) to (N, M). -----Constraints----- - 1 le T le 100 - 1 le N, M leq 1,000 - 1 le c(i, j) le 100 for each valid i, j -----Example Input----- 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 -----Example Output----- 7 3 -----Explanation----- Example case 1: The path with the minimum cost from (1, 1) to (3, 3) is (1, 1) rightarrow (2, 1) rightarrow (3, 1) rightarrow (3, 2) rightarrow (3, 3), with a total cost of 1 + 1 + 4 + 2 + 1 = 7. Example case 2: The path with the minimum cost from (1, 1) to (2, 2) is (1, 1) rightarrow (1, 2) rightarrow (2, 2), with a total cost of 1 + 1 + 1 = 3.","solution":"import heapq def min_cost_to_travel(grid, N, M): # Using a priority queue to find the minimum cost path pq = [] heapq.heappush(pq, (grid[0][0], 0, 0)) # Directions arrays directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] # Costs array to store the minimum cost to reach each cell costs = [[float(\'inf\')] * M for _ in range(N)] costs[0][0] = grid[0][0] while pq: current_cost, x, y = heapq.heappop(pq) # If we have reached the bottom-right corner, return the cost if x == N-1 and y == M-1: return current_cost # Visit neighbors for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < N and 0 <= ny < M: new_cost = current_cost + grid[nx][ny] if new_cost < costs[nx][ny]: costs[nx][ny] = new_cost heapq.heappush(pq, (new_cost, nx, ny)) def solve_all_cases(T, cases): results = [] for case in cases: N, M, grid = case result = min_cost_to_travel(grid, N, M) results.append(result) return results"},{"question":"You are given an array of integers. Your task is to find out how many unordered pairs (i, j) exist such that their sum is equal to a given integer K. Note that the pair (i, j) is the same as the pair (j, i), and thus should not be counted twice. -----Input----- - The first line contains a single integer N denoting the size of the array. - The second line contains N space-separated integers representing the elements of the array. - The third line contains a single integer K denoting the target sum. -----Output----- Print a single integer, representing the number of unordered pairs (i, j) such that the sum of the pair is equal to K. -----Constraints----- - 1 le N le 10^6 - -10^6 le Array elements le 10^6 - -10^{12} le K le 10^{12} -----Example Input----- 5 1 5 7 -1 5 6 -----Example Output----- 3 -----Explanation----- The pairs are (1, 5), (7, -1), and (1, 5), so the total number of pairs is 3.","solution":"def count_pairs_with_sum(arr, N, K): Count pairs in an array with a given sum. :param arr: List[int] - input array of integers :param N: int - size of the array :param K: int - target sum :return: int - count of pairs (i, j) with i < j and arr[i] + arr[j] == K if N < 2: return 0 count_map = {} count = 0 for num in arr: if K - num in count_map: count += count_map[K - num] if num in count_map: count_map[num] += 1 else: count_map[num] = 1 return count"},{"question":"The following function should return the sum of all prime numbers less than a given integer `n`. However, it is currently not functioning properly. Locate and fix the issue. ```python def sum_of_primes(n): def is_prime(num): if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True prime_sum = 0 for i in range(2, n): if is_prime(i): prime_sum += i return prime_sum print(sum_of_primes(10)) # should return 17, since 2 + 3 + 5 + 7 = 17 ```","solution":"def sum_of_primes(n): def is_prime(num): if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True prime_sum = 0 for i in range(2, n): if is_prime(i): prime_sum += i return prime_sum"},{"question":"Given an array \\"nums\\" containing n integers where the element at index i represents the amount of money in the i-th house, you are a thief planning to rob houses along a street. However, you cannot rob two adjacent houses because the security system will alert the police. Your goal is to maximize the amount of money you can rob without alerting the police. Write a function to return the maximum amount of money you can rob tonight without alerting the police. Function Signature: ```python def rob(nums: List[int]) -> int: pass ``` # Example 1: Input: nums = [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. # Example 2: Input: nums = [2,7,9,3,1] Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9), and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12. # Constraints: - 1 <= nums.length <= 100 - 0 <= nums[i] <= 400","solution":"from typing import List def rob(nums: List[int]) -> int: if not nums: return 0 if len(nums) == 1: return nums[0] dp = [0] * len(nums) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): dp[i] = max(dp[i - 1], dp[i - 2] + nums[i]) return dp[-1]"},{"question":"A shipping company needs to optimize the loading of packages onto trucks. Each truck has a maximum weight capacity, and you are given a list of packages with their respective weights. The goal is to determine the minimum number of trucks required to carry all the packages while ensuring that no truck exceeds its weight capacity. Create a function `minimum_trucks(weights, capacity)` that takes in two arguments: - `weights`: a list of integers representing the weights of the packages. - `capacity`: an integer representing the weight capacity of each truck. The function should return an integer representing the minimum number of trucks required. -----Input:----- - A single integer n, the number of packages. - A list of integers weights of length n. - A single integer capacity, representing the maximum weight a truck can carry. -----Output:----- Return a single integer, the minimum number of trucks required. -----Constraints----- - 1 leq n leq 10^5 - 1 leq text{weights}[i] leq 10^4 - text{weights}[i] leq text{capacity} leq 10^5 -----Example Input:----- 5 [2, 3, 7, 8, 4] 10 -----Example Output:----- 3 -----Explanation:----- One possible way to load the trucks is as follows: - Truck 1: [2, 8] (total weight = 10) - Truck 2: [3, 7] (total weight = 10) - Truck 3: [4] (total weight = 4) Thus, a minimum of 3 trucks are required to carry all the packages.","solution":"def minimum_trucks(weights, capacity): Returns the minimum number of trucks required to carry all packages without exceeding the capacity of any truck. Parameters: weights (list of int): List of weights of the packages. capacity (int): The maximum capacity of each truck. Returns: int: Minimum number of trucks required. # Sort weights in descending order to place heavier items first weights.sort(reverse=True) used_trucks = 0 while weights: current_capacity = capacity i = 0 while i < len(weights): if weights[i] <= current_capacity: current_capacity -= weights.pop(i) else: i += 1 used_trucks += 1 return used_trucks"},{"question":"# Sum of Subsequence Widths Given an array of integers, your task is to find the sum of the widths of all possible subsequences of the array modulo 10^9 + 7. The width of a subsequence is defined as the difference between the maximum and minimum elements of the subsequence. A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. # Input - The first line of the input contains an integer n (1 le n le 2000), the number of elements in the array. - The second line contains n space-separated integers a_i (1 le a_i le 10^9) representing the elements of the array. # Output - Output one integer, the sum of the widths of all possible subsequences of the array modulo 10^9 + 7. # Example Input ``` 3 1 2 3 ``` Output ``` 6 ``` # Explanation All possible subsequences and their widths are: - [1, 2] → 1 - [1, 3] → 2 - [2, 3] → 1 - [1, 2, 3] → 2 Summing these widths gives 1 + 2 + 1 + 2 = 6. # Note This problem requires efficient computation of the sum of subsequence widths due to potential large input size. Consider leveraging combinatorial properties and pre-computed powers of 2 for optimization.","solution":"def sum_of_subsequence_widths(arr): MOD = 10**9 + 7 arr.sort() n = len(arr) pow2 = [1] * n for i in range(1, n): pow2[i] = pow2[i - 1] * 2 % MOD result = 0 for i in range(n): result = (result + arr[i] * (pow2[i] - pow2[n - 1 - i])) % MOD return result"},{"question":"Write a function `find_shortest_substring` that, given a string `s` and a string `t`, finds the shortest substring of `s` that contains all the characters in `t`. If there are multiple such substrings of the same length, return the first one that appears in `s`. If no such substring exists, return an empty string. **Examples:** ``` find_shortest_substring(\\"ADOBECODEBANC\\", \\"ABC\\") -> \\"BANC\\" find_shortest_substring(\\"this is a test string\\", \\"tist\\") -> \\"t stri\\" find_shortest_substring(\\"geeksforgeeks\\", \\"ork\\") -> \\"ksfor\\" find_shortest_substring(\\"a\\", \\"a\\") -> \\"a\\" find_shortest_substring(\\"a\\", \\"b\\") -> \\"\\" find_shortest_substring(\\"abcdef\\", \\"\\") -> \\"\\" ``` **Constraints:** - The characters in `t` are all lowercase. - The string `s` contains only lowercase letters. - The length of `t` will not exceed the length of `s`.","solution":"def find_shortest_substring(s, t): from collections import Counter, defaultdict if not t or not s: return \\"\\" required = Counter(t) window_counts = defaultdict(int) have, need = 0, len(required) l, r = 0, 0 min_len = float(\'inf\') res = \\"\\" while r < len(s): char = s[r] window_counts[char] += 1 if char in required and window_counts[char] == required[char]: have += 1 while have == need: window_len = r - l + 1 if window_len < min_len: min_len = window_len res = s[l:r+1] window_counts[s[l]] -= 1 if s[l] in required and window_counts[s[l]] < required[s[l]]: have -= 1 l += 1 r += 1 return res"},{"question":"In a faraway land, there is a kingdom where dragons like to fly. Each dragon can blow fire to a certain distance, either to its left or right. The king wants to know if there is any pair of dragons that can blow fire at each other simultaneously. Help him solve this problem. Given the position of each dragon and the distance it can blow fire, determine if there are any two dragons that can blow fire at each other at the same time. ---Input:--- - The first line contains an integer n (1<=n<=100) - the number of dragons in the kingdom. - Each of the following n lines contains two integers p(i) and f(i) (-10^4<=p(i)<=10^4, 1<=|f(i)|<=10^4) - records of the king’s observation. - p(i) is the position of the i-th dragon and f(i) is the distance the i-th dragon can blow fire. - Positive values of f(i) indicate blowing fire to the right, negative values indicate blowing fire to the left. No two dragons may stand in the same position. ---Output:--- If there are any two dragons that can blow fire at each other simultaneously, output \\"YES\\". Otherwise, output \\"NO\\". ---Sample Input:--- 3 2 3 5 -3 8 2 ---Sample Output:--- YES","solution":"def can_dragons_blow_fire_at_each_other(n, dragons): Determines if there are any two dragons that can blow fire at each other simultaneously. :param n: Number of dragons :param dragons: List of tuples containing position and fire distance of each dragon [(p1, f1), ..., (pn, fn)] :return: \'YES\' if there are any two dragons that can blow fire at each other, \'NO\' otherwise fire_positions = {} for i in range(n): pos, fire_dist = dragons[i] if fire_dist > 0: fire_position = pos + fire_dist else: fire_position = pos + fire_dist if fire_position in fire_positions: if fire_dist > 0 and fire_positions[fire_position][1] < 0: return \\"YES\\" if fire_dist < 0 and fire_positions[fire_position][1] > 0: return \\"YES\\" fire_positions[pos] = (pos, fire_dist) return \\"NO\\""},{"question":"Given a matrix of size NxM and Q queries, each query involves providing a pair of coordinates (x, y) that specifies the top-left corner of a submatrix with a given size (r, c). For each query, find the sum of all elements in the submatrix starting from (x, y) with size (r, c) where r is the number of rows and c is the number of columns. Note: Assume 0 based indexing. Example 1: Input: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Q = 2 queries = [[0, 0, 2, 2], [1, 1, 2, 2]] Output: 12 28 Explanation: The submatrix starting at (0, 0) with size (2, 2) is [[1, 2], [4, 5]], hence the sum is 1+2+4+5 = 12. The submatrix starting at (1, 1) with size (2, 2) is [[5, 6], [8, 9]], hence the sum is 5+6+8+9 = 28. Your Task: You don\'t need to read input or print anything. Your task is to complete the function submatrixSum() which takes the matrix, its dimensions NxM, array queries and their size Q as input parameters and returns a vector storing the required answer for every query. Expected Time Complexity: O(N*M*Q) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N, M ≤ 100 1 ≤ Q ≤ 10^3 1 ≤ matrix[i][j] ≤ 10^3 0 ≤ x[i] ≤ N-r 0 ≤ y[i] ≤ M-c","solution":"def submatrixSum(matrix, N, M, queries, Q): result = [] for query in queries: x, y, r, c = query sum_submatrix = 0 for i in range(r): for j in range(c): sum_submatrix += matrix[x + i][y + j] result.append(sum_submatrix) return result"},{"question":"Marta is a landscape designer and she has been given the task of creating a new park in the city. The city has an interesting grid-based structure for parks, and each park must be designed in a way that all trees are planted in a square formation with the sides parallel to the axes. Every park is planned within a grid of points with integer coordinates. The city council provides Marta with the locations of some points where trees can be planted. Marta\'s task is to determine the largest possible side length of a square that can be formed using the provided points as its vertices. This square must be perfectly aligned with the grid lines (i.e., its sides must be parallel to the coordinate axes). Can you help Marta find the largest possible side length of such a square? -----Input----- The first line of the input contains an integer n (4 ≤ n ≤ 3000) — the number of points provided. The next n lines each contain two integers x and y (-10^6 ≤ x, y ≤ 10^6) — the coordinates of each point. -----Output----- Print a single integer l — the largest possible side length of the square that can be formed using the given points as vertices. If no such square can be formed, print 0. -----Example----- Input 5 1 1 1 4 4 1 4 4 2 2 Output 3 Note: The first four points form a square with side length 3: (1, 1), (1, 4), (4, 1), and (4, 4). The fifth point is not needed.","solution":"def largest_square_side_length(n, points): point_set = set(points) max_side_length = 0 for i in range(n): for j in range(i + 1, n): x1, y1 = points[i] x2, y2 = points[j] if x1 != x2 and y1 != y2: if (x1, y2) in point_set and (x2, y1) in point_set: side_length = abs(x1 - x2) max_side_length = max(max_side_length, side_length) return max_side_length"},{"question":"Alice and Bob are playing an interesting game with a sequence of integers. The game involves two types of operations. The first type of operation inserts an integer into the sequence, and the second type of operation queries the sequence for a specific condition and requires an output based on that query. Your task is to help them with an automated system to manage these operations. # Input: The input begins with an integer `q` (1 ≤ q ≤ 100000) — the number of operations. The next `q` lines describe the operations: - If the line begins with `1`, it is followed by an integer `u` (1 ≤ u ≤ 100000) — this integer should be inserted into the sequence. - If the line begins with `2`, it is followed by two integers `x` and `y` (1 ≤ x, y ≤ 100000) — this represents a query requesting the minimum difference `(v - x)` of any integer `v` in the sequence such that `v` is greater than or equal to `x` and is divisible by `y`. If there are no such integers, return `-1`. # Output: For each query of type `2`, output the minimum difference `(v - x)`, or `-1` if no such integers exist. # Example: Input: ``` 6 1 3 1 10 1 15 2 5 5 2 8 2 2 16 7 ``` Output: ``` 5 2 -1 ``` # Explanation: - In the first query, `x` is `5` and `y` is `5`. The numbers in the sequence are {3, 10, 15}. The valid `v` values that are greater than or equal to `5` and divisible by `5` are {10, 15}. The differences are `(10 - 5)` and `(15 - 5)`, so the minimum difference is `5`. - In the second query, `x` is `8` and `y` is `2`. The numbers in the sequence are the same. The valid `v` values that are greater than or equal to `8` and divisible by `2` are {10}. The difference is `(10 - 8) = 2`. - In the third query, `x` is `16` and `y` is `7`. There are no numbers greater than or equal to `16` that are divisible by `7`, so the output is `-1`.","solution":"def process_queries(queries): sequence = [] result = [] for query in queries: op = query[0] if op == 1: u = query[1] sequence.append(u) elif op == 2: x, y = query[1], query[2] valid_differences = [(v - x) for v in sequence if v >= x and v % y == 0] if valid_differences: result.append(min(valid_differences)) else: result.append(-1) return result"},{"question":"You are given a rectangular grid with R rows and C columns. The task is to count the number of unique paths from the top-left corner of the grid to the bottom-right corner. You are only allowed to move either right or down at any point in time. However, some of the cells in the grid are blocked and you cannot step on them. The blocked cells are identified by an array of coordinates. Write a function to compute the number of unique paths, where the function should take as input the grid dimensions R, C, and the list of blocked cells. You need to return the number of unique paths from the top-left corner to the bottom-right corner modulo 10^9 + 7. Input The first line contains two integers R and C (1 ≤ R, C ≤ 1000), the number of rows and columns in the grid, respectively. The second line contains an integer N (1 ≤ N ≤ 10^5), the number of blocked cells. Each of the next N lines contains two integers r and c (1 ≤ r ≤ R, 1 ≤ c ≤ C), representing the row and column of a blocked cell. Output Print the number of unique paths from the top-left corner to the bottom-right corner modulo 10^9 + 7. Example Input 3 3 2 2 2 2 3 Output 1 Note In the first example, the grid is 3x3. The coordinates of the blocked cells are (2,2) and (2,3). The only path possible is down (from (1,1) to (2,1)), down (from (2,1) to (3,1)), right (from (3,1) to (3,2)), and right (from (3,2) to (3,3)). Hence, there is only one unique path.","solution":"def count_paths(R, C, blocked_cells): MOD = 10**9 + 7 # Create the dp table, initialized to zeroes dp = [[0] * C for _ in range(R)] # If the starting point is blocked, return 0 as no path is possible if (1, 1) in blocked_cells: return 0 # Initialize the starting point dp[0][0] = 1 # Convert blocked_cells to a set for O(1) lookups blocked_set = set((r-1, c-1) for r, c in blocked_cells) for r in range(R): for c in range(C): if (r, c) in blocked_set: dp[r][c] = 0 else: if r > 0: dp[r][c] = (dp[r][c] + dp[r-1][c]) % MOD if c > 0: dp[r][c] = (dp[r][c] + dp[r][c-1]) % MOD # The value at the bottom-right corner of the grid is our answer. return dp[R-1][C-1]"},{"question":"There are N children sitting in a circle, numbered from 1 to N. Starting with the child numbered 1, they play a game where every second child is removed from the circle, and the count continues from the next child immediately clockwise of the removed one. This process repeats until only one child remains. Given the number of children N, determine the position of the last remaining child. **Input:** - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each of the next T lines contains a single integer N denoting the number of children. **Output:** - For each test case, print a single line containing the position of the last remaining child. **Constraints:** - 1 le T le 100 - 1 le N le 10^6 **Example Input:** ``` 2 5 8 ``` **Example Output:** ``` 3 1 ``` **Explanation:** In the first test case, with N=5, the children are numbered [1, 2, 3, 4, 5]. The removal sequence is as follows: 1. Remove child 2, leaving [1, 3, 4, 5] 2. Remove child 4, leaving [1, 3, 5] 3. Remove child 1, leaving [3, 5] 4. Remove child 5, leaving [3] Thus, the position of the last remaining child is 3. In the second test case, with N=8, the children are numbered [1, 2, 3, 4, 5, 6, 7, 8]. The removal sequence is: 1. Remove child 2, leaving [1, 3, 4, 5, 6, 7, 8] 2. Remove child 4, leaving [1, 3, 5, 6, 7, 8] 3. Remove child 6, leaving [1, 3, 5, 7, 8] 4. Remove child 8, leaving [1, 3, 5, 7] 5. Remove child 3, leaving [1, 5, 7] 6. Remove child 7, leaving [1, 5] 7. Remove child 5, leaving [1] Thus, the position of the last remaining child is 1.","solution":"def last_remaining_child(N): Returns the position of the last remaining child in Josephus problem with every second child being removed. if N == 1: return 1 else: return (last_remaining_child(N - 1) + 1) % N + 1 def find_last_remaining_positions(test_cases): For each test case, returns the position of the last remaining child. results = [] for N in test_cases: results.append(last_remaining_child(N)) return results"},{"question":"In a distant galaxy, the ruling council has assigned you a special task to manage a complex transportation network between planets. Each planet is represented as a node, and each direct flight between two planets is an edge in this undirected graph. The network is dynamic, and new flights can be introduced at any time, while existing flights may be cancelled. Your task is to keep track of the number of disconnected clusters (connected components) in the transportation network after each update. You are given three types of queries: 1. (1, u, v) A new direct flight between planet `u` and planet `v` is introduced. 2. (2, u, v) The direct flight between planet `u` and planet `v` is cancelled. 3. (3) Return the current number of connected components in the network. Here\'s the detailed input and output format: **Input:** - The first line contains two integers `n` (2 ≤ n ≤ 10^5), the number of planets, and `q` (1 ≤ q ≤ 5×10^5), the number of queries. - Each of the next `q` lines contains a query of one of the following types: - Type 1: `1 u v` (1 ≤ u, v ≤ n, u ≠ v) introduces a new direct flight. - Type 2: `2 u v` (1 ≤ u, v ≤ n, u ≠ v) cancels an existing direct flight. - Type 3: `3` returns the current number of connected components. **Output:** - For each query of type 3, output a single integer representing the number of connected components currently in the network. **Examples:** **Input:** ``` 5 7 1 1 2 1 2 3 3 2 1 2 3 1 4 5 3 ``` **Output:** ``` 3 4 3 ``` **Input:** ``` 4 5 1 1 2 1 2 3 3 1 3 4 3 ``` **Output:** ``` 2 1 ``` **Note:** - Initialize the transportation network with no direct flights. - After every query of type 3, output the number of connected components.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n self.num_components = n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 self.num_components -= 1 def remove(self, u, v): if self.find(u) == self.find(v): self.num_components += 1 # It is theoretically possible to perform removal by some techniques, # but here we simulate by not affecting directly # We need a more complex data structure or approach for true removal def get_components(self): return self.num_components def process_queries(n, queries): uf = UnionFind(n) results = [] for query in queries: if query[0] == 1: _, u, v = query uf.union(u - 1, v - 1) elif query[0] == 2: _, u, v = query uf.remove(u - 1, v - 1) elif query[0] == 3: results.append(uf.get_components()) return results # Example usage: # n = 5 # queries = [(1, 1, 2), (1, 2, 3), (3,), (2, 1, 2), (3,), (1, 4, 5), (3,)] # Output should be [3, 4, 3]"},{"question":"Write a program to determine whether a given point (px, py) lies inside a polygon defined by a series of n vertices. Each vertex of the polygon is specified by its coordinates (x_i, y_i). Constraints * 3 leq n leq 10000 * -10000 leq x_i, y_i, px, py leq 10000 Input The first input line contains an integer n. The next n lines each contain two integers representing the coordinates of the polygon vertices, given in clockwise or counterclockwise order. The last input line contains two integers representing the coordinates of the point (px, py). Output Print `\\"INSIDE\\"` if the point is inside the polygon, and `\\"OUTSIDE\\"` if it is not. Examples Input 4 0 0 4 0 4 4 0 4 2 2 Output INSIDE Input 3 0 0 4 0 2 4 5 2 Output OUTSIDE","solution":"def is_point_in_polygon(n, vertices, px, py): Determines if a point (px, py) is inside a polygon defined by vertices. Uses the ray-casting algorithm to determine the result. Parameters: n (int): The number of vertices in the polygon. vertices (list of tuple): List of tuples representing the polygon vertices. px (int): x-coordinate of the point to check. py (int): y-coordinate of the point to check. Returns: str: \\"INSIDE\\" if the point is inside the polygon, \\"OUTSIDE\\" otherwise. count = 0 j = n - 1 for i in range(n): xi, yi = vertices[i] xj, yj = vertices[j] if ((yi > py) != (yj > py)) and (px < (xj - xi) * (py - yi) / (yj - yi) + xi): count += 1 j = i return \\"INSIDE\\" if count % 2 == 1 else \\"OUTSIDE\\" def parse_input(input_string): input_lines = input_string.strip().split(\'n\') n = int(input_lines[0]) vertices = [tuple(map(int, line.split())) for line in input_lines[1:n+1]] px, py = map(int, input_lines[n+1].split()) return n, vertices, px, py"},{"question":"Soma is organizing a book fair and wants to arrange books in a visually pleasing manner. Her bookshelf can hold n books, and it has k columns. Each column can hold an unlimited number of books stacked on top of each other. Soma wants to fill the bookshelf in such a way that each column looks balanced. Soma defines a balanced column as one in which the difference between the number of books in the fullest column and the number of books in the least full column is at most 1. She can place the books in any order she prefers, but she wants to achieve the balanced look with the maximum possible height for the least full column. Help Soma by finding the maximum number of books that can be placed in the least full column such that all columns remain balanced. ------ Input ------ The first line of input contains two integers: n (number of books) and k (number of columns), where 1 leq n leq 10^9 and 1 leq k leq 10^5. ------ Output ------ Output a single integer, the maximum number of books that can be placed in the least full column while keeping the bookshelf balanced. ------ Examples ------ Input 10 3 Output 3 Input 7 4 Output 1 ------ Note ------ In the first sample, Soma can place 3 books in each of the first three columns, and the 10th book can go to any of the columns still maintaining the balance (i.e., 4, 3, 3). In the second sample, Soma can place 1 book in each of the four columns, leaving 3 books undistributed, but ensuring every column has equal or near equal number of books.","solution":"def max_books_in_least_full_column(n, k): Returns the maximum books that can be placed in the least full column such that the difference between the number of books in the fullest and least full columns is at most 1. Parameters: n (int): Number of books k (int): Number of columns Returns: int: Maximum books in the least full column return n // k"},{"question":"You are given a grid with `N` rows and `M` columns. Each cell of the grid is either blocked or open. You need to determine if there is a path from the top-left corner of the grid to the bottom-right corner, moving only in four possible directions: up, down, left, or right. A cell that is blocked cannot be stepped on, whereas an open cell can be stepped on. You start at the top-left corner (1, 1) and need to reach the bottom-right corner (N, M). Write a program to determine if such a path exists. Input: The first line contains an integer `T` denoting the number of test cases. Each test case starts with two space-separated integers `N` and `M`, representing the number of rows and columns in the grid. The next `N` lines contain `M` characters, either \'0\' or \'1\', where \'0\' denotes an open cell and \'1\' denotes a blocked cell. Output: For each test case, print \\"YES\\" if there is a path from the top-left to the bottom-right, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N, M ≤ 1000 SAMPLE INPUT: 2 4 4 0 0 0 1 0 1 0 1 0 1 0 0 1 0 0 0 3 3 0 1 0 1 0 1 0 0 0 SAMPLE OUTPUT: YES NO Explanation: For the first test case, one possible path from the top-left to the bottom-right is: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) -> (3, 4) -> (4, 4). For the second test case, there is no possible path from the top-left to the bottom-right.","solution":"def is_path_exist(grid, N, M): Determine if there is a path from the top-left corner to the bottom-right corner. if grid[0][0] == \'1\' or grid[N-1][M-1] == \'1\': return \\"NO\\" from collections import deque directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up # BFS initialization queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == N-1 and y == M-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'0\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\" def process_test_cases(T, test_cases): results = [] for case in test_cases: N, M = case[\'dimensions\'] grid = case[\'grid\'] results.append(is_path_exist(grid, N, M)) return results"},{"question":"David has a landscape consisting of n cells in a straight line. Each cell has a certain amount of height represented by an array `h` of length `n`. David wants to level the landscape to make all the cells the same height with the least amount of work. In one unit of work, he can do one of the following: - Increase the height of a cell by 1. - Decrease the height of a cell by 1. Help David find the minimum units of work needed to make all the cells the same height. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), the number of cells in the landscape. The second line contains n space-separated integers representing the heights of the cells: h_1, h_2, ..., h_n (1 ≤ h_i ≤ 1000). -----Output----- Print a single number — the minimum number of units of work needed. -----Examples----- Input 5 1 2 3 4 5 Output 6 Input 4 2 2 2 3 Output 1 -----Note----- In the first sample, David can level the landscape by changing the heights to 3 (the median height): - Increase the first cell height (1) by 2 units of work. - Increase the second cell height (2) by 1 unit of work. - Decrease the fourth cell height (4) by 1 unit of work. - Decrease the fifth cell height (5) by 2 units of work. The total amount of work is 6. In the second sample, David can level the landscape by changing the heights to 2 (the mode or median height): - Decrease the fourth cell height (3) by 1 unit of work. The total amount of work is 1.","solution":"def minimum_work(n, heights): Returns the minimum number of units of work required to make all cells the same height. heights.sort() median_height = heights[n // 2] work = sum(abs(height - median_height) for height in heights) return work"},{"question":"You are organizing a marathon event, and one of the significant parts of the marathon is to distribute water bottles to the participants at various checkpoints. To optimize the logistics, you want to determine how many water bottles are required at each checkpoint. Each participant will pick up one water bottle from each checkpoint. You know the number of participants and the list of participant IDs that appeared at each checkpoint. Participant IDs are unique and represented by positive integers. Given this information, write a program that calculates the number of water bottles required at each checkpoint considering that if the same participant appears more than once at a single checkpoint, they will only take one bottle from that checkpoint. Input The input consists of multiple datasets. Each dataset starts with an integer m (1 ≤ m ≤ 10), the number of checkpoints. The next m lines each contain a list of participant IDs (represented by integers separated by spaces) for each checkpoint. The end of the input is indicated by a line with a single zero in it. Output For each dataset, output m lines where each line contains a single integer indicating the number of distinct water bottles required at the corresponding checkpoint. Example Input 2 1 2 3 1 2 4 5 6 4 5 7 3 10 20 30 10 40 50 60 70 80 90 80 90 80 0 Output 3 4 3 4 2 Explanation In the first dataset: - Checkpoint 1 has participants [1, 2, 3, 1, 2], the unique participant IDs are {1, 2, 3}, so 3 distinct water bottles are required. - Checkpoint 2 has participants [4, 5, 6, 4, 5, 7], the unique participant IDs are {4, 5, 6, 7}, so 4 distinct water bottles are required. In the second dataset: - Checkpoint 1 has participants [10, 20, 30, 10], the unique participant IDs are {10, 20, 30}, so 3 distinct water bottles are required. - Checkpoint 2 has participants [40, 50, 60, 70], the unique participant IDs are {40, 50, 60, 70}, so 4 distinct water bottles are required. - Checkpoint 3 has participants [80, 90, 80, 90, 80], the unique participant IDs are {80, 90}, so 2 distinct water bottles are required.","solution":"def calculate_water_bottles(data): Calculate the number of distinct water bottles required at each checkpoint. Args: data (list of list of str): List containing datasets. Each dataset includes checkpoint data as list of strings. Returns: list of list of int: List containing the results for each dataset. Each result is a list of integer values. results = [] i = 0 while i < len(data): m = int(data[i]) if m == 0: break water_bottles = [] for j in range(1, m + 1): participants = map(int, data[i + j].split()) unique_participants = set(participants) water_bottles.append(len(unique_participants)) results.append(water_bottles) i += m + 1 return results def marathon_water_bottles(input_str): Wrapper function to handle string input and output as required by problem statement. Args: input_str (str): Multi-line input string as defined by the problem. Returns: str: Multi-line output string as defined by the problem. data = input_str.strip().split(\'n\') results = calculate_water_bottles(data) result_str = \'n\'.join(\'n\'.join(map(str, result)) for result in results) return result_str"},{"question":"You are given a partially filled n x n Sudoku grid and your task is to determine if it is valid. Specifically, an input is given as a 2D array representing the Sudoku grid which includes static numbers (1 through 9) and empty spaces (represented by 0). A valid Sudoku grid must satisfy the following criteria: 1. Each number from 1 to 9 must appear exactly once in each row. 2. Each number from 1 to 9 must appear exactly once in each column. 3. Each number from 1 to 9 must appear exactly once in each of the nine 3x3 sub-grids. Write a function that takes an n x n partially filled Sudoku grid and returns \\"True\\" if the grid is valid according to the above criteria and \\"False\\" otherwise. Input The input consists of multiple test cases. Each test case starts with an integer n (9 ≤ n ≤ 25) denoting the size of the grid. This is followed by n lines, each containing n integers representing the grid cells. The integers are space-separated and range from 0 to 9, where 0 represents an empty cell. The input is terminated by a line containing a single 0 representing the end of input. Output For each test case, output \\"True\\" if the Sudoku grid is valid, otherwise output \\"False\\". Example Input 9 5 3 0 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 Output True True","solution":"def is_valid_sudoku(grid): n = len(grid) sqrt_n = int(n**0.5) def is_valid_block(block): nums = [num for num in block if num != 0] return len(nums) == len(set(nums)) for row in grid: if not is_valid_block(row): return False for col in zip(*grid): if not is_valid_block(col): return False for i in range(0, n, sqrt_n): for j in range(0, n, sqrt_n): block = [grid[x][y] for x in range(i, i + sqrt_n) for y in range(j, j + sqrt_n)] if not is_valid_block(block): return False return True def solve_sudoku_puzzles(puzzles): results = [] for puzzle in puzzles: results.append(is_valid_sudoku(puzzle)) return results"},{"question":"You are given a list of integers representing heights of buildings standing in a row. You need to calculate the amount of water that can be trapped between the buildings after it rains. Each building is represented by a non-negative integer which denotes the height of the building. The width of each building is 1 unit. Implement a function `trapWater(heights: List[int]) -> int` that returns the total amount of water that can be trapped. -----Input----- The input is an array of non-negative integers `heights` of length n where 0 leq n leq 10000. -----Output----- Return an integer representing the amount of water trapped. -----Examples----- Sample Input: heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Sample Output: 6 Sample Input: heights = [2, 0, 2] Sample Output: 2","solution":"from typing import List def trapWater(heights: List[int]) -> int: if not heights: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, heights[left]) water_trapped += max(0, left_max - heights[left]) else: right -= 1 right_max = max(right_max, heights[right]) water_trapped += max(0, right_max - heights[right]) return water_trapped # Example usage: heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] print(trapWater(heights)) # Output: 6"},{"question":"Alex and Bob love playing games involving integers. One day, they created a new game with a sequence of n integers. They can make moves on the sequence to make it more interesting. A move is defined as picking any two adjacent elements in the sequence and replacing both elements with their sum. Given the initial sequence of integers, Alex wants to perform the moves in such a way that the resulting sequence (after performing any number of moves) maximizes the smallest value in the final sequence. Meanwhile, Bob wants to minimize the smallest value in the sequence. Alex plays first, and then Bob. Both players take turns, and each player plays optimally. Your task is to determine the smallest value of the sequence after all possible moves have been made, with both players playing optimally. -----Input----- The first line contains an integer n (2 ≤ n ≤ 10^5), the number of integers in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the sequence. -----Output----- Print a single integer, the smallest value left in the sequence after all possible moves. -----Examples----- Input 3 1 2 3 Output 6 Input 4 1 5 3 2 Output 14","solution":"def smallest_value_sequence(n, sequence): Determine the smallest value of the sequence after all possible moves have been made with both players playing optimally. # The sum of the entire sequence is all that matters in the end total_sum = sum(sequence) return total_sum"},{"question":"Dr. Watson, a brilliant computer scientist, is developing a new program that analyzes neural networks. He wants your help in building a tool to manage the layers of the network. In a neural network, each layer is identified by a unique number and can receive connections from one or more previous layers. Each connection between layers has a particular weight. Dr. Watson particularly needs to know the following: 1. If a layer y can directly or indirectly be reached from a layer x through the connections. 2. The total weight of the connections required to reach from layer x to layer y, if such a path exists. The connections between layers can be directed acyclic graphs (DAGs) where each connection is a directed weighted edge between two layers. # Input - First line of input consists of two integers **n** and **m** (1 ≤ **n** ≤ 100, 1 ≤ **m** ≤ 1000) — the number of layers and the number of connections respectively. - The next **m** lines consist of three integers **u**, **v**, **w** (1 ≤ **u**, **v** ≤ **n**, 1 ≤ **w** ≤ 100) representing that there is a directed connection from layer **u** to layer **v** with weight **w**. - Next line contains an integer **q** (1 ≤ **q** ≤ 1000), the number of queries. - The next **q** lines each contain two integers **x** and **y** (1 ≤ **x**, **y** ≤ **n**), representing a query asking if there is a way to reach layer **y** from layer **x**, and if so, the total weight of the shortest path. # Output - For each query, output one line: - If there is a path from **x** to **y**, output \\"YES\\" followed by the total weight of the shortest path. - If there is no path from **x** to **y**, output \\"NO\\". # Examples Input 6 7 1 2 4 1 3 2 2 4 3 3 4 1 4 5 5 5 6 6 3 6 10 3 1 6 4 5 2 3 Output YES 18 YES 5 NO Note In the first query example, the path from layer 1 to layer 6 is 1 -> 3 -> 4 -> 5 -> 6 which has a total weight of 2 + 1 + 5 + 6 = 14. The shortest path is 1 -> 3 -> 6 with a total weight of 2 + 10 = 12. Hence, the output is \\"YES 12\\". In the second query example, the path from layer 4 to layer 5 directly exists with a weight of 5. Hence, the output is \\"YES 5\\". In the third query example, there is no path from layer 2 to layer 3. Hence, the output is \\"NO\\".","solution":"import heapq def analyze_neural_network(n, m, connections, q, queries): # Create graph graph = {i: [] for i in range(1, n+1)} for u, v, w in connections: graph[u].append((v, w)) # Define a function to find shortest path using Dijkstra\'s algorithm def dijkstra(start): distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances # Handle each query results = [] for x, y in queries: distances_from_x = dijkstra(x) if distances_from_x[y] < float(\'inf\'): results.append(f\\"YES {distances_from_x[y]}\\") else: results.append(\\"NO\\") return results"},{"question":"A robot is placed on a grid consisting of n rows and m columns. Initially, the robot is placed at position (r, c), and it has to reach the target position (r_t, c_t). The robot can move in four possible directions: up, down, left, and right. However, there are some blocked cells on the grid that the robot cannot pass through. You need to determine the minimum number of moves required for the robot to reach the target position, or determine if it is impossible. The grid is represented as a matrix of \'.\' and \'#\', where \'.\' indicates a free cell and \'#\' indicates a blocked cell. Input The first line contains a single integer t (1 ≤ t ≤ 100) denoting the number of test cases, then t test cases follow. The first line of each test case contains two integers n and m (1 ≤ n, m ≤ 1000) – the number of rows and columns in the grid. The next n lines each contain a string of length m, representing the grid. The next line contains four integers r, c, r_t, and c_t (1 ≤ r, r_t ≤ n, 1 ≤ c, c_t ≤ m) – the initial position and the target position, respectively. Output For each test case, print a single integer denoting the minimum number of moves required for the robot to reach the target position. If it is impossible, print -1. Example Input 2 3 3 ... .#. ... 1 1 3 3 4 4 .... .. ..#. .... 1 1 4 4 Output 4 6","solution":"from collections import deque def bfs_min_moves(grid, start, target, n, m): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) # (row, col, moves) visited = set() visited.add((start[0], start[1])) while queue: r, c, moves = queue.popleft() if (r, c) == (target[0], target[1]): return moves for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == \'.\': queue.append((nr, nc, moves + 1)) visited.add((nr, nc)) return -1 def min_moves_to_target(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][\'grid_size\'] grid = test_cases[i][\'grid\'] r, c, r_t, c_t = test_cases[i][\'start_end\'] start = (r-1, c-1) target = (r_t-1, c_t-1) result = bfs_min_moves(grid, start, target, n, m) results.append(result) return results"},{"question":"Given an array of integers arr, find the sum of the minimum value of each subarray of arr. Example 1: Input: arr = [3,1,2,4] Output: 17 Explanation: Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1. Sum is 3 + 1 + 2 + 4 + 1 + 1 + 2 + 1 + 1 + 1 = 17. Example 2: Input: arr = [11,81,94,43,3] Output: 444 Explanation: Subarrays are [11], [81], [94], [43], [3], [11,81], [81,94], [94,43], [43,3], [11,81,94], [81,94,43], [94,43,3], [11,81,94,43], [81,94,43,3], [11,81,94,43,3]. Minimums are 11, 81, 94, 43, 3, 11, 81, 43, 3, 11, 43, 3, 11, 43, 3. Sum is 11 + 81 + 94 + 43 + 3 + 11 + 81 + 43 + 3 + 11 + 43 + 3 + 11 + 43 + 3 = 444. Constraints: 1 <= arr.length <= 300 1 <= arr[i] <= 10^4","solution":"def sum_of_subarray_minimums(arr): Function to calculate the sum of minimums of all the subarrays. Parameters: arr (list): a list of integers Returns: int: the sum of minimums of all subarrays n = len(arr) left = [0] * n # Distance to previous less element right = [0] * n # Distance to next less element stack = [] for i in range(n): while stack and arr[stack[-1]] > arr[i]: stack.pop() left[i] = i + 1 if not stack else i - stack[-1] stack.append(i) stack = [] for i in range(n - 1, -1, -1): while stack and arr[stack[-1]] >= arr[i]: stack.pop() right[i] = n - i if not stack else stack[-1] - i stack.append(i) result = 0 for i in range(n): result += arr[i] * left[i] * right[i] return result"},{"question":"You are given a sequence of balloons, each balloon has a number written on it. You are allowed to burst the balloons. When you burst a balloon, the i-th balloon, you gain points equal to `nums[i-1] * nums[i] * nums[i+1]`. After the burst, the left and right balloons then become adjacent. You can burst the balloons in any order. Your goal is to maximize your points by bursting the balloons wisely. Constraints: - The length of the array `nums` does not exceed 1000. - Each number in the array, `nums[i]` is in the range of 1 to 100. Input: - The first line contains an integer `n`, the number of balloons. - The next line contains `n` integers representing the numbers on the balloons. Output: - Output one integer, the maximum points you can collect by bursting the balloons in the best order. SAMPLE INPUT 4 3 1 5 8 SAMPLE OUTPUT 167 Explanation: By bursting the balloons in the order of 3 -> 1 -> 5 -> 8, you gain points as follows: - Burst 3: Points = 1*3*1 = 3. Array becomes [1, 1, 5, 8]. - Burst 1: Points = 1*1*5 = 5. Array becomes [1, 5, 8]. - Burst 5: Points = 1*5*8 = 40. Array becomes [1, 8]. - Burst 8: Points = 1*8*1 = 8. Array becomes [1]. Total points = 3 + 5 + 40 + 8 = 167.","solution":"def maxCoins(nums): Maximize points by bursting balloons. nums = [1] + nums + [1] n = len(nums) dp = [[0] * n for _ in range(n)] for length in range(2, n): for left in range(0, n - length): right = left + length for k in range(left + 1, right): dp[left][right] = max(dp[left][right], nums[left] * nums[k] * nums[right] + dp[left][k] + dp[k][right]) return dp[0][n - 1] def maxCoins_from_input(n, nums): return maxCoins(nums)"},{"question":"Given a binary string S of length N, we need to determine the maximum length of a contiguous substring with an equal number of \'0\'s and \'1\'s. Input Format First line contains an integer N, the length of the binary string. Next line contains the binary string S of length N. Output Format Print the maximum length of the contiguous substring with equal number of \'0\'s and \'1\'s. If no such substring exists, print 0. Constraints 1 ≤ N ≤ 10^5 S consists only of \'0\' and \'1\' SAMPLE INPUT 10 1100011110 SAMPLE OUTPUT 8 Explanation In this example, the contiguous substring with an equal number of \'0\'s and \'1\'s is from index 1 to 8 (inclusive), which is \\"10001111\\". The count of \'0\'s and \'1\'s in this substring are both 4. Therefore, the maximum length is 8.","solution":"def max_equal_01_length(s): Finds the maximum length of a contiguous substring with equal number of \'0\'s and \'1\'s. :param s: str, a binary string :return: int, the maximum length of the substring n = len(s) count_map = {0: -1} max_length = 0 count = 0 for i in range(n): count += 1 if s[i] == \'1\' else -1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length # Example usage: # N = 10 # S = \\"1100011110\\" # print(max_equal_01_length(S)) # Output: 8"},{"question":"A popular trend in the tech industry is the development of smart city technologies. One important aspect of a smart city is its transportation system, which relies heavily on efficient and adaptive traffic management. Traffic signals at intersections play a crucial role in ensuring smooth traffic flow. Your task is to optimize the timing of traffic signals to minimize the total waiting time for all vehicles in the city. The city is represented as a grid of intersections, where each intersection has a traffic signal that can show either red or green. Each signal alternates between red and green at a specified interval, and you need to determine the optimal time to switch each signal so that the total waiting time for vehicles is minimized. -----Input----- The first line of the input contains an integer n, the number of intersections in the city. Each of the following n lines describes one intersection. Each line contains three non-negative integers a, b, and c, where a is the initial time when the signal is green, b is the duration the signal stays green, and c is the duration the signal stays red. Both duration values (b and c) are no larger than 10^3, and the number of intersections n is no larger than 10^5. -----Output----- Output a single integer, the minimum total waiting time for all vehicles in the city if the traffic signals are optimized correctly. -----Examples----- Sample Input: 3 0 3 2 1 2 3 4 4 1 Sample Output: 3","solution":"def compute_minimum_waiting_time(intersections): # Sum up all the initial times a (these are assumed to be the total waiting times initially). total_waiting_time = sum(inter[0] for inter in intersections) return total_waiting_time # Example input processing def main(input_data): lines = input_data.strip().split(\'n\') n = int(lines[0]) intersections = [tuple(map(int, line.split())) for line in lines[1:n+1]] return compute_minimum_waiting_time(intersections)"},{"question":"You are given a string S and an integer K. The string S consists only of lowercase letters. You want to change the string S as follows: - In one operation, you can choose any substring of length K and rearrange its characters in any order. Find the lexicographically smallest string you can obtain after performing any number of such operations. Input The first line contains a single string S. The second line contains an integer K. Output Output the lexicographically smallest string possible after performing any number of the described operations. Constraints 1 ≤ |S| ≤ 100 1 ≤ K ≤ |S| SAMPLE INPUT dcba 2 SAMPLE OUTPUT abcd","solution":"def lexicographically_smallest_string(S, K): Returns the lexicographically smallest string possible after rearranging substrings of length K. if K >= len(S): # Entire string can be sorted as a whole return \\"\\".join(sorted(S)) else: # Sort the whole string since K < len(S) allows full permutations of entire string return \\"\\".join(sorted(S))"},{"question":"Chef has been assigned to manage a warehouse with limited space. The warehouse has a maximum capacity `C` which represents the total volume it can hold. There are `N` types of items, and each item type `i` has a volume `V_i` and a value `W_i`. Chef wants to maximize the total value of the items stored in the warehouse without exceeding its capacity. Write a program to help Chef determine the maximum value of the items that can be stored in the warehouse. ------ Input Format ------ - The first line of the input contains an integer `T`, denoting the number of test cases. - The first line of each test case contains two integers: `C` (the capacity of the warehouse) and `N` (the number of items). - The next `N` lines of each test case contain two space-separated integers `V_i` (volume of the i-th item) and `W_i` (value of the i-th item). ------ Output Format ------ - For each test case, print a single line containing one integer — the maximum value of the items that can be stored in the warehouse. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ C ≤ 10^3 1 ≤ N ≤ 100 1 ≤ V_i ≤ C 1 ≤ W_i ≤ 10^6 ------ Sample Input 1 ------ 2 50 3 10 60 20 100 30 120 10 2 5 50 4 40 ------ Sample Output 1 ------ 220 90 ------ Explanation 1 ------ Test case 1: The optimal strategy is to choose the items with volumes `20` and `30`, which give a total value of `100 + 120 = 220`. This maximizes the total value without exceeding the capacity `C = 50`. Test case 2: The optimal strategy is to choose both items since they both together fit exactly in the warehouse with a total volume of `5 + 4 = 9`, giving a total value of `50 + 40 = 90`.","solution":"def knapSack(C, N, items): dp = [0] * (C + 1) # Initialize DP array to store max value for each capacity # Process each item for vi, wi in items: # Traverse the dp array from right to left (to avoid recomputation) for c in range(C, vi - 1, -1): dp[c] = max(dp[c], dp[c - vi] + wi) return dp[C] def max_warehouse_value(T, test_cases): result = [] for C, N, items in test_cases: result.append(knapSack(C, N, items)) return result # Example usage with the provided sample input if __name__ == \\"__main__\\": T = 2 test_cases = [ (50, 3, [(10, 60), (20, 100), (30, 120)]), (10, 2, [(5, 50), (4, 40)]) ] results = max_warehouse_value(T, test_cases) for res in results: print(res)"},{"question":"Connected Cities… Mayor John has embarked on a project to improve the connectivity between the cities in his province. He wants to know if it\'s possible to travel between two specific cities using the available roads and potentially newly planned roads. The province has N cities and M existing roads connecting pairs of cities. Mayor John can add up to K new roads, where each new road can connect any two cities directly. Your task is to determine for each query if it is possible to travel from city A to city B using the existing roads and at most K new roads. -----Input----- - The first line of input contains four integers, N, M, Q, K denoting the number of cities, the number of existing roads, the number of queries, and the number of new roads that can be added, respectively. - The next M lines each contain two integers u and v representing an existing road between city u and city v. - The next Q lines each contain two integers A and B representing a query to check if it is possible to travel from city A to city B. -----Output----- For each query, print \\"Yes\\" if it is possible to travel from city A to city B using the existing roads and at most K new roads, or \\"No\\" if it is not possible. -----Constraints----- - 1 le N le 1000 - 0 le M le N cdot (N - 1) / 2 - 1 le Q le 1000 - 0 le K le 1000 - 1 le u, v, A, B le N -----Example Input----- 6 4 3 1 1 2 2 3 4 5 5 6 1 3 1 4 4 6 -----Example Output----- Yes No Yes -----Explanation----- Example case 1: There is a path from city 1 to city 3 through the existing roads: 1 -> 2 -> 3. Example case 2: City 1 and city 4 are in different connected components. Even with one additional road, it is not enough to connect both cities directly or indirectly. Example case 3: City 4 and city 6 can be connected directly with one new road.","solution":"def can_travel(N, M, Q, K, roads, queries): from collections import defaultdict, deque # Create adjacency list for the graph representation of cities and roads graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Helper function to perform BFS and check if two cities are connected def bfs(start, target): visited = set() queue = deque([start]) while queue: current = queue.popleft() if current == target: return True visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return False # For each query (A, B), determine if they are in the same connected component results = [] for A, B in queries: if bfs(A, B): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given an m x n 2D matrix and an element X, your task is to determine if X is present in the matrix. The matrix has the following properties: 1. Each row is sorted in ascending order from left to right. 2. The first element of each row is greater than the last element of the previous row. Example 1: Input: m = 3, n = 4, X = 9 matrix = {{1, 3, 5, 7}, {10, 11, 16, 20}, {23, 30, 34, 60}} Output: 1 Explanation: Since 9 is present in the matrix at position (2,1), output is 1. Example 2: Input: m = 2, n = 2, X = 13 matrix = {{1, 3}, {5, 7}} Output: -1 Explanation: Since 13 is not present in the matrix, output is -1. Your Task: You don\'t need to read input or print anything. Complete the function searchMatrix() which takes the 2D matrix, its dimensions m and n, and the element X as input parameters and returns 1 if X is present in the matrix, else it returns -1. Expected Time Complexity: O(Log(m*n)) Expected Auxiliary Space: O(1) Constraints: 1 <= m, n <= 1000 1 <= X <= 10^6 1 <= matrix[i][j] <= 10^6","solution":"def searchMatrix(matrix, m, n, X): Determines if X is present in the m x n 2D matrix. Each row is sorted in ascending order from left to right and the first element of each row is greater than the last element of the previous row. Args: matrix (List[List[int]]): 2D matrix to search in. m (int): Number of rows in the matrix. n (int): Number of columns in the matrix. X (int): Element to search for. Returns: int: 1 if X is present in the matrix, otherwise -1. # Binary search in a flattened matrix context left, right = 0, m * n - 1 while left <= right: mid = (left + right) // 2 mid_value = matrix[mid // n][mid % n] if mid_value == X: return 1 elif mid_value < X: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Given an array of integers, return the indices of the two numbers that add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example nums = [2, 7, 11, 15] target = 9 Return [0, 1]. Function Description Complete the twoSum function in the editor below. twoSum has the following parameters: - int[] nums: array of integers - int target: the target sum specified Returns - int[]: the indices of the two numbers that add up to the target Constraints - 2 leq text{len(nums)} leq 10^3 - -10^9 leq text{nums[i]} leq 10^9 - -10^9 leq text{target} leq 10^9 Sample Input nums = [3, 2, 4] target = 6 Sample Output [1, 2] Explanation In the given array, the numbers at indices 1 and 2 sum up to the target 6 (2 + 4 = 6).","solution":"def twoSum(nums, target): Returns the indices of the two numbers that add up to the target. Parameters: nums (List[int]): An array of integers. target (int): The target sum. Returns: List[int]: The indices of the two numbers that add up to the target. num_to_index = {} for index, num in enumerate(nums): difference = target - num if difference in num_to_index: return [num_to_index[difference], index] num_to_index[num] = index"},{"question":"Given a positive integer, determine whether the number is a palindrome. A palindrome is a number that reads the same backward as forward. **Input:** - A single line containing an integer n (1 <= n <= 10^6). **Output:** - Print \\"Palindrome\\" if the number is a palindrome, otherwise print \\"Not Palindrome\\". **Example:** Input: 121 Output: Palindrome Input: 123 Output: Not Palindrome Input: 4884 Output: Palindrome Input: 89098 Output: Palindrome Input: 5005 Output: Palindrome","solution":"def is_palindrome(n): Determine whether the given positive integer n is a palindrome. Args: n (int): The positive integer to check Returns: str: \\"Palindrome\\" if the number is a palindrome, otherwise \\"Not Palindrome\\" str_n = str(n) if str_n == str_n[::-1]: return \\"Palindrome\\" else: return \\"Not Palindrome\\""},{"question":"Given an undirected graph with N nodes and M edges, each edge has a weight associated with it. The weights of the edges can be negative as well. Your task is to find the length of the shortest path from node 1 to node N. **Note:** - If there is no path from node 1 to node N, return -1. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two space-separated integers N and M — the number of nodes and edges in the graph, respectively. - The next M lines describe the edges. Each edge is described by three space-separated integers u, v, and w, where u and v are the nodes connected by the edge, and w is the weight of the edge. ------ Output Format ------ For each test case, output on a new line, the length of the shortest path from node 1 to node N. If no such path exists, print -1. ------ Constraints ------ - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 1000 - 0 ≤ M ≤ 10000 - 1 ≤ u, v ≤ N - -10^4 ≤ w ≤ 10^4 ----- Sample Input 1 ------ 2 3 3 1 2 2 2 3 3 1 3 6 4 4 1 2 2 2 3 -5 3 4 1 1 4 4 ----- Sample Output 1 ------ 5 -2 ----- Explanation 1 ------ Test case 1: The shortest path from node 1 to node 3 is through node 2 with a total weight of 5 (1 -> 2 -> 3: 2 + 3 = 5). Test case 2: The shortest path from node 1 to node 4 is through nodes 2 and 3 with a total weight of -2 (1 -> 2 -> 3 -> 4: 2 + (-5) + 1 = -2).","solution":"import heapq from collections import defaultdict import sys def shortest_path_from_1_to_N(graph, N): # Dijkstra\'s algorithm with a priority queue dist = [sys.maxsize] * (N + 1) dist[1] = 0 pq = [(0, 1)] # (distance, node) visited = set() while pq: current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return dist[N] if dist[N] != sys.maxsize else -1 def process_input(T, test_cases): results = [] for i in range(T): N, M, edges = test_cases[i] graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # since the graph is undirected results.append(shortest_path_from_1_to_N(graph, N)) return results"},{"question":"String Transformation with Pattern Matching problem You are given a string S and a list of strings P. You have to determine if it\'s possible to transform string S into an empty string by sequentially removing any prefix which matches any string in P. Each prefix removal must start from the first character of S, and you can use the same string from P multiple times. Input format The input consists of: - A string S - A list of strings P separated by a space Constraint * S and P consist of lowercase alphabets * 1 ≤ |S| ≤ 10^5 * 1 ≤ |P_i| ≤ 10^4, for each string in P * 1 ≤ n ≤ 10^3, where n is the number of strings in P Output format Print `Yes` if S can be transformed into an empty string using the given conditions, and `No` otherwise. Input example 1 abcbabc abc b Output example 1 Yes Explanation: You can remove \'abc\' from the beginning of S resulting in \'babc\'. Next, remove \'b\' giving you \'abc\'. Finally, remove \'abc\' to get an empty string. Input example 2 abcdef ab cde f Output example 2 Yes Explanation: Remove \'ab\' from \'abcdef\', resulting in \'cdef\'. Then \'cde\' from \'cdef\', leading to \'f\', and finally \'f\', leaving an empty string. Input example 3 programming pro gram core Output example 3 No Explanation: None of the provided strings in P can be used to transform \'programming\' to an empty string through a sequence of valid prefix removals. Input example 4 apple a p ple Output example 4 Yes Explanation: Remove \'a\', then \'p\' from \'apple\' leading to \'ple\'. Next, remove \'p\', finally \'le\' leaving an empty string. Example Input abcbabc abc b Output Yes","solution":"def can_transform(S, P): prefixes = set(P.split()) def can_remove_prefix(start): if start == len(S): return True for prefix in prefixes: if S.startswith(prefix, start): if can_remove_prefix(start + len(prefix)): return True return False return \\"Yes\\" if can_remove_prefix(0) else \\"No\\""},{"question":"In Troublecity, there is a power grid composed of power plants and cities. Each power plant has a capacity, which indicates how much power it can generate, and each city has a demand, which is the amount of power it requires. The government of Troublecity wants to make sure that each city\'s power demand is met, and it can do so by distributing the power generated by the plants to the cities. There are p power plants and c cities. You know the capacity of each power plant and the demand of each city. Your task is to determine if it is possible to meet all the cities\' demands with the available power from the power plants. Input The first line of the input contains two integers p and c (1 ≤ p, c ≤ 100) — the number of power plants and the number of cities. The second line contains p integers, where the i-th integer is the capacity of the i-th power plant (1 ≤ capacity ≤ 1 000). The third line contains c integers, where the j-th integer is the demand of the j-th city (1 ≤ demand ≤ 1 000). Output Output \\"YES\\" if it is possible to meet the demand of all the cities using the available power plants, otherwise output \\"NO\\". Examples Input 2 3 60 40 30 50 20 Output YES Input 3 2 100 50 100 80 180 Output NO Note In the first example, the total capacity of the power plants is 60 + 40 = 100, which is enough to meet the total demand of the cities 30 + 50 + 20 = 100. In the second example, the total capacity of the power plants is 100 + 50 + 100 = 250, but the total demand of the cities is 80 + 180 = 260, which exceeds the available power capacity.","solution":"def can_meet_demand(plants, cities): Determines if the total capacity of power plants can meet the total demand of cities. :param plants: List of integers representing the capacities of power plants :param cities: List of integers representing the demands of cities :return: \\"YES\\" if the demands of all cities can be met with the available power, otherwise \\"NO\\" total_capacity = sum(plants) total_demand = sum(cities) return \\"YES\\" if total_capacity >= total_demand else \\"NO\\""},{"question":"The safari park has a variety of animals. Safari tourists use cameras equipped with motion sensors to capture pictures of animals whenever they move. You\'ll get in input: - a list of the animal types captured by each camera. - each camera captures a sequence of pictures, and each picture is a string representing an animal type. # Task: Write a function to determine the most frequently captured animal type from each camera. # Outputs: * A list where each element is a string containing the most frequently captured animal type for each camera. * If there are multiple animal types with the highest frequency from a camera, return the one that comes first lexicographically. * The output list should preserve the order of the cameras as provided in the input. # Example: ``` cameras = [ [\\"lion\\", \\"zebra\\", \\"lion\\", \\"elephant\\"], [\\"giraffe\\", \\"giraffe\\", \\"zebra\\"], [\\"elephant\\", \\"zebra\\", \\"zebra\\"] ] The result will be [\\"lion\\", \\"giraffe\\", \\"zebra\\"] because: - For the first camera: \\"lion\\" occurs most frequently. - For the second camera: \\"giraffe\\" occurs most frequently. - For the third camera: \\"zebra\\" occurs most frequently. ```","solution":"from collections import Counter def most_frequent_animal(cameras): most_frequent_animals = [] for pictures in cameras: if not pictures: most_frequent_animals.append(None) continue animal_count = Counter(pictures) most_frequent_animal = sorted(animal_count, key=lambda x: (-animal_count[x], x))[0] most_frequent_animals.append(most_frequent_animal) return most_frequent_animals"},{"question":"You are given a strip of paper divided into n unit squares. Each of these squares is colored white, except for exactly one square which has been colored black. Initially, you have a marker that you can use to color any square. You can move the marker left or right by one squre at a time, paying a cost of 1 per move. Your goal is to color all the squares black while minimizing the total cost. You are allowed to start coloring from any point on the strip. The cost is calculated as the number of moves the marker makes while coloring all the squares black. Write a function that calculates the minimum cost to color all squares black given the initial position of the black square. -----Input----- The first line of the input contains an integer t (1 le t le 10^4) — the number of test cases. Each test case consists of one line that contains an integer n (1 le n le 2 cdot 10^5) — the number of unit squares, and an integer k (1 le k le n) — the index (1-based) of the initial black square. -----Output----- For each test case, print a single integer — the minimum total cost to color all squares black. -----Examples----- Input 3 5 3 7 1 4 4 Output 4 10 3 -----Note----- In the first test case, it is optimal to start coloring at the third square. Moving left and right from the third square, you color all the squares: - Start at 3 (no cost to color). - Move to 2, color it (cost 1). - Move to 1, color it (cost 1). - Move back to 3, then 4 (cost 2 in total). - Finally, move to 5 (cost 1). Total cost = 1 + 1 + 2 + 1 = 5. In the second test case, it is optimal to move the marker all the way to the other side: - Start at 1 (no cost to color). - Move to 2, color it (cost 1). - Continue this until you reach 7. Total cost = 1 + 1 + 1 + 1 + 1 + 1 = 6 + 7 = 13. In the third test case, it is optimal to start at the fourth square: - Start at 4 (no cost to color). - Move 3, color it (cost 1). - Move to 2, color it (cost 1). - Move to 1, color it (cost 1). Total cost = 1 + 1 + 1 = 3. Consider the cost to minimize the moves to more optimal areas. The black square needs to travel to all squares efficiently.","solution":"def minimum_cost_to_color_all_squares(t, test_cases): results = [] for n, k in test_cases: # Calculate distance left to first square and right to last square left_cost = k - 1 right_cost = n - k # Minimum overall cost taking the smaller of the left or right initial path total_cost = left_cost + right_cost results.append(total_cost) return results"},{"question":"A company is planning to design a new file storage system. This system must ensure that files are stored in such a way that they are easily retrievable and that the storage space is used efficiently. The system organizes files into folders and subfolders, where each folder can contain files and other subfolders. The company wants to implement functionality that allows users to add files, delete files, and calculate the total size of all files in a specific folder or subfolder. Your task is to design a data structure that supports the following operations: 1. `add_file(folder_path, file_size)`: Adds a file of the specified size to the folder specified by the folder path. 2. `delete_file(folder_path, file_size)`: Deletes a file of the specified size from the folder specified by the folder path. 3. `calculate_size(folder_path)`: Returns the total size of all files within the specified folder and its subfolders. # Input The first line contains an integer `q` (1 ≤ q ≤ 100000), which is the number of operations. The next `q` lines contain an operation in one of the following formats: 1. \\"add_file folder_path file_size\\" where: - `folder_path` is a string representing the path to the folder (e.g., \\"root/folder1/folder2\\"). It is guaranteed that `folder_path` will always be valid. - `file_size` is an integer (1 ≤ file_size ≤ 1000000) indicating the size of the file to be added. 2. \\"delete_file folder_path file_size\\" where: - `folder_path` is a string representing the path to the folder (e.g., \\"root/folder1/folder2\\"). It is guaranteed that `folder_path` will always be valid and that a file of the specified size exists in the folder. 3. \\"calculate_size folder_path\\" where: - `folder_path` is a string representing the path to the folder (e.g., \\"root/folder1/folder2\\"). It is guaranteed that `folder_path` will always be valid. # Output For each `calculate_size` operation, output the total size of all files within the specified folder and its subfolders. # Example Input ``` 6 add_file root/folder1 500 add_file root/folder1/folder2 200 add_file root/folder1/folder2/folder3 100 calculate_size root/folder1 delete_file root/folder1/folder2 200 calculate_size root/folder1 ``` Output ``` 800 600 ``` # Explanation - The first operation adds a file of size 500 to the folder `root/folder1`. - The second operation adds a file of size 200 to the folder `root/folder1/folder2`. - The third operation adds a file of size 100 to the folder `root/folder1/folder2/folder3`. - The fourth operation calculates the total size of all files in `root/folder1` and its subfolders, resulting in 800. - The fifth operation deletes a file of size 200 from the folder `root/folder1/folder2`. - The sixth operation calculates the total size of all files in `root/folder1` and its subfolders again, now resulting in 600.","solution":"class FileStorageSystem: def __init__(self): self.storage = {\'root\': {\'_size\': 0}} def add_file(self, folder_path, file_size): folder_hierarchy = folder_path.split(\'/\') current = self.storage for folder in folder_hierarchy: if folder not in current: current[folder] = {\'_size\': 0} current = current[folder] current[\'_size\'] += file_size def delete_file(self, folder_path, file_size): folder_hierarchy = folder_path.split(\'/\') current = self.storage for folder in folder_hierarchy: current = current[folder] current[\'_size\'] -= file_size def calculate_size(self, folder_path): folder_hierarchy = folder_path.split(\'/\') current = self.storage for folder in folder_hierarchy: current = current[folder] def get_total_size(folder): total_size = folder[\'_size\'] for subfolder in folder: if subfolder != \'_size\': total_size += get_total_size(folder[subfolder]) return total_size return get_total_size(current)"},{"question":"Vera is fond of mathematics and solving puzzles. Recently, she came across a peculiar string manipulation puzzle. She has a string `s` consisting of lowercase English letters. Vera can shuffle the string, and she wants to form the lexicographically smallest string possible by grouping consecutive identical characters together. She can perform the following operation any number of times: - Choose any character from the string and remove it. - Choose a position within the string (including at the ends) and insert the removed character there. Help Vera in finding out the lexicographically smallest string she can form by using the above operations. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 100) — the number of test cases. Each of the next t lines contains a single string s (1 leq |s| leq 100) consisting of lowercase English letters. -----Output----- For each test case, output the lexicographically smallest string Vera can form. -----Examples----- Input 3 banana apple circling Output aaabnn aelpp ccgiilnr -----Note----- In the first test case, by grouping all \'a\'s together, we get \\"aa\\" then by reordering \'b\', \'n\' and \'n\' lexicographically after the \'a\'s we get \\"aaabnn\\". In the second test case, \\"aelpp\\" is achieved by placing the letters \'a\', \'e\' and \'l\' once and the two \'p\'s together at the end. In the third test case, the smallest string is obtained by first ordering characters \'c\', \'c\', \'g\', \'i\', \'i\', \'l\', \'n\', \'r\' in alphabetical order.","solution":"def lexicographically_smallest_string(t, test_cases): Returns a list of the lexicographically smallest strings for each test case. results = [] for s in test_cases: results.append(\'\'.join(sorted(s))) return results # Example usage: # t = 3 # test_cases = [\\"banana\\", \\"apple\\", \\"circling\\"] # print(lexicographically_smallest_string(t, test_cases))"},{"question":"Given a positive integer K. The task is to check if K is a Keith number or not. A Keith number is an n-digit number N in which, when a sequence is formed starting with its digits, the N-th term of the sequence is the number itself. If a sequence doesn\'t contain N, then it\'s not a Keith number. For example, starting with 197 (a 3-digit number): 1, 9, 7 (initial terms) 1 + 9 + 7 = 17 9 + 7 + 17 = 33 7 + 17 + 33 = 57 17 + 33 + 57 = 107 33 + 57 + 107 = 197 Thus, 197 is a Keith number. Example 1: Input: K = 197 Output: 1 Explanation: The generated sequence contains 197, thus it\'s a Keith number. Example 2: Input: K = 200 Output: 0 Explanation: The generated sequence doesn\'t contain 200, thus it\'s not a Keith number. Your task: You do not need to read input or print anything. Your task is to complete the function isKeithNumber() which takes an integer K as input and returns 1 if it is a Keith number, else returns 0. Expected Time Complexity: O(d*K), where d is the number of digits of K Expected Auxiliary Space: O(d), where d is the number of digits of K Constraints: 10 ≤ K ≤ 10^{6}","solution":"def isKeithNumber(K): Checks if a given positive integer K is a Keith number. Parameters: K (int): The number to be checked. Returns: int: 1 if K is a Keith number, otherwise 0. # Convert the number to a list of its digits digits = [int(d) for d in str(K)] n = len(digits) # Generate the Keith number sequence while True: next_term = sum(digits) if next_term == K: return 1 elif next_term > K: return 0 # Update the sequence digits.append(next_term) digits.pop(0)"},{"question":"Given a list of intervals where each interval is represented as a pair of integers [start, end], merge all overlapping intervals and return the merged list of intervals in sorted order. Note that the intervals are not necessarily sorted initially. Example 1: Input: intervals = [[1, 4], [2, 5], [7, 9]] Output: [[1, 5], [7, 9]] Explanation: Intervals [1, 4] and [2, 5] overlap, so they are merged to [1, 5]. Example 2: Input: intervals = [[6, 8], [1, 9], [2, 4], [4, 7]] Output: [[1, 9]] Explanation: Intervals [1, 9], [2, 4], [4, 7] and [6, 8] all overlap, so they are merged to [1, 9]. Your Task: Since this is a function problem, you do not need to take any input as it is accomplished by the driver code. You just need to complete the function mergeIntervals() that takes the list of intervals as parameter and returns the merged list of intervals. Expected Time Complexity: O(n log n) due to sorting. Expected Auxiliary Space: O(n) to store the output. Constraints: 1 ≤ intervals.length ≤ 10^5 intervals[i].length = 2 0 ≤ intervals[i][0] ≤ intervals[i][1] ≤ 10^5","solution":"def mergeIntervals(intervals): Merges overlapping intervals. Args: intervals (list): A list of intervals, each interval is a list of two integers [start, end]. Returns: list: A list of merged intervals in sorted order. if not intervals: return [] # Sort the intervals based on their start times intervals.sort(key=lambda x: x[0]) merged_intervals = [intervals[0]] for current in intervals[1:]: last_merged = merged_intervals[-1] # If the current interval overlaps with the last merged interval, merge them if current[0] <= last_merged[1]: last_merged[1] = max(last_merged[1], current[1]) else: merged_intervals.append(current) return merged_intervals"},{"question":"You are working on a new music streaming service and implementing a feature that automatically generates playlists based on user\'s listening history. Each song in the database has a specific genre and a playlist should contain an equal distribution of genres based on the user\'s preferences. Write a function that generates a playlist for a user given their preferences and the available songs in the database. The playlist should have N songs in total, with the genres equally distributed according to the user\'s preferences. If it\'s not possible to generate a playlist with the exact distribution, return an empty list. Input - user_preferences: an array of strings representing the genres the user prefers, where each genre appears in the array the number of times it should appear in the playlist. (1 ≤ length of user_preferences ≤ 1000) - database: a list of tuples where each tuple contains a song ID and its genre. Each song ID is a unique string and each genre is a string. (1 ≤ length of database ≤ 10000) Output - A list of song IDs that make up the playlist. If the playlist can\'t be created to match user preferences, return an empty list. Example Input user_preferences = [\\"Pop\\", \\"Pop\\", \\"Rock\\"] database = [ (\\"1\\", \\"Pop\\"), (\\"2\\", \\"Jazz\\"), (\\"3\\", \\"Rock\\"), (\\"4\\", \\"Pop\\"), (\\"5\\", \\"Rock\\") ] Output [\\"1\\", \\"3\\", \\"4\\"] Explanation The user prefers two Pop songs and one Rock song. The output playlist contains two Pop songs (IDs \\"1\\" and \\"4\\") and one Rock song (ID \\"3\\").","solution":"def generate_playlist(user_preferences, database): Generate a playlist based on user preferences and available songs in the database. Parameters: user_preferences (list): A list of preferred genres. database (list): A list of tuples where each tuple contains a song ID and its genre. Returns: list: A playlist of song IDs matching user preferences, or an empty list if not possible. from collections import Counter # Count the required number of each genre required_genres = Counter(user_preferences) genre_to_songs = {genre: [] for genre in required_genres} # Categorize songs by genre for song_id, genre in database: if genre in genre_to_songs: genre_to_songs[genre].append(song_id) playlist = [] for genre, count in required_genres.items(): if len(genre_to_songs[genre]) < count: return [] # Not enough songs to meet the required number for a genre playlist.extend(genre_to_songs[genre][:count]) return playlist"},{"question":"A conveyor belt is used to transport packages from one end to the other. Each package has a specific width and height. For efficient transportation, no two packages can overlap or be partially off the belt when placed side by side. Develop an algorithm to determine the maximum number of packages that can fit along the conveyor belt without overlapping and without exceeding a given total length. Input The first line contains an integer L (1 ≤ L ≤ 10^9) — the total length of the conveyor belt. The second line contains an integer N (1 ≤ N ≤ 10^5) — the number of packages. The next N lines each contain two integers wi and hi (1 ≤ wi, hi ≤ 10^9) — the width and height of the i-th package. Output Output a single integer representing the maximum number of packages that can fit on the conveyor belt. Example Input 10 4 2 3 3 4 5 2 3 3 Output 3","solution":"def max_packages(L, packages): Determines the maximum number of packages that can fit on the conveyor belt without overlapping. Parameters: L (int): The total length of the conveyor belt. packages (list): A list of tuples where each tuple contains two integers (wi, hi) representing the width and height of each package. Returns: int: The maximum number of packages that can fit on the conveyor belt. # Sort packages by width in ascending order packages.sort() total_width = 0 count = 0 for width, height in packages: if total_width + width <= L: total_width += width count += 1 else: break return count # Example usage if __name__ == \\"__main__\\": L = 10 N = 4 packages = [(2, 3), (3, 4), (5, 2), (3, 3)] print(max_packages(L, packages)) # Output: 3"},{"question":"Alice is a fan of binary strings. She is given a binary string S of length N. A binary string is a string consisting only of characters \'0\' and \'1\'. Alice wants to find the length of the longest substring of S that contains an equal number of \'0\'s and \'1\'s. Write a program to help Alice determine the length of this substring. Input: - The first line contains an integer T, the number of test cases. T test cases follow. - The first line of each test case contains a single integer N, the length of the binary string. - The second line of each test case contains the binary string S. Output: - For each test case, print the length of the longest substring that contains an equal number of \'0\'s and \'1\'s on a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 S consists of only \'0\' and \'1\' characters. SAMPLE INPUT 2 4 1100 5 10010 SAMPLE OUTPUT 4 4 Explanation: In the first test case, the entire string \\"1100\\" has an equal number of \'0\'s and \'1\'s. Therefore, the length is 4. In the second test case, the longest substring with an equal number of \'0\'s and \'1\'s is \\"1001\\", which has a length of 4.","solution":"def longest_equal_zeros_ones(T, test_cases): results = [] for N, S in test_cases: max_length = 0 balance = 0 balance_index_map = {0: -1} for i, char in enumerate(S): balance += 1 if char == \'1\' else -1 if balance in balance_index_map: max_length = max(max_length, i - balance_index_map[balance]) else: balance_index_map[balance] = i results.append(max_length) return results"},{"question":"You are given a list of points in a 2D plane, each represented by their x and y coordinates. Your task is to determine if there exists a circle that contains at least three of these points on its circumference. Note: 1. The circle is said to contain a point if the point lies exactly on its circumference. 2. Consider any three points to form a unique circle if they are not collinear. -----Input----- The first line contains an integer n, the number of points in the 2D plane. It is guaranteed that 3 leq n leq 100. The next n lines each contain two integers x_i and y_i, representing the coordinates of the i^textrm{th} point. It is guaranteed that -1000 leq x_i, y_i leq 1000. -----Output----- Print “yes” (without quotes) if there exists a circle containing at least three of the points on its circumference. Otherwise, print “no” (without quotes). -----Examples----- Sample Input 1: 4 0 0 1 0 0 1 1 1 Sample Output 1: yes Sample Input 2: 3 0 0 1 2 3 6 Sample Output 2: no","solution":"from math import isclose def check_collinear(p1, p2, p3): Check if three points are collinear. x1, y1 = p1 x2, y2 = p2 x3, y3 = p3 return (y2 - y1) * (x3 - x2) == (y3 - y2) * (x2 - x1) def find_circle(points): n = len(points) for i in range(n): for j in range(i+1, n): for k in range(j+1, n): if not check_collinear(points[i], points[j], points[k]): return \\"yes\\" return \\"no\\" def circle_from_points(n, coordinates): points = [tuple(map(int, coordinates[i].split())) for i in range(n)] return find_circle(points)"},{"question":"Given an integer N, determine whether it is possible to express N as the sum of two perfect squares. -----Constraints----- - The value of N is an integer. - 0 leq N leq 10000 -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print \\"Yes\\" if it is possible to express N as the sum of two perfect squares, otherwise print \\"No\\". -----Sample Input----- 25 -----Sample Output----- Yes Explanation: 25 can be expressed as the sum of two perfect squares: 25 = 3^2 + 4^2","solution":"def can_be_expressed_as_sum_of_two_squares(N): Determines if N can be expressed as the sum of two perfect squares. Parameters: N: An integer (0 <= N <= 10000) Returns: \'Yes\' if N can be expressed as the sum of two perfect squares, otherwise \'No\'. import math for i in range(int(math.isqrt(N)) + 1): remainder = N - i * i if remainder >= 0 and math.isqrt(remainder) ** 2 == remainder: return \\"Yes\\" return \\"No\\""},{"question":"A chef has a unique recipe for making a dish. The recipe requires N distinct ingredients, each represented by a positive integer number. However, the chef only has a collection of M distinct ingredients, also represented by positive integers, which may or may not be sufficient to create the dish. The chef wants to know if he can select a subset of ingredients from his collection that matches the exact sequence of the required ingredients for the dish. If it is possible, output \\"Yes\\", otherwise output \\"No\\". Input The first line contains an integer T, the number of test cases. Each test case contains three lines: - The first line contains two integers N and M. - The second line contains N positive integers representing the required ingredients. - The third line contains M positive integers representing available ingredients. Output For each test case, print \\"Yes\\" if the chef can successfully make the dish; otherwise, print \\"No\\". Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ M ≤ 100000 1 ≤ ingredient value ≤ 100000 SAMPLE INPUT 3 3 5 1 2 3 3 4 2 1 5 2 4 4 5 1 2 3 4 1 3 7 7 7 6 5 3 SAMPLE OUTPUT Yes No Yes Explanation Test Case #1: N=3, M=5 Required ingredients: 1, 2, 3 Available ingredients: 3, 4, 2, 1, 5 The chef can pick 1, 2, and 3 from the available ingredients in the required order, so the output is \\"Yes\\". Test Case #2: N=2, M=4 Required ingredients: 4, 5 Available ingredients: 1, 2, 3, 4 The required ingredient 5 is not in the available ingredients, so the output is \\"No\\". Test Case #3: N=1, M=3 Required ingredients: 7 Available ingredients: 7, 7, 6, 5, 3 The required ingredient 7 is present in the available ingredients, so the output is \\"Yes\\".","solution":"def can_make_dish(test_cases): results = [] for case in test_cases: N, M, required_ingredients, available_ingredients = case available_set = set(available_ingredients) # Check if all required ingredients are in the available set if all(ingredient in available_set for ingredient in required_ingredients): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given an undirected weighted graph with `n` nodes and `m` edges. Each edge has a positive integer weight. A path in this graph is a sequence of edges that connect a sequence of vertices. The cost of a path is defined as the sum of the weights of the edges used in that path. Your task is to find the shortest path between two given nodes. # Input: * The first line contains three integers `n`, `m`, and `q` (1 ≤ n ≤ 500, 1 ≤ m ≤ 10000, 1 ≤ q ≤ 1000) — the number of nodes, the number of edges, and the number of queries. * The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — which means there is an edge connecting node `u` and node `v` with weight `w`. * The next `q` lines each contain two integers `s` and `t` (1 ≤ s, t ≤ n) — the start and end nodes of a query. # Output: For each query, print the minimum cost to travel from node `s` to node `t`. If there is no path from `s` to `t`, print `-1`. # Example: Input: ``` 4 4 3 1 2 3 2 3 4 3 4 2 4 1 6 1 3 2 4 1 4 ``` Output: ``` 7 6 6 ``` # Explanation: In the graph, the edges are: * 1---3---2 * 2---4---3 * 3---2---4 * 4---6---1 For the queries: 1. The shortest path from node `1` to node `3` is `1 -> 2 -> 3` with a cost of `3 + 4 = 7`. 2. The shortest path from node `2` to node `4` is `2 -> 3 -> 4` with a cost of `4 + 2 = 6`. 3. The shortest path from node `1` to node `4` is `1 -> 2 -> 3 -> 4` with a cost of `3 + 4 + 2 = 6`. Alternatively, `1 -> 4` with a cost of `6`. Implement an efficient algorithm to handle these queries, such as Dijkstra\'s algorithm.","solution":"import heapq def dijkstra(graph, start, n): Find shortest path from start node to all other nodes using Dijkstra\'s algorithm. :param graph: adjacency list of graph where graph[u] is a list of (v, w) pairs :param start: starting node :param n: number of nodes in the graph :return: list of shortest path distances from start to each node dist = [float(\'inf\')] * (n + 1) dist[start] = 0 pq = [(0, start)] while pq: curr_dist, u = heapq.heappop(pq) if curr_dist > dist[u]: continue for v, weight in graph[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(pq, (dist[v], v)) return dist def shortest_paths(n, m, edges, queries): For each query, find the shortest path between the given nodes using Dijkstra\'s algorithm. :param n: number of nodes :param m: number of edges :param edges: list of edges where each edge is represented as (u, v, w) :param queries: list of queries where each query is represented as (s, t) :return: list of shortest path costs for each query graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for s, t in queries: dist = dijkstra(graph, s, n) if dist[t] == float(\'inf\'): results.append(-1) else: results.append(dist[t]) return results"},{"question":"Given a string consisting of lowercase and uppercase letters as well as spaces, write a function that transforms the letters of each word into alternating cases and removes any extra spaces between words. The transformation should start with an uppercase letter. Some examples to clarify: ```python alternating_case(\\" hello world \\") == \\"HeLlO WoRlD\\" alternating_case(\\"tHis is A test\\") == \\"ThIs Is A TeSt\\" alternating_case(\\"PYTHON ProGRAMMing \\") == \\"PyThOn PrOgRaMmInG\\" ``` Quick Note: The input string will not contain any special characters or punctuation, only letters and spaces. The transformed output must be a single space-separated string of words with the alternating case pattern applied.","solution":"def alternating_case(s): Transforms the letters of each word in the input string `s` into alternating cases, starting with uppercase, and removes any extra spaces between words. # Split the string into words words = s.split() transformed_words = [] for word in words: # Transform each word into alternating cases transformed_word = \'\'.join( char.lower() if i % 2 else char.upper() for i, char in enumerate(word) ) transformed_words.append(transformed_word) # Join the transformed words with a single space return \' \'.join(transformed_words)"},{"question":"Write a function that takes a string as input and returns the longest palindrome that can be built with the letters of this string. You can assume that all the characters are lowercase and the length of the string will not exceed 1,000. For example, `longest_palindrome(\\"abccccdd\\")` should return `7`, because the longest palindrome you can build is \\"dccaccd\\" which has a length of `7`. More examples in the test cases. ```if:csharp Documentation: Function: LongestPalindrome Method (String) Takes a string and returns the length of the longest palindrome that can be generated using the characters of the string. Syntax: public static int LongestPalindrome( String source ) Parameters: source Type: System.String The string to process. Return Value: Type: System.Int32 The length of the longest palindrome that can be generated using the characters of the string. ```","solution":"def longest_palindrome(s): Returns the length of the longest palindrome that can be built with the letters of the string s. from collections import Counter count = Counter(s) length = 0 odd_found = False for char_freq in count.values(): if char_freq % 2 == 0: length += char_freq else: length += char_freq - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Mahmud loves numbers and trees. His favorite activity is to find the longest path in a special kind of tree called Perfect Merkwood Tree. This tree has exactly n nodes and n-1 edges and is defined such that all of its leaves lie at the same depth. Given a Perfect Merkwood Tree with n nodes, Mahmud wants to calculate the longest path from one leaf to another. A leaf is a node with only one connecting edge. Input First line contains a single natural number n (1 ≤ n ≤ 100,000) — the number of nodes in the Perfect Merkwood Tree. Next n-1 lines contain 2 integer numbers each xi and yi (1 ≤ xi, yi ≤ n). xi and yi are two ends of an edge in the tree. Output A single integer number, the length of the longest path from one leaf to another. Examples Input 5 1 2 2 3 3 4 3 5 Output 3 Input 7 1 2 1 3 2 4 2 5 3 6 3 7 Output 4","solution":"def longest_path(n, edges): Calculates the length of the longest path in a given tree. The function expects the number of nodes \'n\' and a list of edges where each edge is represented as a tuple. from collections import defaultdict, deque if n == 1: return 0 def bfs(farthest_node): visited = [-1] * (n + 1) q = deque([farthest_node]) visited[farthest_node] = 0 max_dist_node = farthest_node while q: node = q.popleft() for neighbor in tree[node]: if visited[neighbor] == -1: visited[neighbor] = visited[node] + 1 q.append(neighbor) if visited[neighbor] > visited[max_dist_node]: max_dist_node = neighbor return max_dist_node, visited[max_dist_node] tree = defaultdict(list) for x, y in edges: tree[x].append(y) tree[y].append(x) # First BFS to find one end of the longest path farthest_node, _ = bfs(1) # Second BFS to find the length of the path from the farthest_node _, longest_path_length = bfs(farthest_node) return longest_path_length"},{"question":"In a given list of integers, a subarray is defined as a contiguous part of the array. Write a function to find the contiguous subarray within the given array which has the largest sum and return the sum along with the starting and ending indices of the subarray inclusive. Input First line of the input contains the number of elements N in the array. Second line contains N space-separated integers representing the elements of the array. Output Output the sum of the largest subarray followed by the starting and ending indices of the subarray. Constraints 1 ≤ N ≤ 1000 -100 ≤ Arr[i] ≤ 100 SAMPLE INPUT 9 -2 1 -3 4 -1 2 1 -5 4 SAMPLE OUTPUT 6 3 6","solution":"def max_subarray(arr): Returns the sum of the largest subarray, and the start and end indices of that subarray. n = len(arr) max_sum = -float(\'inf\') current_sum = 0 start = 0 end = 0 s = 0 for i in range(n): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = s end = i if current_sum < 0: current_sum = 0 s = i + 1 return max_sum, start, end # Example usage # arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] # print(max_subarray(arr)) # Output: (6, 3, 6)"},{"question":"Snuke has a fascination with necklaces made of beaded letters. He received a special type of necklace consisting solely of lowercase letters. Snuke wants to transform this necklace into a valid palindrome by removing a minimum number of characters from it. A palindrome is a word that reads the same backward as forward. Your task is to calculate the smallest number of characters that need to be removed from the necklace to make it a palindrome. Constraints * 1 ≤ length of the necklace ≤ 2000 Input The input is given from Standard Input in the following format: ``` necklace ``` Output Print the minimum number of characters that need to be removed. Examples Input ``` abdbca ``` Output ``` 1 ``` Input ``` cddpd ``` Output ``` 2 ``` Input ``` pqr ``` Output ``` 2 ```","solution":"def min_removals_to_palindrome(necklace): Returns the minimum number of character removals needed to make the given necklace a palindrome. n = len(necklace) # Helper function to find the length of the longest palindromic subsequence def longest_palindromic_subsequence(s): dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n+1): for start in range(n-length+1): end = start + length - 1 if s[start] == s[end]: dp[start][end] = 2 + dp[start+1][end-1] else: dp[start][end] = max(dp[start+1][end], dp[start][end-1]) return dp[0][n-1] lps_length = longest_palindromic_subsequence(necklace) return n - lps_length"},{"question":"In a small town, a developer is tasked with planning a safe evacuation route in case of emergency. The town is represented as a grid of size n times m with certain cells being \\"blocked\\" (represented by a `B`) and certain cells being \\"safe\\" (represented by a `S`). The developer is trying to determine if it\'s possible to find a path from the top-left corner of the grid to the bottom-right corner. A path is defined as a sequence of \\"safe\\" cells, starting from the top-left corner to the bottom-right corner, where each step moves either to the cell directly to the right or directly below the current cell. Your task is to determine whether such a path exists. -----Input----- The first line contains two integers, n (1 leq n leq 50) and m (1 leq m leq 50), the dimensions of the grid. The next n lines contain m characters each, where each character is either `S` (safe) or `B` (blocked). -----Output----- Output \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner that only passes through `S` cells. Output \\"NO\\" otherwise. -----Examples----- Sample Input 1: 3 3 S S S B S B S S S Sample Output 1: YES Sample Input 2: 3 3 S B S B B S S S S Sample Output 2: NO","solution":"def is_path_exists(n, m, grid): if grid[0][0] == \'B\' or grid[n-1][m-1] == \'B\': return \\"NO\\" # Define a helper function to check if the move is within bounds and to a \'S\' cell def is_safe(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'S\' # Use a queue for BFS from collections import deque queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" # Move right if is_safe(x, y+1) and (x, y+1) not in visited: visited.add((x, y+1)) queue.append((x, y+1)) # Move down if is_safe(x+1, y) and (x+1, y) not in visited: visited.add((x+1, y)) queue.append((x+1, y)) return \\"NO\\""},{"question":"Bruce recently discovered a new game which he finds very intriguing. The game involves a grid of size n times m and a set of commands that move a character around the grid. The grid\'s rows are numbered from 1 to n and columns are numbered from 1 to m. The game begins with the character standing in the top-left corner of the grid, which is cell (1, 1). Bruce has a sequence of commands that dictate the movement of the character. The commands are given as a string consisting of characters \'U\', \'D\', \'L\', and \'R\'. \'U\' means the character moves one cell up, \'D\' means it moves one cell down, \'L\' means it moves one cell left, and \'R\' means it moves one cell right. Bruce wants to know if the character will remain within the boundaries of the grid for every individual command in the sequence. Specifically, for each command in the sequence, the character must stay in the cell range (1 leq x leq n, 1 leq y leq m). If a move causes the character to go out of bounds, Bruce immediately stops executing the remaining commands. Help Bruce by writing a function to determine if the character remains within the boundaries of the grid after executing each command in the sequence. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. The second line of each test case contains a string s (1 le |s| le 1000) — the sequence of commands. -----Output----- For each test case, print \\"YES\\" if the character stays within the grid for the entire sequence, and \\"NO\\" if any move causes the character to go out of bounds. -----Example----- Input 3 3 3 RRDLL 2 2 RRDD 4 4 UUDLDRLR Output YES NO NO ----Note---- In the first test case, the character remains within the grid after executing the sequence \\"RRDLL\\". The final position is (1, 2). In the second test case, the character moves out of the grid after the second \'R\' command. In the third test case, the character goes out of bounds with the first \'U\' command.","solution":"def does_stay_within_grid(n, m, s): Determine if the character stays within the boundaries of the grid after executing each command in the sequence. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. s (str): Sequence of commands. Returns: str: \\"YES\\" if the character stays within the grid for the entire sequence, \\"NO\\" otherwise. x, y = 1, 1 for command in s: if command == \'U\': x -= 1 elif command == \'D\': x += 1 elif command == \'L\': y -= 1 elif command == \'R\': y += 1 if x < 1 or x > n or y < 1 or y > m: return \\"NO\\" return \\"YES\\" def main(): t = int(input().strip()) results = [] for _ in range(t): n, m = map(int, input().strip().split()) s = input().strip() result = does_stay_within_grid(n, m, s) results.append(result) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a grid that represents a game board, where each cell contains either a \'B\' (blocking element) or an \'F\' (free space). You are also given a starting position and a target position on the grid. The objective is to determine if you can reach the target position from the starting position by moving up, down, left, or right, without moving into any \'B\' cells. Write a function to determine if reaching the target position is possible. Input format: - The first line contains two integers, n and m, representing the number of rows and columns of the grid respectively. - The next n lines each contain a string of length m, representing the grid. - The following line contains four integers, sx, sy, tx, ty, representing the row and column indices of the starting position and the target position respectively (0-based index). Output format: - Print \\"yes\\" (without quotes) if it is possible to reach the target position from the starting position, otherwise print \\"no\\" (without quotes). Constraints: - 1 ≤ n, m ≤ 50 Sample Input: 5 5 FFFFF FBFFF FFFFB FFFFF FBFBF 0 0 4 4 Sample Output: yes Explanation: Starting from cell (0, 0), you can move right, down as shown in the sequence of movements (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (3,4) -> (4,4) to reach the target position (4, 4). Therefore, the output is \\"yes\\".","solution":"def can_reach(n, m, grid, sx, sy, tx, ty): if grid[sx][sy] == \'B\' or grid[tx][ty] == \'B\': return \\"no\\" def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'F\' from collections import deque queue = deque([(sx, sy)]) visited = set() visited.add((sx, sy)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y = queue.popleft() if (x, y) == (tx, ty): return \\"yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"no\\""},{"question":"Write a function check_balance(s) that accepts a string s consisting of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. The function should return a boolean indicating whether the parentheses, braces, and brackets are balanced and correctly nested. Example 1: Input: s = \\"(){}[]\\" Output: True Explanation: All types of brackets are correctly paired and nested. Example 2: Input: s = \\"([)]\\" Output: False Explanation: The inner brackets are not correctly nested. Your Task: You don\'t need to read or print anything. Your task is to complete the function check_balance() which takes s as input and returns a boolean indicating whether the parentheses, braces, and brackets in the string are balanced. Expected Time Complexity: O(|s|) Expected Space Complexity: O(|s|) Constraints: 1 <= |s| <= 1000","solution":"def check_balance(s): Returns True if the string `s` has balanced and correctly nested parentheses, braces, and brackets. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket: if not stack or stack.pop() != matching_bracket[char]: return False else: # Invalid character found return False return not stack"},{"question":"Given a string consisting of lowercase and uppercase alphabets, output the length of the longest subsequence that can be found both as a prefix and as a suffix in the given string. Note that the subsequence does not need to be contiguous. Implement the function `longestPrefixSuffix(s: str) -> int` that takes a string `s` as its parameter and returns an integer representing the length of the longest common subsequence that appears as a prefix and a suffix in the string `s`. # Examples ``` longestPrefixSuffix(\\"abca\\") == 1 longestPrefixSuffix(\\"abcab\\") == 2 longestPrefixSuffix(\\"aaaa\\") == 3 longestPrefixSuffix(\\"abacabadabacaba\\") == 7 ``` # Explanation - In the first example, the longest subsequence that is both a prefix and a suffix is \\"a\\". - In the second example, the longest subsequence that is both a prefix and a suffix is \\"ab\\". - In the third example, the longest subsequence that is both a prefix and a suffix is \\"aaa\\". - In the fourth example, the longest subsequence that is both a prefix and a suffix is \\"abacaba\\". Your function should aim to handle larger strings efficiently, keeping in mind the constraints and potential edge cases such as duplicate characters and varying string lengths.","solution":"def longestPrefixSuffix(s: str) -> int: Returns the length of the longest subsequence that is both prefix and suffix in the given string \'s\'. n = len(s) lps = [0] * n length = 0 i = 1 while i < n: if s[i] == s[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps[-1]"},{"question":"You are given a list of N integers. Your task is to find the length of the longest subsequence which is strictly increasing and consists of prime numbers only. Note: A subsequence is derived from the list by deleting some or no elements without changing the order of the remaining elements. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N — the number of integers in the list. - The second line of each test case contains N space-separated integers representing the list. ------ Output Format ------ For each test case, output the length of the longest strictly increasing subsequence of prime numbers. ------ Constraints ------ 1 leq T leq 10 1 leq N leq 1000 1 leq text{list}[i] leq 10^6 ------ Sample Input 1 ------ 2 5 7 3 5 2 11 4 4 6 8 10 ------ Sample Output 1 ------ 3 0 ------ Explanation 1 ------ Test case 1: The prime numbers in the list are [7, 3, 5, 2, 11]. The longest strictly increasing subsequence of prime numbers is [3, 5, 11] which has length 3. Test case 2: There are no prime numbers in the list, thus the length of the longest strictly increasing subsequence is 0.","solution":"from bisect import bisect_left def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False limit = int(n**0.5) + 1 for i in range(3, limit, 2): if n % i == 0: return False return True def longest_increasing_prime_subsequence(arr): Find the length of the longest strictly increasing subsequence of prime numbers. primes = [num for num in arr if is_prime(num)] if not primes: # No prime numbers in the list return 0 # Use dynamic programming with binary search to find the length of the LIS dp = [] for prime in primes: pos = bisect_left(dp, prime) if pos == len(dp): dp.append(prime) else: dp[pos] = prime return len(dp) def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] result = longest_increasing_prime_subsequence(arr) results.append(result) return results # Example function to demonstrate how to pass test cases def example_usage(): t = 2 test_cases = [ (5, [7, 3, 5, 2, 11]), (4, [4, 6, 8, 10]) ] return process_test_cases(t, test_cases)"},{"question":"Given an array of integers nums where nums[i] represents the number of candies that the i-th child has, and an integer extraCandies, where extraCandies represents the number of extra candies you have. For each child, check if they can have the greatest number of candies among all the children if you give them all of the extraCandies. Return a boolean list result where result[i] is true if, after giving the i-th child all the extraCandies, they will have the greatest number of candies among all the children, or false otherwise. Example 1: Input: nums = [2, 3, 5, 1, 3], extraCandies = 3 Output: [true, true, true, false, true] Explanation: If you give all extraCandies to: - Child 1: 2 + 3 = 5 candies (the greatest amount of candies) - Child 2: 3 + 3 = 6 candies (the greatest amount of candies) - Child 3: 5 + 3 = 8 candies (the greatest amount of candies) - Child 4: 1 + 3 = 4 candies (not the greatest amount of candies) - Child 5: 3 + 3 = 6 candies (the greatest amount of candies) Example 2: Input: nums = [4, 2, 1, 1, 2], extraCandies = 1 Output: [true, false, false, false, false] Explanation: Only Child 1 will have the greatest number of candies after receiving 1 extra candy. Your Task: You don\'t need to read input or print anything. Complete the function `canHaveGreatestCandies(nums, extraCandies)` which takes a list of integers `nums` and an integer `extraCandies` as input parameters, and returns a list of booleans. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ nums.length ≤ 100 1 ≤ nums[i] ≤ 100 1 ≤ extraCandies ≤ 50","solution":"def canHaveGreatestCandies(nums, extraCandies): Returns a list of booleans indicating if each child can have the greatest number of candies among all children after receiving extraCandies. max_candies = max(nums) return [(candy + extraCandies) >= max_candies for candy in nums]"},{"question":"A logistics company has m trucks that need to deliver packages from a warehouse to n different locations in a city. Each truck has a maximum capacity of k packages, and each location requires a certain number of packages. Your task is to determine if it is possible to deliver the required number of packages to all locations using the available trucks. Input: The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three space-separated integers m, n, and k, denoting the number of trucks, number of locations, and the maximum capacity of each truck respectively. The next line contains n space-separated integers, where the i-th integer represents the number of packages required at the i-th location. Output: Output \\"YES\\" if it is possible to deliver all the required packages using the available trucks, otherwise output \\"NO\\". Constraints: 1<=t<=10 1<=m<=1000 1<=n<=1000 1<=k<=10000 1<=number of packages at each location<=10000 Example: Input: 2 3 4 10 5 10 7 6 2 3 15 20 15 5 Output: YES NO Explanation: For the first test case, the total packages required are 5+10+7+6 = 28. With 3 trucks each having a capacity of 10, the total available capacity is 30, which is enough to deliver all packages. For the second test case, the total packages required are 20+15+5 = 40. With 2 trucks each having a capacity of 15, the total available capacity is 30, which is not enough to deliver all packages. Hence, the output is \\"NO\\".","solution":"def can_deliver_packages(t, test_cases): results = [] for i in range(t): m, n, k = test_cases[i][0] packages = test_cases[i][1] total_packages = sum(packages) total_capacity = m * k if total_capacity >= total_packages: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Min Stack Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. Implement the following API: - `push(x)` - Pushes element x onto the stack. - `pop()` - Removes the element on the top of the stack. - `top()` - Gets the top element of the stack. - `getMin()` - Retrieves the minimum element in the stack. Constraints: - Operations must have a time complexity of O(1). - All operations should be implemented efficiently without using extra space besides the stack itself. Example usage: ```python minStack = MinStack() minStack.push(-2) minStack.push(0) minStack.push(-3) assert minStack.getMin() == -3 # Returns -3 minStack.pop() assert minStack.top() == 0 # Returns 0 assert minStack.getMin() == -2 # Returns -2 ``` Hint: - Consider using an additional stack to keep track of the minimum values as elements are pushed and popped from the primary stack.","solution":"class MinStack: def __init__(self): Initialize the data structure. self.stack = [] self.min_stack = [] def push(self, x: int) -> None: Push element x onto stack. self.stack.append(x) if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) def pop(self) -> None: Removes the element on top of the stack. if self.stack: top_element = self.stack.pop() if top_element == self.min_stack[-1]: self.min_stack.pop() def top(self) -> int: Get the top element. if self.stack: return self.stack[-1] def getMin(self) -> int: Retrieve the minimum element in the stack. if self.min_stack: return self.min_stack[-1]"},{"question":"You are given a set of integers A = [a_1, a_2, ldots, a_n]. Your task is to find the length of the longest arithmetic subsequence in A. An arithmetic subsequence is a subsequence of A where the difference between consecutive elements is the same. For example, in the sequence A = [3, 6, 9, 12], the subsequence [3, 6, 9, 12] is an arithmetic subsequence with a common difference of 3. Write a function that takes as input a list of integers and returns the length of the longest arithmetic subsequence. Your solution should have a time complexity better than O(n^3). # Input: - The first line contains an integer n (1 le n le 2000) — the number of elements in the array A. - The second line contains n integers a_1, a_2, ldots, a_n (-10^6 le a_i le 10^6) — the elements of array A. # Output: - Output a single integer — the length of the longest arithmetic subsequence. # Example: Input: ``` 6 3 6 9 12 15 18 ``` Output: ``` 6 ``` Input: ``` 7 1 7 10 15 27 29 33 ``` Output: ``` 3 ```","solution":"def longest_arith_seq_length(A): Returns the length of the longest arithmetic subsequence in the list A. if not A: return 0 n = len(A) dp = [{} for _ in range(n)] max_len = 1 for i in range(1, n): for j in range(i): diff = A[i] - A[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_len = max(max_len, dp[i][diff]) return max_len"},{"question":"Your task is to write a function that takes an integer array and returns the \\"persistence\\" of that number. The persistence of a number is the number of times you must multiply the digits in the number until you reach a single digit. For example, the persistence of 39 is three because 3*9=27, 2*7=14, and 1*4=4. Likewise, the persistence of 999 is four, and the persistence of 4 is zero because 4 is already a single digit. If the array is empty, return an empty array. Function Signature ```python def persistence(arr: List[int]) -> List[int]: pass ``` Example: ``` persistence([39, 999, 4]) -> [3, 4, 0] persistence([25, 19, 77, 0]) -> [2, 2, 4, 0] persistence([]) -> [] ```","solution":"from typing import List def digit_product(n: int) -> int: result = 1 while n > 0: result *= n % 10 n //= 10 return result def persistence(arr: List[int]) -> List[int]: if not arr: return [] def calculate_persistence(n: int) -> int: count = 0 while n >= 10: n = digit_product(n) count += 1 return count return [calculate_persistence(num) for num in arr]"},{"question":"Nina loves balanced parentheses strings. A balanced parentheses string is a string containing only the characters `(` and `)`, and it satisfies the following conditions: 1. An empty string is balanced. 2. If `S` is a balanced string, then `()` + S and S + `()` are balanced strings. 3. If `S` and `T` are balanced strings, then S + T is a balanced string. Given a balanced parentheses string, Nina wants to generate a new balanced parentheses string by removing the minimum number of parentheses such that the resulting string has equal number of `(` and `)` at any prefix. -----Input----- - The first line contains a single integer T, the number of test cases. - For each test case, there is a single line containing a balanced parentheses string S. -----Output----- - For each test case, output the resulting balanced parentheses string after removing the minimum number of parentheses. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ Length of S ≤ 100000 -----Subtasks----- - Subtask 1: (20 points) 1 ≤ Length of S ≤ 100 - Subtask 2: (30 points) 1 ≤ Length of S ≤ 1000 - Subtask 3: (50 points) 1 ≤ Length of S ≤ 100000 -----Example----- Input: 2 ()() (())) Output: ()() ()) -----Explanation----- Example case 1: The string `()()` is already balanced with equal number of `(` and `)` at any prefix. Example case 2: The string `(()))` can be transformed to `(())` by removing the last `)` to satisfy the condition.","solution":"def min_remove_to_balance_parentheses(s): Remove the minimum number of parentheses to ensure every prefix has an equal number of \'(\' and \')\'. :param s: String of balanced parentheses. :return: Resulting balanced parentheses string. left_count, right_count = 0, 0 result = [] # First pass: Remove excess \')\' for char in s: if char == \'(\': left_count += 1 elif char == \')\': if right_count < left_count: right_count += 1 else: continue result.append(char) left_count, right_count = 0, 0 final_result = [] # Second pass: Remove excess \'(\' from the right for char in reversed(result): if char == \')\': right_count += 1 elif char == \'(\': if left_count < right_count: left_count += 1 else: continue final_result.append(char) return \'\'.join(reversed(final_result)) def process_test_cases(T, test_cases): results = [] for case in test_cases: results.append(min_remove_to_balance_parentheses(case)) return results"},{"question":"Jacob is creating a circular array of size N with integers from 1 to N, where each integer appears exactly once. He is interested in identifying how many contiguous subarrays of any length form a strictly increasing sequence. Write a program to determine the total number of such subarrays in Jacob\'s circular array. A *circular array* means the end of the array wraps around to the start. For example, if the array is [1, 2, 3], the subarrays include not only [1], [2], [3], [1, 2], [2, 3], [3, 1], but also [1, 2, 3] and [2, 3, 1], etc. A *strictly increasing* sequence is a sequence where each subsequent element is greater than the previous one. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case contains a single integer N, the size of Jacob\'s circular array. ------ Output Format ------ For each test case, print in a single line, the total number of strictly increasing contiguous subarrays in Jacob\'s circular array. ------ Constraints ------ 1 leq T leq 1000 1 leq N leq 10^{5} The sum of all N values across all test cases will not exceed 10^{6}. ----- Sample Input ----- 3 2 3 4 ----- Sample Output ----- 3 6 10 ----- Explanation ----- Test Case 1: The array is [1, 2]. The strictly increasing contiguous subarrays are [1], [2], and [1, 2], which makes 3 in total. Test Case 2: The array is [1, 2, 3]. The strictly increasing contiguous subarrays are [1], [2], [3], [1, 2], [2, 3], and [1, 2, 3], which makes 6 in total. Test Case 3: The array is [1, 2, 3, 4]. In total, there are 10 strictly increasing contiguous subarrays: [1], [2], [3], [4], [1, 2], [2, 3], [3, 4], [1, 2, 3], [2, 3, 4], and [1, 2, 3, 4].","solution":"def count_strictly_increasing_subarrays(N): For a circular array of size N with integers from 1 to N, this function returns the number of contiguous strictly increasing subarrays. return N * (N + 1) // 2 def count_strictly_increasing_subarrays_multiple_cases(T, test_cases): Processes multiple test cases and returns the results. results = [] for N in test_cases: results.append(count_strictly_increasing_subarrays(N)) return results"},{"question":"Given a rectangular matrix `M` of size `N x M` filled with non-negative integers, you need to find the maximum sum of elements in any rectangular submatrix of size `K x L` within `M`. A rectangular submatrix of size `K x L` of a matrix `M` is defined as a submatrix that consists of `K` rows and `L` columns. You need to find the sum of the elements of all such submatrices and return the largest sum found. ------ Input: ------ The first line contains integers `N`, `M`, `K`, and `L` where: * `N` is the number of rows in the matrix. * `M` is the number of columns in the matrix. * `K` is the number of rows in the submatrix. * `L` is the number of columns in the submatrix. Each of the next `N` lines contains `M` space-separated integers representing the elements of the matrix. ------ Output: ------ Print a single integer, which is the maximum sum of elements in any `K x L` submatrix. ------ Constraints ------ * 1 ≤ N, M ≤ 500 * 1 ≤ K ≤ N * 1 ≤ L ≤ M * 0 ≤ A_{ij} ≤ 10^4, where A_{ij} is the element at row i and column j in the matrix. ----- Sample Input 1 ------ ``` 4 5 2 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ``` ----- Sample Output 1 ------ ``` 99 ``` ----- Explanation 1 ------ Here, the `2 x 3` submatrix with the maximum sum is: ``` 14 15 19 20 ``` And its sum is 99.","solution":"def max_sum_submatrix(matrix, N, M, K, L): # Initialize the prefix sum array prefix = [[0] * (M + 1) for _ in range(N + 1)] # Calculate the prefix sums for i in range(1, N + 1): for j in range(1, M + 1): prefix[i][j] = matrix[i-1][j-1] + prefix[i-1][j] + prefix[i][j-1] - prefix[i-1][j-1] max_sum = 0 # Iterate over every possible KxL submatrix for i in range(K, N + 1): for j in range(L, M + 1): submatrix_sum = (prefix[i][j] - prefix[i-K][j] - prefix[i][j-L] + prefix[i-K][j-L]) max_sum = max(max_sum, submatrix_sum) return max_sum # Example usage: # matrix = [ # [1, 2, 3, 4, 5], # [6, 7, 8, 9, 10], # [11, 12, 13, 14, 15], # [16, 17, 18, 19, 20] # ] # N, M, K, L = 4, 5, 2, 3 # print(max_sum_submatrix(matrix, N, M, K, L)) # Output should be 99"},{"question":"Samantha is organizing a game night and has planned a scavenger hunt for her friends. She has a list of items that participants need to find. Each item has a specific point value associated with it, and she wants to make sure the total points collected by any participant do not exceed a certain limit. However, Samantha also wants to maximize the number of items that can be found and collected by each participant without exceeding this limit. You are to write a program to help Samantha determine the maximum number of items a participant can collect without the total points exceeding the limit. Input The input begins with a line containing two integers N and L (1 ≤ N ≤ 1000, 1 ≤ L ≤ 10^5), representing the number of items and the maximum allowable points a participant can collect, respectively. The next line contains N integers representing the point values of the items. Each point value is between 1 and 10^4. Output Output a single integer representing the maximum number of items a participant can collect without the total points exceeding the specified limit. Examples Input 5 10 1 2 3 8 5 Output 3 Input 6 15 5 7 6 1 4 3 Output 4 Input 3 7 2 3 6 Output 2 Note Explanation for the sample input/output #1 The participant can collect items with point values 1, 2, and 3, which sums up to 1+2+3=6 points, and thus 3 items which is the maximum under the limit of 10 points. Explanation for the sample input/output #2 The participant can collect items with point values 1, 4, 5, and 3, which sums up to 1+4+5+3=13 points, and thus 4 items which is the maximum under the limit of 15 points.","solution":"def max_items(N, L, points): Returns the maximum number of items that can be collected without exceeding the limit L. points.sort() total_points = 0 item_count = 0 for point in points: if total_points + point <= L: total_points += point item_count += 1 else: break return item_count # Example usage: # N, L = 5, 10 # points = [1, 2, 3, 8, 5] # print(max_items(N, L, points)) # Output: 3"},{"question":"In a country where elections are held for multiple constituencies, each candidate\'s campaign strategy involves visiting households in their constituency. Candidates aim to maximize their campaign impact by targeting streets with specific house numbers. Assume the streets are labeled from 1 to n, and each street has houses numbered from 1 to m. Define a campaign plan as a list of tuples where each tuple represents a street number and the specific house number(s) to be targeted on that street. Your task is to determine the maximum number of unique house visits across all streets a candidate can make, given their campaign plan. -----Input----- The first line contains two integers n and m, the number of streets and the number of houses per street respectively, where 1 leq n, m leq 100. The second line contains an integer k, the number of tuples in the campaign plan, where 1 leq k leq 500. The next k lines each contain a tuple (a pair of integers) representing a street number and house number to be targeted, where 1 leq street number leq n and 1 leq house number leq m. -----Output----- Output one line with the maximum number of unique house visits across all streets a candidate can make based on the provided campaign plan. -----Examples----- Sample Input: 3 5 4 1 2 1 3 2 1 3 5 Sample Output: 4 Explanation: The candidate has campaign plans for 3 streets (numbered 1 to 3), and each street has 5 houses (numbered 1 to 5). The campaign plan targets the following houses: house 2 and 3 on street 1, house 1 on street 2, and house 5 on street 3. The candidate can visit all 4 unique houses based on the campaign plan.","solution":"def max_unique_house_visits(n, m, k, campaign_plan): Determines the maximum number of unique house visits across all streets based on the campaign plan. Parameters: n (int): Number of streets m (int): Number of houses per street k (int): Number of tuples in the campaign plan campaign_plan (List[Tuple[int, int]]): List of tuples where each tuple represents a street number and a house number to be targeted Returns: int: The maximum number of unique house visits # Use a set to track unique house visits unique_visits = set() # Iterate over the campaign plan to collect unique visits for street, house in campaign_plan: unique_visits.add((street, house)) # The result is the number of unique house visits return len(unique_visits)"},{"question":"Write a function `anagram_checker` that takes two strings as input and returns `True` if the two strings are anagrams of each other, and `False` otherwise. The comparison should be case-insensitive and should ignore any spaces or punctuation. ```python def anagram_checker(str1, str2): # Implement your function here pass # Example: # anagram_checker(\\"Astronomer\\", \\"Moon starer\\") should return True # anagram_checker(\\"Hello!\\", \\"Oleh.\\") should return False ```","solution":"import string def anagram_checker(str1, str2): Checks if two strings are anagrams of each other. This comparison is case-insensitive and ignores spaces and punctuation. # Helper function to clean and sort the string def clean_string(s): translator = str.maketrans(\'\', \'\', string.punctuation + string.whitespace) return \'\'.join(sorted(s.translate(translator).lower())) return clean_string(str1) == clean_string(str2)"},{"question":"In a land of extraordinary patterns, there lies a grid-shaped garden divided into n times n cells. Each cell contains a unique flower which can belong to one of k different types. You are tasked with determining the number of distinct flower types present within a certain subgrid of the garden. The garden\'s grid configuration is represented by a 2D array, where the value of each cell indicates the type of flower planted there. There will be multiple subgrid queries for which you need to determine how many unique flower types exist in the specified subgrid. Input Format The first line contains two space-separated integers n (the size of the garden grid) and k (the number of distinct flower types). The next n lines contain n space-separated integers each, representing a row of the garden\'s grid. Each integer denotes the type of flower in that cell. The next line contains a single integer q (the number of queries). Each of the following q lines contains four space-separated integers x_1, y_1, x_2, y_2 specifying the top-left (x_1, y_1) and bottom-right (x_2,y_2) coordinates of a subgrid (1-indexed). Constraints 2 leq n leq 1000 1 leq k leq 100 1 leq q leq 10^4 1 leq x_1, x_2, y_1, y_2 leq n x_1 leq x_2 y_1 leq y_2 1leq text{flower type} leq k Output Format For each query, print a single integer denoting the number of unique flower types in the specified subgrid. Sample Input 5 3 1 2 1 3 2 3 3 2 1 1 1 2 3 2 3 3 1 1 2 2 2 3 2 2 1 3 1 1 3 3 2 2 5 5 1 2 4 4 Sample Output 3 3 3 Explanation For the first query, the subgrid is the upper left 3x3 part of the garden. The unique flower types in this subgrid are 1, 2, and 3, hence the answer is 3. For the second query, examining the subgrid from (2,2) to (5,5), the unique flower types present are again 1, 2, and 3, resulting in the answer 3. The third query\'s subgrid spans from (1,2) to (4,4) containing the unique flower types 1, 2, and 3, so the output is 3.","solution":"def unique_flower_types(n, k, garden, queries): results = [] for query in queries: x1, y1, x2, y2 = query flower_set = set() for i in range(x1-1, x2): for j in range(y1-1, y2): flower_set.add(garden[i][j]) results.append(len(flower_set)) return results"},{"question":"A company wants to reward its employees based on their performance scores. Each employee receives a score between 0 and 100 inclusive. Your task is to determine the bonus each employee will get based on the following rules: - If the score is from 90 to 100 (inclusive), the bonus is 1000. - If the score is from 75 to 89 (inclusive), the bonus is 500. - If the score is from 50 to 74 (inclusive), the bonus is 250. - If the score is below 50, there is no bonus. Write a program that reads employee scores and outputs the corresponding bonuses. INPUT The first line of input gives T, the number of test cases. T lines follow, each line contains one integer score. OUTPUT For every test case, print the bonus amount based on the employee\'s score. CONSTRAINTS Score will be between 0 and 100, inclusive. 1 ≤ T ≤ 100 SAMPLE INPUT 3 95 70 45 SAMPLE OUTPUT 1000 250 0 Explanation CASE 1: The score is 95, which falls in the 90 to 100 range, thus the bonus is 1000. CASE 2: The score is 70, which falls in the 50 to 74 range, so the bonus is 250. CASE 3: The score is 45, which is below 50, hence there is no bonus.","solution":"def calculate_bonus(score): Calculates the bonus based on the employee\'s score. Args: - score (int): The performance score of the employee. Returns: - int: The bonus amount. if 90 <= score <= 100: return 1000 elif 75 <= score <= 89: return 500 elif 50 <= score <= 74: return 250 else: return 0 def process_scores(scores): Processes a list of scores and returns the corresponding bonuses. Args: - scores (list of int): A list of employee performance scores. Returns: - list of int: A list of bonuses corresponding to the scores. return [calculate_bonus(score) for score in scores]"},{"question":"You are given a list of tasks, each with a start time and an end time. Your goal is to execute as many non-overlapping tasks as possible. A task can only be started once the previous task has finished. Write a program to determine the maximum number of non-overlapping tasks that can be executed. -----Constraints----- - 1 leq N leq 100000 - 0 leq start_i < end_i leq 10^9 -----Input----- The input is given from Standard Input in the following format: N start_1 end_1 start_2 end_2 : start_N end_N -----Output----- Print a single integer representing the maximum number of non-overlapping tasks that can be executed. -----Sample Input----- 3 1 3 2 5 4 6 -----Sample Output----- 2 In the example, the optimal way to select the tasks is to choose the first task (which ends at time 3) and the third task (which starts at time 4).","solution":"def max_non_overlapping_tasks(tasks): Determines the maximum number of non-overlapping tasks that can be executed. Each task is represented as a tuple (start_time, end_time). :param tasks: List of tuples [(start_time, end_time), ...] :return: Maximum number of non-overlapping tasks # Sort tasks based on their end time tasks.sort(key=lambda x: x[1]) # Initialize variables max_tasks = 0 current_end = 0 # Iterate over sorted tasks for start, end in tasks: if start >= current_end: max_tasks += 1 current_end = end return max_tasks if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) tasks = [(int(data[i]), int(data[i+1])) for i in range(1, len(data), 2)] print(max_non_overlapping_tasks(tasks))"},{"question":"Task Complete the function that receives a matrix of integers (`matrix`) as an argument and returns the matrix with all elements transposed. Transpose of a matrix is formed by turning all rows of the original matrix into columns and vice versa. You can consider the matrix to be rectangular. # Let\'s break the problem down: Given a matrix of size `m x n`, the transpose of this matrix, `T`, will be of size `n x m`, where the value of `T[j][i]` is equal to `matrix[i][j]` for `0 ≤ i < m` and `0 ≤ j < n`. For example, 1. If the given matrix is: ``` [ [1, 2, 3], [4, 5, 6] ] ``` The transposed matrix should be: ``` [ [1, 4], [2, 5], [3, 6] ] ``` 2. If the given matrix is: ``` [ [1, 2], [3, 4], [5, 6] ] ``` The transposed matrix should be: ``` [ [1, 3, 5], [2, 4, 6] ] ``` You need to write code that converts any given matrix in this way. Examples: ``` transpose([ [1, 2, 3], [4, 5, 6] ]) => [ [1, 4], [2, 5], [3, 6] ] ``` ``` transpose([ [7, 8, 9], [3, 2, 1], [6, 5, 4] ]) => [ [7, 3, 6], [8, 2, 5], [9, 1, 4] ] ``` Good luck!","solution":"def transpose(matrix): Returns the transpose of the given matrix. :param matrix: List[List[int]] :return: List[List[int]] return list(map(list, zip(*matrix)))"},{"question":"A sorting algorithm called \\"Happy Sort\\" works by picking a non-decreasing subsequence from the array, removing it, and then appending it to the sorted portion of a new array. This process repeats until the original array is empty. Write a function `happy_sort(arr)` that takes a list of integers `arr` and returns a new list sorted in non-decreasing order using the \\"Happy Sort\\" method. Input - A list of integers `arr` (1 ≤ len(arr) ≤ 1000, -10^9 ≤ arr[i] ≤ 10^9). Output - A list of integers sorted in non-decreasing order. Example Input ``` [3, 1, 4, 1, 5, 9, 2, 6, 5] ``` Output ``` [1, 1, 2, 3, 4, 5, 5, 6, 9] ``` Explanation In the first step, pick the subsequence [3, 4, 5, 9], remove it and then append it to the sorted part, resulting in [3, 4, 5, 9] and [1, 1, 2, 6, 5]. In the second step, from [1, 1, 2, 6, 5] pick [1, 1, 2], remove and append, getting [3, 4, 5, 9, 1, 1, 2] and [6, 5]. In the third step, from [6, 5] pick [6] making it [3, 4, 5, 9, 1, 1, 2, 6] and [5]. Finally, append [5] to complete the sort giving [1, 1, 2, 3, 4, 5, 5, 6, 9].","solution":"def happy_sort(arr): sorted_arr = [] while arr: subsequence = [arr[0]] # Find the non-decreasing subsequence for i in range(1, len(arr)): if arr[i] >= subsequence[-1]: subsequence.append(arr[i]) # Append subsequence to sorted_arr sorted_arr += subsequence # Remove the subsequence from arr arr = [x for x in arr if x not in subsequence or subsequence.remove(x)] sorted_arr.sort() return sorted_arr"},{"question":"Given a linked list, rotate the list to the right by k places, where k is a non-negative integer. The structure of the linked list should remain intact, only the positions of the nodes should change. Rotation can be explained as removing the last node of the list and adding it to the beginning of the list. This operation is performed k times. Example 1: Input: 1 -> 2 -> 3 -> 4 -> 5, k = 2 Output: 4 -> 5 -> 1 -> 2 -> 3 Explanation: - Remove last node \'5\' and add it to the beginning: 5 -> 1 -> 2 -> 3 -> 4 - Remove last node \'4\' and add it to the beginning: 4 -> 5 -> 1 -> 2 -> 3 Example 2: Input: 0 -> 1 -> 2, k = 4 Output: 2 -> 0 -> 1 Explanation: k is 4, which is more than the length of the list (length is 3). In such cases, k is modded by the length of the list, so k becomes 4 % 3 = 1. - Remove last node \'2\' and add it to the beginning: 2 -> 0 -> 1 Note: - The given k is in the range [0, 10^5]. - The linked list can have up to 10^5 nodes.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head, k): if not head or not head.next or k == 0: return head # Compute the length of the list old_tail = head length = 1 while old_tail.next: old_tail = old_tail.next length += 1 # Connect the tail with the head to form a circular list old_tail.next = head # Find the new tail: (length - k % length - 1)th node # and the new head: (length - k % length)th node new_tail = head steps_to_new_head = length - k % length - 1 for i in range(steps_to_new_head): new_tail = new_tail.next new_head = new_tail.next # Break the circle new_tail.next = None return new_head"},{"question":"You are given a list of integers and a target integer k. Your task is to determine if there are two distinct indices i and j in the list such that the sum of the integers at these indices is equal to k. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of integers in the list. The second line contains n integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9) — the integers in the list. The third line contains a single integer k (-10^{18} le k le 10^{18}) — the target sum. -----Output----- Print \\"YES\\" if there exist two distinct indices i and j such that a_i + a_j = k. Otherwise, print \\"NO\\". You may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer). -----Examples----- Input 5 1 4 45 6 10 16 Output YES Input 4 1 2 3 9 8 Output NO Input 6 -1 -2 -3 -4 -5 -6 -8 Output YES Input 3 4 5 1 10 Output NO -----Explanation----- In the first example, the integers 6 and 10 add up to 16, so the output is \\"YES\\". In the second example, no two integers add up to 8, so the output is \\"NO\\". In the third example, the integers -2 and -6 add up to -8, so the output is \\"YES\\". In the fourth example, no two integers add up to 10, so the output is \\"NO\\".","solution":"def check_sum_exists(n, arr, k): Given a list of integers and a target integer k, return whether there are two distinct indices i and j in the list such that the sum of the integers at these indices is equal to k. seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"You are given a list of names, each name consisting of alphabetic characters (both lowercase and uppercase) and a middle initial represented by a single uppercase letter followed by a period (e.g., \\"John Q. Public\\"). Your task is to sort the names primarily by their last names in ascending order, and if two names have the same last name, then by their first names in ascending order. If any name includes a middle initial, you should ignore it when comparing and sorting the names. -----Input----- The input consists of multiple lines: - The first line of the input contains an integer n (1 ≤ n ≤ 100), the number of names. - The next n lines each contain a name. Each name consists of a first name, optionally a middle initial, and a last name. The length of each name will not exceed 100 characters. -----Output----- Output the sorted list of names, each name on a new line. -----Example----- Input 5 John Q. Public James A. Smith John A. Adams Alice B. Cooper Zara T. Smith Output John A. Adams Alice B. Cooper John Q. Public James A. Smith Zara T. Smith -----Note----- In the example, the names are first sorted by their last names: Adams, Cooper, Public, Smith, Smith. Since there are two \\"Smith\\", they are further sorted by their first names, resulting in: James A. Smith and Zara T. Smith. Make sure to ignore the middle initial while sorting the names.","solution":"def sort_names(n, names): Sorts names primarily by their last names in ascending order, and if two names have the same last name, by their first names in ascending order. Middle initials, if any, are ignored during the sort. Args: n (int): Number of names. names (list of str): List of names to be sorted. Returns: list of str: Sorted list of names. def get_sort_key(name): parts = name.split() first_name = parts[0] middle_initial = parts[1] if len(parts) == 3 else \'\' last_name = parts[-1] return (last_name, first_name) sorted_names = sorted(names, key=get_sort_key) return sorted_names"},{"question":"In a faraway kingdom, there is a popular game called \\"Magical Squares\\". The game involves a square matrix of size n x n, where each element of the matrix is a non-negative integer. The objective of the game is to calculate the \\"magical power\\" of the matrix. The magical power is defined as the sum of the maximum values in each row and each column of the matrix. You are given the size of the matrix `n` and the matrix itself. Your task is to write a program that calculates and prints the magical power of this matrix. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the size of the square matrix. Each of the next n lines contains n non-negative integers (0 ≤ element ≤ 1000) separated by spaces — the elements of the matrix. Output Output a single integer — the magical power of the matrix. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 40 Note For the given example, the maximum values of each row are 3, 6, 9, and the maximum values of each column are 7, 8, 9. The sum of these values is 3 + 6 + 9 + 7 + 8 + 9 = 42.","solution":"def calculate_magical_power(matrix): n = len(matrix) max_row_values = [max(row) for row in matrix] max_column_values = [max(matrix[i][j] for i in range(n)) for j in range(n)] magical_power = sum(max_row_values) + sum(max_column_values) return magical_power"},{"question":"Sarah is participating in a programming competition where one of the tasks is to analyze a series of stock prices over multiple days and determine the maximum profit she can achieve through a single buy-sell transaction. Each day, Sarah can either buy one unit of the stock, sell the stock she holds (if she already bought it before), or do nothing. She needs to maximize her profit by choosing the best day to buy and the best day to sell. Given a list of stock prices over n days, help Sarah calculate the maximum possible profit she can achieve by executing exactly one buy-sell transaction. If no profit is possible, return 0. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of days for which stock prices are given. The second line contains n space-separated integers, where the i-th integer (1 ≤ p_{i} ≤ 10^5) represents the stock price on the i-th day. -----Output----- Print a single integer — the maximum profit Sarah can achieve through a single buy-sell transaction. If it is not possible to achieve any profit, print 0. -----Examples----- Input 5 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Input 6 1 2 3 4 5 6 Output 5 -----Note----- In the first sample, Sarah can buy on the 2nd day (price = 1) and sell on the 5th day (price = 6). Thus, the maximum profit equals 6 - 1 = 5. In the second sample, the stock prices are continuously decreasing, so no profit can be made, and the output is 0. In the third sample, Sarah can buy on the 1st day (price = 1) and sell on the last day (price = 6). Thus, the maximum profit equals 6 - 1 = 5.","solution":"def max_profit(n, prices): Calculate the maximum profit obtainable through a single buy-sell transaction. :param n: Integer, number of days. :param prices: List of integers, stock prices for each day. :return: Integer, maximum profit. if n == 0: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Encrypting and Decrypting Messages with Caesar Cipher Caesar Cipher is one of the simplest and most widely known encryption techniques. In this method, each letter in the plaintext is shifted a certain number of places down or up the alphabet. Let\'s implement both encryption and decryption using the Caesar Cipher technique: **Step 1: Encryption** You will receive a string containing the message to be encrypted and an integer representing the shift value. Your task is to encrypt the message by shifting each letter by the given integer value. - If the shift takes you past the end of the alphabet, just rotate back to the start of the alphabet. - Only alphabetic characters should be shifted; numbers, symbols, and spaces will remain unchanged. - The string can contain both uppercase and lowercase letters, and they should be treated separately in terms of their shifts. For example: ```plaintext Input: \\"Hello, World!\\", 3 Output: \\"Khoor, Zruog!\\" ``` **Step 2: Decryption** You will receive the encrypted message and an integer representing the shift value. Your task is to decrypt the message by shifting each letter back by the given integer value. For example: ```plaintext Input: \\"Khoor, Zruog!\\", 3 Output: \\"Hello, World!\\" ``` To summarize, you need to implement two functions: one for encrypting and one for decrypting messages using the Caesar Cipher technique. **Function Specification:** 1. **Encrypting Function** ```python def caesar_encrypt(message: str, shift: int) -> str: pass ``` 2. **Decrypting Function** ```python def caesar_decrypt(encrypted_message: str, shift: int) -> str: pass ``` **Examples:** *Encrypting* ```plaintext Input: \\"Hello, World!\\", 3 Output: \\"Khoor, Zruog!\\" Input: \\"Attack at dawn!\\", 5 Output: \\"Fyyfhp fy ifbs!\\" ``` *Decrypting* ```plaintext Input: \\"Khoor, Zruog!\\", 3 Output: \\"Hello, World!\\" Input: \\"Fyyfhp fy ifbs!\\", 5 Output: \\"Attack at dawn!\\" ``` Note: - You may assume that the shift value will always be a non-negative integer.","solution":"def caesar_encrypt(message: str, shift: int) -> str: def shift_char(c, shift): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + shift) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + shift) % 26 + ord(\'A\')) else: return c return \'\'.join(shift_char(c, shift) for c in message) def caesar_decrypt(encrypted_message: str, shift: int) -> str: return caesar_encrypt(encrypted_message, -shift)"},{"question":"You are given a list of integers representing the number of rooms booked on different days at a hotel. Your task is to write a function `max_consecutive_bookings` to find the maximum number of rooms booked for any given consecutive k-day period. Constraints: - Return \\"error\\" if k is greater than the number of days or if k is less than 1. - The numbers in the list are non-negative integers. Input: - A list of integers `bookings` representing the number of rooms booked on each day. - An integer `k` representing the consecutive days period. Output: - Return the maximum sum of room bookings for any k consecutive days. If k is invalid, return \\"error\\". Example: ```python bookings = [3, 2, 1, 5, 6, 3, 2] k = 3 ``` Output: - 14 (from the sum of [5, 6, 3]) Define the function as follows: ```python def max_consecutive_bookings(bookings, k): # Your code here ```","solution":"def max_consecutive_bookings(bookings, k): Find the maximum sum of room bookings for any k consecutive days. Parameters: bookings (list): List of integers representing number of rooms booked on each day. k (int): Number of consecutive days. Returns: int: Maximum sum of bookings for any k consecutive days. Returns \\"error\\" if k is greater than the number of days or if k is less than 1. if k > len(bookings) or k < 1: return \\"error\\" max_sum = 0 current_sum = sum(bookings[:k]) max_sum = current_sum for i in range(1, len(bookings) - k + 1): current_sum = current_sum - bookings[i - 1] + bookings[i + k - 1] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Flip the Linked List Related Kata If you enjoyed this Kata, you might also want to try [Reverse a linked list](https://www.codewars.com/kata/58069e4cf3c13ef3a6000167). Preloaded Preloaded for you is a class, struct or derived data type `Node` (depending on the language) used to construct linked lists in this Kata: ```python class Node(): def __init__(self, data, next = None): self.data = data self.next = next ``` Prerequisites This Kata assumes that you are already familiar with the idea of a linked list. If you do not know what that is, you may want to read up on [this article on Wikipedia](https://en.wikipedia.org/wiki/Linked_list). Specifically, the linked lists this Kata is referring to are **singly linked lists**, where the value of a specific node is stored in its `data`/`data`/`Data` property, the reference to the next node is stored in its `next`/`next`/`Next` property and the end of the list is indicated by `null`/`None`/`nil`/`nullptr`. Task Create a function `flip` which accepts an argument `list`/`list` and returns a new list that is the reverse of the original list. For example, given the following list: ```python Node(1, Node(2, Node(3))) ``` ... its flipped representation would be: ```python Node(3, Node(2, Node(1))) ``` Another example with the following linked list: ```python Node(0, Node(1, Node(4, Node(9, Node(16))))) ``` ... its flipped representation would be: ```python Node(16, Node(9, Node(4, Node(1, Node(0))))) ``` Note that `null`/`None`/`nil`/`nullptr` itself is also considered a valid linked list. In that case, its flipped representation would still be `null`/`None`/`nil`/`nullptr`. For the simplicity of this Kata, you may assume that any `Node` in this Kata may only contain **non-negative integer** values. Enjoy, and don\'t forget to check out my other Kata Series :D","solution":"class Node: def __init__(self, data, next=None): self.data = data self.next = next def flip(head): if head is None: return None prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Mirko is climbing a staircase with n steps. Each step i has a non-negative integer c_i which represents the cost to step on that particular step. Mirko can start from either the first step or the second step. Once he steps on a particular step, he has the choice to move to the next step or skip one step and move to the one after. However, he cannot skip more than one step at a time. Help Mirko determine the minimum cost to reach the top of the staircase. For example, if n = 5 and c = [10, 15, 20, 25, 30], Mirko could take the following steps: Start on the first step (cost 10), move to the third step (total cost 10 + 20 = 30), and finally move to the fifth step (total cost 10 + 20 + 30 = 60). Alternatively, Mirko could start on the second step (cost 15), move to the fourth step (total cost 15 + 25 = 40), and finally move to the top step (total cost 15 + 25 + 30 = 70). -----Input----- The first line contains an integer t (1 le t le 100). Then t test cases follow. The first line of each test case contains one integer n (2 le n le 100) — the number of steps. The second line contains n non-negative integers c_1, c_2, ldots, c_n (0 le c_i le 1000) — the cost of the steps. -----Output----- For each test case, output the minimum cost to reach the top of the staircase. -----Examples----- Input 3 5 10 15 20 25 30 3 1 100 1 4 10 15 20 10 Output 40 2 25 -----Note----- None","solution":"def min_cost_climbing_stairs(cost): Calculate the minimum cost to reach the top of the staircase given a cost array. n = len(cost) if n == 2: return min(cost[0], cost[1]) dp = [0] * n dp[0], dp[1] = cost[0], cost[1] for i in range(2, n): dp[i] = cost[i] + min(dp[i-1], dp[i-2]) return min(dp[n-1], dp[n-2]) def solve_test_cases(test_cases): results = [] for cost in test_cases: results.append(min_cost_climbing_stairs(cost)) return results"},{"question":"Given a list of integers, implement an algorithm to reorganize the list such that all negative integers appear on the left side of the list, and all non-negative integers appear on the right side. The relative order of the negative integers and the non-negative integers should remain the same as the original list. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of integers in the list. - The second line contains `n` integers separated by spaces. # Output - Output the modified list with all negative integers on the left and all non-negative integers on the right in a single line. Each integer should be separated by a single space. # Examples Example 1 Input: ``` 5 -1 2 -3 4 5 ``` Output: ``` -1 -3 2 4 5 ``` Example 2 Input: ``` 6 0 -1 3 -4 -2 2 ``` Output: ``` -1 -4 -2 0 3 2 ``` Example 3 Input: ``` 7 7 -6 5 -4 3 -2 1 ``` Output: ``` -6 -4 -2 7 5 3 1 ``` # Note - You must not use any extra space and should perform the reordering in place. - Try to achieve a time complexity of O(n). Implement the function in your preferred programming language.","solution":"def reorder_list(lst): Reorganizes the list such that all negative integers appear first, followed by all non-negative integers while preserving their relative order. negatives = [x for x in lst if x < 0] non_negatives = [x for x in lst if x >= 0] return negatives + non_negatives"},{"question":"There is a row of houses, numbered from 1 to n. You want to place street lights in such a way that each house is illuminated by at least one street light. Each street light illuminates the house in which it is placed and the k houses on either side of it (if they exist). Determine the minimum number of street lights needed to illuminate all the houses. -----Input----- The first line contains two integers, n (1 ≤ n ≤ 1000), the number of houses, and k (1 ≤ k ≤ 500), the number of houses on either side that a street light can illuminate. -----Output----- Print a single integer, the minimum number of street lights needed. -----Examples----- Input 5 1 Output 2 Input 10 2 Output 2 Input 1 500 Output 1 -----Note----- In the first sample, you can place street lights at houses 2 and 4 to illuminate all houses (1-5). In the second sample, you can place street lights at houses 3 and 8 to illuminate all houses (1-10). In the third sample, since there\'s only one house, you only need one street light in house 1.","solution":"def minimum_street_lights(n, k): Returns the minimum number of street lights needed to illuminate all the houses. Parameters: n (int): The number of houses. k (int): The number of houses on either side that a street light can illuminate. Returns: int: The minimum number of street lights needed. # Total number of houses illuminated by each street light coverage = 2 * k + 1 # Minimum number of street lights needed min_lights = (n + coverage - 1) // coverage # Using ceiling function approach return min_lights"},{"question":"In a large organization, there are N employees. Some employees follow each other on a social media platform. We are interested in finding sequences of employees who follow each other in a chain. Specifically, we want to determine the length of the longest chain where employee i follows employee i+1 directly. Experience has shown that there is always a longest chain of at least length L. However, for any sequence longer than L, there exists at least one employee in such sequence who does not follow the next employee directly. Can you find the length of the longest direct following chain? -----Input----- The first line contains two integers, N the number of employees in the organization, and L as described above. Each employee is indicated by an integer between 0 and N-1. After the first line, the input follows with M lines, each describing a directed edge in the form of two integers a and b, indicating that employee a follows employee b on the platform. We always have 1 leq L leq N leq 5000, and 0 leq M leq 10000. -----Output----- Output a single integer, the length of the longest chain of employees where each employee follows the next directly. -----Examples----- Sample Input: 6 2 0 1 1 2 2 3 3 4 4 5 1 3 Sample Output: 6","solution":"def find_longest_chain(N, L, edges): from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for a, b in edges: graph[a].append(b) # Function to perform DFS and find the longest chain starting from a given node def dfs(node, visited, max_length): if node in visited: return visited[node] max_chain = 1 for neighbor in graph[node]: max_chain = max(max_chain, 1 + dfs(neighbor, visited, max_length)) visited[node] = max_chain return max_chain max_chain_length = L visited = {} for i in range(N): max_chain_length = max(max_chain_length, dfs(i, visited, L)) return max_chain_length"},{"question":"Define a function `array_deduplicate` that returns a list containing unique elements from a given list while maintaining the order of their first occurrence. For example, given the list of integers: ```python input_list = [4, 5, 5, 4, 3, 2, 2, 7] ``` The function should return: ```python [4, 5, 3, 2, 7] ``` You may not use any built-in methods that directly accomplish this task. The function should handle lists of any data type, such as strings or mixed types, and should be case-sensitive for string inputs.","solution":"def array_deduplicate(input_list): Returns a new list containing unique elements from the given list, maintaining the order of their first occurrence. seen = set() unique_list = [] for item in input_list: if item not in seen: unique_list.append(item) seen.add(item) return unique_list"},{"question":"You have been tasked with analyzing a large dataset consisting of different products sold by a company. Each product has a unique product ID and various properties such as price, quantity sold, and rating. You need to implement a system that can efficiently handle two types of queries: 1. Update the property of a specific product. 2. Find the product with the highest rating within a given range of product IDs. As there are numerous products and frequent updates, your solution should be optimized for performance. Input Format: The first line contains two integers, N and Q, representing the number of products and the number of queries, respectively. The next line contains N space-separated integers, where the i-th integer represents the initial rating of the i-th product. The next Q lines each contain a query in one of the following two formats: 1 x y - Update the rating of product with ID x to y. 2 x y - Find the product ID with the highest rating in the range [x, y]. Output Format: For each query of type 2, output the product ID with the highest rating in the specified range. If multiple products have the same highest rating, return the smallest product ID. Constraints: 1 ≤ N, Q ≤ 100000 1 ≤ Rating of each product ≤ 1000000000 1 ≤ x ≤ y ≤ N 1 ≤ x ≤ N 1 ≤ y ≤ 1000000000 Assume product IDs start from 1 to N. SAMPLE INPUT 5 6 10 20 30 40 50 2 1 5 1 3 25 2 1 3 1 5 45 2 4 5 2 1 5 SAMPLE OUTPUT 5 3 5 4 Explanation: Initial Ratings: [10, 20, 30, 40, 50] 1. Query: 2 1 5 -> Highest rating in range [1,5] is 50, product ID 5. 2. Query: 1 3 25 -> Update rating of product ID 3 to 25. Ratings: [10, 20, 25, 40, 50] 3. Query: 2 1 3 -> Highest rating in range [1,3] is 25, product ID 3. 4. Query: 1 5 45 -> Update rating of product ID 5 to 45. Ratings: [10, 20, 25, 40, 45] 5. Query: 2 4 5 -> Highest rating in range [4,5] is 45, product ID 5. 6. Query: 2 1 5 -> Highest rating in range [1,5] is 45, product ID 5. If there were another product with the same rating, the smallest ID would be returned (in this case, 4).","solution":"class ProductRatings: def __init__(self, ratings): self.n = len(ratings) self.data = ratings[:] self.segment_tree = [None] * (4 * self.n) self.build(0, 0, self.n - 1) def build(self, node, start, end): if start == end: self.segment_tree[node] = (self.data[start], start) else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 self.build(left_child, start, mid) self.build(right_child, mid + 1, end) left_val = self.segment_tree[left_child] right_val = self.segment_tree[right_child] if left_val[0] > right_val[0] or (left_val[0] == right_val[0] and left_val[1] < right_val[1]): self.segment_tree[node] = left_val else: self.segment_tree[node] = right_val def update(self, idx, value): self._update(0, 0, self.n - 1, idx, value) def _update(self, node, start, end, idx, value): if start == end: self.data[idx] = value self.segment_tree[node] = (value, start) else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 if start <= idx <= mid: self._update(left_child, start, mid, idx, value) else: self._update(right_child, mid + 1, end, idx, value) left_val = self.segment_tree[left_child] right_val = self.segment_tree[right_child] if left_val[0] > right_val[0] or (left_val[0] == right_val[0] and left_val[1] < right_val[1]): self.segment_tree[node] = left_val else: self.segment_tree[node] = right_val def query(self, L, R): return self._query(0, 0, self.n - 1, L, R) def _query(self, node, start, end, L, R): if R < start or L > end: return (-1, float(\'inf\')) # Use inverse value for comparison if L <= start and end <= R: return self.segment_tree[node] mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 left_val = self._query(left_child, start, mid, L, R) right_val = self._query(right_child, mid + 1, end, L, R) if left_val[0] > right_val[0] or (left_val[0] == right_val[0] and left_val[1] < right_val[1]): return left_val else: return right_val def handle_queries(N, Q, ratings, queries): product_ratings = ProductRatings(ratings) results = [] for query in queries: if query[0] == 1: product_ratings.update(query[1] - 1, query[2]) elif query[0] == 2: result = product_ratings.query(query[1] - 1, query[2] - 1) results.append(result[1] + 1) return results"},{"question":"As the captain of a spaceship, you have been given a task to bring your crew members back to the main spaceship from various stations located in deep space. Each station and the main spaceship are represented as nodes, and the connection time between various nodes is given as edges with weights (time it takes to travel between nodes). The stations are represented as nodes in an undirected graph, where the nodes are numbered from 1 to N. The spaceship is at node 1. The amount of time it takes to go from station i to station j is given by the weight of the edge between nodes i and j. Your task is to calculate the minimum amount of time required to bring all crew members back to the spaceship. The edges represent the available travel paths between the stations and the spaceship. Input The first line contains two integers N and M (1 ≤ N ≤ 1000, 1 ≤ M ≤ 10000) – the number of nodes including the main spaceship and the number of edges respectively. Each of the next M lines contain three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000), which represent that there is an undirected edge between node u and node v with weight w. Output Output a single integer – the minimum amount of time required to bring all crew members back to the spaceship. Example Input 4 4 1 2 4 1 3 2 3 4 3 2 4 5 Output 9 Explanation In this example, node 1 is the spaceship. The minimum spanning tree of the graph is formed by connecting: - Node 1 to Node 3 with a weight of 2. - Node 3 to Node 4 with a weight of 3. - Node 1 to Node 2 with a weight of 4. So the minimum time needed to bring all crew members back to the spaceship is 2 + 3 + 4 = 9.","solution":"import heapq def minimum_time_to_collect_crew(N, M, edges): Calculate the minimum amount of time required to bring all crew members back to the spaceship. :param N: Number of nodes :param M: Number of edges :param edges: List of tuples containing edges in the format (u, v, w) :return: Minimum time required # Create an adjacency list adj = {i: [] for i in range(1, N+1)} for u, v, w in edges: adj[u].append((w, v)) adj[v].append((w, u)) # Prim\'s algorithm to find Minimum Spanning Tree min_heap = [(0, 1)] # (cost, node) visit = set() total_cost = 0 while len(visit) < N: cost, node = heapq.heappop(min_heap) if node not in visit: visit.add(node) total_cost += cost for next_cost, next_node in adj[node]: if next_node not in visit: heapq.heappush(min_heap, (next_cost, next_node)) return total_cost"},{"question":"Given a sequence of n integers a1, a2, ..., an, find the length of the longest increasing subsequence (LIS) where the difference between consecutive elements in the subsequence is at most k. Constraints * 1 ≤ n ≤ 1000 * 1 ≤ ai ≤ 10^9 (1 ≤ i ≤ n) * 1 ≤ k ≤ 10^9 Input The input is given in the following format: > n k > a1 a2 … an Output Print the length of the longest increasing subsequence where the difference between consecutive elements is at most k. Examples Input 5 3 1 3 5 10 12 Output 3 Input 6 2 1 2 3 4 5 6 Output 6 Input 6 1 10 20 30 40 50 60 Output 1","solution":"def longest_increasing_subsequence_with_limit(n, k, sequence): # Initialize DP array where dp[i] represents the length of the LIS ending at index i dp = [1] * n # Populate the DP array for i in range(1, n): for j in range(i): if sequence[i] > sequence[j] and sequence[i] - sequence[j] <= k: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence is the maximum element in dp array return max(dp) # This function handles the input and output format and calls the solution function def lis_within_limit(input_str): input_lines = input_str.split(\'n\') n, k = map(int, input_lines[0].split()) sequence = list(map(int, input_lines[1].split())) return longest_increasing_subsequence_with_limit(n, k, sequence)"},{"question":"Design an algorithm that takes a list of events with their respective start and end times, and calculates the maximum number of non-overlapping events that can be attended. The input will consist of a number `n`, followed by `n` events specified by a pair of integers representing the start and end time of each event. Input The input is given in the following format: ``` n s1 e1 s2 e2 :: sn en ``` The first line gives the number of events `n`, and the following `n` lines each contain two integers `si`, and `ei`, representing the start and end times of the ith event. Start and end times are given in 24-hour format (e.g., 1300 for 1:00 PM and 1500 for 3:00 PM). Output Output a single integer representing the maximum number of non-overlapping events that can be attended. Example Input ``` 4 1300 1500 1200 1400 1400 1600 1500 1700 ``` Output 2","solution":"def max_non_overlapping_events(events): Given a list of events with start and end times, return the maximum number of non-overlapping events that can be attended. :param events: List of tuples where each tuple has two integers (start time, end time) :return: Maximum number of non-overlapping events # Sort events primarily by their end times events.sort(key=lambda x: x[1]) max_events = 0 previous_end_time = -1 for start, end in events: if start >= previous_end_time: max_events += 1 previous_end_time = end return max_events # Function to read input and format it def parse_input(input_str): lines = input_str.strip().split(\\"n\\") n = int(lines[0]) events = [tuple(map(int, line.split())) for line in lines[1:1+n]] return events"},{"question":"You are given an integer array `nums` of length `n` (1 ≤ n ≤ 100,000) and an integer `target`. Your task is to find the indices of the two numbers such that they add up to `target`. Assume that each input would have exactly one solution, and you may not use the same element twice. The answer should be returned as a list of length 2. Input The first line contains two integers, `n` (1 ≤ n ≤ 100,000) and `target` (1 ≤ target ≤ 10^9). The second line contains `n` integers representing the elements of the array `nums`. Output Output a list of length 2 containing the indices of the two numbers adding up to `target`, in ascending order. Examples Input 5 9 2 7 11 15 4 Output [0, 1] Input 4 6 3 2 4 7 Output [1, 2] Note In the first sample, `nums[0] + nums[1] = 2 + 7 = 9`, which is `target`. In the second sample, `nums[1] + nums[2] = 2 + 4 = 6`, which is `target`.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to target. index_map = {} # Stores number and its index for index, num in enumerate(nums): complement = target - num if complement in index_map: return sorted([index_map[complement], index]) index_map[num] = index return [] # Function to parse input and provide output matching the expected format def find_two_sum_indices(n, target, nums): return two_sum(nums, target)"},{"question":"You are given an array of integers which contains both positive and negative numbers. The array is circular, which means the end of the array is connected to the beginning of the array, making it possible to cycle through the array in either direction. Your task is to find the maximum possible sum of a subarray in this circular array. -----Input----- The input begins with an integer 1 leq t leq 50, the number of test cases. For each test case, the first line contains an integer 1 leq n leq 10000, the number of elements in the array. The next line contains n integers -1000 leq a_i leq 1000 – the elements of the array. -----Output----- For each test case, output a single line containing the maximum possible sum of a subarray in the circular array. -----Examples----- Sample Input: 2 7 8 -1 3 4 -5 6 5 -1 -2 -3 -4 -5 Sample Output: 20 -1","solution":"def max_subarray_sum_circular(arr): def max_subarray_sum(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def min_subarray_sum(arr): min_ending_here = min_so_far = arr[0] for x in arr[1:]: min_ending_here = min(x, min_ending_here + x) min_so_far = min(min_so_far, min_ending_here) return min_so_far total_sum = sum(arr) max_normal = max_subarray_sum(arr) min_normal = min_subarray_sum(arr) if max_normal < 0: return max_normal return max(max_normal, total_sum - min_normal) def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(max_subarray_sum_circular(arr)) return results"},{"question":"You are developing a simulation program for a warehouse where different products arrive and leave at specific times. Each product has a unique identifier, and you want to keep track of the inventory levels of these products at any given time. You need to implement an efficient system that supports the following operations: 1. Add quantity of a product at a specific time. 2. Remove quantity of a product at a specific time. The warehouse always ensures that there are enough units of the product to be removed, so you don\'t have to handle negative inventory. 3. Query the total quantity of a product in the warehouse at a specific time. Consider the following example: * At time moment 1, 10 units of product 7 arrive. * At time moment 2, 5 units of product 7 leave. * At time moment 3, 8 units of product 10 arrive. * At time moment 4, you want to know how many units of product 7 are in the warehouse. The answer is 5. * At time moment 5, you want to know how many units of product 10 are in the warehouse. The answer is 8. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of warehouse queries. Each of the next n lines contains three integers ai, ti, xi (1 ≤ ai ≤ 3, 1 ≤ ti, xi ≤ 1 000 000 000) — the type of the query, the time moment of the query, and the quantity or product identifier, respectively. It is guaranteed that all time moments are distinct and that all remove operations are valid (i.e., the warehouse will always have enough units to fulfill the operation). Output For each query of type 3, output a single integer representing the quantity of the specified product in the warehouse at the given moment of time. Examples Input 5 1 1 7 10 2 2 7 5 1 3 10 8 3 4 7 3 5 10 Output 5 8 Input 6 1 1 4 5 1 2 4 10 2 3 4 3 1 4 4 2 3 5 4 3 6 4 Output 14 14","solution":"class Warehouse: def __init__(self): self.inventory = {} self.transaction_log = {} def add_quantity(self, time, product_id, quantity): if product_id not in self.inventory: self.inventory[product_id] = 0 self.inventory[product_id] += quantity self.transaction_log[time] = (product_id, quantity) def remove_quantity(self, time, product_id, quantity): if product_id in self.inventory: self.inventory[product_id] -= quantity self.transaction_log[time] = (product_id, -quantity) def query_quantity(self, time, product_id): result = 0 for t, (pid, qty) in sorted(self.transaction_log.items()): if t > time: break if pid == product_id: result += qty return result def process_queries(queries): warehouse = Warehouse() results = [] for query in queries: if query[0] == 1: warehouse.add_quantity(query[1], query[2], query[3]) elif query[0] == 2: warehouse.remove_quantity(query[1], query[2], query[3]) elif query[0] == 3: results.append(warehouse.query_quantity(query[1], query[2])) return results"},{"question":"Given a singly linked list, write a function to reverse it and return the head of the modified list. Example: Input: 1 -> 2 -> 3 -> 4 -> 5 Output: 5 -> 4 -> 3 -> 2 -> 1 Your Task: You don\'t need to read input or print anything. Complete the function `reverseLinkedList` which takes the head of the linked list as input parameter and returns the head of the reversed list. Note: - You are not allowed to use any auxiliary space other than the given linked list. - The linked list should be modified in-place. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ Number of nodes in the linked list ≤ 10^3","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseLinkedList(head): Reverses a singly linked list. :param head: ListNode, the head node of the singly linked list :return: ListNode, the head node of the reversed singly linked list prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"You are given an array of N integers. Your task is to find a contiguous subarray with the smallest possible sum. Write a function called texttt{minimumSubarraySum} which, given the array, returns the sum of the smallest contiguous subarray. ------ Input Format ------ - The first line contains an integer N — the number of elements in the array. - The second line contains N space-separated integers — the elements of the array. ------ Output Format ------ Output a single integer — the sum of the smallest contiguous subarray. ------ Constraints ------ 1 ≤ N ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 ----- Sample Input 1 ------ 5 3 -4 2 -3 -1 ----- Sample Output 1 ------ -6 ------ Explanation 1 ------ The smallest sum can be obtained from the subarray `-4 2 -3 -1` which sums to `-6`.","solution":"def minimumSubarraySum(arr): Function to find the sum of the smallest contiguous subarray. min_ending_here = float(\'inf\') min_so_far = float(\'inf\') for num in arr: if min_ending_here > 0: min_ending_here = num else: min_ending_here += num min_so_far = min(min_so_far, min_ending_here) return min_so_far"},{"question":"Two friends, Maya and Jacob, love playing number games. They recently discovered a new game based on prime factorization and decided to challenge each other. The game starts with an array of positive integers, and the players take turns. During a turn, a player must choose an element from the array and replace it with one of its prime factors (if the number is already prime, the player can choose a different prime factor less than it). The chosen element is then replaced by the selected prime factor. The objective of the game is to maximize the sum of the array elements once all numbers become prime (a number is called prime if it cannot be divided by any other number except 1 and itself). The player who makes the array of prime numbers with the highest sum wins. Maya always starts first, followed by Jacob. Your task is to determine which player wins if both players play optimally. -----Input----- The first line of input consists of two integers, M (2 le M le 50), representing the number of elements in the array and P (1 le P le 10^6), representing the maximum value of any element in the array. The next line contains M positive integers separated by spaces, representing the elements of the array. -----Output----- Output the name of the player that wins the game (either MAYA or JACOB). -----Limits----- - 2 le M le 50 - 1 le P le 10^6 - All elements in the array are between 2 and P. -----Examples----- Sample Input 1: 3 10 4 6 8 Sample Output 1: MAYA Sample Input 2: 4 15 9 7 10 14 Sample Output 2: JACOB","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_factors(n): factors = [] while n % 2 == 0: factors.append(2) n = n // 2 for i in range(3, int(n**0.5)+1, 2): while n % i == 0: factors.append(i) n = n // i if n > 2: factors.append(n) return factors def choose_best_prime_factors(array): prime_factors_sum = 0 for num in array: if is_prime(num): prime_factors_sum += num else: factors = prime_factors(num) prime_factors_sum += max(factors) return prime_factors_sum def who_wins_game(m, p, array): prime_factors_sum = choose_best_prime_factors(array) if prime_factors_sum % 2 == 1: return \\"MAYA\\" else: return \\"JACOB\\" inputs = \\"3 10n4 6 8n\\" inputs = inputs.strip().split(\\"n\\") M, P = map(int, inputs[0].split()) array = list(map(int, inputs[1].split())) print(who_wins_game(M, P, array))"},{"question":"In a fantasy world, a wizard is casting spells that are represented as strings of characters. Each spell has a mysterious property: the mana cost of the spell is the sum of the unique characters in the string. Each character has a corresponding mana value where \'a\' = 1, \'b\' = 2, ..., \'z\' = 26. The wizard is curious to know the mana cost for multiple spells. Can you write a program to help him? INPUT: The first line contains an integer t, the number of test cases. Each of the next t lines contains a single string s, representing a spell. OUTPUT: For each spell, output the mana cost on a new line. 0 < t ≤ 100 1 ≤ |s| ≤ 100 (length of the string) The string s contains only lowercase English letters. SAMPLE INPUT 3 abc aabbcc zxy SAMPLE OUTPUT 6 6 75","solution":"def mana_cost(spell): Calculate the mana cost of the spell as the sum of the unique characters, where \'a\' = 1, \'b\' = 2, ..., \'z\' = 26. unique_characters = set(spell) mana_cost = sum(ord(char) - ord(\'a\') + 1 for char in unique_characters) return mana_cost def process_spells(spells): Process a list of spells and return a list of mana costs. return [mana_cost(spell) for spell in spells]"},{"question":"You are required to design a system that validates email addresses and organizes them into categories based on their domains. # The task Create a class `EmailOrganizer` with the following methods. All arguments are strings and all methods should return a boolean indicating success or failure unless otherwise noted: * `add_email(email)`: Adds an email address to the system. The method should validate that the email address is in a standard format (i.e., local-part@domain) before adding. Return `false` if the email is invalid or already exists in the system, otherwise return `true`. * `remove_email(email)`: Removes an email address from the system. Return `false` if the email does not exist in the system, otherwise return `true`. * `get_emails_by_domain(domain)` returning a list of strings: Returns a list of all email addresses in the system that belong to the given domain, sorted in alphabetical order. Return an empty list if there are no email addresses for the given domain. * `get_domains()` returning a list of strings: Returns a list of all unique domains in the system, sorted in alphabetical order. # Details, rules, assumptions The following rules and assumptions apply: - Email addresses are case-insensitive. For example, \\"example@domain.com\\" and \\"Example@Domain.Com\\" are considered the same. - An email address is considered valid if it matches the regex `^[^@]+@[^@]+.[^@]+`. - Domain names should be treated as case-insensitive. - Each email address is unique and cannot appear more than once in the system. - The removal of an email address should also ensure that the domain list reflects any changes (i.e., removing the last email of a domain should potentially remove the domain from the list). # Example Here is how the class and methods could be used: ```python organizer = EmailOrganizer() organizer.add_email(\\"user1@example.com\\") # True organizer.add_email(\\"user2@example.com\\") # True organizer.add_email(\\"user1@domain.com\\") # True organizer.add_email(\\"user3@example.org\\") # True organizer.add_email(\\"INVALID@EMAIL\\") # False organizer.add_email(\\"user1@example.com\\") # False, already exists organizer.get_emails_by_domain(\\"example.com\\") # [\\"user1@example.com\\", \\"user2@example.com\\"] organizer.get_emails_by_domain(\\"domain.com\\") # [\\"user1@domain.com\\"] organizer.get_emails_by_domain(\\"example.org\\") # [\\"user3@example.org\\"] organizer.get_emails_by_domain(\\"nonexistent.com\\") # [] organizer.get_domains() # [\\"domain.com\\", \\"example.com\\", \\"example.org\\"] organizer.remove_email(\\"user2@example.com\\") # True organizer.get_emails_by_domain(\\"example.com\\") # [\\"user1@example.com\\"] organizer.get_domains() # [\\"domain.com\\", \\"example.com\\", \\"example.org\\"] organizer.remove_email(\\"user1@example.com\\") # True organizer.get_emails_by_domain(\\"example.com\\") # [] organizer.get_domains() # [\\"domain.com\\", \\"example.org\\"] ```","solution":"import re class EmailOrganizer: def __init__(self): self.emails = set() self.domains = {} self.email_regex = re.compile(r\'^[^@]+@[^@]+.[^@]+\') def add_email(self, email): email = email.lower() if not self.email_regex.match(email): return False if email in self.emails: return False self.emails.add(email) local_part, domain = email.split(\'@\') if domain not in self.domains: self.domains[domain] = set() self.domains[domain].add(email) return True def remove_email(self, email): email = email.lower() if email not in self.emails: return False self.emails.remove(email) local_part, domain = email.split(\'@\') if domain in self.domains: self.domains[domain].remove(email) if not self.domains[domain]: del self.domains[domain] return True def get_emails_by_domain(self, domain): domain = domain.lower() if domain not in self.domains: return [] return sorted(self.domains[domain]) def get_domains(self): return sorted(self.domains.keys())"},{"question":"In a certain city, the subway system has a single circular line with `N` stations numbered from `1` to `N` sequentially. Every station is connected to two neighboring stations, except for station `1` which is connected to stations `2` and `N`. Write a function to determine the shortest distance between two given stations `A` and `B`. Note that the distance is defined as the number of stations between two given stations along the circular path. -----Input----- The input consists of two integers `N` and `T`, where `N` is the total number of stations (2 ≤ N ≤ 1000) and `T` is the number of test cases (1 ≤ T ≤ 1000). This is followed by `T` pairs of integers. Each pair comprises the starting station `A` and the destination station `B` (1 ≤ A, B ≤ N). -----Output----- For each test case, output the shortest distance between stations `A` and `B`. -----Examples----- Sample Input 1: 6 3 1 3 2 5 4 1 Sample Output 1: 2 3 3 Sample Input 2: 10 2 3 8 6 2 Sample Output 2: 5 4","solution":"def shortest_distance(N, test_cases): Determine the shortest distance between two given stations A and B on a circular subway line with N stations. Parameters: N : int The total number of stations. test_cases : list of tuples Each tuple contains two integers A and B representing two stations. Returns: list of int A list containing the shortest distances for each pair of stations. distances = [] for A, B in test_cases: direct_distance = abs(A - B) circular_distance = N - direct_distance shortest = min(direct_distance, circular_distance) distances.append(shortest) return distances"},{"question":"Given is a list of integers representing different weights of packages. You need to determine if it is possible to put the packages into two separate groups such that the total weight of each group is equal. -----Constraints----- - The number of packages, N, will be between 1 and 20, inclusive. - Each package weighs between 1 and 100, inclusive. - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N w_1 w_2 w_3 ... w_N -----Output----- Print YES if it is possible to divide the packages into two groups with equal weight, otherwise print NO. -----Sample Input----- 4 1 5 11 5 -----Sample Output----- YES -----Sample Explanation----- It is possible to divide the packages into groups with weights [1, 5, 5] and [11]. Both groups have a total weight of 11, so print YES.","solution":"def can_partition_equal_weight(N, weights): Determines if it is possible to partition the list of weights into two groups with equal total weight. Parameters: N (int): The number of weights in the list. weights (List[int]): The weights of the packages. Returns: str: \\"YES\\" if it is possible to partition into two groups with equal weight, otherwise \\"NO\\". total_weight = sum(weights) # If the total weight is odd, it can\'t be divided into two equal parts. if total_weight % 2 != 0: return \\"NO\\" target_weight = total_weight // 2 # Use dynamic programming to determine if there is a subset with sum equal to target_weight dp = [False] * (target_weight + 1) dp[0] = True for weight in weights: for i in range(target_weight, weight - 1, -1): dp[i] = dp[i] or dp[i - weight] return \\"YES\\" if dp[target_weight] else \\"NO\\""},{"question":"A group of adventurers finds themselves at the entrance of an ancient labyrinth. The labyrinth consists of a series of chambers connected by tunnels. Each chamber has a certain number of treasures and some traps which can reduce the party\'s health if not carefully navigated. The goal of the adventurers is to collect the maximum amount of treasures and exit the labyrinth with the highest possible health. The adventurers start at Chamber 1 and must navigate through the labyrinth to reach the exit, located at one of the other chambers. Each chamber may connect to multiple other chambers, and each connection has a difficulty rating that affects how much health the adventurers lose when traveling between chambers. The adventurers can decide their routes to optimize their treasure collection and health. Your task is to write a program that determines the optimal path for maximizing collected treasures while minimizing health loss. **Input:** The input begins with two integers, n (the number of chambers, 2 ≤ n ≤ 100) and h (the initial health of the adventurers, 1 ≤ h ≤ 10000). The next n lines contain information about each chamber. Each chamber is described by three integers: the chamber number (1 ≤ si ≤ n, si is unique), the number of treasures (0 ≤ ti ≤ 100), and the number of traps (0 ≤ pi ≤ 100). After the chambers\' information, there are m lines describing the connections between chambers. Each connection is given by three integers: the chamber number ai, the chamber number bi, and the difficulty ci (1 ≤ ci ≤ 100). The adventurers can only move from chamber ai to chamber bi with a health reduction of ci. **Output:** Output the sequence of chamber numbers representing the optimal path starting from Chamber 1 that maximizes the treasure collection and ends at the exit chamber with the maximum remaining health. If there are multiple paths with the same treasure collection and health, any of them will be considered correct. **Example:** Input: ``` 5 1000 1 10 0 2 20 5 3 30 10 4 40 15 5 50 20 1 2 200 2 3 150 2 4 300 2 5 500 3 4 100 4 5 250 ``` Output: ``` 1 2 3 4 5 ``` In this example, the adventurers should travel from Chamber 1 to Chamber 2, then to Chamber 3, and so on until they reach Chamber 5, resulting in the maximum collection of treasures while considering their health.","solution":"import heapq def optimal_path(n, h, chambers_info, connections): # Parse inputs treasures = {chamber: treasures for chamber, treasures, _ in chambers_info} traps = {chamber: traps for chamber, _, traps in chambers_info} adj = {i: [] for i in range(1, n + 1)} for a, b, c in connections: adj[a].append((b, c)) # Priority queue with initial state (negative treasure sum, remaining health, current chamber, path) pq = [(-treasures[1], h, 1, [1])] max_treasure = -1 best_path = [] # Dijkstra-like with a priority queue while pq: current_treasure, current_health, current_chamber, path = heapq.heappop(pq) current_treasure = -current_treasure if current_health < 0: continue if current_chamber == n: if current_treasure > max_treasure or (current_treasure == max_treasure and current_health > h): max_treasure = current_treasure best_path = path h = current_health continue for neighbor, difficulty in adj[current_chamber]: new_health = current_health - difficulty - traps[neighbor] new_treasure = current_treasure + treasures[neighbor] heapq.heappush(pq, (-new_treasure, new_health, neighbor, path + [neighbor])) return best_path def parse_input(input_str): data = input_str.strip().split(\'n\') n, h = map(int, data[0].split()) chambers_info = [tuple(map(int, line.split())) for line in data[1:n+1]] connections = [tuple(map(int, line.split())) for line in data[n+1:]] return n, h, chambers_info, connections def labyrinth_solver(input_str): n, h, chambers_info, connections = parse_input(input_str) return optimal_path(n, h, chambers_info, connections)"},{"question":"You are given an array of integers. The task is to determine if there are three distinct elements in the array that sum to zero. Output \\"Yes\\" if such a triplet exists, otherwise output \\"No\\". Example 1: Input: arr = [-1, 0, 1, 2, -1, -4] Output: Yes Explanation: The triplet (-1, 0, 1) sums to zero. Example 2: Input: arr = [1, 2, 3] Output: No Explanation: There is no triplet that sums to zero. Your Task: The task is to complete the function `findTriplets()` which takes an array as input and returns \\"Yes\\" if there is a triplet in the array with sum zero, otherwise returns \\"No\\". Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 ≤ length of the array ≤ 10^5 -10^4 ≤ elements of the array ≤ 10^4","solution":"def findTriplets(arr): Determines if there are three distinct elements in the array that sum to zero. Parameters: arr (List[int]): The input array of integers. Returns: str: \\"Yes\\" if there is a triplet in the array with sum zero, otherwise \\"No\\". arr.sort() n = len(arr) for i in range(n-2): if i > 0 and arr[i] == arr[i-1]: continue left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == 0: return \\"Yes\\" elif current_sum < 0: left += 1 else: right -= 1 return \\"No\\""},{"question":"In a faraway kingdom, there is a peculiar game that every citizen loves to play. The game consists of transforming one string into another string using a series of specific operations: insertion, deletion, and substitution of characters. You have been tasked to help the citizens determine the minimum number of operations needed to transform one string into another. To achieve this, you are required to write a program that calculates the minimum edit distance between the given two strings. The edit distance between two strings is the minimum number of operations required to transform one string into the other. Each allowed operation (insertion, deletion, and substitution) counts as a single step. Input The first line contains integer T, the number of test cases. Each of the next T sets of lines contains the following input: - The first line contains string A. - The second line contains string B. The strings A and B consist only of lowercase letters and have lengths not exceeding 100. Output For each test case, print the minimum edit distance between the strings A and B on a new line. Examples Input 2 abc yabd kitten sitting Output 2 3","solution":"def edit_distance(A, B): Returns the minimum edit distance between string A and string B. len_A = len(A) len_B = len(B) # Create a DP table to store the edit distances dp = [[0] * (len_B + 1) for _ in range(len_A + 1)] # Fill the base cases for i in range(len_A + 1): dp[i][0] = i for j in range(len_B + 1): dp[0][j] = j # Compute the edit distance for i in range(1, len_A + 1): for j in range(1, len_B + 1): if A[i-1] == B[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], # Deletion dp[i][j-1], # Insertion dp[i-1][j-1]) # Substitution return dp[len_A][len_B] def min_edit_distances(test_cases): results = [] for A, B in test_cases: results.append(edit_distance(A, B)) return results"},{"question":"Alice is a math enthusiast who loves working with prime numbers. Recently, she learned about prime factorization and became fascinated by it. She wants to write a program to find the prime factorization of a given number and also calculate the sum of all prime factors of that number. Prime factorization of a number is representing the number as a product of prime numbers. Help Alice write a program that computes the prime factorization and sums the prime factors of a given number. Input The input consists of a single integer n (2 ≤ n ≤ 10^12). Output Print the prime factors of the number in non-decreasing order, followed by the sum of these prime factors. Each prime factor should be printed only once regardless of its multiplicity. Examples Input 12 Output 2 3 5 Input 28 Output 2 7 9 Input 19 Output 19 19 Note In the first example, the prime factors of 12 are 2 and 3, appearing as 2^2 * 3, thus the sum is 2 + 3 = 5. In the second example, the prime factors of 28 are 2 and 7, appearing as 2^2 * 7, thus the sum is 2 + 7 = 9. In the third example, 19 is itself a prime number, so the output is 19.","solution":"def prime_factors_sum(n): Computes the prime factors of n and the sum of these prime factors. Returns: A tuple containing a sorted list of prime factors and the sum of these prime factors. def prime_factors(n): factors = set() # Check for number of 2s while n % 2 == 0: factors.add(2) n = n // 2 # n must be odd at this point, check all odd numbers from 3 onwards for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.add(i) n = n // i # This condition is to check if n is a prime number greater than 2 if n > 2: factors.add(n) return sorted(factors) factors = prime_factors(n) sum_of_factors = sum(factors) return factors, sum_of_factors def format_output(n): factors, sum_of_factors = prime_factors_sum(n) return f\\"{\' \'.join(map(str, factors))}n{sum_of_factors}\\""},{"question":"Problem Statement You are given a string, and your task is to determine whether the string is a valid **ISBN-10** number. An **ISBN-10** (International Standard Book Number) is a ten-digit code used to uniquely identify books. It is valid if it fulfills the following conditions: 1. The length of the string must be exactly 10 characters. 2. The first 9 characters should be digits (0-9). 3. The last character can either be a digit (0-9) or the letter \'X\' which represents the value 10. 4. The string must pass a checksum test. The checksum is calculated by multiplying each of the first 9 digits by its position (i.e., 1 to 9) and adding those results together. The result is then modulus 11, and this value must match the 10th character (where \'X\' represents the value 10). Your task is to write a function that determines if a given string is a valid ISBN-10 number. **Function Signature:** ```python def is_valid_isbn(isbn: str) -> bool: pass ``` **Input:** - A single string `isbn`, representing the ISBN-10 number. The length of the string is exactly 10 characters. **Output:** - Return `True` if the string is a valid ISBN-10 number, otherwise return `False`. **Examples:** ```python print(is_valid_isbn(\\"0306406152\\")) # Output: True # Explanation: Checksum validation = (0*1 + 3*2 + 0*3 + 6*4 + 4*5 + 0*6 + 6*7 + 1*8 + 5*9) % 11 = 55 % 11 = 0, which matches the last digit 2. print(is_valid_isbn(\\"123456789X\\")) # Output: True # Explanation: Checksum validation = (1*1 + 2*2 + 3*3 + 4*4 + 5*5 + 6*6 + 7*7 + 8*8 + 9*9) % 11 = 285 % 11 = 10, which matches the last character \'X\' representing 10. print(is_valid_isbn(\\"1234567890\\")) # Output: False # Explanation: Checksum validation = (1*1 + 2*2 + 3*3 + 4*4 + 5*5 + 6*6 + 7*7 + 8*8 + 9*9) % 11 = 285 % 11 = 10, which does not match the last character \'0\'. ```","solution":"def is_valid_isbn(isbn: str) -> bool: Determines whether the given string is a valid ISBN-10 number. :param isbn: A string representing the ISBN-10 number :return: True if the string is a valid ISBN-10 number, False otherwise # Check if the length is exactly 10 characters if len(isbn) != 10: return False # Check if the first 9 characters are digits if not isbn[:9].isdigit(): return False # Check if the last character is a digit or \'X\' if not (isbn[-1].isdigit() or isbn[-1] == \'X\'): return False # Calculate the checksum checksum = 0 for i in range(9): checksum += int(isbn[i]) * (i + 1) # Check the modulus with 11 checksum %= 11 # Validate the last character if isbn[-1] == \'X\': return checksum == 10 else: return checksum == int(isbn[-1])"},{"question":"# Compressed String Length Calculation You are given a compressed string where sequences of repeated characters are represented as a character followed by the number of repetitions. For example, \\"a5b3\\" represents the string \\"aaaaabbb\\". Your task is to compute the length of the string after decompression. -----Input----- A single line containing a compressed string s (1 ≤ |s| ≤ 1000). The compressed string is guaranteed to be valid and contains only lowercase English letters and positive integers. For any character, the number of repetitions will always be at least 1 and at most 999. -----Output----- Print the length of the decompressed string. -----Examples----- Input a5b3c2 Output 10 Input x10y20 Output 30 Input z1 Output 1 -----Note----- In the first example, the decompressed string is \\"aaaaabbbcc\\", which has a length of 10. In the second example, the decompressed string is \\"xxxxxxxxxxyyyyyyyyyyyyyyyyyyyy\\", which has a length of 30. In the third example, the decompressed string is \\"z\\", which has a length of 1.","solution":"def decompressed_length(s): Given a compressed string, computes the length of the decompressed string. import re # Using regex to find all matches of a letter followed by digits. pattern = re.findall(r\'([a-z])(d+)\', s) total_length = sum(int(count) for char, count in pattern) return total_length"},{"question":"You are given a string of characters consisting of lowercase letters. Your task is to partition the string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts. # Constraints - The input string will only contain lowercase letters (\'a\' to \'z\'). - The length of the string is between 1 and 500 characters. # Input - A single line containing the string. # Output - A single line containing the list of integers denoting the sizes of the parts, separated by spaces. # Examples Input: ``` ababcbacadefegdehijhklij ``` Output: ``` 9 7 8 ``` Explanation: The string can be partitioned as \\"ababcbaca\\", \\"defegde\\", \\"hijhklij\\". This is because each letter appears only in one part. Input: ``` eccbbbbdec ``` Output: ``` 10 ``` Explanation: The entire string can be considered one part since each letter appears only in that part.","solution":"def partition_labels(s: str): Partitions the given string into as many parts as possible so that each letter appears in at most one part, and returns a list of integers representing the size of these parts. Parameters: s (str): The input string Returns: List[int]: List representing sizes of the parts # Track the last occurrence of each character in the string last_occurrence = {char: idx for idx, char in enumerate(s)} partitions = [] start = end = 0 for i, char in enumerate(s): end = max(end, last_occurrence[char]) if i == end: partitions.append(end - start + 1) start = i + 1 return partitions"},{"question":"A company has employees who belong to different departments. There are department heads who manage these departments. Each department head has a list of employees working under them. There is a need to encrypt the data of employees using a very simple operation. For each letter in an employee\'s name, you need to shift its position in the alphabet by a given number (cyclically). The detailed rules of this encryption are as follows: 1) For each letter in the name, if the letter is a lower case letter (\'a\'-\'z\'), shift its position right by K positions in the alphabet. For instance, with K = 1, \'a\' will become \'b\', \'y\' will become \'z\', and \'z\' will become \'a\'. 2) For each letter in the name, if the letter is an upper case letter (\'A\'-\'Z\'), shift its position right by K positions in the alphabet. For instance, with K = 1, \'A\' will become \'B\', \'Y\' will become \'Z\', and \'Z\' will become \'A\'. You are given a list of employee names, the shift amount K, and you need to print the encrypted names of these employees. ------ Input Format ------ - First line will contain an integer, T, the number of test cases. Then the test cases follow. - The first line of each test case contains the integer K (the number of positions to shift). - The second line of each test case contains an integer N (the number of employees). - The next N lines contain the name of each employee, one per line. ------ Output Format ------ For each test case, output the encrypted names of employees, each name in a new line. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ K ≤ 25 1 ≤ N ≤ 100 1 ≤ |name| ≤ 100 ------ Sample Input 1 ------ 2 3 2 Alice Bob 2 3 John Doe Mary ------ Sample Output 1 ------ Dolfh Ere Lqjp Fqg Octa ------ Explanation 1 ------ Test case 1: With K = 3, the names \\"Alice\\" and \\"Bob\\" are encrypted to \\"Dolfh\\" and \\"Ere\\" respectively. - \\"Alice\\": \'A\' -> \'D\', \'l\' -> \'o\', \'i\' -> \'l\', \'c\' -> \'f\', \'e\' -> \'h\' - \\"Bob\\": \'B\' -> \'E\', \'o\' -> \'r\', \'b\' -> \'e\' Test case 2: With K = 2, the names \\"John\\", \\"Doe\\", and \\"Mary\\" are encrypted to \\"Lqjp\\", \\"Fqg\\", and \\"Octa\\" respectively. - \\"John\\": \'J\' -> \'L\', \'o\' -> \'q\', \'h\' -> \'j\', \'n\' -> \'p\' - \\"Doe\\": \'D\' -> \'F\', \'o\' -> \'q\', \'e\' -> \'g\' - \\"Mary\\": \'M\' -> \'O\', \'a\' -> \'c\', \'r\' -> \'t\', \'y\' -> \'a\'","solution":"def encrypt_name(name, k): encrypted_name = [] for char in name: if \'a\' <= char <= \'z\': # Encrypt lowercase letters shifted_char = chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\')) elif \'A\' <= char <= \'Z\': # Encrypt uppercase letters shifted_char = chr((ord(char) - ord(\'A\') + k) % 26 + ord(\'A\')) else: # Non alphabetical characters remain the same shifted_char = char encrypted_name.append(shifted_char) return \'\'.join(encrypted_name) def encrypt_employee_names(test_cases): results = [] for case in test_cases: k, names = case[\'k\'], case[\'names\'] encrypted_names = [encrypt_name(name, k) for name in names] results.extend(encrypted_names) return results"},{"question":"Task Given a list of integers, `arr`, and an integer `K`, your task is to find the length of the smallest contiguous subarray whose sum is greater than or equal to `K`. If there is no such subarray, return `0`. Examples ```python arr, K = [2, 3, 1, 2, 4, 3], 7 # return 2, because the subarray [4, 3] sums to 7 arr, K = [1, 1, 1, 1, 1, 1, 1, 1], 11 # return 0, because no subarray sums to 11 arr, K = [4, 2, 2, 7, 8, 1, 2, 8, 10], 8 # return 1, because the subarray [8] (one of the possible answers) sums to 8 ``` **Notes:** + `1 leq text{len(arr)} leq 10^5` + `1 leq text{arr[i]} leq 10^4` + `1 leq K leq 10^9` Consider edge cases, such as when the array itself might be the only subarray that meets the condition.","solution":"def min_subarray_len(arr, K): Finds the length of the smallest contiguous subarray whose sum is at least K. If no such subarray exists, returns 0. n = len(arr) min_length = n + 1 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= K: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length <= n else 0"},{"question":"You are given an array of integers and two integers l and r. Find the maximum sum of a subarray where the length of the subarray is at least l and at most r. A subarray is defined as a contiguous part of an array. -----Input----- The first line contains a single integer n (1 leq n leq 10^5) — the size of the array. The second line contains n integers a_1, a_2, ..., a_n (-10^4 leq a_i leq 10^4) — the elements of the array. The third line contains two integers l and r (1 leq l leq r leq n). -----Output----- Output the maximum possible sum of a subarray of length between l and r (both inclusive). -----Examples----- Input 5 1 2 -1 4 5 2 4 Output 10 Input 6 -3 1 -2 4 -1 2 2 3 Output 5 -----Note----- In the first example, the subarray with the maximum sum and length between 2 and 4 is [4, 5] which has sum 9 or [1, 2, -1, 4] which has sum 6. In the second example, the subarray with the maximum sum and length between 2 and 3 is [4, -1] which has sum 3 or [1, -2, 4], which has sum 3.","solution":"def max_sum_subarray(arr, l, r): Returns the maximum sum of a subarray whose length is between l and r inclusive. n = len(arr) # Initialize the maximum sum variable max_sum = float(\'-inf\') # Iterate through all possible subarray lengths from l to r for length in range(l, r + 1): # Calculate the sum of the first subarray of the current length current_sum = sum(arr[:length]) max_sum = max(max_sum, current_sum) # Use sliding window technique to calculate the sum of the remaining subarrays for i in range(length, n): current_sum += arr[i] - arr[i - length] max_sum = max(max_sum, current_sum) return max_sum # Examples n = 5 arr = [1, 2, -1, 4, 5] l = 2 r = 4 print(max_sum_subarray(arr, l, r)) # Output: 10 n = 6 arr = [-3, 1, -2, 4, -1, 2] l = 2 r = 3 print(max_sum_subarray(arr, l, r)) # Output: 5"},{"question":"Write a function `findMissingNumber` that takes an array of consecutive integers (with one missing number) and returns the missing integer. The array will have at least two elements. For example: - If the input array is `[1, 2, 3, 4, 6]`, the function should return `5`. - If the input array is `[3, 4, 5, 6, 8]`, the function should return `7`. - If the input array is `[1, 3, 4, 5]`, the function should return `2`. You can assume that the array is sorted in increasing order and there will be exactly one integer missing.","solution":"def findMissingNumber(arr): Returns the missing number in a sorted array of consecutive integers. Parameters: arr (list of int): A sorted list of consecutive integers with one missing. Returns: int: The missing integer. # Calculate the expected sum of the complete range n = len(arr) + 1 total_sum = (n * (arr[0] + arr[-1])) // 2 # Calculate the actual sum of the array actual_sum = sum(arr) # Return the difference which is the missing number return total_sum - actual_sum"},{"question":"Matilda loves to ride her bicycle in the park, especially on sunny days. The park can be represented as a 2D grid of size m x n. Matilda starts from the top-left corner of the grid (0, 0). She can only move right or down at any point in time. The goal is to reach the bottom-right corner of the grid (m-1, n-1). However, the park has some blocked cells. Matilda cannot ride through these blocked cells. You are given a 2D array `grid` of size m x n where each cell is either 0 (open) or 1 (blocked). Matilda wonders how many different ways there are to reach the bottom-right corner of the grid from the top-left corner. Write a function that takes the grid as an input and returns the number of different routes Matilda can take to reach her destination. Function signature: ```python def count_paths(grid: List[List[int]]) -> int: pass ``` -----Input----- - The first line contains two integers m and n (1 ≤ m, n ≤ 1000), the dimensions of the grid. - The next m lines contain n integers each, describing the grid, where each integer is either 0 or 1. -----Output----- - Print a single integer representing the number of different routes to reach the bottom-right corner. -----Example----- Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 -----Note----- In the example provided, the grid looks like this: ``` 0 0 0 0 1 0 0 0 0 ``` There are two paths Matilda can take: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"from typing import List def count_paths(grid: List[List[int]]) -> int: if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] if grid[0][0] == 0: dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"You are responsible for monitoring the network of SpaceSensors on a newly colonized planet. The SpaceSensors are positioned in a grid pattern and measure various environmental parameters such as temperature, humidity, and pressure. Each sensor communicates directly with its neighboring sensors (up, down, left, right) to form a connected network. Your task is to find the shortest path in terms of number of steps from the top-left corner of the grid to the bottom-right corner. Each step must move to an adjacent sensor (up, down, left, or right) that has a non-critical status. A non-critical sensor is designated by the value `0`, and a critical sensor (which cannot be traversed) is designated by the value `1`. A sensor can be visited multiple times if needed. It is guaranteed that the top-left and bottom-right sensors are always non-critical. Determine the minimum number of steps required to reach the bottom-right sensor from the top-left sensor. If it is not possible to reach the bottom-right sensor, return `-1`. Input The first line contains two integers `M` and `N` (1 ≤ M, N ≤ 500), representing the dimensions of the grid. The next `M` lines each contain `N` integers (0 or 1), representing the grid where `0` denotes a non-critical sensor and `1` denotes a critical sensor. Output Single integer representing the minimum number of steps from the top-left to the bottom-right sensor, or `-1` if it is not possible. Example Input 5 5 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 Output 8 Note In this example, the shortest path from the top-left to the bottom-right sensor traverses through the grid in 8 steps. If no path exists due to critical sensors blocking all possible routes, the output should be `-1`.","solution":"from collections import deque def shortest_path(grid): M = len(grid) N = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if (x, y) == (M-1, N-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps+1)) return -1"},{"question":"Barista Benny is working on setting up his new coffee shop and needs to organize his coffee recipes. Benny serves different sizes of coffee in different types of cups. Each combination of size and cup type results in a unique serving. He also offers optional add-ons, such as extra shots of espresso, which multiply the number of possible combinations. Benny needs your help to determine the total number of unique ways to serve the coffee. Input The input consists of one line which contains three integers: S, C, and A. The first integer, S, represents the number of different coffee sizes. The second integer, C, represents the number of cup types. The third integer, A, represents the number of optional add-ons. Output Output a single line containing the number of unique ways to serve the coffee. ----Examples ---- Sample Input 1: 3 4 2 Sample Output 1: 24 Sample Input 2: 1 3 3 Sample Output 2: 9","solution":"def unique_ways_to_serve(S, C, A): Returns the total number of unique ways to serve the coffee. Args: S (int): Number of different coffee sizes. C (int): Number of different cup types. A (int): Number of optional add-ons. Returns: int: Total number of unique ways to serve the coffee. return S * C * A"},{"question":"You are given an array of integers and you need to perform a series of operations on this array to transform it in order to meet a specified condition. You can perform the following operations any number of times: * X a b: Increase the value of the element at index a by b. * Y a b: Decrease the value of the element at index a by b. * Z a b: Set the value of the element at index a to b. Your task is to transform the array such that all elements are equal to a given target value T. Input The first line of the input contains two integers n and T (1≤ n≤ 10^5, 1≤ T ≤ 10^9), where n is the number of elements in the array and T is the target value. The second line contains n integers a_1, a_2, ..., a_n (0≤ a_i ≤ 10^9), which are the initial elements of the array. Output Output a series of operations in the form of a single line for each operation. Each line contains an operation of one of the three types described above. If it is impossible to transform the array such that all elements are equal to T, output -1. Example Input 5 10 1 2 3 4 5 Output Z 0 10 Z 1 10 Z 2 10 Z 3 10 Z 4 10 Note In the given example, the initial array is [1, 2, 3, 4, 5] and the target value is 10. The operations set the value of each element to 10, transforming the array into [10, 10, 10, 10, 10].","solution":"def transform_array_to_target(n, T, array): This function transforms the given array into an array where all elements are equal to T. Parameters: n (int): Length of the array. T (int): Target value for all elements in the array. array (list of int): Initial elements of the array. Returns: list of str: A list containing the operations performed to transform the array. operations = [] for i in range(n): if array[i] != T: operations.append(f\\"Z {i} {T}\\") return operations if operations else [\'-1\']"},{"question":"You are given a list of string queries and a string pattern. Your task is to determine if the pattern matches each string query. The pattern is a normal string with two special characters: - `?` matches any single character. - `*` matches any sequence of characters, including an empty sequence. Implement a function that returns a list of results, where each result corresponds to a query and is `True` if the query matches the pattern and `False` otherwise. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the number of queries. The second line contains the pattern string p (1 ≤ |p| ≤ 100). Each of the next n lines contains a query string q (1 ≤ |q| ≤ 100). -----Output----- Output n lines, each containing `True` if the respective query matches the pattern, otherwise `False`. -----Examples----- Input 3 a*bc abc aabc ab Output True True False Input 4 ?at*dog catdog batdogs atdog batcatdog Output True False False True","solution":"import re def matches_pattern(queries, pattern): Given a list of queries and a pattern, return a list where each element is True if the respective query matches the pattern, and False otherwise. # Convert the pattern to a regular expression pattern = pattern.replace(\'?\', \'.\').replace(\'*\', \'.*\') pattern = f\\"^{pattern}\\" results = [] for query in queries: if re.match(pattern, query): results.append(True) else: results.append(False) return results"},{"question":"Alice has a garden with a series of flowerpots arranged in a line, each pot containing a specific number of flowers. Every day, Alice can increase the number of flowers in exactly one pot by 1. Alice wants to make the number of flowers in each pot the same using the minimum number of days possible. Write a program to determine how many days it will take for Alice to achieve this. -----Input:----- - The first line will contain N, the number of flowerpots. - The next line will contain N space-separated integers where the ith integer represents the number of flowers in the ith pot. -----Output:----- Output the minimum number of days required for Alice to make the number of flowers in each pot the same. -----Constraints----- - 1 leq N leq 10000 - 1 leq Number of flowers in each pot leq 1000 -----Sample Input:----- 5 2 5 5 7 8 -----Sample Output:----- 13","solution":"def minimum_days_to_equalize_flowers(N, flowers): max_flowers = max(flowers) total_days = sum(max_flowers - flower for flower in flowers) return total_days # Example usage # N = 5 # flowers = [2, 5, 5, 7, 8] # print(minimum_days_to_equalize_flowers(N, flowers)) # Outputs 13"},{"question":"Alex is an avid botanist who is excited to discover a new species of plant. Each plant has a certain requirement for sunlight and water to thrive. Alex has two types of resources: sunlight units and water units. Different plant species grow with varying needs for sunlight and water, and the total resources needed for their growth can either increase or decrease based on environmental factors. Given the requirements for several plant species, along with fluctuations in resource availability over time, Alex wants to know the maximum number of plants he can grow simultaneously at any given time. The requirements for each plant species are as follows: - `Si` — the amount of sunlight units required by the i-th plant. - `Wi` — the amount of water units required by the i-th plant. Alex knows about the environmental factors as follows: - At time `Ti`, the amount of sunlight units available is `S(Ti)`. - The amount of water units available at time `Ti` is `W(Ti)`. Help Alex determine the maximum number of plants he can grow simultaneously given the periodic changes in resource availability. # Input - The first line contains two integers `n` and `m` (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) — the number of plant species and the number of time points Alex knows about. - The following `n` lines each contain two integers `Si` and `Wi` (1 ≤ Si, Wi ≤ 10^4) — the sunlight and water requirements for each plant species. - The next `m` lines contain three integers each `Ti`, `S(Ti)`, and `W(Ti)` (1 ≤ Ti ≤ 10^9, 0 ≤ S(Ti), W(Ti) ≤ 10^9) — the time, sunlight units available at that time, and water units available at that time. # Output Output a single integer — the maximum number of plants Alex can grow simultaneously at any given time. # Example Input ``` 3 4 4 2 2 3 1 2 1 5 4 2 6 6 3 3 3 4 10 10 ``` Output ``` 2 ``` # Explanation For each time point we check how many plants can be grown based on the resources available: - At time `1`, Alex has `5` sunlight units and `4` water units. - Plant 1: Needs `4` sunlight and `2` water ⇒ Can grow. - Plant 2: Needs `2` sunlight and `3` water ⇒ Can grow. - Plant 3: Needs `1` sunlight and `2` water ⇒ Can grow. Alex can grow at most 2 plants because the resources are limited. - At time `2`, Alex has `6` sunlight units and `6` water units: - Plant 1: Needs `4` sunlight and `2` water ⇒ Can grow. - Plant 2: Needs `2` sunlight and `3` water ⇒ Can grow. - Plant 3: Needs `1` sunlight and `2` water ⇒ Can grow. Alex can grow at most 3 plants. - At time `3`, Alex has `3` sunlight units and `3` water units: - Plant 1: Needs `4` sunlight and `2` water ⇒ Can’t grow. - Plant 2: Needs `2` sunlight and `3` water ⇒ Can grow. - Plant 3: Needs `1` sunlight and `2` water ⇒ Can grow. Alex can grow at most 2 plants. - At time `4`, Alex has `10` sunlight units and `10` water units: - Plant 1: Needs `4` sunlight and `2` water ⇒ Can grow. - Plant 2: Needs `2` sunlight and `3` water ⇒ Can grow. - Plant 3: Needs `1` sunlight and `2` water ⇒ Can grow. Alex can grow at most 3 plants. Thus, the maximum number of plants that Alex can grow simultaneously at any given time is `3`.","solution":"def max_plants(n, m, plant_requirements, time_availabilities): max_plants_grown = 0 for Ti, S_Ti, W_Ti in time_availabilities: sunlight_left = S_Ti water_left = W_Ti plants_grown = 0 for Si, Wi in sorted(plant_requirements, key=lambda x: (x[0] + x[1])): if Si <= sunlight_left and Wi <= water_left: plants_grown += 1 sunlight_left -= Si water_left -= Wi max_plants_grown = max(max_plants_grown, plants_grown) return max_plants_grown"},{"question":"Implement a function that takes a string representing a mathematical expression and returns the evaluated result as a float. The given string expression can contain basic arithmetic operations: addition (+), subtraction (-), multiplication (*), and division (/), and parentheses to enforce precedence. The string will always be a valid mathematical expression. You do not need to handle invalid expressions or invalid characters. Ensure your function correctly respects the order of operations and parentheses. **Input:** - A single string `expression` where 1 ≤ len(expression) ≤ 1000. The string contains digits (0-9), arithmetic operators (\'+\', \'-\', \'*\', \'/\'), and parentheses (\'(\', \')\'). **Output:** - A single float representing the evaluated result of the expression. # Examples: **Example 1:** Input: ``` \\"3 + 2 * 2\\" ``` Output: ``` 7.0 ``` Explanation: ``` The expression is evaluated as 3 + (2 * 2) = 3 + 4 = 7. ``` **Example 2:** Input: ``` \\" 3/2 \\" ``` Output: ``` 1.5 ``` Explanation: ``` The expression is evaluated as 3 / 2 = 1.5. ``` **Example 3:** Input: ``` \\" (1+(4+5+2)-3)+(6+8) \\" ``` Output: ``` 23.0 ``` Explanation: ``` The expression inside the inner parentheses is evaluated as 1 + (4 + 5 + 2) - 3 = 1 + 11 - 3 = 9. Then, the whole expression becomes (9) + (6 + 8) = 9 + 14 = 23. ``` **Note:** - Use of built-in `eval()` function to evaluate the expression is disallowed. - Consider edge cases and test thoroughly.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression given as a string. Parameters: expression (str): A string containing the mathematical expression. Returns: float: The evaluated result of the expression. def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left / right) def higher_precedence(op1, op2): precedences = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} return precedences[op1] >= precedences[op2] operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] in \'0123456789\': j = i while j < len(expression) and expression[j] in \'0123456789.\': j += 1 values.append(float(expression[i:j])) i = j elif expression[i] == \'(\': operators.append(expression[i]) i += 1 elif expression[i] == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() # pop \'(\' i += 1 else: # operator while (operators and operators[-1] in \'+-*/\' and higher_precedence(operators[-1], expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"You are given two arrays of equal length n and an integer k. The first array a contains n integers, and the second array b contains n integers. You need to determine if it is possible to rearrange the elements of array a such that for every i (1 ≤ i ≤ n), the sum of the elements at the i-th position from the two arrays is greater than or equal to k. Input The first line contains an integer n (1 ≤ n ≤ 10^5) and an integer k (1 ≤ k ≤ 10^9). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the elements of array a. The third line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9), representing the elements of array b. Output Print \\"YES\\" if there exists a permutation of the array a such that for every i (1 ≤ i ≤ n), a_i + b_i ≥ k. Otherwise, print \\"NO\\". Example Input 4 10 2 1 3 5 7 8 5 9 Output YES Input 3 10 1 2 3 8 7 6 Output NO","solution":"def can_rearrange_to_satisfy_sum(n, k, a, b): Determines if it is possible to rearrange the elements of array a such that for every i, the sum of the ith position from the two arrays a and b is greater than or equal to k. Args: n (int): Length of the arrays. k (int): The target sum that needs to be met or exceeded. a (list): The first array containing n integers. b (list): The second array containing n integers. Returns: str: \\"YES\\" if such a rearrangement is possible, otherwise \\"NO\\". a.sort() b.sort(reverse=True) for i in range(n): if a[i] + b[i] < k: return \\"NO\\" return \\"YES\\""},{"question":"Emily has recently taken up a new hobby of photography. She likes to take panoramas of scenic locations. However, to get a perfect panoramic image, she needs to stitch together multiple photos she has taken. She wants to know if she can create a perfect panorama by arranging the given photos in a specific order. Each photo captures a distinct segment of the location, and the segments are described by integers. Every adjacent pair of integers in the sequence of the photos must form a contiguous range. -----Input----- The first line contains an integer n (2 ≤ n ≤ 100) — the number of photos Emily has taken. Then follows a single line with n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — representing the segment each photo captures. -----Output----- Output YES if the photos can be arranged to form a contiguous panorama, otherwise output NO. -----Examples----- Input 4 3 1 4 2 Output YES Input 3 1 3 5 Output NO -----Note----- In the first example, the photos can be rearranged to [1, 2, 3, 4], forming a contiguous panorama. In the second example, there is no way to arrange 1, 3, and 5 to form a sequence of contiguous segments.","solution":"def can_form_contiguous_panorama(n, segments): Determines if the given segments can be arranged to form a contiguous panorama. Args: n : int : the number of photos segments : List[int] : the segments each photo captures Returns: str : \\"YES\\" if the segments can be arranged contiguously, otherwise \\"NO\\" # Sort the segments in ascending order segments.sort() # Check if each consecutive segment forms a contiguous range for i in range(1, n): if segments[i] != segments[i - 1] + 1: return \\"NO\\" return \\"YES\\""},{"question":"Write a function that takes an integer array, and returns an array of integers where each element is the product of every other element in the original array except the one at the same index. **Notes:** * Your solution should be linear in terms of array length, and should not use division. Examples ``` [1, 2, 3, 4] --> [24, 12, 8, 6] [2, 3, 4, 5] --> [60, 40, 30, 24] [1, 2, 0, 4] --> [0, 0, 8, 0] [0, 0, 0] --> [0, 0, 0] [10, 3, 5, 6, 2] --> [180, 600, 360, 300, 900] ```","solution":"def product_except_self(nums): Returns an array where each element is the product of every other element in the input array. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Given a compressed string S consisting of alphabets(lowercase) and integers(1<=num<=99) representing how many times each alphabet should be repeated, the task is to decode it and print the entire uncompressed string. The pattern in which the strings were encoded is as follows: original string: \\"aaaabbbcc\\" encoded string: \\"a4b3c2\\" Note: The encoded string will always start with an alphabet and alternate between characters and numbers. Example 1: Input: str = \\"a4b3c2\\" Output: aaaabbbcc Explanation: The given string after decoding it will be as such: aaaabbbcc. Example 2: Input: str = \\"d3e2f1\\" Output: dddeef Explanation: The given string after decoding it will be as such: dddeef. Your Task: You don\'t need to read input or print anything. Your task is to complete the function decodeString() which takes the string str as input parameter and returns the decoded string. Expected Time Complexity: O(N), Where N is the length of the decoded string. Expected Auxiliary Space: O(1) (excluding output string space) Constraints: 2 <= |str| <= 100","solution":"def decodeString(s: str) -> str: Decode a compressed string consisting of alphabets and integers. decoded_str = \\"\\" i = 0 while i < len(s): # The current character char = s[i] # The number (1-99) as a string num_str = \\"\\" # Move to the number part i += 1 while i < len(s) and s[i].isdigit(): num_str += s[i] i += 1 # Convert number string to integer num = int(num_str) # Append the decoded characters to the result string decoded_str += char * num return decoded_str"},{"question":"You are given a list of n positive integers. Your task is to determine the minimum and maximum possible sums that can be achieved by selecting exactly k integers from this list. Input: The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100,000). The second line contains a list of n positive integers separated by spaces, where each integer is at least 1 and at most 1,000,000,000. Output: Output two integers separated by a space: The minimum possible sum and the maximum possible sum achievable by selecting exactly k integers from the list. Examples: Input 5 3 1 3 5 7 9 Output 9 21 Input 6 4 10 20 30 40 50 60 Output 100 180 Note In the first example, to achieve the minimum sum, you can select the integers 1, 3, and 5, which sum to 9. To achieve the maximum sum, you can select 5, 7, and 9, which sum to 21. In the second example, to achieve the minimum sum, you can select the integers 10, 20, 30, and 40, which sum to 100. To achieve the maximum sum, you can select 30, 40, 50, and 60, which sum to 180.","solution":"def min_max_sum(n, k, nums): Returns the minimum and maximum possible sums by selecting exactly k integers from the given list of n integers. sorted_nums = sorted(nums) min_sum = sum(sorted_nums[:k]) max_sum = sum(sorted_nums[-k:]) return min_sum, max_sum"},{"question":"Sophie is a software engineer developing a program that requires an efficient way to compute a specific type of sum from a list of numbers. She needs a function that processes an array of positive integers and calculates the sum of the differences between consecutive elements, but only for those pairs where the first element is less than the second one. Your task is to write a function that, given an array of positive integers, returns this sum. -----Input----- The input consists of two lines: - The first line contains a single integer n (1 le n le 100) — the number of elements in the array. - The second line contains n integers a_i (1 le a_i le 1000) — the elements of the array. -----Output----- Print a single integer — the sum of the differences between consecutive elements where the first element is less than the second one. -----Examples----- Input 5 1 3 2 5 4 Output 5 Input 4 10 20 10 30 Output 30 Input 3 5 5 5 Output 0 -----Note----- In the first example, the differences considered are (3-1) and (5-2), resulting in the sum 2 + 3 = 5. In the second example, the differences considered are (20-10) and (30-10), resulting in the sum 10 + 20 = 30. In the third example, there are no pairs where the first element is less than the second one, hence the sum is 0.","solution":"def sum_of_increasing_differences(n, arr): sum_diff = 0 for i in range(1, n): if arr[i] > arr[i - 1]: sum_diff += arr[i] - arr[i - 1] return sum_diff # Example usage: # n = 5 # arr = [1, 3, 2, 5, 4] # print(sum_of_increasing_differences(n, arr)) # Output: 5"},{"question":"Given a number k, find the sum of the first k cube numbers. The formula for the k-th cube number is k^3. You need to calculate the sum of cubes from 1^3 to k^3. Input The only line of the input contains an integer k (0 ≤ k ≤ 100). Output Output the sum of the first k cubes. Examples Input 3 Output 36 Input 5 Output 225","solution":"def sum_of_cubes(k): Returns the sum of the first k cube numbers. Parameters: k (int): A non-negative integer (0 ≤ k ≤ 100) Returns: int: The sum of cubes from 1^3 to k^3 # The formula for the sum of the first k cube numbers is (k * (k + 1) / 2)^2 return int((k * (k + 1) / 2) ** 2)"},{"question":"You are given a set of points in a 2D plane. Each point has integer coordinates (x, y). You need to find the convex hull of these points, which is the smallest convex polygon that can contain all the points. The problem is to implement an algorithm that identifies the points which form the convex hull of the given set of points. Input The first line contains an integer n (3 ≤ n ≤ 1000) — the number of points. Each of the next n lines contains two integers x and y (|x|, |y| ≤ 10^4) — the coordinates of each point. Output Print the number of points in the convex hull in the first line. Print the coordinates of the points in the convex hull in counter-clockwise order in the subsequent lines, one point per line. Example Input 7 0 0 1 1 2 2 3 3 0 3 3 0 3 2 Output 4 0 0 0 3 3 3 3 0","solution":"def convex_hull(points): Returns the points forming the convex hull in counter-clockwise order. :param points: List of tuples containing the points (x, y). :return: List of tuples containing the points forming the convex hull. # Helper function for sorting by polar angle def polar_angle(p0, p1): return (p1[1] - p0[1]) / (p1[0] - p0[0]) if (p1[0] != p0[0]) else float(\'inf\') # Helper function for removing non-left turns def cross_product(o, a, b): return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) # Sort points lexicographically (tuples compare lexicographically in Python) points = sorted(points) # Pick the starting point, known as the pivot (points[0]) pivot = points[0] # Sort the points by polar angle with the pivot sorted_points = sorted(points[1:], key=lambda p: (polar_angle(pivot, p), (pivot[0] - p[0])**2 + (pivot[1] - p[1])**2)) # Initialize the Convex Hull hull = [pivot, sorted_points[0]] for p in sorted_points[1:]: while len(hull) > 1 and cross_product(hull[-2], hull[-1], p) <= 0: hull.pop() hull.append(p) return hull def parse_input(input_lines): Parses the input points from given lines. :param input_lines: List of strings representing the input lines. :return: List of points (x, y) as tuples. n = int(input_lines[0]) points = [tuple(map(int, line.split())) for line in input_lines[1:n+1]] return points def print_convex_hull(hull_points): Prints the convex hull points formatted as the required output. :param hull_points: List of points forming the convex hull. print(len(hull_points)) for point in hull_points: print(f\\"{point[0]} {point[1]}\\") # Example usage if __name__ == \\"__main__\\": import sys input_lines = sys.stdin.read().strip().split(\'n\') points = parse_input(input_lines) hull = convex_hull(points) print_convex_hull(hull)"},{"question":"A company has a vending machine that dispenses items in a unique way. The machine has N slots, each containing a certain number of items. The slots are filled sequentially, so the first slot is filled first, then the second, and so on. When the machine is used, it begins dispensing items from the first filled slot, then the second filled slot, and so on until it reaches the last filled slot, before starting again from the first slot. Each slot can hold a maximum of C items. You are required to determine the order of items dispensed from the vending machine. Input The first line contains the number of test cases T. Each test case contains two integers: - N: The number of slots in the vending machine. - C: The capacity of each slot. Output For each test case, you need to print a sequence of slot numbers (1-indexed) representing the order in which items are dispensed until all items in all slots are dispensed. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ C ≤ 1000 SAMPLE INPUT 2 3 2 4 1 SAMPLE OUTPUT 1 2 3 1 2 3 1 2 3 4 Explanation In the first test case, with 3 slots and each slot having 2 items, the vending machine dispenses items in the order: slot 1, slot 2, slot 3, then starts again from slot 1 and so on. Thus, the output sequence is: 1 2 3 1 2 3. In the second test case, with 4 slots and each slot having 1 item, the machine will dispense items in the order: slot 1, slot 2, slot 3, slot 4. Since each slot contains only 1 item, the output sequence is: 1 2 3 4.","solution":"def dispense_order(N, C): result = [] for i in range(C): for j in range(1, N+1): result.append(j) return result def vending_machine(T, cases): results = [] for case in cases: N, C = case results.append(dispense_order(N, C)) return results"},{"question":"In a mystical forest, there exists a peculiar sequence of numbers known as the Mystic Sequence. This sequence is crucial for unlocking the secrets of the forest. The sequence is defined as follows: - The first element is 1. - The second element is 1. - For any element in the sequence at position n (n > 2), the value is equal to the sum of the elements at positions (n-1) and (n-2), reduced modulo 10^9 + 7. Given an integer k representing a position in the Mystic Sequence, your task is to find the value at that position. Input The first line of the input contains an integer T, the number of test cases. Each of the following T lines contains a single integer k denoting the position in the Mystic Sequence for which you have to calculate the value. Output For each test case, output a single integer in a separate line, the value at the corresponding position in the Mystic Sequence. Constraints 1 ≤ T ≤ 10000 1 ≤ k ≤ 10^18 Sample Input 2 1 6 Sample Output 1 8 Explanation First test case: The value at position 1 is 1 as given in the sequence definition. Second test case: The values of the sequence up to position 6 are: 1, 1, 2, 3, 5, and 8. Therefore, the value at position 6 is 8.","solution":"def mystic_sequence(k): MOD = 10**9 + 7 if k == 1 or k == 2: return 1 prev, curr = 1, 1 for _ in range(3, k+1): prev, curr = curr, (prev + curr) % MOD return curr def process_test_cases(t, ks): return [mystic_sequence(k) for k in ks]"},{"question":"Given a list of n integers, find the minimum absolute difference between any two elements in the list. Example 1: Input: arr = [3, 8, 15, 17] Output: 2 Explanation: The minimum absolute difference is between 15 and 17 which is |15-17| = 2. Example 2: Input: arr = [1, 19, 5, 11, 10] Output: 1 Explanation: The minimum absolute difference is between 10 and 11 which is |10-11| = 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minAbsDifference() which takes a list of integers as input and returns the minimum absolute difference. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"def minAbsDifference(arr): Returns the minimum absolute difference between any two elements in the list. if len(arr) < 2: return 0 # No difference can be found if there\'s less than 2 elements arr.sort() # Sort the array in ascending order. min_diff = float(\'inf\') for i in range(len(arr) - 1): min_diff = min(min_diff, abs(arr[i] - arr[i + 1])) return min_diff"},{"question":"Alyssa is a robotics engineer preparing for a competition where she needs to program a sequence of moves for a robot on a 2D grid. The robot starts at the top-left corner (0, 0) and must reach the bottom-right corner (N-1, N-1). The robot can only move right or down at each step, but there are certain cells in the grid which are off-limits due to obstacles. Alyssa wants to find all the possible unique paths the robot can take to reach the destination. Given that the number of unique paths can be large, she wants the result modulo 10^9+7. Write a program that takes the grid dimensions and the position of obstacles, then computes the number of unique paths to the destination modulo 10^9+7. Input: The first line contains two integers N, M denoting the size of the grid and the number of obstacles respectively. The next M lines each contain two integers r and c denoting the row and column of an obstacle. Output: Print the number of unique paths from the top-left corner to the bottom-right corner modulo 10^9+7. Constraints: 1 ≤ N ≤ 1000 0 ≤ M ≤ 1000 0 ≤ r, c < N SAMPLE INPUT 3 1 1 1 SAMPLE OUTPUT 2 Explanation The size of the grid is 3x3. There is one obstacle placed at cell (1, 1). The unique paths from (0, 0) to (2, 2) are: 1. (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) 2. (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2)","solution":"def unique_paths_with_obstacles(N, M, obstacles): MOD = 10**9 + 7 # Create a grid with given obstacles grid = [[0] * N for _ in range(N)] for r, c in obstacles: grid[r][c] = -1 # Initialize the grid\'s dp array dp = [[0] * N for _ in range(N)] # Starting position if grid[0][0] == -1: return 0 dp[0][0] = 1 # Fill the dp array for i in range(N): for j in range(N): if grid[i][j] == -1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[N-1][N-1] # Example input: N = 3 M = 1 obstacles = [(1, 1)] print(unique_paths_with_obstacles(N, M, obstacles)) # Output should be 2"},{"question":"Jane is trying to solve a coding problem. Given an array of integers, she wants to identify the best time to buy and sell a stock to maximize profit. The rule is that she can buy the stock on one day and sell it at a later day. Help her to identify the maximum profit she can achieve. For example, if Jane is given the array [7, 1, 5, 3, 6, 4], she should buy on day 2 (price = 1) and sell on day 5 (price = 6) to achieve a maximum profit of 6 - 1 = 5. If she’s given the array [7, 6, 4, 3, 1], no transactions should be made as she cannot achieve any positive profit, thus the maximum profit would be 0. -----Input----- The first line contains an integer n (1 le n le 10^6) — the number of days. The second line contains n integers a_i (0 le a_i le 10^4) — the stock prices on each day. -----Output----- Output a single integer — the maximum profit that can be achieved. -----Examples----- Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 -----Note----- In the first example, Jane can achieve the maximum profit by buying on day 2 (price = 1) and selling on day 5 (price = 6) to achieve a profit of 6 - 1 = 5. In the second example, all price sequences are decreasing, hence she cannot achieve any positive profit, thus the maximum profit would be 0.","solution":"def max_profit(prices): Function to compute the maximum profit from a list of stock prices. The function computes the best day to buy and sell to get the maximum profit. :param prices: List of integers representing the stock prices on each day. :return: Integer representing the maximum profit achievable. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You have been given a list of items sold in a market for each day of the week. Your task is to find the most frequently sold item each day. If there is a tie, output the lexicographically smallest item. -----Input----- - The first line contains a single integer D denoting the number of days. - For each day, the input is structured as follows: - The first line contains an integer K denoting the number of items sold that day. - The second line contains K space-separated strings I_1, I_2, ldots, I_K representing the names of the items sold that day. -----Output----- For each day, print a single line containing the string — the name of the most frequently sold item. In case of a tie, print the lexicographically smallest item. -----Constraints----- - 1 leq D leq 50 - 1 leq K leq 10^5 - 1 leq |I_i| leq 20, for each valid i (|I_i| is the length of the string I_i) - For each valid i, I_i contains only lowercase English alphabets - Sum of K over all days is leq 10^6 -----Sample Input----- 2 5 apple banana apple apple banana 6 apple orange orange banana orange apple -----Sample Output----- apple orange","solution":"def most_frequent_items(days_data): Returns the most frequently sold item each day. In case of a tie, returns the lexicographically smallest item. :param days_data: List of tuples, each tuple contains days info (num of items, list of items sold) :return: List of strings - most frequently sold items each day result = [] for day_data in days_data: K, items = day_data item_frequency = {} # Count frequency of each item for item in items: if item in item_frequency: item_frequency[item] += 1 else: item_frequency[item] = 1 # Determine the most frequent item most_frequent_item = min(item_frequency, key=lambda x: (-item_frequency[x], x)) result.append(most_frequent_item) return result # Function to parse input data from text lines def parse_input(input_lines): days_data = [] index = 0 D = int(input_lines[index]) index += 1 for _ in range(D): K = int(input_lines[index]) index += 1 items = input_lines[index].split() index += 1 days_data.append((K, items)) return days_data"},{"question":"Write a program to calculate the sum of elements in each sub-array of a given array. -----Input----- - The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the array. - The second line contains n integers ai (1 ≤ ai ≤ 100), the elements of the array. -----Output----- Print n lines. Each line should contain the sum of elements in the sub-array starting from the first element up to the ith element. -----Examples----- Input 5 1 2 3 4 5 Output 1 3 6 10 15 Input 3 10 20 30 Output 10 30 60","solution":"def calculate_sub_array_sums(n, arr): Calculates the sum of elements in each sub-array starting from the first element up to the ith element. Parameters: n (int): Number of elements in the array. arr (list of int): List of n integers. Returns: list of int: List containing the sum of elements of each sub-array. sums = [] current_sum = 0 for i in range(n): current_sum += arr[i] sums.append(current_sum) return sums"},{"question":"Hana is the owner of a large orchard with various types of fruit trees. She has hired several gardeners to take care of the trees. Each gardener is assigned to a specific section of the orchard and has access to a distinct set of trees for maintenance. However, the gardeners need to periodically share certain resources (e.g., ladders, pruning shears) with one another. The orchard is represented as an undirected graph, where each node represents a tree, and an edge between two nodes indicates that the two corresponding trees are in the same section and therefore can share resources. The gardeners need to ensure that the entire orchard is well-maintained, meaning that all trees (nodes) must be connected either directly or indirectly through shared resources (edges). Given the graph representation of the orchard and the initial resources (edges) among the trees, your task is to determine the minimum number of additional resources (edges) required to make the entire orchard connected. -----Input----- The input contains multiple test cases. The first line contains the number of test cases T (1 le T le 10). The descriptions of the test cases follow. For each test case: - The first line contains two integers n and m (2 le n le 1000, 0 le m le n(n-1)/2) — the number of trees and the number of existing resources, respectively. - Each of the next m lines contains two integers u and v (1 le u, v le n, u ne v) denoting the existing resources between trees u and v. -----Output----- For each test case, output a single integer — the minimum number of additional resources required to ensure that all trees are connected. If the orchard is already fully connected, print 0. -----Example----- Input 3 4 2 1 2 2 3 3 3 1 2 2 3 3 1 5 1 4 5 Output 1 0 3","solution":"def dfs(node, visited, graph): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) def min_additional_edges(n, m, edges): graph = [[] for _ in range(n + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = 0 for i in range(1, n + 1): if not visited[i]: components += 1 visited[i] = True dfs(i, visited, graph) return components - 1 def process_test_cases(test_cases): results = [] for case in test_cases: n, m, edges = case result = min_additional_edges(n, m, edges) results.append(result) return results"},{"question":"Warehouse Item Placement story You are managing a new warehouse where items need to be placed on shelves. Each item has a specific weight and each shelf has a weight limit. Additionally, each shelf can hold a limited number of items. You aim to place as many items as possible on the shelves without exceeding any shelf\'s weight limit or maximum item count. Due to tight schedules, you decide to write a program to automate this task by determining how many items can be placed on the shelves under the provided constraints. problem The number of shelves, their weight limits, and maximum item counts are given. Each item has a weight. Find the maximum number of items that can be placed on the shelves. Input format The format of the input data is given as follows. ``` s Shelf 1 weight limit and max item count ... Shelf s weight limit and max item count i Item 1 weight ... Item i weight ``` The first line gives the number of shelves, s (1 ≤ s ≤ 100). Each of the following s lines provides two integers: the weight limit and the maximum item count of the shelf. The next line gives the number of items, i (1 ≤ i ≤ 1000). Each of the following i lines provides one integer: the weight of the item. Output format Output the maximum number of items that can be placed on the shelves in one line. Example input 1 ``` 3 50 5 30 3 70 6 6 20 10 5 40 25 15 ``` Example output 1 ``` 5 ``` Explanation: - Shelf 1 can hold items weighing 20, 10, 5, and 15 (total weight 50, total items 4). - Shelf 2 can hold item weighing 25 (total weight 25, total items 1). - Shelf 3 can hold item weighing 40. However, the weight limit would be exceeded when trying to place any additional item. - Hence, a total of 5 items can be placed. Example input 2 ``` 2 100 4 75 3 7 60 30 40 20 10 50 55 ``` Example output 2 ``` 5 ``` Explanation: - Shelf 1 can hold items weighing 60, 30, and 10 (total weight 100, total items 3). - Shelf 2 can hold items weighing 40 and 20 (total weight 60, total items 2). - Items 50 and 55 cannot be placed due to weight or maximum count limits. - Hence, a total of 5 items can be placed.","solution":"def max_items_on_shelves(shelves, items): Determine the maximum number of items that can be placed on the shelves. :param shelves: List of tuples where each tuple contains (weight limit, max item count) of a shelf. :param items: List of item weights. :return: Maximum number of items that can be placed on the shelves. shelves = sorted(shelves, key=lambda x: (-x[0], -x[1])) # Sort shelves by weight limit desc, then by max item count desc items = sorted(items) # Sort items by weight asc placed_items_count = 0 for weight_limit, max_item_count in shelves: current_weight = 0 current_count = 0 new_items = [] for weight in items: if current_count < max_item_count and current_weight + weight <= weight_limit: current_weight += weight current_count += 1 else: new_items.append(weight) placed_items_count += current_count items = new_items # Remaining items for the next shelf return placed_items_count def input_parser(input_string): Parses the input string into shelves and items lists. :param input_string: Multiline string :return: (List of shelves, List of items) lines = input_string.strip().split(\\"n\\") s = int(lines[0]) shelves = [] for i in range(1, s + 1): weight_limit, max_item_count = map(int, lines[i].strip().split()) shelves.append((weight_limit, max_item_count)) i = int(lines[s + 1]) items = [] for j in range(s + 2, s + 2 + i): items.append(int(lines[j].strip())) return shelves, items"},{"question":"You\'re contributing to an open-source project on GitHub, and you’ve been assigned an issue where you need to implement a new feature for processing a collection of text documents. The feature requires you to identify and organize all unique words within a set of given documents and determine their frequency of occurrence. **Problem Statement:** You are given `n` text documents as input. Your task is to create a function that will read all documents, identify each unique word across these documents, and count the number of times each word appears. You should not consider case differences and should ignore punctuation marks. **Input:** - An integer `n` (1 ≤ n ≤ 100), the number of documents. - Followed by `n` lines, each containing a string representing a document. Each document can have a maximum length of 500 characters. **Output:** - Print all unique words found within the documents. - Each line in the output should contain a word followed by its frequency. - The words should be printed in alphabetical order. **Examples:** Consider `n = 2` and the following documents: - Document 1: \\"Hello, world! Hello.\\" - Document 2: \\"World, hello again.\\" * Example Input: ``` 2 Hello, world! Hello. World, hello again. ``` * Example Output: ``` again 1 hello 3 world 2 ``` **Notes:** - Words are considered case-insensitively, so \\"hello\\" and \\"Hello\\" are the same word. - Remove all punctuation marks from the documents before processing the words. - Tokens can be separated by spaces in the document. **Function Signature:** ```python def count_unique_words(n: int, documents: List[str]) -> List[str]: # Your implementation here pass ```","solution":"import re from collections import Counter from typing import List def count_unique_words(n: int, documents: List[str]) -> List[str]: Given a number of documents, this function reads all documents, identifies each unique word across these documents, and counts the number of times each word appears. It returns the words in alphabetical order with their frequencies. words = [] for document in documents: # Lowercase the document and remove punctuation cleaned_text = re.sub(r\'[^ws]\', \'\', document.lower()) words.extend(cleaned_text.split()) word_count = Counter(words) result = [] for word in sorted(word_count): result.append(f\\"{word} {word_count[word]}\\") return result"},{"question":"You\'re a teacher hosting a coding competition at your school. Students are lining up to register, but they have certain demands that make the lineup dynamic. Each student has an initial number of registration tokens, and they\'d like to use tokens to swap places with the student directly in front of them. The cost of a swap is defined as the absolute difference between the number of tokens the two students have. If a student does not have enough tokens to cover the cost of the swap, the swap cannot occur. A student is happy in the lineup if they find themselves standing behind students with a higher or equal number of tokens. Your goal is to help these students form an optimal lineup such that the maximum happiness index is achieved. Happiness Index is defined as the number of students who are happy with their position. If a student has exactly the same number of tokens as the student directly behind them, they are also considered happy with their position. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of students standing in line. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9), where a_i represents the number of registration tokens the student in the i-th position initially possesses. The positions are numbered starting from the front of the line. Output Print an integer representing the maximum happiness index that can be achieved by rearranging the students with valid token swaps. If no swaps are necessary to achieve the maximum happiness index, print the number of students directly. SAMPLE INPUT 4 5 1 4 2 SAMPLE OUTPUT 3 Explanation: In the optimal lineup after possible swaps: [1, 2, 4, 5]. Here, 3 students (3, 2, and 1) are happy with their positions.","solution":"def max_happiness_index(n, tokens): Returns the maximum happiness index by rearranging the students with valid token swaps. Args: n : int : number of students tokens : list : list of integers representing the number of tokens each student has Returns: int : maximum happiness index # Sorting the tokens list ensures the optimal lineup tokens.sort() # All students will be happy with their position since sorting puts each student behind those # with higher or equal number of tokens return n"},{"question":"There are N cities and M direct roads connecting them. Each road has a travel time associated with it. You are given the description of these roads and the goal is to determine the minimum travel time required to travel from city A to city B. If there is no possible route from city A to city B, return -1. -----Constraints----- - 1 ≤ N, M ≤ 1000 - 1 ≤ travel time of each road ≤ 1000 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: N M A B u_1 v_1 t_1 : u_M v_M t_M -----Output----- Print the minimum travel time required to travel from city A to city B. If there is no possible route, print -1. -----Sample Input----- 4 4 1 4 1 2 4 2 3 1 3 4 1 1 3 7 -----Sample Output----- 6 Explanation: - The cities and roads form the following weighted graph: 1 --(4)--> 2 --(1)--> 3 --(1)--> 4 / --(7)--------------------/ - The shortest path from city 1 to city 4 is: 1 -> 2 -> 3 -> 4 with a travel time of 4 + 1 + 1 = 6","solution":"import heapq def find_shortest_path(N, M, A, B, roads): graph = {i: [] for i in range(1, N+1)} for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) # If roads are bidirectional # Dijkstra\'s algorithm def dijkstra(source, target): heap = [(0, source)] visited = set() min_distance = {i: float(\'inf\') for i in range(1, N+1)} min_distance[source] = 0 while heap: current_dist, current_node = heapq.heappop(heap) if current_node in visited: continue visited.add(current_node) if current_node == target: return current_dist for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < min_distance[neighbor]: min_distance[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return -1 return dijkstra(A, B) # Example Usage if __name__ == \\"__main__\\": N = 4 M = 4 A = 1 B = 4 roads = [(1, 2, 4), (2, 3, 1), (3, 4, 1), (1, 3, 7)] print(find_shortest_path(N, M, A, B, roads)) # Output: 6"},{"question":"**Problem Statement:** You have been given an array containing `n` numbers which represent the heights of several towers made of blocks. You plan to play a game with these towers. In this game, you systematically collapse each tower and stack the blocks on top of the next tallest tower from the given set until only one tower remains. The height of the remaining tower is recorded as the final score of this game. The rules for collapsing a tower are: 1. Each time you pick the tallest tower, if there are multiple towers with the same height, choose the one which appears first in the array. 2. Remove the blocks from the picked tower and add them to the next tallest tower. If there are multiple possible towers, prefer the one that appears first in the array. Your task is to determine the maximum possible height of the remaining tower after all collapses have been executed. -----Input----- The first line of the input contains a single integer `n` (1 ≤ n ≤ 10) — the number of towers. The second line contains `n` space-separated integers `t[i]` (1 ≤ t[i] ≤ 100) — the initial heights of the towers. -----Output----- Output a single integer — the maximum possible height of the remaining tower. -----Examples----- Input 3 1 2 3 Output 6 Input 4 4 1 3 2 Output 10 -----Note----- In the first example, you would collapse the second tallest tower i.e., `2` into the tallest tower `3`, making the height of the second tower `5`. Then collapse the first tower `1` into the new tallest tower `5`, resulting in a final height of `6`. In the second example, you would collapse the second tallest tower `3` into the tallest tower `4`, making the height of the second tower `7`. Then collapse the next tallest tower `2` into the new tallest tower `7`, resulting in a height of `9`. Finally collapse the smallest tower `1` into the new tallest tower `9`, resulting in a final height of `10`.","solution":"def max_tower_height(towers): Calculate the maximum possible height of the remaining tower after all collapses. Parameters: towers (list): A list of integers representing the heights of the towers. Returns: int: The height of the remaining tower. while len(towers) > 1: # Find the index of the tallest tower tallest_idx = 0 for i in range(1, len(towers)): if towers[i] > towers[tallest_idx]: tallest_idx = i # Find the index of the second tallest tower second_tallest_idx = -1 for i in range(len(towers)): if i != tallest_idx: if second_tallest_idx == -1 or towers[i] > towers[second_tallest_idx]: second_tallest_idx = i # Collapse the tallest tower into the second tallest tower towers[second_tallest_idx] += towers[tallest_idx] del towers[tallest_idx] return towers[0] # Example usage n = 4 towers = [4, 1, 3, 2] print(max_tower_height(towers)) # Output will be 10"},{"question":"You are given a list of words and a dictionary of mappings where each letter of the alphabet maps to another letter, forming a simple substitution cipher. The goal is to decode the list of words using the provided mapping dictionary. Write a function `decodeWords(words: List[str], mapping: Dict[str, str]) -> List[str]` that takes a list of encoded words and a mapping dictionary, decodes each word based on the provided mappings, and returns a list of decoded words. Assume that each word in the input list contains only lowercase alphabetic characters, and the dictionary covers all 26 letters of the English alphabet. For example: ```python words = [\\"uryyb\\", \\"jbeyq\\"] mapping = { \'a\':\'n\', \'b\':\'o\', \'c\':\'p\', \'d\':\'q\', \'e\':\'r\', \'f\':\'s\', \'g\':\'t\', \'h\':\'u\', \'i\':\'v\', \'j\':\'w\', \'k\':\'x\', \'l\':\'y\', \'m\':\'z\', \'n\':\'a\', \'o\':\'b\', \'p\':\'c\', \'q\':\'d\', \'r\':\'e\', \'s\':\'f\', \'t\':\'g\', \'u\':\'h\', \'v\':\'i\', \'w\':\'j\', \'x\':\'k\', \'y\':\'l\', \'z\':\'m\' } result = decodeWords(words, mapping) print(result) # Output: [\'hello\', \'world\'] ``` The provided function should accurately perform the decoding process based on the given mapping dictionary.","solution":"from typing import List, Dict def decodeWords(words: List[str], mapping: Dict[str, str]) -> List[str]: Decodes a list of words using the provided mapping dictionary. :param words: List of encoded words. :param mapping: Dictionary mapping each letter to another letter. :return: List of decoded words. decoded_words = [] for word in words: decoded_word = \'\'.join(mapping[char] for char in word) decoded_words.append(decoded_word) return decoded_words"},{"question":"In a galaxy far, far away, there exists a peculiar planet where days are divided into multiple time slots, each represented by a string of characters. Time slots can contain either lowercase alphabetic characters or periods (\'.\'). Alph once fell asleep reading an ancient tome and must determine whether each time slot he was asleep was a \\"lucky slot\\". A time slot is considered \\"lucky\\" if it contains at least one period (\'.\') and contains no vowels (\'a\', \'e\', \'i\', \'o\', \'u\'). Given a string S representing a time slot, print \\"Lucky\\" if the time slot is lucky and \\"Unlucky\\" otherwise. Constraints * Input string S will consist of only lowercase alphabetic characters and periods (\'.\'). * 1 leq len(S) leq 100 Input Input is given from Standard Input in the following format: S Output Print \\"Lucky\\" if the time slot is lucky and \\"Unlucky\\" otherwise. Examples Input h.ll. Output Lucky Input aei. Output Unlucky Input ....... Output Lucky Input abc Output Unlucky","solution":"def is_lucky_slot(S): Determines if a given time slot is \\"lucky\\". A time slot is considered \\"lucky\\" if it contains at least one period (\'.\') and contains no vowels (\'a\', \'e\', \'i\', \'o\', \'u\'). Parameters: S (str): The input time slot string. Returns: str: \\"Lucky\\" if the time slot is lucky, \\"Unlucky\\" otherwise. vowels = set(\'aeiou\') has_period = \'.\' in S has_vowel = any(ch in vowels for ch in S) if has_period and not has_vowel: return \\"Lucky\\" else: return \\"Unlucky\\""},{"question":"Neil loves gadgets, and for his birthday, he received a unique toy robot from his friend. The robot can move on a grid following specific instructions. However, the toy has a small memory glitch, which means it can only remember a maximum of one complete instruction that was executed before. The instructions the robot can take are: - \'U\' (Up) - \'D\' (Down) - \'L\' (Left) - \'R\' (Right) Starting from the origin (0,0) on an infinite 2D grid, a sequence of instructions will be given to you. Your task is to determine the final position of the robot on the grid, accounting for the fact that the robot may forget the last instruction if a new one is given. Input: - The first line of the input contains an integer T, denoting the number of test cases. - The next T lines each contain a string of instructions consisting only of the characters \'U\', \'D\', \'L\', and \'R\'. Output: - For each test case, print the final coordinates of the robot on a new line in the format (x, y). Constraints: - 1 ≤ T ≤ 100 - 1 ≤ length of instruction string ≤ 100 SAMPLE INPUT 3 UUDDLRLR LLRR UDUDUDUUDD SAMPLE OUTPUT (0, 0) (0, 0) (0, 0) Explanation: - For the first test case, following the sequence \'UUDDLRLR\': - Move: U (0, 1) - Move: U (0, 2) - Move: D (0, 1) - Move: D (0, 0) - Move: L (-1, 0) - Move: R (0, 0) - Move: L (-1, 0) - Move: R (0, 0) Despite the instructions indicating movement in various directions, the robot ends up back at the origin because it forgets the previous move and returns to the origin due to the symmetrical instruction pattern. - Similar reasoning applies for the other test cases.","solution":"def final_position_after_instructions(T, instructions_list): Determine the final position on the grid for each sequence of instructions. Parameters: - T (int): The number of test cases. - instructions_list (list of str): A list of strings, each representing a sequence of instructions. Returns: - list of tuple: A list of tuples, each representing the final coordinates (x, y) of the robot. results = [] # Define movements for each instruction move_map = { \'U\': (0, 1), \'D\': (0, -1), \'L\': (-1, 0), \'R\': (1, 0) } for instructions in instructions_list: x, y = 0, 0 for direction in instructions: dx, dy = move_map[direction] x += dx y += dy results.append((x, y)) return results"},{"question":"Paul loves to walk through the city and explore new routes. The city can be represented as a grid where each cell is a point he can visit, and he can move up, down, left, or right. However, some cells are blocked, and he cannot pass through them. Given the grid and the coordinates of Paul’s starting and ending points, determine if he can reach the destination and print the shortest path in terms of the number of steps. If there are multiple shortest paths, you just need to find one. Input - First line contains two integers, n and m, representing the number of rows and columns in the grid, respectively. - Next n lines contain m characters each, representing the grid. Each cell is either \'.\', which means it is passable, or \'#\', which means it is blocked. - The next line contains four integers, sx, sy, ex, and ey, representing the starting and ending coordinates, respectively (0-based indexing). Output - Print the length of the shortest path if a path exists. If there are multiple paths of the same length, you may print any. - If no such path exists, print -1. Constraints 1 ≤ n, m ≤ 100 0 ≤ sx, sy, ex, ey < 100 Note: You may assume that the starting and ending points are always passable. SAMPLE INPUT 1 5 5 ..... .#. ...#. .#... ..... 0 0 4 4 SAMPLE OUTPUT 1 8 SAMPLE INPUT 2 5 5 ..... .#. ...#. .#... ..... 0 0 2 2 SAMPLE OUTPUT 2 4 SAMPLE INPUT 3 3 3 ... # .#. 0 0 2 2 SAMPLE OUTPUT 3 -1","solution":"from collections import deque def shortest_path(n, m, grid, sx, sy, ex, ey): if sx == ex and sy == ey: return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(sx, sy, 0)]) # (x, y, distance) while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': if nx == ex and ny == ey: return dist + 1 visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1 # Inputs for testing n1, m1 = 5, 5 grid1 = [ \\".....\\", \\".#.\\", \\"...#.\\", \\".#...\\", \\".....\\" ] sx1, sy1, ex1, ey1 = 0, 0, 4, 4 n2, m2 = 5, 5 grid2 = [ \\".....\\", \\".#.\\", \\"...#.\\", \\".#...\\", \\".....\\" ] sx2, sy2, ex2, ey2 = 0, 0, 2, 2 n3, m3 = 3, 3 grid3 = [ \\"...\\", \\"#\\", \\".#.\\" ] sx3, sy3, ex3, ey3 = 0, 0, 2, 2 print(shortest_path(n1, m1, grid1, sx1, sy1, ex1, ey1)) # Output should be 8 print(shortest_path(n2, m2, grid2, sx2, sy2, ex2, ey2)) # Output should be 4 print(shortest_path(n3, m3, grid3, sx3, sy3, ex3, ey3)) # Output should be -1"},{"question":"You have been given a string consisting of lowercase alphabetical characters. Your task is to determine if any permutation of the string forms a palindrome. For the purpose of this task, a palindrome is defined as a string that reads the same backward as forwards. Input - A single line containing the string s (1 ≤ |s| ≤ 50), where |s| denotes the length of the string. Output - Output \\"YES\\" if any permutation of the string can be rearranged into a palindrome, otherwise output \\"NO\\". Examples Input carrace Output YES Input hello Output NO","solution":"def can_form_palindrome(s): Determines if any permutation of the string can form a palindrome. :param s: string consisting of lowercase alphabetical characters :return: \\"YES\\" if any permutation of the string can form a palindrome, otherwise \\"NO\\" from collections import Counter # Count the frequency of each character in the input string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Task Write a function that takes a list of integers and returns a list of strings. For each integer in the input list, the corresponding string in the output list should describe the number in words. Assume the input list only contains non-negative integers less than 100. Examples ``` [0, 5, 13, 22, 45] -> [\\"zero\\", \\"five\\", \\"thirteen\\", \\"twenty two\\", \\"forty five\\"] [7, 19, 30, 55, 99] -> [\\"seven\\", \\"nineteen\\", \\"thirty\\", \\"fifty five\\", \\"ninety nine\\"] [2, 10, 21, 47, 88] -> [\\"two\\", \\"ten\\", \\"twenty one\\", \\"forty seven\\", \\"eighty eight\\"] [6, 14, 23, 31, 56] -> [\\"six\\", \\"fourteen\\", \\"twenty three\\", \\"thirty one\\", \\"fifty six\\"] ``` # Detailed Description - The function should map each integer to its corresponding English word representation. - Ensure proper handling of teens, tens, and single-digit numbers. - For numbers 21 through 99, represent them in the format `tens-unit` (e.g., 45 should be represented as \\"forty five\\"). - Input will always be valid integers within the range from 0 to 99, inclusive.","solution":"def number_to_words(number): Convert a number less than 100 to its English words representation. if 0 <= number <= 19: return [\\"zero\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\", \\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"][number] elif 20 <= number <= 99: tens = [\\"\\", \\"\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"] return tens[number // 10] + (\'\' if number % 10 == 0 else \' \' + number_to_words(number % 10)) def list_of_numbers_to_words(lst): Convert a list of integers to a list of their English words representation. return [number_to_words(num) for num in lst]"},{"question":"Kenneth has recently become interested in collecting rare artifacts and displaying them in his personal gallery. To make his collection even more impressive, he\'d like to add a unique tag to each artifact. Due to his love for puzzles and patterns, he wants these tags to follow a specific rule: Each tag consists of a random string of uppercase letters and numbers, where each character can appear any number of times. The tag is considered valid if it can be permuted to form a palindrome. Write a function `is_valid_tag(given_string)` that takes a string of uppercase letters and numbers as input and returns `True` if the string can be permuted to form a palindrome and `False` otherwise. Examples: - is_valid_tag(\\"AABB\\")==> True (Permuted to \\"ABBA\\") - is_valid_tag(\\"XYYX\\")==> True (Permuted to \\"YXXY\\" or \\"XYYX\\") - is_valid_tag(\\"ABCDEFG\\")==> False","solution":"def is_valid_tag(given_string): from collections import Counter count = Counter(given_string) odd_count = sum(1 for v in count.values() if v % 2 != 0) return odd_count <= 1"},{"question":"You are given an array of n distinct integers. Your task is to find all pairs of integers in the array such that their sum is even. For instance, if the pair (a, b) is considered, the sum a + b should be even. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the array. The next line contains n distinct integers separated by a single space. Each integer is not greater than 109 by absolute value. Output Output the number of pairs (a, b) such that their sum is even. Examples Input 5 1 2 3 4 5 Output 4 Input 3 2 4 6 Output 3","solution":"def count_even_sum_pairs(arr): This function returns the number of pairs (a, b) in the array such that their sum is even. n = len(arr) # Separate the number of even and odd numbers in the array even_count = sum(1 for x in arr if x % 2 == 0) odd_count = n - even_count # Pairs of numbers with the same parity have even sums: # Number of pairs of even numbers from even_count even_pairs = even_count * (even_count - 1) // 2 # Number of pairs of odd numbers from odd_count odd_pairs = odd_count * (odd_count - 1) // 2 # Return the total number of even-sum pairs return even_pairs + odd_pairs"},{"question":"Given a square grid of size N times N where each cell contains either a 0 or a 1, find the size of the largest square sub-grid that only contains 1s. -----Input----- The first line of input contains a single integer N (1 leq N leq 50), the size of the grid. Then follow N lines, each containing N integers (either 0 or 1), separated by spaces. Each line represents a row of the grid. -----Output----- A single integer representing the size of the largest square sub-grid that only contains 1s. -----Examples----- Sample Input: 4 1 1 1 0 1 1 1 0 1 1 1 1 0 0 1 1 Sample Output: 3 Sample Input: 5 1 0 1 0 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 Sample Output: 3","solution":"def largest_square_sub_grid(n, grid): Find the size of the largest square sub-grid that only contains 1s. if n == 1: return grid[0][0] max_side = 0 dp = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side # Function to convert the input into grid format for the function def process_input(n, lines): grid = [] for line in lines: grid.append(list(map(int, line.split()))) return grid"},{"question":"A wizard is examining a magical sequence of integers. He has a sequence of integers a and he wants to perform some operations on it to determine if it can be rearranged into a non-decreasing order. Specifically, he can perform the following operation any number of times: choose any subarray (a contiguous subsequence of the array) and reverse its order. Your task is to determine if it is possible to transform the given sequence into a non-decreasing sequence by performing the described operation any number of times. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of integers in the sequence. The second line contains n integers a_{i} (1 ≤ a_{i} ≤ 100), the sequence of integers. -----Output----- Output \\"YES\\" if it is possible to transform the given sequence into a non-decreasing sequence using the described operation. Otherwise, output \\"NO\\". -----Examples----- Input 3 3 1 2 Output YES Input 4 4 3 2 1 Output YES Input 4 1 2 4 3 Output YES -----Note----- In the first example, the subarray [3, 1, 2] can be reversed resulting in the sequence [2, 1, 3]. Reversing the subarray [2, 1] gives the non-decreasing sequence [1, 2, 3]. In the second example, the whole array can be reversed in one operation to become [1, 2, 3, 4]. In the third example, reversing the subarray [4, 3] results in the sequence [1, 2, 3, 4].","solution":"def can_be_non_decreasing(n, seq): Determines if a sequence can be rearranged into non-decreasing order by reversing subarrays. Args: n : int : Length of the sequence. seq : List[int] : The sequence of integers. Returns: str : \\"YES\\" if the sequence can be rearranged into non-decreasing order, \\"NO\\" otherwise. # A sequence can be made non-decreasing if it is a permutation of a non-decreasing sequence return \\"YES\\" if seq == sorted(seq) else \\"YES\\""},{"question":"# Task You are given a grid of characters where each cell contains a lowercase English letter. Your task is to find the longest sequence of characters that spell the same both forwards and backwards (a palindromic sequence) when traversed in a straight line either horizontally or vertically. # Example For the following grid: ``` [ [\'a\', \'b\', \'c\', \'b\', \'a\'], [\'d\', \'e\', \'a\', \'e\', \'d\'], [\'l\', \'m\', \'n\', \'m\', \'l\'], [\'o\', \'p\', \'q\', \'r\', \'s\'] ] ``` The output should be \\"abcba\\" as it is the longest palindromic sequence through row 0. For another grid: ``` [ [\'h\', \'e\', \'l\', \'l\', \'o\'], [\'l\', \'e\', \'v\', \'e\', \'l\'], [\'w\', \'o\', \'r\', \'l\', \'d\'] ] ``` The output should be \\"level\\" which is the longest palindromic sequence through row 1. # Input/Output - `[input]` 2D list of characters `grid` Constraints: `1 ≤ grid.length ≤ 50` `1 ≤ grid[i].length ≤ 50` - `[output]` a string The longest palindromic sequence found horizontally or vertically in the grid. If there are multiple sequences of the same maximum length, return the one which appears first.","solution":"def longest_palindromic_sequence(grid): def is_palindrome(s): return s == s[::-1] def find_longest_palindrome(seq): n = len(seq) max_palindrome = \\"\\" for start in range(n): for end in range(start + 1, n + 1): substring = seq[start:end] if is_palindrome(substring) and len(substring) > len(max_palindrome): max_palindrome = substring return max_palindrome longest = \\"\\" # Check each row (horizontal) for row in grid: row_str = \'\'.join(row) candidate = find_longest_palindrome(row_str) if len(candidate) > len(longest) or (len(candidate) == len(longest) and candidate < longest): longest = candidate # Check each column (vertical) if grid: num_cols = len(grid[0]) num_rows = len(grid) for col in range(num_cols): col_str = \'\'.join(grid[row][col] for row in range(num_rows)) candidate = find_longest_palindrome(col_str) if len(candidate) > len(longest) or (len(candidate) == len(longest) and candidate < longest): longest = candidate return longest"},{"question":"The Robot Factory has created N robots. Each robot has a unique ID starting from 1 to N. Due to a programming glitch, each robot can only execute one specific command. The commands are represented as an array where each index i contains the robot ID that index i needs to execute next. For example, if the command array is [2, 3, 1], it means robot 1 will command robot 2, robot 2 will command robot 3, and robot 3 will command robot 1, creating a loop. We need to determine the number of distinct loops in the robot command chain. A loop is formed when a robot eventually commands itself through a series of other robots. Input Format: The first line contains the number of test cases, T. Each test case starts with an integer N indicating the number of robots. The next line contains N integers, representing the command array. Output Format: For each test case, output the number of distinct loops. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ command[i] ≤ N for all valid i Sample Input: 2 3 2 3 1 4 2 1 4 3 Sample Output: 1 2 Explanation: - In the first test case, all robots form a single loop: 1 -> 2 -> 3 -> 1. - In the second test case, robots form two distinct loops: 1 -> 2 -> 1 and 3 -> 4 -> 3.","solution":"def count_distinct_loops(T, test_cases): def find_loops(command): visited = [False] * (len(command) + 1) loops = 0 for i in range(1, len(command) + 1): if not visited[i]: loops += 1 current = i while not visited[current]: visited[current] = True current = command[current - 1] return loops results = [] for N, commands in test_cases: results.append(find_loops(commands)) return results"},{"question":"You are given an array of n integers, and n queries. Each query consists of two integers l and r, and requires you to calculate the sum of all even numbers within the subarray from index l to r (inclusive). -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. The third line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the boundaries of the subarray. -----Output----- For each query, output a single integer — the sum of all even numbers in the subarray from index l to r. -----Examples----- Input 5 1 2 3 4 5 3 1 3 2 4 1 5 Output 2 6 6 Input 6 6 7 8 9 10 11 2 1 6 3 5 Output 24 18 -----Note----- In the first example, for the first query from index 1 to 3, the even numbers are [2]. For the second query from index 2 to 4, the even numbers are [2, 4], and their sum is 6. For the third query from index 1 to 5, the even numbers are [2, 4]. In the second example, for the first query from index 1 to 6, the even numbers are [6, 8, 10], and their sum is 24. For the second query from index 3 to 5, the even numbers are [8, 10], and their sum is 18.","solution":"def sum_of_even_in_subarrays(arr, queries): Function to calculate the sum of even numbers in subarray from l to r for each query. Parameters: arr (list of int): List of integers in the array. queries (list of tuples): List of queries where each query is a tuple (l, r). Returns: list of int: List of sums of even numbers for each query. def is_even(num): return num % 2 == 0 results = [] for l, r in queries: even_sum = sum(arr[i] for i in range(l-1, r) if is_even(arr[i])) results.append(even_sum) return results"},{"question":"Given a non-negative integer n, your task is to determine the number of binary strings of length n that do not contain consecutive \'1\'s. ------ Input ------ The first line contains an integer T denoting the number of test cases. Each of the next T lines contains a single non-negative integer n. ------ Output ------ For each test case, output the number of binary strings of length n that do not contain consecutive \'1\'s. ------ Constraints ------ 1 ≤ T ≤ 10 0 ≤ n ≤ 10^5 ------ Sample Input 1 ------ 3 2 3 4 ------ Sample Output 1 ------ 3 5 8 ----- Explanation 1 ------ For n = 2, the valid strings are \\"00\\", \\"01\\", and \\"10\\". Thus, the answer is 3. For n = 3, the valid strings are \\"000\\", \\"001\\", \\"010\\", \\"100\\", and \\"101\\". Thus, the answer is 5. For n = 4, the valid strings are \\"0000\\", \\"0001\\", \\"0010\\", \\"0100\\", \\"0101\\", \\"1000\\", \\"1001\\", and \\"1010\\". Thus, the answer is 8.","solution":"def count_binary_strings(n): if n == 0: return 1 elif n == 1: return 2 dp = [0] * (n + 1) dp[0] = 1 dp[1] = 2 for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n] def solve(T, cases): results = [] for n in cases: results.append(count_binary_strings(n)) return results"},{"question":"You are given a list of non-negative integers representing the heights of blocks where the width of each block is 1. Imagine it raining over such blocks and water getting trapped amongst them. Write a function to compute the total amount of trapped rainwater. The function should return the total amount of trapped rainwater as an integer. Example: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The blocks form the following structure: ``` # # # # # # # # # # # # # # # # # 012345678910 ``` The amount of water trapped is 6 units as visualized above. Input: [4,2,0,3,2,5] Output: 9 Explanation: The blocks form the following structure: ``` # # # # # # # # # 012345 ``` The amount of water trapped is 9 units as visualized above.","solution":"def trap_rainwater(heights): Compute the total amount of trapped rainwater given a list of block heights. :param heights: List[int] - list of non-negative integers representing block heights. :return: int - total amount of trapped rainwater. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Alex is training to become a professional diver and wants to keep track of his best dives. He keeps a log of the points scored in each dive. To analyze his performance, he wants to find out how many of his dives scored strictly more than a threshold value. -----Input----- The first line contains an integer N (1 <= N <= 100), which represents the number of dives Alex has logged. The next line contains N integers separated by spaces, representing the points scored in each dive. The third and final line contains an integer T (1 <= T <= 1000), the threshold value. -----Output----- Output a single integer: the number of dives that scored strictly more than the threshold value T. -----Examples----- Sample Input: 5 10 20 30 40 50 25 Sample Output: 3","solution":"def count_dives_above_threshold(n, dives, threshold): Returns the count of dives that scored strictly more than the threshold value. Args: n (int): The number of dives. dives (list of int): The points scored in each dive. threshold (int): The threshold value. Returns: int: The number of dives scoring more than the threshold value. return sum(dive > threshold for dive in dives) # Example usage: # n = 5 # dives = [10, 20, 30, 40, 50] # threshold = 25 # print(count_dives_above_threshold(n, dives, threshold)) # Output should be 3"},{"question":"In competitive programming, algorithms that manipulate strings are frequently encountered. This task involves designing an algorithm to solve a problem related to string operations. # Problem Description Given a string, you are required to perform compression using the counts of repeated characters. For instance, the string \\"aabcccccaaa\\" would become \\"a2b1c5a3\\", representing that the original string had two \'a\'s, followed by one \'b\', followed by five \'c\'s, and finally three \'a\'s again. The challenge is to implement a function that compresses the given string. If the resultant compressed string is not shorter than the original string, you should return the original string instead. # Input - A single string `inputString` composed of lowercase alphabets (1 ≤ |inputString| ≤ 1000). # Output - Return the compressed version of the string if it is shorter than the original; otherwise, return the original string. # Examples Example 1: **Input:** `aabcccccaaa` **Output:** `a2b1c5a3` Example 2: **Input:** `abc` **Output:** `abc` # Explanation - In Example 1, the compressed version \\"a2b1c5a3\\" is shorter than the original, so it is returned. - In Example 2, the compressed version \\"a1b1c1\\" is not shorter than the original string \\"abc\\", so the original string is returned. # Function Signature The function signature is as follows: ```python def compress_string(inputString: str) -> str: pass ``` Implement the `compress_string` function that meets the requirements described above.","solution":"def compress_string(inputString: str) -> str: if not inputString: return inputString compressed = [] count = 1 prev_char = inputString[0] for i in range(1, len(inputString)): if inputString[i] == prev_char: count += 1 else: compressed.append(f\\"{prev_char}{count}\\") prev_char = inputString[i] count = 1 compressed.append(f\\"{prev_char}{count}\\") compressed_string = \\"\\".join(compressed) if len(compressed_string) >= len(inputString): return inputString return compressed_string"},{"question":"A city is planning to construct a new park and they want to include a rectangular fountain in the center which has certain aesthetic rules. The city\'s architects have designed the central rectangular fountain in such a way that it should be visually balanced. Specifically, it should be centered such that there is an equal amount of pathway around the fountain along both the length and the width of the park. The park has dimensions of n meters in length and m meters in width. The fountain is to be p meters in length and q meters in width. Your task is to determine if it is possible to construct the fountain such that the pathway around it is equal on all sides. If it is possible, you should calculate the dimensions of the walkway on each side, otherwise, return that it is not possible to place the fountain in a visually balanced way. -----Input----- The only line contains four integers n, m, p, and q (1 ≤ p ≤ n ≤ 100 000, 1 ≤ q ≤ m ≤ 100 000) — the length and width of the park and the length and width of the fountain, respectively. -----Output----- If it is possible to place the fountain such that the pathway around it is equal on all sides, print two integers: the length of the walkway along the length and the width of the park. If it is not possible, print \\"Not possible\\". -----Examples----- Input 8 10 2 6 Output 3 2 Input 7 5 4 2 Output 1 1 Input 6 8 7 4 Output Not possible -----Note----- In the first example, the dimensions of the park are 8 by 10 meters, and the dimensions of the fountain are 2 by 6 meters. The remaining space for the walkway around the fountain would be (8 - 2) = 6 meters along the length and (10 - 6) = 4 meters along the width. Dividing this space evenly on both sides would result in walkways of 3 meters and 2 meters respectively. In the second example, the dimensions of the park are 7 by 5 meters, and the dimensions of the fountain are 4 by 2 meters. The remaining space for the walkway would be (7 - 4) = 3 meters along the length and (5 - 2) = 3 meters along the width. Dividing this space evenly results in 1.5 meters on each side for the length, but since walkways cannot have fractional dimensions, it is approximated to 1 meter, and thus the output is \\"1 1\\". In the third example, the dimensions of the park are 6 by 8 meters, and the dimensions of the fountain are 7 by 4 meters. Since 7 meters is greater than 6 meters, it is impossible to place the fountain in a visually balanced way. Therefore, the output is \\"Not possible\\".","solution":"def check_fountain_placement(n, m, p, q): Determines if a rectangular fountain of dimensions p by q can be centered in a park of dimensions n by m such that there is an equal amount of pathway around the fountain along both the length and the width. Parameters: n (int): Length of the park m (int): Width of the park p (int): Length of the fountain q (int): Width of the fountain Returns: tuple: A tuple containing the length of the walkway along the length and the width of the park or a string \\"Not possible\\" if the placement is not possible. if (n >= p and m >= q): walkway_length = (n - p) / 2 walkway_width = (m - q) / 2 if walkway_length.is_integer() and walkway_width.is_integer(): return int(walkway_length), int(walkway_width) return \\"Not possible\\""},{"question":"A string s containing characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is said to be balanced if: 1. All \'(\', \'{\' and \'[\' are closed by their corresponding \')\', \'}\' and \']\' in the correct order. 2. Every close bracket should have an open bracket before it of the same type. Your task is to implement a function that checks whether a given string s is balanced or not. You need to write a function: ```python def is_balanced(s: str) -> bool: ``` -----Input:----- - A single string s containing characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. -----Output:----- - Return `True` if the string is balanced, else return `False`. -----Sample Input:----- ``` \\"(){}[]\\" \\"([{}])\\" \\"({[)]\\" \\"{[]}\\" ``` -----Sample Output:----- ``` True True False True ``` -----Constraints----- - The length of string s does not exceed 10^4.","solution":"def is_balanced(s: str) -> bool: stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"You are given an array of integers, and your task is to find the maximum length of a subarray that has a sum equal to a given integer k. A subarray is a contiguous part of an array. # Input * The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. * The second line of the input contains n space-separated integers, representing the elements of the array. The elements of the array are in the range of [-10^4, 10^4]. * The third line of the input contains the integer k (-10^9 ≤ k ≤ 10^9). # Output * Print the maximum length of a subarray with a sum equal to k. If there is no such subarray, print 0. # Example Input ``` 5 1 -1 5 -2 3 3 ``` Output ``` 4 ``` # Explanation In the example given, the subarray `[1, -1, 5, -2]` has a sum of 3 and a length of 4, which is the maximum possible length for any subarray in the array that sums to 3. # Note * The given problem should be solved in O(n) time complexity to handle inputs of size up to 10^5 efficiently.","solution":"def max_length_subarray_with_sum_k(arr, k): Finds the maximum length of a subarray that has a sum equal to k. :param arr: List of integers :param k: Target sum :return: Maximum length of the subarray with sum equal to k sum_indices = {} current_sum = 0 max_len = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum == k: max_len = i + 1 if (current_sum - k) in sum_indices: max_len = max(max_len, i - sum_indices[current_sum - k]) if current_sum not in sum_indices: sum_indices[current_sum] = i return max_len"},{"question":"Given a string `s` consisting of alphanumeric characters and spaces, return the length of the last word in the string. If the last word does not exist, return 0. A word is defined as a maximal substring consisting of non-space characters only. For example, given `s = \\"Hello World\\"`, the function should return 5 because the last word is \\"World\\" with length 5. For `s = \\" \\"`, the function should return 0 since there are no words in the string. Write a function `length_of_last_word(s)` that takes in a string `s` and returns the length of its last word as an integer.","solution":"def length_of_last_word(s): Returns the length of the last word in the string s. A word is defined as a maximal substring consisting of non-space characters only. # Strip any trailing spaces and split the string into words words = s.strip().split() # If there are no words, return 0 if not words: return 0 # Return the length of the last word return len(words[-1])"},{"question":"You are given an integer array `arr` representing the daily temperatures on different days. The size of the array is `n`. Each element at index `i` of `arr` corresponds to the temperature on day `i`. Your task is to find, for each day in the array, the number of days you would have to wait until a warmer temperature. If there is no future day for which this is possible, then the answer for that day is `0`. Input - An integer `n` (1 ≤ n ≤ 3·10^5) representing the number of days. - An array `arr` of `n` integers where each integer represents the temperature on a given day (0 ≤ arr[i] ≤ 100). Output - An array of `n` integers where the integer at index `i` represents the number of days you have to wait for a warmer temperature after day `i`. If no such day exists, replace that element with `0`. Example Input ``` 8 73 74 75 71 69 72 76 73 ``` Output ``` 1 1 4 2 1 1 0 0 ``` Explanation: - On day 1, the temperature is 73. The next day (day 2) has a temperature of 74, so you have to wait 1 day. - On day 2, the temperature is 74. The next day (day 3) has a temperature of 75, so you have to wait 1 day. - On day 3, the temperature is 75. The next warmer day is day 7 with a temperature of 76, so you have to wait 4 days. - On day 4, the temperature is 71. The next warmer day is day 6 with a temperature of 72, so you have to wait 2 days. - On day 5, the temperature is 69. The next warmer day is day 6 with a temperature of 72, so you have to wait 1 day. - On day 6, the temperature is 72. The next day (day 7) has a temperature of 76, so you have to wait 1 day. - On day 7, the temperature is 76. There is no future day with a warmer temperature, so you put 0. - On day 8, the temperature is 73. There is no future day with a warmer temperature, so you put 0.","solution":"def daily_temperatures(n, arr): result = [0] * n stack = [] for i in range(n): while stack and arr[stack[-1]] < arr[i]: prev_day = stack.pop() result[prev_day] = i - prev_day stack.append(i) return result"},{"question":"Our company has a new electronic billboard system installed in the city. Each billboard displays advertisements in fixed time slots, and due to slot constraints, a company can only display one ad per slot on a billboard. The company wants to know the maximum number of advertisements that can be displayed over a set period of days given different constraints. You are provided with a list of advertisements each having a start and end day along with the preferred billboard. The billboard can only display one advertisement per time slot. You need to maximize the number of advertisements displayed on the billboards. -----Input----- The first line contains an integer T denoting the number of test cases. Each test case starts with an integer L denoting the total number of billboards. It is followed by an integer M denoting the number of advertisements. Each of the next M lines contains three integers si, ti, and bi, representing the start day, end day, and the preferred billboard for the ith advertisement. Note that the ith advertisement wants to be displayed from day [si, ti) - it starts at day si and ends the day before ti, making the slot available for a new advertisement from day ti onwards. -----Output----- For each test case, print the maximum number of advertisements that can be displayed on the billboards. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ L ≤ 200 - 1 ≤ M ≤ 50,000 - 1 ≤ si < ti ≤ 1,000,000 - 1 ≤ bi ≤ L -----Example----- Input: 2 2 3 1 5 1 2 6 1 3 9 2 1 4 5 9 1 12 15 1 9 16 1 17 20 1 Output: 2 3 -----Explanation----- In the first case: - The first advertisement runs from day 1 to 4 on billboard 1. - The second advertisement can\'t be displayed because it overlaps with the first ad on billboard 1. - The third advertisement runs from day 3 to 8 on billboard 2. Hence, we can serve a maximum of 2 advertisements. In the second case: - The first advertisement runs from day 5 to 8 on billboard 1. - The second advertisement runs from day 12 to 14 on billboard 1. - The third advertisement can\'t be displayed because it overlaps with both the first and second ads on billboard 1. - The fourth advertisement runs from day 17 to 19 on billboard 1. Hence, we can serve a maximum of 3 advertisements.","solution":"def max_advertisements(T, test_cases): results = [] for case in test_cases: L = case[\'L\'] M = case[\'M\'] ads = case[\'ads\'] # Create schedules for each billboard billboards = [[] for _ in range(L)] for ad in ads: billboards[ad[2] - 1].append((ad[0], ad[1])) def max_non_overlapping(intervals): Helper function to return the maximum number of non-overlapping intervals. intervals.sort(key=lambda x: x[1]) # Sort by end time count, last_end = 0, -1 for start, end in intervals: if start >= last_end: count += 1 last_end = end return count total_ads = 0 for billboard in billboards: total_ads += max_non_overlapping(billboard) results.append(total_ads) return results"},{"question":"Nadya loves puzzles and she has come up with an interesting one related to matrices, called the \\"Dominance Matrix.\\" Given a square matrix of size n x n, Nadya wants to find out how many elements in the matrix are \\"dominant.\\" An element M[i][j] is said to be \\"dominant\\" if it is greater than or equal to all other elements in the same row and column. You are required to write a program to determine the number of dominant elements in the given matrix. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100) — the size of the matrix. Then the following n lines contain n integers each, representing the elements of the matrix M, where each integer M[i][j] (1 ≤ M[i][j] ≤ 1000) is the element at the i-th row and j-th column. Output Output a single integer — the number of dominant elements in the matrix. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 1 Input 2 5 1 3 4 Output 2 Input 4 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 Output 1 Explanation In the first example, the number \'9\' is the only dominant element as it is the largest in its row and column. In the second example, the numbers \'5\' and \'4\' are dominant in their respective rows and columns.","solution":"def count_dominant_elements(matrix): This function counts the number of dominant elements in a given square matrix. A dominant element is defined as an element which is greater than or equal to all other elements in its row and column. n = len(matrix) dominant_count = 0 for i in range(n): for j in range(n): row_max = max(matrix[i]) col_max = max(matrix[k][j] for k in range(n)) if matrix[i][j] == row_max and matrix[i][j] == col_max: dominant_count += 1 return dominant_count # Example to execute the function if __name__ == \\"__main__\\": n = int(input()) matrix = [list(map(int, input().split())) for _ in range(n)] print(count_dominant_elements(matrix))"},{"question":"In a coding competition, the task is to create pairs of participants for a team event. Each participant is assigned a skill rating, and the goal is to form as many teams as possible such that the absolute difference between the skill ratings of any two participants in a team does not exceed k. Help the organizers to form the maximum number of teams. You can assume that each participant can only be in one team. -----Input----- The first line contains two integers n and k (1 le n le 10^5, 0 le k le 10^9) — the number of participants and the maximum allowed difference in skill ratings for a team. The second line contains n integers s_1, s_2, dots, s_n (1 le s_i le 10^9) — the skill ratings of the participants. -----Output----- Print a single integer — the maximum number of teams that can be formed. -----Examples----- Input 5 3 1 5 3 9 8 Output 2 Input 4 2 2 4 6 8 Output 2 -----Note----- In the first example, the pairs `(1, 3)` and `(5, 8)` can be formed. In the second example, the pairs `(2, 4)` and `(6, 8)` can be formed, resulting in the maximum number of teams being 2.","solution":"def max_teams(n, k, skill_ratings): skill_ratings.sort() teams = 0 i = 0 while i < n - 1: if skill_ratings[i + 1] - skill_ratings[i] <= k: teams += 1 i += 2 # skip the next participant since they are paired else: i += 1 # try the next participant for pairing return teams"},{"question":"Alex has a collection of n different books and he wants to arrange them in such a way that no two adjacent books have titles starting with the same letter. Each book title starts with a lowercase English letter (\'a\' to \'z\'). Your task is to help Alex determine the number of ways he can arrange his books satisfying the given condition. Since the number of arrangements can be very large, return the result modulo 10^9 + 7. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of books. The second line contains n strings, each representing the title of a book. Each string consists of only lowercase English letters and has a length between 1 and 1000 inclusive. -----Output----- Print one integer — the number of ways to arrange the books such that no two adjacent books have titles starting with the same letter, modulo 10^9 + 7. -----Examples----- Input 3 apple banana apricot Output 2 Input 4 apple banana cherry date Output 24 -----Note----- In the first sample, the valid arrangements are: 1. banana, apple, apricot 2. apricot, banana, apple In the second sample, all possible 4! = 24 arrangements are valid because all titles start with different letters.","solution":"MOD = 10**9 + 7 def count_ways(n, books): # Get the initial letters of each book initial_letters = [book[0] for book in books] # If there\'s any repeated initial letter, it\'s impossible to arrange if len(set(initial_letters)) != n: return 0 # Calculate n factorial, which corresponds to the number of valid permutations result = 1 for i in range(1, n + 1): result = (result * i) % MOD return result"},{"question":"Write a function called `visitOffices` that helps employees visit different office locations. The function will find the minimum distance each employee needs to travel to visit at least one office. You are given the coordinates of n employees at (e_1, f_1), (e_2, f_2), ..., (e_n, f_n) and m office locations at (o_1, p_1), (o_2, p_2), ..., (o_m, p_m). The distance between two points (x_1, y_1) and (x_2, y_2) is defined as the Manhattan distance, which is |x_1 - x_2| + |y_1 - y_2|. Consider an employee i with coordinates (e_i, f_i). The goal is to find the nearest office location (o_j, p_j) and compute the minimum distance d_i = |e_i - o_j| + |f_i - p_j| such that all employees visit at least one office with the minimum travel cost. Your task is to write a function `visitOffices(n, m, employees, offices)` to calculate and return a list of integers representing the minimum distances each employee needs to travel to visit the nearest office location. # Input - An integer `n` (1 leq n leq 2000): the number of employees. - An integer `m` (1 leq m leq 2000): the number of offices. - A list of tuples `employees` containing n tuples, each with two integers (e_i, f_i) (0 leq e_i, f_i leq 10^6) representing the coordinates of each employee. - A list of tuples `offices` containing m tuples, each with two integers (o_i, p_i) (0 leq o_i, p_i leq 10^6) representing the coordinates of each office. # Output - A list of n integers where the i-th integer is the minimum distance employee i needs to travel to visit an office. # Example ```python # Example Input n = 3 m = 2 employees = [(1, 2), (3, 4), (5, 6)] offices = [(2, 3), (4, 5)] # Example Output [2, 2, 2] # Explanation For each employee: 1. Employee at (1, 2) can travel to the office at (2, 3) with a distance of 2. 2. Employee at (3, 4) can travel to the office at (4, 5) with a distance of 2. 3. Employee at (5, 6) can travel to the office at (4, 5) with a distance of 2. ``` Implement the function `visitOffices`: ```python def visitOffices(n, m, employees, offices): min_distances = [] for e_x, e_y in employees: min_distance = float(\'inf\') for o_x, o_y in offices: distance = abs(e_x - o_x) + abs(e_y - o_y) if distance < min_distance: min_distance = distance min_distances.append(min_distance) return min_distances ```","solution":"def visitOffices(n, m, employees, offices): min_distances = [] for e_x, e_y in employees: min_distance = float(\'inf\') for o_x, o_y in offices: distance = abs(e_x - o_x) + abs(e_y - o_y) if distance < min_distance: min_distance = distance min_distances.append(min_distance) return min_distances"},{"question":"You are given two strings S and T. Determine whether S is a substring of T. -----Constraints----- - T length: 1 ≤ |T| ≤ 100 - S length: 1 ≤ |S| ≤ |T| - Both S and T consist of only lowercase English letters. -----Input----- Input is given from Standard Input in the following format: S T -----Output----- If S is a substring of T, print Yes; otherwise, print No. -----Sample Input----- abc abcdef -----Sample Output----- Yes \\"abc\\" is a substring of \\"abcdef\\", so the output should be Yes.","solution":"def is_substring(S, T): Determines if S is a substring of T. Args: S : str : the candidate substring T : str : the string to be searched within Returns: str : \\"Yes\\" if S is a substring of T, otherwise \\"No\\" return \\"Yes\\" if S in T else \\"No\\""},{"question":"# Array Rotation Given an array of integers and a non-negative integer `k`, rotate the array to the right by `k` steps. The rotation should be performed in-place and no extra array should be used. The function should handle cases where `k` is greater than the length of the array. Examples ``` rotateArray([1, 2, 3, 4, 5, 6, 7], 3) ==> [5, 6, 7, 1, 2, 3, 4] rotateArray([-1, -100, 3, 99], 2) ==> [3, 99, -1, -100] rotateArray([1, 2, 3, 4, 5, 6], 10) ==> [3, 4, 5, 6, 1, 2] ``` Note You must modify the array in-place and use only constant extra space.","solution":"def rotateArray(nums, k): Rotates the array to the right by k steps. The rotation is performed in-place. Parameters: nums (List[int]): The array of integers to be rotated. k (int): The number of steps to rotate the array. Returns: None n = len(nums) k = k % n # In case k is greater than the length of nums def reverse(arr, start, end): while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1 reverse(nums, 0, n - 1) reverse(nums, 0, k - 1) reverse(nums, k, n - 1)"},{"question":"Given two arrays, `arr1` and `arr2` of the same length n, write a function that finds the index positions (0-based) where the maximum element of `arr1` and the minimum element of `arr2` occur. The function should return these positions as a tuple. If the maximum element in `arr1` appears multiple times, return the first occurrence. Similarly, if the minimum element in `arr2` appears multiple times, return the first occurrence. **Function Signature:** ```python def find_positions(arr1: List[int], arr2: List[int]) -> Tuple[int, int]: ``` **Inputs:** - `arr1`: List[int]: A list of integers. - `arr2`: List[int]: A list of integers. **Output:** - `result`: Tuple[int, int]: A tuple containing two integers representing the index positions of the maximum element in `arr1` and the minimum element in `arr2`. **Example:** ```python arr1 = [1, 3, 5, 7, 9] arr2 = [4, 2, 5, 2, 6] print(find_positions(arr1, arr2)) # Output: (4, 1) ``` In this example: - The maximum element in `arr1` is 9, which is at index position 4. - The minimum element in `arr2` is 2, which first appears at index position 1.","solution":"from typing import List, Tuple def find_positions(arr1: List[int], arr2: List[int]) -> Tuple[int, int]: Finds the index positions where the maximum element of arr1 and the minimum element of arr2 occur. The function returns these positions as a tuple. if not arr1 or not arr2: raise ValueError(\\"Input arrays must not be empty\\") max_index = arr1.index(max(arr1)) min_index = arr2.index(min(arr2)) return (max_index, min_index)"},{"question":"Given a string s consisting of lowercase English alphabets, check if the string can be rearranged to form a palindrome. If it can, return any one of the possible palindrome strings. If it cannot, return an empty string. Example 1: Input: s = \\"aabb\\" Output: \\"abba\\" Explanation: \\"abba\\" is a possible palindrome formed from the string \\"aabb\\". Example 2: Input: s = \\"abc\\" Output: \\"\\" Explanation: No permutation of \\"abc\\" can form a palindrome. Your Task: The input is already taken care of by the driver code. You only need to complete the function rearrangePalindrome() that takes a string s and returns the possible palindrome string or an empty string. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= len(s) <= 10^5","solution":"def rearrangePalindrome(s): from collections import Counter counts = Counter(s) odd_counts = sum(1 for count in counts.values() if count % 2 != 0) if odd_counts > 1: return \\"\\" half_palindrome = [] middle_char = \\"\\" for char, count in counts.items(): if count % 2 == 0: half_palindrome.append(char * (count // 2)) else: half_palindrome.append(char * (count // 2)) middle_char = char half_palindrome = \'\'.join(half_palindrome) return half_palindrome + middle_char + half_palindrome[::-1]"},{"question":"Problem Description: You are working on a text editor and need to implement a feature that finds the most frequently occurring word in a paragraph of text. If there are multiple words with the highest frequency, return the lexicographically smallest one. Implement this feature to help improve the text editor\'s efficiency. Input: - The first line contains an integer T (number of test cases). - Each test case consists of a single paragraph of text on one line. Output: - For each test case, output a single line containing the most frequently occurring word in the paragraph. If there are multiple words with the highest frequency, output the lexicographically smallest one. Constraints: - 1 ≤ T ≤ 10 - Each paragraph of text contains only lowercase English letters and spaces. - The length of each paragraph is between 1 and 1000 characters, inclusive. Example: Input: 3 this is a test this is only a test another test case with some words with some meaning hello hello world world hello Output: a some hello Explanation: Test case 1: The words \\"this\\" and \\"is\\" both occur 2 times but since \\"a\\" is lexicographically smaller and occurs 2 times as well, it is the most frequent smallest word. Test case 2: The word \\"some\\" and \\"with\\" both occur 2 times but \\"some\\" is lexicographically smaller. Test case 3: The word \\"hello\\" occurs the most number of times (3 times).","solution":"def most_frequent_word(paragraph): words = paragraph.split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 max_freq = max(frequency.values()) most_frequent_words = [word for word, freq in frequency.items() if freq == max_freq] return min(most_frequent_words) def solve(T, paragraphs): results = [] for paragraph in paragraphs: results.append(most_frequent_word(paragraph)) return results"},{"question":"Given a string `s`, define its \\"block length\\" as the maximum length of any substring that contains the same character repeated. For example, the block length of \\"aaabbbaaa\\" is 3, while the block length of \\"abbccc\\" is also 3. You are given n queries, each querying the block length of a specific substring within a given string `s`. For each query, determine the block length of the substring from index l to r (1-based). Input The first line contains a string `s` (1 ≤ |s| ≤ 100,000), consisting only of lowercase English letters. The second line contains an integer n (1 ≤ n ≤ 100,000) — the number of queries. Then follow n lines, each containing two integers l and r (1 ≤ l ≤ r ≤ |s|) — indices of the substring for which the block length needs to be found. Output For each query, output the block length of the specified substring. Examples Input aaabbbaaa 3 1 9 4 6 1 3 Output 3 3 3 Input abcde 2 1 5 2 4 Output 1 1 Note In the first example: - The whole string \\"aaabbbaaa\\" has a block length of 3 (substring \\"aaa\\" or \\"bbb\\"). - The substring \\"bbb\\" itself has a block length of 3. - The substring \\"aaa\\" has a block length of 3. In the second example: - Both substrings \\"abcde\\" and \\"bcd\\" have a block length of 1, since there are no repeated characters.","solution":"def get_block_length(s, queries): Given a string s and a list of queries, return the block length for each queried substring. Arguments: s : str : The input string. queries : list of tuples : Each tuple contains two integers l and r representing query indices (1-based). Returns: list : List of integers representing the block lengths of the queried substrings. results = [] for l, r in queries: substring = s[l-1:r] max_block_length = 0 current_block_length = 1 for i in range(1, len(substring)): if substring[i] == substring[i-1]: current_block_length += 1 else: max_block_length = max(max_block_length, current_block_length) current_block_length = 1 max_block_length = max(max_block_length, current_block_length) results.append(max_block_length) return results def process_queries(input_str, n, queries): Processes multiple queries for block lengths of substrings. Arguments: input_str : str : The input string. n : int : Number of queries. queries : list of tuples : List of tuples containing the queries. Returns: list : List of integers representing the block lengths of the queried substrings. return get_block_length(input_str, queries)"},{"question":"In a far distant galaxy, people use a special language in which they communicate using patterns of lights from a sequence of lamps. Each lamp can only be in one of two states: ON or OFF. A word in this language is simply a sequence of states of these lamps. For example, if there are initially 5 lamps and their states are as follows: ``` ON, ON, OFF, OFF, ON ``` it can be represented as `[1, 1, 0, 0, 1]` where 1 represents an ON state and 0 represents an OFF state. A special word can be created by inverting the state of exactly one lamp in the sequence. Inverting a lamp\'s state means switching it from ON to OFF or from OFF to ON. Given a sequence of states of the lamps, your task is to determine the number of distinct special words that can be formed by inverting exactly one lamp. -----Input:----- The first line contains an integer N indicating the number of lamps (1 leq N leq 100000). The second line contains a sequence of N integers, each either 0 or 1, representing the initial states of the lamps. -----Output:----- Output a single integer representing the number of distinct special words that can be formed by inverting exactly one lamp. -----Sample input 1:----- 5 1 1 0 0 1 -----Sample output 1:----- 5 -----Sample input 2:----- 3 1 1 1 -----Sample output 2:----- 3 -----Sample input 3:----- 4 0 0 0 0 -----Sample output 3:----- 4","solution":"def count_distinct_special_words(n, lamp_states): Returns the number of distinct special words that can be formed by inverting exactly one lamp state. # Any lamp that we switch will create a unique combination return n"},{"question":"A major international airport manages flights for numerous airlines. Each airline operates flights between various pairs of cities. For each flight, the airline specifies a cost and the time taken. The airport wants to promote an airline that provides the cheapest flights between cities while also considering the shortest travel time in case of ties. Each city is represented by an integer id from 1 to n, and the flights are represented by a list of triples (u, v, w, t), where `u` and `v` are the city ids between which the flight operates, `w` is the cost, and `t` is the time taken. You are required to help the airport find out which airline has overall minimum costs for flights. If there are ties in the cost, choose the airline with the shortest travel time. -----Input----- The first line contains a positive integer n (2 ≤ n ≤ 1,000) – the number of cities. The second line contains a positive integer k (1 ≤ k ≤ 10) – the number of airlines. For each airline, the first line contains an integer m_i (1 ≤ m_i ≤ 10,000) – the number of flights operated by the i-th airline. The next m_i lines contain 4 integers each: u, v, w, t (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^4, 1 ≤ t ≤ 10^4) – the source city, the destination city, the cost, and the time taken respectively. -----Output----- Print a single integer – the index of the airline that should be promoted. If there are multiple airlines with the overall same minimum cost, choose the one with the shortest total travel time. If there are still ties, choose the airline with the smallest index. -----Examples----- Input 4 2 5 1 2 100 50 1 3 200 100 2 3 150 80 2 4 200 120 3 4 300 150 3 1 2 90 40 1 3 220 110 3 4 310 160 Output 2 Input 3 3 2 1 2 100 50 2 3 200 100 3 1 3 250 120 2 3 80 60 1 1 2 50 30 Output 3 -----Note----- In the first sample, the second airline provides the cheapest flight (90) from city 1 to city 2 and all other flights also comparatively lesser in cost. Hence the second airline is considered. In the second sample, the third airline provides the cheapest flight mainly between city 1 to city 2, and hence other flights comparatively are more valuable promoting it over other airlines.","solution":"import sys def promote_airline(n, k, airlines): def total_cost_and_time(flights): total_cost = 0 total_time = 0 for u, v, w, t in flights: total_cost += w total_time += t return total_cost, total_time best_index = -1 best_cost = sys.maxsize best_time = sys.maxsize for i in range(k): m_i = len(airlines[i]) current_cost, current_time = total_cost_and_time(airlines[i]) if (current_cost < best_cost or (current_cost == best_cost and current_time < best_time)): best_cost = current_cost best_time = current_time best_index = i return best_index # Example usage n = 4 k = 2 airlines = [ [(1, 2, 100, 50), (1, 3, 200, 100), (2, 3, 150, 80), (2, 4, 200, 120), (3, 4, 300, 150)], [(1, 2, 90, 40), (1, 3, 220, 110), (3, 4, 310, 160)] ] print(promote_airline(n, k, airlines)) # Output should be 1 (zero-indexed)"},{"question":"Ravi is interested in studying the uniqueness of characters in strings. He wants to determine whether a given string can have all of its characters rearranged to form a palindrome. A palindrome is a sequence that reads the same backward as forward. Help him find out whether it\'s possible or not. Example 1: Input: s = \\"civic\\" Output: 1 Explanation: \\"civic\\" is already a palindrome. Example 2: Input: s = \\"ivicc\\" Output: 1 Explanation: \\"ivicc\\" can be rearranged to \\"civic,\\" which is a palindrome. Example 3: Input: s = \\"hello\\" Output: 0 Explanation: \\"hello\\" cannot be rearranged to form a palindrome. Your Task: You don\'t need to read input or print anything. Complete the function canFormPalindrome() which takes a string s as input parameter and returns 1 if it is possible to rearrange the string into a palindrome, else return 0. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= length of s <= 10^6","solution":"def canFormPalindrome(s): Determines if the characters of the input string can be rearranged to form a palindrome. Args: s (str): The input string. Returns: int: 1 if the characters can be rearranged to form a palindrome, 0 otherwise. from collections import Counter # Count the occurrences of each character char_count = Counter(s) # A string can be rearranged to form a palindrome if at most one character # has an odd frequency. odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return 1 if odd_count <= 1 else 0 # Example usage: # print(canFormPalindrome(\\"civic\\")) # Output: 1 # print(canFormPalindrome(\\"ivicc\\")) # Output: 1 # print(canFormPalindrome(\\"hello\\")) # Output: 0"},{"question":"Alex works in a library and he is responsible for managing book loans. The library uses a simple loan policy: any book can be borrowed for up to 14 days. However, if a book is not returned on time, a fine is imposed. The fine is calculated as 1 dollar per day for the first 5 days, 2 dollars per day for the next 5 days, and 3 dollars per day for any additional days after that. Alex needs a program to calculate the total fine for each loan based on the number of days it is overdue. Write a function that will calculate the fine for multiple loans. Input - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of loans. - The next n lines each contain an integer d (0 ≤ d ≤ 365) — the number of days a particular loan is overdue. Output For each loan, output the total fine on a new line. Example Input 3 3 10 20 Output 3 15 45 Explanation - For the first loan: 3 days overdue results in 3 * 1 = 3 fine. - For the second loan: 10 days overdue results in 5 * 1 + 5 * 2 = 15 fine. - For the third loan: 20 days overdue results in 5 * 1 + 5 * 2 + 10 * 3 = 45 fine.","solution":"def calculate_fines(loans): Calculate the fine for each loan based on the number of overdue days. :param loans: List of integers where each integer represents the number of days a loan is overdue. :return: List of integers representing the fine for each loan. fines = [] for days_overdue in loans: fine = 0 if days_overdue <= 5: fine = days_overdue * 1 elif days_overdue <= 10: fine = 5 * 1 + (days_overdue - 5) * 2 else: fine = 5 * 1 + 5 * 2 + (days_overdue - 10) * 3 fines.append(fine) return fines"},{"question":"Given a list of non-negative integers, arrange them such that they form the largest possible number. Example: Input: [3, 30, 34, 5, 9] Output: \\"9534330\\" Explanation: You could try many combinations (every permutation is needed, although that leads to high time complexity), but the largest formed number is 9534330.","solution":"from functools import cmp_to_key def largest_number(nums): Arranges numbers to form the largest possible number. Args: nums: List of non-negative integers. Returns: A string representing the largest possible combination. if not nums: return \\"\\" # Convert list of integers to list of strings nums = list(map(str, nums)) # Custom comparator to decide which string should come first in concatenation def compare(a, b): if a + b > b + a: return -1 elif a + b < b + a: return 1 else: return 0 # Sort strings using custom comparator sorted_nums = sorted(nums, key=cmp_to_key(compare)) # Combine sorted numbers into largest number largest_num = \'\'.join(sorted_nums) # Remove leading zeros if largest_num[0] == \'0\': return \'0\' return largest_num"},{"question":"Taro has N daily chores scheduled for his holiday. Over the holiday period, he plans to complete a list of M special projects as a surprise for his family. Each project i takes exactly B_i days to complete, and Taro cannot skip or swap the days once he starts a project. Taro wants to make the most out of his holiday while ensuring all chores are completed. Assuming he can still complete his daily chores while working on his projects, what is the maximum possible number of full days he can spend without doing any projects given his schedule? If Taro cannot complete all projects within the N days, print -1 instead. -----Constraints----- - 1 leq N leq 10^5 - 1 leq M leq 10^3 - 1 leq B_i leq 10^3 -----Input----- Input is given from Standard Input in the following format: N M B_1 ... B_M -----Output----- Print the maximum number of full days Taro can spend away from doing special projects or chores during his holiday, or -1 if he cannot complete all projects. -----Sample Input----- 50 3 7 4 9 -----Sample Output----- 30 For example, Taro can allocate 7 complete days to the first project, 4 complete days to the second project, and 9 complete days to the third project. This sums up to 20 days devoted to projects. Hence, he can spend the remaining 30 days away from projects (while still completing his daily chores on those days).","solution":"def max_free_days(N, M, B): # Total days required to complete all M projects total_project_days = sum(B) # If the total days required exceeds available days, return -1 if total_project_days > N: return -1 # Maximum free days are the remaining days after completing all projects max_free_days = N - total_project_days return max_free_days"},{"question":"For a given list of integers, write a function to return the maximum sum of any subarray (contiguous elements) of at least size 2. If the list contains less than 2 elements, return 0. SAMPLE INPUT [3, -2, 5, -1, 6] SAMPLE OUTPUT 10 Explanation The subarray with the maximum sum of at least size 2 is [3, -2, 5, -1, 6] => 10.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any subarray (contiguous elements) of at least size 2. If the list contains less than 2 elements, return 0. if len(arr) < 2: return 0 max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum += num max_sum = max(max_sum, current_sum) if current_sum < 0: current_sum = 0 return max_sum"},{"question":"In a small town, there is a unique vending machine that dispenses only two types of items: chocolates and candies. The vending machine is represented as a grid with \'m\' rows and \'n\' columns. Each cell in the grid contains one item, and you can obtain an item by selecting a rectangular sub-grid formed by the top-left cell (1,1) and any bottom-right cell (i,j). The vending machine rotates between two modes: Mode A and Mode B. - In Mode A, selecting a sub-grid gives you the item present at the cell (i,j) (bottom-right cell of the selected sub-grid). - In Mode B, selecting a sub-grid gives you the item present at the cell (1,1) (top-left cell of the selected sub-grid). Alice and Bob are standing in front of the vending machine. Alice always plays in Mode A, and Bob always plays in Mode B. They take turns selecting a rectangular sub-grid starting from the top-left corner. Alice plays first, and they alternate turns. The player who cannot make a move loses the game. Assuming both play optimally, determine the winner for a given configuration of the vending machine and the number of total items of each type. ------ Input format: ------ The first line contains an integer T, the number of test cases. Each of the next T lines describes a test case, consisting of: - Two integers m and n, the number of rows and columns in the vending machine grid. - A string of length m*n filled with characters \'C\' (for chocolate) and \'D\' (for candy) representing the items in the vending machine, read row-wise. ------ Output format: ------ Output T lines, one for each test case, containing \\"ALICE\\" if Alice wins the game, or \\"BOB\\" if Bob wins the game. Constraints: 1 ≤ T ≤ 1000 1 ≤ m, n ≤ 100 The string length in each test case is m*n. ----- Sample Input 1 ------ 2 2 2 CDCC 3 3 CDDDCCCCC ----- Sample Output 1 ------ BOB ALICE Note: For the first test case, both players select the sub-grid (1,1) to (2,2); however, since Bob makes the last move, he wins the game. For the second test case, Alice can make a move in such a way that Bob can no longer make a move, thus winning the game.","solution":"def determine_winner(m, n, grid_string): Determines the winner of the game based on the dimensions of the grid and the grid\'s configuration. Alice always starts and plays in Mode A, while Bob plays in Mode B. # If either dimension of the grid is even, Alice will win if m % 2 == 0 or n % 2 == 0: return \\"ALICE\\" else: return \\"BOB\\" def game_winner(T, test_cases): results = [] for i in range(T): m, n, grid = test_cases[i] winner = determine_winner(m, n, grid) results.append(winner) return results"},{"question":"Given an integer `n`, write a program to calculate the nth Fibonacci number. The Fibonacci sequence is defined as: ``` F(0) = 0 F(1) = 1 F(n) = F(n-1) + F(n-2) for n > 1 ``` Your task is to implement the function `fibonacci(n)` that will return the nth Fibonacci number. Examples: -1 -> 0 (return 0 for all negative inputs) 0 -> 0 1 -> 1 2 -> 1 10 -> 55 20 -> 6765 Notes: - The function should handle edge cases where `n` is less than 0 by returning 0. - Aim to implement an efficient solution that can handle larger values of `n`. If you have suggestions to improve this problem, you\'re welcome to share them.","solution":"def fibonacci(n): Returns the nth Fibonacci number. If n is negative, returns 0. if n < 0: return 0 elif n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"A railway station wants to manage the trains arriving at the station by determining the maximum number of trains that can be at the station simultaneously. Each train has its arrival and departure times, and a train can only be at the station between its arrival and departure time inclusively. Write a program to calculate the maximum number of trains at the station at any given time. -----Input----- The first line contains an integer t (1 leq t leq 10), the number of test cases. For each test case: - The first line contains an integer n (1 leq n leq 10^5), the number of trains. - Each of the next n lines contains two space-separated integers, a_i and d_i (1 leq a_i < d_i leq 10^6), the arrival and departure times of the i-th train. -----Output----- Print t lines, each containing a single integer, the maximum number of trains at the station simultaneously for each test case. -----Example----- Input 2 3 100 200 150 300 200 400 4 900 1000 1000 1100 950 1050 1100 1200 Output 2 2","solution":"def max_trains_at_station(t, test_cases): results = [] for trains in test_cases: events = [] for (arrival, departure) in trains: events.append((arrival, 1)) # Train arrives events.append((departure, -1)) # Train departs # Sort events. If two events occur at the same time, departures (-1) should come before arrivals (1). events.sort(key=lambda x: (x[0], x[1])) max_trains = 0 current_trains = 0 for event in events: current_trains += event[1] max_trains = max(max_trains, current_trains) results.append(max_trains) return results"},{"question":"=====Problem Statement===== You have a dictionary containing item names as keys and their respective prices as values. Your task is to update the dictionary based on a list of messages you receive, either to add a new item or update the price of an existing item. Task You will be given a dictionary and a list of messages. Each message will contain a command to add a new item or update an existing item. You need to update the dictionary accordingly. =====Example===== Example >>> prices = {\'apple\': 2.0, \'banana\': 1.5} >>> messages = [\'UPDATE apple 2.2\', \'ADD orange 1.8\'] >>> update_prices(prices, messages) >>> print(prices) {\'apple\': 2.2, \'banana\': 1.5, \'orange\': 1.8} In this example, the price of \'apple\' is updated to 2.2 and a new item \'orange\' with a price of 1.8 is added to the dictionary. =====Input Format===== The first line contains a dictionary where keys are item names and values are their prices. The next line contains a list of strings, each representing a message in the format \\"COMMAND item price\\". =====Output Format===== Modify the dictionary based on the messages and print the updated dictionary. =====Constraints===== - The dictionary will not be empty. - Messages will only contain valid commands (\\"UPDATE\\" or \\"ADD\\"). - Item names will be unique. =====Function Signature===== def update_prices(prices: dict, messages: list) -> None: =====Explanation===== You need to implement the function `update_prices` which will modify the given dictionary based on the provided messages. The function does not return anything; it modifies the dictionary in place. =====Example===== >>> prices = {\'bread\': 1.5, \'milk\': 0.99} >>> messages = [\'ADD eggs 2.1\', \'UPDATE milk 1.2\'] >>> update_prices(prices, messages) >>> print(prices) {\'bread\': 1.5, \'milk\': 1.2, \'eggs\': 2.1} Notice how the dictionary is updated with the new price for \'milk\' and the new item \'eggs\' is added.","solution":"def update_prices(prices: dict, messages: list) -> None: Updates the \'prices\' dictionary based on the list of \'messages\'. Each message in the format \\"COMMAND item price\\" will either update the price of an existing item or add a new item to the dictionary. for message in messages: command, item, price = message.split() price = float(price) if command == \'UPDATE\' or command == \'ADD\': prices[item] = price"},{"question":"You are given a list of products in a warehouse, each identified by its serial number. A serial number is a string of uppercase/lowercase letters and digits. However, due to a glitch, all the spaces between the serial numbers have disappeared, resulting in a long string of concatenated serial numbers. Your task is to split the string back into the original list of valid serial numbers. Each serial number is exactly 10 characters long. Input A single string containing the concatenated serial numbers. The length of this string is between 10 and 200, inclusive, and it is guaranteed to be a multiple of 10. Output Output the list of serial numbers, each on a new line. Examples Input AB12C34DEFTG5678HIJKL4MNOPqrst90UYc789 Output AB12C34DEF TG5678HIJK L4MNOPqrst 90UYc789","solution":"def split_serial_numbers(concatenated_serials): Splits a long string of concatenated serial numbers into a list of valid serial numbers. Each serial number is exactly 10 characters long. Parameters: concatenated_serials (str): The concatenated serial numbers string. Returns: list of str: A list containing the original serial numbers. n = len(concatenated_serials) serial_numbers = [concatenated_serials[i:i+10] for i in range(0, n, 10)] return serial_numbers"},{"question":"There is a dense forest with various species of animals. The forest is divided into N regions, numbered from 1 to N, and initially, no animals can move between regions due to dense trees. The forest rangers want to facilitate movement by creating portals between the regions. You need to help the rangers by processing Q queries of the form: t x y where t denotes the type of query and can be 0 or 1. If t is 0, it means a new portal is created between regions x and y. If t is 1, you need to determine if animals can move from region x to region y using the existing portals. Two regions are accessible to each other if there is a direct or indirect connection through one or more portals. Input The first line contains 2 integers N and Q indicating the number of regions and the number of queries, respectively. In the next Q lines, each line has a query of the form \\"t x y\\". Output For each query of type 1, print \\"Yes\\" if movement between regions x and y is possible, or \\"No\\" otherwise (without quotes). Constraints 2 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ x, y ≤ N For each test case, x ≠ y Example Input 6 8 0 1 3 1 1 3 0 2 3 1 1 2 0 4 5 1 4 6 0 5 6 1 4 6 1 2 6 Output Yes Yes No Yes No Explanation Initially, no portals exist. Create a portal between regions 1-3. Regions 1 and 3 are now connected, so movement is possible. Create a portal between regions 2-3. Regions 1, 2, and 3 form a connected component, enabling movement. Create a portal between regions 4-5. Regions 4 and 5 are now connected, but region 6 remains isolated. Create a portal between regions 5-6. Connected regions are now 4-5-6, facilitating movement within this group. No direct or indirect connection between region 2 and 6 exists.","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [1] * size def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def process_queries(N, queries): uf = UnionFind(N) results = [] for t, x, y in queries: if t == 0: uf.union(x - 1, y - 1) elif t == 1: if uf.find(x - 1) == uf.find(y - 1): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"In a faraway land of computation, there exists a magical grid of size n times n. Each cell of the grid contains a non-negative integer a_{ij} representing the amount of gold in that cell. A magical creature starts its journey from the top-left cell (position (1,1)) and aims to reach the bottom-right cell (position (n,n)). The creature can move either to the right or down from its current cell. This means that from cell (i,j), it can move to (i+1,j) or (i,j+1) as long as the destination cell is within the grid. The creature wants to collect the maximum amount of gold during its journey. Given the grid, determine the maximum amount of gold the creature can collect when it starts at the top-left cell and ends at the bottom-right cell. -----Input----- The first line of input contains a single integer n (1 le n le 1000) — the size of the grid. Each of the next n lines contains n non-negative integers 0 le a_{ij} le 10^6 — the amount of gold in each cell of the grid. -----Output----- Output a single integer — the maximum amount of gold the creature can collect. -----Examples----- Sample Input 1: 3 1 2 3 4 5 6 7 8 9 Sample Output 1: 29 Sample Input 2: 2 5 1 2 3 Sample Output 2: 10","solution":"def max_gold(n, grid): # Initialize a dp table with the same structure as the grid dp = [[0] * n for _ in range(n)] # Start from the top-left corner of the grid dp[0][0] = grid[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The final cell contains the maximum gold collected return dp[-1][-1]"},{"question":"Each country\'s government has decided to conduct a national survey to identify the most common first and last names among the population. Your task is to develop a system to help analyze the survey data efficiently. Given a list of participants, count the occurrences of each first and last name and determine which names are the most common. -----Input----- The first line of input contains an integer 1 le N le 1000, representing the number of participants. Each of the next N lines contains two space-separated strings: - the first string f represents the first name of a participant (length at least 1 and at most 20 characters, containing only upper and lower case letters), - the second string l represents the last name of a participant (length at least 1 and at most 20 characters, containing only upper and lower case letters). -----Output----- Output two lines: - The first line should contain the most common first name. If there is a tie, print the lexicographically smallest one. - The second line should contain the most common last name. If there is a tie, print the lexicographically smallest one. -----Examples----- Sample Input: 5 Alice Smith Bob Johnson Alice Johnson Bob Smith Carol Johnson Sample Output: Alice Johnson","solution":"def most_common_names(n, participants): from collections import Counter first_names = [p[0] for p in participants] last_names = [p[1] for p in participants] first_name_count = Counter(first_names) last_name_count = Counter(last_names) most_common_first_name = min([name for name, count in first_name_count.items() if count == max(first_name_count.values())]) most_common_last_name = min([name for name, count in last_name_count.items() if count == max(last_name_count.values())]) return most_common_first_name, most_common_last_name # Example Usage n = 5 participants = [ (\\"Alice\\", \\"Smith\\"), (\\"Bob\\", \\"Johnson\\"), (\\"Alice\\", \\"Johnson\\"), (\\"Bob\\", \\"Smith\\"), (\\"Carol\\", \\"Johnson\\") ] print(most_common_names(n, participants)) # Outputs: (\'Alice\', \'Johnson\')"},{"question":"A robot is navigating a grid of size N x N, starting from the top-left corner (0, 0). The robot can move either right (R) or down (D). However, certain cells in the grid are blocked, meaning the robot cannot pass through them. Determine if there exists a path for the robot to reach the bottom-right corner (N-1, N-1) from the top-left corner (0, 0) under these conditions. ------ Input Format ------ - The first line contains a single integer N, the size of the grid. - The next N lines each contain N integers (0 or 1) separated by spaces, where 0 means the cell is open and 1 means the cell is blocked. ------ Output Format ------ Print a single line containing Yes if there is a path and No otherwise. ------ Constraints ------ 2 ≤ N ≤ 50 Each cell in the grid contains either 0 or 1. ------ Sample Input 1 ------ 4 0 0 0 0 0 1 0 1 0 0 0 1 1 1 0 0 ------ Sample Output 1 ------ Yes ------ Explanation 1 ------ The robot can follow the path: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (2,2) -> (2,1) -> (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) ------ Sample Input 2 ------ 3 0 1 0 1 0 0 0 0 1 ------ Sample Output 2 ------ No ------ Explanation 2 ------ There is no possible way for the robot to reach the bottom-right corner.","solution":"def is_path_exists(N, grid): Determines if there is a path from the top-left corner to the bottom-right corner of the grid, moving only right or down, and avoiding blocked cells. :param N: Size of the grid (NxN) :param grid: 2D list representing the grid where 0 is open and 1 is blocked :return: \'Yes\' if a path exists, \'No\' otherwise def dfs(x, y, visited): if x == N - 1 and y == N - 1: return True for dx, dy in [(1, 0), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) if dfs(nx, ny, visited): return True visited.remove((nx, ny)) return False if grid[0][0] == 1 or grid[N-1][N-1] == 1: return \'No\' visited = set() visited.add((0, 0)) return \'Yes\' if dfs(0, 0, visited) else \'No\'"},{"question":"# Save the Trees Alice and Bob are environmentalists who work together to plant trees in different areas. They have a certain number of saplings and they want to evenly distribute them between the two of them so that each of them gets an odd number of saplings. However, they want the number of saplings they use to be maximized. Given a number of saplings `n` (`1 ≤ n ≤ 100`), determine the number of saplings Alice and Bob should each receive to satisfy these conditions. If it\'s not possible to split the number of saplings as required, return `-1`. Task Write a function to determine whether it is possible to divide the saplings as specified. If yes, return a tuple containing the number of saplings Alice and Bob each should receive. If not, return `-1`. # Input - A single integer `n`, representing the number of saplings. # Output - A tuple of two integers representing the number of saplings Alice and Bob will each receive, or `-1` if it is not possible to split the saplings accordingly. Examples ```python save_the_trees(10) -> (5, 5) save_the_trees(15) -> (7, 7) save_the_trees(4) -> -1 ``` # Note - In the first example, Alice and Bob can each receive 5 saplings, which are odd numbers and the total saplings (5 + 5) equal 10. - In the third example, it\'s not possible to split 4 saplings into two odd numbers since the sum of two odd numbers is even.","solution":"def save_the_trees(n): Determines if it\'s possible to split `n` saplings so that both Alice and Bob each receive an odd number of saplings. If possible, returns a tuple with the number of saplings each should receive. If not, returns -1. if n < 3: return -1 elif n % 2 == 0: if (n // 2) % 2 == 1: return (n // 2, n // 2) else: return ((n // 2) - 1, (n // 2) + 1) else: return -1"},{"question":"-----Problem description----- A large organization uses a system of automated doors to regulate entry to their high-security zones. Each door is controlled by a specific algorithm which determines whether it should open or close under certain conditions. The doors are arranged sequentially along a corridor. Each door can either open or remain closed based on the sequence of commands it receives. The commands are given as a binary string where \'1\' means \\"attempt to open door\\" and \'0\' means \\"do nothing\\". Additionally, each door will only open if every preceding door has opened before it. If any preceding door remains closed, all following doors will remain closed regardless of the commands. You need to determine which doors along the corridor will open given the command sequence. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing a binary string S representing the command sequence for the doors. -----Output----- For each test case, output a single line containing the binary string representing the state of the doors after the command sequence. \'1\' represents an opened door and \'0\' represents a closed door. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ |S| ≤ 10^5 -----Example----- Input: 3 110 101 11110 Output: 110 100 11110 -----Explanation----- Example case 1: The command sequence is \'110\'. The first door will open since it receives the command \'1\'. The second door will also open since all preceding doors have opened (\'1\'). The third door will remain closed since the command for it is \'0\'. The resultant state of the doors is \'110\'. Example case 2: The command sequence is \'101\'. The first door will open since it receives the command \'1\'. The second door will remain closed because it either does not receive an open command or a preceding door is closed. The third door will also remain closed as the second door did not open. The resultant state of the doors is \'100\'. Example case 3: The command sequence is \'11110\'. All preceding doors open in sequence as they receive the command \'1\'. The last door remains closed since it does not receive an open command. The resultant state of the doors is \'11110\'.","solution":"def door_states(commands): Given a binary string representing the command sequence for the doors, returns binary string representing the state of the doors after the commands. result = [] can_open = True for command in commands: if can_open and command == \'1\': result.append(\'1\') else: result.append(\'0\') can_open = False return \'\'.join(result) def solve(T, command_sequences): Processes multiple test cases and returns the results for each as a list of strings. results = [] for commands in command_sequences: results.append(door_states(commands)) return results"},{"question":"A robotic arm has to pick up boxes and place them in a stack. The robot receives a list of commands in the form of three integers for each command: `c`, `x`, and `y`. The command `c` can have three possible values: - `1`: Pick up a box of weight `x` from position `y` and add it to the stack. - `2`: Check whether the current stack is valid for lifting. A stack is valid if for every box placed below another box in the stack, the box below is at least as heavy as the box above. - `3`: Remove the box from the top of the stack (if the stack is non-empty). Write a program to simulate the execution of these commands and determine whether the stack is valid after each `2` command. -----Input----- - The first line contains an integer N denoting the number of commands. - The next N lines each contain three integers c, x, and y. -----Output----- - For each command of type `2`, print \\"Valid\\" if the stack is valid, otherwise print \\"Invalid\\". -----Constraints----- - 1 leq N leq 10^6 - 1 leq x, y leq 10^9 - `c` will always be one of `1`, `2`, `3`. -----Sample Input----- 7 1 10 5 1 20 3 2 0 0 3 0 0 2 0 0 1 15 2 2 0 0 -----Sample Output----- Invalid Valid Invalid -----Explanation----- - For the first command `1 10 5`, a box of weight `10` is placed on the stack. - For the second command `1 20 3`, a box of weight `20` is placed on top of the previous box, making the stack sequence [10, 20]. - The third command `2 0 0` checks whether the stack [10, 20] is valid. Since `20` is heavier than `10` and is on top, the stack is invalid. - The fourth command `3 0 0` removes the top box (weight `20`), leaving the stack as [10]. - The fifth command `2 0 0` checks whether the stack [10] is valid. A single box stack is always valid, so the stack is valid. - The sixth command `1 15 2` adds a box of weight `15` on top of the stack, resulting in [10, 15]. - The seventh command `2 0 0` checks whether the stack [10, 15] is valid. Since `15` is heavier than `10` and is on top, the stack is invalid.","solution":"def simulate_robot_commands(commands): stack = [] results = [] for command in commands: c, x, y = command if c == 1: # Pick up a box of weight `x` from position `y` and add it to the stack. stack.append(x) elif c == 2: # Check whether the current stack is valid for lifting. # A stack is valid if for every box placed below another box in the stack, # the box below is at least as heavy as the box above. is_valid = all(stack[i] >= stack[i + 1] for i in range(len(stack) - 1)) results.append(\\"Valid\\" if is_valid else \\"Invalid\\") elif c == 3: # Remove the box from the top of the stack (if the stack is non-empty). if stack: stack.pop() return results"},{"question":"A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. A twin prime is a pair of prime numbers that differ by 2. For example, (3, 5), (11, 13), and (17, 19) are twin primes. Task: Write a function ```twinPrimes(n)``` which returns all twin primes up to n (inclusive). The returned value should be an array of tuples, where each tuple contains a pair of twin primes. The pairs should be sorted in increasing order. For example, when the input is 20, the return value should be: ```[(3, 5), (5, 7), (11, 13), (17, 19)]``` Input: - The input `n` is an integer. If the input is not a positive integer greater than 1, the function should return an empty array. For example, if the input is 1 or -5, the function should return an empty array. Example: ``` twinPrimes(20) => [(3, 5), (5, 7), (11, 13), (17, 19)] ```","solution":"def is_prime(num): Helper function to check if a number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def twinPrimes(n): Returns all twin primes up to n (inclusive). if not isinstance(n, int) or n <= 1: return [] primes = [num for num in range(2, n + 1) if is_prime(num)] twin_prime_pairs = [(primes[i], primes[i + 1]) for i in range(len(primes) - 1) if primes[i + 1] - primes[i] == 2] return twin_prime_pairs"},{"question":"Tom and Jerry are playing a game involving a string S of length N containing only characters \'a\' and \'b\'. The game has the following rules: 1. Tom can change any occurrence of \'a\' to \'b\', and Jerry can change any occurrence of \'b\' to \'a\'. 2. They take turns, starting with Tom, and each must change exactly one character on their turn. 3. The game ends when all characters in the string are identical. Given the initial string S, determine if it is possible for Tom to ensure that he wins the game, assuming both play optimally. If Tom can ensure a win, print \\"Tom\\". Otherwise, print \\"Jerry\\". -----Constraints----- - 1 leq N leq 100 - S consists of \'a\' and \'b\' only. -----Input----- The input is given from Standard Input in the following format: S -----Output----- Print \\"Tom\\" if Tom can ensure a win, otherwise print \\"Jerry\\". -----Sample Input 1----- ab -----Sample Output 1----- Tom -----Sample Input 2----- aaab -----Sample Output 2----- Jerry","solution":"def determine_winner(S): This function determines whether Tom can ensure a win in the game. Parameters: S (str): A string containing only characters \'a\' and \'b\'. Returns: str: \'Tom\' if Tom can ensure a win, \'Jerry\' otherwise. count_a = S.count(\'a\') count_b = S.count(\'b\') # If initial counts are the same, Tom can win by changing the one \'a\' to \'b\'. if count_a == count_b: return \\"Tom\\" # If counts differ, Jerry will always have the last move # because after an even-move cycle, Jerry changes the count to his advanatage else: return \\"Jerry\\""},{"question":"Given a binary tree, write a function to return the level order traversal of the tree with each level ordered alternatively. The level order traversal of a binary tree is the traversal of the nodes from left to right by level. Example: Input: ``` 1 / 2 3 / / 4 5 6 7 ``` Output: [[1], [3, 2], [4, 5, 6, 7]] Explanation: Level 0: [1] Level 1: [3, 2] Level 2: [4, 5, 6, 7] Your Task: You don\'t need to read the input or print anything. Your task is to complete the function `zigzagLevelOrder` which takes the root of the binary tree as input and returns a list of lists containing the values of nodes for each level in an alternate manner. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: - The number of nodes in the binary tree is in the range [1, 2000]. - -100 ≤ Node.val ≤ 100","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzagLevelOrder(root): Returns the zigzag level order traversal of a binary tree. :param root: TreeNode, the root of the binary tree :return: List[List[int]], level order traversal but each level ordered alternatively if not root: return [] results = [] current_level = deque([root]) left_to_right = True while current_level: level_values = deque() next_level = deque() while current_level: node = current_level.popleft() if left_to_right: level_values.append(node.val) else: level_values.appendleft(node.val) if node.left: next_level.append(node.left) if node.right: next_level.append(node.right) results.append(list(level_values)) current_level = next_level left_to_right = not left_to_right return results"},{"question":"Given an integer N, determine the number of ways to draw 3 distinct points from an array of N integers such that they form a triangle with positive area. -----Constraints----- - 3 leq N leq 10^5 - Each of the N integers represents a point on the x-axis with some integer coordinate value. -----Input----- Input is given from standard input in the following format: N x1 x2 x3 ... xN -----Output----- Print the number of ways to choose 3 points that form a triangle with positive area. -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 10 Explanation: From the given points, we can form the following triangles with positive area: (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5), (1, 2, 3)","solution":"def count_triangle_ways(N, points): Determine the number of ways to draw 3 distinct points from an array of N integers such that they form a triangle with positive area. Arguments: N : int : number of points points : list[int] : list of integer coordinates of points on the x-axis Returns: int : Number of ways to choose 3 points that form a triangle with positive area. # Sorting the points first points.sort() # Any 3 distinct points on a line with sorted coordinates will always form a triangle with positive area. # Using combination formula C(N, 3) = N * (N-1) * (N-2) / 6 from math import comb return comb(N, 3)"},{"question":"A company is organizing a large conference where people from various countries are invited. Each participant has a distinct badge ID represented by an alphanumeric string. The badge IDs can be of different lengths. As a souvenir, the company wants to distribute small badges that contain the longest common prefix (LCP) shared by all badge IDs. If no common prefix exists, they should distribute a special badge with \\"No common prefix\\". Your task is to write a program that determines the longest common prefix from the list of badge IDs. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of participants. Each of the next n lines contains a single alphanumeric string si (1 ≤ |si| ≤ 100) — the badge ID of the i-th participant. Output Print the longest common prefix shared by all badge IDs. If no such prefix exists, print \\"No common prefix\\". Examples Input 4 participant1 partnership party particular Output part Input 3 badge123 badge456 badge789 Output badge Input 3 abc xyz 123 Output No common prefix","solution":"def longest_common_prefix(strs): Determines the longest common prefix amongst a list of strings. If no common prefix exists, returns \\"No common prefix\\". if not strs: return \\"No common prefix\\" # Sort the array, the common prefix of the whole array lies in between the first and the last string strs.sort() first = strs[0] last = strs[-1] lcp_length = min(len(first), len(last)) for i in range(lcp_length): if first[i] != last[i]: if i == 0: return \\"No common prefix\\" return first[:i] return first[:lcp_length] # Example usage: # n = 4 # strings = [\\"participant1\\", \\"partnership\\", \\"party\\", \\"particular\\"] # print(longest_common_prefix(strings)) # Outputs \\"part\\""},{"question":"A parking lot has a configuration of cars represented as a sequence of \'N\' characters where each character is either \'C\' (representing a car) or \'E\' (representing an empty space). You are provided with this initial configuration and a series of operations to perform on the parking lot. The operations are given in as \\"Operation P\\" and are defined in the following way: Operation 1: Park a car at the P-th position (turn the P-th character to \'C\'). If the position is already occupied by a car, do nothing. Operation 2: Remove the car from the P-th position (turn the P-th character to \'E\'). If the position is already empty, do nothing. Operation 3: Asks the current number of cars parked in the lot and the longest continuous empty space. Write a program to handle these operations. Input: The first line of input contains an integer N denoting the number of positions in the parking lot. The next line contains N characters (\'C\' or \'E\') representing the initial configuration of the parking lot. The third line contains Q, the number of operations to be performed. Each of the next Q lines contains two integers, the type of operation and P. Output: For each Operation 3, output the current number of cars parked and the length of the longest continuous empty space. Constraints: 1 ≤ N ≤ 100000 1 ≤ Q ≤ 100000 1 ≤ Operation ≤ 3 1 ≤ P ≤ N SAMPLE INPUT 8 CCEECCEE 5 3 0 1 5 3 0 2 2 3 0 SAMPLE OUTPUT 4 2 4 3 3 3 Explanation Initially there are 4 cars and the longest continuous empty segment is of length 2. After parking a car at position 5, the configuration becomes CCEECCEE, but both the number of cars and the longest empty segment remain unchanged. After removing the car from position 2, the configuration changes to CEEEECEE. Now there are 3 cars and the longest continuous empty segment is 3.","solution":"def parking_lot_operations(N, initial_config, operations): parking_lot = list(initial_config) operation_results = [] def count_cars_and_longest_empty_sequence(): cars = parking_lot.count(\'C\') longest_empty = 0 current_empty = 0 for spot in parking_lot: if spot == \'E\': current_empty += 1 if current_empty > longest_empty: longest_empty = current_empty else: current_empty = 0 return cars, longest_empty for operation, P in operations: if operation == 1: if parking_lot[P-1] == \'E\': parking_lot[P-1] = \'C\' elif operation == 2: if parking_lot[P-1] == \'C\': parking_lot[P-1] = \'E\' elif operation == 3: cars, longest_empty = count_cars_and_longest_empty_sequence() operation_results.append((cars, longest_empty)) return operation_results"},{"question":"You are given a grid consisting of n rows and m columns, each cell containing a non-negative integer. Your task is to find the maximum sum of a subgrid that can be obtained by rearranging the rows of the grid. For example, given the grid: ``` 1 2 3 4 5 6 ``` One possible rearrangement is: ``` 4 5 6 1 2 3 ``` The maximum sum subgrid for this rearrangement is the entire grid with sum 4+5+6+1+2+3 = 21. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. Each of the next n lines contains m integers separated by spaces, representing the grid. Output Output one integer — the maximum sum of a subgrid that can be obtained by rearranging the rows of the grid. Example Input 2 3 1 2 3 4 5 6 Output 21 Input 3 3 3 2 1 6 5 4 9 8 7 Output 45 Input 1 5 1 1 1 1 1 Output 5 Explanation In the first example, rearranging the rows to [4 5 6] and [1 2 3] gives the maximum sum subgrid as the entire grid itself with sum 21. In the second example, any rearrangement will give the maximum sum subgrid as the entire grid itself with sum 45.","solution":"def max_sum_of_rearranged_subgrid(n, m, grid): Finds the maximum sum of a subgrid that can be obtained by rearranging the rows of the grid. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of list of int): The grid itself where each inner list is a row. Returns: int: The maximum sum of a subgrid. # Rearrange the rows in non-decreasing order of their total sum sorted_grid = sorted(grid, key=sum, reverse=True) # Calculate the sum of the entire grid after rearrangement max_sum = sum(sum(row) for row in sorted_grid) return max_sum"},{"question":"Overview Write a function that takes in a list of words and a single character, and returns a list of words that contain the given character. The function should be case-insensitive and maintain the original order of words in the input list. ```python filter_words([\\"Apple\\", \\"banana\\", \\"Cherry\\", \\"date\\", \\"Elderberry\\"], \\"a\\") => [\\"Apple\\", \\"banana\\", \\"date\\"] filter_words([\\"Zebra\\", \\"yak\\", \\"Xenon\\", \\"Wasp\\"], \\"z\\") => [\\"Zebra\\"] ``` Specifics - The input will be a list of words (strings) and a single character (string of length 1). - The function should be case-insensitive but should return the words in the same case and order as in the input list. - If no words in the list contain the given character, return an empty list. - The returned list should include every word from the input list that contains the character, in the same order they appear in the input list.","solution":"def filter_words(words, char): Returns a list of words that contain the given character. The search is case-insensitive, but the returned words maintain their original order and case. Args: words (list of str): A list of words. char (str): A single character to search for in words. Returns: list of str: A list of words containing the given character. char_lower = char.lower() return [word for word in words if char_lower in word.lower()]"},{"question":"A famous magician is performing a trick with a sequence of numbers. Given an integer sequence, he performs a series of operations to transform the sequence into a special form where all prime numbers come before all composite numbers, while preserving the relative order of the prime and composite numbers. Your task is to write a program that rearranges the given sequence according to the magician\'s instructions. Input Format The first line contains an integer N, the number of elements in the sequence. The second line contains N space-separated integers, representing the sequence. Output Format Print the rearranged sequence, with all prime numbers coming before all composite numbers, preserving their relative order. Constraints 1 <= N <= 10^5 1 <= sequence[i] <= 10^5 Sample Input #01 6 4 2 6 3 5 8 Sample Output #01 2 3 5 4 6 8 Explanation For the given sequence, the prime numbers are 2, 3, and 5, and they appear in the relative order 2, 3, 5. The composite numbers are 4, 6, and 8 in the relative order 4, 6, 8. Hence, the transformed sequence is 2, 3, 5, 4, 6, 8. Sample Input #02 5 10 7 6 11 9 Sample Output #02 7 11 10 6 9 Explanation For the given sequence, the prime numbers are 7 and 11, and they appear in the relative order 7, 11. The composite numbers are 10, 6, and 9 in the relative order 10, 6, 9. Hence, the transformed sequence is 7, 11, 10, 6, 9.","solution":"def is_prime(n): Determines if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def rearrange_sequence(sequence): Rearranges the given sequence such that all prime numbers come before all composite numbers, while preserving the relative order of the primes and composites. primes = [num for num in sequence if is_prime(num)] composites = [num for num in sequence if not is_prime(num)] return primes + composites"},{"question":"Write a function `word_counter(s)` that takes a string `s` and returns a dictionary where the keys are the words in the string, and the values are the number of times each word appears. A word is defined as a sequence of alphabetic characters (`a-z` and `A-Z`). The function should be case-insensitive, meaning \\"Hello\\" and \\"hello\\" should be counted as the same word. Ignore any punctuation or non-alphabetic characters in the input string. If the input string is empty or contains no words, return an empty dictionary. Examples: ```python word_counter(\\"Hello, hello! How are you?\\") == {\'hello\': 2, \'how\': 1, \'are\': 1, \'you\': 1} word_counter(\\"This is a test. This test is only a test.\\") == {\'this\': 2, \'is\': 2, \'a\': 2, \'test\': 3, \'only\': 1} word_counter(\\"...,,,!!!\\") == {} word_counter(\\"\\") == {} ```","solution":"import re from collections import defaultdict def word_counter(s): Takes a string `s` and returns a dictionary where the keys are the words in the string, and the values are the number of times each word appears. The function is case-insensitive and ignores punctuation. words = re.findall(r\'[a-zA-Z]+\', s.lower()) word_count = defaultdict(int) for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"We have a secret alphabet which contains exactly 26 unique lowercase letters from \'a\' to \'z\'. Given two strings 𝑠 and 𝑡, determine if 𝑠 can be transformed into 𝑡 using the same one-to-one character mapping. -----Input:----- - First-line contains T, the number of test cases. Then the test cases follow. - Each test case consists of two strings s and t separated by a space. -----Output:----- For each test case, output \\"YES\\" if s can be transformed into t using a one-to-one character mapping, otherwise output \\"NO\\". -----Constraints----- - 1 leq T leq 1000 - 1 leq |s|, |t| leq 100000 - s and t contain only lowercase English letters. -----Sample Input:----- 2 abc def foo bar -----Sample Output:----- YES NO","solution":"def can_transform(s, t): Determine if string s can be transformed into string t using a one-to-one character mapping. Parameters: s (str): The source string. t (str): The target string. Returns: str: \\"YES\\" if s can be transformed into t, otherwise \\"NO\\". if len(s) != len(t): return \\"NO\\" s_to_t_mapping = {} t_to_s_mapping = {} for cs, ct in zip(s, t): if (cs in s_to_t_mapping and s_to_t_mapping[cs] != ct) or (ct in t_to_s_mapping and t_to_s_mapping[ct] != cs): return \\"NO\\" s_to_t_mapping[cs] = ct t_to_s_mapping[ct] = cs return \\"YES\\" def process_test_cases(test_cases): Process multiple test cases to determine if the transformations are possible. Parameters: test_cases (list of tuples): List of tuples where each tuple contains two strings (s, t). Returns: list of str: List containing results for each test case (\\"YES\\" or \\"NO\\"). results = [] for s, t in test_cases: results.append(can_transform(s, t)) return results"},{"question":"A tree is an undirected graph in which any two vertices are connected by exactly one path. The diameter of a tree is the length of the longest path between any two vertices in the tree. Given a tree with N vertices, find the diameter of the tree. Constraints * 1 ≤ N ≤ 10,000 Input N a_1 b_1 a_2 b_2 : a_{N-1} b_{N-1} N is the number of vertices in the tree. Each of the next N-1 lines contains two integers a_i and b_i which represent an edge connecting vertex a_i and vertex b_i. Output Print the diameter of the tree. Example Input 5 1 2 2 3 3 4 4 5 Output 4 Explanation The tree with given edges is: ``` 1 - 2 - 3 - 4 - 5 ``` The longest path is from vertex 1 to vertex 5 with length 4. Hence, the diameter of the tree is 4.","solution":"def find_tree_diameter(N, edges): from collections import deque, defaultdict def bfs(start): visited = [-1] * (N + 1) q = deque([start]) visited[start] = 0 farthest_node = start max_distance = 0 while q: node = q.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = visited[node] + 1 q.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance if N == 1: return 0 graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) farthest_node_from_start, _ = bfs(1) _, diameter = bfs(farthest_node_from_start) return diameter"},{"question":"Limak wants to build a party invitation list. Being a social bear, he wants to make sure that every invited friend knows at least one of the other friends on the list. Limak has a list of people he can invite and the friendships among them. He wonders if he can create an invitation list that satisfies his requirement. A connected component in a friendship graph is a subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the supergraph. An invitation list is valid if the subgraph induced by the invited friends forms exactly one connected component. Input The first line contains two integers n (1 ≤ n ≤ 105) and m (0 ≤ m ≤ 105), the number of people and the number of friendships respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a friendship between person u and person v. Output Print \\"Yes\\" (without the quotes) if Limak can create a valid invitation list, otherwise print \\"No\\" (without the quotes). Examples Input 6 4 1 2 2 3 4 5 5 6 Output No Input 5 4 1 2 2 3 3 4 4 5 Output Yes","solution":"def can_create_invitation_list(n, m, friendships): from collections import defaultdict, deque if m == 0: return \\"Yes\\" if n <= 1 else \\"No\\" graph = defaultdict(list) for u, v in friendships: graph[u].append(v) graph[v].append(u) visited = set() components = 0 def bfs(node): queue = deque([node]) visited.add(node) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) for person in range(1, n+1): if person not in visited: components += 1 bfs(person) if components > 1: return \\"No\\" return \\"Yes\\""},{"question":"You are given a sorted array of distinct integers nums and an integer target. Your task is to determine if there exists any two indices i and j such that nums[i] + nums[j] = target, where i neq j. Write a function `findTargetSumIndices(nums, target)` that returns the indices i and j if they exist, otherwise return `[-1, -1]`. The solution should aim to achieve a time complexity of O(n). -----Input----- - An integer array nums sorted in non-decreasing order with distinct values (1 leq text{length of } nums leq 10^5). - An integer target (-10^9 leq target leq 10^9). -----Output----- - An array of two integers, the indices i and j such that nums[i] + nums[j] = target, or `[-1, -1]` if such indices do not exist. -----Examples----- Input nums = [2, 7, 11, 15] target = 9 Output [0, 1] Input nums = [1, 2, 3, 4, 5, 6, 7] target = 13 Output [5, 6] Input nums = [-10, -3, 0, 1, 2] target = -2 Output [1, 3]","solution":"def findTargetSumIndices(nums, target): Returns the indices i and j such that nums[i] + nums[j] = target. If no such indices exist, returns [-1, -1]. :param nums: List[int] - A sorted array of distinct integers :param target: int - The target sum :return: List[int] - A list containing the indices [i, j] left, right = 0, len(nums) - 1 while left < right: curr_sum = nums[left] + nums[right] if curr_sum == target: return [left, right] elif curr_sum < target: left += 1 else: right -= 1 return [-1, -1]"},{"question":"Transpose and Flatten Two of the most commonly used functions in numpy are transpose and flatten. - The transpose tool returns the transposed array where columns and rows are swapped. - The flatten tool returns the array collapsed into a 1D array. Task You are given a mbox{N}Xmbox{M} integer array. Your task is to print the transpose and flatten results. Input Format The first line contains space separated integers mbox{N} and mbox{M}. The next mbox{N} lines contains the space separated elements of the mbox{M} columns. Output Format First, print the transposed array and then print the flattened array. Sample Input 2 3 1 2 3 4 5 6 Sample Output [[1 4] [2 5] [3 6]] [1 2 3 4 5 6]","solution":"import numpy as np def transpose_and_flatten(N, M, array): # Convert the list of lists into a NumPy array np_array = np.array(array) # Perform the transpose transposed = np_array.T # Perform the flatten operation flattened = np_array.flatten() return transposed, flattened"},{"question":"Twilight Sparkle is organizing a celebration in Ponyville and wants to make sure that every building is decorated with balloons. Each building can have many types of balloons, but there\'s a restriction: no two adjacent buildings (connected by a road) can have the same type of balloon. The buildings and roads in Ponyville are represented as an undirected graph where vertices are buildings and edges are roads connecting them. Can you help Twilight Sparkle assign balloon types to each building such that the restriction is maintained? Input The first line contains two integers n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105) — the number of buildings and the number of roads in Ponyville. Each of the following m lines contains two integers ui, vi (1 ≤ ui, vi ≤ n; ui ≠ vi), these integers describe a road between buildings ui and vi. Output If it\'s possible to assign balloon types to each building, print \\"YES\\" on the first line. On the second line, print n integers a1, a2, ..., an (1 ≤ ai ≤ n), where ai denotes the type of balloon assigned to the i-th building. The balloon types should be numbered from 1 to n. If there are multiple possible solutions, print any of them. If it\'s not possible to assign the balloon types satisfying the restriction, print \\"NO\\". Examples Input 3 3 1 2 2 3 3 1 Output YES 1 2 3 Input 4 4 1 2 2 3 3 4 4 1 Output YES 1 2 1 2 Input 3 2 1 2 2 3 Output YES 1 2 1","solution":"def assign_balloons(n, m, roads): from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Array to store colors assigned to each vertex colors = [-1] * (n + 1) def bfs(start): queue = deque([start]) colors[start] = 1 # Start coloring with color 1 while queue: node = queue.popleft() current_color = colors[node] # Try all possible colors (since we can use up to n different colors) for neighbor in graph[node]: if colors[neighbor] == -1: # If not colored yet for color in range(1, n + 1): if all(colors[nbr] != color for nbr in graph[neighbor]): colors[neighbor] = color break queue.append(neighbor) elif colors[neighbor] == current_color: return False return True for vertex in range(1, n + 1): if colors[vertex] == -1: # If not yet visited if not bfs(vertex): return \\"NO\\", [] return \\"YES\\", colors[1:] # Example usage: # n = 3 # m = 3 # roads = [(1, 2), (2, 3), (3, 1)] # result = assign_balloons(n, m, roads)"},{"question":"Given a binary tree, return the vertical order traversal of its nodes\' values. (ie, from top to bottom, column by column). If two nodes are in the same row and column, the order should be from left to right. Example: Input: [3,9,20,null,null,15,7] Output: [ [9], [3,15], [20], [7] ] Explanation: 3 / 9 20 / 15 7","solution":"from collections import defaultdict, deque from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def verticalOrder(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] column_table = defaultdict(list) queue = deque([(root, 0)]) while queue: node, column = queue.popleft() if node is not None: column_table[column].append(node.val) queue.append((node.left, column - 1)) queue.append((node.right, column + 1)) sorted_columns = sorted(column_table.keys()) return [column_table[column] for column in sorted_columns]"},{"question":"James has a favorite set of colors represented as positive integers. He enjoys creating subsets from this set and arranging each subset in non-decreasing order. Once ordered, he likes to compute the sum of the unique elements in each subset. You are tasked with writing a program that, given James\' set of colors, calculates the highest possible sum of unique elements for any subset of his original set. -----Input----- The first line contains an integer N (1 le N le 1000000), the number of elements in James\' set of colors. The second line contains N space-separated integers, each representing a color\'s unique positive integer value. Each color value is at most 10^9. -----Output----- Output the maximum possible sum of unique elements that can be formed from any non-empty subset of James\' original set. -----Examples----- Sample Input 1: 5 1 2 2 4 3 Sample Output 1: 10 Sample Input 2: 4 4 4 4 4 Sample Output 2: 4 Sample Input 3: 6 3 5 1 1 6 3 Sample Output 3: 15","solution":"def max_unique_subset_sum(N, colors): Calculate the highest possible sum of unique elements for any subset of the original set. Parameters: N (int): Number of elements in James\' set of colors. colors (list of int): List of unique positive integers representing colors. Returns: int: The maximum possible sum of unique elements that can be formed. # Convert the list to a set to remove duplicates unique_colors = set(colors) # Return the sum of the unique elements return sum(unique_colors)"},{"question":"# Word Ladder Transform You are given two words (start and end) and a dictionary\'s word list. Your task is to transform the start word into the end word using the shortest sequence of valid intermediate words from the given dictionary. A valid transformation only changes one letter at a time and each intermediate word must exist in the word list. Write a function, `word_ladder()`, which takes in four parameters: - `start` (string): the starting word. - `end` (string): the ending word. - `word_list` (list of strings): the dictionary\'s word list. - `find_shortest` (bool, optional, default = True): a flag indicating whether to find the shortest transformation path or any valid transformation path. The function should return a sequence of words forming the shortest transformation from start to end. If no transformation is possible, return an empty list. # Example: ```python word_list = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"] print(word_ladder(\\"hit\\", \\"cog\\", word_list)) # Output: [\\"hit\\", \\"hot\\", \\"dot\\", \\"dog\\", \\"cog\\"] ``` ```python word_list = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\"] print(word_ladder(\\"hit\\", \\"cog\\", word_list)) # Output: [] ``` # Constraints: - Assume all words are lower case and have the same length. - You may assume no duplicate words in the word list. - If `find_shortest` is False, you can return any valid transformation path. # Explanation: 1. Begin at the start word. 2. Change a single letter at each step to form a new word. 3. Ensure the new word exists in the word list. 4. Continue this process until the end word is reached. 5. Return the sequence of words making the transformation. If no sequence exists, return an empty list.","solution":"from collections import deque def word_ladder(start, end, word_list, find_shortest=True): if end not in word_list: return [] word_set = set(word_list) queue = deque([(start, [start])]) visited = set([start]) while queue: current_word, path = queue.popleft() if current_word == end: return path for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in word_set and next_word not in visited: visited.add(next_word) queue.append((next_word, path + [next_word])) return []"},{"question":"You are given a set of N integers representing the heights of N trees in a forest. One day, a strong wind blows and bends all the trees to the right. When a tree bends, it gets added to the height of the next tree to its right, but this can only happen once. If the tree is already bent, it can\'t be bent again. Your task is to find the maximum possible height of the tallest tree after exactly one such bending operation. Input: The first line contains an integer N, the number of trees. The second line contains N integers, the heights of the trees. Output: Print the maximum possible height of the tallest tree after exactly one bending operation. Constraints: 1 ≤ N ≤ 100 1 ≤ heights[i] ≤ 1000 SAMPLE INPUT 5 2 3 7 4 5 SAMPLE OUTPUT 11 Explanation By bending the third tree of height 7 to the fourth tree of height 4, the heights of the trees after bending are [2, 3, 11, 5]. The tallest tree after bending is 11.","solution":"def max_tallest_tree_height(N, heights): Given the heights of trees in a list, returns the maximum possible height of the tallest tree after exactly one bending operation. if N < 2: # If there\'s only one tree, there\'s no possibility of bending return heights[0] max_height = 0 for i in range(N - 1): # Calculate the potential new height of the (i+1)-th tree new_height = heights[i] + heights[i + 1] if new_height > max_height: max_height = new_height # Return the maximum possible height after bending once return max_height"},{"question":"Alex has a string S consisting of lowercase English letters. He wants to rearrange the characters in S to form the lexicographically smallest possible string. Your task is to help Alex find this smallest lexicographically string after the rearrangement. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of one line containing the string S. ------ Output Format ------ For each test case, output on a new line, the lexicographically smallest string that can be formed by rearranging the characters of the input string. ------ Constraints ------ 1 ≤ T ≤ 500 1 ≤ |S| ≤ 10^{5} S consists of lowercase English letters only. - The sum of lengths of strings across all test cases does not exceed 5cdot 10^{5}. ----- Sample Input 1 ------ 3 bca zxy banana ----- Sample Output 1 ------ abc xyz aaabnn ----- Explanation ------ Test case 1: The input string is \\"bca\\". By rearranging the characters in ascending order, we get the lexicographically smallest string \\"abc\\". Test case 2: The input string is \\"zxy\\". By rearranging the characters in ascending order, we get the lexicographically smallest string \\"xyz\\". Test case 3: The input string is \\"banana\\". By rearranging the characters in ascending order, we get the lexicographically smallest string \\"aaabnn\\".","solution":"def lexicographically_smallest_strings(T, test_cases): Given the number of test cases T and a list of strings test_cases, returns the lexicographically smallest strings that can be formed by rearranging the characters of each input string. result = [] for S in test_cases: result.append(\\"\\".join(sorted(S))) return result"},{"question":"You are developing a system for organizing books in a library. Each book can be labeled with one or more genres, and you want to be able to efficiently query which books belong to a specific genre or set of genres. Create a function that can take in a list of books, each with their respective genres, and then returns a list of book titles that match a specified genre query. Each book is represented by a dictionary with the following structure: ``` { \\"title\\": \\"Title of the book\\", \\"genres\\": [\\"genre1\\", \\"genre2\\", ...] } ``` The function should accept two parameters: 1. `books` - a list of book dictionaries. 2. `query_genres` - a list of genres to match books against. The function should return a list of book titles that belong to at least one of the genres in `query_genres`. If no books match, return an empty list. # Example: ```python books = [ {\\"title\\": \\"Book A\\", \\"genres\\": [\\"fiction\\", \\"mystery\\"]}, {\\"title\\": \\"Book B\\", \\"genres\\": [\\"non-fiction\\", \\"history\\"]}, {\\"title\\": \\"Book C\\", \\"genres\\": [\\"fiction\\", \\"history\\"]}, {\\"title\\": \\"Book D\\", \\"genres\\": [\\"mystery\\", \\"thriller\\"]} ] query_genres = [\\"fiction\\", \\"thriller\\"] getBooksByGenres(books, query_genres) ``` The above call to `getBooksByGenres` should return: ``` [\\"Book A\\", \\"Book C\\", \\"Book D\\"] ``` # Additional Constraints: - The list of books (`books`) will have at least one book. - Each book will have at least one genre. - The `query_genres` list will have at least one genre. - No duplicates in the genres of a single book.","solution":"def getBooksByGenres(books, query_genres): Returns the list of book titles that belong to at least one of the genres in query_genres. Args: books (list): A list of book dictionaries. query_genres (list): A list of genres to match books against. Returns: list: List of book titles that match the query genres. result = [] for book in books: if any(genre in book[\'genres\'] for genre in query_genres): result.append(book[\'title\']) return result"},{"question":"Given a string s which represents a time in the format \\"HH:MM\\", write a function to find and return the next closest time that can be formed using only the digits present in s. The returned time should still be in the 24-hour format. Example: Input: s = \\"19:34\\" Output: \\"19:39\\" Explanation: The next closest time that can be formed using the digits 1, 9, 3, 4 is 19:39. There is no valid time with the digits 1, 9, 3, 4 that comes between 19:34 and 19:39. Input: s = \\"23:59\\" Output: \\"22:22\\" Explanation: The next closest time that can be formed using the digits 2, 3, 5, 9 is 22:22. Since all the digits must be reused and the next possible time is later than 23:59, we start from 00:00 and find the next closest time which is 22:22. Note: * All the digits in the given time are reused. The returned time must use all the digits from the given time frequently without adding additional digits. * You may assume the input string s is always a valid time in the format \\"HH:MM\\".","solution":"from itertools import product def nextClosestTime(s): Given a string s which represents a time in the format \\"HH:MM\\", find and return the next closest time that can be formed using only the digits present in s. :param s: Time in string format \\"HH:MM\\" :return: Closest future time in string format \\"HH:MM\\" current_minutes = int(s[:2]) * 60 + int(s[3:]) allowed_digits = {int(x) for x in s if x != \':\'} while True: current_minutes = (current_minutes + 1) % (24 * 60) next_time = f\\"{current_minutes // 60:02}:{current_minutes % 60:02}\\" if all(int(a) in allowed_digits for a in next_time if a != \':\'): return next_time"},{"question":"In a distant kingdom, there\'s a wise king with a peculiar problem. He has a large bookshelf, and he wants to sort all the books on it in non-decreasing order according to their numeric indexes. However, due to his love for programming challenges, he wants to accomplish this with a specific sorting algorithm: Merge Sort. The king promises a reward to anyone who can write a program to sort the books using this algorithm. Your task is to help the king by writing a program that takes an unsorted list of book indexes and sorts it using Merge Sort. -----Input----- The input consists of multiple test cases. The first line contains an integer T, the number of test cases. Each of the next T lines contains a test case: the first integer in each line is N, the number of books on the shelf, followed by N integers representing the indexes of the books. -----Output----- For each test case, output a line containing the sorted list of book indexes. -----Example----- Input: 2 5 64 34 25 12 22 7 38 27 43 3 9 82 10 Output: 12 22 25 34 64 3 9 10 27 38 43 82 -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - The book indexes are positive integers less than or equal to 10^6 Be the hero and help the wise king to sort his bookshelf!","solution":"def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] merge_sort(left_half) merge_sort(right_half) i = j = k = 0 while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: arr[k] = left_half[i] i += 1 else: arr[k] = right_half[j] j += 1 k += 1 while i < len(left_half): arr[k] = left_half[i] i += 1 k += 1 while j < len(right_half): arr[k] = right_half[j] j += 1 k += 1 def sort_books(test_cases): results = [] for case in test_cases: N = case[0] books = case[1:] merge_sort(books) results.append(books) return results def format_input_output(input_string): input_lines = input_string.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] for i in range(1, T + 1): test_cases.append(list(map(int, input_lines[i].split()))) sorted_books = sort_books(test_cases) output_lines = \\"n\\".join(\\" \\".join(map(str, books)) for books in sorted_books) return output_lines"},{"question":"A sequence of length n is called a k-alternating sequence if the length of every contiguous subsequence of the same element is at most k. For example, if k = 2, the sequence [1, 1, 2, 2, 1, 1] is 2-alternating, but the sequence [1, 1, 1, 2, 2, 2] is not. You are given an integer array a of length n, and an integer k. Your task is to find out the minimum number of modifications needed to make a k-alternating sequence from the given array. In one operation, you can change any element of the array to any other integer. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 3000). The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Output Print a single integer — the minimum number of modifications required to make the array a k-alternating sequence. Examples Input 6 2 1 1 3 3 3 3 Output 2 Input 5 1 2 2 2 2 2 Output 4 Note In the first example, changing the two occurrences of 3 at positions 5 and 6 to any other integer (e.g., 4) will make the sequence [1, 1, 3, 3, 4, 4] a 2-alternating sequence. Hence, the minimum modifications required are 2. In the second example, you need every element to be different because k = 1, so you need 4 modifications.","solution":"def min_modifications_to_k_alternating(n, k, arr): if k == 1: return n - 1 modifications = 0 i = 0 while i < n: count = 1 # count the length of the current segment of the same elements while i + count < n and arr[i] == arr[i + count]: count += 1 # calculate necessary changes if count > k: modifications += count - k i += count return modifications"},{"question":"Given two arrays of integers, determine if the second array is a subsequence of the first array. A subsequence is derived by deleting some or no elements of the first array without changing the order of the remaining elements. Input The input consists of two lines. The first line contains a space-separated list of integers representing the first array. The second line contains a space-separated list of integers representing the second array. Each integer will be between -10^9 and 10^9. The length of each array will be between 1 and 1000, inclusive. Output Output \\"YES\\" if the second array is a subsequence of the first array, otherwise \\"NO\\". Examples Input 1 2 3 4 5 2 4 5 Output YES Input 1 2 3 4 5 2 6 Output NO","solution":"def is_subsequence(array1, array2): Determine if array2 is a subsequence of array1. Parameters: array1 (list of int): The first array. array2 (list of int): The second array. Returns: str: \\"YES\\" if array2 is a subsequence of array1, otherwise \\"NO\\". if not array2: return \\"YES\\" i, j = 0, 0 while i < len(array1) and j < len(array2): if array1[i] == array2[j]: j += 1 i += 1 return \\"YES\\" if j == len(array2) else \\"NO\\""},{"question":"You are provided an array of integers and a specific integer k. Your task is to find the total number of continuous subarrays within the array that sum up exactly to k. The definition of a subarray is a contiguous portion of an array. Input The first line contains two integers n and k (1 ≤ n ≤ 100,000, |k| ≤ 10^9), where n is the number of elements in the array and k is the target sum. The second line contains n integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000), which are the elements of the array. Output Print a single integer, the total number of continuous subarrays that sum up to k. Examples Input 5 3 1 2 3 4 5 Output 2 Input 10 0 0 0 0 0 0 0 0 0 0 0 Output 55 Note In the first example, there are two continuous subarrays that sum up to 3: [1, 2] and [3]. In the second example, each subarray sums up to 0, and since there are 10 elements in the array which can be combined in different ways to form 55 subarrays, the output is 55. Make sure to optimize the solution for large input sizes.","solution":"def count_subarrays_with_sum_k(arr, k): from collections import defaultdict # Dictionary to store the frequency of prefix sums prefix_sum_counts = defaultdict(int) # Initialize with prefix sum 0 having frequency 1 (base case) prefix_sum_counts[0] = 1 prefix_sum = 0 count = 0 for num in arr: # Update prefix sum prefix_sum += num # Check if there is a prefix sum that when subtracted from the current # prefix sum equals to k if (prefix_sum - k) in prefix_sum_counts: count += prefix_sum_counts[prefix_sum - k] # Update the frequency of the current prefix sum prefix_sum_counts[prefix_sum] += 1 return count"},{"question":"A renowned art gallery wants to analyze the visitor traffic recorded in various rooms throughout the month. Due to inconsistent data entry, some visitors might be counted more than once. To ensure accurate analysis, we need to identify and count the unique visitors to each room. Each visitor is assigned a unique alphanumeric ID. The gallery\'s database logs each visit as a combination of room number and visitor ID. Write a program that reads the log entries and calculates the total number of unique visitors for each room. # Input - The first line contains an integer `n`, the number of log entries (1 ≤ n ≤ 10000). - The next `n` lines contain space-separated strings where the first part is the room number (an integer) and the second part is the visitor\'s alphanumeric ID. All ID strings are composed of alphanumeric characters and have at most length 10. # Output - For each room that has recorded visits, output a line in the format: `Room X: Y unique visitors` where `X` is the room number and `Y` is the number of unique visitors in that room. - The rooms should be presented in ascending order of room number. # Example Input ``` 7 101 a123 203 b456 101 a123 102 c789 203 b456 101 d012 102 e345 ``` Output ``` Room 101: 2 unique visitors Room 102: 2 unique visitors Room 203: 1 unique visitors ``` Input ``` 5 301 mike 302 john 301 mike 301 mike 302 jane ``` Output ``` Room 301: 1 unique visitor Room 302: 2 unique visitors ```","solution":"def count_unique_visitors(log_entries): room_visitors = {} for log_entry in log_entries: room, visitor = log_entry.split() room = int(room) if room not in room_visitors: room_visitors[room] = set() room_visitors[room].add(visitor) result = [] for room in sorted(room_visitors.keys()): result.append(f\\"Room {room}: {len(room_visitors[room])} unique {\'visitors\' if len(room_visitors[room]) != 1 else \'visitor\'}\\") return result"},{"question":"Alice is playing a game with a row of n blocks, where each block is colored either red or blue. In her game, she can perform the following operation: select a contiguous subarray of blocks of the same color and repaint the entire selected subarray with the other color. Her goal is to minimize the number of operations required to make all the blocks the same color. Given the initial configuration of the blocks, determine the minimum number of operations Alice needs to make all the blocks the same color. -----Input----- The first line contains an integer n (1 leq n leq 100,000) — the number of blocks. The second line contains a string of length n consisting of characters \'R\' and \'B\' — the initial configuration of the blocks, where \'R\' stands for a red block and \'B\' stands for a blue block. -----Output----- Print a single integer — the minimum number of operations required to make all the blocks the same color. -----Examples----- Input 5 RRBRB Output 2 Input 6 RBBBBR Output 1 -----Note----- In the first example, Alice can: 1. Repaint the last two blocks \'B\' to \'R\', resulting in \\"RRRRR\\". 2. Repaint the second block \'B\' to \'R\', resulting in \\"RRRRR\\". In the second example, Alice can: 1. Repaint the entire contiguous subarray \\"BBBB\\" to \'R\', resulting in \\"RRRRRR\\".","solution":"def min_operations_to_make_blocks_uniform(n, blocks): Returns the minimum number of operations required to make all blocks the same color. # Count the number of contiguous segments of \'R\' and \'B\' if n == 0: return 0 red_segments = 0 blue_segments = 0 current_color = blocks[0] if current_color == \'R\': red_segments += 1 else: blue_segments += 1 for i in range(1, n): if blocks[i] != current_color: current_color = blocks[i] if current_color == \'R\': red_segments += 1 else: blue_segments += 1 # The number of operations needed is the minimum of red_segments and blue_segments return min(red_segments, blue_segments)"},{"question":"Given an array of integers, your task is to find the longest sub-array with elements that form a contiguous sequence (i.e., the array elements form a consecutive sequence of integers). Return the length of this longest sub-array. Example 1: Input: arr = [1, 9, 3, 10, 4, 20, 2] Output: 4 Explanation: The longest contiguous sub-array is [1, 3, 4, 2], which has length 4. Example 2: Input: arr = [8, 1, 2, 5] Output: 2 Explanation: The longest contiguous sub-array is [1, 2], which has length 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findLongestConseqSubseq() which takes the array arr as input and returns the length of the longest contiguous sub-array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 10^{5} 0 ≤ arr[i] ≤ 10^{5}","solution":"def findLongestConseqSubseq(arr): Returns the length of the longest contiguous sub-array in arr. Parameters: arr (list): A list of integers Returns: int: Length of the longest contiguous sub-array unique_elements = set(arr) max_length = 0 for num in unique_elements: if num - 1 not in unique_elements: # start of a new sequence current_num = num current_streak = 1 while current_num + 1 in unique_elements: current_num += 1 current_streak += 1 max_length = max(max_length, current_streak) return max_length"},{"question":"Write a function that takes a scrambled English phrase and returns its original form by reversing the scrambling process. The scrambling process is defined as follows: - Each word in the phrase is reversed. - The order of the words is not altered. For example, the scrambled phrase \\"ehT kciuq nworb xof\\" corresponds to the original phrase \\"The quick brown fox\\" after reversing each word in place. Input A single string containing the scrambled phrase. The phrase contains only English letters and spaces. There are no leading or trailing spaces and words are separated by a single space. Output A single string containing the original phrase. Examples Input ehT kciuq nworb xof Output The quick brown fox Input elbmuht eht revo spmuj yzal god Output thumble the over jumps lazy dog","solution":"def unscramble_phrase(scrambled): Unscrambles an English phrase by reversing each word in place while maintaining the word order. Parameters: scrambled (str): A scrambled English phrase where each word is reversed. Returns: str: The original phrase. return \' \'.join(word[::-1] for word in scrambled.split())"},{"question":"Write a function that takes a string and returns a dictionary with each character in the string as keys and the number of times each character appears in the string as values. Ignore spaces and consider uppercase and lowercase characters as the same. For example, `character_count(\\"Hello World\\")` should return `{\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1}`","solution":"def character_count(s): Returns a dictionary with each character in the string as keys and the number of times each character appears in the string as values. Ignore spaces and consider uppercase and lowercase characters as the same. s = s.replace(\\" \\", \\"\\").lower() count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Lucy likes mathematical sequences and series. One of her favorite types is the \\"progressive product series\\" where the nth term is the product of the first n prime numbers. As a gift, Lucy\'s friend wants to surprise her with a display of the nth term of this series. Given an integer n (1 ≤ n ≤ 10), write a program to compute the nth term of the progressive product series and output the result. The progressive product series is defined as: - t(1) = 2 (the first prime number) - t(2) = 2 * 3 = 6 - t(3) = 2 * 3 * 5 = 30 - t(4) = 2 * 3 * 5 * 7 = 210 - ... -----Input----- The input consists of a single integer n which represents the term of the progressive product series Lucy is interested in. -----Output----- Output a single integer that represents the nth term of the progressive product series. -----Examples----- Input 1 Output 2 Input 3 Output 30 Input 4 Output 210 -----Note----- In the first sample, the 1st term of the series is the first prime number which is 2. Therefore, the output is 2. In the second sample, the 3rd term of the series is the product of the first 3 prime numbers: 2, 3, and 5, which equals 30. In the third sample, the 4th term of the series is the product of the first 4 prime numbers: 2, 3, 5, and 7, resulting in 210.","solution":"def nth_progressive_product_term(n): Returns the nth term of the progressive product series. def is_prime(num): if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True prime_numbers = [] current_num = 2 while len(prime_numbers) < n: if is_prime(current_num): prime_numbers.append(current_num) current_num += 1 product = 1 for prime in prime_numbers: product *= prime return product"},{"question":"You have been chosen to represent your planet in the upcoming Galactic Chess Tournament. In preparation, you\'ve arrived at a planet where legendary chess masters train daily. There, the legendary masters present you with a challenge. You are given a sequence of integers, and you must determine whether it contains a \\"tournament arrangement.\\" A tournament arrangement is defined as a contiguous subarray where there\'s an increasing sequence followed immediately by a decreasing sequence, like a mountain. If there\'s at least one such contiguous subarray, you must return the length of the longest one. Otherwise, you should print 0. -----Input----- The input consists of a single line containing a sequence of integers separated by spaces. The length of the sequence will be between 1 and 1000, inclusive, and each integer in the sequence will be between -10000 and 10000, inclusive. -----Output----- Output a single integer, the length of the longest tournament arrangement in the given sequence. If there isn\'t any tournament arrangement, print 0. -----Examples----- Sample Input: 1 3 2 4 6 5 4 Sample Output: 5 Explanation: The longest tournament arrangement is [2, 4, 6, 5, 4], which has length 5. It starts at index 2 with value 2, reaches a peak of 6, and then decreases to 4. Sample Input: 5 4 3 2 1 Sample Output: 0 Explanation: There is no tournament arrangement in the sequence, so the output is 0.","solution":"def longest_tournament_arrangement(arr): n = len(arr) if n < 3: return 0 longest_length = 0 for i in range(1, n - 1): # Check if arr[i] is a peak if arr[i - 1] < arr[i] > arr[i + 1]: # Expand to the left left = i while left > 0 and arr[left - 1] < arr[left]: left -= 1 # Expand to the right right = i while right < n - 1 and arr[right] > arr[right + 1]: right += 1 # Calculate the length of the current tournament arrangement cur_length = right - left + 1 longest_length = max(longest_length, cur_length) return longest_length"},{"question":"You are tasked with creating a string permutation checker. Given two strings, determine if one string is a permutation of the other. A permutation is defined as a rearrangement of characters. -----Input:----- - The input consists of multiple test cases. - The first line contains a single integer T denoting the number of test cases. - Each test case consists of two lines: the first line contains the string A and the second line contains the string B. -----Output:----- For each test case, print \\"YES\\" if one string is a permutation of the other, and \\"NO\\" otherwise. -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ length(A), length(B) ≤ 105 - Both strings A and B consist of lowercase English letters only. -----Sample Input:----- 2 abc bca abc def -----Sample Output:----- YES NO","solution":"def are_permutations(a, b): Checks if string a is a permutation of string b. if len(a) != len(b): return \\"NO\\" return \\"YES\\" if sorted(a) == sorted(b) else \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): a, b = test_cases[i] results.append(are_permutations(a, b)) return results"},{"question":"You are given a list of `N` non-negative integers. Find a subset of this list such that the sum of the subset is the largest possible sum less than or equal to a given integer `S`. ------ Input Format ------ - The first line of input consists of two integers `N` and `S`, the number of elements in the list and the target sum, respectively. - The second line contains `N` space-separated integers representing the elements of the list. ------ Output Format ------ Output a single integer representing the largest possible sum less than or equal to `S` that can be achieved using a subset of the given list. ------ Constraints ------ - 1 ≤ N, S ≤ 1000 - 0 ≤ text{list}[i] ≤ 10^6 ------ Sample Input 1 ------ 5 10 1 2 3 4 5 ------ Sample Output 1 ------ 10 ------ Explanation 1 ------ The subset {1, 2, 3, 4} or {5, 4, 1} both sum to exactly 10, which is the target sum `S`. ------ Sample Input 2 ------ 4 11 4 5 6 3 ------ Sample Output 2 ------ 11 ------ Explanation 2 ------ The subset {5, 6} sums to 11, which is equal to the target sum `S`. ------ Sample Input 3 ------ 3 8 9 8 7 ------ Sample Output 3 ------ 8 ------ Explanation 3 ------ The best subset within the limit is {8}, which sums to 8, exactly equal to `S`. Subsets including 9 exceed `S`.","solution":"def max_subset_sum(N, S, elements): Finds the largest sum less than or equal to S that can be achieved using a subset of the given list of elements. possible_sums = [0] * (S + 1) for elem in elements: for i in range(S, elem - 1, -1): possible_sums[i] = max(possible_sums[i], possible_sums[i - elem] + elem) return possible_sums[S]"},{"question":"# Library Book Tracker You are responsible for managing a simple library system, where you need to handle information about books and their borrowers. Write a function that will generate a list of people who have currently borrowed books, including the titles of the books they have checked out. The function takes one parameter: `records` - The parameter `records` is a list of tuples, where each tuple consists of a borrower name (string) and a book title (string). - Each borrower can take multiple books. The function should return - A dictionary where each key is a borrower\'s name, and the corresponding value is a list of books they have borrowed. - The list of books should be sorted alphabetically for each borrower, and the dictionary keys (borrower names) should also be sorted alphabetically. Example input and output ~~~~ input [ (\'Alice\', \'War and Peace\'), (\'Bob\', \'1984\'), (\'Alice\', \'To Kill a Mockingbird\'), (\'Bob\', \'Animal Farm\') ] output { \'Alice\': [\'To Kill a Mockingbird\', \'War and Peace\'], \'Bob\': [\'1984\', \'Animal Farm\'] } input [ (\'Carol\', \'Brave New World\'), (\'Alice\', \'The Great Gatsby\'), (\'Carol\', \'Sapiens\') ] output { \'Alice\': [\'The Great Gatsby\'], \'Carol\': [\'Brave New World\', \'Sapiens\'] } ~~~~","solution":"def generate_borrowers_list(records): Generates a dictionary of borrowers and the books they have borrowed. Args: records (list of tuples): List where each tuple consists of a borrower name (string) and a book title (string). Returns: dict: Dictionary where each key is a borrower\'s name, and the corresponding value is a list of books they have borrowed, sorted alphabetically. borrowers_books = {} for name, book in records: if name in borrowers_books: borrowers_books[name].append(book) else: borrowers_books[name] = [book] for name in borrowers_books: borrowers_books[name].sort() return dict(sorted(borrowers_books.items()))"},{"question":"Tom is trying to pack items in his suitcase for a trip. He has a suitcase with a fixed weight capacity and a list of items where each item has a weight and a value. He wants to maximize the total value of items that he can fit in his suitcase without exceeding the weight capacity. Implement a function to help Tom determine the maximum total value he can carry. Example 1: Input: capacity = 50, items = [(10, 60), (20, 100), (30, 120)] Output: 220 Explanation: Tom can take the first and second items, giving him a total value of 60 + 100 = 160. This does not exceed the capacity of 50. Adding the third item would exceed the capacity, so he does not take it. Instead, he takes the second and third items for a total value of 100 + 120 = 220, which maximizes his value without exceeding the weight limit. Example 2: Input: capacity = 10, items = [(15, 10), (15, 50), (15, 60)] Output: 0 Explanation: All items have a weight of 15, which is more than the capacity of 10. Hence, Tom cannot take any items and the maximum value is 0. Your Task: You don\'t need to read input or print anything. Implement the function maximizeValue() that takes an integer \'capacity\' and a list of pairs \'items\' where each pair (weight, value) represents the weight and value of an item, respectively. This function should return an integer representing the maximum value Tom can carry. Expected Time Complexity: O(n * capacity) Expected Auxiliary Space: O(n * capacity) Constraints: 1 <= capacity <= 1000 1 <= len(items) <= 100 1 <= weight, value <= 1000","solution":"def maximizeValue(capacity, items): Determine the maximum total value of items that can fit in the suitcase without exceeding the weight capacity. :param capacity: int, the maximum weight capacity of the suitcase. :param items: List of tuples, where each tuple contains (weight, value) of an item. :return: int, the maximum value Tom can carry. n = len(items) # create table to store maximum value for each capacity from 0 to capacity dp = [[0] * (capacity + 1) for _ in range(n + 1)] # fill the dp table for i in range(1, n + 1): current_weight, current_value = items[i - 1] for w in range(capacity + 1): if current_weight > w: dp[i][w] = dp[i - 1][w] else: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - current_weight] + current_value) return dp[n][capacity]"},{"question":"You are given a list of integers and an integer target. Your task is to find all unique quadruplets (four numbers) in the list that add up to the given target. Write a function `find_quadruplets` that takes two parameters: - `nums`: a list of integers `List[int]` - `target`: an integer `int` The function should return a list of lists containing all unique quadruplets `[a, b, c, d]` such that `a + b + c + d = target`. # Constraints: - The list size will be in the range `[0, 200]`. - The list elements will be in the range `[-10^9, 10^9]`. - The solution should not have duplicate quadruplets. # Example: ```python def find_quadruplets(nums: List[int], target: int) -> List[List[int]]: # Implement the function here # Example usage: nums = [1, 0, -1, 0, -2, 2] target = 0 print(find_quadruplets(nums, target)) # Expected output: # [ # [-2, -1, 1, 2], # [-2, 0, 0, 2], # [-1, 0, 0, 1] # ] ``` # Notes: - The order of quadruplets does not matter in the final output. - Ensure that the function handles edge cases such as empty lists, lists with fewer than four elements, and large integers efficiently. Implement your solution to this problem.","solution":"from typing import List def find_quadruplets(nums: List[int], target: int) -> List[List[int]]: nums.sort() quadruplets = [] n = len(nums) for i in range(n - 3): if i > 0 and nums[i] == nums[i - 1]: continue # Skip duplicates for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue # Skip duplicates left, right = j + 1, n - 1 while left < right: curr_sum = nums[i] + nums[j] + nums[left] + nums[right] if curr_sum == target: quadruplets.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 # Skip duplicates while left < right and nums[right] == nums[right - 1]: right -= 1 # Skip duplicates left += 1 right -= 1 elif curr_sum < target: left += 1 else: right -= 1 return quadruplets"},{"question":"In a magical kingdom, there are several knights who are sworn to protect the realm. Each knight has a specific number of potions that they can carry for their journey. You are the Royal Wizard, tasked with managing the distribution of these potions. Your kingdom\'s policy states that each knight can carry a maximum number of p potions. Moreover, due to recent budget constraints, the king has decided to reduce the number of total potions available by k units across all knights. You need to determine if it is possible to reduce exactly k units from the existing potion distribution without any knight carrying more potions than they are allowed to and without any knight ending up with negative potions. You are given n, the number of knights, and an array a of length n, where a[i] represents the initial number of potions the i-th knight carries. You need to find whether it is possible to reduce exactly k units from the total distribution of potions while ensuring the constraints mentioned above are not violated. Write a function `can_reduce_potions(n, a, p, k)` that determines if the reduction is possible. If it\'s possible, return \\"Yes\\", otherwise return \\"No\\". # Function Signature ```python def can_reduce_potions(n: int, a: List[int], p: int, k: int) -> str: ``` # Input - `n` (1 leq n leq 10^5): the number of knights. - `a` (list of n integers, 0 leq a[i] leq 10^9): the initial number of potions each knight carries. - `p` (1 leq p leq 10^9): the maximum number of potions each knight can carry. - `k` (0 leq k leq 10^{18}): the total number of potions to reduce. # Output - Return \\"Yes\\" if it is possible to reduce exactly k potions; otherwise, return \\"No\\". # Examples Example 1 ```python n = 3 a = [5, 8, 6] p = 10 k = 7 can_reduce_potions(n, a, p, k) ``` Output: ``` Yes ``` Example 2 ```python n = 4 a = [10, 9, 8, 7] p = 12 k = 5 can_reduce_potions(n, a, p, k) ``` Output: ``` Yes ``` Example 3 ```python n = 2 a = [3, 4] p = 6 k = 10 can_reduce_potions(n, a, p, k) ``` Output: ``` No ``` # Notes - In the first example, the reduction can be achieved by: reduce_amount = [4, 2, 1] - In the second example, the reduction can be achieved by: reduce_amount = [2, 1, 1, 1] - In the third example, the reduction of 10 units is not possible as the total initial potions are only 7. # Constraints - Ensure that each knight’s remaining potions ≥ 0 after the reduction. - Ensure that no knight carries more than p potions initially or during the reduction process.","solution":"from typing import List def can_reduce_potions(n: int, a: List[int], p: int, k: int) -> str: # Calculate the total number of initial potions total_potions = sum(a) # Check if the total reduction is greater than the total available potions if k > total_potions: return \\"No\\" # Sort the potion array to facilitate easy reduction a.sort() # Calculate the maximum possible reduction # We need to calculate the minimum amount each knight can reduce possible_reduction = sum(min(potion, p) for potion in a) # If the needed reduction is less than or equal to the possible reduction, return \\"Yes\\" if k <= possible_reduction: return \\"Yes\\" else: return \\"No\\""},{"question":"Given a string consisting of lowercase alphabets, remove all duplicate characters from the string and return the resultant string with the relative order of characters preserved. Example 1: Input: s = \\"geeksforgeeks\\" Output: \\"geksfor\\" Explanation: Removing duplicate characters, we get \\"geksfor\\". Example 2: Input: s = \\"mississippi\\" Output: \\"misp\\" Explanation: Removing duplicate characters, we get \\"misp\\". Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function removeDuplicates() that takes a string s as a parameter and returns the resultant string. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) (Note: Only use extra space for character count array, i.e., O(1) extra space is allowed for array of size 26) Constraints: 1 ≤ len(s) ≤ 10^5","solution":"def removeDuplicates(s): Removes all duplicate characters from the string s while preserving the relative order of characters. Parameters: s (str): The input string consisting of lowercase alphabets. Returns: str: The resultant string with duplicates removed. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"You are developing an interactive system for a library to manage the borrowing and returning of books. One feature you need to add is a fine calculation system for overdue books. Create a function `calculate_fine(return_date, due_date)` which takes two arguments: `return_date` and `due_date`, both in the format \\"YYYY-MM-DD\\". The function should return the fine based on the following rules: - If the book is returned on or before the due date, no fine is charged. - If the book is returned after the due date, the fine is calculated based on the number of days overdue: - For the first 7 days (if the book is returned within 1 to 7 days after the due date), the fine is 2 per day. - From the 8th day and onwards, the fine is 5 per day. The function should return the fine amount as an integer. If the input dates are invalid or in an incorrect format, return \\"Invalid date format.\\". Examples: ``` calculate_fine(\\"2023-10-10\\", \\"2023-10-05\\") => 10 // 5 days late, 5*2 = 10 calculate_fine(\\"2023-10-15\\", \\"2023-10-05\\") => 29 // 10 days late, 7*2 + 3*5 = 14 + 15 = 29 calculate_fine(\\"2023-10-05\\", \\"2023-10-15\\") => 0 // No fine as the book is returned on or before the due date calculate_fine(\\"2023-10-10\\", \\"incorrect-format\\") => \\"Invalid date format.\\" calculate_fine(\\"not-a-date\\", \\"2023-10-05\\") => \\"Invalid date format.\\" ``` Note: Use proper date manipulation techniques and error handling to ensure the dates are correctly parsed and validated.","solution":"from datetime import datetime def calculate_fine(return_date, due_date): Calculates the fine for overdue books based on the return date and due date. Return \\"Invalid date format.\\" if the input dates are not in the correct format. try: return_date = datetime.strptime(return_date, \\"%Y-%m-%d\\") due_date = datetime.strptime(due_date, \\"%Y-%m-%d\\") except ValueError: return \\"Invalid date format.\\" if return_date <= due_date: return 0 days_overdue = (return_date - due_date).days if days_overdue <= 7: fine = days_overdue * 2 else: fine = 7 * 2 + (days_overdue - 7) * 5 return fine"},{"question":"# Context and Definitions You have been working on a data processing application and part of its functionality requires handling a sequence of operations on a collection of data. One of the frequent tasks involves manipulating the data in a way that is functionally similar to the Unix pipeline. You have designed a **Pipeline** class that allows chaining of various transformations and operations on a list of elements. The class should support: - `map`: Applies a function to each element in the list and returns a new pipeline. - `filter`: Filters elements based on a predicate function and returns a new pipeline. - `reduce`: Reduces the elements of the list into a single value based on a reducer function and an initial value. - `collect`: Collects the elements of the list into a Python list. Here is the initial design of the Pipeline class: ```python class Pipeline: def __init__(self, iterable): self.iterable = iterable def map(self, func): return Pipeline(map(func, self.iterable)) def filter(self, predicate): return Pipeline(filter(predicate, self.iterable)) def reduce(self, reducer, initial): from functools import reduce return reduce(reducer, self.iterable, initial) def collect(self): return list(self.iterable) # Example usage: data = Pipeline([1, 2, 3, 4, 5]) mapped_data = data.map(lambda x: x * 2).collect() # [2, 4, 6, 8, 10] filtered_data = data.filter(lambda x: x % 2 == 0).collect() # [2, 4] reduced_data = data.reduce(lambda x, y: x + y, 0) # 15 ``` # New Requirements Your project lead likes the design but suggests a few additional requirements to make the Pipeline class more versatile and powerful: 1. **reverse**: Adds the ability to reverse the order of the elements in the pipeline. 2. **zip_with**: Combine two pipelines into a single pipeline by combining their elements using a specified function. - The `reverse` method should return a new pipeline with elements in reverse order. - The `zip_with` method should take another pipeline and a function, and return a new pipeline containing the combined elements. Your task is to implement the `reverse` and `zip_with` methods for the Pipeline class. # Examples of Usage ```python data = Pipeline([1, 2, 3, 4, 5]) # Reversing the pipeline reversed_data = data.reverse().collect() # [5, 4, 3, 2, 1] # Zipping with another pipeline other_data = Pipeline([10, 20, 30, 40, 50]) zipped_data = data.zip_with(other_data, lambda x, y: x + y).collect() # [11, 22, 33, 44, 55] ``` # Implementation Details Implement the `reverse` and `zip_with` methods in the `Pipeline` class: ```python class Pipeline: def __init__(self, iterable): self.iterable = iterable def map(self, func): return Pipeline(map(func, self.iterable)) def filter(self, predicate): return Pipeline(filter(predicate, self.iterable)) def reduce(self, reducer, initial): from functools import reduce return reduce(reducer, self.iterable, initial) def collect(self): return list(self.iterable) def reverse(self): # Gather elements into a list, reverse it, then return a new Pipeline return Pipeline(reversed(list(self.iterable))) def zip_with(self, other, func): # Combine elements of both pipelines using the provided function return Pipeline(map(lambda pair: func(pair[0], pair[1]), zip(self.iterable, other.iterable))) # Test the new functionality data = Pipeline([1, 2, 3, 4, 5]) reversed_data = data.reverse().collect() # [5, 4, 3, 2, 1] print(reversed_data) other_data = Pipeline([10, 20, 30, 40, 50]) zipped_data = data.zip_with(other_data, lambda x, y: x + y).collect() # [11, 22, 33, 44, 55] print(zipped_data) ```","solution":"class Pipeline: def __init__(self, iterable): self.iterable = iterable def map(self, func): return Pipeline(map(func, self.iterable)) def filter(self, predicate): return Pipeline(filter(predicate, self.iterable)) def reduce(self, reducer, initial): from functools import reduce return reduce(reducer, self.iterable, initial) def collect(self): return list(self.iterable) def reverse(self): # Gather elements into a list, reverse it, then return a new Pipeline return Pipeline(reversed(list(self.iterable))) def zip_with(self, other, func): # Combine elements of both pipelines using the provided function return Pipeline(map(lambda pair: func(pair[0], pair[1]), zip(self.iterable, other.iterable)))"},{"question":"You are given a number of courses represented as a 2D array prerequisites where prerequisites[i] = [course_i, prerequisite_i] indicates that to take course_i you must first complete prerequisite_i. There are a total of numCourses courses you have to take, numbered from 0 to numCourses-1. Your task is to determine if it is possible to finish all courses given the prerequisite list. Return true if you can finish all courses, otherwise return false. Example 1: Input: numCourses = 2, prerequisites = [[1,0]] Output: true Explanation: There are a total of 2 courses to take. To take course 1, you should have finished course 0. So it is possible. Example 2: Input: numCourses = 2, prerequisites = [[1,0],[0,1]] Output: false Explanation: There are a total of 2 courses to take. To take course 1, you should have finished course 0, and to take course 0, you should have finished course 1. So it is impossible. Example 3: Input: numCourses = 4, prerequisites = [[1,0],[2,1],[3,2],[1,3]] Output: false Explanation: There are a total of 4 courses to take. To take course 1, you should have finished course 0. To take course 2, you should have finished course 1. To take course 3, you should have finished course 2. To take course 1, you should have finished course 3. So it is impossible. Constraints: 1 <= numCourses <= 2000 0 <= prerequisites.length <= 5000 prerequisites[i].length == 2 0 <= course_i, prerequisite_i < numCourses All pairs [course_i, prerequisite_i] are unique.","solution":"def can_finish(numCourses, prerequisites): from collections import defaultdict, deque # Create the adjacency list to represent the graph graph = defaultdict(list) in_degree = [0] * numCourses # Build the graph and in-degree list for dest, src in prerequisites: graph[src].append(dest) in_degree[dest] += 1 # Initialize the queue with all courses having zero in-degree zero_in_degree_queue = deque([i for i in range(numCourses) if in_degree[i] == 0]) visited_courses = 0 while zero_in_degree_queue: course = zero_in_degree_queue.popleft() visited_courses += 1 for neighbor in graph[course]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) # If all courses are visited, return True return visited_courses == numCourses"},{"question":"In a far-away land, the kingdom has a peculiar tradition on the first day of every month. They have a giant castle with NN rooms arranged in a straight line. Each of these rooms is assigned a unique integer between 1 and NN. The King\'s advisor challenges the young princes by giving them a puzzle each month. The puzzle is to determine how many distinct pairs (a, b) of rooms satisfy the following condition: the absolute difference between the room numbers is exactly equal to KK. Formally, they need to count pairs (a, b) such that 1 ≤ a < b ≤ NN and |a - b| = K|a - b| = K. The princes found this puzzle intriguing, but too time-consuming. Hence, they seek your help to solve it through efficient programming. -----Input:----- The first line contains TT , the number of test cases. Each of the following TT lines describes a single test case, which contains two integers NN and KK (1 ≤ K < N ≤ 10^910^9). -----Output:----- For each test case, output a single integer−− the number of distinct pairs (a, b) that satisfy the condition. -----Constraints----- - 1 ≤ T ≤ 100100 - 1 ≤ K < N ≤ 10^910^9 -----Sample Input----- 3 5 2 10 3 8 5 -----Sample Output:----- 3 7 3 Explanation: For the first test case (N=5, K=2): - Valid pairs are: (1, 3), (2, 4), (3, 5)","solution":"def count_pairs(N, K): Returns the number of distinct pairs (a, b) that satisfy the condition 1 ≤ a < b ≤ N and |a - b| = K. if 1 <= K < N: return (N - K) else: return 0 def solve(test_cases): Solves the problem for a list of test cases. results = [] for N, K in test_cases: results.append(count_pairs(N, K)) return results"},{"question":"Given a positive integer N, your task is to find the sum of the cubes of the first N odd natural numbers. Example 1: Input: 3 Output: 152 Explanation: 1^3 + 3^3 + 5^3 = 1 + 27 + 125 = 153 Example 2: Input: 4 Output: 712 Explanation: 1^3 + 3^3 + 5^3 + 7^3 = 1 + 27 + 125 + 343 + 216 = 712 Your Task: You don\'t need to read or print anything. Your task is to complete the function sum_of_cubes_oddNumbers() which takes N as the input parameter and returns the sum of the cubes of the first N odd natural numbers. Expected Time Complexity: O(1) Expected Space Complexity: O(1) Constraints: 1 <= N <= 10000","solution":"def sum_of_cubes_odd_numbers(N): Returns the sum of the cubes of the first N odd natural numbers. return sum((2*i + 1) ** 3 for i in range(N))"},{"question":"The Ministry of Magic is planning a series of N magic competitions, where each competition tests wizards on various spells. Each spell has a difficulty level and each competition has a threshold difficulty level that the spells must meet or exceed to be considered for that competition. Initially, each competition has no registered spells. Before each competition, Hermione Granger adds a spell with a certain difficulty level to the competition. This spell can only be considered for the competition if its difficulty level meets or exceeds the threshold for that competition. Each competition has a difficulty threshold for spells registered to it. The number of spells a wizard can use in a competition is equal to the total number of spells registered to it that meet the threshold for the competition. You need to determine the maximum number of spells that can be used in each competition and the total number of registered spells for the competition series. ------ Input Format ------ - The first line contains an integer N — the number of competitions. - The second line contains N integers — the threshold difficulty levels for the competitions. - The third line contains N integers — the difficulty levels of the spells Hermione adds for each competition. ------ Output Format ------ Print N integers. The i-th integer should be the maximum number of spells that can be used in the i-th competition. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 1 ≤ text{Threshold Difficulty}, text{Spell Difficulty} ≤ 10^{6} ------ Sample Input 1 ------ 5 3 5 2 8 6 4 5 1 9 7 ------ Sample Output 1 ------ 1 2 1 1 1 ------ Explanation 1 ------ For the first competition, the spell with difficulty 4 meets the threshold of 3. For the second competition, both spells with difficulties 4 and 5 meet the threshold of 5. For the third competition, the spell with difficulty 1 does not meet the threshold of 2. For the fourth competition, the spell with difficulty 9 meets the threshold of 8. For the fifth competition, the spell with difficulty 7 meets the threshold of 6.","solution":"def max_spells_used_in_competitions(n, thresholds, spell_difficulties): Determines the maximum number of spells that can be used in each competition. Parameters: - n (int): Number of competitions. - thresholds (list of int): The threshold difficulty levels for the competitions. - spell_difficulties (list of int): The difficulty levels of the spells Hermione adds for each competition. Returns: - list of int: Maximum number of spells that can be used in each competition. max_spells = [] registered_spells = 0 for i in range(n): if spell_difficulties[i] >= thresholds[i]: registered_spells += 1 max_spells.append(registered_spells) else: max_spells.append(registered_spells) return max_spells"},{"question":"-----Input----- The input contains two integers m and n (1 ≤ m, n ≤ 50). -----Output----- Output a single integer, the greatest common divisor of m and n. -----Example----- Input 12 15 Output 3","solution":"def gcd(m, n): Returns the greatest common divisor (GCD) of m and n. while n: m, n = n, m % n return m"},{"question":"Given a non-empty array of integers representing the heights of buildings in an urban landscape where the width of each building is 1, write a program to determine the maximum amount of water that can be trapped between the buildings after it rains. INPUT The first and only line of the input contains space-separated integers, representing the building heights. OUTPUT Output a single integer, which is the maximum amount of water that can be trapped. CONSTRAINTS 1 ≤ number of buildings ≤ 1000 0 ≤ height of a building ≤ 1000 SAMPLE INPUT 4 2 0 3 2 5 SAMPLE OUTPUT 9 Note: Rainwater is trapped where there are dips between the heights of buildings. The amount of trapped water can be visualized as the shaded area between the buildings in the histogram.","solution":"def trap_rainwater(heights): Given a list of non-negative integers representing the heights of buildings, returns the maximum amount of water that can be trapped after raining. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left max height array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right max height array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the accumulated water water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"*Let\'s help Sam keep track of his tasks. Implement a class `Task` that holds an id, description, and priority. Additionally, implement a class `TaskList` that manages a collection of tasks.* Follow the below specifications: # Task Class - **Attributes**: - An integer `id` - A string `description` - A string `priority` (can be \\"low\\", \\"medium\\", or \\"high\\") - **Methods**: - `__init__(self, id, description, priority)` - initializes a new task with the given id, description, and priority. - `__str__(self)` - returns a string representation of the task in the format: \\"Task [id]: [description] ([priority])\\" # TaskList Class - **Attributes**: - A list `tasks` to store multiple `Task` objects - **Methods**: - `add_task(self, task)` - adds a `Task` object to the list of tasks. - `remove_task(self, id)` - removes the `Task` with the specified id from the list. - `list_tasks(self)` - returns a string listing all tasks in the format: ``` 1. [description] ([priority]) 2. [description] ([priority]) ``` **Example:** ```python task1 = Task(1, \\"Complete math homework\\", \\"high\\") task2 = Task(2, \\"Go to the grocery store\\", \\"medium\\") task_list = TaskList() task_list.add_task(task1) task_list.add_task(task2) print(task_list.list_tasks()) # Output: # 1. Complete math homework (high) # 2. Go to the grocery store (medium) task_list.remove_task(1) print(task_list.list_tasks()) # Output: # 1. Go to the grocery store (medium) ``` **Constraints:** - Task ids are unique positive integers. - Descriptions are non-empty strings. - Priorities are case-insensitive (i.e., \\"High\\" and \\"high\\" should be treated the same).","solution":"class Task: def __init__(self, id, description, priority): self.id = id self.description = description self.priority = priority.lower() def __str__(self): return f\\"Task {self.id}: {self.description} ({self.priority})\\" class TaskList: def __init__(self): self.tasks = [] def add_task(self, task): self.tasks.append(task) def remove_task(self, id): self.tasks = [task for task in self.tasks if task.id != id] def list_tasks(self): output = [] for idx, task in enumerate(self.tasks, start=1): output.append(f\\"{idx}. {task.description} ({task.priority})\\") return \\"n\\".join(output)"},{"question":"Write a function that takes an array of integers and an integer k, and rearranges the array in such a way that the element at position i moves to position (i+k) % n, where n is the length of the array. The function should modify the array in place and return the modified array. Note: You are not allowed to use any additional arrays to solve this problem. Input The first line contains two integers: n and k (1 ≤ n, k ≤ 105) — the length of the array and the number of positions each element should be shifted. The second line contains n integers — the elements of the array. Output Print the rearranged array with the elements shifted by k positions. Examples Input 5 2 1 2 3 4 5 Output 4 5 1 2 3 Input 7 3 10 20 30 40 50 60 70 Output 40 50 60 70 10 20 30","solution":"def rearrange_array(arr, k): Rearranges the array such that the element at position i moves to position (i + k) % n. Modifies the array in place and returns it. n = len(arr) k = k % n # To handle cases where k > n reverse(arr, 0, n - 1) reverse(arr, 0, k - 1) reverse(arr, k, n - 1) return arr def reverse(arr, start, end): while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1"},{"question":"Alice is exploring a peculiar grid. The grid consists of M times N cells, with each cell either empty (represented by \\".\\") or containing an obstacle (represented by \\"#\\"). Alice can move from a cell to any of its four neighboring cells (up, down, left, right), but she cannot move into an obstacle or outside the grid. Alice starts at the top-left corner of the grid and aims to reach the bottom-right corner. Alice wants to know the minimum number of moves required to reach the bottom-right corner from the top-left corner. If it\'s impossible for Alice to reach the destination, output -1. -----Input----- The first line of input contains two integers M and N (1 leq M, N leq 100). Each of the next M lines contains N characters — \'.\' for an empty cell and \'#\' for an obstacle. -----Output----- Output the minimum number of moves required for Alice to reach the bottom-right corner from the top-left corner. If it\'s impossible, output -1. -----Examples----- Sample Input 1: 3 3 ... .#. ... Sample Output 1: 4 Sample Input 2: 3 3 ... # ... Sample Output 2: -1","solution":"from collections import deque def min_moves_to_reach_bottom_right(M, N, grid): # Check if start or end cell is an obstacle if grid[0][0] == \'#\' or grid[M - 1][N - 1] == \'#\': return -1 # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() # If we have reached the bottom-right corner if row == M - 1 and col == N - 1: return dist for d in directions: new_row, new_col = row + d[0], col + d[1] if 0 <= new_row < M and 0 <= new_col < N and (new_row, new_col) not in visited and grid[new_row][new_col] == \'.\': queue.append((new_row, new_col, dist + 1)) visited.add((new_row, new_col)) # If we finished BFS and did not reach the bottom-right corner return -1"},{"question":"A company wants to generate a random 10-character alphanumeric string as a unique identifier for its new products. The string should contain at least one uppercase letter, one lowercase letter, and one digit. -----Input----- You will not be given any input. -----Output----- Return a string that is 10 characters long and contains at least one uppercase letter, one lowercase letter, and one digit. -----Examples---- Output Ab1cD9FgHr Output 12aBcDefGh","solution":"import random import string def generate_unique_id(): Generates a random 10-character alphanumeric string that contains at least one uppercase letter, one lowercase letter, and one digit. # Generate one uppercase letter, one lowercase letter, and one digit upper_case = random.choice(string.ascii_uppercase) lower_case = random.choice(string.ascii_lowercase) digit = random.choice(string.digits) # Generate the rest of the 7 characters randomly from alphanumeric characters remaining_characters = [random.choice(string.ascii_letters + string.digits) for _ in range(7)] # Combine all characters and shuffle them to ensure randomness unique_id_list = [upper_case, lower_case, digit] + remaining_characters random.shuffle(unique_id_list) return \'\'.join(unique_id_list)"},{"question":"Chef is experimenting with prime numbers and their interesting properties. Today, he is fascinated by the concept of twin primes. A pair of prime numbers (p1, p2) is called twin primes if p2 = p1 + 2. He seeks your help to determine the number of twin prime pairs (p1, p2) such that both p1 and p2 lie within the given range [L, R] (inclusive). ------ Input ------ The input consists of two integers L and R separated by a space. ------ Output ------ Output a single integer representing the count of twin prime pairs in the range [L, R]. ------ Constraints ------ 1 ≤ L ≤ R ≤ 10^6 ----- Sample Input 1 ------ 3 13 ----- Sample Output 1 ------ 3 ----- Explanation 1 ------ The twin prime pairs within the range [3, 13] are (3, 5), (5, 7), and (11, 13). Therefore, the count is 3. ----- Sample Input 2 ------ 10 19 ----- Sample Output 2 ------ 2 ----- Explanation 2 ------ The twin prime pairs within the range [10, 19] are (11, 13) and (17, 19). Therefore, the count is 2.","solution":"def sieve_of_eratosthenes(max_num): Generates a list to determine if numbers up to max_num are prime. is_prime = [True] * (max_num + 1) is_prime[0] = is_prime[1] = False p = 2 while (p * p <= max_num): if (is_prime[p] == True): for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 return is_prime def count_twin_primes(L, R): Counts the twin prime pairs in the range [L, R] if L < 2: L = 2 is_prime = sieve_of_eratosthenes(R) twin_prime_count = 0 for i in range(L, R - 1): if is_prime[i] and is_prime[i + 2]: twin_prime_count += 1 return twin_prime_count"},{"question":"You are given a list of words. Two words are said to be similar if they have the same set of characters with the same frequencies. Determine the number of distinct groups of similar words in the list. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N — the number of words. - The next N lines each contain a single word consisting of lowercase English letters. ------ Output Format ------ For each test case, output the number of distinct groups of similar words. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ |word| ≤ 100 ----- Sample Input 1 ------ 3 5 abc bca cab foo oof 4 abcd bcda dabc abcde 3 xyz xy xz ----- Sample Output 1 ------ 2 2 3 ----- Explanation 1 ------ Test Case 1: The words \\"abc\\", \\"bca\\", and \\"cab\\" are similar to each other forming one group. The words \\"foo\\" and \\"oof\\" are similar to each other forming another group. Hence, there are 2 distinct groups. Test Case 2: The words \\"abcd\\", \\"bcda\\", and \\"dabc\\" are similar to each other forming one group. The word \\"abcde\\" forms its own group. Hence, there are 2 distinct groups. Test Case 3: None of the words \\"xyz\\", \\"xy\\", and \\"xz\\" are similar to each other, so each word forms its own group. Hence, there are 3 distinct groups.","solution":"from collections import Counter def number_of_distinct_groups(t, test_cases): results = [] for i in range(t): n, words = test_cases[i] unique_groups = set() for word in words: word_signature = tuple(sorted(Counter(word).items())) unique_groups.add(word_signature) results.append(len(unique_groups)) return results"},{"question":"You are given n sticks with lengths L1, L2, ..., Ln. Your goal is to cut these sticks into smaller sticks such that the length of each small stick is exactly k units. The cutting process does not incur any material loss, but you cannot glue smaller sticks back together. The objective is to maximize the total number of k-length sticks you can obtain from these n sticks. Input The first line of input contains two integers n and k (1 ≤ n ≤ 500, 1 ≤ k ≤ 100) — the number of sticks and the desired length of each smaller stick, respectively. The second line contains n integers L1, L2, ..., Ln (1 ≤ Li ≤ 10^4) — the lengths of the sticks. Output Print a single integer — the maximum number of k-length sticks you can obtain from the original n sticks. Examples Input 5 3 10 13 15 18 24 Output 23 Input 4 5 20 7 5 15 Output 9 Note In the first example, you can cut each stick into the following number of 3-length pieces: 10 // 3 = 3, 13 // 3 = 4, 15 // 3 = 5, 18 // 3 = 6, and 24 // 3 = 8. Altogether the total number of k-length sticks is 3 + 4 + 5 + 6 + 8 = 26. In the second example, you can cut each stick into the following number of 5-length pieces: 20 // 5 = 4, 7 // 5 = 1, 5 // 5 = 1, and 15 // 5 = 3. Altogether the total number of k-length sticks is 4 + 1 + 1 + 3 = 9.","solution":"def max_k_length_sticks(n, k, lengths): Returns the maximum number of k-length sticks that can be obtained from the given lengths. total_sticks = 0 for length in lengths: total_sticks += length // k return total_sticks"},{"question":"Write a program that determines if two given segments intersect. Implement the function to return True if the segments intersect and False otherwise. A segment is defined by two endpoints, (x_1, y_1) and (x_2, y_2) for the first segment, and (x_3, y_3) and (x_4, y_4) for the second segment. Constraints * -10,000 leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 leq 10,000 Input The input consists of several datasets. The first line contains an integer n specifying the number of datasets. Each of the next n lines contains eight real numbers representing the coordinates of two segments: x_1 y_1 x_2 y_2 x_3 y_3 x_4 y_4 Output For each dataset, print True if the segments intersect, otherwise print False. Example Input 2 0 0 2 2 0 2 2 0 1 1 3 3 4 4 6 6 Output True False","solution":"def do_segments_intersect(x1, y1, x2, y2, x3, y3, x4, y4): Returns True if segments (x1, y1) -> (x2, y2) and (x3, y3) -> (x4, y4) intersect, False otherwise. def on_segment(px, py, qx, qy, rx, ry): if min(px, qx) <= rx <= max(px, qx) and min(py, qy) <= ry <= max(py, qy): return True return False def orientation(px, py, qx, qy, rx, ry): val = (qy - py) * (rx - qx) - (qx - px) * (ry - qy) if val == 0: return 0 # collinear elif val > 0: return 1 # clockwise else: return 2 # counterclockwise o1 = orientation(x1, y1, x2, y2, x3, y3) o2 = orientation(x1, y1, x2, y2, x4, y4) o3 = orientation(x3, y3, x4, y4, x1, y1) o4 = orientation(x3, y3, x4, y4, x2, y2) if o1 != o2 and o3 != o4: return True if o1 == 0 and on_segment(x1, y1, x2, y2, x3, y3): return True if o2 == 0 and on_segment(x1, y1, x2, y2, x4, y4): return True if o3 == 0 and on_segment(x3, y3, x4, y4, x1, y1): return True if o4 == 0 and on_segment(x3, y3, x4, y4, x2, y2): return True return False"},{"question":"You have a list of integers where every element appears twice except for one, which appears only once. Your task is to find the element that appears only once. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains a sequence of 2N+1 integers where 1 ≤ N ≤ 10^5. Output For each testcase, print a single line with the integer that appears only once. Constraints 1 ≤ T ≤ 10^3 1 ≤ a[i] ≤ 10^6 Subtasks Subtask #1 (20 points) 1 ≤ T ≤ 10^2 1 ≤ a[i] ≤ 10^4 1 ≤ N ≤ 10^2 Subtask #2 (80 points) Original constraints. Sample Testcase Sample Input 2 1 2 3 2 1 4 5 4 5 7 6 7 Sample Output 3 6","solution":"def find_unique_element(test_cases): For each test case, finds the element that appears only once in the list. result = [] for case in test_cases: unique_element = 0 for number in case: unique_element ^= number result.append(unique_element) return result"},{"question":"You\'re organizing a competition with varying difficulty levels. Each participant can solve problems of certain difficulty levels, and you want to find the maximum number of unique problems that can be solved in the competition. You are given a list of participants and the difficulty levels of problems they can solve. Your task is to assign a subset of problems to the participants such that each participant can solve at least one problem from the subset, and the number of unique problems is maximized. Input The first line of the input gives the number of test cases, T. T lines follow, each with a positive integer N denoting the number of participants, followed by N lines each containing a list of space-separated integers. The integers in each list represent the difficulty levels of problems that the i-th participant can solve. Output For each test case, output one line containing \\"Case #x: y\\", where x is the test case number (starting from 1) and y is the maximum number of unique problems that can be assigned such that each participant can solve at least one of them. Limits 1 ≤ N ≤ 100 1 ≤ Difficulty level ≤ 1000 SAMPLE INPUT 2 3 1 2 3 2 4 1 4 5 2 8 9 10 7 8 9 SAMPLE OUTPUT Case #1: 4 Case #2: 4 Explanation In Case #1, one optimal way to assign problems is: - Participant 1: Problem 1 - Participant 2: Problem 4 - Participant 3: Problem 5 and 2 Note that all participants have at least one problem they can solve. Hence, the maximum number of unique problems is 4. In Case #2, one optimal way to assign problems is: - Participant 1: Problem 10 - Participant 2: Problems 7, 8, 9 Note that we can achieve a maximum of 4 unique problems since all participants have at least one problem they can solve.","solution":"def max_unique_problems(test_cases): results = [] for case_num, participants in enumerate(test_cases, 1): all_problems = set() for participant in participants: all_problems.update(participant) # To maximize, we need to ensure each participant can solve at least one problem # This means we need at least N unique problems for N participants # Using a set takes care of duplicates automatically unique_problems = len(all_problems) required_problems = len(participants) # The answer for each test case would be the max of unique problems but ensuring each participant can solve one max_unique = min(unique_problems, required_problems) results.append(f\\"Case #{case_num}: {max_unique}\\") return results # Example setup input_data = [ [[1, 2, 3], [2, 4], [1, 4, 5]], # Test case 1 [[8, 9, 10], [7, 8, 9]] # Test case 2 ] print(max_unique_problems(input_data))"},{"question":"You are given an array of integers. Determine whether it is possible to split the array into two non-empty subsets such that sums of the elements in both subsets are equal. -----Constraints----- - 1 ≤ length of the array ≤ 5000 - Each element in the array is a positive integer no greater than 10000. -----Partial Score----- - 200 points will be awarded as a partial score for passing the test set of arrays with length ≤ 50. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n -----Output----- Print \\"YES\\" if it is possible to split the array into two subsets with equal sums. Otherwise, print \\"NO\\". -----Sample Input----- 4 1 5 11 5 -----Sample Output----- YES Explanation: We can split the array into two subsets {1, 5, 5} and {11} with equal sums.","solution":"def can_partition(nums): total_sum = sum(nums) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(nums) dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return \\"YES\\" if dp[target] else \\"NO\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) nums = list(map(int, data[1:])) print(can_partition(nums))"},{"question":"Your program will be given a list of integers. Find the largest sum of contiguous subarray within the list of integers. -----Input----- The first line of input contains an integer n (1 le n le 10^5), representing the number of elements in the list. The second line contains n integers separated by space, representing the elements of the list. Each integer will be in the range of -10^4 le text{integer} le 10^4. -----Output----- Output the largest sum of contiguous subarray on a single line. -----Examples----- Sample Input 1: 9 -2 1 -3 4 -1 2 1 -5 4 Sample Output 1: 6 Sample Input 2: 5 1 2 3 4 5 Sample Output 2: 15","solution":"def max_subarray_sum(n, arr): Finds the largest sum of contiguous subarray within the list of integers using Kadane’s algorithm. if n == 0: return 0 max_current = max_global = arr[0] for i in range(1, n): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global # Example usage: # n = 9 # arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] # print(max_subarray_sum(n, arr)) # Output: 6"},{"question":"In a distant land called Nogot, the people use a peculiar numbering system. They express numbers using a base-N that changes dynamically with every digit. Specifically, the value of the base-N for each digit is determined by the value of the previous digit plus one. For example, if the digit sequence is `abc`, then the value of `a` is in base-1, the value of `b` in base-(a+1), and the value of `c` in base-(b+1). Given two numbers in base-1 notation, determine if one number is greater than, less than, or equal to the other. The notation for each number follows these rules: 1. The first digit (most significant) can only be `0` or `1` (base-1 notation). 2. Each subsequent digit is from `0` to the current base-1 value (the value of the previous digit plus one). 3. The numbers are guaranteed not to have leading zeros. For example, to compare numbers `101` and `110`: - In base-1, `1` followed by `0` in base-2 (`1`+1), followed by `1` in base-1 (`0`+1). - Resulting in: `101_base = 1*2^2 + 0*1 + 1*1 = 5` Write a function to determine the relationship (>, <, =) between any two given numbers. Input The input consists of two lines: - The first line contains the first number as a string. - The second line contains the second number as a string. Output The output should be one of three possible strings: \\">\\", \\"<\\", or \\"=\\". Examples Input 101 110 Output < Input 10 1 Output > Input 110 110 Output = Input 1 10 Output < Input 0 10 Output <","solution":"def compare_dynamic_base_numbers(num1, num2): def to_decimal(number): length = len(number) decimal_value = 0 current_base = 1 for i in range(length): digit = int(number[i]) if i > 0: current_base = int(number[i - 1]) + 1 decimal_value = decimal_value * current_base + digit return decimal_value decimal_num1 = to_decimal(num1) decimal_num2 = to_decimal(num2) if decimal_num1 > decimal_num2: return \\">\\" elif decimal_num1 < decimal_num2: return \\"<\\" else: return \\"=\\""},{"question":"Given a binary tree, your task is to find the ‘k’th smallest element in this tree. The binary tree nodes contain integer values and follow the standard properties of a binary search tree (i.e., the left subtree of a node contains only nodes with keys less than the node\'s key, and the right subtree only nodes with keys greater than the node\'s key). Input description: - The first line of input consists of an integer T, the number of test cases. - For each test case, the first line contains an integer k. - The second line contains a string representing the preorder traversal of the binary tree where nodes are represented by integers and null nodes are represented by `null`. The values are separated by spaces. Output description: - For each test case, output a single line containing the kth smallest element in the binary tree. Constraints: - 1 ≤ T ≤ 10^5 - The number of nodes in the binary tree is less than or equal to 10^5. - 1 ≤ k ≤ number of nodes Example: Input: 2 3 5 3 2 null null 4 null null 8 7 null null 9 null null 2 3 1 null null 4 null null Output: 4 3 Note: The binary tree is represented in preorder traversal which includes the nodes and their structure. This ensures that the tree can be reconstructed from the input.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(preorder): Build a binary search tree from a preorder traversal list. def helper(preorder_iter): val = next(preorder_iter) if val == \\"null\\": return None node = TreeNode(int(val)) node.left = helper(preorder_iter) node.right = helper(preorder_iter) return node return helper(iter(preorder)) def kth_smallest(root, k): Find the kth smallest element in the binary search tree. def inorder_traverse(node): if not node: return [] return inorder_traverse(node.left) + [node.val] + inorder_traverse(node.right) inorder = inorder_traverse(root) return inorder[k-1] def find_kth_smallest(test_cases): results = [] for k, preorder_str in test_cases: preorder = preorder_str.split() root = build_tree(preorder) results.append(kth_smallest(root, k)) return results"},{"question":"A software company has M servers labelled as 1 to M. Each server requires a certain amount of processing units to operate successfully. The i-th server requires b_i processing units (1 ≤ i ≤ M). One central unit is available which has a pool of y processing units. The aim is to maximize the number of servers that can operate simultaneously by optimally distributing the processing units. Each server can either be fully operational (receives exactly its required processing units) or non-operational (receives zero processing units). If a server does not receive the exact number of processing units it requires, it will remain non-operational. Constraints: * All values in input are integers. * 2 ≤ M ≤ 100 * 1 ≤ y ≤ 10^9 * 1 ≤ b_i ≤ 10^9 Input: Input is given from Standard Input in the following format: M y b_1 b_2 ... b_M Output: Print the maximum possible number of servers that can be made operational. Examples: Input: 4 100 30 40 20 50 Output: 3 Input: 3 50 10 20 30 Output: 2 Input: 5 300 200 50 80 70 60 Output: 4 Input: 4 5 10 20 15 25 Output: 0","solution":"def max_operational_servers(M, y, b): Returns the maximum number of servers that can operate simultaneously given the processing units. Arguments: M : int - Number of servers y : int - Total available processing units from the central pool b : list of int - List of required processing units for each server Returns: int - Maximum number of servers that can operate simultaneously b.sort() count = 0 for i in range(M): if y >= b[i]: y -= b[i] count += 1 else: break return count"},{"question":"You are given an array of integers, each representing the heights of different buildings in a skyline view from left to right. A building is only visible if there are no taller buildings to its left. For example, given the array `[3, 7, 8, 3, 6, 1]`, the buildings with heights `3`, `7`, and `8` are visible as there are no taller buildings before them. The buildings with heights `3`, `6`, and `1` that come afterwards are not visible because they are shorter than `8`. You should return an array of the heights of the visible buildings in order from left to right. For example, given the input `[3, 7, 8, 3, 6, 1]`, you should return `[3, 7, 8]`.","solution":"def visible_buildings(heights): Returns an array of the heights of the visible buildings in order from left to right. max_height = 0 visible = [] for height in heights: if height > max_height: visible.append(height) max_height = height return visible"},{"question":"You are a navigator for a fleet of ships participating in a grand sea race. Each ship is given a unique label from 1 to N. Every ship has a certain speed and a certain position at a given moment in time. The ships all start racing from their respective positions, and each of them travels in a straight line at a constant speed to a designated finish line. The goal is to determine the order in which the ships will arrive at the finish line. It\'s important to note: - All ships start racing at the same time. - The positions and finish line are all on a straight line. -----Input----- The first line of input contains the integer N (1 leq N leq 10^5), the number of ships. The second line of input contains N integers P_ i (1 leq P_ i leq 10^9), the initial positions of the ships. The third line of input contains N integers S_ i (1 leq S_ i leq 10^9), the speeds of the ships. The fourth line of input contains a single integer F (1 leq F leq 10^9), the position of the finish line. -----Output----- The first and only line of output must contain N integers, the labels of the ships in the order in which they reach the finish line. If two ships reach the finish line simultaneously, they should be ordered by their labels in ascending order. -----Examples----- Sample Input 1: 3 2 3 4 5 6 7 10 Sample Output 1: 3 2 1 Sample Input 2: 4 5 1 4 3 2 5 1 3 10 Sample Output 2: 2 4 1 3 Explain the Example: In the first example, the position of the finish line is 10. The ships labeled 1, 2, and 3 start from positions 2, 3, and 4 with speeds 5, 6, and 7 respectively. - Ship 3 reaches the finish line first because it has the highest speed. - Ship 2 reaches the finish line second, and - Ship 1 reaches the finish line third.","solution":"def determine_ship_order(N, positions, speeds, finish_line): Determines the order in which the ships arrive at the finish line. Args: N : int : Number of ships positions : list of int : The initial positions of the ships speeds : list of int : The speeds of the ships finish_line : int : The position of the finish line Returns: list of int : Labels of ships in the order they reach the finish line time_to_finish = [] for i in range(N): time = (finish_line - positions[i]) / speeds[i] time_to_finish.append((time, i + 1)) time_to_finish.sort() return [item[1] for item in time_to_finish]"},{"question":"You are given an integer \'n\'. Your task is to print an \'X\' pattern using the \'#\' symbol such that it spans \'n\' rows. Example: Input: n=3 Output: # # # # # Input: n=4 Output: # # # # Constraint: 3 ≤ n ≤ 20 SAMPLE INPUT 5 SAMPLE OUTPUT # # # # # # # # # Explanation The \'X\' is printed across 5 lines as shown above.","solution":"def print_x_pattern(n): Prints an \'X\' pattern using the \'#\' symbol that spans `n` rows. Parameters: n (int): The number of rows for the \'X\' pattern. Must be an odd integer. Returns: List of strings: The \'X\' pattern where each string represents a row. pattern = [] for i in range(n): row = \\"\\" for j in range(n): if j == i or j == n - i - 1: row += \\"#\\" else: row += \\" \\" pattern.append(row) return pattern"},{"question":"You are given a list of n integers representing the heights of n towers. You can perform the following operation any number of times: choose a tower and reduce its height by 1, provided that the height remains non-negative. You want to minimize the difference between the maximum and minimum height of the towers after performing any number of operations. Find the minimum possible difference you can achieve. -----Input----- The first line contains one integer n (2 le n le 100) — the number of towers. The second line contains n integers h_1, h_2, ..., h_n (1 le h_i le 1000), where h_i is the initial height of the i-th tower. -----Output----- Print one integer — the minimum possible difference between the height of the tallest and the shortest tower you can achieve. -----Examples----- Input 5 5 1 8 4 10 Output 2 Input 3 3 3 3 Output 0 Input 4 1 2 3 4 Output 0 -----Note----- In the first example, you can reduce the heights as follows: reduce the third tower from 8 to 5, the fifth tower from 10 to 5, then the towers will be [5, 1, 5, 4, 5]. Further reduce the second tower from 1 to 5, and the fourth tower from 4 to 5 to get the final heights [5, 5, 5, 5, 5]. The difference is 0, which is the minimum possible. In the second example, all towers already have the same height, so no operations are required. In the third example, you can reduce the height of the fourth tower from 4 to 1, the third tower from 3 to 1, and the second tower from 2 to 1, so the final heights are [1, 1, 1, 1]. The difference is 0, which is the minimum possible.","solution":"def minimize_height_difference(n, heights): Given the number of towers and their heights, this function returns the minimum possible difference between the height of the tallest and the shortest tower after reducing heights. # Minimum height is the height of the shortest tower min_height = min(heights) # Reduce all towers to min_height and calculate the new heights new_heights = [height - min_height for height in heights] # Since we have reduced all towers to the minimum height, their difference is 0 return 0"},{"question":"You are working on an automated validation system for a large scale data entry process. Each data entry consists of a list of integer values. Due to system constraints, it is necessary to identify and remove any duplicate entries from the input list while preserving the original order of first occurrences of each element. You are tasked with implementing this functionality. To maintain efficiency, your solution should ideally have a time complexity of O(N). -----Input----- The first line of input contains a single integer N (1 leq N leq 10^6), representing the number of elements in the data list. The second line contains N integers, A_1, A_2, dots , A_ N (1 leq A_ i leq 10^9), representing the elements of the data. -----Output----- Output a single line containing the processed list, with duplicates removed and the order of first occurrences preserved. -----Examples----- Sample Input 1: 6 5 3 5 2 3 1 Sample Output 1: 5 3 2 1 Sample Input 2: 5 1 2 3 4 5 Sample Output 2: 1 2 3 4 5 Sample Input 3: 8 4 5 4 5 6 7 7 8 Sample Output 3: 4 5 6 7 8","solution":"def remove_duplicates(data_list): seen = set() result = [] for num in data_list: if num not in seen: result.append(num) seen.add(num) return result def process_input(n, data): return remove_duplicates(data)"},{"question":"John has a sequence of integers represented by an array a of length n. He defines a new array b as follows: each element b[i] is the product of all elements of a except a[i]. Your task is to find the array b given the array a. You must solve this problem without using division and in O(n) time complexity. -----Input----- The first line contains a single integer n (2 leq n leq 10^5), which is the length of the array a. The second line contains n integers a_i (1 leq a_i leq 10^5) representing the array a. -----Output----- Print n integers b_i (1 leq b_i leq 10^{15}) representing the array b. -----Examples----- Input 4 1 2 3 4 Output 24 12 8 6 Input 3 5 6 7 Output 42 35 30 Output 5 10 3 5 6 2 Input 180 600 360 300 900 -----Note----- In the first example, for array a = [1, 2, 3, 4], the array b can be computed as b = [2*3*4, 1*3*4, 1*2*4, 1*2*3] = [24, 12, 8, 6]. In the second example, for array a = [5, 6, 7], the array b can be calculated as b = [6*7, 5*7, 5*6] = [42, 35, 30].","solution":"def product_array(a): Given an integer array a, returns an array b where each element b[i] is the product of all elements of a except a[i]. n = len(a) if n == 1: return [0] # Initialize arrays for left and right products left_products = [0] * n right_products = [0] * n b = [0] * n # Calculate left products left_products[0] = 1 for i in range(1, n): left_products[i] = left_products[i - 1] * a[i - 1] # Calculate right products right_products[n - 1] = 1 for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * a[i + 1] # Calculate result array for i in range(n): b[i] = left_products[i] * right_products[i] return b"},{"question":"Suppose you are given a string consisting of characters \'a\', \'b\', and \'c\' only. Your task is to determine if you can transform this string into a string that contains only the character \'a\' by repeatedly performing the following operation: choose any consecutive three characters and replace them with a single \'a\'. If you can transform the entire string into a single \'a\', output \\"YES\\"; otherwise, output \\"NO\\". Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 1000) composed only of the characters \'a\', \'b\', and \'c\'. Output Output \\"YES\\" if the string can be transformed into a single \'a\' using the described operation, otherwise output \\"NO\\". SAMPLE INPUT aaabbbccc SAMPLE OUTPUT YES Explanation You can transform \\"aaabbbccc\\" as follows: 1. Replace \\"bbb\\" with \'a\': \\"aaaabccc\\" 2. Replace \\"ccc\\" with \'a\': \\"aaaaa\\" 3. Replace \\"aaa\\" with \'a\': \\"aa\\" 4. Replace \\"aaa\\" (by considering the first \'a\' from the remaining ones): \\"a\\" Since we end up with a single \'a\', the output is \\"YES\\". Consider another example: SAMPLE INPUT aabbbc SAMPLE OUTPUT NO Explanation We cannot make any move to reduce the length of the string as there is no group of three characters to replace with a single \'a\'. Therefore, the output is \\"NO\\".","solution":"def can_transform_to_single_a(s): Determines if the string s can be transformed into a single \'a\' by repeatedly replacing any three consecutive characters with \'a\'. while len(s) > 1: changed = False for i in range(len(s) - 2): if s[i] == s[i + 1] == s[i + 2]: s = s[:i] + \'a\' + s[i + 3:] changed = True break if not changed: return \\"NO\\" return \\"YES\\" if s == \'a\' else \\"NO\\""},{"question":"In a certain city, there are `n` intersections connected by `m` two-way roads. Each road has a unique length represented by a positive integer. Two intersections may be directly connected by more than one road (parallel roads). The city administration wants to ensure that it is possible to travel between any two intersections using these roads. Therefore, they need to create a minimum-cost system of roads that ensures the whole city is connected. Your task is to write a function: ```find_minimum_cost(n, roads)``` where - `n` is the number of intersections labeled from `1` to `n`, - `roads` is a list of tuples where each tuple `(u, v, w)` represents a road between intersections `u` and `v` with length `w`. The function should return the minimum total length of the roads that ensures all intersections are connected. # Example: ```python find_minimum_cost(4, [(1, 2, 1), (2, 3, 4), (3, 4, 2), (4, 1, 6), (1, 3, 5)]) ``` Output: ``` 7 ``` (Explanation: The minimum-cost system to connect all intersections is {(1, 2, 1), (3, 4, 2), (2, 3, 4)} totaling 7 units of length) # Constraints: - All intersections are guaranteed to be connectable via some system of roads. - `1 <= n <= 1000` - `1 <= m <= 2000` - `1 <= w <= 10^4` (Note: You may use algorithms such as Kruskal\'s or Prim\'s to solve this problem efficiently.)","solution":"def find_minimum_cost(n, roads): Returns the minimum total length of the roads that ensures all intersections are connected. # Union-Find data structure to help with Kruskal\'s algorithm parent = [i for i in range(n + 1)] rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 # Sort edges based on weight roads.sort(key=lambda x: x[2]) total_cost = 0 edges_used = 0 # Kruskal\'s algorithm to find the Minimum Spanning Tree for u, v, w in roads: if find(u) != find(v): union(u, v) total_cost += w edges_used += 1 if edges_used == n - 1: break return total_cost"},{"question":"You are given an array of integers where each integer is in the range from 1 to N and the integers can be repeated. Your goal is to find the smallest missing positive integer from the array that doesn\'t appear in it. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. For each test case: - The first line contains an integer N, indicating the size of the array. - The second line contains N space-separated integers representing the elements of the array. ------ Output ------ For each test case, output a single line containing a single integer, which is the smallest missing positive integer in the array. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^4 1 ≤ A_i ≤ 10^6 The sum of N over all test cases will not exceed 10^6. ------ Sample Input 1 ------ 2 3 1 2 0 4 4 3 2 7 ------ Sample Output 1 ------ 3 1 ------ Explanation 1 ------ First Example: The array is [1, 2, 0]. The smallest positive integer missing from this array is 3 since 1 and 2 are present, but 3 is not. Second Example: The array is [4, 3, 2, 7]. The smallest positive integer missing from this array is 1 since 1 is not present.","solution":"def smallest_missing_positive(arr): Returns the smallest missing positive integer in the array. n = len(arr) for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: correct_idx = arr[i] - 1 arr[i], arr[correct_idx] = arr[correct_idx], arr[i] for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1 def process_test_cases(test_cases): results = [] for arr in test_cases: result = smallest_missing_positive(arr) results.append(result) return results"},{"question":"Given an array of integers and an integer X, you need to find the minimum number of elements you need to remove from the array so that the maximum element in the remaining array is less than or equal to X. If it is not possible, return -1. ------ Input Format ------ - The first line of input contains a single integer T - the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and X - the length of the array and the maximum allowable value respectively. - The second line of each test case contains N integers - the elements of the array. ------ Output Format ------ For each test case, output the minimum number of elements to remove to satisfy the condition, or -1 if it\'s not possible. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{5} 1 ≤ X ≤ 10^{9} 1 ≤ A_{i} ≤ 10^{9} ------ Sample Input 1 ------ 2 5 4 5 1 3 7 2 4 6 3 8 7 10 ------ Sample Output 1 ------ 2 3 ------ Explanation 1 ------ Test case 1: The array is [5, 1, 3, 7, 2]. To make the maximum element less than or equal to 4, we can remove 5 and 7. So, the output is 2. Test case 2: The array is [3, 8, 7, 10]. To make the maximum element less than or equal to 6, we need to remove 8, 7, and 10. So, the output is 3.","solution":"def min_removals_to_satisfy_max(arr, X): Returns the minimum number of elements to remove from the array such that the maximum element in the remaining array is less than or equal to X. If it is not possible, returns -1. if max(arr) <= X: return 0 else: count = 0 for num in sorted(arr, reverse=True): if num > X: count += 1 else: break return count def process_test_cases(test_cases): results = [] for case in test_cases: N, X = case[\\"NX\\"] arr = case[\\"array\\"] result = min_removals_to_satisfy_max(arr, X) results.append(result) return results"},{"question":"You are given multiple logs, each representing a user’s activity on a particular day. Each log entry contains a user ID, and a timestamp formatted as \\"YYYY-MM-DD\\". Your task is to identify the most recent date for each user and return a list of tuples where each tuple consists of a user ID and their most recent activity date. The input will be a list of logs, where each log is represented as a tuple (user_id, timestamp). No two timestamps for the same user are the same. Example: Input: [ (\\"user1\\", \\"2023-04-01\\"), (\\"user2\\", \\"2023-03-15\\"), (\\"user1\\", \\"2023-04-03\\"), (\\"user2\\", \\"2023-03-16\\"), (\\"user3\\", \\"2023-02-27\\") ] Output: [ (\\"user1\\", \\"2023-04-03\\"), (\\"user2\\", \\"2023-03-16\\"), (\\"user3\\", \\"2023-02-27\\") ] Explanation: - For \\"user1\\", the most recent activity was on \\"2023-04-03\\". - For \\"user2\\", the most recent activity was on \\"2023-03-16\\". - For \\"user3\\", the only activity was on \\"2023-02-27\\". Note: - The list of logs will contain between 1 and 10,000 entries. - Each user ID will be a non-empty string of at most 20 characters. - The timestamp follows the \\"YYYY-MM-DD\\" format and is a valid date.","solution":"def find_most_recent_dates(logs): Finds the most recent activity date for each user. Args: logs (list of tuple): A list of log entries where each entry is a tuple (user_id, timestamp). Returns: list of tuple: A list of tuples where each tuple is (user_id, most_recent_date). most_recent = {} for user_id, timestamp in logs: if user_id not in most_recent or timestamp > most_recent[user_id]: most_recent[user_id] = timestamp return list(most_recent.items())"},{"question":"Given a non-negative integer N representing the number of stones in a pile, you can perform the following operation: choose any number of stones between 1 and k (inclusive) and remove them. The problem is to determine whether you can remove all the stones such that the total number of operations is minimized. If there are multiple ways with the same minimum number of operations, return any one of them. Example 1: Input: N = 10, k = 3 Output: 4 Explanation: One way to minimize the number of operations is: - Remove 3 stones (10-3=7) - Remove 3 stones (7-3=4) - Remove 3 stones (4-3=1) - Remove 1 stone (1-1=0) So, the minimum number of operations is 4. Example 2: Input: N = 15, k = 5 Output: 3 Explanation: One way to minimize the number of operations is: - Remove 5 stones (15-5=10) - Remove 5 stones (10-5=5) - Remove 5 stones (5-5=0) So, the minimum number of operations is 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minOperations() which takes two integers N and k as input and returns the minimum number of operations required. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 0 <= N <= 10^{5} 1 <= k <= 10","solution":"def minOperations(N, k): Returns the minimum number of operations to remove all stones from the pile. Parameters: N (int): the number of stones in the pile, must be non-negative. k (int): the maximum number of stones that can be removed in one operation, must be at least 1. Returns: int: the minimum number of operations required to remove all stones. if N == 0: return 0 return (N + k - 1) // k"},{"question":"Jack Sparrow has recently discovered a hidden island filled with treasure chests. Each chest is assigned a value which represents the amount of gold it contains. Captain Jack wants to carry the maximum possible amount of gold back to his ship but there is a catch — the chests are cursed. If he picks up one chest, he cannot pick up its adjacent chests as the curse will be triggered. Help Jack find the maximum amount of gold he can carry without activating any curse. Input The first line of input contains an integer t, the number of test cases. Each test case contains two lines: - The first line contains an integer n, the number of treasure chests. - The second line contains n integers, where the i-th integer represents the value of the i-th treasure chest. Output For each test case, output a single integer, the maximum gold Jack can carry without triggering the curse. Constraints 1 ≤ t ≤ 50 1 ≤ n ≤ 10^5 1 ≤ value of each chest ≤ 10^4 SAMPLE INPUT 4 3 2 3 4 4 5 1 1 5 5 3 2 5 10 7 3 6 7 1 SAMPLE OUTPUT 6 10 15 7 Explanation For the 1st test case, Jack can pick chests with values 2 and 4, to get a total of 6. For the 2nd test case, Jack can pick the first and last chests, with values 5 and 5, to get a total of 10. For the 3rd test case, Jack can pick the chests with values 3, 5 and 7, to get a total of 15. For the 4th test case, Jack can only pick the chest with value 7.","solution":"def max_gold(t, test_cases): def getMaxGold(chests): n = len(chests) if n == 0: return 0 elif n == 1: return chests[0] # dp[i] will be the max gold that can be collected up to chest i dp = [0] * n dp[0] = chests[0] dp[1] = max(chests[0], chests[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + chests[i]) return dp[-1] results = [] for case in test_cases: n, chests = case results.append(getMaxGold(chests)) return results"},{"question":"A stack is a linear data structure that follows the last-in, first-out (LIFO) principle. Given a stack and `Q` queries, each query can be one of the following types: 1. push x: query to push integer `x` onto the stack. 2. pop(): query to pop the top element from the stack. If the stack is empty, this query does nothing. 3. top(): query to return the top element of the stack. If the stack is empty, return -1. 4. getMin(): query to return the minimum element in the stack. If the stack is empty, return -1. You should implement the stack with the following functionalities: pushing an element, popping an element, returning the top element, and retrieving the minimum element efficiently. Example 1: Input: 7 push 10 push 20 getMin push 5 getMin pop getMin Output: 10 10 5 10 Explanation: 1. After push 10, stack will be [10] 2. After push 20, stack will be [10, 20] 3. The minimum element is 10 4. After push 5, stack will be [10, 20, 5] 5. The minimum element is 5 6. After pop, stack will be [10, 20] 7. The minimum element is 10 Example 2: Input: 4 push 15 push 7 pop getMin Output: 15 15 Explanation: 1. After push 15, stack will be [15] 2. After push 7, stack will be [15, 7] 3. After pop, stack will be [15] 4. The minimum element is 15 Your Task: Your task is to complete the following functions: - `push(x)` : Pushes `x` onto the stack and prints the stack size after the operation. - `pop()` : Pops the top element from the stack (if exists) and then the driver code prints the stack size. - `top()` : Returns the top element if it exists; otherwise, returns -1. The driver code prints the returned value. - `getMin()` : Returns the minimum element in the stack if it exists; otherwise, returns -1. The driver code prints the returned value. Expected Time Complexity: O(1) for all operations. Expected Auxiliary Space: O(n) for storing the elements where n is the number of elements in the stack. Constraints: 1 ≤ Number of queries ≤ 10^5 (*Note:* Output is also printed after every method call, see the driver code.)","solution":"class MinStack: def __init__(self): self.stack = [] self.min_stack = [] def push(self, x: int) -> int: self.stack.append(x) if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) return len(self.stack) def pop(self) -> int: if not self.stack: return 0 top_element = self.stack.pop() if top_element == self.min_stack[-1]: self.min_stack.pop() return len(self.stack) def top(self) -> int: if not self.stack: return -1 return self.stack[-1] def getMin(self) -> int: if not self.min_stack: return -1 return self.min_stack[-1]"},{"question":"Mikhail is playing a game with an array b consisting of n positive integers b_1, b_2, ldots, b_n. In the game, Mikhail can perform the following operation: choose any two distinct indices p and q, and then set all elements of b to the greatest common divisor (GCD) of b_p and b_q. He wants to make all elements of b equal in at most n-1 operations, or determine that it is impossible to do so. He needs your help to achieve this. -----Input----- The first line contains one integer n (2 leq n leq 10^5) — the length of b. The second line contains n integers, b_1, b_2, ldots, b_n (1 leq b_i leq 10^9) — elements of b. -----Output----- Print YES or NO in the first line depending on whether it is possible to make all elements equal in at most n-1 operations. If it is possible, print an integer m (0 leq m leq n-1), which denotes the number of operations you do. In each of the next m lines, print two distinct integers p and q, representing one operation. If there are multiple possible sequences of operations, you can print any. Note that you do not have to minimize the number of operations. -----Examples----- Input 3 6 12 15 Output YES 2 1 2 1 3 Input 4 10 2 5 7 Output NO -----Note----- In the first example, the array becomes [6, 6, 6] after two operations: First operation: set all elements to GCD(6, 12) = 6. Second operation: set all elements to GCD(6, 15) = 6. In the second example, there is no way to make all elements equal in any number of operations.","solution":"import math from typing import List, Tuple def can_make_elements_equal(n: int, b: List[int]) -> Tuple[str, List[Tuple[int, int]]]: if n == 2: return \\"YES\\", [(1, 2)] overall_gcd = b[0] for i in range(1, n): overall_gcd = math.gcd(overall_gcd, b[i]) if overall_gcd == 1: break if overall_gcd == 1: return \\"NO\\", [] # If gcd of all numbers > 1, the number of operations would be n - 1 operations = [(1, i + 1) for i in range(1, n)] return \\"YES\\", operations"},{"question":"In the magical kingdom of Sortoria, there is a special ceremony to celebrate new year where a sequence of N integers is transformed using a magical spell. The spell works as follows: It repeatedly picks two adjacent numbers in the sequence, transforms the pair into their product, and replaces the pair in the sequence with the product. This process continues until there is only one number left in the sequence. Each transformation reduces the length of the sequence by one until only one number remains. However, the wizards of Sortoria argue about which initial pair leads to the largest possible final number when the spell completes. Can you help them determine the largest possible final number that can be obtained from the given sequence using the spell? -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the number of integers in the sequence. - The second line contains N space-separated integers representing the sequence. -----Output----- For each test case, output a single line containing the largest possible final number that can be obtained from the given sequence. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 100 - 1 ≤ each integer in the sequence ≤ 100 -----Example----- Input: 2 4 1 2 3 4 3 1 5 2 Output: 24 10 -----Explanation----- Example case 1: The sequence is [1, 2, 3, 4]. The optimal strategy is (1, 2) -> 2 -> [2, 3, 4], then (2, 3) -> 6 -> [6, 4], and finally (6, 4) -> 24. Example case 2: The sequence is [1, 5, 2]. The optimal strategy is (1, 5) -> 5 -> [5, 2], then (5, 2) -> 10.","solution":"def largest_possible_final_number(test_cases): results = [] for sequence in test_cases: product = 1 for num in sequence: product *= num results.append(product) return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) sequence = list(map(int, lines[index + 1].split())) test_cases.append(sequence) index += 2 return test_cases def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"A theme park has a new roller coaster ride that has strict height requirements for riders. The park wants to build a system to filter out those who do not meet the minimum height requirement. Given a list of integers representing the heights of potential riders and an integer representing the minimum height requirement, implement a function that returns a list of boolean values indicating whether each rider meets the requirement. For example, if the minimum height requirement is 160 cm: - [150, 165, 154, 170] -> [False, True, False, True] Write a function that takes the list of heights and the minimum height requirement as inputs and returns the list of boolean values. Input will consist of the list of heights and the minimum height requirement.","solution":"def height_requirements(heights, min_height): Returns a list of boolean values indicating whether each rider meets the height requirement. :param heights: List of integers representing the heights of potential riders. :param min_height: Integer representing the minimum height requirement. :return: List of boolean values. return [height >= min_height for height in heights]"},{"question":"Your team has developed a software that needs to be deployed in a distributed system consisting of multiple servers. Each server has its own processing capacity and the software\'s tasks need to be distributed among the servers in such a way that the workload is balanced and the total processing time is minimized. Each task requires a specific amount of processing time to complete, and each server has a specific processing capacity indicating how many units of processing time it can handle in one second. You need to assign tasks to servers in a way that minimizes the maximum time any server takes to complete its tasks. -----Input----- The input consists of two lines: - The first line contains two integers m (1 le m le 10^4) and n (1 le n le 10^4), the number of servers and tasks respectively. - The second line contains n integers t_1, t_2, ..., t_n (1 le t_i le 10^6), the processing time required for each task. -----Output----- Output the minimized maximum processing time any server takes to complete its assigned tasks. -----Examples----- Sample Input 1: 2 5 1 2 3 4 5 Sample Output 1: 9 Sample Input 2: 3 4 10 10 10 10 Sample Output 2: 20","solution":"def min_max_processing_time(m, n, tasks): Returns the minimized maximum processing time any server takes to complete its assigned tasks. # Helper function to check if a given maximum processing time is feasible def can_distribute(max_time): current_load = 0 servers_needed = 1 for task in tasks: if current_load + task > max_time: servers_needed += 1 current_load = task if servers_needed > m: return False else: current_load += task return True # Tasks sorted in decreasing order tasks.sort(reverse=True) # Binary search for the minimal possible maximum processing time low, high = max(tasks), sum(tasks) result = high while low <= high: mid = (low + high) // 2 if can_distribute(mid): result = mid high = mid - 1 else: low = mid + 1 return result # Example usage: if __name__ == \\"__main__\\": m, n = map(int, input().split()) tasks = list(map(int, input().split())) print(min_max_processing_time(m, n, tasks))"},{"question":"We need a function that generates all possible distinct combinations of letters from a given string that have a specific length. The function should ensure that each combination is organized in non-descending order and that the combinations themselves are distinct. Create `letter_combinations()`, which receives two arguments. ``` letter_combinations(s, k) ``` ``` s - The input string from which combinations are generated. k - The length of each combination. ``` `letter_combinations()` should output a list of all distinct combinations organized in non-descending order. Let\'s see some cases: ```python letter_combinations(\\"abc\\", 2) -> [\'ab\', \'ac\', \'bc\'] // Explanation: // We generate all possible combinations of length 2 from \\"abc\\" // These combinations include: \\"ab\\", \\"ac\\", and \\"bc\\" // Each combination is organized in non-descending order. ``` ```python letter_combinations(\\"aab\\", 2) -> [\'aa\', \'ab\'] // Explanation: // We generate all possible combinations of length 2 from \\"aab\\" // These combinations include: \\"aa\\", \\"ab\\", and \\"ab\\" (repeated) // Removing the duplicate and organizing in non-descending order results in: [\'aa\', \'ab\'] ``` Note: - You may assume that the string `s` contains only lowercase alphabetic characters. - If the input string is empty or if `k` is 0, the function should return an empty list. Happy coding!","solution":"from itertools import combinations def letter_combinations(s, k): Generates all possible distinct combinations of letters from a given string that have a specific length and which are organized in non-descending order. Parameters: - s: the input string - k: the length of each combination Returns: - A list of all distinct combinations of length k organized in non-descending order. if not s or k == 0: return [] # Generate all possible combinations comb = combinations(sorted(s), k) # Convert combination tuples to strings and return as a list return sorted(set([\'\'.join(c) for c in comb]))"},{"question":"Given a string containing only digits, the task is to compute the number of ways we can decode it to letters. (1 maps to \'A\', 2 maps to \'B\', ..., 26 maps to \'Z\'). Example 1: Input: s = \\"12\\" Output: 2 Explanation: \\"12\\" can be decoded as \\"AB\\" (1 2) or \\"L\\" (12). Example 2: Input: s = \\"226\\" Output: 3 Explanation: \\"226\\" can be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6). Example 3: Input: s = \\"0\\" Output: 0 Explanation: \\"0\\" cannot be decoded. Example 4: Input: s = \\"10\\" Output: 1 Explanation: \\"10\\" can be decoded as \\"J\\" (10). Your Task: You don\'t need to read or print anything. Your task is to complete the function num_decodings() which takes the input string s and returns the number of ways to decode it. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= s.length <= 100 s contains only digits and may contain leading zeros.","solution":"def num_decodings(s): if not s or s[0] == \\"0\\": return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): single_digit = int(s[i-1:i]) double_digit = int(s[i-2:i]) if 1 <= single_digit <= 9: dp[i] += dp[i-1] if 10 <= double_digit <= 26: dp[i] += dp[i-2] return dp[n]"},{"question":"Alex works as an event coordinator and is organizing a series of events across multiple venues. Each event is represented by its start and end times. Some events may overlap in time, and Alex needs to find out the maximum number of overlapping events happening at any moment. Your task is to help Alex by writing a program that determines this maximum overlap in a given list of events. Input The first line contains T - the number of test cases. For each test case, the first line contains a single integer N - denoting the number of events. The next N lines contain two integers S and E - the start and end times of each event, respectively. Output For each test case, output the maximum number of overlapping events in a separate line. Constraints 1 ≤ T ≤ 500 1 ≤ N ≤ 1000 0 ≤ S < E ≤ 1000 Events can start or end at the same time. Sample Input 2 3 1 4 2 5 6 8 4 1 10 2 5 3 6 7 11 Sample Output 2 3 Explanation For the first test case, the maximum number of overlapping events is 2, occurring between times 2 and 4. For the second test case, the maximum number of overlapping events is 3, occurring between times 3 and 5.","solution":"def find_max_overlap(events): events.sort(key=lambda x: (x[0], x[1])) start_times = sorted([event[0] for event in events]) end_times = sorted([event[1] for event in events]) max_overlap = 0 current_overlap = 0 i, j = 0, 0 n = len(events) while i < n and j < n: if start_times[i] < end_times[j]: current_overlap += 1 max_overlap = max(max_overlap, current_overlap) i += 1 else: current_overlap -= 1 j += 1 return max_overlap def max_overlapping_events(T, test_cases): results = [] for case in test_cases: N, events = case results.append(find_max_overlap(events)) return results def parse_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) events = [] for j in range(N): S, E = map(int, lines[index + 1 + j].split()) events.append((S, E)) test_cases.append((N, events)) index += N + 1 return T, test_cases"},{"question":"Design a function `sort_segments` that sorts each segment of an array separated by zeros in non-decreasing order. The zeros themselves should remain in their original positions. ------ Input ------ - The input consists of a single list of integers, where the length of the list is between 1 and 10^5. - The integers in the list can be any value between -10^6 and 10^6. ------ Output ------ - Return a list where each segment of non-zero integers is sorted in non-decreasing order, while the zeros remain in their original positions. ------ Examples ------ Example 1: Input: [5, 3, 0, 2, 4, 1, 0, -1, -3] Output: [3, 5, 0, 1, 2, 4, 0, -3, -1] Example 2: Input: [0, 12, 10, 0, 0, 25, 15, -5, 30, 0] Output: [0, 10, 12, 0, 0, -5, 15, 25, 30, 0] Example 3: Input: [3, 1, 2] Output: [1, 2, 3] Example 4: Input: [0, 0, 0] Output: [0, 0, 0] ------ Explanation ------ In example 1, the array is [5, 3, 0, 2, 4, 1, 0, -1, -3]. The segments are [5, 3], [2, 4, 1], and [-1, -3]. Sorting these segments individually, we get [3, 5], [1, 2, 4], and [-3, -1]. Placing them back in the original positions but keeping the zeros, we get the final list: [3, 5, 0, 1, 2, 4, 0, -3, -1]. In example 2, the array is [0, 12, 10, 0, 0, 25, 15, -5, 30, 0]. The segments are [12, 10] and [25, 15, -5, 30]. Sorting these segments individually, we get [10, 12] and [-5, 15, 25, 30]. Placing them back in the original positions but keeping the zeros, we get: [0, 10, 12, 0, 0, -5, 15, 25, 30, 0].","solution":"def sort_segments(arr): Sorts each segment of the array separated by zeroes in non-decreasing order. The zeroes remain in their original positions. n = len(arr) result = [] segment = [] for i in range(n): if arr[i] == 0: if segment: result.extend(sorted(segment)) segment = [] result.append(0) else: segment.append(arr[i]) if segment: result.extend(sorted(segment)) return result"},{"question":"Create a function that takes an integer `n` and returns a list of all prime numbers less than or equal to `n`. The function should be optimized to handle larger values of `n` efficiently. You should avoid brute-force methods like checking every single number up to `n` for primality. ```python find_primes(10) # [2, 3, 5, 7] find_primes(20) # [2, 3, 5, 7, 11, 13, 17, 19] find_primes(1) # [] find_primes(2) # [2] ``` **Constraints:** - `n` will always be a non-negative integer. - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. **Note:** Aim to implement an efficient algorithm to handle larger values of `n`, such as the Sieve of Eratosthenes.","solution":"def find_primes(n): Returns a list of all prime numbers less than or equal to n. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [p for p in range(2, n + 1) if is_prime[p]]"},{"question":"Imagine you are organizing a tournament with several players. Each player is assigned a skill rating, and the players will compete in pairs. Your job is to pair the players such that the difference in skill levels is minimized for each match. Let ``` skills = [6, 2, 3, 8, 7, 5] ``` be an array representing the skill levels of the players. Your task is to write a function ```pair_players(skills)```, that will return a list of tuples ```pairs```, where each tuple contains two players, such that the difference in their skill levels is minimized. One possible solution to this example would be ``` pairs = [(2, 3), (5, 6), (7, 8)] ``` with the differences 1, 1, and 1 respectively. If the number of skills is odd, the unpaired player should be included as a singleton in the result. You may assume that ```1 <= len(skills) <= 100``` and ```1 <= skills[i] <= 1000```. The function should return a list of tuples, where each tuple has either 1 or 2 elements, representing the paired or unpaired players.","solution":"def pair_players(skills): Pairs the players such that the difference in their skill levels is minimized. If the number of players is odd, the unpaired player is included as a singleton. :param skills: List of integers representing the skill levels of the players. :return: List of tuples, where each tuple contains one or two elements representing the pairs of players. skills.sort() pairs = [] i = 0 while i < len(skills) - 1: pairs.append((skills[i], skills[i + 1])) i += 2 if len(skills) % 2 == 1: pairs.append((skills[-1],)) return pairs"},{"question":"The organization you work for has developed a smart calculator for data analysts. You are responsible for implementing a key feature of this calculator: computing the prime factors of an integer and sorting them in descending order. Given a positive integer, your task is to find all its prime factors, sort them in descending order and output them as an array. Input The input consists of a single integer n (2 ≤ n ≤ 10^6). Output Output an array of integers representing the prime factors of n, sorted in descending order. Examples Input 315 Output [7, 5, 3, 3] Input 50 Output [5, 5, 2] Input 21 Output [7, 3] Note In the first example, 315 can be factored into primes as 3*3*5*7, and when sorted in descending order, it results in [7, 5, 3, 3]. In the second example, 50 can be factored into primes as 2*5*5, and when sorted in descending order, it results in [5, 5, 2]. In the third example, 21 can be factored into primes as 3*7, and when sorted in descending order, it results in [7, 3].","solution":"def prime_factors(n): Returns the prime factors of the given integer n, sorted in descending order. factors = [] # Check for smallest factors i = 2 while i * i <= n: while n % i == 0: factors.append(i) n //= i i += 1 if n > 1: factors.append(n) return sorted(factors, reverse=True)"},{"question":"Find the maximum sum of a subarray of length k from an array. -----Input:----- - First-line will contain n, the length of the array. - Second line will contain n integers representing the elements of the array. - Third line will contain a single integer k, the length of the subarray. -----Output:----- Output a single integer representing the maximum sum of any subarray of length k. -----Constraints----- - 1 leq n leq 10^5 - 1 leq k leq n - -10^3 leq text{array elements} leq 10^3 -----Sample Input:----- 5 1 2 3 -2 5 3 -----Sample Output:----- 6","solution":"def max_sum_subarray(arr, k): n = len(arr) if k > n: # validation for logically impossible cases return None max_sum = float(\'-inf\') current_sum = sum(arr[:k]) max_sum = current_sum for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a list of N non-negative integers. You are allowed to perform the following operations: Operation Notation Example Increments all elements of the list by k (1 leq k leq 10^4). mathrm{inc} k mathrm{inc} 2 [1, 3, 5] mapsto [3, 5, 7] Decrements all elements of the list by k (1 leq k leq 10^4). mathrm{dec} k mathrm{dec} 1 [3, 5, 7] mapsto [2, 4, 6] Multiply all elements in the list by -1 if and only if all of them are positive. mathrm{neg} mathrm{neg} [2, 4, 6] mapsto [-2, -4, -6] Sorts the entire list in ascending order. mathrm{sort} mathrm{sort} [4, 1, 3] mapsto [1, 3, 4]Table 1: Allowed operations Using a limited number of these operations, you need to maximize the sum of all the elements in the list. -----Input----- The first line of input contains a single integer N (1 leq N leq 100), the number of non-negative integers. The next line contains N integers. All integers are non-negative and smaller than or equal to 10^4. -----Output----- The first line of output should contain two integers, the maximum sum obtainable and the number of operations used. We shall call this number T, and it must hold that T leq 5N. The next T lines should contain any sequence of operations leading to the sum. Each operation should follow the notation defined in Table 1. For details, look at sample test cases. -----Examples----- Sample Input: 4 1 2 3 4 Sample Output: 10 0 Sample Input: 4 0 0 0 0 Sample Output: 40000 1 inc 10000","solution":"def maximize_sum(N, arr): Function to maximize the sum of elements of the list using the given operations. :param N: integer, the size of the list :param arr: List of non-negative integers :return: tuple (maximum_sum, T, operations) max_sum = sum(arr) operations = [] if all(x == 0 for x in arr): k = 10000 new_sum = max_sum + k * N operations.append(f\\"inc {k}\\") return new_sum, len(operations), operations return max_sum, len(operations), operations"},{"question":"In a parallel universe, Stan is tasked with collecting data about social interactions among people in a city. The city can be represented as an undirected graph where each node represents a person, and each edge represents a direct connection (friendship) between two people. Stan needs to answer multiple queries about the shortest paths and distances in this network. Each query is one of the two types: 1. Find the shortest distance between two people. 2. Check if two people are directly connected (i.e., there is an edge between them). Could you help Stan by writing a program that processes these queries efficiently? Input The first line contains two integers n and m (2 ≤ n ≤ 10^4, 1 ≤ m ≤ 5x10^4) — the number of people (nodes) and the number of direct connections (edges). Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing a direct connection (friendship) between person u and person v. The next line contains an integer q (1 ≤ q ≤ 10^4) — the number of queries. Each of the next q lines contains three integers t, x, and y (1 ≤ t ≤ 2, 1 ≤ x, y ≤ n, x ≠ y) — the type of the query and the nodes involved: - If t = 1, find the shortest distance between x and y. - If t = 2, check if x and y are directly connected. Output For each query of type 1, print the shortest distance between x and y. If there is no path between them, print \\"-1\\". For each query of type 2, print \\"yes\\" if x and y are directly connected, otherwise print \\"no\\". Example Input 6 5 1 2 2 3 3 4 4 5 5 6 4 1 1 6 2 3 4 1 2 5 2 1 6 Output 5 yes 3 no Note In this graph: - The shortest distance between nodes 1 and 6 is 5 (via 1 -> 2 -> 3 -> 4 -> 5 -> 6). - Nodes 3 and 4 are directly connected. - The shortest distance between nodes 2 and 5 is 3 (via 2 -> 3 -> 4 -> 5). - Nodes 1 and 6 are not directly connected.","solution":"from collections import defaultdict, deque def process_queries(n, m, edges, q, queries): # Create the adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs_shortest_path(start, end): if start == end: return 0 visited = set() queue = deque([(start, 0)]) while queue: current, distance = queue.popleft() if current == end: return distance for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return -1 def is_directly_connected(x, y): return \\"yes\\" if y in graph[x] else \\"no\\" results = [] for t, x, y in queries: if t == 1: results.append(bfs_shortest_path(x, y)) elif t == 2: results.append(is_directly_connected(x, y)) return results"},{"question":"A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Determining if a number is prime is a common problem in programming and number theory. In this exercise, you are required to write a function that takes a list of integers and returns a list of boolean values indicating whether each respective integer in the input list is a prime number. # Input Format - The first line contains a single integer `T`, the number of test cases. - Each test case consists of a single line containing one integer `n_i` which represents the number to be checked for primality. # Output Format - For each test case, print \\"Prime\\" if the corresponding integer is a prime number, otherwise print \\"Not Prime\\". # Constraints - ( 1 leq T leq 100 ) - ( 0 leq n_i leq 10^6 ) # Sample Input ``` 5 10 29 7 1 0 ``` # Sample Output ``` Not Prime Prime Prime Not Prime Not Prime ``` # Explanation - For the number 10, it is not a prime number as it is divisible by 2 and 5. - For the number 29, it is a prime number as its only divisors are 1 and 29. - For the number 7, it is a prime number as its only divisors are 1 and 7. - For the number 1, it is not a prime number by definition. - For the number 0, it is not a prime number. # Tip Consider optimizing the primality test by checking up to the square root of the given number and using efficient algorithms to handle the input constraints.","solution":"import math def is_prime(n): Determines if a number n is prime. Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False limit = math.isqrt(n) for i in range(3, limit + 1, 2): if n % i == 0: return False return True def check_primes(numbers): Takes a list of integers and returns a list of strings indicating whether each number is \\"Prime\\" or \\"Not Prime\\". results = [] for number in numbers: if is_prime(number): results.append(\\"Prime\\") else: results.append(\\"Not Prime\\") return results"},{"question":"You are given an array a of n positive integers. You can perform the following operation on the array: In one operation, you can pick any two elements a_i and a_j (1 leq i < j leq n) and if a_i % a_j == 0 or a_j % a_i == 0, you can delete the larger of the two elements. Calculate the minimum number of operations required to reduce the array to a single element. -----Input----- The first line contains one integer n (2 le n le 50) — the size of the array a. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the elements of the array. -----Output----- Output a single integer — the minimum number of operations to reduce the array to a single element. -----Examples----- Input 4 2 3 6 9 Output 2 Input 5 10 5 15 20 25 Output 4","solution":"def min_operations_to_single_element(n, array): array.sort() delete_count = 0 for i in range(n-1, 0, -1): for j in range(i-1, -1, -1): if array[i] % array[j] == 0: delete_count += 1 break return delete_count"},{"question":"Bob has recently become interested in palindrome strings. A palindrome is a string that reads the same forward and backward, for example, \\"madam\\" and \\"racecar\\". Bob wants to determine the length of the longest palindrome that can be formed by deleting some of the characters from a given string. Given a string `s`, you need to find the length of the longest palindromic subsequence in `s`. Input: - The first line contains an integer `Q` denoting the number of test cases. - Each of the following `Q` lines contains a string `s`. Output: - For each test case, output the length of the longest palindromic subsequence in `s`. Constraints: - 1 ≤ Q ≤ 100 - 1 ≤ |s| ≤ 1000 (|s| denotes the length of the string s) - `s` contains only lowercase English letters Example Input: ``` 2 bbbab cbbd ``` Example Output: ``` 4 2 ``` Explanation: In the first test case, the longest palindromic subsequence is \\"bbbb\\", which has a length of 4. In the second test case, the longest palindromic subsequence is \\"bb\\", which has a length of 2.","solution":"def longest_palindromic_subsequence(s: str) -> int: n = len(s) dp = [[0]*n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n-1] def process_test_cases(Q: int, test_cases: list) -> list: results = [] for s in test_cases: results.append(longest_palindromic_subsequence(s)) return results"},{"question":"John is developing a new game where players collect points by completing different tasks. Each task belongs to one of three categories: solving puzzles, completing missions, or finding treasures. Completing a puzzle gives 50 points, completing a mission gives 300 points, and finding a treasure gives 5000 points. John wants to know if it is possible to exactly reach a given target score by completing a combination of these tasks. Specifically, he wants to check if there exists a combination of non-negative integers x, y, and z such that x × 50 + y × 300 + z × 5000 equals the target score t. Could you help John determine if it is possible to reach the target score with the given tasks? -----Input----- The input consists of a single integer t (1 ≤ t ≤ 10^9) — the target score that John wants to achieve. -----Output----- Print \\"POSSIBLE\\" (without quotes) if it is possible to achieve the target score exactly. Otherwise, print \\"IMPOSSIBLE\\" (without quotes). -----Examples----- Input 6050 Output POSSIBLE Input 2501 Output IMPOSSIBLE -----Note----- In the first sample, one possible way to achieve 6050 points is by completing one treasure task, one mission task, and one puzzle task, yielding a total of 1 × 5000 + 1 × 300 + 1 × 50 = 6050 points. In the second sample, there is no combination of tasks that can sum up to exactly 2501 points.","solution":"def is_possible(target): Returns \\"POSSIBLE\\" if it is possible to achieve the target score (target) by completing combinations of tasks, otherwise returns \\"IMPOSSIBLE\\". for x in range(target // 50 + 1): for y in range((target - x * 50) // 300 + 1): remaining = target - (x * 50 + y * 300) if remaining % 5000 == 0: return \\"POSSIBLE\\" return \\"IMPOSSIBLE\\""},{"question":"Given a list of integers, you are to find the first two distinct integers with the smallest absolute difference between them and return the corresponding pair. If there are multiple pairs with the same smallest difference, return any of them. -----Input----- The first line of the input contains an integer n (2 ≤ n ≤ 1000) — the number of integers. The second line contains n integers a_{i} (1 ≤ a_{i} ≤ 10^6), the list of integers. -----Output----- Print two integers representing the pair with the smallest absolute difference. The order in which the integers are printed should match their order in the input list. -----Examples----- Input 5 3 8 15 2 5 Output 3 2 Input 4 14 23 17 10 Output 14 17 Input 6 1 6 10 15 13 9 Output 10 9 -----Note----- In the first sample, the pair (3, 2) has the smallest absolute difference of |3 - 2| = 1. In the second sample, the pair (14, 17) has the smallest absolute difference of |14 - 17| = 3. In the third sample, there are multiple pairs with a difference of 1, such as (10, 9) or (15, 14). Any pair with the smallest difference can be returned.","solution":"def find_smallest_abs_diff_pair(n, arr): Function to find the first two distinct integers with the smallest absolute difference between them in a given list. Args: n (int): the number of integers arr (list): the list of integers Returns: tuple: the pair of integers with the smallest absolute difference (in the order they appear) min_diff = float(\'inf\') min_pair = None for i in range(n): for j in range(i + 1, n): diff = abs(arr[i] - arr[j]) if diff < min_diff: min_diff = diff min_pair = (arr[i], arr[j]) return min_pair"},{"question":"Write a function `find_largest_divisible` that takes two integers `m` and `d`, and returns the largest integer less than or equal to `m` that is divisible by `d`. If no such number exists, return `-1`. Input - The first line contains the integer `t`, the number of test cases. - The `t` subsequent lines each contain two integers `m` and `d`. The constraints are `1 ≤ t ≤ 100`, `0 ≤ m ≤ 10^9`, and `1 ≤ d ≤ 10^9`. Output For each test case, print the largest integer less than or equal to `m` that is divisible by `d`. If no such number exists, print `-1`. Example Input 3 10 3 14 7 5 0 Output 9 14 -1 Explanation: In the first test case, the largest number less than or equal to 10 that is divisible by 3 is 9. In the second test case, the largest number less than or equal to 14 that is divisible by 7 is 14 itself. In the third test case, since `d` is 0, which is invalid input based on the problem constraints `d` should be greater than 0, thus, the output is `-1`.","solution":"def find_largest_divisible(m, d): Returns the largest integer less than or equal to m that is divisible by d. If no such number exists, return -1. if d <= 0 or m < 0: return -1 result = (m // d) * d return result if result <= m else -1"},{"question":"Given a grid of size NxN filled with integers between 1 and 9, you can move either right or down starting from the top-left corner. You need to find the maximum sum of numbers you can collect on a path to the bottom-right corner. Note that you cannot move diagonally. Example 1: Input: grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: 29 Explanation: The path 1 → 4 → 7 → 8 → 9 gives the maximum sum. Example 2: Input: grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]] Output: 5 Explanation: One of the paths 1 → 1 → 1 → 1 → 1 yields the sum of 5. Your Task: You don\'t need to read input or print anything. Complete the function maxPathSum() which takes grid as input parameter and returns the maximum sum. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 ≤ N ≤ 50 1 ≤ grid[i][j] ≤ 9","solution":"def maxPathSum(grid): n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] dp[0][i] = dp[0][i - 1] + grid[0][i] for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[n - 1][n - 1]"},{"question":"Write a program to find the smallest positive integer that is evenly divisible by all numbers from 1 to a given number `n`. In other words, find the Least Common Multiple (LCM) of all numbers from 1 to `n`. For example: ``` For n = 5 Numbers: 1, 2, 3, 4, 5 Smallest positive integer divisible by all these numbers is: 60 For n = 7 Numbers: 1, 2, 3, 4, 5, 6, 7 Smallest positive integer divisible by all these numbers is: 420 ``` Your program should return the smallest positive integer that is divisible by every number from 1 to `n`. The input will always be a single positive integer between 1 and 20.","solution":"import math def lcm(a, b): Returns the least common multiple of a and b. return abs(a * b) // math.gcd(a, b) def smallest_multiple(n): Returns the smallest positive integer that is evenly divisible by all numbers from 1 to n. if n == 1: return 1 result = 1 for i in range(2, n+1): result = lcm(result, i) return result"},{"question":"You are given an array of integers. Your task is to return the number with the maximum frequency in the array. If multiple numbers have the same frequency, return the smallest number among them. ``` Example 1: array = [3, 1, 4, 4, 5, 2, 2, 3, 3] The number 3 occurs 3 times, which is more frequent than any other number. Expected output: 3 Example 2: array = [1, 2, 2, 3, 3] Both 2 and 3 occur twice, but 2 is the smallest number. Expected output: 2 Example 3: array = [5, 5, 4, 6, 6, 4, 4] The number 4 occurs 3 times, more frequent than any other number. Expected output: 4 Example 4: array = [9, 5, 1, 3, 1] The number 1 occurs twice, which is more frequent than any other number. Expected output: 1 ``` You may assume that the array contains at least one element.","solution":"def highest_frequency_number(arr): from collections import Counter frequency = Counter(arr) max_frequency = max(frequency.values()) candidates = [num for num, freq in frequency.items() if freq == max_frequency] return min(candidates)"},{"question":"Write a program that reads a series of dates in the format \\"YYYY-MM-DD\\" and outputs the number of unique weekdays (Monday, Tuesday, etc.) these dates fall on. The input will contain multiple lines, each with a single date, and the list will terminate with a blank line. Implement the program in such a way that it supports inputs until EOF. Input The input is given in the following format: YYYY-MM-DD YYYY-MM-DD :: (blank line) Each line represents a date in \\"YYYY-MM-DD\\" format. Output Output the number of unique weekdays these dates correspond to. Example Input 2023-10-10 2023-10-11 2023-10-12 2022-01-01 (blank line) Output 4","solution":"import sys from datetime import datetime def unique_weekdays(): weekday_set = set() for line in sys.stdin: date_str = line.strip() if not date_str: # Blank line indicates end of input break date_obj = datetime.strptime(date_str, \'%Y-%m-%d\') weekday_set.add(date_obj.strftime(\'%A\')) # Print the number of unique weekdays print(len(weekday_set))"},{"question":"Implement an iterator to flatten a nested list of integers. Each element in the nested list could be either an integer or a list. Your iterator should receive a list of these nested lists and return one integer at a time in a sequential manner. Note: - You may assume that the given nested list is well-formed and does not contain white spaces. - Each element is either an integer or a list. Example 1: Given the list = [[1,1],2,[1,1]], Your iterator should return the integers in the following order: [1,1,2,1,1]. Example 2: Given the list = [1,[4,[6]]], Your iterator should return the integers in the following order: [1,4,6].","solution":"class NestedIterator: def __init__(self, nestedList): self.index = 0 self.flat_list = [] self.flatten(nestedList) def flatten(self, nestedList): for element in nestedList: if isinstance(element, list): self.flatten(element) else: self.flat_list.append(element) def next(self): result = self.flat_list[self.index] self.index += 1 return result def hasNext(self): return self.index < len(self.flat_list)"},{"question":"Ananya is a cat who loves symmetry and palindromes. She enjoys playing with strings and likes to create interesting problems for her friends. Here\'s one such problem Ananya came up with: Given a string `s` consisting of lowercase English letters, Ananya wants to determine the length of the longest palindromic subsequence. A subsequence is a sequence that can be derived from another string by deleting some or no elements without changing the order of the remaining elements. A palindrome is a string that reads the same backward as forward. Help Ananya find the length of the longest palindromic subsequence in the given string `s`. -----Input----- The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 1000), the string for which Ananya wants to find the longest palindromic subsequence. -----Output----- For each test case, output a single line containing the length of the longest palindromic subsequence in the respective string. -----Examples----- Input 2 character racecar Output 5 7 -----Note----- In the first example, the longest palindromic subsequence is either \'carac\' or \'carcar\', both of which have a length of 5. In the second example, the whole string \'racecar\' is already a palindrome, hence its length is 7.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the given string. n = len(s) dp = [[0 for _ in range(n)] for _ in range(n)] # Base case: a single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the table for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1] def find_longest_palindromic_subsequences(test_cases): results = [] for s in test_cases: results.append(longest_palindromic_subsequence(s)) return results"},{"question":"A new investment startup is developing a blockchain-based system to track the ownership of digital assets. Each asset in their system can either be a direct acquisition by a user or derived from one or more existing assets by applying a transformation function. The startup has provided a series of operations describing the creation and transformation of assets and now wants to determine the lineage of assets. Each operation is either a direct acquisition (A) or a transformation (T). A direct acquisition specifies the user and the asset. A transformation specifies the new asset, one or more existing assets, and a transformation function. Given the operations, the task is to determine the earliest acquired ancestor asset for a given asset along with the user who acquired it. # Input - The first line contains an integer N (1 leq N leq 1000), the number of operations. - The next N lines describe the operations. Each operation can be of two types: - \\"A u a\\" (where u is the user ID and a is the asset ID) indicating that user u directly acquired asset a. - \\"T a f a_1 a_2 ... a_k\\" (where a is the new asset ID, f is the ID of the transformation function, and a_1, a_2, ..., a_k are the IDs of the existing assets from which a is derived). - The last line contains an integer Q (1 leq Q leq 100), the number of queries. - The next Q lines contain an asset ID for which we need to determine the earliest acquired ancestor and the corresponding user ID. # Output For each query, output two integers: the earliest acquired ancestor asset ID and the user ID who acquired it. # Example Input ``` 5 A 1 10 A 2 20 T 30 5 10 20 A 3 40 T 50 6 40 30 2 30 50 ``` Output ``` 10 1 10 1 ``` # Explanation In the example, the operations are as follows: 1. User 1 directly acquires asset 10. 2. User 2 directly acquires asset 20. 3. Asset 30 is created by applying transformation function 5 to assets 10 and 20. 4. User 3 directly acquires asset 40. 5. Asset 50 is created by applying transformation function 6 to assets 40 and 30. When querying the lineage of asset 30, asset 10 is found to be the earliest acquired ancestor, acquired by user 1. Similarly, for asset 50, the earliest acquired ancestor asset is also asset 10, acquired by user 1.","solution":"def find_lineage(N, operations, Q, queries): user_acquisitions = {} transformations = {} for op in operations: parts = op.split() if parts[0] == \'A\': user, asset = int(parts[1]), int(parts[2]) user_acquisitions[asset] = user elif parts[0] == \'T\': asset = int(parts[1]) parents = list(map(int, parts[3:])) transformations[asset] = parents def earliest_ancestor(asset): visited = set() while asset in transformations: asset = min(transformations[asset]) if asset in visited: break visited.add(asset) return asset, user_acquisitions.get(asset, -1) results = [] for query in queries: asset = int(query) results.append(earliest_ancestor(asset)) return results"},{"question":"**Counting Sheep** Given a string representing a farm field, you need to count the number of sheep in the field. Each sheep is represented by the character \'x\' (lowercase, without quotes) and each piece of empty land is represented by the character \'.\' (without quotes). Write a function `count_sheep(field)` that takes a single string parameter `field` and returns the number of sheep as an integer. Examples: ``` count_sheep(\\"......\\") # Should return 0 since there are no \'x\' characters. count_sheep(\\"...x..x.\\") # Should return 2 since there are two \'x\' characters. count_sheep(\\"x.xx.x..x\\") # Should return 5 since there are five \'x\' characters. ``` Note: - The function should handle an empty field, which is represented as an empty string. - The field string will consist only of \'x\' and \'.\' characters.","solution":"def count_sheep(field): Returns the number of sheep in the field. Each sheep is represented by \'x\' in the string. return field.count(\'x\')"},{"question":"# Task You are given a list of integers. Your task is to reorder the elements in such a way that the odd elements appear before the even elements, and both the odd and even elements appear in ascending order. Maintain the relative order among odd and even elements from the original list when it is already sorted respectively. # Example For `arr = [3, 1, 2, 4, 7, 5]`, the output should be `[1, 3, 5, 7, 2, 4]`. For `arr = [8, 13, 11, 90, 2]`, the output should be `[11, 13, 2, 8, 90]`. # Input/Output - `[input]` list of integers (0 ≤ len(arr) ≤ 100, 1 ≤ arr[i] ≤ 10^6) - `[output]` a list of integers The reordered list where odd elements precede even elements, both sorted independently in ascending order.","solution":"def reorder_list(arr): Reorder the elements such that odd elements appear before the even elements, and both the odd and even elements appear in ascending order. odds = sorted([x for x in arr if x % 2 != 0]) evens = sorted([x for x in arr if x % 2 == 0]) return odds + evens"},{"question":"You are given a 1-D array, A, of size N. Your task is to find the floor, ceil, and rint of the elements of A using NumPy. **Input Format** The first line of input contains an integer N, the size of the array. The second line contains N space-separated floating point numbers describing the array A. **Output Format** Print three lines of output. The first line should contain the array of the floor values of the elements. The second line should contain the array of the ceil values of the elements. The third line should contain the array of the rint values of the elements. **Sample Input** ``` 6 1.1 2.5 3.8 -4.3 5.7 -6.9 ``` **Sample Output** ``` [ 1. 2. 3. -5. 5. -7.] [ 2. 3. 4. -4. 6. -6.] [ 1. 2. 4. -4. 6. -7.] ``` **Explanation** The floor of each element in the array is the largest integer less than or equal to each element. The ceil of each element in the array is the smallest integer greater than or equal to each element. The rint of each element in the array is the rounded value of each element to the nearest integer.","solution":"import numpy as np def process_array(N, A): A = np.array(A) floor_vals = np.floor(A) ceil_vals = np.ceil(A) rint_vals = np.rint(A) return floor_vals, ceil_vals, rint_vals"},{"question":"Alicia is learning about sorting algorithms and came across the QuickSort algorithm. She understands the basic idea but wants to explore how QuickSort operates with different pivot selection strategies. One common strategy is to always pick the first element as the pivot. Alicia wants to determine the number of comparisons QuickSort will make using this pivot strategy to sort an array of unique integers. The pseudocode for QuickSort using the first element as the pivot is as follows: QuickSort(A, low, high) if low < high pivotIndex = Partition(A, low, high) QuickSort(A, low, pivotIndex - 1) QuickSort(A, pivotIndex + 1, high) Partition(A, low, high) pivot = A[low] i = low + 1 for j = low + 1 to high if A[j] < pivot swap A[i] with A[j] i = i + 1 swap A[low] with A[i - 1] return i - 1 She wants you to help her by writing a program that calculates the total number of comparisons QuickSort makes when sorting a given array using the first element as the pivot. -----Input----- The first line contains an integer n (1 le n le 5000) — the size of the array. The second line contains n distinct integers a[i] (1 le a[i] le 10^6) — the elements of the array. -----Output----- Print a single integer — the total number of comparisons QuickSort makes to sort the array. -----Examples----- Input 4 4 3 2 1 Output 6 Input 5 1 2 3 4 5 Output 10 -----Note----- In the first test case, QuickSort makes: - 3 comparisons to partition the array [4, 3, 2, 1], resulting in [1, 3, 2, 4] - 2 comparisons to sort the left sub-array [3, 2], resulting in [1, 2, 3, 4] - 1 comparison to sort the right sub-array [], but it makes no further comparisons. So, the total number of comparisons is 3 + 2 + 1 = 6. In the second test case, QuickSort makes 4 comparisons in the first partition, 3 in the next partition, 2 in the next, and 1 in the last, totaling 4 + 3 + 2 + 1 = 10 comparisons.","solution":"def quicksort_comparisons(arr, low, high): if low < high: pivotIndex = partition(arr, low, high) left_comparisons = quicksort_comparisons(arr, low, pivotIndex - 1) right_comparisons = quicksort_comparisons(arr, pivotIndex + 1, high) total_comparisons = (high - low) + left_comparisons + right_comparisons return total_comparisons return 0 def partition(arr, low, high): pivot = arr[low] i = low + 1 for j in range(low + 1, high + 1): if arr[j] < pivot: arr[i], arr[j] = arr[j], arr[i] i = i + 1 arr[low], arr[i - 1] = arr[i - 1], arr[low] return i - 1 def total_quicksort_comparisons(n, arr): return quicksort_comparisons(arr, 0, n - 1) # To conform to the given input/output format if __name__ == \\"__main__\\": n = int(input()) arr = list(map(int, input().split())) print(total_quicksort_comparisons(n, arr))"},{"question":"Write a function that calculates the sum of digits of a given integer. If the resultant sum is a multiple of 3, return \\"Fizz\\", if it is a multiple of 5, return \\"Buzz\\", and if it is a multiple of both 3 and 5, return \\"FizzBuzz\\". If none of these conditions are met, just return the resultant sum. For example: - If the input is 12345, the sum of digits is 15, which is a multiple of both 3 and 5, so the result should be \\"FizzBuzz\\". - If the input is 456, the sum of digits is 15, which is a multiple of both 3 and 5, so the result should be \\"FizzBuzz\\". - If the input is 29, the sum of digits is 11, which is neither a multiple of 3 nor 5, so the result should be 11. You may assume the input integer will always be non-negative.","solution":"def sum_of_digits(input_number): Calculates the sum of digits of a given non-negative integer. If resultant sum is a multiple of 3, returns \\"Fizz\\". If resultant sum is a multiple of 5, returns \\"Buzz\\". If resultant sum is a multiple of both 3 and 5, returns \\"FizzBuzz\\". Otherwise, returns the resultant sum. # Calculate the sum of the digits digit_sum = sum(int(digit) for digit in str(input_number)) # Determine the appropriate return value if digit_sum % 3 == 0 and digit_sum % 5 == 0: return \\"FizzBuzz\\" elif digit_sum % 3 == 0: return \\"Fizz\\" elif digit_sum % 5 == 0: return \\"Buzz\\" else: return digit_sum"},{"question":"Jason was playing with his newly found integers but lost track of their original values. He now only remembers a modified version of the integers and their lengths. Given two integers, c and d, and their respective lengths m and n, determine the original integers a and b such that concatenation of a and b in this order gives c and d. For instance, if c = 1234 and m = 2, the integer a was 12. Similarly, if d = 5678 and n = 2, the integer b was 34. The concatenated result should form the original integers. -----Constraints----- - 1 ≤ c, d ≤ 10^6 - 1 ≤ m, n ≤ 6 - c and d are integers. -----Input----- Input is given from Standard Input in the following format: c m d n -----Output----- Output the original integers a and b in the following format: a b -----Sample Input----- 1234 2 5678 2 -----Sample Output----- 12 34","solution":"def find_original_integers(c, m, d, n): Returns the original integers a and b such that the concatenation of a and b forms the integers represented by c and d, respectively. Parameters: c (int): The modified integer c. m (int): The length of the original integer a. d (int): The modified integer d. n (int): The length of the original integer b. Returns: tuple: A tuple containing the original integers a and b. # Convert c and d to string to slice them c_str = str(c) d_str = str(d) # Extract the original integers a and b a = int(c_str[:m]) b = int(d_str[-n:]) return a, b # Main function to handle input and output if __name__ == \\"__main__\\": import sys input = sys.stdin.read c, m, d, n = map(int, input().strip().split()) a, b = find_original_integers(c, m, d, n) print(a, b)"},{"question":"In a distant land, there is a magical garden with n flowers, each with a different magical power. These flowers are planted along a path in a straight line, and each one has its own power level. The i-th flower (1 ≤ i ≤ n) has a_i magical power. The garden keeper can perform two types of operations to manage the flowers: * 1 l r x — Increase the magical power of all flowers from index l to index r (1 ≤ l ≤ r ≤ n) by x. * 2 k — Find the minimum magical power among the first k flowers (1 ≤ k ≤ n). The garden keeper wants to ensure that the management of these flowers is done efficiently. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of flowers and the number of queries. The second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — initial magical power level of each flower. The next q lines contain the details of the queries as described above. Output For each type 2 query, output a line containing an integer — the minimum magical power among the first k flowers. Example Input 5 6 1 5 3 4 2 2 3 1 1 3 1 2 4 1 2 5 2 2 5 2 1 Output 1 2 4 4 Explanation Initially, the magical power levels of the flowers are [1, 5, 3, 4, 2]. - In the first query, the minimum magical power among the first 3 flowers is 1. - In the second query, the magical power of flowers from index 1 to index 3 is increased by 1, so the new power levels are [2, 6, 4, 4, 2]. - In the third query, the minimum magical power among the first 4 flowers is 2. - In the fourth query, the magical power of flowers from index 2 to index 5 is increased by 2, so the new power levels are [2, 8, 6, 6, 4]. - In the fifth query, the minimum magical power among all 5 flowers is 2. - In the sixth query, the minimum magical power among the first flower only is 2.","solution":"def magical_garden(n, q, powers, queries): Perform operations on the list of flower powers and return results of minimum queries. :param n: Number of flowers :param q: Number of queries :param powers: Initial power levels of each flower :param queries: List of queries to perform :return: Results of type 2 queries results = [] for query in queries: if query[0] == 1: l, r, x = query[1] - 1, query[2] - 1, query[3] for i in range(l, r + 1): powers[i] += x elif query[0] == 2: k = query[1] results.append(min(powers[:k])) return results"},{"question":"In a data analysis software, it is essential to generate and validate a specific format of reference codes that uniquely identify each project. Your task is to write a function that validates these reference codes based on the following criteria: 1. The code must be exactly 10 characters long. 2. The first three characters must be uppercase letters. 3. The next five characters must be digits. 4. The last two characters must be lowercase letters. 5. The code cannot have any spaces or special characters. Your function should take a list of reference codes and return a list of booleans indicating whether each code is valid (True) or invalid (False). INPUT - An integer T representing the number of test cases. - T test cases follow. Each test case consists of: - An integer N representing the number of reference codes. - A list of N strings, each representing a reference code. OUTPUT - For each test case, print a list of booleans where each boolean corresponds to a reference code and indicates whether it is valid or not. CONSTRAINTS 1 ≤ T ≤ 10 1 ≤ N ≤ 50 Each reference code is a string of maximum length 100. SAMPLE INPUT 1 3 ABC12345de AB123456ef XYZ98765gh SAMPLE OUTPUT [True, False, True] Explanation - \\"ABC12345de\\" is valid because it meets all the criteria. - \\"AB123456ef\\" is invalid because the first part does not consist of exactly three uppercase letters. - \\"XYZ98765gh\\" is valid because it meets all the criteria.","solution":"import re def validate_reference_codes(T, test_cases): Validates a list of reference codes based on given criteria. results = [] pattern = re.compile(r\'^[A-Z]{3}d{5}[a-z]{2}\') for i in range(T): case_result = [] for code in test_cases[i]: if pattern.match(code) and len(code) == 10: case_result.append(True) else: case_result.append(False) results.append(case_result) return results"},{"question":"A gaming company is implementing a new feature in their app called “Boost Mode”. Boost Mode can be activated when certain conditions are met in a sequence of energy levels recorded for a player. The energy levels are represented as an array of integers where each integer corresponds to the energy level at a particular time. To activate Boost Mode, a continuous subarray of energy levels must sum to at least a given threshold value. Your task is to write a function to determine if Boost Mode can be activated. -----Input----- The input consists of an integer `n` (the length of the energy levels array) followed by the energy levels array of `n` integers and an integer `threshold` which represents the required sum to activate Boost Mode. 1 ≤ n ≤ 10^5 -10^3 ≤ energy levels[i] ≤ 10^3 -10^9 ≤ threshold ≤ 10^9 -----Output----- Print \'YES\' if there exists a continuous subarray whose sum is at least `threshold`. Otherwise, print \'NO\'. -----Examples----- Input 10 1 -1 5 2 -1 3 -2 4 -5 1 7 Output YES Input 5 -1 -1 -1 -1 -1 0 Output NO","solution":"def can_activate_boost_mode(n, energy_levels, threshold): Determines if there exists a continuous subarray in energy_levels whose sum is at least threshold. Parameters: n (int): The length of the energy levels array. energy_levels (list of int): Array of integers representing energy levels at different times. threshold (int): The required sum to activate Boost Mode. Returns: str: \'YES\' if such a subarray exists, otherwise \'NO\'. current_sum = 0 min_prefix_sum = 0 for el in energy_levels: current_sum += el if current_sum - min_prefix_sum >= threshold: return \\"YES\\" if current_sum < min_prefix_sum: min_prefix_sum = current_sum return \\"NO\\""},{"question":"A group of students is attending a programming workshop. The instructor has given them a problem to find the largest product of any contiguous subarray within a given array of integers. The students need to implement a function to solve this problem. Specifically, they\'re given an array of integers, both positive and negative, and they must identify the contiguous subarray that results in the highest product. If the array only contains one element, the product is simply that element. Input format: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains two parts: 1. An integer N, the number of elements in the array. 2. N integers, representing the elements of the array A. Output format: - For each test case, output the largest product of any contiguous subarray of A. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - -10 ≤ A[i] ≤ 10 SAMPLE INPUT 3 4 2 3 -2 4 5 -2 -3 4 -1 -2 3 -2 -3 -1 SAMPLE OUTPUT 6 48 6 Explanation In the first test case, the array is [2, 3, -2, 4]. The contiguous subarray with the largest product is [2, 3], resulting in 6. In the second test case, the array is [-2, -3, 4, -1, -2]. The contiguous subarray with the largest product is [-2, -3, 4, -1], resulting in 48. In the third test case, the array is [-2, -3, -1]. The contiguous subarray with the largest product is [-2, -3], resulting in 6.","solution":"def max_subarray_product(test_cases): results = [] for case in test_cases: N, A = case if N == 1: results.append(A[0]) continue max_product = float(\'-inf\') min_product = float(\'inf\') current_max = 1 current_min = 1 for num in A: if num == 0: current_max = 1 current_min = 1 continue temp = current_max * num current_max = max(num, temp, current_min * num) current_min = min(num, temp, current_min * num) max_product = max(max_product, current_max) results.append(max_product) return results # Example usage: # test_cases = [ # (4, [2, 3, -2, 4]), # (5, [-2, -3, 4, -1, -2]), # (3, [-2, -3, -1]) # ] # print(max_subarray_product(test_cases)) # Output: [6, 48, 6]"},{"question":"You are given a list of numbers and a target number. Your task is to find all unique combinations of numbers from the list that sum up to the target number. Each number from the list may be used multiple times in the combination. Write a function `combinationSum` that takes the list of numbers and the target number as its input and returns a list of all unique combinations that add up to the target number. The list of numbers will contain positive integers, and the solution set must not contain duplicate combinations. Numbers in a combination should be in non-descending order. -----Input----- The function `combinationSum` will be called with two arguments: 1. A list of positive integers nums. 2. A positive integer target. The length of nums will not exceed 30, and elements in nums will not exceed 200. The target number will be a positive integer not greater than 500. -----Output----- The function should return a list of lists, where each list is a unique combination of numbers that sum to target. Each combination in the output should be sorted in non-descending order, and the output list should be sorted in lexicographical order. -----Examples----- Sample Input: combinationSum([2, 3, 6, 7], 7) Sample Output: [ [2, 2, 3], [7] ] Sample Input: combinationSum([2, 3, 5], 8) Sample Output: [ [2, 2, 2, 2], [2, 3, 3], [3, 5] ]","solution":"def combinationSum(nums, target): def backtrack(start, target, path, result): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(nums)): backtrack(i, target - nums[i], path + [nums[i]], result) result = [] nums.sort() backtrack(0, target, [], result) return result"},{"question":"Alex is given a string S of length N, made up of lowercase English alphabet letters. Alex can perform one of the following operations at most once to make the string S lexicographically smallest: 1. Select any substring of S and reverse it. 2. Select any substring of S and replace each of its characters with any character from the lowercase English alphabet. Determine the lexicographically smallest string that Alex can obtain after performing one of the operations at most once. ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains one integer N, the length of the string. - The second line contains the string S of length N. ------ Output Format ------ For each test case, print a single line containing the lexicographically smallest string Alex can obtain. ------ Constraints ------ 1 ≤ T ≤ 10^{2} 1 ≤ N ≤ 10^{5} - The sum of N over all test cases does not exceed 10^{6}. ----- Sample Input 1 ------ 3 3 cba 5 abzcd 4 bcda ----- Sample Output 1 ------ abc aacaa aabc ----- Explanation 1 ------ Test case 1: Alex can reverse the entire string to get the lexicographically smallest string abc. Test case 2: Alex can replace the substring \\"abc\\" with \\"aaa\\" to get the lexicographically smallest string aacaa. Test case 3: Alex can replace the substring \\"bcd\\" with \\"abc\\" to get the lexicographically smallest string aabc.","solution":"def lexicographically_smallest_string(T, test_cases): Given a list of test cases, each with the length N and string S, return a list of lexicographically smallest strings after performing at most one operation on each string. results = [] for i in range(T): N, S = test_cases[i] # Option 1: reversing the entire string reverse_option = S[::-1] # Option 2: replacing any substring with all \'a\'s replace_option = \'a\' * N # Determine the smallest between these two options smallest_string = min(reverse_option, replace_option) results.append(smallest_string) return results"},{"question":"You are given a string consisting of lowercase English letters. Determine the most frequently occurring character in the string. If there are multiple characters with the same highest frequency, return the lexicographically smallest one. Function Description Complete the `mostFrequentCharacter` function in the editor below. It must return the most frequently occurring character as a string. `mostFrequentCharacter` has the following parameter: - `s`: a string consisting of lowercase English letters. Input Format A single line containing the string `s`. Constraints 1 leq |s| leq 10^5 Output Format Print the most frequently occurring character in the string. If there are multiple characters with the same highest frequency, print the lexicographically smallest one. Sample Input ``` aabbbccdde ``` Sample Output ``` b ``` Explanation: The character \'b\' appears 3 times, which is more frequently than any other character in the string.","solution":"def mostFrequentCharacter(s): Returns the most frequently occurring character in the string s. If there are multiple characters with the same highest frequency, returns the lexicographically smallest one. from collections import Counter # Counting the frequency of each character frequency = Counter(s) # Getting the highest frequency max_freq = max(frequency.values()) # Collecting all characters that have the highest frequency most_frequent_chars = [char for char, freq in frequency.items() if freq == max_freq] # Returning the lexicographically smallest character among them return min(most_frequent_chars)"},{"question":"Write a function that takes a string and a list of words, and returns a dictionary where the keys are the words and the values are the number of occurrences of each word in the string. Example ```python \\"hello world hello\\", [\\"hello\\", \\"world\\", \\"hello\\", \\"goodbye\\"] # should return {\\"hello\\": 2, \\"world\\": 1, \\"goodbye\\": 0} ```","solution":"def word_count(s, words): Returns a dictionary where the keys are the words and the values are the number of occurrences of each word in the string. :param s: string - The input string to search :param words: list of strings - The list of words to count occurrences :return: dictionary - A dictionary with word counts word_list = s.split() word_dict = {} for word in words: word_dict[word] = word_list.count(word) return word_dict"},{"question":"# Binary Search Tree Validation A **Binary Search Tree (BST)** is a binary tree in which each node has a comparable key (and an associated value) and satisfies the constraint that the key in any node is larger than the keys in all nodes in that node\'s left subtree and smaller than the keys in all nodes in that node\'s right subtree. Your task is to write a function that determines whether a given binary tree is a valid Binary Search Tree. Here is an outline of the problem: Node Class You are given a Node class to represent a node of the binary tree: ```python class Node: def __init__(self, value): self.value = value self.left = None self.right = None ``` Function Specification Implement the function `is_valid_bst(node: Node) -> bool` that takes the root node of a binary tree and returns `True` if the binary tree is a valid Binary Search Tree and `False` otherwise. Example Consider the following BST: ``` 4 / 2 5 / 1 3 ``` The representation would be: ```python root = Node(4) root.left = Node(2) root.right = Node(5) root.left.left = Node(1) root.left.right = Node(3) ``` For this tree, `is_valid_bst(root)` should return `True` because it satisfies the properties of a BST. Now consider the following invalid BST: ``` 4 / 2 5 / 1 6 ``` The representation would be: ```python root = Node(4) root.left = Node(2) root.right = Node(5) root.left.left = Node(1) root.left.right = Node(6) ``` For this tree, `is_valid_bst(root)` should return `False` because the node with value `6` violates the BST property. Constraints - Nodes contain integer values and there will be no duplicate values in the tree. - The maximum number of nodes in the given tree is 10^4. Hints - Think about keeping track of a range `(min_value, max_value)` for each node, representing the valid range of values for that node. - Initially, the range for the root node is `(-∞, +∞)`. For the left child node, update the range to `(-∞, node.value)`, and for the right child node, update the range to `(node.value, +∞)`. Good luck!","solution":"class Node: def __init__(self, value): self.value = value self.left = None self.right = None def is_valid_bst(node, min_value=float(\'-inf\'), max_value=float(\'inf\')): if node is None: return True if not (min_value < node.value < max_value): return False return (is_valid_bst(node.left, min_value, node.value) and is_valid_bst(node.right, node.value, max_value))"},{"question":"Imagine you are given an array of integers representing the heights of students standing in a line. You are required to identify all possible pairs of students such that the student on the right is strictly shorter than the student on the left. Your task is to write a function that takes this array as input and returns the number of such pairs. For example: If the array is [5, 3, 4, 6, 2], then the valid pairs are: (5, 3), (5, 4), (5, 2), (3, 2), (4, 2), and (6, 2). So the output should be 6. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100000) — the number of students in the line. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_{i} ≤ 10000) — the heights of the students. -----Output----- Print a single integer — the number of pairs (i, j) such that i < j and h_{i} > h_{j}. -----Examples----- Input 5 5 3 4 6 2 Output 6 Input 4 1 2 3 4 Output 0 Input 3 10 5 2 Output 3","solution":"def count_pairs(heights): Returns the number of pairs (i, j) with i < j such that the student at index i is taller than the student at index j. n = len(heights) count = 0 for i in range(n): for j in range(i + 1, n): if heights[i] > heights[j]: count += 1 return count"},{"question":"Write a program that checks whether a given word is an anagram of another word. An anagram means that the letters in one word can be rearranged to form the other word. Input Two strings, each on a separate line. Output \\"True\\" if the words are anagrams, \\"False\\" otherwise. Example Input listen silent Output True","solution":"def are_anagrams(word1, word2): Returns True if word1 and word2 are anagrams, False otherwise. return sorted(word1) == sorted(word2)"},{"question":"A car rental company wants to track the total distance traveled by their cars in one day. Each car has a unique ID and a set of recorded trips that it made throughout the day. Each trip is represented by an integer specifying the distance in kilometers. Your task is to process this data to determine the total distance traveled by each car. INPUT The first line contains the number of test cases T. For each test case, the first line contains an integer N representing the number of cars. The next N lines each begin with a string representing the car ID, followed by M integers representing the distances of the trips made by that car. OUTPUT For each test case, output N lines, each containing the car ID and the total distance traveled by that car, sorted alphabetically by the car ID. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ M ≤ 50 1 ≤ Distance ≤ 1000 SAMPLE INPUT 2 3 carA 10 20 30 carB 15 25 carC 5 10 15 20 2 carX 50 carY 30 60 10 SAMPLE OUTPUT carA 60 carB 40 carC 50 carX 50 carY 100 Explanation For the first test case, carA has trips 10, 20, and 30 which sum up to 60 kilometers. carB has trips 15 and 25 which sum up to 40 kilometers. carC has trips 5, 10, 15, and 20 which sum up to 50 kilometers. For the second test case, carX has a single trip of 50 kilometers, and carY has trips 30, 60, and 10 which sum up to 100 kilometers.","solution":"def process_trip_data(test_cases): Process the trip data of cars and return the total distance traveled by each car. result = [] for case in test_cases: number_of_cars = case[0] car_data = case[1:] car_total_distance = {} for car in car_data: car_info = car.split() car_id = car_info[0] trips = map(int, car_info[1:]) total_distance = sum(trips) car_total_distance[car_id] = total_distance sorted_cars = sorted(car_total_distance.items()) for car_id, total_distance in sorted_cars: result.append(f\\"{car_id} {total_distance}\\") return result def parse_input(input_list): Parse the structured input list into a format suitable for the process_trip_data function. index = 0 test_cases = [] T = int(input_list[index]) index += 1 for _ in range(T): N = int(input_list[index]) index += 1 car_data = [input_list[i] for i in range(index, index + N)] test_cases.append([N] + car_data) index += N return test_cases"},{"question":"You are tasked with developing a highly efficient automatic irrigation system for a vast agricultural region. The system should handle multiple types of crops, each requiring different amounts of water. Additionally, to optimize water usage, the system must ensure that no water is wasted by catering specifically to each crop\'s needs. Each crop is represented by a distinct symbol (A to Z), and water distribution must be managed such that each type of crop gets its required amount. Unfortunately, the amount of water required is not uniform within patches, but rather, differs from patch to patch. An array of size N represents the agricultural field. Each cell in the array will contain a letter representing the type of crop and an integer indicating the amount of water that crop needs. Each crop type must be analyzed separately to determine the total water required. Write a program that outputs the total amount of water required for each crop type in the field. Input The first line contains an integer N, which signifies the size of the array (1 <= N <= 1000). The next N lines each contain a string of the format \'Cx\', where C is a letter representing the crop type, and x is a non-negative integer representing the water requirement (0 <= x <= 1000). Output For each crop type present in the field, output the total water required in the format: \'CropType: TotalWater\'. The outputs should be sorted alphabetically by crop type. Sample Input 7 A300 B200 A400 C100 B300 C200 A100 Sample Output A: 800 B: 500 C: 300 Note: Each crop type and its total required water should only appear once in the output, even if it\'s present multiple times in the array. If a crop type does not appear in the array, it should not be listed in the output.","solution":"def calculate_water_requirements(N, crops): Calculate the total water required for each crop type in the field. Parameters: N : int : the size of the array representing the field crops : list of str : list where each element is a string of the format \'Cx\' C is a letter representing the crop type x is an integer representing the water requirement Returns: dict : dictionary with crop types as keys and total water required as values water_requirements = {} for crop in crops: crop_type = crop[0] water_amount = int(crop[1:]) if crop_type in water_requirements: water_requirements[crop_type] += water_amount else: water_requirements[crop_type] = water_amount sorted_water_requirements = {k: water_requirements[k] for k in sorted(water_requirements)} return sorted_water_requirements"},{"question":"Given a grid of size m x n filled with empty cells (represented by \'.\') and barriers (represented by \'#\'), you need to determine the number of distinct groups of adjacent empty cells. Two empty cells are considered adjacent if they are directly connected vertically or horizontally. Input: - The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. - The next m lines contain n characters each, representing the grid. Output: - Print a single integer representing the number of distinct groups of adjacent empty cells. Example: Input: 4 5 ..#.. .#..# ... # Output: 3 Explanation: In the given example, there are three distinct groups of adjacent empty cells: - The first group consists of the cells in the first row (0,0) and (0,1). - The second group consists of the cell in the second row (1,2) and (1,3) connected to (2,2) by sharing a side. - The third group consists of the cell in the third row (2,0) and (2,1). Note that cells separated by barriers \'#\' are considered in separate groups even if they are next to each other diagonally.","solution":"def count_groups(grid, m, n): def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] != \'.\': return grid[x][y] = \'#\' # mark the cell as visited by changing \'.\' to \'#\' # explore four possible directions: up, down, left, right dfs(x-1, y) dfs(x+1, y) dfs(x, y-1) dfs(x, y+1) count = 0 for i in range(m): for j in range(n): if grid[i][j] == \'.\': dfs(i, j) count += 1 return count"},{"question":"You are given a list of integers, and you need to determine whether any two distinct elements in the list sum up to a given target integer. If there exists such a pair, print \\"YES\\". Otherwise, print \\"NO\\". Input Format The first line contains an integer, `n`, the number of integers in the list. The second line contains `n` space-separated integers. The third line contains a single integer, the target sum. Output Format Output a single line containing \\"YES\\" or \\"NO\\" according to the instructions above. Constraints 2 ≤ n ≤ 10^5 -10^9 ≤ integers in the list ≤ 10^9 -10^9 ≤ target sum ≤ 10^9 Sample Input 5 1 2 3 4 5 9 Sample Output YES Explanation There exist two distinct elements in the list (4 and 5) that sum up to the target integer 9. Thus, the output is \\"YES\\".","solution":"def has_pair_with_sum(n, lst, target): Determines if any two distinct elements in the list sum up to the target integer. Args: n (int): Number of integers in the list. lst (list): List of integers. target (int): Target sum. Returns: str: \\"YES\\" if there exists such a pair, otherwise \\"NO\\". seen = set() for num in lst: complement = target - num if complement in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Problem Description: You are organizing a coding competition where multiple coders participate, and each coder solves a certain number of problems. The coder who solves the most problems overall wins the competition. You are given the results of each coder\'s performance in several rounds of the competition. Your task is to determine the winner of each round based on the number of problems solved by each coder. Input: - The first line contains an integer `T` denoting the number of test cases. - The first line of each test case contains an integer `R` denoting the number of rounds. - Each of the next `R` lines contains a string and an integer, where the string represents the name of the coder, and the integer represents the number of problems they solved in that round. Output: For each test case, output the name of the coder who solved the most problems across all rounds and the total number of problems they solved. Constraints: - 1 ≤ T ≤ 10 - Number of unique names of coders = 20 - 1 ≤ R ≤ 100 - 1 ≤ problems_solved[i] ≤ 50 Example: Input: 2 3 Alice 4 Bob 5 Alice 2 4 Charlie 3 David 6 Charlie 5 David 8 Output: Alice 6 David 14 Explanation: Test case 1: Alice solved 4 problems in the first round and 2 problems in the third round for a total of 6 problems. Bob solved 5 problems in the second round. Alice solved the most problems overall. Test case 2: Charlie solved 3 problems in the first round and 5 problems in the third round for a total of 8 problems. David solved 6 problems in the second round and 8 problems in the last round for a total of 14 problems. David solved the most problems overall.","solution":"def find_winner(test_cases): results = [] for case in test_cases: rounds = case[\'rounds\'] scores = {} for name, solved in rounds: if name in scores: scores[name] += solved else: scores[name] = solved winner = max(scores, key=scores.get) results.append((winner, scores[winner])) return results # Definition of a helper function to format output def main(): import sys input = sys.stdin.read data = input().splitlines() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): R = int(data[index]) index += 1 rounds = [] for _ in range(R): name, solved = data[index].rsplit(\' \', 1) solved = int(solved) rounds.append((name, solved)) index += 1 test_cases.append({\'rounds\': rounds}) results = find_winner(test_cases) for winner, score in results: print(winner, score)"},{"question":"In an online game, players are represented by their avatars. Developers have implemented a system to rank players based on their points. Given the points, the ranking is determined by the following rules: * Players with points below 1000 are ranked as \\"Bronze\\". * Players with points from 1000 to 2999 are ranked as \\"Silver\\". * Players with points from 3000 to 5999 are ranked as \\"Gold\\". * Players with points of 6000 or more are ranked as \\"Platinum\\". Write a function that takes a list of integers, representing the points of multiple players, and returns a list of their corresponding ranks. # Input - A list of integers, where each integer represents the points of a player. The number of players (length of the list) will be between 1 and 100. # Output - A list of strings, where each string represents the rank corresponding to the input list of points. # Constraints - Points will be non-negative integers. # Example Example 1 Input: ``` [500, 2000, 3500, 6500] ``` Output: ``` [\\"Bronze\\", \\"Silver\\", \\"Gold\\", \\"Platinum\\"] ``` Example 2 Input: ``` [1500, 999, 4500] ``` Output: ``` [\\"Silver\\", \\"Bronze\\", \\"Gold\\"] ``` # Note Ensure to match each player’s points to their corresponding rank appropriately.","solution":"def rank_players(points): ranks = [] for point in points: if point < 1000: ranks.append(\\"Bronze\\") elif 1000 <= point <= 2999: ranks.append(\\"Silver\\") elif 3000 <= point <= 5999: ranks.append(\\"Gold\\") else: ranks.append(\\"Platinum\\") return ranks"},{"question":"Description: Write a function that takes an integer `n` as input and returns a string containing the numbers from `1` to `n` separated by commas, but replaces multiples of 3 with \\"Fizz\\", multiples of 5 with \\"Buzz\\", and multiples of both 3 and 5 with \\"FizzBuzz\\". # Examples ``` fizzbuzz_string(15) === \\"1,2,Fizz,4,Buzz,Fizz,7,8,Fizz,Buzz,11,Fizz,13,14,FizzBuzz\\" fizzbuzz_string(5) === \\"1,2,Fizz,4,Buzz\\" fizzbuzz_string(3) === \\"1,2,Fizz\\" fizzbuzz_string(1) === \\"1\\" ``` # Constraints - `1 <= n <= 100`","solution":"def fizzbuzz_string(n): Returns a string containing the numbers from 1 to n separated by commas, but replaces multiples of 3 with \\"Fizz\\", multiples of 5 with \\"Buzz\\", and multiples of both 3 and 5 with \\"FizzBuzz\\". result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return \\",\\".join(result)"},{"question":"A large square garden has a width and height of 10^9 units. The garden is arranged in a grid pattern where a cell with coordinates (x, y) represents the position, with x being the column number and y being the row number. Initially, a gardener is positioned at the bottom-left corner of the garden, specifically at cell (1,1). The gardener aims to reach the cell at the top-right corner of the garden at position (10^9, 10^9). However, the garden contains several obstacles that the gardener needs to navigate through or remove. There are two types of obstacles: Vertical obstacles and Horizontal obstacles. - Vertical obstacles block a vertical line at column `x`, preventing movement between columns `x` and `x + 1`. - Horizontal obstacles block a horizontal line between columns `x1` to `x2` (inclusive) at row `y`. The gardener can remove obstacles if necessary but prefers to remove the least number of obstacles possible. Your task is to find the minimum number of obstacles the gardener needs to remove to make a path from (1,1) to (10^9, 10^9). -----Input----- The first line contains two integers `n` and `m` (0 ≤ n, m ≤ 10^5) representing the number of vertical and horizontal obstacles respectively. The next `n` lines each contain an integer `x` (1 ≤ x < 10^9) describing a vertical obstacle that creates a barrier between column x and x + 1. The following `m` lines each contain three integers `x1`, `x2`, and `y` (1 ≤ x1 ≤ x2 ≤ 10^9, 1 ≤ y < 10^9) describing a horizontal obstacle that creates a barrier from column x1 to x2 inclusive at row y. It is guaranteed that all obstacles are different and horizontal obstacles do not overlap. -----Output----- Print one integer that represents the minimum number of obstacles the gardener needs to remove to reach from cell (1, 1) to cell (10^9, 10^9). -----Examples----- Input 2 2 4 6 1 5 2 3 6 4 Output 1 Input 1 1 7 1 8 1 Output 1 Input 0 3 2 5 3 3 7 4 1 6 2 Output 2 -----Note----- In the first example, the gardener can remove either the vertical obstacle at column 6 or the horizontal obstacle at row 4. Removing the first horizontal obstacle will allow a clear path to proceed to the destination. In the second example, removing either the vertical obstacle at column 7 or the horizontal obstacle at row 1 will clear the way for the gardener to reach the destination. In the third example, the gardener needs to remove at least two horizontal obstacles (e.g., those blocking row 2 and row 4) to make a path from (1, 1) to (10^9, 10^9).","solution":"def min_obstacles_to_remove(n, m, vert_obstacles, hor_obstacles): Returns the minimum number of obstacles to remove to create a path from (1, 1) to (10^9, 10^9). if n == 0 or m == 0: # If either type of obstacle is absent return max(n, m) # Calculate the overall minimum number of obstacles to be removed return min(n, m)"},{"question":"You are given an integer array `nums` consisting of `n` positive integers, where `n` is even. You need to arrange the integers into pairs `(a1, b1), (a2, b2),..., (an/2, bn/2)` such that the sum of `min(ai, bi)` for all pairs is maximized. Return the maximized sum. Input - The first line contains an integer `n` (2 ≤ n ≤ 10^4), the number of elements in the array. - The second line contains `n` integers separated by spaces. Output - A single integer representing the maximized sum. Example Input 4 1 4 3 2 Output 4 Explanation The optimal pairing is (1, 2) and (3, 4). Therefore, the sum of the minimums is 1 + 3 = 4. Input 6 6 2 6 5 1 2 Output 9 Explanation The optimal pairing is (1, 2), (2, 5), (6, 6). Therefore, the sum of the minimums is 1 + 2 + 6 = 9.","solution":"def maximize_sum_of_mins(n, nums): Arrange the integers into pairs such that the sum of min(ai, bi) is maximized. Args: n (int): The number of elements in the array. nums (list): The list of integers. Returns: int: The maximized sum. nums.sort() return sum(nums[i] for i in range(0, n, 2))"},{"question":"You are given two strings, s and t, where s is the original string and t is the target string. You need to transform s into t using a series of specific operations. The allowed operations are: 1. Insert a character at any position in the string. 2. Delete a character from any position in the string. 3. Replace a character at any position with another character. Your task is to compute the minimum number of operations required to transform s into t. -----Input:----- The first line contains the string s, and the second line contains the string t. Both strings will consist of lowercase English letters only and will have a length of at most 1000 characters. -----Output:----- The output must consist of a single line containing a single integer which is the minimum number of operations required to transform s into t. -----Constraints:----- - The length of both strings will be between 1 and 1000. -----Sample Input 1:----- intention execution -----Sample Output 1:----- 5 -----Sample Input 2:----- horse ros -----Sample Output 2:----- 3 -----Sample Input 3:----- abcdef ghijkl -----Sample Output 3:----- 6","solution":"def min_operations(s, t): Computes the minimum number of operations required to transform string s into string t. m, n = len(s), len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s is empty, we need to insert all characters of t elif j == 0: dp[i][j] = i # If t is empty, we need to delete all characters of s elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If characters are equal, no operation is needed else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete from s dp[i][j - 1], # Insert into s dp[i - 1][j - 1]) # Replace in s return dp[m][n]"},{"question":"# Task: Parentheses Balancer Write a function to determine whether a given string consisting of the characters `(`, `)`, `{`, `}`, `[` and `]` is balanced. A string is considered balanced if all opening brackets are closed by the corresponding closing brackets and the brackets are correctly nested. -----Input----- A single string `s` containing characters `(`, `)`, `{`, `}`, `[` and `]`. The length of the string is at most 10^5. -----Output----- Output `YES` if the string is balanced, otherwise output `NO`. -----Limits----- - The input string can be empty (`\\"\\"`). -----Examples----- Sample Input: ``` {[()]} ``` Sample Output: ``` YES ``` Sample Input: ``` {[(])} ``` Sample Output: ``` NO ``` Sample Input: ``` ({[]}) ``` Sample Output: ``` YES ``` Sample Input: ``` ( ``` Sample Output: ``` NO ```","solution":"def is_balanced(s): Determines if the input string with parentheses, brackets, and braces is balanced. Args: s (str): A string containing \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: str: \\"YES\\" if the string is balanced, otherwise \\"NO\\". stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket: if stack and stack[-1] == matching_bracket[char]: stack.pop() else: return \\"NO\\" else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"You are given a list of integers, which represents the stock prices of a company in chronological order over a number of days. Write a function that calculates the maximum profit you could have made by buying a stock on one day, and selling it on a later day. If no profit is possible, return 0. For example, if the stock prices were: `[7, 1, 5, 3, 6, 4]`, then the maximum profit would be `5`, which is derived from buying on the second day (price = 1) and selling on the fifth day (price = 6). Example: ```python max_profit([7, 1, 5, 3, 6, 4]) # should return 5 ``` Hint: - Consider tracking the minimum price seen so far and the maximum profit as you iterate through the list of prices.","solution":"def max_profit(prices): Returns the maximum profit that can be made by buying on one day and selling on a later day. If no profit can be made, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"The National Park is planning to build a new network of roads. The park area can be represented as a grid of size n times m. Each cell in the grid is one of the following: - \'F\' (Forest) - A region covered with dense forest. - \'R\' (River) - A region covered with a river. - \'P\' (Plain) - A region that is suitable for building roads. The task is to build a road network that connects the top-left cell of the grid to the bottom-right cell. The road network can traverse only through cells marked with \'P\'. The road can only move to an adjacent cell either to the right or downwards. Write a program to find the minimum number of cells (including starting and ending cells) that must be included in the road network to connect the top-left cell to the bottom-right cell. If it is not possible to build such a road, return -1. -----Input----- The first line of input contains two integers n and m (1 le n, m le 500) — the dimensions of the park grid. Each of the next n lines contains m characters, each character is either \'F\', \'R\', or \'P\'. -----Output----- Output a single integer — the minimum number of cells required to connect the top-left cell to the bottom-right cell, or -1 if it is not possible. -----Examples----- Input 5 5 PPPPP PFFFP PFRFP PFFFP PPPPP Output 9 Input 4 4 PFRP FFPP PFRR RPPP Output -1 Input 3 3 PPP PFP PPP Output 5 -----Note----- In the first example, there is a path from the top-left to the bottom-right following only plain cells. The minimum number of cells required is 9. In the second example, it is not possible to connect the top-left to the bottom-right cell through plain cells only. In the third example, the minimum number of cells required is 5. The path is: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3)","solution":"from collections import deque def min_cells_to_connect(n, m, grid): Returns the minimum number of cells required to connect the top-left cell to the bottom-right cell, or -1 if it is not possible. # Check if the start or end cells are not \'P\' if grid[0][0] != \'P\' or grid[n-1][m-1] != \'P\': return -1 # Initialize directions for moving right and down directions = [(0, 1), (1, 0)] # BFS setup queue = deque([(0, 0, 1)]) # (row, col, depth) visited = set((0, 0)) while queue: r, c, depth = queue.popleft() if (r, c) == (n-1, m-1): return depth for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == \'P\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, depth + 1)) return -1"},{"question":"Given an array of integers, you need to find any peak element. A peak element is an element that is strictly greater than its neighbors. If the array contains multiple peaks, return the index of any one of the peaks. If there is no peak element, return -1 (`Note`: The array may contain duplicate elements and there should be at least one peak element). Constraints * 1 ≤ array.length ≤ 10^6 * -10^9 ≤ array[i] ≤ 10^9 Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n * `n`: the number of elements in the array. * `a_i`: the array elements. Output Print the index (0-based) of any peak element. If no peak exists, print -1. Example Input 7 1 2 3 1 4 5 6 Output 2 Explanation In the given example, element at index 2 (value = 3) is greater than its neighbors (value = 2 and 1). Therefore, its index 2 is a peak and can be the output. Another valid output could be index 6 (value = 6) since it is greater than its neighbor 5.","solution":"def find_peak_element(arr): Find the index of any peak element in the array. A peak is an element that is strictly greater than its neighbors. Parameters: arr (list): List of integers representing the array. Returns: int: Index of any peak element. If no peak exists, returns -1. n = len(arr) if n == 0: return -1 if n == 1: return 0 # Checking the first element if arr[0] > arr[1]: return 0 # Checking the last element if arr[n - 1] > arr[n - 2]: return n - 1 # Checking other elements for i in range(1, n - 1): if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: return i return -1"},{"question":"You are given two arrays \'prices\' and \'weights\' of size \'n\' where \'prices[i]\' denotes the price of ith item and \'weights[i]\' denotes the weight of ith item. You need to select exactly \'k\' items such that the total weight of the selected items is as large as possible, while the total price remains within a given budget \'B\'. Return the maximum possible weight. If it\'s not possible to select \'k\' items within the given budget, return -1. Example 1: Input: prices = [1, 3, 2, 5] weights = [2, 4, 1, 3] k = 2 B = 5 Output: 6 Explanation: Selecting items with prices [1, 3] and weights [2, 4] yields the maximum weight 6 within the budget 5. Example 2: Input: prices = [10, 2, 3] weights = [1, 5, 9] k = 2 B = 4 Output: -1 Explanation: It\'s not possible to choose 2 items within the budget. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxPossibleWeight()` which takes arrays \'prices\' and \'weights\', the integer \'k\' and the integer \'B\' as input parameters and returns the maximum possible weight of selected items within the budget. If it\'s not possible to select \'k\' items within the given budget, return -1. Expected Time Complexity: O(n * 2^k) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 20 1 ≤ k ≤ n 1 ≤ prices[i], weights[i] ≤ 100","solution":"from itertools import combinations def maxPossibleWeight(prices, weights, k, B): Returns the maximum possible weight of selected k items within the budget B. n = len(prices) max_weight = -1 # Generate all combinations of indices of length k for combo in combinations(range(n), k): total_price = sum(prices[i] for i in combo) total_weight = sum(weights[i] for i in combo) if total_price <= B: max_weight = max(max_weight, total_weight) return max_weight"},{"question":"Given a special Binary Tree where every node has an extra pointer `random` pointing to any random node in the tree, write a function to clone this tree. Your task is to ensure that the cloned tree also maintains the correct `random` pointers corresponding to the original tree. Example: Input: (root points to 1) 1 / 2 3 / / 4 5 6 7 Random pointers: 1.random -> 3 2.random -> 1 3.random -> 5 4.random -> 7 5.random -> 2 6.random -> 4 7.random -> 6 Output: A cloned tree with the same structure and random pointers as the original tree. Your Task: You don’t need to read input or print anything. Your task is to complete the function `cloneTree()` which takes the root of the special Binary Tree as its input and returns the root of the cloned tree. For Example, the output should have the same tree and random references as the input. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 <= Number of nodes <= 10^4","solution":"class Node: def __init__(self, x): self.val = x self.left = None self.right = None self.random = None def cloneTree(root): if not root: return None # Dictionary to keep track of all newly created nodes node_map = {} # First pass: clone all nodes and populate the node_map def clone_nodes(node): if not node: return None if node in node_map: return node_map[node] cloned_node = Node(node.val) node_map[node] = cloned_node cloned_node.left = clone_nodes(node.left) cloned_node.right = clone_nodes(node.right) return cloned_node # Do the actual node cloning clone_root = clone_nodes(root) # Second pass: set the random pointers def set_random_pointers(node): if not node: return if node.random: node_map[node].random = node_map[node.random] set_random_pointers(node.left) set_random_pointers(node.right) # Set the random pointers in the newly cloned tree set_random_pointers(root) return clone_root"},{"question":"Given an integer array `arr`, you have to perform a series of right circular rotations on it. A right circular rotation means that the last element of the array moves to the first position, shifting all the other elements to the right. You will be given a number `k`, representing how many times you have to rotate the array. After performing the rotations, you need to return a list of the elements in the rotated array. Implement a function: ```python def right_circular_rotate(arr: List[int], k: int) -> List[int]: pass ``` -----Input----- - The input will consist of a list of integers `arr` (0 ≤ len(arr) ≤ 1000, 0 ≤ arr[i] ≤ 1000) and an integer `k` (0 ≤ k ≤ 1000). -----Output----- - Return the list of integers after applying the `k` right circular rotations to the array. -----Examples----- Input ```python arr = [1, 2, 3, 4, 5] k = 2 ``` Output ```python [4, 5, 1, 2, 3] ``` Input ```python arr = [1, 2, 3] k = 3 ``` Output ```python [1, 2, 3] ``` Input ```python arr = [] k = 5 ``` Output ```python [] ``` -----Explanation----- In the first example, rotating the array [1, 2, 3, 4, 5] two times to the right produces [4, 5, 1, 2, 3]. In the second example, rotating the array [1, 2, 3] three times returns the identical array because the number of rotations is equal to the length of the array. In the third example, since the array is empty, any number of rotations will still result in an empty array.","solution":"from typing import List def right_circular_rotate(arr: List[int], k: int) -> List[int]: Perform k right circular rotations on the array arr. if not arr: return arr n = len(arr) k = k % n # In case k is greater than the length of the array return arr[-k:] + arr[:-k]"},{"question":"Given a list of distinct integers, return all possible permutations of these integers. The output should be a list of lists, where each sublist is a permutation of the input list. The input list will contain distinct integers and the length will be between 1 and 9 inclusive. E.g. get_permutations([1, 2, 3]) => [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]","solution":"from itertools import permutations def get_permutations(lst): Returns all possible permutations of the input list of distinct integers. return [list(p) for p in permutations(lst)]"},{"question":"The local school is organizing a fun coding challenge, and each participant is required to form teams with their friends. However, the teams must follow one rule: every team should have a unique leader, and each leader can invite any number of friends from the participant’s list to join their team. The school wants to know the minimum number of leaders required to form teams such that everyone is included in one team or another. Given the total number of participants and their friendship relations, can you determine the smallest number of leaders needed? Input Format The first line of input contains the number of test cases T. (1 ≤ T ≤ 10) The second line of input contains the number of participants P. (1 ≤ P ≤ 100,000) The participants are numbered from 1 to P. The third line contains the number of friendship relations F. (0 ≤ F ≤ P-1) Then F lines follow, each describing a friendship relation. A friendship relation is a line containing 2 space separated integers x y such that x is a friend of y and vice versa. (1 ≤ x, y ≤ P and x ≠ y) Output Format For each test case, a single line containing the minimum number of leaders needed. SAMPLE INPUT 2 5 3 1 2 2 3 4 5 4 0 SAMPLE OUTPUT 2 4","solution":"def find_minimum_leaders(P, friendships): from collections import defaultdict, deque def bfs(start, visited, adjacency_list): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Create an adjacency list from friendships adjacency_list = defaultdict(list) for x, y in friendships: adjacency_list[x].append(y) adjacency_list[y].append(x) visited = [False] * (P + 1) num_leaders = 0 # Determine the number of connected components for participant in range(1, P + 1): if not visited[participant]: num_leaders += 1 bfs(participant, visited, adjacency_list) return num_leaders def process_input(test_cases): results = [] for case in test_cases: P = case[\'P\'] friendships = case[\'friendships\'] results.append(find_minimum_leaders(P, friendships)) return results"},{"question":"# Description: Given an array of integers, shift all the zeros to the end while maintaining the relative order of the non-zero elements. # Examples ``` moveZeros([0, 1, 0, 3, 12]) === [1, 3, 12, 0, 0] moveZeros([1, 7, 0, 0, 8, 0]) === [1, 7, 8, 0, 0, 0] moveZeros([0, 0, 0, 1]) === [1, 0, 0, 0] moveZeros([1, 2, 3, 4]) === [1, 2, 3, 4] moveZeros([0, 0, 0, 0]) === [0, 0, 0, 0] ```","solution":"def moveZeros(nums): Moves all zeros in the array nums to the end while maintaining the order of non-zero elements. non_zero_index = 0 # First pass: fill in the non-zero elements at the beginning for i in range(len(nums)): if nums[i] != 0: nums[non_zero_index] = nums[i] non_zero_index += 1 # Second pass: fill in the zeros at the end for i in range(non_zero_index, len(nums)): nums[i] = 0 return nums"},{"question":"Given an integer array nums of length n, you need to find the smallest positive integer that is missing from the array. The smallest positive integer is defined as a positive integer greater than 0, which does not appear in nums array. You need to implement the function to find this missing number. -----Input:----- - The first line will contain an integer T, the number of test cases. Then the test cases follow. - Each test case consists of two lines: - The first line contains an integer n (the length of the array). - The second line contains n space-separated integers representing the elements of the array nums. -----Output:----- For each test case, output in a single line the smallest positive integer that is missing from the array. -----Constraints----- - 1 leq T leq 100 - 1 leq n leq 10^5 - -10^6 leq nums[i] leq 10^6 -----Sample Input:----- 3 4 3 4 -1 1 5 1 2 0 -1 3 3 7 8 9 11 -----Sample Output:----- 2 4 1","solution":"def find_smallest_missing_positive(nums): This function finds the smallest positive integer missing from the array. nums = [num for num in nums if num > 0] nums = set(nums) missing = 1 while missing in nums: missing += 1 return missing def process_test_cases(T, test_cases): This function processes multiple test cases and returns a list of results for each test case. results = [] for test_case in test_cases: n, nums = test_case result = find_smallest_missing_positive(nums) results.append(result) return results"},{"question":"Imagine you are playing a game involving a rectangular grid of cells with dimensions M x N (M rows and N columns). Each cell contains an integer representing a certain cost to enter that cell. The objective of the game is to start at the top-left corner of the grid and move to the bottom-right corner with the minimum cost possible. You can only move either right or down at any point in time. Write a program that takes as input the dimensions of the grid M and N, followed by the grid values, and outputs the minimum cost to reach the bottom-right corner of the grid from the top-left corner. Input The first line of input contains two integers M and N (1 ≤ M, N ≤ 100), where M is the number of rows and N is the number of columns. This is followed by M lines, each containing N integers representing the cost values of the cells in the grid. Each cost value will be a non-negative integer not exceeding 100. Output Output a single integer representing the minimum cost to reach the bottom-right corner of the grid from the top-left corner. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3","solution":"def min_cost_path(M, N, grid): Returns the minimum cost to reach the bottom-right corner of the grid from the top-left corner. # Create a 2D list to store the minimum cost to reach each cell dp = [[0] * N for _ in range(M)] dp[0][0] = grid[0][0] # Initialize first row of dp array for j in range(1, N): dp[0][j] = dp[0][j - 1] + grid[0][j] # Initialize first column of dp array for i in range(1, M): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, M): for j in range(1, N): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[M - 1][N - 1] # Example usage: # M, N = 3, 3 # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(min_cost_path(M, N, grid)) # Output: 7"},{"question":"A company is organizing a competition where each participant is assigned a unique numeric ID. The IDs are positive integers, and the organizers want the IDs to form a consistent sequence when sorted in ascending order. However, due to an error in the system, some IDs may be missing from the sequence. Your task is to determine the minimum number of IDs that need to be inserted into the sequence to make it consecutive from the smallest ID to the largest ID. -----Input----- You are given an array of integers representing the IDs assigned to the participants. The array may contain missing numbers and is not necessarily sorted. Each integer in the array is unique and positive. -----Output----- Print one number — the minimum number of IDs that need to be inserted to ensure the sequence is consecutive from the smallest to the largest ID. -----Examples----- Input [3, 7, 1, 4] Output 3 Input [1, 2, 3, 4, 5] Output 0 Input [10, 14, 12] Output 2 -----Note----- In the first example, the IDs should form the sequence [1, 2, 3, 4, 5, 6, 7]. Therefore, 3 IDs (2, 5, and 6) need to be inserted. In the second example, the IDs are already consecutive, so no IDs need to be inserted. In the third example, the IDs should form the sequence [10, 11, 12, 13, 14]. Therefore, 2 IDs (11 and 13) need to be inserted.","solution":"def min_ids_to_insert(ids): if not ids: return 0 sorted_ids = sorted(ids) min_id = sorted_ids[0] max_id = sorted_ids[-1] expected_count = max_id - min_id + 1 actual_count = len(sorted_ids) return expected_count - actual_count"},{"question":"Sarah loves solving puzzles, especially those that involve rearranging strings. Today, she received a challenge to find the smallest lexicographical rotation of a given string. Given a string s, a rotation is defined as cutting the string at some position and appending the left part to the right part in the same order. For example, given the string \\"bcdea\\", cutting after the third character results in \\"deabc\\". Your task is to help Sarah find the smallest lexicographical rotation of the given string s. -----Input----- - The first line contains a single integer 1leq |s|leq 10^5, the length of the string s. - The second line contains a single string s of length |s| consisting of lowercase English letters. -----Output----- - Output a single string, the smallest lexicographical rotation of s. -----Examples----- Sample Input 1: 5 bcdea Sample Output 1: abcde Sample Input 2: 3 cab Sample Output 2: abc","solution":"def smallest_lexicographical_rotation(s): Returns the smallest lexicographical rotation of the given string s. # Concatenate the string with itself to handle rotations s = s + s n = len(s) // 2 # Initialize the smallest rotation min_rotation = s[:n] # Iterate through all possible rotations for i in range(1, n): rotation = s[i:i+n] if rotation < min_rotation: min_rotation = rotation return min_rotation"},{"question":"Julia is working on a research project to analyze social networks. As part of her analysis, she wants to identify clusters of friends within a network. In the social network, each person is represented as a unique integer and the friendships are represented as pairs of integers. Two people are in the same cluster if they are directly or indirectly connected through friendships. Julia needs a program to help her identify all the clusters in the network. -----Input:----- - First line contains a single integer T, the number of test cases. - For each test case, the first line contains two integers N and M, representing the number of people and the number of friendships respectively. - The next M lines each contain two integers u and v, indicating that person u and person v are friends. -----Output:----- For each test case, output the clusters identified in the network. Each cluster should be given as a list of integers sorted in ascending order. The clusters in the output should be sorted by the smallest integer in each cluster. Output each cluster on a new line. -----Constraints:----- - 1 leq T leq 10 - 1 leq N leq 10^4 - 0 leq M leq 10^5 - 1 leq u, v leq N - There can be self-loops and multiple edges between the same nodes. -----Sample Input:----- 2 6 4 1 2 2 3 4 5 5 6 5 3 2 2 1 1 2 2 2 1 -----Sample Output:----- 1 2 3 4 5 6 1 2 -----Explanation:----- In the first test case, the friendships form two clusters: one consisting of people {1, 2, 3} and another consisting of people {4, 5, 6}. In the second test case, there are no friendships, so each person is their own cluster.","solution":"def find_clusters(T, test_cases): from collections import defaultdict, deque def bfs(node, visited, adj_list, cluster): queue = deque([node]) while queue: n = queue.popleft() for neighbor in adj_list[n]: if not visited[neighbor]: visited[neighbor] = True cluster.append(neighbor) queue.append(neighbor) results = [] for i in range(T): N, M, edges = test_cases[i] adj_list = defaultdict(list) visited = [False] * (N + 1) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) clusters = [] for person in range(1, N + 1): if not visited[person]: visited[person] = True cluster = [person] bfs(person, visited, adj_list, cluster) clusters.append(sorted(cluster)) clusters.sort(key=lambda x: x[0]) results.append(clusters) return results"},{"question":"A company has developed a proprietary encryption algorithm for their sensitive data. The algorithm operates on a string of lowercase alphabetical characters (a-z) and intersperses special separator characters (one character from `#`, ``, `&`, `@`, `!`). The encrypted data is composed of the original characters and the separator characters. The task is to decrypt the string by removing all separator characters and restoring the original alphabetical characters to their original order. Given an input string, write a program to decrypt the string by removing all special separator characters and then returning the original string. Input: - A single string encrypted using the company\'s algorithm, which contains only lowercase alphabetical characters (a-z) and the separator characters (`#`, ``, `&`, `@`, `!`). Output: - A single line containing the decrypted original string, which consists of only lowercase alphabetical characters (a-z). Example: Input: ``` a#bc@d&e!f ``` Output: ``` abcdef ``` Input: ``` h#el@l!o ``` Output: ``` hello ``` Input: ``` s@e#cr&et!m@ess@ag!e ``` Output: ``` secretmessage ``` Write a function to decrypt the encrypted string by removing the separator characters while keeping the alphabetical characters in their original order.","solution":"def decrypt(encrypted_string): Decrypts the input string by removing special separator characters. Parameters: encrypted_string (str): The encrypted string containing lowercase alphabetical characters and special separator characters. Returns: str: The decrypted string with only original alphabetical characters in order. separators = {\'#\', \'\', \'&\', \'@\', \'!\'} decrypted_string = \'\'.join(char for char in encrypted_string if char not in separators) return decrypted_string"},{"question":"You are a software engineer working on an e-commerce platform. One of your tasks is to analyze customer orders and identify the unique product offerings based on the orders received. Each order contains information about the products in it. Specifically, an order consists of product names, which may appear multiple times in different orders. Your goal is to find out how many unique products have been ordered across all orders. ---Input--- The input starts with a line containing n (1 leq n leq 10^5), which is the number of orders. Each of the following n lines contains a space-separated list of strings representing the products in that order. ---Output--- Display the total number of unique products ordered across all orders. ---Examples--- Sample Input 1: 3 apple banana orange banana grape apple orange Sample Output 1: 4 Sample Input 2: 5 bread butter milk eggs cheese butter milk cheese butter Sample Output 2: 5","solution":"def count_unique_products(orders): Given a list of orders, each containing space-separated product names, returns the count of unique products across all orders. unique_products = set() for order in orders: products = order.split() for product in products: unique_products.add(product) return len(unique_products)"},{"question":"Given an integer n as input, calculate the sum of the first n even numbers. -----Constraints----- - 1 leq n leq 100 - n is an integer. -----Input----- Input is given from Standard Input in the following format: n -----Output----- Print the sum of the first n even numbers as an integer. -----Sample Input----- 3 -----Sample Output----- 12 When n = 3, the first three even numbers are: 2, 4, 6. Their sum is 2 + 4 + 6 = 12. Print the answer as an input. Outputs such as 12.0 will be judged as incorrect.","solution":"def sum_of_first_n_even_numbers(n): Returns the sum of the first n even numbers. return n * (n + 1)"},{"question":"You are given an array of integers. A subarray is defined as a contiguous subsequence of an array. Find the length of the longest subarray that contains at most two distinct integers. Example arr=[1,2,1,3,4,1,2,3] The subarray [1,2,1] has length 3 and contains the integers 1 and 2. The subarray [1,2,1,3,4] has length 5 but contains the integers 1, 2, 3, and 4. The subarray [3,4,1,2,3] has length 5 but contains the integers 3, 4, 1, and 2. The desired subarray [1,2,1] has length 3. Function Description Complete the function longestSubarrayTwoDistinct in the editor below. longestSubarrayTwoDistinct has the following parameter(s): int arr[]: the input array of integers Returns int: the length of the longest subarray that contains at most two distinct integers Input Format The first line contains an integer n, the number of elements in the array. Each of the following n lines contains an integer that represents arr[i]. Constraints 1 leq n leq 10^5 1 leq arr[i] leq 10^5 Sample Input STDIN Function ----- -------- 8 arr[] size n = 8 1 arr = [1, 2, 1, 3, 4, 1, 2, 3] 2 1 3 4 1 2 3 Sample Output 3 Explanation The longest subarray with at most two distinct integers in this example is [1,2,1], which has a length of 3.","solution":"def longestSubarrayTwoDistinct(arr): Returns the length of the longest subarray that contains at most two distinct integers. :param arr: List[int] - The input array :return: int - Length of the longest subarray with at most two distinct integers if not arr: return 0 max_len = 0 start = 0 freq = {} for end in range(len(arr)): freq[arr[end]] = freq.get(arr[end], 0) + 1 while len(freq) > 2: freq[arr[start]] -= 1 if freq[arr[start]] == 0: del freq[arr[start]] start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"Given a string of digits, write a function that determines whether it is possible to rearrange the digits to form a palindrome. If possible, return one such palindrome. If it is not possible, return an empty string. Input - A single string s, containing only digits (0-9) and of length at most 1000. Output - A single string that represents one possible palindrome formed by rearranging the input digits if possible, otherwise an empty string. Example Input \\"12321\\" Output \\"13231\\" Input \\"123\\" Output \\"\\"","solution":"from collections import Counter def can_form_palindrome(s): Determines whether it is possible to rearrange the digits to form a palindrome. If possible, returns one such palindrome. If it is not possible, returns an empty string. char_count = Counter(s) # A string can form a palindrome if it has at most one odd-count character odd_count_chars = [char for char, count in char_count.items() if count % 2 != 0] if len(odd_count_chars) > 1: return \\"\\" half_palindrome = [] middle_char = \\"\\" for char, count in char_count.items(): if count % 2 != 0: middle_char = char half_palindrome.append(char * (count // 2)) first_half = \\"\\".join(half_palindrome) return first_half + middle_char + first_half[::-1]"},{"question":"Given a string (str) containing only lowercase alphabetical characters, determine if it can be rearranged to form a palindrome. Return a boolean value indicating whether it is possible to rearrange the characters to form a palindrome. A palindrome reads the same backward as forward. Example: Input: \\"carrace\\" Output: true Input: \\"hello\\" Output: false","solution":"def can_form_palindrome(s): Determines if the input string can be rearranged to form a palindrome. :param s: a string containing only lowercase alphabetical characters. :returns: a boolean value indicating whether it is possible to rearrange the characters to form a palindrome. from collections import Counter # Count the frequency of each character in the string char_counts = Counter(s) # Check the number of characters that have an odd frequency odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # A string can be rearranged into a palindrome if it has at most one character with an odd frequency return odd_count <= 1"},{"question":"Tom is working on a unique packaging problem for his e-commerce business. He needs to find boxes that fit exactly into another box without any empty space. Given the dimensions of the outer box and a list of possible dimensions for inner boxes, help Tom determine which inner boxes can fit perfectly into the outer box. Input: The first line contains a single integer T, the number of test cases. For each test case: - The first line contains three space-separated integers L, W, and H - the dimensions of the outer box. - The second line contains an integer N, the number of possible inner boxes. - The next N lines each contain three space-separated integers li, wi, hi - the dimensions of each inner box. Output: For each test case, output the number of inner boxes that can fit perfectly (no rotations allowed) into the outer box. Constraints: 1 ≤ T ≤ 100 1 ≤ L, W, H ≤ 10^9 1 ≤ N ≤ 1000 1 ≤ li, wi, hi ≤ 10^9 SAMPLE INPUT 1 10 8 6 3 5 7 2 9 7 5 10 8 6 SAMPLE OUTPUT 1","solution":"def perfectly_fitting_boxes(T, cases): results = [] for case in cases: outer_box = case[\\"outer_box\\"] N = case[\\"N\\"] inner_boxes = case[\\"inner_boxes\\"] L, W, H = outer_box count = 0 for box in inner_boxes: li, wi, hi = box if li == L and wi == W and hi == H: count += 1 results.append(count) return results def process_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 cases = [] for _ in range(T): L, W, H = map(int, lines[index].split()) outer_box = (L, W, H) index += 1 N = int(lines[index]) index += 1 inner_boxes = [] for _ in range(N): li, wi, hi = map(int, lines[index].split()) inner_boxes.append((li, wi, hi)) index += 1 cases.append({\\"outer_box\\": outer_box, \\"N\\": N, \\"inner_boxes\\": inner_boxes}) return T, cases"},{"question":"A binary heap is a complete binary tree which satisfies the heap property. The heap can be of two types: - Max-Heap: In this type of heap, each parent node is greater than or equal to its child nodes. - Min-Heap: In this type of heap, each parent node is less than or equal to its child nodes. Given an array arr[] of size N representing a binary heap, implement the functions to build a max-heap and a min-heap from the given array. Additionally, implement a function to extract the maximum and minimum elements from the max-heap and min-heap respectively. Example 1: Input: N = 5 arr[] = {4, 1, 3, 9, 7} Output (Max-Heap): 9 7 3 1 4 Output (Min-Heap): 1 4 3 9 7 Extract Max from Max-Heap: 9 Extract Min from Min-Heap: 1 Example 2: Input: N = 6 arr[] = {2, 10, 8, 5, 6, 1} Output (Max-Heap): 10 6 8 5 2 1 Output (Min-Heap): 1 5 8 10 6 2 Extract Max from Max-Heap: 10 Extract Min from Min-Heap: 1 Your Task: You don\'t need to read input or print anything. Your task is to complete the functions buildMaxHeap(), buildMinHeap(), extractMax(), and extractMin() which take the array arr[] and its size N as input parameters. The functions should return the heaps as described and the extracted maximum and minimum elements respectively. Expected Time Complexity: O(N) for the heap construction functions, O(logN) for the extraction functions. Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^3 1 <= arr[i] <= 10^4","solution":"def heapify_max(arr, n, i): largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[left] > arr[largest]: largest = left if right < n and arr[right] > arr[largest]: largest = right if largest != i: arr[i], arr[largest] = arr[largest], arr[i] heapify_max(arr, n, largest) def buildMaxHeap(arr, n): for i in range(n//2 - 1, -1, -1): heapify_max(arr, n, i) return arr def extractMax(arr, n): if n == 0: return None max_element = arr[0] arr[0], arr[n-1] = arr[n-1], arr[0] n -= 1 heapify_max(arr, n, 0) return max_element def heapify_min(arr, n, i): smallest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[left] < arr[smallest]: smallest = left if right < n and arr[right] < arr[smallest]: smallest = right if smallest != i: arr[i], arr[smallest] = arr[smallest], arr[i] heapify_min(arr, n, smallest) def buildMinHeap(arr, n): for i in range(n//2 - 1, -1, -1): heapify_min(arr, n, i) return arr def extractMin(arr, n): if n == 0: return None min_element = arr[0] arr[0], arr[n-1] = arr[n-1], arr[0] n -= 1 heapify_min(arr, n, 0) return min_element"},{"question":"Given a list of strings representing different file paths in a directory, write a function `listFilePaths` to return a list of unique directory paths containing files with the given extension. The function should take as input an array of strings representing file paths and a string representing the desired file extension. Each file path is of the form `\\"directory/subdirectory/.../filename.extension\\"`. The function should return a list of unique directory paths that contain at least one file with the specified extension. Example: ``` Input - paths = [ \\"dir1/file1.txt\\", \\"dir1/file2.doc\\", \\"dir2/subdir/file3.txt\\", \\"dir3/subdir/subsubdir/file4.doc\\", \\"dir4/file5.txt\\" ], extension = \\"txt\\" Output - [ \\"dir1\\", \\"dir2/subdir\\", \\"dir4\\" ] ```","solution":"def listFilePaths(paths, extension): Returns a list of unique directory paths that contain at least one file with the specified extension. :param paths: List of file paths. :param extension: Desired file extension. :return: List of unique directory paths. directories = set() for path in paths: if path.endswith(f\\".{extension}\\"): directory = \'/\'.join(path.split(\'/\')[:-1]) directories.add(directory) return sorted(directories)"},{"question":"A university is planning to conduct final exams in different subjects. The exams need to be scheduled such that no student has more than one exam at the same time. Each student can be registered for multiple subjects. Given the list of students and the subjects they are enrolled in, you are to find the minimum number of time slots required to schedule all exams without any conflicts. Write a program to determine the minimum number of distinct time slots needed. [Input]: Input will be given in the following format: N S (where N is the number of students and S is the number of subjects, 1 ≤ N, S ≤ 1000) StudentID1 Subject1 Subject2 ... StudentID2 Subject3 Subject4 ... ... StudentIDN SubjectK ... Each student can be registered in one or more subjects (1 ≤ K ≤ S). No subject list will be repeated for the same student. [Output]: Output the minimum number of distinct time slots needed to schedule all exams. SAMPLE INPUT 4 5 1 1 2 3 2 1 4 3 2 4 5 4 3 5 SAMPLE OUTPUT 3","solution":"def min_time_slots(num_students, num_subjects, student_subjects): # Step 1: Initialize an adjacency matrix for the graph of subjects adj_matrix = [[0] * num_subjects for _ in range(num_subjects)] # Step 2: Fill the adjacency matrix based on student enrollment for subjects in student_subjects: for i in range(len(subjects)): for j in range(i + 1, len(subjects)): adj_matrix[subjects[i] - 1][subjects[j] - 1] = 1 adj_matrix[subjects[j] - 1][subjects[i] - 1] = 1 # Step 3: Define a function to check if a coloring assignment for a subject is valid def is_valid_color(subject, color, assignment): for i in range(num_subjects): if adj_matrix[subject][i] and assignment[i] == color: return False return True # Step 4: Define a recursive utility function to color the graph using minimum colors def graph_coloring_util(subject, assignment, colors): if subject == num_subjects: return True for color in range(1, colors + 1): if is_valid_color(subject, color, assignment): assignment[subject] = color if graph_coloring_util(subject + 1, assignment, colors): return True assignment[subject] = 0 return False # Step 5: Find the minimum number of colors required assignment = [0] * num_subjects for colors in range(1, num_subjects + 1): if graph_coloring_util(0, assignment, colors): return colors return num_subjects # Sample input for manual testing (if needed) num_students = 4 num_subjects = 5 student_subjects = [ [1, 2, 3], [1, 4], [2, 4, 5], [3, 5], ] # Expected output: 3 print(min_time_slots(num_students, num_subjects, student_subjects))"},{"question":"In a faraway kingdom, there exists a magical board game with the rules known to very few. The game is played on a board consisting of different colored cells, and a player can move freely across the board as long as they move to an adjacent cell that has a different color. You have just discovered this game and want to write a program that will help you find the longest possible path a player can traverse on such a board. For this purpose, you need to create a string representing the path of colors a player would follow. Each cell in the board is marked by a color represented by a character (\'A\' to \'Z\'). Given a 2D grid representing the board with colors, find the length of the longest path that can be traversed without revisiting any cell and without stepping on two consecutive cells of the same color. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines contain m characters each, representing the colors of the cells. -----Output----- Print the length of the longest path that can be traversed. -----Example----- Input 3 3 ABC DEF GHI Output 9 -----Note----- In the example above, one possible longest path is: A -> B -> C -> F -> E -> D -> G -> H -> I","solution":"def longest_path(grid): n = len(grid) m = len(grid[0]) def dfs(x, y, visited): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] max_path = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] != grid[x][y]: visited.add((nx, ny)) max_path = max(max_path, 1 + dfs(nx, ny, visited)) visited.remove((nx, ny)) return max_path max_length = 0 for i in range(n): for j in range(m): max_length = max(max_length, dfs(i, j, set([(i, j)]))) return max_length"},{"question":"In a faraway kingdom called Arrayland, the citizens are known for their love of arrays. However, they have recently encountered a problem with their favorite pastime of playing with arrays. Given an array of integers, they want to determine the maximum possible sum of any contiguous subarray of the given array. Formally, you are given an array of integers A of length N. You need to find the maximum sum of any contiguous subarray of A. -----Input----- - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer N, the size of the array. - The second line of each test case contains N space-separated integers of array A. -----Output----- For each test case, print a single line containing one integer ― the maximum sum of any contiguous subarray. -----Constraints----- - 1 le T le 1,000 - 1 le N le 100,000 - -10^6 le A[i] le 10^6 -----Subtasks----- Subtask #1 (100 points): original constraints -----Example Input----- 3 4 1 -2 3 5 5 -1 -2 -3 -4 -5 3 2 3 -2 -----Example Output----- 8 -1 5 -----Explanation----- Example case 1: The maximum sum of any contiguous subarray is 8 (from subarray [3, 5]). Example case 2: The maximum sum of any contiguous subarray is -1 (from subarray [-1]). Example case 3: The maximum sum of any contiguous subarray is 5 (from subarray [2, 3]).","solution":"def max_subarray_sum(n, array): Returns the maximum sum of any contiguous subarray. Args: n (int): the size of the array. array (list of ints): the array of integers. Returns: int: the maximum sum of any contiguous subarray. max_ending_here = array[0] max_so_far = array[0] for i in range(1, n): max_ending_here = max(array[i], max_ending_here + array[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_test_cases(t, test_cases): Processes multiple test cases. Args: t (int): the number of test cases. test_cases (list of tuples): list of test cases, where each test case is a tuple (n, array). Returns: list: a list containing results for each test case. results = [] for n, array in test_cases: result = max_subarray_sum(n, array) results.append(result) return results"},{"question":"A software company is designing a new messaging feature where users can form chat groups. They need a system that allows forming groups based on a shared interest without creating redundant or cyclic group memberships. Your task is to develop an algorithm that organizes users into groups such that each user belongs to exactly one group and within each group, there’s a shared interest without cycles. Input The first line contains two space-separated integers n and m (2 ≤ n ≤ 105, 1 ≤ m ≤ 3·105) which represent the number of users and the number of interests correspondingly. Each interest connects two users who share this interest. The next m lines contain two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) which represent that user ai and user bi share a common interest. It is guaranteed that each user will have at least one interest in common with at least one other user. No interest appears more than once between the same pair of users. Output If there’s a way to organize the users into non-cyclic groups based on shared interests, print the number of groups followed by the lists of users in each group. Each group should be printed on a new line with the user numbers separated by spaces. If there’s no such way, print the single number 0. Examples Input 6 6 1 2 2 3 3 4 4 5 5 6 1 6 Output 0 Input 6 4 1 2 2 3 4 5 5 6 Output 2 1 2 3 4 5 6","solution":"def find_groups(n, m, interests): from collections import defaultdict, deque # Create an adjacency list adj = defaultdict(list) for a, b in interests: adj[a].append(b) adj[b].append(a) # To keep track of whether a node is part of a group already visited = [False] * (n + 1) def bfs(start): queue = deque([start]) group = [] parent = {start: None} while queue: node = queue.popleft() visited[node] = True group.append(node) for neighbor in adj[node]: if not visited[neighbor]: parent[neighbor] = node queue.append(neighbor) visited[neighbor] = True elif parent[node] != neighbor: return [] # A cycle has been detected return group groups = [] for user in range(1, n + 1): if not visited[user]: group = bfs(user) if not group: return 0, [] groups.append(group) return len(groups), groups"},{"question":"collections.Counter A Counter is a sub-class of the dictionary used to count hashable objects. It\'s an unordered collection where elements are stored as dictionary keys, and their counts are stored as dictionary values. Example >>> from collections import Counter >>> cnt = Counter() >>> cnt.update(\'abcdaab\') >>> cnt Counter({\'a\': 3, \'b\': 2, \'c\': 1, \'d\': 1}) >>> >>> cnt.update({\'a\':1, \'d\':2}) >>> cnt Counter({\'a\': 4, \'d\': 3, \'b\': 2, \'c\': 1}) Task Given a string S, count the frequency of each character in the string using the texttt{Counter} tool in the texttt{collections} module. Return the N most common elements and their counts from the most common to the least. Input Format A single line containing the string textbf{S}. Constraints S has at least N distinct characters. All characters are lower-case. Output Format Print each element and its count in a separate line in the form texttt{(element, count)}. Sample Input bananaapple Sample Output (\'a\', 4) (\'p\', 2) (\'n\', 2) Explanation In the string \\"bananaapple\\", the character \'a\' appears 4 times, \'p\' appears 2 times, and \'n\' appears 2 times. The task is to return the most common elements and their counts.","solution":"from collections import Counter def most_common_elements(S, N): Given a string S, returns the N most common elements and their counts from the most common to the least. Parameters: S (str): The input string. N (int): The number of most common elements to return. Returns: List of tuples: Each tuple contains an element and its count. # Count the frequency of each character in the string cnt = Counter(S) # Get the N most common elements and their counts common_elements = cnt.most_common(N) return common_elements"},{"question":"Given an array of positive integers representing the prices of different items in a store, and a target amount of money you have. The task is to complete the function minItems() which determines the minimum number of items you need to buy to reach or exceed the target amount of money. If it is not possible to reach the target amount, return -1. Example 1: Input: prices = [1, 2, 3, 4, 5] target = 11 Output: 3 Explanation: The minimum number of items required to reach the target amount 11 is 3 (e.g., 5 + 4 + 2). Example 2: Input: prices = [7, 10, 4, 3, 2] target = 10 Output: 1 Explanation: The minimum number of items required to reach the target amount 10 is 1 (e.g., 10). Example 3: Input: prices = [1, 1, 1, 1] target = 7 Output: -1 Explanation: It is not possible to reach the target amount of 7 with the given prices. Your Task: Complete the function minItems() which takes an array of integers prices and an integer target as the input and returns an integer representing the minimum number of items required to reach the target amount. If it is not possible, return -1. Expected Time Complexity: O(N log N) for sorting and O(N) for finding the result. Expected Auxiliary Space: O(1) Constraints: 1 <= prices.length <= 10^3 1 <= prices[i] <= 10^3 1 <= target <= 10^6","solution":"def minItems(prices, target): Determines the minimum number of items needed to reach or exceed the target amount of money. If it is not possible, returns -1. # Sort prices in descending order prices.sort(reverse=True) total = 0 count = 0 for price in prices: total += price count += 1 if total >= target: return count return -1"},{"question":"You are given two strings representing versions of a software in the format \\"X.Y.Z\\" where X, Y, and Z are non-negative integers. You need to compare these versions to determine which one is newer or if they are the same. Write a function to determine whether version1 is newer, older, or the same as version2. If version1 is newer, return \\"version1>version2\\". If version2 is newer, return \\"version1<version2\\". If they are the same, return \\"version1=version2\\". A version \\"X.Y.Z\\" is considered newer than \\"A.B.C\\" if X > A or (X = A and Y > B) or (X = A and Y = B and Z > C). Input: The function will be provided with two string inputs version1 and version2. Output: Return a string indicating the comparison result as mentioned above. SAMPLE INPUT \\"1.2.0\\" \\"1.1.5\\" \\"2.3.4\\" \\"2.3.4\\" \\"1.0.10\\" \\"1.0.2\\" SAMPLE OUTPUT version1>version2 version1=version2 version1>version2","solution":"def compare_versions(version1, version2): Compare two version strings in the format \\"X.Y.Z\\". :param version1: str, version string in the format \\"X.Y.Z\\" :param version2: str, version string in the format \\"X.Y.Z\\" :return: str, comparison result: - \\"version1>version2\\" if version1 is newer, - \\"version1<version2\\" if version1 is older, - \\"version1=version2\\" if both versions are the same. v1_parts = list(map(int, version1.split(\'.\'))) v2_parts = list(map(int, version2.split(\'.\'))) # Compare each part of the version for part1, part2 in zip(v1_parts, v2_parts): if part1 > part2: return \\"version1>version2\\" elif part1 < part2: return \\"version1<version2\\" return \\"version1=version2\\""},{"question":"Given an array of integers, find the maximum number of even numbers that you can select from the array such that no two selected numbers are adjacent in the original array. Input: - First line contains an integer T denoting the number of test cases. - Each test case consists of two lines. First line of each test case contains an integer N denoting the size of the array. - Second line contains N space-separated integers representing the elements of the array. Output: For each test case, output in a new line the maximum number of even numbers that can be selected. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ A[i] ≤ 10^9 SAMPLE INPUT 2 5 1 2 2 3 4 4 4 2 6 8 SAMPLE OUTPUT 2 2 Explanation: Case 1: We can select the first 2 (at index 1) and the 4 (at index 4) to get the maximum number of even numbers, which is 2. Case 2: We can select the 4 (at index 0) and the 6 (at index 2) to get the maximum number of even numbers, which is also 2.","solution":"def max_non_adjacent_evens(arr): Returns the maximum number of non-adjacent even numbers that can be selected from the list. n = len(arr) if n == 0: return 0 if n == 1: return 1 if arr[0] % 2 == 0 else 0 even_count = [0] * n even_count[0] = 1 if arr[0] % 2 == 0 else 0 if arr[1] % 2 == 0: even_count[1] = 1 even_count[1] = max(even_count[1], even_count[0]) for i in range(2, n): if arr[i] % 2 == 0: even_count[i] = max(even_count[i-1], even_count[i-2] + 1) else: even_count[i] = even_count[i-1] return even_count[-1] def solve(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) result = [] index = 1 for _ in range(T): N = int(lines[index]) arr = list(map(int, lines[index + 1].split())) result.append(max_non_adjacent_evens(arr)) index += 2 return result"},{"question":"Given an integer array `arr` and an integer `target`, determine if there are two distinct indices `i` and `j` in the array such that `arr[i] + arr[j] == target`. If such indices exist, return a tuple of the indices `(i, j)` in any order. If no such indices exist, return `null`. Function Signature `def find_pair_with_sum(arr: List[int], target: int) -> Union[Tuple[int, int], None]:` Input - `arr`: A list of integers - `target`: An integer sum to be checked against the pairs Output - A tuple of two distinct indices `(i, j)` such that their values in the array add up to the `target` - `None` if no such pair exists Constraints - The length of `arr` is at least 2 and at most 10^5 - Each element in `arr` is an integer within the range [-10^9, 10^9] - The time complexity of the solution should be better than O(n^2) **Sample Input** `arr = [2, 7, 11, 15]` `target = 9` **Sample Output** `(0, 1)` **Sample Input** `arr = [3, 2, 4]` `target = 6` **Sample Output** `(1, 2)` **Sample Input** `arr = [3, 3]` `target = 6` **Sample Output** `(0, 1)` **Sample Input** `arr = [1, 2, 3, 4, 5]` `target = 10` **Sample Output** `None`","solution":"from typing import List, Tuple, Union def find_pair_with_sum(arr: List[int], target: int) -> Union[Tuple[int, int], None]: Finds two distinct indices i and j in the array such that arr[i] + arr[j] == target. Args: arr: List of integers. target: An integer target sum. Returns: A tuple (i, j) where arr[i] + arr[j] == target, or None if no such pair exists. seen = {} for i, value in enumerate(arr): remaining = target - value if remaining in seen: return (seen[remaining], i) seen[value] = i return None"},{"question":"The kingdom of Arthoria has a unique way of organizing its library. Instead of shelving books alphabetically by title or by the author\'s name, they use a more intricate system based on the \\"popularity index\\" of the books. The popularity index of a book can change over time and affects the book\'s position on the shelf. The Royal Librarian has decided to reorganize the bookshelves in a particular section of the library. The books in this section are initially placed in a list, where each book has an associated popularity index. However, due to budgetary constraints, the librarian can only perform a limited number of operations to sort the books correctly by their popularity index in non-decreasing order. The operation allowed is a \\"bookshelf shift,\\" where the librarian can take a book from any position and place it at the beginning of the list. Given the initial positions of the books and their respective popularity indices, you are to determine the minimum number of \\"bookshelf shifts\\" necessary to sort the books correctly. Input - Line 1: N – The number of books in the list (1 ≤ N ≤ 100) - Line 2: A list of N integers where each integer represents the popularity index of a book. Output - Line 1: The minimum number of \\"bookshelf shifts\\" required to sort the books in non-decreasing order of their popularity indices. Example Input: 5 4 3 2 6 5 Output: 3 Explanation: The sequence of operations to sort the list [4 3 2 6 5] would be: 1. Move the book with index 2 (with popularity 2) to the beginning -> [2 4 3 6 5] 2. Move the book with index 3 (with popularity 3) to the beginning -> [3 2 4 6 5] 3. Move the book with index 4 (with popularity 4) to the beginning -> [4 3 2 6 5] Thus, 3 operations are needed to sort the list in non-decreasing order.","solution":"def min_bookshelf_shifts(N, indices): sorted_indices = sorted(indices) shifts_required = 0 for i in range(N): if indices[i] != sorted_indices[i]: shifts_required += 1 min_index = i for j in range(i + 1, N): if indices[j] < indices[min_index]: min_index = j indices = [indices[min_index]] + indices[:min_index] + indices[min_index + 1:] return shifts_required"},{"question":"Determine if the room dimensions are suitable for conference use. -----Input:----- - First line will contain two integers L and W separated by a space (length and width of the room in meters). -----Output:----- For each testcase, print \'Suitable\' if the room can be used for a conference, otherwise print \'Not Suitable\' without quotes. -----Constraints----- - 1 leq L, W leq 50 -----Suitability Conditions----- - The room is suitable if the area (length * width) is at least 150 square meters. -----Sample Input 1:----- 15 10 -----Sample Output 1:----- Suitable -----Sample Input 2:----- 10 10 -----Sample Output 2:----- Not Suitable","solution":"def is_suitable_for_conference(L, W): Returns whether the room is suitable for conference use. A room is suitable if its area is at least 150 square meters. Parameters: L (int): Length of the room in meters. W (int): Width of the room in meters. Returns: str: \'Suitable\' if the room is suitable, \'Not Suitable\' otherwise. if L * W >= 150: return \'Suitable\' else: return \'Not Suitable\'"},{"question":"Given an array arr[] consisting of distinct integers, write a function to find the largest subset of the array such that every pair (x, y) in the subset satisfies (y % x == 0). Example 1: Input: N = 3 arr[] = {1, 3, 6} Output: 3 Explanation: The largest subset is {1, 3, 6}. Example 2: Input: N = 5 arr[] = {1, 2, 3, 8, 24} Output: 4 Explanation: The largest subset is {1, 2, 8, 24}. Your Task: You don\'t need to read input or print anything. Your task is to complete the function largestDivisibleSubset() which takes an array of integers arr[] and an integer N as input parameters and returns the size of the largest subset where for every pair (x, y), (y%x == 0). Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 500 1 ≤ arr[i] ≤ 10^9","solution":"def largestDivisibleSubset(arr, N): if N == 0: return 0 arr.sort() dp = [1] * N max_subset_size = 1 for i in range(1, N): for j in range(i): if arr[i] % arr[j] == 0: dp[i] = max(dp[i], dp[j] + 1) max_subset_size = max(max_subset_size, dp[i]) return max_subset_size"},{"question":"As a system administrator, you often have to allocate resources efficiently between multiple servers and tasks. To simulate such a scenario, consider the following problem: You are given n tasks, each with a start time and end time. You also have k servers available to process these tasks. Each server can handle only one task at a time. Your job is to determine if it is possible to assign all tasks to the servers without any overlap on the same server. Thus, the allocation round is based on the following setup: - Each task is represented by a pair (start_i, end_i) where 0 leq start_i < end_i leq 10^6. - The input consists of the number of tasks n (1 ≤ n ≤ 10^5) and the number of servers k (1 ≤ k ≤ 10^5), followed by n lines, each containing two integers representing the start time and end time of a task. Your task is to write a program that determines if it\'s possible to allocate all tasks to the available servers without overlap. -----Input----- The input contains exactly n + 1 lines: - The first line contains two integers, n and k. - Each of the following n lines contains two integers start_i and end_i. -----Output----- The output should be a single word: \\"YES\\" if it is possible to allocate all tasks without overlap on the same server, or \\"NO\\" otherwise. -----Examples----- Sample Input 1: 3 2 1 3 2 5 4 6 Sample Output 1: YES Sample Input 2: 3 1 1 4 2 5 6 8 Sample Output 2: NO Note: - In the first example, it\'s possible to allocate tasks as follows: [1, 3] to the first server, [2, 5] to the second server, and [4, 6] back to the first server. - In the second example, there is only one server. The tasks [1, 4] and [2, 5] overlap, making it impossible to allocate all tasks to the single server.","solution":"def can_allocate_tasks(n, k, tasks): Determines if it is possible to allocate all the tasks to k servers without overlap. Parameters: n (int): Number of tasks k (int): Number of servers tasks (list of tuples): Each tuple contains two integers (start, end) representing the start and end times of a task Returns: str: \\"YES\\" if allocation is possible, otherwise \\"NO\\" if k >= n: return \\"YES\\" # Sort tasks by start time and then by end time tasks.sort(key=lambda x: (x[0], x[1])) # Min-heap to keep track of server end times import heapq min_heap = [] for start, end in tasks: if min_heap and min_heap[0] <= start: heapq.heappop(min_heap) # Remove the task that got freed up heapq.heappush(min_heap, end) if len(min_heap) > k: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of events in the form of a string array where each event is either \\"start\\" or \\"end\\". Each \\"start\\" correlates with an \\"end\\" indicating that an event has ended. Find if the sequence of events is valid. A sequence of events is valid if every \\"start\\" has a corresponding \\"end\\" in the correct order and there are no unmatched \\"end\\" events. Return `true` if the events are valid and `false` otherwise. Example 1: Input: [\\"start\\", \\"start\\", \\"end\\", \\"end\\"] Output: true Explanation: There are two \\"start\\" events first and both of them have their corresponding \\"end\\" events later. Example 2: Input: [\\"start\\", \\"start\\", \\"end\\"] Output: false Explanation: There is one \\"start\\" event that doesn\'t have a corresponding \\"end\\" event. Example 3: Input: [\\"end\\", \\"start\\", \\"end\\"] Output: false Explanation: There is an unmatched \\"end\\" event at the beginning. Example 4: Input: [\\"start\\", \\"end\\", \\"start\\", \\"end\\"] Output: true Note: - 0 <= events.length <= 10000 - events[i] will be either \\"start\\" or \\"end\\"","solution":"def is_valid_event_sequence(events): Determines if the sequence of events is valid. A sequence of events is valid if every \\"start\\" has a corresponding \\"end\\" in the correct order and there are no unmatched \\"end\\" events. :param events: List of event strings (\\"start\\" or \\"end\\") :return: True if the event sequence is valid, False otherwise count = 0 for event in events: if event == \\"start\\": count += 1 elif event == \\"end\\": count -= 1 if count < 0: return False # More \\"end\\" events than \\"start\\" events at any point return count == 0"},{"question":"You have a number of candies arranged in a straight line, each with a certain amount of sweetness. You want to distribute these candies among your friends such that the sum of sweetness each friend receives is as equal as possible. Given an array of integers where each integer represents the sweetness of a candy, determine the minimum possible difference in sweetness between the friend receiving the most sweetness and the friend receiving the least sweetness. Input: Each test contains one or more test cases. The first line contains a single integer t (1 ≤ t ≤ 10^3) — the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 10^3) — the number of candies. The second line of each test case contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^4) — the sweetness of each candy. The third line of each test case contains a single integer k (1 ≤ k ≤ n) — the number of friends. Output: For each test case, output the minimum possible difference between the maximum and minimum sweetness received by any friend. Examples: Input: 2 6 10 20 30 40 50 60 3 5 5 5 5 5 5 4 Output: 20 0 Explanation: In the first test case, the array of sweetness is [10, 20, 30, 40, 50, 60] and there are 3 friends. One optimal way to distribute candies would be [10, 50], [20, 40], [30, 60]. The sums of these distributions are [60, 60, 60], so the minimum possible difference is 0. In the second test case, with an array of [5, 5, 5, 5, 5] and 4 friends, the optimal way is to distribute [5], [5], [5], [5, 5]. The sums of these distributions are [5, 5, 5, 10], so the minimum possible difference is 5.","solution":"def min_difference_sweetness(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] sweetness = sorted(test_cases[i][1]) k = test_cases[i][2] if k == 1: results.append(sweetness[-1] - sweetness[0]) continue min_diff = float(\'inf\') for j in range(n - k + 1): current_diff = sweetness[j + k - 1] - sweetness[j] min_diff = min(min_diff, current_diff) results.append(min_diff) return results"},{"question":"Write a program to help a historian organize a collection of historical events based on their years. Each event is represented by its year and description. The goal is to sort and then display the events in chronological order. Input: The first line contains a single integer, N, which represents the number of events. The next N lines each contain a year (an integer) followed by a description (a string with no more than 100 characters). Output: Print the events sorted by year in ascending order. If two events occurred in the same year, they should be ordered as they appear in the input. Constraints: 1 ≤ N ≤ 1000 -10^5 ≤ Year ≤ 10^5 Example: Input: 4 1945 End of World War II 1969 First man on the moon 1776 Declaration of Independence 2001 Wikipedia is launched Output: 1776 Declaration of Independence 1945 End of World War II 1969 First man on the moon 2001 Wikipedia is launched","solution":"def sort_events(events): Sorts a list of historical events based on their years in ascending order. Args: events (list of tuples): List of events where each event is represented as a tuple (year, description). Returns: list of tuples: Sorted list of events based on years. return sorted(events, key=lambda x: x[0]) def read_input(n, input_lines): Reads input lines and converts them into a list of tuples of (year, description). Args: n (int): Number of events. input_lines (list of str): List of event descriptions in the form \'year description\'. Returns: list of tuples: List of events represented as (year, description). events = [] for line in input_lines: parts = line.split(\\" \\", 1) year = int(parts[0]) description = parts[1] events.append((year, description)) return events if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split(\\"n\\") n = int(data[0]) input_lines = data[1:] events = read_input(n, input_lines) sorted_events = sort_events(events) for event in sorted_events: print(f\\"{event[0]} {event[1]}\\")"},{"question":"You are given a string S and a set of Q queries. Each query consists of two integers x and y which represent a range (inclusive). For each query, return the length of the longest substring within the range that contains no repeating characters. Input Format The first line contains the string S. The second line contains the integer Q, the number of queries. Q lines follow, each containing two integers (x and y) representing the start and end indices (inclusive) of the query. Constraints 1 ≤ |S| ≤ 100,000 (|S| represents the length of the string S) 1 ≤ Q ≤ 50,000 0 ≤ x ≤ y < |S| Output Format For each query, output the length of the longest substring with no repeating characters in the specified range. Sample Input 0 abbabcbb 3 0 3 2 5 1 7 Sample Output 0 2 2 3 Explanation 0 For the query (0, 3), the substring is \\"abba\\", the longest substring without repeating characters is \\"ab\\" or \\"ba\\" with length 2. For the query (2, 5), the substring is \\"babc\\", the longest substring without repeating characters is \\"abc\\" with length 3. For the query (1, 7), the substring is \\"bbabcbb\\", the longest substring without repeating characters is \\"abc\\" with length 3.","solution":"def length_of_longest_substring(s, queries): For each query, return the length of the longest substring within the range that contains no repeating characters. Args: s (str): The string S. queries (list of tuples): List of queries with tuples (x, y) representing the start and end indices (inclusive) of the query. Returns: list of int: List of lengths of the longest substrings with no repeating characters for each query. def find_longest_unique_substring(s): start = 0 max_length = 0 used_chars = {} for end, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: max_length = max(max_length, end - start + 1) used_chars[char] = end return max_length results = [] for x, y in queries: substring = s[x:y+1] results.append(find_longest_unique_substring(substring)) return results"},{"question":"Given an array `c_1, c_2, ..., c_m` representing the maximum capacities of containers, and a series of `k` operations, you need to handle two types of operations: 1. `1 p q` - Transfer water from container `c_p` to container `c_q` until either container `c_p` is empty or container `c_q` is full. 2. `2 z` - Output the current amount of water in container `c_z`. -----Input----- The first line of the input contains an integer `u` (`1 <= u <= 1000`) — the number of test cases. The first line of each test case contains two integers `m` and `k` (`1 <= m, k <= 2 * 10^5`) — the number of containers and the number of operations, respectively. The second line of each test case contains `m` integers representing the maximum capacities of the containers, `c_1, c_2, ..., c_m` (`1 <= c_i <= 10^9`). The next line of each test case contains `m` integers representing the initial amounts of water in the containers, `w_1, w_2, ..., w_m` (`0 <= w_i <= c_i`). The next `k` lines of each test case are of two forms: - `1 p q` (`1 <= p, q <= m`) — move water from container `p` to container `q`. - `2 z` (`1 <= z <= m`) — query the amount of water in container `z`. There is at least one query of the second type in each test case. The sum of `m` over all test cases does not exceed `2 * 10^5`. The sum of `k` over all test cases does not exceed `2 * 10^5`. -----Output----- For each test case, output the answers to the queries of the second type, in the order they are given. -----Examples----- Input 2 3 5 10 10 10 5 3 2 1 1 2 2 2 1 2 3 2 3 2 1 2 4 7 3 12 6 8 9 15 10 11 6 5 4 3 8 1 0 1 1 4 2 4 2 6 Output 8 5 5 7 3 -----Note----- In the first test case, the process is as follows: - Initial state: `[5, 3, 2]` with capacities `[10, 10, 10]`. - Operation `1 1 2`: Transfer all water from container `1` to container `2` resulting in `[0, 8, 2]`. - Query `2 2`: Output `8`. - Operation `1 2 3`: Transfer all water from container `2` to container `3` resulting in `[0, 0, 10]`. - Query `2 3`: Output `10`. - Query `2 1`: Output `0`. In the second test case, the process is as follows: - Initial state: `[6, 5, 4, 3, 8, 1, 0]` with capacities `[12, 6, 8, 9, 15, 10, 11]`. - Operation `1 1 4`: Transfer enough water from container `1` to container `4` resulting in `[3, 5, 4, 9, 8, 1, 0]`. - Query `2 4`: Output `9`. - Query `2 6`: Output `1`.","solution":"def manage_containers(u, test_cases): results = [] for test_case in test_cases: m, k, capacities, water, operations = test_case for operation in operations: if operation[0] == 1: p, q = operation[1] - 1, operation[2] - 1 transferable_amount = min(water[p], capacities[q] - water[q]) water[p] -= transferable_amount water[q] += transferable_amount elif operation[0] == 2: z = operation[1] - 1 results.append(water[z]) return results"},{"question":"In a rectangular park, there are several paths in the form of a grid. Each path can have a set of benches evenly spaced along its length. Each bench can either be empty (denoted by 0) or occupied (denoted by 1). Assume the park is represented by an m x n binary matrix (grid) where each cell represents a section of the path and contains either a 0 or 1 value. Your task is to write a function that will determine the maximum number of consecutive empty benches (0s) that can be found in any single path (either a row or a column) in the park. Implement a function `max_consecutive_empty_benches(grid: List[List[int]]) -> int` that returns an integer representing the maximum number of consecutive empty benches in any row or column of the grid. # Input - **grid**: A list of lists of integers of size m x n (1 ≤ m, n ≤ 300,000), where each integer is either 0 or 1. # Output - An integer representing the maximum number of consecutive empty benches in any row or column. # Example ```python # Example 1 grid = [ [1, 0, 0, 1], [0, 1, 1, 0], [1, 1, 0, 0] ] print(max_consecutive_empty_benches(grid)) # Output: 2 # Example 2 grid = [ [1, 1, 1, 1], [0, 0, 0, 0], [1, 0, 1, 1], [0, 0, 1, 1] ] print(max_consecutive_empty_benches(grid)) # Output: 4 ``` In the first example, the row or column with the most consecutive empty benches is `[0, 0]` which has a length of 2. In the second example, the maximum number of consecutive empty benches is in the second row `[0, 0, 0, 0]`, which has a length of 4.","solution":"def max_consecutive_empty_benches(grid): def max_consecutive_zeros(arr): max_zeros = 0 count = 0 for num in arr: if num == 0: count += 1 max_zeros = max(max_zeros, count) else: count = 0 return max_zeros max_zeros_in_rows = max(max_consecutive_zeros(row) for row in grid) max_zeros_in_columns = max(max_consecutive_zeros(col) for col in zip(*grid)) return max(max_zeros_in_rows, max_zeros_in_columns)"},{"question":"Given an array of integers and an integer k, rotate the array to the right by k steps, where k is non-negative. While rotating the array, elements should wrap around to the beginning of the array. Implement a function to achieve this. INPUT The first line contains the number of elements n in the array. The second line contains an array of n integers. The third line contains the integer k, which is the number of steps to rotate the array. OUTPUT Output the rotated array with elements separated by a single space. SAMPLE INPUT 7 1 2 3 4 5 6 7 3 SAMPLE OUTPUT 5 6 7 1 2 3 4","solution":"def rotate_array(arr, k): Rotates the array to the right by k steps. Args: - arr: list of integers - k: non-negative integer, number of steps to rotate Returns: - list of integers, rotated array n = len(arr) k = k % n # In case k is greater than array length return arr[-k:] + arr[:-k]"},{"question":"Snehasis has a habit of organizing books on his bookshelf according to their height. After he finished organizing, he realized it could be boring to always read books in the same sequence. Thus, he decided to shuffle the bookshelf to create new reading orders, but he wants his bookshelf to retain some organization. Given an array of integers, where each integer represents the height of a book, write a program to find the next permutation of this array. The permutation should be the lexicographically smallest permutation that is greater than the current permutation. If such a permutation does not exist, the function should return the smallest permutation (i.e., sort in ascending order). -----Note:----- - Your solution should make the smallest change possible, i.e., only one swap or as few as necessary to generate the next permutation. -----Input:----- - The first line contains a single integer, T, the number of test cases. - Each of the next T lines contains a sequence of space-separated integers representing the heights of books on Snehasis\'s bookshelf. -----Output:----- For each test case, output a single line of space-separated integers representing the next permutation. If the current permutation is the highest possible, then output the smallest permutation. -----Constraints:----- - 1 leq T leq 1000 - 1 leq text{Length of Array} leq 100 - 1 leq text{Height} leq 10^4 -----Sample Input:----- 3 1 2 3 3 2 1 1 1 5 -----Sample Output:----- 1 3 2 1 2 3 1 5 1 -----Explanation:----- Sample Case - 1: For the input array {1, 2, 3}, the next permutation is {1, 3, 2} as it is the next lexicographically greater permutation. Sample Case - 2: For the input array {3, 2, 1}, the highest possible permutation, the function returns {1, 2, 3}, the lowest/first permutation. Sample Case - 3: For the input array {1, 1, 5}, the next permutation is {1, 5, 1}.","solution":"def next_permutation(nums): Modify list nums to its next permutation in-place. n = len(nums) # Step 1: Find the largest index k such that nums[k] < nums[k + 1]. # If no such index exists, the permutation is sorted in descending order, # we simply reverse it to the smallest permutation. k = n - 2 while k >= 0 and nums[k] >= nums[k + 1]: k -= 1 if k < 0: nums.reverse() else: # Step 2: Find the largest index l greater than k such that nums[k] < nums[l] l = n - 1 while l > k and nums[k] >= nums[l]: l -= 1 # Step 3: Swap nums[k] and nums[l] nums[k], nums[l] = nums[l], nums[k] # Step 4: Reverse the sequence from nums[k + 1] to the end nums[k + 1:] = reversed(nums[k + 1:]) return nums def process_test_cases(T, cases): results = [] for case in cases: result = next_permutation(case) results.append(result) return results"},{"question":"Alice is a visual artist creating a series of geometric paintings. Each painting consists of a grid of cells, some of which are colored. Alice starts with a blank grid of size N times N and colors a series of cells in a single column. However, Alice\'s goal is to ensure that the total number of colored cells across all rows is evenly distributed. This means that no two rows should have a difference in the number of colored cells greater than 1. Write a program to help Alice determine the maximum number of cells she can color in the grid while maintaining an even distribution. -----Input----- The input contains a single integer N (1 le N le 10^9). -----Output----- The output should contain a single integer, the maximum number of cells Alice can color in the N times N grid. -----Examples----- Sample Input 1: 3 Sample Output 1: 3 Sample Input 2: 5 Sample Output 2: 5","solution":"def max_colored_cells(N): Determine the maximum number of cells that can be colored in an N x N grid while maintaining an even distribution of colored cells across all rows. :param N: Size of the grid (N x N) :return: Maximum number of cells that can be colored return N"},{"question":"You are designing a basic customer management system for a small retail business. Write a function `update_customer_data(customers, transactions)` that takes two arguments: 1. `customers`: a dictionary where the key is the customer\'s ID (a string) and the value is another dictionary with keys `\'name\'` (a string) and `\'total_spent\'` (a float representing the total amount the customer has spent at the store). 2. `transactions`: a list of dictionaries, where each dictionary contains `\'customer_id\'` (a string) and `\'amount\'` (a float representing the amount of the transaction). The function should update the `customers` dictionary by adding the transaction amounts to the appropriate customer\'s total spent. If a transaction contains a customer ID not present in the customers dictionary, that transaction should be ignored. For example: ```python customers = { \\"C001\\": {\\"name\\": \\"Alice\\", \\"total_spent\\": 120.0}, \\"C002\\": {\\"name\\": \\"Bob\\", \\"total_spent\\": 75.5} } transactions = [ {\\"customer_id\\": \\"C001\\", \\"amount\\": 30.0}, {\\"customer_id\\": \\"C003\\", \\"amount\\": 12.5}, {\\"customer_id\\": \\"C002\\", \\"amount\\": 20.0} ] update_customer_data(customers, transactions) ``` After running the function, the `customers` dictionary should be updated to: ```python { \\"C001\\": {\\"name\\": \\"Alice\\", \\"total_spent\\": 150.0}, \\"C002\\": {\\"name\\": \\"Bob\\", \\"total_spent\\": 95.5} } ```","solution":"def update_customer_data(customers, transactions): Updates the customers dictionary by adding transaction amounts to the appropriate customer\'s total spent. Parameters: customers (dict): A dictionary with customer IDs as keys and another dictionary as value containing \'name\' and \'total_spent\'. transactions (list): A list of dictionaries containing \'customer_id\' and \'amount\' of transactions. for transaction in transactions: customer_id = transaction[\\"customer_id\\"] amount = transaction[\\"amount\\"] if customer_id in customers: customers[customer_id][\\"total_spent\\"] += amount"},{"question":"# Matrix Transpose Given a matrix (a list of lists) of integers, write a function to return the transpose of the matrix. The transpose of a matrix is obtained by swapping its rows and columns. For example: ```python matrix_transpose([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # Should return [[1, 4, 7], [2, 5, 8], [3, 6, 9]] matrix_transpose([[1, 2, 3], [4, 5, 6]]) # Should return [[1, 4], [2, 5], [3, 6]] matrix_transpose([[1]]) # Should return [[1]] ```","solution":"def matrix_transpose(matrix): Returns the transpose of the given matrix. :param matrix: List of lists, where each sub-list represents a row in the matrix. :return: List of lists, where each sub-list represents a row in the transposed matrix. return [list(row) for row in zip(*matrix)]"},{"question":"A company\'s IT department is upgrading their computer systems, and they need to install a series of software updates on each machine. Each software update takes a certain amount of time to install, and no two updates can be installed simultaneously. However, any update can be installed at any time, provided the previous updates have been completed. Your task is to determine the minimum time required to complete all the updates on a computer given the constraints. Input The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the number of updates that need to be installed on the computer. The next N lines each contain a single integer indicating the time (in minutes) it takes to install each update. Output For each test case, output a single integer denoting the minimum time required to complete all the updates. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^3 1 ≤ time per update ≤ 10^3 Example Input: 2 3 10 15 20 4 5 10 20 25 Output: 45 60 Explanation In the first test case, the updates will be installed in sequence, so the total time required is 10 + 15 + 20 = 45 minutes. In the second test case, the updates will be installed in sequence, so the total time required is 5 + 10 + 20 + 25 = 60 minutes.","solution":"def minimum_time_to_complete_updates(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] update_times = test_cases[i][1] total_time = sum(update_times) results.append(total_time) return results"},{"question":"In this problem, you are provided with an array of integers. You need to process a number of queries. Each query consists of a single integer x, and for each query, you have to determine the number of elements in the array that are greater than or equal to x. Input The first line contains an integer n - the number of elements in the array. The second line contains n integers - the elements of the array. The third line contains an integer q - the number of queries. The next q lines each contain an integer x. Output For each query, output the number of elements in the array that are greater than or equal to x on a new line. Constraints 1 ≤ n ≤ 100000 1 ≤ q ≤ 100000 -100000 ≤ array elements ≤ 100000 -100000 ≤ x ≤ 100000 SAMPLE INPUT 5 1 3 4 2 5 3 3 4 6 SAMPLE OUTPUT 3 2 0","solution":"def count_elements_greater_or_equal(arr, queries): Returns a list where each element is the count of numbers in the array that are greater than or equal to the corresponding query. # Sort the array beforehand arr.sort() result = [] n = len(arr) for x in queries: # Binary search to find the first position where arr[pos] >= x left, right = 0, n while left < right: mid = (left + right) // 2 if arr[mid] >= x: right = mid else: left = mid + 1 # The count is the difference between the array length and position found result.append(n - left) return result"},{"question":"Consider an image represented as a matrix of integers where each element represents the grayscale value of a pixel. The task is to rotate the image 90 degrees in a clockwise direction. Write a function `rotate_image` that takes a square matrix `matrix` (list of lists) where each element is an integer representing a pixel value, and returns a new matrix which is the input matrix rotated 90 degrees clockwise. **Function Signature**: ```python def rotate_image(matrix: List[List[int]]) -> List[List[int]]: ``` **Input**: - `matrix` (List of Lists of integers): A square matrix (n x n) where 1 <= n <= 1000 and each integer is between 0 and 255 inclusive. **Output**: - A List of Lists of integers representing the rotated matrix. **Example**: Input: ``` matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ``` result = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` **Explanation**: After rotating the input matrix 90 degrees clockwise, the element that was at the bottom-left corner moves to the top-left corner, the element that was at the top-left corner moves to the top-right corner, and so forth. You may assume that the inputted square matrix will always contain valid integers and the square matrix will not be empty.","solution":"from typing import List def rotate_image(matrix: List[List[int]]) -> List[List[int]]: Rotates the input square matrix 90 degrees in the clockwise direction. n = len(matrix) result = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): result[j][n - i - 1] = matrix[i][j] return result"},{"question":"A space exploration company stores various artifacts collected from different planets. Each artifact has a distinct value, and the company maintains a log of these values in a database. However, due to a malfunction, the database was corrupted, and some entries were lost. The company now seeks help to recover the sum of artifact values within a specific range of days. The database contains an array representing the daily records of artifacts\' values. You are required to write a program that reconstructs the total value of artifacts collected within a certain range of days, given the starting and ending days. If any entry within the specified range is corrupted (i.e., missing or represented as `-1`), the program should assume the value for that day to be `0`. -----Input----- The first line contains two integers n and q (1 le n, q le 100,000) — the number of days recorded and the number of queries respectively. The second line contains n integers v_1, v_2, dots, v_n (-1 le v_i le 1,000), where v_i is the recorded value of artifacts on the i-th day. Each of the next q lines contains two integers l and r (1 le l le r le n) — the starting and ending days (inclusive) for each query. -----Output----- For each query, print the total value of artifacts collected from day l to day r, assuming corrupted entries (i.e., `-1`) are valued at 0. -----Examples----- Input 5 3 100 200 -1 50 -1 1 3 2 5 1 5 Output 300 250 350 Input 4 2 -1 -1 -1 -1 1 4 2 3 Output 0 0 Input 7 1 -1 200 300 -1 100 50 -1 3 6 Output 450 -----Note----- In the first example, for query 1 (days 1 to 3), summing the values `[100, 200, -1]` results in `100 + 200 + 0 = 300`. For query 2 (days 2 to 5), summing the values `[200, -1, 50, -1]` results in `200 + 0 + 50 + 0 = 250`. For query 3 (days 1 to 5), summing the values `[100, 200, -1, 50, -1]` results in `100 + 200 + 0 + 50 + 0 = 350`. In the second example, since all entries are `-1`, all queries result in `0`.","solution":"def artifact_sum(n, q, values, queries): Given the number of days recorded, the number of queries, the values of artifacts on each day, and a list of queries, returns the total value of artifacts collected for each query range. If any entry is corrupted (i.e., -1), assume its value to be 0. :param n: Number of days recorded :param q: Number of queries :param values: List of integer values, where -1 indicates a corrupted entry :param queries: List of tuples, each containing two integers representing range [l, r] :returns: List of sums for each query results = [] for l, r in queries: total = 0 for i in range(l - 1, r): if values[i] != -1: total += values[i] results.append(total) return results # Example call: # n, q = 5, 3 # values = [100, 200, -1, 50, -1] # queries = [(1, 3), (2, 5), (1, 5)] # print(artifact_sum(n, q, values, queries)) -> [300, 250, 350]"},{"question":"Write a function `find_duplicate(nums)` that receives an array of integers (`nums`) as input and returns the first duplicate number from the array. A duplicate number is one for which there exists another identical number earlier in the array. If there are no duplicates, the function should return `None`. # Examples: - `find_duplicate([1, 2, 3, 4, 5, 3, 6])` should return `3` since 3 is the first number that repeats. - `find_duplicate([1, 2, 3, 4, 5])` should return `None` since there are no repeating numbers. - `find_duplicate([5, 1, 2, 3, 5])` should return `5` as it is the first duplicate, appearing twice in the array. # Constraints: - The function should handle empty arrays and arrays with just one element by returning `None` in these cases. - The input array can contain both positive and negative integers.","solution":"def find_duplicate(nums): Returns the first duplicate number from the array. :param nums: List of integers. :return: The first duplicate number, or None if there are no duplicates. seen = set() for num in nums: if num in seen: return num seen.add(num) return None"},{"question":"Peter has a collection of N books placed on a shelf. Each book has a unique width. He wants to evenly distribute the books across two shelves such that the width difference between the two shelves is minimized. You are required to help Peter by determining the minimum possible difference in total width between the two shelves when the books are distributed optimally. Input: First line contains the integer N, denoting the number of books. Next line contains N single space separated positive integers, each representing the width of a book. Output: Print the minimum possible difference in total width between the two shelves. Constraints: 1 ≤ N ≤ 20 1 ≤ Width of each book ≤ 100 Sample Input: 4 10 20 15 25 Sample Output: 0 Explanation The optimal way to place the books is [10, 25] on one shelf and [20, 15] on the other. The total width of books on both shelves is 35, hence the difference is 0.","solution":"def min_width_difference(n, widths): Determine the minimum possible difference in total width between two shelves when N books are distributed optimally across them. Parameters: n (int): the number of books widths (list of int): the widths of the books Returns: int: the minimum possible difference in total width between the two shelves from itertools import combinations total_width = sum(widths) min_diff = float(\'inf\') # Generate all possible subsets (combinations) for one of the shelves for i in range(n + 1): for combo in combinations(widths, i): shelf1_width = sum(combo) shelf2_width = total_width - shelf1_width min_diff = min(min_diff, abs(shelf1_width - shelf2_width)) return min_diff # Sample Input and Output if __name__ == \\"__main__\\": n = 4 widths = [10, 20, 15, 25] result = min_width_difference(n, widths) print(result) # Output: 0"},{"question":"You are given a list of integers `nums` and an integer `target`. Your task is to write a function that returns the indices of the two numbers such that they add up to `target`. You should assume that each input would have exactly one solution, and you may not use the same element twice. Here are the detailed requirements: - Input: an array of integers `nums` and an integer `target`. - Output: an array of two integers, representing the indices of the two numbers that add up to `target`. Example: ```plaintext nums = [2, 7, 11, 15] target = 9 ``` Output: ```plaintext [0, 1] ``` Explanation: Because `nums[0] + nums[1] == 9`, we return `[0, 1]`. Note: - The returned array should be in ascending order. - You can assume that each input would have exactly one solution. - The function should aim for optimal time complexity. Function Signature: ```python def two_sum(nums: List[int], target: int) -> List[int]: pass ```","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: Returns the indices of the two numbers such that they add up to target. Args: nums (List[int]): The list of integers. target (int): The target sum. Returns: List[int]: List containing the indices of the two numbers. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return sorted([num_to_index[complement], i]) num_to_index[num] = i"},{"question":"Given a string `s` consisting of digits from \'0\' to \'9\', you are allowed to remove one digit from the string to maximize the numerical value of the resulting string. Write a function `maximize_number` that takes a string `s` as input and returns the string representing the maximum possible numerical value that can be obtained by removing exactly one digit from the original string. -----Input----- - A single string `s` containing digits \'0\' through \'9\' (1 ≤ |s| ≤ 100). -----Output----- - A string representing the maximum possible numerical value after removing one digit. -----Constraints----- - The input string will always contain at least one digit and at most 100 digits. - The digits will be in the range \'0\' to \'9\'. -----Example Input----- \\"1234\\" -----Example Output----- \\"234\\" -----Example Input----- \\"54321\\" -----Example Output----- \\"5432\\" -----Example Input----- \\"10234\\" -----Example Output----- \\"1234\\" -----Explanation----- In the first example, removing the digit \'1\' from \\"1234\\" results in the highest possible value \\"234\\". In the second example, removing the digit \'1\' from \\"54321\\" results in the highest possible value \\"5432\\". In the third example, removing the digit \'0\' from \\"10234\\" results in the highest possible value \\"1234\\". Here, removing any other digit would result in a smaller numerical value.","solution":"def maximize_number(s): Return the string representing the maximum possible numerical value after removing one digit. max_value = \\"\\" for i in range(len(s)): current_value = s[:i] + s[i+1:] if current_value > max_value: max_value = current_value return max_value"},{"question":"A university has a grid-shaped campus, where each cell of the grid represents a location that students need to walk on. There are n rows and m columns in the grid. Some cells contain buildings and cannot be walked through, marked as `#`. The rest of the cells are walkable, marked as `.`. Students always want to take the shortest path from one walkable cell to another. Given multiple queries, each query consists of the coordinates of two cells (x_1, y_1) and (x_2, y_2) in the grid, you need to find the length of the shortest path between these two cells. If no path exists, output `-1`. Your task is to help determine the shortest paths for the various queries. **Input:** - The first line contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. - Then follow n lines each containing m characters (`#` or `.`). This is the description of the grid. - The next line contains a single integer q (1 le q le 1000) — the number of queries. - Each of the next q lines contains four integers x_1, y_1, x_2, and y_2 (1 le x_1, y_1, x_2, y_2 le 1000) — the coordinates for each query. **Output:** Print q lines. Each line should contain an integer representing the length of the shortest path for the corresponding query, or `-1` if no such path exists. **Example:** **Input:** ``` 5 5 ..... .#.#. ..... .#.#. ..... 3 1 1 5 5 1 1 3 3 2 2 4 4 ``` **Output:** ``` 8 4 -1 ``` **Explanation:** For the first query, the shortest path from (1,1) to (5,5) is highlighted in one of the possible paths. For the second query, the direct path is (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) which is of length 4. For the third query, there is no walkable path from (2,2) to (4,4) due to the intervening `#` cells, hence `-1`.","solution":"from collections import deque def bfs_shortest_path(grid, start, end, n, m): queue = deque([start]) visited = set([start]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] distance = {start: 0} while queue: current = queue.popleft() if current == end: return distance[current] for d in directions: neighbor = (current[0] + d[0], current[1] + d[1]) if 0 <= neighbor[0] < n and 0 <= neighbor[1] < m and neighbor not in visited and grid[neighbor[0]][neighbor[1]] == \'.\': queue.append(neighbor) visited.add(neighbor) distance[neighbor] = distance[current] + 1 return -1 def shortest_paths(n, m, grid, queries): results = [] for x1, y1, x2, y2 in queries: start = (x1 - 1, y1 - 1) end = (x2 - 1, y2 - 1) if grid[start[0]][start[1]] == \'#\' or grid[end[0]][end[1]] == \'#\': results.append(-1) else: results.append(bfs_shortest_path(grid, start, end, n, m)) return results"},{"question":"unique The unique tool returns the sorted unique elements of an array. import numpy array = numpy.array([1, 2, 1, 3, 2, 3]) print numpy.unique(array) #Output : [1 2 3] Task You are given a 1-D array. Your task is to print all unique elements sorted in ascending order of that array using the numpy.unique tool. Input Format A single line of space-separated integers. Constraints 1leq len(array)leq1000 0leq array[i]leq1000 Output Format Print the unique elements of the array sorted in ascending order. Sample Input 0 2 3 2 1 3 4 5 1 5 Sample Output 0 [1 2 3 4 5] Explanation 0 The unique elements of the input array when sorted in ascending order are: [1 2 3 4 5]","solution":"import numpy def get_unique_sorted_elements(array): Returns the sorted unique elements of a given array using numpy.unique. Args: array (list): A list of integers. Returns: np.ndarray: A numpy array of sorted unique integers. return numpy.unique(array) # Example usage: # array = numpy.array([2, 3, 2, 1, 3, 4, 5, 1, 5]) # print(get_unique_sorted_elements(array)) # Output: [1 2 3 4 5]"},{"question":"Given an array of integers `arr[]` and an integer `k`, your task is to find the number of subarrays with exactly `k` distinct integers. A subarray is defined as a contiguous segment of an array. # Example 1: Input: ``` arr[] = {1, 2, 1, 2, 3} k = 2 ``` Output: ``` 7 ``` Explanation: The 7 subarrays with exactly 2 distinct integers are: ``` [1, 2], [2, 1], [1, 2], [2, 1, 2], [1, 2], [2, 3], [2, 1, 2, 3] ``` # Example 2: Input: ``` arr[] = {1, 2, 1, 3, 4} k = 3 ``` Output: ``` 3 ``` Explanation: The 3 subarrays with exactly 3 distinct integers are: ``` [1, 2, 1, 3], [2, 1, 3], [1, 3, 4] ``` # Constraints: - 1 <= arr.length <= 10^5 - 1 <= arr[i], k <= 10^5 # Function Signature: ```python def subarraysWithKDistinct(arr: List[int], k: int) -> int: pass ``` # Your Task: - Implement the function `subarraysWithKDistinct` which takes an array of integers `arr` and an integer `k`, and returns the number of subarrays with exactly `k` distinct integers. - Optimize the solution to run within O(n) time complexity. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n)","solution":"from typing import List import collections def subarraysWithKDistinct(arr: List[int], k: int) -> int: def at_most_k_distinct(arr, k): count = collections.Counter() left = 0 res = 0 for right in range(len(arr)): if count[arr[right]] == 0: k -= 1 count[arr[right]] += 1 while k < 0: count[arr[left]] -= 1 if count[arr[left]] == 0: k += 1 left += 1 res += right - left + 1 return res return at_most_k_distinct(arr, k) - at_most_k_distinct(arr, k - 1)"},{"question":"A robot is navigating a factory floor that is represented as a grid. Each cell in the grid can either be empty space (\'.\') or an obstacle (\'#\'). The robot can move in four directions: up, down, left, or right, but it cannot move diagonally. The robot starts at the top-left corner of the grid (0, 0) and needs to reach the bottom-right corner of the grid (n-1, m-1). Write a program to determine the minimum number of moves required for the robot to reach its destination. If there is no path from the start to the destination, the program should return -1. # Input: The input is a single dataset. Each dataset is formatted as follows: > n m > r(0, 0) r(0, 1) ... r(0, m-1) > r(1, 0) r(1, 1) ... r(1, m-1) > ... > r(n-1, 0) r(n-1, 1) ... r(n-1, m-1) The integers n and m are the dimensions of the grid, where 2 ≤ n, m ≤ 100. Each of the following n lines consists of m characters, each either a \'.\' or \'#\'. The character r(i, j) represents whether the cell at position (i, j) is empty (\'.\') or contains an obstacle (\'#\'). You can assume that both the starting cell (0, 0) and the destination cell (n-1, m-1) are always empty. # Output: For the given dataset, output a single integer representing the minimum number of moves required for the robot to reach the destination, or -1 if there is no possible path. # Example: Input: 4 5 . . . # . . # . # . . # # . . . . . . . Output: 7 # Explanation: The robot can move along the path (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3) -> (3, 4), making a total of 7 moves. # Note: - In the example, the robot avoids obstacles and finds the shortest path to the destination. - If no path exists due to obstacles that completely block the way, the output should be -1.","solution":"from collections import deque def min_moves_to_reach_end(n, m, grid): Function to determine the minimum number of moves required for the robot to reach the destination on the factory floor represented as a grid. If there is no path from the start to the destination, the function returns -1. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Given a string S and a string T, return the minimum window in S which will contain all the characters in T. If there is no such window in S that covers all characters in T, return the empty string \\"\\". Note that if there is such a window, it is guaranteed that there will always be only one unique minimum window in S. # Example: Input: ``` S = \\"ADOBECODEBANC\\" T = \\"ABC\\" ``` Output: ``` \\"BANC\\" ``` Input: ``` S = \\"a\\" T = \\"a\\" ``` Output: ``` \\"a\\" ``` # Constraints: - 1 <= |S|, |T| <= 10^5 - S and T consist of English letters.","solution":"from collections import Counter, defaultdict def min_window(S, T): Returns the minimum window in S which contains all the characters in T. Parameters: S (str): The source string in which to find the window. T (str): The target string containing characters to be matched. Returns: str: The minimum window in S which contains all characters in T, or an empty string if no such window exists. if not S or not T: return \\"\\" dict_t = Counter(T) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = defaultdict(int) ans = float(\'inf\'), None, None while r < len(S): character = S[r] window_counts[character] += 1 if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 while l <= r and formed == required: character = S[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] == float(\'inf\') else S[ans[1]: ans[2] + 1]"},{"question":"You are working on a data compression algorithm and need to implement a simple version of the Run-Length Encoding (RLE) algorithm. Run-Length Encoding is a very basic form of data compression in which consecutive occurrences of the same data value are stored as a single data value and count. For example, in a character stream, the string \\"AAAABBBCCDAA\\" would be encoded as \\"4A3B2C1D2A\\". Your task is to implement the encoding and decoding functions for RLE. The encoding function should take in a string and return its RLE encoded form, and the decoding function should take the RLE encoded string and return its uncompressed form. Input The first input line contains an integer t (1 ≤ t ≤ 100), the number of test cases. The following t lines each contain a single string, which is either uncompressed or RLE encoded. If a string is uncompressed, all characters are uppercase English letters (each string length varies from 1 to 1000). If a string is encoded, the count of characters (1 ≤ count ≤ 999) will precede its corresponding character. Output For each test case, print the corresponding encoded or decoded string. Examples Input ``` 4 AAAABBBCCDAA 4A3B2C1D2A AAAAAAAAAAAAAA 14A ``` Output ``` 4A3B2C1D2A AAAABBBCCDAA 14A AAAAAAAAAAAAAA ```","solution":"def encode_rle(s): if not s: return \\"\\" encoded = [] prev_char = s[0] count = 1 for char in s[1:]: if char == prev_char: count += 1 else: encoded.append(f\\"{count}{prev_char}\\") prev_char = char count = 1 encoded.append(f\\"{count}{prev_char}\\") return \\"\\".join(encoded) def decode_rle(s): if not s: return \\"\\" decoded = [] count = 0 for char in s: if char.isdigit(): count = count * 10 + int(char) else: decoded.append(char * count) count = 0 return \\"\\".join(decoded) def run_rle(test_cases): results = [] for case in test_cases: if case[0].isdigit(): results.append(decode_rle(case)) else: results.append(encode_rle(case)) return results"},{"question":"You have been given a list of n integers which represents the heights of people standing in a queue. The queue follows a distinct pattern. For every adjacent pair of people in the queue, the person on the left either has a height greater than or equal to the person on the right or in cases where the height of the left person is strictly less than the right person, a new rule applies: the difference in their heights must not exceed k. Write a function to determine if the queue adheres to the described rules. Input: - The first line contains two integers n and k (2 ≤ n ≤ 100, 1 ≤ k ≤ 100) - the number of people in the queue and the maximum acceptable height difference for adjacent people where the left person is shorter than the right person. - The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 1000), representing the heights of the people standing in the queue from left to right. Output: - Print \\"YES\\" if the queue follows the given pattern, otherwise print \\"NO\\". Examples: Input: 5 2 5 5 4 6 6 Output: YES Input: 4 3 7 3 2 5 Output: NO Input: 6 1 8 7 9 10 8 7 Output: NO","solution":"def is_queue_valid(n, k, heights): Determines if the queue follows the given pattern. Parameters: n (int): The number of people in the queue. k (int): The maximum acceptable height difference. heights (list of int): List of heights of people in the queue. Returns: str: \\"YES\\" if the queue follows the pattern, otherwise \\"NO\\". for i in range(n - 1): if heights[i] < heights[i + 1] and (heights[i + 1] - heights[i] > k): return \\"NO\\" return \\"YES\\""},{"question":"A delivery company is trying to optimize its delivery routes. They have several delivery zones identified by integers and need to determine the minimum number of trucks required to deliver packages to all zones under specific configurations. Each truck has a maximum delivery capability, which means it can cover up to a certain number of zones per trip. The trucks cannot share or exchange packages once they start their routes. You are to determine the minimum number of trucks required to cover all delivery zones given the maximum delivery capability of each truck. Input The first line contains two integers n and k (1≤ n≤ 1000, 1≤ k≤ n), representing the number of delivery zones and the maximum number of zones a truck can cover in a single trip, respectively. Output Print one integer, the minimum number of trucks required to cover all delivery zones. Examples Input 6 2 Output 3 Input 7 3 Output 3 Input 5 5 Output 1 Note In the first example, with 6 delivery zones and a truck capable of covering 2 zones per trip, we need at least 3 trucks to cover all zones (e.g., trucks can cover zones in pairs (1-2), (3-4), (5-6)). In the second example, with 7 delivery zones and a truck capable of covering 3 zones per trip, we need at least 3 trucks to cover all zones (e.g., trucks can cover zones in triplets (1-3), (4-6), (7)). In the third example, with 5 delivery zones and a truck capable of covering all 5 zones in one trip, we need only 1 truck to cover all zones.","solution":"def min_trucks_required(n, k): Determines the minimum number of trucks required to cover all delivery zones. Args: n (int): Number of delivery zones. k (int): Maximum number of zones a truck can cover in a single trip. Returns: int: The minimum number of trucks required. # Each truck can cover up to k zones # The number of trucks required is the ceiling of n / k import math return math.ceil(n / k)"},{"question":"Two friends, Alice and Bob, are playing a game with stones. Initially, there are `n` stones in a pile. They take turns to remove stones from the pile, with Alice going first. The game proceeds as follows: - On her turn, Alice can remove any number of stones between 1 and 3 (inclusive). - On his turn, Bob can remove any even number of stones between 2 and 4 (inclusive). The player who cannot make a move loses the game. You need to determine which player will win if both play optimally. -----Input----- A single integer `n` (1 ≤ n ≤ 10^9) — the initial number of stones. -----Output----- Output a single line \\"Alice\\" if Alice will win, or \\"Bob\\" if Bob will win. -----Examples----- Input 4 Output Alice Input 2 Output Bob Input 7 Output Alice -----Note----- Illustration for first test case: - Alice can remove 1 stone, leaving 3 stones for Bob. - Bob can then remove 2 stones, leaving 1 stone for Alice. - Alice takes the last stone and wins the game. Illustration for second test case: - Alice can remove 1 or 2 stones. If she removes 1 stone, 1 stone remains for Bob and he cannot move. If she removes 2 stones, no stones remain and Alice wins. Illustration for third test case: - Alice can remove 3 stones, leaving 4 stones for Bob. - Bob can then remove 4 stones, leaving no stones for Alice. - Alice wins by removing the last stone(s), ensuring there are no stones left for Bob to play on his turn.","solution":"def determine_winner(n): Determines who will win the game (Alice or Bob) given n stones. # Alice wins if the number of stones (n) is odd, otherwise Bob wins. return \\"Alice\\" if n % 2 == 1 else \\"Bob\\""},{"question":"You are provided with a list of integers representing the scores of students in a class. Your task is to determine the maximum possible average score by removing at most one student\'s score from the list. If the list has fewer than 2 scores, the output should be the average of the scores in their original form. # Input - A single line containing space-separated integers representing student scores. # Output - A single integer representing the maximum possible average rounded down to the nearest whole number. # Constraints - The number of scores will be between 1 and 100 inclusive. - Each score will be an integer between 0 and 100 inclusive. # Example **Input:** ``` 70 80 90 ``` **Output:** ``` 85 ``` **Explanation:** Without removing any scores, the average is (70 + 80 + 90)/3 = 80. Removing 70 gives (80 + 90)/2 = 85. Removing 80 gives (70 + 90)/2 = 80. Removing 90 gives (70 + 80)/2 = 75. The maximum possible average is achieved by removing 70, resulting in an average of 85.","solution":"def max_possible_average(scores): if len(scores) < 2: return sum(scores) // len(scores) total_sum = sum(scores) max_average = total_sum // len(scores) for score in scores: new_average = (total_sum - score) // (len(scores) - 1) max_average = max(max_average, new_average) return max_average # Example usage: # input_scores = list(map(int, \\"70 80 90\\".split())) # print(max_possible_average(input_scores)) # Output should be 85"},{"question":"A recently developed security system uses a network of sensors to monitor a protected area. Each sensor is positioned at a specific point on a horizontal line and can detect any objects within a certain distance from its location. The protected area is represented as a segment on the x-axis from point 0 to point m. There are n sensors, each characterized by its position pi and its detection radius ri. A sensor positioned at point pi can detect any objects within the range [pi - ri, pi + ri]. To ensure the area is fully monitored, every point in the segment from 0 to m must be within the detection range of at least one sensor. Your task is to determine the minimum number of sensors required to fully cover the segment or determine that it is impossible to cover the segment with the given sensors. Input The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 100000) — the number of sensors and the length of the segment, respectively. Each of the next n lines contains two integers pi and ri (0 ≤ pi ≤ 100000, 0 ≤ ri ≤ 100000) — the position and detection radius of each sensor. Output If it is possible to cover the entire segment [0, m], print the minimum number of sensors required. Otherwise, print -1. Examples Input 4 10 1 5 8 3 12 6 3 4 Output 2 Input 3 10 1 1 4 1 7 1 Output -1 Note In the first example, the sensors at (1, 5) and (8, 3) can cover the entire segment [0, 10]. The minimum number of sensors needed is 2. In the second example, the given sensors cannot fully cover the segment [0, 10], so the output is -1. Explanation To solve the problem, you need to find the minimum number of sensors whose combined detection ranges cover the entire segment [0, m]. Use a greedy algorithm to select sensors that extend the coverage as far as possible at each step. This approach minimizes the number of sensors used and ensures that the entire segment is monitored.","solution":"def min_sensors_to_cover_segment(n, m, sensors): Determine the minimum number of sensors required to cover the segment [0, m] or return -1 if it is not possible to cover the segment. intervals = [(p - r, p + r) for p, r in sensors] intervals.sort() end = 0 max_end = 0 i = 0 sensors_used = 0 while end < m: while i < n and intervals[i][0] <= end: max_end = max(max_end, intervals[i][1]) i += 1 if max_end <= end: return -1 end = max_end sensors_used += 1 return sensors_used # Example usage: # n, m = 4, 10 # sensors = [(1, 5), (8, 3), (12, 6), (3, 4)] # print(min_sensors_to_cover_segment(n, m, sensors)) # Output: 2"},{"question":"The Hidden Password Alice is preparing for a hackathon and decides to have some fun coding exercises. Bob, her friend, creates a game for her where she has to figure out a hidden password based on some rules Bob specifies. The rules of the game are as follows: 1. Bob provides Alice with two strings, `S` and `T`. 2. Alice can perform the following operation any number of times (including zero) on string `S`: Pick any character from `S` and move it to the end of `S`. 3. Alice needs to find the lexicographically smallest string `S\'` possible using the allowed operations. A string `A` is lexicographically smaller than string `B` if in the first position where `A` and `B` differ, string `A` has a character that appears earlier in the alphabet than the corresponding character in string `B`. Write a function to help Alice find the lexicographically smallest string possible by repeatedly moving characters from any position in `S` to the end of `S`. # Input - The first line contains an integer `t` (1 le t le 1000) — the number of test cases. - Each test case consists of a single line containing the string `S` (1 le |S| le 100). The string `S` is a non-empty string consisting of lowercase English letters. # Output For each test case, output a single line containing the lexicographically smallest string `S\'` possible after performing any number of allowed operations on `S`. # Examples **Input** ``` 3 dabc leetcode hackathon ``` **Output** ``` abcd cdeeloet aackhtonh ``` # Note In the first example, \\"dabc\\" can be rearranged to \\"abcd\\" by moving \'d\' to the end, resulting in \\"abc\\", then moving \'a\' to the end, resulting in \\"bca\\", and finally moving \'b\' to the end, resulting in \\"cabd\\".","solution":"def find_lexicographically_smallest(S): # Find the smallest lexicographical rotation of the string S return \'\'.join(sorted(S)) def process_test_cases(test_cases): results = [] for S in test_cases: smallest_string = find_lexicographically_smallest(S) results.append(smallest_string) return results"},{"question":"Write a function that takes a list of integers and returns the list sorted based on the frequency of each integer in descending order. If two numbers have the same frequency, they should be sorted in ascending order of their values. Function Signature: ```python def frequency_sort(nums: List[int]) -> List[int]: pass ``` # Examples Example 1: Input: ```python frequency_sort([4, 5, 6, 5, 4, 3]) ``` Output: ```python [4, 4, 5, 5, 3, 6] ``` Example 2: Input: ```python frequency_sort([1, 2, 2, 3, 3, 3]) ``` Output: ```python [3, 3, 3, 2, 2, 1] ``` Example 3: Input: ```python frequency_sort([1, 2, 3, 4, 5, 6]) ``` Output: ```python [1, 2, 3, 4, 5, 6] ``` # Constraints - The number of integers in the input list will not exceed 10^4. - Each integer in the input list will be between -10^4 and 10^4.","solution":"from typing import List from collections import Counter def frequency_sort(nums: List[int]) -> List[int]: Returns the list sorted based on the frequency of each integer in descending order. If two numbers have the same frequency, they are sorted in ascending order of their values. # Create a counter for the numbers count = Counter(nums) # Sorting the list based on the frequency and then by the value itself sorted_nums = sorted(nums, key=lambda x: (-count[x], x)) return sorted_nums"},{"question":"You have been given a string representing an arithmetic expression that contains digits, \'(\', \')\', \'+\', \'-\', \'*\', and \'/\' (always integer division). Your task is to evaluate the expression and output the value. The expression is properly formatted, i.e., no consecutive operators, proper parentheses, etc. Input Format A single line containing a string, the arithmetic expression. Constraints 1 leq text{length of expression} leq 10^5 Output Format Print a single integer, the result of evaluating the arithmetic expression. Sample Input 3*(2+4)/2-5 Sample Output 4 Explanation The given expression is evaluated as follows: 3*(6)/2-5 = 3*3-5 = 9-5 = 4","solution":"def evaluate_expression(expression): Evaluates a given arithmetic expression containing digits, \'(\', \')\', \'+\', \'-\', \'*\', and \'/\' (performing integer division). Args: expression (str): The arithmetic expression to evaluate. Returns: int: The result of the evaluated expression. def compute(operators, values): Helper function to perform arithmetic operations right = values.pop() left = values.pop() op = operators.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) elif op == \'/\': values.append(left // right) def precedence(op): Return precedence order for operations if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i].isdigit(): val = 0 while (i < len(expression) and expression[i].isdigit()): val = val * 10 + int(expression[i]) i += 1 values.append(val) i -= 1 # since i will be incremented in the for loop elif expression[i] == \'(\': operators.append(expression[i]) elif expression[i] == \')\': while operators and operators[-1] != \'(\': compute(operators, values) operators.pop() # remove \'(\' elif expression[i] in \\"+-*/\\": while (operators and precedence(operators[-1]) >= precedence(expression[i])): compute(operators, values) operators.append(expression[i]) i += 1 while operators: compute(operators, values) return values[-1]"},{"question":"A string S consists of uppercase English letters and underscores (\'_\'). Each underscore in the string can be replaced with any uppercase English letter to form a new string. The goal is to determine the number of unique strings that can be formed. -----Constraints----- - 1≦|S|≦100 - S consists of only uppercase letters and underscores (\'_\'). -----Input----- The input is given from Standard Input in the following format: S -----Output----- Print the number of unique strings that can be formed. -----Sample Input----- A_B -----Sample Output----- 26 -----Sample Input----- HELLO_WOR_D -----Sample Output----- 676","solution":"def count_unique_strings(S): Given a string S consisting of uppercase English letters and underscores (\'_\'), each underscore in the string can be replaced with any uppercase English letter to form a new string. The function returns the number of unique strings that can be formed. underscore_count = S.count(\'_\') return 26 ** underscore_count"},{"question":"You are given a list of integers. Your task is to rearrange the elements to form the largest possible integer. The resulting integer should not contain leading zeros unless the integer itself is zero. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the following t lines contains a string of digits (from \'0\' to \'9\') representing the list of integers. -----Output----- For each test case, print the largest possible integer that can be formed by rearranging the digits of the list of integers, without leading zeros unless the integer itself is zero. -----Examples----- Input 3 123 405 099 Output 321 540 990 -----Note----- In the first example, the string \\"123\\" can be rearranged to form the integer 321, which is the largest possible integer. In the second example, the string \\"405\\" can be rearranged to form the integer 540, which is the largest possible integer. In the third example, even though the input contains leading zeros, as per the rule, the integer formed will not have leading zeros. \\"099\\" rearranges to 990, which is the largest possible integer.","solution":"def largest_possible_integer(test_cases): Takes a list of strings of digits and returns the largest possible integer for each string. result = [] for digits in test_cases: sorted_digits = sorted(digits, reverse=True) largest_num = \'\'.join(sorted_digits) if largest_num[0] == \'0\': result.append(\'0\') else: result.append(largest_num) return result"},{"question":"You are given an array of integers. You need to determine if you can split the array into two non-empty contiguous subarrays such that the sum of the elements in both subarrays is equal. Input: The first line of the input will contain a single integer T, the number of test cases. Then there will be T descriptions of the test cases. Each description contains two lines. The first line contains a single integer N, the length of the array. The second line contains N space-separated integers, the elements of the array. Output: For each test case, display YES (in a newline), if you can split the array as described. Otherwise, display NO. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 10^5 -10^4 ≤ array element ≤ 10^4 Sample Input: 2 5 1 2 3 4 5 4 1 1 1 1 Sample Output: NO YES Explanation: For the 1st test case, there is no way to split the array into two non-empty contiguous subarrays with an equal sum. For the 2nd test case, the array can be split into two contiguous subarrays [1, 1] and [1, 1], both having the sum of 2, hence the answer is YES.","solution":"def can_split_array(T, test_cases): results = [] for case in test_cases: N = case[0] arr = case[1] total_sum = sum(arr) if total_sum % 2 != 0: results.append(\\"NO\\") continue target = total_sum // 2 current_sum = 0 found = False for num in arr: current_sum += num if current_sum == target: found = True break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are tasked with building a secure password validation system for a web application. A password is considered strong if it satisfies the following criteria: 1. It has at least 8 characters. 2. It contains at least one uppercase letter. 3. It contains at least one lowercase letter. 4. It contains at least one digit. 5. It contains at least one special character from the set: !@#%^&*()-+ Write a function that takes an array of strings (passwords), and returns an array indicating whether each password is strong or not. The result should be an array where each element is either \\"YES\\" or \\"NO\\", corresponding to whether the password meets the criteria. Input Format: A single line containing space-separated passwords. Output Format: A single line containing space-separated \\"YES\\" or \\"NO\\" for each password, in the same order as they appeared in the input. Constraints: - Each password string will have a length of up to 100 characters. - The number of passwords will not exceed 100. SAMPLE INPUT MyP@ssw0rd Paw0rd123 WeakPass123 NopecialChar Strong@45 SAMPLE OUTPUT YES YES NO NO YES Explanation: - \\"MyP@ssw0rd\\" contains at least 8 characters, an uppercase letter, a lowercase letter, a digit, and a special character. - \\"Paw0rd123\\" contains at least 8 characters, an uppercase letter, a lowercase letter, digits, and special characters. - \\"WeakPass123\\" contains at least 8 characters, an uppercase letter, a lowercase letter, and digits, but no special character. - \\"NopecialChar\\" is less than 8 characters, so it does not satisfy the first condition. - \\"Strong@45\\" contains at least 8 characters, an uppercase letter, a lowercase letter, digits, and special characters.","solution":"import re def validate_passwords(passwords): Validates a list of passwords. Returns \\"YES\\" if the password is strong, otherwise \\"NO\\". Parameters: passwords (list): List of strings representing the passwords. Returns: list: List of strings \\"YES\\" or \\"NO\\" for each password. results = [] special_characters = re.escape(\\"!@#%^&*()-+\\") for password in passwords: if (len(password) >= 8 and re.search(r\'[A-Z]\', password) and re.search(r\'[a-z]\', password) and re.search(r\'[0-9]\', password) and re.search(f\'[{special_characters}]\', password)): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input(input_string): Processes the input string and returns a space-separated string of results. Parameters: input_string (str): The input string containing space-separated passwords. Returns: str: Space-separated string of \\"YES\\" or \\"NO\\" results for each password in the input. passwords = input_string.split() validation_results = validate_passwords(passwords) return \\" \\".join(validation_results)"},{"question":"Implement a Stack using a Single Queue. A query Q is of 2 Types (i) 1 x (a query of this type means pushing \'x\' into the stack) (ii) 2 (a query of this type means to pop an element from the stack and print the popped element) Example 1: Input: Q = 5 Queries = 1 2 1 3 2 1 4 2 Output: 3 4 Explanation: In the first testcase: 1 2 the stack will be {2} 1 3 the stack will be {3, 2} 2 popped element will be 3 the stack will be {2} 1 4 the stack will be {4, 2} 2 popped element will be 4. Example 2: Input: Q = 4 Queries = 1 2 2 2 1 3 Output: 2 -1 Explanation: In the second testcase: 1 2 the stack will be {2} 2 popped element will be {2} then the stack will be empty. 2 the stack is empty and hence -1 1 3 the stack will be {3}. Your Task: Complete the function push() which takes an integer as input parameter and pop() which will remove and return an element(-1 if stack is empty). Expected Time Complexity: O(N) per query where N is the number of elements in the stack. Expected Auxiliary Space: O(1). Constraints: 1 <= Q <= 100 1 <= x <= 100","solution":"from collections import deque class Stack: def __init__(self): Initialize an empty deque to act as the queue. self.queue = deque() def push(self, x): Push element x onto stack. self.queue.append(x) for _ in range(len(self.queue) - 1): self.queue.append(self.queue.popleft()) def pop(self): Removes the element on top of the stack and returns that element. if not self.queue: return -1 return self.queue.popleft() def process_queries(queries): stack = Stack() results = [] for query in queries: if query[0] == 1: stack.push(query[1]) elif query[0] == 2: results.append(stack.pop()) return results"},{"question":"Zara is passionate about architecture and fascinated by skyline views. While walking in the city, she often imagines the heights of different towers that can form a beautiful skyline. She wants to create a program that calculates the area of the skyline formed by given heights of buildings. You are given an array of non-negative integers representing the heights of the buildings, where the width of each building is 1. Zara wants you to determine the area of the largest rectangle that can be formed in the skyline. Input The first line contains integer n (1 ≤ n ≤ 105) — the number of buildings. The second line contains n space-separated non-negative integers h1, h2, ..., hn (0 ≤ hi ≤ 109) — the heights of the buildings. Output Output one integer — the area of the largest rectangle that can be formed in the skyline. Example Input 7 2 1 5 6 2 3 4 Output 10 Explanation The largest rectangle in the given skyline has an area of 10. The rectangle can be formed between the second and the fifth building (inclusive) with height 2.","solution":"def largest_rectangle_area(heights): This function calculates the area of the largest rectangle that can be formed in the skyline represented by the array \'heights\' where each building has a width of 1. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"A company uses a sophisticated computer system to monitor network traffic. To investigate potential issues, data packets are logged with a series of timestamps. A timestamp is a positive integer representing seconds since an arbitrary epoch. The logs are represented as a string of timestamps in seconds, separated by commas. To analyze the traffic, you need to find a contiguous segment of the log that has a maximum number of distinct timestamps while its length (i.e., the difference between the smallest and largest timestamp in this segment) is less than or equal to a given integer k. Write a function `max_distinct_timestamps(log: str, k: int) -> int` that determines the maximum number of distinct timestamps in any contiguous segment of the log with length ≤ k. -----Input:----- - A single string log, where each timestamp is a positive integer separated by commas. - An integer k, representing the maximum allowable length of the segment. -----Output:----- - Return a single integer, the maximum number of distinct timestamps found in any valid contiguous segment. -----Constraints:----- - The log contains at most 1000 timestamps. - Each timestamp is a positive integer less than or equal to 10^6. - 1 ≤ k ≤ 10^6 -----Sample Input:----- log = \\"1,2,3,4,5,6\\" k = 5 -----Sample Output:----- 6 -----Explanation:----- In the given log, the entire sequence from 1 to 6 has 6 distinct timestamps and forms a segment of length 5 (6 - 1 = 5), which respects the condition k = 5. Thus, the output is 6. -----Sample Input:----- log = \\"1,2,4,5,7,8,10,11,13,14\\" k = 2 -----Sample Output:----- 2 -----Explanation:----- Here, the segments with lengths less than or equal to 2 containing maximum distinct timestamps are \\"1,2\\", \\"4,5\\", \\"7,8\\", \\"10,11\\", \\"13,14\\", each consisting of 2 distinct timestamps. Hence, the output is 2.","solution":"def max_distinct_timestamps(log: str, k: int) -> int: timestamps = list(map(int, log.split(\',\'))) n = len(timestamps) max_distinct = 0 for i in range(n): seen = set() for j in range(i, n): seen.add(timestamps[j]) if timestamps[j] - timestamps[i] <= k: max_distinct = max(max_distinct, len(seen)) else: break return max_distinct"},{"question":"------ Question ------ Dr. Smith has recently taken up gardening and wants to plant a variety of flowers in his garden. He has F different types of flower packs and each type can have a different number of flowers in it. Dr. Smith plans to create flower arrangements in his garden such that each arrangement is a sequence of different types of flowers, and each arrangement has its flowers in increasing order of types. Examples: If there is a sequence of (E+1) flower types, we can call this sequence an E-sequence. Dr. Smith wants to determine how many different E-sequences are possible (1 ≤ E ≤ G). An E-sequence is different from another if the flower types used in one E-sequence are in a different arrangement from the other. However, sequences with the same flower types but in different positions are considered the same. ------ Input ------ The first line contains two integers: F denoting the number of flower types and G. The second line contains F space-separated integers A_{1}, A_{2}, ..., A_{F} denoting the number of flowers in each type. ------ Output ------ Output a single line containing G space-separated integers O_{1}, O_{2}, ..., O_{G}, where O_{i} is the number of E-sequences in modulo 10^{9}+7. ------ Constraints ------ 1 ≤ F ≤ 10^{5} 1 ≤ G ≤ 10^{3} 1 ≤ A_{i} ≤ 10^{3} ------ Subtasks ------ Subtask 1: 1 ≤ F, G ≤ 10 - 15 points Subtask 2: 1 ≤ F, G ≤ 100 - 25 points Subtask 3: Original constraints - 60 points ------ Sample Input 1 ------ 4 3 1 2 1 3 ------ Sample Output 1 ------ 5 6 1 ------ Explanation 1 ------ We can create these 1-sequences: 1 -> 2 (1 way) 1 -> 3 (1 way) 1 -> 4 (1 way) 2 -> 3 (1 way) 2 -> 4 (1 way) Number of 1-sequences = 5 We can create these 2-sequences: 1 -> 2 -> 3 (1 way) 1 -> 2 -> 4 (1 way) 1 -> 3 -> 4 (1 way) 2 -> 3 -> 4 (1 way) 1 -> 2 -> 4 (1 way) 2 -> 3 -> 4 (1 way) Number of 2-sequences = 6 We can create one unique 3-sequence: 1 -> 2 -> 3 -> 4 (1 way) Number of 3-sequences = 1","solution":"MOD = 10**9 + 7 def count_e_sequences(F, G, flowers): # Initialize DP table with dimensions (G+1) x (F+1) dp = [[0] * (F+1) for _ in range(G+1)] # Each single flower type is a valid 1-sequence for i in range(1, F+1): dp[1][i] = i # Fill the DP table for e in range(2, G+1): for i in range(1, F+1): dp[e][i] = (dp[e][i-1] + dp[e-1][i-1]) % MOD # Calculate the result for all 1 <= E <= G result = [] for e in range(1, G+1): result.append(dp[e][F]) return result"},{"question":"In this problem, you need to determine the number of ways to partition an array into exactly two non-empty subarrays such that the difference between their sums is minimized. Given an array of integers, find the minimum possible absolute difference between the sums of the two subarrays. Input First line of the input will contain a single integer T (number of test cases). Each test case will start with an integer N (length of the array), followed by N space-separated integers representing the array. Output For each test case, print a single integer which is the minimum possible absolute difference between the sums of the two subarrays. Constraints 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 -10^4 ≤ Array values ≤ 10^4 SAMPLE INPUT 2 4 1 2 3 4 5 1 1 1 1 1 SAMPLE OUTPUT 0 1 Explanation 1st test case: The array [1, 2, 3, 4] can be partitioned as [1, 2, 3] and [4], resulting in sums of 6 and 4 respectively, giving a difference of 2. A better partition is [1, 4] and [2, 3], resulting in sums of 5 and 5 respectively, giving a difference of 0, which is the minimum possible. 2nd test case: The array [1, 1, 1, 1, 1] can be partitioned such that the sums of the subarrays are as close as possible, resulting in a best possible difference of 1.","solution":"def min_partition_diff(arr): Returns the minimum possible absolute difference between the sums of two subarrays. total_sum = sum(arr) left_sum = 0 min_diff = float(\'inf\') for i in range(len(arr) - 1): left_sum += arr[i] right_sum = total_sum - left_sum min_diff = min(min_diff, abs(left_sum - right_sum)) return min_diff def solve(test_cases): results = [] for n, arr in test_cases: results.append(min_partition_diff(arr)) return results"},{"question":"Given an array of integers, determine the length of the longest subarray that does not contain any zeros. Example 1: Input: arr = [1, 2, 0, 3, 4, 0, 5, 6] Output: 2 Explanation: The longest subarray without zeros is [3, 4] or [5, 6], both have length 2. Example 2: Input: arr = [1, 2, 3, 4, 0, 1] Output: 4 Explanation: The longest subarray without zeros is [1, 2, 3, 4], which has length 4. Your Task: You do not need to read input or print anything. Your task is to complete the function longestSubarrayWithoutZero() which takes arr as input parameter and returns an integer representing the length of the longest subarray that does not contain any zeros. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ arr.length ≤ 10^5 -10^5 ≤ arr[i] ≤ 10^5","solution":"def longestSubarrayWithoutZero(arr): Returns the length of the longest subarray without zeros. max_length = 0 current_length = 0 for num in arr: if num == 0: max_length = max(max_length, current_length) current_length = 0 else: current_length += 1 return max(max_length, current_length)"},{"question":"Alice and Bob are playing a number game. Alice has a list of integers and, from this list, she can create a subsequence by removing any number of elements (including the possibility of removing none). Bob gives her a target integer M, and Alice\'s goal is to find a subsequence whose sum of elements is as close as possible to M without exceeding it. Write a program to help Alice achieve her goal. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains two integers N and M, where N is the number of elements in the list and M is the target sum. - The second line contains N space-separated integers representing the list of elements. ------ Output Format ------ For each test case, output a single integer which is the maximum subsequence sum that does not exceed M. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ M ≤ 10^{5} 1 ≤ text{list element} ≤ 10^{5} ----- Sample Input 1 ------ 2 5 9 1 2 3 4 5 4 8 8 3 5 7 ----- Sample Output 1 ------ 9 8 ----- Explanation 1 ------ Test case 1: The subsequence {1, 2, 3, 4} sums to 10 but it exceeds the target 9. The optimal subsequence is {4, 5} which sums exactly to the target 9. Test case 2: The optimal subsequence can be either {3, 5} or {8}. Both sums are equal to the target 8.","solution":"def max_subsequence_sum_not_exceeding(list_of_numbers, target_sum): N = len(list_of_numbers) dp = [0] * (target_sum + 1) for num in list_of_numbers: for j in range(target_sum, num - 1, -1): dp[j] = max(dp[j], dp[j - num] + num) return dp[target_sum] def process_test_cases(T, test_cases): result = [] for case in test_cases: N, M, numbers = case result.append(max_subsequence_sum_not_exceeding(numbers, M)) return result # Examples of how to use the function: # T = 2 # test_cases = [ # (5, 9, [1, 2, 3, 4, 5]), # (4, 8, [8, 3, 5, 7]) # ] # print(process_test_cases(T, test_cases))"},{"question":"Write a function that accepts a list of integers and returns a new list with the squares of all the non-negative integers from the input list, sorted in non-decreasing order. Example input: ``` [-4, -2, 0, 3, 5] [1, -1, 2, 3] [0, -3, -1, 1, 2] ``` Expected output: ``` [0, 9, 25] [1, 4, 9] [0, 1, 4] ```","solution":"def sorted_squares_non_negative(lst): Returns a new list with the squares of all non-negative integers from the input list, sorted in non-decreasing order. non_negative_squares = [x**2 for x in lst if x >= 0] return sorted(non_negative_squares)"},{"question":"Given a string `s` consisting of lowercase English letters, determine the minimum number of characters to insert into the string to make it a palindrome. Example 1: Input: \\"ab\\" Output: 1 Explanation: We can insert \'a\' at the end, resulting in \\"aba\\". Example 2: Input: \\"race\\" Output: 3 Explanation: We can insert \'e\', \'c\', and \'a\' at the beginning, resulting in \\"ecarace\\". Example 3: Input: \\"aa\\" Output: 0 Explanation: The string is already a palindrome. Note: The length of `s` is at most 500.","solution":"def min_insertions_to_palindrome(s: str) -> int: Determines the minimum number of characters to insert into the string to make it a palindrome. :param s: Input string consisting of lowercase English letters. :return: Minimum number of insertions required. n = len(s) # dp[i][j] will store the minimum number of insertions required to make s[i:j+1] a palindrome dp = [[0] * n for _ in range(n)] # Fill the table for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1 # The answer will be dp[0][n-1] return dp[0][n-1]"},{"question":"Create a function that takes an array of strings as input and returns a new array where each string has been reversed, but the case of each character is also inverted. For example, original uppercase letters become lowercase and vice versa. For example: ```python reverse_and_invert_case([\\"Hello\\", \\"WORLD\\", \\"Python\\"]) ``` Should return: ```python [\\"OLLEh\\", \\"dlrow\\", \\"NOHTYp\\"] ``` Assumptions: - The input array will always contain at least one string. - The strings will not contain any digits or special characters, only alphabetic characters.","solution":"def reverse_and_invert_case(strings): Takes an array of strings and returns a new array where each string has been reversed and the case of each character is inverted. :param strings: list of str :return: list of str result = [] for s in strings: reversed_inverted = \'\'.join([char.lower() if char.isupper() else char.upper() for char in s[::-1]]) result.append(reversed_inverted) return result"},{"question":"Given an integer array nums, return the length of the shortest contiguous subarray whose sum is greater than or equal to a given integer k. If no such subarray exists, return 0. A contiguous subarray is a subarray composed of consecutive elements from the original array. Example 1: Input: nums = [2,3,1,2,4,3], k = 7 Output: 2 Explanation: The subarray [4,3] has the minimal length under the problem constraint. Example 2: Input: nums = [1,4,4], k = 4 Output: 1 Explanation: The subarray [4] has the minimal length under the problem constraint. Example 3: Input: nums = [1,1,1,1,1,1,1,1], k = 11 Output: 0 Explanation: There is no subarray with sum greater than or equal to 11. Constraints: 1 <= nums.length <= 10^5 1 <= nums[i] <= 10^4 1 <= k <= 10^9","solution":"def min_subarray_length(nums, k): Returns the length of the shortest contiguous subarray whose sum is greater than or equal to k. If no such subarray exists, return 0. n = len(nums) min_length = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += nums[right] while current_sum >= k: min_length = min(min_length, right - left + 1) current_sum -= nums[left] left += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"Given a Singly Linked List of integers, group all nodes with even integers together followed by the odd integers. The relative order within the even and odd groups should remain the same as it was in the original list. Example 1: Input: LinkedList: 1->2->3->4->5->6 Output: 2->4->6->1->3->5 Explanation: Even integers are 2, 4, 6 and odd integers are 1, 3, 5. The order is maintained within each group. Example 2: Input: LinkedList: 17->15->8->9->2->4->6 Output: 8->2->4->6->17->15->9 Your Task: Your task is to complete the function segregateEvenOdd() which takes the head of the linked list in the input parameter and modifies the given linked list accordingly. Constraints: 1<=N<=100 Expected Time Complexity: O(N). Expected Auxiliary Space: O(1).","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def segregateEvenOdd(head: ListNode) -> ListNode: if head is None: return None even_dummy = ListNode(0) odd_dummy = ListNode(0) even_tail, odd_tail = even_dummy, odd_dummy current = head while current: if current.val % 2 == 0: even_tail.next = current even_tail = even_tail.next else: odd_tail.next = current odd_tail = odd_tail.next current = current.next even_tail.next = odd_dummy.next odd_tail.next = None return even_dummy.next # Helper function to convert list to linked list def list_to_linked_list(lst): dummy = ListNode(0) current = dummy for value in lst: current.next = ListNode(value) current = current.next return dummy.next # Helper function to convert linked list to list def linked_list_to_list(node): lst = [] while node: lst.append(node.val) node = node.next return lst"},{"question":"Design a function that, given details of power panel configurations, determines if a safe electricity distribution is possible or not. Each power panel can either supply electricity directly to appliances or connect to other panels for distribution. # Safe Electricity Distribution A power panel can only handle a specific amount of load before it becomes overloaded. Let\'s define the specifics of these power panels and their connections. # Input and Output Specifications **Input:** The input consists of several lines: 1. On the first line, there is an integer N (1 ≤ N ≤ 300,000), representing the number of connections in the power distribution system. 2. The next N lines each contain three integers: `u`, `v`, and `w` (1 ≤ u, v ≤ 300,000 and 1 ≤ w ≤ 10^9). Here, `u` represents the ID of the power panel or device that is connected to `v`, with `w` representing the load that this connection introduces. 3. Next, there is a line containing a single integer M (1 ≤ M ≤ 300,000), representing the number of power panels. 4. The following M lines each contain two integers: `p` and `c` (1 ≤ p ≤ 300,000 and 1 ≤ c ≤ 10^9). Here, `p` represents the ID of the power panel and `c` is its capacity, i.e., the maximum load it can handle before becoming overloaded. **Output:** Print \\"Yes\\" if the electricity distribution could be organized without overloading any power panels. Otherwise, print \\"No\\". # Example **Input:** ``` 5 1 2 10 2 3 20 3 4 30 4 5 40 5 1 50 3 1 35 3 45 5 120 ``` **Output:** ``` No ``` **Input:** ``` 4 1 2 10 2 3 20 3 4 30 4 5 40 2 2 100 4 100 ``` **Output:** ``` Yes ``` # Notes: 1. The capacity of each power panel should be verified independently based on the load of all connections associated with it. 2. A panel is considered to be part of the safe distribution if no connection or set of connections exceeds its capacity at any point. Using this example, design a solution that reads the data, processes each connection and panel, and determines the feasibility of safe electricity distribution. All computations should be performed efficiently to handle large datasets within reasonable time limits.","solution":"def is_safe_distribution(connections, panels): from collections import defaultdict # Dictionary to store loads on each panel total_load = defaultdict(int) # Aggregating all the loads on each panel for u, v, w in connections: total_load[u] += w total_load[v] += w # Checking each panel\'s load against its capacity for p, c in panels: if total_load[p] > c: return \\"No\\" return \\"Yes\\""},{"question":"You are given an array of integers a of length n. An array a is said to be \\"well-ordered\\" if it satisfies the following conditions: 1. a_1 is the smallest element in the entire array. 2. a_n is the largest element in the entire array. 3. The array is non-decreasing, that is, a_i leq a_{i+1} for all 1 leq i < n. Given an array of integers b of length m, determine if there exists a subsequence of b that would form a \\"well-ordered\\" array. A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 leq t leq 100). The description of the test cases follows. The first line of each test case contains a single integer m (1 leq m leq 10^3), where m is the length of the array b. The second line of each test case contains m integers b_1, b_2, ldots, b_m (1 leq b_i leq 10^9) representing the elements of the array b. It is guaranteed that the sum of all m over all test cases does not exceed 10^4. -----Output----- For each test case, output \\"YES\\" if there exists a subsequence of b that forms a \\"well-ordered\\" array. Otherwise, output \\"NO\\". -----Examples----- Input 3 5 1 5 3 2 4 6 6 5 4 3 2 1 7 2 3 4 1 5 6 7 Output YES NO YES -----Note----- In the first test case, the subsequence [1, 2, 4, 5] forms a \\"well-ordered\\" array as 1 is the smallest, 5 is the largest, and the sequence is non-decreasing. In the second test case, no subsequence of [6, 5, 4, 3, 2, 1] can form an array where the first element is the smallest and the last element is the largest, thus the output is \\"NO\\". In the third test case, the subsequence [2, 3, 4, 5, 6, 7] forms a \\"well-ordered\\" array as 2 is the smallest, 7 is the largest, and the sequence is non-decreasing.","solution":"def is_well_ordered_possible(b): Determines if there exists a subsequence of b that forms a \\"well-ordered\\" array. smallest = min(b) largest = max(b) # Check if there is a non-decreasing subsequence from smallest to largest in_sequence = False for num in b: if num == smallest: in_sequence = True elif in_sequence and num == largest: return True elif in_sequence and num >= smallest and num <= largest: smallest = num return False def process_test_cases(test_cases): results = [] for b in test_cases: if is_well_ordered_possible(b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Utility function to convert input into structure test cases def parse_input(input_str): input_lines = input_str.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] idx = 1 for _ in range(t): m = int(input_lines[idx]) b = list(map(int, input_lines[idx + 1].split())) test_cases.append(b) idx += 2 return test_cases # Example usage input_str = 3 5 1 5 3 2 4 6 6 5 4 3 2 1 7 2 3 4 1 5 6 7 test_cases = parse_input(input_str) results = process_test_cases(test_cases) print(\\"n\\".join(results))"},{"question":"You are given an n-length binary string representing a sequence of operations, where \'1\' stands for an \\"increase operation\\" and \'0\' stands for a \\"decrease operation\\". You need to find the maximum possible value after performing the operations starting from an initial value of zero. Increase and decrease operations respectively increase or decrease the current value by 1. Additionally, if at any moment the current value becomes negative, it resets to zero. Write a function to determine the maximum possible value after performing the sequence of operations. -----Input----- The input is a single line containing a binary string s (1 ≤ |s| ≤ 2200) representing the sequence of operations. -----Output----- Output a single integer, which is the maximum possible value that can be attained after performing the operations. -----Example----- Input 110001101 Output 4 -----Explanation----- In the example, the sequence of operations is as follows: - \'1\' -> Increase: 0 + 1 = 1 - \'1\' -> Increase: 1 + 1 = 2 - \'0\' -> Decrease: 2 - 1 = 1 - \'0\' -> Decrease: 1 - 1 = 0 (since it drops below zero, reset to 0) - \'0\' -> Decrease: 0 -> remains 0 - \'1\' -> Increase: 0 + 1 = 1 - \'1\' -> Increase: 1 + 1 = 2 - \'0\' -> Decrease: 2 - 1 = 1 - \'1\' -> Increase: 1 + 1 = 2 - Overall max value reached is 4.","solution":"def max_possible_value(s): Given a binary string s, calculates the maximum possible value of the sequence of operations starting from zero. Parameters: s (str): A binary string representing the sequence of operations Returns: int: The maximum possible value attained max_value = 0 current_value = 0 for char in s: if char == \'1\': current_value += 1 elif char == \'0\': current_value -= 1 if current_value < 0: current_value = 0 # Track the maximum value reached if current_value > max_value: max_value = current_value return max_value"},{"question":"Complete the function `find_factors`/`findFactors` (or equivalent, depending on your language) that finds all factors of a given non-negative integer as an ordered list. A factor of a number is an integer that divides it with no remainder. The factors should be sorted in ascending order. You may assume the input is always a non-negative integer. Examples ~~~if-not:nasm ```python find_factors(12) ==> [1, 2, 3, 4, 6, 12] find_factors(28) ==> [1, 2, 4, 7, 14, 28] find_factors(7) ==> [1, 7] ``` ~~~ ~~~if:nasm ``` mov edi, 12 call find_factors ; returns [1, 2, 3, 4, 6, 12] mov edi, 28 call find_factors ; returns [1, 2, 4, 7, 14, 28] mov edi, 7 call find_factors ; returns [1, 7] ``` ~~~ Note that `1` is a factor of every positive integer, and each integer is a factor of itself. When the input is `0`, return an empty list since `0` has no well-defined factors.","solution":"def find_factors(n): Returns a list of factors of the given non-negative integer n. if n == 0: return [] factors = [i for i in range(1, n+1) if n % i == 0] return factors"},{"question":"Create a function that determines if a string has all unique characters. The function should take a single string as input and return a boolean value indicating whether all characters in the string are unique. The function should be case-sensitive, meaning \'A\' and \'a\' are considered different characters. Do not use additional data structures to accomplish this.","solution":"def has_unique_characters(s): Determines if a string has all unique characters. Args: s (str): The input string. Returns: bool: True if all characters are unique, False otherwise. for i in range(len(s)): for j in range(i + 1, len(s)): if s[i] == s[j]: return False return True"},{"question":"In Mala\'s company, the developers are given a challenging task: to find the longest palindromic substring in a given string. A palindromic substring is a sequence of characters in the string that reads the same backward as forward. Develop a function that, given a string, returns the longest palindromic substring. If there are multiple palindromic substrings of the same maximum length, return the one which appears first. # Function Signature ```python def longest_palindromic_substring(s: str) -> str: ``` # Input - A single string `s` (1 ≤ len(s) ≤ 1000), consisting of lowercase alphabetic characters. # Output - A single string representing the longest palindromic substring. # Examples Example 1 ```python s = \\"babad\\" ``` Output: ```python \\"bab\\" ``` Note: \\"aba\\" is also a valid answer, but \\"bab\\" appears first. Example 2 ```python s = \\"cbbd\\" ``` Output: ```python \\"bb\\" ``` Example 3 ```python s = \\"a\\" ``` Output: ```python \\"a\\" ``` Example 4 ```python s = \\"ac\\" ``` Output: ```python \\"a\\" ``` # Constraints - The function should aim for an O(n^2) time complexity for input length n. - Consider both even and odd length palindromic substrings.","solution":"def longest_palindromic_substring(s: str) -> str: Returns the longest palindromic substring in a given string. n = len(s) if n < 2: return s def expand_around_center(left: int, right: int) -> str: while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest_palindrome = \\"\\" for i in range(n): odd_palindrome = expand_around_center(i, i) even_palindrome = expand_around_center(i, i + 1) longer_palindrome = odd_palindrome if len(odd_palindrome) > len(even_palindrome) else even_palindrome if len(longer_palindrome) > len(longest_palindrome): longest_palindrome = longer_palindrome return longest_palindrome"},{"question":"----- MISSING NUMBER ----- Anusha has an array of integers where each number appears exactly twice, except for one number which appears exactly once. She wants to find that single number. You need to help her with a function that takes the array as input and returns the missing single number. You are expected to solve the problem with a linear runtime complexity and without using extra memory. -----Input Format----- The input consists of two lines. The first line contains the integer n, the number of integers in the array. The second line contains n space-separated integers, representing the array. -----Output----- Print the single number that appears exactly once. -----Example Test Case----- Input: 9 4 3 2 4 1 3 2 1 5 Output: 5","solution":"def find_single_number(nums): Returns the number that appears only once in the array where every other number appears exactly twice. This solution has linear runtime complexity and uses constant extra memory. result = 0 for num in nums: result ^= num return result"},{"question":"A large enterprise maintains a firewall that requires meticulous configuration to operate smoothly. Since firewall rules get frequently updated, you are given the task of determining if a new rule conflicts with existing rules. Each rule is represented by a range of IP addresses it blocks, denoted by integers. You must check if the new rule overlaps with any existing rule. Input The first line contains integer n (1 ≤ n ≤ 5000) — the number of existing rules. Then n lines follow, each containing two integers ai and bi (1 ≤ ai < bi ≤ 2 × 10^9) — the start and end of the range for each rule. The last line contains two integers x and y (1 ≤ x < y ≤ 2 × 10^9) — the start and end of the range for the new rule. Output If the new rule conflicts with any of the existing ones, output \\"Conflict\\". Otherwise, output \\"No Conflict\\". Examples Input 3 1 5 8 10 15 20 4 9 Output Conflict Input 2 1 3 5 8 10 12 Output No Conflict","solution":"def check_firewall_rule_conflict(n, existing_rules, new_rule): x, y = new_rule for ai, bi in existing_rules: if max(ai, x) < min(bi, y): return \\"Conflict\\" return \\"No Conflict\\""},{"question":"Paul, the Prime Enthusiast, wants to challenge his friends with some interesting problems involving prime numbers. His latest creation involves summing unique prime factors. A prime factor of a number is a prime number that divides that number exactly. Given a number, you need to find the sum of its unique prime factors. For instance, the unique prime factors of 12 are 2 and 3, and their sum is 5. ------ Input ------ The first line of the input contains an integer N denoting the number of test cases. The description of N test cases follows. The only line of each test case contains a single integer X denoting the number for which the sum of unique prime factors is to be computed. ------ Output ------ For each test case, output a single line containing the sum of unique prime factors of the given number. ------ Constraints ------ 1 leq N leq 1000 2 leq X leq 10^6 ------ Sample Input 1 ------ 4 12 30 45 100 ------ Sample Output 1 ------ 5 10 8 5 ------ Explanation ------ In the first test case, the unique prime factors of 12 are 2 and 3, whose sum is 5. In the second test case, the unique prime factors of 30 are 2, 3, and 5, whose sum is 10. In the third test case, the unique prime factors of 45 are 3 and 5, whose sum is 8. In the fourth test case, the unique prime factors of 100 are 2 and 5, whose sum is 7.","solution":"def sum_of_unique_prime_factors(x): Returns the sum of unique prime factors of the given number x. def prime_factors(n): factors = set() d = 2 while d * d <= n: while (n % d) == 0: factors.add(d) n //= d d += 1 if n > 1: factors.add(n) return factors primes = prime_factors(x) return sum(primes) def process_input(input_str): input_lines = input_str.strip().split(\'n\') N = int(input_lines[0]) results = [] for i in range(1, N+1): X = int(input_lines[i]) results.append(sum_of_unique_prime_factors(X)) return results"},{"question":"You are given a list of integers where each element appears three times except for one element which appears exactly once. Write a function to find and return the element that appears only once. Implement a function `findUnique(numbers: List[int]) -> int` that takes a list of integers as input and returns the integer that appears exactly once. Example: findUnique([2, 2, 3, 2]) returns 3 findUnique([0, 1, 0, 1, 0, 1, 99]) returns 99 Note: - Your solution should have a linear runtime complexity. - Try to solve it using constant extra space.","solution":"from typing import List def findUnique(numbers: List[int]) -> int: Finds the element that appears exactly once when other elements appear exactly three times. Uses bitwise manipulation to achieve the result in O(n) time complexity with constant space. one, two = 0, 0 for num in numbers: # \'two\' becomes 1 where \'one\' and \'num\' are both 1, and \'one\' becomes 0 in those positions two |= one & num # \'one\' becomes 1 if it is 1 in either \'one\' or \'num\', but not both one ^= num # remove bits that appear three times in \'one\' and \'two\' common_bits = one & two # clear common bits from \'one\' and \'two\' one &= ~common_bits two &= ~common_bits return one"},{"question":"Write a function `calculate_highest_attendance` that determines the classroom with the highest total student attendance over a set of weeks. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) - the number of classrooms. - The second line contains an integer `m` (1 ≤ m ≤ 100) - the number of weeks. - The next `n` lines each contain `m` integers separated by spaces, where each line corresponds to weekly attendance records for a particular classroom. The attendance for each week is a non-negative integer not exceeding 100. # Output - Output a single integer representing the number of the classroom (1-based index) with the highest total attendance over all weeks. In case of a tie, return the smallest index. # Example Input ``` 3 4 10 20 30 40 15 15 35 10 5 10 15 40 ``` Output ``` 1 ``` # Explanation - Classroom 1: 10 + 20 + 30 + 40 = 100 - Classroom 2: 15 + 15 + 35 + 10 = 75 - Classroom 3: 5 + 10 + 15 + 40 = 70 - Classroom 1 has the highest total attendance.","solution":"def calculate_highest_attendance(n, m, attendance_records): max_total_attendance = 0 best_classroom_index = 0 for i in range(n): total_attendance = sum(attendance_records[i]) if total_attendance > max_total_attendance: max_total_attendance = total_attendance best_classroom_index = i elif total_attendance == max_total_attendance: best_classroom_index = min(best_classroom_index, i) return best_classroom_index + 1 # 1-based index"},{"question":"Given a string S1 and another string S2, determine if S2 is a rotated version of S1. A string X is said to be a rotated version of Y if the characters of Y can be obtained by rotating the characters of X to the left any number of times. Example 1: Input: S1 = \\"abcd\\" S2 = \\"cdab\\" Output: 1 Explanation: S2 is a rotated version of S1 after rotating \\"abcd\\" twice to the left. Example 2: Input: S1 = \\"abcd\\" S2 = \\"acbd\\" Output: 0 Explanation: S2 is not a rotated version of S1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isRotatedVersion() which takes the strings S1 and S2 as input parameters and returns 1 if S2 is a rotated version of S1, else returns 0. Expected Time Complexity: O(|S1|) Expected Auxiliary Space: O(|S1|) Constraints: 1 ≤ |S1|, |S2| ≤ 10^4","solution":"def isRotatedVersion(S1, S2): Determines if S2 is a rotated version of S1. Parameters: S1 (str): The original string. S2 (str): The string to check if it is a rotated version of S1. Returns: int: 1 if S2 is a rotated version of S1, 0 otherwise. if len(S1) != len(S2): return 0 # Concatenate S1 with itself double_S1 = S1 + S1 # Check if S2 is a substring of concatenated S1 if S2 in double_S1: return 1 else: return 0"},{"question":"Write a function that takes a list of integers and returns a list containing all the integers that have at least one of their digits repeated. The order of the integers in the output list should be the same as their order in the input list. # Input: - A list of integers. # Output: - A list of integers with at least one digit repeated. # Example: # Example 1: **Input:** ``` [123, 112, 456, 998, 789] ``` **Output:** ``` [112, 998] ``` # Example 2: **Input:** ``` [9876543210, 1234567890, 111222333, 444555666, 12321] ``` **Output:** ``` [111222333, 444555666, 12321] ``` # Constraints: - The input list can contain both positive and negative integers. - The absolute value of integers will be at most `10^9`.","solution":"def has_repeated_digits(n): Helper function to determine if the given integer has any repeated digits. digits = {} n = abs(n) # Handle negative numbers by taking the absolute value while n > 0: digit = n % 10 if digit in digits: return True digits[digit] = 1 n //= 10 return False def filter_repeated_digits(numbers): Takes a list of integers and returns a list containing all the integers that have at least one of their digits repeated. return [num for num in numbers if has_repeated_digits(num)]"},{"question":"You are given two strings, s1 and s2. Your task is to determine if you can transform s1 into s2 by making a series of operations. The operations allowed are: 1. Insert a character at any position. 2. Delete a character from any position. 3. Replace a character at any position with another character. Note that you can perform these operations any number of times. Input The input consists of two lines: - The first line contains the string s1 (1 ≤ |s1| ≤ 1000), where |s1| denotes the length of s1. - The second line contains the string s2 (1 ≤ |s2| ≤ 1000), where |s2| denotes the length of s2. Output Output \\"YES\\" if you can transform s1 into s2 using the given operations. Otherwise, output \\"NO\\". Examples Input abc yabcx Output YES Input kitten sitting Output YES Input flaw lawn Output NO","solution":"def can_transform(s1, s2): Determines if we can transform s1 into s2 by using a series of insert, delete, or replace operations. return \\"YES\\""},{"question":"Write a function that takes two strings and determines if one is a permutation of the other. The function should return true if one string is a permutation of the other, and false otherwise. Consider letters to be case-sensitive.","solution":"def are_permutations(str1, str2): Determines if one string is a permutation of the other. Case-sensitive comparison. :param str1: First string :param str2: Second string :return: True if one string is a permutation of the other, False otherwise return sorted(str1) == sorted(str2)"},{"question":"Given two integers n and k, you have a list of n integers. Your task is to find the maximum possible sum of any sub-array of length k. Input The first line of input contains one integer t (1 ≤ t ≤ 100), the number of test cases. The first line of each test case consists of two integers n and k (1 ≤ k ≤ n ≤ 10^5), where n is the number of elements in the list and k is the length of the sub-array. The second line of each test case contains n space-separated integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4) - the elements of the list. Output For each test case, print the maximum possible sum of any sub-array of length k. Example Input 2 5 2 1 2 3 4 5 8 3 -1 3 -2 5 3 -5 2 2 Output 9 6 Explanation In the first test case, the sub-array [4, 5] has the maximum sum among all sub-arrays of length 2, and its sum is 9. In the second test case, the sub-array [3, -2, 5] has the maximum sum among all sub-arrays of length 3, and its sum is 6.","solution":"def max_subarray_sum(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] max_sum = curr_sum = sum(arr[:k]) for j in range(k, n): curr_sum += arr[j] - arr[j - k] if curr_sum > max_sum: max_sum = curr_sum results.append(max_sum) return results # Example usage t = 2 test_cases = [ [(5, 2), [1, 2, 3, 4, 5]], [(8, 3), [-1, 3, -2, 5, 3, -5, 2, 2]] ] print(max_subarray_sum(t, test_cases)) # Output: [9, 6]"},{"question":"Given a string s consisting of lowercase Latin letters, we want to reorganize the string such that any two adjacent characters are not the same. If it is not possible to reorganize the string in this way, return an empty string. For example, the string \\"aab\\" can be reorganized as \\"aba\\". The string \\"aaab\\" cannot be reorganized in any way to meet the requirement, so the result is an empty string. Write a function `reorganize_string(s: str) -> str` that takes a single string and returns the reorganized string or an empty string if it is not possible. -----Input----- The input is a string s (1 le |s| le 10^5) consisting of lowercase Latin letters. -----Output----- Return a single string — either the reorganized string where no two adjacent characters are the same, or an empty string if it is not possible to reorganize the string to meet the requirement. -----Examples----- Input aab abc aaab [two more relevant examples] Output aba abc [] [two more relevant outputs] -----Note----- In the first example \\"aab\\", we can reorganize it to \\"aba\\". In the second example \\"abc\\", the string is already fine as is. In the third example \\"aaab\\", it\'s not possible to reorganize it in such a way that no two adjacent characters are the same, so the function returns an empty string.","solution":"from collections import Counter import heapq def reorganize_string(s: str) -> str: Reorganize the string such that no two adjacent characters are the same. # Count the frequency of each character frequency = Counter(s) max_heap = [] # Push all characters along with their frequencies into a max heap for char, freq in frequency.items(): heapq.heappush(max_heap, (-freq, char)) prev_freq, prev_char = 0, \'\' result = [] # Process the heap while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # If there\'s a previous character to be pushed back into the heap if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Update the previous character\'s frequency prev_freq, prev_char = freq + 1, char reorganized_string = \'\'.join(result) # If the reorganized string length is equal to the input string length, return it if len(reorganized_string) == len(s): return reorganized_string else: return \\"\\""},{"question":"You are given a list of integers representing the heights of trees in a forest. You need to determine the number of trees that are taller than a certain height limit. Task Write a function that takes two arguments: a list of integers `heights` and an integer `limit`. The function should return the number of trees that have a height greater than `limit`. You do not have to validate the input. # Example For the input `heights = [3, 5, 6, 7, 8, 2, 1]` and `limit = 5`, the function should return `3` because there are three trees with heights greater than 5 (6, 7, and 8). # Note - A height of a tree is considered greater than the limit if it strictly exceeds the limit. - The list `heights` will always contain positive integers.","solution":"def count_taller_trees(heights, limit): Returns the number of trees with height greater than the given limit. Parameters: heights (list of int): List of tree heights. limit (int): The height limit to compare the tree heights against. Returns: int: Number of trees taller than the limit. return sum(1 for height in heights if height > limit)"},{"question":"Given an array of integers and a window size k, the task is to find the minimum element in each window of size k in the array. Example 1: Input: arr = [8, 5, 10, 7, 9, 4, 15, 12, 90, 13] k = 4 Output: [5, 5, 4, 4, 4, 4, 12] Explanation: The minimum element in the first window is 5, the second window is 5, the third window is 4, and so on. Example 2: Input: arr = [2, 3, 4, 2, 6, 2, 5, 1] k = 3 Output: [2, 2, 2, 2, 2, 1] Explanation: The minimum element in the first window is 2, the second window is 2, the third window is 2, and so on. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minInWindow(arr, k) which takes two arguments (array arr and integer k) and returns an array of integers representing the minimum element in each window of size k. Expected Time Complexity: O(N) Expected Auxiliary Space: O(k) Constraints: 1 <= N <= 10^5 1 <= k <= N 1 <= arr[i] <= 10^6","solution":"from collections import deque def minInWindow(arr, k): Finds the minimum element in each window of size k in the array. if not arr or k == 0: return [] n = len(arr) result = [] dq = deque() for i in range(n): # Remove elements out of the current window if dq and dq[0] <= i - k: dq.popleft() # Remove elements from the deque which are larger than the current element while dq and arr[dq[-1]] >= arr[i]: dq.pop() dq.append(i) # Append the minimum element of the current window to the result list if i >= k - 1: result.append(arr[dq[0]]) return result"},{"question":"Given a list of integers, determine if the list forms a valid mountain array. A mountain array is defined as: 1. The length of the array is at least 3. 2. There exists some peak element A[i] such that: - A[0] < A[1] < ... < A[i] - A[i] > A[i+1] > ... > A[N-1] Write a function that checks if the given list of integers forms a mountain array. If it does, print \\"Mountain Array\\", otherwise print \\"Not a Mountain Array\\". -----Input----- The first line contains an integer T, the number of test cases. For each test case: The first line contains an integer N, the number of elements in the array. The second line contains N space-separated integers representing the array. -----Output----- For each test case, print \\"Mountain Array\\" if the array forms a mountain array, otherwise print \\"Not a Mountain Array\\". -----Constraints----- 1 <= T <= 10 2 <= N <= 10^4 -10^6 <= A[i] <= 10^6 -----Example----- Input: 3 5 0 3 2 4 1 4 1 2 3 4 6 3 5 5 2 1 0 Output: Not a Mountain Array Not a Mountain Array Not a Mountain Array Explanation: Test Case 1: There is an element (4) after the peak (3) that is greater than the following element (1), thus it\'s not a valid mountain array. Test Case 2: There is no peak element since the array is strictly increasing. Test Case 3: There is a plateau at index 1 (two elements 5), which makes it invalid as a mountain array must strictly decrease after the peak.","solution":"def is_mountain_array(arr): if len(arr) < 3: return False increasing = False peak_reached = False for i in range(1, len(arr)): if arr[i] == arr[i - 1]: return False if not peak_reached: if arr[i] > arr[i - 1]: increasing = True elif increasing and arr[i] < arr[i - 1]: peak_reached = True else: return False else: if arr[i] >= arr[i - 1]: return False return increasing and peak_reached def determine_mountain_arrays(test_cases): results = [] for tc in test_cases: N, arr = tc if is_mountain_array(arr): results.append(\\"Mountain Array\\") else: results.append(\\"Not a Mountain Array\\") return results"},{"question":"In a certain city, there are n intersections connected by m bidirectional roads. The city planners want to ensure that every intersection is reachable from any other intersection, but with minimal construction cost due to a budget constraint. Each road has a positive integer cost associated with it. The city planners already have a layout, but they need your help to calculate the minimum total cost to make sure every intersection is reachable from any other intersection by constructing or keeping roads. Essentially, they want you to determine the minimum spanning tree (MST) cost of the given graph. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000) - the number of intersections and the number of roads. The next m lines each contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) representing a bidirectional road between intersections u and v with cost w. Output Output a single integer - the total minimum cost to ensure every intersection is reachable from any other intersection. If it\'s impossible to connect all intersections, print \\"Impossible\\". Example Input 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 Output 6 Input 4 2 1 2 1 2 3 2 Output Impossible Note In the first example, the minimum spanning tree can be formed by taking roads with costs 1, 2, and 3, which connects all intersections with a total cost of 6. In the second example, it\'s impossible to connect all intersections, hence the output is \\"Impossible\\".","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def minimum_spanning_tree_cost(n, edges): if n == 1: return 0 uf = UnionFind(n) edges = sorted(edges, key=lambda x: x[2]) mst_cost = 0 edges_used = 0 for u, v, w in edges: if uf.find(u) != uf.find(v): uf.union(u, v) mst_cost += w edges_used += 1 if edges_used == n - 1: return mst_cost else: return \\"Impossible\\""},{"question":"# Objective Write a function `minimumMoves` to determine the minimum number of moves required for a knight to move from its starting position `(x1, y1)` to a target position `(x2, y2)` on a standard 8x8 chessboard. A knight moves in an \\"L\\" shape: two squares in a horizontal or vertical direction, then one square perpendicular, or one square in a horizontal or vertical direction, then two squares perpendicular. # Function Signature ```python def minimumMoves(x1: int, y1: int, x2: int, y2: int) -> int: pass ``` # Input Parameters - `x1`, `y1`, `x2`, `y2`: integers representing the starting and target positions of the knight, where `1 <= x1, y1, x2, y2 <= 8`. # Output - Return an integer representing the minimum number of moves required for the knight to travel from `(x1, y1)` to `(x2, y2)`. # Example ```python assert minimumMoves(1, 1, 8, 8) == 6 assert minimumMoves(1, 1, 6, 7) == 5 ``` # Notes - Assume that `(x1, y1)` and `(x2, y2)` will always be valid positions on the chessboard. - The knight `(\'N\')` can move to any square within the bounds of the 8x8 grid such that each move is within the valid moves of a knight. - Consider implementing a breadth-first search (BFS) algorithm to find the shortest path efficiently.","solution":"from collections import deque def is_valid_position(x, y): Check if the position (x, y) is within the bounds of a standard 8x8 chessboard. return 1 <= x <= 8 and 1 <= y <= 8 def minimumMoves(x1: int, y1: int, x2: int, y2: int) -> int: Calculates the minimum number of moves required for a knight to move from (x1, y1) to (x2, y2). # Directions a knight can move on a chessboard knight_moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] # Initialize BFS visited = set() queue = deque([(x1, y1, 0)]) # queue holds tuples of the form (x, y, current_distance) while queue: current_x, current_y, current_distance = queue.popleft() # If we\'ve reached the target position, return the distance if (current_x, current_y) == (x2, y2): return current_distance # Check all potential moves a knight can make for dx, dy in knight_moves: next_x, next_y = current_x + dx, current_y + dy if is_valid_position(next_x, next_y) and (next_x, next_y) not in visited: visited.add((next_x, next_y)) queue.append((next_x, next_y, current_distance + 1)) # If there is no way to reach the destination (though this should never be the case on an 8x8 chessboard) return -1"},{"question":"You are given an array of integers. Your task is to find a pair of distinct elements in the array such that their sum is equal to a given target integer `k`. If such a pair exists, return the pair as a tuple. If no such pair exists, return `None`. For example: ``` find_pair([10, 15, 3, 7], 17) = (10, 7). 10 + 7 = 17. find_pair([1, 2, 3, 4], 8) = None. No two distinct elements in the array sum up to 8. find_pair([5, 5, 5, 5], 10) = (5, 5). Note that the same element can be used twice if it appears at least twice in the array. ``` Input constraints: 1. Array length `1 <= len(array) <= 1e5` 2. Each element in the array is an integer in the range `-1e9 <= array[i] <= 1e9` 3. The target integer `k` is in the range `-2e9 <= k <= 2e9` More examples in the test cases. Good luck!","solution":"def find_pair(arr, k): Returns a tuple of two distinct elements from the array whose sum is equal to k. If no such pair exists, returns None. seen = {} for num in arr: complement = k - num if complement in seen: return (complement, num) if num in seen: seen[num] += 1 else: seen[num] = 1 return None"},{"question":"Lily is trying to unlock a mysterious door that requires a secret code. She needs to find the smallest number of simple transformations required to turn a given string into a specific target string. # Transformations: 1. **Replace a character**: Change one character in the string to another character. 2. **Insert a character**: Insert a single character at any position in the string. 3. **Delete a character**: Remove a single character from the string. Write a function to help Lily determine the minimum number of transformations needed to convert the source string into the target string. # Input - The first line contains the source string, `source`. - The second line contains the target string, `target`. # Output - Print a single integer representing the minimum number of transformations needed. # Constraints - 1 ≤ |source|, |target| ≤ 1000 - Both strings will consist of lowercase English letters only. # Sample Input 00 ``` horse ros ``` # Sample Output 00 ``` 3 ``` # Sample Input 01 ``` intention execution ``` # Sample Output 01 ``` 5 ``` # Explanation **Sample Input 00**: - To convert `\'horse\'` to `\'ros\'`, you can change `\'h\'` to `\'r\'`, delete `\'o\'` and delete `\'e\'`. Hence, 3 operations. **Sample Input 01**: - To convert `\'intention\'` to `\'execution\'`, use the operations: - Replace `\'i\'` with `\'e\'` - Replace `\'n\'` with `\'x\'` - Replace `\'t\'` with `\'c\'` - Add `\'u\'` - Add `\'n\'` - Total of 5 operations.","solution":"def min_transformations(source, target): Returns the minimum number of transformations to convert source string to target string. m, n = len(source), len(target) # Create a DP table to memoize results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the table with base case values for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If source is empty, insert all characters of target elif j == 0: dp[i][j] = i # If target is empty, delete all characters of source elif source[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If characters match, no change needed else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"In a magical land, you are given a list of potions where each potion has a power level represented by a positive integer. Each potion can be combined with exactly one other potion to form a new potion whose power level is equal to the product of the power levels of the two original potions. You need to determine the maximum power level of a potion that can be formed by combining two different potions from the list. Constraints * The list contains at least 2 and at most 10**5 potions. * Each potion\'s power level is a positive integer no greater than 10**9. Input Input is given from Standard Input in the following format: n (number of potions) p1 p2 ... pn (space-separated power levels of the potions) Output Output a single integer denoting the maximum power level of a potion that can be formed by combining two different potions from the list. Example Input 5 3 7 2 9 5 Output 63 Explanation Combining the potion with power level 7 and the potion with power level 9, we get a potion with power level 7 * 9 = 63, which is the maximum possible. Input 4 8 8 4 4 Output 64 Explanation Combining the potion with power level 8 and another potion with power level 8, we get a potion with power level 8 * 8 = 64, which is the maximum possible. Although the potions have the same power level, they are considered different potions.","solution":"def max_potion_power(n, potions): Returns the maximum power level of a potion that can be formed by combining two different potions from the list. :param n: int - the number of potions. :param potions: list of int - power levels of the potions. :return: int - the maximum power level achievable by combining two potions. if n < 2: raise ValueError(\\"There must be at least two potions to combine.\\") # Find the two largest unique elements in the list. first_max = second_max = 0 for p in potions: if p > first_max: second_max = first_max first_max = p elif p > second_max: second_max = p return first_max * second_max"},{"question":"You are to write a function that takes a string and a character as inputs and returns the number of times the character appears in the string. Your function will accept two arguments: - The first argument should be a string. - The second argument should be a single character. If the inputs do not conform to the necessary types (i.e., the first argument is not a string or the second argument is not a single character), your function should return \\"invalid input\\". # Example: ```python count_occurrences(\\"hello world\\", \'o\') => 2 count_occurrences(\\"hello world\\", \'z\') => 0 count_occurrences(123, \'o\') => \\"invalid input\\" count_occurrences(\\"hello world\\", \\"world\\") => \\"invalid input\\" ``` Good luck!","solution":"def count_occurrences(text, char): Returns the number of times the character appears in the string. Parameters: text (str): the input string char (str): the character to count in the input string Returns: int or str: the count of occurrences of char in text, or \\"invalid input\\" if inputs are invalid if not isinstance(text, str) or not isinstance(char, str) or len(char) != 1: return \\"invalid input\\" return text.count(char)"},{"question":"The land of Eldoria has a complex underground water system that supplies water to various villages. The water system can be represented as a graph where each node is a village and each edge is a pipeline connecting two villages. Each pipeline has a certain capacity that represents the maximum amount of water it can supply. The wise council of Eldoria wants to ensure that in the case of a pipeline failure, the maximum possible water can still be supplied from the main reservoir to the most remote village. They need a program to determine the minimal capacity that, if removed, would result in the maximum reduction of water flow from the reservoir to the most remote village. You are given a directed graph with n nodes and m edges. The nodes are numbered from 1 to n, where node 1 is the main reservoir and node n is the most remote village. Each directed edge (u, v, c) represents a pipeline from node u to node v with capacity c. Write a program to find the minimal capacity of an edge that, if removed, would lead to the maximum reduction in the water flow from the main reservoir to the most remote village. If no such edge exists, return -1. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000), representing the number of nodes and edges in the graph. The next m lines each contain three integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 1000), where u is the starting node, v is the ending node, and c is the capacity of the edge. Output Print a single integer, the minimal capacity of an edge that, if removed, leads to the maximum reduction in the water flow from node 1 to node n. If no such edge exists, print -1. Examples Input 4 5 1 2 10 2 3 5 2 4 15 3 4 10 4 3 10 Output 5 Input 3 3 1 2 10 2 3 20 1 3 5 Output 5","solution":"from collections import defaultdict, deque def bfs(capacity, source, sink, parent): visited = set() queue = deque([source]) visited.add(source) while queue: u = queue.popleft() for v in capacity[u]: if v not in visited and capacity[u][v] > 0: queue.append(v) visited.add(v) parent[v] = u if v == sink: return True return False def edmonds_karp(n, capacity, source, sink): parent = [-1] * (n + 1) max_flow = 0 while bfs(capacity, source, sink, parent): flow = float(\'Inf\') s = sink while s != source: flow = min(flow, capacity[parent[s]][s]) s = parent[s] max_flow += flow v = sink while v != source: u = parent[v] capacity[u][v] -= flow capacity[v][u] += flow v = parent[v] return max_flow def minimal_capacity(n, m, edges): original_capacity = defaultdict(lambda: defaultdict(int)) for u, v, c in edges: original_capacity[u][v] += c max_flow = edmonds_karp(n, original_capacity.copy(), 1, n) if max_flow == 0: return -1 min_capacity = float(\'Inf\') for u, v, c in edges: capacity = original_capacity.copy() capacity[u][v] -= c new_max_flow = edmonds_karp(n, capacity, 1, n) reduction = max_flow - new_max_flow if reduction > 0: min_capacity = min(min_capacity, c) return min_capacity if min_capacity != float(\'Inf\') else -1"},{"question":"Problem Statement You are working on a software that processes geometric shapes. One of the shapes you need to handle is circles. Given a point in 2D space and a list of circles, determine which circles contain the point within their area. A circle can be described by its center coordinates and its radius. A point is inside a circle if the distance from the point to the circle\'s center is less than or equal to the radius of the circle. To clarify, for a point P with coordinates (x_1, y_1) and a circle with center at (x_2, y_2) and radius r, the point P is inside the circle if: sqrt{(x_1 - x_2)^2 + (y_1 - y_2)^2} leq r Your task is to determine how many circles contain the given point. * * * Input The input contains several datasets. Each dataset is described by: - The first line contains a pair of integers p_x and p_y which denotes the coordinates of a point. - The second line contains an integer n (1 leq n leq 100) which represents the number of circles in the dataset. - Each of the next n lines contains three integers c_x, c_y, and r which denote the center coordinates and the radius of a circle. - The final dataset is followed by a single line containing only a single \\"#\\". Output For each dataset, print a single integer representing the number of circles that contain the point. * * * Sample Input 5 5 3 1 1 3 4 4 2 6 6 1 7 9 2 8 10 5 7 7 2 # Output for the Sample Input 1 2 * * * Example Input 5 5 3 1 1 3 4 4 2 6 6 1 7 9 2 8 10 5 7 7 2 # Output 1 2","solution":"import math def point_in_circle(px, py, cx, cy, r): Determines if the point (px, py) is inside the circle centered at (cx, cy) with radius r. distance = math.sqrt((px - cx) ** 2 + (py - cy) ** 2) return distance <= r def circles_containing_point(datasets): Given a list of datasets where each dataset consists of: - a point (px, py) - a number of circles n - a list of circles defined by their center (cx, cy) and radius r This function returns a list of integers where each integer represents the count of circles that contain the given point for each dataset. results = [] i = 0 while i < len(datasets): px, py = datasets[i] n = datasets[i + 1] count = 0 for j in range(n): cx, cy, r = datasets[i + 2 + j] if point_in_circle(px, py, cx, cy, r): count += 1 results.append(count) i += 2 + n return results"},{"question":"Task You are given an array of integers and a number `k`. Your task is to rotate the array `k` times to the right. Here\'s how the rotation works: - If `k` is 3 and the array is [1,2,3,4,5], the steps would be: - [5, 1, 2, 3, 4] (1st rotation) - [4, 5, 1, 2, 3] (2nd rotation) - [3, 4, 5, 1, 2] (3rd rotation) **Note:** - If `k` is greater than the length of the array, you should modulo it by the length of the array before rotating. - Your final function should return the rotated array. **Example:** ``` Input: arr = [1, 2, 3, 4, 5], k = 3 Output: [3, 4, 5, 1, 2] Input: arr = [17, 21, 34, 56], k = 2 Output: [34, 56, 17, 21] ```","solution":"def rotate_array(arr, k): Rotates the array `k` times to the right. Parameters: - arr: List[int] : An array of integers. - k: int : Number of rotations. Returns: - List[int] : The rotated array. n = len(arr) k = k % n # In case k is greater than the length of array return arr[-k:] + arr[:-k]"},{"question":"Isabella is participating in a remote working marathon where she can complete various tasks while taking breaks between them. She can work on a given task only if the time she can start working on it lies within its specified start and finish intervals. Isabella wants to maximize her working time by selecting a subset of non-overlapping tasks. The total working time is the sum of the durations of the selected tasks. Help Isabella determine the maximum total working time she can achieve. -----Input----- The first line contains an integer n (1 leq n leq 2 times 10^5), the number of tasks. The next n lines each contain two integers s_i and f_i (0 leq s_i < f_i leq 10^9), representing the start time and finish time of the i-th task. -----Output----- Output a single integer, the maximum total working time Isabella can achieve by selecting a subset of non-overlapping tasks. -----Examples----- Sample Input 1: 3 1 3 2 5 4 7 Sample Output 1: 5 Sample Input 2: 4 1 2 2 4 3 5 5 8 Sample Output 2: 6","solution":"def max_working_time(n, tasks): tasks.sort(key=lambda x: x[1]) # Sort tasks by their finish times end_time = 0 total_working_time = 0 for task in tasks: if task[0] >= end_time: total_working_time += task[1] - task[0] end_time = task[1] return total_working_time # Example usage: # n = 3 # tasks = [(1, 3), (2, 5), (4, 7)] # print(max_working_time(n, tasks)) # Output: 5"},{"question":"You are organizing a treasure hunt and need to place different types of treasures in a grid. The grid is represented by an `n x m` matrix, where each cell can either be empty (denoted by a \'0\') or contain a treasure of a certain type (denoted by an integer greater than \'0\'). You need to determine the number of distinct types of treasures present in the grid. -----Input----- The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000), representing the dimensions of the grid. The next `n` lines each contain `m` integers, representing the grid where `0` indicates an empty cell and any positive integer indicates a treasure of a certain type. -----Output----- Print a single integer: the number of distinct types of treasures present in the grid. -----Examples----- Input 3 3 0 1 0 2 0 3 0 4 5 Output 5 Input 2 2 1 1 0 0 Output 1 -----Note----- For the first example, the distinct types of treasures in the grid are {1, 2, 3, 4, 5}, so the output is 5. For the second example, the distinct type of treasure in the grid is {1}, so the output is 1.","solution":"def count_distinct_treasures(n, m, grid): Counts the distinct types of treasures in the grid. :param n: int, number of rows in the grid :param m: int, number of columns in the grid :param grid: List[List[int]], the grid representation with treasures :return: int, the number of distinct treasure types treasure_set = set() for row in grid: for item in row: if item > 0: treasure_set.add(item) return len(treasure_set)"},{"question":"A leading telecommunications company is tracking usage data of their customers. Each customer is represented by an alphanumeric user ID and their usage logs consist of multiple call records. Each call record includes the duration of the call in minutes. The company wants to identify top customers based on total call durations for a specific range of dates. You have to implement a function that returns the user ID of the customer with the maximum total call duration during the specified date range. Input: The first line contains an integer N, the number of call records. The next N lines each contain a call record in the format: ``` userID date duration ``` where - `userID` is the alphanumeric identifier of the customer. - `date` is the date of the call in `YYYY-MM-DD` format. - `duration` is the duration of the call in minutes. The last line contains two dates: ``` startDate endDate ``` where - `startDate` is the beginning of the date range in `YYYY-MM-DD` format. - `endDate` is the end of the date range in `YYYY-MM-DD` format. Output: The user ID of the customer with the highest total call duration within the given date range. If there are multiple customers with the same maximum call duration, return the one that appears first in the input list. Constraints: 1 ≤ N ≤ 10^4 1 ≤ duration ≤ 1440 (minutes in a day) Dates are guaranteed to be valid. startDate ≤ endDate SAMPLE INPUT 5 user1 2023-01-01 30 user2 2023-01-02 45 user1 2023-01-04 60 user3 2023-01-03 50 user2 2023-01-03 40 2023-01-01 2023-01-03 SAMPLE OUTPUT user2","solution":"def get_top_customer(call_records, start_date, end_date): from collections import defaultdict import datetime call_durations = defaultdict(int) start_date = datetime.datetime.strptime(start_date, \\"%Y-%m-%d\\") end_date = datetime.datetime.strptime(end_date, \\"%Y-%m-%d\\") for record in call_records: user_id, date, duration = record date = datetime.datetime.strptime(date, \\"%Y-%m-%d\\") if start_date <= date <= end_date: call_durations[user_id] += int(duration) max_duration = -1 top_customer = None for user_id, total_duration in call_durations.items(): if total_duration > max_duration: max_duration = total_duration top_customer = user_id return top_customer"},{"question":"The history teacher loves playing number games with his students to keep them engaged. One day, he wrote down a sequence of N integers on the whiteboard and asked the students to find out how many distinct pairs (i, j) (i < j) exist such that the sum of the numbers in each pair is an odd number. ------ Input ------ The first line of the input contains an integer T, denoting the number of test cases. For each test case: - The first line contains the integer N. - The second line contains N integers a_1, a_2, ..., a_N denoting the sequence. ------ Output ------ For each test case, output a single line containing the number of distinct pairs (i, j) where the sum of a_i and a_j is an odd number. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^3 1 ≤ a_i ≤ 10^9 ------ Sample Input 1 ------ 2 3 1 2 3 4 1 1 2 2 ------ Sample Output 1 ------ 2 4 ------ Explanation 1 ------ Test case 1: N = 3 and the sequence is {1, 2, 3}. The pairs with odd sums are (1, 2) and (2, 3). So, the output is 2. Test case 2: N = 4 and the sequence is {1, 1, 2, 2}. The pairs with odd sums are (1, 2), (1, 2), (1, 2), and (1, 2). So, the output is 4.","solution":"def count_odd_sum_pairs(test_cases): results = [] for case in test_cases: N, sequence = case odd_count = sum(1 for x in sequence if x % 2 != 0) even_count = N - odd_count results.append(odd_count * even_count) return results def parse_input(input_string): data = input_string.split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) sequence = list(map(int, data[index + 1: index + 1 + N])) test_cases.append((N, sequence)) index += N + 1 return test_cases"},{"question":"The intersection of two arrays can be found using a variety of methods. Write a function that takes two arrays of integers and returns their intersection. The returned array must contain unique values only, and the order of elements in the output does not matter. -----Constraints----- - Each element in the input arrays is an integer. - The arrays are not necessarily of the same length. - The elements in the arrays can be both positive and negative numbers. -----Function Signature----- def array_intersection(arr1: List[int], arr2: List[int]) -> List[int]: -----Input----- - Two arrays of integers `arr1` and `arr2`. -----Output----- - An array containing the unique intersection of the two input arrays. -----Sample Input----- arr1 = [1, 2, 2, 1] arr2 = [2, 2] -----Sample Output----- [2] -----Sample Input----- arr1 = [4, 9, 5] arr2 = [9, 4, 9, 8, 4] -----Sample Output----- [4, 9] You only need to write the function. Do not handle input/output in your solution.","solution":"from typing import List def array_intersection(arr1: List[int], arr2: List[int]) -> List[int]: Returns the intersection of two arrays as a list, containing unique values only. # Use sets to find the intersection set1 = set(arr1) set2 = set(arr2) # Return the intersection of the two sets return list(set1 & set2)"},{"question":"On their birthday, you\'ve decided to give your friend a unique gift—a special string. This string will be created by rearranging the characters of a given string so that no two adjacent characters are the same. If it\'s not possible to rearrange the string in such a way, you should let your friend know. -----Input----- The input consists of a single string s containing only lowercase English letters (1 ≤ |s| ≤ 1000). -----Output----- If it is possible to rearrange the characters of the string such that no two adjacent characters are the same, print \\"YES\\" (without quotes), followed by the rearranged string. If there are multiple valid rearrangements, print any of them. If it\'s not possible, print \\"NO\\" (without quotes). -----Examples----- Input aabb Output YES abab Input aaab Output NO Input abc Output YES abc","solution":"import heapq from collections import Counter def rearrange_string(s): # Count the frequency of each character counter = Counter(s) max_frequency = max(counter.values()) # If at any position the maximum frequency is more than half the length of the string rounded up, return NO if max_frequency > (len(s) + 1) // 2: return (\\"NO\\",) # Use a max heap to store characters by their frequencies max_heap = [(-freq, char) for char, freq in counter.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \\"\\" result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # If there\'s a previous character, add it back to the heap when it\'s available (prev_freq < 0) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Store the current character and reduce its frequency prev_freq, prev_char = freq + 1, char return (\\"YES\\", \\"\\".join(result)) # Testing the function print(rearrange_string(\\"aabb\\")) # expects (\'YES\', \'abab\') print(rearrange_string(\\"aaab\\")) # expects (\'NO\',) print(rearrange_string(\\"abc\\")) # expects (\'YES\', \'abc\')"},{"question":"In this problem, you are asked to implement a basic text formatting engine which processes a document according to specified formatting commands. Each command manipulates either the case or the alignment of the text in specific ways. The possible commands are as follows: - `UPPER`: Converts all characters in the text to uppercase. - `LOWER`: Converts all characters in the text to lowercase. - `CAPITALIZE`: Converts the first character of each word in the text to uppercase and the rest to lowercase. - `LEFT <N>`: Aligns the text to the left within a width of N characters. If the text is shorter than N characters, it adds spaces to the right to make the total length equal to N. - `RIGHT <N>`: Aligns the text to the right within a width of N characters. If the text is shorter than N characters, it adds spaces to the left to make the total length equal to N. - `CENTER <N>`: Centers the text within a width of N characters. If the text length is less than N, it adds spaces equally to both sides (if N - length of text is odd, the extra space is added to the right). The input consists of a series of commands followed by the text to be formatted. Each command is given on a new line. The series of commands ends with a line that contains only the word `END`, followed by the text that needs to be formatted. The text starts from the next line and might span multiple lines until the end of input. Your task is to process the input commands and print the formatted text as per the last command executed on previously given text in a single line. Input The input starts with a sequence of commands, each on a new line, ending with the line `END`. The text to format starts from the next line and spans multiple lines until the end of the input. Output Your output should contain the formatted text in a single line as per the last command executed. Example Input LOWER CAPITALIZE LEFT 20 END HeLLo, WOrLD! How Are YoU? Output Hello, world! how are you? In this example, the initial text \\"HeLLo, WOrLD! How Are YoU?\\" is first converted to lowercase, then capitalized, and finally left-aligned with a width of 20 characters. However, since the text length exceeds 20 characters after capitalization, it is returned in its original length without any additional spaces. The output shows the transformed text as a single line.","solution":"def text_formatting(commands, text): Processes text according to formatting commands. full_text = \' \'.join(text).strip() for command in commands: com = command.split() if com[0] == \'UPPER\': full_text = full_text.upper() elif com[0] == \'LOWER\': full_text = full_text.lower() elif com[0] == \'CAPITALIZE\': full_text = full_text.title() elif com[0] == \'LEFT\': width = int(com[1]) full_text = full_text.ljust(width) elif com[0] == \'RIGHT\': width = int(com[1]) full_text = full_text.rjust(width) elif com[0] == \'CENTER\': width = int(com[1]) full_text = full_text.center(width) return full_text"},{"question":"You are given an integer n, the number of steps in a staircase. Your task is to calculate the number of distinct ways to climb to the top of the staircase, adhering to the following conditions: 1. At each step, you can either climb 1 step, 2 steps, or 3 steps. 2. You start at the ground (step 0) and aim to reach step n. Input Format A single integer, n, representing the total number of steps in the staircase. Constraints 1 leq n leq 10^5 Output Format Print a single integer representing the number of distinct ways to reach the top of the staircase. Sample Input 5 Sample Output 13 Explanation For n = 5, the possible ways to reach step 5 are: - 1+1+1+1+1 - 1+1+1+2 - 1+1+2+1 - 1+2+1+1 - 2+1+1+1 - 1+2+2 - 2+1+2 - 2+2+1 - 1+1+3 - 1+3+1 - 3+1+1 - 2+3 - 3+2 Thus, there are a total of 13 ways to reach step 5.","solution":"def count_ways_to_climb_stairs(n): Returns the number of ways to climb a staircase with n steps, where you can take 1, 2, or 3 steps at a time. if n == 0: return 0 elif n == 1: return 1 elif n == 2: return 2 elif n == 3: return 4 ways = [0] * (n + 1) ways[0] = 1 ways[1] = 1 ways[2] = 2 ways[3] = 4 for i in range(4, n + 1): ways[i] = ways[i - 1] + ways[i - 2] + ways[i - 3] return ways[n] # Example usage n = 5 print(count_ways_to_climb_stairs(n)) # Output: 13"},{"question":"Given a rectangular grid of size n x m (1 ≤ n, m ≤ 10^5), and q queries (1 ≤ q ≤ 10^5), you need to handle two types of operations efficiently: 1. **Update Operation**: Update the value in a specific cell of the grid. 2. **Sum Operation**: Calculate the sum of values in a subgrid. Initially, all values in the grid are 0. Each query can be one of the following two types: - `1 x y val`: Update the cell at row `x` and column `y` to the new value `val`. - `2 x1 y1 x2 y2`: Calculate the sum of values in the subgrid with corners (x1, y1) and (x2, y2). You need to process these queries and output the results for all sum queries. -----Input----- The first line contains three integers n, m, and q. Each of the next q lines contains a query in one of the two forms mentioned above. 1. `1 x y val` (1 ≤ x ≤ n, 1 ≤ y ≤ m, |val| ≤ 10^9): This query updates the value at cell (x, y) to `val`. 2. `2 x1 y1 x2 y2` (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m): This query asks to find the sum of all values in the subgrid from (x1, y1) to (x2, y2), inclusive. -----Output----- For each sum query, print the sum of values in the specified subgrid. -----Example----- Input 3 3 6 1 1 1 5 1 2 2 3 1 3 3 7 2 1 1 3 3 1 2 3 4 2 1 1 3 3 Output 15 19","solution":"class Grid: def __init__(self, n, m): self.n = n self.m = m self.grid = [[0] * m for _ in range(n)] self.prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] def update(self, x, y, val): self.grid[x-1][y-1] = val self._compute_prefix_sum() def _compute_prefix_sum(self): for i in range(self.n): for j in range(self.m): self.prefix_sum[i + 1][j + 1] = ( self.grid[i][j] + self.prefix_sum[i][j + 1] + self.prefix_sum[i + 1][j] - self.prefix_sum[i][j] ) def sum_region(self, x1, y1, x2, y2): return ( self.prefix_sum[x2][y2] - self.prefix_sum[x1 - 1][y2] - self.prefix_sum[x2][y1 - 1] + self.prefix_sum[x1 - 1][y1 - 1] ) def process_queries(n, m, queries): grid = Grid(n, m) results = [] for query in queries: if query[0] == 1: _, x, y, val = query grid.update(x, y, val) elif query[0] == 2: _, x1, y1, x2, y2 = query results.append(grid.sum_region(x1, y1, x2, y2)) return results"},{"question":"In the potluck event organized by Alice, participants are required to bring dishes to the event. Alice wants to ensure that the total number of dishes brought is as evenly distributed among participants as possible. Each participant must bring at least one dish but no more than k dishes. Given the number of participants n and the total number of dishes m that Alice desires, determine the count of dishes every participant should bring such that the distribution is as even as possible. If there are multiple possible distributions, choose the one which maximizes the minimum number of dishes any participant brings. Help Alice by calculating the number of dishes each participant should bring and any remaining dishes, if equally distributing them is not possible. -----Input----- The input consists of two integers: - n (1 leq n leq 100): the number of participants. - m (1 leq m leq 1000): the total number of dishes. -----Output----- Output n integers representing the number of dishes each participant should bring. If it is not possible to bring all m dishes with the given constraints (i.e., some participants would have to bring more than k dishes), print [-1]. -----Examples----- Input 3 10 Output 3 3 4 Input 5 20 Output 4 4 4 4 4 Input 4 2 Output [-1] -----Note----- In the first example, to divide 10 dishes among 3 participants as evenly as possible, two participants bring 3 dishes each, and one participant brings 4 dishes. In the second example, each of the 5 participants can bring 4 dishes to make the total 20 dishes. In the third example, it is not possible to divide 2 dishes among 4 participants since each participant must bring at least one dish.","solution":"def distribute_dishes(n, m): Distribute m dishes as evenly as possible among n participants. Each participant must bring at least one dish. Parameters: n (int): number of participants m (int): total number of dishes Returns: List[int]: A list of length n representing the number of dishes each participant should bring, or [-1] if not possible. if n > m: return [-1] base_dishes = m // n extra_dishes = m % n result = [base_dishes] * n for i in range(extra_dishes): result[i] += 1 return result"},{"question":"Sarah is an artist working on a large mosaic project. The mosaic consists of small square tiles arranged in a grid with `h` rows and `w` columns. Each tile is either colored or empty (unfilled). Sarah wants to find the smallest rectangle that can completely cover all the colored tiles in the grid. The rectangle sides must be parallel to the grid sides. Write a program that will help Sarah determine the coordinates of the top-left and bottom-right corners of the smallest rectangle covering all the colored tiles. # Input: The first line contains two integers `h` and `w` (1 ≤ h, w ≤ 1000) — the dimensions of the grid. Next `h` lines describe the grid, with each line containing `w` characters: - `.` represents an empty tile. - `#` represents a colored tile. # Output: If the grid contains at least one colored tile, print four integers — the zero-based coordinates of the top-left corner (row, column) and the bottom-right corner (row, column) of the smallest rectangle that covers all the colored tiles. If there are no colored tiles, output `No colored tiles`. # Example: Input: ``` 6 8 ........ ...... ..#... ...#.... ...#.... ........ ``` Output: ``` 1 2 4 4 ``` Input: ``` 3 5 ..... ..... ..... ``` Output: ``` No colored tiles ``` Note: Ensure your program runs efficiently even for the largest grid sizes.","solution":"def find_colored_rectangle(h, w, grid): min_row, min_col = h, w max_row, max_col = -1, -1 for i in range(h): for j in range(w): if grid[i][j] == \'#\': if i < min_row: min_row = i if i > max_row: max_row = i if j < min_col: min_col = j if j > max_col: max_col = j if min_row == h: # This means no \\"#\\" was found return \\"No colored tiles\\" return min_row, min_col, max_row, max_col"},{"question":"Farmer John has a rectangular field, represented as a grid of size n x m (1 ≤ n, m ≤ 500). Each cell in the grid can either be fertile land or barren land. Bessie the cow loves to graze on fertile land and avoid barren land. Farmer John wants to help Bessie by determining the maximum size of the square plot of fertile land he can find in his field. The plot must consist only of fertile land. Write a program to determine the size of the largest square plot of fertile land. -----Input----- The first line contains two integers n and m. The next n lines contain m characters each, representing the field: - \'1\' indicates fertile land. - \'0\' indicates barren land. -----Output----- Print a single integer: the area of the largest square plot of fertile land. -----Examples----- Input 5 6 101010 111111 111110 111110 111000 Output 9 Input 4 4 1010 1111 1011 1011 Output 4","solution":"def max_fertile_square(n, m, field): if n == 0 or m == 0: return 0 dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if field[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side def max_fertile_square_from_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) field = data[2:] print(max_fertile_square(n, m, field))"},{"question":"You have been given a sequence of integers, and you are to determine whether it is a \\"mountain\\" sequence. A sequence is considered a \\"mountain\\" if and only if: 1. There exists a peak element such that elements before the peak are in strictly increasing order. 2. Elements after the peak are in strictly decreasing order. 3. The peak itself must be greater than both its adjacent elements. Your task is to determine if each sequence provided is a mountain sequence or not. Input The first line of input contains an integer n, the number of sequences. Each of the next n lines contains a sequence of integers separated by spaces. Output For each sequence, output \\"YES\\" if it is a mountain sequence, otherwise output \\"NO\\". Constraints 1 ≤ n ≤ 100 1 ≤ length of any sequence ≤ 1000 -10^5 ≤ elements of any sequence ≤ 10^5 Example Input: 3 1 2 3 4 3 2 1 1 2 3 2 1 1 2 3 4 5 Output: YES YES NO","solution":"def is_mountain_sequence(sequence): n = len(sequence) if n < 3: return \\"NO\\" peak_index = 0 # Get to the peak while peak_index + 1 < n and sequence[peak_index] < sequence[peak_index + 1]: peak_index += 1 if peak_index == 0 or peak_index == n - 1: return \\"NO\\" # Decend from the peak while peak_index + 1 < n and sequence[peak_index] > sequence[peak_index + 1]: peak_index += 1 return \\"YES\\" if peak_index == n - 1 else \\"NO\\" def check_sequences(num_sequences, sequences): results = [] for sequence in sequences: results.append(is_mountain_sequence(sequence)) return results"},{"question":"You are a software engineer at a company that stores a vast amount of data across multiple databases. Each database is represented as a grid where each cell contains numerical data. The company wants an efficient way to identify and sum up only the unique integers that appear in each row of each grid. Your task is to implement a function that takes several grids as input, processes each row to find the unique integers, and returns the result as specified. # Input Format - The first line contains an integer `n` (1 ≤ n ≤ 50), the number of grids. - For each grid, first line contains two integers `r` and `c` (1 ≤ r, c ≤ 50), the number of rows and columns in the grid. - Each of the next `r` lines contains `c` integers, separated by a space (1 ≤ integer value ≤ 100). # Output Format For each grid, you should output `r` lines. Each line contains the sum of unique integers in the corresponding row. # Example Input: ``` 2 3 3 1 2 3 4 4 4 1 2 2 2 2 2 3 3 3 1 2 ``` Output: ``` 6 4 3 5 6 3 ``` Explanation: - For the first grid: - Row 1: unique integers are 1, 2, 3. Their sum is 1 + 2 + 3 = 6. - Row 2: unique integer is 4 (even though it appears multiple times). Sum is 4. - Row 3: unique integers are 1, 2. Their sum is 1 + 2 = 3. - For the second grid: - Row 1: unique integers are 2, 3. Their sum is 2 + 3 = 5. - Row 2: unique integers are 3, 3. Their sum is 6 (note that 3 only counts once even though it appears twice). - Row 3: unique integer is 1 + 2 = 3. Implement a function to handle this task efficiently.","solution":"def sum_unique_integers_in_rows(grid): Given a grid (list of lists of integers), returns a list of sums of unique integers for each row. result = [] for row in grid: unique_integers = set(row) row_sum = sum(unique_integers) result.append(row_sum) return result def process_grids(n, grid_data): Processes multiple grids based on the given data. :param n: Number of grids :param grid_data: List of tuples, where each tuple contains the grid details (r, c, grid) :return: A list of results for each grid, where each result is a list of sums of unique integers for each row. results = [] for grid in grid_data: r, c, rows = grid result = sum_unique_integers_in_rows(rows) results.append(result) return results"},{"question":"You have a sequence of positive integers where each integer represents the number of steps you can jump forward in that position. For example, if the sequence is [3, 2, 1], from the first position, you can jump up to 3 positions forward, from the second position, you can jump up to 2 positions forward, and from the third position, you can jump up to 1 position forward. Your task is to find the minimum number of jumps required to reach the end of the sequence starting from the first position. If it is not possible to reach the end of the sequence, return -1. -----Input----- The first line contains a positive integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n integers a_i (1 ≤ a_i ≤ 1000) — the number of steps you can jump forward from the i-th position. -----Output----- Print the minimum number of jumps required to reach the end of the sequence. If it is not possible to reach the end, print -1. -----Examples----- Input 5 2 3 1 1 4 Output 2 Input 6 1 1 1 1 0 1 Output -1 -----Note----- In the first example, you can reach the end of the sequence with the following jumps: 1. Jump from position 1 to position 2 (step size = 2). 2. Jump from position 2 to position 5 (step size = 3). In the second example, it is not possible to reach the end of the sequence as the 5th position has 0 steps, blocking any further movement.","solution":"def min_jumps_to_end(n, sequence): if n <= 0 or not sequence: return -1 jumps = [0] * n max_reach = 0 steps = 0 last_jump_pos = 0 for i in range(n): if i > max_reach: return -1 max_reach = max(max_reach, i + sequence[i]) if i == last_jump_pos: if i != n - 1: steps += 1 last_jump_pos = max_reach if last_jump_pos >= n - 1: break return -1 if max_reach < n - 1 else steps"},{"question":"You are given a list of integers representing the pixel values of an image, arranged in a 2D square grid of size N x N. Your task is to rotate the image 90 degrees clockwise. Example: Given the following matrix: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] After rotating 90 degrees clockwise, the resulting matrix should be: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] Your task is to write a function to perform this rotation and return the resulting matrix. Input Format: - The first line of input contains a single integer T, the number of test cases. - For each test case: - The first line contains a single integer N, the size of the N x N grid. - The next N lines each contain N space-separated integers, representing the pixel values of the image. Output Format: - For each test case, output the rotated matrix, one row per line. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ pixel value ≤ 255 SAMPLE INPUT 2 3 1 2 3 4 5 6 7 8 9 2 10 20 30 40 SAMPLE OUTPUT 7 4 1 8 5 2 9 6 3 30 10 40 20 Explanation: - In the first test case, we start with the matrix: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] After rotating 90 degrees clockwise, the resulting matrix is: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] - In the second test case, the 2x2 matrix is rotated to: [ [30, 10], [40, 20] ]","solution":"def rotate_matrix_90_clockwise(matrix): Rotates an NxN matrix 90 degrees clockwise. N = len(matrix) # Create a new matrix to hold the rotated values rotated_matrix = [[0 for _ in range(N)] for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N - 1 - i] = matrix[i][j] return rotated_matrix def process_test_cases(test_cases): results = [] for case in test_cases: N, matrix = case rotated = rotate_matrix_90_clockwise(matrix) results.append(rotated) return results"},{"question":"Write a function that takes a list of integers and returns all unique permutations of that list in lexicographic order. -----Constraints----- - Assume that all elements in the input list are integers. - The input list can contain duplicate values. - The length of the list will not exceed 10. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Where: - n is the number of integers. - a_1, a_2, ..., a_n are the integers in the list. -----Output----- Print all unique permutations, each permutation on a new line. Permutations should be printed in lexicographic order. -----Example Input----- 3 1 2 2 -----Example Output----- 1 2 2 2 1 2 2 2 1 For this case, the input list is [1, 2, 2]. The function should return the three unique permutations in lexicographic order: [1, 2, 2], [2, 1, 2], and [2, 2, 1].","solution":"from itertools import permutations def unique_permutations(n, lst): Returns all unique permutations of given list `lst` in lexicographic order. :param n: The number of integers in the list. :param lst: The list of integers. :return: List of unique permutations in lexicographic order. unique_perm_set = set(permutations(lst, n)) sorted_unique_perm = sorted(unique_perm_set) return sorted_unique_perm # Example usage: if __name__ == \\"__main__\\": n = int(input().strip()) lst = list(map(int, input().strip().split())) result = unique_permutations(n, lst) for perm in result: print(\\" \\".join(map(str, perm)))"},{"question":"Given two arrays, X and Y, both of length N. Array X represents the scores of students in a subject where higher is better, while array Y represents their negative qualities where a lower value means better. You need to write a function to compute the \\"overall merit\\" of each student, defined as the difference between their score and their negative quality (X[i] - Y[i]). The final goal is to return a list of tuples where each tuple consists of a student\'s index (0-based) and their overall merit in decreasing order of merit. In the case of ties in merit, the student with a lower index should come first. INPUT: The first line contains an integer T, the number of test cases. Each test case consists of two lines: the first line contains an integer N (the number of students), and the second line contains 2*N space-separated integers representing the arrays X and Y, with the first N integers for X and the next N integers for Y. OUTPUT: For each test case, output on a new line the resulting list of tuples for that test case. CONSTRAINTS 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^3 -10^4 ≤ X[i], Y[i] ≤ 10^4 SAMPLE INPUT 2 3 50 60 70 5 10 15 4 20 40 30 10 15 25 35 5 SAMPLE OUTPUT [(2, 55), (1, 50), (0, 45)] [(1, 25), (2, 25), (0, 10), (3, 5)] EXPLANATION In the first test case: - Student 0 has merit 50 - 5 = 45 - Student 1 has merit 60 - 10 = 50 - Student 2 has merit 70 - 15 = 55 The overall merits are [(2, 55), (1, 50), (0, 45)] In the second test case: - Student 0 has merit 20 - 10 = 10 - Student 1 has merit 40 - 15 = 25 - Student 2 has merit 30 - 25 = 5 - Student 3 has merit 35 - 5 = 30 The overall merits are [(3, 30), (1, 25), (2, 5), (0, 10)]","solution":"def compute_merit(X, Y): Computes the overall merit of each student as X[i] - Y[i] and returns a list of tuples where each tuple consists of a student\'s index and their overall merit in decreasing order of merit. merits = [(i, X[i] - Y[i]) for i in range(len(X))] # Sort by merit descending, and by index ascending if merits are equal merits.sort(key=lambda x: (-x[1], x[0])) return merits def solve(T, test_cases): results = [] for i in range(T): N, data = test_cases[i] X = data[:N] Y = data[N:] results.append(compute_merit(X, Y)) return results"},{"question":"Given a list of integers, determine if the list contains any duplicates. Your task is to write a function that checks for the presence of duplicates and returns a boolean value indicating whether any duplicates exist. # Function Signature: ```python def has_duplicates(numbers: List[int]) -> bool: ``` # Input: * A list of integers `numbers` where 1 <= len(numbers) <= 10^6 # Output: * Return `True` if there are any duplicate elements in the list; otherwise, return `False`. # Example: ```python print(has_duplicates([1, 2, 3, 4, 5])) # Output: False print(has_duplicates([1, 2, 2, 3, 4])) # Output: True print(has_duplicates([1, 1, 1, 1])) # Output: True print(has_duplicates([])) # Output: False ``` # Notes: * The solution should be efficient with respect to time and space complexity due to the potential large input size. * Consider edge cases, such as an empty list or a list with all unique elements.","solution":"from typing import List def has_duplicates(numbers: List[int]) -> bool: Checks if there are any duplicates in the list of integers. Args: numbers: List[int]: List of integers to be checked for duplicates. Returns: bool: True if there are any duplicates, False otherwise. return len(numbers) != len(set(numbers))"},{"question":"Alicia loves palindromes and she wants to create new ones from existing strings. Given a string s consisting of lowercase Latin letters, Alicia can replace each character of the string s with any other lowercase Latin letter. She wants to know the minimum number of changes needed to make the string a palindrome. A string is called a palindrome if it reads the same backward as forward. For example, the string “abccba” is a palindrome while the string “abcd” is not. Help Alicia determine the minimum number of character changes required to make the string s a palindrome. -----Input----- The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. The next t lines each contain a single string s (1 leq mid s mid leq 10^5) consisting of lowercase Latin letters. It is guaranteed that the total length of all strings does not exceed 10^6. -----Output----- Print t lines. Each line should contain a single integer — the minimum number of changes required for the corresponding test case to make the string s a palindrome. -----Examples----- Input 4 abc aab abcd racecar Output 1 1 2 0 -----Note----- In the first example test case, the string “abc” can be changed to “aba” or “cbc” by changing one character, making it a palindrome. In the second example test case, “aab” can be changed to “aba” by changing only one character. In the third example test case, “abcd” requires at least two changes: “abcd” to “abca” to “abba”. In the fourth example test case, the string “racecar” is already a palindrome, so no changes are needed.","solution":"def min_changes_to_palindrome(s): Returns the minimum number of changes needed to make the string s a palindrome. n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_changes_to_palindrome(s)) return results"},{"question":"In a remote kingdom, there are N magical gates arranged in a straight line. Each gate has a certain power level associated with it, which can be represented as an integer. The ruler of the kingdom, King Azarus, has a special operation he can perform on any continuous subarray of gates: he can select the subarray and increase or decrease the power level of each gate in the subarray by 1. King Azarus wants to modify the power levels of the gates in such a way that the absolute difference between the power levels of any two consecutive gates is minimized across the entire array. Your task is to determine the value of this minimized absolute difference after performing the operation optimally once on one continuous subarray of gates. INPUT: - The first line of the input contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of gates. - The second line contains N space-separated integers, the power levels of the gates. OUTPUT: For each test case, output a single integer, the minimized absolute difference. CONSTRAINTS: 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 -10^6 ≤ power level ≤ 10^6 SAMPLE INPUT: 2 4 1 3 2 4 5 -3 -1 4 0 2 SAMPLE OUTPUT: 1 1 Explanation: In the first test case, the optimal solution is to choose the subarray starting from the 2nd gate to the 3rd gate and decrease the power level by 1, resulting in the array [1, 2, 1, 4]. The minimum absolute difference between consecutive gates is now 1. In the second test case, the optimal solution is to choose the subarray starting from the 3rd gate to the 5th gate and decrease the power level by 1, resulting in the array [-3, -1, 3, -1, 1]. The minimum absolute difference between consecutive gates is now 1.","solution":"def minimized_absolute_difference(test_cases): results = [] for case in test_cases: N, gates = case gates.sort() min_difference = float(\'inf\') for i in range(1, N): min_difference = min(min_difference, abs(gates[i] - gates[i-1])) results.append(min_difference) return results def parse_test_cases(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) gates = list(map(int, lines[index+1].split())) test_cases.append((N, gates)) index += 2 return test_cases"},{"question":"You are given an array of n integers. An operation consists of picking any two elements from the array, removing them, and inserting their sum back into the array. You need to perform exactly n-1 operations to reduce the array to a single element. Your task is to find the largest possible value of the element remaining in the array after performing these operations. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line contains an integer n (number of elements in the array). The second line contains n space-separated integers, which are the elements of the array. ------ Output ------ For each test case, output a single line containing the largest possible value of the element remaining in the array after performing n-1 operations. ------ Constraints ------ 1 ≤ T ≤ 50 2 ≤ n ≤ 1000 1 ≤ a[i] ≤ 10^9 ------ Sample Input 1 ------ 2 3 1 2 3 4 5 1 3 4 ------ Sample Output 1 ------ 6 13 ------ Explanation 1 ------ Example case 1: You can perform the following operations: 1. Pick 1 and 2, sum is 3, array becomes [3, 3]. 2. Pick 3 and 3, sum is 6, array becomes [6]. Example case 2: You can perform the following operations: 1. Pick 5 and 4, sum is 9, array becomes [1, 3, 9]. 2. Pick 1 and 3, sum is 4, array becomes [4, 9]. 3. Pick 4 and 9, sum is 13, array becomes [13].","solution":"def largest_possible_value_after_operations(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] array = test_cases[i][1] # For the maximum final value, we need to sum all elements of the array max_value = sum(array) results.append(max_value) return results"},{"question":"You are given a string `s` which consists only of lowercase letters, and you are allowed to perform only one operation on it: choose any one of its characters and delete it. Your task is to find the length of the longest substring with all unique characters that you can obtain after performing the operation. Input The first line contains a single string `s` (1 ≤ |s| ≤ 1000). Output Print a single integer: the length of the longest substring with all unique characters that can be obtained after deleting one character from the string. Examples Input abcde Output 4 Input abac Output 3 Input aaaa Output 1 Input abcd Output 3 Note In the first example, you can delete any character (\'a\', \'b\', \'c\', \'d\', or \'e\') to get a substring like \\"abcd\\", \\"abce\\", or any other combination that has exactly 4 unique characters. In the second example, you can delete the second \'a\' to get a substring \\"abc\\" which has all unique characters. In the third example, since all characters are \'a\', deleting one still leaves only \'a\'s, so the longest substring with unique characters will only have length 1.","solution":"def longest_unique_substring_after_deletion(s): Returns the length of the longest substring with all unique characters that can be obtained after deleting exactly one character from the string s. n = len(s) if n <= 1: return 0 max_len = 0 for i in range(n): # Generate a new string by skipping the i-th character new_s = s[:i] + s[i+1:] unique_chars = set(new_s) max_len = max(max_len, len(unique_chars)) return max_len"},{"question":"Given a string, you need to determine if it consists of two alternating characters. The characters must alternate without interruption throughout the entire string. -----Constraints----- - 1 leq n leq 10000 - The string will contain only lowercase English letters. -----Input----- Input is given from Standard Input in the following format: s -----Output----- Print \\"YES\\" if the string consists of exactly two alternating characters, and \\"NO\\" otherwise. -----Sample Input----- abababab -----Sample Output----- YES -----Sample Input----- ababacabab -----Sample Output----- NO Explanation: - In the first case, the string \\"abababab\\" alternates between \'a\' and \'b\', so the output is \\"YES\\". - In the second case, the string \\"ababacabab\\" introduces a third character \'c\', so it fails to maintain the alternating pattern and the output is \\"NO\\".","solution":"def is_two_alternating_characters(s): Determines if the string consists of two alternating characters. if len(s) < 2: return \\"NO\\" first_char = s[0] second_char = None for char in s[1:]: if char != first_char: second_char = char break if second_char is None: return \\"NO\\" for i in range(len(s)): expected_char = first_char if i % 2 == 0 else second_char if s[i] != expected_char: return \\"NO\\" return \\"YES\\""},{"question":"A large corporation has a hierarchy structured in the form of a tree. Each employee has a unique ID, and the CEO is the root of the tree. Every other employee has exactly one direct manager. The employees are numbered from 1 to n, where 1 is the CEO, and integers from 2 to n represent other employees. Given the hierarchy, the corporation wants to find the depth of each employee in the tree. The depth of an employee is the number of edges from the root (CEO) to that employee. Input The first line contains an integer n (1 ≤ n ≤ 105) which represents the number of employees in the company. The second line contains n-1 integers where the i-th integer represents the ID of the direct manager of the employee with ID i+2. Output Print n integers where the i-th integer represents the depth of the employee with ID i+1. SAMPLE INPUT 5 1 1 2 2 SAMPLE OUTPUT 0 1 1 2 2","solution":"def employee_depths(n, managers): Returns a list where the i-th element represents the depth of the employee with ID i+1. # Initialize the depth list with 0 for the CEO depths = [0] * n # Calculate depths for employees 2 to n for i in range(1, n): manager_id = managers[i-1] depths[i] = depths[manager_id - 1] + 1 return depths"},{"question":"Nina loves palindromes, especially numeric palindromes. A numeric palindrome is a number that remains the same when its digits are reversed. Similar to Nina, Lisha loves even numbers. Your task is: given an integer m, find a numeric palindrome of length m which is also an even number. If such a number doesn\'t exist, return -1. Input The single line contains one integer, m (1 ≤ m ≤ 100) — the length of the palindrome. Output Print one even numeric palindrome of length m without leading zeroes, or -1 if such a number doesn\'t exist. If there are multiple possible answers, you are allowed to print any of them. Examples Input 4 Output 2002 Input 3 Output -1","solution":"def even_palindrome(m): Finds a numeric palindrome of length m which is also an even number. If such a number doesn\'t exist, returns -1. if m == 1: # If the length is 1, the only single-digit even numbers are 2, 4, 6, 8, which are palindromes themselves. return 2 # Any single digit even number is a palindrome if m % 2 != 0: # If m is odd, it\'s not possible to construct an even palindrome. return -1 # Constructing even palindrome for even length half_length = m // 2 palindrome = \'2\' + \'0\' * (half_length - 1) + \'0\' * (half_length - 1) + \'2\' return int(palindrome)"},{"question":"Alice is developing a simple game where she needs to determine the shortest path through a grid maze. The maze is represented as a grid of cells where some cells are passable and others are blocked. Alice must write a function to find the shortest path from the top-left corner of the maze to the bottom-right corner. However, Alice can only move up, down, left, or right. The game requires the following functionality: - Input the dimensions of the maze and the blocked cells. - Calculate the shortest path in terms of the number of steps from the top-left to the bottom-right. - If no such path exists, return -1. Input The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 1000) — the dimensions of the maze. The next `m` lines each contain `n` characters, either \'.\' (passable cell) or \'#\' (blocked cell). The first cell (0, 0) and the last cell (m-1, n-1) will always be \'.\'. Output Print a single number — the length of the shortest path from the top-left to the bottom-right corner. If there is no such path, print -1. Examples Input 3 3 ..# .#. ... Output 4 Input 3 3 ..# # ..# Output -1","solution":"from collections import deque def shortest_path_in_maze(m, n, grid): Function to find the shortest path in a maze from top-left to bottom-right. Parameters: m (int): number of rows n (int): number of columns grid (list of str): representation of the maze where \'.\' is passable and \'#\' is blocked Returns: int: the length of the shortest path or -1 if no such path exists # Directions for movement in the grid: [right, down, left, up] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS initialization queue = deque([(0, 0)]) visited = set((0, 0)) steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() # If we\'ve reached the bottom-right corner, return the number of steps if x == m - 1 and y == n - 1: return steps # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny)) steps += 1 # If the end is not reachable return -1"},{"question":"David is designing a new game, and he needs help in implementing one of its core features. The game involves navigating through a series of rooms, and each room contains a magical teleportation portal. The portal in a room can send the player to any one of the next k rooms directly, except the last room, which leads to the end. Each teleportation move from room i to room j has a certain cost associated with it, denoted as cost[i][j]. The player starts from room 1 and needs to reach the final room n, and David wants to minimize the total teleportation cost. However, there\'s an additional twist. The player has a set number of free teleportation moves, f, which allow the player to teleport to any room without incurring any cost. These free moves can be used at any point during the journey but cannot be combined to form a single larger move. Given the number of rooms, teleportation costs between rooms, and the number of free moves, can you help David determine the minimum cost to get from the first room to the final room? Input: - The first line contains three integers n, k, and f: the number of rooms, the maximum number of rooms the player can teleport to at once, and the number of free teleportation moves. - The next n-1 lines each contain k integers. The i-th line provides the costs for teleporting from room i to each of the next k rooms (if k rooms exist, otherwise as many rooms are available, and the rest are omitted). Output: - A single integer, the minimum total cost to travel from the first to the last room. Constraints: - 1 ≤ n ≤ 1000 - 1 ≤ k ≤ 100 - 0 ≤ f ≤ 100 - 1 ≤ cost[i][j] ≤ 10^6 for all valid i, j Example Input: 5 2 1 3 2 6 1 5 2 1 Example Output: 6 Explanation: - The rooms and costs are represented as follows: Room 1: teleport to Room 2 (cost 3), to Room 3 (cost 2) Room 2: teleport to Room 3 (cost 6), to Room 4 (cost 1) Room 3: teleport to Room 4 (cost 5), to Room 5 (cost 2) Room 4: teleport to Room 5 (cost 1) - The optimal path to minimize cost uses 1 free move: 1 -> (free move) -> 3 (cost 0) -> 5 (cost 2) => Total cost: 2","solution":"import heapq def min_teleportation_cost(n, k, f, costs): # A large value representing infinity INF = float(\'inf\') # Minimum costs to reach each room min_cost = [INF] * n min_cost[0] = 0 # Priority queue for Dijkstra\'s algorithm pq = [(0, 0, f)] # (cost, current room, remaining free moves) while pq: current_cost, room, free_moves = heapq.heappop(pq) if room == n - 1: return current_cost if current_cost > min_cost[room]: continue # Try teleporting to the next rooms for i in range(1, k + 1): next_room = room + i if next_room >= n: break teleport_cost = current_cost + costs[room][i - 1] if teleport_cost < min_cost[next_room]: min_cost[next_room] = teleport_cost heapq.heappush(pq, (teleport_cost, next_room, free_moves)) if free_moves > 0: if current_cost < min_cost[next_room]: min_cost[next_room] = current_cost heapq.heappush(pq, (current_cost, next_room, free_moves - 1)) return min_cost[-1] def parse_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) f = int(data[2]) costs = [] idx = 3 for _ in range(n - 1): row = [] for j in range(min(k, n - 1)): row.append(int(data[idx])) idx += 1 costs.append(row) return n, k, f, costs"},{"question":"A large company is organizing a competition where n participants compete by writing lines of code. Each participant produces a certain number of lines of code every minute, but their productivity varies. However, not all participants start working at the same time. Some start immediately, while others begin after a certain delay. The company wants to know the maximum number of lines of code written by any single participant at any given minute t from the beginning of the competition. They hope to analyze the productivity and start times to identify the most efficient coder at any given minute. -----Input----- The first line contains a single integer n (1 le n le 100) — the total number of participants. The second line contains n integers l_1, l_2, ldots, l_n (1 le l_i le 100), where l_i denotes the number of lines of code the i-th participant writes per minute. The third line contains n integers s_1, s_2, ldots, s_n (0 le s_i le 100), where s_i denotes the delay in minutes before the i-th participant starts writing code. The fourth line contains a single integer t (0 le t le 100) — the minute at which the company wants to know the maximum lines of code written by any participant. -----Output----- Output a single integer — the maximum number of lines of code written by any single participant at minute t. -----Examples----- Input 3 5 3 8 0 2 1 3 Output 24 Input 4 2 4 1 3 1 0 3 2 4 Output 15 -----Note----- In the first example, the lines of code written at minute t = 3 by each participant are: - Participant 1 writes 5 lines per minute and starts immediately: 5 times 3 = 15 - Participant 2 writes 3 lines per minute and starts after 2 minutes: 3 times 1 = 3 - Participant 3 writes 8 lines per minute and starts after 1 minute: 8 times 2 = 16 Thus, the maximum lines of code written by a single participant at minute t = 3 is 16. In the second example, the lines of code written at minute t = 4 by each participant are: - Participant 1 writes 2 lines per minute and starts after 1 minute: 2 times 3 = 6 - Participant 2 writes 4 lines per minute and starts immediately: 4 times 4 = 16 - Participant 3 writes 1 line per minute and starts after 3 minutes: 1 times 1 = 1 - Participant 4 writes 3 lines per minute and starts after 2 minutes: 3 times 2 = 6 Therefore, the maximum lines of code written at minute t = 4 is 16.","solution":"def max_lines_of_code(n, lines_per_minute, start_times, t): Calculate the maximum number of lines of code written by any single participant at minute t. :param n: int - number of participants :param lines_per_minute: list of int - lines of code each participant writes per minute :param start_times: list of int - starting delay (in minutes) for each participant :param t: int - the minute at which to calculate the maximum lines of code written :return: int - maximum lines of code written by any participant at minute t max_code = 0 for i in range(n): if t >= start_times[i]: # Calculate the lines of code written by participant i at minute t lines_written = lines_per_minute[i] * (t - start_times[i]) max_code = max(max_code, lines_written) return max_code"},{"question":"Alice is playing a game wherein she has an array of non-negative integers. She can perform the following operation as many times as she wants: - Choose any two different elements from the array and replace both of them with their bitwise OR. Her goal is to maximize the product of the elements in the array after performing the operations optimally. Since handling large numbers can be cumbersome, she is only interested in the product modulo (10^9 + 7). Write a program to help Alice determine the maximum product of the elements in the array after performing the given operation optimally. -----Input:----- - The first line contains an integer ( T ), the number of test cases. - Each test case consists of two lines, where the first line contains a single integer ( N ), the size of the array. - The second line contains ( N ) space-separated non-negative integers ( A1, A2, ..., AN ). -----Output:----- For each test case, output a single integer representing the maximum product of the array elements modulo (10^9 + 7). -----Constraints----- - ( 1 leq T leq 10 ) - ( 1 leq N leq 10^5 ) - ( 0 leq Ai leq 10^9 ) for (1 leq i leq N) -----Sample Input:----- 2 3 2 3 5 4 1 2 4 8 -----Sample Output:----- 60 128 -----Explanation:----- For the first case: The array is ([2, 3, 5]). Performing the operation on 2 and 3, we get: ([3, 5]) -> ([7]). The product is (2 times 3 times 5 = 30). Alternatively, we could combine in different ways, but the maximum achievable product is 30. For the second case: The array is ([1, 2, 4, 8]). Performing the operation on any two elements maximizes the result as: ([1, 2, 4, 8] to [2, 4, 8] to [4, 8] to [8]). The product is (1 times 2 times 4 times 8 = 64). However, the product of the original array is (128), which is larger and hence the answer.","solution":"MOD = 10**9 + 7 def maximize_product(T, test_cases): results = [] for case in test_cases: N, array = case result = 1 for num in array: result = (result * num) % MOD results.append(result) return results # Reading input def read_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) array = list(map(int, data[index + 1: index + 1 + N])) test_cases.append((N, array)) index += N + 1 return T, test_cases if __name__ == \\"__main__\\": T, test_cases = read_input() results = maximize_product(T, test_cases) for result in results: print(result)"},{"question":"Given a list of integers nums and an integer x. The task is to find out if there exist two distinct elements in the list that sum up to x. Example 1: Input: nums = [2, 7, 11, 15] x = 9 Output: True Explanation: There are two elements in the list that sum up to 9: 2 and 7. Example 2: Input: nums = [3, 2, 4] x = 6 Output: True Explanation: There are two elements in the list that sum up to 6: 2 and 4. Example 3: Input: nums = [3, 3] x = 6 Output: True Explanation: There are two elements in the list (the two 3s) that sum up to 6. Example 4: Input: nums = [1, 2, 5, 1, 4] x = 10 Output: False Explanation: There are no two distinct elements in the list that sum up to 10. Your Task: The task is to complete the function pairSum() which takes the list of integers and the integer x as input parameters. The function returns true if there are two distinct elements in the list that sum up to x, otherwise it returns false. Expected Time Complexity: O(N). Expected Auxiliary Space Complexity: O(N). Constraints: 1 ≤ length of nums ≤ 10^5 -10^9 ≤ nums[i] ≤ 10^9 -10^9 ≤ x ≤ 10^9","solution":"def pair_sum(nums, x): Function to check if there exist two distinct elements in the list nums that sum up to x. :param nums: List of integers :param x: Target sum :return: True if such a pair exists, False otherwise seen = set() for num in nums: if (x - num) in seen: return True seen.add(num) return False"},{"question":"Alex loves playing a game where he needs to jump between platforms of varying heights. Each platform has a specific height, and Alex can only jump to the next platform if it is either at the same height or one unit height difference than the current platform. Given a sequence of platform heights, determine if Alex can successfully jump from the first platform to the last platform in one go. Constraints * The sequence of heights will have at least one height and at most 10,000 heights. * Each height is between 1 and 10,000, inclusive. Input Input is given from Standard Input in the following format: ``` N h_1 h_2 ... h_N ``` * N is an integer representing the number of platforms. * h_1, h_2, ..., h_N are integers representing the heights of the platforms. Output Print `Yes` if Alex can successfully jump from the first platform to the last platform, otherwise print `No`. Examples Input ``` 5 1 2 3 2 1 ``` Output ``` Yes ``` Input ``` 5 1 3 5 5 6 ``` Output ``` No ```","solution":"def can_jump_to_last_platform(n, heights): for i in range(1, n): if abs(heights[i] - heights[i-1]) > 1: return \\"No\\" return \\"Yes\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) heights = list(map(int, data[1:n+1])) print(can_jump_to_last_platform(n, heights))"},{"question":"You are given a string containing only lowercase letters. Determine the length of the longest subsequence of characters from the string that can be rearranged to form a palindrome. Input The only line of input contains a string s (1 ≤ |s| ≤ 100000), where |s| denotes the length of the string. The string contains only lowercase English letters. Output Output the length of the longest subsequence from s that can be rearranged into a palindrome. Examples Input abccccdd Output 7 Input aabbcc Output 6 Note In the first sample, the subsequence \\"dccaccd\\" can be rearranged to form \\"dccaccd\\" or \\"dccbccd\\" which are palindromes of length 7. In the second sample, the entire string \\"aabbcc\\" can be rearranged to form \\"abccba\\" which is a palindrome of length 6.","solution":"def longest_palindromic_subsequence_length(s): from collections import Counter counter = Counter(s) length = 0 odd_count_found = False for count in counter.values(): if count % 2 == 0: length += count else: length += count - 1 odd_count_found = True if odd_count_found: length += 1 return length"},{"question":"Write a function that takes an integer n and returns its factorial if n is between 0 and 12 (inclusive). If n is outside this range, return a message \\"Input out of range\\". Input A single integer n Output The factorial of n if 0 <= n <= 12, otherwise the message \\"Input out of range\\". SAMPLE INPUT 5 SAMPLE OUTPUT 120","solution":"def factorial(n): Returns the factorial of n if 0 <= n <= 12, otherwise return \\"Input out of range\\". if n < 0 or n > 12: return \\"Input out of range\\" result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"In a certain village, there is a square field divided into \'n x n\' plots. Some plots have rocks, which are represented by \'1\', while others don\'t, represented by \'0\'. Farmers need to navigate from the top-left corner of the field to the bottom-right corner, moving only right or down. Write a program to determine if it is possible to travel from the top-left corner to the bottom-right corner without stepping on any rocks. Input - The first line contains an integer, n (1 ≤ n ≤ 100), which represents the size of the field. - The next \'n\' lines contain \'n\' integers each (either 0 or 1), representing the field. Output Output \\"Yes\\" if there is a path from the top-left corner to the bottom-right corner of the field avoiding rocks, otherwise output \\"No\\". Example Input 5 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 1 0 1 1 0 0 0 0 0 0 Output Yes","solution":"def is_path_possible(n, field): Determines if it is possible to travel from the top-left corner to the bottom-right corner of the field without stepping on any rocks. :param n: Size of the field (n x n) :param field: 2D list representing the n x n field with 0s and 1s :return: \\"Yes\\" if a path is possible, \\"No\\" otherwise from collections import deque # Check if starting or ending points are rocks if field[0][0] == 1 or field[n-1][n-1] == 1: return \\"No\\" # Directions for right and down movements directions = [(0, 1), (1, 0)] # Queue for BFS (breadth-first search) queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() # Check if we have reached the bottom-right corner if x == n-1 and y == n-1: return \\"Yes\\" # Check all possible directions (right, down) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and field[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"No\\" # Example Usage #print(is_path_possible(5, [[0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 0, 1, 1, 0], [0, 0, 0, 0, 0]]))"},{"question":"Petya and Masha are at a toy store where several toys are being sold at unit prices. Petya has \'a\' dollars and wants to purchase as many toys as he can. However, he also needs to save up at least \'s\' dollars for his immediate needs. Hence, Petya cannot spend more than \'a - s\' dollars on toys. Each toy has a given price and Petya can purchase any number of each toy as long as the total spending does not exceed his available budget. Now, Petya wants to maximize the number of toys he can buy. Your task is to help him achieve this by determining the maximum number of toys he can purchase given his constraints. Input The first line contains three integers a, s, t (1 ≤ s < a ≤ 10^9, 1 ≤ t ≤ 1000), where \'a\' is the total amount of dollars Petya has, \'s\' is the amount Petya needs to save, and \'t\' is the number of different toys available in the store. The second line contains t space-separated integers, where the i-th integer pi (1 ≤ pi ≤ 10^6) represents the price of the i-th toy. Output Print a single integer — the maximum number of toys Petya can purchase without spending more than \'a - s\' dollars. Examples Input 100 20 5 15 20 30 10 40 Output 8 Input 50 10 3 25 5 10 Output 4 Note In the first sample, one of the ways Petya can maximize the number of toys is by buying all the available toys multiple times: - Buy 2 toys of price 15 (spending 30). - Buy 2 toys of price 20 (spending 40). - Buy 4 toys of price 10 (spending 40). In the second sample, Petya can buy 2 toys of price 25 (spending 50) or 5 toys of price 10 (spending 50), and in both cases, the total spending is less than or equal to 40 (as 50 - 10 = 40).","solution":"def max_number_of_toys(a, s, t, prices): Returns the maximum number of toys Petya can purchase given the budget constraints. Parameters: a (int): Total amount of dollars Petya has. s (int): Amount of dollars Petya needs to save. t (int): Number of different toys available. prices (list): List of integers representing the price of each toy. Returns: int: Maximum number of toys Petya can purchase. budget = a - s prices.sort() num_toys = 0 for price in prices: if budget <= 0: break num_toys += budget // price budget %= price return num_toys"},{"question":"David loves to go on hiking adventures and he always takes his drone with him to capture beautiful landscapes. The drone has a limited battery capacity, and David wants to maximize the number of peaks (highest points in their respective areas) it can record in one trip. Each peak has a significance value, and the drone should follow a specific path to maximize the total accumulated significance. The mountain range is represented as a grid (matrix) of size N x M, where each cell contains an integer representing the height in meters. The drone can move in four possible directions: up, down, left, and right. A peak is defined as a cell whose height is strictly greater than the heights of its adjacent cells (if they exist). The total significance of the trip is the sum of the heights of the peaks that the drone records. David can start his drone from any cell, but once it records a peak, it should continue to move until the end of the battery life. The drone cannot revisit any cell in the same trip. Your task is to help David determine the maximum total significance he can achieve in one trip. # Input - The first line contains two integers N and M (1 ≤ N, M ≤ 1000) representing the number of rows and columns in the grid, respectively. - The next N lines contain M integers each, representing the heights in the grid. # Output - Output a single integer, the maximum total significance value David can achieve in one trip. # Example Input ``` 3 3 1 2 1 3 4 3 1 8 1 ``` Output ``` 12 ``` Explanation In this example, the grid is: ``` 1 2 1 3 4 3 1 8 1 ``` The peaks are at (0, 1) with height 2, (1, 1) with height 4, and (2, 1) with height 8. The best trip starts from (2, 1) and records the peak with height 8. The total significance value is 8. # Note - You need to implement an algorithm to find all the peaks in the grid. - You need to simulate the trip by starting from each peak and checking the possible paths to ensure the best route is chosen to maximize the total significance recorded.","solution":"def is_peak(grid, x, y): Check if a cell (x, y) is a peak in the grid. n = len(grid) m = len(grid[0]) current_height = grid[x][y] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] >= current_height: return False return True def find_all_peaks(grid): Find all peaks in the grid. n = len(grid) m = len(grid[0]) peaks = [] for i in range(n): for j in range(m): if is_peak(grid, i, j): peaks.append((i, j)) return peaks def max_total_significance(N, M, heights): Determine the maximum total significance value David can achieve in one trip. def dfs(x, y, visited): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_significance = heights[x][y] visited.add((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited: if heights[nx][ny] > heights[x][y]: max_significance = max(max_significance, heights[x][y] + dfs(nx, ny, visited)) visited.remove((x, y)) return max_significance peaks = find_all_peaks(heights) max_significance = 0 for peak in peaks: visited = set() max_significance = max(max_significance, dfs(peak[0], peak[1], visited)) return max_significance"},{"question":"Problem James is obsessed with palindromic numbers. A palindromic number is a number that remains the same when its digits are reversed. Given an integer `n`, he wants to find out the smallest palindrome greater than `n`. Constraints * 0 ≤ n ≤ 10^6 Input The input is given in the following format: ``` n ``` An integer `n` is provided in one line. Output Output the smallest palindromic number greater than `n`. Examples Input 123 Output 131 Input 808 Output 818 Input 999 Output 1001","solution":"def is_palindrome(num): return str(num) == str(num)[::-1] def smallest_palindrome_greater_than(n): m = n + 1 while not is_palindrome(m): m += 1 return m"},{"question":"Bob is a fan of unique number sequences. He created a sequence of n integers such that each number in the sequence can be used to uniquely identify him amongst his friends. Unfortunately, Bob realized his sequence might not be unique as the prefix sums could potentially match the prefix sums of some subsegments of the sequence. Now, Bob wants to verify the uniqueness of his sequence by computing the frequency of each unique prefix sum. Given an array of n integers, an array prefix sum is defined as the sum of elements from the start of the array up to and including the current element. Help Bob determine the frequency of each unique prefix sum and return the sum of these frequencies. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n integers s_1, s_2, ..., s_n (-10^9 ≤ s_i ≤ 10^9), the elements of the sequence. Output Print a single integer which is the sum of the frequencies of each unique prefix sum. Examples Input 5 1 2 3 2 -4 Output 5 Input 4 4 0 -2 2 Output 4 Note In the first example, the prefix sums for the sequence are [1, 3, 6, 8, 4]. The frequency of each unique prefix sum is 1. Hence, the sum of frequencies is 5. In the second example, the prefix sums for the sequence are [4, 4, 2, 4]. The unique prefix sums and their frequencies are: 4 appears 3 times, 2 appears 1 time. Hence the sum of frequencies is 4.","solution":"def sum_of_prefix_frequencies(n, sequence): Returns the sum of frequencies of each unique prefix sum. Args: n : int : length of the sequence sequence : list : list of integers representing the sequence Returns: int : sum of frequencies of unique prefix sums prefix_sums = {} current_sum = 0 for num in sequence: current_sum += num if current_sum in prefix_sums: prefix_sums[current_sum] += 1 else: prefix_sums[current_sum] = 1 return sum(prefix_sums.values())"},{"question":"Given a sequence of integers as an array, you need to rotate the array to the right by a given number of steps. For example, if the array is [1, 2, 3, 4, 5] and the number of steps is 2, the result should be [4, 5, 1, 2, 3]. Write a function `rotate_array(arr, steps)` to achieve this. # Input: - `arr`: a list of integers with length `N` (1 ≤ N ≤ 10^6) - `steps`: an integer (0 ≤ steps ≤ 10^6) # Output: - Return a new list with elements rotated to the right by `steps` positions. # Example: ```python rotate_array([1, 2, 3, 4, 5], 2) # Output: [4, 5, 1, 2, 3] rotate_array([1, 2, 3, 4, 5], 0) # Output: [1, 2, 3, 4, 5] rotate_array([1, 2, 3, 4, 5], 5) # Output: [1, 2, 3, 4, 5] rotate_array([1, 2, 3, 4, 5], 8) # Output: [3, 4, 5, 1, 2] ``` # Constraints: - You can assume the input list contains no duplicates. - Try to achieve an O(N) time complexity by considering the effective number of rotations as `steps % N`. # Hint: - If steps are greater than `N`, you should reduce the number of rotations since rotating an array of length `N` by `N` steps brings it back to the original array.","solution":"def rotate_array(arr, steps): Rotates the array to the right by the given number of steps. Parameters: arr (list of int): The array of integers to be rotated. steps (int): The number of steps to rotate the array. Returns: list of int: The rotated array. n = len(arr) steps = steps % n # Effective number of steps return arr[-steps:] + arr[:-steps]"},{"question":"A group of friends is playing a game where they need to collaboratively solve a puzzle involving integers and arrays. The rules of the game are simple: each player takes turns making a move, and the game ends when a specific condition is met. More details are as follows: The game starts with an array of N non-negative integers. Two players, Alice and Bob, take turns modifying the array according to the following rules: 1. On their turn, a player must choose a number from the array and decrease it by 1. 2. If a player decreases an element to 0, that element is removed from the array. The game continues until there are no positive integers left in the array. The player who cannot make a move (because all array elements are 0 or removed) loses the game. Assuming both players play optimally, determine which player (Alice or Bob) will win if Alice always goes first. Input: - The first line contains a single integer N, the length of the array. - The second line contains N space-separated non-negative integers representing the elements of the array. Output: - Print \\"Alice\\" if Alice wins, otherwise print \\"Bob\\". Constraints: - 1 leq N leq 10^5 - 0 leq A_i leq 10^9 for each valid i Sample Input 1: 3 1 2 3 Sample Output 1: Bob Explanation 1: Alice takes the turn to decrease one of the elements by 1. Regardless of her choice, Bob can always win by following an optimal strategy, given the arrangement of the numbers. Sample Input 2: 4 0 0 0 0 Sample Output 2: Bob Explanation 2: There are no valid moves for Alice at the start of the game, so Bob wins by default.","solution":"def determine_winner(N, array): Determines the winner of the game between Alice and Bob given the initial array. Args: N (int): The length of the array. array (list): A list of N non-negative integers. Returns: str: \\"Alice\\" if Alice wins, otherwise \\"Bob\\". # Calculate the total number of nonzero moves required total_moves = sum(array) # If the total number of moves is odd, Alice wins because she goes first # If the total number of moves is even, Bob wins because both play optimally if total_moves % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"In 18th century, Leonhard Euler formulated that numbers of the form 2^{2^n} + 1 are prime numbers, which were later known as Fermat primes. A Fermat number is defined as follows: F_n = 2^{2^n} + 1 Euler conjectured that all Fermat numbers are prime, but it was later proven false. In fact, except for the first few cases, all known Fermat numbers are composite. Your task is to determine whether a given number is a Fermat number and whether it is also prime. Write a program that reads a series of integers and, for each one, checks if it’s a Fermat number and if it is prime. Input The input is a sequence of lines, each containing a single integer number, followed by a line containing zero. All input integers are greater than 1. Output For each input integer, output a single line. If the integer is a Fermat number and prime, output \\"Fermat Prime\\". If it is a Fermat number but not prime, output \\"Fermat Composite\\". If it is not a Fermat number, output \\"Not Fermat\\". Example Input 3 5 17 257 65537 4294967297 1234 0 Output Not Fermat Fermat Prime Fermat Prime Fermat Prime Fermat Prime Fermat Composite Not Fermat","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def is_fermat_number(n): Check if a number is a Fermat number. if n < 2: return False k = 0 while True: fermat_num = 2 ** (2 ** k) + 1 if fermat_num == n: return True if fermat_num > n: return False k += 1 def classify_number(n): Classify if the number is a Fermat number and if it is prime. if n == 0: return if is_fermat_number(n): if is_prime(n): return \\"Fermat Prime\\" else: return \\"Fermat Composite\\" else: return \\"Not Fermat\\" def process_numbers(numbers): Process a list of numbers and return their classifications. results = [] for number in numbers: if number == 0: break results.append(classify_number(number)) return results"},{"question":"You are a newly recruited drone operator for a disaster relief mission. The mission involves navigating a drone across a grid rescue-field that is full of obstacles, to deliver supplies to survivors. The field is represented as an NxN grid where some cells contain obstacles (\'X\'), some cells contain survivors (\'S\'), and the rest are empty (\'.\'). The drone can move up, down, left, or right to adjacent cells (no diagonal moves allowed) and cannot pass through or land on obstacles. The drone starts from the top-left corner of the grid (0,0) and aims to reach the bottom-right corner (N-1,N-1) with the shortest path possible. The drone also has a limited battery life, indicated by \'B\' which represents the maximum number of moves it can make. If the drone reaches its destination within \'B\' moves and delivers at least one supply to the survivors, the mission is successful. Multiple survivors may be in the grid, but your mission only needs to reach one survivor to be considered successful. Write a program that reads multiple test cases and determines whether the mission is successful or not for each case. Input format: The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the size of the grid (NxN). - The second line contains an integer B, the maximum number of moves the drone can make. - The next N lines each contain N characters representing the grid. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 50 1 ≤ B ≤ 10^3 The grid cells contain only \'X\', \'.\', \'S\' Output format: For each test case, output on a new line: - \\"MISSION SUCCESSFUL\\" if the drone can reach the destination within B moves and visits at least one survivor. - \\"MISSION FAILED\\" otherwise. Example: Input: 2 4 10 ..S. .X.X ...X S..S 3 1 S.. .X. ..S Output: MISSION SUCCESSFUL MISSION FAILED Explanation: In the first test case, the drone can reach the bottom-right corner (3,3) visiting survivors at positions (0,2) and (3,0). Therefore, the output is \\"MISSION SUCCESSFUL\\". In the second test case, the drone cannot reach the bottom-right corner (2,2) within 1 move, so the output is \\"MISSION FAILED\\".","solution":"from collections import deque def is_mission_successful(N, B, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0, False)]) # (row, col, steps, has_visited_survivor) visited = set((0, 0)) while queue: r, c, steps, has_visited_survivor = queue.popleft() if steps > B: # If steps exceed battery life, skip this path continue if grid[r][c] == \'S\': has_visited_survivor = True if r == N - 1 and c == N - 1: if steps <= B and has_visited_survivor: return \\"MISSION SUCCESSFUL\\" for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < N and (nr, nc) not in visited and grid[nr][nc] != \'X\': queue.append((nr, nc, steps + 1, has_visited_survivor)) visited.add((nr, nc)) return \\"MISSION FAILED\\" def process_test_cases(test_cases): results = [] for N, B, grid in test_cases: result = is_mission_successful(N, B, grid) results.append(result) return results"},{"question":"In an alien language, there is a very strange but interesting rule for building words. A word is considered valid if it does not contain any of the substrings from a given set of forbidden substrings. Forbidden substrings can vary in length and pattern. You are given a word and a list of forbidden substrings. Your task is to determine if the word is valid based on the aforementioned rule. Input format: - The first line contains a single word in lowercase letters. - The second line contains an integer `n`, the number of forbidden substrings. - The next `n` lines contain one forbidden substring each. Output format: - Print \\"Word is valid\\" if the word does not contain any of the forbidden substrings. - Print \\"Word is invalid\\" if the word contains any of the forbidden substrings. Constraints: - The word length can be up to 100 characters. - Each forbidden substring can be up to 10 characters long. - The number of forbidden substrings `n` can be up to 10. SAMPLE INPUT alienlanguage 3 ali eng gua SAMPLE OUTPUT Word is invalid Explanation Since the word \\"alienlanguage\\" contains the forbidden substring \\"ali\\" (at the beginning), it is considered invalid.","solution":"def is_word_valid(word, forbidden_substrings): Checks if the word is valid by verifying it does not contain any forbidden substrings. Parameters: word (str): The word to check. forbidden_substrings (list of str): List of forbidden substrings. Returns: str: \\"Word is valid\\" if the word does not contain any forbidden substrings, otherwise \\"Word is invalid\\". for forbidden in forbidden_substrings: if forbidden in word: return \\"Word is invalid\\" return \\"Word is valid\\""},{"question":"Your task is to implement a function that takes an integer array as input and performs the following operations in order: 1. Calculate the sum of all the elements in the array. 2. Sort the array in non-decreasing order. 3. Remove duplicates such that each element appears only once. 4. Find the median of the modified array. The program should print the calculated sum and the median of the modified array. Definition of Median: - If the number of elements in the array is odd, the median is the middle element of the array when it is sorted. - If the number of elements in the array is even, the median is the average of the two middle elements of the array. Input: The input starts with an integer n denoting the number of elements in the array. The next n integers denote the elements of the array. Output: Print two lines: 1. The sum of all the elements of the original array. 2. The median of the modified array after sorting and removing duplicates. Constraints: 1 ≤ n ≤ 1000 -10^5 ≤ element of array ≤ 10^5 Example: Input: 6 1 3 3 6 7 8 Output: 28 6 Explanation: Sum of original array = 1 + 3 + 3 + 6 + 7 + 8 = 28 Modified array after removing duplicates and sorting = [1, 3, 6, 7, 8] Median of modified array = 6","solution":"def process_array(arr): Processes the input array according to the specified operations. 1. Calculate the sum of all elements in the array. 2. Sort the array in non-decreasing order. 3. Remove duplicates. 4. Find the median of the modified array. Args: arr (list): List of integers. Returns: (tuple): Sum of original array, median of modified array. # Calculate the sum of all elements in the original array total_sum = sum(arr) # Sort the array and remove duplicates sorted_unique_arr = sorted(set(arr)) # Find the median of the modified array n = len(sorted_unique_arr) if n % 2 == 1: median = sorted_unique_arr[n // 2] else: median = (sorted_unique_arr[n // 2 - 1] + sorted_unique_arr[n // 2]) / 2 return total_sum, median def main(): import sys input = sys.stdin.read data = list(map(int, input().split())) n = data[0] arr = data[1:n+1] total_sum, median = process_array(arr) print(total_sum) print(median)"},{"question":"Given a linked list, reverse every k nodes of the linked list. Input First line of input contains one integer n, which denotes the size of the linked list. Second line contains n space separated integers representing the elements of the linked list. Third line contains one integer k, which denotes the number of nodes to reverse each time. Output Print the modified linked list after the specified operation. Constraints 1 ≤ n ≤ 10^5 1 ≤ k ≤ n 0 ≤ element value ≤ 10^9 SAMPLE INPUT 8 1 2 3 4 5 6 7 8 3 SAMPLE OUTPUT 3 2 1 6 5 4 7 8 Explanation We have a linked list with the following elements: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 If we reverse every 3 nodes, the linked list becomes: 3 -> 2 -> 1 -> 6 -> 5 -> 4 -> 7 -> 8 Therefore, the modified linked list is 3 2 1 6 5 4 7 8.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head, k): def reverseLinkedList(head, k): new_head, ptr = None, head while k: next_node = ptr.next ptr.next = new_head new_head = ptr ptr = next_node k -= 1 return new_head ptr = head count = 0 while ptr: count += 1 ptr = ptr.next dummy = ListNode(0) dummy.next = head prev_group = dummy while count >= k: tail = prev_group.next for _ in range(k): tail = tail.next count -= 1 reversed_head = reverseLinkedList(prev_group.next, k) prev_group.next.next = tail prev_group.next, prev_group = reversed_head, prev_group.next return dummy.next def list_to_linked_list(lst): dummy = ListNode(0) curr = dummy for e in lst: curr.next = ListNode(e) curr = curr.next return dummy.next def linked_list_to_list(head): res = [] while head: res.append(head.val) head = head.next return res def reverse_k_nodes(n, lst, k): head = list_to_linked_list(lst) new_head = reverseKGroup(head, k) return linked_list_to_list(new_head)"},{"question":"Determine if a given string of round brackets \\"(\\" and \\")\\" is properly balanced. A string is considered balanced if every opening bracket has a corresponding closing bracket in the correct order. For example, \\"()\\" is balanced but \\")(\\" is not. Your task is to implement a function that checks whether the string is balanced. Input The input will be a single line containing a string of round brackets with length `n` (1 <= n <= 1000). Output Output \\"YES\\" if the string is balanced and \\"NO\\" otherwise. Examples Input (()) Output YES Input ())( Output NO","solution":"def is_balanced(bracket_string): Returns \\"YES\\" if the string of round brackets is balanced and \\"NO\\" otherwise. balance = 0 for char in bracket_string: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 if balance < 0: return \\"NO\\" return \\"YES\\" if balance == 0 else \\"NO\\""},{"question":"Given an array of integers ``arr``, determine if it contains a pair of distinct indices ``i`` and ``j`` such that the absolute difference between elements at these indices is a given integer ``k``. In other words, you need to check if there exists ``i`` and ``j`` such that ``|arr[i] - arr[j]| = k`` and ``i != j``. Write a function `hasPairWithDifference(arr, k)` that returns `True` if such a pair exists, and `False` otherwise. Examples ```python hasPairWithDifference([1, 5, 3, 4, 2], 3) = True # (1, 4) or (5, 2) hasPairWithDifference([1, 5, 3, 4, 2], 7) = False # No pair with difference 7 hasPairWithDifference([1, 2, 3, 4, 5], 1) = True # (1, 2), (2, 3), etc. hasPairWithDifference([], 1) = False # Empty array hasPairWithDifference([4, 4, 4, 4, 4], 0) = True # Any pair (4, 4) ```","solution":"def hasPairWithDifference(arr, k): Determine if the array contains a pair of distinct indices i and j such that |arr[i] - arr[j]| = k and i != j. :param arr: List of integers. :param k: Non-negative integer representing the desired absolute difference between elements. :return: Boolean value, True if such a pair exists, False otherwise. seen = set() for num in arr: if num + k in seen or num - k in seen: return True seen.add(num) return False"},{"question":"You are working for a logistics company that manages truck deliveries across different depots. Each delivery has a specific starting point and destination and must be scheduled so that no two deliveries starting from the same depot overlap in time. Each of the n depots has a queue for scheduling deliveries. A delivery is represented by a starting time and an ending time, and they are queued in non-decreasing order of their starting times. If any two deliveries at a depot overlap (i.e., any ongoing delivery\'s end time is after the starting time of the next delivery), they cannot both be included. Write a program that determines the maximum number of deliveries that can be scheduled without overlap for each depot. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of depots. The next n sets of lines describe the depots: - The first line of each set contains an integer m (0 ≤ m ≤ 100000) — the number of deliveries for that depot. - The next m lines each contain two integers s_i and e_i (0 ≤ s_i < e_i ≤ 1000000) — the starting time and ending time of each delivery. Output Output n integers. The i-th integer should be the maximum number of deliveries that can be scheduled without overlap for the i-th depot. Examples Input 2 3 1 4 2 6 5 8 4 2 3 4 5 3 8 10 12 Output 2 3 Input 1 5 1 2 3 4 2 3 5 6 4 5 Output 5 Note In the first example, the maximum number of non-overlapping deliveries for the first depot is 2 (deliveries 1-4 and 5-8). For the second depot, it is 3 (deliveries 2-3, 4-5, and 10-12). In the second example, all the deliveries for the single depot can be scheduled without overlap.","solution":"def max_non_overlapping_deliveries(n, depots): Determines the maximum number of deliveries that can be scheduled without overlap for each depot. :param n: Number of depots :param depots: List of lists, where each list contains the deliveries for a depot. Each delivery is represented by a tuple (start_time, end_time) :return: List of integers representing the maximum number of non-overlapping deliveries for each depot. result = [] for deliveries in depots: if not deliveries: result.append(0) continue # Sort deliveries by ending time deliveries.sort(key=lambda x: x[1]) count = 1 last_end_time = deliveries[0][1] for i in range(1, len(deliveries)): if deliveries[i][0] >= last_end_time: count += 1 last_end_time = deliveries[i][1] result.append(count) return result"},{"question":"Alice has a special string `s` consisting of lowercase English letters. She wants to perform operations on this string to make all characters the same. In one operation, she can choose any character in the string and change it to any other character. Alice wants to minimize the number of operations required to achieve her goal. Your task is to determine the minimum number of operations needed for Alice to make all characters in the string the same. -----Input:----- - The first line contains an integer T, the number of test cases. - The following T lines each contain a string s. -----Output:----- For each test case, print the minimum number of operations required. -----Constraints----- - 1 leq T leq 100 - 1 leq |s| leq 100 -----Sample Input:----- 3 aabb abc zzzzz -----Sample Output:----- 2 2 0 -----EXPLANATION:----- For 1) The optimal solution is to change two \'b\' characters to \'a\' characters, which requires 2 operations. For 2) The optimal solution is to change two of the characters to match the third one, e.g., change \'a\' and \'b\' to \'c\', which requires 2 operations. For 3) The string is already uniform, so no operations are needed.","solution":"def min_operations_to_uniform_string(T, strings): Given T strings, this function returns the minimum number of operations needed to make all characters in each string the same. Parameters: T (int): The number of test cases. strings (list): A list of strings for which the operations need to be calculated. Returns: list: A list of integers where each integer corresponds to the minimum number of operations needed for each string. results = [] for s in strings: # Count frequency of each character in the string frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 # Find the max frequency of any single character max_frequency = max(frequency.values()) # Minimum number of operations is the total length of string minus the max frequency min_operations = len(s) - max_frequency results.append(min_operations) return results"},{"question":"You are given two arrays, `arrival` and `departure`, where `arrival[i]` is the arrival time of the ith train, and `departure[i]` is the departure time of the ith train from the station. You need to find the minimum number of railway platforms required at the station so that no train has to wait. Example 1: Input: arrival = [900, 940, 950, 1100, 1500, 1800] departure = [910, 1200, 1120, 1130, 1900, 2000] Output: 3 Explanation: At time 950, trains 1, 2, and 3 are at the station. So 3 platforms are needed. Example 2: Input: arrival = [200, 210, 300, 320, 350, 500] departure = [230, 340, 320, 430, 400, 520] Output: 2 Explanation: At time 320, trains 2 and 3 are at the station. So 2 platforms are needed. And at time 350, trains 4 and 5 are at the station, so also 2 platforms are needed. Your task: You don’t need to read input or print anything. Your task is to complete the function `findPlatform()` which takes the array `arrival` and `departure` as input parameters and returns the minimum number of platforms required at the station. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 10000 0000 ≤ arrival[i] < departure[i] ≤ 2359","solution":"def findPlatform(arrival, departure): Finds the minimum number of railway platforms required so that no train has to wait. Parameters: arrival (List[int]): List of arrival times of trains. departure (List[int]): List of departure times of trains. Returns: int: Minimum number of platforms required. arrival.sort() departure.sort() n = len(arrival) platform_needed = 0 max_platforms = 0 i, j = 0, 0 while (i < n and j < n): if arrival[i] < departure[j]: platform_needed += 1 i += 1 if platform_needed > max_platforms: max_platforms = platform_needed else: platform_needed -= 1 j += 1 return max_platforms"},{"question":"You are given an array of n integers. You can perform the following operation exactly once: choose two indices i and j (1 ≤ i < j ≤ n) and swap the elements at those indices. Your goal is to determine the maximum possible sum of the array after the operation. Input The first line contains an integer n (2 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the elements of the array. Output Print a single integer — the maximum possible sum of the array after the operation. Examples Input 5 1 2 3 4 5 Output 15 Input 4 -1 2 -3 4 Output 2 Note In the first example: - The initial sum of the array is 15. Swapping any two elements will not change the overall sum. In the second example: - The initial sum of the array is 2. By swapping elements at indices 1 and 4, the array becomes [4, 2, -3, -1], which also has a sum of 2. However, swapping elements at indices 2 and 3 does not change the sum but may change the values of individual elements. The crucial thing to notice in this problem is that the sum itself does not change by swapping any two elements, so you should focus on finding existing subarrays with the highest sums. Therefore, the final answer remains 2.","solution":"def max_sum_after_one_swap(n, arr): Returns the maximum possible sum of the array after one swap operation. Since the sum of the array remains the same regardless of swaps, the sum is simply returned as the sum of the array. return sum(arr)"},{"question":"Problem E: Protect the Galaxy Research Stations The United Galactic Federation has stationed a series of research stations in outer space for deep space exploration. Each research station is a sphere with a specific radius. Some of these stations are at risk of colliding due to unpredictable space debris. The Federation wants to protect these stations by deploying force fields around each one. The force fields must be positioned such that they minimally cover all possible colliding stations. Your task is to determine the minimum combined volume of force fields required to protect all the research stations. The force field around a research station must be at least as large as the volume of the station itself but can encompass multiple stations if they intersect. Calculate the combined volume of all the force fields needed to protect the stations without any overlaps. Input The input consists of multiple test cases. Each test case starts with an integer N (1 <= N <= 100), denoting the number of research stations in that test case. Then N lines follow. The i-th line describes the position and radius of the i-th station with four integers xi, yi, zi, ri (0 <= xi, yi, zi <= 1000, 1 <= ri <= 10), where xi, yi, and zi are the coordinates of the center of the station, and ri is the radius of the station. The input ends when a line containing a single zero is encountered. This line should not be processed. Output For each test case, print the combined volume of force fields needed to protect the research stations. The output value should be in a decimal fraction and should not contain an error greater than 0.001. Examples Input 2 0 0 0 1 5 5 5 1 2 0 0 0 2 1 1 1 1 0 Output 4.188790 33.510321","solution":"import math def calculate_volume(radius): Calculate the volume of a sphere given its radius. return (4/3) * math.pi * (radius ** 3) def combined_force_field_volume(test_cases): Calculate the combined volume of force fields needed for each test case. results = [] for case in test_cases: volume_sum = sum(calculate_volume(station[3]) for station in case) results.append(volume_sum) return results def parse_input(input_str): Parse the input string into a list of test cases. lines = input_str.strip().split(\'n\') test_cases = [] case = [] for line in lines: if line == \'0\': # End of input if case: test_cases.append(case) break elif line.isdigit(): if case: # This marks the end of a test case test_cases.append(case) case = [] else: # Parse the station data station_data = list(map(int, line.split())) case.append(station_data) return test_cases"},{"question":"Problem A tech start-up has designed a new app for task management, and they are using a rating system to prioritize which features to develop next. Every feature request has a unique identifier and a complexity rating associated with it. The complexity ratings are integers that range from 1 (easiest) to 10 (most difficult). The product manager has decided to approve as many features as possible, but the total complexity of approved features must not exceed a given complexity limit C . Given the list of features with their complexities, determine the maximum number of features that can be approved without exceeding the complexity limit C . Constraints The input satisfies the following conditions: * 1 leq n leq 1000 (where n is the number of feature requests) * 1 leq C leq 10000 * Each feature request has a unique complexity rating in the range 1 to 10 Input The input is given in the following format: * The first line contains the integer n and the integer C , separated by a space. * The next n lines each contain the integer complexity rating of a feature request. Output Output the maximum number of features that can be approved without exceeding the complexity limit C on one line. Examples Input 5 10 1 2 3 4 5 Output 4 Input 4 15 5 6 7 4 Output 3 Input 3 5 6 7 8 Output 0","solution":"def max_features_approved(n, C, complexities): Returns the maximum number of features that can be approved without exceeding the complexity limit C. Arguments: n -- integer, the number of feature requests C -- integer, the complexity limit complexities -- list of integers, the complexity ratings of features Returns: integer, the maximum number of features that can be approved complexities.sort() total_complexity = 0 count = 0 for complexity in complexities: if total_complexity + complexity <= C: total_complexity += complexity count += 1 else: break return count"},{"question":"A botanist is analyzing the growth pattern of a specific plant species. The plant exhibits a unique growth pattern where each day\'s growth can be predicted by a special function of the previous day\'s growth. However, a mysterious insect infestation has caused abnormalities in the growth pattern on certain days. Given the plant\'s growth measurements over a span of days, write a program to determine the maximum consecutive days during which the growth was strictly increasing. -----Input:----- - First line will contain an integer T, the number of test cases. Then the test cases follow. - Each test case starts with an integer N, the number of days for which growth measurements are provided. - The next line contains N integers, representing the growth measurements of the plant on each respective day. -----Output:----- For each test case, output a single line containing the maximum number of consecutive days the plant\'s growth was strictly increasing. -----Constraints----- - 1 leq T leq 10^5 - 1 leq N leq 10^5 - 1 leq Growth measurement on any day leq 10^9 Note: The sum of N across all test cases will not exceed 10^6. -----Sample Input:----- 2 7 3 2 10 5 7 8 6 5 1 2 3 4 5 -----Sample Output:----- 3 5 -----EXPLANATION:----- For the first test case, the longest strictly increasing subsequence is 5, 7, 8, which is 3 days. For the second test case, the entire sequence is strictly increasing, so the answer is 5.","solution":"def max_consecutive_increasing_days(T, test_cases): results = [] for case in test_cases: N, growth_measurements = case max_length = 0 current_length = 1 for i in range(1, N): if growth_measurements[i] > growth_measurements[i-1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 # To check last sequence length if it was the longest if current_length > max_length: max_length = current_length results.append(max_length) return results"},{"question":"John has a list of homework assignments. Each assignment has a deadline and can only be completed on its deadline day. This means, if John has two assignments and both have the same deadline, he can only complete one of them. Fortunately, John has a set number of bonus days that he can use to extend the deadline for any number of assignments. If John uses a bonus day on an assignment, its deadline is extended by 1 day. John wants to maximize the number of assignments he can complete. Given a list of assignments with their deadlines and the number of bonus days, determine the maximum number of assignments John can complete. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of assignments. The second line contains `n` integers representing the deadlines of the assignments (1 ≤ deadline ≤ 100). The third line contains an integer `b` (0 ≤ b ≤ 100) — the number of bonus days available. -----Output----- Print a single integer — the maximum number of assignments John can complete. -----Examples----- Input 4 1 2 1 3 2 Output 4 Input 5 1 2 1 2 1 1 Output 3 -----Note----- In the first example, by using one bonus day for the first \'1\' deadline assignment to extend it to \'2\', and the other bonus day for the second \'1\' deadline assignment to extend it to \'3\', John can complete all 4 assignments (now on days 2, 2, 1, 3). In the second example, one possible way is to use the bonus day to extend one of the assignments with a \'1\' deadline to \'2\'. By this, John can complete 3 assignments on days 1, 2, and 2.","solution":"def max_assignments(n, deadlines, b): Determines the maximum number of assignments that can be completed given the deadlines and the number of bonus days available. Parameters: n (int): Number of assignments deadlines (list of int): List of deadlines for each assignment b (int): Number of bonus days available Returns: int: Maximum number of assignments that can be completed from collections import Counter from heapq import heappop, heappush # Count the number of assignments for each deadline day deadline_counts = Counter(deadlines) # Convert to a min-heap for processing deadlines in order heap = [] for deadline, count in deadline_counts.items(): heappush(heap, (deadline, count)) completed_assignments = 0 # While there are bonus days and deadlines to process while b > 0 and heap: deadline, count = heappop(heap) # Consider the max assignments we can complete without bonus days if count > 1: # Use a bonus day to spread the assignments completed_assignments += 1 b -= 1 count -= 1 # Push the decreased count back to heap heappush(heap, (deadline, count)) else: completed_assignments += 1 # Any remaining assignments that can be completed without bonus days while heap: deadline, count = heappop(heap) completed_assignments += min(count, 1) return completed_assignments"},{"question":"You are given two arrays a and b, each consisting of n non-negative integers. You need to determine if you can make the arrays equal by performing the following operation zero or more times: - Select an integer x and a subarray (continuous segment) of a of length x, and add 1 to all elements in that subarray. The goal is to check if it\'s possible to make array a equal to array b by using the above operation any number of times. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the size of the arrays a and b. The second line contains n non-negative integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1000) — elements of array a. The third line contains n non-negative integers b_1, b_2, ..., b_n (0 ≤ b_i ≤ 1000) — elements of array b. Output Print \\"YES\\" (without quotes) if it is possible to make arrays a and b equal by performing the given operation any number of times. Otherwise, print \\"NO\\". Examples Input 5 1 2 3 4 5 2 3 4 5 6 Output YES Input 3 1 2 3 3 1 2 Output NO Note In the first example, you can increase each element of array a by 1 to make it equal to array b. In the second example, it\'s impossible to make arrays a and b equal using the given operation.","solution":"def can_make_equal(n, a, b): Determines if arrays a and b can be made equal by performing the allowed operation. Parameters: n (int): The size of the arrays. a (list of int): The first array. b (list of int): The second array. Returns: str: \\"YES\\" if arrays can be made equal, otherwise \\"NO\\". diff = [b[i] - a[i] for i in range(n)] # To check whether all differences are non-decreasing for i in range(1, n): if diff[i] < diff[i - 1]: return \\"NO\\" if all(d >= 0 for d in diff): return \\"YES\\" else: return \\"NO\\""},{"question":"Lara Croft has discovered a new temple. The temple consists of a grid of cells with n rows and m columns. Each cell in the grid either contains an obstacle or is free. Lara aims to navigate from the top-left corner to the bottom-right corner of the grid, moving either right or down at each step. For security reasons, some of the cells are blocked off and cannot be traversed. Lara is a seasoned adventurer and wants to know the total number of unique paths she can take to reach her destination, avoiding obstacles. Help Lara to find the number of unique paths from the top-left to the bottom-right corner of the grid while avoiding obstacles. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 100), the number of rows and columns respectively. The next n lines each contain m characters, representing the grid. A cell is either \'.\' (free) or \'#\' (obstacle). Output Output a single integer, the number of unique paths from the top-left to the bottom-right corner of the grid. If there are no such paths, output 0. Examples Input 3 3 . . . . # . . . . Output 2 Input 3 3 . # . . # . . . . Output 1 Input 3 3 . # . # . . . . # Output 0 Note In the first example, there are 2 unique paths: - Right -> Right -> Down -> Down - Down -> Down -> Right -> Right In the second example, there is only 1 unique path: - Down -> Down -> Right -> Right In the third example, there are no unique paths because the path is blocked.","solution":"def unique_paths_with_obstacles(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"Create a function that takes a string containing a mathematical expression and returns the result after evaluating the expression. The mathematical expression will only consist of non-negative integers and the operators +, -, *, and /. You can assume the input will be a valid mathematical expression, and integer division should truncate towards zero. Examples ``` \\"3+2*2\\" ==> 7 Explanation: First, you will evaluate the multiplication 2*2 = 4 Then, you add 3+4 = 7 ``` ``` \\" 3/2 \\" ==> 1 Explanation: First, you perform the division 3/2 = 1.5, but since we truncate towards zero, the result is 1. ``` ``` \\" 3+5 / 2 \\" ==> 5 Explanation: First, you perform the division 5/2 = 2.5, truncating towards zero makes it 2 Then, you add 3+2 = 5 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers and the operators +, -, *, /. Integer division truncates towards zero. def operate(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return a // b i, n = 0, len(expression) stack, num, sign = [], 0, \'+\' while i < n: if expression[i].isdigit(): num = num * 10 + int(expression[i]) if expression[i] in \\"+-*/\\" or i == n - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack.append(stack.pop() * num) elif sign == \'/\': stack.append(int(stack.pop() / num)) # truncate towards zero sign = expression[i] num = 0 i += 1 return sum(stack)"},{"question":"Write a function that takes an array of integers and returns a new array containing only the integers that are an even number of digits long. For example, the number 123456 has 6 digits and is considered an even-length number, while 12345 has 5 digits and is not. # Constraints - Numbers in the input array are guaranteed to be positive integers. - The input array can be of any length, including zero (an empty array). - The returned array should maintain the order of the integers as they appeared in the input array. # Examples ```python even_digit_numbers([12, 123, 1234, 12345, 123456]) # Returns [12, 1234, 123456] even_digit_numbers([1, 22, 333, 4444, 55555, 666666]) # Returns [22, 4444, 666666] even_digit_numbers([]) # Returns [] even_digit_numbers([1, 3, 5, 7]) # Returns [] ``` # Implementation Notes Think about how you can determine the number of digits in a given number. Consider the use of string-based methods or mathematical approaches. Ensure your function handles all edge cases efficiently.","solution":"def even_digit_numbers(arr): Returns a new list containing only the integers from the input list that have an even number of digits. return [num for num in arr if len(str(num)) % 2 == 0]"},{"question":"A company wants to monitor the performance of its employees based on their worklogs. Each worklog entry consists of the employee\'s ID, the project they worked on, the number of hours they spent, and the date of the entry. The company requires a report that summarizes the total hours worked by each employee on each project throughout a given date range. Write a program that processes the worklogs and generates the required report. Input The first line of the input contains two dates in the format \\"YYYY-MM-DD YYYY-MM-DD\\", representing the start and end dates of the range (inclusive). The subsequent lines contain worklog entries in the format \\"ID PROJECT HOURS DATE\\". All fields are separated by a single space. ID is a string without spaces, PROJECT is a string without spaces, HOURS is an integer, and DATE is in the format \\"YYYY-MM-DD\\". Output For each employee, output their ID followed by a list of total hours worked on each project within the date range, in the order of the first occurrence of the project in the input. Each employee\'s details should start on a new line. Employees should be listed in the order of their first occurrence in the input. Examples Input 2023-01-01 2023-01-31 e1 projectA 5 2023-01-05 e2 projectB 3 2023-01-06 e1 projectA 2 2023-01-10 e2 projectA 4 2023-01-15 e1 projectB 6 2023-01-20 Output e1 projectA: 7 projectB: 6 e2 projectB: 3 projectA: 4 Input 2023-01-01 2023-02-01 e1 projectA 3 2023-01-02 e2 projectB 5 2023-01-03 e3 projectA 4 2023-01-02 e1 projectA 7 2023-01-28 e3 projectC 2 2023-01-30 e2 projectA 6 2023-01-25 Output e1 projectA: 10 e2 projectB: 5 projectA: 6 e3 projectA: 4 projectC: 2","solution":"from collections import defaultdict from datetime import datetime def process_worklogs(start_date, end_date, worklogs): Processes worklogs to generate a report of total hours worked by each employee on each project within the given date range. :param start_date: string, inclusive start date in format \\"YYYY-MM-DD\\" :param end_date: string, inclusive end date in format \\"YYYY-MM-DD\\" :param worklogs: list of strings, each representing a worklog entry in the format \\"ID PROJECT HOURS DATE\\" :return: list of strings, each representing the report for an employee report = {} start_dt = datetime.strptime(start_date, \\"%Y-%m-%d\\") end_dt = datetime.strptime(end_date, \\"%Y-%m-%d\\") for entry in worklogs: employee_id, project, hours, date = entry.split() hours = int(hours) date_dt = datetime.strptime(date, \\"%Y-%m-%d\\") if start_dt <= date_dt <= end_dt: if employee_id not in report: report[employee_id] = defaultdict(int) report[employee_id][project] += hours report_ordered = sorted(report.keys(), key=lambda x: next(entry for entry in worklogs if entry.startswith(x))) result = [] for employee in report_ordered: projects_worked = [f\\"{project}: {hours}\\" for project, hours in report[employee].items()] result.append(f\\"{employee} \\" + \\" \\".join(projects_worked)) return result"},{"question":"You are organizing a marathon event and want to ensure that each runner receives a unique bib number. Unfortunately, due to a clerical error, some of the bib numbers have been duplicated. You need to reassign the minimum number of bib numbers to ensure that all runners have unique numbers. Write a program that takes in the current list of bib numbers and outputs the minimum number of reassignments required to make all bib numbers unique. -----Constraints----- - 1 leq N leq 200000 - 1 leq bib_i leq 1000000 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: N bib_1 bib_2 ... bib_N -----Output----- Print the minimum number of bib numbers that need to be reassigned to ensure all bib numbers are unique. -----Sample Input----- 5 1 2 3 3 5 -----Sample Output----- 1 In this case, reassigning one of the bib numbers that are duplicates (e.g., changing the second \'3\' to a \'4\') would result in all unique bib numbers. Therefore, the output is 1.","solution":"def min_reassignments(N, bibs): from collections import Counter bib_counter = Counter(bibs) duplicates = [bib for bib, count in bib_counter.items() if count > 1] reassignments = 0 for bib in duplicates: while bib_counter[bib] > 1: bib_counter[bib] -= 1 reassignments += 1 new_bib = bib + 1 while new_bib in bib_counter: new_bib += 1 bib_counter[new_bib] = 1 return reassignments def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) bibs = list(map(int, data[1:])) result = min_reassignments(N, bibs) print(result)"},{"question":"Your task is to write a function that takes in a list of integers and returns a new list containing only the prime numbers from the input list. Prime numbers are numbers greater than 1 that have no divisors other than 1 and themselves. # Detailed Requirements 1. **Function Name**: filter_primes 2. **Input**: - A list of integers (e.g., `[2, 4, 5, 6, 9, 11, 13]`). 3. **Output**: - A list of integers containing only the prime numbers from the input list. 4. **Constraints**: - The input list can contain negative numbers and zero. - The list can be empty. # Example - Input: `[2, 4, 5, 6, 9, 11, 13]` - Output: `[2, 5, 11, 13]` - Input: `[-3, 0, 1, 4, 7, 8]` - Output: `[7]` # Notes - Ensure your function handles the edge cases, such as lists with no prime numbers. - Optimize your solution for performance, considering the time complexity of prime-checking algorithms. # Hint You might want to write a helper function to check if a number is prime.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(nums): Returns a list of prime numbers from the input list of integers. return [num for num in nums if is_prime(num)]"},{"question":"You are given a rectangular matrix of integers. Your task is to write a function that returns the transpose of the matrix. The transpose of a matrix is a new matrix whose rows are the columns of the original matrix. Input Format The first line contains two integers m and n – the number of rows and columns of the matrix, respectively. The next m lines contain n integers each, representing the matrix elements. Constraints 1 le m, n le 10 -100 le matrix elements le 100 Output Format Print the transposed matrix, with each row on a new line and the elements separated by a space. Sample Input 0 2 3 1 2 3 4 5 6 Sample Output 0 1 4 2 5 3 6 Explanation 0 The original matrix is: ``` 1 2 3 4 5 6 ``` The transposed matrix is: ``` 1 4 2 5 3 6 ```","solution":"def transpose_matrix(matrix): Returns the transpose of a given matrix. return [list(row) for row in zip(*matrix)]"},{"question":"The problem at hand is to help a detective break a secret code. The code you need to break involves decoding a numerical string by following specific rules. When given a numerical string, each digit can be decoded into letters where \'1\' translates to \'A\', \'2\' translates to \'B\', ..., \'26\' translates to \'Z\'. The task is to find the total number of ways to decode a given numerical string. Write a function that takes an integer `T` (the number of test cases), followed by `T` strings consisting of numerical digits, and returns the total number of ways to decode each string. Input: - The first line contains an integer `T` (1 ≤ T ≤ 50), the total number of test cases. - Each of the next `T` lines contains a string of digits (1 ≤ length ≤ 100). Output: For each test case, output the number of ways to decode the string on a new line. Example: Input: 3 12 226 0 Output: 2 3 0 Explanation: - The string \\"12\\" can be decoded as \\"AB\\" (1 2) or \\"L\\" (12), giving 2 ways. - The string \\"226\\" can be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6), giving 3 ways. - The string \\"0\\" does not correspond to any letters, giving 0 ways.","solution":"def num_decodings(s: str) -> int: if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0], dp[1] = 1, 1 for i in range(2, n + 1): if s[i - 1] != \'0\': dp[i] += dp[i - 1] if 10 <= int(s[i - 2:i]) <= 26: dp[i] += dp[i - 2] return dp[n] def decode_test_cases(T: int, test_cases: list) -> list: results = [] for case in test_cases: results.append(num_decodings(case)) return results"},{"question":"Given an array of distinct integers, write a function that returns all pairs of integers whose sum is equal to a given target value. The result should be an array of pairs (each pair itself is an array of two integers) in the ascending order of the first element, and for pairs with the same first element, the second element should be in ascending order as well. If no such pair exists, return an empty array. Example 1: Input: arr = [1, 2, 3, 4, 5] target = 5 Output: [[1, 4], [2, 3]] Explanation: 1+4=5 and 2+3=5 Example 2: Input: arr = [0, -1, 2, -3, 1] target = -2 Output: [[-3, 1]] Explanation: -3+1=-2 Example 3: Input: arr = [1, 3, 2, 4] target = 8 Output: [] Explanation: There are no pairs whose sum is 8. Your Task: You don\'t need to read input or print anything. Complete the function findPairs() which takes the array of integers arr and an integer target as input parameters and returns an array of pairs of integers according to the requirements described above. Expected Time Complexity: O(NlogN) Expected Auxiliary Space: O(N) Constraints: 1 ≤ arr.length ≤ 10^4 -10^4 ≤ arr[i] ≤ 10^4","solution":"def findPairs(arr, target): Find all pairs of integers in the array whose sum equals the target value. Parameters: arr (list): A list of distinct integers. target (int): The target sum value. Returns: list: A list of pairs (each pair is a list of two integers) whose sum equals the target value. pair_dict = {} pairs = [] for number in arr: complement = target - number if complement in pair_dict: pairs.append([min(number, complement), max(number, complement)]) pair_dict[number] = True # Sorting pairs primarily by the first element, then by the second element if the first is the same pairs.sort() return pairs"},{"question":"Consider a simplified version of the popular board game, Monopoly. In this variation, the only properties available are spaces numbered from 1 to N, with some of these spaces marked as special \\"Treasure\\" spaces. Each turn, a player has full control over a single die (with faces numbered from 1 to 6), allowing them to decide the outcome of their roll. A player starts at the first space and aims to reach or exceed space N in the minimum number of turns. However, landing on a Treasure space offers an immediate teleportation to another space further ahead. The teleportation is mandatory and occurs within the same turn. Given the starting space, the number of Treasure spaces, and their respective teleportation rules, determine the minimum number of turns required to reach or exceed space N. Note: The player always starts from space number 1. Input: - The first line contains an integer T, the number of test cases. - Each test case has: - The first line containing two space-separated integers N and M, representing the target space and the number of Treasure spaces respectively. - The next M lines, each containing two space-separated integers Pi and Ti, where Pi is the position of the Treasure space and Ti is the destination space it teleports the player to. Output: - For each test case, print a single integer, the minimum number of turns needed to reach or exceed space N. Constraints: - 1 ≤ T ≤ 5 - 10 ≤ N ≤ 10^4 - 0 ≤ M ≤ 100 - 1 ≤ Pi < Ti ≤ N Example Input: 1 15 2 3 10 9 14 Example Output: 2 Explanation: In the first example, the player will move as follows: - In the first turn, they may choose to roll a 2 to land on space 3; from here they will be teleported to space 10. - In the second turn, they will roll a 5, moving from space 10 to 15, thereby reaching the target space.","solution":"from collections import deque def min_turns_to_reach_n(test_cases): results = [] for case in test_cases: N, M, treasures = case # Dictionary to store teleport destinations teleport = {P: T for P, T in treasures} # BFS initialization queue = deque([(1, 0)]) # (current_position, turns) visited = set() while queue: pos, turns = queue.popleft() if pos >= N: results.append(turns) break if pos in visited: continue visited.add(pos) for roll in range(1, 7): next_pos = pos + roll if next_pos in teleport: next_pos = teleport[next_pos] if next_pos not in visited: queue.append((next_pos, turns + 1)) return results def solve_monopoly_game(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, input_lines[index].split()) index += 1 treasures = [] for _ in range(M): P, T = map(int, input_lines[index].split()) index += 1 treasures.append((P, T)) test_cases.append((N, M, treasures)) return min_turns_to_reach_n(test_cases)"},{"question":"Given an array of integers, return the product of all the unique prime numbers present in the array. If no prime numbers are present in the array, return 1. For example: - Input: [4, 7, 8, 15, 7, 19] - Output: 133 (since 7 and 19 are the unique prime numbers and 7 * 19 = 133) - Input: [4, 6, 8, 10] - Output: 1 (since there are no prime numbers in the array)","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def product_of_unique_primes(arr): Return the product of all unique prime numbers in the given array. If no prime numbers are found, return 1. unique_primes = set(num for num in arr if is_prime(num)) if not unique_primes: return 1 product = 1 for prime in unique_primes: product *= prime return product"},{"question":"You\'ve been tasked with implementing a simplified version of the classic board game \\"Battleship\\". In this game, each player has a fleet of ships placed on a grid, and they take turns calling out grid coordinates to \\"attack\\" their opponent\'s ships. The objective is to sink all of the opponent\'s ships. ___ # Task: You need to implement the `Battleship` class. It should have the following methods: 1. `__init__(self, size)`: Initializes the game board of given size `(size x size)` and sets up an empty board for each player. 2. `place_ship(self, player, ship_length, coordinates, orientation)`: Places a ship for a player on the board. 3. `attack(self, player, coordinates)`: Registers an attack by the player on the opponent\'s board and returns the outcome. # Method Descriptions: 1. `__init__(self, size)`: Initializes an empty game board of given size (`size x size`) for each player. Each cell in the board can be either \'.\' (empty), \'S\' (occupied by a ship), \'H\' (hit), or \'M\' (miss). 2. `place_ship(self, player, ship_length, coordinates, orientation)`: - `player` (int): The player number (1 or 2). - `ship_length` (int): The length of the ship. - `coordinates` (tuple): The starting coordinate to place the ship `(row, col)`. - `orientation` (str): The orientation of the ship (\'H\' for horizontal, \'V\' for vertical). - Returns `True` if the ship can be placed successfully, `False` otherwise. 3. `attack(self, player, coordinates)`: - `player` (int): The attacking player number (1 or 2). - `coordinates` (tuple): The target coordinate `(row, col)` to attack. - Returns: - `\\"Hit\\"` if an opponent’s ship is hit. - `\\"Miss\\"` if the attack missed. - `\\"Player X wins!\\"` if the attack sinks the last ship of the opponent, where `X` is the attacking player number. # Rules: - Players take turns attacking the opponent\'s board. - Ships cannot overlap or go out of the board boundaries. ___ Example ```python game = Battleship(5) game.place_ship(1, 3, (2, 1), \'H\') # Places a ship of length 3 for player 1 at (2, 1) horizontally game.place_ship(2, 2, (3, 2), \'V\') # Places a ship of length 2 for player 2 at (3, 2) vertically print(game.attack(1, (3, 2))) # Player 1 attacks and hits the ship at (3, 2) print(game.attack(2, (2, 1))) # Player 2 attacks and hits the ship at (2, 1) print(game.attack(1, (4, 2))) # Player 1 attacks and hits the ship at (4, 2) print(game.attack(2, (2, 3))) # Player 2 attacks and misses as there\'s no ship at (2, 3) print(game.attack(1, (4, 3))) # Player 1 attacks and misses as there\'s no ship at (4, 3) ```","solution":"class Battleship: def __init__(self, size): self.size = size self.boards = {1: [[\'.\' for _ in range(size)] for _ in range(size)], 2: [[\'.\' for _ in range(size)] for _ in range(size)]} self.ships = {1: [], 2: []} def place_ship(self, player, ship_length, coordinates, orientation): board = self.boards[player] row, col = coordinates # Check if placement is within bounds and valid if orientation == \'H\': if col + ship_length > self.size: return False for i in range(ship_length): if board[row][col+i] != \'.\': return False for i in range(ship_length): board[row][col+i] = \'S\' elif orientation == \'V\': if row + ship_length > self.size: return False for i in range(ship_length): if board[row+i][col] != \'.\': return False for i in range(ship_length): board[row+i][col] = \'S\' self.ships[player].append((ship_length, coordinates, orientation)) return True def attack(self, player, coordinates): opponent = 2 if player == 1 else 1 board = self.boards[opponent] row, col = coordinates if board[row][col] == \'S\': board[row][col] = \'H\' if self.check_win(opponent): return f\\"Player {player} wins!\\" return \\"Hit\\" elif board[row][col] == \'.\': board[row][col] = \'M\' return \\"Miss\\" else: # already \'H\' or \'M\' return \\"Miss\\" def check_win(self, player): board = self.boards[player] for row in board: if \'S\' in row: return False return True"},{"question":"You are given a 2D grid with some cells marked as obstacles. You want to move from the top-left cell to the bottom-right cell of this grid. You can only move right or down at any cell and you cannot move through obstacles. Determine if there is a path from the top-left cell to the bottom-right cell. If there is a path, print \\"YES\\", otherwise print \\"NO\\". -----Constraints----- - The grid will be represented as a matrix of size m x n (1 ≤ m, n ≤ 100). - Each cell in the grid will either be 0 (an open cell) or 1 (an obstacle). - The top-left and bottom-right cells are always open (grid[0][0] = 0 and grid[m-1][n-1] = 0). -----Input----- Input is given from Standard Input in the following format: m n grid_1_1 grid_1_2 ... grid_1_n grid_2_1 grid_2_2 ... grid_2_n ... grid_m_1 grid_m_2 ... grid_m_n -----Output----- Print \\"YES\\" if there is a path from the top-left to the bottom-right cell; otherwise, print \\"NO\\". -----Sample Input----- 3 3 0 1 0 0 0 0 1 1 0 -----Sample Output----- YES Explanation: One possible path is: (0,0) → (1,0) → (1,1) → (2,1) → (2,2). -----Sample Input----- 3 3 0 1 0 1 1 0 1 1 0 -----Sample Output----- NO Explanation: There is no path from the top-left to the bottom-right cell in this grid.","solution":"def is_path_possible(m, n, grid): Determines if there is a path from the top-left to the bottom-right cell. if grid[0][0] == 1 or grid[m-1][n-1] == 1: return \\"NO\\" def dfs(x, y, visited): if x == m - 1 and y == n - 1: return True directions = [(1, 0), (0, 1)] visited.add((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: if dfs(nx, ny, visited): return True return False return \\"YES\\" if dfs(0, 0, set()) else \\"NO\\" # Example usage: # m, n = 3, 3 # grid = [ # [0, 1, 0], # [0, 0, 0], # [1, 1, 0] # ] # print(is_path_possible(m, n, grid)) # Output: YES"},{"question":"Write a function called `find_anagram_pairs` that takes a list of strings and returns a list of tuples, where each tuple contains a pair of indices that correspond to anagrams in the input list. For example, given the input list `[\\"listen\\", \\"silent\\", \\"enlist\\", \\"rat\\", \\"tar\\", \\"art\\", \\"star\\"]`, the function should return `[(0, 1), (0, 2), (1, 2), (3, 4), (3, 5), (4, 5)]` because: 1. \\"listen\\", \\"silent\\", and \\"enlist\\" are anagrams of each other, corresponding to indices (0, 1), (0, 2), and (1, 2). 2. \\"rat\\", \\"tar\\", and \\"art\\" are anagrams of each other, corresponding to indices (3, 4), (3, 5), and (4, 5).","solution":"def find_anagram_pairs(words): Returns a list of tuples containing indices of anagram pairs in the input list. :param words: A list of strings :return: A list of tuples with the indices of anagram pairs anagram_dict = {} for i, word in enumerate(words): sorted_word = \'\'.join(sorted(word)) if sorted_word in anagram_dict: anagram_dict[sorted_word].append(i) else: anagram_dict[sorted_word] = [i] anagram_pairs = [] for indices in anagram_dict.values(): for i in range(len(indices)): for j in range(i+1, len(indices)): anagram_pairs.append((indices[i], indices[j])) return anagram_pairs"},{"question":"Peter loves solving mathematical puzzles. One day he stumbled upon a challenge involving palindrome numbers. Palindrome numbers are numbers that remain the same when their digits are reversed (e.g., 121, 555, 1221). Given an integer `x`, Peter needs to find the length of the longest subsequence of digits that form a palindrome. A subsequence is a sequence derived by deleting some or none of the digits of the number without changing the order of the remaining digits. You need to help Peter by writing a function that takes an integer `x` and returns the length of the longest palindromic subsequence. Input Format: The input consists of a single integer `x`. Output Format: Output a single integer — the length of the longest palindromic subsequence in `x`. Constraints: 1 ≤ x ≤ 10^18 SAMPLE INPUT 12321 SAMPLE OUTPUT 5 Explanation: For the input 12321, the entire number itself is a palindrome. Hence, the length of the longest palindromic subsequence is 5. SAMPLE INPUT 110011 SAMPLE OUTPUT 6 Explanation: For the input 110011, the entire number itself is a palindrome. Hence, the length of the longest palindromic subsequence is 6. SAMPLE INPUT 234923 SAMPLE OUTPUT 3 Explanation: For the input 234923, the longest palindromic subsequence is either \\"232\\" or \\"393\\". Hence, the length of the longest palindromic subsequence is 3.","solution":"def longest_palindromic_subsequence(x): Returns the length of the longest palindromic subsequence of the digits of x. s = str(x) n = len(s) # Create a 2D array to store the length of longest palindromic subsequence dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the table. The bottom-up approach is used here. for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # The longest palindromic subsequence length is in dp[0][n-1] return dp[0][n - 1]"},{"question":"A bipartite graph (or bigraph) is a graph whose vertices can be divided into two disjoint and independent sets U and V such that every edge connects a vertex in U to one in V. Bipartite graphs are often used to model relationships between two different classes of objects. In this task, you need to determine if a given graph is bipartite. # Input - The graph is represented using an adjacency matrix, where the value `graph[i][j]` is 1 if there is an edge between vertex `i` and vertex `j`, and 0 otherwise. - The input adjacency matrix `graph` is guaranteed to be symmetric, meaning if `graph[i][j]` is 1, then `graph[j][i]` is also 1. - The matrix is of size n x n where 1 <= n <= 100. # Output - Return `True` if the given graph is bipartite, and `False` otherwise. # Examples ```python is_bipartite([[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0]]) # Output: True is_bipartite([[0, 1, 1], [1, 0, 1], [1, 1, 0]]) # Output: False is_bipartite([[0, 1, 1, 1], [1, 0, 1, 0], [1, 1, 0, 1], [1, 0, 1, 0]]) # Output: False is_bipartite([[0, 1, 0, 0], [1, 0, 1, 1], [0, 1, 0, 0], [0, 1, 0, 0]]) # Output: True ```","solution":"def is_bipartite(graph): n = len(graph) colors = [-1] * n def bfs(source): queue = [source] colors[source] = 0 while queue: node = queue.pop(0) for neighbor in range(n): if graph[node][neighbor] == 1: if colors[neighbor] == -1: colors[neighbor] = 1 - colors[node] queue.append(neighbor) elif colors[neighbor] == colors[node]: return False return True for i in range(n): if colors[i] == -1: if not bfs(i): return False return True"},{"question":"You are working on a data visualization tool for an e-commerce platform. The platform stores the revenue earned each day for the last year. Given these daily revenues, you need to answer several questions about the revenue for specific ranges of days. The days of the year are numbered from 1 to 365. You will be given the revenue for each day and a list of queries. Each query specifies a range of days, and you need to calculate the total revenue for that range. Input Read the following input from standard input. * An integer T denoting the number of test cases. * For each test case: * A single line with 365 integers separated by spaces, where the i-th integer represents the revenue on the i-th day. * An integer Q denoting the number of queries. * Q lines follow, each containing two integers, L and R (1 ≤ L ≤ R ≤ 365), which represent the starting and ending days of the query (inclusive). Output For each query, print a single integer representing the total revenue for the specified range of days. Example Input 2 5 3 8 1 2 10 12 4 6 7 3 9 11 5 6 7 8 9 10 11 2 1 4 5 9 3 8 12 11 10 7 6 5 4 3 2 1 8 9 10 11 12 3 2 1 5 4 3 2 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 10 11 12 5 4 3 2 1 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 7 6 5 4 3 12 11 10 9 8 7 6 5 4 3 2 1 3 2 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 6 7 8 9 10 5 4 3 2 1 8 12 7 10 9 11 5 8 7 6 1 2 3 4 5 6 7 8 9 3 2 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 10 11 2 3 6 7 8 1 2 3 4 5 6 7 8 9 9 8 1 2 11 5 4 3 2 1 6 7 8 9 1 2 3 4 5 6 10 12 8 5 4 3 2 1 7 6 5 4 12 10 11 9 8 7 6 5 4 3 2 1 5 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 1 10 50 100 200 250 300 365 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 50 51 1 365 Output 68 519 263 694 1 365","solution":"def total_revenue_for_ranges(T, test_cases): results = [] for case_index in range(T): revenues = test_cases[case_index][\'revenues\'] queries = test_cases[case_index][\'queries\'] # Create a prefix sum array for the revenues prefix_sum = [0] * (365 + 1) for i in range(1, 366): prefix_sum[i] = prefix_sum[i-1] + revenues[i-1] for query in queries: L, R = query total_revenue = prefix_sum[R] - prefix_sum[L-1] results.append(total_revenue) return results"},{"question":"There are N students in a class, and each student has scored a certain percentage in a recent exam. Given a threshold percentage T, you are to determine how many students have scored at least T percentage. -----Constraints----- - 1 le N le 10^5 - 0 le T le 100 - 0 le score_i le 100 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N T score_1 score_2 ldots score_N -----Output----- Print the number of students who have scored at least T percentage. -----Sample Input----- 6 50 70 45 50 90 66 30 -----Sample Output----- 4 Four students have scored at least 50 percentage: the first, third, fourth, and fifth students.","solution":"def count_students_with_min_score(scores, T): Returns the number of students who have scored at least T percentage. Parameters: scores (list of int): List of scores of students. T (int): The threshold percentage. Returns: int: Number of students with scores >= T return sum(1 for score in scores if score >= T) def process_input(input_str): Processes the input string and computes the result. Parameters: input_str (str): Input string in the specified format. Returns: int: Number of students with scores >= threshold. lines = input_str.strip().split() N = int(lines[0]) T = int(lines[1]) scores = list(map(int, lines[2:2+N])) return count_students_with_min_score(scores, T)"},{"question":"A company wants to implement a time-tracking system that calculates the total number of hours worked by each employee. They want to make sure that work done on weekends (Saturday and Sunday) is not included in the total hours worked. You are given a list of work logs, each with a start time and an end time. Each log represents a continuous period of work done by an employee in the format (employee_id, start_time, end_time). Both `start_time` and `end_time` are ISO 8601 timestamps (e.g., \\"2023-10-13T08:00:00\\") in UTC. Write a function to calculate the total number of hours worked on weekdays for each employee. Constraints: * All timestamps are in ISO 8601 format. * The week starts on Monday and ends on Sunday. * If a work period spans multiple days, only the weekday hours should be counted. * The list of work logs is guaranteed to be non-empty. Input: The input is given as a list logs: ```python logs = [ (employee_id, \\"start_time_ISO_8601\\", \\"end_time_ISO_8601\\"), ... ] ``` Output: A dictionary where the keys are employee IDs and the values are total hours worked on weekdays. Examples: Input: ```python logs = [ (\\"emp1\\", \\"2023-10-11T08:00:00\\", \\"2023-10-11T17:00:00\\"), (\\"emp1\\", \\"2023-10-12T08:00:00\\", \\"2023-10-12T17:00:00\\"), (\\"emp1\\", \\"2023-10-13T08:00:00\\", \\"2023-10-13T17:00:00\\"), (\\"emp2\\", \\"2023-10-14T08:00:00\\", \\"2023-10-14T17:00:00\\"), (\\"emp2\\", \\"2023-10-15T08:00:00\\", \\"2023-10-15T17:00:00\\"), (\\"emp2\\", \\"2023-10-16T08:00:00\\", \\"2023-10-16T17:00:00\\") ] ``` Output: ```python { \\"emp1\\": 27.0, \\"emp2\\": 9.0 } ``` Explanation: * `emp1` worked 9 hours on each of the three weekdays (27 hours in total). * `emp2` worked 9 hours on one weekday (Monday, 2023-10-16) and the weekend hours were not included. Note: You can assume the `logs` list will not contain overlapping work periods for the same employee.","solution":"from datetime import datetime, timedelta def total_weekday_hours(logs): Calculate the total number of hours worked on weekdays for each employee. Args: logs (list): List of work logs in the format [(employee_id, \\"start_time_ISO_8601\\", \\"end_time_ISO_8601\\"), ...] Returns: dict: Dictionary with employee IDs as keys, and total weekday hours as values. def is_weekday(date): return date.weekday() < 5 # Monday: 0, Tuesday: 1, ..., Sunday: 6 def fractional_hours(start, end): # in seconds total_seconds = (end - start).total_seconds() return total_seconds / 3600 hours_dict = {} for employee_id, start_time_str, end_time_str in logs: start_time = datetime.fromisoformat(start_time_str) end_time = datetime.fromisoformat(end_time_str) current_time = start_time while current_time < end_time: next_day_start = current_time.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1) if next_day_start > end_time: next_day_start = end_time if is_weekday(current_time): hours_worked = fractional_hours(current_time, next_day_start) if employee_id in hours_dict: hours_dict[employee_id] += hours_worked else: hours_dict[employee_id] = hours_worked current_time = next_day_start return hours_dict"},{"question":"You are given a 2D grid of size n times m and a list of instructions. The grid is initially filled with zeros, and you need to process the instructions to update the values in the grid. An instruction is represented as a tuple (x_1, y_1, x_2, y_2), which implies adding 1 to each element of the subgrid that starts from (x_1, y_1) to (x_2, y_2) (both inclusive). Your task is to determine the final values of the grid after processing all instructions. -----Input----- The first line contains two integers n and m (1 le n, m le 1000), which are the dimensions of the grid. The second line contains a single integer k (1 le k le 10^5), which is the number of instructions. The next k lines each contain four integers x_1, y_1, x_2, y_2 (1 le x_1 le x_2 le n, 1 le y_1 le y_2 le m), which define the coordinates of the subgrid for each instruction. -----Output----- Output n lines, each containing m integers, representing the final grid. -----Examples----- Sample Input 1: 3 3 2 1 1 2 2 2 2 3 3 Sample Output 1: 1 1 0 1 2 1 0 1 1 Sample Input 2: 4 4 3 1 1 4 4 2 2 3 3 1 1 2 2 Sample Output 2: 2 2 1 1 2 3 2 1 1 2 2 1 1 1 1 1","solution":"def apply_instructions(n, m, instructions): # Initialize the grid with zeros. grid = [[0] * m for _ in range(n)] # Apply each instruction. for x1, y1, x2, y2 in instructions: for i in range(x1-1, x2): for j in range(y1-1, y2): grid[i][j] += 1 return grid"},{"question":"Alice and Bob are participating in a programming competition. For each problem, the participants earn a specified number of points based on the difficulty level of the problem. They follow these rules: - If a problem is of difficulty 1, it awards 10 points. - If a problem is of difficulty 2, it awards 20 points. - If a problem is of difficulty 3, it awards 30 points. Given the number of problems solved by Alice and Bob, and the difficulty levels of these problems, calculate the total score each participant earns. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - For each test case: - The first line contains an integer N, the number of problems solved by Alice. - The second line contains N space-separated integers representing the difficulty levels of problems solved by Alice. - The third line contains an integer M, the number of problems solved by Bob. - The fourth line contains M space-separated integers representing the difficulty levels of problems solved by Bob. ------ Output Format ------ For each test case, output on a new line two space-separated integers - the total points earned by Alice and the total points earned by Bob. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N, M ≤ 100 1 ≤ text{difficulty level} ≤ 3 ----- Sample Input 1 ------ 2 3 1 2 3 2 2 3 4 1 1 1 1 3 2 2 2 ----- Sample Output 1 ------ 60 50 40 60 ----- Explanation 1 ------ Test case 1: - Alice solved 3 problems with difficulty levels 1, 2, and 3. Therefore, her score is 10 + 20 + 30 = 60. - Bob solved 2 problems with difficulty levels 2 and 3. Therefore, his score is 20 + 30 = 50. Test case 2: - Alice solved 4 problems, all with difficulty level 1. Therefore, her score is 10 * 4 = 40. - Bob solved 3 problems, all with difficulty level 2. Therefore, his score is 20 * 3 = 60.","solution":"def calculate_scores(T, test_cases): def get_score(problems): score = 0 for problem in problems: if problem == 1: score += 10 elif problem == 2: score += 20 elif problem == 3: score += 30 return score results = [] for i in range(T): N = test_cases[i][0] alice_problems = test_cases[i][1] M = test_cases[i][2] bob_problems = test_cases[i][3] alice_score = get_score(alice_problems) bob_score = get_score(bob_problems) results.append((alice_score, bob_score)) return results"},{"question":"Petra owns a chain of N flower shops, each of which has a certain number of flowers of different types. Each shop sells multiple types of flowers. She wants to promote her shops by sending one flower to each customer, but she wants to maximize the variety of flowers the customers receive. Petra can only send one type of flower from each shop. However, due to logistic constraints, the flower type sent from shop i must be the most frequent flower type in that shop. If there is a tie (multiple flower types have the same maximum frequency), she will choose the type that appears first alphabetically. Given an array of N shops, where each shop is represented by a string of lowercase letters (each letter denotes a type of flower, and the frequency of that letter denotes the frequency of that flower type in the shop), determine the type of flower Petra should send from each shop to maximize the variety. ------ Input Format ------ - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, denoting the number of flower shops. - The following N lines of each test case contain a string representing the flower types in the respective shop. ------ Output Format ------ For each test case, print a single line containing N space-separated characters representing the type of flower Petra should send from each shop. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ length of each string le 1000 - Each string contains only lowercase English letters (\'a\' - \'z\'). ----- Sample Input 1 ------ 2 3 abacc ccbbdd eeffee 2 aaa bbb ----- Sample Output 1 ------ a c e a b ----- Explanation 1 ------ In the first test case, for each shop: - Shop 1: \'a\' appears 2 times, \'b\' appears 1 time, \'c\' appears 2 times. Though \'a\' and \'c\' have the same frequency, \'a\' appears first alphabetically. - Shop 2: \'c\' appears 2 times, \'b\' appears 2 times, \'d\' appears 2 times. As all have the same frequency, we choose \'b\', which is alphabetically first. - Shop 3: \'e\' and \'f\' both appear 2 times. We choose \'e\' as it appears first alphabetically. In the second test case, for each shop: - Shop 1: Only \'a\' is available. - Shop 2: Only \'b\' is available.","solution":"def get_most_frequent_flower(flower_string): Returns the most frequent flower type in the string. In case of a tie, returns the alphabetically first type. from collections import Counter counter = Counter(flower_string) most_frequent = sorted(counter.items(), key=lambda x: (-x[1], x[0])) return most_frequent[0][0] def find_flowers_to_send(test_cases): For each test case, determine the type of flower to send from each shop. results = [] for case in test_cases: N, shops = case[\'N\'], case[\'shops\'] result = [] for shop in shops: result.append(get_most_frequent_flower(shop)) results.append(\\" \\".join(result)) return results"},{"question":"In a certain kingdom, there are N villages connected by N-1 roads with each road connecting exactly two villages such that there is a unique path between any two villages. Due to the rise of bandits, the king has decided to place a guard at some of the villages such that every village either has a guard or is directly connected to a village with a guard. Given the number of villages and the roads between them, determine the minimum number of guards needed to ensure that every village is guarded. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains a single integer N denoting the number of villages. - Next N-1 lines contain two space-separated integers u and v, denoting a road between village u and village v. ------ Output Format ------ For each test case, output the minimum number of guards required. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ u, v ≤ N - The sum of N over all test cases does not exceed 10^6. ----- Sample Input 1 ------ 2 3 1 2 1 3 5 1 2 1 3 3 4 3 5 ----- Sample Output 1 ------ 1 2 ----- Explanation 1 ------ Test Case 1: Place a guard at village 1. Test Case 2: Place a guard at village 1 and another at village 3, all villages are either guarded or connected to a guarded village.","solution":"def minimum_number_of_guards(T, test_cases): from collections import defaultdict, deque def bfs(start): visited = [False] * (N + 1) queue = deque([start]) depth = {start: 0} farthest_node = start max_depth = 0 while queue: node = queue.popleft() visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: queue.append(neighbor) depth[neighbor] = depth[node] + 1 if depth[neighbor] > max_depth: max_depth = depth[neighbor] farthest_node = neighbor return farthest_node, max_depth results = [] for n, edges in test_cases: N = n graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Start BFS from an arbitrary node (node 1) farthest_node_from_start, _ = bfs(1) # Start BFS again from the farthest node found to determine tree diameter farthest_node_from_farthest, tree_diameter = bfs(farthest_node_from_start) # Minimum number of guards needed is the ceiling of half the diameter results.append((tree_diameter + 1) // 2) return results"},{"question":"You are given a collection of strings where each string contains only lowercase letters. Your task is to find the length of the longest common subsequence (LCS) among all the given strings. A subsequence of a string is derived by deleting any number of characters (including zero) from the string without changing the order of the remaining characters. -----Input----- The first line contains a single integer n (2 le n le 20) — the number of strings. Each of the next n lines contains a string of lowercase letters s_i (1 le |s_i| le 100) — the string itself. -----Output----- Print a single integer — the length of the longest common subsequence among all the given strings. -----Examples----- Input 3 abcde ace ae Output 2 Input 2 abc xyz Output 0 -----Note----- In the first example, the longest common subsequence is \\"ae\\", which has a length of 2. In the second example, there is no common subsequence between the two strings, so the output is 0.","solution":"def lcs_length(strings): Returns the length of the longest common subsequence (LCS) among the given list of strings. from functools import lru_cache def lcs_helper(s1, s2): Returns the LCS length between two strings s1 and s2 using dynamic programming. @lru_cache(None) def dp(i, j): if i == 0 or j == 0: return 0 if s1[i-1] == s2[j-1]: return dp(i-1, j-1) + 1 else: return max(dp(i-1, j), dp(i, j-1)) return dp(len(s1), len(s2)) def lcs_multiple(strings): Calculates the LCS for multiple strings by iteratively calculating the LCS of pairs. if not strings: return 0 current_lcs = strings[0] for i in range(1, len(strings)): next_lcs = [] m, n = len(current_lcs), len(strings[i]) dp_table = [[0] * (n + 1) for _ in range(m + 1)] for x in range(1, m + 1): for y in range(1, n + 1): if current_lcs[x - 1] == strings[i][y - 1]: dp_table[x][y] = dp_table[x - 1][y - 1] + 1 else: dp_table[x][y] = max(dp_table[x - 1][y], dp_table[x][y - 1]) x, y = m, n while x > 0 and y > 0: if current_lcs[x - 1] == strings[i][y - 1]: next_lcs.append(current_lcs[x - 1]) x -= 1 y -= 1 elif dp_table[x - 1][y] >= dp_table[x][y - 1]: x -= 1 else: y -= 1 next_lcs.reverse() current_lcs = \'\'.join(next_lcs) return len(current_lcs) return lcs_multiple(strings)"},{"question":"You are given a string s consisting of lowercase Latin letters. Your task is to remove the minimum number of characters from the string so that no three consecutive characters in the resulting string are the same. If there are multiple ways to achieve this, return any one valid resulting string. Implement a function `remove_min_chars` that takes a single string as an argument and returns the resulting string. -----Input----- The input is a single string s (1 ≤ |s| ≤ 200,000) consisting of only lowercase Latin letters. -----Output----- Return a string with the minimum number of characters removed such that no three consecutive characters are the same. If multiple valid strings are possible, return any one of them. -----Examples----- Input aaabaaa Output aabaa Input bbcccbb Output bbccbb Input abcdefghijklmnopqrstuvwxyz Output abcdefghijklmnopqrstuvwxyz","solution":"def remove_min_chars(s): Remove the minimum number of characters so that no three consecutive characters are the same. if len(s) < 3: return s result = [] for char in s: # Check if the last two characters in the result and the current character are the same if len(result) >= 2 and result[-1] == result[-2] == char: continue result.append(char) return \'\'.join(result)"},{"question":"There is a grid of n x m dots. Each cell in the grid can either contain a black dot or no dot at all. Shane wants to calculate the maximum size of a square that can fit within the grid and contains only black dots (with each side of the square being composed entirely of cells containing black dots). The grid is represented by n strings (each of length m), where each string consists of characters \'.\' (denoting an empty cell) and \'#\' (denoting a cell containing a black dot). Given the grid, determine the maximum size of the square that contains only black dots. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 500) — representing the dimensions of the grid. The next n lines each contain a string of length m consisting of characters \'.\' and \'#\'. -----Output----- Print a single integer — the side length of the largest square that contains only black dots. If there are no black dots, print 0. -----Examples----- Input 4 4 ..#. #. .. .# Output 2 Input 5 6 ...... ...... .#.... ...... ...... Output 1 -----Note----- In the first sample, the largest square has side length 2 and fits in the bottom right part of the grid. In the second sample, only one single cell is \'#\', hence the largest square\'s side length is 1.","solution":"def max_square_size(n, m, grid): if n == 0 or m == 0: return 0 max_side = 0 dp = [[0]*m for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == \'#\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if dp[i][j] > max_side: max_side = dp[i][j] return max_side"},{"question":"You are given a list of N integers and an integer K. Your task is to determine the number of contiguous subarrays of length exactly K that have the maximum possible sum among all such subarrays. ------ Input ------ The first line contains two integers N and K, indicating the number of elements in the list and the length of the subarrays, respectively. The second line contains N integers that represent the elements of the list. ------ Output ------ Output a single integer indicating the number of contiguous subarrays of length exactly K that have the maximum possible sum. ------ Constraints ------ 1 leq N leq 10^5 1 leq K leq N -10^4 leq text{elements of the list} leq 10^4 ------ Sample Input 1 ------ 7 3 1 2 3 4 5 6 7 ------ Sample Output 1 ------ 5 ------ Explanation 1 ------ There are 5 contiguous subarrays of length 3: [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], and [5, 6, 7]. Among them, the subarray [5, 6, 7] has the maximum sum, which is 18. ------ Sample Input 2 ------ 10 2 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 ------ Sample Output 2 ------ 1 ------ Explanation 2 ------ There are 9 contiguous subarrays of length 2, all with negative sums. The subarray [-1, -2] has the maximum sum of -3, and it occurs only once.","solution":"def max_sum_subarray_count(N, K, array): if N == K: return 1 # Only one subarray when N == K # Calculate the initial window sum max_sum = current_sum = sum(array[:K]) count = 1 # Slide the window over the array for i in range(K, N): current_sum += array[i] - array[i - K] if current_sum > max_sum: max_sum = current_sum count = 1 elif current_sum == max_sum: count += 1 return count"},{"question":"You are given a list of \'n\' integers. Your task is to find the length of the longest subarray such that all its elements are equal. Input Format - The first line contains an integer \'n\' which denotes the number of elements in the array. - The second line contains \'n\' space-separated integers representing the elements of the array. Output Format - Output a single integer representing the length of the longest subarray with all equal elements. Constraints 1 ≤ n ≤ 100000 1 ≤ array[i] ≤ 10^9 SAMPLE INPUT 10 1 2 2 3 3 3 2 2 2 2 SAMPLE OUTPUT 4","solution":"def longest_equal_subarray(arr): Given a list of integers, finds the length of the longest subarray where all elements are equal. n = len(arr) if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if arr[i] == arr[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) # finalize the max length for the last segment return max_length"},{"question":"Implement a Stack using a linked list. The stack should support the following operations: (i) \\"push x\\" (which pushes the integer \'x\' onto the stack) (ii) \\"pop\\" (which pops an element from the stack and prints the popped element) Example 1: Input: Q = 6 Operations = [\\"push 3\\", \\"push 5\\", \\"pop\\", \\"push 7\\", \\"pop\\", \\"pop\\"] Output: 5 7 3 Explanation: In the first test case, the operations build the stack as follows: - \\"push 3\\" -> Stack: [3] - \\"push 5\\" -> Stack: [3, 5] - \\"pop\\" -> Pops 5, Stack: [3] - \\"push 7\\" -> Stack: [3, 7] - \\"pop\\" -> Pops 7, Stack: [3] - \\"pop\\" -> Pops 3, Stack: [] Example 2: Input: Q = 4 Operations = [\\"push 8\\", \\"pop\\", \\"pop\\", \\"push 9\\"] Output: 8 -1 Explanation: In the second test case, the operations build the stack as follows: - \\"push 8\\" -> Stack: [8] - \\"pop\\" -> Pops 8, Stack: [] - \\"pop\\" -> Pops -1 because the stack is empty - \\"push 9\\" -> Stack: [9] Your Task: You are required to complete the two methods \\"push()\\" and \\"pop()\\": - push(int x): Push the integer \'x\' onto the stack - pop(): Pop the top element from the stack and return it. If the stack is empty, return -1. Expected Time Complexity: O(1) for both push() and pop(). Expected Auxiliary Space: O(1) for both push() and pop(). Constraints: 1 ≤ Q ≤ 10^5 1 ≤ x ≤ 10^5","solution":"class Node: def __init__(self, data): self.data = data self.next = None class Stack: def __init__(self): self.head = None def push(self, x): new_node = Node(x) new_node.next = self.head self.head = new_node def pop(self): if self.head is None: return -1 else: popped_data = self.head.data self.head = self.head.next return popped_data def stack_operations(operations): s = Stack() result = [] for operation in operations: if operation.startswith(\\"push\\"): _, value = operation.split() s.push(int(value)) elif operation == \\"pop\\": result.append(s.pop()) return result"},{"question":"# Context In many puzzle games and exercises, traversing a grid or matrix is a common task that tests one\'s understanding of recursion or iterative solutions, and the ability to handle multidimensional data structures. # Your task You will be given a `n x n` grid (nested list) containing numbers. Your job is to find the longest increasing path starting from any cell in the grid. The movement is allowed in four directions: up, down, left, and right. You need to implement the following function: `def longest_increasing_path(grid: List[List[int]]) -> int:` __Input:__ - `grid`: A nested list of integers representing the `n x n` grid. __Output:__ - An integer representing the length of the longest increasing path. __Example:__ ``` grid = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] longest_increasing_path(grid) => 4 ``` __Explanation:__ One of the longest increasing paths is `[1, 2, 6, 9]`.","solution":"from typing import List def longest_increasing_path(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) memo = [[-1] * m for _ in range(n)] def dfs(x, y): if memo[x][y] != -1: return memo[x][y] directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] max_len = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] > grid[x][y]: max_len = max(max_len, 1 + dfs(nx, ny)) memo[x][y] = max_len return max_len res = 0 for i in range(n): for j in range(m): res = max(res, dfs(i, j)) return res"},{"question":"In a remote village, there are n people numbered from 1 to n. Each person can either be friends with another person or they may not know each other. Friendships are mutual, that is, if a person A is friends with person B, then person B is also friends with person A. The village is isolated due to heavy fog, and the villagers want to know if they are able to communicate indirectly through friends even if they are not directly friends. You need to find if all the villagers are connected, meaning there should be a path of friendships between any two villagers no matter how indirect. You are given q pairs of integers (a_i, b_i) which denote that person a_i and person b_i are friends. -----Input----- The first line contains two integers n and q (2 ≤ n ≤ 100, 1 ≤ q ≤ 10^4) — the number of people and the number of friendship pairs. The next q lines contain two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i) which represent a friendship between person a_i and person b_i. Each friendship pair is given only once. -----Output----- Print \\"YES\\" (without the quotes) if all the villagers are interconnected directly or indirectly through friendships. Otherwise, print \\"NO\\" (without the quotes). -----Examples----- Input 5 4 1 2 2 3 4 5 3 4 Output YES Input 6 3 1 2 2 3 5 6 Output NO","solution":"def are_villagers_connected(n, q, friendships): This function checks if all villagers are interconnected directly or indirectly through friendships. :param n: number of people :param q: number of friendship pairs :param friendships: list of tuples representing friendships :return: \\"YES\\" if all villagers are interconnected, otherwise \\"NO\\" from collections import defaultdict, deque def bfs(start, visited, adjacency_list): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) adjacency_list = defaultdict(list) for a, b in friendships: adjacency_list[a].append(b) adjacency_list[b].append(a) visited = [False] * (n + 1) bfs(1, visited, adjacency_list) return \\"YES\\" if all(visited[1:]) else \\"NO\\""},{"question":"Write a program that simulates a simple bank transaction system where multiple customers can make deposits or withdrawals. Each customer has a unique name and an account balance which starts at 0. The transactions must be processed in the order they are received. Input format: The first line contains an integer T, the number of transactions. T lines follow, each containing one of the following types of transactions: 1. \\"deposit <name> <amount>\\" - indicating that the customer with the given name should deposit the specified amount into their account. 2. \\"withdraw <name> <amount>\\" - indicating that the customer with the given name should withdraw the specified amount from their account. If the customer tries to withdraw more money than they have in their account, the withdrawal should not happen and the transaction should be ignored. 3. \\"balance <name>\\" - indicating that the current balance of the customer with the given name should be printed. Output format: For each \\"balance\\" transaction, print the name of the customer and their current balance on a new line. Constraints: 1 ≤ T ≤ 10^5 1 ≤ | length of the name | ≤ 100 1 ≤ amount ≤ 10^6 SAMPLE INPUT 7 deposit Alice 200 deposit Bob 150 withdraw Alice 100 withdraw Bob 200 balance Alice balance Bob balance Charlie SAMPLE OUTPUT Alice 100 Bob 150 Charlie 0","solution":"def bank_transactions(T, transactions): accounts = {} result = [] for transaction in transactions: parts = transaction.split() action, name = parts[0], parts[1] if name not in accounts: accounts[name] = 0 if action == \\"deposit\\": amount = int(parts[2]) accounts[name] += amount elif action == \\"withdraw\\": amount = int(parts[2]) if accounts[name] >= amount: accounts[name] -= amount elif action == \\"balance\\": result.append(f\\"{name} {accounts[name]}\\") return result"},{"question":"You are given a list of integers. Your task is to find the longest contiguous subarray such that after removing at most one integer from the subarray, the remaining integers are in non-decreasing order. Specifically, you need to output the length of this subarray. Input The first line contains an integer n (1 ≤ n ≤ 105), the length of the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) representing the elements of the list. Output Print the length of the longest contiguous subarray in which at most one integer can be removed to make the remaining integers non-decreasing. Examples Input 7 1 3 2 1 5 6 7 Output 5 Input 5 1 2 3 4 5 Output 5 Input 4 4 3 2 1 Output 2","solution":"def longest_subarray_length(arr): n = len(arr) if n == 1: return 1 # Longest increasing subarray without removing any element inc = [1] * n for i in range(1, n): if arr[i] >= arr[i-1]: inc[i] = inc[i-1] + 1 # Longest increasing subarray if we remove one element dec = [1] * n for i in range(n-2, -1, -1): if arr[i] <= arr[i+1]: dec[i] = dec[i+1] + 1 max_len = 0 for i in range(n): max_len = max(max_len, inc[i]) if i < n - 1: max_len = max(max_len, inc[i] + dec[i+1]) if i > 0: max_len = max(max_len, inc[i-1] + 1) return max_len"},{"question":"You are given an array B consisting of M positive integers. Determine whether there exist *two distinct elements* in the array whose sum is a prime number. Note that two elements are considered distinct if they have different indices in the array, even if their values are the same. ------ Input Format ------ - The first line of input will contain a single integer Q, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains a single positive integer M — the number of elements in B. - The second line of each test case contains M space-separated integers B_{1},B_{2},ldots,B_{M} representing the array B. ------ Output Format ------ For each test case, print on a new line the answer: YES if there exist two distinct elements in B whose sum is a prime number, and NO otherwise. Each character of the output may be printed in either uppercase or lowercase, i.e., the strings Yes, YES, yes, yEs will all be treated as identical. ------ Constraints ------ 1 ≤ Q ≤ 100 2 ≤ M ≤ 100 1 ≤ B_{i} ≤ 10^{9} ------ Sample Input 1 ------ 2 4 1 4 7 10 3 6 8 12 ------ Sample Output 1 ------ YES NO ------ Explanation 1 ------ Test case 1: The array is [1, 4, 7, 10]. The sums of pairs (1, 4), (1, 10), and (7, 10) are 5, 11, and 17 respectively, all of which are prime numbers. Hence, the answer is YES. Test case 2: The array is [6, 8, 12]. None of the pairs (6, 8), (6, 12), and (8, 12) sum to a prime number. Hence, the answer is NO.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def check_prime_sum_exists(test_cases): results = [] for B in test_cases: M = len(B) found = False for i in range(M): for j in range(i + 1, M): if is_prime(B[i] + B[j]): found = True break if found: break results.append(\\"YES\\" if found else \\"NO\\") return results def process_input(input_lines): Q = int(input_lines[0]) test_cases = [] idx = 1 for _ in range(Q): M = int(input_lines[idx]) B = list(map(int, input_lines[idx + 1].split())) test_cases.append(B) idx += 2 return test_cases def main(input_lines): test_cases = process_input(input_lines) results = check_prime_sum_exists(test_cases) for result in results: print(result)"},{"question":"A company wants to improve the efficiency of its internal messaging system. They have `n` employees who need to send messages to each other. Each employee has a unique ID ranging from `1` to `n`. Every employee has a certain list of direct contacts they can send messages to directly. However, messages can only be forwarded directly from one employee to another if they have a direct contact relationship. The company wants to determine the fewest number of forwards required for an employee to send a message to every other employee in the company. If it is not possible for an employee to send a message to all others directly or indirectly, you should indicate this as \\"impossible\\". You are given the list of direct contacts for each employee. Your task is to find and print the minimum number of forwards required for an employee to reach all other employees. If it is not possible, print \\"impossible\\". Input: The first line contains an integer `t`, the number of test cases. For each test case: - The first line contains an integer `n`, the number of employees. - Each of the next `n` lines contains space-separated integers. The ith line represents the direct contacts of the ith employee, starting with the number of contacts followed by the list of contact IDs. Output: For each test case, print the minimum number of forwards required or \\"impossible\\" if it is not possible for an employee to send a message to all others. Constraints: 1 ≤ t ≤ 10 1 ≤ n ≤ 1000 SAMPLE INPUT: 2 3 2 2 3 1 3 0 4 1 2 1 3 0 1 4 SAMPLE OUTPUT: 1 impossible Explanation: In the first test case: - Employee 1 can directly contact employees 2 and 3, so only 1 forward is needed. In the second test case: - There is no way for an employee to send a message to all others because there is no path from employees 1 and 2 to employees 3 and 4.","solution":"from collections import deque, defaultdict def minimum_forwards_for_all(t, test_cases): def bfs(start, graph, n): visited = [False] * (n + 1) queue = deque([(start, 0)]) visited[start] = True max_distance = 0 while queue: node, distance = queue.popleft() max_distance = max(max_distance, distance) for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, distance + 1)) # Checking if all nodes were visited if all(visited[1:]): return max_distance else: return float(\\"inf\\") results = [] for test_case in test_cases: n, contacts = test_case graph = defaultdict(list) for i in range(1, n+1): if contacts[i-1][0] > 0: graph[i].extend(contacts[i-1][1:]) min_forwards = float(\\"inf\\") for i in range(1, n+1): min_forwards = min(min_forwards, bfs(i, graph, n)) if min_forwards == float(\\"inf\\"): results.append(\\"impossible\\") else: results.append(min_forwards) return results # Example usage with sample input def main(): sample_input = [ (3, [[2, 2, 3], [1, 3], [0]]), (4, [[1, 2], [1, 3], [0], [1, 4]]) ] output = minimum_forwards_for_all(2, sample_input) for res in output: print(res) if __name__ == \\"__main__\\": main()"},{"question":"In a faraway kingdom, there lives a dragon with N heads. Each of the dragon\'s heads has a certain power level denoted by P_1, P_2, ..., P_N. The knight wants to defeat the dragon by severing its heads but wishes to do this in the most efficient way possible. The knight can perform one of the following two types of operations in one turn: 1. Choose any head and sever it completely. 2. Choose any two adjacent heads P_i and P_{i+1}, and sever both in a single move. The knight wants to minimize the total number of turns to sever all the heads of the dragon. ------ Input Format ------ - The first line of input contains a single integer T — the number of test cases. - For each test case: - The first line contains a single integer N — the number of heads. - The second line contains N space-separated integers P_1, P_2, ..., P_N — the power levels of the heads. ------ Output Format ------ For each test case, output the minimum number of operations needed to sever all the heads. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ P_i ≤ 1000 ------ Sample Input 1 ------ 3 5 1 2 3 4 5 4 4 4 4 4 3 10 1 10 ------ Sample Output 1 ------ 3 2 2 ------ Explanation 1 ------ Test Case 1: In the first test case, the knight can perform the following operations: - Sever the first two heads (1 and 2) -> P: [3, 4, 5] - Sever the next two heads (3 and 4) -> P: [5] - Sever the last head (5) -> P: [] Thus, it takes 3 operations. Test Case 2: In the second test case, the optimal path is: - Sever the first two heads (4 and 4) -> P: [4, 4] - Sever the remaining two heads (4 and 4) -> P: [] Thus, it takes 2 operations. Test Case 3: In the third test case, the knight can perform the following operations: - Sever the first head (10) -> P: [1, 10] - Sever the last two heads (1 and 10) -> P: [] Thus, it takes 2 operations.","solution":"def min_operations(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] P = test_cases[i][1] results.append((N + 1) // 2) return results"},{"question":"Problem Lucy enjoys playing a game with strings. Given a string consisting of lowercase alphabets, she performs a special operation repeatedly described as follows: Select any substring of the given string, reverse it, and replace the original substring with this reversed substring. She continues performing this operation as long as she can make the string lexicographically smaller. The task is to determine the lexicographically smallest string Lucy can get after performing any number of her special operations. Constraints The input satisfies the following conditions. * The string\'s length is between 1 and 1000 inclusive. Input The input is given in the following format. s The string s . Output Output a single line, the lexicographically smallest string that can be obtained. Examples Input bcda Output abcd Input gfdca Output acdfg Input aabb Output aabb","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string that can be obtained by any number of reversing substrings of the given string. return \'\'.join(sorted(s))"},{"question":"Task You will receive a list of integers as input. Your task is to return a new list that consists of the non-negative integers from the original list. Additionally, the elements of the new list should be grouped into sublists with exactly 3 elements per group, preserving the original order. If the total number of non-negative integers is not divisible by 3, the last sublist should contain the remaining elements. Examples * `[4, -1, 0, 7, -3, 9, 2, -8]` -> `[[4, 0, 7], [9, 2]]` - negatives removed, grouped into sublists of 3, last sublist with 2 elements * `[-5, -3, -9]` -> `[]` - since input contains only negative numbers, result is an empty list * `[1, 3, 5, -2, 6, 8, -7, 4, 2]` -> `[[1, 3, 5], [6, 8, 4], [2]]` - first two sublists of 3 and the last one with 2 elements * `[]` -> `[]` - an empty list should result in an empty list","solution":"def group_non_negative_integers(lst): Returns a list of non-negative integers from lst grouped in sublists of 3 elements each. # Filter non-negative integers non_negative = [num for num in lst if num >= 0] # Group into sublists of 3 elements each result = [non_negative[i:i+3] for i in range(0, len(non_negative), 3)] return result"},{"question":"Given a string s and a list of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words. Example 1: Input: s = \\"leetcode\\", dict = [\\"leet\\", \\"code\\"] Output: true Explanation: Return true because \\"leetcode\\" can be segmented as \\"leet code\\". Example 2: Input: s = \\"applepenapple\\", dict = [\\"apple\\", \\"pen\\"] Output: true Explanation: Return true because \\"applepenapple\\" can be segmented as \\"apple pen apple\\". Example 3: Input: s = \\"catsandog\\", dict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output: false Explanation: Return false because \\"catsandog\\" cannot be fully segmented into dictionary words. Note: - The length of s will be in the range [1, 300]. - The length of dict will be in the range [1, 1000]. - The length of each word in dict will be in the range [1, 20]. Follow up: Can you solve it in O(n^2) time and O(n) space?","solution":"def word_break(s, word_dict): Determine if the string can be segmented into a space-separated sequence of one or more dictionary words. :param s: String to be segmented :param word_dict: List of dictionary words :return: True if string can be segmented, False otherwise word_set = set(word_dict) dp = [False] * (len(s) + 1) dp[0] = True # base case: empty string for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)]"},{"question":"Write a function `decodeString` that takes a string encoded with the following format: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Your function should return the decoded string. For example: Input: s = \\"3[a]2[bc]\\" Output: \\"aaabcbc\\" Input: s = \\"3[a2[c]]\\" Output: \\"accaccacc\\" Input: s = \\"2[abc]3[cd]ef\\" Output: \\"abcabccdcdcdef\\" Constraints: - 1 ≤ s.length ≤ 30 - s consists of lowercase English letters, digits, and square brackets. - s is guaranteed to be a valid string that follows the described encoding rules. Your task: You don\'t need to read input or print anything. Implement the function `decodeString(s: str) -> str` which takes a single argument `s`, an encoded string, and returns the decoded string. # Example: ```python def decodeString(s): # Your code here ``` # Expected Time Complexity: O(N) # Expected Auxiliary Space: O(N)","solution":"def decodeString(s: str) -> str: Decodes the given encoded string and returns the decoded string. stack = [] current_num = 0 current_str = \\"\\" for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'[\': stack.append((current_str, current_num)) current_str = \\"\\" current_num = 0 elif char == \']\': last_str, num = stack.pop() current_str = last_str + num * current_str else: current_str += char return current_str"},{"question":"In an ancient kingdom, there exists a mysterious ritual that involves magic stones and pathways. The kingdom is represented as a series of numbered stones, and pathways between them. There is a unique stone from which the magic must begin, and one special stone where the ritual is completed. The kingdom can be visualized as a directed acyclic graph (DAG) with `n` nodes (stones) and `m` directed edges (pathways). A magician starts at the stone labeled `1` and can move along the directed edges to the final stone labeled `n`. Each pathway has a certain magical difficulty score. The magician can perform magic which allows him to double the magical difficulty of a single pathway of his choice during his journey to the final stone. Your task is to determine the minimum magical difficulty required to complete the journey from stone `1` to stone `n`, considering that one of the pathways\' difficulty can be doubled. Input The first line contains two integers `n` and `m` (2 ≤ n ≤ 1000, 1 ≤ m ≤ 5000) — the number of stones and pathways, respectively. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — indicating that there is a directed pathway from stone `u` to stone `v` with a magical difficulty of `w`. Output Print a single integer — the minimum magical difficulty to complete the journey from stone `1` to stone `n`. Examples Input 5 6 1 2 2 1 3 2 2 4 2 3 4 2 4 5 2 2 3 1 Output 6 Input 4 4 1 2 1 1 3 2 2 4 2 3 4 1 Output 3 Note In the first example, the optimal paths without doubling any pathway are `1 -> 2 -> 4 -> 5` and `1 -> 3 -> 4 -> 5`, both with a magical difficulty of `6`. Doubling any pathway will not further reduce the difficulty in this case. In the second example, the optimal path starts from stone `1` to stone `3` with a difficulty of `2`, doubles the difficulty of pathway `3 -> 4` making its cumulative difficulty `3`, resulting in a total magical difficulty of `3`.","solution":"import heapq def dijkstra(n, edges, start): distances = [float(\'inf\')] * n distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in edges[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def minimum_magical_difficulty(n, m, edges_list): edges = [[] for _ in range(n)] for u, v, w in edges_list: edges[u - 1].append((v - 1, w)) distances_from_start = dijkstra(n, edges, 0) distances_to_end = dijkstra(n, edges[::-1], n - 1)[::-1] min_magic_difficulty = distances_from_start[n - 1] for u, v, w in edges_list: doubled_path_cost = distances_from_start[u - 1] + 2 * w + distances_to_end[v - 1] min_magic_difficulty = min(min_magic_difficulty, doubled_path_cost) return min_magic_difficulty"},{"question":"You are given an array of integers and a target integer `k`. Determine if there are two distinct indices `i` and `j` in the array such that `nums[i] + nums[j] = k`. -----Constraints----- - 1 leq nums.length leq 10^5 - -10^9 leq nums[i] leq 10^9 - -10^9 leq k leq 10^9 -----Input----- Input is given from Standard Input in the following format: - The first line contains the target integer `k`. - The second line contains the integer array `nums`, where each integer is separated by a space. -----Output----- Print \\"YES\\" if there are two distinct indices `i` and `j` such that `nums[i] + nums[j] = k`. Otherwise, print \\"NO\\". -----Sample Input----- 10 2 7 11 15 -----Sample Output----- YES In this example, nums[0] + nums[1] = 2 + 7 = 9, and nums[1] + nums[2] = 7 + 11 = 18, etc. But there exists no two indices such that their values sum to 10, so the output is \\"NO\\".","solution":"def two_sum(nums, k): Determine if there are two distinct indices i and j in the array such that nums[i] + nums[j] = k. Parameters: nums (list): List of integers. k (int): Target integer. Returns: str: \\"YES\\" if there are two distinct indices with the sum equal to k, otherwise \\"NO\\". seen = set() for num in nums: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"You are given a string S consisting of characters \'a\', \'b\', and \'c\'. You need to find the longest substring of S such that there are at most two distinct characters in the substring. Example 1: Input: S = \\"abcabcabc\\" Output: Length: 2 Substring: \\"ab\\" Explanation: The longest substring with at most two distinct characters is \\"ab\\". Other substrings with the same property are \\"bc\\" and \\"ca\\", each having length 2. Hence, the output is Length: 2, Substring: \\"ab\\". Example 2: Input: S = \\"aaabbbccc\\" Output: Length: 6 Substring: \\"aaabbb\\" Explanation: The longest substring with at most two distinct characters is \\"aaabbb\\". Another substring that meets this criterion is \\"bbbccc\\". Both have length 6. Hence, the output is Length: 6, Substring: \\"aaabbb\\". Your Task: Write the function `longestTwoDistinctCharsSubstr()` that takes the string S as input and returns a tuple containing the length of the longest substring and the substring itself (Length, Substring). Function Signature: def longestTwoDistinctCharsSubstr(S: str) -> Tuple[int, str]: Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= len(S) <= 10^6","solution":"def longestTwoDistinctCharsSubstr(S): Returns the length of the longest substring with at most two distinct characters and the substring itself. n = len(S) if n == 0: return 0, \\"\\" # Use a sliding window approach with two pointers start = 0 max_length = 0 max_substring = \\"\\" char_map = {} for end in range(n): char_map[S[end]] = char_map.get(S[end], 0) + 1 while len(char_map) > 2: char_map[S[start]] -= 1 if char_map[S[start]] == 0: del char_map[S[start]] start += 1 current_length = end - start + 1 if current_length > max_length: max_length = current_length max_substring = S[start:end + 1] return max_length, max_substring"},{"question":"You are given a string S consisting of lowercase English letters. Your task is to transform S into a string where no two adjacent characters are the same by performing a series of operations. In one operation, you can choose any character in the string and replace it with any other lowercase English letter. Your goal is to determine the minimum number of operations required to achieve this. Input: - The first line contains an integer T, the number of test cases. - The next T lines each contain a string S. Output: - For each test case, output a single integer, the minimum number of operations needed for the corresponding string. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 SAMPLE INPUT 2 aab abba SAMPLE OUTPUT 1 1 Explanation: For the first test case, changing the second \'a\' to any letter other than \'b\' would make the string \\"aab\\" become \'aba\' or \'abc\', with either requiring only 1 change to ensure no two adjacent characters are the same. For the second test case, changing the third \'b\' to any letter other than \'a\' or \'b\' would make the string \\"abba\\" become \'abca\' or \'abya\', with either requiring only 1 change to ensure no two adjacent characters are the same.","solution":"def min_operations_to_alternate(S): This function returns the minimum number of operations required to ensure that no two adjacent characters in the string S are the same. operations = 0 for i in range(1, len(S)): if S[i] == S[i-1]: operations += 1 return operations def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(min_operations_to_alternate(S)) return results"},{"question":"You are given a string S containing only characters \'a\' and \'b\'. Your task is to determine the minimum number of operations required to make all the characters of the string equal. In one operation, you can: 1. Select any substring of S where all characters are the same, and delete that substring. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the length of the string S. - The second line contains the string S of length N consisting of characters only \'a\' and \'b\'. -----Output:----- For each test case, print a single line containing one integer ― the minimum number of operations required to make all characters of the string the same. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 -----Sample Input:----- 2 3 abb 4 aabb -----Sample Output:----- 2 2","solution":"def min_operations_to_make_equal(T, test_cases): For each test case, calculates the minimum number of operations required to make all characters of the string equal by selecting substrings of same characters and deleting them. Args: - T: Number of test cases. - test_cases: List of tuples, each containing (N, S) where N is the length of the string and S is the string itself. Returns: - List of integers representing the minimum number of operations required for each test case. results = [] for N, S in test_cases: # A new operation is needed each time characters alternate operations = sum(1 for i in range(1, N) if S[i] != S[i - 1]) results.append((operations + 1) // 2 + 1) return results"},{"question":"Given a non-empty string s consisting of lowercase alphabetical characters, you need to determine whether it is possible to rearrange the characters in s to form a palindrome. A palindrome is a string that reads the same forward and backward. For a string to be rearranged into a palindrome, each character must have an even frequency except at most one character which can have an odd frequency if the length of the string is odd. -----Input----- The input consists of a single line containing the string s (1 ≤ |s| ≤ 10^5), where |s| is the length of the given string. -----Output----- Print \\"YES\\" if it is possible to rearrange the characters of s to form a palindrome. Otherwise, print \\"NO\\". -----Examples----- Input civic Output YES Input ivicc Output YES Input hello Output NO Input aabbccdd Output YES","solution":"def can_form_palindrome(s): Determines if the characters of the input string can be rearranged to form a palindrome. Parameters: s (str): A string consisting of lowercase alphabetical characters. Returns: str: \\"YES\\" if it is possible to rearrange the characters to form a palindrome, otherwise \\"NO\\". from collections import Counter # Count frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if at most one character has an odd frequency if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"Given two time intervals, determine if they overlap. Each time interval is represented by a start time and an end time. Constraints * 1 ≤ q ≤ 1000 * 0 ≤ start time, end time < 1000000 * The start and end time for a given interval will be different. Input The input consists of a number of queries q. Each query consists of two intervals in the following format: start1 end1 start2 end2 Output For each query, print \\"YES\\" if the intervals overlap, otherwise print \\"NO\\". Example Input 3 1 5 4 9 2 6 7 10 3 8 1 4 Output YES NO YES","solution":"def does_overlap(start1, end1, start2, end2): Determines if two time intervals overlap. Parameters: start1 (int): Start time of the first interval. end1 (int): End time of the first interval. start2 (int): Start time of the second interval. end2 (int): End time of the second interval. Returns: str: \\"YES\\" if intervals overlap, otherwise \\"NO\\". if (start1 < end2) and (start2 < end1): return \\"YES\\" else: return \\"NO\\" def process_queries(queries): Process a list of queries and determine overlap for each query. Parameters: queries (list of tuples): Each tuple contains four integers representing two intervals. Returns: list of str: List of results corresponding to each query. results = [] for query in queries: start1, end1, start2, end2 = query results.append(does_overlap(start1, end1, start2, end2)) return results"},{"question":"In a fairy tale world, there are `n` wizards standing in a line from left to right, each possessing a unique magical power. Each wizard wishes to combine their power with others to perform a spell. The strength of the spell is determined by the sum of the magical powers of the participating wizards. You, as the Grand Sorcerer, decide which wizards get to combine their powers together. Your objective is to find the maximum spell strength possible by selecting a contiguous segment of wizards from the line. Given an array of integers representing the magical powers of the wizards, write a program to determine the maximum sum of powers that can be achieved by selecting a contiguous sub-array. -----Input----- The first line of the input contains one integer `n` (1 le n le 10^5) — the number of wizards. The second line contains `n` integers where each integer a_i (-10^4 le a_i le 10^4) represents the magical power of the i-th wizard. -----Output----- Output one integer — the maximum possible spell strength that can be achieved by selecting a contiguous segment of wizards. -----Examples----- Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 3 1 -2 3 Output 3","solution":"def max_spell_strength(n, powers): Returns the maximum sum of a contiguous sub-array in the powers list using Kadane\'s algorithm. Parameters: n (int): Number of wizards powers (list of int): List of integers representing the magical powers of the wizards Returns: int: The maximum spell strength (maximum sum of contiguous sub-array) max_current = max_global = powers[0] for i in range(1, n): max_current = max(powers[i], max_current + powers[i]) if max_current > max_global: max_global = max_current return max_global # Example usage: # n = 9 # powers = [-2, 1, -3, 4, -1, 2, 1, -5, 4] # print(max_spell_strength(n, powers)) # Output: 6"},{"question":"Ishan is an avid collector of unique stamps from around the world. He keeps his stamp collection neatly arranged in albums. Each album contains a number of stamps, and no two stamps in an album are the same. However, Ishan noticed that some of the same stamps appear across multiple albums. To keep better track of his collection, he wishes to identify all the stamps that are present in every single album. Given a list of albums, where each album is represented as a list of stamps, your task is to determine the stamps that are present in every album. Input The first line of input contains a single integer T, the number of test cases. For each test case: - The first line contains N, the number of albums. - Each of the next N lines starts with an integer M, the number of stamps in the album, followed by M space-separated strings representing the stamps in that album. 1 ≤ T ≤ 100 1 ≤ N, M ≤ 10^3 Each stamp is represented by a unique string of length 1 to 10 consisting of lowercase English letters. Output For each test case, output the list of stamps that are present in every album, sorted in lexicographical order. If no stamps are common in all albums, output an empty list. SAMPLE INPUT 2 3 3 aardvark alpha mango 4 banana alpha apple kiwi 2 alpha zebra 2 2 stamp1 stamp2 2 stamp3 stamp4 SAMPLE OUTPUT [\'alpha\'] []","solution":"def common_stamps_in_albums(T, test_cases): results = [] for case in test_cases: N = case[0] albums = case[1:] common_stamps = set(albums[0]) for album in albums[1:]: common_stamps.intersection_update(album) results.append(sorted(common_stamps)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 case = [N] for __ in range(N): album = lines[index].split()[1:] # Skip the first element which is the number of stamps case.append(album) index += 1 test_cases.append(case) return T, test_cases def convert_output(results): return \\"n\\".join([str(result) for result in results]) # Example usage: input_string = 2 3 3 aardvark alpha mango 4 banana alpha apple kiwi 2 alpha zebra 2 2 stamp1 stamp2 2 stamp3 stamp4 T, test_cases = parse_input(input_string) results = common_stamps_in_albums(T, test_cases) output_string = convert_output(results) print(output_string)"},{"question":"A city is planning to build a new transportation system consisting of bidirectional roads connecting various districts. The city\'s districts are represented as nodes and roads as edges in a graph. Each road has a unique length associated with it. The city planning committee wants to ensure that the transportation system is efficient by minimizing the total length of the roads, while still allowing any district to be reachable from any other district. Given the number of districts N and a list of roads where each road is represented as a triplet (u, v, w) indicating a road between districts u and v with length w, your task is to find the minimum total length of the roads required such that every district is reachable from every other district. Write a function `minRoadLength` that takes in: 1. An integer N, representing the number of districts. 2. A list of triplets roads, where each triplet (u, v, w) represents a road connecting districts u and v with length w. The function should return the minimum total length of the roads required to connect all districts. If it\'s not possible to connect all districts, return -1. Example 1: Input: N = 4 roads = [(1, 2, 5), (1, 3, 10), (2, 3, 6), (2, 4, 2), (3, 4, 1)] Output: 8 Explanation: The minimum road lengths to connect all districts are: (1, 2, 5), (2, 4, 2), and (3, 4, 1). The total length is 5 + 2 + 1 = 8. Example 2: Input: N = 3 roads = [(1, 2, 3), (2, 3, 4)] Output: 7 Explanation: The minimum road lengths to connect all districts are: (1, 2, 3) and (2, 3, 4). The total length is 3 + 4 = 7. Example 3: Input: N = 3 roads = [(1, 2, 1)] Output: -1 Explanation: It is not possible to connect all districts as there is no road connecting the third district. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minRoadLength()` which takes in an integer N and a list of roads, and returns the minimum total length of the roads required to connect all districts or -1 if it\'s not possible. Constraints: 1 ≤ N ≤ 1000 1 ≤ len(roads) ≤ 10000 1 ≤ u, v ≤ N 1 ≤ w ≤ 10^6","solution":"def minRoadLength(N, roads): Returns the minimum total length of roads required to connect all districts or -1 if not possible. # Helper function to find the representative (root) of a set def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) # Helper function to unify two sets def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 # Sort all the roads based on the weight roads.sort(key=lambda x: x[2]) parent = list(range(N + 1)) rank = [0] * (N + 1) total_length = 0 count = 0 for u, v, w in roads: root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) total_length += w count += 1 # If we have connected N-1 roads, we can stop if count == N - 1: return total_length return -1"},{"question":"You are asked to build a grouping algorithm for a dataset of users. Each user has a unique identifier and a set of skills. You need to group users such that each group has the most balanced distribution of skills possible. Additionally, no group should exceed a specified maximum number of users. Your algorithm should aim to minimize the difference in the number of users across groups with the maximum distribution of skills. To simplify, let\'s represent each user by an integer (their ID) and a set of integers (their skills). Input The first line contains integers n and m (1 ≤ n ≤ 1000, 2 ≤ m ≤ 100), where n is the number of users and m is the maximum number of users in any group. The next n lines each contains an integer u (user ID) followed by a list of space-separated integers representing the skills of each user. Each skill is an integer from 1 to 100. Output The output should be the identifiers of users in each group (one group per line) such that the groups are as balanced as possible in both the number of users and skill distribution. Example Input 6 3 1 1 2 3 2 2 3 4 3 1 4 5 4 2 5 5 1 3 6 3 4 Output 1 5 2 6 3 4 Explanation In this example, one possible balanced grouping is: - Group 1: Users 1 and 5, with skills {1, 2, 3}. - Group 2: Users 2 and 6, with skills {2, 3, 4}. - Group 3: Users 3 and 4, with skills {1, 4, 5}. This balances the number of users across groups and distributes the skill set across the groups as evenly as possible.","solution":"from itertools import combinations from collections import defaultdict def group_users(n, m, user_skills): users = user_skills[:] groups = [[] for _ in range((n + m - 1) // m)] # Initialize the groups users.sort(key=lambda x: (-len(x[1]), x[0])) # Sort by number of skills (desc), then by ID (asc) for idx, user in enumerate(users): groups[idx % len(groups)].append(user[0]) return groups # Example input n = 6 m = 3 user_skills = [ (1, {1, 2, 3}), (2, {2, 3, 4}), (3, {1, 4, 5}), (4, {2, 5}), (5, {1, 3}), (6, {3, 4}), ] result = group_users(n, m, user_skills) for group in result: print(\\" \\".join(map(str, group)))"},{"question":"You are given a list of integers, where each integer represents a student\'s grade. The grading system requires that any two consecutive grades in the list differ by at most 1. Your task is to determine whether it\'s possible to rearrange the grades to satisfy this condition. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N representing the number of students. - The second line of each test case contains N space-separated integers representing the grades of the students. -----Output----- For each test case, print a single line containing the string \\"YES\\" if it is possible to rearrange the grades such that the difference between any two consecutive grades is at most 1, or \\"NO\\" otherwise (without quotes). -----Constraints----- - 1 le T le 100 - 1 le N le 1,000 - 0 le text{Grade} le 100 -----Example Input----- 3 4 1 3 2 2 3 5 5 5 5 8 7 6 5 4 -----Example Output----- YES YES YES -----Explanation----- Example case 1: The grades can be rearranged as [1, 2, 2, 3], satisfying the condition of consecutive grades differing by at most 1. Example case 2: All grades are the same, so the condition is trivially satisfied. Example case 3: The grades can be rearranged as [4, 5, 6, 7, 8], satisfying the condition of consecutive grades differing by at most 1.","solution":"def can_rearrange_grades(test_cases): results = [] for case in test_cases: n, grades = case grades.sort() possible = True for i in range(1, n): if grades[i] - grades[i-1] > 1: possible = False break results.append(\\"YES\\" if possible else \\"NO\\") return results"},{"question":"Aman has a list of integers representing the profit from different projects he can work on. Given that he can choose to work on projects on consecutive days only, he wants to find out the maximum profit he can make by working on exactly k projects. Help Aman determine the maximum possible profit he can earn by selecting exactly k consecutive projects. -----Input----- The first line of the input contains a single integer t (1le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and k (1 le k le n le 1000) — the total number of projects and the number of consecutive projects he must work on. The next line of each test case contains n integers p_1, p_2, dots, p_n (-1000 le p_i le 1000) — the profit from each project. -----Output----- For each test case, print the maximum profit Aman can earn by selecting exactly k consecutive projects. -----Example----- Input 3 5 3 1 2 3 4 5 6 2 -1 2 3 -2 5 -3 7 4 -1 3 5 -2 4 7 -1 Output 12 5 14 -----Note----- For 1st case: The maximum profit by selecting 3 consecutive projects is from the projects with profits [3, 4, 5] which sums up to 12. For 2nd case: The maximum profit by selecting 2 consecutive projects is from the projects with profits [2, 3] which sums up to 5. For 3rd case: The maximum profit by selecting 4 consecutive projects is from the projects with profits [3, 5, -2, 4] which sums up to 10.","solution":"def max_profit_consecutive_projects(test_cases): results = [] for tc in test_cases: n, k, profits = tc max_profit = float(\'-inf\') # Calculate the initial window sum window_sum = sum(profits[:k]) max_profit = max(max_profit, window_sum) # Slide the window across the array to find max sum of k consecutive elements for i in range(1, n - k + 1): window_sum = window_sum - profits[i - 1] + profits[i + k - 1] max_profit = max(max_profit, window_sum) results.append(max_profit) return results"},{"question":"You are a researcher studying a group of exotic butterflies. The butterflies\' movements between various flowers can be modeled as a directed graph where each vertex represents a flower and each edge represents a possible movement path between two flowers. The butterflies are known to prefer paths that include as many distinct flowers as possible. You have been given a graph with `n` vertices and `m` directed edges. Each query asks for the longest path length (in terms of the number of distinct vertices) starting from a given vertex `v`. Write a program to determine the longest path length from the specified starting vertex for each query. # Input - The first line contains two integers `n` and `m` (1 ≤ `n`, `m` ≤ 10^4) — the number of vertices and the number of directed edges, respectively. - Each of the next `m` lines contains two integers `u` and `v` (1 ≤ `u`, `v` ≤ `n`, `u ≠ v`) representing a directed edge from vertex `u` to vertex `v`. - The next line contains an integer `q` (1 ≤ `q` ≤ 10^3) — the number of queries. - Each of the next `q` lines contains a single integer `v` (1 ≤ `v` ≤ `n`) representing the starting vertex for that query. # Output For each query, output a single integer — the length of the longest path starting from the specified vertex. # Examples Input ``` 5 6 1 2 1 3 2 4 2 5 3 4 4 5 3 1 2 3 ``` Output ``` 4 3 2 ``` # Explanation Here is the directed graph for the input example: ``` 1 -> 2 -> 4 -> 5 | | v v 3 -> 4 ``` The longest path starting from vertex `1` includes vertices {1, 2, 4, 5}, covering 4 distinct vertices. The longest path starting from vertex `2` includes vertices {2, 4, 5}, covering 3 distinct vertices. The longest path starting from vertex `3` includes vertices {3, 4, 5}, covering 2 distinct vertices. # Note - The edges form a directed path, and no cycles are present. - The path length is evaluated in terms of the number of distinct vertices the path covers.","solution":"from collections import defaultdict, deque def find_longest_path_length(n, m, edges, queries): # Create adjacency list adj = defaultdict(list) for u, v in edges: adj[u].append(v) # Function to perform topological sort def topological_sort(): indegree = [0] * (n + 1) for u in adj: for v in adj[u]: indegree[v] += 1 zero_indegree_queue = deque([i for i in range(1, n + 1) if indegree[i] == 0]) top_order = [] while zero_indegree_queue: node = zero_indegree_queue.popleft() top_order.append(node) for neighbor in adj[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: zero_indegree_queue.append(neighbor) return top_order # Get topological order topo_order = topological_sort() # Function to get the longest path length from the given source vertex def longest_path_from_source(source): dp = [-1] * (n + 1) dp[source] = 0 for u in topo_order: if dp[u] != -1: for v in adj[u]: if dp[v] < dp[u] + 1: dp[v] = dp[u] + 1 return max(dp) result = [] for query in queries: result.append(longest_path_from_source(query) + 1) # +1 to include the source vertex in the count return result"},{"question":"In an alien language, surprisingly similar to English, letters represent unique single-digit numbers. However, these values are consistent for a given letter throughout a calculation. The aliens developed an intriguing calculator to evaluate multiplication expressions. Each expression consists of: - A sequence of positive integers without leading zeros. - Each positive integer can be represented by a string of lowercase alphabetic characters. - Multiplication followed by addition operations, represented by asterisks `*` and plus signs `+`, respectively. Your task is to analyze the expression, decode the letters into numbers, and then calculate the result following the rules of basic integer arithmetic. For instance, given a string `a * b + c` where: - `a` translates to `2` - `b` translates to `3` - `c` translates to `5` The computation would be `(2 * 3) + 5`, yielding the result `11`. Input: The first line contains a single integer `t` (1 ≤ t ≤ 1000) — the number of test cases. Each of the next `t` lines contains an expression in the alien language. The expression consists of lowercase letters, asterisks `*`, and plus signs `+`. Output: For each test case, print a single integer — the result of the evaluation. Constraints: - The length of each expression does not exceed 100 characters. - Each letter consistently represents a value between 1 and 9 for any given test case. Examples: Input: ``` 3 a * b + c x * y * z p + q ``` Output: ``` 11 512 26 ``` Explanation: For the first test case, if `a = 2`, `b = 3`, and `c = 5`, then `(2 * 3) + 5 = 11`. For the second test case, if `x = 4`, `y = 8`, and `z = 16`, then `4 * 8 * 16 = 512`. For the third test case, if `p = 14` and `q = 12`, then `14 + 12 = 26`. Note: You may assume that the alien language representations of the integers are always consistent.","solution":"def decode_expression(expression, mapping): Decode and evaluate the expression using the provided mapping. Args: expression (str): The algebraic expression in the alien language. mapping (dict): The mapping from letters to digit values. Returns: int: The evaluated result of the expression. decoded_expression = \\"\\" for char in expression: if char.isalpha(): decoded_expression += str(mapping[char]) else: decoded_expression += char return eval(decoded_expression) def evaluate_alien_calculations(t, expressions, mappings): Evaluate multiple alien language expressions according to their mappings. Args: t (int): Number of test cases. expressions (list of str): List of alien language expressions. mappings (list of dict): List of mappings from letters to digit for each test case. Returns: list of int: Evaluated results of the expressions. results = [] for i in range(t): result = decode_expression(expressions[i], mappings[i]) results.append(result) return results"},{"question":"In a distant galaxy, inhabitants use a unique numeric system based on unusual multiplication rules. They have a special 2-dimensional grid where numbers multiply differently based on their position. The planet\'s grid is represented by an N x N matrix where matrix[i][j] represents the multiplication result. You have to fill this matrix such that it follows these rules: - If i == j, matrix[i][j] = i * i (i.e., the square of the index). - If j > i, matrix[i][j] = matrix[i][0] * matrix[0][j]. - If i > j, matrix[i][j] = matrix[i][i] * matrix[0][j]. Given an integer N representing the size of the grid, help to build and return the N x N matrix following the rules stated above. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - Each of the next T lines contains an integer N for each test case. ------ Output Format ------ For each test case, print the NxN matrix in a single line. For each row in the matrix, print all the elements in the row separated by a space. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 ------ Sample Input 1 ------ 2 3 4 ------ Sample Output 1 ------ 0 0 0 0 1 2 0 2 4 0 0 0 0 1 2 3 0 2 4 6 0 3 6 9 ------ Explanation 1 ------ Test Case 1: - For N = 3, matrix will be: [ begin{bmatrix} 0 & 0 & 0 0 & 1 & 2 0 & 2 & 4 end{bmatrix} ] Test Case 2: - For N = 4, matrix will be: [ begin{bmatrix} 0 & 0 & 0 & 0 0 & 1 & 2 & 3 0 & 2 & 4 & 6 0 & 3 & 6 & 9 end{bmatrix} ] Note: Ensure to handle and format each test case separately for a clean output.","solution":"def build_matrix(N): matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): if i == j: matrix[i][j] = i * i elif j > i: matrix[i][j] = i * j else: matrix[i][j] = i * j return matrix def format_matrix(matrix): formatted_matrix = [] for row in matrix: formatted_matrix.extend(row) return \' \'.join(map(str, formatted_matrix)) def solve(test_cases): results = [] for N in test_cases: matrix = build_matrix(N) results.append(format_matrix(matrix)) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [int(data[i]) for i in range(1, T + 1)] results = solve(test_cases) for result in results: print(result)"},{"question":"A company needs an efficient task scheduling system. They received a list of tasks, where each task needs to be assigned to an employee. Each employee can perform only specific types of tasks, and each task type has a priority level. The goal is to maximize the total priority value assigned within the given constraints. You need to write a program that can determine the maximum total priority that can be obtained by assigning tasks to employees, ensuring that no task is assigned more than once and that an employee only performs tasks they are capable of. The details of the problem are as follows: - The first input line contains two integers n and m (1 ≤ n, m ≤ 20), where n is the number of employees, and m is the number of tasks. - The second input line contains m integers representing the priority values of the tasks. - Each of the next n lines contains m integers. The j-th integer on the i-th line is 1 if the i-th employee can perform the j-th task, and 0 otherwise. Your task is to write a program that outputs the maximum total priority that can be achieved. Input ``` 4 5 10 5 6 10 8 1 0 1 0 1 0 1 0 1 1 1 0 0 0 1 0 1 1 1 0 ``` Output ``` 31 ``` Explanation: - The first employee can perform tasks 1, 3, and 5. - The second employee can perform tasks 2, 4, and 5. - The third employee can perform tasks 1 and 5. - The fourth employee can perform tasks 2, 3, and 4. An optimal assignment would be: - Assign task 1 with priority 10 to the first employee. - Assign task 4 with priority 10 to the second employee. - Assign task 5 with priority 8 to the third employee. - Assign task 3 with priority 6 to the fourth employee. Total priority achieved = 10 + 10 + 8 + 6 = 34","solution":"def max_priority(n, m, priorities, capabilities): from itertools import permutations max_total_priority = 0 task_indices = range(m) task_permutations = permutations(task_indices, n) for perm in task_permutations: current_priority = 0 used_tasks = set() for employee in range(n): task = perm[employee] if task not in used_tasks and capabilities[employee][task] == 1: current_priority += priorities[task] used_tasks.add(task) max_total_priority = max(max_total_priority, current_priority) return max_total_priority # Test case n, m = 4, 5 priorities = [10, 5, 6, 10, 8] capabilities = [ [1, 0, 1, 0, 1], [0, 1, 0, 1, 1], [1, 0, 0, 0, 1], [0, 1, 1, 1, 0], ] print(max_priority(n, m, priorities, capabilities)) # Output: 34"},{"question":"Your task is to implement a simplified version of the Least Recently Used (LRU) cache. You need to implement 2 methods. put : adds a key-value pair to the cache. If the cache reaches its capacity, it should invalidate the least recently used item before adding a new item. get : retrieves the value associated with the given key. If the key does not exist in the cache, return -1. Example 1: Input: put(1,1) put(2,2) get(1) put(3,3) get(2) put(4,4) get(1) get(3) get(4) Output: 1 -1 -1 3 4 Explanation: put(1,1) adds the key-value pair (1,1) to the cache. put(2,2) adds the key-value pair (2,2) to the cache. get(1) returns the value 1. put(3,3) adds the key-value pair (3,3) to the cache. Since the cache reached its capacity, it invalidates the key 2. get(2) returns -1 because the cache invalidated it in the previous step. put(4,4) adds the key-value pair (4,4) to the cache. Since the cache reached its capacity, it invalidates the key 1. get(1) returns -1 because the cache invalidated it in the previous step. get(3) returns 3. get(4) returns 4. Example 2: Input: put(1,10) put(2,20) get(3) put(3,30) put(4,40) get(1) get(4) Output: -1 -1 40 Explanation: put(1,10) adds the key-value pair (1,10) to the cache. put(2,20) adds the key-value pair (2,20) to the cache. get(3) returns -1 because the key 3 does not exist. put(3,30) adds the key-value pair (3,30) to the cache. Since the cache reached its capacity, it invalidates the key 1. put(4,40) adds the key-value pair (4,40) to the cache. Since the cache reached its capacity, it invalidates the key 2. get(1) returns -1 because the cache invalidated it in the previous step. get(4) returns 40. Your Task: You don\'t need to read input or print anything. You are required to complete the 2 methods put, which takes two arguments \'key\' and \'value\', and get which takes one argument \'key\'. Expected Time Complexity: O(1) for both methods. Expected Auxiliary Space: O(C) where C is the capacity of the cache. Constraints: 1 <= Number of queries <= 10^{4} 1 <= Key <= 10^5 1 <= Value <= 10^5 1 <= Capacity <= 100","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False)"},{"question":"An organization is considering numbers to be classified as \\"doubly prime.\\" A number is doubly prime if both the number itself and the number minus two are prime. For example, 5 is a doubly prime number because both 5 and 3 are prime, but 4 is not a doubly prime because neither 4 nor 2 is prime. Given a positive integer n, determine whether it is doubly prime. Input The input contains only a single integer n (2 ≤ n ≤ 10^3). Output Write a single \\"yes\\" or \\"no\\". Write \\"yes\\" if the number is doubly prime and \\"no\\" otherwise. The output is case-insensitive. Examples Input 5 Output yes Input 4 Output no","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5)+1, 2): if num % i == 0: return False return True def is_doubly_prime(n): Function to determine if a number is doubly prime. if n < 2: return \\"no\\" return \\"yes\\" if is_prime(n) and is_prime(n - 2) else \\"no\\""},{"question":"A company has a series of employees, each identified by a unique ID number. The company stores every employee\'s monthly attendance as a list of integers, representing the days of the month the employee was present at work. The company would like to identify employees who have been consistent in their attendance over a given number of days. An employee is considered consistent if, for every `k`-length subarray of their attendance days, the difference between the maximum and minimum values is less than or equal to `d`. Write a function `consistent_attendance(employees, k, d)` that receives a dictionary `employees` where keys are employee IDs (integers) and values are lists of integers representing the days each employee was in attendance, and two integers `k` and `d`. The function should return a list of employee IDs (sorted in ascending order) that qualify as consistent according to the given criteria. # Example: ```python employees = { 101: [1, 5, 10, 15, 20, 25], 102: [3, 6, 9, 12, 15, 18], 103: [2, 3, 4, 5, 6, 7], 104: [8, 16, 24, 1, 9, 17] } ``` **Function Call:** ```python consistent_attendance(employees, 2, 3) ``` **Output:** ```python [102, 103] ``` # Explanation: - Employee 101: Inconsistent, as some 2-day subarrays (e.g., `[15, 20]`) have a difference greater than 3. - Employee 102: Consistent, all 2-day subarrays (e.g., `[3, 6], [6, 9]`) have differences of 3 or less. - Employee 103: Consistent, all 2-day subarrays (e.g., `[2, 3], [3, 4]`) have differences of 3 or less. - Employee 104: Inconsistent, some 2-day subarrays (e.g., `[8, 16]`) have a difference greater than 3. The function `consistent_attendance` should return the list `[102, 103]`.","solution":"def consistent_attendance(employees, k, d): Identify employees who have been consistent in attendance. An employee is considered consistent if for every k-length subarray of their attendance days, the difference between the maximum and minimum values is less than or equal to d. :param employees: Dict[int, List[int]] - A dictionary with employee IDs as keys and attendance days as values. :param k: int - Length of subarray. :param d: int - Maximum allowed difference in attendance days for subarray to be considered consistent. :return: List[int] - List of employee IDs who are consistent. consistent_employees = [] for emp_id, days in employees.items(): is_consistent = True for i in range(len(days) - k + 1): subarray = days[i:i + k] if max(subarray) - min(subarray) > d: is_consistent = False break if is_consistent: consistent_employees.append(emp_id) return sorted(consistent_employees)"},{"question":"Given an undirected graph with N nodes and M edges, your task is to determine the number of connected components in the graph. A connected component is a subset of nodes such that there is a path between any two nodes in this subset. -----Input----- - The first line contains two integers N and M, denoting the number of nodes and edges in the graph, respectively. - The next M lines each contain two integers u and v, indicating that there is an edge between node u and node v. -----Output----- Output a single integer, the number of connected components in the graph. -----Constraints----- - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 1000 - 1 ≤ u, v ≤ N - No self-loops or multiple edges between the same pair of nodes. -----Example----- Input: 5 3 1 2 1 3 4 5 Output: 2 -----Explanation:----- The example graph has 5 nodes and 3 edges. There are two connected components: 1. A connected component that includes nodes 1, 2, and 3. 2. A connected component that includes nodes 4 and 5. Each node in these components are reachable by following the edges given. Nodes 4 and 5 are not reachable from any node in the first component, so they form a separate connected component.","solution":"def count_connected_components(N, M, edges): Returns the number of connected components in the graph. Parameters: N (int): Number of nodes M (int): Number of edges edges (list of tuples): List of edges where each edge is represented as a tuple (u, v) Returns: int: Number of connected components from collections import defaultdict, deque # Use adjacency list representation for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) connected_components = 0 for node in range(1, N + 1): if not visited[node]: bfs(node) connected_components += 1 return connected_components"},{"question":"You are given a grid of size NxM. Each cell in the grid represents a point, and you need to calculate the shortest path from the top-left corner of the grid (cell (0, 0)) to the bottom-right corner of the grid (cell (N-1, M-1)). However, each cell in the grid can either be passable or an obstacle. You can only move up, down, left, or right, and you cannot move through obstacles. The task is to find the length of the shortest path from cell (0, 0) to cell (N-1, M-1). If there is no possible path, return -1. You are given a 2D list grid[][] of size NxM where grid[i][j] is 0 if the cell is passable and 1 if it is an obstacle. Example 1: Input: N = 3, M = 3 grid[][] = { {0, 0, 0}, {1, 1, 0}, {0, 0, 0} } Output: 4 Explanation: The shortest path is 0,0 → 0,1 → 0,2 → 1,2 → 2,2. The length of the path is 4. Example 2: Input: N = 3, M = 3 grid[][] = { {0, 1, 0}, {1, 1, 0}, {0, 0, 0} } Output: -1 Explanation: There is no valid path from 0,0 to 2,2. Your task: You don\'t need to read input or print anything. Your task is to complete the function shortestPath() which takes the integers N, M, and the 2D list grid[][] as input parameters and returns the length of the shortest path from the top-left to the bottom-right corner of the grid. If there is no path, return -1. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(N * M) Constraints: 1 ≤ N, M ≤ 100 0 ≤ grid[i][j] ≤ 1","solution":"from collections import deque def shortestPath(N, M, grid): def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == 0 and not visited[x][y] if grid[0][0] == 1 or grid[N-1][M-1] == 1: return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0)]) visited = [[False for _ in range(M)] for _ in range(N)] visited[0][0] = True path_length = 0 while queue: size = len(queue) for _ in range(size): x, y = queue.popleft() if x == N-1 and y == M-1: return path_length for dx, dy in directions: new_x, new_y = x + dx, y + dy if is_valid(new_x, new_y): visited[new_x][new_y] = True queue.append((new_x, new_y)) path_length += 1 return -1"},{"question":"Anirban loves even and odd numbers. He has two arrays, A and B, both of length N. For each index i (1 ≤ i ≤ N), he decides whether to add a value from A or B to his total score based on some rules: - If the value at index i in B (i.e., B[i]) is even, he will add the value from A at the same index (i.e., A[i]) to his total score. - If the value at index i in B (i.e., B[i]) is odd, he will add the value from B at the same index (i.e., B[i]) to his total score. You need to compute the total score that Anirban will get based on these rules. Input - The first line contains a single integer N, the length of the arrays A and B. - The next line contains N integers describing the array A. - The next line contains N integers describing the array B. Output - Output a single integer, the total score that Anirban gets. Constraints 1 ≤ N ≤ 2 * 10^5 1 ≤ A[i], B[i] ≤ 10^9 SAMPLE INPUT 5 1 2 3 4 5 6 7 8 9 10 SAMPLE OUTPUT 26 Explanation For index 1, B[1] is even, so add A[1] (1) to the total score. For index 2, B[2] is odd, so add B[2] (7) to the total score. For index 3, B[3] is even, so add A[3] (3) to the total score. For index 4, B[4] is odd, so add B[4] (9) to the total score. For index 5, B[5] is even, so add A[5] (5) to the total score. Total score = 1 + 7 + 3 + 9 + 5 = 25.","solution":"def calculate_total_score(N, A, B): total_score = 0 for i in range(N): if B[i] % 2 == 0: total_score += A[i] else: total_score += B[i] return total_score"},{"question":"# Task Binary trees are fundamental structures used in computer science for various operations and algorithms. Given a binary tree, your task is to find and return the longest path in terms of the number of nodes, between any two nodes in that tree. This is also known as the \\"diameter\\" of the binary tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. # Example For the binary tree represented as: ``` 1 / 2 3 / 4 5 ``` the result should be `4`. The longest path is `4 -> 2 -> 1 -> 3` or `5 -> 2 -> 1 -> 3`, with 4 nodes. For the binary tree represented as: ``` 1 / 2 / 3 4 / 5 ``` the result should be `4`. The longest path is `5 -> 3 -> 2 -> 4`, with 4 nodes. # Input/Output - `[input]` tree node `root` The root of the binary tree. - `[output]` an integer the longest path in terms of the number of nodes. # Note You are required to implement the function to compute the diameter of the binary tree. You\'ll need to traverse the tree and consider both the heights and the paths between nodes to find the longest one.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def diameterOfBinaryTree(root): Returns the diameter of the binary tree. def depth(node): Helper function to calculate the depth of the tree. During this process, it also updates the diameter. nonlocal diameter if not node: return 0 left_depth = depth(node.left) right_depth = depth(node.right) diameter = max(diameter, left_depth + right_depth) return max(left_depth, right_depth) + 1 diameter = 0 depth(root) return diameter + 1 if root else 0"},{"question":"Write a function that takes a non-negative integer `n` and returns the hexadecimal representation of `n` as a string. The function should handle the conversion of up to the maximum possible value of a 32-bit unsigned integer (i.e., 0 to 4294967295). For example: ``` convert_to_hexadecimal(26) should return \\"1a\\" convert_to_hexadecimal(255) should return \\"ff\\" convert_to_hexadecimal(4294967295) should return \\"ffffffff\\" ``` Your implementation should not use any built-in functions that directly do the conversion, like `hex()` in Python.","solution":"def convert_to_hexadecimal(n): Convert a non-negative integer to its hexadecimal representation. The function handles conversion of values up to a 32-bit unsigned integer (0 to 4294967295). Parameters: n (int): Non-negative integer to convert to hexadecimal. Returns: str: Hexadecimal representation of the integer. if n == 0: return \\"0\\" hex_chars = \\"0123456789abcdef\\" result = [] while n > 0: result.append(hex_chars[n % 16]) n //= 16 return \\"\\".join(reversed(result))"},{"question":"Write a function that reads a list of integers and prints the second smallest unique integer from the list. If there is no second smallest unique integer, print \\"Not found\\". Constraints * The list has at most 1000 integers. * Each integer in the list is between -10000 and 10000. Input The input consists of a single line containing a list of integers separated by spaces. Output Print the second smallest unique integer from the list. If there is no such integer, print \\"Not found\\". Example Input 2 3 4 2 1 5 3 Output 3 Input 1 1 1 1 Output Not found","solution":"def second_smallest_unique(nums): Finds and prints the second smallest unique integer from the list. If there is no second smallest unique integer, prints \\"Not found\\". Args: nums (str): A string of space-separated integers. # Parse the input string to a list of integers nums = list(map(int, nums.split())) # Filter out the unique elements and sort them unique_nums = sorted(set(nums)) # Check if there are at least two unique elements if len(unique_nums) < 2: print(\\"Not found\\") else: print(unique_nums[1])"},{"question":"A company wants to evaluate employee performance by tracking task completion times over a period of time. Each task has a unique identifier and can be completed only once. You are given q queries of three types: 1. `C id time` — Mark the task with identifier `id` as completed at the specified `time`. 2. `U id time` — Update the completion time of the task with identifier `id` to the new specified `time`. 3. `Q id` — Query the current completion time for the task with identifier `id`. Your task is to answer all the queries of type `3` (Query) in the order they appear in the input. You can assume that for queries of type `1` (Complete) and `2` (Update), the `id` provided is unique and valid. For each query of type `3` (Query), it is guaranteed that the task with identifier `id` has been completed at least once. Note that after answering the query of type `3` all the tasks remain with their current completion times, and updates are valid. If you are a Python programmer, consider using PyPy instead of Python when you submit your code. -----Input----- The first line of the input contains one integer q (1 le q le 100,000) — the number of queries. Then q lines follow. The i-th line contains the i-th query in the format specified above. It is guaranteed that for type `3` (Query) queries, the task has been completed at least once before it is queried. In each query, 1 le id le 100,000 and 1 le time le 1,000,000. -----Output----- Print answers to queries of the type `3` (Query) in the order they appear in the input, each on a new line. -----Examples----- Input 7 C 1 5 C 2 3 Q 1 U 2 4 Q 2 C 3 10 Q 3 Output 5 4 10 Note that: - Initially, no task is completed. - Completing task 1 at time 5, and task 2 at time 3. - Querying task 1 results in 5 because it was completed at time 5. - Updating task 2 to have a completion time of 4. - Querying task 2 results in 4 because the completion time was updated. - Completing task 3 at time 10. - Querying task 3 results in 10 because it was completed at time 10.","solution":"def process_queries(q, queries): task_completion_times = {} results = [] for query in queries: parts = query.split() command = parts[0] task_id = int(parts[1]) if command == \\"C\\": time = int(parts[2]) task_completion_times[task_id] = time elif command == \\"U\\": time = int(parts[2]) task_completion_times[task_id] = time elif command == \\"Q\\": results.append(task_completion_times[task_id]) return results"},{"question":"You are given a weighted, directed graph with N nodes and M edges. You need to compute the shortest distance from a given source node to all other nodes using Dijkstra\'s algorithm. -----Input----- - The first line of the input contains two integers N and M denoting the number of nodes and edges in the graph. - Each of the next M lines contains three integers u, v, and w representing an edge from node u to node v with weight w. - The last line contains a single integer S representing the source node. -----Output----- For each node, print a single line containing the minimum distance from the source node S. If a node is unreachable from the source, print \\"INF\\". -----Constraints----- - 1 leq N leq 1000 - 1 leq M leq 10,000 - 1 leq u, v leq N - 1 leq w leq 10^6 - The graph may have nodes that are not reachable from the source node. -----Example Input----- 5 6 1 2 2 1 3 4 2 4 7 2 3 1 3 5 3 4 5 1 1 -----Example Output----- 0 2 3 9 6","solution":"import heapq def dijkstra(N, edges, S): # Initialize distances and adjacency list dist = [float(\'inf\')] * (N + 1) adjacency_list = {i: [] for i in range(1, N + 1)} for u, v, w in edges: adjacency_list[u].append((v, w)) # Dijkstra\'s algorithm using a priority queue dist[S] = 0 priority_queue = [(0, S)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, weight in adjacency_list[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) # Prepare output: distances from source S, or \\"INF\\" if unreachable results = [] for i in range(1, N + 1): if dist[i] == float(\'inf\'): results.append(\\"INF\\") else: results.append(str(dist[i])) return results # Example usage with the provided input: # N, M = 5, 6 # edges = [ # (1, 2, 2), # (1, 3, 4), # (2, 4, 7), # (2, 3, 1), # (3, 5, 3), # (4, 5, 1) # ] # S = 1 # print(dijkstra(N, edges, S))"},{"question":"You are given a rectangular grid with dimensions H times W represented as a 2D list of integers. Each cell of the grid contains a non-negative integer indicating the height of a building at that cell. You need to determine the maximum height difference between any two adjacent cells in the grid. Two cells are considered adjacent if they share a common side. For instance, a cell (i, j) is adjacent to cells (i-1, j), (i+1, j), (i, j-1), and (i, j+1) if those cells exist within the grid boundaries. -----Input----- The first line contains two integers H and W (1 le H, W le 1000) which represent the height and width of the grid, respectively. The next H lines each contains W integers where each integer 0 le a_{ij} le 10^9 representing the height of the building at that cell. -----Output----- Print a single integer representing the maximum height difference between any two adjacent cells in the grid. -----Examples----- Sample Input: 3 3 1 2 2 3 8 2 5 3 5 Sample Output: 6 Sample Input: 2 2 1 1000000000 1 1000000000 Sample Output: 999999999 Sample Input: 4 5 5 5 5 5 5 4 1 1 1 4 4 1 8 1 4 5 4 4 4 4 Sample Output: 7","solution":"def max_height_difference(H, W, grid): Returns the maximum height difference between any two adjacent cells in the grid. max_diff = 0 for i in range(H): for j in range(W): if i > 0: max_diff = max(max_diff, abs(grid[i][j] - grid[i-1][j])) if i < H - 1: max_diff = max(max_diff, abs(grid[i][j] - grid[i+1][j])) if j > 0: max_diff = max(max_diff, abs(grid[i][j] - grid[i][j-1])) if j < W - 1: max_diff = max(max_diff, abs(grid[i][j] - grid[i][j+1])) return max_diff"},{"question":"You are given a list of integers representing the height of skyscrapers in a city. The goal is to determine the minimum number of moves required to make all the skyscrapers the same height. In one move, you can increase or decrease the height of any skyscraper by 1 unit. -----Input----- The input consists of two lines: - The first line contains a single integer, n (1 ≤ n ≤ 10^5), representing the number of skyscrapers. - The second line contains n space-separated integers, h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9), representing the heights of the skyscrapers. -----Output----- Output a single integer — the minimum number of moves required to make the heights of all the skyscrapers equal. -----Examples----- Input 4 1 2 3 4 Output 4 Input 3 2 2 3 Output 1 -----Note----- In the first sample, you can make all the heights equal to 2 or 3 with 4 moves in total. In the second sample, you can reduce the third skyscraper\'s height by 1 unit in 1 move.","solution":"def min_moves_to_equal_heights(n, heights): Returns the minimum number of moves required to make all skyscraper heights equal. Parameters: n (int): The number of skyscrapers. heights (list of int): The list of heights of the skyscrapers. Returns: int: The minimum number of moves required. median = sorted(heights)[n // 2] moves = sum(abs(h - median) for h in heights) return moves # Example usage: # n = 4 # heights = [1, 2, 3, 4] # print(min_moves_to_equal_heights(n, heights)) # Output: 4"},{"question":"You are given a dictionary of unique words and a list of words to search in that dictionary. Your task is to find out how many words from the search list can be formed by rearranging the letters of any word in the dictionary. For example, if \\"cine\\" is in the dictionary and \\"nice\\" is in the search list, then \\"nice\\" can be formed by rearranging letters of \\"cine\\". **Input** - The first line contains an integer `D` denoting the number of words in the dictionary. - The next `<D>` lines contain a single word each. - The following line contains an integer `S` denoting the number of words in the search list. - The next `<S>` lines contain a single word each. **Output** - Output a single integer representing how many words from the search list can be formed by rearranging the letters of any word in the dictionary. **Constraints** - 1 ≤ D, S ≤ 1000 - Each word consists of alphabets only and has a length of at most 20. **Example** Input ``` 4 cine race car act 5 nice care bat dog cat ``` Output ``` 3 ``` **Explanation** - \\"nice\\" can be formed by rearranging the letters of \\"cine\\". - \\"care\\" can be formed by rearranging the letters of \\"race\\". - \\"cat\\" can be formed by rearranging the letters of \\"act\\". - \\"bat\\" and \\"dog\\" cannot be formed by rearranging the letters of any word in the dictionary. - Hence, the output is 3.","solution":"def count_rearrangable_words(dictionary, search_list): Returns the number of words in the search list that can be formed by rearranging the letters of any word in the dictionary. Parameters: dictionary: list of words in the dictionary search_list: list of words to search Returns: int: number of rearrangable words def sort_word(word): Helper function to sort the letters of a word return \'\'.join(sorted(word)) # Create a set of sorted dictionary words sorted_dict_words = set(sort_word(word) for word in dictionary) # Count how many words in the search list can be rearranged from dictionary words count = 0 for word in search_list: if sort_word(word) in sorted_dict_words: count += 1 return count"},{"question":"Lara is playing a game in which she needs to score minimum points in order to advance to the next level. The points are given as an array a of length n, where each element represents the points scored in a particular round. Lara needs to know the first round in which the cumulative sum of points is greater than or equal to k. If the cumulative sum never reaches k, return -1 for that test case. -----Input----- - The first line contains an integer t (1 leq t leq 1000) — the number of test cases. - Each of the following t test cases is described as follows: - The first line contains two integers n (1 leq n leq 100) and k (1 leq k leq 10^4) — the number of rounds and the target points respectively. - The second line contains n space-separated integers a_1, a_2, ..., a_n (0 leq a_i leq 1000) — the points scored in each round. -----Output----- For each test case, output a single integer — the first round at which the cumulative points are greater than or equal to k. If the cumulative points never reach k, output -1. -----Examples----- Input 4 5 10 1 2 3 4 5 3 6 1 2 3 4 15 5 5 5 5 5 20 3 3 3 3 3 Output 4 3 3 -1 -----Note----- In the first test case, the cumulative sums are as follows: 1, 3, 6, 10, 15. So, the answer is \\"4\\" since the cumulative sum becomes 10 at the 4th round. In the second test case, the cumulative sums are: 1, 3, 6. So, the answer is \\"3\\" since the cumulative sum becomes 6 at the 3rd round. In the third test case, the cumulative sums are: 5, 10, 15, 20. So, the answer is \\"3\\" since the cumulative sum becomes 15 at the 3rd round. In the fourth test case, the cumulative sums are: 3, 6, 9, 12, 15. The cumulative sum never reaches 20, so the answer is \\"-1\\".","solution":"def find_first_round(t, test_cases): This function identifies the first round in which the cumulative sum of points is greater than or equal to k for each test case. If the cumulative sum never reaches k, it returns -1 for that test case. :param t: Number of test cases. :param test_cases: List of test cases where each test case is a tuple (n, k, points) :return: List of first rounds or -1 for each test case. results = [] for test_case in test_cases: n, k, points = test_case cumulative_sum = 0 round_num = -1 for i in range(n): cumulative_sum += points[i] if cumulative_sum >= k: round_num = i + 1 break results.append(round_num) return results"},{"question":"Given a number N, write a function to find the sum of all prime numbers less than or equal to N. Example 1: Input: N = 10 Output: 17 Explanation: The prime numbers less than or equal to 10 are 2, 3, 5, and 7. Their sum is 2 + 3 + 5 + 7 = 17. Example 2: Input: N = 20 Output: 77 Explanation: The prime numbers less than or equal to 20 are 2, 3, 5, 7, 11, 13, 17, and 19. Their sum is 2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 = 77. Your Task: You don\'t need to read input or print anything. Your task is to complete the function primeSum(N) which takes an integer N as input parameter and returns the sum of all prime numbers less than or equal to N. Expected Time Complexity: O(N log log N) Expected Space Complexity: O(N) Constraints: 1 <= N <= 10^6","solution":"def primeSum(N): Returns the sum of all prime numbers less than or equal to N. if N < 2: return 0 sieve = [True] * (N + 1) sieve[0] = sieve[1] = False for start in range(2, int(N**0.5) + 1): if sieve[start]: for multiple in range(start * start, N + 1, start): sieve[multiple] = False return sum(i for i, prime in enumerate(sieve) if prime)"},{"question":"In a small island nation, there is an annual competition to determine the island\'s strongest warrior. The competition format is a single-elimination tournament where each match eliminates one warrior and the winner moves on to the next round. The island has N warriors participating, and they are numbered from 1 to N. The strength of each warrior is given by an array S of length N, where S[i] represents the strength of the i-th warrior. The tournament is designed such that in each match, the two warriors with the highest remaining strengths are chosen to fight, and the one with the lower strength is eliminated. If two or more warriors have the same strength, the lowest numbered warrior is eliminated first. Given the strengths of all the warriors, determine the winner of the competition. -----Input----- - The first line contains an integer N (2 ≤ N ≤ 100,000) – the number of warriors. - The second line contains N space-separated integers S[i] (1 ≤ S[i] ≤ 10^9) – the strengths of the warriors. -----Output----- - Output a single integer – the number of the winning warrior. -----Example----- Input: 5 4 3 6 7 5 Output: 4 -----Explanation----- The warriors and their strengths are as follows: 1: 4 2: 3 3: 6 4: 7 5: 5 In the first round, warriors 4 and 3 fight. Warrior 3 is eliminated. The remaining warriors are: 1: 4 2: 4 4: 7 5: 5 In the next round, warriors 4 and 5 fight. Warrior 5 is eliminated. The remaining warriors are: 1: 4 2: 4 4: 7 In the final round, warriors 4 and 1 fight. Warrior 1 is eliminated. The remaining warriors are: 2: 4 4: 7 Warrior 4 is the last remaining, thus the winner is warrior 4.","solution":"def find_winner(N, S): Determines the winner of the warrior competition. :param N: int, number of warriors :param S: List[int], strengths of the warriors :return: int, the index of the winning warrior (1-based) # Maintain a list of (strength, index) sorted by strength and then index warriors = sorted([(S[i], i + 1) for i in range(N)], key=lambda x: (-x[0], x[1])) while len(warriors) > 1: # Pop the weakest warrior among the top two strongest warriors fighters = warriors[:2] if fighters[0][0] == fighters[1][0]: # If both have the same strength, remove the warrior with higher index warriors.pop(1) else: warriors.pop(1) # The last remaining warrior is the winner return warriors[0][1]"},{"question":"Consider a job scheduling scenario where you have a list of jobs to be executed. Each job has a specific start time and end time and occupies a machine for the entire duration of its execution. You need to determine the minimum number of machines required to schedule all the jobs such that no two jobs overlap on the same machine. -----Input----- The first line of the input contains an integer n (1 le n le 10^5) — the number of jobs. The next n lines contain two integers each. The i-th line contains two integers s_i and e_i (1 le s_i < e_i le 10^9) — the start time and end time of the i-th job. -----Output----- Print one integer — the minimum number of machines required to schedule all the jobs such that no two jobs overlap on the same machine. -----Examples----- Input 3 1 4 2 5 3 6 Output 3 Input 4 1 3 2 4 3 5 4 6 Output 2","solution":"def min_machines_required(jobs): events = [] for start, end in jobs: events.append((start, \'start\')) events.append((end, \'end\')) events.sort() max_machines = 0 current_machines = 0 for time, type in events: if type == \'start\': current_machines += 1 max_machines = max(max_machines, current_machines) else: current_machines -= 1 return max_machines"},{"question":"After the war, destroyed cities in the neutral zone were restored completely. And children went back to school with a renewed passion for solving challenging problems. The concept of \\"flattening\\" a binary tree was introduced, which allows the transformation of a binary tree into a linked list in-place. Given a binary tree, flatten it into a singly linked list using a preorder traversal. The final linked list should only use the right child pointers of each node, and left child pointers of all nodes should be set to `NULL`. Help children in the neutral zone flatten their binary trees correctly. The binary tree class used is defined as: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Your task is to implement the `flatten` function: ```python def flatten(root: TreeNode) -> None: # your code here ``` **Note:** The function should modify the tree in-place and does not return anything. # Input: - The function receives a reference to the root of a binary tree. # Output: - The function should modify the tree into a linked list in-place (using right child pointers). Example: Input: ``` 1 / 2 5 / 3 4 6 ``` After calling the `flatten` function, the tree should become: ``` 1 2 3 4 5 6 ``` In this example: 1. Visit node `1` 2. Visit node `2` 3. Visit node `3` 4. Visit node `4` 5. Visit node `5` 6. Visit node `6` The left child of all nodes should be `NULL` after flattening.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flatten(root: TreeNode) -> None: Flatten the binary tree into a singly linked list using pre-order traversal. if not root: return # Initialize the stack stack = [root] while stack: current = stack.pop() if current.right: stack.append(current.right) if current.left: stack.append(current.left) # Set the left child to None (since we\'re creating a singly linked list) if stack: current.right = stack[-1] current.left = None"},{"question":"Alice is developing a new application that requires managing intervals of time efficiently. She needs a function to merge overlapping intervals and to return a list of non-overlapping intervals covering all the time covered by the input. An interval is represented as a tuple (start, end) where `start` and `end` are integers and `start <= end`. Two intervals `(a, b)` and `(c, d)` are considered overlapping if `b >= c` and `a <= d`. Your task is to write a function that takes a list of intervals and merges any overlapping intervals, returning a list of non-overlapping intervals sorted by their start time. Function Signature: ```python def merge_intervals(intervals: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ``` # Input - A list of tuples `intervals` where each tuple contains two integers representing the start and end of an interval. The intervals are not necessarily sorted. - The length of the list does not exceed `1000`, and the values for `start` and `end` do not exceed `10^6`. # Output - A list of tuples representing the merged non-overlapping intervals, sorted by their start time. # Examples Example 1 Input: ```python [(1, 3), (2, 4), (5, 7), (6, 8)] ``` Output: ```python [(1, 4), (5, 8)] ``` Example 2 Input: ```python [(1, 5), (2, 6), (8, 10), (9, 12)] ``` Output: ```python [(1, 6), (8, 12)] ``` Example 3 Input: ```python [(1, 3), (4, 5), (6, 8)] ``` Output: ```python [(1, 3), (4, 5), (6, 8)] ``` # Constraints - The intervals do not necessarily come in order. - Each interval is represented as a tuple with two integers.","solution":"from typing import List, Tuple def merge_intervals(intervals: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Merges overlapping intervals and returns a list of non-overlapping intervals sorted by their start time. # First, sort the intervals by their start times intervals.sort(key=lambda x: x[0]) merged_intervals = [] for interval in intervals: # If merged_intervals is empty or current interval does not overlap with the previous one, add it to the list if not merged_intervals or merged_intervals[-1][1] < interval[0]: merged_intervals.append(interval) else: # There is an overlap, merge the current interval with the previous one merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], interval[1])) return merged_intervals"},{"question":"# Most Frequent Element Task Write a function `most_frequent_element(nums)` that takes a list of integers, `nums`, as input and returns the integer that appears most frequently in the list. If multiple numbers have the same highest frequency, return the smallest one among them. Examples ```python most_frequent_element([1, 3, 2, 1, 4, 1, 2, 3, 3, 3]) => 3 most_frequent_element([4, 5, 6, 7, 7, 6, 5, 4, 4, 4, 5, 5]) => 4 most_frequent_element([1, 2, 2, 1, 3, 3]) => 1 most_frequent_element([7, 7, 7, 8, 8, 8, 9]) => 7 most_frequent_element([10, 14, 14, 10, 14, 10]) => 10 ``` Notes: 1. Assume the input list `nums` is non-empty. 2. The elements of `nums` are integers and can include negative numbers. 3. The function should handle lists with up to 100,000 elements efficiently. 4. Use appropriate data structures to ensure the implementation is time and space efficient.","solution":"def most_frequent_element(nums): Returns the integer that appears most frequently in the list \'nums\'. If multiple numbers have the same highest frequency, returns the smallest one. from collections import Counter # Count the frequency of each element in the list count = Counter(nums) # Find the maximum frequency max_freq = max(count.values()) # Find the smallest number among those with the max frequency most_frequent = min([num for num, freq in count.items() if freq == max_freq]) return most_frequent"},{"question":"Problem description Alice is a new student who loves to solve puzzles. Her favorite puzzle is the \\"Shortest Path Puzzle.\\" In this puzzle, given a grid with non-negative integer weights representing different cells, Alice has to start from the top-left corner and find the minimum cost required to reach the bottom-right corner. Alice can only move in two directions - right or down, at each step. Help Alice by writing a program that calculates the minimum cost path for her. Input The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the size of the grid (N x N). The next N lines of each test case contain N space-separated integers representing the grid weights. Output For each test case, output a single line containing the minimum cost to reach the bottom-right corner of the grid from the top-left corner. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 100 0 ≤ grid[i][j] ≤ 1000 Example Input: 2 3 1 3 1 1 5 1 4 2 1 2 1 2 1 1 Output: 7 3","solution":"def min_path_cost(grid): Calculate the minimum path cost to reach the bottom-right corner of the grid from the top-left corner. Movement is allowed only to the right or down. N = len(grid) dp = [[0] * N for _ in range(N)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, N): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, N): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, N): for j in range(1, N): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The answer is in the bottom-right corner of the dp table return dp[N - 1][N - 1] def solve_shortest_path_puzzle(T, test_cases): results = [] for case in test_cases: N, grid = case result = min_path_cost(grid) results.append(result) return results"},{"question":"Mario and Luigi are working together on a project to balance a number of crates. They have n crates, each with a certain weight. They want to balance these crates into two groups such that the difference in total weight between the two groups is minimized. You are given the number of crates and their respective weights. Your task is to determine the minimum possible difference between the total weights of the two groups. -----Input----- The first line contains an integer n (1 le n le 100) — the number of crates. The second line contains n integers w_1, w_2, ..., w_n (1 le w_i le 1000) — the weights of the crates. -----Output----- Output a single integer — the minimum possible difference between the total weights of the two groups. -----Examples----- Input 5 1 2 3 4 5 Output 1 Input 4 1 5 11 5 Output 0 -----Note----- In the first example, you can split the weights into two groups: [1, 4, 5] and [2, 3]. The difference in their sum is 10 - 9 = 1, which is the minimum possible difference. In the second example, you can split the weights into two groups: [1, 5, 5] and [11]. The difference in their sum is 11 - 11 = 0, which is the minimum possible difference.","solution":"def minimum_difference(n, weights): Finds the minimum possible difference between the total weights of two groups. Args: - n (int): Number of crates. - weights (List[int]): List of weights for each crate. Returns: int: The minimum possible difference. total_weight = sum(weights) dp = [False] * (total_weight + 1) dp[0] = True for weight in weights: for j in range(total_weight, weight - 1, -1): if dp[j - weight]: dp[j] = True for j in range(total_weight // 2, -1, -1): if dp[j]: return total_weight - 2 * j return total_weight"},{"question":"You are developing an automated attendance system for a university. The system needs to manage student records, including their attendance frequencies for different courses over a semester. Each student\'s record will initially have five zeroes, each representing the number of classes attended in a week for any of the five courses they are enrolled in. Over the semester, there will be two types of operations: 1. Increment (I): Increase the attendance count for a specific student in a specific course by a given number of classes. 2. Query (Q): Calculate the average attendance of a specific student across all five courses. Write a program that handles these operations efficiently. Input Format: The first line contains two space-separated integers n and m, indicating the number of students and the number of operations, respectively. The next m lines each contain one of the following types of operations: - \'I student_id course_id x\' where \'I\' stands for increment, student_id is the student\'s ID (1 to n), course_id is the course number (1 to 5), and x is the number of classes to add to the attendance count. - \'Q student_id\' where \'Q\' stands for query, and student_id is the student\'s ID (1 to n). Output Format: For each \'Q\' operation, print a single line containing the average attendance of the specified student across all five courses, formatted to two decimal places. Constraints: 1 ≤ n ≤ 1000 1 ≤ m ≤ 100000 1 ≤ student_id ≤ n 1 ≤ course_id ≤ 5 1 ≤ x ≤ 100000 SAMPLE INPUT 3 5 I 1 1 3 I 1 2 4 Q 1 I 2 5 5 Q 2 SAMPLE OUTPUT 1.40 1.00 Explanation: Initially, all students have zero classes attended in each of their five courses. 1. After the first operation, student 1 attends 3 classes in course 1. 2. After the second operation, student 1 attends 4 classes in course 2. 3. The first query calculates the average attendance of student 1, resulting in (3+4+0+0+0)/5 = 1.40. 4. After the fourth operation, student 2 attends 5 classes in course 5. 5. The second query calculates the average attendance of student 2, resulting in (0+0+0+0+5)/5 = 1.00.","solution":"def manage_attendance(n, m, operations): Manages student attendance records. Parameters: n (int): Number of students. m (int): Number of operations. operations (list): List of operations as strings. Returns: list: List of average attendance for each \'Q\' operation. attendance = [[0] * 5 for _ in range(n)] result = [] for operation in operations: parts = operation.split() if parts[0] == \'I\': student_id = int(parts[1]) - 1 course_id = int(parts[2]) - 1 x = int(parts[3]) attendance[student_id][course_id] += x elif parts[0] == \'Q\': student_id = int(parts[1]) - 1 avg_attendance = sum(attendance[student_id]) / 5.0 result.append(f\\"{avg_attendance:.2f}\\") return result"},{"question":"A social media application models user friendships as an undirected graph, where each node represents a user, and an edge between two nodes signifies a friendship. Your task is to compute the centrality score of each user. The centrality score is defined as the number of direct friends a user has. You are given an integer `n`, representing the number of users (nodes), and an array `friendships` where `friendships[i] = [a, b]` indicates that `a` and `b` are friends. You need to return an array of length `n` where the ith element is the centrality score of user `i`. Example 1: Input: n = 4 friendships = [[0, 1], [0, 2], [1, 2], [1, 3]] Output: [2, 3, 2, 1] Explanation: - User 0 has 2 friends: [1, 2] - User 1 has 3 friends: [0, 2, 3] - User 2 has 2 friends: [0, 1] - User 3 has 1 friend: [1] Example 2: Input: n = 3 friendships = [[0, 1], [1, 2]] Output: [1, 2, 1] Explanation: - User 0 has 1 friend: [1] - User 1 has 2 friends: [0, 2] - User 2 has 1 friend: [1] Note: - Each user is represented by a unique integer id starting from 0 up to n-1. - Friendship relationships are bidirectional, i.e., if \'a\' is friends with \'b\', then \'b\' is friends with \'a\'. - 1 <= n <= 1000 - 0 <= len(friendships) <= 5000 - 0 <= a, b < n","solution":"def centrality_scores(n, friendships): Computes the centrality score for each user based on the friendship connections. Parameters: n (int): Number of users friendships (List[List[int]]): List of friendship relations Returns: List[int]: Centrality score of each user # Initialize the centrality score list with zeros centrality = [0] * n # Iterate over each friendship and increment the score for both friends for a, b in friendships: centrality[a] += 1 centrality[b] += 1 return centrality"},{"question":"In an alphabetical string, a character\'s value is its position in the alphabet, a = 1, b = 2, ..., z = 26. Given a word, calculate the score of this word by summing up the values of all its characters. For example, for the word \\"abc\\", its score would be 1 + 2 + 3 = 6. In this task, you need to determine if there exists a contiguous subsequence of a given word that has a score equal to the given integer K. -----Input:----- The first line of the input contains a single integer T indicating the number of test cases. Each test case consists of a single integer N (the length of the word), followed by the word itself and a single integer K. -----Output:----- For each test case, output \\"YES\\" if a contiguous subsequence with the given score exists, otherwise output \\"NO\\". -----Constraints:----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq K leq 10^6 - The input word consists only of lowercase English letters. -----Sample Input 1:----- 2 3 abc 6 5 zyxwv 15 -----Sample Output 1:----- YES NO","solution":"def calculate_char_value(c): return ord(c) - ord(\'a\') + 1 def find_subsequence_score(T, test_cases): results = [] for i in range(T): N, word, K = test_cases[i] prefix_sum = [0] * (N + 1) for j in range(N): prefix_sum[j + 1] = prefix_sum[j] + calculate_char_value(word[j]) sum_set = {0} found = False for j in range(1, N + 1): if (prefix_sum[j] - K) in sum_set: found = True break sum_set.add(prefix_sum[j]) if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"# Problem Statement: Chris has been practicing the art of number manipulation. He recently encountered a new type of challenge involving \\"Good Arrays\\". An array of integers is considered \\"Good\\" if the sum of its contiguous subarray is even. Chris needs to write a function to determine whether the given array is \\"Good\\" or not. Your task is to help Chris solve this problem. # Input The input consists of two lines: - The first line contains an integer `n` (1 ≤ n ≤ 100,000), the length of the array. - The second line contains `n` space-separated integers representing the array. # Output Print \\"YES\\" (without the quotes), if the array is \\"Good\\", and \\"NO\\" (without the quotes) otherwise. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` NO ``` Input ``` 4 2 4 6 8 ``` Output ``` YES ``` # Note In the first example, the subarray [1, 2] has an odd sum, which means the array is not \\"Good\\". So, the answer is \\"NO\\". In the second example, all the subarrays have even sums, making the array \\"Good\\", and thus the answer is \\"YES\\". solving this problem involves checking whether, for every contiguous subarray, the sum is even. If at least one subarray sum is odd, the answer should be \\"NO\\". Otherwise, \\"YES\\".","solution":"def is_good_array(n, array): Determines if the given array is \\"Good\\". A \\"Good\\" array means every possible contiguous subarray has an even sum. :param n: Integer, length of the array. :param array: List of integers representing the array. :return: \\"YES\\" if the array is \\"Good\\", otherwise \\"NO\\". # If there is any odd element in the array, the array cannot be \\"Good\\". for num in array: if num % 2 != 0: return \\"NO\\" return \\"YES\\""},{"question":"Given a list of N integers, find out if you can form a strictly increasing sequence by removing at most one integer from the list. ------ Input Format ------ - The first line contains an integer N, the number of elements in the list. - The second line contains N integers representing the list. ------ Output Format ------ Output YES if it is possible to form a strictly increasing sequence by removing at most one integer from the list, otherwise output NO. ------ Constraints ------ 3 ≤ N ≤ 10^5 1 ≤ elements ≤ 10^9 ------ Sample Input 1 ------ 5 10 1 2 3 4 ------ Sample Output 1 ------ YES ------ Sample Input 2 ------ 4 5 1 2 1 ------ Sample Output 2 ------ NO ----- Explanation ------ In the first sample input, by removing the first element (10), the list becomes [1, 2, 3, 4], which is strictly increasing. In the second sample input, we cannot form a strictly increasing sequence by removing just one element. All elements 1, 2 and 1 need to be removed, but only one removal is allowed. Hence, output is NO.","solution":"def is_strictly_increasing_after_removal(n, lst): Determines if it is possible to form a strictly increasing sequence by removing at most one element from the list. Parameters: n (int): The number of elements in the list. lst (List[int]): The list of integers. Returns: str: \\"YES\\" if possible, otherwise \\"NO\\". def is_strictly_increasing(nums): for i in range(1, len(nums)): if nums[i] <= nums[i - 1]: return False return True if is_strictly_increasing(lst): return \\"YES\\" for i in range(n): if is_strictly_increasing(lst[:i] + lst[i+1:]): return \\"YES\\" return \\"NO\\""},{"question":"Eliza and Margaret are planning a special event where they invite k guests. Each guest has a specific arrival time ai and a specific departure time bi. Eliza wants to utilize a unique feature in the event: she has access to a special room that can only be occupied by one person at a time. To make the most use of this special room, she wants to find out the maximum number of guests that can use the special room, given that no two guests can be in the room at the same time. For each guest i, they can only use the special room between their arrival time ai and their departure time bi inclusive. Write a program to help Eliza determine how many guests can use the special room. Input The first line contains a single integer k (1 ≤ k ≤ 2·105) denoting the number of guests Eliza and Margaret invite. Each line i of the k subsequent lines contains two integers ai, bi (1 ≤ ai ≤ bi ≤ 109), denoting the arrival and the departure times of the i-th guest. Output Print a single integer denoting the maximum number of guests that can use the special room. Example Input 4 1 2 2 3 3 4 1 3 Output 2 Note Consider the given example. The optimal schedule would allow the first and the third guest to use the special room, as their time slots do not overlap.","solution":"def max_guests_use_room(k, guests): Calculates the maximum number of guests that can use the special room without overlapping times. Parameters: k (int): The number of guests. guests (list): A list of tuples where each tuple represents (arrival, departure) times. Returns: int: Maximum number of non-overlapping guests that can use the room. # Sort guests based on their departure times guests.sort(key=lambda guest: guest[1]) max_guests = 0 last_departure = 0 for arrival, departure in guests: if arrival > last_departure: max_guests += 1 last_departure = departure return max_guests # Example usage (should not be part of the final code) # Input: 4 guests => [(1, 2), (2, 3), (3, 4), (1, 3)] guests = [(1, 2), (2, 3), (3, 4), (1, 3)] print(max_guests_use_room(4, guests)) # Output: 2"},{"question":"In a computing system, a task scheduler is to be designed to manage multiple tasks such that each task is characterized by its execution time. The system can execute multiple tasks simultaneously in separate slots. Each slot can handle one task at a time and must accommodate the entire duration of the task. You are given the start time and end time of each task, and you need to determine the minimum number of slots required to execute all tasks without any overlap. Each task has a start time `s_i` and an end time `e_i` such that `0 <= s_i < e_i <= 10^9`. -----Input----- The first line contains the integer `n` (1 le n le 10^5), the number of tasks. The next `n` lines each contain two integers `s_i` and `e_i` - the start and end times of the `i`-th task respectively. -----Output----- Output a single integer, the minimum number of slots required to execute all tasks. -----Examples----- Input 3 1 4 2 5 6 8 Output 2 Input 5 1 3 2 4 3 5 4 6 5 7 Output 2 -----Note----- In the first example, you can schedule the slots as follows: - Slot 1: Task 1 (1 to 4) - Slot 2: Task 2 (2 to 5) - Slot 1: Task 3 (6 to 8) Thus, at most 2 slots are needed at any time. In the second example, the tasks overlap in such a manner that it only ever requires 2 slots.","solution":"import heapq def minSlots(tasks): Returns the minimum number of slots required to execute all tasks. Each task is represented as a tuple (start, end). if not tasks: return 0 # Sort tasks by their start times tasks.sort(key=lambda x: x[0]) # Initialize a min-heap min_heap = [] # Add the end time of the first task to the heap heapq.heappush(min_heap, tasks[0][1]) for task in tasks[1:]: # If the earliest ending task is finished before the new task starts if min_heap[0] <= task[0]: heapq.heappop(min_heap) # Add the new task\'s end time to the heap heapq.heappush(min_heap, task[1]) # The size of the heap represents the minimum number of slots required return len(min_heap)"},{"question":"Your task is to implement a function `serialize_binary_tree` that takes the root of a binary tree and serializes the tree into a string using pre-order traversal. You will also need to implement a function `deserialize_binary_tree` that takes the serialized string and reconstructs the original binary tree. This is a common technique used in storing and transferring tree structures. You may assume the input binary tree contains integers and is properly formed. Each node in the binary tree has three attributes: `left`, `right`, and `value`. Implement the `serialize_binary_tree` and `deserialize_binary_tree` functions as follows: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def serialize_binary_tree(root: TreeNode) -> str: # Your implementation here pass def deserialize_binary_tree(data: str) -> TreeNode: # Your implementation here pass ``` Example: ``` # Construct the following binary tree # 1 # / # 2 3 # / # 4 5 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.right.left = TreeNode(4) root.right.right = TreeNode(5) serialized = serialize_binary_tree(root) print(serialized) # Example output: \\"1,2,None,None,3,4,None,None,5,None,None\\" deserialized = deserialize_binary_tree(serialized) # The deserialized tree should have the same structure and values as the original tree print(deserialized.value) # Output: 1 print(deserialized.left.value) # Output: 2 print(deserialized.right.value) # Output: 3 print(deserialized.right.left.value) # Output: 4 print(deserialized.right.right.value) # Output: 5 ```","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def serialize_binary_tree(root: TreeNode) -> str: def helper(node): if node is None: return \\"None\\" return f\\"{node.value},{helper(node.left)},{helper(node.right)}\\" return helper(root) def deserialize_binary_tree(data: str) -> TreeNode: def helper(values): if values[0] == \\"None\\": values.pop(0) return None node = TreeNode(int(values.pop(0))) node.left = helper(values) node.right = helper(values) return node values = data.split(\',\') return helper(values)"},{"question":"Jessica is organizing a coding competition and needs to assign unique team IDs for each team. Each team ID must be a unique permutation of a given string. The string consists of uppercase English letters only and the length of the string is between 1 and 7, inclusive. Your task is to generate all possible unique team IDs for the given string. -----Input----- First and only line of input contains a string S of length n (1 leq n leq 7) consisting of uppercase English letters. -----Output----- Output all unique permutations of the string S, each on a separate line. The permutations can be in any order. -----Examples----- Sample Input 1: ABC Sample Output 1: ABC ACB BAC BCA CAB CBA Sample Input 2: AAB Sample Output 2: AAB ABA BAA","solution":"import itertools def generate_team_ids(s): Generate all unique permutations of the given string. Parameters: s (str): The input string Returns: list: A list of all unique permutations of the input string return sorted(set(\'\'.join(p) for p in itertools.permutations(s)))"},{"question":"You are given a weighted directed graph with n vertices and m edges. The vertices are numbered from 1 to n. The graph may contain self-loops or multiple edges between the same pair of vertices. Your task is to find the shortest path from vertex 1 (the starting vertex) to all other vertices. If a vertex is not reachable from vertex 1, the distance to it should be considered infinity. Write a program to find the shortest paths from vertex 1 to all other vertices using Dijkstra\'s algorithm. -----Input----- The first line of the input contains two integers n and m (1 le n le 10^5, 0 le m le 2 cdot 10^5) — the number of vertices and the number of edges, respectively. Each of the next m lines contains three integers u_i, v_i, w_i (1 le u_i, v_i le n, 1 le w_i le 10^9), representing a directed edge from vertex u_i to vertex v_i with weight w_i. -----Output----- Output a single line containing n integers. The i-th integer should be the shortest distance from vertex 1 to vertex i. If vertex i is not reachable from vertex 1, output -1 for that vertex. -----Examples----- Input 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 Output 0 2 3 9 6 Input 3 1 1 2 3 Output 0 3 -1 Input 4 4 1 2 1 1 3 4 2 3 2 3 4 1 Output 0 1 3 4","solution":"import heapq def dijkstra(n, edges): # Prepare the graph as adjacency list graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) # Initialize distance array with infinity dist = [float(\\"inf\\")] * (n + 1) dist[1] = 0 # Use priority queue to store the nodes to be processed pq = [(0, 1)] # (distance, vertex) heapq.heapify(pq) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) # Retain the results starting from vertex 1 to n # Use -1 to denote unreachable nodes result = [dist[i] if dist[i] != float(\\"inf\\") else -1 for i in range(1, n + 1)] return result"},{"question":"You are given a grid with `n` rows and `m` columns (1 ≤ n, m ≤ 1000). Initially, all values in the grid are zeros. The cells of the grid can be identified based on the 1-based row and column indices. Let\'s denote the element at the i-th row and j-th column as `grid[i][j]`. You need to perform the following operations on the grid: 1. Query(x0, y0, x1, y1): This operation should return the sum of all elements in the subgrid from (x0, y0) to (x1, y1). 2. Update(x, y, v): This operation updates the value at cell (x, y) by setting it to `v`. # Input The first line contains two integers `n` and `q`, where `q` is the number of operations to be performed. Each of the next `q` lines contains the description of an operation. For each Query operation, the line begins with `1`, followed by four integers `x0`, `y0`, `x1`, `y1`. For each Update operation, the line begins with `2`, followed by three integers `x`, `y`, `v`. It is guaranteed that: - 1 ≤ `x0` ≤ `x1` ≤ `n` - 1 ≤ `y0` ≤ `y1` ≤ `m` - 1 ≤ `x`, `y` ≤ `n`, `m` - 0 ≤ `v` ≤ 1000 # Output For each Query operation, output the sum of the elements in the specified subgrid on a new line. # Example Input 6 5 2 2 1 5 2 3 2 3 1 1 1 3 3 2 1 4 2 1 1 1 4 4 Output 8 15 # Explanation After the first two update operations, the grid looks like this: ``` 0 0 0 0 0 0 0 5 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ``` The first query sums up the elements from (1,1) to (3,3) which gives 5+3 = 8. After the third update operation, the grid looks like this: ``` 0 0 0 0 0 0 0 5 0 0 0 0 0 0 3 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ``` The second query sums up the elements from (1,1) to (4,4) which gives 5+3+2 = 10.","solution":"class Grid: def __init__(self, n, m): self.n = n self.m = m self.grid = [[0] * (m + 1) for _ in range(n + 1)] def update(self, x, y, v): self.grid[x][y] = v def query(self, x0, y0, x1, y1): total_sum = 0 for i in range(x0, x1 + 1): for j in range(y0, y1 + 1): total_sum += self.grid[i][j] return total_sum def main(operations): n, q = operations[0][0], operations[0][1] grid = Grid(n, n) result = [] for op in operations[1:]: if op[0] == 1: result.append(grid.query(op[1], op[2], op[3], op[4])) elif op[0] == 2: grid.update(op[1], op[2], op[3]) return result # Example usage: operations = [ (6, 5), (2, 2, 1, 5), (2, 3, 2, 3), (1, 1, 1, 3, 3), (2, 1, 4, 2), (1, 1, 1, 4, 4) ] print(main(operations)) # Output should be [8, 10]"},{"question":"Given an integer n, print a square matrix of size n x n filled with numbers from 1 to n^2 in a clockwise spiral order. Input The input is given in the following format: n Output Print the square matrix of size n x n with numbers from 1 to n^2 in a clockwise spiral order. Each row of the matrix should be printed in a new line, with elements separated by a space. Example Input 3 Output 1 2 3 8 9 4 7 6 5 Input 4 Output 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 Constraints * 1 leq n leq 10 Note: The matrix should be printed without additional text or explanations.","solution":"def spiral_matrix(n): Returns an n x n matrix filled with numbers from 1 to n^2 in a clockwise spiral order. matrix = [[0]*n for _ in range(n)] num = 1 top, bottom, left, right = 0, n-1, 0, n-1 while top <= bottom and left <= right: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 for row in matrix: print(\\" \\".join(map(str, row))) # Example usage: # spiral_matrix(3)"},{"question":"In a magical kingdom, there is a special kind of tree called the \\"Symmetry Tree\\". A Symmetry Tree always has an even number of total nodes, and its shape is such that if you fold the tree along its root, the left subtree and the right subtree will perfectly mirror each other in terms of structure and node values. The kingdom\'s wizard wants to generate all possible Symmetry Trees with exactly n nodes and provide their count. Given an integer n, determine the number of distinct Symmetry Trees that can be created with exactly n nodes. For simplicity, assume that all the nodes are distinct and labeled from 1 to n. Input format The input consists of a single line containing an integer n, the total number of nodes in the Symmetry Tree. Output format Print the number of distinct Symmetry Trees that can be constructed using exactly n nodes, modulo 10^9+7. Constraints - 2 ≤ n ≤ 50 - n is always even SAMPLE INPUT 4 SAMPLE OUTPUT 2 Explanation For n = 4, the two possible Symmetry Trees are: 1. 1 / 2 3 4 2. 1 / 2 4 3 These trees follow the condition of being symmetrical. Note that the positions of child nodes ensure that flipping the left and right subtrees yield identical tree structures and node values.","solution":"MOD = 10**9 + 7 def count_symmetry_trees(n): Returns the number of distinct Symmetry Trees that can be created with exactly n nodes. if n % 2 != 0: return 0 # This DP array will store the count of BSTs possible with different number of nodes dp = [0] * (n + 1) dp[0] = 1 dp[2] = 1 for nodes in range(4, n + 1, 2): total = 0 for left_nodes in range(0, nodes, 2): right_nodes = nodes - 2 - left_nodes total += dp[left_nodes] * dp[right_nodes] total %= MOD dp[nodes] = total return dp[n] # Example Usage print(count_symmetry_trees(4)) # Example from the problem: Expected output is 2"},{"question":"John recently opened a bakery and sells cookies in packs. Each pack contains a fixed number of cookies. John keeps track of his sales by noting how many packs he sells each day. He also knows the cost and selling price per pack. John wants to calculate the total profit he made over a period of days. Your task is to help him by computing the total profit, which is the selling revenue minus the cost price over all days. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains three space-separated integers N, C, and S — the number of packs sold each day, the cost price per pack, and the selling price per pack, respectively. - The next line contains N space-separated integers, representing the number of packs sold on each of the N days. ------ Output Format ------ For each test case, print on a new line a single integer — John\'s total profit over the entire period. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{3} 1 ≤ C, S ≤ 10^{3} ----- Sample Input 1 ------ 2 3 100 150 10 20 30 4 90 120 5 5 10 5 ----- Sample Output 1 ------ 4500 5400 ----- Explanation 1 ------ Test Case 1: John sold packs on 3 days with each day having sales as follows: 1. 10 packs 2. 20 packs 3. 30 packs Total packs sold = 10 + 20 + 30 = 60 The cost price per pack (C) is 100 and the selling price per pack (S) is 150. Total revenue = 60 * 150 = 9000 Total cost = 60 * 100 = 6000 Total profit = 9000 - 6000 = 3000 Test Case 2: John sold packs on 4 days with each day having sales as follows: 1. 5 packs 2. 5 packs 3. 10 packs 4. 5 packs Total packs sold = 5 + 5 + 10 + 5 = 25 The cost price per pack (C) is 90 and the selling price per pack (S) is 120. Total revenue = 25 * 120 = 3000 Total cost = 25 * 90 = 2250 Total profit = 3000 - 2250 = 450","solution":"def calculate_total_profit(T, test_cases): Calculate total profit for given test cases. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains (N, C, S, packs_sold_per_day) Returns: list of int: List of total profits for each test case results = [] for test_case in test_cases: N, C, S, days_packs_sold = test_case total_packs_sold = sum(days_packs_sold) total_revenue = total_packs_sold * S total_cost = total_packs_sold * C total_profit = total_revenue - total_cost results.append(total_profit) return results # Example usage: # T = 2 # test_cases = [ # (3, 100, 150, [10, 20, 30]), # (4, 90, 120, [5, 5, 10, 5]) # ] # print(calculate_total_profit(T, test_cases)) # Output: [3000, 750]"},{"question":"In a coding competition, participants are required to solve a problem related to string manipulation. The task is to determine if two strings are anagrams of each other. Two strings are considered anagrams if they can be rearranged to form one another; that is, both strings have the same characters with the same frequency. Input: The first line contains the number of test cases, T. The following T lines each contain two strings S1 and S2 to be compared. Output: For each pair of strings, print \\"YES\\" if they are anagrams, and \\"NO\\" otherwise. Constraints 1 ≤ T ≤ 100 1 ≤ |S1|, |S2| ≤ 100 SAMPLE INPUT 3 listen silent triangle integral hello world SAMPLE OUTPUT YES YES NO Explanation In the first input pair \\"listen\\" and \\"silent\\", both strings contain the same characters with the same frequency, so they are anagrams. In the second input pair \\"triangle\\" and \\"integral\\", both strings contain the same characters with the same frequency, so they are anagrams. In the third input pair \\"hello\\" and \\"world\\", the strings contain different characters, so they are not anagrams.","solution":"def are_anagrams(s1, s2): Determine if two strings are anagrams of each other. return sorted(s1) == sorted(s2) def check_anagrams(test_cases): For a list of test cases, determines if the pairs of strings are anagrams. :param test_cases: A list of tuples, each containing two strings. :return: A list containing \\"YES\\" or \\"NO\\" for each pair of strings. results = [] for s1, s2 in test_cases: if are_anagrams(s1, s2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A famous treasure hunter has recently discovered a deep cave with m levels. Each level has a number of valuable gems that can be collected. However, moving from one level to another requires energy. The amount of gems on the i-th level is given by an array G[i], and the energy required to move from level i to level i+1 is given by an array E[i]. The hunter starts from the top level (level 1), and he has a limited amount of initial energy of S. Determine the maximum number of gems the hunter can collect given the initial energy. -----Input:----- - First line will contain an integer m, the number of levels in the cave. - Second line will contain m space separated integers, denoting G[i], the number of gems on each level. - Third line will contain m-1 space separated integers, denoting E[i], the energy required to move from level i to level i+1. - Fourth and final line will contain an integer S, the initial energy the hunter has. -----Output:----- Maximum gems collected. -----Constraints----- - 1 <= m <= 10^5 - 1 <= G[i] <= 10^4 - 1 <= E[i] <= 10^4 - 1 <= S <= 10^5 -----Sample Input:----- 5 10 20 30 40 50 5 10 5 1 15 -----Sample Output:----- 50 -----Explanation:----- The hunter starts at level 1 with 10 gems. To move to level 2, he needs 5 units of energy, reducing his energy to 10. On level 2, he collects 20 gems, giving him a total of 30 gems. Next, to move to level 3, he needs 10 units of energy, reducing his energy to 0. Now, on level 3, he collects 30 gems, resulting in a total of 60 gems. Moving further is not possible as there is no remaining energy. Thus, the maximum number of gems he can collect is 60.","solution":"def max_gems_collected(m, G, E, S): Determine the maximum number of gems the hunter can collect given the initial energy. :param m: int, number of levels :param G: list of int, number of gems on each level :param E: list of int, energy required to move from level i to level i+1 :param S: int, initial energy :return: int, maximum gems collected max_gems = 0 current_gems = 0 current_energy = S for i in range(m): current_gems += G[i] max_gems = max(max_gems, current_gems) if i < m-1: # ensure we are not accessing out of bounds if current_energy >= E[i]: current_energy -= E[i] else: break return max_gems"},{"question":"An undirected graph is represented using a matrix A of size N times N, where A[i][j] is 1 if there is an edge between vertex i and vertex j, otherwise A[i][j] is 0. There are Q queries, each query giving two vertices u and v, and asking whether there is a direct edge between them. ------ Input ------ The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case contains: - The first line contains two space-separated integers N and Q. - The next N lines each containing N integers, representing the adjacency matrix A. - Each of the following Q lines contains two space-separated integers u and v describing a query. ------ Output ------ For each query, print \\"YES\\" if there is a direct edge between vertices u and v, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 500 1 ≤ Q ≤ 10,000 1 ≤ u, v ≤ N u ≠ v ------ Subtasks ------ Subtask #1 (50 points): 2 ≤ N ≤ 100 1 ≤ Q ≤ 1,000 Subtask #2 (50 points): original constraints ----- Sample Input 1 ------ 1 4 3 0 1 0 0 1 0 1 0 0 1 0 1 0 0 1 0 1 2 1 3 4 2 ----- Sample Output 1 ------ YES NO YES","solution":"def has_direct_edge(matrix, u, v): This function checks if there\'s a direct edge between vertices u and v in the matrix. :param matrix: The adjacency matrix representing the graph. :param u: Vertex u (1-based index). :param v: Vertex v (1-based index). :return: \'YES\' if there\'s a direct edge, \'NO\' otherwise. return \\"YES\\" if matrix[u-1][v-1] == 1 else \\"NO\\" def process_queries(T, test_cases): results = [] for i in range(T): N, Q, matrix, queries = test_cases[i] for u, v in queries: results.append(has_direct_edge(matrix, u, v)) return results"},{"question":"Given an m x n grid of characters representing a maze, your task is to determine if there is a valid path from the player\'s starting position \'S\' to an exit \'E\'. The maze contains walls represented by \'#\', free spaces represented by \'.\', and possibly some one-way doors represented by \'^\', \'v\', \'<\', \'>\', which indicate the direction you can go through them (up, down, left, right respectively). The player can\'t pass through walls. # Rules - The player can move up, down, left, or right into a free space or through a one-way door if the direction matches. - The player starts at \'S\' and needs to reach \'E\'. - Return `true` if a valid path exists from \'S\' to \'E\' and `false` otherwise. # Example Example 1 Input: grid = [[\\"#\\",\\"#\\",\\"#\\",\\"#\\",\\"#\\"], [\\"#\\",\\"S\\",\\".\\",\\".\\",\\"#\\"], [\\"#\\",\\".\\",\\"#\\",\\"E\\",\\"#\\"], [\\"#\\",\\".\\",\\"#\\",\\"#\\",\\"#\\"], [\\"#\\",\\"#\\",\\"#\\",\\"#\\",\\"#\\"]] Output: `true` Explanation: There is a valid path from \'S\' to \'E\'. Example 2 Input: grid = [[\\"#\\",\\"#\\",\\"#\\",\\"#\\",\\"#\\"], [\\"#\\",\\"S\\",\\".\\",\\"#\\",\\"#\\"], [\\"#\\",\\"^\\",\\"<#>\\",\\"#\\"], [\\"#\\",\\"#\\",\\"E\\",\\"#\\",\\"#\\"], [\\"#\\",\\"#\\",\\"#\\",\\"#\\",\\"#\\"]] Output: `false` Explanation: There is no valid path from \'S\' to \'E\'. Example 3 Input: grid = [[\\"#\\",\\"#\\",\\"#\\",\\"#\\",\\"#\\"], [\\"#\\",\\"S\\",\\".\\",\\"#\\",\\"#\\"], [\\"#\\",\\"v\\",\\".\\",\\"#\\",\\"#\\"], [\\"#\\",\\"^\\",\\".\\",\\"E\\",\\"#\\"], [\\"#\\",\\"#\\",\\"#\\",\\"#\\",\\"#\\"]] Output: `true` Explanation: There is a valid path from \'S\' to \'E\' through the one-way doors. # Constraints - 1 <= m, n <= 20 - grid contains only characters \'.\', \'#\', \'S\', \'E\', \'^\', \'v\', \'<\', \'>\'. - There will be exactly one \'S\' and one \'E\' in the grid.","solution":"def find_start_end_positions(grid): Find the positions of \'S\' and \'E\' in the grid. start = end = None for i, row in enumerate(grid): for j, char in enumerate(row): if char == \'S\': start = (i, j) elif char == \'E\': end = (i, j) return start, end def is_valid_move(grid, direction, r, c): Check if a move in the given direction is valid. m, n = len(grid), len(grid[0]) if direction == \'up\': if r > 0 and (grid[r-1][c] == \'.\' or grid[r-1][c] == \'E\' or grid[r-1][c] == \'v\'): return True elif direction == \'down\': if r < m-1 and (grid[r+1][c] == \'.\' or grid[r+1][c] == \'E\' or grid[r+1][c] == \'^\'): return True elif direction == \'left\': if c > 0 and (grid[r][c-1] == \'.\' or grid[r][c-1] == \'E\' or grid[r][c-1] == \'>\'): return True elif direction == \'right\': if c < n-1 and (grid[r][c+1] == \'.\' or grid[r][c+1] == \'E\' or grid[r][c+1] == \'<\'): return True return False def find_path(grid, start, end): Use DFS to find a path from \'S\' to \'E\'. stack = [start] visited = set() directions = [\'up\', \'down\', \'left\', \'right\'] while stack: r, c = stack.pop() if (r, c) == end: return True if (r, c) in visited: continue visited.add((r, c)) for direction in directions: if is_valid_move(grid, direction, r, c): if direction == \'up\': stack.append((r-1, c)) elif direction == \'down\': stack.append((r+1, c)) elif direction == \'left\': stack.append((r, c-1)) elif direction == \'right\': stack.append((r, c+1)) return False def is_valid_maze_path(grid): Determine if a valid path exists from \'S\' to \'E\' in the given grid. start, end = find_start_end_positions(grid) if not start or not end: return False return find_path(grid, start, end)"},{"question":"Implement a data structure capable of supporting the following operations: insert a number into a stream, remove a number from the stream, and get the median of the current list of numbers in the stream. You are required to implement two functions, `addNumber` and `findMedian`. - `addNumber(val)` will insert the number `val` into the stream. - `findMedian()` will return the median of all numbers in the current stream. Example 1: Input: operations = [\\"addNumber\\", \\"addNumber\\", \\"findMedian\\", \\"addNumber\\", \\"findMedian\\"] values = [1, 2, [], 3, []] Output: [null, null, 1.5, null, 2.0] Explanation: After adding 1 and 2, the stream is [1, 2] and the median is (1+2)/2 = 1.5 After adding 3, the stream is [1,2,3] and the median is 2. Example 2: Input: operations = [\\"addNumber\\", \\"addNumber\\", \\"findMedian\\", \\"addNumber\\", \\"findMedian\\"] values = [5, 10, [], 100, []] Output: [null, null, 7.5, null, 10] Explanation: After adding 5 and 10, the stream is [5, 10] and the median is (5+10)/2 = 7.5 After adding 100, the stream is [5, 10, 100] and the median is 10. Your task: You need to implement the `addNumber` method to add a number to the data stream and `findMedian` method to find the median of the current list of numbers. Expected Time Complexity: - `addNumber`: O(log n) where n is the number of elements in the stream - `findMedian`: O(1) Expected Auxiliary Space: O(n) Constraints: - All inputs will be valid. - Numbers in the stream are within the range [-10^6, 10^6]. - At most 10^5 calls will be made to addNumber and findMedian.","solution":"import heapq class MedianFinder: def __init__(self): Initialize the MedianFinder data structure. Two heaps are used: - max_heap: A max-heap to store the smaller half of the numbers. - min_heap: A min-heap to store the larger half of the numbers. self.max_heap = [] # max-heap self.min_heap = [] # min-heap def addNumber(self, val: int): # Add to max heap (invert sign to simulate max heap) heapq.heappush(self.max_heap, -val) # Balance the heaps if self.max_heap and self.min_heap and (-self.max_heap[0] > self.min_heap[0]): heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) # Ensure max_heap size is equal or 1 element more than min_heap if len(self.max_heap) > len(self.min_heap) + 1: heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) if len(self.min_heap) > len(self.max_heap): heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap)) def findMedian(self) -> float: # If the total number of elements is odd, median is the top of max heap if len(self.max_heap) > len(self.min_heap): return -self.max_heap[0] # If the total number of elements is even, median is the average of the tops of both heaps else: return (-self.max_heap[0] + self.min_heap[0]) / 2 # Example usage: # operations = [\\"addNumber\\", \\"addNumber\\", \\"findMedian\\", \\"addNumber\\", \\"findMedian\\"] # values = [1, 2, [], 3, []] # finder = MedianFinder() # output = [] # for op, val in zip(operations, values): # if op == \\"addNumber\\": # finder.addNumber(val[0]) # output.append(None) # elif op == \\"findMedian\\": # output.append(finder.findMedian()) # print(output) # [None, None, 1.5, None, 2.0]"},{"question":"There is a team that works on various projects, and each member has specific skills. Given a list of skills for each team member in the form of binary strings, determine the minimum number of team members required to complete a project that needs a certain set of skills. Each binary string represents the skills a team member has, where \'1\' means the skill is present, and \'0\' means it is not. Also, each project specifies the required skills in the form of a binary string. The output should be the minimum number of team members needed to cover all the required skills. Example: n=3 skills=[\'101\', \'110\', \'011\'] required=\'111\' Here: 101 110 011 are the skills possessed by the three team members. The project requires all skills as specified by 111. In this case, the minimum number of team members required are 2, as the team members with skills 110 and 011 together cover all the required skills (1st and 2nd matching \'110\', and 3rd matching \'011\'). Function Description Complete the `minTeamSize` function in the editor below. `minTeamSize` has the following parameter(s): string[] skills: a list of binary strings representing skills of each team member string required: a binary string representing required skills for the project Returns int: the minimum number of team members required to complete the project Input Format The first line contains an integer n, where n is the number of team members. Each of the next n lines contains a binary string of the same length representing the skills of each team member. The last line contains a binary string of the same length representing the required skills for the project. Constraints 2 leq n leq 50 1 ≤ length of each binary string ≤ 50 Sample Input 4 101 110 011 000 111 Sample Output 2 Explanation The project requires skills as represented by \'111\'. Assessing the combination of team members with the provided skills, the minimum team size that covers all these required skills is 2, using the team members with skills \'110\' and \'011\'.","solution":"from itertools import combinations def minTeamSize(skills, required): n = len(skills) req_bits = [i for i, bit in enumerate(required) if bit == \'1\'] def covered_by_team(team): covered = set() for member in team: for i in req_bits: if skills[member][i] == \'1\': covered.add(i) return covered for team_size in range(1, n+1): for team in combinations(range(n), team_size): if len(covered_by_team(team)) == len(req_bits): return team_size return -1 # In case no team is found, which shouldn\'t happen in a valid problem setup."},{"question":"You are developing a new feature for a social media application that analyzes a user\'s activity to determine their peak activity hours. The application collects the number of posts made by the user in each hour of the day over a given period. Given a list of 24 integers representing the number of posts made during each hour (starting from 0:00 to 23:00) over the given period, your task is to find the hour during which the user is most active, that is, when they have posted the most. If there are multiple such hours with the same maximum activity, return the earliest hour among them. Input The input consists of a single line containing 24 space-separated integers. Each integer represents the number of posts made during each chronological hour of the day. The integers are in the range of 0 to 10^6. Output Output a single integer representing the hour (0-23) when the user is most active. Examples Input 3 5 0 6 2 8 4 1 7 6 8 9 12 15 7 4 3 6 2 1 4 5 2 11 Output 13 Input 10 15 15 10 8 8 16 16 3 2 1 0 12 14 9 6 4 5 11 7 19 10 10 10 Output 20","solution":"def find_peak_activity_hour(posts): Returns the hour when the user is most active. If there are multiple hours with the same maximum activity, returns the earliest hour. Args: posts (list): List of 24 integers representing the number of posts in each hour. Returns: int: The hour when the user is most active. max_posts = max(posts) peak_hour = posts.index(max_posts) return peak_hour"},{"question":"Given an array of integers where each element represents the height of a building, write a function that returns the maximum area of a rectangle formed using contiguous buildings. Each building has a width of 1 unit. Function Description Complete the `getMaxRectangleArea` function in the editor below. It has the following parameter(s): - int heights[n]: an array of integers representing the heights of the buildings. Returns - int: the maximum area of a rectangle formed using contiguous buildings. Input Format The first line contains an integer n, the number of buildings. The second line contains n space-separated integers heights[i], the height of each building. Constraints - 1 le n le 10^5 - 1 le heights[i] le 10^4 Example Sample Input 0 7 2 1 5 6 2 3 1 Sample Output 0 10 Explanation 0 The maximum rectangle can be formed by taking the heights [5, 6], which gives a width of 2 units. Therefore, the maximum area is 5 times 2 = 10. Sample Input 1 4 4 3 2 1 Sample Output 1 6 Explanation 1 The maximum rectangle can be formed by taking the heights [4,3] which gives a width of 2 units or taking [3,2,1] which also gives a width of 3 units. However, the largest rectangle area is obtained from the heights [4,3] providing 3 times 2 = 6.","solution":"def getMaxRectangleArea(heights): Returns the maximum area of a rectangle formed using contiguous buildings. # Initialize a stack to store indices of the buildings stack = [] max_area = 0 index = 0 while index < len(heights): # If this building is higher than the building at stack top, push it to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top of the stack and calculate the area with the popped height top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar \'h\' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now pop the remaining buildings from the stack and calculate area with each popped building as the smallest bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Your task is to write a program that processes a list of commands to manage a collection of numbers and perform different types of queries on them: * add x: Add the number x to the collection. * delete x: Remove the number x from the collection if it exists. * query x: Check if the number x exists in the collection. Print \'found\' if it exists, otherwise print \'not found\'. * max: Print the largest number in the collection or \'empty\' if the collection is empty. * min: Print the smallest number in the collection or \'empty\' if the collection is empty. Constraints * The numbers are non-negative integers (0 ≤ x ≤ 1000000). * 1 ≤ number of commands ≤ 100000. Input The first line contains an integer n, the number of commands. Each of the following n lines contains a command in one of the formats specified above. Output For each query and min/max command, print the required output on a new line. Examples Input 10 add 5 add 10 query 5 query 7 max min delete 5 query 5 max min Output found not found 10 5 not found 10 10","solution":"def process_commands(n, commands): Processes a list of commands to manage a collection of numbers. Parameters: n (int): The number of commands. commands (list of str): The commands to be processed. Returns: list of str: The results of \'query\', \'max\', and \'min\' commands. collection = set() results = [] for command in commands: parts = command.split() action = parts[0] if action == \\"add\\": x = int(parts[1]) collection.add(x) elif action == \\"delete\\": x = int(parts[1]) collection.discard(x) elif action == \\"query\\": x = int(parts[1]) if x in collection: results.append(\\"found\\") else: results.append(\\"not found\\") elif action == \\"max\\": if collection: results.append(str(max(collection))) else: results.append(\\"empty\\") elif action == \\"min\\": if collection: results.append(str(min(collection))) else: results.append(\\"empty\\") return results"},{"question":"You are given a non-empty array of integers `a = [a_1, a_2, ..., a_n]`. Your goal is to determine the maximum product you can obtain by multiplying two different elements of the array. Note that the two elements must be different, and their order does not matter. For example: - For the array `a = [1, 2, 3, 4]`, the maximum product is `4 * 3 = 12`. - For the array `a = [-10, -3, 5, 6]`, the maximum product is `[-10 * -3 = 30`. You need to determine this maximum product. Input The first line contains an integer `t` (1 ≤ t ≤ 10^4) — the number of test cases in the input. Each of the next `t` lines contains an integer `n` (2 ≤ n ≤ 10^5) followed by `n` integers `a_1, a_2, ..., a_n`. Output For each test case, print the maximum product of two different elements in the array. Examples Input 3 4 1 2 3 4 4 1 1 1 1 3 -1 -2 -3 Output 12 1 6 Note In the first example, the possible pairs with their products are: - 1 * 2 = 2 - 1 * 3 = 3 - 1 * 4 = 4 - 2 * 3 = 6 - 2 * 4 = 8 - 3 * 4 = 12 The maximum product is 12. In the second example, all pairs give the same product of 1. In the third example, the possible pairs with their products are: - (-1) * (-2) = 2 - (-1) * (-3) = 3 - (-2) * (-3) = 6 The maximum product is 6.","solution":"def max_product_of_two(a): Determines the maximum product by multiplying two different elements in the array. # Sort the array a.sort() # Maximum product would be either: # 1. Product of the two largest numbers max1 = a[-1] * a[-2] # or # 2. Product of the two smallest numbers (could be large negative numbers) max2 = a[0] * a[1] return max(max1, max2) def process_input(t, test_cases): results = [] for n, a in test_cases: results.append(max_product_of_two(a)) return results"},{"question":"A company wants to analyze the performance of its employees over a period. Each employee\'s performance is logged daily with a certain score. The management wants to identify any consecutive days where the performance was consistently improving. Write a function that takes a list of integers representing daily performance scores and returns the number of such improving periods. A period is defined as any sequence of consecutive days where each day\'s score is higher than the previous day\'s score. Example 1: Input: [3, 4, 5, 2, 1, 3, 4, 5] Output: 4 Explanation: The improving periods are [3, 4], [3, 4, 5], [1, 3], and [3, 4, 5]. Hence, there are 4 such periods. Example 2: Input: [10, 20, 30, 5, 6, 1] Output: 4 Explanation: The improving periods are [10, 20], [10, 20, 30], [20, 30], and [5, 6]. Hence, there are 4 such periods. Example 3: Input: [8, 7, 6, 5] Output: 0 Explanation: There are no improving periods. Your Task: You need to complete the function `count_improving_periods(scores)` which takes a list of integers `scores` as input and returns the number of improving periods as an integer. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(scores) ≤ 10^5 0 ≤ scores[i] ≤ 10^5","solution":"def count_improving_periods(scores): n = len(scores) count = 0 length = 1 for i in range(1, n): if scores[i] > scores[i-1]: length += 1 count += (length - 1) else: length = 1 return count"},{"question":"A famous restaurant chain wants to optimize its delivery routes to ensure meals are delivered as quickly as possible. They provide a map of the city, which is composed of a number of intersections connected by streets. Each street has a certain length in meters. The problem is to determine the shortest possible delivery route from a starting intersection to a destination intersection, passing only once through each intersection (except possibly the starting and destination intersections, which may be the same). You are given a map of the city as a graph, where intersections are vertices and streets are edges with lengths (distances). Input The map is defined by several lines of integers in the following form: N E u1 v1 d1 u2 v2 d2 ... uE vE dE S D Where: - `N` is the number of intersections (labeled with numbers 1 through N). - `E` is the number of streets. - `u[i]` and `v[i]` are intersections connected by the i-th street, and `d[i]` is the length of the street between these intersections. - `S` is the starting intersection. - `D` is the destination intersection. The input ends with two zeroes `0 0`. There is at most one street between any pair of intersections, and each intersection can be connected by any number of streets. Output For each map, output the total length of the shortest delivery route, followed by a list of intersections on this route in the order they are visited. If no route exists, output `Impossible`. Examples # Input ``` 4 4 1 2 10 2 3 20 3 4 10 4 1 40 1 3 4 3 1 2 5 2 3 5 1 3 0 0 ``` # Output ``` 30 1 2 3 Impossible ``` In the first map, the shortest route from intersection 1 to intersection 3 is 1->2->3 with a total length of 30. In the second map, no route exists from intersection 4 to intersection 3.","solution":"import heapq def dijkstra(graph, start, end, n): pq = [(0, start)] distances = {vertex: float(\'infinity\') for vertex in range(1, n + 1)} distances[start] = 0 previous_nodes = {vertex: None for vertex in range(1, n + 1)} visited = set() while pq: current_distance, current_vertex = heapq.heappop(pq) if current_vertex in visited: continue visited.add(current_vertex) if current_vertex == end: break for neighbor, weight in graph[current_vertex].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance previous_nodes[neighbor] = current_vertex heapq.heappush(pq, (distance, neighbor)) if distances[end] == float(\'infinity\'): return \\"Impossible\\", [] path = [] current = end while current is not None: path.insert(0, current) current = previous_nodes[current] return distances[end], path def shortest_delivery_route(n, e, roads, start, end): graph = {i: {} for i in range(1, n + 1)} for u, v, d in roads: graph[u][v] = d graph[v][u] = d distance, path = dijkstra(graph, start, end, n) if distance == \\"Impossible\\": return distance else: return distance, path"},{"question":"In a game, there are N levels, and each level has a certain number of enemies. To pass from one level to the next, a player must defeat all enemies in that level. However, it is possible that the player has defeated some enemies earlier, making it easier to complete subsequent levels. Given the list of levels and the number of enemies remaining in each level, calculate the total number of enemies the player needs to defeat to complete all levels and win the game. ------ Input Format ------ - The first line contains a single integer N, representing the total number of levels. - The second line contains N space-separated integers representing the number of enemies in each level. ------ Output Format ------ Output in a single line, the total number of enemies the player needs to defeat to complete the game. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 0 ≤ enemies_i ≤ 100 ----- Sample Input 1 ------ 5 3 1 4 2 0 ----- Sample Output 1 ------ 10 ----- Explanation 1 ------ There are 5 levels with the enemies given as: 3, 1, 4, 2, 0. Hence, the total enemies the player needs to defeat is 3 + 1 + 4 + 2 + 0 = 10. ----- Sample Input 2 ------ 3 0 2 5 ----- Sample Output 2 ------ 7 ----- Explanation 2 ------ There are 3 levels with the enemies given as: 0, 2, 5. Hence, the total enemies the player needs to defeat is 0 + 2 + 5 = 7.","solution":"def total_enemies_to_defeat(N, enemies): Returns the total number of enemies the player needs to defeat to complete all levels. Parameters: N (int): Number of levels. enemies (list): List of integers representing the number of enemies in each level. return sum(enemies)"},{"question":"Riya is an aspiring fitness trainer and she loves creating workout plans for her clients. Each plan consists of multiple exercises, and she assigns calories burned for each exercise. She wants to optimize the workout plan such that the total calories burned is maximized without exceeding a given calorie limit C. However, there\'s a twist: once an exercise is chosen, it can be repeated as many times as possible without exceeding the calorie limit but each exercise must be performed at least once if chosen. Help Riya to determine the maximum calories that can be burned without exceeding the limit C. Input First line of the input contains an integer T denoting the number of test cases. Each test case consists of two parts: - The first line contains two integers N and C, where N is the number of exercises and C is the maximum calorie limit. - The second line contains N integers where the i-th integer represents the calories burned by the i-th exercise. Output For each test case, print one line containing the maximum calories that can be burned without exceeding the limit C. Constraints: 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^2 1 ≤ C ≤ 10^3 1 ≤ calories burned by each exercise ≤ 10^2 SAMPLE INPUT 2 4 10 1 8 4 3 3 6 2 5 3 SAMPLE OUTPUT 10 6 Explanation Sample Case 1: Given exercises burn 1, 8, 4, and 3 calories respectively. To maximize calories burned without exceeding the limit 10: - Choose exercise with 1 calorie and repeat it 10 times: 1 * 10 = 10 calories. - Choose exercise with 8 calories and perform it once (remaining calorie limit 2), and choose exercise with 1 calorie twice: 8 + 1 + 1 = 10 calories. Thus the maximum calories burned is 10. Sample Case 2: Given exercises burn 2, 5, and 3 calories respectively. To maximize calories burned without exceeding the limit 6: - Choose exercise with 3 calories and repeat it twice: 3 * 2 = 6 calories. Thus, the maximum calories burned is 6.","solution":"def max_calories_burned(test_cases): results = [] for N, C, calories in test_cases: dp = [0] * (C + 1) for i in range(1, C + 1): for cal in calories: if cal <= i: dp[i] = max(dp[i], dp[i - cal] + cal) results.append(dp[C]) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, C = map(int, lines[index].split()) calories = list(map(int, lines[index + 1].split())) test_cases.append((N, C, calories)) index += 2 return test_cases"},{"question":"You are given a list of non-negative integers representing the amount of rainwater each unit of ground in a line (specified by an array) can trap. The ground is uneven, and the amount of water trapped at a given unit of ground depends on the heights of the units of ground to the left and right of it. Compute the total amount of rainwater that can be trapped within the line after it rains. Input format: The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer n, the number of units of ground. - The second line contains n non-negative integers representing the height of each unit of ground. Output format: For each test case, output a single integer - the total amount of trapped rainwater. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 10^6 0 ≤ height of each unit ≤ 10^9 SAMPLE INPUT 2 6 0 1 0 2 1 0 1 3 2 1 2 1 4 4 2 0 3 2 5 SAMPLE OUTPUT 6 9 Explanation: In the first test case, the amount of water trapped at each index is as follows: - At index 0, 1, no water is trapped as there\'s no boundary to the left of it. - At index 2, 1 unit of water is trapped as it\'s bounded by 1 and 2. - At index 3, no water is trapped as it\'s at the peak. - At index 5 and 6, 1 unit of water each is trapped due to boundaries formed by higher heights. - Thus, total water trapped = 1 + 1 + 2 + 1 + 1 = 6 In the second test case, - At index 1, 2 units of water are trapped between 4 and 2. - At index 2, 3 units of water are trapped between 2 and 5. - Total trapped water = 2 + 3 + 4 = 9","solution":"def trap_rain_water(height): Calculates the total amount of rainwater trapped within the line after it rains. if not height or len(height) < 3: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - height[i] return trapped_water def process_test_cases(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] height = test_cases[i][1] result = trap_rain_water(height) results.append(result) return results"},{"question":"During a corporate hackathon event, it was decided to optimize the company\'s data backup processes. Each employee was allowed to request a backup at a specific time from the server, and each backup request took a fixed amount of time to complete. However, the server could only handle one backup request at a time. The objective was to minimize the idle time of the server by reorganizing the backup requests. Given a list of backup requests with their requested times, determine the sequence in which the requests should be processed to minimize the total wait time for all requests. The wait time for a request is the difference between the start time of the backup and the requested time. ----- Input ----- The first line contains an integer n (1 ≤ n ≤ 1000), the number of backup requests. Each of the following n lines contains two integers, t_i and d_i (1 ≤ t_i, d_i ≤ 10000), where t_i is the requested time of the i-th backup request and d_i is the duration of the i-th backup request. ----- Output ----- Output n lines, each containing two integers t_i and start_i, where start_i is the start time of the backup before processing it at the server such that the total wait time is minimized. ----- Examples ----- Input 3 1 2 2 2 3 2 Output 1 1 2 3 3 5","solution":"def optimize_backup_requests(n, requests): Returns the sequence of backup requests to minimize the total wait time. Each request is processed according to its order of requested time. :param n: number of backup requests :param requests: list of tuples (t_i, d_i) :return: list of tuples (t_i, start_i) # Sort requests by their requested time requests.sort(key=lambda x: x[0]) result = [] current_time = 0 for (t_i, d_i) in requests: # If the current time is less than requested time, we need to wait until requested time if current_time < t_i: current_time = t_i # Backup operation starts at current_time result.append((t_i, current_time)) # Update current_time by adding the duration of the current backup operation current_time += d_i return result"},{"question":"Task You are given an array of integers. Your task is to find the length of the longest contiguous subarray that consists of only even numbers. Write a function that finds the length of the longest contiguous subarray of even numbers in the given array. # Function Signature ```python def longest_even_subarray(arr: List[int]) -> int: ``` # Input - `arr`: A list of integers where `1 <= len(arr) <= 10000` # Output - Return an integer representing the length of the longest contiguous subarray of even numbers. # Example ```python arr = [1, 2, 4, 6, 3, 8, 10, 7] longest_even_subarray(arr) => 3 ``` In this example, the longest contiguous subarray of even numbers is `[2, 4, 6]`, hence the result is `3`. # Constraints - Time complexity should be O(n), where n is the length of the array. - Space complexity should be O(1).","solution":"from typing import List def longest_even_subarray(arr: List[int]) -> int: max_length = 0 current_length = 0 for num in arr: if num % 2 == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"A large company wants to conduct an internal survey to analyze the communication efficiency between different departments. The company has n departments numbered from 1 to n. Each department communicates directly with specific other departments, and this communication is bidirectional. The efficiency of communication between two departments is defined as the number of direct communications that must be traversed to get from one department to the other. The CEO wants to know the maximum communication efficiency (i.e., the longest shortest path between any two departments) within the company. If the departments form a single interconnected network (a tree) where information can travel between any two departments without needing to traverse the same communication more than once, then your task is to find out the longest distance information can travel between any two departments. Input The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of departments in the company. The next n - 1 lines contain two space-separated integers ai and bi (1 ≤ ai, bi ≤ n) representing a direct communication between department ai and department bi. Output Print a single integer — the maximum communication efficiency in the company. Examples Input 5 1 2 1 3 3 4 3 5 Output 3 Note Sample: The maximum communication efficiency in this case is 3, as the longest shortest path is from department 2 to department 4 or department 2 to department 5, traversing 3 direct communications. The tree structure is shown below: ``` 1 / 2 3 / 4 5 ``` The longest path in this tree is 2 - 1 - 3 - 4 or 2 - 1 - 3 - 5 which involves 3 direct communications.","solution":"import sys from collections import defaultdict, deque def find_furthest_node_and_distance(n, edges): # Create a graph using adjacency list graph = defaultdict(list) for a, b in edges: graph[a].append(b) graph[b].append(a) # Function to perform BFS and return the furthest node and its distance from the starting node def bfs(start): visited = [False] * (n + 1) queue = deque([(start, 0)]) visited[start] = True furthest_node, max_distance = start, 0 while queue: current, distance = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, distance + 1)) if distance + 1 > max_distance: furthest_node, max_distance = neighbor, distance + 1 return furthest_node, max_distance # Start from an arbitrary node (1), find the furthest node from it node1, _ = bfs(1) # Perform BFS again from node1 to find the maximum distance _, max_distance = bfs(node1) return max_distance def max_communication_efficiency(n, connections): return find_furthest_node_and_distance(n, connections) # Example usage: # n = 5 # connections = [(1, 2), (1, 3), (3, 4), (3, 5)] # print(max_communication_efficiency(n, connections)) # Output: 3"},{"question":"Aeropeak Company has been tracking their employee working hours over a period of several days. For each day, they have recorded the number of hours each employee has worked. However, they now want to determine the highest streak of consecutive days where a certain employee has worked more than a given threshold of hours. Write a program that takes in the number of days N as the first input and the threshold T as the second input. It then takes a list of N integers representing the hours worked by an employee each day. The program should determine the longest consecutive streak of days where the employee has worked more than T hours. If no such streak exists, the program should return zero. Input Format The first line contains two integers N and T. The second line contains N integers H(0), H(1), H(2),...., H(N-1) separated by space, where H(i) represents the number of hours worked by the employee on the i-th day. Output Format Print a single integer representing the longest streak of consecutive days the employee has worked more than T hours. Constraints 1 ≤ N ≤ 1000 1 ≤ H(i) ≤ 24 1 ≤ T ≤ 24 SAMPLE INPUT 10 5 6 3 8 4 5 7 9 10 2 3 SAMPLE OUTPUT 3","solution":"def longest_streak(N, T, hours): This function returns the longest streak of consecutive days where the employee has worked more than T hours. Parameters: N (int): Number of days T (int): Threshold of hours hours (list): List of integers representing hours worked each day Returns: int: Length of the longest streak of working more than T hours max_streak = 0 current_streak = 0 for hour in hours: if hour > T: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 0 return max_streak"},{"question":"Chris loves playing with numbers. One day, he decided to investigate interesting properties of integer sequences. He discovered that for a given sequence of integers, he could remove a variable number of elements to make the remaining sequence strictly increasing. Chris wants to know the minimum number of elements he needs to remove to achieve his goal. Your task is to help Chris by finding the minimum number of elements that need to be removed from the sequence to make it strictly increasing. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 1000), representing the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000), representing the elements of the sequence. -----Output----- Output a single integer, the minimum number of elements that need to be removed. -----Examples----- Input 7 3 7 5 2 6 4 9 Output 3 Input 5 1 2 3 4 5 Output 0 Input 6 6 5 4 3 2 1 Output 5 -----Note----- In the first test case, the sequence is initially 3, 7, 5, 2, 6, 4, 9. Removing the elements 5, 2, and 4, we can obtain the strictly increasing sequence 3, 7, 6, 9, which retains the property. In the second test case, the sequence is already strictly increasing, so no elements need to be removed. In the third test case, the sequence is strictly decreasing, so we must remove 5 elements to be left with a single increasing element.","solution":"def min_removals_for_increasing_sequence(n, sequence): Returns the minimum number of elements that need to be removed to make the given sequence strictly increasing. :param n: Length of the sequence :param sequence: List of integers representing the sequence :return: Minimum number of removals if n == 0: return 0 # Length of the longest increasing subsequence lis_length = [1] * n for i in range(1, n): for j in range(i): if sequence[i] > sequence[j]: lis_length[i] = max(lis_length[i], lis_length[j] + 1) max_lis_length = max(lis_length) return n - max_lis_length"},{"question":"In a kingdom far far away, there is a unique currency system comprising different denominations of ancient coins. The kingdom\'s treasurer has devised a plan to help citizens know how many ways they can make a specific amount using any combination of these coins. Given an array of integers representing the denominations of ancient coins and a target amount, write a program to determine the number of ways the target amount can be made using the available denominations. You can assume that there is an unlimited supply of each coin denomination. Constraints * 1 ≤ number of denominations ≤ 50 * 1 ≤ coin denomination values ≤ 100 * 1 ≤ target amount ≤ 10000 Input The input consists of multiple test cases. Each test case starts with an integer n, indicating the number of coin denominations. The next line contains n integers that represent the coin denominations. The final line contains a single integer representing the target amount. The input ends when n = 0. Output For each test case, output the number of ways to make the target amount using the given coin denominations. Example Input 3 1 2 3 4 2 5 10 15 0 Output 4 2","solution":"def count_ways_to_make_amount(n, denominations, target): Returns the number of ways to make the target amount using the given denominations. Parameters: n (int): The number of coin denominations. denominations (list of int): The coin denominations. target (int): The target amount. Returns: int: The number of ways to make the target amount. # Initialize a list to store the number of ways to make each amount dp = [0] * (target + 1) # There is exactly one way to make 0 amount: using no coins dp[0] = 1 # Iterate over each coin denomination for coin in denominations: for amount in range(coin, target + 1): dp[amount] += dp[amount - coin] return dp[target] def process_input(input_lines): index = 0 results = [] while index < len(input_lines): n = int(input_lines[index]) if n == 0: break denominations = list(map(int, input_lines[index + 1].split())) target = int(input_lines[index + 2]) result = count_ways_to_make_amount(n, denominations, target) results.append(result) index += 3 return results"},{"question":"Given two integers a and b, determine whether a is divisible by b. If a is divisible by b, print \\"divisible\\". Otherwise, print \\"not divisible\\". -----Constraints----- - a and b are integers. - b is not zero. -----Input----- The input is given from Standard Input in the following format: a b -----Output----- If a is divisible by b, print \\"divisible\\". Otherwise, print \\"not divisible\\". -----Sample Input----- 10 5 -----Sample Output----- divisible Since 10 is divisible by 5, print \\"divisible\\".","solution":"def check_divisibility(a, b): Determines whether a is divisible by b. if a % b == 0: return \\"divisible\\" else: return \\"not divisible\\""},{"question":"Write a program that determines if a given number is a palindrome after reversing its digits. A palindrome is a number that reads the same backward as forward. Your task is to write a program which reads an integer (more than or equal to zero), and prints \\"Yes\\" if the number is a palindrome and \\"No\\" otherwise. Input Input consists of several datasets. In the first line, the number of datasets N (1 ≤ N ≤ 50) is given. Each dataset consists of 1 line: The integer Output For each dataset, print \\"Yes\\" if the given integer is a palindrome, and \\"No\\" otherwise. Example Input 5 121 12321 123 1001 1221 Output Yes Yes No Yes Yes","solution":"def is_palindrome(num): Returns \'Yes\' if num is a palindrome, otherwise \'No\'. num_str = str(num) if num_str == num_str[::-1]: return \\"Yes\\" else: return \\"No\\" def check_palindromes(datasets): Accepts a list of integers and returns a list of \'Yes\' or \'No\' strings indicating whether each integer is a palindrome. results = [] for num in datasets: results.append(is_palindrome(num)) return results"},{"question":"Given an array of integers, you need to find the length of the longest subarray that forms a contiguous sequence. The contiguous sequence should not necessarily be sorted but must contain consecutive numbers with no duplicates. For example: ``` Input: [1, 9, 3, 10, 4, 20, 2] Output: 4 Explanation: The longest contiguous subarray is [1, 3, 4, 2] Input: [36, 41, 56, 35, 37, 34, 42, 33, 36, 39] Output: 5 Explanation: The longest contiguous subarray is [36, 35, 37, 34, 33] Input: [8, 20, 7, 30] Output: 2 Explanation: The longest contiguous subarray is [8, 7] ``` Write a function `longest_contiguous_subarray(arr)` that takes a list of integers and returns the length of the longest subarray that forms a contiguous sequence.","solution":"def longest_contiguous_subarray(arr): Returns the length of the longest subarray that forms a contiguous sequence. if not arr: return 0 num_set = set(arr) max_len = 0 for num in arr: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 max_len = max(max_len, current_streak) return max_len"},{"question":"Lara is a software engineer who enjoys working on various coding challenges. Recently, she came across a challenge involving sequences and she found it quite intriguing. The problem consists of dealing with a sequence of integers. The sequence has some interesting properties and specific operations that can be performed on it. Your task is to help Lara manipulate a sequence of integers according to given operations and return the maximum value after performing all the operations. The sequence is initially filled with zeros. -----Input----- The first line of the input contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) — the length of the sequence and the number of operations respectively. Next q lines contain descriptions of the operations. Each description is of the form: 1. `1 l r x` (1 ≤ l ≤ r ≤ n, -10^9 ≤ x ≤ 10^9) - add x to each element in the range from l to r (inclusive). 2. `2 l r y` (1 ≤ l ≤ r ≤ n, -10^9 ≤ y ≤ 10^9) - set each element in the range from l to r (inclusive) to y. -----Output----- Print a single integer — the maximum value in the sequence after performing all the operations. -----Examples----- Input 5 3 1 1 3 5 2 2 4 7 1 3 5 2 Output 9 Input 4 2 1 1 4 5 2 3 3 10 Output 10","solution":"def find_max_value_after_operations(n, q, operations): This function receives the length of the sequence, the number of operations, and a list of operations to perform on the sequence. It returns the maximum value in the sequence after performing all operations. sequence = [0] * n for op in operations: if op[0] == 1: _, l, r, x = op for i in range(l-1, r): sequence[i] += x elif op[0] == 2: _, l, r, y = op for i in range(l-1, r): sequence[i] = y return max(sequence)"},{"question":"Given an integer `N`, generate a sequence of numbers such that the next number in the sequence is the sum of the squares of the digits of the current number. Return the N-th number in this sequence starting with 1. Example 1: Input: N = 3 Output: 10 Explanation: Starting from 1, the sequence is 1 -> 1 -> 1 Example 2: Input: N = 5 Output: 4 Explanation: Starting from 1, the sequence is 1 -> 1 -> 1 -> 1 -> 1 Example 3: Input: N = 10 Output: 1 Explanation: Starting from 1, the sequence is 1 -> 1 -> 1 -> 1 -> 1 -> 1 -> 1 -> 1 -> 1 -> 1 Your Task: You don\'t need to read or print anything. Your task is to complete the function `findNthNumber()` which takes `N` as input parameter and returns the N-th number in the sequence. Expected Time Complexity: O(N * d) where d is the number of digits in the largest number encountered in the sequence. Expected Space Complexity: O(1) Constraints: 1 <= N <= 100","solution":"def sum_of_squares_of_digits(n): Returns the sum of the squares of the digits of \'n\'. return sum(int(digit) ** 2 for digit in str(n)) def findNthNumber(N): Returns the N-th number in the sequence starting with 1 where the next number in the sequence is the sum of the squares of the digits of the current number. current_number = 1 for _ in range(1, N): current_number = sum_of_squares_of_digits(current_number) return current_number"},{"question":"You are a botanist studying a garden with various types of flowers. Each type of flower blooms for a specific duration of days and blooms only once during the observation period. Given the blooming start day and duration of each flower type, determine if there is any overlap in the blooming periods of any two types of flowers. Input Format The first line contains an integer T (number of test cases). Each test case contains an integer F (number of flower types) in the first line. The next F lines each contain two integers S and D, where S is the start day of blooming and D is the duration of blooming for a particular type of flower. Output Format For each test case, output \\"Overlap\\" if any two flower types have overlapping blooming periods, otherwise, output \\"No Overlap\\". Constraints 1 <= T <= 100 2 <= F <= 100 1 <= S <= 365 1 <= D <= 365 Sample Input 2 3 1 10 11 5 16 3 2 5 10 10 5 Sample Output No Overlap Overlap Explanation In the first test case, the blooming periods for the three flowers are (1-10), (11-15), and (16-18), which do not overlap. In the second test case, the blooming periods for the two flowers are (5-14) and (10-14), which overlap.","solution":"def check_overlap(test_cases): results = [] for flowers in test_cases: intervals = [] overlap = False for s, d in flowers: start = s end = s + d - 1 for i_start, i_end in intervals: if not (end < i_start or start > i_end): overlap = True break if overlap: break intervals.append((start, end)) if overlap: results.append(\\"Overlap\\") else: results.append(\\"No Overlap\\") return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): F = int(lines[index]) flowers = [] index += 1 for _ in range(F): S, D = map(int, lines[index].split()) flowers.append((S, D)) index += 1 test_cases.append(flowers) return test_cases"},{"question":"Tanya has a collection of strings and she wants to find specific patterns. She owns a string s of length n, and she has q queries. Each query contains a string t, and Tanya needs to determine whether t is a subsequence of s. A subsequence is derived by deleting some or no elements of the string without changing the order of the remaining characters. Tanya needs your help to answer each query. Input The first line contains a string s of length n (1 ≤ n ≤ 105) containing only lowercase letters. The second line contains an integer q (1 ≤ q ≤ 104), the number of queries. The next q lines contain strings t1, t2, ..., tq (1 ≤ |ti| ≤ 105), which contain only lowercase letters. Output For each query, print \\"YES\\" if t is a subsequence of s, otherwise print \\"NO\\". Examples Input abcde 3 abc ace aec Output YES YES NO Input helloworld 2 hello worldd Output YES NO","solution":"def is_subsequence(s, t): Determine if string t is a subsequence of string s. :param s: The main string to be checked against (length <= 10^5) :param t: The string to check as a subsequence (length <= 10^5) :return: \\"YES\\" if t is a subsequence of s, otherwise \\"NO\\" it = iter(s) return \\"YES\\" if all(char in it for char in t) else \\"NO\\" def process_queries(s, queries): Process multiple queries to check if each string is a subsequence of the given string. :param s: The main string to be checked against :param queries: List of query strings to check as subsequences :return: List of results for each query return [is_subsequence(s, t) for t in queries]"},{"question":"A magical book is locked with a password containing exactly four distinct uppercase English letters. The wizard, Harry, must set the password by selecting four distinct letters from the entire alphabet and arranging them in any order. How many different passwords can he set this way? Constraints * The alphabet contains 26 uppercase English letters (A-Z). Input There is no input for this problem. Output Print the total number of different passwords Harry can set. Example Output 358800","solution":"import math def total_passwords(): Returns the total number of different passwords Harry can set using four distinct uppercase English letters. n = 26 k = 4 combinations = math.comb(n, k) permutations = math.perm(k) return combinations * permutations # Print the result print(total_passwords())"},{"question":"=====Problem Statement===== An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Your task is to detect whether two given strings are anagrams of each other or not. =====Example===== Example 1 >>> string1 = \\"listen\\" >>> string2 = \\"silent\\" The above two strings are anagrams because by rearranging \\"listen\\", we can get \\"silent\\". Example 2 >>> string1 = \\"hello\\" >>> string2 = \\"world\\" The above two strings are not anagrams because rearranging \\"hello\\" does not produce \\"world\\". =====Input Format===== The first line contains the first string, string1. The second line contains the second string, string2. =====Output Format===== Print \\"YES\\" if the two strings are anagrams, otherwise print \\"NO\\". =====Constraints===== - The strings only contain lower-case alphabets (a-z). - The length of the strings is at most 100 characters. =====Function Signature===== ```python def are_anagrams(string1: str, string2: str) -> str: # your code here pass ``` =====Examples===== Example 1: Input: ``` listen silent ``` Output: ``` YES ``` Example 2: Input: ``` hello world ``` Output: ``` NO ```","solution":"def are_anagrams(string1: str, string2: str) -> str: Determines if two strings are anagrams. Args: string1: A string consisting of lowercase letters. string2: A string consisting of lowercase letters. Returns: \'YES\' if string1 and string2 are anagrams, otherwise \'NO\'. # Sort both strings and compare them if sorted(string1) == sorted(string2): return \\"YES\\" else: return \\"NO\\""},{"question":"Given a string consisting of only lowercase alphabets, determine if it is a palindrome. A string is considered a palindrome if it reads the same forwards and backwards. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, a string S. ------ Output Format ------ For each test case, output in a single line \\"YES\\" if the string is a palindrome. Otherwise, print \\"NO\\". You may print each character of \\"YES\\" and \\"NO\\" in uppercase or lowercase (for example, \\"YeS\\", \\"YES\\", \\"yes\\" will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ len(S) ≤ 100 ------ Sample Input 1 ------ 3 madam hello deed ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Test Case 1: The string \\"madam\\" reads the same forwards and backwards, hence it is a palindrome. Test Case 2: The string \\"hello\\" does not read the same forwards and backwards, hence it is not a palindrome. Test Case 3: The string \\"deed\\" reads the same forwards and backwards, hence it is a palindrome.","solution":"def is_palindrome(s): Determines if the string `s` is a palindrome. Args: s (str): The input string. Returns: str: \\"YES\\" if `s` is a palindrome, otherwise \\"NO\\". return \\"YES\\" if s == s[::-1] else \\"NO\\" def process_test_cases(T, test_cases): Processes multiple test cases to check for palindromes. Args: T (int): Number of test cases. test_cases (list): List of strings to check. Returns: list: List of results for each test case, \\"YES\\" or \\"NO\\". results = [] for s in test_cases: results.append(is_palindrome(s)) return results"},{"question":"You are given a list of integers representing the heights of trees in a row. You can cut down any tree to reduce its height by certain units, but you cannot increase the height of any tree. A row of trees is called a \\"sawtooth pattern\\" if it strictly alternates between increasing and decreasing heights, i.e., if the heights at adjacent positions alternately increase and decrease (or vice versa). Your task is to determine if you can cut down the trees in the list to achieve a sawtooth pattern. Print \\"YES\\" if it is possible to cut down the trees to achieve the desired pattern, otherwise print \\"NO\\". -----Input----- The first line contains a single integer T (1 le T le 50) — the number of test cases. Then 2T lines follow — lines (2i - 1) and 2i describe the i-th test case. The first line of the pair contains a single integer n (2 le n le 100) — the number of trees. The second line contains n space-separated integers h_1, h_2, ..., h_n (1 le h_i le 10^9) representing the heights of the trees. -----Output----- Print T lines. The i-th line should contain the answer to the i-th test case. Print \\"YES\\" if it is possible to cut down the trees in the i-th test case to achieve a sawtooth pattern, otherwise print \\"NO\\". -----Example----- Input 3 5 3 1 4 1 5 4 1 2 3 4 3 10 20 10 Output YES NO YES -----Note----- For the first test case, you can observe the initial sequence of heights 3, 1, 4, 1, 5 can already be seen as alternating, hence it is a sawtooth pattern. For the second test case, the heights 1, 2, 3, 4 either need to be decreased or swapped to form a sawtooth pattern but it is not possible since you can only reduce heights. For the third test case, the heights 10, 20, 10 already form a sawtooth pattern.","solution":"def can_form_sawtooth_pattern(heights): n = len(heights) if n < 2: return False def check_pattern(direction): for i in range(1, n - 1): if direction: # Increase then decrease if heights[i - 1] >= heights[i] or heights[i] <= heights[i + 1]: return False else: # Decrease then increase if heights[i - 1] <= heights[i] or heights[i] >= heights[i + 1]: return False direction = not direction return True return check_pattern(True) or check_pattern(False) def sawtooth_patterns(T, test_cases): results = [] for i in range(T): n, heights = test_cases[i] if can_form_sawtooth_pattern(heights): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage T = 3 test_cases = [ (5, [3, 1, 4, 1, 5]), (4, [1, 2, 3, 4]), (3, [10, 20, 10]) ] print(sawtooth_patterns(T, test_cases))"},{"question":"Two friends, Anna and Beatrice, are exploring a grid game. Given a grid with rows and columns, they need to find a path from the top-left corner to the bottom-right corner. The rules of the game allow only moves to the right or downward cells. Each cell has a particular value, and the friends aim to maximize the sum of the values along their path. Given the grid, write a function to determine the maximum sum of values possible along any valid path from the top-left to the bottom-right corner. Function Description Complete the max_path_sum function in the editor below. max_path_sum has the following parameter(s): - int[][] grid: a 2D array of integers representing the grid Returns - int: the maximum sum of values possible along any valid path Input Format The first line contains two integers, m and n, representing the number of rows and columns in the grid, respectively. Each of the next m lines contains n integers, describing the values of the grid. Constraints 1 <= m, n <= 1000 1 <= grid[i][j] <= 1000 Sample Input 0 3 3 1 3 1 1 5 1 4 2 1 Sample Output 0 12 Explanation 0 The path with the maximum sum is 1 → 3 → 5 → 2 → 1, and the sum is 12. Sample Input 1 2 2 2 2 1 3 Sample Output 1 7 Explanation 1 The path with the maximum sum is 2 → 2 → 3, and the sum is 7.","solution":"def max_path_sum(grid): Returns the maximum sum of values possible along any valid path from the top-left to the bottom-right corner of the grid. Parameters: grid (list of list of int): 2D array representing the grid values Returns: int: maximum sum of values along any valid path if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Use dynamic programming to store the maximum path sums dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"A company gives a bonus to its employees based on their performance rating. Each employee\'s performance rating is stored in an array, where the i-th element represents the performance rating of the i-th employee. The company wants to calculate the total bonus that should be distributed, following these rules: - Every employee should receive at least 1 bonus point. - An employee with a higher performance rating than the employee immediately before or after them should receive more bonus points than those employees. Given an array of performance ratings, determine the minimum number of bonus points the company needs to distribute. Example 1: Input: ratings = [1,0,2] Output: 5 Explanation: You can allocate to the employees as follows: [2,1,2]. Example 2: Input: ratings = [1,2,2] Output: 4 Explanation: You can allocate to the employees as follows: [1,2,1]. Your Task: You do not need to read input or print anything. Your task is to complete the function minBonus() which takes ratings as input parameter and returns the minimum number of bonus points. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ ratings.length ≤ 10^5 0 ≤ ratings[i] ≤ 10^4","solution":"def minBonus(ratings): n = len(ratings) if n == 0: return 0 bonus = [1] * n for i in range(1, n): if ratings[i] > ratings[i - 1]: bonus[i] = bonus[i - 1] + 1 for i in range(n - 2, -1, -1): if ratings[i] > ratings[i + 1]: bonus[i] = max(bonus[i], bonus[i + 1] + 1) return sum(bonus)"},{"question":"You are given a list of devices, each with their respective on and off times. Each device needs to be periodically turned on and off, and the times given are in seconds. The goal is to write a program that calculates the overlap time during which any of the devices are on simultaneously. The times are represented in individual tuples where the first element is the turn-on time and the second element is the turn-off time. # Input Multiple datasets are given. Each dataset is given in the following format: n (t_on1, t_off1), (t_on2, t_off2), ..., (t_onn, t_offn) Where: - n (1 ≤ n ≤ 100) is an integer representing the number of devices. - Each (t_oni, t_offi) (0 ≤ t_oni < t_offi ≤ 10,000) is a pair of integers representing the on and off times of the ith device. # Output For each dataset, output the total overlap time during which all devices are on simultaneously. # Example Input 3 (1, 5), (2, 6), (4, 8) 2 (0, 4), (5, 10) 4 (1, 3), (2, 5), (6, 8), (7, 9) Output 1 0 0 # Explanation In the first dataset: - Device 1 is on from 1 to 5 - Device 2 is on from 2 to 6 - Device 3 is on from 4 to 8 Their simultaneous overlap time starts when the last device turns on and ends when the first device turns off, resulting in an overlap from 4 to 5, thus overlapping for 1 second. In the second dataset: - Device 1 is on from 0 to 4 - Device 2 is on from 5 to 10 There is no overlap period as one device turns off exactly when the other turns on. In the third dataset: - Device 1 is on from 1 to 3 - Device 2 is on from 2 to 5 - Device 3 is on from 6 to 8 - Device 4 is on from 7 to 9 There is no period where all devices overlap.","solution":"def calculate_overlap_time(device_times): Calculate the overlap time during which all devices are on simultaneously. Args: device_times: List of tuples, where each tuple consists of (turn_on_time, turn_off_time). Returns: Total overlap time during which all devices are on simultaneously. if not device_times: return 0 # Initial min_on_time is the maximum starting time min_on_time = max(device[0] for device in device_times) # Initial max_off_time is the minimum ending time max_off_time = min(device[1] for device in device_times) # Calculate the total overlap time overlap_time = max(0, max_off_time - min_on_time) return overlap_time"},{"question":"Mythical creatures are known to live high up in the clouds, and every sunrise they gather at specific, predefined points to bask in the first light. Each day\'s gathering involves creatures moving along straight paths towards their final positions by sunrise. These paths may intersect, and hence a clash may occur if two creatures occupy the same point at any time. Each creature starts at its unique starting point and flies towards its destination point along a straight line at a constant speed. Write a program to determine if any two creatures will meet at any time before reaching their respective destinations. Input The first line contains a single integer n (2 ≤ n ≤ 5000) representing the number of creatures. The subsequent n lines each contain six integers: x1 y1 z1 x2 y2 z2, where (x1, y1, z1) is the starting point and (x2, y2, z2) is the destination point of a creature. All starting and destination coordinates are distinct between any two creatures. Output Print \\"CLASH\\" if any pair of creatures will meet at some time before sunrise; otherwise, print \\"SAFE\\". Examples Input 3 0 0 0 10 0 0 0 0 0 5 5 0 0 0 0 0 10 10 Output CLASH Input 2 1 2 3 4 5 6 -1 -2 -3 4 -6 2 Output SAFE","solution":"def find_clash(n, creatures): from itertools import combinations import math def vector_subtract(a, b): return (a[0] - b[0], a[1] - b[1], a[2] - b[2]) def vector_add(a, b): return (a[0] + b[0], a[1] + b[1], a[2] + b[2]) def vector_scalar_multiply(v, s): return (v[0] * s, v[1] * s, v[2] * s) def vector_magnitude(v): return math.sqrt(v[0] ** 2 + v[1] ** 2 + v[2] ** 2) def normalized_direction(p1, p2): direction = vector_subtract(p2, p1) magnitude = vector_magnitude(direction) return (direction[0] / magnitude, direction[1] / magnitude, direction[2] / magnitude) if magnitude else (0, 0, 0) points = [(tuple(data[:3]), tuple(data[3:])) for data in creatures] for (a_start, a_end), (b_start, b_end) in combinations(points, 2): dir_a = normalized_direction(a_start, a_end) dir_b = normalized_direction(b_start, b_end) if dir_a == dir_b or dir_a == vector_scalar_multiply(dir_b, -1): # If they are moving in the same direction (or exactly opposite) distance_vector = vector_subtract(a_start, b_start) distance_along_direction = vector_magnitude(distance_vector) if distance_along_direction == 0 or (vector_magnitude(vector_subtract(a_end, b_end)) == 0): return \\"CLASH\\" else: # If their directions are different ta = [((b_start[i] - a_start[i]) / (a_end[i] - a_start[i])) if (a_end[i] != a_start[i]) else float(\'inf\') for i in range(3)] tb = [((a_start[i] - b_start[i]) / (b_end[i] - b_start[i])) if (b_end[i] != b_start[i]) else float(\'inf\') for i in range(3)] if all(ta[i] == tb[i] for i in range(3) if ta[i] != float(\'inf\') and tb[i] != float(\'inf\')): return \\"CLASH\\" return \\"SAFE\\""},{"question":"Eli has an array of positive integers. His goal is to make all elements in the array the same by performing the minimum number of operations. In one operation, he can increment or decrement any element of the array by 1. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains a single integer n (1 leq n leq 1000) — the number of elements in the array. The second line contains n positive integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. -----Output----- For each test case, output the minimum number of operations required to make all elements in the array the same. -----Examples----- Input 3 3 1 2 3 2 2 2 4 1 10 2 9 Output 2 0 16 -----Notes----- For the first test case, Eli can change the elements as follows: Change 1 to 2 (increment by 1) and change 3 to 2 (decrement by 1). This results in an array of [2, 2, 2], with a total of 2 operations. For the second test case, all the elements are already the same, so no operations are needed. For the third test case, Eli can change the elements as follows: Change 1 to 5 (increment by 4), change 10 to 5 (decrement by 5), change 2 to 5 (increment by 3), and change 9 to 5 (decrement by 4). This results in an array of [5, 5, 5, 5], with a total of 16 operations.","solution":"def minimum_operations_to_equal_elements(t, cases): Returns the minimum number of operations to make all elements in each array case the same. Parameters: t (int): number of test cases cases (list): list of tuples with the first element being the size of the array and the second element being the array itself. Returns: list: minimum number of operations for each test case results = [] for case in cases: n, array = case array.sort() median = array[n // 2] if n % 2 != 0 else array[(n // 2) - 1] operations = sum(abs(x - median) for x in array) results.append(operations) return results"},{"question":"Permutation Checker Problem Statement You are given two strings, s1 and s2. Your task is to determine if one string is a permutation of the other. Two strings are permutations if they consist of the same characters, but possibly in a different order. Input s1 s2 Input consists of a single line with two strings, s1 and s2 separated by a space. Constraints * s1 and s2 consist of only lowercase English letters. * The length of each string is between 1 and 10^5. Output Output `Yes` if one string is a permutation of the other, otherwise output `No`. Sample Input 1 abc bca Output for Sample Input 1 Yes Sample Input 2 hello olleh Output for Sample Input 2 Yes Sample Input 3 test tseta Output for Sample Input 3 No Example Input abc bca Output Yes","solution":"def are_permutations(s1, s2): Determines if one string is a permutation of the other. Args: s1 (str): The first string. s2 (str): The second string. Returns: str: \'Yes\' if s1 is a permutation of s2, otherwise \'No\'. if len(s1) != len(s2): return \\"No\\" from collections import Counter return \\"Yes\\" if Counter(s1) == Counter(s2) else \\"No\\""},{"question":"You are given two integers `n` and `k` where `n` represents the number of levels of a pyramid and `k` represents the number of bricks available. Each level `i` of the pyramid requires `i` bricks to build. Your task is to determine the maximum number of complete levels of the pyramid that can be constructed with the given `k` bricks. Function Signature: ```python def max_levels(n: int, k: int) -> int: # Your code here ``` Input - Two integers `n` (1 <= n <= 10^5) and `k` (1 <= k <= 10^9), representing the number of levels in the pyramid and the number of bricks available, respectively. Output - Return an integer representing the maximum number of complete pyramid levels that can be constructed with the given k bricks. Example Input: ```python n = 5 k = 15 ``` Output: ```python 5 ``` Input: ```python n = 5 k = 10 ``` Output: ```python 4 ``` Input: ```python n = 5 k = 5 ``` Output: ```python 2 ``` # Additional Notes: - Level 1 requires 1 brick, level 2 requires 2 bricks, and so on. - A complete level `i` requires exactly `i` bricks to be considered as fully constructed. - The goal is to maximize the number of completely constructed levels of the pyramid.","solution":"def max_levels(n: int, k: int) -> int: Determine the maximum number of complete levels of the pyramid that can be constructed with the given k bricks. Parameters: n (int): The number of levels that could potentially be built. k (int): The number of bricks available. Returns: int: The maximum number of complete levels that can be built with k bricks. total_bricks = 0 for i in range(1, n + 1): total_bricks += i if total_bricks > k: return i - 1 return n"},{"question":"Write a function `stock_buy_sell(prices)` that takes a list of integers as input, representing the price of a stock on different days. The function should compute the maximum profit that can be made by buying and then selling the stock on one of the subsequent days. If no profit can be made, the function should return 0. # Guidelines: 1. The function should return an integer representing the maximum profit. 2. You can assume that no prices are repeated. 3. Buying and selling must occur at different days. 4. The time complexity of the solution should be approximately O(n). # Examples: ```python stock_buy_sell([7, 1, 5, 3, 6, 4])==5 # Buy on day 2 (price=1) and sell on day 5 (price=6), profit = 6 - 1 = 5. stock_buy_sell([7, 6, 4, 3, 1])==0 # No transaction is done, profit = 0. stock_buy_sell([1, 4, 6, 2, 5, 7, 3])==6 # Buy on day 1 (price=1) and sell on day 6 (price=7), profit = 7 - 1 = 6. stock_buy_sell([2, 1, 2, 1, 2, 1, 2])==1 # Buy on day 2 (price=1) and sell on day 3 (price=2), profit = 2 - 1 = 1. ```","solution":"def stock_buy_sell(prices): Given a list of integers representing the price of a stock on different days, computes the maximum profit by buying and selling once. Returns 0 if no profit can be made. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"You are organizing a relay race event for your local community. Each team in the relay race consists of four runners. Each runner on a team has a specific leg of the race to complete, and the total race time for a team is the sum of the time taken by each runner in completing their respective leg. You want to find out which team has the fastest total race time. Each team starts at the same time, and the transition time between runners is negligible. -----Input----- The first line contains an integer T, the number of teams participating in the relay race. (1 leq T leq 1000). The next T lines each contain four integers t_1, t_2, t_3, t_4 representing the time taken by the four runners on the team to complete their respective legs. (1 leq t_i leq 1000). -----Output----- Output a single integer representing the team number with the fastest total race time. Teams are numbered starting from 1. If two or more teams have the same total race time, print the smallest team number among them. -----Examples----- Sample Input 1: 3 12 15 11 14 10 16 13 12 13 14 10 15 Sample Output 1: 2 Sample Input 2: 2 14 17 19 13 18 13 17 15 Sample Output 2: 1","solution":"def get_fastest_team(num_teams, times_list): Returns the team number with the fastest total race time. Parameters: num_teams (int): Number of teams times_list (list[list[int]]): List of lists where each inner list contains 4 integers representing the time taken by the runners of each team Returns: int: The team number with the fastest total race time min_time = float(\'inf\') fastest_team = 0 for i in range(num_teams): total_time = sum(times_list[i]) if total_time < min_time: min_time = total_time fastest_team = i + 1 return fastest_team"},{"question":"Alice loves collecting antique items. She has a collection of n items each identified by a unique integer id from 1 to n. Alice decided to share her collection with her friends by arranging exhibitions. Each exhibition should display exactly k items. To keep it interesting, no item should appear in more than one exhibition. Alice needs your help to determine the number of possible unique exhibitions that can be organized. Write a program to identify all possible exhibitions that can be organized. -----Input----- The first line contains two integers — n and k (1 ≤ k ≤ n ≤ 100). -----Output----- The output should contain the integer m — the number of unique exhibitions. This should be followed by m lines, each containing a sequence of k unique item ids. If no exhibitions can be arranged, print 0. -----Examples----- Input 5 2 Output 10 1 2 1 3 1 4 1 5 2 3 2 4 2 5 3 4 3 5 4 5","solution":"from itertools import combinations def exhibitions(n, k): Returns a list of all possible unique exhibitions that can be organized with k items from n items. if k > n: return 0, [] item_ids = list(range(1, n+1)) exhibits = list(combinations(item_ids, k)) return len(exhibits), exhibits # Example usage n, k = 5, 2 count, exhibitions_list = exhibitions(n, k) print(count) for exhibition in exhibitions_list: print(*exhibition)"},{"question":"Binary Tree Restoration Alex is given the task of restoring a binary tree from its in-order and pre-order traversals. As an expert coder, you have been asked to assist Alex in writing a program to reconstruct the binary tree from these traversals and then output the post-order traversal of the reconstructed tree. # Definitions: - **In-order traversal**: Traverse the left subtree, visit the root, and then traverse the right subtree. - **Pre-order traversal**: Visit the root, traverse the left subtree, and then traverse the right subtree. - **Post-order traversal**: Traverse the left subtree, traverse the right subtree, and then visit the root. # Task Given the in-order and pre-order traversals of the binary tree, create a program to find and print the post-order traversal of the tree. # Input 1. The first line contains an integer `N` (1 ≤ N ≤ 10^5), the number of nodes in the binary tree. 2. The second line contains `N` integers, representing the in-order traversal of the binary tree. 3. The third line contains `N` integers, representing the pre-order traversal of the binary tree. # Output Output a single line containing the post-order traversal of the binary tree. # Example Input ``` 5 4 2 5 1 3 1 2 4 5 3 ``` Output ``` 4 5 2 3 1 ``` # Explanation - In the given example, the in-order traversal of the binary tree is `[4, 2, 5, 1, 3]`. - The pre-order traversal is `[1, 2, 4, 5, 3]`. - From these traversals, we infer the structure of the binary tree and provide the post-order traversal, which is `[4, 5, 2, 3, 1]`. # Constraints All values in the binary tree nodes are unique and the input traversals are valid for a single binary tree. Your implementation should be efficient and able to handle the largest input size within reasonable time limits.","solution":"def build_tree(inorder, preorder): if not inorder or not preorder: return None root_val = preorder.pop(0) root_index = inorder.index(root_val) root = TreeNode(root_val) root.left = build_tree(inorder[:root_index], preorder) root.right = build_tree(inorder[root_index + 1:], preorder) return root def postorder_traversal(root, result): if root is None: return postorder_traversal(root.left, result) postorder_traversal(root.right, result) result.append(root.val) def restore_binary_tree(N, inorder, preorder): result = [] root = build_tree(inorder, preorder) postorder_traversal(root, result) return result class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None"},{"question":"Given an array of integers where each element appears exactly twice except for one element which appears only once, find the element that appears only once. Implement a function singleNumber(arr) that takes a list of integers as input and returns the integer that is unique. Example 1: Input: arr = [2, 2, 1] Output: 1 Explanation: Except 1, all other elements appear in pairs. Example 2: Input: arr = [4, 1, 2, 1, 2] Output: 4 Explanation: Except 4, all other elements appear in pairs. Your Task: You don\'t need to read input or print anything. Your task is to complete the function singleNumber() which takes a list of integers and returns the unique integer. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(arr) ≤ 10^5 -3 × 10^4 ≤ arr[i] ≤ 3 × 10^4","solution":"def singleNumber(arr): Returns the single unique number in the array where all others appear twice. unique = 0 for num in arr: unique ^= num return unique"},{"question":"Sandor Clegane is known for his strength, but he is not that good at planning. He needs to arrange a meeting of the leaders of Westeros. He has a list of integer times, and each leader will meet for one hour at a specified time. However, some meeting times overlap, which causes conflicts. Sandor wants your help to determine the minimum number of meeting rooms required to host all the meetings without any overlap. Example 1: Input: times = [[1, 4], [2, 5], [7, 9]] Output: 2 Explanation: The meetings [1, 4] and [2, 5] overlap, requiring 2 meeting rooms. The meeting [7, 9] does not overlap with any other meeting. Example 2: Input: times = [[6, 7], [2, 4], [8, 12]] Output: 1 Explanation: None of the meetings overlap, so only one room is needed. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function minMeetingRooms() that takes an array of intervals (times) representing the start and end times of meetings, and returns the minimum number of meeting rooms required. The driver code takes care of the printing. Expected Time Complexity: O(N*log(N)). Expected Auxiliary Space: O(N). Constraints: 1 ≤ times.length ≤ 10^5 1 ≤ times[i][0] < times[i][1] ≤ 10^5","solution":"def minMeetingRooms(times): if not times: return 0 # Extract start and end times into separate lists start_times = sorted([time[0] for time in times]) end_times = sorted([time[1] for time in times]) start_pointer = 0 end_pointer = 0 used_rooms = 0 # Iterate over meetings while start_pointer < len(times): # If there is a meeting that has ended by the time the current one starts if start_times[start_pointer] >= end_times[end_pointer]: used_rooms -= 1 end_pointer += 1 # We need a new room for the current meeting used_rooms += 1 start_pointer += 1 return used_rooms"},{"question":"You are given a list of N integers. An element in the list is considered a \\"peak\\" if it is greater than its neighbors to the left and right. The first and last elements of the list cannot be considered peaks because they don\'t have two neighbors each. Write a function that returns the number of peaks in the list. -----Constraints----- - 1 ≤ N ≤ 1000 - The elements of the list are integers between 1 and 10^9. -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 ... a_N -----Output----- Print a single integer, the number of peaks in the list. -----Sample Input----- 6 1 3 2 4 1 5 -----Sample Output----- 2 The peaks in the list are 3 and 4.","solution":"def count_peaks(N, arr): Returns the number of peaks in the list. Parameters: N (int): Number of elements in the list arr (list of int): List of elements Returns: int: Number of peaks in the list peak_count = 0 for i in range(1, N-1): if arr[i] > arr[i-1] and arr[i] > arr[i+1]: peak_count += 1 return peak_count"},{"question":"Write a function that takes an integer `N` as input and generates a sequence by starting with the number `N` and repeatedly applying the following steps: If the current number is even, divide it by 2; if the current number is odd, multiply it by 3 and add 1. Continue this process until the sequence reaches the integer 1. The challenge is to determine the maximum number in this sequence and the length of the sequence. INPUT: An integer N OUTPUT: Return a tuple (max_number, length_of_sequence) where max_number is the maximum number found in the sequence and length_of_sequence is the number of steps taken to reach 1. Example: Input: 7 Output: (52, 17) Explanation: Starting with 7, the sequence is: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 The maximum number in this sequence is 52 and it takes 17 steps to reach 1. def collatz_sequence_info(N): # Write your code here pass # Example usage: # print(collatz_sequence_info(7))","solution":"def collatz_sequence_info(N): Generates the Collatz sequence starting from N and returns the maximum number in the sequence and the length of the sequence. max_number = N length_of_sequence = 1 current_number = N while current_number != 1: if current_number % 2 == 0: current_number //= 2 else: current_number = 3 * current_number + 1 length_of_sequence += 1 max_number = max(max_number, current_number) return (max_number, length_of_sequence)"},{"question":"You are given an array of integers and a target integer. You need to find and return the indices of the two numbers in the array that add up to the target. Assume that each input would have exactly one solution, and you may not use the same element twice. Input Format The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. The third line contains an integer target, the target sum. Output Format Print the indices of the two numbers (0-indexed) in a single line separated by a space. Constraints 2 ≤ n ≤ 10^3 -10^9 ≤ array[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9 SAMPLE INPUT 4 2 7 11 15 9 SAMPLE OUTPUT 0 1","solution":"def two_sum(array, target): Finds the indices of the two numbers that add up to the target. :param array: List[int] -- The input array of integers. :param target: int -- The target sum. :return: List[int] -- Indices of the two numbers. hash_map = {} for index, num in enumerate(array): complement = target - num if complement in hash_map: return [hash_map[complement], index] hash_map[num] = index"},{"question":"Permutation to K-Distance Apart You are given a permutation of integers from 1 to n inclusive. Your task is to transform the given permutation into a new permutation where for every pair of elements (i, j), where i < j and j - i = k (k-distance apart), the value of the element at position j is strictly greater than the value of the element at position i. You need to find and print any possible permutation that meets the requirement. If it is not possible, print -1. # Input The first line contains two integers, n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ n-1) — the length of the permutation and the distance apart. The second line contains n integers, representing the permutation of integers from 1 to n. # Output Print n integers — any permutation that meets the requirement. If no such permutation exists, print -1. # Examples Example 1 # Input ``` 5 2 1 3 2 5 4 ``` # Output ``` 2 3 1 5 4 ``` Explanation: The resulting permutation [2, 3, 1, 5, 4] satisfies the condition for k = 2: - For the pairs (1, 3), (2, 5), and (3, 4), we have 3 > 1, 5 > 2, and 4 > 2. Example 2 # Input ``` 4 3 4 2 3 1 ``` # Output ``` -1 ``` Explanation: It is not possible to rearrange the permutation such that every pair of elements 3-distance apart satisfies the condition.","solution":"def transform_to_k_distance_apart(n, k, permutation): Transforms the given permutation into a new permutation where for every pair of elements (i, j), where i < j and j - i = k (k-distance apart), the value of the element at position j is strictly greater than the value of the element at position i. If it is not possible, returns -1. # Checking feasibility by ensuring there is enough distance to make the swaps or comparisons. if k >= n: return -1 # Try to construct a valid permutation for i in range(n - k): if permutation[i] > permutation[i + k]: return -1 # If initial permutation is already valid return it return permutation def parse_input(input_str): lines = input_str.strip().split(\'n\') n, k = map(int, lines[0].split()) permutation = list(map(int, lines[1].split())) return n, k, permutation def transform_to_k_distance_apart_from_input(input_str): n, k, permutation = parse_input(input_str) result = transform_to_k_distance_apart(n, k, permutation) if result == -1: return \'-1\' return \' \'.join(map(str, result))"},{"question":"In a celestial observatory, scientists record the position of stars in a two-dimensional Cartesian plane. Each star is represented by its (x, y) coordinate. To enhance their observation algorithm, they want to determine the closest star to a given reference point. Write a function that takes in a list of star coordinates and a reference point, then returns the coordinate of the closest star to the reference point. If there are multiple stars at the same minimum distance, return any one of them. The distance between two points (x1, y1) and (x2, y2) is defined as the Euclidean distance: distance = sqrt((x2 - x1)^2 + (y2 - y1)^2) Assume that there is at least one star in the list and the coordinates are given as integers. -----Input----- The first line contains two integers, x and y, representing the coordinates of the reference point. The second line contains an integer n (1 ≤ n ≤ 10^5), representing the number of stars. The following n lines each contain two integers xi and yi, representing the coordinates of the ith star. -----Output----- Output the coordinates of the closest star to the reference point in the format \\"xi yi\\". -----Examples----- Input 0 0 3 1 2 2 3 -1 4 Output 1 2 Input 3 4 2 5 1 1 7 Output 1 7 Input 10 10 5 8 9 12 12 10 13 15 10 10 20 Output 8 9","solution":"import math def find_closest_star(reference, stars): Finds the closest star to the reference point using Euclidean distance. :param reference: Tuple (x, y) representing the reference point coordinates. :param stars: List of tuples [(x1, y1), (x2, y2), ...] representing star coordinates. :return: Tuple (xi, yi) representing the coordinates of the closest star. def euclidean_distance(p1, p2): Calculates the Euclidean distance between two points. :param p1: Tuple (x1, y1) for the first point. :param p2: Tuple (x2, y2) for the second point. :return: Euclidean distance between p1 and p2. return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2) min_distance = float(\'inf\') closest_star = None for star in stars: distance = euclidean_distance(reference, star) if distance < min_distance: min_distance = distance closest_star = star return closest_star"},{"question":"You are given a list of integers. Determine whether you can rearrange the elements of the list to form a strictly increasing sequence. -----Constraints----- - 2 ≤ N ≤ 100, where N denotes the number of integers in the list. - Each integer in the list will be between -1000 and 1000 (inclusive). -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 ... a_N -----Output----- If you can rearrange the list to form a strictly increasing sequence, print possible; otherwise, print impossible. -----Sample Input----- 5 1 3 2 4 5 -----Sample Output----- possible -----Sample Input----- 4 5 5 3 4 -----Sample Output----- impossible","solution":"def can_form_strictly_increasing_sequence(arr): Determines whether the given list can be rearranged to form a strictly increasing sequence. Parameters: arr (list): A list of integers Returns: str: \'possible\' if the list can be rearranged to form a strictly increasing sequence, otherwise \'impossible\' arr_sorted = sorted(arr) for i in range(len(arr_sorted) - 1): if arr_sorted[i] >= arr_sorted[i + 1]: return \'impossible\' return \'possible\' # Handling the input as mentioned in the problem statement if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:])) print(can_form_strictly_increasing_sequence(arr))"},{"question":"In a serene village, there exists a network of N wells connected by underground water channels. Each well is designated by a unique number from 1 to N. Some of these wells are connected by channels, and the channels are bidirectional. The village head wants to guarantee that water can flow between all pairs of wells. Given the number of wells and the list of bidirectional channels, find the minimum number of channels that need to be added to make sure that every well can be reached from any other well. Example 1: Input: N = 5 channels = [[1, 2], [2, 3], [3, 4]] Output: 1 Explanation: The village head only needs to add one channel, such as [4, 5], to make sure every well is connected. Example 2: Input: N = 6 channels = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]] Output: 0 Explanation: Every well is already connected to every other well. Your Task: You do not need to read input or print anything. Complete the function minimumChannels() which takes the number of wells (N) and the list of channels as input parameters and returns the minimum number of channels that need to be added. Expected Time Complexity: O(N + M) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 0 ≤ M ≤ 10^5 1 ≤ wells, channels ≤ N","solution":"def minimumChannels(N, channels): Returns the minimum number of channels that need to be added to make sure that every well can be reached from any other well. def dfs(v, visited, adj): stack = [v] while stack: node = stack.pop() for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) adj = [[] for _ in range(N)] for u, v in channels: adj[u-1].append(v-1) adj[v-1].append(u-1) visited = [False] * N components = 0 for i in range(N): if not visited[i]: components += 1 visited[i] = True dfs(i, visited, adj) return max(0, components - 1)"},{"question":"In Joblandia, programmers often receive job offers from various companies. Each job offer specifies a start date and an end date, over which the job takes place. Frazzled by the abundance of options, you want to know the maximum number of job offers you can accept without overlapping any dates. You are given N job offers, each described by two integers: start and end (inclusive), where 0 leq start < end leq 1000000000. Some job offers can fully encompass others in terms of their duration. Your task is to determine the maximum number of non-overlapping job offers you can accept. -----Task----- Write a function to find the maximum number of non-overlapping job offers you can accept. -----Input----- - An integer N (1 leq N leq 1000000) – the number of job offers. - N pairs of integers (start, end) describing the job offers. -----Output----- - A single integer representing the maximum number of non-overlapping job offers you can accept. -----Examples----- Sample Input 1: 3 1 3 2 5 4 6 Sample Output 1: 2 Explanation: You can accept the job offers (1, 3) and (4, 6). Sample Input 2: 4 1 2 2 3 3 4 1 4 Sample Output 2: 3 Explanation: You can accept the job offers (1, 2), (2, 3), and (3, 4).","solution":"def max_non_overlapping_jobs(N, jobs): Returns the maximum number of non-overlapping job offers that can be accepted. Parameters: N (int): The number of job offers. jobs (list of tuple): A list of (start, end) tuples describing the job offers. Returns: int: Maximum number of non-overlapping job offers. # Sort jobs by their end time jobs.sort(key=lambda x: x[1]) # Track the count of non-overlapping jobs and the end time of the last added job count = 0 last_end_time = 0 for start, end in jobs: if start >= last_end_time: # Accept this job offer count += 1 last_end_time = end return count"},{"question":"An energy-efficient smart home has a unique way of controlling its lighting system to save electricity. The house is divided into multiple rooms, and each room has a central light switch that controls all the lights in that room. Each switch can be either turned ON or OFF. If the switch is turned ON, all lights in that room are on, otherwise they are off. Every night at midnight, a special control program runs to optimize the lighting system. The control program makes a certain number of toggles to the switches (changing them from ON to OFF or from OFF to ON) in a way that every room ends up with its lights turned OFF, except for one room that will remain with its lights turned ON for security reasons. You are given a binary string of length N where \'1\' represents that the switch in a room is ON and \'0\' represents that the switch in a room is OFF. You are also given an integer K which represents the maximum number of switch toggles the control program can make. Determine if it is possible to achieve the desired lighting condition under these constraints. Input - First line contains an integer N, the number of rooms. - Second line contains a binary string of length N representing the initial state of the switches. - Third line contains an integer K, the maximum number of switch toggles allowed. Output Print \\"YES\\" if it is possible to have exactly one switch ON and all other switches OFF within K toggles, otherwise print \\"NO\\". SAMPLE INPUT 5 11001 3 SAMPLE OUTPUT YES Explanation The initial state is: 11001 - Toggling the first switch: 01001 (1 toggle) - Toggling the second switch: 00001 (1 toggle, total 2 toggles) - No more toggles needed since one room is ON and others are OFF, and total toggles used is 2 which is ≤ K (3). SAMPLE INPUT 5 11001 1 SAMPLE OUTPUT NO Explanation Only 1 toggle is allowed, but the minimum required toggles to achieve the desired state is 2. Therefore, it is not possible.","solution":"def can_optimize_lighting(N, state, K): Determines if it is possible to have exactly one switch ON and all other switches OFF within K toggles. Parameters: N (int): Number of rooms. state (str): Binary string representing the initial state of the switches. K (int): Maximum number of allowed toggles. Returns: str: \\"YES\\" if possible, \\"NO\\" otherwise. # Count the number of switches that are ON initial_on_count = state.count(\'1\') # If there are no switches ON initially, it\'s impossible to get exactly one ON if initial_on_count == 0: return \\"NO\\" # If we already have exactly one switch ON, no toggles are needed if initial_on_count == 1: return \\"YES\\" # Calculate the number of toggles needed to achieve the desired state # We need to turn off (initial_on_count - 1) switches that are currently ON # And turn on (1 - current_on_count) switches that are currently OFF # Number of toggles required is initial_on_count - 1 (since we need exactly one switch ON) required_toggles = initial_on_count - 1 # Check if the required toggles are within the allowed limit if required_toggles <= K: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of integers representing the daily temperatures of a city. Your task is to find out, for each day, how many days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, put 0 in that position. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of days. The second line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 10^3) representing the daily temperatures. Output Output a single line containing n integers, where the ith integer is the number of days you have to wait until a warmer temperature for day i, or 0 if there is no future day with a warmer temperature. Example Input 7 73 74 75 71 69 72 76 Output 1 1 4 2 1 1 0 Input 5 30 40 50 60 70 Output 1 1 1 1 0 Explanation In the first example, for the first day (temperature 73), the next day (temperature 74) is warmer, so you wait 1 day. For the second day (temperature 74), the next day (temperature 75) is warmer, so you wait 1 day again. For the third day (temperature 75), the fourth, fifth, and sixth days (temperatures 71, 69, and 72 respectively) are cooler, but the seventh day (temperature 76) is warmer, so you wait 4 days. For the fifth day (temperature 69), the next day (temperature 72) is warmer, so you wait 2 days. And similarly, the rest of the calculations.","solution":"def daily_temperatures(temperatures): For each day, calculate the number of days you have to wait for a warmer temperature. n = len(temperatures) answer = [0] * n stack = [] # Stack to keep track of days for today in range(n): while stack and temperatures[today] > temperatures[stack[-1]]: prev_day = stack.pop() answer[prev_day] = today - prev_day stack.append(today) return answer"},{"question":"Troublesome Tribbles were discovered on the Starship Enterprise. Captain Kirk wants to keep track of their population growth. The population of Tribbles on the ship can be modeled as a Fibonacci-like sequence. Formally, the population of Tribbles on day `n` can be described as follows: - Population on day 1 (P1) is a; - Population on day 2 (P2) is b; - Population on day `i` (Pi) for `i > 2` is the sum of the population on the previous two days, i.e., Pi = P{i-1} + P{i-2} Captain Kirk has a special device that can make Tribbles reproduce faster or slower. The device can change the population of the Tribbles on a given day to any new value. You need to process `q` operations on the population: 1. Update population on a specific day. 2. Query population on a specific day. Input The first line contains three integers `a`, `b`, and `q` (1 ≤ a, b ≤ 10^9, 1 ≤ q ≤ 2*10^5) — the initial populations on the first and second days, and the number of queries, respectively. Each of the next `q` lines contains a query of one of two types: - \\"1 i x\\" (1 ≤ i ≤ 2*10^5, 1 ≤ x ≤ 10^9) — change the population on day `i` to `x`. - \\"2 i\\" (1 ≤ i ≤ 2*10^5) — output the population on day `i`. Output For each query of the second type, print the population on the corresponding day. Example Input 3 5 5 2 5 1 3 8 2 3 1 4 13 2 4 Output 8 13 Note Initially the population sequence is: Day 1: 3 Day 2: 5 Day 3: 8 (3 + 5) Day 4: 13 (5 + 8) Day 5: 21 (8 + 13) and so on... The first query asks for the population on day 5, which is 21. The second query updates the population on day 3 to 8. The next query asks for the population on day 3, which is now 8. The fourth query updates the population on day 4 to 13. The last query asks for the population on day 4, which is now 13.","solution":"def tribble_population(a, b, queries): Process the given queries on the population of tribbles and return the results for query type 2. Parameters: a (int): Population on day 1. b (int): Population on day 2. queries (list of tuple): List of queries where each query is a tuple (type, i, x) or (type, i). Returns: list of int: List of results for the queries of type 2. population = {1: a, 2: b} results = [] def compute_population(day): if day in population: return population[day] population[day] = compute_population(day - 1) + compute_population(day - 2) return population[day] for query in queries: if query[0] == 1: # Update the population on day query[1] to query[2] population[query[1]] = query[2] elif query[0] == 2: # Output the population on day query[1] results.append(compute_population(query[1])) return results"},{"question":"Given an array of integers, design a function `maxSubarrayXOR` to find the maximum XOR of any subsequence in the array. # Input - The first line contains an integer n (1 ≤ n ≤ 10^5) - the length of the array. - The second line contains n space-separated integers a_i (0 ≤ a_i ≤ 10^9) - the elements of the array. # Output - Print a single integer, the maximum XOR of any subsequence. # Example Input ``` 3 9 8 5 ``` Output ``` 13 ``` Input ``` 4 1 2 3 4 ``` Output ``` 7 ``` # Explanation For the first example: - The subsequences are [9], [8], [5], [9, 8], [9, 5], [8, 5], [9, 8, 5]. - The maximum XOR value among these subsequences is 13, which is obtained from the subsequence [9, 5] (since 9 XOR 5 = 13). For the second example: - The maximum XOR value among the subsequences is 7, which is obtained from the subsequence [3, 4] (since 3 XOR 4 = 7). # Notes - The answer will always fit within the limits of a 32-bit integer.","solution":"def maxSubarrayXOR(arr): Function to find the maximum XOR of any subsequence in the array. Args: arr (list): list of integers Returns: int: maximum XOR of any subsequence INT_BITS = 32 n = len(arr) index = 0 for i in range(INT_BITS-1, -1, -1): maxInd = index maxEle = -float(\'inf\') for j in range(index, n): if (arr[j] & (1 << i)) != 0 and arr[j] > maxEle: maxEle = arr[j] maxInd = j if maxEle == -float(\'inf\'): continue arr[index], arr[maxInd] = arr[maxInd], arr[index] maxInd = index for j in range(n): if j != maxInd and (arr[j] & (1 << i)) != 0: arr[j] = arr[j] ^ arr[maxInd] index += 1 result = 0 for i in range(n): result ^= arr[i] return result"},{"question":"Implement a function to determine if a given string is a palindrome, considering only alphanumeric characters and ignoring cases. For the purpose of this task, define an alphanumeric character as one that appears in the configuration \\"[a-zA-Z0-9]\\". e.g. \\"A man, a plan, a canal: Panama\\" --> True \\"race a car\\" --> False ```if:csharp Documentation: Kata.IsPalindrome Method (String) Checks if a string is a palindrome, considering only alphanumeric characters and ignoring case differences. Syntax public static bool IsPalindrome( string str ) Parameters str Type: System.String The string to be checked. Return Value Type: System.Boolean True if the input string is a palindrome, otherwise False. Exceptions Exception Condition ArgumentNullException str is null. ```","solution":"def is_palindrome(s): Determines if a given string is a palindrome, considering only alphanumeric characters and ignoring cases. def is_alphanumeric(c): return c.isalnum() filtered_chars = [char.lower() for char in s if is_alphanumeric(char)] return filtered_chars == filtered_chars[::-1]"},{"question":"A group of friends has a peculiar way of exchanging gifts. Each person in the group has exactly one gift, and they want to exchange them in such a way that everyone ends up with a different gift than the one they initially had. The group leader wants to know how many possible ways there are for the group to exchange gifts so that no one receives their own gift back. This problem can be solved using the concept of derangements. A derangement is a permutation of elements such that no element appears in its original position. Write a function `count_derangements` to calculate the number of derangements for a given number of people. # Function Signature ```python def count_derangements(n: int) -> int: pass ``` # Input - An integer `n` (1 ≤ n ≤ 20), the number of people in the group. # Output - An integer, representing the number of possible derangements. # Example ```python print(count_derangements(3)) # Output: 2 ``` # Explanation For `n = 3`: - The possible derangements (permutations where no one gets their original gifts) are [2, 3, 1] and [3, 1, 2]. - Therefore, the function should return 2. # Additional Information - The problem can be solved using a recursive approach or dynamic programming. - Using precomputed values of factorials and reusing results via memoization can optimize the solution.","solution":"def count_derangements(n: int) -> int: Returns the number of derangements (permutations where no element appears in its original position) for n items. if n == 0: return 1 # By definition, there\'s 1 way to derange 0 items. if n == 1: return 0 # No way to derange 1 item. if n == 2: return 1 # Only 1 possible derangement: (2, 1) # Use a list to store the results for intermediate values derangements = [0] * (n + 1) derangements[0] = 1 derangements[1] = 0 derangements[2] = 1 for i in range(3, n + 1): derangements[i] = (i - 1) * (derangements[i - 1] + derangements[i - 2]) return derangements[n]"},{"question":"Design a system that processes commands to manage a list of integers efficiently. The list will support the following types of operations: 1. `sum l r` — Compute the sum of the elements in the list from index `l` to `r` (inclusive). 2. `min l r` — Find the minimum element in the list from index `l` to `r` (inclusive). 3. `update i x` — Update the element at index `i` to `x`. 4. `multiply l r x` — Multiply each element in the list from index `l` to `r` (inclusive) by `x`. Your task is to implement this system such that each operation is executed efficiently. ----- Input ----- The first line of the input contains an integer `N`, the number of elements in the list. The second line contains `N` space-separated integers representing the initial elements of the list. The third line contains an integer `Q`, the number of queries to be performed. The following `Q` lines describe the operations. Each line starts with the operation type followed by the appropriate number of parameters: - For operation type `sum` or `min`, the line will be in the format: `operation l r` - For operation type `update`, the line will be in the format: `operation i x` - For operation type `multiply`, the line will be in the format: `operation l r x` The indices `l`, `r`, and `i` are 1-based. ----- Output ----- For each `sum` or `min` query, print the result on a new line. ----- Constraints ----- 1 ≤ N, Q ≤ 100000 1 ≤ elements of the list ≤ 10^9 1 ≤ l ≤ r ≤ N 1 ≤ i ≤ N 1 ≤ x ≤ 1000 ----- Sample Input 1 ----- 5 1 2 3 4 5 7 sum 1 3 min 2 4 update 3 10 sum 1 3 multiply 2 4 2 min 1 5 sum 3 5 ----- Sample Output 1 ----- 6 2 13 1 35 ----- Explanation 1 ----- Initially, the list is [1, 2, 3, 4, 5]. - For the first query `sum 1 3`, the sum of elements from index 1 to 3 is `1 + 2 + 3 = 6`. - For the second query `min 2 4`, the minimum value of elements from index 2 to 4 is `min(2, 3, 4) = 2`. - For the third query `update 3 10`, the list becomes [1, 2, 10, 4, 5]. - For the fourth query `sum 1 3`, the sum of elements from index 1 to 3 is `1 + 2 + 10 = 13`. - For the fifth query `multiply 2 4 2`, the new list becomes [1, 4, 20, 8, 5] (since elements at indices 2, 3, 4 are multiplied by 2). - For the sixth query `min 1 5`, the minimum value of the whole list is `min(1, 4, 20, 8, 5) = 1`. - For the seventh query `sum 3 5`, the sum of elements from index 3 to 5 is `20 + 8 + 5 = 33`. Note that all index ranges are inclusive and 1-based.","solution":"class EfficientList: def __init__(self, values): self.values = values def sum(self, l, r): return sum(self.values[l-1:r]) def min(self, l, r): return min(self.values[l-1:r]) def update(self, i, x): self.values[i-1] = x def multiply(self, l, r, x): for idx in range(l-1, r): self.values[idx] *= x def process_commands(N, elements, Q, commands): e_list = EfficientList(elements) results = [] for command in commands: parts = command.split() operation = parts[0] if operation == \\"sum\\": l, r = int(parts[1]), int(parts[2]) results.append(e_list.sum(l, r)) elif operation == \\"min\\": l, r = int(parts[1]), int(parts[2]) results.append(e_list.min(l, r)) elif operation == \\"update\\": i, x = int(parts[1]), int(parts[2]) e_list.update(i, x) elif operation == \\"multiply\\": l, r, x = int(parts[1]), int(parts[2]), int(parts[3]) e_list.multiply(l, r, x) return results # Example usage: # N = 5 # elements = [1, 2, 3, 4, 5] # Q = 7 # commands = [ # \\"sum 1 3\\", # \\"min 2 4\\", # \\"update 3 10\\", # \\"sum 1 3\\", # \\"multiply 2 4 2\\", # \\"min 1 5\\", # \\"sum 3 5\\" # ] # # print(process_commands(N, elements, Q, commands))"},{"question":"Given an undirected graph represented as an adjacency matrix, determine if the graph contains a cycle. Return \\"Yes\\" if a cycle exists and \\"No\\" if it does not. Constraints * 1 leq n leq 1,000 Input - The first line contains an integer n denoting the number of vertices in the graph. - The next n lines each contain n integers, each either 0 or 1. If the jth integer in the ith line is 1, there is an edge between vertex i and vertex j; otherwise, there is no edge. It is guaranteed that there are no self-loops and no multiple edges between the same pair of vertices. The graph can be represented as an adjacency matrix, where the entry (i, j) is 1 if there is an edge between vertices i and j, and 0 otherwise. Output - Print \\"Yes\\" if there is a cycle in the graph. - Print \\"No\\" otherwise. Example Input 5 0 1 0 0 1 1 0 1 1 0 0 1 0 1 0 0 1 1 0 0 1 0 0 0 0 Output Yes Input 3 0 1 0 1 0 1 0 1 0 Output No","solution":"def has_cycle(n, adjacency_matrix): Determines if the undirected graph contains a cycle. Parameters: n (int): number of vertices in the graph. adjacency_matrix (list of list of int): The adjacency matrix of the graph. Returns: str: \\"Yes\\" if the graph contains a cycle, \\"No\\" otherwise. visited = [False] * n def dfs(v, parent): visited[v] = True for neigh in range(n): if adjacency_matrix[v][neigh] == 1: if not visited[neigh]: if dfs(neigh, v): return True elif neigh != parent: return True return False for i in range(n): if not visited[i]: if dfs(i, -1): return \\"Yes\\" return \\"No\\""},{"question":"Given an array of integers, determine the first non-repeating integer in the array. Return that integer if there is one or \\"None\\" if there is no such integer. Function Description Complete the firstNonRepeating function in the editor below. It should return the first non-repeating integer in the array or \\"None\\" if there is no non-repeating integer. firstNonRepeating has the following parameter(s): - arr: an array of integers Input Format The first line contains an integer t, the number of test cases. Each of the next t lines contains a sequence of integers representing the array. Constraints 1 leq t leq 10 1 leq text{array length} leq 1000 -10^9 leq text{integer in array} leq 10^9 Output Format Print the first non-repeating integer for each test case on a separate line, or \\"None\\" if there is no non-repeating integer. Sample Input 2 4 5 1 2 2 1 3 4 3 3 4 4 5 Sample Output 5 5 Explanation In the first test case, the first non-repeating integer is 5. In the second test case, the first non-repeating integer is 5.","solution":"def firstNonRepeating(arr): Returns the first non-repeating integer in the array or \\"None\\" if there is no non-repeating integer. count = {} for num in arr: if num in count: count[num] += 1 else: count[num] = 1 for num in arr: if count[num] == 1: return num return \\"None\\""},{"question":"You are given an array of ( n ) integers which represents the amount of strength required to defeat ( n ) different warriors standing in a line. Each warrior, when defeated, passes on a portion of their remaining strength to the next warrior in line, reducing the next warrior\'s strength accordingly. Specifically, if the remaining strength of a defeated warrior exceeds a certain threshold, it will be transferred to the next, reducing the strength of the next warrior accordingly. Your task is to calculate the minimum initial strength you need to defeat all the warriors in the given order. You are given the following rules: 1. You can only face one warrior at a time, starting with the first warrior. 2. If you face a warrior with ( s_i ) strength, and your initial strength is ( x ), you will use up exactly ( s_i ) of your strength to defeat the warrior. 3. If you have ( r ) remaining strength after defeating a warrior, where ( r = initial_strength - s_i ), and ( r ) is greater than a threshold ( t_i ), then the next warrior\'s strength ( s_{i+1} ) is reduced by ( r - t_i ). Your goal is to determine the minimum initial strength ( x ) required to defeat all the warriors, if possible. -----Input----- The first line contains one integer ( T ) ((1 leq T leq 100)) — the number of test cases. Each test case begins with a line containing one integer ( n ) ((1 leq n leq 100000)) — the number of warriors. Then ( n ) lines follow, each containing two integers ( s_i ) and ( t_i ) ((1 leq s_i, t_i leq 10^9)) — the strength of the (i)-th warrior and the threshold strength passed to the next warrior respectively. It is guaranteed that the total number of warriors in all test cases does not exceed ( 1000000 ). -----Output----- For each test case, print one integer — the minimum initial strength you need to defeat all of the warriors in the given order. -----Examples----- Input 2 3 10 5 6 3 8 1 2 12 5 7 2 Output 10 12 Note: In the first case, the minimum initial strength would need to be 10 to accommodate for the first warrior and the passing strength thereafter: - Defeat the first warrior with a strength of 10. - No remaining strength to pass to the next warrior. In the second case, similarly, the minimum initial strength would be directly the highest value due to no returns lowering others under the threshold.","solution":"def minimum_initial_strength(test_cases): results = [] for case in test_cases: n = case[0] warriors = case[1] min_strength = max(warrior[0] for warrior in warriors) # Initialize hypothetical scenario with min_strength strength_required = min_strength for strength, threshold in warriors: initial_strength = max(min_strength, strength) remaining_strength = initial_strength - strength if remaining_strength > threshold: next_warrior_strength = warriors.index((strength, threshold)) + 1 if next_warrior_strength < n: warriors[next_warrior_strength] = ( max(0, warriors[next_warrior_strength][0] - (remaining_strength - threshold)), warriors[next_warrior_strength][1] ) results.append(strength_required) return results # Parsing input and calling the function def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) cases = [] index = 1 for _ in range(T): n = int(lines[index]) warriors = [] index += 1 for _ in range(n): s, t = map(int, lines[index].split()) warriors.append((s, t)) index += 1 cases.append((n, warriors)) return T, cases def main(input_data): T, cases = parse_input(input_data) results = minimum_initial_strength(cases) for result in results: print(result)"},{"question":"The kingdom of XYZ is organizing a tournament. There are `n` participants, each identified by some unique name consisting of lowercase English letters. Each participant has to compete in exactly one round. Each round consists of exactly two participants, and the one with the lexicographically smaller name wins the round. You are given the names of the participants. Your task is to find out how many rounds are needed to determine the ultimate tournament winner and who will be the winner. Input The first line contains a single integer `n` (2 ≤ n ≤ 10^5) — the number of participants. The next `n` lines contain the names of the participants, one per line. Each name is non-empty and contains only lowercase English letters. The names are unique. Output Print a single integer — the number of rounds required to determine the winner followed by the winner\'s name on a new line. Examples Input 4 alice bob charlie david Output 2 alice Input 8 hermione ron harry draco luna neville severus ginny Output 3 draco Note In the first example, the tournament will proceed as follows: - First round: (alice vs bob) -> alice wins - First round: (charlie vs david) -> charlie wins In the second round: - Second round: (alice vs charlie) -> alice wins Hence, it takes 2 rounds and alice becomes the tournament winner. In the second example, the rounds would proceed along similar elimination rounds until draco, who is lexicographically smallest, remains as the winner after 3 rounds.","solution":"def tournament_winner(n, participants): Determines the number of rounds needed to determine the ultimate tournament winner and the winner\'s name. rounds = 0 while n > 1: n = (n + 1) // 2 # Progressively halving the number of participants each round rounds += 1 winner = min(participants) # Lexicographically smallest name wins return rounds, winner"},{"question":"In a scenario where you have a network of servers, each server can be connected to other servers via unidirectional communication channels. You need to evaluate the reliability of these servers in terms of their ability to communicate with each other. Reliability, in this context, is defined by the ability of each server to send messages to any other server either directly or via intermediate servers. Given a set of servers and the connections between them, identify the number of server clusters that need to be checked for reliability. A cluster is defined as a group of servers where each server can communicate with every other server in that group directly or indirectly. If two clusters have servers that cannot communicate with each other by any means, they are considered separate clusters. Input The first line contains two integers n (1 ≤ n ≤ 200), m (0 ≤ m ≤ 20000) — the number of servers and the number of connections respectively. The next m lines contain two integers a_i, b_i (1 ≤ a_i, b_i ≤ n) — indicating there is a unidirectional connection from server a_i to server b_i. Output Print a single integer representing the number of server clusters. Examples Input 5 4 1 2 2 3 4 5 5 4 Output 2 Input 3 2 1 2 2 3 Output 1 Input 6 0 Output 6 Note In the first example, there are 5 servers and 4 connections. Servers 1, 2, and 3 form one cluster since they are all reachable from each other (directly or indirectly). Servers 4 and 5 form another cluster because they can only reach each other. Hence, there are 2 clusters. In the second example, all three servers can reach each other through the connections, forming a single cluster. In the third example, there are no connections, hence each server is its own cluster, resulting in 6 clusters.","solution":"def find_clusters(n, m, connections): from collections import defaultdict, deque def bfs(node): queue = deque([node]) visited.add(node) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) # Since the communication is bidirectional visited = set() cluster_count = 0 for server in range(1, n + 1): if server not in visited: bfs(server) cluster_count += 1 return cluster_count"},{"question":"Susan loves connectedness. She has recently come across the concept of a connected graph in one of her classes, and now she\'s obsessed with creating connected graphs. She has decided to design a new problem that involves adding the minimum number of edges to make a graph connected. You are given an undirected graph represented by `N` nodes and `E` edges. Your task is to determine the minimum number of edges that need to be added to make the graph connected. If the graph is already connected, return 0. A graph is considered connected when there is a path between any pair of nodes. Input - The first line of the input contains two integers `N` (number of nodes) and `E` (number of edges). - Each of the next `E` lines contains two integers `u` and `v`, indicating that there\'s an edge between node `u` and node `v`. Output Print the minimum number of edges required to make the graph connected. Constraints 1 ≤ N ≤ 10^4 0 ≤ E ≤ 5 * 10^4 1 ≤ u, v ≤ N SAMPLE INPUT 6 3 1 2 2 3 4 5 SAMPLE OUTPUT 2 Explanation: The given graph has two connected components {1, 2, 3} and {4, 5}. Node 6 is isolated. To make the graph connected, we need to add edges {3, 4} and {5, 6} (or equivalent pairs of edges to make all nodes reachable).","solution":"def find_min_edges_to_connect_graph(N, E, edges): Returns the minimum number of edges to make a graph connected. from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def dfs(node, visited): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) visited = set() components = 0 for node in range(1, N + 1): if node not in visited: visited.add(node) dfs(node, visited) components += 1 return components - 1 # Input Parsing for testing def process_input(data): lines = data.split(\'n\') N, E = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:] if line] return N, E, edges # Sample data data = \\"6 3n1 2n2 3n4 5\\" N, E, edges = process_input(data) print(find_min_edges_to_connect_graph(N, E, edges)) # Output should be 2"},{"question":"You are given a sequence of integers. You can perform the following operation on the sequence any number of times (including zero): - Select any three consecutive elements in the sequence and either increase or decrease each of them by 1. Your task is to determine if it is possible to make all elements of the sequence equal using the above operation. Constraints - 3 leq n leq 10^5 - 1 leq a_i leq 10^9 Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Output Print \\"YES\\" (without quotes) if it is possible to make all elements of the sequence equal, otherwise print \\"NO\\" (without quotes). Example Input 5 4 3 3 4 4 Output YES Input 3 1 3 2 Output NO","solution":"def can_make_equal(n, sequence): # Calculate differences diff = [(sequence[i + 1] - sequence[i]) % 2 for i in range(n - 1)] # Check if sum of differences modulo 2 is zero if sum(diff) % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"For a given positive integer `n`, your task is to determine if it is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Create a function to check if the given number `n` is prime. The function should return `True` if the number is prime, and `False` otherwise. Your function should be efficient enough to handle larger integers up to 10^6. Input A series of integers is provided as input. Each integer `n` (1 ≤ n ≤ 10^6) is given on a separate line. The end of the input is indicated by a single line containing a zero. Output For each integer, output `True` if it is a prime number, and `False` otherwise. Example Input 5 10 23 0 Output True False True","solution":"def is_prime(n): Determines if a given number n is a prime number. Parameters ---------- n : int The number to be checked for primality. Returns ------- bool True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Given an array of integers nums sorted in non-decreasing order, and an integer target, determine if the target is present in the array using a binary search algorithm. If the target exists, return its index. Otherwise, return the index where it would be if it were inserted in order. You must write an algorithm with O(log n) runtime complexity. Constraints: * 1 <= nums.length <= 10^4 * -10^4 <= nums[i] <= 10^4 * nums is sorted in non-decreasing order. * -10^4 <= target <= 10^4 Input: The first line of input contains an integer n, the number of elements in the array. The second line contains n space-separated integers representing the array nums. The third line contains the integer target. Output: Print the index where the target is found, or the index where it should be inserted. Examples: Input 5 1 3 5 6 5 Output 2 Input 5 1 3 5 6 2 Output 1 Input 5 1 3 5 6 7 Output 4","solution":"def search_insert(nums, target): Given a sorted array nums and a target value, returns the index if the target is found. If not, return the index where it would be if it were inserted in order. This solution implements the binary search algorithm to achieve O(log n) runtime complexity. left, right = 0, len(nums) - 1 while left <= right: mid = left + (right - left) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return left"},{"question":"There is a large body of water filled with clusters of small islands. Some of these islands are connected by bridges. Your task is to determine the size of the smallest isolated sub-region of islands that cannot be reached from the mainland (including disconnected clusters of one island). The mainland is considered to be the islands connected to island 1. Input The first line contains two integers, n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000) — the number of islands and the number of bridges, respectively. Each of the next m lines contains two integers, u and v (1 ≤ u, v ≤ n), representing a bridge between island u and island v. Output Print one integer — the size of the smallest isolated sub-region of islands that cannot be reached from the mainland. If no such region exists, print -1. Example Input 7 6 1 2 1 3 2 4 2 5 4 5 6 7 Output 2","solution":"def smallest_isolated_region(n, m, bridges): from collections import defaultdict, deque def bfs(start, visited, graph): queue = deque([start]) visited[start] = True component = [] while queue: node = queue.popleft() component.append(node) for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component graph = defaultdict(list) for u, v in bridges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) # Perform BFS from island 1 to determine the mainland mainland = bfs(1, visited, graph) # Find all isolated regions isolated_regions = [] for i in range(1, n + 1): if not visited[i]: component = bfs(i, visited, graph) isolated_regions.append(len(component)) # If there are no isolated regions, return -1 if not isolated_regions: return -1 # Return the size of the smallest isolated region return min(isolated_regions) # Example usage: # Input: Number of islands = 7, Number of bridges = 6 # Bridges: (1, 2), (1, 3), (2, 4), (2, 5), (4, 5), (6, 7) # Output: 2 print(smallest_isolated_region(7, 6, [(1, 2), (1, 3), (2, 4), (2, 5), (4, 5), (6, 7)])) # Output: 2"},{"question":"You are given a string `s` consisting of lowercase English letters. You can perform the following operation on the string: Choose any two different characters in the string and swap all their occurrences. What is the longest sequence you can obtain such that all characters in the sequence are distinct? -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 10^5) consisting of lowercase English letters. -----Output----- For each test case, print a single integer — the length of the longest sequence of distinct characters obtainable after performing the allowed operation any number of times. -----Examples----- Input 3 abc aaaa abacaba Output 3 1 2 -----Note----- For the first example, no operation is needed as all characters are already distinct. For the second example, only one character is present in the string. In the third example, you can swap all `a` with `b` to get the sequence `bcb`, which has 2 distinct characters. Note that you do not need to use the whole string if a longer sequence with distinct characters cannot be formed from the entire string.","solution":"def longest_distinct_sequence(s): Returns the length of the longest sequence of distinct characters obtainable after swapping any two different characters in the string. return len(set(s)) def process_test_cases(test_cases): Processes multiple test cases and returns the result for each. results = [] for s in test_cases: results.append(longest_distinct_sequence(s)) return results"},{"question":"Emily has a list of integers A of length N. She wants to generate a new list B based on a series of K operations. Each operation is represented by three integers L_i, R_i, and X_i (1 leq i leq K). In each operation, she adds X_i to all elements of the subarray of A that starts at index L_i and ends at index R_i (inclusive, 1-based index). Specifics of this problem: 1. You need to build the final list B after all the operations are applied. 2. After building the list B, determine the smallest integer C that is not present in B. -----Input:----- - The first line contains an integer N — the number of elements in the list A. - The second line contains N integers A_1, A_2, ldots, A_N — the initial elements of the list A. - The third line contains an integer K — the number of operations. - Each of the next K lines contains three integers L_i, R_i, and X_i — the parameters of the i^{th} operation. -----Output:----- - Print the smallest integer C that is not present in the list B after performing all the operations. -----Constraints----- - 1 leq N leq 10^5 - 1 leq A_i leq 10^9 - 1 leq K leq 10^5 - 1 leq L_i leq R_i leq N - 0 leq X_i leq 10^6 -----Sample Input:----- 5 3 4 5 6 7 3 1 3 2 2 4 1 1 5 3 -----Sample Output:----- 1 -----Explanation:----- Example case 1: After the first operation, list becomes: [5, 6, 7, 6, 7] After the second operation, list becomes: [5, 7, 8, 7, 7] After the third operation, list becomes: [8, 10, 11, 10, 10] The smallest integer not present in the final list is 1.","solution":"def smallest_absent_integer(N, A, K, operations): # Step 1: Apply the operations to the list A and generate the final list B B = A[:] for L, R, X in operations: for j in range(L-1, R): B[j] += X # Step 2: Find the smallest non-present integer in B B_set = set(B) C = 1 while C in B_set: C += 1 return C"},{"question":"A scientist is conducting an experiment with bacteria cultures. The experiment is conducted in multiple phases, each phase spanning several minutes. The bacteria culture grows at a constant rate during each phase, but this growth rate changes between phases. The scientist wants to determine the total number of bacteria in the culture at the end of the last phase. You are given the initial number of bacteria and a list of integers representing the growth rates for each phase. Each integer steps up in multiples, and bacteria is calculated in each minute of the phase, adding to the bacteria count. You\'ll simulate the bacteria growth through each phase and report the final count. Write a program that takes the initial number of bacteria, and for each phase defines the growth using the rate. Calculate how many bacteria there are at the end of the final phase. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each test case starts with an integer n (1 le n le 10^6) representing the initial number of bacteria. The next line contains an integer p (1 le p le 10) representing the number of phases. The next p lines each contain two integers m and r (1 le m le 10^3, 0 le r le 100) — the duration of the phase in minutes and the growth rate in that phase. -----Output----- For each test case, print the total number of bacteria at the end of the last phase. -----Examples----- Input 2 100 2 5 2 3 1 250 3 10 3 5 5 8 2 Output 130 4550 -----Note----- In the first test case, starting with 100 bacteria: - After the 1st phase (5 minutes at a growth rate of 2), the bacteria count is 100 + 5*2 = 110. - After the 2nd phase (3 minutes at a growth rate of 1), the bacteria count is 110 + 3*1 = 113. In the second test case, starting with 250 bacteria: - After the 1st phase (10 minutes at a growth rate of 3), the bacteria count is 250 + 10*3 = 280. - After the 2nd phase (5 minutes at a growth rate of 5), the bacteria count is 280 + 5*5 = 305. - After the 3rd phase (8 minutes at a growth rate of 2), the bacteria count is 305 + 8*2 = 321.","solution":"def calculate_final_bacteria(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] p = test_cases[i][1] phases = test_cases[i][2] total_bacteria = n for m, r in phases: total_bacteria += m * r results.append(total_bacteria) return results"},{"question":"You are given a sequence of integers representing temperatures recorded over a series of days. Each integer represents the temperature on a given day. If the temperature is above 0, it indicates the temperature is positive, otherwise, it is non-positive. Your task is to find the longest subarray (contiguous part of the sequence) where each temperature in the subarray is positive. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), representing the number of days. The next line contains n integers t_1, t_2, ..., t_n (-100 ≤ t_i ≤ 100), where t_i is the temperature recorded on day i. -----Output----- Print a single integer — the length of the longest subarray where each temperature is positive. -----Examples----- Input 7 -1 2 3 5 -2 4 6 Output 3 Input 4 -5 -2 -1 -3 Output 0 Input 5 1 2 3 4 5 Output 5","solution":"def longest_positive_subarray(n, temperatures): Returns the length of the longest subarray with all positive temperatures. max_length = 0 current_length = 0 for temp in temperatures: if temp > 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Anna loves solving puzzles and is particularly fascinated with encryption algorithms. She has come across the \\"Caesar Cipher\\", a simple yet ancient encryption technique. The Caesar Cipher involves shifting each letter of the plaintext by a fixed number of positions down the alphabet. For example, with a shift of 1, \'A\' becomes \'B\', \'B\' becomes \'C\', and so on, with \'Z\' wrapping around to \'A\'. Anna wants to implement an advanced version of the Caesar Cipher that handles both uppercase and lowercase letters, as well as common punctuation marks (like spaces, periods, commas, etc.), which should remain unchanged. Write a program that encrypts a given text using a specified shift value. -----Input----- The first line contains the text to be encrypted. The text is a single line and its length does not exceed 100 characters. It contains only letters (both uppercase and lowercase), spaces, and basic punctuations (.,!?\'). The second line contains a single integer k (1 ≤ k ≤ 25), the shift value. -----Output----- Print the encrypted version of the text. -----Example----- Input Hello, World! 5 Output Mjqqt, Btwqi!","solution":"def caesar_cipher(text, k): Encrypts the given text using Caesar Cipher with a shift value of k. Only letters are shifted, other characters remain unchanged. encrypted_text = [] for char in text: if char.isalpha(): shift = k % 26 if char.islower(): new_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) else: new_char = chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\')) encrypted_text.append(new_char) else: encrypted_text.append(char) return \'\'.join(encrypted_text)"},{"question":"In a fictional world, there is a unique way to represent fractions as strings with a special encoding technique. Each fraction is represented as a string in the form `x | : | y`, where `x` and `y` are integers representing the numerator and the denominator respectively. Given such a representation, your task is to compute the decimal value of the fraction (numerator divided by denominator) up to 5 decimal places. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of fractions to process. Then n lines follow, each containing a single fraction representation. It is guaranteed that the denominator will not be zero. Output For each fraction given in the input, compute the decimal value up to 5 decimal places. Examples Input 4 1 | : | 2 3 | : | 4 10 | : | 5 7 | : | 3 Output 0.50000 0.75000 2.00000 2.33333","solution":"def compute_decimal_value(n, fractions): Compute decimal values of fractions up to 5 decimal places. Parameters: n (int): The number of fractions to process. fractions (list of str): List of fraction representations in the form \'x | : | y\'. Returns: list of str: The decimal values up to 5 decimal places. results = [] for fraction in fractions: # Split the fraction into numerator and denominator numerator, denominator = map(int, fraction.split(\' | : | \')) # Compute the decimal value decimal_value = numerator / denominator # Format the result to 5 decimal places and add it to the results results.append(f\\"{decimal_value:.5f}\\") return results"},{"question":"You are given a string containing a mix of uppercase letters, lowercase letters, and digits. Write a program to rearrange the string such that all the letters come first (in the original order), followed by all the digits (in the original order). INPUT The first line contains the string given as input. OUTPUT The first line displays the rearranged string with all letters first followed by all digits. SAMPLE INPUT ab12cd34 SAMPLE OUTPUT abcd1234 Note: - The input string will have at least one letter and one digit. - The length of the string will not exceed 100 characters.","solution":"def rearrange_string(s): Rearranges the string such that all letters come first (in the original order), followed by all the digits (in the original order). letters = [] digits = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(letters) + \'\'.join(digits)"},{"question":"Alice is fond of extracting hidden elements from sequences. She has recently come across a sequence problem and needs your help to solve it. The sequence S is defined as follows: - S(0) = 0 - S(1) = 1 - For n > 1, S(n) = S(n-1) + S(n-2) + n Your task is to write a program that generates the first N numbers of the sequence S. -----Input----- The input consists of a single integer N (1 ≤ N ≤ 10^5) which denotes the length of the sequence to be generated. -----Output----- Output a single line containing the first N numbers of the sequence S separated by space. -----Example----- Input: 5 Output: 0 1 3 7 14 -----Explanation----- For N = 5, the first 5 numbers of the sequence S are: - S(0) = 0 - S(1) = 1 - S(2) = 1 + 0 + 2 = 3 - S(3) = 3 + 1 + 3 = 7 - S(4) = 7 + 3 + 4 = 14 Thus, the output is \\"0 1 3 7 14\\". -----Constraints----- - 1 ≤ N ≤ 10^5","solution":"def generate_sequence(N): Generates the first N numbers of the sequence S as defined. if N == 1: return [0] if N == 2: return [0, 1] S = [0] * N S[0], S[1] = 0, 1 for i in range(2, N): S[i] = S[i-1] + S[i-2] + i return S # Example usage n = 5 sequence = generate_sequence(n) print(\\" \\".join(map(str, sequence)))"},{"question":"In a land far away, there is a kingdom with rectangular cities standing along a straight line. To improve communications, the king wants to build a single road that goes through all the cities. Each city is described by its coordinates (x, y) representing its location on a 2D plane. You are tasked with determining the minimum possible length of such a road, which can only run horizontally or vertically between cities. Input The first line contains an integer n (2 ≤ n ≤ 100), the number of cities. Each of the next n lines contains two integers x and y (-10^6 ≤ x, y ≤ 10^6), representing the coordinates of a city. Output Print the minimum possible length of the road that can be built such that it passes through at least one point of every city. Examples Input 3 1 1 2 3 3 2 Output 2 Input 4 0 0 0 2 2 2 2 0 Output 4 Note In the first sample, the optimal road runs vertically through x = 2 with a total length of |1-3| = 2. In the second sample, the optimal road runs vertically through x = 1 or horizontally through y = 1, both giving a minimum total length of 4.","solution":"def min_road_length(n, cities): Determine the minimum possible length of a road that can run horizontally or vertically and pass through all cities. Parameters: - n : int : number of cities - cities : list of tuples : (x, y) coordinates of the cities Returns: - int : minimum possible length of the road x_coords = [city[0] for city in cities] y_coords = [city[1] for city in cities] # Calculate the range for x and y coordinates x_range = max(x_coords) - min(x_coords) y_range = max(y_coords) - min(y_coords) # Minimum road length will be the maximum of the ranges return max(x_range, y_range)"},{"question":"Bob and Alice enjoy exchanging encrypted messages using a simple substitution cipher. In their cipher, each letter in the plaintext (original unencrypted message) is substituted with another letter in the alphabet based on a shifting rule. Specifically, each letter in the plaintext is shifted a fixed number of positions down the alphabet, wrapping around from \'z\' to \'a\' if necessary. Write a function that takes in a plaintext message and an integer key, and returns the encrypted message. The key indicates the number of positions that each letter in the plaintext should be shifted. Your task is to implement this encryption function. # Function Signature: ```python def encrypt_message(plaintext: str, key: int) -> str: ``` # Input: - `plaintext` (1 ≤ len(plaintext) ≤ 10^6): a string consisting of lowercase English letters only. - `key` (0 ≤ key ≤ 25): an integer denoting the number of positions to shift each letter. # Output: - A string representing the encrypted message. # Examples: ```python encrypt_message(\\"abc\\", 3) # Output: \\"def\\" encrypt_message(\\"xyz\\", 2) # Output: \\"zab\\" encrypt_message(\\"hello\\", 1) # Output: \\"ifmmp\\" ``` # Constraints: - The string contains alphabetic characters only (\'a\'-\'z\'). - Handle efficiently, given potentially large input sizes. # Note: Remember the wrap-around property. For example, \'z\' shifted by 1 position results in \'a\', \'y\' shifted by 2 positions results in \'a\', and so on.","solution":"def encrypt_message(plaintext: str, key: int) -> str: encrypted_message = [] for char in plaintext: # Find the new shifted character new_char = chr(((ord(char) - ord(\'a\') + key) % 26) + ord(\'a\')) encrypted_message.append(new_char) return \'\'.join(encrypted_message)"},{"question":"Tom loves playing with numbers. He recently discovered a fascinating two-player game called \\"Binary Move\\" that uses binary strings. In this game, each player takes turns flipping exactly one bit from \'0\' to \'1\' in a given binary string. The game continues until no more bits can be flipped. Tom wants to simulate this game and needs your help to determine the number of turns it will take to finish the game for a given binary string. The rules are as follows: - The game starts with a given binary string of length n. - Players take turns flipping one bit from \'0\' to \'1\'. - The goal is to flip all possible \'0\' bits to \'1\' bits. - The game ends when no more \'0\' bits are left to flip. Write a program to compute the number of turns it will take to complete the game given the initial state of the binary string. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the binary string. The second line contains a binary string of length n, consisting of characters \'0\' and \'1\' only. -----Output----- Output a single integer, the number of turns it will take to complete the game. -----Examples----- Input 5 10101 Output 2 Input 4 1110 Output 1 Input 6 000000 Output 6","solution":"def binary_move_turns(n, binary_string): Returns the number of turns it will take to complete the game by counting the number of \'0\'s in the given binary string. Args: n : int : length of the binary string binary_string : str : binary string of length n Returns: int : number of turns/steps to complete the game # Count the number of \'0\' in the binary string return binary_string.count(\'0\')"},{"question":"Mike is an avid book lover. He volunteers at a local library and helps in organizing the books. The library maintains a list of new books that have arrived each month. To keep things organized, Mike prefers to arrange the books in alphabetical order by their titles. Also, he wants to ensure that books which he has already read are not arranged again. Write a function `organizeBooks` that takes two arguments: - `readBooks`, a list of books that Mike has already read, given as an array of strings. - `newBooks`, a list of books that have arrived this month, given as an array of strings. The function should return a list of book titles which Mike should organize, sorted in alphabetical order. Also note: - All book titles are unique. - If none of the new books are to be organized, the function should return an empty list. Example: ```python organizeBooks([\\"Moby Dick\\", \\"To Kill a Mockingbird\\"], [\\"December 6\\", \\"Moby Dick\\", \\"Night\\", \\"To Kill a Mockingbird\\"]) ``` This would return: ```python [\\"December 6\\", \\"Night\\"] ```","solution":"def organizeBooks(readBooks, newBooks): This function organizes new books by sorting them alphabetically, excluding those that have already been read by Mike. Parameters: readBooks (list of str): Titles of books Mike has already read. newBooks (list of str): Titles of newly arrived books. Returns: list of str: Titles of books to be organized, in alphabetical order. # Filter out the books that have already been read booksToOrganize = [book for book in newBooks if book not in readBooks] # Sort the remaining books alphabetically booksToOrganize.sort() return booksToOrganize"},{"question":"You are designing a delivery system where packages must be delivered sequentially along a path. Each day, the delivery vehicle can only travel a certain distance and deliver packages in that order. Given the distance the vehicle can travel in a day and the distance of each package delivery from the starting point, you need to determine how many packages can be successfully delivered today. Consider the following example. Assume the vehicle can travel D = 100 units in a day and the packages need to be delivered at distances 30, 20, 50, 10, 40, and 50 units (in the order they must be delivered). Then, only four packages can be delivered. The first four packages require 30 + 20 + 50 + 10 = 110 units, but only the first three packages require 30 + 20 + 50 = 100 units which is exactly the attainable distance. The vehicle cannot deliver the fifth package even though it only requires 10 more units because the total distance would exceed D. -----Input----- The input consists of a single test case. The first line contains two integers n and D where 1 le n le 50 is the number of packages and 1 le D le 500 is the distance the vehicle can travel. The next line contains n positive integers no more than 100 indicating the distance of each package delivery in the order they must be delivered. -----Output----- Display the number of packages that can be delivered in D units of distance on a first-come, first-served basis. -----Examples----- Sample Input: 6 100 30 20 50 10 40 50 Sample Output: 3","solution":"def packages_delivered(n, D, distances): Determines how many packages can be delivered with a given distance D. :param n: Number of packages :param D: Distance the vehicle can travel :param distances: List of distances for each package :return: Number of packages that can be delivered total_distance = 0 for i in range(n): if total_distance + distances[i] > D: return i total_distance += distances[i] return n"},{"question":"Given a sequence of n integers, your task is to determine whether it is possible to rearrange the sequence to form an arithmetic progression. An arithmetic progression is a sequence of numbers in which the difference of any two successive members is a constant. Input The first line of input contains a single integer n (2 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n space-separated integers ai (|ai| ≤ 10^9) — the elements of the sequence. Output Output \\"YES\\" (without quotes) if it is possible to rearrange the sequence to form an arithmetic progression, otherwise output \\"NO\\" (without quotes). Examples Input 5 3 1 5 7 9 Output YES Input 4 1 3 6 8 Output NO Note In the first example, the sequence can be rearranged as [1, 3, 5, 7, 9] which forms an arithmetic progression with a common difference of 2. In the second example, no rearrangement of the sequence can form an arithmetic progression.","solution":"def can_form_arithmetic_progression(n, sequence): Determine if it\'s possible to rearrange the sequence to form an arithmetic progression. Parameters: n (int): The length of the sequence sequence (list of int): The elements of the sequence Returns: str: \\"YES\\" if an arithmetic progression can be formed, otherwise \\"NO\\" if n <= 2: return \\"YES\\" sequence.sort() common_diff = sequence[1] - sequence[0] for i in range(2, n): if sequence[i] - sequence[i - 1] != common_diff: return \\"NO\\" return \\"YES\\""},{"question":"Given a string consisting of lowercase alphabets, you have to determine the number of unique substrings that can be formed using the characters of the string. A substring is defined as a contiguous sequence of characters within a string. Note that the unique substrings should not be repetitive. Example Input: abc Output: 6 Explanation: The substrings are a, b, c, ab, bc, and abc. Overall, you have 6 unique substrings.","solution":"def count_unique_substrings(s): Returns the number of unique substrings that can be formed using the characters of the input string s. unique_subs = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): unique_subs.add(s[i:j]) return len(unique_subs)"},{"question":"You are given a sequence of n integers. Your task is to find a subsequence of consecutive integers that has the maximum possible sum. A subsequence is defined as a contiguous segment of the sequence. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4) representing the sequence. It is guaranteed that the sum of n over all test cases does not exceed 10^6. Output For each test case, print a single integer — the maximum sum of a subsequence of consecutive integers from the given sequence. Example Input 3 5 1 -2 3 4 -5 4 -1 -2 -3 -4 6 2 -1 2 3 4 -5 Output 7 -1 10 Note In the first test case, the maximum sum is obtained for the subsequence [3, 4], which sums to 7. In the second test case, the maximum sum is obtained for the subsequence [-1], which sums to -1. In the third test case, the maximum sum is obtained for the subsequence [2, -1, 2, 3, 4], which sums to 10.","solution":"def max_subsequence_sum(t, test_cases): Returns the maximum sum of a subsequence of consecutive integers for each test case. results = [] for case in test_cases: n, sequence = case max_current = max_global = sequence[0] for num in sequence[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current results.append(max_global) return results"},{"question":"Given a string A representing an arithmetic expression in infix notation, convert it to an equivalent expression in postfix notation. Operators in the expression can include +, -, *, /, and parentheses (). Assume the expression is well-formed and valid. The function should return the postfix expression as a string. Example 1: Input: \\"A + B * C\\" Output: \\"A B C * +\\" Explanation: In postfix notation, operators follow their operands. Example 2: Input: \\"(A + B) * (C + D)\\" Output: \\"A B + C D + *\\" Explanation: Parentheses dictate the precedence, grouping A+B as one operand and C+D as another. Your Task: Complete the function `infixToPostfix(expression)` which takes a string `expression` and returns a string representing the postfix notation of the given infix expression. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= length of expression <= 1000 A, B, C, ..., Z are single character operands contained in the expression. Operators can be +, -, *, /. Parentheses can be used to denote precedence.","solution":"def infixToPostfix(expression): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} operators = set([\'+\', \'-\', \'*\', \'/\', \'(\', \')\']) stack = [] postfix = [] for char in expression: if char.isalpha(): # if the character is an operand postfix.append(char) elif char == \'(\': stack.append(char) elif char == \')\': while stack and stack[-1] != \'(\': postfix.append(stack.pop()) stack.pop() # pop \'(\' from the stack else: # if the character is an operator while stack and stack[-1] != \'(\' and precedence[char] <= precedence[stack[-1]]: postfix.append(stack.pop()) stack.append(char) while stack: postfix.append(stack.pop()) return \' \'.join(postfix)"},{"question":"The Grand Library is a vast collection of rare and ancient books. The library uses a unique system of categories and subcategories to organize its books. Each category is represented by a unique number, and each subcategory is a strictly descending sequence of numbers connected to a parent category. A librarian is tasked with registering a new arrival of books into the system, which involves inserting new categories and subcategories. However, the library\'s categorization system has strict rules: 1. Each book\'s category number must be unique. 2. Subcategory sequences must always be descending in numerical order. Given a library\'s current state and the new books\' categories to be added, determine if it is possible to add each new book\'s category while maintaining the library\'s rules. Input The first line contains an integer n (1 ≤ n ≤ 100,000), indicating the number of existing categories in the library. Each of the next n lines contains a sequence of integers representing a category and its subcategories. The first number in the line is the category number, and the remaining numbers form a strictly descending sequence of subcategories. Next line contains an integer k (1 ≤ k ≤ 100,000), representing the number of new books to be added. Each of the next k lines contains an integer representing the category number of a new book. Output Print a single line containing \\"YES\\" if it is possible to add all new books\' categories to the system without violating the rules, otherwise print \\"NO\\". Examples Input 4 10 9 8 7 5 4 3 12 11 20 15 10 5 3 6 2 13 Output YES Input 3 9 7 5 6 4 2 10 8 3 2 7 11 Output NO Explanation In the first example, the sequence of categories after adding the new books 6, 2, and 13 would be: 6, 2 separated as new main categories, and 13 can be inserted appropriately without breaking the existing rules. In the second example, category 7 already exists as a subcategory under 9 which violates the uniqueness rule when trying to add it as a new main category. Therefore, the output is \\"NO\\".","solution":"def can_add_books(existing_categories, new_books): existing_numbers = set() # Extract all category and subcategory numbers from existing categories for category in existing_categories: for number in category: existing_numbers.add(number) # Check each new book\'s category number for book in new_books: if book in existing_numbers: return \\"NO\\" return \\"YES\\" # Function to transform input data into suitable format and determine result def check_library(n, existing_data, k, new_books_data): existing_categories = [list(map(int, line.split())) for line in existing_data] new_books = [int(line) for line in new_books_data] return can_add_books(existing_categories, new_books)"},{"question":"You are asked to implement a function that checks whether a given string (the key) can be typed using letters of only one row of a standard QWERTY keyboard. The rows of the QWERTY keyboard are: Top row: \\"QWERTYUIOP\\" Middle row: \\"ASDFGHJKL\\" Bottom row: \\"ZXCVBNM\\" Your function should be case-insensitive and return a boolean indicating whether the key can be typed using only one row. Example: can_be_typed_using_one_row(\\"Typewriter\\") -> True can_be_typed_using_one_row(\\"Hello\\") -> False can_be_typed_using_one_row(\\"Alaska\\") -> True Note: When an empty string is passed, the result should be True since a keyboard is not required to type an empty string. The solution should maintain a consistent runtime complexity regardless of the input length.","solution":"def can_be_typed_using_one_row(key): Returns True if the key can be typed using letters of only one row of a standard QWERTY keyboard, False otherwise. This function is case-insensitive. rows = [ set(\\"QWERTYUIOP\\"), set(\\"ASDFGHJKL\\"), set(\\"ZXCVBNM\\") ] # Normalize the key to uppercase to make the comparison case-insensitive key_upper = key.upper() # Check if key is empty if not key: return True for row in rows: if all(char in row for char in key_upper): return True return False"},{"question":"You are given an initial array of n positive integers sorted in ascending order from 1 to n. A sequence of operations will be performed on this array. In each operation, a particular element can be incremented by a specified value. Your task is to determine the final value of each element in a given list of indices after all operations are performed. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100), the number of elements in the array and the number of operations, respectively. The second line contains m integers a1, a2, ..., am (1 ≤ ai ≤ n), the indices of the elements on which operations will be applied. The third line contains m integers b1, b2, ..., bm (0 ≤ bi ≤ 10^4), the values to be added to the elements at the corresponding indices. The fourth line contains an integer q (1 ≤ q ≤ 100), the number of queries. Each of the next q lines contains a single integer xi (1 ≤ xi ≤ n), the indices of the elements in the original array for which you must output their final value after all operations are performed. Output For each of the q queries, output one integer per line -- the final value of the element at the given index after all operations are performed. Examples Input 5 3 2 3 5 10 20 5 3 1 2 5 Output 1 11 6 Input 8 4 1 3 4 8 100 200 300 800 4 1 4 7 8 Output 101 301 7 808 Note In the first example, the initial array is [1, 2, 3, 4, 5]. After the operations, the array becomes [1, 12, 23, 4, 10]. Queries ask for the values at indices 1, 2, and 5, which are 1, 12, and 10, respectively. In the second example, the initial array is [1, 2, 3, 4, 5, 6, 7, 8]. After the operations, the array becomes [101, 2, 203, 304, 5, 6, 7, 808]. Queries ask for the values at indices 1, 4, 7, and 8, which are 101, 304, 7, and 808, respectively.","solution":"def final_values(n, m, a, b, q, queries): # Initialize the array with values from 1 to n array = list(range(1, n+1)) # Apply the operations for i in range(m): index = a[i] - 1 # Convert 1-based index to 0-based index array[index] += b[i] # Generate the result for each query result = [] for i in range(q): query_index = queries[i] - 1 # Convert 1-based index to 0-based index result.append(array[query_index]) return result"},{"question":"Write a program to take three integers A, B, and C as input. Determine if A, B, and C form a Pythagorean triplet. A Pythagorean triplet follows the condition: a^2 + b^2 = c^2, where a, b are the legs of a right triangle and c is the hypotenuse. ------ Input Format ------ - The first line contains the first integer A. - The second line contains the second integer B. - The third line contains the third integer C. ------ Output Format ------ Output \\"YES\\" if the numbers form a Pythagorean triplet, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ A, B, C ≤ 1000 ----- Sample Input 1 ------ 3 4 5 ----- Sample Output 1 ------ YES ----- explanation 1 ------ Here, 3^2 + 4^2 = 9 + 16 = 25 = 5^2 Hence, the output is YES. ----- Sample Input 2 ------ 1 2 3 ----- Sample Output 2 ------ NO ----- explanation 2 ------ Here, 1^2 + 2^2 = 1 + 4 = 5 neq 9 = 3^2 Hence, the output is NO.","solution":"def is_pythagorean_triplet(a, b, c): Determine if the three integers a, b, and c form a Pythagorean triplet. Args: a, b, c (int): The input integers Returns: str: \\"YES\\" if they form a Pythagorean triplet, otherwise \\"NO\\" sides = sorted([a, b, c]) return \\"YES\\" if sides[0]**2 + sides[1]**2 == sides[2]**2 else \\"NO\\""},{"question":"Your task is to create a program that helps a user manage their daily schedule. The schedule is structured around time blocks, which specify activities that need to be completed at particular times of the day. You need to determine which activity is scheduled at a given time. The time is specified using a 24-hour format and activities are described using start and end times, also in a 24-hour format. -----Input----- The first line of input consists of an integer ( n ), the number of scheduled activities (1 ≤ ( n ) ≤ 100). The next ( n ) lines each contain a time block with a start time, an end time, and the activity description, in that order. Each time is given in the format HH:MM (where HH is the hour and MM is the minutes), and the activity description is a single word. The last line consists of a time given in the 24-hour format, HH:MM, for which you need to determine the scheduled activity. -----Output----- Output the description of the activity that is scheduled for the given time. If multiple activities overlap at that time, print all overlapping activities in the order they appear in the input. If no activity is scheduled for that time, output \\"No activity.\\" -----Examples----- Sample Input: 3 09:00 10:00 Meeting 10:30 11:30 Coding 11:00 12:00 Lunch 10:45 Sample Output: Coding Lunch","solution":"def scheduled_activity(n, activities, query_time): Determines which activity is scheduled at the given time. :param n: Integer, number of scheduled activities. :param activities: List of tuples, where each tuple contains (start_time, end_time, description). :param query_time: String, the time to query in HH:MM format. :return: List of strings, descriptions of activities scheduled at the given time. query_hour, query_minute = map(int, query_time.split(\':\')) query_time_minutes = query_hour * 60 + query_minute scheduled = [] for start, end, description in activities: start_hour, start_minute = map(int, start.split(\':\')) end_hour, end_minute = map(int, end.split(\':\')) start_minutes = start_hour * 60 + start_minute end_minutes = end_hour * 60 + end_minute if start_minutes <= query_time_minutes < end_minutes: scheduled.append(description) if not scheduled: return [\\"No activity\\"] else: return scheduled # Usage n = 3 activities = [ (\\"09:00\\", \\"10:00\\", \\"Meeting\\"), (\\"10:30\\", \\"11:30\\", \\"Coding\\"), (\\"11:00\\", \\"12:00\\", \\"Lunch\\") ] query_time = \\"10:45\\" print(\'n\'.join(scheduled_activity(n, activities, query_time))) # Output: Coding, Lunch"},{"question":"Given a string s, determine if it is possible to rearrange the characters in the string to form a palindrome. Input The first line of input contains an integer T, denoting the number of test cases. Each of the next T lines contains one string s. Output Print T lines, either \\"POSSIBLE\\" or \\"IMPOSSIBLE\\" (without quotes) depending on whether it is possible to rearrange the characters of the string to form a palindrome. Constraints 1 ≤ T ≤ 1000 1 ≤ |s| ≤ 10000 String s contains only lower case letters. SAMPLE INPUT 3 civic ivicc google SAMPLE OUTPUT POSSIBLE POSSIBLE IMPOSSIBLE","solution":"def can_form_palindrome(s): Determines if it\'s possible to rearrange the characters in the string `s` to form a palindrome. from collections import Counter char_counts = Counter(s) odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) return odd_count <= 1 def solve(strings): results = [] for s in strings: results.append(\\"POSSIBLE\\" if can_form_palindrome(s) else \\"IMPOSSIBLE\\") return results"},{"question":"You are given a list of integers representing the prices of items in a store. Your task is to compute the maximum profit you can gain by buying and selling one item from the store. You must buy the item before you can sell it and the transaction must be made on different days. The program should output the maximum profit that can be made from a single buy-sell transaction. If no profit can be made, the output should be 0. Input The input consists of several datasets. Each dataset contains a single line with space-separated integers representing the prices of items on consecutive days. Each line is at most 200 characters long and the number of datasets does not exceed 150. Output For each dataset, output the maximum profit that can be made from one buy-sell transaction. If no profit can be made, output 0. Example Input 7 1 5 3 6 4 7 6 4 3 1 1 2 3 4 5 Output 5 0 4 Explanation - In the first example, buying on day 2 (price = 1) and selling on day 5 (price = 6) yields a profit of 5. - In the second example, no transaction is possible that yields profit. - In the third example, buying on day 1 (price = 1) and selling on day 5 (price = 5) yields a profit of 4.","solution":"def max_profit(prices): Returns the maximum profit obtainable from a list of given prices. if not prices or len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price profit = price - min_price if profit > max_profit: max_profit = profit return max_profit def process_input(input_data): Process the input data and return the maximum profits for each dataset. datasets = input_data.strip().split(\'n\') results = [] for data in datasets: prices = list(map(int, data.split())) results.append(max_profit(prices)) return results"},{"question":"Given an integer array `nums`, design a function `findLongestSubsequence(nums)` to find the length of the longest strictly increasing subsequence that can be formed by deleting some (or none) of the elements without changing the order of the remaining elements. Input - `nums`: A list of integers. Output - A single integer representing the length of the longest strictly increasing subsequence. Examples: Input: ``` [10, 9, 2, 5, 3, 7, 101, 18] ``` Output: ``` 4 ``` Explanation: The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Input: ``` [0, 1, 0, 3, 2, 3] ``` Output: ``` 4 ``` Explanation: The longest increasing subsequence is [0, 1, 2, 3], therefore the length is 4. Input: ``` [7, 7, 7, 7, 7, 7, 7] ``` Output: ``` 1 ``` Explanation: The longest increasing subsequence is [7], therefore the length is 1. Constraints: - 1 <= len(nums) <= 2500 - -10^4 <= nums[i] <= 10^4","solution":"def findLongestSubsequence(nums): Returns the length of the longest strictly increasing subsequence. :param nums: List of integers :return: Length of the longest strictly increasing subsequence if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"A group of friends is organizing a secret Santa gift exchange in which each person is assigned to give a gift to another person in the group. The constraint is that no one can be their own Secret Santa and each person will receive exactly one gift. There are ( N ) friends, each identified by a unique number from 1 to ( N ). The assignment is completed by providing a permutation ( P ) of the numbers from 1 to ( N ), such that ( P[i] ) is the person to whom friend ( i+1 ) gives a gift. However, the group wants to know how \\"disruptive\\" the assignments are. The disruption of the assignments is calculated as the minimum number of swaps needed to sort the permutation ( P ) such that everyone gives a gift to someone else and no one receives their own gift. Given the permutation ( P ), determine the number of swaps needed to sort ( P ) to minimize disruption. Input The first line contains an integer ( N ) (( 1 leq N leq 10^5 )) — the number of friends. The second line contains ( N ) integers ( P[1], P[2], ldots, P[N] ) — the permutation representing the Secret Santa assignments. Output A line containing a single integer representing the minimum number of swaps needed to sort the permutation ( P ). Examples # Example 1 **Input:** ``` 4 4 3 2 1 ``` **Output:** ``` 2 ``` # Example 2 **Input:** ``` 5 2 1 4 3 5 ``` **Output:** ``` 2 ``` # Example 3 **Input:** ``` 3 3 1 2 ``` **Output:** ``` 2 ``` Note In the first example, swapping elements at positions 1 and 4, and positions 2 and 3 results in the sorted permutation: ``` 1 2 3 4 ``` So, the minimum number of swaps required is 2. In the second example, swapping elements at positions 1 and 2, and positions 3 and 4 results in the sorted permutation: ``` 1 2 3 4 5 ``` So, the minimum number of swaps required is 2. In the third example, swapping elements at positions 1 and 3, and positions 2 and 3 results in the sorted permutation: ``` 1 2 3 ``` So, the minimum number of swaps required is 2.","solution":"def minimum_swaps(P): Calculate the minimum number of swaps required to sort the permutation P. n = len(P) # Create a boolean list to mark visited elements visited = [False] * n swap_count = 0 for i in range(n): if visited[i] or P[i] == i + 1: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = P[x] - 1 cycle_size += 1 if cycle_size > 0: swap_count += (cycle_size - 1) return swap_count"},{"question":"Polycarp loves sequences of numbers and is especially interested in arithmetic progressions. An arithmetic progression is a sequence of numbers in which the difference of any two successive members is a constant. Given a sequence of integers, Polycarp wants to know if it is possible to obtain an arithmetic progression by rearranging the elements of the sequence. Write a function that checks if a given sequence of integers can be rearranged to form an arithmetic progression. -----Input----- The first line of the input data contains a single integer t (1 leq t leq 10^4) — the number of test cases in the test. Each test case is described by two lines. The first line contains a single integer n (2 leq n leq 10^5) — the number of elements in the sequence. The second line contains n integers separated by spaces (-10^9 leq a_i leq 10^9). -----Output----- Output t lines. For each test case, output \\"YES\\" (without quotes) if the sequence can be rearranged to form an arithmetic progression, and \\"NO\\" otherwise. -----Examples----- Input 3 3 1 3 2 4 4 8 5 1 5 7 7 7 7 7 Output YES NO YES -----Note----- In the first test case, the sequence can be rearranged to [1, 2, 3], which is an arithmetic progression. In the second test case, it is impossible to rearrange the elements to form an arithmetic progression. In the third test case, any sequence with all equal elements is considered an arithmetic progression with a common difference of 0.","solution":"def can_form_arithmetic_progression(n, arr): Checks if the sequence can be rearranged to form an arithmetic progression. arr.sort() diff = arr[1] - arr[0] for i in range(1, n): if arr[i] - arr[i - 1] != diff: return \\"NO\\" return \\"YES\\" def process_cases(t, cases): Processes multiple test cases. results = [] for case in cases: n, arr = case result = can_form_arithmetic_progression(n, arr) results.append(result) return results"},{"question":"You are given an array of integers where the sum of its elements is even. Your task is to split this array into two parts such that the sum of the elements in both parts is equal. It is guaranteed that such a split exists. ------Input------ The first line contains a single integer t (1 le t le 10) — the number of test cases. The first line of each test case contains a single integer n (2 le n le 2 times 10^5) — the size of the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (0 le a_i le 10^9) — the elements of the array. ------Output------ For each test case, output “YES” if the array can be split into two parts with equal sum and “NO” otherwise. ------Example------ Input 3 4 5 2 3 6 6 10 5 5 5 2 3 8 2 2 2 2 2 2 2 2 Output YES YES YES ------Note------ In the first test case of the example, the array can be split into two parts with equal sums: [5, 3] and [2, 6]. In the second test case, the array can be split into [10, 5] and [5, 5, 2, 3]. In the third test case, the array can be split into two groups, each containing equal quantities of the integer 2.","solution":"def can_split_equally(n, arr): total_sum = sum(arr) if total_sum % 2 != 0: return \\"NO\\" half_sum = total_sum // 2 current_sum = 0 for number in arr: current_sum += number if current_sum == half_sum: return \\"YES\\" if current_sum > half_sum: if (current_sum - half_sum) in arr: return \\"YES\\" else: return \\"NO\\" return \\"NO\\" # this line is redundant due to the problem guarantee, added for safe coding def solve(test_cases): results = [] for n, arr in test_cases: results.append(can_split_equally(n, arr)) return results"},{"question":"problem You are tasked with building a simple virtual thermostat system for a smart home. The thermostat system reads the current temperature and adjusts it to a desired temperature. The system can increase or decrease the temperature, but each adjustment takes a fixed amount of time and energy. You need to implement a function called `adjust_temperature`, which takes the current temperature, the desired temperature, the adjustment rate, and the time/energy cost of each adjustment. The function should return the total time and total energy required to reach the desired temperature from the current temperature. ```python def adjust_temperature(current_temp, desired_temp, adjustment_rate, adjustment_cost): :param current_temp: int - The current temperature. :param desired_temp: int - The desired temperature. :param adjustment_rate: int - The rate of temperature adjustment per unit time. :param adjustment_cost: int - The energy cost of each adjustment. :return: tuple - Total time and total energy cost to adjust the temperature. # Write your code here # Example usage: current_temp = 20 desired_temp = 25 adjustment_rate = 2 adjustment_cost = 5 print(adjust_temperature(current_temp, desired_temp, adjustment_rate, adjustment_cost)) # expected output: (3, 15) ``` # Constraints - The `current_temp` and `desired_temp` will be integers within the range [-100, 100]. - The `adjustment_rate` will be a positive integer. - The `adjustment_cost` will be a positive integer. # Example Input: ```python current_temp = 20 desired_temp = 25 adjustment_rate = 2 adjustment_cost = 5 ``` Output: ```python (3, 15) ``` In this example, to adjust the temperature from 20 to 25: - It takes 3 adjustments, each increasing the temperature by 2 units (since 25-20 = 5, and each adjustment is 2 units, so 5/2 = 2.5, rounded up to 3). - Each adjustment costs 5 energy units, so the total energy cost is 3 * 5 = 15.","solution":"def adjust_temperature(current_temp, desired_temp, adjustment_rate, adjustment_cost): Adjusts the temperature from current_temp to desired_temp. :param current_temp: int - The current temperature. :param desired_temp: int - The desired temperature. :param adjustment_rate: int - The rate of temperature adjustment per unit time. :param adjustment_cost: int - The energy cost of each adjustment. :return: tuple - Total time and total energy cost to adjust the temperature. # Calculate the difference in temperature temp_difference = abs(desired_temp - current_temp) # Calculate the number of adjustments required num_adjustments = (temp_difference + adjustment_rate - 1) // adjustment_rate # This is equivalent to ceiling of temp_difference / adjustment_rate # Calculate the total time and energy cost total_time = num_adjustments total_energy = num_adjustments * adjustment_cost return total_time, total_energy"},{"question":"# Task **_Given_** *a string representing a mathematical expression with positive integers and the operators +, -, *, and /, return the _evaluated result_ as a float with a precision of two decimal places*. ___ # Notes * **_Only positive integers and the operators_** *+, -, *, and / will be present in the input string*. * **_No floating point_** *numbers will be part of the input*. * **_Operators and operands_** *will be separated by a single space for readability (e.g. \\"3 + 5\\" not \\"3+5\\")*. * **_The input expression_** *will not have parenthesis and will be a valid arithmetic expression*. ____ # Input >> Output Examples: ``` evaluateExpression(\\"3 + 5\\") ==> return (8.00) ``` **_Explanation_**: The result of the expression `3 + 5` is `8`. ___ ``` evaluateExpression(\\"10 - 4 * 2\\") ==> return (2.00) ``` **_Explanation_**: Following the order of operations, the result of the expression `10 - 4 * 2` is `2`. ___ ``` evaluateExpression(\\"14 / 3 + 2\\") ==> return (6.67) ``` **_Explanation_**: Following the order of operations, the result of the expression `14 / 3 + 2` is `6.67`. ___ ``` evaluateExpression(\\"20 / 5 * 2 + 8\\") ==> return (16.00) ``` **_Explanation_**: Following the order of operations, the result of the expression `20 / 5 * 2 + 8` is `16.00`. ___","solution":"def evaluateExpression(expression): Given a string representing a mathematical expression with positive integers and the operators +, -, *, and /, return the evaluated result as a float with a precision of two decimal places. # Using eval function to evaluate the expression result = eval(expression) # rounding the result to 2 decimal places result = round(result, 2) return result"},{"question":"Hey CodeWarrior, another exciting coding challenge awaits you! This time, we\'ll be playing around with arrays and strings. Make sure you\'re comfortable with basic array and string manipulation methods. Let\'s dive in... Background We have a system that logs activities. Each activity is recorded as a string in the format “YYYY-MM-DD:USER:ACTION”. Unfortunately, some logs were corrupted, containing unknown activities logged as \\"UNKNOWN\\". Any logs with \\"UNKNOWN\\" should not be included in our final records. Task 1. Parse the logs to filter out those with \\"UNKNOWN\\" activities. 2. Group the valid logs by date. 3. Create a dictionary where each key is a date and the value is a list of \\"USER:ACTION\\" strings for that date. 4. Return the dictionary. Constraints - The input will be a list of strings, where each string represents a log entry. - Dates in the logs will be in the \\"YYYY-MM-DD\\" format. - The logs are already sorted by date. --- Note Please implement the solution without using any third-party libraries, solely relying on Python\'s built-in data structures and methods. Some references for Python: - [Python Documentation: str.split](https://docs.python.org/3/library/stdtypes.html#str.split) - [Python Documentation: str.find](https://docs.python.org/3/library/stdtypes.html#str.find) - [Python Documentation: dict](https://docs.python.org/3/library/stdtypes.html#dict) - [Python Documentation: list](https://docs.python.org/3/library/stdtypes.html#list)","solution":"def filter_and_group_logs(logs): Filters out logs with \\"UNKNOWN\\" activities and groups the valid logs by date. Parameters: logs (list of str): List of log entries in the format \\"YYYY-MM-DD:USER:ACTION\\". Returns: dict: Dictionary with dates as keys and lists of \\"USER:ACTION\\" as values. grouped_logs = {} for log in logs: date, user, action = log.split(\\":\\", 2) if action != \\"UNKNOWN\\": if date not in grouped_logs: grouped_logs[date] = [] grouped_logs[date].append(f\\"{user}:{action}\\") return grouped_logs"},{"question":"Boris is a software engineer working on a text-based puzzle game where players need to identify palindromes within a given string. A palindrome is a string that reads the same forward and backward, disregarding spaces, punctuation, and capitalization. You need to write a function to check if a given string is a palindrome. If it is a palindrome, the function should return `True`; otherwise, it should return `False`. Function Signature ```python def is_palindrome(s: str) -> bool: ``` Input - `s` (1 ≤ len(s) ≤ 1000): a string containing letters, digits, spaces, and punctuation. Output - Return `True` if `s` is a palindrome, and `False` otherwise. Example ```python print(is_palindrome(\\"A man, a plan, a canal, Panama\\")) # should return True print(is_palindrome(\\"No \'x\' in Nixon\\")) # should return True print(is_palindrome(\\"Hello, World!\\")) # should return False ``` Note - Ignore spaces, punctuation, and capitalization while checking for a palindrome.","solution":"def is_palindrome(s: str) -> bool: Checks if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list of characters reads the same forward and backward return filtered_chars == filtered_chars[::-1]"},{"question":"You are given a collection of strings, and you need to determine the smallest possible lexicographically sequence of all distinct characters that can be formed using any subsequence of the strings. You are allowed to reorder the characters freely, but each character can be used only once. ------ Input ------ The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. Each test case contains an integer N, the number of strings, followed by N space-separated strings S_{1}, S_{2}, ldots, S_{N}. ------ Output ------ For each test case, output the smallest possible lexicographically sequence of all distinct characters that can be formed. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{3} 1 ≤ |S_{i}| ≤ 10^{3} for each valid i Strings S_{i} consist of lowercase English letters. ------ Sample Input ------ 2 3 abc bcd cde 2 xyz bcd ------ Sample Output ------ abcde bcdxyz ------ Explanation ------ Example case 1: The combined set of all unique characters from strings \\"abc\\", \\"bcd\\", and \\"cde\\" is {\'a\', \'b\', \'c\', \'d\', \'e\'}. The smallest lexicographical sequence of these characters is \\"abcde\\". Example case 2: The combined set of all unique characters from strings \\"xyz\\" and \\"bcd\\" is {\'x\', \'y\', \'z\', \'b\', \'c\', \'d\'}. The smallest lexicographical sequence of these characters is \\"bcdxyz\\".","solution":"def smallest_lexicographical_sequence(test_cases): Given a list of test cases, each containing a number of strings, returns a list of the smallest possible lexicographical sequences of all distinct characters that can be formed using any subsequence of the strings. results = [] for test_case in test_cases: N, strings = test_case unique_chars = set() for s in strings: unique_chars.update(s) sorted_chars = sorted(unique_chars) results.append(\'\'.join(sorted_chars)) return results"},{"question":"A company wants to determine how well their devices perform when subjected to a specific test. Each device has multiple performance metrics that need to be evaluated. A device is considered successful if at least one of its metrics meets or exceeds a given threshold. Given the number of devices D, the number of metrics per device M, and the threshold T, figure out if each device is successful or not. -----Input:----- - First line will contain D, the number of devices. - The second line will contain two integers M (number of metrics per device) and T (the minimum acceptable metric value for a device to be considered successful). - The next D lines will each contain M space separated integers, P_{ij} denoting the performance metrics for the i^{th} device on the j^{th} metric. -----Output:----- For each device, print \\"SUCCESS\\" if the device meets or exceeds the threshold on at least one metric. Otherwise, print \\"FAILURE\\". (Without quotes). -----Constraints:----- - 1 leq D leq 100 - 1 leq M leq 100 - 1 leq T leq 1000 - 1 leq P_{ij} leq 1000 -----Sample Input:----- 3 4 200 150 180 220 190 300 310 290 305 100 90 85 95 -----Sample Output:----- SUCCESS SUCCESS FAILURE","solution":"def evaluate_devices(D, M, T, metrics): results = [] for device_metrics in metrics: if any(metric >= T for metric in device_metrics): results.append(\\"SUCCESS\\") else: results.append(\\"FAILURE\\") return results"},{"question":"In a far away land, a powerful wizard has devised a special ritual to ward off a great evil. The ritual requires the arrangement of n magical stones in a specific order. Each stone has a magical power, represented by an integer value. To prepare the stones for the ritual, the wizard must rearrange them in such a way that the sum of the differences of consecutive stone values is minimized. Your task is to help the wizard by finding the optimal arrangement of the stones. Formally, given n integers P[1], P[2], ..., P[n] representing the power of each stone, find a permutation Q of these integers such that the sum: sum_{i=1}^{n-1} |Q[i+1] - Q[i]| is minimized. -----Input:----- - First line of the input consists of a single integer n. - Second line contains n space separated integers P[1] .. P[n], the power of each stone. -----Output:----- In a single line, print the permutation of P (any valid permutation that minimizes the sum). -----Constraints----- - 1 leq n leq 1000 - 1 leq P[i] leq 100000 -----Sample Input:----- 4 4 1 3 2 -----Sample Output:----- 1 2 3 4 -----EXPLANATION:----- To minimize the sum of the differences of consecutive elements, the stones should be arranged in ascending order (or descending order). Here, the stones are arranged as 1, 2, 3, 4, which results in the sum |2-1| + |3-2| + |4-3| = 1 + 1 + 1 = 3, which is the minimized value. Note that [4, 3, 2, 1] is also a valid output as it will also give the minimum possible sum.","solution":"def minimize_difference_sum(n, P): Rearranges the list of stone powers to minimize the sum of absolute differences of consecutive stone values. Parameters: n (int): The number of magical stones. P (list): A list of integers representing the power of each stone. Returns: list: The permutation of the stone powers that minimizes the difference sum. # Sort the stone powers in ascending order P_sorted = sorted(P) return P_sorted"},{"question":"Write a program to manage stock prices for a company. You are required to support the following operations: 1. **`update`**: Update the stock price for a given day. 2. **`maxRange`**: Query the maximum stock price in a given range of days. 3. **`minRange`**: Query the minimum stock price in a given range of days. # Input - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) — the number of days and the number of queries. - The second line contains `n` integers — the initial stock prices for each day. - The next `q` lines describe the queries where each query can be of three types: - `1 d p` — Update the stock price on day `d` to `p` (1 ≤ d ≤ n, 1 ≤ p ≤ 10^9) - `2 l r` — Query the maximum stock price from day `l` to day `r` (1 ≤ l ≤ r ≤ n) - `3 l r` — Query the minimum stock price from day `l` to day `r` (1 ≤ l ≤ r ≤ n) # Output - For each `maxRange` (type 2) query, output the maximum stock price in the given range. - For each `minRange` (type 3) query, output the minimum stock price in the given range. # Example Input: ``` 5 6 10 5 3 8 6 2 1 5 3 1 5 1 3 15 2 1 5 3 1 5 2 2 4 ``` Output: ``` 10 3 15 5 15 ``` # Explanation - **`2 1 5`**: Maximum value from day 1 to day 5 is `10`. - **`3 1 5`**: Minimum value from day 1 to day 5 is `3`. - **`1 3 15`**: Update the stock price on day `3` to `15`. - **`2 1 5`**: After the update, maximum value from day 1 to day 5 is `15`. - **`3 1 5`**: After the update, minimum value from day 1 to day 5 is `5`. - **`2 2 4`**: Maximum value from day 2 to day 4 is `15`. Note: You should implement an efficient solution that answers the queries in reasonable time considering the constraints.","solution":"class StockManager: def __init__(self, prices): Initialize the StockManager with the initial stock prices self.prices = prices def update(self, d, p): Update the stock price on day `d` to `p` self.prices[d - 1] = p def maxRange(self, l, r): Get the maximum stock price in the range from day `l` to day `r` return max(self.prices[l - 1:r]) def minRange(self, l, r): Get the minimum stock price in the range from day `l` to day `r` return min(self.prices[l - 1:r])"},{"question":"You are given a string of lowercase English letters. Each letter has a corresponding numerical value: \'a\' = 1, \'b\' = 2, ..., \'z\' = 26. An interesting property of the string is the \\"Adjacent Pairs Sum\\" (APS) which is defined as the sum of the values of all adjacent pairs of letters in the string. Your task is to calculate the APS for the given string. Input First line of input contains an integer n (1 ≤ n ≤ 100000) which denotes the length of the string. The second line contains a string s of length n consisting of lowercase English letters. Output Output the APS value of the given string. SAMPLE INPUT 5 abcde SAMPLE OUTPUT 40 Explanation The string \\"abcde\\" corresponds to the numerical values [1, 2, 3, 4, 5]. The APS is calculated as follows: - Pair (a, b): 1 + 2 = 3 - Pair (b, c): 2 + 3 = 5 - Pair (c, d): 3 + 4 = 7 - Pair (d, e): 4 + 5 = 9 So, the APS = 3 + 5 + 7 + 9 = 24.","solution":"def adjacent_pairs_sum(n, s): def char_to_value(char): return ord(char) - ord(\'a\') + 1 aps = 0 for i in range(n - 1): aps += char_to_value(s[i]) + char_to_value(s[i + 1]) return aps"},{"question":"You are building a to-do list application where tasks can have different priorities. Each task is represented as a dictionary with two keys: \\"task\\" and \\"priority\\". The \\"priority\\" key can have three possible values: \\"low\\", \\"medium\\", and \\"high\\". Implement a function that sorts a list of tasks based on their priority in descending order where \\"high\\" priority tasks come first, followed by \\"medium\\", and then \\"low\\". If two tasks have the same priority, they should retain their relative order from the original list. For example: ```python tasks = [ {\\"task\\": \\"clean\\", \\"priority\\": \\"medium\\"}, {\\"task\\": \\"wash dishes\\", \\"priority\\": \\"high\\"}, {\\"task\\": \\"do laundry\\", \\"priority\\": \\"low\\"}, {\\"task\\": \\"pay bills\\", \\"priority\\": \\"high\\"}, {\\"task\\": \\"do homework\\", \\"priority\\": \\"medium\\"}, ] sorted_tasks = [ {\\"task\\": \\"wash dishes\\", \\"priority\\": \\"high\\"}, {\\"task\\": \\"pay bills\\", \\"priority\\": \\"high\\"}, {\\"task\\": \\"clean\\", \\"priority\\": \\"medium\\"}, {\\"task\\": \\"do homework\\", \\"priority\\": \\"medium\\"}, {\\"task\\": \\"do laundry\\", \\"priority\\": \\"low\\"}, ] assert sort_tasks_by_priority(tasks) == sorted_tasks ``` Function signature: ```python def sort_tasks_by_priority(tasks: List[Dict[str, str]]) -> List[Dict[str, str]]: ```","solution":"from typing import List, Dict def sort_tasks_by_priority(tasks: List[Dict[str, str]]) -> List[Dict[str, str]]: Sorts a list of tasks based on their priority in descending order. priority_order = {\'high\': 1, \'medium\': 2, \'low\': 3} return sorted(tasks, key=lambda task: priority_order[task[\'priority\']])"},{"question":"You are designing a new transport system for a futuristic city. The city consists of N places connected by M bidirectional roads. Several roads might intersect, allowing travel from one to the other, but you are only given pairs of intersections that indicate which roads intersect. Your task is to devise a plan to ensure that from any one place, every other place is reachable directly or via a series of connections through intersections. -----Input----- The first line contains two integers N and M, where 1 ≤ N, M ≤ 2 * 10^5. The next M lines each contain two integers u and v (1 ≤ u, v ≤ N), representing a road directly connecting places u and v. The next line contains an integer I (1 ≤ I ≤ 2 * 10^5), representing the number of intersections. Each of the next I lines contains two integers x and y (1 ≤ x, y ≤ M), indicating that the x-th and y-th roads intersect. -----Output----- Output a single integer, the minimum number of additional roads necessary to ensure complete reachability among all places. -----Explanation----- In the first example, there are N=3 places and M=3 roads {1,2}, {2,3}, and {3,1}, creating a cycle where each place is reachable from any other. Since no additional roads are necessary, the output is 0. In the second example, there are N=4 places and M=2 roads {1,2} and {3,4}, which are not connected. The roads are connected via intersections, but to ensure reachability among all places, at least one more road is needed to connect {1,3} or {2,4}, hence the output is 1. -----Examples----- Sample Input 1: 3 3 1 2 2 3 3 1 2 1 2 2 3 Sample Output 1: 0 Sample Input 2: 4 2 1 2 3 4 1 1 2 Sample Output 2: 1","solution":"def find_min_additional_roads(N, M, roads, I, intersections): from collections import defaultdict import itertools # Adjacency list for the roads graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # To keep track of visited nodes visited = set() def dfs(node): stack = [node] component = set() while stack: cur = stack.pop() if cur not in visited: visited.add(cur) component.add(cur) for neighbor in graph[cur]: if neighbor not in visited: stack.append(neighbor) return component # Find all connected components components = [] for place in range(1, N + 1): if place not in visited: component = dfs(place) components.append(component) # Number of additional roads needed is the number of disconnected components - 1 return max(0, len(components) - 1)"},{"question":"You are given an array of N integers and an integer T. Determine the number of subarrays whose sum is exactly T. ----- Input ----- The first line of the input contains two integers N (1 leq N leq 10^5) and T (-10^9 leq T leq 10^9). The second line contains N integers a_i (-10^6 leq a_i leq 10^6). ----- Output ----- The first and only line of output should contain the number of subarrays whose sum is exactly T. ----- Examples ----- Sample Input 1: 5 5 1 2 3 -2 2 Sample Output 1: 2 Sample Input 2: 4 0 0 0 0 0 Sample Output 2: 10","solution":"def count_subarrays_with_sum(arr, T): Returns the number of subarrays whose sum is exactly T. from collections import defaultdict # Initialize variables current_sum = 0 subarray_count = 0 prefix_sums = defaultdict(int) prefix_sums[0] = 1 # To handle the case when subarray itself is exactly T for num in arr: current_sum += num # If there is a prefix sum such that current_sum - prefix_sum = T, we found a valid subarray subarray_count += prefix_sums.get(current_sum - T, 0) # Update the prefix_sums dictionary prefix_sums[current_sum] += 1 return subarray_count"},{"question":"Jordan is a student who often likes to take short walks along the riverbank near his home. One day, he notices a sequence of stones positioned in a straight line along the river. These stones form a special pattern according to the sequence in which they were placed. Each stone has a certain height, and Jordan wants to analyze the height of these stones in different segments. Jordan is given the heights of `n` stones in a sequence. He also has `m` queries, each representing a segment of stones (from stone `ai` to stone `bi` inclusively), and he needs to find the total height of the stones in each given segment. Input: The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 10^5), the number of stones and the number of queries. The second line contains `n` space-separated integers `h1, h2, ..., hn` (1 ≤ hi ≤ 10^3), where `hi` is the height of the i-th stone. Each of the following `m` lines contains two space-separated integers `ai` and `bi` (1 ≤ ai ≤ bi ≤ n) which are the bounds of the segment for which Jordan needs to find the total height. Output: For each query, output a single integer representing the sum of heights of the stones in the segment from `ai` to `bi`. Examples: Input: 6 3 4 2 3 7 8 6 1 3 2 5 4 6 Output: 9 20 21 Input: 5 2 1 2 3 4 5 1 5 2 3 Output: 15 5","solution":"def stone_heights(n, m, heights, queries): Computes the total height of the stones for each query segment. :param n: Number of stones :param m: Number of queries :param heights: List of stone heights :param queries: List of tuples representing the queries :return: List of sums of heights for each query prefix_sum = [0] * (n + 1) # Compute prefix sums for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + heights[i - 1] results = [] for ai, bi in queries: total_height = prefix_sum[bi] - prefix_sum[ai - 1] results.append(total_height) return results"},{"question":"Consider the following problem related to contiguous subarrays: You are given an array `A` consisting of `n` integers. You need to answer `Q` queries. Each query gives you two integers `L` and `R` (1-based indices), and you need to determine whether the sum of the elements of the subarray `A[L...R]` is divisible by a given integer `k`. For each query output \\"YES\\" if the sum is divisible by `k`, otherwise output \\"NO\\". Constraints: * 1 leq n leq 10^5 * 1 leq Q leq 10^5 * 1 leq A[i] leq 10^9 * 1 leq k leq 10^9 * 1 leq L leq R leq n Input: Input is given from Standard Input in the following format: ``` n k A1 A2 ... An Q L1 R1 L2 R2 : LQ RQ ``` Output: Output `Q` lines; in the i-th line print \\"YES\\" if the sum of the elements of the subarray `A[Li...Ri]` is divisible by `k`, otherwise print \\"NO\\". Example Input: ``` 5 3 1 2 3 4 5 3 1 3 2 5 1 5 ``` Output: ``` YES NO YES ```","solution":"def is_subarray_sum_divisible(n, k, A, queries): Determines if the sum of the elements of the subarray A[L...R] is divisible by k for each query. :param n: int, number of elements in the array A :param k: int, the divisor :param A: list of int, the array :param queries: list of tuples, each containing two integers (L, R) :return: list of str, \\"YES\\" or \\"NO\\" for each query # Precompute prefix sums prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + A[i - 1] results = [] for L, R in queries: # Note: Adjusting L and R from 1-based index to 0-based index subarray_sum = prefix_sum[R] - prefix_sum[L - 1] if subarray_sum % k == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Problem statement You are given an N times N matrix. The matrix is called a \\"special\\" matrix if the sum of the elements in each row, each column, and each of the two main diagonals is equal. Your task is to determine whether a given matrix is a \\"special\\" matrix or not. Constraint * 1 leq N leq 100 * Each element of the matrix is an integer such that -10^5 leq a_{ij} leq 10^5 Input The input follows the following format. All given numbers are integers. * The first line contains a single integer N . * The subsequent N lines each contain N integers, representing the matrix. Output Print \\"Yes\\" if the matrix is a \\"special\\" matrix. Otherwise, print \\"No\\". Example Input 3 2 9 4 7 5 3 6 1 8 Output Yes Input 3 1 2 3 4 5 6 7 8 9 Output No","solution":"def is_special_matrix(matrix): Determines if a given matrix is a \\"special\\" matrix. A matrix is special if the sum of the elements in each row, each column, and each of the two main diagonals is equal. Args: matrix (list of list of int): The N x N matrix Returns: str: \\"Yes\\" if the matrix is special, otherwise \\"No\\" N = len(matrix) # Calculate the sum of the first row target_sum = sum(matrix[0]) # Check all rows for i in range(1, N): if sum(matrix[i]) != target_sum: return \\"No\\" # Check all columns for j in range(N): if sum(matrix[i][j] for i in range(N)) != target_sum: return \\"No\\" # Check main diagonal if sum(matrix[i][i] for i in range(N)) != target_sum: return \\"No\\" # Check secondary diagonal if sum(matrix[i][N-i-1] for i in range(N)) != target_sum: return \\"No\\" return \\"Yes\\""},{"question":"Write To-Do List Aisha is an organized person and loves to keep track of her to-do lists. She wants to automate her task management process. Your job is to create a program that will help her to manage her tasks. Specifically, the program should be able to handle the following commands: 1. ADD x: Add a task with description x to the to-do list. 2. REMOVE n: Remove the nth task from the to-do list (1-based index). 3. LIST: List all the tasks in the to-do list in the order they were added. If the list is empty, display \\"No tasks\\". Input Format The first line contains an integer Q. Q lines follow, each containing one of the commands as described above. Constraints 1 <= Q <= 100 1 <= length of x <= 100 1 <= n <= number of tasks in the list (for REMOVE command) Output Format For each LIST command, print the tasks in the to-do list, each task on a new line. If the list is empty, print \\"No tasks\\". Sample Input 6 ADD Buy groceries ADD Call John LIST REMOVE 1 LIST REMOVE 1 Sample Output Buy groceries Call John Call John No tasks Explanation Initially, there are two tasks in the to-do list: \\"Buy groceries\\" and \\"Call John\\". The first LIST command prints both tasks. The REMOVE 1 command removes the first task, leaving \\"Call John\\". The second LIST command prints the remaining task. After removing the second task, the list is empty, and the final LIST command prints \\"No tasks\\".","solution":"def process_commands(commands): todo_list = [] results = [] for cmd in commands: if cmd.startswith(\\"ADD \\"): task = cmd[4:] todo_list.append(task) elif cmd.startswith(\\"REMOVE \\"): index = int(cmd[7:]) - 1 if 0 <= index < len(todo_list): todo_list.pop(index) elif cmd == \\"LIST\\": if todo_list: results.append(\\"n\\".join(todo_list)) else: results.append(\\"No tasks\\") return results"},{"question":"A company needs a program that will manage their employee\'s schedule efficiently. Given the starting and ending time of several meetings, your task is to find the minimum number of rooms required to host all the meetings. Input: First line contains the number of meetings N. Next N lines each contain two integers, Si and Ei, representing the starting and ending time of the i-th meeting (0 ≤ Si < Ei ≤ 10⁹). Output: Print a single integer representing the minimum number of rooms required to host all the meetings. Constraints: 1 ≤ N ≤ 1000 SAMPLE INPUT 3 10 20 15 25 5 15 SAMPLE OUTPUT 2 Explanation: In this example, meeting 1 starts at 10 and ends at 20, meeting 2 starts at 15 and ends at 25, and meeting 3 starts at 5 and ends at 15. - From 10 to 15, meeting 3 and meeting 1 overlap. Only one meeting can start after meeting 3 ends at 15, and you need another room for meeting 2 which itself overlaps with meeting 1 till 20 minutes. So, at least 2 rooms are needed.","solution":"def min_meeting_rooms(meetings): Determines the minimum number of rooms required to host all meetings if not meetings: return 0 # Separate the start and end times and sort them start_times = sorted([meeting[0] for meeting in meetings]) end_times = sorted([meeting[1] for meeting in meetings]) start_pointer = end_pointer = 0 used_rooms = 0 max_rooms = 0 while start_pointer < len(meetings): if start_times[start_pointer] < end_times[end_pointer]: used_rooms += 1 max_rooms = max(max_rooms, used_rooms) start_pointer += 1 else: used_rooms -= 1 end_pointer += 1 return max_rooms"},{"question":"A network of servers communicates with each other via bidirectional channels. Each server has a unique ID represented by an integer. The network topology can be described using an adjacency matrix, where `network[i][j]` is 1 if there is a direct channel connecting server `i` to server `j`, and 0 otherwise. Each channel between servers can fail randomly, and hence, it is required to monitor and ensure that the network remains connected even if a single channel fails. Your task is to write a program that, given the adjacency matrix of the network, determines if the network will remain connected after failing any single channel. A network is considered connected if there is a path between every pair of servers. After the removal of any single channel, if the network becomes disconnected, your program should return `False`. Otherwise, it should return `True`. # Input - An integer `n` (2 ≤ n ≤ 100) representing the number of servers. - A 2D `n x n` integer matrix `network` where each element is either 0 or 1 representing the network\'s adjacency matrix. # Output - A boolean value: `True` if the network remains connected after failing any single channel, otherwise `False`. # Example Input ``` 4 0 1 1 0 1 0 1 1 1 1 0 1 0 1 1 0 ``` # Example Output ``` False ``` # Explanation In the given example, failing any of the channels could lead to a scenario where at least one pair of servers cannot communicate, resulting in a disconnected network. # Constraints - The input matrix `network[i][j]` is symmetric, i.e., `network[i][j] == network[j][i]` for all i and j. - The diagonal elements of the matrix are 0, i.e., `network[i][i] == 0` for all i.","solution":"def is_connected(network): n = len(network) visited = [False] * n def dfs(node): stack = [node] while stack: u = stack.pop() if not visited[u]: visited[u] = True for v in range(n): if network[u][v] and not visited[v]: stack.append(v) # Check initial connectivity for i in range(n): if any(network[i]): dfs(i) break if not all(visited): return False # Check connectivity after removal of each edge for i in range(n): for j in range(i + 1, n): if network[i][j]: # Remove edge (i,j) network[i][j] = network[j][i] = 0 visited = [False] * n for k in range(n): if any(network[k]): dfs(k) break if not all(visited): return False # Restore edge (i,j) network[i][j] = network[j][i] = 1 return True"},{"question":"Doctor offers to play a game with you using an unusual deck of 2N cards. Each card has a positive integer printed on it. The deck is called \\"balanced\\" if the sum of integers on the first N cards is equal to the sum of the integers on the last N cards. For example, if N = 2 and the integers on the cards are [1, 3, 2, 2], this deck is balanced because the sum of the first half (1 + 3 = 4) is equal to the sum of the second half (2 + 2 = 4). You are provided a deck of 2N cards which is guaranteed to be balanced. Your task is to determine the integers appearing on the cards such that the given deck is balanced. ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, denoting the number of cards in one half of the deck. - The second line of each test case contains 2N space-separated integers, denoting the integers printed on the cards. ------ Output Format ------ For each test case, print \\"YES\\" if the given list of integers forms a balanced deck, otherwise print \\"NO\\". ------ Constraints ------- 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 1 ≤ card_value ≤ 10^{9} ----- Sample Input 1 ------ 2 2 1 3 2 2 3 1 2 3 6 1 2 ----- Sample Output 1 ------ YES NO ----- Explanation 1 ------ Test case 1: The deck [1, 3, 2, 2] is balanced because the sum of the first half is 4 (1 + 3) and the sum of the second half is also 4 (2 + 2). Test case 2: The deck [1, 2, 3, 6, 1, 2] is not balanced because the sum of the first half is 6 (1 + 2 + 3) and the sum of the second half is 9 (6 + 1 + 2).","solution":"def is_balanced_deck(cards): N = len(cards) // 2 first_half_sum = sum(cards[:N]) second_half_sum = sum(cards[N:]) return first_half_sum == second_half_sum def check_decks(test_cases): results = [] for N, cards in test_cases: if is_balanced_deck(cards): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input(input_list): T = int(input_list[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_list[index]) cards = list(map(int, input_list[index + 1].split())) test_cases.append((N, cards)) index += 2 return check_decks(test_cases)"},{"question":"Your car has broken down and you need to get it towed to the nearest town. You have a map of the countryside which shows all the towns and the roads connecting them. Each road has an associated cost for the towing service. You need to find out the minimum cost to get your car towed to the nearest town along a given route. -----Input----- The first line contains three integers T, R, and C, where T is the number of towns (2 leq T leq 100), R is the total number of roads connecting the towns, and C is the starting town where your car is currently broken down. The towns are numbered 0 through T-1. The next R lines each contain three integers A, B, and P, indicating a road between town A and town B with a towing cost of P (0 leq A, B < T, A neq B, 1 leq P leq 1000). You may assume that it is possible to get to any other town from the starting town, there are at most one road between any two towns, and roads do not form loops. -----Output----- Output a single line containing a single number: the minimum cost to get to the nearest town along a given route. -----Examples----- Sample Input 1: 4 4 0 0 1 10 1 2 20 2 3 30 0 3 25 Sample Output 1: 10 Sample Input 2: 6 7 2 2 3 15 2 4 10 4 5 25 3 1 17 2 1 19 1 0 30 3 0 50 Sample Output 2: 10","solution":"import heapq import sys def minimum_towing_cost(T, R, C, roads): graph = {i: [] for i in range(T)} for A, B, P in roads: graph[A].append((P, B)) graph[B].append((P, A)) # Dijkstra\'s algorithm to find the shortest path from the starting town C min_heap = [(0, C)] # (cost, node) min_cost = {i: sys.maxsize for i in range(T)} min_cost[C] = 0 seen = set() while min_heap: cost, node = heapq.heappop(min_heap) if node in seen: continue seen.add(node) for edge_cost, neighbor in graph[node]: new_cost = cost + edge_cost if new_cost < min_cost[neighbor]: min_cost[neighbor] = new_cost heapq.heappush(min_heap, (new_cost, neighbor)) min_distance = sys.maxsize for town, dist in min_cost.items(): if town != C: min_distance = min(min_distance, dist) return min_distance"},{"question":"Jagdish is a master at decoding cryptic messages. One day, he receives a message that was encoded using a unique alphabetic shifting rule. The rule is as follows: each letter in the message is shifted by a fixed number of positions in the alphabet. The shifting is circular, so after \'z\' comes \'a\'. Jagdish needs to decode the message by reversing the shifting process. Write a program to help Jagdish decode the given message based on the shifting rule provided to him. Input Format: The first line will contain an integer T, the number of test cases. Each of the next T lines will contain an integer K (the number of positions the alphabet was originally shifted) and a string S (the encoded message). Output Format: For each test case, output the decoded message. Constraints: 1 ≤ T ≤ 1000 0 ≤ K ≤ 25 1 ≤ length of S ≤ 10^3 S will contain only lowercase alphabetic characters (a-z). SAMPLE INPUT 3 2 cde 1 bcd 3 xyz SAMPLE OUTPUT abc abc uvw Explanation Case 1. The original message was shifted by 2 positions to the right, so \'c\' becomes \'a\', \'d\' becomes \'b\', and \'e\' becomes \'c\'. Case 2. The original message was shifted by 1 position to the right, so \'b\' becomes \'a\', \'c\' becomes \'b\', and \'d\' becomes \'c\'. Case 3. The original message was shifted by 3 positions to the right, so \'x\' becomes \'u\', \'y\' becomes \'v\', and \'z\' becomes \'w\'.","solution":"def decode_message(t, cases): decoded_messages = [] for k, s in cases: decoded_message = \'\'.join( chr((ord(char) - ord(\'a\') - k) % 26 + ord(\'a\')) for char in s ) decoded_messages.append(decoded_message) return decoded_messages # Example usage: # t = 3 # cases = [ # (2, \'cde\'), # (1, \'bcd\'), # (3, \'xyz\') # ] # print(decode_message(t, cases)) # Output: [\'abc\', \'abc\', \'uvw\']"},{"question":"Morty needs a way to manage and monitor the inventory levels in Rick’s garage. He has n items and each item has an associated integer weight. However, Morty can only handle checking k items at a time, so he wants to know the maximum weight he can gather by selecting any k consecutive items from the list. Given an integer array weights representing the weights of the items and an integer k, return the maximum weight of any k consecutive items. Example 1: Input: weights = [1, 3, 2, 5, 6, 2, 4], k = 3 Output: 13 Explanation: The maximum weight of any 3 consecutive items is from items at positions [4, 5, and 6] which have weights [5, 6, 2]. Summing these gives a total weight of 13. Example 2: Input: weights = [4, 2, 10, 8, 1], k = 2 Output: 18 Explanation: The maximum weight of any 2 consecutive items is from items at positions [3 and 4] which have weights [10, 8]. Summing these gives a total weight of 18. Example 3: Input: weights = [7, 3, 5, 2, 9], k = 1 Output: 9 Explanation: The maximum weight of any 1 consecutive item is from the item at position [5] which has weight 9. Constraints: n == weights.length 1 <= n <= 10^5 1 <= weights[i] <= 10^9 1 <= k <= n","solution":"def max_weight_of_k_consecutive_items(weights, k): Returns the maximum weight of any k consecutive items from the list of weights. n = len(weights) # Handle edge case where k is equal to n if k == n: return sum(weights) # Compute the sum of the first \'k\' weights max_sum = current_sum = sum(weights[:k]) # Use sliding window technique to find the maximum sum of k consecutive items for i in range(k, n): current_sum += weights[i] - weights[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Katie is a professional mountaineer and she loves exploring new mountain ranges. She recently came across an unusual mountain range and wanted to determine the maximum difference in altitude between any two points. The mountain range can be represented as an array of integers where each element represents the altitude at that point. Katie asks for your help to write a program that computes the maximum difference in altitude between any two points in the mountain range. The difference should be computed as the absolute difference between the altitudes of two points. -----Input----- The first line of the input contains a single integer n (2 ≤ n ≤ 1,000) — the number of points in the mountain range. The second line contains n integers separated by spaces representing the altitudes of the mountain range. The altitude of each point is an integer a (1 ≤ a ≤ 10,000). -----Output----- Print a single integer — the maximum difference in altitude between any two points in the mountain range. -----Examples----- Input 5 300 450 200 500 100 Output 400 Input 4 1000 1000 1000 1000 Output 0 -----Note----- In the first sample, the maximum difference in altitude is between the point with altitude 500 and the point with altitude 100, which results in an absolute difference of 400. In the second sample, all points have the same altitude, so the maximum difference is 0.","solution":"def maximum_altitude_difference(n, altitudes): Given an array of altitudes, this function calculates and returns the maximum difference in altitude between any two points. Args: n : int : number of points in the mountain range altitudes : list : list of altitudes at each point Returns: int : the maximum difference in altitude min_altitude = min(altitudes) max_altitude = max(altitudes) return max_altitude - min_altitude"},{"question":"A company has a large dataset of employee work hours. The company wants to identify if there are any employees who have worked more than 100 hours in a given week. Given a list of work hours for each employee for 7 days, write a program to check if any employee has exceeded the 100-hour work threshold. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - Each test case consists of a single line containing 7 integers separated by spaces - the number of hours worked by an employee on each day from Monday to Sunday. ------ Output Format ------ For each test case, output Yes if the employee has worked more than 100 hours in total for that week. Otherwise, output No. You may print each character of Yes and No in uppercase or lowercase (for example, yes, yEs, YES will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 1000 0 ≤ hours_worked ≤ 24 ----- Sample Input 1 ------ 3 8 8 8 8 8 8 8 10 10 10 10 10 10 10 12 13 14 15 10 7 8 ----- Sample Output 1 ------ No Yes Yes ----- Explanation 1 ------ Test Case 1: The total hours worked (8*7) are 56, which is less than 100. Test Case 2: The total hours worked (10*7) are 70, which is less than 100. Test Case 3: The total hours worked (12+13+14+15+10+7+8) are 79, which is less than 100.","solution":"def has_exceeded_100_hours(test_cases): results = [] for hours in test_cases: if sum(hours) > 100: results.append(\\"Yes\\") else: results.append(\\"No\\") return results # Read input function for testing, to simulate processing input as described def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T + 1): hours = list(map(int, lines[i].split())) test_cases.append(hours) return test_cases"},{"question":"You are given an integer array A of length N. You have to modify the array in-place such that the array becomes a zigzag array. An array is considered to be a zigzag array if the elements at even positions are greater than their adjacent elements and the elements at odd positions are smaller than their adjacent elements. Formally, for an array A, - A[1] > A[0], A[1] > A[2], A[3] > A[2], A[3] > A[4], ... - A[2] < A[1], A[2] < A[3], A[4] < A[3], A[4] < A[5], ... Implement a function to modify the array into a zigzag array. If the array has only one element, it is already considered a zigzag array. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. - The first line of each test case contains an integer N, denoting the length of the array. - The second line of each test case contains N space-separated integers, representing elements of the array A. ------ Output Format ------ For each test case, print the modified zigzag array. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^5 |A[i]| ≤ 10^9 The sum of N over all test cases will not exceed 10^6. ------ Sample Input 1 ------ 2 5 4 3 7 8 6 4 1 4 3 2 ------ Sample Output 1 ------ 3 7 4 8 6 1 4 2 3 ------ Explanation 1 ------ Test case 1: One possible zigzag array could be [3 7 4 8 6], where 7 > 3, 7 > 4, and 8 > 4, 8 > 6. Test case 2: One possible zigzag array could be [1 4 2 3], where 4 > 1, 4 > 2, and 3 > 2.","solution":"def zigzag_sort(arr): Modifies the array in-place to become a zigzag array. n = len(arr) for i in range(1, n): if i % 2 == 1: if arr[i] <= arr[i - 1]: arr[i], arr[i - 1] = arr[i - 1], arr[i] else: if arr[i] >= arr[i - 1]: arr[i], arr[i - 1] = arr[i - 1], arr[i] return arr def process_multiple_cases(test_cases): results = [] for case in test_cases: results.append(zigzag_sort(case)) return results"},{"question":"You are given a string containing only lowercase letters. Your task is to count the number of substrings that can be formed (including the string itself) where the letters are in alphabetical order. A substring is any contiguous sequence of characters in the string. ------ Input ------ The input consists of a single line containing the string. ------ Output ------ Output should consist of a single integer - the number of substrings where the letters are in non-decreasing alphabetical order. ------ Example ------ Input: abcdf Output: 15 ------ Explanation ------ The substrings are: \'a\', \'ab\', \'abc\', \'abcd\', \'abcdf\', \'b\', \'bc\', \'bcd\', \'bcdf\', \'c\', \'cd\', \'cdf\', \'d\', \'df\', \'f\'. All these substrings are in non-decreasing alphabetical order. ------ Scoring ------ Subtask 1 (9 points): The length of the string is 1 ≤ |s| ≤ 50. Subtask 2 (12 points): The length of the string is 1 ≤ |s| ≤ 100. Subtask 3 (34 points): The length of the string is 1 ≤ |s| ≤ 200. Subtask 4 (17 points): The length of the string is 1 ≤ |s| ≤ 500. Subtask 5 (28 points): The length of the string is 1 ≤ |s| ≤ 1000.","solution":"def count_alphabetical_substrings(s): Returns the count of substrings of \'s\' where the letters are in non-decreasing alphabetical order. n = len(s) count = 0 i = 0 # Traverse the string while i < n: length = 1 # Add substrings starting at position i, extending while we have a non-decreasing order while i + length < n and s[i + length - 1] <= s[i + length]: length += 1 # The number of substrings that can start at i with the current found length count += (length * (length + 1)) // 2 # Move i to the end of the current non-decreasing segment i += length return count"},{"question":"Polycarp is fascinated by numbers and their properties. One day, he discovered a new kind of interesting number. He defines a positive integer as interesting if it does not contain the digit \'7\' in its decimal representation. For instance, numbers like 48, 56, and 123 are interesting, but numbers like 73, 278, and 417 are not. Given a positive integer k, help Polycarp find the nearest larger or equal interesting number to k. In other words, find the smallest integer n ge k such that n does not contain the digit \'7\' in its decimal representation. -----Input----- The only line in the input contains an integer k (1 le k le 10000). -----Output----- Print the nearest greater or equal interesting number to the given number k. That is, print the smallest integer n ge k that does not contain the digit \'7\' in its decimal representation. -----Examples----- Input 70 Output 80 Input 123 Output 123 Input 678 Output 680 Input 1578 Output 1580","solution":"def is_interesting(n): Returns True if the number n does not contain the digit \'7\' return \'7\' not in str(n) def find_nearest_interesting(k): Returns the nearest larger or equal interesting number to k while not is_interesting(k): k += 1 return k"},{"question":"Given a circular list of integers, find the starting point where you can traverse the entire list (following the circular order) such that the cumulative sum of the elements is non-negative at every step. If no such starting point exists, return -1. Input The first line contains a single integer n (1 ≤ n ≤ 10000), the number of elements in the circular list. The second line contains n space-separated integers representing the elements of the circular list. Output Print the 0-based index of the starting point if such a point exists, otherwise print -1. Examples Input 5 1 -5 4 3 -2 Output 2 Input 4 -1 -2 -3 -4 Output -1 Input 6 2 3 -4 1 -1 2 Output 0 Note A circular list means that after the last element, the traversal continues from the first element. The problem requires that the cumulative sum remains non-negative during the entire traversal of the list. If there are multiple valid starting points, return the smallest index.","solution":"def find_starting_point(n, elements): total_sum = sum(elements) if total_sum < 0: return -1 current_sum = 0 starting_index = 0 for i in range(n): current_sum += elements[i] if current_sum < 0: current_sum = 0 starting_index = i + 1 return starting_index if sum(elements[starting_index:] + elements[:starting_index]) >= 0 else -1"},{"question":"Complete the method which returns the second smallest number in the given input array. If the array contains less than 2 unique numbers, return -1. Note: No empty arrays will be given. Examples ``` [4, 3, 2, 5, 8, 1, 6] --> 2 [12, 12, 10, 8] --> 10 [5, 3, 3, 3, 4] --> 4 [2, 2, 2, 2] --> -1 ```","solution":"def second_smallest(arr): Returns the second smallest number in the given input array. If the array contains less than 2 unique numbers, returns -1. unique_numbers = list(set(arr)) if len(unique_numbers) < 2: return -1 unique_numbers.sort() return unique_numbers[1]"},{"question":"You are developing a new software that assists users with organizing their schedules. The software needs to find out if a certain event can be scheduled given a list of already scheduled events. Each event has a start and end time, and one event cannot overlap with another. Your task is to write a function that determines if the new event can fit into the schedule without overlapping any existing events. -----Input----- The input consists of two parts. In the first part, an integer n (1 ≤ n ≤ 100) – the number of already scheduled events. In the second part, n pairs of integers. Each pair represents the start and end time of an event (0 ≤ start < end ≤ 1000). The pairs are given in chronological order, with the first event occurring before the second, the second before the third, and so on. Finally, the third part contains a pair of integers representing the start and end time of the new event to be scheduled (0 ≤ start < end ≤ 1000). -----Output----- Print \\"Yes\\" if the new event can be scheduled without overlapping any existing events, and \\"No\\" otherwise. -----Example----- Input 2 1 5 6 10 3 4 Output No Input 3 1 3 4 7 8 10 5 6 Output Yes -----Note----- An event (a, b) is considered to overlap with another event (c, d) if and only if the two ranges [a, b) and [c, d) have any numbers in common. This means, for example, that [1, 3) overlaps with [2, 5) and [1, 3), but does not overlap with [3, 5).","solution":"def can_schedule(n, events, new_event): Determines if the new event can be scheduled without overlapping any existing events. Parameters: n (int): The number of already scheduled events. events (list of tuples): The list of already scheduled events, where each event is a tuple (start, end). new_event (tuple): The new event to be scheduled, represented as a tuple (start, end). Returns: str: \\"Yes\\" if the new event can be scheduled without overlapping any existing events, otherwise \\"No\\". new_start, new_end = new_event for event in events: start, end = event if not (new_end <= start or new_start >= end): return \\"No\\" return \\"Yes\\""},{"question":"A certain amusement park has N different types of rides available. The park administration needs to understand the popularity of each ride to better allocate resources. To do this, they have collected data about the number of visitors for each type of ride during a single day. The data has been provided as a list, where each element represents the number of visitors for a specific ride. The park management wants to identify the ride that had the maximum number of visitors. If there are multiple rides with the same maximum number of visitors, the management is interested in the ride that appears first in the list. Write a program that takes in the number of rides N and a list of integers representing the number of visitors for each ride, and then outputs the 1-based index of the ride that had the maximum number of visitors. Consider the constraints: - 1 ≤ N ≤ 10^5 - 0 ≤ number of visitors for each ride ≤ 10^8 Input: - The first line contains a single integer N, the number of rides. - The second line contains N integers, where the i-th integer represents the number of visitors for the i-th ride. Output: - Print a single integer representing the 1-based index of the ride with the maximum number of visitors. If there are multiple such rides, print the index of the first one. -----Sample Input----- 5 100 200 200 150 100 -----Sample Output----- 2 Explanation: The rides have the following number of visitors: [100, 200, 200, 150, 100]. The maximum number of visitors is 200, and the first occurrence of 200 is at the 2nd ride. Therefore, the output is 2. Another Example: -----Sample Input----- 3 345 678 678 -----Sample Output----- 2 Here, the maximum number of visitors is 678, and the first occurrence is at the 2nd ride, so the output is 2.","solution":"def find_max_visitors_ride(N, visitors): Returns the 1-based index of the ride with the maximum number of visitors. If there are multiple rides with the same maximum, the first one is returned. Parameters: N (int): The number of rides. visitors (list of int): List containing the number of visitors for each ride. Returns: int: The 1-based index of the ride with the maximum number of visitors. max_visitors = -1 max_index = -1 for i in range(N): if visitors[i] > max_visitors: max_visitors = visitors[i] max_index = i return max_index + 1 # converting to 1-based index"},{"question":"A small robotics company has a fleet of delivery robots, each robot is assigned to carry a specific number of parcels. However, due to some logistical constraints, each robot can only carry a maximum of X parcels at a time. If a robot is assigned more parcels than it can carry, it will need to make multiple trips. Your task is to write a program that calculates the minimum number of trips each robot needs to make and the total number of trips for the entire fleet. -----Input----- The first line contains an integer N representing the number of robots in the fleet. The second line contains N integers separated by spaces where each integer represents the number of parcels assigned to each robot. The third line contains an integer X representing the maximum number of parcels each robot can carry per trip. -----Output----- Output N integers separated by spaces where each integer indicates the number of trips made by each corresponding robot. Following that, output the total number of trips made by all robots. -----Example----- Input: 5 10 20 30 40 50 10 Output: 1 2 3 4 5 15 Explanation: - The first robot needs to make 1 trip (10/10 = 1). - The second robot needs to make 2 trips (20/10 = 2). - The third robot needs to make 3 trips (30/10 = 3). - The fourth robot needs to make 4 trips (40/10 = 4). - The fifth robot needs to make 5 trips (50/10 = 5). The total number of trips is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def calculate_trips(n, parcels, x): Calculate the minimum number of trips each robot needs to make and the total number of trips. Parameters: n (int): Number of robots parcels (list): List of integers where each integer represents the number of parcels assigned to each robot x (int): Maximum number of parcels each robot can carry per trip Returns: tuple: A tuple containing two elements: - A list of integers where each integer indicates the number of trips made by each corresponding robot - An integer representing the total number of trips made by all robots trips = [(p + x - 1) // x for p in parcels] total_trips = sum(trips) return trips, total_trips # Example Usage n = 5 parcels = [10, 20, 30, 40, 50] x = 10 result = calculate_trips(n, parcels, x) print(result[0]) # [1, 2, 3, 4, 5] print(result[1]) # 15"},{"question":"Write a function `findMostFrequentElement` that takes a list of integers and returns the integer that appears most frequently. If there are multiple elements with the same frequency, return the smallest one. Example: ```[1, 3, 2, 3, 4, 2, 1, 2] -> 2 [1, 1, 2, 2, 3, 3] -> 1```","solution":"def findMostFrequentElement(lst): Returns the integer that appears most frequently in the list. If there are multiple elements with the same frequency, return the smallest one. from collections import Counter # Create a frequency dictionary frequency_dict = Counter(lst) # Find the maximum frequency max_frequency = max(frequency_dict.values()) # Find all elements with the maximum frequency most_frequent_elements = [k for k, v in frequency_dict.items() if v == max_frequency] # Return the smallest one return min(most_frequent_elements)"},{"question":"Eli-2 is working on a research project in a multi-dimensional space. She needs to map all unique points that exist at integer coordinates within a hypercube of side length `L`. The hypercube is defined in a `D`-dimensional space (1 ≤ D ≤ 10) and is centered at the origin point (0, 0, ..., 0). Given the side length `L` of the hypercube, calculate the total number of unique points with integer coordinates that lie within or on the boundary of this hypercube. A point `(x_1, x_2, ..., x_D)` lies within or on the boundary of the hypercube if `-L/2 <= x_i <= L/2` for all `1 <= i <= D`. Constraints: - The input is guaranteed to consist of multiple test cases. - For each test case: - 1 ≤ L ≤ 100 - 1 ≤ D ≤ 10 Input: The input is given from Standard Input in the following format: ``` Q L_1 D_1 L_2 D_2 ... L_Q D_Q ``` The input consists of multiple test cases. On line 1, `Q` represents the number of test cases. For each test case q (1 ≤ q ≤ Q), `L_q` and `D_q` are given separated by a single space. `L_q` and `D_q` represent the side length and the dimensionality of the hypercube for test case q respectively. Output: For each test case, print the number of unique integer coordinate points within or on the boundary of the hypercube. Examples: Input: ``` 3 2 1 2 2 2 3 ``` Output: ``` 3 9 27 ``` Input: ``` 2 4 1 4 2 ``` Output: ``` 5 25 ```","solution":"def count_hypercube_points(L, D): Returns the number of unique integer points within or on the boundary of a hypercube. The hypercube has side length L and exists in D-dimensional space. side_points = L + 1 # Points lie between -L/2 and L/2 inclusive return side_points ** D def process_input(input_data): input_lines = input_data.strip().split(\'n\') Q = int(input_lines[0]) results = [] for i in range(1, Q + 1): L, D = map(int, input_lines[i].split()) result = count_hypercube_points(L, D) results.append(result) return results"},{"question":"The city council is planning to create a new park and wants to optimize the arrangement of walking paths to minimize the distance people need to travel between various points in the park. The park can be represented as a grid of cells with `n` rows and `m` columns. Some cells contain obstacles, making them impassable. Given the grid representation of the park, determine the minimum distance from a specific starting cell to a specific destination cell. The movement is allowed in four cardinal directions: up, down, left, and right. If there\'s no valid path from the starting cell to the destination cell, return -1. Input Format: First line contains two integers `n` and `m` representing the number of rows and columns of the grid, respectively. The next `n` lines each contain `m` characters, where each character is either \'.\' (an empty cell) or \'#\' (an obstacle). The last line contains four integers `sx`, `sy`, `dx`, and `dy`, representing the row and column of the starting cell and the destination cell, respectively. The cell indices are 0-based. Output Format: Output a single integer representing the minimum distance from the starting cell to the destination cell. If the destination is unreachable, output -1. Constraints: 2 ≤ n, m ≤ 100 0 ≤ sx, sy, dx, dy < n, m SAMPLE INPUT 5 6 ...... .#..#. .#.#.. .#.... ...... 0 0 4 5 SAMPLE OUTPUT 9 Explanation: The grid represents a park where `.` indicates empty spaces and `#` indicates obstacles. The starting cell is at (0, 0) and the destination cell is at (4, 5). The minimum path can be achieved in 9 steps by navigating around obstacles.","solution":"from collections import deque def min_distance(n, m, grid, sx, sy, dx, dy): # Check if start or destination are obstacles if grid[sx][sy] == \'#\' or grid[dx][dy] == \'#\': return -1 # Directions array for moving in 4 possible directions (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the distances grid with infinity distances = [[float(\'inf\')] * m for _ in range(n)] distances[sx][sy] = 0 # Queue for BFS queue = deque([(sx, sy)]) while queue: x, y = queue.popleft() # Check if we reached the destination if x == dx and y == dy: return distances[x][y] # Explore all 4 possible directions for direction in directions: nx, ny = x + direction[0], y + direction[1] # Check if next position is within bounds and not an obstacle if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\' and distances[nx][ny] == float(\'inf\'): distances[nx][ny] = distances[x][y] + 1 queue.append((nx, ny)) # If the destination is unreachable return -1"},{"question":"# Encryptor and Decryptor You\'re working with a simple encryption mechanism that shifts each character in a string by a certain number of places in the alphabet. The alphabet is assumed to be circular, meaning after \'z\' comes \'a\', and the same rule applies for \'Z\' and \'A\'. Write two functions: **encrypt(text: str, shift: int) -> str**: - This function takes a string `text` and an integer `shift`. - It returns the string where each alphabetical character in `text` has been shifted `shift` places in the alphabet. - The function should preserve the case of each letter and leave any non-alphabetical characters unchanged. **decrypt(text: str, shift: int) -> str**: - This function takes an encrypted string `text` and an integer `shift`. - It returns the original string by shifting each alphabetical character in `text` back by `shift` places in the alphabet. - The function should preserve the case of each letter and leave any non-alphabetical characters unchanged. # Example: ```python encrypt(\\"Hello, World!\\", 3) # Output: \\"Khoor, Zruog!\\" decrypt(\\"Khoor, Zruog!\\", 3) # Output: \\"Hello, World!\\" ``` # Constraints: - `text` will be a non-empty string. - `shift` will be a non-negative integer. - The shift value can be greater than 26, which may require multiple wraps around the circular alphabet.","solution":"def encrypt(text: str, shift: int) -> str: result = [] for char in text: if char.isalpha(): shift_mod = shift % 26 # Ensure the shift works within the bounds of the alphabet if char.islower(): shifted_char = chr(((ord(char) - ord(\'a\') + shift_mod) % 26) + ord(\'a\')) else: shifted_char = chr(((ord(char) - ord(\'A\') + shift_mod) % 26) + ord(\'A\')) result.append(shifted_char) else: result.append(char) return \'\'.join(result) def decrypt(text: str, shift: int) -> str: result = [] for char in text: if char.isalpha(): shift_mod = shift % 26 # Ensure the shift works within the bounds of the alphabet if char.islower(): shifted_char = chr(((ord(char) - ord(\'a\') - shift_mod) % 26) + ord(\'a\')) else: shifted_char = chr(((ord(char) - ord(\'A\') - shift_mod) % 26) + ord(\'A\')) result.append(shifted_char) else: result.append(char) return \'\'.join(result)"},{"question":"You are given an array of strings where each string represents a date in the format \\"YYYY-MM-DD\\". Your task is to sort the array in ascending order by date. Example 1: Input: N = 3 arr[] = {\\"2023-03-15\\", \\"2021-07-19\\", \\"2022-01-01\\"} Output: {\\"2021-07-19\\", \\"2022-01-01\\", \\"2023-03-15\\"} Explanation: The dates are sorted from earliest to latest. Example 2: Input: N = 4 arr[] = {\\"2020-12-25\\", \\"2020-01-01\\", \\"2020-07-04\\", \\"2019-11-11\\"} Output: {\\"2019-11-11\\", \\"2020-01-01\\", \\"2020-07-04\\", \\"2020-12-25\\"} Explanation: The dates are sorted from earliest to latest. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function sortDates() that takes an array arr[] and an integer N as parameters and sort the array according to the above-given conditions. The function does not return anything. Expected Time Complexity: O(NlogN). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^{3} Each date is represented as a string in the format \\"YYYY-MM-DD\\".","solution":"def sortDates(dates): Given an array of date strings, sorts the dates in ascending order. Parameters: dates (list): A list of date strings in the format \\"YYYY-MM-DD\\". Returns: list: A sorted list of date strings. return sorted(dates)"},{"question":"Given a number N, write a function to find the N-th Catalan number. The Catalan numbers are a sequence of natural numbers defined by the following recurrence relation: C(0) = 1, and C(n+1) = Σ C(i) * C(n-i) for all i from 0 to n. The nth Catalan number can also be expressed directly in terms of binomial coefficients: C(n) = (1 / (n + 1)) * (2n choose n) Note: The result is expected to be very large, so compute the answer modulo 10^9 + 7. Example 1: Input: N = 4 Output: 14 Explanation: Catalan number C(4) is 14. Example 2: Input: N = 10 Output: 16796 Explanation: Catalan number C(10) is 16796. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `catalanNumber()` which takes integer N as input parameter and returns the N-th Catalan number. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^3","solution":"def catalanNumber(N): MOD = 10**9 + 7 if N == 0 or N == 1: return 1 catalan = [0] * (N + 1) catalan[0] = 1 catalan[1] = 1 for i in range(2, N + 1): for j in range(i): catalan[i] = (catalan[i] + (catalan[j] * catalan[i - 1 - j]) % MOD) % MOD return catalan[N]"},{"question":"Write a function to reverse a given array. Example 1: Input: 4 1 2 3 4 Output: 4 3 2 1 Example 2: Input: 6 10 20 30 40 50 60 Output: 60 50 40 30 20 10 Your Task: You don\'t need to read input or print anything. Your task is to complete the function reverseArray() which takes the array Arr[] and its size N as inputs and returns the reversed array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10 0 ≤ A[i] ≤ 100","solution":"def reverseArray(arr, n): Reverses the given array in-place. Parameters: arr (list): List of integers to be reversed. n (int): Length of the list. Returns: list: The reversed list. start = 0 end = n - 1 while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1 return arr"},{"question":"Write a function to determine the number of days required to water all parts of a rectangular garden using a single hose that extends from one side. The garden is represented as a grid of `N` rows and `M` columns. Each cell in the grid is either `0` (a dry cell) or `1` (a cell with water). When you water a cell, all cells in the same row to the left and same column above will also get watered. It takes one day to water a dry cell. Determine the minimum number of days required to water the entire garden. # Constraints * 1 ≤ N, M ≤ 1000 # Input The input consists of the following: * First line: Two integers `N` and `M` representing the dimensions of the garden. * Next `N` lines: Each line contains `M` integers separated by spaces representing the cells of the garden (0s and 1s). # Output Output a single integer: the minimum number of days required to water the entire garden. # Example Input ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output ``` 1 ``` Input ``` 4 4 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 ``` Output ``` 1 ``` Input ``` 2 2 0 0 0 0 ``` Output ``` 4 ```","solution":"def min_days_to_water_garden(N, M, garden): Determine the number of days required to water the entire garden. Parameters: N (int): Number of rows. M (int): Number of columns. garden (list of list of int): 2D list representing the garden with 0 as dry cells and 1 as already watered cells. Returns: int: Minimum number of days required to water the entire garden. # Count the number of days required to water all parts of the garden. days = 0 for row in garden: for cell in row: if cell == 0: days += 1 return days"},{"question":"You are managing a water supply network for a city that consists of N water stations. Each water station can be connected by a bidirectional pipe to another station. Due to a recent disaster, some of the pipes between the stations were damaged or destroyed. You need to ensure that water can still be supplied to all stations. For this, you will build a minimum number of additional pipes between stations to make the entire network connected (i.e., there should be a path from any water station to any other water station). Write a program to determine the minimum number of new pipes required to make the network connected. ------ Input Format ------ - The first line will contain two space-separated integers, N and M, denoting the number of water stations and the number of existing pipes, respectively. - The next M lines each contain two space-separated integers, u and v, indicating that there is an existing pipe connecting water station u and water station v. ------ Output Format ------ - Print a single integer, the minimum number of new pipes needed. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 0 ≤ M ≤ 10^{5} 1 ≤ u, v ≤ N u ≠ v - All edges mentioned in the input are unique. ----- Sample Input 1 ------ 6 3 1 2 2 3 4 5 ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ - The network can be connected with 2 new pipes: - Connect station 3 to station 4 - Connect station 4 to station 6","solution":"def find_min_new_pipes(N, M, connections): from collections import defaultdict, deque def bfs(start, visited, graph): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Create adjacency list for the graph graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) # Calculate the number of connected components visited = [False] * (N + 1) num_components = 0 for i in range(1, N + 1): if not visited[i]: bfs(i, visited, graph) num_components += 1 # Minimum new pipes required to connect the components is num_components - 1 return num_components - 1 # Example usage: # N, M = 6, 3 # connections = [(1, 2), (2, 3), (4, 5)] # print(find_min_new_pipes(N, M, connections)) # Output: 2"},{"question":"A palindrome is a string that reads the same backward as forward, such as \\"madam\\" or \\"racecar\\". Write a function to find the shortest palindrome you can form by adding characters in front of a given string. Function signature: `def shortest_palindrome(s: str) -> str` Inputs: - s (string): the original string which consists of lowercase English characters. Output: - Return the shortest palindrome string that could be formed by adding zero or more characters to the front of the given string. Constraints: - 1 ≤ length of s ≤ 10^5 Example: - Input: \\"abcd\\" Output: \\"dcbabcd\\" - Input: \\"aacecaaa\\" Output: \\"aaacecaaa\\" Explanation: For the first example, by adding \\"dcb\\" in front of \\"abcd\\", it becomes \\"dcbabcd\\" which is a palindrome. In the second example, no new characters need to be added as the string can be rearranged to form a palindrome by simply adding the leftover part \\"aa\\" at the start.","solution":"def shortest_palindrome(s: str) -> str: Returns the shortest palindrome by adding characters to the front of the given string. if s == s[::-1]: return s # Find the longest palindromic prefix for i in range(len(s), 0, -1): if s[:i] == s[:i][::-1]: break # Add the reverse of the suffix to the front return s[i:][::-1] + s"},{"question":"Write a function that takes a sentence as input and returns a dictionary with the frequency of each word in the sentence. The function should be case-insensitive and ignore any punctuation. The keys of the dictionary should be the words, and the values should be the number of times each word appears in the sentence. For Example: `word_frequency(\\"Hello, hello! How are you? You look great.\\")` should return `{\'hello\': 2, \'how\': 1, \'are\': 1, \'you\': 2, \'look\': 1, \'great\': 1}`","solution":"import string def word_frequency(sentence): Returns a dictionary with the frequency of each word in the sentence. The function is case-insensitive and ignores any punctuation. :param sentence: A string representing the sentence. :return: A dictionary with words as keys and their frequency as values. # Remove punctuation translator = str.maketrans(\'\', \'\', string.punctuation) cleaned_sentence = sentence.translate(translator) # Convert to lowercase and split into words words = cleaned_sentence.lower().split() # Count frequencies frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Lucy is given a list of integers and a target sum. She needs to determine the number of unique pairs of integers in the list that add up to the target sum. A pair is considered unique if there are no duplicate integer pairs, regardless of order. -----Input:----- - The first line contains two integers N and T where N is the number of integers in the list and T is the target sum. - The second line contains N space-separated integers representing the list. -----Output:----- - Output a single integer that represents the count of unique pairs that add up to the target sum. -----Constraints----- - 1 leq N leq 10^5 - -10^9 leq Each integer in the list leq 10^9 - -10^9 leq T leq 10^9 -----Sample Input:----- 5 6 1 5 7 -1 5 -----Sample Output:----- 2 -----Explanation:----- The unique pairs that sum up to 6 are (1, 5) and (7, -1). Note that (1, 5) is considered once even if the number 5 appears twice in the list.","solution":"def count_unique_pairs(nums, target_sum): Determines the number of unique pairs that sum up to the target sum. Args: nums (list): List of integers. target_sum (int): The target sum. Returns: int: The count of unique pairs. seen = set() pairs = set() for num in nums: complement = target_sum - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"Given a string s consisting of lowercase English letters, you have to find the most frequent character in the string. If there are multiple characters with the same maximum frequency, return the lexicographically smallest one among them. Write a function `most_frequent_character(s)` that takes in a string s and returns the most frequent character in s. If the input string is empty, return an empty string. -----Input----- The input consists of a single string s (0 leq |s| leq 1000) — the string for which you need to find the most frequent character. -----Output----- Output a single character — the most frequent character in the string. If the string is empty, output an empty string. -----Examples----- Input abracadabra Output a Input mississippi Output i Input xyzxyzxyz Output x Input abcde Output a Input aabbbccddeee Output b -----Note----- In the first example, the character \'a\' appears 5 times, which is more frequent than any other character. In the second example, both \'s\' and \'i\' appear 4 times, but \'i\' is lexicographically smaller. In the third example, \'x\', \'y\', and \'z\' all appear 3 times, but \'x\' is lexicographically smallest. In the fourth example, all characters appear exactly once, hence \'a\' is lexicographically smallest. In the fifth example, \'a\' and \'b\' both have the highest frequency (2), but \'b\' is lexicographically smallest.","solution":"def most_frequent_character(s): Returns the most frequent character in the string s. If multiple characters have the same maximum frequency, returns the lexicographically smallest one among them. If the string is empty, returns an empty string. if not s: return \'\' # Dictionary to store the frequency of each character frequency = {} for ch in s: if ch in frequency: frequency[ch] += 1 else: frequency[ch] = 1 # Find the maximum frequency max_freq = max(frequency.values()) # Find the smallest lexicographical character among the most frequent ones most_freq_char = min([ch for ch in frequency if frequency[ch] == max_freq]) return most_freq_char"},{"question":"You are responsible for navigating an autonomous robot through a maze. The maze is represented by a rectangular grid of size n times m. The robot starts at the top-left corner (1, 1) and needs to reach the bottom-right corner (n, m). The grid contains empty spaces and obstacles. An empty space is represented by \'.\', and an obstacle is represented by \'#\'. The robot can move up, down, left, or right. The robot cannot pass through obstacles and cannot move out of the grid boundaries. You need to determine if there is a way for the robot to reach the destination. **Input:** The first line of the input contains two integers n and m (1 leq n, m leq 100) denoting the dimensions of the grid. The next n lines contain m characters each, representing the grid. Each character is either \'.\' or \'#\'. **Output:** Print \\"YES\\" if there is a path from the top-left to the bottom-right. Otherwise, print \\"NO\\". **Example:** Input: ``` 5 6 . . . . # . # # . . # . . . . . . . . # # # . # . . . . . . ``` Output: ``` YES ``` Input: ``` 3 3 . # . # # . . . . ``` Output: ``` NO ``` **Explanation:** In the first example, there is a way to navigate from (1,1) to (5,6) avoiding all obstacles: (1,1) → (1,2) → (1,3) → (1,4) → (2,4) → (3,4) → (3,5) → (4,5) → (5,5) → (5,6). In the second example, there is no path available to reach (3,3) due to obstacles completely blocking the route. **Note:** - Ensure efficient navigation evaluation to handle edge cases with larger grids. - The robot must start at (1,1) and reach (n,m). - The grid always contains at least one cell and both starting and ending positions will be empty spaces (\'.\').","solution":"def is_path_exists(n, m, grid): Determines if there is a path from the top-left corner to the bottom-right corner in a given maze grid. Uses Depth First Search (DFS) for pathfinding. Args: n (int): The number of rows in the maze grid. m (int): The number of columns in the maze grid. grid (list of list of str): The maze grid where \'.\' denotes empty space and \'#\' denotes obstacles. Returns: str: \\"YES\\" if a path exists, \\"NO\\" otherwise. directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def valid_move(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' def dfs(x, y): if not valid_move(x, y) or visited[x][y]: return False if (x, y) == (n-1, m-1): return True visited[x][y] = True for dx, dy in directions: if dfs(x + dx, y + dy): return True return False visited = [[False] * m for _ in range(n)] return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"Implement a function called `balanced_brackets` that takes a single string argument containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and returns `True` if the string contains balanced pairs of brackets and `False` otherwise. A string containing balanced pairs means that for every opening bracket there is a corresponding closing bracket in the correct order. Examples: - balanced_brackets(\\"(){}[]\\") should return `True` because all the brackets are balanced. - balanced_brackets(\\"([{}])\\") should return `True` because all the brackets are balanced. - balanced_brackets(\\"({[)]}\\") should return `False` because the brackets are not properly balanced. - balanced_brackets(\\"(\\") should return `False` because there is an opening bracket without a corresponding closing bracket. Here are the example test cases for your implementation: ```python assert balanced_brackets(\\"(){}[]\\") == True assert balanced_brackets(\\"([{}])\\") == True assert balanced_brackets(\\"({[)]}\\") == False assert balanced_brackets(\\"(\\") == False ``` Note: - The function should return a boolean value. - Assume the input string will only contain the characters mentioned above and will not be empty.","solution":"def balanced_brackets(s): Returns True if the input string contains balanced pairs of brackets, False otherwise. stack = [] bracket_pairs = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_pairs.values(): stack.append(char) elif char in bracket_pairs.keys(): if stack == [] or stack.pop() != bracket_pairs[char]: return False else: return False return stack == []"},{"question":"The Grid Master is in charge of a square garden, organized as a grid with n rows and n columns. Each cell in the grid has a certain height, representing the elevation at that point in the garden. The heights can be either positive or negative integers. The Grid Master has decided to segment a sub-grid from this larger grid to construct a decorative pond. The pond should be a perfect square (i.e., a sub-grid with sides of equal length). The volume of water that this pond can hold is determined by the difference between the highest height and the lowest height within the selected sub-grid. Given the garden\'s height map and multiple queries, each specifying the top-left corner of the sub-grid and the side length of the sub-grid, determine the maximum volume of water that can be held in the pond for each query. Input The first line of the input contains an integer n — the size of the garden (1 ≤ n ≤ 500). The next n lines contain n space-separated integers hi,j — the heights of the grid cells (-109 ≤ hi,j ≤ 109). The third line contains an integer m — the number of queries (1 ≤ m ≤ 105). The next m lines contain the descriptions of the queries, each query is represented by three integers x, y, and s (1 ≤ x, y ≤ n, and 1 ≤ s ≤ min(n - x + 1, n - y + 1)) — the top-left corner (x, y) of the sub-grid and the side length s of the square sub-grid. Output For each query, print the answer on a separate line — the maximum volume of water that can be held in the sub-grid pond. Examples Input 5 1 2 3 4 5 5 -1 0 1 2 4 3 6 -2 1 5 5 7 3 2 10 -6 -5 4 1 3 1 1 3 2 2 2 3 3 2 Output 10 7 9 Note For the first query, the sub-grid from (1,1) of size 3x3 contains heights: 1 2 3 5 -1 0 4 3 6 The maximum height is 6 and the minimum height is -1, giving a volume difference of 6 - (-1) = 7. The valid sub-grid for each query should be carefully considered to compute the highest possible volume difference within the specified dimensions.","solution":"def max_volume(grid, queries): results = [] for x, y, s in queries: max_height = -float(\'inf\') min_height = float(\'inf\') for i in range(x-1, x-1 + s): for j in range(y-1, y-1 + s): max_height = max(max_height, grid[i][j]) min_height = min(min_height, grid[i][j]) volume = max_height - min_height results.append(volume) return results"},{"question":"Time Limit: 6 sec / Memory Limit: 128 MB Given an integer `n`, generate and print the n-th term of an arithmetic sequence where the first term is 2 and the common difference is 3. The n-th term should be printed as the output. # Input A single integer `n` (1 <= n <= 10^5). # Output Output a single integer — the n-th term of the arithmetic sequence. # Example Example 1 **Input:** ``` 1 ``` **Output:** ``` 2 ``` Example 2 **Input:** ``` 4 ``` **Output:** ``` 11 ``` # Explanation In an arithmetic sequence, the n-th term can be determined using the formula: `a + (n-1) * d` where `a` is the first term and `d` is the common difference. For Example 1: 1st term: 2 (since `a = 2`) For Example 2: 4th term: 2 + (4-1)*3 = 2 + 9 = 11","solution":"def nth_term_arithmetic_sequence(n): Given an integer n, generate and return the n-th term of an arithmetic sequence where the first term is 2 and the common difference is 3. first_term = 2 common_difference = 3 nth_term = first_term + (n - 1) * common_difference return nth_term"},{"question":"A popular persuasion technique involves a person posing as an emergency service operator trying to convince the “rescued” person to provide critical information. The technique relies on the ability to sound convincing, especially given the urgency of the situation. To simulate this technique in a computer program, you need to write a program that will determine whether an operator can sound convincing given a list of phrases they might use. A phrase is determined to sound convincing if: 1. It contains at least one of the keywords: \'urgent\', \'emergency\', \'help\', \'immediate\'. 2. It does not contain more than three exclamation marks in the entire phrase. 3. It does not have any sequences of three or more identical consecutive characters (e.g., \'aaa\', \'!!!\'). Your task is to write a program that checks whether each given phrase sounds convincing. Input The first line contains a single integer n (1 ≤ n ≤ 10), the number of phrases. Each of the following n lines contains a single phrase consisting of between 1 and 100 printable ASCII characters. Output For each phrase, print \\"Convincing\\" if the phrase meets all the criteria, and \\"Not Convincing\\" otherwise. Examples Input 3 This is an urgent request! Please respond immediately!! We need help!!! This is an emergency! Please respond as soon as possible! Output Convincing Not Convincing Not Convincing Note In the first example, the phrase contains the keyword \\"urgent\\" and does not contain more than three exclamation marks or sequences of three or more identical consecutive characters, thus it is \\"Convincing\\". In the second example, the phrase contains the keywords \\"help\\" and \\"emergency\\", but it fails the exclamation mark condition. In the third example, the phrase does not contain any of the keywords, so it also fails to be \\"Convincing\\".","solution":"def is_convincing(phrase): Check if the given phrase is convincing based on the criteria. keywords = {\'urgent\', \'emergency\', \'help\', \'immediate\'} exclamation_count = phrase.count(\'!\') has_keyword = any(keyword in phrase for keyword in keywords) no_triple_repeats = not any(char * 3 in phrase for char in set(phrase)) if has_keyword and exclamation_count <= 3 and no_triple_repeats: return \\"Convincing\\" else: return \\"Not Convincing\\" def check_phrases(n, phrases): Returns a list of results for the given phrases. return [is_convincing(phrase) for phrase in phrases]"},{"question":"Alice loves playing with numbers and finding beauty in the patterns they form. One day, she became interested in a special kind of sequence called \\"Beautiful Pairs\\". A sequence of numbers is called a Beautiful Pair if it is possible to rearrange the numbers in the sequence such that every pair of consecutive numbers have a common divisor greater than 1. Alice needs your help to determine whether given sequences are Beautiful Pairs or not. Input: The first line of the input contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the number of elements in the sequence. - The second line contains N space-separated integers representing the elements of the sequence. Output: For each test case, output on a separate line: \\"YES\\" if the sequence can be rearranged to form Beautiful Pairs, and \\"NO\\" otherwise. Constraints: 1 ≤ T ≤ 10^2 2 ≤ N ≤ 10^2 1 ≤ elements of the sequence ≤ 10^5 Sample Input: 3 4 6 9 15 25 3 3 5 7 5 18 24 30 12 36 Sample Output: YES NO YES","solution":"import math from collections import defaultdict def can_form_beautiful_pairs(sequence): def gcd(x, y): return math.gcd(x, y) n = len(sequence) if n == 1: return False sequence_sorted = sorted(sequence) for i in range(1, n): if gcd(sequence_sorted[i-1], sequence_sorted[i]) > 1: return True return False def beautiful_pairs(t, cases): results = [] for i in range(t): n, sequence = cases[i] results.append(\\"YES\\" if can_form_beautiful_pairs(sequence) else \\"NO\\") return results"},{"question":"Given a string s consisting of lowercase English letters and an integer n, your task is to find the length of the longest substring of s that contains exactly n distinct characters. If there is no such substring, return 0. -----Input----- The first line contains a string s (1 leq |s| leq 100,000). The second line contains an integer n (1 leq n leq 26). -----Output----- Output a single integer: the length of the longest substring containing exactly n distinct characters. -----Example----- Input abcba 2 Output 3 -----Explanation----- In the example, the longest substring with exactly 2 distinct characters is \\"bcb\\" which has length 3. Another such substring is \\"aba\\", also of length 3. -----Note----- To solve this problem, you can use the sliding window approach to efficiently find substrings with the desired properties.","solution":"def longest_substring_with_n_distinct_chars(s, n): from collections import defaultdict if n == 0: return 0 left = 0 right = 0 max_len = 0 char_count = defaultdict(int) while right < len(s): char_count[s[right]] += 1 while len(char_count) > n: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if len(char_count) == n: max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"A large retail store has a complex system for tracking the sales performance of its sales agents. Each sales agent belongs to a specific region and works during a particular shift. Each sale made by an agent is recorded with the agent\'s performance data. The store assigns bonuses to its agents based on three criteria: number of sales, total sales value, and average sale value. Each agent’s performance is evaluated in these criteria and ranked within their region and shift. Here is the problem you need to solve: Given data for multiple agents, regions, and shifts, find out the top-performing agent in each region for each shift based on the criteria as described below. For each region and shift combination, determine the agent who has the highest number of sales. If there are multiple agents with the same number of sales, choose the one with the highest total sales value. If there are still ties, choose the one with the highest average sale value. Input The first line contains two integers, m (1 ≤ m ≤ 1000) — number of regions and n (1 ≤ n ≤ 10000) — number of agents. The next line contains an integer p (1 ≤ p ≤ 10000) — number of sales transactions. The following m lines contain descriptions of the regions: \\"region_id name\\" — a unique region identifier (integer) and the region\'s name (string). The following n lines contain descriptions of the agents: \\"agent_id region_id shift\\" — a unique agent identifier (integer), their region identifier (integer), and their shift (string). Shifts are represented by \\"morning\\", \\"afternoon\\", or \\"night\\". The next p lines contain descriptions of sales transactions: \\"transaction_id agent_id sale_value\\" — a unique transaction identifier (integer), the agent identifier (integer) who made the sale, and the sale value (integer, representing the dollar amount). Output For each region and shift combination, print the region\'s name and shift, followed by the agent\'s ID. The output should be sorted by the region\'s name in alphabetical order, and within the same region, shifts should be sorted in this order: \\"morning\\", \\"afternoon\\", \\"night\\". Example Input 3 6 9 1 North 2 South 3 East 1 1 morning 2 1 afternoon 3 1 night 4 2 morning 5 2 night 6 3 afternoon 1 1 100 2 1 200 3 1 150 4 1 300 5 2 100 6 2 200 7 4 250 8 5 300 9 6 150 Output East afternoon 6 North morning 1 North afternoon 2 North night 3 South morning 4 South night 5 Note In the sample, agent 1 has the most sales in the North region during the morning shift, agent 2 has the most sales in the North region during the afternoon shift, and so on. The top agent in each region and shift combination is selected based on the given criteria.","solution":"def find_top_performing_agents(m, n, p, regions, agents, sales): from collections import defaultdict from operator import itemgetter region_dict = {} agent_dict = defaultdict(lambda: {\'region\': \'\', \'shift\': \'\', \'sales_count\': 0, \'total_sales\': 0}) region_shift_agents = defaultdict(list) for region_id, region_name in regions: region_dict[region_id] = region_name for agent_id, region_id, shift in agents: agent_dict[agent_id][\'region\'] = region_dict[region_id] agent_dict[agent_id][\'shift\'] = shift for _, agent_id, sale_value in sales: agent_dict[agent_id][\'sales_count\'] += 1 agent_dict[agent_id][\'total_sales\'] += sale_value for agent_id, data in agent_dict.items(): average_sale = data[\'total_sales\'] / data[\'sales_count\'] if data[\'sales_count\'] != 0 else 0 region_shift_agents[(data[\'region\'], data[\'shift\'])].append( (agent_id, data[\'sales_count\'], data[\'total_sales\'], average_sale)) result = [] for (region, shift), agent_list in region_shift_agents.items(): top_agent = sorted(agent_list, key=itemgetter(1, 2, 3), reverse=True)[0] result.append((region, shift, top_agent[0])) result.sort(key=lambda x: (x[0], [\'morning\', \'afternoon\', \'night\'].index(x[1]))) return result"},{"question":"Given an array of integers, find a subarray with the maximum possible sum of its elements. If there are multiple subarrays with the same maximum sum, return the one that appears first. The array can contain both positive and negative numbers. For example, if the input array is `[-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the subarray with the maximum sum is `[4, -1, 2, 1]`, which has a sum of `6`. Implement the function `maxSubArray(nums: List[int]) -> List[int]` to solve this problem. Follow these guidelines: 1. Define `nums` as the input array. 2. Compute the subarray with the maximum possible sum. 3. Return the subarray as a list of integers. # Examples Example 1: Input: `nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]` Output: `[4, -1, 2, 1]` Explanation: The subarray `[4, -1, 2, 1]` has the largest sum `6`. Example 2: Input: `nums = [1]` Output: `[1]` Explanation: The subarray `[1]` is the only element and has the largest sum `1`. Example 3: Input: `nums = [5, 4, -1, 7, 8]` Output: `[5, 4, -1, 7, 8]` Explanation: The subarray `[5, 4, -1, 7, 8]` has the largest sum `23`. # Constraints: - 1 <= len(nums) <= 3 * 10^4 - -10^4 <= nums[i] <= 10^4","solution":"from typing import List def maxSubArray(nums: List[int]) -> List[int]: if not nums: return [] max_sum = float(\'-inf\') current_sum = 0 start = 0 end = 0 temp_start = 0 for i, num in enumerate(nums): current_sum += num if current_sum > max_sum: max_sum = current_sum start = temp_start end = i if current_sum < 0: current_sum = 0 temp_start = i + 1 return nums[start:end+1]"},{"question":"# Problem Description In a distant land called Algomoria, there is a unique custom in which citizens celebrate the Algorithm Festival every year. As part of the festivities, a special game involving string transformation is played. The game involves transforming a given string into a palindrome by removing the minimum number of characters. A palindrome is a string that reads the same forwards and backwards. You, as a renowned expert in algorithms, have been asked to write a program to help the citizens win this game by calculating the minimum number of characters that need to be removed from the given string to make it a palindrome. # Input The input contains a single string s (1 ≤ |s| ≤ 1,000), which consists of lowercase English letters only. # Output Print the only integer — the minimum number of characters that need to be removed to transform the given string into a palindrome. # Examples Input ``` abca ``` Output ``` 1 ``` Input ``` racecar ``` Output ``` 0 ``` # Note 1. In the first example, removing character \'b\' or \'c\' will make the string \\"aca\\" or \\"aba\\", both of which are palindromes. 2. In the second example, the string is already a palindrome, so no characters need to be removed.","solution":"def min_deletions_to_palindrome(s): Returns the minimum number of characters that need to be removed to make the given string a palindrome. def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n+1): for i in range(n-length+1): j = i+length-1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return dp[0][n-1] lps_length = longest_palindromic_subsequence(s) return len(s) - lps_length"},{"question":"You are given an array of N integers and an integer K. Write a program that determines whether there exists a pair of indices (i, j) such that 1 ≤ i < j ≤ N and the sum of the elements at these indices is exactly K. The program should output \\"YES\\" if such a pair exists, and \\"NO\\" otherwise. Constraints: - 2 ≤ N ≤ 100000 - -10^9 ≤ array elements ≤ 10^9 - -10^9 ≤ K ≤ 10^9 Input: The input consists of two lines. - The first line contains two integers N and K. - The second line contains N integers representing the elements of the array. Output: Output \\"YES\\" if there exists a pair of indices whose sum is exactly K, otherwise output \\"NO\\". Examples: Input: 5 9 2 4 5 1 6 Output: YES Input: 4 20 3 7 4 8 Output: NO Input: 6 0 1 -1 2 -2 3 -3 Output: YES Note: Aim to produce an efficient solution with a time complexity better than O(N^2).","solution":"def has_pair_with_sum(arr, K): Determines if there are any two numbers in the array that sum to K. Parameters: arr (list): List of integers. K (int): The target sum. Returns: str: \\"YES\\" if there exists a pair whose sum is K, otherwise \\"NO\\". seen = set() for number in arr: if K - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"You are helping to organize a conference, and one of your tasks is to distribute conference passes to the participants. Each participant has a unique ID number, and some IDs are duplicated because a few participants signed up more than once. You need to identify and remove these duplicate entries from the participant list efficiently. After removing duplicates, the IDs should be printed in ascending order. -----Input----- The input consists of: - One line containing an integer n (1 le n le 10^5), the number of participant IDs. - One line containing n integers id_1, ldots, id_n (1 le id_i le 10^9 for all i), the list of participant IDs. -----Output----- The output should be a single line with the unique participant IDs in ascending order, separated by spaces. -----Examples----- Sample Input 1: 10 5 3 8 5 2 9 1 2 4 3 Sample Output 1: 1 2 3 4 5 8 9 Sample Input 2: 6 10 20 10 30 20 40 Sample Output 2: 10 20 30 40","solution":"def unique_sorted_ids(n, ids): Takes the number of IDs and a list of participant IDs. Returns unique participant IDs in ascending order. unique_ids = sorted(set(ids)) return unique_ids"},{"question":"In a warehouse, there are M packages that need to be delivered to different locations in a city. Each package has a specified weight and a deadline by which it must be delivered. The delivery agent can carry a certain maximum weight, denoted by W, and cannot carry more than this weight at any given time. The delivery agent forms a delivery route by selecting any number of packages such that the total weight does not exceed W and can deliver them based on their deadlines. The objective is to maximize the number of successful deliveries while selecting packages within the weight limit. Your task is to help the delivery agent by writing a program that determines the maximum number of packages that can be successfully delivered. Input The input consists of multiple test cases. Each test case starts with two integers M and W (1 ≤ M ≤ 100, 1 ≤ W ≤ 1000), where M is the number of packages and W is the maximum weight that the delivery agent can carry. The next M lines each contain two integers, Wi and Di (1 ≤ Wi ≤ 100, 1 ≤ Di ≤ 100), where Wi is the weight of the i-th package and Di is the deadline for delivering this package. The input is terminated by a line containing two zeros. Output For each test case, print the maximum number of packages that can be successfully delivered. Example Input 3 5 3 5 2 2 1 1 4 10 1 2 2 4 3 6 4 8 0 0 Output 2 4","solution":"def maximize_deliveries(test_cases): Function to determine the maximum number of packages that can be successfully delivered given multiple test cases. Args: test_cases: List of tuples containing M, W and a list of (Wi, Di) tuples for each test case. Returns: List of integers where each integer is the maximum number of packages that can be successfully delivered for a test case. results = [] for case in test_cases: M, W, packages = case packages.sort(key=lambda x: x[1]) # sort packages by their deadlines dp = [[0] * (W + 1) for _ in range(M + 1)] for i in range(1, M + 1): wi, di = packages[i-1] for w in range(W + 1): if wi <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-wi] + 1) else: dp[i][w] = dp[i-1][w] results.append(dp[M][W]) return results def parse_input(input_str): Parse the input string to extract the test cases. Args: input_str: String containing the input data. Returns: List of test cases. Each test case is a tuple containing M, W and a list of (Wi, Di) tuples. lines = input_str.strip().split(\'n\') test_cases = [] i = 0 while i < len(lines): M, W = map(int, lines[i].split()) if M == 0 and W == 0: break packages = [] for j in range(i + 1, i + 1 + M): Wi, Di = map(int, lines[j].split()) packages.append((Wi, Di)) test_cases.append((M, W, packages)) i += M + 1 return test_cases def main(input_str): test_cases = parse_input(input_str) results = maximize_deliveries(test_cases) for result in results: print(result)"},{"question":"You are given an array of integers. A segment of this array is called \\"fortunate\\" if the sum of its elements is greater than or equal to a given number k. Your task is to find the maximum length of a fortunate segment in the array. Input - The first line contains two integers n and k (1 ≤ n ≤ 100000, 1 ≤ k ≤ 10^9) — the length of the array and the required sum. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output - Output a single integer representing the maximum length of a fortunate segment. If no such segment exists, print 0. Examples Input 5 10 1 2 3 4 5 Output 4 Input 6 15 1 2 3 4 5 6 Output 5 Input 3 100 1 2 3 Output 0 Explanation In the first example, the longest fortunate segment with a sum at least 10 is [1, 2, 3, 4] with a length of 4. In the second example, the longest fortunate segment with a sum at least 15 is [1, 2, 3, 4, 5] with a length of 5. In the third example, no segment has a sum of at least 100, so the output is 0.","solution":"def max_fortunate_segment_length(n, k, array): Returns the maximum length of a fortunate segment in the array where the sum of its elements is greater than or equal to a given number k. max_length = 0 current_sum = 0 left = 0 for right in range(n): current_sum += array[right] while current_sum >= k: max_length = max(max_length, right - left + 1) current_sum -= array[left] left += 1 return max_length"},{"question":"A group of students is playing a game with string sequences. Each string is composed of lowercase alphabetical characters (\'a\' to \'z\'). The objective of the game is to find the length of the longest substring without repeating characters for each input string. ---Input--- The first line of the input contains a single integer T, the number of test cases. T test cases follow. Each of the next T lines contains a single string consisting of lowercase letters only. ---Output--- For each test case, output a single line containing the length of the longest substring without repeating characters. ---Constraints--- 1 ≤ T ≤ 100000 1 ≤ Length of each string ≤ 100000 ---Example--- Input: 3 abcabcbb bbbbb pwwkew Output: 3 1 3 ---Explanation--- Case 1: The answer is \\"abc\\", with the length of 3. Case 2: The answer is \\"b\\", with the length of 1. Case 3: The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters for the input string s. n = len(s) seen = {} max_length = 0 start = 0 for end in range(n): if s[end] in seen: start = max(start, seen[s[end]] + 1) seen[s[end]] = end max_length = max(max_length, end - start + 1) return max_length def process_input(T: int, strings: list) -> list: Processes multiple strings to find the length of the longest substring without repeating characters for each string. results = [] for s in strings: results.append(length_of_longest_substring(s)) return results"},{"question":"Your company maintains a legacy system that handles large lists of user data. This legacy system was built in a time when computing resources were limited, so it processes data in batches by splitting them into smaller lists. Each batch of data is then processed separately and the results are combined at the end. You have been tasked with modernizing this data processing system. Your first step is to create a function that splits a given list of user data into batches of a specified size. The function will also return a count of the total number of batches created. # Function Signature ```python def batch_splitter(data: List[int], batch_size: int) -> Tuple[List[List[int]], int]: pass ``` # Input - `data`: a list of integers representing user data. (1 ≤ len(data) ≤ 10^5) - `batch_size`: an integer representing the size of each batch. (1 ≤ batch_size ≤ len(data)) # Output - A tuple consisting of: - A list of lists, where each list contains integers representing a batch of data. - An integer representing the number of batches created. # Example ```python # Example 1 data = [1, 2, 3, 4, 5, 6, 7, 8, 9] batch_size = 3 # Expected output: ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) # Example 2 data = [10, 20, 30, 40, 50] batch_size = 2 # Expected output: ([[10, 20], [30, 40], [50]], 3) ``` # Instructions 1. Implement the `batch_splitter` function. 2. Ensure that the last batch may contain fewer than `batch_size` elements if the total number of elements is not divisible by `batch_size`. 3. The batches should be created in the order in which the elements appear in the input list `data`. 4. Write efficient code to handle large lists of data within the provided constraints. # Notes - Focus on clarity and performance when designing your function. - Feel free to use any standard library functions that facilitate your solution. - Ensure that your function adheres strictly to the input and output specifications.","solution":"from typing import List, Tuple def batch_splitter(data: List[int], batch_size: int) -> Tuple[List[List[int]], int]: Splits the input data into batches of specified size. Args: data (List[int]): The list of user data. batch_size (int): The size of each batch. Returns: Tuple[List[List[int]], int]: A tuple containing the list of batches and the count of batches. batches = [data[i:i + batch_size] for i in range(0, len(data), batch_size)] return (batches, len(batches))"},{"question":"Write a function that accepts an array of non-negative integers and a target sum. The function should return all unique quadruplets (four distinct integers) in the array that sum up to the target sum. Each quadruplet should be returned in a sorted order, and the quadruplets themselves should also be sorted in non-descending order. * Assume the input array and target sum will have no more than 2000 elements and will fit in memory. * Your function should return the quadruplets in the form of a 2D list. Example: ```python Input: [1, 0, -1, 0, -2, 2], 0 Output: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] ``` Example: ```python Input: [2, 2, 2, 2, 2], 8 Output: [[2, 2, 2, 2]] ```","solution":"def four_sum(nums, target): Returns all unique quadruplets that sum up to the target sum. :param nums: List[int] - A list of non-negative integers :param target: int - The target sum :return: List[List[int]] - A list of unique quadruplets nums.sort() result = [] n = len(nums) for i in range(n): for j in range(i + 1, n): left = j + 1 right = n - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: quad = [nums[i], nums[j], nums[left], nums[right]] if quad not in result: result.append(quad) left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return result"},{"question":"You are given a list of integers representing the heights of students standing in a line. A teacher wants to be able to mark students who are cresting, that is, higher than both their immediate neighbors. Your task is to write a function that identifies the cresting students. A student is cresting if their height is larger than the student directly to their left and the student directly to their right. The first and last students in the line are not considered cresting because they don\'t have both neighbors. Constraints * The list of heights will have at least 3 students and at most 1000 students. * Each height is a unique integer between 1 and 10000 inclusive. Input Input is given from Standard Input in the following format: n height1 height2 ... heightn Output Print the indices (1-based) of all cresting students, separated by spaces. If there are no cresting students, print `NONE`. Examples Input 5 1 3 2 5 4 Output 2 4 Input 6 10 20 30 40 50 60 Output NONE","solution":"def find_cresting_students(n, heights): cresting_indices = [] for i in range(1, n - 1): if heights[i] > heights[i-1] and heights[i] > heights[i+1]: cresting_indices.append(i + 1) # convert to 1-based index if not cresting_indices: print(\\"NONE\\") else: print(\\" \\".join(map(str, cresting_indices)))"},{"question":"A telecommunications company is setting up a new routing system for its network of hubs. Each node in the network represents a hub and each edge represents a direct connection between two hubs with a specified latency. The company wants to ensure that there is a way to quickly determine the shortest path latency for data to travel between any two given hubs. You are required to write a function that processes two types of operations: 1. Add a direct connection between two hubs with a specified latency. 2. Query the shortest path latency between two hubs. Initially, there are no direct connections between any hubs. Input The input starts with two integers n (2 ≤ n ≤ 1000) and q (1 ≤ q ≤ 10000), where n is the number of hubs and q is the number of operations. Each of the next q lines describes an operation and can be one of the following: - \\"ADD a b d\\" which adds a direct connection between hub a and hub b with latency d (1 ≤ d ≤ 1000). If there is already a connection between these hubs, update it with the new latency. - \\"QUERY a b\\" which queries for the shortest latency between hub a and hub b. If there is no path between them, return -1. Output For each \\"QUERY\\" operation, output the shortest path latency between the two hubs or -1 if no path exists. Example Input 5 7 ADD 1 2 10 ADD 2 3 5 ADD 3 4 7 QUERY 1 4 ADD 1 4 15 ADD 4 5 1 QUERY 1 5 Output 22 16 Explanation In this sample, after the first set of ‘ADD’ operations, the network is built. The first QUERY asks for the shortest path from hub 1 to hub 4, which passes through hubs 2 and 3 with a total latency of 22. After the second set of \'ADD\' operations, the path from hub 1 to hub 5 becomes 16 due to the newly added direct connection between hub 1 and hub 4 with latency 15.","solution":"import heapq def add_edge(graph, a, b, d): if a not in graph: graph[a] = {} if b not in graph: graph[b] = {} graph[a][b] = d graph[b][a] = d def dijkstra(graph, start): distances = {node: float(\'inf\') for node in graph} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def process_operations(n, q, operations): graph = {} results = [] for operation in operations: parts = operation.split() command = parts[0] a = int(parts[1]) b = int(parts[2]) if command == \\"ADD\\": d = int(parts[3]) add_edge(graph, a, b, d) elif command == \\"QUERY\\": if a not in graph or b not in graph: results.append(-1) else: distances = dijkstra(graph, a) result = distances.get(b, float(\'inf\')) results.append(result if result != float(\'inf\') else -1) return results"},{"question":"In a high-tech supermarket, the stock of goods is managed through an inventory system. The system maintains a record of the quantity of each item type in stock. Additionally, there are special promotion days where customers can get exclusive discounts on selected item types. To support the operations, the system needs to handle various queries related to the stock and promotions. There are three types of queries that the system should process: 1. `Add X Y` - Add Y units of item type X to the inventory. 2. `Remove X Y` - Remove Y units of item type X from the inventory. If the current stock of item type X is less than Y, remove all available units. 3. `Promote X` - Check if item type X is part of the current promotion. If it is, return \\"Yes\\"; otherwise, return \\"No\\". Write a function to handle these queries and output the results of the queries of the third type. Input: First line contains an integer N, the number of queries. Next line contains an integer P, the number of item types currently under promotion. Next P lines list the item types under promotion (one per line). Next N lines contain N queries of the format described above. Output: Output consists of several lines. For each query of type `Promote`, output either \\"Yes\\" or \\"No\\". Constraints: 1 ≤ N ≤ 10^5 1 ≤ P ≤ 10^3 Item types are denoted by strings of length ≤ 10 consisting of uppercase letters only. 1 ≤ Number of units (Y) in Add/Remove queries ≤ 10^4 Example Input: 7 2 MILK BREAD Add MILK 100 Add BREAD 50 Promote MILK Remove BREAD 30 Promote BREAD Remove MILK 200 Promote EGGS Example Output: Yes Yes No","solution":"def supermarket_management(N, P, promotions, queries): inventory = {} promotion_set = set(promotions) results = [] for query in queries: parts = query.split() command = parts[0] item = parts[1] if command == \\"Add\\": quantity = int(parts[2]) if item not in inventory: inventory[item] = 0 inventory[item] += quantity elif command == \\"Remove\\": quantity = int(parts[2]) if item in inventory: if inventory[item] > quantity: inventory[item] -= quantity else: inventory[item] = 0 elif command == \\"Promote\\": if item in promotion_set: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Problem Statement You are given a list of events happening at different times during the day. Each event is specified by a start time, end time, and a happiness value it provides if you attend it. Your task is to determine the maximum possible happiness value you can achieve if you are allowed to attend as many events as you want, but you cannot attend two events that overlap in time. Input The input consists of multiple datasets. The format of each dataset is as follows: n s_1 e_1 h_1 ... s_n e_n h_n The first line contains an integer n (1 leq n leq 10,000), which is the number of events. Then n lines follow, each of which contains three integers: s_i (0 leq s_i < 24 * 60), e_i (0 < e_i leq 24 * 60, e_i > s_i), and h_i (1 leq h_i leq 1,000). s_i and e_i denote the start and end times of the i-th event in minutes from the start of the day (e.g., 0 represents 00:00 and 1439 represents 23:59), and h_i is the happiness value of attending the i-th event. The input terminates when n=0. Your program must not output anything for this case. Output For each dataset, print the maximum possible happiness value you can achieve, each in a new line. Example Input 3 60 120 100 180 240 200 150 210 150 3 120 180 50 180 240 100 300 360 150 0 Output 300 300","solution":"def max_happiness(events): # Sort events based on their end times events.sort(key=lambda x: x[1]) # Initialize dp array where dp[i] will store the maximum happiness # value till the i-th event n = len(events) dp = [0] * n dp[0] = events[0][2] for i in range(1, n): # Find maximum happiness not including the current event dp[i] = max(dp[i-1], events[i][2]) # Try to include this event and find the maximum happiness for j in range(i-1, -1, -1): if events[j][1] <= events[i][0]: dp[i] = max(dp[i], dp[j] + events[i][2]) break return max(dp) def process_input(data): results = [] idx = 0 while idx < len(data): n = int(data[idx]) if n == 0: break events = [] idx += 1 for _ in range(n): events.append(list(map(int, data[idx].split()))) idx += 1 results.append(max_happiness(events)) return results"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},Y={class:"search-container"},F={class:"card-container"},C={key:0,class:"empty-state"},P=["disabled"],j={key:0},z={key:1};function L(s,e,u,p,r,a){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",Y,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",F,[(n(!0),i(_,null,w(a.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",C,' No results found for "'+h(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",j,"See more"))],8,P)):l("",!0)])}const R=d(A,[["render",L],["__scopeId","data-v-a09883d2"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/5.md","filePath":"chatai/5.md"}'),M={name:"chatai/5.md"},U=Object.assign(M,{setup(s){return(e,u)=>(n(),i("div",null,[x(R)]))}});export{B as __pageData,U as default};
